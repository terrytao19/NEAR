
NEAR_ANCHOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012304  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  080123c8  080123c8  000133c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012a80  08012a80  000143a4  2**0
                  CONTENTS
  4 .ARM          00000000  08012a80  08012a80  000143a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012a80  08012a80  000143a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012a80  08012a80  00013a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012a84  08012a84  00013a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003a4  20000000  08012a88  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a20  200003a8  08012e2c  000143a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001dc8  08012e2c  00014dc8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000143a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eaf7  00000000  00000000  000143cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cf5  00000000  00000000  00032ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb8  00000000  00000000  00037bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000155e  00000000  00000000  00039770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007d23  00000000  00000000  0003acce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000247b1  00000000  00000000  000429f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad0f8  00000000  00000000  000671a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011429a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074d8  00000000  00000000  001142e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0011b7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000103  00000000  00000000  0011b80b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200003a8 	.word	0x200003a8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080123ac 	.word	0x080123ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200003ac 	.word	0x200003ac
 8000104:	080123ac 	.word	0x080123ac

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ffd7 	bl	80013f0 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff17 	bl	8001280 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ffc9 	bl	80013f0 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ffbf 	bl	80013f0 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff41 	bl	8001308 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff37 	bl	8001308 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 fe8f 	bl	80021e0 <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 faca 	bl	8001a64 <__aeabi_dsub>
 80004d0:	f001 fe86 	bl	80021e0 <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	@ 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	2200      	movs	r2, #0
 80004e8:	2300      	movs	r3, #0
 80004ea:	0004      	movs	r4, r0
 80004ec:	000d      	movs	r5, r1
 80004ee:	f7ff ffb3 	bl	8000458 <__aeabi_dcmplt>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d108      	bne.n	8000508 <__aeabi_d2lz+0x24>
 80004f6:	0020      	movs	r0, r4
 80004f8:	0029      	movs	r1, r5
 80004fa:	f000 f80f 	bl	800051c <__aeabi_d2ulz>
 80004fe:	0002      	movs	r2, r0
 8000500:	000b      	movs	r3, r1
 8000502:	0010      	movs	r0, r2
 8000504:	0019      	movs	r1, r3
 8000506:	bd70      	pop	{r4, r5, r6, pc}
 8000508:	2380      	movs	r3, #128	@ 0x80
 800050a:	061b      	lsls	r3, r3, #24
 800050c:	18e9      	adds	r1, r5, r3
 800050e:	0020      	movs	r0, r4
 8000510:	f000 f804 	bl	800051c <__aeabi_d2ulz>
 8000514:	2300      	movs	r3, #0
 8000516:	4242      	negs	r2, r0
 8000518:	418b      	sbcs	r3, r1
 800051a:	e7f2      	b.n	8000502 <__aeabi_d2lz+0x1e>

0800051c <__aeabi_d2ulz>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	2200      	movs	r2, #0
 8000520:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <__aeabi_d2ulz+0x34>)
 8000522:	000d      	movs	r5, r1
 8000524:	0004      	movs	r4, r0
 8000526:	f000 ffd5 	bl	80014d4 <__aeabi_dmul>
 800052a:	f7ff ffbd 	bl	80004a8 <__aeabi_d2uiz>
 800052e:	0006      	movs	r6, r0
 8000530:	f001 fec0 	bl	80022b4 <__aeabi_ui2d>
 8000534:	2200      	movs	r2, #0
 8000536:	4b07      	ldr	r3, [pc, #28]	@ (8000554 <__aeabi_d2ulz+0x38>)
 8000538:	f000 ffcc 	bl	80014d4 <__aeabi_dmul>
 800053c:	0002      	movs	r2, r0
 800053e:	000b      	movs	r3, r1
 8000540:	0020      	movs	r0, r4
 8000542:	0029      	movs	r1, r5
 8000544:	f001 fa8e 	bl	8001a64 <__aeabi_dsub>
 8000548:	f7ff ffae 	bl	80004a8 <__aeabi_d2uiz>
 800054c:	0031      	movs	r1, r6
 800054e:	bd70      	pop	{r4, r5, r6, pc}
 8000550:	3df00000 	.word	0x3df00000
 8000554:	41f00000 	.word	0x41f00000

08000558 <__aeabi_l2d>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	0006      	movs	r6, r0
 800055c:	0008      	movs	r0, r1
 800055e:	f001 fe7b 	bl	8002258 <__aeabi_i2d>
 8000562:	2200      	movs	r2, #0
 8000564:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <__aeabi_l2d+0x28>)
 8000566:	f000 ffb5 	bl	80014d4 <__aeabi_dmul>
 800056a:	000d      	movs	r5, r1
 800056c:	0004      	movs	r4, r0
 800056e:	0030      	movs	r0, r6
 8000570:	f001 fea0 	bl	80022b4 <__aeabi_ui2d>
 8000574:	002b      	movs	r3, r5
 8000576:	0022      	movs	r2, r4
 8000578:	f000 f804 	bl	8000584 <__aeabi_dadd>
 800057c:	bd70      	pop	{r4, r5, r6, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)
 8000580:	41f00000 	.word	0x41f00000

08000584 <__aeabi_dadd>:
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	4657      	mov	r7, sl
 8000588:	464e      	mov	r6, r9
 800058a:	4645      	mov	r5, r8
 800058c:	46de      	mov	lr, fp
 800058e:	b5e0      	push	{r5, r6, r7, lr}
 8000590:	b083      	sub	sp, #12
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	030c      	lsls	r4, r1, #12
 8000598:	004f      	lsls	r7, r1, #1
 800059a:	0fce      	lsrs	r6, r1, #31
 800059c:	0a61      	lsrs	r1, r4, #9
 800059e:	9c00      	ldr	r4, [sp, #0]
 80005a0:	031d      	lsls	r5, r3, #12
 80005a2:	0f64      	lsrs	r4, r4, #29
 80005a4:	430c      	orrs	r4, r1
 80005a6:	9900      	ldr	r1, [sp, #0]
 80005a8:	9200      	str	r2, [sp, #0]
 80005aa:	9301      	str	r3, [sp, #4]
 80005ac:	00c8      	lsls	r0, r1, #3
 80005ae:	0059      	lsls	r1, r3, #1
 80005b0:	0d4b      	lsrs	r3, r1, #21
 80005b2:	4699      	mov	r9, r3
 80005b4:	9a00      	ldr	r2, [sp, #0]
 80005b6:	9b01      	ldr	r3, [sp, #4]
 80005b8:	0a6d      	lsrs	r5, r5, #9
 80005ba:	0fd9      	lsrs	r1, r3, #31
 80005bc:	0f53      	lsrs	r3, r2, #29
 80005be:	432b      	orrs	r3, r5
 80005c0:	469a      	mov	sl, r3
 80005c2:	9b00      	ldr	r3, [sp, #0]
 80005c4:	0d7f      	lsrs	r7, r7, #21
 80005c6:	00da      	lsls	r2, r3, #3
 80005c8:	4694      	mov	ip, r2
 80005ca:	464a      	mov	r2, r9
 80005cc:	46b0      	mov	r8, r6
 80005ce:	1aba      	subs	r2, r7, r2
 80005d0:	428e      	cmp	r6, r1
 80005d2:	d100      	bne.n	80005d6 <__aeabi_dadd+0x52>
 80005d4:	e0b0      	b.n	8000738 <__aeabi_dadd+0x1b4>
 80005d6:	2a00      	cmp	r2, #0
 80005d8:	dc00      	bgt.n	80005dc <__aeabi_dadd+0x58>
 80005da:	e078      	b.n	80006ce <__aeabi_dadd+0x14a>
 80005dc:	4649      	mov	r1, r9
 80005de:	2900      	cmp	r1, #0
 80005e0:	d100      	bne.n	80005e4 <__aeabi_dadd+0x60>
 80005e2:	e0e9      	b.n	80007b8 <__aeabi_dadd+0x234>
 80005e4:	49c9      	ldr	r1, [pc, #804]	@ (800090c <__aeabi_dadd+0x388>)
 80005e6:	428f      	cmp	r7, r1
 80005e8:	d100      	bne.n	80005ec <__aeabi_dadd+0x68>
 80005ea:	e195      	b.n	8000918 <__aeabi_dadd+0x394>
 80005ec:	2501      	movs	r5, #1
 80005ee:	2a38      	cmp	r2, #56	@ 0x38
 80005f0:	dc16      	bgt.n	8000620 <__aeabi_dadd+0x9c>
 80005f2:	2180      	movs	r1, #128	@ 0x80
 80005f4:	4653      	mov	r3, sl
 80005f6:	0409      	lsls	r1, r1, #16
 80005f8:	430b      	orrs	r3, r1
 80005fa:	469a      	mov	sl, r3
 80005fc:	2a1f      	cmp	r2, #31
 80005fe:	dd00      	ble.n	8000602 <__aeabi_dadd+0x7e>
 8000600:	e1e7      	b.n	80009d2 <__aeabi_dadd+0x44e>
 8000602:	2120      	movs	r1, #32
 8000604:	4655      	mov	r5, sl
 8000606:	1a8b      	subs	r3, r1, r2
 8000608:	4661      	mov	r1, ip
 800060a:	409d      	lsls	r5, r3
 800060c:	40d1      	lsrs	r1, r2
 800060e:	430d      	orrs	r5, r1
 8000610:	4661      	mov	r1, ip
 8000612:	4099      	lsls	r1, r3
 8000614:	1e4b      	subs	r3, r1, #1
 8000616:	4199      	sbcs	r1, r3
 8000618:	4653      	mov	r3, sl
 800061a:	40d3      	lsrs	r3, r2
 800061c:	430d      	orrs	r5, r1
 800061e:	1ae4      	subs	r4, r4, r3
 8000620:	1b45      	subs	r5, r0, r5
 8000622:	42a8      	cmp	r0, r5
 8000624:	4180      	sbcs	r0, r0
 8000626:	4240      	negs	r0, r0
 8000628:	1a24      	subs	r4, r4, r0
 800062a:	0223      	lsls	r3, r4, #8
 800062c:	d400      	bmi.n	8000630 <__aeabi_dadd+0xac>
 800062e:	e10f      	b.n	8000850 <__aeabi_dadd+0x2cc>
 8000630:	0264      	lsls	r4, r4, #9
 8000632:	0a64      	lsrs	r4, r4, #9
 8000634:	2c00      	cmp	r4, #0
 8000636:	d100      	bne.n	800063a <__aeabi_dadd+0xb6>
 8000638:	e139      	b.n	80008ae <__aeabi_dadd+0x32a>
 800063a:	0020      	movs	r0, r4
 800063c:	f001 fe5e 	bl	80022fc <__clzsi2>
 8000640:	0003      	movs	r3, r0
 8000642:	3b08      	subs	r3, #8
 8000644:	2120      	movs	r1, #32
 8000646:	0028      	movs	r0, r5
 8000648:	1aca      	subs	r2, r1, r3
 800064a:	40d0      	lsrs	r0, r2
 800064c:	409c      	lsls	r4, r3
 800064e:	0002      	movs	r2, r0
 8000650:	409d      	lsls	r5, r3
 8000652:	4322      	orrs	r2, r4
 8000654:	429f      	cmp	r7, r3
 8000656:	dd00      	ble.n	800065a <__aeabi_dadd+0xd6>
 8000658:	e173      	b.n	8000942 <__aeabi_dadd+0x3be>
 800065a:	1bd8      	subs	r0, r3, r7
 800065c:	3001      	adds	r0, #1
 800065e:	1a09      	subs	r1, r1, r0
 8000660:	002c      	movs	r4, r5
 8000662:	408d      	lsls	r5, r1
 8000664:	40c4      	lsrs	r4, r0
 8000666:	1e6b      	subs	r3, r5, #1
 8000668:	419d      	sbcs	r5, r3
 800066a:	0013      	movs	r3, r2
 800066c:	40c2      	lsrs	r2, r0
 800066e:	408b      	lsls	r3, r1
 8000670:	4325      	orrs	r5, r4
 8000672:	2700      	movs	r7, #0
 8000674:	0014      	movs	r4, r2
 8000676:	431d      	orrs	r5, r3
 8000678:	076b      	lsls	r3, r5, #29
 800067a:	d009      	beq.n	8000690 <__aeabi_dadd+0x10c>
 800067c:	230f      	movs	r3, #15
 800067e:	402b      	ands	r3, r5
 8000680:	2b04      	cmp	r3, #4
 8000682:	d005      	beq.n	8000690 <__aeabi_dadd+0x10c>
 8000684:	1d2b      	adds	r3, r5, #4
 8000686:	42ab      	cmp	r3, r5
 8000688:	41ad      	sbcs	r5, r5
 800068a:	426d      	negs	r5, r5
 800068c:	1964      	adds	r4, r4, r5
 800068e:	001d      	movs	r5, r3
 8000690:	0223      	lsls	r3, r4, #8
 8000692:	d400      	bmi.n	8000696 <__aeabi_dadd+0x112>
 8000694:	e12d      	b.n	80008f2 <__aeabi_dadd+0x36e>
 8000696:	4a9d      	ldr	r2, [pc, #628]	@ (800090c <__aeabi_dadd+0x388>)
 8000698:	3701      	adds	r7, #1
 800069a:	4297      	cmp	r7, r2
 800069c:	d100      	bne.n	80006a0 <__aeabi_dadd+0x11c>
 800069e:	e0d3      	b.n	8000848 <__aeabi_dadd+0x2c4>
 80006a0:	4646      	mov	r6, r8
 80006a2:	499b      	ldr	r1, [pc, #620]	@ (8000910 <__aeabi_dadd+0x38c>)
 80006a4:	08ed      	lsrs	r5, r5, #3
 80006a6:	4021      	ands	r1, r4
 80006a8:	074a      	lsls	r2, r1, #29
 80006aa:	432a      	orrs	r2, r5
 80006ac:	057c      	lsls	r4, r7, #21
 80006ae:	024d      	lsls	r5, r1, #9
 80006b0:	0b2d      	lsrs	r5, r5, #12
 80006b2:	0d64      	lsrs	r4, r4, #21
 80006b4:	0524      	lsls	r4, r4, #20
 80006b6:	432c      	orrs	r4, r5
 80006b8:	07f6      	lsls	r6, r6, #31
 80006ba:	4334      	orrs	r4, r6
 80006bc:	0010      	movs	r0, r2
 80006be:	0021      	movs	r1, r4
 80006c0:	b003      	add	sp, #12
 80006c2:	bcf0      	pop	{r4, r5, r6, r7}
 80006c4:	46bb      	mov	fp, r7
 80006c6:	46b2      	mov	sl, r6
 80006c8:	46a9      	mov	r9, r5
 80006ca:	46a0      	mov	r8, r4
 80006cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ce:	2a00      	cmp	r2, #0
 80006d0:	d100      	bne.n	80006d4 <__aeabi_dadd+0x150>
 80006d2:	e084      	b.n	80007de <__aeabi_dadd+0x25a>
 80006d4:	464a      	mov	r2, r9
 80006d6:	1bd2      	subs	r2, r2, r7
 80006d8:	2f00      	cmp	r7, #0
 80006da:	d000      	beq.n	80006de <__aeabi_dadd+0x15a>
 80006dc:	e16d      	b.n	80009ba <__aeabi_dadd+0x436>
 80006de:	0025      	movs	r5, r4
 80006e0:	4305      	orrs	r5, r0
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dadd+0x162>
 80006e4:	e127      	b.n	8000936 <__aeabi_dadd+0x3b2>
 80006e6:	1e56      	subs	r6, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x16a>
 80006ec:	e23b      	b.n	8000b66 <__aeabi_dadd+0x5e2>
 80006ee:	4d87      	ldr	r5, [pc, #540]	@ (800090c <__aeabi_dadd+0x388>)
 80006f0:	42aa      	cmp	r2, r5
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x172>
 80006f4:	e26a      	b.n	8000bcc <__aeabi_dadd+0x648>
 80006f6:	2501      	movs	r5, #1
 80006f8:	2e38      	cmp	r6, #56	@ 0x38
 80006fa:	dc12      	bgt.n	8000722 <__aeabi_dadd+0x19e>
 80006fc:	0032      	movs	r2, r6
 80006fe:	2a1f      	cmp	r2, #31
 8000700:	dd00      	ble.n	8000704 <__aeabi_dadd+0x180>
 8000702:	e1f8      	b.n	8000af6 <__aeabi_dadd+0x572>
 8000704:	2620      	movs	r6, #32
 8000706:	0025      	movs	r5, r4
 8000708:	1ab6      	subs	r6, r6, r2
 800070a:	0007      	movs	r7, r0
 800070c:	4653      	mov	r3, sl
 800070e:	40b0      	lsls	r0, r6
 8000710:	40d4      	lsrs	r4, r2
 8000712:	40b5      	lsls	r5, r6
 8000714:	40d7      	lsrs	r7, r2
 8000716:	1e46      	subs	r6, r0, #1
 8000718:	41b0      	sbcs	r0, r6
 800071a:	1b1b      	subs	r3, r3, r4
 800071c:	469a      	mov	sl, r3
 800071e:	433d      	orrs	r5, r7
 8000720:	4305      	orrs	r5, r0
 8000722:	4662      	mov	r2, ip
 8000724:	1b55      	subs	r5, r2, r5
 8000726:	45ac      	cmp	ip, r5
 8000728:	4192      	sbcs	r2, r2
 800072a:	4653      	mov	r3, sl
 800072c:	4252      	negs	r2, r2
 800072e:	000e      	movs	r6, r1
 8000730:	464f      	mov	r7, r9
 8000732:	4688      	mov	r8, r1
 8000734:	1a9c      	subs	r4, r3, r2
 8000736:	e778      	b.n	800062a <__aeabi_dadd+0xa6>
 8000738:	2a00      	cmp	r2, #0
 800073a:	dc00      	bgt.n	800073e <__aeabi_dadd+0x1ba>
 800073c:	e08e      	b.n	800085c <__aeabi_dadd+0x2d8>
 800073e:	4649      	mov	r1, r9
 8000740:	2900      	cmp	r1, #0
 8000742:	d175      	bne.n	8000830 <__aeabi_dadd+0x2ac>
 8000744:	4661      	mov	r1, ip
 8000746:	4653      	mov	r3, sl
 8000748:	4319      	orrs	r1, r3
 800074a:	d100      	bne.n	800074e <__aeabi_dadd+0x1ca>
 800074c:	e0f6      	b.n	800093c <__aeabi_dadd+0x3b8>
 800074e:	1e51      	subs	r1, r2, #1
 8000750:	2a01      	cmp	r2, #1
 8000752:	d100      	bne.n	8000756 <__aeabi_dadd+0x1d2>
 8000754:	e191      	b.n	8000a7a <__aeabi_dadd+0x4f6>
 8000756:	4d6d      	ldr	r5, [pc, #436]	@ (800090c <__aeabi_dadd+0x388>)
 8000758:	42aa      	cmp	r2, r5
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x1da>
 800075c:	e0dc      	b.n	8000918 <__aeabi_dadd+0x394>
 800075e:	2501      	movs	r5, #1
 8000760:	2938      	cmp	r1, #56	@ 0x38
 8000762:	dc14      	bgt.n	800078e <__aeabi_dadd+0x20a>
 8000764:	000a      	movs	r2, r1
 8000766:	2a1f      	cmp	r2, #31
 8000768:	dd00      	ble.n	800076c <__aeabi_dadd+0x1e8>
 800076a:	e1a2      	b.n	8000ab2 <__aeabi_dadd+0x52e>
 800076c:	2120      	movs	r1, #32
 800076e:	4653      	mov	r3, sl
 8000770:	1a89      	subs	r1, r1, r2
 8000772:	408b      	lsls	r3, r1
 8000774:	001d      	movs	r5, r3
 8000776:	4663      	mov	r3, ip
 8000778:	40d3      	lsrs	r3, r2
 800077a:	431d      	orrs	r5, r3
 800077c:	4663      	mov	r3, ip
 800077e:	408b      	lsls	r3, r1
 8000780:	0019      	movs	r1, r3
 8000782:	1e4b      	subs	r3, r1, #1
 8000784:	4199      	sbcs	r1, r3
 8000786:	4653      	mov	r3, sl
 8000788:	40d3      	lsrs	r3, r2
 800078a:	430d      	orrs	r5, r1
 800078c:	18e4      	adds	r4, r4, r3
 800078e:	182d      	adds	r5, r5, r0
 8000790:	4285      	cmp	r5, r0
 8000792:	4180      	sbcs	r0, r0
 8000794:	4240      	negs	r0, r0
 8000796:	1824      	adds	r4, r4, r0
 8000798:	0223      	lsls	r3, r4, #8
 800079a:	d559      	bpl.n	8000850 <__aeabi_dadd+0x2cc>
 800079c:	4b5b      	ldr	r3, [pc, #364]	@ (800090c <__aeabi_dadd+0x388>)
 800079e:	3701      	adds	r7, #1
 80007a0:	429f      	cmp	r7, r3
 80007a2:	d051      	beq.n	8000848 <__aeabi_dadd+0x2c4>
 80007a4:	2101      	movs	r1, #1
 80007a6:	4b5a      	ldr	r3, [pc, #360]	@ (8000910 <__aeabi_dadd+0x38c>)
 80007a8:	086a      	lsrs	r2, r5, #1
 80007aa:	401c      	ands	r4, r3
 80007ac:	4029      	ands	r1, r5
 80007ae:	430a      	orrs	r2, r1
 80007b0:	07e5      	lsls	r5, r4, #31
 80007b2:	4315      	orrs	r5, r2
 80007b4:	0864      	lsrs	r4, r4, #1
 80007b6:	e75f      	b.n	8000678 <__aeabi_dadd+0xf4>
 80007b8:	4661      	mov	r1, ip
 80007ba:	4653      	mov	r3, sl
 80007bc:	4319      	orrs	r1, r3
 80007be:	d100      	bne.n	80007c2 <__aeabi_dadd+0x23e>
 80007c0:	e0bc      	b.n	800093c <__aeabi_dadd+0x3b8>
 80007c2:	1e51      	subs	r1, r2, #1
 80007c4:	2a01      	cmp	r2, #1
 80007c6:	d100      	bne.n	80007ca <__aeabi_dadd+0x246>
 80007c8:	e164      	b.n	8000a94 <__aeabi_dadd+0x510>
 80007ca:	4d50      	ldr	r5, [pc, #320]	@ (800090c <__aeabi_dadd+0x388>)
 80007cc:	42aa      	cmp	r2, r5
 80007ce:	d100      	bne.n	80007d2 <__aeabi_dadd+0x24e>
 80007d0:	e16a      	b.n	8000aa8 <__aeabi_dadd+0x524>
 80007d2:	2501      	movs	r5, #1
 80007d4:	2938      	cmp	r1, #56	@ 0x38
 80007d6:	dd00      	ble.n	80007da <__aeabi_dadd+0x256>
 80007d8:	e722      	b.n	8000620 <__aeabi_dadd+0x9c>
 80007da:	000a      	movs	r2, r1
 80007dc:	e70e      	b.n	80005fc <__aeabi_dadd+0x78>
 80007de:	4a4d      	ldr	r2, [pc, #308]	@ (8000914 <__aeabi_dadd+0x390>)
 80007e0:	1c7d      	adds	r5, r7, #1
 80007e2:	4215      	tst	r5, r2
 80007e4:	d000      	beq.n	80007e8 <__aeabi_dadd+0x264>
 80007e6:	e0d0      	b.n	800098a <__aeabi_dadd+0x406>
 80007e8:	0025      	movs	r5, r4
 80007ea:	4662      	mov	r2, ip
 80007ec:	4653      	mov	r3, sl
 80007ee:	4305      	orrs	r5, r0
 80007f0:	431a      	orrs	r2, r3
 80007f2:	2f00      	cmp	r7, #0
 80007f4:	d000      	beq.n	80007f8 <__aeabi_dadd+0x274>
 80007f6:	e137      	b.n	8000a68 <__aeabi_dadd+0x4e4>
 80007f8:	2d00      	cmp	r5, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_dadd+0x27a>
 80007fc:	e1a8      	b.n	8000b50 <__aeabi_dadd+0x5cc>
 80007fe:	2a00      	cmp	r2, #0
 8000800:	d100      	bne.n	8000804 <__aeabi_dadd+0x280>
 8000802:	e16a      	b.n	8000ada <__aeabi_dadd+0x556>
 8000804:	4663      	mov	r3, ip
 8000806:	1ac5      	subs	r5, r0, r3
 8000808:	4653      	mov	r3, sl
 800080a:	1ae2      	subs	r2, r4, r3
 800080c:	42a8      	cmp	r0, r5
 800080e:	419b      	sbcs	r3, r3
 8000810:	425b      	negs	r3, r3
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	021a      	lsls	r2, r3, #8
 8000816:	d400      	bmi.n	800081a <__aeabi_dadd+0x296>
 8000818:	e203      	b.n	8000c22 <__aeabi_dadd+0x69e>
 800081a:	4663      	mov	r3, ip
 800081c:	1a1d      	subs	r5, r3, r0
 800081e:	45ac      	cmp	ip, r5
 8000820:	4192      	sbcs	r2, r2
 8000822:	4653      	mov	r3, sl
 8000824:	4252      	negs	r2, r2
 8000826:	1b1c      	subs	r4, r3, r4
 8000828:	000e      	movs	r6, r1
 800082a:	4688      	mov	r8, r1
 800082c:	1aa4      	subs	r4, r4, r2
 800082e:	e723      	b.n	8000678 <__aeabi_dadd+0xf4>
 8000830:	4936      	ldr	r1, [pc, #216]	@ (800090c <__aeabi_dadd+0x388>)
 8000832:	428f      	cmp	r7, r1
 8000834:	d070      	beq.n	8000918 <__aeabi_dadd+0x394>
 8000836:	2501      	movs	r5, #1
 8000838:	2a38      	cmp	r2, #56	@ 0x38
 800083a:	dca8      	bgt.n	800078e <__aeabi_dadd+0x20a>
 800083c:	2180      	movs	r1, #128	@ 0x80
 800083e:	4653      	mov	r3, sl
 8000840:	0409      	lsls	r1, r1, #16
 8000842:	430b      	orrs	r3, r1
 8000844:	469a      	mov	sl, r3
 8000846:	e78e      	b.n	8000766 <__aeabi_dadd+0x1e2>
 8000848:	003c      	movs	r4, r7
 800084a:	2500      	movs	r5, #0
 800084c:	2200      	movs	r2, #0
 800084e:	e731      	b.n	80006b4 <__aeabi_dadd+0x130>
 8000850:	2307      	movs	r3, #7
 8000852:	402b      	ands	r3, r5
 8000854:	2b00      	cmp	r3, #0
 8000856:	d000      	beq.n	800085a <__aeabi_dadd+0x2d6>
 8000858:	e710      	b.n	800067c <__aeabi_dadd+0xf8>
 800085a:	e093      	b.n	8000984 <__aeabi_dadd+0x400>
 800085c:	2a00      	cmp	r2, #0
 800085e:	d074      	beq.n	800094a <__aeabi_dadd+0x3c6>
 8000860:	464a      	mov	r2, r9
 8000862:	1bd2      	subs	r2, r2, r7
 8000864:	2f00      	cmp	r7, #0
 8000866:	d100      	bne.n	800086a <__aeabi_dadd+0x2e6>
 8000868:	e0c7      	b.n	80009fa <__aeabi_dadd+0x476>
 800086a:	4928      	ldr	r1, [pc, #160]	@ (800090c <__aeabi_dadd+0x388>)
 800086c:	4589      	cmp	r9, r1
 800086e:	d100      	bne.n	8000872 <__aeabi_dadd+0x2ee>
 8000870:	e185      	b.n	8000b7e <__aeabi_dadd+0x5fa>
 8000872:	2501      	movs	r5, #1
 8000874:	2a38      	cmp	r2, #56	@ 0x38
 8000876:	dc12      	bgt.n	800089e <__aeabi_dadd+0x31a>
 8000878:	2180      	movs	r1, #128	@ 0x80
 800087a:	0409      	lsls	r1, r1, #16
 800087c:	430c      	orrs	r4, r1
 800087e:	2a1f      	cmp	r2, #31
 8000880:	dd00      	ble.n	8000884 <__aeabi_dadd+0x300>
 8000882:	e1ab      	b.n	8000bdc <__aeabi_dadd+0x658>
 8000884:	2120      	movs	r1, #32
 8000886:	0025      	movs	r5, r4
 8000888:	1a89      	subs	r1, r1, r2
 800088a:	0007      	movs	r7, r0
 800088c:	4088      	lsls	r0, r1
 800088e:	408d      	lsls	r5, r1
 8000890:	40d7      	lsrs	r7, r2
 8000892:	1e41      	subs	r1, r0, #1
 8000894:	4188      	sbcs	r0, r1
 8000896:	40d4      	lsrs	r4, r2
 8000898:	433d      	orrs	r5, r7
 800089a:	4305      	orrs	r5, r0
 800089c:	44a2      	add	sl, r4
 800089e:	4465      	add	r5, ip
 80008a0:	4565      	cmp	r5, ip
 80008a2:	4192      	sbcs	r2, r2
 80008a4:	4252      	negs	r2, r2
 80008a6:	4452      	add	r2, sl
 80008a8:	0014      	movs	r4, r2
 80008aa:	464f      	mov	r7, r9
 80008ac:	e774      	b.n	8000798 <__aeabi_dadd+0x214>
 80008ae:	0028      	movs	r0, r5
 80008b0:	f001 fd24 	bl	80022fc <__clzsi2>
 80008b4:	0003      	movs	r3, r0
 80008b6:	3318      	adds	r3, #24
 80008b8:	2b1f      	cmp	r3, #31
 80008ba:	dc00      	bgt.n	80008be <__aeabi_dadd+0x33a>
 80008bc:	e6c2      	b.n	8000644 <__aeabi_dadd+0xc0>
 80008be:	002a      	movs	r2, r5
 80008c0:	3808      	subs	r0, #8
 80008c2:	4082      	lsls	r2, r0
 80008c4:	429f      	cmp	r7, r3
 80008c6:	dd00      	ble.n	80008ca <__aeabi_dadd+0x346>
 80008c8:	e0a9      	b.n	8000a1e <__aeabi_dadd+0x49a>
 80008ca:	1bdb      	subs	r3, r3, r7
 80008cc:	1c58      	adds	r0, r3, #1
 80008ce:	281f      	cmp	r0, #31
 80008d0:	dc00      	bgt.n	80008d4 <__aeabi_dadd+0x350>
 80008d2:	e1ac      	b.n	8000c2e <__aeabi_dadd+0x6aa>
 80008d4:	0015      	movs	r5, r2
 80008d6:	3b1f      	subs	r3, #31
 80008d8:	40dd      	lsrs	r5, r3
 80008da:	2820      	cmp	r0, #32
 80008dc:	d005      	beq.n	80008ea <__aeabi_dadd+0x366>
 80008de:	2340      	movs	r3, #64	@ 0x40
 80008e0:	1a1b      	subs	r3, r3, r0
 80008e2:	409a      	lsls	r2, r3
 80008e4:	1e53      	subs	r3, r2, #1
 80008e6:	419a      	sbcs	r2, r3
 80008e8:	4315      	orrs	r5, r2
 80008ea:	2307      	movs	r3, #7
 80008ec:	2700      	movs	r7, #0
 80008ee:	402b      	ands	r3, r5
 80008f0:	e7b0      	b.n	8000854 <__aeabi_dadd+0x2d0>
 80008f2:	08ed      	lsrs	r5, r5, #3
 80008f4:	4b05      	ldr	r3, [pc, #20]	@ (800090c <__aeabi_dadd+0x388>)
 80008f6:	0762      	lsls	r2, r4, #29
 80008f8:	432a      	orrs	r2, r5
 80008fa:	08e4      	lsrs	r4, r4, #3
 80008fc:	429f      	cmp	r7, r3
 80008fe:	d00f      	beq.n	8000920 <__aeabi_dadd+0x39c>
 8000900:	0324      	lsls	r4, r4, #12
 8000902:	0b25      	lsrs	r5, r4, #12
 8000904:	057c      	lsls	r4, r7, #21
 8000906:	0d64      	lsrs	r4, r4, #21
 8000908:	e6d4      	b.n	80006b4 <__aeabi_dadd+0x130>
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	000007ff 	.word	0x000007ff
 8000910:	ff7fffff 	.word	0xff7fffff
 8000914:	000007fe 	.word	0x000007fe
 8000918:	08c0      	lsrs	r0, r0, #3
 800091a:	0762      	lsls	r2, r4, #29
 800091c:	4302      	orrs	r2, r0
 800091e:	08e4      	lsrs	r4, r4, #3
 8000920:	0013      	movs	r3, r2
 8000922:	4323      	orrs	r3, r4
 8000924:	d100      	bne.n	8000928 <__aeabi_dadd+0x3a4>
 8000926:	e186      	b.n	8000c36 <__aeabi_dadd+0x6b2>
 8000928:	2580      	movs	r5, #128	@ 0x80
 800092a:	032d      	lsls	r5, r5, #12
 800092c:	4325      	orrs	r5, r4
 800092e:	032d      	lsls	r5, r5, #12
 8000930:	4cc3      	ldr	r4, [pc, #780]	@ (8000c40 <__aeabi_dadd+0x6bc>)
 8000932:	0b2d      	lsrs	r5, r5, #12
 8000934:	e6be      	b.n	80006b4 <__aeabi_dadd+0x130>
 8000936:	4660      	mov	r0, ip
 8000938:	4654      	mov	r4, sl
 800093a:	000e      	movs	r6, r1
 800093c:	0017      	movs	r7, r2
 800093e:	08c5      	lsrs	r5, r0, #3
 8000940:	e7d8      	b.n	80008f4 <__aeabi_dadd+0x370>
 8000942:	4cc0      	ldr	r4, [pc, #768]	@ (8000c44 <__aeabi_dadd+0x6c0>)
 8000944:	1aff      	subs	r7, r7, r3
 8000946:	4014      	ands	r4, r2
 8000948:	e696      	b.n	8000678 <__aeabi_dadd+0xf4>
 800094a:	4abf      	ldr	r2, [pc, #764]	@ (8000c48 <__aeabi_dadd+0x6c4>)
 800094c:	1c79      	adds	r1, r7, #1
 800094e:	4211      	tst	r1, r2
 8000950:	d16b      	bne.n	8000a2a <__aeabi_dadd+0x4a6>
 8000952:	0022      	movs	r2, r4
 8000954:	4302      	orrs	r2, r0
 8000956:	2f00      	cmp	r7, #0
 8000958:	d000      	beq.n	800095c <__aeabi_dadd+0x3d8>
 800095a:	e0db      	b.n	8000b14 <__aeabi_dadd+0x590>
 800095c:	2a00      	cmp	r2, #0
 800095e:	d100      	bne.n	8000962 <__aeabi_dadd+0x3de>
 8000960:	e12d      	b.n	8000bbe <__aeabi_dadd+0x63a>
 8000962:	4662      	mov	r2, ip
 8000964:	4653      	mov	r3, sl
 8000966:	431a      	orrs	r2, r3
 8000968:	d100      	bne.n	800096c <__aeabi_dadd+0x3e8>
 800096a:	e0b6      	b.n	8000ada <__aeabi_dadd+0x556>
 800096c:	4663      	mov	r3, ip
 800096e:	18c5      	adds	r5, r0, r3
 8000970:	4285      	cmp	r5, r0
 8000972:	4180      	sbcs	r0, r0
 8000974:	4454      	add	r4, sl
 8000976:	4240      	negs	r0, r0
 8000978:	1824      	adds	r4, r4, r0
 800097a:	0223      	lsls	r3, r4, #8
 800097c:	d502      	bpl.n	8000984 <__aeabi_dadd+0x400>
 800097e:	000f      	movs	r7, r1
 8000980:	4bb0      	ldr	r3, [pc, #704]	@ (8000c44 <__aeabi_dadd+0x6c0>)
 8000982:	401c      	ands	r4, r3
 8000984:	003a      	movs	r2, r7
 8000986:	0028      	movs	r0, r5
 8000988:	e7d8      	b.n	800093c <__aeabi_dadd+0x3b8>
 800098a:	4662      	mov	r2, ip
 800098c:	1a85      	subs	r5, r0, r2
 800098e:	42a8      	cmp	r0, r5
 8000990:	4192      	sbcs	r2, r2
 8000992:	4653      	mov	r3, sl
 8000994:	4252      	negs	r2, r2
 8000996:	4691      	mov	r9, r2
 8000998:	1ae3      	subs	r3, r4, r3
 800099a:	001a      	movs	r2, r3
 800099c:	464b      	mov	r3, r9
 800099e:	1ad2      	subs	r2, r2, r3
 80009a0:	0013      	movs	r3, r2
 80009a2:	4691      	mov	r9, r2
 80009a4:	021a      	lsls	r2, r3, #8
 80009a6:	d454      	bmi.n	8000a52 <__aeabi_dadd+0x4ce>
 80009a8:	464a      	mov	r2, r9
 80009aa:	464c      	mov	r4, r9
 80009ac:	432a      	orrs	r2, r5
 80009ae:	d000      	beq.n	80009b2 <__aeabi_dadd+0x42e>
 80009b0:	e640      	b.n	8000634 <__aeabi_dadd+0xb0>
 80009b2:	2600      	movs	r6, #0
 80009b4:	2400      	movs	r4, #0
 80009b6:	2500      	movs	r5, #0
 80009b8:	e67c      	b.n	80006b4 <__aeabi_dadd+0x130>
 80009ba:	4da1      	ldr	r5, [pc, #644]	@ (8000c40 <__aeabi_dadd+0x6bc>)
 80009bc:	45a9      	cmp	r9, r5
 80009be:	d100      	bne.n	80009c2 <__aeabi_dadd+0x43e>
 80009c0:	e090      	b.n	8000ae4 <__aeabi_dadd+0x560>
 80009c2:	2501      	movs	r5, #1
 80009c4:	2a38      	cmp	r2, #56	@ 0x38
 80009c6:	dd00      	ble.n	80009ca <__aeabi_dadd+0x446>
 80009c8:	e6ab      	b.n	8000722 <__aeabi_dadd+0x19e>
 80009ca:	2580      	movs	r5, #128	@ 0x80
 80009cc:	042d      	lsls	r5, r5, #16
 80009ce:	432c      	orrs	r4, r5
 80009d0:	e695      	b.n	80006fe <__aeabi_dadd+0x17a>
 80009d2:	0011      	movs	r1, r2
 80009d4:	4655      	mov	r5, sl
 80009d6:	3920      	subs	r1, #32
 80009d8:	40cd      	lsrs	r5, r1
 80009da:	46a9      	mov	r9, r5
 80009dc:	2a20      	cmp	r2, #32
 80009de:	d006      	beq.n	80009ee <__aeabi_dadd+0x46a>
 80009e0:	2140      	movs	r1, #64	@ 0x40
 80009e2:	4653      	mov	r3, sl
 80009e4:	1a8a      	subs	r2, r1, r2
 80009e6:	4093      	lsls	r3, r2
 80009e8:	4662      	mov	r2, ip
 80009ea:	431a      	orrs	r2, r3
 80009ec:	4694      	mov	ip, r2
 80009ee:	4665      	mov	r5, ip
 80009f0:	1e6b      	subs	r3, r5, #1
 80009f2:	419d      	sbcs	r5, r3
 80009f4:	464b      	mov	r3, r9
 80009f6:	431d      	orrs	r5, r3
 80009f8:	e612      	b.n	8000620 <__aeabi_dadd+0x9c>
 80009fa:	0021      	movs	r1, r4
 80009fc:	4301      	orrs	r1, r0
 80009fe:	d100      	bne.n	8000a02 <__aeabi_dadd+0x47e>
 8000a00:	e0c4      	b.n	8000b8c <__aeabi_dadd+0x608>
 8000a02:	1e51      	subs	r1, r2, #1
 8000a04:	2a01      	cmp	r2, #1
 8000a06:	d100      	bne.n	8000a0a <__aeabi_dadd+0x486>
 8000a08:	e0fb      	b.n	8000c02 <__aeabi_dadd+0x67e>
 8000a0a:	4d8d      	ldr	r5, [pc, #564]	@ (8000c40 <__aeabi_dadd+0x6bc>)
 8000a0c:	42aa      	cmp	r2, r5
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_dadd+0x48e>
 8000a10:	e0b5      	b.n	8000b7e <__aeabi_dadd+0x5fa>
 8000a12:	2501      	movs	r5, #1
 8000a14:	2938      	cmp	r1, #56	@ 0x38
 8000a16:	dd00      	ble.n	8000a1a <__aeabi_dadd+0x496>
 8000a18:	e741      	b.n	800089e <__aeabi_dadd+0x31a>
 8000a1a:	000a      	movs	r2, r1
 8000a1c:	e72f      	b.n	800087e <__aeabi_dadd+0x2fa>
 8000a1e:	4c89      	ldr	r4, [pc, #548]	@ (8000c44 <__aeabi_dadd+0x6c0>)
 8000a20:	1aff      	subs	r7, r7, r3
 8000a22:	4014      	ands	r4, r2
 8000a24:	0762      	lsls	r2, r4, #29
 8000a26:	08e4      	lsrs	r4, r4, #3
 8000a28:	e76a      	b.n	8000900 <__aeabi_dadd+0x37c>
 8000a2a:	4a85      	ldr	r2, [pc, #532]	@ (8000c40 <__aeabi_dadd+0x6bc>)
 8000a2c:	4291      	cmp	r1, r2
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dadd+0x4ae>
 8000a30:	e0e3      	b.n	8000bfa <__aeabi_dadd+0x676>
 8000a32:	4663      	mov	r3, ip
 8000a34:	18c2      	adds	r2, r0, r3
 8000a36:	4282      	cmp	r2, r0
 8000a38:	4180      	sbcs	r0, r0
 8000a3a:	0023      	movs	r3, r4
 8000a3c:	4240      	negs	r0, r0
 8000a3e:	4453      	add	r3, sl
 8000a40:	181b      	adds	r3, r3, r0
 8000a42:	07dd      	lsls	r5, r3, #31
 8000a44:	085c      	lsrs	r4, r3, #1
 8000a46:	2307      	movs	r3, #7
 8000a48:	0852      	lsrs	r2, r2, #1
 8000a4a:	4315      	orrs	r5, r2
 8000a4c:	000f      	movs	r7, r1
 8000a4e:	402b      	ands	r3, r5
 8000a50:	e700      	b.n	8000854 <__aeabi_dadd+0x2d0>
 8000a52:	4663      	mov	r3, ip
 8000a54:	1a1d      	subs	r5, r3, r0
 8000a56:	45ac      	cmp	ip, r5
 8000a58:	4192      	sbcs	r2, r2
 8000a5a:	4653      	mov	r3, sl
 8000a5c:	4252      	negs	r2, r2
 8000a5e:	1b1c      	subs	r4, r3, r4
 8000a60:	000e      	movs	r6, r1
 8000a62:	4688      	mov	r8, r1
 8000a64:	1aa4      	subs	r4, r4, r2
 8000a66:	e5e5      	b.n	8000634 <__aeabi_dadd+0xb0>
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d000      	beq.n	8000a6e <__aeabi_dadd+0x4ea>
 8000a6c:	e091      	b.n	8000b92 <__aeabi_dadd+0x60e>
 8000a6e:	2a00      	cmp	r2, #0
 8000a70:	d138      	bne.n	8000ae4 <__aeabi_dadd+0x560>
 8000a72:	2480      	movs	r4, #128	@ 0x80
 8000a74:	2600      	movs	r6, #0
 8000a76:	0324      	lsls	r4, r4, #12
 8000a78:	e756      	b.n	8000928 <__aeabi_dadd+0x3a4>
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	18c5      	adds	r5, r0, r3
 8000a7e:	4285      	cmp	r5, r0
 8000a80:	4180      	sbcs	r0, r0
 8000a82:	4454      	add	r4, sl
 8000a84:	4240      	negs	r0, r0
 8000a86:	1824      	adds	r4, r4, r0
 8000a88:	2701      	movs	r7, #1
 8000a8a:	0223      	lsls	r3, r4, #8
 8000a8c:	d400      	bmi.n	8000a90 <__aeabi_dadd+0x50c>
 8000a8e:	e6df      	b.n	8000850 <__aeabi_dadd+0x2cc>
 8000a90:	2702      	movs	r7, #2
 8000a92:	e687      	b.n	80007a4 <__aeabi_dadd+0x220>
 8000a94:	4663      	mov	r3, ip
 8000a96:	1ac5      	subs	r5, r0, r3
 8000a98:	42a8      	cmp	r0, r5
 8000a9a:	4180      	sbcs	r0, r0
 8000a9c:	4653      	mov	r3, sl
 8000a9e:	4240      	negs	r0, r0
 8000aa0:	1ae4      	subs	r4, r4, r3
 8000aa2:	2701      	movs	r7, #1
 8000aa4:	1a24      	subs	r4, r4, r0
 8000aa6:	e5c0      	b.n	800062a <__aeabi_dadd+0xa6>
 8000aa8:	0762      	lsls	r2, r4, #29
 8000aaa:	08c0      	lsrs	r0, r0, #3
 8000aac:	4302      	orrs	r2, r0
 8000aae:	08e4      	lsrs	r4, r4, #3
 8000ab0:	e736      	b.n	8000920 <__aeabi_dadd+0x39c>
 8000ab2:	0011      	movs	r1, r2
 8000ab4:	4653      	mov	r3, sl
 8000ab6:	3920      	subs	r1, #32
 8000ab8:	40cb      	lsrs	r3, r1
 8000aba:	4699      	mov	r9, r3
 8000abc:	2a20      	cmp	r2, #32
 8000abe:	d006      	beq.n	8000ace <__aeabi_dadd+0x54a>
 8000ac0:	2140      	movs	r1, #64	@ 0x40
 8000ac2:	4653      	mov	r3, sl
 8000ac4:	1a8a      	subs	r2, r1, r2
 8000ac6:	4093      	lsls	r3, r2
 8000ac8:	4662      	mov	r2, ip
 8000aca:	431a      	orrs	r2, r3
 8000acc:	4694      	mov	ip, r2
 8000ace:	4665      	mov	r5, ip
 8000ad0:	1e6b      	subs	r3, r5, #1
 8000ad2:	419d      	sbcs	r5, r3
 8000ad4:	464b      	mov	r3, r9
 8000ad6:	431d      	orrs	r5, r3
 8000ad8:	e659      	b.n	800078e <__aeabi_dadd+0x20a>
 8000ada:	0762      	lsls	r2, r4, #29
 8000adc:	08c0      	lsrs	r0, r0, #3
 8000ade:	4302      	orrs	r2, r0
 8000ae0:	08e4      	lsrs	r4, r4, #3
 8000ae2:	e70d      	b.n	8000900 <__aeabi_dadd+0x37c>
 8000ae4:	4653      	mov	r3, sl
 8000ae6:	075a      	lsls	r2, r3, #29
 8000ae8:	4663      	mov	r3, ip
 8000aea:	08d8      	lsrs	r0, r3, #3
 8000aec:	4653      	mov	r3, sl
 8000aee:	000e      	movs	r6, r1
 8000af0:	4302      	orrs	r2, r0
 8000af2:	08dc      	lsrs	r4, r3, #3
 8000af4:	e714      	b.n	8000920 <__aeabi_dadd+0x39c>
 8000af6:	0015      	movs	r5, r2
 8000af8:	0026      	movs	r6, r4
 8000afa:	3d20      	subs	r5, #32
 8000afc:	40ee      	lsrs	r6, r5
 8000afe:	2a20      	cmp	r2, #32
 8000b00:	d003      	beq.n	8000b0a <__aeabi_dadd+0x586>
 8000b02:	2540      	movs	r5, #64	@ 0x40
 8000b04:	1aaa      	subs	r2, r5, r2
 8000b06:	4094      	lsls	r4, r2
 8000b08:	4320      	orrs	r0, r4
 8000b0a:	1e42      	subs	r2, r0, #1
 8000b0c:	4190      	sbcs	r0, r2
 8000b0e:	0005      	movs	r5, r0
 8000b10:	4335      	orrs	r5, r6
 8000b12:	e606      	b.n	8000722 <__aeabi_dadd+0x19e>
 8000b14:	2a00      	cmp	r2, #0
 8000b16:	d07c      	beq.n	8000c12 <__aeabi_dadd+0x68e>
 8000b18:	4662      	mov	r2, ip
 8000b1a:	4653      	mov	r3, sl
 8000b1c:	08c0      	lsrs	r0, r0, #3
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	d100      	bne.n	8000b24 <__aeabi_dadd+0x5a0>
 8000b22:	e6fa      	b.n	800091a <__aeabi_dadd+0x396>
 8000b24:	0762      	lsls	r2, r4, #29
 8000b26:	4310      	orrs	r0, r2
 8000b28:	2280      	movs	r2, #128	@ 0x80
 8000b2a:	08e4      	lsrs	r4, r4, #3
 8000b2c:	0312      	lsls	r2, r2, #12
 8000b2e:	4214      	tst	r4, r2
 8000b30:	d008      	beq.n	8000b44 <__aeabi_dadd+0x5c0>
 8000b32:	08d9      	lsrs	r1, r3, #3
 8000b34:	4211      	tst	r1, r2
 8000b36:	d105      	bne.n	8000b44 <__aeabi_dadd+0x5c0>
 8000b38:	4663      	mov	r3, ip
 8000b3a:	08d8      	lsrs	r0, r3, #3
 8000b3c:	4653      	mov	r3, sl
 8000b3e:	000c      	movs	r4, r1
 8000b40:	075b      	lsls	r3, r3, #29
 8000b42:	4318      	orrs	r0, r3
 8000b44:	0f42      	lsrs	r2, r0, #29
 8000b46:	00c0      	lsls	r0, r0, #3
 8000b48:	08c0      	lsrs	r0, r0, #3
 8000b4a:	0752      	lsls	r2, r2, #29
 8000b4c:	4302      	orrs	r2, r0
 8000b4e:	e6e7      	b.n	8000920 <__aeabi_dadd+0x39c>
 8000b50:	2a00      	cmp	r2, #0
 8000b52:	d100      	bne.n	8000b56 <__aeabi_dadd+0x5d2>
 8000b54:	e72d      	b.n	80009b2 <__aeabi_dadd+0x42e>
 8000b56:	4663      	mov	r3, ip
 8000b58:	08d8      	lsrs	r0, r3, #3
 8000b5a:	4653      	mov	r3, sl
 8000b5c:	075a      	lsls	r2, r3, #29
 8000b5e:	000e      	movs	r6, r1
 8000b60:	4302      	orrs	r2, r0
 8000b62:	08dc      	lsrs	r4, r3, #3
 8000b64:	e6cc      	b.n	8000900 <__aeabi_dadd+0x37c>
 8000b66:	4663      	mov	r3, ip
 8000b68:	1a1d      	subs	r5, r3, r0
 8000b6a:	45ac      	cmp	ip, r5
 8000b6c:	4192      	sbcs	r2, r2
 8000b6e:	4653      	mov	r3, sl
 8000b70:	4252      	negs	r2, r2
 8000b72:	1b1c      	subs	r4, r3, r4
 8000b74:	000e      	movs	r6, r1
 8000b76:	4688      	mov	r8, r1
 8000b78:	1aa4      	subs	r4, r4, r2
 8000b7a:	3701      	adds	r7, #1
 8000b7c:	e555      	b.n	800062a <__aeabi_dadd+0xa6>
 8000b7e:	4663      	mov	r3, ip
 8000b80:	08d9      	lsrs	r1, r3, #3
 8000b82:	4653      	mov	r3, sl
 8000b84:	075a      	lsls	r2, r3, #29
 8000b86:	430a      	orrs	r2, r1
 8000b88:	08dc      	lsrs	r4, r3, #3
 8000b8a:	e6c9      	b.n	8000920 <__aeabi_dadd+0x39c>
 8000b8c:	4660      	mov	r0, ip
 8000b8e:	4654      	mov	r4, sl
 8000b90:	e6d4      	b.n	800093c <__aeabi_dadd+0x3b8>
 8000b92:	08c0      	lsrs	r0, r0, #3
 8000b94:	2a00      	cmp	r2, #0
 8000b96:	d100      	bne.n	8000b9a <__aeabi_dadd+0x616>
 8000b98:	e6bf      	b.n	800091a <__aeabi_dadd+0x396>
 8000b9a:	0762      	lsls	r2, r4, #29
 8000b9c:	4310      	orrs	r0, r2
 8000b9e:	2280      	movs	r2, #128	@ 0x80
 8000ba0:	08e4      	lsrs	r4, r4, #3
 8000ba2:	0312      	lsls	r2, r2, #12
 8000ba4:	4214      	tst	r4, r2
 8000ba6:	d0cd      	beq.n	8000b44 <__aeabi_dadd+0x5c0>
 8000ba8:	08dd      	lsrs	r5, r3, #3
 8000baa:	4215      	tst	r5, r2
 8000bac:	d1ca      	bne.n	8000b44 <__aeabi_dadd+0x5c0>
 8000bae:	4663      	mov	r3, ip
 8000bb0:	08d8      	lsrs	r0, r3, #3
 8000bb2:	4653      	mov	r3, sl
 8000bb4:	075b      	lsls	r3, r3, #29
 8000bb6:	000e      	movs	r6, r1
 8000bb8:	002c      	movs	r4, r5
 8000bba:	4318      	orrs	r0, r3
 8000bbc:	e7c2      	b.n	8000b44 <__aeabi_dadd+0x5c0>
 8000bbe:	4663      	mov	r3, ip
 8000bc0:	08d9      	lsrs	r1, r3, #3
 8000bc2:	4653      	mov	r3, sl
 8000bc4:	075a      	lsls	r2, r3, #29
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	08dc      	lsrs	r4, r3, #3
 8000bca:	e699      	b.n	8000900 <__aeabi_dadd+0x37c>
 8000bcc:	4663      	mov	r3, ip
 8000bce:	08d8      	lsrs	r0, r3, #3
 8000bd0:	4653      	mov	r3, sl
 8000bd2:	075a      	lsls	r2, r3, #29
 8000bd4:	000e      	movs	r6, r1
 8000bd6:	4302      	orrs	r2, r0
 8000bd8:	08dc      	lsrs	r4, r3, #3
 8000bda:	e6a1      	b.n	8000920 <__aeabi_dadd+0x39c>
 8000bdc:	0011      	movs	r1, r2
 8000bde:	0027      	movs	r7, r4
 8000be0:	3920      	subs	r1, #32
 8000be2:	40cf      	lsrs	r7, r1
 8000be4:	2a20      	cmp	r2, #32
 8000be6:	d003      	beq.n	8000bf0 <__aeabi_dadd+0x66c>
 8000be8:	2140      	movs	r1, #64	@ 0x40
 8000bea:	1a8a      	subs	r2, r1, r2
 8000bec:	4094      	lsls	r4, r2
 8000bee:	4320      	orrs	r0, r4
 8000bf0:	1e42      	subs	r2, r0, #1
 8000bf2:	4190      	sbcs	r0, r2
 8000bf4:	0005      	movs	r5, r0
 8000bf6:	433d      	orrs	r5, r7
 8000bf8:	e651      	b.n	800089e <__aeabi_dadd+0x31a>
 8000bfa:	000c      	movs	r4, r1
 8000bfc:	2500      	movs	r5, #0
 8000bfe:	2200      	movs	r2, #0
 8000c00:	e558      	b.n	80006b4 <__aeabi_dadd+0x130>
 8000c02:	4460      	add	r0, ip
 8000c04:	4560      	cmp	r0, ip
 8000c06:	4192      	sbcs	r2, r2
 8000c08:	4454      	add	r4, sl
 8000c0a:	4252      	negs	r2, r2
 8000c0c:	0005      	movs	r5, r0
 8000c0e:	18a4      	adds	r4, r4, r2
 8000c10:	e73a      	b.n	8000a88 <__aeabi_dadd+0x504>
 8000c12:	4653      	mov	r3, sl
 8000c14:	075a      	lsls	r2, r3, #29
 8000c16:	4663      	mov	r3, ip
 8000c18:	08d9      	lsrs	r1, r3, #3
 8000c1a:	4653      	mov	r3, sl
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	08dc      	lsrs	r4, r3, #3
 8000c20:	e67e      	b.n	8000920 <__aeabi_dadd+0x39c>
 8000c22:	001a      	movs	r2, r3
 8000c24:	001c      	movs	r4, r3
 8000c26:	432a      	orrs	r2, r5
 8000c28:	d000      	beq.n	8000c2c <__aeabi_dadd+0x6a8>
 8000c2a:	e6ab      	b.n	8000984 <__aeabi_dadd+0x400>
 8000c2c:	e6c1      	b.n	80009b2 <__aeabi_dadd+0x42e>
 8000c2e:	2120      	movs	r1, #32
 8000c30:	2500      	movs	r5, #0
 8000c32:	1a09      	subs	r1, r1, r0
 8000c34:	e519      	b.n	800066a <__aeabi_dadd+0xe6>
 8000c36:	2200      	movs	r2, #0
 8000c38:	2500      	movs	r5, #0
 8000c3a:	4c01      	ldr	r4, [pc, #4]	@ (8000c40 <__aeabi_dadd+0x6bc>)
 8000c3c:	e53a      	b.n	80006b4 <__aeabi_dadd+0x130>
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	000007ff 	.word	0x000007ff
 8000c44:	ff7fffff 	.word	0xff7fffff
 8000c48:	000007fe 	.word	0x000007fe

08000c4c <__aeabi_ddiv>:
 8000c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c4e:	46de      	mov	lr, fp
 8000c50:	4645      	mov	r5, r8
 8000c52:	4657      	mov	r7, sl
 8000c54:	464e      	mov	r6, r9
 8000c56:	b5e0      	push	{r5, r6, r7, lr}
 8000c58:	b087      	sub	sp, #28
 8000c5a:	9200      	str	r2, [sp, #0]
 8000c5c:	9301      	str	r3, [sp, #4]
 8000c5e:	030b      	lsls	r3, r1, #12
 8000c60:	0b1b      	lsrs	r3, r3, #12
 8000c62:	469b      	mov	fp, r3
 8000c64:	0fca      	lsrs	r2, r1, #31
 8000c66:	004b      	lsls	r3, r1, #1
 8000c68:	0004      	movs	r4, r0
 8000c6a:	4680      	mov	r8, r0
 8000c6c:	0d5b      	lsrs	r3, r3, #21
 8000c6e:	9202      	str	r2, [sp, #8]
 8000c70:	d100      	bne.n	8000c74 <__aeabi_ddiv+0x28>
 8000c72:	e16a      	b.n	8000f4a <__aeabi_ddiv+0x2fe>
 8000c74:	4ad4      	ldr	r2, [pc, #848]	@ (8000fc8 <__aeabi_ddiv+0x37c>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d100      	bne.n	8000c7c <__aeabi_ddiv+0x30>
 8000c7a:	e18c      	b.n	8000f96 <__aeabi_ddiv+0x34a>
 8000c7c:	4659      	mov	r1, fp
 8000c7e:	0f42      	lsrs	r2, r0, #29
 8000c80:	00c9      	lsls	r1, r1, #3
 8000c82:	430a      	orrs	r2, r1
 8000c84:	2180      	movs	r1, #128	@ 0x80
 8000c86:	0409      	lsls	r1, r1, #16
 8000c88:	4311      	orrs	r1, r2
 8000c8a:	00c2      	lsls	r2, r0, #3
 8000c8c:	4690      	mov	r8, r2
 8000c8e:	4acf      	ldr	r2, [pc, #828]	@ (8000fcc <__aeabi_ddiv+0x380>)
 8000c90:	4689      	mov	r9, r1
 8000c92:	4692      	mov	sl, r2
 8000c94:	449a      	add	sl, r3
 8000c96:	2300      	movs	r3, #0
 8000c98:	2400      	movs	r4, #0
 8000c9a:	9303      	str	r3, [sp, #12]
 8000c9c:	9e00      	ldr	r6, [sp, #0]
 8000c9e:	9f01      	ldr	r7, [sp, #4]
 8000ca0:	033b      	lsls	r3, r7, #12
 8000ca2:	0b1b      	lsrs	r3, r3, #12
 8000ca4:	469b      	mov	fp, r3
 8000ca6:	007b      	lsls	r3, r7, #1
 8000ca8:	0030      	movs	r0, r6
 8000caa:	0d5b      	lsrs	r3, r3, #21
 8000cac:	0ffd      	lsrs	r5, r7, #31
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d100      	bne.n	8000cb4 <__aeabi_ddiv+0x68>
 8000cb2:	e128      	b.n	8000f06 <__aeabi_ddiv+0x2ba>
 8000cb4:	4ac4      	ldr	r2, [pc, #784]	@ (8000fc8 <__aeabi_ddiv+0x37c>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d100      	bne.n	8000cbc <__aeabi_ddiv+0x70>
 8000cba:	e177      	b.n	8000fac <__aeabi_ddiv+0x360>
 8000cbc:	4659      	mov	r1, fp
 8000cbe:	0f72      	lsrs	r2, r6, #29
 8000cc0:	00c9      	lsls	r1, r1, #3
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	2180      	movs	r1, #128	@ 0x80
 8000cc6:	0409      	lsls	r1, r1, #16
 8000cc8:	4311      	orrs	r1, r2
 8000cca:	468b      	mov	fp, r1
 8000ccc:	49bf      	ldr	r1, [pc, #764]	@ (8000fcc <__aeabi_ddiv+0x380>)
 8000cce:	00f2      	lsls	r2, r6, #3
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	4651      	mov	r1, sl
 8000cd4:	4463      	add	r3, ip
 8000cd6:	1acb      	subs	r3, r1, r3
 8000cd8:	469a      	mov	sl, r3
 8000cda:	2300      	movs	r3, #0
 8000cdc:	9e02      	ldr	r6, [sp, #8]
 8000cde:	406e      	eors	r6, r5
 8000ce0:	2c0f      	cmp	r4, #15
 8000ce2:	d827      	bhi.n	8000d34 <__aeabi_ddiv+0xe8>
 8000ce4:	49ba      	ldr	r1, [pc, #744]	@ (8000fd0 <__aeabi_ddiv+0x384>)
 8000ce6:	00a4      	lsls	r4, r4, #2
 8000ce8:	5909      	ldr	r1, [r1, r4]
 8000cea:	468f      	mov	pc, r1
 8000cec:	46cb      	mov	fp, r9
 8000cee:	4642      	mov	r2, r8
 8000cf0:	9e02      	ldr	r6, [sp, #8]
 8000cf2:	9b03      	ldr	r3, [sp, #12]
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d016      	beq.n	8000d26 <__aeabi_ddiv+0xda>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_ddiv+0xb2>
 8000cfc:	e2a6      	b.n	800124c <__aeabi_ddiv+0x600>
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d000      	beq.n	8000d04 <__aeabi_ddiv+0xb8>
 8000d02:	e0df      	b.n	8000ec4 <__aeabi_ddiv+0x278>
 8000d04:	2200      	movs	r2, #0
 8000d06:	2300      	movs	r3, #0
 8000d08:	2400      	movs	r4, #0
 8000d0a:	4690      	mov	r8, r2
 8000d0c:	051b      	lsls	r3, r3, #20
 8000d0e:	4323      	orrs	r3, r4
 8000d10:	07f6      	lsls	r6, r6, #31
 8000d12:	4333      	orrs	r3, r6
 8000d14:	4640      	mov	r0, r8
 8000d16:	0019      	movs	r1, r3
 8000d18:	b007      	add	sp, #28
 8000d1a:	bcf0      	pop	{r4, r5, r6, r7}
 8000d1c:	46bb      	mov	fp, r7
 8000d1e:	46b2      	mov	sl, r6
 8000d20:	46a9      	mov	r9, r5
 8000d22:	46a0      	mov	r8, r4
 8000d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d26:	2200      	movs	r2, #0
 8000d28:	2400      	movs	r4, #0
 8000d2a:	4690      	mov	r8, r2
 8000d2c:	4ba6      	ldr	r3, [pc, #664]	@ (8000fc8 <__aeabi_ddiv+0x37c>)
 8000d2e:	e7ed      	b.n	8000d0c <__aeabi_ddiv+0xc0>
 8000d30:	002e      	movs	r6, r5
 8000d32:	e7df      	b.n	8000cf4 <__aeabi_ddiv+0xa8>
 8000d34:	45cb      	cmp	fp, r9
 8000d36:	d200      	bcs.n	8000d3a <__aeabi_ddiv+0xee>
 8000d38:	e1d4      	b.n	80010e4 <__aeabi_ddiv+0x498>
 8000d3a:	d100      	bne.n	8000d3e <__aeabi_ddiv+0xf2>
 8000d3c:	e1cf      	b.n	80010de <__aeabi_ddiv+0x492>
 8000d3e:	2301      	movs	r3, #1
 8000d40:	425b      	negs	r3, r3
 8000d42:	469c      	mov	ip, r3
 8000d44:	4644      	mov	r4, r8
 8000d46:	4648      	mov	r0, r9
 8000d48:	2700      	movs	r7, #0
 8000d4a:	44e2      	add	sl, ip
 8000d4c:	465b      	mov	r3, fp
 8000d4e:	0e15      	lsrs	r5, r2, #24
 8000d50:	021b      	lsls	r3, r3, #8
 8000d52:	431d      	orrs	r5, r3
 8000d54:	0c19      	lsrs	r1, r3, #16
 8000d56:	042b      	lsls	r3, r5, #16
 8000d58:	0212      	lsls	r2, r2, #8
 8000d5a:	9500      	str	r5, [sp, #0]
 8000d5c:	0c1d      	lsrs	r5, r3, #16
 8000d5e:	4691      	mov	r9, r2
 8000d60:	9102      	str	r1, [sp, #8]
 8000d62:	9503      	str	r5, [sp, #12]
 8000d64:	f7ff fa72 	bl	800024c <__aeabi_uidivmod>
 8000d68:	0002      	movs	r2, r0
 8000d6a:	436a      	muls	r2, r5
 8000d6c:	040b      	lsls	r3, r1, #16
 8000d6e:	0c21      	lsrs	r1, r4, #16
 8000d70:	4680      	mov	r8, r0
 8000d72:	4319      	orrs	r1, r3
 8000d74:	428a      	cmp	r2, r1
 8000d76:	d909      	bls.n	8000d8c <__aeabi_ddiv+0x140>
 8000d78:	9d00      	ldr	r5, [sp, #0]
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	46ac      	mov	ip, r5
 8000d7e:	425b      	negs	r3, r3
 8000d80:	4461      	add	r1, ip
 8000d82:	469c      	mov	ip, r3
 8000d84:	44e0      	add	r8, ip
 8000d86:	428d      	cmp	r5, r1
 8000d88:	d800      	bhi.n	8000d8c <__aeabi_ddiv+0x140>
 8000d8a:	e1fb      	b.n	8001184 <__aeabi_ddiv+0x538>
 8000d8c:	1a88      	subs	r0, r1, r2
 8000d8e:	9902      	ldr	r1, [sp, #8]
 8000d90:	f7ff fa5c 	bl	800024c <__aeabi_uidivmod>
 8000d94:	9a03      	ldr	r2, [sp, #12]
 8000d96:	0424      	lsls	r4, r4, #16
 8000d98:	4342      	muls	r2, r0
 8000d9a:	0409      	lsls	r1, r1, #16
 8000d9c:	0c24      	lsrs	r4, r4, #16
 8000d9e:	0003      	movs	r3, r0
 8000da0:	430c      	orrs	r4, r1
 8000da2:	42a2      	cmp	r2, r4
 8000da4:	d906      	bls.n	8000db4 <__aeabi_ddiv+0x168>
 8000da6:	9900      	ldr	r1, [sp, #0]
 8000da8:	3b01      	subs	r3, #1
 8000daa:	468c      	mov	ip, r1
 8000dac:	4464      	add	r4, ip
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	d800      	bhi.n	8000db4 <__aeabi_ddiv+0x168>
 8000db2:	e1e1      	b.n	8001178 <__aeabi_ddiv+0x52c>
 8000db4:	1aa0      	subs	r0, r4, r2
 8000db6:	4642      	mov	r2, r8
 8000db8:	0412      	lsls	r2, r2, #16
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	4693      	mov	fp, r2
 8000dbe:	464b      	mov	r3, r9
 8000dc0:	4659      	mov	r1, fp
 8000dc2:	0c1b      	lsrs	r3, r3, #16
 8000dc4:	001d      	movs	r5, r3
 8000dc6:	9304      	str	r3, [sp, #16]
 8000dc8:	040b      	lsls	r3, r1, #16
 8000dca:	4649      	mov	r1, r9
 8000dcc:	0409      	lsls	r1, r1, #16
 8000dce:	0c09      	lsrs	r1, r1, #16
 8000dd0:	000c      	movs	r4, r1
 8000dd2:	0c1b      	lsrs	r3, r3, #16
 8000dd4:	435c      	muls	r4, r3
 8000dd6:	0c12      	lsrs	r2, r2, #16
 8000dd8:	436b      	muls	r3, r5
 8000dda:	4688      	mov	r8, r1
 8000ddc:	4351      	muls	r1, r2
 8000dde:	436a      	muls	r2, r5
 8000de0:	0c25      	lsrs	r5, r4, #16
 8000de2:	46ac      	mov	ip, r5
 8000de4:	185b      	adds	r3, r3, r1
 8000de6:	4463      	add	r3, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d903      	bls.n	8000df4 <__aeabi_ddiv+0x1a8>
 8000dec:	2180      	movs	r1, #128	@ 0x80
 8000dee:	0249      	lsls	r1, r1, #9
 8000df0:	468c      	mov	ip, r1
 8000df2:	4462      	add	r2, ip
 8000df4:	0c19      	lsrs	r1, r3, #16
 8000df6:	0424      	lsls	r4, r4, #16
 8000df8:	041b      	lsls	r3, r3, #16
 8000dfa:	0c24      	lsrs	r4, r4, #16
 8000dfc:	188a      	adds	r2, r1, r2
 8000dfe:	191c      	adds	r4, r3, r4
 8000e00:	4290      	cmp	r0, r2
 8000e02:	d302      	bcc.n	8000e0a <__aeabi_ddiv+0x1be>
 8000e04:	d116      	bne.n	8000e34 <__aeabi_ddiv+0x1e8>
 8000e06:	42a7      	cmp	r7, r4
 8000e08:	d214      	bcs.n	8000e34 <__aeabi_ddiv+0x1e8>
 8000e0a:	465b      	mov	r3, fp
 8000e0c:	9d00      	ldr	r5, [sp, #0]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	444f      	add	r7, r9
 8000e12:	9305      	str	r3, [sp, #20]
 8000e14:	454f      	cmp	r7, r9
 8000e16:	419b      	sbcs	r3, r3
 8000e18:	46ac      	mov	ip, r5
 8000e1a:	425b      	negs	r3, r3
 8000e1c:	4463      	add	r3, ip
 8000e1e:	18c0      	adds	r0, r0, r3
 8000e20:	4285      	cmp	r5, r0
 8000e22:	d300      	bcc.n	8000e26 <__aeabi_ddiv+0x1da>
 8000e24:	e1a1      	b.n	800116a <__aeabi_ddiv+0x51e>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	d900      	bls.n	8000e2c <__aeabi_ddiv+0x1e0>
 8000e2a:	e1f6      	b.n	800121a <__aeabi_ddiv+0x5ce>
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_ddiv+0x1e4>
 8000e2e:	e1f1      	b.n	8001214 <__aeabi_ddiv+0x5c8>
 8000e30:	9b05      	ldr	r3, [sp, #20]
 8000e32:	469b      	mov	fp, r3
 8000e34:	1b3c      	subs	r4, r7, r4
 8000e36:	42a7      	cmp	r7, r4
 8000e38:	41bf      	sbcs	r7, r7
 8000e3a:	9d00      	ldr	r5, [sp, #0]
 8000e3c:	1a80      	subs	r0, r0, r2
 8000e3e:	427f      	negs	r7, r7
 8000e40:	1bc0      	subs	r0, r0, r7
 8000e42:	4285      	cmp	r5, r0
 8000e44:	d100      	bne.n	8000e48 <__aeabi_ddiv+0x1fc>
 8000e46:	e1d0      	b.n	80011ea <__aeabi_ddiv+0x59e>
 8000e48:	9902      	ldr	r1, [sp, #8]
 8000e4a:	f7ff f9ff 	bl	800024c <__aeabi_uidivmod>
 8000e4e:	9a03      	ldr	r2, [sp, #12]
 8000e50:	040b      	lsls	r3, r1, #16
 8000e52:	4342      	muls	r2, r0
 8000e54:	0c21      	lsrs	r1, r4, #16
 8000e56:	0007      	movs	r7, r0
 8000e58:	4319      	orrs	r1, r3
 8000e5a:	428a      	cmp	r2, r1
 8000e5c:	d900      	bls.n	8000e60 <__aeabi_ddiv+0x214>
 8000e5e:	e178      	b.n	8001152 <__aeabi_ddiv+0x506>
 8000e60:	1a88      	subs	r0, r1, r2
 8000e62:	9902      	ldr	r1, [sp, #8]
 8000e64:	f7ff f9f2 	bl	800024c <__aeabi_uidivmod>
 8000e68:	9a03      	ldr	r2, [sp, #12]
 8000e6a:	0424      	lsls	r4, r4, #16
 8000e6c:	4342      	muls	r2, r0
 8000e6e:	0409      	lsls	r1, r1, #16
 8000e70:	0c24      	lsrs	r4, r4, #16
 8000e72:	0003      	movs	r3, r0
 8000e74:	430c      	orrs	r4, r1
 8000e76:	42a2      	cmp	r2, r4
 8000e78:	d900      	bls.n	8000e7c <__aeabi_ddiv+0x230>
 8000e7a:	e15d      	b.n	8001138 <__aeabi_ddiv+0x4ec>
 8000e7c:	4641      	mov	r1, r8
 8000e7e:	1aa4      	subs	r4, r4, r2
 8000e80:	043a      	lsls	r2, r7, #16
 8000e82:	431a      	orrs	r2, r3
 8000e84:	9d04      	ldr	r5, [sp, #16]
 8000e86:	0413      	lsls	r3, r2, #16
 8000e88:	0c1b      	lsrs	r3, r3, #16
 8000e8a:	4359      	muls	r1, r3
 8000e8c:	4647      	mov	r7, r8
 8000e8e:	436b      	muls	r3, r5
 8000e90:	469c      	mov	ip, r3
 8000e92:	0c10      	lsrs	r0, r2, #16
 8000e94:	4347      	muls	r7, r0
 8000e96:	0c0b      	lsrs	r3, r1, #16
 8000e98:	44bc      	add	ip, r7
 8000e9a:	4463      	add	r3, ip
 8000e9c:	4368      	muls	r0, r5
 8000e9e:	429f      	cmp	r7, r3
 8000ea0:	d903      	bls.n	8000eaa <__aeabi_ddiv+0x25e>
 8000ea2:	2580      	movs	r5, #128	@ 0x80
 8000ea4:	026d      	lsls	r5, r5, #9
 8000ea6:	46ac      	mov	ip, r5
 8000ea8:	4460      	add	r0, ip
 8000eaa:	0c1f      	lsrs	r7, r3, #16
 8000eac:	0409      	lsls	r1, r1, #16
 8000eae:	041b      	lsls	r3, r3, #16
 8000eb0:	0c09      	lsrs	r1, r1, #16
 8000eb2:	183f      	adds	r7, r7, r0
 8000eb4:	185b      	adds	r3, r3, r1
 8000eb6:	42bc      	cmp	r4, r7
 8000eb8:	d200      	bcs.n	8000ebc <__aeabi_ddiv+0x270>
 8000eba:	e102      	b.n	80010c2 <__aeabi_ddiv+0x476>
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_ddiv+0x274>
 8000ebe:	e0fd      	b.n	80010bc <__aeabi_ddiv+0x470>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	431a      	orrs	r2, r3
 8000ec4:	4b43      	ldr	r3, [pc, #268]	@ (8000fd4 <__aeabi_ddiv+0x388>)
 8000ec6:	4453      	add	r3, sl
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	dc00      	bgt.n	8000ece <__aeabi_ddiv+0x282>
 8000ecc:	e0ae      	b.n	800102c <__aeabi_ddiv+0x3e0>
 8000ece:	0751      	lsls	r1, r2, #29
 8000ed0:	d000      	beq.n	8000ed4 <__aeabi_ddiv+0x288>
 8000ed2:	e198      	b.n	8001206 <__aeabi_ddiv+0x5ba>
 8000ed4:	4659      	mov	r1, fp
 8000ed6:	01c9      	lsls	r1, r1, #7
 8000ed8:	d506      	bpl.n	8000ee8 <__aeabi_ddiv+0x29c>
 8000eda:	4659      	mov	r1, fp
 8000edc:	4b3e      	ldr	r3, [pc, #248]	@ (8000fd8 <__aeabi_ddiv+0x38c>)
 8000ede:	4019      	ands	r1, r3
 8000ee0:	2380      	movs	r3, #128	@ 0x80
 8000ee2:	468b      	mov	fp, r1
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	4453      	add	r3, sl
 8000ee8:	493c      	ldr	r1, [pc, #240]	@ (8000fdc <__aeabi_ddiv+0x390>)
 8000eea:	428b      	cmp	r3, r1
 8000eec:	dd00      	ble.n	8000ef0 <__aeabi_ddiv+0x2a4>
 8000eee:	e71a      	b.n	8000d26 <__aeabi_ddiv+0xda>
 8000ef0:	4659      	mov	r1, fp
 8000ef2:	08d2      	lsrs	r2, r2, #3
 8000ef4:	0749      	lsls	r1, r1, #29
 8000ef6:	4311      	orrs	r1, r2
 8000ef8:	465a      	mov	r2, fp
 8000efa:	055b      	lsls	r3, r3, #21
 8000efc:	0254      	lsls	r4, r2, #9
 8000efe:	4688      	mov	r8, r1
 8000f00:	0b24      	lsrs	r4, r4, #12
 8000f02:	0d5b      	lsrs	r3, r3, #21
 8000f04:	e702      	b.n	8000d0c <__aeabi_ddiv+0xc0>
 8000f06:	465a      	mov	r2, fp
 8000f08:	9b00      	ldr	r3, [sp, #0]
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	d100      	bne.n	8000f10 <__aeabi_ddiv+0x2c4>
 8000f0e:	e07e      	b.n	800100e <__aeabi_ddiv+0x3c2>
 8000f10:	465b      	mov	r3, fp
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d100      	bne.n	8000f18 <__aeabi_ddiv+0x2cc>
 8000f16:	e100      	b.n	800111a <__aeabi_ddiv+0x4ce>
 8000f18:	4658      	mov	r0, fp
 8000f1a:	f001 f9ef 	bl	80022fc <__clzsi2>
 8000f1e:	0002      	movs	r2, r0
 8000f20:	0003      	movs	r3, r0
 8000f22:	3a0b      	subs	r2, #11
 8000f24:	271d      	movs	r7, #29
 8000f26:	9e00      	ldr	r6, [sp, #0]
 8000f28:	1aba      	subs	r2, r7, r2
 8000f2a:	0019      	movs	r1, r3
 8000f2c:	4658      	mov	r0, fp
 8000f2e:	40d6      	lsrs	r6, r2
 8000f30:	3908      	subs	r1, #8
 8000f32:	4088      	lsls	r0, r1
 8000f34:	0032      	movs	r2, r6
 8000f36:	4302      	orrs	r2, r0
 8000f38:	4693      	mov	fp, r2
 8000f3a:	9a00      	ldr	r2, [sp, #0]
 8000f3c:	408a      	lsls	r2, r1
 8000f3e:	4928      	ldr	r1, [pc, #160]	@ (8000fe0 <__aeabi_ddiv+0x394>)
 8000f40:	4453      	add	r3, sl
 8000f42:	468a      	mov	sl, r1
 8000f44:	449a      	add	sl, r3
 8000f46:	2300      	movs	r3, #0
 8000f48:	e6c8      	b.n	8000cdc <__aeabi_ddiv+0x90>
 8000f4a:	465b      	mov	r3, fp
 8000f4c:	4303      	orrs	r3, r0
 8000f4e:	4699      	mov	r9, r3
 8000f50:	d056      	beq.n	8001000 <__aeabi_ddiv+0x3b4>
 8000f52:	465b      	mov	r3, fp
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d100      	bne.n	8000f5a <__aeabi_ddiv+0x30e>
 8000f58:	e0cd      	b.n	80010f6 <__aeabi_ddiv+0x4aa>
 8000f5a:	4658      	mov	r0, fp
 8000f5c:	f001 f9ce 	bl	80022fc <__clzsi2>
 8000f60:	230b      	movs	r3, #11
 8000f62:	425b      	negs	r3, r3
 8000f64:	469c      	mov	ip, r3
 8000f66:	0002      	movs	r2, r0
 8000f68:	4484      	add	ip, r0
 8000f6a:	4666      	mov	r6, ip
 8000f6c:	231d      	movs	r3, #29
 8000f6e:	1b9b      	subs	r3, r3, r6
 8000f70:	0026      	movs	r6, r4
 8000f72:	0011      	movs	r1, r2
 8000f74:	4658      	mov	r0, fp
 8000f76:	40de      	lsrs	r6, r3
 8000f78:	3908      	subs	r1, #8
 8000f7a:	4088      	lsls	r0, r1
 8000f7c:	0033      	movs	r3, r6
 8000f7e:	4303      	orrs	r3, r0
 8000f80:	4699      	mov	r9, r3
 8000f82:	0023      	movs	r3, r4
 8000f84:	408b      	lsls	r3, r1
 8000f86:	4698      	mov	r8, r3
 8000f88:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <__aeabi_ddiv+0x398>)
 8000f8a:	2400      	movs	r4, #0
 8000f8c:	1a9b      	subs	r3, r3, r2
 8000f8e:	469a      	mov	sl, r3
 8000f90:	2300      	movs	r3, #0
 8000f92:	9303      	str	r3, [sp, #12]
 8000f94:	e682      	b.n	8000c9c <__aeabi_ddiv+0x50>
 8000f96:	465a      	mov	r2, fp
 8000f98:	4302      	orrs	r2, r0
 8000f9a:	4691      	mov	r9, r2
 8000f9c:	d12a      	bne.n	8000ff4 <__aeabi_ddiv+0x3a8>
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	469a      	mov	sl, r3
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	4690      	mov	r8, r2
 8000fa6:	2408      	movs	r4, #8
 8000fa8:	9303      	str	r3, [sp, #12]
 8000faa:	e677      	b.n	8000c9c <__aeabi_ddiv+0x50>
 8000fac:	465a      	mov	r2, fp
 8000fae:	9b00      	ldr	r3, [sp, #0]
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe8 <__aeabi_ddiv+0x39c>)
 8000fb4:	469c      	mov	ip, r3
 8000fb6:	44e2      	add	sl, ip
 8000fb8:	2a00      	cmp	r2, #0
 8000fba:	d117      	bne.n	8000fec <__aeabi_ddiv+0x3a0>
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	431c      	orrs	r4, r3
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	469b      	mov	fp, r3
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	e689      	b.n	8000cdc <__aeabi_ddiv+0x90>
 8000fc8:	000007ff 	.word	0x000007ff
 8000fcc:	fffffc01 	.word	0xfffffc01
 8000fd0:	080124bc 	.word	0x080124bc
 8000fd4:	000003ff 	.word	0x000003ff
 8000fd8:	feffffff 	.word	0xfeffffff
 8000fdc:	000007fe 	.word	0x000007fe
 8000fe0:	000003f3 	.word	0x000003f3
 8000fe4:	fffffc0d 	.word	0xfffffc0d
 8000fe8:	fffff801 	.word	0xfffff801
 8000fec:	2303      	movs	r3, #3
 8000fee:	0032      	movs	r2, r6
 8000ff0:	431c      	orrs	r4, r3
 8000ff2:	e673      	b.n	8000cdc <__aeabi_ddiv+0x90>
 8000ff4:	469a      	mov	sl, r3
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	46d9      	mov	r9, fp
 8000ffa:	240c      	movs	r4, #12
 8000ffc:	9303      	str	r3, [sp, #12]
 8000ffe:	e64d      	b.n	8000c9c <__aeabi_ddiv+0x50>
 8001000:	2300      	movs	r3, #0
 8001002:	4698      	mov	r8, r3
 8001004:	469a      	mov	sl, r3
 8001006:	3301      	adds	r3, #1
 8001008:	2404      	movs	r4, #4
 800100a:	9303      	str	r3, [sp, #12]
 800100c:	e646      	b.n	8000c9c <__aeabi_ddiv+0x50>
 800100e:	2301      	movs	r3, #1
 8001010:	431c      	orrs	r4, r3
 8001012:	2300      	movs	r3, #0
 8001014:	469b      	mov	fp, r3
 8001016:	3301      	adds	r3, #1
 8001018:	e660      	b.n	8000cdc <__aeabi_ddiv+0x90>
 800101a:	2300      	movs	r3, #0
 800101c:	2480      	movs	r4, #128	@ 0x80
 800101e:	4698      	mov	r8, r3
 8001020:	2600      	movs	r6, #0
 8001022:	4b92      	ldr	r3, [pc, #584]	@ (800126c <__aeabi_ddiv+0x620>)
 8001024:	0324      	lsls	r4, r4, #12
 8001026:	e671      	b.n	8000d0c <__aeabi_ddiv+0xc0>
 8001028:	2201      	movs	r2, #1
 800102a:	4252      	negs	r2, r2
 800102c:	2101      	movs	r1, #1
 800102e:	1ac9      	subs	r1, r1, r3
 8001030:	2938      	cmp	r1, #56	@ 0x38
 8001032:	dd00      	ble.n	8001036 <__aeabi_ddiv+0x3ea>
 8001034:	e666      	b.n	8000d04 <__aeabi_ddiv+0xb8>
 8001036:	291f      	cmp	r1, #31
 8001038:	dc00      	bgt.n	800103c <__aeabi_ddiv+0x3f0>
 800103a:	e0ab      	b.n	8001194 <__aeabi_ddiv+0x548>
 800103c:	201f      	movs	r0, #31
 800103e:	4240      	negs	r0, r0
 8001040:	1ac3      	subs	r3, r0, r3
 8001042:	4658      	mov	r0, fp
 8001044:	40d8      	lsrs	r0, r3
 8001046:	0003      	movs	r3, r0
 8001048:	2920      	cmp	r1, #32
 800104a:	d004      	beq.n	8001056 <__aeabi_ddiv+0x40a>
 800104c:	4658      	mov	r0, fp
 800104e:	4988      	ldr	r1, [pc, #544]	@ (8001270 <__aeabi_ddiv+0x624>)
 8001050:	4451      	add	r1, sl
 8001052:	4088      	lsls	r0, r1
 8001054:	4302      	orrs	r2, r0
 8001056:	1e51      	subs	r1, r2, #1
 8001058:	418a      	sbcs	r2, r1
 800105a:	431a      	orrs	r2, r3
 800105c:	2307      	movs	r3, #7
 800105e:	0019      	movs	r1, r3
 8001060:	2400      	movs	r4, #0
 8001062:	4011      	ands	r1, r2
 8001064:	4213      	tst	r3, r2
 8001066:	d00c      	beq.n	8001082 <__aeabi_ddiv+0x436>
 8001068:	230f      	movs	r3, #15
 800106a:	4013      	ands	r3, r2
 800106c:	2b04      	cmp	r3, #4
 800106e:	d100      	bne.n	8001072 <__aeabi_ddiv+0x426>
 8001070:	e0f9      	b.n	8001266 <__aeabi_ddiv+0x61a>
 8001072:	1d11      	adds	r1, r2, #4
 8001074:	4291      	cmp	r1, r2
 8001076:	419b      	sbcs	r3, r3
 8001078:	000a      	movs	r2, r1
 800107a:	425b      	negs	r3, r3
 800107c:	0759      	lsls	r1, r3, #29
 800107e:	025b      	lsls	r3, r3, #9
 8001080:	0b1c      	lsrs	r4, r3, #12
 8001082:	08d2      	lsrs	r2, r2, #3
 8001084:	430a      	orrs	r2, r1
 8001086:	4690      	mov	r8, r2
 8001088:	2300      	movs	r3, #0
 800108a:	e63f      	b.n	8000d0c <__aeabi_ddiv+0xc0>
 800108c:	2480      	movs	r4, #128	@ 0x80
 800108e:	464b      	mov	r3, r9
 8001090:	0324      	lsls	r4, r4, #12
 8001092:	4223      	tst	r3, r4
 8001094:	d009      	beq.n	80010aa <__aeabi_ddiv+0x45e>
 8001096:	465b      	mov	r3, fp
 8001098:	4223      	tst	r3, r4
 800109a:	d106      	bne.n	80010aa <__aeabi_ddiv+0x45e>
 800109c:	431c      	orrs	r4, r3
 800109e:	0324      	lsls	r4, r4, #12
 80010a0:	002e      	movs	r6, r5
 80010a2:	4690      	mov	r8, r2
 80010a4:	4b71      	ldr	r3, [pc, #452]	@ (800126c <__aeabi_ddiv+0x620>)
 80010a6:	0b24      	lsrs	r4, r4, #12
 80010a8:	e630      	b.n	8000d0c <__aeabi_ddiv+0xc0>
 80010aa:	2480      	movs	r4, #128	@ 0x80
 80010ac:	464b      	mov	r3, r9
 80010ae:	0324      	lsls	r4, r4, #12
 80010b0:	431c      	orrs	r4, r3
 80010b2:	0324      	lsls	r4, r4, #12
 80010b4:	9e02      	ldr	r6, [sp, #8]
 80010b6:	4b6d      	ldr	r3, [pc, #436]	@ (800126c <__aeabi_ddiv+0x620>)
 80010b8:	0b24      	lsrs	r4, r4, #12
 80010ba:	e627      	b.n	8000d0c <__aeabi_ddiv+0xc0>
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d100      	bne.n	80010c2 <__aeabi_ddiv+0x476>
 80010c0:	e700      	b.n	8000ec4 <__aeabi_ddiv+0x278>
 80010c2:	9800      	ldr	r0, [sp, #0]
 80010c4:	1e51      	subs	r1, r2, #1
 80010c6:	4684      	mov	ip, r0
 80010c8:	4464      	add	r4, ip
 80010ca:	4284      	cmp	r4, r0
 80010cc:	d200      	bcs.n	80010d0 <__aeabi_ddiv+0x484>
 80010ce:	e084      	b.n	80011da <__aeabi_ddiv+0x58e>
 80010d0:	42bc      	cmp	r4, r7
 80010d2:	d200      	bcs.n	80010d6 <__aeabi_ddiv+0x48a>
 80010d4:	e0ae      	b.n	8001234 <__aeabi_ddiv+0x5e8>
 80010d6:	d100      	bne.n	80010da <__aeabi_ddiv+0x48e>
 80010d8:	e0c1      	b.n	800125e <__aeabi_ddiv+0x612>
 80010da:	000a      	movs	r2, r1
 80010dc:	e6f0      	b.n	8000ec0 <__aeabi_ddiv+0x274>
 80010de:	4542      	cmp	r2, r8
 80010e0:	d900      	bls.n	80010e4 <__aeabi_ddiv+0x498>
 80010e2:	e62c      	b.n	8000d3e <__aeabi_ddiv+0xf2>
 80010e4:	464b      	mov	r3, r9
 80010e6:	07dc      	lsls	r4, r3, #31
 80010e8:	0858      	lsrs	r0, r3, #1
 80010ea:	4643      	mov	r3, r8
 80010ec:	085b      	lsrs	r3, r3, #1
 80010ee:	431c      	orrs	r4, r3
 80010f0:	4643      	mov	r3, r8
 80010f2:	07df      	lsls	r7, r3, #31
 80010f4:	e62a      	b.n	8000d4c <__aeabi_ddiv+0x100>
 80010f6:	f001 f901 	bl	80022fc <__clzsi2>
 80010fa:	2315      	movs	r3, #21
 80010fc:	469c      	mov	ip, r3
 80010fe:	4484      	add	ip, r0
 8001100:	0002      	movs	r2, r0
 8001102:	4663      	mov	r3, ip
 8001104:	3220      	adds	r2, #32
 8001106:	2b1c      	cmp	r3, #28
 8001108:	dc00      	bgt.n	800110c <__aeabi_ddiv+0x4c0>
 800110a:	e72e      	b.n	8000f6a <__aeabi_ddiv+0x31e>
 800110c:	0023      	movs	r3, r4
 800110e:	3808      	subs	r0, #8
 8001110:	4083      	lsls	r3, r0
 8001112:	4699      	mov	r9, r3
 8001114:	2300      	movs	r3, #0
 8001116:	4698      	mov	r8, r3
 8001118:	e736      	b.n	8000f88 <__aeabi_ddiv+0x33c>
 800111a:	f001 f8ef 	bl	80022fc <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	0003      	movs	r3, r0
 8001122:	3215      	adds	r2, #21
 8001124:	3320      	adds	r3, #32
 8001126:	2a1c      	cmp	r2, #28
 8001128:	dc00      	bgt.n	800112c <__aeabi_ddiv+0x4e0>
 800112a:	e6fb      	b.n	8000f24 <__aeabi_ddiv+0x2d8>
 800112c:	9900      	ldr	r1, [sp, #0]
 800112e:	3808      	subs	r0, #8
 8001130:	4081      	lsls	r1, r0
 8001132:	2200      	movs	r2, #0
 8001134:	468b      	mov	fp, r1
 8001136:	e702      	b.n	8000f3e <__aeabi_ddiv+0x2f2>
 8001138:	9900      	ldr	r1, [sp, #0]
 800113a:	3b01      	subs	r3, #1
 800113c:	468c      	mov	ip, r1
 800113e:	4464      	add	r4, ip
 8001140:	42a1      	cmp	r1, r4
 8001142:	d900      	bls.n	8001146 <__aeabi_ddiv+0x4fa>
 8001144:	e69a      	b.n	8000e7c <__aeabi_ddiv+0x230>
 8001146:	42a2      	cmp	r2, r4
 8001148:	d800      	bhi.n	800114c <__aeabi_ddiv+0x500>
 800114a:	e697      	b.n	8000e7c <__aeabi_ddiv+0x230>
 800114c:	1e83      	subs	r3, r0, #2
 800114e:	4464      	add	r4, ip
 8001150:	e694      	b.n	8000e7c <__aeabi_ddiv+0x230>
 8001152:	46ac      	mov	ip, r5
 8001154:	4461      	add	r1, ip
 8001156:	3f01      	subs	r7, #1
 8001158:	428d      	cmp	r5, r1
 800115a:	d900      	bls.n	800115e <__aeabi_ddiv+0x512>
 800115c:	e680      	b.n	8000e60 <__aeabi_ddiv+0x214>
 800115e:	428a      	cmp	r2, r1
 8001160:	d800      	bhi.n	8001164 <__aeabi_ddiv+0x518>
 8001162:	e67d      	b.n	8000e60 <__aeabi_ddiv+0x214>
 8001164:	1e87      	subs	r7, r0, #2
 8001166:	4461      	add	r1, ip
 8001168:	e67a      	b.n	8000e60 <__aeabi_ddiv+0x214>
 800116a:	4285      	cmp	r5, r0
 800116c:	d000      	beq.n	8001170 <__aeabi_ddiv+0x524>
 800116e:	e65f      	b.n	8000e30 <__aeabi_ddiv+0x1e4>
 8001170:	45b9      	cmp	r9, r7
 8001172:	d900      	bls.n	8001176 <__aeabi_ddiv+0x52a>
 8001174:	e65c      	b.n	8000e30 <__aeabi_ddiv+0x1e4>
 8001176:	e656      	b.n	8000e26 <__aeabi_ddiv+0x1da>
 8001178:	42a2      	cmp	r2, r4
 800117a:	d800      	bhi.n	800117e <__aeabi_ddiv+0x532>
 800117c:	e61a      	b.n	8000db4 <__aeabi_ddiv+0x168>
 800117e:	1e83      	subs	r3, r0, #2
 8001180:	4464      	add	r4, ip
 8001182:	e617      	b.n	8000db4 <__aeabi_ddiv+0x168>
 8001184:	428a      	cmp	r2, r1
 8001186:	d800      	bhi.n	800118a <__aeabi_ddiv+0x53e>
 8001188:	e600      	b.n	8000d8c <__aeabi_ddiv+0x140>
 800118a:	46ac      	mov	ip, r5
 800118c:	1e83      	subs	r3, r0, #2
 800118e:	4698      	mov	r8, r3
 8001190:	4461      	add	r1, ip
 8001192:	e5fb      	b.n	8000d8c <__aeabi_ddiv+0x140>
 8001194:	4837      	ldr	r0, [pc, #220]	@ (8001274 <__aeabi_ddiv+0x628>)
 8001196:	0014      	movs	r4, r2
 8001198:	4450      	add	r0, sl
 800119a:	4082      	lsls	r2, r0
 800119c:	465b      	mov	r3, fp
 800119e:	0017      	movs	r7, r2
 80011a0:	4083      	lsls	r3, r0
 80011a2:	40cc      	lsrs	r4, r1
 80011a4:	1e7a      	subs	r2, r7, #1
 80011a6:	4197      	sbcs	r7, r2
 80011a8:	4323      	orrs	r3, r4
 80011aa:	433b      	orrs	r3, r7
 80011ac:	001a      	movs	r2, r3
 80011ae:	465b      	mov	r3, fp
 80011b0:	40cb      	lsrs	r3, r1
 80011b2:	0751      	lsls	r1, r2, #29
 80011b4:	d009      	beq.n	80011ca <__aeabi_ddiv+0x57e>
 80011b6:	210f      	movs	r1, #15
 80011b8:	4011      	ands	r1, r2
 80011ba:	2904      	cmp	r1, #4
 80011bc:	d005      	beq.n	80011ca <__aeabi_ddiv+0x57e>
 80011be:	1d11      	adds	r1, r2, #4
 80011c0:	4291      	cmp	r1, r2
 80011c2:	4192      	sbcs	r2, r2
 80011c4:	4252      	negs	r2, r2
 80011c6:	189b      	adds	r3, r3, r2
 80011c8:	000a      	movs	r2, r1
 80011ca:	0219      	lsls	r1, r3, #8
 80011cc:	d400      	bmi.n	80011d0 <__aeabi_ddiv+0x584>
 80011ce:	e755      	b.n	800107c <__aeabi_ddiv+0x430>
 80011d0:	2200      	movs	r2, #0
 80011d2:	2301      	movs	r3, #1
 80011d4:	2400      	movs	r4, #0
 80011d6:	4690      	mov	r8, r2
 80011d8:	e598      	b.n	8000d0c <__aeabi_ddiv+0xc0>
 80011da:	000a      	movs	r2, r1
 80011dc:	42bc      	cmp	r4, r7
 80011de:	d000      	beq.n	80011e2 <__aeabi_ddiv+0x596>
 80011e0:	e66e      	b.n	8000ec0 <__aeabi_ddiv+0x274>
 80011e2:	454b      	cmp	r3, r9
 80011e4:	d000      	beq.n	80011e8 <__aeabi_ddiv+0x59c>
 80011e6:	e66b      	b.n	8000ec0 <__aeabi_ddiv+0x274>
 80011e8:	e66c      	b.n	8000ec4 <__aeabi_ddiv+0x278>
 80011ea:	4b23      	ldr	r3, [pc, #140]	@ (8001278 <__aeabi_ddiv+0x62c>)
 80011ec:	4a23      	ldr	r2, [pc, #140]	@ (800127c <__aeabi_ddiv+0x630>)
 80011ee:	4453      	add	r3, sl
 80011f0:	4592      	cmp	sl, r2
 80011f2:	da00      	bge.n	80011f6 <__aeabi_ddiv+0x5aa>
 80011f4:	e718      	b.n	8001028 <__aeabi_ddiv+0x3dc>
 80011f6:	2101      	movs	r1, #1
 80011f8:	4249      	negs	r1, r1
 80011fa:	1d0a      	adds	r2, r1, #4
 80011fc:	428a      	cmp	r2, r1
 80011fe:	4189      	sbcs	r1, r1
 8001200:	4249      	negs	r1, r1
 8001202:	448b      	add	fp, r1
 8001204:	e666      	b.n	8000ed4 <__aeabi_ddiv+0x288>
 8001206:	210f      	movs	r1, #15
 8001208:	4011      	ands	r1, r2
 800120a:	2904      	cmp	r1, #4
 800120c:	d100      	bne.n	8001210 <__aeabi_ddiv+0x5c4>
 800120e:	e661      	b.n	8000ed4 <__aeabi_ddiv+0x288>
 8001210:	0011      	movs	r1, r2
 8001212:	e7f2      	b.n	80011fa <__aeabi_ddiv+0x5ae>
 8001214:	42bc      	cmp	r4, r7
 8001216:	d800      	bhi.n	800121a <__aeabi_ddiv+0x5ce>
 8001218:	e60a      	b.n	8000e30 <__aeabi_ddiv+0x1e4>
 800121a:	2302      	movs	r3, #2
 800121c:	425b      	negs	r3, r3
 800121e:	469c      	mov	ip, r3
 8001220:	9900      	ldr	r1, [sp, #0]
 8001222:	444f      	add	r7, r9
 8001224:	454f      	cmp	r7, r9
 8001226:	419b      	sbcs	r3, r3
 8001228:	44e3      	add	fp, ip
 800122a:	468c      	mov	ip, r1
 800122c:	425b      	negs	r3, r3
 800122e:	4463      	add	r3, ip
 8001230:	18c0      	adds	r0, r0, r3
 8001232:	e5ff      	b.n	8000e34 <__aeabi_ddiv+0x1e8>
 8001234:	4649      	mov	r1, r9
 8001236:	9d00      	ldr	r5, [sp, #0]
 8001238:	0048      	lsls	r0, r1, #1
 800123a:	4548      	cmp	r0, r9
 800123c:	4189      	sbcs	r1, r1
 800123e:	46ac      	mov	ip, r5
 8001240:	4249      	negs	r1, r1
 8001242:	4461      	add	r1, ip
 8001244:	4681      	mov	r9, r0
 8001246:	3a02      	subs	r2, #2
 8001248:	1864      	adds	r4, r4, r1
 800124a:	e7c7      	b.n	80011dc <__aeabi_ddiv+0x590>
 800124c:	2480      	movs	r4, #128	@ 0x80
 800124e:	465b      	mov	r3, fp
 8001250:	0324      	lsls	r4, r4, #12
 8001252:	431c      	orrs	r4, r3
 8001254:	0324      	lsls	r4, r4, #12
 8001256:	4690      	mov	r8, r2
 8001258:	4b04      	ldr	r3, [pc, #16]	@ (800126c <__aeabi_ddiv+0x620>)
 800125a:	0b24      	lsrs	r4, r4, #12
 800125c:	e556      	b.n	8000d0c <__aeabi_ddiv+0xc0>
 800125e:	4599      	cmp	r9, r3
 8001260:	d3e8      	bcc.n	8001234 <__aeabi_ddiv+0x5e8>
 8001262:	000a      	movs	r2, r1
 8001264:	e7bd      	b.n	80011e2 <__aeabi_ddiv+0x596>
 8001266:	2300      	movs	r3, #0
 8001268:	e708      	b.n	800107c <__aeabi_ddiv+0x430>
 800126a:	46c0      	nop			@ (mov r8, r8)
 800126c:	000007ff 	.word	0x000007ff
 8001270:	0000043e 	.word	0x0000043e
 8001274:	0000041e 	.word	0x0000041e
 8001278:	000003ff 	.word	0x000003ff
 800127c:	fffffc02 	.word	0xfffffc02

08001280 <__eqdf2>:
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001282:	4657      	mov	r7, sl
 8001284:	46de      	mov	lr, fp
 8001286:	464e      	mov	r6, r9
 8001288:	4645      	mov	r5, r8
 800128a:	b5e0      	push	{r5, r6, r7, lr}
 800128c:	000d      	movs	r5, r1
 800128e:	0004      	movs	r4, r0
 8001290:	0fe8      	lsrs	r0, r5, #31
 8001292:	4683      	mov	fp, r0
 8001294:	0309      	lsls	r1, r1, #12
 8001296:	0fd8      	lsrs	r0, r3, #31
 8001298:	0b09      	lsrs	r1, r1, #12
 800129a:	4682      	mov	sl, r0
 800129c:	4819      	ldr	r0, [pc, #100]	@ (8001304 <__eqdf2+0x84>)
 800129e:	468c      	mov	ip, r1
 80012a0:	031f      	lsls	r7, r3, #12
 80012a2:	0069      	lsls	r1, r5, #1
 80012a4:	005e      	lsls	r6, r3, #1
 80012a6:	0d49      	lsrs	r1, r1, #21
 80012a8:	0b3f      	lsrs	r7, r7, #12
 80012aa:	0d76      	lsrs	r6, r6, #21
 80012ac:	4281      	cmp	r1, r0
 80012ae:	d018      	beq.n	80012e2 <__eqdf2+0x62>
 80012b0:	4286      	cmp	r6, r0
 80012b2:	d00f      	beq.n	80012d4 <__eqdf2+0x54>
 80012b4:	2001      	movs	r0, #1
 80012b6:	42b1      	cmp	r1, r6
 80012b8:	d10d      	bne.n	80012d6 <__eqdf2+0x56>
 80012ba:	45bc      	cmp	ip, r7
 80012bc:	d10b      	bne.n	80012d6 <__eqdf2+0x56>
 80012be:	4294      	cmp	r4, r2
 80012c0:	d109      	bne.n	80012d6 <__eqdf2+0x56>
 80012c2:	45d3      	cmp	fp, sl
 80012c4:	d01c      	beq.n	8001300 <__eqdf2+0x80>
 80012c6:	2900      	cmp	r1, #0
 80012c8:	d105      	bne.n	80012d6 <__eqdf2+0x56>
 80012ca:	4660      	mov	r0, ip
 80012cc:	4320      	orrs	r0, r4
 80012ce:	1e43      	subs	r3, r0, #1
 80012d0:	4198      	sbcs	r0, r3
 80012d2:	e000      	b.n	80012d6 <__eqdf2+0x56>
 80012d4:	2001      	movs	r0, #1
 80012d6:	bcf0      	pop	{r4, r5, r6, r7}
 80012d8:	46bb      	mov	fp, r7
 80012da:	46b2      	mov	sl, r6
 80012dc:	46a9      	mov	r9, r5
 80012de:	46a0      	mov	r8, r4
 80012e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e2:	2001      	movs	r0, #1
 80012e4:	428e      	cmp	r6, r1
 80012e6:	d1f6      	bne.n	80012d6 <__eqdf2+0x56>
 80012e8:	4661      	mov	r1, ip
 80012ea:	4339      	orrs	r1, r7
 80012ec:	000f      	movs	r7, r1
 80012ee:	4317      	orrs	r7, r2
 80012f0:	4327      	orrs	r7, r4
 80012f2:	d1f0      	bne.n	80012d6 <__eqdf2+0x56>
 80012f4:	465b      	mov	r3, fp
 80012f6:	4652      	mov	r2, sl
 80012f8:	1a98      	subs	r0, r3, r2
 80012fa:	1e43      	subs	r3, r0, #1
 80012fc:	4198      	sbcs	r0, r3
 80012fe:	e7ea      	b.n	80012d6 <__eqdf2+0x56>
 8001300:	2000      	movs	r0, #0
 8001302:	e7e8      	b.n	80012d6 <__eqdf2+0x56>
 8001304:	000007ff 	.word	0x000007ff

08001308 <__gedf2>:
 8001308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130a:	4657      	mov	r7, sl
 800130c:	464e      	mov	r6, r9
 800130e:	4645      	mov	r5, r8
 8001310:	46de      	mov	lr, fp
 8001312:	b5e0      	push	{r5, r6, r7, lr}
 8001314:	000d      	movs	r5, r1
 8001316:	030f      	lsls	r7, r1, #12
 8001318:	0b39      	lsrs	r1, r7, #12
 800131a:	b083      	sub	sp, #12
 800131c:	0004      	movs	r4, r0
 800131e:	4680      	mov	r8, r0
 8001320:	9101      	str	r1, [sp, #4]
 8001322:	0058      	lsls	r0, r3, #1
 8001324:	0fe9      	lsrs	r1, r5, #31
 8001326:	4f31      	ldr	r7, [pc, #196]	@ (80013ec <__gedf2+0xe4>)
 8001328:	0d40      	lsrs	r0, r0, #21
 800132a:	468c      	mov	ip, r1
 800132c:	006e      	lsls	r6, r5, #1
 800132e:	0319      	lsls	r1, r3, #12
 8001330:	4682      	mov	sl, r0
 8001332:	4691      	mov	r9, r2
 8001334:	0d76      	lsrs	r6, r6, #21
 8001336:	0b09      	lsrs	r1, r1, #12
 8001338:	0fd8      	lsrs	r0, r3, #31
 800133a:	42be      	cmp	r6, r7
 800133c:	d01f      	beq.n	800137e <__gedf2+0x76>
 800133e:	45ba      	cmp	sl, r7
 8001340:	d00f      	beq.n	8001362 <__gedf2+0x5a>
 8001342:	2e00      	cmp	r6, #0
 8001344:	d12f      	bne.n	80013a6 <__gedf2+0x9e>
 8001346:	4655      	mov	r5, sl
 8001348:	9e01      	ldr	r6, [sp, #4]
 800134a:	4334      	orrs	r4, r6
 800134c:	2d00      	cmp	r5, #0
 800134e:	d127      	bne.n	80013a0 <__gedf2+0x98>
 8001350:	430a      	orrs	r2, r1
 8001352:	d03a      	beq.n	80013ca <__gedf2+0xc2>
 8001354:	2c00      	cmp	r4, #0
 8001356:	d145      	bne.n	80013e4 <__gedf2+0xdc>
 8001358:	2800      	cmp	r0, #0
 800135a:	d11a      	bne.n	8001392 <__gedf2+0x8a>
 800135c:	2001      	movs	r0, #1
 800135e:	4240      	negs	r0, r0
 8001360:	e017      	b.n	8001392 <__gedf2+0x8a>
 8001362:	4311      	orrs	r1, r2
 8001364:	d13b      	bne.n	80013de <__gedf2+0xd6>
 8001366:	2e00      	cmp	r6, #0
 8001368:	d102      	bne.n	8001370 <__gedf2+0x68>
 800136a:	9f01      	ldr	r7, [sp, #4]
 800136c:	4327      	orrs	r7, r4
 800136e:	d0f3      	beq.n	8001358 <__gedf2+0x50>
 8001370:	4584      	cmp	ip, r0
 8001372:	d109      	bne.n	8001388 <__gedf2+0x80>
 8001374:	4663      	mov	r3, ip
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f0      	beq.n	800135c <__gedf2+0x54>
 800137a:	4660      	mov	r0, ip
 800137c:	e009      	b.n	8001392 <__gedf2+0x8a>
 800137e:	9f01      	ldr	r7, [sp, #4]
 8001380:	4327      	orrs	r7, r4
 8001382:	d12c      	bne.n	80013de <__gedf2+0xd6>
 8001384:	45b2      	cmp	sl, r6
 8001386:	d024      	beq.n	80013d2 <__gedf2+0xca>
 8001388:	4663      	mov	r3, ip
 800138a:	2002      	movs	r0, #2
 800138c:	3b01      	subs	r3, #1
 800138e:	4018      	ands	r0, r3
 8001390:	3801      	subs	r0, #1
 8001392:	b003      	add	sp, #12
 8001394:	bcf0      	pop	{r4, r5, r6, r7}
 8001396:	46bb      	mov	fp, r7
 8001398:	46b2      	mov	sl, r6
 800139a:	46a9      	mov	r9, r5
 800139c:	46a0      	mov	r8, r4
 800139e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a0:	2c00      	cmp	r4, #0
 80013a2:	d0d9      	beq.n	8001358 <__gedf2+0x50>
 80013a4:	e7e4      	b.n	8001370 <__gedf2+0x68>
 80013a6:	4654      	mov	r4, sl
 80013a8:	2c00      	cmp	r4, #0
 80013aa:	d0ed      	beq.n	8001388 <__gedf2+0x80>
 80013ac:	4584      	cmp	ip, r0
 80013ae:	d1eb      	bne.n	8001388 <__gedf2+0x80>
 80013b0:	4556      	cmp	r6, sl
 80013b2:	dce9      	bgt.n	8001388 <__gedf2+0x80>
 80013b4:	dbde      	blt.n	8001374 <__gedf2+0x6c>
 80013b6:	9b01      	ldr	r3, [sp, #4]
 80013b8:	428b      	cmp	r3, r1
 80013ba:	d8e5      	bhi.n	8001388 <__gedf2+0x80>
 80013bc:	d1da      	bne.n	8001374 <__gedf2+0x6c>
 80013be:	45c8      	cmp	r8, r9
 80013c0:	d8e2      	bhi.n	8001388 <__gedf2+0x80>
 80013c2:	2000      	movs	r0, #0
 80013c4:	45c8      	cmp	r8, r9
 80013c6:	d2e4      	bcs.n	8001392 <__gedf2+0x8a>
 80013c8:	e7d4      	b.n	8001374 <__gedf2+0x6c>
 80013ca:	2000      	movs	r0, #0
 80013cc:	2c00      	cmp	r4, #0
 80013ce:	d0e0      	beq.n	8001392 <__gedf2+0x8a>
 80013d0:	e7da      	b.n	8001388 <__gedf2+0x80>
 80013d2:	4311      	orrs	r1, r2
 80013d4:	d103      	bne.n	80013de <__gedf2+0xd6>
 80013d6:	4584      	cmp	ip, r0
 80013d8:	d1d6      	bne.n	8001388 <__gedf2+0x80>
 80013da:	2000      	movs	r0, #0
 80013dc:	e7d9      	b.n	8001392 <__gedf2+0x8a>
 80013de:	2002      	movs	r0, #2
 80013e0:	4240      	negs	r0, r0
 80013e2:	e7d6      	b.n	8001392 <__gedf2+0x8a>
 80013e4:	4584      	cmp	ip, r0
 80013e6:	d0e6      	beq.n	80013b6 <__gedf2+0xae>
 80013e8:	e7ce      	b.n	8001388 <__gedf2+0x80>
 80013ea:	46c0      	nop			@ (mov r8, r8)
 80013ec:	000007ff 	.word	0x000007ff

080013f0 <__ledf2>:
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f2:	4657      	mov	r7, sl
 80013f4:	464e      	mov	r6, r9
 80013f6:	4645      	mov	r5, r8
 80013f8:	46de      	mov	lr, fp
 80013fa:	b5e0      	push	{r5, r6, r7, lr}
 80013fc:	000d      	movs	r5, r1
 80013fe:	030f      	lsls	r7, r1, #12
 8001400:	0004      	movs	r4, r0
 8001402:	4680      	mov	r8, r0
 8001404:	0fe8      	lsrs	r0, r5, #31
 8001406:	0b39      	lsrs	r1, r7, #12
 8001408:	4684      	mov	ip, r0
 800140a:	b083      	sub	sp, #12
 800140c:	0058      	lsls	r0, r3, #1
 800140e:	4f30      	ldr	r7, [pc, #192]	@ (80014d0 <__ledf2+0xe0>)
 8001410:	0d40      	lsrs	r0, r0, #21
 8001412:	9101      	str	r1, [sp, #4]
 8001414:	031e      	lsls	r6, r3, #12
 8001416:	0069      	lsls	r1, r5, #1
 8001418:	4682      	mov	sl, r0
 800141a:	4691      	mov	r9, r2
 800141c:	0d49      	lsrs	r1, r1, #21
 800141e:	0b36      	lsrs	r6, r6, #12
 8001420:	0fd8      	lsrs	r0, r3, #31
 8001422:	42b9      	cmp	r1, r7
 8001424:	d020      	beq.n	8001468 <__ledf2+0x78>
 8001426:	45ba      	cmp	sl, r7
 8001428:	d00f      	beq.n	800144a <__ledf2+0x5a>
 800142a:	2900      	cmp	r1, #0
 800142c:	d12b      	bne.n	8001486 <__ledf2+0x96>
 800142e:	9901      	ldr	r1, [sp, #4]
 8001430:	430c      	orrs	r4, r1
 8001432:	4651      	mov	r1, sl
 8001434:	2900      	cmp	r1, #0
 8001436:	d137      	bne.n	80014a8 <__ledf2+0xb8>
 8001438:	4332      	orrs	r2, r6
 800143a:	d038      	beq.n	80014ae <__ledf2+0xbe>
 800143c:	2c00      	cmp	r4, #0
 800143e:	d144      	bne.n	80014ca <__ledf2+0xda>
 8001440:	2800      	cmp	r0, #0
 8001442:	d119      	bne.n	8001478 <__ledf2+0x88>
 8001444:	2001      	movs	r0, #1
 8001446:	4240      	negs	r0, r0
 8001448:	e016      	b.n	8001478 <__ledf2+0x88>
 800144a:	4316      	orrs	r6, r2
 800144c:	d113      	bne.n	8001476 <__ledf2+0x86>
 800144e:	2900      	cmp	r1, #0
 8001450:	d102      	bne.n	8001458 <__ledf2+0x68>
 8001452:	9f01      	ldr	r7, [sp, #4]
 8001454:	4327      	orrs	r7, r4
 8001456:	d0f3      	beq.n	8001440 <__ledf2+0x50>
 8001458:	4584      	cmp	ip, r0
 800145a:	d020      	beq.n	800149e <__ledf2+0xae>
 800145c:	4663      	mov	r3, ip
 800145e:	2002      	movs	r0, #2
 8001460:	3b01      	subs	r3, #1
 8001462:	4018      	ands	r0, r3
 8001464:	3801      	subs	r0, #1
 8001466:	e007      	b.n	8001478 <__ledf2+0x88>
 8001468:	9f01      	ldr	r7, [sp, #4]
 800146a:	4327      	orrs	r7, r4
 800146c:	d103      	bne.n	8001476 <__ledf2+0x86>
 800146e:	458a      	cmp	sl, r1
 8001470:	d1f4      	bne.n	800145c <__ledf2+0x6c>
 8001472:	4316      	orrs	r6, r2
 8001474:	d01f      	beq.n	80014b6 <__ledf2+0xc6>
 8001476:	2002      	movs	r0, #2
 8001478:	b003      	add	sp, #12
 800147a:	bcf0      	pop	{r4, r5, r6, r7}
 800147c:	46bb      	mov	fp, r7
 800147e:	46b2      	mov	sl, r6
 8001480:	46a9      	mov	r9, r5
 8001482:	46a0      	mov	r8, r4
 8001484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001486:	4654      	mov	r4, sl
 8001488:	2c00      	cmp	r4, #0
 800148a:	d0e7      	beq.n	800145c <__ledf2+0x6c>
 800148c:	4584      	cmp	ip, r0
 800148e:	d1e5      	bne.n	800145c <__ledf2+0x6c>
 8001490:	4551      	cmp	r1, sl
 8001492:	dce3      	bgt.n	800145c <__ledf2+0x6c>
 8001494:	db03      	blt.n	800149e <__ledf2+0xae>
 8001496:	9b01      	ldr	r3, [sp, #4]
 8001498:	42b3      	cmp	r3, r6
 800149a:	d8df      	bhi.n	800145c <__ledf2+0x6c>
 800149c:	d00f      	beq.n	80014be <__ledf2+0xce>
 800149e:	4663      	mov	r3, ip
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0cf      	beq.n	8001444 <__ledf2+0x54>
 80014a4:	4660      	mov	r0, ip
 80014a6:	e7e7      	b.n	8001478 <__ledf2+0x88>
 80014a8:	2c00      	cmp	r4, #0
 80014aa:	d0c9      	beq.n	8001440 <__ledf2+0x50>
 80014ac:	e7d4      	b.n	8001458 <__ledf2+0x68>
 80014ae:	2000      	movs	r0, #0
 80014b0:	2c00      	cmp	r4, #0
 80014b2:	d0e1      	beq.n	8001478 <__ledf2+0x88>
 80014b4:	e7d2      	b.n	800145c <__ledf2+0x6c>
 80014b6:	4584      	cmp	ip, r0
 80014b8:	d1d0      	bne.n	800145c <__ledf2+0x6c>
 80014ba:	2000      	movs	r0, #0
 80014bc:	e7dc      	b.n	8001478 <__ledf2+0x88>
 80014be:	45c8      	cmp	r8, r9
 80014c0:	d8cc      	bhi.n	800145c <__ledf2+0x6c>
 80014c2:	2000      	movs	r0, #0
 80014c4:	45c8      	cmp	r8, r9
 80014c6:	d2d7      	bcs.n	8001478 <__ledf2+0x88>
 80014c8:	e7e9      	b.n	800149e <__ledf2+0xae>
 80014ca:	4584      	cmp	ip, r0
 80014cc:	d0e3      	beq.n	8001496 <__ledf2+0xa6>
 80014ce:	e7c5      	b.n	800145c <__ledf2+0x6c>
 80014d0:	000007ff 	.word	0x000007ff

080014d4 <__aeabi_dmul>:
 80014d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d6:	4657      	mov	r7, sl
 80014d8:	46de      	mov	lr, fp
 80014da:	464e      	mov	r6, r9
 80014dc:	4645      	mov	r5, r8
 80014de:	b5e0      	push	{r5, r6, r7, lr}
 80014e0:	001f      	movs	r7, r3
 80014e2:	030b      	lsls	r3, r1, #12
 80014e4:	0b1b      	lsrs	r3, r3, #12
 80014e6:	0016      	movs	r6, r2
 80014e8:	469a      	mov	sl, r3
 80014ea:	0fca      	lsrs	r2, r1, #31
 80014ec:	004b      	lsls	r3, r1, #1
 80014ee:	0004      	movs	r4, r0
 80014f0:	4693      	mov	fp, r2
 80014f2:	b087      	sub	sp, #28
 80014f4:	0d5b      	lsrs	r3, r3, #21
 80014f6:	d100      	bne.n	80014fa <__aeabi_dmul+0x26>
 80014f8:	e0d5      	b.n	80016a6 <__aeabi_dmul+0x1d2>
 80014fa:	4abb      	ldr	r2, [pc, #748]	@ (80017e8 <__aeabi_dmul+0x314>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d100      	bne.n	8001502 <__aeabi_dmul+0x2e>
 8001500:	e0f8      	b.n	80016f4 <__aeabi_dmul+0x220>
 8001502:	4651      	mov	r1, sl
 8001504:	0f42      	lsrs	r2, r0, #29
 8001506:	00c9      	lsls	r1, r1, #3
 8001508:	430a      	orrs	r2, r1
 800150a:	2180      	movs	r1, #128	@ 0x80
 800150c:	0409      	lsls	r1, r1, #16
 800150e:	4311      	orrs	r1, r2
 8001510:	00c2      	lsls	r2, r0, #3
 8001512:	4691      	mov	r9, r2
 8001514:	4ab5      	ldr	r2, [pc, #724]	@ (80017ec <__aeabi_dmul+0x318>)
 8001516:	468a      	mov	sl, r1
 8001518:	189d      	adds	r5, r3, r2
 800151a:	2300      	movs	r3, #0
 800151c:	4698      	mov	r8, r3
 800151e:	9302      	str	r3, [sp, #8]
 8001520:	033c      	lsls	r4, r7, #12
 8001522:	007b      	lsls	r3, r7, #1
 8001524:	0ffa      	lsrs	r2, r7, #31
 8001526:	0030      	movs	r0, r6
 8001528:	0b24      	lsrs	r4, r4, #12
 800152a:	0d5b      	lsrs	r3, r3, #21
 800152c:	9200      	str	r2, [sp, #0]
 800152e:	d100      	bne.n	8001532 <__aeabi_dmul+0x5e>
 8001530:	e096      	b.n	8001660 <__aeabi_dmul+0x18c>
 8001532:	4aad      	ldr	r2, [pc, #692]	@ (80017e8 <__aeabi_dmul+0x314>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d031      	beq.n	800159c <__aeabi_dmul+0xc8>
 8001538:	0f72      	lsrs	r2, r6, #29
 800153a:	00e4      	lsls	r4, r4, #3
 800153c:	4322      	orrs	r2, r4
 800153e:	2480      	movs	r4, #128	@ 0x80
 8001540:	0424      	lsls	r4, r4, #16
 8001542:	4314      	orrs	r4, r2
 8001544:	4aa9      	ldr	r2, [pc, #676]	@ (80017ec <__aeabi_dmul+0x318>)
 8001546:	00f0      	lsls	r0, r6, #3
 8001548:	4694      	mov	ip, r2
 800154a:	4463      	add	r3, ip
 800154c:	195b      	adds	r3, r3, r5
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	9201      	str	r2, [sp, #4]
 8001552:	4642      	mov	r2, r8
 8001554:	2600      	movs	r6, #0
 8001556:	2a0a      	cmp	r2, #10
 8001558:	dc42      	bgt.n	80015e0 <__aeabi_dmul+0x10c>
 800155a:	465a      	mov	r2, fp
 800155c:	9900      	ldr	r1, [sp, #0]
 800155e:	404a      	eors	r2, r1
 8001560:	4693      	mov	fp, r2
 8001562:	4642      	mov	r2, r8
 8001564:	2a02      	cmp	r2, #2
 8001566:	dc32      	bgt.n	80015ce <__aeabi_dmul+0xfa>
 8001568:	3a01      	subs	r2, #1
 800156a:	2a01      	cmp	r2, #1
 800156c:	d900      	bls.n	8001570 <__aeabi_dmul+0x9c>
 800156e:	e149      	b.n	8001804 <__aeabi_dmul+0x330>
 8001570:	2e02      	cmp	r6, #2
 8001572:	d100      	bne.n	8001576 <__aeabi_dmul+0xa2>
 8001574:	e0ca      	b.n	800170c <__aeabi_dmul+0x238>
 8001576:	2e01      	cmp	r6, #1
 8001578:	d13d      	bne.n	80015f6 <__aeabi_dmul+0x122>
 800157a:	2300      	movs	r3, #0
 800157c:	2400      	movs	r4, #0
 800157e:	2200      	movs	r2, #0
 8001580:	0010      	movs	r0, r2
 8001582:	465a      	mov	r2, fp
 8001584:	051b      	lsls	r3, r3, #20
 8001586:	4323      	orrs	r3, r4
 8001588:	07d2      	lsls	r2, r2, #31
 800158a:	4313      	orrs	r3, r2
 800158c:	0019      	movs	r1, r3
 800158e:	b007      	add	sp, #28
 8001590:	bcf0      	pop	{r4, r5, r6, r7}
 8001592:	46bb      	mov	fp, r7
 8001594:	46b2      	mov	sl, r6
 8001596:	46a9      	mov	r9, r5
 8001598:	46a0      	mov	r8, r4
 800159a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800159c:	4b92      	ldr	r3, [pc, #584]	@ (80017e8 <__aeabi_dmul+0x314>)
 800159e:	4326      	orrs	r6, r4
 80015a0:	18eb      	adds	r3, r5, r3
 80015a2:	2e00      	cmp	r6, #0
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dmul+0xd4>
 80015a6:	e0bb      	b.n	8001720 <__aeabi_dmul+0x24c>
 80015a8:	2203      	movs	r2, #3
 80015aa:	4641      	mov	r1, r8
 80015ac:	4311      	orrs	r1, r2
 80015ae:	465a      	mov	r2, fp
 80015b0:	4688      	mov	r8, r1
 80015b2:	9900      	ldr	r1, [sp, #0]
 80015b4:	404a      	eors	r2, r1
 80015b6:	2180      	movs	r1, #128	@ 0x80
 80015b8:	0109      	lsls	r1, r1, #4
 80015ba:	468c      	mov	ip, r1
 80015bc:	0029      	movs	r1, r5
 80015be:	4461      	add	r1, ip
 80015c0:	9101      	str	r1, [sp, #4]
 80015c2:	4641      	mov	r1, r8
 80015c4:	290a      	cmp	r1, #10
 80015c6:	dd00      	ble.n	80015ca <__aeabi_dmul+0xf6>
 80015c8:	e233      	b.n	8001a32 <__aeabi_dmul+0x55e>
 80015ca:	4693      	mov	fp, r2
 80015cc:	2603      	movs	r6, #3
 80015ce:	4642      	mov	r2, r8
 80015d0:	2701      	movs	r7, #1
 80015d2:	4097      	lsls	r7, r2
 80015d4:	21a6      	movs	r1, #166	@ 0xa6
 80015d6:	003a      	movs	r2, r7
 80015d8:	00c9      	lsls	r1, r1, #3
 80015da:	400a      	ands	r2, r1
 80015dc:	420f      	tst	r7, r1
 80015de:	d031      	beq.n	8001644 <__aeabi_dmul+0x170>
 80015e0:	9e02      	ldr	r6, [sp, #8]
 80015e2:	2e02      	cmp	r6, #2
 80015e4:	d100      	bne.n	80015e8 <__aeabi_dmul+0x114>
 80015e6:	e235      	b.n	8001a54 <__aeabi_dmul+0x580>
 80015e8:	2e03      	cmp	r6, #3
 80015ea:	d100      	bne.n	80015ee <__aeabi_dmul+0x11a>
 80015ec:	e1d2      	b.n	8001994 <__aeabi_dmul+0x4c0>
 80015ee:	4654      	mov	r4, sl
 80015f0:	4648      	mov	r0, r9
 80015f2:	2e01      	cmp	r6, #1
 80015f4:	d0c1      	beq.n	800157a <__aeabi_dmul+0xa6>
 80015f6:	9a01      	ldr	r2, [sp, #4]
 80015f8:	4b7d      	ldr	r3, [pc, #500]	@ (80017f0 <__aeabi_dmul+0x31c>)
 80015fa:	4694      	mov	ip, r2
 80015fc:	4463      	add	r3, ip
 80015fe:	2b00      	cmp	r3, #0
 8001600:	dc00      	bgt.n	8001604 <__aeabi_dmul+0x130>
 8001602:	e0c0      	b.n	8001786 <__aeabi_dmul+0x2b2>
 8001604:	0742      	lsls	r2, r0, #29
 8001606:	d009      	beq.n	800161c <__aeabi_dmul+0x148>
 8001608:	220f      	movs	r2, #15
 800160a:	4002      	ands	r2, r0
 800160c:	2a04      	cmp	r2, #4
 800160e:	d005      	beq.n	800161c <__aeabi_dmul+0x148>
 8001610:	1d02      	adds	r2, r0, #4
 8001612:	4282      	cmp	r2, r0
 8001614:	4180      	sbcs	r0, r0
 8001616:	4240      	negs	r0, r0
 8001618:	1824      	adds	r4, r4, r0
 800161a:	0010      	movs	r0, r2
 800161c:	01e2      	lsls	r2, r4, #7
 800161e:	d506      	bpl.n	800162e <__aeabi_dmul+0x15a>
 8001620:	4b74      	ldr	r3, [pc, #464]	@ (80017f4 <__aeabi_dmul+0x320>)
 8001622:	9a01      	ldr	r2, [sp, #4]
 8001624:	401c      	ands	r4, r3
 8001626:	2380      	movs	r3, #128	@ 0x80
 8001628:	4694      	mov	ip, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4463      	add	r3, ip
 800162e:	4a72      	ldr	r2, [pc, #456]	@ (80017f8 <__aeabi_dmul+0x324>)
 8001630:	4293      	cmp	r3, r2
 8001632:	dc6b      	bgt.n	800170c <__aeabi_dmul+0x238>
 8001634:	0762      	lsls	r2, r4, #29
 8001636:	08c0      	lsrs	r0, r0, #3
 8001638:	0264      	lsls	r4, r4, #9
 800163a:	055b      	lsls	r3, r3, #21
 800163c:	4302      	orrs	r2, r0
 800163e:	0b24      	lsrs	r4, r4, #12
 8001640:	0d5b      	lsrs	r3, r3, #21
 8001642:	e79d      	b.n	8001580 <__aeabi_dmul+0xac>
 8001644:	2190      	movs	r1, #144	@ 0x90
 8001646:	0089      	lsls	r1, r1, #2
 8001648:	420f      	tst	r7, r1
 800164a:	d163      	bne.n	8001714 <__aeabi_dmul+0x240>
 800164c:	2288      	movs	r2, #136	@ 0x88
 800164e:	423a      	tst	r2, r7
 8001650:	d100      	bne.n	8001654 <__aeabi_dmul+0x180>
 8001652:	e0d7      	b.n	8001804 <__aeabi_dmul+0x330>
 8001654:	9b00      	ldr	r3, [sp, #0]
 8001656:	46a2      	mov	sl, r4
 8001658:	469b      	mov	fp, r3
 800165a:	4681      	mov	r9, r0
 800165c:	9602      	str	r6, [sp, #8]
 800165e:	e7bf      	b.n	80015e0 <__aeabi_dmul+0x10c>
 8001660:	0023      	movs	r3, r4
 8001662:	4333      	orrs	r3, r6
 8001664:	d100      	bne.n	8001668 <__aeabi_dmul+0x194>
 8001666:	e07f      	b.n	8001768 <__aeabi_dmul+0x294>
 8001668:	2c00      	cmp	r4, #0
 800166a:	d100      	bne.n	800166e <__aeabi_dmul+0x19a>
 800166c:	e1ad      	b.n	80019ca <__aeabi_dmul+0x4f6>
 800166e:	0020      	movs	r0, r4
 8001670:	f000 fe44 	bl	80022fc <__clzsi2>
 8001674:	0002      	movs	r2, r0
 8001676:	0003      	movs	r3, r0
 8001678:	3a0b      	subs	r2, #11
 800167a:	201d      	movs	r0, #29
 800167c:	0019      	movs	r1, r3
 800167e:	1a82      	subs	r2, r0, r2
 8001680:	0030      	movs	r0, r6
 8001682:	3908      	subs	r1, #8
 8001684:	40d0      	lsrs	r0, r2
 8001686:	408c      	lsls	r4, r1
 8001688:	4304      	orrs	r4, r0
 800168a:	0030      	movs	r0, r6
 800168c:	4088      	lsls	r0, r1
 800168e:	4a5b      	ldr	r2, [pc, #364]	@ (80017fc <__aeabi_dmul+0x328>)
 8001690:	1aeb      	subs	r3, r5, r3
 8001692:	4694      	mov	ip, r2
 8001694:	4463      	add	r3, ip
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	9201      	str	r2, [sp, #4]
 800169a:	4642      	mov	r2, r8
 800169c:	2600      	movs	r6, #0
 800169e:	2a0a      	cmp	r2, #10
 80016a0:	dc00      	bgt.n	80016a4 <__aeabi_dmul+0x1d0>
 80016a2:	e75a      	b.n	800155a <__aeabi_dmul+0x86>
 80016a4:	e79c      	b.n	80015e0 <__aeabi_dmul+0x10c>
 80016a6:	4653      	mov	r3, sl
 80016a8:	4303      	orrs	r3, r0
 80016aa:	4699      	mov	r9, r3
 80016ac:	d054      	beq.n	8001758 <__aeabi_dmul+0x284>
 80016ae:	4653      	mov	r3, sl
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d100      	bne.n	80016b6 <__aeabi_dmul+0x1e2>
 80016b4:	e177      	b.n	80019a6 <__aeabi_dmul+0x4d2>
 80016b6:	4650      	mov	r0, sl
 80016b8:	f000 fe20 	bl	80022fc <__clzsi2>
 80016bc:	230b      	movs	r3, #11
 80016be:	425b      	negs	r3, r3
 80016c0:	469c      	mov	ip, r3
 80016c2:	0002      	movs	r2, r0
 80016c4:	4484      	add	ip, r0
 80016c6:	0011      	movs	r1, r2
 80016c8:	4650      	mov	r0, sl
 80016ca:	3908      	subs	r1, #8
 80016cc:	4088      	lsls	r0, r1
 80016ce:	231d      	movs	r3, #29
 80016d0:	4680      	mov	r8, r0
 80016d2:	4660      	mov	r0, ip
 80016d4:	1a1b      	subs	r3, r3, r0
 80016d6:	0020      	movs	r0, r4
 80016d8:	40d8      	lsrs	r0, r3
 80016da:	0003      	movs	r3, r0
 80016dc:	4640      	mov	r0, r8
 80016de:	4303      	orrs	r3, r0
 80016e0:	469a      	mov	sl, r3
 80016e2:	0023      	movs	r3, r4
 80016e4:	408b      	lsls	r3, r1
 80016e6:	4699      	mov	r9, r3
 80016e8:	2300      	movs	r3, #0
 80016ea:	4d44      	ldr	r5, [pc, #272]	@ (80017fc <__aeabi_dmul+0x328>)
 80016ec:	4698      	mov	r8, r3
 80016ee:	1aad      	subs	r5, r5, r2
 80016f0:	9302      	str	r3, [sp, #8]
 80016f2:	e715      	b.n	8001520 <__aeabi_dmul+0x4c>
 80016f4:	4652      	mov	r2, sl
 80016f6:	4302      	orrs	r2, r0
 80016f8:	4691      	mov	r9, r2
 80016fa:	d126      	bne.n	800174a <__aeabi_dmul+0x276>
 80016fc:	2200      	movs	r2, #0
 80016fe:	001d      	movs	r5, r3
 8001700:	2302      	movs	r3, #2
 8001702:	4692      	mov	sl, r2
 8001704:	3208      	adds	r2, #8
 8001706:	4690      	mov	r8, r2
 8001708:	9302      	str	r3, [sp, #8]
 800170a:	e709      	b.n	8001520 <__aeabi_dmul+0x4c>
 800170c:	2400      	movs	r4, #0
 800170e:	2200      	movs	r2, #0
 8001710:	4b35      	ldr	r3, [pc, #212]	@ (80017e8 <__aeabi_dmul+0x314>)
 8001712:	e735      	b.n	8001580 <__aeabi_dmul+0xac>
 8001714:	2300      	movs	r3, #0
 8001716:	2480      	movs	r4, #128	@ 0x80
 8001718:	469b      	mov	fp, r3
 800171a:	0324      	lsls	r4, r4, #12
 800171c:	4b32      	ldr	r3, [pc, #200]	@ (80017e8 <__aeabi_dmul+0x314>)
 800171e:	e72f      	b.n	8001580 <__aeabi_dmul+0xac>
 8001720:	2202      	movs	r2, #2
 8001722:	4641      	mov	r1, r8
 8001724:	4311      	orrs	r1, r2
 8001726:	2280      	movs	r2, #128	@ 0x80
 8001728:	0112      	lsls	r2, r2, #4
 800172a:	4694      	mov	ip, r2
 800172c:	002a      	movs	r2, r5
 800172e:	4462      	add	r2, ip
 8001730:	4688      	mov	r8, r1
 8001732:	9201      	str	r2, [sp, #4]
 8001734:	290a      	cmp	r1, #10
 8001736:	dd00      	ble.n	800173a <__aeabi_dmul+0x266>
 8001738:	e752      	b.n	80015e0 <__aeabi_dmul+0x10c>
 800173a:	465a      	mov	r2, fp
 800173c:	2000      	movs	r0, #0
 800173e:	9900      	ldr	r1, [sp, #0]
 8001740:	0004      	movs	r4, r0
 8001742:	404a      	eors	r2, r1
 8001744:	4693      	mov	fp, r2
 8001746:	2602      	movs	r6, #2
 8001748:	e70b      	b.n	8001562 <__aeabi_dmul+0x8e>
 800174a:	220c      	movs	r2, #12
 800174c:	001d      	movs	r5, r3
 800174e:	2303      	movs	r3, #3
 8001750:	4681      	mov	r9, r0
 8001752:	4690      	mov	r8, r2
 8001754:	9302      	str	r3, [sp, #8]
 8001756:	e6e3      	b.n	8001520 <__aeabi_dmul+0x4c>
 8001758:	2300      	movs	r3, #0
 800175a:	469a      	mov	sl, r3
 800175c:	3304      	adds	r3, #4
 800175e:	4698      	mov	r8, r3
 8001760:	3b03      	subs	r3, #3
 8001762:	2500      	movs	r5, #0
 8001764:	9302      	str	r3, [sp, #8]
 8001766:	e6db      	b.n	8001520 <__aeabi_dmul+0x4c>
 8001768:	4642      	mov	r2, r8
 800176a:	3301      	adds	r3, #1
 800176c:	431a      	orrs	r2, r3
 800176e:	002b      	movs	r3, r5
 8001770:	4690      	mov	r8, r2
 8001772:	1c5a      	adds	r2, r3, #1
 8001774:	9201      	str	r2, [sp, #4]
 8001776:	4642      	mov	r2, r8
 8001778:	2400      	movs	r4, #0
 800177a:	2000      	movs	r0, #0
 800177c:	2601      	movs	r6, #1
 800177e:	2a0a      	cmp	r2, #10
 8001780:	dc00      	bgt.n	8001784 <__aeabi_dmul+0x2b0>
 8001782:	e6ea      	b.n	800155a <__aeabi_dmul+0x86>
 8001784:	e72c      	b.n	80015e0 <__aeabi_dmul+0x10c>
 8001786:	2201      	movs	r2, #1
 8001788:	1ad2      	subs	r2, r2, r3
 800178a:	2a38      	cmp	r2, #56	@ 0x38
 800178c:	dd00      	ble.n	8001790 <__aeabi_dmul+0x2bc>
 800178e:	e6f4      	b.n	800157a <__aeabi_dmul+0xa6>
 8001790:	2a1f      	cmp	r2, #31
 8001792:	dc00      	bgt.n	8001796 <__aeabi_dmul+0x2c2>
 8001794:	e12a      	b.n	80019ec <__aeabi_dmul+0x518>
 8001796:	211f      	movs	r1, #31
 8001798:	4249      	negs	r1, r1
 800179a:	1acb      	subs	r3, r1, r3
 800179c:	0021      	movs	r1, r4
 800179e:	40d9      	lsrs	r1, r3
 80017a0:	000b      	movs	r3, r1
 80017a2:	2a20      	cmp	r2, #32
 80017a4:	d005      	beq.n	80017b2 <__aeabi_dmul+0x2de>
 80017a6:	4a16      	ldr	r2, [pc, #88]	@ (8001800 <__aeabi_dmul+0x32c>)
 80017a8:	9d01      	ldr	r5, [sp, #4]
 80017aa:	4694      	mov	ip, r2
 80017ac:	4465      	add	r5, ip
 80017ae:	40ac      	lsls	r4, r5
 80017b0:	4320      	orrs	r0, r4
 80017b2:	1e42      	subs	r2, r0, #1
 80017b4:	4190      	sbcs	r0, r2
 80017b6:	4318      	orrs	r0, r3
 80017b8:	2307      	movs	r3, #7
 80017ba:	0019      	movs	r1, r3
 80017bc:	2400      	movs	r4, #0
 80017be:	4001      	ands	r1, r0
 80017c0:	4203      	tst	r3, r0
 80017c2:	d00c      	beq.n	80017de <__aeabi_dmul+0x30a>
 80017c4:	230f      	movs	r3, #15
 80017c6:	4003      	ands	r3, r0
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d100      	bne.n	80017ce <__aeabi_dmul+0x2fa>
 80017cc:	e140      	b.n	8001a50 <__aeabi_dmul+0x57c>
 80017ce:	1d03      	adds	r3, r0, #4
 80017d0:	4283      	cmp	r3, r0
 80017d2:	41a4      	sbcs	r4, r4
 80017d4:	0018      	movs	r0, r3
 80017d6:	4264      	negs	r4, r4
 80017d8:	0761      	lsls	r1, r4, #29
 80017da:	0264      	lsls	r4, r4, #9
 80017dc:	0b24      	lsrs	r4, r4, #12
 80017de:	08c2      	lsrs	r2, r0, #3
 80017e0:	2300      	movs	r3, #0
 80017e2:	430a      	orrs	r2, r1
 80017e4:	e6cc      	b.n	8001580 <__aeabi_dmul+0xac>
 80017e6:	46c0      	nop			@ (mov r8, r8)
 80017e8:	000007ff 	.word	0x000007ff
 80017ec:	fffffc01 	.word	0xfffffc01
 80017f0:	000003ff 	.word	0x000003ff
 80017f4:	feffffff 	.word	0xfeffffff
 80017f8:	000007fe 	.word	0x000007fe
 80017fc:	fffffc0d 	.word	0xfffffc0d
 8001800:	0000043e 	.word	0x0000043e
 8001804:	4649      	mov	r1, r9
 8001806:	464a      	mov	r2, r9
 8001808:	0409      	lsls	r1, r1, #16
 800180a:	0c09      	lsrs	r1, r1, #16
 800180c:	000d      	movs	r5, r1
 800180e:	0c16      	lsrs	r6, r2, #16
 8001810:	0c02      	lsrs	r2, r0, #16
 8001812:	0400      	lsls	r0, r0, #16
 8001814:	0c00      	lsrs	r0, r0, #16
 8001816:	4345      	muls	r5, r0
 8001818:	46ac      	mov	ip, r5
 800181a:	0005      	movs	r5, r0
 800181c:	4375      	muls	r5, r6
 800181e:	46a8      	mov	r8, r5
 8001820:	0015      	movs	r5, r2
 8001822:	000f      	movs	r7, r1
 8001824:	4375      	muls	r5, r6
 8001826:	9200      	str	r2, [sp, #0]
 8001828:	9502      	str	r5, [sp, #8]
 800182a:	002a      	movs	r2, r5
 800182c:	9d00      	ldr	r5, [sp, #0]
 800182e:	436f      	muls	r7, r5
 8001830:	4665      	mov	r5, ip
 8001832:	0c2d      	lsrs	r5, r5, #16
 8001834:	46a9      	mov	r9, r5
 8001836:	4447      	add	r7, r8
 8001838:	444f      	add	r7, r9
 800183a:	45b8      	cmp	r8, r7
 800183c:	d905      	bls.n	800184a <__aeabi_dmul+0x376>
 800183e:	0015      	movs	r5, r2
 8001840:	2280      	movs	r2, #128	@ 0x80
 8001842:	0252      	lsls	r2, r2, #9
 8001844:	4690      	mov	r8, r2
 8001846:	4445      	add	r5, r8
 8001848:	9502      	str	r5, [sp, #8]
 800184a:	0c3d      	lsrs	r5, r7, #16
 800184c:	9503      	str	r5, [sp, #12]
 800184e:	4665      	mov	r5, ip
 8001850:	042d      	lsls	r5, r5, #16
 8001852:	043f      	lsls	r7, r7, #16
 8001854:	0c2d      	lsrs	r5, r5, #16
 8001856:	46ac      	mov	ip, r5
 8001858:	003d      	movs	r5, r7
 800185a:	4465      	add	r5, ip
 800185c:	9504      	str	r5, [sp, #16]
 800185e:	0c25      	lsrs	r5, r4, #16
 8001860:	0424      	lsls	r4, r4, #16
 8001862:	0c24      	lsrs	r4, r4, #16
 8001864:	46ac      	mov	ip, r5
 8001866:	0025      	movs	r5, r4
 8001868:	4375      	muls	r5, r6
 800186a:	46a8      	mov	r8, r5
 800186c:	4665      	mov	r5, ip
 800186e:	000f      	movs	r7, r1
 8001870:	4369      	muls	r1, r5
 8001872:	4441      	add	r1, r8
 8001874:	4689      	mov	r9, r1
 8001876:	4367      	muls	r7, r4
 8001878:	0c39      	lsrs	r1, r7, #16
 800187a:	4449      	add	r1, r9
 800187c:	436e      	muls	r6, r5
 800187e:	4588      	cmp	r8, r1
 8001880:	d903      	bls.n	800188a <__aeabi_dmul+0x3b6>
 8001882:	2280      	movs	r2, #128	@ 0x80
 8001884:	0252      	lsls	r2, r2, #9
 8001886:	4690      	mov	r8, r2
 8001888:	4446      	add	r6, r8
 800188a:	0c0d      	lsrs	r5, r1, #16
 800188c:	46a8      	mov	r8, r5
 800188e:	0035      	movs	r5, r6
 8001890:	4445      	add	r5, r8
 8001892:	9505      	str	r5, [sp, #20]
 8001894:	9d03      	ldr	r5, [sp, #12]
 8001896:	043f      	lsls	r7, r7, #16
 8001898:	46a8      	mov	r8, r5
 800189a:	0c3f      	lsrs	r7, r7, #16
 800189c:	0409      	lsls	r1, r1, #16
 800189e:	19c9      	adds	r1, r1, r7
 80018a0:	4488      	add	r8, r1
 80018a2:	4645      	mov	r5, r8
 80018a4:	9503      	str	r5, [sp, #12]
 80018a6:	4655      	mov	r5, sl
 80018a8:	042e      	lsls	r6, r5, #16
 80018aa:	0c36      	lsrs	r6, r6, #16
 80018ac:	0c2f      	lsrs	r7, r5, #16
 80018ae:	0035      	movs	r5, r6
 80018b0:	4345      	muls	r5, r0
 80018b2:	4378      	muls	r0, r7
 80018b4:	4681      	mov	r9, r0
 80018b6:	0038      	movs	r0, r7
 80018b8:	46a8      	mov	r8, r5
 80018ba:	0c2d      	lsrs	r5, r5, #16
 80018bc:	46aa      	mov	sl, r5
 80018be:	9a00      	ldr	r2, [sp, #0]
 80018c0:	4350      	muls	r0, r2
 80018c2:	4372      	muls	r2, r6
 80018c4:	444a      	add	r2, r9
 80018c6:	4452      	add	r2, sl
 80018c8:	4591      	cmp	r9, r2
 80018ca:	d903      	bls.n	80018d4 <__aeabi_dmul+0x400>
 80018cc:	2580      	movs	r5, #128	@ 0x80
 80018ce:	026d      	lsls	r5, r5, #9
 80018d0:	46a9      	mov	r9, r5
 80018d2:	4448      	add	r0, r9
 80018d4:	0c15      	lsrs	r5, r2, #16
 80018d6:	46a9      	mov	r9, r5
 80018d8:	4645      	mov	r5, r8
 80018da:	042d      	lsls	r5, r5, #16
 80018dc:	0c2d      	lsrs	r5, r5, #16
 80018de:	46a8      	mov	r8, r5
 80018e0:	4665      	mov	r5, ip
 80018e2:	437d      	muls	r5, r7
 80018e4:	0412      	lsls	r2, r2, #16
 80018e6:	4448      	add	r0, r9
 80018e8:	4490      	add	r8, r2
 80018ea:	46a9      	mov	r9, r5
 80018ec:	0032      	movs	r2, r6
 80018ee:	4665      	mov	r5, ip
 80018f0:	4362      	muls	r2, r4
 80018f2:	436e      	muls	r6, r5
 80018f4:	437c      	muls	r4, r7
 80018f6:	0c17      	lsrs	r7, r2, #16
 80018f8:	1936      	adds	r6, r6, r4
 80018fa:	19bf      	adds	r7, r7, r6
 80018fc:	42bc      	cmp	r4, r7
 80018fe:	d903      	bls.n	8001908 <__aeabi_dmul+0x434>
 8001900:	2480      	movs	r4, #128	@ 0x80
 8001902:	0264      	lsls	r4, r4, #9
 8001904:	46a4      	mov	ip, r4
 8001906:	44e1      	add	r9, ip
 8001908:	9c02      	ldr	r4, [sp, #8]
 800190a:	9e03      	ldr	r6, [sp, #12]
 800190c:	46a4      	mov	ip, r4
 800190e:	9d05      	ldr	r5, [sp, #20]
 8001910:	4466      	add	r6, ip
 8001912:	428e      	cmp	r6, r1
 8001914:	4189      	sbcs	r1, r1
 8001916:	46ac      	mov	ip, r5
 8001918:	0412      	lsls	r2, r2, #16
 800191a:	043c      	lsls	r4, r7, #16
 800191c:	0c12      	lsrs	r2, r2, #16
 800191e:	18a2      	adds	r2, r4, r2
 8001920:	4462      	add	r2, ip
 8001922:	4249      	negs	r1, r1
 8001924:	1854      	adds	r4, r2, r1
 8001926:	4446      	add	r6, r8
 8001928:	46a4      	mov	ip, r4
 800192a:	4546      	cmp	r6, r8
 800192c:	41a4      	sbcs	r4, r4
 800192e:	4682      	mov	sl, r0
 8001930:	4264      	negs	r4, r4
 8001932:	46a0      	mov	r8, r4
 8001934:	42aa      	cmp	r2, r5
 8001936:	4192      	sbcs	r2, r2
 8001938:	458c      	cmp	ip, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	44e2      	add	sl, ip
 800193e:	44d0      	add	r8, sl
 8001940:	4249      	negs	r1, r1
 8001942:	4252      	negs	r2, r2
 8001944:	430a      	orrs	r2, r1
 8001946:	45a0      	cmp	r8, r4
 8001948:	41a4      	sbcs	r4, r4
 800194a:	4582      	cmp	sl, r0
 800194c:	4189      	sbcs	r1, r1
 800194e:	4264      	negs	r4, r4
 8001950:	4249      	negs	r1, r1
 8001952:	430c      	orrs	r4, r1
 8001954:	4641      	mov	r1, r8
 8001956:	0c3f      	lsrs	r7, r7, #16
 8001958:	19d2      	adds	r2, r2, r7
 800195a:	1912      	adds	r2, r2, r4
 800195c:	0dcc      	lsrs	r4, r1, #23
 800195e:	9904      	ldr	r1, [sp, #16]
 8001960:	0270      	lsls	r0, r6, #9
 8001962:	4308      	orrs	r0, r1
 8001964:	1e41      	subs	r1, r0, #1
 8001966:	4188      	sbcs	r0, r1
 8001968:	4641      	mov	r1, r8
 800196a:	444a      	add	r2, r9
 800196c:	0df6      	lsrs	r6, r6, #23
 800196e:	0252      	lsls	r2, r2, #9
 8001970:	4330      	orrs	r0, r6
 8001972:	0249      	lsls	r1, r1, #9
 8001974:	4314      	orrs	r4, r2
 8001976:	4308      	orrs	r0, r1
 8001978:	01d2      	lsls	r2, r2, #7
 800197a:	d535      	bpl.n	80019e8 <__aeabi_dmul+0x514>
 800197c:	2201      	movs	r2, #1
 800197e:	0843      	lsrs	r3, r0, #1
 8001980:	4002      	ands	r2, r0
 8001982:	4313      	orrs	r3, r2
 8001984:	07e0      	lsls	r0, r4, #31
 8001986:	4318      	orrs	r0, r3
 8001988:	0864      	lsrs	r4, r4, #1
 800198a:	e634      	b.n	80015f6 <__aeabi_dmul+0x122>
 800198c:	9b00      	ldr	r3, [sp, #0]
 800198e:	46a2      	mov	sl, r4
 8001990:	469b      	mov	fp, r3
 8001992:	4681      	mov	r9, r0
 8001994:	2480      	movs	r4, #128	@ 0x80
 8001996:	4653      	mov	r3, sl
 8001998:	0324      	lsls	r4, r4, #12
 800199a:	431c      	orrs	r4, r3
 800199c:	0324      	lsls	r4, r4, #12
 800199e:	464a      	mov	r2, r9
 80019a0:	4b2e      	ldr	r3, [pc, #184]	@ (8001a5c <__aeabi_dmul+0x588>)
 80019a2:	0b24      	lsrs	r4, r4, #12
 80019a4:	e5ec      	b.n	8001580 <__aeabi_dmul+0xac>
 80019a6:	f000 fca9 	bl	80022fc <__clzsi2>
 80019aa:	2315      	movs	r3, #21
 80019ac:	469c      	mov	ip, r3
 80019ae:	4484      	add	ip, r0
 80019b0:	0002      	movs	r2, r0
 80019b2:	4663      	mov	r3, ip
 80019b4:	3220      	adds	r2, #32
 80019b6:	2b1c      	cmp	r3, #28
 80019b8:	dc00      	bgt.n	80019bc <__aeabi_dmul+0x4e8>
 80019ba:	e684      	b.n	80016c6 <__aeabi_dmul+0x1f2>
 80019bc:	2300      	movs	r3, #0
 80019be:	4699      	mov	r9, r3
 80019c0:	0023      	movs	r3, r4
 80019c2:	3808      	subs	r0, #8
 80019c4:	4083      	lsls	r3, r0
 80019c6:	469a      	mov	sl, r3
 80019c8:	e68e      	b.n	80016e8 <__aeabi_dmul+0x214>
 80019ca:	f000 fc97 	bl	80022fc <__clzsi2>
 80019ce:	0002      	movs	r2, r0
 80019d0:	0003      	movs	r3, r0
 80019d2:	3215      	adds	r2, #21
 80019d4:	3320      	adds	r3, #32
 80019d6:	2a1c      	cmp	r2, #28
 80019d8:	dc00      	bgt.n	80019dc <__aeabi_dmul+0x508>
 80019da:	e64e      	b.n	800167a <__aeabi_dmul+0x1a6>
 80019dc:	0002      	movs	r2, r0
 80019de:	0034      	movs	r4, r6
 80019e0:	3a08      	subs	r2, #8
 80019e2:	2000      	movs	r0, #0
 80019e4:	4094      	lsls	r4, r2
 80019e6:	e652      	b.n	800168e <__aeabi_dmul+0x1ba>
 80019e8:	9301      	str	r3, [sp, #4]
 80019ea:	e604      	b.n	80015f6 <__aeabi_dmul+0x122>
 80019ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001a60 <__aeabi_dmul+0x58c>)
 80019ee:	0021      	movs	r1, r4
 80019f0:	469c      	mov	ip, r3
 80019f2:	0003      	movs	r3, r0
 80019f4:	9d01      	ldr	r5, [sp, #4]
 80019f6:	40d3      	lsrs	r3, r2
 80019f8:	4465      	add	r5, ip
 80019fa:	40a9      	lsls	r1, r5
 80019fc:	4319      	orrs	r1, r3
 80019fe:	0003      	movs	r3, r0
 8001a00:	40ab      	lsls	r3, r5
 8001a02:	1e58      	subs	r0, r3, #1
 8001a04:	4183      	sbcs	r3, r0
 8001a06:	4319      	orrs	r1, r3
 8001a08:	0008      	movs	r0, r1
 8001a0a:	40d4      	lsrs	r4, r2
 8001a0c:	074b      	lsls	r3, r1, #29
 8001a0e:	d009      	beq.n	8001a24 <__aeabi_dmul+0x550>
 8001a10:	230f      	movs	r3, #15
 8001a12:	400b      	ands	r3, r1
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d005      	beq.n	8001a24 <__aeabi_dmul+0x550>
 8001a18:	1d0b      	adds	r3, r1, #4
 8001a1a:	428b      	cmp	r3, r1
 8001a1c:	4180      	sbcs	r0, r0
 8001a1e:	4240      	negs	r0, r0
 8001a20:	1824      	adds	r4, r4, r0
 8001a22:	0018      	movs	r0, r3
 8001a24:	0223      	lsls	r3, r4, #8
 8001a26:	d400      	bmi.n	8001a2a <__aeabi_dmul+0x556>
 8001a28:	e6d6      	b.n	80017d8 <__aeabi_dmul+0x304>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	2400      	movs	r4, #0
 8001a2e:	2200      	movs	r2, #0
 8001a30:	e5a6      	b.n	8001580 <__aeabi_dmul+0xac>
 8001a32:	290f      	cmp	r1, #15
 8001a34:	d1aa      	bne.n	800198c <__aeabi_dmul+0x4b8>
 8001a36:	2380      	movs	r3, #128	@ 0x80
 8001a38:	4652      	mov	r2, sl
 8001a3a:	031b      	lsls	r3, r3, #12
 8001a3c:	421a      	tst	r2, r3
 8001a3e:	d0a9      	beq.n	8001994 <__aeabi_dmul+0x4c0>
 8001a40:	421c      	tst	r4, r3
 8001a42:	d1a7      	bne.n	8001994 <__aeabi_dmul+0x4c0>
 8001a44:	431c      	orrs	r4, r3
 8001a46:	9b00      	ldr	r3, [sp, #0]
 8001a48:	0002      	movs	r2, r0
 8001a4a:	469b      	mov	fp, r3
 8001a4c:	4b03      	ldr	r3, [pc, #12]	@ (8001a5c <__aeabi_dmul+0x588>)
 8001a4e:	e597      	b.n	8001580 <__aeabi_dmul+0xac>
 8001a50:	2400      	movs	r4, #0
 8001a52:	e6c1      	b.n	80017d8 <__aeabi_dmul+0x304>
 8001a54:	2400      	movs	r4, #0
 8001a56:	4b01      	ldr	r3, [pc, #4]	@ (8001a5c <__aeabi_dmul+0x588>)
 8001a58:	0022      	movs	r2, r4
 8001a5a:	e591      	b.n	8001580 <__aeabi_dmul+0xac>
 8001a5c:	000007ff 	.word	0x000007ff
 8001a60:	0000041e 	.word	0x0000041e

08001a64 <__aeabi_dsub>:
 8001a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a66:	464e      	mov	r6, r9
 8001a68:	4645      	mov	r5, r8
 8001a6a:	46de      	mov	lr, fp
 8001a6c:	4657      	mov	r7, sl
 8001a6e:	b5e0      	push	{r5, r6, r7, lr}
 8001a70:	b085      	sub	sp, #20
 8001a72:	9000      	str	r0, [sp, #0]
 8001a74:	9101      	str	r1, [sp, #4]
 8001a76:	030c      	lsls	r4, r1, #12
 8001a78:	004f      	lsls	r7, r1, #1
 8001a7a:	0fce      	lsrs	r6, r1, #31
 8001a7c:	0a61      	lsrs	r1, r4, #9
 8001a7e:	9c00      	ldr	r4, [sp, #0]
 8001a80:	46b0      	mov	r8, r6
 8001a82:	0f64      	lsrs	r4, r4, #29
 8001a84:	430c      	orrs	r4, r1
 8001a86:	9900      	ldr	r1, [sp, #0]
 8001a88:	0d7f      	lsrs	r7, r7, #21
 8001a8a:	00c8      	lsls	r0, r1, #3
 8001a8c:	0011      	movs	r1, r2
 8001a8e:	001a      	movs	r2, r3
 8001a90:	031b      	lsls	r3, r3, #12
 8001a92:	469c      	mov	ip, r3
 8001a94:	9100      	str	r1, [sp, #0]
 8001a96:	9201      	str	r2, [sp, #4]
 8001a98:	0051      	lsls	r1, r2, #1
 8001a9a:	0d4b      	lsrs	r3, r1, #21
 8001a9c:	4699      	mov	r9, r3
 8001a9e:	9b01      	ldr	r3, [sp, #4]
 8001aa0:	9d00      	ldr	r5, [sp, #0]
 8001aa2:	0fd9      	lsrs	r1, r3, #31
 8001aa4:	4663      	mov	r3, ip
 8001aa6:	0f6a      	lsrs	r2, r5, #29
 8001aa8:	0a5b      	lsrs	r3, r3, #9
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	00ea      	lsls	r2, r5, #3
 8001aae:	4694      	mov	ip, r2
 8001ab0:	4693      	mov	fp, r2
 8001ab2:	4ac1      	ldr	r2, [pc, #772]	@ (8001db8 <__aeabi_dsub+0x354>)
 8001ab4:	9003      	str	r0, [sp, #12]
 8001ab6:	9302      	str	r3, [sp, #8]
 8001ab8:	4591      	cmp	r9, r2
 8001aba:	d100      	bne.n	8001abe <__aeabi_dsub+0x5a>
 8001abc:	e0cd      	b.n	8001c5a <__aeabi_dsub+0x1f6>
 8001abe:	2501      	movs	r5, #1
 8001ac0:	4069      	eors	r1, r5
 8001ac2:	464d      	mov	r5, r9
 8001ac4:	1b7d      	subs	r5, r7, r5
 8001ac6:	46aa      	mov	sl, r5
 8001ac8:	428e      	cmp	r6, r1
 8001aca:	d100      	bne.n	8001ace <__aeabi_dsub+0x6a>
 8001acc:	e080      	b.n	8001bd0 <__aeabi_dsub+0x16c>
 8001ace:	2d00      	cmp	r5, #0
 8001ad0:	dc00      	bgt.n	8001ad4 <__aeabi_dsub+0x70>
 8001ad2:	e335      	b.n	8002140 <__aeabi_dsub+0x6dc>
 8001ad4:	4649      	mov	r1, r9
 8001ad6:	2900      	cmp	r1, #0
 8001ad8:	d100      	bne.n	8001adc <__aeabi_dsub+0x78>
 8001ada:	e0df      	b.n	8001c9c <__aeabi_dsub+0x238>
 8001adc:	4297      	cmp	r7, r2
 8001ade:	d100      	bne.n	8001ae2 <__aeabi_dsub+0x7e>
 8001ae0:	e194      	b.n	8001e0c <__aeabi_dsub+0x3a8>
 8001ae2:	4652      	mov	r2, sl
 8001ae4:	2501      	movs	r5, #1
 8001ae6:	2a38      	cmp	r2, #56	@ 0x38
 8001ae8:	dc19      	bgt.n	8001b1e <__aeabi_dsub+0xba>
 8001aea:	2280      	movs	r2, #128	@ 0x80
 8001aec:	9b02      	ldr	r3, [sp, #8]
 8001aee:	0412      	lsls	r2, r2, #16
 8001af0:	4313      	orrs	r3, r2
 8001af2:	9302      	str	r3, [sp, #8]
 8001af4:	4652      	mov	r2, sl
 8001af6:	2a1f      	cmp	r2, #31
 8001af8:	dd00      	ble.n	8001afc <__aeabi_dsub+0x98>
 8001afa:	e1e3      	b.n	8001ec4 <__aeabi_dsub+0x460>
 8001afc:	4653      	mov	r3, sl
 8001afe:	2220      	movs	r2, #32
 8001b00:	4661      	mov	r1, ip
 8001b02:	9d02      	ldr	r5, [sp, #8]
 8001b04:	1ad2      	subs	r2, r2, r3
 8001b06:	4095      	lsls	r5, r2
 8001b08:	40d9      	lsrs	r1, r3
 8001b0a:	430d      	orrs	r5, r1
 8001b0c:	4661      	mov	r1, ip
 8001b0e:	4091      	lsls	r1, r2
 8001b10:	000a      	movs	r2, r1
 8001b12:	1e51      	subs	r1, r2, #1
 8001b14:	418a      	sbcs	r2, r1
 8001b16:	4315      	orrs	r5, r2
 8001b18:	9a02      	ldr	r2, [sp, #8]
 8001b1a:	40da      	lsrs	r2, r3
 8001b1c:	1aa4      	subs	r4, r4, r2
 8001b1e:	1b45      	subs	r5, r0, r5
 8001b20:	42a8      	cmp	r0, r5
 8001b22:	4180      	sbcs	r0, r0
 8001b24:	4240      	negs	r0, r0
 8001b26:	1a24      	subs	r4, r4, r0
 8001b28:	0223      	lsls	r3, r4, #8
 8001b2a:	d400      	bmi.n	8001b2e <__aeabi_dsub+0xca>
 8001b2c:	e13d      	b.n	8001daa <__aeabi_dsub+0x346>
 8001b2e:	0264      	lsls	r4, r4, #9
 8001b30:	0a64      	lsrs	r4, r4, #9
 8001b32:	2c00      	cmp	r4, #0
 8001b34:	d100      	bne.n	8001b38 <__aeabi_dsub+0xd4>
 8001b36:	e147      	b.n	8001dc8 <__aeabi_dsub+0x364>
 8001b38:	0020      	movs	r0, r4
 8001b3a:	f000 fbdf 	bl	80022fc <__clzsi2>
 8001b3e:	0003      	movs	r3, r0
 8001b40:	3b08      	subs	r3, #8
 8001b42:	2120      	movs	r1, #32
 8001b44:	0028      	movs	r0, r5
 8001b46:	1aca      	subs	r2, r1, r3
 8001b48:	40d0      	lsrs	r0, r2
 8001b4a:	409c      	lsls	r4, r3
 8001b4c:	0002      	movs	r2, r0
 8001b4e:	409d      	lsls	r5, r3
 8001b50:	4322      	orrs	r2, r4
 8001b52:	429f      	cmp	r7, r3
 8001b54:	dd00      	ble.n	8001b58 <__aeabi_dsub+0xf4>
 8001b56:	e177      	b.n	8001e48 <__aeabi_dsub+0x3e4>
 8001b58:	1bd8      	subs	r0, r3, r7
 8001b5a:	3001      	adds	r0, #1
 8001b5c:	1a09      	subs	r1, r1, r0
 8001b5e:	002c      	movs	r4, r5
 8001b60:	408d      	lsls	r5, r1
 8001b62:	40c4      	lsrs	r4, r0
 8001b64:	1e6b      	subs	r3, r5, #1
 8001b66:	419d      	sbcs	r5, r3
 8001b68:	0013      	movs	r3, r2
 8001b6a:	40c2      	lsrs	r2, r0
 8001b6c:	408b      	lsls	r3, r1
 8001b6e:	4325      	orrs	r5, r4
 8001b70:	2700      	movs	r7, #0
 8001b72:	0014      	movs	r4, r2
 8001b74:	431d      	orrs	r5, r3
 8001b76:	076b      	lsls	r3, r5, #29
 8001b78:	d009      	beq.n	8001b8e <__aeabi_dsub+0x12a>
 8001b7a:	230f      	movs	r3, #15
 8001b7c:	402b      	ands	r3, r5
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d005      	beq.n	8001b8e <__aeabi_dsub+0x12a>
 8001b82:	1d2b      	adds	r3, r5, #4
 8001b84:	42ab      	cmp	r3, r5
 8001b86:	41ad      	sbcs	r5, r5
 8001b88:	426d      	negs	r5, r5
 8001b8a:	1964      	adds	r4, r4, r5
 8001b8c:	001d      	movs	r5, r3
 8001b8e:	0223      	lsls	r3, r4, #8
 8001b90:	d400      	bmi.n	8001b94 <__aeabi_dsub+0x130>
 8001b92:	e140      	b.n	8001e16 <__aeabi_dsub+0x3b2>
 8001b94:	4a88      	ldr	r2, [pc, #544]	@ (8001db8 <__aeabi_dsub+0x354>)
 8001b96:	3701      	adds	r7, #1
 8001b98:	4297      	cmp	r7, r2
 8001b9a:	d100      	bne.n	8001b9e <__aeabi_dsub+0x13a>
 8001b9c:	e101      	b.n	8001da2 <__aeabi_dsub+0x33e>
 8001b9e:	2601      	movs	r6, #1
 8001ba0:	4643      	mov	r3, r8
 8001ba2:	4986      	ldr	r1, [pc, #536]	@ (8001dbc <__aeabi_dsub+0x358>)
 8001ba4:	08ed      	lsrs	r5, r5, #3
 8001ba6:	4021      	ands	r1, r4
 8001ba8:	074a      	lsls	r2, r1, #29
 8001baa:	432a      	orrs	r2, r5
 8001bac:	057c      	lsls	r4, r7, #21
 8001bae:	024d      	lsls	r5, r1, #9
 8001bb0:	0b2d      	lsrs	r5, r5, #12
 8001bb2:	0d64      	lsrs	r4, r4, #21
 8001bb4:	401e      	ands	r6, r3
 8001bb6:	0524      	lsls	r4, r4, #20
 8001bb8:	432c      	orrs	r4, r5
 8001bba:	07f6      	lsls	r6, r6, #31
 8001bbc:	4334      	orrs	r4, r6
 8001bbe:	0010      	movs	r0, r2
 8001bc0:	0021      	movs	r1, r4
 8001bc2:	b005      	add	sp, #20
 8001bc4:	bcf0      	pop	{r4, r5, r6, r7}
 8001bc6:	46bb      	mov	fp, r7
 8001bc8:	46b2      	mov	sl, r6
 8001bca:	46a9      	mov	r9, r5
 8001bcc:	46a0      	mov	r8, r4
 8001bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	dc00      	bgt.n	8001bd6 <__aeabi_dsub+0x172>
 8001bd4:	e2d0      	b.n	8002178 <__aeabi_dsub+0x714>
 8001bd6:	4649      	mov	r1, r9
 8001bd8:	2900      	cmp	r1, #0
 8001bda:	d000      	beq.n	8001bde <__aeabi_dsub+0x17a>
 8001bdc:	e0d4      	b.n	8001d88 <__aeabi_dsub+0x324>
 8001bde:	4661      	mov	r1, ip
 8001be0:	9b02      	ldr	r3, [sp, #8]
 8001be2:	4319      	orrs	r1, r3
 8001be4:	d100      	bne.n	8001be8 <__aeabi_dsub+0x184>
 8001be6:	e12b      	b.n	8001e40 <__aeabi_dsub+0x3dc>
 8001be8:	1e69      	subs	r1, r5, #1
 8001bea:	2d01      	cmp	r5, #1
 8001bec:	d100      	bne.n	8001bf0 <__aeabi_dsub+0x18c>
 8001bee:	e1d9      	b.n	8001fa4 <__aeabi_dsub+0x540>
 8001bf0:	4295      	cmp	r5, r2
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dsub+0x192>
 8001bf4:	e10a      	b.n	8001e0c <__aeabi_dsub+0x3a8>
 8001bf6:	2501      	movs	r5, #1
 8001bf8:	2938      	cmp	r1, #56	@ 0x38
 8001bfa:	dc17      	bgt.n	8001c2c <__aeabi_dsub+0x1c8>
 8001bfc:	468a      	mov	sl, r1
 8001bfe:	4653      	mov	r3, sl
 8001c00:	2b1f      	cmp	r3, #31
 8001c02:	dd00      	ble.n	8001c06 <__aeabi_dsub+0x1a2>
 8001c04:	e1e7      	b.n	8001fd6 <__aeabi_dsub+0x572>
 8001c06:	2220      	movs	r2, #32
 8001c08:	1ad2      	subs	r2, r2, r3
 8001c0a:	9b02      	ldr	r3, [sp, #8]
 8001c0c:	4661      	mov	r1, ip
 8001c0e:	4093      	lsls	r3, r2
 8001c10:	001d      	movs	r5, r3
 8001c12:	4653      	mov	r3, sl
 8001c14:	40d9      	lsrs	r1, r3
 8001c16:	4663      	mov	r3, ip
 8001c18:	4093      	lsls	r3, r2
 8001c1a:	001a      	movs	r2, r3
 8001c1c:	430d      	orrs	r5, r1
 8001c1e:	1e51      	subs	r1, r2, #1
 8001c20:	418a      	sbcs	r2, r1
 8001c22:	4653      	mov	r3, sl
 8001c24:	4315      	orrs	r5, r2
 8001c26:	9a02      	ldr	r2, [sp, #8]
 8001c28:	40da      	lsrs	r2, r3
 8001c2a:	18a4      	adds	r4, r4, r2
 8001c2c:	182d      	adds	r5, r5, r0
 8001c2e:	4285      	cmp	r5, r0
 8001c30:	4180      	sbcs	r0, r0
 8001c32:	4240      	negs	r0, r0
 8001c34:	1824      	adds	r4, r4, r0
 8001c36:	0223      	lsls	r3, r4, #8
 8001c38:	d400      	bmi.n	8001c3c <__aeabi_dsub+0x1d8>
 8001c3a:	e0b6      	b.n	8001daa <__aeabi_dsub+0x346>
 8001c3c:	4b5e      	ldr	r3, [pc, #376]	@ (8001db8 <__aeabi_dsub+0x354>)
 8001c3e:	3701      	adds	r7, #1
 8001c40:	429f      	cmp	r7, r3
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dsub+0x1e2>
 8001c44:	e0ad      	b.n	8001da2 <__aeabi_dsub+0x33e>
 8001c46:	2101      	movs	r1, #1
 8001c48:	4b5c      	ldr	r3, [pc, #368]	@ (8001dbc <__aeabi_dsub+0x358>)
 8001c4a:	086a      	lsrs	r2, r5, #1
 8001c4c:	401c      	ands	r4, r3
 8001c4e:	4029      	ands	r1, r5
 8001c50:	430a      	orrs	r2, r1
 8001c52:	07e5      	lsls	r5, r4, #31
 8001c54:	4315      	orrs	r5, r2
 8001c56:	0864      	lsrs	r4, r4, #1
 8001c58:	e78d      	b.n	8001b76 <__aeabi_dsub+0x112>
 8001c5a:	4a59      	ldr	r2, [pc, #356]	@ (8001dc0 <__aeabi_dsub+0x35c>)
 8001c5c:	9b02      	ldr	r3, [sp, #8]
 8001c5e:	4692      	mov	sl, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	44ba      	add	sl, r7
 8001c64:	431a      	orrs	r2, r3
 8001c66:	d02c      	beq.n	8001cc2 <__aeabi_dsub+0x25e>
 8001c68:	428e      	cmp	r6, r1
 8001c6a:	d02e      	beq.n	8001cca <__aeabi_dsub+0x266>
 8001c6c:	4652      	mov	r2, sl
 8001c6e:	2a00      	cmp	r2, #0
 8001c70:	d060      	beq.n	8001d34 <__aeabi_dsub+0x2d0>
 8001c72:	2f00      	cmp	r7, #0
 8001c74:	d100      	bne.n	8001c78 <__aeabi_dsub+0x214>
 8001c76:	e0db      	b.n	8001e30 <__aeabi_dsub+0x3cc>
 8001c78:	4663      	mov	r3, ip
 8001c7a:	000e      	movs	r6, r1
 8001c7c:	9c02      	ldr	r4, [sp, #8]
 8001c7e:	08d8      	lsrs	r0, r3, #3
 8001c80:	0762      	lsls	r2, r4, #29
 8001c82:	4302      	orrs	r2, r0
 8001c84:	08e4      	lsrs	r4, r4, #3
 8001c86:	0013      	movs	r3, r2
 8001c88:	4323      	orrs	r3, r4
 8001c8a:	d100      	bne.n	8001c8e <__aeabi_dsub+0x22a>
 8001c8c:	e254      	b.n	8002138 <__aeabi_dsub+0x6d4>
 8001c8e:	2580      	movs	r5, #128	@ 0x80
 8001c90:	032d      	lsls	r5, r5, #12
 8001c92:	4325      	orrs	r5, r4
 8001c94:	032d      	lsls	r5, r5, #12
 8001c96:	4c48      	ldr	r4, [pc, #288]	@ (8001db8 <__aeabi_dsub+0x354>)
 8001c98:	0b2d      	lsrs	r5, r5, #12
 8001c9a:	e78c      	b.n	8001bb6 <__aeabi_dsub+0x152>
 8001c9c:	4661      	mov	r1, ip
 8001c9e:	9b02      	ldr	r3, [sp, #8]
 8001ca0:	4319      	orrs	r1, r3
 8001ca2:	d100      	bne.n	8001ca6 <__aeabi_dsub+0x242>
 8001ca4:	e0cc      	b.n	8001e40 <__aeabi_dsub+0x3dc>
 8001ca6:	0029      	movs	r1, r5
 8001ca8:	3901      	subs	r1, #1
 8001caa:	2d01      	cmp	r5, #1
 8001cac:	d100      	bne.n	8001cb0 <__aeabi_dsub+0x24c>
 8001cae:	e188      	b.n	8001fc2 <__aeabi_dsub+0x55e>
 8001cb0:	4295      	cmp	r5, r2
 8001cb2:	d100      	bne.n	8001cb6 <__aeabi_dsub+0x252>
 8001cb4:	e0aa      	b.n	8001e0c <__aeabi_dsub+0x3a8>
 8001cb6:	2501      	movs	r5, #1
 8001cb8:	2938      	cmp	r1, #56	@ 0x38
 8001cba:	dd00      	ble.n	8001cbe <__aeabi_dsub+0x25a>
 8001cbc:	e72f      	b.n	8001b1e <__aeabi_dsub+0xba>
 8001cbe:	468a      	mov	sl, r1
 8001cc0:	e718      	b.n	8001af4 <__aeabi_dsub+0x90>
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	4051      	eors	r1, r2
 8001cc6:	428e      	cmp	r6, r1
 8001cc8:	d1d0      	bne.n	8001c6c <__aeabi_dsub+0x208>
 8001cca:	4653      	mov	r3, sl
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d100      	bne.n	8001cd2 <__aeabi_dsub+0x26e>
 8001cd0:	e0be      	b.n	8001e50 <__aeabi_dsub+0x3ec>
 8001cd2:	2f00      	cmp	r7, #0
 8001cd4:	d000      	beq.n	8001cd8 <__aeabi_dsub+0x274>
 8001cd6:	e138      	b.n	8001f4a <__aeabi_dsub+0x4e6>
 8001cd8:	46ca      	mov	sl, r9
 8001cda:	0022      	movs	r2, r4
 8001cdc:	4302      	orrs	r2, r0
 8001cde:	d100      	bne.n	8001ce2 <__aeabi_dsub+0x27e>
 8001ce0:	e1e2      	b.n	80020a8 <__aeabi_dsub+0x644>
 8001ce2:	4653      	mov	r3, sl
 8001ce4:	1e59      	subs	r1, r3, #1
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d100      	bne.n	8001cec <__aeabi_dsub+0x288>
 8001cea:	e20d      	b.n	8002108 <__aeabi_dsub+0x6a4>
 8001cec:	4a32      	ldr	r2, [pc, #200]	@ (8001db8 <__aeabi_dsub+0x354>)
 8001cee:	4592      	cmp	sl, r2
 8001cf0:	d100      	bne.n	8001cf4 <__aeabi_dsub+0x290>
 8001cf2:	e1d2      	b.n	800209a <__aeabi_dsub+0x636>
 8001cf4:	2701      	movs	r7, #1
 8001cf6:	2938      	cmp	r1, #56	@ 0x38
 8001cf8:	dc13      	bgt.n	8001d22 <__aeabi_dsub+0x2be>
 8001cfa:	291f      	cmp	r1, #31
 8001cfc:	dd00      	ble.n	8001d00 <__aeabi_dsub+0x29c>
 8001cfe:	e1ee      	b.n	80020de <__aeabi_dsub+0x67a>
 8001d00:	2220      	movs	r2, #32
 8001d02:	9b02      	ldr	r3, [sp, #8]
 8001d04:	1a52      	subs	r2, r2, r1
 8001d06:	0025      	movs	r5, r4
 8001d08:	0007      	movs	r7, r0
 8001d0a:	469a      	mov	sl, r3
 8001d0c:	40cc      	lsrs	r4, r1
 8001d0e:	4090      	lsls	r0, r2
 8001d10:	4095      	lsls	r5, r2
 8001d12:	40cf      	lsrs	r7, r1
 8001d14:	44a2      	add	sl, r4
 8001d16:	1e42      	subs	r2, r0, #1
 8001d18:	4190      	sbcs	r0, r2
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	432f      	orrs	r7, r5
 8001d1e:	4307      	orrs	r7, r0
 8001d20:	9302      	str	r3, [sp, #8]
 8001d22:	003d      	movs	r5, r7
 8001d24:	4465      	add	r5, ip
 8001d26:	4565      	cmp	r5, ip
 8001d28:	4192      	sbcs	r2, r2
 8001d2a:	9b02      	ldr	r3, [sp, #8]
 8001d2c:	4252      	negs	r2, r2
 8001d2e:	464f      	mov	r7, r9
 8001d30:	18d4      	adds	r4, r2, r3
 8001d32:	e780      	b.n	8001c36 <__aeabi_dsub+0x1d2>
 8001d34:	4a23      	ldr	r2, [pc, #140]	@ (8001dc4 <__aeabi_dsub+0x360>)
 8001d36:	1c7d      	adds	r5, r7, #1
 8001d38:	4215      	tst	r5, r2
 8001d3a:	d000      	beq.n	8001d3e <__aeabi_dsub+0x2da>
 8001d3c:	e0aa      	b.n	8001e94 <__aeabi_dsub+0x430>
 8001d3e:	4662      	mov	r2, ip
 8001d40:	0025      	movs	r5, r4
 8001d42:	9b02      	ldr	r3, [sp, #8]
 8001d44:	4305      	orrs	r5, r0
 8001d46:	431a      	orrs	r2, r3
 8001d48:	2f00      	cmp	r7, #0
 8001d4a:	d000      	beq.n	8001d4e <__aeabi_dsub+0x2ea>
 8001d4c:	e0f5      	b.n	8001f3a <__aeabi_dsub+0x4d6>
 8001d4e:	2d00      	cmp	r5, #0
 8001d50:	d100      	bne.n	8001d54 <__aeabi_dsub+0x2f0>
 8001d52:	e16b      	b.n	800202c <__aeabi_dsub+0x5c8>
 8001d54:	2a00      	cmp	r2, #0
 8001d56:	d100      	bne.n	8001d5a <__aeabi_dsub+0x2f6>
 8001d58:	e152      	b.n	8002000 <__aeabi_dsub+0x59c>
 8001d5a:	4663      	mov	r3, ip
 8001d5c:	1ac5      	subs	r5, r0, r3
 8001d5e:	9b02      	ldr	r3, [sp, #8]
 8001d60:	1ae2      	subs	r2, r4, r3
 8001d62:	42a8      	cmp	r0, r5
 8001d64:	419b      	sbcs	r3, r3
 8001d66:	425b      	negs	r3, r3
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	021a      	lsls	r2, r3, #8
 8001d6c:	d400      	bmi.n	8001d70 <__aeabi_dsub+0x30c>
 8001d6e:	e1d5      	b.n	800211c <__aeabi_dsub+0x6b8>
 8001d70:	4663      	mov	r3, ip
 8001d72:	1a1d      	subs	r5, r3, r0
 8001d74:	45ac      	cmp	ip, r5
 8001d76:	4192      	sbcs	r2, r2
 8001d78:	2601      	movs	r6, #1
 8001d7a:	9b02      	ldr	r3, [sp, #8]
 8001d7c:	4252      	negs	r2, r2
 8001d7e:	1b1c      	subs	r4, r3, r4
 8001d80:	4688      	mov	r8, r1
 8001d82:	1aa4      	subs	r4, r4, r2
 8001d84:	400e      	ands	r6, r1
 8001d86:	e6f6      	b.n	8001b76 <__aeabi_dsub+0x112>
 8001d88:	4297      	cmp	r7, r2
 8001d8a:	d03f      	beq.n	8001e0c <__aeabi_dsub+0x3a8>
 8001d8c:	4652      	mov	r2, sl
 8001d8e:	2501      	movs	r5, #1
 8001d90:	2a38      	cmp	r2, #56	@ 0x38
 8001d92:	dd00      	ble.n	8001d96 <__aeabi_dsub+0x332>
 8001d94:	e74a      	b.n	8001c2c <__aeabi_dsub+0x1c8>
 8001d96:	2280      	movs	r2, #128	@ 0x80
 8001d98:	9b02      	ldr	r3, [sp, #8]
 8001d9a:	0412      	lsls	r2, r2, #16
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	9302      	str	r3, [sp, #8]
 8001da0:	e72d      	b.n	8001bfe <__aeabi_dsub+0x19a>
 8001da2:	003c      	movs	r4, r7
 8001da4:	2500      	movs	r5, #0
 8001da6:	2200      	movs	r2, #0
 8001da8:	e705      	b.n	8001bb6 <__aeabi_dsub+0x152>
 8001daa:	2307      	movs	r3, #7
 8001dac:	402b      	ands	r3, r5
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d000      	beq.n	8001db4 <__aeabi_dsub+0x350>
 8001db2:	e6e2      	b.n	8001b7a <__aeabi_dsub+0x116>
 8001db4:	e06b      	b.n	8001e8e <__aeabi_dsub+0x42a>
 8001db6:	46c0      	nop			@ (mov r8, r8)
 8001db8:	000007ff 	.word	0x000007ff
 8001dbc:	ff7fffff 	.word	0xff7fffff
 8001dc0:	fffff801 	.word	0xfffff801
 8001dc4:	000007fe 	.word	0x000007fe
 8001dc8:	0028      	movs	r0, r5
 8001dca:	f000 fa97 	bl	80022fc <__clzsi2>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	3318      	adds	r3, #24
 8001dd2:	2b1f      	cmp	r3, #31
 8001dd4:	dc00      	bgt.n	8001dd8 <__aeabi_dsub+0x374>
 8001dd6:	e6b4      	b.n	8001b42 <__aeabi_dsub+0xde>
 8001dd8:	002a      	movs	r2, r5
 8001dda:	3808      	subs	r0, #8
 8001ddc:	4082      	lsls	r2, r0
 8001dde:	429f      	cmp	r7, r3
 8001de0:	dd00      	ble.n	8001de4 <__aeabi_dsub+0x380>
 8001de2:	e0b9      	b.n	8001f58 <__aeabi_dsub+0x4f4>
 8001de4:	1bdb      	subs	r3, r3, r7
 8001de6:	1c58      	adds	r0, r3, #1
 8001de8:	281f      	cmp	r0, #31
 8001dea:	dc00      	bgt.n	8001dee <__aeabi_dsub+0x38a>
 8001dec:	e1a0      	b.n	8002130 <__aeabi_dsub+0x6cc>
 8001dee:	0015      	movs	r5, r2
 8001df0:	3b1f      	subs	r3, #31
 8001df2:	40dd      	lsrs	r5, r3
 8001df4:	2820      	cmp	r0, #32
 8001df6:	d005      	beq.n	8001e04 <__aeabi_dsub+0x3a0>
 8001df8:	2340      	movs	r3, #64	@ 0x40
 8001dfa:	1a1b      	subs	r3, r3, r0
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	1e53      	subs	r3, r2, #1
 8001e00:	419a      	sbcs	r2, r3
 8001e02:	4315      	orrs	r5, r2
 8001e04:	2307      	movs	r3, #7
 8001e06:	2700      	movs	r7, #0
 8001e08:	402b      	ands	r3, r5
 8001e0a:	e7d0      	b.n	8001dae <__aeabi_dsub+0x34a>
 8001e0c:	08c0      	lsrs	r0, r0, #3
 8001e0e:	0762      	lsls	r2, r4, #29
 8001e10:	4302      	orrs	r2, r0
 8001e12:	08e4      	lsrs	r4, r4, #3
 8001e14:	e737      	b.n	8001c86 <__aeabi_dsub+0x222>
 8001e16:	08ea      	lsrs	r2, r5, #3
 8001e18:	0763      	lsls	r3, r4, #29
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	4bd3      	ldr	r3, [pc, #844]	@ (800216c <__aeabi_dsub+0x708>)
 8001e1e:	08e4      	lsrs	r4, r4, #3
 8001e20:	429f      	cmp	r7, r3
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x3c2>
 8001e24:	e72f      	b.n	8001c86 <__aeabi_dsub+0x222>
 8001e26:	0324      	lsls	r4, r4, #12
 8001e28:	0b25      	lsrs	r5, r4, #12
 8001e2a:	057c      	lsls	r4, r7, #21
 8001e2c:	0d64      	lsrs	r4, r4, #21
 8001e2e:	e6c2      	b.n	8001bb6 <__aeabi_dsub+0x152>
 8001e30:	46ca      	mov	sl, r9
 8001e32:	0022      	movs	r2, r4
 8001e34:	4302      	orrs	r2, r0
 8001e36:	d158      	bne.n	8001eea <__aeabi_dsub+0x486>
 8001e38:	4663      	mov	r3, ip
 8001e3a:	000e      	movs	r6, r1
 8001e3c:	9c02      	ldr	r4, [sp, #8]
 8001e3e:	9303      	str	r3, [sp, #12]
 8001e40:	9b03      	ldr	r3, [sp, #12]
 8001e42:	4657      	mov	r7, sl
 8001e44:	08da      	lsrs	r2, r3, #3
 8001e46:	e7e7      	b.n	8001e18 <__aeabi_dsub+0x3b4>
 8001e48:	4cc9      	ldr	r4, [pc, #804]	@ (8002170 <__aeabi_dsub+0x70c>)
 8001e4a:	1aff      	subs	r7, r7, r3
 8001e4c:	4014      	ands	r4, r2
 8001e4e:	e692      	b.n	8001b76 <__aeabi_dsub+0x112>
 8001e50:	4dc8      	ldr	r5, [pc, #800]	@ (8002174 <__aeabi_dsub+0x710>)
 8001e52:	1c7a      	adds	r2, r7, #1
 8001e54:	422a      	tst	r2, r5
 8001e56:	d000      	beq.n	8001e5a <__aeabi_dsub+0x3f6>
 8001e58:	e084      	b.n	8001f64 <__aeabi_dsub+0x500>
 8001e5a:	0022      	movs	r2, r4
 8001e5c:	4302      	orrs	r2, r0
 8001e5e:	2f00      	cmp	r7, #0
 8001e60:	d000      	beq.n	8001e64 <__aeabi_dsub+0x400>
 8001e62:	e0ef      	b.n	8002044 <__aeabi_dsub+0x5e0>
 8001e64:	2a00      	cmp	r2, #0
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dsub+0x406>
 8001e68:	e0e5      	b.n	8002036 <__aeabi_dsub+0x5d2>
 8001e6a:	4662      	mov	r2, ip
 8001e6c:	9902      	ldr	r1, [sp, #8]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dsub+0x410>
 8001e72:	e0c5      	b.n	8002000 <__aeabi_dsub+0x59c>
 8001e74:	4663      	mov	r3, ip
 8001e76:	18c5      	adds	r5, r0, r3
 8001e78:	468c      	mov	ip, r1
 8001e7a:	4285      	cmp	r5, r0
 8001e7c:	4180      	sbcs	r0, r0
 8001e7e:	4464      	add	r4, ip
 8001e80:	4240      	negs	r0, r0
 8001e82:	1824      	adds	r4, r4, r0
 8001e84:	0223      	lsls	r3, r4, #8
 8001e86:	d502      	bpl.n	8001e8e <__aeabi_dsub+0x42a>
 8001e88:	4bb9      	ldr	r3, [pc, #740]	@ (8002170 <__aeabi_dsub+0x70c>)
 8001e8a:	3701      	adds	r7, #1
 8001e8c:	401c      	ands	r4, r3
 8001e8e:	46ba      	mov	sl, r7
 8001e90:	9503      	str	r5, [sp, #12]
 8001e92:	e7d5      	b.n	8001e40 <__aeabi_dsub+0x3dc>
 8001e94:	4662      	mov	r2, ip
 8001e96:	1a85      	subs	r5, r0, r2
 8001e98:	42a8      	cmp	r0, r5
 8001e9a:	4192      	sbcs	r2, r2
 8001e9c:	4252      	negs	r2, r2
 8001e9e:	4691      	mov	r9, r2
 8001ea0:	9b02      	ldr	r3, [sp, #8]
 8001ea2:	1ae3      	subs	r3, r4, r3
 8001ea4:	001a      	movs	r2, r3
 8001ea6:	464b      	mov	r3, r9
 8001ea8:	1ad2      	subs	r2, r2, r3
 8001eaa:	0013      	movs	r3, r2
 8001eac:	4691      	mov	r9, r2
 8001eae:	021a      	lsls	r2, r3, #8
 8001eb0:	d46c      	bmi.n	8001f8c <__aeabi_dsub+0x528>
 8001eb2:	464a      	mov	r2, r9
 8001eb4:	464c      	mov	r4, r9
 8001eb6:	432a      	orrs	r2, r5
 8001eb8:	d000      	beq.n	8001ebc <__aeabi_dsub+0x458>
 8001eba:	e63a      	b.n	8001b32 <__aeabi_dsub+0xce>
 8001ebc:	2600      	movs	r6, #0
 8001ebe:	2400      	movs	r4, #0
 8001ec0:	2500      	movs	r5, #0
 8001ec2:	e678      	b.n	8001bb6 <__aeabi_dsub+0x152>
 8001ec4:	9902      	ldr	r1, [sp, #8]
 8001ec6:	4653      	mov	r3, sl
 8001ec8:	000d      	movs	r5, r1
 8001eca:	3a20      	subs	r2, #32
 8001ecc:	40d5      	lsrs	r5, r2
 8001ece:	2b20      	cmp	r3, #32
 8001ed0:	d006      	beq.n	8001ee0 <__aeabi_dsub+0x47c>
 8001ed2:	2240      	movs	r2, #64	@ 0x40
 8001ed4:	1ad2      	subs	r2, r2, r3
 8001ed6:	000b      	movs	r3, r1
 8001ed8:	4093      	lsls	r3, r2
 8001eda:	4662      	mov	r2, ip
 8001edc:	431a      	orrs	r2, r3
 8001ede:	4693      	mov	fp, r2
 8001ee0:	465b      	mov	r3, fp
 8001ee2:	1e5a      	subs	r2, r3, #1
 8001ee4:	4193      	sbcs	r3, r2
 8001ee6:	431d      	orrs	r5, r3
 8001ee8:	e619      	b.n	8001b1e <__aeabi_dsub+0xba>
 8001eea:	4653      	mov	r3, sl
 8001eec:	1e5a      	subs	r2, r3, #1
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d100      	bne.n	8001ef4 <__aeabi_dsub+0x490>
 8001ef2:	e0c6      	b.n	8002082 <__aeabi_dsub+0x61e>
 8001ef4:	4e9d      	ldr	r6, [pc, #628]	@ (800216c <__aeabi_dsub+0x708>)
 8001ef6:	45b2      	cmp	sl, r6
 8001ef8:	d100      	bne.n	8001efc <__aeabi_dsub+0x498>
 8001efa:	e6bd      	b.n	8001c78 <__aeabi_dsub+0x214>
 8001efc:	4688      	mov	r8, r1
 8001efe:	000e      	movs	r6, r1
 8001f00:	2501      	movs	r5, #1
 8001f02:	2a38      	cmp	r2, #56	@ 0x38
 8001f04:	dc10      	bgt.n	8001f28 <__aeabi_dsub+0x4c4>
 8001f06:	2a1f      	cmp	r2, #31
 8001f08:	dc7f      	bgt.n	800200a <__aeabi_dsub+0x5a6>
 8001f0a:	2120      	movs	r1, #32
 8001f0c:	0025      	movs	r5, r4
 8001f0e:	1a89      	subs	r1, r1, r2
 8001f10:	0007      	movs	r7, r0
 8001f12:	4088      	lsls	r0, r1
 8001f14:	408d      	lsls	r5, r1
 8001f16:	40d7      	lsrs	r7, r2
 8001f18:	40d4      	lsrs	r4, r2
 8001f1a:	1e41      	subs	r1, r0, #1
 8001f1c:	4188      	sbcs	r0, r1
 8001f1e:	9b02      	ldr	r3, [sp, #8]
 8001f20:	433d      	orrs	r5, r7
 8001f22:	1b1b      	subs	r3, r3, r4
 8001f24:	4305      	orrs	r5, r0
 8001f26:	9302      	str	r3, [sp, #8]
 8001f28:	4662      	mov	r2, ip
 8001f2a:	1b55      	subs	r5, r2, r5
 8001f2c:	45ac      	cmp	ip, r5
 8001f2e:	4192      	sbcs	r2, r2
 8001f30:	9b02      	ldr	r3, [sp, #8]
 8001f32:	4252      	negs	r2, r2
 8001f34:	464f      	mov	r7, r9
 8001f36:	1a9c      	subs	r4, r3, r2
 8001f38:	e5f6      	b.n	8001b28 <__aeabi_dsub+0xc4>
 8001f3a:	2d00      	cmp	r5, #0
 8001f3c:	d000      	beq.n	8001f40 <__aeabi_dsub+0x4dc>
 8001f3e:	e0b7      	b.n	80020b0 <__aeabi_dsub+0x64c>
 8001f40:	2a00      	cmp	r2, #0
 8001f42:	d100      	bne.n	8001f46 <__aeabi_dsub+0x4e2>
 8001f44:	e0f0      	b.n	8002128 <__aeabi_dsub+0x6c4>
 8001f46:	2601      	movs	r6, #1
 8001f48:	400e      	ands	r6, r1
 8001f4a:	4663      	mov	r3, ip
 8001f4c:	9802      	ldr	r0, [sp, #8]
 8001f4e:	08d9      	lsrs	r1, r3, #3
 8001f50:	0742      	lsls	r2, r0, #29
 8001f52:	430a      	orrs	r2, r1
 8001f54:	08c4      	lsrs	r4, r0, #3
 8001f56:	e696      	b.n	8001c86 <__aeabi_dsub+0x222>
 8001f58:	4c85      	ldr	r4, [pc, #532]	@ (8002170 <__aeabi_dsub+0x70c>)
 8001f5a:	1aff      	subs	r7, r7, r3
 8001f5c:	4014      	ands	r4, r2
 8001f5e:	0762      	lsls	r2, r4, #29
 8001f60:	08e4      	lsrs	r4, r4, #3
 8001f62:	e760      	b.n	8001e26 <__aeabi_dsub+0x3c2>
 8001f64:	4981      	ldr	r1, [pc, #516]	@ (800216c <__aeabi_dsub+0x708>)
 8001f66:	428a      	cmp	r2, r1
 8001f68:	d100      	bne.n	8001f6c <__aeabi_dsub+0x508>
 8001f6a:	e0c9      	b.n	8002100 <__aeabi_dsub+0x69c>
 8001f6c:	4663      	mov	r3, ip
 8001f6e:	18c1      	adds	r1, r0, r3
 8001f70:	4281      	cmp	r1, r0
 8001f72:	4180      	sbcs	r0, r0
 8001f74:	9b02      	ldr	r3, [sp, #8]
 8001f76:	4240      	negs	r0, r0
 8001f78:	18e3      	adds	r3, r4, r3
 8001f7a:	181b      	adds	r3, r3, r0
 8001f7c:	07dd      	lsls	r5, r3, #31
 8001f7e:	085c      	lsrs	r4, r3, #1
 8001f80:	2307      	movs	r3, #7
 8001f82:	0849      	lsrs	r1, r1, #1
 8001f84:	430d      	orrs	r5, r1
 8001f86:	0017      	movs	r7, r2
 8001f88:	402b      	ands	r3, r5
 8001f8a:	e710      	b.n	8001dae <__aeabi_dsub+0x34a>
 8001f8c:	4663      	mov	r3, ip
 8001f8e:	1a1d      	subs	r5, r3, r0
 8001f90:	45ac      	cmp	ip, r5
 8001f92:	4192      	sbcs	r2, r2
 8001f94:	2601      	movs	r6, #1
 8001f96:	9b02      	ldr	r3, [sp, #8]
 8001f98:	4252      	negs	r2, r2
 8001f9a:	1b1c      	subs	r4, r3, r4
 8001f9c:	4688      	mov	r8, r1
 8001f9e:	1aa4      	subs	r4, r4, r2
 8001fa0:	400e      	ands	r6, r1
 8001fa2:	e5c6      	b.n	8001b32 <__aeabi_dsub+0xce>
 8001fa4:	4663      	mov	r3, ip
 8001fa6:	18c5      	adds	r5, r0, r3
 8001fa8:	9b02      	ldr	r3, [sp, #8]
 8001faa:	4285      	cmp	r5, r0
 8001fac:	4180      	sbcs	r0, r0
 8001fae:	469c      	mov	ip, r3
 8001fb0:	4240      	negs	r0, r0
 8001fb2:	4464      	add	r4, ip
 8001fb4:	1824      	adds	r4, r4, r0
 8001fb6:	2701      	movs	r7, #1
 8001fb8:	0223      	lsls	r3, r4, #8
 8001fba:	d400      	bmi.n	8001fbe <__aeabi_dsub+0x55a>
 8001fbc:	e6f5      	b.n	8001daa <__aeabi_dsub+0x346>
 8001fbe:	2702      	movs	r7, #2
 8001fc0:	e641      	b.n	8001c46 <__aeabi_dsub+0x1e2>
 8001fc2:	4663      	mov	r3, ip
 8001fc4:	1ac5      	subs	r5, r0, r3
 8001fc6:	42a8      	cmp	r0, r5
 8001fc8:	4180      	sbcs	r0, r0
 8001fca:	9b02      	ldr	r3, [sp, #8]
 8001fcc:	4240      	negs	r0, r0
 8001fce:	1ae4      	subs	r4, r4, r3
 8001fd0:	2701      	movs	r7, #1
 8001fd2:	1a24      	subs	r4, r4, r0
 8001fd4:	e5a8      	b.n	8001b28 <__aeabi_dsub+0xc4>
 8001fd6:	9d02      	ldr	r5, [sp, #8]
 8001fd8:	4652      	mov	r2, sl
 8001fda:	002b      	movs	r3, r5
 8001fdc:	3a20      	subs	r2, #32
 8001fde:	40d3      	lsrs	r3, r2
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	4653      	mov	r3, sl
 8001fe4:	2b20      	cmp	r3, #32
 8001fe6:	d006      	beq.n	8001ff6 <__aeabi_dsub+0x592>
 8001fe8:	2240      	movs	r2, #64	@ 0x40
 8001fea:	1ad2      	subs	r2, r2, r3
 8001fec:	002b      	movs	r3, r5
 8001fee:	4093      	lsls	r3, r2
 8001ff0:	4662      	mov	r2, ip
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	4693      	mov	fp, r2
 8001ff6:	465d      	mov	r5, fp
 8001ff8:	1e6b      	subs	r3, r5, #1
 8001ffa:	419d      	sbcs	r5, r3
 8001ffc:	430d      	orrs	r5, r1
 8001ffe:	e615      	b.n	8001c2c <__aeabi_dsub+0x1c8>
 8002000:	0762      	lsls	r2, r4, #29
 8002002:	08c0      	lsrs	r0, r0, #3
 8002004:	4302      	orrs	r2, r0
 8002006:	08e4      	lsrs	r4, r4, #3
 8002008:	e70d      	b.n	8001e26 <__aeabi_dsub+0x3c2>
 800200a:	0011      	movs	r1, r2
 800200c:	0027      	movs	r7, r4
 800200e:	3920      	subs	r1, #32
 8002010:	40cf      	lsrs	r7, r1
 8002012:	2a20      	cmp	r2, #32
 8002014:	d005      	beq.n	8002022 <__aeabi_dsub+0x5be>
 8002016:	2140      	movs	r1, #64	@ 0x40
 8002018:	1a8a      	subs	r2, r1, r2
 800201a:	4094      	lsls	r4, r2
 800201c:	0025      	movs	r5, r4
 800201e:	4305      	orrs	r5, r0
 8002020:	9503      	str	r5, [sp, #12]
 8002022:	9d03      	ldr	r5, [sp, #12]
 8002024:	1e6a      	subs	r2, r5, #1
 8002026:	4195      	sbcs	r5, r2
 8002028:	433d      	orrs	r5, r7
 800202a:	e77d      	b.n	8001f28 <__aeabi_dsub+0x4c4>
 800202c:	2a00      	cmp	r2, #0
 800202e:	d100      	bne.n	8002032 <__aeabi_dsub+0x5ce>
 8002030:	e744      	b.n	8001ebc <__aeabi_dsub+0x458>
 8002032:	2601      	movs	r6, #1
 8002034:	400e      	ands	r6, r1
 8002036:	4663      	mov	r3, ip
 8002038:	08d9      	lsrs	r1, r3, #3
 800203a:	9b02      	ldr	r3, [sp, #8]
 800203c:	075a      	lsls	r2, r3, #29
 800203e:	430a      	orrs	r2, r1
 8002040:	08dc      	lsrs	r4, r3, #3
 8002042:	e6f0      	b.n	8001e26 <__aeabi_dsub+0x3c2>
 8002044:	2a00      	cmp	r2, #0
 8002046:	d028      	beq.n	800209a <__aeabi_dsub+0x636>
 8002048:	4662      	mov	r2, ip
 800204a:	9f02      	ldr	r7, [sp, #8]
 800204c:	08c0      	lsrs	r0, r0, #3
 800204e:	433a      	orrs	r2, r7
 8002050:	d100      	bne.n	8002054 <__aeabi_dsub+0x5f0>
 8002052:	e6dc      	b.n	8001e0e <__aeabi_dsub+0x3aa>
 8002054:	0762      	lsls	r2, r4, #29
 8002056:	4310      	orrs	r0, r2
 8002058:	2280      	movs	r2, #128	@ 0x80
 800205a:	08e4      	lsrs	r4, r4, #3
 800205c:	0312      	lsls	r2, r2, #12
 800205e:	4214      	tst	r4, r2
 8002060:	d009      	beq.n	8002076 <__aeabi_dsub+0x612>
 8002062:	08fd      	lsrs	r5, r7, #3
 8002064:	4215      	tst	r5, r2
 8002066:	d106      	bne.n	8002076 <__aeabi_dsub+0x612>
 8002068:	4663      	mov	r3, ip
 800206a:	2601      	movs	r6, #1
 800206c:	002c      	movs	r4, r5
 800206e:	08d8      	lsrs	r0, r3, #3
 8002070:	077b      	lsls	r3, r7, #29
 8002072:	4318      	orrs	r0, r3
 8002074:	400e      	ands	r6, r1
 8002076:	0f42      	lsrs	r2, r0, #29
 8002078:	00c0      	lsls	r0, r0, #3
 800207a:	08c0      	lsrs	r0, r0, #3
 800207c:	0752      	lsls	r2, r2, #29
 800207e:	4302      	orrs	r2, r0
 8002080:	e601      	b.n	8001c86 <__aeabi_dsub+0x222>
 8002082:	4663      	mov	r3, ip
 8002084:	1a1d      	subs	r5, r3, r0
 8002086:	45ac      	cmp	ip, r5
 8002088:	4192      	sbcs	r2, r2
 800208a:	9b02      	ldr	r3, [sp, #8]
 800208c:	4252      	negs	r2, r2
 800208e:	1b1c      	subs	r4, r3, r4
 8002090:	000e      	movs	r6, r1
 8002092:	4688      	mov	r8, r1
 8002094:	2701      	movs	r7, #1
 8002096:	1aa4      	subs	r4, r4, r2
 8002098:	e546      	b.n	8001b28 <__aeabi_dsub+0xc4>
 800209a:	4663      	mov	r3, ip
 800209c:	08d9      	lsrs	r1, r3, #3
 800209e:	9b02      	ldr	r3, [sp, #8]
 80020a0:	075a      	lsls	r2, r3, #29
 80020a2:	430a      	orrs	r2, r1
 80020a4:	08dc      	lsrs	r4, r3, #3
 80020a6:	e5ee      	b.n	8001c86 <__aeabi_dsub+0x222>
 80020a8:	4663      	mov	r3, ip
 80020aa:	9c02      	ldr	r4, [sp, #8]
 80020ac:	9303      	str	r3, [sp, #12]
 80020ae:	e6c7      	b.n	8001e40 <__aeabi_dsub+0x3dc>
 80020b0:	08c0      	lsrs	r0, r0, #3
 80020b2:	2a00      	cmp	r2, #0
 80020b4:	d100      	bne.n	80020b8 <__aeabi_dsub+0x654>
 80020b6:	e6aa      	b.n	8001e0e <__aeabi_dsub+0x3aa>
 80020b8:	0762      	lsls	r2, r4, #29
 80020ba:	4310      	orrs	r0, r2
 80020bc:	2280      	movs	r2, #128	@ 0x80
 80020be:	08e4      	lsrs	r4, r4, #3
 80020c0:	0312      	lsls	r2, r2, #12
 80020c2:	4214      	tst	r4, r2
 80020c4:	d0d7      	beq.n	8002076 <__aeabi_dsub+0x612>
 80020c6:	9f02      	ldr	r7, [sp, #8]
 80020c8:	08fd      	lsrs	r5, r7, #3
 80020ca:	4215      	tst	r5, r2
 80020cc:	d1d3      	bne.n	8002076 <__aeabi_dsub+0x612>
 80020ce:	4663      	mov	r3, ip
 80020d0:	2601      	movs	r6, #1
 80020d2:	08d8      	lsrs	r0, r3, #3
 80020d4:	077b      	lsls	r3, r7, #29
 80020d6:	002c      	movs	r4, r5
 80020d8:	4318      	orrs	r0, r3
 80020da:	400e      	ands	r6, r1
 80020dc:	e7cb      	b.n	8002076 <__aeabi_dsub+0x612>
 80020de:	000a      	movs	r2, r1
 80020e0:	0027      	movs	r7, r4
 80020e2:	3a20      	subs	r2, #32
 80020e4:	40d7      	lsrs	r7, r2
 80020e6:	2920      	cmp	r1, #32
 80020e8:	d005      	beq.n	80020f6 <__aeabi_dsub+0x692>
 80020ea:	2240      	movs	r2, #64	@ 0x40
 80020ec:	1a52      	subs	r2, r2, r1
 80020ee:	4094      	lsls	r4, r2
 80020f0:	0025      	movs	r5, r4
 80020f2:	4305      	orrs	r5, r0
 80020f4:	9503      	str	r5, [sp, #12]
 80020f6:	9d03      	ldr	r5, [sp, #12]
 80020f8:	1e6a      	subs	r2, r5, #1
 80020fa:	4195      	sbcs	r5, r2
 80020fc:	432f      	orrs	r7, r5
 80020fe:	e610      	b.n	8001d22 <__aeabi_dsub+0x2be>
 8002100:	0014      	movs	r4, r2
 8002102:	2500      	movs	r5, #0
 8002104:	2200      	movs	r2, #0
 8002106:	e556      	b.n	8001bb6 <__aeabi_dsub+0x152>
 8002108:	9b02      	ldr	r3, [sp, #8]
 800210a:	4460      	add	r0, ip
 800210c:	4699      	mov	r9, r3
 800210e:	4560      	cmp	r0, ip
 8002110:	4192      	sbcs	r2, r2
 8002112:	444c      	add	r4, r9
 8002114:	4252      	negs	r2, r2
 8002116:	0005      	movs	r5, r0
 8002118:	18a4      	adds	r4, r4, r2
 800211a:	e74c      	b.n	8001fb6 <__aeabi_dsub+0x552>
 800211c:	001a      	movs	r2, r3
 800211e:	001c      	movs	r4, r3
 8002120:	432a      	orrs	r2, r5
 8002122:	d000      	beq.n	8002126 <__aeabi_dsub+0x6c2>
 8002124:	e6b3      	b.n	8001e8e <__aeabi_dsub+0x42a>
 8002126:	e6c9      	b.n	8001ebc <__aeabi_dsub+0x458>
 8002128:	2480      	movs	r4, #128	@ 0x80
 800212a:	2600      	movs	r6, #0
 800212c:	0324      	lsls	r4, r4, #12
 800212e:	e5ae      	b.n	8001c8e <__aeabi_dsub+0x22a>
 8002130:	2120      	movs	r1, #32
 8002132:	2500      	movs	r5, #0
 8002134:	1a09      	subs	r1, r1, r0
 8002136:	e517      	b.n	8001b68 <__aeabi_dsub+0x104>
 8002138:	2200      	movs	r2, #0
 800213a:	2500      	movs	r5, #0
 800213c:	4c0b      	ldr	r4, [pc, #44]	@ (800216c <__aeabi_dsub+0x708>)
 800213e:	e53a      	b.n	8001bb6 <__aeabi_dsub+0x152>
 8002140:	2d00      	cmp	r5, #0
 8002142:	d100      	bne.n	8002146 <__aeabi_dsub+0x6e2>
 8002144:	e5f6      	b.n	8001d34 <__aeabi_dsub+0x2d0>
 8002146:	464b      	mov	r3, r9
 8002148:	1bda      	subs	r2, r3, r7
 800214a:	4692      	mov	sl, r2
 800214c:	2f00      	cmp	r7, #0
 800214e:	d100      	bne.n	8002152 <__aeabi_dsub+0x6ee>
 8002150:	e66f      	b.n	8001e32 <__aeabi_dsub+0x3ce>
 8002152:	2a38      	cmp	r2, #56	@ 0x38
 8002154:	dc05      	bgt.n	8002162 <__aeabi_dsub+0x6fe>
 8002156:	2680      	movs	r6, #128	@ 0x80
 8002158:	0436      	lsls	r6, r6, #16
 800215a:	4334      	orrs	r4, r6
 800215c:	4688      	mov	r8, r1
 800215e:	000e      	movs	r6, r1
 8002160:	e6d1      	b.n	8001f06 <__aeabi_dsub+0x4a2>
 8002162:	4688      	mov	r8, r1
 8002164:	000e      	movs	r6, r1
 8002166:	2501      	movs	r5, #1
 8002168:	e6de      	b.n	8001f28 <__aeabi_dsub+0x4c4>
 800216a:	46c0      	nop			@ (mov r8, r8)
 800216c:	000007ff 	.word	0x000007ff
 8002170:	ff7fffff 	.word	0xff7fffff
 8002174:	000007fe 	.word	0x000007fe
 8002178:	2d00      	cmp	r5, #0
 800217a:	d100      	bne.n	800217e <__aeabi_dsub+0x71a>
 800217c:	e668      	b.n	8001e50 <__aeabi_dsub+0x3ec>
 800217e:	464b      	mov	r3, r9
 8002180:	1bd9      	subs	r1, r3, r7
 8002182:	2f00      	cmp	r7, #0
 8002184:	d101      	bne.n	800218a <__aeabi_dsub+0x726>
 8002186:	468a      	mov	sl, r1
 8002188:	e5a7      	b.n	8001cda <__aeabi_dsub+0x276>
 800218a:	2701      	movs	r7, #1
 800218c:	2938      	cmp	r1, #56	@ 0x38
 800218e:	dd00      	ble.n	8002192 <__aeabi_dsub+0x72e>
 8002190:	e5c7      	b.n	8001d22 <__aeabi_dsub+0x2be>
 8002192:	2280      	movs	r2, #128	@ 0x80
 8002194:	0412      	lsls	r2, r2, #16
 8002196:	4314      	orrs	r4, r2
 8002198:	e5af      	b.n	8001cfa <__aeabi_dsub+0x296>
 800219a:	46c0      	nop			@ (mov r8, r8)

0800219c <__aeabi_dcmpun>:
 800219c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800219e:	46c6      	mov	lr, r8
 80021a0:	031e      	lsls	r6, r3, #12
 80021a2:	0b36      	lsrs	r6, r6, #12
 80021a4:	46b0      	mov	r8, r6
 80021a6:	4e0d      	ldr	r6, [pc, #52]	@ (80021dc <__aeabi_dcmpun+0x40>)
 80021a8:	030c      	lsls	r4, r1, #12
 80021aa:	004d      	lsls	r5, r1, #1
 80021ac:	005f      	lsls	r7, r3, #1
 80021ae:	b500      	push	{lr}
 80021b0:	0b24      	lsrs	r4, r4, #12
 80021b2:	0d6d      	lsrs	r5, r5, #21
 80021b4:	0d7f      	lsrs	r7, r7, #21
 80021b6:	42b5      	cmp	r5, r6
 80021b8:	d00b      	beq.n	80021d2 <__aeabi_dcmpun+0x36>
 80021ba:	4908      	ldr	r1, [pc, #32]	@ (80021dc <__aeabi_dcmpun+0x40>)
 80021bc:	2000      	movs	r0, #0
 80021be:	428f      	cmp	r7, r1
 80021c0:	d104      	bne.n	80021cc <__aeabi_dcmpun+0x30>
 80021c2:	4646      	mov	r6, r8
 80021c4:	4316      	orrs	r6, r2
 80021c6:	0030      	movs	r0, r6
 80021c8:	1e43      	subs	r3, r0, #1
 80021ca:	4198      	sbcs	r0, r3
 80021cc:	bc80      	pop	{r7}
 80021ce:	46b8      	mov	r8, r7
 80021d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d2:	4304      	orrs	r4, r0
 80021d4:	2001      	movs	r0, #1
 80021d6:	2c00      	cmp	r4, #0
 80021d8:	d1f8      	bne.n	80021cc <__aeabi_dcmpun+0x30>
 80021da:	e7ee      	b.n	80021ba <__aeabi_dcmpun+0x1e>
 80021dc:	000007ff 	.word	0x000007ff

080021e0 <__aeabi_d2iz>:
 80021e0:	000b      	movs	r3, r1
 80021e2:	0002      	movs	r2, r0
 80021e4:	b570      	push	{r4, r5, r6, lr}
 80021e6:	4d16      	ldr	r5, [pc, #88]	@ (8002240 <__aeabi_d2iz+0x60>)
 80021e8:	030c      	lsls	r4, r1, #12
 80021ea:	b082      	sub	sp, #8
 80021ec:	0049      	lsls	r1, r1, #1
 80021ee:	2000      	movs	r0, #0
 80021f0:	9200      	str	r2, [sp, #0]
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	0b24      	lsrs	r4, r4, #12
 80021f6:	0d49      	lsrs	r1, r1, #21
 80021f8:	0fde      	lsrs	r6, r3, #31
 80021fa:	42a9      	cmp	r1, r5
 80021fc:	dd04      	ble.n	8002208 <__aeabi_d2iz+0x28>
 80021fe:	4811      	ldr	r0, [pc, #68]	@ (8002244 <__aeabi_d2iz+0x64>)
 8002200:	4281      	cmp	r1, r0
 8002202:	dd03      	ble.n	800220c <__aeabi_d2iz+0x2c>
 8002204:	4b10      	ldr	r3, [pc, #64]	@ (8002248 <__aeabi_d2iz+0x68>)
 8002206:	18f0      	adds	r0, r6, r3
 8002208:	b002      	add	sp, #8
 800220a:	bd70      	pop	{r4, r5, r6, pc}
 800220c:	2080      	movs	r0, #128	@ 0x80
 800220e:	0340      	lsls	r0, r0, #13
 8002210:	4320      	orrs	r0, r4
 8002212:	4c0e      	ldr	r4, [pc, #56]	@ (800224c <__aeabi_d2iz+0x6c>)
 8002214:	1a64      	subs	r4, r4, r1
 8002216:	2c1f      	cmp	r4, #31
 8002218:	dd08      	ble.n	800222c <__aeabi_d2iz+0x4c>
 800221a:	4b0d      	ldr	r3, [pc, #52]	@ (8002250 <__aeabi_d2iz+0x70>)
 800221c:	1a5b      	subs	r3, r3, r1
 800221e:	40d8      	lsrs	r0, r3
 8002220:	0003      	movs	r3, r0
 8002222:	4258      	negs	r0, r3
 8002224:	2e00      	cmp	r6, #0
 8002226:	d1ef      	bne.n	8002208 <__aeabi_d2iz+0x28>
 8002228:	0018      	movs	r0, r3
 800222a:	e7ed      	b.n	8002208 <__aeabi_d2iz+0x28>
 800222c:	4b09      	ldr	r3, [pc, #36]	@ (8002254 <__aeabi_d2iz+0x74>)
 800222e:	9a00      	ldr	r2, [sp, #0]
 8002230:	469c      	mov	ip, r3
 8002232:	0003      	movs	r3, r0
 8002234:	4461      	add	r1, ip
 8002236:	408b      	lsls	r3, r1
 8002238:	40e2      	lsrs	r2, r4
 800223a:	4313      	orrs	r3, r2
 800223c:	e7f1      	b.n	8002222 <__aeabi_d2iz+0x42>
 800223e:	46c0      	nop			@ (mov r8, r8)
 8002240:	000003fe 	.word	0x000003fe
 8002244:	0000041d 	.word	0x0000041d
 8002248:	7fffffff 	.word	0x7fffffff
 800224c:	00000433 	.word	0x00000433
 8002250:	00000413 	.word	0x00000413
 8002254:	fffffbed 	.word	0xfffffbed

08002258 <__aeabi_i2d>:
 8002258:	b570      	push	{r4, r5, r6, lr}
 800225a:	2800      	cmp	r0, #0
 800225c:	d016      	beq.n	800228c <__aeabi_i2d+0x34>
 800225e:	17c3      	asrs	r3, r0, #31
 8002260:	18c5      	adds	r5, r0, r3
 8002262:	405d      	eors	r5, r3
 8002264:	0fc4      	lsrs	r4, r0, #31
 8002266:	0028      	movs	r0, r5
 8002268:	f000 f848 	bl	80022fc <__clzsi2>
 800226c:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <__aeabi_i2d+0x58>)
 800226e:	1a1b      	subs	r3, r3, r0
 8002270:	055b      	lsls	r3, r3, #21
 8002272:	0d5b      	lsrs	r3, r3, #21
 8002274:	280a      	cmp	r0, #10
 8002276:	dc14      	bgt.n	80022a2 <__aeabi_i2d+0x4a>
 8002278:	0002      	movs	r2, r0
 800227a:	002e      	movs	r6, r5
 800227c:	3215      	adds	r2, #21
 800227e:	4096      	lsls	r6, r2
 8002280:	220b      	movs	r2, #11
 8002282:	1a12      	subs	r2, r2, r0
 8002284:	40d5      	lsrs	r5, r2
 8002286:	032d      	lsls	r5, r5, #12
 8002288:	0b2d      	lsrs	r5, r5, #12
 800228a:	e003      	b.n	8002294 <__aeabi_i2d+0x3c>
 800228c:	2400      	movs	r4, #0
 800228e:	2300      	movs	r3, #0
 8002290:	2500      	movs	r5, #0
 8002292:	2600      	movs	r6, #0
 8002294:	051b      	lsls	r3, r3, #20
 8002296:	432b      	orrs	r3, r5
 8002298:	07e4      	lsls	r4, r4, #31
 800229a:	4323      	orrs	r3, r4
 800229c:	0030      	movs	r0, r6
 800229e:	0019      	movs	r1, r3
 80022a0:	bd70      	pop	{r4, r5, r6, pc}
 80022a2:	380b      	subs	r0, #11
 80022a4:	4085      	lsls	r5, r0
 80022a6:	032d      	lsls	r5, r5, #12
 80022a8:	2600      	movs	r6, #0
 80022aa:	0b2d      	lsrs	r5, r5, #12
 80022ac:	e7f2      	b.n	8002294 <__aeabi_i2d+0x3c>
 80022ae:	46c0      	nop			@ (mov r8, r8)
 80022b0:	0000041e 	.word	0x0000041e

080022b4 <__aeabi_ui2d>:
 80022b4:	b510      	push	{r4, lr}
 80022b6:	1e04      	subs	r4, r0, #0
 80022b8:	d010      	beq.n	80022dc <__aeabi_ui2d+0x28>
 80022ba:	f000 f81f 	bl	80022fc <__clzsi2>
 80022be:	4b0e      	ldr	r3, [pc, #56]	@ (80022f8 <__aeabi_ui2d+0x44>)
 80022c0:	1a1b      	subs	r3, r3, r0
 80022c2:	055b      	lsls	r3, r3, #21
 80022c4:	0d5b      	lsrs	r3, r3, #21
 80022c6:	280a      	cmp	r0, #10
 80022c8:	dc0f      	bgt.n	80022ea <__aeabi_ui2d+0x36>
 80022ca:	220b      	movs	r2, #11
 80022cc:	0021      	movs	r1, r4
 80022ce:	1a12      	subs	r2, r2, r0
 80022d0:	40d1      	lsrs	r1, r2
 80022d2:	3015      	adds	r0, #21
 80022d4:	030a      	lsls	r2, r1, #12
 80022d6:	4084      	lsls	r4, r0
 80022d8:	0b12      	lsrs	r2, r2, #12
 80022da:	e001      	b.n	80022e0 <__aeabi_ui2d+0x2c>
 80022dc:	2300      	movs	r3, #0
 80022de:	2200      	movs	r2, #0
 80022e0:	051b      	lsls	r3, r3, #20
 80022e2:	4313      	orrs	r3, r2
 80022e4:	0020      	movs	r0, r4
 80022e6:	0019      	movs	r1, r3
 80022e8:	bd10      	pop	{r4, pc}
 80022ea:	0022      	movs	r2, r4
 80022ec:	380b      	subs	r0, #11
 80022ee:	4082      	lsls	r2, r0
 80022f0:	0312      	lsls	r2, r2, #12
 80022f2:	2400      	movs	r4, #0
 80022f4:	0b12      	lsrs	r2, r2, #12
 80022f6:	e7f3      	b.n	80022e0 <__aeabi_ui2d+0x2c>
 80022f8:	0000041e 	.word	0x0000041e

080022fc <__clzsi2>:
 80022fc:	211c      	movs	r1, #28
 80022fe:	2301      	movs	r3, #1
 8002300:	041b      	lsls	r3, r3, #16
 8002302:	4298      	cmp	r0, r3
 8002304:	d301      	bcc.n	800230a <__clzsi2+0xe>
 8002306:	0c00      	lsrs	r0, r0, #16
 8002308:	3910      	subs	r1, #16
 800230a:	0a1b      	lsrs	r3, r3, #8
 800230c:	4298      	cmp	r0, r3
 800230e:	d301      	bcc.n	8002314 <__clzsi2+0x18>
 8002310:	0a00      	lsrs	r0, r0, #8
 8002312:	3908      	subs	r1, #8
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	4298      	cmp	r0, r3
 8002318:	d301      	bcc.n	800231e <__clzsi2+0x22>
 800231a:	0900      	lsrs	r0, r0, #4
 800231c:	3904      	subs	r1, #4
 800231e:	a202      	add	r2, pc, #8	@ (adr r2, 8002328 <__clzsi2+0x2c>)
 8002320:	5c10      	ldrb	r0, [r2, r0]
 8002322:	1840      	adds	r0, r0, r1
 8002324:	4770      	bx	lr
 8002326:	46c0      	nop			@ (mov r8, r8)
 8002328:	02020304 	.word	0x02020304
 800232c:	01010101 	.word	0x01010101
	...

08002338 <dw_main>:
 * @param  none
 *
 * @return none
 */
int dw_main(void)
{
 8002338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800233a:	b099      	sub	sp, #100	@ 0x64
 800233c:	af00      	add	r7, sp, #0
    // lcd_display_str(APP_NAME);

    /* Reset and initialise DW1000.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 800233e:	f00d f853 	bl	800f3e8 <reset_DW1000>
    port_set_dw1000_slowrate();
 8002342:	f00d f8bd 	bl	800f4c0 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR)
 8002346:	2001      	movs	r0, #1
 8002348:	f00b feec 	bl	800e124 <dwt_initialise>
 800234c:	0003      	movs	r3, r0
 800234e:	3301      	adds	r3, #1
 8002350:	d101      	bne.n	8002356 <dw_main+0x1e>
    {
        // lcd_display_str("INIT FAILED");
        while (1)
 8002352:	46c0      	nop			@ (mov r8, r8)
 8002354:	e7fd      	b.n	8002352 <dw_main+0x1a>
        { };
    }
    port_set_dw1000_fastrate();
 8002356:	f00d f8c1 	bl	800f4dc <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 7 below. */
    dwt_configure(&config);
 800235a:	4bd5      	ldr	r3, [pc, #852]	@ (80026b0 <dw_main+0x378>)
 800235c:	0018      	movs	r0, r3
 800235e:	f00c f83f 	bl	800e3e0 <dwt_configure>

    dwt_setdblrxbuffmode(0);
 8002362:	2000      	movs	r0, #0
 8002364:	f00c fc6a 	bl	800ec3c <dwt_setdblrxbuffmode>

    /* Apply default antenna delay value. See NOTE 1 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 8002368:	4bd2      	ldr	r3, [pc, #840]	@ (80026b4 <dw_main+0x37c>)
 800236a:	0018      	movs	r0, r3
 800236c:	f00c f9dc 	bl	800e728 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 8002370:	4bd0      	ldr	r3, [pc, #832]	@ (80026b4 <dw_main+0x37c>)
 8002372:	0018      	movs	r0, r3
 8002374:	f00c f9ec 	bl	800e750 <dwt_settxantennadelay>

    /* Loop forever responding to ranging requests. */
    while (1)
    {
        /* Clear reception timeout to start next ranging process. */
        dwt_setrxtimeout(0);
 8002378:	2000      	movs	r0, #0
 800237a:	f00c fe63 	bl	800f044 <dwt_setrxtimeout>
//         {
//             rx_buffer[i] = 0;
//         }

        /* Activate reception immediately. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 800237e:	2000      	movs	r0, #0
 8002380:	f00c fe18 	bl	800efb4 <dwt_rxenable>

        /* Poll for reception of a frame or error/timeout. See NOTE 8 below. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8002384:	46c0      	nop			@ (mov r8, r8)
 8002386:	2100      	movs	r1, #0
 8002388:	200f      	movs	r0, #15
 800238a:	f00c fb31 	bl	800e9f0 <dwt_read32bitoffsetreg>
 800238e:	0002      	movs	r2, r0
 8002390:	4bc9      	ldr	r3, [pc, #804]	@ (80026b8 <dw_main+0x380>)
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	4bc8      	ldr	r3, [pc, #800]	@ (80026b8 <dw_main+0x380>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4ac8      	ldr	r2, [pc, #800]	@ (80026bc <dw_main+0x384>)
 800239a:	4013      	ands	r3, r2
 800239c:	d0f3      	beq.n	8002386 <dw_main+0x4e>
        { };

        //  uint32 error = status_reg & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
//         CDC_Transmit_FS((uint8 *) &error, sizeof(status_reg));

        if (status_reg & SYS_STATUS_RXFCG)
 800239e:	4bc6      	ldr	r3, [pc, #792]	@ (80026b8 <dw_main+0x380>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	2380      	movs	r3, #128	@ 0x80
 80023a4:	01db      	lsls	r3, r3, #7
 80023a6:	4013      	ands	r3, r2
 80023a8:	d100      	bne.n	80023ac <dw_main+0x74>
 80023aa:	e176      	b.n	800269a <dw_main+0x362>
        {
            uint32 frame_len;

            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 80023ac:	2380      	movs	r3, #128	@ 0x80
 80023ae:	01db      	lsls	r3, r3, #7
 80023b0:	001a      	movs	r2, r3
 80023b2:	2100      	movs	r1, #0
 80023b4:	200f      	movs	r0, #15
 80023b6:	f00c fbac 	bl	800eb12 <dwt_write32bitoffsetreg>

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 80023ba:	2100      	movs	r1, #0
 80023bc:	2010      	movs	r0, #16
 80023be:	f00c fb17 	bl	800e9f0 <dwt_read32bitoffsetreg>
 80023c2:	0003      	movs	r3, r0
 80023c4:	059b      	lsls	r3, r3, #22
 80023c6:	0d9b      	lsrs	r3, r3, #22
 80023c8:	65bb      	str	r3, [r7, #88]	@ 0x58
            if (frame_len <= RX_BUFFER_LEN)
 80023ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80023cc:	2380      	movs	r3, #128	@ 0x80
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d806      	bhi.n	80023e2 <dw_main+0xaa>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 80023d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023d6:	b299      	uxth	r1, r3
 80023d8:	4bb9      	ldr	r3, [pc, #740]	@ (80026c0 <dw_main+0x388>)
 80023da:	2200      	movs	r2, #0
 80023dc:	0018      	movs	r0, r3
 80023de:	f00c fa15 	bl	800e80c <dwt_readrxdata>
            }
            
            /* Check that the frame is a poll sent by "DS TWR initiator" example.
             * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
            rx_buffer[ALL_MSG_SN_IDX] = 0;
 80023e2:	4bb7      	ldr	r3, [pc, #732]	@ (80026c0 <dw_main+0x388>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	709a      	strb	r2, [r3, #2]
            if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0)
 80023e8:	49b6      	ldr	r1, [pc, #728]	@ (80026c4 <dw_main+0x38c>)
 80023ea:	4bb5      	ldr	r3, [pc, #724]	@ (80026c0 <dw_main+0x388>)
 80023ec:	220a      	movs	r2, #10
 80023ee:	0018      	movs	r0, r3
 80023f0:	f00d fe5c 	bl	80100ac <memcmp>
 80023f4:	1e03      	subs	r3, r0, #0
 80023f6:	d1bf      	bne.n	8002378 <dw_main+0x40>

                uint32 resp_tx_time;
                int ret;

                /* Retrieve poll reception timestamp. */
                 poll_rx_ts = get_rx_timestamp_u64();
 80023f8:	f000 f9c6 	bl	8002788 <get_rx_timestamp_u64>
 80023fc:	0002      	movs	r2, r0
 80023fe:	000b      	movs	r3, r1
 8002400:	49b1      	ldr	r1, [pc, #708]	@ (80026c8 <dw_main+0x390>)
 8002402:	600a      	str	r2, [r1, #0]
 8002404:	604b      	str	r3, [r1, #4]

//                 CDC_Transmit_FS((uint8*) &poll_rx_ts, sizeof(poll_rx_ts));

                /* Set send time for response. See NOTE 9 below. */
                 resp_tx_time = (poll_rx_ts + (POLL_RX_TO_RESP_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 8002406:	4bb0      	ldr	r3, [pc, #704]	@ (80026c8 <dw_main+0x390>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	48af      	ldr	r0, [pc, #700]	@ (80026cc <dw_main+0x394>)
 800240e:	2100      	movs	r1, #0
 8002410:	1812      	adds	r2, r2, r0
 8002412:	414b      	adcs	r3, r1
 8002414:	0619      	lsls	r1, r3, #24
 8002416:	0a14      	lsrs	r4, r2, #8
 8002418:	430c      	orrs	r4, r1
 800241a:	0a1d      	lsrs	r5, r3, #8
 800241c:	0023      	movs	r3, r4
 800241e:	657b      	str	r3, [r7, #84]	@ 0x54
                 dwt_setdelayedtrxtime(resp_tx_time);
 8002420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002422:	0018      	movs	r0, r3
 8002424:	f00c fd07 	bl	800ee36 <dwt_setdelayedtrxtime>

                // CDC_Transmit_FS((uint8*)&resp_tx_time, sizeof(resp_tx_time));

                /* Set expected delay and timeout for final message reception. See NOTE 4 and 5 below. */
                 dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS);
 8002428:	2064      	movs	r0, #100	@ 0x64
 800242a:	f00c fc39 	bl	800eca0 <dwt_setrxaftertxdelay>
                 dwt_setrxtimeout(FINAL_RX_TIMEOUT_UUS);
 800242e:	4ba8      	ldr	r3, [pc, #672]	@ (80026d0 <dw_main+0x398>)
 8002430:	0018      	movs	r0, r3
 8002432:	f00c fe07 	bl	800f044 <dwt_setrxtimeout>

                /* Write and send the response message. See NOTE 10 below.*/
                tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8002436:	4ba7      	ldr	r3, [pc, #668]	@ (80026d4 <dw_main+0x39c>)
 8002438:	781a      	ldrb	r2, [r3, #0]
 800243a:	4ba7      	ldr	r3, [pc, #668]	@ (80026d8 <dw_main+0x3a0>)
 800243c:	709a      	strb	r2, [r3, #2]
                dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 800243e:	4ba6      	ldr	r3, [pc, #664]	@ (80026d8 <dw_main+0x3a0>)
 8002440:	2200      	movs	r2, #0
 8002442:	0019      	movs	r1, r3
 8002444:	200f      	movs	r0, #15
 8002446:	f00c f994 	bl	800e772 <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 800244a:	2201      	movs	r2, #1
 800244c:	2100      	movs	r1, #0
 800244e:	200f      	movs	r0, #15
 8002450:	f00c f9b8 	bl	800e7c4 <dwt_writetxfctrl>
                ret = dwt_starttx(DWT_START_TX_DELAYED | DWT_RESPONSE_EXPECTED);
 8002454:	2003      	movs	r0, #3
 8002456:	f00c fcfd 	bl	800ee54 <dwt_starttx>
 800245a:	0003      	movs	r3, r0
 800245c:	653b      	str	r3, [r7, #80]	@ 0x50

                /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 11 below. */
                if (ret == DWT_ERROR)
 800245e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002460:	3301      	adds	r3, #1
 8002462:	d100      	bne.n	8002466 <dw_main+0x12e>
 8002464:	e122      	b.n	80026ac <dw_main+0x374>
                {
                    continue;
                }

                /* Poll for reception of expected "final" frame or error/timeout. See NOTE 8 below. */
                while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8002466:	46c0      	nop			@ (mov r8, r8)
 8002468:	2100      	movs	r1, #0
 800246a:	200f      	movs	r0, #15
 800246c:	f00c fac0 	bl	800e9f0 <dwt_read32bitoffsetreg>
 8002470:	0002      	movs	r2, r0
 8002472:	4b91      	ldr	r3, [pc, #580]	@ (80026b8 <dw_main+0x380>)
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	4b90      	ldr	r3, [pc, #576]	@ (80026b8 <dw_main+0x380>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a90      	ldr	r2, [pc, #576]	@ (80026bc <dw_main+0x384>)
 800247c:	4013      	ands	r3, r2
 800247e:	d0f3      	beq.n	8002468 <dw_main+0x130>
                { };
                // uint32 error = status_reg & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
//                CDC_Transmit_FS((uint8 *) &error, sizeof(status_reg));

                /* Increment frame sequence number after transmission of the response message (modulo 256). */
                frame_seq_nb++;
 8002480:	4b94      	ldr	r3, [pc, #592]	@ (80026d4 <dw_main+0x39c>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	3301      	adds	r3, #1
 8002486:	b2da      	uxtb	r2, r3
 8002488:	4b92      	ldr	r3, [pc, #584]	@ (80026d4 <dw_main+0x39c>)
 800248a:	701a      	strb	r2, [r3, #0]

                if (status_reg & SYS_STATUS_RXFCG)
 800248c:	4b8a      	ldr	r3, [pc, #552]	@ (80026b8 <dw_main+0x380>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	2380      	movs	r3, #128	@ 0x80
 8002492:	01db      	lsls	r3, r3, #7
 8002494:	4013      	ands	r3, r2
 8002496:	d100      	bne.n	800249a <dw_main+0x162>
 8002498:	e0f6      	b.n	8002688 <dw_main+0x350>
                {
                    int i;

                    for (i = 0 ; i < RX_BUF_LEN; i++ )
 800249a:	2300      	movs	r3, #0
 800249c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800249e:	e007      	b.n	80024b0 <dw_main+0x178>
                    {
                        rx_buffer[i] = 0;
 80024a0:	4a87      	ldr	r2, [pc, #540]	@ (80026c0 <dw_main+0x388>)
 80024a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024a4:	18d3      	adds	r3, r2, r3
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]
                    for (i = 0 ; i < RX_BUF_LEN; i++ )
 80024aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024ac:	3301      	adds	r3, #1
 80024ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024b2:	2b17      	cmp	r3, #23
 80024b4:	ddf4      	ble.n	80024a0 <dw_main+0x168>
                    }
//                	CDC_Transmit_FS((uint8 *) &status_reg, sizeof(error));
                    /* Clear good RX frame event and TX frame sent in the DW1000 status register. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG | SYS_STATUS_TXFRS);
 80024b6:	2381      	movs	r3, #129	@ 0x81
 80024b8:	01db      	lsls	r3, r3, #7
 80024ba:	001a      	movs	r2, r3
 80024bc:	2100      	movs	r1, #0
 80024be:	200f      	movs	r0, #15
 80024c0:	f00c fb27 	bl	800eb12 <dwt_write32bitoffsetreg>

                    /* A frame has been received, read it into the local buffer. */
                    frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 80024c4:	2100      	movs	r1, #0
 80024c6:	2010      	movs	r0, #16
 80024c8:	f00c fa92 	bl	800e9f0 <dwt_read32bitoffsetreg>
 80024cc:	0003      	movs	r3, r0
 80024ce:	227f      	movs	r2, #127	@ 0x7f
 80024d0:	4013      	ands	r3, r2
 80024d2:	65bb      	str	r3, [r7, #88]	@ 0x58
                    if (frame_len <= RX_BUF_LEN)
 80024d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024d6:	2b18      	cmp	r3, #24
 80024d8:	d806      	bhi.n	80024e8 <dw_main+0x1b0>
                    {
                        dwt_readrxdata(rx_buffer, frame_len, 0);
 80024da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024dc:	b299      	uxth	r1, r3
 80024de:	4b78      	ldr	r3, [pc, #480]	@ (80026c0 <dw_main+0x388>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	0018      	movs	r0, r3
 80024e4:	f00c f992 	bl	800e80c <dwt_readrxdata>

//                    CDC_Transmit_FS(rx_buffer, sizeof(rx_final_msg));

                    /* Check that the frame is a final message sent by "DS TWR initiator" example.
                     * As the sequence number field of the frame is not used in this example, it can be zeroed to ease the validation of the frame. */
                    rx_buffer[ALL_MSG_SN_IDX] = 0;
 80024e8:	4b75      	ldr	r3, [pc, #468]	@ (80026c0 <dw_main+0x388>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	709a      	strb	r2, [r3, #2]
//                    CDC_Transmit_FS(rx_buffer, ALL_MSG_COMMON_LEN);
//                    CDC_Transmit_FS(rx_final_msg, ALL_MSG_COMMON_LEN);
                    if (memcmp(rx_buffer, rx_final_msg, ALL_MSG_COMMON_LEN) == 0)
 80024ee:	497b      	ldr	r1, [pc, #492]	@ (80026dc <dw_main+0x3a4>)
 80024f0:	4b73      	ldr	r3, [pc, #460]	@ (80026c0 <dw_main+0x388>)
 80024f2:	220a      	movs	r2, #10
 80024f4:	0018      	movs	r0, r3
 80024f6:	f00d fdd9 	bl	80100ac <memcmp>
 80024fa:	1e03      	subs	r3, r0, #0
 80024fc:	d000      	beq.n	8002500 <dw_main+0x1c8>
 80024fe:	e73b      	b.n	8002378 <dw_main+0x40>
                        uint32 poll_rx_ts_32, resp_tx_ts_32, final_rx_ts_32;
                        double Ra, Rb, Da, Db;
                        int64 tof_dtu;

                        /* Retrieve response transmission and final reception timestamps. */
                        resp_tx_ts = get_tx_timestamp_u64();
 8002500:	f000 f908 	bl	8002714 <get_tx_timestamp_u64>
 8002504:	0002      	movs	r2, r0
 8002506:	000b      	movs	r3, r1
 8002508:	4975      	ldr	r1, [pc, #468]	@ (80026e0 <dw_main+0x3a8>)
 800250a:	600a      	str	r2, [r1, #0]
 800250c:	604b      	str	r3, [r1, #4]
                        final_rx_ts = get_rx_timestamp_u64();
 800250e:	f000 f93b 	bl	8002788 <get_rx_timestamp_u64>
 8002512:	0002      	movs	r2, r0
 8002514:	000b      	movs	r3, r1
 8002516:	4973      	ldr	r1, [pc, #460]	@ (80026e4 <dw_main+0x3ac>)
 8002518:	600a      	str	r2, [r1, #0]
 800251a:	604b      	str	r3, [r1, #4]

                        /* Get timestamps embedded in the final message. */
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX], &poll_tx_ts);
 800251c:	230c      	movs	r3, #12
 800251e:	2608      	movs	r6, #8
 8002520:	199b      	adds	r3, r3, r6
 8002522:	19da      	adds	r2, r3, r7
 8002524:	4b70      	ldr	r3, [pc, #448]	@ (80026e8 <dw_main+0x3b0>)
 8002526:	0011      	movs	r1, r2
 8002528:	0018      	movs	r0, r3
 800252a:	f000 f967 	bl	80027fc <final_msg_get_ts>
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_RESP_RX_TS_IDX], &resp_rx_ts);
 800252e:	2308      	movs	r3, #8
 8002530:	199b      	adds	r3, r3, r6
 8002532:	19da      	adds	r2, r3, r7
 8002534:	4b6d      	ldr	r3, [pc, #436]	@ (80026ec <dw_main+0x3b4>)
 8002536:	0011      	movs	r1, r2
 8002538:	0018      	movs	r0, r3
 800253a:	f000 f95f 	bl	80027fc <final_msg_get_ts>
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_FINAL_TX_TS_IDX], &final_tx_ts);
 800253e:	230c      	movs	r3, #12
 8002540:	18fa      	adds	r2, r7, r3
 8002542:	4b6b      	ldr	r3, [pc, #428]	@ (80026f0 <dw_main+0x3b8>)
 8002544:	0011      	movs	r1, r2
 8002546:	0018      	movs	r0, r3
 8002548:	f000 f958 	bl	80027fc <final_msg_get_ts>

                        /* Compute time of flight. 32-bit subtractions give correct answers even if clock has wrapped. See NOTE 12 below. */
                        poll_rx_ts_32 = (uint32)poll_rx_ts;
 800254c:	4b5e      	ldr	r3, [pc, #376]	@ (80026c8 <dw_main+0x390>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	0013      	movs	r3, r2
 8002554:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        resp_tx_ts_32 = (uint32)resp_tx_ts;
 8002556:	4b62      	ldr	r3, [pc, #392]	@ (80026e0 <dw_main+0x3a8>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	0013      	movs	r3, r2
 800255e:	64bb      	str	r3, [r7, #72]	@ 0x48
                        final_rx_ts_32 = (uint32)final_rx_ts;
 8002560:	4b60      	ldr	r3, [pc, #384]	@ (80026e4 <dw_main+0x3ac>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	0013      	movs	r3, r2
 8002568:	647b      	str	r3, [r7, #68]	@ 0x44
                        Ra = (double)(resp_rx_ts - poll_tx_ts);
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	0018      	movs	r0, r3
 8002572:	f7ff fe9f 	bl	80022b4 <__aeabi_ui2d>
 8002576:	0002      	movs	r2, r0
 8002578:	000b      	movs	r3, r1
 800257a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800257c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                        Rb = (double)(final_rx_ts_32 - resp_tx_ts_32);
 800257e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002580:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	0018      	movs	r0, r3
 8002586:	f7ff fe95 	bl	80022b4 <__aeabi_ui2d>
 800258a:	0002      	movs	r2, r0
 800258c:	000b      	movs	r3, r1
 800258e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002590:	637b      	str	r3, [r7, #52]	@ 0x34
                        Da = (double)(final_tx_ts - resp_rx_ts);
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	0018      	movs	r0, r3
 800259a:	f7ff fe8b 	bl	80022b4 <__aeabi_ui2d>
 800259e:	0002      	movs	r2, r0
 80025a0:	000b      	movs	r3, r1
 80025a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80025a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        Db = (double)(resp_tx_ts_32 - poll_rx_ts_32);
 80025a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80025a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	0018      	movs	r0, r3
 80025ae:	f7ff fe81 	bl	80022b4 <__aeabi_ui2d>
 80025b2:	0002      	movs	r2, r0
 80025b4:	000b      	movs	r3, r1
 80025b6:	623a      	str	r2, [r7, #32]
 80025b8:	627b      	str	r3, [r7, #36]	@ 0x24
                        tof_dtu = (int64)((Ra * Rb - Da * Db) / (Ra + Rb + Da + Db));
 80025ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80025c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80025c2:	f7fe ff87 	bl	80014d4 <__aeabi_dmul>
 80025c6:	0002      	movs	r2, r0
 80025c8:	000b      	movs	r3, r1
 80025ca:	603a      	str	r2, [r7, #0]
 80025cc:	607b      	str	r3, [r7, #4]
 80025ce:	6a3a      	ldr	r2, [r7, #32]
 80025d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80025d6:	f7fe ff7d 	bl	80014d4 <__aeabi_dmul>
 80025da:	0002      	movs	r2, r0
 80025dc:	000b      	movs	r3, r1
 80025de:	6838      	ldr	r0, [r7, #0]
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	f7ff fa3f 	bl	8001a64 <__aeabi_dsub>
 80025e6:	0002      	movs	r2, r0
 80025e8:	000b      	movs	r3, r1
 80025ea:	603a      	str	r2, [r7, #0]
 80025ec:	607b      	str	r3, [r7, #4]
 80025ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80025f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80025f6:	f7fd ffc5 	bl	8000584 <__aeabi_dadd>
 80025fa:	0002      	movs	r2, r0
 80025fc:	000b      	movs	r3, r1
 80025fe:	0010      	movs	r0, r2
 8002600:	0019      	movs	r1, r3
 8002602:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002606:	f7fd ffbd 	bl	8000584 <__aeabi_dadd>
 800260a:	0002      	movs	r2, r0
 800260c:	000b      	movs	r3, r1
 800260e:	0010      	movs	r0, r2
 8002610:	0019      	movs	r1, r3
 8002612:	6a3a      	ldr	r2, [r7, #32]
 8002614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002616:	f7fd ffb5 	bl	8000584 <__aeabi_dadd>
 800261a:	0002      	movs	r2, r0
 800261c:	000b      	movs	r3, r1
 800261e:	6838      	ldr	r0, [r7, #0]
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	f7fe fb13 	bl	8000c4c <__aeabi_ddiv>
 8002626:	0002      	movs	r2, r0
 8002628:	000b      	movs	r3, r1
 800262a:	0010      	movs	r0, r2
 800262c:	0019      	movs	r1, r3
 800262e:	f7fd ff59 	bl	80004e4 <__aeabi_d2lz>
 8002632:	0002      	movs	r2, r0
 8002634:	000b      	movs	r3, r1
 8002636:	61ba      	str	r2, [r7, #24]
 8002638:	61fb      	str	r3, [r7, #28]

                        tof = tof_dtu * DWT_TIME_UNITS;
 800263a:	69b8      	ldr	r0, [r7, #24]
 800263c:	69f9      	ldr	r1, [r7, #28]
 800263e:	f7fd ff8b 	bl	8000558 <__aeabi_l2d>
 8002642:	4a2c      	ldr	r2, [pc, #176]	@ (80026f4 <dw_main+0x3bc>)
 8002644:	4b2c      	ldr	r3, [pc, #176]	@ (80026f8 <dw_main+0x3c0>)
 8002646:	f7fe ff45 	bl	80014d4 <__aeabi_dmul>
 800264a:	0002      	movs	r2, r0
 800264c:	000b      	movs	r3, r1
 800264e:	492b      	ldr	r1, [pc, #172]	@ (80026fc <dw_main+0x3c4>)
 8002650:	600a      	str	r2, [r1, #0]
 8002652:	604b      	str	r3, [r1, #4]
                        distance = tof * SPEED_OF_LIGHT;
 8002654:	4b29      	ldr	r3, [pc, #164]	@ (80026fc <dw_main+0x3c4>)
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	6859      	ldr	r1, [r3, #4]
 800265a:	2298      	movs	r2, #152	@ 0x98
 800265c:	0552      	lsls	r2, r2, #21
 800265e:	4b28      	ldr	r3, [pc, #160]	@ (8002700 <dw_main+0x3c8>)
 8002660:	f7fe ff38 	bl	80014d4 <__aeabi_dmul>
 8002664:	0002      	movs	r2, r0
 8002666:	000b      	movs	r3, r1
 8002668:	4926      	ldr	r1, [pc, #152]	@ (8002704 <dw_main+0x3cc>)
 800266a:	600a      	str	r2, [r1, #0]
 800266c:	604b      	str	r3, [r1, #4]

                        /* Display computed distance on LCD. */
                        sprintf(dist_str, "DIST: %3.2f m\r\n", distance);
 800266e:	4b25      	ldr	r3, [pc, #148]	@ (8002704 <dw_main+0x3cc>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4924      	ldr	r1, [pc, #144]	@ (8002708 <dw_main+0x3d0>)
 8002676:	4825      	ldr	r0, [pc, #148]	@ (800270c <dw_main+0x3d4>)
 8002678:	f00d fcac 	bl	800ffd4 <siprintf>
                        // lcd_display_str(dist_str);

                         CDC_Transmit_FS((uint8_t*) dist_str, sizeof(dist_str));
 800267c:	4b23      	ldr	r3, [pc, #140]	@ (800270c <dw_main+0x3d4>)
 800267e:	2112      	movs	r1, #18
 8002680:	0018      	movs	r0, r3
 8002682:	f00b f895 	bl	800d7b0 <CDC_Transmit_FS>
 8002686:	e677      	b.n	8002378 <dw_main+0x40>
                    }
                }
                else
                {
                    /* Clear RX error/timeout events in the DW1000 status register. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8002688:	4b21      	ldr	r3, [pc, #132]	@ (8002710 <dw_main+0x3d8>)
 800268a:	001a      	movs	r2, r3
 800268c:	2100      	movs	r1, #0
 800268e:	200f      	movs	r0, #15
 8002690:	f00c fa3f 	bl	800eb12 <dwt_write32bitoffsetreg>

                    /* Reset RX to properly reinitialise LDE operation. */
                    dwt_rxreset();
 8002694:	f00c fd26 	bl	800f0e4 <dwt_rxreset>
 8002698:	e66e      	b.n	8002378 <dw_main+0x40>
            }
        }
        else
        {
            /* Clear RX error/timeout events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 800269a:	4b1d      	ldr	r3, [pc, #116]	@ (8002710 <dw_main+0x3d8>)
 800269c:	001a      	movs	r2, r3
 800269e:	2100      	movs	r1, #0
 80026a0:	200f      	movs	r0, #15
 80026a2:	f00c fa36 	bl	800eb12 <dwt_write32bitoffsetreg>

            /* Reset RX to properly reinitialise LDE operation. */
            dwt_rxreset();
 80026a6:	f00c fd1d 	bl	800f0e4 <dwt_rxreset>
 80026aa:	e665      	b.n	8002378 <dw_main+0x40>
                    continue;
 80026ac:	46c0      	nop			@ (mov r8, r8)
        dwt_setrxtimeout(0);
 80026ae:	e663      	b.n	8002378 <dw_main+0x40>
 80026b0:	20000000 	.word	0x20000000
 80026b4:	00004034 	.word	0x00004034
 80026b8:	200003e0 	.word	0x200003e0
 80026bc:	2427d000 	.word	0x2427d000
 80026c0:	200003c8 	.word	0x200003c8
 80026c4:	2000000c 	.word	0x2000000c
 80026c8:	200003e8 	.word	0x200003e8
 80026cc:	13880000 	.word	0x13880000
 80026d0:	0000157c 	.word	0x0000157c
 80026d4:	200003c4 	.word	0x200003c4
 80026d8:	20000018 	.word	0x20000018
 80026dc:	20000028 	.word	0x20000028
 80026e0:	200003f0 	.word	0x200003f0
 80026e4:	200003f8 	.word	0x200003f8
 80026e8:	200003d2 	.word	0x200003d2
 80026ec:	200003d6 	.word	0x200003d6
 80026f0:	200003da 	.word	0x200003da
 80026f4:	3bce48fa 	.word	0x3bce48fa
 80026f8:	3db13518 	.word	0x3db13518
 80026fc:	20000400 	.word	0x20000400
 8002700:	41b1dd19 	.word	0x41b1dd19
 8002704:	20000408 	.word	0x20000408
 8002708:	080123c8 	.word	0x080123c8
 800270c:	20000410 	.word	0x20000410
 8002710:	24279000 	.word	0x24279000

08002714 <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_tx_timestamp_u64(void)
{
 8002714:	b5b0      	push	{r4, r5, r7, lr}
 8002716:	b08a      	sub	sp, #40	@ 0x28
 8002718:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 800271a:	2200      	movs	r2, #0
 800271c:	2300      	movs	r3, #0
 800271e:	623a      	str	r2, [r7, #32]
 8002720:	627b      	str	r3, [r7, #36]	@ 0x24
    int i;
    dwt_readtxtimestamp(ts_tab);
 8002722:	2314      	movs	r3, #20
 8002724:	18fb      	adds	r3, r7, r3
 8002726:	0018      	movs	r0, r3
 8002728:	f00c f889 	bl	800e83e <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 800272c:	2304      	movs	r3, #4
 800272e:	61fb      	str	r3, [r7, #28]
 8002730:	e020      	b.n	8002774 <get_tx_timestamp_u64+0x60>
    {
        ts <<= 8;
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	0e1b      	lsrs	r3, r3, #24
 8002736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002738:	0215      	lsls	r5, r2, #8
 800273a:	431d      	orrs	r5, r3
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	021c      	lsls	r4, r3, #8
 8002740:	623c      	str	r4, [r7, #32]
 8002742:	627d      	str	r5, [r7, #36]	@ 0x24
        ts |= ts_tab[i];
 8002744:	2314      	movs	r3, #20
 8002746:	18fa      	adds	r2, r7, r3
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	18d3      	adds	r3, r2, r3
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	2300      	movs	r3, #0
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	68b9      	ldr	r1, [r7, #8]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	0008      	movs	r0, r1
 800275c:	4318      	orrs	r0, r3
 800275e:	6038      	str	r0, [r7, #0]
 8002760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002762:	431a      	orrs	r2, r3
 8002764:	607a      	str	r2, [r7, #4]
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	623a      	str	r2, [r7, #32]
 800276c:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 4; i >= 0; i--)
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	3b01      	subs	r3, #1
 8002772:	61fb      	str	r3, [r7, #28]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	2b00      	cmp	r3, #0
 8002778:	dadb      	bge.n	8002732 <get_tx_timestamp_u64+0x1e>
    }
    return ts;
 800277a:	6a3a      	ldr	r2, [r7, #32]
 800277c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800277e:	0010      	movs	r0, r2
 8002780:	0019      	movs	r1, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	b00a      	add	sp, #40	@ 0x28
 8002786:	bdb0      	pop	{r4, r5, r7, pc}

08002788 <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_rx_timestamp_u64(void)
{
 8002788:	b5b0      	push	{r4, r5, r7, lr}
 800278a:	b08a      	sub	sp, #40	@ 0x28
 800278c:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 800278e:	2200      	movs	r2, #0
 8002790:	2300      	movs	r3, #0
 8002792:	623a      	str	r2, [r7, #32]
 8002794:	627b      	str	r3, [r7, #36]	@ 0x24
    int i;
    dwt_readrxtimestamp(ts_tab);
 8002796:	2314      	movs	r3, #20
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	0018      	movs	r0, r3
 800279c:	f00c f85d 	bl	800e85a <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 80027a0:	2304      	movs	r3, #4
 80027a2:	61fb      	str	r3, [r7, #28]
 80027a4:	e020      	b.n	80027e8 <get_rx_timestamp_u64+0x60>
    {
        ts <<= 8;
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	0e1b      	lsrs	r3, r3, #24
 80027aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027ac:	0215      	lsls	r5, r2, #8
 80027ae:	431d      	orrs	r5, r3
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	021c      	lsls	r4, r3, #8
 80027b4:	623c      	str	r4, [r7, #32]
 80027b6:	627d      	str	r5, [r7, #36]	@ 0x24
        ts |= ts_tab[i];
 80027b8:	2314      	movs	r3, #20
 80027ba:	18fa      	adds	r2, r7, r3
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	18d3      	adds	r3, r2, r3
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	68b9      	ldr	r1, [r7, #8]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	0008      	movs	r0, r1
 80027d0:	4318      	orrs	r0, r3
 80027d2:	6038      	str	r0, [r7, #0]
 80027d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d6:	431a      	orrs	r2, r3
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	623a      	str	r2, [r7, #32]
 80027e0:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 4; i >= 0; i--)
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3b01      	subs	r3, #1
 80027e6:	61fb      	str	r3, [r7, #28]
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	dadb      	bge.n	80027a6 <get_rx_timestamp_u64+0x1e>
    }
    return ts;
 80027ee:	6a3a      	ldr	r2, [r7, #32]
 80027f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80027f2:	0010      	movs	r0, r2
 80027f4:	0019      	movs	r1, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b00a      	add	sp, #40	@ 0x28
 80027fa:	bdb0      	pop	{r4, r5, r7, pc}

080027fc <final_msg_get_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
static void final_msg_get_ts(const uint8 *ts_field, uint32 *ts)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
    int i;
    *ts = 0;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 800280c:	2300      	movs	r3, #0
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	e010      	b.n	8002834 <final_msg_get_ts+0x38>
    {
        *ts += ts_field[i] << (i * 8);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	188a      	adds	r2, r1, r2
 800281c:	7812      	ldrb	r2, [r2, #0]
 800281e:	0011      	movs	r1, r2
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	00d2      	lsls	r2, r2, #3
 8002824:	4091      	lsls	r1, r2
 8002826:	000a      	movs	r2, r1
 8002828:	189a      	adds	r2, r3, r2
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	3301      	adds	r3, #1
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2b03      	cmp	r3, #3
 8002838:	ddeb      	ble.n	8002812 <final_msg_get_ts+0x16>
    }
}
 800283a:	46c0      	nop			@ (mov r8, r8)
 800283c:	46c0      	nop			@ (mov r8, r8)
 800283e:	46bd      	mov	sp, r7
 8002840:	b004      	add	sp, #16
 8002842:	bd80      	pop	{r7, pc}

08002844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002844:	b5b0      	push	{r4, r5, r7, lr}
 8002846:	b0a0      	sub	sp, #128	@ 0x80
 8002848:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800284a:	f000 ff05 	bl	8003658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800284e:	f000 f8d3 	bl	80029f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002852:	f000 fac1 	bl	8002dd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002856:	f000 faa1 	bl	8002d9c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800285a:	f000 fa6b 	bl	8002d34 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800285e:	f000 f997 	bl	8002b90 <MX_SPI1_Init>
  MX_ADC_Init();
 8002862:	f000 f939 	bl	8002ad8 <MX_ADC_Init>
  MX_SPI2_Init();
 8002866:	f000 f9d1 	bl	8002c0c <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 800286a:	f00a ff1d 	bl	800d6a8 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 800286e:	f000 fa0b 	bl	8002c88 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_SET);
 8002872:	2390      	movs	r3, #144	@ 0x90
 8002874:	05db      	lsls	r3, r3, #23
 8002876:	2201      	movs	r2, #1
 8002878:	2101      	movs	r1, #1
 800287a:	0018      	movs	r0, r3
 800287c:	f001 fe7d 	bl	800457a <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8002880:	2064      	movs	r0, #100	@ 0x64
 8002882:	f000 ff4d 	bl	8003720 <HAL_Delay>
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_RESET);
 8002886:	2390      	movs	r3, #144	@ 0x90
 8002888:	05db      	lsls	r3, r3, #23
 800288a:	2200      	movs	r2, #0
 800288c:	2101      	movs	r1, #1
 800288e:	0018      	movs	r0, r3
 8002890:	f001 fe73 	bl	800457a <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8002894:	2064      	movs	r0, #100	@ 0x64
 8002896:	f000 ff43 	bl	8003720 <HAL_Delay>
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_SET);
 800289a:	2390      	movs	r3, #144	@ 0x90
 800289c:	05db      	lsls	r3, r3, #23
 800289e:	2201      	movs	r2, #1
 80028a0:	2101      	movs	r1, #1
 80028a2:	0018      	movs	r0, r3
 80028a4:	f001 fe69 	bl	800457a <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80028a8:	2064      	movs	r0, #100	@ 0x64
 80028aa:	f000 ff39 	bl	8003720 <HAL_Delay>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_rx_buf, UART_RX_BUF_SIZE);
 80028ae:	2380      	movs	r3, #128	@ 0x80
 80028b0:	00da      	lsls	r2, r3, #3
 80028b2:	4946      	ldr	r1, [pc, #280]	@ (80029cc <main+0x188>)
 80028b4:	4b46      	ldr	r3, [pc, #280]	@ (80029d0 <main+0x18c>)
 80028b6:	0018      	movs	r0, r3
 80028b8:	f007 f88b 	bl	80099d2 <HAL_UARTEx_ReceiveToIdle_DMA>

  char tx_msg4[] = "AT+DR=US915\r\n"; 
 80028bc:	256c      	movs	r5, #108	@ 0x6c
 80028be:	197b      	adds	r3, r7, r5
 80028c0:	4a44      	ldr	r2, [pc, #272]	@ (80029d4 <main+0x190>)
 80028c2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028c4:	c313      	stmia	r3!, {r0, r1, r4}
 80028c6:	8812      	ldrh	r2, [r2, #0]
 80028c8:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit_IT(&huart1, (uint8_t*) &tx_msg4, sizeof(tx_msg4));
 80028ca:	1979      	adds	r1, r7, r5
 80028cc:	4b40      	ldr	r3, [pc, #256]	@ (80029d0 <main+0x18c>)
 80028ce:	220e      	movs	r2, #14
 80028d0:	0018      	movs	r0, r3
 80028d2:	f005 fe1f 	bl	8008514 <HAL_UART_Transmit_IT>
  HAL_Delay(100);
 80028d6:	2064      	movs	r0, #100	@ 0x64
 80028d8:	f000 ff22 	bl	8003720 <HAL_Delay>

  char tx_msg5[] = "AT+CH\r\n"; 
 80028dc:	2464      	movs	r4, #100	@ 0x64
 80028de:	193b      	adds	r3, r7, r4
 80028e0:	4a3d      	ldr	r2, [pc, #244]	@ (80029d8 <main+0x194>)
 80028e2:	ca03      	ldmia	r2!, {r0, r1}
 80028e4:	c303      	stmia	r3!, {r0, r1}
  HAL_UART_Transmit_IT(&huart1, (uint8_t*) &tx_msg5, sizeof(tx_msg5));
 80028e6:	1939      	adds	r1, r7, r4
 80028e8:	4b39      	ldr	r3, [pc, #228]	@ (80029d0 <main+0x18c>)
 80028ea:	2208      	movs	r2, #8
 80028ec:	0018      	movs	r0, r3
 80028ee:	f005 fe11 	bl	8008514 <HAL_UART_Transmit_IT>
  HAL_Delay(100);
 80028f2:	2064      	movs	r0, #100	@ 0x64
 80028f4:	f000 ff14 	bl	8003720 <HAL_Delay>

  for(int i = 0; i < 72; i++)
 80028f8:	2300      	movs	r3, #0
 80028fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80028fc:	e018      	b.n	8002930 <main+0xec>
  {
    if(i < 8 || i > 72)
 80028fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002900:	2b07      	cmp	r3, #7
 8002902:	dd02      	ble.n	800290a <main+0xc6>
 8002904:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002906:	2b48      	cmp	r3, #72	@ 0x48
 8002908:	dd0c      	ble.n	8002924 <main+0xe0>
    {
      char tx_msg5_[14];
      sprintf(tx_msg5_, "AT+CH=%d, OFF", i);
 800290a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800290c:	4933      	ldr	r1, [pc, #204]	@ (80029dc <main+0x198>)
 800290e:	240c      	movs	r4, #12
 8002910:	193b      	adds	r3, r7, r4
 8002912:	0018      	movs	r0, r3
 8002914:	f00d fb5e 	bl	800ffd4 <siprintf>
      HAL_UART_Transmit_IT(&huart1, (uint8_t*) &tx_msg5_, sizeof(tx_msg5_));
 8002918:	1939      	adds	r1, r7, r4
 800291a:	4b2d      	ldr	r3, [pc, #180]	@ (80029d0 <main+0x18c>)
 800291c:	220e      	movs	r2, #14
 800291e:	0018      	movs	r0, r3
 8002920:	f005 fdf8 	bl	8008514 <HAL_UART_Transmit_IT>
    }
    HAL_Delay(50);
 8002924:	2032      	movs	r0, #50	@ 0x32
 8002926:	f000 fefb 	bl	8003720 <HAL_Delay>
  for(int i = 0; i < 72; i++)
 800292a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800292c:	3301      	adds	r3, #1
 800292e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002930:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002932:	2b47      	cmp	r3, #71	@ 0x47
 8002934:	dde3      	ble.n	80028fe <main+0xba>
  }

  char tx_msg0[] = "AT+KEY=APPKEY,\"B8AC2B18AE0F96A0FF83A63E33D0BA15\"\r\n"; 
 8002936:	2430      	movs	r4, #48	@ 0x30
 8002938:	193a      	adds	r2, r7, r4
 800293a:	4b29      	ldr	r3, [pc, #164]	@ (80029e0 <main+0x19c>)
 800293c:	0010      	movs	r0, r2
 800293e:	0019      	movs	r1, r3
 8002940:	2333      	movs	r3, #51	@ 0x33
 8002942:	001a      	movs	r2, r3
 8002944:	f00d fc52 	bl	80101ec <memcpy>
  HAL_UART_Transmit_IT(&huart1, (uint8_t*) &tx_msg0, sizeof(tx_msg0));
 8002948:	1939      	adds	r1, r7, r4
 800294a:	4b21      	ldr	r3, [pc, #132]	@ (80029d0 <main+0x18c>)
 800294c:	2233      	movs	r2, #51	@ 0x33
 800294e:	0018      	movs	r0, r3
 8002950:	f005 fde0 	bl	8008514 <HAL_UART_Transmit_IT>
  HAL_Delay(500);
 8002954:	23fa      	movs	r3, #250	@ 0xfa
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	0018      	movs	r0, r3
 800295a:	f000 fee1 	bl	8003720 <HAL_Delay>

  char tx_msg3[] = "AT+MODE= LWOTAA\r\n";
 800295e:	251c      	movs	r5, #28
 8002960:	197b      	adds	r3, r7, r5
 8002962:	4a20      	ldr	r2, [pc, #128]	@ (80029e4 <main+0x1a0>)
 8002964:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002966:	c313      	stmia	r3!, {r0, r1, r4}
 8002968:	6811      	ldr	r1, [r2, #0]
 800296a:	6019      	str	r1, [r3, #0]
 800296c:	8892      	ldrh	r2, [r2, #4]
 800296e:	809a      	strh	r2, [r3, #4]
  HAL_UART_Transmit_IT(&huart1, (uint8_t*) &tx_msg3, sizeof(tx_msg3));
 8002970:	1979      	adds	r1, r7, r5
 8002972:	4b17      	ldr	r3, [pc, #92]	@ (80029d0 <main+0x18c>)
 8002974:	2212      	movs	r2, #18
 8002976:	0018      	movs	r0, r3
 8002978:	f005 fdcc 	bl	8008514 <HAL_UART_Transmit_IT>
  HAL_Delay(100);
 800297c:	2064      	movs	r0, #100	@ 0x64
 800297e:	f000 fecf 	bl	8003720 <HAL_Delay>

  while(!joined)
 8002982:	e013      	b.n	80029ac <main+0x168>
  {

    char tx_msg8[] = "AT+JOIN\r\n"; 
 8002984:	003b      	movs	r3, r7
 8002986:	4a18      	ldr	r2, [pc, #96]	@ (80029e8 <main+0x1a4>)
 8002988:	ca03      	ldmia	r2!, {r0, r1}
 800298a:	c303      	stmia	r3!, {r0, r1}
 800298c:	8812      	ldrh	r2, [r2, #0]
 800298e:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit_IT(&huart1, (uint8_t*) &tx_msg8, sizeof(tx_msg8));
 8002990:	0039      	movs	r1, r7
 8002992:	4b0f      	ldr	r3, [pc, #60]	@ (80029d0 <main+0x18c>)
 8002994:	220a      	movs	r2, #10
 8002996:	0018      	movs	r0, r3
 8002998:	f005 fdbc 	bl	8008514 <HAL_UART_Transmit_IT>

    CDC_Transmit_FS("JOIN ATTEMPT\r\n", 14);
 800299c:	4b13      	ldr	r3, [pc, #76]	@ (80029ec <main+0x1a8>)
 800299e:	210e      	movs	r1, #14
 80029a0:	0018      	movs	r0, r3
 80029a2:	f00a ff05 	bl	800d7b0 <CDC_Transmit_FS>

    HAL_Delay(100);
 80029a6:	2064      	movs	r0, #100	@ 0x64
 80029a8:	f000 feba 	bl	8003720 <HAL_Delay>
  while(!joined)
 80029ac:	4b10      	ldr	r3, [pc, #64]	@ (80029f0 <main+0x1ac>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2201      	movs	r2, #1
 80029b2:	4053      	eors	r3, r2
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1e4      	bne.n	8002984 <main+0x140>

  }

  CDC_Transmit_FS("JOIN SUCCESS\r\n", 14);
 80029ba:	4b0e      	ldr	r3, [pc, #56]	@ (80029f4 <main+0x1b0>)
 80029bc:	210e      	movs	r1, #14
 80029be:	0018      	movs	r0, r3
 80029c0:	f00a fef6 	bl	800d7b0 <CDC_Transmit_FS>

  dw_main();
 80029c4:	f7ff fcb8 	bl	8002338 <dw_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80029c8:	46c0      	nop			@ (mov r8, r8)
 80029ca:	e7fd      	b.n	80029c8 <main+0x184>
 80029cc:	20000670 	.word	0x20000670
 80029d0:	20000574 	.word	0x20000574
 80029d4:	08012408 	.word	0x08012408
 80029d8:	08012418 	.word	0x08012418
 80029dc:	080123d8 	.word	0x080123d8
 80029e0:	08012420 	.word	0x08012420
 80029e4:	08012454 	.word	0x08012454
 80029e8:	08012468 	.word	0x08012468
 80029ec:	080123e8 	.word	0x080123e8
 80029f0:	20000040 	.word	0x20000040
 80029f4:	080123f8 	.word	0x080123f8

080029f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	b099      	sub	sp, #100	@ 0x64
 80029fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029fe:	242c      	movs	r4, #44	@ 0x2c
 8002a00:	193b      	adds	r3, r7, r4
 8002a02:	0018      	movs	r0, r3
 8002a04:	2334      	movs	r3, #52	@ 0x34
 8002a06:	001a      	movs	r2, r3
 8002a08:	2100      	movs	r1, #0
 8002a0a:	f00d fb5d 	bl	80100c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a0e:	231c      	movs	r3, #28
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	0018      	movs	r0, r3
 8002a14:	2310      	movs	r3, #16
 8002a16:	001a      	movs	r2, r3
 8002a18:	2100      	movs	r1, #0
 8002a1a:	f00d fb55 	bl	80100c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a1e:	003b      	movs	r3, r7
 8002a20:	0018      	movs	r0, r3
 8002a22:	231c      	movs	r3, #28
 8002a24:	001a      	movs	r2, r3
 8002a26:	2100      	movs	r1, #0
 8002a28:	f00d fb4e 	bl	80100c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8002a2c:	0021      	movs	r1, r4
 8002a2e:	187b      	adds	r3, r7, r1
 8002a30:	2232      	movs	r2, #50	@ 0x32
 8002a32:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a34:	187b      	adds	r3, r7, r1
 8002a36:	2201      	movs	r2, #1
 8002a38:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002a3a:	187b      	adds	r3, r7, r1
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002a40:	187b      	adds	r3, r7, r1
 8002a42:	2201      	movs	r2, #1
 8002a44:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a46:	187b      	adds	r3, r7, r1
 8002a48:	2210      	movs	r2, #16
 8002a4a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002a4c:	187b      	adds	r3, r7, r1
 8002a4e:	2210      	movs	r2, #16
 8002a50:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a52:	187b      	adds	r3, r7, r1
 8002a54:	2202      	movs	r2, #2
 8002a56:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	2280      	movs	r2, #128	@ 0x80
 8002a5c:	0212      	lsls	r2, r2, #8
 8002a5e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a60:	187b      	adds	r3, r7, r1
 8002a62:	22e0      	movs	r2, #224	@ 0xe0
 8002a64:	0352      	lsls	r2, r2, #13
 8002a66:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8002a68:	187b      	adds	r3, r7, r1
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a6e:	187b      	adds	r3, r7, r1
 8002a70:	0018      	movs	r0, r3
 8002a72:	f003 fbfd 	bl	8006270 <HAL_RCC_OscConfig>
 8002a76:	1e03      	subs	r3, r0, #0
 8002a78:	d001      	beq.n	8002a7e <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002a7a:	f000 fae1 	bl	8003040 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a7e:	211c      	movs	r1, #28
 8002a80:	187b      	adds	r3, r7, r1
 8002a82:	2207      	movs	r2, #7
 8002a84:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a86:	187b      	adds	r3, r7, r1
 8002a88:	2202      	movs	r2, #2
 8002a8a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a8c:	187b      	adds	r3, r7, r1
 8002a8e:	2200      	movs	r2, #0
 8002a90:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a92:	187b      	adds	r3, r7, r1
 8002a94:	2200      	movs	r2, #0
 8002a96:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a98:	187b      	adds	r3, r7, r1
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f003 ff6d 	bl	800697c <HAL_RCC_ClockConfig>
 8002aa2:	1e03      	subs	r3, r0, #0
 8002aa4:	d001      	beq.n	8002aaa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002aa6:	f000 facb 	bl	8003040 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 8002aaa:	003b      	movs	r3, r7
 8002aac:	4a09      	ldr	r2, [pc, #36]	@ (8002ad4 <SystemClock_Config+0xdc>)
 8002aae:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002ab0:	003b      	movs	r3, r7
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002ab6:	003b      	movs	r3, r7
 8002ab8:	2200      	movs	r2, #0
 8002aba:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002abc:	003b      	movs	r3, r7
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f004 f8c8 	bl	8006c54 <HAL_RCCEx_PeriphCLKConfig>
 8002ac4:	1e03      	subs	r3, r0, #0
 8002ac6:	d001      	beq.n	8002acc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002ac8:	f000 faba 	bl	8003040 <Error_Handler>
  }
}
 8002acc:	46c0      	nop			@ (mov r8, r8)
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	b019      	add	sp, #100	@ 0x64
 8002ad2:	bd90      	pop	{r4, r7, pc}
 8002ad4:	00020001 	.word	0x00020001

08002ad8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ade:	1d3b      	adds	r3, r7, #4
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	230c      	movs	r3, #12
 8002ae4:	001a      	movs	r2, r3
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	f00d faee 	bl	80100c8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002aec:	4b26      	ldr	r3, [pc, #152]	@ (8002b88 <MX_ADC_Init+0xb0>)
 8002aee:	4a27      	ldr	r2, [pc, #156]	@ (8002b8c <MX_ADC_Init+0xb4>)
 8002af0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002af2:	4b25      	ldr	r3, [pc, #148]	@ (8002b88 <MX_ADC_Init+0xb0>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002af8:	4b23      	ldr	r3, [pc, #140]	@ (8002b88 <MX_ADC_Init+0xb0>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002afe:	4b22      	ldr	r3, [pc, #136]	@ (8002b88 <MX_ADC_Init+0xb0>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002b04:	4b20      	ldr	r3, [pc, #128]	@ (8002b88 <MX_ADC_Init+0xb0>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b0a:	4b1f      	ldr	r3, [pc, #124]	@ (8002b88 <MX_ADC_Init+0xb0>)
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002b10:	4b1d      	ldr	r3, [pc, #116]	@ (8002b88 <MX_ADC_Init+0xb0>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002b16:	4b1c      	ldr	r3, [pc, #112]	@ (8002b88 <MX_ADC_Init+0xb0>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002b88 <MX_ADC_Init+0xb0>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002b22:	4b19      	ldr	r3, [pc, #100]	@ (8002b88 <MX_ADC_Init+0xb0>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b28:	4b17      	ldr	r3, [pc, #92]	@ (8002b88 <MX_ADC_Init+0xb0>)
 8002b2a:	22c2      	movs	r2, #194	@ 0xc2
 8002b2c:	32ff      	adds	r2, #255	@ 0xff
 8002b2e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b30:	4b15      	ldr	r3, [pc, #84]	@ (8002b88 <MX_ADC_Init+0xb0>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002b36:	4b14      	ldr	r3, [pc, #80]	@ (8002b88 <MX_ADC_Init+0xb0>)
 8002b38:	2224      	movs	r2, #36	@ 0x24
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002b3e:	4b12      	ldr	r3, [pc, #72]	@ (8002b88 <MX_ADC_Init+0xb0>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002b44:	4b10      	ldr	r3, [pc, #64]	@ (8002b88 <MX_ADC_Init+0xb0>)
 8002b46:	0018      	movs	r0, r3
 8002b48:	f000 fe0e 	bl	8003768 <HAL_ADC_Init>
 8002b4c:	1e03      	subs	r3, r0, #0
 8002b4e:	d001      	beq.n	8002b54 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002b50:	f000 fa76 	bl	8003040 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	2208      	movs	r2, #8
 8002b58:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002b5a:	1d3b      	adds	r3, r7, #4
 8002b5c:	2280      	movs	r2, #128	@ 0x80
 8002b5e:	0152      	lsls	r2, r2, #5
 8002b60:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002b62:	1d3b      	adds	r3, r7, #4
 8002b64:	2280      	movs	r2, #128	@ 0x80
 8002b66:	0552      	lsls	r2, r2, #21
 8002b68:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002b6a:	1d3a      	adds	r2, r7, #4
 8002b6c:	4b06      	ldr	r3, [pc, #24]	@ (8002b88 <MX_ADC_Init+0xb0>)
 8002b6e:	0011      	movs	r1, r2
 8002b70:	0018      	movs	r0, r3
 8002b72:	f000 ff39 	bl	80039e8 <HAL_ADC_ConfigChannel>
 8002b76:	1e03      	subs	r3, r0, #0
 8002b78:	d001      	beq.n	8002b7e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002b7a:	f000 fa61 	bl	8003040 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002b7e:	46c0      	nop			@ (mov r8, r8)
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b004      	add	sp, #16
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	46c0      	nop			@ (mov r8, r8)
 8002b88:	20000424 	.word	0x20000424
 8002b8c:	40012400 	.word	0x40012400

08002b90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b94:	4b1b      	ldr	r3, [pc, #108]	@ (8002c04 <MX_SPI1_Init+0x74>)
 8002b96:	4a1c      	ldr	r2, [pc, #112]	@ (8002c08 <MX_SPI1_Init+0x78>)
 8002b98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002c04 <MX_SPI1_Init+0x74>)
 8002b9c:	2282      	movs	r2, #130	@ 0x82
 8002b9e:	0052      	lsls	r2, r2, #1
 8002ba0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ba2:	4b18      	ldr	r3, [pc, #96]	@ (8002c04 <MX_SPI1_Init+0x74>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ba8:	4b16      	ldr	r3, [pc, #88]	@ (8002c04 <MX_SPI1_Init+0x74>)
 8002baa:	22e0      	movs	r2, #224	@ 0xe0
 8002bac:	00d2      	lsls	r2, r2, #3
 8002bae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bb0:	4b14      	ldr	r3, [pc, #80]	@ (8002c04 <MX_SPI1_Init+0x74>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bb6:	4b13      	ldr	r3, [pc, #76]	@ (8002c04 <MX_SPI1_Init+0x74>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bbc:	4b11      	ldr	r3, [pc, #68]	@ (8002c04 <MX_SPI1_Init+0x74>)
 8002bbe:	2280      	movs	r2, #128	@ 0x80
 8002bc0:	0092      	lsls	r2, r2, #2
 8002bc2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c04 <MX_SPI1_Init+0x74>)
 8002bc6:	2208      	movs	r2, #8
 8002bc8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bca:	4b0e      	ldr	r3, [pc, #56]	@ (8002c04 <MX_SPI1_Init+0x74>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c04 <MX_SPI1_Init+0x74>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8002c04 <MX_SPI1_Init+0x74>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002bdc:	4b09      	ldr	r3, [pc, #36]	@ (8002c04 <MX_SPI1_Init+0x74>)
 8002bde:	2207      	movs	r2, #7
 8002be0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002be2:	4b08      	ldr	r3, [pc, #32]	@ (8002c04 <MX_SPI1_Init+0x74>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002be8:	4b06      	ldr	r3, [pc, #24]	@ (8002c04 <MX_SPI1_Init+0x74>)
 8002bea:	2208      	movs	r2, #8
 8002bec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bee:	4b05      	ldr	r3, [pc, #20]	@ (8002c04 <MX_SPI1_Init+0x74>)
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f004 f92d 	bl	8006e50 <HAL_SPI_Init>
 8002bf6:	1e03      	subs	r3, r0, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002bfa:	f000 fa21 	bl	8003040 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002bfe:	46c0      	nop			@ (mov r8, r8)
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000464 	.word	0x20000464
 8002c08:	40013000 	.word	0x40013000

08002c0c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002c10:	4b1b      	ldr	r3, [pc, #108]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c12:	4a1c      	ldr	r2, [pc, #112]	@ (8002c84 <MX_SPI2_Init+0x78>)
 8002c14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c16:	4b1a      	ldr	r3, [pc, #104]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c18:	2282      	movs	r2, #130	@ 0x82
 8002c1a:	0052      	lsls	r2, r2, #1
 8002c1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002c1e:	4b18      	ldr	r3, [pc, #96]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002c24:	4b16      	ldr	r3, [pc, #88]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c26:	22c0      	movs	r2, #192	@ 0xc0
 8002c28:	0092      	lsls	r2, r2, #2
 8002c2a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c2c:	4b14      	ldr	r3, [pc, #80]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c32:	4b13      	ldr	r3, [pc, #76]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002c38:	4b11      	ldr	r3, [pc, #68]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c3a:	2280      	movs	r2, #128	@ 0x80
 8002c3c:	02d2      	lsls	r2, r2, #11
 8002c3e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c40:	4b0f      	ldr	r3, [pc, #60]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c46:	4b0e      	ldr	r3, [pc, #56]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c52:	4b0b      	ldr	r3, [pc, #44]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002c58:	4b09      	ldr	r3, [pc, #36]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c5a:	2207      	movs	r2, #7
 8002c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c5e:	4b08      	ldr	r3, [pc, #32]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c64:	4b06      	ldr	r3, [pc, #24]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c66:	2208      	movs	r2, #8
 8002c68:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c6a:	4b05      	ldr	r3, [pc, #20]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f004 f8ef 	bl	8006e50 <HAL_SPI_Init>
 8002c72:	1e03      	subs	r3, r0, #0
 8002c74:	d001      	beq.n	8002c7a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002c76:	f000 f9e3 	bl	8003040 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002c7a:	46c0      	nop			@ (mov r8, r8)
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	200004c8 	.word	0x200004c8
 8002c84:	40003800 	.word	0x40003800

08002c88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c8e:	2308      	movs	r3, #8
 8002c90:	18fb      	adds	r3, r7, r3
 8002c92:	0018      	movs	r0, r3
 8002c94:	2310      	movs	r3, #16
 8002c96:	001a      	movs	r2, r3
 8002c98:	2100      	movs	r1, #0
 8002c9a:	f00d fa15 	bl	80100c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c9e:	003b      	movs	r3, r7
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	001a      	movs	r2, r3
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	f00d fa0e 	bl	80100c8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002cac:	4b1f      	ldr	r3, [pc, #124]	@ (8002d2c <MX_TIM3_Init+0xa4>)
 8002cae:	4a20      	ldr	r2, [pc, #128]	@ (8002d30 <MX_TIM3_Init+0xa8>)
 8002cb0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 8002cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d2c <MX_TIM3_Init+0xa4>)
 8002cb4:	22f4      	movs	r2, #244	@ 0xf4
 8002cb6:	32ff      	adds	r2, #255	@ 0xff
 8002cb8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cba:	4b1c      	ldr	r3, [pc, #112]	@ (8002d2c <MX_TIM3_Init+0xa4>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 360-1;
 8002cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8002d2c <MX_TIM3_Init+0xa4>)
 8002cc2:	2268      	movs	r2, #104	@ 0x68
 8002cc4:	32ff      	adds	r2, #255	@ 0xff
 8002cc6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cc8:	4b18      	ldr	r3, [pc, #96]	@ (8002d2c <MX_TIM3_Init+0xa4>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cce:	4b17      	ldr	r3, [pc, #92]	@ (8002d2c <MX_TIM3_Init+0xa4>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002cd4:	4b15      	ldr	r3, [pc, #84]	@ (8002d2c <MX_TIM3_Init+0xa4>)
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f004 ffe6 	bl	8007ca8 <HAL_TIM_Base_Init>
 8002cdc:	1e03      	subs	r3, r0, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8002ce0:	f000 f9ae 	bl	8003040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ce4:	2108      	movs	r1, #8
 8002ce6:	187b      	adds	r3, r7, r1
 8002ce8:	2280      	movs	r2, #128	@ 0x80
 8002cea:	0152      	lsls	r2, r2, #5
 8002cec:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002cee:	187a      	adds	r2, r7, r1
 8002cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8002d2c <MX_TIM3_Init+0xa4>)
 8002cf2:	0011      	movs	r1, r2
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f005 f915 	bl	8007f24 <HAL_TIM_ConfigClockSource>
 8002cfa:	1e03      	subs	r3, r0, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002cfe:	f000 f99f 	bl	8003040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d02:	003b      	movs	r3, r7
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d08:	003b      	movs	r3, r7
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d0e:	003a      	movs	r2, r7
 8002d10:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <MX_TIM3_Init+0xa4>)
 8002d12:	0011      	movs	r1, r2
 8002d14:	0018      	movs	r0, r3
 8002d16:	f005 fb29 	bl	800836c <HAL_TIMEx_MasterConfigSynchronization>
 8002d1a:	1e03      	subs	r3, r0, #0
 8002d1c:	d001      	beq.n	8002d22 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002d1e:	f000 f98f 	bl	8003040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002d22:	46c0      	nop			@ (mov r8, r8)
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b006      	add	sp, #24
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	46c0      	nop			@ (mov r8, r8)
 8002d2c:	2000052c 	.word	0x2000052c
 8002d30:	40000400 	.word	0x40000400

08002d34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d38:	4b16      	ldr	r3, [pc, #88]	@ (8002d94 <MX_USART1_UART_Init+0x60>)
 8002d3a:	4a17      	ldr	r2, [pc, #92]	@ (8002d98 <MX_USART1_UART_Init+0x64>)
 8002d3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002d3e:	4b15      	ldr	r3, [pc, #84]	@ (8002d94 <MX_USART1_UART_Init+0x60>)
 8002d40:	2296      	movs	r2, #150	@ 0x96
 8002d42:	0192      	lsls	r2, r2, #6
 8002d44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d46:	4b13      	ldr	r3, [pc, #76]	@ (8002d94 <MX_USART1_UART_Init+0x60>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d4c:	4b11      	ldr	r3, [pc, #68]	@ (8002d94 <MX_USART1_UART_Init+0x60>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d52:	4b10      	ldr	r3, [pc, #64]	@ (8002d94 <MX_USART1_UART_Init+0x60>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d58:	4b0e      	ldr	r3, [pc, #56]	@ (8002d94 <MX_USART1_UART_Init+0x60>)
 8002d5a:	220c      	movs	r2, #12
 8002d5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d94 <MX_USART1_UART_Init+0x60>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d64:	4b0b      	ldr	r3, [pc, #44]	@ (8002d94 <MX_USART1_UART_Init+0x60>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d94 <MX_USART1_UART_Init+0x60>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8002d70:	4b08      	ldr	r3, [pc, #32]	@ (8002d94 <MX_USART1_UART_Init+0x60>)
 8002d72:	2210      	movs	r2, #16
 8002d74:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002d76:	4b07      	ldr	r3, [pc, #28]	@ (8002d94 <MX_USART1_UART_Init+0x60>)
 8002d78:	2280      	movs	r2, #128	@ 0x80
 8002d7a:	0152      	lsls	r2, r2, #5
 8002d7c:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d7e:	4b05      	ldr	r3, [pc, #20]	@ (8002d94 <MX_USART1_UART_Init+0x60>)
 8002d80:	0018      	movs	r0, r3
 8002d82:	f005 fb61 	bl	8008448 <HAL_UART_Init>
 8002d86:	1e03      	subs	r3, r0, #0
 8002d88:	d001      	beq.n	8002d8e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002d8a:	f000 f959 	bl	8003040 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d8e:	46c0      	nop			@ (mov r8, r8)
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	20000574 	.word	0x20000574
 8002d98:	40013800 	.word	0x40013800

08002d9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002da2:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd4 <MX_DMA_Init+0x38>)
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd4 <MX_DMA_Init+0x38>)
 8002da8:	2101      	movs	r1, #1
 8002daa:	430a      	orrs	r2, r1
 8002dac:	615a      	str	r2, [r3, #20]
 8002dae:	4b09      	ldr	r3, [pc, #36]	@ (8002dd4 <MX_DMA_Init+0x38>)
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	2201      	movs	r2, #1
 8002db4:	4013      	ands	r3, r2
 8002db6:	607b      	str	r3, [r7, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	200a      	movs	r0, #10
 8002dc0:	f000 ffee 	bl	8003da0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002dc4:	200a      	movs	r0, #10
 8002dc6:	f001 f800 	bl	8003dca <HAL_NVIC_EnableIRQ>

}
 8002dca:	46c0      	nop			@ (mov r8, r8)
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b002      	add	sp, #8
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	46c0      	nop			@ (mov r8, r8)
 8002dd4:	40021000 	.word	0x40021000

08002dd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dd8:	b590      	push	{r4, r7, lr}
 8002dda:	b089      	sub	sp, #36	@ 0x24
 8002ddc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dde:	240c      	movs	r4, #12
 8002de0:	193b      	adds	r3, r7, r4
 8002de2:	0018      	movs	r0, r3
 8002de4:	2314      	movs	r3, #20
 8002de6:	001a      	movs	r2, r3
 8002de8:	2100      	movs	r1, #0
 8002dea:	f00d f96d 	bl	80100c8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dee:	4b5b      	ldr	r3, [pc, #364]	@ (8002f5c <MX_GPIO_Init+0x184>)
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	4b5a      	ldr	r3, [pc, #360]	@ (8002f5c <MX_GPIO_Init+0x184>)
 8002df4:	2180      	movs	r1, #128	@ 0x80
 8002df6:	03c9      	lsls	r1, r1, #15
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	615a      	str	r2, [r3, #20]
 8002dfc:	4b57      	ldr	r3, [pc, #348]	@ (8002f5c <MX_GPIO_Init+0x184>)
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	2380      	movs	r3, #128	@ 0x80
 8002e02:	03db      	lsls	r3, r3, #15
 8002e04:	4013      	ands	r3, r2
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e0a:	4b54      	ldr	r3, [pc, #336]	@ (8002f5c <MX_GPIO_Init+0x184>)
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	4b53      	ldr	r3, [pc, #332]	@ (8002f5c <MX_GPIO_Init+0x184>)
 8002e10:	2180      	movs	r1, #128	@ 0x80
 8002e12:	0289      	lsls	r1, r1, #10
 8002e14:	430a      	orrs	r2, r1
 8002e16:	615a      	str	r2, [r3, #20]
 8002e18:	4b50      	ldr	r3, [pc, #320]	@ (8002f5c <MX_GPIO_Init+0x184>)
 8002e1a:	695a      	ldr	r2, [r3, #20]
 8002e1c:	2380      	movs	r3, #128	@ 0x80
 8002e1e:	029b      	lsls	r3, r3, #10
 8002e20:	4013      	ands	r3, r2
 8002e22:	607b      	str	r3, [r7, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e26:	4b4d      	ldr	r3, [pc, #308]	@ (8002f5c <MX_GPIO_Init+0x184>)
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	4b4c      	ldr	r3, [pc, #304]	@ (8002f5c <MX_GPIO_Init+0x184>)
 8002e2c:	2180      	movs	r1, #128	@ 0x80
 8002e2e:	02c9      	lsls	r1, r1, #11
 8002e30:	430a      	orrs	r2, r1
 8002e32:	615a      	str	r2, [r3, #20]
 8002e34:	4b49      	ldr	r3, [pc, #292]	@ (8002f5c <MX_GPIO_Init+0x184>)
 8002e36:	695a      	ldr	r2, [r3, #20]
 8002e38:	2380      	movs	r3, #128	@ 0x80
 8002e3a:	02db      	lsls	r3, r3, #11
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, E5_NRST_Pin|DW_NSS_Pin, GPIO_PIN_RESET);
 8002e42:	2390      	movs	r3, #144	@ 0x90
 8002e44:	05db      	lsls	r3, r3, #23
 8002e46:	2200      	movs	r2, #0
 8002e48:	2111      	movs	r1, #17
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f001 fb95 	bl	800457a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCREEN_EN_Pin|SD_CS_Pin|WAKE_Pin|TFT_DC_Pin
 8002e50:	4943      	ldr	r1, [pc, #268]	@ (8002f60 <MX_GPIO_Init+0x188>)
 8002e52:	4b44      	ldr	r3, [pc, #272]	@ (8002f64 <MX_GPIO_Init+0x18c>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	0018      	movs	r0, r3
 8002e58:	f001 fb8f 	bl	800457a <HAL_GPIO_WritePin>
                          |TFT_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : E5_NRST_Pin */
  GPIO_InitStruct.Pin = E5_NRST_Pin;
 8002e5c:	193b      	adds	r3, r7, r4
 8002e5e:	2201      	movs	r2, #1
 8002e60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e62:	193b      	adds	r3, r7, r4
 8002e64:	2201      	movs	r2, #1
 8002e66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	193b      	adds	r3, r7, r4
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6e:	193b      	adds	r3, r7, r4
 8002e70:	2200      	movs	r2, #0
 8002e72:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(E5_NRST_GPIO_Port, &GPIO_InitStruct);
 8002e74:	193a      	adds	r2, r7, r4
 8002e76:	2390      	movs	r3, #144	@ 0x90
 8002e78:	05db      	lsls	r3, r3, #23
 8002e7a:	0011      	movs	r1, r2
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f001 f9e7 	bl	8004250 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_RESET_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin;
 8002e82:	193b      	adds	r3, r7, r4
 8002e84:	2204      	movs	r2, #4
 8002e86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e88:	193b      	adds	r3, r7, r4
 8002e8a:	2288      	movs	r2, #136	@ 0x88
 8002e8c:	0352      	lsls	r2, r2, #13
 8002e8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e90:	193b      	adds	r3, r7, r4
 8002e92:	2200      	movs	r2, #0
 8002e94:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8002e96:	193a      	adds	r2, r7, r4
 8002e98:	2390      	movs	r3, #144	@ 0x90
 8002e9a:	05db      	lsls	r3, r3, #23
 8002e9c:	0011      	movs	r1, r2
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f001 f9d6 	bl	8004250 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 8002ea4:	193b      	adds	r3, r7, r4
 8002ea6:	2210      	movs	r2, #16
 8002ea8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eaa:	193b      	adds	r3, r7, r4
 8002eac:	2201      	movs	r2, #1
 8002eae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb0:	193b      	adds	r3, r7, r4
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eb6:	193b      	adds	r3, r7, r4
 8002eb8:	2203      	movs	r2, #3
 8002eba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 8002ebc:	193a      	adds	r2, r7, r4
 8002ebe:	2390      	movs	r3, #144	@ 0x90
 8002ec0:	05db      	lsls	r3, r3, #23
 8002ec2:	0011      	movs	r1, r2
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f001 f9c3 	bl	8004250 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCREEN_EN_Pin SD_CS_Pin WAKE_Pin TFT_DC_Pin
                           TFT_RST_Pin */
  GPIO_InitStruct.Pin = SCREEN_EN_Pin|SD_CS_Pin|WAKE_Pin|TFT_DC_Pin
 8002eca:	193b      	adds	r3, r7, r4
 8002ecc:	4a24      	ldr	r2, [pc, #144]	@ (8002f60 <MX_GPIO_Init+0x188>)
 8002ece:	601a      	str	r2, [r3, #0]
                          |TFT_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ed0:	193b      	adds	r3, r7, r4
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	193b      	adds	r3, r7, r4
 8002ed8:	2200      	movs	r2, #0
 8002eda:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002edc:	193b      	adds	r3, r7, r4
 8002ede:	2200      	movs	r2, #0
 8002ee0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee2:	193b      	adds	r3, r7, r4
 8002ee4:	4a1f      	ldr	r2, [pc, #124]	@ (8002f64 <MX_GPIO_Init+0x18c>)
 8002ee6:	0019      	movs	r1, r3
 8002ee8:	0010      	movs	r0, r2
 8002eea:	f001 f9b1 	bl	8004250 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_DISP_Pin */
  GPIO_InitStruct.Pin = BTN_DISP_Pin;
 8002eee:	0021      	movs	r1, r4
 8002ef0:	187b      	adds	r3, r7, r1
 8002ef2:	2280      	movs	r2, #128	@ 0x80
 8002ef4:	0192      	lsls	r2, r2, #6
 8002ef6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ef8:	000c      	movs	r4, r1
 8002efa:	193b      	adds	r3, r7, r4
 8002efc:	2200      	movs	r2, #0
 8002efe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f00:	193b      	adds	r3, r7, r4
 8002f02:	2200      	movs	r2, #0
 8002f04:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_DISP_GPIO_Port, &GPIO_InitStruct);
 8002f06:	193b      	adds	r3, r7, r4
 8002f08:	4a16      	ldr	r2, [pc, #88]	@ (8002f64 <MX_GPIO_Init+0x18c>)
 8002f0a:	0019      	movs	r1, r3
 8002f0c:	0010      	movs	r0, r2
 8002f0e:	f001 f99f 	bl	8004250 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 8002f12:	0021      	movs	r1, r4
 8002f14:	187b      	adds	r3, r7, r1
 8002f16:	2220      	movs	r2, #32
 8002f18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f1a:	187b      	adds	r3, r7, r1
 8002f1c:	2288      	movs	r2, #136	@ 0x88
 8002f1e:	0352      	lsls	r2, r2, #13
 8002f20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f22:	187b      	adds	r3, r7, r1
 8002f24:	2202      	movs	r2, #2
 8002f26:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 8002f28:	187b      	adds	r3, r7, r1
 8002f2a:	4a0e      	ldr	r2, [pc, #56]	@ (8002f64 <MX_GPIO_Init+0x18c>)
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	0010      	movs	r0, r2
 8002f30:	f001 f98e 	bl	8004250 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8002f34:	2200      	movs	r2, #0
 8002f36:	2100      	movs	r1, #0
 8002f38:	2006      	movs	r0, #6
 8002f3a:	f000 ff31 	bl	8003da0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002f3e:	2006      	movs	r0, #6
 8002f40:	f000 ff43 	bl	8003dca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002f44:	2200      	movs	r2, #0
 8002f46:	2100      	movs	r1, #0
 8002f48:	2007      	movs	r0, #7
 8002f4a:	f000 ff29 	bl	8003da0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002f4e:	2007      	movs	r0, #7
 8002f50:	f000 ff3b 	bl	8003dca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f54:	46c0      	nop			@ (mov r8, r8)
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b009      	add	sp, #36	@ 0x24
 8002f5a:	bd90      	pop	{r4, r7, pc}
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	00000b44 	.word	0x00000b44
 8002f64:	48000400 	.word	0x48000400

08002f68 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t offset)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	000a      	movs	r2, r1
 8002f72:	1cbb      	adds	r3, r7, #2
 8002f74:	801a      	strh	r2, [r3, #0]

	static uint16_t last_offset = 0;

	// Ignore if called twice (which will happen on every half buffer)
	if (offset != last_offset) {
 8002f76:	4b2d      	ldr	r3, [pc, #180]	@ (800302c <HAL_UARTEx_RxEventCallback+0xc4>)
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	1cba      	adds	r2, r7, #2
 8002f7c:	8812      	ldrh	r2, [r2, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d050      	beq.n	8003024 <HAL_UARTEx_RxEventCallback+0xbc>

		// If wrap around reset last_size
		if (offset < last_offset)
 8002f82:	4b2a      	ldr	r3, [pc, #168]	@ (800302c <HAL_UARTEx_RxEventCallback+0xc4>)
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	1cba      	adds	r2, r7, #2
 8002f88:	8812      	ldrh	r2, [r2, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d202      	bcs.n	8002f94 <HAL_UARTEx_RxEventCallback+0x2c>
			last_offset = 0;
 8002f8e:	4b27      	ldr	r3, [pc, #156]	@ (800302c <HAL_UARTEx_RxEventCallback+0xc4>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	801a      	strh	r2, [r3, #0]

    CDC_Transmit_FS(uart_rx_buf + last_offset, offset - last_offset);
 8002f94:	4b25      	ldr	r3, [pc, #148]	@ (800302c <HAL_UARTEx_RxEventCallback+0xc4>)
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	001a      	movs	r2, r3
 8002f9a:	4b25      	ldr	r3, [pc, #148]	@ (8003030 <HAL_UARTEx_RxEventCallback+0xc8>)
 8002f9c:	18d0      	adds	r0, r2, r3
 8002f9e:	1cbb      	adds	r3, r7, #2
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	4a22      	ldr	r2, [pc, #136]	@ (800302c <HAL_UARTEx_RxEventCallback+0xc4>)
 8002fa4:	8812      	ldrh	r2, [r2, #0]
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	0019      	movs	r1, r3
 8002faa:	f00a fc01 	bl	800d7b0 <CDC_Transmit_FS>
    
    static uint16_t response_offset = 0;
    
    for(uint16_t i = last_offset; i < offset; i++)
 8002fae:	230e      	movs	r3, #14
 8002fb0:	18fb      	adds	r3, r7, r3
 8002fb2:	4a1e      	ldr	r2, [pc, #120]	@ (800302c <HAL_UARTEx_RxEventCallback+0xc4>)
 8002fb4:	8812      	ldrh	r2, [r2, #0]
 8002fb6:	801a      	strh	r2, [r3, #0]
 8002fb8:	e029      	b.n	800300e <HAL_UARTEx_RxEventCallback+0xa6>
    {
      if(uart_rx_buf[i] == '+')
 8002fba:	210e      	movs	r1, #14
 8002fbc:	187b      	adds	r3, r7, r1
 8002fbe:	881b      	ldrh	r3, [r3, #0]
 8002fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8003030 <HAL_UARTEx_RxEventCallback+0xc8>)
 8002fc2:	5cd3      	ldrb	r3, [r2, r3]
 8002fc4:	2b2b      	cmp	r3, #43	@ 0x2b
 8002fc6:	d11c      	bne.n	8003002 <HAL_UARTEx_RxEventCallback+0x9a>
      {
        response_offset = i;
 8002fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8003034 <HAL_UARTEx_RxEventCallback+0xcc>)
 8002fca:	187a      	adds	r2, r7, r1
 8002fcc:	8812      	ldrh	r2, [r2, #0]
 8002fce:	801a      	strh	r2, [r3, #0]
        if (offset < response_offset)
 8002fd0:	4b18      	ldr	r3, [pc, #96]	@ (8003034 <HAL_UARTEx_RxEventCallback+0xcc>)
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	1cba      	adds	r2, r7, #2
 8002fd6:	8812      	ldrh	r2, [r2, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d202      	bcs.n	8002fe2 <HAL_UARTEx_RxEventCallback+0x7a>
          response_offset = 0;
 8002fdc:	4b15      	ldr	r3, [pc, #84]	@ (8003034 <HAL_UARTEx_RxEventCallback+0xcc>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	801a      	strh	r2, [r3, #0]
        if(memcmp(uart_rx_buf + response_offset, joined_msg, sizeof(joined_msg) - 1) == 0)
 8002fe2:	4b14      	ldr	r3, [pc, #80]	@ (8003034 <HAL_UARTEx_RxEventCallback+0xcc>)
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	001a      	movs	r2, r3
 8002fe8:	4b11      	ldr	r3, [pc, #68]	@ (8003030 <HAL_UARTEx_RxEventCallback+0xc8>)
 8002fea:	18d3      	adds	r3, r2, r3
 8002fec:	4912      	ldr	r1, [pc, #72]	@ (8003038 <HAL_UARTEx_RxEventCallback+0xd0>)
 8002fee:	2215      	movs	r2, #21
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f00d f85b 	bl	80100ac <memcmp>
 8002ff6:	1e03      	subs	r3, r0, #0
 8002ff8:	d103      	bne.n	8003002 <HAL_UARTEx_RxEventCallback+0x9a>
        {
          joined = 1;
 8002ffa:	4b10      	ldr	r3, [pc, #64]	@ (800303c <HAL_UARTEx_RxEventCallback+0xd4>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	701a      	strb	r2, [r3, #0]
          break;
 8003000:	e00c      	b.n	800301c <HAL_UARTEx_RxEventCallback+0xb4>
    for(uint16_t i = last_offset; i < offset; i++)
 8003002:	210e      	movs	r1, #14
 8003004:	187b      	adds	r3, r7, r1
 8003006:	881a      	ldrh	r2, [r3, #0]
 8003008:	187b      	adds	r3, r7, r1
 800300a:	3201      	adds	r2, #1
 800300c:	801a      	strh	r2, [r3, #0]
 800300e:	230e      	movs	r3, #14
 8003010:	18fa      	adds	r2, r7, r3
 8003012:	1cbb      	adds	r3, r7, #2
 8003014:	8812      	ldrh	r2, [r2, #0]
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d3ce      	bcc.n	8002fba <HAL_UARTEx_RxEventCallback+0x52>
        }
      }
    }

    last_offset = offset;
 800301c:	4b03      	ldr	r3, [pc, #12]	@ (800302c <HAL_UARTEx_RxEventCallback+0xc4>)
 800301e:	1cba      	adds	r2, r7, #2
 8003020:	8812      	ldrh	r2, [r2, #0]
 8003022:	801a      	strh	r2, [r3, #0]


	}

}
 8003024:	46c0      	nop			@ (mov r8, r8)
 8003026:	46bd      	mov	sp, r7
 8003028:	b004      	add	sp, #16
 800302a:	bd80      	pop	{r7, pc}
 800302c:	20000a70 	.word	0x20000a70
 8003030:	20000670 	.word	0x20000670
 8003034:	20000a72 	.word	0x20000a72
 8003038:	20000044 	.word	0x20000044
 800303c:	20000040 	.word	0x20000040

08003040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003044:	b672      	cpsid	i
}
 8003046:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003048:	46c0      	nop			@ (mov r8, r8)
 800304a:	e7fd      	b.n	8003048 <Error_Handler+0x8>

0800304c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003052:	4b13      	ldr	r3, [pc, #76]	@ (80030a0 <HAL_MspInit+0x54>)
 8003054:	699a      	ldr	r2, [r3, #24]
 8003056:	4b12      	ldr	r3, [pc, #72]	@ (80030a0 <HAL_MspInit+0x54>)
 8003058:	2101      	movs	r1, #1
 800305a:	430a      	orrs	r2, r1
 800305c:	619a      	str	r2, [r3, #24]
 800305e:	4b10      	ldr	r3, [pc, #64]	@ (80030a0 <HAL_MspInit+0x54>)
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2201      	movs	r2, #1
 8003064:	4013      	ands	r3, r2
 8003066:	607b      	str	r3, [r7, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800306a:	4b0d      	ldr	r3, [pc, #52]	@ (80030a0 <HAL_MspInit+0x54>)
 800306c:	69da      	ldr	r2, [r3, #28]
 800306e:	4b0c      	ldr	r3, [pc, #48]	@ (80030a0 <HAL_MspInit+0x54>)
 8003070:	2180      	movs	r1, #128	@ 0x80
 8003072:	0549      	lsls	r1, r1, #21
 8003074:	430a      	orrs	r2, r1
 8003076:	61da      	str	r2, [r3, #28]
 8003078:	4b09      	ldr	r3, [pc, #36]	@ (80030a0 <HAL_MspInit+0x54>)
 800307a:	69da      	ldr	r2, [r3, #28]
 800307c:	2380      	movs	r3, #128	@ 0x80
 800307e:	055b      	lsls	r3, r3, #21
 8003080:	4013      	ands	r3, r2
 8003082:	603b      	str	r3, [r7, #0]
 8003084:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8003086:	2200      	movs	r2, #0
 8003088:	2100      	movs	r1, #0
 800308a:	2004      	movs	r0, #4
 800308c:	f000 fe88 	bl	8003da0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8003090:	2004      	movs	r0, #4
 8003092:	f000 fe9a 	bl	8003dca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003096:	46c0      	nop			@ (mov r8, r8)
 8003098:	46bd      	mov	sp, r7
 800309a:	b002      	add	sp, #8
 800309c:	bd80      	pop	{r7, pc}
 800309e:	46c0      	nop			@ (mov r8, r8)
 80030a0:	40021000 	.word	0x40021000

080030a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030a4:	b590      	push	{r4, r7, lr}
 80030a6:	b08b      	sub	sp, #44	@ 0x2c
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ac:	2414      	movs	r4, #20
 80030ae:	193b      	adds	r3, r7, r4
 80030b0:	0018      	movs	r0, r3
 80030b2:	2314      	movs	r3, #20
 80030b4:	001a      	movs	r2, r3
 80030b6:	2100      	movs	r1, #0
 80030b8:	f00d f806 	bl	80100c8 <memset>
  if(hadc->Instance==ADC1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a18      	ldr	r2, [pc, #96]	@ (8003124 <HAL_ADC_MspInit+0x80>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d12a      	bne.n	800311c <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80030c6:	4b18      	ldr	r3, [pc, #96]	@ (8003128 <HAL_ADC_MspInit+0x84>)
 80030c8:	699a      	ldr	r2, [r3, #24]
 80030ca:	4b17      	ldr	r3, [pc, #92]	@ (8003128 <HAL_ADC_MspInit+0x84>)
 80030cc:	2180      	movs	r1, #128	@ 0x80
 80030ce:	0089      	lsls	r1, r1, #2
 80030d0:	430a      	orrs	r2, r1
 80030d2:	619a      	str	r2, [r3, #24]
 80030d4:	4b14      	ldr	r3, [pc, #80]	@ (8003128 <HAL_ADC_MspInit+0x84>)
 80030d6:	699a      	ldr	r2, [r3, #24]
 80030d8:	2380      	movs	r3, #128	@ 0x80
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e2:	4b11      	ldr	r3, [pc, #68]	@ (8003128 <HAL_ADC_MspInit+0x84>)
 80030e4:	695a      	ldr	r2, [r3, #20]
 80030e6:	4b10      	ldr	r3, [pc, #64]	@ (8003128 <HAL_ADC_MspInit+0x84>)
 80030e8:	2180      	movs	r1, #128	@ 0x80
 80030ea:	02c9      	lsls	r1, r1, #11
 80030ec:	430a      	orrs	r2, r1
 80030ee:	615a      	str	r2, [r3, #20]
 80030f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003128 <HAL_ADC_MspInit+0x84>)
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	2380      	movs	r3, #128	@ 0x80
 80030f6:	02db      	lsls	r3, r3, #11
 80030f8:	4013      	ands	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = VBATT_ADC_Pin;
 80030fe:	193b      	adds	r3, r7, r4
 8003100:	2201      	movs	r2, #1
 8003102:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003104:	193b      	adds	r3, r7, r4
 8003106:	2203      	movs	r2, #3
 8003108:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310a:	193b      	adds	r3, r7, r4
 800310c:	2200      	movs	r2, #0
 800310e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBATT_ADC_GPIO_Port, &GPIO_InitStruct);
 8003110:	193b      	adds	r3, r7, r4
 8003112:	4a06      	ldr	r2, [pc, #24]	@ (800312c <HAL_ADC_MspInit+0x88>)
 8003114:	0019      	movs	r1, r3
 8003116:	0010      	movs	r0, r2
 8003118:	f001 f89a 	bl	8004250 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800311c:	46c0      	nop			@ (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	b00b      	add	sp, #44	@ 0x2c
 8003122:	bd90      	pop	{r4, r7, pc}
 8003124:	40012400 	.word	0x40012400
 8003128:	40021000 	.word	0x40021000
 800312c:	48000400 	.word	0x48000400

08003130 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003130:	b590      	push	{r4, r7, lr}
 8003132:	b08d      	sub	sp, #52	@ 0x34
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003138:	241c      	movs	r4, #28
 800313a:	193b      	adds	r3, r7, r4
 800313c:	0018      	movs	r0, r3
 800313e:	2314      	movs	r3, #20
 8003140:	001a      	movs	r2, r3
 8003142:	2100      	movs	r1, #0
 8003144:	f00c ffc0 	bl	80100c8 <memset>
  if(hspi->Instance==SPI1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a45      	ldr	r2, [pc, #276]	@ (8003264 <HAL_SPI_MspInit+0x134>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d133      	bne.n	80031ba <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003152:	4b45      	ldr	r3, [pc, #276]	@ (8003268 <HAL_SPI_MspInit+0x138>)
 8003154:	699a      	ldr	r2, [r3, #24]
 8003156:	4b44      	ldr	r3, [pc, #272]	@ (8003268 <HAL_SPI_MspInit+0x138>)
 8003158:	2180      	movs	r1, #128	@ 0x80
 800315a:	0149      	lsls	r1, r1, #5
 800315c:	430a      	orrs	r2, r1
 800315e:	619a      	str	r2, [r3, #24]
 8003160:	4b41      	ldr	r3, [pc, #260]	@ (8003268 <HAL_SPI_MspInit+0x138>)
 8003162:	699a      	ldr	r2, [r3, #24]
 8003164:	2380      	movs	r3, #128	@ 0x80
 8003166:	015b      	lsls	r3, r3, #5
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
 800316c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800316e:	4b3e      	ldr	r3, [pc, #248]	@ (8003268 <HAL_SPI_MspInit+0x138>)
 8003170:	695a      	ldr	r2, [r3, #20]
 8003172:	4b3d      	ldr	r3, [pc, #244]	@ (8003268 <HAL_SPI_MspInit+0x138>)
 8003174:	2180      	movs	r1, #128	@ 0x80
 8003176:	0289      	lsls	r1, r1, #10
 8003178:	430a      	orrs	r2, r1
 800317a:	615a      	str	r2, [r3, #20]
 800317c:	4b3a      	ldr	r3, [pc, #232]	@ (8003268 <HAL_SPI_MspInit+0x138>)
 800317e:	695a      	ldr	r2, [r3, #20]
 8003180:	2380      	movs	r3, #128	@ 0x80
 8003182:	029b      	lsls	r3, r3, #10
 8003184:	4013      	ands	r3, r2
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DW_SCK_Pin|DW_MISO_Pin|DW_MOSI_Pin;
 800318a:	0021      	movs	r1, r4
 800318c:	187b      	adds	r3, r7, r1
 800318e:	22e0      	movs	r2, #224	@ 0xe0
 8003190:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003192:	187b      	adds	r3, r7, r1
 8003194:	2202      	movs	r2, #2
 8003196:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003198:	187b      	adds	r3, r7, r1
 800319a:	2200      	movs	r2, #0
 800319c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800319e:	187b      	adds	r3, r7, r1
 80031a0:	2203      	movs	r2, #3
 80031a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80031a4:	187b      	adds	r3, r7, r1
 80031a6:	2200      	movs	r2, #0
 80031a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031aa:	187a      	adds	r2, r7, r1
 80031ac:	2390      	movs	r3, #144	@ 0x90
 80031ae:	05db      	lsls	r3, r3, #23
 80031b0:	0011      	movs	r1, r2
 80031b2:	0018      	movs	r0, r3
 80031b4:	f001 f84c 	bl	8004250 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80031b8:	e04f      	b.n	800325a <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI2)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a2b      	ldr	r2, [pc, #172]	@ (800326c <HAL_SPI_MspInit+0x13c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d14a      	bne.n	800325a <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031c4:	4b28      	ldr	r3, [pc, #160]	@ (8003268 <HAL_SPI_MspInit+0x138>)
 80031c6:	69da      	ldr	r2, [r3, #28]
 80031c8:	4b27      	ldr	r3, [pc, #156]	@ (8003268 <HAL_SPI_MspInit+0x138>)
 80031ca:	2180      	movs	r1, #128	@ 0x80
 80031cc:	01c9      	lsls	r1, r1, #7
 80031ce:	430a      	orrs	r2, r1
 80031d0:	61da      	str	r2, [r3, #28]
 80031d2:	4b25      	ldr	r3, [pc, #148]	@ (8003268 <HAL_SPI_MspInit+0x138>)
 80031d4:	69da      	ldr	r2, [r3, #28]
 80031d6:	2380      	movs	r3, #128	@ 0x80
 80031d8:	01db      	lsls	r3, r3, #7
 80031da:	4013      	ands	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e0:	4b21      	ldr	r3, [pc, #132]	@ (8003268 <HAL_SPI_MspInit+0x138>)
 80031e2:	695a      	ldr	r2, [r3, #20]
 80031e4:	4b20      	ldr	r3, [pc, #128]	@ (8003268 <HAL_SPI_MspInit+0x138>)
 80031e6:	2180      	movs	r1, #128	@ 0x80
 80031e8:	02c9      	lsls	r1, r1, #11
 80031ea:	430a      	orrs	r2, r1
 80031ec:	615a      	str	r2, [r3, #20]
 80031ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003268 <HAL_SPI_MspInit+0x138>)
 80031f0:	695a      	ldr	r2, [r3, #20]
 80031f2:	2380      	movs	r3, #128	@ 0x80
 80031f4:	02db      	lsls	r3, r3, #11
 80031f6:	4013      	ands	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031fc:	211c      	movs	r1, #28
 80031fe:	187b      	adds	r3, r7, r1
 8003200:	2280      	movs	r2, #128	@ 0x80
 8003202:	00d2      	lsls	r2, r2, #3
 8003204:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003206:	000c      	movs	r4, r1
 8003208:	193b      	adds	r3, r7, r4
 800320a:	2202      	movs	r2, #2
 800320c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320e:	193b      	adds	r3, r7, r4
 8003210:	2200      	movs	r2, #0
 8003212:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003214:	193b      	adds	r3, r7, r4
 8003216:	2203      	movs	r2, #3
 8003218:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800321a:	193b      	adds	r3, r7, r4
 800321c:	2205      	movs	r2, #5
 800321e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003220:	193b      	adds	r3, r7, r4
 8003222:	4a13      	ldr	r2, [pc, #76]	@ (8003270 <HAL_SPI_MspInit+0x140>)
 8003224:	0019      	movs	r1, r3
 8003226:	0010      	movs	r0, r2
 8003228:	f001 f812 	bl	8004250 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TFT_CS_Pin|GPIO_PIN_14|GPIO_PIN_15;
 800322c:	0021      	movs	r1, r4
 800322e:	187b      	adds	r3, r7, r1
 8003230:	22d0      	movs	r2, #208	@ 0xd0
 8003232:	0212      	lsls	r2, r2, #8
 8003234:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003236:	187b      	adds	r3, r7, r1
 8003238:	2202      	movs	r2, #2
 800323a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323c:	187b      	adds	r3, r7, r1
 800323e:	2200      	movs	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003242:	187b      	adds	r3, r7, r1
 8003244:	2203      	movs	r2, #3
 8003246:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003248:	187b      	adds	r3, r7, r1
 800324a:	2200      	movs	r2, #0
 800324c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800324e:	187b      	adds	r3, r7, r1
 8003250:	4a07      	ldr	r2, [pc, #28]	@ (8003270 <HAL_SPI_MspInit+0x140>)
 8003252:	0019      	movs	r1, r3
 8003254:	0010      	movs	r0, r2
 8003256:	f000 fffb 	bl	8004250 <HAL_GPIO_Init>
}
 800325a:	46c0      	nop			@ (mov r8, r8)
 800325c:	46bd      	mov	sp, r7
 800325e:	b00d      	add	sp, #52	@ 0x34
 8003260:	bd90      	pop	{r4, r7, pc}
 8003262:	46c0      	nop			@ (mov r8, r8)
 8003264:	40013000 	.word	0x40013000
 8003268:	40021000 	.word	0x40021000
 800326c:	40003800 	.word	0x40003800
 8003270:	48000400 	.word	0x48000400

08003274 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a0d      	ldr	r2, [pc, #52]	@ (80032b8 <HAL_TIM_Base_MspInit+0x44>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d113      	bne.n	80032ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003286:	4b0d      	ldr	r3, [pc, #52]	@ (80032bc <HAL_TIM_Base_MspInit+0x48>)
 8003288:	69da      	ldr	r2, [r3, #28]
 800328a:	4b0c      	ldr	r3, [pc, #48]	@ (80032bc <HAL_TIM_Base_MspInit+0x48>)
 800328c:	2102      	movs	r1, #2
 800328e:	430a      	orrs	r2, r1
 8003290:	61da      	str	r2, [r3, #28]
 8003292:	4b0a      	ldr	r3, [pc, #40]	@ (80032bc <HAL_TIM_Base_MspInit+0x48>)
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	2202      	movs	r2, #2
 8003298:	4013      	ands	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800329e:	2200      	movs	r2, #0
 80032a0:	2100      	movs	r1, #0
 80032a2:	2010      	movs	r0, #16
 80032a4:	f000 fd7c 	bl	8003da0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80032a8:	2010      	movs	r0, #16
 80032aa:	f000 fd8e 	bl	8003dca <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80032ae:	46c0      	nop			@ (mov r8, r8)
 80032b0:	46bd      	mov	sp, r7
 80032b2:	b004      	add	sp, #16
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	46c0      	nop			@ (mov r8, r8)
 80032b8:	40000400 	.word	0x40000400
 80032bc:	40021000 	.word	0x40021000

080032c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032c0:	b590      	push	{r4, r7, lr}
 80032c2:	b08b      	sub	sp, #44	@ 0x2c
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c8:	2414      	movs	r4, #20
 80032ca:	193b      	adds	r3, r7, r4
 80032cc:	0018      	movs	r0, r3
 80032ce:	2314      	movs	r3, #20
 80032d0:	001a      	movs	r2, r3
 80032d2:	2100      	movs	r1, #0
 80032d4:	f00c fef8 	bl	80100c8 <memset>
  if(huart->Instance==USART1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a34      	ldr	r2, [pc, #208]	@ (80033b0 <HAL_UART_MspInit+0xf0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d161      	bne.n	80033a6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032e2:	4b34      	ldr	r3, [pc, #208]	@ (80033b4 <HAL_UART_MspInit+0xf4>)
 80032e4:	699a      	ldr	r2, [r3, #24]
 80032e6:	4b33      	ldr	r3, [pc, #204]	@ (80033b4 <HAL_UART_MspInit+0xf4>)
 80032e8:	2180      	movs	r1, #128	@ 0x80
 80032ea:	01c9      	lsls	r1, r1, #7
 80032ec:	430a      	orrs	r2, r1
 80032ee:	619a      	str	r2, [r3, #24]
 80032f0:	4b30      	ldr	r3, [pc, #192]	@ (80033b4 <HAL_UART_MspInit+0xf4>)
 80032f2:	699a      	ldr	r2, [r3, #24]
 80032f4:	2380      	movs	r3, #128	@ 0x80
 80032f6:	01db      	lsls	r3, r3, #7
 80032f8:	4013      	ands	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032fe:	4b2d      	ldr	r3, [pc, #180]	@ (80033b4 <HAL_UART_MspInit+0xf4>)
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	4b2c      	ldr	r3, [pc, #176]	@ (80033b4 <HAL_UART_MspInit+0xf4>)
 8003304:	2180      	movs	r1, #128	@ 0x80
 8003306:	0289      	lsls	r1, r1, #10
 8003308:	430a      	orrs	r2, r1
 800330a:	615a      	str	r2, [r3, #20]
 800330c:	4b29      	ldr	r3, [pc, #164]	@ (80033b4 <HAL_UART_MspInit+0xf4>)
 800330e:	695a      	ldr	r2, [r3, #20]
 8003310:	2380      	movs	r3, #128	@ 0x80
 8003312:	029b      	lsls	r3, r3, #10
 8003314:	4013      	ands	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800331a:	193b      	adds	r3, r7, r4
 800331c:	22c0      	movs	r2, #192	@ 0xc0
 800331e:	00d2      	lsls	r2, r2, #3
 8003320:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003322:	0021      	movs	r1, r4
 8003324:	187b      	adds	r3, r7, r1
 8003326:	2202      	movs	r2, #2
 8003328:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332a:	187b      	adds	r3, r7, r1
 800332c:	2200      	movs	r2, #0
 800332e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003330:	187b      	adds	r3, r7, r1
 8003332:	2203      	movs	r2, #3
 8003334:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003336:	187b      	adds	r3, r7, r1
 8003338:	2201      	movs	r2, #1
 800333a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333c:	187a      	adds	r2, r7, r1
 800333e:	2390      	movs	r3, #144	@ 0x90
 8003340:	05db      	lsls	r3, r3, #23
 8003342:	0011      	movs	r1, r2
 8003344:	0018      	movs	r0, r3
 8003346:	f000 ff83 	bl	8004250 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800334a:	4b1b      	ldr	r3, [pc, #108]	@ (80033b8 <HAL_UART_MspInit+0xf8>)
 800334c:	4a1b      	ldr	r2, [pc, #108]	@ (80033bc <HAL_UART_MspInit+0xfc>)
 800334e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003350:	4b19      	ldr	r3, [pc, #100]	@ (80033b8 <HAL_UART_MspInit+0xf8>)
 8003352:	2200      	movs	r2, #0
 8003354:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003356:	4b18      	ldr	r3, [pc, #96]	@ (80033b8 <HAL_UART_MspInit+0xf8>)
 8003358:	2200      	movs	r2, #0
 800335a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800335c:	4b16      	ldr	r3, [pc, #88]	@ (80033b8 <HAL_UART_MspInit+0xf8>)
 800335e:	2280      	movs	r2, #128	@ 0x80
 8003360:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003362:	4b15      	ldr	r3, [pc, #84]	@ (80033b8 <HAL_UART_MspInit+0xf8>)
 8003364:	2200      	movs	r2, #0
 8003366:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003368:	4b13      	ldr	r3, [pc, #76]	@ (80033b8 <HAL_UART_MspInit+0xf8>)
 800336a:	2200      	movs	r2, #0
 800336c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800336e:	4b12      	ldr	r3, [pc, #72]	@ (80033b8 <HAL_UART_MspInit+0xf8>)
 8003370:	2220      	movs	r2, #32
 8003372:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003374:	4b10      	ldr	r3, [pc, #64]	@ (80033b8 <HAL_UART_MspInit+0xf8>)
 8003376:	2200      	movs	r2, #0
 8003378:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800337a:	4b0f      	ldr	r3, [pc, #60]	@ (80033b8 <HAL_UART_MspInit+0xf8>)
 800337c:	0018      	movs	r0, r3
 800337e:	f000 fd51 	bl	8003e24 <HAL_DMA_Init>
 8003382:	1e03      	subs	r3, r0, #0
 8003384:	d001      	beq.n	800338a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8003386:	f7ff fe5b 	bl	8003040 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a0a      	ldr	r2, [pc, #40]	@ (80033b8 <HAL_UART_MspInit+0xf8>)
 800338e:	675a      	str	r2, [r3, #116]	@ 0x74
 8003390:	4b09      	ldr	r3, [pc, #36]	@ (80033b8 <HAL_UART_MspInit+0xf8>)
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003396:	2200      	movs	r2, #0
 8003398:	2100      	movs	r1, #0
 800339a:	201b      	movs	r0, #27
 800339c:	f000 fd00 	bl	8003da0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80033a0:	201b      	movs	r0, #27
 80033a2:	f000 fd12 	bl	8003dca <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b00b      	add	sp, #44	@ 0x2c
 80033ac:	bd90      	pop	{r4, r7, pc}
 80033ae:	46c0      	nop			@ (mov r8, r8)
 80033b0:	40013800 	.word	0x40013800
 80033b4:	40021000 	.word	0x40021000
 80033b8:	2000062c 	.word	0x2000062c
 80033bc:	40020030 	.word	0x40020030

080033c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80033c4:	46c0      	nop			@ (mov r8, r8)
 80033c6:	e7fd      	b.n	80033c4 <NMI_Handler+0x4>

080033c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033cc:	46c0      	nop			@ (mov r8, r8)
 80033ce:	e7fd      	b.n	80033cc <HardFault_Handler+0x4>

080033d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80033d4:	46c0      	nop			@ (mov r8, r8)
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033de:	46c0      	nop			@ (mov r8, r8)
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033e8:	f000 f97e 	bl	80036e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033ec:	46c0      	nop			@ (mov r8, r8)
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupts.
  */
void RCC_CRS_IRQHandler(void)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 80033f6:	46c0      	nop			@ (mov r8, r8)
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_RESET_Pin);
 8003400:	2004      	movs	r0, #4
 8003402:	f001 f8d7 	bl	80045b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003406:	46c0      	nop			@ (mov r8, r8)
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQn_Pin);
 8003410:	2020      	movs	r0, #32
 8003412:	f001 f8cf 	bl	80045b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003420:	4b03      	ldr	r3, [pc, #12]	@ (8003430 <DMA1_Channel2_3_IRQHandler+0x14>)
 8003422:	0018      	movs	r0, r3
 8003424:	f000 fe29 	bl	800407a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003428:	46c0      	nop			@ (mov r8, r8)
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	46c0      	nop			@ (mov r8, r8)
 8003430:	2000062c 	.word	0x2000062c

08003434 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003438:	4b03      	ldr	r3, [pc, #12]	@ (8003448 <TIM3_IRQHandler+0x14>)
 800343a:	0018      	movs	r0, r3
 800343c:	f004 fc84 	bl	8007d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003440:	46c0      	nop			@ (mov r8, r8)
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	46c0      	nop			@ (mov r8, r8)
 8003448:	2000052c 	.word	0x2000052c

0800344c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  //   __HAL_UART_CLEAR_IDLEFLAG(&huart1);
  //   UART1_IdleCallback();
  // }

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003450:	4b03      	ldr	r3, [pc, #12]	@ (8003460 <USART1_IRQHandler+0x14>)
 8003452:	0018      	movs	r0, r3
 8003454:	f005 f8ce 	bl	80085f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003458:	46c0      	nop			@ (mov r8, r8)
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	46c0      	nop			@ (mov r8, r8)
 8003460:	20000574 	.word	0x20000574

08003464 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003468:	4b03      	ldr	r3, [pc, #12]	@ (8003478 <USB_IRQHandler+0x14>)
 800346a:	0018      	movs	r0, r3
 800346c:	f001 f9d8 	bl	8004820 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8003470:	46c0      	nop			@ (mov r8, r8)
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	46c0      	nop			@ (mov r8, r8)
 8003478:	20001744 	.word	0x20001744

0800347c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  return 1;
 8003480:	2301      	movs	r3, #1
}
 8003482:	0018      	movs	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <_kill>:

int _kill(int pid, int sig)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003492:	f00c fe73 	bl	801017c <__errno>
 8003496:	0003      	movs	r3, r0
 8003498:	2216      	movs	r2, #22
 800349a:	601a      	str	r2, [r3, #0]
  return -1;
 800349c:	2301      	movs	r3, #1
 800349e:	425b      	negs	r3, r3
}
 80034a0:	0018      	movs	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b002      	add	sp, #8
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <_exit>:

void _exit (int status)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80034b0:	2301      	movs	r3, #1
 80034b2:	425a      	negs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	0011      	movs	r1, r2
 80034b8:	0018      	movs	r0, r3
 80034ba:	f7ff ffe5 	bl	8003488 <_kill>
  while (1) {}    /* Make sure we hang here */
 80034be:	46c0      	nop			@ (mov r8, r8)
 80034c0:	e7fd      	b.n	80034be <_exit+0x16>

080034c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b086      	sub	sp, #24
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	e00a      	b.n	80034ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034d4:	e000      	b.n	80034d8 <_read+0x16>
 80034d6:	bf00      	nop
 80034d8:	0001      	movs	r1, r0
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	60ba      	str	r2, [r7, #8]
 80034e0:	b2ca      	uxtb	r2, r1
 80034e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	3301      	adds	r3, #1
 80034e8:	617b      	str	r3, [r7, #20]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	dbf0      	blt.n	80034d4 <_read+0x12>
  }

  return len;
 80034f2:	687b      	ldr	r3, [r7, #4]
}
 80034f4:	0018      	movs	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b006      	add	sp, #24
 80034fa:	bd80      	pop	{r7, pc}

080034fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	e009      	b.n	8003522 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	60ba      	str	r2, [r7, #8]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	0018      	movs	r0, r3
 8003518:	e000      	b.n	800351c <_write+0x20>
 800351a:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	3301      	adds	r3, #1
 8003520:	617b      	str	r3, [r7, #20]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	429a      	cmp	r2, r3
 8003528:	dbf1      	blt.n	800350e <_write+0x12>
  }
  return len;
 800352a:	687b      	ldr	r3, [r7, #4]
}
 800352c:	0018      	movs	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	b006      	add	sp, #24
 8003532:	bd80      	pop	{r7, pc}

08003534 <_close>:

int _close(int file)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800353c:	2301      	movs	r3, #1
 800353e:	425b      	negs	r3, r3
}
 8003540:	0018      	movs	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	b002      	add	sp, #8
 8003546:	bd80      	pop	{r7, pc}

08003548 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2280      	movs	r2, #128	@ 0x80
 8003556:	0192      	lsls	r2, r2, #6
 8003558:	605a      	str	r2, [r3, #4]
  return 0;
 800355a:	2300      	movs	r3, #0
}
 800355c:	0018      	movs	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	b002      	add	sp, #8
 8003562:	bd80      	pop	{r7, pc}

08003564 <_isatty>:

int _isatty(int file)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800356c:	2301      	movs	r3, #1
}
 800356e:	0018      	movs	r0, r3
 8003570:	46bd      	mov	sp, r7
 8003572:	b002      	add	sp, #8
 8003574:	bd80      	pop	{r7, pc}

08003576 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003582:	2300      	movs	r3, #0
}
 8003584:	0018      	movs	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	b004      	add	sp, #16
 800358a:	bd80      	pop	{r7, pc}

0800358c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003594:	4a14      	ldr	r2, [pc, #80]	@ (80035e8 <_sbrk+0x5c>)
 8003596:	4b15      	ldr	r3, [pc, #84]	@ (80035ec <_sbrk+0x60>)
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035a0:	4b13      	ldr	r3, [pc, #76]	@ (80035f0 <_sbrk+0x64>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d102      	bne.n	80035ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035a8:	4b11      	ldr	r3, [pc, #68]	@ (80035f0 <_sbrk+0x64>)
 80035aa:	4a12      	ldr	r2, [pc, #72]	@ (80035f4 <_sbrk+0x68>)
 80035ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035ae:	4b10      	ldr	r3, [pc, #64]	@ (80035f0 <_sbrk+0x64>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	18d3      	adds	r3, r2, r3
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d207      	bcs.n	80035cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035bc:	f00c fdde 	bl	801017c <__errno>
 80035c0:	0003      	movs	r3, r0
 80035c2:	220c      	movs	r2, #12
 80035c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035c6:	2301      	movs	r3, #1
 80035c8:	425b      	negs	r3, r3
 80035ca:	e009      	b.n	80035e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035cc:	4b08      	ldr	r3, [pc, #32]	@ (80035f0 <_sbrk+0x64>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035d2:	4b07      	ldr	r3, [pc, #28]	@ (80035f0 <_sbrk+0x64>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	18d2      	adds	r2, r2, r3
 80035da:	4b05      	ldr	r3, [pc, #20]	@ (80035f0 <_sbrk+0x64>)
 80035dc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80035de:	68fb      	ldr	r3, [r7, #12]
}
 80035e0:	0018      	movs	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b006      	add	sp, #24
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20004000 	.word	0x20004000
 80035ec:	00000400 	.word	0x00000400
 80035f0:	20000a74 	.word	0x20000a74
 80035f4:	20001dc8 	.word	0x20001dc8

080035f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80035fc:	46c0      	nop			@ (mov r8, r8)
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
	...

08003604 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003604:	480d      	ldr	r0, [pc, #52]	@ (800363c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003606:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003608:	f7ff fff6 	bl	80035f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800360c:	480c      	ldr	r0, [pc, #48]	@ (8003640 <LoopForever+0x6>)
  ldr r1, =_edata
 800360e:	490d      	ldr	r1, [pc, #52]	@ (8003644 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003610:	4a0d      	ldr	r2, [pc, #52]	@ (8003648 <LoopForever+0xe>)
  movs r3, #0
 8003612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003614:	e002      	b.n	800361c <LoopCopyDataInit>

08003616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800361a:	3304      	adds	r3, #4

0800361c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800361c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800361e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003620:	d3f9      	bcc.n	8003616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003622:	4a0a      	ldr	r2, [pc, #40]	@ (800364c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003624:	4c0a      	ldr	r4, [pc, #40]	@ (8003650 <LoopForever+0x16>)
  movs r3, #0
 8003626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003628:	e001      	b.n	800362e <LoopFillZerobss>

0800362a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800362a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800362c:	3204      	adds	r2, #4

0800362e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800362e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003630:	d3fb      	bcc.n	800362a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003632:	f00c fda9 	bl	8010188 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003636:	f7ff f905 	bl	8002844 <main>

0800363a <LoopForever>:

LoopForever:
    b LoopForever
 800363a:	e7fe      	b.n	800363a <LoopForever>
  ldr   r0, =_estack
 800363c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003644:	200003a4 	.word	0x200003a4
  ldr r2, =_sidata
 8003648:	08012a88 	.word	0x08012a88
  ldr r2, =_sbss
 800364c:	200003a8 	.word	0x200003a8
  ldr r4, =_ebss
 8003650:	20001dc8 	.word	0x20001dc8

08003654 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003654:	e7fe      	b.n	8003654 <ADC1_COMP_IRQHandler>
	...

08003658 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800365c:	4b07      	ldr	r3, [pc, #28]	@ (800367c <HAL_Init+0x24>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4b06      	ldr	r3, [pc, #24]	@ (800367c <HAL_Init+0x24>)
 8003662:	2110      	movs	r1, #16
 8003664:	430a      	orrs	r2, r1
 8003666:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003668:	2003      	movs	r0, #3
 800366a:	f000 f809 	bl	8003680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800366e:	f7ff fced 	bl	800304c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	0018      	movs	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	40022000 	.word	0x40022000

08003680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003680:	b590      	push	{r4, r7, lr}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003688:	4b14      	ldr	r3, [pc, #80]	@ (80036dc <HAL_InitTick+0x5c>)
 800368a:	681c      	ldr	r4, [r3, #0]
 800368c:	4b14      	ldr	r3, [pc, #80]	@ (80036e0 <HAL_InitTick+0x60>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	0019      	movs	r1, r3
 8003692:	23fa      	movs	r3, #250	@ 0xfa
 8003694:	0098      	lsls	r0, r3, #2
 8003696:	f7fc fd53 	bl	8000140 <__udivsi3>
 800369a:	0003      	movs	r3, r0
 800369c:	0019      	movs	r1, r3
 800369e:	0020      	movs	r0, r4
 80036a0:	f7fc fd4e 	bl	8000140 <__udivsi3>
 80036a4:	0003      	movs	r3, r0
 80036a6:	0018      	movs	r0, r3
 80036a8:	f000 fbaf 	bl	8003e0a <HAL_SYSTICK_Config>
 80036ac:	1e03      	subs	r3, r0, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e00f      	b.n	80036d4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d80b      	bhi.n	80036d2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	2301      	movs	r3, #1
 80036be:	425b      	negs	r3, r3
 80036c0:	2200      	movs	r2, #0
 80036c2:	0018      	movs	r0, r3
 80036c4:	f000 fb6c 	bl	8003da0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036c8:	4b06      	ldr	r3, [pc, #24]	@ (80036e4 <HAL_InitTick+0x64>)
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	e000      	b.n	80036d4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
}
 80036d4:	0018      	movs	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b003      	add	sp, #12
 80036da:	bd90      	pop	{r4, r7, pc}
 80036dc:	2000005c 	.word	0x2000005c
 80036e0:	20000064 	.word	0x20000064
 80036e4:	20000060 	.word	0x20000060

080036e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036ec:	4b05      	ldr	r3, [pc, #20]	@ (8003704 <HAL_IncTick+0x1c>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	001a      	movs	r2, r3
 80036f2:	4b05      	ldr	r3, [pc, #20]	@ (8003708 <HAL_IncTick+0x20>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	18d2      	adds	r2, r2, r3
 80036f8:	4b03      	ldr	r3, [pc, #12]	@ (8003708 <HAL_IncTick+0x20>)
 80036fa:	601a      	str	r2, [r3, #0]
}
 80036fc:	46c0      	nop			@ (mov r8, r8)
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	46c0      	nop			@ (mov r8, r8)
 8003704:	20000064 	.word	0x20000064
 8003708:	20000a78 	.word	0x20000a78

0800370c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  return uwTick;
 8003710:	4b02      	ldr	r3, [pc, #8]	@ (800371c <HAL_GetTick+0x10>)
 8003712:	681b      	ldr	r3, [r3, #0]
}
 8003714:	0018      	movs	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	20000a78 	.word	0x20000a78

08003720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003728:	f7ff fff0 	bl	800370c <HAL_GetTick>
 800372c:	0003      	movs	r3, r0
 800372e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	3301      	adds	r3, #1
 8003738:	d005      	beq.n	8003746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800373a:	4b0a      	ldr	r3, [pc, #40]	@ (8003764 <HAL_Delay+0x44>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	001a      	movs	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	189b      	adds	r3, r3, r2
 8003744:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003746:	46c0      	nop			@ (mov r8, r8)
 8003748:	f7ff ffe0 	bl	800370c <HAL_GetTick>
 800374c:	0002      	movs	r2, r0
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	429a      	cmp	r2, r3
 8003756:	d8f7      	bhi.n	8003748 <HAL_Delay+0x28>
  {
  }
}
 8003758:	46c0      	nop			@ (mov r8, r8)
 800375a:	46c0      	nop			@ (mov r8, r8)
 800375c:	46bd      	mov	sp, r7
 800375e:	b004      	add	sp, #16
 8003760:	bd80      	pop	{r7, pc}
 8003762:	46c0      	nop			@ (mov r8, r8)
 8003764:	20000064 	.word	0x20000064

08003768 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003770:	230f      	movs	r3, #15
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	2200      	movs	r2, #0
 8003776:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e125      	b.n	80039d2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10a      	bne.n	80037a4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2234      	movs	r2, #52	@ 0x34
 8003798:	2100      	movs	r1, #0
 800379a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	0018      	movs	r0, r3
 80037a0:	f7ff fc80 	bl	80030a4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a8:	2210      	movs	r2, #16
 80037aa:	4013      	ands	r3, r2
 80037ac:	d000      	beq.n	80037b0 <HAL_ADC_Init+0x48>
 80037ae:	e103      	b.n	80039b8 <HAL_ADC_Init+0x250>
 80037b0:	230f      	movs	r3, #15
 80037b2:	18fb      	adds	r3, r7, r3
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d000      	beq.n	80037bc <HAL_ADC_Init+0x54>
 80037ba:	e0fd      	b.n	80039b8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2204      	movs	r2, #4
 80037c4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80037c6:	d000      	beq.n	80037ca <HAL_ADC_Init+0x62>
 80037c8:	e0f6      	b.n	80039b8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ce:	4a83      	ldr	r2, [pc, #524]	@ (80039dc <HAL_ADC_Init+0x274>)
 80037d0:	4013      	ands	r3, r2
 80037d2:	2202      	movs	r2, #2
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2203      	movs	r2, #3
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d112      	bne.n	800380e <HAL_ADC_Init+0xa6>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2201      	movs	r2, #1
 80037f0:	4013      	ands	r3, r2
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d009      	beq.n	800380a <HAL_ADC_Init+0xa2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	2380      	movs	r3, #128	@ 0x80
 80037fe:	021b      	lsls	r3, r3, #8
 8003800:	401a      	ands	r2, r3
 8003802:	2380      	movs	r3, #128	@ 0x80
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	429a      	cmp	r2, r3
 8003808:	d101      	bne.n	800380e <HAL_ADC_Init+0xa6>
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <HAL_ADC_Init+0xa8>
 800380e:	2300      	movs	r3, #0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d116      	bne.n	8003842 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	2218      	movs	r2, #24
 800381c:	4393      	bics	r3, r2
 800381e:	0019      	movs	r1, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	0899      	lsrs	r1, r3, #2
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4964      	ldr	r1, [pc, #400]	@ (80039e0 <HAL_ADC_Init+0x278>)
 800384e:	400a      	ands	r2, r1
 8003850:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	7e1b      	ldrb	r3, [r3, #24]
 8003856:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	7e5b      	ldrb	r3, [r3, #25]
 800385c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800385e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	7e9b      	ldrb	r3, [r3, #26]
 8003864:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003866:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386c:	2b01      	cmp	r3, #1
 800386e:	d002      	beq.n	8003876 <HAL_ADC_Init+0x10e>
 8003870:	2380      	movs	r3, #128	@ 0x80
 8003872:	015b      	lsls	r3, r3, #5
 8003874:	e000      	b.n	8003878 <HAL_ADC_Init+0x110>
 8003876:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003878:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800387e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	2b02      	cmp	r3, #2
 8003886:	d101      	bne.n	800388c <HAL_ADC_Init+0x124>
 8003888:	2304      	movs	r3, #4
 800388a:	e000      	b.n	800388e <HAL_ADC_Init+0x126>
 800388c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800388e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2124      	movs	r1, #36	@ 0x24
 8003894:	5c5b      	ldrb	r3, [r3, r1]
 8003896:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003898:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	4313      	orrs	r3, r2
 800389e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	7edb      	ldrb	r3, [r3, #27]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d115      	bne.n	80038d4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	7e9b      	ldrb	r3, [r3, #26]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d105      	bne.n	80038bc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2280      	movs	r2, #128	@ 0x80
 80038b4:	0252      	lsls	r2, r2, #9
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	e00b      	b.n	80038d4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c0:	2220      	movs	r2, #32
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038cc:	2201      	movs	r2, #1
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69da      	ldr	r2, [r3, #28]
 80038d8:	23c2      	movs	r3, #194	@ 0xc2
 80038da:	33ff      	adds	r3, #255	@ 0xff
 80038dc:	429a      	cmp	r2, r3
 80038de:	d007      	beq.n	80038f0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80038e8:	4313      	orrs	r3, r2
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68d9      	ldr	r1, [r3, #12]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003904:	2380      	movs	r3, #128	@ 0x80
 8003906:	055b      	lsls	r3, r3, #21
 8003908:	429a      	cmp	r2, r3
 800390a:	d01b      	beq.n	8003944 <HAL_ADC_Init+0x1dc>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003910:	2b01      	cmp	r3, #1
 8003912:	d017      	beq.n	8003944 <HAL_ADC_Init+0x1dc>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003918:	2b02      	cmp	r3, #2
 800391a:	d013      	beq.n	8003944 <HAL_ADC_Init+0x1dc>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003920:	2b03      	cmp	r3, #3
 8003922:	d00f      	beq.n	8003944 <HAL_ADC_Init+0x1dc>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003928:	2b04      	cmp	r3, #4
 800392a:	d00b      	beq.n	8003944 <HAL_ADC_Init+0x1dc>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003930:	2b05      	cmp	r3, #5
 8003932:	d007      	beq.n	8003944 <HAL_ADC_Init+0x1dc>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003938:	2b06      	cmp	r3, #6
 800393a:	d003      	beq.n	8003944 <HAL_ADC_Init+0x1dc>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003940:	2b07      	cmp	r3, #7
 8003942:	d112      	bne.n	800396a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695a      	ldr	r2, [r3, #20]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2107      	movs	r1, #7
 8003950:	438a      	bics	r2, r1
 8003952:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6959      	ldr	r1, [r3, #20]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395e:	2207      	movs	r2, #7
 8003960:	401a      	ands	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	4a1c      	ldr	r2, [pc, #112]	@ (80039e4 <HAL_ADC_Init+0x27c>)
 8003972:	4013      	ands	r3, r2
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	429a      	cmp	r2, r3
 8003978:	d10b      	bne.n	8003992 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003984:	2203      	movs	r2, #3
 8003986:	4393      	bics	r3, r2
 8003988:	2201      	movs	r2, #1
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003990:	e01c      	b.n	80039cc <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003996:	2212      	movs	r2, #18
 8003998:	4393      	bics	r3, r2
 800399a:	2210      	movs	r2, #16
 800399c:	431a      	orrs	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a6:	2201      	movs	r2, #1
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80039ae:	230f      	movs	r3, #15
 80039b0:	18fb      	adds	r3, r7, r3
 80039b2:	2201      	movs	r2, #1
 80039b4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80039b6:	e009      	b.n	80039cc <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039bc:	2210      	movs	r2, #16
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80039c4:	230f      	movs	r3, #15
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	2201      	movs	r2, #1
 80039ca:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80039cc:	230f      	movs	r3, #15
 80039ce:	18fb      	adds	r3, r7, r3
 80039d0:	781b      	ldrb	r3, [r3, #0]
}
 80039d2:	0018      	movs	r0, r3
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b004      	add	sp, #16
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	46c0      	nop			@ (mov r8, r8)
 80039dc:	fffffefd 	.word	0xfffffefd
 80039e0:	fffe0219 	.word	0xfffe0219
 80039e4:	833fffe7 	.word	0x833fffe7

080039e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039f2:	230f      	movs	r3, #15
 80039f4:	18fb      	adds	r3, r7, r3
 80039f6:	2200      	movs	r2, #0
 80039f8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a02:	2380      	movs	r3, #128	@ 0x80
 8003a04:	055b      	lsls	r3, r3, #21
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d011      	beq.n	8003a2e <HAL_ADC_ConfigChannel+0x46>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d00d      	beq.n	8003a2e <HAL_ADC_ConfigChannel+0x46>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d009      	beq.n	8003a2e <HAL_ADC_ConfigChannel+0x46>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d005      	beq.n	8003a2e <HAL_ADC_ConfigChannel+0x46>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	d001      	beq.n	8003a2e <HAL_ADC_ConfigChannel+0x46>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2234      	movs	r2, #52	@ 0x34
 8003a32:	5c9b      	ldrb	r3, [r3, r2]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x54>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e0d0      	b.n	8003bde <HAL_ADC_ConfigChannel+0x1f6>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2234      	movs	r2, #52	@ 0x34
 8003a40:	2101      	movs	r1, #1
 8003a42:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2204      	movs	r2, #4
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	d000      	beq.n	8003a52 <HAL_ADC_ConfigChannel+0x6a>
 8003a50:	e0b4      	b.n	8003bbc <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	4a64      	ldr	r2, [pc, #400]	@ (8003be8 <HAL_ADC_ConfigChannel+0x200>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d100      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x76>
 8003a5c:	e082      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	409a      	lsls	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a78:	2380      	movs	r3, #128	@ 0x80
 8003a7a:	055b      	lsls	r3, r3, #21
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d037      	beq.n	8003af0 <HAL_ADC_ConfigChannel+0x108>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d033      	beq.n	8003af0 <HAL_ADC_ConfigChannel+0x108>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d02f      	beq.n	8003af0 <HAL_ADC_ConfigChannel+0x108>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d02b      	beq.n	8003af0 <HAL_ADC_ConfigChannel+0x108>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d027      	beq.n	8003af0 <HAL_ADC_ConfigChannel+0x108>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa4:	2b05      	cmp	r3, #5
 8003aa6:	d023      	beq.n	8003af0 <HAL_ADC_ConfigChannel+0x108>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aac:	2b06      	cmp	r3, #6
 8003aae:	d01f      	beq.n	8003af0 <HAL_ADC_ConfigChannel+0x108>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab4:	2b07      	cmp	r3, #7
 8003ab6:	d01b      	beq.n	8003af0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	2107      	movs	r1, #7
 8003ac4:	400b      	ands	r3, r1
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d012      	beq.n	8003af0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695a      	ldr	r2, [r3, #20]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2107      	movs	r1, #7
 8003ad6:	438a      	bics	r2, r1
 8003ad8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6959      	ldr	r1, [r3, #20]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2207      	movs	r2, #7
 8003ae6:	401a      	ands	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b10      	cmp	r3, #16
 8003af6:	d007      	beq.n	8003b08 <HAL_ADC_ConfigChannel+0x120>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b11      	cmp	r3, #17
 8003afe:	d003      	beq.n	8003b08 <HAL_ADC_ConfigChannel+0x120>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b12      	cmp	r3, #18
 8003b06:	d163      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003b08:	4b38      	ldr	r3, [pc, #224]	@ (8003bec <HAL_ADC_ConfigChannel+0x204>)
 8003b0a:	6819      	ldr	r1, [r3, #0]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b10      	cmp	r3, #16
 8003b12:	d009      	beq.n	8003b28 <HAL_ADC_ConfigChannel+0x140>
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b11      	cmp	r3, #17
 8003b1a:	d102      	bne.n	8003b22 <HAL_ADC_ConfigChannel+0x13a>
 8003b1c:	2380      	movs	r3, #128	@ 0x80
 8003b1e:	03db      	lsls	r3, r3, #15
 8003b20:	e004      	b.n	8003b2c <HAL_ADC_ConfigChannel+0x144>
 8003b22:	2380      	movs	r3, #128	@ 0x80
 8003b24:	045b      	lsls	r3, r3, #17
 8003b26:	e001      	b.n	8003b2c <HAL_ADC_ConfigChannel+0x144>
 8003b28:	2380      	movs	r3, #128	@ 0x80
 8003b2a:	041b      	lsls	r3, r3, #16
 8003b2c:	4a2f      	ldr	r2, [pc, #188]	@ (8003bec <HAL_ADC_ConfigChannel+0x204>)
 8003b2e:	430b      	orrs	r3, r1
 8003b30:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b10      	cmp	r3, #16
 8003b38:	d14a      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8003bf0 <HAL_ADC_ConfigChannel+0x208>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	492d      	ldr	r1, [pc, #180]	@ (8003bf4 <HAL_ADC_ConfigChannel+0x20c>)
 8003b40:	0018      	movs	r0, r3
 8003b42:	f7fc fafd 	bl	8000140 <__udivsi3>
 8003b46:	0003      	movs	r3, r0
 8003b48:	001a      	movs	r2, r3
 8003b4a:	0013      	movs	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	189b      	adds	r3, r3, r2
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b54:	e002      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f9      	bne.n	8003b56 <HAL_ADC_ConfigChannel+0x16e>
 8003b62:	e035      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2101      	movs	r1, #1
 8003b70:	4099      	lsls	r1, r3
 8003b72:	000b      	movs	r3, r1
 8003b74:	43d9      	mvns	r1, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	400a      	ands	r2, r1
 8003b7c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b10      	cmp	r3, #16
 8003b84:	d007      	beq.n	8003b96 <HAL_ADC_ConfigChannel+0x1ae>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b11      	cmp	r3, #17
 8003b8c:	d003      	beq.n	8003b96 <HAL_ADC_ConfigChannel+0x1ae>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b12      	cmp	r3, #18
 8003b94:	d11c      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003b96:	4b15      	ldr	r3, [pc, #84]	@ (8003bec <HAL_ADC_ConfigChannel+0x204>)
 8003b98:	6819      	ldr	r1, [r3, #0]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b10      	cmp	r3, #16
 8003ba0:	d007      	beq.n	8003bb2 <HAL_ADC_ConfigChannel+0x1ca>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b11      	cmp	r3, #17
 8003ba8:	d101      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x1c6>
 8003baa:	4b13      	ldr	r3, [pc, #76]	@ (8003bf8 <HAL_ADC_ConfigChannel+0x210>)
 8003bac:	e002      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x1cc>
 8003bae:	4b13      	ldr	r3, [pc, #76]	@ (8003bfc <HAL_ADC_ConfigChannel+0x214>)
 8003bb0:	e000      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x1cc>
 8003bb2:	4b13      	ldr	r3, [pc, #76]	@ (8003c00 <HAL_ADC_ConfigChannel+0x218>)
 8003bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8003bec <HAL_ADC_ConfigChannel+0x204>)
 8003bb6:	400b      	ands	r3, r1
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	e009      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003bc8:	230f      	movs	r3, #15
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	2201      	movs	r2, #1
 8003bce:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2234      	movs	r2, #52	@ 0x34
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003bd8:	230f      	movs	r3, #15
 8003bda:	18fb      	adds	r3, r7, r3
 8003bdc:	781b      	ldrb	r3, [r3, #0]
}
 8003bde:	0018      	movs	r0, r3
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b004      	add	sp, #16
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	46c0      	nop			@ (mov r8, r8)
 8003be8:	00001001 	.word	0x00001001
 8003bec:	40012708 	.word	0x40012708
 8003bf0:	2000005c 	.word	0x2000005c
 8003bf4:	000f4240 	.word	0x000f4240
 8003bf8:	ffbfffff 	.word	0xffbfffff
 8003bfc:	feffffff 	.word	0xfeffffff
 8003c00:	ff7fffff 	.word	0xff7fffff

08003c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	0002      	movs	r2, r0
 8003c0c:	1dfb      	adds	r3, r7, #7
 8003c0e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c10:	1dfb      	adds	r3, r7, #7
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c16:	d809      	bhi.n	8003c2c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c18:	1dfb      	adds	r3, r7, #7
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	001a      	movs	r2, r3
 8003c1e:	231f      	movs	r3, #31
 8003c20:	401a      	ands	r2, r3
 8003c22:	4b04      	ldr	r3, [pc, #16]	@ (8003c34 <__NVIC_EnableIRQ+0x30>)
 8003c24:	2101      	movs	r1, #1
 8003c26:	4091      	lsls	r1, r2
 8003c28:	000a      	movs	r2, r1
 8003c2a:	601a      	str	r2, [r3, #0]
  }
}
 8003c2c:	46c0      	nop			@ (mov r8, r8)
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	b002      	add	sp, #8
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	e000e100 	.word	0xe000e100

08003c38 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	0002      	movs	r2, r0
 8003c40:	1dfb      	adds	r3, r7, #7
 8003c42:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c44:	1dfb      	adds	r3, r7, #7
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c4a:	d810      	bhi.n	8003c6e <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c4c:	1dfb      	adds	r3, r7, #7
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	001a      	movs	r2, r3
 8003c52:	231f      	movs	r3, #31
 8003c54:	4013      	ands	r3, r2
 8003c56:	4908      	ldr	r1, [pc, #32]	@ (8003c78 <__NVIC_DisableIRQ+0x40>)
 8003c58:	2201      	movs	r2, #1
 8003c5a:	409a      	lsls	r2, r3
 8003c5c:	0013      	movs	r3, r2
 8003c5e:	2280      	movs	r2, #128	@ 0x80
 8003c60:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003c62:	f3bf 8f4f 	dsb	sy
}
 8003c66:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8003c68:	f3bf 8f6f 	isb	sy
}
 8003c6c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8003c6e:	46c0      	nop			@ (mov r8, r8)
 8003c70:	46bd      	mov	sp, r7
 8003c72:	b002      	add	sp, #8
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	46c0      	nop			@ (mov r8, r8)
 8003c78:	e000e100 	.word	0xe000e100

08003c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c7c:	b590      	push	{r4, r7, lr}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	0002      	movs	r2, r0
 8003c84:	6039      	str	r1, [r7, #0]
 8003c86:	1dfb      	adds	r3, r7, #7
 8003c88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c8a:	1dfb      	adds	r3, r7, #7
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c90:	d828      	bhi.n	8003ce4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c92:	4a2f      	ldr	r2, [pc, #188]	@ (8003d50 <__NVIC_SetPriority+0xd4>)
 8003c94:	1dfb      	adds	r3, r7, #7
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	b25b      	sxtb	r3, r3
 8003c9a:	089b      	lsrs	r3, r3, #2
 8003c9c:	33c0      	adds	r3, #192	@ 0xc0
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	589b      	ldr	r3, [r3, r2]
 8003ca2:	1dfa      	adds	r2, r7, #7
 8003ca4:	7812      	ldrb	r2, [r2, #0]
 8003ca6:	0011      	movs	r1, r2
 8003ca8:	2203      	movs	r2, #3
 8003caa:	400a      	ands	r2, r1
 8003cac:	00d2      	lsls	r2, r2, #3
 8003cae:	21ff      	movs	r1, #255	@ 0xff
 8003cb0:	4091      	lsls	r1, r2
 8003cb2:	000a      	movs	r2, r1
 8003cb4:	43d2      	mvns	r2, r2
 8003cb6:	401a      	ands	r2, r3
 8003cb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	019b      	lsls	r3, r3, #6
 8003cbe:	22ff      	movs	r2, #255	@ 0xff
 8003cc0:	401a      	ands	r2, r3
 8003cc2:	1dfb      	adds	r3, r7, #7
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	2303      	movs	r3, #3
 8003cca:	4003      	ands	r3, r0
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cd0:	481f      	ldr	r0, [pc, #124]	@ (8003d50 <__NVIC_SetPriority+0xd4>)
 8003cd2:	1dfb      	adds	r3, r7, #7
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	b25b      	sxtb	r3, r3
 8003cd8:	089b      	lsrs	r3, r3, #2
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	33c0      	adds	r3, #192	@ 0xc0
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003ce2:	e031      	b.n	8003d48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8003d54 <__NVIC_SetPriority+0xd8>)
 8003ce6:	1dfb      	adds	r3, r7, #7
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	0019      	movs	r1, r3
 8003cec:	230f      	movs	r3, #15
 8003cee:	400b      	ands	r3, r1
 8003cf0:	3b08      	subs	r3, #8
 8003cf2:	089b      	lsrs	r3, r3, #2
 8003cf4:	3306      	adds	r3, #6
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	18d3      	adds	r3, r2, r3
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	1dfa      	adds	r2, r7, #7
 8003d00:	7812      	ldrb	r2, [r2, #0]
 8003d02:	0011      	movs	r1, r2
 8003d04:	2203      	movs	r2, #3
 8003d06:	400a      	ands	r2, r1
 8003d08:	00d2      	lsls	r2, r2, #3
 8003d0a:	21ff      	movs	r1, #255	@ 0xff
 8003d0c:	4091      	lsls	r1, r2
 8003d0e:	000a      	movs	r2, r1
 8003d10:	43d2      	mvns	r2, r2
 8003d12:	401a      	ands	r2, r3
 8003d14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	019b      	lsls	r3, r3, #6
 8003d1a:	22ff      	movs	r2, #255	@ 0xff
 8003d1c:	401a      	ands	r2, r3
 8003d1e:	1dfb      	adds	r3, r7, #7
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	0018      	movs	r0, r3
 8003d24:	2303      	movs	r3, #3
 8003d26:	4003      	ands	r3, r0
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d2c:	4809      	ldr	r0, [pc, #36]	@ (8003d54 <__NVIC_SetPriority+0xd8>)
 8003d2e:	1dfb      	adds	r3, r7, #7
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	001c      	movs	r4, r3
 8003d34:	230f      	movs	r3, #15
 8003d36:	4023      	ands	r3, r4
 8003d38:	3b08      	subs	r3, #8
 8003d3a:	089b      	lsrs	r3, r3, #2
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	3306      	adds	r3, #6
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	18c3      	adds	r3, r0, r3
 8003d44:	3304      	adds	r3, #4
 8003d46:	601a      	str	r2, [r3, #0]
}
 8003d48:	46c0      	nop			@ (mov r8, r8)
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	b003      	add	sp, #12
 8003d4e:	bd90      	pop	{r4, r7, pc}
 8003d50:	e000e100 	.word	0xe000e100
 8003d54:	e000ed00 	.word	0xe000ed00

08003d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	1e5a      	subs	r2, r3, #1
 8003d64:	2380      	movs	r3, #128	@ 0x80
 8003d66:	045b      	lsls	r3, r3, #17
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d301      	bcc.n	8003d70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e010      	b.n	8003d92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d70:	4b0a      	ldr	r3, [pc, #40]	@ (8003d9c <SysTick_Config+0x44>)
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	3a01      	subs	r2, #1
 8003d76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d78:	2301      	movs	r3, #1
 8003d7a:	425b      	negs	r3, r3
 8003d7c:	2103      	movs	r1, #3
 8003d7e:	0018      	movs	r0, r3
 8003d80:	f7ff ff7c 	bl	8003c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d84:	4b05      	ldr	r3, [pc, #20]	@ (8003d9c <SysTick_Config+0x44>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d8a:	4b04      	ldr	r3, [pc, #16]	@ (8003d9c <SysTick_Config+0x44>)
 8003d8c:	2207      	movs	r2, #7
 8003d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	0018      	movs	r0, r3
 8003d94:	46bd      	mov	sp, r7
 8003d96:	b002      	add	sp, #8
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	46c0      	nop			@ (mov r8, r8)
 8003d9c:	e000e010 	.word	0xe000e010

08003da0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	607a      	str	r2, [r7, #4]
 8003daa:	210f      	movs	r1, #15
 8003dac:	187b      	adds	r3, r7, r1
 8003dae:	1c02      	adds	r2, r0, #0
 8003db0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	187b      	adds	r3, r7, r1
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	b25b      	sxtb	r3, r3
 8003dba:	0011      	movs	r1, r2
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f7ff ff5d 	bl	8003c7c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003dc2:	46c0      	nop			@ (mov r8, r8)
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	b004      	add	sp, #16
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	0002      	movs	r2, r0
 8003dd2:	1dfb      	adds	r3, r7, #7
 8003dd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dd6:	1dfb      	adds	r3, r7, #7
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	b25b      	sxtb	r3, r3
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f7ff ff11 	bl	8003c04 <__NVIC_EnableIRQ>
}
 8003de2:	46c0      	nop			@ (mov r8, r8)
 8003de4:	46bd      	mov	sp, r7
 8003de6:	b002      	add	sp, #8
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b082      	sub	sp, #8
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	0002      	movs	r2, r0
 8003df2:	1dfb      	adds	r3, r7, #7
 8003df4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003df6:	1dfb      	adds	r3, r7, #7
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	b25b      	sxtb	r3, r3
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	f7ff ff1b 	bl	8003c38 <__NVIC_DisableIRQ>
}
 8003e02:	46c0      	nop			@ (mov r8, r8)
 8003e04:	46bd      	mov	sp, r7
 8003e06:	b002      	add	sp, #8
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	0018      	movs	r0, r3
 8003e16:	f7ff ff9f 	bl	8003d58 <SysTick_Config>
 8003e1a:	0003      	movs	r3, r0
}
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b002      	add	sp, #8
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e036      	b.n	8003ea8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2221      	movs	r2, #33	@ 0x21
 8003e3e:	2102      	movs	r1, #2
 8003e40:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4a18      	ldr	r2, [pc, #96]	@ (8003eb0 <HAL_DMA_Init+0x8c>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003e5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f000 f9c4 	bl	8004218 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2221      	movs	r2, #33	@ 0x21
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b004      	add	sp, #16
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	ffffc00f 	.word	0xffffc00f

08003eb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec2:	2317      	movs	r3, #23
 8003ec4:	18fb      	adds	r3, r7, r3
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	5c9b      	ldrb	r3, [r3, r2]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_DMA_Start_IT+0x24>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e04f      	b.n	8003f78 <HAL_DMA_Start_IT+0xc4>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	2101      	movs	r1, #1
 8003ede:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2221      	movs	r2, #33	@ 0x21
 8003ee4:	5c9b      	ldrb	r3, [r3, r2]
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d13a      	bne.n	8003f62 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2221      	movs	r2, #33	@ 0x21
 8003ef0:	2102      	movs	r1, #2
 8003ef2:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2101      	movs	r1, #1
 8003f06:	438a      	bics	r2, r1
 8003f08:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	68b9      	ldr	r1, [r7, #8]
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f954 	bl	80041be <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d008      	beq.n	8003f30 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	210e      	movs	r1, #14
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	e00f      	b.n	8003f50 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	210a      	movs	r1, #10
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2104      	movs	r1, #4
 8003f4c:	438a      	bics	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	e007      	b.n	8003f72 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2220      	movs	r2, #32
 8003f66:	2100      	movs	r1, #0
 8003f68:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f6a:	2317      	movs	r3, #23
 8003f6c:	18fb      	adds	r3, r7, r3
 8003f6e:	2202      	movs	r2, #2
 8003f70:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003f72:	2317      	movs	r3, #23
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	781b      	ldrb	r3, [r3, #0]
}
 8003f78:	0018      	movs	r0, r3
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	b006      	add	sp, #24
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2221      	movs	r2, #33	@ 0x21
 8003f8c:	5c9b      	ldrb	r3, [r3, r2]
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d008      	beq.n	8003fa6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2204      	movs	r2, #4
 8003f98:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e020      	b.n	8003fe8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	210e      	movs	r1, #14
 8003fb2:	438a      	bics	r2, r1
 8003fb4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	438a      	bics	r2, r1
 8003fc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fce:	2101      	movs	r1, #1
 8003fd0:	4091      	lsls	r1, r2
 8003fd2:	000a      	movs	r2, r1
 8003fd4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2221      	movs	r2, #33	@ 0x21
 8003fda:	2101      	movs	r1, #1
 8003fdc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	0018      	movs	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	b002      	add	sp, #8
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff8:	210f      	movs	r1, #15
 8003ffa:	187b      	adds	r3, r7, r1
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2221      	movs	r2, #33	@ 0x21
 8004004:	5c9b      	ldrb	r3, [r3, r2]
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d006      	beq.n	800401a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2204      	movs	r2, #4
 8004010:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8004012:	187b      	adds	r3, r7, r1
 8004014:	2201      	movs	r2, #1
 8004016:	701a      	strb	r2, [r3, #0]
 8004018:	e028      	b.n	800406c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	210e      	movs	r1, #14
 8004026:	438a      	bics	r2, r1
 8004028:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2101      	movs	r1, #1
 8004036:	438a      	bics	r2, r1
 8004038:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004042:	2101      	movs	r1, #1
 8004044:	4091      	lsls	r1, r2
 8004046:	000a      	movs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2221      	movs	r2, #33	@ 0x21
 800404e:	2101      	movs	r1, #1
 8004050:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2220      	movs	r2, #32
 8004056:	2100      	movs	r1, #0
 8004058:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800405e:	2b00      	cmp	r3, #0
 8004060:	d004      	beq.n	800406c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	0010      	movs	r0, r2
 800406a:	4798      	blx	r3
    }
  }
  return status;
 800406c:	230f      	movs	r3, #15
 800406e:	18fb      	adds	r3, r7, r3
 8004070:	781b      	ldrb	r3, [r3, #0]
}
 8004072:	0018      	movs	r0, r3
 8004074:	46bd      	mov	sp, r7
 8004076:	b004      	add	sp, #16
 8004078:	bd80      	pop	{r7, pc}

0800407a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004096:	2204      	movs	r2, #4
 8004098:	409a      	lsls	r2, r3
 800409a:	0013      	movs	r3, r2
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	4013      	ands	r3, r2
 80040a0:	d024      	beq.n	80040ec <HAL_DMA_IRQHandler+0x72>
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2204      	movs	r2, #4
 80040a6:	4013      	ands	r3, r2
 80040a8:	d020      	beq.n	80040ec <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2220      	movs	r2, #32
 80040b2:	4013      	ands	r3, r2
 80040b4:	d107      	bne.n	80040c6 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2104      	movs	r1, #4
 80040c2:	438a      	bics	r2, r1
 80040c4:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ce:	2104      	movs	r1, #4
 80040d0:	4091      	lsls	r1, r2
 80040d2:	000a      	movs	r2, r1
 80040d4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d100      	bne.n	80040e0 <HAL_DMA_IRQHandler+0x66>
 80040de:	e06a      	b.n	80041b6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	0010      	movs	r0, r2
 80040e8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80040ea:	e064      	b.n	80041b6 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f0:	2202      	movs	r2, #2
 80040f2:	409a      	lsls	r2, r3
 80040f4:	0013      	movs	r3, r2
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4013      	ands	r3, r2
 80040fa:	d02b      	beq.n	8004154 <HAL_DMA_IRQHandler+0xda>
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2202      	movs	r2, #2
 8004100:	4013      	ands	r3, r2
 8004102:	d027      	beq.n	8004154 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2220      	movs	r2, #32
 800410c:	4013      	ands	r3, r2
 800410e:	d10b      	bne.n	8004128 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	210a      	movs	r1, #10
 800411c:	438a      	bics	r2, r1
 800411e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2221      	movs	r2, #33	@ 0x21
 8004124:	2101      	movs	r1, #1
 8004126:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004130:	2102      	movs	r1, #2
 8004132:	4091      	lsls	r1, r2
 8004134:	000a      	movs	r2, r1
 8004136:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	2100      	movs	r1, #0
 800413e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004144:	2b00      	cmp	r3, #0
 8004146:	d036      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	0010      	movs	r0, r2
 8004150:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004152:	e030      	b.n	80041b6 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004158:	2208      	movs	r2, #8
 800415a:	409a      	lsls	r2, r3
 800415c:	0013      	movs	r3, r2
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4013      	ands	r3, r2
 8004162:	d028      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x13c>
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2208      	movs	r2, #8
 8004168:	4013      	ands	r3, r2
 800416a:	d024      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	210e      	movs	r1, #14
 8004178:	438a      	bics	r2, r1
 800417a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004184:	2101      	movs	r1, #1
 8004186:	4091      	lsls	r1, r2
 8004188:	000a      	movs	r2, r1
 800418a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2221      	movs	r2, #33	@ 0x21
 8004196:	2101      	movs	r1, #1
 8004198:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2220      	movs	r2, #32
 800419e:	2100      	movs	r1, #0
 80041a0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d005      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	0010      	movs	r0, r2
 80041b2:	4798      	blx	r3
    }
  }
}
 80041b4:	e7ff      	b.n	80041b6 <HAL_DMA_IRQHandler+0x13c>
 80041b6:	46c0      	nop			@ (mov r8, r8)
 80041b8:	46bd      	mov	sp, r7
 80041ba:	b004      	add	sp, #16
 80041bc:	bd80      	pop	{r7, pc}

080041be <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b084      	sub	sp, #16
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	607a      	str	r2, [r7, #4]
 80041ca:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d4:	2101      	movs	r1, #1
 80041d6:	4091      	lsls	r1, r2
 80041d8:	000a      	movs	r2, r1
 80041da:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2b10      	cmp	r3, #16
 80041ea:	d108      	bne.n	80041fe <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80041fc:	e007      	b.n	800420e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	60da      	str	r2, [r3, #12]
}
 800420e:	46c0      	nop			@ (mov r8, r8)
 8004210:	46bd      	mov	sp, r7
 8004212:	b004      	add	sp, #16
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a08      	ldr	r2, [pc, #32]	@ (8004248 <DMA_CalcBaseAndBitshift+0x30>)
 8004226:	4694      	mov	ip, r2
 8004228:	4463      	add	r3, ip
 800422a:	2114      	movs	r1, #20
 800422c:	0018      	movs	r0, r3
 800422e:	f7fb ff87 	bl	8000140 <__udivsi3>
 8004232:	0003      	movs	r3, r0
 8004234:	009a      	lsls	r2, r3, #2
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a03      	ldr	r2, [pc, #12]	@ (800424c <DMA_CalcBaseAndBitshift+0x34>)
 800423e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8004240:	46c0      	nop			@ (mov r8, r8)
 8004242:	46bd      	mov	sp, r7
 8004244:	b002      	add	sp, #8
 8004246:	bd80      	pop	{r7, pc}
 8004248:	bffdfff8 	.word	0xbffdfff8
 800424c:	40020000 	.word	0x40020000

08004250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800425a:	2300      	movs	r3, #0
 800425c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800425e:	e155      	b.n	800450c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2101      	movs	r1, #1
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4091      	lsls	r1, r2
 800426a:	000a      	movs	r2, r1
 800426c:	4013      	ands	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d100      	bne.n	8004278 <HAL_GPIO_Init+0x28>
 8004276:	e146      	b.n	8004506 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2203      	movs	r2, #3
 800427e:	4013      	ands	r3, r2
 8004280:	2b01      	cmp	r3, #1
 8004282:	d005      	beq.n	8004290 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2203      	movs	r2, #3
 800428a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800428c:	2b02      	cmp	r3, #2
 800428e:	d130      	bne.n	80042f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	2203      	movs	r2, #3
 800429c:	409a      	lsls	r2, r3
 800429e:	0013      	movs	r3, r2
 80042a0:	43da      	mvns	r2, r3
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	4013      	ands	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	409a      	lsls	r2, r3
 80042b2:	0013      	movs	r3, r2
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042c6:	2201      	movs	r2, #1
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	409a      	lsls	r2, r3
 80042cc:	0013      	movs	r3, r2
 80042ce:	43da      	mvns	r2, r3
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	4013      	ands	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	091b      	lsrs	r3, r3, #4
 80042dc:	2201      	movs	r2, #1
 80042de:	401a      	ands	r2, r3
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	409a      	lsls	r2, r3
 80042e4:	0013      	movs	r3, r2
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2203      	movs	r2, #3
 80042f8:	4013      	ands	r3, r2
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	d017      	beq.n	800432e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	2203      	movs	r2, #3
 800430a:	409a      	lsls	r2, r3
 800430c:	0013      	movs	r3, r2
 800430e:	43da      	mvns	r2, r3
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	4013      	ands	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	409a      	lsls	r2, r3
 8004320:	0013      	movs	r3, r2
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2203      	movs	r2, #3
 8004334:	4013      	ands	r3, r2
 8004336:	2b02      	cmp	r3, #2
 8004338:	d123      	bne.n	8004382 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	08da      	lsrs	r2, r3, #3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3208      	adds	r2, #8
 8004342:	0092      	lsls	r2, r2, #2
 8004344:	58d3      	ldr	r3, [r2, r3]
 8004346:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	2207      	movs	r2, #7
 800434c:	4013      	ands	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	220f      	movs	r2, #15
 8004352:	409a      	lsls	r2, r3
 8004354:	0013      	movs	r3, r2
 8004356:	43da      	mvns	r2, r3
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	4013      	ands	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2107      	movs	r1, #7
 8004366:	400b      	ands	r3, r1
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	409a      	lsls	r2, r3
 800436c:	0013      	movs	r3, r2
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	08da      	lsrs	r2, r3, #3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3208      	adds	r2, #8
 800437c:	0092      	lsls	r2, r2, #2
 800437e:	6939      	ldr	r1, [r7, #16]
 8004380:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	2203      	movs	r2, #3
 800438e:	409a      	lsls	r2, r3
 8004390:	0013      	movs	r3, r2
 8004392:	43da      	mvns	r2, r3
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	4013      	ands	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2203      	movs	r2, #3
 80043a0:	401a      	ands	r2, r3
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	409a      	lsls	r2, r3
 80043a8:	0013      	movs	r3, r2
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	23c0      	movs	r3, #192	@ 0xc0
 80043bc:	029b      	lsls	r3, r3, #10
 80043be:	4013      	ands	r3, r2
 80043c0:	d100      	bne.n	80043c4 <HAL_GPIO_Init+0x174>
 80043c2:	e0a0      	b.n	8004506 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043c4:	4b57      	ldr	r3, [pc, #348]	@ (8004524 <HAL_GPIO_Init+0x2d4>)
 80043c6:	699a      	ldr	r2, [r3, #24]
 80043c8:	4b56      	ldr	r3, [pc, #344]	@ (8004524 <HAL_GPIO_Init+0x2d4>)
 80043ca:	2101      	movs	r1, #1
 80043cc:	430a      	orrs	r2, r1
 80043ce:	619a      	str	r2, [r3, #24]
 80043d0:	4b54      	ldr	r3, [pc, #336]	@ (8004524 <HAL_GPIO_Init+0x2d4>)
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	2201      	movs	r2, #1
 80043d6:	4013      	ands	r3, r2
 80043d8:	60bb      	str	r3, [r7, #8]
 80043da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80043dc:	4a52      	ldr	r2, [pc, #328]	@ (8004528 <HAL_GPIO_Init+0x2d8>)
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	089b      	lsrs	r3, r3, #2
 80043e2:	3302      	adds	r3, #2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	589b      	ldr	r3, [r3, r2]
 80043e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2203      	movs	r2, #3
 80043ee:	4013      	ands	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	220f      	movs	r2, #15
 80043f4:	409a      	lsls	r2, r3
 80043f6:	0013      	movs	r3, r2
 80043f8:	43da      	mvns	r2, r3
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	4013      	ands	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	2390      	movs	r3, #144	@ 0x90
 8004404:	05db      	lsls	r3, r3, #23
 8004406:	429a      	cmp	r2, r3
 8004408:	d019      	beq.n	800443e <HAL_GPIO_Init+0x1ee>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a47      	ldr	r2, [pc, #284]	@ (800452c <HAL_GPIO_Init+0x2dc>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d013      	beq.n	800443a <HAL_GPIO_Init+0x1ea>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a46      	ldr	r2, [pc, #280]	@ (8004530 <HAL_GPIO_Init+0x2e0>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d00d      	beq.n	8004436 <HAL_GPIO_Init+0x1e6>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a45      	ldr	r2, [pc, #276]	@ (8004534 <HAL_GPIO_Init+0x2e4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d007      	beq.n	8004432 <HAL_GPIO_Init+0x1e2>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a44      	ldr	r2, [pc, #272]	@ (8004538 <HAL_GPIO_Init+0x2e8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d101      	bne.n	800442e <HAL_GPIO_Init+0x1de>
 800442a:	2304      	movs	r3, #4
 800442c:	e008      	b.n	8004440 <HAL_GPIO_Init+0x1f0>
 800442e:	2305      	movs	r3, #5
 8004430:	e006      	b.n	8004440 <HAL_GPIO_Init+0x1f0>
 8004432:	2303      	movs	r3, #3
 8004434:	e004      	b.n	8004440 <HAL_GPIO_Init+0x1f0>
 8004436:	2302      	movs	r3, #2
 8004438:	e002      	b.n	8004440 <HAL_GPIO_Init+0x1f0>
 800443a:	2301      	movs	r3, #1
 800443c:	e000      	b.n	8004440 <HAL_GPIO_Init+0x1f0>
 800443e:	2300      	movs	r3, #0
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	2103      	movs	r1, #3
 8004444:	400a      	ands	r2, r1
 8004446:	0092      	lsls	r2, r2, #2
 8004448:	4093      	lsls	r3, r2
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004450:	4935      	ldr	r1, [pc, #212]	@ (8004528 <HAL_GPIO_Init+0x2d8>)
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	089b      	lsrs	r3, r3, #2
 8004456:	3302      	adds	r3, #2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800445e:	4b37      	ldr	r3, [pc, #220]	@ (800453c <HAL_GPIO_Init+0x2ec>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	43da      	mvns	r2, r3
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	4013      	ands	r3, r2
 800446c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	2380      	movs	r3, #128	@ 0x80
 8004474:	035b      	lsls	r3, r3, #13
 8004476:	4013      	ands	r3, r2
 8004478:	d003      	beq.n	8004482 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4313      	orrs	r3, r2
 8004480:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004482:	4b2e      	ldr	r3, [pc, #184]	@ (800453c <HAL_GPIO_Init+0x2ec>)
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004488:	4b2c      	ldr	r3, [pc, #176]	@ (800453c <HAL_GPIO_Init+0x2ec>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	43da      	mvns	r2, r3
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	4013      	ands	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	2380      	movs	r3, #128	@ 0x80
 800449e:	039b      	lsls	r3, r3, #14
 80044a0:	4013      	ands	r3, r2
 80044a2:	d003      	beq.n	80044ac <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80044ac:	4b23      	ldr	r3, [pc, #140]	@ (800453c <HAL_GPIO_Init+0x2ec>)
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80044b2:	4b22      	ldr	r3, [pc, #136]	@ (800453c <HAL_GPIO_Init+0x2ec>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	43da      	mvns	r2, r3
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	4013      	ands	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	2380      	movs	r3, #128	@ 0x80
 80044c8:	029b      	lsls	r3, r3, #10
 80044ca:	4013      	ands	r3, r2
 80044cc:	d003      	beq.n	80044d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80044d6:	4b19      	ldr	r3, [pc, #100]	@ (800453c <HAL_GPIO_Init+0x2ec>)
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80044dc:	4b17      	ldr	r3, [pc, #92]	@ (800453c <HAL_GPIO_Init+0x2ec>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	43da      	mvns	r2, r3
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	4013      	ands	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	2380      	movs	r3, #128	@ 0x80
 80044f2:	025b      	lsls	r3, r3, #9
 80044f4:	4013      	ands	r3, r2
 80044f6:	d003      	beq.n	8004500 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004500:	4b0e      	ldr	r3, [pc, #56]	@ (800453c <HAL_GPIO_Init+0x2ec>)
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	3301      	adds	r3, #1
 800450a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	40da      	lsrs	r2, r3
 8004514:	1e13      	subs	r3, r2, #0
 8004516:	d000      	beq.n	800451a <HAL_GPIO_Init+0x2ca>
 8004518:	e6a2      	b.n	8004260 <HAL_GPIO_Init+0x10>
  } 
}
 800451a:	46c0      	nop			@ (mov r8, r8)
 800451c:	46c0      	nop			@ (mov r8, r8)
 800451e:	46bd      	mov	sp, r7
 8004520:	b006      	add	sp, #24
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40021000 	.word	0x40021000
 8004528:	40010000 	.word	0x40010000
 800452c:	48000400 	.word	0x48000400
 8004530:	48000800 	.word	0x48000800
 8004534:	48000c00 	.word	0x48000c00
 8004538:	48001000 	.word	0x48001000
 800453c:	40010400 	.word	0x40010400

08004540 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	000a      	movs	r2, r1
 800454a:	1cbb      	adds	r3, r7, #2
 800454c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	1cba      	adds	r2, r7, #2
 8004554:	8812      	ldrh	r2, [r2, #0]
 8004556:	4013      	ands	r3, r2
 8004558:	d004      	beq.n	8004564 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800455a:	230f      	movs	r3, #15
 800455c:	18fb      	adds	r3, r7, r3
 800455e:	2201      	movs	r2, #1
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	e003      	b.n	800456c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004564:	230f      	movs	r3, #15
 8004566:	18fb      	adds	r3, r7, r3
 8004568:	2200      	movs	r2, #0
 800456a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800456c:	230f      	movs	r3, #15
 800456e:	18fb      	adds	r3, r7, r3
 8004570:	781b      	ldrb	r3, [r3, #0]
  }
 8004572:	0018      	movs	r0, r3
 8004574:	46bd      	mov	sp, r7
 8004576:	b004      	add	sp, #16
 8004578:	bd80      	pop	{r7, pc}

0800457a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b082      	sub	sp, #8
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	0008      	movs	r0, r1
 8004584:	0011      	movs	r1, r2
 8004586:	1cbb      	adds	r3, r7, #2
 8004588:	1c02      	adds	r2, r0, #0
 800458a:	801a      	strh	r2, [r3, #0]
 800458c:	1c7b      	adds	r3, r7, #1
 800458e:	1c0a      	adds	r2, r1, #0
 8004590:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004592:	1c7b      	adds	r3, r7, #1
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d004      	beq.n	80045a4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800459a:	1cbb      	adds	r3, r7, #2
 800459c:	881a      	ldrh	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045a2:	e003      	b.n	80045ac <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045a4:	1cbb      	adds	r3, r7, #2
 80045a6:	881a      	ldrh	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80045ac:	46c0      	nop			@ (mov r8, r8)
 80045ae:	46bd      	mov	sp, r7
 80045b0:	b002      	add	sp, #8
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	0002      	movs	r2, r0
 80045bc:	1dbb      	adds	r3, r7, #6
 80045be:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80045c0:	4b09      	ldr	r3, [pc, #36]	@ (80045e8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	1dba      	adds	r2, r7, #6
 80045c6:	8812      	ldrh	r2, [r2, #0]
 80045c8:	4013      	ands	r3, r2
 80045ca:	d008      	beq.n	80045de <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045cc:	4b06      	ldr	r3, [pc, #24]	@ (80045e8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80045ce:	1dba      	adds	r2, r7, #6
 80045d0:	8812      	ldrh	r2, [r2, #0]
 80045d2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045d4:	1dbb      	adds	r3, r7, #6
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	0018      	movs	r0, r3
 80045da:	f00a ff8d 	bl	800f4f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80045de:	46c0      	nop			@ (mov r8, r8)
 80045e0:	46bd      	mov	sp, r7
 80045e2:	b002      	add	sp, #8
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	46c0      	nop			@ (mov r8, r8)
 80045e8:	40010400 	.word	0x40010400

080045ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80045ec:	b590      	push	{r4, r7, lr}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e0e4      	b.n	80047c8 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a73      	ldr	r2, [pc, #460]	@ (80047d0 <HAL_PCD_Init+0x1e4>)
 8004602:	5c9b      	ldrb	r3, [r3, r2]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d108      	bne.n	800461c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	23a4      	movs	r3, #164	@ 0xa4
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	2100      	movs	r1, #0
 8004612:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	0018      	movs	r0, r3
 8004618:	f009 fa28 	bl	800da6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a6c      	ldr	r2, [pc, #432]	@ (80047d0 <HAL_PCD_Init+0x1e4>)
 8004620:	2103      	movs	r1, #3
 8004622:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	0018      	movs	r0, r3
 800462a:	f005 fa51 	bl	8009ad0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800462e:	230f      	movs	r3, #15
 8004630:	18fb      	adds	r3, r7, r3
 8004632:	2200      	movs	r2, #0
 8004634:	701a      	strb	r2, [r3, #0]
 8004636:	e047      	b.n	80046c8 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004638:	200f      	movs	r0, #15
 800463a:	183b      	adds	r3, r7, r0
 800463c:	781a      	ldrb	r2, [r3, #0]
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	0013      	movs	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	189b      	adds	r3, r3, r2
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	18cb      	adds	r3, r1, r3
 800464a:	3311      	adds	r3, #17
 800464c:	2201      	movs	r2, #1
 800464e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004650:	183b      	adds	r3, r7, r0
 8004652:	781a      	ldrb	r2, [r3, #0]
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	0013      	movs	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	189b      	adds	r3, r3, r2
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	18cb      	adds	r3, r1, r3
 8004660:	3310      	adds	r3, #16
 8004662:	183a      	adds	r2, r7, r0
 8004664:	7812      	ldrb	r2, [r2, #0]
 8004666:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004668:	183b      	adds	r3, r7, r0
 800466a:	781a      	ldrb	r2, [r3, #0]
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	0013      	movs	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	189b      	adds	r3, r3, r2
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	18cb      	adds	r3, r1, r3
 8004678:	3313      	adds	r3, #19
 800467a:	2200      	movs	r2, #0
 800467c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800467e:	183b      	adds	r3, r7, r0
 8004680:	781a      	ldrb	r2, [r3, #0]
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	0013      	movs	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	189b      	adds	r3, r3, r2
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	18cb      	adds	r3, r1, r3
 800468e:	3320      	adds	r3, #32
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004694:	183b      	adds	r3, r7, r0
 8004696:	781a      	ldrb	r2, [r3, #0]
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	0013      	movs	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	189b      	adds	r3, r3, r2
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	18cb      	adds	r3, r1, r3
 80046a4:	3324      	adds	r3, #36	@ 0x24
 80046a6:	2200      	movs	r2, #0
 80046a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80046aa:	183b      	adds	r3, r7, r0
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	0013      	movs	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	189b      	adds	r3, r3, r2
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	2200      	movs	r2, #0
 80046bc:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046be:	183b      	adds	r3, r7, r0
 80046c0:	781a      	ldrb	r2, [r3, #0]
 80046c2:	183b      	adds	r3, r7, r0
 80046c4:	3201      	adds	r2, #1
 80046c6:	701a      	strb	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	791b      	ldrb	r3, [r3, #4]
 80046cc:	210f      	movs	r1, #15
 80046ce:	187a      	adds	r2, r7, r1
 80046d0:	7812      	ldrb	r2, [r2, #0]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d3b0      	bcc.n	8004638 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046d6:	187b      	adds	r3, r7, r1
 80046d8:	2200      	movs	r2, #0
 80046da:	701a      	strb	r2, [r3, #0]
 80046dc:	e056      	b.n	800478c <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046de:	240f      	movs	r4, #15
 80046e0:	193b      	adds	r3, r7, r4
 80046e2:	781a      	ldrb	r2, [r3, #0]
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	2352      	movs	r3, #82	@ 0x52
 80046e8:	33ff      	adds	r3, #255	@ 0xff
 80046ea:	0019      	movs	r1, r3
 80046ec:	0013      	movs	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	189b      	adds	r3, r3, r2
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	18c3      	adds	r3, r0, r3
 80046f6:	185b      	adds	r3, r3, r1
 80046f8:	2200      	movs	r2, #0
 80046fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80046fc:	193b      	adds	r3, r7, r4
 80046fe:	781a      	ldrb	r2, [r3, #0]
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	23a8      	movs	r3, #168	@ 0xa8
 8004704:	0059      	lsls	r1, r3, #1
 8004706:	0013      	movs	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	189b      	adds	r3, r3, r2
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	18c3      	adds	r3, r0, r3
 8004710:	185b      	adds	r3, r3, r1
 8004712:	193a      	adds	r2, r7, r4
 8004714:	7812      	ldrb	r2, [r2, #0]
 8004716:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004718:	193b      	adds	r3, r7, r4
 800471a:	781a      	ldrb	r2, [r3, #0]
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	2354      	movs	r3, #84	@ 0x54
 8004720:	33ff      	adds	r3, #255	@ 0xff
 8004722:	0019      	movs	r1, r3
 8004724:	0013      	movs	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	189b      	adds	r3, r3, r2
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	18c3      	adds	r3, r0, r3
 800472e:	185b      	adds	r3, r3, r1
 8004730:	2200      	movs	r2, #0
 8004732:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004734:	193b      	adds	r3, r7, r4
 8004736:	781a      	ldrb	r2, [r3, #0]
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	23b0      	movs	r3, #176	@ 0xb0
 800473c:	0059      	lsls	r1, r3, #1
 800473e:	0013      	movs	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	189b      	adds	r3, r3, r2
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	18c3      	adds	r3, r0, r3
 8004748:	185b      	adds	r3, r3, r1
 800474a:	2200      	movs	r2, #0
 800474c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800474e:	193b      	adds	r3, r7, r4
 8004750:	781a      	ldrb	r2, [r3, #0]
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	23b2      	movs	r3, #178	@ 0xb2
 8004756:	0059      	lsls	r1, r3, #1
 8004758:	0013      	movs	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	189b      	adds	r3, r3, r2
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	18c3      	adds	r3, r0, r3
 8004762:	185b      	adds	r3, r3, r1
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004768:	193b      	adds	r3, r7, r4
 800476a:	781a      	ldrb	r2, [r3, #0]
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	23b4      	movs	r3, #180	@ 0xb4
 8004770:	0059      	lsls	r1, r3, #1
 8004772:	0013      	movs	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	189b      	adds	r3, r3, r2
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	18c3      	adds	r3, r0, r3
 800477c:	185b      	adds	r3, r3, r1
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004782:	193b      	adds	r3, r7, r4
 8004784:	781a      	ldrb	r2, [r3, #0]
 8004786:	193b      	adds	r3, r7, r4
 8004788:	3201      	adds	r2, #1
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	791b      	ldrb	r3, [r3, #4]
 8004790:	220f      	movs	r2, #15
 8004792:	18ba      	adds	r2, r7, r2
 8004794:	7812      	ldrb	r2, [r2, #0]
 8004796:	429a      	cmp	r2, r3
 8004798:	d3a1      	bcc.n	80046de <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6859      	ldr	r1, [r3, #4]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	f005 f9ae 	bl	8009b04 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a07      	ldr	r2, [pc, #28]	@ (80047d0 <HAL_PCD_Init+0x1e4>)
 80047b2:	2101      	movs	r1, #1
 80047b4:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	7a9b      	ldrb	r3, [r3, #10]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d103      	bne.n	80047c6 <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	0018      	movs	r0, r3
 80047c2:	f001 fd1f 	bl	8006204 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	0018      	movs	r0, r3
 80047ca:	46bd      	mov	sp, r7
 80047cc:	b005      	add	sp, #20
 80047ce:	bd90      	pop	{r4, r7, pc}
 80047d0:	00000291 	.word	0x00000291

080047d4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	23a4      	movs	r3, #164	@ 0xa4
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	5cd3      	ldrb	r3, [r2, r3]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d101      	bne.n	80047ec <HAL_PCD_Start+0x18>
 80047e8:	2302      	movs	r3, #2
 80047ea:	e014      	b.n	8004816 <HAL_PCD_Start+0x42>
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	23a4      	movs	r3, #164	@ 0xa4
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	2101      	movs	r1, #1
 80047f4:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	0018      	movs	r0, r3
 80047fc:	f005 f952 	bl	8009aa4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	0018      	movs	r0, r3
 8004806:	f007 f947 	bl	800ba98 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	23a4      	movs	r3, #164	@ 0xa4
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	2100      	movs	r1, #0
 8004812:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	0018      	movs	r0, r3
 8004818:	46bd      	mov	sp, r7
 800481a:	b002      	add	sp, #8
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	0018      	movs	r0, r3
 800482e:	f007 f949 	bl	800bac4 <USB_ReadInterrupts>
 8004832:	0003      	movs	r3, r0
 8004834:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	2380      	movs	r3, #128	@ 0x80
 800483a:	021b      	lsls	r3, r3, #8
 800483c:	4013      	ands	r3, r2
 800483e:	d004      	beq.n	800484a <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	0018      	movs	r0, r3
 8004844:	f000 fb60 	bl	8004f08 <PCD_EP_ISR_Handler>

    return;
 8004848:	e11d      	b.n	8004a86 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	2380      	movs	r3, #128	@ 0x80
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	4013      	ands	r3, r2
 8004852:	d015      	beq.n	8004880 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2244      	movs	r2, #68	@ 0x44
 800485a:	5a9b      	ldrh	r3, [r3, r2]
 800485c:	b29a      	uxth	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	498a      	ldr	r1, [pc, #552]	@ (8004a8c <HAL_PCD_IRQHandler+0x26c>)
 8004864:	400a      	ands	r2, r1
 8004866:	b291      	uxth	r1, r2
 8004868:	2244      	movs	r2, #68	@ 0x44
 800486a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	0018      	movs	r0, r3
 8004870:	f009 f987 	bl	800db82 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2100      	movs	r1, #0
 8004878:	0018      	movs	r0, r3
 800487a:	f000 f915 	bl	8004aa8 <HAL_PCD_SetAddress>

    return;
 800487e:	e102      	b.n	8004a86 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	2380      	movs	r3, #128	@ 0x80
 8004884:	01db      	lsls	r3, r3, #7
 8004886:	4013      	ands	r3, r2
 8004888:	d00c      	beq.n	80048a4 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2244      	movs	r2, #68	@ 0x44
 8004890:	5a9b      	ldrh	r3, [r3, r2]
 8004892:	b29a      	uxth	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	497d      	ldr	r1, [pc, #500]	@ (8004a90 <HAL_PCD_IRQHandler+0x270>)
 800489a:	400a      	ands	r2, r1
 800489c:	b291      	uxth	r1, r2
 800489e:	2244      	movs	r2, #68	@ 0x44
 80048a0:	5299      	strh	r1, [r3, r2]

    return;
 80048a2:	e0f0      	b.n	8004a86 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	2380      	movs	r3, #128	@ 0x80
 80048a8:	019b      	lsls	r3, r3, #6
 80048aa:	4013      	ands	r3, r2
 80048ac:	d00c      	beq.n	80048c8 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2244      	movs	r2, #68	@ 0x44
 80048b4:	5a9b      	ldrh	r3, [r3, r2]
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4975      	ldr	r1, [pc, #468]	@ (8004a94 <HAL_PCD_IRQHandler+0x274>)
 80048be:	400a      	ands	r2, r1
 80048c0:	b291      	uxth	r1, r2
 80048c2:	2244      	movs	r2, #68	@ 0x44
 80048c4:	5299      	strh	r1, [r3, r2]

    return;
 80048c6:	e0de      	b.n	8004a86 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	2380      	movs	r3, #128	@ 0x80
 80048cc:	015b      	lsls	r3, r3, #5
 80048ce:	4013      	ands	r3, r2
 80048d0:	d038      	beq.n	8004944 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2240      	movs	r2, #64	@ 0x40
 80048d8:	5a9b      	ldrh	r3, [r3, r2]
 80048da:	b29a      	uxth	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2104      	movs	r1, #4
 80048e2:	438a      	bics	r2, r1
 80048e4:	b291      	uxth	r1, r2
 80048e6:	2240      	movs	r2, #64	@ 0x40
 80048e8:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2240      	movs	r2, #64	@ 0x40
 80048f0:	5a9b      	ldrh	r3, [r3, r2]
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2108      	movs	r1, #8
 80048fa:	438a      	bics	r2, r1
 80048fc:	b291      	uxth	r1, r2
 80048fe:	2240      	movs	r2, #64	@ 0x40
 8004900:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	23b2      	movs	r3, #178	@ 0xb2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	5cd3      	ldrb	r3, [r2, r3]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d109      	bne.n	8004922 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	23b2      	movs	r3, #178	@ 0xb2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	2100      	movs	r1, #0
 8004916:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2100      	movs	r1, #0
 800491c:	0018      	movs	r0, r3
 800491e:	f001 fc9b 	bl	8006258 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	0018      	movs	r0, r3
 8004926:	f009 f96d 	bl	800dc04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2244      	movs	r2, #68	@ 0x44
 8004930:	5a9b      	ldrh	r3, [r3, r2]
 8004932:	b29a      	uxth	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4957      	ldr	r1, [pc, #348]	@ (8004a98 <HAL_PCD_IRQHandler+0x278>)
 800493a:	400a      	ands	r2, r1
 800493c:	b291      	uxth	r1, r2
 800493e:	2244      	movs	r2, #68	@ 0x44
 8004940:	5299      	strh	r1, [r3, r2]

    return;
 8004942:	e0a0      	b.n	8004a86 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	2380      	movs	r3, #128	@ 0x80
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	4013      	ands	r3, r2
 800494c:	d028      	beq.n	80049a0 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2240      	movs	r2, #64	@ 0x40
 8004954:	5a9b      	ldrh	r3, [r3, r2]
 8004956:	b29a      	uxth	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2108      	movs	r1, #8
 800495e:	430a      	orrs	r2, r1
 8004960:	b291      	uxth	r1, r2
 8004962:	2240      	movs	r2, #64	@ 0x40
 8004964:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2244      	movs	r2, #68	@ 0x44
 800496c:	5a9b      	ldrh	r3, [r3, r2]
 800496e:	b29a      	uxth	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4949      	ldr	r1, [pc, #292]	@ (8004a9c <HAL_PCD_IRQHandler+0x27c>)
 8004976:	400a      	ands	r2, r1
 8004978:	b291      	uxth	r1, r2
 800497a:	2244      	movs	r2, #68	@ 0x44
 800497c:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2240      	movs	r2, #64	@ 0x40
 8004984:	5a9b      	ldrh	r3, [r3, r2]
 8004986:	b29a      	uxth	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2104      	movs	r1, #4
 800498e:	430a      	orrs	r2, r1
 8004990:	b291      	uxth	r1, r2
 8004992:	2240      	movs	r2, #64	@ 0x40
 8004994:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	0018      	movs	r0, r3
 800499a:	f009 f917 	bl	800dbcc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800499e:	e072      	b.n	8004a86 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2280      	movs	r2, #128	@ 0x80
 80049a4:	4013      	ands	r3, r2
 80049a6:	d046      	beq.n	8004a36 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2244      	movs	r2, #68	@ 0x44
 80049ae:	5a9b      	ldrh	r3, [r3, r2]
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2180      	movs	r1, #128	@ 0x80
 80049b8:	438a      	bics	r2, r1
 80049ba:	b291      	uxth	r1, r2
 80049bc:	2244      	movs	r2, #68	@ 0x44
 80049be:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	23b2      	movs	r3, #178	@ 0xb2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	5cd3      	ldrb	r3, [r2, r3]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d12f      	bne.n	8004a2c <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2240      	movs	r2, #64	@ 0x40
 80049d2:	5a9b      	ldrh	r3, [r3, r2]
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2104      	movs	r1, #4
 80049dc:	430a      	orrs	r2, r1
 80049de:	b291      	uxth	r1, r2
 80049e0:	2240      	movs	r2, #64	@ 0x40
 80049e2:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2240      	movs	r2, #64	@ 0x40
 80049ea:	5a9b      	ldrh	r3, [r3, r2]
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2108      	movs	r1, #8
 80049f4:	430a      	orrs	r2, r1
 80049f6:	b291      	uxth	r1, r2
 80049f8:	2240      	movs	r2, #64	@ 0x40
 80049fa:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	23b2      	movs	r3, #178	@ 0xb2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	2101      	movs	r1, #1
 8004a04:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2254      	movs	r2, #84	@ 0x54
 8004a0c:	5a9b      	ldrh	r3, [r3, r2]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	089b      	lsrs	r3, r3, #2
 8004a12:	223c      	movs	r2, #60	@ 0x3c
 8004a14:	4013      	ands	r3, r2
 8004a16:	0019      	movs	r1, r3
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	23b3      	movs	r3, #179	@ 0xb3
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2101      	movs	r1, #1
 8004a24:	0018      	movs	r0, r3
 8004a26:	f001 fc17 	bl	8006258 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004a2a:	e02c      	b.n	8004a86 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f009 f8cc 	bl	800dbcc <HAL_PCD_SuspendCallback>
    return;
 8004a34:	e027      	b.n	8004a86 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	2380      	movs	r3, #128	@ 0x80
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	d010      	beq.n	8004a62 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2244      	movs	r2, #68	@ 0x44
 8004a46:	5a9b      	ldrh	r3, [r3, r2]
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4914      	ldr	r1, [pc, #80]	@ (8004aa0 <HAL_PCD_IRQHandler+0x280>)
 8004a50:	400a      	ands	r2, r1
 8004a52:	b291      	uxth	r1, r2
 8004a54:	2244      	movs	r2, #68	@ 0x44
 8004a56:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	f009 f882 	bl	800db64 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004a60:	e011      	b.n	8004a86 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	2380      	movs	r3, #128	@ 0x80
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	4013      	ands	r3, r2
 8004a6a:	d00c      	beq.n	8004a86 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2244      	movs	r2, #68	@ 0x44
 8004a72:	5a9b      	ldrh	r3, [r3, r2]
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	490a      	ldr	r1, [pc, #40]	@ (8004aa4 <HAL_PCD_IRQHandler+0x284>)
 8004a7c:	400a      	ands	r2, r1
 8004a7e:	b291      	uxth	r1, r2
 8004a80:	2244      	movs	r2, #68	@ 0x44
 8004a82:	5299      	strh	r1, [r3, r2]

    return;
 8004a84:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004a86:	46bd      	mov	sp, r7
 8004a88:	b004      	add	sp, #16
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	fffffbff 	.word	0xfffffbff
 8004a90:	ffffbfff 	.word	0xffffbfff
 8004a94:	ffffdfff 	.word	0xffffdfff
 8004a98:	ffffefff 	.word	0xffffefff
 8004a9c:	fffff7ff 	.word	0xfffff7ff
 8004aa0:	fffffdff 	.word	0xfffffdff
 8004aa4:	fffffeff 	.word	0xfffffeff

08004aa8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	000a      	movs	r2, r1
 8004ab2:	1cfb      	adds	r3, r7, #3
 8004ab4:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	23a4      	movs	r3, #164	@ 0xa4
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	5cd3      	ldrb	r3, [r2, r3]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_PCD_SetAddress+0x1e>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	e016      	b.n	8004af4 <HAL_PCD_SetAddress+0x4c>
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	23a4      	movs	r3, #164	@ 0xa4
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	2101      	movs	r1, #1
 8004ace:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	1cfa      	adds	r2, r7, #3
 8004ad4:	7812      	ldrb	r2, [r2, #0]
 8004ad6:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	1cfb      	adds	r3, r7, #3
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	0019      	movs	r1, r3
 8004ae2:	0010      	movs	r0, r2
 8004ae4:	f006 ffc4 	bl	800ba70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	23a4      	movs	r3, #164	@ 0xa4
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	2100      	movs	r1, #0
 8004af0:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	0018      	movs	r0, r3
 8004af6:	46bd      	mov	sp, r7
 8004af8:	b002      	add	sp, #8
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004afc:	b590      	push	{r4, r7, lr}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	000c      	movs	r4, r1
 8004b06:	0010      	movs	r0, r2
 8004b08:	0019      	movs	r1, r3
 8004b0a:	1cfb      	adds	r3, r7, #3
 8004b0c:	1c22      	adds	r2, r4, #0
 8004b0e:	701a      	strb	r2, [r3, #0]
 8004b10:	003b      	movs	r3, r7
 8004b12:	1c02      	adds	r2, r0, #0
 8004b14:	801a      	strh	r2, [r3, #0]
 8004b16:	1cbb      	adds	r3, r7, #2
 8004b18:	1c0a      	adds	r2, r1, #0
 8004b1a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b1c:	230b      	movs	r3, #11
 8004b1e:	18fb      	adds	r3, r7, r3
 8004b20:	2200      	movs	r2, #0
 8004b22:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b24:	1cfb      	adds	r3, r7, #3
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	b25b      	sxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	da0f      	bge.n	8004b4e <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b2e:	1cfb      	adds	r3, r7, #3
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	2207      	movs	r2, #7
 8004b34:	401a      	ands	r2, r3
 8004b36:	0013      	movs	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	189b      	adds	r3, r3, r2
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	3310      	adds	r3, #16
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	18d3      	adds	r3, r2, r3
 8004b44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	705a      	strb	r2, [r3, #1]
 8004b4c:	e00f      	b.n	8004b6e <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b4e:	1cfb      	adds	r3, r7, #3
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	2207      	movs	r2, #7
 8004b54:	401a      	ands	r2, r3
 8004b56:	0013      	movs	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	189b      	adds	r3, r3, r2
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	3351      	adds	r3, #81	@ 0x51
 8004b60:	33ff      	adds	r3, #255	@ 0xff
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	18d3      	adds	r3, r2, r3
 8004b66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b6e:	1cfb      	adds	r3, r7, #3
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	2207      	movs	r2, #7
 8004b74:	4013      	ands	r3, r2
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b7c:	003b      	movs	r3, r7
 8004b7e:	881a      	ldrh	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	1cba      	adds	r2, r7, #2
 8004b88:	7812      	ldrb	r2, [r2, #0]
 8004b8a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b8c:	1cbb      	adds	r3, r7, #2
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d102      	bne.n	8004b9a <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	23a4      	movs	r3, #164	@ 0xa4
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	5cd3      	ldrb	r3, [r2, r3]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d101      	bne.n	8004baa <HAL_PCD_EP_Open+0xae>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	e013      	b.n	8004bd2 <HAL_PCD_EP_Open+0xd6>
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	23a4      	movs	r3, #164	@ 0xa4
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	0011      	movs	r1, r2
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f004 ffbd 	bl	8009b3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	23a4      	movs	r3, #164	@ 0xa4
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	2100      	movs	r1, #0
 8004bca:	54d1      	strb	r1, [r2, r3]

  return ret;
 8004bcc:	230b      	movs	r3, #11
 8004bce:	18fb      	adds	r3, r7, r3
 8004bd0:	781b      	ldrb	r3, [r3, #0]
}
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	b005      	add	sp, #20
 8004bd8:	bd90      	pop	{r4, r7, pc}

08004bda <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	000a      	movs	r2, r1
 8004be4:	1cfb      	adds	r3, r7, #3
 8004be6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004be8:	1cfb      	adds	r3, r7, #3
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	b25b      	sxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	da0f      	bge.n	8004c12 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bf2:	1cfb      	adds	r3, r7, #3
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	2207      	movs	r2, #7
 8004bf8:	401a      	ands	r2, r3
 8004bfa:	0013      	movs	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	189b      	adds	r3, r3, r2
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	3310      	adds	r3, #16
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	18d3      	adds	r3, r2, r3
 8004c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	705a      	strb	r2, [r3, #1]
 8004c10:	e00f      	b.n	8004c32 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c12:	1cfb      	adds	r3, r7, #3
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	2207      	movs	r2, #7
 8004c18:	401a      	ands	r2, r3
 8004c1a:	0013      	movs	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	189b      	adds	r3, r3, r2
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	3351      	adds	r3, #81	@ 0x51
 8004c24:	33ff      	adds	r3, #255	@ 0xff
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	18d3      	adds	r3, r2, r3
 8004c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c32:	1cfb      	adds	r3, r7, #3
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2207      	movs	r2, #7
 8004c38:	4013      	ands	r3, r2
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	23a4      	movs	r3, #164	@ 0xa4
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	5cd3      	ldrb	r3, [r2, r3]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_PCD_EP_Close+0x76>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e011      	b.n	8004c74 <HAL_PCD_EP_Close+0x9a>
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	23a4      	movs	r3, #164	@ 0xa4
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	2101      	movs	r1, #1
 8004c58:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	0011      	movs	r1, r2
 8004c62:	0018      	movs	r0, r3
 8004c64:	f005 fb12 	bl	800a28c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	23a4      	movs	r3, #164	@ 0xa4
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	2100      	movs	r1, #0
 8004c70:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	0018      	movs	r0, r3
 8004c76:	46bd      	mov	sp, r7
 8004c78:	b004      	add	sp, #16
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	607a      	str	r2, [r7, #4]
 8004c86:	603b      	str	r3, [r7, #0]
 8004c88:	200b      	movs	r0, #11
 8004c8a:	183b      	adds	r3, r7, r0
 8004c8c:	1c0a      	adds	r2, r1, #0
 8004c8e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c90:	0001      	movs	r1, r0
 8004c92:	187b      	adds	r3, r7, r1
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2207      	movs	r2, #7
 8004c98:	401a      	ands	r2, r3
 8004c9a:	0013      	movs	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	189b      	adds	r3, r3, r2
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	3351      	adds	r3, #81	@ 0x51
 8004ca4:	33ff      	adds	r3, #255	@ 0xff
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	18d3      	adds	r3, r2, r3
 8004caa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cc4:	187b      	adds	r3, r7, r1
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2207      	movs	r2, #7
 8004cca:	4013      	ands	r3, r2
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	0011      	movs	r1, r2
 8004cda:	0018      	movs	r0, r3
 8004cdc:	f005 fc96 	bl	800a60c <USB_EPStartXfer>

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	b006      	add	sp, #24
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b082      	sub	sp, #8
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	000a      	movs	r2, r1
 8004cf4:	1cfb      	adds	r3, r7, #3
 8004cf6:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004cf8:	1cfb      	adds	r3, r7, #3
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	2207      	movs	r2, #7
 8004cfe:	401a      	ands	r2, r3
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	23b6      	movs	r3, #182	@ 0xb6
 8004d04:	0059      	lsls	r1, r3, #1
 8004d06:	0013      	movs	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	189b      	adds	r3, r3, r2
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	18c3      	adds	r3, r0, r3
 8004d10:	185b      	adds	r3, r3, r1
 8004d12:	681b      	ldr	r3, [r3, #0]
}
 8004d14:	0018      	movs	r0, r3
 8004d16:	46bd      	mov	sp, r7
 8004d18:	b002      	add	sp, #8
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	607a      	str	r2, [r7, #4]
 8004d26:	603b      	str	r3, [r7, #0]
 8004d28:	200b      	movs	r0, #11
 8004d2a:	183b      	adds	r3, r7, r0
 8004d2c:	1c0a      	adds	r2, r1, #0
 8004d2e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d30:	183b      	adds	r3, r7, r0
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2207      	movs	r2, #7
 8004d36:	401a      	ands	r2, r3
 8004d38:	0013      	movs	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	189b      	adds	r3, r3, r2
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	3310      	adds	r3, #16
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	18d3      	adds	r3, r2, r3
 8004d46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	2224      	movs	r2, #36	@ 0x24
 8004d58:	2101      	movs	r1, #1
 8004d5a:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2200      	movs	r2, #0
 8004d66:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d6e:	183b      	adds	r3, r7, r0
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2207      	movs	r2, #7
 8004d74:	4013      	ands	r3, r2
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	0011      	movs	r1, r2
 8004d84:	0018      	movs	r0, r3
 8004d86:	f005 fc41 	bl	800a60c <USB_EPStartXfer>

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	b006      	add	sp, #24
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	000a      	movs	r2, r1
 8004d9e:	1cfb      	adds	r3, r7, #3
 8004da0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004da2:	1cfb      	adds	r3, r7, #3
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	2207      	movs	r2, #7
 8004da8:	4013      	ands	r3, r2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	7912      	ldrb	r2, [r2, #4]
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d901      	bls.n	8004db6 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e046      	b.n	8004e44 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004db6:	1cfb      	adds	r3, r7, #3
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	b25b      	sxtb	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	da0f      	bge.n	8004de0 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dc0:	1cfb      	adds	r3, r7, #3
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2207      	movs	r2, #7
 8004dc6:	401a      	ands	r2, r3
 8004dc8:	0013      	movs	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	189b      	adds	r3, r3, r2
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	3310      	adds	r3, #16
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	18d3      	adds	r3, r2, r3
 8004dd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	705a      	strb	r2, [r3, #1]
 8004dde:	e00d      	b.n	8004dfc <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004de0:	1cfb      	adds	r3, r7, #3
 8004de2:	781a      	ldrb	r2, [r3, #0]
 8004de4:	0013      	movs	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	189b      	adds	r3, r3, r2
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	3351      	adds	r3, #81	@ 0x51
 8004dee:	33ff      	adds	r3, #255	@ 0xff
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	18d3      	adds	r3, r2, r3
 8004df4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e02:	1cfb      	adds	r3, r7, #3
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	2207      	movs	r2, #7
 8004e08:	4013      	ands	r3, r2
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	23a4      	movs	r3, #164	@ 0xa4
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	5cd3      	ldrb	r3, [r2, r3]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_PCD_EP_SetStall+0x8c>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e011      	b.n	8004e44 <HAL_PCD_EP_SetStall+0xb0>
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	23a4      	movs	r3, #164	@ 0xa4
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	2101      	movs	r1, #1
 8004e28:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	0011      	movs	r1, r2
 8004e32:	0018      	movs	r0, r3
 8004e34:	f006 fd1a 	bl	800b86c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	23a4      	movs	r3, #164	@ 0xa4
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	2100      	movs	r1, #0
 8004e40:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	0018      	movs	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	b004      	add	sp, #16
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	000a      	movs	r2, r1
 8004e56:	1cfb      	adds	r3, r7, #3
 8004e58:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e5a:	1cfb      	adds	r3, r7, #3
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	220f      	movs	r2, #15
 8004e60:	4013      	ands	r3, r2
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	7912      	ldrb	r2, [r2, #4]
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d901      	bls.n	8004e6e <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e048      	b.n	8004f00 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e6e:	1cfb      	adds	r3, r7, #3
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	b25b      	sxtb	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	da0f      	bge.n	8004e98 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e78:	1cfb      	adds	r3, r7, #3
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2207      	movs	r2, #7
 8004e7e:	401a      	ands	r2, r3
 8004e80:	0013      	movs	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	189b      	adds	r3, r3, r2
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	3310      	adds	r3, #16
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	18d3      	adds	r3, r2, r3
 8004e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2201      	movs	r2, #1
 8004e94:	705a      	strb	r2, [r3, #1]
 8004e96:	e00f      	b.n	8004eb8 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e98:	1cfb      	adds	r3, r7, #3
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2207      	movs	r2, #7
 8004e9e:	401a      	ands	r2, r3
 8004ea0:	0013      	movs	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	189b      	adds	r3, r3, r2
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	3351      	adds	r3, #81	@ 0x51
 8004eaa:	33ff      	adds	r3, #255	@ 0xff
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	18d3      	adds	r3, r2, r3
 8004eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ebe:	1cfb      	adds	r3, r7, #3
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	2207      	movs	r2, #7
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	23a4      	movs	r3, #164	@ 0xa4
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	5cd3      	ldrb	r3, [r2, r3]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <HAL_PCD_EP_ClrStall+0x90>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e011      	b.n	8004f00 <HAL_PCD_EP_ClrStall+0xb4>
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	23a4      	movs	r3, #164	@ 0xa4
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	0011      	movs	r1, r2
 8004eee:	0018      	movs	r0, r3
 8004ef0:	f006 fd0c 	bl	800b90c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	23a4      	movs	r3, #164	@ 0xa4
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	2100      	movs	r1, #0
 8004efc:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	0018      	movs	r0, r3
 8004f02:	46bd      	mov	sp, r7
 8004f04:	b004      	add	sp, #16
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004f08:	b5b0      	push	{r4, r5, r7, lr}
 8004f0a:	b096      	sub	sp, #88	@ 0x58
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004f10:	f000 fbea 	bl	80056e8 <PCD_EP_ISR_Handler+0x7e0>
  {
    wIstr = hpcd->Instance->ISTR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	2048      	movs	r0, #72	@ 0x48
 8004f1a:	183b      	adds	r3, r7, r0
 8004f1c:	2144      	movs	r1, #68	@ 0x44
 8004f1e:	5a52      	ldrh	r2, [r2, r1]
 8004f20:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004f22:	183b      	adds	r3, r7, r0
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	244f      	movs	r4, #79	@ 0x4f
 8004f2a:	193b      	adds	r3, r7, r4
 8004f2c:	210f      	movs	r1, #15
 8004f2e:	400a      	ands	r2, r1
 8004f30:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8004f32:	193b      	adds	r3, r7, r4
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d000      	beq.n	8004f3c <PCD_EP_ISR_Handler+0x34>
 8004f3a:	e18d      	b.n	8005258 <PCD_EP_ISR_Handler+0x350>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004f3c:	183b      	adds	r3, r7, r0
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	2210      	movs	r2, #16
 8004f42:	4013      	ands	r3, r2
 8004f44:	d152      	bne.n	8004fec <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	200e      	movs	r0, #14
 8004f50:	183b      	adds	r3, r7, r0
 8004f52:	49ba      	ldr	r1, [pc, #744]	@ (800523c <PCD_EP_ISR_Handler+0x334>)
 8004f54:	400a      	ands	r2, r1
 8004f56:	801a      	strh	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	183a      	adds	r2, r7, r0
 8004f5e:	8812      	ldrh	r2, [r2, #0]
 8004f60:	49b7      	ldr	r1, [pc, #732]	@ (8005240 <PCD_EP_ISR_Handler+0x338>)
 8004f62:	430a      	orrs	r2, r1
 8004f64:	b292      	uxth	r2, r2
 8004f66:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3310      	adds	r3, #16
 8004f6c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2250      	movs	r2, #80	@ 0x50
 8004f74:	5a9b      	ldrh	r3, [r3, r2]
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	001a      	movs	r2, r3
 8004f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	18d2      	adds	r2, r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	18d3      	adds	r3, r2, r3
 8004f88:	4aae      	ldr	r2, [pc, #696]	@ (8005244 <PCD_EP_ISR_Handler+0x33c>)
 8004f8a:	4694      	mov	ip, r2
 8004f8c:	4463      	add	r3, ip
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	059b      	lsls	r3, r3, #22
 8004f92:	0d9a      	lsrs	r2, r3, #22
 8004f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f96:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004f98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f9a:	695a      	ldr	r2, [r3, #20]
 8004f9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	18d2      	adds	r2, r2, r3
 8004fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fa4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2100      	movs	r1, #0
 8004faa:	0018      	movs	r0, r3
 8004fac:	f008 fdbc 	bl	800db28 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	7b1b      	ldrb	r3, [r3, #12]
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <PCD_EP_ISR_Handler+0xb6>
 8004fba:	f000 fb95 	bl	80056e8 <PCD_EP_ISR_Handler+0x7e0>
 8004fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <PCD_EP_ISR_Handler+0xc2>
 8004fc6:	f000 fb8f 	bl	80056e8 <PCD_EP_ISR_Handler+0x7e0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	7b1b      	ldrb	r3, [r3, #12]
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2280      	movs	r2, #128	@ 0x80
 8004fd2:	4252      	negs	r2, r2
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	0011      	movs	r1, r2
 8004fde:	224c      	movs	r2, #76	@ 0x4c
 8004fe0:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	731a      	strb	r2, [r3, #12]
 8004fe8:	f000 fb7e 	bl	80056e8 <PCD_EP_ISR_Handler+0x7e0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3351      	adds	r3, #81	@ 0x51
 8004ff0:	33ff      	adds	r3, #255	@ 0xff
 8004ff2:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	214c      	movs	r1, #76	@ 0x4c
 8004ffa:	187b      	adds	r3, r7, r1
 8004ffc:	8812      	ldrh	r2, [r2, #0]
 8004ffe:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005000:	187b      	adds	r3, r7, r1
 8005002:	881a      	ldrh	r2, [r3, #0]
 8005004:	2380      	movs	r3, #128	@ 0x80
 8005006:	011b      	lsls	r3, r3, #4
 8005008:	4013      	ands	r3, r2
 800500a:	d037      	beq.n	800507c <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2250      	movs	r2, #80	@ 0x50
 8005012:	5a9b      	ldrh	r3, [r3, r2]
 8005014:	b29b      	uxth	r3, r3
 8005016:	001a      	movs	r2, r3
 8005018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	18d2      	adds	r2, r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	18d3      	adds	r3, r2, r3
 8005026:	4a88      	ldr	r2, [pc, #544]	@ (8005248 <PCD_EP_ISR_Handler+0x340>)
 8005028:	4694      	mov	ip, r2
 800502a:	4463      	add	r3, ip
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	059b      	lsls	r3, r3, #22
 8005030:	0d9a      	lsrs	r2, r3, #22
 8005032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005034:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6818      	ldr	r0, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	22a6      	movs	r2, #166	@ 0xa6
 800503e:	0092      	lsls	r2, r2, #2
 8005040:	1899      	adds	r1, r3, r2
 8005042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005044:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005048:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800504a:	b29b      	uxth	r3, r3
 800504c:	f006 fd91 	bl	800bb72 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	b29a      	uxth	r2, r3
 8005058:	2010      	movs	r0, #16
 800505a:	183b      	adds	r3, r7, r0
 800505c:	497b      	ldr	r1, [pc, #492]	@ (800524c <PCD_EP_ISR_Handler+0x344>)
 800505e:	400a      	ands	r2, r1
 8005060:	801a      	strh	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	183a      	adds	r2, r7, r0
 8005068:	8812      	ldrh	r2, [r2, #0]
 800506a:	2180      	movs	r1, #128	@ 0x80
 800506c:	430a      	orrs	r2, r1
 800506e:	b292      	uxth	r2, r2
 8005070:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	0018      	movs	r0, r3
 8005076:	f008 fd21 	bl	800dabc <HAL_PCD_SetupStageCallback>
 800507a:	e335      	b.n	80056e8 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800507c:	234c      	movs	r3, #76	@ 0x4c
 800507e:	18fb      	adds	r3, r7, r3
 8005080:	2200      	movs	r2, #0
 8005082:	5e9b      	ldrsh	r3, [r3, r2]
 8005084:	2b00      	cmp	r3, #0
 8005086:	db00      	blt.n	800508a <PCD_EP_ISR_Handler+0x182>
 8005088:	e32e      	b.n	80056e8 <PCD_EP_ISR_Handler+0x7e0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	b29a      	uxth	r2, r3
 8005092:	201e      	movs	r0, #30
 8005094:	183b      	adds	r3, r7, r0
 8005096:	496d      	ldr	r1, [pc, #436]	@ (800524c <PCD_EP_ISR_Handler+0x344>)
 8005098:	400a      	ands	r2, r1
 800509a:	801a      	strh	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	183a      	adds	r2, r7, r0
 80050a2:	8812      	ldrh	r2, [r2, #0]
 80050a4:	2180      	movs	r1, #128	@ 0x80
 80050a6:	430a      	orrs	r2, r1
 80050a8:	b292      	uxth	r2, r2
 80050aa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2250      	movs	r2, #80	@ 0x50
 80050b2:	5a9b      	ldrh	r3, [r3, r2]
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	001a      	movs	r2, r3
 80050b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	18d2      	adds	r2, r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	18d3      	adds	r3, r2, r3
 80050c6:	4a60      	ldr	r2, [pc, #384]	@ (8005248 <PCD_EP_ISR_Handler+0x340>)
 80050c8:	4694      	mov	ip, r2
 80050ca:	4463      	add	r3, ip
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	059b      	lsls	r3, r3, #22
 80050d0:	0d9a      	lsrs	r2, r3, #22
 80050d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050d4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80050d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d01a      	beq.n	8005114 <PCD_EP_ISR_Handler+0x20c>
 80050de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d016      	beq.n	8005114 <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6818      	ldr	r0, [r3, #0]
 80050ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ec:	6959      	ldr	r1, [r3, #20]
 80050ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050f0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80050f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050f4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	f006 fd3b 	bl	800bb72 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80050fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050fe:	695a      	ldr	r2, [r3, #20]
 8005100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	18d2      	adds	r2, r2, r3
 8005106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005108:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2100      	movs	r1, #0
 800510e:	0018      	movs	r0, r3
 8005110:	f008 fce9 	bl	800dae6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	214c      	movs	r1, #76	@ 0x4c
 800511a:	187b      	adds	r3, r7, r1
 800511c:	8812      	ldrh	r2, [r2, #0]
 800511e:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005120:	187b      	adds	r3, r7, r1
 8005122:	881a      	ldrh	r2, [r3, #0]
 8005124:	2380      	movs	r3, #128	@ 0x80
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	4013      	ands	r3, r2
 800512a:	d000      	beq.n	800512e <PCD_EP_ISR_Handler+0x226>
 800512c:	e2dc      	b.n	80056e8 <PCD_EP_ISR_Handler+0x7e0>
 800512e:	187b      	adds	r3, r7, r1
 8005130:	881a      	ldrh	r2, [r3, #0]
 8005132:	23c0      	movs	r3, #192	@ 0xc0
 8005134:	019b      	lsls	r3, r3, #6
 8005136:	401a      	ands	r2, r3
 8005138:	23c0      	movs	r3, #192	@ 0xc0
 800513a:	019b      	lsls	r3, r3, #6
 800513c:	429a      	cmp	r2, r3
 800513e:	d100      	bne.n	8005142 <PCD_EP_ISR_Handler+0x23a>
 8005140:	e2d2      	b.n	80056e8 <PCD_EP_ISR_Handler+0x7e0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	61bb      	str	r3, [r7, #24]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2250      	movs	r2, #80	@ 0x50
 800514e:	5a9b      	ldrh	r3, [r3, r2]
 8005150:	b29b      	uxth	r3, r3
 8005152:	001a      	movs	r2, r3
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	189b      	adds	r3, r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	4a3a      	ldr	r2, [pc, #232]	@ (8005248 <PCD_EP_ISR_Handler+0x340>)
 800515e:	4694      	mov	ip, r2
 8005160:	4463      	add	r3, ip
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	b29b      	uxth	r3, r3
 800516a:	059b      	lsls	r3, r3, #22
 800516c:	0d9b      	lsrs	r3, r3, #22
 800516e:	b29a      	uxth	r2, r3
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	801a      	strh	r2, [r3, #0]
 8005174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d108      	bne.n	800518e <PCD_EP_ISR_Handler+0x286>
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	b29b      	uxth	r3, r3
 8005182:	4a2f      	ldr	r2, [pc, #188]	@ (8005240 <PCD_EP_ISR_Handler+0x338>)
 8005184:	4313      	orrs	r3, r2
 8005186:	b29a      	uxth	r2, r3
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	801a      	strh	r2, [r3, #0]
 800518c:	e035      	b.n	80051fa <PCD_EP_ISR_Handler+0x2f2>
 800518e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b3e      	cmp	r3, #62	@ 0x3e
 8005194:	d817      	bhi.n	80051c6 <PCD_EP_ISR_Handler+0x2be>
 8005196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	085b      	lsrs	r3, r3, #1
 800519c:	647b      	str	r3, [r7, #68]	@ 0x44
 800519e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	2201      	movs	r2, #1
 80051a4:	4013      	ands	r3, r2
 80051a6:	d002      	beq.n	80051ae <PCD_EP_ISR_Handler+0x2a6>
 80051a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051aa:	3301      	adds	r3, #1
 80051ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	029b      	lsls	r3, r3, #10
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	4313      	orrs	r3, r2
 80051be:	b29a      	uxth	r2, r3
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	801a      	strh	r2, [r3, #0]
 80051c4:	e019      	b.n	80051fa <PCD_EP_ISR_Handler+0x2f2>
 80051c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	095b      	lsrs	r3, r3, #5
 80051cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80051ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	221f      	movs	r2, #31
 80051d4:	4013      	ands	r3, r2
 80051d6:	d102      	bne.n	80051de <PCD_EP_ISR_Handler+0x2d6>
 80051d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051da:	3b01      	subs	r3, #1
 80051dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	029b      	lsls	r3, r3, #10
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	4313      	orrs	r3, r2
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	4a13      	ldr	r2, [pc, #76]	@ (8005240 <PCD_EP_ISR_Handler+0x338>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	b29a      	uxth	r2, r3
 8005202:	2012      	movs	r0, #18
 8005204:	183b      	adds	r3, r7, r0
 8005206:	4912      	ldr	r1, [pc, #72]	@ (8005250 <PCD_EP_ISR_Handler+0x348>)
 8005208:	400a      	ands	r2, r1
 800520a:	801a      	strh	r2, [r3, #0]
 800520c:	183b      	adds	r3, r7, r0
 800520e:	183a      	adds	r2, r7, r0
 8005210:	8812      	ldrh	r2, [r2, #0]
 8005212:	2180      	movs	r1, #128	@ 0x80
 8005214:	0149      	lsls	r1, r1, #5
 8005216:	404a      	eors	r2, r1
 8005218:	801a      	strh	r2, [r3, #0]
 800521a:	183b      	adds	r3, r7, r0
 800521c:	183a      	adds	r2, r7, r0
 800521e:	8812      	ldrh	r2, [r2, #0]
 8005220:	2180      	movs	r1, #128	@ 0x80
 8005222:	0189      	lsls	r1, r1, #6
 8005224:	404a      	eors	r2, r1
 8005226:	801a      	strh	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	183a      	adds	r2, r7, r0
 800522e:	8812      	ldrh	r2, [r2, #0]
 8005230:	4908      	ldr	r1, [pc, #32]	@ (8005254 <PCD_EP_ISR_Handler+0x34c>)
 8005232:	430a      	orrs	r2, r1
 8005234:	b292      	uxth	r2, r2
 8005236:	801a      	strh	r2, [r3, #0]
 8005238:	e256      	b.n	80056e8 <PCD_EP_ISR_Handler+0x7e0>
 800523a:	46c0      	nop			@ (mov r8, r8)
 800523c:	ffff8f0f 	.word	0xffff8f0f
 8005240:	ffff8000 	.word	0xffff8000
 8005244:	00000402 	.word	0x00000402
 8005248:	00000406 	.word	0x00000406
 800524c:	00000f8f 	.word	0x00000f8f
 8005250:	ffffbf8f 	.word	0xffffbf8f
 8005254:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	001a      	movs	r2, r3
 800525e:	204f      	movs	r0, #79	@ 0x4f
 8005260:	183b      	adds	r3, r7, r0
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	18d2      	adds	r2, r2, r3
 8005268:	214c      	movs	r1, #76	@ 0x4c
 800526a:	187b      	adds	r3, r7, r1
 800526c:	8812      	ldrh	r2, [r2, #0]
 800526e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005270:	187b      	adds	r3, r7, r1
 8005272:	2200      	movs	r2, #0
 8005274:	5e9b      	ldrsh	r3, [r3, r2]
 8005276:	2b00      	cmp	r3, #0
 8005278:	db00      	blt.n	800527c <PCD_EP_ISR_Handler+0x374>
 800527a:	e0fa      	b.n	8005472 <PCD_EP_ISR_Handler+0x56a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	001a      	movs	r2, r3
 8005282:	183b      	adds	r3, r7, r0
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	18d3      	adds	r3, r2, r3
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	b29a      	uxth	r2, r3
 800528e:	244a      	movs	r4, #74	@ 0x4a
 8005290:	193b      	adds	r3, r7, r4
 8005292:	49d1      	ldr	r1, [pc, #836]	@ (80055d8 <PCD_EP_ISR_Handler+0x6d0>)
 8005294:	400a      	ands	r2, r1
 8005296:	801a      	strh	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	001a      	movs	r2, r3
 800529e:	183b      	adds	r3, r7, r0
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	18d3      	adds	r3, r2, r3
 80052a6:	193a      	adds	r2, r7, r4
 80052a8:	8812      	ldrh	r2, [r2, #0]
 80052aa:	2180      	movs	r1, #128	@ 0x80
 80052ac:	430a      	orrs	r2, r1
 80052ae:	b292      	uxth	r2, r2
 80052b0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80052b2:	183b      	adds	r3, r7, r0
 80052b4:	781a      	ldrb	r2, [r3, #0]
 80052b6:	0013      	movs	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	189b      	adds	r3, r3, r2
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	3351      	adds	r3, #81	@ 0x51
 80052c0:	33ff      	adds	r3, #255	@ 0xff
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	18d3      	adds	r3, r2, r3
 80052c6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80052c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052ca:	7b1b      	ldrb	r3, [r3, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d125      	bne.n	800531c <PCD_EP_ISR_Handler+0x414>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2250      	movs	r2, #80	@ 0x50
 80052d6:	5a9b      	ldrh	r3, [r3, r2]
 80052d8:	b29b      	uxth	r3, r3
 80052da:	001a      	movs	r2, r3
 80052dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	18d2      	adds	r2, r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	18d3      	adds	r3, r2, r3
 80052ea:	4abc      	ldr	r2, [pc, #752]	@ (80055dc <PCD_EP_ISR_Handler+0x6d4>)
 80052ec:	4694      	mov	ip, r2
 80052ee:	4463      	add	r3, ip
 80052f0:	881a      	ldrh	r2, [r3, #0]
 80052f2:	2450      	movs	r4, #80	@ 0x50
 80052f4:	193b      	adds	r3, r7, r4
 80052f6:	0592      	lsls	r2, r2, #22
 80052f8:	0d92      	lsrs	r2, r2, #22
 80052fa:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80052fc:	193b      	adds	r3, r7, r4
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d100      	bne.n	8005306 <PCD_EP_ISR_Handler+0x3fe>
 8005304:	e08d      	b.n	8005422 <PCD_EP_ISR_Handler+0x51a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800530c:	6959      	ldr	r1, [r3, #20]
 800530e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005310:	88da      	ldrh	r2, [r3, #6]
 8005312:	193b      	adds	r3, r7, r4
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	f006 fc2c 	bl	800bb72 <USB_ReadPMA>
 800531a:	e082      	b.n	8005422 <PCD_EP_ISR_Handler+0x51a>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800531c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800531e:	78db      	ldrb	r3, [r3, #3]
 8005320:	2b02      	cmp	r3, #2
 8005322:	d10c      	bne.n	800533e <PCD_EP_ISR_Handler+0x436>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005324:	2350      	movs	r3, #80	@ 0x50
 8005326:	18fc      	adds	r4, r7, r3
 8005328:	234c      	movs	r3, #76	@ 0x4c
 800532a:	18fb      	adds	r3, r7, r3
 800532c:	881a      	ldrh	r2, [r3, #0]
 800532e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	0018      	movs	r0, r3
 8005334:	f000 f9ec 	bl	8005710 <HAL_PCD_EP_DB_Receive>
 8005338:	0003      	movs	r3, r0
 800533a:	8023      	strh	r3, [r4, #0]
 800533c:	e071      	b.n	8005422 <PCD_EP_ISR_Handler+0x51a>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	001a      	movs	r2, r3
 8005344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	18d3      	adds	r3, r2, r3
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	b29a      	uxth	r2, r3
 8005350:	2052      	movs	r0, #82	@ 0x52
 8005352:	183b      	adds	r3, r7, r0
 8005354:	49a2      	ldr	r1, [pc, #648]	@ (80055e0 <PCD_EP_ISR_Handler+0x6d8>)
 8005356:	400a      	ands	r2, r1
 8005358:	801a      	strh	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	001a      	movs	r2, r3
 8005360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	18d3      	adds	r3, r2, r3
 8005368:	183a      	adds	r2, r7, r0
 800536a:	8812      	ldrh	r2, [r2, #0]
 800536c:	499d      	ldr	r1, [pc, #628]	@ (80055e4 <PCD_EP_ISR_Handler+0x6dc>)
 800536e:	430a      	orrs	r2, r1
 8005370:	b292      	uxth	r2, r2
 8005372:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	001a      	movs	r2, r3
 800537a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	18d3      	adds	r3, r2, r3
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	b29b      	uxth	r3, r3
 8005386:	001a      	movs	r2, r3
 8005388:	2380      	movs	r3, #128	@ 0x80
 800538a:	01db      	lsls	r3, r3, #7
 800538c:	4013      	ands	r3, r2
 800538e:	d024      	beq.n	80053da <PCD_EP_ISR_Handler+0x4d2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2250      	movs	r2, #80	@ 0x50
 8005396:	5a9b      	ldrh	r3, [r3, r2]
 8005398:	b29b      	uxth	r3, r3
 800539a:	001a      	movs	r2, r3
 800539c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	18d2      	adds	r2, r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	18d3      	adds	r3, r2, r3
 80053aa:	4a8f      	ldr	r2, [pc, #572]	@ (80055e8 <PCD_EP_ISR_Handler+0x6e0>)
 80053ac:	4694      	mov	ip, r2
 80053ae:	4463      	add	r3, ip
 80053b0:	881a      	ldrh	r2, [r3, #0]
 80053b2:	2450      	movs	r4, #80	@ 0x50
 80053b4:	193b      	adds	r3, r7, r4
 80053b6:	0592      	lsls	r2, r2, #22
 80053b8:	0d92      	lsrs	r2, r2, #22
 80053ba:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80053bc:	193b      	adds	r3, r7, r4
 80053be:	881b      	ldrh	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d02e      	beq.n	8005422 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6818      	ldr	r0, [r3, #0]
 80053c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053ca:	6959      	ldr	r1, [r3, #20]
 80053cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053ce:	891a      	ldrh	r2, [r3, #8]
 80053d0:	193b      	adds	r3, r7, r4
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	f006 fbcd 	bl	800bb72 <USB_ReadPMA>
 80053d8:	e023      	b.n	8005422 <PCD_EP_ISR_Handler+0x51a>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2250      	movs	r2, #80	@ 0x50
 80053e0:	5a9b      	ldrh	r3, [r3, r2]
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	001a      	movs	r2, r3
 80053e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	18d2      	adds	r2, r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	18d3      	adds	r3, r2, r3
 80053f4:	4a79      	ldr	r2, [pc, #484]	@ (80055dc <PCD_EP_ISR_Handler+0x6d4>)
 80053f6:	4694      	mov	ip, r2
 80053f8:	4463      	add	r3, ip
 80053fa:	881a      	ldrh	r2, [r3, #0]
 80053fc:	2450      	movs	r4, #80	@ 0x50
 80053fe:	193b      	adds	r3, r7, r4
 8005400:	0592      	lsls	r2, r2, #22
 8005402:	0d92      	lsrs	r2, r2, #22
 8005404:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8005406:	193b      	adds	r3, r7, r4
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d009      	beq.n	8005422 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6818      	ldr	r0, [r3, #0]
 8005412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005414:	6959      	ldr	r1, [r3, #20]
 8005416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005418:	895a      	ldrh	r2, [r3, #10]
 800541a:	193b      	adds	r3, r7, r4
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	f006 fba8 	bl	800bb72 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005424:	69da      	ldr	r2, [r3, #28]
 8005426:	2150      	movs	r1, #80	@ 0x50
 8005428:	187b      	adds	r3, r7, r1
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	18d2      	adds	r2, r2, r3
 800542e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005430:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005434:	695a      	ldr	r2, [r3, #20]
 8005436:	187b      	adds	r3, r7, r1
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	18d2      	adds	r2, r2, r3
 800543c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800543e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d005      	beq.n	8005454 <PCD_EP_ISR_Handler+0x54c>
 8005448:	187b      	adds	r3, r7, r1
 800544a:	881a      	ldrh	r2, [r3, #0]
 800544c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	429a      	cmp	r2, r3
 8005452:	d207      	bcs.n	8005464 <PCD_EP_ISR_Handler+0x55c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005454:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005456:	781a      	ldrb	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	0011      	movs	r1, r2
 800545c:	0018      	movs	r0, r3
 800545e:	f008 fb42 	bl	800dae6 <HAL_PCD_DataOutStageCallback>
 8005462:	e006      	b.n	8005472 <PCD_EP_ISR_Handler+0x56a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800546a:	0011      	movs	r1, r2
 800546c:	0018      	movs	r0, r3
 800546e:	f005 f8cd 	bl	800a60c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005472:	244c      	movs	r4, #76	@ 0x4c
 8005474:	193b      	adds	r3, r7, r4
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	2280      	movs	r2, #128	@ 0x80
 800547a:	4013      	ands	r3, r2
 800547c:	d100      	bne.n	8005480 <PCD_EP_ISR_Handler+0x578>
 800547e:	e133      	b.n	80056e8 <PCD_EP_ISR_Handler+0x7e0>
      {
        ep = &hpcd->IN_ep[epindex];
 8005480:	204f      	movs	r0, #79	@ 0x4f
 8005482:	183b      	adds	r3, r7, r0
 8005484:	781a      	ldrb	r2, [r3, #0]
 8005486:	0013      	movs	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	189b      	adds	r3, r3, r2
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	3310      	adds	r3, #16
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	18d3      	adds	r3, r2, r3
 8005494:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	001a      	movs	r2, r3
 800549c:	183b      	adds	r3, r7, r0
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	18d3      	adds	r3, r2, r3
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	2542      	movs	r5, #66	@ 0x42
 80054aa:	197b      	adds	r3, r7, r5
 80054ac:	494f      	ldr	r1, [pc, #316]	@ (80055ec <PCD_EP_ISR_Handler+0x6e4>)
 80054ae:	400a      	ands	r2, r1
 80054b0:	801a      	strh	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	001a      	movs	r2, r3
 80054b8:	183b      	adds	r3, r7, r0
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	18d3      	adds	r3, r2, r3
 80054c0:	197a      	adds	r2, r7, r5
 80054c2:	8812      	ldrh	r2, [r2, #0]
 80054c4:	494a      	ldr	r1, [pc, #296]	@ (80055f0 <PCD_EP_ISR_Handler+0x6e8>)
 80054c6:	430a      	orrs	r2, r1
 80054c8:	b292      	uxth	r2, r2
 80054ca:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80054cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054ce:	78db      	ldrb	r3, [r3, #3]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d000      	beq.n	80054d6 <PCD_EP_ISR_Handler+0x5ce>
 80054d4:	e0af      	b.n	8005636 <PCD_EP_ISR_Handler+0x72e>
        {
          ep->xfer_len = 0U;
 80054d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054d8:	2200      	movs	r2, #0
 80054da:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80054dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054de:	7b1b      	ldrb	r3, [r3, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d100      	bne.n	80054e6 <PCD_EP_ISR_Handler+0x5de>
 80054e4:	e09f      	b.n	8005626 <PCD_EP_ISR_Handler+0x71e>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80054e6:	193b      	adds	r3, r7, r4
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	2240      	movs	r2, #64	@ 0x40
 80054ec:	4013      	ands	r3, r2
 80054ee:	d046      	beq.n	800557e <PCD_EP_ISR_Handler+0x676>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054f2:	785b      	ldrb	r3, [r3, #1]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d125      	bne.n	8005544 <PCD_EP_ISR_Handler+0x63c>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2250      	movs	r2, #80	@ 0x50
 8005504:	5a9b      	ldrh	r3, [r3, r2]
 8005506:	b29b      	uxth	r3, r3
 8005508:	001a      	movs	r2, r3
 800550a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550c:	189b      	adds	r3, r3, r2
 800550e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	00da      	lsls	r2, r3, #3
 8005516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005518:	18d3      	adds	r3, r2, r3
 800551a:	4a33      	ldr	r2, [pc, #204]	@ (80055e8 <PCD_EP_ISR_Handler+0x6e0>)
 800551c:	4694      	mov	ip, r2
 800551e:	4463      	add	r3, ip
 8005520:	623b      	str	r3, [r7, #32]
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	b29b      	uxth	r3, r3
 8005528:	059b      	lsls	r3, r3, #22
 800552a:	0d9b      	lsrs	r3, r3, #22
 800552c:	b29a      	uxth	r2, r3
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	801a      	strh	r2, [r3, #0]
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	b29b      	uxth	r3, r3
 8005538:	4a2d      	ldr	r2, [pc, #180]	@ (80055f0 <PCD_EP_ISR_Handler+0x6e8>)
 800553a:	4313      	orrs	r3, r2
 800553c:	b29a      	uxth	r2, r3
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	801a      	strh	r2, [r3, #0]
 8005542:	e070      	b.n	8005626 <PCD_EP_ISR_Handler+0x71e>
 8005544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005546:	785b      	ldrb	r3, [r3, #1]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d16c      	bne.n	8005626 <PCD_EP_ISR_Handler+0x71e>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2250      	movs	r2, #80	@ 0x50
 8005558:	5a9b      	ldrh	r3, [r3, r2]
 800555a:	b29b      	uxth	r3, r3
 800555c:	001a      	movs	r2, r3
 800555e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005560:	189b      	adds	r3, r3, r2
 8005562:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	00da      	lsls	r2, r3, #3
 800556a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556c:	18d3      	adds	r3, r2, r3
 800556e:	4a1e      	ldr	r2, [pc, #120]	@ (80055e8 <PCD_EP_ISR_Handler+0x6e0>)
 8005570:	4694      	mov	ip, r2
 8005572:	4463      	add	r3, ip
 8005574:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005578:	2200      	movs	r2, #0
 800557a:	801a      	strh	r2, [r3, #0]
 800557c:	e053      	b.n	8005626 <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005586:	785b      	ldrb	r3, [r3, #1]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d133      	bne.n	80055f4 <PCD_EP_ISR_Handler+0x6ec>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	637b      	str	r3, [r7, #52]	@ 0x34
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2250      	movs	r2, #80	@ 0x50
 8005598:	5a9b      	ldrh	r3, [r3, r2]
 800559a:	b29b      	uxth	r3, r3
 800559c:	001a      	movs	r2, r3
 800559e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a0:	189b      	adds	r3, r3, r2
 80055a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80055a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	00da      	lsls	r2, r3, #3
 80055aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ac:	18d3      	adds	r3, r2, r3
 80055ae:	4a0b      	ldr	r2, [pc, #44]	@ (80055dc <PCD_EP_ISR_Handler+0x6d4>)
 80055b0:	4694      	mov	ip, r2
 80055b2:	4463      	add	r3, ip
 80055b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80055b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	059b      	lsls	r3, r3, #22
 80055be:	0d9b      	lsrs	r3, r3, #22
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c4:	801a      	strh	r2, [r3, #0]
 80055c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	4a08      	ldr	r2, [pc, #32]	@ (80055f0 <PCD_EP_ISR_Handler+0x6e8>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d4:	801a      	strh	r2, [r3, #0]
 80055d6:	e026      	b.n	8005626 <PCD_EP_ISR_Handler+0x71e>
 80055d8:	00000f8f 	.word	0x00000f8f
 80055dc:	00000406 	.word	0x00000406
 80055e0:	ffff8f8f 	.word	0xffff8f8f
 80055e4:	ffff80c0 	.word	0xffff80c0
 80055e8:	00000402 	.word	0x00000402
 80055ec:	ffff8f0f 	.word	0xffff8f0f
 80055f0:	ffff8000 	.word	0xffff8000
 80055f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055f6:	785b      	ldrb	r3, [r3, #1]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d114      	bne.n	8005626 <PCD_EP_ISR_Handler+0x71e>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2250      	movs	r2, #80	@ 0x50
 8005602:	5a9b      	ldrh	r3, [r3, r2]
 8005604:	b29b      	uxth	r3, r3
 8005606:	001a      	movs	r2, r3
 8005608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800560a:	189b      	adds	r3, r3, r2
 800560c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800560e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	00da      	lsls	r2, r3, #3
 8005614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005616:	18d3      	adds	r3, r2, r3
 8005618:	4a3b      	ldr	r2, [pc, #236]	@ (8005708 <PCD_EP_ISR_Handler+0x800>)
 800561a:	4694      	mov	ip, r2
 800561c:	4463      	add	r3, ip
 800561e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005622:	2200      	movs	r2, #0
 8005624:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005628:	781a      	ldrb	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	0011      	movs	r1, r2
 800562e:	0018      	movs	r0, r3
 8005630:	f008 fa7a 	bl	800db28 <HAL_PCD_DataInStageCallback>
 8005634:	e058      	b.n	80056e8 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005636:	234c      	movs	r3, #76	@ 0x4c
 8005638:	18fb      	adds	r3, r7, r3
 800563a:	881a      	ldrh	r2, [r3, #0]
 800563c:	2380      	movs	r3, #128	@ 0x80
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	4013      	ands	r3, r2
 8005642:	d149      	bne.n	80056d8 <PCD_EP_ISR_Handler+0x7d0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2250      	movs	r2, #80	@ 0x50
 800564a:	5a9b      	ldrh	r3, [r3, r2]
 800564c:	b29b      	uxth	r3, r3
 800564e:	001a      	movs	r2, r3
 8005650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	18d2      	adds	r2, r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	18d3      	adds	r3, r2, r3
 800565e:	4a2b      	ldr	r2, [pc, #172]	@ (800570c <PCD_EP_ISR_Handler+0x804>)
 8005660:	4694      	mov	ip, r2
 8005662:	4463      	add	r3, ip
 8005664:	881a      	ldrh	r2, [r3, #0]
 8005666:	2140      	movs	r1, #64	@ 0x40
 8005668:	187b      	adds	r3, r7, r1
 800566a:	0592      	lsls	r2, r2, #22
 800566c:	0d92      	lsrs	r2, r2, #22
 800566e:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8005670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005672:	699a      	ldr	r2, [r3, #24]
 8005674:	187b      	adds	r3, r7, r1
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d907      	bls.n	800568c <PCD_EP_ISR_Handler+0x784>
            {
              ep->xfer_len -= TxPctSize;
 800567c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800567e:	699a      	ldr	r2, [r3, #24]
 8005680:	187b      	adds	r3, r7, r1
 8005682:	881b      	ldrh	r3, [r3, #0]
 8005684:	1ad2      	subs	r2, r2, r3
 8005686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005688:	619a      	str	r2, [r3, #24]
 800568a:	e002      	b.n	8005692 <PCD_EP_ISR_Handler+0x78a>
            }
            else
            {
              ep->xfer_len = 0U;
 800568c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800568e:	2200      	movs	r2, #0
 8005690:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d107      	bne.n	80056aa <PCD_EP_ISR_Handler+0x7a2>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800569a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800569c:	781a      	ldrb	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	0011      	movs	r1, r2
 80056a2:	0018      	movs	r0, r3
 80056a4:	f008 fa40 	bl	800db28 <HAL_PCD_DataInStageCallback>
 80056a8:	e01e      	b.n	80056e8 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80056aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ac:	695a      	ldr	r2, [r3, #20]
 80056ae:	2140      	movs	r1, #64	@ 0x40
 80056b0:	187b      	adds	r3, r7, r1
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	18d2      	adds	r2, r2, r3
 80056b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056b8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80056ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056bc:	69da      	ldr	r2, [r3, #28]
 80056be:	187b      	adds	r3, r7, r1
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	18d2      	adds	r2, r2, r3
 80056c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056c6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80056ce:	0011      	movs	r1, r2
 80056d0:	0018      	movs	r0, r3
 80056d2:	f004 ff9b 	bl	800a60c <USB_EPStartXfer>
 80056d6:	e007      	b.n	80056e8 <PCD_EP_ISR_Handler+0x7e0>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80056d8:	234c      	movs	r3, #76	@ 0x4c
 80056da:	18fb      	adds	r3, r7, r3
 80056dc:	881a      	ldrh	r2, [r3, #0]
 80056de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	0018      	movs	r0, r3
 80056e4:	f000 f930 	bl	8005948 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2244      	movs	r2, #68	@ 0x44
 80056ee:	5a9b      	ldrh	r3, [r3, r2]
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	b21b      	sxth	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	da01      	bge.n	80056fc <PCD_EP_ISR_Handler+0x7f4>
 80056f8:	f7ff fc0c 	bl	8004f14 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	0018      	movs	r0, r3
 8005700:	46bd      	mov	sp, r7
 8005702:	b016      	add	sp, #88	@ 0x58
 8005704:	bdb0      	pop	{r4, r5, r7, pc}
 8005706:	46c0      	nop			@ (mov r8, r8)
 8005708:	00000406 	.word	0x00000406
 800570c:	00000402 	.word	0x00000402

08005710 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005710:	b590      	push	{r4, r7, lr}
 8005712:	b089      	sub	sp, #36	@ 0x24
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	1dbb      	adds	r3, r7, #6
 800571c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800571e:	1dbb      	adds	r3, r7, #6
 8005720:	881a      	ldrh	r2, [r3, #0]
 8005722:	2380      	movs	r3, #128	@ 0x80
 8005724:	01db      	lsls	r3, r3, #7
 8005726:	4013      	ands	r3, r2
 8005728:	d100      	bne.n	800572c <HAL_PCD_EP_DB_Receive+0x1c>
 800572a:	e07d      	b.n	8005828 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2250      	movs	r2, #80	@ 0x50
 8005732:	5a9b      	ldrh	r3, [r3, r2]
 8005734:	b29b      	uxth	r3, r3
 8005736:	001a      	movs	r2, r3
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	18d2      	adds	r2, r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	18d3      	adds	r3, r2, r3
 8005746:	4a7a      	ldr	r2, [pc, #488]	@ (8005930 <HAL_PCD_EP_DB_Receive+0x220>)
 8005748:	4694      	mov	ip, r2
 800574a:	4463      	add	r3, ip
 800574c:	881a      	ldrh	r2, [r3, #0]
 800574e:	211a      	movs	r1, #26
 8005750:	187b      	adds	r3, r7, r1
 8005752:	0592      	lsls	r2, r2, #22
 8005754:	0d92      	lsrs	r2, r2, #22
 8005756:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	699a      	ldr	r2, [r3, #24]
 800575c:	187b      	adds	r3, r7, r1
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	429a      	cmp	r2, r3
 8005762:	d307      	bcc.n	8005774 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	699a      	ldr	r2, [r3, #24]
 8005768:	187b      	adds	r3, r7, r1
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	1ad2      	subs	r2, r2, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	619a      	str	r2, [r3, #24]
 8005772:	e002      	b.n	800577a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	2200      	movs	r2, #0
 8005778:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d121      	bne.n	80057c6 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	001a      	movs	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	18d3      	adds	r3, r2, r3
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	b29a      	uxth	r2, r3
 8005794:	2018      	movs	r0, #24
 8005796:	183b      	adds	r3, r7, r0
 8005798:	4966      	ldr	r1, [pc, #408]	@ (8005934 <HAL_PCD_EP_DB_Receive+0x224>)
 800579a:	400a      	ands	r2, r1
 800579c:	801a      	strh	r2, [r3, #0]
 800579e:	183b      	adds	r3, r7, r0
 80057a0:	183a      	adds	r2, r7, r0
 80057a2:	8812      	ldrh	r2, [r2, #0]
 80057a4:	2180      	movs	r1, #128	@ 0x80
 80057a6:	0189      	lsls	r1, r1, #6
 80057a8:	404a      	eors	r2, r1
 80057aa:	801a      	strh	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	001a      	movs	r2, r3
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	18d3      	adds	r3, r2, r3
 80057ba:	183a      	adds	r2, r7, r0
 80057bc:	8812      	ldrh	r2, [r2, #0]
 80057be:	495e      	ldr	r1, [pc, #376]	@ (8005938 <HAL_PCD_EP_DB_Receive+0x228>)
 80057c0:	430a      	orrs	r2, r1
 80057c2:	b292      	uxth	r2, r2
 80057c4:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80057c6:	1dbb      	adds	r3, r7, #6
 80057c8:	881b      	ldrh	r3, [r3, #0]
 80057ca:	2240      	movs	r2, #64	@ 0x40
 80057cc:	4013      	ands	r3, r2
 80057ce:	d01a      	beq.n	8005806 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	001a      	movs	r2, r3
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	18d3      	adds	r3, r2, r3
 80057de:	881b      	ldrh	r3, [r3, #0]
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	2016      	movs	r0, #22
 80057e4:	183b      	adds	r3, r7, r0
 80057e6:	4955      	ldr	r1, [pc, #340]	@ (800593c <HAL_PCD_EP_DB_Receive+0x22c>)
 80057e8:	400a      	ands	r2, r1
 80057ea:	801a      	strh	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	001a      	movs	r2, r3
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	18d3      	adds	r3, r2, r3
 80057fa:	183a      	adds	r2, r7, r0
 80057fc:	8812      	ldrh	r2, [r2, #0]
 80057fe:	4950      	ldr	r1, [pc, #320]	@ (8005940 <HAL_PCD_EP_DB_Receive+0x230>)
 8005800:	430a      	orrs	r2, r1
 8005802:	b292      	uxth	r2, r2
 8005804:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8005806:	241a      	movs	r4, #26
 8005808:	193b      	adds	r3, r7, r4
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d100      	bne.n	8005812 <HAL_PCD_EP_DB_Receive+0x102>
 8005810:	e086      	b.n	8005920 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6818      	ldr	r0, [r3, #0]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	6959      	ldr	r1, [r3, #20]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	891a      	ldrh	r2, [r3, #8]
 800581e:	193b      	adds	r3, r7, r4
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	f006 f9a6 	bl	800bb72 <USB_ReadPMA>
 8005826:	e07b      	b.n	8005920 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2250      	movs	r2, #80	@ 0x50
 800582e:	5a9b      	ldrh	r3, [r3, r2]
 8005830:	b29b      	uxth	r3, r3
 8005832:	001a      	movs	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	18d2      	adds	r2, r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	18d3      	adds	r3, r2, r3
 8005842:	4a40      	ldr	r2, [pc, #256]	@ (8005944 <HAL_PCD_EP_DB_Receive+0x234>)
 8005844:	4694      	mov	ip, r2
 8005846:	4463      	add	r3, ip
 8005848:	881a      	ldrh	r2, [r3, #0]
 800584a:	211a      	movs	r1, #26
 800584c:	187b      	adds	r3, r7, r1
 800584e:	0592      	lsls	r2, r2, #22
 8005850:	0d92      	lsrs	r2, r2, #22
 8005852:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	699a      	ldr	r2, [r3, #24]
 8005858:	187b      	adds	r3, r7, r1
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	429a      	cmp	r2, r3
 800585e:	d307      	bcc.n	8005870 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	699a      	ldr	r2, [r3, #24]
 8005864:	187b      	adds	r3, r7, r1
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	1ad2      	subs	r2, r2, r3
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	619a      	str	r2, [r3, #24]
 800586e:	e002      	b.n	8005876 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2200      	movs	r2, #0
 8005874:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d121      	bne.n	80058c2 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	001a      	movs	r2, r3
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	18d3      	adds	r3, r2, r3
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	b29a      	uxth	r2, r3
 8005890:	201e      	movs	r0, #30
 8005892:	183b      	adds	r3, r7, r0
 8005894:	4927      	ldr	r1, [pc, #156]	@ (8005934 <HAL_PCD_EP_DB_Receive+0x224>)
 8005896:	400a      	ands	r2, r1
 8005898:	801a      	strh	r2, [r3, #0]
 800589a:	183b      	adds	r3, r7, r0
 800589c:	183a      	adds	r2, r7, r0
 800589e:	8812      	ldrh	r2, [r2, #0]
 80058a0:	2180      	movs	r1, #128	@ 0x80
 80058a2:	0189      	lsls	r1, r1, #6
 80058a4:	404a      	eors	r2, r1
 80058a6:	801a      	strh	r2, [r3, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	001a      	movs	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	18d3      	adds	r3, r2, r3
 80058b6:	183a      	adds	r2, r7, r0
 80058b8:	8812      	ldrh	r2, [r2, #0]
 80058ba:	491f      	ldr	r1, [pc, #124]	@ (8005938 <HAL_PCD_EP_DB_Receive+0x228>)
 80058bc:	430a      	orrs	r2, r1
 80058be:	b292      	uxth	r2, r2
 80058c0:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80058c2:	1dbb      	adds	r3, r7, #6
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	2240      	movs	r2, #64	@ 0x40
 80058c8:	4013      	ands	r3, r2
 80058ca:	d11a      	bne.n	8005902 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	001a      	movs	r2, r3
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	18d3      	adds	r3, r2, r3
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	b29a      	uxth	r2, r3
 80058de:	201c      	movs	r0, #28
 80058e0:	183b      	adds	r3, r7, r0
 80058e2:	4916      	ldr	r1, [pc, #88]	@ (800593c <HAL_PCD_EP_DB_Receive+0x22c>)
 80058e4:	400a      	ands	r2, r1
 80058e6:	801a      	strh	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	001a      	movs	r2, r3
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	18d3      	adds	r3, r2, r3
 80058f6:	183a      	adds	r2, r7, r0
 80058f8:	8812      	ldrh	r2, [r2, #0]
 80058fa:	4911      	ldr	r1, [pc, #68]	@ (8005940 <HAL_PCD_EP_DB_Receive+0x230>)
 80058fc:	430a      	orrs	r2, r1
 80058fe:	b292      	uxth	r2, r2
 8005900:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8005902:	241a      	movs	r4, #26
 8005904:	193b      	adds	r3, r7, r4
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d009      	beq.n	8005920 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6818      	ldr	r0, [r3, #0]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	6959      	ldr	r1, [r3, #20]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	895a      	ldrh	r2, [r3, #10]
 8005918:	193b      	adds	r3, r7, r4
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	f006 f929 	bl	800bb72 <USB_ReadPMA>
    }
  }

  return count;
 8005920:	231a      	movs	r3, #26
 8005922:	18fb      	adds	r3, r7, r3
 8005924:	881b      	ldrh	r3, [r3, #0]
}
 8005926:	0018      	movs	r0, r3
 8005928:	46bd      	mov	sp, r7
 800592a:	b009      	add	sp, #36	@ 0x24
 800592c:	bd90      	pop	{r4, r7, pc}
 800592e:	46c0      	nop			@ (mov r8, r8)
 8005930:	00000402 	.word	0x00000402
 8005934:	ffffbf8f 	.word	0xffffbf8f
 8005938:	ffff8080 	.word	0xffff8080
 800593c:	ffff8f8f 	.word	0xffff8f8f
 8005940:	ffff80c0 	.word	0xffff80c0
 8005944:	00000406 	.word	0x00000406

08005948 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b0a4      	sub	sp, #144	@ 0x90
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	1dbb      	adds	r3, r7, #6
 8005954:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005956:	1dbb      	adds	r3, r7, #6
 8005958:	881b      	ldrh	r3, [r3, #0]
 800595a:	2240      	movs	r2, #64	@ 0x40
 800595c:	4013      	ands	r3, r2
 800595e:	d100      	bne.n	8005962 <HAL_PCD_EP_DB_Transmit+0x1a>
 8005960:	e1e4      	b.n	8005d2c <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2250      	movs	r2, #80	@ 0x50
 8005968:	5a9b      	ldrh	r3, [r3, r2]
 800596a:	b29b      	uxth	r3, r3
 800596c:	001a      	movs	r2, r3
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	18d2      	adds	r2, r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	18d3      	adds	r3, r2, r3
 800597c:	4ad0      	ldr	r2, [pc, #832]	@ (8005cc0 <HAL_PCD_EP_DB_Transmit+0x378>)
 800597e:	4694      	mov	ip, r2
 8005980:	4463      	add	r3, ip
 8005982:	881a      	ldrh	r2, [r3, #0]
 8005984:	2188      	movs	r1, #136	@ 0x88
 8005986:	187b      	adds	r3, r7, r1
 8005988:	0592      	lsls	r2, r2, #22
 800598a:	0d92      	lsrs	r2, r2, #22
 800598c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	699a      	ldr	r2, [r3, #24]
 8005992:	187b      	adds	r3, r7, r1
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	429a      	cmp	r2, r3
 8005998:	d907      	bls.n	80059aa <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	699a      	ldr	r2, [r3, #24]
 800599e:	187b      	adds	r3, r7, r1
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	1ad2      	subs	r2, r2, r3
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	619a      	str	r2, [r3, #24]
 80059a8:	e002      	b.n	80059b0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2200      	movs	r2, #0
 80059ae:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d000      	beq.n	80059ba <HAL_PCD_EP_DB_Transmit+0x72>
 80059b8:	e0b5      	b.n	8005b26 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	785b      	ldrb	r3, [r3, #1]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d125      	bne.n	8005a0e <HAL_PCD_EP_DB_Transmit+0xc6>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2250      	movs	r2, #80	@ 0x50
 80059ce:	5a9b      	ldrh	r3, [r3, r2]
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	001a      	movs	r2, r3
 80059d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d6:	189b      	adds	r3, r3, r2
 80059d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	00da      	lsls	r2, r3, #3
 80059e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e2:	18d3      	adds	r3, r2, r3
 80059e4:	4ab6      	ldr	r2, [pc, #728]	@ (8005cc0 <HAL_PCD_EP_DB_Transmit+0x378>)
 80059e6:	4694      	mov	ip, r2
 80059e8:	4463      	add	r3, ip
 80059ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	059b      	lsls	r3, r3, #22
 80059f4:	0d9b      	lsrs	r3, r3, #22
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fa:	801a      	strh	r2, [r3, #0]
 80059fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	4ab0      	ldr	r2, [pc, #704]	@ (8005cc4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0a:	801a      	strh	r2, [r3, #0]
 8005a0c:	e01b      	b.n	8005a46 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	785b      	ldrb	r3, [r3, #1]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d117      	bne.n	8005a46 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2250      	movs	r2, #80	@ 0x50
 8005a22:	5a9b      	ldrh	r3, [r3, r2]
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	001a      	movs	r2, r3
 8005a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a2a:	189b      	adds	r3, r3, r2
 8005a2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	00da      	lsls	r2, r3, #3
 8005a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a36:	18d3      	adds	r3, r2, r3
 8005a38:	4aa1      	ldr	r2, [pc, #644]	@ (8005cc0 <HAL_PCD_EP_DB_Transmit+0x378>)
 8005a3a:	4694      	mov	ip, r2
 8005a3c:	4463      	add	r3, ip
 8005a3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a42:	2200      	movs	r2, #0
 8005a44:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	785b      	ldrb	r3, [r3, #1]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d125      	bne.n	8005aa0 <HAL_PCD_EP_DB_Transmit+0x158>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	61fb      	str	r3, [r7, #28]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2250      	movs	r2, #80	@ 0x50
 8005a60:	5a9b      	ldrh	r3, [r3, r2]
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	001a      	movs	r2, r3
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	189b      	adds	r3, r3, r2
 8005a6a:	61fb      	str	r3, [r7, #28]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	00da      	lsls	r2, r3, #3
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	18d3      	adds	r3, r2, r3
 8005a76:	4a94      	ldr	r2, [pc, #592]	@ (8005cc8 <HAL_PCD_EP_DB_Transmit+0x380>)
 8005a78:	4694      	mov	ip, r2
 8005a7a:	4463      	add	r3, ip
 8005a7c:	61bb      	str	r3, [r7, #24]
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	059b      	lsls	r3, r3, #22
 8005a86:	0d9b      	lsrs	r3, r3, #22
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	801a      	strh	r2, [r3, #0]
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	4a8b      	ldr	r2, [pc, #556]	@ (8005cc4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	801a      	strh	r2, [r3, #0]
 8005a9e:	e018      	b.n	8005ad2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	785b      	ldrb	r3, [r3, #1]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d114      	bne.n	8005ad2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2250      	movs	r2, #80	@ 0x50
 8005aae:	5a9b      	ldrh	r3, [r3, r2]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	001a      	movs	r2, r3
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab6:	189b      	adds	r3, r3, r2
 8005ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	00da      	lsls	r2, r3, #3
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac2:	18d3      	adds	r3, r2, r3
 8005ac4:	4a80      	ldr	r2, [pc, #512]	@ (8005cc8 <HAL_PCD_EP_DB_Transmit+0x380>)
 8005ac6:	4694      	mov	ip, r2
 8005ac8:	4463      	add	r3, ip
 8005aca:	623b      	str	r3, [r7, #32]
 8005acc:	6a3b      	ldr	r3, [r7, #32]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	781a      	ldrb	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	0011      	movs	r1, r2
 8005ada:	0018      	movs	r0, r3
 8005adc:	f008 f824 	bl	800db28 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005ae0:	1dbb      	adds	r3, r7, #6
 8005ae2:	881a      	ldrh	r2, [r3, #0]
 8005ae4:	2380      	movs	r3, #128	@ 0x80
 8005ae6:	01db      	lsls	r3, r3, #7
 8005ae8:	4013      	ands	r3, r2
 8005aea:	d100      	bne.n	8005aee <HAL_PCD_EP_DB_Transmit+0x1a6>
 8005aec:	e308      	b.n	8006100 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	001a      	movs	r2, r3
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	18d3      	adds	r3, r2, r3
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	2016      	movs	r0, #22
 8005b02:	183b      	adds	r3, r7, r0
 8005b04:	4971      	ldr	r1, [pc, #452]	@ (8005ccc <HAL_PCD_EP_DB_Transmit+0x384>)
 8005b06:	400a      	ands	r2, r1
 8005b08:	801a      	strh	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	001a      	movs	r2, r3
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	18d3      	adds	r3, r2, r3
 8005b18:	183a      	adds	r2, r7, r0
 8005b1a:	8812      	ldrh	r2, [r2, #0]
 8005b1c:	496c      	ldr	r1, [pc, #432]	@ (8005cd0 <HAL_PCD_EP_DB_Transmit+0x388>)
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	b292      	uxth	r2, r2
 8005b22:	801a      	strh	r2, [r3, #0]
 8005b24:	e2ec      	b.n	8006100 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005b26:	1dbb      	adds	r3, r7, #6
 8005b28:	881a      	ldrh	r2, [r3, #0]
 8005b2a:	2380      	movs	r3, #128	@ 0x80
 8005b2c:	01db      	lsls	r3, r3, #7
 8005b2e:	4013      	ands	r3, r2
 8005b30:	d01a      	beq.n	8005b68 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	001a      	movs	r2, r3
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	18d3      	adds	r3, r2, r3
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	208a      	movs	r0, #138	@ 0x8a
 8005b46:	183b      	adds	r3, r7, r0
 8005b48:	4960      	ldr	r1, [pc, #384]	@ (8005ccc <HAL_PCD_EP_DB_Transmit+0x384>)
 8005b4a:	400a      	ands	r2, r1
 8005b4c:	801a      	strh	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	001a      	movs	r2, r3
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	18d3      	adds	r3, r2, r3
 8005b5c:	183a      	adds	r2, r7, r0
 8005b5e:	8812      	ldrh	r2, [r2, #0]
 8005b60:	495b      	ldr	r1, [pc, #364]	@ (8005cd0 <HAL_PCD_EP_DB_Transmit+0x388>)
 8005b62:	430a      	orrs	r2, r1
 8005b64:	b292      	uxth	r2, r2
 8005b66:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2224      	movs	r2, #36	@ 0x24
 8005b6c:	5c9b      	ldrb	r3, [r3, r2]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d000      	beq.n	8005b74 <HAL_PCD_EP_DB_Transmit+0x22c>
 8005b72:	e2c5      	b.n	8006100 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	695a      	ldr	r2, [r3, #20]
 8005b78:	2188      	movs	r1, #136	@ 0x88
 8005b7a:	187b      	adds	r3, r7, r1
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	18d2      	adds	r2, r2, r3
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	69da      	ldr	r2, [r3, #28]
 8005b88:	187b      	adds	r3, r7, r1
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	18d2      	adds	r2, r2, r3
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	6a1a      	ldr	r2, [r3, #32]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d30c      	bcc.n	8005bb8 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	218c      	movs	r1, #140	@ 0x8c
 8005ba4:	187a      	adds	r2, r7, r1
 8005ba6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	6a1a      	ldr	r2, [r3, #32]
 8005bac:	187b      	adds	r3, r7, r1
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	1ad2      	subs	r2, r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	621a      	str	r2, [r3, #32]
 8005bb6:	e01a      	b.n	8005bee <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10a      	bne.n	8005bd6 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8005bc0:	2388      	movs	r3, #136	@ 0x88
 8005bc2:	18fb      	adds	r3, r7, r3
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	228c      	movs	r2, #140	@ 0x8c
 8005bc8:	18ba      	adds	r2, r7, r2
 8005bca:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2224      	movs	r2, #36	@ 0x24
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	5499      	strb	r1, [r3, r2]
 8005bd4:	e00b      	b.n	8005bee <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	2224      	movs	r2, #36	@ 0x24
 8005bda:	2100      	movs	r1, #0
 8005bdc:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	228c      	movs	r2, #140	@ 0x8c
 8005be4:	18ba      	adds	r2, r7, r2
 8005be6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2200      	movs	r2, #0
 8005bec:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	785b      	ldrb	r3, [r3, #1]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d000      	beq.n	8005bf8 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8005bf6:	e06d      	b.n	8005cd4 <HAL_PCD_EP_DB_Transmit+0x38c>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2250      	movs	r2, #80	@ 0x50
 8005c04:	5a9b      	ldrh	r3, [r3, r2]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	001a      	movs	r2, r3
 8005c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c0c:	189b      	adds	r3, r3, r2
 8005c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	00da      	lsls	r2, r3, #3
 8005c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c18:	18d3      	adds	r3, r2, r3
 8005c1a:	4a29      	ldr	r2, [pc, #164]	@ (8005cc0 <HAL_PCD_EP_DB_Transmit+0x378>)
 8005c1c:	4694      	mov	ip, r2
 8005c1e:	4463      	add	r3, ip
 8005c20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	059b      	lsls	r3, r3, #22
 8005c2a:	0d9b      	lsrs	r3, r3, #22
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c30:	801a      	strh	r2, [r3, #0]
 8005c32:	238c      	movs	r3, #140	@ 0x8c
 8005c34:	18fb      	adds	r3, r7, r3
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d108      	bne.n	8005c4e <HAL_PCD_EP_DB_Transmit+0x306>
 8005c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	4a20      	ldr	r2, [pc, #128]	@ (8005cc4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c4a:	801a      	strh	r2, [r3, #0]
 8005c4c:	e061      	b.n	8005d12 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005c4e:	228c      	movs	r2, #140	@ 0x8c
 8005c50:	18bb      	adds	r3, r7, r2
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c56:	d817      	bhi.n	8005c88 <HAL_PCD_EP_DB_Transmit+0x340>
 8005c58:	18bb      	adds	r3, r7, r2
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	085b      	lsrs	r3, r3, #1
 8005c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c60:	18bb      	adds	r3, r7, r2
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2201      	movs	r2, #1
 8005c66:	4013      	ands	r3, r2
 8005c68:	d002      	beq.n	8005c70 <HAL_PCD_EP_DB_Transmit+0x328>
 8005c6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	029b      	lsls	r3, r3, #10
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c84:	801a      	strh	r2, [r3, #0]
 8005c86:	e044      	b.n	8005d12 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005c88:	228c      	movs	r2, #140	@ 0x8c
 8005c8a:	18bb      	adds	r3, r7, r2
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	095b      	lsrs	r3, r3, #5
 8005c90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c92:	18bb      	adds	r3, r7, r2
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	221f      	movs	r2, #31
 8005c98:	4013      	ands	r3, r2
 8005c9a:	d102      	bne.n	8005ca2 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005c9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	029b      	lsls	r3, r3, #10
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	4a03      	ldr	r2, [pc, #12]	@ (8005cc4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cbc:	801a      	strh	r2, [r3, #0]
 8005cbe:	e028      	b.n	8005d12 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005cc0:	00000402 	.word	0x00000402
 8005cc4:	ffff8000 	.word	0xffff8000
 8005cc8:	00000406 	.word	0x00000406
 8005ccc:	ffff8f8f 	.word	0xffff8f8f
 8005cd0:	ffffc080 	.word	0xffffc080
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	785b      	ldrb	r3, [r3, #1]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d11a      	bne.n	8005d12 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2250      	movs	r2, #80	@ 0x50
 8005ce8:	5a9b      	ldrh	r3, [r3, r2]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	001a      	movs	r2, r3
 8005cee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cf0:	189b      	adds	r3, r3, r2
 8005cf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	00da      	lsls	r2, r3, #3
 8005cfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cfc:	18d3      	adds	r3, r2, r3
 8005cfe:	4ad9      	ldr	r2, [pc, #868]	@ (8006064 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005d00:	4694      	mov	ip, r2
 8005d02:	4463      	add	r3, ip
 8005d04:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d06:	238c      	movs	r3, #140	@ 0x8c
 8005d08:	18fb      	adds	r3, r7, r3
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d10:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6818      	ldr	r0, [r3, #0]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	6959      	ldr	r1, [r3, #20]
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	891a      	ldrh	r2, [r3, #8]
 8005d1e:	238c      	movs	r3, #140	@ 0x8c
 8005d20:	18fb      	adds	r3, r7, r3
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	f005 fedb 	bl	800bae0 <USB_WritePMA>
 8005d2a:	e1e9      	b.n	8006100 <HAL_PCD_EP_DB_Transmit+0x7b8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2250      	movs	r2, #80	@ 0x50
 8005d32:	5a9b      	ldrh	r3, [r3, r2]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	001a      	movs	r2, r3
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	18d2      	adds	r2, r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	18d3      	adds	r3, r2, r3
 8005d46:	4ac8      	ldr	r2, [pc, #800]	@ (8006068 <HAL_PCD_EP_DB_Transmit+0x720>)
 8005d48:	4694      	mov	ip, r2
 8005d4a:	4463      	add	r3, ip
 8005d4c:	881a      	ldrh	r2, [r3, #0]
 8005d4e:	2188      	movs	r1, #136	@ 0x88
 8005d50:	187b      	adds	r3, r7, r1
 8005d52:	0592      	lsls	r2, r2, #22
 8005d54:	0d92      	lsrs	r2, r2, #22
 8005d56:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	699a      	ldr	r2, [r3, #24]
 8005d5c:	187b      	adds	r3, r7, r1
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d307      	bcc.n	8005d74 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	699a      	ldr	r2, [r3, #24]
 8005d68:	187b      	adds	r3, r7, r1
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	1ad2      	subs	r2, r2, r3
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	619a      	str	r2, [r3, #24]
 8005d72:	e002      	b.n	8005d7a <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2200      	movs	r2, #0
 8005d78:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d000      	beq.n	8005d84 <HAL_PCD_EP_DB_Transmit+0x43c>
 8005d82:	e0bb      	b.n	8005efc <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	785b      	ldrb	r3, [r3, #1]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d125      	bne.n	8005dd8 <HAL_PCD_EP_DB_Transmit+0x490>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2250      	movs	r2, #80	@ 0x50
 8005d98:	5a9b      	ldrh	r3, [r3, r2]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	001a      	movs	r2, r3
 8005d9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005da0:	189b      	adds	r3, r3, r2
 8005da2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	00da      	lsls	r2, r3, #3
 8005daa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005dac:	18d3      	adds	r3, r2, r3
 8005dae:	4aad      	ldr	r2, [pc, #692]	@ (8006064 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005db0:	4694      	mov	ip, r2
 8005db2:	4463      	add	r3, ip
 8005db4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005db6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	059b      	lsls	r3, r3, #22
 8005dbe:	0d9b      	lsrs	r3, r3, #22
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dc4:	801a      	strh	r2, [r3, #0]
 8005dc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	4aa7      	ldr	r2, [pc, #668]	@ (800606c <HAL_PCD_EP_DB_Transmit+0x724>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dd4:	801a      	strh	r2, [r3, #0]
 8005dd6:	e01b      	b.n	8005e10 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	785b      	ldrb	r3, [r3, #1]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d117      	bne.n	8005e10 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	667b      	str	r3, [r7, #100]	@ 0x64
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2250      	movs	r2, #80	@ 0x50
 8005dec:	5a9b      	ldrh	r3, [r3, r2]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	001a      	movs	r2, r3
 8005df2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005df4:	189b      	adds	r3, r3, r2
 8005df6:	667b      	str	r3, [r7, #100]	@ 0x64
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	00da      	lsls	r2, r3, #3
 8005dfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e00:	18d3      	adds	r3, r2, r3
 8005e02:	4a98      	ldr	r2, [pc, #608]	@ (8006064 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005e04:	4694      	mov	ip, r2
 8005e06:	4463      	add	r3, ip
 8005e08:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	785b      	ldrb	r3, [r3, #1]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d12b      	bne.n	8005e76 <HAL_PCD_EP_DB_Transmit+0x52e>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2250      	movs	r2, #80	@ 0x50
 8005e2a:	5a9b      	ldrh	r3, [r3, r2]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	001a      	movs	r2, r3
 8005e30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e32:	189b      	adds	r3, r3, r2
 8005e34:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	00da      	lsls	r2, r3, #3
 8005e3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e3e:	18d3      	adds	r3, r2, r3
 8005e40:	4a89      	ldr	r2, [pc, #548]	@ (8006068 <HAL_PCD_EP_DB_Transmit+0x720>)
 8005e42:	4694      	mov	ip, r2
 8005e44:	4463      	add	r3, ip
 8005e46:	2184      	movs	r1, #132	@ 0x84
 8005e48:	187a      	adds	r2, r7, r1
 8005e4a:	6013      	str	r3, [r2, #0]
 8005e4c:	187b      	adds	r3, r7, r1
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	881b      	ldrh	r3, [r3, #0]
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	059b      	lsls	r3, r3, #22
 8005e56:	0d9b      	lsrs	r3, r3, #22
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	187b      	adds	r3, r7, r1
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	801a      	strh	r2, [r3, #0]
 8005e60:	187b      	adds	r3, r7, r1
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	881b      	ldrh	r3, [r3, #0]
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	4a80      	ldr	r2, [pc, #512]	@ (800606c <HAL_PCD_EP_DB_Transmit+0x724>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	187b      	adds	r3, r7, r1
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	801a      	strh	r2, [r3, #0]
 8005e74:	e018      	b.n	8005ea8 <HAL_PCD_EP_DB_Transmit+0x560>
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	785b      	ldrb	r3, [r3, #1]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d114      	bne.n	8005ea8 <HAL_PCD_EP_DB_Transmit+0x560>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2250      	movs	r2, #80	@ 0x50
 8005e84:	5a9b      	ldrh	r3, [r3, r2]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	001a      	movs	r2, r3
 8005e8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e8c:	189b      	adds	r3, r3, r2
 8005e8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	00da      	lsls	r2, r3, #3
 8005e96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e98:	18d3      	adds	r3, r2, r3
 8005e9a:	4a73      	ldr	r2, [pc, #460]	@ (8006068 <HAL_PCD_EP_DB_Transmit+0x720>)
 8005e9c:	4694      	mov	ip, r2
 8005e9e:	4463      	add	r3, ip
 8005ea0:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ea2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	781a      	ldrb	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	0011      	movs	r1, r2
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	f007 fe39 	bl	800db28 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005eb6:	1dbb      	adds	r3, r7, #6
 8005eb8:	881a      	ldrh	r2, [r3, #0]
 8005eba:	2380      	movs	r3, #128	@ 0x80
 8005ebc:	01db      	lsls	r3, r3, #7
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	d000      	beq.n	8005ec4 <HAL_PCD_EP_DB_Transmit+0x57c>
 8005ec2:	e11d      	b.n	8006100 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	001a      	movs	r2, r3
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	18d3      	adds	r3, r2, r3
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	2082      	movs	r0, #130	@ 0x82
 8005ed8:	183b      	adds	r3, r7, r0
 8005eda:	4965      	ldr	r1, [pc, #404]	@ (8006070 <HAL_PCD_EP_DB_Transmit+0x728>)
 8005edc:	400a      	ands	r2, r1
 8005ede:	801a      	strh	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	001a      	movs	r2, r3
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	18d3      	adds	r3, r2, r3
 8005eee:	183a      	adds	r2, r7, r0
 8005ef0:	8812      	ldrh	r2, [r2, #0]
 8005ef2:	4960      	ldr	r1, [pc, #384]	@ (8006074 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	b292      	uxth	r2, r2
 8005ef8:	801a      	strh	r2, [r3, #0]
 8005efa:	e101      	b.n	8006100 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005efc:	1dbb      	adds	r3, r7, #6
 8005efe:	881a      	ldrh	r2, [r3, #0]
 8005f00:	2380      	movs	r3, #128	@ 0x80
 8005f02:	01db      	lsls	r3, r3, #7
 8005f04:	4013      	ands	r3, r2
 8005f06:	d11a      	bne.n	8005f3e <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	001a      	movs	r2, r3
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	18d3      	adds	r3, r2, r3
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	204e      	movs	r0, #78	@ 0x4e
 8005f1c:	183b      	adds	r3, r7, r0
 8005f1e:	4954      	ldr	r1, [pc, #336]	@ (8006070 <HAL_PCD_EP_DB_Transmit+0x728>)
 8005f20:	400a      	ands	r2, r1
 8005f22:	801a      	strh	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	001a      	movs	r2, r3
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	18d3      	adds	r3, r2, r3
 8005f32:	183a      	adds	r2, r7, r0
 8005f34:	8812      	ldrh	r2, [r2, #0]
 8005f36:	494f      	ldr	r1, [pc, #316]	@ (8006074 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	b292      	uxth	r2, r2
 8005f3c:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	2224      	movs	r2, #36	@ 0x24
 8005f42:	5c9b      	ldrb	r3, [r3, r2]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d000      	beq.n	8005f4a <HAL_PCD_EP_DB_Transmit+0x602>
 8005f48:	e0da      	b.n	8006100 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	695a      	ldr	r2, [r3, #20]
 8005f4e:	2188      	movs	r1, #136	@ 0x88
 8005f50:	187b      	adds	r3, r7, r1
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	18d2      	adds	r2, r2, r3
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	69da      	ldr	r2, [r3, #28]
 8005f5e:	187b      	adds	r3, r7, r1
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	18d2      	adds	r2, r2, r3
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	6a1a      	ldr	r2, [r3, #32]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d30c      	bcc.n	8005f8e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	218c      	movs	r1, #140	@ 0x8c
 8005f7a:	187a      	adds	r2, r7, r1
 8005f7c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	6a1a      	ldr	r2, [r3, #32]
 8005f82:	187b      	adds	r3, r7, r1
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	1ad2      	subs	r2, r2, r3
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	621a      	str	r2, [r3, #32]
 8005f8c:	e01a      	b.n	8005fc4 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10a      	bne.n	8005fac <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8005f96:	2388      	movs	r3, #136	@ 0x88
 8005f98:	18fb      	adds	r3, r7, r3
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	228c      	movs	r2, #140	@ 0x8c
 8005f9e:	18ba      	adds	r2, r7, r2
 8005fa0:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2224      	movs	r2, #36	@ 0x24
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	5499      	strb	r1, [r3, r2]
 8005faa:	e00b      	b.n	8005fc4 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	228c      	movs	r2, #140	@ 0x8c
 8005fb2:	18ba      	adds	r2, r7, r2
 8005fb4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2224      	movs	r2, #36	@ 0x24
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	785b      	ldrb	r3, [r3, #1]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d000      	beq.n	8005fd4 <HAL_PCD_EP_DB_Transmit+0x68c>
 8005fd2:	e06d      	b.n	80060b0 <HAL_PCD_EP_DB_Transmit+0x768>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2250      	movs	r2, #80	@ 0x50
 8005fe0:	5a9b      	ldrh	r3, [r3, r2]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	001a      	movs	r2, r3
 8005fe6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fe8:	189b      	adds	r3, r3, r2
 8005fea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	00da      	lsls	r2, r3, #3
 8005ff2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ff4:	18d3      	adds	r3, r2, r3
 8005ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8006068 <HAL_PCD_EP_DB_Transmit+0x720>)
 8005ff8:	4694      	mov	ip, r2
 8005ffa:	4463      	add	r3, ip
 8005ffc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ffe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	b29b      	uxth	r3, r3
 8006004:	059b      	lsls	r3, r3, #22
 8006006:	0d9b      	lsrs	r3, r3, #22
 8006008:	b29a      	uxth	r2, r3
 800600a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800600c:	801a      	strh	r2, [r3, #0]
 800600e:	238c      	movs	r3, #140	@ 0x8c
 8006010:	18fb      	adds	r3, r7, r3
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d108      	bne.n	800602a <HAL_PCD_EP_DB_Transmit+0x6e2>
 8006018:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	b29b      	uxth	r3, r3
 800601e:	4a13      	ldr	r2, [pc, #76]	@ (800606c <HAL_PCD_EP_DB_Transmit+0x724>)
 8006020:	4313      	orrs	r3, r2
 8006022:	b29a      	uxth	r2, r3
 8006024:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006026:	801a      	strh	r2, [r3, #0]
 8006028:	e05e      	b.n	80060e8 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800602a:	228c      	movs	r2, #140	@ 0x8c
 800602c:	18bb      	adds	r3, r7, r2
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2b3e      	cmp	r3, #62	@ 0x3e
 8006032:	d821      	bhi.n	8006078 <HAL_PCD_EP_DB_Transmit+0x730>
 8006034:	18bb      	adds	r3, r7, r2
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	085b      	lsrs	r3, r3, #1
 800603a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800603c:	18bb      	adds	r3, r7, r2
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2201      	movs	r2, #1
 8006042:	4013      	ands	r3, r2
 8006044:	d002      	beq.n	800604c <HAL_PCD_EP_DB_Transmit+0x704>
 8006046:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006048:	3301      	adds	r3, #1
 800604a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800604c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	b29a      	uxth	r2, r3
 8006052:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006054:	b29b      	uxth	r3, r3
 8006056:	029b      	lsls	r3, r3, #10
 8006058:	b29b      	uxth	r3, r3
 800605a:	4313      	orrs	r3, r2
 800605c:	b29a      	uxth	r2, r3
 800605e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006060:	801a      	strh	r2, [r3, #0]
 8006062:	e041      	b.n	80060e8 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8006064:	00000402 	.word	0x00000402
 8006068:	00000406 	.word	0x00000406
 800606c:	ffff8000 	.word	0xffff8000
 8006070:	ffff8f8f 	.word	0xffff8f8f
 8006074:	ffffc080 	.word	0xffffc080
 8006078:	228c      	movs	r2, #140	@ 0x8c
 800607a:	18bb      	adds	r3, r7, r2
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	095b      	lsrs	r3, r3, #5
 8006080:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006082:	18bb      	adds	r3, r7, r2
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	221f      	movs	r2, #31
 8006088:	4013      	ands	r3, r2
 800608a:	d102      	bne.n	8006092 <HAL_PCD_EP_DB_Transmit+0x74a>
 800608c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800608e:	3b01      	subs	r3, #1
 8006090:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006092:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	b29a      	uxth	r2, r3
 8006098:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800609a:	b29b      	uxth	r3, r3
 800609c:	029b      	lsls	r3, r3, #10
 800609e:	b29b      	uxth	r3, r3
 80060a0:	4313      	orrs	r3, r2
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	4a2c      	ldr	r2, [pc, #176]	@ (8006158 <HAL_PCD_EP_DB_Transmit+0x810>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060ac:	801a      	strh	r2, [r3, #0]
 80060ae:	e01b      	b.n	80060e8 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	785b      	ldrb	r3, [r3, #1]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d117      	bne.n	80060e8 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2250      	movs	r2, #80	@ 0x50
 80060be:	5a9b      	ldrh	r3, [r3, r2]
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	001a      	movs	r2, r3
 80060c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060c6:	189b      	adds	r3, r3, r2
 80060c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	00da      	lsls	r2, r3, #3
 80060d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060d2:	18d3      	adds	r3, r2, r3
 80060d4:	4a21      	ldr	r2, [pc, #132]	@ (800615c <HAL_PCD_EP_DB_Transmit+0x814>)
 80060d6:	4694      	mov	ip, r2
 80060d8:	4463      	add	r3, ip
 80060da:	653b      	str	r3, [r7, #80]	@ 0x50
 80060dc:	238c      	movs	r3, #140	@ 0x8c
 80060de:	18fb      	adds	r3, r7, r3
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060e6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6818      	ldr	r0, [r3, #0]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	6959      	ldr	r1, [r3, #20]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	895a      	ldrh	r2, [r3, #10]
 80060f4:	238c      	movs	r3, #140	@ 0x8c
 80060f6:	18fb      	adds	r3, r7, r3
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	f005 fcf0 	bl	800bae0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	001a      	movs	r2, r3
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	18d3      	adds	r3, r2, r3
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	b29a      	uxth	r2, r3
 8006112:	2014      	movs	r0, #20
 8006114:	183b      	adds	r3, r7, r0
 8006116:	4912      	ldr	r1, [pc, #72]	@ (8006160 <HAL_PCD_EP_DB_Transmit+0x818>)
 8006118:	400a      	ands	r2, r1
 800611a:	801a      	strh	r2, [r3, #0]
 800611c:	183b      	adds	r3, r7, r0
 800611e:	183a      	adds	r2, r7, r0
 8006120:	8812      	ldrh	r2, [r2, #0]
 8006122:	2110      	movs	r1, #16
 8006124:	404a      	eors	r2, r1
 8006126:	801a      	strh	r2, [r3, #0]
 8006128:	183b      	adds	r3, r7, r0
 800612a:	183a      	adds	r2, r7, r0
 800612c:	8812      	ldrh	r2, [r2, #0]
 800612e:	2120      	movs	r1, #32
 8006130:	404a      	eors	r2, r1
 8006132:	801a      	strh	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	001a      	movs	r2, r3
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	18d3      	adds	r3, r2, r3
 8006142:	183a      	adds	r2, r7, r0
 8006144:	8812      	ldrh	r2, [r2, #0]
 8006146:	4907      	ldr	r1, [pc, #28]	@ (8006164 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8006148:	430a      	orrs	r2, r1
 800614a:	b292      	uxth	r2, r2
 800614c:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	0018      	movs	r0, r3
 8006152:	46bd      	mov	sp, r7
 8006154:	b024      	add	sp, #144	@ 0x90
 8006156:	bd80      	pop	{r7, pc}
 8006158:	ffff8000 	.word	0xffff8000
 800615c:	00000406 	.word	0x00000406
 8006160:	ffff8fbf 	.word	0xffff8fbf
 8006164:	ffff8080 	.word	0xffff8080

08006168 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006168:	b590      	push	{r4, r7, lr}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	0008      	movs	r0, r1
 8006172:	0011      	movs	r1, r2
 8006174:	607b      	str	r3, [r7, #4]
 8006176:	240a      	movs	r4, #10
 8006178:	193b      	adds	r3, r7, r4
 800617a:	1c02      	adds	r2, r0, #0
 800617c:	801a      	strh	r2, [r3, #0]
 800617e:	2308      	movs	r3, #8
 8006180:	18fb      	adds	r3, r7, r3
 8006182:	1c0a      	adds	r2, r1, #0
 8006184:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006186:	0021      	movs	r1, r4
 8006188:	187b      	adds	r3, r7, r1
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	2280      	movs	r2, #128	@ 0x80
 800618e:	4013      	ands	r3, r2
 8006190:	b29b      	uxth	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00c      	beq.n	80061b0 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006196:	187b      	adds	r3, r7, r1
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	2207      	movs	r2, #7
 800619c:	401a      	ands	r2, r3
 800619e:	0013      	movs	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	189b      	adds	r3, r3, r2
 80061a4:	00db      	lsls	r3, r3, #3
 80061a6:	3310      	adds	r3, #16
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	18d3      	adds	r3, r2, r3
 80061ac:	617b      	str	r3, [r7, #20]
 80061ae:	e00b      	b.n	80061c8 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80061b0:	230a      	movs	r3, #10
 80061b2:	18fb      	adds	r3, r7, r3
 80061b4:	881a      	ldrh	r2, [r3, #0]
 80061b6:	0013      	movs	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	189b      	adds	r3, r3, r2
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	3351      	adds	r3, #81	@ 0x51
 80061c0:	33ff      	adds	r3, #255	@ 0xff
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	18d3      	adds	r3, r2, r3
 80061c6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80061c8:	2308      	movs	r3, #8
 80061ca:	18fb      	adds	r3, r7, r3
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d107      	bne.n	80061e2 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2200      	movs	r2, #0
 80061d6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	b29a      	uxth	r2, r3
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	80da      	strh	r2, [r3, #6]
 80061e0:	e00b      	b.n	80061fa <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	2201      	movs	r2, #1
 80061e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	0c1b      	lsrs	r3, r3, #16
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	0018      	movs	r0, r3
 80061fe:	46bd      	mov	sp, r7
 8006200:	b007      	add	sp, #28
 8006202:	bd90      	pop	{r4, r7, pc}

08006204 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	23b4      	movs	r3, #180	@ 0xb4
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	2101      	movs	r1, #1
 800621a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	23b2      	movs	r3, #178	@ 0xb2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	2100      	movs	r1, #0
 8006224:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2254      	movs	r2, #84	@ 0x54
 800622a:	5a9b      	ldrh	r3, [r3, r2]
 800622c:	b29b      	uxth	r3, r3
 800622e:	2201      	movs	r2, #1
 8006230:	4313      	orrs	r3, r2
 8006232:	b299      	uxth	r1, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2254      	movs	r2, #84	@ 0x54
 8006238:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2254      	movs	r2, #84	@ 0x54
 800623e:	5a9b      	ldrh	r3, [r3, r2]
 8006240:	b29b      	uxth	r3, r3
 8006242:	2202      	movs	r2, #2
 8006244:	4313      	orrs	r3, r2
 8006246:	b299      	uxth	r1, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2254      	movs	r2, #84	@ 0x54
 800624c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	0018      	movs	r0, r3
 8006252:	46bd      	mov	sp, r7
 8006254:	b004      	add	sp, #16
 8006256:	bd80      	pop	{r7, pc}

08006258 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	000a      	movs	r2, r1
 8006262:	1cfb      	adds	r3, r7, #3
 8006264:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006266:	46c0      	nop			@ (mov r8, r8)
 8006268:	46bd      	mov	sp, r7
 800626a:	b002      	add	sp, #8
 800626c:	bd80      	pop	{r7, pc}
	...

08006270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d102      	bne.n	8006284 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	f000 fb76 	bl	8006970 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2201      	movs	r2, #1
 800628a:	4013      	ands	r3, r2
 800628c:	d100      	bne.n	8006290 <HAL_RCC_OscConfig+0x20>
 800628e:	e08e      	b.n	80063ae <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006290:	4bc5      	ldr	r3, [pc, #788]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	220c      	movs	r2, #12
 8006296:	4013      	ands	r3, r2
 8006298:	2b04      	cmp	r3, #4
 800629a:	d00e      	beq.n	80062ba <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800629c:	4bc2      	ldr	r3, [pc, #776]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	220c      	movs	r2, #12
 80062a2:	4013      	ands	r3, r2
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d117      	bne.n	80062d8 <HAL_RCC_OscConfig+0x68>
 80062a8:	4bbf      	ldr	r3, [pc, #764]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	23c0      	movs	r3, #192	@ 0xc0
 80062ae:	025b      	lsls	r3, r3, #9
 80062b0:	401a      	ands	r2, r3
 80062b2:	2380      	movs	r3, #128	@ 0x80
 80062b4:	025b      	lsls	r3, r3, #9
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d10e      	bne.n	80062d8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ba:	4bbb      	ldr	r3, [pc, #748]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	2380      	movs	r3, #128	@ 0x80
 80062c0:	029b      	lsls	r3, r3, #10
 80062c2:	4013      	ands	r3, r2
 80062c4:	d100      	bne.n	80062c8 <HAL_RCC_OscConfig+0x58>
 80062c6:	e071      	b.n	80063ac <HAL_RCC_OscConfig+0x13c>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d000      	beq.n	80062d2 <HAL_RCC_OscConfig+0x62>
 80062d0:	e06c      	b.n	80063ac <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	f000 fb4c 	bl	8006970 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d107      	bne.n	80062f0 <HAL_RCC_OscConfig+0x80>
 80062e0:	4bb1      	ldr	r3, [pc, #708]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	4bb0      	ldr	r3, [pc, #704]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 80062e6:	2180      	movs	r1, #128	@ 0x80
 80062e8:	0249      	lsls	r1, r1, #9
 80062ea:	430a      	orrs	r2, r1
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	e02f      	b.n	8006350 <HAL_RCC_OscConfig+0xe0>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10c      	bne.n	8006312 <HAL_RCC_OscConfig+0xa2>
 80062f8:	4bab      	ldr	r3, [pc, #684]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	4baa      	ldr	r3, [pc, #680]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 80062fe:	49ab      	ldr	r1, [pc, #684]	@ (80065ac <HAL_RCC_OscConfig+0x33c>)
 8006300:	400a      	ands	r2, r1
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	4ba8      	ldr	r3, [pc, #672]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	4ba7      	ldr	r3, [pc, #668]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 800630a:	49a9      	ldr	r1, [pc, #676]	@ (80065b0 <HAL_RCC_OscConfig+0x340>)
 800630c:	400a      	ands	r2, r1
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	e01e      	b.n	8006350 <HAL_RCC_OscConfig+0xe0>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2b05      	cmp	r3, #5
 8006318:	d10e      	bne.n	8006338 <HAL_RCC_OscConfig+0xc8>
 800631a:	4ba3      	ldr	r3, [pc, #652]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	4ba2      	ldr	r3, [pc, #648]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 8006320:	2180      	movs	r1, #128	@ 0x80
 8006322:	02c9      	lsls	r1, r1, #11
 8006324:	430a      	orrs	r2, r1
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	4b9f      	ldr	r3, [pc, #636]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	4b9e      	ldr	r3, [pc, #632]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 800632e:	2180      	movs	r1, #128	@ 0x80
 8006330:	0249      	lsls	r1, r1, #9
 8006332:	430a      	orrs	r2, r1
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	e00b      	b.n	8006350 <HAL_RCC_OscConfig+0xe0>
 8006338:	4b9b      	ldr	r3, [pc, #620]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	4b9a      	ldr	r3, [pc, #616]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 800633e:	499b      	ldr	r1, [pc, #620]	@ (80065ac <HAL_RCC_OscConfig+0x33c>)
 8006340:	400a      	ands	r2, r1
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	4b98      	ldr	r3, [pc, #608]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	4b97      	ldr	r3, [pc, #604]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 800634a:	4999      	ldr	r1, [pc, #612]	@ (80065b0 <HAL_RCC_OscConfig+0x340>)
 800634c:	400a      	ands	r2, r1
 800634e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d014      	beq.n	8006382 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006358:	f7fd f9d8 	bl	800370c <HAL_GetTick>
 800635c:	0003      	movs	r3, r0
 800635e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006360:	e008      	b.n	8006374 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006362:	f7fd f9d3 	bl	800370c <HAL_GetTick>
 8006366:	0002      	movs	r2, r0
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	2b64      	cmp	r3, #100	@ 0x64
 800636e:	d901      	bls.n	8006374 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e2fd      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006374:	4b8c      	ldr	r3, [pc, #560]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	2380      	movs	r3, #128	@ 0x80
 800637a:	029b      	lsls	r3, r3, #10
 800637c:	4013      	ands	r3, r2
 800637e:	d0f0      	beq.n	8006362 <HAL_RCC_OscConfig+0xf2>
 8006380:	e015      	b.n	80063ae <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006382:	f7fd f9c3 	bl	800370c <HAL_GetTick>
 8006386:	0003      	movs	r3, r0
 8006388:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800638a:	e008      	b.n	800639e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800638c:	f7fd f9be 	bl	800370c <HAL_GetTick>
 8006390:	0002      	movs	r2, r0
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b64      	cmp	r3, #100	@ 0x64
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e2e8      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800639e:	4b82      	ldr	r3, [pc, #520]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	2380      	movs	r3, #128	@ 0x80
 80063a4:	029b      	lsls	r3, r3, #10
 80063a6:	4013      	ands	r3, r2
 80063a8:	d1f0      	bne.n	800638c <HAL_RCC_OscConfig+0x11c>
 80063aa:	e000      	b.n	80063ae <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063ac:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2202      	movs	r2, #2
 80063b4:	4013      	ands	r3, r2
 80063b6:	d100      	bne.n	80063ba <HAL_RCC_OscConfig+0x14a>
 80063b8:	e06c      	b.n	8006494 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80063ba:	4b7b      	ldr	r3, [pc, #492]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	220c      	movs	r2, #12
 80063c0:	4013      	ands	r3, r2
 80063c2:	d00e      	beq.n	80063e2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80063c4:	4b78      	ldr	r3, [pc, #480]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	220c      	movs	r2, #12
 80063ca:	4013      	ands	r3, r2
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d11f      	bne.n	8006410 <HAL_RCC_OscConfig+0x1a0>
 80063d0:	4b75      	ldr	r3, [pc, #468]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	23c0      	movs	r3, #192	@ 0xc0
 80063d6:	025b      	lsls	r3, r3, #9
 80063d8:	401a      	ands	r2, r3
 80063da:	2380      	movs	r3, #128	@ 0x80
 80063dc:	021b      	lsls	r3, r3, #8
 80063de:	429a      	cmp	r2, r3
 80063e0:	d116      	bne.n	8006410 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063e2:	4b71      	ldr	r3, [pc, #452]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2202      	movs	r2, #2
 80063e8:	4013      	ands	r3, r2
 80063ea:	d005      	beq.n	80063f8 <HAL_RCC_OscConfig+0x188>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d001      	beq.n	80063f8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e2bb      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063f8:	4b6b      	ldr	r3, [pc, #428]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	22f8      	movs	r2, #248	@ 0xf8
 80063fe:	4393      	bics	r3, r2
 8006400:	0019      	movs	r1, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	00da      	lsls	r2, r3, #3
 8006408:	4b67      	ldr	r3, [pc, #412]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 800640a:	430a      	orrs	r2, r1
 800640c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800640e:	e041      	b.n	8006494 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d024      	beq.n	8006462 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006418:	4b63      	ldr	r3, [pc, #396]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	4b62      	ldr	r3, [pc, #392]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 800641e:	2101      	movs	r1, #1
 8006420:	430a      	orrs	r2, r1
 8006422:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006424:	f7fd f972 	bl	800370c <HAL_GetTick>
 8006428:	0003      	movs	r3, r0
 800642a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800642c:	e008      	b.n	8006440 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800642e:	f7fd f96d 	bl	800370c <HAL_GetTick>
 8006432:	0002      	movs	r2, r0
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d901      	bls.n	8006440 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e297      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006440:	4b59      	ldr	r3, [pc, #356]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2202      	movs	r2, #2
 8006446:	4013      	ands	r3, r2
 8006448:	d0f1      	beq.n	800642e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800644a:	4b57      	ldr	r3, [pc, #348]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	22f8      	movs	r2, #248	@ 0xf8
 8006450:	4393      	bics	r3, r2
 8006452:	0019      	movs	r1, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	00da      	lsls	r2, r3, #3
 800645a:	4b53      	ldr	r3, [pc, #332]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 800645c:	430a      	orrs	r2, r1
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	e018      	b.n	8006494 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006462:	4b51      	ldr	r3, [pc, #324]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	4b50      	ldr	r3, [pc, #320]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 8006468:	2101      	movs	r1, #1
 800646a:	438a      	bics	r2, r1
 800646c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800646e:	f7fd f94d 	bl	800370c <HAL_GetTick>
 8006472:	0003      	movs	r3, r0
 8006474:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006478:	f7fd f948 	bl	800370c <HAL_GetTick>
 800647c:	0002      	movs	r2, r0
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e272      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800648a:	4b47      	ldr	r3, [pc, #284]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2202      	movs	r2, #2
 8006490:	4013      	ands	r3, r2
 8006492:	d1f1      	bne.n	8006478 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2208      	movs	r2, #8
 800649a:	4013      	ands	r3, r2
 800649c:	d036      	beq.n	800650c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d019      	beq.n	80064da <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064a6:	4b40      	ldr	r3, [pc, #256]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 80064a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064aa:	4b3f      	ldr	r3, [pc, #252]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 80064ac:	2101      	movs	r1, #1
 80064ae:	430a      	orrs	r2, r1
 80064b0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064b2:	f7fd f92b 	bl	800370c <HAL_GetTick>
 80064b6:	0003      	movs	r3, r0
 80064b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064ba:	e008      	b.n	80064ce <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064bc:	f7fd f926 	bl	800370c <HAL_GetTick>
 80064c0:	0002      	movs	r2, r0
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e250      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064ce:	4b36      	ldr	r3, [pc, #216]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 80064d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d2:	2202      	movs	r2, #2
 80064d4:	4013      	ands	r3, r2
 80064d6:	d0f1      	beq.n	80064bc <HAL_RCC_OscConfig+0x24c>
 80064d8:	e018      	b.n	800650c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064da:	4b33      	ldr	r3, [pc, #204]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 80064dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064de:	4b32      	ldr	r3, [pc, #200]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 80064e0:	2101      	movs	r1, #1
 80064e2:	438a      	bics	r2, r1
 80064e4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064e6:	f7fd f911 	bl	800370c <HAL_GetTick>
 80064ea:	0003      	movs	r3, r0
 80064ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064ee:	e008      	b.n	8006502 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064f0:	f7fd f90c 	bl	800370c <HAL_GetTick>
 80064f4:	0002      	movs	r2, r0
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e236      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006502:	4b29      	ldr	r3, [pc, #164]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 8006504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006506:	2202      	movs	r2, #2
 8006508:	4013      	ands	r3, r2
 800650a:	d1f1      	bne.n	80064f0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2204      	movs	r2, #4
 8006512:	4013      	ands	r3, r2
 8006514:	d100      	bne.n	8006518 <HAL_RCC_OscConfig+0x2a8>
 8006516:	e0b5      	b.n	8006684 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006518:	201f      	movs	r0, #31
 800651a:	183b      	adds	r3, r7, r0
 800651c:	2200      	movs	r2, #0
 800651e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006520:	4b21      	ldr	r3, [pc, #132]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 8006522:	69da      	ldr	r2, [r3, #28]
 8006524:	2380      	movs	r3, #128	@ 0x80
 8006526:	055b      	lsls	r3, r3, #21
 8006528:	4013      	ands	r3, r2
 800652a:	d110      	bne.n	800654e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800652c:	4b1e      	ldr	r3, [pc, #120]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 800652e:	69da      	ldr	r2, [r3, #28]
 8006530:	4b1d      	ldr	r3, [pc, #116]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 8006532:	2180      	movs	r1, #128	@ 0x80
 8006534:	0549      	lsls	r1, r1, #21
 8006536:	430a      	orrs	r2, r1
 8006538:	61da      	str	r2, [r3, #28]
 800653a:	4b1b      	ldr	r3, [pc, #108]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 800653c:	69da      	ldr	r2, [r3, #28]
 800653e:	2380      	movs	r3, #128	@ 0x80
 8006540:	055b      	lsls	r3, r3, #21
 8006542:	4013      	ands	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]
 8006546:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006548:	183b      	adds	r3, r7, r0
 800654a:	2201      	movs	r2, #1
 800654c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800654e:	4b19      	ldr	r3, [pc, #100]	@ (80065b4 <HAL_RCC_OscConfig+0x344>)
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	2380      	movs	r3, #128	@ 0x80
 8006554:	005b      	lsls	r3, r3, #1
 8006556:	4013      	ands	r3, r2
 8006558:	d11a      	bne.n	8006590 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800655a:	4b16      	ldr	r3, [pc, #88]	@ (80065b4 <HAL_RCC_OscConfig+0x344>)
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	4b15      	ldr	r3, [pc, #84]	@ (80065b4 <HAL_RCC_OscConfig+0x344>)
 8006560:	2180      	movs	r1, #128	@ 0x80
 8006562:	0049      	lsls	r1, r1, #1
 8006564:	430a      	orrs	r2, r1
 8006566:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006568:	f7fd f8d0 	bl	800370c <HAL_GetTick>
 800656c:	0003      	movs	r3, r0
 800656e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006570:	e008      	b.n	8006584 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006572:	f7fd f8cb 	bl	800370c <HAL_GetTick>
 8006576:	0002      	movs	r2, r0
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	2b64      	cmp	r3, #100	@ 0x64
 800657e:	d901      	bls.n	8006584 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e1f5      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006584:	4b0b      	ldr	r3, [pc, #44]	@ (80065b4 <HAL_RCC_OscConfig+0x344>)
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	2380      	movs	r3, #128	@ 0x80
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	4013      	ands	r3, r2
 800658e:	d0f0      	beq.n	8006572 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d10f      	bne.n	80065b8 <HAL_RCC_OscConfig+0x348>
 8006598:	4b03      	ldr	r3, [pc, #12]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 800659a:	6a1a      	ldr	r2, [r3, #32]
 800659c:	4b02      	ldr	r3, [pc, #8]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 800659e:	2101      	movs	r1, #1
 80065a0:	430a      	orrs	r2, r1
 80065a2:	621a      	str	r2, [r3, #32]
 80065a4:	e036      	b.n	8006614 <HAL_RCC_OscConfig+0x3a4>
 80065a6:	46c0      	nop			@ (mov r8, r8)
 80065a8:	40021000 	.word	0x40021000
 80065ac:	fffeffff 	.word	0xfffeffff
 80065b0:	fffbffff 	.word	0xfffbffff
 80065b4:	40007000 	.word	0x40007000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10c      	bne.n	80065da <HAL_RCC_OscConfig+0x36a>
 80065c0:	4bca      	ldr	r3, [pc, #808]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 80065c2:	6a1a      	ldr	r2, [r3, #32]
 80065c4:	4bc9      	ldr	r3, [pc, #804]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 80065c6:	2101      	movs	r1, #1
 80065c8:	438a      	bics	r2, r1
 80065ca:	621a      	str	r2, [r3, #32]
 80065cc:	4bc7      	ldr	r3, [pc, #796]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 80065ce:	6a1a      	ldr	r2, [r3, #32]
 80065d0:	4bc6      	ldr	r3, [pc, #792]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 80065d2:	2104      	movs	r1, #4
 80065d4:	438a      	bics	r2, r1
 80065d6:	621a      	str	r2, [r3, #32]
 80065d8:	e01c      	b.n	8006614 <HAL_RCC_OscConfig+0x3a4>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	2b05      	cmp	r3, #5
 80065e0:	d10c      	bne.n	80065fc <HAL_RCC_OscConfig+0x38c>
 80065e2:	4bc2      	ldr	r3, [pc, #776]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 80065e4:	6a1a      	ldr	r2, [r3, #32]
 80065e6:	4bc1      	ldr	r3, [pc, #772]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 80065e8:	2104      	movs	r1, #4
 80065ea:	430a      	orrs	r2, r1
 80065ec:	621a      	str	r2, [r3, #32]
 80065ee:	4bbf      	ldr	r3, [pc, #764]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 80065f0:	6a1a      	ldr	r2, [r3, #32]
 80065f2:	4bbe      	ldr	r3, [pc, #760]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 80065f4:	2101      	movs	r1, #1
 80065f6:	430a      	orrs	r2, r1
 80065f8:	621a      	str	r2, [r3, #32]
 80065fa:	e00b      	b.n	8006614 <HAL_RCC_OscConfig+0x3a4>
 80065fc:	4bbb      	ldr	r3, [pc, #748]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 80065fe:	6a1a      	ldr	r2, [r3, #32]
 8006600:	4bba      	ldr	r3, [pc, #744]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 8006602:	2101      	movs	r1, #1
 8006604:	438a      	bics	r2, r1
 8006606:	621a      	str	r2, [r3, #32]
 8006608:	4bb8      	ldr	r3, [pc, #736]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 800660a:	6a1a      	ldr	r2, [r3, #32]
 800660c:	4bb7      	ldr	r3, [pc, #732]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 800660e:	2104      	movs	r1, #4
 8006610:	438a      	bics	r2, r1
 8006612:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d014      	beq.n	8006646 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800661c:	f7fd f876 	bl	800370c <HAL_GetTick>
 8006620:	0003      	movs	r3, r0
 8006622:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006624:	e009      	b.n	800663a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006626:	f7fd f871 	bl	800370c <HAL_GetTick>
 800662a:	0002      	movs	r2, r0
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	4aaf      	ldr	r2, [pc, #700]	@ (80068f0 <HAL_RCC_OscConfig+0x680>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d901      	bls.n	800663a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e19a      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800663a:	4bac      	ldr	r3, [pc, #688]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	2202      	movs	r2, #2
 8006640:	4013      	ands	r3, r2
 8006642:	d0f0      	beq.n	8006626 <HAL_RCC_OscConfig+0x3b6>
 8006644:	e013      	b.n	800666e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006646:	f7fd f861 	bl	800370c <HAL_GetTick>
 800664a:	0003      	movs	r3, r0
 800664c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800664e:	e009      	b.n	8006664 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006650:	f7fd f85c 	bl	800370c <HAL_GetTick>
 8006654:	0002      	movs	r2, r0
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	4aa5      	ldr	r2, [pc, #660]	@ (80068f0 <HAL_RCC_OscConfig+0x680>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d901      	bls.n	8006664 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e185      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006664:	4ba1      	ldr	r3, [pc, #644]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	2202      	movs	r2, #2
 800666a:	4013      	ands	r3, r2
 800666c:	d1f0      	bne.n	8006650 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800666e:	231f      	movs	r3, #31
 8006670:	18fb      	adds	r3, r7, r3
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d105      	bne.n	8006684 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006678:	4b9c      	ldr	r3, [pc, #624]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 800667a:	69da      	ldr	r2, [r3, #28]
 800667c:	4b9b      	ldr	r3, [pc, #620]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 800667e:	499d      	ldr	r1, [pc, #628]	@ (80068f4 <HAL_RCC_OscConfig+0x684>)
 8006680:	400a      	ands	r2, r1
 8006682:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2210      	movs	r2, #16
 800668a:	4013      	ands	r3, r2
 800668c:	d063      	beq.n	8006756 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d12a      	bne.n	80066ec <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006696:	4b95      	ldr	r3, [pc, #596]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 8006698:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800669a:	4b94      	ldr	r3, [pc, #592]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 800669c:	2104      	movs	r1, #4
 800669e:	430a      	orrs	r2, r1
 80066a0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80066a2:	4b92      	ldr	r3, [pc, #584]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 80066a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066a6:	4b91      	ldr	r3, [pc, #580]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 80066a8:	2101      	movs	r1, #1
 80066aa:	430a      	orrs	r2, r1
 80066ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066ae:	f7fd f82d 	bl	800370c <HAL_GetTick>
 80066b2:	0003      	movs	r3, r0
 80066b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80066b6:	e008      	b.n	80066ca <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80066b8:	f7fd f828 	bl	800370c <HAL_GetTick>
 80066bc:	0002      	movs	r2, r0
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d901      	bls.n	80066ca <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e152      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80066ca:	4b88      	ldr	r3, [pc, #544]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 80066cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ce:	2202      	movs	r2, #2
 80066d0:	4013      	ands	r3, r2
 80066d2:	d0f1      	beq.n	80066b8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80066d4:	4b85      	ldr	r3, [pc, #532]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 80066d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066d8:	22f8      	movs	r2, #248	@ 0xf8
 80066da:	4393      	bics	r3, r2
 80066dc:	0019      	movs	r1, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	00da      	lsls	r2, r3, #3
 80066e4:	4b81      	ldr	r3, [pc, #516]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 80066e6:	430a      	orrs	r2, r1
 80066e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80066ea:	e034      	b.n	8006756 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	3305      	adds	r3, #5
 80066f2:	d111      	bne.n	8006718 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80066f4:	4b7d      	ldr	r3, [pc, #500]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 80066f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066f8:	4b7c      	ldr	r3, [pc, #496]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 80066fa:	2104      	movs	r1, #4
 80066fc:	438a      	bics	r2, r1
 80066fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006700:	4b7a      	ldr	r3, [pc, #488]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 8006702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006704:	22f8      	movs	r2, #248	@ 0xf8
 8006706:	4393      	bics	r3, r2
 8006708:	0019      	movs	r1, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	00da      	lsls	r2, r3, #3
 8006710:	4b76      	ldr	r3, [pc, #472]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 8006712:	430a      	orrs	r2, r1
 8006714:	635a      	str	r2, [r3, #52]	@ 0x34
 8006716:	e01e      	b.n	8006756 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006718:	4b74      	ldr	r3, [pc, #464]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 800671a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800671c:	4b73      	ldr	r3, [pc, #460]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 800671e:	2104      	movs	r1, #4
 8006720:	430a      	orrs	r2, r1
 8006722:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006724:	4b71      	ldr	r3, [pc, #452]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 8006726:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006728:	4b70      	ldr	r3, [pc, #448]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 800672a:	2101      	movs	r1, #1
 800672c:	438a      	bics	r2, r1
 800672e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006730:	f7fc ffec 	bl	800370c <HAL_GetTick>
 8006734:	0003      	movs	r3, r0
 8006736:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006738:	e008      	b.n	800674c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800673a:	f7fc ffe7 	bl	800370c <HAL_GetTick>
 800673e:	0002      	movs	r2, r0
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	2b02      	cmp	r3, #2
 8006746:	d901      	bls.n	800674c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e111      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800674c:	4b67      	ldr	r3, [pc, #412]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 800674e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006750:	2202      	movs	r2, #2
 8006752:	4013      	ands	r3, r2
 8006754:	d1f1      	bne.n	800673a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2220      	movs	r2, #32
 800675c:	4013      	ands	r3, r2
 800675e:	d05c      	beq.n	800681a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006760:	4b62      	ldr	r3, [pc, #392]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	220c      	movs	r2, #12
 8006766:	4013      	ands	r3, r2
 8006768:	2b0c      	cmp	r3, #12
 800676a:	d00e      	beq.n	800678a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800676c:	4b5f      	ldr	r3, [pc, #380]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	220c      	movs	r2, #12
 8006772:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006774:	2b08      	cmp	r3, #8
 8006776:	d114      	bne.n	80067a2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006778:	4b5c      	ldr	r3, [pc, #368]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	23c0      	movs	r3, #192	@ 0xc0
 800677e:	025b      	lsls	r3, r3, #9
 8006780:	401a      	ands	r2, r3
 8006782:	23c0      	movs	r3, #192	@ 0xc0
 8006784:	025b      	lsls	r3, r3, #9
 8006786:	429a      	cmp	r2, r3
 8006788:	d10b      	bne.n	80067a2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800678a:	4b58      	ldr	r3, [pc, #352]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 800678c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800678e:	2380      	movs	r3, #128	@ 0x80
 8006790:	029b      	lsls	r3, r3, #10
 8006792:	4013      	ands	r3, r2
 8006794:	d040      	beq.n	8006818 <HAL_RCC_OscConfig+0x5a8>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d03c      	beq.n	8006818 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e0e6      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d01b      	beq.n	80067e2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80067aa:	4b50      	ldr	r3, [pc, #320]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 80067ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067ae:	4b4f      	ldr	r3, [pc, #316]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 80067b0:	2180      	movs	r1, #128	@ 0x80
 80067b2:	0249      	lsls	r1, r1, #9
 80067b4:	430a      	orrs	r2, r1
 80067b6:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067b8:	f7fc ffa8 	bl	800370c <HAL_GetTick>
 80067bc:	0003      	movs	r3, r0
 80067be:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80067c0:	e008      	b.n	80067d4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067c2:	f7fc ffa3 	bl	800370c <HAL_GetTick>
 80067c6:	0002      	movs	r2, r0
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d901      	bls.n	80067d4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e0cd      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80067d4:	4b45      	ldr	r3, [pc, #276]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 80067d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067d8:	2380      	movs	r3, #128	@ 0x80
 80067da:	029b      	lsls	r3, r3, #10
 80067dc:	4013      	ands	r3, r2
 80067de:	d0f0      	beq.n	80067c2 <HAL_RCC_OscConfig+0x552>
 80067e0:	e01b      	b.n	800681a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80067e2:	4b42      	ldr	r3, [pc, #264]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 80067e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067e6:	4b41      	ldr	r3, [pc, #260]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 80067e8:	4943      	ldr	r1, [pc, #268]	@ (80068f8 <HAL_RCC_OscConfig+0x688>)
 80067ea:	400a      	ands	r2, r1
 80067ec:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ee:	f7fc ff8d 	bl	800370c <HAL_GetTick>
 80067f2:	0003      	movs	r3, r0
 80067f4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80067f6:	e008      	b.n	800680a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067f8:	f7fc ff88 	bl	800370c <HAL_GetTick>
 80067fc:	0002      	movs	r2, r0
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	2b02      	cmp	r3, #2
 8006804:	d901      	bls.n	800680a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e0b2      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800680a:	4b38      	ldr	r3, [pc, #224]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 800680c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800680e:	2380      	movs	r3, #128	@ 0x80
 8006810:	029b      	lsls	r3, r3, #10
 8006812:	4013      	ands	r3, r2
 8006814:	d1f0      	bne.n	80067f8 <HAL_RCC_OscConfig+0x588>
 8006816:	e000      	b.n	800681a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8006818:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800681e:	2b00      	cmp	r3, #0
 8006820:	d100      	bne.n	8006824 <HAL_RCC_OscConfig+0x5b4>
 8006822:	e0a4      	b.n	800696e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006824:	4b31      	ldr	r3, [pc, #196]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	220c      	movs	r2, #12
 800682a:	4013      	ands	r3, r2
 800682c:	2b08      	cmp	r3, #8
 800682e:	d100      	bne.n	8006832 <HAL_RCC_OscConfig+0x5c2>
 8006830:	e078      	b.n	8006924 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006836:	2b02      	cmp	r3, #2
 8006838:	d14c      	bne.n	80068d4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800683a:	4b2c      	ldr	r3, [pc, #176]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	4b2b      	ldr	r3, [pc, #172]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 8006840:	492e      	ldr	r1, [pc, #184]	@ (80068fc <HAL_RCC_OscConfig+0x68c>)
 8006842:	400a      	ands	r2, r1
 8006844:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006846:	f7fc ff61 	bl	800370c <HAL_GetTick>
 800684a:	0003      	movs	r3, r0
 800684c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800684e:	e008      	b.n	8006862 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006850:	f7fc ff5c 	bl	800370c <HAL_GetTick>
 8006854:	0002      	movs	r2, r0
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	2b02      	cmp	r3, #2
 800685c:	d901      	bls.n	8006862 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e086      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006862:	4b22      	ldr	r3, [pc, #136]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	2380      	movs	r3, #128	@ 0x80
 8006868:	049b      	lsls	r3, r3, #18
 800686a:	4013      	ands	r3, r2
 800686c:	d1f0      	bne.n	8006850 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800686e:	4b1f      	ldr	r3, [pc, #124]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 8006870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006872:	220f      	movs	r2, #15
 8006874:	4393      	bics	r3, r2
 8006876:	0019      	movs	r1, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800687c:	4b1b      	ldr	r3, [pc, #108]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 800687e:	430a      	orrs	r2, r1
 8006880:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006882:	4b1a      	ldr	r3, [pc, #104]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	4a1e      	ldr	r2, [pc, #120]	@ (8006900 <HAL_RCC_OscConfig+0x690>)
 8006888:	4013      	ands	r3, r2
 800688a:	0019      	movs	r1, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006894:	431a      	orrs	r2, r3
 8006896:	4b15      	ldr	r3, [pc, #84]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 8006898:	430a      	orrs	r2, r1
 800689a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800689c:	4b13      	ldr	r3, [pc, #76]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	4b12      	ldr	r3, [pc, #72]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 80068a2:	2180      	movs	r1, #128	@ 0x80
 80068a4:	0449      	lsls	r1, r1, #17
 80068a6:	430a      	orrs	r2, r1
 80068a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068aa:	f7fc ff2f 	bl	800370c <HAL_GetTick>
 80068ae:	0003      	movs	r3, r0
 80068b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068b2:	e008      	b.n	80068c6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068b4:	f7fc ff2a 	bl	800370c <HAL_GetTick>
 80068b8:	0002      	movs	r2, r0
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d901      	bls.n	80068c6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e054      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068c6:	4b09      	ldr	r3, [pc, #36]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	2380      	movs	r3, #128	@ 0x80
 80068cc:	049b      	lsls	r3, r3, #18
 80068ce:	4013      	ands	r3, r2
 80068d0:	d0f0      	beq.n	80068b4 <HAL_RCC_OscConfig+0x644>
 80068d2:	e04c      	b.n	800696e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068d4:	4b05      	ldr	r3, [pc, #20]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	4b04      	ldr	r3, [pc, #16]	@ (80068ec <HAL_RCC_OscConfig+0x67c>)
 80068da:	4908      	ldr	r1, [pc, #32]	@ (80068fc <HAL_RCC_OscConfig+0x68c>)
 80068dc:	400a      	ands	r2, r1
 80068de:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068e0:	f7fc ff14 	bl	800370c <HAL_GetTick>
 80068e4:	0003      	movs	r3, r0
 80068e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068e8:	e015      	b.n	8006916 <HAL_RCC_OscConfig+0x6a6>
 80068ea:	46c0      	nop			@ (mov r8, r8)
 80068ec:	40021000 	.word	0x40021000
 80068f0:	00001388 	.word	0x00001388
 80068f4:	efffffff 	.word	0xefffffff
 80068f8:	fffeffff 	.word	0xfffeffff
 80068fc:	feffffff 	.word	0xfeffffff
 8006900:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006904:	f7fc ff02 	bl	800370c <HAL_GetTick>
 8006908:	0002      	movs	r2, r0
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	2b02      	cmp	r3, #2
 8006910:	d901      	bls.n	8006916 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e02c      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006916:	4b18      	ldr	r3, [pc, #96]	@ (8006978 <HAL_RCC_OscConfig+0x708>)
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	2380      	movs	r3, #128	@ 0x80
 800691c:	049b      	lsls	r3, r3, #18
 800691e:	4013      	ands	r3, r2
 8006920:	d1f0      	bne.n	8006904 <HAL_RCC_OscConfig+0x694>
 8006922:	e024      	b.n	800696e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006928:	2b01      	cmp	r3, #1
 800692a:	d101      	bne.n	8006930 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e01f      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006930:	4b11      	ldr	r3, [pc, #68]	@ (8006978 <HAL_RCC_OscConfig+0x708>)
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006936:	4b10      	ldr	r3, [pc, #64]	@ (8006978 <HAL_RCC_OscConfig+0x708>)
 8006938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800693a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	23c0      	movs	r3, #192	@ 0xc0
 8006940:	025b      	lsls	r3, r3, #9
 8006942:	401a      	ands	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006948:	429a      	cmp	r2, r3
 800694a:	d10e      	bne.n	800696a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	220f      	movs	r2, #15
 8006950:	401a      	ands	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006956:	429a      	cmp	r2, r3
 8006958:	d107      	bne.n	800696a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	23f0      	movs	r3, #240	@ 0xf0
 800695e:	039b      	lsls	r3, r3, #14
 8006960:	401a      	ands	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006966:	429a      	cmp	r2, r3
 8006968:	d001      	beq.n	800696e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e000      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	0018      	movs	r0, r3
 8006972:	46bd      	mov	sp, r7
 8006974:	b008      	add	sp, #32
 8006976:	bd80      	pop	{r7, pc}
 8006978:	40021000 	.word	0x40021000

0800697c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e0bf      	b.n	8006b10 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006990:	4b61      	ldr	r3, [pc, #388]	@ (8006b18 <HAL_RCC_ClockConfig+0x19c>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2201      	movs	r2, #1
 8006996:	4013      	ands	r3, r2
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	429a      	cmp	r2, r3
 800699c:	d911      	bls.n	80069c2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800699e:	4b5e      	ldr	r3, [pc, #376]	@ (8006b18 <HAL_RCC_ClockConfig+0x19c>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2201      	movs	r2, #1
 80069a4:	4393      	bics	r3, r2
 80069a6:	0019      	movs	r1, r3
 80069a8:	4b5b      	ldr	r3, [pc, #364]	@ (8006b18 <HAL_RCC_ClockConfig+0x19c>)
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	430a      	orrs	r2, r1
 80069ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069b0:	4b59      	ldr	r3, [pc, #356]	@ (8006b18 <HAL_RCC_ClockConfig+0x19c>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2201      	movs	r2, #1
 80069b6:	4013      	ands	r3, r2
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d001      	beq.n	80069c2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e0a6      	b.n	8006b10 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2202      	movs	r2, #2
 80069c8:	4013      	ands	r3, r2
 80069ca:	d015      	beq.n	80069f8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2204      	movs	r2, #4
 80069d2:	4013      	ands	r3, r2
 80069d4:	d006      	beq.n	80069e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80069d6:	4b51      	ldr	r3, [pc, #324]	@ (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	4b50      	ldr	r3, [pc, #320]	@ (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 80069dc:	21e0      	movs	r1, #224	@ 0xe0
 80069de:	00c9      	lsls	r1, r1, #3
 80069e0:	430a      	orrs	r2, r1
 80069e2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069e4:	4b4d      	ldr	r3, [pc, #308]	@ (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	22f0      	movs	r2, #240	@ 0xf0
 80069ea:	4393      	bics	r3, r2
 80069ec:	0019      	movs	r1, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	689a      	ldr	r2, [r3, #8]
 80069f2:	4b4a      	ldr	r3, [pc, #296]	@ (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 80069f4:	430a      	orrs	r2, r1
 80069f6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2201      	movs	r2, #1
 80069fe:	4013      	ands	r3, r2
 8006a00:	d04c      	beq.n	8006a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d107      	bne.n	8006a1a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a0a:	4b44      	ldr	r3, [pc, #272]	@ (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	2380      	movs	r3, #128	@ 0x80
 8006a10:	029b      	lsls	r3, r3, #10
 8006a12:	4013      	ands	r3, r2
 8006a14:	d120      	bne.n	8006a58 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e07a      	b.n	8006b10 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d107      	bne.n	8006a32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a22:	4b3e      	ldr	r3, [pc, #248]	@ (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	2380      	movs	r3, #128	@ 0x80
 8006a28:	049b      	lsls	r3, r3, #18
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	d114      	bne.n	8006a58 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e06e      	b.n	8006b10 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	2b03      	cmp	r3, #3
 8006a38:	d107      	bne.n	8006a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006a3a:	4b38      	ldr	r3, [pc, #224]	@ (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 8006a3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a3e:	2380      	movs	r3, #128	@ 0x80
 8006a40:	029b      	lsls	r3, r3, #10
 8006a42:	4013      	ands	r3, r2
 8006a44:	d108      	bne.n	8006a58 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e062      	b.n	8006b10 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a4a:	4b34      	ldr	r3, [pc, #208]	@ (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2202      	movs	r2, #2
 8006a50:	4013      	ands	r3, r2
 8006a52:	d101      	bne.n	8006a58 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e05b      	b.n	8006b10 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a58:	4b30      	ldr	r3, [pc, #192]	@ (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	2203      	movs	r2, #3
 8006a5e:	4393      	bics	r3, r2
 8006a60:	0019      	movs	r1, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	4b2d      	ldr	r3, [pc, #180]	@ (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a6c:	f7fc fe4e 	bl	800370c <HAL_GetTick>
 8006a70:	0003      	movs	r3, r0
 8006a72:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a74:	e009      	b.n	8006a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a76:	f7fc fe49 	bl	800370c <HAL_GetTick>
 8006a7a:	0002      	movs	r2, r0
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	4a27      	ldr	r2, [pc, #156]	@ (8006b20 <HAL_RCC_ClockConfig+0x1a4>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d901      	bls.n	8006a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e042      	b.n	8006b10 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a8a:	4b24      	ldr	r3, [pc, #144]	@ (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	220c      	movs	r2, #12
 8006a90:	401a      	ands	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d1ec      	bne.n	8006a76 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8006b18 <HAL_RCC_ClockConfig+0x19c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d211      	bcs.n	8006ace <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8006b18 <HAL_RCC_ClockConfig+0x19c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	4393      	bics	r3, r2
 8006ab2:	0019      	movs	r1, r3
 8006ab4:	4b18      	ldr	r3, [pc, #96]	@ (8006b18 <HAL_RCC_ClockConfig+0x19c>)
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006abc:	4b16      	ldr	r3, [pc, #88]	@ (8006b18 <HAL_RCC_ClockConfig+0x19c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d001      	beq.n	8006ace <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e020      	b.n	8006b10 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2204      	movs	r2, #4
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	d009      	beq.n	8006aec <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006ad8:	4b10      	ldr	r3, [pc, #64]	@ (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	4a11      	ldr	r2, [pc, #68]	@ (8006b24 <HAL_RCC_ClockConfig+0x1a8>)
 8006ade:	4013      	ands	r3, r2
 8006ae0:	0019      	movs	r1, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68da      	ldr	r2, [r3, #12]
 8006ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006aec:	f000 f820 	bl	8006b30 <HAL_RCC_GetSysClockFreq>
 8006af0:	0001      	movs	r1, r0
 8006af2:	4b0a      	ldr	r3, [pc, #40]	@ (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	091b      	lsrs	r3, r3, #4
 8006af8:	220f      	movs	r2, #15
 8006afa:	4013      	ands	r3, r2
 8006afc:	4a0a      	ldr	r2, [pc, #40]	@ (8006b28 <HAL_RCC_ClockConfig+0x1ac>)
 8006afe:	5cd3      	ldrb	r3, [r2, r3]
 8006b00:	000a      	movs	r2, r1
 8006b02:	40da      	lsrs	r2, r3
 8006b04:	4b09      	ldr	r3, [pc, #36]	@ (8006b2c <HAL_RCC_ClockConfig+0x1b0>)
 8006b06:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006b08:	2003      	movs	r0, #3
 8006b0a:	f7fc fdb9 	bl	8003680 <HAL_InitTick>
  
  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	0018      	movs	r0, r3
 8006b12:	46bd      	mov	sp, r7
 8006b14:	b004      	add	sp, #16
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	40022000 	.word	0x40022000
 8006b1c:	40021000 	.word	0x40021000
 8006b20:	00001388 	.word	0x00001388
 8006b24:	fffff8ff 	.word	0xfffff8ff
 8006b28:	080124fc 	.word	0x080124fc
 8006b2c:	2000005c 	.word	0x2000005c

08006b30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006b36:	2300      	movs	r3, #0
 8006b38:	60fb      	str	r3, [r7, #12]
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60bb      	str	r3, [r7, #8]
 8006b3e:	2300      	movs	r3, #0
 8006b40:	617b      	str	r3, [r7, #20]
 8006b42:	2300      	movs	r3, #0
 8006b44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006b46:	2300      	movs	r3, #0
 8006b48:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8006c00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	220c      	movs	r2, #12
 8006b54:	4013      	ands	r3, r2
 8006b56:	2b0c      	cmp	r3, #12
 8006b58:	d046      	beq.n	8006be8 <HAL_RCC_GetSysClockFreq+0xb8>
 8006b5a:	d848      	bhi.n	8006bee <HAL_RCC_GetSysClockFreq+0xbe>
 8006b5c:	2b04      	cmp	r3, #4
 8006b5e:	d002      	beq.n	8006b66 <HAL_RCC_GetSysClockFreq+0x36>
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	d003      	beq.n	8006b6c <HAL_RCC_GetSysClockFreq+0x3c>
 8006b64:	e043      	b.n	8006bee <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006b66:	4b27      	ldr	r3, [pc, #156]	@ (8006c04 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006b68:	613b      	str	r3, [r7, #16]
      break;
 8006b6a:	e043      	b.n	8006bf4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	0c9b      	lsrs	r3, r3, #18
 8006b70:	220f      	movs	r2, #15
 8006b72:	4013      	ands	r3, r2
 8006b74:	4a24      	ldr	r2, [pc, #144]	@ (8006c08 <HAL_RCC_GetSysClockFreq+0xd8>)
 8006b76:	5cd3      	ldrb	r3, [r2, r3]
 8006b78:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006b7a:	4b21      	ldr	r3, [pc, #132]	@ (8006c00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b7e:	220f      	movs	r2, #15
 8006b80:	4013      	ands	r3, r2
 8006b82:	4a22      	ldr	r2, [pc, #136]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0xdc>)
 8006b84:	5cd3      	ldrb	r3, [r2, r3]
 8006b86:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	23c0      	movs	r3, #192	@ 0xc0
 8006b8c:	025b      	lsls	r3, r3, #9
 8006b8e:	401a      	ands	r2, r3
 8006b90:	2380      	movs	r3, #128	@ 0x80
 8006b92:	025b      	lsls	r3, r3, #9
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d109      	bne.n	8006bac <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006b98:	68b9      	ldr	r1, [r7, #8]
 8006b9a:	481a      	ldr	r0, [pc, #104]	@ (8006c04 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006b9c:	f7f9 fad0 	bl	8000140 <__udivsi3>
 8006ba0:	0003      	movs	r3, r0
 8006ba2:	001a      	movs	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4353      	muls	r3, r2
 8006ba8:	617b      	str	r3, [r7, #20]
 8006baa:	e01a      	b.n	8006be2 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	23c0      	movs	r3, #192	@ 0xc0
 8006bb0:	025b      	lsls	r3, r3, #9
 8006bb2:	401a      	ands	r2, r3
 8006bb4:	23c0      	movs	r3, #192	@ 0xc0
 8006bb6:	025b      	lsls	r3, r3, #9
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d109      	bne.n	8006bd0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006bbc:	68b9      	ldr	r1, [r7, #8]
 8006bbe:	4814      	ldr	r0, [pc, #80]	@ (8006c10 <HAL_RCC_GetSysClockFreq+0xe0>)
 8006bc0:	f7f9 fabe 	bl	8000140 <__udivsi3>
 8006bc4:	0003      	movs	r3, r0
 8006bc6:	001a      	movs	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4353      	muls	r3, r2
 8006bcc:	617b      	str	r3, [r7, #20]
 8006bce:	e008      	b.n	8006be2 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006bd0:	68b9      	ldr	r1, [r7, #8]
 8006bd2:	480c      	ldr	r0, [pc, #48]	@ (8006c04 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006bd4:	f7f9 fab4 	bl	8000140 <__udivsi3>
 8006bd8:	0003      	movs	r3, r0
 8006bda:	001a      	movs	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4353      	muls	r3, r2
 8006be0:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	613b      	str	r3, [r7, #16]
      break;
 8006be6:	e005      	b.n	8006bf4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8006be8:	4b09      	ldr	r3, [pc, #36]	@ (8006c10 <HAL_RCC_GetSysClockFreq+0xe0>)
 8006bea:	613b      	str	r3, [r7, #16]
      break;
 8006bec:	e002      	b.n	8006bf4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006bee:	4b05      	ldr	r3, [pc, #20]	@ (8006c04 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006bf0:	613b      	str	r3, [r7, #16]
      break;
 8006bf2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006bf4:	693b      	ldr	r3, [r7, #16]
}
 8006bf6:	0018      	movs	r0, r3
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	b006      	add	sp, #24
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	46c0      	nop			@ (mov r8, r8)
 8006c00:	40021000 	.word	0x40021000
 8006c04:	007a1200 	.word	0x007a1200
 8006c08:	08012514 	.word	0x08012514
 8006c0c:	08012524 	.word	0x08012524
 8006c10:	02dc6c00 	.word	0x02dc6c00

08006c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c18:	4b02      	ldr	r3, [pc, #8]	@ (8006c24 <HAL_RCC_GetHCLKFreq+0x10>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
}
 8006c1c:	0018      	movs	r0, r3
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	46c0      	nop			@ (mov r8, r8)
 8006c24:	2000005c 	.word	0x2000005c

08006c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006c2c:	f7ff fff2 	bl	8006c14 <HAL_RCC_GetHCLKFreq>
 8006c30:	0001      	movs	r1, r0
 8006c32:	4b06      	ldr	r3, [pc, #24]	@ (8006c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	0a1b      	lsrs	r3, r3, #8
 8006c38:	2207      	movs	r2, #7
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	4a04      	ldr	r2, [pc, #16]	@ (8006c50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c3e:	5cd3      	ldrb	r3, [r2, r3]
 8006c40:	40d9      	lsrs	r1, r3
 8006c42:	000b      	movs	r3, r1
}    
 8006c44:	0018      	movs	r0, r3
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	46c0      	nop			@ (mov r8, r8)
 8006c4c:	40021000 	.word	0x40021000
 8006c50:	0801250c 	.word	0x0801250c

08006c54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	2380      	movs	r3, #128	@ 0x80
 8006c6a:	025b      	lsls	r3, r3, #9
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	d100      	bne.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006c70:	e08e      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006c72:	2017      	movs	r0, #23
 8006c74:	183b      	adds	r3, r7, r0
 8006c76:	2200      	movs	r2, #0
 8006c78:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c7a:	4b6e      	ldr	r3, [pc, #440]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c7c:	69da      	ldr	r2, [r3, #28]
 8006c7e:	2380      	movs	r3, #128	@ 0x80
 8006c80:	055b      	lsls	r3, r3, #21
 8006c82:	4013      	ands	r3, r2
 8006c84:	d110      	bne.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c86:	4b6b      	ldr	r3, [pc, #428]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c88:	69da      	ldr	r2, [r3, #28]
 8006c8a:	4b6a      	ldr	r3, [pc, #424]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c8c:	2180      	movs	r1, #128	@ 0x80
 8006c8e:	0549      	lsls	r1, r1, #21
 8006c90:	430a      	orrs	r2, r1
 8006c92:	61da      	str	r2, [r3, #28]
 8006c94:	4b67      	ldr	r3, [pc, #412]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c96:	69da      	ldr	r2, [r3, #28]
 8006c98:	2380      	movs	r3, #128	@ 0x80
 8006c9a:	055b      	lsls	r3, r3, #21
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	60bb      	str	r3, [r7, #8]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ca2:	183b      	adds	r3, r7, r0
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ca8:	4b63      	ldr	r3, [pc, #396]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	2380      	movs	r3, #128	@ 0x80
 8006cae:	005b      	lsls	r3, r3, #1
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	d11a      	bne.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cb4:	4b60      	ldr	r3, [pc, #384]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	4b5f      	ldr	r3, [pc, #380]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006cba:	2180      	movs	r1, #128	@ 0x80
 8006cbc:	0049      	lsls	r1, r1, #1
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cc2:	f7fc fd23 	bl	800370c <HAL_GetTick>
 8006cc6:	0003      	movs	r3, r0
 8006cc8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cca:	e008      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ccc:	f7fc fd1e 	bl	800370c <HAL_GetTick>
 8006cd0:	0002      	movs	r2, r0
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	2b64      	cmp	r3, #100	@ 0x64
 8006cd8:	d901      	bls.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e0a6      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cde:	4b56      	ldr	r3, [pc, #344]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	2380      	movs	r3, #128	@ 0x80
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	d0f0      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006cea:	4b52      	ldr	r3, [pc, #328]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006cec:	6a1a      	ldr	r2, [r3, #32]
 8006cee:	23c0      	movs	r3, #192	@ 0xc0
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d034      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	23c0      	movs	r3, #192	@ 0xc0
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4013      	ands	r3, r2
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d02c      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d0c:	4b49      	ldr	r3, [pc, #292]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d0e:	6a1b      	ldr	r3, [r3, #32]
 8006d10:	4a4a      	ldr	r2, [pc, #296]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006d12:	4013      	ands	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d16:	4b47      	ldr	r3, [pc, #284]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d18:	6a1a      	ldr	r2, [r3, #32]
 8006d1a:	4b46      	ldr	r3, [pc, #280]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d1c:	2180      	movs	r1, #128	@ 0x80
 8006d1e:	0249      	lsls	r1, r1, #9
 8006d20:	430a      	orrs	r2, r1
 8006d22:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d24:	4b43      	ldr	r3, [pc, #268]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d26:	6a1a      	ldr	r2, [r3, #32]
 8006d28:	4b42      	ldr	r3, [pc, #264]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d2a:	4945      	ldr	r1, [pc, #276]	@ (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006d2c:	400a      	ands	r2, r1
 8006d2e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006d30:	4b40      	ldr	r3, [pc, #256]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	d013      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d3e:	f7fc fce5 	bl	800370c <HAL_GetTick>
 8006d42:	0003      	movs	r3, r0
 8006d44:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d46:	e009      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d48:	f7fc fce0 	bl	800370c <HAL_GetTick>
 8006d4c:	0002      	movs	r2, r0
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	4a3c      	ldr	r2, [pc, #240]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d901      	bls.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e067      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d5c:	4b35      	ldr	r3, [pc, #212]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d5e:	6a1b      	ldr	r3, [r3, #32]
 8006d60:	2202      	movs	r2, #2
 8006d62:	4013      	ands	r3, r2
 8006d64:	d0f0      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d66:	4b33      	ldr	r3, [pc, #204]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	4a34      	ldr	r2, [pc, #208]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	0019      	movs	r1, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	4b2f      	ldr	r3, [pc, #188]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d76:	430a      	orrs	r2, r1
 8006d78:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006d7a:	2317      	movs	r3, #23
 8006d7c:	18fb      	adds	r3, r7, r3
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d105      	bne.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d84:	4b2b      	ldr	r3, [pc, #172]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d86:	69da      	ldr	r2, [r3, #28]
 8006d88:	4b2a      	ldr	r3, [pc, #168]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d8a:	492f      	ldr	r1, [pc, #188]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006d8c:	400a      	ands	r2, r1
 8006d8e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2201      	movs	r2, #1
 8006d96:	4013      	ands	r3, r2
 8006d98:	d009      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d9a:	4b26      	ldr	r3, [pc, #152]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d9e:	2203      	movs	r2, #3
 8006da0:	4393      	bics	r3, r2
 8006da2:	0019      	movs	r1, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	4b22      	ldr	r3, [pc, #136]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006daa:	430a      	orrs	r2, r1
 8006dac:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2202      	movs	r2, #2
 8006db4:	4013      	ands	r3, r2
 8006db6:	d009      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006db8:	4b1e      	ldr	r3, [pc, #120]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dbc:	4a23      	ldr	r2, [pc, #140]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	0019      	movs	r1, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68da      	ldr	r2, [r3, #12]
 8006dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	d009      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006dd6:	4b17      	ldr	r3, [pc, #92]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dda:	2210      	movs	r2, #16
 8006ddc:	4393      	bics	r3, r2
 8006dde:	0019      	movs	r1, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	691a      	ldr	r2, [r3, #16]
 8006de4:	4b13      	ldr	r3, [pc, #76]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006de6:	430a      	orrs	r2, r1
 8006de8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	2380      	movs	r3, #128	@ 0x80
 8006df0:	029b      	lsls	r3, r3, #10
 8006df2:	4013      	ands	r3, r2
 8006df4:	d009      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006df6:	4b0f      	ldr	r3, [pc, #60]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dfa:	2280      	movs	r2, #128	@ 0x80
 8006dfc:	4393      	bics	r3, r2
 8006dfe:	0019      	movs	r1, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	699a      	ldr	r2, [r3, #24]
 8006e04:	4b0b      	ldr	r3, [pc, #44]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e06:	430a      	orrs	r2, r1
 8006e08:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	2380      	movs	r3, #128	@ 0x80
 8006e10:	00db      	lsls	r3, r3, #3
 8006e12:	4013      	ands	r3, r2
 8006e14:	d009      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e16:	4b07      	ldr	r3, [pc, #28]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e1a:	2240      	movs	r2, #64	@ 0x40
 8006e1c:	4393      	bics	r3, r2
 8006e1e:	0019      	movs	r1, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	695a      	ldr	r2, [r3, #20]
 8006e24:	4b03      	ldr	r3, [pc, #12]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e26:	430a      	orrs	r2, r1
 8006e28:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	0018      	movs	r0, r3
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	b006      	add	sp, #24
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	40021000 	.word	0x40021000
 8006e38:	40007000 	.word	0x40007000
 8006e3c:	fffffcff 	.word	0xfffffcff
 8006e40:	fffeffff 	.word	0xfffeffff
 8006e44:	00001388 	.word	0x00001388
 8006e48:	efffffff 	.word	0xefffffff
 8006e4c:	fffcffff 	.word	0xfffcffff

08006e50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e0a8      	b.n	8006fb4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d109      	bne.n	8006e7e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	2382      	movs	r3, #130	@ 0x82
 8006e70:	005b      	lsls	r3, r3, #1
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d009      	beq.n	8006e8a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	61da      	str	r2, [r3, #28]
 8006e7c:	e005      	b.n	8006e8a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	225d      	movs	r2, #93	@ 0x5d
 8006e94:	5c9b      	ldrb	r3, [r3, r2]
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d107      	bne.n	8006eac <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	225c      	movs	r2, #92	@ 0x5c
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	f7fc f942 	bl	8003130 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	225d      	movs	r2, #93	@ 0x5d
 8006eb0:	2102      	movs	r1, #2
 8006eb2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2140      	movs	r1, #64	@ 0x40
 8006ec0:	438a      	bics	r2, r1
 8006ec2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	68da      	ldr	r2, [r3, #12]
 8006ec8:	23e0      	movs	r3, #224	@ 0xe0
 8006eca:	00db      	lsls	r3, r3, #3
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d902      	bls.n	8006ed6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	60fb      	str	r3, [r7, #12]
 8006ed4:	e002      	b.n	8006edc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006ed6:	2380      	movs	r3, #128	@ 0x80
 8006ed8:	015b      	lsls	r3, r3, #5
 8006eda:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	68da      	ldr	r2, [r3, #12]
 8006ee0:	23f0      	movs	r3, #240	@ 0xf0
 8006ee2:	011b      	lsls	r3, r3, #4
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d008      	beq.n	8006efa <HAL_SPI_Init+0xaa>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	68da      	ldr	r2, [r3, #12]
 8006eec:	23e0      	movs	r3, #224	@ 0xe0
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d002      	beq.n	8006efa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	2382      	movs	r3, #130	@ 0x82
 8006f00:	005b      	lsls	r3, r3, #1
 8006f02:	401a      	ands	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6899      	ldr	r1, [r3, #8]
 8006f08:	2384      	movs	r3, #132	@ 0x84
 8006f0a:	021b      	lsls	r3, r3, #8
 8006f0c:	400b      	ands	r3, r1
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	2102      	movs	r1, #2
 8006f16:	400b      	ands	r3, r1
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	2101      	movs	r1, #1
 8006f20:	400b      	ands	r3, r1
 8006f22:	431a      	orrs	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6999      	ldr	r1, [r3, #24]
 8006f28:	2380      	movs	r3, #128	@ 0x80
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	400b      	ands	r3, r1
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	2138      	movs	r1, #56	@ 0x38
 8006f36:	400b      	ands	r3, r1
 8006f38:	431a      	orrs	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	2180      	movs	r1, #128	@ 0x80
 8006f40:	400b      	ands	r3, r1
 8006f42:	431a      	orrs	r2, r3
 8006f44:	0011      	movs	r1, r2
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f4a:	2380      	movs	r3, #128	@ 0x80
 8006f4c:	019b      	lsls	r3, r3, #6
 8006f4e:	401a      	ands	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	0c1b      	lsrs	r3, r3, #16
 8006f5e:	2204      	movs	r2, #4
 8006f60:	401a      	ands	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f66:	2110      	movs	r1, #16
 8006f68:	400b      	ands	r3, r1
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f70:	2108      	movs	r1, #8
 8006f72:	400b      	ands	r3, r1
 8006f74:	431a      	orrs	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	68d9      	ldr	r1, [r3, #12]
 8006f7a:	23f0      	movs	r3, #240	@ 0xf0
 8006f7c:	011b      	lsls	r3, r3, #4
 8006f7e:	400b      	ands	r3, r1
 8006f80:	431a      	orrs	r2, r3
 8006f82:	0011      	movs	r1, r2
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	2380      	movs	r3, #128	@ 0x80
 8006f88:	015b      	lsls	r3, r3, #5
 8006f8a:	401a      	ands	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	69da      	ldr	r2, [r3, #28]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4907      	ldr	r1, [pc, #28]	@ (8006fbc <HAL_SPI_Init+0x16c>)
 8006fa0:	400a      	ands	r2, r1
 8006fa2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	225d      	movs	r2, #93	@ 0x5d
 8006fae:	2101      	movs	r1, #1
 8006fb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	0018      	movs	r0, r3
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	b004      	add	sp, #16
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	fffff7ff 	.word	0xfffff7ff

08006fc0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b088      	sub	sp, #32
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	603b      	str	r3, [r7, #0]
 8006fcc:	1dbb      	adds	r3, r7, #6
 8006fce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fd0:	231f      	movs	r3, #31
 8006fd2:	18fb      	adds	r3, r7, r3
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	225c      	movs	r2, #92	@ 0x5c
 8006fdc:	5c9b      	ldrb	r3, [r3, r2]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d101      	bne.n	8006fe6 <HAL_SPI_Transmit+0x26>
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	e147      	b.n	8007276 <HAL_SPI_Transmit+0x2b6>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	225c      	movs	r2, #92	@ 0x5c
 8006fea:	2101      	movs	r1, #1
 8006fec:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fee:	f7fc fb8d 	bl	800370c <HAL_GetTick>
 8006ff2:	0003      	movs	r3, r0
 8006ff4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006ff6:	2316      	movs	r3, #22
 8006ff8:	18fb      	adds	r3, r7, r3
 8006ffa:	1dba      	adds	r2, r7, #6
 8006ffc:	8812      	ldrh	r2, [r2, #0]
 8006ffe:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	225d      	movs	r2, #93	@ 0x5d
 8007004:	5c9b      	ldrb	r3, [r3, r2]
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b01      	cmp	r3, #1
 800700a:	d004      	beq.n	8007016 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800700c:	231f      	movs	r3, #31
 800700e:	18fb      	adds	r3, r7, r3
 8007010:	2202      	movs	r2, #2
 8007012:	701a      	strb	r2, [r3, #0]
    goto error;
 8007014:	e128      	b.n	8007268 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d003      	beq.n	8007024 <HAL_SPI_Transmit+0x64>
 800701c:	1dbb      	adds	r3, r7, #6
 800701e:	881b      	ldrh	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d104      	bne.n	800702e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8007024:	231f      	movs	r3, #31
 8007026:	18fb      	adds	r3, r7, r3
 8007028:	2201      	movs	r2, #1
 800702a:	701a      	strb	r2, [r3, #0]
    goto error;
 800702c:	e11c      	b.n	8007268 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	225d      	movs	r2, #93	@ 0x5d
 8007032:	2103      	movs	r1, #3
 8007034:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	1dba      	adds	r2, r7, #6
 8007046:	8812      	ldrh	r2, [r2, #0]
 8007048:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	1dba      	adds	r2, r7, #6
 800704e:	8812      	ldrh	r2, [r2, #0]
 8007050:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2244      	movs	r2, #68	@ 0x44
 800705c:	2100      	movs	r1, #0
 800705e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2246      	movs	r2, #70	@ 0x46
 8007064:	2100      	movs	r1, #0
 8007066:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	689a      	ldr	r2, [r3, #8]
 8007078:	2380      	movs	r3, #128	@ 0x80
 800707a:	021b      	lsls	r3, r3, #8
 800707c:	429a      	cmp	r2, r3
 800707e:	d110      	bne.n	80070a2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2140      	movs	r1, #64	@ 0x40
 800708c:	438a      	bics	r2, r1
 800708e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2180      	movs	r1, #128	@ 0x80
 800709c:	01c9      	lsls	r1, r1, #7
 800709e:	430a      	orrs	r2, r1
 80070a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2240      	movs	r2, #64	@ 0x40
 80070aa:	4013      	ands	r3, r2
 80070ac:	2b40      	cmp	r3, #64	@ 0x40
 80070ae:	d007      	beq.n	80070c0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2140      	movs	r1, #64	@ 0x40
 80070bc:	430a      	orrs	r2, r1
 80070be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	68da      	ldr	r2, [r3, #12]
 80070c4:	23e0      	movs	r3, #224	@ 0xe0
 80070c6:	00db      	lsls	r3, r3, #3
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d952      	bls.n	8007172 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d004      	beq.n	80070de <HAL_SPI_Transmit+0x11e>
 80070d4:	2316      	movs	r3, #22
 80070d6:	18fb      	adds	r3, r7, r3
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d143      	bne.n	8007166 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e2:	881a      	ldrh	r2, [r3, #0]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ee:	1c9a      	adds	r2, r3, #2
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	3b01      	subs	r3, #1
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007102:	e030      	b.n	8007166 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	2202      	movs	r2, #2
 800710c:	4013      	ands	r3, r2
 800710e:	2b02      	cmp	r3, #2
 8007110:	d112      	bne.n	8007138 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007116:	881a      	ldrh	r2, [r3, #0]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007122:	1c9a      	adds	r2, r3, #2
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800712c:	b29b      	uxth	r3, r3
 800712e:	3b01      	subs	r3, #1
 8007130:	b29a      	uxth	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007136:	e016      	b.n	8007166 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007138:	f7fc fae8 	bl	800370c <HAL_GetTick>
 800713c:	0002      	movs	r2, r0
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	429a      	cmp	r2, r3
 8007146:	d802      	bhi.n	800714e <HAL_SPI_Transmit+0x18e>
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	3301      	adds	r3, #1
 800714c:	d102      	bne.n	8007154 <HAL_SPI_Transmit+0x194>
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d108      	bne.n	8007166 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8007154:	231f      	movs	r3, #31
 8007156:	18fb      	adds	r3, r7, r3
 8007158:	2203      	movs	r2, #3
 800715a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	225d      	movs	r2, #93	@ 0x5d
 8007160:	2101      	movs	r1, #1
 8007162:	5499      	strb	r1, [r3, r2]
          goto error;
 8007164:	e080      	b.n	8007268 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800716a:	b29b      	uxth	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1c9      	bne.n	8007104 <HAL_SPI_Transmit+0x144>
 8007170:	e053      	b.n	800721a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d004      	beq.n	8007184 <HAL_SPI_Transmit+0x1c4>
 800717a:	2316      	movs	r3, #22
 800717c:	18fb      	adds	r3, r7, r3
 800717e:	881b      	ldrh	r3, [r3, #0]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d145      	bne.n	8007210 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	330c      	adds	r3, #12
 800718e:	7812      	ldrb	r2, [r2, #0]
 8007190:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007196:	1c5a      	adds	r2, r3, #1
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	3b01      	subs	r3, #1
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80071aa:	e031      	b.n	8007210 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	2202      	movs	r2, #2
 80071b4:	4013      	ands	r3, r2
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d113      	bne.n	80071e2 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	330c      	adds	r3, #12
 80071c4:	7812      	ldrb	r2, [r2, #0]
 80071c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071cc:	1c5a      	adds	r2, r3, #1
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	3b01      	subs	r3, #1
 80071da:	b29a      	uxth	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80071e0:	e016      	b.n	8007210 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071e2:	f7fc fa93 	bl	800370c <HAL_GetTick>
 80071e6:	0002      	movs	r2, r0
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d802      	bhi.n	80071f8 <HAL_SPI_Transmit+0x238>
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	3301      	adds	r3, #1
 80071f6:	d102      	bne.n	80071fe <HAL_SPI_Transmit+0x23e>
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d108      	bne.n	8007210 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80071fe:	231f      	movs	r3, #31
 8007200:	18fb      	adds	r3, r7, r3
 8007202:	2203      	movs	r2, #3
 8007204:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	225d      	movs	r2, #93	@ 0x5d
 800720a:	2101      	movs	r1, #1
 800720c:	5499      	strb	r1, [r3, r2]
          goto error;
 800720e:	e02b      	b.n	8007268 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007214:	b29b      	uxth	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1c8      	bne.n	80071ac <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800721a:	69ba      	ldr	r2, [r7, #24]
 800721c:	6839      	ldr	r1, [r7, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	0018      	movs	r0, r3
 8007222:	f000 fcfb 	bl	8007c1c <SPI_EndRxTxTransaction>
 8007226:	1e03      	subs	r3, r0, #0
 8007228:	d002      	beq.n	8007230 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2220      	movs	r2, #32
 800722e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10a      	bne.n	800724e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007238:	2300      	movs	r3, #0
 800723a:	613b      	str	r3, [r7, #16]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	613b      	str	r3, [r7, #16]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	613b      	str	r3, [r7, #16]
 800724c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007252:	2b00      	cmp	r3, #0
 8007254:	d004      	beq.n	8007260 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8007256:	231f      	movs	r3, #31
 8007258:	18fb      	adds	r3, r7, r3
 800725a:	2201      	movs	r2, #1
 800725c:	701a      	strb	r2, [r3, #0]
 800725e:	e003      	b.n	8007268 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	225d      	movs	r2, #93	@ 0x5d
 8007264:	2101      	movs	r1, #1
 8007266:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	225c      	movs	r2, #92	@ 0x5c
 800726c:	2100      	movs	r1, #0
 800726e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007270:	231f      	movs	r3, #31
 8007272:	18fb      	adds	r3, r7, r3
 8007274:	781b      	ldrb	r3, [r3, #0]
}
 8007276:	0018      	movs	r0, r3
 8007278:	46bd      	mov	sp, r7
 800727a:	b008      	add	sp, #32
 800727c:	bd80      	pop	{r7, pc}
	...

08007280 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007280:	b590      	push	{r4, r7, lr}
 8007282:	b089      	sub	sp, #36	@ 0x24
 8007284:	af02      	add	r7, sp, #8
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	603b      	str	r3, [r7, #0]
 800728c:	1dbb      	adds	r3, r7, #6
 800728e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007290:	2117      	movs	r1, #23
 8007292:	187b      	adds	r3, r7, r1
 8007294:	2200      	movs	r2, #0
 8007296:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	225d      	movs	r2, #93	@ 0x5d
 800729c:	5c9b      	ldrb	r3, [r3, r2]
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d003      	beq.n	80072ac <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80072a4:	187b      	adds	r3, r7, r1
 80072a6:	2202      	movs	r2, #2
 80072a8:	701a      	strb	r2, [r3, #0]
    goto error;
 80072aa:	e12b      	b.n	8007504 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	2382      	movs	r3, #130	@ 0x82
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d113      	bne.n	80072e0 <HAL_SPI_Receive+0x60>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10f      	bne.n	80072e0 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	225d      	movs	r2, #93	@ 0x5d
 80072c4:	2104      	movs	r1, #4
 80072c6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80072c8:	1dbb      	adds	r3, r7, #6
 80072ca:	881c      	ldrh	r4, [r3, #0]
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	68b9      	ldr	r1, [r7, #8]
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	0023      	movs	r3, r4
 80072d8:	f000 f924 	bl	8007524 <HAL_SPI_TransmitReceive>
 80072dc:	0003      	movs	r3, r0
 80072de:	e118      	b.n	8007512 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	225c      	movs	r2, #92	@ 0x5c
 80072e4:	5c9b      	ldrb	r3, [r3, r2]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d101      	bne.n	80072ee <HAL_SPI_Receive+0x6e>
 80072ea:	2302      	movs	r3, #2
 80072ec:	e111      	b.n	8007512 <HAL_SPI_Receive+0x292>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	225c      	movs	r2, #92	@ 0x5c
 80072f2:	2101      	movs	r1, #1
 80072f4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072f6:	f7fc fa09 	bl	800370c <HAL_GetTick>
 80072fa:	0003      	movs	r3, r0
 80072fc:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d003      	beq.n	800730c <HAL_SPI_Receive+0x8c>
 8007304:	1dbb      	adds	r3, r7, #6
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d104      	bne.n	8007316 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 800730c:	2317      	movs	r3, #23
 800730e:	18fb      	adds	r3, r7, r3
 8007310:	2201      	movs	r2, #1
 8007312:	701a      	strb	r2, [r3, #0]
    goto error;
 8007314:	e0f6      	b.n	8007504 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	225d      	movs	r2, #93	@ 0x5d
 800731a:	2104      	movs	r1, #4
 800731c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	1dba      	adds	r2, r7, #6
 800732e:	2144      	movs	r1, #68	@ 0x44
 8007330:	8812      	ldrh	r2, [r2, #0]
 8007332:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	1dba      	adds	r2, r7, #6
 8007338:	2146      	movs	r1, #70	@ 0x46
 800733a:	8812      	ldrh	r2, [r2, #0]
 800733c:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2200      	movs	r2, #0
 8007348:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	68da      	ldr	r2, [r3, #12]
 8007360:	23e0      	movs	r3, #224	@ 0xe0
 8007362:	00db      	lsls	r3, r3, #3
 8007364:	429a      	cmp	r2, r3
 8007366:	d908      	bls.n	800737a <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	685a      	ldr	r2, [r3, #4]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	496a      	ldr	r1, [pc, #424]	@ (800751c <HAL_SPI_Receive+0x29c>)
 8007374:	400a      	ands	r2, r1
 8007376:	605a      	str	r2, [r3, #4]
 8007378:	e008      	b.n	800738c <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2180      	movs	r1, #128	@ 0x80
 8007386:	0149      	lsls	r1, r1, #5
 8007388:	430a      	orrs	r2, r1
 800738a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	689a      	ldr	r2, [r3, #8]
 8007390:	2380      	movs	r3, #128	@ 0x80
 8007392:	021b      	lsls	r3, r3, #8
 8007394:	429a      	cmp	r2, r3
 8007396:	d10f      	bne.n	80073b8 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2140      	movs	r1, #64	@ 0x40
 80073a4:	438a      	bics	r2, r1
 80073a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	495b      	ldr	r1, [pc, #364]	@ (8007520 <HAL_SPI_Receive+0x2a0>)
 80073b4:	400a      	ands	r2, r1
 80073b6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2240      	movs	r2, #64	@ 0x40
 80073c0:	4013      	ands	r3, r2
 80073c2:	2b40      	cmp	r3, #64	@ 0x40
 80073c4:	d007      	beq.n	80073d6 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2140      	movs	r1, #64	@ 0x40
 80073d2:	430a      	orrs	r2, r1
 80073d4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	68da      	ldr	r2, [r3, #12]
 80073da:	23e0      	movs	r3, #224	@ 0xe0
 80073dc:	00db      	lsls	r3, r3, #3
 80073de:	429a      	cmp	r2, r3
 80073e0:	d900      	bls.n	80073e4 <HAL_SPI_Receive+0x164>
 80073e2:	e071      	b.n	80074c8 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80073e4:	e035      	b.n	8007452 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	2201      	movs	r2, #1
 80073ee:	4013      	ands	r3, r2
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d117      	bne.n	8007424 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	330c      	adds	r3, #12
 80073fa:	001a      	movs	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007400:	7812      	ldrb	r2, [r2, #0]
 8007402:	b2d2      	uxtb	r2, r2
 8007404:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740a:	1c5a      	adds	r2, r3, #1
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2246      	movs	r2, #70	@ 0x46
 8007414:	5a9b      	ldrh	r3, [r3, r2]
 8007416:	b29b      	uxth	r3, r3
 8007418:	3b01      	subs	r3, #1
 800741a:	b299      	uxth	r1, r3
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2246      	movs	r2, #70	@ 0x46
 8007420:	5299      	strh	r1, [r3, r2]
 8007422:	e016      	b.n	8007452 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007424:	f7fc f972 	bl	800370c <HAL_GetTick>
 8007428:	0002      	movs	r2, r0
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	429a      	cmp	r2, r3
 8007432:	d802      	bhi.n	800743a <HAL_SPI_Receive+0x1ba>
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	3301      	adds	r3, #1
 8007438:	d102      	bne.n	8007440 <HAL_SPI_Receive+0x1c0>
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d108      	bne.n	8007452 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8007440:	2317      	movs	r3, #23
 8007442:	18fb      	adds	r3, r7, r3
 8007444:	2203      	movs	r2, #3
 8007446:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	225d      	movs	r2, #93	@ 0x5d
 800744c:	2101      	movs	r1, #1
 800744e:	5499      	strb	r1, [r3, r2]
          goto error;
 8007450:	e058      	b.n	8007504 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2246      	movs	r2, #70	@ 0x46
 8007456:	5a9b      	ldrh	r3, [r3, r2]
 8007458:	b29b      	uxth	r3, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1c3      	bne.n	80073e6 <HAL_SPI_Receive+0x166>
 800745e:	e039      	b.n	80074d4 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	2201      	movs	r2, #1
 8007468:	4013      	ands	r3, r2
 800746a:	2b01      	cmp	r3, #1
 800746c:	d115      	bne.n	800749a <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68da      	ldr	r2, [r3, #12]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007478:	b292      	uxth	r2, r2
 800747a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007480:	1c9a      	adds	r2, r3, #2
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2246      	movs	r2, #70	@ 0x46
 800748a:	5a9b      	ldrh	r3, [r3, r2]
 800748c:	b29b      	uxth	r3, r3
 800748e:	3b01      	subs	r3, #1
 8007490:	b299      	uxth	r1, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2246      	movs	r2, #70	@ 0x46
 8007496:	5299      	strh	r1, [r3, r2]
 8007498:	e016      	b.n	80074c8 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800749a:	f7fc f937 	bl	800370c <HAL_GetTick>
 800749e:	0002      	movs	r2, r0
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d802      	bhi.n	80074b0 <HAL_SPI_Receive+0x230>
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	3301      	adds	r3, #1
 80074ae:	d102      	bne.n	80074b6 <HAL_SPI_Receive+0x236>
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d108      	bne.n	80074c8 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80074b6:	2317      	movs	r3, #23
 80074b8:	18fb      	adds	r3, r7, r3
 80074ba:	2203      	movs	r2, #3
 80074bc:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	225d      	movs	r2, #93	@ 0x5d
 80074c2:	2101      	movs	r1, #1
 80074c4:	5499      	strb	r1, [r3, r2]
          goto error;
 80074c6:	e01d      	b.n	8007504 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2246      	movs	r2, #70	@ 0x46
 80074cc:	5a9b      	ldrh	r3, [r3, r2]
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1c5      	bne.n	8007460 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	6839      	ldr	r1, [r7, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	0018      	movs	r0, r3
 80074dc:	f000 fb40 	bl	8007b60 <SPI_EndRxTransaction>
 80074e0:	1e03      	subs	r3, r0, #0
 80074e2:	d002      	beq.n	80074ea <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2220      	movs	r2, #32
 80074e8:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d004      	beq.n	80074fc <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 80074f2:	2317      	movs	r3, #23
 80074f4:	18fb      	adds	r3, r7, r3
 80074f6:	2201      	movs	r2, #1
 80074f8:	701a      	strb	r2, [r3, #0]
 80074fa:	e003      	b.n	8007504 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	225d      	movs	r2, #93	@ 0x5d
 8007500:	2101      	movs	r1, #1
 8007502:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	225c      	movs	r2, #92	@ 0x5c
 8007508:	2100      	movs	r1, #0
 800750a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800750c:	2317      	movs	r3, #23
 800750e:	18fb      	adds	r3, r7, r3
 8007510:	781b      	ldrb	r3, [r3, #0]
}
 8007512:	0018      	movs	r0, r3
 8007514:	46bd      	mov	sp, r7
 8007516:	b007      	add	sp, #28
 8007518:	bd90      	pop	{r4, r7, pc}
 800751a:	46c0      	nop			@ (mov r8, r8)
 800751c:	ffffefff 	.word	0xffffefff
 8007520:	ffffbfff 	.word	0xffffbfff

08007524 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b08a      	sub	sp, #40	@ 0x28
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
 8007530:	001a      	movs	r2, r3
 8007532:	1cbb      	adds	r3, r7, #2
 8007534:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007536:	2301      	movs	r3, #1
 8007538:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800753a:	2323      	movs	r3, #35	@ 0x23
 800753c:	18fb      	adds	r3, r7, r3
 800753e:	2200      	movs	r2, #0
 8007540:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	225c      	movs	r2, #92	@ 0x5c
 8007546:	5c9b      	ldrb	r3, [r3, r2]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d101      	bne.n	8007550 <HAL_SPI_TransmitReceive+0x2c>
 800754c:	2302      	movs	r3, #2
 800754e:	e1c4      	b.n	80078da <HAL_SPI_TransmitReceive+0x3b6>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	225c      	movs	r2, #92	@ 0x5c
 8007554:	2101      	movs	r1, #1
 8007556:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007558:	f7fc f8d8 	bl	800370c <HAL_GetTick>
 800755c:	0003      	movs	r3, r0
 800755e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007560:	201b      	movs	r0, #27
 8007562:	183b      	adds	r3, r7, r0
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	215d      	movs	r1, #93	@ 0x5d
 8007568:	5c52      	ldrb	r2, [r2, r1]
 800756a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007572:	2312      	movs	r3, #18
 8007574:	18fb      	adds	r3, r7, r3
 8007576:	1cba      	adds	r2, r7, #2
 8007578:	8812      	ldrh	r2, [r2, #0]
 800757a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800757c:	183b      	adds	r3, r7, r0
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d011      	beq.n	80075a8 <HAL_SPI_TransmitReceive+0x84>
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	2382      	movs	r3, #130	@ 0x82
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	429a      	cmp	r2, r3
 800758c:	d107      	bne.n	800759e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d103      	bne.n	800759e <HAL_SPI_TransmitReceive+0x7a>
 8007596:	183b      	adds	r3, r7, r0
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	2b04      	cmp	r3, #4
 800759c:	d004      	beq.n	80075a8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800759e:	2323      	movs	r3, #35	@ 0x23
 80075a0:	18fb      	adds	r3, r7, r3
 80075a2:	2202      	movs	r2, #2
 80075a4:	701a      	strb	r2, [r3, #0]
    goto error;
 80075a6:	e191      	b.n	80078cc <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d006      	beq.n	80075bc <HAL_SPI_TransmitReceive+0x98>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d003      	beq.n	80075bc <HAL_SPI_TransmitReceive+0x98>
 80075b4:	1cbb      	adds	r3, r7, #2
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d104      	bne.n	80075c6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80075bc:	2323      	movs	r3, #35	@ 0x23
 80075be:	18fb      	adds	r3, r7, r3
 80075c0:	2201      	movs	r2, #1
 80075c2:	701a      	strb	r2, [r3, #0]
    goto error;
 80075c4:	e182      	b.n	80078cc <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	225d      	movs	r2, #93	@ 0x5d
 80075ca:	5c9b      	ldrb	r3, [r3, r2]
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b04      	cmp	r3, #4
 80075d0:	d003      	beq.n	80075da <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	225d      	movs	r2, #93	@ 0x5d
 80075d6:	2105      	movs	r1, #5
 80075d8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	1cba      	adds	r2, r7, #2
 80075ea:	2146      	movs	r1, #70	@ 0x46
 80075ec:	8812      	ldrh	r2, [r2, #0]
 80075ee:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	1cba      	adds	r2, r7, #2
 80075f4:	2144      	movs	r1, #68	@ 0x44
 80075f6:	8812      	ldrh	r2, [r2, #0]
 80075f8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	1cba      	adds	r2, r7, #2
 8007604:	8812      	ldrh	r2, [r2, #0]
 8007606:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	1cba      	adds	r2, r7, #2
 800760c:	8812      	ldrh	r2, [r2, #0]
 800760e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	68da      	ldr	r2, [r3, #12]
 8007620:	23e0      	movs	r3, #224	@ 0xe0
 8007622:	00db      	lsls	r3, r3, #3
 8007624:	429a      	cmp	r2, r3
 8007626:	d908      	bls.n	800763a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	49ac      	ldr	r1, [pc, #688]	@ (80078e4 <HAL_SPI_TransmitReceive+0x3c0>)
 8007634:	400a      	ands	r2, r1
 8007636:	605a      	str	r2, [r3, #4]
 8007638:	e008      	b.n	800764c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	685a      	ldr	r2, [r3, #4]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2180      	movs	r1, #128	@ 0x80
 8007646:	0149      	lsls	r1, r1, #5
 8007648:	430a      	orrs	r2, r1
 800764a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2240      	movs	r2, #64	@ 0x40
 8007654:	4013      	ands	r3, r2
 8007656:	2b40      	cmp	r3, #64	@ 0x40
 8007658:	d007      	beq.n	800766a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2140      	movs	r1, #64	@ 0x40
 8007666:	430a      	orrs	r2, r1
 8007668:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	68da      	ldr	r2, [r3, #12]
 800766e:	23e0      	movs	r3, #224	@ 0xe0
 8007670:	00db      	lsls	r3, r3, #3
 8007672:	429a      	cmp	r2, r3
 8007674:	d800      	bhi.n	8007678 <HAL_SPI_TransmitReceive+0x154>
 8007676:	e083      	b.n	8007780 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d005      	beq.n	800768c <HAL_SPI_TransmitReceive+0x168>
 8007680:	2312      	movs	r3, #18
 8007682:	18fb      	adds	r3, r7, r3
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d000      	beq.n	800768c <HAL_SPI_TransmitReceive+0x168>
 800768a:	e06d      	b.n	8007768 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007690:	881a      	ldrh	r2, [r3, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800769c:	1c9a      	adds	r2, r3, #2
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	3b01      	subs	r3, #1
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076b0:	e05a      	b.n	8007768 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	2202      	movs	r2, #2
 80076ba:	4013      	ands	r3, r2
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d11b      	bne.n	80076f8 <HAL_SPI_TransmitReceive+0x1d4>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d016      	beq.n	80076f8 <HAL_SPI_TransmitReceive+0x1d4>
 80076ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d113      	bne.n	80076f8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d4:	881a      	ldrh	r2, [r3, #0]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e0:	1c9a      	adds	r2, r3, #2
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	3b01      	subs	r3, #1
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076f4:	2300      	movs	r3, #0
 80076f6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	2201      	movs	r2, #1
 8007700:	4013      	ands	r3, r2
 8007702:	2b01      	cmp	r3, #1
 8007704:	d11c      	bne.n	8007740 <HAL_SPI_TransmitReceive+0x21c>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2246      	movs	r2, #70	@ 0x46
 800770a:	5a9b      	ldrh	r3, [r3, r2]
 800770c:	b29b      	uxth	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d016      	beq.n	8007740 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68da      	ldr	r2, [r3, #12]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800771c:	b292      	uxth	r2, r2
 800771e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007724:	1c9a      	adds	r2, r3, #2
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2246      	movs	r2, #70	@ 0x46
 800772e:	5a9b      	ldrh	r3, [r3, r2]
 8007730:	b29b      	uxth	r3, r3
 8007732:	3b01      	subs	r3, #1
 8007734:	b299      	uxth	r1, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2246      	movs	r2, #70	@ 0x46
 800773a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800773c:	2301      	movs	r3, #1
 800773e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007740:	f7fb ffe4 	bl	800370c <HAL_GetTick>
 8007744:	0002      	movs	r2, r0
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800774c:	429a      	cmp	r2, r3
 800774e:	d80b      	bhi.n	8007768 <HAL_SPI_TransmitReceive+0x244>
 8007750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007752:	3301      	adds	r3, #1
 8007754:	d008      	beq.n	8007768 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8007756:	2323      	movs	r3, #35	@ 0x23
 8007758:	18fb      	adds	r3, r7, r3
 800775a:	2203      	movs	r2, #3
 800775c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	225d      	movs	r2, #93	@ 0x5d
 8007762:	2101      	movs	r1, #1
 8007764:	5499      	strb	r1, [r3, r2]
        goto error;
 8007766:	e0b1      	b.n	80078cc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800776c:	b29b      	uxth	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	d19f      	bne.n	80076b2 <HAL_SPI_TransmitReceive+0x18e>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2246      	movs	r2, #70	@ 0x46
 8007776:	5a9b      	ldrh	r3, [r3, r2]
 8007778:	b29b      	uxth	r3, r3
 800777a:	2b00      	cmp	r3, #0
 800777c:	d199      	bne.n	80076b2 <HAL_SPI_TransmitReceive+0x18e>
 800777e:	e089      	b.n	8007894 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d005      	beq.n	8007794 <HAL_SPI_TransmitReceive+0x270>
 8007788:	2312      	movs	r3, #18
 800778a:	18fb      	adds	r3, r7, r3
 800778c:	881b      	ldrh	r3, [r3, #0]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d000      	beq.n	8007794 <HAL_SPI_TransmitReceive+0x270>
 8007792:	e074      	b.n	800787e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	330c      	adds	r3, #12
 800779e:	7812      	ldrb	r2, [r2, #0]
 80077a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a6:	1c5a      	adds	r2, r3, #1
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	3b01      	subs	r3, #1
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077ba:	e060      	b.n	800787e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	2202      	movs	r2, #2
 80077c4:	4013      	ands	r3, r2
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d11c      	bne.n	8007804 <HAL_SPI_TransmitReceive+0x2e0>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d017      	beq.n	8007804 <HAL_SPI_TransmitReceive+0x2e0>
 80077d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d114      	bne.n	8007804 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	330c      	adds	r3, #12
 80077e4:	7812      	ldrb	r2, [r2, #0]
 80077e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ec:	1c5a      	adds	r2, r3, #1
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	3b01      	subs	r3, #1
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007800:	2300      	movs	r3, #0
 8007802:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	2201      	movs	r2, #1
 800780c:	4013      	ands	r3, r2
 800780e:	2b01      	cmp	r3, #1
 8007810:	d11e      	bne.n	8007850 <HAL_SPI_TransmitReceive+0x32c>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2246      	movs	r2, #70	@ 0x46
 8007816:	5a9b      	ldrh	r3, [r3, r2]
 8007818:	b29b      	uxth	r3, r3
 800781a:	2b00      	cmp	r3, #0
 800781c:	d018      	beq.n	8007850 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	330c      	adds	r3, #12
 8007824:	001a      	movs	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800782a:	7812      	ldrb	r2, [r2, #0]
 800782c:	b2d2      	uxtb	r2, r2
 800782e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007834:	1c5a      	adds	r2, r3, #1
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2246      	movs	r2, #70	@ 0x46
 800783e:	5a9b      	ldrh	r3, [r3, r2]
 8007840:	b29b      	uxth	r3, r3
 8007842:	3b01      	subs	r3, #1
 8007844:	b299      	uxth	r1, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2246      	movs	r2, #70	@ 0x46
 800784a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800784c:	2301      	movs	r3, #1
 800784e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007850:	f7fb ff5c 	bl	800370c <HAL_GetTick>
 8007854:	0002      	movs	r2, r0
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800785c:	429a      	cmp	r2, r3
 800785e:	d802      	bhi.n	8007866 <HAL_SPI_TransmitReceive+0x342>
 8007860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007862:	3301      	adds	r3, #1
 8007864:	d102      	bne.n	800786c <HAL_SPI_TransmitReceive+0x348>
 8007866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007868:	2b00      	cmp	r3, #0
 800786a:	d108      	bne.n	800787e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800786c:	2323      	movs	r3, #35	@ 0x23
 800786e:	18fb      	adds	r3, r7, r3
 8007870:	2203      	movs	r2, #3
 8007872:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	225d      	movs	r2, #93	@ 0x5d
 8007878:	2101      	movs	r1, #1
 800787a:	5499      	strb	r1, [r3, r2]
        goto error;
 800787c:	e026      	b.n	80078cc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007882:	b29b      	uxth	r3, r3
 8007884:	2b00      	cmp	r3, #0
 8007886:	d199      	bne.n	80077bc <HAL_SPI_TransmitReceive+0x298>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2246      	movs	r2, #70	@ 0x46
 800788c:	5a9b      	ldrh	r3, [r3, r2]
 800788e:	b29b      	uxth	r3, r3
 8007890:	2b00      	cmp	r3, #0
 8007892:	d193      	bne.n	80077bc <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007894:	69fa      	ldr	r2, [r7, #28]
 8007896:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	0018      	movs	r0, r3
 800789c:	f000 f9be 	bl	8007c1c <SPI_EndRxTxTransaction>
 80078a0:	1e03      	subs	r3, r0, #0
 80078a2:	d006      	beq.n	80078b2 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80078a4:	2323      	movs	r3, #35	@ 0x23
 80078a6:	18fb      	adds	r3, r7, r3
 80078a8:	2201      	movs	r2, #1
 80078aa:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2220      	movs	r2, #32
 80078b0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d004      	beq.n	80078c4 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80078ba:	2323      	movs	r3, #35	@ 0x23
 80078bc:	18fb      	adds	r3, r7, r3
 80078be:	2201      	movs	r2, #1
 80078c0:	701a      	strb	r2, [r3, #0]
 80078c2:	e003      	b.n	80078cc <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	225d      	movs	r2, #93	@ 0x5d
 80078c8:	2101      	movs	r1, #1
 80078ca:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	225c      	movs	r2, #92	@ 0x5c
 80078d0:	2100      	movs	r1, #0
 80078d2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80078d4:	2323      	movs	r3, #35	@ 0x23
 80078d6:	18fb      	adds	r3, r7, r3
 80078d8:	781b      	ldrb	r3, [r3, #0]
}
 80078da:	0018      	movs	r0, r3
 80078dc:	46bd      	mov	sp, r7
 80078de:	b00a      	add	sp, #40	@ 0x28
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	46c0      	nop			@ (mov r8, r8)
 80078e4:	ffffefff 	.word	0xffffefff

080078e8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	225d      	movs	r2, #93	@ 0x5d
 80078f4:	5c9b      	ldrb	r3, [r3, r2]
 80078f6:	b2db      	uxtb	r3, r3
}
 80078f8:	0018      	movs	r0, r3
 80078fa:	46bd      	mov	sp, r7
 80078fc:	b002      	add	sp, #8
 80078fe:	bd80      	pop	{r7, pc}

08007900 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b088      	sub	sp, #32
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	603b      	str	r3, [r7, #0]
 800790c:	1dfb      	adds	r3, r7, #7
 800790e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007910:	f7fb fefc 	bl	800370c <HAL_GetTick>
 8007914:	0002      	movs	r2, r0
 8007916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007918:	1a9b      	subs	r3, r3, r2
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	18d3      	adds	r3, r2, r3
 800791e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007920:	f7fb fef4 	bl	800370c <HAL_GetTick>
 8007924:	0003      	movs	r3, r0
 8007926:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007928:	4b3a      	ldr	r3, [pc, #232]	@ (8007a14 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	015b      	lsls	r3, r3, #5
 800792e:	0d1b      	lsrs	r3, r3, #20
 8007930:	69fa      	ldr	r2, [r7, #28]
 8007932:	4353      	muls	r3, r2
 8007934:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007936:	e058      	b.n	80079ea <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	3301      	adds	r3, #1
 800793c:	d055      	beq.n	80079ea <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800793e:	f7fb fee5 	bl	800370c <HAL_GetTick>
 8007942:	0002      	movs	r2, r0
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	69fa      	ldr	r2, [r7, #28]
 800794a:	429a      	cmp	r2, r3
 800794c:	d902      	bls.n	8007954 <SPI_WaitFlagStateUntilTimeout+0x54>
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d142      	bne.n	80079da <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	685a      	ldr	r2, [r3, #4]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	21e0      	movs	r1, #224	@ 0xe0
 8007960:	438a      	bics	r2, r1
 8007962:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	685a      	ldr	r2, [r3, #4]
 8007968:	2382      	movs	r3, #130	@ 0x82
 800796a:	005b      	lsls	r3, r3, #1
 800796c:	429a      	cmp	r2, r3
 800796e:	d113      	bne.n	8007998 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	689a      	ldr	r2, [r3, #8]
 8007974:	2380      	movs	r3, #128	@ 0x80
 8007976:	021b      	lsls	r3, r3, #8
 8007978:	429a      	cmp	r2, r3
 800797a:	d005      	beq.n	8007988 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	2380      	movs	r3, #128	@ 0x80
 8007982:	00db      	lsls	r3, r3, #3
 8007984:	429a      	cmp	r2, r3
 8007986:	d107      	bne.n	8007998 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2140      	movs	r1, #64	@ 0x40
 8007994:	438a      	bics	r2, r1
 8007996:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800799c:	2380      	movs	r3, #128	@ 0x80
 800799e:	019b      	lsls	r3, r3, #6
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d110      	bne.n	80079c6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	491a      	ldr	r1, [pc, #104]	@ (8007a18 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80079b0:	400a      	ands	r2, r1
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2180      	movs	r1, #128	@ 0x80
 80079c0:	0189      	lsls	r1, r1, #6
 80079c2:	430a      	orrs	r2, r1
 80079c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	225d      	movs	r2, #93	@ 0x5d
 80079ca:	2101      	movs	r1, #1
 80079cc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	225c      	movs	r2, #92	@ 0x5c
 80079d2:	2100      	movs	r1, #0
 80079d4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e017      	b.n	8007a0a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80079e0:	2300      	movs	r3, #0
 80079e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	3b01      	subs	r3, #1
 80079e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	4013      	ands	r3, r2
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	425a      	negs	r2, r3
 80079fa:	4153      	adcs	r3, r2
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	001a      	movs	r2, r3
 8007a00:	1dfb      	adds	r3, r7, #7
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d197      	bne.n	8007938 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	b008      	add	sp, #32
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	46c0      	nop			@ (mov r8, r8)
 8007a14:	2000005c 	.word	0x2000005c
 8007a18:	ffffdfff 	.word	0xffffdfff

08007a1c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b08a      	sub	sp, #40	@ 0x28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	607a      	str	r2, [r7, #4]
 8007a28:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007a2a:	2317      	movs	r3, #23
 8007a2c:	18fb      	adds	r3, r7, r3
 8007a2e:	2200      	movs	r2, #0
 8007a30:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007a32:	f7fb fe6b 	bl	800370c <HAL_GetTick>
 8007a36:	0002      	movs	r2, r0
 8007a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3a:	1a9b      	subs	r3, r3, r2
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	18d3      	adds	r3, r2, r3
 8007a40:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007a42:	f7fb fe63 	bl	800370c <HAL_GetTick>
 8007a46:	0003      	movs	r3, r0
 8007a48:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	330c      	adds	r3, #12
 8007a50:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007a52:	4b41      	ldr	r3, [pc, #260]	@ (8007b58 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	0013      	movs	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	189b      	adds	r3, r3, r2
 8007a5c:	00da      	lsls	r2, r3, #3
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	0d1b      	lsrs	r3, r3, #20
 8007a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a64:	4353      	muls	r3, r2
 8007a66:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007a68:	e068      	b.n	8007b3c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	23c0      	movs	r3, #192	@ 0xc0
 8007a6e:	00db      	lsls	r3, r3, #3
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d10a      	bne.n	8007a8a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d107      	bne.n	8007a8a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	b2da      	uxtb	r2, r3
 8007a80:	2117      	movs	r1, #23
 8007a82:	187b      	adds	r3, r7, r1
 8007a84:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007a86:	187b      	adds	r3, r7, r1
 8007a88:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	d055      	beq.n	8007b3c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a90:	f7fb fe3c 	bl	800370c <HAL_GetTick>
 8007a94:	0002      	movs	r2, r0
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d902      	bls.n	8007aa6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d142      	bne.n	8007b2c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	21e0      	movs	r1, #224	@ 0xe0
 8007ab2:	438a      	bics	r2, r1
 8007ab4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	685a      	ldr	r2, [r3, #4]
 8007aba:	2382      	movs	r3, #130	@ 0x82
 8007abc:	005b      	lsls	r3, r3, #1
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d113      	bne.n	8007aea <SPI_WaitFifoStateUntilTimeout+0xce>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	689a      	ldr	r2, [r3, #8]
 8007ac6:	2380      	movs	r3, #128	@ 0x80
 8007ac8:	021b      	lsls	r3, r3, #8
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d005      	beq.n	8007ada <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	689a      	ldr	r2, [r3, #8]
 8007ad2:	2380      	movs	r3, #128	@ 0x80
 8007ad4:	00db      	lsls	r3, r3, #3
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d107      	bne.n	8007aea <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2140      	movs	r1, #64	@ 0x40
 8007ae6:	438a      	bics	r2, r1
 8007ae8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007aee:	2380      	movs	r3, #128	@ 0x80
 8007af0:	019b      	lsls	r3, r3, #6
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d110      	bne.n	8007b18 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4916      	ldr	r1, [pc, #88]	@ (8007b5c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007b02:	400a      	ands	r2, r1
 8007b04:	601a      	str	r2, [r3, #0]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2180      	movs	r1, #128	@ 0x80
 8007b12:	0189      	lsls	r1, r1, #6
 8007b14:	430a      	orrs	r2, r1
 8007b16:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	225d      	movs	r2, #93	@ 0x5d
 8007b1c:	2101      	movs	r1, #1
 8007b1e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	225c      	movs	r2, #92	@ 0x5c
 8007b24:	2100      	movs	r1, #0
 8007b26:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e010      	b.n	8007b4e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007b32:	2300      	movs	r3, #0
 8007b34:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	4013      	ands	r3, r2
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d18e      	bne.n	8007a6a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	0018      	movs	r0, r3
 8007b50:	46bd      	mov	sp, r7
 8007b52:	b00a      	add	sp, #40	@ 0x28
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	46c0      	nop			@ (mov r8, r8)
 8007b58:	2000005c 	.word	0x2000005c
 8007b5c:	ffffdfff 	.word	0xffffdfff

08007b60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af02      	add	r7, sp, #8
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	685a      	ldr	r2, [r3, #4]
 8007b70:	2382      	movs	r3, #130	@ 0x82
 8007b72:	005b      	lsls	r3, r3, #1
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d113      	bne.n	8007ba0 <SPI_EndRxTransaction+0x40>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	689a      	ldr	r2, [r3, #8]
 8007b7c:	2380      	movs	r3, #128	@ 0x80
 8007b7e:	021b      	lsls	r3, r3, #8
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d005      	beq.n	8007b90 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	689a      	ldr	r2, [r3, #8]
 8007b88:	2380      	movs	r3, #128	@ 0x80
 8007b8a:	00db      	lsls	r3, r3, #3
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d107      	bne.n	8007ba0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2140      	movs	r1, #64	@ 0x40
 8007b9c:	438a      	bics	r2, r1
 8007b9e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	0013      	movs	r3, r2
 8007baa:	2200      	movs	r2, #0
 8007bac:	2180      	movs	r1, #128	@ 0x80
 8007bae:	f7ff fea7 	bl	8007900 <SPI_WaitFlagStateUntilTimeout>
 8007bb2:	1e03      	subs	r3, r0, #0
 8007bb4:	d007      	beq.n	8007bc6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bba:	2220      	movs	r2, #32
 8007bbc:	431a      	orrs	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e026      	b.n	8007c14 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	685a      	ldr	r2, [r3, #4]
 8007bca:	2382      	movs	r3, #130	@ 0x82
 8007bcc:	005b      	lsls	r3, r3, #1
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d11f      	bne.n	8007c12 <SPI_EndRxTransaction+0xb2>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	689a      	ldr	r2, [r3, #8]
 8007bd6:	2380      	movs	r3, #128	@ 0x80
 8007bd8:	021b      	lsls	r3, r3, #8
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d005      	beq.n	8007bea <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	689a      	ldr	r2, [r3, #8]
 8007be2:	2380      	movs	r3, #128	@ 0x80
 8007be4:	00db      	lsls	r3, r3, #3
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d113      	bne.n	8007c12 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	23c0      	movs	r3, #192	@ 0xc0
 8007bee:	00d9      	lsls	r1, r3, #3
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	0013      	movs	r3, r2
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f7ff ff0f 	bl	8007a1c <SPI_WaitFifoStateUntilTimeout>
 8007bfe:	1e03      	subs	r3, r0, #0
 8007c00:	d007      	beq.n	8007c12 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c06:	2220      	movs	r2, #32
 8007c08:	431a      	orrs	r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e000      	b.n	8007c14 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	0018      	movs	r0, r3
 8007c16:	46bd      	mov	sp, r7
 8007c18:	b004      	add	sp, #16
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af02      	add	r7, sp, #8
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	23c0      	movs	r3, #192	@ 0xc0
 8007c2c:	0159      	lsls	r1, r3, #5
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	0013      	movs	r3, r2
 8007c36:	2200      	movs	r2, #0
 8007c38:	f7ff fef0 	bl	8007a1c <SPI_WaitFifoStateUntilTimeout>
 8007c3c:	1e03      	subs	r3, r0, #0
 8007c3e:	d007      	beq.n	8007c50 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c44:	2220      	movs	r2, #32
 8007c46:	431a      	orrs	r2, r3
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e027      	b.n	8007ca0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	9300      	str	r3, [sp, #0]
 8007c58:	0013      	movs	r3, r2
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	2180      	movs	r1, #128	@ 0x80
 8007c5e:	f7ff fe4f 	bl	8007900 <SPI_WaitFlagStateUntilTimeout>
 8007c62:	1e03      	subs	r3, r0, #0
 8007c64:	d007      	beq.n	8007c76 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c6a:	2220      	movs	r2, #32
 8007c6c:	431a      	orrs	r2, r3
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e014      	b.n	8007ca0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	23c0      	movs	r3, #192	@ 0xc0
 8007c7a:	00d9      	lsls	r1, r3, #3
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	0013      	movs	r3, r2
 8007c84:	2200      	movs	r2, #0
 8007c86:	f7ff fec9 	bl	8007a1c <SPI_WaitFifoStateUntilTimeout>
 8007c8a:	1e03      	subs	r3, r0, #0
 8007c8c:	d007      	beq.n	8007c9e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c92:	2220      	movs	r2, #32
 8007c94:	431a      	orrs	r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e000      	b.n	8007ca0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	0018      	movs	r0, r3
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	b004      	add	sp, #16
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e042      	b.n	8007d40 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	223d      	movs	r2, #61	@ 0x3d
 8007cbe:	5c9b      	ldrb	r3, [r3, r2]
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d107      	bne.n	8007cd6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	223c      	movs	r2, #60	@ 0x3c
 8007cca:	2100      	movs	r1, #0
 8007ccc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	0018      	movs	r0, r3
 8007cd2:	f7fb facf 	bl	8003274 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	223d      	movs	r2, #61	@ 0x3d
 8007cda:	2102      	movs	r1, #2
 8007cdc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	3304      	adds	r3, #4
 8007ce6:	0019      	movs	r1, r3
 8007ce8:	0010      	movs	r0, r2
 8007cea:	f000 fa17 	bl	800811c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2246      	movs	r2, #70	@ 0x46
 8007cf2:	2101      	movs	r1, #1
 8007cf4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	223e      	movs	r2, #62	@ 0x3e
 8007cfa:	2101      	movs	r1, #1
 8007cfc:	5499      	strb	r1, [r3, r2]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	223f      	movs	r2, #63	@ 0x3f
 8007d02:	2101      	movs	r1, #1
 8007d04:	5499      	strb	r1, [r3, r2]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2240      	movs	r2, #64	@ 0x40
 8007d0a:	2101      	movs	r1, #1
 8007d0c:	5499      	strb	r1, [r3, r2]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2241      	movs	r2, #65	@ 0x41
 8007d12:	2101      	movs	r1, #1
 8007d14:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2242      	movs	r2, #66	@ 0x42
 8007d1a:	2101      	movs	r1, #1
 8007d1c:	5499      	strb	r1, [r3, r2]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2243      	movs	r2, #67	@ 0x43
 8007d22:	2101      	movs	r1, #1
 8007d24:	5499      	strb	r1, [r3, r2]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2244      	movs	r2, #68	@ 0x44
 8007d2a:	2101      	movs	r1, #1
 8007d2c:	5499      	strb	r1, [r3, r2]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2245      	movs	r2, #69	@ 0x45
 8007d32:	2101      	movs	r1, #1
 8007d34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	223d      	movs	r2, #61	@ 0x3d
 8007d3a:	2101      	movs	r1, #1
 8007d3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	0018      	movs	r0, r3
 8007d42:	46bd      	mov	sp, r7
 8007d44:	b002      	add	sp, #8
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	2202      	movs	r2, #2
 8007d64:	4013      	ands	r3, r2
 8007d66:	d021      	beq.n	8007dac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	d01d      	beq.n	8007dac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2203      	movs	r2, #3
 8007d76:	4252      	negs	r2, r2
 8007d78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	2203      	movs	r2, #3
 8007d88:	4013      	ands	r3, r2
 8007d8a:	d004      	beq.n	8007d96 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	0018      	movs	r0, r3
 8007d90:	f000 f9ac 	bl	80080ec <HAL_TIM_IC_CaptureCallback>
 8007d94:	e007      	b.n	8007da6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	0018      	movs	r0, r3
 8007d9a:	f000 f99f 	bl	80080dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	0018      	movs	r0, r3
 8007da2:	f000 f9ab 	bl	80080fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	2204      	movs	r2, #4
 8007db0:	4013      	ands	r3, r2
 8007db2:	d022      	beq.n	8007dfa <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2204      	movs	r2, #4
 8007db8:	4013      	ands	r3, r2
 8007dba:	d01e      	beq.n	8007dfa <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2205      	movs	r2, #5
 8007dc2:	4252      	negs	r2, r2
 8007dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2202      	movs	r2, #2
 8007dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	699a      	ldr	r2, [r3, #24]
 8007dd2:	23c0      	movs	r3, #192	@ 0xc0
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	d004      	beq.n	8007de4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	0018      	movs	r0, r3
 8007dde:	f000 f985 	bl	80080ec <HAL_TIM_IC_CaptureCallback>
 8007de2:	e007      	b.n	8007df4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	0018      	movs	r0, r3
 8007de8:	f000 f978 	bl	80080dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	0018      	movs	r0, r3
 8007df0:	f000 f984 	bl	80080fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	2208      	movs	r2, #8
 8007dfe:	4013      	ands	r3, r2
 8007e00:	d021      	beq.n	8007e46 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2208      	movs	r2, #8
 8007e06:	4013      	ands	r3, r2
 8007e08:	d01d      	beq.n	8007e46 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2209      	movs	r2, #9
 8007e10:	4252      	negs	r2, r2
 8007e12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2204      	movs	r2, #4
 8007e18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	69db      	ldr	r3, [r3, #28]
 8007e20:	2203      	movs	r2, #3
 8007e22:	4013      	ands	r3, r2
 8007e24:	d004      	beq.n	8007e30 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	0018      	movs	r0, r3
 8007e2a:	f000 f95f 	bl	80080ec <HAL_TIM_IC_CaptureCallback>
 8007e2e:	e007      	b.n	8007e40 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	0018      	movs	r0, r3
 8007e34:	f000 f952 	bl	80080dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	0018      	movs	r0, r3
 8007e3c:	f000 f95e 	bl	80080fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	2210      	movs	r2, #16
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	d022      	beq.n	8007e94 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2210      	movs	r2, #16
 8007e52:	4013      	ands	r3, r2
 8007e54:	d01e      	beq.n	8007e94 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2211      	movs	r2, #17
 8007e5c:	4252      	negs	r2, r2
 8007e5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2208      	movs	r2, #8
 8007e64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	69da      	ldr	r2, [r3, #28]
 8007e6c:	23c0      	movs	r3, #192	@ 0xc0
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	4013      	ands	r3, r2
 8007e72:	d004      	beq.n	8007e7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	0018      	movs	r0, r3
 8007e78:	f000 f938 	bl	80080ec <HAL_TIM_IC_CaptureCallback>
 8007e7c:	e007      	b.n	8007e8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	0018      	movs	r0, r3
 8007e82:	f000 f92b 	bl	80080dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	0018      	movs	r0, r3
 8007e8a:	f000 f937 	bl	80080fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2201      	movs	r2, #1
 8007e98:	4013      	ands	r3, r2
 8007e9a:	d00c      	beq.n	8007eb6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	d008      	beq.n	8007eb6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2202      	movs	r2, #2
 8007eaa:	4252      	negs	r2, r2
 8007eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	0018      	movs	r0, r3
 8007eb2:	f000 f90b 	bl	80080cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	2280      	movs	r2, #128	@ 0x80
 8007eba:	4013      	ands	r3, r2
 8007ebc:	d00c      	beq.n	8007ed8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2280      	movs	r2, #128	@ 0x80
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	d008      	beq.n	8007ed8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2281      	movs	r2, #129	@ 0x81
 8007ecc:	4252      	negs	r2, r2
 8007ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	0018      	movs	r0, r3
 8007ed4:	f000 fab0 	bl	8008438 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	2240      	movs	r2, #64	@ 0x40
 8007edc:	4013      	ands	r3, r2
 8007ede:	d00c      	beq.n	8007efa <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2240      	movs	r2, #64	@ 0x40
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	d008      	beq.n	8007efa <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2241      	movs	r2, #65	@ 0x41
 8007eee:	4252      	negs	r2, r2
 8007ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	0018      	movs	r0, r3
 8007ef6:	f000 f909 	bl	800810c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	2220      	movs	r2, #32
 8007efe:	4013      	ands	r3, r2
 8007f00:	d00c      	beq.n	8007f1c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2220      	movs	r2, #32
 8007f06:	4013      	ands	r3, r2
 8007f08:	d008      	beq.n	8007f1c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2221      	movs	r2, #33	@ 0x21
 8007f10:	4252      	negs	r2, r2
 8007f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	0018      	movs	r0, r3
 8007f18:	f000 fa86 	bl	8008428 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f1c:	46c0      	nop			@ (mov r8, r8)
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	b004      	add	sp, #16
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f2e:	230f      	movs	r3, #15
 8007f30:	18fb      	adds	r3, r7, r3
 8007f32:	2200      	movs	r2, #0
 8007f34:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	223c      	movs	r2, #60	@ 0x3c
 8007f3a:	5c9b      	ldrb	r3, [r3, r2]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d101      	bne.n	8007f44 <HAL_TIM_ConfigClockSource+0x20>
 8007f40:	2302      	movs	r3, #2
 8007f42:	e0bc      	b.n	80080be <HAL_TIM_ConfigClockSource+0x19a>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	223c      	movs	r2, #60	@ 0x3c
 8007f48:	2101      	movs	r1, #1
 8007f4a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	223d      	movs	r2, #61	@ 0x3d
 8007f50:	2102      	movs	r1, #2
 8007f52:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	2277      	movs	r2, #119	@ 0x77
 8007f60:	4393      	bics	r3, r2
 8007f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	4a58      	ldr	r2, [pc, #352]	@ (80080c8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007f68:	4013      	ands	r3, r2
 8007f6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2280      	movs	r2, #128	@ 0x80
 8007f7a:	0192      	lsls	r2, r2, #6
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d040      	beq.n	8008002 <HAL_TIM_ConfigClockSource+0xde>
 8007f80:	2280      	movs	r2, #128	@ 0x80
 8007f82:	0192      	lsls	r2, r2, #6
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d900      	bls.n	8007f8a <HAL_TIM_ConfigClockSource+0x66>
 8007f88:	e088      	b.n	800809c <HAL_TIM_ConfigClockSource+0x178>
 8007f8a:	2280      	movs	r2, #128	@ 0x80
 8007f8c:	0152      	lsls	r2, r2, #5
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d100      	bne.n	8007f94 <HAL_TIM_ConfigClockSource+0x70>
 8007f92:	e088      	b.n	80080a6 <HAL_TIM_ConfigClockSource+0x182>
 8007f94:	2280      	movs	r2, #128	@ 0x80
 8007f96:	0152      	lsls	r2, r2, #5
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d900      	bls.n	8007f9e <HAL_TIM_ConfigClockSource+0x7a>
 8007f9c:	e07e      	b.n	800809c <HAL_TIM_ConfigClockSource+0x178>
 8007f9e:	2b70      	cmp	r3, #112	@ 0x70
 8007fa0:	d018      	beq.n	8007fd4 <HAL_TIM_ConfigClockSource+0xb0>
 8007fa2:	d900      	bls.n	8007fa6 <HAL_TIM_ConfigClockSource+0x82>
 8007fa4:	e07a      	b.n	800809c <HAL_TIM_ConfigClockSource+0x178>
 8007fa6:	2b60      	cmp	r3, #96	@ 0x60
 8007fa8:	d04f      	beq.n	800804a <HAL_TIM_ConfigClockSource+0x126>
 8007faa:	d900      	bls.n	8007fae <HAL_TIM_ConfigClockSource+0x8a>
 8007fac:	e076      	b.n	800809c <HAL_TIM_ConfigClockSource+0x178>
 8007fae:	2b50      	cmp	r3, #80	@ 0x50
 8007fb0:	d03b      	beq.n	800802a <HAL_TIM_ConfigClockSource+0x106>
 8007fb2:	d900      	bls.n	8007fb6 <HAL_TIM_ConfigClockSource+0x92>
 8007fb4:	e072      	b.n	800809c <HAL_TIM_ConfigClockSource+0x178>
 8007fb6:	2b40      	cmp	r3, #64	@ 0x40
 8007fb8:	d057      	beq.n	800806a <HAL_TIM_ConfigClockSource+0x146>
 8007fba:	d900      	bls.n	8007fbe <HAL_TIM_ConfigClockSource+0x9a>
 8007fbc:	e06e      	b.n	800809c <HAL_TIM_ConfigClockSource+0x178>
 8007fbe:	2b30      	cmp	r3, #48	@ 0x30
 8007fc0:	d063      	beq.n	800808a <HAL_TIM_ConfigClockSource+0x166>
 8007fc2:	d86b      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x178>
 8007fc4:	2b20      	cmp	r3, #32
 8007fc6:	d060      	beq.n	800808a <HAL_TIM_ConfigClockSource+0x166>
 8007fc8:	d868      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x178>
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d05d      	beq.n	800808a <HAL_TIM_ConfigClockSource+0x166>
 8007fce:	2b10      	cmp	r3, #16
 8007fd0:	d05b      	beq.n	800808a <HAL_TIM_ConfigClockSource+0x166>
 8007fd2:	e063      	b.n	800809c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fe4:	f000 f9a2 	bl	800832c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	2277      	movs	r2, #119	@ 0x77
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	609a      	str	r2, [r3, #8]
      break;
 8008000:	e052      	b.n	80080a8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008012:	f000 f98b 	bl	800832c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	689a      	ldr	r2, [r3, #8]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2180      	movs	r1, #128	@ 0x80
 8008022:	01c9      	lsls	r1, r1, #7
 8008024:	430a      	orrs	r2, r1
 8008026:	609a      	str	r2, [r3, #8]
      break;
 8008028:	e03e      	b.n	80080a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008036:	001a      	movs	r2, r3
 8008038:	f000 f8fe 	bl	8008238 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2150      	movs	r1, #80	@ 0x50
 8008042:	0018      	movs	r0, r3
 8008044:	f000 f958 	bl	80082f8 <TIM_ITRx_SetConfig>
      break;
 8008048:	e02e      	b.n	80080a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008056:	001a      	movs	r2, r3
 8008058:	f000 f91c 	bl	8008294 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2160      	movs	r1, #96	@ 0x60
 8008062:	0018      	movs	r0, r3
 8008064:	f000 f948 	bl	80082f8 <TIM_ITRx_SetConfig>
      break;
 8008068:	e01e      	b.n	80080a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008076:	001a      	movs	r2, r3
 8008078:	f000 f8de 	bl	8008238 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2140      	movs	r1, #64	@ 0x40
 8008082:	0018      	movs	r0, r3
 8008084:	f000 f938 	bl	80082f8 <TIM_ITRx_SetConfig>
      break;
 8008088:	e00e      	b.n	80080a8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	0019      	movs	r1, r3
 8008094:	0010      	movs	r0, r2
 8008096:	f000 f92f 	bl	80082f8 <TIM_ITRx_SetConfig>
      break;
 800809a:	e005      	b.n	80080a8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800809c:	230f      	movs	r3, #15
 800809e:	18fb      	adds	r3, r7, r3
 80080a0:	2201      	movs	r2, #1
 80080a2:	701a      	strb	r2, [r3, #0]
      break;
 80080a4:	e000      	b.n	80080a8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80080a6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	223d      	movs	r2, #61	@ 0x3d
 80080ac:	2101      	movs	r1, #1
 80080ae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	223c      	movs	r2, #60	@ 0x3c
 80080b4:	2100      	movs	r1, #0
 80080b6:	5499      	strb	r1, [r3, r2]

  return status;
 80080b8:	230f      	movs	r3, #15
 80080ba:	18fb      	adds	r3, r7, r3
 80080bc:	781b      	ldrb	r3, [r3, #0]
}
 80080be:	0018      	movs	r0, r3
 80080c0:	46bd      	mov	sp, r7
 80080c2:	b004      	add	sp, #16
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	46c0      	nop			@ (mov r8, r8)
 80080c8:	ffff00ff 	.word	0xffff00ff

080080cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80080d4:	46c0      	nop			@ (mov r8, r8)
 80080d6:	46bd      	mov	sp, r7
 80080d8:	b002      	add	sp, #8
 80080da:	bd80      	pop	{r7, pc}

080080dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080e4:	46c0      	nop			@ (mov r8, r8)
 80080e6:	46bd      	mov	sp, r7
 80080e8:	b002      	add	sp, #8
 80080ea:	bd80      	pop	{r7, pc}

080080ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080f4:	46c0      	nop			@ (mov r8, r8)
 80080f6:	46bd      	mov	sp, r7
 80080f8:	b002      	add	sp, #8
 80080fa:	bd80      	pop	{r7, pc}

080080fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008104:	46c0      	nop			@ (mov r8, r8)
 8008106:	46bd      	mov	sp, r7
 8008108:	b002      	add	sp, #8
 800810a:	bd80      	pop	{r7, pc}

0800810c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008114:	46c0      	nop			@ (mov r8, r8)
 8008116:	46bd      	mov	sp, r7
 8008118:	b002      	add	sp, #8
 800811a:	bd80      	pop	{r7, pc}

0800811c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a3b      	ldr	r2, [pc, #236]	@ (800821c <TIM_Base_SetConfig+0x100>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d008      	beq.n	8008146 <TIM_Base_SetConfig+0x2a>
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	2380      	movs	r3, #128	@ 0x80
 8008138:	05db      	lsls	r3, r3, #23
 800813a:	429a      	cmp	r2, r3
 800813c:	d003      	beq.n	8008146 <TIM_Base_SetConfig+0x2a>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a37      	ldr	r2, [pc, #220]	@ (8008220 <TIM_Base_SetConfig+0x104>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d108      	bne.n	8008158 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2270      	movs	r2, #112	@ 0x70
 800814a:	4393      	bics	r3, r2
 800814c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	4313      	orrs	r3, r2
 8008156:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a30      	ldr	r2, [pc, #192]	@ (800821c <TIM_Base_SetConfig+0x100>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d018      	beq.n	8008192 <TIM_Base_SetConfig+0x76>
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	2380      	movs	r3, #128	@ 0x80
 8008164:	05db      	lsls	r3, r3, #23
 8008166:	429a      	cmp	r2, r3
 8008168:	d013      	beq.n	8008192 <TIM_Base_SetConfig+0x76>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a2c      	ldr	r2, [pc, #176]	@ (8008220 <TIM_Base_SetConfig+0x104>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d00f      	beq.n	8008192 <TIM_Base_SetConfig+0x76>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a2b      	ldr	r2, [pc, #172]	@ (8008224 <TIM_Base_SetConfig+0x108>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d00b      	beq.n	8008192 <TIM_Base_SetConfig+0x76>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a2a      	ldr	r2, [pc, #168]	@ (8008228 <TIM_Base_SetConfig+0x10c>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d007      	beq.n	8008192 <TIM_Base_SetConfig+0x76>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a29      	ldr	r2, [pc, #164]	@ (800822c <TIM_Base_SetConfig+0x110>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d003      	beq.n	8008192 <TIM_Base_SetConfig+0x76>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a28      	ldr	r2, [pc, #160]	@ (8008230 <TIM_Base_SetConfig+0x114>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d108      	bne.n	80081a4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	4a27      	ldr	r2, [pc, #156]	@ (8008234 <TIM_Base_SetConfig+0x118>)
 8008196:	4013      	ands	r3, r2
 8008198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2280      	movs	r2, #128	@ 0x80
 80081a8:	4393      	bics	r3, r2
 80081aa:	001a      	movs	r2, r3
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	695b      	ldr	r3, [r3, #20]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	689a      	ldr	r2, [r3, #8]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a13      	ldr	r2, [pc, #76]	@ (800821c <TIM_Base_SetConfig+0x100>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d00b      	beq.n	80081ea <TIM_Base_SetConfig+0xce>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a14      	ldr	r2, [pc, #80]	@ (8008228 <TIM_Base_SetConfig+0x10c>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d007      	beq.n	80081ea <TIM_Base_SetConfig+0xce>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a13      	ldr	r2, [pc, #76]	@ (800822c <TIM_Base_SetConfig+0x110>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d003      	beq.n	80081ea <TIM_Base_SetConfig+0xce>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a12      	ldr	r2, [pc, #72]	@ (8008230 <TIM_Base_SetConfig+0x114>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d103      	bne.n	80081f2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	691a      	ldr	r2, [r3, #16]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	2201      	movs	r2, #1
 80081fe:	4013      	ands	r3, r2
 8008200:	2b01      	cmp	r3, #1
 8008202:	d106      	bne.n	8008212 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	2201      	movs	r2, #1
 800820a:	4393      	bics	r3, r2
 800820c:	001a      	movs	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	611a      	str	r2, [r3, #16]
  }
}
 8008212:	46c0      	nop			@ (mov r8, r8)
 8008214:	46bd      	mov	sp, r7
 8008216:	b004      	add	sp, #16
 8008218:	bd80      	pop	{r7, pc}
 800821a:	46c0      	nop			@ (mov r8, r8)
 800821c:	40012c00 	.word	0x40012c00
 8008220:	40000400 	.word	0x40000400
 8008224:	40002000 	.word	0x40002000
 8008228:	40014000 	.word	0x40014000
 800822c:	40014400 	.word	0x40014400
 8008230:	40014800 	.word	0x40014800
 8008234:	fffffcff 	.word	0xfffffcff

08008238 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b086      	sub	sp, #24
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6a1b      	ldr	r3, [r3, #32]
 8008248:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6a1b      	ldr	r3, [r3, #32]
 800824e:	2201      	movs	r2, #1
 8008250:	4393      	bics	r3, r2
 8008252:	001a      	movs	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	22f0      	movs	r2, #240	@ 0xf0
 8008262:	4393      	bics	r3, r2
 8008264:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	011b      	lsls	r3, r3, #4
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	4313      	orrs	r3, r2
 800826e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	220a      	movs	r2, #10
 8008274:	4393      	bics	r3, r2
 8008276:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008278:	697a      	ldr	r2, [r7, #20]
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	4313      	orrs	r3, r2
 800827e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	697a      	ldr	r2, [r7, #20]
 800828a:	621a      	str	r2, [r3, #32]
}
 800828c:	46c0      	nop			@ (mov r8, r8)
 800828e:	46bd      	mov	sp, r7
 8008290:	b006      	add	sp, #24
 8008292:	bd80      	pop	{r7, pc}

08008294 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6a1b      	ldr	r3, [r3, #32]
 80082a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	2210      	movs	r2, #16
 80082ac:	4393      	bics	r3, r2
 80082ae:	001a      	movs	r2, r3
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	4a0d      	ldr	r2, [pc, #52]	@ (80082f4 <TIM_TI2_ConfigInputStage+0x60>)
 80082be:	4013      	ands	r3, r2
 80082c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	031b      	lsls	r3, r3, #12
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	22a0      	movs	r2, #160	@ 0xa0
 80082d0:	4393      	bics	r3, r2
 80082d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	011b      	lsls	r3, r3, #4
 80082d8:	697a      	ldr	r2, [r7, #20]
 80082da:	4313      	orrs	r3, r2
 80082dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	697a      	ldr	r2, [r7, #20]
 80082e8:	621a      	str	r2, [r3, #32]
}
 80082ea:	46c0      	nop			@ (mov r8, r8)
 80082ec:	46bd      	mov	sp, r7
 80082ee:	b006      	add	sp, #24
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	46c0      	nop			@ (mov r8, r8)
 80082f4:	ffff0fff 	.word	0xffff0fff

080082f8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2270      	movs	r2, #112	@ 0x70
 800830c:	4393      	bics	r3, r2
 800830e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008310:	683a      	ldr	r2, [r7, #0]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	4313      	orrs	r3, r2
 8008316:	2207      	movs	r2, #7
 8008318:	4313      	orrs	r3, r2
 800831a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	609a      	str	r2, [r3, #8]
}
 8008322:	46c0      	nop			@ (mov r8, r8)
 8008324:	46bd      	mov	sp, r7
 8008326:	b004      	add	sp, #16
 8008328:	bd80      	pop	{r7, pc}
	...

0800832c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
 8008338:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	4a09      	ldr	r2, [pc, #36]	@ (8008368 <TIM_ETR_SetConfig+0x3c>)
 8008344:	4013      	ands	r3, r2
 8008346:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	021a      	lsls	r2, r3, #8
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	431a      	orrs	r2, r3
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	4313      	orrs	r3, r2
 8008354:	697a      	ldr	r2, [r7, #20]
 8008356:	4313      	orrs	r3, r2
 8008358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	697a      	ldr	r2, [r7, #20]
 800835e:	609a      	str	r2, [r3, #8]
}
 8008360:	46c0      	nop			@ (mov r8, r8)
 8008362:	46bd      	mov	sp, r7
 8008364:	b006      	add	sp, #24
 8008366:	bd80      	pop	{r7, pc}
 8008368:	ffff00ff 	.word	0xffff00ff

0800836c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	223c      	movs	r2, #60	@ 0x3c
 800837a:	5c9b      	ldrb	r3, [r3, r2]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d101      	bne.n	8008384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008380:	2302      	movs	r3, #2
 8008382:	e047      	b.n	8008414 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	223c      	movs	r2, #60	@ 0x3c
 8008388:	2101      	movs	r1, #1
 800838a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	223d      	movs	r2, #61	@ 0x3d
 8008390:	2102      	movs	r1, #2
 8008392:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2270      	movs	r2, #112	@ 0x70
 80083a8:	4393      	bics	r3, r2
 80083aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a16      	ldr	r2, [pc, #88]	@ (800841c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d00f      	beq.n	80083e8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	2380      	movs	r3, #128	@ 0x80
 80083ce:	05db      	lsls	r3, r3, #23
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d009      	beq.n	80083e8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a11      	ldr	r2, [pc, #68]	@ (8008420 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d004      	beq.n	80083e8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a10      	ldr	r2, [pc, #64]	@ (8008424 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d10c      	bne.n	8008402 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2280      	movs	r2, #128	@ 0x80
 80083ec:	4393      	bics	r3, r2
 80083ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	68ba      	ldr	r2, [r7, #8]
 8008400:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	223d      	movs	r2, #61	@ 0x3d
 8008406:	2101      	movs	r1, #1
 8008408:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	223c      	movs	r2, #60	@ 0x3c
 800840e:	2100      	movs	r1, #0
 8008410:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	0018      	movs	r0, r3
 8008416:	46bd      	mov	sp, r7
 8008418:	b004      	add	sp, #16
 800841a:	bd80      	pop	{r7, pc}
 800841c:	40012c00 	.word	0x40012c00
 8008420:	40000400 	.word	0x40000400
 8008424:	40014000 	.word	0x40014000

08008428 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008430:	46c0      	nop			@ (mov r8, r8)
 8008432:	46bd      	mov	sp, r7
 8008434:	b002      	add	sp, #8
 8008436:	bd80      	pop	{r7, pc}

08008438 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008440:	46c0      	nop			@ (mov r8, r8)
 8008442:	46bd      	mov	sp, r7
 8008444:	b002      	add	sp, #8
 8008446:	bd80      	pop	{r7, pc}

08008448 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d101      	bne.n	800845a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e053      	b.n	8008502 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800845e:	2b00      	cmp	r3, #0
 8008460:	d116      	bne.n	8008490 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2278      	movs	r2, #120	@ 0x78
 8008466:	2100      	movs	r1, #0
 8008468:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	0018      	movs	r0, r3
 800846e:	f000 fbeb 	bl	8008c48 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	22b0      	movs	r2, #176	@ 0xb0
 8008476:	589b      	ldr	r3, [r3, r2]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d103      	bne.n	8008484 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	21b0      	movs	r1, #176	@ 0xb0
 8008480:	4a22      	ldr	r2, [pc, #136]	@ (800850c <HAL_UART_Init+0xc4>)
 8008482:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	22b0      	movs	r2, #176	@ 0xb0
 8008488:	589b      	ldr	r3, [r3, r2]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	0010      	movs	r0, r2
 800848e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2224      	movs	r2, #36	@ 0x24
 8008494:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2101      	movs	r1, #1
 80084a2:	438a      	bics	r2, r1
 80084a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d003      	beq.n	80084b6 <HAL_UART_Init+0x6e>
  {
    UART_AdvFeatureConfig(huart);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	0018      	movs	r0, r3
 80084b2:	f000 fd95 	bl	8008fe0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	0018      	movs	r0, r3
 80084ba:	f000 fc09 	bl	8008cd0 <UART_SetConfig>
 80084be:	0003      	movs	r3, r0
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d101      	bne.n	80084c8 <HAL_UART_Init+0x80>
  {
    return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e01c      	b.n	8008502 <HAL_UART_Init+0xba>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	685a      	ldr	r2, [r3, #4]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	490f      	ldr	r1, [pc, #60]	@ (8008510 <HAL_UART_Init+0xc8>)
 80084d4:	400a      	ands	r2, r1
 80084d6:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	689a      	ldr	r2, [r3, #8]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	212a      	movs	r1, #42	@ 0x2a
 80084e4:	438a      	bics	r2, r1
 80084e6:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2101      	movs	r1, #1
 80084f4:	430a      	orrs	r2, r1
 80084f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	0018      	movs	r0, r3
 80084fc:	f000 fe24 	bl	8009148 <UART_CheckIdleState>
 8008500:	0003      	movs	r3, r0
}
 8008502:	0018      	movs	r0, r3
 8008504:	46bd      	mov	sp, r7
 8008506:	b002      	add	sp, #8
 8008508:	bd80      	pop	{r7, pc}
 800850a:	46c0      	nop			@ (mov r8, r8)
 800850c:	080032c1 	.word	0x080032c1
 8008510:	ffffb7ff 	.word	0xffffb7ff

08008514 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b088      	sub	sp, #32
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	1dbb      	adds	r3, r7, #6
 8008520:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008526:	2b20      	cmp	r3, #32
 8008528:	d15b      	bne.n	80085e2 <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d003      	beq.n	8008538 <HAL_UART_Transmit_IT+0x24>
 8008530:	1dbb      	adds	r3, r7, #6
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d101      	bne.n	800853c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e053      	b.n	80085e4 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	689a      	ldr	r2, [r3, #8]
 8008540:	2380      	movs	r3, #128	@ 0x80
 8008542:	015b      	lsls	r3, r3, #5
 8008544:	429a      	cmp	r2, r3
 8008546:	d109      	bne.n	800855c <HAL_UART_Transmit_IT+0x48>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d105      	bne.n	800855c <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	2201      	movs	r2, #1
 8008554:	4013      	ands	r3, r2
 8008556:	d001      	beq.n	800855c <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	e043      	b.n	80085e4 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	1dba      	adds	r2, r7, #6
 8008566:	2150      	movs	r1, #80	@ 0x50
 8008568:	8812      	ldrh	r2, [r2, #0]
 800856a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	1dba      	adds	r2, r7, #6
 8008570:	2152      	movs	r1, #82	@ 0x52
 8008572:	8812      	ldrh	r2, [r2, #0]
 8008574:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2284      	movs	r2, #132	@ 0x84
 8008580:	2100      	movs	r1, #0
 8008582:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2221      	movs	r2, #33	@ 0x21
 8008588:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	689a      	ldr	r2, [r3, #8]
 800858e:	2380      	movs	r3, #128	@ 0x80
 8008590:	015b      	lsls	r3, r3, #5
 8008592:	429a      	cmp	r2, r3
 8008594:	d107      	bne.n	80085a6 <HAL_UART_Transmit_IT+0x92>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d103      	bne.n	80085a6 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	4a12      	ldr	r2, [pc, #72]	@ (80085ec <HAL_UART_Transmit_IT+0xd8>)
 80085a2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80085a4:	e002      	b.n	80085ac <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	4a11      	ldr	r2, [pc, #68]	@ (80085f0 <HAL_UART_Transmit_IT+0xdc>)
 80085aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085ac:	f3ef 8310 	mrs	r3, PRIMASK
 80085b0:	613b      	str	r3, [r7, #16]
  return(result);
 80085b2:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80085b4:	61fb      	str	r3, [r7, #28]
 80085b6:	2301      	movs	r3, #1
 80085b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	f383 8810 	msr	PRIMASK, r3
}
 80085c0:	46c0      	nop			@ (mov r8, r8)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2180      	movs	r1, #128	@ 0x80
 80085ce:	430a      	orrs	r2, r1
 80085d0:	601a      	str	r2, [r3, #0]
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	f383 8810 	msr	PRIMASK, r3
}
 80085dc:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	e000      	b.n	80085e4 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80085e2:	2302      	movs	r3, #2
  }
}
 80085e4:	0018      	movs	r0, r3
 80085e6:	46bd      	mov	sp, r7
 80085e8:	b008      	add	sp, #32
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	080098ad 	.word	0x080098ad
 80085f0:	080097fb 	.word	0x080097fb

080085f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085f4:	b590      	push	{r4, r7, lr}
 80085f6:	b0ab      	sub	sp, #172	@ 0xac
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	69db      	ldr	r3, [r3, #28]
 8008602:	22a4      	movs	r2, #164	@ 0xa4
 8008604:	18b9      	adds	r1, r7, r2
 8008606:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	20a0      	movs	r0, #160	@ 0xa0
 8008610:	1839      	adds	r1, r7, r0
 8008612:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	219c      	movs	r1, #156	@ 0x9c
 800861c:	1879      	adds	r1, r7, r1
 800861e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008620:	0011      	movs	r1, r2
 8008622:	18bb      	adds	r3, r7, r2
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a9c      	ldr	r2, [pc, #624]	@ (8008898 <HAL_UART_IRQHandler+0x2a4>)
 8008628:	4013      	ands	r3, r2
 800862a:	2298      	movs	r2, #152	@ 0x98
 800862c:	18bc      	adds	r4, r7, r2
 800862e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8008630:	18bb      	adds	r3, r7, r2
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d114      	bne.n	8008662 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008638:	187b      	adds	r3, r7, r1
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2220      	movs	r2, #32
 800863e:	4013      	ands	r3, r2
 8008640:	d00f      	beq.n	8008662 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008642:	183b      	adds	r3, r7, r0
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2220      	movs	r2, #32
 8008648:	4013      	ands	r3, r2
 800864a:	d00a      	beq.n	8008662 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008650:	2b00      	cmp	r3, #0
 8008652:	d100      	bne.n	8008656 <HAL_UART_IRQHandler+0x62>
 8008654:	e2a8      	b.n	8008ba8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	0010      	movs	r0, r2
 800865e:	4798      	blx	r3
      }
      return;
 8008660:	e2a2      	b.n	8008ba8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008662:	2398      	movs	r3, #152	@ 0x98
 8008664:	18fb      	adds	r3, r7, r3
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d100      	bne.n	800866e <HAL_UART_IRQHandler+0x7a>
 800866c:	e11a      	b.n	80088a4 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800866e:	239c      	movs	r3, #156	@ 0x9c
 8008670:	18fb      	adds	r3, r7, r3
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2201      	movs	r2, #1
 8008676:	4013      	ands	r3, r2
 8008678:	d106      	bne.n	8008688 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800867a:	23a0      	movs	r3, #160	@ 0xa0
 800867c:	18fb      	adds	r3, r7, r3
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a86      	ldr	r2, [pc, #536]	@ (800889c <HAL_UART_IRQHandler+0x2a8>)
 8008682:	4013      	ands	r3, r2
 8008684:	d100      	bne.n	8008688 <HAL_UART_IRQHandler+0x94>
 8008686:	e10d      	b.n	80088a4 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008688:	23a4      	movs	r3, #164	@ 0xa4
 800868a:	18fb      	adds	r3, r7, r3
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2201      	movs	r2, #1
 8008690:	4013      	ands	r3, r2
 8008692:	d012      	beq.n	80086ba <HAL_UART_IRQHandler+0xc6>
 8008694:	23a0      	movs	r3, #160	@ 0xa0
 8008696:	18fb      	adds	r3, r7, r3
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	2380      	movs	r3, #128	@ 0x80
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	4013      	ands	r3, r2
 80086a0:	d00b      	beq.n	80086ba <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2201      	movs	r2, #1
 80086a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2284      	movs	r2, #132	@ 0x84
 80086ae:	589b      	ldr	r3, [r3, r2]
 80086b0:	2201      	movs	r2, #1
 80086b2:	431a      	orrs	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2184      	movs	r1, #132	@ 0x84
 80086b8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086ba:	23a4      	movs	r3, #164	@ 0xa4
 80086bc:	18fb      	adds	r3, r7, r3
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2202      	movs	r2, #2
 80086c2:	4013      	ands	r3, r2
 80086c4:	d011      	beq.n	80086ea <HAL_UART_IRQHandler+0xf6>
 80086c6:	239c      	movs	r3, #156	@ 0x9c
 80086c8:	18fb      	adds	r3, r7, r3
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2201      	movs	r2, #1
 80086ce:	4013      	ands	r3, r2
 80086d0:	d00b      	beq.n	80086ea <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2202      	movs	r2, #2
 80086d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2284      	movs	r2, #132	@ 0x84
 80086de:	589b      	ldr	r3, [r3, r2]
 80086e0:	2204      	movs	r2, #4
 80086e2:	431a      	orrs	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2184      	movs	r1, #132	@ 0x84
 80086e8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086ea:	23a4      	movs	r3, #164	@ 0xa4
 80086ec:	18fb      	adds	r3, r7, r3
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2204      	movs	r2, #4
 80086f2:	4013      	ands	r3, r2
 80086f4:	d011      	beq.n	800871a <HAL_UART_IRQHandler+0x126>
 80086f6:	239c      	movs	r3, #156	@ 0x9c
 80086f8:	18fb      	adds	r3, r7, r3
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2201      	movs	r2, #1
 80086fe:	4013      	ands	r3, r2
 8008700:	d00b      	beq.n	800871a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2204      	movs	r2, #4
 8008708:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2284      	movs	r2, #132	@ 0x84
 800870e:	589b      	ldr	r3, [r3, r2]
 8008710:	2202      	movs	r2, #2
 8008712:	431a      	orrs	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2184      	movs	r1, #132	@ 0x84
 8008718:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800871a:	23a4      	movs	r3, #164	@ 0xa4
 800871c:	18fb      	adds	r3, r7, r3
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2208      	movs	r2, #8
 8008722:	4013      	ands	r3, r2
 8008724:	d017      	beq.n	8008756 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008726:	23a0      	movs	r3, #160	@ 0xa0
 8008728:	18fb      	adds	r3, r7, r3
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2220      	movs	r2, #32
 800872e:	4013      	ands	r3, r2
 8008730:	d105      	bne.n	800873e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008732:	239c      	movs	r3, #156	@ 0x9c
 8008734:	18fb      	adds	r3, r7, r3
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2201      	movs	r2, #1
 800873a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800873c:	d00b      	beq.n	8008756 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2208      	movs	r2, #8
 8008744:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2284      	movs	r2, #132	@ 0x84
 800874a:	589b      	ldr	r3, [r3, r2]
 800874c:	2208      	movs	r2, #8
 800874e:	431a      	orrs	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2184      	movs	r1, #132	@ 0x84
 8008754:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008756:	23a4      	movs	r3, #164	@ 0xa4
 8008758:	18fb      	adds	r3, r7, r3
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	2380      	movs	r3, #128	@ 0x80
 800875e:	011b      	lsls	r3, r3, #4
 8008760:	4013      	ands	r3, r2
 8008762:	d013      	beq.n	800878c <HAL_UART_IRQHandler+0x198>
 8008764:	23a0      	movs	r3, #160	@ 0xa0
 8008766:	18fb      	adds	r3, r7, r3
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	2380      	movs	r3, #128	@ 0x80
 800876c:	04db      	lsls	r3, r3, #19
 800876e:	4013      	ands	r3, r2
 8008770:	d00c      	beq.n	800878c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2280      	movs	r2, #128	@ 0x80
 8008778:	0112      	lsls	r2, r2, #4
 800877a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2284      	movs	r2, #132	@ 0x84
 8008780:	589b      	ldr	r3, [r3, r2]
 8008782:	2220      	movs	r2, #32
 8008784:	431a      	orrs	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2184      	movs	r1, #132	@ 0x84
 800878a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2284      	movs	r2, #132	@ 0x84
 8008790:	589b      	ldr	r3, [r3, r2]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d100      	bne.n	8008798 <HAL_UART_IRQHandler+0x1a4>
 8008796:	e209      	b.n	8008bac <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008798:	23a4      	movs	r3, #164	@ 0xa4
 800879a:	18fb      	adds	r3, r7, r3
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2220      	movs	r2, #32
 80087a0:	4013      	ands	r3, r2
 80087a2:	d00e      	beq.n	80087c2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80087a4:	23a0      	movs	r3, #160	@ 0xa0
 80087a6:	18fb      	adds	r3, r7, r3
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2220      	movs	r2, #32
 80087ac:	4013      	ands	r3, r2
 80087ae:	d008      	beq.n	80087c2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d004      	beq.n	80087c2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	0010      	movs	r0, r2
 80087c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2284      	movs	r2, #132	@ 0x84
 80087c6:	589b      	ldr	r3, [r3, r2]
 80087c8:	2194      	movs	r1, #148	@ 0x94
 80087ca:	187a      	adds	r2, r7, r1
 80087cc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	2240      	movs	r2, #64	@ 0x40
 80087d6:	4013      	ands	r3, r2
 80087d8:	2b40      	cmp	r3, #64	@ 0x40
 80087da:	d004      	beq.n	80087e6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80087dc:	187b      	adds	r3, r7, r1
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2228      	movs	r2, #40	@ 0x28
 80087e2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80087e4:	d04b      	beq.n	800887e <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	0018      	movs	r0, r3
 80087ea:	f000 fe89 	bl	8009500 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	2240      	movs	r2, #64	@ 0x40
 80087f6:	4013      	ands	r3, r2
 80087f8:	2b40      	cmp	r3, #64	@ 0x40
 80087fa:	d139      	bne.n	8008870 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087fc:	f3ef 8310 	mrs	r3, PRIMASK
 8008800:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8008802:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008804:	2090      	movs	r0, #144	@ 0x90
 8008806:	183a      	adds	r2, r7, r0
 8008808:	6013      	str	r3, [r2, #0]
 800880a:	2301      	movs	r3, #1
 800880c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800880e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008810:	f383 8810 	msr	PRIMASK, r3
}
 8008814:	46c0      	nop			@ (mov r8, r8)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	689a      	ldr	r2, [r3, #8]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2140      	movs	r1, #64	@ 0x40
 8008822:	438a      	bics	r2, r1
 8008824:	609a      	str	r2, [r3, #8]
 8008826:	183b      	adds	r3, r7, r0
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800882c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800882e:	f383 8810 	msr	PRIMASK, r3
}
 8008832:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008838:	2b00      	cmp	r3, #0
 800883a:	d012      	beq.n	8008862 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008840:	4a17      	ldr	r2, [pc, #92]	@ (80088a0 <HAL_UART_IRQHandler+0x2ac>)
 8008842:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008848:	0018      	movs	r0, r3
 800884a:	f7fb fbd1 	bl	8003ff0 <HAL_DMA_Abort_IT>
 800884e:	1e03      	subs	r3, r0, #0
 8008850:	d020      	beq.n	8008894 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008856:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800885c:	0018      	movs	r0, r3
 800885e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008860:	e018      	b.n	8008894 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2298      	movs	r2, #152	@ 0x98
 8008866:	589b      	ldr	r3, [r3, r2]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	0010      	movs	r0, r2
 800886c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800886e:	e011      	b.n	8008894 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2298      	movs	r2, #152	@ 0x98
 8008874:	589b      	ldr	r3, [r3, r2]
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	0010      	movs	r0, r2
 800887a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800887c:	e00a      	b.n	8008894 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2298      	movs	r2, #152	@ 0x98
 8008882:	589b      	ldr	r3, [r3, r2]
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	0010      	movs	r0, r2
 8008888:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2284      	movs	r2, #132	@ 0x84
 800888e:	2100      	movs	r1, #0
 8008890:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008892:	e18b      	b.n	8008bac <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008894:	46c0      	nop			@ (mov r8, r8)
    return;
 8008896:	e189      	b.n	8008bac <HAL_UART_IRQHandler+0x5b8>
 8008898:	0000080f 	.word	0x0000080f
 800889c:	04000120 	.word	0x04000120
 80088a0:	080097c9 	.word	0x080097c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d000      	beq.n	80088ae <HAL_UART_IRQHandler+0x2ba>
 80088ac:	e13b      	b.n	8008b26 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80088ae:	23a4      	movs	r3, #164	@ 0xa4
 80088b0:	18fb      	adds	r3, r7, r3
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2210      	movs	r2, #16
 80088b6:	4013      	ands	r3, r2
 80088b8:	d100      	bne.n	80088bc <HAL_UART_IRQHandler+0x2c8>
 80088ba:	e134      	b.n	8008b26 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80088bc:	23a0      	movs	r3, #160	@ 0xa0
 80088be:	18fb      	adds	r3, r7, r3
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2210      	movs	r2, #16
 80088c4:	4013      	ands	r3, r2
 80088c6:	d100      	bne.n	80088ca <HAL_UART_IRQHandler+0x2d6>
 80088c8:	e12d      	b.n	8008b26 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2210      	movs	r2, #16
 80088d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	2240      	movs	r2, #64	@ 0x40
 80088da:	4013      	ands	r3, r2
 80088dc:	2b40      	cmp	r3, #64	@ 0x40
 80088de:	d000      	beq.n	80088e2 <HAL_UART_IRQHandler+0x2ee>
 80088e0:	e0a0      	b.n	8008a24 <HAL_UART_IRQHandler+0x430>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	685a      	ldr	r2, [r3, #4]
 80088ea:	217e      	movs	r1, #126	@ 0x7e
 80088ec:	187b      	adds	r3, r7, r1
 80088ee:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80088f0:	187b      	adds	r3, r7, r1
 80088f2:	881b      	ldrh	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d100      	bne.n	80088fa <HAL_UART_IRQHandler+0x306>
 80088f8:	e15a      	b.n	8008bb0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2258      	movs	r2, #88	@ 0x58
 80088fe:	5a9b      	ldrh	r3, [r3, r2]
 8008900:	187a      	adds	r2, r7, r1
 8008902:	8812      	ldrh	r2, [r2, #0]
 8008904:	429a      	cmp	r2, r3
 8008906:	d300      	bcc.n	800890a <HAL_UART_IRQHandler+0x316>
 8008908:	e152      	b.n	8008bb0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	187a      	adds	r2, r7, r1
 800890e:	215a      	movs	r1, #90	@ 0x5a
 8008910:	8812      	ldrh	r2, [r2, #0]
 8008912:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	2b20      	cmp	r3, #32
 800891c:	d06f      	beq.n	80089fe <HAL_UART_IRQHandler+0x40a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800891e:	f3ef 8310 	mrs	r3, PRIMASK
 8008922:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8008924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008926:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008928:	2301      	movs	r3, #1
 800892a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800892c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800892e:	f383 8810 	msr	PRIMASK, r3
}
 8008932:	46c0      	nop			@ (mov r8, r8)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	49a0      	ldr	r1, [pc, #640]	@ (8008bc0 <HAL_UART_IRQHandler+0x5cc>)
 8008940:	400a      	ands	r2, r1
 8008942:	601a      	str	r2, [r3, #0]
 8008944:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008946:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800894a:	f383 8810 	msr	PRIMASK, r3
}
 800894e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008950:	f3ef 8310 	mrs	r3, PRIMASK
 8008954:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8008956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008958:	677b      	str	r3, [r7, #116]	@ 0x74
 800895a:	2301      	movs	r3, #1
 800895c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800895e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008960:	f383 8810 	msr	PRIMASK, r3
}
 8008964:	46c0      	nop			@ (mov r8, r8)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	689a      	ldr	r2, [r3, #8]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2101      	movs	r1, #1
 8008972:	438a      	bics	r2, r1
 8008974:	609a      	str	r2, [r3, #8]
 8008976:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008978:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800897a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800897c:	f383 8810 	msr	PRIMASK, r3
}
 8008980:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008982:	f3ef 8310 	mrs	r3, PRIMASK
 8008986:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8008988:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800898a:	673b      	str	r3, [r7, #112]	@ 0x70
 800898c:	2301      	movs	r3, #1
 800898e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008992:	f383 8810 	msr	PRIMASK, r3
}
 8008996:	46c0      	nop			@ (mov r8, r8)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	689a      	ldr	r2, [r3, #8]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2140      	movs	r1, #64	@ 0x40
 80089a4:	438a      	bics	r2, r1
 80089a6:	609a      	str	r2, [r3, #8]
 80089a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80089aa:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089ae:	f383 8810 	msr	PRIMASK, r3
}
 80089b2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2280      	movs	r2, #128	@ 0x80
 80089b8:	2120      	movs	r1, #32
 80089ba:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089c2:	f3ef 8310 	mrs	r3, PRIMASK
 80089c6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80089c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80089cc:	2301      	movs	r3, #1
 80089ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80089d2:	f383 8810 	msr	PRIMASK, r3
}
 80089d6:	46c0      	nop			@ (mov r8, r8)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2110      	movs	r1, #16
 80089e4:	438a      	bics	r2, r1
 80089e6:	601a      	str	r2, [r3, #0]
 80089e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089ee:	f383 8810 	msr	PRIMASK, r3
}
 80089f2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089f8:	0018      	movs	r0, r3
 80089fa:	f7fb fac1 	bl	8003f80 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2202      	movs	r2, #2
 8008a02:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	22ac      	movs	r2, #172	@ 0xac
 8008a08:	589b      	ldr	r3, [r3, r2]
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	2158      	movs	r1, #88	@ 0x58
 8008a0e:	5a51      	ldrh	r1, [r2, r1]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	205a      	movs	r0, #90	@ 0x5a
 8008a14:	5a12      	ldrh	r2, [r2, r0]
 8008a16:	b292      	uxth	r2, r2
 8008a18:	1a8a      	subs	r2, r1, r2
 8008a1a:	b291      	uxth	r1, r2
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	0010      	movs	r0, r2
 8008a20:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a22:	e0c5      	b.n	8008bb0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2258      	movs	r2, #88	@ 0x58
 8008a28:	5a99      	ldrh	r1, [r3, r2]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	225a      	movs	r2, #90	@ 0x5a
 8008a2e:	5a9b      	ldrh	r3, [r3, r2]
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	208e      	movs	r0, #142	@ 0x8e
 8008a34:	183b      	adds	r3, r7, r0
 8008a36:	1a8a      	subs	r2, r1, r2
 8008a38:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	225a      	movs	r2, #90	@ 0x5a
 8008a3e:	5a9b      	ldrh	r3, [r3, r2]
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d100      	bne.n	8008a48 <HAL_UART_IRQHandler+0x454>
 8008a46:	e0b5      	b.n	8008bb4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8008a48:	183b      	adds	r3, r7, r0
 8008a4a:	881b      	ldrh	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d100      	bne.n	8008a52 <HAL_UART_IRQHandler+0x45e>
 8008a50:	e0b0      	b.n	8008bb4 <HAL_UART_IRQHandler+0x5c0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a52:	f3ef 8310 	mrs	r3, PRIMASK
 8008a56:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a58:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a5a:	2488      	movs	r4, #136	@ 0x88
 8008a5c:	193a      	adds	r2, r7, r4
 8008a5e:	6013      	str	r3, [r2, #0]
 8008a60:	2301      	movs	r3, #1
 8008a62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	f383 8810 	msr	PRIMASK, r3
}
 8008a6a:	46c0      	nop			@ (mov r8, r8)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4953      	ldr	r1, [pc, #332]	@ (8008bc4 <HAL_UART_IRQHandler+0x5d0>)
 8008a78:	400a      	ands	r2, r1
 8008a7a:	601a      	str	r2, [r3, #0]
 8008a7c:	193b      	adds	r3, r7, r4
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	f383 8810 	msr	PRIMASK, r3
}
 8008a88:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a8a:	f3ef 8310 	mrs	r3, PRIMASK
 8008a8e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a90:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a92:	2484      	movs	r4, #132	@ 0x84
 8008a94:	193a      	adds	r2, r7, r4
 8008a96:	6013      	str	r3, [r2, #0]
 8008a98:	2301      	movs	r3, #1
 8008a9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	f383 8810 	msr	PRIMASK, r3
}
 8008aa2:	46c0      	nop			@ (mov r8, r8)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	689a      	ldr	r2, [r3, #8]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2101      	movs	r1, #1
 8008ab0:	438a      	bics	r2, r1
 8008ab2:	609a      	str	r2, [r3, #8]
 8008ab4:	193b      	adds	r3, r7, r4
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008aba:	6a3b      	ldr	r3, [r7, #32]
 8008abc:	f383 8810 	msr	PRIMASK, r3
}
 8008ac0:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2280      	movs	r2, #128	@ 0x80
 8008ac6:	2120      	movs	r1, #32
 8008ac8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8008ada:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ade:	2480      	movs	r4, #128	@ 0x80
 8008ae0:	193a      	adds	r2, r7, r4
 8008ae2:	6013      	str	r3, [r2, #0]
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aea:	f383 8810 	msr	PRIMASK, r3
}
 8008aee:	46c0      	nop			@ (mov r8, r8)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2110      	movs	r1, #16
 8008afc:	438a      	bics	r2, r1
 8008afe:	601a      	str	r2, [r3, #0]
 8008b00:	193b      	adds	r3, r7, r4
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b08:	f383 8810 	msr	PRIMASK, r3
}
 8008b0c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2202      	movs	r2, #2
 8008b12:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	22ac      	movs	r2, #172	@ 0xac
 8008b18:	589b      	ldr	r3, [r3, r2]
 8008b1a:	183a      	adds	r2, r7, r0
 8008b1c:	8811      	ldrh	r1, [r2, #0]
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	0010      	movs	r0, r2
 8008b22:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b24:	e046      	b.n	8008bb4 <HAL_UART_IRQHandler+0x5c0>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008b26:	23a4      	movs	r3, #164	@ 0xa4
 8008b28:	18fb      	adds	r3, r7, r3
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	2380      	movs	r3, #128	@ 0x80
 8008b2e:	035b      	lsls	r3, r3, #13
 8008b30:	4013      	ands	r3, r2
 8008b32:	d012      	beq.n	8008b5a <HAL_UART_IRQHandler+0x566>
 8008b34:	239c      	movs	r3, #156	@ 0x9c
 8008b36:	18fb      	adds	r3, r7, r3
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	2380      	movs	r3, #128	@ 0x80
 8008b3c:	03db      	lsls	r3, r3, #15
 8008b3e:	4013      	ands	r3, r2
 8008b40:	d00b      	beq.n	8008b5a <HAL_UART_IRQHandler+0x566>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2280      	movs	r2, #128	@ 0x80
 8008b48:	0352      	lsls	r2, r2, #13
 8008b4a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	22a8      	movs	r2, #168	@ 0xa8
 8008b50:	589b      	ldr	r3, [r3, r2]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	0010      	movs	r0, r2
 8008b56:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b58:	e02f      	b.n	8008bba <HAL_UART_IRQHandler+0x5c6>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008b5a:	23a4      	movs	r3, #164	@ 0xa4
 8008b5c:	18fb      	adds	r3, r7, r3
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2280      	movs	r2, #128	@ 0x80
 8008b62:	4013      	ands	r3, r2
 8008b64:	d00f      	beq.n	8008b86 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008b66:	23a0      	movs	r3, #160	@ 0xa0
 8008b68:	18fb      	adds	r3, r7, r3
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2280      	movs	r2, #128	@ 0x80
 8008b6e:	4013      	ands	r3, r2
 8008b70:	d009      	beq.n	8008b86 <HAL_UART_IRQHandler+0x592>
  {
    if (huart->TxISR != NULL)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d01e      	beq.n	8008bb8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	0010      	movs	r0, r2
 8008b82:	4798      	blx	r3
    }
    return;
 8008b84:	e018      	b.n	8008bb8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008b86:	23a4      	movs	r3, #164	@ 0xa4
 8008b88:	18fb      	adds	r3, r7, r3
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2240      	movs	r2, #64	@ 0x40
 8008b8e:	4013      	ands	r3, r2
 8008b90:	d013      	beq.n	8008bba <HAL_UART_IRQHandler+0x5c6>
 8008b92:	23a0      	movs	r3, #160	@ 0xa0
 8008b94:	18fb      	adds	r3, r7, r3
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2240      	movs	r2, #64	@ 0x40
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	d00d      	beq.n	8008bba <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	0018      	movs	r0, r3
 8008ba2:	f000 fee1 	bl	8009968 <UART_EndTransmit_IT>
    return;
 8008ba6:	e008      	b.n	8008bba <HAL_UART_IRQHandler+0x5c6>
      return;
 8008ba8:	46c0      	nop			@ (mov r8, r8)
 8008baa:	e006      	b.n	8008bba <HAL_UART_IRQHandler+0x5c6>
    return;
 8008bac:	46c0      	nop			@ (mov r8, r8)
 8008bae:	e004      	b.n	8008bba <HAL_UART_IRQHandler+0x5c6>
      return;
 8008bb0:	46c0      	nop			@ (mov r8, r8)
 8008bb2:	e002      	b.n	8008bba <HAL_UART_IRQHandler+0x5c6>
      return;
 8008bb4:	46c0      	nop			@ (mov r8, r8)
 8008bb6:	e000      	b.n	8008bba <HAL_UART_IRQHandler+0x5c6>
    return;
 8008bb8:	46c0      	nop			@ (mov r8, r8)
  }

}
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	b02b      	add	sp, #172	@ 0xac
 8008bbe:	bd90      	pop	{r4, r7, pc}
 8008bc0:	fffffeff 	.word	0xfffffeff
 8008bc4:	fffffedf 	.word	0xfffffedf

08008bc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008bd0:	46c0      	nop			@ (mov r8, r8)
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	b002      	add	sp, #8
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008be0:	46c0      	nop			@ (mov r8, r8)
 8008be2:	46bd      	mov	sp, r7
 8008be4:	b002      	add	sp, #8
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008bf0:	46c0      	nop			@ (mov r8, r8)
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	b002      	add	sp, #8
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008c00:	46c0      	nop			@ (mov r8, r8)
 8008c02:	46bd      	mov	sp, r7
 8008c04:	b002      	add	sp, #8
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008c10:	46c0      	nop			@ (mov r8, r8)
 8008c12:	46bd      	mov	sp, r7
 8008c14:	b002      	add	sp, #8
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008c20:	46c0      	nop			@ (mov r8, r8)
 8008c22:	46bd      	mov	sp, r7
 8008c24:	b002      	add	sp, #8
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008c30:	46c0      	nop			@ (mov r8, r8)
 8008c32:	46bd      	mov	sp, r7
 8008c34:	b002      	add	sp, #8
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008c40:	46c0      	nop			@ (mov r8, r8)
 8008c42:	46bd      	mov	sp, r7
 8008c44:	b002      	add	sp, #8
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2188      	movs	r1, #136	@ 0x88
 8008c54:	4a14      	ldr	r2, [pc, #80]	@ (8008ca8 <UART_InitCallbacksToDefault+0x60>)
 8008c56:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	218c      	movs	r1, #140	@ 0x8c
 8008c5c:	4a13      	ldr	r2, [pc, #76]	@ (8008cac <UART_InitCallbacksToDefault+0x64>)
 8008c5e:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2190      	movs	r1, #144	@ 0x90
 8008c64:	4a12      	ldr	r2, [pc, #72]	@ (8008cb0 <UART_InitCallbacksToDefault+0x68>)
 8008c66:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2194      	movs	r1, #148	@ 0x94
 8008c6c:	4a11      	ldr	r2, [pc, #68]	@ (8008cb4 <UART_InitCallbacksToDefault+0x6c>)
 8008c6e:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2198      	movs	r1, #152	@ 0x98
 8008c74:	4a10      	ldr	r2, [pc, #64]	@ (8008cb8 <UART_InitCallbacksToDefault+0x70>)
 8008c76:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	219c      	movs	r1, #156	@ 0x9c
 8008c7c:	4a0f      	ldr	r2, [pc, #60]	@ (8008cbc <UART_InitCallbacksToDefault+0x74>)
 8008c7e:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	21a0      	movs	r1, #160	@ 0xa0
 8008c84:	4a0e      	ldr	r2, [pc, #56]	@ (8008cc0 <UART_InitCallbacksToDefault+0x78>)
 8008c86:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	21a4      	movs	r1, #164	@ 0xa4
 8008c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8008cc4 <UART_InitCallbacksToDefault+0x7c>)
 8008c8e:	505a      	str	r2, [r3, r1]
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	21a8      	movs	r1, #168	@ 0xa8
 8008c94:	4a0c      	ldr	r2, [pc, #48]	@ (8008cc8 <UART_InitCallbacksToDefault+0x80>)
 8008c96:	505a      	str	r2, [r3, r1]
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	21ac      	movs	r1, #172	@ 0xac
 8008c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8008ccc <UART_InitCallbacksToDefault+0x84>)
 8008c9e:	505a      	str	r2, [r3, r1]

}
 8008ca0:	46c0      	nop			@ (mov r8, r8)
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	b002      	add	sp, #8
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	08008bd9 	.word	0x08008bd9
 8008cac:	08008bc9 	.word	0x08008bc9
 8008cb0:	08008bf9 	.word	0x08008bf9
 8008cb4:	08008be9 	.word	0x08008be9
 8008cb8:	08008c09 	.word	0x08008c09
 8008cbc:	08008c19 	.word	0x08008c19
 8008cc0:	08008c29 	.word	0x08008c29
 8008cc4:	08008c39 	.word	0x08008c39
 8008cc8:	080099c3 	.word	0x080099c3
 8008ccc:	08002f69 	.word	0x08002f69

08008cd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b088      	sub	sp, #32
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008cd8:	231e      	movs	r3, #30
 8008cda:	18fb      	adds	r3, r7, r3
 8008cdc:	2200      	movs	r2, #0
 8008cde:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	689a      	ldr	r2, [r3, #8]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	431a      	orrs	r2, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	695b      	ldr	r3, [r3, #20]
 8008cee:	431a      	orrs	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	69db      	ldr	r3, [r3, #28]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4aaf      	ldr	r2, [pc, #700]	@ (8008fbc <UART_SetConfig+0x2ec>)
 8008d00:	4013      	ands	r3, r2
 8008d02:	0019      	movs	r1, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	697a      	ldr	r2, [r7, #20]
 8008d0a:	430a      	orrs	r2, r1
 8008d0c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	4aaa      	ldr	r2, [pc, #680]	@ (8008fc0 <UART_SetConfig+0x2f0>)
 8008d16:	4013      	ands	r3, r2
 8008d18:	0019      	movs	r1, r3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	68da      	ldr	r2, [r3, #12]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	430a      	orrs	r2, r1
 8008d24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a1b      	ldr	r3, [r3, #32]
 8008d30:	697a      	ldr	r2, [r7, #20]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	4aa1      	ldr	r2, [pc, #644]	@ (8008fc4 <UART_SetConfig+0x2f4>)
 8008d3e:	4013      	ands	r3, r2
 8008d40:	0019      	movs	r1, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	697a      	ldr	r2, [r7, #20]
 8008d48:	430a      	orrs	r2, r1
 8008d4a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a9d      	ldr	r2, [pc, #628]	@ (8008fc8 <UART_SetConfig+0x2f8>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d127      	bne.n	8008da6 <UART_SetConfig+0xd6>
 8008d56:	4b9d      	ldr	r3, [pc, #628]	@ (8008fcc <UART_SetConfig+0x2fc>)
 8008d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d5a:	2203      	movs	r2, #3
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	2b03      	cmp	r3, #3
 8008d60:	d00d      	beq.n	8008d7e <UART_SetConfig+0xae>
 8008d62:	d81b      	bhi.n	8008d9c <UART_SetConfig+0xcc>
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d014      	beq.n	8008d92 <UART_SetConfig+0xc2>
 8008d68:	d818      	bhi.n	8008d9c <UART_SetConfig+0xcc>
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d002      	beq.n	8008d74 <UART_SetConfig+0xa4>
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d00a      	beq.n	8008d88 <UART_SetConfig+0xb8>
 8008d72:	e013      	b.n	8008d9c <UART_SetConfig+0xcc>
 8008d74:	231f      	movs	r3, #31
 8008d76:	18fb      	adds	r3, r7, r3
 8008d78:	2200      	movs	r2, #0
 8008d7a:	701a      	strb	r2, [r3, #0]
 8008d7c:	e065      	b.n	8008e4a <UART_SetConfig+0x17a>
 8008d7e:	231f      	movs	r3, #31
 8008d80:	18fb      	adds	r3, r7, r3
 8008d82:	2202      	movs	r2, #2
 8008d84:	701a      	strb	r2, [r3, #0]
 8008d86:	e060      	b.n	8008e4a <UART_SetConfig+0x17a>
 8008d88:	231f      	movs	r3, #31
 8008d8a:	18fb      	adds	r3, r7, r3
 8008d8c:	2204      	movs	r2, #4
 8008d8e:	701a      	strb	r2, [r3, #0]
 8008d90:	e05b      	b.n	8008e4a <UART_SetConfig+0x17a>
 8008d92:	231f      	movs	r3, #31
 8008d94:	18fb      	adds	r3, r7, r3
 8008d96:	2208      	movs	r2, #8
 8008d98:	701a      	strb	r2, [r3, #0]
 8008d9a:	e056      	b.n	8008e4a <UART_SetConfig+0x17a>
 8008d9c:	231f      	movs	r3, #31
 8008d9e:	18fb      	adds	r3, r7, r3
 8008da0:	2210      	movs	r2, #16
 8008da2:	701a      	strb	r2, [r3, #0]
 8008da4:	e051      	b.n	8008e4a <UART_SetConfig+0x17a>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a89      	ldr	r2, [pc, #548]	@ (8008fd0 <UART_SetConfig+0x300>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d134      	bne.n	8008e1a <UART_SetConfig+0x14a>
 8008db0:	4b86      	ldr	r3, [pc, #536]	@ (8008fcc <UART_SetConfig+0x2fc>)
 8008db2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008db4:	23c0      	movs	r3, #192	@ 0xc0
 8008db6:	029b      	lsls	r3, r3, #10
 8008db8:	4013      	ands	r3, r2
 8008dba:	22c0      	movs	r2, #192	@ 0xc0
 8008dbc:	0292      	lsls	r2, r2, #10
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d017      	beq.n	8008df2 <UART_SetConfig+0x122>
 8008dc2:	22c0      	movs	r2, #192	@ 0xc0
 8008dc4:	0292      	lsls	r2, r2, #10
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d822      	bhi.n	8008e10 <UART_SetConfig+0x140>
 8008dca:	2280      	movs	r2, #128	@ 0x80
 8008dcc:	0292      	lsls	r2, r2, #10
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d019      	beq.n	8008e06 <UART_SetConfig+0x136>
 8008dd2:	2280      	movs	r2, #128	@ 0x80
 8008dd4:	0292      	lsls	r2, r2, #10
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d81a      	bhi.n	8008e10 <UART_SetConfig+0x140>
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d004      	beq.n	8008de8 <UART_SetConfig+0x118>
 8008dde:	2280      	movs	r2, #128	@ 0x80
 8008de0:	0252      	lsls	r2, r2, #9
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d00a      	beq.n	8008dfc <UART_SetConfig+0x12c>
 8008de6:	e013      	b.n	8008e10 <UART_SetConfig+0x140>
 8008de8:	231f      	movs	r3, #31
 8008dea:	18fb      	adds	r3, r7, r3
 8008dec:	2200      	movs	r2, #0
 8008dee:	701a      	strb	r2, [r3, #0]
 8008df0:	e02b      	b.n	8008e4a <UART_SetConfig+0x17a>
 8008df2:	231f      	movs	r3, #31
 8008df4:	18fb      	adds	r3, r7, r3
 8008df6:	2202      	movs	r2, #2
 8008df8:	701a      	strb	r2, [r3, #0]
 8008dfa:	e026      	b.n	8008e4a <UART_SetConfig+0x17a>
 8008dfc:	231f      	movs	r3, #31
 8008dfe:	18fb      	adds	r3, r7, r3
 8008e00:	2204      	movs	r2, #4
 8008e02:	701a      	strb	r2, [r3, #0]
 8008e04:	e021      	b.n	8008e4a <UART_SetConfig+0x17a>
 8008e06:	231f      	movs	r3, #31
 8008e08:	18fb      	adds	r3, r7, r3
 8008e0a:	2208      	movs	r2, #8
 8008e0c:	701a      	strb	r2, [r3, #0]
 8008e0e:	e01c      	b.n	8008e4a <UART_SetConfig+0x17a>
 8008e10:	231f      	movs	r3, #31
 8008e12:	18fb      	adds	r3, r7, r3
 8008e14:	2210      	movs	r2, #16
 8008e16:	701a      	strb	r2, [r3, #0]
 8008e18:	e017      	b.n	8008e4a <UART_SetConfig+0x17a>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a6d      	ldr	r2, [pc, #436]	@ (8008fd4 <UART_SetConfig+0x304>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d104      	bne.n	8008e2e <UART_SetConfig+0x15e>
 8008e24:	231f      	movs	r3, #31
 8008e26:	18fb      	adds	r3, r7, r3
 8008e28:	2200      	movs	r2, #0
 8008e2a:	701a      	strb	r2, [r3, #0]
 8008e2c:	e00d      	b.n	8008e4a <UART_SetConfig+0x17a>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a69      	ldr	r2, [pc, #420]	@ (8008fd8 <UART_SetConfig+0x308>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d104      	bne.n	8008e42 <UART_SetConfig+0x172>
 8008e38:	231f      	movs	r3, #31
 8008e3a:	18fb      	adds	r3, r7, r3
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	701a      	strb	r2, [r3, #0]
 8008e40:	e003      	b.n	8008e4a <UART_SetConfig+0x17a>
 8008e42:	231f      	movs	r3, #31
 8008e44:	18fb      	adds	r3, r7, r3
 8008e46:	2210      	movs	r2, #16
 8008e48:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	69da      	ldr	r2, [r3, #28]
 8008e4e:	2380      	movs	r3, #128	@ 0x80
 8008e50:	021b      	lsls	r3, r3, #8
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d15c      	bne.n	8008f10 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8008e56:	231f      	movs	r3, #31
 8008e58:	18fb      	adds	r3, r7, r3
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	2b08      	cmp	r3, #8
 8008e5e:	d015      	beq.n	8008e8c <UART_SetConfig+0x1bc>
 8008e60:	dc18      	bgt.n	8008e94 <UART_SetConfig+0x1c4>
 8008e62:	2b04      	cmp	r3, #4
 8008e64:	d00d      	beq.n	8008e82 <UART_SetConfig+0x1b2>
 8008e66:	dc15      	bgt.n	8008e94 <UART_SetConfig+0x1c4>
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d002      	beq.n	8008e72 <UART_SetConfig+0x1a2>
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d005      	beq.n	8008e7c <UART_SetConfig+0x1ac>
 8008e70:	e010      	b.n	8008e94 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e72:	f7fd fed9 	bl	8006c28 <HAL_RCC_GetPCLK1Freq>
 8008e76:	0003      	movs	r3, r0
 8008e78:	61bb      	str	r3, [r7, #24]
        break;
 8008e7a:	e012      	b.n	8008ea2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e7c:	4b57      	ldr	r3, [pc, #348]	@ (8008fdc <UART_SetConfig+0x30c>)
 8008e7e:	61bb      	str	r3, [r7, #24]
        break;
 8008e80:	e00f      	b.n	8008ea2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e82:	f7fd fe55 	bl	8006b30 <HAL_RCC_GetSysClockFreq>
 8008e86:	0003      	movs	r3, r0
 8008e88:	61bb      	str	r3, [r7, #24]
        break;
 8008e8a:	e00a      	b.n	8008ea2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e8c:	2380      	movs	r3, #128	@ 0x80
 8008e8e:	021b      	lsls	r3, r3, #8
 8008e90:	61bb      	str	r3, [r7, #24]
        break;
 8008e92:	e006      	b.n	8008ea2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8008e94:	2300      	movs	r3, #0
 8008e96:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008e98:	231e      	movs	r3, #30
 8008e9a:	18fb      	adds	r3, r7, r3
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	701a      	strb	r2, [r3, #0]
        break;
 8008ea0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d100      	bne.n	8008eaa <UART_SetConfig+0x1da>
 8008ea8:	e07a      	b.n	8008fa0 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	005a      	lsls	r2, r3, #1
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	085b      	lsrs	r3, r3, #1
 8008eb4:	18d2      	adds	r2, r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	0019      	movs	r1, r3
 8008ebc:	0010      	movs	r0, r2
 8008ebe:	f7f7 f93f 	bl	8000140 <__udivsi3>
 8008ec2:	0003      	movs	r3, r0
 8008ec4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	2b0f      	cmp	r3, #15
 8008eca:	d91c      	bls.n	8008f06 <UART_SetConfig+0x236>
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	2380      	movs	r3, #128	@ 0x80
 8008ed0:	025b      	lsls	r3, r3, #9
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d217      	bcs.n	8008f06 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	200e      	movs	r0, #14
 8008edc:	183b      	adds	r3, r7, r0
 8008ede:	210f      	movs	r1, #15
 8008ee0:	438a      	bics	r2, r1
 8008ee2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	085b      	lsrs	r3, r3, #1
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	2207      	movs	r2, #7
 8008eec:	4013      	ands	r3, r2
 8008eee:	b299      	uxth	r1, r3
 8008ef0:	183b      	adds	r3, r7, r0
 8008ef2:	183a      	adds	r2, r7, r0
 8008ef4:	8812      	ldrh	r2, [r2, #0]
 8008ef6:	430a      	orrs	r2, r1
 8008ef8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	183a      	adds	r2, r7, r0
 8008f00:	8812      	ldrh	r2, [r2, #0]
 8008f02:	60da      	str	r2, [r3, #12]
 8008f04:	e04c      	b.n	8008fa0 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8008f06:	231e      	movs	r3, #30
 8008f08:	18fb      	adds	r3, r7, r3
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	701a      	strb	r2, [r3, #0]
 8008f0e:	e047      	b.n	8008fa0 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f10:	231f      	movs	r3, #31
 8008f12:	18fb      	adds	r3, r7, r3
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	2b08      	cmp	r3, #8
 8008f18:	d015      	beq.n	8008f46 <UART_SetConfig+0x276>
 8008f1a:	dc18      	bgt.n	8008f4e <UART_SetConfig+0x27e>
 8008f1c:	2b04      	cmp	r3, #4
 8008f1e:	d00d      	beq.n	8008f3c <UART_SetConfig+0x26c>
 8008f20:	dc15      	bgt.n	8008f4e <UART_SetConfig+0x27e>
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d002      	beq.n	8008f2c <UART_SetConfig+0x25c>
 8008f26:	2b02      	cmp	r3, #2
 8008f28:	d005      	beq.n	8008f36 <UART_SetConfig+0x266>
 8008f2a:	e010      	b.n	8008f4e <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f2c:	f7fd fe7c 	bl	8006c28 <HAL_RCC_GetPCLK1Freq>
 8008f30:	0003      	movs	r3, r0
 8008f32:	61bb      	str	r3, [r7, #24]
        break;
 8008f34:	e012      	b.n	8008f5c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f36:	4b29      	ldr	r3, [pc, #164]	@ (8008fdc <UART_SetConfig+0x30c>)
 8008f38:	61bb      	str	r3, [r7, #24]
        break;
 8008f3a:	e00f      	b.n	8008f5c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f3c:	f7fd fdf8 	bl	8006b30 <HAL_RCC_GetSysClockFreq>
 8008f40:	0003      	movs	r3, r0
 8008f42:	61bb      	str	r3, [r7, #24]
        break;
 8008f44:	e00a      	b.n	8008f5c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f46:	2380      	movs	r3, #128	@ 0x80
 8008f48:	021b      	lsls	r3, r3, #8
 8008f4a:	61bb      	str	r3, [r7, #24]
        break;
 8008f4c:	e006      	b.n	8008f5c <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008f52:	231e      	movs	r3, #30
 8008f54:	18fb      	adds	r3, r7, r3
 8008f56:	2201      	movs	r2, #1
 8008f58:	701a      	strb	r2, [r3, #0]
        break;
 8008f5a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d01e      	beq.n	8008fa0 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	085a      	lsrs	r2, r3, #1
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	18d2      	adds	r2, r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	0019      	movs	r1, r3
 8008f72:	0010      	movs	r0, r2
 8008f74:	f7f7 f8e4 	bl	8000140 <__udivsi3>
 8008f78:	0003      	movs	r3, r0
 8008f7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	2b0f      	cmp	r3, #15
 8008f80:	d90a      	bls.n	8008f98 <UART_SetConfig+0x2c8>
 8008f82:	693a      	ldr	r2, [r7, #16]
 8008f84:	2380      	movs	r3, #128	@ 0x80
 8008f86:	025b      	lsls	r3, r3, #9
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d205      	bcs.n	8008f98 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	b29a      	uxth	r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	60da      	str	r2, [r3, #12]
 8008f96:	e003      	b.n	8008fa0 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8008f98:	231e      	movs	r3, #30
 8008f9a:	18fb      	adds	r3, r7, r3
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008fac:	231e      	movs	r3, #30
 8008fae:	18fb      	adds	r3, r7, r3
 8008fb0:	781b      	ldrb	r3, [r3, #0]
}
 8008fb2:	0018      	movs	r0, r3
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	b008      	add	sp, #32
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	46c0      	nop			@ (mov r8, r8)
 8008fbc:	efff69f3 	.word	0xefff69f3
 8008fc0:	ffffcfff 	.word	0xffffcfff
 8008fc4:	fffff4ff 	.word	0xfffff4ff
 8008fc8:	40013800 	.word	0x40013800
 8008fcc:	40021000 	.word	0x40021000
 8008fd0:	40004400 	.word	0x40004400
 8008fd4:	40004800 	.word	0x40004800
 8008fd8:	40004c00 	.word	0x40004c00
 8008fdc:	007a1200 	.word	0x007a1200

08008fe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fec:	2208      	movs	r2, #8
 8008fee:	4013      	ands	r3, r2
 8008ff0:	d00b      	beq.n	800900a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	4a4a      	ldr	r2, [pc, #296]	@ (8009124 <UART_AdvFeatureConfig+0x144>)
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	0019      	movs	r1, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	430a      	orrs	r2, r1
 8009008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800900e:	2201      	movs	r2, #1
 8009010:	4013      	ands	r3, r2
 8009012:	d00b      	beq.n	800902c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	4a43      	ldr	r2, [pc, #268]	@ (8009128 <UART_AdvFeatureConfig+0x148>)
 800901c:	4013      	ands	r3, r2
 800901e:	0019      	movs	r1, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	430a      	orrs	r2, r1
 800902a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009030:	2202      	movs	r2, #2
 8009032:	4013      	ands	r3, r2
 8009034:	d00b      	beq.n	800904e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	4a3b      	ldr	r2, [pc, #236]	@ (800912c <UART_AdvFeatureConfig+0x14c>)
 800903e:	4013      	ands	r3, r2
 8009040:	0019      	movs	r1, r3
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	430a      	orrs	r2, r1
 800904c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009052:	2204      	movs	r2, #4
 8009054:	4013      	ands	r3, r2
 8009056:	d00b      	beq.n	8009070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	4a34      	ldr	r2, [pc, #208]	@ (8009130 <UART_AdvFeatureConfig+0x150>)
 8009060:	4013      	ands	r3, r2
 8009062:	0019      	movs	r1, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	430a      	orrs	r2, r1
 800906e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009074:	2210      	movs	r2, #16
 8009076:	4013      	ands	r3, r2
 8009078:	d00b      	beq.n	8009092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	4a2c      	ldr	r2, [pc, #176]	@ (8009134 <UART_AdvFeatureConfig+0x154>)
 8009082:	4013      	ands	r3, r2
 8009084:	0019      	movs	r1, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	430a      	orrs	r2, r1
 8009090:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009096:	2220      	movs	r2, #32
 8009098:	4013      	ands	r3, r2
 800909a:	d00b      	beq.n	80090b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	4a25      	ldr	r2, [pc, #148]	@ (8009138 <UART_AdvFeatureConfig+0x158>)
 80090a4:	4013      	ands	r3, r2
 80090a6:	0019      	movs	r1, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	430a      	orrs	r2, r1
 80090b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090b8:	2240      	movs	r2, #64	@ 0x40
 80090ba:	4013      	ands	r3, r2
 80090bc:	d01d      	beq.n	80090fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	4a1d      	ldr	r2, [pc, #116]	@ (800913c <UART_AdvFeatureConfig+0x15c>)
 80090c6:	4013      	ands	r3, r2
 80090c8:	0019      	movs	r1, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	430a      	orrs	r2, r1
 80090d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80090da:	2380      	movs	r3, #128	@ 0x80
 80090dc:	035b      	lsls	r3, r3, #13
 80090de:	429a      	cmp	r2, r3
 80090e0:	d10b      	bne.n	80090fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	4a15      	ldr	r2, [pc, #84]	@ (8009140 <UART_AdvFeatureConfig+0x160>)
 80090ea:	4013      	ands	r3, r2
 80090ec:	0019      	movs	r1, r3
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	430a      	orrs	r2, r1
 80090f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090fe:	2280      	movs	r2, #128	@ 0x80
 8009100:	4013      	ands	r3, r2
 8009102:	d00b      	beq.n	800911c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	4a0e      	ldr	r2, [pc, #56]	@ (8009144 <UART_AdvFeatureConfig+0x164>)
 800910c:	4013      	ands	r3, r2
 800910e:	0019      	movs	r1, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	430a      	orrs	r2, r1
 800911a:	605a      	str	r2, [r3, #4]
  }
}
 800911c:	46c0      	nop			@ (mov r8, r8)
 800911e:	46bd      	mov	sp, r7
 8009120:	b002      	add	sp, #8
 8009122:	bd80      	pop	{r7, pc}
 8009124:	ffff7fff 	.word	0xffff7fff
 8009128:	fffdffff 	.word	0xfffdffff
 800912c:	fffeffff 	.word	0xfffeffff
 8009130:	fffbffff 	.word	0xfffbffff
 8009134:	ffffefff 	.word	0xffffefff
 8009138:	ffffdfff 	.word	0xffffdfff
 800913c:	ffefffff 	.word	0xffefffff
 8009140:	ff9fffff 	.word	0xff9fffff
 8009144:	fff7ffff 	.word	0xfff7ffff

08009148 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b092      	sub	sp, #72	@ 0x48
 800914c:	af02      	add	r7, sp, #8
 800914e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2284      	movs	r2, #132	@ 0x84
 8009154:	2100      	movs	r1, #0
 8009156:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009158:	f7fa fad8 	bl	800370c <HAL_GetTick>
 800915c:	0003      	movs	r3, r0
 800915e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2208      	movs	r2, #8
 8009168:	4013      	ands	r3, r2
 800916a:	2b08      	cmp	r3, #8
 800916c:	d12c      	bne.n	80091c8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800916e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009170:	2280      	movs	r2, #128	@ 0x80
 8009172:	0391      	lsls	r1, r2, #14
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	4a46      	ldr	r2, [pc, #280]	@ (8009290 <UART_CheckIdleState+0x148>)
 8009178:	9200      	str	r2, [sp, #0]
 800917a:	2200      	movs	r2, #0
 800917c:	f000 f88c 	bl	8009298 <UART_WaitOnFlagUntilTimeout>
 8009180:	1e03      	subs	r3, r0, #0
 8009182:	d021      	beq.n	80091c8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009184:	f3ef 8310 	mrs	r3, PRIMASK
 8009188:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800918a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800918c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800918e:	2301      	movs	r3, #1
 8009190:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009194:	f383 8810 	msr	PRIMASK, r3
}
 8009198:	46c0      	nop			@ (mov r8, r8)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2180      	movs	r1, #128	@ 0x80
 80091a6:	438a      	bics	r2, r1
 80091a8:	601a      	str	r2, [r3, #0]
 80091aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091b0:	f383 8810 	msr	PRIMASK, r3
}
 80091b4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2220      	movs	r2, #32
 80091ba:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2278      	movs	r2, #120	@ 0x78
 80091c0:	2100      	movs	r1, #0
 80091c2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091c4:	2303      	movs	r3, #3
 80091c6:	e05f      	b.n	8009288 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2204      	movs	r2, #4
 80091d0:	4013      	ands	r3, r2
 80091d2:	2b04      	cmp	r3, #4
 80091d4:	d146      	bne.n	8009264 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091d8:	2280      	movs	r2, #128	@ 0x80
 80091da:	03d1      	lsls	r1, r2, #15
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	4a2c      	ldr	r2, [pc, #176]	@ (8009290 <UART_CheckIdleState+0x148>)
 80091e0:	9200      	str	r2, [sp, #0]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f000 f858 	bl	8009298 <UART_WaitOnFlagUntilTimeout>
 80091e8:	1e03      	subs	r3, r0, #0
 80091ea:	d03b      	beq.n	8009264 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091ec:	f3ef 8310 	mrs	r3, PRIMASK
 80091f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80091f2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80091f6:	2301      	movs	r3, #1
 80091f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	f383 8810 	msr	PRIMASK, r3
}
 8009200:	46c0      	nop			@ (mov r8, r8)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4921      	ldr	r1, [pc, #132]	@ (8009294 <UART_CheckIdleState+0x14c>)
 800920e:	400a      	ands	r2, r1
 8009210:	601a      	str	r2, [r3, #0]
 8009212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009214:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	f383 8810 	msr	PRIMASK, r3
}
 800921c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800921e:	f3ef 8310 	mrs	r3, PRIMASK
 8009222:	61bb      	str	r3, [r7, #24]
  return(result);
 8009224:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009226:	633b      	str	r3, [r7, #48]	@ 0x30
 8009228:	2301      	movs	r3, #1
 800922a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	f383 8810 	msr	PRIMASK, r3
}
 8009232:	46c0      	nop			@ (mov r8, r8)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	689a      	ldr	r2, [r3, #8]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2101      	movs	r1, #1
 8009240:	438a      	bics	r2, r1
 8009242:	609a      	str	r2, [r3, #8]
 8009244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009246:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009248:	6a3b      	ldr	r3, [r7, #32]
 800924a:	f383 8810 	msr	PRIMASK, r3
}
 800924e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2280      	movs	r2, #128	@ 0x80
 8009254:	2120      	movs	r1, #32
 8009256:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2278      	movs	r2, #120	@ 0x78
 800925c:	2100      	movs	r1, #0
 800925e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009260:	2303      	movs	r3, #3
 8009262:	e011      	b.n	8009288 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2220      	movs	r2, #32
 8009268:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2280      	movs	r2, #128	@ 0x80
 800926e:	2120      	movs	r1, #32
 8009270:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2278      	movs	r2, #120	@ 0x78
 8009282:	2100      	movs	r1, #0
 8009284:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	0018      	movs	r0, r3
 800928a:	46bd      	mov	sp, r7
 800928c:	b010      	add	sp, #64	@ 0x40
 800928e:	bd80      	pop	{r7, pc}
 8009290:	01ffffff 	.word	0x01ffffff
 8009294:	fffffedf 	.word	0xfffffedf

08009298 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	603b      	str	r3, [r7, #0]
 80092a4:	1dfb      	adds	r3, r7, #7
 80092a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092a8:	e051      	b.n	800934e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	3301      	adds	r3, #1
 80092ae:	d04e      	beq.n	800934e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092b0:	f7fa fa2c 	bl	800370c <HAL_GetTick>
 80092b4:	0002      	movs	r2, r0
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	69ba      	ldr	r2, [r7, #24]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d302      	bcc.n	80092c6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d101      	bne.n	80092ca <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80092c6:	2303      	movs	r3, #3
 80092c8:	e051      	b.n	800936e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2204      	movs	r2, #4
 80092d2:	4013      	ands	r3, r2
 80092d4:	d03b      	beq.n	800934e <UART_WaitOnFlagUntilTimeout+0xb6>
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	2b80      	cmp	r3, #128	@ 0x80
 80092da:	d038      	beq.n	800934e <UART_WaitOnFlagUntilTimeout+0xb6>
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	2b40      	cmp	r3, #64	@ 0x40
 80092e0:	d035      	beq.n	800934e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	69db      	ldr	r3, [r3, #28]
 80092e8:	2208      	movs	r2, #8
 80092ea:	4013      	ands	r3, r2
 80092ec:	2b08      	cmp	r3, #8
 80092ee:	d111      	bne.n	8009314 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2208      	movs	r2, #8
 80092f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	0018      	movs	r0, r3
 80092fc:	f000 f900 	bl	8009500 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2284      	movs	r2, #132	@ 0x84
 8009304:	2108      	movs	r1, #8
 8009306:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2278      	movs	r2, #120	@ 0x78
 800930c:	2100      	movs	r1, #0
 800930e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	e02c      	b.n	800936e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	69da      	ldr	r2, [r3, #28]
 800931a:	2380      	movs	r3, #128	@ 0x80
 800931c:	011b      	lsls	r3, r3, #4
 800931e:	401a      	ands	r2, r3
 8009320:	2380      	movs	r3, #128	@ 0x80
 8009322:	011b      	lsls	r3, r3, #4
 8009324:	429a      	cmp	r2, r3
 8009326:	d112      	bne.n	800934e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2280      	movs	r2, #128	@ 0x80
 800932e:	0112      	lsls	r2, r2, #4
 8009330:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	0018      	movs	r0, r3
 8009336:	f000 f8e3 	bl	8009500 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2284      	movs	r2, #132	@ 0x84
 800933e:	2120      	movs	r1, #32
 8009340:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2278      	movs	r2, #120	@ 0x78
 8009346:	2100      	movs	r1, #0
 8009348:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800934a:	2303      	movs	r3, #3
 800934c:	e00f      	b.n	800936e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	69db      	ldr	r3, [r3, #28]
 8009354:	68ba      	ldr	r2, [r7, #8]
 8009356:	4013      	ands	r3, r2
 8009358:	68ba      	ldr	r2, [r7, #8]
 800935a:	1ad3      	subs	r3, r2, r3
 800935c:	425a      	negs	r2, r3
 800935e:	4153      	adcs	r3, r2
 8009360:	b2db      	uxtb	r3, r3
 8009362:	001a      	movs	r2, r3
 8009364:	1dfb      	adds	r3, r7, #7
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	429a      	cmp	r2, r3
 800936a:	d09e      	beq.n	80092aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	0018      	movs	r0, r3
 8009370:	46bd      	mov	sp, r7
 8009372:	b004      	add	sp, #16
 8009374:	bd80      	pop	{r7, pc}
	...

08009378 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b090      	sub	sp, #64	@ 0x40
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	1dbb      	adds	r3, r7, #6
 8009384:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	68ba      	ldr	r2, [r7, #8]
 800938a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	1dba      	adds	r2, r7, #6
 8009390:	2158      	movs	r1, #88	@ 0x58
 8009392:	8812      	ldrh	r2, [r2, #0]
 8009394:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2284      	movs	r2, #132	@ 0x84
 800939a:	2100      	movs	r1, #0
 800939c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2280      	movs	r2, #128	@ 0x80
 80093a2:	2122      	movs	r1, #34	@ 0x22
 80093a4:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d028      	beq.n	8009400 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093b2:	4a3e      	ldr	r2, [pc, #248]	@ (80094ac <UART_Start_Receive_DMA+0x134>)
 80093b4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093ba:	4a3d      	ldr	r2, [pc, #244]	@ (80094b0 <UART_Start_Receive_DMA+0x138>)
 80093bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093c2:	4a3c      	ldr	r2, [pc, #240]	@ (80094b4 <UART_Start_Receive_DMA+0x13c>)
 80093c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093ca:	2200      	movs	r2, #0
 80093cc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3324      	adds	r3, #36	@ 0x24
 80093d8:	0019      	movs	r1, r3
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093de:	001a      	movs	r2, r3
 80093e0:	1dbb      	adds	r3, r7, #6
 80093e2:	881b      	ldrh	r3, [r3, #0]
 80093e4:	f7fa fd66 	bl	8003eb4 <HAL_DMA_Start_IT>
 80093e8:	1e03      	subs	r3, r0, #0
 80093ea:	d009      	beq.n	8009400 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2284      	movs	r2, #132	@ 0x84
 80093f0:	2110      	movs	r1, #16
 80093f2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2280      	movs	r2, #128	@ 0x80
 80093f8:	2120      	movs	r1, #32
 80093fa:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e050      	b.n	80094a2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	691b      	ldr	r3, [r3, #16]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d019      	beq.n	800943c <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009408:	f3ef 8310 	mrs	r3, PRIMASK
 800940c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800940e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009410:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009412:	2301      	movs	r3, #1
 8009414:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009418:	f383 8810 	msr	PRIMASK, r3
}
 800941c:	46c0      	nop			@ (mov r8, r8)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2180      	movs	r1, #128	@ 0x80
 800942a:	0049      	lsls	r1, r1, #1
 800942c:	430a      	orrs	r2, r1
 800942e:	601a      	str	r2, [r3, #0]
 8009430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009432:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009436:	f383 8810 	msr	PRIMASK, r3
}
 800943a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800943c:	f3ef 8310 	mrs	r3, PRIMASK
 8009440:	613b      	str	r3, [r7, #16]
  return(result);
 8009442:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009444:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009446:	2301      	movs	r3, #1
 8009448:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	f383 8810 	msr	PRIMASK, r3
}
 8009450:	46c0      	nop			@ (mov r8, r8)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	689a      	ldr	r2, [r3, #8]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2101      	movs	r1, #1
 800945e:	430a      	orrs	r2, r1
 8009460:	609a      	str	r2, [r3, #8]
 8009462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009464:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	f383 8810 	msr	PRIMASK, r3
}
 800946c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800946e:	f3ef 8310 	mrs	r3, PRIMASK
 8009472:	61fb      	str	r3, [r7, #28]
  return(result);
 8009474:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009476:	637b      	str	r3, [r7, #52]	@ 0x34
 8009478:	2301      	movs	r3, #1
 800947a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800947c:	6a3b      	ldr	r3, [r7, #32]
 800947e:	f383 8810 	msr	PRIMASK, r3
}
 8009482:	46c0      	nop			@ (mov r8, r8)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	689a      	ldr	r2, [r3, #8]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2140      	movs	r1, #64	@ 0x40
 8009490:	430a      	orrs	r2, r1
 8009492:	609a      	str	r2, [r3, #8]
 8009494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009496:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800949a:	f383 8810 	msr	PRIMASK, r3
}
 800949e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	0018      	movs	r0, r3
 80094a4:	46bd      	mov	sp, r7
 80094a6:	b010      	add	sp, #64	@ 0x40
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	46c0      	nop			@ (mov r8, r8)
 80094ac:	080095c9 	.word	0x080095c9
 80094b0:	080096f9 	.word	0x080096f9
 80094b4:	08009741 	.word	0x08009741

080094b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b086      	sub	sp, #24
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094c0:	f3ef 8310 	mrs	r3, PRIMASK
 80094c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80094c6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80094c8:	617b      	str	r3, [r7, #20]
 80094ca:	2301      	movs	r3, #1
 80094cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f383 8810 	msr	PRIMASK, r3
}
 80094d4:	46c0      	nop			@ (mov r8, r8)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	21c0      	movs	r1, #192	@ 0xc0
 80094e2:	438a      	bics	r2, r1
 80094e4:	601a      	str	r2, [r3, #0]
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	f383 8810 	msr	PRIMASK, r3
}
 80094f0:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2220      	movs	r2, #32
 80094f6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80094f8:	46c0      	nop			@ (mov r8, r8)
 80094fa:	46bd      	mov	sp, r7
 80094fc:	b006      	add	sp, #24
 80094fe:	bd80      	pop	{r7, pc}

08009500 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b08e      	sub	sp, #56	@ 0x38
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009508:	f3ef 8310 	mrs	r3, PRIMASK
 800950c:	617b      	str	r3, [r7, #20]
  return(result);
 800950e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009510:	637b      	str	r3, [r7, #52]	@ 0x34
 8009512:	2301      	movs	r3, #1
 8009514:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	f383 8810 	msr	PRIMASK, r3
}
 800951c:	46c0      	nop			@ (mov r8, r8)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4926      	ldr	r1, [pc, #152]	@ (80095c4 <UART_EndRxTransfer+0xc4>)
 800952a:	400a      	ands	r2, r1
 800952c:	601a      	str	r2, [r3, #0]
 800952e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009530:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	f383 8810 	msr	PRIMASK, r3
}
 8009538:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800953a:	f3ef 8310 	mrs	r3, PRIMASK
 800953e:	623b      	str	r3, [r7, #32]
  return(result);
 8009540:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009542:	633b      	str	r3, [r7, #48]	@ 0x30
 8009544:	2301      	movs	r3, #1
 8009546:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800954a:	f383 8810 	msr	PRIMASK, r3
}
 800954e:	46c0      	nop			@ (mov r8, r8)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	689a      	ldr	r2, [r3, #8]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2101      	movs	r1, #1
 800955c:	438a      	bics	r2, r1
 800955e:	609a      	str	r2, [r3, #8]
 8009560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009562:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009566:	f383 8810 	msr	PRIMASK, r3
}
 800956a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009570:	2b01      	cmp	r3, #1
 8009572:	d118      	bne.n	80095a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009574:	f3ef 8310 	mrs	r3, PRIMASK
 8009578:	60bb      	str	r3, [r7, #8]
  return(result);
 800957a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800957c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800957e:	2301      	movs	r3, #1
 8009580:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f383 8810 	msr	PRIMASK, r3
}
 8009588:	46c0      	nop			@ (mov r8, r8)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2110      	movs	r1, #16
 8009596:	438a      	bics	r2, r1
 8009598:	601a      	str	r2, [r3, #0]
 800959a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800959c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	f383 8810 	msr	PRIMASK, r3
}
 80095a4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2280      	movs	r2, #128	@ 0x80
 80095aa:	2120      	movs	r1, #32
 80095ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80095ba:	46c0      	nop			@ (mov r8, r8)
 80095bc:	46bd      	mov	sp, r7
 80095be:	b00e      	add	sp, #56	@ 0x38
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	46c0      	nop			@ (mov r8, r8)
 80095c4:	fffffedf 	.word	0xfffffedf

080095c8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b094      	sub	sp, #80	@ 0x50
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095d4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	699b      	ldr	r3, [r3, #24]
 80095da:	2b20      	cmp	r3, #32
 80095dc:	d06f      	beq.n	80096be <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 80095de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095e0:	225a      	movs	r2, #90	@ 0x5a
 80095e2:	2100      	movs	r1, #0
 80095e4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095e6:	f3ef 8310 	mrs	r3, PRIMASK
 80095ea:	61bb      	str	r3, [r7, #24]
  return(result);
 80095ec:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095f0:	2301      	movs	r3, #1
 80095f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	f383 8810 	msr	PRIMASK, r3
}
 80095fa:	46c0      	nop			@ (mov r8, r8)
 80095fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	493b      	ldr	r1, [pc, #236]	@ (80096f4 <UART_DMAReceiveCplt+0x12c>)
 8009608:	400a      	ands	r2, r1
 800960a:	601a      	str	r2, [r3, #0]
 800960c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800960e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009610:	6a3b      	ldr	r3, [r7, #32]
 8009612:	f383 8810 	msr	PRIMASK, r3
}
 8009616:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009618:	f3ef 8310 	mrs	r3, PRIMASK
 800961c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800961e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009620:	647b      	str	r3, [r7, #68]	@ 0x44
 8009622:	2301      	movs	r3, #1
 8009624:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009628:	f383 8810 	msr	PRIMASK, r3
}
 800962c:	46c0      	nop			@ (mov r8, r8)
 800962e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	689a      	ldr	r2, [r3, #8]
 8009634:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2101      	movs	r1, #1
 800963a:	438a      	bics	r2, r1
 800963c:	609a      	str	r2, [r3, #8]
 800963e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009640:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009644:	f383 8810 	msr	PRIMASK, r3
}
 8009648:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800964a:	f3ef 8310 	mrs	r3, PRIMASK
 800964e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8009650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009652:	643b      	str	r3, [r7, #64]	@ 0x40
 8009654:	2301      	movs	r3, #1
 8009656:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800965a:	f383 8810 	msr	PRIMASK, r3
}
 800965e:	46c0      	nop			@ (mov r8, r8)
 8009660:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	689a      	ldr	r2, [r3, #8]
 8009666:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2140      	movs	r1, #64	@ 0x40
 800966c:	438a      	bics	r2, r1
 800966e:	609a      	str	r2, [r3, #8]
 8009670:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009672:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009676:	f383 8810 	msr	PRIMASK, r3
}
 800967a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800967c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800967e:	2280      	movs	r2, #128	@ 0x80
 8009680:	2120      	movs	r1, #32
 8009682:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009684:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009688:	2b01      	cmp	r3, #1
 800968a:	d118      	bne.n	80096be <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800968c:	f3ef 8310 	mrs	r3, PRIMASK
 8009690:	60fb      	str	r3, [r7, #12]
  return(result);
 8009692:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009694:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009696:	2301      	movs	r3, #1
 8009698:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	f383 8810 	msr	PRIMASK, r3
}
 80096a0:	46c0      	nop			@ (mov r8, r8)
 80096a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2110      	movs	r1, #16
 80096ae:	438a      	bics	r2, r1
 80096b0:	601a      	str	r2, [r3, #0]
 80096b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	f383 8810 	msr	PRIMASK, r3
}
 80096bc:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096c0:	2200      	movs	r2, #0
 80096c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d109      	bne.n	80096e0 <UART_DMAReceiveCplt+0x118>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80096cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096ce:	22ac      	movs	r2, #172	@ 0xac
 80096d0:	589b      	ldr	r3, [r3, r2]
 80096d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80096d4:	2158      	movs	r1, #88	@ 0x58
 80096d6:	5a51      	ldrh	r1, [r2, r1]
 80096d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80096da:	0010      	movs	r0, r2
 80096dc:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80096de:	e005      	b.n	80096ec <UART_DMAReceiveCplt+0x124>
    huart->RxCpltCallback(huart);
 80096e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096e2:	2294      	movs	r2, #148	@ 0x94
 80096e4:	589b      	ldr	r3, [r3, r2]
 80096e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80096e8:	0010      	movs	r0, r2
 80096ea:	4798      	blx	r3
}
 80096ec:	46c0      	nop			@ (mov r8, r8)
 80096ee:	46bd      	mov	sp, r7
 80096f0:	b014      	add	sp, #80	@ 0x50
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	fffffeff 	.word	0xfffffeff

080096f8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009704:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2201      	movs	r2, #1
 800970a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009710:	2b01      	cmp	r3, #1
 8009712:	d10b      	bne.n	800972c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	22ac      	movs	r2, #172	@ 0xac
 8009718:	589b      	ldr	r3, [r3, r2]
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	2158      	movs	r1, #88	@ 0x58
 800971e:	5a52      	ldrh	r2, [r2, r1]
 8009720:	0852      	lsrs	r2, r2, #1
 8009722:	b291      	uxth	r1, r2
 8009724:	68fa      	ldr	r2, [r7, #12]
 8009726:	0010      	movs	r0, r2
 8009728:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800972a:	e005      	b.n	8009738 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2290      	movs	r2, #144	@ 0x90
 8009730:	589b      	ldr	r3, [r3, r2]
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	0010      	movs	r0, r2
 8009736:	4798      	blx	r3
}
 8009738:	46c0      	nop			@ (mov r8, r8)
 800973a:	46bd      	mov	sp, r7
 800973c:	b004      	add	sp, #16
 800973e:	bd80      	pop	{r7, pc}

08009740 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b086      	sub	sp, #24
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800974c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009752:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	2280      	movs	r2, #128	@ 0x80
 8009758:	589b      	ldr	r3, [r3, r2]
 800975a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	2280      	movs	r2, #128	@ 0x80
 8009764:	4013      	ands	r3, r2
 8009766:	2b80      	cmp	r3, #128	@ 0x80
 8009768:	d10a      	bne.n	8009780 <UART_DMAError+0x40>
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	2b21      	cmp	r3, #33	@ 0x21
 800976e:	d107      	bne.n	8009780 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	2252      	movs	r2, #82	@ 0x52
 8009774:	2100      	movs	r1, #0
 8009776:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	0018      	movs	r0, r3
 800977c:	f7ff fe9c 	bl	80094b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	2240      	movs	r2, #64	@ 0x40
 8009788:	4013      	ands	r3, r2
 800978a:	2b40      	cmp	r3, #64	@ 0x40
 800978c:	d10a      	bne.n	80097a4 <UART_DMAError+0x64>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2b22      	cmp	r3, #34	@ 0x22
 8009792:	d107      	bne.n	80097a4 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	225a      	movs	r2, #90	@ 0x5a
 8009798:	2100      	movs	r1, #0
 800979a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	0018      	movs	r0, r3
 80097a0:	f7ff feae 	bl	8009500 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	2284      	movs	r2, #132	@ 0x84
 80097a8:	589b      	ldr	r3, [r3, r2]
 80097aa:	2210      	movs	r2, #16
 80097ac:	431a      	orrs	r2, r3
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	2184      	movs	r1, #132	@ 0x84
 80097b2:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	2298      	movs	r2, #152	@ 0x98
 80097b8:	589b      	ldr	r3, [r3, r2]
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	0010      	movs	r0, r2
 80097be:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097c0:	46c0      	nop			@ (mov r8, r8)
 80097c2:	46bd      	mov	sp, r7
 80097c4:	b006      	add	sp, #24
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	225a      	movs	r2, #90	@ 0x5a
 80097da:	2100      	movs	r1, #0
 80097dc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2252      	movs	r2, #82	@ 0x52
 80097e2:	2100      	movs	r1, #0
 80097e4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2298      	movs	r2, #152	@ 0x98
 80097ea:	589b      	ldr	r3, [r3, r2]
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	0010      	movs	r0, r2
 80097f0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097f2:	46c0      	nop			@ (mov r8, r8)
 80097f4:	46bd      	mov	sp, r7
 80097f6:	b004      	add	sp, #16
 80097f8:	bd80      	pop	{r7, pc}

080097fa <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b08a      	sub	sp, #40	@ 0x28
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009806:	2b21      	cmp	r3, #33	@ 0x21
 8009808:	d14c      	bne.n	80098a4 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2252      	movs	r2, #82	@ 0x52
 800980e:	5a9b      	ldrh	r3, [r3, r2]
 8009810:	b29b      	uxth	r3, r3
 8009812:	2b00      	cmp	r3, #0
 8009814:	d132      	bne.n	800987c <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009816:	f3ef 8310 	mrs	r3, PRIMASK
 800981a:	60bb      	str	r3, [r7, #8]
  return(result);
 800981c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800981e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009820:	2301      	movs	r3, #1
 8009822:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f383 8810 	msr	PRIMASK, r3
}
 800982a:	46c0      	nop			@ (mov r8, r8)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2180      	movs	r1, #128	@ 0x80
 8009838:	438a      	bics	r2, r1
 800983a:	601a      	str	r2, [r3, #0]
 800983c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800983e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	f383 8810 	msr	PRIMASK, r3
}
 8009846:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009848:	f3ef 8310 	mrs	r3, PRIMASK
 800984c:	617b      	str	r3, [r7, #20]
  return(result);
 800984e:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009850:	623b      	str	r3, [r7, #32]
 8009852:	2301      	movs	r3, #1
 8009854:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	f383 8810 	msr	PRIMASK, r3
}
 800985c:	46c0      	nop			@ (mov r8, r8)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2140      	movs	r1, #64	@ 0x40
 800986a:	430a      	orrs	r2, r1
 800986c:	601a      	str	r2, [r3, #0]
 800986e:	6a3b      	ldr	r3, [r7, #32]
 8009870:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	f383 8810 	msr	PRIMASK, r3
}
 8009878:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800987a:	e013      	b.n	80098a4 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009880:	781a      	ldrb	r2, [r3, #0]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800988c:	1c5a      	adds	r2, r3, #1
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2252      	movs	r2, #82	@ 0x52
 8009896:	5a9b      	ldrh	r3, [r3, r2]
 8009898:	b29b      	uxth	r3, r3
 800989a:	3b01      	subs	r3, #1
 800989c:	b299      	uxth	r1, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2252      	movs	r2, #82	@ 0x52
 80098a2:	5299      	strh	r1, [r3, r2]
}
 80098a4:	46c0      	nop			@ (mov r8, r8)
 80098a6:	46bd      	mov	sp, r7
 80098a8:	b00a      	add	sp, #40	@ 0x28
 80098aa:	bd80      	pop	{r7, pc}

080098ac <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b08c      	sub	sp, #48	@ 0x30
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098b8:	2b21      	cmp	r3, #33	@ 0x21
 80098ba:	d151      	bne.n	8009960 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2252      	movs	r2, #82	@ 0x52
 80098c0:	5a9b      	ldrh	r3, [r3, r2]
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d132      	bne.n	800992e <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098c8:	f3ef 8310 	mrs	r3, PRIMASK
 80098cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80098ce:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80098d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80098d2:	2301      	movs	r3, #1
 80098d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	f383 8810 	msr	PRIMASK, r3
}
 80098dc:	46c0      	nop			@ (mov r8, r8)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2180      	movs	r1, #128	@ 0x80
 80098ea:	438a      	bics	r2, r1
 80098ec:	601a      	str	r2, [r3, #0]
 80098ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	f383 8810 	msr	PRIMASK, r3
}
 80098f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098fa:	f3ef 8310 	mrs	r3, PRIMASK
 80098fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8009900:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009902:	627b      	str	r3, [r7, #36]	@ 0x24
 8009904:	2301      	movs	r3, #1
 8009906:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	f383 8810 	msr	PRIMASK, r3
}
 800990e:	46c0      	nop			@ (mov r8, r8)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2140      	movs	r1, #64	@ 0x40
 800991c:	430a      	orrs	r2, r1
 800991e:	601a      	str	r2, [r3, #0]
 8009920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009922:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009924:	6a3b      	ldr	r3, [r7, #32]
 8009926:	f383 8810 	msr	PRIMASK, r3
}
 800992a:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800992c:	e018      	b.n	8009960 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009932:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009936:	881a      	ldrh	r2, [r3, #0]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	05d2      	lsls	r2, r2, #23
 800993e:	0dd2      	lsrs	r2, r2, #23
 8009940:	b292      	uxth	r2, r2
 8009942:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009948:	1c9a      	adds	r2, r3, #2
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2252      	movs	r2, #82	@ 0x52
 8009952:	5a9b      	ldrh	r3, [r3, r2]
 8009954:	b29b      	uxth	r3, r3
 8009956:	3b01      	subs	r3, #1
 8009958:	b299      	uxth	r1, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2252      	movs	r2, #82	@ 0x52
 800995e:	5299      	strh	r1, [r3, r2]
}
 8009960:	46c0      	nop			@ (mov r8, r8)
 8009962:	46bd      	mov	sp, r7
 8009964:	b00c      	add	sp, #48	@ 0x30
 8009966:	bd80      	pop	{r7, pc}

08009968 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b086      	sub	sp, #24
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009970:	f3ef 8310 	mrs	r3, PRIMASK
 8009974:	60bb      	str	r3, [r7, #8]
  return(result);
 8009976:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009978:	617b      	str	r3, [r7, #20]
 800997a:	2301      	movs	r3, #1
 800997c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f383 8810 	msr	PRIMASK, r3
}
 8009984:	46c0      	nop			@ (mov r8, r8)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2140      	movs	r1, #64	@ 0x40
 8009992:	438a      	bics	r2, r1
 8009994:	601a      	str	r2, [r3, #0]
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	f383 8810 	msr	PRIMASK, r3
}
 80099a0:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2220      	movs	r2, #32
 80099a6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	228c      	movs	r2, #140	@ 0x8c
 80099b2:	589b      	ldr	r3, [r3, r2]
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	0010      	movs	r0, r2
 80099b8:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099ba:	46c0      	nop			@ (mov r8, r8)
 80099bc:	46bd      	mov	sp, r7
 80099be:	b006      	add	sp, #24
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b082      	sub	sp, #8
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80099ca:	46c0      	nop			@ (mov r8, r8)
 80099cc:	46bd      	mov	sp, r7
 80099ce:	b002      	add	sp, #8
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099d2:	b5b0      	push	{r4, r5, r7, lr}
 80099d4:	b08a      	sub	sp, #40	@ 0x28
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	60f8      	str	r0, [r7, #12]
 80099da:	60b9      	str	r1, [r7, #8]
 80099dc:	1dbb      	adds	r3, r7, #6
 80099de:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2280      	movs	r2, #128	@ 0x80
 80099e4:	589b      	ldr	r3, [r3, r2]
 80099e6:	2b20      	cmp	r3, #32
 80099e8:	d156      	bne.n	8009a98 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d003      	beq.n	80099f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80099f0:	1dbb      	adds	r3, r7, #6
 80099f2:	881b      	ldrh	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d101      	bne.n	80099fc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	e04e      	b.n	8009a9a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	689a      	ldr	r2, [r3, #8]
 8009a00:	2380      	movs	r3, #128	@ 0x80
 8009a02:	015b      	lsls	r3, r3, #5
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d109      	bne.n	8009a1c <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d105      	bne.n	8009a1c <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	2201      	movs	r2, #1
 8009a14:	4013      	ands	r3, r2
 8009a16:	d001      	beq.n	8009a1c <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e03e      	b.n	8009a9a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2200      	movs	r2, #0
 8009a26:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009a28:	2527      	movs	r5, #39	@ 0x27
 8009a2a:	197c      	adds	r4, r7, r5
 8009a2c:	1dbb      	adds	r3, r7, #6
 8009a2e:	881a      	ldrh	r2, [r3, #0]
 8009a30:	68b9      	ldr	r1, [r7, #8]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	0018      	movs	r0, r3
 8009a36:	f7ff fc9f 	bl	8009378 <UART_Start_Receive_DMA>
 8009a3a:	0003      	movs	r3, r0
 8009a3c:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009a3e:	197b      	adds	r3, r7, r5
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d124      	bne.n	8009a90 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d11c      	bne.n	8009a88 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2210      	movs	r2, #16
 8009a54:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a56:	f3ef 8310 	mrs	r3, PRIMASK
 8009a5a:	617b      	str	r3, [r7, #20]
  return(result);
 8009a5c:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a5e:	623b      	str	r3, [r7, #32]
 8009a60:	2301      	movs	r3, #1
 8009a62:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	f383 8810 	msr	PRIMASK, r3
}
 8009a6a:	46c0      	nop			@ (mov r8, r8)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2110      	movs	r1, #16
 8009a78:	430a      	orrs	r2, r1
 8009a7a:	601a      	str	r2, [r3, #0]
 8009a7c:	6a3b      	ldr	r3, [r7, #32]
 8009a7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	f383 8810 	msr	PRIMASK, r3
}
 8009a86:	e003      	b.n	8009a90 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009a88:	2327      	movs	r3, #39	@ 0x27
 8009a8a:	18fb      	adds	r3, r7, r3
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8009a90:	2327      	movs	r3, #39	@ 0x27
 8009a92:	18fb      	adds	r3, r7, r3
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	e000      	b.n	8009a9a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8009a98:	2302      	movs	r3, #2
  }
}
 8009a9a:	0018      	movs	r0, r3
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	b00a      	add	sp, #40	@ 0x28
 8009aa0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009aa4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2244      	movs	r2, #68	@ 0x44
 8009ab0:	2100      	movs	r1, #0
 8009ab2:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009ab4:	4b05      	ldr	r3, [pc, #20]	@ (8009acc <USB_EnableGlobalInt+0x28>)
 8009ab6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	b299      	uxth	r1, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2240      	movs	r2, #64	@ 0x40
 8009ac0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8009ac2:	2300      	movs	r3, #0
}
 8009ac4:	0018      	movs	r0, r3
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	b004      	add	sp, #16
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	0000bf80 	.word	0x0000bf80

08009ad0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009ad8:	4b09      	ldr	r3, [pc, #36]	@ (8009b00 <USB_DisableGlobalInt+0x30>)
 8009ada:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2240      	movs	r2, #64	@ 0x40
 8009ae0:	5a9b      	ldrh	r3, [r3, r2]
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	b292      	uxth	r2, r2
 8009ae8:	43d2      	mvns	r2, r2
 8009aea:	b292      	uxth	r2, r2
 8009aec:	4013      	ands	r3, r2
 8009aee:	b299      	uxth	r1, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2240      	movs	r2, #64	@ 0x40
 8009af4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	0018      	movs	r0, r3
 8009afa:	46bd      	mov	sp, r7
 8009afc:	b004      	add	sp, #16
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	0000bf80 	.word	0x0000bf80

08009b04 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	1d3b      	adds	r3, r7, #4
 8009b0e:	6019      	str	r1, [r3, #0]
 8009b10:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2240      	movs	r2, #64	@ 0x40
 8009b16:	2101      	movs	r1, #1
 8009b18:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2240      	movs	r2, #64	@ 0x40
 8009b1e:	2100      	movs	r1, #0
 8009b20:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2244      	movs	r2, #68	@ 0x44
 8009b26:	2100      	movs	r1, #0
 8009b28:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2250      	movs	r2, #80	@ 0x50
 8009b2e:	2100      	movs	r1, #0
 8009b30:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8009b32:	2300      	movs	r3, #0
}
 8009b34:	0018      	movs	r0, r3
 8009b36:	46bd      	mov	sp, r7
 8009b38:	b004      	add	sp, #16
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b09c      	sub	sp, #112	@ 0x70
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009b46:	236f      	movs	r3, #111	@ 0x6f
 8009b48:	18fb      	adds	r3, r7, r3
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	18d3      	adds	r3, r2, r3
 8009b58:	881b      	ldrh	r3, [r3, #0]
 8009b5a:	b29a      	uxth	r2, r3
 8009b5c:	236c      	movs	r3, #108	@ 0x6c
 8009b5e:	18fb      	adds	r3, r7, r3
 8009b60:	49a1      	ldr	r1, [pc, #644]	@ (8009de8 <USB_ActivateEndpoint+0x2ac>)
 8009b62:	400a      	ands	r2, r1
 8009b64:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	78db      	ldrb	r3, [r3, #3]
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	d017      	beq.n	8009b9e <USB_ActivateEndpoint+0x62>
 8009b6e:	dc28      	bgt.n	8009bc2 <USB_ActivateEndpoint+0x86>
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d00e      	beq.n	8009b92 <USB_ActivateEndpoint+0x56>
 8009b74:	dc25      	bgt.n	8009bc2 <USB_ActivateEndpoint+0x86>
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d002      	beq.n	8009b80 <USB_ActivateEndpoint+0x44>
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d018      	beq.n	8009bb0 <USB_ActivateEndpoint+0x74>
 8009b7e:	e020      	b.n	8009bc2 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009b80:	226c      	movs	r2, #108	@ 0x6c
 8009b82:	18bb      	adds	r3, r7, r2
 8009b84:	18ba      	adds	r2, r7, r2
 8009b86:	8812      	ldrh	r2, [r2, #0]
 8009b88:	2180      	movs	r1, #128	@ 0x80
 8009b8a:	0089      	lsls	r1, r1, #2
 8009b8c:	430a      	orrs	r2, r1
 8009b8e:	801a      	strh	r2, [r3, #0]
      break;
 8009b90:	e01c      	b.n	8009bcc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8009b92:	226c      	movs	r2, #108	@ 0x6c
 8009b94:	18bb      	adds	r3, r7, r2
 8009b96:	18ba      	adds	r2, r7, r2
 8009b98:	8812      	ldrh	r2, [r2, #0]
 8009b9a:	801a      	strh	r2, [r3, #0]
      break;
 8009b9c:	e016      	b.n	8009bcc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009b9e:	226c      	movs	r2, #108	@ 0x6c
 8009ba0:	18bb      	adds	r3, r7, r2
 8009ba2:	18ba      	adds	r2, r7, r2
 8009ba4:	8812      	ldrh	r2, [r2, #0]
 8009ba6:	21c0      	movs	r1, #192	@ 0xc0
 8009ba8:	00c9      	lsls	r1, r1, #3
 8009baa:	430a      	orrs	r2, r1
 8009bac:	801a      	strh	r2, [r3, #0]
      break;
 8009bae:	e00d      	b.n	8009bcc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009bb0:	226c      	movs	r2, #108	@ 0x6c
 8009bb2:	18bb      	adds	r3, r7, r2
 8009bb4:	18ba      	adds	r2, r7, r2
 8009bb6:	8812      	ldrh	r2, [r2, #0]
 8009bb8:	2180      	movs	r1, #128	@ 0x80
 8009bba:	00c9      	lsls	r1, r1, #3
 8009bbc:	430a      	orrs	r2, r1
 8009bbe:	801a      	strh	r2, [r3, #0]
      break;
 8009bc0:	e004      	b.n	8009bcc <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8009bc2:	236f      	movs	r3, #111	@ 0x6f
 8009bc4:	18fb      	adds	r3, r7, r3
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	701a      	strb	r2, [r3, #0]
      break;
 8009bca:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	18d3      	adds	r3, r2, r3
 8009bd6:	226c      	movs	r2, #108	@ 0x6c
 8009bd8:	18ba      	adds	r2, r7, r2
 8009bda:	8812      	ldrh	r2, [r2, #0]
 8009bdc:	4983      	ldr	r1, [pc, #524]	@ (8009dec <USB_ActivateEndpoint+0x2b0>)
 8009bde:	430a      	orrs	r2, r1
 8009be0:	b292      	uxth	r2, r2
 8009be2:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	18d3      	adds	r3, r2, r3
 8009bee:	881b      	ldrh	r3, [r3, #0]
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	b21b      	sxth	r3, r3
 8009bf4:	4a7e      	ldr	r2, [pc, #504]	@ (8009df0 <USB_ActivateEndpoint+0x2b4>)
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	b21a      	sxth	r2, r3
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	b21b      	sxth	r3, r3
 8009c00:	4313      	orrs	r3, r2
 8009c02:	b21a      	sxth	r2, r3
 8009c04:	2166      	movs	r1, #102	@ 0x66
 8009c06:	187b      	adds	r3, r7, r1
 8009c08:	801a      	strh	r2, [r3, #0]
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	18d3      	adds	r3, r2, r3
 8009c14:	187a      	adds	r2, r7, r1
 8009c16:	8812      	ldrh	r2, [r2, #0]
 8009c18:	4974      	ldr	r1, [pc, #464]	@ (8009dec <USB_ActivateEndpoint+0x2b0>)
 8009c1a:	430a      	orrs	r2, r1
 8009c1c:	b292      	uxth	r2, r2
 8009c1e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	7b1b      	ldrb	r3, [r3, #12]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d000      	beq.n	8009c2a <USB_ActivateEndpoint+0xee>
 8009c28:	e177      	b.n	8009f1a <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	785b      	ldrb	r3, [r3, #1]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d100      	bne.n	8009c34 <USB_ActivateEndpoint+0xf8>
 8009c32:	e07a      	b.n	8009d2a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	61bb      	str	r3, [r7, #24]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2250      	movs	r2, #80	@ 0x50
 8009c3c:	5a9b      	ldrh	r3, [r3, r2]
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	001a      	movs	r2, r3
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	189b      	adds	r3, r3, r2
 8009c46:	61bb      	str	r3, [r7, #24]
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	00da      	lsls	r2, r3, #3
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	18d3      	adds	r3, r2, r3
 8009c52:	2280      	movs	r2, #128	@ 0x80
 8009c54:	00d2      	lsls	r2, r2, #3
 8009c56:	4694      	mov	ip, r2
 8009c58:	4463      	add	r3, ip
 8009c5a:	617b      	str	r3, [r7, #20]
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	88db      	ldrh	r3, [r3, #6]
 8009c60:	085b      	lsrs	r3, r3, #1
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	18db      	adds	r3, r3, r3
 8009c66:	b29a      	uxth	r2, r3
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	18d2      	adds	r2, r2, r3
 8009c76:	2112      	movs	r1, #18
 8009c78:	187b      	adds	r3, r7, r1
 8009c7a:	8812      	ldrh	r2, [r2, #0]
 8009c7c:	801a      	strh	r2, [r3, #0]
 8009c7e:	187b      	adds	r3, r7, r1
 8009c80:	881b      	ldrh	r3, [r3, #0]
 8009c82:	2240      	movs	r2, #64	@ 0x40
 8009c84:	4013      	ands	r3, r2
 8009c86:	d016      	beq.n	8009cb6 <USB_ActivateEndpoint+0x17a>
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	18d3      	adds	r3, r2, r3
 8009c92:	881b      	ldrh	r3, [r3, #0]
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	2010      	movs	r0, #16
 8009c98:	183b      	adds	r3, r7, r0
 8009c9a:	4955      	ldr	r1, [pc, #340]	@ (8009df0 <USB_ActivateEndpoint+0x2b4>)
 8009c9c:	400a      	ands	r2, r1
 8009c9e:	801a      	strh	r2, [r3, #0]
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	18d3      	adds	r3, r2, r3
 8009caa:	183a      	adds	r2, r7, r0
 8009cac:	8812      	ldrh	r2, [r2, #0]
 8009cae:	4951      	ldr	r1, [pc, #324]	@ (8009df4 <USB_ActivateEndpoint+0x2b8>)
 8009cb0:	430a      	orrs	r2, r1
 8009cb2:	b292      	uxth	r2, r2
 8009cb4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	78db      	ldrb	r3, [r3, #3]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d01d      	beq.n	8009cfa <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	18d3      	adds	r3, r2, r3
 8009cc8:	881b      	ldrh	r3, [r3, #0]
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	200c      	movs	r0, #12
 8009cce:	183b      	adds	r3, r7, r0
 8009cd0:	4949      	ldr	r1, [pc, #292]	@ (8009df8 <USB_ActivateEndpoint+0x2bc>)
 8009cd2:	400a      	ands	r2, r1
 8009cd4:	801a      	strh	r2, [r3, #0]
 8009cd6:	183b      	adds	r3, r7, r0
 8009cd8:	183a      	adds	r2, r7, r0
 8009cda:	8812      	ldrh	r2, [r2, #0]
 8009cdc:	2120      	movs	r1, #32
 8009cde:	404a      	eors	r2, r1
 8009ce0:	801a      	strh	r2, [r3, #0]
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	18d3      	adds	r3, r2, r3
 8009cec:	183a      	adds	r2, r7, r0
 8009cee:	8812      	ldrh	r2, [r2, #0]
 8009cf0:	493e      	ldr	r1, [pc, #248]	@ (8009dec <USB_ActivateEndpoint+0x2b0>)
 8009cf2:	430a      	orrs	r2, r1
 8009cf4:	b292      	uxth	r2, r2
 8009cf6:	801a      	strh	r2, [r3, #0]
 8009cf8:	e2b5      	b.n	800a266 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	18d3      	adds	r3, r2, r3
 8009d04:	881b      	ldrh	r3, [r3, #0]
 8009d06:	b29a      	uxth	r2, r3
 8009d08:	200e      	movs	r0, #14
 8009d0a:	183b      	adds	r3, r7, r0
 8009d0c:	493a      	ldr	r1, [pc, #232]	@ (8009df8 <USB_ActivateEndpoint+0x2bc>)
 8009d0e:	400a      	ands	r2, r1
 8009d10:	801a      	strh	r2, [r3, #0]
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	009b      	lsls	r3, r3, #2
 8009d1a:	18d3      	adds	r3, r2, r3
 8009d1c:	183a      	adds	r2, r7, r0
 8009d1e:	8812      	ldrh	r2, [r2, #0]
 8009d20:	4932      	ldr	r1, [pc, #200]	@ (8009dec <USB_ActivateEndpoint+0x2b0>)
 8009d22:	430a      	orrs	r2, r1
 8009d24:	b292      	uxth	r2, r2
 8009d26:	801a      	strh	r2, [r3, #0]
 8009d28:	e29d      	b.n	800a266 <USB_ActivateEndpoint+0x72a>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2250      	movs	r2, #80	@ 0x50
 8009d32:	5a9b      	ldrh	r3, [r3, r2]
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	001a      	movs	r2, r3
 8009d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d3a:	189b      	adds	r3, r3, r2
 8009d3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	00da      	lsls	r2, r3, #3
 8009d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d46:	18d3      	adds	r3, r2, r3
 8009d48:	4a2c      	ldr	r2, [pc, #176]	@ (8009dfc <USB_ActivateEndpoint+0x2c0>)
 8009d4a:	4694      	mov	ip, r2
 8009d4c:	4463      	add	r3, ip
 8009d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	88db      	ldrh	r3, [r3, #6]
 8009d54:	085b      	lsrs	r3, r3, #1
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	18db      	adds	r3, r3, r3
 8009d5a:	b29a      	uxth	r2, r3
 8009d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d5e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2250      	movs	r2, #80	@ 0x50
 8009d68:	5a9b      	ldrh	r3, [r3, r2]
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	001a      	movs	r2, r3
 8009d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d70:	189b      	adds	r3, r3, r2
 8009d72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	00da      	lsls	r2, r3, #3
 8009d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d7c:	18d3      	adds	r3, r2, r3
 8009d7e:	4a20      	ldr	r2, [pc, #128]	@ (8009e00 <USB_ActivateEndpoint+0x2c4>)
 8009d80:	4694      	mov	ip, r2
 8009d82:	4463      	add	r3, ip
 8009d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d88:	881b      	ldrh	r3, [r3, #0]
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	059b      	lsls	r3, r3, #22
 8009d8e:	0d9b      	lsrs	r3, r3, #22
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d94:	801a      	strh	r2, [r3, #0]
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d108      	bne.n	8009db0 <USB_ActivateEndpoint+0x274>
 8009d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da0:	881b      	ldrh	r3, [r3, #0]
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	4a17      	ldr	r2, [pc, #92]	@ (8009e04 <USB_ActivateEndpoint+0x2c8>)
 8009da6:	4313      	orrs	r3, r2
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dac:	801a      	strh	r2, [r3, #0]
 8009dae:	e045      	b.n	8009e3c <USB_ActivateEndpoint+0x300>
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	2b3e      	cmp	r3, #62	@ 0x3e
 8009db6:	d827      	bhi.n	8009e08 <USB_ActivateEndpoint+0x2cc>
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	085b      	lsrs	r3, r3, #1
 8009dbe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	691b      	ldr	r3, [r3, #16]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	4013      	ands	r3, r2
 8009dc8:	d002      	beq.n	8009dd0 <USB_ActivateEndpoint+0x294>
 8009dca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009dcc:	3301      	adds	r3, #1
 8009dce:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd2:	881b      	ldrh	r3, [r3, #0]
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	029b      	lsls	r3, r3, #10
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	4313      	orrs	r3, r2
 8009de0:	b29a      	uxth	r2, r3
 8009de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de4:	801a      	strh	r2, [r3, #0]
 8009de6:	e029      	b.n	8009e3c <USB_ActivateEndpoint+0x300>
 8009de8:	ffff898f 	.word	0xffff898f
 8009dec:	ffff8080 	.word	0xffff8080
 8009df0:	ffff8f8f 	.word	0xffff8f8f
 8009df4:	ffff80c0 	.word	0xffff80c0
 8009df8:	ffff8fbf 	.word	0xffff8fbf
 8009dfc:	00000404 	.word	0x00000404
 8009e00:	00000406 	.word	0x00000406
 8009e04:	ffff8000 	.word	0xffff8000
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	691b      	ldr	r3, [r3, #16]
 8009e0c:	095b      	lsrs	r3, r3, #5
 8009e0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	221f      	movs	r2, #31
 8009e16:	4013      	ands	r3, r2
 8009e18:	d102      	bne.n	8009e20 <USB_ActivateEndpoint+0x2e4>
 8009e1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e1c:	3b01      	subs	r3, #1
 8009e1e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e22:	881b      	ldrh	r3, [r3, #0]
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	029b      	lsls	r3, r3, #10
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	4ab5      	ldr	r2, [pc, #724]	@ (800a108 <USB_ActivateEndpoint+0x5cc>)
 8009e34:	4313      	orrs	r3, r2
 8009e36:	b29a      	uxth	r2, r3
 8009e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	18d2      	adds	r2, r2, r3
 8009e46:	2122      	movs	r1, #34	@ 0x22
 8009e48:	187b      	adds	r3, r7, r1
 8009e4a:	8812      	ldrh	r2, [r2, #0]
 8009e4c:	801a      	strh	r2, [r3, #0]
 8009e4e:	187b      	adds	r3, r7, r1
 8009e50:	881a      	ldrh	r2, [r3, #0]
 8009e52:	2380      	movs	r3, #128	@ 0x80
 8009e54:	01db      	lsls	r3, r3, #7
 8009e56:	4013      	ands	r3, r2
 8009e58:	d016      	beq.n	8009e88 <USB_ActivateEndpoint+0x34c>
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	18d3      	adds	r3, r2, r3
 8009e64:	881b      	ldrh	r3, [r3, #0]
 8009e66:	b29a      	uxth	r2, r3
 8009e68:	2020      	movs	r0, #32
 8009e6a:	183b      	adds	r3, r7, r0
 8009e6c:	49a7      	ldr	r1, [pc, #668]	@ (800a10c <USB_ActivateEndpoint+0x5d0>)
 8009e6e:	400a      	ands	r2, r1
 8009e70:	801a      	strh	r2, [r3, #0]
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	18d3      	adds	r3, r2, r3
 8009e7c:	183a      	adds	r2, r7, r0
 8009e7e:	8812      	ldrh	r2, [r2, #0]
 8009e80:	49a3      	ldr	r1, [pc, #652]	@ (800a110 <USB_ActivateEndpoint+0x5d4>)
 8009e82:	430a      	orrs	r2, r1
 8009e84:	b292      	uxth	r2, r2
 8009e86:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d125      	bne.n	8009edc <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	18d3      	adds	r3, r2, r3
 8009e9a:	881b      	ldrh	r3, [r3, #0]
 8009e9c:	b29a      	uxth	r2, r3
 8009e9e:	201c      	movs	r0, #28
 8009ea0:	183b      	adds	r3, r7, r0
 8009ea2:	499c      	ldr	r1, [pc, #624]	@ (800a114 <USB_ActivateEndpoint+0x5d8>)
 8009ea4:	400a      	ands	r2, r1
 8009ea6:	801a      	strh	r2, [r3, #0]
 8009ea8:	183b      	adds	r3, r7, r0
 8009eaa:	183a      	adds	r2, r7, r0
 8009eac:	8812      	ldrh	r2, [r2, #0]
 8009eae:	2180      	movs	r1, #128	@ 0x80
 8009eb0:	0149      	lsls	r1, r1, #5
 8009eb2:	404a      	eors	r2, r1
 8009eb4:	801a      	strh	r2, [r3, #0]
 8009eb6:	183b      	adds	r3, r7, r0
 8009eb8:	183a      	adds	r2, r7, r0
 8009eba:	8812      	ldrh	r2, [r2, #0]
 8009ebc:	2180      	movs	r1, #128	@ 0x80
 8009ebe:	0189      	lsls	r1, r1, #6
 8009ec0:	404a      	eors	r2, r1
 8009ec2:	801a      	strh	r2, [r3, #0]
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	18d3      	adds	r3, r2, r3
 8009ece:	183a      	adds	r2, r7, r0
 8009ed0:	8812      	ldrh	r2, [r2, #0]
 8009ed2:	4991      	ldr	r1, [pc, #580]	@ (800a118 <USB_ActivateEndpoint+0x5dc>)
 8009ed4:	430a      	orrs	r2, r1
 8009ed6:	b292      	uxth	r2, r2
 8009ed8:	801a      	strh	r2, [r3, #0]
 8009eda:	e1c4      	b.n	800a266 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	18d3      	adds	r3, r2, r3
 8009ee6:	881b      	ldrh	r3, [r3, #0]
 8009ee8:	b29a      	uxth	r2, r3
 8009eea:	201e      	movs	r0, #30
 8009eec:	183b      	adds	r3, r7, r0
 8009eee:	4989      	ldr	r1, [pc, #548]	@ (800a114 <USB_ActivateEndpoint+0x5d8>)
 8009ef0:	400a      	ands	r2, r1
 8009ef2:	801a      	strh	r2, [r3, #0]
 8009ef4:	183b      	adds	r3, r7, r0
 8009ef6:	183a      	adds	r2, r7, r0
 8009ef8:	8812      	ldrh	r2, [r2, #0]
 8009efa:	2180      	movs	r1, #128	@ 0x80
 8009efc:	0189      	lsls	r1, r1, #6
 8009efe:	404a      	eors	r2, r1
 8009f00:	801a      	strh	r2, [r3, #0]
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	18d3      	adds	r3, r2, r3
 8009f0c:	183a      	adds	r2, r7, r0
 8009f0e:	8812      	ldrh	r2, [r2, #0]
 8009f10:	4981      	ldr	r1, [pc, #516]	@ (800a118 <USB_ActivateEndpoint+0x5dc>)
 8009f12:	430a      	orrs	r2, r1
 8009f14:	b292      	uxth	r2, r2
 8009f16:	801a      	strh	r2, [r3, #0]
 8009f18:	e1a5      	b.n	800a266 <USB_ActivateEndpoint+0x72a>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	78db      	ldrb	r3, [r3, #3]
 8009f1e:	2b02      	cmp	r3, #2
 8009f20:	d117      	bne.n	8009f52 <USB_ActivateEndpoint+0x416>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	18d3      	adds	r3, r2, r3
 8009f2c:	881b      	ldrh	r3, [r3, #0]
 8009f2e:	b29a      	uxth	r2, r3
 8009f30:	2062      	movs	r0, #98	@ 0x62
 8009f32:	183b      	adds	r3, r7, r0
 8009f34:	4975      	ldr	r1, [pc, #468]	@ (800a10c <USB_ActivateEndpoint+0x5d0>)
 8009f36:	400a      	ands	r2, r1
 8009f38:	801a      	strh	r2, [r3, #0]
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	18d3      	adds	r3, r2, r3
 8009f44:	183a      	adds	r2, r7, r0
 8009f46:	8812      	ldrh	r2, [r2, #0]
 8009f48:	4974      	ldr	r1, [pc, #464]	@ (800a11c <USB_ActivateEndpoint+0x5e0>)
 8009f4a:	430a      	orrs	r2, r1
 8009f4c:	b292      	uxth	r2, r2
 8009f4e:	801a      	strh	r2, [r3, #0]
 8009f50:	e016      	b.n	8009f80 <USB_ActivateEndpoint+0x444>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	18d3      	adds	r3, r2, r3
 8009f5c:	881b      	ldrh	r3, [r3, #0]
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	2064      	movs	r0, #100	@ 0x64
 8009f62:	183b      	adds	r3, r7, r0
 8009f64:	496e      	ldr	r1, [pc, #440]	@ (800a120 <USB_ActivateEndpoint+0x5e4>)
 8009f66:	400a      	ands	r2, r1
 8009f68:	801a      	strh	r2, [r3, #0]
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	18d3      	adds	r3, r2, r3
 8009f74:	183a      	adds	r2, r7, r0
 8009f76:	8812      	ldrh	r2, [r2, #0]
 8009f78:	4967      	ldr	r1, [pc, #412]	@ (800a118 <USB_ActivateEndpoint+0x5dc>)
 8009f7a:	430a      	orrs	r2, r1
 8009f7c:	b292      	uxth	r2, r2
 8009f7e:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2250      	movs	r2, #80	@ 0x50
 8009f88:	5a9b      	ldrh	r3, [r3, r2]
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	001a      	movs	r2, r3
 8009f8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f90:	189b      	adds	r3, r3, r2
 8009f92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	00da      	lsls	r2, r3, #3
 8009f9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f9c:	18d3      	adds	r3, r2, r3
 8009f9e:	2280      	movs	r2, #128	@ 0x80
 8009fa0:	00d2      	lsls	r2, r2, #3
 8009fa2:	4694      	mov	ip, r2
 8009fa4:	4463      	add	r3, ip
 8009fa6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	891b      	ldrh	r3, [r3, #8]
 8009fac:	085b      	lsrs	r3, r3, #1
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	18db      	adds	r3, r3, r3
 8009fb2:	b29a      	uxth	r2, r3
 8009fb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009fb6:	801a      	strh	r2, [r3, #0]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	657b      	str	r3, [r7, #84]	@ 0x54
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2250      	movs	r2, #80	@ 0x50
 8009fc0:	5a9b      	ldrh	r3, [r3, r2]
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	001a      	movs	r2, r3
 8009fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fc8:	189b      	adds	r3, r3, r2
 8009fca:	657b      	str	r3, [r7, #84]	@ 0x54
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	00da      	lsls	r2, r3, #3
 8009fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fd4:	18d3      	adds	r3, r2, r3
 8009fd6:	4a53      	ldr	r2, [pc, #332]	@ (800a124 <USB_ActivateEndpoint+0x5e8>)
 8009fd8:	4694      	mov	ip, r2
 8009fda:	4463      	add	r3, ip
 8009fdc:	653b      	str	r3, [r7, #80]	@ 0x50
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	895b      	ldrh	r3, [r3, #10]
 8009fe2:	085b      	lsrs	r3, r3, #1
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	18db      	adds	r3, r3, r3
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fec:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	785b      	ldrb	r3, [r3, #1]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d000      	beq.n	8009ff8 <USB_ActivateEndpoint+0x4bc>
 8009ff6:	e09b      	b.n	800a130 <USB_ActivateEndpoint+0x5f4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	18d2      	adds	r2, r2, r3
 800a002:	2140      	movs	r1, #64	@ 0x40
 800a004:	187b      	adds	r3, r7, r1
 800a006:	8812      	ldrh	r2, [r2, #0]
 800a008:	801a      	strh	r2, [r3, #0]
 800a00a:	187b      	adds	r3, r7, r1
 800a00c:	881a      	ldrh	r2, [r3, #0]
 800a00e:	2380      	movs	r3, #128	@ 0x80
 800a010:	01db      	lsls	r3, r3, #7
 800a012:	4013      	ands	r3, r2
 800a014:	d016      	beq.n	800a044 <USB_ActivateEndpoint+0x508>
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	18d3      	adds	r3, r2, r3
 800a020:	881b      	ldrh	r3, [r3, #0]
 800a022:	b29a      	uxth	r2, r3
 800a024:	203e      	movs	r0, #62	@ 0x3e
 800a026:	183b      	adds	r3, r7, r0
 800a028:	4938      	ldr	r1, [pc, #224]	@ (800a10c <USB_ActivateEndpoint+0x5d0>)
 800a02a:	400a      	ands	r2, r1
 800a02c:	801a      	strh	r2, [r3, #0]
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	18d3      	adds	r3, r2, r3
 800a038:	183a      	adds	r2, r7, r0
 800a03a:	8812      	ldrh	r2, [r2, #0]
 800a03c:	4934      	ldr	r1, [pc, #208]	@ (800a110 <USB_ActivateEndpoint+0x5d4>)
 800a03e:	430a      	orrs	r2, r1
 800a040:	b292      	uxth	r2, r2
 800a042:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	18d2      	adds	r2, r2, r3
 800a04e:	213c      	movs	r1, #60	@ 0x3c
 800a050:	187b      	adds	r3, r7, r1
 800a052:	8812      	ldrh	r2, [r2, #0]
 800a054:	801a      	strh	r2, [r3, #0]
 800a056:	187b      	adds	r3, r7, r1
 800a058:	881b      	ldrh	r3, [r3, #0]
 800a05a:	2240      	movs	r2, #64	@ 0x40
 800a05c:	4013      	ands	r3, r2
 800a05e:	d016      	beq.n	800a08e <USB_ActivateEndpoint+0x552>
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	18d3      	adds	r3, r2, r3
 800a06a:	881b      	ldrh	r3, [r3, #0]
 800a06c:	b29a      	uxth	r2, r3
 800a06e:	203a      	movs	r0, #58	@ 0x3a
 800a070:	183b      	adds	r3, r7, r0
 800a072:	4926      	ldr	r1, [pc, #152]	@ (800a10c <USB_ActivateEndpoint+0x5d0>)
 800a074:	400a      	ands	r2, r1
 800a076:	801a      	strh	r2, [r3, #0]
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	18d3      	adds	r3, r2, r3
 800a082:	183a      	adds	r2, r7, r0
 800a084:	8812      	ldrh	r2, [r2, #0]
 800a086:	4928      	ldr	r1, [pc, #160]	@ (800a128 <USB_ActivateEndpoint+0x5ec>)
 800a088:	430a      	orrs	r2, r1
 800a08a:	b292      	uxth	r2, r2
 800a08c:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	18d3      	adds	r3, r2, r3
 800a098:	881b      	ldrh	r3, [r3, #0]
 800a09a:	b29a      	uxth	r2, r3
 800a09c:	2038      	movs	r0, #56	@ 0x38
 800a09e:	183b      	adds	r3, r7, r0
 800a0a0:	491c      	ldr	r1, [pc, #112]	@ (800a114 <USB_ActivateEndpoint+0x5d8>)
 800a0a2:	400a      	ands	r2, r1
 800a0a4:	801a      	strh	r2, [r3, #0]
 800a0a6:	183b      	adds	r3, r7, r0
 800a0a8:	183a      	adds	r2, r7, r0
 800a0aa:	8812      	ldrh	r2, [r2, #0]
 800a0ac:	2180      	movs	r1, #128	@ 0x80
 800a0ae:	0149      	lsls	r1, r1, #5
 800a0b0:	404a      	eors	r2, r1
 800a0b2:	801a      	strh	r2, [r3, #0]
 800a0b4:	183b      	adds	r3, r7, r0
 800a0b6:	183a      	adds	r2, r7, r0
 800a0b8:	8812      	ldrh	r2, [r2, #0]
 800a0ba:	2180      	movs	r1, #128	@ 0x80
 800a0bc:	0189      	lsls	r1, r1, #6
 800a0be:	404a      	eors	r2, r1
 800a0c0:	801a      	strh	r2, [r3, #0]
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	18d3      	adds	r3, r2, r3
 800a0cc:	183a      	adds	r2, r7, r0
 800a0ce:	8812      	ldrh	r2, [r2, #0]
 800a0d0:	4911      	ldr	r1, [pc, #68]	@ (800a118 <USB_ActivateEndpoint+0x5dc>)
 800a0d2:	430a      	orrs	r2, r1
 800a0d4:	b292      	uxth	r2, r2
 800a0d6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	18d3      	adds	r3, r2, r3
 800a0e2:	881b      	ldrh	r3, [r3, #0]
 800a0e4:	b29a      	uxth	r2, r3
 800a0e6:	2036      	movs	r0, #54	@ 0x36
 800a0e8:	183b      	adds	r3, r7, r0
 800a0ea:	4910      	ldr	r1, [pc, #64]	@ (800a12c <USB_ActivateEndpoint+0x5f0>)
 800a0ec:	400a      	ands	r2, r1
 800a0ee:	801a      	strh	r2, [r3, #0]
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	18d3      	adds	r3, r2, r3
 800a0fa:	183a      	adds	r2, r7, r0
 800a0fc:	8812      	ldrh	r2, [r2, #0]
 800a0fe:	4906      	ldr	r1, [pc, #24]	@ (800a118 <USB_ActivateEndpoint+0x5dc>)
 800a100:	430a      	orrs	r2, r1
 800a102:	b292      	uxth	r2, r2
 800a104:	801a      	strh	r2, [r3, #0]
 800a106:	e0ae      	b.n	800a266 <USB_ActivateEndpoint+0x72a>
 800a108:	ffff8000 	.word	0xffff8000
 800a10c:	ffff8f8f 	.word	0xffff8f8f
 800a110:	ffffc080 	.word	0xffffc080
 800a114:	ffffbf8f 	.word	0xffffbf8f
 800a118:	ffff8080 	.word	0xffff8080
 800a11c:	ffff8180 	.word	0xffff8180
 800a120:	ffff8e8f 	.word	0xffff8e8f
 800a124:	00000404 	.word	0x00000404
 800a128:	ffff80c0 	.word	0xffff80c0
 800a12c:	ffff8fbf 	.word	0xffff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	18d2      	adds	r2, r2, r3
 800a13a:	214e      	movs	r1, #78	@ 0x4e
 800a13c:	187b      	adds	r3, r7, r1
 800a13e:	8812      	ldrh	r2, [r2, #0]
 800a140:	801a      	strh	r2, [r3, #0]
 800a142:	187b      	adds	r3, r7, r1
 800a144:	881a      	ldrh	r2, [r3, #0]
 800a146:	2380      	movs	r3, #128	@ 0x80
 800a148:	01db      	lsls	r3, r3, #7
 800a14a:	4013      	ands	r3, r2
 800a14c:	d016      	beq.n	800a17c <USB_ActivateEndpoint+0x640>
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	18d3      	adds	r3, r2, r3
 800a158:	881b      	ldrh	r3, [r3, #0]
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	204c      	movs	r0, #76	@ 0x4c
 800a15e:	183b      	adds	r3, r7, r0
 800a160:	4944      	ldr	r1, [pc, #272]	@ (800a274 <USB_ActivateEndpoint+0x738>)
 800a162:	400a      	ands	r2, r1
 800a164:	801a      	strh	r2, [r3, #0]
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	18d3      	adds	r3, r2, r3
 800a170:	183a      	adds	r2, r7, r0
 800a172:	8812      	ldrh	r2, [r2, #0]
 800a174:	4940      	ldr	r1, [pc, #256]	@ (800a278 <USB_ActivateEndpoint+0x73c>)
 800a176:	430a      	orrs	r2, r1
 800a178:	b292      	uxth	r2, r2
 800a17a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	18d2      	adds	r2, r2, r3
 800a186:	214a      	movs	r1, #74	@ 0x4a
 800a188:	187b      	adds	r3, r7, r1
 800a18a:	8812      	ldrh	r2, [r2, #0]
 800a18c:	801a      	strh	r2, [r3, #0]
 800a18e:	187b      	adds	r3, r7, r1
 800a190:	881b      	ldrh	r3, [r3, #0]
 800a192:	2240      	movs	r2, #64	@ 0x40
 800a194:	4013      	ands	r3, r2
 800a196:	d016      	beq.n	800a1c6 <USB_ActivateEndpoint+0x68a>
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	18d3      	adds	r3, r2, r3
 800a1a2:	881b      	ldrh	r3, [r3, #0]
 800a1a4:	b29a      	uxth	r2, r3
 800a1a6:	2048      	movs	r0, #72	@ 0x48
 800a1a8:	183b      	adds	r3, r7, r0
 800a1aa:	4932      	ldr	r1, [pc, #200]	@ (800a274 <USB_ActivateEndpoint+0x738>)
 800a1ac:	400a      	ands	r2, r1
 800a1ae:	801a      	strh	r2, [r3, #0]
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	18d3      	adds	r3, r2, r3
 800a1ba:	183a      	adds	r2, r7, r0
 800a1bc:	8812      	ldrh	r2, [r2, #0]
 800a1be:	492f      	ldr	r1, [pc, #188]	@ (800a27c <USB_ActivateEndpoint+0x740>)
 800a1c0:	430a      	orrs	r2, r1
 800a1c2:	b292      	uxth	r2, r2
 800a1c4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	78db      	ldrb	r3, [r3, #3]
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d01d      	beq.n	800a20a <USB_ActivateEndpoint+0x6ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	18d3      	adds	r3, r2, r3
 800a1d8:	881b      	ldrh	r3, [r3, #0]
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	2044      	movs	r0, #68	@ 0x44
 800a1de:	183b      	adds	r3, r7, r0
 800a1e0:	4927      	ldr	r1, [pc, #156]	@ (800a280 <USB_ActivateEndpoint+0x744>)
 800a1e2:	400a      	ands	r2, r1
 800a1e4:	801a      	strh	r2, [r3, #0]
 800a1e6:	183b      	adds	r3, r7, r0
 800a1e8:	183a      	adds	r2, r7, r0
 800a1ea:	8812      	ldrh	r2, [r2, #0]
 800a1ec:	2120      	movs	r1, #32
 800a1ee:	404a      	eors	r2, r1
 800a1f0:	801a      	strh	r2, [r3, #0]
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	18d3      	adds	r3, r2, r3
 800a1fc:	183a      	adds	r2, r7, r0
 800a1fe:	8812      	ldrh	r2, [r2, #0]
 800a200:	4920      	ldr	r1, [pc, #128]	@ (800a284 <USB_ActivateEndpoint+0x748>)
 800a202:	430a      	orrs	r2, r1
 800a204:	b292      	uxth	r2, r2
 800a206:	801a      	strh	r2, [r3, #0]
 800a208:	e016      	b.n	800a238 <USB_ActivateEndpoint+0x6fc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	18d3      	adds	r3, r2, r3
 800a214:	881b      	ldrh	r3, [r3, #0]
 800a216:	b29a      	uxth	r2, r3
 800a218:	2046      	movs	r0, #70	@ 0x46
 800a21a:	183b      	adds	r3, r7, r0
 800a21c:	4918      	ldr	r1, [pc, #96]	@ (800a280 <USB_ActivateEndpoint+0x744>)
 800a21e:	400a      	ands	r2, r1
 800a220:	801a      	strh	r2, [r3, #0]
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	18d3      	adds	r3, r2, r3
 800a22c:	183a      	adds	r2, r7, r0
 800a22e:	8812      	ldrh	r2, [r2, #0]
 800a230:	4914      	ldr	r1, [pc, #80]	@ (800a284 <USB_ActivateEndpoint+0x748>)
 800a232:	430a      	orrs	r2, r1
 800a234:	b292      	uxth	r2, r2
 800a236:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	18d3      	adds	r3, r2, r3
 800a242:	881b      	ldrh	r3, [r3, #0]
 800a244:	b29a      	uxth	r2, r3
 800a246:	2042      	movs	r0, #66	@ 0x42
 800a248:	183b      	adds	r3, r7, r0
 800a24a:	490f      	ldr	r1, [pc, #60]	@ (800a288 <USB_ActivateEndpoint+0x74c>)
 800a24c:	400a      	ands	r2, r1
 800a24e:	801a      	strh	r2, [r3, #0]
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	18d3      	adds	r3, r2, r3
 800a25a:	183a      	adds	r2, r7, r0
 800a25c:	8812      	ldrh	r2, [r2, #0]
 800a25e:	4909      	ldr	r1, [pc, #36]	@ (800a284 <USB_ActivateEndpoint+0x748>)
 800a260:	430a      	orrs	r2, r1
 800a262:	b292      	uxth	r2, r2
 800a264:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a266:	236f      	movs	r3, #111	@ 0x6f
 800a268:	18fb      	adds	r3, r7, r3
 800a26a:	781b      	ldrb	r3, [r3, #0]
}
 800a26c:	0018      	movs	r0, r3
 800a26e:	46bd      	mov	sp, r7
 800a270:	b01c      	add	sp, #112	@ 0x70
 800a272:	bd80      	pop	{r7, pc}
 800a274:	ffff8f8f 	.word	0xffff8f8f
 800a278:	ffffc080 	.word	0xffffc080
 800a27c:	ffff80c0 	.word	0xffff80c0
 800a280:	ffff8fbf 	.word	0xffff8fbf
 800a284:	ffff8080 	.word	0xffff8080
 800a288:	ffffbf8f 	.word	0xffffbf8f

0800a28c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b08c      	sub	sp, #48	@ 0x30
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	7b1b      	ldrb	r3, [r3, #12]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d000      	beq.n	800a2a0 <USB_DeactivateEndpoint+0x14>
 800a29e:	e07e      	b.n	800a39e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	785b      	ldrb	r3, [r3, #1]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d03c      	beq.n	800a322 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	18d2      	adds	r2, r2, r3
 800a2b2:	210c      	movs	r1, #12
 800a2b4:	187b      	adds	r3, r7, r1
 800a2b6:	8812      	ldrh	r2, [r2, #0]
 800a2b8:	801a      	strh	r2, [r3, #0]
 800a2ba:	187b      	adds	r3, r7, r1
 800a2bc:	881b      	ldrh	r3, [r3, #0]
 800a2be:	2240      	movs	r2, #64	@ 0x40
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	d016      	beq.n	800a2f2 <USB_DeactivateEndpoint+0x66>
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	18d3      	adds	r3, r2, r3
 800a2ce:	881b      	ldrh	r3, [r3, #0]
 800a2d0:	b29a      	uxth	r2, r3
 800a2d2:	200a      	movs	r0, #10
 800a2d4:	183b      	adds	r3, r7, r0
 800a2d6:	49c7      	ldr	r1, [pc, #796]	@ (800a5f4 <USB_DeactivateEndpoint+0x368>)
 800a2d8:	400a      	ands	r2, r1
 800a2da:	801a      	strh	r2, [r3, #0]
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	18d3      	adds	r3, r2, r3
 800a2e6:	183a      	adds	r2, r7, r0
 800a2e8:	8812      	ldrh	r2, [r2, #0]
 800a2ea:	49c3      	ldr	r1, [pc, #780]	@ (800a5f8 <USB_DeactivateEndpoint+0x36c>)
 800a2ec:	430a      	orrs	r2, r1
 800a2ee:	b292      	uxth	r2, r2
 800a2f0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	18d3      	adds	r3, r2, r3
 800a2fc:	881b      	ldrh	r3, [r3, #0]
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	2008      	movs	r0, #8
 800a302:	183b      	adds	r3, r7, r0
 800a304:	49bd      	ldr	r1, [pc, #756]	@ (800a5fc <USB_DeactivateEndpoint+0x370>)
 800a306:	400a      	ands	r2, r1
 800a308:	801a      	strh	r2, [r3, #0]
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	18d3      	adds	r3, r2, r3
 800a314:	183a      	adds	r2, r7, r0
 800a316:	8812      	ldrh	r2, [r2, #0]
 800a318:	49b9      	ldr	r1, [pc, #740]	@ (800a600 <USB_DeactivateEndpoint+0x374>)
 800a31a:	430a      	orrs	r2, r1
 800a31c:	b292      	uxth	r2, r2
 800a31e:	801a      	strh	r2, [r3, #0]
 800a320:	e163      	b.n	800a5ea <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	18d2      	adds	r2, r2, r3
 800a32c:	2112      	movs	r1, #18
 800a32e:	187b      	adds	r3, r7, r1
 800a330:	8812      	ldrh	r2, [r2, #0]
 800a332:	801a      	strh	r2, [r3, #0]
 800a334:	187b      	adds	r3, r7, r1
 800a336:	881a      	ldrh	r2, [r3, #0]
 800a338:	2380      	movs	r3, #128	@ 0x80
 800a33a:	01db      	lsls	r3, r3, #7
 800a33c:	4013      	ands	r3, r2
 800a33e:	d016      	beq.n	800a36e <USB_DeactivateEndpoint+0xe2>
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	18d3      	adds	r3, r2, r3
 800a34a:	881b      	ldrh	r3, [r3, #0]
 800a34c:	b29a      	uxth	r2, r3
 800a34e:	2010      	movs	r0, #16
 800a350:	183b      	adds	r3, r7, r0
 800a352:	49a8      	ldr	r1, [pc, #672]	@ (800a5f4 <USB_DeactivateEndpoint+0x368>)
 800a354:	400a      	ands	r2, r1
 800a356:	801a      	strh	r2, [r3, #0]
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	18d3      	adds	r3, r2, r3
 800a362:	183a      	adds	r2, r7, r0
 800a364:	8812      	ldrh	r2, [r2, #0]
 800a366:	49a7      	ldr	r1, [pc, #668]	@ (800a604 <USB_DeactivateEndpoint+0x378>)
 800a368:	430a      	orrs	r2, r1
 800a36a:	b292      	uxth	r2, r2
 800a36c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	18d3      	adds	r3, r2, r3
 800a378:	881b      	ldrh	r3, [r3, #0]
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	200e      	movs	r0, #14
 800a37e:	183b      	adds	r3, r7, r0
 800a380:	49a1      	ldr	r1, [pc, #644]	@ (800a608 <USB_DeactivateEndpoint+0x37c>)
 800a382:	400a      	ands	r2, r1
 800a384:	801a      	strh	r2, [r3, #0]
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	18d3      	adds	r3, r2, r3
 800a390:	183a      	adds	r2, r7, r0
 800a392:	8812      	ldrh	r2, [r2, #0]
 800a394:	499a      	ldr	r1, [pc, #616]	@ (800a600 <USB_DeactivateEndpoint+0x374>)
 800a396:	430a      	orrs	r2, r1
 800a398:	b292      	uxth	r2, r2
 800a39a:	801a      	strh	r2, [r3, #0]
 800a39c:	e125      	b.n	800a5ea <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	785b      	ldrb	r3, [r3, #1]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d000      	beq.n	800a3a8 <USB_DeactivateEndpoint+0x11c>
 800a3a6:	e090      	b.n	800a4ca <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	18d2      	adds	r2, r2, r3
 800a3b2:	2120      	movs	r1, #32
 800a3b4:	187b      	adds	r3, r7, r1
 800a3b6:	8812      	ldrh	r2, [r2, #0]
 800a3b8:	801a      	strh	r2, [r3, #0]
 800a3ba:	187b      	adds	r3, r7, r1
 800a3bc:	881a      	ldrh	r2, [r3, #0]
 800a3be:	2380      	movs	r3, #128	@ 0x80
 800a3c0:	01db      	lsls	r3, r3, #7
 800a3c2:	4013      	ands	r3, r2
 800a3c4:	d016      	beq.n	800a3f4 <USB_DeactivateEndpoint+0x168>
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	18d3      	adds	r3, r2, r3
 800a3d0:	881b      	ldrh	r3, [r3, #0]
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	201e      	movs	r0, #30
 800a3d6:	183b      	adds	r3, r7, r0
 800a3d8:	4986      	ldr	r1, [pc, #536]	@ (800a5f4 <USB_DeactivateEndpoint+0x368>)
 800a3da:	400a      	ands	r2, r1
 800a3dc:	801a      	strh	r2, [r3, #0]
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	18d3      	adds	r3, r2, r3
 800a3e8:	183a      	adds	r2, r7, r0
 800a3ea:	8812      	ldrh	r2, [r2, #0]
 800a3ec:	4985      	ldr	r1, [pc, #532]	@ (800a604 <USB_DeactivateEndpoint+0x378>)
 800a3ee:	430a      	orrs	r2, r1
 800a3f0:	b292      	uxth	r2, r2
 800a3f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	18d2      	adds	r2, r2, r3
 800a3fe:	211c      	movs	r1, #28
 800a400:	187b      	adds	r3, r7, r1
 800a402:	8812      	ldrh	r2, [r2, #0]
 800a404:	801a      	strh	r2, [r3, #0]
 800a406:	187b      	adds	r3, r7, r1
 800a408:	881b      	ldrh	r3, [r3, #0]
 800a40a:	2240      	movs	r2, #64	@ 0x40
 800a40c:	4013      	ands	r3, r2
 800a40e:	d016      	beq.n	800a43e <USB_DeactivateEndpoint+0x1b2>
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	18d3      	adds	r3, r2, r3
 800a41a:	881b      	ldrh	r3, [r3, #0]
 800a41c:	b29a      	uxth	r2, r3
 800a41e:	201a      	movs	r0, #26
 800a420:	183b      	adds	r3, r7, r0
 800a422:	4974      	ldr	r1, [pc, #464]	@ (800a5f4 <USB_DeactivateEndpoint+0x368>)
 800a424:	400a      	ands	r2, r1
 800a426:	801a      	strh	r2, [r3, #0]
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	18d3      	adds	r3, r2, r3
 800a432:	183a      	adds	r2, r7, r0
 800a434:	8812      	ldrh	r2, [r2, #0]
 800a436:	4970      	ldr	r1, [pc, #448]	@ (800a5f8 <USB_DeactivateEndpoint+0x36c>)
 800a438:	430a      	orrs	r2, r1
 800a43a:	b292      	uxth	r2, r2
 800a43c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	18d3      	adds	r3, r2, r3
 800a448:	881b      	ldrh	r3, [r3, #0]
 800a44a:	b29a      	uxth	r2, r3
 800a44c:	2018      	movs	r0, #24
 800a44e:	183b      	adds	r3, r7, r0
 800a450:	4968      	ldr	r1, [pc, #416]	@ (800a5f4 <USB_DeactivateEndpoint+0x368>)
 800a452:	400a      	ands	r2, r1
 800a454:	801a      	strh	r2, [r3, #0]
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	18d3      	adds	r3, r2, r3
 800a460:	183a      	adds	r2, r7, r0
 800a462:	8812      	ldrh	r2, [r2, #0]
 800a464:	4964      	ldr	r1, [pc, #400]	@ (800a5f8 <USB_DeactivateEndpoint+0x36c>)
 800a466:	430a      	orrs	r2, r1
 800a468:	b292      	uxth	r2, r2
 800a46a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	18d3      	adds	r3, r2, r3
 800a476:	881b      	ldrh	r3, [r3, #0]
 800a478:	b29a      	uxth	r2, r3
 800a47a:	2016      	movs	r0, #22
 800a47c:	183b      	adds	r3, r7, r0
 800a47e:	4962      	ldr	r1, [pc, #392]	@ (800a608 <USB_DeactivateEndpoint+0x37c>)
 800a480:	400a      	ands	r2, r1
 800a482:	801a      	strh	r2, [r3, #0]
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	009b      	lsls	r3, r3, #2
 800a48c:	18d3      	adds	r3, r2, r3
 800a48e:	183a      	adds	r2, r7, r0
 800a490:	8812      	ldrh	r2, [r2, #0]
 800a492:	495b      	ldr	r1, [pc, #364]	@ (800a600 <USB_DeactivateEndpoint+0x374>)
 800a494:	430a      	orrs	r2, r1
 800a496:	b292      	uxth	r2, r2
 800a498:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	18d3      	adds	r3, r2, r3
 800a4a4:	881b      	ldrh	r3, [r3, #0]
 800a4a6:	b29a      	uxth	r2, r3
 800a4a8:	2014      	movs	r0, #20
 800a4aa:	183b      	adds	r3, r7, r0
 800a4ac:	4953      	ldr	r1, [pc, #332]	@ (800a5fc <USB_DeactivateEndpoint+0x370>)
 800a4ae:	400a      	ands	r2, r1
 800a4b0:	801a      	strh	r2, [r3, #0]
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	18d3      	adds	r3, r2, r3
 800a4bc:	183a      	adds	r2, r7, r0
 800a4be:	8812      	ldrh	r2, [r2, #0]
 800a4c0:	494f      	ldr	r1, [pc, #316]	@ (800a600 <USB_DeactivateEndpoint+0x374>)
 800a4c2:	430a      	orrs	r2, r1
 800a4c4:	b292      	uxth	r2, r2
 800a4c6:	801a      	strh	r2, [r3, #0]
 800a4c8:	e08f      	b.n	800a5ea <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	18d2      	adds	r2, r2, r3
 800a4d4:	212e      	movs	r1, #46	@ 0x2e
 800a4d6:	187b      	adds	r3, r7, r1
 800a4d8:	8812      	ldrh	r2, [r2, #0]
 800a4da:	801a      	strh	r2, [r3, #0]
 800a4dc:	187b      	adds	r3, r7, r1
 800a4de:	881a      	ldrh	r2, [r3, #0]
 800a4e0:	2380      	movs	r3, #128	@ 0x80
 800a4e2:	01db      	lsls	r3, r3, #7
 800a4e4:	4013      	ands	r3, r2
 800a4e6:	d016      	beq.n	800a516 <USB_DeactivateEndpoint+0x28a>
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	18d3      	adds	r3, r2, r3
 800a4f2:	881b      	ldrh	r3, [r3, #0]
 800a4f4:	b29a      	uxth	r2, r3
 800a4f6:	202c      	movs	r0, #44	@ 0x2c
 800a4f8:	183b      	adds	r3, r7, r0
 800a4fa:	493e      	ldr	r1, [pc, #248]	@ (800a5f4 <USB_DeactivateEndpoint+0x368>)
 800a4fc:	400a      	ands	r2, r1
 800a4fe:	801a      	strh	r2, [r3, #0]
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	18d3      	adds	r3, r2, r3
 800a50a:	183a      	adds	r2, r7, r0
 800a50c:	8812      	ldrh	r2, [r2, #0]
 800a50e:	493d      	ldr	r1, [pc, #244]	@ (800a604 <USB_DeactivateEndpoint+0x378>)
 800a510:	430a      	orrs	r2, r1
 800a512:	b292      	uxth	r2, r2
 800a514:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	18d2      	adds	r2, r2, r3
 800a520:	212a      	movs	r1, #42	@ 0x2a
 800a522:	187b      	adds	r3, r7, r1
 800a524:	8812      	ldrh	r2, [r2, #0]
 800a526:	801a      	strh	r2, [r3, #0]
 800a528:	187b      	adds	r3, r7, r1
 800a52a:	881b      	ldrh	r3, [r3, #0]
 800a52c:	2240      	movs	r2, #64	@ 0x40
 800a52e:	4013      	ands	r3, r2
 800a530:	d016      	beq.n	800a560 <USB_DeactivateEndpoint+0x2d4>
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	18d3      	adds	r3, r2, r3
 800a53c:	881b      	ldrh	r3, [r3, #0]
 800a53e:	b29a      	uxth	r2, r3
 800a540:	2028      	movs	r0, #40	@ 0x28
 800a542:	183b      	adds	r3, r7, r0
 800a544:	492b      	ldr	r1, [pc, #172]	@ (800a5f4 <USB_DeactivateEndpoint+0x368>)
 800a546:	400a      	ands	r2, r1
 800a548:	801a      	strh	r2, [r3, #0]
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	18d3      	adds	r3, r2, r3
 800a554:	183a      	adds	r2, r7, r0
 800a556:	8812      	ldrh	r2, [r2, #0]
 800a558:	4927      	ldr	r1, [pc, #156]	@ (800a5f8 <USB_DeactivateEndpoint+0x36c>)
 800a55a:	430a      	orrs	r2, r1
 800a55c:	b292      	uxth	r2, r2
 800a55e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	18d3      	adds	r3, r2, r3
 800a56a:	881b      	ldrh	r3, [r3, #0]
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	2026      	movs	r0, #38	@ 0x26
 800a570:	183b      	adds	r3, r7, r0
 800a572:	4920      	ldr	r1, [pc, #128]	@ (800a5f4 <USB_DeactivateEndpoint+0x368>)
 800a574:	400a      	ands	r2, r1
 800a576:	801a      	strh	r2, [r3, #0]
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	18d3      	adds	r3, r2, r3
 800a582:	183a      	adds	r2, r7, r0
 800a584:	8812      	ldrh	r2, [r2, #0]
 800a586:	491f      	ldr	r1, [pc, #124]	@ (800a604 <USB_DeactivateEndpoint+0x378>)
 800a588:	430a      	orrs	r2, r1
 800a58a:	b292      	uxth	r2, r2
 800a58c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	18d3      	adds	r3, r2, r3
 800a598:	881b      	ldrh	r3, [r3, #0]
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	2024      	movs	r0, #36	@ 0x24
 800a59e:	183b      	adds	r3, r7, r0
 800a5a0:	4916      	ldr	r1, [pc, #88]	@ (800a5fc <USB_DeactivateEndpoint+0x370>)
 800a5a2:	400a      	ands	r2, r1
 800a5a4:	801a      	strh	r2, [r3, #0]
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	18d3      	adds	r3, r2, r3
 800a5b0:	183a      	adds	r2, r7, r0
 800a5b2:	8812      	ldrh	r2, [r2, #0]
 800a5b4:	4912      	ldr	r1, [pc, #72]	@ (800a600 <USB_DeactivateEndpoint+0x374>)
 800a5b6:	430a      	orrs	r2, r1
 800a5b8:	b292      	uxth	r2, r2
 800a5ba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	18d3      	adds	r3, r2, r3
 800a5c6:	881b      	ldrh	r3, [r3, #0]
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	2022      	movs	r0, #34	@ 0x22
 800a5cc:	183b      	adds	r3, r7, r0
 800a5ce:	490e      	ldr	r1, [pc, #56]	@ (800a608 <USB_DeactivateEndpoint+0x37c>)
 800a5d0:	400a      	ands	r2, r1
 800a5d2:	801a      	strh	r2, [r3, #0]
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	18d3      	adds	r3, r2, r3
 800a5de:	183a      	adds	r2, r7, r0
 800a5e0:	8812      	ldrh	r2, [r2, #0]
 800a5e2:	4907      	ldr	r1, [pc, #28]	@ (800a600 <USB_DeactivateEndpoint+0x374>)
 800a5e4:	430a      	orrs	r2, r1
 800a5e6:	b292      	uxth	r2, r2
 800a5e8:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a5ea:	2300      	movs	r3, #0
}
 800a5ec:	0018      	movs	r0, r3
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	b00c      	add	sp, #48	@ 0x30
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	ffff8f8f 	.word	0xffff8f8f
 800a5f8:	ffff80c0 	.word	0xffff80c0
 800a5fc:	ffff8fbf 	.word	0xffff8fbf
 800a600:	ffff8080 	.word	0xffff8080
 800a604:	ffffc080 	.word	0xffffc080
 800a608:	ffffbf8f 	.word	0xffffbf8f

0800a60c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a60c:	b590      	push	{r4, r7, lr}
 800a60e:	b0c3      	sub	sp, #268	@ 0x10c
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	785b      	ldrb	r3, [r3, #1]
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d001      	beq.n	800a622 <USB_EPStartXfer+0x16>
 800a61e:	f000 fd2d 	bl	800b07c <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	699a      	ldr	r2, [r3, #24]
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d905      	bls.n	800a63a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	1d7a      	adds	r2, r7, #5
 800a634:	32ff      	adds	r2, #255	@ 0xff
 800a636:	6013      	str	r3, [r2, #0]
 800a638:	e004      	b.n	800a644 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	699b      	ldr	r3, [r3, #24]
 800a63e:	1d7a      	adds	r2, r7, #5
 800a640:	32ff      	adds	r2, #255	@ 0xff
 800a642:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	7b1b      	ldrb	r3, [r3, #12]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d125      	bne.n	800a698 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	6959      	ldr	r1, [r3, #20]
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	88da      	ldrh	r2, [r3, #6]
 800a654:	1d7b      	adds	r3, r7, #5
 800a656:	33ff      	adds	r3, #255	@ 0xff
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f001 fa3f 	bl	800bae0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	613b      	str	r3, [r7, #16]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2250      	movs	r2, #80	@ 0x50
 800a66a:	5a9b      	ldrh	r3, [r3, r2]
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	001a      	movs	r2, r3
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	189b      	adds	r3, r3, r2
 800a674:	613b      	str	r3, [r7, #16]
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	00da      	lsls	r2, r3, #3
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	18d3      	adds	r3, r2, r3
 800a680:	4ad7      	ldr	r2, [pc, #860]	@ (800a9e0 <USB_EPStartXfer+0x3d4>)
 800a682:	4694      	mov	ip, r2
 800a684:	4463      	add	r3, ip
 800a686:	60fb      	str	r3, [r7, #12]
 800a688:	1d7b      	adds	r3, r7, #5
 800a68a:	33ff      	adds	r3, #255	@ 0xff
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	b29a      	uxth	r2, r3
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	801a      	strh	r2, [r3, #0]
 800a694:	f000 fccd 	bl	800b032 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	78db      	ldrb	r3, [r3, #3]
 800a69c:	2b02      	cmp	r3, #2
 800a69e:	d000      	beq.n	800a6a2 <USB_EPStartXfer+0x96>
 800a6a0:	e362      	b.n	800ad68 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	6a1a      	ldr	r2, [r3, #32]
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	691b      	ldr	r3, [r3, #16]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d800      	bhi.n	800a6b0 <USB_EPStartXfer+0xa4>
 800a6ae:	e309      	b.n	800acc4 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a6b0:	687a      	ldr	r2, [r7, #4]
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	18d3      	adds	r3, r2, r3
 800a6ba:	881b      	ldrh	r3, [r3, #0]
 800a6bc:	b29a      	uxth	r2, r3
 800a6be:	2056      	movs	r0, #86	@ 0x56
 800a6c0:	183b      	adds	r3, r7, r0
 800a6c2:	49c8      	ldr	r1, [pc, #800]	@ (800a9e4 <USB_EPStartXfer+0x3d8>)
 800a6c4:	400a      	ands	r2, r1
 800a6c6:	801a      	strh	r2, [r3, #0]
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	18d3      	adds	r3, r2, r3
 800a6d2:	183a      	adds	r2, r7, r0
 800a6d4:	8812      	ldrh	r2, [r2, #0]
 800a6d6:	49c4      	ldr	r1, [pc, #784]	@ (800a9e8 <USB_EPStartXfer+0x3dc>)
 800a6d8:	430a      	orrs	r2, r1
 800a6da:	b292      	uxth	r2, r2
 800a6dc:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	6a1a      	ldr	r2, [r3, #32]
 800a6e2:	1d7b      	adds	r3, r7, #5
 800a6e4:	33ff      	adds	r3, #255	@ 0xff
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	1ad2      	subs	r2, r2, r3
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	18d3      	adds	r3, r2, r3
 800a6f8:	881b      	ldrh	r3, [r3, #0]
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	001a      	movs	r2, r3
 800a6fe:	2340      	movs	r3, #64	@ 0x40
 800a700:	4013      	ands	r3, r2
 800a702:	d100      	bne.n	800a706 <USB_EPStartXfer+0xfa>
 800a704:	e176      	b.n	800a9f4 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	633b      	str	r3, [r7, #48]	@ 0x30
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	785b      	ldrb	r3, [r3, #1]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d000      	beq.n	800a714 <USB_EPStartXfer+0x108>
 800a712:	e074      	b.n	800a7fe <USB_EPStartXfer+0x1f2>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2250      	movs	r2, #80	@ 0x50
 800a71c:	5a9b      	ldrh	r3, [r3, r2]
 800a71e:	b29b      	uxth	r3, r3
 800a720:	001a      	movs	r2, r3
 800a722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a724:	189b      	adds	r3, r3, r2
 800a726:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	00da      	lsls	r2, r3, #3
 800a72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a730:	18d3      	adds	r3, r2, r3
 800a732:	4aae      	ldr	r2, [pc, #696]	@ (800a9ec <USB_EPStartXfer+0x3e0>)
 800a734:	4694      	mov	ip, r2
 800a736:	4463      	add	r3, ip
 800a738:	627b      	str	r3, [r7, #36]	@ 0x24
 800a73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a73c:	881b      	ldrh	r3, [r3, #0]
 800a73e:	b29b      	uxth	r3, r3
 800a740:	059b      	lsls	r3, r3, #22
 800a742:	0d9b      	lsrs	r3, r3, #22
 800a744:	b29a      	uxth	r2, r3
 800a746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a748:	801a      	strh	r2, [r3, #0]
 800a74a:	1d7b      	adds	r3, r7, #5
 800a74c:	33ff      	adds	r3, #255	@ 0xff
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d108      	bne.n	800a766 <USB_EPStartXfer+0x15a>
 800a754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a756:	881b      	ldrh	r3, [r3, #0]
 800a758:	b29b      	uxth	r3, r3
 800a75a:	4aa5      	ldr	r2, [pc, #660]	@ (800a9f0 <USB_EPStartXfer+0x3e4>)
 800a75c:	4313      	orrs	r3, r2
 800a75e:	b29a      	uxth	r2, r3
 800a760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a762:	801a      	strh	r2, [r3, #0]
 800a764:	e066      	b.n	800a834 <USB_EPStartXfer+0x228>
 800a766:	1d7b      	adds	r3, r7, #5
 800a768:	33ff      	adds	r3, #255	@ 0xff
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2b3e      	cmp	r3, #62	@ 0x3e
 800a76e:	d821      	bhi.n	800a7b4 <USB_EPStartXfer+0x1a8>
 800a770:	1d7b      	adds	r3, r7, #5
 800a772:	33ff      	adds	r3, #255	@ 0xff
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	085b      	lsrs	r3, r3, #1
 800a778:	1c7a      	adds	r2, r7, #1
 800a77a:	32ff      	adds	r2, #255	@ 0xff
 800a77c:	6013      	str	r3, [r2, #0]
 800a77e:	1d7b      	adds	r3, r7, #5
 800a780:	33ff      	adds	r3, #255	@ 0xff
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2201      	movs	r2, #1
 800a786:	4013      	ands	r3, r2
 800a788:	d006      	beq.n	800a798 <USB_EPStartXfer+0x18c>
 800a78a:	1c7b      	adds	r3, r7, #1
 800a78c:	33ff      	adds	r3, #255	@ 0xff
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	3301      	adds	r3, #1
 800a792:	1c7a      	adds	r2, r7, #1
 800a794:	32ff      	adds	r2, #255	@ 0xff
 800a796:	6013      	str	r3, [r2, #0]
 800a798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79a:	881b      	ldrh	r3, [r3, #0]
 800a79c:	b29a      	uxth	r2, r3
 800a79e:	1c7b      	adds	r3, r7, #1
 800a7a0:	33ff      	adds	r3, #255	@ 0xff
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	029b      	lsls	r3, r3, #10
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	b29a      	uxth	r2, r3
 800a7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b0:	801a      	strh	r2, [r3, #0]
 800a7b2:	e03f      	b.n	800a834 <USB_EPStartXfer+0x228>
 800a7b4:	1d7b      	adds	r3, r7, #5
 800a7b6:	33ff      	adds	r3, #255	@ 0xff
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	095b      	lsrs	r3, r3, #5
 800a7bc:	1c7a      	adds	r2, r7, #1
 800a7be:	32ff      	adds	r2, #255	@ 0xff
 800a7c0:	6013      	str	r3, [r2, #0]
 800a7c2:	1d7b      	adds	r3, r7, #5
 800a7c4:	33ff      	adds	r3, #255	@ 0xff
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	221f      	movs	r2, #31
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	d106      	bne.n	800a7dc <USB_EPStartXfer+0x1d0>
 800a7ce:	1c7b      	adds	r3, r7, #1
 800a7d0:	33ff      	adds	r3, #255	@ 0xff
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	1c7a      	adds	r2, r7, #1
 800a7d8:	32ff      	adds	r2, #255	@ 0xff
 800a7da:	6013      	str	r3, [r2, #0]
 800a7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7de:	881b      	ldrh	r3, [r3, #0]
 800a7e0:	b29a      	uxth	r2, r3
 800a7e2:	1c7b      	adds	r3, r7, #1
 800a7e4:	33ff      	adds	r3, #255	@ 0xff
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	029b      	lsls	r3, r3, #10
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	4a7f      	ldr	r2, [pc, #508]	@ (800a9f0 <USB_EPStartXfer+0x3e4>)
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	b29a      	uxth	r2, r3
 800a7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7fa:	801a      	strh	r2, [r3, #0]
 800a7fc:	e01a      	b.n	800a834 <USB_EPStartXfer+0x228>
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	785b      	ldrb	r3, [r3, #1]
 800a802:	2b01      	cmp	r3, #1
 800a804:	d116      	bne.n	800a834 <USB_EPStartXfer+0x228>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2250      	movs	r2, #80	@ 0x50
 800a80a:	5a9b      	ldrh	r3, [r3, r2]
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	001a      	movs	r2, r3
 800a810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a812:	189b      	adds	r3, r3, r2
 800a814:	633b      	str	r3, [r7, #48]	@ 0x30
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	00da      	lsls	r2, r3, #3
 800a81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a81e:	18d3      	adds	r3, r2, r3
 800a820:	4a72      	ldr	r2, [pc, #456]	@ (800a9ec <USB_EPStartXfer+0x3e0>)
 800a822:	4694      	mov	ip, r2
 800a824:	4463      	add	r3, ip
 800a826:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a828:	1d7b      	adds	r3, r7, #5
 800a82a:	33ff      	adds	r3, #255	@ 0xff
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	b29a      	uxth	r2, r3
 800a830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a832:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a834:	2076      	movs	r0, #118	@ 0x76
 800a836:	183b      	adds	r3, r7, r0
 800a838:	683a      	ldr	r2, [r7, #0]
 800a83a:	8952      	ldrh	r2, [r2, #10]
 800a83c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	6959      	ldr	r1, [r3, #20]
 800a842:	1d7b      	adds	r3, r7, #5
 800a844:	33ff      	adds	r3, #255	@ 0xff
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	b29c      	uxth	r4, r3
 800a84a:	183b      	adds	r3, r7, r0
 800a84c:	881a      	ldrh	r2, [r3, #0]
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	0023      	movs	r3, r4
 800a852:	f001 f945 	bl	800bae0 <USB_WritePMA>
            ep->xfer_buff += len;
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	695a      	ldr	r2, [r3, #20]
 800a85a:	1d7b      	adds	r3, r7, #5
 800a85c:	33ff      	adds	r3, #255	@ 0xff
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	18d2      	adds	r2, r2, r3
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	6a1a      	ldr	r2, [r3, #32]
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d908      	bls.n	800a884 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	6a1a      	ldr	r2, [r3, #32]
 800a876:	1d7b      	adds	r3, r7, #5
 800a878:	33ff      	adds	r3, #255	@ 0xff
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	1ad2      	subs	r2, r2, r3
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	621a      	str	r2, [r3, #32]
 800a882:	e007      	b.n	800a894 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	6a1b      	ldr	r3, [r3, #32]
 800a888:	1d7a      	adds	r2, r7, #5
 800a88a:	32ff      	adds	r2, #255	@ 0xff
 800a88c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	2200      	movs	r2, #0
 800a892:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	785b      	ldrb	r3, [r3, #1]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d000      	beq.n	800a89e <USB_EPStartXfer+0x292>
 800a89c:	e070      	b.n	800a980 <USB_EPStartXfer+0x374>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	61bb      	str	r3, [r7, #24]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2250      	movs	r2, #80	@ 0x50
 800a8a6:	5a9b      	ldrh	r3, [r3, r2]
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	001a      	movs	r2, r3
 800a8ac:	69bb      	ldr	r3, [r7, #24]
 800a8ae:	189b      	adds	r3, r3, r2
 800a8b0:	61bb      	str	r3, [r7, #24]
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	00da      	lsls	r2, r3, #3
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	18d3      	adds	r3, r2, r3
 800a8bc:	4a48      	ldr	r2, [pc, #288]	@ (800a9e0 <USB_EPStartXfer+0x3d4>)
 800a8be:	4694      	mov	ip, r2
 800a8c0:	4463      	add	r3, ip
 800a8c2:	617b      	str	r3, [r7, #20]
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	881b      	ldrh	r3, [r3, #0]
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	059b      	lsls	r3, r3, #22
 800a8cc:	0d9b      	lsrs	r3, r3, #22
 800a8ce:	b29a      	uxth	r2, r3
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	801a      	strh	r2, [r3, #0]
 800a8d4:	1d7b      	adds	r3, r7, #5
 800a8d6:	33ff      	adds	r3, #255	@ 0xff
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d108      	bne.n	800a8f0 <USB_EPStartXfer+0x2e4>
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	881b      	ldrh	r3, [r3, #0]
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	4a42      	ldr	r2, [pc, #264]	@ (800a9f0 <USB_EPStartXfer+0x3e4>)
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	b29a      	uxth	r2, r3
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	801a      	strh	r2, [r3, #0]
 800a8ee:	e064      	b.n	800a9ba <USB_EPStartXfer+0x3ae>
 800a8f0:	1d7b      	adds	r3, r7, #5
 800a8f2:	33ff      	adds	r3, #255	@ 0xff
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2b3e      	cmp	r3, #62	@ 0x3e
 800a8f8:	d81f      	bhi.n	800a93a <USB_EPStartXfer+0x32e>
 800a8fa:	1d7b      	adds	r3, r7, #5
 800a8fc:	33ff      	adds	r3, #255	@ 0xff
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	085b      	lsrs	r3, r3, #1
 800a902:	21fc      	movs	r1, #252	@ 0xfc
 800a904:	187a      	adds	r2, r7, r1
 800a906:	6013      	str	r3, [r2, #0]
 800a908:	1d7b      	adds	r3, r7, #5
 800a90a:	33ff      	adds	r3, #255	@ 0xff
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2201      	movs	r2, #1
 800a910:	4013      	ands	r3, r2
 800a912:	d004      	beq.n	800a91e <USB_EPStartXfer+0x312>
 800a914:	187b      	adds	r3, r7, r1
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	3301      	adds	r3, #1
 800a91a:	187a      	adds	r2, r7, r1
 800a91c:	6013      	str	r3, [r2, #0]
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	881b      	ldrh	r3, [r3, #0]
 800a922:	b29a      	uxth	r2, r3
 800a924:	23fc      	movs	r3, #252	@ 0xfc
 800a926:	18fb      	adds	r3, r7, r3
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	029b      	lsls	r3, r3, #10
 800a92e:	b29b      	uxth	r3, r3
 800a930:	4313      	orrs	r3, r2
 800a932:	b29a      	uxth	r2, r3
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	801a      	strh	r2, [r3, #0]
 800a938:	e03f      	b.n	800a9ba <USB_EPStartXfer+0x3ae>
 800a93a:	1d7b      	adds	r3, r7, #5
 800a93c:	33ff      	adds	r3, #255	@ 0xff
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	095b      	lsrs	r3, r3, #5
 800a942:	21fc      	movs	r1, #252	@ 0xfc
 800a944:	187a      	adds	r2, r7, r1
 800a946:	6013      	str	r3, [r2, #0]
 800a948:	1d7b      	adds	r3, r7, #5
 800a94a:	33ff      	adds	r3, #255	@ 0xff
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	221f      	movs	r2, #31
 800a950:	4013      	ands	r3, r2
 800a952:	d104      	bne.n	800a95e <USB_EPStartXfer+0x352>
 800a954:	187b      	adds	r3, r7, r1
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	3b01      	subs	r3, #1
 800a95a:	187a      	adds	r2, r7, r1
 800a95c:	6013      	str	r3, [r2, #0]
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	881b      	ldrh	r3, [r3, #0]
 800a962:	b29a      	uxth	r2, r3
 800a964:	23fc      	movs	r3, #252	@ 0xfc
 800a966:	18fb      	adds	r3, r7, r3
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	029b      	lsls	r3, r3, #10
 800a96e:	b29b      	uxth	r3, r3
 800a970:	4313      	orrs	r3, r2
 800a972:	b29b      	uxth	r3, r3
 800a974:	4a1e      	ldr	r2, [pc, #120]	@ (800a9f0 <USB_EPStartXfer+0x3e4>)
 800a976:	4313      	orrs	r3, r2
 800a978:	b29a      	uxth	r2, r3
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	801a      	strh	r2, [r3, #0]
 800a97e:	e01c      	b.n	800a9ba <USB_EPStartXfer+0x3ae>
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	785b      	ldrb	r3, [r3, #1]
 800a984:	2b01      	cmp	r3, #1
 800a986:	d118      	bne.n	800a9ba <USB_EPStartXfer+0x3ae>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	623b      	str	r3, [r7, #32]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2250      	movs	r2, #80	@ 0x50
 800a990:	5a9b      	ldrh	r3, [r3, r2]
 800a992:	b29b      	uxth	r3, r3
 800a994:	001a      	movs	r2, r3
 800a996:	6a3b      	ldr	r3, [r7, #32]
 800a998:	189b      	adds	r3, r3, r2
 800a99a:	623b      	str	r3, [r7, #32]
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	00da      	lsls	r2, r3, #3
 800a9a2:	6a3b      	ldr	r3, [r7, #32]
 800a9a4:	18d3      	adds	r3, r2, r3
 800a9a6:	4a0e      	ldr	r2, [pc, #56]	@ (800a9e0 <USB_EPStartXfer+0x3d4>)
 800a9a8:	4694      	mov	ip, r2
 800a9aa:	4463      	add	r3, ip
 800a9ac:	61fb      	str	r3, [r7, #28]
 800a9ae:	1d7b      	adds	r3, r7, #5
 800a9b0:	33ff      	adds	r3, #255	@ 0xff
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	b29a      	uxth	r2, r3
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a9ba:	2076      	movs	r0, #118	@ 0x76
 800a9bc:	183b      	adds	r3, r7, r0
 800a9be:	683a      	ldr	r2, [r7, #0]
 800a9c0:	8912      	ldrh	r2, [r2, #8]
 800a9c2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	6959      	ldr	r1, [r3, #20]
 800a9c8:	1d7b      	adds	r3, r7, #5
 800a9ca:	33ff      	adds	r3, #255	@ 0xff
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	b29c      	uxth	r4, r3
 800a9d0:	183b      	adds	r3, r7, r0
 800a9d2:	881a      	ldrh	r2, [r3, #0]
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	0023      	movs	r3, r4
 800a9d8:	f001 f882 	bl	800bae0 <USB_WritePMA>
 800a9dc:	e329      	b.n	800b032 <USB_EPStartXfer+0xa26>
 800a9de:	46c0      	nop			@ (mov r8, r8)
 800a9e0:	00000402 	.word	0x00000402
 800a9e4:	ffff8f8f 	.word	0xffff8f8f
 800a9e8:	ffff8180 	.word	0xffff8180
 800a9ec:	00000406 	.word	0x00000406
 800a9f0:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	785b      	ldrb	r3, [r3, #1]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d000      	beq.n	800a9fe <USB_EPStartXfer+0x3f2>
 800a9fc:	e070      	b.n	800aae0 <USB_EPStartXfer+0x4d4>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2250      	movs	r2, #80	@ 0x50
 800aa06:	5a9b      	ldrh	r3, [r3, r2]
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	001a      	movs	r2, r3
 800aa0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa0e:	189b      	adds	r3, r3, r2
 800aa10:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	00da      	lsls	r2, r3, #3
 800aa18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa1a:	18d3      	adds	r3, r2, r3
 800aa1c:	4acd      	ldr	r2, [pc, #820]	@ (800ad54 <USB_EPStartXfer+0x748>)
 800aa1e:	4694      	mov	ip, r2
 800aa20:	4463      	add	r3, ip
 800aa22:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa26:	881b      	ldrh	r3, [r3, #0]
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	059b      	lsls	r3, r3, #22
 800aa2c:	0d9b      	lsrs	r3, r3, #22
 800aa2e:	b29a      	uxth	r2, r3
 800aa30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa32:	801a      	strh	r2, [r3, #0]
 800aa34:	1d7b      	adds	r3, r7, #5
 800aa36:	33ff      	adds	r3, #255	@ 0xff
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d108      	bne.n	800aa50 <USB_EPStartXfer+0x444>
 800aa3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa40:	881b      	ldrh	r3, [r3, #0]
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	4ac4      	ldr	r2, [pc, #784]	@ (800ad58 <USB_EPStartXfer+0x74c>)
 800aa46:	4313      	orrs	r3, r2
 800aa48:	b29a      	uxth	r2, r3
 800aa4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa4c:	801a      	strh	r2, [r3, #0]
 800aa4e:	e064      	b.n	800ab1a <USB_EPStartXfer+0x50e>
 800aa50:	1d7b      	adds	r3, r7, #5
 800aa52:	33ff      	adds	r3, #255	@ 0xff
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	2b3e      	cmp	r3, #62	@ 0x3e
 800aa58:	d81f      	bhi.n	800aa9a <USB_EPStartXfer+0x48e>
 800aa5a:	1d7b      	adds	r3, r7, #5
 800aa5c:	33ff      	adds	r3, #255	@ 0xff
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	085b      	lsrs	r3, r3, #1
 800aa62:	21f8      	movs	r1, #248	@ 0xf8
 800aa64:	187a      	adds	r2, r7, r1
 800aa66:	6013      	str	r3, [r2, #0]
 800aa68:	1d7b      	adds	r3, r7, #5
 800aa6a:	33ff      	adds	r3, #255	@ 0xff
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	4013      	ands	r3, r2
 800aa72:	d004      	beq.n	800aa7e <USB_EPStartXfer+0x472>
 800aa74:	187b      	adds	r3, r7, r1
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	187a      	adds	r2, r7, r1
 800aa7c:	6013      	str	r3, [r2, #0]
 800aa7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa80:	881b      	ldrh	r3, [r3, #0]
 800aa82:	b29a      	uxth	r2, r3
 800aa84:	23f8      	movs	r3, #248	@ 0xf8
 800aa86:	18fb      	adds	r3, r7, r3
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	029b      	lsls	r3, r3, #10
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	4313      	orrs	r3, r2
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa96:	801a      	strh	r2, [r3, #0]
 800aa98:	e03f      	b.n	800ab1a <USB_EPStartXfer+0x50e>
 800aa9a:	1d7b      	adds	r3, r7, #5
 800aa9c:	33ff      	adds	r3, #255	@ 0xff
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	095b      	lsrs	r3, r3, #5
 800aaa2:	21f8      	movs	r1, #248	@ 0xf8
 800aaa4:	187a      	adds	r2, r7, r1
 800aaa6:	6013      	str	r3, [r2, #0]
 800aaa8:	1d7b      	adds	r3, r7, #5
 800aaaa:	33ff      	adds	r3, #255	@ 0xff
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	221f      	movs	r2, #31
 800aab0:	4013      	ands	r3, r2
 800aab2:	d104      	bne.n	800aabe <USB_EPStartXfer+0x4b2>
 800aab4:	187b      	adds	r3, r7, r1
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	3b01      	subs	r3, #1
 800aaba:	187a      	adds	r2, r7, r1
 800aabc:	6013      	str	r3, [r2, #0]
 800aabe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aac0:	881b      	ldrh	r3, [r3, #0]
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	23f8      	movs	r3, #248	@ 0xf8
 800aac6:	18fb      	adds	r3, r7, r3
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	029b      	lsls	r3, r3, #10
 800aace:	b29b      	uxth	r3, r3
 800aad0:	4313      	orrs	r3, r2
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	4aa0      	ldr	r2, [pc, #640]	@ (800ad58 <USB_EPStartXfer+0x74c>)
 800aad6:	4313      	orrs	r3, r2
 800aad8:	b29a      	uxth	r2, r3
 800aada:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aadc:	801a      	strh	r2, [r3, #0]
 800aade:	e01c      	b.n	800ab1a <USB_EPStartXfer+0x50e>
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	785b      	ldrb	r3, [r3, #1]
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d118      	bne.n	800ab1a <USB_EPStartXfer+0x50e>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	653b      	str	r3, [r7, #80]	@ 0x50
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2250      	movs	r2, #80	@ 0x50
 800aaf0:	5a9b      	ldrh	r3, [r3, r2]
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	001a      	movs	r2, r3
 800aaf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aaf8:	189b      	adds	r3, r3, r2
 800aafa:	653b      	str	r3, [r7, #80]	@ 0x50
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	00da      	lsls	r2, r3, #3
 800ab02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab04:	18d3      	adds	r3, r2, r3
 800ab06:	4a93      	ldr	r2, [pc, #588]	@ (800ad54 <USB_EPStartXfer+0x748>)
 800ab08:	4694      	mov	ip, r2
 800ab0a:	4463      	add	r3, ip
 800ab0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab0e:	1d7b      	adds	r3, r7, #5
 800ab10:	33ff      	adds	r3, #255	@ 0xff
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	b29a      	uxth	r2, r3
 800ab16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab18:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ab1a:	2076      	movs	r0, #118	@ 0x76
 800ab1c:	183b      	adds	r3, r7, r0
 800ab1e:	683a      	ldr	r2, [r7, #0]
 800ab20:	8912      	ldrh	r2, [r2, #8]
 800ab22:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	6959      	ldr	r1, [r3, #20]
 800ab28:	1d7b      	adds	r3, r7, #5
 800ab2a:	33ff      	adds	r3, #255	@ 0xff
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	b29c      	uxth	r4, r3
 800ab30:	183b      	adds	r3, r7, r0
 800ab32:	881a      	ldrh	r2, [r3, #0]
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	0023      	movs	r3, r4
 800ab38:	f000 ffd2 	bl	800bae0 <USB_WritePMA>
            ep->xfer_buff += len;
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	695a      	ldr	r2, [r3, #20]
 800ab40:	1d7b      	adds	r3, r7, #5
 800ab42:	33ff      	adds	r3, #255	@ 0xff
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	18d2      	adds	r2, r2, r3
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	6a1a      	ldr	r2, [r3, #32]
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	691b      	ldr	r3, [r3, #16]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d908      	bls.n	800ab6a <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	6a1a      	ldr	r2, [r3, #32]
 800ab5c:	1d7b      	adds	r3, r7, #5
 800ab5e:	33ff      	adds	r3, #255	@ 0xff
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	1ad2      	subs	r2, r2, r3
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	621a      	str	r2, [r3, #32]
 800ab68:	e007      	b.n	800ab7a <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	6a1b      	ldr	r3, [r3, #32]
 800ab6e:	1d7a      	adds	r2, r7, #5
 800ab70:	32ff      	adds	r2, #255	@ 0xff
 800ab72:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	2200      	movs	r2, #0
 800ab78:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	785b      	ldrb	r3, [r3, #1]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d000      	beq.n	800ab88 <USB_EPStartXfer+0x57c>
 800ab86:	e070      	b.n	800ac6a <USB_EPStartXfer+0x65e>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2250      	movs	r2, #80	@ 0x50
 800ab90:	5a9b      	ldrh	r3, [r3, r2]
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	001a      	movs	r2, r3
 800ab96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab98:	189b      	adds	r3, r3, r2
 800ab9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	00da      	lsls	r2, r3, #3
 800aba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba4:	18d3      	adds	r3, r2, r3
 800aba6:	4a6d      	ldr	r2, [pc, #436]	@ (800ad5c <USB_EPStartXfer+0x750>)
 800aba8:	4694      	mov	ip, r2
 800abaa:	4463      	add	r3, ip
 800abac:	637b      	str	r3, [r7, #52]	@ 0x34
 800abae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abb0:	881b      	ldrh	r3, [r3, #0]
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	059b      	lsls	r3, r3, #22
 800abb6:	0d9b      	lsrs	r3, r3, #22
 800abb8:	b29a      	uxth	r2, r3
 800abba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abbc:	801a      	strh	r2, [r3, #0]
 800abbe:	1d7b      	adds	r3, r7, #5
 800abc0:	33ff      	adds	r3, #255	@ 0xff
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d108      	bne.n	800abda <USB_EPStartXfer+0x5ce>
 800abc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abca:	881b      	ldrh	r3, [r3, #0]
 800abcc:	b29b      	uxth	r3, r3
 800abce:	4a62      	ldr	r2, [pc, #392]	@ (800ad58 <USB_EPStartXfer+0x74c>)
 800abd0:	4313      	orrs	r3, r2
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abd6:	801a      	strh	r2, [r3, #0]
 800abd8:	e062      	b.n	800aca0 <USB_EPStartXfer+0x694>
 800abda:	1d7b      	adds	r3, r7, #5
 800abdc:	33ff      	adds	r3, #255	@ 0xff
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2b3e      	cmp	r3, #62	@ 0x3e
 800abe2:	d81f      	bhi.n	800ac24 <USB_EPStartXfer+0x618>
 800abe4:	1d7b      	adds	r3, r7, #5
 800abe6:	33ff      	adds	r3, #255	@ 0xff
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	085b      	lsrs	r3, r3, #1
 800abec:	21f4      	movs	r1, #244	@ 0xf4
 800abee:	187a      	adds	r2, r7, r1
 800abf0:	6013      	str	r3, [r2, #0]
 800abf2:	1d7b      	adds	r3, r7, #5
 800abf4:	33ff      	adds	r3, #255	@ 0xff
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2201      	movs	r2, #1
 800abfa:	4013      	ands	r3, r2
 800abfc:	d004      	beq.n	800ac08 <USB_EPStartXfer+0x5fc>
 800abfe:	187b      	adds	r3, r7, r1
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	3301      	adds	r3, #1
 800ac04:	187a      	adds	r2, r7, r1
 800ac06:	6013      	str	r3, [r2, #0]
 800ac08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac0a:	881b      	ldrh	r3, [r3, #0]
 800ac0c:	b29a      	uxth	r2, r3
 800ac0e:	23f4      	movs	r3, #244	@ 0xf4
 800ac10:	18fb      	adds	r3, r7, r3
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	029b      	lsls	r3, r3, #10
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	b29a      	uxth	r2, r3
 800ac1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac20:	801a      	strh	r2, [r3, #0]
 800ac22:	e03d      	b.n	800aca0 <USB_EPStartXfer+0x694>
 800ac24:	1d7b      	adds	r3, r7, #5
 800ac26:	33ff      	adds	r3, #255	@ 0xff
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	095b      	lsrs	r3, r3, #5
 800ac2c:	21f4      	movs	r1, #244	@ 0xf4
 800ac2e:	187a      	adds	r2, r7, r1
 800ac30:	6013      	str	r3, [r2, #0]
 800ac32:	1d7b      	adds	r3, r7, #5
 800ac34:	33ff      	adds	r3, #255	@ 0xff
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	221f      	movs	r2, #31
 800ac3a:	4013      	ands	r3, r2
 800ac3c:	d104      	bne.n	800ac48 <USB_EPStartXfer+0x63c>
 800ac3e:	187b      	adds	r3, r7, r1
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	3b01      	subs	r3, #1
 800ac44:	187a      	adds	r2, r7, r1
 800ac46:	6013      	str	r3, [r2, #0]
 800ac48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac4a:	881b      	ldrh	r3, [r3, #0]
 800ac4c:	b29a      	uxth	r2, r3
 800ac4e:	23f4      	movs	r3, #244	@ 0xf4
 800ac50:	18fb      	adds	r3, r7, r3
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	029b      	lsls	r3, r3, #10
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	4a3e      	ldr	r2, [pc, #248]	@ (800ad58 <USB_EPStartXfer+0x74c>)
 800ac60:	4313      	orrs	r3, r2
 800ac62:	b29a      	uxth	r2, r3
 800ac64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac66:	801a      	strh	r2, [r3, #0]
 800ac68:	e01a      	b.n	800aca0 <USB_EPStartXfer+0x694>
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	785b      	ldrb	r3, [r3, #1]
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d116      	bne.n	800aca0 <USB_EPStartXfer+0x694>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2250      	movs	r2, #80	@ 0x50
 800ac76:	5a9b      	ldrh	r3, [r3, r2]
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	001a      	movs	r2, r3
 800ac7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac7e:	189b      	adds	r3, r3, r2
 800ac80:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	00da      	lsls	r2, r3, #3
 800ac88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac8a:	18d3      	adds	r3, r2, r3
 800ac8c:	4a33      	ldr	r2, [pc, #204]	@ (800ad5c <USB_EPStartXfer+0x750>)
 800ac8e:	4694      	mov	ip, r2
 800ac90:	4463      	add	r3, ip
 800ac92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac94:	1d7b      	adds	r3, r7, #5
 800ac96:	33ff      	adds	r3, #255	@ 0xff
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	b29a      	uxth	r2, r3
 800ac9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac9e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800aca0:	2076      	movs	r0, #118	@ 0x76
 800aca2:	183b      	adds	r3, r7, r0
 800aca4:	683a      	ldr	r2, [r7, #0]
 800aca6:	8952      	ldrh	r2, [r2, #10]
 800aca8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	6959      	ldr	r1, [r3, #20]
 800acae:	1d7b      	adds	r3, r7, #5
 800acb0:	33ff      	adds	r3, #255	@ 0xff
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	b29c      	uxth	r4, r3
 800acb6:	183b      	adds	r3, r7, r0
 800acb8:	881a      	ldrh	r2, [r3, #0]
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	0023      	movs	r3, r4
 800acbe:	f000 ff0f 	bl	800bae0 <USB_WritePMA>
 800acc2:	e1b6      	b.n	800b032 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	6a1b      	ldr	r3, [r3, #32]
 800acc8:	1d7a      	adds	r2, r7, #5
 800acca:	32ff      	adds	r2, #255	@ 0xff
 800accc:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	18d3      	adds	r3, r2, r3
 800acd8:	881b      	ldrh	r3, [r3, #0]
 800acda:	b29a      	uxth	r2, r3
 800acdc:	2062      	movs	r0, #98	@ 0x62
 800acde:	183b      	adds	r3, r7, r0
 800ace0:	491f      	ldr	r1, [pc, #124]	@ (800ad60 <USB_EPStartXfer+0x754>)
 800ace2:	400a      	ands	r2, r1
 800ace4:	801a      	strh	r2, [r3, #0]
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	18d3      	adds	r3, r2, r3
 800acf0:	183a      	adds	r2, r7, r0
 800acf2:	8812      	ldrh	r2, [r2, #0]
 800acf4:	491b      	ldr	r1, [pc, #108]	@ (800ad64 <USB_EPStartXfer+0x758>)
 800acf6:	430a      	orrs	r2, r1
 800acf8:	b292      	uxth	r2, r2
 800acfa:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2250      	movs	r2, #80	@ 0x50
 800ad04:	5a9b      	ldrh	r3, [r3, r2]
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	001a      	movs	r2, r3
 800ad0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad0c:	189b      	adds	r3, r3, r2
 800ad0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	00da      	lsls	r2, r3, #3
 800ad16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad18:	18d3      	adds	r3, r2, r3
 800ad1a:	4a0e      	ldr	r2, [pc, #56]	@ (800ad54 <USB_EPStartXfer+0x748>)
 800ad1c:	4694      	mov	ip, r2
 800ad1e:	4463      	add	r3, ip
 800ad20:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ad22:	1d7b      	adds	r3, r7, #5
 800ad24:	33ff      	adds	r3, #255	@ 0xff
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	b29a      	uxth	r2, r3
 800ad2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ad2c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ad2e:	2076      	movs	r0, #118	@ 0x76
 800ad30:	183b      	adds	r3, r7, r0
 800ad32:	683a      	ldr	r2, [r7, #0]
 800ad34:	8912      	ldrh	r2, [r2, #8]
 800ad36:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	6959      	ldr	r1, [r3, #20]
 800ad3c:	1d7b      	adds	r3, r7, #5
 800ad3e:	33ff      	adds	r3, #255	@ 0xff
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	b29c      	uxth	r4, r3
 800ad44:	183b      	adds	r3, r7, r0
 800ad46:	881a      	ldrh	r2, [r3, #0]
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	0023      	movs	r3, r4
 800ad4c:	f000 fec8 	bl	800bae0 <USB_WritePMA>
 800ad50:	e16f      	b.n	800b032 <USB_EPStartXfer+0xa26>
 800ad52:	46c0      	nop			@ (mov r8, r8)
 800ad54:	00000402 	.word	0x00000402
 800ad58:	ffff8000 	.word	0xffff8000
 800ad5c:	00000406 	.word	0x00000406
 800ad60:	ffff8e8f 	.word	0xffff8e8f
 800ad64:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	6a1a      	ldr	r2, [r3, #32]
 800ad6c:	1d7b      	adds	r3, r7, #5
 800ad6e:	33ff      	adds	r3, #255	@ 0xff
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	1ad2      	subs	r2, r2, r3
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	18d3      	adds	r3, r2, r3
 800ad82:	881b      	ldrh	r3, [r3, #0]
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	001a      	movs	r2, r3
 800ad88:	2340      	movs	r3, #64	@ 0x40
 800ad8a:	4013      	ands	r3, r2
 800ad8c:	d100      	bne.n	800ad90 <USB_EPStartXfer+0x784>
 800ad8e:	e0a4      	b.n	800aeda <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	673b      	str	r3, [r7, #112]	@ 0x70
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	785b      	ldrb	r3, [r3, #1]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d000      	beq.n	800ad9e <USB_EPStartXfer+0x792>
 800ad9c:	e070      	b.n	800ae80 <USB_EPStartXfer+0x874>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2250      	movs	r2, #80	@ 0x50
 800ada6:	5a9b      	ldrh	r3, [r3, r2]
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	001a      	movs	r2, r3
 800adac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800adae:	189b      	adds	r3, r3, r2
 800adb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	00da      	lsls	r2, r3, #3
 800adb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800adba:	18d3      	adds	r3, r2, r3
 800adbc:	4ada      	ldr	r2, [pc, #872]	@ (800b128 <USB_EPStartXfer+0xb1c>)
 800adbe:	4694      	mov	ip, r2
 800adc0:	4463      	add	r3, ip
 800adc2:	667b      	str	r3, [r7, #100]	@ 0x64
 800adc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800adc6:	881b      	ldrh	r3, [r3, #0]
 800adc8:	b29b      	uxth	r3, r3
 800adca:	059b      	lsls	r3, r3, #22
 800adcc:	0d9b      	lsrs	r3, r3, #22
 800adce:	b29a      	uxth	r2, r3
 800add0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800add2:	801a      	strh	r2, [r3, #0]
 800add4:	1d7b      	adds	r3, r7, #5
 800add6:	33ff      	adds	r3, #255	@ 0xff
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d108      	bne.n	800adf0 <USB_EPStartXfer+0x7e4>
 800adde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ade0:	881b      	ldrh	r3, [r3, #0]
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	4ad1      	ldr	r2, [pc, #836]	@ (800b12c <USB_EPStartXfer+0xb20>)
 800ade6:	4313      	orrs	r3, r2
 800ade8:	b29a      	uxth	r2, r3
 800adea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800adec:	801a      	strh	r2, [r3, #0]
 800adee:	e062      	b.n	800aeb6 <USB_EPStartXfer+0x8aa>
 800adf0:	1d7b      	adds	r3, r7, #5
 800adf2:	33ff      	adds	r3, #255	@ 0xff
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	2b3e      	cmp	r3, #62	@ 0x3e
 800adf8:	d81f      	bhi.n	800ae3a <USB_EPStartXfer+0x82e>
 800adfa:	1d7b      	adds	r3, r7, #5
 800adfc:	33ff      	adds	r3, #255	@ 0xff
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	085b      	lsrs	r3, r3, #1
 800ae02:	21f0      	movs	r1, #240	@ 0xf0
 800ae04:	187a      	adds	r2, r7, r1
 800ae06:	6013      	str	r3, [r2, #0]
 800ae08:	1d7b      	adds	r3, r7, #5
 800ae0a:	33ff      	adds	r3, #255	@ 0xff
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	4013      	ands	r3, r2
 800ae12:	d004      	beq.n	800ae1e <USB_EPStartXfer+0x812>
 800ae14:	187b      	adds	r3, r7, r1
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	187a      	adds	r2, r7, r1
 800ae1c:	6013      	str	r3, [r2, #0]
 800ae1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae20:	881b      	ldrh	r3, [r3, #0]
 800ae22:	b29a      	uxth	r2, r3
 800ae24:	23f0      	movs	r3, #240	@ 0xf0
 800ae26:	18fb      	adds	r3, r7, r3
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	029b      	lsls	r3, r3, #10
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	4313      	orrs	r3, r2
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae36:	801a      	strh	r2, [r3, #0]
 800ae38:	e03d      	b.n	800aeb6 <USB_EPStartXfer+0x8aa>
 800ae3a:	1d7b      	adds	r3, r7, #5
 800ae3c:	33ff      	adds	r3, #255	@ 0xff
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	095b      	lsrs	r3, r3, #5
 800ae42:	21f0      	movs	r1, #240	@ 0xf0
 800ae44:	187a      	adds	r2, r7, r1
 800ae46:	6013      	str	r3, [r2, #0]
 800ae48:	1d7b      	adds	r3, r7, #5
 800ae4a:	33ff      	adds	r3, #255	@ 0xff
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	221f      	movs	r2, #31
 800ae50:	4013      	ands	r3, r2
 800ae52:	d104      	bne.n	800ae5e <USB_EPStartXfer+0x852>
 800ae54:	187b      	adds	r3, r7, r1
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	3b01      	subs	r3, #1
 800ae5a:	187a      	adds	r2, r7, r1
 800ae5c:	6013      	str	r3, [r2, #0]
 800ae5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae60:	881b      	ldrh	r3, [r3, #0]
 800ae62:	b29a      	uxth	r2, r3
 800ae64:	23f0      	movs	r3, #240	@ 0xf0
 800ae66:	18fb      	adds	r3, r7, r3
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	b29b      	uxth	r3, r3
 800ae6c:	029b      	lsls	r3, r3, #10
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	4313      	orrs	r3, r2
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	4aad      	ldr	r2, [pc, #692]	@ (800b12c <USB_EPStartXfer+0xb20>)
 800ae76:	4313      	orrs	r3, r2
 800ae78:	b29a      	uxth	r2, r3
 800ae7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae7c:	801a      	strh	r2, [r3, #0]
 800ae7e:	e01a      	b.n	800aeb6 <USB_EPStartXfer+0x8aa>
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	785b      	ldrb	r3, [r3, #1]
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d116      	bne.n	800aeb6 <USB_EPStartXfer+0x8aa>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2250      	movs	r2, #80	@ 0x50
 800ae8c:	5a9b      	ldrh	r3, [r3, r2]
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	001a      	movs	r2, r3
 800ae92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae94:	189b      	adds	r3, r3, r2
 800ae96:	673b      	str	r3, [r7, #112]	@ 0x70
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	00da      	lsls	r2, r3, #3
 800ae9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aea0:	18d3      	adds	r3, r2, r3
 800aea2:	4aa1      	ldr	r2, [pc, #644]	@ (800b128 <USB_EPStartXfer+0xb1c>)
 800aea4:	4694      	mov	ip, r2
 800aea6:	4463      	add	r3, ip
 800aea8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aeaa:	1d7b      	adds	r3, r7, #5
 800aeac:	33ff      	adds	r3, #255	@ 0xff
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	b29a      	uxth	r2, r3
 800aeb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aeb4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800aeb6:	2076      	movs	r0, #118	@ 0x76
 800aeb8:	183b      	adds	r3, r7, r0
 800aeba:	683a      	ldr	r2, [r7, #0]
 800aebc:	8952      	ldrh	r2, [r2, #10]
 800aebe:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	6959      	ldr	r1, [r3, #20]
 800aec4:	1d7b      	adds	r3, r7, #5
 800aec6:	33ff      	adds	r3, #255	@ 0xff
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	b29c      	uxth	r4, r3
 800aecc:	183b      	adds	r3, r7, r0
 800aece:	881a      	ldrh	r2, [r3, #0]
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	0023      	movs	r3, r4
 800aed4:	f000 fe04 	bl	800bae0 <USB_WritePMA>
 800aed8:	e0ab      	b.n	800b032 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	785b      	ldrb	r3, [r3, #1]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d000      	beq.n	800aee4 <USB_EPStartXfer+0x8d8>
 800aee2:	e070      	b.n	800afc6 <USB_EPStartXfer+0x9ba>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2250      	movs	r2, #80	@ 0x50
 800aeec:	5a9b      	ldrh	r3, [r3, r2]
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	001a      	movs	r2, r3
 800aef2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aef4:	189b      	adds	r3, r3, r2
 800aef6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	00da      	lsls	r2, r3, #3
 800aefe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af00:	18d3      	adds	r3, r2, r3
 800af02:	4a8b      	ldr	r2, [pc, #556]	@ (800b130 <USB_EPStartXfer+0xb24>)
 800af04:	4694      	mov	ip, r2
 800af06:	4463      	add	r3, ip
 800af08:	67bb      	str	r3, [r7, #120]	@ 0x78
 800af0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af0c:	881b      	ldrh	r3, [r3, #0]
 800af0e:	b29b      	uxth	r3, r3
 800af10:	059b      	lsls	r3, r3, #22
 800af12:	0d9b      	lsrs	r3, r3, #22
 800af14:	b29a      	uxth	r2, r3
 800af16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af18:	801a      	strh	r2, [r3, #0]
 800af1a:	1d7b      	adds	r3, r7, #5
 800af1c:	33ff      	adds	r3, #255	@ 0xff
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d108      	bne.n	800af36 <USB_EPStartXfer+0x92a>
 800af24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af26:	881b      	ldrh	r3, [r3, #0]
 800af28:	b29b      	uxth	r3, r3
 800af2a:	4a80      	ldr	r2, [pc, #512]	@ (800b12c <USB_EPStartXfer+0xb20>)
 800af2c:	4313      	orrs	r3, r2
 800af2e:	b29a      	uxth	r2, r3
 800af30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af32:	801a      	strh	r2, [r3, #0]
 800af34:	e06c      	b.n	800b010 <USB_EPStartXfer+0xa04>
 800af36:	1d7b      	adds	r3, r7, #5
 800af38:	33ff      	adds	r3, #255	@ 0xff
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2b3e      	cmp	r3, #62	@ 0x3e
 800af3e:	d81f      	bhi.n	800af80 <USB_EPStartXfer+0x974>
 800af40:	1d7b      	adds	r3, r7, #5
 800af42:	33ff      	adds	r3, #255	@ 0xff
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	085b      	lsrs	r3, r3, #1
 800af48:	21ec      	movs	r1, #236	@ 0xec
 800af4a:	187a      	adds	r2, r7, r1
 800af4c:	6013      	str	r3, [r2, #0]
 800af4e:	1d7b      	adds	r3, r7, #5
 800af50:	33ff      	adds	r3, #255	@ 0xff
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2201      	movs	r2, #1
 800af56:	4013      	ands	r3, r2
 800af58:	d004      	beq.n	800af64 <USB_EPStartXfer+0x958>
 800af5a:	187b      	adds	r3, r7, r1
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	3301      	adds	r3, #1
 800af60:	187a      	adds	r2, r7, r1
 800af62:	6013      	str	r3, [r2, #0]
 800af64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af66:	881b      	ldrh	r3, [r3, #0]
 800af68:	b29a      	uxth	r2, r3
 800af6a:	23ec      	movs	r3, #236	@ 0xec
 800af6c:	18fb      	adds	r3, r7, r3
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	b29b      	uxth	r3, r3
 800af72:	029b      	lsls	r3, r3, #10
 800af74:	b29b      	uxth	r3, r3
 800af76:	4313      	orrs	r3, r2
 800af78:	b29a      	uxth	r2, r3
 800af7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af7c:	801a      	strh	r2, [r3, #0]
 800af7e:	e047      	b.n	800b010 <USB_EPStartXfer+0xa04>
 800af80:	1d7b      	adds	r3, r7, #5
 800af82:	33ff      	adds	r3, #255	@ 0xff
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	095b      	lsrs	r3, r3, #5
 800af88:	21ec      	movs	r1, #236	@ 0xec
 800af8a:	187a      	adds	r2, r7, r1
 800af8c:	6013      	str	r3, [r2, #0]
 800af8e:	1d7b      	adds	r3, r7, #5
 800af90:	33ff      	adds	r3, #255	@ 0xff
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	221f      	movs	r2, #31
 800af96:	4013      	ands	r3, r2
 800af98:	d104      	bne.n	800afa4 <USB_EPStartXfer+0x998>
 800af9a:	187b      	adds	r3, r7, r1
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	3b01      	subs	r3, #1
 800afa0:	187a      	adds	r2, r7, r1
 800afa2:	6013      	str	r3, [r2, #0]
 800afa4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800afa6:	881b      	ldrh	r3, [r3, #0]
 800afa8:	b29a      	uxth	r2, r3
 800afaa:	23ec      	movs	r3, #236	@ 0xec
 800afac:	18fb      	adds	r3, r7, r3
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	029b      	lsls	r3, r3, #10
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	4313      	orrs	r3, r2
 800afb8:	b29b      	uxth	r3, r3
 800afba:	4a5c      	ldr	r2, [pc, #368]	@ (800b12c <USB_EPStartXfer+0xb20>)
 800afbc:	4313      	orrs	r3, r2
 800afbe:	b29a      	uxth	r2, r3
 800afc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800afc2:	801a      	strh	r2, [r3, #0]
 800afc4:	e024      	b.n	800b010 <USB_EPStartXfer+0xa04>
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	785b      	ldrb	r3, [r3, #1]
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d120      	bne.n	800b010 <USB_EPStartXfer+0xa04>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2184      	movs	r1, #132	@ 0x84
 800afd2:	187a      	adds	r2, r7, r1
 800afd4:	6013      	str	r3, [r2, #0]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2250      	movs	r2, #80	@ 0x50
 800afda:	5a9b      	ldrh	r3, [r3, r2]
 800afdc:	b29b      	uxth	r3, r3
 800afde:	001a      	movs	r2, r3
 800afe0:	187b      	adds	r3, r7, r1
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	189b      	adds	r3, r3, r2
 800afe6:	187a      	adds	r2, r7, r1
 800afe8:	6013      	str	r3, [r2, #0]
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	00da      	lsls	r2, r3, #3
 800aff0:	187b      	adds	r3, r7, r1
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	18d3      	adds	r3, r2, r3
 800aff6:	4a4e      	ldr	r2, [pc, #312]	@ (800b130 <USB_EPStartXfer+0xb24>)
 800aff8:	4694      	mov	ip, r2
 800affa:	4463      	add	r3, ip
 800affc:	2180      	movs	r1, #128	@ 0x80
 800affe:	187a      	adds	r2, r7, r1
 800b000:	6013      	str	r3, [r2, #0]
 800b002:	1d7b      	adds	r3, r7, #5
 800b004:	33ff      	adds	r3, #255	@ 0xff
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	b29a      	uxth	r2, r3
 800b00a:	187b      	adds	r3, r7, r1
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b010:	2076      	movs	r0, #118	@ 0x76
 800b012:	183b      	adds	r3, r7, r0
 800b014:	683a      	ldr	r2, [r7, #0]
 800b016:	8912      	ldrh	r2, [r2, #8]
 800b018:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	6959      	ldr	r1, [r3, #20]
 800b01e:	1d7b      	adds	r3, r7, #5
 800b020:	33ff      	adds	r3, #255	@ 0xff
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	b29c      	uxth	r4, r3
 800b026:	183b      	adds	r3, r7, r0
 800b028:	881a      	ldrh	r2, [r3, #0]
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	0023      	movs	r3, r4
 800b02e:	f000 fd57 	bl	800bae0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	18d3      	adds	r3, r2, r3
 800b03c:	881b      	ldrh	r3, [r3, #0]
 800b03e:	b29a      	uxth	r2, r3
 800b040:	200a      	movs	r0, #10
 800b042:	183b      	adds	r3, r7, r0
 800b044:	493b      	ldr	r1, [pc, #236]	@ (800b134 <USB_EPStartXfer+0xb28>)
 800b046:	400a      	ands	r2, r1
 800b048:	801a      	strh	r2, [r3, #0]
 800b04a:	183b      	adds	r3, r7, r0
 800b04c:	183a      	adds	r2, r7, r0
 800b04e:	8812      	ldrh	r2, [r2, #0]
 800b050:	2110      	movs	r1, #16
 800b052:	404a      	eors	r2, r1
 800b054:	801a      	strh	r2, [r3, #0]
 800b056:	183b      	adds	r3, r7, r0
 800b058:	183a      	adds	r2, r7, r0
 800b05a:	8812      	ldrh	r2, [r2, #0]
 800b05c:	2120      	movs	r1, #32
 800b05e:	404a      	eors	r2, r1
 800b060:	801a      	strh	r2, [r3, #0]
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	18d3      	adds	r3, r2, r3
 800b06c:	183a      	adds	r2, r7, r0
 800b06e:	8812      	ldrh	r2, [r2, #0]
 800b070:	4931      	ldr	r1, [pc, #196]	@ (800b138 <USB_EPStartXfer+0xb2c>)
 800b072:	430a      	orrs	r2, r1
 800b074:	b292      	uxth	r2, r2
 800b076:	801a      	strh	r2, [r3, #0]
 800b078:	f000 fbe9 	bl	800b84e <USB_EPStartXfer+0x1242>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	7b1b      	ldrb	r3, [r3, #12]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d000      	beq.n	800b086 <USB_EPStartXfer+0xa7a>
 800b084:	e0a8      	b.n	800b1d8 <USB_EPStartXfer+0xbcc>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	699a      	ldr	r2, [r3, #24]
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	691b      	ldr	r3, [r3, #16]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d90d      	bls.n	800b0ae <USB_EPStartXfer+0xaa2>
      {
        len = ep->maxpacket;
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	691b      	ldr	r3, [r3, #16]
 800b096:	1d7a      	adds	r2, r7, #5
 800b098:	32ff      	adds	r2, #255	@ 0xff
 800b09a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	699a      	ldr	r2, [r3, #24]
 800b0a0:	1d7b      	adds	r3, r7, #5
 800b0a2:	33ff      	adds	r3, #255	@ 0xff
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	1ad2      	subs	r2, r2, r3
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	619a      	str	r2, [r3, #24]
 800b0ac:	e007      	b.n	800b0be <USB_EPStartXfer+0xab2>
      }
      else
      {
        len = ep->xfer_len;
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	699b      	ldr	r3, [r3, #24]
 800b0b2:	1d7a      	adds	r2, r7, #5
 800b0b4:	32ff      	adds	r2, #255	@ 0xff
 800b0b6:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2190      	movs	r1, #144	@ 0x90
 800b0c2:	187a      	adds	r2, r7, r1
 800b0c4:	6013      	str	r3, [r2, #0]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2250      	movs	r2, #80	@ 0x50
 800b0ca:	5a9b      	ldrh	r3, [r3, r2]
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	001a      	movs	r2, r3
 800b0d0:	187b      	adds	r3, r7, r1
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	189b      	adds	r3, r3, r2
 800b0d6:	187a      	adds	r2, r7, r1
 800b0d8:	6013      	str	r3, [r2, #0]
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	00da      	lsls	r2, r3, #3
 800b0e0:	187b      	adds	r3, r7, r1
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	18d3      	adds	r3, r2, r3
 800b0e6:	4a10      	ldr	r2, [pc, #64]	@ (800b128 <USB_EPStartXfer+0xb1c>)
 800b0e8:	4694      	mov	ip, r2
 800b0ea:	4463      	add	r3, ip
 800b0ec:	218c      	movs	r1, #140	@ 0x8c
 800b0ee:	187a      	adds	r2, r7, r1
 800b0f0:	6013      	str	r3, [r2, #0]
 800b0f2:	187b      	adds	r3, r7, r1
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	881b      	ldrh	r3, [r3, #0]
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	059b      	lsls	r3, r3, #22
 800b0fc:	0d9b      	lsrs	r3, r3, #22
 800b0fe:	b29a      	uxth	r2, r3
 800b100:	187b      	adds	r3, r7, r1
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	801a      	strh	r2, [r3, #0]
 800b106:	1d7b      	adds	r3, r7, #5
 800b108:	33ff      	adds	r3, #255	@ 0xff
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d115      	bne.n	800b13c <USB_EPStartXfer+0xb30>
 800b110:	187b      	adds	r3, r7, r1
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	881b      	ldrh	r3, [r3, #0]
 800b116:	b29b      	uxth	r3, r3
 800b118:	4a04      	ldr	r2, [pc, #16]	@ (800b12c <USB_EPStartXfer+0xb20>)
 800b11a:	4313      	orrs	r3, r2
 800b11c:	b29a      	uxth	r2, r3
 800b11e:	187b      	adds	r3, r7, r1
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	801a      	strh	r2, [r3, #0]
 800b124:	e36e      	b.n	800b804 <USB_EPStartXfer+0x11f8>
 800b126:	46c0      	nop			@ (mov r8, r8)
 800b128:	00000406 	.word	0x00000406
 800b12c:	ffff8000 	.word	0xffff8000
 800b130:	00000402 	.word	0x00000402
 800b134:	ffff8fbf 	.word	0xffff8fbf
 800b138:	ffff8080 	.word	0xffff8080
 800b13c:	1d7b      	adds	r3, r7, #5
 800b13e:	33ff      	adds	r3, #255	@ 0xff
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2b3e      	cmp	r3, #62	@ 0x3e
 800b144:	d822      	bhi.n	800b18c <USB_EPStartXfer+0xb80>
 800b146:	1d7b      	adds	r3, r7, #5
 800b148:	33ff      	adds	r3, #255	@ 0xff
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	085b      	lsrs	r3, r3, #1
 800b14e:	21e8      	movs	r1, #232	@ 0xe8
 800b150:	187a      	adds	r2, r7, r1
 800b152:	6013      	str	r3, [r2, #0]
 800b154:	1d7b      	adds	r3, r7, #5
 800b156:	33ff      	adds	r3, #255	@ 0xff
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2201      	movs	r2, #1
 800b15c:	4013      	ands	r3, r2
 800b15e:	d004      	beq.n	800b16a <USB_EPStartXfer+0xb5e>
 800b160:	187b      	adds	r3, r7, r1
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	3301      	adds	r3, #1
 800b166:	187a      	adds	r2, r7, r1
 800b168:	6013      	str	r3, [r2, #0]
 800b16a:	218c      	movs	r1, #140	@ 0x8c
 800b16c:	187b      	adds	r3, r7, r1
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	881b      	ldrh	r3, [r3, #0]
 800b172:	b29a      	uxth	r2, r3
 800b174:	23e8      	movs	r3, #232	@ 0xe8
 800b176:	18fb      	adds	r3, r7, r3
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	029b      	lsls	r3, r3, #10
 800b17e:	b29b      	uxth	r3, r3
 800b180:	4313      	orrs	r3, r2
 800b182:	b29a      	uxth	r2, r3
 800b184:	187b      	adds	r3, r7, r1
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	801a      	strh	r2, [r3, #0]
 800b18a:	e33b      	b.n	800b804 <USB_EPStartXfer+0x11f8>
 800b18c:	1d7b      	adds	r3, r7, #5
 800b18e:	33ff      	adds	r3, #255	@ 0xff
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	095b      	lsrs	r3, r3, #5
 800b194:	21e8      	movs	r1, #232	@ 0xe8
 800b196:	187a      	adds	r2, r7, r1
 800b198:	6013      	str	r3, [r2, #0]
 800b19a:	1d7b      	adds	r3, r7, #5
 800b19c:	33ff      	adds	r3, #255	@ 0xff
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	221f      	movs	r2, #31
 800b1a2:	4013      	ands	r3, r2
 800b1a4:	d104      	bne.n	800b1b0 <USB_EPStartXfer+0xba4>
 800b1a6:	187b      	adds	r3, r7, r1
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	3b01      	subs	r3, #1
 800b1ac:	187a      	adds	r2, r7, r1
 800b1ae:	6013      	str	r3, [r2, #0]
 800b1b0:	218c      	movs	r1, #140	@ 0x8c
 800b1b2:	187b      	adds	r3, r7, r1
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	881b      	ldrh	r3, [r3, #0]
 800b1b8:	b29a      	uxth	r2, r3
 800b1ba:	23e8      	movs	r3, #232	@ 0xe8
 800b1bc:	18fb      	adds	r3, r7, r3
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	029b      	lsls	r3, r3, #10
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	4ad7      	ldr	r2, [pc, #860]	@ (800b528 <USB_EPStartXfer+0xf1c>)
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	b29a      	uxth	r2, r3
 800b1d0:	187b      	adds	r3, r7, r1
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	801a      	strh	r2, [r3, #0]
 800b1d6:	e315      	b.n	800b804 <USB_EPStartXfer+0x11f8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	78db      	ldrb	r3, [r3, #3]
 800b1dc:	2b02      	cmp	r3, #2
 800b1de:	d000      	beq.n	800b1e2 <USB_EPStartXfer+0xbd6>
 800b1e0:	e189      	b.n	800b4f6 <USB_EPStartXfer+0xeea>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	785b      	ldrb	r3, [r3, #1]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d000      	beq.n	800b1ec <USB_EPStartXfer+0xbe0>
 800b1ea:	e07b      	b.n	800b2e4 <USB_EPStartXfer+0xcd8>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	21ac      	movs	r1, #172	@ 0xac
 800b1f0:	187a      	adds	r2, r7, r1
 800b1f2:	6013      	str	r3, [r2, #0]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2250      	movs	r2, #80	@ 0x50
 800b1f8:	5a9b      	ldrh	r3, [r3, r2]
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	001a      	movs	r2, r3
 800b1fe:	187b      	adds	r3, r7, r1
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	189b      	adds	r3, r3, r2
 800b204:	187a      	adds	r2, r7, r1
 800b206:	6013      	str	r3, [r2, #0]
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	00da      	lsls	r2, r3, #3
 800b20e:	187b      	adds	r3, r7, r1
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	18d3      	adds	r3, r2, r3
 800b214:	4ac5      	ldr	r2, [pc, #788]	@ (800b52c <USB_EPStartXfer+0xf20>)
 800b216:	4694      	mov	ip, r2
 800b218:	4463      	add	r3, ip
 800b21a:	21a8      	movs	r1, #168	@ 0xa8
 800b21c:	187a      	adds	r2, r7, r1
 800b21e:	6013      	str	r3, [r2, #0]
 800b220:	187b      	adds	r3, r7, r1
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	881b      	ldrh	r3, [r3, #0]
 800b226:	b29b      	uxth	r3, r3
 800b228:	059b      	lsls	r3, r3, #22
 800b22a:	0d9b      	lsrs	r3, r3, #22
 800b22c:	b29a      	uxth	r2, r3
 800b22e:	187b      	adds	r3, r7, r1
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	801a      	strh	r2, [r3, #0]
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	691b      	ldr	r3, [r3, #16]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d10a      	bne.n	800b252 <USB_EPStartXfer+0xc46>
 800b23c:	187b      	adds	r3, r7, r1
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	881b      	ldrh	r3, [r3, #0]
 800b242:	b29b      	uxth	r3, r3
 800b244:	4ab8      	ldr	r2, [pc, #736]	@ (800b528 <USB_EPStartXfer+0xf1c>)
 800b246:	4313      	orrs	r3, r2
 800b248:	b29a      	uxth	r2, r3
 800b24a:	187b      	adds	r3, r7, r1
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	801a      	strh	r2, [r3, #0]
 800b250:	e06c      	b.n	800b32c <USB_EPStartXfer+0xd20>
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	691b      	ldr	r3, [r3, #16]
 800b256:	2b3e      	cmp	r3, #62	@ 0x3e
 800b258:	d820      	bhi.n	800b29c <USB_EPStartXfer+0xc90>
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	691b      	ldr	r3, [r3, #16]
 800b25e:	085b      	lsrs	r3, r3, #1
 800b260:	21e4      	movs	r1, #228	@ 0xe4
 800b262:	187a      	adds	r2, r7, r1
 800b264:	6013      	str	r3, [r2, #0]
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	691b      	ldr	r3, [r3, #16]
 800b26a:	2201      	movs	r2, #1
 800b26c:	4013      	ands	r3, r2
 800b26e:	d004      	beq.n	800b27a <USB_EPStartXfer+0xc6e>
 800b270:	187b      	adds	r3, r7, r1
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	3301      	adds	r3, #1
 800b276:	187a      	adds	r2, r7, r1
 800b278:	6013      	str	r3, [r2, #0]
 800b27a:	21a8      	movs	r1, #168	@ 0xa8
 800b27c:	187b      	adds	r3, r7, r1
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	881b      	ldrh	r3, [r3, #0]
 800b282:	b29a      	uxth	r2, r3
 800b284:	23e4      	movs	r3, #228	@ 0xe4
 800b286:	18fb      	adds	r3, r7, r3
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	029b      	lsls	r3, r3, #10
 800b28e:	b29b      	uxth	r3, r3
 800b290:	4313      	orrs	r3, r2
 800b292:	b29a      	uxth	r2, r3
 800b294:	187b      	adds	r3, r7, r1
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	801a      	strh	r2, [r3, #0]
 800b29a:	e047      	b.n	800b32c <USB_EPStartXfer+0xd20>
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	691b      	ldr	r3, [r3, #16]
 800b2a0:	095b      	lsrs	r3, r3, #5
 800b2a2:	21e4      	movs	r1, #228	@ 0xe4
 800b2a4:	187a      	adds	r2, r7, r1
 800b2a6:	6013      	str	r3, [r2, #0]
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	691b      	ldr	r3, [r3, #16]
 800b2ac:	221f      	movs	r2, #31
 800b2ae:	4013      	ands	r3, r2
 800b2b0:	d104      	bne.n	800b2bc <USB_EPStartXfer+0xcb0>
 800b2b2:	187b      	adds	r3, r7, r1
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	3b01      	subs	r3, #1
 800b2b8:	187a      	adds	r2, r7, r1
 800b2ba:	6013      	str	r3, [r2, #0]
 800b2bc:	21a8      	movs	r1, #168	@ 0xa8
 800b2be:	187b      	adds	r3, r7, r1
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	881b      	ldrh	r3, [r3, #0]
 800b2c4:	b29a      	uxth	r2, r3
 800b2c6:	23e4      	movs	r3, #228	@ 0xe4
 800b2c8:	18fb      	adds	r3, r7, r3
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	029b      	lsls	r3, r3, #10
 800b2d0:	b29b      	uxth	r3, r3
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	4a94      	ldr	r2, [pc, #592]	@ (800b528 <USB_EPStartXfer+0xf1c>)
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	b29a      	uxth	r2, r3
 800b2dc:	187b      	adds	r3, r7, r1
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	801a      	strh	r2, [r3, #0]
 800b2e2:	e023      	b.n	800b32c <USB_EPStartXfer+0xd20>
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	785b      	ldrb	r3, [r3, #1]
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d11f      	bne.n	800b32c <USB_EPStartXfer+0xd20>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	21b4      	movs	r1, #180	@ 0xb4
 800b2f0:	187a      	adds	r2, r7, r1
 800b2f2:	6013      	str	r3, [r2, #0]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2250      	movs	r2, #80	@ 0x50
 800b2f8:	5a9b      	ldrh	r3, [r3, r2]
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	001a      	movs	r2, r3
 800b2fe:	187b      	adds	r3, r7, r1
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	189b      	adds	r3, r3, r2
 800b304:	187a      	adds	r2, r7, r1
 800b306:	6013      	str	r3, [r2, #0]
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	00da      	lsls	r2, r3, #3
 800b30e:	187b      	adds	r3, r7, r1
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	18d3      	adds	r3, r2, r3
 800b314:	4a85      	ldr	r2, [pc, #532]	@ (800b52c <USB_EPStartXfer+0xf20>)
 800b316:	4694      	mov	ip, r2
 800b318:	4463      	add	r3, ip
 800b31a:	21b0      	movs	r1, #176	@ 0xb0
 800b31c:	187a      	adds	r2, r7, r1
 800b31e:	6013      	str	r3, [r2, #0]
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	691b      	ldr	r3, [r3, #16]
 800b324:	b29a      	uxth	r2, r3
 800b326:	187b      	adds	r3, r7, r1
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	801a      	strh	r2, [r3, #0]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	22a4      	movs	r2, #164	@ 0xa4
 800b330:	18ba      	adds	r2, r7, r2
 800b332:	6013      	str	r3, [r2, #0]
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	785b      	ldrb	r3, [r3, #1]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d000      	beq.n	800b33e <USB_EPStartXfer+0xd32>
 800b33c:	e07b      	b.n	800b436 <USB_EPStartXfer+0xe2a>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	219c      	movs	r1, #156	@ 0x9c
 800b342:	187a      	adds	r2, r7, r1
 800b344:	6013      	str	r3, [r2, #0]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2250      	movs	r2, #80	@ 0x50
 800b34a:	5a9b      	ldrh	r3, [r3, r2]
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	001a      	movs	r2, r3
 800b350:	187b      	adds	r3, r7, r1
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	189b      	adds	r3, r3, r2
 800b356:	187a      	adds	r2, r7, r1
 800b358:	6013      	str	r3, [r2, #0]
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	00da      	lsls	r2, r3, #3
 800b360:	187b      	adds	r3, r7, r1
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	18d3      	adds	r3, r2, r3
 800b366:	4a72      	ldr	r2, [pc, #456]	@ (800b530 <USB_EPStartXfer+0xf24>)
 800b368:	4694      	mov	ip, r2
 800b36a:	4463      	add	r3, ip
 800b36c:	2198      	movs	r1, #152	@ 0x98
 800b36e:	187a      	adds	r2, r7, r1
 800b370:	6013      	str	r3, [r2, #0]
 800b372:	187b      	adds	r3, r7, r1
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	881b      	ldrh	r3, [r3, #0]
 800b378:	b29b      	uxth	r3, r3
 800b37a:	059b      	lsls	r3, r3, #22
 800b37c:	0d9b      	lsrs	r3, r3, #22
 800b37e:	b29a      	uxth	r2, r3
 800b380:	187b      	adds	r3, r7, r1
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	801a      	strh	r2, [r3, #0]
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	691b      	ldr	r3, [r3, #16]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d10a      	bne.n	800b3a4 <USB_EPStartXfer+0xd98>
 800b38e:	187b      	adds	r3, r7, r1
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	881b      	ldrh	r3, [r3, #0]
 800b394:	b29b      	uxth	r3, r3
 800b396:	4a64      	ldr	r2, [pc, #400]	@ (800b528 <USB_EPStartXfer+0xf1c>)
 800b398:	4313      	orrs	r3, r2
 800b39a:	b29a      	uxth	r2, r3
 800b39c:	187b      	adds	r3, r7, r1
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	801a      	strh	r2, [r3, #0]
 800b3a2:	e069      	b.n	800b478 <USB_EPStartXfer+0xe6c>
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	691b      	ldr	r3, [r3, #16]
 800b3a8:	2b3e      	cmp	r3, #62	@ 0x3e
 800b3aa:	d820      	bhi.n	800b3ee <USB_EPStartXfer+0xde2>
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	691b      	ldr	r3, [r3, #16]
 800b3b0:	085b      	lsrs	r3, r3, #1
 800b3b2:	21e0      	movs	r1, #224	@ 0xe0
 800b3b4:	187a      	adds	r2, r7, r1
 800b3b6:	6013      	str	r3, [r2, #0]
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	691b      	ldr	r3, [r3, #16]
 800b3bc:	2201      	movs	r2, #1
 800b3be:	4013      	ands	r3, r2
 800b3c0:	d004      	beq.n	800b3cc <USB_EPStartXfer+0xdc0>
 800b3c2:	187b      	adds	r3, r7, r1
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	187a      	adds	r2, r7, r1
 800b3ca:	6013      	str	r3, [r2, #0]
 800b3cc:	2198      	movs	r1, #152	@ 0x98
 800b3ce:	187b      	adds	r3, r7, r1
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	881b      	ldrh	r3, [r3, #0]
 800b3d4:	b29a      	uxth	r2, r3
 800b3d6:	23e0      	movs	r3, #224	@ 0xe0
 800b3d8:	18fb      	adds	r3, r7, r3
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	029b      	lsls	r3, r3, #10
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	b29a      	uxth	r2, r3
 800b3e6:	187b      	adds	r3, r7, r1
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	801a      	strh	r2, [r3, #0]
 800b3ec:	e044      	b.n	800b478 <USB_EPStartXfer+0xe6c>
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	691b      	ldr	r3, [r3, #16]
 800b3f2:	095b      	lsrs	r3, r3, #5
 800b3f4:	21e0      	movs	r1, #224	@ 0xe0
 800b3f6:	187a      	adds	r2, r7, r1
 800b3f8:	6013      	str	r3, [r2, #0]
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	691b      	ldr	r3, [r3, #16]
 800b3fe:	221f      	movs	r2, #31
 800b400:	4013      	ands	r3, r2
 800b402:	d104      	bne.n	800b40e <USB_EPStartXfer+0xe02>
 800b404:	187b      	adds	r3, r7, r1
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	3b01      	subs	r3, #1
 800b40a:	187a      	adds	r2, r7, r1
 800b40c:	6013      	str	r3, [r2, #0]
 800b40e:	2198      	movs	r1, #152	@ 0x98
 800b410:	187b      	adds	r3, r7, r1
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	881b      	ldrh	r3, [r3, #0]
 800b416:	b29a      	uxth	r2, r3
 800b418:	23e0      	movs	r3, #224	@ 0xe0
 800b41a:	18fb      	adds	r3, r7, r3
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	b29b      	uxth	r3, r3
 800b420:	029b      	lsls	r3, r3, #10
 800b422:	b29b      	uxth	r3, r3
 800b424:	4313      	orrs	r3, r2
 800b426:	b29b      	uxth	r3, r3
 800b428:	4a3f      	ldr	r2, [pc, #252]	@ (800b528 <USB_EPStartXfer+0xf1c>)
 800b42a:	4313      	orrs	r3, r2
 800b42c:	b29a      	uxth	r2, r3
 800b42e:	187b      	adds	r3, r7, r1
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	801a      	strh	r2, [r3, #0]
 800b434:	e020      	b.n	800b478 <USB_EPStartXfer+0xe6c>
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	785b      	ldrb	r3, [r3, #1]
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	d11c      	bne.n	800b478 <USB_EPStartXfer+0xe6c>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2250      	movs	r2, #80	@ 0x50
 800b442:	5a9b      	ldrh	r3, [r3, r2]
 800b444:	b29b      	uxth	r3, r3
 800b446:	001a      	movs	r2, r3
 800b448:	21a4      	movs	r1, #164	@ 0xa4
 800b44a:	187b      	adds	r3, r7, r1
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	189b      	adds	r3, r3, r2
 800b450:	187a      	adds	r2, r7, r1
 800b452:	6013      	str	r3, [r2, #0]
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	00da      	lsls	r2, r3, #3
 800b45a:	187b      	adds	r3, r7, r1
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	18d3      	adds	r3, r2, r3
 800b460:	4a33      	ldr	r2, [pc, #204]	@ (800b530 <USB_EPStartXfer+0xf24>)
 800b462:	4694      	mov	ip, r2
 800b464:	4463      	add	r3, ip
 800b466:	21a0      	movs	r1, #160	@ 0xa0
 800b468:	187a      	adds	r2, r7, r1
 800b46a:	6013      	str	r3, [r2, #0]
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	691b      	ldr	r3, [r3, #16]
 800b470:	b29a      	uxth	r2, r3
 800b472:	187b      	adds	r3, r7, r1
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	69db      	ldr	r3, [r3, #28]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d100      	bne.n	800b482 <USB_EPStartXfer+0xe76>
 800b480:	e1c0      	b.n	800b804 <USB_EPStartXfer+0x11f8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	18d2      	adds	r2, r2, r3
 800b48c:	2196      	movs	r1, #150	@ 0x96
 800b48e:	187b      	adds	r3, r7, r1
 800b490:	8812      	ldrh	r2, [r2, #0]
 800b492:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b494:	187b      	adds	r3, r7, r1
 800b496:	881a      	ldrh	r2, [r3, #0]
 800b498:	2380      	movs	r3, #128	@ 0x80
 800b49a:	01db      	lsls	r3, r3, #7
 800b49c:	4013      	ands	r3, r2
 800b49e:	d004      	beq.n	800b4aa <USB_EPStartXfer+0xe9e>
 800b4a0:	187b      	adds	r3, r7, r1
 800b4a2:	881b      	ldrh	r3, [r3, #0]
 800b4a4:	2240      	movs	r2, #64	@ 0x40
 800b4a6:	4013      	ands	r3, r2
 800b4a8:	d10d      	bne.n	800b4c6 <USB_EPStartXfer+0xeba>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b4aa:	2196      	movs	r1, #150	@ 0x96
 800b4ac:	187b      	adds	r3, r7, r1
 800b4ae:	881a      	ldrh	r2, [r3, #0]
 800b4b0:	2380      	movs	r3, #128	@ 0x80
 800b4b2:	01db      	lsls	r3, r3, #7
 800b4b4:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b4b6:	d000      	beq.n	800b4ba <USB_EPStartXfer+0xeae>
 800b4b8:	e1a4      	b.n	800b804 <USB_EPStartXfer+0x11f8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b4ba:	187b      	adds	r3, r7, r1
 800b4bc:	881b      	ldrh	r3, [r3, #0]
 800b4be:	2240      	movs	r2, #64	@ 0x40
 800b4c0:	4013      	ands	r3, r2
 800b4c2:	d000      	beq.n	800b4c6 <USB_EPStartXfer+0xeba>
 800b4c4:	e19e      	b.n	800b804 <USB_EPStartXfer+0x11f8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	009b      	lsls	r3, r3, #2
 800b4ce:	18d3      	adds	r3, r2, r3
 800b4d0:	881b      	ldrh	r3, [r3, #0]
 800b4d2:	b29a      	uxth	r2, r3
 800b4d4:	2094      	movs	r0, #148	@ 0x94
 800b4d6:	183b      	adds	r3, r7, r0
 800b4d8:	4916      	ldr	r1, [pc, #88]	@ (800b534 <USB_EPStartXfer+0xf28>)
 800b4da:	400a      	ands	r2, r1
 800b4dc:	801a      	strh	r2, [r3, #0]
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	009b      	lsls	r3, r3, #2
 800b4e6:	18d3      	adds	r3, r2, r3
 800b4e8:	183a      	adds	r2, r7, r0
 800b4ea:	8812      	ldrh	r2, [r2, #0]
 800b4ec:	4912      	ldr	r1, [pc, #72]	@ (800b538 <USB_EPStartXfer+0xf2c>)
 800b4ee:	430a      	orrs	r2, r1
 800b4f0:	b292      	uxth	r2, r2
 800b4f2:	801a      	strh	r2, [r3, #0]
 800b4f4:	e186      	b.n	800b804 <USB_EPStartXfer+0x11f8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	78db      	ldrb	r3, [r3, #3]
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	d000      	beq.n	800b500 <USB_EPStartXfer+0xef4>
 800b4fe:	e17f      	b.n	800b800 <USB_EPStartXfer+0x11f4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	699a      	ldr	r2, [r3, #24]
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	691b      	ldr	r3, [r3, #16]
 800b508:	429a      	cmp	r2, r3
 800b50a:	d917      	bls.n	800b53c <USB_EPStartXfer+0xf30>
        {
          len = ep->maxpacket;
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	691b      	ldr	r3, [r3, #16]
 800b510:	1d7a      	adds	r2, r7, #5
 800b512:	32ff      	adds	r2, #255	@ 0xff
 800b514:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	699a      	ldr	r2, [r3, #24]
 800b51a:	1d7b      	adds	r3, r7, #5
 800b51c:	33ff      	adds	r3, #255	@ 0xff
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	1ad2      	subs	r2, r2, r3
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	619a      	str	r2, [r3, #24]
 800b526:	e011      	b.n	800b54c <USB_EPStartXfer+0xf40>
 800b528:	ffff8000 	.word	0xffff8000
 800b52c:	00000402 	.word	0x00000402
 800b530:	00000406 	.word	0x00000406
 800b534:	ffff8f8f 	.word	0xffff8f8f
 800b538:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	699b      	ldr	r3, [r3, #24]
 800b540:	1d7a      	adds	r2, r7, #5
 800b542:	32ff      	adds	r2, #255	@ 0xff
 800b544:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	2200      	movs	r2, #0
 800b54a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	785b      	ldrb	r3, [r3, #1]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d000      	beq.n	800b556 <USB_EPStartXfer+0xf4a>
 800b554:	e081      	b.n	800b65a <USB_EPStartXfer+0x104e>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	21cc      	movs	r1, #204	@ 0xcc
 800b55a:	187a      	adds	r2, r7, r1
 800b55c:	6013      	str	r3, [r2, #0]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2250      	movs	r2, #80	@ 0x50
 800b562:	5a9b      	ldrh	r3, [r3, r2]
 800b564:	b29b      	uxth	r3, r3
 800b566:	001a      	movs	r2, r3
 800b568:	187b      	adds	r3, r7, r1
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	189b      	adds	r3, r3, r2
 800b56e:	187a      	adds	r2, r7, r1
 800b570:	6013      	str	r3, [r2, #0]
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	00da      	lsls	r2, r3, #3
 800b578:	187b      	adds	r3, r7, r1
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	18d3      	adds	r3, r2, r3
 800b57e:	4ab6      	ldr	r2, [pc, #728]	@ (800b858 <USB_EPStartXfer+0x124c>)
 800b580:	4694      	mov	ip, r2
 800b582:	4463      	add	r3, ip
 800b584:	21c8      	movs	r1, #200	@ 0xc8
 800b586:	187a      	adds	r2, r7, r1
 800b588:	6013      	str	r3, [r2, #0]
 800b58a:	187b      	adds	r3, r7, r1
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	881b      	ldrh	r3, [r3, #0]
 800b590:	b29b      	uxth	r3, r3
 800b592:	059b      	lsls	r3, r3, #22
 800b594:	0d9b      	lsrs	r3, r3, #22
 800b596:	b29a      	uxth	r2, r3
 800b598:	187b      	adds	r3, r7, r1
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	801a      	strh	r2, [r3, #0]
 800b59e:	1d7b      	adds	r3, r7, #5
 800b5a0:	33ff      	adds	r3, #255	@ 0xff
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d10a      	bne.n	800b5be <USB_EPStartXfer+0xfb2>
 800b5a8:	187b      	adds	r3, r7, r1
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	881b      	ldrh	r3, [r3, #0]
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	4aaa      	ldr	r2, [pc, #680]	@ (800b85c <USB_EPStartXfer+0x1250>)
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	b29a      	uxth	r2, r3
 800b5b6:	187b      	adds	r3, r7, r1
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	801a      	strh	r2, [r3, #0]
 800b5bc:	e072      	b.n	800b6a4 <USB_EPStartXfer+0x1098>
 800b5be:	1d7b      	adds	r3, r7, #5
 800b5c0:	33ff      	adds	r3, #255	@ 0xff
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2b3e      	cmp	r3, #62	@ 0x3e
 800b5c6:	d822      	bhi.n	800b60e <USB_EPStartXfer+0x1002>
 800b5c8:	1d7b      	adds	r3, r7, #5
 800b5ca:	33ff      	adds	r3, #255	@ 0xff
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	085b      	lsrs	r3, r3, #1
 800b5d0:	21dc      	movs	r1, #220	@ 0xdc
 800b5d2:	187a      	adds	r2, r7, r1
 800b5d4:	6013      	str	r3, [r2, #0]
 800b5d6:	1d7b      	adds	r3, r7, #5
 800b5d8:	33ff      	adds	r3, #255	@ 0xff
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2201      	movs	r2, #1
 800b5de:	4013      	ands	r3, r2
 800b5e0:	d004      	beq.n	800b5ec <USB_EPStartXfer+0xfe0>
 800b5e2:	187b      	adds	r3, r7, r1
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	187a      	adds	r2, r7, r1
 800b5ea:	6013      	str	r3, [r2, #0]
 800b5ec:	21c8      	movs	r1, #200	@ 0xc8
 800b5ee:	187b      	adds	r3, r7, r1
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	881b      	ldrh	r3, [r3, #0]
 800b5f4:	b29a      	uxth	r2, r3
 800b5f6:	23dc      	movs	r3, #220	@ 0xdc
 800b5f8:	18fb      	adds	r3, r7, r3
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	029b      	lsls	r3, r3, #10
 800b600:	b29b      	uxth	r3, r3
 800b602:	4313      	orrs	r3, r2
 800b604:	b29a      	uxth	r2, r3
 800b606:	187b      	adds	r3, r7, r1
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	801a      	strh	r2, [r3, #0]
 800b60c:	e04a      	b.n	800b6a4 <USB_EPStartXfer+0x1098>
 800b60e:	1d7b      	adds	r3, r7, #5
 800b610:	33ff      	adds	r3, #255	@ 0xff
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	095b      	lsrs	r3, r3, #5
 800b616:	21dc      	movs	r1, #220	@ 0xdc
 800b618:	187a      	adds	r2, r7, r1
 800b61a:	6013      	str	r3, [r2, #0]
 800b61c:	1d7b      	adds	r3, r7, #5
 800b61e:	33ff      	adds	r3, #255	@ 0xff
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	221f      	movs	r2, #31
 800b624:	4013      	ands	r3, r2
 800b626:	d104      	bne.n	800b632 <USB_EPStartXfer+0x1026>
 800b628:	187b      	adds	r3, r7, r1
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	3b01      	subs	r3, #1
 800b62e:	187a      	adds	r2, r7, r1
 800b630:	6013      	str	r3, [r2, #0]
 800b632:	21c8      	movs	r1, #200	@ 0xc8
 800b634:	187b      	adds	r3, r7, r1
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	881b      	ldrh	r3, [r3, #0]
 800b63a:	b29a      	uxth	r2, r3
 800b63c:	23dc      	movs	r3, #220	@ 0xdc
 800b63e:	18fb      	adds	r3, r7, r3
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	b29b      	uxth	r3, r3
 800b644:	029b      	lsls	r3, r3, #10
 800b646:	b29b      	uxth	r3, r3
 800b648:	4313      	orrs	r3, r2
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	4a83      	ldr	r2, [pc, #524]	@ (800b85c <USB_EPStartXfer+0x1250>)
 800b64e:	4313      	orrs	r3, r2
 800b650:	b29a      	uxth	r2, r3
 800b652:	187b      	adds	r3, r7, r1
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	801a      	strh	r2, [r3, #0]
 800b658:	e024      	b.n	800b6a4 <USB_EPStartXfer+0x1098>
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	785b      	ldrb	r3, [r3, #1]
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d120      	bne.n	800b6a4 <USB_EPStartXfer+0x1098>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	21d4      	movs	r1, #212	@ 0xd4
 800b666:	187a      	adds	r2, r7, r1
 800b668:	6013      	str	r3, [r2, #0]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2250      	movs	r2, #80	@ 0x50
 800b66e:	5a9b      	ldrh	r3, [r3, r2]
 800b670:	b29b      	uxth	r3, r3
 800b672:	001a      	movs	r2, r3
 800b674:	187b      	adds	r3, r7, r1
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	189b      	adds	r3, r3, r2
 800b67a:	187a      	adds	r2, r7, r1
 800b67c:	6013      	str	r3, [r2, #0]
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	00da      	lsls	r2, r3, #3
 800b684:	187b      	adds	r3, r7, r1
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	18d3      	adds	r3, r2, r3
 800b68a:	4a73      	ldr	r2, [pc, #460]	@ (800b858 <USB_EPStartXfer+0x124c>)
 800b68c:	4694      	mov	ip, r2
 800b68e:	4463      	add	r3, ip
 800b690:	21d0      	movs	r1, #208	@ 0xd0
 800b692:	187a      	adds	r2, r7, r1
 800b694:	6013      	str	r3, [r2, #0]
 800b696:	1d7b      	adds	r3, r7, #5
 800b698:	33ff      	adds	r3, #255	@ 0xff
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	b29a      	uxth	r2, r3
 800b69e:	187b      	adds	r3, r7, r1
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	801a      	strh	r2, [r3, #0]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	22c4      	movs	r2, #196	@ 0xc4
 800b6a8:	18ba      	adds	r2, r7, r2
 800b6aa:	6013      	str	r3, [r2, #0]
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	785b      	ldrb	r3, [r3, #1]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d000      	beq.n	800b6b6 <USB_EPStartXfer+0x10aa>
 800b6b4:	e081      	b.n	800b7ba <USB_EPStartXfer+0x11ae>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	21bc      	movs	r1, #188	@ 0xbc
 800b6ba:	187a      	adds	r2, r7, r1
 800b6bc:	6013      	str	r3, [r2, #0]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2250      	movs	r2, #80	@ 0x50
 800b6c2:	5a9b      	ldrh	r3, [r3, r2]
 800b6c4:	b29b      	uxth	r3, r3
 800b6c6:	001a      	movs	r2, r3
 800b6c8:	187b      	adds	r3, r7, r1
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	189b      	adds	r3, r3, r2
 800b6ce:	187a      	adds	r2, r7, r1
 800b6d0:	6013      	str	r3, [r2, #0]
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	00da      	lsls	r2, r3, #3
 800b6d8:	187b      	adds	r3, r7, r1
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	18d3      	adds	r3, r2, r3
 800b6de:	4a60      	ldr	r2, [pc, #384]	@ (800b860 <USB_EPStartXfer+0x1254>)
 800b6e0:	4694      	mov	ip, r2
 800b6e2:	4463      	add	r3, ip
 800b6e4:	21b8      	movs	r1, #184	@ 0xb8
 800b6e6:	187a      	adds	r2, r7, r1
 800b6e8:	6013      	str	r3, [r2, #0]
 800b6ea:	187b      	adds	r3, r7, r1
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	881b      	ldrh	r3, [r3, #0]
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	059b      	lsls	r3, r3, #22
 800b6f4:	0d9b      	lsrs	r3, r3, #22
 800b6f6:	b29a      	uxth	r2, r3
 800b6f8:	187b      	adds	r3, r7, r1
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	801a      	strh	r2, [r3, #0]
 800b6fe:	1d7b      	adds	r3, r7, #5
 800b700:	33ff      	adds	r3, #255	@ 0xff
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d10a      	bne.n	800b71e <USB_EPStartXfer+0x1112>
 800b708:	187b      	adds	r3, r7, r1
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	881b      	ldrh	r3, [r3, #0]
 800b70e:	b29b      	uxth	r3, r3
 800b710:	4a52      	ldr	r2, [pc, #328]	@ (800b85c <USB_EPStartXfer+0x1250>)
 800b712:	4313      	orrs	r3, r2
 800b714:	b29a      	uxth	r2, r3
 800b716:	187b      	adds	r3, r7, r1
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	801a      	strh	r2, [r3, #0]
 800b71c:	e072      	b.n	800b804 <USB_EPStartXfer+0x11f8>
 800b71e:	1d7b      	adds	r3, r7, #5
 800b720:	33ff      	adds	r3, #255	@ 0xff
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	2b3e      	cmp	r3, #62	@ 0x3e
 800b726:	d822      	bhi.n	800b76e <USB_EPStartXfer+0x1162>
 800b728:	1d7b      	adds	r3, r7, #5
 800b72a:	33ff      	adds	r3, #255	@ 0xff
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	085b      	lsrs	r3, r3, #1
 800b730:	21d8      	movs	r1, #216	@ 0xd8
 800b732:	187a      	adds	r2, r7, r1
 800b734:	6013      	str	r3, [r2, #0]
 800b736:	1d7b      	adds	r3, r7, #5
 800b738:	33ff      	adds	r3, #255	@ 0xff
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	2201      	movs	r2, #1
 800b73e:	4013      	ands	r3, r2
 800b740:	d004      	beq.n	800b74c <USB_EPStartXfer+0x1140>
 800b742:	187b      	adds	r3, r7, r1
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	3301      	adds	r3, #1
 800b748:	187a      	adds	r2, r7, r1
 800b74a:	6013      	str	r3, [r2, #0]
 800b74c:	21b8      	movs	r1, #184	@ 0xb8
 800b74e:	187b      	adds	r3, r7, r1
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	881b      	ldrh	r3, [r3, #0]
 800b754:	b29a      	uxth	r2, r3
 800b756:	23d8      	movs	r3, #216	@ 0xd8
 800b758:	18fb      	adds	r3, r7, r3
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	029b      	lsls	r3, r3, #10
 800b760:	b29b      	uxth	r3, r3
 800b762:	4313      	orrs	r3, r2
 800b764:	b29a      	uxth	r2, r3
 800b766:	187b      	adds	r3, r7, r1
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	801a      	strh	r2, [r3, #0]
 800b76c:	e04a      	b.n	800b804 <USB_EPStartXfer+0x11f8>
 800b76e:	1d7b      	adds	r3, r7, #5
 800b770:	33ff      	adds	r3, #255	@ 0xff
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	095b      	lsrs	r3, r3, #5
 800b776:	21d8      	movs	r1, #216	@ 0xd8
 800b778:	187a      	adds	r2, r7, r1
 800b77a:	6013      	str	r3, [r2, #0]
 800b77c:	1d7b      	adds	r3, r7, #5
 800b77e:	33ff      	adds	r3, #255	@ 0xff
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	221f      	movs	r2, #31
 800b784:	4013      	ands	r3, r2
 800b786:	d104      	bne.n	800b792 <USB_EPStartXfer+0x1186>
 800b788:	187b      	adds	r3, r7, r1
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	3b01      	subs	r3, #1
 800b78e:	187a      	adds	r2, r7, r1
 800b790:	6013      	str	r3, [r2, #0]
 800b792:	21b8      	movs	r1, #184	@ 0xb8
 800b794:	187b      	adds	r3, r7, r1
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	881b      	ldrh	r3, [r3, #0]
 800b79a:	b29a      	uxth	r2, r3
 800b79c:	23d8      	movs	r3, #216	@ 0xd8
 800b79e:	18fb      	adds	r3, r7, r3
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	029b      	lsls	r3, r3, #10
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	4a2b      	ldr	r2, [pc, #172]	@ (800b85c <USB_EPStartXfer+0x1250>)
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	b29a      	uxth	r2, r3
 800b7b2:	187b      	adds	r3, r7, r1
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	801a      	strh	r2, [r3, #0]
 800b7b8:	e024      	b.n	800b804 <USB_EPStartXfer+0x11f8>
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	785b      	ldrb	r3, [r3, #1]
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d120      	bne.n	800b804 <USB_EPStartXfer+0x11f8>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2250      	movs	r2, #80	@ 0x50
 800b7c6:	5a9b      	ldrh	r3, [r3, r2]
 800b7c8:	b29b      	uxth	r3, r3
 800b7ca:	001a      	movs	r2, r3
 800b7cc:	21c4      	movs	r1, #196	@ 0xc4
 800b7ce:	187b      	adds	r3, r7, r1
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	189b      	adds	r3, r3, r2
 800b7d4:	187a      	adds	r2, r7, r1
 800b7d6:	6013      	str	r3, [r2, #0]
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	00da      	lsls	r2, r3, #3
 800b7de:	187b      	adds	r3, r7, r1
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	18d3      	adds	r3, r2, r3
 800b7e4:	4a1e      	ldr	r2, [pc, #120]	@ (800b860 <USB_EPStartXfer+0x1254>)
 800b7e6:	4694      	mov	ip, r2
 800b7e8:	4463      	add	r3, ip
 800b7ea:	21c0      	movs	r1, #192	@ 0xc0
 800b7ec:	187a      	adds	r2, r7, r1
 800b7ee:	6013      	str	r3, [r2, #0]
 800b7f0:	1d7b      	adds	r3, r7, #5
 800b7f2:	33ff      	adds	r3, #255	@ 0xff
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	b29a      	uxth	r2, r3
 800b7f8:	187b      	adds	r3, r7, r1
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	801a      	strh	r2, [r3, #0]
 800b7fe:	e001      	b.n	800b804 <USB_EPStartXfer+0x11f8>
      }
      else
      {
        return HAL_ERROR;
 800b800:	2301      	movs	r3, #1
 800b802:	e025      	b.n	800b850 <USB_EPStartXfer+0x1244>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	18d3      	adds	r3, r2, r3
 800b80e:	881b      	ldrh	r3, [r3, #0]
 800b810:	b29a      	uxth	r2, r3
 800b812:	208a      	movs	r0, #138	@ 0x8a
 800b814:	183b      	adds	r3, r7, r0
 800b816:	4913      	ldr	r1, [pc, #76]	@ (800b864 <USB_EPStartXfer+0x1258>)
 800b818:	400a      	ands	r2, r1
 800b81a:	801a      	strh	r2, [r3, #0]
 800b81c:	183b      	adds	r3, r7, r0
 800b81e:	183a      	adds	r2, r7, r0
 800b820:	8812      	ldrh	r2, [r2, #0]
 800b822:	2180      	movs	r1, #128	@ 0x80
 800b824:	0149      	lsls	r1, r1, #5
 800b826:	404a      	eors	r2, r1
 800b828:	801a      	strh	r2, [r3, #0]
 800b82a:	183b      	adds	r3, r7, r0
 800b82c:	183a      	adds	r2, r7, r0
 800b82e:	8812      	ldrh	r2, [r2, #0]
 800b830:	2180      	movs	r1, #128	@ 0x80
 800b832:	0189      	lsls	r1, r1, #6
 800b834:	404a      	eors	r2, r1
 800b836:	801a      	strh	r2, [r3, #0]
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	18d3      	adds	r3, r2, r3
 800b842:	183a      	adds	r2, r7, r0
 800b844:	8812      	ldrh	r2, [r2, #0]
 800b846:	4908      	ldr	r1, [pc, #32]	@ (800b868 <USB_EPStartXfer+0x125c>)
 800b848:	430a      	orrs	r2, r1
 800b84a:	b292      	uxth	r2, r2
 800b84c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800b84e:	2300      	movs	r3, #0
}
 800b850:	0018      	movs	r0, r3
 800b852:	46bd      	mov	sp, r7
 800b854:	b043      	add	sp, #268	@ 0x10c
 800b856:	bd90      	pop	{r4, r7, pc}
 800b858:	00000402 	.word	0x00000402
 800b85c:	ffff8000 	.word	0xffff8000
 800b860:	00000406 	.word	0x00000406
 800b864:	ffffbf8f 	.word	0xffffbf8f
 800b868:	ffff8080 	.word	0xffff8080

0800b86c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b084      	sub	sp, #16
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	785b      	ldrb	r3, [r3, #1]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d01d      	beq.n	800b8ba <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	009b      	lsls	r3, r3, #2
 800b886:	18d3      	adds	r3, r2, r3
 800b888:	881b      	ldrh	r3, [r3, #0]
 800b88a:	b29a      	uxth	r2, r3
 800b88c:	200c      	movs	r0, #12
 800b88e:	183b      	adds	r3, r7, r0
 800b890:	491b      	ldr	r1, [pc, #108]	@ (800b900 <USB_EPSetStall+0x94>)
 800b892:	400a      	ands	r2, r1
 800b894:	801a      	strh	r2, [r3, #0]
 800b896:	183b      	adds	r3, r7, r0
 800b898:	183a      	adds	r2, r7, r0
 800b89a:	8812      	ldrh	r2, [r2, #0]
 800b89c:	2110      	movs	r1, #16
 800b89e:	404a      	eors	r2, r1
 800b8a0:	801a      	strh	r2, [r3, #0]
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	18d3      	adds	r3, r2, r3
 800b8ac:	183a      	adds	r2, r7, r0
 800b8ae:	8812      	ldrh	r2, [r2, #0]
 800b8b0:	4914      	ldr	r1, [pc, #80]	@ (800b904 <USB_EPSetStall+0x98>)
 800b8b2:	430a      	orrs	r2, r1
 800b8b4:	b292      	uxth	r2, r2
 800b8b6:	801a      	strh	r2, [r3, #0]
 800b8b8:	e01d      	b.n	800b8f6 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b8ba:	687a      	ldr	r2, [r7, #4]
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	009b      	lsls	r3, r3, #2
 800b8c2:	18d3      	adds	r3, r2, r3
 800b8c4:	881b      	ldrh	r3, [r3, #0]
 800b8c6:	b29a      	uxth	r2, r3
 800b8c8:	200e      	movs	r0, #14
 800b8ca:	183b      	adds	r3, r7, r0
 800b8cc:	490e      	ldr	r1, [pc, #56]	@ (800b908 <USB_EPSetStall+0x9c>)
 800b8ce:	400a      	ands	r2, r1
 800b8d0:	801a      	strh	r2, [r3, #0]
 800b8d2:	183b      	adds	r3, r7, r0
 800b8d4:	183a      	adds	r2, r7, r0
 800b8d6:	8812      	ldrh	r2, [r2, #0]
 800b8d8:	2180      	movs	r1, #128	@ 0x80
 800b8da:	0149      	lsls	r1, r1, #5
 800b8dc:	404a      	eors	r2, r1
 800b8de:	801a      	strh	r2, [r3, #0]
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	18d3      	adds	r3, r2, r3
 800b8ea:	183a      	adds	r2, r7, r0
 800b8ec:	8812      	ldrh	r2, [r2, #0]
 800b8ee:	4905      	ldr	r1, [pc, #20]	@ (800b904 <USB_EPSetStall+0x98>)
 800b8f0:	430a      	orrs	r2, r1
 800b8f2:	b292      	uxth	r2, r2
 800b8f4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800b8f6:	2300      	movs	r3, #0
}
 800b8f8:	0018      	movs	r0, r3
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	b004      	add	sp, #16
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	ffff8fbf 	.word	0xffff8fbf
 800b904:	ffff8080 	.word	0xffff8080
 800b908:	ffffbf8f 	.word	0xffffbf8f

0800b90c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b086      	sub	sp, #24
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	7b1b      	ldrb	r3, [r3, #12]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d000      	beq.n	800b920 <USB_EPClearStall+0x14>
 800b91e:	e095      	b.n	800ba4c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	785b      	ldrb	r3, [r3, #1]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d046      	beq.n	800b9b6 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	18d2      	adds	r2, r2, r3
 800b932:	2110      	movs	r1, #16
 800b934:	187b      	adds	r3, r7, r1
 800b936:	8812      	ldrh	r2, [r2, #0]
 800b938:	801a      	strh	r2, [r3, #0]
 800b93a:	187b      	adds	r3, r7, r1
 800b93c:	881b      	ldrh	r3, [r3, #0]
 800b93e:	2240      	movs	r2, #64	@ 0x40
 800b940:	4013      	ands	r3, r2
 800b942:	d016      	beq.n	800b972 <USB_EPClearStall+0x66>
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	18d3      	adds	r3, r2, r3
 800b94e:	881b      	ldrh	r3, [r3, #0]
 800b950:	b29a      	uxth	r2, r3
 800b952:	200e      	movs	r0, #14
 800b954:	183b      	adds	r3, r7, r0
 800b956:	4940      	ldr	r1, [pc, #256]	@ (800ba58 <USB_EPClearStall+0x14c>)
 800b958:	400a      	ands	r2, r1
 800b95a:	801a      	strh	r2, [r3, #0]
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	18d3      	adds	r3, r2, r3
 800b966:	183a      	adds	r2, r7, r0
 800b968:	8812      	ldrh	r2, [r2, #0]
 800b96a:	493c      	ldr	r1, [pc, #240]	@ (800ba5c <USB_EPClearStall+0x150>)
 800b96c:	430a      	orrs	r2, r1
 800b96e:	b292      	uxth	r2, r2
 800b970:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	78db      	ldrb	r3, [r3, #3]
 800b976:	2b01      	cmp	r3, #1
 800b978:	d068      	beq.n	800ba4c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	009b      	lsls	r3, r3, #2
 800b982:	18d3      	adds	r3, r2, r3
 800b984:	881b      	ldrh	r3, [r3, #0]
 800b986:	b29a      	uxth	r2, r3
 800b988:	200c      	movs	r0, #12
 800b98a:	183b      	adds	r3, r7, r0
 800b98c:	4934      	ldr	r1, [pc, #208]	@ (800ba60 <USB_EPClearStall+0x154>)
 800b98e:	400a      	ands	r2, r1
 800b990:	801a      	strh	r2, [r3, #0]
 800b992:	183b      	adds	r3, r7, r0
 800b994:	183a      	adds	r2, r7, r0
 800b996:	8812      	ldrh	r2, [r2, #0]
 800b998:	2120      	movs	r1, #32
 800b99a:	404a      	eors	r2, r1
 800b99c:	801a      	strh	r2, [r3, #0]
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	18d3      	adds	r3, r2, r3
 800b9a8:	183a      	adds	r2, r7, r0
 800b9aa:	8812      	ldrh	r2, [r2, #0]
 800b9ac:	492d      	ldr	r1, [pc, #180]	@ (800ba64 <USB_EPClearStall+0x158>)
 800b9ae:	430a      	orrs	r2, r1
 800b9b0:	b292      	uxth	r2, r2
 800b9b2:	801a      	strh	r2, [r3, #0]
 800b9b4:	e04a      	b.n	800ba4c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	18d2      	adds	r2, r2, r3
 800b9c0:	2116      	movs	r1, #22
 800b9c2:	187b      	adds	r3, r7, r1
 800b9c4:	8812      	ldrh	r2, [r2, #0]
 800b9c6:	801a      	strh	r2, [r3, #0]
 800b9c8:	187b      	adds	r3, r7, r1
 800b9ca:	881a      	ldrh	r2, [r3, #0]
 800b9cc:	2380      	movs	r3, #128	@ 0x80
 800b9ce:	01db      	lsls	r3, r3, #7
 800b9d0:	4013      	ands	r3, r2
 800b9d2:	d016      	beq.n	800ba02 <USB_EPClearStall+0xf6>
 800b9d4:	687a      	ldr	r2, [r7, #4]
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	009b      	lsls	r3, r3, #2
 800b9dc:	18d3      	adds	r3, r2, r3
 800b9de:	881b      	ldrh	r3, [r3, #0]
 800b9e0:	b29a      	uxth	r2, r3
 800b9e2:	2014      	movs	r0, #20
 800b9e4:	183b      	adds	r3, r7, r0
 800b9e6:	491c      	ldr	r1, [pc, #112]	@ (800ba58 <USB_EPClearStall+0x14c>)
 800b9e8:	400a      	ands	r2, r1
 800b9ea:	801a      	strh	r2, [r3, #0]
 800b9ec:	687a      	ldr	r2, [r7, #4]
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	009b      	lsls	r3, r3, #2
 800b9f4:	18d3      	adds	r3, r2, r3
 800b9f6:	183a      	adds	r2, r7, r0
 800b9f8:	8812      	ldrh	r2, [r2, #0]
 800b9fa:	491b      	ldr	r1, [pc, #108]	@ (800ba68 <USB_EPClearStall+0x15c>)
 800b9fc:	430a      	orrs	r2, r1
 800b9fe:	b292      	uxth	r2, r2
 800ba00:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	18d3      	adds	r3, r2, r3
 800ba0c:	881b      	ldrh	r3, [r3, #0]
 800ba0e:	b29a      	uxth	r2, r3
 800ba10:	2012      	movs	r0, #18
 800ba12:	183b      	adds	r3, r7, r0
 800ba14:	4915      	ldr	r1, [pc, #84]	@ (800ba6c <USB_EPClearStall+0x160>)
 800ba16:	400a      	ands	r2, r1
 800ba18:	801a      	strh	r2, [r3, #0]
 800ba1a:	183b      	adds	r3, r7, r0
 800ba1c:	183a      	adds	r2, r7, r0
 800ba1e:	8812      	ldrh	r2, [r2, #0]
 800ba20:	2180      	movs	r1, #128	@ 0x80
 800ba22:	0149      	lsls	r1, r1, #5
 800ba24:	404a      	eors	r2, r1
 800ba26:	801a      	strh	r2, [r3, #0]
 800ba28:	183b      	adds	r3, r7, r0
 800ba2a:	183a      	adds	r2, r7, r0
 800ba2c:	8812      	ldrh	r2, [r2, #0]
 800ba2e:	2180      	movs	r1, #128	@ 0x80
 800ba30:	0189      	lsls	r1, r1, #6
 800ba32:	404a      	eors	r2, r1
 800ba34:	801a      	strh	r2, [r3, #0]
 800ba36:	687a      	ldr	r2, [r7, #4]
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	18d3      	adds	r3, r2, r3
 800ba40:	183a      	adds	r2, r7, r0
 800ba42:	8812      	ldrh	r2, [r2, #0]
 800ba44:	4907      	ldr	r1, [pc, #28]	@ (800ba64 <USB_EPClearStall+0x158>)
 800ba46:	430a      	orrs	r2, r1
 800ba48:	b292      	uxth	r2, r2
 800ba4a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800ba4c:	2300      	movs	r3, #0
}
 800ba4e:	0018      	movs	r0, r3
 800ba50:	46bd      	mov	sp, r7
 800ba52:	b006      	add	sp, #24
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	46c0      	nop			@ (mov r8, r8)
 800ba58:	ffff8f8f 	.word	0xffff8f8f
 800ba5c:	ffff80c0 	.word	0xffff80c0
 800ba60:	ffff8fbf 	.word	0xffff8fbf
 800ba64:	ffff8080 	.word	0xffff8080
 800ba68:	ffffc080 	.word	0xffffc080
 800ba6c:	ffffbf8f 	.word	0xffffbf8f

0800ba70 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	000a      	movs	r2, r1
 800ba7a:	1cfb      	adds	r3, r7, #3
 800ba7c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800ba7e:	1cfb      	adds	r3, r7, #3
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d103      	bne.n	800ba8e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	224c      	movs	r2, #76	@ 0x4c
 800ba8a:	2180      	movs	r1, #128	@ 0x80
 800ba8c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800ba8e:	2300      	movs	r3, #0
}
 800ba90:	0018      	movs	r0, r3
 800ba92:	46bd      	mov	sp, r7
 800ba94:	b002      	add	sp, #8
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2258      	movs	r2, #88	@ 0x58
 800baa4:	5a9b      	ldrh	r3, [r3, r2]
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	4a05      	ldr	r2, [pc, #20]	@ (800bac0 <USB_DevConnect+0x28>)
 800baaa:	4313      	orrs	r3, r2
 800baac:	b299      	uxth	r1, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2258      	movs	r2, #88	@ 0x58
 800bab2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800bab4:	2300      	movs	r3, #0
}
 800bab6:	0018      	movs	r0, r3
 800bab8:	46bd      	mov	sp, r7
 800baba:	b002      	add	sp, #8
 800babc:	bd80      	pop	{r7, pc}
 800babe:	46c0      	nop			@ (mov r8, r8)
 800bac0:	ffff8000 	.word	0xffff8000

0800bac4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2244      	movs	r2, #68	@ 0x44
 800bad0:	5a9b      	ldrh	r3, [r3, r2]
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800bad6:	68fb      	ldr	r3, [r7, #12]
}
 800bad8:	0018      	movs	r0, r3
 800bada:	46bd      	mov	sp, r7
 800badc:	b004      	add	sp, #16
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b08a      	sub	sp, #40	@ 0x28
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	60b9      	str	r1, [r7, #8]
 800baea:	0019      	movs	r1, r3
 800baec:	1dbb      	adds	r3, r7, #6
 800baee:	801a      	strh	r2, [r3, #0]
 800baf0:	1d3b      	adds	r3, r7, #4
 800baf2:	1c0a      	adds	r2, r1, #0
 800baf4:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800baf6:	1d3b      	adds	r3, r7, #4
 800baf8:	881b      	ldrh	r3, [r3, #0]
 800bafa:	3301      	adds	r3, #1
 800bafc:	085b      	lsrs	r3, r3, #1
 800bafe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bb08:	1dbb      	adds	r3, r7, #6
 800bb0a:	881a      	ldrh	r2, [r3, #0]
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	18d3      	adds	r3, r2, r3
 800bb10:	2280      	movs	r2, #128	@ 0x80
 800bb12:	00d2      	lsls	r2, r2, #3
 800bb14:	4694      	mov	ip, r2
 800bb16:	4463      	add	r3, ip
 800bb18:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bb1a:	69bb      	ldr	r3, [r7, #24]
 800bb1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb1e:	e020      	b.n	800bb62 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 800bb20:	69fb      	ldr	r3, [r7, #28]
 800bb22:	781a      	ldrb	r2, [r3, #0]
 800bb24:	2112      	movs	r1, #18
 800bb26:	187b      	adds	r3, r7, r1
 800bb28:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800bb2a:	69fb      	ldr	r3, [r7, #28]
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	021b      	lsls	r3, r3, #8
 800bb32:	b21a      	sxth	r2, r3
 800bb34:	187b      	adds	r3, r7, r1
 800bb36:	2000      	movs	r0, #0
 800bb38:	5e1b      	ldrsh	r3, [r3, r0]
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	b21a      	sxth	r2, r3
 800bb3e:	187b      	adds	r3, r7, r1
 800bb40:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800bb42:	6a3b      	ldr	r3, [r7, #32]
 800bb44:	187a      	adds	r2, r7, r1
 800bb46:	8812      	ldrh	r2, [r2, #0]
 800bb48:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bb4a:	6a3b      	ldr	r3, [r7, #32]
 800bb4c:	3302      	adds	r3, #2
 800bb4e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800bb50:	69fb      	ldr	r3, [r7, #28]
 800bb52:	3301      	adds	r3, #1
 800bb54:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800bb56:	69fb      	ldr	r3, [r7, #28]
 800bb58:	3301      	adds	r3, #1
 800bb5a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bb5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb5e:	3b01      	subs	r3, #1
 800bb60:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d1db      	bne.n	800bb20 <USB_WritePMA+0x40>
  }
}
 800bb68:	46c0      	nop			@ (mov r8, r8)
 800bb6a:	46c0      	nop			@ (mov r8, r8)
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	b00a      	add	sp, #40	@ 0x28
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bb72:	b580      	push	{r7, lr}
 800bb74:	b08a      	sub	sp, #40	@ 0x28
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	60f8      	str	r0, [r7, #12]
 800bb7a:	60b9      	str	r1, [r7, #8]
 800bb7c:	0019      	movs	r1, r3
 800bb7e:	1dbb      	adds	r3, r7, #6
 800bb80:	801a      	strh	r2, [r3, #0]
 800bb82:	1d3b      	adds	r3, r7, #4
 800bb84:	1c0a      	adds	r2, r1, #0
 800bb86:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bb88:	1d3b      	adds	r3, r7, #4
 800bb8a:	881b      	ldrh	r3, [r3, #0]
 800bb8c:	085b      	lsrs	r3, r3, #1
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bb9a:	1dbb      	adds	r3, r7, #6
 800bb9c:	881a      	ldrh	r2, [r3, #0]
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	18d3      	adds	r3, r2, r3
 800bba2:	2280      	movs	r2, #128	@ 0x80
 800bba4:	00d2      	lsls	r2, r2, #3
 800bba6:	4694      	mov	ip, r2
 800bba8:	4463      	add	r3, ip
 800bbaa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bbac:	69bb      	ldr	r3, [r7, #24]
 800bbae:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbb0:	e018      	b.n	800bbe4 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800bbb2:	6a3b      	ldr	r3, [r7, #32]
 800bbb4:	881b      	ldrh	r3, [r3, #0]
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bbba:	6a3b      	ldr	r3, [r7, #32]
 800bbbc:	3302      	adds	r3, #2
 800bbbe:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	b2da      	uxtb	r2, r3
 800bbc4:	69fb      	ldr	r3, [r7, #28]
 800bbc6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	0a1b      	lsrs	r3, r3, #8
 800bbd2:	b2da      	uxtb	r2, r3
 800bbd4:	69fb      	ldr	r3, [r7, #28]
 800bbd6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bbd8:	69fb      	ldr	r3, [r7, #28]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe0:	3b01      	subs	r3, #1
 800bbe2:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d1e3      	bne.n	800bbb2 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800bbea:	1d3b      	adds	r3, r7, #4
 800bbec:	881b      	ldrh	r3, [r3, #0]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	4013      	ands	r3, r2
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d007      	beq.n	800bc08 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 800bbf8:	6a3b      	ldr	r3, [r7, #32]
 800bbfa:	881b      	ldrh	r3, [r3, #0]
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	b2da      	uxtb	r2, r3
 800bc04:	69fb      	ldr	r3, [r7, #28]
 800bc06:	701a      	strb	r2, [r3, #0]
  }
}
 800bc08:	46c0      	nop			@ (mov r8, r8)
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	b00a      	add	sp, #40	@ 0x28
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	000a      	movs	r2, r1
 800bc1a:	1cfb      	adds	r3, r7, #3
 800bc1c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800bc1e:	230f      	movs	r3, #15
 800bc20:	18fb      	adds	r3, r7, r3
 800bc22:	2200      	movs	r2, #0
 800bc24:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	7c1b      	ldrb	r3, [r3, #16]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d116      	bne.n	800bc5c <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bc2e:	2380      	movs	r3, #128	@ 0x80
 800bc30:	009b      	lsls	r3, r3, #2
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	2202      	movs	r2, #2
 800bc36:	2181      	movs	r1, #129	@ 0x81
 800bc38:	f002 f88b 	bl	800dd52 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bc42:	2380      	movs	r3, #128	@ 0x80
 800bc44:	009b      	lsls	r3, r3, #2
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	2202      	movs	r2, #2
 800bc4a:	2101      	movs	r1, #1
 800bc4c:	f002 f881 	bl	800dd52 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	23b6      	movs	r3, #182	@ 0xb6
 800bc54:	005b      	lsls	r3, r3, #1
 800bc56:	2101      	movs	r1, #1
 800bc58:	50d1      	str	r1, [r2, r3]
 800bc5a:	e013      	b.n	800bc84 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	2340      	movs	r3, #64	@ 0x40
 800bc60:	2202      	movs	r2, #2
 800bc62:	2181      	movs	r1, #129	@ 0x81
 800bc64:	f002 f875 	bl	800dd52 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	2340      	movs	r3, #64	@ 0x40
 800bc72:	2202      	movs	r2, #2
 800bc74:	2101      	movs	r1, #1
 800bc76:	f002 f86c 	bl	800dd52 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	23b6      	movs	r3, #182	@ 0xb6
 800bc7e:	005b      	lsls	r3, r3, #1
 800bc80:	2101      	movs	r1, #1
 800bc82:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	2308      	movs	r3, #8
 800bc88:	2203      	movs	r2, #3
 800bc8a:	2182      	movs	r1, #130	@ 0x82
 800bc8c:	f002 f861 	bl	800dd52 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2201      	movs	r2, #1
 800bc94:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bc96:	2387      	movs	r3, #135	@ 0x87
 800bc98:	009b      	lsls	r3, r3, #2
 800bc9a:	0018      	movs	r0, r3
 800bc9c:	f002 f9f0 	bl	800e080 <USBD_static_malloc>
 800bca0:	0001      	movs	r1, r0
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	23ae      	movs	r3, #174	@ 0xae
 800bca6:	009b      	lsls	r3, r3, #2
 800bca8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	23ae      	movs	r3, #174	@ 0xae
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	58d3      	ldr	r3, [r2, r3]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d104      	bne.n	800bcc0 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800bcb6:	230f      	movs	r3, #15
 800bcb8:	18fb      	adds	r3, r7, r3
 800bcba:	2201      	movs	r2, #1
 800bcbc:	701a      	strb	r2, [r3, #0]
 800bcbe:	e02c      	b.n	800bd1a <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bcc0:	687a      	ldr	r2, [r7, #4]
 800bcc2:	23ae      	movs	r3, #174	@ 0xae
 800bcc4:	009b      	lsls	r3, r3, #2
 800bcc6:	58d3      	ldr	r3, [r2, r3]
 800bcc8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	23af      	movs	r3, #175	@ 0xaf
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	58d3      	ldr	r3, [r2, r3]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800bcd6:	68ba      	ldr	r2, [r7, #8]
 800bcd8:	2385      	movs	r3, #133	@ 0x85
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	2100      	movs	r1, #0
 800bcde:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800bce0:	68ba      	ldr	r2, [r7, #8]
 800bce2:	2386      	movs	r3, #134	@ 0x86
 800bce4:	009b      	lsls	r3, r3, #2
 800bce6:	2100      	movs	r1, #0
 800bce8:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	7c1b      	ldrb	r3, [r3, #16]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d10a      	bne.n	800bd08 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bcf2:	68ba      	ldr	r2, [r7, #8]
 800bcf4:	2381      	movs	r3, #129	@ 0x81
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	58d2      	ldr	r2, [r2, r3]
 800bcfa:	2380      	movs	r3, #128	@ 0x80
 800bcfc:	009b      	lsls	r3, r3, #2
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	2101      	movs	r1, #1
 800bd02:	f002 f970 	bl	800dfe6 <USBD_LL_PrepareReceive>
 800bd06:	e008      	b.n	800bd1a <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bd08:	68ba      	ldr	r2, [r7, #8]
 800bd0a:	2381      	movs	r3, #129	@ 0x81
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	58d2      	ldr	r2, [r2, r3]
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	2340      	movs	r3, #64	@ 0x40
 800bd14:	2101      	movs	r1, #1
 800bd16:	f002 f966 	bl	800dfe6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800bd1a:	230f      	movs	r3, #15
 800bd1c:	18fb      	adds	r3, r7, r3
 800bd1e:	781b      	ldrb	r3, [r3, #0]
}
 800bd20:	0018      	movs	r0, r3
 800bd22:	46bd      	mov	sp, r7
 800bd24:	b004      	add	sp, #16
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b084      	sub	sp, #16
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	000a      	movs	r2, r1
 800bd32:	1cfb      	adds	r3, r7, #3
 800bd34:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800bd36:	230f      	movs	r3, #15
 800bd38:	18fb      	adds	r3, r7, r3
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2181      	movs	r1, #129	@ 0x81
 800bd42:	0018      	movs	r0, r3
 800bd44:	f002 f83c 	bl	800ddc0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2101      	movs	r1, #1
 800bd52:	0018      	movs	r0, r3
 800bd54:	f002 f834 	bl	800ddc0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	23b6      	movs	r3, #182	@ 0xb6
 800bd5c:	005b      	lsls	r3, r3, #1
 800bd5e:	2100      	movs	r1, #0
 800bd60:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2182      	movs	r1, #130	@ 0x82
 800bd66:	0018      	movs	r0, r3
 800bd68:	f002 f82a 	bl	800ddc0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	23ae      	movs	r3, #174	@ 0xae
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	58d3      	ldr	r3, [r2, r3]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d011      	beq.n	800bda2 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	23af      	movs	r3, #175	@ 0xaf
 800bd82:	009b      	lsls	r3, r3, #2
 800bd84:	58d3      	ldr	r3, [r2, r3]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	23ae      	movs	r3, #174	@ 0xae
 800bd8e:	009b      	lsls	r3, r3, #2
 800bd90:	58d3      	ldr	r3, [r2, r3]
 800bd92:	0018      	movs	r0, r3
 800bd94:	f002 f980 	bl	800e098 <USBD_static_free>
    pdev->pClassData = NULL;
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	23ae      	movs	r3, #174	@ 0xae
 800bd9c:	009b      	lsls	r3, r3, #2
 800bd9e:	2100      	movs	r1, #0
 800bda0:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800bda2:	230f      	movs	r3, #15
 800bda4:	18fb      	adds	r3, r7, r3
 800bda6:	781b      	ldrb	r3, [r3, #0]
}
 800bda8:	0018      	movs	r0, r3
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	b004      	add	sp, #16
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b086      	sub	sp, #24
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	23ae      	movs	r3, #174	@ 0xae
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	58d3      	ldr	r3, [r2, r3]
 800bdc2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800bdc4:	230f      	movs	r3, #15
 800bdc6:	18fb      	adds	r3, r7, r3
 800bdc8:	2200      	movs	r2, #0
 800bdca:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800bdcc:	230c      	movs	r3, #12
 800bdce:	18fb      	adds	r3, r7, r3
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800bdd4:	2317      	movs	r3, #23
 800bdd6:	18fb      	adds	r3, r7, r3
 800bdd8:	2200      	movs	r2, #0
 800bdda:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	001a      	movs	r2, r3
 800bde2:	2360      	movs	r3, #96	@ 0x60
 800bde4:	4013      	ands	r3, r2
 800bde6:	d03d      	beq.n	800be64 <USBD_CDC_Setup+0xb4>
 800bde8:	2b20      	cmp	r3, #32
 800bdea:	d000      	beq.n	800bdee <USBD_CDC_Setup+0x3e>
 800bdec:	e094      	b.n	800bf18 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	88db      	ldrh	r3, [r3, #6]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d02b      	beq.n	800be4e <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	b25b      	sxtb	r3, r3
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	da12      	bge.n	800be26 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	23af      	movs	r3, #175	@ 0xaf
 800be04:	009b      	lsls	r3, r3, #2
 800be06:	58d3      	ldr	r3, [r2, r3]
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	683a      	ldr	r2, [r7, #0]
 800be0c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800be0e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800be10:	683a      	ldr	r2, [r7, #0]
 800be12:	88d2      	ldrh	r2, [r2, #6]
 800be14:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800be16:	6939      	ldr	r1, [r7, #16]
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	88da      	ldrh	r2, [r3, #6]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	0018      	movs	r0, r3
 800be20:	f001 fbaf 	bl	800d582 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800be24:	e083      	b.n	800bf2e <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	7859      	ldrb	r1, [r3, #1]
 800be2a:	693a      	ldr	r2, [r7, #16]
 800be2c:	2380      	movs	r3, #128	@ 0x80
 800be2e:	009b      	lsls	r3, r3, #2
 800be30:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	88db      	ldrh	r3, [r3, #6]
 800be36:	b2d9      	uxtb	r1, r3
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	4a40      	ldr	r2, [pc, #256]	@ (800bf3c <USBD_CDC_Setup+0x18c>)
 800be3c:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800be3e:	6939      	ldr	r1, [r7, #16]
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	88da      	ldrh	r2, [r3, #6]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	0018      	movs	r0, r3
 800be48:	f001 fbce 	bl	800d5e8 <USBD_CtlPrepareRx>
      break;
 800be4c:	e06f      	b.n	800bf2e <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	23af      	movs	r3, #175	@ 0xaf
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	58d3      	ldr	r3, [r2, r3]
 800be56:	689b      	ldr	r3, [r3, #8]
 800be58:	683a      	ldr	r2, [r7, #0]
 800be5a:	7850      	ldrb	r0, [r2, #1]
 800be5c:	6839      	ldr	r1, [r7, #0]
 800be5e:	2200      	movs	r2, #0
 800be60:	4798      	blx	r3
      break;
 800be62:	e064      	b.n	800bf2e <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	785b      	ldrb	r3, [r3, #1]
 800be68:	2b0b      	cmp	r3, #11
 800be6a:	d037      	beq.n	800bedc <USBD_CDC_Setup+0x12c>
 800be6c:	dc47      	bgt.n	800befe <USBD_CDC_Setup+0x14e>
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d002      	beq.n	800be78 <USBD_CDC_Setup+0xc8>
 800be72:	2b0a      	cmp	r3, #10
 800be74:	d019      	beq.n	800beaa <USBD_CDC_Setup+0xfa>
 800be76:	e042      	b.n	800befe <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	23a7      	movs	r3, #167	@ 0xa7
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	5cd3      	ldrb	r3, [r2, r3]
 800be80:	2b03      	cmp	r3, #3
 800be82:	d107      	bne.n	800be94 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800be84:	230c      	movs	r3, #12
 800be86:	18f9      	adds	r1, r7, r3
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2202      	movs	r2, #2
 800be8c:	0018      	movs	r0, r3
 800be8e:	f001 fb78 	bl	800d582 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800be92:	e040      	b.n	800bf16 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800be94:	683a      	ldr	r2, [r7, #0]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	0011      	movs	r1, r2
 800be9a:	0018      	movs	r0, r3
 800be9c:	f001 faf3 	bl	800d486 <USBD_CtlError>
            ret = USBD_FAIL;
 800bea0:	2317      	movs	r3, #23
 800bea2:	18fb      	adds	r3, r7, r3
 800bea4:	2202      	movs	r2, #2
 800bea6:	701a      	strb	r2, [r3, #0]
          break;
 800bea8:	e035      	b.n	800bf16 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	23a7      	movs	r3, #167	@ 0xa7
 800beae:	009b      	lsls	r3, r3, #2
 800beb0:	5cd3      	ldrb	r3, [r2, r3]
 800beb2:	2b03      	cmp	r3, #3
 800beb4:	d107      	bne.n	800bec6 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800beb6:	230f      	movs	r3, #15
 800beb8:	18f9      	adds	r1, r7, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2201      	movs	r2, #1
 800bebe:	0018      	movs	r0, r3
 800bec0:	f001 fb5f 	bl	800d582 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bec4:	e027      	b.n	800bf16 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800bec6:	683a      	ldr	r2, [r7, #0]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	0011      	movs	r1, r2
 800becc:	0018      	movs	r0, r3
 800bece:	f001 fada 	bl	800d486 <USBD_CtlError>
            ret = USBD_FAIL;
 800bed2:	2317      	movs	r3, #23
 800bed4:	18fb      	adds	r3, r7, r3
 800bed6:	2202      	movs	r2, #2
 800bed8:	701a      	strb	r2, [r3, #0]
          break;
 800beda:	e01c      	b.n	800bf16 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	23a7      	movs	r3, #167	@ 0xa7
 800bee0:	009b      	lsls	r3, r3, #2
 800bee2:	5cd3      	ldrb	r3, [r2, r3]
 800bee4:	2b03      	cmp	r3, #3
 800bee6:	d015      	beq.n	800bf14 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800bee8:	683a      	ldr	r2, [r7, #0]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	0011      	movs	r1, r2
 800beee:	0018      	movs	r0, r3
 800bef0:	f001 fac9 	bl	800d486 <USBD_CtlError>
            ret = USBD_FAIL;
 800bef4:	2317      	movs	r3, #23
 800bef6:	18fb      	adds	r3, r7, r3
 800bef8:	2202      	movs	r2, #2
 800befa:	701a      	strb	r2, [r3, #0]
          }
          break;
 800befc:	e00a      	b.n	800bf14 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800befe:	683a      	ldr	r2, [r7, #0]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	0011      	movs	r1, r2
 800bf04:	0018      	movs	r0, r3
 800bf06:	f001 fabe 	bl	800d486 <USBD_CtlError>
          ret = USBD_FAIL;
 800bf0a:	2317      	movs	r3, #23
 800bf0c:	18fb      	adds	r3, r7, r3
 800bf0e:	2202      	movs	r2, #2
 800bf10:	701a      	strb	r2, [r3, #0]
          break;
 800bf12:	e000      	b.n	800bf16 <USBD_CDC_Setup+0x166>
          break;
 800bf14:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800bf16:	e00a      	b.n	800bf2e <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800bf18:	683a      	ldr	r2, [r7, #0]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	0011      	movs	r1, r2
 800bf1e:	0018      	movs	r0, r3
 800bf20:	f001 fab1 	bl	800d486 <USBD_CtlError>
      ret = USBD_FAIL;
 800bf24:	2317      	movs	r3, #23
 800bf26:	18fb      	adds	r3, r7, r3
 800bf28:	2202      	movs	r2, #2
 800bf2a:	701a      	strb	r2, [r3, #0]
      break;
 800bf2c:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800bf2e:	2317      	movs	r3, #23
 800bf30:	18fb      	adds	r3, r7, r3
 800bf32:	781b      	ldrb	r3, [r3, #0]
}
 800bf34:	0018      	movs	r0, r3
 800bf36:	46bd      	mov	sp, r7
 800bf38:	b006      	add	sp, #24
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	00000201 	.word	0x00000201

0800bf40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	000a      	movs	r2, r1
 800bf4a:	1cfb      	adds	r3, r7, #3
 800bf4c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf4e:	687a      	ldr	r2, [r7, #4]
 800bf50:	23ae      	movs	r3, #174	@ 0xae
 800bf52:	009b      	lsls	r3, r3, #2
 800bf54:	58d3      	ldr	r3, [r2, r3]
 800bf56:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	23b0      	movs	r3, #176	@ 0xb0
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	58d3      	ldr	r3, [r2, r3]
 800bf60:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	23ae      	movs	r3, #174	@ 0xae
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	58d3      	ldr	r3, [r2, r3]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d03e      	beq.n	800bfec <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bf6e:	1cfb      	adds	r3, r7, #3
 800bf70:	781a      	ldrb	r2, [r3, #0]
 800bf72:	6879      	ldr	r1, [r7, #4]
 800bf74:	0013      	movs	r3, r2
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	189b      	adds	r3, r3, r2
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	18cb      	adds	r3, r1, r3
 800bf7e:	331c      	adds	r3, #28
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d02b      	beq.n	800bfde <USBD_CDC_DataIn+0x9e>
 800bf86:	1cfb      	adds	r3, r7, #3
 800bf88:	781a      	ldrb	r2, [r3, #0]
 800bf8a:	6879      	ldr	r1, [r7, #4]
 800bf8c:	0013      	movs	r3, r2
 800bf8e:	009b      	lsls	r3, r3, #2
 800bf90:	189b      	adds	r3, r3, r2
 800bf92:	009b      	lsls	r3, r3, #2
 800bf94:	18cb      	adds	r3, r1, r3
 800bf96:	331c      	adds	r3, #28
 800bf98:	6818      	ldr	r0, [r3, #0]
 800bf9a:	1cfb      	adds	r3, r7, #3
 800bf9c:	781a      	ldrb	r2, [r3, #0]
 800bf9e:	68b9      	ldr	r1, [r7, #8]
 800bfa0:	0013      	movs	r3, r2
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	189b      	adds	r3, r3, r2
 800bfa6:	00db      	lsls	r3, r3, #3
 800bfa8:	18cb      	adds	r3, r1, r3
 800bfaa:	3320      	adds	r3, #32
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	0019      	movs	r1, r3
 800bfb0:	f7f4 f94c 	bl	800024c <__aeabi_uidivmod>
 800bfb4:	1e0b      	subs	r3, r1, #0
 800bfb6:	d112      	bne.n	800bfde <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800bfb8:	1cfb      	adds	r3, r7, #3
 800bfba:	781a      	ldrb	r2, [r3, #0]
 800bfbc:	6879      	ldr	r1, [r7, #4]
 800bfbe:	0013      	movs	r3, r2
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	189b      	adds	r3, r3, r2
 800bfc4:	009b      	lsls	r3, r3, #2
 800bfc6:	18cb      	adds	r3, r1, r3
 800bfc8:	331c      	adds	r3, #28
 800bfca:	2200      	movs	r2, #0
 800bfcc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bfce:	1cfb      	adds	r3, r7, #3
 800bfd0:	7819      	ldrb	r1, [r3, #0]
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f001 ffce 	bl	800df78 <USBD_LL_Transmit>
 800bfdc:	e004      	b.n	800bfe8 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800bfde:	68fa      	ldr	r2, [r7, #12]
 800bfe0:	2385      	movs	r3, #133	@ 0x85
 800bfe2:	009b      	lsls	r3, r3, #2
 800bfe4:	2100      	movs	r1, #0
 800bfe6:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	e000      	b.n	800bfee <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800bfec:	2302      	movs	r3, #2
  }
}
 800bfee:	0018      	movs	r0, r3
 800bff0:	46bd      	mov	sp, r7
 800bff2:	b004      	add	sp, #16
 800bff4:	bd80      	pop	{r7, pc}

0800bff6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bff6:	b580      	push	{r7, lr}
 800bff8:	b084      	sub	sp, #16
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	6078      	str	r0, [r7, #4]
 800bffe:	000a      	movs	r2, r1
 800c000:	1cfb      	adds	r3, r7, #3
 800c002:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	23ae      	movs	r3, #174	@ 0xae
 800c008:	009b      	lsls	r3, r3, #2
 800c00a:	58d3      	ldr	r3, [r2, r3]
 800c00c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c00e:	1cfb      	adds	r3, r7, #3
 800c010:	781a      	ldrb	r2, [r3, #0]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	0011      	movs	r1, r2
 800c016:	0018      	movs	r0, r3
 800c018:	f002 f81c 	bl	800e054 <USBD_LL_GetRxDataSize>
 800c01c:	0001      	movs	r1, r0
 800c01e:	68fa      	ldr	r2, [r7, #12]
 800c020:	2383      	movs	r3, #131	@ 0x83
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	23ae      	movs	r3, #174	@ 0xae
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	58d3      	ldr	r3, [r2, r3]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d011      	beq.n	800c056 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	23af      	movs	r3, #175	@ 0xaf
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	58d3      	ldr	r3, [r2, r3]
 800c03a:	68da      	ldr	r2, [r3, #12]
 800c03c:	68f9      	ldr	r1, [r7, #12]
 800c03e:	2381      	movs	r3, #129	@ 0x81
 800c040:	009b      	lsls	r3, r3, #2
 800c042:	58c8      	ldr	r0, [r1, r3]
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2183      	movs	r1, #131	@ 0x83
 800c048:	0089      	lsls	r1, r1, #2
 800c04a:	468c      	mov	ip, r1
 800c04c:	4463      	add	r3, ip
 800c04e:	0019      	movs	r1, r3
 800c050:	4790      	blx	r2

    return USBD_OK;
 800c052:	2300      	movs	r3, #0
 800c054:	e000      	b.n	800c058 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800c056:	2302      	movs	r3, #2
  }
}
 800c058:	0018      	movs	r0, r3
 800c05a:	46bd      	mov	sp, r7
 800c05c:	b004      	add	sp, #16
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c060:	b590      	push	{r4, r7, lr}
 800c062:	b085      	sub	sp, #20
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	23ae      	movs	r3, #174	@ 0xae
 800c06c:	009b      	lsls	r3, r3, #2
 800c06e:	58d3      	ldr	r3, [r2, r3]
 800c070:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	23af      	movs	r3, #175	@ 0xaf
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	58d3      	ldr	r3, [r2, r3]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d018      	beq.n	800c0b0 <USBD_CDC_EP0_RxReady+0x50>
 800c07e:	68fa      	ldr	r2, [r7, #12]
 800c080:	2380      	movs	r3, #128	@ 0x80
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	5cd3      	ldrb	r3, [r2, r3]
 800c086:	2bff      	cmp	r3, #255	@ 0xff
 800c088:	d012      	beq.n	800c0b0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	23af      	movs	r3, #175	@ 0xaf
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	58d3      	ldr	r3, [r2, r3]
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	68f9      	ldr	r1, [r7, #12]
 800c096:	2280      	movs	r2, #128	@ 0x80
 800c098:	0092      	lsls	r2, r2, #2
 800c09a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800c09c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c09e:	68fa      	ldr	r2, [r7, #12]
 800c0a0:	4c06      	ldr	r4, [pc, #24]	@ (800c0bc <USBD_CDC_EP0_RxReady+0x5c>)
 800c0a2:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c0a4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c0a6:	68fa      	ldr	r2, [r7, #12]
 800c0a8:	2380      	movs	r3, #128	@ 0x80
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	21ff      	movs	r1, #255	@ 0xff
 800c0ae:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800c0b0:	2300      	movs	r3, #0
}
 800c0b2:	0018      	movs	r0, r3
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	b005      	add	sp, #20
 800c0b8:	bd90      	pop	{r4, r7, pc}
 800c0ba:	46c0      	nop			@ (mov r8, r8)
 800c0bc:	00000201 	.word	0x00000201

0800c0c0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2243      	movs	r2, #67	@ 0x43
 800c0cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800c0ce:	4b02      	ldr	r3, [pc, #8]	@ (800c0d8 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800c0d0:	0018      	movs	r0, r3
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	b002      	add	sp, #8
 800c0d6:	bd80      	pop	{r7, pc}
 800c0d8:	200000f0 	.word	0x200000f0

0800c0dc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2243      	movs	r2, #67	@ 0x43
 800c0e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c0ea:	4b02      	ldr	r3, [pc, #8]	@ (800c0f4 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800c0ec:	0018      	movs	r0, r3
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	b002      	add	sp, #8
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	200000ac 	.word	0x200000ac

0800c0f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2243      	movs	r2, #67	@ 0x43
 800c104:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c106:	4b02      	ldr	r3, [pc, #8]	@ (800c110 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800c108:	0018      	movs	r0, r3
 800c10a:	46bd      	mov	sp, r7
 800c10c:	b002      	add	sp, #8
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	20000134 	.word	0x20000134

0800c114 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b082      	sub	sp, #8
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	220a      	movs	r2, #10
 800c120:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c122:	4b02      	ldr	r3, [pc, #8]	@ (800c12c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800c124:	0018      	movs	r0, r3
 800c126:	46bd      	mov	sp, r7
 800c128:	b002      	add	sp, #8
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	20000068 	.word	0x20000068

0800c130 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b084      	sub	sp, #16
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c13a:	200f      	movs	r0, #15
 800c13c:	183b      	adds	r3, r7, r0
 800c13e:	2202      	movs	r2, #2
 800c140:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d007      	beq.n	800c158 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800c148:	687a      	ldr	r2, [r7, #4]
 800c14a:	23af      	movs	r3, #175	@ 0xaf
 800c14c:	009b      	lsls	r3, r3, #2
 800c14e:	6839      	ldr	r1, [r7, #0]
 800c150:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800c152:	183b      	adds	r3, r7, r0
 800c154:	2200      	movs	r2, #0
 800c156:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800c158:	230f      	movs	r3, #15
 800c15a:	18fb      	adds	r3, r7, r3
 800c15c:	781b      	ldrb	r3, [r3, #0]
}
 800c15e:	0018      	movs	r0, r3
 800c160:	46bd      	mov	sp, r7
 800c162:	b004      	add	sp, #16
 800c164:	bd80      	pop	{r7, pc}

0800c166 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b086      	sub	sp, #24
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	60f8      	str	r0, [r7, #12]
 800c16e:	60b9      	str	r1, [r7, #8]
 800c170:	1dbb      	adds	r3, r7, #6
 800c172:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c174:	68fa      	ldr	r2, [r7, #12]
 800c176:	23ae      	movs	r3, #174	@ 0xae
 800c178:	009b      	lsls	r3, r3, #2
 800c17a:	58d3      	ldr	r3, [r2, r3]
 800c17c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c17e:	697a      	ldr	r2, [r7, #20]
 800c180:	2382      	movs	r3, #130	@ 0x82
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	68b9      	ldr	r1, [r7, #8]
 800c186:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800c188:	1dbb      	adds	r3, r7, #6
 800c18a:	8819      	ldrh	r1, [r3, #0]
 800c18c:	697a      	ldr	r2, [r7, #20]
 800c18e:	2384      	movs	r3, #132	@ 0x84
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800c194:	2300      	movs	r3, #0
}
 800c196:	0018      	movs	r0, r3
 800c198:	46bd      	mov	sp, r7
 800c19a:	b006      	add	sp, #24
 800c19c:	bd80      	pop	{r7, pc}

0800c19e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800c19e:	b580      	push	{r7, lr}
 800c1a0:	b084      	sub	sp, #16
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	6078      	str	r0, [r7, #4]
 800c1a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	23ae      	movs	r3, #174	@ 0xae
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	58d3      	ldr	r3, [r2, r3]
 800c1b0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c1b2:	68fa      	ldr	r2, [r7, #12]
 800c1b4:	2381      	movs	r3, #129	@ 0x81
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	6839      	ldr	r1, [r7, #0]
 800c1ba:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800c1bc:	2300      	movs	r3, #0
}
 800c1be:	0018      	movs	r0, r3
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	b004      	add	sp, #16
 800c1c4:	bd80      	pop	{r7, pc}

0800c1c6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c1c6:	b580      	push	{r7, lr}
 800c1c8:	b084      	sub	sp, #16
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	23ae      	movs	r3, #174	@ 0xae
 800c1d2:	009b      	lsls	r3, r3, #2
 800c1d4:	58d3      	ldr	r3, [r2, r3]
 800c1d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800c1d8:	687a      	ldr	r2, [r7, #4]
 800c1da:	23ae      	movs	r3, #174	@ 0xae
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	58d3      	ldr	r3, [r2, r3]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d022      	beq.n	800c22a <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800c1e4:	68fa      	ldr	r2, [r7, #12]
 800c1e6:	2385      	movs	r3, #133	@ 0x85
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	58d3      	ldr	r3, [r2, r3]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d11a      	bne.n	800c226 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800c1f0:	68fa      	ldr	r2, [r7, #12]
 800c1f2:	2385      	movs	r3, #133	@ 0x85
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	2101      	movs	r1, #1
 800c1f8:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c1fa:	68fa      	ldr	r2, [r7, #12]
 800c1fc:	2384      	movs	r3, #132	@ 0x84
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	58d2      	ldr	r2, [r2, r3]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c206:	68fa      	ldr	r2, [r7, #12]
 800c208:	2382      	movs	r3, #130	@ 0x82
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800c20e:	68fa      	ldr	r2, [r7, #12]
 800c210:	2384      	movs	r3, #132	@ 0x84
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c216:	b29b      	uxth	r3, r3
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	000a      	movs	r2, r1
 800c21c:	2181      	movs	r1, #129	@ 0x81
 800c21e:	f001 feab 	bl	800df78 <USBD_LL_Transmit>

      return USBD_OK;
 800c222:	2300      	movs	r3, #0
 800c224:	e002      	b.n	800c22c <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800c226:	2301      	movs	r3, #1
 800c228:	e000      	b.n	800c22c <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800c22a:	2302      	movs	r3, #2
  }
}
 800c22c:	0018      	movs	r0, r3
 800c22e:	46bd      	mov	sp, r7
 800c230:	b004      	add	sp, #16
 800c232:	bd80      	pop	{r7, pc}

0800c234 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b084      	sub	sp, #16
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	23ae      	movs	r3, #174	@ 0xae
 800c240:	009b      	lsls	r3, r3, #2
 800c242:	58d3      	ldr	r3, [r2, r3]
 800c244:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	23ae      	movs	r3, #174	@ 0xae
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	58d3      	ldr	r3, [r2, r3]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d019      	beq.n	800c286 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	7c1b      	ldrb	r3, [r3, #16]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d10a      	bne.n	800c270 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c25a:	68fa      	ldr	r2, [r7, #12]
 800c25c:	2381      	movs	r3, #129	@ 0x81
 800c25e:	009b      	lsls	r3, r3, #2
 800c260:	58d2      	ldr	r2, [r2, r3]
 800c262:	2380      	movs	r3, #128	@ 0x80
 800c264:	009b      	lsls	r3, r3, #2
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	2101      	movs	r1, #1
 800c26a:	f001 febc 	bl	800dfe6 <USBD_LL_PrepareReceive>
 800c26e:	e008      	b.n	800c282 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c270:	68fa      	ldr	r2, [r7, #12]
 800c272:	2381      	movs	r3, #129	@ 0x81
 800c274:	009b      	lsls	r3, r3, #2
 800c276:	58d2      	ldr	r2, [r2, r3]
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	2340      	movs	r3, #64	@ 0x40
 800c27c:	2101      	movs	r1, #1
 800c27e:	f001 feb2 	bl	800dfe6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c282:	2300      	movs	r3, #0
 800c284:	e000      	b.n	800c288 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800c286:	2302      	movs	r3, #2
  }
}
 800c288:	0018      	movs	r0, r3
 800c28a:	46bd      	mov	sp, r7
 800c28c:	b004      	add	sp, #16
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	1dfb      	adds	r3, r7, #7
 800c29c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d101      	bne.n	800c2a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c2a4:	2302      	movs	r3, #2
 800c2a6:	e020      	b.n	800c2ea <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800c2a8:	68fa      	ldr	r2, [r7, #12]
 800c2aa:	23ad      	movs	r3, #173	@ 0xad
 800c2ac:	009b      	lsls	r3, r3, #2
 800c2ae:	58d3      	ldr	r3, [r2, r3]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d004      	beq.n	800c2be <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800c2b4:	68fa      	ldr	r2, [r7, #12]
 800c2b6:	23ad      	movs	r3, #173	@ 0xad
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	2100      	movs	r1, #0
 800c2bc:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d004      	beq.n	800c2ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c2c4:	68fa      	ldr	r2, [r7, #12]
 800c2c6:	23ac      	movs	r3, #172	@ 0xac
 800c2c8:	009b      	lsls	r3, r3, #2
 800c2ca:	68b9      	ldr	r1, [r7, #8]
 800c2cc:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c2ce:	68fa      	ldr	r2, [r7, #12]
 800c2d0:	23a7      	movs	r3, #167	@ 0xa7
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	2101      	movs	r1, #1
 800c2d6:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	1dfa      	adds	r2, r7, #7
 800c2dc:	7812      	ldrb	r2, [r2, #0]
 800c2de:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	0018      	movs	r0, r3
 800c2e4:	f001 fcac 	bl	800dc40 <USBD_LL_Init>

  return USBD_OK;
 800c2e8:	2300      	movs	r3, #0
}
 800c2ea:	0018      	movs	r0, r3
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	b004      	add	sp, #16
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b084      	sub	sp, #16
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
 800c2fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800c2fc:	200f      	movs	r0, #15
 800c2fe:	183b      	adds	r3, r7, r0
 800c300:	2200      	movs	r2, #0
 800c302:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d008      	beq.n	800c31c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	23ad      	movs	r3, #173	@ 0xad
 800c30e:	009b      	lsls	r3, r3, #2
 800c310:	6839      	ldr	r1, [r7, #0]
 800c312:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800c314:	183b      	adds	r3, r7, r0
 800c316:	2200      	movs	r2, #0
 800c318:	701a      	strb	r2, [r3, #0]
 800c31a:	e003      	b.n	800c324 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c31c:	230f      	movs	r3, #15
 800c31e:	18fb      	adds	r3, r7, r3
 800c320:	2202      	movs	r2, #2
 800c322:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800c324:	230f      	movs	r3, #15
 800c326:	18fb      	adds	r3, r7, r3
 800c328:	781b      	ldrb	r3, [r3, #0]
}
 800c32a:	0018      	movs	r0, r3
 800c32c:	46bd      	mov	sp, r7
 800c32e:	b004      	add	sp, #16
 800c330:	bd80      	pop	{r7, pc}

0800c332 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c332:	b580      	push	{r7, lr}
 800c334:	b082      	sub	sp, #8
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	0018      	movs	r0, r3
 800c33e:	f001 fce3 	bl	800dd08 <USBD_LL_Start>

  return USBD_OK;
 800c342:	2300      	movs	r3, #0
}
 800c344:	0018      	movs	r0, r3
 800c346:	46bd      	mov	sp, r7
 800c348:	b002      	add	sp, #8
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c354:	2300      	movs	r3, #0
}
 800c356:	0018      	movs	r0, r3
 800c358:	46bd      	mov	sp, r7
 800c35a:	b002      	add	sp, #8
 800c35c:	bd80      	pop	{r7, pc}

0800c35e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c35e:	b590      	push	{r4, r7, lr}
 800c360:	b085      	sub	sp, #20
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
 800c366:	000a      	movs	r2, r1
 800c368:	1cfb      	adds	r3, r7, #3
 800c36a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c36c:	240f      	movs	r4, #15
 800c36e:	193b      	adds	r3, r7, r4
 800c370:	2202      	movs	r2, #2
 800c372:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	23ad      	movs	r3, #173	@ 0xad
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	58d3      	ldr	r3, [r2, r3]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d00e      	beq.n	800c39e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	23ad      	movs	r3, #173	@ 0xad
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	58d3      	ldr	r3, [r2, r3]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	1cfa      	adds	r2, r7, #3
 800c38c:	7811      	ldrb	r1, [r2, #0]
 800c38e:	687a      	ldr	r2, [r7, #4]
 800c390:	0010      	movs	r0, r2
 800c392:	4798      	blx	r3
 800c394:	1e03      	subs	r3, r0, #0
 800c396:	d102      	bne.n	800c39e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800c398:	193b      	adds	r3, r7, r4
 800c39a:	2200      	movs	r2, #0
 800c39c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800c39e:	230f      	movs	r3, #15
 800c3a0:	18fb      	adds	r3, r7, r3
 800c3a2:	781b      	ldrb	r3, [r3, #0]
}
 800c3a4:	0018      	movs	r0, r3
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	b005      	add	sp, #20
 800c3aa:	bd90      	pop	{r4, r7, pc}

0800c3ac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b082      	sub	sp, #8
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	000a      	movs	r2, r1
 800c3b6:	1cfb      	adds	r3, r7, #3
 800c3b8:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c3ba:	687a      	ldr	r2, [r7, #4]
 800c3bc:	23ad      	movs	r3, #173	@ 0xad
 800c3be:	009b      	lsls	r3, r3, #2
 800c3c0:	58d3      	ldr	r3, [r2, r3]
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	1cfa      	adds	r2, r7, #3
 800c3c6:	7811      	ldrb	r1, [r2, #0]
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	0010      	movs	r0, r2
 800c3cc:	4798      	blx	r3

  return USBD_OK;
 800c3ce:	2300      	movs	r3, #0
}
 800c3d0:	0018      	movs	r0, r3
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	b002      	add	sp, #8
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	22aa      	movs	r2, #170	@ 0xaa
 800c3e6:	0092      	lsls	r2, r2, #2
 800c3e8:	4694      	mov	ip, r2
 800c3ea:	4463      	add	r3, ip
 800c3ec:	683a      	ldr	r2, [r7, #0]
 800c3ee:	0011      	movs	r1, r2
 800c3f0:	0018      	movs	r0, r3
 800c3f2:	f001 f810 	bl	800d416 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c3f6:	687a      	ldr	r2, [r7, #4]
 800c3f8:	23a5      	movs	r3, #165	@ 0xa5
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	2101      	movs	r1, #1
 800c3fe:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	4a23      	ldr	r2, [pc, #140]	@ (800c490 <USBD_LL_SetupStage+0xb8>)
 800c404:	5a9b      	ldrh	r3, [r3, r2]
 800c406:	0019      	movs	r1, r3
 800c408:	687a      	ldr	r2, [r7, #4]
 800c40a:	23a6      	movs	r3, #166	@ 0xa6
 800c40c:	009b      	lsls	r3, r3, #2
 800c40e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800c410:	687a      	ldr	r2, [r7, #4]
 800c412:	23aa      	movs	r3, #170	@ 0xaa
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	5cd3      	ldrb	r3, [r2, r3]
 800c418:	001a      	movs	r2, r3
 800c41a:	231f      	movs	r3, #31
 800c41c:	4013      	ands	r3, r2
 800c41e:	2b02      	cmp	r3, #2
 800c420:	d019      	beq.n	800c456 <USBD_LL_SetupStage+0x7e>
 800c422:	d822      	bhi.n	800c46a <USBD_LL_SetupStage+0x92>
 800c424:	2b00      	cmp	r3, #0
 800c426:	d002      	beq.n	800c42e <USBD_LL_SetupStage+0x56>
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d00a      	beq.n	800c442 <USBD_LL_SetupStage+0x6a>
 800c42c:	e01d      	b.n	800c46a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	22aa      	movs	r2, #170	@ 0xaa
 800c432:	0092      	lsls	r2, r2, #2
 800c434:	189a      	adds	r2, r3, r2
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	0011      	movs	r1, r2
 800c43a:	0018      	movs	r0, r3
 800c43c:	f000 fa10 	bl	800c860 <USBD_StdDevReq>
      break;
 800c440:	e020      	b.n	800c484 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	22aa      	movs	r2, #170	@ 0xaa
 800c446:	0092      	lsls	r2, r2, #2
 800c448:	189a      	adds	r2, r3, r2
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	0011      	movs	r1, r2
 800c44e:	0018      	movs	r0, r3
 800c450:	f000 fa78 	bl	800c944 <USBD_StdItfReq>
      break;
 800c454:	e016      	b.n	800c484 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	22aa      	movs	r2, #170	@ 0xaa
 800c45a:	0092      	lsls	r2, r2, #2
 800c45c:	189a      	adds	r2, r3, r2
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	0011      	movs	r1, r2
 800c462:	0018      	movs	r0, r3
 800c464:	f000 fac5 	bl	800c9f2 <USBD_StdEPReq>
      break;
 800c468:	e00c      	b.n	800c484 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c46a:	687a      	ldr	r2, [r7, #4]
 800c46c:	23aa      	movs	r3, #170	@ 0xaa
 800c46e:	009b      	lsls	r3, r3, #2
 800c470:	5cd3      	ldrb	r3, [r2, r3]
 800c472:	227f      	movs	r2, #127	@ 0x7f
 800c474:	4393      	bics	r3, r2
 800c476:	b2da      	uxtb	r2, r3
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	0011      	movs	r1, r2
 800c47c:	0018      	movs	r0, r3
 800c47e:	f001 fcca 	bl	800de16 <USBD_LL_StallEP>
      break;
 800c482:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800c484:	2300      	movs	r3, #0
}
 800c486:	0018      	movs	r0, r3
 800c488:	46bd      	mov	sp, r7
 800c48a:	b002      	add	sp, #8
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	46c0      	nop			@ (mov r8, r8)
 800c490:	000002ae 	.word	0x000002ae

0800c494 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b086      	sub	sp, #24
 800c498:	af00      	add	r7, sp, #0
 800c49a:	60f8      	str	r0, [r7, #12]
 800c49c:	607a      	str	r2, [r7, #4]
 800c49e:	200b      	movs	r0, #11
 800c4a0:	183b      	adds	r3, r7, r0
 800c4a2:	1c0a      	adds	r2, r1, #0
 800c4a4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c4a6:	183b      	adds	r3, r7, r0
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d154      	bne.n	800c558 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	3355      	adds	r3, #85	@ 0x55
 800c4b2:	33ff      	adds	r3, #255	@ 0xff
 800c4b4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c4b6:	68fa      	ldr	r2, [r7, #12]
 800c4b8:	23a5      	movs	r3, #165	@ 0xa5
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	58d3      	ldr	r3, [r2, r3]
 800c4be:	2b03      	cmp	r3, #3
 800c4c0:	d139      	bne.n	800c536 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	68da      	ldr	r2, [r3, #12]
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	691b      	ldr	r3, [r3, #16]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d919      	bls.n	800c502 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	68da      	ldr	r2, [r3, #12]
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	691b      	ldr	r3, [r3, #16]
 800c4d6:	1ad2      	subs	r2, r2, r3
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	68da      	ldr	r2, [r3, #12]
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d203      	bcs.n	800c4f0 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	e002      	b.n	800c4f6 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	6879      	ldr	r1, [r7, #4]
 800c4f8:	68f8      	ldr	r0, [r7, #12]
 800c4fa:	001a      	movs	r2, r3
 800c4fc:	f001 f898 	bl	800d630 <USBD_CtlContinueRx>
 800c500:	e045      	b.n	800c58e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c502:	68fa      	ldr	r2, [r7, #12]
 800c504:	23ad      	movs	r3, #173	@ 0xad
 800c506:	009b      	lsls	r3, r3, #2
 800c508:	58d3      	ldr	r3, [r2, r3]
 800c50a:	691b      	ldr	r3, [r3, #16]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d00d      	beq.n	800c52c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c510:	68fa      	ldr	r2, [r7, #12]
 800c512:	23a7      	movs	r3, #167	@ 0xa7
 800c514:	009b      	lsls	r3, r3, #2
 800c516:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c518:	2b03      	cmp	r3, #3
 800c51a:	d107      	bne.n	800c52c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c51c:	68fa      	ldr	r2, [r7, #12]
 800c51e:	23ad      	movs	r3, #173	@ 0xad
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	58d3      	ldr	r3, [r2, r3]
 800c524:	691b      	ldr	r3, [r3, #16]
 800c526:	68fa      	ldr	r2, [r7, #12]
 800c528:	0010      	movs	r0, r2
 800c52a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	0018      	movs	r0, r3
 800c530:	f001 f891 	bl	800d656 <USBD_CtlSendStatus>
 800c534:	e02b      	b.n	800c58e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c536:	68fa      	ldr	r2, [r7, #12]
 800c538:	23a5      	movs	r3, #165	@ 0xa5
 800c53a:	009b      	lsls	r3, r3, #2
 800c53c:	58d3      	ldr	r3, [r2, r3]
 800c53e:	2b05      	cmp	r3, #5
 800c540:	d125      	bne.n	800c58e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c542:	68fa      	ldr	r2, [r7, #12]
 800c544:	23a5      	movs	r3, #165	@ 0xa5
 800c546:	009b      	lsls	r3, r3, #2
 800c548:	2100      	movs	r1, #0
 800c54a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2100      	movs	r1, #0
 800c550:	0018      	movs	r0, r3
 800c552:	f001 fc60 	bl	800de16 <USBD_LL_StallEP>
 800c556:	e01a      	b.n	800c58e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c558:	68fa      	ldr	r2, [r7, #12]
 800c55a:	23ad      	movs	r3, #173	@ 0xad
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	58d3      	ldr	r3, [r2, r3]
 800c560:	699b      	ldr	r3, [r3, #24]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d011      	beq.n	800c58a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c566:	68fa      	ldr	r2, [r7, #12]
 800c568:	23a7      	movs	r3, #167	@ 0xa7
 800c56a:	009b      	lsls	r3, r3, #2
 800c56c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800c56e:	2b03      	cmp	r3, #3
 800c570:	d10b      	bne.n	800c58a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c572:	68fa      	ldr	r2, [r7, #12]
 800c574:	23ad      	movs	r3, #173	@ 0xad
 800c576:	009b      	lsls	r3, r3, #2
 800c578:	58d3      	ldr	r3, [r2, r3]
 800c57a:	699b      	ldr	r3, [r3, #24]
 800c57c:	220b      	movs	r2, #11
 800c57e:	18ba      	adds	r2, r7, r2
 800c580:	7811      	ldrb	r1, [r2, #0]
 800c582:	68fa      	ldr	r2, [r7, #12]
 800c584:	0010      	movs	r0, r2
 800c586:	4798      	blx	r3
 800c588:	e001      	b.n	800c58e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c58a:	2302      	movs	r3, #2
 800c58c:	e000      	b.n	800c590 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800c58e:	2300      	movs	r3, #0
}
 800c590:	0018      	movs	r0, r3
 800c592:	46bd      	mov	sp, r7
 800c594:	b006      	add	sp, #24
 800c596:	bd80      	pop	{r7, pc}

0800c598 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b086      	sub	sp, #24
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	607a      	str	r2, [r7, #4]
 800c5a2:	200b      	movs	r0, #11
 800c5a4:	183b      	adds	r3, r7, r0
 800c5a6:	1c0a      	adds	r2, r1, #0
 800c5a8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c5aa:	183b      	adds	r3, r7, r0
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d000      	beq.n	800c5b4 <USBD_LL_DataInStage+0x1c>
 800c5b2:	e08e      	b.n	800c6d2 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	3314      	adds	r3, #20
 800c5b8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c5ba:	68fa      	ldr	r2, [r7, #12]
 800c5bc:	23a5      	movs	r3, #165	@ 0xa5
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	58d3      	ldr	r3, [r2, r3]
 800c5c2:	2b02      	cmp	r3, #2
 800c5c4:	d164      	bne.n	800c690 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	68da      	ldr	r2, [r3, #12]
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	691b      	ldr	r3, [r3, #16]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d915      	bls.n	800c5fe <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	68da      	ldr	r2, [r3, #12]
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	691b      	ldr	r3, [r3, #16]
 800c5da:	1ad2      	subs	r2, r2, r3
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	b29a      	uxth	r2, r3
 800c5e6:	6879      	ldr	r1, [r7, #4]
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	0018      	movs	r0, r3
 800c5ec:	f000 ffe9 	bl	800d5c2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5f0:	68f8      	ldr	r0, [r7, #12]
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	2100      	movs	r1, #0
 800c5f8:	f001 fcf5 	bl	800dfe6 <USBD_LL_PrepareReceive>
 800c5fc:	e059      	b.n	800c6b2 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	689a      	ldr	r2, [r3, #8]
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	691b      	ldr	r3, [r3, #16]
 800c606:	0019      	movs	r1, r3
 800c608:	0010      	movs	r0, r2
 800c60a:	f7f3 fe1f 	bl	800024c <__aeabi_uidivmod>
 800c60e:	1e0b      	subs	r3, r1, #0
 800c610:	d11f      	bne.n	800c652 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	689a      	ldr	r2, [r3, #8]
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d319      	bcc.n	800c652 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	689a      	ldr	r2, [r3, #8]
 800c622:	68f9      	ldr	r1, [r7, #12]
 800c624:	23a6      	movs	r3, #166	@ 0xa6
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d211      	bcs.n	800c652 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2200      	movs	r2, #0
 800c632:	2100      	movs	r1, #0
 800c634:	0018      	movs	r0, r3
 800c636:	f000 ffc4 	bl	800d5c2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c63a:	68fa      	ldr	r2, [r7, #12]
 800c63c:	23a6      	movs	r3, #166	@ 0xa6
 800c63e:	009b      	lsls	r3, r3, #2
 800c640:	2100      	movs	r1, #0
 800c642:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c644:	68f8      	ldr	r0, [r7, #12]
 800c646:	2300      	movs	r3, #0
 800c648:	2200      	movs	r2, #0
 800c64a:	2100      	movs	r1, #0
 800c64c:	f001 fccb 	bl	800dfe6 <USBD_LL_PrepareReceive>
 800c650:	e02f      	b.n	800c6b2 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c652:	68fa      	ldr	r2, [r7, #12]
 800c654:	23ad      	movs	r3, #173	@ 0xad
 800c656:	009b      	lsls	r3, r3, #2
 800c658:	58d3      	ldr	r3, [r2, r3]
 800c65a:	68db      	ldr	r3, [r3, #12]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d00d      	beq.n	800c67c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c660:	68fa      	ldr	r2, [r7, #12]
 800c662:	23a7      	movs	r3, #167	@ 0xa7
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c668:	2b03      	cmp	r3, #3
 800c66a:	d107      	bne.n	800c67c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c66c:	68fa      	ldr	r2, [r7, #12]
 800c66e:	23ad      	movs	r3, #173	@ 0xad
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	58d3      	ldr	r3, [r2, r3]
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	68fa      	ldr	r2, [r7, #12]
 800c678:	0010      	movs	r0, r2
 800c67a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	2180      	movs	r1, #128	@ 0x80
 800c680:	0018      	movs	r0, r3
 800c682:	f001 fbc8 	bl	800de16 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	0018      	movs	r0, r3
 800c68a:	f000 fff8 	bl	800d67e <USBD_CtlReceiveStatus>
 800c68e:	e010      	b.n	800c6b2 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c690:	68fa      	ldr	r2, [r7, #12]
 800c692:	23a5      	movs	r3, #165	@ 0xa5
 800c694:	009b      	lsls	r3, r3, #2
 800c696:	58d3      	ldr	r3, [r2, r3]
 800c698:	2b04      	cmp	r3, #4
 800c69a:	d005      	beq.n	800c6a8 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c69c:	68fa      	ldr	r2, [r7, #12]
 800c69e:	23a5      	movs	r3, #165	@ 0xa5
 800c6a0:	009b      	lsls	r3, r3, #2
 800c6a2:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d104      	bne.n	800c6b2 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2180      	movs	r1, #128	@ 0x80
 800c6ac:	0018      	movs	r0, r3
 800c6ae:	f001 fbb2 	bl	800de16 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c6b2:	68fa      	ldr	r2, [r7, #12]
 800c6b4:	23a8      	movs	r3, #168	@ 0xa8
 800c6b6:	009b      	lsls	r3, r3, #2
 800c6b8:	5cd3      	ldrb	r3, [r2, r3]
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d124      	bne.n	800c708 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	0018      	movs	r0, r3
 800c6c2:	f7ff fe43 	bl	800c34c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c6c6:	68fa      	ldr	r2, [r7, #12]
 800c6c8:	23a8      	movs	r3, #168	@ 0xa8
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	2100      	movs	r1, #0
 800c6ce:	54d1      	strb	r1, [r2, r3]
 800c6d0:	e01a      	b.n	800c708 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c6d2:	68fa      	ldr	r2, [r7, #12]
 800c6d4:	23ad      	movs	r3, #173	@ 0xad
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	58d3      	ldr	r3, [r2, r3]
 800c6da:	695b      	ldr	r3, [r3, #20]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d011      	beq.n	800c704 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c6e0:	68fa      	ldr	r2, [r7, #12]
 800c6e2:	23a7      	movs	r3, #167	@ 0xa7
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800c6e8:	2b03      	cmp	r3, #3
 800c6ea:	d10b      	bne.n	800c704 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c6ec:	68fa      	ldr	r2, [r7, #12]
 800c6ee:	23ad      	movs	r3, #173	@ 0xad
 800c6f0:	009b      	lsls	r3, r3, #2
 800c6f2:	58d3      	ldr	r3, [r2, r3]
 800c6f4:	695b      	ldr	r3, [r3, #20]
 800c6f6:	220b      	movs	r2, #11
 800c6f8:	18ba      	adds	r2, r7, r2
 800c6fa:	7811      	ldrb	r1, [r2, #0]
 800c6fc:	68fa      	ldr	r2, [r7, #12]
 800c6fe:	0010      	movs	r0, r2
 800c700:	4798      	blx	r3
 800c702:	e001      	b.n	800c708 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c704:	2302      	movs	r3, #2
 800c706:	e000      	b.n	800c70a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800c708:	2300      	movs	r3, #0
}
 800c70a:	0018      	movs	r0, r3
 800c70c:	46bd      	mov	sp, r7
 800c70e:	b006      	add	sp, #24
 800c710:	bd80      	pop	{r7, pc}

0800c712 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c712:	b580      	push	{r7, lr}
 800c714:	b082      	sub	sp, #8
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	2340      	movs	r3, #64	@ 0x40
 800c71e:	2200      	movs	r2, #0
 800c720:	2100      	movs	r1, #0
 800c722:	f001 fb16 	bl	800dd52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	23ac      	movs	r3, #172	@ 0xac
 800c72a:	005b      	lsls	r3, r3, #1
 800c72c:	2101      	movs	r1, #1
 800c72e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	23b2      	movs	r3, #178	@ 0xb2
 800c734:	005b      	lsls	r3, r3, #1
 800c736:	2140      	movs	r1, #64	@ 0x40
 800c738:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	2340      	movs	r3, #64	@ 0x40
 800c73e:	2200      	movs	r2, #0
 800c740:	2180      	movs	r1, #128	@ 0x80
 800c742:	f001 fb06 	bl	800dd52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2201      	movs	r2, #1
 800c74a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2240      	movs	r2, #64	@ 0x40
 800c750:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	23a7      	movs	r3, #167	@ 0xa7
 800c756:	009b      	lsls	r3, r3, #2
 800c758:	2101      	movs	r1, #1
 800c75a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800c75c:	687a      	ldr	r2, [r7, #4]
 800c75e:	23a5      	movs	r3, #165	@ 0xa5
 800c760:	009b      	lsls	r3, r3, #2
 800c762:	2100      	movs	r1, #0
 800c764:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	23a9      	movs	r3, #169	@ 0xa9
 800c770:	009b      	lsls	r3, r3, #2
 800c772:	2100      	movs	r1, #0
 800c774:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	23ae      	movs	r3, #174	@ 0xae
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	58d3      	ldr	r3, [r2, r3]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d00a      	beq.n	800c798 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	23ad      	movs	r3, #173	@ 0xad
 800c786:	009b      	lsls	r3, r3, #2
 800c788:	58d3      	ldr	r3, [r2, r3]
 800c78a:	685a      	ldr	r2, [r3, #4]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	b2d9      	uxtb	r1, r3
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	0018      	movs	r0, r3
 800c796:	4790      	blx	r2
  }

  return USBD_OK;
 800c798:	2300      	movs	r3, #0
}
 800c79a:	0018      	movs	r0, r3
 800c79c:	46bd      	mov	sp, r7
 800c79e:	b002      	add	sp, #8
 800c7a0:	bd80      	pop	{r7, pc}

0800c7a2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c7a2:	b580      	push	{r7, lr}
 800c7a4:	b082      	sub	sp, #8
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	6078      	str	r0, [r7, #4]
 800c7aa:	000a      	movs	r2, r1
 800c7ac:	1cfb      	adds	r3, r7, #3
 800c7ae:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	1cfa      	adds	r2, r7, #3
 800c7b4:	7812      	ldrb	r2, [r2, #0]
 800c7b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c7b8:	2300      	movs	r3, #0
}
 800c7ba:	0018      	movs	r0, r3
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	b002      	add	sp, #8
 800c7c0:	bd80      	pop	{r7, pc}
	...

0800c7c4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	23a7      	movs	r3, #167	@ 0xa7
 800c7d0:	009b      	lsls	r3, r3, #2
 800c7d2:	5cd1      	ldrb	r1, [r2, r3]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	4a06      	ldr	r2, [pc, #24]	@ (800c7f0 <USBD_LL_Suspend+0x2c>)
 800c7d8:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c7da:	687a      	ldr	r2, [r7, #4]
 800c7dc:	23a7      	movs	r3, #167	@ 0xa7
 800c7de:	009b      	lsls	r3, r3, #2
 800c7e0:	2104      	movs	r1, #4
 800c7e2:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800c7e4:	2300      	movs	r3, #0
}
 800c7e6:	0018      	movs	r0, r3
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	b002      	add	sp, #8
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	46c0      	nop			@ (mov r8, r8)
 800c7f0:	0000029d 	.word	0x0000029d

0800c7f4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c7fc:	687a      	ldr	r2, [r7, #4]
 800c7fe:	23a7      	movs	r3, #167	@ 0xa7
 800c800:	009b      	lsls	r3, r3, #2
 800c802:	5cd3      	ldrb	r3, [r2, r3]
 800c804:	2b04      	cmp	r3, #4
 800c806:	d106      	bne.n	800c816 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	4a05      	ldr	r2, [pc, #20]	@ (800c820 <USBD_LL_Resume+0x2c>)
 800c80c:	5c99      	ldrb	r1, [r3, r2]
 800c80e:	687a      	ldr	r2, [r7, #4]
 800c810:	23a7      	movs	r3, #167	@ 0xa7
 800c812:	009b      	lsls	r3, r3, #2
 800c814:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800c816:	2300      	movs	r3, #0
}
 800c818:	0018      	movs	r0, r3
 800c81a:	46bd      	mov	sp, r7
 800c81c:	b002      	add	sp, #8
 800c81e:	bd80      	pop	{r7, pc}
 800c820:	0000029d 	.word	0x0000029d

0800c824 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c82c:	687a      	ldr	r2, [r7, #4]
 800c82e:	23a7      	movs	r3, #167	@ 0xa7
 800c830:	009b      	lsls	r3, r3, #2
 800c832:	5cd3      	ldrb	r3, [r2, r3]
 800c834:	2b03      	cmp	r3, #3
 800c836:	d10e      	bne.n	800c856 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	23ad      	movs	r3, #173	@ 0xad
 800c83c:	009b      	lsls	r3, r3, #2
 800c83e:	58d3      	ldr	r3, [r2, r3]
 800c840:	69db      	ldr	r3, [r3, #28]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d007      	beq.n	800c856 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800c846:	687a      	ldr	r2, [r7, #4]
 800c848:	23ad      	movs	r3, #173	@ 0xad
 800c84a:	009b      	lsls	r3, r3, #2
 800c84c:	58d3      	ldr	r3, [r2, r3]
 800c84e:	69db      	ldr	r3, [r3, #28]
 800c850:	687a      	ldr	r2, [r7, #4]
 800c852:	0010      	movs	r0, r2
 800c854:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c856:	2300      	movs	r3, #0
}
 800c858:	0018      	movs	r0, r3
 800c85a:	46bd      	mov	sp, r7
 800c85c:	b002      	add	sp, #8
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b084      	sub	sp, #16
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c86a:	230f      	movs	r3, #15
 800c86c:	18fb      	adds	r3, r7, r3
 800c86e:	2200      	movs	r2, #0
 800c870:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	001a      	movs	r2, r3
 800c878:	2360      	movs	r3, #96	@ 0x60
 800c87a:	4013      	ands	r3, r2
 800c87c:	2b40      	cmp	r3, #64	@ 0x40
 800c87e:	d004      	beq.n	800c88a <USBD_StdDevReq+0x2a>
 800c880:	d84f      	bhi.n	800c922 <USBD_StdDevReq+0xc2>
 800c882:	2b00      	cmp	r3, #0
 800c884:	d00b      	beq.n	800c89e <USBD_StdDevReq+0x3e>
 800c886:	2b20      	cmp	r3, #32
 800c888:	d14b      	bne.n	800c922 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	23ad      	movs	r3, #173	@ 0xad
 800c88e:	009b      	lsls	r3, r3, #2
 800c890:	58d3      	ldr	r3, [r2, r3]
 800c892:	689b      	ldr	r3, [r3, #8]
 800c894:	6839      	ldr	r1, [r7, #0]
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	0010      	movs	r0, r2
 800c89a:	4798      	blx	r3
      break;
 800c89c:	e048      	b.n	800c930 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	785b      	ldrb	r3, [r3, #1]
 800c8a2:	2b09      	cmp	r3, #9
 800c8a4:	d835      	bhi.n	800c912 <USBD_StdDevReq+0xb2>
 800c8a6:	009a      	lsls	r2, r3, #2
 800c8a8:	4b25      	ldr	r3, [pc, #148]	@ (800c940 <USBD_StdDevReq+0xe0>)
 800c8aa:	18d3      	adds	r3, r2, r3
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c8b0:	683a      	ldr	r2, [r7, #0]
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	0011      	movs	r1, r2
 800c8b6:	0018      	movs	r0, r3
 800c8b8:	f000 fa52 	bl	800cd60 <USBD_GetDescriptor>
          break;
 800c8bc:	e030      	b.n	800c920 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c8be:	683a      	ldr	r2, [r7, #0]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	0011      	movs	r1, r2
 800c8c4:	0018      	movs	r0, r3
 800c8c6:	f000 fbfd 	bl	800d0c4 <USBD_SetAddress>
          break;
 800c8ca:	e029      	b.n	800c920 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800c8cc:	683a      	ldr	r2, [r7, #0]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	0011      	movs	r1, r2
 800c8d2:	0018      	movs	r0, r3
 800c8d4:	f000 fc4a 	bl	800d16c <USBD_SetConfig>
          break;
 800c8d8:	e022      	b.n	800c920 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c8da:	683a      	ldr	r2, [r7, #0]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	0011      	movs	r1, r2
 800c8e0:	0018      	movs	r0, r3
 800c8e2:	f000 fce7 	bl	800d2b4 <USBD_GetConfig>
          break;
 800c8e6:	e01b      	b.n	800c920 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c8e8:	683a      	ldr	r2, [r7, #0]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	0011      	movs	r1, r2
 800c8ee:	0018      	movs	r0, r3
 800c8f0:	f000 fd1b 	bl	800d32a <USBD_GetStatus>
          break;
 800c8f4:	e014      	b.n	800c920 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c8f6:	683a      	ldr	r2, [r7, #0]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	0011      	movs	r1, r2
 800c8fc:	0018      	movs	r0, r3
 800c8fe:	f000 fd4e 	bl	800d39e <USBD_SetFeature>
          break;
 800c902:	e00d      	b.n	800c920 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c904:	683a      	ldr	r2, [r7, #0]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	0011      	movs	r1, r2
 800c90a:	0018      	movs	r0, r3
 800c90c:	f000 fd5d 	bl	800d3ca <USBD_ClrFeature>
          break;
 800c910:	e006      	b.n	800c920 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c912:	683a      	ldr	r2, [r7, #0]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	0011      	movs	r1, r2
 800c918:	0018      	movs	r0, r3
 800c91a:	f000 fdb4 	bl	800d486 <USBD_CtlError>
          break;
 800c91e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800c920:	e006      	b.n	800c930 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c922:	683a      	ldr	r2, [r7, #0]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	0011      	movs	r1, r2
 800c928:	0018      	movs	r0, r3
 800c92a:	f000 fdac 	bl	800d486 <USBD_CtlError>
      break;
 800c92e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800c930:	230f      	movs	r3, #15
 800c932:	18fb      	adds	r3, r7, r3
 800c934:	781b      	ldrb	r3, [r3, #0]
}
 800c936:	0018      	movs	r0, r3
 800c938:	46bd      	mov	sp, r7
 800c93a:	b004      	add	sp, #16
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	46c0      	nop			@ (mov r8, r8)
 800c940:	08012534 	.word	0x08012534

0800c944 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800c944:	b5b0      	push	{r4, r5, r7, lr}
 800c946:	b084      	sub	sp, #16
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c94e:	230f      	movs	r3, #15
 800c950:	18fb      	adds	r3, r7, r3
 800c952:	2200      	movs	r2, #0
 800c954:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	001a      	movs	r2, r3
 800c95c:	2360      	movs	r3, #96	@ 0x60
 800c95e:	4013      	ands	r3, r2
 800c960:	2b40      	cmp	r3, #64	@ 0x40
 800c962:	d004      	beq.n	800c96e <USBD_StdItfReq+0x2a>
 800c964:	d839      	bhi.n	800c9da <USBD_StdItfReq+0x96>
 800c966:	2b00      	cmp	r3, #0
 800c968:	d001      	beq.n	800c96e <USBD_StdItfReq+0x2a>
 800c96a:	2b20      	cmp	r3, #32
 800c96c:	d135      	bne.n	800c9da <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c96e:	687a      	ldr	r2, [r7, #4]
 800c970:	23a7      	movs	r3, #167	@ 0xa7
 800c972:	009b      	lsls	r3, r3, #2
 800c974:	5cd3      	ldrb	r3, [r2, r3]
 800c976:	3b01      	subs	r3, #1
 800c978:	2b02      	cmp	r3, #2
 800c97a:	d825      	bhi.n	800c9c8 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	889b      	ldrh	r3, [r3, #4]
 800c980:	b2db      	uxtb	r3, r3
 800c982:	2b01      	cmp	r3, #1
 800c984:	d819      	bhi.n	800c9ba <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c986:	687a      	ldr	r2, [r7, #4]
 800c988:	23ad      	movs	r3, #173	@ 0xad
 800c98a:	009b      	lsls	r3, r3, #2
 800c98c:	58d3      	ldr	r3, [r2, r3]
 800c98e:	689b      	ldr	r3, [r3, #8]
 800c990:	250f      	movs	r5, #15
 800c992:	197c      	adds	r4, r7, r5
 800c994:	6839      	ldr	r1, [r7, #0]
 800c996:	687a      	ldr	r2, [r7, #4]
 800c998:	0010      	movs	r0, r2
 800c99a:	4798      	blx	r3
 800c99c:	0003      	movs	r3, r0
 800c99e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	88db      	ldrh	r3, [r3, #6]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d116      	bne.n	800c9d6 <USBD_StdItfReq+0x92>
 800c9a8:	197b      	adds	r3, r7, r5
 800c9aa:	781b      	ldrb	r3, [r3, #0]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d112      	bne.n	800c9d6 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	0018      	movs	r0, r3
 800c9b4:	f000 fe4f 	bl	800d656 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c9b8:	e00d      	b.n	800c9d6 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800c9ba:	683a      	ldr	r2, [r7, #0]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	0011      	movs	r1, r2
 800c9c0:	0018      	movs	r0, r3
 800c9c2:	f000 fd60 	bl	800d486 <USBD_CtlError>
          break;
 800c9c6:	e006      	b.n	800c9d6 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800c9c8:	683a      	ldr	r2, [r7, #0]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	0011      	movs	r1, r2
 800c9ce:	0018      	movs	r0, r3
 800c9d0:	f000 fd59 	bl	800d486 <USBD_CtlError>
          break;
 800c9d4:	e000      	b.n	800c9d8 <USBD_StdItfReq+0x94>
          break;
 800c9d6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800c9d8:	e006      	b.n	800c9e8 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800c9da:	683a      	ldr	r2, [r7, #0]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	0011      	movs	r1, r2
 800c9e0:	0018      	movs	r0, r3
 800c9e2:	f000 fd50 	bl	800d486 <USBD_CtlError>
      break;
 800c9e6:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800c9e8:	2300      	movs	r3, #0
}
 800c9ea:	0018      	movs	r0, r3
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	b004      	add	sp, #16
 800c9f0:	bdb0      	pop	{r4, r5, r7, pc}

0800c9f2 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800c9f2:	b5b0      	push	{r4, r5, r7, lr}
 800c9f4:	b084      	sub	sp, #16
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
 800c9fa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c9fc:	230f      	movs	r3, #15
 800c9fe:	18fb      	adds	r3, r7, r3
 800ca00:	2200      	movs	r2, #0
 800ca02:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	889a      	ldrh	r2, [r3, #4]
 800ca08:	230e      	movs	r3, #14
 800ca0a:	18fb      	adds	r3, r7, r3
 800ca0c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	001a      	movs	r2, r3
 800ca14:	2360      	movs	r3, #96	@ 0x60
 800ca16:	4013      	ands	r3, r2
 800ca18:	2b40      	cmp	r3, #64	@ 0x40
 800ca1a:	d006      	beq.n	800ca2a <USBD_StdEPReq+0x38>
 800ca1c:	d900      	bls.n	800ca20 <USBD_StdEPReq+0x2e>
 800ca1e:	e190      	b.n	800cd42 <USBD_StdEPReq+0x350>
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d00c      	beq.n	800ca3e <USBD_StdEPReq+0x4c>
 800ca24:	2b20      	cmp	r3, #32
 800ca26:	d000      	beq.n	800ca2a <USBD_StdEPReq+0x38>
 800ca28:	e18b      	b.n	800cd42 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ca2a:	687a      	ldr	r2, [r7, #4]
 800ca2c:	23ad      	movs	r3, #173	@ 0xad
 800ca2e:	009b      	lsls	r3, r3, #2
 800ca30:	58d3      	ldr	r3, [r2, r3]
 800ca32:	689b      	ldr	r3, [r3, #8]
 800ca34:	6839      	ldr	r1, [r7, #0]
 800ca36:	687a      	ldr	r2, [r7, #4]
 800ca38:	0010      	movs	r0, r2
 800ca3a:	4798      	blx	r3
      break;
 800ca3c:	e188      	b.n	800cd50 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	001a      	movs	r2, r3
 800ca44:	2360      	movs	r3, #96	@ 0x60
 800ca46:	4013      	ands	r3, r2
 800ca48:	2b20      	cmp	r3, #32
 800ca4a:	d10f      	bne.n	800ca6c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ca4c:	687a      	ldr	r2, [r7, #4]
 800ca4e:	23ad      	movs	r3, #173	@ 0xad
 800ca50:	009b      	lsls	r3, r3, #2
 800ca52:	58d3      	ldr	r3, [r2, r3]
 800ca54:	689b      	ldr	r3, [r3, #8]
 800ca56:	250f      	movs	r5, #15
 800ca58:	197c      	adds	r4, r7, r5
 800ca5a:	6839      	ldr	r1, [r7, #0]
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	0010      	movs	r0, r2
 800ca60:	4798      	blx	r3
 800ca62:	0003      	movs	r3, r0
 800ca64:	7023      	strb	r3, [r4, #0]

        return ret;
 800ca66:	197b      	adds	r3, r7, r5
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	e174      	b.n	800cd56 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	785b      	ldrb	r3, [r3, #1]
 800ca70:	2b03      	cmp	r3, #3
 800ca72:	d007      	beq.n	800ca84 <USBD_StdEPReq+0x92>
 800ca74:	dd00      	ble.n	800ca78 <USBD_StdEPReq+0x86>
 800ca76:	e15c      	b.n	800cd32 <USBD_StdEPReq+0x340>
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d100      	bne.n	800ca7e <USBD_StdEPReq+0x8c>
 800ca7c:	e092      	b.n	800cba4 <USBD_StdEPReq+0x1b2>
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d04b      	beq.n	800cb1a <USBD_StdEPReq+0x128>
 800ca82:	e156      	b.n	800cd32 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ca84:	687a      	ldr	r2, [r7, #4]
 800ca86:	23a7      	movs	r3, #167	@ 0xa7
 800ca88:	009b      	lsls	r3, r3, #2
 800ca8a:	5cd3      	ldrb	r3, [r2, r3]
 800ca8c:	2b02      	cmp	r3, #2
 800ca8e:	d002      	beq.n	800ca96 <USBD_StdEPReq+0xa4>
 800ca90:	2b03      	cmp	r3, #3
 800ca92:	d01d      	beq.n	800cad0 <USBD_StdEPReq+0xde>
 800ca94:	e039      	b.n	800cb0a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca96:	220e      	movs	r2, #14
 800ca98:	18bb      	adds	r3, r7, r2
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d010      	beq.n	800cac2 <USBD_StdEPReq+0xd0>
 800caa0:	18bb      	adds	r3, r7, r2
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	2b80      	cmp	r3, #128	@ 0x80
 800caa6:	d00c      	beq.n	800cac2 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800caa8:	18bb      	adds	r3, r7, r2
 800caaa:	781a      	ldrb	r2, [r3, #0]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	0011      	movs	r1, r2
 800cab0:	0018      	movs	r0, r3
 800cab2:	f001 f9b0 	bl	800de16 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2180      	movs	r1, #128	@ 0x80
 800caba:	0018      	movs	r0, r3
 800cabc:	f001 f9ab 	bl	800de16 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cac0:	e02a      	b.n	800cb18 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800cac2:	683a      	ldr	r2, [r7, #0]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	0011      	movs	r1, r2
 800cac8:	0018      	movs	r0, r3
 800caca:	f000 fcdc 	bl	800d486 <USBD_CtlError>
              break;
 800cace:	e023      	b.n	800cb18 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	885b      	ldrh	r3, [r3, #2]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d113      	bne.n	800cb00 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800cad8:	220e      	movs	r2, #14
 800cada:	18bb      	adds	r3, r7, r2
 800cadc:	781b      	ldrb	r3, [r3, #0]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d00e      	beq.n	800cb00 <USBD_StdEPReq+0x10e>
 800cae2:	18bb      	adds	r3, r7, r2
 800cae4:	781b      	ldrb	r3, [r3, #0]
 800cae6:	2b80      	cmp	r3, #128	@ 0x80
 800cae8:	d00a      	beq.n	800cb00 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	88db      	ldrh	r3, [r3, #6]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d106      	bne.n	800cb00 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800caf2:	18bb      	adds	r3, r7, r2
 800caf4:	781a      	ldrb	r2, [r3, #0]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	0011      	movs	r1, r2
 800cafa:	0018      	movs	r0, r3
 800cafc:	f001 f98b 	bl	800de16 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	0018      	movs	r0, r3
 800cb04:	f000 fda7 	bl	800d656 <USBD_CtlSendStatus>

              break;
 800cb08:	e006      	b.n	800cb18 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800cb0a:	683a      	ldr	r2, [r7, #0]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	0011      	movs	r1, r2
 800cb10:	0018      	movs	r0, r3
 800cb12:	f000 fcb8 	bl	800d486 <USBD_CtlError>
              break;
 800cb16:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800cb18:	e112      	b.n	800cd40 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	23a7      	movs	r3, #167	@ 0xa7
 800cb1e:	009b      	lsls	r3, r3, #2
 800cb20:	5cd3      	ldrb	r3, [r2, r3]
 800cb22:	2b02      	cmp	r3, #2
 800cb24:	d002      	beq.n	800cb2c <USBD_StdEPReq+0x13a>
 800cb26:	2b03      	cmp	r3, #3
 800cb28:	d01d      	beq.n	800cb66 <USBD_StdEPReq+0x174>
 800cb2a:	e032      	b.n	800cb92 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb2c:	220e      	movs	r2, #14
 800cb2e:	18bb      	adds	r3, r7, r2
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d010      	beq.n	800cb58 <USBD_StdEPReq+0x166>
 800cb36:	18bb      	adds	r3, r7, r2
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	2b80      	cmp	r3, #128	@ 0x80
 800cb3c:	d00c      	beq.n	800cb58 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800cb3e:	18bb      	adds	r3, r7, r2
 800cb40:	781a      	ldrb	r2, [r3, #0]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	0011      	movs	r1, r2
 800cb46:	0018      	movs	r0, r3
 800cb48:	f001 f965 	bl	800de16 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2180      	movs	r1, #128	@ 0x80
 800cb50:	0018      	movs	r0, r3
 800cb52:	f001 f960 	bl	800de16 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cb56:	e024      	b.n	800cba2 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800cb58:	683a      	ldr	r2, [r7, #0]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	0011      	movs	r1, r2
 800cb5e:	0018      	movs	r0, r3
 800cb60:	f000 fc91 	bl	800d486 <USBD_CtlError>
              break;
 800cb64:	e01d      	b.n	800cba2 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	885b      	ldrh	r3, [r3, #2]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d118      	bne.n	800cba0 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cb6e:	210e      	movs	r1, #14
 800cb70:	187b      	adds	r3, r7, r1
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	227f      	movs	r2, #127	@ 0x7f
 800cb76:	4013      	ands	r3, r2
 800cb78:	d006      	beq.n	800cb88 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800cb7a:	187b      	adds	r3, r7, r1
 800cb7c:	781a      	ldrb	r2, [r3, #0]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	0011      	movs	r1, r2
 800cb82:	0018      	movs	r0, r3
 800cb84:	f001 f972 	bl	800de6c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	0018      	movs	r0, r3
 800cb8c:	f000 fd63 	bl	800d656 <USBD_CtlSendStatus>
              }
              break;
 800cb90:	e006      	b.n	800cba0 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800cb92:	683a      	ldr	r2, [r7, #0]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	0011      	movs	r1, r2
 800cb98:	0018      	movs	r0, r3
 800cb9a:	f000 fc74 	bl	800d486 <USBD_CtlError>
              break;
 800cb9e:	e000      	b.n	800cba2 <USBD_StdEPReq+0x1b0>
              break;
 800cba0:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800cba2:	e0cd      	b.n	800cd40 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cba4:	687a      	ldr	r2, [r7, #4]
 800cba6:	23a7      	movs	r3, #167	@ 0xa7
 800cba8:	009b      	lsls	r3, r3, #2
 800cbaa:	5cd3      	ldrb	r3, [r2, r3]
 800cbac:	2b02      	cmp	r3, #2
 800cbae:	d002      	beq.n	800cbb6 <USBD_StdEPReq+0x1c4>
 800cbb0:	2b03      	cmp	r3, #3
 800cbb2:	d03c      	beq.n	800cc2e <USBD_StdEPReq+0x23c>
 800cbb4:	e0b5      	b.n	800cd22 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbb6:	220e      	movs	r2, #14
 800cbb8:	18bb      	adds	r3, r7, r2
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d00a      	beq.n	800cbd6 <USBD_StdEPReq+0x1e4>
 800cbc0:	18bb      	adds	r3, r7, r2
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	2b80      	cmp	r3, #128	@ 0x80
 800cbc6:	d006      	beq.n	800cbd6 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800cbc8:	683a      	ldr	r2, [r7, #0]
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	0011      	movs	r1, r2
 800cbce:	0018      	movs	r0, r3
 800cbd0:	f000 fc59 	bl	800d486 <USBD_CtlError>
                break;
 800cbd4:	e0ac      	b.n	800cd30 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbd6:	220e      	movs	r2, #14
 800cbd8:	18bb      	adds	r3, r7, r2
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	b25b      	sxtb	r3, r3
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	da0c      	bge.n	800cbfc <USBD_StdEPReq+0x20a>
 800cbe2:	18bb      	adds	r3, r7, r2
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	227f      	movs	r2, #127	@ 0x7f
 800cbe8:	401a      	ands	r2, r3
 800cbea:	0013      	movs	r3, r2
 800cbec:	009b      	lsls	r3, r3, #2
 800cbee:	189b      	adds	r3, r3, r2
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	3310      	adds	r3, #16
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	18d3      	adds	r3, r2, r3
 800cbf8:	3304      	adds	r3, #4
 800cbfa:	e00d      	b.n	800cc18 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cbfc:	230e      	movs	r3, #14
 800cbfe:	18fb      	adds	r3, r7, r3
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	227f      	movs	r2, #127	@ 0x7f
 800cc04:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc06:	0013      	movs	r3, r2
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	189b      	adds	r3, r3, r2
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	3351      	adds	r3, #81	@ 0x51
 800cc10:	33ff      	adds	r3, #255	@ 0xff
 800cc12:	687a      	ldr	r2, [r7, #4]
 800cc14:	18d3      	adds	r3, r2, r3
 800cc16:	3304      	adds	r3, #4
 800cc18:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cc20:	68b9      	ldr	r1, [r7, #8]
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2202      	movs	r2, #2
 800cc26:	0018      	movs	r0, r3
 800cc28:	f000 fcab 	bl	800d582 <USBD_CtlSendData>
              break;
 800cc2c:	e080      	b.n	800cd30 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cc2e:	220e      	movs	r2, #14
 800cc30:	18bb      	adds	r3, r7, r2
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	b25b      	sxtb	r3, r3
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	da14      	bge.n	800cc64 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cc3a:	18bb      	adds	r3, r7, r2
 800cc3c:	781b      	ldrb	r3, [r3, #0]
 800cc3e:	220f      	movs	r2, #15
 800cc40:	401a      	ands	r2, r3
 800cc42:	6879      	ldr	r1, [r7, #4]
 800cc44:	0013      	movs	r3, r2
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	189b      	adds	r3, r3, r2
 800cc4a:	009b      	lsls	r3, r3, #2
 800cc4c:	18cb      	adds	r3, r1, r3
 800cc4e:	3318      	adds	r3, #24
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d11e      	bne.n	800cc94 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800cc56:	683a      	ldr	r2, [r7, #0]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	0011      	movs	r1, r2
 800cc5c:	0018      	movs	r0, r3
 800cc5e:	f000 fc12 	bl	800d486 <USBD_CtlError>
                  break;
 800cc62:	e065      	b.n	800cd30 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cc64:	230e      	movs	r3, #14
 800cc66:	18fb      	adds	r3, r7, r3
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	220f      	movs	r2, #15
 800cc6c:	401a      	ands	r2, r3
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	23ac      	movs	r3, #172	@ 0xac
 800cc72:	0059      	lsls	r1, r3, #1
 800cc74:	0013      	movs	r3, r2
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	189b      	adds	r3, r3, r2
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	18c3      	adds	r3, r0, r3
 800cc7e:	185b      	adds	r3, r3, r1
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d106      	bne.n	800cc94 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800cc86:	683a      	ldr	r2, [r7, #0]
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	0011      	movs	r1, r2
 800cc8c:	0018      	movs	r0, r3
 800cc8e:	f000 fbfa 	bl	800d486 <USBD_CtlError>
                  break;
 800cc92:	e04d      	b.n	800cd30 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc94:	220e      	movs	r2, #14
 800cc96:	18bb      	adds	r3, r7, r2
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	b25b      	sxtb	r3, r3
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	da0c      	bge.n	800ccba <USBD_StdEPReq+0x2c8>
 800cca0:	18bb      	adds	r3, r7, r2
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	227f      	movs	r2, #127	@ 0x7f
 800cca6:	401a      	ands	r2, r3
 800cca8:	0013      	movs	r3, r2
 800ccaa:	009b      	lsls	r3, r3, #2
 800ccac:	189b      	adds	r3, r3, r2
 800ccae:	009b      	lsls	r3, r3, #2
 800ccb0:	3310      	adds	r3, #16
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	18d3      	adds	r3, r2, r3
 800ccb6:	3304      	adds	r3, #4
 800ccb8:	e00d      	b.n	800ccd6 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ccba:	230e      	movs	r3, #14
 800ccbc:	18fb      	adds	r3, r7, r3
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	227f      	movs	r2, #127	@ 0x7f
 800ccc2:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccc4:	0013      	movs	r3, r2
 800ccc6:	009b      	lsls	r3, r3, #2
 800ccc8:	189b      	adds	r3, r3, r2
 800ccca:	009b      	lsls	r3, r3, #2
 800cccc:	3351      	adds	r3, #81	@ 0x51
 800ccce:	33ff      	adds	r3, #255	@ 0xff
 800ccd0:	687a      	ldr	r2, [r7, #4]
 800ccd2:	18d3      	adds	r3, r2, r3
 800ccd4:	3304      	adds	r3, #4
 800ccd6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ccd8:	220e      	movs	r2, #14
 800ccda:	18bb      	adds	r3, r7, r2
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d003      	beq.n	800ccea <USBD_StdEPReq+0x2f8>
 800cce2:	18bb      	adds	r3, r7, r2
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	2b80      	cmp	r3, #128	@ 0x80
 800cce8:	d103      	bne.n	800ccf2 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	2200      	movs	r2, #0
 800ccee:	601a      	str	r2, [r3, #0]
 800ccf0:	e010      	b.n	800cd14 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ccf2:	230e      	movs	r3, #14
 800ccf4:	18fb      	adds	r3, r7, r3
 800ccf6:	781a      	ldrb	r2, [r3, #0]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	0011      	movs	r1, r2
 800ccfc:	0018      	movs	r0, r3
 800ccfe:	f001 f8e0 	bl	800dec2 <USBD_LL_IsStallEP>
 800cd02:	1e03      	subs	r3, r0, #0
 800cd04:	d003      	beq.n	800cd0e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	2201      	movs	r2, #1
 800cd0a:	601a      	str	r2, [r3, #0]
 800cd0c:	e002      	b.n	800cd14 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	2200      	movs	r2, #0
 800cd12:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cd14:	68b9      	ldr	r1, [r7, #8]
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2202      	movs	r2, #2
 800cd1a:	0018      	movs	r0, r3
 800cd1c:	f000 fc31 	bl	800d582 <USBD_CtlSendData>
              break;
 800cd20:	e006      	b.n	800cd30 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800cd22:	683a      	ldr	r2, [r7, #0]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	0011      	movs	r1, r2
 800cd28:	0018      	movs	r0, r3
 800cd2a:	f000 fbac 	bl	800d486 <USBD_CtlError>
              break;
 800cd2e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800cd30:	e006      	b.n	800cd40 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800cd32:	683a      	ldr	r2, [r7, #0]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	0011      	movs	r1, r2
 800cd38:	0018      	movs	r0, r3
 800cd3a:	f000 fba4 	bl	800d486 <USBD_CtlError>
          break;
 800cd3e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800cd40:	e006      	b.n	800cd50 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800cd42:	683a      	ldr	r2, [r7, #0]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	0011      	movs	r1, r2
 800cd48:	0018      	movs	r0, r3
 800cd4a:	f000 fb9c 	bl	800d486 <USBD_CtlError>
      break;
 800cd4e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800cd50:	230f      	movs	r3, #15
 800cd52:	18fb      	adds	r3, r7, r3
 800cd54:	781b      	ldrb	r3, [r3, #0]
}
 800cd56:	0018      	movs	r0, r3
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	b004      	add	sp, #16
 800cd5c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800cd60 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b084      	sub	sp, #16
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cd6a:	2308      	movs	r3, #8
 800cd6c:	18fb      	adds	r3, r7, r3
 800cd6e:	2200      	movs	r2, #0
 800cd70:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800cd72:	2300      	movs	r3, #0
 800cd74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cd76:	230b      	movs	r3, #11
 800cd78:	18fb      	adds	r3, r7, r3
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	885b      	ldrh	r3, [r3, #2]
 800cd82:	0a1b      	lsrs	r3, r3, #8
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	2b07      	cmp	r3, #7
 800cd88:	d900      	bls.n	800cd8c <USBD_GetDescriptor+0x2c>
 800cd8a:	e159      	b.n	800d040 <USBD_GetDescriptor+0x2e0>
 800cd8c:	009a      	lsls	r2, r3, #2
 800cd8e:	4bcb      	ldr	r3, [pc, #812]	@ (800d0bc <USBD_GetDescriptor+0x35c>)
 800cd90:	18d3      	adds	r3, r2, r3
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	23ac      	movs	r3, #172	@ 0xac
 800cd9a:	009b      	lsls	r3, r3, #2
 800cd9c:	58d3      	ldr	r3, [r2, r3]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	7c12      	ldrb	r2, [r2, #16]
 800cda4:	2108      	movs	r1, #8
 800cda6:	1879      	adds	r1, r7, r1
 800cda8:	0010      	movs	r0, r2
 800cdaa:	4798      	blx	r3
 800cdac:	0003      	movs	r3, r0
 800cdae:	60fb      	str	r3, [r7, #12]
      break;
 800cdb0:	e153      	b.n	800d05a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	7c1b      	ldrb	r3, [r3, #16]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d10f      	bne.n	800cdda <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cdba:	687a      	ldr	r2, [r7, #4]
 800cdbc:	23ad      	movs	r3, #173	@ 0xad
 800cdbe:	009b      	lsls	r3, r3, #2
 800cdc0:	58d3      	ldr	r3, [r2, r3]
 800cdc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdc4:	2208      	movs	r2, #8
 800cdc6:	18ba      	adds	r2, r7, r2
 800cdc8:	0010      	movs	r0, r2
 800cdca:	4798      	blx	r3
 800cdcc:	0003      	movs	r3, r0
 800cdce:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	2202      	movs	r2, #2
 800cdd6:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cdd8:	e13f      	b.n	800d05a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cdda:	687a      	ldr	r2, [r7, #4]
 800cddc:	23ad      	movs	r3, #173	@ 0xad
 800cdde:	009b      	lsls	r3, r3, #2
 800cde0:	58d3      	ldr	r3, [r2, r3]
 800cde2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cde4:	2208      	movs	r2, #8
 800cde6:	18ba      	adds	r2, r7, r2
 800cde8:	0010      	movs	r0, r2
 800cdea:	4798      	blx	r3
 800cdec:	0003      	movs	r3, r0
 800cdee:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	2202      	movs	r2, #2
 800cdf6:	701a      	strb	r2, [r3, #0]
      break;
 800cdf8:	e12f      	b.n	800d05a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	885b      	ldrh	r3, [r3, #2]
 800cdfe:	b2db      	uxtb	r3, r3
 800ce00:	2b05      	cmp	r3, #5
 800ce02:	d900      	bls.n	800ce06 <USBD_GetDescriptor+0xa6>
 800ce04:	e0d0      	b.n	800cfa8 <USBD_GetDescriptor+0x248>
 800ce06:	009a      	lsls	r2, r3, #2
 800ce08:	4bad      	ldr	r3, [pc, #692]	@ (800d0c0 <USBD_GetDescriptor+0x360>)
 800ce0a:	18d3      	adds	r3, r2, r3
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	23ac      	movs	r3, #172	@ 0xac
 800ce14:	009b      	lsls	r3, r3, #2
 800ce16:	58d3      	ldr	r3, [r2, r3]
 800ce18:	685b      	ldr	r3, [r3, #4]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00d      	beq.n	800ce3a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	23ac      	movs	r3, #172	@ 0xac
 800ce22:	009b      	lsls	r3, r3, #2
 800ce24:	58d3      	ldr	r3, [r2, r3]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	7c12      	ldrb	r2, [r2, #16]
 800ce2c:	2108      	movs	r1, #8
 800ce2e:	1879      	adds	r1, r7, r1
 800ce30:	0010      	movs	r0, r2
 800ce32:	4798      	blx	r3
 800ce34:	0003      	movs	r3, r0
 800ce36:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce38:	e0c3      	b.n	800cfc2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800ce3a:	683a      	ldr	r2, [r7, #0]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	0011      	movs	r1, r2
 800ce40:	0018      	movs	r0, r3
 800ce42:	f000 fb20 	bl	800d486 <USBD_CtlError>
            err++;
 800ce46:	210b      	movs	r1, #11
 800ce48:	187b      	adds	r3, r7, r1
 800ce4a:	781a      	ldrb	r2, [r3, #0]
 800ce4c:	187b      	adds	r3, r7, r1
 800ce4e:	3201      	adds	r2, #1
 800ce50:	701a      	strb	r2, [r3, #0]
          break;
 800ce52:	e0b6      	b.n	800cfc2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	23ac      	movs	r3, #172	@ 0xac
 800ce58:	009b      	lsls	r3, r3, #2
 800ce5a:	58d3      	ldr	r3, [r2, r3]
 800ce5c:	689b      	ldr	r3, [r3, #8]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d00d      	beq.n	800ce7e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	23ac      	movs	r3, #172	@ 0xac
 800ce66:	009b      	lsls	r3, r3, #2
 800ce68:	58d3      	ldr	r3, [r2, r3]
 800ce6a:	689b      	ldr	r3, [r3, #8]
 800ce6c:	687a      	ldr	r2, [r7, #4]
 800ce6e:	7c12      	ldrb	r2, [r2, #16]
 800ce70:	2108      	movs	r1, #8
 800ce72:	1879      	adds	r1, r7, r1
 800ce74:	0010      	movs	r0, r2
 800ce76:	4798      	blx	r3
 800ce78:	0003      	movs	r3, r0
 800ce7a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce7c:	e0a1      	b.n	800cfc2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800ce7e:	683a      	ldr	r2, [r7, #0]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	0011      	movs	r1, r2
 800ce84:	0018      	movs	r0, r3
 800ce86:	f000 fafe 	bl	800d486 <USBD_CtlError>
            err++;
 800ce8a:	210b      	movs	r1, #11
 800ce8c:	187b      	adds	r3, r7, r1
 800ce8e:	781a      	ldrb	r2, [r3, #0]
 800ce90:	187b      	adds	r3, r7, r1
 800ce92:	3201      	adds	r2, #1
 800ce94:	701a      	strb	r2, [r3, #0]
          break;
 800ce96:	e094      	b.n	800cfc2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	23ac      	movs	r3, #172	@ 0xac
 800ce9c:	009b      	lsls	r3, r3, #2
 800ce9e:	58d3      	ldr	r3, [r2, r3]
 800cea0:	68db      	ldr	r3, [r3, #12]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d00d      	beq.n	800cec2 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cea6:	687a      	ldr	r2, [r7, #4]
 800cea8:	23ac      	movs	r3, #172	@ 0xac
 800ceaa:	009b      	lsls	r3, r3, #2
 800ceac:	58d3      	ldr	r3, [r2, r3]
 800ceae:	68db      	ldr	r3, [r3, #12]
 800ceb0:	687a      	ldr	r2, [r7, #4]
 800ceb2:	7c12      	ldrb	r2, [r2, #16]
 800ceb4:	2108      	movs	r1, #8
 800ceb6:	1879      	adds	r1, r7, r1
 800ceb8:	0010      	movs	r0, r2
 800ceba:	4798      	blx	r3
 800cebc:	0003      	movs	r3, r0
 800cebe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cec0:	e07f      	b.n	800cfc2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800cec2:	683a      	ldr	r2, [r7, #0]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	0011      	movs	r1, r2
 800cec8:	0018      	movs	r0, r3
 800ceca:	f000 fadc 	bl	800d486 <USBD_CtlError>
            err++;
 800cece:	210b      	movs	r1, #11
 800ced0:	187b      	adds	r3, r7, r1
 800ced2:	781a      	ldrb	r2, [r3, #0]
 800ced4:	187b      	adds	r3, r7, r1
 800ced6:	3201      	adds	r2, #1
 800ced8:	701a      	strb	r2, [r3, #0]
          break;
 800ceda:	e072      	b.n	800cfc2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cedc:	687a      	ldr	r2, [r7, #4]
 800cede:	23ac      	movs	r3, #172	@ 0xac
 800cee0:	009b      	lsls	r3, r3, #2
 800cee2:	58d3      	ldr	r3, [r2, r3]
 800cee4:	691b      	ldr	r3, [r3, #16]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d00d      	beq.n	800cf06 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ceea:	687a      	ldr	r2, [r7, #4]
 800ceec:	23ac      	movs	r3, #172	@ 0xac
 800ceee:	009b      	lsls	r3, r3, #2
 800cef0:	58d3      	ldr	r3, [r2, r3]
 800cef2:	691b      	ldr	r3, [r3, #16]
 800cef4:	687a      	ldr	r2, [r7, #4]
 800cef6:	7c12      	ldrb	r2, [r2, #16]
 800cef8:	2108      	movs	r1, #8
 800cefa:	1879      	adds	r1, r7, r1
 800cefc:	0010      	movs	r0, r2
 800cefe:	4798      	blx	r3
 800cf00:	0003      	movs	r3, r0
 800cf02:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf04:	e05d      	b.n	800cfc2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800cf06:	683a      	ldr	r2, [r7, #0]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	0011      	movs	r1, r2
 800cf0c:	0018      	movs	r0, r3
 800cf0e:	f000 faba 	bl	800d486 <USBD_CtlError>
            err++;
 800cf12:	210b      	movs	r1, #11
 800cf14:	187b      	adds	r3, r7, r1
 800cf16:	781a      	ldrb	r2, [r3, #0]
 800cf18:	187b      	adds	r3, r7, r1
 800cf1a:	3201      	adds	r2, #1
 800cf1c:	701a      	strb	r2, [r3, #0]
          break;
 800cf1e:	e050      	b.n	800cfc2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cf20:	687a      	ldr	r2, [r7, #4]
 800cf22:	23ac      	movs	r3, #172	@ 0xac
 800cf24:	009b      	lsls	r3, r3, #2
 800cf26:	58d3      	ldr	r3, [r2, r3]
 800cf28:	695b      	ldr	r3, [r3, #20]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d00d      	beq.n	800cf4a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	23ac      	movs	r3, #172	@ 0xac
 800cf32:	009b      	lsls	r3, r3, #2
 800cf34:	58d3      	ldr	r3, [r2, r3]
 800cf36:	695b      	ldr	r3, [r3, #20]
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	7c12      	ldrb	r2, [r2, #16]
 800cf3c:	2108      	movs	r1, #8
 800cf3e:	1879      	adds	r1, r7, r1
 800cf40:	0010      	movs	r0, r2
 800cf42:	4798      	blx	r3
 800cf44:	0003      	movs	r3, r0
 800cf46:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf48:	e03b      	b.n	800cfc2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800cf4a:	683a      	ldr	r2, [r7, #0]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	0011      	movs	r1, r2
 800cf50:	0018      	movs	r0, r3
 800cf52:	f000 fa98 	bl	800d486 <USBD_CtlError>
            err++;
 800cf56:	210b      	movs	r1, #11
 800cf58:	187b      	adds	r3, r7, r1
 800cf5a:	781a      	ldrb	r2, [r3, #0]
 800cf5c:	187b      	adds	r3, r7, r1
 800cf5e:	3201      	adds	r2, #1
 800cf60:	701a      	strb	r2, [r3, #0]
          break;
 800cf62:	e02e      	b.n	800cfc2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cf64:	687a      	ldr	r2, [r7, #4]
 800cf66:	23ac      	movs	r3, #172	@ 0xac
 800cf68:	009b      	lsls	r3, r3, #2
 800cf6a:	58d3      	ldr	r3, [r2, r3]
 800cf6c:	699b      	ldr	r3, [r3, #24]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d00d      	beq.n	800cf8e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	23ac      	movs	r3, #172	@ 0xac
 800cf76:	009b      	lsls	r3, r3, #2
 800cf78:	58d3      	ldr	r3, [r2, r3]
 800cf7a:	699b      	ldr	r3, [r3, #24]
 800cf7c:	687a      	ldr	r2, [r7, #4]
 800cf7e:	7c12      	ldrb	r2, [r2, #16]
 800cf80:	2108      	movs	r1, #8
 800cf82:	1879      	adds	r1, r7, r1
 800cf84:	0010      	movs	r0, r2
 800cf86:	4798      	blx	r3
 800cf88:	0003      	movs	r3, r0
 800cf8a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf8c:	e019      	b.n	800cfc2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800cf8e:	683a      	ldr	r2, [r7, #0]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	0011      	movs	r1, r2
 800cf94:	0018      	movs	r0, r3
 800cf96:	f000 fa76 	bl	800d486 <USBD_CtlError>
            err++;
 800cf9a:	210b      	movs	r1, #11
 800cf9c:	187b      	adds	r3, r7, r1
 800cf9e:	781a      	ldrb	r2, [r3, #0]
 800cfa0:	187b      	adds	r3, r7, r1
 800cfa2:	3201      	adds	r2, #1
 800cfa4:	701a      	strb	r2, [r3, #0]
          break;
 800cfa6:	e00c      	b.n	800cfc2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800cfa8:	683a      	ldr	r2, [r7, #0]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	0011      	movs	r1, r2
 800cfae:	0018      	movs	r0, r3
 800cfb0:	f000 fa69 	bl	800d486 <USBD_CtlError>
          err++;
 800cfb4:	210b      	movs	r1, #11
 800cfb6:	187b      	adds	r3, r7, r1
 800cfb8:	781a      	ldrb	r2, [r3, #0]
 800cfba:	187b      	adds	r3, r7, r1
 800cfbc:	3201      	adds	r2, #1
 800cfbe:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800cfc0:	e04b      	b.n	800d05a <USBD_GetDescriptor+0x2fa>
 800cfc2:	e04a      	b.n	800d05a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	7c1b      	ldrb	r3, [r3, #16]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d10b      	bne.n	800cfe4 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	23ad      	movs	r3, #173	@ 0xad
 800cfd0:	009b      	lsls	r3, r3, #2
 800cfd2:	58d3      	ldr	r3, [r2, r3]
 800cfd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfd6:	2208      	movs	r2, #8
 800cfd8:	18ba      	adds	r2, r7, r2
 800cfda:	0010      	movs	r0, r2
 800cfdc:	4798      	blx	r3
 800cfde:	0003      	movs	r3, r0
 800cfe0:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cfe2:	e03a      	b.n	800d05a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800cfe4:	683a      	ldr	r2, [r7, #0]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	0011      	movs	r1, r2
 800cfea:	0018      	movs	r0, r3
 800cfec:	f000 fa4b 	bl	800d486 <USBD_CtlError>
        err++;
 800cff0:	210b      	movs	r1, #11
 800cff2:	187b      	adds	r3, r7, r1
 800cff4:	781a      	ldrb	r2, [r3, #0]
 800cff6:	187b      	adds	r3, r7, r1
 800cff8:	3201      	adds	r2, #1
 800cffa:	701a      	strb	r2, [r3, #0]
      break;
 800cffc:	e02d      	b.n	800d05a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	7c1b      	ldrb	r3, [r3, #16]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d10f      	bne.n	800d026 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d006:	687a      	ldr	r2, [r7, #4]
 800d008:	23ad      	movs	r3, #173	@ 0xad
 800d00a:	009b      	lsls	r3, r3, #2
 800d00c:	58d3      	ldr	r3, [r2, r3]
 800d00e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d010:	2208      	movs	r2, #8
 800d012:	18ba      	adds	r2, r7, r2
 800d014:	0010      	movs	r0, r2
 800d016:	4798      	blx	r3
 800d018:	0003      	movs	r3, r0
 800d01a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	3301      	adds	r3, #1
 800d020:	2207      	movs	r2, #7
 800d022:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d024:	e019      	b.n	800d05a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800d026:	683a      	ldr	r2, [r7, #0]
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	0011      	movs	r1, r2
 800d02c:	0018      	movs	r0, r3
 800d02e:	f000 fa2a 	bl	800d486 <USBD_CtlError>
        err++;
 800d032:	210b      	movs	r1, #11
 800d034:	187b      	adds	r3, r7, r1
 800d036:	781a      	ldrb	r2, [r3, #0]
 800d038:	187b      	adds	r3, r7, r1
 800d03a:	3201      	adds	r2, #1
 800d03c:	701a      	strb	r2, [r3, #0]
      break;
 800d03e:	e00c      	b.n	800d05a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800d040:	683a      	ldr	r2, [r7, #0]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	0011      	movs	r1, r2
 800d046:	0018      	movs	r0, r3
 800d048:	f000 fa1d 	bl	800d486 <USBD_CtlError>
      err++;
 800d04c:	210b      	movs	r1, #11
 800d04e:	187b      	adds	r3, r7, r1
 800d050:	781a      	ldrb	r2, [r3, #0]
 800d052:	187b      	adds	r3, r7, r1
 800d054:	3201      	adds	r2, #1
 800d056:	701a      	strb	r2, [r3, #0]
      break;
 800d058:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 800d05a:	230b      	movs	r3, #11
 800d05c:	18fb      	adds	r3, r7, r3
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d127      	bne.n	800d0b4 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800d064:	2108      	movs	r1, #8
 800d066:	187b      	adds	r3, r7, r1
 800d068:	881b      	ldrh	r3, [r3, #0]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d019      	beq.n	800d0a2 <USBD_GetDescriptor+0x342>
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	88db      	ldrh	r3, [r3, #6]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d015      	beq.n	800d0a2 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	88da      	ldrh	r2, [r3, #6]
 800d07a:	187b      	adds	r3, r7, r1
 800d07c:	881b      	ldrh	r3, [r3, #0]
 800d07e:	1c18      	adds	r0, r3, #0
 800d080:	1c11      	adds	r1, r2, #0
 800d082:	b28a      	uxth	r2, r1
 800d084:	b283      	uxth	r3, r0
 800d086:	429a      	cmp	r2, r3
 800d088:	d900      	bls.n	800d08c <USBD_GetDescriptor+0x32c>
 800d08a:	1c01      	adds	r1, r0, #0
 800d08c:	b28a      	uxth	r2, r1
 800d08e:	2108      	movs	r1, #8
 800d090:	187b      	adds	r3, r7, r1
 800d092:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d094:	187b      	adds	r3, r7, r1
 800d096:	881a      	ldrh	r2, [r3, #0]
 800d098:	68f9      	ldr	r1, [r7, #12]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	0018      	movs	r0, r3
 800d09e:	f000 fa70 	bl	800d582 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	88db      	ldrh	r3, [r3, #6]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d105      	bne.n	800d0b6 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	0018      	movs	r0, r3
 800d0ae:	f000 fad2 	bl	800d656 <USBD_CtlSendStatus>
 800d0b2:	e000      	b.n	800d0b6 <USBD_GetDescriptor+0x356>
    return;
 800d0b4:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	b004      	add	sp, #16
 800d0ba:	bd80      	pop	{r7, pc}
 800d0bc:	0801255c 	.word	0x0801255c
 800d0c0:	0801257c 	.word	0x0801257c

0800d0c4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d0c4:	b590      	push	{r4, r7, lr}
 800d0c6:	b085      	sub	sp, #20
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	889b      	ldrh	r3, [r3, #4]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d13d      	bne.n	800d152 <USBD_SetAddress+0x8e>
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	88db      	ldrh	r3, [r3, #6]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d139      	bne.n	800d152 <USBD_SetAddress+0x8e>
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	885b      	ldrh	r3, [r3, #2]
 800d0e2:	2b7f      	cmp	r3, #127	@ 0x7f
 800d0e4:	d835      	bhi.n	800d152 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	885b      	ldrh	r3, [r3, #2]
 800d0ea:	b2da      	uxtb	r2, r3
 800d0ec:	230f      	movs	r3, #15
 800d0ee:	18fb      	adds	r3, r7, r3
 800d0f0:	217f      	movs	r1, #127	@ 0x7f
 800d0f2:	400a      	ands	r2, r1
 800d0f4:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0f6:	687a      	ldr	r2, [r7, #4]
 800d0f8:	23a7      	movs	r3, #167	@ 0xa7
 800d0fa:	009b      	lsls	r3, r3, #2
 800d0fc:	5cd3      	ldrb	r3, [r2, r3]
 800d0fe:	2b03      	cmp	r3, #3
 800d100:	d106      	bne.n	800d110 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800d102:	683a      	ldr	r2, [r7, #0]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	0011      	movs	r1, r2
 800d108:	0018      	movs	r0, r3
 800d10a:	f000 f9bc 	bl	800d486 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d10e:	e027      	b.n	800d160 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	240f      	movs	r4, #15
 800d114:	193a      	adds	r2, r7, r4
 800d116:	4914      	ldr	r1, [pc, #80]	@ (800d168 <USBD_SetAddress+0xa4>)
 800d118:	7812      	ldrb	r2, [r2, #0]
 800d11a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d11c:	193b      	adds	r3, r7, r4
 800d11e:	781a      	ldrb	r2, [r3, #0]
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	0011      	movs	r1, r2
 800d124:	0018      	movs	r0, r3
 800d126:	f000 fefc 	bl	800df22 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	0018      	movs	r0, r3
 800d12e:	f000 fa92 	bl	800d656 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d132:	193b      	adds	r3, r7, r4
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d005      	beq.n	800d146 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d13a:	687a      	ldr	r2, [r7, #4]
 800d13c:	23a7      	movs	r3, #167	@ 0xa7
 800d13e:	009b      	lsls	r3, r3, #2
 800d140:	2102      	movs	r1, #2
 800d142:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d144:	e00c      	b.n	800d160 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d146:	687a      	ldr	r2, [r7, #4]
 800d148:	23a7      	movs	r3, #167	@ 0xa7
 800d14a:	009b      	lsls	r3, r3, #2
 800d14c:	2101      	movs	r1, #1
 800d14e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d150:	e006      	b.n	800d160 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d152:	683a      	ldr	r2, [r7, #0]
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	0011      	movs	r1, r2
 800d158:	0018      	movs	r0, r3
 800d15a:	f000 f994 	bl	800d486 <USBD_CtlError>
  }
}
 800d15e:	46c0      	nop			@ (mov r8, r8)
 800d160:	46c0      	nop			@ (mov r8, r8)
 800d162:	46bd      	mov	sp, r7
 800d164:	b005      	add	sp, #20
 800d166:	bd90      	pop	{r4, r7, pc}
 800d168:	0000029e 	.word	0x0000029e

0800d16c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b082      	sub	sp, #8
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	885b      	ldrh	r3, [r3, #2]
 800d17a:	b2da      	uxtb	r2, r3
 800d17c:	4b4c      	ldr	r3, [pc, #304]	@ (800d2b0 <USBD_SetConfig+0x144>)
 800d17e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d180:	4b4b      	ldr	r3, [pc, #300]	@ (800d2b0 <USBD_SetConfig+0x144>)
 800d182:	781b      	ldrb	r3, [r3, #0]
 800d184:	2b01      	cmp	r3, #1
 800d186:	d906      	bls.n	800d196 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800d188:	683a      	ldr	r2, [r7, #0]
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	0011      	movs	r1, r2
 800d18e:	0018      	movs	r0, r3
 800d190:	f000 f979 	bl	800d486 <USBD_CtlError>
 800d194:	e088      	b.n	800d2a8 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	23a7      	movs	r3, #167	@ 0xa7
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	5cd3      	ldrb	r3, [r2, r3]
 800d19e:	2b02      	cmp	r3, #2
 800d1a0:	d002      	beq.n	800d1a8 <USBD_SetConfig+0x3c>
 800d1a2:	2b03      	cmp	r3, #3
 800d1a4:	d029      	beq.n	800d1fa <USBD_SetConfig+0x8e>
 800d1a6:	e071      	b.n	800d28c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800d1a8:	4b41      	ldr	r3, [pc, #260]	@ (800d2b0 <USBD_SetConfig+0x144>)
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d01f      	beq.n	800d1f0 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800d1b0:	4b3f      	ldr	r3, [pc, #252]	@ (800d2b0 <USBD_SetConfig+0x144>)
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	001a      	movs	r2, r3
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	23a7      	movs	r3, #167	@ 0xa7
 800d1be:	009b      	lsls	r3, r3, #2
 800d1c0:	2103      	movs	r1, #3
 800d1c2:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d1c4:	4b3a      	ldr	r3, [pc, #232]	@ (800d2b0 <USBD_SetConfig+0x144>)
 800d1c6:	781a      	ldrb	r2, [r3, #0]
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	0011      	movs	r1, r2
 800d1cc:	0018      	movs	r0, r3
 800d1ce:	f7ff f8c6 	bl	800c35e <USBD_SetClassConfig>
 800d1d2:	0003      	movs	r3, r0
 800d1d4:	2b02      	cmp	r3, #2
 800d1d6:	d106      	bne.n	800d1e6 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800d1d8:	683a      	ldr	r2, [r7, #0]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	0011      	movs	r1, r2
 800d1de:	0018      	movs	r0, r3
 800d1e0:	f000 f951 	bl	800d486 <USBD_CtlError>
            return;
 800d1e4:	e060      	b.n	800d2a8 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	0018      	movs	r0, r3
 800d1ea:	f000 fa34 	bl	800d656 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d1ee:	e05b      	b.n	800d2a8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	0018      	movs	r0, r3
 800d1f4:	f000 fa2f 	bl	800d656 <USBD_CtlSendStatus>
        break;
 800d1f8:	e056      	b.n	800d2a8 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800d1fa:	4b2d      	ldr	r3, [pc, #180]	@ (800d2b0 <USBD_SetConfig+0x144>)
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d115      	bne.n	800d22e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d202:	687a      	ldr	r2, [r7, #4]
 800d204:	23a7      	movs	r3, #167	@ 0xa7
 800d206:	009b      	lsls	r3, r3, #2
 800d208:	2102      	movs	r1, #2
 800d20a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800d20c:	4b28      	ldr	r3, [pc, #160]	@ (800d2b0 <USBD_SetConfig+0x144>)
 800d20e:	781b      	ldrb	r3, [r3, #0]
 800d210:	001a      	movs	r2, r3
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800d216:	4b26      	ldr	r3, [pc, #152]	@ (800d2b0 <USBD_SetConfig+0x144>)
 800d218:	781a      	ldrb	r2, [r3, #0]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	0011      	movs	r1, r2
 800d21e:	0018      	movs	r0, r3
 800d220:	f7ff f8c4 	bl	800c3ac <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	0018      	movs	r0, r3
 800d228:	f000 fa15 	bl	800d656 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d22c:	e03c      	b.n	800d2a8 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800d22e:	4b20      	ldr	r3, [pc, #128]	@ (800d2b0 <USBD_SetConfig+0x144>)
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	001a      	movs	r2, r3
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	685b      	ldr	r3, [r3, #4]
 800d238:	429a      	cmp	r2, r3
 800d23a:	d022      	beq.n	800d282 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	685b      	ldr	r3, [r3, #4]
 800d240:	b2da      	uxtb	r2, r3
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	0011      	movs	r1, r2
 800d246:	0018      	movs	r0, r3
 800d248:	f7ff f8b0 	bl	800c3ac <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800d24c:	4b18      	ldr	r3, [pc, #96]	@ (800d2b0 <USBD_SetConfig+0x144>)
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	001a      	movs	r2, r3
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d256:	4b16      	ldr	r3, [pc, #88]	@ (800d2b0 <USBD_SetConfig+0x144>)
 800d258:	781a      	ldrb	r2, [r3, #0]
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	0011      	movs	r1, r2
 800d25e:	0018      	movs	r0, r3
 800d260:	f7ff f87d 	bl	800c35e <USBD_SetClassConfig>
 800d264:	0003      	movs	r3, r0
 800d266:	2b02      	cmp	r3, #2
 800d268:	d106      	bne.n	800d278 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800d26a:	683a      	ldr	r2, [r7, #0]
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	0011      	movs	r1, r2
 800d270:	0018      	movs	r0, r3
 800d272:	f000 f908 	bl	800d486 <USBD_CtlError>
            return;
 800d276:	e017      	b.n	800d2a8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	0018      	movs	r0, r3
 800d27c:	f000 f9eb 	bl	800d656 <USBD_CtlSendStatus>
        break;
 800d280:	e012      	b.n	800d2a8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	0018      	movs	r0, r3
 800d286:	f000 f9e6 	bl	800d656 <USBD_CtlSendStatus>
        break;
 800d28a:	e00d      	b.n	800d2a8 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800d28c:	683a      	ldr	r2, [r7, #0]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	0011      	movs	r1, r2
 800d292:	0018      	movs	r0, r3
 800d294:	f000 f8f7 	bl	800d486 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800d298:	4b05      	ldr	r3, [pc, #20]	@ (800d2b0 <USBD_SetConfig+0x144>)
 800d29a:	781a      	ldrb	r2, [r3, #0]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	0011      	movs	r1, r2
 800d2a0:	0018      	movs	r0, r3
 800d2a2:	f7ff f883 	bl	800c3ac <USBD_ClrClassConfig>
        break;
 800d2a6:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	b002      	add	sp, #8
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	46c0      	nop			@ (mov r8, r8)
 800d2b0:	20000a7c 	.word	0x20000a7c

0800d2b4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b082      	sub	sp, #8
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	88db      	ldrh	r3, [r3, #6]
 800d2c2:	2b01      	cmp	r3, #1
 800d2c4:	d006      	beq.n	800d2d4 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800d2c6:	683a      	ldr	r2, [r7, #0]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	0011      	movs	r1, r2
 800d2cc:	0018      	movs	r0, r3
 800d2ce:	f000 f8da 	bl	800d486 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d2d2:	e026      	b.n	800d322 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800d2d4:	687a      	ldr	r2, [r7, #4]
 800d2d6:	23a7      	movs	r3, #167	@ 0xa7
 800d2d8:	009b      	lsls	r3, r3, #2
 800d2da:	5cd3      	ldrb	r3, [r2, r3]
 800d2dc:	2b02      	cmp	r3, #2
 800d2de:	dc02      	bgt.n	800d2e6 <USBD_GetConfig+0x32>
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	dc03      	bgt.n	800d2ec <USBD_GetConfig+0x38>
 800d2e4:	e016      	b.n	800d314 <USBD_GetConfig+0x60>
 800d2e6:	2b03      	cmp	r3, #3
 800d2e8:	d00c      	beq.n	800d304 <USBD_GetConfig+0x50>
 800d2ea:	e013      	b.n	800d314 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	3308      	adds	r3, #8
 800d2f6:	0019      	movs	r1, r3
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	0018      	movs	r0, r3
 800d2fe:	f000 f940 	bl	800d582 <USBD_CtlSendData>
        break;
 800d302:	e00e      	b.n	800d322 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	1d19      	adds	r1, r3, #4
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2201      	movs	r2, #1
 800d30c:	0018      	movs	r0, r3
 800d30e:	f000 f938 	bl	800d582 <USBD_CtlSendData>
        break;
 800d312:	e006      	b.n	800d322 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800d314:	683a      	ldr	r2, [r7, #0]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	0011      	movs	r1, r2
 800d31a:	0018      	movs	r0, r3
 800d31c:	f000 f8b3 	bl	800d486 <USBD_CtlError>
        break;
 800d320:	46c0      	nop			@ (mov r8, r8)
}
 800d322:	46c0      	nop			@ (mov r8, r8)
 800d324:	46bd      	mov	sp, r7
 800d326:	b002      	add	sp, #8
 800d328:	bd80      	pop	{r7, pc}

0800d32a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d32a:	b580      	push	{r7, lr}
 800d32c:	b082      	sub	sp, #8
 800d32e:	af00      	add	r7, sp, #0
 800d330:	6078      	str	r0, [r7, #4]
 800d332:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	23a7      	movs	r3, #167	@ 0xa7
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	5cd3      	ldrb	r3, [r2, r3]
 800d33c:	3b01      	subs	r3, #1
 800d33e:	2b02      	cmp	r3, #2
 800d340:	d822      	bhi.n	800d388 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	88db      	ldrh	r3, [r3, #6]
 800d346:	2b02      	cmp	r3, #2
 800d348:	d006      	beq.n	800d358 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800d34a:	683a      	ldr	r2, [r7, #0]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	0011      	movs	r1, r2
 800d350:	0018      	movs	r0, r3
 800d352:	f000 f898 	bl	800d486 <USBD_CtlError>
        break;
 800d356:	e01e      	b.n	800d396 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2201      	movs	r2, #1
 800d35c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800d35e:	687a      	ldr	r2, [r7, #4]
 800d360:	23a9      	movs	r3, #169	@ 0xa9
 800d362:	009b      	lsls	r3, r3, #2
 800d364:	58d3      	ldr	r3, [r2, r3]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d005      	beq.n	800d376 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	68db      	ldr	r3, [r3, #12]
 800d36e:	2202      	movs	r2, #2
 800d370:	431a      	orrs	r2, r3
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	330c      	adds	r3, #12
 800d37a:	0019      	movs	r1, r3
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2202      	movs	r2, #2
 800d380:	0018      	movs	r0, r3
 800d382:	f000 f8fe 	bl	800d582 <USBD_CtlSendData>
      break;
 800d386:	e006      	b.n	800d396 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800d388:	683a      	ldr	r2, [r7, #0]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	0011      	movs	r1, r2
 800d38e:	0018      	movs	r0, r3
 800d390:	f000 f879 	bl	800d486 <USBD_CtlError>
      break;
 800d394:	46c0      	nop			@ (mov r8, r8)
  }
}
 800d396:	46c0      	nop			@ (mov r8, r8)
 800d398:	46bd      	mov	sp, r7
 800d39a:	b002      	add	sp, #8
 800d39c:	bd80      	pop	{r7, pc}

0800d39e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d39e:	b580      	push	{r7, lr}
 800d3a0:	b082      	sub	sp, #8
 800d3a2:	af00      	add	r7, sp, #0
 800d3a4:	6078      	str	r0, [r7, #4]
 800d3a6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	885b      	ldrh	r3, [r3, #2]
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d108      	bne.n	800d3c2 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	23a9      	movs	r3, #169	@ 0xa9
 800d3b4:	009b      	lsls	r3, r3, #2
 800d3b6:	2101      	movs	r1, #1
 800d3b8:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	0018      	movs	r0, r3
 800d3be:	f000 f94a 	bl	800d656 <USBD_CtlSendStatus>
  }
}
 800d3c2:	46c0      	nop			@ (mov r8, r8)
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	b002      	add	sp, #8
 800d3c8:	bd80      	pop	{r7, pc}

0800d3ca <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d3ca:	b580      	push	{r7, lr}
 800d3cc:	b082      	sub	sp, #8
 800d3ce:	af00      	add	r7, sp, #0
 800d3d0:	6078      	str	r0, [r7, #4]
 800d3d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d3d4:	687a      	ldr	r2, [r7, #4]
 800d3d6:	23a7      	movs	r3, #167	@ 0xa7
 800d3d8:	009b      	lsls	r3, r3, #2
 800d3da:	5cd3      	ldrb	r3, [r2, r3]
 800d3dc:	3b01      	subs	r3, #1
 800d3de:	2b02      	cmp	r3, #2
 800d3e0:	d80d      	bhi.n	800d3fe <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	885b      	ldrh	r3, [r3, #2]
 800d3e6:	2b01      	cmp	r3, #1
 800d3e8:	d110      	bne.n	800d40c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800d3ea:	687a      	ldr	r2, [r7, #4]
 800d3ec:	23a9      	movs	r3, #169	@ 0xa9
 800d3ee:	009b      	lsls	r3, r3, #2
 800d3f0:	2100      	movs	r1, #0
 800d3f2:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	0018      	movs	r0, r3
 800d3f8:	f000 f92d 	bl	800d656 <USBD_CtlSendStatus>
      }
      break;
 800d3fc:	e006      	b.n	800d40c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800d3fe:	683a      	ldr	r2, [r7, #0]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	0011      	movs	r1, r2
 800d404:	0018      	movs	r0, r3
 800d406:	f000 f83e 	bl	800d486 <USBD_CtlError>
      break;
 800d40a:	e000      	b.n	800d40e <USBD_ClrFeature+0x44>
      break;
 800d40c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800d40e:	46c0      	nop			@ (mov r8, r8)
 800d410:	46bd      	mov	sp, r7
 800d412:	b002      	add	sp, #8
 800d414:	bd80      	pop	{r7, pc}

0800d416 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d416:	b580      	push	{r7, lr}
 800d418:	b082      	sub	sp, #8
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	6078      	str	r0, [r7, #4]
 800d41e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	781a      	ldrb	r2, [r3, #0]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	785a      	ldrb	r2, [r3, #1]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	3302      	adds	r3, #2
 800d434:	781b      	ldrb	r3, [r3, #0]
 800d436:	001a      	movs	r2, r3
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	3303      	adds	r3, #3
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	021b      	lsls	r3, r3, #8
 800d440:	b29b      	uxth	r3, r3
 800d442:	18d3      	adds	r3, r2, r3
 800d444:	b29a      	uxth	r2, r3
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	3304      	adds	r3, #4
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	001a      	movs	r2, r3
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	3305      	adds	r3, #5
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	021b      	lsls	r3, r3, #8
 800d45a:	b29b      	uxth	r3, r3
 800d45c:	18d3      	adds	r3, r2, r3
 800d45e:	b29a      	uxth	r2, r3
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	3306      	adds	r3, #6
 800d468:	781b      	ldrb	r3, [r3, #0]
 800d46a:	001a      	movs	r2, r3
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	3307      	adds	r3, #7
 800d470:	781b      	ldrb	r3, [r3, #0]
 800d472:	021b      	lsls	r3, r3, #8
 800d474:	b29b      	uxth	r3, r3
 800d476:	18d3      	adds	r3, r2, r3
 800d478:	b29a      	uxth	r2, r3
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	80da      	strh	r2, [r3, #6]

}
 800d47e:	46c0      	nop			@ (mov r8, r8)
 800d480:	46bd      	mov	sp, r7
 800d482:	b002      	add	sp, #8
 800d484:	bd80      	pop	{r7, pc}

0800d486 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800d486:	b580      	push	{r7, lr}
 800d488:	b082      	sub	sp, #8
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	6078      	str	r0, [r7, #4]
 800d48e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2180      	movs	r1, #128	@ 0x80
 800d494:	0018      	movs	r0, r3
 800d496:	f000 fcbe 	bl	800de16 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2100      	movs	r1, #0
 800d49e:	0018      	movs	r0, r3
 800d4a0:	f000 fcb9 	bl	800de16 <USBD_LL_StallEP>
}
 800d4a4:	46c0      	nop			@ (mov r8, r8)
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	b002      	add	sp, #8
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d4ac:	b590      	push	{r4, r7, lr}
 800d4ae:	b087      	sub	sp, #28
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d4b8:	2417      	movs	r4, #23
 800d4ba:	193b      	adds	r3, r7, r4
 800d4bc:	2200      	movs	r2, #0
 800d4be:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d03c      	beq.n	800d540 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	0018      	movs	r0, r3
 800d4ca:	f000 f83d 	bl	800d548 <USBD_GetLen>
 800d4ce:	0003      	movs	r3, r0
 800d4d0:	3301      	adds	r3, #1
 800d4d2:	b29b      	uxth	r3, r3
 800d4d4:	18db      	adds	r3, r3, r3
 800d4d6:	b29a      	uxth	r2, r3
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d4dc:	193b      	adds	r3, r7, r4
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	193a      	adds	r2, r7, r4
 800d4e2:	1c59      	adds	r1, r3, #1
 800d4e4:	7011      	strb	r1, [r2, #0]
 800d4e6:	001a      	movs	r2, r3
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	189b      	adds	r3, r3, r2
 800d4ec:	687a      	ldr	r2, [r7, #4]
 800d4ee:	7812      	ldrb	r2, [r2, #0]
 800d4f0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d4f2:	193b      	adds	r3, r7, r4
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	193a      	adds	r2, r7, r4
 800d4f8:	1c59      	adds	r1, r3, #1
 800d4fa:	7011      	strb	r1, [r2, #0]
 800d4fc:	001a      	movs	r2, r3
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	189b      	adds	r3, r3, r2
 800d502:	2203      	movs	r2, #3
 800d504:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d506:	e017      	b.n	800d538 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	1c5a      	adds	r2, r3, #1
 800d50c:	60fa      	str	r2, [r7, #12]
 800d50e:	2417      	movs	r4, #23
 800d510:	193a      	adds	r2, r7, r4
 800d512:	7812      	ldrb	r2, [r2, #0]
 800d514:	1939      	adds	r1, r7, r4
 800d516:	1c50      	adds	r0, r2, #1
 800d518:	7008      	strb	r0, [r1, #0]
 800d51a:	0011      	movs	r1, r2
 800d51c:	68ba      	ldr	r2, [r7, #8]
 800d51e:	1852      	adds	r2, r2, r1
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d524:	193b      	adds	r3, r7, r4
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	193a      	adds	r2, r7, r4
 800d52a:	1c59      	adds	r1, r3, #1
 800d52c:	7011      	strb	r1, [r2, #0]
 800d52e:	001a      	movs	r2, r3
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	189b      	adds	r3, r3, r2
 800d534:	2200      	movs	r2, #0
 800d536:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d1e3      	bne.n	800d508 <USBD_GetString+0x5c>
    }
  }
}
 800d540:	46c0      	nop			@ (mov r8, r8)
 800d542:	46bd      	mov	sp, r7
 800d544:	b007      	add	sp, #28
 800d546:	bd90      	pop	{r4, r7, pc}

0800d548 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b084      	sub	sp, #16
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d550:	230f      	movs	r3, #15
 800d552:	18fb      	adds	r3, r7, r3
 800d554:	2200      	movs	r2, #0
 800d556:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800d558:	e008      	b.n	800d56c <USBD_GetLen+0x24>
  {
    len++;
 800d55a:	210f      	movs	r1, #15
 800d55c:	187b      	adds	r3, r7, r1
 800d55e:	781a      	ldrb	r2, [r3, #0]
 800d560:	187b      	adds	r3, r7, r1
 800d562:	3201      	adds	r2, #1
 800d564:	701a      	strb	r2, [r3, #0]
    buf++;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	3301      	adds	r3, #1
 800d56a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d1f2      	bne.n	800d55a <USBD_GetLen+0x12>
  }

  return len;
 800d574:	230f      	movs	r3, #15
 800d576:	18fb      	adds	r3, r7, r3
 800d578:	781b      	ldrb	r3, [r3, #0]
}
 800d57a:	0018      	movs	r0, r3
 800d57c:	46bd      	mov	sp, r7
 800d57e:	b004      	add	sp, #16
 800d580:	bd80      	pop	{r7, pc}

0800d582 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800d582:	b580      	push	{r7, lr}
 800d584:	b084      	sub	sp, #16
 800d586:	af00      	add	r7, sp, #0
 800d588:	60f8      	str	r0, [r7, #12]
 800d58a:	60b9      	str	r1, [r7, #8]
 800d58c:	1dbb      	adds	r3, r7, #6
 800d58e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d590:	68fa      	ldr	r2, [r7, #12]
 800d592:	23a5      	movs	r3, #165	@ 0xa5
 800d594:	009b      	lsls	r3, r3, #2
 800d596:	2102      	movs	r1, #2
 800d598:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800d59a:	1dbb      	adds	r3, r7, #6
 800d59c:	881a      	ldrh	r2, [r3, #0]
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d5a2:	1dbb      	adds	r3, r7, #6
 800d5a4:	881a      	ldrh	r2, [r3, #0]
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d5aa:	1dbb      	adds	r3, r7, #6
 800d5ac:	881b      	ldrh	r3, [r3, #0]
 800d5ae:	68ba      	ldr	r2, [r7, #8]
 800d5b0:	68f8      	ldr	r0, [r7, #12]
 800d5b2:	2100      	movs	r1, #0
 800d5b4:	f000 fce0 	bl	800df78 <USBD_LL_Transmit>

  return USBD_OK;
 800d5b8:	2300      	movs	r3, #0
}
 800d5ba:	0018      	movs	r0, r3
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	b004      	add	sp, #16
 800d5c0:	bd80      	pop	{r7, pc}

0800d5c2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800d5c2:	b580      	push	{r7, lr}
 800d5c4:	b084      	sub	sp, #16
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	60f8      	str	r0, [r7, #12]
 800d5ca:	60b9      	str	r1, [r7, #8]
 800d5cc:	1dbb      	adds	r3, r7, #6
 800d5ce:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d5d0:	1dbb      	adds	r3, r7, #6
 800d5d2:	881b      	ldrh	r3, [r3, #0]
 800d5d4:	68ba      	ldr	r2, [r7, #8]
 800d5d6:	68f8      	ldr	r0, [r7, #12]
 800d5d8:	2100      	movs	r1, #0
 800d5da:	f000 fccd 	bl	800df78 <USBD_LL_Transmit>

  return USBD_OK;
 800d5de:	2300      	movs	r3, #0
}
 800d5e0:	0018      	movs	r0, r3
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	b004      	add	sp, #16
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b084      	sub	sp, #16
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	60f8      	str	r0, [r7, #12]
 800d5f0:	60b9      	str	r1, [r7, #8]
 800d5f2:	1dbb      	adds	r3, r7, #6
 800d5f4:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d5f6:	68fa      	ldr	r2, [r7, #12]
 800d5f8:	23a5      	movs	r3, #165	@ 0xa5
 800d5fa:	009b      	lsls	r3, r3, #2
 800d5fc:	2103      	movs	r1, #3
 800d5fe:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800d600:	1dbb      	adds	r3, r7, #6
 800d602:	8819      	ldrh	r1, [r3, #0]
 800d604:	68fa      	ldr	r2, [r7, #12]
 800d606:	23ae      	movs	r3, #174	@ 0xae
 800d608:	005b      	lsls	r3, r3, #1
 800d60a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800d60c:	1dbb      	adds	r3, r7, #6
 800d60e:	8819      	ldrh	r1, [r3, #0]
 800d610:	68fa      	ldr	r2, [r7, #12]
 800d612:	23b0      	movs	r3, #176	@ 0xb0
 800d614:	005b      	lsls	r3, r3, #1
 800d616:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d618:	1dbb      	adds	r3, r7, #6
 800d61a:	881b      	ldrh	r3, [r3, #0]
 800d61c:	68ba      	ldr	r2, [r7, #8]
 800d61e:	68f8      	ldr	r0, [r7, #12]
 800d620:	2100      	movs	r1, #0
 800d622:	f000 fce0 	bl	800dfe6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d626:	2300      	movs	r3, #0
}
 800d628:	0018      	movs	r0, r3
 800d62a:	46bd      	mov	sp, r7
 800d62c:	b004      	add	sp, #16
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b084      	sub	sp, #16
 800d634:	af00      	add	r7, sp, #0
 800d636:	60f8      	str	r0, [r7, #12]
 800d638:	60b9      	str	r1, [r7, #8]
 800d63a:	1dbb      	adds	r3, r7, #6
 800d63c:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d63e:	1dbb      	adds	r3, r7, #6
 800d640:	881b      	ldrh	r3, [r3, #0]
 800d642:	68ba      	ldr	r2, [r7, #8]
 800d644:	68f8      	ldr	r0, [r7, #12]
 800d646:	2100      	movs	r1, #0
 800d648:	f000 fccd 	bl	800dfe6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d64c:	2300      	movs	r3, #0
}
 800d64e:	0018      	movs	r0, r3
 800d650:	46bd      	mov	sp, r7
 800d652:	b004      	add	sp, #16
 800d654:	bd80      	pop	{r7, pc}

0800d656 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d656:	b580      	push	{r7, lr}
 800d658:	b082      	sub	sp, #8
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	23a5      	movs	r3, #165	@ 0xa5
 800d662:	009b      	lsls	r3, r3, #2
 800d664:	2104      	movs	r1, #4
 800d666:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	2300      	movs	r3, #0
 800d66c:	2200      	movs	r2, #0
 800d66e:	2100      	movs	r1, #0
 800d670:	f000 fc82 	bl	800df78 <USBD_LL_Transmit>

  return USBD_OK;
 800d674:	2300      	movs	r3, #0
}
 800d676:	0018      	movs	r0, r3
 800d678:	46bd      	mov	sp, r7
 800d67a:	b002      	add	sp, #8
 800d67c:	bd80      	pop	{r7, pc}

0800d67e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d67e:	b580      	push	{r7, lr}
 800d680:	b082      	sub	sp, #8
 800d682:	af00      	add	r7, sp, #0
 800d684:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d686:	687a      	ldr	r2, [r7, #4]
 800d688:	23a5      	movs	r3, #165	@ 0xa5
 800d68a:	009b      	lsls	r3, r3, #2
 800d68c:	2105      	movs	r1, #5
 800d68e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	2300      	movs	r3, #0
 800d694:	2200      	movs	r2, #0
 800d696:	2100      	movs	r1, #0
 800d698:	f000 fca5 	bl	800dfe6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d69c:	2300      	movs	r3, #0
}
 800d69e:	0018      	movs	r0, r3
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	b002      	add	sp, #8
 800d6a4:	bd80      	pop	{r7, pc}
	...

0800d6a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d6ac:	4914      	ldr	r1, [pc, #80]	@ (800d700 <MX_USB_DEVICE_Init+0x58>)
 800d6ae:	4b15      	ldr	r3, [pc, #84]	@ (800d704 <MX_USB_DEVICE_Init+0x5c>)
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	0018      	movs	r0, r3
 800d6b4:	f7fe fdec 	bl	800c290 <USBD_Init>
 800d6b8:	1e03      	subs	r3, r0, #0
 800d6ba:	d001      	beq.n	800d6c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d6bc:	f7f5 fcc0 	bl	8003040 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d6c0:	4a11      	ldr	r2, [pc, #68]	@ (800d708 <MX_USB_DEVICE_Init+0x60>)
 800d6c2:	4b10      	ldr	r3, [pc, #64]	@ (800d704 <MX_USB_DEVICE_Init+0x5c>)
 800d6c4:	0011      	movs	r1, r2
 800d6c6:	0018      	movs	r0, r3
 800d6c8:	f7fe fe13 	bl	800c2f2 <USBD_RegisterClass>
 800d6cc:	1e03      	subs	r3, r0, #0
 800d6ce:	d001      	beq.n	800d6d4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800d6d0:	f7f5 fcb6 	bl	8003040 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d6d4:	4a0d      	ldr	r2, [pc, #52]	@ (800d70c <MX_USB_DEVICE_Init+0x64>)
 800d6d6:	4b0b      	ldr	r3, [pc, #44]	@ (800d704 <MX_USB_DEVICE_Init+0x5c>)
 800d6d8:	0011      	movs	r1, r2
 800d6da:	0018      	movs	r0, r3
 800d6dc:	f7fe fd28 	bl	800c130 <USBD_CDC_RegisterInterface>
 800d6e0:	1e03      	subs	r3, r0, #0
 800d6e2:	d001      	beq.n	800d6e8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800d6e4:	f7f5 fcac 	bl	8003040 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d6e8:	4b06      	ldr	r3, [pc, #24]	@ (800d704 <MX_USB_DEVICE_Init+0x5c>)
 800d6ea:	0018      	movs	r0, r3
 800d6ec:	f7fe fe21 	bl	800c332 <USBD_Start>
 800d6f0:	1e03      	subs	r3, r0, #0
 800d6f2:	d001      	beq.n	800d6f8 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800d6f4:	f7f5 fca4 	bl	8003040 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d6f8:	46c0      	nop			@ (mov r8, r8)
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	46c0      	nop			@ (mov r8, r8)
 800d700:	20000188 	.word	0x20000188
 800d704:	20000a80 	.word	0x20000a80
 800d708:	20000074 	.word	0x20000074
 800d70c:	20000178 	.word	0x20000178

0800d710 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d714:	4907      	ldr	r1, [pc, #28]	@ (800d734 <CDC_Init_FS+0x24>)
 800d716:	4b08      	ldr	r3, [pc, #32]	@ (800d738 <CDC_Init_FS+0x28>)
 800d718:	2200      	movs	r2, #0
 800d71a:	0018      	movs	r0, r3
 800d71c:	f7fe fd23 	bl	800c166 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d720:	4a06      	ldr	r2, [pc, #24]	@ (800d73c <CDC_Init_FS+0x2c>)
 800d722:	4b05      	ldr	r3, [pc, #20]	@ (800d738 <CDC_Init_FS+0x28>)
 800d724:	0011      	movs	r1, r2
 800d726:	0018      	movs	r0, r3
 800d728:	f7fe fd39 	bl	800c19e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d72c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d72e:	0018      	movs	r0, r3
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}
 800d734:	20001144 	.word	0x20001144
 800d738:	20000a80 	.word	0x20000a80
 800d73c:	20000d44 	.word	0x20000d44

0800d740 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d744:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d746:	0018      	movs	r0, r3
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
 800d752:	6039      	str	r1, [r7, #0]
 800d754:	0011      	movs	r1, r2
 800d756:	1dfb      	adds	r3, r7, #7
 800d758:	1c02      	adds	r2, r0, #0
 800d75a:	701a      	strb	r2, [r3, #0]
 800d75c:	1d3b      	adds	r3, r7, #4
 800d75e:	1c0a      	adds	r2, r1, #0
 800d760:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d762:	1dfb      	adds	r3, r7, #7
 800d764:	781b      	ldrb	r3, [r3, #0]
 800d766:	2b23      	cmp	r3, #35	@ 0x23
 800d768:	d804      	bhi.n	800d774 <CDC_Control_FS+0x28>
 800d76a:	009a      	lsls	r2, r3, #2
 800d76c:	4b04      	ldr	r3, [pc, #16]	@ (800d780 <CDC_Control_FS+0x34>)
 800d76e:	18d3      	adds	r3, r2, r3
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d774:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 800d776:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d778:	0018      	movs	r0, r3
 800d77a:	46bd      	mov	sp, r7
 800d77c:	b002      	add	sp, #8
 800d77e:	bd80      	pop	{r7, pc}
 800d780:	08012594 	.word	0x08012594

0800d784 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b082      	sub	sp, #8
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d78e:	687a      	ldr	r2, [r7, #4]
 800d790:	4b06      	ldr	r3, [pc, #24]	@ (800d7ac <CDC_Receive_FS+0x28>)
 800d792:	0011      	movs	r1, r2
 800d794:	0018      	movs	r0, r3
 800d796:	f7fe fd02 	bl	800c19e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d79a:	4b04      	ldr	r3, [pc, #16]	@ (800d7ac <CDC_Receive_FS+0x28>)
 800d79c:	0018      	movs	r0, r3
 800d79e:	f7fe fd49 	bl	800c234 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d7a2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d7a4:	0018      	movs	r0, r3
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	b002      	add	sp, #8
 800d7aa:	bd80      	pop	{r7, pc}
 800d7ac:	20000a80 	.word	0x20000a80

0800d7b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d7b0:	b5b0      	push	{r4, r5, r7, lr}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	000a      	movs	r2, r1
 800d7ba:	1cbb      	adds	r3, r7, #2
 800d7bc:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800d7be:	230f      	movs	r3, #15
 800d7c0:	18fb      	adds	r3, r7, r3
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d7c6:	4a11      	ldr	r2, [pc, #68]	@ (800d80c <CDC_Transmit_FS+0x5c>)
 800d7c8:	23ae      	movs	r3, #174	@ 0xae
 800d7ca:	009b      	lsls	r3, r3, #2
 800d7cc:	58d3      	ldr	r3, [r2, r3]
 800d7ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d7d0:	68ba      	ldr	r2, [r7, #8]
 800d7d2:	2385      	movs	r3, #133	@ 0x85
 800d7d4:	009b      	lsls	r3, r3, #2
 800d7d6:	58d3      	ldr	r3, [r2, r3]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d001      	beq.n	800d7e0 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800d7dc:	2301      	movs	r3, #1
 800d7de:	e010      	b.n	800d802 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d7e0:	1cbb      	adds	r3, r7, #2
 800d7e2:	881a      	ldrh	r2, [r3, #0]
 800d7e4:	6879      	ldr	r1, [r7, #4]
 800d7e6:	4b09      	ldr	r3, [pc, #36]	@ (800d80c <CDC_Transmit_FS+0x5c>)
 800d7e8:	0018      	movs	r0, r3
 800d7ea:	f7fe fcbc 	bl	800c166 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d7ee:	250f      	movs	r5, #15
 800d7f0:	197c      	adds	r4, r7, r5
 800d7f2:	4b06      	ldr	r3, [pc, #24]	@ (800d80c <CDC_Transmit_FS+0x5c>)
 800d7f4:	0018      	movs	r0, r3
 800d7f6:	f7fe fce6 	bl	800c1c6 <USBD_CDC_TransmitPacket>
 800d7fa:	0003      	movs	r3, r0
 800d7fc:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800d7fe:	197b      	adds	r3, r7, r5
 800d800:	781b      	ldrb	r3, [r3, #0]
}
 800d802:	0018      	movs	r0, r3
 800d804:	46bd      	mov	sp, r7
 800d806:	b004      	add	sp, #16
 800d808:	bdb0      	pop	{r4, r5, r7, pc}
 800d80a:	46c0      	nop			@ (mov r8, r8)
 800d80c:	20000a80 	.word	0x20000a80

0800d810 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	0002      	movs	r2, r0
 800d818:	6039      	str	r1, [r7, #0]
 800d81a:	1dfb      	adds	r3, r7, #7
 800d81c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	2212      	movs	r2, #18
 800d822:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d824:	4b02      	ldr	r3, [pc, #8]	@ (800d830 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d826:	0018      	movs	r0, r3
 800d828:	46bd      	mov	sp, r7
 800d82a:	b002      	add	sp, #8
 800d82c:	bd80      	pop	{r7, pc}
 800d82e:	46c0      	nop			@ (mov r8, r8)
 800d830:	200001a4 	.word	0x200001a4

0800d834 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b082      	sub	sp, #8
 800d838:	af00      	add	r7, sp, #0
 800d83a:	0002      	movs	r2, r0
 800d83c:	6039      	str	r1, [r7, #0]
 800d83e:	1dfb      	adds	r3, r7, #7
 800d840:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	2204      	movs	r2, #4
 800d846:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d848:	4b02      	ldr	r3, [pc, #8]	@ (800d854 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d84a:	0018      	movs	r0, r3
 800d84c:	46bd      	mov	sp, r7
 800d84e:	b002      	add	sp, #8
 800d850:	bd80      	pop	{r7, pc}
 800d852:	46c0      	nop			@ (mov r8, r8)
 800d854:	200001b8 	.word	0x200001b8

0800d858 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	0002      	movs	r2, r0
 800d860:	6039      	str	r1, [r7, #0]
 800d862:	1dfb      	adds	r3, r7, #7
 800d864:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800d866:	1dfb      	adds	r3, r7, #7
 800d868:	781b      	ldrb	r3, [r3, #0]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d106      	bne.n	800d87c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d86e:	683a      	ldr	r2, [r7, #0]
 800d870:	4908      	ldr	r1, [pc, #32]	@ (800d894 <USBD_FS_ProductStrDescriptor+0x3c>)
 800d872:	4b09      	ldr	r3, [pc, #36]	@ (800d898 <USBD_FS_ProductStrDescriptor+0x40>)
 800d874:	0018      	movs	r0, r3
 800d876:	f7ff fe19 	bl	800d4ac <USBD_GetString>
 800d87a:	e005      	b.n	800d888 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d87c:	683a      	ldr	r2, [r7, #0]
 800d87e:	4905      	ldr	r1, [pc, #20]	@ (800d894 <USBD_FS_ProductStrDescriptor+0x3c>)
 800d880:	4b05      	ldr	r3, [pc, #20]	@ (800d898 <USBD_FS_ProductStrDescriptor+0x40>)
 800d882:	0018      	movs	r0, r3
 800d884:	f7ff fe12 	bl	800d4ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800d888:	4b02      	ldr	r3, [pc, #8]	@ (800d894 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800d88a:	0018      	movs	r0, r3
 800d88c:	46bd      	mov	sp, r7
 800d88e:	b002      	add	sp, #8
 800d890:	bd80      	pop	{r7, pc}
 800d892:	46c0      	nop			@ (mov r8, r8)
 800d894:	20001544 	.word	0x20001544
 800d898:	08012474 	.word	0x08012474

0800d89c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b082      	sub	sp, #8
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	0002      	movs	r2, r0
 800d8a4:	6039      	str	r1, [r7, #0]
 800d8a6:	1dfb      	adds	r3, r7, #7
 800d8a8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d8aa:	683a      	ldr	r2, [r7, #0]
 800d8ac:	4904      	ldr	r1, [pc, #16]	@ (800d8c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d8ae:	4b05      	ldr	r3, [pc, #20]	@ (800d8c4 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800d8b0:	0018      	movs	r0, r3
 800d8b2:	f7ff fdfb 	bl	800d4ac <USBD_GetString>
  return USBD_StrDesc;
 800d8b6:	4b02      	ldr	r3, [pc, #8]	@ (800d8c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800d8b8:	0018      	movs	r0, r3
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	b002      	add	sp, #8
 800d8be:	bd80      	pop	{r7, pc}
 800d8c0:	20001544 	.word	0x20001544
 800d8c4:	0801248c 	.word	0x0801248c

0800d8c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b082      	sub	sp, #8
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	0002      	movs	r2, r0
 800d8d0:	6039      	str	r1, [r7, #0]
 800d8d2:	1dfb      	adds	r3, r7, #7
 800d8d4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	221a      	movs	r2, #26
 800d8da:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d8dc:	f000 f84c 	bl	800d978 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d8e0:	4b02      	ldr	r3, [pc, #8]	@ (800d8ec <USBD_FS_SerialStrDescriptor+0x24>)
}
 800d8e2:	0018      	movs	r0, r3
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	b002      	add	sp, #8
 800d8e8:	bd80      	pop	{r7, pc}
 800d8ea:	46c0      	nop			@ (mov r8, r8)
 800d8ec:	200001bc 	.word	0x200001bc

0800d8f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	0002      	movs	r2, r0
 800d8f8:	6039      	str	r1, [r7, #0]
 800d8fa:	1dfb      	adds	r3, r7, #7
 800d8fc:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800d8fe:	1dfb      	adds	r3, r7, #7
 800d900:	781b      	ldrb	r3, [r3, #0]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d106      	bne.n	800d914 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d906:	683a      	ldr	r2, [r7, #0]
 800d908:	4908      	ldr	r1, [pc, #32]	@ (800d92c <USBD_FS_ConfigStrDescriptor+0x3c>)
 800d90a:	4b09      	ldr	r3, [pc, #36]	@ (800d930 <USBD_FS_ConfigStrDescriptor+0x40>)
 800d90c:	0018      	movs	r0, r3
 800d90e:	f7ff fdcd 	bl	800d4ac <USBD_GetString>
 800d912:	e005      	b.n	800d920 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d914:	683a      	ldr	r2, [r7, #0]
 800d916:	4905      	ldr	r1, [pc, #20]	@ (800d92c <USBD_FS_ConfigStrDescriptor+0x3c>)
 800d918:	4b05      	ldr	r3, [pc, #20]	@ (800d930 <USBD_FS_ConfigStrDescriptor+0x40>)
 800d91a:	0018      	movs	r0, r3
 800d91c:	f7ff fdc6 	bl	800d4ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800d920:	4b02      	ldr	r3, [pc, #8]	@ (800d92c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800d922:	0018      	movs	r0, r3
 800d924:	46bd      	mov	sp, r7
 800d926:	b002      	add	sp, #8
 800d928:	bd80      	pop	{r7, pc}
 800d92a:	46c0      	nop			@ (mov r8, r8)
 800d92c:	20001544 	.word	0x20001544
 800d930:	080124a0 	.word	0x080124a0

0800d934 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b082      	sub	sp, #8
 800d938:	af00      	add	r7, sp, #0
 800d93a:	0002      	movs	r2, r0
 800d93c:	6039      	str	r1, [r7, #0]
 800d93e:	1dfb      	adds	r3, r7, #7
 800d940:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800d942:	1dfb      	adds	r3, r7, #7
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d106      	bne.n	800d958 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d94a:	683a      	ldr	r2, [r7, #0]
 800d94c:	4908      	ldr	r1, [pc, #32]	@ (800d970 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800d94e:	4b09      	ldr	r3, [pc, #36]	@ (800d974 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800d950:	0018      	movs	r0, r3
 800d952:	f7ff fdab 	bl	800d4ac <USBD_GetString>
 800d956:	e005      	b.n	800d964 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d958:	683a      	ldr	r2, [r7, #0]
 800d95a:	4905      	ldr	r1, [pc, #20]	@ (800d970 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800d95c:	4b05      	ldr	r3, [pc, #20]	@ (800d974 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800d95e:	0018      	movs	r0, r3
 800d960:	f7ff fda4 	bl	800d4ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800d964:	4b02      	ldr	r3, [pc, #8]	@ (800d970 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800d966:	0018      	movs	r0, r3
 800d968:	46bd      	mov	sp, r7
 800d96a:	b002      	add	sp, #8
 800d96c:	bd80      	pop	{r7, pc}
 800d96e:	46c0      	nop			@ (mov r8, r8)
 800d970:	20001544 	.word	0x20001544
 800d974:	080124ac 	.word	0x080124ac

0800d978 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b084      	sub	sp, #16
 800d97c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d97e:	4b10      	ldr	r3, [pc, #64]	@ (800d9c0 <Get_SerialNum+0x48>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d984:	4b0f      	ldr	r3, [pc, #60]	@ (800d9c4 <Get_SerialNum+0x4c>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d98a:	4b0f      	ldr	r3, [pc, #60]	@ (800d9c8 <Get_SerialNum+0x50>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d990:	68fa      	ldr	r2, [r7, #12]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	18d3      	adds	r3, r2, r3
 800d996:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d00b      	beq.n	800d9b6 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d99e:	490b      	ldr	r1, [pc, #44]	@ (800d9cc <Get_SerialNum+0x54>)
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2208      	movs	r2, #8
 800d9a4:	0018      	movs	r0, r3
 800d9a6:	f000 f815 	bl	800d9d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d9aa:	4909      	ldr	r1, [pc, #36]	@ (800d9d0 <Get_SerialNum+0x58>)
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	2204      	movs	r2, #4
 800d9b0:	0018      	movs	r0, r3
 800d9b2:	f000 f80f 	bl	800d9d4 <IntToUnicode>
  }
}
 800d9b6:	46c0      	nop			@ (mov r8, r8)
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	b004      	add	sp, #16
 800d9bc:	bd80      	pop	{r7, pc}
 800d9be:	46c0      	nop			@ (mov r8, r8)
 800d9c0:	1ffff7ac 	.word	0x1ffff7ac
 800d9c4:	1ffff7b0 	.word	0x1ffff7b0
 800d9c8:	1ffff7b4 	.word	0x1ffff7b4
 800d9cc:	200001be 	.word	0x200001be
 800d9d0:	200001ce 	.word	0x200001ce

0800d9d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b086      	sub	sp, #24
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	60f8      	str	r0, [r7, #12]
 800d9dc:	60b9      	str	r1, [r7, #8]
 800d9de:	1dfb      	adds	r3, r7, #7
 800d9e0:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800d9e2:	2117      	movs	r1, #23
 800d9e4:	187b      	adds	r3, r7, r1
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800d9ea:	187b      	adds	r3, r7, r1
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	701a      	strb	r2, [r3, #0]
 800d9f0:	e02f      	b.n	800da52 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	0f1b      	lsrs	r3, r3, #28
 800d9f6:	2b09      	cmp	r3, #9
 800d9f8:	d80d      	bhi.n	800da16 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	0f1b      	lsrs	r3, r3, #28
 800d9fe:	b2da      	uxtb	r2, r3
 800da00:	2317      	movs	r3, #23
 800da02:	18fb      	adds	r3, r7, r3
 800da04:	781b      	ldrb	r3, [r3, #0]
 800da06:	005b      	lsls	r3, r3, #1
 800da08:	0019      	movs	r1, r3
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	185b      	adds	r3, r3, r1
 800da0e:	3230      	adds	r2, #48	@ 0x30
 800da10:	b2d2      	uxtb	r2, r2
 800da12:	701a      	strb	r2, [r3, #0]
 800da14:	e00c      	b.n	800da30 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	0f1b      	lsrs	r3, r3, #28
 800da1a:	b2da      	uxtb	r2, r3
 800da1c:	2317      	movs	r3, #23
 800da1e:	18fb      	adds	r3, r7, r3
 800da20:	781b      	ldrb	r3, [r3, #0]
 800da22:	005b      	lsls	r3, r3, #1
 800da24:	0019      	movs	r1, r3
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	185b      	adds	r3, r3, r1
 800da2a:	3237      	adds	r2, #55	@ 0x37
 800da2c:	b2d2      	uxtb	r2, r2
 800da2e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	011b      	lsls	r3, r3, #4
 800da34:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800da36:	2117      	movs	r1, #23
 800da38:	187b      	adds	r3, r7, r1
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	005b      	lsls	r3, r3, #1
 800da3e:	3301      	adds	r3, #1
 800da40:	68ba      	ldr	r2, [r7, #8]
 800da42:	18d3      	adds	r3, r2, r3
 800da44:	2200      	movs	r2, #0
 800da46:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800da48:	187b      	adds	r3, r7, r1
 800da4a:	781a      	ldrb	r2, [r3, #0]
 800da4c:	187b      	adds	r3, r7, r1
 800da4e:	3201      	adds	r2, #1
 800da50:	701a      	strb	r2, [r3, #0]
 800da52:	2317      	movs	r3, #23
 800da54:	18fa      	adds	r2, r7, r3
 800da56:	1dfb      	adds	r3, r7, #7
 800da58:	7812      	ldrb	r2, [r2, #0]
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d3c8      	bcc.n	800d9f2 <IntToUnicode+0x1e>
  }
}
 800da60:	46c0      	nop			@ (mov r8, r8)
 800da62:	46c0      	nop			@ (mov r8, r8)
 800da64:	46bd      	mov	sp, r7
 800da66:	b006      	add	sp, #24
 800da68:	bd80      	pop	{r7, pc}
	...

0800da6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b084      	sub	sp, #16
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4a0e      	ldr	r2, [pc, #56]	@ (800dab4 <HAL_PCD_MspInit+0x48>)
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d115      	bne.n	800daaa <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800da7e:	4b0e      	ldr	r3, [pc, #56]	@ (800dab8 <HAL_PCD_MspInit+0x4c>)
 800da80:	69da      	ldr	r2, [r3, #28]
 800da82:	4b0d      	ldr	r3, [pc, #52]	@ (800dab8 <HAL_PCD_MspInit+0x4c>)
 800da84:	2180      	movs	r1, #128	@ 0x80
 800da86:	0409      	lsls	r1, r1, #16
 800da88:	430a      	orrs	r2, r1
 800da8a:	61da      	str	r2, [r3, #28]
 800da8c:	4b0a      	ldr	r3, [pc, #40]	@ (800dab8 <HAL_PCD_MspInit+0x4c>)
 800da8e:	69da      	ldr	r2, [r3, #28]
 800da90:	2380      	movs	r3, #128	@ 0x80
 800da92:	041b      	lsls	r3, r3, #16
 800da94:	4013      	ands	r3, r2
 800da96:	60fb      	str	r3, [r7, #12]
 800da98:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800da9a:	2200      	movs	r2, #0
 800da9c:	2100      	movs	r1, #0
 800da9e:	201f      	movs	r0, #31
 800daa0:	f7f6 f97e 	bl	8003da0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800daa4:	201f      	movs	r0, #31
 800daa6:	f7f6 f990 	bl	8003dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800daaa:	46c0      	nop			@ (mov r8, r8)
 800daac:	46bd      	mov	sp, r7
 800daae:	b004      	add	sp, #16
 800dab0:	bd80      	pop	{r7, pc}
 800dab2:	46c0      	nop			@ (mov r8, r8)
 800dab4:	40005c00 	.word	0x40005c00
 800dab8:	40021000 	.word	0x40021000

0800dabc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b082      	sub	sp, #8
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dac4:	687a      	ldr	r2, [r7, #4]
 800dac6:	23b6      	movs	r3, #182	@ 0xb6
 800dac8:	009b      	lsls	r3, r3, #2
 800daca:	58d2      	ldr	r2, [r2, r3]
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	21a6      	movs	r1, #166	@ 0xa6
 800dad0:	0089      	lsls	r1, r1, #2
 800dad2:	468c      	mov	ip, r1
 800dad4:	4463      	add	r3, ip
 800dad6:	0019      	movs	r1, r3
 800dad8:	0010      	movs	r0, r2
 800dada:	f7fe fc7d 	bl	800c3d8 <USBD_LL_SetupStage>
}
 800dade:	46c0      	nop			@ (mov r8, r8)
 800dae0:	46bd      	mov	sp, r7
 800dae2:	b002      	add	sp, #8
 800dae4:	bd80      	pop	{r7, pc}

0800dae6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dae6:	b590      	push	{r4, r7, lr}
 800dae8:	b083      	sub	sp, #12
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
 800daee:	000a      	movs	r2, r1
 800daf0:	1cfb      	adds	r3, r7, #3
 800daf2:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800daf4:	687a      	ldr	r2, [r7, #4]
 800daf6:	23b6      	movs	r3, #182	@ 0xb6
 800daf8:	009b      	lsls	r3, r3, #2
 800dafa:	58d4      	ldr	r4, [r2, r3]
 800dafc:	1cfb      	adds	r3, r7, #3
 800dafe:	781a      	ldrb	r2, [r3, #0]
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	23b2      	movs	r3, #178	@ 0xb2
 800db04:	0059      	lsls	r1, r3, #1
 800db06:	0013      	movs	r3, r2
 800db08:	009b      	lsls	r3, r3, #2
 800db0a:	189b      	adds	r3, r3, r2
 800db0c:	00db      	lsls	r3, r3, #3
 800db0e:	18c3      	adds	r3, r0, r3
 800db10:	185b      	adds	r3, r3, r1
 800db12:	681a      	ldr	r2, [r3, #0]
 800db14:	1cfb      	adds	r3, r7, #3
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	0019      	movs	r1, r3
 800db1a:	0020      	movs	r0, r4
 800db1c:	f7fe fcba 	bl	800c494 <USBD_LL_DataOutStage>
}
 800db20:	46c0      	nop			@ (mov r8, r8)
 800db22:	46bd      	mov	sp, r7
 800db24:	b003      	add	sp, #12
 800db26:	bd90      	pop	{r4, r7, pc}

0800db28 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	000a      	movs	r2, r1
 800db32:	1cfb      	adds	r3, r7, #3
 800db34:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800db36:	687a      	ldr	r2, [r7, #4]
 800db38:	23b6      	movs	r3, #182	@ 0xb6
 800db3a:	009b      	lsls	r3, r3, #2
 800db3c:	58d0      	ldr	r0, [r2, r3]
 800db3e:	1cfb      	adds	r3, r7, #3
 800db40:	781a      	ldrb	r2, [r3, #0]
 800db42:	6879      	ldr	r1, [r7, #4]
 800db44:	0013      	movs	r3, r2
 800db46:	009b      	lsls	r3, r3, #2
 800db48:	189b      	adds	r3, r3, r2
 800db4a:	00db      	lsls	r3, r3, #3
 800db4c:	18cb      	adds	r3, r1, r3
 800db4e:	3324      	adds	r3, #36	@ 0x24
 800db50:	681a      	ldr	r2, [r3, #0]
 800db52:	1cfb      	adds	r3, r7, #3
 800db54:	781b      	ldrb	r3, [r3, #0]
 800db56:	0019      	movs	r1, r3
 800db58:	f7fe fd1e 	bl	800c598 <USBD_LL_DataInStage>
}
 800db5c:	46c0      	nop			@ (mov r8, r8)
 800db5e:	46bd      	mov	sp, r7
 800db60:	b002      	add	sp, #8
 800db62:	bd80      	pop	{r7, pc}

0800db64 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b082      	sub	sp, #8
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800db6c:	687a      	ldr	r2, [r7, #4]
 800db6e:	23b6      	movs	r3, #182	@ 0xb6
 800db70:	009b      	lsls	r3, r3, #2
 800db72:	58d3      	ldr	r3, [r2, r3]
 800db74:	0018      	movs	r0, r3
 800db76:	f7fe fe55 	bl	800c824 <USBD_LL_SOF>
}
 800db7a:	46c0      	nop			@ (mov r8, r8)
 800db7c:	46bd      	mov	sp, r7
 800db7e:	b002      	add	sp, #8
 800db80:	bd80      	pop	{r7, pc}

0800db82 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db82:	b580      	push	{r7, lr}
 800db84:	b084      	sub	sp, #16
 800db86:	af00      	add	r7, sp, #0
 800db88:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800db8a:	230f      	movs	r3, #15
 800db8c:	18fb      	adds	r3, r7, r3
 800db8e:	2201      	movs	r2, #1
 800db90:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	795b      	ldrb	r3, [r3, #5]
 800db96:	2b02      	cmp	r3, #2
 800db98:	d001      	beq.n	800db9e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800db9a:	f7f5 fa51 	bl	8003040 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800db9e:	687a      	ldr	r2, [r7, #4]
 800dba0:	23b6      	movs	r3, #182	@ 0xb6
 800dba2:	009b      	lsls	r3, r3, #2
 800dba4:	58d2      	ldr	r2, [r2, r3]
 800dba6:	230f      	movs	r3, #15
 800dba8:	18fb      	adds	r3, r7, r3
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	0019      	movs	r1, r3
 800dbae:	0010      	movs	r0, r2
 800dbb0:	f7fe fdf7 	bl	800c7a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dbb4:	687a      	ldr	r2, [r7, #4]
 800dbb6:	23b6      	movs	r3, #182	@ 0xb6
 800dbb8:	009b      	lsls	r3, r3, #2
 800dbba:	58d3      	ldr	r3, [r2, r3]
 800dbbc:	0018      	movs	r0, r3
 800dbbe:	f7fe fda8 	bl	800c712 <USBD_LL_Reset>
}
 800dbc2:	46c0      	nop			@ (mov r8, r8)
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	b004      	add	sp, #16
 800dbc8:	bd80      	pop	{r7, pc}
	...

0800dbcc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dbd4:	687a      	ldr	r2, [r7, #4]
 800dbd6:	23b6      	movs	r3, #182	@ 0xb6
 800dbd8:	009b      	lsls	r3, r3, #2
 800dbda:	58d3      	ldr	r3, [r2, r3]
 800dbdc:	0018      	movs	r0, r3
 800dbde:	f7fe fdf1 	bl	800c7c4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	7a5b      	ldrb	r3, [r3, #9]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d005      	beq.n	800dbf6 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dbea:	4b05      	ldr	r3, [pc, #20]	@ (800dc00 <HAL_PCD_SuspendCallback+0x34>)
 800dbec:	691a      	ldr	r2, [r3, #16]
 800dbee:	4b04      	ldr	r3, [pc, #16]	@ (800dc00 <HAL_PCD_SuspendCallback+0x34>)
 800dbf0:	2106      	movs	r1, #6
 800dbf2:	430a      	orrs	r2, r1
 800dbf4:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800dbf6:	46c0      	nop			@ (mov r8, r8)
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	b002      	add	sp, #8
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	46c0      	nop			@ (mov r8, r8)
 800dc00:	e000ed00 	.word	0xe000ed00

0800dc04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b082      	sub	sp, #8
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	7a5b      	ldrb	r3, [r3, #9]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d007      	beq.n	800dc24 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dc14:	4b09      	ldr	r3, [pc, #36]	@ (800dc3c <HAL_PCD_ResumeCallback+0x38>)
 800dc16:	691a      	ldr	r2, [r3, #16]
 800dc18:	4b08      	ldr	r3, [pc, #32]	@ (800dc3c <HAL_PCD_ResumeCallback+0x38>)
 800dc1a:	2106      	movs	r1, #6
 800dc1c:	438a      	bics	r2, r1
 800dc1e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800dc20:	f000 fa42 	bl	800e0a8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dc24:	687a      	ldr	r2, [r7, #4]
 800dc26:	23b6      	movs	r3, #182	@ 0xb6
 800dc28:	009b      	lsls	r3, r3, #2
 800dc2a:	58d3      	ldr	r3, [r2, r3]
 800dc2c:	0018      	movs	r0, r3
 800dc2e:	f7fe fde1 	bl	800c7f4 <USBD_LL_Resume>
}
 800dc32:	46c0      	nop			@ (mov r8, r8)
 800dc34:	46bd      	mov	sp, r7
 800dc36:	b002      	add	sp, #8
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	46c0      	nop			@ (mov r8, r8)
 800dc3c:	e000ed00 	.word	0xe000ed00

0800dc40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b082      	sub	sp, #8
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800dc48:	4a2d      	ldr	r2, [pc, #180]	@ (800dd00 <USBD_LL_Init+0xc0>)
 800dc4a:	23b6      	movs	r3, #182	@ 0xb6
 800dc4c:	009b      	lsls	r3, r3, #2
 800dc4e:	6879      	ldr	r1, [r7, #4]
 800dc50:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800dc52:	687a      	ldr	r2, [r7, #4]
 800dc54:	23b0      	movs	r3, #176	@ 0xb0
 800dc56:	009b      	lsls	r3, r3, #2
 800dc58:	4929      	ldr	r1, [pc, #164]	@ (800dd00 <USBD_LL_Init+0xc0>)
 800dc5a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800dc5c:	4b28      	ldr	r3, [pc, #160]	@ (800dd00 <USBD_LL_Init+0xc0>)
 800dc5e:	4a29      	ldr	r2, [pc, #164]	@ (800dd04 <USBD_LL_Init+0xc4>)
 800dc60:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800dc62:	4b27      	ldr	r3, [pc, #156]	@ (800dd00 <USBD_LL_Init+0xc0>)
 800dc64:	2208      	movs	r2, #8
 800dc66:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800dc68:	4b25      	ldr	r3, [pc, #148]	@ (800dd00 <USBD_LL_Init+0xc0>)
 800dc6a:	2202      	movs	r2, #2
 800dc6c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dc6e:	4b24      	ldr	r3, [pc, #144]	@ (800dd00 <USBD_LL_Init+0xc0>)
 800dc70:	2202      	movs	r2, #2
 800dc72:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800dc74:	4b22      	ldr	r3, [pc, #136]	@ (800dd00 <USBD_LL_Init+0xc0>)
 800dc76:	2200      	movs	r2, #0
 800dc78:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800dc7a:	4b21      	ldr	r3, [pc, #132]	@ (800dd00 <USBD_LL_Init+0xc0>)
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800dc80:	4b1f      	ldr	r3, [pc, #124]	@ (800dd00 <USBD_LL_Init+0xc0>)
 800dc82:	2200      	movs	r2, #0
 800dc84:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800dc86:	4b1e      	ldr	r3, [pc, #120]	@ (800dd00 <USBD_LL_Init+0xc0>)
 800dc88:	0018      	movs	r0, r3
 800dc8a:	f7f6 fcaf 	bl	80045ec <HAL_PCD_Init>
 800dc8e:	1e03      	subs	r3, r0, #0
 800dc90:	d001      	beq.n	800dc96 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800dc92:	f7f5 f9d5 	bl	8003040 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800dc96:	687a      	ldr	r2, [r7, #4]
 800dc98:	23b0      	movs	r3, #176	@ 0xb0
 800dc9a:	009b      	lsls	r3, r3, #2
 800dc9c:	58d0      	ldr	r0, [r2, r3]
 800dc9e:	2318      	movs	r3, #24
 800dca0:	2200      	movs	r2, #0
 800dca2:	2100      	movs	r1, #0
 800dca4:	f7f8 fa60 	bl	8006168 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800dca8:	687a      	ldr	r2, [r7, #4]
 800dcaa:	23b0      	movs	r3, #176	@ 0xb0
 800dcac:	009b      	lsls	r3, r3, #2
 800dcae:	58d0      	ldr	r0, [r2, r3]
 800dcb0:	2358      	movs	r3, #88	@ 0x58
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	2180      	movs	r1, #128	@ 0x80
 800dcb6:	f7f8 fa57 	bl	8006168 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800dcba:	687a      	ldr	r2, [r7, #4]
 800dcbc:	23b0      	movs	r3, #176	@ 0xb0
 800dcbe:	009b      	lsls	r3, r3, #2
 800dcc0:	58d0      	ldr	r0, [r2, r3]
 800dcc2:	23c0      	movs	r3, #192	@ 0xc0
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	2181      	movs	r1, #129	@ 0x81
 800dcc8:	f7f8 fa4e 	bl	8006168 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800dccc:	687a      	ldr	r2, [r7, #4]
 800dcce:	23b0      	movs	r3, #176	@ 0xb0
 800dcd0:	009b      	lsls	r3, r3, #2
 800dcd2:	58d0      	ldr	r0, [r2, r3]
 800dcd4:	2388      	movs	r3, #136	@ 0x88
 800dcd6:	005b      	lsls	r3, r3, #1
 800dcd8:	2200      	movs	r2, #0
 800dcda:	2101      	movs	r1, #1
 800dcdc:	f7f8 fa44 	bl	8006168 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800dce0:	687a      	ldr	r2, [r7, #4]
 800dce2:	23b0      	movs	r3, #176	@ 0xb0
 800dce4:	009b      	lsls	r3, r3, #2
 800dce6:	58d0      	ldr	r0, [r2, r3]
 800dce8:	2380      	movs	r3, #128	@ 0x80
 800dcea:	005b      	lsls	r3, r3, #1
 800dcec:	2200      	movs	r2, #0
 800dcee:	2182      	movs	r1, #130	@ 0x82
 800dcf0:	f7f8 fa3a 	bl	8006168 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800dcf4:	2300      	movs	r3, #0
}
 800dcf6:	0018      	movs	r0, r3
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	b002      	add	sp, #8
 800dcfc:	bd80      	pop	{r7, pc}
 800dcfe:	46c0      	nop			@ (mov r8, r8)
 800dd00:	20001744 	.word	0x20001744
 800dd04:	40005c00 	.word	0x40005c00

0800dd08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dd08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd0a:	b085      	sub	sp, #20
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd10:	210f      	movs	r1, #15
 800dd12:	187b      	adds	r3, r7, r1
 800dd14:	2200      	movs	r2, #0
 800dd16:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd18:	260e      	movs	r6, #14
 800dd1a:	19bb      	adds	r3, r7, r6
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dd20:	687a      	ldr	r2, [r7, #4]
 800dd22:	23b0      	movs	r3, #176	@ 0xb0
 800dd24:	009b      	lsls	r3, r3, #2
 800dd26:	58d3      	ldr	r3, [r2, r3]
 800dd28:	000d      	movs	r5, r1
 800dd2a:	187c      	adds	r4, r7, r1
 800dd2c:	0018      	movs	r0, r3
 800dd2e:	f7f6 fd51 	bl	80047d4 <HAL_PCD_Start>
 800dd32:	0003      	movs	r3, r0
 800dd34:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd36:	19bc      	adds	r4, r7, r6
 800dd38:	197b      	adds	r3, r7, r5
 800dd3a:	781b      	ldrb	r3, [r3, #0]
 800dd3c:	0018      	movs	r0, r3
 800dd3e:	f000 f9ba 	bl	800e0b6 <USBD_Get_USB_Status>
 800dd42:	0003      	movs	r3, r0
 800dd44:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800dd46:	19bb      	adds	r3, r7, r6
 800dd48:	781b      	ldrb	r3, [r3, #0]
}
 800dd4a:	0018      	movs	r0, r3
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	b005      	add	sp, #20
 800dd50:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dd52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dd52:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd54:	b085      	sub	sp, #20
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	6078      	str	r0, [r7, #4]
 800dd5a:	000c      	movs	r4, r1
 800dd5c:	0010      	movs	r0, r2
 800dd5e:	0019      	movs	r1, r3
 800dd60:	1cfb      	adds	r3, r7, #3
 800dd62:	1c22      	adds	r2, r4, #0
 800dd64:	701a      	strb	r2, [r3, #0]
 800dd66:	1cbb      	adds	r3, r7, #2
 800dd68:	1c02      	adds	r2, r0, #0
 800dd6a:	701a      	strb	r2, [r3, #0]
 800dd6c:	003b      	movs	r3, r7
 800dd6e:	1c0a      	adds	r2, r1, #0
 800dd70:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd72:	260f      	movs	r6, #15
 800dd74:	19bb      	adds	r3, r7, r6
 800dd76:	2200      	movs	r2, #0
 800dd78:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd7a:	250e      	movs	r5, #14
 800dd7c:	197b      	adds	r3, r7, r5
 800dd7e:	2200      	movs	r2, #0
 800dd80:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dd82:	687a      	ldr	r2, [r7, #4]
 800dd84:	23b0      	movs	r3, #176	@ 0xb0
 800dd86:	009b      	lsls	r3, r3, #2
 800dd88:	58d0      	ldr	r0, [r2, r3]
 800dd8a:	19bc      	adds	r4, r7, r6
 800dd8c:	1cbb      	adds	r3, r7, #2
 800dd8e:	781d      	ldrb	r5, [r3, #0]
 800dd90:	003b      	movs	r3, r7
 800dd92:	881a      	ldrh	r2, [r3, #0]
 800dd94:	1cfb      	adds	r3, r7, #3
 800dd96:	7819      	ldrb	r1, [r3, #0]
 800dd98:	002b      	movs	r3, r5
 800dd9a:	f7f6 feaf 	bl	8004afc <HAL_PCD_EP_Open>
 800dd9e:	0003      	movs	r3, r0
 800dda0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dda2:	250e      	movs	r5, #14
 800dda4:	197c      	adds	r4, r7, r5
 800dda6:	19bb      	adds	r3, r7, r6
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	0018      	movs	r0, r3
 800ddac:	f000 f983 	bl	800e0b6 <USBD_Get_USB_Status>
 800ddb0:	0003      	movs	r3, r0
 800ddb2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ddb4:	197b      	adds	r3, r7, r5
 800ddb6:	781b      	ldrb	r3, [r3, #0]
}
 800ddb8:	0018      	movs	r0, r3
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	b005      	add	sp, #20
 800ddbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ddc0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ddc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddc2:	b085      	sub	sp, #20
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
 800ddc8:	000a      	movs	r2, r1
 800ddca:	1cfb      	adds	r3, r7, #3
 800ddcc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddce:	210f      	movs	r1, #15
 800ddd0:	187b      	adds	r3, r7, r1
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddd6:	260e      	movs	r6, #14
 800ddd8:	19bb      	adds	r3, r7, r6
 800ddda:	2200      	movs	r2, #0
 800dddc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ddde:	687a      	ldr	r2, [r7, #4]
 800dde0:	23b0      	movs	r3, #176	@ 0xb0
 800dde2:	009b      	lsls	r3, r3, #2
 800dde4:	58d2      	ldr	r2, [r2, r3]
 800dde6:	000d      	movs	r5, r1
 800dde8:	187c      	adds	r4, r7, r1
 800ddea:	1cfb      	adds	r3, r7, #3
 800ddec:	781b      	ldrb	r3, [r3, #0]
 800ddee:	0019      	movs	r1, r3
 800ddf0:	0010      	movs	r0, r2
 800ddf2:	f7f6 fef2 	bl	8004bda <HAL_PCD_EP_Close>
 800ddf6:	0003      	movs	r3, r0
 800ddf8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddfa:	19bc      	adds	r4, r7, r6
 800ddfc:	197b      	adds	r3, r7, r5
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	0018      	movs	r0, r3
 800de02:	f000 f958 	bl	800e0b6 <USBD_Get_USB_Status>
 800de06:	0003      	movs	r3, r0
 800de08:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800de0a:	19bb      	adds	r3, r7, r6
 800de0c:	781b      	ldrb	r3, [r3, #0]
}
 800de0e:	0018      	movs	r0, r3
 800de10:	46bd      	mov	sp, r7
 800de12:	b005      	add	sp, #20
 800de14:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800de16 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de16:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de18:	b085      	sub	sp, #20
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	6078      	str	r0, [r7, #4]
 800de1e:	000a      	movs	r2, r1
 800de20:	1cfb      	adds	r3, r7, #3
 800de22:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de24:	210f      	movs	r1, #15
 800de26:	187b      	adds	r3, r7, r1
 800de28:	2200      	movs	r2, #0
 800de2a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de2c:	260e      	movs	r6, #14
 800de2e:	19bb      	adds	r3, r7, r6
 800de30:	2200      	movs	r2, #0
 800de32:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800de34:	687a      	ldr	r2, [r7, #4]
 800de36:	23b0      	movs	r3, #176	@ 0xb0
 800de38:	009b      	lsls	r3, r3, #2
 800de3a:	58d2      	ldr	r2, [r2, r3]
 800de3c:	000d      	movs	r5, r1
 800de3e:	187c      	adds	r4, r7, r1
 800de40:	1cfb      	adds	r3, r7, #3
 800de42:	781b      	ldrb	r3, [r3, #0]
 800de44:	0019      	movs	r1, r3
 800de46:	0010      	movs	r0, r2
 800de48:	f7f6 ffa4 	bl	8004d94 <HAL_PCD_EP_SetStall>
 800de4c:	0003      	movs	r3, r0
 800de4e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de50:	19bc      	adds	r4, r7, r6
 800de52:	197b      	adds	r3, r7, r5
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	0018      	movs	r0, r3
 800de58:	f000 f92d 	bl	800e0b6 <USBD_Get_USB_Status>
 800de5c:	0003      	movs	r3, r0
 800de5e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800de60:	19bb      	adds	r3, r7, r6
 800de62:	781b      	ldrb	r3, [r3, #0]
}
 800de64:	0018      	movs	r0, r3
 800de66:	46bd      	mov	sp, r7
 800de68:	b005      	add	sp, #20
 800de6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800de6c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de6e:	b085      	sub	sp, #20
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
 800de74:	000a      	movs	r2, r1
 800de76:	1cfb      	adds	r3, r7, #3
 800de78:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de7a:	210f      	movs	r1, #15
 800de7c:	187b      	adds	r3, r7, r1
 800de7e:	2200      	movs	r2, #0
 800de80:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de82:	260e      	movs	r6, #14
 800de84:	19bb      	adds	r3, r7, r6
 800de86:	2200      	movs	r2, #0
 800de88:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800de8a:	687a      	ldr	r2, [r7, #4]
 800de8c:	23b0      	movs	r3, #176	@ 0xb0
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	58d2      	ldr	r2, [r2, r3]
 800de92:	000d      	movs	r5, r1
 800de94:	187c      	adds	r4, r7, r1
 800de96:	1cfb      	adds	r3, r7, #3
 800de98:	781b      	ldrb	r3, [r3, #0]
 800de9a:	0019      	movs	r1, r3
 800de9c:	0010      	movs	r0, r2
 800de9e:	f7f6 ffd5 	bl	8004e4c <HAL_PCD_EP_ClrStall>
 800dea2:	0003      	movs	r3, r0
 800dea4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dea6:	19bc      	adds	r4, r7, r6
 800dea8:	197b      	adds	r3, r7, r5
 800deaa:	781b      	ldrb	r3, [r3, #0]
 800deac:	0018      	movs	r0, r3
 800deae:	f000 f902 	bl	800e0b6 <USBD_Get_USB_Status>
 800deb2:	0003      	movs	r3, r0
 800deb4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800deb6:	19bb      	adds	r3, r7, r6
 800deb8:	781b      	ldrb	r3, [r3, #0]
}
 800deba:	0018      	movs	r0, r3
 800debc:	46bd      	mov	sp, r7
 800debe:	b005      	add	sp, #20
 800dec0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dec2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dec2:	b580      	push	{r7, lr}
 800dec4:	b084      	sub	sp, #16
 800dec6:	af00      	add	r7, sp, #0
 800dec8:	6078      	str	r0, [r7, #4]
 800deca:	000a      	movs	r2, r1
 800decc:	1cfb      	adds	r3, r7, #3
 800dece:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ded0:	687a      	ldr	r2, [r7, #4]
 800ded2:	23b0      	movs	r3, #176	@ 0xb0
 800ded4:	009b      	lsls	r3, r3, #2
 800ded6:	58d3      	ldr	r3, [r2, r3]
 800ded8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800deda:	1cfb      	adds	r3, r7, #3
 800dedc:	781b      	ldrb	r3, [r3, #0]
 800dede:	b25b      	sxtb	r3, r3
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	da0c      	bge.n	800defe <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dee4:	1cfb      	adds	r3, r7, #3
 800dee6:	781b      	ldrb	r3, [r3, #0]
 800dee8:	227f      	movs	r2, #127	@ 0x7f
 800deea:	401a      	ands	r2, r3
 800deec:	68f9      	ldr	r1, [r7, #12]
 800deee:	0013      	movs	r3, r2
 800def0:	009b      	lsls	r3, r3, #2
 800def2:	189b      	adds	r3, r3, r2
 800def4:	00db      	lsls	r3, r3, #3
 800def6:	18cb      	adds	r3, r1, r3
 800def8:	3312      	adds	r3, #18
 800defa:	781b      	ldrb	r3, [r3, #0]
 800defc:	e00d      	b.n	800df1a <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800defe:	1cfb      	adds	r3, r7, #3
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	227f      	movs	r2, #127	@ 0x7f
 800df04:	401a      	ands	r2, r3
 800df06:	68f8      	ldr	r0, [r7, #12]
 800df08:	23a9      	movs	r3, #169	@ 0xa9
 800df0a:	0059      	lsls	r1, r3, #1
 800df0c:	0013      	movs	r3, r2
 800df0e:	009b      	lsls	r3, r3, #2
 800df10:	189b      	adds	r3, r3, r2
 800df12:	00db      	lsls	r3, r3, #3
 800df14:	18c3      	adds	r3, r0, r3
 800df16:	185b      	adds	r3, r3, r1
 800df18:	781b      	ldrb	r3, [r3, #0]
  }
}
 800df1a:	0018      	movs	r0, r3
 800df1c:	46bd      	mov	sp, r7
 800df1e:	b004      	add	sp, #16
 800df20:	bd80      	pop	{r7, pc}

0800df22 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800df22:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df24:	b085      	sub	sp, #20
 800df26:	af00      	add	r7, sp, #0
 800df28:	6078      	str	r0, [r7, #4]
 800df2a:	000a      	movs	r2, r1
 800df2c:	1cfb      	adds	r3, r7, #3
 800df2e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df30:	210f      	movs	r1, #15
 800df32:	187b      	adds	r3, r7, r1
 800df34:	2200      	movs	r2, #0
 800df36:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df38:	260e      	movs	r6, #14
 800df3a:	19bb      	adds	r3, r7, r6
 800df3c:	2200      	movs	r2, #0
 800df3e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800df40:	687a      	ldr	r2, [r7, #4]
 800df42:	23b0      	movs	r3, #176	@ 0xb0
 800df44:	009b      	lsls	r3, r3, #2
 800df46:	58d2      	ldr	r2, [r2, r3]
 800df48:	000d      	movs	r5, r1
 800df4a:	187c      	adds	r4, r7, r1
 800df4c:	1cfb      	adds	r3, r7, #3
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	0019      	movs	r1, r3
 800df52:	0010      	movs	r0, r2
 800df54:	f7f6 fda8 	bl	8004aa8 <HAL_PCD_SetAddress>
 800df58:	0003      	movs	r3, r0
 800df5a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df5c:	19bc      	adds	r4, r7, r6
 800df5e:	197b      	adds	r3, r7, r5
 800df60:	781b      	ldrb	r3, [r3, #0]
 800df62:	0018      	movs	r0, r3
 800df64:	f000 f8a7 	bl	800e0b6 <USBD_Get_USB_Status>
 800df68:	0003      	movs	r3, r0
 800df6a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800df6c:	19bb      	adds	r3, r7, r6
 800df6e:	781b      	ldrb	r3, [r3, #0]
}
 800df70:	0018      	movs	r0, r3
 800df72:	46bd      	mov	sp, r7
 800df74:	b005      	add	sp, #20
 800df76:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800df78 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800df78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df7a:	b087      	sub	sp, #28
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	60f8      	str	r0, [r7, #12]
 800df80:	0008      	movs	r0, r1
 800df82:	607a      	str	r2, [r7, #4]
 800df84:	0019      	movs	r1, r3
 800df86:	230b      	movs	r3, #11
 800df88:	18fb      	adds	r3, r7, r3
 800df8a:	1c02      	adds	r2, r0, #0
 800df8c:	701a      	strb	r2, [r3, #0]
 800df8e:	2408      	movs	r4, #8
 800df90:	193b      	adds	r3, r7, r4
 800df92:	1c0a      	adds	r2, r1, #0
 800df94:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df96:	2117      	movs	r1, #23
 800df98:	187b      	adds	r3, r7, r1
 800df9a:	2200      	movs	r2, #0
 800df9c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df9e:	2516      	movs	r5, #22
 800dfa0:	197b      	adds	r3, r7, r5
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dfa6:	68fa      	ldr	r2, [r7, #12]
 800dfa8:	23b0      	movs	r3, #176	@ 0xb0
 800dfaa:	009b      	lsls	r3, r3, #2
 800dfac:	58d0      	ldr	r0, [r2, r3]
 800dfae:	193b      	adds	r3, r7, r4
 800dfb0:	881d      	ldrh	r5, [r3, #0]
 800dfb2:	000e      	movs	r6, r1
 800dfb4:	187c      	adds	r4, r7, r1
 800dfb6:	687a      	ldr	r2, [r7, #4]
 800dfb8:	230b      	movs	r3, #11
 800dfba:	18fb      	adds	r3, r7, r3
 800dfbc:	7819      	ldrb	r1, [r3, #0]
 800dfbe:	002b      	movs	r3, r5
 800dfc0:	f7f6 feac 	bl	8004d1c <HAL_PCD_EP_Transmit>
 800dfc4:	0003      	movs	r3, r0
 800dfc6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfc8:	2516      	movs	r5, #22
 800dfca:	197c      	adds	r4, r7, r5
 800dfcc:	19bb      	adds	r3, r7, r6
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	0018      	movs	r0, r3
 800dfd2:	f000 f870 	bl	800e0b6 <USBD_Get_USB_Status>
 800dfd6:	0003      	movs	r3, r0
 800dfd8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800dfda:	197b      	adds	r3, r7, r5
 800dfdc:	781b      	ldrb	r3, [r3, #0]
}
 800dfde:	0018      	movs	r0, r3
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	b007      	add	sp, #28
 800dfe4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dfe6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dfe6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfe8:	b087      	sub	sp, #28
 800dfea:	af00      	add	r7, sp, #0
 800dfec:	60f8      	str	r0, [r7, #12]
 800dfee:	0008      	movs	r0, r1
 800dff0:	607a      	str	r2, [r7, #4]
 800dff2:	0019      	movs	r1, r3
 800dff4:	230b      	movs	r3, #11
 800dff6:	18fb      	adds	r3, r7, r3
 800dff8:	1c02      	adds	r2, r0, #0
 800dffa:	701a      	strb	r2, [r3, #0]
 800dffc:	2408      	movs	r4, #8
 800dffe:	193b      	adds	r3, r7, r4
 800e000:	1c0a      	adds	r2, r1, #0
 800e002:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e004:	2117      	movs	r1, #23
 800e006:	187b      	adds	r3, r7, r1
 800e008:	2200      	movs	r2, #0
 800e00a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e00c:	2516      	movs	r5, #22
 800e00e:	197b      	adds	r3, r7, r5
 800e010:	2200      	movs	r2, #0
 800e012:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e014:	68fa      	ldr	r2, [r7, #12]
 800e016:	23b0      	movs	r3, #176	@ 0xb0
 800e018:	009b      	lsls	r3, r3, #2
 800e01a:	58d0      	ldr	r0, [r2, r3]
 800e01c:	193b      	adds	r3, r7, r4
 800e01e:	881d      	ldrh	r5, [r3, #0]
 800e020:	000e      	movs	r6, r1
 800e022:	187c      	adds	r4, r7, r1
 800e024:	687a      	ldr	r2, [r7, #4]
 800e026:	230b      	movs	r3, #11
 800e028:	18fb      	adds	r3, r7, r3
 800e02a:	7819      	ldrb	r1, [r3, #0]
 800e02c:	002b      	movs	r3, r5
 800e02e:	f7f6 fe25 	bl	8004c7c <HAL_PCD_EP_Receive>
 800e032:	0003      	movs	r3, r0
 800e034:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e036:	2516      	movs	r5, #22
 800e038:	197c      	adds	r4, r7, r5
 800e03a:	19bb      	adds	r3, r7, r6
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	0018      	movs	r0, r3
 800e040:	f000 f839 	bl	800e0b6 <USBD_Get_USB_Status>
 800e044:	0003      	movs	r3, r0
 800e046:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800e048:	197b      	adds	r3, r7, r5
 800e04a:	781b      	ldrb	r3, [r3, #0]
}
 800e04c:	0018      	movs	r0, r3
 800e04e:	46bd      	mov	sp, r7
 800e050:	b007      	add	sp, #28
 800e052:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e054 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b082      	sub	sp, #8
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	000a      	movs	r2, r1
 800e05e:	1cfb      	adds	r3, r7, #3
 800e060:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e062:	687a      	ldr	r2, [r7, #4]
 800e064:	23b0      	movs	r3, #176	@ 0xb0
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	58d2      	ldr	r2, [r2, r3]
 800e06a:	1cfb      	adds	r3, r7, #3
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	0019      	movs	r1, r3
 800e070:	0010      	movs	r0, r2
 800e072:	f7f6 fe3a 	bl	8004cea <HAL_PCD_EP_GetRxCount>
 800e076:	0003      	movs	r3, r0
}
 800e078:	0018      	movs	r0, r3
 800e07a:	46bd      	mov	sp, r7
 800e07c:	b002      	add	sp, #8
 800e07e:	bd80      	pop	{r7, pc}

0800e080 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b082      	sub	sp, #8
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e088:	4b02      	ldr	r3, [pc, #8]	@ (800e094 <USBD_static_malloc+0x14>)
}
 800e08a:	0018      	movs	r0, r3
 800e08c:	46bd      	mov	sp, r7
 800e08e:	b002      	add	sp, #8
 800e090:	bd80      	pop	{r7, pc}
 800e092:	46c0      	nop			@ (mov r8, r8)
 800e094:	20001a20 	.word	0x20001a20

0800e098 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]

}
 800e0a0:	46c0      	nop			@ (mov r8, r8)
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	b002      	add	sp, #8
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e0ac:	f7f4 fca4 	bl	80029f8 <SystemClock_Config>
}
 800e0b0:	46c0      	nop			@ (mov r8, r8)
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}

0800e0b6 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e0b6:	b580      	push	{r7, lr}
 800e0b8:	b084      	sub	sp, #16
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	0002      	movs	r2, r0
 800e0be:	1dfb      	adds	r3, r7, #7
 800e0c0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0c2:	230f      	movs	r3, #15
 800e0c4:	18fb      	adds	r3, r7, r3
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800e0ca:	1dfb      	adds	r3, r7, #7
 800e0cc:	781b      	ldrb	r3, [r3, #0]
 800e0ce:	2b03      	cmp	r3, #3
 800e0d0:	d017      	beq.n	800e102 <USBD_Get_USB_Status+0x4c>
 800e0d2:	dc1b      	bgt.n	800e10c <USBD_Get_USB_Status+0x56>
 800e0d4:	2b02      	cmp	r3, #2
 800e0d6:	d00f      	beq.n	800e0f8 <USBD_Get_USB_Status+0x42>
 800e0d8:	dc18      	bgt.n	800e10c <USBD_Get_USB_Status+0x56>
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d002      	beq.n	800e0e4 <USBD_Get_USB_Status+0x2e>
 800e0de:	2b01      	cmp	r3, #1
 800e0e0:	d005      	beq.n	800e0ee <USBD_Get_USB_Status+0x38>
 800e0e2:	e013      	b.n	800e10c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e0e4:	230f      	movs	r3, #15
 800e0e6:	18fb      	adds	r3, r7, r3
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	701a      	strb	r2, [r3, #0]
    break;
 800e0ec:	e013      	b.n	800e116 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e0ee:	230f      	movs	r3, #15
 800e0f0:	18fb      	adds	r3, r7, r3
 800e0f2:	2202      	movs	r2, #2
 800e0f4:	701a      	strb	r2, [r3, #0]
    break;
 800e0f6:	e00e      	b.n	800e116 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e0f8:	230f      	movs	r3, #15
 800e0fa:	18fb      	adds	r3, r7, r3
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	701a      	strb	r2, [r3, #0]
    break;
 800e100:	e009      	b.n	800e116 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e102:	230f      	movs	r3, #15
 800e104:	18fb      	adds	r3, r7, r3
 800e106:	2202      	movs	r2, #2
 800e108:	701a      	strb	r2, [r3, #0]
    break;
 800e10a:	e004      	b.n	800e116 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800e10c:	230f      	movs	r3, #15
 800e10e:	18fb      	adds	r3, r7, r3
 800e110:	2202      	movs	r2, #2
 800e112:	701a      	strb	r2, [r3, #0]
    break;
 800e114:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800e116:	230f      	movs	r3, #15
 800e118:	18fb      	adds	r3, r7, r3
 800e11a:	781b      	ldrb	r3, [r3, #0]
}
 800e11c:	0018      	movs	r0, r3
 800e11e:	46bd      	mov	sp, r7
 800e120:	b004      	add	sp, #16
 800e122:	bd80      	pop	{r7, pc}

0800e124 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 800e124:	b5b0      	push	{r4, r5, r7, lr}
 800e126:	b086      	sub	sp, #24
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 800e12c:	2316      	movs	r3, #22
 800e12e:	18fb      	adds	r3, r7, r3
 800e130:	2200      	movs	r2, #0
 800e132:	801a      	strh	r2, [r3, #0]
    uint32 ldo_tune = 0;
 800e134:	2300      	movs	r3, #0
 800e136:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 800e138:	4ba0      	ldr	r3, [pc, #640]	@ (800e3bc <dwt_initialise+0x298>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	2200      	movs	r2, #0
 800e13e:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 800e140:	4b9e      	ldr	r3, [pc, #632]	@ (800e3bc <dwt_initialise+0x298>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	2200      	movs	r2, #0
 800e146:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 800e148:	4b9c      	ldr	r3, [pc, #624]	@ (800e3bc <dwt_initialise+0x298>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	2200      	movs	r2, #0
 800e14e:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 800e150:	4b9a      	ldr	r3, [pc, #616]	@ (800e3bc <dwt_initialise+0x298>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	2200      	movs	r2, #0
 800e156:	629a      	str	r2, [r3, #40]	@ 0x28
    pdw1000local->cbRxOk = NULL;
 800e158:	4b98      	ldr	r3, [pc, #608]	@ (800e3bc <dwt_initialise+0x298>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	2200      	movs	r2, #0
 800e15e:	62da      	str	r2, [r3, #44]	@ 0x2c
    pdw1000local->cbRxTo = NULL;
 800e160:	4b96      	ldr	r3, [pc, #600]	@ (800e3bc <dwt_initialise+0x298>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	2200      	movs	r2, #0
 800e166:	631a      	str	r2, [r3, #48]	@ 0x30
    pdw1000local->cbRxErr = NULL;
 800e168:	4b94      	ldr	r3, [pc, #592]	@ (800e3bc <dwt_initialise+0x298>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	2200      	movs	r2, #0
 800e16e:	635a      	str	r2, [r3, #52]	@ 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 800e170:	f000 f92c 	bl	800e3cc <dwt_readdevid>
 800e174:	0003      	movs	r3, r0
 800e176:	4a92      	ldr	r2, [pc, #584]	@ (800e3c0 <dwt_initialise+0x29c>)
 800e178:	4293      	cmp	r3, r2
 800e17a:	d002      	beq.n	800e182 <dwt_initialise+0x5e>
    {
        return DWT_ERROR ;
 800e17c:	2301      	movs	r3, #1
 800e17e:	425b      	negs	r3, r3
 800e180:	e118      	b.n	800e3b4 <dwt_initialise+0x290>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2202      	movs	r2, #2
 800e186:	4013      	ands	r3, r2
 800e188:	d101      	bne.n	800e18e <dwt_initialise+0x6a>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 800e18a:	f000 ffbb 	bl	800f104 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2202      	movs	r2, #2
 800e192:	4013      	ands	r3, r2
 800e194:	d003      	beq.n	800e19e <dwt_initialise+0x7a>
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	22f8      	movs	r2, #248	@ 0xf8
 800e19a:	4013      	ands	r3, r2
 800e19c:	d102      	bne.n	800e1a4 <dwt_initialise+0x80>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 800e19e:	2000      	movs	r0, #0
 800e1a0:	f000 fd9c 	bl	800ecdc <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 800e1a4:	2204      	movs	r2, #4
 800e1a6:	2100      	movs	r1, #0
 800e1a8:	2024      	movs	r0, #36	@ 0x24
 800e1aa:	f000 fc7f 	bl	800eaac <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2202      	movs	r2, #2
 800e1b2:	4013      	ands	r3, r2
 800e1b4:	d118      	bne.n	800e1e8 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 800e1b6:	2004      	movs	r0, #4
 800e1b8:	f000 fcd2 	bl	800eb60 <_dwt_otpread>
 800e1bc:	0003      	movs	r3, r0
 800e1be:	613b      	str	r3, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	22ff      	movs	r2, #255	@ 0xff
 800e1c4:	4013      	ands	r3, r2
 800e1c6:	d021      	beq.n	800e20c <dwt_initialise+0xe8>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 800e1c8:	2202      	movs	r2, #2
 800e1ca:	2112      	movs	r1, #18
 800e1cc:	202d      	movs	r0, #45	@ 0x2d
 800e1ce:	f000 fc6d 	bl	800eaac <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 800e1d2:	4b7a      	ldr	r3, [pc, #488]	@ (800e3bc <dwt_initialise+0x298>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	8ada      	ldrh	r2, [r3, #22]
 800e1d8:	4b78      	ldr	r3, [pc, #480]	@ (800e3bc <dwt_initialise+0x298>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	2180      	movs	r1, #128	@ 0x80
 800e1de:	0149      	lsls	r1, r1, #5
 800e1e0:	430a      	orrs	r2, r1
 800e1e2:	b292      	uxth	r2, r2
 800e1e4:	82da      	strh	r2, [r3, #22]
 800e1e6:	e011      	b.n	800e20c <dwt_initialise+0xe8>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 800e1e8:	2130      	movs	r1, #48	@ 0x30
 800e1ea:	2028      	movs	r0, #40	@ 0x28
 800e1ec:	f000 fc00 	bl	800e9f0 <dwt_read32bitoffsetreg>
 800e1f0:	0003      	movs	r3, r0
 800e1f2:	4a74      	ldr	r2, [pc, #464]	@ (800e3c4 <dwt_initialise+0x2a0>)
 800e1f4:	4293      	cmp	r3, r2
 800e1f6:	d009      	beq.n	800e20c <dwt_initialise+0xe8>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 800e1f8:	4b70      	ldr	r3, [pc, #448]	@ (800e3bc <dwt_initialise+0x298>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	8ada      	ldrh	r2, [r3, #22]
 800e1fe:	4b6f      	ldr	r3, [pc, #444]	@ (800e3bc <dwt_initialise+0x298>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	2180      	movs	r1, #128	@ 0x80
 800e204:	0149      	lsls	r1, r1, #5
 800e206:	430a      	orrs	r2, r1
 800e208:	b292      	uxth	r2, r2
 800e20a:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2202      	movs	r2, #2
 800e210:	4013      	ands	r3, r2
 800e212:	d007      	beq.n	800e224 <dwt_initialise+0x100>
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2202      	movs	r2, #2
 800e218:	4013      	ands	r3, r2
 800e21a:	d013      	beq.n	800e244 <dwt_initialise+0x120>
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2208      	movs	r2, #8
 800e220:	4013      	ands	r3, r2
 800e222:	d00f      	beq.n	800e244 <dwt_initialise+0x120>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 800e224:	201e      	movs	r0, #30
 800e226:	f000 fc9b 	bl	800eb60 <_dwt_otpread>
 800e22a:	0002      	movs	r2, r0
 800e22c:	2116      	movs	r1, #22
 800e22e:	187b      	adds	r3, r7, r1
 800e230:	801a      	strh	r2, [r3, #0]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 800e232:	187b      	adds	r3, r7, r1
 800e234:	881b      	ldrh	r3, [r3, #0]
 800e236:	0a1b      	lsrs	r3, r3, #8
 800e238:	b29a      	uxth	r2, r3
 800e23a:	4b60      	ldr	r3, [pc, #384]	@ (800e3bc <dwt_initialise+0x298>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	b2d2      	uxtb	r2, r2
 800e240:	72da      	strb	r2, [r3, #11]
 800e242:	e003      	b.n	800e24c <dwt_initialise+0x128>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 800e244:	4b5d      	ldr	r3, [pc, #372]	@ (800e3bc <dwt_initialise+0x298>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	2200      	movs	r2, #0
 800e24a:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2202      	movs	r2, #2
 800e250:	4013      	ands	r3, r2
 800e252:	d10f      	bne.n	800e274 <dwt_initialise+0x150>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 800e254:	2116      	movs	r1, #22
 800e256:	187b      	adds	r3, r7, r1
 800e258:	881b      	ldrh	r3, [r3, #0]
 800e25a:	221f      	movs	r2, #31
 800e25c:	4013      	ands	r3, r2
 800e25e:	d102      	bne.n	800e266 <dwt_initialise+0x142>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 800e260:	187b      	adds	r3, r7, r1
 800e262:	2210      	movs	r2, #16
 800e264:	801a      	strh	r2, [r3, #0]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 800e266:	2316      	movs	r3, #22
 800e268:	18fb      	adds	r3, r7, r3
 800e26a:	881b      	ldrh	r3, [r3, #0]
 800e26c:	b2db      	uxtb	r3, r3
 800e26e:	0018      	movs	r0, r3
 800e270:	f000 ff6e 	bl	800f150 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2210      	movs	r2, #16
 800e278:	4013      	ands	r3, r2
 800e27a:	d007      	beq.n	800e28c <dwt_initialise+0x168>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 800e27c:	4b4f      	ldr	r3, [pc, #316]	@ (800e3bc <dwt_initialise+0x298>)
 800e27e:	681c      	ldr	r4, [r3, #0]
 800e280:	2006      	movs	r0, #6
 800e282:	f000 fc6d 	bl	800eb60 <_dwt_otpread>
 800e286:	0003      	movs	r3, r0
 800e288:	6023      	str	r3, [r4, #0]
 800e28a:	e003      	b.n	800e294 <dwt_initialise+0x170>
    }
    else
    {
        pdw1000local->partID = 0;
 800e28c:	4b4b      	ldr	r3, [pc, #300]	@ (800e3bc <dwt_initialise+0x298>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	2200      	movs	r2, #0
 800e292:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2220      	movs	r2, #32
 800e298:	4013      	ands	r3, r2
 800e29a:	d007      	beq.n	800e2ac <dwt_initialise+0x188>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 800e29c:	4b47      	ldr	r3, [pc, #284]	@ (800e3bc <dwt_initialise+0x298>)
 800e29e:	681c      	ldr	r4, [r3, #0]
 800e2a0:	2007      	movs	r0, #7
 800e2a2:	f000 fc5d 	bl	800eb60 <_dwt_otpread>
 800e2a6:	0003      	movs	r3, r0
 800e2a8:	6063      	str	r3, [r4, #4]
 800e2aa:	e003      	b.n	800e2b4 <dwt_initialise+0x190>
    }
    else
    {
        pdw1000local->lotID = 0;
 800e2ac:	4b43      	ldr	r3, [pc, #268]	@ (800e3bc <dwt_initialise+0x298>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2240      	movs	r2, #64	@ 0x40
 800e2b8:	4013      	ands	r3, r2
 800e2ba:	d008      	beq.n	800e2ce <dwt_initialise+0x1aa>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 800e2bc:	2008      	movs	r0, #8
 800e2be:	f000 fc4f 	bl	800eb60 <_dwt_otpread>
 800e2c2:	0002      	movs	r2, r0
 800e2c4:	4b3d      	ldr	r3, [pc, #244]	@ (800e3bc <dwt_initialise+0x298>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	b2d2      	uxtb	r2, r2
 800e2ca:	721a      	strb	r2, [r3, #8]
 800e2cc:	e003      	b.n	800e2d6 <dwt_initialise+0x1b2>
    }
    else
    {
        pdw1000local->vBatP = 0;
 800e2ce:	4b3b      	ldr	r3, [pc, #236]	@ (800e3bc <dwt_initialise+0x298>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2280      	movs	r2, #128	@ 0x80
 800e2da:	4013      	ands	r3, r2
 800e2dc:	d008      	beq.n	800e2f0 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 800e2de:	2009      	movs	r0, #9
 800e2e0:	f000 fc3e 	bl	800eb60 <_dwt_otpread>
 800e2e4:	0002      	movs	r2, r0
 800e2e6:	4b35      	ldr	r3, [pc, #212]	@ (800e3bc <dwt_initialise+0x298>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	b2d2      	uxtb	r2, r2
 800e2ec:	725a      	strb	r2, [r3, #9]
 800e2ee:	e003      	b.n	800e2f8 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 800e2f0:	4b32      	ldr	r3, [pc, #200]	@ (800e3bc <dwt_initialise+0x298>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2202      	movs	r2, #2
 800e2fc:	4013      	ands	r3, r2
 800e2fe:	d127      	bne.n	800e350 <dwt_initialise+0x22c>
    {
        if(DWT_LOADUCODE & config)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2201      	movs	r2, #1
 800e304:	4013      	ands	r3, r2
 800e306:	d00c      	beq.n	800e322 <dwt_initialise+0x1fe>
        {
            _dwt_loaducodefromrom();
 800e308:	f000 fc82 	bl	800ec10 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 800e30c:	4b2b      	ldr	r3, [pc, #172]	@ (800e3bc <dwt_initialise+0x298>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	8ada      	ldrh	r2, [r3, #22]
 800e312:	4b2a      	ldr	r3, [pc, #168]	@ (800e3bc <dwt_initialise+0x298>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	2180      	movs	r1, #128	@ 0x80
 800e318:	0109      	lsls	r1, r1, #4
 800e31a:	430a      	orrs	r2, r1
 800e31c:	b292      	uxth	r2, r2
 800e31e:	82da      	strh	r2, [r3, #22]
 800e320:	e024      	b.n	800e36c <dwt_initialise+0x248>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 800e322:	250e      	movs	r5, #14
 800e324:	197c      	adds	r4, r7, r5
 800e326:	2105      	movs	r1, #5
 800e328:	2036      	movs	r0, #54	@ 0x36
 800e32a:	f000 fb88 	bl	800ea3e <dwt_read16bitoffsetreg>
 800e32e:	0003      	movs	r3, r0
 800e330:	8023      	strh	r3, [r4, #0]
            rega &= 0xFDFF ; // Clear LDERUN bit
 800e332:	0028      	movs	r0, r5
 800e334:	183b      	adds	r3, r7, r0
 800e336:	183a      	adds	r2, r7, r0
 800e338:	8812      	ldrh	r2, [r2, #0]
 800e33a:	4923      	ldr	r1, [pc, #140]	@ (800e3c8 <dwt_initialise+0x2a4>)
 800e33c:	400a      	ands	r2, r1
 800e33e:	801a      	strh	r2, [r3, #0]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 800e340:	183b      	adds	r3, r7, r0
 800e342:	881b      	ldrh	r3, [r3, #0]
 800e344:	001a      	movs	r2, r3
 800e346:	2105      	movs	r1, #5
 800e348:	2036      	movs	r0, #54	@ 0x36
 800e34a:	f000 fbc2 	bl	800ead2 <dwt_write16bitoffsetreg>
 800e34e:	e00d      	b.n	800e36c <dwt_initialise+0x248>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2204      	movs	r2, #4
 800e354:	4013      	ands	r3, r2
 800e356:	d109      	bne.n	800e36c <dwt_initialise+0x248>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 800e358:	4b18      	ldr	r3, [pc, #96]	@ (800e3bc <dwt_initialise+0x298>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	8ada      	ldrh	r2, [r3, #22]
 800e35e:	4b17      	ldr	r3, [pc, #92]	@ (800e3bc <dwt_initialise+0x298>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	2180      	movs	r1, #128	@ 0x80
 800e364:	0109      	lsls	r1, r1, #4
 800e366:	430a      	orrs	r2, r1
 800e368:	b292      	uxth	r2, r2
 800e36a:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800e36c:	2001      	movs	r0, #1
 800e36e:	f000 fcb5 	bl	800ecdc <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 800e372:	2200      	movs	r2, #0
 800e374:	210a      	movs	r1, #10
 800e376:	202c      	movs	r0, #44	@ 0x2c
 800e378:	f000 fb98 	bl	800eaac <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 800e37c:	4b0f      	ldr	r3, [pc, #60]	@ (800e3bc <dwt_initialise+0x298>)
 800e37e:	681c      	ldr	r4, [r3, #0]
 800e380:	2100      	movs	r1, #0
 800e382:	2004      	movs	r0, #4
 800e384:	f000 fb34 	bl	800e9f0 <dwt_read32bitoffsetreg>
 800e388:	0003      	movs	r3, r0
 800e38a:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800e38c:	4b0b      	ldr	r3, [pc, #44]	@ (800e3bc <dwt_initialise+0x298>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	691b      	ldr	r3, [r3, #16]
 800e392:	0c1b      	lsrs	r3, r3, #16
 800e394:	b2da      	uxtb	r2, r3
 800e396:	4b09      	ldr	r3, [pc, #36]	@ (800e3bc <dwt_initialise+0x298>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	2103      	movs	r1, #3
 800e39c:	400a      	ands	r2, r1
 800e39e:	b2d2      	uxtb	r2, r2
 800e3a0:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 800e3a2:	4b06      	ldr	r3, [pc, #24]	@ (800e3bc <dwt_initialise+0x298>)
 800e3a4:	681c      	ldr	r4, [r3, #0]
 800e3a6:	2100      	movs	r1, #0
 800e3a8:	2008      	movs	r0, #8
 800e3aa:	f000 fb21 	bl	800e9f0 <dwt_read32bitoffsetreg>
 800e3ae:	0003      	movs	r3, r0
 800e3b0:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 800e3b2:	2300      	movs	r3, #0

} // end dwt_initialise()
 800e3b4:	0018      	movs	r0, r3
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	b006      	add	sp, #24
 800e3ba:	bdb0      	pop	{r4, r5, r7, pc}
 800e3bc:	200001d8 	.word	0x200001d8
 800e3c0:	deca0130 	.word	0xdeca0130
 800e3c4:	88888888 	.word	0x88888888
 800e3c8:	fffffdff 	.word	0xfffffdff

0800e3cc <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	2000      	movs	r0, #0
 800e3d4:	f000 fb0c 	bl	800e9f0 <dwt_read32bitoffsetreg>
 800e3d8:	0003      	movs	r3, r0
}
 800e3da:	0018      	movs	r0, r3
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}

0800e3e0 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 800e3e0:	b5b0      	push	{r4, r5, r7, lr}
 800e3e2:	b086      	sub	sp, #24
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 800e3e8:	2317      	movs	r3, #23
 800e3ea:	18fb      	adds	r3, r7, r3
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	701a      	strb	r2, [r3, #0]
    uint8 useDWnsSFD = 0;
 800e3f0:	2316      	movs	r3, #22
 800e3f2:	18fb      	adds	r3, r7, r3
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	701a      	strb	r2, [r3, #0]
    uint8 chan = config->chan ;
 800e3f8:	2013      	movs	r0, #19
 800e3fa:	183b      	adds	r3, r7, r0
 800e3fc:	687a      	ldr	r2, [r7, #4]
 800e3fe:	7812      	ldrb	r2, [r2, #0]
 800e400:	701a      	strb	r2, [r3, #0]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	795b      	ldrb	r3, [r3, #5]
 800e406:	0019      	movs	r1, r3
 800e408:	2314      	movs	r3, #20
 800e40a:	18fb      	adds	r3, r7, r3
 800e40c:	4ab6      	ldr	r2, [pc, #728]	@ (800e6e8 <dwt_configure+0x308>)
 800e40e:	0049      	lsls	r1, r1, #1
 800e410:	5a8a      	ldrh	r2, [r1, r2]
 800e412:	801a      	strh	r2, [r3, #0]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	785a      	ldrb	r2, [r3, #1]
 800e418:	2312      	movs	r3, #18
 800e41a:	18fb      	adds	r3, r7, r3
 800e41c:	3a01      	subs	r2, #1
 800e41e:	701a      	strb	r2, [r3, #0]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 800e420:	183b      	adds	r3, r7, r0
 800e422:	781b      	ldrb	r3, [r3, #0]
 800e424:	2b04      	cmp	r3, #4
 800e426:	d003      	beq.n	800e430 <dwt_configure+0x50>
 800e428:	183b      	adds	r3, r7, r0
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	2b07      	cmp	r3, #7
 800e42e:	d101      	bne.n	800e434 <dwt_configure+0x54>
 800e430:	2201      	movs	r2, #1
 800e432:	e000      	b.n	800e436 <dwt_configure+0x56>
 800e434:	2200      	movs	r2, #0
 800e436:	2311      	movs	r3, #17
 800e438:	18fb      	adds	r3, r7, r3
 800e43a:	701a      	strb	r2, [r3, #0]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	79db      	ldrb	r3, [r3, #7]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d10f      	bne.n	800e464 <dwt_configure+0x84>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 800e444:	4ba9      	ldr	r3, [pc, #676]	@ (800e6ec <dwt_configure+0x30c>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	691a      	ldr	r2, [r3, #16]
 800e44a:	4ba8      	ldr	r3, [pc, #672]	@ (800e6ec <dwt_configure+0x30c>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2180      	movs	r1, #128	@ 0x80
 800e450:	03c9      	lsls	r1, r1, #15
 800e452:	430a      	orrs	r2, r1
 800e454:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 800e456:	2214      	movs	r2, #20
 800e458:	18bb      	adds	r3, r7, r2
 800e45a:	18ba      	adds	r2, r7, r2
 800e45c:	8812      	ldrh	r2, [r2, #0]
 800e45e:	08d2      	lsrs	r2, r2, #3
 800e460:	801a      	strh	r2, [r3, #0]
 800e462:	e007      	b.n	800e474 <dwt_configure+0x94>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 800e464:	4ba1      	ldr	r3, [pc, #644]	@ (800e6ec <dwt_configure+0x30c>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	691a      	ldr	r2, [r3, #16]
 800e46a:	4ba0      	ldr	r3, [pc, #640]	@ (800e6ec <dwt_configure+0x30c>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	49a0      	ldr	r1, [pc, #640]	@ (800e6f0 <dwt_configure+0x310>)
 800e470:	400a      	ands	r2, r1
 800e472:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 800e474:	4b9d      	ldr	r3, [pc, #628]	@ (800e6ec <dwt_configure+0x30c>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	687a      	ldr	r2, [r7, #4]
 800e47a:	7a12      	ldrb	r2, [r2, #8]
 800e47c:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 800e47e:	4b9b      	ldr	r3, [pc, #620]	@ (800e6ec <dwt_configure+0x30c>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	691a      	ldr	r2, [r3, #16]
 800e484:	4b99      	ldr	r3, [pc, #612]	@ (800e6ec <dwt_configure+0x30c>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	499a      	ldr	r1, [pc, #616]	@ (800e6f4 <dwt_configure+0x314>)
 800e48a:	400a      	ands	r2, r1
 800e48c:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 800e48e:	4b97      	ldr	r3, [pc, #604]	@ (800e6ec <dwt_configure+0x30c>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	6919      	ldr	r1, [r3, #16]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	7a1b      	ldrb	r3, [r3, #8]
 800e498:	041a      	lsls	r2, r3, #16
 800e49a:	23c0      	movs	r3, #192	@ 0xc0
 800e49c:	029b      	lsls	r3, r3, #10
 800e49e:	401a      	ands	r2, r3
 800e4a0:	4b92      	ldr	r3, [pc, #584]	@ (800e6ec <dwt_configure+0x30c>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	430a      	orrs	r2, r1
 800e4a6:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 800e4a8:	4b90      	ldr	r3, [pc, #576]	@ (800e6ec <dwt_configure+0x30c>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	691b      	ldr	r3, [r3, #16]
 800e4ae:	001a      	movs	r2, r3
 800e4b0:	2100      	movs	r1, #0
 800e4b2:	2004      	movs	r0, #4
 800e4b4:	f000 fb2d 	bl	800eb12 <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 800e4b8:	2314      	movs	r3, #20
 800e4ba:	18fb      	adds	r3, r7, r3
 800e4bc:	881b      	ldrh	r3, [r3, #0]
 800e4be:	498e      	ldr	r1, [pc, #568]	@ (800e6f8 <dwt_configure+0x318>)
 800e4c0:	001a      	movs	r2, r3
 800e4c2:	202e      	movs	r0, #46	@ 0x2e
 800e4c4:	f000 fb05 	bl	800ead2 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 800e4c8:	2512      	movs	r5, #18
 800e4ca:	197b      	adds	r3, r7, r5
 800e4cc:	781b      	ldrb	r3, [r3, #0]
 800e4ce:	0018      	movs	r0, r3
 800e4d0:	f000 fb78 	bl	800ebc4 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 800e4d4:	2413      	movs	r4, #19
 800e4d6:	193b      	adds	r3, r7, r4
 800e4d8:	781b      	ldrb	r3, [r3, #0]
 800e4da:	4a88      	ldr	r2, [pc, #544]	@ (800e6fc <dwt_configure+0x31c>)
 800e4dc:	5cd3      	ldrb	r3, [r2, r3]
 800e4de:	001a      	movs	r2, r3
 800e4e0:	4b87      	ldr	r3, [pc, #540]	@ (800e700 <dwt_configure+0x320>)
 800e4e2:	0092      	lsls	r2, r2, #2
 800e4e4:	58d3      	ldr	r3, [r2, r3]
 800e4e6:	001a      	movs	r2, r3
 800e4e8:	2107      	movs	r1, #7
 800e4ea:	202b      	movs	r0, #43	@ 0x2b
 800e4ec:	f000 fb11 	bl	800eb12 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 800e4f0:	193b      	adds	r3, r7, r4
 800e4f2:	781b      	ldrb	r3, [r3, #0]
 800e4f4:	4a81      	ldr	r2, [pc, #516]	@ (800e6fc <dwt_configure+0x31c>)
 800e4f6:	5cd3      	ldrb	r3, [r2, r3]
 800e4f8:	001a      	movs	r2, r3
 800e4fa:	4b82      	ldr	r3, [pc, #520]	@ (800e704 <dwt_configure+0x324>)
 800e4fc:	5c9b      	ldrb	r3, [r3, r2]
 800e4fe:	001a      	movs	r2, r3
 800e500:	210b      	movs	r1, #11
 800e502:	202b      	movs	r0, #43	@ 0x2b
 800e504:	f000 fad2 	bl	800eaac <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 800e508:	2311      	movs	r3, #17
 800e50a:	18fb      	adds	r3, r7, r3
 800e50c:	781b      	ldrb	r3, [r3, #0]
 800e50e:	4a7e      	ldr	r2, [pc, #504]	@ (800e708 <dwt_configure+0x328>)
 800e510:	5cd3      	ldrb	r3, [r2, r3]
 800e512:	001a      	movs	r2, r3
 800e514:	210b      	movs	r1, #11
 800e516:	2028      	movs	r0, #40	@ 0x28
 800e518:	f000 fac8 	bl	800eaac <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 800e51c:	193b      	adds	r3, r7, r4
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	4a76      	ldr	r2, [pc, #472]	@ (800e6fc <dwt_configure+0x31c>)
 800e522:	5cd3      	ldrb	r3, [r2, r3]
 800e524:	001a      	movs	r2, r3
 800e526:	4b79      	ldr	r3, [pc, #484]	@ (800e70c <dwt_configure+0x32c>)
 800e528:	0092      	lsls	r2, r2, #2
 800e52a:	58d3      	ldr	r3, [r2, r3]
 800e52c:	001a      	movs	r2, r3
 800e52e:	210c      	movs	r1, #12
 800e530:	2028      	movs	r0, #40	@ 0x28
 800e532:	f000 faee 	bl	800eb12 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	79db      	ldrb	r3, [r3, #7]
 800e53a:	001a      	movs	r2, r3
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	799b      	ldrb	r3, [r3, #6]
 800e540:	0019      	movs	r1, r3
 800e542:	4b73      	ldr	r3, [pc, #460]	@ (800e710 <dwt_configure+0x330>)
 800e544:	0052      	lsls	r2, r2, #1
 800e546:	1852      	adds	r2, r2, r1
 800e548:	0052      	lsls	r2, r2, #1
 800e54a:	5ad3      	ldrh	r3, [r2, r3]
 800e54c:	001a      	movs	r2, r3
 800e54e:	2102      	movs	r1, #2
 800e550:	2027      	movs	r0, #39	@ 0x27
 800e552:	f000 fabe 	bl	800ead2 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 800e556:	197b      	adds	r3, r7, r5
 800e558:	781a      	ldrb	r2, [r3, #0]
 800e55a:	4b6e      	ldr	r3, [pc, #440]	@ (800e714 <dwt_configure+0x334>)
 800e55c:	0052      	lsls	r2, r2, #1
 800e55e:	5ad3      	ldrh	r3, [r2, r3]
 800e560:	001a      	movs	r2, r3
 800e562:	2104      	movs	r1, #4
 800e564:	2027      	movs	r0, #39	@ 0x27
 800e566:	f000 fab4 	bl	800ead2 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	79db      	ldrb	r3, [r3, #7]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d105      	bne.n	800e57e <dwt_configure+0x19e>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 800e572:	2264      	movs	r2, #100	@ 0x64
 800e574:	2106      	movs	r1, #6
 800e576:	2027      	movs	r0, #39	@ 0x27
 800e578:	f000 faab 	bl	800ead2 <dwt_write16bitoffsetreg>
 800e57c:	e018      	b.n	800e5b0 <dwt_configure+0x1d0>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	789b      	ldrb	r3, [r3, #2]
 800e582:	2b04      	cmp	r3, #4
 800e584:	d10a      	bne.n	800e59c <dwt_configure+0x1bc>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 800e586:	2210      	movs	r2, #16
 800e588:	2106      	movs	r1, #6
 800e58a:	2027      	movs	r0, #39	@ 0x27
 800e58c:	f000 faa1 	bl	800ead2 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 800e590:	2210      	movs	r2, #16
 800e592:	2126      	movs	r1, #38	@ 0x26
 800e594:	2027      	movs	r0, #39	@ 0x27
 800e596:	f000 fa89 	bl	800eaac <dwt_write8bitoffsetreg>
 800e59a:	e009      	b.n	800e5b0 <dwt_configure+0x1d0>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 800e59c:	2220      	movs	r2, #32
 800e59e:	2106      	movs	r1, #6
 800e5a0:	2027      	movs	r0, #39	@ 0x27
 800e5a2:	f000 fa96 	bl	800ead2 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 800e5a6:	2228      	movs	r2, #40	@ 0x28
 800e5a8:	2126      	movs	r1, #38	@ 0x26
 800e5aa:	2027      	movs	r0, #39	@ 0x27
 800e5ac:	f000 fa7e 	bl	800eaac <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 800e5b0:	2312      	movs	r3, #18
 800e5b2:	18fb      	adds	r3, r7, r3
 800e5b4:	781a      	ldrb	r2, [r3, #0]
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	78db      	ldrb	r3, [r3, #3]
 800e5ba:	0019      	movs	r1, r3
 800e5bc:	4b56      	ldr	r3, [pc, #344]	@ (800e718 <dwt_configure+0x338>)
 800e5be:	0092      	lsls	r2, r2, #2
 800e5c0:	1852      	adds	r2, r2, r1
 800e5c2:	0092      	lsls	r2, r2, #2
 800e5c4:	58d3      	ldr	r3, [r2, r3]
 800e5c6:	001a      	movs	r2, r3
 800e5c8:	2108      	movs	r1, #8
 800e5ca:	2027      	movs	r0, #39	@ 0x27
 800e5cc:	f000 faa1 	bl	800eb12 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	895b      	ldrh	r3, [r3, #10]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d102      	bne.n	800e5de <dwt_configure+0x1fe>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	4a50      	ldr	r2, [pc, #320]	@ (800e71c <dwt_configure+0x33c>)
 800e5dc:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	895b      	ldrh	r3, [r3, #10]
 800e5e2:	001a      	movs	r2, r3
 800e5e4:	2120      	movs	r1, #32
 800e5e6:	2027      	movs	r0, #39	@ 0x27
 800e5e8:	f000 fa73 	bl	800ead2 <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 800e5ec:	4b4c      	ldr	r3, [pc, #304]	@ (800e720 <dwt_configure+0x340>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	001a      	movs	r2, r3
 800e5f2:	210c      	movs	r1, #12
 800e5f4:	2023      	movs	r0, #35	@ 0x23
 800e5f6:	f000 fa8c 	bl	800eb12 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 800e5fa:	2312      	movs	r3, #18
 800e5fc:	18fb      	adds	r3, r7, r3
 800e5fe:	781b      	ldrb	r3, [r3, #0]
 800e600:	4a47      	ldr	r2, [pc, #284]	@ (800e720 <dwt_configure+0x340>)
 800e602:	005b      	lsls	r3, r3, #1
 800e604:	18d3      	adds	r3, r2, r3
 800e606:	3304      	adds	r3, #4
 800e608:	881b      	ldrh	r3, [r3, #0]
 800e60a:	001a      	movs	r2, r3
 800e60c:	2104      	movs	r1, #4
 800e60e:	2023      	movs	r0, #35	@ 0x23
 800e610:	f000 fa5f 	bl	800ead2 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	799b      	ldrb	r3, [r3, #6]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d011      	beq.n	800e640 <dwt_configure+0x260>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	79db      	ldrb	r3, [r3, #7]
 800e620:	001a      	movs	r2, r3
 800e622:	4b40      	ldr	r3, [pc, #256]	@ (800e724 <dwt_configure+0x344>)
 800e624:	5c9b      	ldrb	r3, [r3, r2]
 800e626:	001a      	movs	r2, r3
 800e628:	2100      	movs	r1, #0
 800e62a:	2021      	movs	r0, #33	@ 0x21
 800e62c:	f000 fa3e 	bl	800eaac <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 800e630:	2317      	movs	r3, #23
 800e632:	18fb      	adds	r3, r7, r3
 800e634:	2203      	movs	r2, #3
 800e636:	701a      	strb	r2, [r3, #0]
        useDWnsSFD = 1 ;
 800e638:	2316      	movs	r3, #22
 800e63a:	18fb      	adds	r3, r7, r3
 800e63c:	2201      	movs	r2, #1
 800e63e:	701a      	strb	r2, [r3, #0]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800e640:	2113      	movs	r1, #19
 800e642:	187b      	adds	r3, r7, r1
 800e644:	781b      	ldrb	r3, [r3, #0]
 800e646:	220f      	movs	r2, #15
 800e648:	401a      	ands	r2, r3
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800e64a:	187b      	adds	r3, r7, r1
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	011b      	lsls	r3, r3, #4
 800e650:	21ff      	movs	r1, #255	@ 0xff
 800e652:	400b      	ands	r3, r1
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800e654:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	785b      	ldrb	r3, [r3, #1]
 800e65a:	0499      	lsls	r1, r3, #18
 800e65c:	23c0      	movs	r3, #192	@ 0xc0
 800e65e:	031b      	lsls	r3, r3, #12
 800e660:	400b      	ands	r3, r1
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800e662:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 800e664:	2317      	movs	r3, #23
 800e666:	18fb      	adds	r3, r7, r3
 800e668:	781b      	ldrb	r3, [r3, #0]
 800e66a:	0519      	lsls	r1, r3, #20
 800e66c:	23c0      	movs	r3, #192	@ 0xc0
 800e66e:	039b      	lsls	r3, r3, #14
 800e670:	400b      	ands	r3, r1
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 800e672:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800e674:	2316      	movs	r3, #22
 800e676:	18fb      	adds	r3, r7, r3
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	0459      	lsls	r1, r3, #17
 800e67c:	2380      	movs	r3, #128	@ 0x80
 800e67e:	029b      	lsls	r3, r3, #10
 800e680:	400b      	ands	r3, r1
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 800e682:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	791b      	ldrb	r3, [r3, #4]
 800e688:	0599      	lsls	r1, r3, #22
 800e68a:	23f8      	movs	r3, #248	@ 0xf8
 800e68c:	04db      	lsls	r3, r3, #19
 800e68e:	400b      	ands	r3, r1
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800e690:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	795b      	ldrb	r3, [r3, #5]
 800e696:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800e698:	4313      	orrs	r3, r2
 800e69a:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	001a      	movs	r2, r3
 800e6a0:	2100      	movs	r1, #0
 800e6a2:	201f      	movs	r0, #31
 800e6a4:	f000 fa35 	bl	800eb12 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	789a      	ldrb	r2, [r3, #2]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	785b      	ldrb	r3, [r3, #1]
 800e6b0:	4313      	orrs	r3, r2
 800e6b2:	b2db      	uxtb	r3, r3
 800e6b4:	0419      	lsls	r1, r3, #16
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	79db      	ldrb	r3, [r3, #7]
 800e6ba:	035a      	lsls	r2, r3, #13
 800e6bc:	4b0b      	ldr	r3, [pc, #44]	@ (800e6ec <dwt_configure+0x30c>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	430a      	orrs	r2, r1
 800e6c2:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 800e6c4:	4b09      	ldr	r3, [pc, #36]	@ (800e6ec <dwt_configure+0x30c>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	68db      	ldr	r3, [r3, #12]
 800e6ca:	001a      	movs	r2, r3
 800e6cc:	2100      	movs	r1, #0
 800e6ce:	2008      	movs	r0, #8
 800e6d0:	f000 fa1f 	bl	800eb12 <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 800e6d4:	2242      	movs	r2, #66	@ 0x42
 800e6d6:	2100      	movs	r1, #0
 800e6d8:	200d      	movs	r0, #13
 800e6da:	f000 f9e7 	bl	800eaac <dwt_write8bitoffsetreg>
} // end dwt_configure()
 800e6de:	46c0      	nop			@ (mov r8, r8)
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	b006      	add	sp, #24
 800e6e4:	bdb0      	pop	{r4, r5, r7, pc}
 800e6e6:	46c0      	nop			@ (mov r8, r8)
 800e6e8:	080126e0 	.word	0x080126e0
 800e6ec:	200001d8 	.word	0x200001d8
 800e6f0:	ffbfffff 	.word	0xffbfffff
 800e6f4:	fffcffff 	.word	0xfffcffff
 800e6f8:	00002804 	.word	0x00002804
 800e6fc:	08012660 	.word	0x08012660
 800e700:	08012680 	.word	0x08012680
 800e704:	08012698 	.word	0x08012698
 800e708:	080126a0 	.word	0x080126a0
 800e70c:	08012668 	.word	0x08012668
 800e710:	080126b0 	.word	0x080126b0
 800e714:	080126bc 	.word	0x080126bc
 800e718:	080126c0 	.word	0x080126c0
 800e71c:	00001041 	.word	0x00001041
 800e720:	080126a4 	.word	0x080126a4
 800e724:	080126ac 	.word	0x080126ac

0800e728 <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b082      	sub	sp, #8
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	0002      	movs	r2, r0
 800e730:	1dbb      	adds	r3, r7, #6
 800e732:	801a      	strh	r2, [r3, #0]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 800e734:	1dbb      	adds	r3, r7, #6
 800e736:	881b      	ldrh	r3, [r3, #0]
 800e738:	4904      	ldr	r1, [pc, #16]	@ (800e74c <dwt_setrxantennadelay+0x24>)
 800e73a:	001a      	movs	r2, r3
 800e73c:	202e      	movs	r0, #46	@ 0x2e
 800e73e:	f000 f9c8 	bl	800ead2 <dwt_write16bitoffsetreg>
}
 800e742:	46c0      	nop			@ (mov r8, r8)
 800e744:	46bd      	mov	sp, r7
 800e746:	b002      	add	sp, #8
 800e748:	bd80      	pop	{r7, pc}
 800e74a:	46c0      	nop			@ (mov r8, r8)
 800e74c:	00001804 	.word	0x00001804

0800e750 <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b082      	sub	sp, #8
 800e754:	af00      	add	r7, sp, #0
 800e756:	0002      	movs	r2, r0
 800e758:	1dbb      	adds	r3, r7, #6
 800e75a:	801a      	strh	r2, [r3, #0]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 800e75c:	1dbb      	adds	r3, r7, #6
 800e75e:	881b      	ldrh	r3, [r3, #0]
 800e760:	001a      	movs	r2, r3
 800e762:	2100      	movs	r1, #0
 800e764:	2018      	movs	r0, #24
 800e766:	f000 f9b4 	bl	800ead2 <dwt_write16bitoffsetreg>
}
 800e76a:	46c0      	nop			@ (mov r8, r8)
 800e76c:	46bd      	mov	sp, r7
 800e76e:	b002      	add	sp, #8
 800e770:	bd80      	pop	{r7, pc}

0800e772 <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 800e772:	b580      	push	{r7, lr}
 800e774:	b082      	sub	sp, #8
 800e776:	af00      	add	r7, sp, #0
 800e778:	6039      	str	r1, [r7, #0]
 800e77a:	0011      	movs	r1, r2
 800e77c:	1dbb      	adds	r3, r7, #6
 800e77e:	1c02      	adds	r2, r0, #0
 800e780:	801a      	strh	r2, [r3, #0]
 800e782:	1d3b      	adds	r3, r7, #4
 800e784:	1c0a      	adds	r2, r1, #0
 800e786:	801a      	strh	r2, [r3, #0]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 800e788:	1d3b      	adds	r3, r7, #4
 800e78a:	881a      	ldrh	r2, [r3, #0]
 800e78c:	1dbb      	adds	r3, r7, #6
 800e78e:	881b      	ldrh	r3, [r3, #0]
 800e790:	18d2      	adds	r2, r2, r3
 800e792:	2380      	movs	r3, #128	@ 0x80
 800e794:	00db      	lsls	r3, r3, #3
 800e796:	429a      	cmp	r2, r3
 800e798:	dc0d      	bgt.n	800e7b6 <dwt_writetxdata+0x44>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 800e79a:	1dbb      	adds	r3, r7, #6
 800e79c:	881b      	ldrh	r3, [r3, #0]
 800e79e:	3b02      	subs	r3, #2
 800e7a0:	0018      	movs	r0, r3
 800e7a2:	683a      	ldr	r2, [r7, #0]
 800e7a4:	1d3b      	adds	r3, r7, #4
 800e7a6:	8819      	ldrh	r1, [r3, #0]
 800e7a8:	0013      	movs	r3, r2
 800e7aa:	0002      	movs	r2, r0
 800e7ac:	2009      	movs	r0, #9
 800e7ae:	f000 f862 	bl	800e876 <dwt_writetodevice>
        return DWT_SUCCESS;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	e001      	b.n	800e7ba <dwt_writetxdata+0x48>
    }
    else
    {
        return DWT_ERROR;
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	425b      	negs	r3, r3
    }
} // end dwt_writetxdata()
 800e7ba:	0018      	movs	r0, r3
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	b002      	add	sp, #8
 800e7c0:	bd80      	pop	{r7, pc}
	...

0800e7c4 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b084      	sub	sp, #16
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	603a      	str	r2, [r7, #0]
 800e7cc:	1dbb      	adds	r3, r7, #6
 800e7ce:	1c02      	adds	r2, r0, #0
 800e7d0:	801a      	strh	r2, [r3, #0]
 800e7d2:	1d3b      	adds	r3, r7, #4
 800e7d4:	1c0a      	adds	r2, r1, #0
 800e7d6:	801a      	strh	r2, [r3, #0]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 800e7d8:	4b0b      	ldr	r3, [pc, #44]	@ (800e808 <dwt_writetxfctrl+0x44>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	68da      	ldr	r2, [r3, #12]
 800e7de:	1dbb      	adds	r3, r7, #6
 800e7e0:	881b      	ldrh	r3, [r3, #0]
 800e7e2:	431a      	orrs	r2, r3
 800e7e4:	1d3b      	adds	r3, r7, #4
 800e7e6:	881b      	ldrh	r3, [r3, #0]
 800e7e8:	059b      	lsls	r3, r3, #22
 800e7ea:	431a      	orrs	r2, r3
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	03db      	lsls	r3, r3, #15
 800e7f0:	4313      	orrs	r3, r2
 800e7f2:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	001a      	movs	r2, r3
 800e7f8:	2100      	movs	r1, #0
 800e7fa:	2008      	movs	r0, #8
 800e7fc:	f000 f989 	bl	800eb12 <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 800e800:	46c0      	nop			@ (mov r8, r8)
 800e802:	46bd      	mov	sp, r7
 800e804:	b004      	add	sp, #16
 800e806:	bd80      	pop	{r7, pc}
 800e808:	200001d8 	.word	0x200001d8

0800e80c <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b082      	sub	sp, #8
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
 800e814:	0008      	movs	r0, r1
 800e816:	0011      	movs	r1, r2
 800e818:	1cbb      	adds	r3, r7, #2
 800e81a:	1c02      	adds	r2, r0, #0
 800e81c:	801a      	strh	r2, [r3, #0]
 800e81e:	003b      	movs	r3, r7
 800e820:	1c0a      	adds	r2, r1, #0
 800e822:	801a      	strh	r2, [r3, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 800e824:	1cbb      	adds	r3, r7, #2
 800e826:	881a      	ldrh	r2, [r3, #0]
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	003b      	movs	r3, r7
 800e82c:	8819      	ldrh	r1, [r3, #0]
 800e82e:	0003      	movs	r3, r0
 800e830:	2011      	movs	r0, #17
 800e832:	f000 f881 	bl	800e938 <dwt_readfromdevice>
}
 800e836:	46c0      	nop			@ (mov r8, r8)
 800e838:	46bd      	mov	sp, r7
 800e83a:	b002      	add	sp, #8
 800e83c:	bd80      	pop	{r7, pc}

0800e83e <dwt_readtxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readtxtimestamp(uint8 * timestamp)
{
 800e83e:	b580      	push	{r7, lr}
 800e840:	b082      	sub	sp, #8
 800e842:	af00      	add	r7, sp, #0
 800e844:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN, timestamp) ; // Read bytes directly into buffer
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2205      	movs	r2, #5
 800e84a:	2100      	movs	r1, #0
 800e84c:	2017      	movs	r0, #23
 800e84e:	f000 f873 	bl	800e938 <dwt_readfromdevice>
}
 800e852:	46c0      	nop			@ (mov r8, r8)
 800e854:	46bd      	mov	sp, r7
 800e856:	b002      	add	sp, #8
 800e858:	bd80      	pop	{r7, pc}

0800e85a <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 * timestamp)
{
 800e85a:	b580      	push	{r7, lr}
 800e85c:	b082      	sub	sp, #8
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2205      	movs	r2, #5
 800e866:	2100      	movs	r1, #0
 800e868:	2015      	movs	r0, #21
 800e86a:	f000 f865 	bl	800e938 <dwt_readfromdevice>
}
 800e86e:	46c0      	nop			@ (mov r8, r8)
 800e870:	46bd      	mov	sp, r7
 800e872:	b002      	add	sp, #8
 800e874:	bd80      	pop	{r7, pc}

0800e876 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 800e876:	b590      	push	{r4, r7, lr}
 800e878:	b087      	sub	sp, #28
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	60ba      	str	r2, [r7, #8]
 800e87e:	607b      	str	r3, [r7, #4]
 800e880:	240e      	movs	r4, #14
 800e882:	193b      	adds	r3, r7, r4
 800e884:	1c02      	adds	r2, r0, #0
 800e886:	801a      	strh	r2, [r3, #0]
 800e888:	200c      	movs	r0, #12
 800e88a:	183b      	adds	r3, r7, r0
 800e88c:	1c0a      	adds	r2, r1, #0
 800e88e:	801a      	strh	r2, [r3, #0]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 800e890:	2300      	movs	r3, #0
 800e892:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 800e894:	183b      	adds	r3, r7, r0
 800e896:	881b      	ldrh	r3, [r3, #0]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d10d      	bne.n	800e8b8 <dwt_writetodevice+0x42>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800e89c:	193b      	adds	r3, r7, r4
 800e89e:	881b      	ldrh	r3, [r3, #0]
 800e8a0:	b2da      	uxtb	r2, r3
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	1c59      	adds	r1, r3, #1
 800e8a6:	6179      	str	r1, [r7, #20]
 800e8a8:	2180      	movs	r1, #128	@ 0x80
 800e8aa:	4249      	negs	r1, r1
 800e8ac:	430a      	orrs	r2, r1
 800e8ae:	b2d1      	uxtb	r1, r2
 800e8b0:	2210      	movs	r2, #16
 800e8b2:	18ba      	adds	r2, r7, r2
 800e8b4:	54d1      	strb	r1, [r2, r3]
 800e8b6:	e033      	b.n	800e920 <dwt_writetodevice+0xaa>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800e8b8:	230e      	movs	r3, #14
 800e8ba:	18fb      	adds	r3, r7, r3
 800e8bc:	881b      	ldrh	r3, [r3, #0]
 800e8be:	b2da      	uxtb	r2, r3
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	1c59      	adds	r1, r3, #1
 800e8c4:	6179      	str	r1, [r7, #20]
 800e8c6:	2140      	movs	r1, #64	@ 0x40
 800e8c8:	4249      	negs	r1, r1
 800e8ca:	430a      	orrs	r2, r1
 800e8cc:	b2d1      	uxtb	r1, r2
 800e8ce:	2010      	movs	r0, #16
 800e8d0:	183a      	adds	r2, r7, r0
 800e8d2:	54d1      	strb	r1, [r2, r3]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800e8d4:	210c      	movs	r1, #12
 800e8d6:	187b      	adds	r3, r7, r1
 800e8d8:	881b      	ldrh	r3, [r3, #0]
 800e8da:	2b7f      	cmp	r3, #127	@ 0x7f
 800e8dc:	d808      	bhi.n	800e8f0 <dwt_writetodevice+0x7a>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	1c5a      	adds	r2, r3, #1
 800e8e2:	617a      	str	r2, [r7, #20]
 800e8e4:	187a      	adds	r2, r7, r1
 800e8e6:	8812      	ldrh	r2, [r2, #0]
 800e8e8:	b2d1      	uxtb	r1, r2
 800e8ea:	183a      	adds	r2, r7, r0
 800e8ec:	54d1      	strb	r1, [r2, r3]
 800e8ee:	e017      	b.n	800e920 <dwt_writetodevice+0xaa>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800e8f0:	200c      	movs	r0, #12
 800e8f2:	183b      	adds	r3, r7, r0
 800e8f4:	881b      	ldrh	r3, [r3, #0]
 800e8f6:	b2da      	uxtb	r2, r3
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	1c59      	adds	r1, r3, #1
 800e8fc:	6179      	str	r1, [r7, #20]
 800e8fe:	2180      	movs	r1, #128	@ 0x80
 800e900:	4249      	negs	r1, r1
 800e902:	430a      	orrs	r2, r1
 800e904:	b2d1      	uxtb	r1, r2
 800e906:	2410      	movs	r4, #16
 800e908:	193a      	adds	r2, r7, r4
 800e90a:	54d1      	strb	r1, [r2, r3]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800e90c:	183b      	adds	r3, r7, r0
 800e90e:	881b      	ldrh	r3, [r3, #0]
 800e910:	09db      	lsrs	r3, r3, #7
 800e912:	b299      	uxth	r1, r3
 800e914:	697b      	ldr	r3, [r7, #20]
 800e916:	1c5a      	adds	r2, r3, #1
 800e918:	617a      	str	r2, [r7, #20]
 800e91a:	b2c9      	uxtb	r1, r1
 800e91c:	193a      	adds	r2, r7, r4
 800e91e:	54d1      	strb	r1, [r2, r3]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	b298      	uxth	r0, r3
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	68ba      	ldr	r2, [r7, #8]
 800e928:	2110      	movs	r1, #16
 800e92a:	1879      	adds	r1, r7, r1
 800e92c:	f000 fc58 	bl	800f1e0 <writetospi>
} // end dwt_writetodevice()
 800e930:	46c0      	nop			@ (mov r8, r8)
 800e932:	46bd      	mov	sp, r7
 800e934:	b007      	add	sp, #28
 800e936:	bd90      	pop	{r4, r7, pc}

0800e938 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 800e938:	b590      	push	{r4, r7, lr}
 800e93a:	b087      	sub	sp, #28
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	60ba      	str	r2, [r7, #8]
 800e940:	607b      	str	r3, [r7, #4]
 800e942:	240e      	movs	r4, #14
 800e944:	193b      	adds	r3, r7, r4
 800e946:	1c02      	adds	r2, r0, #0
 800e948:	801a      	strh	r2, [r3, #0]
 800e94a:	200c      	movs	r0, #12
 800e94c:	183b      	adds	r3, r7, r0
 800e94e:	1c0a      	adds	r2, r1, #0
 800e950:	801a      	strh	r2, [r3, #0]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 800e952:	2300      	movs	r3, #0
 800e954:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 800e956:	183b      	adds	r3, r7, r0
 800e958:	881b      	ldrh	r3, [r3, #0]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d109      	bne.n	800e972 <dwt_readfromdevice+0x3a>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	1c5a      	adds	r2, r3, #1
 800e962:	617a      	str	r2, [r7, #20]
 800e964:	193a      	adds	r2, r7, r4
 800e966:	8812      	ldrh	r2, [r2, #0]
 800e968:	b2d1      	uxtb	r1, r2
 800e96a:	2210      	movs	r2, #16
 800e96c:	18ba      	adds	r2, r7, r2
 800e96e:	54d1      	strb	r1, [r2, r3]
 800e970:	e032      	b.n	800e9d8 <dwt_readfromdevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800e972:	230e      	movs	r3, #14
 800e974:	18fb      	adds	r3, r7, r3
 800e976:	881b      	ldrh	r3, [r3, #0]
 800e978:	b2da      	uxtb	r2, r3
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	1c59      	adds	r1, r3, #1
 800e97e:	6179      	str	r1, [r7, #20]
 800e980:	2140      	movs	r1, #64	@ 0x40
 800e982:	430a      	orrs	r2, r1
 800e984:	b2d1      	uxtb	r1, r2
 800e986:	2010      	movs	r0, #16
 800e988:	183a      	adds	r2, r7, r0
 800e98a:	54d1      	strb	r1, [r2, r3]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800e98c:	210c      	movs	r1, #12
 800e98e:	187b      	adds	r3, r7, r1
 800e990:	881b      	ldrh	r3, [r3, #0]
 800e992:	2b7f      	cmp	r3, #127	@ 0x7f
 800e994:	d808      	bhi.n	800e9a8 <dwt_readfromdevice+0x70>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800e996:	697b      	ldr	r3, [r7, #20]
 800e998:	1c5a      	adds	r2, r3, #1
 800e99a:	617a      	str	r2, [r7, #20]
 800e99c:	187a      	adds	r2, r7, r1
 800e99e:	8812      	ldrh	r2, [r2, #0]
 800e9a0:	b2d1      	uxtb	r1, r2
 800e9a2:	183a      	adds	r2, r7, r0
 800e9a4:	54d1      	strb	r1, [r2, r3]
 800e9a6:	e017      	b.n	800e9d8 <dwt_readfromdevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800e9a8:	200c      	movs	r0, #12
 800e9aa:	183b      	adds	r3, r7, r0
 800e9ac:	881b      	ldrh	r3, [r3, #0]
 800e9ae:	b2da      	uxtb	r2, r3
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	1c59      	adds	r1, r3, #1
 800e9b4:	6179      	str	r1, [r7, #20]
 800e9b6:	2180      	movs	r1, #128	@ 0x80
 800e9b8:	4249      	negs	r1, r1
 800e9ba:	430a      	orrs	r2, r1
 800e9bc:	b2d1      	uxtb	r1, r2
 800e9be:	2410      	movs	r4, #16
 800e9c0:	193a      	adds	r2, r7, r4
 800e9c2:	54d1      	strb	r1, [r2, r3]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800e9c4:	183b      	adds	r3, r7, r0
 800e9c6:	881b      	ldrh	r3, [r3, #0]
 800e9c8:	09db      	lsrs	r3, r3, #7
 800e9ca:	b299      	uxth	r1, r3
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	1c5a      	adds	r2, r3, #1
 800e9d0:	617a      	str	r2, [r7, #20]
 800e9d2:	b2c9      	uxtb	r1, r1
 800e9d4:	193a      	adds	r2, r7, r4
 800e9d6:	54d1      	strb	r1, [r2, r3]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	b298      	uxth	r0, r3
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	68ba      	ldr	r2, [r7, #8]
 800e9e0:	2110      	movs	r1, #16
 800e9e2:	1879      	adds	r1, r7, r1
 800e9e4:	f000 fc34 	bl	800f250 <readfromspi>
} // end dwt_readfromdevice()
 800e9e8:	46c0      	nop			@ (mov r8, r8)
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	b007      	add	sp, #28
 800e9ee:	bd90      	pop	{r4, r7, pc}

0800e9f0 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b086      	sub	sp, #24
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
 800e9f8:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	b298      	uxth	r0, r3
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	b299      	uxth	r1, r3
 800ea06:	230c      	movs	r3, #12
 800ea08:	18fb      	adds	r3, r7, r3
 800ea0a:	2204      	movs	r2, #4
 800ea0c:	f7ff ff94 	bl	800e938 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 800ea10:	2303      	movs	r3, #3
 800ea12:	613b      	str	r3, [r7, #16]
 800ea14:	e00b      	b.n	800ea2e <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	021b      	lsls	r3, r3, #8
 800ea1a:	220c      	movs	r2, #12
 800ea1c:	18b9      	adds	r1, r7, r2
 800ea1e:	693a      	ldr	r2, [r7, #16]
 800ea20:	188a      	adds	r2, r1, r2
 800ea22:	7812      	ldrb	r2, [r2, #0]
 800ea24:	189b      	adds	r3, r3, r2
 800ea26:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	3b01      	subs	r3, #1
 800ea2c:	613b      	str	r3, [r7, #16]
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	daf0      	bge.n	800ea16 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 800ea34:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 800ea36:	0018      	movs	r0, r3
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	b006      	add	sp, #24
 800ea3c:	bd80      	pop	{r7, pc}

0800ea3e <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 800ea3e:	b5b0      	push	{r4, r5, r7, lr}
 800ea40:	b084      	sub	sp, #16
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	6078      	str	r0, [r7, #4]
 800ea46:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 800ea48:	240e      	movs	r4, #14
 800ea4a:	193b      	adds	r3, r7, r4
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	801a      	strh	r2, [r3, #0]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	b298      	uxth	r0, r3
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	b299      	uxth	r1, r3
 800ea58:	250c      	movs	r5, #12
 800ea5a:	197b      	adds	r3, r7, r5
 800ea5c:	2202      	movs	r2, #2
 800ea5e:	f7ff ff6b 	bl	800e938 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 800ea62:	0029      	movs	r1, r5
 800ea64:	187b      	adds	r3, r7, r1
 800ea66:	785b      	ldrb	r3, [r3, #1]
 800ea68:	021b      	lsls	r3, r3, #8
 800ea6a:	b29a      	uxth	r2, r3
 800ea6c:	187b      	adds	r3, r7, r1
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	0019      	movs	r1, r3
 800ea72:	193b      	adds	r3, r7, r4
 800ea74:	1852      	adds	r2, r2, r1
 800ea76:	801a      	strh	r2, [r3, #0]
    return regval ;
 800ea78:	193b      	adds	r3, r7, r4
 800ea7a:	881b      	ldrh	r3, [r3, #0]

} // end dwt_read16bitoffsetreg()
 800ea7c:	0018      	movs	r0, r3
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	b004      	add	sp, #16
 800ea82:	bdb0      	pop	{r4, r5, r7, pc}

0800ea84 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 800ea84:	b590      	push	{r4, r7, lr}
 800ea86:	b085      	sub	sp, #20
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	b298      	uxth	r0, r3
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	b299      	uxth	r1, r3
 800ea96:	240f      	movs	r4, #15
 800ea98:	193b      	adds	r3, r7, r4
 800ea9a:	2201      	movs	r2, #1
 800ea9c:	f7ff ff4c 	bl	800e938 <dwt_readfromdevice>

    return regval ;
 800eaa0:	193b      	adds	r3, r7, r4
 800eaa2:	781b      	ldrb	r3, [r3, #0]
}
 800eaa4:	0018      	movs	r0, r3
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	b005      	add	sp, #20
 800eaaa:	bd90      	pop	{r4, r7, pc}

0800eaac <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b084      	sub	sp, #16
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	60f8      	str	r0, [r7, #12]
 800eab4:	60b9      	str	r1, [r7, #8]
 800eab6:	1dfb      	adds	r3, r7, #7
 800eab8:	701a      	strb	r2, [r3, #0]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	b298      	uxth	r0, r3
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	b299      	uxth	r1, r3
 800eac2:	1dfb      	adds	r3, r7, #7
 800eac4:	2201      	movs	r2, #1
 800eac6:	f7ff fed6 	bl	800e876 <dwt_writetodevice>
}
 800eaca:	46c0      	nop			@ (mov r8, r8)
 800eacc:	46bd      	mov	sp, r7
 800eace:	b004      	add	sp, #16
 800ead0:	bd80      	pop	{r7, pc}

0800ead2 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 800ead2:	b590      	push	{r4, r7, lr}
 800ead4:	b087      	sub	sp, #28
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	60f8      	str	r0, [r7, #12]
 800eada:	60b9      	str	r1, [r7, #8]
 800eadc:	1dbb      	adds	r3, r7, #6
 800eade:	801a      	strh	r2, [r3, #0]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 800eae0:	1dbb      	adds	r3, r7, #6
 800eae2:	881b      	ldrh	r3, [r3, #0]
 800eae4:	b2da      	uxtb	r2, r3
 800eae6:	2414      	movs	r4, #20
 800eae8:	193b      	adds	r3, r7, r4
 800eaea:	701a      	strb	r2, [r3, #0]
    buffer[1] = regval >> 8 ;
 800eaec:	1dbb      	adds	r3, r7, #6
 800eaee:	881b      	ldrh	r3, [r3, #0]
 800eaf0:	0a1b      	lsrs	r3, r3, #8
 800eaf2:	b29b      	uxth	r3, r3
 800eaf4:	b2da      	uxtb	r2, r3
 800eaf6:	193b      	adds	r3, r7, r4
 800eaf8:	705a      	strb	r2, [r3, #1]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	b298      	uxth	r0, r3
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	b299      	uxth	r1, r3
 800eb02:	193b      	adds	r3, r7, r4
 800eb04:	2202      	movs	r2, #2
 800eb06:	f7ff feb6 	bl	800e876 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 800eb0a:	46c0      	nop			@ (mov r8, r8)
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	b007      	add	sp, #28
 800eb10:	bd90      	pop	{r4, r7, pc}

0800eb12 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 800eb12:	b580      	push	{r7, lr}
 800eb14:	b086      	sub	sp, #24
 800eb16:	af00      	add	r7, sp, #0
 800eb18:	60f8      	str	r0, [r7, #12]
 800eb1a:	60b9      	str	r1, [r7, #8]
 800eb1c:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 800eb1e:	2300      	movs	r3, #0
 800eb20:	617b      	str	r3, [r7, #20]
 800eb22:	e00d      	b.n	800eb40 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	b2d9      	uxtb	r1, r3
 800eb28:	2310      	movs	r3, #16
 800eb2a:	18fa      	adds	r2, r7, r3
 800eb2c:	697b      	ldr	r3, [r7, #20]
 800eb2e:	18d3      	adds	r3, r2, r3
 800eb30:	1c0a      	adds	r2, r1, #0
 800eb32:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	0a1b      	lsrs	r3, r3, #8
 800eb38:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	3301      	adds	r3, #1
 800eb3e:	617b      	str	r3, [r7, #20]
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	2b03      	cmp	r3, #3
 800eb44:	ddee      	ble.n	800eb24 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	b298      	uxth	r0, r3
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	b299      	uxth	r1, r3
 800eb4e:	2310      	movs	r3, #16
 800eb50:	18fb      	adds	r3, r7, r3
 800eb52:	2204      	movs	r2, #4
 800eb54:	f7ff fe8f 	bl	800e876 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 800eb58:	46c0      	nop			@ (mov r8, r8)
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	b006      	add	sp, #24
 800eb5e:	bd80      	pop	{r7, pc}

0800eb60 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b084      	sub	sp, #16
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	0002      	movs	r2, r0
 800eb68:	1dbb      	adds	r3, r7, #6
 800eb6a:	801a      	strh	r2, [r3, #0]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 800eb6c:	1dbb      	adds	r3, r7, #6
 800eb6e:	881b      	ldrh	r3, [r3, #0]
 800eb70:	001a      	movs	r2, r3
 800eb72:	2104      	movs	r1, #4
 800eb74:	202d      	movs	r0, #45	@ 0x2d
 800eb76:	f7ff ffac 	bl	800ead2 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 800eb7a:	2203      	movs	r2, #3
 800eb7c:	2106      	movs	r1, #6
 800eb7e:	202d      	movs	r0, #45	@ 0x2d
 800eb80:	f7ff ff94 	bl	800eaac <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 800eb84:	2200      	movs	r2, #0
 800eb86:	2106      	movs	r1, #6
 800eb88:	202d      	movs	r0, #45	@ 0x2d
 800eb8a:	f7ff ff8f 	bl	800eaac <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 800eb8e:	210a      	movs	r1, #10
 800eb90:	202d      	movs	r0, #45	@ 0x2d
 800eb92:	f7ff ff2d 	bl	800e9f0 <dwt_read32bitoffsetreg>
 800eb96:	0003      	movs	r3, r0
 800eb98:	60fb      	str	r3, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
}
 800eb9c:	0018      	movs	r0, r3
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	b004      	add	sp, #16
 800eba2:	bd80      	pop	{r7, pc}

0800eba4 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 800eba8:	2200      	movs	r2, #0
 800ebaa:	2102      	movs	r1, #2
 800ebac:	202c      	movs	r0, #44	@ 0x2c
 800ebae:	f7ff ff7d 	bl	800eaac <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 800ebb2:	2202      	movs	r2, #2
 800ebb4:	2102      	movs	r1, #2
 800ebb6:	202c      	movs	r0, #44	@ 0x2c
 800ebb8:	f7ff ff78 	bl	800eaac <dwt_write8bitoffsetreg>
}
 800ebbc:	46c0      	nop			@ (mov r8, r8)
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}
	...

0800ebc4 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b082      	sub	sp, #8
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 800ebcc:	4b0c      	ldr	r3, [pc, #48]	@ (800ec00 <_dwt_configlde+0x3c>)
 800ebce:	226d      	movs	r2, #109	@ 0x6d
 800ebd0:	0019      	movs	r1, r3
 800ebd2:	202e      	movs	r0, #46	@ 0x2e
 800ebd4:	f7ff ff6a 	bl	800eaac <dwt_write8bitoffsetreg>

    if(prfIndex)
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d006      	beq.n	800ebec <_dwt_configlde+0x28>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 800ebde:	4a09      	ldr	r2, [pc, #36]	@ (800ec04 <_dwt_configlde+0x40>)
 800ebe0:	4b09      	ldr	r3, [pc, #36]	@ (800ec08 <_dwt_configlde+0x44>)
 800ebe2:	0019      	movs	r1, r3
 800ebe4:	202e      	movs	r0, #46	@ 0x2e
 800ebe6:	f7ff ff74 	bl	800ead2 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 800ebea:	e005      	b.n	800ebf8 <_dwt_configlde+0x34>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 800ebec:	4a07      	ldr	r2, [pc, #28]	@ (800ec0c <_dwt_configlde+0x48>)
 800ebee:	4b06      	ldr	r3, [pc, #24]	@ (800ec08 <_dwt_configlde+0x44>)
 800ebf0:	0019      	movs	r1, r3
 800ebf2:	202e      	movs	r0, #46	@ 0x2e
 800ebf4:	f7ff ff6d 	bl	800ead2 <dwt_write16bitoffsetreg>
}
 800ebf8:	46c0      	nop			@ (mov r8, r8)
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	b002      	add	sp, #8
 800ebfe:	bd80      	pop	{r7, pc}
 800ec00:	00000806 	.word	0x00000806
 800ec04:	00000607 	.word	0x00000607
 800ec08:	00001806 	.word	0x00001806
 800ec0c:	00001607 	.word	0x00001607

0800ec10 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 800ec14:	200e      	movs	r0, #14
 800ec16:	f000 f861 	bl	800ecdc <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 800ec1a:	2380      	movs	r3, #128	@ 0x80
 800ec1c:	021b      	lsls	r3, r3, #8
 800ec1e:	001a      	movs	r2, r3
 800ec20:	2106      	movs	r1, #6
 800ec22:	202d      	movs	r0, #45	@ 0x2d
 800ec24:	f7ff ff55 	bl	800ead2 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 800ec28:	2001      	movs	r0, #1
 800ec2a:	f000 facc 	bl	800f1c6 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800ec2e:	2001      	movs	r0, #1
 800ec30:	f000 f854 	bl	800ecdc <_dwt_enableclocks>
}
 800ec34:	46c0      	nop			@ (mov r8, r8)
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}
	...

0800ec3c <dwt_setdblrxbuffmode>:
 * output parameters
 *
 * no return value
 */
void dwt_setdblrxbuffmode(int enable)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
    if(enable)
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d00c      	beq.n	800ec64 <dwt_setdblrxbuffmode+0x28>
    {
        // Enable double RX buffer mode
        pdw1000local->sysCFGreg &= ~SYS_CFG_DIS_DRXB;
 800ec4a:	4b13      	ldr	r3, [pc, #76]	@ (800ec98 <dwt_setdblrxbuffmode+0x5c>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	691a      	ldr	r2, [r3, #16]
 800ec50:	4b11      	ldr	r3, [pc, #68]	@ (800ec98 <dwt_setdblrxbuffmode+0x5c>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	4911      	ldr	r1, [pc, #68]	@ (800ec9c <dwt_setdblrxbuffmode+0x60>)
 800ec56:	400a      	ands	r2, r1
 800ec58:	611a      	str	r2, [r3, #16]
        pdw1000local->dblbuffon = 1;
 800ec5a:	4b0f      	ldr	r3, [pc, #60]	@ (800ec98 <dwt_setdblrxbuffmode+0x5c>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	2201      	movs	r2, #1
 800ec60:	751a      	strb	r2, [r3, #20]
 800ec62:	e00c      	b.n	800ec7e <dwt_setdblrxbuffmode+0x42>
    }
    else
    {
        // Disable double RX buffer mode
        pdw1000local->sysCFGreg |= SYS_CFG_DIS_DRXB;
 800ec64:	4b0c      	ldr	r3, [pc, #48]	@ (800ec98 <dwt_setdblrxbuffmode+0x5c>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	691a      	ldr	r2, [r3, #16]
 800ec6a:	4b0b      	ldr	r3, [pc, #44]	@ (800ec98 <dwt_setdblrxbuffmode+0x5c>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	2180      	movs	r1, #128	@ 0x80
 800ec70:	0149      	lsls	r1, r1, #5
 800ec72:	430a      	orrs	r2, r1
 800ec74:	611a      	str	r2, [r3, #16]
        pdw1000local->dblbuffon = 0;
 800ec76:	4b08      	ldr	r3, [pc, #32]	@ (800ec98 <dwt_setdblrxbuffmode+0x5c>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	751a      	strb	r2, [r3, #20]
    }

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 800ec7e:	4b06      	ldr	r3, [pc, #24]	@ (800ec98 <dwt_setdblrxbuffmode+0x5c>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	691b      	ldr	r3, [r3, #16]
 800ec84:	001a      	movs	r2, r3
 800ec86:	2100      	movs	r1, #0
 800ec88:	2004      	movs	r0, #4
 800ec8a:	f7ff ff42 	bl	800eb12 <dwt_write32bitoffsetreg>
}
 800ec8e:	46c0      	nop			@ (mov r8, r8)
 800ec90:	46bd      	mov	sp, r7
 800ec92:	b002      	add	sp, #8
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	46c0      	nop			@ (mov r8, r8)
 800ec98:	200001d8 	.word	0x200001d8
 800ec9c:	ffffefff 	.word	0xffffefff

0800eca0 <dwt_setrxaftertxdelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32 rxDelayTime)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b084      	sub	sp, #16
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 800eca8:	2100      	movs	r1, #0
 800ecaa:	201a      	movs	r0, #26
 800ecac:	f7ff fea0 	bl	800e9f0 <dwt_read32bitoffsetreg>
 800ecb0:	0003      	movs	r3, r0
 800ecb2:	60fb      	str	r3, [r7, #12]

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	0d1b      	lsrs	r3, r3, #20
 800ecb8:	051b      	lsls	r3, r3, #20
 800ecba:	60fb      	str	r3, [r7, #12]

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	031b      	lsls	r3, r3, #12
 800ecc0:	0b1b      	lsrs	r3, r3, #12
 800ecc2:	68fa      	ldr	r2, [r7, #12]
 800ecc4:	4313      	orrs	r3, r2
 800ecc6:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	001a      	movs	r2, r3
 800eccc:	2100      	movs	r1, #0
 800ecce:	201a      	movs	r0, #26
 800ecd0:	f7ff ff1f 	bl	800eb12 <dwt_write32bitoffsetreg>
}
 800ecd4:	46c0      	nop			@ (mov r8, r8)
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	b004      	add	sp, #16
 800ecda:	bd80      	pop	{r7, pc}

0800ecdc <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 800ecdc:	b590      	push	{r4, r7, lr}
 800ecde:	b085      	sub	sp, #20
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 800ece4:	230c      	movs	r3, #12
 800ece6:	18fb      	adds	r3, r7, r3
 800ece8:	2202      	movs	r2, #2
 800ecea:	2100      	movs	r1, #0
 800ecec:	2036      	movs	r0, #54	@ 0x36
 800ecee:	f7ff fe23 	bl	800e938 <dwt_readfromdevice>
    switch(clocks)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2b0e      	cmp	r3, #14
 800ecf6:	d900      	bls.n	800ecfa <_dwt_enableclocks+0x1e>
 800ecf8:	e07b      	b.n	800edf2 <_dwt_enableclocks+0x116>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	009a      	lsls	r2, r3, #2
 800ecfe:	4b46      	ldr	r3, [pc, #280]	@ (800ee18 <_dwt_enableclocks+0x13c>)
 800ed00:	18d3      	adds	r3, r2, r3
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	469f      	mov	pc, r3
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 800ed06:	210c      	movs	r1, #12
 800ed08:	187b      	adds	r3, r7, r1
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	701a      	strb	r2, [r3, #0]
            reg[1] = reg[1] & 0xfe;
 800ed0e:	187b      	adds	r3, r7, r1
 800ed10:	785b      	ldrb	r3, [r3, #1]
 800ed12:	2201      	movs	r2, #1
 800ed14:	4393      	bics	r3, r2
 800ed16:	b2da      	uxtb	r2, r3
 800ed18:	187b      	adds	r3, r7, r1
 800ed1a:	705a      	strb	r2, [r3, #1]
        }
        break;
 800ed1c:	e06a      	b.n	800edf4 <_dwt_enableclocks+0x118>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 800ed1e:	210c      	movs	r1, #12
 800ed20:	187b      	adds	r3, r7, r1
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	b25b      	sxtb	r3, r3
 800ed26:	2203      	movs	r2, #3
 800ed28:	4393      	bics	r3, r2
 800ed2a:	b25b      	sxtb	r3, r3
 800ed2c:	2201      	movs	r2, #1
 800ed2e:	4313      	orrs	r3, r2
 800ed30:	b25b      	sxtb	r3, r3
 800ed32:	b2da      	uxtb	r2, r3
 800ed34:	187b      	adds	r3, r7, r1
 800ed36:	701a      	strb	r2, [r3, #0]
        }
        break;
 800ed38:	e05c      	b.n	800edf4 <_dwt_enableclocks+0x118>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 800ed3a:	210c      	movs	r1, #12
 800ed3c:	187b      	adds	r3, r7, r1
 800ed3e:	781b      	ldrb	r3, [r3, #0]
 800ed40:	b25b      	sxtb	r3, r3
 800ed42:	2203      	movs	r2, #3
 800ed44:	4393      	bics	r3, r2
 800ed46:	b25b      	sxtb	r3, r3
 800ed48:	2202      	movs	r2, #2
 800ed4a:	4313      	orrs	r3, r2
 800ed4c:	b25b      	sxtb	r3, r3
 800ed4e:	b2da      	uxtb	r2, r3
 800ed50:	187b      	adds	r3, r7, r1
 800ed52:	701a      	strb	r2, [r3, #0]
        }
        break;
 800ed54:	e04e      	b.n	800edf4 <_dwt_enableclocks+0x118>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 800ed56:	210c      	movs	r1, #12
 800ed58:	187b      	adds	r3, r7, r1
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	b25b      	sxtb	r3, r3
 800ed5e:	224c      	movs	r2, #76	@ 0x4c
 800ed60:	4393      	bics	r3, r2
 800ed62:	b25b      	sxtb	r3, r3
 800ed64:	2248      	movs	r2, #72	@ 0x48
 800ed66:	4313      	orrs	r3, r2
 800ed68:	b25b      	sxtb	r3, r3
 800ed6a:	b2da      	uxtb	r2, r3
 800ed6c:	187b      	adds	r3, r7, r1
 800ed6e:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x80 | reg[1];
 800ed70:	187b      	adds	r3, r7, r1
 800ed72:	785b      	ldrb	r3, [r3, #1]
 800ed74:	2280      	movs	r2, #128	@ 0x80
 800ed76:	4252      	negs	r2, r2
 800ed78:	4313      	orrs	r3, r2
 800ed7a:	b2da      	uxtb	r2, r3
 800ed7c:	187b      	adds	r3, r7, r1
 800ed7e:	705a      	strb	r2, [r3, #1]
        }
        break;
 800ed80:	e038      	b.n	800edf4 <_dwt_enableclocks+0x118>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 800ed82:	210c      	movs	r1, #12
 800ed84:	187b      	adds	r3, r7, r1
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	224c      	movs	r2, #76	@ 0x4c
 800ed8a:	4393      	bics	r3, r2
 800ed8c:	b2da      	uxtb	r2, r3
 800ed8e:	187b      	adds	r3, r7, r1
 800ed90:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x7f & reg[1];
 800ed92:	187b      	adds	r3, r7, r1
 800ed94:	785b      	ldrb	r3, [r3, #1]
 800ed96:	227f      	movs	r2, #127	@ 0x7f
 800ed98:	4013      	ands	r3, r2
 800ed9a:	b2da      	uxtb	r2, r3
 800ed9c:	187b      	adds	r3, r7, r1
 800ed9e:	705a      	strb	r2, [r3, #1]
        }
        break;
 800eda0:	e028      	b.n	800edf4 <_dwt_enableclocks+0x118>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 800eda2:	210c      	movs	r1, #12
 800eda4:	187b      	adds	r3, r7, r1
 800eda6:	785b      	ldrb	r3, [r3, #1]
 800eda8:	2202      	movs	r2, #2
 800edaa:	4313      	orrs	r3, r2
 800edac:	b2da      	uxtb	r2, r3
 800edae:	187b      	adds	r3, r7, r1
 800edb0:	705a      	strb	r2, [r3, #1]
        }
        break;
 800edb2:	e01f      	b.n	800edf4 <_dwt_enableclocks+0x118>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 800edb4:	210c      	movs	r1, #12
 800edb6:	187b      	adds	r3, r7, r1
 800edb8:	785b      	ldrb	r3, [r3, #1]
 800edba:	2202      	movs	r2, #2
 800edbc:	4393      	bics	r3, r2
 800edbe:	b2da      	uxtb	r2, r3
 800edc0:	187b      	adds	r3, r7, r1
 800edc2:	705a      	strb	r2, [r3, #1]
        }
        break;
 800edc4:	e016      	b.n	800edf4 <_dwt_enableclocks+0x118>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 800edc6:	210c      	movs	r1, #12
 800edc8:	187b      	adds	r3, r7, r1
 800edca:	781b      	ldrb	r3, [r3, #0]
 800edcc:	b25b      	sxtb	r3, r3
 800edce:	2230      	movs	r2, #48	@ 0x30
 800edd0:	4393      	bics	r3, r2
 800edd2:	b25b      	sxtb	r3, r3
 800edd4:	2220      	movs	r2, #32
 800edd6:	4313      	orrs	r3, r2
 800edd8:	b25b      	sxtb	r3, r3
 800edda:	b2da      	uxtb	r2, r3
 800eddc:	187b      	adds	r3, r7, r1
 800edde:	701a      	strb	r2, [r3, #0]
        }
        break;
 800ede0:	e008      	b.n	800edf4 <_dwt_enableclocks+0x118>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 800ede2:	210c      	movs	r1, #12
 800ede4:	187b      	adds	r3, r7, r1
 800ede6:	2201      	movs	r2, #1
 800ede8:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x03;
 800edea:	187b      	adds	r3, r7, r1
 800edec:	2203      	movs	r2, #3
 800edee:	705a      	strb	r2, [r3, #1]
        }
        break;
 800edf0:	e000      	b.n	800edf4 <_dwt_enableclocks+0x118>
        default:
        break;
 800edf2:	46c0      	nop			@ (mov r8, r8)
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 800edf4:	240c      	movs	r4, #12
 800edf6:	193b      	adds	r3, r7, r4
 800edf8:	2201      	movs	r2, #1
 800edfa:	2100      	movs	r1, #0
 800edfc:	2036      	movs	r0, #54	@ 0x36
 800edfe:	f7ff fd3a 	bl	800e876 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 800ee02:	193b      	adds	r3, r7, r4
 800ee04:	3301      	adds	r3, #1
 800ee06:	2201      	movs	r2, #1
 800ee08:	2101      	movs	r1, #1
 800ee0a:	2036      	movs	r0, #54	@ 0x36
 800ee0c:	f7ff fd33 	bl	800e876 <dwt_writetodevice>

} // end _dwt_enableclocks()
 800ee10:	46c0      	nop			@ (mov r8, r8)
 800ee12:	46bd      	mov	sp, r7
 800ee14:	b005      	add	sp, #20
 800ee16:	bd90      	pop	{r4, r7, pc}
 800ee18:	08012624 	.word	0x08012624

0800ee1c <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 800ee20:	2000      	movs	r0, #0
 800ee22:	f7ff ff5b 	bl	800ecdc <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 800ee26:	2200      	movs	r2, #0
 800ee28:	2104      	movs	r1, #4
 800ee2a:	2036      	movs	r0, #54	@ 0x36
 800ee2c:	f7ff fe51 	bl	800ead2 <dwt_write16bitoffsetreg>
}
 800ee30:	46c0      	nop			@ (mov r8, r8)
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}

0800ee36 <dwt_setdelayedtrxtime>:
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32 starttime)
{
 800ee36:	b580      	push	{r7, lr}
 800ee38:	b082      	sub	sp, #8
 800ee3a:	af00      	add	r7, sp, #0
 800ee3c:	6078      	str	r0, [r7, #4]
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	001a      	movs	r2, r3
 800ee42:	2101      	movs	r1, #1
 800ee44:	200a      	movs	r0, #10
 800ee46:	f7ff fe64 	bl	800eb12 <dwt_write32bitoffsetreg>

} // end dwt_setdelayedtrxtime()
 800ee4a:	46c0      	nop			@ (mov r8, r8)
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	b002      	add	sp, #8
 800ee50:	bd80      	pop	{r7, pc}
	...

0800ee54 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 800ee54:	b5b0      	push	{r4, r5, r7, lr}
 800ee56:	b084      	sub	sp, #16
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	0002      	movs	r2, r0
 800ee5c:	1dfb      	adds	r3, r7, #7
 800ee5e:	701a      	strb	r2, [r3, #0]
    int retval = DWT_SUCCESS ;
 800ee60:	2300      	movs	r3, #0
 800ee62:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 800ee64:	210b      	movs	r1, #11
 800ee66:	187b      	adds	r3, r7, r1
 800ee68:	2200      	movs	r2, #0
 800ee6a:	701a      	strb	r2, [r3, #0]
    uint16 checkTxOK = 0 ;
 800ee6c:	2308      	movs	r3, #8
 800ee6e:	18fb      	adds	r3, r7, r3
 800ee70:	2200      	movs	r2, #0
 800ee72:	801a      	strh	r2, [r3, #0]

    if(mode & DWT_RESPONSE_EXPECTED)
 800ee74:	1dfb      	adds	r3, r7, #7
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	2202      	movs	r2, #2
 800ee7a:	4013      	ands	r3, r2
 800ee7c:	d006      	beq.n	800ee8c <dwt_starttx+0x38>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 800ee7e:	187b      	adds	r3, r7, r1
 800ee80:	2280      	movs	r2, #128	@ 0x80
 800ee82:	701a      	strb	r2, [r3, #0]
        pdw1000local->wait4resp = 1;
 800ee84:	4b21      	ldr	r3, [pc, #132]	@ (800ef0c <dwt_starttx+0xb8>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	2201      	movs	r2, #1
 800ee8a:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 800ee8c:	1dfb      	adds	r3, r7, #7
 800ee8e:	781b      	ldrb	r3, [r3, #0]
 800ee90:	2201      	movs	r2, #1
 800ee92:	4013      	ands	r3, r2
 800ee94:	d027      	beq.n	800eee6 <dwt_starttx+0x92>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 800ee96:	200b      	movs	r0, #11
 800ee98:	183b      	adds	r3, r7, r0
 800ee9a:	183a      	adds	r2, r7, r0
 800ee9c:	7812      	ldrb	r2, [r2, #0]
 800ee9e:	2106      	movs	r1, #6
 800eea0:	430a      	orrs	r2, r1
 800eea2:	701a      	strb	r2, [r3, #0]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800eea4:	183b      	adds	r3, r7, r0
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	001a      	movs	r2, r3
 800eeaa:	2100      	movs	r1, #0
 800eeac:	200d      	movs	r0, #13
 800eeae:	f7ff fdfd 	bl	800eaac <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 800eeb2:	2508      	movs	r5, #8
 800eeb4:	197c      	adds	r4, r7, r5
 800eeb6:	2103      	movs	r1, #3
 800eeb8:	200f      	movs	r0, #15
 800eeba:	f7ff fdc0 	bl	800ea3e <dwt_read16bitoffsetreg>
 800eebe:	0003      	movs	r3, r0
 800eec0:	8023      	strh	r3, [r4, #0]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 800eec2:	197b      	adds	r3, r7, r5
 800eec4:	881a      	ldrh	r2, [r3, #0]
 800eec6:	2381      	movs	r3, #129	@ 0x81
 800eec8:	00db      	lsls	r3, r3, #3
 800eeca:	4013      	ands	r3, r2
 800eecc:	d102      	bne.n	800eed4 <dwt_starttx+0x80>
        {
            retval = DWT_SUCCESS ; // All okay
 800eece:	2300      	movs	r3, #0
 800eed0:	60fb      	str	r3, [r7, #12]
 800eed2:	e016      	b.n	800ef02 <dwt_starttx+0xae>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 800eed4:	2240      	movs	r2, #64	@ 0x40
 800eed6:	2100      	movs	r1, #0
 800eed8:	200d      	movs	r0, #13
 800eeda:	f7ff fde7 	bl	800eaac <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 800eede:	2301      	movs	r3, #1
 800eee0:	425b      	negs	r3, r3
 800eee2:	60fb      	str	r3, [r7, #12]
 800eee4:	e00d      	b.n	800ef02 <dwt_starttx+0xae>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 800eee6:	200b      	movs	r0, #11
 800eee8:	183b      	adds	r3, r7, r0
 800eeea:	183a      	adds	r2, r7, r0
 800eeec:	7812      	ldrb	r2, [r2, #0]
 800eeee:	2102      	movs	r1, #2
 800eef0:	430a      	orrs	r2, r1
 800eef2:	701a      	strb	r2, [r3, #0]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800eef4:	183b      	adds	r3, r7, r0
 800eef6:	781b      	ldrb	r3, [r3, #0]
 800eef8:	001a      	movs	r2, r3
 800eefa:	2100      	movs	r1, #0
 800eefc:	200d      	movs	r0, #13
 800eefe:	f7ff fdd5 	bl	800eaac <dwt_write8bitoffsetreg>
    }

    return retval;
 800ef02:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 800ef04:	0018      	movs	r0, r3
 800ef06:	46bd      	mov	sp, r7
 800ef08:	b004      	add	sp, #16
 800ef0a:	bdb0      	pop	{r4, r5, r7, pc}
 800ef0c:	200001d8 	.word	0x200001d8

0800ef10 <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b082      	sub	sp, #8
 800ef14:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 800ef16:	2100      	movs	r1, #0
 800ef18:	200e      	movs	r0, #14
 800ef1a:	f7ff fd69 	bl	800e9f0 <dwt_read32bitoffsetreg>
 800ef1e:	0003      	movs	r3, r0
 800ef20:	607b      	str	r3, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 800ef22:	f000 f932 	bl	800f18a <decamutexon>
 800ef26:	0003      	movs	r3, r0
 800ef28:	603b      	str	r3, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	2100      	movs	r1, #0
 800ef2e:	200e      	movs	r0, #14
 800ef30:	f7ff fdef 	bl	800eb12 <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 800ef34:	2240      	movs	r2, #64	@ 0x40
 800ef36:	2100      	movs	r1, #0
 800ef38:	200d      	movs	r0, #13
 800ef3a:	f7ff fdb7 	bl	800eaac <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 800ef3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ef74 <dwt_forcetrxoff+0x64>)
 800ef40:	001a      	movs	r2, r3
 800ef42:	2100      	movs	r1, #0
 800ef44:	200f      	movs	r0, #15
 800ef46:	f7ff fde4 	bl	800eb12 <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 800ef4a:	f000 f817 	bl	800ef7c <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	001a      	movs	r2, r3
 800ef52:	2100      	movs	r1, #0
 800ef54:	200e      	movs	r0, #14
 800ef56:	f7ff fddc 	bl	800eb12 <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	0018      	movs	r0, r3
 800ef5e:	f000 f925 	bl	800f1ac <decamutexoff>
    pdw1000local->wait4resp = 0;
 800ef62:	4b05      	ldr	r3, [pc, #20]	@ (800ef78 <dwt_forcetrxoff+0x68>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	2200      	movs	r2, #0
 800ef68:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 800ef6a:	46c0      	nop			@ (mov r8, r8)
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	b002      	add	sp, #8
 800ef70:	bd80      	pop	{r7, pc}
 800ef72:	46c0      	nop			@ (mov r8, r8)
 800ef74:	2427fff8 	.word	0x2427fff8
 800ef78:	200001d8 	.word	0x200001d8

0800ef7c <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 800ef7c:	b590      	push	{r4, r7, lr}
 800ef7e:	b083      	sub	sp, #12
 800ef80:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 800ef82:	1dfc      	adds	r4, r7, #7
 800ef84:	2103      	movs	r1, #3
 800ef86:	200f      	movs	r0, #15
 800ef88:	f7ff fd7c 	bl	800ea84 <dwt_read8bitoffsetreg>
 800ef8c:	0003      	movs	r3, r0
 800ef8e:	7023      	strb	r3, [r4, #0]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 800ef90:	1dfb      	adds	r3, r7, #7
 800ef92:	781a      	ldrb	r2, [r3, #0]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 800ef94:	1dfb      	adds	r3, r7, #7
 800ef96:	781b      	ldrb	r3, [r3, #0]
 800ef98:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 800ef9a:	4053      	eors	r3, r2
 800ef9c:	2280      	movs	r2, #128	@ 0x80
 800ef9e:	4013      	ands	r3, r2
 800efa0:	d004      	beq.n	800efac <dwt_syncrxbufptrs+0x30>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 800efa2:	2201      	movs	r2, #1
 800efa4:	2103      	movs	r1, #3
 800efa6:	200d      	movs	r0, #13
 800efa8:	f7ff fd80 	bl	800eaac <dwt_write8bitoffsetreg>
    }
}
 800efac:	46c0      	nop			@ (mov r8, r8)
 800efae:	46bd      	mov	sp, r7
 800efb0:	b003      	add	sp, #12
 800efb2:	bd90      	pop	{r4, r7, pc}

0800efb4 <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 800efb4:	b5b0      	push	{r4, r5, r7, lr}
 800efb6:	b084      	sub	sp, #16
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2204      	movs	r2, #4
 800efc0:	4013      	ands	r3, r2
 800efc2:	d101      	bne.n	800efc8 <dwt_rxenable+0x14>
    {
        dwt_syncrxbufptrs();
 800efc4:	f7ff ffda 	bl	800ef7c <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 800efc8:	210e      	movs	r1, #14
 800efca:	187b      	adds	r3, r7, r1
 800efcc:	2280      	movs	r2, #128	@ 0x80
 800efce:	0052      	lsls	r2, r2, #1
 800efd0:	801a      	strh	r2, [r3, #0]

    if (mode & DWT_START_RX_DELAYED)
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2201      	movs	r2, #1
 800efd6:	4013      	ands	r3, r2
 800efd8:	d006      	beq.n	800efe8 <dwt_rxenable+0x34>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 800efda:	187b      	adds	r3, r7, r1
 800efdc:	187a      	adds	r2, r7, r1
 800efde:	8812      	ldrh	r2, [r2, #0]
 800efe0:	2180      	movs	r1, #128	@ 0x80
 800efe2:	0089      	lsls	r1, r1, #2
 800efe4:	430a      	orrs	r2, r1
 800efe6:	801a      	strh	r2, [r3, #0]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800efe8:	230e      	movs	r3, #14
 800efea:	18fb      	adds	r3, r7, r3
 800efec:	881b      	ldrh	r3, [r3, #0]
 800efee:	001a      	movs	r2, r3
 800eff0:	2100      	movs	r1, #0
 800eff2:	200d      	movs	r0, #13
 800eff4:	f7ff fd6d 	bl	800ead2 <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2201      	movs	r2, #1
 800effc:	4013      	ands	r3, r2
 800effe:	d01c      	beq.n	800f03a <dwt_rxenable+0x86>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 800f000:	250d      	movs	r5, #13
 800f002:	197c      	adds	r4, r7, r5
 800f004:	2103      	movs	r1, #3
 800f006:	200f      	movs	r0, #15
 800f008:	f7ff fd3c 	bl	800ea84 <dwt_read8bitoffsetreg>
 800f00c:	0003      	movs	r3, r0
 800f00e:	7023      	strb	r3, [r4, #0]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 800f010:	197b      	adds	r3, r7, r5
 800f012:	781b      	ldrb	r3, [r3, #0]
 800f014:	2208      	movs	r2, #8
 800f016:	4013      	ands	r3, r2
 800f018:	d00f      	beq.n	800f03a <dwt_rxenable+0x86>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 800f01a:	f7ff ff79 	bl	800ef10 <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2202      	movs	r2, #2
 800f022:	4013      	ands	r3, r2
 800f024:	d106      	bne.n	800f034 <dwt_rxenable+0x80>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 800f026:	2380      	movs	r3, #128	@ 0x80
 800f028:	005b      	lsls	r3, r3, #1
 800f02a:	001a      	movs	r2, r3
 800f02c:	2100      	movs	r1, #0
 800f02e:	200d      	movs	r0, #13
 800f030:	f7ff fd4f 	bl	800ead2 <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 800f034:	2301      	movs	r3, #1
 800f036:	425b      	negs	r3, r3
 800f038:	e000      	b.n	800f03c <dwt_rxenable+0x88>
        }
    }

    return DWT_SUCCESS;
 800f03a:	2300      	movs	r3, #0
} // end dwt_rxenable()
 800f03c:	0018      	movs	r0, r3
 800f03e:	46bd      	mov	sp, r7
 800f040:	b004      	add	sp, #16
 800f042:	bdb0      	pop	{r4, r5, r7, pc}

0800f044 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 800f044:	b5b0      	push	{r4, r5, r7, lr}
 800f046:	b084      	sub	sp, #16
 800f048:	af00      	add	r7, sp, #0
 800f04a:	0002      	movs	r2, r0
 800f04c:	1dbb      	adds	r3, r7, #6
 800f04e:	801a      	strh	r2, [r3, #0]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 800f050:	250f      	movs	r5, #15
 800f052:	197c      	adds	r4, r7, r5
 800f054:	2103      	movs	r1, #3
 800f056:	2004      	movs	r0, #4
 800f058:	f7ff fd14 	bl	800ea84 <dwt_read8bitoffsetreg>
 800f05c:	0003      	movs	r3, r0
 800f05e:	7023      	strb	r3, [r4, #0]

    if(time > 0)
 800f060:	1dbb      	adds	r3, r7, #6
 800f062:	881b      	ldrh	r3, [r3, #0]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d01e      	beq.n	800f0a6 <dwt_setrxtimeout+0x62>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 800f068:	1dbb      	adds	r3, r7, #6
 800f06a:	881b      	ldrh	r3, [r3, #0]
 800f06c:	001a      	movs	r2, r3
 800f06e:	2100      	movs	r1, #0
 800f070:	200c      	movs	r0, #12
 800f072:	f7ff fd2e 	bl	800ead2 <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 800f076:	0028      	movs	r0, r5
 800f078:	183b      	adds	r3, r7, r0
 800f07a:	183a      	adds	r2, r7, r0
 800f07c:	7812      	ldrb	r2, [r2, #0]
 800f07e:	2110      	movs	r1, #16
 800f080:	430a      	orrs	r2, r1
 800f082:	701a      	strb	r2, [r3, #0]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 800f084:	4b15      	ldr	r3, [pc, #84]	@ (800f0dc <dwt_setrxtimeout+0x98>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	691a      	ldr	r2, [r3, #16]
 800f08a:	4b14      	ldr	r3, [pc, #80]	@ (800f0dc <dwt_setrxtimeout+0x98>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	2180      	movs	r1, #128	@ 0x80
 800f090:	0549      	lsls	r1, r1, #21
 800f092:	430a      	orrs	r2, r1
 800f094:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 800f096:	183b      	adds	r3, r7, r0
 800f098:	781b      	ldrb	r3, [r3, #0]
 800f09a:	001a      	movs	r2, r3
 800f09c:	2103      	movs	r1, #3
 800f09e:	2004      	movs	r0, #4
 800f0a0:	f7ff fd04 	bl	800eaac <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 800f0a4:	e015      	b.n	800f0d2 <dwt_setrxtimeout+0x8e>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 800f0a6:	200f      	movs	r0, #15
 800f0a8:	183b      	adds	r3, r7, r0
 800f0aa:	183a      	adds	r2, r7, r0
 800f0ac:	7812      	ldrb	r2, [r2, #0]
 800f0ae:	2110      	movs	r1, #16
 800f0b0:	438a      	bics	r2, r1
 800f0b2:	701a      	strb	r2, [r3, #0]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 800f0b4:	4b09      	ldr	r3, [pc, #36]	@ (800f0dc <dwt_setrxtimeout+0x98>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	691a      	ldr	r2, [r3, #16]
 800f0ba:	4b08      	ldr	r3, [pc, #32]	@ (800f0dc <dwt_setrxtimeout+0x98>)
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	4908      	ldr	r1, [pc, #32]	@ (800f0e0 <dwt_setrxtimeout+0x9c>)
 800f0c0:	400a      	ands	r2, r1
 800f0c2:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 800f0c4:	183b      	adds	r3, r7, r0
 800f0c6:	781b      	ldrb	r3, [r3, #0]
 800f0c8:	001a      	movs	r2, r3
 800f0ca:	2103      	movs	r1, #3
 800f0cc:	2004      	movs	r0, #4
 800f0ce:	f7ff fced 	bl	800eaac <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 800f0d2:	46c0      	nop			@ (mov r8, r8)
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	b004      	add	sp, #16
 800f0d8:	bdb0      	pop	{r4, r5, r7, pc}
 800f0da:	46c0      	nop			@ (mov r8, r8)
 800f0dc:	200001d8 	.word	0x200001d8
 800f0e0:	efffffff 	.word	0xefffffff

0800f0e4 <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	af00      	add	r7, sp, #0
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 800f0e8:	22e0      	movs	r2, #224	@ 0xe0
 800f0ea:	2103      	movs	r1, #3
 800f0ec:	2036      	movs	r0, #54	@ 0x36
 800f0ee:	f7ff fcdd 	bl	800eaac <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 800f0f2:	22f0      	movs	r2, #240	@ 0xf0
 800f0f4:	2103      	movs	r1, #3
 800f0f6:	2036      	movs	r0, #54	@ 0x36
 800f0f8:	f7ff fcd8 	bl	800eaac <dwt_write8bitoffsetreg>
}
 800f0fc:	46c0      	nop			@ (mov r8, r8)
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}
	...

0800f104 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 800f108:	f7ff fe88 	bl	800ee1c <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 800f10c:	2200      	movs	r2, #0
 800f10e:	2100      	movs	r1, #0
 800f110:	202c      	movs	r0, #44	@ 0x2c
 800f112:	f7ff fcde 	bl	800ead2 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 800f116:	2200      	movs	r2, #0
 800f118:	2106      	movs	r1, #6
 800f11a:	202c      	movs	r0, #44	@ 0x2c
 800f11c:	f7ff fcc6 	bl	800eaac <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 800f120:	f7ff fd40 	bl	800eba4 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 800f124:	2200      	movs	r2, #0
 800f126:	2103      	movs	r1, #3
 800f128:	2036      	movs	r0, #54	@ 0x36
 800f12a:	f7ff fcbf 	bl	800eaac <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 800f12e:	2001      	movs	r0, #1
 800f130:	f000 f849 	bl	800f1c6 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 800f134:	22f0      	movs	r2, #240	@ 0xf0
 800f136:	2103      	movs	r1, #3
 800f138:	2036      	movs	r0, #54	@ 0x36
 800f13a:	f7ff fcb7 	bl	800eaac <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 800f13e:	4b03      	ldr	r3, [pc, #12]	@ (800f14c <dwt_softreset+0x48>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	2200      	movs	r2, #0
 800f144:	755a      	strb	r2, [r3, #21]
}
 800f146:	46c0      	nop			@ (mov r8, r8)
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}
 800f14c:	200001d8 	.word	0x200001d8

0800f150 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b084      	sub	sp, #16
 800f154:	af00      	add	r7, sp, #0
 800f156:	0002      	movs	r2, r0
 800f158:	1dfb      	adds	r3, r7, #7
 800f15a:	701a      	strb	r2, [r3, #0]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 800f15c:	1dfb      	adds	r3, r7, #7
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	b25b      	sxtb	r3, r3
 800f162:	221f      	movs	r2, #31
 800f164:	4013      	ands	r3, r2
 800f166:	b25b      	sxtb	r3, r3
 800f168:	2260      	movs	r2, #96	@ 0x60
 800f16a:	4313      	orrs	r3, r2
 800f16c:	b25a      	sxtb	r2, r3
 800f16e:	210f      	movs	r1, #15
 800f170:	187b      	adds	r3, r7, r1
 800f172:	701a      	strb	r2, [r3, #0]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 800f174:	187b      	adds	r3, r7, r1
 800f176:	781b      	ldrb	r3, [r3, #0]
 800f178:	001a      	movs	r2, r3
 800f17a:	210e      	movs	r1, #14
 800f17c:	202b      	movs	r0, #43	@ 0x2b
 800f17e:	f7ff fc95 	bl	800eaac <dwt_write8bitoffsetreg>
}
 800f182:	46c0      	nop			@ (mov r8, r8)
 800f184:	46bd      	mov	sp, r7
 800f186:	b004      	add	sp, #16
 800f188:	bd80      	pop	{r7, pc}

0800f18a <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 800f18a:	b580      	push	{r7, lr}
 800f18c:	b082      	sub	sp, #8
 800f18e:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800f190:	f000 f9e2 	bl	800f558 <port_GetEXT_IRQStatus>
 800f194:	0003      	movs	r3, r0
 800f196:	607b      	str	r3, [r7, #4]

	if(s) {
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d001      	beq.n	800f1a2 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 800f19e:	f000 f9cb 	bl	800f538 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 800f1a2:	687b      	ldr	r3, [r7, #4]
}
 800f1a4:	0018      	movs	r0, r3
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	b002      	add	sp, #8
 800f1aa:	bd80      	pop	{r7, pc}

0800f1ac <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b082      	sub	sp, #8
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d001      	beq.n	800f1be <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 800f1ba:	f000 f9c5 	bl	800f548 <port_EnableEXT_IRQ>
	}
}
 800f1be:	46c0      	nop			@ (mov r8, r8)
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	b002      	add	sp, #8
 800f1c4:	bd80      	pop	{r7, pc}

0800f1c6 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 800f1c6:	b580      	push	{r7, lr}
 800f1c8:	b082      	sub	sp, #8
 800f1ca:	af00      	add	r7, sp, #0
 800f1cc:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	0018      	movs	r0, r3
 800f1d2:	f000 f8e2 	bl	800f39a <Sleep>
}
 800f1d6:	46c0      	nop			@ (mov r8, r8)
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	b002      	add	sp, #8
 800f1dc:	bd80      	pop	{r7, pc}
	...

0800f1e0 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 800f1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1e2:	46d6      	mov	lr, sl
 800f1e4:	4646      	mov	r6, r8
 800f1e6:	464f      	mov	r7, r9
 800f1e8:	b5c0      	push	{r6, r7, lr}
 800f1ea:	4682      	mov	sl, r0
 800f1ec:	4689      	mov	r9, r1
 800f1ee:	0015      	movs	r5, r2
 800f1f0:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800f1f2:	f7ff ffca 	bl	800f18a <decamutexon>
 800f1f6:	0006      	movs	r6, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800f1f8:	4c14      	ldr	r4, [pc, #80]	@ (800f24c <writetospi+0x6c>)
 800f1fa:	0020      	movs	r0, r4
 800f1fc:	f7f8 fb74 	bl	80078e8 <HAL_SPI_GetState>
 800f200:	2801      	cmp	r0, #1
 800f202:	d1fa      	bne.n	800f1fa <writetospi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800f204:	308f      	adds	r0, #143	@ 0x8f
 800f206:	2200      	movs	r2, #0
 800f208:	2110      	movs	r1, #16
 800f20a:	05c0      	lsls	r0, r0, #23
 800f20c:	f7f5 f9b5 	bl	800457a <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 800f210:	2301      	movs	r3, #1
 800f212:	4652      	mov	r2, sl
 800f214:	4649      	mov	r1, r9
 800f216:	0020      	movs	r0, r4
 800f218:	425b      	negs	r3, r3
 800f21a:	f7f7 fed1 	bl	8006fc0 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 800f21e:	2301      	movs	r3, #1
 800f220:	4641      	mov	r1, r8
 800f222:	b2aa      	uxth	r2, r5
 800f224:	425b      	negs	r3, r3
 800f226:	0020      	movs	r0, r4
 800f228:	f7f7 feca 	bl	8006fc0 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800f22c:	2090      	movs	r0, #144	@ 0x90
 800f22e:	2201      	movs	r2, #1
 800f230:	2110      	movs	r1, #16
 800f232:	05c0      	lsls	r0, r0, #23
 800f234:	f7f5 f9a1 	bl	800457a <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800f238:	0030      	movs	r0, r6
 800f23a:	f7ff ffb7 	bl	800f1ac <decamutexoff>

    return 0;
} // end writetospi()
 800f23e:	2000      	movs	r0, #0
 800f240:	bce0      	pop	{r5, r6, r7}
 800f242:	46ba      	mov	sl, r7
 800f244:	46b1      	mov	r9, r6
 800f246:	46a8      	mov	r8, r5
 800f248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f24a:	46c0      	nop			@ (mov r8, r8)
 800f24c:	20000464 	.word	0x20000464

0800f250 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 800f250:	b570      	push	{r4, r5, r6, lr}
 800f252:	46de      	mov	lr, fp
 800f254:	4656      	mov	r6, sl
 800f256:	464d      	mov	r5, r9
 800f258:	4644      	mov	r4, r8
 800f25a:	b570      	push	{r4, r5, r6, lr}
 800f25c:	4688      	mov	r8, r1
 800f25e:	0006      	movs	r6, r0
 800f260:	4691      	mov	r9, r2
 800f262:	469b      	mov	fp, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800f264:	f7ff ff91 	bl	800f18a <decamutexon>
 800f268:	4682      	mov	sl, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800f26a:	4d18      	ldr	r5, [pc, #96]	@ (800f2cc <readfromspi+0x7c>)
 800f26c:	0028      	movs	r0, r5
 800f26e:	f7f8 fb3b 	bl	80078e8 <HAL_SPI_GetState>
 800f272:	2801      	cmp	r0, #1
 800f274:	d1fa      	bne.n	800f26c <readfromspi+0x1c>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800f276:	308f      	adds	r0, #143	@ 0x8f
 800f278:	2200      	movs	r2, #0
 800f27a:	2110      	movs	r1, #16
 800f27c:	05c0      	lsls	r0, r0, #23
 800f27e:	f7f5 f97c 	bl	800457a <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 800f282:	2e00      	cmp	r6, #0
 800f284:	d00b      	beq.n	800f29e <readfromspi+0x4e>
 800f286:	2400      	movs	r4, #0
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 800f288:	4642      	mov	r2, r8
 800f28a:	2301      	movs	r3, #1
 800f28c:	1911      	adds	r1, r2, r4
 800f28e:	0028      	movs	r0, r5
    for(i=0; i<headerLength; i++)
 800f290:	3401      	adds	r4, #1
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 800f292:	2201      	movs	r2, #1
 800f294:	425b      	negs	r3, r3
 800f296:	f7f7 fe93 	bl	8006fc0 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 800f29a:	42b4      	cmp	r4, r6
 800f29c:	dbf4      	blt.n	800f288 <readfromspi+0x38>
    //     }

    //     (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
    // }

    HAL_SPI_Receive(&hspi1, readBuffer, readlength, 100);
 800f29e:	464b      	mov	r3, r9
 800f2a0:	4659      	mov	r1, fp
 800f2a2:	0028      	movs	r0, r5
 800f2a4:	b29a      	uxth	r2, r3
 800f2a6:	2364      	movs	r3, #100	@ 0x64
 800f2a8:	f7f7 ffea 	bl	8007280 <HAL_SPI_Receive>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800f2ac:	2090      	movs	r0, #144	@ 0x90
 800f2ae:	2201      	movs	r2, #1
 800f2b0:	2110      	movs	r1, #16
 800f2b2:	05c0      	lsls	r0, r0, #23
 800f2b4:	f7f5 f961 	bl	800457a <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800f2b8:	4650      	mov	r0, sl
 800f2ba:	f7ff ff77 	bl	800f1ac <decamutexoff>

    return 0;
} // end readfromspi()
 800f2be:	2000      	movs	r0, #0
 800f2c0:	bc78      	pop	{r3, r4, r5, r6}
 800f2c2:	46b3      	mov	fp, r6
 800f2c4:	46aa      	mov	sl, r5
 800f2c6:	46a1      	mov	r9, r4
 800f2c8:	4698      	mov	r8, r3
 800f2ca:	bd70      	pop	{r4, r5, r6, pc}
 800f2cc:	20000464 	.word	0x20000464

0800f2d0 <__NVIC_EnableIRQ>:
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	0002      	movs	r2, r0
 800f2d8:	1dfb      	adds	r3, r7, #7
 800f2da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f2dc:	1dfb      	adds	r3, r7, #7
 800f2de:	781b      	ldrb	r3, [r3, #0]
 800f2e0:	2b7f      	cmp	r3, #127	@ 0x7f
 800f2e2:	d809      	bhi.n	800f2f8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f2e4:	1dfb      	adds	r3, r7, #7
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	001a      	movs	r2, r3
 800f2ea:	231f      	movs	r3, #31
 800f2ec:	401a      	ands	r2, r3
 800f2ee:	4b04      	ldr	r3, [pc, #16]	@ (800f300 <__NVIC_EnableIRQ+0x30>)
 800f2f0:	2101      	movs	r1, #1
 800f2f2:	4091      	lsls	r1, r2
 800f2f4:	000a      	movs	r2, r1
 800f2f6:	601a      	str	r2, [r3, #0]
}
 800f2f8:	46c0      	nop			@ (mov r8, r8)
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	b002      	add	sp, #8
 800f2fe:	bd80      	pop	{r7, pc}
 800f300:	e000e100 	.word	0xe000e100

0800f304 <__NVIC_DisableIRQ>:
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b082      	sub	sp, #8
 800f308:	af00      	add	r7, sp, #0
 800f30a:	0002      	movs	r2, r0
 800f30c:	1dfb      	adds	r3, r7, #7
 800f30e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f310:	1dfb      	adds	r3, r7, #7
 800f312:	781b      	ldrb	r3, [r3, #0]
 800f314:	2b7f      	cmp	r3, #127	@ 0x7f
 800f316:	d810      	bhi.n	800f33a <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f318:	1dfb      	adds	r3, r7, #7
 800f31a:	781b      	ldrb	r3, [r3, #0]
 800f31c:	001a      	movs	r2, r3
 800f31e:	231f      	movs	r3, #31
 800f320:	4013      	ands	r3, r2
 800f322:	4908      	ldr	r1, [pc, #32]	@ (800f344 <__NVIC_DisableIRQ+0x40>)
 800f324:	2201      	movs	r2, #1
 800f326:	409a      	lsls	r2, r3
 800f328:	0013      	movs	r3, r2
 800f32a:	2280      	movs	r2, #128	@ 0x80
 800f32c:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 800f32e:	f3bf 8f4f 	dsb	sy
}
 800f332:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800f334:	f3bf 8f6f 	isb	sy
}
 800f338:	46c0      	nop			@ (mov r8, r8)
}
 800f33a:	46c0      	nop			@ (mov r8, r8)
 800f33c:	46bd      	mov	sp, r7
 800f33e:	b002      	add	sp, #8
 800f340:	bd80      	pop	{r7, pc}
 800f342:	46c0      	nop			@ (mov r8, r8)
 800f344:	e000e100 	.word	0xe000e100

0800f348 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(useconds_t usec)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b084      	sub	sp, #16
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 800f350:	2300      	movs	r3, #0
 800f352:	60fb      	str	r3, [r7, #12]
 800f354:	e014      	b.n	800f380 <usleep+0x38>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 800f356:	2300      	movs	r3, #0
 800f358:	60bb      	str	r3, [r7, #8]
 800f35a:	e004      	b.n	800f366 <usleep+0x1e>
        {
            __NOP();
 800f35c:	46c0      	nop			@ (mov r8, r8)
            __NOP();
 800f35e:	46c0      	nop			@ (mov r8, r8)
        for(j=0;j<2;j++)
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	3301      	adds	r3, #1
 800f364:	60bb      	str	r3, [r7, #8]
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	2201      	movs	r2, #1
 800f36a:	0fd8      	lsrs	r0, r3, #31
 800f36c:	17d1      	asrs	r1, r2, #31
 800f36e:	429a      	cmp	r2, r3
 800f370:	4148      	adcs	r0, r1
 800f372:	0003      	movs	r3, r0
 800f374:	b2db      	uxtb	r3, r3
 800f376:	2b00      	cmp	r3, #0
 800f378:	d1f0      	bne.n	800f35c <usleep+0x14>
    for(i=0;i<usec;i++)
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	3301      	adds	r3, #1
 800f37e:	60fb      	str	r3, [r7, #12]
 800f380:	68fa      	ldr	r2, [r7, #12]
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	429a      	cmp	r2, r3
 800f386:	419b      	sbcs	r3, r3
 800f388:	425b      	negs	r3, r3
 800f38a:	b2db      	uxtb	r3, r3
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d1e2      	bne.n	800f356 <usleep+0xe>
        }
    }
    return 0;
 800f390:	2300      	movs	r3, #0
}
 800f392:	0018      	movs	r0, r3
 800f394:	46bd      	mov	sp, r7
 800f396:	b004      	add	sp, #16
 800f398:	bd80      	pop	{r7, pc}

0800f39a <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 800f39a:	b580      	push	{r7, lr}
 800f39c:	b082      	sub	sp, #8
 800f39e:	af00      	add	r7, sp, #0
 800f3a0:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	0018      	movs	r0, r3
 800f3a6:	f7f4 f9bb 	bl	8003720 <HAL_Delay>
}
 800f3aa:	46c0      	nop			@ (mov r8, r8)
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	b002      	add	sp, #8
 800f3b0:	bd80      	pop	{r7, pc}
	...

0800f3b4 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b082      	sub	sp, #8
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 800f3bc:	4a09      	ldr	r2, [pc, #36]	@ (800f3e4 <EXTI_GetITEnStatus+0x30>)
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	095b      	lsrs	r3, r3, #5
 800f3c2:	009b      	lsls	r3, r3, #2
 800f3c4:	589a      	ldr	r2, [r3, r2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	211f      	movs	r1, #31
 800f3ca:	400b      	ands	r3, r1
 800f3cc:	40da      	lsrs	r2, r3
 800f3ce:	0013      	movs	r3, r2
 800f3d0:	2201      	movs	r2, #1
 800f3d2:	4013      	ands	r3, r2
 800f3d4:	1e5a      	subs	r2, r3, #1
 800f3d6:	4193      	sbcs	r3, r2
 800f3d8:	b2db      	uxtb	r3, r3
}
 800f3da:	0018      	movs	r0, r3
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	b002      	add	sp, #8
 800f3e0:	bd80      	pop	{r7, pc}
 800f3e2:	46c0      	nop			@ (mov r8, r8)
 800f3e4:	e000e100 	.word	0xe000e100

0800f3e8 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b086      	sub	sp, #24
 800f3ec:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 800f3ee:	1d3b      	adds	r3, r7, #4
 800f3f0:	2204      	movs	r2, #4
 800f3f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800f3f4:	1d3b      	adds	r3, r7, #4
 800f3f6:	2211      	movs	r2, #17
 800f3f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f3fa:	1d3b      	adds	r3, r7, #4
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800f400:	1d3a      	adds	r2, r7, #4
 800f402:	2390      	movs	r3, #144	@ 0x90
 800f404:	05db      	lsls	r3, r3, #23
 800f406:	0011      	movs	r1, r2
 800f408:	0018      	movs	r0, r3
 800f40a:	f7f4 ff21 	bl	8004250 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 800f40e:	2390      	movs	r3, #144	@ 0x90
 800f410:	05db      	lsls	r3, r3, #23
 800f412:	2200      	movs	r2, #0
 800f414:	2104      	movs	r1, #4
 800f416:	0018      	movs	r0, r3
 800f418:	f7f5 f8af 	bl	800457a <HAL_GPIO_WritePin>

    usleep(1);
 800f41c:	2001      	movs	r0, #1
 800f41e:	f7ff ff93 	bl	800f348 <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 800f422:	2000      	movs	r0, #0
 800f424:	f000 f807 	bl	800f436 <setup_DW1000RSTnIRQ>



    Sleep(2);
 800f428:	2002      	movs	r0, #2
 800f42a:	f7ff ffb6 	bl	800f39a <Sleep>
}
 800f42e:	46c0      	nop			@ (mov r8, r8)
 800f430:	46bd      	mov	sp, r7
 800f432:	b006      	add	sp, #24
 800f434:	bd80      	pop	{r7, pc}

0800f436 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI2 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 800f436:	b580      	push	{r7, lr}
 800f438:	b088      	sub	sp, #32
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d01a      	beq.n	800f47a <setup_DW1000RSTnIRQ+0x44>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 800f444:	210c      	movs	r1, #12
 800f446:	187b      	adds	r3, r7, r1
 800f448:	2204      	movs	r2, #4
 800f44a:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800f44c:	187b      	adds	r3, r7, r1
 800f44e:	2288      	movs	r2, #136	@ 0x88
 800f450:	0352      	lsls	r2, r2, #13
 800f452:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f454:	187b      	adds	r3, r7, r1
 800f456:	2200      	movs	r2, #0
 800f458:	609a      	str	r2, [r3, #8]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800f45a:	187a      	adds	r2, r7, r1
 800f45c:	2390      	movs	r3, #144	@ 0x90
 800f45e:	05db      	lsls	r3, r3, #23
 800f460:	0011      	movs	r1, r2
 800f462:	0018      	movs	r0, r3
 800f464:	f7f4 fef4 	bl	8004250 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI2_IRQn);     //pin #0 -> EXTI #0
 800f468:	2006      	movs	r0, #6
 800f46a:	f7f4 fcae 	bl	8003dca <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800f46e:	2200      	movs	r2, #0
 800f470:	2105      	movs	r1, #5
 800f472:	2006      	movs	r0, #6
 800f474:	f7f4 fc94 	bl	8003da0 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 800f478:	e01d      	b.n	800f4b6 <setup_DW1000RSTnIRQ+0x80>
        HAL_NVIC_DisableIRQ(EXTI2_IRQn);    //pin #0 -> EXTI #0
 800f47a:	2006      	movs	r0, #6
 800f47c:	f7f4 fcb5 	bl	8003dea <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 800f480:	210c      	movs	r1, #12
 800f482:	187b      	adds	r3, r7, r1
 800f484:	2204      	movs	r2, #4
 800f486:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800f488:	187b      	adds	r3, r7, r1
 800f48a:	2211      	movs	r2, #17
 800f48c:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f48e:	187b      	adds	r3, r7, r1
 800f490:	2200      	movs	r2, #0
 800f492:	609a      	str	r2, [r3, #8]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800f494:	187b      	adds	r3, r7, r1
 800f496:	2203      	movs	r2, #3
 800f498:	60da      	str	r2, [r3, #12]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800f49a:	187a      	adds	r2, r7, r1
 800f49c:	2390      	movs	r3, #144	@ 0x90
 800f49e:	05db      	lsls	r3, r3, #23
 800f4a0:	0011      	movs	r1, r2
 800f4a2:	0018      	movs	r0, r3
 800f4a4:	f7f4 fed4 	bl	8004250 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 800f4a8:	2390      	movs	r3, #144	@ 0x90
 800f4aa:	05db      	lsls	r3, r3, #23
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	2104      	movs	r1, #4
 800f4b0:	0018      	movs	r0, r3
 800f4b2:	f7f5 f862 	bl	800457a <HAL_GPIO_WritePin>
}
 800f4b6:	46c0      	nop			@ (mov r8, r8)
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	b008      	add	sp, #32
 800f4bc:	bd80      	pop	{r7, pc}
	...

0800f4c0 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800f4c4:	4b04      	ldr	r3, [pc, #16]	@ (800f4d8 <port_set_dw1000_slowrate+0x18>)
 800f4c6:	2218      	movs	r2, #24
 800f4c8:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800f4ca:	4b03      	ldr	r3, [pc, #12]	@ (800f4d8 <port_set_dw1000_slowrate+0x18>)
 800f4cc:	0018      	movs	r0, r3
 800f4ce:	f7f7 fcbf 	bl	8006e50 <HAL_SPI_Init>
}
 800f4d2:	46c0      	nop			@ (mov r8, r8)
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}
 800f4d8:	20000464 	.word	0x20000464

0800f4dc <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f4e0:	4b04      	ldr	r3, [pc, #16]	@ (800f4f4 <port_set_dw1000_fastrate+0x18>)
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800f4e6:	4b03      	ldr	r3, [pc, #12]	@ (800f4f4 <port_set_dw1000_fastrate+0x18>)
 800f4e8:	0018      	movs	r0, r3
 800f4ea:	f7f7 fcb1 	bl	8006e50 <HAL_SPI_Init>
}
 800f4ee:	46c0      	nop			@ (mov r8, r8)
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}
 800f4f4:	20000464 	.word	0x20000464

0800f4f8 <HAL_GPIO_EXTI_Callback>:
/* @fn      HAL_GPIO_EXTI_Callback
 * @brief   IRQ HAL call-back for all EXTI configured lines
 *          i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b082      	sub	sp, #8
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	0002      	movs	r2, r0
 800f500:	1dbb      	adds	r3, r7, #6
 800f502:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == DW_IRQn_Pin)
 800f504:	1dbb      	adds	r3, r7, #6
 800f506:	881b      	ldrh	r3, [r3, #0]
 800f508:	2b20      	cmp	r3, #32
 800f50a:	d101      	bne.n	800f510 <HAL_GPIO_EXTI_Callback+0x18>
    {
        process_deca_irq();
 800f50c:	f000 f804 	bl	800f518 <process_deca_irq>
    }
}
 800f510:	46c0      	nop			@ (mov r8, r8)
 800f512:	46bd      	mov	sp, r7
 800f514:	b002      	add	sp, #8
 800f516:	bd80      	pop	{r7, pc}

0800f518 <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	af00      	add	r7, sp, #0
    while(port_CheckEXT_IRQ() != 0)
 800f51c:	e002      	b.n	800f524 <process_deca_irq+0xc>
    {

        port_deca_isr();
 800f51e:	4b05      	ldr	r3, [pc, #20]	@ (800f534 <process_deca_irq+0x1c>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	4798      	blx	r3
    while(port_CheckEXT_IRQ() != 0)
 800f524:	f000 f822 	bl	800f56c <port_CheckEXT_IRQ>
 800f528:	1e03      	subs	r3, r0, #0
 800f52a:	d1f8      	bne.n	800f51e <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 800f52c:	46c0      	nop			@ (mov r8, r8)
 800f52e:	46c0      	nop			@ (mov r8, r8)
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}
 800f534:	20001c78 	.word	0x20001c78

0800f538 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 800f53c:	2007      	movs	r0, #7
 800f53e:	f7ff fee1 	bl	800f304 <__NVIC_DisableIRQ>
}
 800f542:	46c0      	nop			@ (mov r8, r8)
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}

0800f548 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 800f54c:	2007      	movs	r0, #7
 800f54e:	f7ff febf 	bl	800f2d0 <__NVIC_EnableIRQ>
}
 800f552:	46c0      	nop			@ (mov r8, r8)
 800f554:	46bd      	mov	sp, r7
 800f556:	bd80      	pop	{r7, pc}

0800f558 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 800f55c:	2007      	movs	r0, #7
 800f55e:	f7ff ff29 	bl	800f3b4 <EXTI_GetITEnStatus>
 800f562:	0003      	movs	r3, r0
}
 800f564:	0018      	movs	r0, r3
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}
	...

0800f56c <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DECAIRQ_GPIO, DW_IRQn_Pin);
 800f570:	4b04      	ldr	r3, [pc, #16]	@ (800f584 <port_CheckEXT_IRQ+0x18>)
 800f572:	2120      	movs	r1, #32
 800f574:	0018      	movs	r0, r3
 800f576:	f7f4 ffe3 	bl	8004540 <HAL_GPIO_ReadPin>
 800f57a:	0003      	movs	r3, r0
}
 800f57c:	0018      	movs	r0, r3
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}
 800f582:	46c0      	nop			@ (mov r8, r8)
 800f584:	48000400 	.word	0x48000400

0800f588 <__cvt>:
 800f588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f58a:	001f      	movs	r7, r3
 800f58c:	2300      	movs	r3, #0
 800f58e:	0016      	movs	r6, r2
 800f590:	b08b      	sub	sp, #44	@ 0x2c
 800f592:	429f      	cmp	r7, r3
 800f594:	da04      	bge.n	800f5a0 <__cvt+0x18>
 800f596:	2180      	movs	r1, #128	@ 0x80
 800f598:	0609      	lsls	r1, r1, #24
 800f59a:	187b      	adds	r3, r7, r1
 800f59c:	001f      	movs	r7, r3
 800f59e:	232d      	movs	r3, #45	@ 0x2d
 800f5a0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f5a2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800f5a4:	7013      	strb	r3, [r2, #0]
 800f5a6:	2320      	movs	r3, #32
 800f5a8:	2203      	movs	r2, #3
 800f5aa:	439d      	bics	r5, r3
 800f5ac:	2d46      	cmp	r5, #70	@ 0x46
 800f5ae:	d007      	beq.n	800f5c0 <__cvt+0x38>
 800f5b0:	002b      	movs	r3, r5
 800f5b2:	3b45      	subs	r3, #69	@ 0x45
 800f5b4:	4259      	negs	r1, r3
 800f5b6:	414b      	adcs	r3, r1
 800f5b8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800f5ba:	3a01      	subs	r2, #1
 800f5bc:	18cb      	adds	r3, r1, r3
 800f5be:	9310      	str	r3, [sp, #64]	@ 0x40
 800f5c0:	ab09      	add	r3, sp, #36	@ 0x24
 800f5c2:	9304      	str	r3, [sp, #16]
 800f5c4:	ab08      	add	r3, sp, #32
 800f5c6:	9303      	str	r3, [sp, #12]
 800f5c8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f5ca:	9200      	str	r2, [sp, #0]
 800f5cc:	9302      	str	r3, [sp, #8]
 800f5ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f5d0:	0032      	movs	r2, r6
 800f5d2:	9301      	str	r3, [sp, #4]
 800f5d4:	003b      	movs	r3, r7
 800f5d6:	f000 fea1 	bl	801031c <_dtoa_r>
 800f5da:	0004      	movs	r4, r0
 800f5dc:	2d47      	cmp	r5, #71	@ 0x47
 800f5de:	d11b      	bne.n	800f618 <__cvt+0x90>
 800f5e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f5e2:	07db      	lsls	r3, r3, #31
 800f5e4:	d511      	bpl.n	800f60a <__cvt+0x82>
 800f5e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f5e8:	18c3      	adds	r3, r0, r3
 800f5ea:	9307      	str	r3, [sp, #28]
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	0030      	movs	r0, r6
 800f5f2:	0039      	movs	r1, r7
 800f5f4:	f7f0 ff2a 	bl	800044c <__aeabi_dcmpeq>
 800f5f8:	2800      	cmp	r0, #0
 800f5fa:	d001      	beq.n	800f600 <__cvt+0x78>
 800f5fc:	9b07      	ldr	r3, [sp, #28]
 800f5fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800f600:	2230      	movs	r2, #48	@ 0x30
 800f602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f604:	9907      	ldr	r1, [sp, #28]
 800f606:	428b      	cmp	r3, r1
 800f608:	d320      	bcc.n	800f64c <__cvt+0xc4>
 800f60a:	0020      	movs	r0, r4
 800f60c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f60e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f610:	1b1b      	subs	r3, r3, r4
 800f612:	6013      	str	r3, [r2, #0]
 800f614:	b00b      	add	sp, #44	@ 0x2c
 800f616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f618:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f61a:	18c3      	adds	r3, r0, r3
 800f61c:	9307      	str	r3, [sp, #28]
 800f61e:	2d46      	cmp	r5, #70	@ 0x46
 800f620:	d1e4      	bne.n	800f5ec <__cvt+0x64>
 800f622:	7803      	ldrb	r3, [r0, #0]
 800f624:	2b30      	cmp	r3, #48	@ 0x30
 800f626:	d10c      	bne.n	800f642 <__cvt+0xba>
 800f628:	2200      	movs	r2, #0
 800f62a:	2300      	movs	r3, #0
 800f62c:	0030      	movs	r0, r6
 800f62e:	0039      	movs	r1, r7
 800f630:	f7f0 ff0c 	bl	800044c <__aeabi_dcmpeq>
 800f634:	2800      	cmp	r0, #0
 800f636:	d104      	bne.n	800f642 <__cvt+0xba>
 800f638:	2301      	movs	r3, #1
 800f63a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800f63c:	1a9b      	subs	r3, r3, r2
 800f63e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f640:	6013      	str	r3, [r2, #0]
 800f642:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f644:	9a07      	ldr	r2, [sp, #28]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	18d3      	adds	r3, r2, r3
 800f64a:	e7ce      	b.n	800f5ea <__cvt+0x62>
 800f64c:	1c59      	adds	r1, r3, #1
 800f64e:	9109      	str	r1, [sp, #36]	@ 0x24
 800f650:	701a      	strb	r2, [r3, #0]
 800f652:	e7d6      	b.n	800f602 <__cvt+0x7a>

0800f654 <__exponent>:
 800f654:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f656:	232b      	movs	r3, #43	@ 0x2b
 800f658:	0005      	movs	r5, r0
 800f65a:	000c      	movs	r4, r1
 800f65c:	b085      	sub	sp, #20
 800f65e:	7002      	strb	r2, [r0, #0]
 800f660:	2900      	cmp	r1, #0
 800f662:	da01      	bge.n	800f668 <__exponent+0x14>
 800f664:	424c      	negs	r4, r1
 800f666:	3302      	adds	r3, #2
 800f668:	706b      	strb	r3, [r5, #1]
 800f66a:	2c09      	cmp	r4, #9
 800f66c:	dd2c      	ble.n	800f6c8 <__exponent+0x74>
 800f66e:	ab02      	add	r3, sp, #8
 800f670:	1dde      	adds	r6, r3, #7
 800f672:	0020      	movs	r0, r4
 800f674:	210a      	movs	r1, #10
 800f676:	f7f0 fed3 	bl	8000420 <__aeabi_idivmod>
 800f67a:	0037      	movs	r7, r6
 800f67c:	3130      	adds	r1, #48	@ 0x30
 800f67e:	3e01      	subs	r6, #1
 800f680:	0020      	movs	r0, r4
 800f682:	7031      	strb	r1, [r6, #0]
 800f684:	210a      	movs	r1, #10
 800f686:	9401      	str	r4, [sp, #4]
 800f688:	f7f0 fde4 	bl	8000254 <__divsi3>
 800f68c:	9b01      	ldr	r3, [sp, #4]
 800f68e:	0004      	movs	r4, r0
 800f690:	2b63      	cmp	r3, #99	@ 0x63
 800f692:	dcee      	bgt.n	800f672 <__exponent+0x1e>
 800f694:	1eba      	subs	r2, r7, #2
 800f696:	1ca8      	adds	r0, r5, #2
 800f698:	0001      	movs	r1, r0
 800f69a:	0013      	movs	r3, r2
 800f69c:	3430      	adds	r4, #48	@ 0x30
 800f69e:	7014      	strb	r4, [r2, #0]
 800f6a0:	ac02      	add	r4, sp, #8
 800f6a2:	3407      	adds	r4, #7
 800f6a4:	429c      	cmp	r4, r3
 800f6a6:	d80a      	bhi.n	800f6be <__exponent+0x6a>
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	42a2      	cmp	r2, r4
 800f6ac:	d803      	bhi.n	800f6b6 <__exponent+0x62>
 800f6ae:	3309      	adds	r3, #9
 800f6b0:	aa02      	add	r2, sp, #8
 800f6b2:	189b      	adds	r3, r3, r2
 800f6b4:	1bdb      	subs	r3, r3, r7
 800f6b6:	18c0      	adds	r0, r0, r3
 800f6b8:	1b40      	subs	r0, r0, r5
 800f6ba:	b005      	add	sp, #20
 800f6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6be:	781c      	ldrb	r4, [r3, #0]
 800f6c0:	3301      	adds	r3, #1
 800f6c2:	700c      	strb	r4, [r1, #0]
 800f6c4:	3101      	adds	r1, #1
 800f6c6:	e7eb      	b.n	800f6a0 <__exponent+0x4c>
 800f6c8:	2330      	movs	r3, #48	@ 0x30
 800f6ca:	18e4      	adds	r4, r4, r3
 800f6cc:	70ab      	strb	r3, [r5, #2]
 800f6ce:	1d28      	adds	r0, r5, #4
 800f6d0:	70ec      	strb	r4, [r5, #3]
 800f6d2:	e7f1      	b.n	800f6b8 <__exponent+0x64>

0800f6d4 <_printf_float>:
 800f6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6d6:	b097      	sub	sp, #92	@ 0x5c
 800f6d8:	000d      	movs	r5, r1
 800f6da:	920a      	str	r2, [sp, #40]	@ 0x28
 800f6dc:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800f6de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f6e0:	9009      	str	r0, [sp, #36]	@ 0x24
 800f6e2:	f000 fcf9 	bl	80100d8 <_localeconv_r>
 800f6e6:	6803      	ldr	r3, [r0, #0]
 800f6e8:	0018      	movs	r0, r3
 800f6ea:	930d      	str	r3, [sp, #52]	@ 0x34
 800f6ec:	f7f0 fd0c 	bl	8000108 <strlen>
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f6f4:	9314      	str	r3, [sp, #80]	@ 0x50
 800f6f6:	7e2b      	ldrb	r3, [r5, #24]
 800f6f8:	2207      	movs	r2, #7
 800f6fa:	930c      	str	r3, [sp, #48]	@ 0x30
 800f6fc:	682b      	ldr	r3, [r5, #0]
 800f6fe:	930e      	str	r3, [sp, #56]	@ 0x38
 800f700:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f702:	6823      	ldr	r3, [r4, #0]
 800f704:	05c9      	lsls	r1, r1, #23
 800f706:	d545      	bpl.n	800f794 <_printf_float+0xc0>
 800f708:	189b      	adds	r3, r3, r2
 800f70a:	4393      	bics	r3, r2
 800f70c:	001a      	movs	r2, r3
 800f70e:	3208      	adds	r2, #8
 800f710:	6022      	str	r2, [r4, #0]
 800f712:	2201      	movs	r2, #1
 800f714:	681e      	ldr	r6, [r3, #0]
 800f716:	685f      	ldr	r7, [r3, #4]
 800f718:	007b      	lsls	r3, r7, #1
 800f71a:	085b      	lsrs	r3, r3, #1
 800f71c:	9311      	str	r3, [sp, #68]	@ 0x44
 800f71e:	9610      	str	r6, [sp, #64]	@ 0x40
 800f720:	64ae      	str	r6, [r5, #72]	@ 0x48
 800f722:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800f724:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f726:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f728:	4ba7      	ldr	r3, [pc, #668]	@ (800f9c8 <_printf_float+0x2f4>)
 800f72a:	4252      	negs	r2, r2
 800f72c:	f7f2 fd36 	bl	800219c <__aeabi_dcmpun>
 800f730:	2800      	cmp	r0, #0
 800f732:	d131      	bne.n	800f798 <_printf_float+0xc4>
 800f734:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f736:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f738:	2201      	movs	r2, #1
 800f73a:	4ba3      	ldr	r3, [pc, #652]	@ (800f9c8 <_printf_float+0x2f4>)
 800f73c:	4252      	negs	r2, r2
 800f73e:	f7f0 fe95 	bl	800046c <__aeabi_dcmple>
 800f742:	2800      	cmp	r0, #0
 800f744:	d128      	bne.n	800f798 <_printf_float+0xc4>
 800f746:	2200      	movs	r2, #0
 800f748:	2300      	movs	r3, #0
 800f74a:	0030      	movs	r0, r6
 800f74c:	0039      	movs	r1, r7
 800f74e:	f7f0 fe83 	bl	8000458 <__aeabi_dcmplt>
 800f752:	2800      	cmp	r0, #0
 800f754:	d003      	beq.n	800f75e <_printf_float+0x8a>
 800f756:	002b      	movs	r3, r5
 800f758:	222d      	movs	r2, #45	@ 0x2d
 800f75a:	3343      	adds	r3, #67	@ 0x43
 800f75c:	701a      	strb	r2, [r3, #0]
 800f75e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f760:	4f9a      	ldr	r7, [pc, #616]	@ (800f9cc <_printf_float+0x2f8>)
 800f762:	2b47      	cmp	r3, #71	@ 0x47
 800f764:	d900      	bls.n	800f768 <_printf_float+0x94>
 800f766:	4f9a      	ldr	r7, [pc, #616]	@ (800f9d0 <_printf_float+0x2fc>)
 800f768:	2303      	movs	r3, #3
 800f76a:	2400      	movs	r4, #0
 800f76c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f76e:	612b      	str	r3, [r5, #16]
 800f770:	3301      	adds	r3, #1
 800f772:	439a      	bics	r2, r3
 800f774:	602a      	str	r2, [r5, #0]
 800f776:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f778:	0029      	movs	r1, r5
 800f77a:	9300      	str	r3, [sp, #0]
 800f77c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f77e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f780:	aa15      	add	r2, sp, #84	@ 0x54
 800f782:	f000 f9e5 	bl	800fb50 <_printf_common>
 800f786:	3001      	adds	r0, #1
 800f788:	d000      	beq.n	800f78c <_printf_float+0xb8>
 800f78a:	e09f      	b.n	800f8cc <_printf_float+0x1f8>
 800f78c:	2001      	movs	r0, #1
 800f78e:	4240      	negs	r0, r0
 800f790:	b017      	add	sp, #92	@ 0x5c
 800f792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f794:	3307      	adds	r3, #7
 800f796:	e7b8      	b.n	800f70a <_printf_float+0x36>
 800f798:	0032      	movs	r2, r6
 800f79a:	003b      	movs	r3, r7
 800f79c:	0030      	movs	r0, r6
 800f79e:	0039      	movs	r1, r7
 800f7a0:	f7f2 fcfc 	bl	800219c <__aeabi_dcmpun>
 800f7a4:	2800      	cmp	r0, #0
 800f7a6:	d00b      	beq.n	800f7c0 <_printf_float+0xec>
 800f7a8:	2f00      	cmp	r7, #0
 800f7aa:	da03      	bge.n	800f7b4 <_printf_float+0xe0>
 800f7ac:	002b      	movs	r3, r5
 800f7ae:	222d      	movs	r2, #45	@ 0x2d
 800f7b0:	3343      	adds	r3, #67	@ 0x43
 800f7b2:	701a      	strb	r2, [r3, #0]
 800f7b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f7b6:	4f87      	ldr	r7, [pc, #540]	@ (800f9d4 <_printf_float+0x300>)
 800f7b8:	2b47      	cmp	r3, #71	@ 0x47
 800f7ba:	d9d5      	bls.n	800f768 <_printf_float+0x94>
 800f7bc:	4f86      	ldr	r7, [pc, #536]	@ (800f9d8 <_printf_float+0x304>)
 800f7be:	e7d3      	b.n	800f768 <_printf_float+0x94>
 800f7c0:	2220      	movs	r2, #32
 800f7c2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800f7c4:	686b      	ldr	r3, [r5, #4]
 800f7c6:	4394      	bics	r4, r2
 800f7c8:	1c5a      	adds	r2, r3, #1
 800f7ca:	d146      	bne.n	800f85a <_printf_float+0x186>
 800f7cc:	3307      	adds	r3, #7
 800f7ce:	606b      	str	r3, [r5, #4]
 800f7d0:	2380      	movs	r3, #128	@ 0x80
 800f7d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f7d4:	00db      	lsls	r3, r3, #3
 800f7d6:	4313      	orrs	r3, r2
 800f7d8:	2200      	movs	r2, #0
 800f7da:	602b      	str	r3, [r5, #0]
 800f7dc:	9206      	str	r2, [sp, #24]
 800f7de:	aa14      	add	r2, sp, #80	@ 0x50
 800f7e0:	9205      	str	r2, [sp, #20]
 800f7e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f7e4:	a90a      	add	r1, sp, #40	@ 0x28
 800f7e6:	9204      	str	r2, [sp, #16]
 800f7e8:	aa13      	add	r2, sp, #76	@ 0x4c
 800f7ea:	9203      	str	r2, [sp, #12]
 800f7ec:	2223      	movs	r2, #35	@ 0x23
 800f7ee:	1852      	adds	r2, r2, r1
 800f7f0:	9202      	str	r2, [sp, #8]
 800f7f2:	9301      	str	r3, [sp, #4]
 800f7f4:	686b      	ldr	r3, [r5, #4]
 800f7f6:	0032      	movs	r2, r6
 800f7f8:	9300      	str	r3, [sp, #0]
 800f7fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f7fc:	003b      	movs	r3, r7
 800f7fe:	f7ff fec3 	bl	800f588 <__cvt>
 800f802:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f804:	0007      	movs	r7, r0
 800f806:	2c47      	cmp	r4, #71	@ 0x47
 800f808:	d12d      	bne.n	800f866 <_printf_float+0x192>
 800f80a:	1cd3      	adds	r3, r2, #3
 800f80c:	db02      	blt.n	800f814 <_printf_float+0x140>
 800f80e:	686b      	ldr	r3, [r5, #4]
 800f810:	429a      	cmp	r2, r3
 800f812:	dd48      	ble.n	800f8a6 <_printf_float+0x1d2>
 800f814:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f816:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f818:	3b02      	subs	r3, #2
 800f81a:	b2db      	uxtb	r3, r3
 800f81c:	930c      	str	r3, [sp, #48]	@ 0x30
 800f81e:	0028      	movs	r0, r5
 800f820:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f822:	3901      	subs	r1, #1
 800f824:	3050      	adds	r0, #80	@ 0x50
 800f826:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f828:	f7ff ff14 	bl	800f654 <__exponent>
 800f82c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f82e:	0004      	movs	r4, r0
 800f830:	1813      	adds	r3, r2, r0
 800f832:	612b      	str	r3, [r5, #16]
 800f834:	2a01      	cmp	r2, #1
 800f836:	dc02      	bgt.n	800f83e <_printf_float+0x16a>
 800f838:	682a      	ldr	r2, [r5, #0]
 800f83a:	07d2      	lsls	r2, r2, #31
 800f83c:	d501      	bpl.n	800f842 <_printf_float+0x16e>
 800f83e:	3301      	adds	r3, #1
 800f840:	612b      	str	r3, [r5, #16]
 800f842:	2323      	movs	r3, #35	@ 0x23
 800f844:	aa0a      	add	r2, sp, #40	@ 0x28
 800f846:	189b      	adds	r3, r3, r2
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d100      	bne.n	800f850 <_printf_float+0x17c>
 800f84e:	e792      	b.n	800f776 <_printf_float+0xa2>
 800f850:	002b      	movs	r3, r5
 800f852:	222d      	movs	r2, #45	@ 0x2d
 800f854:	3343      	adds	r3, #67	@ 0x43
 800f856:	701a      	strb	r2, [r3, #0]
 800f858:	e78d      	b.n	800f776 <_printf_float+0xa2>
 800f85a:	2c47      	cmp	r4, #71	@ 0x47
 800f85c:	d1b8      	bne.n	800f7d0 <_printf_float+0xfc>
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d1b6      	bne.n	800f7d0 <_printf_float+0xfc>
 800f862:	3301      	adds	r3, #1
 800f864:	e7b3      	b.n	800f7ce <_printf_float+0xfa>
 800f866:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f868:	0011      	movs	r1, r2
 800f86a:	2b65      	cmp	r3, #101	@ 0x65
 800f86c:	d9d7      	bls.n	800f81e <_printf_float+0x14a>
 800f86e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f870:	2b66      	cmp	r3, #102	@ 0x66
 800f872:	d11a      	bne.n	800f8aa <_printf_float+0x1d6>
 800f874:	686b      	ldr	r3, [r5, #4]
 800f876:	2a00      	cmp	r2, #0
 800f878:	dd09      	ble.n	800f88e <_printf_float+0x1ba>
 800f87a:	612a      	str	r2, [r5, #16]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d102      	bne.n	800f886 <_printf_float+0x1b2>
 800f880:	6829      	ldr	r1, [r5, #0]
 800f882:	07c9      	lsls	r1, r1, #31
 800f884:	d50b      	bpl.n	800f89e <_printf_float+0x1ca>
 800f886:	3301      	adds	r3, #1
 800f888:	189b      	adds	r3, r3, r2
 800f88a:	612b      	str	r3, [r5, #16]
 800f88c:	e007      	b.n	800f89e <_printf_float+0x1ca>
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d103      	bne.n	800f89a <_printf_float+0x1c6>
 800f892:	2201      	movs	r2, #1
 800f894:	6829      	ldr	r1, [r5, #0]
 800f896:	4211      	tst	r1, r2
 800f898:	d000      	beq.n	800f89c <_printf_float+0x1c8>
 800f89a:	1c9a      	adds	r2, r3, #2
 800f89c:	612a      	str	r2, [r5, #16]
 800f89e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f8a0:	2400      	movs	r4, #0
 800f8a2:	65ab      	str	r3, [r5, #88]	@ 0x58
 800f8a4:	e7cd      	b.n	800f842 <_printf_float+0x16e>
 800f8a6:	2367      	movs	r3, #103	@ 0x67
 800f8a8:	930c      	str	r3, [sp, #48]	@ 0x30
 800f8aa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f8ac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f8ae:	4299      	cmp	r1, r3
 800f8b0:	db06      	blt.n	800f8c0 <_printf_float+0x1ec>
 800f8b2:	682b      	ldr	r3, [r5, #0]
 800f8b4:	6129      	str	r1, [r5, #16]
 800f8b6:	07db      	lsls	r3, r3, #31
 800f8b8:	d5f1      	bpl.n	800f89e <_printf_float+0x1ca>
 800f8ba:	3101      	adds	r1, #1
 800f8bc:	6129      	str	r1, [r5, #16]
 800f8be:	e7ee      	b.n	800f89e <_printf_float+0x1ca>
 800f8c0:	2201      	movs	r2, #1
 800f8c2:	2900      	cmp	r1, #0
 800f8c4:	dce0      	bgt.n	800f888 <_printf_float+0x1b4>
 800f8c6:	1892      	adds	r2, r2, r2
 800f8c8:	1a52      	subs	r2, r2, r1
 800f8ca:	e7dd      	b.n	800f888 <_printf_float+0x1b4>
 800f8cc:	682a      	ldr	r2, [r5, #0]
 800f8ce:	0553      	lsls	r3, r2, #21
 800f8d0:	d408      	bmi.n	800f8e4 <_printf_float+0x210>
 800f8d2:	692b      	ldr	r3, [r5, #16]
 800f8d4:	003a      	movs	r2, r7
 800f8d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f8d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f8da:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f8dc:	47a0      	blx	r4
 800f8de:	3001      	adds	r0, #1
 800f8e0:	d129      	bne.n	800f936 <_printf_float+0x262>
 800f8e2:	e753      	b.n	800f78c <_printf_float+0xb8>
 800f8e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f8e6:	2b65      	cmp	r3, #101	@ 0x65
 800f8e8:	d800      	bhi.n	800f8ec <_printf_float+0x218>
 800f8ea:	e0da      	b.n	800faa2 <_printf_float+0x3ce>
 800f8ec:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800f8ee:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	f7f0 fdaa 	bl	800044c <__aeabi_dcmpeq>
 800f8f8:	2800      	cmp	r0, #0
 800f8fa:	d033      	beq.n	800f964 <_printf_float+0x290>
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	4a37      	ldr	r2, [pc, #220]	@ (800f9dc <_printf_float+0x308>)
 800f900:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f902:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f904:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f906:	47a0      	blx	r4
 800f908:	3001      	adds	r0, #1
 800f90a:	d100      	bne.n	800f90e <_printf_float+0x23a>
 800f90c:	e73e      	b.n	800f78c <_printf_float+0xb8>
 800f90e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800f910:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f912:	42b3      	cmp	r3, r6
 800f914:	db02      	blt.n	800f91c <_printf_float+0x248>
 800f916:	682b      	ldr	r3, [r5, #0]
 800f918:	07db      	lsls	r3, r3, #31
 800f91a:	d50c      	bpl.n	800f936 <_printf_float+0x262>
 800f91c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f91e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f920:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f922:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f924:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f926:	47a0      	blx	r4
 800f928:	2400      	movs	r4, #0
 800f92a:	3001      	adds	r0, #1
 800f92c:	d100      	bne.n	800f930 <_printf_float+0x25c>
 800f92e:	e72d      	b.n	800f78c <_printf_float+0xb8>
 800f930:	1e73      	subs	r3, r6, #1
 800f932:	42a3      	cmp	r3, r4
 800f934:	dc0a      	bgt.n	800f94c <_printf_float+0x278>
 800f936:	682b      	ldr	r3, [r5, #0]
 800f938:	079b      	lsls	r3, r3, #30
 800f93a:	d500      	bpl.n	800f93e <_printf_float+0x26a>
 800f93c:	e105      	b.n	800fb4a <_printf_float+0x476>
 800f93e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f940:	68e8      	ldr	r0, [r5, #12]
 800f942:	4298      	cmp	r0, r3
 800f944:	db00      	blt.n	800f948 <_printf_float+0x274>
 800f946:	e723      	b.n	800f790 <_printf_float+0xbc>
 800f948:	0018      	movs	r0, r3
 800f94a:	e721      	b.n	800f790 <_printf_float+0xbc>
 800f94c:	002a      	movs	r2, r5
 800f94e:	2301      	movs	r3, #1
 800f950:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f952:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f954:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f956:	321a      	adds	r2, #26
 800f958:	47b8      	blx	r7
 800f95a:	3001      	adds	r0, #1
 800f95c:	d100      	bne.n	800f960 <_printf_float+0x28c>
 800f95e:	e715      	b.n	800f78c <_printf_float+0xb8>
 800f960:	3401      	adds	r4, #1
 800f962:	e7e5      	b.n	800f930 <_printf_float+0x25c>
 800f964:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f966:	2b00      	cmp	r3, #0
 800f968:	dc3a      	bgt.n	800f9e0 <_printf_float+0x30c>
 800f96a:	2301      	movs	r3, #1
 800f96c:	4a1b      	ldr	r2, [pc, #108]	@ (800f9dc <_printf_float+0x308>)
 800f96e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f970:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f972:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f974:	47a0      	blx	r4
 800f976:	3001      	adds	r0, #1
 800f978:	d100      	bne.n	800f97c <_printf_float+0x2a8>
 800f97a:	e707      	b.n	800f78c <_printf_float+0xb8>
 800f97c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800f97e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f980:	4333      	orrs	r3, r6
 800f982:	d102      	bne.n	800f98a <_printf_float+0x2b6>
 800f984:	682b      	ldr	r3, [r5, #0]
 800f986:	07db      	lsls	r3, r3, #31
 800f988:	d5d5      	bpl.n	800f936 <_printf_float+0x262>
 800f98a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f98c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f98e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f990:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f992:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f994:	47a0      	blx	r4
 800f996:	2300      	movs	r3, #0
 800f998:	3001      	adds	r0, #1
 800f99a:	d100      	bne.n	800f99e <_printf_float+0x2ca>
 800f99c:	e6f6      	b.n	800f78c <_printf_float+0xb8>
 800f99e:	930c      	str	r3, [sp, #48]	@ 0x30
 800f9a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f9a2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f9a4:	425b      	negs	r3, r3
 800f9a6:	4293      	cmp	r3, r2
 800f9a8:	dc01      	bgt.n	800f9ae <_printf_float+0x2da>
 800f9aa:	0033      	movs	r3, r6
 800f9ac:	e792      	b.n	800f8d4 <_printf_float+0x200>
 800f9ae:	002a      	movs	r2, r5
 800f9b0:	2301      	movs	r3, #1
 800f9b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f9b4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f9b6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f9b8:	321a      	adds	r2, #26
 800f9ba:	47a0      	blx	r4
 800f9bc:	3001      	adds	r0, #1
 800f9be:	d100      	bne.n	800f9c2 <_printf_float+0x2ee>
 800f9c0:	e6e4      	b.n	800f78c <_printf_float+0xb8>
 800f9c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f9c4:	3301      	adds	r3, #1
 800f9c6:	e7ea      	b.n	800f99e <_printf_float+0x2ca>
 800f9c8:	7fefffff 	.word	0x7fefffff
 800f9cc:	08012712 	.word	0x08012712
 800f9d0:	08012716 	.word	0x08012716
 800f9d4:	0801271a 	.word	0x0801271a
 800f9d8:	0801271e 	.word	0x0801271e
 800f9dc:	08012722 	.word	0x08012722
 800f9e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f9e2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800f9e4:	930c      	str	r3, [sp, #48]	@ 0x30
 800f9e6:	429e      	cmp	r6, r3
 800f9e8:	dd00      	ble.n	800f9ec <_printf_float+0x318>
 800f9ea:	001e      	movs	r6, r3
 800f9ec:	2e00      	cmp	r6, #0
 800f9ee:	dc31      	bgt.n	800fa54 <_printf_float+0x380>
 800f9f0:	43f3      	mvns	r3, r6
 800f9f2:	2400      	movs	r4, #0
 800f9f4:	17db      	asrs	r3, r3, #31
 800f9f6:	4033      	ands	r3, r6
 800f9f8:	930e      	str	r3, [sp, #56]	@ 0x38
 800f9fa:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800f9fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f9fe:	1af3      	subs	r3, r6, r3
 800fa00:	42a3      	cmp	r3, r4
 800fa02:	dc30      	bgt.n	800fa66 <_printf_float+0x392>
 800fa04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fa06:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fa08:	429a      	cmp	r2, r3
 800fa0a:	dc38      	bgt.n	800fa7e <_printf_float+0x3aa>
 800fa0c:	682b      	ldr	r3, [r5, #0]
 800fa0e:	07db      	lsls	r3, r3, #31
 800fa10:	d435      	bmi.n	800fa7e <_printf_float+0x3aa>
 800fa12:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800fa14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fa16:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fa18:	1b9b      	subs	r3, r3, r6
 800fa1a:	1b14      	subs	r4, r2, r4
 800fa1c:	429c      	cmp	r4, r3
 800fa1e:	dd00      	ble.n	800fa22 <_printf_float+0x34e>
 800fa20:	001c      	movs	r4, r3
 800fa22:	2c00      	cmp	r4, #0
 800fa24:	dc34      	bgt.n	800fa90 <_printf_float+0x3bc>
 800fa26:	43e3      	mvns	r3, r4
 800fa28:	2600      	movs	r6, #0
 800fa2a:	17db      	asrs	r3, r3, #31
 800fa2c:	401c      	ands	r4, r3
 800fa2e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fa30:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fa32:	1ad3      	subs	r3, r2, r3
 800fa34:	1b1b      	subs	r3, r3, r4
 800fa36:	42b3      	cmp	r3, r6
 800fa38:	dc00      	bgt.n	800fa3c <_printf_float+0x368>
 800fa3a:	e77c      	b.n	800f936 <_printf_float+0x262>
 800fa3c:	002a      	movs	r2, r5
 800fa3e:	2301      	movs	r3, #1
 800fa40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fa42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa44:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800fa46:	321a      	adds	r2, #26
 800fa48:	47b8      	blx	r7
 800fa4a:	3001      	adds	r0, #1
 800fa4c:	d100      	bne.n	800fa50 <_printf_float+0x37c>
 800fa4e:	e69d      	b.n	800f78c <_printf_float+0xb8>
 800fa50:	3601      	adds	r6, #1
 800fa52:	e7ec      	b.n	800fa2e <_printf_float+0x35a>
 800fa54:	0033      	movs	r3, r6
 800fa56:	003a      	movs	r2, r7
 800fa58:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fa5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa5c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800fa5e:	47a0      	blx	r4
 800fa60:	3001      	adds	r0, #1
 800fa62:	d1c5      	bne.n	800f9f0 <_printf_float+0x31c>
 800fa64:	e692      	b.n	800f78c <_printf_float+0xb8>
 800fa66:	002a      	movs	r2, r5
 800fa68:	2301      	movs	r3, #1
 800fa6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fa6c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa6e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800fa70:	321a      	adds	r2, #26
 800fa72:	47b0      	blx	r6
 800fa74:	3001      	adds	r0, #1
 800fa76:	d100      	bne.n	800fa7a <_printf_float+0x3a6>
 800fa78:	e688      	b.n	800f78c <_printf_float+0xb8>
 800fa7a:	3401      	adds	r4, #1
 800fa7c:	e7bd      	b.n	800f9fa <_printf_float+0x326>
 800fa7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fa82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fa84:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa86:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800fa88:	47a0      	blx	r4
 800fa8a:	3001      	adds	r0, #1
 800fa8c:	d1c1      	bne.n	800fa12 <_printf_float+0x33e>
 800fa8e:	e67d      	b.n	800f78c <_printf_float+0xb8>
 800fa90:	19ba      	adds	r2, r7, r6
 800fa92:	0023      	movs	r3, r4
 800fa94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fa96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa98:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800fa9a:	47b0      	blx	r6
 800fa9c:	3001      	adds	r0, #1
 800fa9e:	d1c2      	bne.n	800fa26 <_printf_float+0x352>
 800faa0:	e674      	b.n	800f78c <_printf_float+0xb8>
 800faa2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800faa4:	930c      	str	r3, [sp, #48]	@ 0x30
 800faa6:	2b01      	cmp	r3, #1
 800faa8:	dc02      	bgt.n	800fab0 <_printf_float+0x3dc>
 800faaa:	2301      	movs	r3, #1
 800faac:	421a      	tst	r2, r3
 800faae:	d039      	beq.n	800fb24 <_printf_float+0x450>
 800fab0:	2301      	movs	r3, #1
 800fab2:	003a      	movs	r2, r7
 800fab4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fab6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fab8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800faba:	47b0      	blx	r6
 800fabc:	3001      	adds	r0, #1
 800fabe:	d100      	bne.n	800fac2 <_printf_float+0x3ee>
 800fac0:	e664      	b.n	800f78c <_printf_float+0xb8>
 800fac2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fac4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fac6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fac8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800faca:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800facc:	47b0      	blx	r6
 800face:	3001      	adds	r0, #1
 800fad0:	d100      	bne.n	800fad4 <_printf_float+0x400>
 800fad2:	e65b      	b.n	800f78c <_printf_float+0xb8>
 800fad4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800fad6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800fad8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fada:	2200      	movs	r2, #0
 800fadc:	3b01      	subs	r3, #1
 800fade:	930c      	str	r3, [sp, #48]	@ 0x30
 800fae0:	2300      	movs	r3, #0
 800fae2:	f7f0 fcb3 	bl	800044c <__aeabi_dcmpeq>
 800fae6:	2800      	cmp	r0, #0
 800fae8:	d11a      	bne.n	800fb20 <_printf_float+0x44c>
 800faea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800faec:	1c7a      	adds	r2, r7, #1
 800faee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800faf0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800faf2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800faf4:	47b0      	blx	r6
 800faf6:	3001      	adds	r0, #1
 800faf8:	d10e      	bne.n	800fb18 <_printf_float+0x444>
 800fafa:	e647      	b.n	800f78c <_printf_float+0xb8>
 800fafc:	002a      	movs	r2, r5
 800fafe:	2301      	movs	r3, #1
 800fb00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fb02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb04:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800fb06:	321a      	adds	r2, #26
 800fb08:	47b8      	blx	r7
 800fb0a:	3001      	adds	r0, #1
 800fb0c:	d100      	bne.n	800fb10 <_printf_float+0x43c>
 800fb0e:	e63d      	b.n	800f78c <_printf_float+0xb8>
 800fb10:	3601      	adds	r6, #1
 800fb12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fb14:	429e      	cmp	r6, r3
 800fb16:	dbf1      	blt.n	800fafc <_printf_float+0x428>
 800fb18:	002a      	movs	r2, r5
 800fb1a:	0023      	movs	r3, r4
 800fb1c:	3250      	adds	r2, #80	@ 0x50
 800fb1e:	e6da      	b.n	800f8d6 <_printf_float+0x202>
 800fb20:	2600      	movs	r6, #0
 800fb22:	e7f6      	b.n	800fb12 <_printf_float+0x43e>
 800fb24:	003a      	movs	r2, r7
 800fb26:	e7e2      	b.n	800faee <_printf_float+0x41a>
 800fb28:	002a      	movs	r2, r5
 800fb2a:	2301      	movs	r3, #1
 800fb2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fb2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb30:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800fb32:	3219      	adds	r2, #25
 800fb34:	47b0      	blx	r6
 800fb36:	3001      	adds	r0, #1
 800fb38:	d100      	bne.n	800fb3c <_printf_float+0x468>
 800fb3a:	e627      	b.n	800f78c <_printf_float+0xb8>
 800fb3c:	3401      	adds	r4, #1
 800fb3e:	68eb      	ldr	r3, [r5, #12]
 800fb40:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800fb42:	1a9b      	subs	r3, r3, r2
 800fb44:	42a3      	cmp	r3, r4
 800fb46:	dcef      	bgt.n	800fb28 <_printf_float+0x454>
 800fb48:	e6f9      	b.n	800f93e <_printf_float+0x26a>
 800fb4a:	2400      	movs	r4, #0
 800fb4c:	e7f7      	b.n	800fb3e <_printf_float+0x46a>
 800fb4e:	46c0      	nop			@ (mov r8, r8)

0800fb50 <_printf_common>:
 800fb50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb52:	0016      	movs	r6, r2
 800fb54:	9301      	str	r3, [sp, #4]
 800fb56:	688a      	ldr	r2, [r1, #8]
 800fb58:	690b      	ldr	r3, [r1, #16]
 800fb5a:	000c      	movs	r4, r1
 800fb5c:	9000      	str	r0, [sp, #0]
 800fb5e:	4293      	cmp	r3, r2
 800fb60:	da00      	bge.n	800fb64 <_printf_common+0x14>
 800fb62:	0013      	movs	r3, r2
 800fb64:	0022      	movs	r2, r4
 800fb66:	6033      	str	r3, [r6, #0]
 800fb68:	3243      	adds	r2, #67	@ 0x43
 800fb6a:	7812      	ldrb	r2, [r2, #0]
 800fb6c:	2a00      	cmp	r2, #0
 800fb6e:	d001      	beq.n	800fb74 <_printf_common+0x24>
 800fb70:	3301      	adds	r3, #1
 800fb72:	6033      	str	r3, [r6, #0]
 800fb74:	6823      	ldr	r3, [r4, #0]
 800fb76:	069b      	lsls	r3, r3, #26
 800fb78:	d502      	bpl.n	800fb80 <_printf_common+0x30>
 800fb7a:	6833      	ldr	r3, [r6, #0]
 800fb7c:	3302      	adds	r3, #2
 800fb7e:	6033      	str	r3, [r6, #0]
 800fb80:	6822      	ldr	r2, [r4, #0]
 800fb82:	2306      	movs	r3, #6
 800fb84:	0015      	movs	r5, r2
 800fb86:	401d      	ands	r5, r3
 800fb88:	421a      	tst	r2, r3
 800fb8a:	d027      	beq.n	800fbdc <_printf_common+0x8c>
 800fb8c:	0023      	movs	r3, r4
 800fb8e:	3343      	adds	r3, #67	@ 0x43
 800fb90:	781b      	ldrb	r3, [r3, #0]
 800fb92:	1e5a      	subs	r2, r3, #1
 800fb94:	4193      	sbcs	r3, r2
 800fb96:	6822      	ldr	r2, [r4, #0]
 800fb98:	0692      	lsls	r2, r2, #26
 800fb9a:	d430      	bmi.n	800fbfe <_printf_common+0xae>
 800fb9c:	0022      	movs	r2, r4
 800fb9e:	9901      	ldr	r1, [sp, #4]
 800fba0:	9800      	ldr	r0, [sp, #0]
 800fba2:	9d08      	ldr	r5, [sp, #32]
 800fba4:	3243      	adds	r2, #67	@ 0x43
 800fba6:	47a8      	blx	r5
 800fba8:	3001      	adds	r0, #1
 800fbaa:	d025      	beq.n	800fbf8 <_printf_common+0xa8>
 800fbac:	2206      	movs	r2, #6
 800fbae:	6823      	ldr	r3, [r4, #0]
 800fbb0:	2500      	movs	r5, #0
 800fbb2:	4013      	ands	r3, r2
 800fbb4:	2b04      	cmp	r3, #4
 800fbb6:	d105      	bne.n	800fbc4 <_printf_common+0x74>
 800fbb8:	6833      	ldr	r3, [r6, #0]
 800fbba:	68e5      	ldr	r5, [r4, #12]
 800fbbc:	1aed      	subs	r5, r5, r3
 800fbbe:	43eb      	mvns	r3, r5
 800fbc0:	17db      	asrs	r3, r3, #31
 800fbc2:	401d      	ands	r5, r3
 800fbc4:	68a3      	ldr	r3, [r4, #8]
 800fbc6:	6922      	ldr	r2, [r4, #16]
 800fbc8:	4293      	cmp	r3, r2
 800fbca:	dd01      	ble.n	800fbd0 <_printf_common+0x80>
 800fbcc:	1a9b      	subs	r3, r3, r2
 800fbce:	18ed      	adds	r5, r5, r3
 800fbd0:	2600      	movs	r6, #0
 800fbd2:	42b5      	cmp	r5, r6
 800fbd4:	d120      	bne.n	800fc18 <_printf_common+0xc8>
 800fbd6:	2000      	movs	r0, #0
 800fbd8:	e010      	b.n	800fbfc <_printf_common+0xac>
 800fbda:	3501      	adds	r5, #1
 800fbdc:	68e3      	ldr	r3, [r4, #12]
 800fbde:	6832      	ldr	r2, [r6, #0]
 800fbe0:	1a9b      	subs	r3, r3, r2
 800fbe2:	42ab      	cmp	r3, r5
 800fbe4:	ddd2      	ble.n	800fb8c <_printf_common+0x3c>
 800fbe6:	0022      	movs	r2, r4
 800fbe8:	2301      	movs	r3, #1
 800fbea:	9901      	ldr	r1, [sp, #4]
 800fbec:	9800      	ldr	r0, [sp, #0]
 800fbee:	9f08      	ldr	r7, [sp, #32]
 800fbf0:	3219      	adds	r2, #25
 800fbf2:	47b8      	blx	r7
 800fbf4:	3001      	adds	r0, #1
 800fbf6:	d1f0      	bne.n	800fbda <_printf_common+0x8a>
 800fbf8:	2001      	movs	r0, #1
 800fbfa:	4240      	negs	r0, r0
 800fbfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fbfe:	2030      	movs	r0, #48	@ 0x30
 800fc00:	18e1      	adds	r1, r4, r3
 800fc02:	3143      	adds	r1, #67	@ 0x43
 800fc04:	7008      	strb	r0, [r1, #0]
 800fc06:	0021      	movs	r1, r4
 800fc08:	1c5a      	adds	r2, r3, #1
 800fc0a:	3145      	adds	r1, #69	@ 0x45
 800fc0c:	7809      	ldrb	r1, [r1, #0]
 800fc0e:	18a2      	adds	r2, r4, r2
 800fc10:	3243      	adds	r2, #67	@ 0x43
 800fc12:	3302      	adds	r3, #2
 800fc14:	7011      	strb	r1, [r2, #0]
 800fc16:	e7c1      	b.n	800fb9c <_printf_common+0x4c>
 800fc18:	0022      	movs	r2, r4
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	9901      	ldr	r1, [sp, #4]
 800fc1e:	9800      	ldr	r0, [sp, #0]
 800fc20:	9f08      	ldr	r7, [sp, #32]
 800fc22:	321a      	adds	r2, #26
 800fc24:	47b8      	blx	r7
 800fc26:	3001      	adds	r0, #1
 800fc28:	d0e6      	beq.n	800fbf8 <_printf_common+0xa8>
 800fc2a:	3601      	adds	r6, #1
 800fc2c:	e7d1      	b.n	800fbd2 <_printf_common+0x82>
	...

0800fc30 <_printf_i>:
 800fc30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc32:	b08b      	sub	sp, #44	@ 0x2c
 800fc34:	9206      	str	r2, [sp, #24]
 800fc36:	000a      	movs	r2, r1
 800fc38:	3243      	adds	r2, #67	@ 0x43
 800fc3a:	9307      	str	r3, [sp, #28]
 800fc3c:	9005      	str	r0, [sp, #20]
 800fc3e:	9203      	str	r2, [sp, #12]
 800fc40:	7e0a      	ldrb	r2, [r1, #24]
 800fc42:	000c      	movs	r4, r1
 800fc44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fc46:	2a78      	cmp	r2, #120	@ 0x78
 800fc48:	d809      	bhi.n	800fc5e <_printf_i+0x2e>
 800fc4a:	2a62      	cmp	r2, #98	@ 0x62
 800fc4c:	d80b      	bhi.n	800fc66 <_printf_i+0x36>
 800fc4e:	2a00      	cmp	r2, #0
 800fc50:	d100      	bne.n	800fc54 <_printf_i+0x24>
 800fc52:	e0bc      	b.n	800fdce <_printf_i+0x19e>
 800fc54:	497b      	ldr	r1, [pc, #492]	@ (800fe44 <_printf_i+0x214>)
 800fc56:	9104      	str	r1, [sp, #16]
 800fc58:	2a58      	cmp	r2, #88	@ 0x58
 800fc5a:	d100      	bne.n	800fc5e <_printf_i+0x2e>
 800fc5c:	e090      	b.n	800fd80 <_printf_i+0x150>
 800fc5e:	0025      	movs	r5, r4
 800fc60:	3542      	adds	r5, #66	@ 0x42
 800fc62:	702a      	strb	r2, [r5, #0]
 800fc64:	e022      	b.n	800fcac <_printf_i+0x7c>
 800fc66:	0010      	movs	r0, r2
 800fc68:	3863      	subs	r0, #99	@ 0x63
 800fc6a:	2815      	cmp	r0, #21
 800fc6c:	d8f7      	bhi.n	800fc5e <_printf_i+0x2e>
 800fc6e:	f7f0 fa5d 	bl	800012c <__gnu_thumb1_case_shi>
 800fc72:	0016      	.short	0x0016
 800fc74:	fff6001f 	.word	0xfff6001f
 800fc78:	fff6fff6 	.word	0xfff6fff6
 800fc7c:	001ffff6 	.word	0x001ffff6
 800fc80:	fff6fff6 	.word	0xfff6fff6
 800fc84:	fff6fff6 	.word	0xfff6fff6
 800fc88:	003600a1 	.word	0x003600a1
 800fc8c:	fff60080 	.word	0xfff60080
 800fc90:	00b2fff6 	.word	0x00b2fff6
 800fc94:	0036fff6 	.word	0x0036fff6
 800fc98:	fff6fff6 	.word	0xfff6fff6
 800fc9c:	0084      	.short	0x0084
 800fc9e:	0025      	movs	r5, r4
 800fca0:	681a      	ldr	r2, [r3, #0]
 800fca2:	3542      	adds	r5, #66	@ 0x42
 800fca4:	1d11      	adds	r1, r2, #4
 800fca6:	6019      	str	r1, [r3, #0]
 800fca8:	6813      	ldr	r3, [r2, #0]
 800fcaa:	702b      	strb	r3, [r5, #0]
 800fcac:	2301      	movs	r3, #1
 800fcae:	e0a0      	b.n	800fdf2 <_printf_i+0x1c2>
 800fcb0:	6818      	ldr	r0, [r3, #0]
 800fcb2:	6809      	ldr	r1, [r1, #0]
 800fcb4:	1d02      	adds	r2, r0, #4
 800fcb6:	060d      	lsls	r5, r1, #24
 800fcb8:	d50b      	bpl.n	800fcd2 <_printf_i+0xa2>
 800fcba:	6806      	ldr	r6, [r0, #0]
 800fcbc:	601a      	str	r2, [r3, #0]
 800fcbe:	2e00      	cmp	r6, #0
 800fcc0:	da03      	bge.n	800fcca <_printf_i+0x9a>
 800fcc2:	232d      	movs	r3, #45	@ 0x2d
 800fcc4:	9a03      	ldr	r2, [sp, #12]
 800fcc6:	4276      	negs	r6, r6
 800fcc8:	7013      	strb	r3, [r2, #0]
 800fcca:	4b5e      	ldr	r3, [pc, #376]	@ (800fe44 <_printf_i+0x214>)
 800fccc:	270a      	movs	r7, #10
 800fcce:	9304      	str	r3, [sp, #16]
 800fcd0:	e018      	b.n	800fd04 <_printf_i+0xd4>
 800fcd2:	6806      	ldr	r6, [r0, #0]
 800fcd4:	601a      	str	r2, [r3, #0]
 800fcd6:	0649      	lsls	r1, r1, #25
 800fcd8:	d5f1      	bpl.n	800fcbe <_printf_i+0x8e>
 800fcda:	b236      	sxth	r6, r6
 800fcdc:	e7ef      	b.n	800fcbe <_printf_i+0x8e>
 800fcde:	6808      	ldr	r0, [r1, #0]
 800fce0:	6819      	ldr	r1, [r3, #0]
 800fce2:	c940      	ldmia	r1!, {r6}
 800fce4:	0605      	lsls	r5, r0, #24
 800fce6:	d402      	bmi.n	800fcee <_printf_i+0xbe>
 800fce8:	0640      	lsls	r0, r0, #25
 800fcea:	d500      	bpl.n	800fcee <_printf_i+0xbe>
 800fcec:	b2b6      	uxth	r6, r6
 800fcee:	6019      	str	r1, [r3, #0]
 800fcf0:	4b54      	ldr	r3, [pc, #336]	@ (800fe44 <_printf_i+0x214>)
 800fcf2:	270a      	movs	r7, #10
 800fcf4:	9304      	str	r3, [sp, #16]
 800fcf6:	2a6f      	cmp	r2, #111	@ 0x6f
 800fcf8:	d100      	bne.n	800fcfc <_printf_i+0xcc>
 800fcfa:	3f02      	subs	r7, #2
 800fcfc:	0023      	movs	r3, r4
 800fcfe:	2200      	movs	r2, #0
 800fd00:	3343      	adds	r3, #67	@ 0x43
 800fd02:	701a      	strb	r2, [r3, #0]
 800fd04:	6863      	ldr	r3, [r4, #4]
 800fd06:	60a3      	str	r3, [r4, #8]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	db03      	blt.n	800fd14 <_printf_i+0xe4>
 800fd0c:	2104      	movs	r1, #4
 800fd0e:	6822      	ldr	r2, [r4, #0]
 800fd10:	438a      	bics	r2, r1
 800fd12:	6022      	str	r2, [r4, #0]
 800fd14:	2e00      	cmp	r6, #0
 800fd16:	d102      	bne.n	800fd1e <_printf_i+0xee>
 800fd18:	9d03      	ldr	r5, [sp, #12]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d00c      	beq.n	800fd38 <_printf_i+0x108>
 800fd1e:	9d03      	ldr	r5, [sp, #12]
 800fd20:	0030      	movs	r0, r6
 800fd22:	0039      	movs	r1, r7
 800fd24:	f7f0 fa92 	bl	800024c <__aeabi_uidivmod>
 800fd28:	9b04      	ldr	r3, [sp, #16]
 800fd2a:	3d01      	subs	r5, #1
 800fd2c:	5c5b      	ldrb	r3, [r3, r1]
 800fd2e:	702b      	strb	r3, [r5, #0]
 800fd30:	0033      	movs	r3, r6
 800fd32:	0006      	movs	r6, r0
 800fd34:	429f      	cmp	r7, r3
 800fd36:	d9f3      	bls.n	800fd20 <_printf_i+0xf0>
 800fd38:	2f08      	cmp	r7, #8
 800fd3a:	d109      	bne.n	800fd50 <_printf_i+0x120>
 800fd3c:	6823      	ldr	r3, [r4, #0]
 800fd3e:	07db      	lsls	r3, r3, #31
 800fd40:	d506      	bpl.n	800fd50 <_printf_i+0x120>
 800fd42:	6862      	ldr	r2, [r4, #4]
 800fd44:	6923      	ldr	r3, [r4, #16]
 800fd46:	429a      	cmp	r2, r3
 800fd48:	dc02      	bgt.n	800fd50 <_printf_i+0x120>
 800fd4a:	2330      	movs	r3, #48	@ 0x30
 800fd4c:	3d01      	subs	r5, #1
 800fd4e:	702b      	strb	r3, [r5, #0]
 800fd50:	9b03      	ldr	r3, [sp, #12]
 800fd52:	1b5b      	subs	r3, r3, r5
 800fd54:	6123      	str	r3, [r4, #16]
 800fd56:	9b07      	ldr	r3, [sp, #28]
 800fd58:	0021      	movs	r1, r4
 800fd5a:	9300      	str	r3, [sp, #0]
 800fd5c:	9805      	ldr	r0, [sp, #20]
 800fd5e:	9b06      	ldr	r3, [sp, #24]
 800fd60:	aa09      	add	r2, sp, #36	@ 0x24
 800fd62:	f7ff fef5 	bl	800fb50 <_printf_common>
 800fd66:	3001      	adds	r0, #1
 800fd68:	d148      	bne.n	800fdfc <_printf_i+0x1cc>
 800fd6a:	2001      	movs	r0, #1
 800fd6c:	4240      	negs	r0, r0
 800fd6e:	b00b      	add	sp, #44	@ 0x2c
 800fd70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd72:	2220      	movs	r2, #32
 800fd74:	6809      	ldr	r1, [r1, #0]
 800fd76:	430a      	orrs	r2, r1
 800fd78:	6022      	str	r2, [r4, #0]
 800fd7a:	2278      	movs	r2, #120	@ 0x78
 800fd7c:	4932      	ldr	r1, [pc, #200]	@ (800fe48 <_printf_i+0x218>)
 800fd7e:	9104      	str	r1, [sp, #16]
 800fd80:	0021      	movs	r1, r4
 800fd82:	3145      	adds	r1, #69	@ 0x45
 800fd84:	700a      	strb	r2, [r1, #0]
 800fd86:	6819      	ldr	r1, [r3, #0]
 800fd88:	6822      	ldr	r2, [r4, #0]
 800fd8a:	c940      	ldmia	r1!, {r6}
 800fd8c:	0610      	lsls	r0, r2, #24
 800fd8e:	d402      	bmi.n	800fd96 <_printf_i+0x166>
 800fd90:	0650      	lsls	r0, r2, #25
 800fd92:	d500      	bpl.n	800fd96 <_printf_i+0x166>
 800fd94:	b2b6      	uxth	r6, r6
 800fd96:	6019      	str	r1, [r3, #0]
 800fd98:	07d3      	lsls	r3, r2, #31
 800fd9a:	d502      	bpl.n	800fda2 <_printf_i+0x172>
 800fd9c:	2320      	movs	r3, #32
 800fd9e:	4313      	orrs	r3, r2
 800fda0:	6023      	str	r3, [r4, #0]
 800fda2:	2e00      	cmp	r6, #0
 800fda4:	d001      	beq.n	800fdaa <_printf_i+0x17a>
 800fda6:	2710      	movs	r7, #16
 800fda8:	e7a8      	b.n	800fcfc <_printf_i+0xcc>
 800fdaa:	2220      	movs	r2, #32
 800fdac:	6823      	ldr	r3, [r4, #0]
 800fdae:	4393      	bics	r3, r2
 800fdb0:	6023      	str	r3, [r4, #0]
 800fdb2:	e7f8      	b.n	800fda6 <_printf_i+0x176>
 800fdb4:	681a      	ldr	r2, [r3, #0]
 800fdb6:	680d      	ldr	r5, [r1, #0]
 800fdb8:	1d10      	adds	r0, r2, #4
 800fdba:	6949      	ldr	r1, [r1, #20]
 800fdbc:	6018      	str	r0, [r3, #0]
 800fdbe:	6813      	ldr	r3, [r2, #0]
 800fdc0:	062e      	lsls	r6, r5, #24
 800fdc2:	d501      	bpl.n	800fdc8 <_printf_i+0x198>
 800fdc4:	6019      	str	r1, [r3, #0]
 800fdc6:	e002      	b.n	800fdce <_printf_i+0x19e>
 800fdc8:	066d      	lsls	r5, r5, #25
 800fdca:	d5fb      	bpl.n	800fdc4 <_printf_i+0x194>
 800fdcc:	8019      	strh	r1, [r3, #0]
 800fdce:	2300      	movs	r3, #0
 800fdd0:	9d03      	ldr	r5, [sp, #12]
 800fdd2:	6123      	str	r3, [r4, #16]
 800fdd4:	e7bf      	b.n	800fd56 <_printf_i+0x126>
 800fdd6:	681a      	ldr	r2, [r3, #0]
 800fdd8:	1d11      	adds	r1, r2, #4
 800fdda:	6019      	str	r1, [r3, #0]
 800fddc:	6815      	ldr	r5, [r2, #0]
 800fdde:	2100      	movs	r1, #0
 800fde0:	0028      	movs	r0, r5
 800fde2:	6862      	ldr	r2, [r4, #4]
 800fde4:	f000 f9f7 	bl	80101d6 <memchr>
 800fde8:	2800      	cmp	r0, #0
 800fdea:	d001      	beq.n	800fdf0 <_printf_i+0x1c0>
 800fdec:	1b40      	subs	r0, r0, r5
 800fdee:	6060      	str	r0, [r4, #4]
 800fdf0:	6863      	ldr	r3, [r4, #4]
 800fdf2:	6123      	str	r3, [r4, #16]
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	9a03      	ldr	r2, [sp, #12]
 800fdf8:	7013      	strb	r3, [r2, #0]
 800fdfa:	e7ac      	b.n	800fd56 <_printf_i+0x126>
 800fdfc:	002a      	movs	r2, r5
 800fdfe:	6923      	ldr	r3, [r4, #16]
 800fe00:	9906      	ldr	r1, [sp, #24]
 800fe02:	9805      	ldr	r0, [sp, #20]
 800fe04:	9d07      	ldr	r5, [sp, #28]
 800fe06:	47a8      	blx	r5
 800fe08:	3001      	adds	r0, #1
 800fe0a:	d0ae      	beq.n	800fd6a <_printf_i+0x13a>
 800fe0c:	6823      	ldr	r3, [r4, #0]
 800fe0e:	079b      	lsls	r3, r3, #30
 800fe10:	d415      	bmi.n	800fe3e <_printf_i+0x20e>
 800fe12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe14:	68e0      	ldr	r0, [r4, #12]
 800fe16:	4298      	cmp	r0, r3
 800fe18:	daa9      	bge.n	800fd6e <_printf_i+0x13e>
 800fe1a:	0018      	movs	r0, r3
 800fe1c:	e7a7      	b.n	800fd6e <_printf_i+0x13e>
 800fe1e:	0022      	movs	r2, r4
 800fe20:	2301      	movs	r3, #1
 800fe22:	9906      	ldr	r1, [sp, #24]
 800fe24:	9805      	ldr	r0, [sp, #20]
 800fe26:	9e07      	ldr	r6, [sp, #28]
 800fe28:	3219      	adds	r2, #25
 800fe2a:	47b0      	blx	r6
 800fe2c:	3001      	adds	r0, #1
 800fe2e:	d09c      	beq.n	800fd6a <_printf_i+0x13a>
 800fe30:	3501      	adds	r5, #1
 800fe32:	68e3      	ldr	r3, [r4, #12]
 800fe34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fe36:	1a9b      	subs	r3, r3, r2
 800fe38:	42ab      	cmp	r3, r5
 800fe3a:	dcf0      	bgt.n	800fe1e <_printf_i+0x1ee>
 800fe3c:	e7e9      	b.n	800fe12 <_printf_i+0x1e2>
 800fe3e:	2500      	movs	r5, #0
 800fe40:	e7f7      	b.n	800fe32 <_printf_i+0x202>
 800fe42:	46c0      	nop			@ (mov r8, r8)
 800fe44:	08012724 	.word	0x08012724
 800fe48:	08012735 	.word	0x08012735

0800fe4c <std>:
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	b510      	push	{r4, lr}
 800fe50:	0004      	movs	r4, r0
 800fe52:	6003      	str	r3, [r0, #0]
 800fe54:	6043      	str	r3, [r0, #4]
 800fe56:	6083      	str	r3, [r0, #8]
 800fe58:	8181      	strh	r1, [r0, #12]
 800fe5a:	6643      	str	r3, [r0, #100]	@ 0x64
 800fe5c:	81c2      	strh	r2, [r0, #14]
 800fe5e:	6103      	str	r3, [r0, #16]
 800fe60:	6143      	str	r3, [r0, #20]
 800fe62:	6183      	str	r3, [r0, #24]
 800fe64:	0019      	movs	r1, r3
 800fe66:	2208      	movs	r2, #8
 800fe68:	305c      	adds	r0, #92	@ 0x5c
 800fe6a:	f000 f92d 	bl	80100c8 <memset>
 800fe6e:	4b0b      	ldr	r3, [pc, #44]	@ (800fe9c <std+0x50>)
 800fe70:	6224      	str	r4, [r4, #32]
 800fe72:	6263      	str	r3, [r4, #36]	@ 0x24
 800fe74:	4b0a      	ldr	r3, [pc, #40]	@ (800fea0 <std+0x54>)
 800fe76:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fe78:	4b0a      	ldr	r3, [pc, #40]	@ (800fea4 <std+0x58>)
 800fe7a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fe7c:	4b0a      	ldr	r3, [pc, #40]	@ (800fea8 <std+0x5c>)
 800fe7e:	6323      	str	r3, [r4, #48]	@ 0x30
 800fe80:	4b0a      	ldr	r3, [pc, #40]	@ (800feac <std+0x60>)
 800fe82:	429c      	cmp	r4, r3
 800fe84:	d005      	beq.n	800fe92 <std+0x46>
 800fe86:	4b0a      	ldr	r3, [pc, #40]	@ (800feb0 <std+0x64>)
 800fe88:	429c      	cmp	r4, r3
 800fe8a:	d002      	beq.n	800fe92 <std+0x46>
 800fe8c:	4b09      	ldr	r3, [pc, #36]	@ (800feb4 <std+0x68>)
 800fe8e:	429c      	cmp	r4, r3
 800fe90:	d103      	bne.n	800fe9a <std+0x4e>
 800fe92:	0020      	movs	r0, r4
 800fe94:	3058      	adds	r0, #88	@ 0x58
 800fe96:	f000 f99b 	bl	80101d0 <__retarget_lock_init_recursive>
 800fe9a:	bd10      	pop	{r4, pc}
 800fe9c:	08010015 	.word	0x08010015
 800fea0:	0801003d 	.word	0x0801003d
 800fea4:	08010075 	.word	0x08010075
 800fea8:	080100a1 	.word	0x080100a1
 800feac:	20001c7c 	.word	0x20001c7c
 800feb0:	20001ce4 	.word	0x20001ce4
 800feb4:	20001d4c 	.word	0x20001d4c

0800feb8 <stdio_exit_handler>:
 800feb8:	b510      	push	{r4, lr}
 800feba:	4a03      	ldr	r2, [pc, #12]	@ (800fec8 <stdio_exit_handler+0x10>)
 800febc:	4903      	ldr	r1, [pc, #12]	@ (800fecc <stdio_exit_handler+0x14>)
 800febe:	4804      	ldr	r0, [pc, #16]	@ (800fed0 <stdio_exit_handler+0x18>)
 800fec0:	f000 f86c 	bl	800ff9c <_fwalk_sglue>
 800fec4:	bd10      	pop	{r4, pc}
 800fec6:	46c0      	nop			@ (mov r8, r8)
 800fec8:	200001dc 	.word	0x200001dc
 800fecc:	08011c21 	.word	0x08011c21
 800fed0:	200001ec 	.word	0x200001ec

0800fed4 <cleanup_stdio>:
 800fed4:	6841      	ldr	r1, [r0, #4]
 800fed6:	4b0b      	ldr	r3, [pc, #44]	@ (800ff04 <cleanup_stdio+0x30>)
 800fed8:	b510      	push	{r4, lr}
 800feda:	0004      	movs	r4, r0
 800fedc:	4299      	cmp	r1, r3
 800fede:	d001      	beq.n	800fee4 <cleanup_stdio+0x10>
 800fee0:	f001 fe9e 	bl	8011c20 <_fflush_r>
 800fee4:	68a1      	ldr	r1, [r4, #8]
 800fee6:	4b08      	ldr	r3, [pc, #32]	@ (800ff08 <cleanup_stdio+0x34>)
 800fee8:	4299      	cmp	r1, r3
 800feea:	d002      	beq.n	800fef2 <cleanup_stdio+0x1e>
 800feec:	0020      	movs	r0, r4
 800feee:	f001 fe97 	bl	8011c20 <_fflush_r>
 800fef2:	68e1      	ldr	r1, [r4, #12]
 800fef4:	4b05      	ldr	r3, [pc, #20]	@ (800ff0c <cleanup_stdio+0x38>)
 800fef6:	4299      	cmp	r1, r3
 800fef8:	d002      	beq.n	800ff00 <cleanup_stdio+0x2c>
 800fefa:	0020      	movs	r0, r4
 800fefc:	f001 fe90 	bl	8011c20 <_fflush_r>
 800ff00:	bd10      	pop	{r4, pc}
 800ff02:	46c0      	nop			@ (mov r8, r8)
 800ff04:	20001c7c 	.word	0x20001c7c
 800ff08:	20001ce4 	.word	0x20001ce4
 800ff0c:	20001d4c 	.word	0x20001d4c

0800ff10 <global_stdio_init.part.0>:
 800ff10:	b510      	push	{r4, lr}
 800ff12:	4b09      	ldr	r3, [pc, #36]	@ (800ff38 <global_stdio_init.part.0+0x28>)
 800ff14:	4a09      	ldr	r2, [pc, #36]	@ (800ff3c <global_stdio_init.part.0+0x2c>)
 800ff16:	2104      	movs	r1, #4
 800ff18:	601a      	str	r2, [r3, #0]
 800ff1a:	4809      	ldr	r0, [pc, #36]	@ (800ff40 <global_stdio_init.part.0+0x30>)
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	f7ff ff95 	bl	800fe4c <std>
 800ff22:	2201      	movs	r2, #1
 800ff24:	2109      	movs	r1, #9
 800ff26:	4807      	ldr	r0, [pc, #28]	@ (800ff44 <global_stdio_init.part.0+0x34>)
 800ff28:	f7ff ff90 	bl	800fe4c <std>
 800ff2c:	2202      	movs	r2, #2
 800ff2e:	2112      	movs	r1, #18
 800ff30:	4805      	ldr	r0, [pc, #20]	@ (800ff48 <global_stdio_init.part.0+0x38>)
 800ff32:	f7ff ff8b 	bl	800fe4c <std>
 800ff36:	bd10      	pop	{r4, pc}
 800ff38:	20001db4 	.word	0x20001db4
 800ff3c:	0800feb9 	.word	0x0800feb9
 800ff40:	20001c7c 	.word	0x20001c7c
 800ff44:	20001ce4 	.word	0x20001ce4
 800ff48:	20001d4c 	.word	0x20001d4c

0800ff4c <__sfp_lock_acquire>:
 800ff4c:	b510      	push	{r4, lr}
 800ff4e:	4802      	ldr	r0, [pc, #8]	@ (800ff58 <__sfp_lock_acquire+0xc>)
 800ff50:	f000 f93f 	bl	80101d2 <__retarget_lock_acquire_recursive>
 800ff54:	bd10      	pop	{r4, pc}
 800ff56:	46c0      	nop			@ (mov r8, r8)
 800ff58:	20001dbd 	.word	0x20001dbd

0800ff5c <__sfp_lock_release>:
 800ff5c:	b510      	push	{r4, lr}
 800ff5e:	4802      	ldr	r0, [pc, #8]	@ (800ff68 <__sfp_lock_release+0xc>)
 800ff60:	f000 f938 	bl	80101d4 <__retarget_lock_release_recursive>
 800ff64:	bd10      	pop	{r4, pc}
 800ff66:	46c0      	nop			@ (mov r8, r8)
 800ff68:	20001dbd 	.word	0x20001dbd

0800ff6c <__sinit>:
 800ff6c:	b510      	push	{r4, lr}
 800ff6e:	0004      	movs	r4, r0
 800ff70:	f7ff ffec 	bl	800ff4c <__sfp_lock_acquire>
 800ff74:	6a23      	ldr	r3, [r4, #32]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d002      	beq.n	800ff80 <__sinit+0x14>
 800ff7a:	f7ff ffef 	bl	800ff5c <__sfp_lock_release>
 800ff7e:	bd10      	pop	{r4, pc}
 800ff80:	4b04      	ldr	r3, [pc, #16]	@ (800ff94 <__sinit+0x28>)
 800ff82:	6223      	str	r3, [r4, #32]
 800ff84:	4b04      	ldr	r3, [pc, #16]	@ (800ff98 <__sinit+0x2c>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d1f6      	bne.n	800ff7a <__sinit+0xe>
 800ff8c:	f7ff ffc0 	bl	800ff10 <global_stdio_init.part.0>
 800ff90:	e7f3      	b.n	800ff7a <__sinit+0xe>
 800ff92:	46c0      	nop			@ (mov r8, r8)
 800ff94:	0800fed5 	.word	0x0800fed5
 800ff98:	20001db4 	.word	0x20001db4

0800ff9c <_fwalk_sglue>:
 800ff9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff9e:	0014      	movs	r4, r2
 800ffa0:	2600      	movs	r6, #0
 800ffa2:	9000      	str	r0, [sp, #0]
 800ffa4:	9101      	str	r1, [sp, #4]
 800ffa6:	68a5      	ldr	r5, [r4, #8]
 800ffa8:	6867      	ldr	r7, [r4, #4]
 800ffaa:	3f01      	subs	r7, #1
 800ffac:	d504      	bpl.n	800ffb8 <_fwalk_sglue+0x1c>
 800ffae:	6824      	ldr	r4, [r4, #0]
 800ffb0:	2c00      	cmp	r4, #0
 800ffb2:	d1f8      	bne.n	800ffa6 <_fwalk_sglue+0xa>
 800ffb4:	0030      	movs	r0, r6
 800ffb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ffb8:	89ab      	ldrh	r3, [r5, #12]
 800ffba:	2b01      	cmp	r3, #1
 800ffbc:	d908      	bls.n	800ffd0 <_fwalk_sglue+0x34>
 800ffbe:	220e      	movs	r2, #14
 800ffc0:	5eab      	ldrsh	r3, [r5, r2]
 800ffc2:	3301      	adds	r3, #1
 800ffc4:	d004      	beq.n	800ffd0 <_fwalk_sglue+0x34>
 800ffc6:	0029      	movs	r1, r5
 800ffc8:	9800      	ldr	r0, [sp, #0]
 800ffca:	9b01      	ldr	r3, [sp, #4]
 800ffcc:	4798      	blx	r3
 800ffce:	4306      	orrs	r6, r0
 800ffd0:	3568      	adds	r5, #104	@ 0x68
 800ffd2:	e7ea      	b.n	800ffaa <_fwalk_sglue+0xe>

0800ffd4 <siprintf>:
 800ffd4:	b40e      	push	{r1, r2, r3}
 800ffd6:	b500      	push	{lr}
 800ffd8:	490b      	ldr	r1, [pc, #44]	@ (8010008 <siprintf+0x34>)
 800ffda:	b09c      	sub	sp, #112	@ 0x70
 800ffdc:	ab1d      	add	r3, sp, #116	@ 0x74
 800ffde:	9002      	str	r0, [sp, #8]
 800ffe0:	9006      	str	r0, [sp, #24]
 800ffe2:	9107      	str	r1, [sp, #28]
 800ffe4:	9104      	str	r1, [sp, #16]
 800ffe6:	4809      	ldr	r0, [pc, #36]	@ (801000c <siprintf+0x38>)
 800ffe8:	4909      	ldr	r1, [pc, #36]	@ (8010010 <siprintf+0x3c>)
 800ffea:	cb04      	ldmia	r3!, {r2}
 800ffec:	9105      	str	r1, [sp, #20]
 800ffee:	6800      	ldr	r0, [r0, #0]
 800fff0:	a902      	add	r1, sp, #8
 800fff2:	9301      	str	r3, [sp, #4]
 800fff4:	f001 fc90 	bl	8011918 <_svfiprintf_r>
 800fff8:	2200      	movs	r2, #0
 800fffa:	9b02      	ldr	r3, [sp, #8]
 800fffc:	701a      	strb	r2, [r3, #0]
 800fffe:	b01c      	add	sp, #112	@ 0x70
 8010000:	bc08      	pop	{r3}
 8010002:	b003      	add	sp, #12
 8010004:	4718      	bx	r3
 8010006:	46c0      	nop			@ (mov r8, r8)
 8010008:	7fffffff 	.word	0x7fffffff
 801000c:	200001e8 	.word	0x200001e8
 8010010:	ffff0208 	.word	0xffff0208

08010014 <__sread>:
 8010014:	b570      	push	{r4, r5, r6, lr}
 8010016:	000c      	movs	r4, r1
 8010018:	250e      	movs	r5, #14
 801001a:	5f49      	ldrsh	r1, [r1, r5]
 801001c:	f000 f886 	bl	801012c <_read_r>
 8010020:	2800      	cmp	r0, #0
 8010022:	db03      	blt.n	801002c <__sread+0x18>
 8010024:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8010026:	181b      	adds	r3, r3, r0
 8010028:	6563      	str	r3, [r4, #84]	@ 0x54
 801002a:	bd70      	pop	{r4, r5, r6, pc}
 801002c:	89a3      	ldrh	r3, [r4, #12]
 801002e:	4a02      	ldr	r2, [pc, #8]	@ (8010038 <__sread+0x24>)
 8010030:	4013      	ands	r3, r2
 8010032:	81a3      	strh	r3, [r4, #12]
 8010034:	e7f9      	b.n	801002a <__sread+0x16>
 8010036:	46c0      	nop			@ (mov r8, r8)
 8010038:	ffffefff 	.word	0xffffefff

0801003c <__swrite>:
 801003c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801003e:	001f      	movs	r7, r3
 8010040:	898b      	ldrh	r3, [r1, #12]
 8010042:	0005      	movs	r5, r0
 8010044:	000c      	movs	r4, r1
 8010046:	0016      	movs	r6, r2
 8010048:	05db      	lsls	r3, r3, #23
 801004a:	d505      	bpl.n	8010058 <__swrite+0x1c>
 801004c:	230e      	movs	r3, #14
 801004e:	5ec9      	ldrsh	r1, [r1, r3]
 8010050:	2200      	movs	r2, #0
 8010052:	2302      	movs	r3, #2
 8010054:	f000 f856 	bl	8010104 <_lseek_r>
 8010058:	89a3      	ldrh	r3, [r4, #12]
 801005a:	4a05      	ldr	r2, [pc, #20]	@ (8010070 <__swrite+0x34>)
 801005c:	0028      	movs	r0, r5
 801005e:	4013      	ands	r3, r2
 8010060:	81a3      	strh	r3, [r4, #12]
 8010062:	0032      	movs	r2, r6
 8010064:	230e      	movs	r3, #14
 8010066:	5ee1      	ldrsh	r1, [r4, r3]
 8010068:	003b      	movs	r3, r7
 801006a:	f000 f873 	bl	8010154 <_write_r>
 801006e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010070:	ffffefff 	.word	0xffffefff

08010074 <__sseek>:
 8010074:	b570      	push	{r4, r5, r6, lr}
 8010076:	000c      	movs	r4, r1
 8010078:	250e      	movs	r5, #14
 801007a:	5f49      	ldrsh	r1, [r1, r5]
 801007c:	f000 f842 	bl	8010104 <_lseek_r>
 8010080:	89a3      	ldrh	r3, [r4, #12]
 8010082:	1c42      	adds	r2, r0, #1
 8010084:	d103      	bne.n	801008e <__sseek+0x1a>
 8010086:	4a05      	ldr	r2, [pc, #20]	@ (801009c <__sseek+0x28>)
 8010088:	4013      	ands	r3, r2
 801008a:	81a3      	strh	r3, [r4, #12]
 801008c:	bd70      	pop	{r4, r5, r6, pc}
 801008e:	2280      	movs	r2, #128	@ 0x80
 8010090:	0152      	lsls	r2, r2, #5
 8010092:	4313      	orrs	r3, r2
 8010094:	81a3      	strh	r3, [r4, #12]
 8010096:	6560      	str	r0, [r4, #84]	@ 0x54
 8010098:	e7f8      	b.n	801008c <__sseek+0x18>
 801009a:	46c0      	nop			@ (mov r8, r8)
 801009c:	ffffefff 	.word	0xffffefff

080100a0 <__sclose>:
 80100a0:	b510      	push	{r4, lr}
 80100a2:	230e      	movs	r3, #14
 80100a4:	5ec9      	ldrsh	r1, [r1, r3]
 80100a6:	f000 f81b 	bl	80100e0 <_close_r>
 80100aa:	bd10      	pop	{r4, pc}

080100ac <memcmp>:
 80100ac:	b530      	push	{r4, r5, lr}
 80100ae:	2400      	movs	r4, #0
 80100b0:	3901      	subs	r1, #1
 80100b2:	42a2      	cmp	r2, r4
 80100b4:	d101      	bne.n	80100ba <memcmp+0xe>
 80100b6:	2000      	movs	r0, #0
 80100b8:	e005      	b.n	80100c6 <memcmp+0x1a>
 80100ba:	5d03      	ldrb	r3, [r0, r4]
 80100bc:	3401      	adds	r4, #1
 80100be:	5d0d      	ldrb	r5, [r1, r4]
 80100c0:	42ab      	cmp	r3, r5
 80100c2:	d0f6      	beq.n	80100b2 <memcmp+0x6>
 80100c4:	1b58      	subs	r0, r3, r5
 80100c6:	bd30      	pop	{r4, r5, pc}

080100c8 <memset>:
 80100c8:	0003      	movs	r3, r0
 80100ca:	1882      	adds	r2, r0, r2
 80100cc:	4293      	cmp	r3, r2
 80100ce:	d100      	bne.n	80100d2 <memset+0xa>
 80100d0:	4770      	bx	lr
 80100d2:	7019      	strb	r1, [r3, #0]
 80100d4:	3301      	adds	r3, #1
 80100d6:	e7f9      	b.n	80100cc <memset+0x4>

080100d8 <_localeconv_r>:
 80100d8:	4800      	ldr	r0, [pc, #0]	@ (80100dc <_localeconv_r+0x4>)
 80100da:	4770      	bx	lr
 80100dc:	20000328 	.word	0x20000328

080100e0 <_close_r>:
 80100e0:	2300      	movs	r3, #0
 80100e2:	b570      	push	{r4, r5, r6, lr}
 80100e4:	4d06      	ldr	r5, [pc, #24]	@ (8010100 <_close_r+0x20>)
 80100e6:	0004      	movs	r4, r0
 80100e8:	0008      	movs	r0, r1
 80100ea:	602b      	str	r3, [r5, #0]
 80100ec:	f7f3 fa22 	bl	8003534 <_close>
 80100f0:	1c43      	adds	r3, r0, #1
 80100f2:	d103      	bne.n	80100fc <_close_r+0x1c>
 80100f4:	682b      	ldr	r3, [r5, #0]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d000      	beq.n	80100fc <_close_r+0x1c>
 80100fa:	6023      	str	r3, [r4, #0]
 80100fc:	bd70      	pop	{r4, r5, r6, pc}
 80100fe:	46c0      	nop			@ (mov r8, r8)
 8010100:	20001db8 	.word	0x20001db8

08010104 <_lseek_r>:
 8010104:	b570      	push	{r4, r5, r6, lr}
 8010106:	0004      	movs	r4, r0
 8010108:	0008      	movs	r0, r1
 801010a:	0011      	movs	r1, r2
 801010c:	001a      	movs	r2, r3
 801010e:	2300      	movs	r3, #0
 8010110:	4d05      	ldr	r5, [pc, #20]	@ (8010128 <_lseek_r+0x24>)
 8010112:	602b      	str	r3, [r5, #0]
 8010114:	f7f3 fa2f 	bl	8003576 <_lseek>
 8010118:	1c43      	adds	r3, r0, #1
 801011a:	d103      	bne.n	8010124 <_lseek_r+0x20>
 801011c:	682b      	ldr	r3, [r5, #0]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d000      	beq.n	8010124 <_lseek_r+0x20>
 8010122:	6023      	str	r3, [r4, #0]
 8010124:	bd70      	pop	{r4, r5, r6, pc}
 8010126:	46c0      	nop			@ (mov r8, r8)
 8010128:	20001db8 	.word	0x20001db8

0801012c <_read_r>:
 801012c:	b570      	push	{r4, r5, r6, lr}
 801012e:	0004      	movs	r4, r0
 8010130:	0008      	movs	r0, r1
 8010132:	0011      	movs	r1, r2
 8010134:	001a      	movs	r2, r3
 8010136:	2300      	movs	r3, #0
 8010138:	4d05      	ldr	r5, [pc, #20]	@ (8010150 <_read_r+0x24>)
 801013a:	602b      	str	r3, [r5, #0]
 801013c:	f7f3 f9c1 	bl	80034c2 <_read>
 8010140:	1c43      	adds	r3, r0, #1
 8010142:	d103      	bne.n	801014c <_read_r+0x20>
 8010144:	682b      	ldr	r3, [r5, #0]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d000      	beq.n	801014c <_read_r+0x20>
 801014a:	6023      	str	r3, [r4, #0]
 801014c:	bd70      	pop	{r4, r5, r6, pc}
 801014e:	46c0      	nop			@ (mov r8, r8)
 8010150:	20001db8 	.word	0x20001db8

08010154 <_write_r>:
 8010154:	b570      	push	{r4, r5, r6, lr}
 8010156:	0004      	movs	r4, r0
 8010158:	0008      	movs	r0, r1
 801015a:	0011      	movs	r1, r2
 801015c:	001a      	movs	r2, r3
 801015e:	2300      	movs	r3, #0
 8010160:	4d05      	ldr	r5, [pc, #20]	@ (8010178 <_write_r+0x24>)
 8010162:	602b      	str	r3, [r5, #0]
 8010164:	f7f3 f9ca 	bl	80034fc <_write>
 8010168:	1c43      	adds	r3, r0, #1
 801016a:	d103      	bne.n	8010174 <_write_r+0x20>
 801016c:	682b      	ldr	r3, [r5, #0]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d000      	beq.n	8010174 <_write_r+0x20>
 8010172:	6023      	str	r3, [r4, #0]
 8010174:	bd70      	pop	{r4, r5, r6, pc}
 8010176:	46c0      	nop			@ (mov r8, r8)
 8010178:	20001db8 	.word	0x20001db8

0801017c <__errno>:
 801017c:	4b01      	ldr	r3, [pc, #4]	@ (8010184 <__errno+0x8>)
 801017e:	6818      	ldr	r0, [r3, #0]
 8010180:	4770      	bx	lr
 8010182:	46c0      	nop			@ (mov r8, r8)
 8010184:	200001e8 	.word	0x200001e8

08010188 <__libc_init_array>:
 8010188:	b570      	push	{r4, r5, r6, lr}
 801018a:	2600      	movs	r6, #0
 801018c:	4c0c      	ldr	r4, [pc, #48]	@ (80101c0 <__libc_init_array+0x38>)
 801018e:	4d0d      	ldr	r5, [pc, #52]	@ (80101c4 <__libc_init_array+0x3c>)
 8010190:	1b64      	subs	r4, r4, r5
 8010192:	10a4      	asrs	r4, r4, #2
 8010194:	42a6      	cmp	r6, r4
 8010196:	d109      	bne.n	80101ac <__libc_init_array+0x24>
 8010198:	2600      	movs	r6, #0
 801019a:	f002 f907 	bl	80123ac <_init>
 801019e:	4c0a      	ldr	r4, [pc, #40]	@ (80101c8 <__libc_init_array+0x40>)
 80101a0:	4d0a      	ldr	r5, [pc, #40]	@ (80101cc <__libc_init_array+0x44>)
 80101a2:	1b64      	subs	r4, r4, r5
 80101a4:	10a4      	asrs	r4, r4, #2
 80101a6:	42a6      	cmp	r6, r4
 80101a8:	d105      	bne.n	80101b6 <__libc_init_array+0x2e>
 80101aa:	bd70      	pop	{r4, r5, r6, pc}
 80101ac:	00b3      	lsls	r3, r6, #2
 80101ae:	58eb      	ldr	r3, [r5, r3]
 80101b0:	4798      	blx	r3
 80101b2:	3601      	adds	r6, #1
 80101b4:	e7ee      	b.n	8010194 <__libc_init_array+0xc>
 80101b6:	00b3      	lsls	r3, r6, #2
 80101b8:	58eb      	ldr	r3, [r5, r3]
 80101ba:	4798      	blx	r3
 80101bc:	3601      	adds	r6, #1
 80101be:	e7f2      	b.n	80101a6 <__libc_init_array+0x1e>
 80101c0:	08012a80 	.word	0x08012a80
 80101c4:	08012a80 	.word	0x08012a80
 80101c8:	08012a84 	.word	0x08012a84
 80101cc:	08012a80 	.word	0x08012a80

080101d0 <__retarget_lock_init_recursive>:
 80101d0:	4770      	bx	lr

080101d2 <__retarget_lock_acquire_recursive>:
 80101d2:	4770      	bx	lr

080101d4 <__retarget_lock_release_recursive>:
 80101d4:	4770      	bx	lr

080101d6 <memchr>:
 80101d6:	b2c9      	uxtb	r1, r1
 80101d8:	1882      	adds	r2, r0, r2
 80101da:	4290      	cmp	r0, r2
 80101dc:	d101      	bne.n	80101e2 <memchr+0xc>
 80101de:	2000      	movs	r0, #0
 80101e0:	4770      	bx	lr
 80101e2:	7803      	ldrb	r3, [r0, #0]
 80101e4:	428b      	cmp	r3, r1
 80101e6:	d0fb      	beq.n	80101e0 <memchr+0xa>
 80101e8:	3001      	adds	r0, #1
 80101ea:	e7f6      	b.n	80101da <memchr+0x4>

080101ec <memcpy>:
 80101ec:	2300      	movs	r3, #0
 80101ee:	b510      	push	{r4, lr}
 80101f0:	429a      	cmp	r2, r3
 80101f2:	d100      	bne.n	80101f6 <memcpy+0xa>
 80101f4:	bd10      	pop	{r4, pc}
 80101f6:	5ccc      	ldrb	r4, [r1, r3]
 80101f8:	54c4      	strb	r4, [r0, r3]
 80101fa:	3301      	adds	r3, #1
 80101fc:	e7f8      	b.n	80101f0 <memcpy+0x4>

080101fe <quorem>:
 80101fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010200:	6902      	ldr	r2, [r0, #16]
 8010202:	690f      	ldr	r7, [r1, #16]
 8010204:	b087      	sub	sp, #28
 8010206:	0006      	movs	r6, r0
 8010208:	000b      	movs	r3, r1
 801020a:	2000      	movs	r0, #0
 801020c:	9102      	str	r1, [sp, #8]
 801020e:	42ba      	cmp	r2, r7
 8010210:	db6d      	blt.n	80102ee <quorem+0xf0>
 8010212:	3f01      	subs	r7, #1
 8010214:	00bc      	lsls	r4, r7, #2
 8010216:	3314      	adds	r3, #20
 8010218:	9305      	str	r3, [sp, #20]
 801021a:	191b      	adds	r3, r3, r4
 801021c:	9303      	str	r3, [sp, #12]
 801021e:	0033      	movs	r3, r6
 8010220:	3314      	adds	r3, #20
 8010222:	191c      	adds	r4, r3, r4
 8010224:	9301      	str	r3, [sp, #4]
 8010226:	6823      	ldr	r3, [r4, #0]
 8010228:	9304      	str	r3, [sp, #16]
 801022a:	9b03      	ldr	r3, [sp, #12]
 801022c:	9804      	ldr	r0, [sp, #16]
 801022e:	681d      	ldr	r5, [r3, #0]
 8010230:	3501      	adds	r5, #1
 8010232:	0029      	movs	r1, r5
 8010234:	f7ef ff84 	bl	8000140 <__udivsi3>
 8010238:	9b04      	ldr	r3, [sp, #16]
 801023a:	9000      	str	r0, [sp, #0]
 801023c:	42ab      	cmp	r3, r5
 801023e:	d32b      	bcc.n	8010298 <quorem+0x9a>
 8010240:	9b05      	ldr	r3, [sp, #20]
 8010242:	9d01      	ldr	r5, [sp, #4]
 8010244:	469c      	mov	ip, r3
 8010246:	2300      	movs	r3, #0
 8010248:	9305      	str	r3, [sp, #20]
 801024a:	9304      	str	r3, [sp, #16]
 801024c:	4662      	mov	r2, ip
 801024e:	ca08      	ldmia	r2!, {r3}
 8010250:	6828      	ldr	r0, [r5, #0]
 8010252:	4694      	mov	ip, r2
 8010254:	9a00      	ldr	r2, [sp, #0]
 8010256:	b299      	uxth	r1, r3
 8010258:	4351      	muls	r1, r2
 801025a:	9a05      	ldr	r2, [sp, #20]
 801025c:	0c1b      	lsrs	r3, r3, #16
 801025e:	1889      	adds	r1, r1, r2
 8010260:	9a00      	ldr	r2, [sp, #0]
 8010262:	4353      	muls	r3, r2
 8010264:	0c0a      	lsrs	r2, r1, #16
 8010266:	189b      	adds	r3, r3, r2
 8010268:	0c1a      	lsrs	r2, r3, #16
 801026a:	b289      	uxth	r1, r1
 801026c:	9205      	str	r2, [sp, #20]
 801026e:	b282      	uxth	r2, r0
 8010270:	1a52      	subs	r2, r2, r1
 8010272:	9904      	ldr	r1, [sp, #16]
 8010274:	0c00      	lsrs	r0, r0, #16
 8010276:	1852      	adds	r2, r2, r1
 8010278:	b29b      	uxth	r3, r3
 801027a:	1411      	asrs	r1, r2, #16
 801027c:	1ac3      	subs	r3, r0, r3
 801027e:	185b      	adds	r3, r3, r1
 8010280:	1419      	asrs	r1, r3, #16
 8010282:	b292      	uxth	r2, r2
 8010284:	041b      	lsls	r3, r3, #16
 8010286:	431a      	orrs	r2, r3
 8010288:	9b03      	ldr	r3, [sp, #12]
 801028a:	9104      	str	r1, [sp, #16]
 801028c:	c504      	stmia	r5!, {r2}
 801028e:	4563      	cmp	r3, ip
 8010290:	d2dc      	bcs.n	801024c <quorem+0x4e>
 8010292:	6823      	ldr	r3, [r4, #0]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d030      	beq.n	80102fa <quorem+0xfc>
 8010298:	0030      	movs	r0, r6
 801029a:	9902      	ldr	r1, [sp, #8]
 801029c:	f001 f9c6 	bl	801162c <__mcmp>
 80102a0:	2800      	cmp	r0, #0
 80102a2:	db23      	blt.n	80102ec <quorem+0xee>
 80102a4:	0034      	movs	r4, r6
 80102a6:	2500      	movs	r5, #0
 80102a8:	9902      	ldr	r1, [sp, #8]
 80102aa:	3414      	adds	r4, #20
 80102ac:	3114      	adds	r1, #20
 80102ae:	6823      	ldr	r3, [r4, #0]
 80102b0:	c901      	ldmia	r1!, {r0}
 80102b2:	9302      	str	r3, [sp, #8]
 80102b4:	466b      	mov	r3, sp
 80102b6:	891b      	ldrh	r3, [r3, #8]
 80102b8:	b282      	uxth	r2, r0
 80102ba:	1a9a      	subs	r2, r3, r2
 80102bc:	9b02      	ldr	r3, [sp, #8]
 80102be:	1952      	adds	r2, r2, r5
 80102c0:	0c00      	lsrs	r0, r0, #16
 80102c2:	0c1b      	lsrs	r3, r3, #16
 80102c4:	1a1b      	subs	r3, r3, r0
 80102c6:	1410      	asrs	r0, r2, #16
 80102c8:	181b      	adds	r3, r3, r0
 80102ca:	141d      	asrs	r5, r3, #16
 80102cc:	b292      	uxth	r2, r2
 80102ce:	041b      	lsls	r3, r3, #16
 80102d0:	431a      	orrs	r2, r3
 80102d2:	9b03      	ldr	r3, [sp, #12]
 80102d4:	c404      	stmia	r4!, {r2}
 80102d6:	428b      	cmp	r3, r1
 80102d8:	d2e9      	bcs.n	80102ae <quorem+0xb0>
 80102da:	9a01      	ldr	r2, [sp, #4]
 80102dc:	00bb      	lsls	r3, r7, #2
 80102de:	18d3      	adds	r3, r2, r3
 80102e0:	681a      	ldr	r2, [r3, #0]
 80102e2:	2a00      	cmp	r2, #0
 80102e4:	d013      	beq.n	801030e <quorem+0x110>
 80102e6:	9b00      	ldr	r3, [sp, #0]
 80102e8:	3301      	adds	r3, #1
 80102ea:	9300      	str	r3, [sp, #0]
 80102ec:	9800      	ldr	r0, [sp, #0]
 80102ee:	b007      	add	sp, #28
 80102f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102f2:	6823      	ldr	r3, [r4, #0]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d104      	bne.n	8010302 <quorem+0x104>
 80102f8:	3f01      	subs	r7, #1
 80102fa:	9b01      	ldr	r3, [sp, #4]
 80102fc:	3c04      	subs	r4, #4
 80102fe:	42a3      	cmp	r3, r4
 8010300:	d3f7      	bcc.n	80102f2 <quorem+0xf4>
 8010302:	6137      	str	r7, [r6, #16]
 8010304:	e7c8      	b.n	8010298 <quorem+0x9a>
 8010306:	681a      	ldr	r2, [r3, #0]
 8010308:	2a00      	cmp	r2, #0
 801030a:	d104      	bne.n	8010316 <quorem+0x118>
 801030c:	3f01      	subs	r7, #1
 801030e:	9a01      	ldr	r2, [sp, #4]
 8010310:	3b04      	subs	r3, #4
 8010312:	429a      	cmp	r2, r3
 8010314:	d3f7      	bcc.n	8010306 <quorem+0x108>
 8010316:	6137      	str	r7, [r6, #16]
 8010318:	e7e5      	b.n	80102e6 <quorem+0xe8>
	...

0801031c <_dtoa_r>:
 801031c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801031e:	0014      	movs	r4, r2
 8010320:	001d      	movs	r5, r3
 8010322:	69c6      	ldr	r6, [r0, #28]
 8010324:	b09d      	sub	sp, #116	@ 0x74
 8010326:	940a      	str	r4, [sp, #40]	@ 0x28
 8010328:	950b      	str	r5, [sp, #44]	@ 0x2c
 801032a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801032c:	9003      	str	r0, [sp, #12]
 801032e:	2e00      	cmp	r6, #0
 8010330:	d10f      	bne.n	8010352 <_dtoa_r+0x36>
 8010332:	2010      	movs	r0, #16
 8010334:	f000 fe30 	bl	8010f98 <malloc>
 8010338:	9b03      	ldr	r3, [sp, #12]
 801033a:	1e02      	subs	r2, r0, #0
 801033c:	61d8      	str	r0, [r3, #28]
 801033e:	d104      	bne.n	801034a <_dtoa_r+0x2e>
 8010340:	21ef      	movs	r1, #239	@ 0xef
 8010342:	4bc7      	ldr	r3, [pc, #796]	@ (8010660 <_dtoa_r+0x344>)
 8010344:	48c7      	ldr	r0, [pc, #796]	@ (8010664 <_dtoa_r+0x348>)
 8010346:	f001 fcbb 	bl	8011cc0 <__assert_func>
 801034a:	6046      	str	r6, [r0, #4]
 801034c:	6086      	str	r6, [r0, #8]
 801034e:	6006      	str	r6, [r0, #0]
 8010350:	60c6      	str	r6, [r0, #12]
 8010352:	9b03      	ldr	r3, [sp, #12]
 8010354:	69db      	ldr	r3, [r3, #28]
 8010356:	6819      	ldr	r1, [r3, #0]
 8010358:	2900      	cmp	r1, #0
 801035a:	d00b      	beq.n	8010374 <_dtoa_r+0x58>
 801035c:	685a      	ldr	r2, [r3, #4]
 801035e:	2301      	movs	r3, #1
 8010360:	4093      	lsls	r3, r2
 8010362:	604a      	str	r2, [r1, #4]
 8010364:	608b      	str	r3, [r1, #8]
 8010366:	9803      	ldr	r0, [sp, #12]
 8010368:	f000 ff16 	bl	8011198 <_Bfree>
 801036c:	2200      	movs	r2, #0
 801036e:	9b03      	ldr	r3, [sp, #12]
 8010370:	69db      	ldr	r3, [r3, #28]
 8010372:	601a      	str	r2, [r3, #0]
 8010374:	2d00      	cmp	r5, #0
 8010376:	da1e      	bge.n	80103b6 <_dtoa_r+0x9a>
 8010378:	2301      	movs	r3, #1
 801037a:	603b      	str	r3, [r7, #0]
 801037c:	006b      	lsls	r3, r5, #1
 801037e:	085b      	lsrs	r3, r3, #1
 8010380:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010382:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8010384:	4bb8      	ldr	r3, [pc, #736]	@ (8010668 <_dtoa_r+0x34c>)
 8010386:	4ab8      	ldr	r2, [pc, #736]	@ (8010668 <_dtoa_r+0x34c>)
 8010388:	403b      	ands	r3, r7
 801038a:	4293      	cmp	r3, r2
 801038c:	d116      	bne.n	80103bc <_dtoa_r+0xa0>
 801038e:	4bb7      	ldr	r3, [pc, #732]	@ (801066c <_dtoa_r+0x350>)
 8010390:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8010392:	6013      	str	r3, [r2, #0]
 8010394:	033b      	lsls	r3, r7, #12
 8010396:	0b1b      	lsrs	r3, r3, #12
 8010398:	4323      	orrs	r3, r4
 801039a:	d101      	bne.n	80103a0 <_dtoa_r+0x84>
 801039c:	f000 fd83 	bl	8010ea6 <_dtoa_r+0xb8a>
 80103a0:	4bb3      	ldr	r3, [pc, #716]	@ (8010670 <_dtoa_r+0x354>)
 80103a2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80103a4:	9308      	str	r3, [sp, #32]
 80103a6:	2a00      	cmp	r2, #0
 80103a8:	d002      	beq.n	80103b0 <_dtoa_r+0x94>
 80103aa:	4bb2      	ldr	r3, [pc, #712]	@ (8010674 <_dtoa_r+0x358>)
 80103ac:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80103ae:	6013      	str	r3, [r2, #0]
 80103b0:	9808      	ldr	r0, [sp, #32]
 80103b2:	b01d      	add	sp, #116	@ 0x74
 80103b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103b6:	2300      	movs	r3, #0
 80103b8:	603b      	str	r3, [r7, #0]
 80103ba:	e7e2      	b.n	8010382 <_dtoa_r+0x66>
 80103bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80103be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80103c0:	9212      	str	r2, [sp, #72]	@ 0x48
 80103c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80103c4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80103c6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80103c8:	2200      	movs	r2, #0
 80103ca:	2300      	movs	r3, #0
 80103cc:	f7f0 f83e 	bl	800044c <__aeabi_dcmpeq>
 80103d0:	1e06      	subs	r6, r0, #0
 80103d2:	d00b      	beq.n	80103ec <_dtoa_r+0xd0>
 80103d4:	2301      	movs	r3, #1
 80103d6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80103d8:	6013      	str	r3, [r2, #0]
 80103da:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d002      	beq.n	80103e6 <_dtoa_r+0xca>
 80103e0:	4ba5      	ldr	r3, [pc, #660]	@ (8010678 <_dtoa_r+0x35c>)
 80103e2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80103e4:	6013      	str	r3, [r2, #0]
 80103e6:	4ba5      	ldr	r3, [pc, #660]	@ (801067c <_dtoa_r+0x360>)
 80103e8:	9308      	str	r3, [sp, #32]
 80103ea:	e7e1      	b.n	80103b0 <_dtoa_r+0x94>
 80103ec:	ab1a      	add	r3, sp, #104	@ 0x68
 80103ee:	9301      	str	r3, [sp, #4]
 80103f0:	ab1b      	add	r3, sp, #108	@ 0x6c
 80103f2:	9300      	str	r3, [sp, #0]
 80103f4:	9803      	ldr	r0, [sp, #12]
 80103f6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80103f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80103fa:	f001 f9cd 	bl	8011798 <__d2b>
 80103fe:	007a      	lsls	r2, r7, #1
 8010400:	9005      	str	r0, [sp, #20]
 8010402:	0d52      	lsrs	r2, r2, #21
 8010404:	d100      	bne.n	8010408 <_dtoa_r+0xec>
 8010406:	e07b      	b.n	8010500 <_dtoa_r+0x1e4>
 8010408:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801040a:	9618      	str	r6, [sp, #96]	@ 0x60
 801040c:	0319      	lsls	r1, r3, #12
 801040e:	4b9c      	ldr	r3, [pc, #624]	@ (8010680 <_dtoa_r+0x364>)
 8010410:	0b09      	lsrs	r1, r1, #12
 8010412:	430b      	orrs	r3, r1
 8010414:	499b      	ldr	r1, [pc, #620]	@ (8010684 <_dtoa_r+0x368>)
 8010416:	1857      	adds	r7, r2, r1
 8010418:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801041a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801041c:	0019      	movs	r1, r3
 801041e:	2200      	movs	r2, #0
 8010420:	4b99      	ldr	r3, [pc, #612]	@ (8010688 <_dtoa_r+0x36c>)
 8010422:	f7f1 fb1f 	bl	8001a64 <__aeabi_dsub>
 8010426:	4a99      	ldr	r2, [pc, #612]	@ (801068c <_dtoa_r+0x370>)
 8010428:	4b99      	ldr	r3, [pc, #612]	@ (8010690 <_dtoa_r+0x374>)
 801042a:	f7f1 f853 	bl	80014d4 <__aeabi_dmul>
 801042e:	4a99      	ldr	r2, [pc, #612]	@ (8010694 <_dtoa_r+0x378>)
 8010430:	4b99      	ldr	r3, [pc, #612]	@ (8010698 <_dtoa_r+0x37c>)
 8010432:	f7f0 f8a7 	bl	8000584 <__aeabi_dadd>
 8010436:	0004      	movs	r4, r0
 8010438:	0038      	movs	r0, r7
 801043a:	000d      	movs	r5, r1
 801043c:	f7f1 ff0c 	bl	8002258 <__aeabi_i2d>
 8010440:	4a96      	ldr	r2, [pc, #600]	@ (801069c <_dtoa_r+0x380>)
 8010442:	4b97      	ldr	r3, [pc, #604]	@ (80106a0 <_dtoa_r+0x384>)
 8010444:	f7f1 f846 	bl	80014d4 <__aeabi_dmul>
 8010448:	0002      	movs	r2, r0
 801044a:	000b      	movs	r3, r1
 801044c:	0020      	movs	r0, r4
 801044e:	0029      	movs	r1, r5
 8010450:	f7f0 f898 	bl	8000584 <__aeabi_dadd>
 8010454:	0004      	movs	r4, r0
 8010456:	000d      	movs	r5, r1
 8010458:	f7f1 fec2 	bl	80021e0 <__aeabi_d2iz>
 801045c:	2200      	movs	r2, #0
 801045e:	9004      	str	r0, [sp, #16]
 8010460:	2300      	movs	r3, #0
 8010462:	0020      	movs	r0, r4
 8010464:	0029      	movs	r1, r5
 8010466:	f7ef fff7 	bl	8000458 <__aeabi_dcmplt>
 801046a:	2800      	cmp	r0, #0
 801046c:	d00b      	beq.n	8010486 <_dtoa_r+0x16a>
 801046e:	9804      	ldr	r0, [sp, #16]
 8010470:	f7f1 fef2 	bl	8002258 <__aeabi_i2d>
 8010474:	002b      	movs	r3, r5
 8010476:	0022      	movs	r2, r4
 8010478:	f7ef ffe8 	bl	800044c <__aeabi_dcmpeq>
 801047c:	4243      	negs	r3, r0
 801047e:	4158      	adcs	r0, r3
 8010480:	9b04      	ldr	r3, [sp, #16]
 8010482:	1a1b      	subs	r3, r3, r0
 8010484:	9304      	str	r3, [sp, #16]
 8010486:	2301      	movs	r3, #1
 8010488:	9315      	str	r3, [sp, #84]	@ 0x54
 801048a:	9b04      	ldr	r3, [sp, #16]
 801048c:	2b16      	cmp	r3, #22
 801048e:	d810      	bhi.n	80104b2 <_dtoa_r+0x196>
 8010490:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010492:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010494:	9a04      	ldr	r2, [sp, #16]
 8010496:	4b83      	ldr	r3, [pc, #524]	@ (80106a4 <_dtoa_r+0x388>)
 8010498:	00d2      	lsls	r2, r2, #3
 801049a:	189b      	adds	r3, r3, r2
 801049c:	681a      	ldr	r2, [r3, #0]
 801049e:	685b      	ldr	r3, [r3, #4]
 80104a0:	f7ef ffda 	bl	8000458 <__aeabi_dcmplt>
 80104a4:	2800      	cmp	r0, #0
 80104a6:	d047      	beq.n	8010538 <_dtoa_r+0x21c>
 80104a8:	9b04      	ldr	r3, [sp, #16]
 80104aa:	3b01      	subs	r3, #1
 80104ac:	9304      	str	r3, [sp, #16]
 80104ae:	2300      	movs	r3, #0
 80104b0:	9315      	str	r3, [sp, #84]	@ 0x54
 80104b2:	2200      	movs	r2, #0
 80104b4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80104b6:	9206      	str	r2, [sp, #24]
 80104b8:	1bdb      	subs	r3, r3, r7
 80104ba:	1e5a      	subs	r2, r3, #1
 80104bc:	d53e      	bpl.n	801053c <_dtoa_r+0x220>
 80104be:	2201      	movs	r2, #1
 80104c0:	1ad3      	subs	r3, r2, r3
 80104c2:	9306      	str	r3, [sp, #24]
 80104c4:	2300      	movs	r3, #0
 80104c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80104c8:	9b04      	ldr	r3, [sp, #16]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	db38      	blt.n	8010540 <_dtoa_r+0x224>
 80104ce:	9a04      	ldr	r2, [sp, #16]
 80104d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80104d2:	4694      	mov	ip, r2
 80104d4:	4463      	add	r3, ip
 80104d6:	930d      	str	r3, [sp, #52]	@ 0x34
 80104d8:	2300      	movs	r3, #0
 80104da:	9214      	str	r2, [sp, #80]	@ 0x50
 80104dc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80104de:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80104e0:	2401      	movs	r4, #1
 80104e2:	2b09      	cmp	r3, #9
 80104e4:	d867      	bhi.n	80105b6 <_dtoa_r+0x29a>
 80104e6:	2b05      	cmp	r3, #5
 80104e8:	dd02      	ble.n	80104f0 <_dtoa_r+0x1d4>
 80104ea:	2400      	movs	r4, #0
 80104ec:	3b04      	subs	r3, #4
 80104ee:	9322      	str	r3, [sp, #136]	@ 0x88
 80104f0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80104f2:	1e98      	subs	r0, r3, #2
 80104f4:	2803      	cmp	r0, #3
 80104f6:	d867      	bhi.n	80105c8 <_dtoa_r+0x2ac>
 80104f8:	f7ef fe0e 	bl	8000118 <__gnu_thumb1_case_uqi>
 80104fc:	5b383a2b 	.word	0x5b383a2b
 8010500:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010502:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8010504:	18f6      	adds	r6, r6, r3
 8010506:	4b68      	ldr	r3, [pc, #416]	@ (80106a8 <_dtoa_r+0x38c>)
 8010508:	18f2      	adds	r2, r6, r3
 801050a:	2a20      	cmp	r2, #32
 801050c:	dd0f      	ble.n	801052e <_dtoa_r+0x212>
 801050e:	2340      	movs	r3, #64	@ 0x40
 8010510:	1a9b      	subs	r3, r3, r2
 8010512:	409f      	lsls	r7, r3
 8010514:	4b65      	ldr	r3, [pc, #404]	@ (80106ac <_dtoa_r+0x390>)
 8010516:	0038      	movs	r0, r7
 8010518:	18f3      	adds	r3, r6, r3
 801051a:	40dc      	lsrs	r4, r3
 801051c:	4320      	orrs	r0, r4
 801051e:	f7f1 fec9 	bl	80022b4 <__aeabi_ui2d>
 8010522:	2201      	movs	r2, #1
 8010524:	4b62      	ldr	r3, [pc, #392]	@ (80106b0 <_dtoa_r+0x394>)
 8010526:	1e77      	subs	r7, r6, #1
 8010528:	18cb      	adds	r3, r1, r3
 801052a:	9218      	str	r2, [sp, #96]	@ 0x60
 801052c:	e776      	b.n	801041c <_dtoa_r+0x100>
 801052e:	2320      	movs	r3, #32
 8010530:	0020      	movs	r0, r4
 8010532:	1a9b      	subs	r3, r3, r2
 8010534:	4098      	lsls	r0, r3
 8010536:	e7f2      	b.n	801051e <_dtoa_r+0x202>
 8010538:	9015      	str	r0, [sp, #84]	@ 0x54
 801053a:	e7ba      	b.n	80104b2 <_dtoa_r+0x196>
 801053c:	920d      	str	r2, [sp, #52]	@ 0x34
 801053e:	e7c3      	b.n	80104c8 <_dtoa_r+0x1ac>
 8010540:	9b06      	ldr	r3, [sp, #24]
 8010542:	9a04      	ldr	r2, [sp, #16]
 8010544:	1a9b      	subs	r3, r3, r2
 8010546:	9306      	str	r3, [sp, #24]
 8010548:	4253      	negs	r3, r2
 801054a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801054c:	2300      	movs	r3, #0
 801054e:	9314      	str	r3, [sp, #80]	@ 0x50
 8010550:	e7c5      	b.n	80104de <_dtoa_r+0x1c2>
 8010552:	2300      	movs	r3, #0
 8010554:	9310      	str	r3, [sp, #64]	@ 0x40
 8010556:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010558:	930e      	str	r3, [sp, #56]	@ 0x38
 801055a:	9309      	str	r3, [sp, #36]	@ 0x24
 801055c:	2b00      	cmp	r3, #0
 801055e:	dc13      	bgt.n	8010588 <_dtoa_r+0x26c>
 8010560:	2301      	movs	r3, #1
 8010562:	001a      	movs	r2, r3
 8010564:	930e      	str	r3, [sp, #56]	@ 0x38
 8010566:	9309      	str	r3, [sp, #36]	@ 0x24
 8010568:	9223      	str	r2, [sp, #140]	@ 0x8c
 801056a:	e00d      	b.n	8010588 <_dtoa_r+0x26c>
 801056c:	2301      	movs	r3, #1
 801056e:	e7f1      	b.n	8010554 <_dtoa_r+0x238>
 8010570:	2300      	movs	r3, #0
 8010572:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010574:	9310      	str	r3, [sp, #64]	@ 0x40
 8010576:	4694      	mov	ip, r2
 8010578:	9b04      	ldr	r3, [sp, #16]
 801057a:	4463      	add	r3, ip
 801057c:	930e      	str	r3, [sp, #56]	@ 0x38
 801057e:	3301      	adds	r3, #1
 8010580:	9309      	str	r3, [sp, #36]	@ 0x24
 8010582:	2b00      	cmp	r3, #0
 8010584:	dc00      	bgt.n	8010588 <_dtoa_r+0x26c>
 8010586:	2301      	movs	r3, #1
 8010588:	9a03      	ldr	r2, [sp, #12]
 801058a:	2100      	movs	r1, #0
 801058c:	69d0      	ldr	r0, [r2, #28]
 801058e:	2204      	movs	r2, #4
 8010590:	0015      	movs	r5, r2
 8010592:	3514      	adds	r5, #20
 8010594:	429d      	cmp	r5, r3
 8010596:	d91b      	bls.n	80105d0 <_dtoa_r+0x2b4>
 8010598:	6041      	str	r1, [r0, #4]
 801059a:	9803      	ldr	r0, [sp, #12]
 801059c:	f000 fdb8 	bl	8011110 <_Balloc>
 80105a0:	9008      	str	r0, [sp, #32]
 80105a2:	2800      	cmp	r0, #0
 80105a4:	d117      	bne.n	80105d6 <_dtoa_r+0x2ba>
 80105a6:	21b0      	movs	r1, #176	@ 0xb0
 80105a8:	4b42      	ldr	r3, [pc, #264]	@ (80106b4 <_dtoa_r+0x398>)
 80105aa:	482e      	ldr	r0, [pc, #184]	@ (8010664 <_dtoa_r+0x348>)
 80105ac:	9a08      	ldr	r2, [sp, #32]
 80105ae:	31ff      	adds	r1, #255	@ 0xff
 80105b0:	e6c9      	b.n	8010346 <_dtoa_r+0x2a>
 80105b2:	2301      	movs	r3, #1
 80105b4:	e7dd      	b.n	8010572 <_dtoa_r+0x256>
 80105b6:	2300      	movs	r3, #0
 80105b8:	9410      	str	r4, [sp, #64]	@ 0x40
 80105ba:	9322      	str	r3, [sp, #136]	@ 0x88
 80105bc:	3b01      	subs	r3, #1
 80105be:	930e      	str	r3, [sp, #56]	@ 0x38
 80105c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80105c2:	2200      	movs	r2, #0
 80105c4:	3313      	adds	r3, #19
 80105c6:	e7cf      	b.n	8010568 <_dtoa_r+0x24c>
 80105c8:	2301      	movs	r3, #1
 80105ca:	9310      	str	r3, [sp, #64]	@ 0x40
 80105cc:	3b02      	subs	r3, #2
 80105ce:	e7f6      	b.n	80105be <_dtoa_r+0x2a2>
 80105d0:	3101      	adds	r1, #1
 80105d2:	0052      	lsls	r2, r2, #1
 80105d4:	e7dc      	b.n	8010590 <_dtoa_r+0x274>
 80105d6:	9b03      	ldr	r3, [sp, #12]
 80105d8:	9a08      	ldr	r2, [sp, #32]
 80105da:	69db      	ldr	r3, [r3, #28]
 80105dc:	601a      	str	r2, [r3, #0]
 80105de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105e0:	2b0e      	cmp	r3, #14
 80105e2:	d900      	bls.n	80105e6 <_dtoa_r+0x2ca>
 80105e4:	e0d9      	b.n	801079a <_dtoa_r+0x47e>
 80105e6:	2c00      	cmp	r4, #0
 80105e8:	d100      	bne.n	80105ec <_dtoa_r+0x2d0>
 80105ea:	e0d6      	b.n	801079a <_dtoa_r+0x47e>
 80105ec:	9b04      	ldr	r3, [sp, #16]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	dd64      	ble.n	80106bc <_dtoa_r+0x3a0>
 80105f2:	210f      	movs	r1, #15
 80105f4:	9a04      	ldr	r2, [sp, #16]
 80105f6:	4b2b      	ldr	r3, [pc, #172]	@ (80106a4 <_dtoa_r+0x388>)
 80105f8:	400a      	ands	r2, r1
 80105fa:	00d2      	lsls	r2, r2, #3
 80105fc:	189b      	adds	r3, r3, r2
 80105fe:	681e      	ldr	r6, [r3, #0]
 8010600:	685f      	ldr	r7, [r3, #4]
 8010602:	9b04      	ldr	r3, [sp, #16]
 8010604:	2402      	movs	r4, #2
 8010606:	111d      	asrs	r5, r3, #4
 8010608:	05db      	lsls	r3, r3, #23
 801060a:	d50a      	bpl.n	8010622 <_dtoa_r+0x306>
 801060c:	4b2a      	ldr	r3, [pc, #168]	@ (80106b8 <_dtoa_r+0x39c>)
 801060e:	400d      	ands	r5, r1
 8010610:	6a1a      	ldr	r2, [r3, #32]
 8010612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010614:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010616:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010618:	f7f0 fb18 	bl	8000c4c <__aeabi_ddiv>
 801061c:	900a      	str	r0, [sp, #40]	@ 0x28
 801061e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010620:	3401      	adds	r4, #1
 8010622:	4b25      	ldr	r3, [pc, #148]	@ (80106b8 <_dtoa_r+0x39c>)
 8010624:	930c      	str	r3, [sp, #48]	@ 0x30
 8010626:	2d00      	cmp	r5, #0
 8010628:	d108      	bne.n	801063c <_dtoa_r+0x320>
 801062a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801062c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801062e:	0032      	movs	r2, r6
 8010630:	003b      	movs	r3, r7
 8010632:	f7f0 fb0b 	bl	8000c4c <__aeabi_ddiv>
 8010636:	900a      	str	r0, [sp, #40]	@ 0x28
 8010638:	910b      	str	r1, [sp, #44]	@ 0x2c
 801063a:	e05a      	b.n	80106f2 <_dtoa_r+0x3d6>
 801063c:	2301      	movs	r3, #1
 801063e:	421d      	tst	r5, r3
 8010640:	d009      	beq.n	8010656 <_dtoa_r+0x33a>
 8010642:	18e4      	adds	r4, r4, r3
 8010644:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010646:	0030      	movs	r0, r6
 8010648:	681a      	ldr	r2, [r3, #0]
 801064a:	685b      	ldr	r3, [r3, #4]
 801064c:	0039      	movs	r1, r7
 801064e:	f7f0 ff41 	bl	80014d4 <__aeabi_dmul>
 8010652:	0006      	movs	r6, r0
 8010654:	000f      	movs	r7, r1
 8010656:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010658:	106d      	asrs	r5, r5, #1
 801065a:	3308      	adds	r3, #8
 801065c:	e7e2      	b.n	8010624 <_dtoa_r+0x308>
 801065e:	46c0      	nop			@ (mov r8, r8)
 8010660:	08012753 	.word	0x08012753
 8010664:	0801276a 	.word	0x0801276a
 8010668:	7ff00000 	.word	0x7ff00000
 801066c:	0000270f 	.word	0x0000270f
 8010670:	0801274f 	.word	0x0801274f
 8010674:	08012752 	.word	0x08012752
 8010678:	08012723 	.word	0x08012723
 801067c:	08012722 	.word	0x08012722
 8010680:	3ff00000 	.word	0x3ff00000
 8010684:	fffffc01 	.word	0xfffffc01
 8010688:	3ff80000 	.word	0x3ff80000
 801068c:	636f4361 	.word	0x636f4361
 8010690:	3fd287a7 	.word	0x3fd287a7
 8010694:	8b60c8b3 	.word	0x8b60c8b3
 8010698:	3fc68a28 	.word	0x3fc68a28
 801069c:	509f79fb 	.word	0x509f79fb
 80106a0:	3fd34413 	.word	0x3fd34413
 80106a4:	08012860 	.word	0x08012860
 80106a8:	00000432 	.word	0x00000432
 80106ac:	00000412 	.word	0x00000412
 80106b0:	fe100000 	.word	0xfe100000
 80106b4:	080127c2 	.word	0x080127c2
 80106b8:	08012838 	.word	0x08012838
 80106bc:	9b04      	ldr	r3, [sp, #16]
 80106be:	2402      	movs	r4, #2
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d016      	beq.n	80106f2 <_dtoa_r+0x3d6>
 80106c4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80106c6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80106c8:	220f      	movs	r2, #15
 80106ca:	425d      	negs	r5, r3
 80106cc:	402a      	ands	r2, r5
 80106ce:	4bd7      	ldr	r3, [pc, #860]	@ (8010a2c <_dtoa_r+0x710>)
 80106d0:	00d2      	lsls	r2, r2, #3
 80106d2:	189b      	adds	r3, r3, r2
 80106d4:	681a      	ldr	r2, [r3, #0]
 80106d6:	685b      	ldr	r3, [r3, #4]
 80106d8:	f7f0 fefc 	bl	80014d4 <__aeabi_dmul>
 80106dc:	2701      	movs	r7, #1
 80106de:	2300      	movs	r3, #0
 80106e0:	900a      	str	r0, [sp, #40]	@ 0x28
 80106e2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80106e4:	4ed2      	ldr	r6, [pc, #840]	@ (8010a30 <_dtoa_r+0x714>)
 80106e6:	112d      	asrs	r5, r5, #4
 80106e8:	2d00      	cmp	r5, #0
 80106ea:	d000      	beq.n	80106ee <_dtoa_r+0x3d2>
 80106ec:	e0ba      	b.n	8010864 <_dtoa_r+0x548>
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d1a1      	bne.n	8010636 <_dtoa_r+0x31a>
 80106f2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80106f4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80106f6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d100      	bne.n	80106fe <_dtoa_r+0x3e2>
 80106fc:	e0bd      	b.n	801087a <_dtoa_r+0x55e>
 80106fe:	2200      	movs	r2, #0
 8010700:	0030      	movs	r0, r6
 8010702:	0039      	movs	r1, r7
 8010704:	4bcb      	ldr	r3, [pc, #812]	@ (8010a34 <_dtoa_r+0x718>)
 8010706:	f7ef fea7 	bl	8000458 <__aeabi_dcmplt>
 801070a:	2800      	cmp	r0, #0
 801070c:	d100      	bne.n	8010710 <_dtoa_r+0x3f4>
 801070e:	e0b4      	b.n	801087a <_dtoa_r+0x55e>
 8010710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010712:	2b00      	cmp	r3, #0
 8010714:	d100      	bne.n	8010718 <_dtoa_r+0x3fc>
 8010716:	e0b0      	b.n	801087a <_dtoa_r+0x55e>
 8010718:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801071a:	2b00      	cmp	r3, #0
 801071c:	dd39      	ble.n	8010792 <_dtoa_r+0x476>
 801071e:	9b04      	ldr	r3, [sp, #16]
 8010720:	2200      	movs	r2, #0
 8010722:	3b01      	subs	r3, #1
 8010724:	930c      	str	r3, [sp, #48]	@ 0x30
 8010726:	0030      	movs	r0, r6
 8010728:	4bc3      	ldr	r3, [pc, #780]	@ (8010a38 <_dtoa_r+0x71c>)
 801072a:	0039      	movs	r1, r7
 801072c:	f7f0 fed2 	bl	80014d4 <__aeabi_dmul>
 8010730:	900a      	str	r0, [sp, #40]	@ 0x28
 8010732:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010734:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010736:	3401      	adds	r4, #1
 8010738:	0020      	movs	r0, r4
 801073a:	9311      	str	r3, [sp, #68]	@ 0x44
 801073c:	f7f1 fd8c 	bl	8002258 <__aeabi_i2d>
 8010740:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010742:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010744:	f7f0 fec6 	bl	80014d4 <__aeabi_dmul>
 8010748:	4bbc      	ldr	r3, [pc, #752]	@ (8010a3c <_dtoa_r+0x720>)
 801074a:	2200      	movs	r2, #0
 801074c:	f7ef ff1a 	bl	8000584 <__aeabi_dadd>
 8010750:	4bbb      	ldr	r3, [pc, #748]	@ (8010a40 <_dtoa_r+0x724>)
 8010752:	0006      	movs	r6, r0
 8010754:	18cf      	adds	r7, r1, r3
 8010756:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010758:	2b00      	cmp	r3, #0
 801075a:	d000      	beq.n	801075e <_dtoa_r+0x442>
 801075c:	e091      	b.n	8010882 <_dtoa_r+0x566>
 801075e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010760:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010762:	2200      	movs	r2, #0
 8010764:	4bb7      	ldr	r3, [pc, #732]	@ (8010a44 <_dtoa_r+0x728>)
 8010766:	f7f1 f97d 	bl	8001a64 <__aeabi_dsub>
 801076a:	0032      	movs	r2, r6
 801076c:	003b      	movs	r3, r7
 801076e:	0004      	movs	r4, r0
 8010770:	000d      	movs	r5, r1
 8010772:	f7ef fe85 	bl	8000480 <__aeabi_dcmpgt>
 8010776:	2800      	cmp	r0, #0
 8010778:	d000      	beq.n	801077c <_dtoa_r+0x460>
 801077a:	e29d      	b.n	8010cb8 <_dtoa_r+0x99c>
 801077c:	2180      	movs	r1, #128	@ 0x80
 801077e:	0609      	lsls	r1, r1, #24
 8010780:	187b      	adds	r3, r7, r1
 8010782:	0032      	movs	r2, r6
 8010784:	0020      	movs	r0, r4
 8010786:	0029      	movs	r1, r5
 8010788:	f7ef fe66 	bl	8000458 <__aeabi_dcmplt>
 801078c:	2800      	cmp	r0, #0
 801078e:	d000      	beq.n	8010792 <_dtoa_r+0x476>
 8010790:	e130      	b.n	80109f4 <_dtoa_r+0x6d8>
 8010792:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010794:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8010796:	930a      	str	r3, [sp, #40]	@ 0x28
 8010798:	940b      	str	r4, [sp, #44]	@ 0x2c
 801079a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801079c:	2b00      	cmp	r3, #0
 801079e:	da00      	bge.n	80107a2 <_dtoa_r+0x486>
 80107a0:	e177      	b.n	8010a92 <_dtoa_r+0x776>
 80107a2:	9a04      	ldr	r2, [sp, #16]
 80107a4:	2a0e      	cmp	r2, #14
 80107a6:	dd00      	ble.n	80107aa <_dtoa_r+0x48e>
 80107a8:	e173      	b.n	8010a92 <_dtoa_r+0x776>
 80107aa:	4ba0      	ldr	r3, [pc, #640]	@ (8010a2c <_dtoa_r+0x710>)
 80107ac:	00d2      	lsls	r2, r2, #3
 80107ae:	189b      	adds	r3, r3, r2
 80107b0:	685c      	ldr	r4, [r3, #4]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	9306      	str	r3, [sp, #24]
 80107b6:	9407      	str	r4, [sp, #28]
 80107b8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	da03      	bge.n	80107c6 <_dtoa_r+0x4aa>
 80107be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	dc00      	bgt.n	80107c6 <_dtoa_r+0x4aa>
 80107c4:	e106      	b.n	80109d4 <_dtoa_r+0x6b8>
 80107c6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80107c8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80107ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107cc:	9d08      	ldr	r5, [sp, #32]
 80107ce:	3b01      	subs	r3, #1
 80107d0:	195b      	adds	r3, r3, r5
 80107d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80107d4:	9a06      	ldr	r2, [sp, #24]
 80107d6:	9b07      	ldr	r3, [sp, #28]
 80107d8:	0030      	movs	r0, r6
 80107da:	0039      	movs	r1, r7
 80107dc:	f7f0 fa36 	bl	8000c4c <__aeabi_ddiv>
 80107e0:	f7f1 fcfe 	bl	80021e0 <__aeabi_d2iz>
 80107e4:	9009      	str	r0, [sp, #36]	@ 0x24
 80107e6:	f7f1 fd37 	bl	8002258 <__aeabi_i2d>
 80107ea:	9a06      	ldr	r2, [sp, #24]
 80107ec:	9b07      	ldr	r3, [sp, #28]
 80107ee:	f7f0 fe71 	bl	80014d4 <__aeabi_dmul>
 80107f2:	0002      	movs	r2, r0
 80107f4:	000b      	movs	r3, r1
 80107f6:	0030      	movs	r0, r6
 80107f8:	0039      	movs	r1, r7
 80107fa:	f7f1 f933 	bl	8001a64 <__aeabi_dsub>
 80107fe:	002b      	movs	r3, r5
 8010800:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010802:	3501      	adds	r5, #1
 8010804:	3230      	adds	r2, #48	@ 0x30
 8010806:	701a      	strb	r2, [r3, #0]
 8010808:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801080a:	002c      	movs	r4, r5
 801080c:	429a      	cmp	r2, r3
 801080e:	d000      	beq.n	8010812 <_dtoa_r+0x4f6>
 8010810:	e131      	b.n	8010a76 <_dtoa_r+0x75a>
 8010812:	0002      	movs	r2, r0
 8010814:	000b      	movs	r3, r1
 8010816:	f7ef feb5 	bl	8000584 <__aeabi_dadd>
 801081a:	9a06      	ldr	r2, [sp, #24]
 801081c:	9b07      	ldr	r3, [sp, #28]
 801081e:	0006      	movs	r6, r0
 8010820:	000f      	movs	r7, r1
 8010822:	f7ef fe2d 	bl	8000480 <__aeabi_dcmpgt>
 8010826:	2800      	cmp	r0, #0
 8010828:	d000      	beq.n	801082c <_dtoa_r+0x510>
 801082a:	e10f      	b.n	8010a4c <_dtoa_r+0x730>
 801082c:	9a06      	ldr	r2, [sp, #24]
 801082e:	9b07      	ldr	r3, [sp, #28]
 8010830:	0030      	movs	r0, r6
 8010832:	0039      	movs	r1, r7
 8010834:	f7ef fe0a 	bl	800044c <__aeabi_dcmpeq>
 8010838:	2800      	cmp	r0, #0
 801083a:	d003      	beq.n	8010844 <_dtoa_r+0x528>
 801083c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801083e:	07dd      	lsls	r5, r3, #31
 8010840:	d500      	bpl.n	8010844 <_dtoa_r+0x528>
 8010842:	e103      	b.n	8010a4c <_dtoa_r+0x730>
 8010844:	9905      	ldr	r1, [sp, #20]
 8010846:	9803      	ldr	r0, [sp, #12]
 8010848:	f000 fca6 	bl	8011198 <_Bfree>
 801084c:	2300      	movs	r3, #0
 801084e:	7023      	strb	r3, [r4, #0]
 8010850:	9b04      	ldr	r3, [sp, #16]
 8010852:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8010854:	3301      	adds	r3, #1
 8010856:	6013      	str	r3, [r2, #0]
 8010858:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801085a:	2b00      	cmp	r3, #0
 801085c:	d100      	bne.n	8010860 <_dtoa_r+0x544>
 801085e:	e5a7      	b.n	80103b0 <_dtoa_r+0x94>
 8010860:	601c      	str	r4, [r3, #0]
 8010862:	e5a5      	b.n	80103b0 <_dtoa_r+0x94>
 8010864:	423d      	tst	r5, r7
 8010866:	d005      	beq.n	8010874 <_dtoa_r+0x558>
 8010868:	6832      	ldr	r2, [r6, #0]
 801086a:	6873      	ldr	r3, [r6, #4]
 801086c:	f7f0 fe32 	bl	80014d4 <__aeabi_dmul>
 8010870:	003b      	movs	r3, r7
 8010872:	3401      	adds	r4, #1
 8010874:	106d      	asrs	r5, r5, #1
 8010876:	3608      	adds	r6, #8
 8010878:	e736      	b.n	80106e8 <_dtoa_r+0x3cc>
 801087a:	9b04      	ldr	r3, [sp, #16]
 801087c:	930c      	str	r3, [sp, #48]	@ 0x30
 801087e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010880:	e75a      	b.n	8010738 <_dtoa_r+0x41c>
 8010882:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010884:	4b69      	ldr	r3, [pc, #420]	@ (8010a2c <_dtoa_r+0x710>)
 8010886:	3a01      	subs	r2, #1
 8010888:	00d2      	lsls	r2, r2, #3
 801088a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801088c:	189b      	adds	r3, r3, r2
 801088e:	681a      	ldr	r2, [r3, #0]
 8010890:	685b      	ldr	r3, [r3, #4]
 8010892:	2900      	cmp	r1, #0
 8010894:	d04c      	beq.n	8010930 <_dtoa_r+0x614>
 8010896:	2000      	movs	r0, #0
 8010898:	496b      	ldr	r1, [pc, #428]	@ (8010a48 <_dtoa_r+0x72c>)
 801089a:	f7f0 f9d7 	bl	8000c4c <__aeabi_ddiv>
 801089e:	0032      	movs	r2, r6
 80108a0:	003b      	movs	r3, r7
 80108a2:	f7f1 f8df 	bl	8001a64 <__aeabi_dsub>
 80108a6:	9a08      	ldr	r2, [sp, #32]
 80108a8:	0006      	movs	r6, r0
 80108aa:	4694      	mov	ip, r2
 80108ac:	000f      	movs	r7, r1
 80108ae:	9b08      	ldr	r3, [sp, #32]
 80108b0:	9316      	str	r3, [sp, #88]	@ 0x58
 80108b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80108b4:	4463      	add	r3, ip
 80108b6:	9311      	str	r3, [sp, #68]	@ 0x44
 80108b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80108ba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80108bc:	f7f1 fc90 	bl	80021e0 <__aeabi_d2iz>
 80108c0:	0005      	movs	r5, r0
 80108c2:	f7f1 fcc9 	bl	8002258 <__aeabi_i2d>
 80108c6:	0002      	movs	r2, r0
 80108c8:	000b      	movs	r3, r1
 80108ca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80108cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80108ce:	f7f1 f8c9 	bl	8001a64 <__aeabi_dsub>
 80108d2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80108d4:	3530      	adds	r5, #48	@ 0x30
 80108d6:	1c5c      	adds	r4, r3, #1
 80108d8:	701d      	strb	r5, [r3, #0]
 80108da:	0032      	movs	r2, r6
 80108dc:	003b      	movs	r3, r7
 80108de:	900a      	str	r0, [sp, #40]	@ 0x28
 80108e0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80108e2:	f7ef fdb9 	bl	8000458 <__aeabi_dcmplt>
 80108e6:	2800      	cmp	r0, #0
 80108e8:	d16a      	bne.n	80109c0 <_dtoa_r+0x6a4>
 80108ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80108ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80108ee:	2000      	movs	r0, #0
 80108f0:	4950      	ldr	r1, [pc, #320]	@ (8010a34 <_dtoa_r+0x718>)
 80108f2:	f7f1 f8b7 	bl	8001a64 <__aeabi_dsub>
 80108f6:	0032      	movs	r2, r6
 80108f8:	003b      	movs	r3, r7
 80108fa:	f7ef fdad 	bl	8000458 <__aeabi_dcmplt>
 80108fe:	2800      	cmp	r0, #0
 8010900:	d000      	beq.n	8010904 <_dtoa_r+0x5e8>
 8010902:	e0a5      	b.n	8010a50 <_dtoa_r+0x734>
 8010904:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010906:	42a3      	cmp	r3, r4
 8010908:	d100      	bne.n	801090c <_dtoa_r+0x5f0>
 801090a:	e742      	b.n	8010792 <_dtoa_r+0x476>
 801090c:	2200      	movs	r2, #0
 801090e:	0030      	movs	r0, r6
 8010910:	0039      	movs	r1, r7
 8010912:	4b49      	ldr	r3, [pc, #292]	@ (8010a38 <_dtoa_r+0x71c>)
 8010914:	f7f0 fdde 	bl	80014d4 <__aeabi_dmul>
 8010918:	2200      	movs	r2, #0
 801091a:	0006      	movs	r6, r0
 801091c:	000f      	movs	r7, r1
 801091e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010920:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010922:	4b45      	ldr	r3, [pc, #276]	@ (8010a38 <_dtoa_r+0x71c>)
 8010924:	f7f0 fdd6 	bl	80014d4 <__aeabi_dmul>
 8010928:	9416      	str	r4, [sp, #88]	@ 0x58
 801092a:	900a      	str	r0, [sp, #40]	@ 0x28
 801092c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801092e:	e7c3      	b.n	80108b8 <_dtoa_r+0x59c>
 8010930:	0030      	movs	r0, r6
 8010932:	0039      	movs	r1, r7
 8010934:	f7f0 fdce 	bl	80014d4 <__aeabi_dmul>
 8010938:	9d08      	ldr	r5, [sp, #32]
 801093a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801093c:	002b      	movs	r3, r5
 801093e:	4694      	mov	ip, r2
 8010940:	9016      	str	r0, [sp, #88]	@ 0x58
 8010942:	9117      	str	r1, [sp, #92]	@ 0x5c
 8010944:	4463      	add	r3, ip
 8010946:	9319      	str	r3, [sp, #100]	@ 0x64
 8010948:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801094a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801094c:	f7f1 fc48 	bl	80021e0 <__aeabi_d2iz>
 8010950:	0004      	movs	r4, r0
 8010952:	f7f1 fc81 	bl	8002258 <__aeabi_i2d>
 8010956:	000b      	movs	r3, r1
 8010958:	0002      	movs	r2, r0
 801095a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801095c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801095e:	f7f1 f881 	bl	8001a64 <__aeabi_dsub>
 8010962:	3430      	adds	r4, #48	@ 0x30
 8010964:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010966:	702c      	strb	r4, [r5, #0]
 8010968:	3501      	adds	r5, #1
 801096a:	0006      	movs	r6, r0
 801096c:	000f      	movs	r7, r1
 801096e:	42ab      	cmp	r3, r5
 8010970:	d129      	bne.n	80109c6 <_dtoa_r+0x6aa>
 8010972:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8010974:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8010976:	9b08      	ldr	r3, [sp, #32]
 8010978:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801097a:	469c      	mov	ip, r3
 801097c:	2200      	movs	r2, #0
 801097e:	4b32      	ldr	r3, [pc, #200]	@ (8010a48 <_dtoa_r+0x72c>)
 8010980:	4464      	add	r4, ip
 8010982:	f7ef fdff 	bl	8000584 <__aeabi_dadd>
 8010986:	0002      	movs	r2, r0
 8010988:	000b      	movs	r3, r1
 801098a:	0030      	movs	r0, r6
 801098c:	0039      	movs	r1, r7
 801098e:	f7ef fd77 	bl	8000480 <__aeabi_dcmpgt>
 8010992:	2800      	cmp	r0, #0
 8010994:	d15c      	bne.n	8010a50 <_dtoa_r+0x734>
 8010996:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010998:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801099a:	2000      	movs	r0, #0
 801099c:	492a      	ldr	r1, [pc, #168]	@ (8010a48 <_dtoa_r+0x72c>)
 801099e:	f7f1 f861 	bl	8001a64 <__aeabi_dsub>
 80109a2:	0002      	movs	r2, r0
 80109a4:	000b      	movs	r3, r1
 80109a6:	0030      	movs	r0, r6
 80109a8:	0039      	movs	r1, r7
 80109aa:	f7ef fd55 	bl	8000458 <__aeabi_dcmplt>
 80109ae:	2800      	cmp	r0, #0
 80109b0:	d100      	bne.n	80109b4 <_dtoa_r+0x698>
 80109b2:	e6ee      	b.n	8010792 <_dtoa_r+0x476>
 80109b4:	0023      	movs	r3, r4
 80109b6:	3c01      	subs	r4, #1
 80109b8:	7822      	ldrb	r2, [r4, #0]
 80109ba:	2a30      	cmp	r2, #48	@ 0x30
 80109bc:	d0fa      	beq.n	80109b4 <_dtoa_r+0x698>
 80109be:	001c      	movs	r4, r3
 80109c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80109c2:	9304      	str	r3, [sp, #16]
 80109c4:	e73e      	b.n	8010844 <_dtoa_r+0x528>
 80109c6:	2200      	movs	r2, #0
 80109c8:	4b1b      	ldr	r3, [pc, #108]	@ (8010a38 <_dtoa_r+0x71c>)
 80109ca:	f7f0 fd83 	bl	80014d4 <__aeabi_dmul>
 80109ce:	900a      	str	r0, [sp, #40]	@ 0x28
 80109d0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80109d2:	e7b9      	b.n	8010948 <_dtoa_r+0x62c>
 80109d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d10c      	bne.n	80109f4 <_dtoa_r+0x6d8>
 80109da:	9806      	ldr	r0, [sp, #24]
 80109dc:	9907      	ldr	r1, [sp, #28]
 80109de:	2200      	movs	r2, #0
 80109e0:	4b18      	ldr	r3, [pc, #96]	@ (8010a44 <_dtoa_r+0x728>)
 80109e2:	f7f0 fd77 	bl	80014d4 <__aeabi_dmul>
 80109e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80109e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80109ea:	f7ef fd53 	bl	8000494 <__aeabi_dcmpge>
 80109ee:	2800      	cmp	r0, #0
 80109f0:	d100      	bne.n	80109f4 <_dtoa_r+0x6d8>
 80109f2:	e164      	b.n	8010cbe <_dtoa_r+0x9a2>
 80109f4:	2600      	movs	r6, #0
 80109f6:	0037      	movs	r7, r6
 80109f8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80109fa:	9c08      	ldr	r4, [sp, #32]
 80109fc:	43db      	mvns	r3, r3
 80109fe:	930c      	str	r3, [sp, #48]	@ 0x30
 8010a00:	2300      	movs	r3, #0
 8010a02:	9304      	str	r3, [sp, #16]
 8010a04:	0031      	movs	r1, r6
 8010a06:	9803      	ldr	r0, [sp, #12]
 8010a08:	f000 fbc6 	bl	8011198 <_Bfree>
 8010a0c:	2f00      	cmp	r7, #0
 8010a0e:	d0d7      	beq.n	80109c0 <_dtoa_r+0x6a4>
 8010a10:	9b04      	ldr	r3, [sp, #16]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d005      	beq.n	8010a22 <_dtoa_r+0x706>
 8010a16:	42bb      	cmp	r3, r7
 8010a18:	d003      	beq.n	8010a22 <_dtoa_r+0x706>
 8010a1a:	0019      	movs	r1, r3
 8010a1c:	9803      	ldr	r0, [sp, #12]
 8010a1e:	f000 fbbb 	bl	8011198 <_Bfree>
 8010a22:	0039      	movs	r1, r7
 8010a24:	9803      	ldr	r0, [sp, #12]
 8010a26:	f000 fbb7 	bl	8011198 <_Bfree>
 8010a2a:	e7c9      	b.n	80109c0 <_dtoa_r+0x6a4>
 8010a2c:	08012860 	.word	0x08012860
 8010a30:	08012838 	.word	0x08012838
 8010a34:	3ff00000 	.word	0x3ff00000
 8010a38:	40240000 	.word	0x40240000
 8010a3c:	401c0000 	.word	0x401c0000
 8010a40:	fcc00000 	.word	0xfcc00000
 8010a44:	40140000 	.word	0x40140000
 8010a48:	3fe00000 	.word	0x3fe00000
 8010a4c:	9b04      	ldr	r3, [sp, #16]
 8010a4e:	930c      	str	r3, [sp, #48]	@ 0x30
 8010a50:	0023      	movs	r3, r4
 8010a52:	001c      	movs	r4, r3
 8010a54:	3b01      	subs	r3, #1
 8010a56:	781a      	ldrb	r2, [r3, #0]
 8010a58:	2a39      	cmp	r2, #57	@ 0x39
 8010a5a:	d108      	bne.n	8010a6e <_dtoa_r+0x752>
 8010a5c:	9a08      	ldr	r2, [sp, #32]
 8010a5e:	429a      	cmp	r2, r3
 8010a60:	d1f7      	bne.n	8010a52 <_dtoa_r+0x736>
 8010a62:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010a64:	9908      	ldr	r1, [sp, #32]
 8010a66:	3201      	adds	r2, #1
 8010a68:	920c      	str	r2, [sp, #48]	@ 0x30
 8010a6a:	2230      	movs	r2, #48	@ 0x30
 8010a6c:	700a      	strb	r2, [r1, #0]
 8010a6e:	781a      	ldrb	r2, [r3, #0]
 8010a70:	3201      	adds	r2, #1
 8010a72:	701a      	strb	r2, [r3, #0]
 8010a74:	e7a4      	b.n	80109c0 <_dtoa_r+0x6a4>
 8010a76:	2200      	movs	r2, #0
 8010a78:	4bc6      	ldr	r3, [pc, #792]	@ (8010d94 <_dtoa_r+0xa78>)
 8010a7a:	f7f0 fd2b 	bl	80014d4 <__aeabi_dmul>
 8010a7e:	2200      	movs	r2, #0
 8010a80:	2300      	movs	r3, #0
 8010a82:	0006      	movs	r6, r0
 8010a84:	000f      	movs	r7, r1
 8010a86:	f7ef fce1 	bl	800044c <__aeabi_dcmpeq>
 8010a8a:	2800      	cmp	r0, #0
 8010a8c:	d100      	bne.n	8010a90 <_dtoa_r+0x774>
 8010a8e:	e6a1      	b.n	80107d4 <_dtoa_r+0x4b8>
 8010a90:	e6d8      	b.n	8010844 <_dtoa_r+0x528>
 8010a92:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8010a94:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8010a96:	9c06      	ldr	r4, [sp, #24]
 8010a98:	2f00      	cmp	r7, #0
 8010a9a:	d014      	beq.n	8010ac6 <_dtoa_r+0x7aa>
 8010a9c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010a9e:	2a01      	cmp	r2, #1
 8010aa0:	dd00      	ble.n	8010aa4 <_dtoa_r+0x788>
 8010aa2:	e0c8      	b.n	8010c36 <_dtoa_r+0x91a>
 8010aa4:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8010aa6:	2a00      	cmp	r2, #0
 8010aa8:	d100      	bne.n	8010aac <_dtoa_r+0x790>
 8010aaa:	e0be      	b.n	8010c2a <_dtoa_r+0x90e>
 8010aac:	4aba      	ldr	r2, [pc, #744]	@ (8010d98 <_dtoa_r+0xa7c>)
 8010aae:	189b      	adds	r3, r3, r2
 8010ab0:	9a06      	ldr	r2, [sp, #24]
 8010ab2:	2101      	movs	r1, #1
 8010ab4:	18d2      	adds	r2, r2, r3
 8010ab6:	9206      	str	r2, [sp, #24]
 8010ab8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010aba:	9803      	ldr	r0, [sp, #12]
 8010abc:	18d3      	adds	r3, r2, r3
 8010abe:	930d      	str	r3, [sp, #52]	@ 0x34
 8010ac0:	f000 fc22 	bl	8011308 <__i2b>
 8010ac4:	0007      	movs	r7, r0
 8010ac6:	2c00      	cmp	r4, #0
 8010ac8:	d00e      	beq.n	8010ae8 <_dtoa_r+0x7cc>
 8010aca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	dd0b      	ble.n	8010ae8 <_dtoa_r+0x7cc>
 8010ad0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010ad2:	0023      	movs	r3, r4
 8010ad4:	4294      	cmp	r4, r2
 8010ad6:	dd00      	ble.n	8010ada <_dtoa_r+0x7be>
 8010ad8:	0013      	movs	r3, r2
 8010ada:	9a06      	ldr	r2, [sp, #24]
 8010adc:	1ae4      	subs	r4, r4, r3
 8010ade:	1ad2      	subs	r2, r2, r3
 8010ae0:	9206      	str	r2, [sp, #24]
 8010ae2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010ae4:	1ad3      	subs	r3, r2, r3
 8010ae6:	930d      	str	r3, [sp, #52]	@ 0x34
 8010ae8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d01f      	beq.n	8010b2e <_dtoa_r+0x812>
 8010aee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d100      	bne.n	8010af6 <_dtoa_r+0x7da>
 8010af4:	e0b5      	b.n	8010c62 <_dtoa_r+0x946>
 8010af6:	2d00      	cmp	r5, #0
 8010af8:	d010      	beq.n	8010b1c <_dtoa_r+0x800>
 8010afa:	0039      	movs	r1, r7
 8010afc:	002a      	movs	r2, r5
 8010afe:	9803      	ldr	r0, [sp, #12]
 8010b00:	f000 fccc 	bl	801149c <__pow5mult>
 8010b04:	9a05      	ldr	r2, [sp, #20]
 8010b06:	0001      	movs	r1, r0
 8010b08:	0007      	movs	r7, r0
 8010b0a:	9803      	ldr	r0, [sp, #12]
 8010b0c:	f000 fc14 	bl	8011338 <__multiply>
 8010b10:	0006      	movs	r6, r0
 8010b12:	9905      	ldr	r1, [sp, #20]
 8010b14:	9803      	ldr	r0, [sp, #12]
 8010b16:	f000 fb3f 	bl	8011198 <_Bfree>
 8010b1a:	9605      	str	r6, [sp, #20]
 8010b1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b1e:	1b5a      	subs	r2, r3, r5
 8010b20:	42ab      	cmp	r3, r5
 8010b22:	d004      	beq.n	8010b2e <_dtoa_r+0x812>
 8010b24:	9905      	ldr	r1, [sp, #20]
 8010b26:	9803      	ldr	r0, [sp, #12]
 8010b28:	f000 fcb8 	bl	801149c <__pow5mult>
 8010b2c:	9005      	str	r0, [sp, #20]
 8010b2e:	2101      	movs	r1, #1
 8010b30:	9803      	ldr	r0, [sp, #12]
 8010b32:	f000 fbe9 	bl	8011308 <__i2b>
 8010b36:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010b38:	0006      	movs	r6, r0
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d100      	bne.n	8010b40 <_dtoa_r+0x824>
 8010b3e:	e1bc      	b.n	8010eba <_dtoa_r+0xb9e>
 8010b40:	001a      	movs	r2, r3
 8010b42:	0001      	movs	r1, r0
 8010b44:	9803      	ldr	r0, [sp, #12]
 8010b46:	f000 fca9 	bl	801149c <__pow5mult>
 8010b4a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010b4c:	0006      	movs	r6, r0
 8010b4e:	2500      	movs	r5, #0
 8010b50:	2b01      	cmp	r3, #1
 8010b52:	dc16      	bgt.n	8010b82 <_dtoa_r+0x866>
 8010b54:	2500      	movs	r5, #0
 8010b56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b58:	42ab      	cmp	r3, r5
 8010b5a:	d10e      	bne.n	8010b7a <_dtoa_r+0x85e>
 8010b5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b5e:	031b      	lsls	r3, r3, #12
 8010b60:	42ab      	cmp	r3, r5
 8010b62:	d10a      	bne.n	8010b7a <_dtoa_r+0x85e>
 8010b64:	4b8d      	ldr	r3, [pc, #564]	@ (8010d9c <_dtoa_r+0xa80>)
 8010b66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010b68:	4213      	tst	r3, r2
 8010b6a:	d006      	beq.n	8010b7a <_dtoa_r+0x85e>
 8010b6c:	9b06      	ldr	r3, [sp, #24]
 8010b6e:	3501      	adds	r5, #1
 8010b70:	3301      	adds	r3, #1
 8010b72:	9306      	str	r3, [sp, #24]
 8010b74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010b76:	3301      	adds	r3, #1
 8010b78:	930d      	str	r3, [sp, #52]	@ 0x34
 8010b7a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010b7c:	2001      	movs	r0, #1
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d008      	beq.n	8010b94 <_dtoa_r+0x878>
 8010b82:	6933      	ldr	r3, [r6, #16]
 8010b84:	3303      	adds	r3, #3
 8010b86:	009b      	lsls	r3, r3, #2
 8010b88:	18f3      	adds	r3, r6, r3
 8010b8a:	6858      	ldr	r0, [r3, #4]
 8010b8c:	f000 fb6c 	bl	8011268 <__hi0bits>
 8010b90:	2320      	movs	r3, #32
 8010b92:	1a18      	subs	r0, r3, r0
 8010b94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010b96:	1818      	adds	r0, r3, r0
 8010b98:	0002      	movs	r2, r0
 8010b9a:	231f      	movs	r3, #31
 8010b9c:	401a      	ands	r2, r3
 8010b9e:	4218      	tst	r0, r3
 8010ba0:	d065      	beq.n	8010c6e <_dtoa_r+0x952>
 8010ba2:	3301      	adds	r3, #1
 8010ba4:	1a9b      	subs	r3, r3, r2
 8010ba6:	2b04      	cmp	r3, #4
 8010ba8:	dd5d      	ble.n	8010c66 <_dtoa_r+0x94a>
 8010baa:	231c      	movs	r3, #28
 8010bac:	1a9b      	subs	r3, r3, r2
 8010bae:	9a06      	ldr	r2, [sp, #24]
 8010bb0:	18e4      	adds	r4, r4, r3
 8010bb2:	18d2      	adds	r2, r2, r3
 8010bb4:	9206      	str	r2, [sp, #24]
 8010bb6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010bb8:	18d3      	adds	r3, r2, r3
 8010bba:	930d      	str	r3, [sp, #52]	@ 0x34
 8010bbc:	9b06      	ldr	r3, [sp, #24]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	dd05      	ble.n	8010bce <_dtoa_r+0x8b2>
 8010bc2:	001a      	movs	r2, r3
 8010bc4:	9905      	ldr	r1, [sp, #20]
 8010bc6:	9803      	ldr	r0, [sp, #12]
 8010bc8:	f000 fcc4 	bl	8011554 <__lshift>
 8010bcc:	9005      	str	r0, [sp, #20]
 8010bce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	dd05      	ble.n	8010be0 <_dtoa_r+0x8c4>
 8010bd4:	0031      	movs	r1, r6
 8010bd6:	001a      	movs	r2, r3
 8010bd8:	9803      	ldr	r0, [sp, #12]
 8010bda:	f000 fcbb 	bl	8011554 <__lshift>
 8010bde:	0006      	movs	r6, r0
 8010be0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d045      	beq.n	8010c72 <_dtoa_r+0x956>
 8010be6:	0031      	movs	r1, r6
 8010be8:	9805      	ldr	r0, [sp, #20]
 8010bea:	f000 fd1f 	bl	801162c <__mcmp>
 8010bee:	2800      	cmp	r0, #0
 8010bf0:	da3f      	bge.n	8010c72 <_dtoa_r+0x956>
 8010bf2:	9b04      	ldr	r3, [sp, #16]
 8010bf4:	220a      	movs	r2, #10
 8010bf6:	3b01      	subs	r3, #1
 8010bf8:	930c      	str	r3, [sp, #48]	@ 0x30
 8010bfa:	9905      	ldr	r1, [sp, #20]
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	9803      	ldr	r0, [sp, #12]
 8010c00:	f000 faee 	bl	80111e0 <__multadd>
 8010c04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010c06:	9005      	str	r0, [sp, #20]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d100      	bne.n	8010c0e <_dtoa_r+0x8f2>
 8010c0c:	e15c      	b.n	8010ec8 <_dtoa_r+0xbac>
 8010c0e:	2300      	movs	r3, #0
 8010c10:	0039      	movs	r1, r7
 8010c12:	220a      	movs	r2, #10
 8010c14:	9803      	ldr	r0, [sp, #12]
 8010c16:	f000 fae3 	bl	80111e0 <__multadd>
 8010c1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c1c:	0007      	movs	r7, r0
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	dc55      	bgt.n	8010cce <_dtoa_r+0x9b2>
 8010c22:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010c24:	2b02      	cmp	r3, #2
 8010c26:	dc2d      	bgt.n	8010c84 <_dtoa_r+0x968>
 8010c28:	e051      	b.n	8010cce <_dtoa_r+0x9b2>
 8010c2a:	2336      	movs	r3, #54	@ 0x36
 8010c2c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010c2e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8010c30:	9c06      	ldr	r4, [sp, #24]
 8010c32:	1a9b      	subs	r3, r3, r2
 8010c34:	e73c      	b.n	8010ab0 <_dtoa_r+0x794>
 8010c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c38:	1e5d      	subs	r5, r3, #1
 8010c3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c3c:	42ab      	cmp	r3, r5
 8010c3e:	db08      	blt.n	8010c52 <_dtoa_r+0x936>
 8010c40:	1b5d      	subs	r5, r3, r5
 8010c42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c44:	9c06      	ldr	r4, [sp, #24]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	db00      	blt.n	8010c4c <_dtoa_r+0x930>
 8010c4a:	e731      	b.n	8010ab0 <_dtoa_r+0x794>
 8010c4c:	1ae4      	subs	r4, r4, r3
 8010c4e:	2300      	movs	r3, #0
 8010c50:	e72e      	b.n	8010ab0 <_dtoa_r+0x794>
 8010c52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c54:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010c56:	1aeb      	subs	r3, r5, r3
 8010c58:	18d3      	adds	r3, r2, r3
 8010c5a:	950f      	str	r5, [sp, #60]	@ 0x3c
 8010c5c:	9314      	str	r3, [sp, #80]	@ 0x50
 8010c5e:	2500      	movs	r5, #0
 8010c60:	e7ef      	b.n	8010c42 <_dtoa_r+0x926>
 8010c62:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010c64:	e75e      	b.n	8010b24 <_dtoa_r+0x808>
 8010c66:	2b04      	cmp	r3, #4
 8010c68:	d0a8      	beq.n	8010bbc <_dtoa_r+0x8a0>
 8010c6a:	331c      	adds	r3, #28
 8010c6c:	e79f      	b.n	8010bae <_dtoa_r+0x892>
 8010c6e:	0013      	movs	r3, r2
 8010c70:	e7fb      	b.n	8010c6a <_dtoa_r+0x94e>
 8010c72:	9b04      	ldr	r3, [sp, #16]
 8010c74:	930c      	str	r3, [sp, #48]	@ 0x30
 8010c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c78:	930e      	str	r3, [sp, #56]	@ 0x38
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	dc23      	bgt.n	8010cc6 <_dtoa_r+0x9aa>
 8010c7e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010c80:	2b02      	cmp	r3, #2
 8010c82:	dd20      	ble.n	8010cc6 <_dtoa_r+0x9aa>
 8010c84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d000      	beq.n	8010c8c <_dtoa_r+0x970>
 8010c8a:	e6b5      	b.n	80109f8 <_dtoa_r+0x6dc>
 8010c8c:	0031      	movs	r1, r6
 8010c8e:	2205      	movs	r2, #5
 8010c90:	9803      	ldr	r0, [sp, #12]
 8010c92:	f000 faa5 	bl	80111e0 <__multadd>
 8010c96:	0006      	movs	r6, r0
 8010c98:	0001      	movs	r1, r0
 8010c9a:	9805      	ldr	r0, [sp, #20]
 8010c9c:	f000 fcc6 	bl	801162c <__mcmp>
 8010ca0:	2800      	cmp	r0, #0
 8010ca2:	dc00      	bgt.n	8010ca6 <_dtoa_r+0x98a>
 8010ca4:	e6a8      	b.n	80109f8 <_dtoa_r+0x6dc>
 8010ca6:	9b08      	ldr	r3, [sp, #32]
 8010ca8:	9a08      	ldr	r2, [sp, #32]
 8010caa:	1c5c      	adds	r4, r3, #1
 8010cac:	2331      	movs	r3, #49	@ 0x31
 8010cae:	7013      	strb	r3, [r2, #0]
 8010cb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010cb2:	3301      	adds	r3, #1
 8010cb4:	930c      	str	r3, [sp, #48]	@ 0x30
 8010cb6:	e6a3      	b.n	8010a00 <_dtoa_r+0x6e4>
 8010cb8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8010cba:	0037      	movs	r7, r6
 8010cbc:	e7f3      	b.n	8010ca6 <_dtoa_r+0x98a>
 8010cbe:	9b04      	ldr	r3, [sp, #16]
 8010cc0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8010cc2:	930c      	str	r3, [sp, #48]	@ 0x30
 8010cc4:	e7f9      	b.n	8010cba <_dtoa_r+0x99e>
 8010cc6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d100      	bne.n	8010cce <_dtoa_r+0x9b2>
 8010ccc:	e100      	b.n	8010ed0 <_dtoa_r+0xbb4>
 8010cce:	2c00      	cmp	r4, #0
 8010cd0:	dd05      	ble.n	8010cde <_dtoa_r+0x9c2>
 8010cd2:	0039      	movs	r1, r7
 8010cd4:	0022      	movs	r2, r4
 8010cd6:	9803      	ldr	r0, [sp, #12]
 8010cd8:	f000 fc3c 	bl	8011554 <__lshift>
 8010cdc:	0007      	movs	r7, r0
 8010cde:	0038      	movs	r0, r7
 8010ce0:	2d00      	cmp	r5, #0
 8010ce2:	d018      	beq.n	8010d16 <_dtoa_r+0x9fa>
 8010ce4:	6879      	ldr	r1, [r7, #4]
 8010ce6:	9803      	ldr	r0, [sp, #12]
 8010ce8:	f000 fa12 	bl	8011110 <_Balloc>
 8010cec:	1e04      	subs	r4, r0, #0
 8010cee:	d105      	bne.n	8010cfc <_dtoa_r+0x9e0>
 8010cf0:	0022      	movs	r2, r4
 8010cf2:	4b2b      	ldr	r3, [pc, #172]	@ (8010da0 <_dtoa_r+0xa84>)
 8010cf4:	482b      	ldr	r0, [pc, #172]	@ (8010da4 <_dtoa_r+0xa88>)
 8010cf6:	492c      	ldr	r1, [pc, #176]	@ (8010da8 <_dtoa_r+0xa8c>)
 8010cf8:	f7ff fb25 	bl	8010346 <_dtoa_r+0x2a>
 8010cfc:	0039      	movs	r1, r7
 8010cfe:	693a      	ldr	r2, [r7, #16]
 8010d00:	310c      	adds	r1, #12
 8010d02:	3202      	adds	r2, #2
 8010d04:	0092      	lsls	r2, r2, #2
 8010d06:	300c      	adds	r0, #12
 8010d08:	f7ff fa70 	bl	80101ec <memcpy>
 8010d0c:	2201      	movs	r2, #1
 8010d0e:	0021      	movs	r1, r4
 8010d10:	9803      	ldr	r0, [sp, #12]
 8010d12:	f000 fc1f 	bl	8011554 <__lshift>
 8010d16:	9b08      	ldr	r3, [sp, #32]
 8010d18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010d1a:	9306      	str	r3, [sp, #24]
 8010d1c:	3b01      	subs	r3, #1
 8010d1e:	189b      	adds	r3, r3, r2
 8010d20:	2201      	movs	r2, #1
 8010d22:	9704      	str	r7, [sp, #16]
 8010d24:	0007      	movs	r7, r0
 8010d26:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010d28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d2a:	4013      	ands	r3, r2
 8010d2c:	930e      	str	r3, [sp, #56]	@ 0x38
 8010d2e:	0031      	movs	r1, r6
 8010d30:	9805      	ldr	r0, [sp, #20]
 8010d32:	f7ff fa64 	bl	80101fe <quorem>
 8010d36:	9904      	ldr	r1, [sp, #16]
 8010d38:	0005      	movs	r5, r0
 8010d3a:	900a      	str	r0, [sp, #40]	@ 0x28
 8010d3c:	9805      	ldr	r0, [sp, #20]
 8010d3e:	f000 fc75 	bl	801162c <__mcmp>
 8010d42:	003a      	movs	r2, r7
 8010d44:	900d      	str	r0, [sp, #52]	@ 0x34
 8010d46:	0031      	movs	r1, r6
 8010d48:	9803      	ldr	r0, [sp, #12]
 8010d4a:	f000 fc8b 	bl	8011664 <__mdiff>
 8010d4e:	2201      	movs	r2, #1
 8010d50:	68c3      	ldr	r3, [r0, #12]
 8010d52:	0004      	movs	r4, r0
 8010d54:	3530      	adds	r5, #48	@ 0x30
 8010d56:	9209      	str	r2, [sp, #36]	@ 0x24
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d104      	bne.n	8010d66 <_dtoa_r+0xa4a>
 8010d5c:	0001      	movs	r1, r0
 8010d5e:	9805      	ldr	r0, [sp, #20]
 8010d60:	f000 fc64 	bl	801162c <__mcmp>
 8010d64:	9009      	str	r0, [sp, #36]	@ 0x24
 8010d66:	0021      	movs	r1, r4
 8010d68:	9803      	ldr	r0, [sp, #12]
 8010d6a:	f000 fa15 	bl	8011198 <_Bfree>
 8010d6e:	9b06      	ldr	r3, [sp, #24]
 8010d70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d72:	1c5c      	adds	r4, r3, #1
 8010d74:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010d76:	4313      	orrs	r3, r2
 8010d78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010d7a:	4313      	orrs	r3, r2
 8010d7c:	d116      	bne.n	8010dac <_dtoa_r+0xa90>
 8010d7e:	2d39      	cmp	r5, #57	@ 0x39
 8010d80:	d02f      	beq.n	8010de2 <_dtoa_r+0xac6>
 8010d82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	dd01      	ble.n	8010d8c <_dtoa_r+0xa70>
 8010d88:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8010d8a:	3531      	adds	r5, #49	@ 0x31
 8010d8c:	9b06      	ldr	r3, [sp, #24]
 8010d8e:	701d      	strb	r5, [r3, #0]
 8010d90:	e638      	b.n	8010a04 <_dtoa_r+0x6e8>
 8010d92:	46c0      	nop			@ (mov r8, r8)
 8010d94:	40240000 	.word	0x40240000
 8010d98:	00000433 	.word	0x00000433
 8010d9c:	7ff00000 	.word	0x7ff00000
 8010da0:	080127c2 	.word	0x080127c2
 8010da4:	0801276a 	.word	0x0801276a
 8010da8:	000002ef 	.word	0x000002ef
 8010dac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	db04      	blt.n	8010dbc <_dtoa_r+0xaa0>
 8010db2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010db4:	4313      	orrs	r3, r2
 8010db6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010db8:	4313      	orrs	r3, r2
 8010dba:	d11e      	bne.n	8010dfa <_dtoa_r+0xade>
 8010dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	dde4      	ble.n	8010d8c <_dtoa_r+0xa70>
 8010dc2:	9905      	ldr	r1, [sp, #20]
 8010dc4:	2201      	movs	r2, #1
 8010dc6:	9803      	ldr	r0, [sp, #12]
 8010dc8:	f000 fbc4 	bl	8011554 <__lshift>
 8010dcc:	0031      	movs	r1, r6
 8010dce:	9005      	str	r0, [sp, #20]
 8010dd0:	f000 fc2c 	bl	801162c <__mcmp>
 8010dd4:	2800      	cmp	r0, #0
 8010dd6:	dc02      	bgt.n	8010dde <_dtoa_r+0xac2>
 8010dd8:	d1d8      	bne.n	8010d8c <_dtoa_r+0xa70>
 8010dda:	07eb      	lsls	r3, r5, #31
 8010ddc:	d5d6      	bpl.n	8010d8c <_dtoa_r+0xa70>
 8010dde:	2d39      	cmp	r5, #57	@ 0x39
 8010de0:	d1d2      	bne.n	8010d88 <_dtoa_r+0xa6c>
 8010de2:	2339      	movs	r3, #57	@ 0x39
 8010de4:	9a06      	ldr	r2, [sp, #24]
 8010de6:	7013      	strb	r3, [r2, #0]
 8010de8:	0023      	movs	r3, r4
 8010dea:	001c      	movs	r4, r3
 8010dec:	3b01      	subs	r3, #1
 8010dee:	781a      	ldrb	r2, [r3, #0]
 8010df0:	2a39      	cmp	r2, #57	@ 0x39
 8010df2:	d04f      	beq.n	8010e94 <_dtoa_r+0xb78>
 8010df4:	3201      	adds	r2, #1
 8010df6:	701a      	strb	r2, [r3, #0]
 8010df8:	e604      	b.n	8010a04 <_dtoa_r+0x6e8>
 8010dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	dd03      	ble.n	8010e08 <_dtoa_r+0xaec>
 8010e00:	2d39      	cmp	r5, #57	@ 0x39
 8010e02:	d0ee      	beq.n	8010de2 <_dtoa_r+0xac6>
 8010e04:	3501      	adds	r5, #1
 8010e06:	e7c1      	b.n	8010d8c <_dtoa_r+0xa70>
 8010e08:	9b06      	ldr	r3, [sp, #24]
 8010e0a:	9a06      	ldr	r2, [sp, #24]
 8010e0c:	701d      	strb	r5, [r3, #0]
 8010e0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e10:	4293      	cmp	r3, r2
 8010e12:	d02a      	beq.n	8010e6a <_dtoa_r+0xb4e>
 8010e14:	2300      	movs	r3, #0
 8010e16:	220a      	movs	r2, #10
 8010e18:	9905      	ldr	r1, [sp, #20]
 8010e1a:	9803      	ldr	r0, [sp, #12]
 8010e1c:	f000 f9e0 	bl	80111e0 <__multadd>
 8010e20:	9b04      	ldr	r3, [sp, #16]
 8010e22:	9005      	str	r0, [sp, #20]
 8010e24:	42bb      	cmp	r3, r7
 8010e26:	d109      	bne.n	8010e3c <_dtoa_r+0xb20>
 8010e28:	2300      	movs	r3, #0
 8010e2a:	220a      	movs	r2, #10
 8010e2c:	9904      	ldr	r1, [sp, #16]
 8010e2e:	9803      	ldr	r0, [sp, #12]
 8010e30:	f000 f9d6 	bl	80111e0 <__multadd>
 8010e34:	9004      	str	r0, [sp, #16]
 8010e36:	0007      	movs	r7, r0
 8010e38:	9406      	str	r4, [sp, #24]
 8010e3a:	e778      	b.n	8010d2e <_dtoa_r+0xa12>
 8010e3c:	9904      	ldr	r1, [sp, #16]
 8010e3e:	2300      	movs	r3, #0
 8010e40:	220a      	movs	r2, #10
 8010e42:	9803      	ldr	r0, [sp, #12]
 8010e44:	f000 f9cc 	bl	80111e0 <__multadd>
 8010e48:	2300      	movs	r3, #0
 8010e4a:	9004      	str	r0, [sp, #16]
 8010e4c:	220a      	movs	r2, #10
 8010e4e:	0039      	movs	r1, r7
 8010e50:	9803      	ldr	r0, [sp, #12]
 8010e52:	f000 f9c5 	bl	80111e0 <__multadd>
 8010e56:	e7ee      	b.n	8010e36 <_dtoa_r+0xb1a>
 8010e58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010e5a:	2401      	movs	r4, #1
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	dd00      	ble.n	8010e62 <_dtoa_r+0xb46>
 8010e60:	001c      	movs	r4, r3
 8010e62:	9b08      	ldr	r3, [sp, #32]
 8010e64:	191c      	adds	r4, r3, r4
 8010e66:	2300      	movs	r3, #0
 8010e68:	9304      	str	r3, [sp, #16]
 8010e6a:	9905      	ldr	r1, [sp, #20]
 8010e6c:	2201      	movs	r2, #1
 8010e6e:	9803      	ldr	r0, [sp, #12]
 8010e70:	f000 fb70 	bl	8011554 <__lshift>
 8010e74:	0031      	movs	r1, r6
 8010e76:	9005      	str	r0, [sp, #20]
 8010e78:	f000 fbd8 	bl	801162c <__mcmp>
 8010e7c:	2800      	cmp	r0, #0
 8010e7e:	dcb3      	bgt.n	8010de8 <_dtoa_r+0xacc>
 8010e80:	d101      	bne.n	8010e86 <_dtoa_r+0xb6a>
 8010e82:	07ed      	lsls	r5, r5, #31
 8010e84:	d4b0      	bmi.n	8010de8 <_dtoa_r+0xacc>
 8010e86:	0023      	movs	r3, r4
 8010e88:	001c      	movs	r4, r3
 8010e8a:	3b01      	subs	r3, #1
 8010e8c:	781a      	ldrb	r2, [r3, #0]
 8010e8e:	2a30      	cmp	r2, #48	@ 0x30
 8010e90:	d0fa      	beq.n	8010e88 <_dtoa_r+0xb6c>
 8010e92:	e5b7      	b.n	8010a04 <_dtoa_r+0x6e8>
 8010e94:	9a08      	ldr	r2, [sp, #32]
 8010e96:	429a      	cmp	r2, r3
 8010e98:	d1a7      	bne.n	8010dea <_dtoa_r+0xace>
 8010e9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010e9c:	3301      	adds	r3, #1
 8010e9e:	930c      	str	r3, [sp, #48]	@ 0x30
 8010ea0:	2331      	movs	r3, #49	@ 0x31
 8010ea2:	7013      	strb	r3, [r2, #0]
 8010ea4:	e5ae      	b.n	8010a04 <_dtoa_r+0x6e8>
 8010ea6:	4b15      	ldr	r3, [pc, #84]	@ (8010efc <_dtoa_r+0xbe0>)
 8010ea8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8010eaa:	9308      	str	r3, [sp, #32]
 8010eac:	4b14      	ldr	r3, [pc, #80]	@ (8010f00 <_dtoa_r+0xbe4>)
 8010eae:	2a00      	cmp	r2, #0
 8010eb0:	d001      	beq.n	8010eb6 <_dtoa_r+0xb9a>
 8010eb2:	f7ff fa7b 	bl	80103ac <_dtoa_r+0x90>
 8010eb6:	f7ff fa7b 	bl	80103b0 <_dtoa_r+0x94>
 8010eba:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010ebc:	2b01      	cmp	r3, #1
 8010ebe:	dc00      	bgt.n	8010ec2 <_dtoa_r+0xba6>
 8010ec0:	e648      	b.n	8010b54 <_dtoa_r+0x838>
 8010ec2:	2001      	movs	r0, #1
 8010ec4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8010ec6:	e665      	b.n	8010b94 <_dtoa_r+0x878>
 8010ec8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	dc00      	bgt.n	8010ed0 <_dtoa_r+0xbb4>
 8010ece:	e6d6      	b.n	8010c7e <_dtoa_r+0x962>
 8010ed0:	2400      	movs	r4, #0
 8010ed2:	0031      	movs	r1, r6
 8010ed4:	9805      	ldr	r0, [sp, #20]
 8010ed6:	f7ff f992 	bl	80101fe <quorem>
 8010eda:	9b08      	ldr	r3, [sp, #32]
 8010edc:	3030      	adds	r0, #48	@ 0x30
 8010ede:	5518      	strb	r0, [r3, r4]
 8010ee0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ee2:	3401      	adds	r4, #1
 8010ee4:	0005      	movs	r5, r0
 8010ee6:	429c      	cmp	r4, r3
 8010ee8:	dab6      	bge.n	8010e58 <_dtoa_r+0xb3c>
 8010eea:	2300      	movs	r3, #0
 8010eec:	220a      	movs	r2, #10
 8010eee:	9905      	ldr	r1, [sp, #20]
 8010ef0:	9803      	ldr	r0, [sp, #12]
 8010ef2:	f000 f975 	bl	80111e0 <__multadd>
 8010ef6:	9005      	str	r0, [sp, #20]
 8010ef8:	e7eb      	b.n	8010ed2 <_dtoa_r+0xbb6>
 8010efa:	46c0      	nop			@ (mov r8, r8)
 8010efc:	08012746 	.word	0x08012746
 8010f00:	0801274e 	.word	0x0801274e

08010f04 <_free_r>:
 8010f04:	b570      	push	{r4, r5, r6, lr}
 8010f06:	0005      	movs	r5, r0
 8010f08:	1e0c      	subs	r4, r1, #0
 8010f0a:	d010      	beq.n	8010f2e <_free_r+0x2a>
 8010f0c:	3c04      	subs	r4, #4
 8010f0e:	6823      	ldr	r3, [r4, #0]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	da00      	bge.n	8010f16 <_free_r+0x12>
 8010f14:	18e4      	adds	r4, r4, r3
 8010f16:	0028      	movs	r0, r5
 8010f18:	f000 f8ea 	bl	80110f0 <__malloc_lock>
 8010f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8010f94 <_free_r+0x90>)
 8010f1e:	6813      	ldr	r3, [r2, #0]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d105      	bne.n	8010f30 <_free_r+0x2c>
 8010f24:	6063      	str	r3, [r4, #4]
 8010f26:	6014      	str	r4, [r2, #0]
 8010f28:	0028      	movs	r0, r5
 8010f2a:	f000 f8e9 	bl	8011100 <__malloc_unlock>
 8010f2e:	bd70      	pop	{r4, r5, r6, pc}
 8010f30:	42a3      	cmp	r3, r4
 8010f32:	d908      	bls.n	8010f46 <_free_r+0x42>
 8010f34:	6820      	ldr	r0, [r4, #0]
 8010f36:	1821      	adds	r1, r4, r0
 8010f38:	428b      	cmp	r3, r1
 8010f3a:	d1f3      	bne.n	8010f24 <_free_r+0x20>
 8010f3c:	6819      	ldr	r1, [r3, #0]
 8010f3e:	685b      	ldr	r3, [r3, #4]
 8010f40:	1809      	adds	r1, r1, r0
 8010f42:	6021      	str	r1, [r4, #0]
 8010f44:	e7ee      	b.n	8010f24 <_free_r+0x20>
 8010f46:	001a      	movs	r2, r3
 8010f48:	685b      	ldr	r3, [r3, #4]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d001      	beq.n	8010f52 <_free_r+0x4e>
 8010f4e:	42a3      	cmp	r3, r4
 8010f50:	d9f9      	bls.n	8010f46 <_free_r+0x42>
 8010f52:	6811      	ldr	r1, [r2, #0]
 8010f54:	1850      	adds	r0, r2, r1
 8010f56:	42a0      	cmp	r0, r4
 8010f58:	d10b      	bne.n	8010f72 <_free_r+0x6e>
 8010f5a:	6820      	ldr	r0, [r4, #0]
 8010f5c:	1809      	adds	r1, r1, r0
 8010f5e:	1850      	adds	r0, r2, r1
 8010f60:	6011      	str	r1, [r2, #0]
 8010f62:	4283      	cmp	r3, r0
 8010f64:	d1e0      	bne.n	8010f28 <_free_r+0x24>
 8010f66:	6818      	ldr	r0, [r3, #0]
 8010f68:	685b      	ldr	r3, [r3, #4]
 8010f6a:	1841      	adds	r1, r0, r1
 8010f6c:	6011      	str	r1, [r2, #0]
 8010f6e:	6053      	str	r3, [r2, #4]
 8010f70:	e7da      	b.n	8010f28 <_free_r+0x24>
 8010f72:	42a0      	cmp	r0, r4
 8010f74:	d902      	bls.n	8010f7c <_free_r+0x78>
 8010f76:	230c      	movs	r3, #12
 8010f78:	602b      	str	r3, [r5, #0]
 8010f7a:	e7d5      	b.n	8010f28 <_free_r+0x24>
 8010f7c:	6820      	ldr	r0, [r4, #0]
 8010f7e:	1821      	adds	r1, r4, r0
 8010f80:	428b      	cmp	r3, r1
 8010f82:	d103      	bne.n	8010f8c <_free_r+0x88>
 8010f84:	6819      	ldr	r1, [r3, #0]
 8010f86:	685b      	ldr	r3, [r3, #4]
 8010f88:	1809      	adds	r1, r1, r0
 8010f8a:	6021      	str	r1, [r4, #0]
 8010f8c:	6063      	str	r3, [r4, #4]
 8010f8e:	6054      	str	r4, [r2, #4]
 8010f90:	e7ca      	b.n	8010f28 <_free_r+0x24>
 8010f92:	46c0      	nop			@ (mov r8, r8)
 8010f94:	20001dc4 	.word	0x20001dc4

08010f98 <malloc>:
 8010f98:	b510      	push	{r4, lr}
 8010f9a:	4b03      	ldr	r3, [pc, #12]	@ (8010fa8 <malloc+0x10>)
 8010f9c:	0001      	movs	r1, r0
 8010f9e:	6818      	ldr	r0, [r3, #0]
 8010fa0:	f000 f826 	bl	8010ff0 <_malloc_r>
 8010fa4:	bd10      	pop	{r4, pc}
 8010fa6:	46c0      	nop			@ (mov r8, r8)
 8010fa8:	200001e8 	.word	0x200001e8

08010fac <sbrk_aligned>:
 8010fac:	b570      	push	{r4, r5, r6, lr}
 8010fae:	4e0f      	ldr	r6, [pc, #60]	@ (8010fec <sbrk_aligned+0x40>)
 8010fb0:	000d      	movs	r5, r1
 8010fb2:	6831      	ldr	r1, [r6, #0]
 8010fb4:	0004      	movs	r4, r0
 8010fb6:	2900      	cmp	r1, #0
 8010fb8:	d102      	bne.n	8010fc0 <sbrk_aligned+0x14>
 8010fba:	f000 fe6f 	bl	8011c9c <_sbrk_r>
 8010fbe:	6030      	str	r0, [r6, #0]
 8010fc0:	0029      	movs	r1, r5
 8010fc2:	0020      	movs	r0, r4
 8010fc4:	f000 fe6a 	bl	8011c9c <_sbrk_r>
 8010fc8:	1c43      	adds	r3, r0, #1
 8010fca:	d103      	bne.n	8010fd4 <sbrk_aligned+0x28>
 8010fcc:	2501      	movs	r5, #1
 8010fce:	426d      	negs	r5, r5
 8010fd0:	0028      	movs	r0, r5
 8010fd2:	bd70      	pop	{r4, r5, r6, pc}
 8010fd4:	2303      	movs	r3, #3
 8010fd6:	1cc5      	adds	r5, r0, #3
 8010fd8:	439d      	bics	r5, r3
 8010fda:	42a8      	cmp	r0, r5
 8010fdc:	d0f8      	beq.n	8010fd0 <sbrk_aligned+0x24>
 8010fde:	1a29      	subs	r1, r5, r0
 8010fe0:	0020      	movs	r0, r4
 8010fe2:	f000 fe5b 	bl	8011c9c <_sbrk_r>
 8010fe6:	3001      	adds	r0, #1
 8010fe8:	d1f2      	bne.n	8010fd0 <sbrk_aligned+0x24>
 8010fea:	e7ef      	b.n	8010fcc <sbrk_aligned+0x20>
 8010fec:	20001dc0 	.word	0x20001dc0

08010ff0 <_malloc_r>:
 8010ff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ff2:	2203      	movs	r2, #3
 8010ff4:	1ccb      	adds	r3, r1, #3
 8010ff6:	4393      	bics	r3, r2
 8010ff8:	3308      	adds	r3, #8
 8010ffa:	0005      	movs	r5, r0
 8010ffc:	001f      	movs	r7, r3
 8010ffe:	2b0c      	cmp	r3, #12
 8011000:	d234      	bcs.n	801106c <_malloc_r+0x7c>
 8011002:	270c      	movs	r7, #12
 8011004:	42b9      	cmp	r1, r7
 8011006:	d833      	bhi.n	8011070 <_malloc_r+0x80>
 8011008:	0028      	movs	r0, r5
 801100a:	f000 f871 	bl	80110f0 <__malloc_lock>
 801100e:	4e37      	ldr	r6, [pc, #220]	@ (80110ec <_malloc_r+0xfc>)
 8011010:	6833      	ldr	r3, [r6, #0]
 8011012:	001c      	movs	r4, r3
 8011014:	2c00      	cmp	r4, #0
 8011016:	d12f      	bne.n	8011078 <_malloc_r+0x88>
 8011018:	0039      	movs	r1, r7
 801101a:	0028      	movs	r0, r5
 801101c:	f7ff ffc6 	bl	8010fac <sbrk_aligned>
 8011020:	0004      	movs	r4, r0
 8011022:	1c43      	adds	r3, r0, #1
 8011024:	d15f      	bne.n	80110e6 <_malloc_r+0xf6>
 8011026:	6834      	ldr	r4, [r6, #0]
 8011028:	9400      	str	r4, [sp, #0]
 801102a:	9b00      	ldr	r3, [sp, #0]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d14a      	bne.n	80110c6 <_malloc_r+0xd6>
 8011030:	2c00      	cmp	r4, #0
 8011032:	d052      	beq.n	80110da <_malloc_r+0xea>
 8011034:	6823      	ldr	r3, [r4, #0]
 8011036:	0028      	movs	r0, r5
 8011038:	18e3      	adds	r3, r4, r3
 801103a:	9900      	ldr	r1, [sp, #0]
 801103c:	9301      	str	r3, [sp, #4]
 801103e:	f000 fe2d 	bl	8011c9c <_sbrk_r>
 8011042:	9b01      	ldr	r3, [sp, #4]
 8011044:	4283      	cmp	r3, r0
 8011046:	d148      	bne.n	80110da <_malloc_r+0xea>
 8011048:	6823      	ldr	r3, [r4, #0]
 801104a:	0028      	movs	r0, r5
 801104c:	1aff      	subs	r7, r7, r3
 801104e:	0039      	movs	r1, r7
 8011050:	f7ff ffac 	bl	8010fac <sbrk_aligned>
 8011054:	3001      	adds	r0, #1
 8011056:	d040      	beq.n	80110da <_malloc_r+0xea>
 8011058:	6823      	ldr	r3, [r4, #0]
 801105a:	19db      	adds	r3, r3, r7
 801105c:	6023      	str	r3, [r4, #0]
 801105e:	6833      	ldr	r3, [r6, #0]
 8011060:	685a      	ldr	r2, [r3, #4]
 8011062:	2a00      	cmp	r2, #0
 8011064:	d133      	bne.n	80110ce <_malloc_r+0xde>
 8011066:	9b00      	ldr	r3, [sp, #0]
 8011068:	6033      	str	r3, [r6, #0]
 801106a:	e019      	b.n	80110a0 <_malloc_r+0xb0>
 801106c:	2b00      	cmp	r3, #0
 801106e:	dac9      	bge.n	8011004 <_malloc_r+0x14>
 8011070:	230c      	movs	r3, #12
 8011072:	602b      	str	r3, [r5, #0]
 8011074:	2000      	movs	r0, #0
 8011076:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011078:	6821      	ldr	r1, [r4, #0]
 801107a:	1bc9      	subs	r1, r1, r7
 801107c:	d420      	bmi.n	80110c0 <_malloc_r+0xd0>
 801107e:	290b      	cmp	r1, #11
 8011080:	d90a      	bls.n	8011098 <_malloc_r+0xa8>
 8011082:	19e2      	adds	r2, r4, r7
 8011084:	6027      	str	r7, [r4, #0]
 8011086:	42a3      	cmp	r3, r4
 8011088:	d104      	bne.n	8011094 <_malloc_r+0xa4>
 801108a:	6032      	str	r2, [r6, #0]
 801108c:	6863      	ldr	r3, [r4, #4]
 801108e:	6011      	str	r1, [r2, #0]
 8011090:	6053      	str	r3, [r2, #4]
 8011092:	e005      	b.n	80110a0 <_malloc_r+0xb0>
 8011094:	605a      	str	r2, [r3, #4]
 8011096:	e7f9      	b.n	801108c <_malloc_r+0x9c>
 8011098:	6862      	ldr	r2, [r4, #4]
 801109a:	42a3      	cmp	r3, r4
 801109c:	d10e      	bne.n	80110bc <_malloc_r+0xcc>
 801109e:	6032      	str	r2, [r6, #0]
 80110a0:	0028      	movs	r0, r5
 80110a2:	f000 f82d 	bl	8011100 <__malloc_unlock>
 80110a6:	0020      	movs	r0, r4
 80110a8:	2207      	movs	r2, #7
 80110aa:	300b      	adds	r0, #11
 80110ac:	1d23      	adds	r3, r4, #4
 80110ae:	4390      	bics	r0, r2
 80110b0:	1ac2      	subs	r2, r0, r3
 80110b2:	4298      	cmp	r0, r3
 80110b4:	d0df      	beq.n	8011076 <_malloc_r+0x86>
 80110b6:	1a1b      	subs	r3, r3, r0
 80110b8:	50a3      	str	r3, [r4, r2]
 80110ba:	e7dc      	b.n	8011076 <_malloc_r+0x86>
 80110bc:	605a      	str	r2, [r3, #4]
 80110be:	e7ef      	b.n	80110a0 <_malloc_r+0xb0>
 80110c0:	0023      	movs	r3, r4
 80110c2:	6864      	ldr	r4, [r4, #4]
 80110c4:	e7a6      	b.n	8011014 <_malloc_r+0x24>
 80110c6:	9c00      	ldr	r4, [sp, #0]
 80110c8:	6863      	ldr	r3, [r4, #4]
 80110ca:	9300      	str	r3, [sp, #0]
 80110cc:	e7ad      	b.n	801102a <_malloc_r+0x3a>
 80110ce:	001a      	movs	r2, r3
 80110d0:	685b      	ldr	r3, [r3, #4]
 80110d2:	42a3      	cmp	r3, r4
 80110d4:	d1fb      	bne.n	80110ce <_malloc_r+0xde>
 80110d6:	2300      	movs	r3, #0
 80110d8:	e7da      	b.n	8011090 <_malloc_r+0xa0>
 80110da:	230c      	movs	r3, #12
 80110dc:	0028      	movs	r0, r5
 80110de:	602b      	str	r3, [r5, #0]
 80110e0:	f000 f80e 	bl	8011100 <__malloc_unlock>
 80110e4:	e7c6      	b.n	8011074 <_malloc_r+0x84>
 80110e6:	6007      	str	r7, [r0, #0]
 80110e8:	e7da      	b.n	80110a0 <_malloc_r+0xb0>
 80110ea:	46c0      	nop			@ (mov r8, r8)
 80110ec:	20001dc4 	.word	0x20001dc4

080110f0 <__malloc_lock>:
 80110f0:	b510      	push	{r4, lr}
 80110f2:	4802      	ldr	r0, [pc, #8]	@ (80110fc <__malloc_lock+0xc>)
 80110f4:	f7ff f86d 	bl	80101d2 <__retarget_lock_acquire_recursive>
 80110f8:	bd10      	pop	{r4, pc}
 80110fa:	46c0      	nop			@ (mov r8, r8)
 80110fc:	20001dbc 	.word	0x20001dbc

08011100 <__malloc_unlock>:
 8011100:	b510      	push	{r4, lr}
 8011102:	4802      	ldr	r0, [pc, #8]	@ (801110c <__malloc_unlock+0xc>)
 8011104:	f7ff f866 	bl	80101d4 <__retarget_lock_release_recursive>
 8011108:	bd10      	pop	{r4, pc}
 801110a:	46c0      	nop			@ (mov r8, r8)
 801110c:	20001dbc 	.word	0x20001dbc

08011110 <_Balloc>:
 8011110:	b570      	push	{r4, r5, r6, lr}
 8011112:	69c5      	ldr	r5, [r0, #28]
 8011114:	0006      	movs	r6, r0
 8011116:	000c      	movs	r4, r1
 8011118:	2d00      	cmp	r5, #0
 801111a:	d10e      	bne.n	801113a <_Balloc+0x2a>
 801111c:	2010      	movs	r0, #16
 801111e:	f7ff ff3b 	bl	8010f98 <malloc>
 8011122:	1e02      	subs	r2, r0, #0
 8011124:	61f0      	str	r0, [r6, #28]
 8011126:	d104      	bne.n	8011132 <_Balloc+0x22>
 8011128:	216b      	movs	r1, #107	@ 0x6b
 801112a:	4b19      	ldr	r3, [pc, #100]	@ (8011190 <_Balloc+0x80>)
 801112c:	4819      	ldr	r0, [pc, #100]	@ (8011194 <_Balloc+0x84>)
 801112e:	f000 fdc7 	bl	8011cc0 <__assert_func>
 8011132:	6045      	str	r5, [r0, #4]
 8011134:	6085      	str	r5, [r0, #8]
 8011136:	6005      	str	r5, [r0, #0]
 8011138:	60c5      	str	r5, [r0, #12]
 801113a:	69f5      	ldr	r5, [r6, #28]
 801113c:	68eb      	ldr	r3, [r5, #12]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d013      	beq.n	801116a <_Balloc+0x5a>
 8011142:	69f3      	ldr	r3, [r6, #28]
 8011144:	00a2      	lsls	r2, r4, #2
 8011146:	68db      	ldr	r3, [r3, #12]
 8011148:	189b      	adds	r3, r3, r2
 801114a:	6818      	ldr	r0, [r3, #0]
 801114c:	2800      	cmp	r0, #0
 801114e:	d118      	bne.n	8011182 <_Balloc+0x72>
 8011150:	2101      	movs	r1, #1
 8011152:	000d      	movs	r5, r1
 8011154:	40a5      	lsls	r5, r4
 8011156:	1d6a      	adds	r2, r5, #5
 8011158:	0030      	movs	r0, r6
 801115a:	0092      	lsls	r2, r2, #2
 801115c:	f000 fdce 	bl	8011cfc <_calloc_r>
 8011160:	2800      	cmp	r0, #0
 8011162:	d00c      	beq.n	801117e <_Balloc+0x6e>
 8011164:	6044      	str	r4, [r0, #4]
 8011166:	6085      	str	r5, [r0, #8]
 8011168:	e00d      	b.n	8011186 <_Balloc+0x76>
 801116a:	2221      	movs	r2, #33	@ 0x21
 801116c:	2104      	movs	r1, #4
 801116e:	0030      	movs	r0, r6
 8011170:	f000 fdc4 	bl	8011cfc <_calloc_r>
 8011174:	69f3      	ldr	r3, [r6, #28]
 8011176:	60e8      	str	r0, [r5, #12]
 8011178:	68db      	ldr	r3, [r3, #12]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d1e1      	bne.n	8011142 <_Balloc+0x32>
 801117e:	2000      	movs	r0, #0
 8011180:	bd70      	pop	{r4, r5, r6, pc}
 8011182:	6802      	ldr	r2, [r0, #0]
 8011184:	601a      	str	r2, [r3, #0]
 8011186:	2300      	movs	r3, #0
 8011188:	6103      	str	r3, [r0, #16]
 801118a:	60c3      	str	r3, [r0, #12]
 801118c:	e7f8      	b.n	8011180 <_Balloc+0x70>
 801118e:	46c0      	nop			@ (mov r8, r8)
 8011190:	08012753 	.word	0x08012753
 8011194:	080127d3 	.word	0x080127d3

08011198 <_Bfree>:
 8011198:	b570      	push	{r4, r5, r6, lr}
 801119a:	69c6      	ldr	r6, [r0, #28]
 801119c:	0005      	movs	r5, r0
 801119e:	000c      	movs	r4, r1
 80111a0:	2e00      	cmp	r6, #0
 80111a2:	d10e      	bne.n	80111c2 <_Bfree+0x2a>
 80111a4:	2010      	movs	r0, #16
 80111a6:	f7ff fef7 	bl	8010f98 <malloc>
 80111aa:	1e02      	subs	r2, r0, #0
 80111ac:	61e8      	str	r0, [r5, #28]
 80111ae:	d104      	bne.n	80111ba <_Bfree+0x22>
 80111b0:	218f      	movs	r1, #143	@ 0x8f
 80111b2:	4b09      	ldr	r3, [pc, #36]	@ (80111d8 <_Bfree+0x40>)
 80111b4:	4809      	ldr	r0, [pc, #36]	@ (80111dc <_Bfree+0x44>)
 80111b6:	f000 fd83 	bl	8011cc0 <__assert_func>
 80111ba:	6046      	str	r6, [r0, #4]
 80111bc:	6086      	str	r6, [r0, #8]
 80111be:	6006      	str	r6, [r0, #0]
 80111c0:	60c6      	str	r6, [r0, #12]
 80111c2:	2c00      	cmp	r4, #0
 80111c4:	d007      	beq.n	80111d6 <_Bfree+0x3e>
 80111c6:	69eb      	ldr	r3, [r5, #28]
 80111c8:	6862      	ldr	r2, [r4, #4]
 80111ca:	68db      	ldr	r3, [r3, #12]
 80111cc:	0092      	lsls	r2, r2, #2
 80111ce:	189b      	adds	r3, r3, r2
 80111d0:	681a      	ldr	r2, [r3, #0]
 80111d2:	6022      	str	r2, [r4, #0]
 80111d4:	601c      	str	r4, [r3, #0]
 80111d6:	bd70      	pop	{r4, r5, r6, pc}
 80111d8:	08012753 	.word	0x08012753
 80111dc:	080127d3 	.word	0x080127d3

080111e0 <__multadd>:
 80111e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80111e2:	000f      	movs	r7, r1
 80111e4:	9001      	str	r0, [sp, #4]
 80111e6:	000c      	movs	r4, r1
 80111e8:	001e      	movs	r6, r3
 80111ea:	2000      	movs	r0, #0
 80111ec:	690d      	ldr	r5, [r1, #16]
 80111ee:	3714      	adds	r7, #20
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	3001      	adds	r0, #1
 80111f4:	b299      	uxth	r1, r3
 80111f6:	4351      	muls	r1, r2
 80111f8:	0c1b      	lsrs	r3, r3, #16
 80111fa:	4353      	muls	r3, r2
 80111fc:	1989      	adds	r1, r1, r6
 80111fe:	0c0e      	lsrs	r6, r1, #16
 8011200:	199b      	adds	r3, r3, r6
 8011202:	0c1e      	lsrs	r6, r3, #16
 8011204:	b289      	uxth	r1, r1
 8011206:	041b      	lsls	r3, r3, #16
 8011208:	185b      	adds	r3, r3, r1
 801120a:	c708      	stmia	r7!, {r3}
 801120c:	4285      	cmp	r5, r0
 801120e:	dcef      	bgt.n	80111f0 <__multadd+0x10>
 8011210:	2e00      	cmp	r6, #0
 8011212:	d022      	beq.n	801125a <__multadd+0x7a>
 8011214:	68a3      	ldr	r3, [r4, #8]
 8011216:	42ab      	cmp	r3, r5
 8011218:	dc19      	bgt.n	801124e <__multadd+0x6e>
 801121a:	6861      	ldr	r1, [r4, #4]
 801121c:	9801      	ldr	r0, [sp, #4]
 801121e:	3101      	adds	r1, #1
 8011220:	f7ff ff76 	bl	8011110 <_Balloc>
 8011224:	1e07      	subs	r7, r0, #0
 8011226:	d105      	bne.n	8011234 <__multadd+0x54>
 8011228:	003a      	movs	r2, r7
 801122a:	21ba      	movs	r1, #186	@ 0xba
 801122c:	4b0c      	ldr	r3, [pc, #48]	@ (8011260 <__multadd+0x80>)
 801122e:	480d      	ldr	r0, [pc, #52]	@ (8011264 <__multadd+0x84>)
 8011230:	f000 fd46 	bl	8011cc0 <__assert_func>
 8011234:	0021      	movs	r1, r4
 8011236:	6922      	ldr	r2, [r4, #16]
 8011238:	310c      	adds	r1, #12
 801123a:	3202      	adds	r2, #2
 801123c:	0092      	lsls	r2, r2, #2
 801123e:	300c      	adds	r0, #12
 8011240:	f7fe ffd4 	bl	80101ec <memcpy>
 8011244:	0021      	movs	r1, r4
 8011246:	9801      	ldr	r0, [sp, #4]
 8011248:	f7ff ffa6 	bl	8011198 <_Bfree>
 801124c:	003c      	movs	r4, r7
 801124e:	1d2b      	adds	r3, r5, #4
 8011250:	009b      	lsls	r3, r3, #2
 8011252:	18e3      	adds	r3, r4, r3
 8011254:	3501      	adds	r5, #1
 8011256:	605e      	str	r6, [r3, #4]
 8011258:	6125      	str	r5, [r4, #16]
 801125a:	0020      	movs	r0, r4
 801125c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801125e:	46c0      	nop			@ (mov r8, r8)
 8011260:	080127c2 	.word	0x080127c2
 8011264:	080127d3 	.word	0x080127d3

08011268 <__hi0bits>:
 8011268:	2280      	movs	r2, #128	@ 0x80
 801126a:	0003      	movs	r3, r0
 801126c:	0252      	lsls	r2, r2, #9
 801126e:	2000      	movs	r0, #0
 8011270:	4293      	cmp	r3, r2
 8011272:	d201      	bcs.n	8011278 <__hi0bits+0x10>
 8011274:	041b      	lsls	r3, r3, #16
 8011276:	3010      	adds	r0, #16
 8011278:	2280      	movs	r2, #128	@ 0x80
 801127a:	0452      	lsls	r2, r2, #17
 801127c:	4293      	cmp	r3, r2
 801127e:	d201      	bcs.n	8011284 <__hi0bits+0x1c>
 8011280:	3008      	adds	r0, #8
 8011282:	021b      	lsls	r3, r3, #8
 8011284:	2280      	movs	r2, #128	@ 0x80
 8011286:	0552      	lsls	r2, r2, #21
 8011288:	4293      	cmp	r3, r2
 801128a:	d201      	bcs.n	8011290 <__hi0bits+0x28>
 801128c:	3004      	adds	r0, #4
 801128e:	011b      	lsls	r3, r3, #4
 8011290:	2280      	movs	r2, #128	@ 0x80
 8011292:	05d2      	lsls	r2, r2, #23
 8011294:	4293      	cmp	r3, r2
 8011296:	d201      	bcs.n	801129c <__hi0bits+0x34>
 8011298:	3002      	adds	r0, #2
 801129a:	009b      	lsls	r3, r3, #2
 801129c:	2b00      	cmp	r3, #0
 801129e:	db03      	blt.n	80112a8 <__hi0bits+0x40>
 80112a0:	3001      	adds	r0, #1
 80112a2:	4213      	tst	r3, r2
 80112a4:	d100      	bne.n	80112a8 <__hi0bits+0x40>
 80112a6:	2020      	movs	r0, #32
 80112a8:	4770      	bx	lr

080112aa <__lo0bits>:
 80112aa:	6803      	ldr	r3, [r0, #0]
 80112ac:	0001      	movs	r1, r0
 80112ae:	2207      	movs	r2, #7
 80112b0:	0018      	movs	r0, r3
 80112b2:	4010      	ands	r0, r2
 80112b4:	4213      	tst	r3, r2
 80112b6:	d00d      	beq.n	80112d4 <__lo0bits+0x2a>
 80112b8:	3a06      	subs	r2, #6
 80112ba:	2000      	movs	r0, #0
 80112bc:	4213      	tst	r3, r2
 80112be:	d105      	bne.n	80112cc <__lo0bits+0x22>
 80112c0:	3002      	adds	r0, #2
 80112c2:	4203      	tst	r3, r0
 80112c4:	d003      	beq.n	80112ce <__lo0bits+0x24>
 80112c6:	40d3      	lsrs	r3, r2
 80112c8:	0010      	movs	r0, r2
 80112ca:	600b      	str	r3, [r1, #0]
 80112cc:	4770      	bx	lr
 80112ce:	089b      	lsrs	r3, r3, #2
 80112d0:	600b      	str	r3, [r1, #0]
 80112d2:	e7fb      	b.n	80112cc <__lo0bits+0x22>
 80112d4:	b29a      	uxth	r2, r3
 80112d6:	2a00      	cmp	r2, #0
 80112d8:	d101      	bne.n	80112de <__lo0bits+0x34>
 80112da:	2010      	movs	r0, #16
 80112dc:	0c1b      	lsrs	r3, r3, #16
 80112de:	b2da      	uxtb	r2, r3
 80112e0:	2a00      	cmp	r2, #0
 80112e2:	d101      	bne.n	80112e8 <__lo0bits+0x3e>
 80112e4:	3008      	adds	r0, #8
 80112e6:	0a1b      	lsrs	r3, r3, #8
 80112e8:	071a      	lsls	r2, r3, #28
 80112ea:	d101      	bne.n	80112f0 <__lo0bits+0x46>
 80112ec:	3004      	adds	r0, #4
 80112ee:	091b      	lsrs	r3, r3, #4
 80112f0:	079a      	lsls	r2, r3, #30
 80112f2:	d101      	bne.n	80112f8 <__lo0bits+0x4e>
 80112f4:	3002      	adds	r0, #2
 80112f6:	089b      	lsrs	r3, r3, #2
 80112f8:	07da      	lsls	r2, r3, #31
 80112fa:	d4e9      	bmi.n	80112d0 <__lo0bits+0x26>
 80112fc:	3001      	adds	r0, #1
 80112fe:	085b      	lsrs	r3, r3, #1
 8011300:	d1e6      	bne.n	80112d0 <__lo0bits+0x26>
 8011302:	2020      	movs	r0, #32
 8011304:	e7e2      	b.n	80112cc <__lo0bits+0x22>
	...

08011308 <__i2b>:
 8011308:	b510      	push	{r4, lr}
 801130a:	000c      	movs	r4, r1
 801130c:	2101      	movs	r1, #1
 801130e:	f7ff feff 	bl	8011110 <_Balloc>
 8011312:	2800      	cmp	r0, #0
 8011314:	d107      	bne.n	8011326 <__i2b+0x1e>
 8011316:	2146      	movs	r1, #70	@ 0x46
 8011318:	4c05      	ldr	r4, [pc, #20]	@ (8011330 <__i2b+0x28>)
 801131a:	0002      	movs	r2, r0
 801131c:	4b05      	ldr	r3, [pc, #20]	@ (8011334 <__i2b+0x2c>)
 801131e:	0020      	movs	r0, r4
 8011320:	31ff      	adds	r1, #255	@ 0xff
 8011322:	f000 fccd 	bl	8011cc0 <__assert_func>
 8011326:	2301      	movs	r3, #1
 8011328:	6144      	str	r4, [r0, #20]
 801132a:	6103      	str	r3, [r0, #16]
 801132c:	bd10      	pop	{r4, pc}
 801132e:	46c0      	nop			@ (mov r8, r8)
 8011330:	080127d3 	.word	0x080127d3
 8011334:	080127c2 	.word	0x080127c2

08011338 <__multiply>:
 8011338:	b5f0      	push	{r4, r5, r6, r7, lr}
 801133a:	0014      	movs	r4, r2
 801133c:	690a      	ldr	r2, [r1, #16]
 801133e:	6923      	ldr	r3, [r4, #16]
 8011340:	000d      	movs	r5, r1
 8011342:	b08b      	sub	sp, #44	@ 0x2c
 8011344:	429a      	cmp	r2, r3
 8011346:	db02      	blt.n	801134e <__multiply+0x16>
 8011348:	0023      	movs	r3, r4
 801134a:	000c      	movs	r4, r1
 801134c:	001d      	movs	r5, r3
 801134e:	6927      	ldr	r7, [r4, #16]
 8011350:	692e      	ldr	r6, [r5, #16]
 8011352:	6861      	ldr	r1, [r4, #4]
 8011354:	19bb      	adds	r3, r7, r6
 8011356:	9303      	str	r3, [sp, #12]
 8011358:	68a3      	ldr	r3, [r4, #8]
 801135a:	19ba      	adds	r2, r7, r6
 801135c:	4293      	cmp	r3, r2
 801135e:	da00      	bge.n	8011362 <__multiply+0x2a>
 8011360:	3101      	adds	r1, #1
 8011362:	f7ff fed5 	bl	8011110 <_Balloc>
 8011366:	9002      	str	r0, [sp, #8]
 8011368:	2800      	cmp	r0, #0
 801136a:	d106      	bne.n	801137a <__multiply+0x42>
 801136c:	21b1      	movs	r1, #177	@ 0xb1
 801136e:	4b49      	ldr	r3, [pc, #292]	@ (8011494 <__multiply+0x15c>)
 8011370:	4849      	ldr	r0, [pc, #292]	@ (8011498 <__multiply+0x160>)
 8011372:	9a02      	ldr	r2, [sp, #8]
 8011374:	0049      	lsls	r1, r1, #1
 8011376:	f000 fca3 	bl	8011cc0 <__assert_func>
 801137a:	9b02      	ldr	r3, [sp, #8]
 801137c:	2200      	movs	r2, #0
 801137e:	3314      	adds	r3, #20
 8011380:	469c      	mov	ip, r3
 8011382:	19bb      	adds	r3, r7, r6
 8011384:	009b      	lsls	r3, r3, #2
 8011386:	4463      	add	r3, ip
 8011388:	9304      	str	r3, [sp, #16]
 801138a:	4663      	mov	r3, ip
 801138c:	9904      	ldr	r1, [sp, #16]
 801138e:	428b      	cmp	r3, r1
 8011390:	d32a      	bcc.n	80113e8 <__multiply+0xb0>
 8011392:	0023      	movs	r3, r4
 8011394:	00bf      	lsls	r7, r7, #2
 8011396:	3314      	adds	r3, #20
 8011398:	3514      	adds	r5, #20
 801139a:	9308      	str	r3, [sp, #32]
 801139c:	00b6      	lsls	r6, r6, #2
 801139e:	19db      	adds	r3, r3, r7
 80113a0:	9305      	str	r3, [sp, #20]
 80113a2:	19ab      	adds	r3, r5, r6
 80113a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80113a6:	2304      	movs	r3, #4
 80113a8:	9306      	str	r3, [sp, #24]
 80113aa:	0023      	movs	r3, r4
 80113ac:	9a05      	ldr	r2, [sp, #20]
 80113ae:	3315      	adds	r3, #21
 80113b0:	9501      	str	r5, [sp, #4]
 80113b2:	429a      	cmp	r2, r3
 80113b4:	d305      	bcc.n	80113c2 <__multiply+0x8a>
 80113b6:	1b13      	subs	r3, r2, r4
 80113b8:	3b15      	subs	r3, #21
 80113ba:	089b      	lsrs	r3, r3, #2
 80113bc:	3301      	adds	r3, #1
 80113be:	009b      	lsls	r3, r3, #2
 80113c0:	9306      	str	r3, [sp, #24]
 80113c2:	9b01      	ldr	r3, [sp, #4]
 80113c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80113c6:	4293      	cmp	r3, r2
 80113c8:	d310      	bcc.n	80113ec <__multiply+0xb4>
 80113ca:	9b03      	ldr	r3, [sp, #12]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	dd05      	ble.n	80113dc <__multiply+0xa4>
 80113d0:	9b04      	ldr	r3, [sp, #16]
 80113d2:	3b04      	subs	r3, #4
 80113d4:	9304      	str	r3, [sp, #16]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d056      	beq.n	801148a <__multiply+0x152>
 80113dc:	9b02      	ldr	r3, [sp, #8]
 80113de:	9a03      	ldr	r2, [sp, #12]
 80113e0:	0018      	movs	r0, r3
 80113e2:	611a      	str	r2, [r3, #16]
 80113e4:	b00b      	add	sp, #44	@ 0x2c
 80113e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113e8:	c304      	stmia	r3!, {r2}
 80113ea:	e7cf      	b.n	801138c <__multiply+0x54>
 80113ec:	9b01      	ldr	r3, [sp, #4]
 80113ee:	6818      	ldr	r0, [r3, #0]
 80113f0:	b280      	uxth	r0, r0
 80113f2:	2800      	cmp	r0, #0
 80113f4:	d01e      	beq.n	8011434 <__multiply+0xfc>
 80113f6:	4667      	mov	r7, ip
 80113f8:	2500      	movs	r5, #0
 80113fa:	9e08      	ldr	r6, [sp, #32]
 80113fc:	ce02      	ldmia	r6!, {r1}
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	9307      	str	r3, [sp, #28]
 8011402:	b28b      	uxth	r3, r1
 8011404:	4343      	muls	r3, r0
 8011406:	001a      	movs	r2, r3
 8011408:	466b      	mov	r3, sp
 801140a:	0c09      	lsrs	r1, r1, #16
 801140c:	8b9b      	ldrh	r3, [r3, #28]
 801140e:	4341      	muls	r1, r0
 8011410:	18d3      	adds	r3, r2, r3
 8011412:	9a07      	ldr	r2, [sp, #28]
 8011414:	195b      	adds	r3, r3, r5
 8011416:	0c12      	lsrs	r2, r2, #16
 8011418:	1889      	adds	r1, r1, r2
 801141a:	0c1a      	lsrs	r2, r3, #16
 801141c:	188a      	adds	r2, r1, r2
 801141e:	b29b      	uxth	r3, r3
 8011420:	0c15      	lsrs	r5, r2, #16
 8011422:	0412      	lsls	r2, r2, #16
 8011424:	431a      	orrs	r2, r3
 8011426:	9b05      	ldr	r3, [sp, #20]
 8011428:	c704      	stmia	r7!, {r2}
 801142a:	42b3      	cmp	r3, r6
 801142c:	d8e6      	bhi.n	80113fc <__multiply+0xc4>
 801142e:	4663      	mov	r3, ip
 8011430:	9a06      	ldr	r2, [sp, #24]
 8011432:	509d      	str	r5, [r3, r2]
 8011434:	9b01      	ldr	r3, [sp, #4]
 8011436:	6818      	ldr	r0, [r3, #0]
 8011438:	0c00      	lsrs	r0, r0, #16
 801143a:	d020      	beq.n	801147e <__multiply+0x146>
 801143c:	4663      	mov	r3, ip
 801143e:	0025      	movs	r5, r4
 8011440:	4661      	mov	r1, ip
 8011442:	2700      	movs	r7, #0
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	3514      	adds	r5, #20
 8011448:	682a      	ldr	r2, [r5, #0]
 801144a:	680e      	ldr	r6, [r1, #0]
 801144c:	b292      	uxth	r2, r2
 801144e:	4342      	muls	r2, r0
 8011450:	0c36      	lsrs	r6, r6, #16
 8011452:	1992      	adds	r2, r2, r6
 8011454:	19d2      	adds	r2, r2, r7
 8011456:	0416      	lsls	r6, r2, #16
 8011458:	b29b      	uxth	r3, r3
 801145a:	431e      	orrs	r6, r3
 801145c:	600e      	str	r6, [r1, #0]
 801145e:	cd40      	ldmia	r5!, {r6}
 8011460:	684b      	ldr	r3, [r1, #4]
 8011462:	0c36      	lsrs	r6, r6, #16
 8011464:	4346      	muls	r6, r0
 8011466:	b29b      	uxth	r3, r3
 8011468:	0c12      	lsrs	r2, r2, #16
 801146a:	18f3      	adds	r3, r6, r3
 801146c:	189b      	adds	r3, r3, r2
 801146e:	9a05      	ldr	r2, [sp, #20]
 8011470:	0c1f      	lsrs	r7, r3, #16
 8011472:	3104      	adds	r1, #4
 8011474:	42aa      	cmp	r2, r5
 8011476:	d8e7      	bhi.n	8011448 <__multiply+0x110>
 8011478:	4662      	mov	r2, ip
 801147a:	9906      	ldr	r1, [sp, #24]
 801147c:	5053      	str	r3, [r2, r1]
 801147e:	9b01      	ldr	r3, [sp, #4]
 8011480:	3304      	adds	r3, #4
 8011482:	9301      	str	r3, [sp, #4]
 8011484:	2304      	movs	r3, #4
 8011486:	449c      	add	ip, r3
 8011488:	e79b      	b.n	80113c2 <__multiply+0x8a>
 801148a:	9b03      	ldr	r3, [sp, #12]
 801148c:	3b01      	subs	r3, #1
 801148e:	9303      	str	r3, [sp, #12]
 8011490:	e79b      	b.n	80113ca <__multiply+0x92>
 8011492:	46c0      	nop			@ (mov r8, r8)
 8011494:	080127c2 	.word	0x080127c2
 8011498:	080127d3 	.word	0x080127d3

0801149c <__pow5mult>:
 801149c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801149e:	2303      	movs	r3, #3
 80114a0:	0015      	movs	r5, r2
 80114a2:	0007      	movs	r7, r0
 80114a4:	000e      	movs	r6, r1
 80114a6:	401a      	ands	r2, r3
 80114a8:	421d      	tst	r5, r3
 80114aa:	d008      	beq.n	80114be <__pow5mult+0x22>
 80114ac:	4925      	ldr	r1, [pc, #148]	@ (8011544 <__pow5mult+0xa8>)
 80114ae:	3a01      	subs	r2, #1
 80114b0:	0092      	lsls	r2, r2, #2
 80114b2:	5852      	ldr	r2, [r2, r1]
 80114b4:	2300      	movs	r3, #0
 80114b6:	0031      	movs	r1, r6
 80114b8:	f7ff fe92 	bl	80111e0 <__multadd>
 80114bc:	0006      	movs	r6, r0
 80114be:	10ad      	asrs	r5, r5, #2
 80114c0:	d03d      	beq.n	801153e <__pow5mult+0xa2>
 80114c2:	69fc      	ldr	r4, [r7, #28]
 80114c4:	2c00      	cmp	r4, #0
 80114c6:	d10f      	bne.n	80114e8 <__pow5mult+0x4c>
 80114c8:	2010      	movs	r0, #16
 80114ca:	f7ff fd65 	bl	8010f98 <malloc>
 80114ce:	1e02      	subs	r2, r0, #0
 80114d0:	61f8      	str	r0, [r7, #28]
 80114d2:	d105      	bne.n	80114e0 <__pow5mult+0x44>
 80114d4:	21b4      	movs	r1, #180	@ 0xb4
 80114d6:	4b1c      	ldr	r3, [pc, #112]	@ (8011548 <__pow5mult+0xac>)
 80114d8:	481c      	ldr	r0, [pc, #112]	@ (801154c <__pow5mult+0xb0>)
 80114da:	31ff      	adds	r1, #255	@ 0xff
 80114dc:	f000 fbf0 	bl	8011cc0 <__assert_func>
 80114e0:	6044      	str	r4, [r0, #4]
 80114e2:	6084      	str	r4, [r0, #8]
 80114e4:	6004      	str	r4, [r0, #0]
 80114e6:	60c4      	str	r4, [r0, #12]
 80114e8:	69fb      	ldr	r3, [r7, #28]
 80114ea:	689c      	ldr	r4, [r3, #8]
 80114ec:	9301      	str	r3, [sp, #4]
 80114ee:	2c00      	cmp	r4, #0
 80114f0:	d108      	bne.n	8011504 <__pow5mult+0x68>
 80114f2:	0038      	movs	r0, r7
 80114f4:	4916      	ldr	r1, [pc, #88]	@ (8011550 <__pow5mult+0xb4>)
 80114f6:	f7ff ff07 	bl	8011308 <__i2b>
 80114fa:	9b01      	ldr	r3, [sp, #4]
 80114fc:	0004      	movs	r4, r0
 80114fe:	6098      	str	r0, [r3, #8]
 8011500:	2300      	movs	r3, #0
 8011502:	6003      	str	r3, [r0, #0]
 8011504:	2301      	movs	r3, #1
 8011506:	421d      	tst	r5, r3
 8011508:	d00a      	beq.n	8011520 <__pow5mult+0x84>
 801150a:	0031      	movs	r1, r6
 801150c:	0022      	movs	r2, r4
 801150e:	0038      	movs	r0, r7
 8011510:	f7ff ff12 	bl	8011338 <__multiply>
 8011514:	0031      	movs	r1, r6
 8011516:	9001      	str	r0, [sp, #4]
 8011518:	0038      	movs	r0, r7
 801151a:	f7ff fe3d 	bl	8011198 <_Bfree>
 801151e:	9e01      	ldr	r6, [sp, #4]
 8011520:	106d      	asrs	r5, r5, #1
 8011522:	d00c      	beq.n	801153e <__pow5mult+0xa2>
 8011524:	6820      	ldr	r0, [r4, #0]
 8011526:	2800      	cmp	r0, #0
 8011528:	d107      	bne.n	801153a <__pow5mult+0x9e>
 801152a:	0022      	movs	r2, r4
 801152c:	0021      	movs	r1, r4
 801152e:	0038      	movs	r0, r7
 8011530:	f7ff ff02 	bl	8011338 <__multiply>
 8011534:	2300      	movs	r3, #0
 8011536:	6020      	str	r0, [r4, #0]
 8011538:	6003      	str	r3, [r0, #0]
 801153a:	0004      	movs	r4, r0
 801153c:	e7e2      	b.n	8011504 <__pow5mult+0x68>
 801153e:	0030      	movs	r0, r6
 8011540:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011542:	46c0      	nop			@ (mov r8, r8)
 8011544:	0801282c 	.word	0x0801282c
 8011548:	08012753 	.word	0x08012753
 801154c:	080127d3 	.word	0x080127d3
 8011550:	00000271 	.word	0x00000271

08011554 <__lshift>:
 8011554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011556:	000c      	movs	r4, r1
 8011558:	0016      	movs	r6, r2
 801155a:	6923      	ldr	r3, [r4, #16]
 801155c:	1157      	asrs	r7, r2, #5
 801155e:	b085      	sub	sp, #20
 8011560:	18fb      	adds	r3, r7, r3
 8011562:	9301      	str	r3, [sp, #4]
 8011564:	3301      	adds	r3, #1
 8011566:	9300      	str	r3, [sp, #0]
 8011568:	6849      	ldr	r1, [r1, #4]
 801156a:	68a3      	ldr	r3, [r4, #8]
 801156c:	9002      	str	r0, [sp, #8]
 801156e:	9a00      	ldr	r2, [sp, #0]
 8011570:	4293      	cmp	r3, r2
 8011572:	db10      	blt.n	8011596 <__lshift+0x42>
 8011574:	9802      	ldr	r0, [sp, #8]
 8011576:	f7ff fdcb 	bl	8011110 <_Balloc>
 801157a:	2300      	movs	r3, #0
 801157c:	0001      	movs	r1, r0
 801157e:	0005      	movs	r5, r0
 8011580:	001a      	movs	r2, r3
 8011582:	3114      	adds	r1, #20
 8011584:	4298      	cmp	r0, r3
 8011586:	d10c      	bne.n	80115a2 <__lshift+0x4e>
 8011588:	21ef      	movs	r1, #239	@ 0xef
 801158a:	002a      	movs	r2, r5
 801158c:	4b25      	ldr	r3, [pc, #148]	@ (8011624 <__lshift+0xd0>)
 801158e:	4826      	ldr	r0, [pc, #152]	@ (8011628 <__lshift+0xd4>)
 8011590:	0049      	lsls	r1, r1, #1
 8011592:	f000 fb95 	bl	8011cc0 <__assert_func>
 8011596:	3101      	adds	r1, #1
 8011598:	005b      	lsls	r3, r3, #1
 801159a:	e7e8      	b.n	801156e <__lshift+0x1a>
 801159c:	0098      	lsls	r0, r3, #2
 801159e:	500a      	str	r2, [r1, r0]
 80115a0:	3301      	adds	r3, #1
 80115a2:	42bb      	cmp	r3, r7
 80115a4:	dbfa      	blt.n	801159c <__lshift+0x48>
 80115a6:	43fb      	mvns	r3, r7
 80115a8:	17db      	asrs	r3, r3, #31
 80115aa:	401f      	ands	r7, r3
 80115ac:	00bf      	lsls	r7, r7, #2
 80115ae:	0023      	movs	r3, r4
 80115b0:	201f      	movs	r0, #31
 80115b2:	19c9      	adds	r1, r1, r7
 80115b4:	0037      	movs	r7, r6
 80115b6:	6922      	ldr	r2, [r4, #16]
 80115b8:	3314      	adds	r3, #20
 80115ba:	0092      	lsls	r2, r2, #2
 80115bc:	189a      	adds	r2, r3, r2
 80115be:	4007      	ands	r7, r0
 80115c0:	4206      	tst	r6, r0
 80115c2:	d029      	beq.n	8011618 <__lshift+0xc4>
 80115c4:	3001      	adds	r0, #1
 80115c6:	1bc0      	subs	r0, r0, r7
 80115c8:	9003      	str	r0, [sp, #12]
 80115ca:	468c      	mov	ip, r1
 80115cc:	2000      	movs	r0, #0
 80115ce:	681e      	ldr	r6, [r3, #0]
 80115d0:	40be      	lsls	r6, r7
 80115d2:	4306      	orrs	r6, r0
 80115d4:	4660      	mov	r0, ip
 80115d6:	c040      	stmia	r0!, {r6}
 80115d8:	4684      	mov	ip, r0
 80115da:	9e03      	ldr	r6, [sp, #12]
 80115dc:	cb01      	ldmia	r3!, {r0}
 80115de:	40f0      	lsrs	r0, r6
 80115e0:	429a      	cmp	r2, r3
 80115e2:	d8f4      	bhi.n	80115ce <__lshift+0x7a>
 80115e4:	0026      	movs	r6, r4
 80115e6:	3615      	adds	r6, #21
 80115e8:	2304      	movs	r3, #4
 80115ea:	42b2      	cmp	r2, r6
 80115ec:	d304      	bcc.n	80115f8 <__lshift+0xa4>
 80115ee:	1b13      	subs	r3, r2, r4
 80115f0:	3b15      	subs	r3, #21
 80115f2:	089b      	lsrs	r3, r3, #2
 80115f4:	3301      	adds	r3, #1
 80115f6:	009b      	lsls	r3, r3, #2
 80115f8:	50c8      	str	r0, [r1, r3]
 80115fa:	2800      	cmp	r0, #0
 80115fc:	d002      	beq.n	8011604 <__lshift+0xb0>
 80115fe:	9b01      	ldr	r3, [sp, #4]
 8011600:	3302      	adds	r3, #2
 8011602:	9300      	str	r3, [sp, #0]
 8011604:	9b00      	ldr	r3, [sp, #0]
 8011606:	9802      	ldr	r0, [sp, #8]
 8011608:	3b01      	subs	r3, #1
 801160a:	0021      	movs	r1, r4
 801160c:	612b      	str	r3, [r5, #16]
 801160e:	f7ff fdc3 	bl	8011198 <_Bfree>
 8011612:	0028      	movs	r0, r5
 8011614:	b005      	add	sp, #20
 8011616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011618:	cb01      	ldmia	r3!, {r0}
 801161a:	c101      	stmia	r1!, {r0}
 801161c:	429a      	cmp	r2, r3
 801161e:	d8fb      	bhi.n	8011618 <__lshift+0xc4>
 8011620:	e7f0      	b.n	8011604 <__lshift+0xb0>
 8011622:	46c0      	nop			@ (mov r8, r8)
 8011624:	080127c2 	.word	0x080127c2
 8011628:	080127d3 	.word	0x080127d3

0801162c <__mcmp>:
 801162c:	b530      	push	{r4, r5, lr}
 801162e:	690b      	ldr	r3, [r1, #16]
 8011630:	6904      	ldr	r4, [r0, #16]
 8011632:	0002      	movs	r2, r0
 8011634:	1ae0      	subs	r0, r4, r3
 8011636:	429c      	cmp	r4, r3
 8011638:	d10f      	bne.n	801165a <__mcmp+0x2e>
 801163a:	3214      	adds	r2, #20
 801163c:	009b      	lsls	r3, r3, #2
 801163e:	3114      	adds	r1, #20
 8011640:	0014      	movs	r4, r2
 8011642:	18c9      	adds	r1, r1, r3
 8011644:	18d2      	adds	r2, r2, r3
 8011646:	3a04      	subs	r2, #4
 8011648:	3904      	subs	r1, #4
 801164a:	6815      	ldr	r5, [r2, #0]
 801164c:	680b      	ldr	r3, [r1, #0]
 801164e:	429d      	cmp	r5, r3
 8011650:	d004      	beq.n	801165c <__mcmp+0x30>
 8011652:	2001      	movs	r0, #1
 8011654:	429d      	cmp	r5, r3
 8011656:	d200      	bcs.n	801165a <__mcmp+0x2e>
 8011658:	3802      	subs	r0, #2
 801165a:	bd30      	pop	{r4, r5, pc}
 801165c:	4294      	cmp	r4, r2
 801165e:	d3f2      	bcc.n	8011646 <__mcmp+0x1a>
 8011660:	e7fb      	b.n	801165a <__mcmp+0x2e>
	...

08011664 <__mdiff>:
 8011664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011666:	000c      	movs	r4, r1
 8011668:	b087      	sub	sp, #28
 801166a:	9000      	str	r0, [sp, #0]
 801166c:	0011      	movs	r1, r2
 801166e:	0020      	movs	r0, r4
 8011670:	0017      	movs	r7, r2
 8011672:	f7ff ffdb 	bl	801162c <__mcmp>
 8011676:	1e05      	subs	r5, r0, #0
 8011678:	d110      	bne.n	801169c <__mdiff+0x38>
 801167a:	0001      	movs	r1, r0
 801167c:	9800      	ldr	r0, [sp, #0]
 801167e:	f7ff fd47 	bl	8011110 <_Balloc>
 8011682:	1e02      	subs	r2, r0, #0
 8011684:	d104      	bne.n	8011690 <__mdiff+0x2c>
 8011686:	4b40      	ldr	r3, [pc, #256]	@ (8011788 <__mdiff+0x124>)
 8011688:	4840      	ldr	r0, [pc, #256]	@ (801178c <__mdiff+0x128>)
 801168a:	4941      	ldr	r1, [pc, #260]	@ (8011790 <__mdiff+0x12c>)
 801168c:	f000 fb18 	bl	8011cc0 <__assert_func>
 8011690:	2301      	movs	r3, #1
 8011692:	6145      	str	r5, [r0, #20]
 8011694:	6103      	str	r3, [r0, #16]
 8011696:	0010      	movs	r0, r2
 8011698:	b007      	add	sp, #28
 801169a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801169c:	2600      	movs	r6, #0
 801169e:	42b0      	cmp	r0, r6
 80116a0:	da03      	bge.n	80116aa <__mdiff+0x46>
 80116a2:	0023      	movs	r3, r4
 80116a4:	003c      	movs	r4, r7
 80116a6:	001f      	movs	r7, r3
 80116a8:	3601      	adds	r6, #1
 80116aa:	6861      	ldr	r1, [r4, #4]
 80116ac:	9800      	ldr	r0, [sp, #0]
 80116ae:	f7ff fd2f 	bl	8011110 <_Balloc>
 80116b2:	1e02      	subs	r2, r0, #0
 80116b4:	d103      	bne.n	80116be <__mdiff+0x5a>
 80116b6:	4b34      	ldr	r3, [pc, #208]	@ (8011788 <__mdiff+0x124>)
 80116b8:	4834      	ldr	r0, [pc, #208]	@ (801178c <__mdiff+0x128>)
 80116ba:	4936      	ldr	r1, [pc, #216]	@ (8011794 <__mdiff+0x130>)
 80116bc:	e7e6      	b.n	801168c <__mdiff+0x28>
 80116be:	6923      	ldr	r3, [r4, #16]
 80116c0:	3414      	adds	r4, #20
 80116c2:	9300      	str	r3, [sp, #0]
 80116c4:	009b      	lsls	r3, r3, #2
 80116c6:	18e3      	adds	r3, r4, r3
 80116c8:	0021      	movs	r1, r4
 80116ca:	9401      	str	r4, [sp, #4]
 80116cc:	003c      	movs	r4, r7
 80116ce:	9302      	str	r3, [sp, #8]
 80116d0:	693b      	ldr	r3, [r7, #16]
 80116d2:	3414      	adds	r4, #20
 80116d4:	009b      	lsls	r3, r3, #2
 80116d6:	18e3      	adds	r3, r4, r3
 80116d8:	9303      	str	r3, [sp, #12]
 80116da:	0003      	movs	r3, r0
 80116dc:	60c6      	str	r6, [r0, #12]
 80116de:	468c      	mov	ip, r1
 80116e0:	2000      	movs	r0, #0
 80116e2:	3314      	adds	r3, #20
 80116e4:	9304      	str	r3, [sp, #16]
 80116e6:	9305      	str	r3, [sp, #20]
 80116e8:	4663      	mov	r3, ip
 80116ea:	cb20      	ldmia	r3!, {r5}
 80116ec:	b2a9      	uxth	r1, r5
 80116ee:	000e      	movs	r6, r1
 80116f0:	469c      	mov	ip, r3
 80116f2:	cc08      	ldmia	r4!, {r3}
 80116f4:	0c2d      	lsrs	r5, r5, #16
 80116f6:	b299      	uxth	r1, r3
 80116f8:	1a71      	subs	r1, r6, r1
 80116fa:	1809      	adds	r1, r1, r0
 80116fc:	0c1b      	lsrs	r3, r3, #16
 80116fe:	1408      	asrs	r0, r1, #16
 8011700:	1aeb      	subs	r3, r5, r3
 8011702:	181b      	adds	r3, r3, r0
 8011704:	1418      	asrs	r0, r3, #16
 8011706:	b289      	uxth	r1, r1
 8011708:	041b      	lsls	r3, r3, #16
 801170a:	4319      	orrs	r1, r3
 801170c:	9b05      	ldr	r3, [sp, #20]
 801170e:	c302      	stmia	r3!, {r1}
 8011710:	9305      	str	r3, [sp, #20]
 8011712:	9b03      	ldr	r3, [sp, #12]
 8011714:	42a3      	cmp	r3, r4
 8011716:	d8e7      	bhi.n	80116e8 <__mdiff+0x84>
 8011718:	0039      	movs	r1, r7
 801171a:	9c03      	ldr	r4, [sp, #12]
 801171c:	3115      	adds	r1, #21
 801171e:	2304      	movs	r3, #4
 8011720:	428c      	cmp	r4, r1
 8011722:	d304      	bcc.n	801172e <__mdiff+0xca>
 8011724:	1be3      	subs	r3, r4, r7
 8011726:	3b15      	subs	r3, #21
 8011728:	089b      	lsrs	r3, r3, #2
 801172a:	3301      	adds	r3, #1
 801172c:	009b      	lsls	r3, r3, #2
 801172e:	9901      	ldr	r1, [sp, #4]
 8011730:	18cd      	adds	r5, r1, r3
 8011732:	9904      	ldr	r1, [sp, #16]
 8011734:	002e      	movs	r6, r5
 8011736:	18cb      	adds	r3, r1, r3
 8011738:	001f      	movs	r7, r3
 801173a:	9902      	ldr	r1, [sp, #8]
 801173c:	428e      	cmp	r6, r1
 801173e:	d311      	bcc.n	8011764 <__mdiff+0x100>
 8011740:	9c02      	ldr	r4, [sp, #8]
 8011742:	1ee9      	subs	r1, r5, #3
 8011744:	2000      	movs	r0, #0
 8011746:	428c      	cmp	r4, r1
 8011748:	d304      	bcc.n	8011754 <__mdiff+0xf0>
 801174a:	0021      	movs	r1, r4
 801174c:	3103      	adds	r1, #3
 801174e:	1b49      	subs	r1, r1, r5
 8011750:	0889      	lsrs	r1, r1, #2
 8011752:	0088      	lsls	r0, r1, #2
 8011754:	181b      	adds	r3, r3, r0
 8011756:	3b04      	subs	r3, #4
 8011758:	6819      	ldr	r1, [r3, #0]
 801175a:	2900      	cmp	r1, #0
 801175c:	d010      	beq.n	8011780 <__mdiff+0x11c>
 801175e:	9b00      	ldr	r3, [sp, #0]
 8011760:	6113      	str	r3, [r2, #16]
 8011762:	e798      	b.n	8011696 <__mdiff+0x32>
 8011764:	4684      	mov	ip, r0
 8011766:	ce02      	ldmia	r6!, {r1}
 8011768:	b288      	uxth	r0, r1
 801176a:	4460      	add	r0, ip
 801176c:	1400      	asrs	r0, r0, #16
 801176e:	0c0c      	lsrs	r4, r1, #16
 8011770:	1904      	adds	r4, r0, r4
 8011772:	4461      	add	r1, ip
 8011774:	1420      	asrs	r0, r4, #16
 8011776:	b289      	uxth	r1, r1
 8011778:	0424      	lsls	r4, r4, #16
 801177a:	4321      	orrs	r1, r4
 801177c:	c702      	stmia	r7!, {r1}
 801177e:	e7dc      	b.n	801173a <__mdiff+0xd6>
 8011780:	9900      	ldr	r1, [sp, #0]
 8011782:	3901      	subs	r1, #1
 8011784:	9100      	str	r1, [sp, #0]
 8011786:	e7e6      	b.n	8011756 <__mdiff+0xf2>
 8011788:	080127c2 	.word	0x080127c2
 801178c:	080127d3 	.word	0x080127d3
 8011790:	00000237 	.word	0x00000237
 8011794:	00000245 	.word	0x00000245

08011798 <__d2b>:
 8011798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801179a:	2101      	movs	r1, #1
 801179c:	0016      	movs	r6, r2
 801179e:	001f      	movs	r7, r3
 80117a0:	f7ff fcb6 	bl	8011110 <_Balloc>
 80117a4:	1e04      	subs	r4, r0, #0
 80117a6:	d105      	bne.n	80117b4 <__d2b+0x1c>
 80117a8:	0022      	movs	r2, r4
 80117aa:	4b25      	ldr	r3, [pc, #148]	@ (8011840 <__d2b+0xa8>)
 80117ac:	4825      	ldr	r0, [pc, #148]	@ (8011844 <__d2b+0xac>)
 80117ae:	4926      	ldr	r1, [pc, #152]	@ (8011848 <__d2b+0xb0>)
 80117b0:	f000 fa86 	bl	8011cc0 <__assert_func>
 80117b4:	033b      	lsls	r3, r7, #12
 80117b6:	007d      	lsls	r5, r7, #1
 80117b8:	0b1b      	lsrs	r3, r3, #12
 80117ba:	0d6d      	lsrs	r5, r5, #21
 80117bc:	d002      	beq.n	80117c4 <__d2b+0x2c>
 80117be:	2280      	movs	r2, #128	@ 0x80
 80117c0:	0352      	lsls	r2, r2, #13
 80117c2:	4313      	orrs	r3, r2
 80117c4:	9301      	str	r3, [sp, #4]
 80117c6:	2e00      	cmp	r6, #0
 80117c8:	d025      	beq.n	8011816 <__d2b+0x7e>
 80117ca:	4668      	mov	r0, sp
 80117cc:	9600      	str	r6, [sp, #0]
 80117ce:	f7ff fd6c 	bl	80112aa <__lo0bits>
 80117d2:	9b01      	ldr	r3, [sp, #4]
 80117d4:	9900      	ldr	r1, [sp, #0]
 80117d6:	2800      	cmp	r0, #0
 80117d8:	d01b      	beq.n	8011812 <__d2b+0x7a>
 80117da:	2220      	movs	r2, #32
 80117dc:	001e      	movs	r6, r3
 80117de:	1a12      	subs	r2, r2, r0
 80117e0:	4096      	lsls	r6, r2
 80117e2:	0032      	movs	r2, r6
 80117e4:	40c3      	lsrs	r3, r0
 80117e6:	430a      	orrs	r2, r1
 80117e8:	6162      	str	r2, [r4, #20]
 80117ea:	9301      	str	r3, [sp, #4]
 80117ec:	9e01      	ldr	r6, [sp, #4]
 80117ee:	61a6      	str	r6, [r4, #24]
 80117f0:	1e73      	subs	r3, r6, #1
 80117f2:	419e      	sbcs	r6, r3
 80117f4:	3601      	adds	r6, #1
 80117f6:	6126      	str	r6, [r4, #16]
 80117f8:	2d00      	cmp	r5, #0
 80117fa:	d014      	beq.n	8011826 <__d2b+0x8e>
 80117fc:	2635      	movs	r6, #53	@ 0x35
 80117fe:	4b13      	ldr	r3, [pc, #76]	@ (801184c <__d2b+0xb4>)
 8011800:	18ed      	adds	r5, r5, r3
 8011802:	9b08      	ldr	r3, [sp, #32]
 8011804:	182d      	adds	r5, r5, r0
 8011806:	601d      	str	r5, [r3, #0]
 8011808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801180a:	1a36      	subs	r6, r6, r0
 801180c:	601e      	str	r6, [r3, #0]
 801180e:	0020      	movs	r0, r4
 8011810:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011812:	6161      	str	r1, [r4, #20]
 8011814:	e7ea      	b.n	80117ec <__d2b+0x54>
 8011816:	a801      	add	r0, sp, #4
 8011818:	f7ff fd47 	bl	80112aa <__lo0bits>
 801181c:	9b01      	ldr	r3, [sp, #4]
 801181e:	2601      	movs	r6, #1
 8011820:	6163      	str	r3, [r4, #20]
 8011822:	3020      	adds	r0, #32
 8011824:	e7e7      	b.n	80117f6 <__d2b+0x5e>
 8011826:	4b0a      	ldr	r3, [pc, #40]	@ (8011850 <__d2b+0xb8>)
 8011828:	18c0      	adds	r0, r0, r3
 801182a:	9b08      	ldr	r3, [sp, #32]
 801182c:	6018      	str	r0, [r3, #0]
 801182e:	4b09      	ldr	r3, [pc, #36]	@ (8011854 <__d2b+0xbc>)
 8011830:	18f3      	adds	r3, r6, r3
 8011832:	009b      	lsls	r3, r3, #2
 8011834:	18e3      	adds	r3, r4, r3
 8011836:	6958      	ldr	r0, [r3, #20]
 8011838:	f7ff fd16 	bl	8011268 <__hi0bits>
 801183c:	0176      	lsls	r6, r6, #5
 801183e:	e7e3      	b.n	8011808 <__d2b+0x70>
 8011840:	080127c2 	.word	0x080127c2
 8011844:	080127d3 	.word	0x080127d3
 8011848:	0000030f 	.word	0x0000030f
 801184c:	fffffbcd 	.word	0xfffffbcd
 8011850:	fffffbce 	.word	0xfffffbce
 8011854:	3fffffff 	.word	0x3fffffff

08011858 <__ssputs_r>:
 8011858:	b5f0      	push	{r4, r5, r6, r7, lr}
 801185a:	688e      	ldr	r6, [r1, #8]
 801185c:	b085      	sub	sp, #20
 801185e:	001f      	movs	r7, r3
 8011860:	000c      	movs	r4, r1
 8011862:	680b      	ldr	r3, [r1, #0]
 8011864:	9002      	str	r0, [sp, #8]
 8011866:	9203      	str	r2, [sp, #12]
 8011868:	42be      	cmp	r6, r7
 801186a:	d830      	bhi.n	80118ce <__ssputs_r+0x76>
 801186c:	210c      	movs	r1, #12
 801186e:	5e62      	ldrsh	r2, [r4, r1]
 8011870:	2190      	movs	r1, #144	@ 0x90
 8011872:	00c9      	lsls	r1, r1, #3
 8011874:	420a      	tst	r2, r1
 8011876:	d028      	beq.n	80118ca <__ssputs_r+0x72>
 8011878:	2003      	movs	r0, #3
 801187a:	6921      	ldr	r1, [r4, #16]
 801187c:	1a5b      	subs	r3, r3, r1
 801187e:	9301      	str	r3, [sp, #4]
 8011880:	6963      	ldr	r3, [r4, #20]
 8011882:	4343      	muls	r3, r0
 8011884:	9801      	ldr	r0, [sp, #4]
 8011886:	0fdd      	lsrs	r5, r3, #31
 8011888:	18ed      	adds	r5, r5, r3
 801188a:	1c7b      	adds	r3, r7, #1
 801188c:	181b      	adds	r3, r3, r0
 801188e:	106d      	asrs	r5, r5, #1
 8011890:	42ab      	cmp	r3, r5
 8011892:	d900      	bls.n	8011896 <__ssputs_r+0x3e>
 8011894:	001d      	movs	r5, r3
 8011896:	0552      	lsls	r2, r2, #21
 8011898:	d528      	bpl.n	80118ec <__ssputs_r+0x94>
 801189a:	0029      	movs	r1, r5
 801189c:	9802      	ldr	r0, [sp, #8]
 801189e:	f7ff fba7 	bl	8010ff0 <_malloc_r>
 80118a2:	1e06      	subs	r6, r0, #0
 80118a4:	d02c      	beq.n	8011900 <__ssputs_r+0xa8>
 80118a6:	9a01      	ldr	r2, [sp, #4]
 80118a8:	6921      	ldr	r1, [r4, #16]
 80118aa:	f7fe fc9f 	bl	80101ec <memcpy>
 80118ae:	89a2      	ldrh	r2, [r4, #12]
 80118b0:	4b18      	ldr	r3, [pc, #96]	@ (8011914 <__ssputs_r+0xbc>)
 80118b2:	401a      	ands	r2, r3
 80118b4:	2380      	movs	r3, #128	@ 0x80
 80118b6:	4313      	orrs	r3, r2
 80118b8:	81a3      	strh	r3, [r4, #12]
 80118ba:	9b01      	ldr	r3, [sp, #4]
 80118bc:	6126      	str	r6, [r4, #16]
 80118be:	18f6      	adds	r6, r6, r3
 80118c0:	6026      	str	r6, [r4, #0]
 80118c2:	003e      	movs	r6, r7
 80118c4:	6165      	str	r5, [r4, #20]
 80118c6:	1aed      	subs	r5, r5, r3
 80118c8:	60a5      	str	r5, [r4, #8]
 80118ca:	42be      	cmp	r6, r7
 80118cc:	d900      	bls.n	80118d0 <__ssputs_r+0x78>
 80118ce:	003e      	movs	r6, r7
 80118d0:	0032      	movs	r2, r6
 80118d2:	9903      	ldr	r1, [sp, #12]
 80118d4:	6820      	ldr	r0, [r4, #0]
 80118d6:	f000 f9ce 	bl	8011c76 <memmove>
 80118da:	2000      	movs	r0, #0
 80118dc:	68a3      	ldr	r3, [r4, #8]
 80118de:	1b9b      	subs	r3, r3, r6
 80118e0:	60a3      	str	r3, [r4, #8]
 80118e2:	6823      	ldr	r3, [r4, #0]
 80118e4:	199b      	adds	r3, r3, r6
 80118e6:	6023      	str	r3, [r4, #0]
 80118e8:	b005      	add	sp, #20
 80118ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118ec:	002a      	movs	r2, r5
 80118ee:	9802      	ldr	r0, [sp, #8]
 80118f0:	f000 fa43 	bl	8011d7a <_realloc_r>
 80118f4:	1e06      	subs	r6, r0, #0
 80118f6:	d1e0      	bne.n	80118ba <__ssputs_r+0x62>
 80118f8:	6921      	ldr	r1, [r4, #16]
 80118fa:	9802      	ldr	r0, [sp, #8]
 80118fc:	f7ff fb02 	bl	8010f04 <_free_r>
 8011900:	230c      	movs	r3, #12
 8011902:	2001      	movs	r0, #1
 8011904:	9a02      	ldr	r2, [sp, #8]
 8011906:	4240      	negs	r0, r0
 8011908:	6013      	str	r3, [r2, #0]
 801190a:	89a2      	ldrh	r2, [r4, #12]
 801190c:	3334      	adds	r3, #52	@ 0x34
 801190e:	4313      	orrs	r3, r2
 8011910:	81a3      	strh	r3, [r4, #12]
 8011912:	e7e9      	b.n	80118e8 <__ssputs_r+0x90>
 8011914:	fffffb7f 	.word	0xfffffb7f

08011918 <_svfiprintf_r>:
 8011918:	b5f0      	push	{r4, r5, r6, r7, lr}
 801191a:	b0a1      	sub	sp, #132	@ 0x84
 801191c:	9003      	str	r0, [sp, #12]
 801191e:	001d      	movs	r5, r3
 8011920:	898b      	ldrh	r3, [r1, #12]
 8011922:	000f      	movs	r7, r1
 8011924:	0016      	movs	r6, r2
 8011926:	061b      	lsls	r3, r3, #24
 8011928:	d511      	bpl.n	801194e <_svfiprintf_r+0x36>
 801192a:	690b      	ldr	r3, [r1, #16]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d10e      	bne.n	801194e <_svfiprintf_r+0x36>
 8011930:	2140      	movs	r1, #64	@ 0x40
 8011932:	f7ff fb5d 	bl	8010ff0 <_malloc_r>
 8011936:	6038      	str	r0, [r7, #0]
 8011938:	6138      	str	r0, [r7, #16]
 801193a:	2800      	cmp	r0, #0
 801193c:	d105      	bne.n	801194a <_svfiprintf_r+0x32>
 801193e:	230c      	movs	r3, #12
 8011940:	9a03      	ldr	r2, [sp, #12]
 8011942:	6013      	str	r3, [r2, #0]
 8011944:	2001      	movs	r0, #1
 8011946:	4240      	negs	r0, r0
 8011948:	e0cf      	b.n	8011aea <_svfiprintf_r+0x1d2>
 801194a:	2340      	movs	r3, #64	@ 0x40
 801194c:	617b      	str	r3, [r7, #20]
 801194e:	2300      	movs	r3, #0
 8011950:	ac08      	add	r4, sp, #32
 8011952:	6163      	str	r3, [r4, #20]
 8011954:	3320      	adds	r3, #32
 8011956:	7663      	strb	r3, [r4, #25]
 8011958:	3310      	adds	r3, #16
 801195a:	76a3      	strb	r3, [r4, #26]
 801195c:	9507      	str	r5, [sp, #28]
 801195e:	0035      	movs	r5, r6
 8011960:	782b      	ldrb	r3, [r5, #0]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d001      	beq.n	801196a <_svfiprintf_r+0x52>
 8011966:	2b25      	cmp	r3, #37	@ 0x25
 8011968:	d148      	bne.n	80119fc <_svfiprintf_r+0xe4>
 801196a:	1bab      	subs	r3, r5, r6
 801196c:	9305      	str	r3, [sp, #20]
 801196e:	42b5      	cmp	r5, r6
 8011970:	d00b      	beq.n	801198a <_svfiprintf_r+0x72>
 8011972:	0032      	movs	r2, r6
 8011974:	0039      	movs	r1, r7
 8011976:	9803      	ldr	r0, [sp, #12]
 8011978:	f7ff ff6e 	bl	8011858 <__ssputs_r>
 801197c:	3001      	adds	r0, #1
 801197e:	d100      	bne.n	8011982 <_svfiprintf_r+0x6a>
 8011980:	e0ae      	b.n	8011ae0 <_svfiprintf_r+0x1c8>
 8011982:	6963      	ldr	r3, [r4, #20]
 8011984:	9a05      	ldr	r2, [sp, #20]
 8011986:	189b      	adds	r3, r3, r2
 8011988:	6163      	str	r3, [r4, #20]
 801198a:	782b      	ldrb	r3, [r5, #0]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d100      	bne.n	8011992 <_svfiprintf_r+0x7a>
 8011990:	e0a6      	b.n	8011ae0 <_svfiprintf_r+0x1c8>
 8011992:	2201      	movs	r2, #1
 8011994:	2300      	movs	r3, #0
 8011996:	4252      	negs	r2, r2
 8011998:	6062      	str	r2, [r4, #4]
 801199a:	a904      	add	r1, sp, #16
 801199c:	3254      	adds	r2, #84	@ 0x54
 801199e:	1852      	adds	r2, r2, r1
 80119a0:	1c6e      	adds	r6, r5, #1
 80119a2:	6023      	str	r3, [r4, #0]
 80119a4:	60e3      	str	r3, [r4, #12]
 80119a6:	60a3      	str	r3, [r4, #8]
 80119a8:	7013      	strb	r3, [r2, #0]
 80119aa:	65a3      	str	r3, [r4, #88]	@ 0x58
 80119ac:	4b54      	ldr	r3, [pc, #336]	@ (8011b00 <_svfiprintf_r+0x1e8>)
 80119ae:	2205      	movs	r2, #5
 80119b0:	0018      	movs	r0, r3
 80119b2:	7831      	ldrb	r1, [r6, #0]
 80119b4:	9305      	str	r3, [sp, #20]
 80119b6:	f7fe fc0e 	bl	80101d6 <memchr>
 80119ba:	1c75      	adds	r5, r6, #1
 80119bc:	2800      	cmp	r0, #0
 80119be:	d11f      	bne.n	8011a00 <_svfiprintf_r+0xe8>
 80119c0:	6822      	ldr	r2, [r4, #0]
 80119c2:	06d3      	lsls	r3, r2, #27
 80119c4:	d504      	bpl.n	80119d0 <_svfiprintf_r+0xb8>
 80119c6:	2353      	movs	r3, #83	@ 0x53
 80119c8:	a904      	add	r1, sp, #16
 80119ca:	185b      	adds	r3, r3, r1
 80119cc:	2120      	movs	r1, #32
 80119ce:	7019      	strb	r1, [r3, #0]
 80119d0:	0713      	lsls	r3, r2, #28
 80119d2:	d504      	bpl.n	80119de <_svfiprintf_r+0xc6>
 80119d4:	2353      	movs	r3, #83	@ 0x53
 80119d6:	a904      	add	r1, sp, #16
 80119d8:	185b      	adds	r3, r3, r1
 80119da:	212b      	movs	r1, #43	@ 0x2b
 80119dc:	7019      	strb	r1, [r3, #0]
 80119de:	7833      	ldrb	r3, [r6, #0]
 80119e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80119e2:	d016      	beq.n	8011a12 <_svfiprintf_r+0xfa>
 80119e4:	0035      	movs	r5, r6
 80119e6:	2100      	movs	r1, #0
 80119e8:	200a      	movs	r0, #10
 80119ea:	68e3      	ldr	r3, [r4, #12]
 80119ec:	782a      	ldrb	r2, [r5, #0]
 80119ee:	1c6e      	adds	r6, r5, #1
 80119f0:	3a30      	subs	r2, #48	@ 0x30
 80119f2:	2a09      	cmp	r2, #9
 80119f4:	d950      	bls.n	8011a98 <_svfiprintf_r+0x180>
 80119f6:	2900      	cmp	r1, #0
 80119f8:	d111      	bne.n	8011a1e <_svfiprintf_r+0x106>
 80119fa:	e017      	b.n	8011a2c <_svfiprintf_r+0x114>
 80119fc:	3501      	adds	r5, #1
 80119fe:	e7af      	b.n	8011960 <_svfiprintf_r+0x48>
 8011a00:	9b05      	ldr	r3, [sp, #20]
 8011a02:	6822      	ldr	r2, [r4, #0]
 8011a04:	1ac0      	subs	r0, r0, r3
 8011a06:	2301      	movs	r3, #1
 8011a08:	4083      	lsls	r3, r0
 8011a0a:	4313      	orrs	r3, r2
 8011a0c:	002e      	movs	r6, r5
 8011a0e:	6023      	str	r3, [r4, #0]
 8011a10:	e7cc      	b.n	80119ac <_svfiprintf_r+0x94>
 8011a12:	9b07      	ldr	r3, [sp, #28]
 8011a14:	1d19      	adds	r1, r3, #4
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	9107      	str	r1, [sp, #28]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	db01      	blt.n	8011a22 <_svfiprintf_r+0x10a>
 8011a1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a20:	e004      	b.n	8011a2c <_svfiprintf_r+0x114>
 8011a22:	425b      	negs	r3, r3
 8011a24:	60e3      	str	r3, [r4, #12]
 8011a26:	2302      	movs	r3, #2
 8011a28:	4313      	orrs	r3, r2
 8011a2a:	6023      	str	r3, [r4, #0]
 8011a2c:	782b      	ldrb	r3, [r5, #0]
 8011a2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011a30:	d10c      	bne.n	8011a4c <_svfiprintf_r+0x134>
 8011a32:	786b      	ldrb	r3, [r5, #1]
 8011a34:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a36:	d134      	bne.n	8011aa2 <_svfiprintf_r+0x18a>
 8011a38:	9b07      	ldr	r3, [sp, #28]
 8011a3a:	3502      	adds	r5, #2
 8011a3c:	1d1a      	adds	r2, r3, #4
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	9207      	str	r2, [sp, #28]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	da01      	bge.n	8011a4a <_svfiprintf_r+0x132>
 8011a46:	2301      	movs	r3, #1
 8011a48:	425b      	negs	r3, r3
 8011a4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a4c:	4e2d      	ldr	r6, [pc, #180]	@ (8011b04 <_svfiprintf_r+0x1ec>)
 8011a4e:	2203      	movs	r2, #3
 8011a50:	0030      	movs	r0, r6
 8011a52:	7829      	ldrb	r1, [r5, #0]
 8011a54:	f7fe fbbf 	bl	80101d6 <memchr>
 8011a58:	2800      	cmp	r0, #0
 8011a5a:	d006      	beq.n	8011a6a <_svfiprintf_r+0x152>
 8011a5c:	2340      	movs	r3, #64	@ 0x40
 8011a5e:	1b80      	subs	r0, r0, r6
 8011a60:	4083      	lsls	r3, r0
 8011a62:	6822      	ldr	r2, [r4, #0]
 8011a64:	3501      	adds	r5, #1
 8011a66:	4313      	orrs	r3, r2
 8011a68:	6023      	str	r3, [r4, #0]
 8011a6a:	7829      	ldrb	r1, [r5, #0]
 8011a6c:	2206      	movs	r2, #6
 8011a6e:	4826      	ldr	r0, [pc, #152]	@ (8011b08 <_svfiprintf_r+0x1f0>)
 8011a70:	1c6e      	adds	r6, r5, #1
 8011a72:	7621      	strb	r1, [r4, #24]
 8011a74:	f7fe fbaf 	bl	80101d6 <memchr>
 8011a78:	2800      	cmp	r0, #0
 8011a7a:	d038      	beq.n	8011aee <_svfiprintf_r+0x1d6>
 8011a7c:	4b23      	ldr	r3, [pc, #140]	@ (8011b0c <_svfiprintf_r+0x1f4>)
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d122      	bne.n	8011ac8 <_svfiprintf_r+0x1b0>
 8011a82:	2207      	movs	r2, #7
 8011a84:	9b07      	ldr	r3, [sp, #28]
 8011a86:	3307      	adds	r3, #7
 8011a88:	4393      	bics	r3, r2
 8011a8a:	3308      	adds	r3, #8
 8011a8c:	9307      	str	r3, [sp, #28]
 8011a8e:	6963      	ldr	r3, [r4, #20]
 8011a90:	9a04      	ldr	r2, [sp, #16]
 8011a92:	189b      	adds	r3, r3, r2
 8011a94:	6163      	str	r3, [r4, #20]
 8011a96:	e762      	b.n	801195e <_svfiprintf_r+0x46>
 8011a98:	4343      	muls	r3, r0
 8011a9a:	0035      	movs	r5, r6
 8011a9c:	2101      	movs	r1, #1
 8011a9e:	189b      	adds	r3, r3, r2
 8011aa0:	e7a4      	b.n	80119ec <_svfiprintf_r+0xd4>
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	200a      	movs	r0, #10
 8011aa6:	0019      	movs	r1, r3
 8011aa8:	3501      	adds	r5, #1
 8011aaa:	6063      	str	r3, [r4, #4]
 8011aac:	782a      	ldrb	r2, [r5, #0]
 8011aae:	1c6e      	adds	r6, r5, #1
 8011ab0:	3a30      	subs	r2, #48	@ 0x30
 8011ab2:	2a09      	cmp	r2, #9
 8011ab4:	d903      	bls.n	8011abe <_svfiprintf_r+0x1a6>
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d0c8      	beq.n	8011a4c <_svfiprintf_r+0x134>
 8011aba:	9109      	str	r1, [sp, #36]	@ 0x24
 8011abc:	e7c6      	b.n	8011a4c <_svfiprintf_r+0x134>
 8011abe:	4341      	muls	r1, r0
 8011ac0:	0035      	movs	r5, r6
 8011ac2:	2301      	movs	r3, #1
 8011ac4:	1889      	adds	r1, r1, r2
 8011ac6:	e7f1      	b.n	8011aac <_svfiprintf_r+0x194>
 8011ac8:	aa07      	add	r2, sp, #28
 8011aca:	9200      	str	r2, [sp, #0]
 8011acc:	0021      	movs	r1, r4
 8011ace:	003a      	movs	r2, r7
 8011ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8011b10 <_svfiprintf_r+0x1f8>)
 8011ad2:	9803      	ldr	r0, [sp, #12]
 8011ad4:	f7fd fdfe 	bl	800f6d4 <_printf_float>
 8011ad8:	9004      	str	r0, [sp, #16]
 8011ada:	9b04      	ldr	r3, [sp, #16]
 8011adc:	3301      	adds	r3, #1
 8011ade:	d1d6      	bne.n	8011a8e <_svfiprintf_r+0x176>
 8011ae0:	89bb      	ldrh	r3, [r7, #12]
 8011ae2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8011ae4:	065b      	lsls	r3, r3, #25
 8011ae6:	d500      	bpl.n	8011aea <_svfiprintf_r+0x1d2>
 8011ae8:	e72c      	b.n	8011944 <_svfiprintf_r+0x2c>
 8011aea:	b021      	add	sp, #132	@ 0x84
 8011aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011aee:	aa07      	add	r2, sp, #28
 8011af0:	9200      	str	r2, [sp, #0]
 8011af2:	0021      	movs	r1, r4
 8011af4:	003a      	movs	r2, r7
 8011af6:	4b06      	ldr	r3, [pc, #24]	@ (8011b10 <_svfiprintf_r+0x1f8>)
 8011af8:	9803      	ldr	r0, [sp, #12]
 8011afa:	f7fe f899 	bl	800fc30 <_printf_i>
 8011afe:	e7eb      	b.n	8011ad8 <_svfiprintf_r+0x1c0>
 8011b00:	08012928 	.word	0x08012928
 8011b04:	0801292e 	.word	0x0801292e
 8011b08:	08012932 	.word	0x08012932
 8011b0c:	0800f6d5 	.word	0x0800f6d5
 8011b10:	08011859 	.word	0x08011859

08011b14 <__sflush_r>:
 8011b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b16:	220c      	movs	r2, #12
 8011b18:	5e8b      	ldrsh	r3, [r1, r2]
 8011b1a:	0005      	movs	r5, r0
 8011b1c:	000c      	movs	r4, r1
 8011b1e:	071a      	lsls	r2, r3, #28
 8011b20:	d456      	bmi.n	8011bd0 <__sflush_r+0xbc>
 8011b22:	684a      	ldr	r2, [r1, #4]
 8011b24:	2a00      	cmp	r2, #0
 8011b26:	dc02      	bgt.n	8011b2e <__sflush_r+0x1a>
 8011b28:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8011b2a:	2a00      	cmp	r2, #0
 8011b2c:	dd4e      	ble.n	8011bcc <__sflush_r+0xb8>
 8011b2e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8011b30:	2f00      	cmp	r7, #0
 8011b32:	d04b      	beq.n	8011bcc <__sflush_r+0xb8>
 8011b34:	2200      	movs	r2, #0
 8011b36:	2080      	movs	r0, #128	@ 0x80
 8011b38:	682e      	ldr	r6, [r5, #0]
 8011b3a:	602a      	str	r2, [r5, #0]
 8011b3c:	001a      	movs	r2, r3
 8011b3e:	0140      	lsls	r0, r0, #5
 8011b40:	6a21      	ldr	r1, [r4, #32]
 8011b42:	4002      	ands	r2, r0
 8011b44:	4203      	tst	r3, r0
 8011b46:	d033      	beq.n	8011bb0 <__sflush_r+0x9c>
 8011b48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011b4a:	89a3      	ldrh	r3, [r4, #12]
 8011b4c:	075b      	lsls	r3, r3, #29
 8011b4e:	d506      	bpl.n	8011b5e <__sflush_r+0x4a>
 8011b50:	6863      	ldr	r3, [r4, #4]
 8011b52:	1ad2      	subs	r2, r2, r3
 8011b54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d001      	beq.n	8011b5e <__sflush_r+0x4a>
 8011b5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011b5c:	1ad2      	subs	r2, r2, r3
 8011b5e:	2300      	movs	r3, #0
 8011b60:	0028      	movs	r0, r5
 8011b62:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8011b64:	6a21      	ldr	r1, [r4, #32]
 8011b66:	47b8      	blx	r7
 8011b68:	89a2      	ldrh	r2, [r4, #12]
 8011b6a:	1c43      	adds	r3, r0, #1
 8011b6c:	d106      	bne.n	8011b7c <__sflush_r+0x68>
 8011b6e:	6829      	ldr	r1, [r5, #0]
 8011b70:	291d      	cmp	r1, #29
 8011b72:	d846      	bhi.n	8011c02 <__sflush_r+0xee>
 8011b74:	4b29      	ldr	r3, [pc, #164]	@ (8011c1c <__sflush_r+0x108>)
 8011b76:	410b      	asrs	r3, r1
 8011b78:	07db      	lsls	r3, r3, #31
 8011b7a:	d442      	bmi.n	8011c02 <__sflush_r+0xee>
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	6063      	str	r3, [r4, #4]
 8011b80:	6923      	ldr	r3, [r4, #16]
 8011b82:	6023      	str	r3, [r4, #0]
 8011b84:	04d2      	lsls	r2, r2, #19
 8011b86:	d505      	bpl.n	8011b94 <__sflush_r+0x80>
 8011b88:	1c43      	adds	r3, r0, #1
 8011b8a:	d102      	bne.n	8011b92 <__sflush_r+0x7e>
 8011b8c:	682b      	ldr	r3, [r5, #0]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d100      	bne.n	8011b94 <__sflush_r+0x80>
 8011b92:	6560      	str	r0, [r4, #84]	@ 0x54
 8011b94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011b96:	602e      	str	r6, [r5, #0]
 8011b98:	2900      	cmp	r1, #0
 8011b9a:	d017      	beq.n	8011bcc <__sflush_r+0xb8>
 8011b9c:	0023      	movs	r3, r4
 8011b9e:	3344      	adds	r3, #68	@ 0x44
 8011ba0:	4299      	cmp	r1, r3
 8011ba2:	d002      	beq.n	8011baa <__sflush_r+0x96>
 8011ba4:	0028      	movs	r0, r5
 8011ba6:	f7ff f9ad 	bl	8010f04 <_free_r>
 8011baa:	2300      	movs	r3, #0
 8011bac:	6363      	str	r3, [r4, #52]	@ 0x34
 8011bae:	e00d      	b.n	8011bcc <__sflush_r+0xb8>
 8011bb0:	2301      	movs	r3, #1
 8011bb2:	0028      	movs	r0, r5
 8011bb4:	47b8      	blx	r7
 8011bb6:	0002      	movs	r2, r0
 8011bb8:	1c43      	adds	r3, r0, #1
 8011bba:	d1c6      	bne.n	8011b4a <__sflush_r+0x36>
 8011bbc:	682b      	ldr	r3, [r5, #0]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d0c3      	beq.n	8011b4a <__sflush_r+0x36>
 8011bc2:	2b1d      	cmp	r3, #29
 8011bc4:	d001      	beq.n	8011bca <__sflush_r+0xb6>
 8011bc6:	2b16      	cmp	r3, #22
 8011bc8:	d11a      	bne.n	8011c00 <__sflush_r+0xec>
 8011bca:	602e      	str	r6, [r5, #0]
 8011bcc:	2000      	movs	r0, #0
 8011bce:	e01e      	b.n	8011c0e <__sflush_r+0xfa>
 8011bd0:	690e      	ldr	r6, [r1, #16]
 8011bd2:	2e00      	cmp	r6, #0
 8011bd4:	d0fa      	beq.n	8011bcc <__sflush_r+0xb8>
 8011bd6:	680f      	ldr	r7, [r1, #0]
 8011bd8:	600e      	str	r6, [r1, #0]
 8011bda:	1bba      	subs	r2, r7, r6
 8011bdc:	9201      	str	r2, [sp, #4]
 8011bde:	2200      	movs	r2, #0
 8011be0:	079b      	lsls	r3, r3, #30
 8011be2:	d100      	bne.n	8011be6 <__sflush_r+0xd2>
 8011be4:	694a      	ldr	r2, [r1, #20]
 8011be6:	60a2      	str	r2, [r4, #8]
 8011be8:	9b01      	ldr	r3, [sp, #4]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	ddee      	ble.n	8011bcc <__sflush_r+0xb8>
 8011bee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8011bf0:	0032      	movs	r2, r6
 8011bf2:	001f      	movs	r7, r3
 8011bf4:	0028      	movs	r0, r5
 8011bf6:	9b01      	ldr	r3, [sp, #4]
 8011bf8:	6a21      	ldr	r1, [r4, #32]
 8011bfa:	47b8      	blx	r7
 8011bfc:	2800      	cmp	r0, #0
 8011bfe:	dc07      	bgt.n	8011c10 <__sflush_r+0xfc>
 8011c00:	89a2      	ldrh	r2, [r4, #12]
 8011c02:	2340      	movs	r3, #64	@ 0x40
 8011c04:	2001      	movs	r0, #1
 8011c06:	4313      	orrs	r3, r2
 8011c08:	b21b      	sxth	r3, r3
 8011c0a:	81a3      	strh	r3, [r4, #12]
 8011c0c:	4240      	negs	r0, r0
 8011c0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011c10:	9b01      	ldr	r3, [sp, #4]
 8011c12:	1836      	adds	r6, r6, r0
 8011c14:	1a1b      	subs	r3, r3, r0
 8011c16:	9301      	str	r3, [sp, #4]
 8011c18:	e7e6      	b.n	8011be8 <__sflush_r+0xd4>
 8011c1a:	46c0      	nop			@ (mov r8, r8)
 8011c1c:	dfbffffe 	.word	0xdfbffffe

08011c20 <_fflush_r>:
 8011c20:	690b      	ldr	r3, [r1, #16]
 8011c22:	b570      	push	{r4, r5, r6, lr}
 8011c24:	0005      	movs	r5, r0
 8011c26:	000c      	movs	r4, r1
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d102      	bne.n	8011c32 <_fflush_r+0x12>
 8011c2c:	2500      	movs	r5, #0
 8011c2e:	0028      	movs	r0, r5
 8011c30:	bd70      	pop	{r4, r5, r6, pc}
 8011c32:	2800      	cmp	r0, #0
 8011c34:	d004      	beq.n	8011c40 <_fflush_r+0x20>
 8011c36:	6a03      	ldr	r3, [r0, #32]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d101      	bne.n	8011c40 <_fflush_r+0x20>
 8011c3c:	f7fe f996 	bl	800ff6c <__sinit>
 8011c40:	220c      	movs	r2, #12
 8011c42:	5ea3      	ldrsh	r3, [r4, r2]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d0f1      	beq.n	8011c2c <_fflush_r+0xc>
 8011c48:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011c4a:	07d2      	lsls	r2, r2, #31
 8011c4c:	d404      	bmi.n	8011c58 <_fflush_r+0x38>
 8011c4e:	059b      	lsls	r3, r3, #22
 8011c50:	d402      	bmi.n	8011c58 <_fflush_r+0x38>
 8011c52:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c54:	f7fe fabd 	bl	80101d2 <__retarget_lock_acquire_recursive>
 8011c58:	0028      	movs	r0, r5
 8011c5a:	0021      	movs	r1, r4
 8011c5c:	f7ff ff5a 	bl	8011b14 <__sflush_r>
 8011c60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011c62:	0005      	movs	r5, r0
 8011c64:	07db      	lsls	r3, r3, #31
 8011c66:	d4e2      	bmi.n	8011c2e <_fflush_r+0xe>
 8011c68:	89a3      	ldrh	r3, [r4, #12]
 8011c6a:	059b      	lsls	r3, r3, #22
 8011c6c:	d4df      	bmi.n	8011c2e <_fflush_r+0xe>
 8011c6e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c70:	f7fe fab0 	bl	80101d4 <__retarget_lock_release_recursive>
 8011c74:	e7db      	b.n	8011c2e <_fflush_r+0xe>

08011c76 <memmove>:
 8011c76:	b510      	push	{r4, lr}
 8011c78:	4288      	cmp	r0, r1
 8011c7a:	d806      	bhi.n	8011c8a <memmove+0x14>
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	429a      	cmp	r2, r3
 8011c80:	d008      	beq.n	8011c94 <memmove+0x1e>
 8011c82:	5ccc      	ldrb	r4, [r1, r3]
 8011c84:	54c4      	strb	r4, [r0, r3]
 8011c86:	3301      	adds	r3, #1
 8011c88:	e7f9      	b.n	8011c7e <memmove+0x8>
 8011c8a:	188b      	adds	r3, r1, r2
 8011c8c:	4298      	cmp	r0, r3
 8011c8e:	d2f5      	bcs.n	8011c7c <memmove+0x6>
 8011c90:	3a01      	subs	r2, #1
 8011c92:	d200      	bcs.n	8011c96 <memmove+0x20>
 8011c94:	bd10      	pop	{r4, pc}
 8011c96:	5c8b      	ldrb	r3, [r1, r2]
 8011c98:	5483      	strb	r3, [r0, r2]
 8011c9a:	e7f9      	b.n	8011c90 <memmove+0x1a>

08011c9c <_sbrk_r>:
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	b570      	push	{r4, r5, r6, lr}
 8011ca0:	4d06      	ldr	r5, [pc, #24]	@ (8011cbc <_sbrk_r+0x20>)
 8011ca2:	0004      	movs	r4, r0
 8011ca4:	0008      	movs	r0, r1
 8011ca6:	602b      	str	r3, [r5, #0]
 8011ca8:	f7f1 fc70 	bl	800358c <_sbrk>
 8011cac:	1c43      	adds	r3, r0, #1
 8011cae:	d103      	bne.n	8011cb8 <_sbrk_r+0x1c>
 8011cb0:	682b      	ldr	r3, [r5, #0]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d000      	beq.n	8011cb8 <_sbrk_r+0x1c>
 8011cb6:	6023      	str	r3, [r4, #0]
 8011cb8:	bd70      	pop	{r4, r5, r6, pc}
 8011cba:	46c0      	nop			@ (mov r8, r8)
 8011cbc:	20001db8 	.word	0x20001db8

08011cc0 <__assert_func>:
 8011cc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011cc2:	0014      	movs	r4, r2
 8011cc4:	001a      	movs	r2, r3
 8011cc6:	4b09      	ldr	r3, [pc, #36]	@ (8011cec <__assert_func+0x2c>)
 8011cc8:	0005      	movs	r5, r0
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	000e      	movs	r6, r1
 8011cce:	68d8      	ldr	r0, [r3, #12]
 8011cd0:	4b07      	ldr	r3, [pc, #28]	@ (8011cf0 <__assert_func+0x30>)
 8011cd2:	2c00      	cmp	r4, #0
 8011cd4:	d101      	bne.n	8011cda <__assert_func+0x1a>
 8011cd6:	4b07      	ldr	r3, [pc, #28]	@ (8011cf4 <__assert_func+0x34>)
 8011cd8:	001c      	movs	r4, r3
 8011cda:	4907      	ldr	r1, [pc, #28]	@ (8011cf8 <__assert_func+0x38>)
 8011cdc:	9301      	str	r3, [sp, #4]
 8011cde:	9402      	str	r4, [sp, #8]
 8011ce0:	002b      	movs	r3, r5
 8011ce2:	9600      	str	r6, [sp, #0]
 8011ce4:	f000 f886 	bl	8011df4 <fiprintf>
 8011ce8:	f000 f894 	bl	8011e14 <abort>
 8011cec:	200001e8 	.word	0x200001e8
 8011cf0:	08012943 	.word	0x08012943
 8011cf4:	0801297e 	.word	0x0801297e
 8011cf8:	08012950 	.word	0x08012950

08011cfc <_calloc_r>:
 8011cfc:	b570      	push	{r4, r5, r6, lr}
 8011cfe:	0c0b      	lsrs	r3, r1, #16
 8011d00:	0c15      	lsrs	r5, r2, #16
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d11e      	bne.n	8011d44 <_calloc_r+0x48>
 8011d06:	2d00      	cmp	r5, #0
 8011d08:	d10c      	bne.n	8011d24 <_calloc_r+0x28>
 8011d0a:	b289      	uxth	r1, r1
 8011d0c:	b294      	uxth	r4, r2
 8011d0e:	434c      	muls	r4, r1
 8011d10:	0021      	movs	r1, r4
 8011d12:	f7ff f96d 	bl	8010ff0 <_malloc_r>
 8011d16:	1e05      	subs	r5, r0, #0
 8011d18:	d01a      	beq.n	8011d50 <_calloc_r+0x54>
 8011d1a:	0022      	movs	r2, r4
 8011d1c:	2100      	movs	r1, #0
 8011d1e:	f7fe f9d3 	bl	80100c8 <memset>
 8011d22:	e016      	b.n	8011d52 <_calloc_r+0x56>
 8011d24:	1c2b      	adds	r3, r5, #0
 8011d26:	1c0c      	adds	r4, r1, #0
 8011d28:	b289      	uxth	r1, r1
 8011d2a:	b292      	uxth	r2, r2
 8011d2c:	434a      	muls	r2, r1
 8011d2e:	b29b      	uxth	r3, r3
 8011d30:	b2a1      	uxth	r1, r4
 8011d32:	4359      	muls	r1, r3
 8011d34:	0c14      	lsrs	r4, r2, #16
 8011d36:	190c      	adds	r4, r1, r4
 8011d38:	0c23      	lsrs	r3, r4, #16
 8011d3a:	d107      	bne.n	8011d4c <_calloc_r+0x50>
 8011d3c:	0424      	lsls	r4, r4, #16
 8011d3e:	b292      	uxth	r2, r2
 8011d40:	4314      	orrs	r4, r2
 8011d42:	e7e5      	b.n	8011d10 <_calloc_r+0x14>
 8011d44:	2d00      	cmp	r5, #0
 8011d46:	d101      	bne.n	8011d4c <_calloc_r+0x50>
 8011d48:	1c14      	adds	r4, r2, #0
 8011d4a:	e7ed      	b.n	8011d28 <_calloc_r+0x2c>
 8011d4c:	230c      	movs	r3, #12
 8011d4e:	6003      	str	r3, [r0, #0]
 8011d50:	2500      	movs	r5, #0
 8011d52:	0028      	movs	r0, r5
 8011d54:	bd70      	pop	{r4, r5, r6, pc}

08011d56 <__ascii_mbtowc>:
 8011d56:	b082      	sub	sp, #8
 8011d58:	2900      	cmp	r1, #0
 8011d5a:	d100      	bne.n	8011d5e <__ascii_mbtowc+0x8>
 8011d5c:	a901      	add	r1, sp, #4
 8011d5e:	1e10      	subs	r0, r2, #0
 8011d60:	d006      	beq.n	8011d70 <__ascii_mbtowc+0x1a>
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d006      	beq.n	8011d74 <__ascii_mbtowc+0x1e>
 8011d66:	7813      	ldrb	r3, [r2, #0]
 8011d68:	600b      	str	r3, [r1, #0]
 8011d6a:	7810      	ldrb	r0, [r2, #0]
 8011d6c:	1e43      	subs	r3, r0, #1
 8011d6e:	4198      	sbcs	r0, r3
 8011d70:	b002      	add	sp, #8
 8011d72:	4770      	bx	lr
 8011d74:	2002      	movs	r0, #2
 8011d76:	4240      	negs	r0, r0
 8011d78:	e7fa      	b.n	8011d70 <__ascii_mbtowc+0x1a>

08011d7a <_realloc_r>:
 8011d7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011d7c:	0006      	movs	r6, r0
 8011d7e:	000c      	movs	r4, r1
 8011d80:	0015      	movs	r5, r2
 8011d82:	2900      	cmp	r1, #0
 8011d84:	d105      	bne.n	8011d92 <_realloc_r+0x18>
 8011d86:	0011      	movs	r1, r2
 8011d88:	f7ff f932 	bl	8010ff0 <_malloc_r>
 8011d8c:	0004      	movs	r4, r0
 8011d8e:	0020      	movs	r0, r4
 8011d90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011d92:	2a00      	cmp	r2, #0
 8011d94:	d103      	bne.n	8011d9e <_realloc_r+0x24>
 8011d96:	f7ff f8b5 	bl	8010f04 <_free_r>
 8011d9a:	2400      	movs	r4, #0
 8011d9c:	e7f7      	b.n	8011d8e <_realloc_r+0x14>
 8011d9e:	f000 f840 	bl	8011e22 <_malloc_usable_size_r>
 8011da2:	0007      	movs	r7, r0
 8011da4:	4285      	cmp	r5, r0
 8011da6:	d802      	bhi.n	8011dae <_realloc_r+0x34>
 8011da8:	0843      	lsrs	r3, r0, #1
 8011daa:	42ab      	cmp	r3, r5
 8011dac:	d3ef      	bcc.n	8011d8e <_realloc_r+0x14>
 8011dae:	0029      	movs	r1, r5
 8011db0:	0030      	movs	r0, r6
 8011db2:	f7ff f91d 	bl	8010ff0 <_malloc_r>
 8011db6:	9001      	str	r0, [sp, #4]
 8011db8:	2800      	cmp	r0, #0
 8011dba:	d0ee      	beq.n	8011d9a <_realloc_r+0x20>
 8011dbc:	002a      	movs	r2, r5
 8011dbe:	42bd      	cmp	r5, r7
 8011dc0:	d900      	bls.n	8011dc4 <_realloc_r+0x4a>
 8011dc2:	003a      	movs	r2, r7
 8011dc4:	0021      	movs	r1, r4
 8011dc6:	9801      	ldr	r0, [sp, #4]
 8011dc8:	f7fe fa10 	bl	80101ec <memcpy>
 8011dcc:	0021      	movs	r1, r4
 8011dce:	0030      	movs	r0, r6
 8011dd0:	f7ff f898 	bl	8010f04 <_free_r>
 8011dd4:	9c01      	ldr	r4, [sp, #4]
 8011dd6:	e7da      	b.n	8011d8e <_realloc_r+0x14>

08011dd8 <__ascii_wctomb>:
 8011dd8:	0003      	movs	r3, r0
 8011dda:	1e08      	subs	r0, r1, #0
 8011ddc:	d005      	beq.n	8011dea <__ascii_wctomb+0x12>
 8011dde:	2aff      	cmp	r2, #255	@ 0xff
 8011de0:	d904      	bls.n	8011dec <__ascii_wctomb+0x14>
 8011de2:	228a      	movs	r2, #138	@ 0x8a
 8011de4:	2001      	movs	r0, #1
 8011de6:	601a      	str	r2, [r3, #0]
 8011de8:	4240      	negs	r0, r0
 8011dea:	4770      	bx	lr
 8011dec:	2001      	movs	r0, #1
 8011dee:	700a      	strb	r2, [r1, #0]
 8011df0:	e7fb      	b.n	8011dea <__ascii_wctomb+0x12>
	...

08011df4 <fiprintf>:
 8011df4:	b40e      	push	{r1, r2, r3}
 8011df6:	b517      	push	{r0, r1, r2, r4, lr}
 8011df8:	4c05      	ldr	r4, [pc, #20]	@ (8011e10 <fiprintf+0x1c>)
 8011dfa:	ab05      	add	r3, sp, #20
 8011dfc:	cb04      	ldmia	r3!, {r2}
 8011dfe:	0001      	movs	r1, r0
 8011e00:	6820      	ldr	r0, [r4, #0]
 8011e02:	9301      	str	r3, [sp, #4]
 8011e04:	f000 f83c 	bl	8011e80 <_vfiprintf_r>
 8011e08:	bc1e      	pop	{r1, r2, r3, r4}
 8011e0a:	bc08      	pop	{r3}
 8011e0c:	b003      	add	sp, #12
 8011e0e:	4718      	bx	r3
 8011e10:	200001e8 	.word	0x200001e8

08011e14 <abort>:
 8011e14:	2006      	movs	r0, #6
 8011e16:	b510      	push	{r4, lr}
 8011e18:	f000 fa18 	bl	801224c <raise>
 8011e1c:	2001      	movs	r0, #1
 8011e1e:	f7f1 fb43 	bl	80034a8 <_exit>

08011e22 <_malloc_usable_size_r>:
 8011e22:	1f0b      	subs	r3, r1, #4
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	1f18      	subs	r0, r3, #4
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	da01      	bge.n	8011e30 <_malloc_usable_size_r+0xe>
 8011e2c:	580b      	ldr	r3, [r1, r0]
 8011e2e:	18c0      	adds	r0, r0, r3
 8011e30:	4770      	bx	lr

08011e32 <__sfputc_r>:
 8011e32:	6893      	ldr	r3, [r2, #8]
 8011e34:	b510      	push	{r4, lr}
 8011e36:	3b01      	subs	r3, #1
 8011e38:	6093      	str	r3, [r2, #8]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	da04      	bge.n	8011e48 <__sfputc_r+0x16>
 8011e3e:	6994      	ldr	r4, [r2, #24]
 8011e40:	42a3      	cmp	r3, r4
 8011e42:	db07      	blt.n	8011e54 <__sfputc_r+0x22>
 8011e44:	290a      	cmp	r1, #10
 8011e46:	d005      	beq.n	8011e54 <__sfputc_r+0x22>
 8011e48:	6813      	ldr	r3, [r2, #0]
 8011e4a:	1c58      	adds	r0, r3, #1
 8011e4c:	6010      	str	r0, [r2, #0]
 8011e4e:	7019      	strb	r1, [r3, #0]
 8011e50:	0008      	movs	r0, r1
 8011e52:	bd10      	pop	{r4, pc}
 8011e54:	f000 f930 	bl	80120b8 <__swbuf_r>
 8011e58:	0001      	movs	r1, r0
 8011e5a:	e7f9      	b.n	8011e50 <__sfputc_r+0x1e>

08011e5c <__sfputs_r>:
 8011e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e5e:	0006      	movs	r6, r0
 8011e60:	000f      	movs	r7, r1
 8011e62:	0014      	movs	r4, r2
 8011e64:	18d5      	adds	r5, r2, r3
 8011e66:	42ac      	cmp	r4, r5
 8011e68:	d101      	bne.n	8011e6e <__sfputs_r+0x12>
 8011e6a:	2000      	movs	r0, #0
 8011e6c:	e007      	b.n	8011e7e <__sfputs_r+0x22>
 8011e6e:	7821      	ldrb	r1, [r4, #0]
 8011e70:	003a      	movs	r2, r7
 8011e72:	0030      	movs	r0, r6
 8011e74:	f7ff ffdd 	bl	8011e32 <__sfputc_r>
 8011e78:	3401      	adds	r4, #1
 8011e7a:	1c43      	adds	r3, r0, #1
 8011e7c:	d1f3      	bne.n	8011e66 <__sfputs_r+0xa>
 8011e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011e80 <_vfiprintf_r>:
 8011e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e82:	b0a1      	sub	sp, #132	@ 0x84
 8011e84:	000f      	movs	r7, r1
 8011e86:	0015      	movs	r5, r2
 8011e88:	001e      	movs	r6, r3
 8011e8a:	9003      	str	r0, [sp, #12]
 8011e8c:	2800      	cmp	r0, #0
 8011e8e:	d004      	beq.n	8011e9a <_vfiprintf_r+0x1a>
 8011e90:	6a03      	ldr	r3, [r0, #32]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d101      	bne.n	8011e9a <_vfiprintf_r+0x1a>
 8011e96:	f7fe f869 	bl	800ff6c <__sinit>
 8011e9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011e9c:	07db      	lsls	r3, r3, #31
 8011e9e:	d405      	bmi.n	8011eac <_vfiprintf_r+0x2c>
 8011ea0:	89bb      	ldrh	r3, [r7, #12]
 8011ea2:	059b      	lsls	r3, r3, #22
 8011ea4:	d402      	bmi.n	8011eac <_vfiprintf_r+0x2c>
 8011ea6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011ea8:	f7fe f993 	bl	80101d2 <__retarget_lock_acquire_recursive>
 8011eac:	89bb      	ldrh	r3, [r7, #12]
 8011eae:	071b      	lsls	r3, r3, #28
 8011eb0:	d502      	bpl.n	8011eb8 <_vfiprintf_r+0x38>
 8011eb2:	693b      	ldr	r3, [r7, #16]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d113      	bne.n	8011ee0 <_vfiprintf_r+0x60>
 8011eb8:	0039      	movs	r1, r7
 8011eba:	9803      	ldr	r0, [sp, #12]
 8011ebc:	f000 f93e 	bl	801213c <__swsetup_r>
 8011ec0:	2800      	cmp	r0, #0
 8011ec2:	d00d      	beq.n	8011ee0 <_vfiprintf_r+0x60>
 8011ec4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011ec6:	07db      	lsls	r3, r3, #31
 8011ec8:	d503      	bpl.n	8011ed2 <_vfiprintf_r+0x52>
 8011eca:	2001      	movs	r0, #1
 8011ecc:	4240      	negs	r0, r0
 8011ece:	b021      	add	sp, #132	@ 0x84
 8011ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ed2:	89bb      	ldrh	r3, [r7, #12]
 8011ed4:	059b      	lsls	r3, r3, #22
 8011ed6:	d4f8      	bmi.n	8011eca <_vfiprintf_r+0x4a>
 8011ed8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011eda:	f7fe f97b 	bl	80101d4 <__retarget_lock_release_recursive>
 8011ede:	e7f4      	b.n	8011eca <_vfiprintf_r+0x4a>
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	ac08      	add	r4, sp, #32
 8011ee4:	6163      	str	r3, [r4, #20]
 8011ee6:	3320      	adds	r3, #32
 8011ee8:	7663      	strb	r3, [r4, #25]
 8011eea:	3310      	adds	r3, #16
 8011eec:	76a3      	strb	r3, [r4, #26]
 8011eee:	9607      	str	r6, [sp, #28]
 8011ef0:	002e      	movs	r6, r5
 8011ef2:	7833      	ldrb	r3, [r6, #0]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d001      	beq.n	8011efc <_vfiprintf_r+0x7c>
 8011ef8:	2b25      	cmp	r3, #37	@ 0x25
 8011efa:	d148      	bne.n	8011f8e <_vfiprintf_r+0x10e>
 8011efc:	1b73      	subs	r3, r6, r5
 8011efe:	9305      	str	r3, [sp, #20]
 8011f00:	42ae      	cmp	r6, r5
 8011f02:	d00b      	beq.n	8011f1c <_vfiprintf_r+0x9c>
 8011f04:	002a      	movs	r2, r5
 8011f06:	0039      	movs	r1, r7
 8011f08:	9803      	ldr	r0, [sp, #12]
 8011f0a:	f7ff ffa7 	bl	8011e5c <__sfputs_r>
 8011f0e:	3001      	adds	r0, #1
 8011f10:	d100      	bne.n	8011f14 <_vfiprintf_r+0x94>
 8011f12:	e0ae      	b.n	8012072 <_vfiprintf_r+0x1f2>
 8011f14:	6963      	ldr	r3, [r4, #20]
 8011f16:	9a05      	ldr	r2, [sp, #20]
 8011f18:	189b      	adds	r3, r3, r2
 8011f1a:	6163      	str	r3, [r4, #20]
 8011f1c:	7833      	ldrb	r3, [r6, #0]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d100      	bne.n	8011f24 <_vfiprintf_r+0xa4>
 8011f22:	e0a6      	b.n	8012072 <_vfiprintf_r+0x1f2>
 8011f24:	2201      	movs	r2, #1
 8011f26:	2300      	movs	r3, #0
 8011f28:	4252      	negs	r2, r2
 8011f2a:	6062      	str	r2, [r4, #4]
 8011f2c:	a904      	add	r1, sp, #16
 8011f2e:	3254      	adds	r2, #84	@ 0x54
 8011f30:	1852      	adds	r2, r2, r1
 8011f32:	1c75      	adds	r5, r6, #1
 8011f34:	6023      	str	r3, [r4, #0]
 8011f36:	60e3      	str	r3, [r4, #12]
 8011f38:	60a3      	str	r3, [r4, #8]
 8011f3a:	7013      	strb	r3, [r2, #0]
 8011f3c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8011f3e:	4b59      	ldr	r3, [pc, #356]	@ (80120a4 <_vfiprintf_r+0x224>)
 8011f40:	2205      	movs	r2, #5
 8011f42:	0018      	movs	r0, r3
 8011f44:	7829      	ldrb	r1, [r5, #0]
 8011f46:	9305      	str	r3, [sp, #20]
 8011f48:	f7fe f945 	bl	80101d6 <memchr>
 8011f4c:	1c6e      	adds	r6, r5, #1
 8011f4e:	2800      	cmp	r0, #0
 8011f50:	d11f      	bne.n	8011f92 <_vfiprintf_r+0x112>
 8011f52:	6822      	ldr	r2, [r4, #0]
 8011f54:	06d3      	lsls	r3, r2, #27
 8011f56:	d504      	bpl.n	8011f62 <_vfiprintf_r+0xe2>
 8011f58:	2353      	movs	r3, #83	@ 0x53
 8011f5a:	a904      	add	r1, sp, #16
 8011f5c:	185b      	adds	r3, r3, r1
 8011f5e:	2120      	movs	r1, #32
 8011f60:	7019      	strb	r1, [r3, #0]
 8011f62:	0713      	lsls	r3, r2, #28
 8011f64:	d504      	bpl.n	8011f70 <_vfiprintf_r+0xf0>
 8011f66:	2353      	movs	r3, #83	@ 0x53
 8011f68:	a904      	add	r1, sp, #16
 8011f6a:	185b      	adds	r3, r3, r1
 8011f6c:	212b      	movs	r1, #43	@ 0x2b
 8011f6e:	7019      	strb	r1, [r3, #0]
 8011f70:	782b      	ldrb	r3, [r5, #0]
 8011f72:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f74:	d016      	beq.n	8011fa4 <_vfiprintf_r+0x124>
 8011f76:	002e      	movs	r6, r5
 8011f78:	2100      	movs	r1, #0
 8011f7a:	200a      	movs	r0, #10
 8011f7c:	68e3      	ldr	r3, [r4, #12]
 8011f7e:	7832      	ldrb	r2, [r6, #0]
 8011f80:	1c75      	adds	r5, r6, #1
 8011f82:	3a30      	subs	r2, #48	@ 0x30
 8011f84:	2a09      	cmp	r2, #9
 8011f86:	d950      	bls.n	801202a <_vfiprintf_r+0x1aa>
 8011f88:	2900      	cmp	r1, #0
 8011f8a:	d111      	bne.n	8011fb0 <_vfiprintf_r+0x130>
 8011f8c:	e017      	b.n	8011fbe <_vfiprintf_r+0x13e>
 8011f8e:	3601      	adds	r6, #1
 8011f90:	e7af      	b.n	8011ef2 <_vfiprintf_r+0x72>
 8011f92:	9b05      	ldr	r3, [sp, #20]
 8011f94:	6822      	ldr	r2, [r4, #0]
 8011f96:	1ac0      	subs	r0, r0, r3
 8011f98:	2301      	movs	r3, #1
 8011f9a:	4083      	lsls	r3, r0
 8011f9c:	4313      	orrs	r3, r2
 8011f9e:	0035      	movs	r5, r6
 8011fa0:	6023      	str	r3, [r4, #0]
 8011fa2:	e7cc      	b.n	8011f3e <_vfiprintf_r+0xbe>
 8011fa4:	9b07      	ldr	r3, [sp, #28]
 8011fa6:	1d19      	adds	r1, r3, #4
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	9107      	str	r1, [sp, #28]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	db01      	blt.n	8011fb4 <_vfiprintf_r+0x134>
 8011fb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011fb2:	e004      	b.n	8011fbe <_vfiprintf_r+0x13e>
 8011fb4:	425b      	negs	r3, r3
 8011fb6:	60e3      	str	r3, [r4, #12]
 8011fb8:	2302      	movs	r3, #2
 8011fba:	4313      	orrs	r3, r2
 8011fbc:	6023      	str	r3, [r4, #0]
 8011fbe:	7833      	ldrb	r3, [r6, #0]
 8011fc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8011fc2:	d10c      	bne.n	8011fde <_vfiprintf_r+0x15e>
 8011fc4:	7873      	ldrb	r3, [r6, #1]
 8011fc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8011fc8:	d134      	bne.n	8012034 <_vfiprintf_r+0x1b4>
 8011fca:	9b07      	ldr	r3, [sp, #28]
 8011fcc:	3602      	adds	r6, #2
 8011fce:	1d1a      	adds	r2, r3, #4
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	9207      	str	r2, [sp, #28]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	da01      	bge.n	8011fdc <_vfiprintf_r+0x15c>
 8011fd8:	2301      	movs	r3, #1
 8011fda:	425b      	negs	r3, r3
 8011fdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8011fde:	4d32      	ldr	r5, [pc, #200]	@ (80120a8 <_vfiprintf_r+0x228>)
 8011fe0:	2203      	movs	r2, #3
 8011fe2:	0028      	movs	r0, r5
 8011fe4:	7831      	ldrb	r1, [r6, #0]
 8011fe6:	f7fe f8f6 	bl	80101d6 <memchr>
 8011fea:	2800      	cmp	r0, #0
 8011fec:	d006      	beq.n	8011ffc <_vfiprintf_r+0x17c>
 8011fee:	2340      	movs	r3, #64	@ 0x40
 8011ff0:	1b40      	subs	r0, r0, r5
 8011ff2:	4083      	lsls	r3, r0
 8011ff4:	6822      	ldr	r2, [r4, #0]
 8011ff6:	3601      	adds	r6, #1
 8011ff8:	4313      	orrs	r3, r2
 8011ffa:	6023      	str	r3, [r4, #0]
 8011ffc:	7831      	ldrb	r1, [r6, #0]
 8011ffe:	2206      	movs	r2, #6
 8012000:	482a      	ldr	r0, [pc, #168]	@ (80120ac <_vfiprintf_r+0x22c>)
 8012002:	1c75      	adds	r5, r6, #1
 8012004:	7621      	strb	r1, [r4, #24]
 8012006:	f7fe f8e6 	bl	80101d6 <memchr>
 801200a:	2800      	cmp	r0, #0
 801200c:	d040      	beq.n	8012090 <_vfiprintf_r+0x210>
 801200e:	4b28      	ldr	r3, [pc, #160]	@ (80120b0 <_vfiprintf_r+0x230>)
 8012010:	2b00      	cmp	r3, #0
 8012012:	d122      	bne.n	801205a <_vfiprintf_r+0x1da>
 8012014:	2207      	movs	r2, #7
 8012016:	9b07      	ldr	r3, [sp, #28]
 8012018:	3307      	adds	r3, #7
 801201a:	4393      	bics	r3, r2
 801201c:	3308      	adds	r3, #8
 801201e:	9307      	str	r3, [sp, #28]
 8012020:	6963      	ldr	r3, [r4, #20]
 8012022:	9a04      	ldr	r2, [sp, #16]
 8012024:	189b      	adds	r3, r3, r2
 8012026:	6163      	str	r3, [r4, #20]
 8012028:	e762      	b.n	8011ef0 <_vfiprintf_r+0x70>
 801202a:	4343      	muls	r3, r0
 801202c:	002e      	movs	r6, r5
 801202e:	2101      	movs	r1, #1
 8012030:	189b      	adds	r3, r3, r2
 8012032:	e7a4      	b.n	8011f7e <_vfiprintf_r+0xfe>
 8012034:	2300      	movs	r3, #0
 8012036:	200a      	movs	r0, #10
 8012038:	0019      	movs	r1, r3
 801203a:	3601      	adds	r6, #1
 801203c:	6063      	str	r3, [r4, #4]
 801203e:	7832      	ldrb	r2, [r6, #0]
 8012040:	1c75      	adds	r5, r6, #1
 8012042:	3a30      	subs	r2, #48	@ 0x30
 8012044:	2a09      	cmp	r2, #9
 8012046:	d903      	bls.n	8012050 <_vfiprintf_r+0x1d0>
 8012048:	2b00      	cmp	r3, #0
 801204a:	d0c8      	beq.n	8011fde <_vfiprintf_r+0x15e>
 801204c:	9109      	str	r1, [sp, #36]	@ 0x24
 801204e:	e7c6      	b.n	8011fde <_vfiprintf_r+0x15e>
 8012050:	4341      	muls	r1, r0
 8012052:	002e      	movs	r6, r5
 8012054:	2301      	movs	r3, #1
 8012056:	1889      	adds	r1, r1, r2
 8012058:	e7f1      	b.n	801203e <_vfiprintf_r+0x1be>
 801205a:	aa07      	add	r2, sp, #28
 801205c:	9200      	str	r2, [sp, #0]
 801205e:	0021      	movs	r1, r4
 8012060:	003a      	movs	r2, r7
 8012062:	4b14      	ldr	r3, [pc, #80]	@ (80120b4 <_vfiprintf_r+0x234>)
 8012064:	9803      	ldr	r0, [sp, #12]
 8012066:	f7fd fb35 	bl	800f6d4 <_printf_float>
 801206a:	9004      	str	r0, [sp, #16]
 801206c:	9b04      	ldr	r3, [sp, #16]
 801206e:	3301      	adds	r3, #1
 8012070:	d1d6      	bne.n	8012020 <_vfiprintf_r+0x1a0>
 8012072:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012074:	07db      	lsls	r3, r3, #31
 8012076:	d405      	bmi.n	8012084 <_vfiprintf_r+0x204>
 8012078:	89bb      	ldrh	r3, [r7, #12]
 801207a:	059b      	lsls	r3, r3, #22
 801207c:	d402      	bmi.n	8012084 <_vfiprintf_r+0x204>
 801207e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8012080:	f7fe f8a8 	bl	80101d4 <__retarget_lock_release_recursive>
 8012084:	89bb      	ldrh	r3, [r7, #12]
 8012086:	065b      	lsls	r3, r3, #25
 8012088:	d500      	bpl.n	801208c <_vfiprintf_r+0x20c>
 801208a:	e71e      	b.n	8011eca <_vfiprintf_r+0x4a>
 801208c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801208e:	e71e      	b.n	8011ece <_vfiprintf_r+0x4e>
 8012090:	aa07      	add	r2, sp, #28
 8012092:	9200      	str	r2, [sp, #0]
 8012094:	0021      	movs	r1, r4
 8012096:	003a      	movs	r2, r7
 8012098:	4b06      	ldr	r3, [pc, #24]	@ (80120b4 <_vfiprintf_r+0x234>)
 801209a:	9803      	ldr	r0, [sp, #12]
 801209c:	f7fd fdc8 	bl	800fc30 <_printf_i>
 80120a0:	e7e3      	b.n	801206a <_vfiprintf_r+0x1ea>
 80120a2:	46c0      	nop			@ (mov r8, r8)
 80120a4:	08012928 	.word	0x08012928
 80120a8:	0801292e 	.word	0x0801292e
 80120ac:	08012932 	.word	0x08012932
 80120b0:	0800f6d5 	.word	0x0800f6d5
 80120b4:	08011e5d 	.word	0x08011e5d

080120b8 <__swbuf_r>:
 80120b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120ba:	0006      	movs	r6, r0
 80120bc:	000d      	movs	r5, r1
 80120be:	0014      	movs	r4, r2
 80120c0:	2800      	cmp	r0, #0
 80120c2:	d004      	beq.n	80120ce <__swbuf_r+0x16>
 80120c4:	6a03      	ldr	r3, [r0, #32]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d101      	bne.n	80120ce <__swbuf_r+0x16>
 80120ca:	f7fd ff4f 	bl	800ff6c <__sinit>
 80120ce:	69a3      	ldr	r3, [r4, #24]
 80120d0:	60a3      	str	r3, [r4, #8]
 80120d2:	89a3      	ldrh	r3, [r4, #12]
 80120d4:	071b      	lsls	r3, r3, #28
 80120d6:	d502      	bpl.n	80120de <__swbuf_r+0x26>
 80120d8:	6923      	ldr	r3, [r4, #16]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d109      	bne.n	80120f2 <__swbuf_r+0x3a>
 80120de:	0021      	movs	r1, r4
 80120e0:	0030      	movs	r0, r6
 80120e2:	f000 f82b 	bl	801213c <__swsetup_r>
 80120e6:	2800      	cmp	r0, #0
 80120e8:	d003      	beq.n	80120f2 <__swbuf_r+0x3a>
 80120ea:	2501      	movs	r5, #1
 80120ec:	426d      	negs	r5, r5
 80120ee:	0028      	movs	r0, r5
 80120f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120f2:	6923      	ldr	r3, [r4, #16]
 80120f4:	6820      	ldr	r0, [r4, #0]
 80120f6:	b2ef      	uxtb	r7, r5
 80120f8:	1ac0      	subs	r0, r0, r3
 80120fa:	6963      	ldr	r3, [r4, #20]
 80120fc:	b2ed      	uxtb	r5, r5
 80120fe:	4283      	cmp	r3, r0
 8012100:	dc05      	bgt.n	801210e <__swbuf_r+0x56>
 8012102:	0021      	movs	r1, r4
 8012104:	0030      	movs	r0, r6
 8012106:	f7ff fd8b 	bl	8011c20 <_fflush_r>
 801210a:	2800      	cmp	r0, #0
 801210c:	d1ed      	bne.n	80120ea <__swbuf_r+0x32>
 801210e:	68a3      	ldr	r3, [r4, #8]
 8012110:	3001      	adds	r0, #1
 8012112:	3b01      	subs	r3, #1
 8012114:	60a3      	str	r3, [r4, #8]
 8012116:	6823      	ldr	r3, [r4, #0]
 8012118:	1c5a      	adds	r2, r3, #1
 801211a:	6022      	str	r2, [r4, #0]
 801211c:	701f      	strb	r7, [r3, #0]
 801211e:	6963      	ldr	r3, [r4, #20]
 8012120:	4283      	cmp	r3, r0
 8012122:	d004      	beq.n	801212e <__swbuf_r+0x76>
 8012124:	89a3      	ldrh	r3, [r4, #12]
 8012126:	07db      	lsls	r3, r3, #31
 8012128:	d5e1      	bpl.n	80120ee <__swbuf_r+0x36>
 801212a:	2d0a      	cmp	r5, #10
 801212c:	d1df      	bne.n	80120ee <__swbuf_r+0x36>
 801212e:	0021      	movs	r1, r4
 8012130:	0030      	movs	r0, r6
 8012132:	f7ff fd75 	bl	8011c20 <_fflush_r>
 8012136:	2800      	cmp	r0, #0
 8012138:	d0d9      	beq.n	80120ee <__swbuf_r+0x36>
 801213a:	e7d6      	b.n	80120ea <__swbuf_r+0x32>

0801213c <__swsetup_r>:
 801213c:	4b2d      	ldr	r3, [pc, #180]	@ (80121f4 <__swsetup_r+0xb8>)
 801213e:	b570      	push	{r4, r5, r6, lr}
 8012140:	0005      	movs	r5, r0
 8012142:	6818      	ldr	r0, [r3, #0]
 8012144:	000c      	movs	r4, r1
 8012146:	2800      	cmp	r0, #0
 8012148:	d004      	beq.n	8012154 <__swsetup_r+0x18>
 801214a:	6a03      	ldr	r3, [r0, #32]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d101      	bne.n	8012154 <__swsetup_r+0x18>
 8012150:	f7fd ff0c 	bl	800ff6c <__sinit>
 8012154:	230c      	movs	r3, #12
 8012156:	5ee2      	ldrsh	r2, [r4, r3]
 8012158:	0713      	lsls	r3, r2, #28
 801215a:	d423      	bmi.n	80121a4 <__swsetup_r+0x68>
 801215c:	06d3      	lsls	r3, r2, #27
 801215e:	d407      	bmi.n	8012170 <__swsetup_r+0x34>
 8012160:	2309      	movs	r3, #9
 8012162:	602b      	str	r3, [r5, #0]
 8012164:	2340      	movs	r3, #64	@ 0x40
 8012166:	2001      	movs	r0, #1
 8012168:	4313      	orrs	r3, r2
 801216a:	81a3      	strh	r3, [r4, #12]
 801216c:	4240      	negs	r0, r0
 801216e:	e03a      	b.n	80121e6 <__swsetup_r+0xaa>
 8012170:	0752      	lsls	r2, r2, #29
 8012172:	d513      	bpl.n	801219c <__swsetup_r+0x60>
 8012174:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012176:	2900      	cmp	r1, #0
 8012178:	d008      	beq.n	801218c <__swsetup_r+0x50>
 801217a:	0023      	movs	r3, r4
 801217c:	3344      	adds	r3, #68	@ 0x44
 801217e:	4299      	cmp	r1, r3
 8012180:	d002      	beq.n	8012188 <__swsetup_r+0x4c>
 8012182:	0028      	movs	r0, r5
 8012184:	f7fe febe 	bl	8010f04 <_free_r>
 8012188:	2300      	movs	r3, #0
 801218a:	6363      	str	r3, [r4, #52]	@ 0x34
 801218c:	2224      	movs	r2, #36	@ 0x24
 801218e:	89a3      	ldrh	r3, [r4, #12]
 8012190:	4393      	bics	r3, r2
 8012192:	81a3      	strh	r3, [r4, #12]
 8012194:	2300      	movs	r3, #0
 8012196:	6063      	str	r3, [r4, #4]
 8012198:	6923      	ldr	r3, [r4, #16]
 801219a:	6023      	str	r3, [r4, #0]
 801219c:	2308      	movs	r3, #8
 801219e:	89a2      	ldrh	r2, [r4, #12]
 80121a0:	4313      	orrs	r3, r2
 80121a2:	81a3      	strh	r3, [r4, #12]
 80121a4:	6923      	ldr	r3, [r4, #16]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d10b      	bne.n	80121c2 <__swsetup_r+0x86>
 80121aa:	21a0      	movs	r1, #160	@ 0xa0
 80121ac:	2280      	movs	r2, #128	@ 0x80
 80121ae:	89a3      	ldrh	r3, [r4, #12]
 80121b0:	0089      	lsls	r1, r1, #2
 80121b2:	0092      	lsls	r2, r2, #2
 80121b4:	400b      	ands	r3, r1
 80121b6:	4293      	cmp	r3, r2
 80121b8:	d003      	beq.n	80121c2 <__swsetup_r+0x86>
 80121ba:	0021      	movs	r1, r4
 80121bc:	0028      	movs	r0, r5
 80121be:	f000 f88f 	bl	80122e0 <__smakebuf_r>
 80121c2:	230c      	movs	r3, #12
 80121c4:	5ee2      	ldrsh	r2, [r4, r3]
 80121c6:	2101      	movs	r1, #1
 80121c8:	0013      	movs	r3, r2
 80121ca:	400b      	ands	r3, r1
 80121cc:	420a      	tst	r2, r1
 80121ce:	d00b      	beq.n	80121e8 <__swsetup_r+0xac>
 80121d0:	2300      	movs	r3, #0
 80121d2:	60a3      	str	r3, [r4, #8]
 80121d4:	6963      	ldr	r3, [r4, #20]
 80121d6:	425b      	negs	r3, r3
 80121d8:	61a3      	str	r3, [r4, #24]
 80121da:	2000      	movs	r0, #0
 80121dc:	6923      	ldr	r3, [r4, #16]
 80121de:	4283      	cmp	r3, r0
 80121e0:	d101      	bne.n	80121e6 <__swsetup_r+0xaa>
 80121e2:	0613      	lsls	r3, r2, #24
 80121e4:	d4be      	bmi.n	8012164 <__swsetup_r+0x28>
 80121e6:	bd70      	pop	{r4, r5, r6, pc}
 80121e8:	0791      	lsls	r1, r2, #30
 80121ea:	d400      	bmi.n	80121ee <__swsetup_r+0xb2>
 80121ec:	6963      	ldr	r3, [r4, #20]
 80121ee:	60a3      	str	r3, [r4, #8]
 80121f0:	e7f3      	b.n	80121da <__swsetup_r+0x9e>
 80121f2:	46c0      	nop			@ (mov r8, r8)
 80121f4:	200001e8 	.word	0x200001e8

080121f8 <_raise_r>:
 80121f8:	b570      	push	{r4, r5, r6, lr}
 80121fa:	0004      	movs	r4, r0
 80121fc:	000d      	movs	r5, r1
 80121fe:	291f      	cmp	r1, #31
 8012200:	d904      	bls.n	801220c <_raise_r+0x14>
 8012202:	2316      	movs	r3, #22
 8012204:	6003      	str	r3, [r0, #0]
 8012206:	2001      	movs	r0, #1
 8012208:	4240      	negs	r0, r0
 801220a:	bd70      	pop	{r4, r5, r6, pc}
 801220c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801220e:	2b00      	cmp	r3, #0
 8012210:	d004      	beq.n	801221c <_raise_r+0x24>
 8012212:	008a      	lsls	r2, r1, #2
 8012214:	189b      	adds	r3, r3, r2
 8012216:	681a      	ldr	r2, [r3, #0]
 8012218:	2a00      	cmp	r2, #0
 801221a:	d108      	bne.n	801222e <_raise_r+0x36>
 801221c:	0020      	movs	r0, r4
 801221e:	f000 f831 	bl	8012284 <_getpid_r>
 8012222:	002a      	movs	r2, r5
 8012224:	0001      	movs	r1, r0
 8012226:	0020      	movs	r0, r4
 8012228:	f000 f81a 	bl	8012260 <_kill_r>
 801222c:	e7ed      	b.n	801220a <_raise_r+0x12>
 801222e:	2a01      	cmp	r2, #1
 8012230:	d009      	beq.n	8012246 <_raise_r+0x4e>
 8012232:	1c51      	adds	r1, r2, #1
 8012234:	d103      	bne.n	801223e <_raise_r+0x46>
 8012236:	2316      	movs	r3, #22
 8012238:	6003      	str	r3, [r0, #0]
 801223a:	2001      	movs	r0, #1
 801223c:	e7e5      	b.n	801220a <_raise_r+0x12>
 801223e:	2100      	movs	r1, #0
 8012240:	0028      	movs	r0, r5
 8012242:	6019      	str	r1, [r3, #0]
 8012244:	4790      	blx	r2
 8012246:	2000      	movs	r0, #0
 8012248:	e7df      	b.n	801220a <_raise_r+0x12>
	...

0801224c <raise>:
 801224c:	b510      	push	{r4, lr}
 801224e:	4b03      	ldr	r3, [pc, #12]	@ (801225c <raise+0x10>)
 8012250:	0001      	movs	r1, r0
 8012252:	6818      	ldr	r0, [r3, #0]
 8012254:	f7ff ffd0 	bl	80121f8 <_raise_r>
 8012258:	bd10      	pop	{r4, pc}
 801225a:	46c0      	nop			@ (mov r8, r8)
 801225c:	200001e8 	.word	0x200001e8

08012260 <_kill_r>:
 8012260:	2300      	movs	r3, #0
 8012262:	b570      	push	{r4, r5, r6, lr}
 8012264:	4d06      	ldr	r5, [pc, #24]	@ (8012280 <_kill_r+0x20>)
 8012266:	0004      	movs	r4, r0
 8012268:	0008      	movs	r0, r1
 801226a:	0011      	movs	r1, r2
 801226c:	602b      	str	r3, [r5, #0]
 801226e:	f7f1 f90b 	bl	8003488 <_kill>
 8012272:	1c43      	adds	r3, r0, #1
 8012274:	d103      	bne.n	801227e <_kill_r+0x1e>
 8012276:	682b      	ldr	r3, [r5, #0]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d000      	beq.n	801227e <_kill_r+0x1e>
 801227c:	6023      	str	r3, [r4, #0]
 801227e:	bd70      	pop	{r4, r5, r6, pc}
 8012280:	20001db8 	.word	0x20001db8

08012284 <_getpid_r>:
 8012284:	b510      	push	{r4, lr}
 8012286:	f7f1 f8f9 	bl	800347c <_getpid>
 801228a:	bd10      	pop	{r4, pc}

0801228c <__swhatbuf_r>:
 801228c:	b570      	push	{r4, r5, r6, lr}
 801228e:	000e      	movs	r6, r1
 8012290:	001d      	movs	r5, r3
 8012292:	230e      	movs	r3, #14
 8012294:	5ec9      	ldrsh	r1, [r1, r3]
 8012296:	0014      	movs	r4, r2
 8012298:	b096      	sub	sp, #88	@ 0x58
 801229a:	2900      	cmp	r1, #0
 801229c:	da0c      	bge.n	80122b8 <__swhatbuf_r+0x2c>
 801229e:	89b2      	ldrh	r2, [r6, #12]
 80122a0:	2380      	movs	r3, #128	@ 0x80
 80122a2:	0011      	movs	r1, r2
 80122a4:	4019      	ands	r1, r3
 80122a6:	421a      	tst	r2, r3
 80122a8:	d114      	bne.n	80122d4 <__swhatbuf_r+0x48>
 80122aa:	2380      	movs	r3, #128	@ 0x80
 80122ac:	00db      	lsls	r3, r3, #3
 80122ae:	2000      	movs	r0, #0
 80122b0:	6029      	str	r1, [r5, #0]
 80122b2:	6023      	str	r3, [r4, #0]
 80122b4:	b016      	add	sp, #88	@ 0x58
 80122b6:	bd70      	pop	{r4, r5, r6, pc}
 80122b8:	466a      	mov	r2, sp
 80122ba:	f000 f853 	bl	8012364 <_fstat_r>
 80122be:	2800      	cmp	r0, #0
 80122c0:	dbed      	blt.n	801229e <__swhatbuf_r+0x12>
 80122c2:	23f0      	movs	r3, #240	@ 0xf0
 80122c4:	9901      	ldr	r1, [sp, #4]
 80122c6:	021b      	lsls	r3, r3, #8
 80122c8:	4019      	ands	r1, r3
 80122ca:	4b04      	ldr	r3, [pc, #16]	@ (80122dc <__swhatbuf_r+0x50>)
 80122cc:	18c9      	adds	r1, r1, r3
 80122ce:	424b      	negs	r3, r1
 80122d0:	4159      	adcs	r1, r3
 80122d2:	e7ea      	b.n	80122aa <__swhatbuf_r+0x1e>
 80122d4:	2100      	movs	r1, #0
 80122d6:	2340      	movs	r3, #64	@ 0x40
 80122d8:	e7e9      	b.n	80122ae <__swhatbuf_r+0x22>
 80122da:	46c0      	nop			@ (mov r8, r8)
 80122dc:	ffffe000 	.word	0xffffe000

080122e0 <__smakebuf_r>:
 80122e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122e2:	2602      	movs	r6, #2
 80122e4:	898b      	ldrh	r3, [r1, #12]
 80122e6:	0005      	movs	r5, r0
 80122e8:	000c      	movs	r4, r1
 80122ea:	b085      	sub	sp, #20
 80122ec:	4233      	tst	r3, r6
 80122ee:	d007      	beq.n	8012300 <__smakebuf_r+0x20>
 80122f0:	0023      	movs	r3, r4
 80122f2:	3347      	adds	r3, #71	@ 0x47
 80122f4:	6023      	str	r3, [r4, #0]
 80122f6:	6123      	str	r3, [r4, #16]
 80122f8:	2301      	movs	r3, #1
 80122fa:	6163      	str	r3, [r4, #20]
 80122fc:	b005      	add	sp, #20
 80122fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012300:	ab03      	add	r3, sp, #12
 8012302:	aa02      	add	r2, sp, #8
 8012304:	f7ff ffc2 	bl	801228c <__swhatbuf_r>
 8012308:	9f02      	ldr	r7, [sp, #8]
 801230a:	9001      	str	r0, [sp, #4]
 801230c:	0039      	movs	r1, r7
 801230e:	0028      	movs	r0, r5
 8012310:	f7fe fe6e 	bl	8010ff0 <_malloc_r>
 8012314:	2800      	cmp	r0, #0
 8012316:	d108      	bne.n	801232a <__smakebuf_r+0x4a>
 8012318:	220c      	movs	r2, #12
 801231a:	5ea3      	ldrsh	r3, [r4, r2]
 801231c:	059a      	lsls	r2, r3, #22
 801231e:	d4ed      	bmi.n	80122fc <__smakebuf_r+0x1c>
 8012320:	2203      	movs	r2, #3
 8012322:	4393      	bics	r3, r2
 8012324:	431e      	orrs	r6, r3
 8012326:	81a6      	strh	r6, [r4, #12]
 8012328:	e7e2      	b.n	80122f0 <__smakebuf_r+0x10>
 801232a:	2380      	movs	r3, #128	@ 0x80
 801232c:	89a2      	ldrh	r2, [r4, #12]
 801232e:	6020      	str	r0, [r4, #0]
 8012330:	4313      	orrs	r3, r2
 8012332:	81a3      	strh	r3, [r4, #12]
 8012334:	9b03      	ldr	r3, [sp, #12]
 8012336:	6120      	str	r0, [r4, #16]
 8012338:	6167      	str	r7, [r4, #20]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d00c      	beq.n	8012358 <__smakebuf_r+0x78>
 801233e:	0028      	movs	r0, r5
 8012340:	230e      	movs	r3, #14
 8012342:	5ee1      	ldrsh	r1, [r4, r3]
 8012344:	f000 f820 	bl	8012388 <_isatty_r>
 8012348:	2800      	cmp	r0, #0
 801234a:	d005      	beq.n	8012358 <__smakebuf_r+0x78>
 801234c:	2303      	movs	r3, #3
 801234e:	89a2      	ldrh	r2, [r4, #12]
 8012350:	439a      	bics	r2, r3
 8012352:	3b02      	subs	r3, #2
 8012354:	4313      	orrs	r3, r2
 8012356:	81a3      	strh	r3, [r4, #12]
 8012358:	89a3      	ldrh	r3, [r4, #12]
 801235a:	9a01      	ldr	r2, [sp, #4]
 801235c:	4313      	orrs	r3, r2
 801235e:	81a3      	strh	r3, [r4, #12]
 8012360:	e7cc      	b.n	80122fc <__smakebuf_r+0x1c>
	...

08012364 <_fstat_r>:
 8012364:	2300      	movs	r3, #0
 8012366:	b570      	push	{r4, r5, r6, lr}
 8012368:	4d06      	ldr	r5, [pc, #24]	@ (8012384 <_fstat_r+0x20>)
 801236a:	0004      	movs	r4, r0
 801236c:	0008      	movs	r0, r1
 801236e:	0011      	movs	r1, r2
 8012370:	602b      	str	r3, [r5, #0]
 8012372:	f7f1 f8e9 	bl	8003548 <_fstat>
 8012376:	1c43      	adds	r3, r0, #1
 8012378:	d103      	bne.n	8012382 <_fstat_r+0x1e>
 801237a:	682b      	ldr	r3, [r5, #0]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d000      	beq.n	8012382 <_fstat_r+0x1e>
 8012380:	6023      	str	r3, [r4, #0]
 8012382:	bd70      	pop	{r4, r5, r6, pc}
 8012384:	20001db8 	.word	0x20001db8

08012388 <_isatty_r>:
 8012388:	2300      	movs	r3, #0
 801238a:	b570      	push	{r4, r5, r6, lr}
 801238c:	4d06      	ldr	r5, [pc, #24]	@ (80123a8 <_isatty_r+0x20>)
 801238e:	0004      	movs	r4, r0
 8012390:	0008      	movs	r0, r1
 8012392:	602b      	str	r3, [r5, #0]
 8012394:	f7f1 f8e6 	bl	8003564 <_isatty>
 8012398:	1c43      	adds	r3, r0, #1
 801239a:	d103      	bne.n	80123a4 <_isatty_r+0x1c>
 801239c:	682b      	ldr	r3, [r5, #0]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d000      	beq.n	80123a4 <_isatty_r+0x1c>
 80123a2:	6023      	str	r3, [r4, #0]
 80123a4:	bd70      	pop	{r4, r5, r6, pc}
 80123a6:	46c0      	nop			@ (mov r8, r8)
 80123a8:	20001db8 	.word	0x20001db8

080123ac <_init>:
 80123ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123ae:	46c0      	nop			@ (mov r8, r8)
 80123b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123b2:	bc08      	pop	{r3}
 80123b4:	469e      	mov	lr, r3
 80123b6:	4770      	bx	lr

080123b8 <_fini>:
 80123b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123ba:	46c0      	nop			@ (mov r8, r8)
 80123bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123be:	bc08      	pop	{r3}
 80123c0:	469e      	mov	lr, r3
 80123c2:	4770      	bx	lr
