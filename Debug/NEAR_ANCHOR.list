
NEAR_ANCHOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012168  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  08012228  08012228  00013228  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801284c  0801284c  000143a8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0801284c  0801284c  000143a8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0801284c  0801284c  000143a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801284c  0801284c  0001384c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012850  08012850  00013850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003a8  20000000  08012854  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a24  200003a8  08012bfc  000143a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001dcc  08012bfc  00014dcc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000143a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eb2c  00000000  00000000  000143d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d35  00000000  00000000  00032efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd0  00000000  00000000  00037c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001570  00000000  00000000  00039808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007e84  00000000  00000000  0003ad78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024845  00000000  00000000  00042bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad23b  00000000  00000000  00067441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011467c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000753c  00000000  00000000  001146c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0011bbfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000013d  00000000  00000000  0011bc59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200003a8 	.word	0x200003a8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08012210 	.word	0x08012210

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200003ac 	.word	0x200003ac
 8000104:	08012210 	.word	0x08012210

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f833 	bl	80014a8 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff77 	bl	8001340 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f825 	bl	80014a8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f81b 	bl	80014a8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ffa1 	bl	80013c8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff97 	bl	80013c8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 ff73 	bl	80023a8 <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fb40 	bl	8001b50 <__aeabi_dsub>
 80004d0:	f001 ff6a 	bl	80023a8 <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	@ 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	2200      	movs	r2, #0
 80004e8:	2300      	movs	r3, #0
 80004ea:	0004      	movs	r4, r0
 80004ec:	000d      	movs	r5, r1
 80004ee:	f7ff ffb3 	bl	8000458 <__aeabi_dcmplt>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d108      	bne.n	8000508 <__aeabi_d2lz+0x24>
 80004f6:	0020      	movs	r0, r4
 80004f8:	0029      	movs	r1, r5
 80004fa:	f000 f80f 	bl	800051c <__aeabi_d2ulz>
 80004fe:	0002      	movs	r2, r0
 8000500:	000b      	movs	r3, r1
 8000502:	0010      	movs	r0, r2
 8000504:	0019      	movs	r1, r3
 8000506:	bd70      	pop	{r4, r5, r6, pc}
 8000508:	2380      	movs	r3, #128	@ 0x80
 800050a:	061b      	lsls	r3, r3, #24
 800050c:	18e9      	adds	r1, r5, r3
 800050e:	0020      	movs	r0, r4
 8000510:	f000 f804 	bl	800051c <__aeabi_d2ulz>
 8000514:	2300      	movs	r3, #0
 8000516:	4242      	negs	r2, r0
 8000518:	418b      	sbcs	r3, r1
 800051a:	e7f2      	b.n	8000502 <__aeabi_d2lz+0x1e>

0800051c <__aeabi_d2ulz>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	2200      	movs	r2, #0
 8000520:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <__aeabi_d2ulz+0x34>)
 8000522:	000d      	movs	r5, r1
 8000524:	0004      	movs	r4, r0
 8000526:	f001 f82d 	bl	8001584 <__aeabi_dmul>
 800052a:	f7ff ffbd 	bl	80004a8 <__aeabi_d2uiz>
 800052e:	0006      	movs	r6, r0
 8000530:	f001 ffa4 	bl	800247c <__aeabi_ui2d>
 8000534:	2200      	movs	r2, #0
 8000536:	4b07      	ldr	r3, [pc, #28]	@ (8000554 <__aeabi_d2ulz+0x38>)
 8000538:	f001 f824 	bl	8001584 <__aeabi_dmul>
 800053c:	0002      	movs	r2, r0
 800053e:	000b      	movs	r3, r1
 8000540:	0020      	movs	r0, r4
 8000542:	0029      	movs	r1, r5
 8000544:	f001 fb04 	bl	8001b50 <__aeabi_dsub>
 8000548:	f7ff ffae 	bl	80004a8 <__aeabi_d2uiz>
 800054c:	0031      	movs	r1, r6
 800054e:	bd70      	pop	{r4, r5, r6, pc}
 8000550:	3df00000 	.word	0x3df00000
 8000554:	41f00000 	.word	0x41f00000

08000558 <__aeabi_l2d>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	0006      	movs	r6, r0
 800055c:	0008      	movs	r0, r1
 800055e:	f001 ff5f 	bl	8002420 <__aeabi_i2d>
 8000562:	2200      	movs	r2, #0
 8000564:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <__aeabi_l2d+0x28>)
 8000566:	f001 f80d 	bl	8001584 <__aeabi_dmul>
 800056a:	000d      	movs	r5, r1
 800056c:	0004      	movs	r4, r0
 800056e:	0030      	movs	r0, r6
 8000570:	f001 ff84 	bl	800247c <__aeabi_ui2d>
 8000574:	002b      	movs	r3, r5
 8000576:	0022      	movs	r2, r4
 8000578:	f000 f804 	bl	8000584 <__aeabi_dadd>
 800057c:	bd70      	pop	{r4, r5, r6, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)
 8000580:	41f00000 	.word	0x41f00000

08000584 <__aeabi_dadd>:
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	464f      	mov	r7, r9
 8000588:	4646      	mov	r6, r8
 800058a:	46d6      	mov	lr, sl
 800058c:	b5c0      	push	{r6, r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	9000      	str	r0, [sp, #0]
 8000592:	9101      	str	r1, [sp, #4]
 8000594:	030e      	lsls	r6, r1, #12
 8000596:	004c      	lsls	r4, r1, #1
 8000598:	0fcd      	lsrs	r5, r1, #31
 800059a:	0a71      	lsrs	r1, r6, #9
 800059c:	9e00      	ldr	r6, [sp, #0]
 800059e:	005f      	lsls	r7, r3, #1
 80005a0:	0f76      	lsrs	r6, r6, #29
 80005a2:	430e      	orrs	r6, r1
 80005a4:	9900      	ldr	r1, [sp, #0]
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	00c9      	lsls	r1, r1, #3
 80005ac:	4689      	mov	r9, r1
 80005ae:	0319      	lsls	r1, r3, #12
 80005b0:	0d7b      	lsrs	r3, r7, #21
 80005b2:	4698      	mov	r8, r3
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	0a49      	lsrs	r1, r1, #9
 80005b8:	0fdb      	lsrs	r3, r3, #31
 80005ba:	469c      	mov	ip, r3
 80005bc:	9b00      	ldr	r3, [sp, #0]
 80005be:	9a00      	ldr	r2, [sp, #0]
 80005c0:	0f5b      	lsrs	r3, r3, #29
 80005c2:	430b      	orrs	r3, r1
 80005c4:	4641      	mov	r1, r8
 80005c6:	0d64      	lsrs	r4, r4, #21
 80005c8:	00d2      	lsls	r2, r2, #3
 80005ca:	1a61      	subs	r1, r4, r1
 80005cc:	4565      	cmp	r5, ip
 80005ce:	d100      	bne.n	80005d2 <__aeabi_dadd+0x4e>
 80005d0:	e0a6      	b.n	8000720 <__aeabi_dadd+0x19c>
 80005d2:	2900      	cmp	r1, #0
 80005d4:	dd72      	ble.n	80006bc <__aeabi_dadd+0x138>
 80005d6:	4647      	mov	r7, r8
 80005d8:	2f00      	cmp	r7, #0
 80005da:	d100      	bne.n	80005de <__aeabi_dadd+0x5a>
 80005dc:	e0dd      	b.n	800079a <__aeabi_dadd+0x216>
 80005de:	4fcc      	ldr	r7, [pc, #816]	@ (8000910 <__aeabi_dadd+0x38c>)
 80005e0:	42bc      	cmp	r4, r7
 80005e2:	d100      	bne.n	80005e6 <__aeabi_dadd+0x62>
 80005e4:	e19a      	b.n	800091c <__aeabi_dadd+0x398>
 80005e6:	2701      	movs	r7, #1
 80005e8:	2938      	cmp	r1, #56	@ 0x38
 80005ea:	dc17      	bgt.n	800061c <__aeabi_dadd+0x98>
 80005ec:	2780      	movs	r7, #128	@ 0x80
 80005ee:	043f      	lsls	r7, r7, #16
 80005f0:	433b      	orrs	r3, r7
 80005f2:	291f      	cmp	r1, #31
 80005f4:	dd00      	ble.n	80005f8 <__aeabi_dadd+0x74>
 80005f6:	e1dd      	b.n	80009b4 <__aeabi_dadd+0x430>
 80005f8:	2720      	movs	r7, #32
 80005fa:	1a78      	subs	r0, r7, r1
 80005fc:	001f      	movs	r7, r3
 80005fe:	4087      	lsls	r7, r0
 8000600:	46ba      	mov	sl, r7
 8000602:	0017      	movs	r7, r2
 8000604:	40cf      	lsrs	r7, r1
 8000606:	4684      	mov	ip, r0
 8000608:	0038      	movs	r0, r7
 800060a:	4657      	mov	r7, sl
 800060c:	4307      	orrs	r7, r0
 800060e:	4660      	mov	r0, ip
 8000610:	4082      	lsls	r2, r0
 8000612:	40cb      	lsrs	r3, r1
 8000614:	1e50      	subs	r0, r2, #1
 8000616:	4182      	sbcs	r2, r0
 8000618:	1af6      	subs	r6, r6, r3
 800061a:	4317      	orrs	r7, r2
 800061c:	464b      	mov	r3, r9
 800061e:	1bdf      	subs	r7, r3, r7
 8000620:	45b9      	cmp	r9, r7
 8000622:	4180      	sbcs	r0, r0
 8000624:	4240      	negs	r0, r0
 8000626:	1a36      	subs	r6, r6, r0
 8000628:	0233      	lsls	r3, r6, #8
 800062a:	d400      	bmi.n	800062e <__aeabi_dadd+0xaa>
 800062c:	e0ff      	b.n	800082e <__aeabi_dadd+0x2aa>
 800062e:	0276      	lsls	r6, r6, #9
 8000630:	0a76      	lsrs	r6, r6, #9
 8000632:	2e00      	cmp	r6, #0
 8000634:	d100      	bne.n	8000638 <__aeabi_dadd+0xb4>
 8000636:	e13c      	b.n	80008b2 <__aeabi_dadd+0x32e>
 8000638:	0030      	movs	r0, r6
 800063a:	f001 ff43 	bl	80024c4 <__clzsi2>
 800063e:	0003      	movs	r3, r0
 8000640:	3b08      	subs	r3, #8
 8000642:	2120      	movs	r1, #32
 8000644:	0038      	movs	r0, r7
 8000646:	1aca      	subs	r2, r1, r3
 8000648:	40d0      	lsrs	r0, r2
 800064a:	409e      	lsls	r6, r3
 800064c:	0002      	movs	r2, r0
 800064e:	409f      	lsls	r7, r3
 8000650:	4332      	orrs	r2, r6
 8000652:	429c      	cmp	r4, r3
 8000654:	dd00      	ble.n	8000658 <__aeabi_dadd+0xd4>
 8000656:	e1a6      	b.n	80009a6 <__aeabi_dadd+0x422>
 8000658:	1b18      	subs	r0, r3, r4
 800065a:	3001      	adds	r0, #1
 800065c:	1a09      	subs	r1, r1, r0
 800065e:	003e      	movs	r6, r7
 8000660:	408f      	lsls	r7, r1
 8000662:	40c6      	lsrs	r6, r0
 8000664:	1e7b      	subs	r3, r7, #1
 8000666:	419f      	sbcs	r7, r3
 8000668:	0013      	movs	r3, r2
 800066a:	408b      	lsls	r3, r1
 800066c:	4337      	orrs	r7, r6
 800066e:	431f      	orrs	r7, r3
 8000670:	40c2      	lsrs	r2, r0
 8000672:	003b      	movs	r3, r7
 8000674:	0016      	movs	r6, r2
 8000676:	2400      	movs	r4, #0
 8000678:	4313      	orrs	r3, r2
 800067a:	d100      	bne.n	800067e <__aeabi_dadd+0xfa>
 800067c:	e1df      	b.n	8000a3e <__aeabi_dadd+0x4ba>
 800067e:	077b      	lsls	r3, r7, #29
 8000680:	d100      	bne.n	8000684 <__aeabi_dadd+0x100>
 8000682:	e332      	b.n	8000cea <__aeabi_dadd+0x766>
 8000684:	230f      	movs	r3, #15
 8000686:	003a      	movs	r2, r7
 8000688:	403b      	ands	r3, r7
 800068a:	2b04      	cmp	r3, #4
 800068c:	d004      	beq.n	8000698 <__aeabi_dadd+0x114>
 800068e:	1d3a      	adds	r2, r7, #4
 8000690:	42ba      	cmp	r2, r7
 8000692:	41bf      	sbcs	r7, r7
 8000694:	427f      	negs	r7, r7
 8000696:	19f6      	adds	r6, r6, r7
 8000698:	0233      	lsls	r3, r6, #8
 800069a:	d400      	bmi.n	800069e <__aeabi_dadd+0x11a>
 800069c:	e323      	b.n	8000ce6 <__aeabi_dadd+0x762>
 800069e:	4b9c      	ldr	r3, [pc, #624]	@ (8000910 <__aeabi_dadd+0x38c>)
 80006a0:	3401      	adds	r4, #1
 80006a2:	429c      	cmp	r4, r3
 80006a4:	d100      	bne.n	80006a8 <__aeabi_dadd+0x124>
 80006a6:	e0b4      	b.n	8000812 <__aeabi_dadd+0x28e>
 80006a8:	4b9a      	ldr	r3, [pc, #616]	@ (8000914 <__aeabi_dadd+0x390>)
 80006aa:	0564      	lsls	r4, r4, #21
 80006ac:	401e      	ands	r6, r3
 80006ae:	0d64      	lsrs	r4, r4, #21
 80006b0:	0777      	lsls	r7, r6, #29
 80006b2:	08d2      	lsrs	r2, r2, #3
 80006b4:	0276      	lsls	r6, r6, #9
 80006b6:	4317      	orrs	r7, r2
 80006b8:	0b36      	lsrs	r6, r6, #12
 80006ba:	e0ac      	b.n	8000816 <__aeabi_dadd+0x292>
 80006bc:	2900      	cmp	r1, #0
 80006be:	d100      	bne.n	80006c2 <__aeabi_dadd+0x13e>
 80006c0:	e07e      	b.n	80007c0 <__aeabi_dadd+0x23c>
 80006c2:	4641      	mov	r1, r8
 80006c4:	1b09      	subs	r1, r1, r4
 80006c6:	2c00      	cmp	r4, #0
 80006c8:	d000      	beq.n	80006cc <__aeabi_dadd+0x148>
 80006ca:	e160      	b.n	800098e <__aeabi_dadd+0x40a>
 80006cc:	0034      	movs	r4, r6
 80006ce:	4648      	mov	r0, r9
 80006d0:	4304      	orrs	r4, r0
 80006d2:	d100      	bne.n	80006d6 <__aeabi_dadd+0x152>
 80006d4:	e1c9      	b.n	8000a6a <__aeabi_dadd+0x4e6>
 80006d6:	1e4c      	subs	r4, r1, #1
 80006d8:	2901      	cmp	r1, #1
 80006da:	d100      	bne.n	80006de <__aeabi_dadd+0x15a>
 80006dc:	e22e      	b.n	8000b3c <__aeabi_dadd+0x5b8>
 80006de:	4d8c      	ldr	r5, [pc, #560]	@ (8000910 <__aeabi_dadd+0x38c>)
 80006e0:	42a9      	cmp	r1, r5
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dadd+0x162>
 80006e4:	e224      	b.n	8000b30 <__aeabi_dadd+0x5ac>
 80006e6:	2701      	movs	r7, #1
 80006e8:	2c38      	cmp	r4, #56	@ 0x38
 80006ea:	dc11      	bgt.n	8000710 <__aeabi_dadd+0x18c>
 80006ec:	0021      	movs	r1, r4
 80006ee:	291f      	cmp	r1, #31
 80006f0:	dd00      	ble.n	80006f4 <__aeabi_dadd+0x170>
 80006f2:	e20b      	b.n	8000b0c <__aeabi_dadd+0x588>
 80006f4:	2420      	movs	r4, #32
 80006f6:	0037      	movs	r7, r6
 80006f8:	4648      	mov	r0, r9
 80006fa:	1a64      	subs	r4, r4, r1
 80006fc:	40a7      	lsls	r7, r4
 80006fe:	40c8      	lsrs	r0, r1
 8000700:	4307      	orrs	r7, r0
 8000702:	4648      	mov	r0, r9
 8000704:	40a0      	lsls	r0, r4
 8000706:	40ce      	lsrs	r6, r1
 8000708:	1e44      	subs	r4, r0, #1
 800070a:	41a0      	sbcs	r0, r4
 800070c:	1b9b      	subs	r3, r3, r6
 800070e:	4307      	orrs	r7, r0
 8000710:	1bd7      	subs	r7, r2, r7
 8000712:	42ba      	cmp	r2, r7
 8000714:	4192      	sbcs	r2, r2
 8000716:	4252      	negs	r2, r2
 8000718:	4665      	mov	r5, ip
 800071a:	4644      	mov	r4, r8
 800071c:	1a9e      	subs	r6, r3, r2
 800071e:	e783      	b.n	8000628 <__aeabi_dadd+0xa4>
 8000720:	2900      	cmp	r1, #0
 8000722:	dc00      	bgt.n	8000726 <__aeabi_dadd+0x1a2>
 8000724:	e09c      	b.n	8000860 <__aeabi_dadd+0x2dc>
 8000726:	4647      	mov	r7, r8
 8000728:	2f00      	cmp	r7, #0
 800072a:	d167      	bne.n	80007fc <__aeabi_dadd+0x278>
 800072c:	001f      	movs	r7, r3
 800072e:	4317      	orrs	r7, r2
 8000730:	d100      	bne.n	8000734 <__aeabi_dadd+0x1b0>
 8000732:	e0e4      	b.n	80008fe <__aeabi_dadd+0x37a>
 8000734:	1e48      	subs	r0, r1, #1
 8000736:	2901      	cmp	r1, #1
 8000738:	d100      	bne.n	800073c <__aeabi_dadd+0x1b8>
 800073a:	e19b      	b.n	8000a74 <__aeabi_dadd+0x4f0>
 800073c:	4f74      	ldr	r7, [pc, #464]	@ (8000910 <__aeabi_dadd+0x38c>)
 800073e:	42b9      	cmp	r1, r7
 8000740:	d100      	bne.n	8000744 <__aeabi_dadd+0x1c0>
 8000742:	e0eb      	b.n	800091c <__aeabi_dadd+0x398>
 8000744:	2701      	movs	r7, #1
 8000746:	0001      	movs	r1, r0
 8000748:	2838      	cmp	r0, #56	@ 0x38
 800074a:	dc11      	bgt.n	8000770 <__aeabi_dadd+0x1ec>
 800074c:	291f      	cmp	r1, #31
 800074e:	dd00      	ble.n	8000752 <__aeabi_dadd+0x1ce>
 8000750:	e1c7      	b.n	8000ae2 <__aeabi_dadd+0x55e>
 8000752:	2720      	movs	r7, #32
 8000754:	1a78      	subs	r0, r7, r1
 8000756:	001f      	movs	r7, r3
 8000758:	4684      	mov	ip, r0
 800075a:	4087      	lsls	r7, r0
 800075c:	0010      	movs	r0, r2
 800075e:	40c8      	lsrs	r0, r1
 8000760:	4307      	orrs	r7, r0
 8000762:	4660      	mov	r0, ip
 8000764:	4082      	lsls	r2, r0
 8000766:	40cb      	lsrs	r3, r1
 8000768:	1e50      	subs	r0, r2, #1
 800076a:	4182      	sbcs	r2, r0
 800076c:	18f6      	adds	r6, r6, r3
 800076e:	4317      	orrs	r7, r2
 8000770:	444f      	add	r7, r9
 8000772:	454f      	cmp	r7, r9
 8000774:	4180      	sbcs	r0, r0
 8000776:	4240      	negs	r0, r0
 8000778:	1836      	adds	r6, r6, r0
 800077a:	0233      	lsls	r3, r6, #8
 800077c:	d557      	bpl.n	800082e <__aeabi_dadd+0x2aa>
 800077e:	4b64      	ldr	r3, [pc, #400]	@ (8000910 <__aeabi_dadd+0x38c>)
 8000780:	3401      	adds	r4, #1
 8000782:	429c      	cmp	r4, r3
 8000784:	d045      	beq.n	8000812 <__aeabi_dadd+0x28e>
 8000786:	2101      	movs	r1, #1
 8000788:	4b62      	ldr	r3, [pc, #392]	@ (8000914 <__aeabi_dadd+0x390>)
 800078a:	087a      	lsrs	r2, r7, #1
 800078c:	401e      	ands	r6, r3
 800078e:	4039      	ands	r1, r7
 8000790:	430a      	orrs	r2, r1
 8000792:	07f7      	lsls	r7, r6, #31
 8000794:	4317      	orrs	r7, r2
 8000796:	0876      	lsrs	r6, r6, #1
 8000798:	e771      	b.n	800067e <__aeabi_dadd+0xfa>
 800079a:	001f      	movs	r7, r3
 800079c:	4317      	orrs	r7, r2
 800079e:	d100      	bne.n	80007a2 <__aeabi_dadd+0x21e>
 80007a0:	e0ad      	b.n	80008fe <__aeabi_dadd+0x37a>
 80007a2:	1e4f      	subs	r7, r1, #1
 80007a4:	46bc      	mov	ip, r7
 80007a6:	2901      	cmp	r1, #1
 80007a8:	d100      	bne.n	80007ac <__aeabi_dadd+0x228>
 80007aa:	e182      	b.n	8000ab2 <__aeabi_dadd+0x52e>
 80007ac:	4f58      	ldr	r7, [pc, #352]	@ (8000910 <__aeabi_dadd+0x38c>)
 80007ae:	42b9      	cmp	r1, r7
 80007b0:	d100      	bne.n	80007b4 <__aeabi_dadd+0x230>
 80007b2:	e190      	b.n	8000ad6 <__aeabi_dadd+0x552>
 80007b4:	4661      	mov	r1, ip
 80007b6:	2701      	movs	r7, #1
 80007b8:	2938      	cmp	r1, #56	@ 0x38
 80007ba:	dd00      	ble.n	80007be <__aeabi_dadd+0x23a>
 80007bc:	e72e      	b.n	800061c <__aeabi_dadd+0x98>
 80007be:	e718      	b.n	80005f2 <__aeabi_dadd+0x6e>
 80007c0:	4f55      	ldr	r7, [pc, #340]	@ (8000918 <__aeabi_dadd+0x394>)
 80007c2:	1c61      	adds	r1, r4, #1
 80007c4:	4239      	tst	r1, r7
 80007c6:	d000      	beq.n	80007ca <__aeabi_dadd+0x246>
 80007c8:	e0d0      	b.n	800096c <__aeabi_dadd+0x3e8>
 80007ca:	0031      	movs	r1, r6
 80007cc:	4648      	mov	r0, r9
 80007ce:	001f      	movs	r7, r3
 80007d0:	4301      	orrs	r1, r0
 80007d2:	4317      	orrs	r7, r2
 80007d4:	2c00      	cmp	r4, #0
 80007d6:	d000      	beq.n	80007da <__aeabi_dadd+0x256>
 80007d8:	e13d      	b.n	8000a56 <__aeabi_dadd+0x4d2>
 80007da:	2900      	cmp	r1, #0
 80007dc:	d100      	bne.n	80007e0 <__aeabi_dadd+0x25c>
 80007de:	e1bc      	b.n	8000b5a <__aeabi_dadd+0x5d6>
 80007e0:	2f00      	cmp	r7, #0
 80007e2:	d000      	beq.n	80007e6 <__aeabi_dadd+0x262>
 80007e4:	e1bf      	b.n	8000b66 <__aeabi_dadd+0x5e2>
 80007e6:	464b      	mov	r3, r9
 80007e8:	2100      	movs	r1, #0
 80007ea:	08d8      	lsrs	r0, r3, #3
 80007ec:	0777      	lsls	r7, r6, #29
 80007ee:	4307      	orrs	r7, r0
 80007f0:	08f0      	lsrs	r0, r6, #3
 80007f2:	0306      	lsls	r6, r0, #12
 80007f4:	054c      	lsls	r4, r1, #21
 80007f6:	0b36      	lsrs	r6, r6, #12
 80007f8:	0d64      	lsrs	r4, r4, #21
 80007fa:	e00c      	b.n	8000816 <__aeabi_dadd+0x292>
 80007fc:	4f44      	ldr	r7, [pc, #272]	@ (8000910 <__aeabi_dadd+0x38c>)
 80007fe:	42bc      	cmp	r4, r7
 8000800:	d100      	bne.n	8000804 <__aeabi_dadd+0x280>
 8000802:	e08b      	b.n	800091c <__aeabi_dadd+0x398>
 8000804:	2701      	movs	r7, #1
 8000806:	2938      	cmp	r1, #56	@ 0x38
 8000808:	dcb2      	bgt.n	8000770 <__aeabi_dadd+0x1ec>
 800080a:	2780      	movs	r7, #128	@ 0x80
 800080c:	043f      	lsls	r7, r7, #16
 800080e:	433b      	orrs	r3, r7
 8000810:	e79c      	b.n	800074c <__aeabi_dadd+0x1c8>
 8000812:	2600      	movs	r6, #0
 8000814:	2700      	movs	r7, #0
 8000816:	0524      	lsls	r4, r4, #20
 8000818:	4334      	orrs	r4, r6
 800081a:	07ed      	lsls	r5, r5, #31
 800081c:	432c      	orrs	r4, r5
 800081e:	0038      	movs	r0, r7
 8000820:	0021      	movs	r1, r4
 8000822:	b002      	add	sp, #8
 8000824:	bce0      	pop	{r5, r6, r7}
 8000826:	46ba      	mov	sl, r7
 8000828:	46b1      	mov	r9, r6
 800082a:	46a8      	mov	r8, r5
 800082c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800082e:	077b      	lsls	r3, r7, #29
 8000830:	d004      	beq.n	800083c <__aeabi_dadd+0x2b8>
 8000832:	230f      	movs	r3, #15
 8000834:	403b      	ands	r3, r7
 8000836:	2b04      	cmp	r3, #4
 8000838:	d000      	beq.n	800083c <__aeabi_dadd+0x2b8>
 800083a:	e728      	b.n	800068e <__aeabi_dadd+0x10a>
 800083c:	08f8      	lsrs	r0, r7, #3
 800083e:	4b34      	ldr	r3, [pc, #208]	@ (8000910 <__aeabi_dadd+0x38c>)
 8000840:	0777      	lsls	r7, r6, #29
 8000842:	4307      	orrs	r7, r0
 8000844:	08f0      	lsrs	r0, r6, #3
 8000846:	429c      	cmp	r4, r3
 8000848:	d000      	beq.n	800084c <__aeabi_dadd+0x2c8>
 800084a:	e24a      	b.n	8000ce2 <__aeabi_dadd+0x75e>
 800084c:	003b      	movs	r3, r7
 800084e:	4303      	orrs	r3, r0
 8000850:	d059      	beq.n	8000906 <__aeabi_dadd+0x382>
 8000852:	2680      	movs	r6, #128	@ 0x80
 8000854:	0336      	lsls	r6, r6, #12
 8000856:	4306      	orrs	r6, r0
 8000858:	0336      	lsls	r6, r6, #12
 800085a:	4c2d      	ldr	r4, [pc, #180]	@ (8000910 <__aeabi_dadd+0x38c>)
 800085c:	0b36      	lsrs	r6, r6, #12
 800085e:	e7da      	b.n	8000816 <__aeabi_dadd+0x292>
 8000860:	2900      	cmp	r1, #0
 8000862:	d061      	beq.n	8000928 <__aeabi_dadd+0x3a4>
 8000864:	4641      	mov	r1, r8
 8000866:	1b09      	subs	r1, r1, r4
 8000868:	2c00      	cmp	r4, #0
 800086a:	d100      	bne.n	800086e <__aeabi_dadd+0x2ea>
 800086c:	e0b9      	b.n	80009e2 <__aeabi_dadd+0x45e>
 800086e:	4c28      	ldr	r4, [pc, #160]	@ (8000910 <__aeabi_dadd+0x38c>)
 8000870:	45a0      	cmp	r8, r4
 8000872:	d100      	bne.n	8000876 <__aeabi_dadd+0x2f2>
 8000874:	e1a5      	b.n	8000bc2 <__aeabi_dadd+0x63e>
 8000876:	2701      	movs	r7, #1
 8000878:	2938      	cmp	r1, #56	@ 0x38
 800087a:	dc13      	bgt.n	80008a4 <__aeabi_dadd+0x320>
 800087c:	2480      	movs	r4, #128	@ 0x80
 800087e:	0424      	lsls	r4, r4, #16
 8000880:	4326      	orrs	r6, r4
 8000882:	291f      	cmp	r1, #31
 8000884:	dd00      	ble.n	8000888 <__aeabi_dadd+0x304>
 8000886:	e1c8      	b.n	8000c1a <__aeabi_dadd+0x696>
 8000888:	2420      	movs	r4, #32
 800088a:	0037      	movs	r7, r6
 800088c:	4648      	mov	r0, r9
 800088e:	1a64      	subs	r4, r4, r1
 8000890:	40a7      	lsls	r7, r4
 8000892:	40c8      	lsrs	r0, r1
 8000894:	4307      	orrs	r7, r0
 8000896:	4648      	mov	r0, r9
 8000898:	40a0      	lsls	r0, r4
 800089a:	40ce      	lsrs	r6, r1
 800089c:	1e44      	subs	r4, r0, #1
 800089e:	41a0      	sbcs	r0, r4
 80008a0:	199b      	adds	r3, r3, r6
 80008a2:	4307      	orrs	r7, r0
 80008a4:	18bf      	adds	r7, r7, r2
 80008a6:	4297      	cmp	r7, r2
 80008a8:	4192      	sbcs	r2, r2
 80008aa:	4252      	negs	r2, r2
 80008ac:	4644      	mov	r4, r8
 80008ae:	18d6      	adds	r6, r2, r3
 80008b0:	e763      	b.n	800077a <__aeabi_dadd+0x1f6>
 80008b2:	0038      	movs	r0, r7
 80008b4:	f001 fe06 	bl	80024c4 <__clzsi2>
 80008b8:	0003      	movs	r3, r0
 80008ba:	3318      	adds	r3, #24
 80008bc:	2b1f      	cmp	r3, #31
 80008be:	dc00      	bgt.n	80008c2 <__aeabi_dadd+0x33e>
 80008c0:	e6bf      	b.n	8000642 <__aeabi_dadd+0xbe>
 80008c2:	003a      	movs	r2, r7
 80008c4:	3808      	subs	r0, #8
 80008c6:	4082      	lsls	r2, r0
 80008c8:	429c      	cmp	r4, r3
 80008ca:	dd00      	ble.n	80008ce <__aeabi_dadd+0x34a>
 80008cc:	e083      	b.n	80009d6 <__aeabi_dadd+0x452>
 80008ce:	1b1b      	subs	r3, r3, r4
 80008d0:	1c58      	adds	r0, r3, #1
 80008d2:	281f      	cmp	r0, #31
 80008d4:	dc00      	bgt.n	80008d8 <__aeabi_dadd+0x354>
 80008d6:	e1b4      	b.n	8000c42 <__aeabi_dadd+0x6be>
 80008d8:	0017      	movs	r7, r2
 80008da:	3b1f      	subs	r3, #31
 80008dc:	40df      	lsrs	r7, r3
 80008de:	2820      	cmp	r0, #32
 80008e0:	d005      	beq.n	80008ee <__aeabi_dadd+0x36a>
 80008e2:	2340      	movs	r3, #64	@ 0x40
 80008e4:	1a1b      	subs	r3, r3, r0
 80008e6:	409a      	lsls	r2, r3
 80008e8:	1e53      	subs	r3, r2, #1
 80008ea:	419a      	sbcs	r2, r3
 80008ec:	4317      	orrs	r7, r2
 80008ee:	2400      	movs	r4, #0
 80008f0:	2f00      	cmp	r7, #0
 80008f2:	d00a      	beq.n	800090a <__aeabi_dadd+0x386>
 80008f4:	077b      	lsls	r3, r7, #29
 80008f6:	d000      	beq.n	80008fa <__aeabi_dadd+0x376>
 80008f8:	e6c4      	b.n	8000684 <__aeabi_dadd+0x100>
 80008fa:	0026      	movs	r6, r4
 80008fc:	e79e      	b.n	800083c <__aeabi_dadd+0x2b8>
 80008fe:	464b      	mov	r3, r9
 8000900:	000c      	movs	r4, r1
 8000902:	08d8      	lsrs	r0, r3, #3
 8000904:	e79b      	b.n	800083e <__aeabi_dadd+0x2ba>
 8000906:	2700      	movs	r7, #0
 8000908:	4c01      	ldr	r4, [pc, #4]	@ (8000910 <__aeabi_dadd+0x38c>)
 800090a:	2600      	movs	r6, #0
 800090c:	e783      	b.n	8000816 <__aeabi_dadd+0x292>
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	000007ff 	.word	0x000007ff
 8000914:	ff7fffff 	.word	0xff7fffff
 8000918:	000007fe 	.word	0x000007fe
 800091c:	464b      	mov	r3, r9
 800091e:	0777      	lsls	r7, r6, #29
 8000920:	08d8      	lsrs	r0, r3, #3
 8000922:	4307      	orrs	r7, r0
 8000924:	08f0      	lsrs	r0, r6, #3
 8000926:	e791      	b.n	800084c <__aeabi_dadd+0x2c8>
 8000928:	4fcd      	ldr	r7, [pc, #820]	@ (8000c60 <__aeabi_dadd+0x6dc>)
 800092a:	1c61      	adds	r1, r4, #1
 800092c:	4239      	tst	r1, r7
 800092e:	d16b      	bne.n	8000a08 <__aeabi_dadd+0x484>
 8000930:	0031      	movs	r1, r6
 8000932:	4648      	mov	r0, r9
 8000934:	4301      	orrs	r1, r0
 8000936:	2c00      	cmp	r4, #0
 8000938:	d000      	beq.n	800093c <__aeabi_dadd+0x3b8>
 800093a:	e14b      	b.n	8000bd4 <__aeabi_dadd+0x650>
 800093c:	001f      	movs	r7, r3
 800093e:	4317      	orrs	r7, r2
 8000940:	2900      	cmp	r1, #0
 8000942:	d100      	bne.n	8000946 <__aeabi_dadd+0x3c2>
 8000944:	e181      	b.n	8000c4a <__aeabi_dadd+0x6c6>
 8000946:	2f00      	cmp	r7, #0
 8000948:	d100      	bne.n	800094c <__aeabi_dadd+0x3c8>
 800094a:	e74c      	b.n	80007e6 <__aeabi_dadd+0x262>
 800094c:	444a      	add	r2, r9
 800094e:	454a      	cmp	r2, r9
 8000950:	4180      	sbcs	r0, r0
 8000952:	18f6      	adds	r6, r6, r3
 8000954:	4240      	negs	r0, r0
 8000956:	1836      	adds	r6, r6, r0
 8000958:	0233      	lsls	r3, r6, #8
 800095a:	d500      	bpl.n	800095e <__aeabi_dadd+0x3da>
 800095c:	e1b0      	b.n	8000cc0 <__aeabi_dadd+0x73c>
 800095e:	0017      	movs	r7, r2
 8000960:	4691      	mov	r9, r2
 8000962:	4337      	orrs	r7, r6
 8000964:	d000      	beq.n	8000968 <__aeabi_dadd+0x3e4>
 8000966:	e73e      	b.n	80007e6 <__aeabi_dadd+0x262>
 8000968:	2600      	movs	r6, #0
 800096a:	e754      	b.n	8000816 <__aeabi_dadd+0x292>
 800096c:	4649      	mov	r1, r9
 800096e:	1a89      	subs	r1, r1, r2
 8000970:	4688      	mov	r8, r1
 8000972:	45c1      	cmp	r9, r8
 8000974:	41bf      	sbcs	r7, r7
 8000976:	1af1      	subs	r1, r6, r3
 8000978:	427f      	negs	r7, r7
 800097a:	1bc9      	subs	r1, r1, r7
 800097c:	020f      	lsls	r7, r1, #8
 800097e:	d461      	bmi.n	8000a44 <__aeabi_dadd+0x4c0>
 8000980:	4647      	mov	r7, r8
 8000982:	430f      	orrs	r7, r1
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x404>
 8000986:	e0bd      	b.n	8000b04 <__aeabi_dadd+0x580>
 8000988:	000e      	movs	r6, r1
 800098a:	4647      	mov	r7, r8
 800098c:	e651      	b.n	8000632 <__aeabi_dadd+0xae>
 800098e:	4cb5      	ldr	r4, [pc, #724]	@ (8000c64 <__aeabi_dadd+0x6e0>)
 8000990:	45a0      	cmp	r8, r4
 8000992:	d100      	bne.n	8000996 <__aeabi_dadd+0x412>
 8000994:	e100      	b.n	8000b98 <__aeabi_dadd+0x614>
 8000996:	2701      	movs	r7, #1
 8000998:	2938      	cmp	r1, #56	@ 0x38
 800099a:	dd00      	ble.n	800099e <__aeabi_dadd+0x41a>
 800099c:	e6b8      	b.n	8000710 <__aeabi_dadd+0x18c>
 800099e:	2480      	movs	r4, #128	@ 0x80
 80009a0:	0424      	lsls	r4, r4, #16
 80009a2:	4326      	orrs	r6, r4
 80009a4:	e6a3      	b.n	80006ee <__aeabi_dadd+0x16a>
 80009a6:	4eb0      	ldr	r6, [pc, #704]	@ (8000c68 <__aeabi_dadd+0x6e4>)
 80009a8:	1ae4      	subs	r4, r4, r3
 80009aa:	4016      	ands	r6, r2
 80009ac:	077b      	lsls	r3, r7, #29
 80009ae:	d000      	beq.n	80009b2 <__aeabi_dadd+0x42e>
 80009b0:	e73f      	b.n	8000832 <__aeabi_dadd+0x2ae>
 80009b2:	e743      	b.n	800083c <__aeabi_dadd+0x2b8>
 80009b4:	000f      	movs	r7, r1
 80009b6:	0018      	movs	r0, r3
 80009b8:	3f20      	subs	r7, #32
 80009ba:	40f8      	lsrs	r0, r7
 80009bc:	4684      	mov	ip, r0
 80009be:	2920      	cmp	r1, #32
 80009c0:	d003      	beq.n	80009ca <__aeabi_dadd+0x446>
 80009c2:	2740      	movs	r7, #64	@ 0x40
 80009c4:	1a79      	subs	r1, r7, r1
 80009c6:	408b      	lsls	r3, r1
 80009c8:	431a      	orrs	r2, r3
 80009ca:	1e53      	subs	r3, r2, #1
 80009cc:	419a      	sbcs	r2, r3
 80009ce:	4663      	mov	r3, ip
 80009d0:	0017      	movs	r7, r2
 80009d2:	431f      	orrs	r7, r3
 80009d4:	e622      	b.n	800061c <__aeabi_dadd+0x98>
 80009d6:	48a4      	ldr	r0, [pc, #656]	@ (8000c68 <__aeabi_dadd+0x6e4>)
 80009d8:	1ae1      	subs	r1, r4, r3
 80009da:	4010      	ands	r0, r2
 80009dc:	0747      	lsls	r7, r0, #29
 80009de:	08c0      	lsrs	r0, r0, #3
 80009e0:	e707      	b.n	80007f2 <__aeabi_dadd+0x26e>
 80009e2:	0034      	movs	r4, r6
 80009e4:	4648      	mov	r0, r9
 80009e6:	4304      	orrs	r4, r0
 80009e8:	d100      	bne.n	80009ec <__aeabi_dadd+0x468>
 80009ea:	e0fa      	b.n	8000be2 <__aeabi_dadd+0x65e>
 80009ec:	1e4c      	subs	r4, r1, #1
 80009ee:	2901      	cmp	r1, #1
 80009f0:	d100      	bne.n	80009f4 <__aeabi_dadd+0x470>
 80009f2:	e0d7      	b.n	8000ba4 <__aeabi_dadd+0x620>
 80009f4:	4f9b      	ldr	r7, [pc, #620]	@ (8000c64 <__aeabi_dadd+0x6e0>)
 80009f6:	42b9      	cmp	r1, r7
 80009f8:	d100      	bne.n	80009fc <__aeabi_dadd+0x478>
 80009fa:	e0e2      	b.n	8000bc2 <__aeabi_dadd+0x63e>
 80009fc:	2701      	movs	r7, #1
 80009fe:	2c38      	cmp	r4, #56	@ 0x38
 8000a00:	dd00      	ble.n	8000a04 <__aeabi_dadd+0x480>
 8000a02:	e74f      	b.n	80008a4 <__aeabi_dadd+0x320>
 8000a04:	0021      	movs	r1, r4
 8000a06:	e73c      	b.n	8000882 <__aeabi_dadd+0x2fe>
 8000a08:	4c96      	ldr	r4, [pc, #600]	@ (8000c64 <__aeabi_dadd+0x6e0>)
 8000a0a:	42a1      	cmp	r1, r4
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_dadd+0x48c>
 8000a0e:	e0dd      	b.n	8000bcc <__aeabi_dadd+0x648>
 8000a10:	444a      	add	r2, r9
 8000a12:	454a      	cmp	r2, r9
 8000a14:	4180      	sbcs	r0, r0
 8000a16:	18f3      	adds	r3, r6, r3
 8000a18:	4240      	negs	r0, r0
 8000a1a:	1818      	adds	r0, r3, r0
 8000a1c:	07c7      	lsls	r7, r0, #31
 8000a1e:	0852      	lsrs	r2, r2, #1
 8000a20:	4317      	orrs	r7, r2
 8000a22:	0846      	lsrs	r6, r0, #1
 8000a24:	0752      	lsls	r2, r2, #29
 8000a26:	d005      	beq.n	8000a34 <__aeabi_dadd+0x4b0>
 8000a28:	220f      	movs	r2, #15
 8000a2a:	000c      	movs	r4, r1
 8000a2c:	403a      	ands	r2, r7
 8000a2e:	2a04      	cmp	r2, #4
 8000a30:	d000      	beq.n	8000a34 <__aeabi_dadd+0x4b0>
 8000a32:	e62c      	b.n	800068e <__aeabi_dadd+0x10a>
 8000a34:	0776      	lsls	r6, r6, #29
 8000a36:	08ff      	lsrs	r7, r7, #3
 8000a38:	4337      	orrs	r7, r6
 8000a3a:	0900      	lsrs	r0, r0, #4
 8000a3c:	e6d9      	b.n	80007f2 <__aeabi_dadd+0x26e>
 8000a3e:	2700      	movs	r7, #0
 8000a40:	2600      	movs	r6, #0
 8000a42:	e6e8      	b.n	8000816 <__aeabi_dadd+0x292>
 8000a44:	4649      	mov	r1, r9
 8000a46:	1a57      	subs	r7, r2, r1
 8000a48:	42ba      	cmp	r2, r7
 8000a4a:	4192      	sbcs	r2, r2
 8000a4c:	1b9e      	subs	r6, r3, r6
 8000a4e:	4252      	negs	r2, r2
 8000a50:	4665      	mov	r5, ip
 8000a52:	1ab6      	subs	r6, r6, r2
 8000a54:	e5ed      	b.n	8000632 <__aeabi_dadd+0xae>
 8000a56:	2900      	cmp	r1, #0
 8000a58:	d000      	beq.n	8000a5c <__aeabi_dadd+0x4d8>
 8000a5a:	e0c6      	b.n	8000bea <__aeabi_dadd+0x666>
 8000a5c:	2f00      	cmp	r7, #0
 8000a5e:	d167      	bne.n	8000b30 <__aeabi_dadd+0x5ac>
 8000a60:	2680      	movs	r6, #128	@ 0x80
 8000a62:	2500      	movs	r5, #0
 8000a64:	4c7f      	ldr	r4, [pc, #508]	@ (8000c64 <__aeabi_dadd+0x6e0>)
 8000a66:	0336      	lsls	r6, r6, #12
 8000a68:	e6d5      	b.n	8000816 <__aeabi_dadd+0x292>
 8000a6a:	4665      	mov	r5, ip
 8000a6c:	000c      	movs	r4, r1
 8000a6e:	001e      	movs	r6, r3
 8000a70:	08d0      	lsrs	r0, r2, #3
 8000a72:	e6e4      	b.n	800083e <__aeabi_dadd+0x2ba>
 8000a74:	444a      	add	r2, r9
 8000a76:	454a      	cmp	r2, r9
 8000a78:	4180      	sbcs	r0, r0
 8000a7a:	18f3      	adds	r3, r6, r3
 8000a7c:	4240      	negs	r0, r0
 8000a7e:	1818      	adds	r0, r3, r0
 8000a80:	0011      	movs	r1, r2
 8000a82:	0203      	lsls	r3, r0, #8
 8000a84:	d400      	bmi.n	8000a88 <__aeabi_dadd+0x504>
 8000a86:	e096      	b.n	8000bb6 <__aeabi_dadd+0x632>
 8000a88:	4b77      	ldr	r3, [pc, #476]	@ (8000c68 <__aeabi_dadd+0x6e4>)
 8000a8a:	0849      	lsrs	r1, r1, #1
 8000a8c:	4018      	ands	r0, r3
 8000a8e:	07c3      	lsls	r3, r0, #31
 8000a90:	430b      	orrs	r3, r1
 8000a92:	0844      	lsrs	r4, r0, #1
 8000a94:	0749      	lsls	r1, r1, #29
 8000a96:	d100      	bne.n	8000a9a <__aeabi_dadd+0x516>
 8000a98:	e129      	b.n	8000cee <__aeabi_dadd+0x76a>
 8000a9a:	220f      	movs	r2, #15
 8000a9c:	401a      	ands	r2, r3
 8000a9e:	2a04      	cmp	r2, #4
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_dadd+0x520>
 8000aa2:	e0ea      	b.n	8000c7a <__aeabi_dadd+0x6f6>
 8000aa4:	1d1f      	adds	r7, r3, #4
 8000aa6:	429f      	cmp	r7, r3
 8000aa8:	41b6      	sbcs	r6, r6
 8000aaa:	4276      	negs	r6, r6
 8000aac:	1936      	adds	r6, r6, r4
 8000aae:	2402      	movs	r4, #2
 8000ab0:	e6c4      	b.n	800083c <__aeabi_dadd+0x2b8>
 8000ab2:	4649      	mov	r1, r9
 8000ab4:	1a8f      	subs	r7, r1, r2
 8000ab6:	45b9      	cmp	r9, r7
 8000ab8:	4180      	sbcs	r0, r0
 8000aba:	1af6      	subs	r6, r6, r3
 8000abc:	4240      	negs	r0, r0
 8000abe:	1a36      	subs	r6, r6, r0
 8000ac0:	0233      	lsls	r3, r6, #8
 8000ac2:	d406      	bmi.n	8000ad2 <__aeabi_dadd+0x54e>
 8000ac4:	0773      	lsls	r3, r6, #29
 8000ac6:	08ff      	lsrs	r7, r7, #3
 8000ac8:	2101      	movs	r1, #1
 8000aca:	431f      	orrs	r7, r3
 8000acc:	08f0      	lsrs	r0, r6, #3
 8000ace:	e690      	b.n	80007f2 <__aeabi_dadd+0x26e>
 8000ad0:	4665      	mov	r5, ip
 8000ad2:	2401      	movs	r4, #1
 8000ad4:	e5ab      	b.n	800062e <__aeabi_dadd+0xaa>
 8000ad6:	464b      	mov	r3, r9
 8000ad8:	0777      	lsls	r7, r6, #29
 8000ada:	08d8      	lsrs	r0, r3, #3
 8000adc:	4307      	orrs	r7, r0
 8000ade:	08f0      	lsrs	r0, r6, #3
 8000ae0:	e6b4      	b.n	800084c <__aeabi_dadd+0x2c8>
 8000ae2:	000f      	movs	r7, r1
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	3f20      	subs	r7, #32
 8000ae8:	40f8      	lsrs	r0, r7
 8000aea:	4684      	mov	ip, r0
 8000aec:	2920      	cmp	r1, #32
 8000aee:	d003      	beq.n	8000af8 <__aeabi_dadd+0x574>
 8000af0:	2740      	movs	r7, #64	@ 0x40
 8000af2:	1a79      	subs	r1, r7, r1
 8000af4:	408b      	lsls	r3, r1
 8000af6:	431a      	orrs	r2, r3
 8000af8:	1e53      	subs	r3, r2, #1
 8000afa:	419a      	sbcs	r2, r3
 8000afc:	4663      	mov	r3, ip
 8000afe:	0017      	movs	r7, r2
 8000b00:	431f      	orrs	r7, r3
 8000b02:	e635      	b.n	8000770 <__aeabi_dadd+0x1ec>
 8000b04:	2500      	movs	r5, #0
 8000b06:	2400      	movs	r4, #0
 8000b08:	2600      	movs	r6, #0
 8000b0a:	e684      	b.n	8000816 <__aeabi_dadd+0x292>
 8000b0c:	000c      	movs	r4, r1
 8000b0e:	0035      	movs	r5, r6
 8000b10:	3c20      	subs	r4, #32
 8000b12:	40e5      	lsrs	r5, r4
 8000b14:	2920      	cmp	r1, #32
 8000b16:	d005      	beq.n	8000b24 <__aeabi_dadd+0x5a0>
 8000b18:	2440      	movs	r4, #64	@ 0x40
 8000b1a:	1a61      	subs	r1, r4, r1
 8000b1c:	408e      	lsls	r6, r1
 8000b1e:	4649      	mov	r1, r9
 8000b20:	4331      	orrs	r1, r6
 8000b22:	4689      	mov	r9, r1
 8000b24:	4648      	mov	r0, r9
 8000b26:	1e41      	subs	r1, r0, #1
 8000b28:	4188      	sbcs	r0, r1
 8000b2a:	0007      	movs	r7, r0
 8000b2c:	432f      	orrs	r7, r5
 8000b2e:	e5ef      	b.n	8000710 <__aeabi_dadd+0x18c>
 8000b30:	08d2      	lsrs	r2, r2, #3
 8000b32:	075f      	lsls	r7, r3, #29
 8000b34:	4665      	mov	r5, ip
 8000b36:	4317      	orrs	r7, r2
 8000b38:	08d8      	lsrs	r0, r3, #3
 8000b3a:	e687      	b.n	800084c <__aeabi_dadd+0x2c8>
 8000b3c:	1a17      	subs	r7, r2, r0
 8000b3e:	42ba      	cmp	r2, r7
 8000b40:	4192      	sbcs	r2, r2
 8000b42:	1b9e      	subs	r6, r3, r6
 8000b44:	4252      	negs	r2, r2
 8000b46:	1ab6      	subs	r6, r6, r2
 8000b48:	0233      	lsls	r3, r6, #8
 8000b4a:	d4c1      	bmi.n	8000ad0 <__aeabi_dadd+0x54c>
 8000b4c:	0773      	lsls	r3, r6, #29
 8000b4e:	08ff      	lsrs	r7, r7, #3
 8000b50:	4665      	mov	r5, ip
 8000b52:	2101      	movs	r1, #1
 8000b54:	431f      	orrs	r7, r3
 8000b56:	08f0      	lsrs	r0, r6, #3
 8000b58:	e64b      	b.n	80007f2 <__aeabi_dadd+0x26e>
 8000b5a:	2f00      	cmp	r7, #0
 8000b5c:	d07b      	beq.n	8000c56 <__aeabi_dadd+0x6d2>
 8000b5e:	4665      	mov	r5, ip
 8000b60:	001e      	movs	r6, r3
 8000b62:	4691      	mov	r9, r2
 8000b64:	e63f      	b.n	80007e6 <__aeabi_dadd+0x262>
 8000b66:	1a81      	subs	r1, r0, r2
 8000b68:	4688      	mov	r8, r1
 8000b6a:	45c1      	cmp	r9, r8
 8000b6c:	41a4      	sbcs	r4, r4
 8000b6e:	1af1      	subs	r1, r6, r3
 8000b70:	4264      	negs	r4, r4
 8000b72:	1b09      	subs	r1, r1, r4
 8000b74:	2480      	movs	r4, #128	@ 0x80
 8000b76:	0424      	lsls	r4, r4, #16
 8000b78:	4221      	tst	r1, r4
 8000b7a:	d077      	beq.n	8000c6c <__aeabi_dadd+0x6e8>
 8000b7c:	1a10      	subs	r0, r2, r0
 8000b7e:	4282      	cmp	r2, r0
 8000b80:	4192      	sbcs	r2, r2
 8000b82:	0007      	movs	r7, r0
 8000b84:	1b9e      	subs	r6, r3, r6
 8000b86:	4252      	negs	r2, r2
 8000b88:	1ab6      	subs	r6, r6, r2
 8000b8a:	4337      	orrs	r7, r6
 8000b8c:	d000      	beq.n	8000b90 <__aeabi_dadd+0x60c>
 8000b8e:	e0a0      	b.n	8000cd2 <__aeabi_dadd+0x74e>
 8000b90:	4665      	mov	r5, ip
 8000b92:	2400      	movs	r4, #0
 8000b94:	2600      	movs	r6, #0
 8000b96:	e63e      	b.n	8000816 <__aeabi_dadd+0x292>
 8000b98:	075f      	lsls	r7, r3, #29
 8000b9a:	08d2      	lsrs	r2, r2, #3
 8000b9c:	4665      	mov	r5, ip
 8000b9e:	4317      	orrs	r7, r2
 8000ba0:	08d8      	lsrs	r0, r3, #3
 8000ba2:	e653      	b.n	800084c <__aeabi_dadd+0x2c8>
 8000ba4:	1881      	adds	r1, r0, r2
 8000ba6:	4291      	cmp	r1, r2
 8000ba8:	4192      	sbcs	r2, r2
 8000baa:	18f0      	adds	r0, r6, r3
 8000bac:	4252      	negs	r2, r2
 8000bae:	1880      	adds	r0, r0, r2
 8000bb0:	0203      	lsls	r3, r0, #8
 8000bb2:	d500      	bpl.n	8000bb6 <__aeabi_dadd+0x632>
 8000bb4:	e768      	b.n	8000a88 <__aeabi_dadd+0x504>
 8000bb6:	0747      	lsls	r7, r0, #29
 8000bb8:	08c9      	lsrs	r1, r1, #3
 8000bba:	430f      	orrs	r7, r1
 8000bbc:	08c0      	lsrs	r0, r0, #3
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	e617      	b.n	80007f2 <__aeabi_dadd+0x26e>
 8000bc2:	08d2      	lsrs	r2, r2, #3
 8000bc4:	075f      	lsls	r7, r3, #29
 8000bc6:	4317      	orrs	r7, r2
 8000bc8:	08d8      	lsrs	r0, r3, #3
 8000bca:	e63f      	b.n	800084c <__aeabi_dadd+0x2c8>
 8000bcc:	000c      	movs	r4, r1
 8000bce:	2600      	movs	r6, #0
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	e620      	b.n	8000816 <__aeabi_dadd+0x292>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	d156      	bne.n	8000c86 <__aeabi_dadd+0x702>
 8000bd8:	075f      	lsls	r7, r3, #29
 8000bda:	08d2      	lsrs	r2, r2, #3
 8000bdc:	4317      	orrs	r7, r2
 8000bde:	08d8      	lsrs	r0, r3, #3
 8000be0:	e634      	b.n	800084c <__aeabi_dadd+0x2c8>
 8000be2:	000c      	movs	r4, r1
 8000be4:	001e      	movs	r6, r3
 8000be6:	08d0      	lsrs	r0, r2, #3
 8000be8:	e629      	b.n	800083e <__aeabi_dadd+0x2ba>
 8000bea:	08c1      	lsrs	r1, r0, #3
 8000bec:	0770      	lsls	r0, r6, #29
 8000bee:	4301      	orrs	r1, r0
 8000bf0:	08f0      	lsrs	r0, r6, #3
 8000bf2:	2f00      	cmp	r7, #0
 8000bf4:	d062      	beq.n	8000cbc <__aeabi_dadd+0x738>
 8000bf6:	2480      	movs	r4, #128	@ 0x80
 8000bf8:	0324      	lsls	r4, r4, #12
 8000bfa:	4220      	tst	r0, r4
 8000bfc:	d007      	beq.n	8000c0e <__aeabi_dadd+0x68a>
 8000bfe:	08de      	lsrs	r6, r3, #3
 8000c00:	4226      	tst	r6, r4
 8000c02:	d104      	bne.n	8000c0e <__aeabi_dadd+0x68a>
 8000c04:	4665      	mov	r5, ip
 8000c06:	0030      	movs	r0, r6
 8000c08:	08d1      	lsrs	r1, r2, #3
 8000c0a:	075b      	lsls	r3, r3, #29
 8000c0c:	4319      	orrs	r1, r3
 8000c0e:	0f4f      	lsrs	r7, r1, #29
 8000c10:	00c9      	lsls	r1, r1, #3
 8000c12:	08c9      	lsrs	r1, r1, #3
 8000c14:	077f      	lsls	r7, r7, #29
 8000c16:	430f      	orrs	r7, r1
 8000c18:	e618      	b.n	800084c <__aeabi_dadd+0x2c8>
 8000c1a:	000c      	movs	r4, r1
 8000c1c:	0030      	movs	r0, r6
 8000c1e:	3c20      	subs	r4, #32
 8000c20:	40e0      	lsrs	r0, r4
 8000c22:	4684      	mov	ip, r0
 8000c24:	2920      	cmp	r1, #32
 8000c26:	d005      	beq.n	8000c34 <__aeabi_dadd+0x6b0>
 8000c28:	2440      	movs	r4, #64	@ 0x40
 8000c2a:	1a61      	subs	r1, r4, r1
 8000c2c:	408e      	lsls	r6, r1
 8000c2e:	4649      	mov	r1, r9
 8000c30:	4331      	orrs	r1, r6
 8000c32:	4689      	mov	r9, r1
 8000c34:	4648      	mov	r0, r9
 8000c36:	1e41      	subs	r1, r0, #1
 8000c38:	4188      	sbcs	r0, r1
 8000c3a:	4661      	mov	r1, ip
 8000c3c:	0007      	movs	r7, r0
 8000c3e:	430f      	orrs	r7, r1
 8000c40:	e630      	b.n	80008a4 <__aeabi_dadd+0x320>
 8000c42:	2120      	movs	r1, #32
 8000c44:	2700      	movs	r7, #0
 8000c46:	1a09      	subs	r1, r1, r0
 8000c48:	e50e      	b.n	8000668 <__aeabi_dadd+0xe4>
 8000c4a:	001e      	movs	r6, r3
 8000c4c:	2f00      	cmp	r7, #0
 8000c4e:	d000      	beq.n	8000c52 <__aeabi_dadd+0x6ce>
 8000c50:	e522      	b.n	8000698 <__aeabi_dadd+0x114>
 8000c52:	2400      	movs	r4, #0
 8000c54:	e758      	b.n	8000b08 <__aeabi_dadd+0x584>
 8000c56:	2500      	movs	r5, #0
 8000c58:	2400      	movs	r4, #0
 8000c5a:	2600      	movs	r6, #0
 8000c5c:	e5db      	b.n	8000816 <__aeabi_dadd+0x292>
 8000c5e:	46c0      	nop			@ (mov r8, r8)
 8000c60:	000007fe 	.word	0x000007fe
 8000c64:	000007ff 	.word	0x000007ff
 8000c68:	ff7fffff 	.word	0xff7fffff
 8000c6c:	4647      	mov	r7, r8
 8000c6e:	430f      	orrs	r7, r1
 8000c70:	d100      	bne.n	8000c74 <__aeabi_dadd+0x6f0>
 8000c72:	e747      	b.n	8000b04 <__aeabi_dadd+0x580>
 8000c74:	000e      	movs	r6, r1
 8000c76:	46c1      	mov	r9, r8
 8000c78:	e5b5      	b.n	80007e6 <__aeabi_dadd+0x262>
 8000c7a:	08df      	lsrs	r7, r3, #3
 8000c7c:	0764      	lsls	r4, r4, #29
 8000c7e:	2102      	movs	r1, #2
 8000c80:	4327      	orrs	r7, r4
 8000c82:	0900      	lsrs	r0, r0, #4
 8000c84:	e5b5      	b.n	80007f2 <__aeabi_dadd+0x26e>
 8000c86:	0019      	movs	r1, r3
 8000c88:	08c0      	lsrs	r0, r0, #3
 8000c8a:	0777      	lsls	r7, r6, #29
 8000c8c:	4307      	orrs	r7, r0
 8000c8e:	4311      	orrs	r1, r2
 8000c90:	08f0      	lsrs	r0, r6, #3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dadd+0x714>
 8000c96:	e5d9      	b.n	800084c <__aeabi_dadd+0x2c8>
 8000c98:	2180      	movs	r1, #128	@ 0x80
 8000c9a:	0309      	lsls	r1, r1, #12
 8000c9c:	4208      	tst	r0, r1
 8000c9e:	d007      	beq.n	8000cb0 <__aeabi_dadd+0x72c>
 8000ca0:	08dc      	lsrs	r4, r3, #3
 8000ca2:	420c      	tst	r4, r1
 8000ca4:	d104      	bne.n	8000cb0 <__aeabi_dadd+0x72c>
 8000ca6:	08d2      	lsrs	r2, r2, #3
 8000ca8:	075b      	lsls	r3, r3, #29
 8000caa:	431a      	orrs	r2, r3
 8000cac:	0017      	movs	r7, r2
 8000cae:	0020      	movs	r0, r4
 8000cb0:	0f7b      	lsrs	r3, r7, #29
 8000cb2:	00ff      	lsls	r7, r7, #3
 8000cb4:	08ff      	lsrs	r7, r7, #3
 8000cb6:	075b      	lsls	r3, r3, #29
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e5c7      	b.n	800084c <__aeabi_dadd+0x2c8>
 8000cbc:	000f      	movs	r7, r1
 8000cbe:	e5c5      	b.n	800084c <__aeabi_dadd+0x2c8>
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <__aeabi_dadd+0x788>)
 8000cc2:	08d2      	lsrs	r2, r2, #3
 8000cc4:	4033      	ands	r3, r6
 8000cc6:	075f      	lsls	r7, r3, #29
 8000cc8:	025b      	lsls	r3, r3, #9
 8000cca:	2401      	movs	r4, #1
 8000ccc:	4317      	orrs	r7, r2
 8000cce:	0b1e      	lsrs	r6, r3, #12
 8000cd0:	e5a1      	b.n	8000816 <__aeabi_dadd+0x292>
 8000cd2:	4226      	tst	r6, r4
 8000cd4:	d012      	beq.n	8000cfc <__aeabi_dadd+0x778>
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d0c <__aeabi_dadd+0x788>)
 8000cd8:	4665      	mov	r5, ip
 8000cda:	0002      	movs	r2, r0
 8000cdc:	2401      	movs	r4, #1
 8000cde:	401e      	ands	r6, r3
 8000ce0:	e4e6      	b.n	80006b0 <__aeabi_dadd+0x12c>
 8000ce2:	0021      	movs	r1, r4
 8000ce4:	e585      	b.n	80007f2 <__aeabi_dadd+0x26e>
 8000ce6:	0017      	movs	r7, r2
 8000ce8:	e5a8      	b.n	800083c <__aeabi_dadd+0x2b8>
 8000cea:	003a      	movs	r2, r7
 8000cec:	e4d4      	b.n	8000698 <__aeabi_dadd+0x114>
 8000cee:	08db      	lsrs	r3, r3, #3
 8000cf0:	0764      	lsls	r4, r4, #29
 8000cf2:	431c      	orrs	r4, r3
 8000cf4:	0027      	movs	r7, r4
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	0900      	lsrs	r0, r0, #4
 8000cfa:	e57a      	b.n	80007f2 <__aeabi_dadd+0x26e>
 8000cfc:	08c0      	lsrs	r0, r0, #3
 8000cfe:	0777      	lsls	r7, r6, #29
 8000d00:	4307      	orrs	r7, r0
 8000d02:	4665      	mov	r5, ip
 8000d04:	2100      	movs	r1, #0
 8000d06:	08f0      	lsrs	r0, r6, #3
 8000d08:	e573      	b.n	80007f2 <__aeabi_dadd+0x26e>
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	ff7fffff 	.word	0xff7fffff

08000d10 <__aeabi_ddiv>:
 8000d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d12:	46de      	mov	lr, fp
 8000d14:	4645      	mov	r5, r8
 8000d16:	4657      	mov	r7, sl
 8000d18:	464e      	mov	r6, r9
 8000d1a:	b5e0      	push	{r5, r6, r7, lr}
 8000d1c:	b087      	sub	sp, #28
 8000d1e:	9200      	str	r2, [sp, #0]
 8000d20:	9301      	str	r3, [sp, #4]
 8000d22:	030b      	lsls	r3, r1, #12
 8000d24:	0b1b      	lsrs	r3, r3, #12
 8000d26:	469b      	mov	fp, r3
 8000d28:	0fca      	lsrs	r2, r1, #31
 8000d2a:	004b      	lsls	r3, r1, #1
 8000d2c:	0004      	movs	r4, r0
 8000d2e:	4680      	mov	r8, r0
 8000d30:	0d5b      	lsrs	r3, r3, #21
 8000d32:	9202      	str	r2, [sp, #8]
 8000d34:	d100      	bne.n	8000d38 <__aeabi_ddiv+0x28>
 8000d36:	e098      	b.n	8000e6a <__aeabi_ddiv+0x15a>
 8000d38:	4a7c      	ldr	r2, [pc, #496]	@ (8000f2c <__aeabi_ddiv+0x21c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d037      	beq.n	8000dae <__aeabi_ddiv+0x9e>
 8000d3e:	4659      	mov	r1, fp
 8000d40:	0f42      	lsrs	r2, r0, #29
 8000d42:	00c9      	lsls	r1, r1, #3
 8000d44:	430a      	orrs	r2, r1
 8000d46:	2180      	movs	r1, #128	@ 0x80
 8000d48:	0409      	lsls	r1, r1, #16
 8000d4a:	4311      	orrs	r1, r2
 8000d4c:	00c2      	lsls	r2, r0, #3
 8000d4e:	4690      	mov	r8, r2
 8000d50:	4a77      	ldr	r2, [pc, #476]	@ (8000f30 <__aeabi_ddiv+0x220>)
 8000d52:	4689      	mov	r9, r1
 8000d54:	4692      	mov	sl, r2
 8000d56:	449a      	add	sl, r3
 8000d58:	2300      	movs	r3, #0
 8000d5a:	2400      	movs	r4, #0
 8000d5c:	9303      	str	r3, [sp, #12]
 8000d5e:	9e00      	ldr	r6, [sp, #0]
 8000d60:	9f01      	ldr	r7, [sp, #4]
 8000d62:	033b      	lsls	r3, r7, #12
 8000d64:	0b1b      	lsrs	r3, r3, #12
 8000d66:	469b      	mov	fp, r3
 8000d68:	007b      	lsls	r3, r7, #1
 8000d6a:	0030      	movs	r0, r6
 8000d6c:	0d5b      	lsrs	r3, r3, #21
 8000d6e:	0ffd      	lsrs	r5, r7, #31
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d059      	beq.n	8000e28 <__aeabi_ddiv+0x118>
 8000d74:	4a6d      	ldr	r2, [pc, #436]	@ (8000f2c <__aeabi_ddiv+0x21c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d048      	beq.n	8000e0c <__aeabi_ddiv+0xfc>
 8000d7a:	4659      	mov	r1, fp
 8000d7c:	0f72      	lsrs	r2, r6, #29
 8000d7e:	00c9      	lsls	r1, r1, #3
 8000d80:	430a      	orrs	r2, r1
 8000d82:	2180      	movs	r1, #128	@ 0x80
 8000d84:	0409      	lsls	r1, r1, #16
 8000d86:	4311      	orrs	r1, r2
 8000d88:	468b      	mov	fp, r1
 8000d8a:	4969      	ldr	r1, [pc, #420]	@ (8000f30 <__aeabi_ddiv+0x220>)
 8000d8c:	00f2      	lsls	r2, r6, #3
 8000d8e:	468c      	mov	ip, r1
 8000d90:	4651      	mov	r1, sl
 8000d92:	4463      	add	r3, ip
 8000d94:	1acb      	subs	r3, r1, r3
 8000d96:	469a      	mov	sl, r3
 8000d98:	2100      	movs	r1, #0
 8000d9a:	9e02      	ldr	r6, [sp, #8]
 8000d9c:	406e      	eors	r6, r5
 8000d9e:	b2f6      	uxtb	r6, r6
 8000da0:	2c0f      	cmp	r4, #15
 8000da2:	d900      	bls.n	8000da6 <__aeabi_ddiv+0x96>
 8000da4:	e0ce      	b.n	8000f44 <__aeabi_ddiv+0x234>
 8000da6:	4b63      	ldr	r3, [pc, #396]	@ (8000f34 <__aeabi_ddiv+0x224>)
 8000da8:	00a4      	lsls	r4, r4, #2
 8000daa:	591b      	ldr	r3, [r3, r4]
 8000dac:	469f      	mov	pc, r3
 8000dae:	465a      	mov	r2, fp
 8000db0:	4302      	orrs	r2, r0
 8000db2:	4691      	mov	r9, r2
 8000db4:	d000      	beq.n	8000db8 <__aeabi_ddiv+0xa8>
 8000db6:	e090      	b.n	8000eda <__aeabi_ddiv+0x1ca>
 8000db8:	469a      	mov	sl, r3
 8000dba:	2302      	movs	r3, #2
 8000dbc:	4690      	mov	r8, r2
 8000dbe:	2408      	movs	r4, #8
 8000dc0:	9303      	str	r3, [sp, #12]
 8000dc2:	e7cc      	b.n	8000d5e <__aeabi_ddiv+0x4e>
 8000dc4:	46cb      	mov	fp, r9
 8000dc6:	4642      	mov	r2, r8
 8000dc8:	9d02      	ldr	r5, [sp, #8]
 8000dca:	9903      	ldr	r1, [sp, #12]
 8000dcc:	2902      	cmp	r1, #2
 8000dce:	d100      	bne.n	8000dd2 <__aeabi_ddiv+0xc2>
 8000dd0:	e1de      	b.n	8001190 <__aeabi_ddiv+0x480>
 8000dd2:	2903      	cmp	r1, #3
 8000dd4:	d100      	bne.n	8000dd8 <__aeabi_ddiv+0xc8>
 8000dd6:	e08d      	b.n	8000ef4 <__aeabi_ddiv+0x1e4>
 8000dd8:	2901      	cmp	r1, #1
 8000dda:	d000      	beq.n	8000dde <__aeabi_ddiv+0xce>
 8000ddc:	e179      	b.n	80010d2 <__aeabi_ddiv+0x3c2>
 8000dde:	002e      	movs	r6, r5
 8000de0:	2200      	movs	r2, #0
 8000de2:	2300      	movs	r3, #0
 8000de4:	2400      	movs	r4, #0
 8000de6:	4690      	mov	r8, r2
 8000de8:	051b      	lsls	r3, r3, #20
 8000dea:	4323      	orrs	r3, r4
 8000dec:	07f6      	lsls	r6, r6, #31
 8000dee:	4333      	orrs	r3, r6
 8000df0:	4640      	mov	r0, r8
 8000df2:	0019      	movs	r1, r3
 8000df4:	b007      	add	sp, #28
 8000df6:	bcf0      	pop	{r4, r5, r6, r7}
 8000df8:	46bb      	mov	fp, r7
 8000dfa:	46b2      	mov	sl, r6
 8000dfc:	46a9      	mov	r9, r5
 8000dfe:	46a0      	mov	r8, r4
 8000e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e02:	2200      	movs	r2, #0
 8000e04:	2400      	movs	r4, #0
 8000e06:	4690      	mov	r8, r2
 8000e08:	4b48      	ldr	r3, [pc, #288]	@ (8000f2c <__aeabi_ddiv+0x21c>)
 8000e0a:	e7ed      	b.n	8000de8 <__aeabi_ddiv+0xd8>
 8000e0c:	465a      	mov	r2, fp
 8000e0e:	9b00      	ldr	r3, [sp, #0]
 8000e10:	431a      	orrs	r2, r3
 8000e12:	4b49      	ldr	r3, [pc, #292]	@ (8000f38 <__aeabi_ddiv+0x228>)
 8000e14:	469c      	mov	ip, r3
 8000e16:	44e2      	add	sl, ip
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	d159      	bne.n	8000ed0 <__aeabi_ddiv+0x1c0>
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	2300      	movs	r3, #0
 8000e22:	2102      	movs	r1, #2
 8000e24:	469b      	mov	fp, r3
 8000e26:	e7b8      	b.n	8000d9a <__aeabi_ddiv+0x8a>
 8000e28:	465a      	mov	r2, fp
 8000e2a:	9b00      	ldr	r3, [sp, #0]
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	d049      	beq.n	8000ec4 <__aeabi_ddiv+0x1b4>
 8000e30:	465b      	mov	r3, fp
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d100      	bne.n	8000e38 <__aeabi_ddiv+0x128>
 8000e36:	e19c      	b.n	8001172 <__aeabi_ddiv+0x462>
 8000e38:	4658      	mov	r0, fp
 8000e3a:	f001 fb43 	bl	80024c4 <__clzsi2>
 8000e3e:	0002      	movs	r2, r0
 8000e40:	0003      	movs	r3, r0
 8000e42:	3a0b      	subs	r2, #11
 8000e44:	271d      	movs	r7, #29
 8000e46:	9e00      	ldr	r6, [sp, #0]
 8000e48:	1aba      	subs	r2, r7, r2
 8000e4a:	0019      	movs	r1, r3
 8000e4c:	4658      	mov	r0, fp
 8000e4e:	40d6      	lsrs	r6, r2
 8000e50:	3908      	subs	r1, #8
 8000e52:	4088      	lsls	r0, r1
 8000e54:	0032      	movs	r2, r6
 8000e56:	4302      	orrs	r2, r0
 8000e58:	4693      	mov	fp, r2
 8000e5a:	9a00      	ldr	r2, [sp, #0]
 8000e5c:	408a      	lsls	r2, r1
 8000e5e:	4937      	ldr	r1, [pc, #220]	@ (8000f3c <__aeabi_ddiv+0x22c>)
 8000e60:	4453      	add	r3, sl
 8000e62:	468a      	mov	sl, r1
 8000e64:	2100      	movs	r1, #0
 8000e66:	449a      	add	sl, r3
 8000e68:	e797      	b.n	8000d9a <__aeabi_ddiv+0x8a>
 8000e6a:	465b      	mov	r3, fp
 8000e6c:	4303      	orrs	r3, r0
 8000e6e:	4699      	mov	r9, r3
 8000e70:	d021      	beq.n	8000eb6 <__aeabi_ddiv+0x1a6>
 8000e72:	465b      	mov	r3, fp
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d100      	bne.n	8000e7a <__aeabi_ddiv+0x16a>
 8000e78:	e169      	b.n	800114e <__aeabi_ddiv+0x43e>
 8000e7a:	4658      	mov	r0, fp
 8000e7c:	f001 fb22 	bl	80024c4 <__clzsi2>
 8000e80:	230b      	movs	r3, #11
 8000e82:	425b      	negs	r3, r3
 8000e84:	469c      	mov	ip, r3
 8000e86:	0002      	movs	r2, r0
 8000e88:	4484      	add	ip, r0
 8000e8a:	4666      	mov	r6, ip
 8000e8c:	231d      	movs	r3, #29
 8000e8e:	1b9b      	subs	r3, r3, r6
 8000e90:	0026      	movs	r6, r4
 8000e92:	0011      	movs	r1, r2
 8000e94:	4658      	mov	r0, fp
 8000e96:	40de      	lsrs	r6, r3
 8000e98:	3908      	subs	r1, #8
 8000e9a:	4088      	lsls	r0, r1
 8000e9c:	0033      	movs	r3, r6
 8000e9e:	4303      	orrs	r3, r0
 8000ea0:	4699      	mov	r9, r3
 8000ea2:	0023      	movs	r3, r4
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	4698      	mov	r8, r3
 8000ea8:	4b25      	ldr	r3, [pc, #148]	@ (8000f40 <__aeabi_ddiv+0x230>)
 8000eaa:	2400      	movs	r4, #0
 8000eac:	1a9b      	subs	r3, r3, r2
 8000eae:	469a      	mov	sl, r3
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	9303      	str	r3, [sp, #12]
 8000eb4:	e753      	b.n	8000d5e <__aeabi_ddiv+0x4e>
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	4698      	mov	r8, r3
 8000eba:	469a      	mov	sl, r3
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	2404      	movs	r4, #4
 8000ec0:	9303      	str	r3, [sp, #12]
 8000ec2:	e74c      	b.n	8000d5e <__aeabi_ddiv+0x4e>
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	431c      	orrs	r4, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	2101      	movs	r1, #1
 8000ecc:	469b      	mov	fp, r3
 8000ece:	e764      	b.n	8000d9a <__aeabi_ddiv+0x8a>
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	0032      	movs	r2, r6
 8000ed4:	2103      	movs	r1, #3
 8000ed6:	431c      	orrs	r4, r3
 8000ed8:	e75f      	b.n	8000d9a <__aeabi_ddiv+0x8a>
 8000eda:	469a      	mov	sl, r3
 8000edc:	2303      	movs	r3, #3
 8000ede:	46d9      	mov	r9, fp
 8000ee0:	240c      	movs	r4, #12
 8000ee2:	9303      	str	r3, [sp, #12]
 8000ee4:	e73b      	b.n	8000d5e <__aeabi_ddiv+0x4e>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	2480      	movs	r4, #128	@ 0x80
 8000eea:	4698      	mov	r8, r3
 8000eec:	2600      	movs	r6, #0
 8000eee:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <__aeabi_ddiv+0x21c>)
 8000ef0:	0324      	lsls	r4, r4, #12
 8000ef2:	e779      	b.n	8000de8 <__aeabi_ddiv+0xd8>
 8000ef4:	2480      	movs	r4, #128	@ 0x80
 8000ef6:	465b      	mov	r3, fp
 8000ef8:	0324      	lsls	r4, r4, #12
 8000efa:	431c      	orrs	r4, r3
 8000efc:	0324      	lsls	r4, r4, #12
 8000efe:	002e      	movs	r6, r5
 8000f00:	4690      	mov	r8, r2
 8000f02:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <__aeabi_ddiv+0x21c>)
 8000f04:	0b24      	lsrs	r4, r4, #12
 8000f06:	e76f      	b.n	8000de8 <__aeabi_ddiv+0xd8>
 8000f08:	2480      	movs	r4, #128	@ 0x80
 8000f0a:	464b      	mov	r3, r9
 8000f0c:	0324      	lsls	r4, r4, #12
 8000f0e:	4223      	tst	r3, r4
 8000f10:	d002      	beq.n	8000f18 <__aeabi_ddiv+0x208>
 8000f12:	465b      	mov	r3, fp
 8000f14:	4223      	tst	r3, r4
 8000f16:	d0f0      	beq.n	8000efa <__aeabi_ddiv+0x1ea>
 8000f18:	2480      	movs	r4, #128	@ 0x80
 8000f1a:	464b      	mov	r3, r9
 8000f1c:	0324      	lsls	r4, r4, #12
 8000f1e:	431c      	orrs	r4, r3
 8000f20:	0324      	lsls	r4, r4, #12
 8000f22:	9e02      	ldr	r6, [sp, #8]
 8000f24:	4b01      	ldr	r3, [pc, #4]	@ (8000f2c <__aeabi_ddiv+0x21c>)
 8000f26:	0b24      	lsrs	r4, r4, #12
 8000f28:	e75e      	b.n	8000de8 <__aeabi_ddiv+0xd8>
 8000f2a:	46c0      	nop			@ (mov r8, r8)
 8000f2c:	000007ff 	.word	0x000007ff
 8000f30:	fffffc01 	.word	0xfffffc01
 8000f34:	08012280 	.word	0x08012280
 8000f38:	fffff801 	.word	0xfffff801
 8000f3c:	000003f3 	.word	0x000003f3
 8000f40:	fffffc0d 	.word	0xfffffc0d
 8000f44:	45cb      	cmp	fp, r9
 8000f46:	d200      	bcs.n	8000f4a <__aeabi_ddiv+0x23a>
 8000f48:	e0f8      	b.n	800113c <__aeabi_ddiv+0x42c>
 8000f4a:	d100      	bne.n	8000f4e <__aeabi_ddiv+0x23e>
 8000f4c:	e0f3      	b.n	8001136 <__aeabi_ddiv+0x426>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	425b      	negs	r3, r3
 8000f52:	469c      	mov	ip, r3
 8000f54:	4644      	mov	r4, r8
 8000f56:	4648      	mov	r0, r9
 8000f58:	2500      	movs	r5, #0
 8000f5a:	44e2      	add	sl, ip
 8000f5c:	465b      	mov	r3, fp
 8000f5e:	0e17      	lsrs	r7, r2, #24
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	431f      	orrs	r7, r3
 8000f64:	0c19      	lsrs	r1, r3, #16
 8000f66:	043b      	lsls	r3, r7, #16
 8000f68:	0212      	lsls	r2, r2, #8
 8000f6a:	9700      	str	r7, [sp, #0]
 8000f6c:	0c1f      	lsrs	r7, r3, #16
 8000f6e:	4691      	mov	r9, r2
 8000f70:	9102      	str	r1, [sp, #8]
 8000f72:	9703      	str	r7, [sp, #12]
 8000f74:	f7ff f96a 	bl	800024c <__aeabi_uidivmod>
 8000f78:	0002      	movs	r2, r0
 8000f7a:	437a      	muls	r2, r7
 8000f7c:	040b      	lsls	r3, r1, #16
 8000f7e:	0c21      	lsrs	r1, r4, #16
 8000f80:	4680      	mov	r8, r0
 8000f82:	4319      	orrs	r1, r3
 8000f84:	428a      	cmp	r2, r1
 8000f86:	d909      	bls.n	8000f9c <__aeabi_ddiv+0x28c>
 8000f88:	9f00      	ldr	r7, [sp, #0]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	46bc      	mov	ip, r7
 8000f8e:	425b      	negs	r3, r3
 8000f90:	4461      	add	r1, ip
 8000f92:	469c      	mov	ip, r3
 8000f94:	44e0      	add	r8, ip
 8000f96:	428f      	cmp	r7, r1
 8000f98:	d800      	bhi.n	8000f9c <__aeabi_ddiv+0x28c>
 8000f9a:	e15c      	b.n	8001256 <__aeabi_ddiv+0x546>
 8000f9c:	1a88      	subs	r0, r1, r2
 8000f9e:	9902      	ldr	r1, [sp, #8]
 8000fa0:	f7ff f954 	bl	800024c <__aeabi_uidivmod>
 8000fa4:	9a03      	ldr	r2, [sp, #12]
 8000fa6:	0424      	lsls	r4, r4, #16
 8000fa8:	4342      	muls	r2, r0
 8000faa:	0409      	lsls	r1, r1, #16
 8000fac:	0c24      	lsrs	r4, r4, #16
 8000fae:	0003      	movs	r3, r0
 8000fb0:	430c      	orrs	r4, r1
 8000fb2:	42a2      	cmp	r2, r4
 8000fb4:	d906      	bls.n	8000fc4 <__aeabi_ddiv+0x2b4>
 8000fb6:	9900      	ldr	r1, [sp, #0]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	468c      	mov	ip, r1
 8000fbc:	4464      	add	r4, ip
 8000fbe:	42a1      	cmp	r1, r4
 8000fc0:	d800      	bhi.n	8000fc4 <__aeabi_ddiv+0x2b4>
 8000fc2:	e142      	b.n	800124a <__aeabi_ddiv+0x53a>
 8000fc4:	1aa0      	subs	r0, r4, r2
 8000fc6:	4642      	mov	r2, r8
 8000fc8:	0412      	lsls	r2, r2, #16
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	4693      	mov	fp, r2
 8000fce:	464b      	mov	r3, r9
 8000fd0:	4659      	mov	r1, fp
 8000fd2:	0c1b      	lsrs	r3, r3, #16
 8000fd4:	001f      	movs	r7, r3
 8000fd6:	9304      	str	r3, [sp, #16]
 8000fd8:	040b      	lsls	r3, r1, #16
 8000fda:	4649      	mov	r1, r9
 8000fdc:	0409      	lsls	r1, r1, #16
 8000fde:	0c09      	lsrs	r1, r1, #16
 8000fe0:	000c      	movs	r4, r1
 8000fe2:	0c1b      	lsrs	r3, r3, #16
 8000fe4:	435c      	muls	r4, r3
 8000fe6:	0c12      	lsrs	r2, r2, #16
 8000fe8:	437b      	muls	r3, r7
 8000fea:	4688      	mov	r8, r1
 8000fec:	4351      	muls	r1, r2
 8000fee:	437a      	muls	r2, r7
 8000ff0:	0c27      	lsrs	r7, r4, #16
 8000ff2:	46bc      	mov	ip, r7
 8000ff4:	185b      	adds	r3, r3, r1
 8000ff6:	4463      	add	r3, ip
 8000ff8:	4299      	cmp	r1, r3
 8000ffa:	d903      	bls.n	8001004 <__aeabi_ddiv+0x2f4>
 8000ffc:	2180      	movs	r1, #128	@ 0x80
 8000ffe:	0249      	lsls	r1, r1, #9
 8001000:	468c      	mov	ip, r1
 8001002:	4462      	add	r2, ip
 8001004:	0c19      	lsrs	r1, r3, #16
 8001006:	0424      	lsls	r4, r4, #16
 8001008:	041b      	lsls	r3, r3, #16
 800100a:	0c24      	lsrs	r4, r4, #16
 800100c:	188a      	adds	r2, r1, r2
 800100e:	191c      	adds	r4, r3, r4
 8001010:	4290      	cmp	r0, r2
 8001012:	d302      	bcc.n	800101a <__aeabi_ddiv+0x30a>
 8001014:	d116      	bne.n	8001044 <__aeabi_ddiv+0x334>
 8001016:	42a5      	cmp	r5, r4
 8001018:	d214      	bcs.n	8001044 <__aeabi_ddiv+0x334>
 800101a:	465b      	mov	r3, fp
 800101c:	9f00      	ldr	r7, [sp, #0]
 800101e:	3b01      	subs	r3, #1
 8001020:	444d      	add	r5, r9
 8001022:	9305      	str	r3, [sp, #20]
 8001024:	454d      	cmp	r5, r9
 8001026:	419b      	sbcs	r3, r3
 8001028:	46bc      	mov	ip, r7
 800102a:	425b      	negs	r3, r3
 800102c:	4463      	add	r3, ip
 800102e:	18c0      	adds	r0, r0, r3
 8001030:	4287      	cmp	r7, r0
 8001032:	d300      	bcc.n	8001036 <__aeabi_ddiv+0x326>
 8001034:	e102      	b.n	800123c <__aeabi_ddiv+0x52c>
 8001036:	4282      	cmp	r2, r0
 8001038:	d900      	bls.n	800103c <__aeabi_ddiv+0x32c>
 800103a:	e129      	b.n	8001290 <__aeabi_ddiv+0x580>
 800103c:	d100      	bne.n	8001040 <__aeabi_ddiv+0x330>
 800103e:	e124      	b.n	800128a <__aeabi_ddiv+0x57a>
 8001040:	9b05      	ldr	r3, [sp, #20]
 8001042:	469b      	mov	fp, r3
 8001044:	1b2c      	subs	r4, r5, r4
 8001046:	42a5      	cmp	r5, r4
 8001048:	41ad      	sbcs	r5, r5
 800104a:	9b00      	ldr	r3, [sp, #0]
 800104c:	1a80      	subs	r0, r0, r2
 800104e:	426d      	negs	r5, r5
 8001050:	1b40      	subs	r0, r0, r5
 8001052:	4283      	cmp	r3, r0
 8001054:	d100      	bne.n	8001058 <__aeabi_ddiv+0x348>
 8001056:	e10f      	b.n	8001278 <__aeabi_ddiv+0x568>
 8001058:	9902      	ldr	r1, [sp, #8]
 800105a:	f7ff f8f7 	bl	800024c <__aeabi_uidivmod>
 800105e:	9a03      	ldr	r2, [sp, #12]
 8001060:	040b      	lsls	r3, r1, #16
 8001062:	4342      	muls	r2, r0
 8001064:	0c21      	lsrs	r1, r4, #16
 8001066:	0005      	movs	r5, r0
 8001068:	4319      	orrs	r1, r3
 800106a:	428a      	cmp	r2, r1
 800106c:	d900      	bls.n	8001070 <__aeabi_ddiv+0x360>
 800106e:	e0cb      	b.n	8001208 <__aeabi_ddiv+0x4f8>
 8001070:	1a88      	subs	r0, r1, r2
 8001072:	9902      	ldr	r1, [sp, #8]
 8001074:	f7ff f8ea 	bl	800024c <__aeabi_uidivmod>
 8001078:	9a03      	ldr	r2, [sp, #12]
 800107a:	0424      	lsls	r4, r4, #16
 800107c:	4342      	muls	r2, r0
 800107e:	0409      	lsls	r1, r1, #16
 8001080:	0c24      	lsrs	r4, r4, #16
 8001082:	0003      	movs	r3, r0
 8001084:	430c      	orrs	r4, r1
 8001086:	42a2      	cmp	r2, r4
 8001088:	d900      	bls.n	800108c <__aeabi_ddiv+0x37c>
 800108a:	e0ca      	b.n	8001222 <__aeabi_ddiv+0x512>
 800108c:	4641      	mov	r1, r8
 800108e:	1aa4      	subs	r4, r4, r2
 8001090:	042a      	lsls	r2, r5, #16
 8001092:	431a      	orrs	r2, r3
 8001094:	9f04      	ldr	r7, [sp, #16]
 8001096:	0413      	lsls	r3, r2, #16
 8001098:	0c1b      	lsrs	r3, r3, #16
 800109a:	4359      	muls	r1, r3
 800109c:	4640      	mov	r0, r8
 800109e:	437b      	muls	r3, r7
 80010a0:	469c      	mov	ip, r3
 80010a2:	0c15      	lsrs	r5, r2, #16
 80010a4:	4368      	muls	r0, r5
 80010a6:	0c0b      	lsrs	r3, r1, #16
 80010a8:	4484      	add	ip, r0
 80010aa:	4463      	add	r3, ip
 80010ac:	437d      	muls	r5, r7
 80010ae:	4298      	cmp	r0, r3
 80010b0:	d903      	bls.n	80010ba <__aeabi_ddiv+0x3aa>
 80010b2:	2080      	movs	r0, #128	@ 0x80
 80010b4:	0240      	lsls	r0, r0, #9
 80010b6:	4684      	mov	ip, r0
 80010b8:	4465      	add	r5, ip
 80010ba:	0c18      	lsrs	r0, r3, #16
 80010bc:	0409      	lsls	r1, r1, #16
 80010be:	041b      	lsls	r3, r3, #16
 80010c0:	0c09      	lsrs	r1, r1, #16
 80010c2:	1940      	adds	r0, r0, r5
 80010c4:	185b      	adds	r3, r3, r1
 80010c6:	4284      	cmp	r4, r0
 80010c8:	d327      	bcc.n	800111a <__aeabi_ddiv+0x40a>
 80010ca:	d023      	beq.n	8001114 <__aeabi_ddiv+0x404>
 80010cc:	2301      	movs	r3, #1
 80010ce:	0035      	movs	r5, r6
 80010d0:	431a      	orrs	r2, r3
 80010d2:	4b94      	ldr	r3, [pc, #592]	@ (8001324 <__aeabi_ddiv+0x614>)
 80010d4:	4453      	add	r3, sl
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	dd60      	ble.n	800119c <__aeabi_ddiv+0x48c>
 80010da:	0751      	lsls	r1, r2, #29
 80010dc:	d000      	beq.n	80010e0 <__aeabi_ddiv+0x3d0>
 80010de:	e086      	b.n	80011ee <__aeabi_ddiv+0x4de>
 80010e0:	002e      	movs	r6, r5
 80010e2:	08d1      	lsrs	r1, r2, #3
 80010e4:	465a      	mov	r2, fp
 80010e6:	01d2      	lsls	r2, r2, #7
 80010e8:	d506      	bpl.n	80010f8 <__aeabi_ddiv+0x3e8>
 80010ea:	465a      	mov	r2, fp
 80010ec:	4b8e      	ldr	r3, [pc, #568]	@ (8001328 <__aeabi_ddiv+0x618>)
 80010ee:	401a      	ands	r2, r3
 80010f0:	2380      	movs	r3, #128	@ 0x80
 80010f2:	4693      	mov	fp, r2
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	4453      	add	r3, sl
 80010f8:	4a8c      	ldr	r2, [pc, #560]	@ (800132c <__aeabi_ddiv+0x61c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	dd00      	ble.n	8001100 <__aeabi_ddiv+0x3f0>
 80010fe:	e680      	b.n	8000e02 <__aeabi_ddiv+0xf2>
 8001100:	465a      	mov	r2, fp
 8001102:	0752      	lsls	r2, r2, #29
 8001104:	430a      	orrs	r2, r1
 8001106:	4690      	mov	r8, r2
 8001108:	465a      	mov	r2, fp
 800110a:	055b      	lsls	r3, r3, #21
 800110c:	0254      	lsls	r4, r2, #9
 800110e:	0b24      	lsrs	r4, r4, #12
 8001110:	0d5b      	lsrs	r3, r3, #21
 8001112:	e669      	b.n	8000de8 <__aeabi_ddiv+0xd8>
 8001114:	0035      	movs	r5, r6
 8001116:	2b00      	cmp	r3, #0
 8001118:	d0db      	beq.n	80010d2 <__aeabi_ddiv+0x3c2>
 800111a:	9d00      	ldr	r5, [sp, #0]
 800111c:	1e51      	subs	r1, r2, #1
 800111e:	46ac      	mov	ip, r5
 8001120:	4464      	add	r4, ip
 8001122:	42ac      	cmp	r4, r5
 8001124:	d200      	bcs.n	8001128 <__aeabi_ddiv+0x418>
 8001126:	e09e      	b.n	8001266 <__aeabi_ddiv+0x556>
 8001128:	4284      	cmp	r4, r0
 800112a:	d200      	bcs.n	800112e <__aeabi_ddiv+0x41e>
 800112c:	e0e1      	b.n	80012f2 <__aeabi_ddiv+0x5e2>
 800112e:	d100      	bne.n	8001132 <__aeabi_ddiv+0x422>
 8001130:	e0ee      	b.n	8001310 <__aeabi_ddiv+0x600>
 8001132:	000a      	movs	r2, r1
 8001134:	e7ca      	b.n	80010cc <__aeabi_ddiv+0x3bc>
 8001136:	4542      	cmp	r2, r8
 8001138:	d900      	bls.n	800113c <__aeabi_ddiv+0x42c>
 800113a:	e708      	b.n	8000f4e <__aeabi_ddiv+0x23e>
 800113c:	464b      	mov	r3, r9
 800113e:	07dc      	lsls	r4, r3, #31
 8001140:	0858      	lsrs	r0, r3, #1
 8001142:	4643      	mov	r3, r8
 8001144:	085b      	lsrs	r3, r3, #1
 8001146:	431c      	orrs	r4, r3
 8001148:	4643      	mov	r3, r8
 800114a:	07dd      	lsls	r5, r3, #31
 800114c:	e706      	b.n	8000f5c <__aeabi_ddiv+0x24c>
 800114e:	f001 f9b9 	bl	80024c4 <__clzsi2>
 8001152:	2315      	movs	r3, #21
 8001154:	469c      	mov	ip, r3
 8001156:	4484      	add	ip, r0
 8001158:	0002      	movs	r2, r0
 800115a:	4663      	mov	r3, ip
 800115c:	3220      	adds	r2, #32
 800115e:	2b1c      	cmp	r3, #28
 8001160:	dc00      	bgt.n	8001164 <__aeabi_ddiv+0x454>
 8001162:	e692      	b.n	8000e8a <__aeabi_ddiv+0x17a>
 8001164:	0023      	movs	r3, r4
 8001166:	3808      	subs	r0, #8
 8001168:	4083      	lsls	r3, r0
 800116a:	4699      	mov	r9, r3
 800116c:	2300      	movs	r3, #0
 800116e:	4698      	mov	r8, r3
 8001170:	e69a      	b.n	8000ea8 <__aeabi_ddiv+0x198>
 8001172:	f001 f9a7 	bl	80024c4 <__clzsi2>
 8001176:	0002      	movs	r2, r0
 8001178:	0003      	movs	r3, r0
 800117a:	3215      	adds	r2, #21
 800117c:	3320      	adds	r3, #32
 800117e:	2a1c      	cmp	r2, #28
 8001180:	dc00      	bgt.n	8001184 <__aeabi_ddiv+0x474>
 8001182:	e65f      	b.n	8000e44 <__aeabi_ddiv+0x134>
 8001184:	9900      	ldr	r1, [sp, #0]
 8001186:	3808      	subs	r0, #8
 8001188:	4081      	lsls	r1, r0
 800118a:	2200      	movs	r2, #0
 800118c:	468b      	mov	fp, r1
 800118e:	e666      	b.n	8000e5e <__aeabi_ddiv+0x14e>
 8001190:	2200      	movs	r2, #0
 8001192:	002e      	movs	r6, r5
 8001194:	2400      	movs	r4, #0
 8001196:	4690      	mov	r8, r2
 8001198:	4b65      	ldr	r3, [pc, #404]	@ (8001330 <__aeabi_ddiv+0x620>)
 800119a:	e625      	b.n	8000de8 <__aeabi_ddiv+0xd8>
 800119c:	002e      	movs	r6, r5
 800119e:	2101      	movs	r1, #1
 80011a0:	1ac9      	subs	r1, r1, r3
 80011a2:	2938      	cmp	r1, #56	@ 0x38
 80011a4:	dd00      	ble.n	80011a8 <__aeabi_ddiv+0x498>
 80011a6:	e61b      	b.n	8000de0 <__aeabi_ddiv+0xd0>
 80011a8:	291f      	cmp	r1, #31
 80011aa:	dc7e      	bgt.n	80012aa <__aeabi_ddiv+0x59a>
 80011ac:	4861      	ldr	r0, [pc, #388]	@ (8001334 <__aeabi_ddiv+0x624>)
 80011ae:	0014      	movs	r4, r2
 80011b0:	4450      	add	r0, sl
 80011b2:	465b      	mov	r3, fp
 80011b4:	4082      	lsls	r2, r0
 80011b6:	4083      	lsls	r3, r0
 80011b8:	40cc      	lsrs	r4, r1
 80011ba:	1e50      	subs	r0, r2, #1
 80011bc:	4182      	sbcs	r2, r0
 80011be:	4323      	orrs	r3, r4
 80011c0:	431a      	orrs	r2, r3
 80011c2:	465b      	mov	r3, fp
 80011c4:	40cb      	lsrs	r3, r1
 80011c6:	0751      	lsls	r1, r2, #29
 80011c8:	d009      	beq.n	80011de <__aeabi_ddiv+0x4ce>
 80011ca:	210f      	movs	r1, #15
 80011cc:	4011      	ands	r1, r2
 80011ce:	2904      	cmp	r1, #4
 80011d0:	d005      	beq.n	80011de <__aeabi_ddiv+0x4ce>
 80011d2:	1d11      	adds	r1, r2, #4
 80011d4:	4291      	cmp	r1, r2
 80011d6:	4192      	sbcs	r2, r2
 80011d8:	4252      	negs	r2, r2
 80011da:	189b      	adds	r3, r3, r2
 80011dc:	000a      	movs	r2, r1
 80011de:	0219      	lsls	r1, r3, #8
 80011e0:	d400      	bmi.n	80011e4 <__aeabi_ddiv+0x4d4>
 80011e2:	e09b      	b.n	800131c <__aeabi_ddiv+0x60c>
 80011e4:	2200      	movs	r2, #0
 80011e6:	2301      	movs	r3, #1
 80011e8:	2400      	movs	r4, #0
 80011ea:	4690      	mov	r8, r2
 80011ec:	e5fc      	b.n	8000de8 <__aeabi_ddiv+0xd8>
 80011ee:	210f      	movs	r1, #15
 80011f0:	4011      	ands	r1, r2
 80011f2:	2904      	cmp	r1, #4
 80011f4:	d100      	bne.n	80011f8 <__aeabi_ddiv+0x4e8>
 80011f6:	e773      	b.n	80010e0 <__aeabi_ddiv+0x3d0>
 80011f8:	1d11      	adds	r1, r2, #4
 80011fa:	4291      	cmp	r1, r2
 80011fc:	4192      	sbcs	r2, r2
 80011fe:	4252      	negs	r2, r2
 8001200:	002e      	movs	r6, r5
 8001202:	08c9      	lsrs	r1, r1, #3
 8001204:	4493      	add	fp, r2
 8001206:	e76d      	b.n	80010e4 <__aeabi_ddiv+0x3d4>
 8001208:	9b00      	ldr	r3, [sp, #0]
 800120a:	3d01      	subs	r5, #1
 800120c:	469c      	mov	ip, r3
 800120e:	4461      	add	r1, ip
 8001210:	428b      	cmp	r3, r1
 8001212:	d900      	bls.n	8001216 <__aeabi_ddiv+0x506>
 8001214:	e72c      	b.n	8001070 <__aeabi_ddiv+0x360>
 8001216:	428a      	cmp	r2, r1
 8001218:	d800      	bhi.n	800121c <__aeabi_ddiv+0x50c>
 800121a:	e729      	b.n	8001070 <__aeabi_ddiv+0x360>
 800121c:	1e85      	subs	r5, r0, #2
 800121e:	4461      	add	r1, ip
 8001220:	e726      	b.n	8001070 <__aeabi_ddiv+0x360>
 8001222:	9900      	ldr	r1, [sp, #0]
 8001224:	3b01      	subs	r3, #1
 8001226:	468c      	mov	ip, r1
 8001228:	4464      	add	r4, ip
 800122a:	42a1      	cmp	r1, r4
 800122c:	d900      	bls.n	8001230 <__aeabi_ddiv+0x520>
 800122e:	e72d      	b.n	800108c <__aeabi_ddiv+0x37c>
 8001230:	42a2      	cmp	r2, r4
 8001232:	d800      	bhi.n	8001236 <__aeabi_ddiv+0x526>
 8001234:	e72a      	b.n	800108c <__aeabi_ddiv+0x37c>
 8001236:	1e83      	subs	r3, r0, #2
 8001238:	4464      	add	r4, ip
 800123a:	e727      	b.n	800108c <__aeabi_ddiv+0x37c>
 800123c:	4287      	cmp	r7, r0
 800123e:	d000      	beq.n	8001242 <__aeabi_ddiv+0x532>
 8001240:	e6fe      	b.n	8001040 <__aeabi_ddiv+0x330>
 8001242:	45a9      	cmp	r9, r5
 8001244:	d900      	bls.n	8001248 <__aeabi_ddiv+0x538>
 8001246:	e6fb      	b.n	8001040 <__aeabi_ddiv+0x330>
 8001248:	e6f5      	b.n	8001036 <__aeabi_ddiv+0x326>
 800124a:	42a2      	cmp	r2, r4
 800124c:	d800      	bhi.n	8001250 <__aeabi_ddiv+0x540>
 800124e:	e6b9      	b.n	8000fc4 <__aeabi_ddiv+0x2b4>
 8001250:	1e83      	subs	r3, r0, #2
 8001252:	4464      	add	r4, ip
 8001254:	e6b6      	b.n	8000fc4 <__aeabi_ddiv+0x2b4>
 8001256:	428a      	cmp	r2, r1
 8001258:	d800      	bhi.n	800125c <__aeabi_ddiv+0x54c>
 800125a:	e69f      	b.n	8000f9c <__aeabi_ddiv+0x28c>
 800125c:	46bc      	mov	ip, r7
 800125e:	1e83      	subs	r3, r0, #2
 8001260:	4698      	mov	r8, r3
 8001262:	4461      	add	r1, ip
 8001264:	e69a      	b.n	8000f9c <__aeabi_ddiv+0x28c>
 8001266:	000a      	movs	r2, r1
 8001268:	4284      	cmp	r4, r0
 800126a:	d000      	beq.n	800126e <__aeabi_ddiv+0x55e>
 800126c:	e72e      	b.n	80010cc <__aeabi_ddiv+0x3bc>
 800126e:	454b      	cmp	r3, r9
 8001270:	d000      	beq.n	8001274 <__aeabi_ddiv+0x564>
 8001272:	e72b      	b.n	80010cc <__aeabi_ddiv+0x3bc>
 8001274:	0035      	movs	r5, r6
 8001276:	e72c      	b.n	80010d2 <__aeabi_ddiv+0x3c2>
 8001278:	4b2a      	ldr	r3, [pc, #168]	@ (8001324 <__aeabi_ddiv+0x614>)
 800127a:	4a2f      	ldr	r2, [pc, #188]	@ (8001338 <__aeabi_ddiv+0x628>)
 800127c:	4453      	add	r3, sl
 800127e:	4592      	cmp	sl, r2
 8001280:	db43      	blt.n	800130a <__aeabi_ddiv+0x5fa>
 8001282:	2201      	movs	r2, #1
 8001284:	2100      	movs	r1, #0
 8001286:	4493      	add	fp, r2
 8001288:	e72c      	b.n	80010e4 <__aeabi_ddiv+0x3d4>
 800128a:	42ac      	cmp	r4, r5
 800128c:	d800      	bhi.n	8001290 <__aeabi_ddiv+0x580>
 800128e:	e6d7      	b.n	8001040 <__aeabi_ddiv+0x330>
 8001290:	2302      	movs	r3, #2
 8001292:	425b      	negs	r3, r3
 8001294:	469c      	mov	ip, r3
 8001296:	9900      	ldr	r1, [sp, #0]
 8001298:	444d      	add	r5, r9
 800129a:	454d      	cmp	r5, r9
 800129c:	419b      	sbcs	r3, r3
 800129e:	44e3      	add	fp, ip
 80012a0:	468c      	mov	ip, r1
 80012a2:	425b      	negs	r3, r3
 80012a4:	4463      	add	r3, ip
 80012a6:	18c0      	adds	r0, r0, r3
 80012a8:	e6cc      	b.n	8001044 <__aeabi_ddiv+0x334>
 80012aa:	201f      	movs	r0, #31
 80012ac:	4240      	negs	r0, r0
 80012ae:	1ac3      	subs	r3, r0, r3
 80012b0:	4658      	mov	r0, fp
 80012b2:	40d8      	lsrs	r0, r3
 80012b4:	2920      	cmp	r1, #32
 80012b6:	d004      	beq.n	80012c2 <__aeabi_ddiv+0x5b2>
 80012b8:	4659      	mov	r1, fp
 80012ba:	4b20      	ldr	r3, [pc, #128]	@ (800133c <__aeabi_ddiv+0x62c>)
 80012bc:	4453      	add	r3, sl
 80012be:	4099      	lsls	r1, r3
 80012c0:	430a      	orrs	r2, r1
 80012c2:	1e53      	subs	r3, r2, #1
 80012c4:	419a      	sbcs	r2, r3
 80012c6:	2307      	movs	r3, #7
 80012c8:	0019      	movs	r1, r3
 80012ca:	4302      	orrs	r2, r0
 80012cc:	2400      	movs	r4, #0
 80012ce:	4011      	ands	r1, r2
 80012d0:	4213      	tst	r3, r2
 80012d2:	d009      	beq.n	80012e8 <__aeabi_ddiv+0x5d8>
 80012d4:	3308      	adds	r3, #8
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d01d      	beq.n	8001318 <__aeabi_ddiv+0x608>
 80012dc:	1d13      	adds	r3, r2, #4
 80012de:	4293      	cmp	r3, r2
 80012e0:	4189      	sbcs	r1, r1
 80012e2:	001a      	movs	r2, r3
 80012e4:	4249      	negs	r1, r1
 80012e6:	0749      	lsls	r1, r1, #29
 80012e8:	08d2      	lsrs	r2, r2, #3
 80012ea:	430a      	orrs	r2, r1
 80012ec:	4690      	mov	r8, r2
 80012ee:	2300      	movs	r3, #0
 80012f0:	e57a      	b.n	8000de8 <__aeabi_ddiv+0xd8>
 80012f2:	4649      	mov	r1, r9
 80012f4:	9f00      	ldr	r7, [sp, #0]
 80012f6:	004d      	lsls	r5, r1, #1
 80012f8:	454d      	cmp	r5, r9
 80012fa:	4189      	sbcs	r1, r1
 80012fc:	46bc      	mov	ip, r7
 80012fe:	4249      	negs	r1, r1
 8001300:	4461      	add	r1, ip
 8001302:	46a9      	mov	r9, r5
 8001304:	3a02      	subs	r2, #2
 8001306:	1864      	adds	r4, r4, r1
 8001308:	e7ae      	b.n	8001268 <__aeabi_ddiv+0x558>
 800130a:	2201      	movs	r2, #1
 800130c:	4252      	negs	r2, r2
 800130e:	e746      	b.n	800119e <__aeabi_ddiv+0x48e>
 8001310:	4599      	cmp	r9, r3
 8001312:	d3ee      	bcc.n	80012f2 <__aeabi_ddiv+0x5e2>
 8001314:	000a      	movs	r2, r1
 8001316:	e7aa      	b.n	800126e <__aeabi_ddiv+0x55e>
 8001318:	2100      	movs	r1, #0
 800131a:	e7e5      	b.n	80012e8 <__aeabi_ddiv+0x5d8>
 800131c:	0759      	lsls	r1, r3, #29
 800131e:	025b      	lsls	r3, r3, #9
 8001320:	0b1c      	lsrs	r4, r3, #12
 8001322:	e7e1      	b.n	80012e8 <__aeabi_ddiv+0x5d8>
 8001324:	000003ff 	.word	0x000003ff
 8001328:	feffffff 	.word	0xfeffffff
 800132c:	000007fe 	.word	0x000007fe
 8001330:	000007ff 	.word	0x000007ff
 8001334:	0000041e 	.word	0x0000041e
 8001338:	fffffc02 	.word	0xfffffc02
 800133c:	0000043e 	.word	0x0000043e

08001340 <__eqdf2>:
 8001340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001342:	4657      	mov	r7, sl
 8001344:	46de      	mov	lr, fp
 8001346:	464e      	mov	r6, r9
 8001348:	4645      	mov	r5, r8
 800134a:	b5e0      	push	{r5, r6, r7, lr}
 800134c:	000d      	movs	r5, r1
 800134e:	0004      	movs	r4, r0
 8001350:	0fe8      	lsrs	r0, r5, #31
 8001352:	4683      	mov	fp, r0
 8001354:	0309      	lsls	r1, r1, #12
 8001356:	0fd8      	lsrs	r0, r3, #31
 8001358:	0b09      	lsrs	r1, r1, #12
 800135a:	4682      	mov	sl, r0
 800135c:	4819      	ldr	r0, [pc, #100]	@ (80013c4 <__eqdf2+0x84>)
 800135e:	468c      	mov	ip, r1
 8001360:	031f      	lsls	r7, r3, #12
 8001362:	0069      	lsls	r1, r5, #1
 8001364:	005e      	lsls	r6, r3, #1
 8001366:	0d49      	lsrs	r1, r1, #21
 8001368:	0b3f      	lsrs	r7, r7, #12
 800136a:	0d76      	lsrs	r6, r6, #21
 800136c:	4281      	cmp	r1, r0
 800136e:	d018      	beq.n	80013a2 <__eqdf2+0x62>
 8001370:	4286      	cmp	r6, r0
 8001372:	d00f      	beq.n	8001394 <__eqdf2+0x54>
 8001374:	2001      	movs	r0, #1
 8001376:	42b1      	cmp	r1, r6
 8001378:	d10d      	bne.n	8001396 <__eqdf2+0x56>
 800137a:	45bc      	cmp	ip, r7
 800137c:	d10b      	bne.n	8001396 <__eqdf2+0x56>
 800137e:	4294      	cmp	r4, r2
 8001380:	d109      	bne.n	8001396 <__eqdf2+0x56>
 8001382:	45d3      	cmp	fp, sl
 8001384:	d01c      	beq.n	80013c0 <__eqdf2+0x80>
 8001386:	2900      	cmp	r1, #0
 8001388:	d105      	bne.n	8001396 <__eqdf2+0x56>
 800138a:	4660      	mov	r0, ip
 800138c:	4320      	orrs	r0, r4
 800138e:	1e43      	subs	r3, r0, #1
 8001390:	4198      	sbcs	r0, r3
 8001392:	e000      	b.n	8001396 <__eqdf2+0x56>
 8001394:	2001      	movs	r0, #1
 8001396:	bcf0      	pop	{r4, r5, r6, r7}
 8001398:	46bb      	mov	fp, r7
 800139a:	46b2      	mov	sl, r6
 800139c:	46a9      	mov	r9, r5
 800139e:	46a0      	mov	r8, r4
 80013a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a2:	2001      	movs	r0, #1
 80013a4:	428e      	cmp	r6, r1
 80013a6:	d1f6      	bne.n	8001396 <__eqdf2+0x56>
 80013a8:	4661      	mov	r1, ip
 80013aa:	4339      	orrs	r1, r7
 80013ac:	000f      	movs	r7, r1
 80013ae:	4317      	orrs	r7, r2
 80013b0:	4327      	orrs	r7, r4
 80013b2:	d1f0      	bne.n	8001396 <__eqdf2+0x56>
 80013b4:	465b      	mov	r3, fp
 80013b6:	4652      	mov	r2, sl
 80013b8:	1a98      	subs	r0, r3, r2
 80013ba:	1e43      	subs	r3, r0, #1
 80013bc:	4198      	sbcs	r0, r3
 80013be:	e7ea      	b.n	8001396 <__eqdf2+0x56>
 80013c0:	2000      	movs	r0, #0
 80013c2:	e7e8      	b.n	8001396 <__eqdf2+0x56>
 80013c4:	000007ff 	.word	0x000007ff

080013c8 <__gedf2>:
 80013c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ca:	4657      	mov	r7, sl
 80013cc:	464e      	mov	r6, r9
 80013ce:	4645      	mov	r5, r8
 80013d0:	46de      	mov	lr, fp
 80013d2:	b5e0      	push	{r5, r6, r7, lr}
 80013d4:	000d      	movs	r5, r1
 80013d6:	030e      	lsls	r6, r1, #12
 80013d8:	0049      	lsls	r1, r1, #1
 80013da:	0d49      	lsrs	r1, r1, #21
 80013dc:	468a      	mov	sl, r1
 80013de:	0fdf      	lsrs	r7, r3, #31
 80013e0:	0fe9      	lsrs	r1, r5, #31
 80013e2:	46bc      	mov	ip, r7
 80013e4:	b083      	sub	sp, #12
 80013e6:	4f2f      	ldr	r7, [pc, #188]	@ (80014a4 <__gedf2+0xdc>)
 80013e8:	0004      	movs	r4, r0
 80013ea:	4680      	mov	r8, r0
 80013ec:	9101      	str	r1, [sp, #4]
 80013ee:	0058      	lsls	r0, r3, #1
 80013f0:	0319      	lsls	r1, r3, #12
 80013f2:	4691      	mov	r9, r2
 80013f4:	0b36      	lsrs	r6, r6, #12
 80013f6:	0b09      	lsrs	r1, r1, #12
 80013f8:	0d40      	lsrs	r0, r0, #21
 80013fa:	45ba      	cmp	sl, r7
 80013fc:	d01d      	beq.n	800143a <__gedf2+0x72>
 80013fe:	42b8      	cmp	r0, r7
 8001400:	d00d      	beq.n	800141e <__gedf2+0x56>
 8001402:	4657      	mov	r7, sl
 8001404:	2f00      	cmp	r7, #0
 8001406:	d12a      	bne.n	800145e <__gedf2+0x96>
 8001408:	4334      	orrs	r4, r6
 800140a:	2800      	cmp	r0, #0
 800140c:	d124      	bne.n	8001458 <__gedf2+0x90>
 800140e:	430a      	orrs	r2, r1
 8001410:	d036      	beq.n	8001480 <__gedf2+0xb8>
 8001412:	2c00      	cmp	r4, #0
 8001414:	d141      	bne.n	800149a <__gedf2+0xd2>
 8001416:	4663      	mov	r3, ip
 8001418:	0058      	lsls	r0, r3, #1
 800141a:	3801      	subs	r0, #1
 800141c:	e015      	b.n	800144a <__gedf2+0x82>
 800141e:	4311      	orrs	r1, r2
 8001420:	d138      	bne.n	8001494 <__gedf2+0xcc>
 8001422:	4653      	mov	r3, sl
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <__gedf2+0x64>
 8001428:	4326      	orrs	r6, r4
 800142a:	d0f4      	beq.n	8001416 <__gedf2+0x4e>
 800142c:	9b01      	ldr	r3, [sp, #4]
 800142e:	4563      	cmp	r3, ip
 8001430:	d107      	bne.n	8001442 <__gedf2+0x7a>
 8001432:	9b01      	ldr	r3, [sp, #4]
 8001434:	0058      	lsls	r0, r3, #1
 8001436:	3801      	subs	r0, #1
 8001438:	e007      	b.n	800144a <__gedf2+0x82>
 800143a:	4326      	orrs	r6, r4
 800143c:	d12a      	bne.n	8001494 <__gedf2+0xcc>
 800143e:	4550      	cmp	r0, sl
 8001440:	d021      	beq.n	8001486 <__gedf2+0xbe>
 8001442:	2001      	movs	r0, #1
 8001444:	9b01      	ldr	r3, [sp, #4]
 8001446:	425f      	negs	r7, r3
 8001448:	4338      	orrs	r0, r7
 800144a:	b003      	add	sp, #12
 800144c:	bcf0      	pop	{r4, r5, r6, r7}
 800144e:	46bb      	mov	fp, r7
 8001450:	46b2      	mov	sl, r6
 8001452:	46a9      	mov	r9, r5
 8001454:	46a0      	mov	r8, r4
 8001456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001458:	2c00      	cmp	r4, #0
 800145a:	d0dc      	beq.n	8001416 <__gedf2+0x4e>
 800145c:	e7e6      	b.n	800142c <__gedf2+0x64>
 800145e:	2800      	cmp	r0, #0
 8001460:	d0ef      	beq.n	8001442 <__gedf2+0x7a>
 8001462:	9b01      	ldr	r3, [sp, #4]
 8001464:	4563      	cmp	r3, ip
 8001466:	d1ec      	bne.n	8001442 <__gedf2+0x7a>
 8001468:	4582      	cmp	sl, r0
 800146a:	dcea      	bgt.n	8001442 <__gedf2+0x7a>
 800146c:	dbe1      	blt.n	8001432 <__gedf2+0x6a>
 800146e:	428e      	cmp	r6, r1
 8001470:	d8e7      	bhi.n	8001442 <__gedf2+0x7a>
 8001472:	d1de      	bne.n	8001432 <__gedf2+0x6a>
 8001474:	45c8      	cmp	r8, r9
 8001476:	d8e4      	bhi.n	8001442 <__gedf2+0x7a>
 8001478:	2000      	movs	r0, #0
 800147a:	45c8      	cmp	r8, r9
 800147c:	d2e5      	bcs.n	800144a <__gedf2+0x82>
 800147e:	e7d8      	b.n	8001432 <__gedf2+0x6a>
 8001480:	2c00      	cmp	r4, #0
 8001482:	d0e2      	beq.n	800144a <__gedf2+0x82>
 8001484:	e7dd      	b.n	8001442 <__gedf2+0x7a>
 8001486:	4311      	orrs	r1, r2
 8001488:	d104      	bne.n	8001494 <__gedf2+0xcc>
 800148a:	9b01      	ldr	r3, [sp, #4]
 800148c:	4563      	cmp	r3, ip
 800148e:	d1d8      	bne.n	8001442 <__gedf2+0x7a>
 8001490:	2000      	movs	r0, #0
 8001492:	e7da      	b.n	800144a <__gedf2+0x82>
 8001494:	2002      	movs	r0, #2
 8001496:	4240      	negs	r0, r0
 8001498:	e7d7      	b.n	800144a <__gedf2+0x82>
 800149a:	9b01      	ldr	r3, [sp, #4]
 800149c:	4563      	cmp	r3, ip
 800149e:	d0e6      	beq.n	800146e <__gedf2+0xa6>
 80014a0:	e7cf      	b.n	8001442 <__gedf2+0x7a>
 80014a2:	46c0      	nop			@ (mov r8, r8)
 80014a4:	000007ff 	.word	0x000007ff

080014a8 <__ledf2>:
 80014a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014aa:	4657      	mov	r7, sl
 80014ac:	464e      	mov	r6, r9
 80014ae:	4645      	mov	r5, r8
 80014b0:	46de      	mov	lr, fp
 80014b2:	b5e0      	push	{r5, r6, r7, lr}
 80014b4:	000d      	movs	r5, r1
 80014b6:	030e      	lsls	r6, r1, #12
 80014b8:	0049      	lsls	r1, r1, #1
 80014ba:	0d49      	lsrs	r1, r1, #21
 80014bc:	468a      	mov	sl, r1
 80014be:	0fdf      	lsrs	r7, r3, #31
 80014c0:	0fe9      	lsrs	r1, r5, #31
 80014c2:	46bc      	mov	ip, r7
 80014c4:	b083      	sub	sp, #12
 80014c6:	4f2e      	ldr	r7, [pc, #184]	@ (8001580 <__ledf2+0xd8>)
 80014c8:	0004      	movs	r4, r0
 80014ca:	4680      	mov	r8, r0
 80014cc:	9101      	str	r1, [sp, #4]
 80014ce:	0058      	lsls	r0, r3, #1
 80014d0:	0319      	lsls	r1, r3, #12
 80014d2:	4691      	mov	r9, r2
 80014d4:	0b36      	lsrs	r6, r6, #12
 80014d6:	0b09      	lsrs	r1, r1, #12
 80014d8:	0d40      	lsrs	r0, r0, #21
 80014da:	45ba      	cmp	sl, r7
 80014dc:	d01e      	beq.n	800151c <__ledf2+0x74>
 80014de:	42b8      	cmp	r0, r7
 80014e0:	d00d      	beq.n	80014fe <__ledf2+0x56>
 80014e2:	4657      	mov	r7, sl
 80014e4:	2f00      	cmp	r7, #0
 80014e6:	d127      	bne.n	8001538 <__ledf2+0x90>
 80014e8:	4334      	orrs	r4, r6
 80014ea:	2800      	cmp	r0, #0
 80014ec:	d133      	bne.n	8001556 <__ledf2+0xae>
 80014ee:	430a      	orrs	r2, r1
 80014f0:	d034      	beq.n	800155c <__ledf2+0xb4>
 80014f2:	2c00      	cmp	r4, #0
 80014f4:	d140      	bne.n	8001578 <__ledf2+0xd0>
 80014f6:	4663      	mov	r3, ip
 80014f8:	0058      	lsls	r0, r3, #1
 80014fa:	3801      	subs	r0, #1
 80014fc:	e015      	b.n	800152a <__ledf2+0x82>
 80014fe:	4311      	orrs	r1, r2
 8001500:	d112      	bne.n	8001528 <__ledf2+0x80>
 8001502:	4653      	mov	r3, sl
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <__ledf2+0x64>
 8001508:	4326      	orrs	r6, r4
 800150a:	d0f4      	beq.n	80014f6 <__ledf2+0x4e>
 800150c:	9b01      	ldr	r3, [sp, #4]
 800150e:	4563      	cmp	r3, ip
 8001510:	d01d      	beq.n	800154e <__ledf2+0xa6>
 8001512:	2001      	movs	r0, #1
 8001514:	9b01      	ldr	r3, [sp, #4]
 8001516:	425f      	negs	r7, r3
 8001518:	4338      	orrs	r0, r7
 800151a:	e006      	b.n	800152a <__ledf2+0x82>
 800151c:	4326      	orrs	r6, r4
 800151e:	d103      	bne.n	8001528 <__ledf2+0x80>
 8001520:	4550      	cmp	r0, sl
 8001522:	d1f6      	bne.n	8001512 <__ledf2+0x6a>
 8001524:	4311      	orrs	r1, r2
 8001526:	d01c      	beq.n	8001562 <__ledf2+0xba>
 8001528:	2002      	movs	r0, #2
 800152a:	b003      	add	sp, #12
 800152c:	bcf0      	pop	{r4, r5, r6, r7}
 800152e:	46bb      	mov	fp, r7
 8001530:	46b2      	mov	sl, r6
 8001532:	46a9      	mov	r9, r5
 8001534:	46a0      	mov	r8, r4
 8001536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001538:	2800      	cmp	r0, #0
 800153a:	d0ea      	beq.n	8001512 <__ledf2+0x6a>
 800153c:	9b01      	ldr	r3, [sp, #4]
 800153e:	4563      	cmp	r3, ip
 8001540:	d1e7      	bne.n	8001512 <__ledf2+0x6a>
 8001542:	4582      	cmp	sl, r0
 8001544:	dce5      	bgt.n	8001512 <__ledf2+0x6a>
 8001546:	db02      	blt.n	800154e <__ledf2+0xa6>
 8001548:	428e      	cmp	r6, r1
 800154a:	d8e2      	bhi.n	8001512 <__ledf2+0x6a>
 800154c:	d00e      	beq.n	800156c <__ledf2+0xc4>
 800154e:	9b01      	ldr	r3, [sp, #4]
 8001550:	0058      	lsls	r0, r3, #1
 8001552:	3801      	subs	r0, #1
 8001554:	e7e9      	b.n	800152a <__ledf2+0x82>
 8001556:	2c00      	cmp	r4, #0
 8001558:	d0cd      	beq.n	80014f6 <__ledf2+0x4e>
 800155a:	e7d7      	b.n	800150c <__ledf2+0x64>
 800155c:	2c00      	cmp	r4, #0
 800155e:	d0e4      	beq.n	800152a <__ledf2+0x82>
 8001560:	e7d7      	b.n	8001512 <__ledf2+0x6a>
 8001562:	9b01      	ldr	r3, [sp, #4]
 8001564:	2000      	movs	r0, #0
 8001566:	4563      	cmp	r3, ip
 8001568:	d0df      	beq.n	800152a <__ledf2+0x82>
 800156a:	e7d2      	b.n	8001512 <__ledf2+0x6a>
 800156c:	45c8      	cmp	r8, r9
 800156e:	d8d0      	bhi.n	8001512 <__ledf2+0x6a>
 8001570:	2000      	movs	r0, #0
 8001572:	45c8      	cmp	r8, r9
 8001574:	d2d9      	bcs.n	800152a <__ledf2+0x82>
 8001576:	e7ea      	b.n	800154e <__ledf2+0xa6>
 8001578:	9b01      	ldr	r3, [sp, #4]
 800157a:	4563      	cmp	r3, ip
 800157c:	d0e4      	beq.n	8001548 <__ledf2+0xa0>
 800157e:	e7c8      	b.n	8001512 <__ledf2+0x6a>
 8001580:	000007ff 	.word	0x000007ff

08001584 <__aeabi_dmul>:
 8001584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001586:	4657      	mov	r7, sl
 8001588:	464e      	mov	r6, r9
 800158a:	46de      	mov	lr, fp
 800158c:	4645      	mov	r5, r8
 800158e:	b5e0      	push	{r5, r6, r7, lr}
 8001590:	001f      	movs	r7, r3
 8001592:	030b      	lsls	r3, r1, #12
 8001594:	0b1b      	lsrs	r3, r3, #12
 8001596:	0016      	movs	r6, r2
 8001598:	469a      	mov	sl, r3
 800159a:	0fca      	lsrs	r2, r1, #31
 800159c:	004b      	lsls	r3, r1, #1
 800159e:	0004      	movs	r4, r0
 80015a0:	4691      	mov	r9, r2
 80015a2:	b085      	sub	sp, #20
 80015a4:	0d5b      	lsrs	r3, r3, #21
 80015a6:	d100      	bne.n	80015aa <__aeabi_dmul+0x26>
 80015a8:	e1cf      	b.n	800194a <__aeabi_dmul+0x3c6>
 80015aa:	4acd      	ldr	r2, [pc, #820]	@ (80018e0 <__aeabi_dmul+0x35c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d055      	beq.n	800165c <__aeabi_dmul+0xd8>
 80015b0:	4651      	mov	r1, sl
 80015b2:	0f42      	lsrs	r2, r0, #29
 80015b4:	00c9      	lsls	r1, r1, #3
 80015b6:	430a      	orrs	r2, r1
 80015b8:	2180      	movs	r1, #128	@ 0x80
 80015ba:	0409      	lsls	r1, r1, #16
 80015bc:	4311      	orrs	r1, r2
 80015be:	00c2      	lsls	r2, r0, #3
 80015c0:	4690      	mov	r8, r2
 80015c2:	4ac8      	ldr	r2, [pc, #800]	@ (80018e4 <__aeabi_dmul+0x360>)
 80015c4:	468a      	mov	sl, r1
 80015c6:	4693      	mov	fp, r2
 80015c8:	449b      	add	fp, r3
 80015ca:	2300      	movs	r3, #0
 80015cc:	2500      	movs	r5, #0
 80015ce:	9302      	str	r3, [sp, #8]
 80015d0:	033c      	lsls	r4, r7, #12
 80015d2:	007b      	lsls	r3, r7, #1
 80015d4:	0ffa      	lsrs	r2, r7, #31
 80015d6:	9601      	str	r6, [sp, #4]
 80015d8:	0b24      	lsrs	r4, r4, #12
 80015da:	0d5b      	lsrs	r3, r3, #21
 80015dc:	9200      	str	r2, [sp, #0]
 80015de:	d100      	bne.n	80015e2 <__aeabi_dmul+0x5e>
 80015e0:	e188      	b.n	80018f4 <__aeabi_dmul+0x370>
 80015e2:	4abf      	ldr	r2, [pc, #764]	@ (80018e0 <__aeabi_dmul+0x35c>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d100      	bne.n	80015ea <__aeabi_dmul+0x66>
 80015e8:	e092      	b.n	8001710 <__aeabi_dmul+0x18c>
 80015ea:	4abe      	ldr	r2, [pc, #760]	@ (80018e4 <__aeabi_dmul+0x360>)
 80015ec:	4694      	mov	ip, r2
 80015ee:	4463      	add	r3, ip
 80015f0:	449b      	add	fp, r3
 80015f2:	2d0a      	cmp	r5, #10
 80015f4:	dc42      	bgt.n	800167c <__aeabi_dmul+0xf8>
 80015f6:	00e4      	lsls	r4, r4, #3
 80015f8:	0f73      	lsrs	r3, r6, #29
 80015fa:	4323      	orrs	r3, r4
 80015fc:	2480      	movs	r4, #128	@ 0x80
 80015fe:	4649      	mov	r1, r9
 8001600:	0424      	lsls	r4, r4, #16
 8001602:	431c      	orrs	r4, r3
 8001604:	00f3      	lsls	r3, r6, #3
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	9b00      	ldr	r3, [sp, #0]
 800160a:	2000      	movs	r0, #0
 800160c:	4059      	eors	r1, r3
 800160e:	b2cb      	uxtb	r3, r1
 8001610:	9303      	str	r3, [sp, #12]
 8001612:	2d02      	cmp	r5, #2
 8001614:	dc00      	bgt.n	8001618 <__aeabi_dmul+0x94>
 8001616:	e094      	b.n	8001742 <__aeabi_dmul+0x1be>
 8001618:	2301      	movs	r3, #1
 800161a:	40ab      	lsls	r3, r5
 800161c:	001d      	movs	r5, r3
 800161e:	23a6      	movs	r3, #166	@ 0xa6
 8001620:	002a      	movs	r2, r5
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	401a      	ands	r2, r3
 8001626:	421d      	tst	r5, r3
 8001628:	d000      	beq.n	800162c <__aeabi_dmul+0xa8>
 800162a:	e229      	b.n	8001a80 <__aeabi_dmul+0x4fc>
 800162c:	2390      	movs	r3, #144	@ 0x90
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	421d      	tst	r5, r3
 8001632:	d100      	bne.n	8001636 <__aeabi_dmul+0xb2>
 8001634:	e24d      	b.n	8001ad2 <__aeabi_dmul+0x54e>
 8001636:	2300      	movs	r3, #0
 8001638:	2480      	movs	r4, #128	@ 0x80
 800163a:	4699      	mov	r9, r3
 800163c:	0324      	lsls	r4, r4, #12
 800163e:	4ba8      	ldr	r3, [pc, #672]	@ (80018e0 <__aeabi_dmul+0x35c>)
 8001640:	0010      	movs	r0, r2
 8001642:	464a      	mov	r2, r9
 8001644:	051b      	lsls	r3, r3, #20
 8001646:	4323      	orrs	r3, r4
 8001648:	07d2      	lsls	r2, r2, #31
 800164a:	4313      	orrs	r3, r2
 800164c:	0019      	movs	r1, r3
 800164e:	b005      	add	sp, #20
 8001650:	bcf0      	pop	{r4, r5, r6, r7}
 8001652:	46bb      	mov	fp, r7
 8001654:	46b2      	mov	sl, r6
 8001656:	46a9      	mov	r9, r5
 8001658:	46a0      	mov	r8, r4
 800165a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800165c:	4652      	mov	r2, sl
 800165e:	4302      	orrs	r2, r0
 8001660:	4690      	mov	r8, r2
 8001662:	d000      	beq.n	8001666 <__aeabi_dmul+0xe2>
 8001664:	e1ac      	b.n	80019c0 <__aeabi_dmul+0x43c>
 8001666:	469b      	mov	fp, r3
 8001668:	2302      	movs	r3, #2
 800166a:	4692      	mov	sl, r2
 800166c:	2508      	movs	r5, #8
 800166e:	9302      	str	r3, [sp, #8]
 8001670:	e7ae      	b.n	80015d0 <__aeabi_dmul+0x4c>
 8001672:	9b00      	ldr	r3, [sp, #0]
 8001674:	46a2      	mov	sl, r4
 8001676:	4699      	mov	r9, r3
 8001678:	9b01      	ldr	r3, [sp, #4]
 800167a:	4698      	mov	r8, r3
 800167c:	9b02      	ldr	r3, [sp, #8]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d100      	bne.n	8001684 <__aeabi_dmul+0x100>
 8001682:	e1ca      	b.n	8001a1a <__aeabi_dmul+0x496>
 8001684:	2b03      	cmp	r3, #3
 8001686:	d100      	bne.n	800168a <__aeabi_dmul+0x106>
 8001688:	e192      	b.n	80019b0 <__aeabi_dmul+0x42c>
 800168a:	2b01      	cmp	r3, #1
 800168c:	d110      	bne.n	80016b0 <__aeabi_dmul+0x12c>
 800168e:	2300      	movs	r3, #0
 8001690:	2400      	movs	r4, #0
 8001692:	2200      	movs	r2, #0
 8001694:	e7d4      	b.n	8001640 <__aeabi_dmul+0xbc>
 8001696:	2201      	movs	r2, #1
 8001698:	087b      	lsrs	r3, r7, #1
 800169a:	403a      	ands	r2, r7
 800169c:	4313      	orrs	r3, r2
 800169e:	4652      	mov	r2, sl
 80016a0:	07d2      	lsls	r2, r2, #31
 80016a2:	4313      	orrs	r3, r2
 80016a4:	4698      	mov	r8, r3
 80016a6:	4653      	mov	r3, sl
 80016a8:	085b      	lsrs	r3, r3, #1
 80016aa:	469a      	mov	sl, r3
 80016ac:	9b03      	ldr	r3, [sp, #12]
 80016ae:	4699      	mov	r9, r3
 80016b0:	465b      	mov	r3, fp
 80016b2:	1c58      	adds	r0, r3, #1
 80016b4:	2380      	movs	r3, #128	@ 0x80
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	445b      	add	r3, fp
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	dc00      	bgt.n	80016c0 <__aeabi_dmul+0x13c>
 80016be:	e1b1      	b.n	8001a24 <__aeabi_dmul+0x4a0>
 80016c0:	4642      	mov	r2, r8
 80016c2:	0752      	lsls	r2, r2, #29
 80016c4:	d00b      	beq.n	80016de <__aeabi_dmul+0x15a>
 80016c6:	220f      	movs	r2, #15
 80016c8:	4641      	mov	r1, r8
 80016ca:	400a      	ands	r2, r1
 80016cc:	2a04      	cmp	r2, #4
 80016ce:	d006      	beq.n	80016de <__aeabi_dmul+0x15a>
 80016d0:	4642      	mov	r2, r8
 80016d2:	1d11      	adds	r1, r2, #4
 80016d4:	4541      	cmp	r1, r8
 80016d6:	4192      	sbcs	r2, r2
 80016d8:	4688      	mov	r8, r1
 80016da:	4252      	negs	r2, r2
 80016dc:	4492      	add	sl, r2
 80016de:	4652      	mov	r2, sl
 80016e0:	01d2      	lsls	r2, r2, #7
 80016e2:	d506      	bpl.n	80016f2 <__aeabi_dmul+0x16e>
 80016e4:	4652      	mov	r2, sl
 80016e6:	4b80      	ldr	r3, [pc, #512]	@ (80018e8 <__aeabi_dmul+0x364>)
 80016e8:	401a      	ands	r2, r3
 80016ea:	2380      	movs	r3, #128	@ 0x80
 80016ec:	4692      	mov	sl, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	18c3      	adds	r3, r0, r3
 80016f2:	4a7e      	ldr	r2, [pc, #504]	@ (80018ec <__aeabi_dmul+0x368>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	dd00      	ble.n	80016fa <__aeabi_dmul+0x176>
 80016f8:	e18f      	b.n	8001a1a <__aeabi_dmul+0x496>
 80016fa:	4642      	mov	r2, r8
 80016fc:	08d1      	lsrs	r1, r2, #3
 80016fe:	4652      	mov	r2, sl
 8001700:	0752      	lsls	r2, r2, #29
 8001702:	430a      	orrs	r2, r1
 8001704:	4651      	mov	r1, sl
 8001706:	055b      	lsls	r3, r3, #21
 8001708:	024c      	lsls	r4, r1, #9
 800170a:	0b24      	lsrs	r4, r4, #12
 800170c:	0d5b      	lsrs	r3, r3, #21
 800170e:	e797      	b.n	8001640 <__aeabi_dmul+0xbc>
 8001710:	4b73      	ldr	r3, [pc, #460]	@ (80018e0 <__aeabi_dmul+0x35c>)
 8001712:	4326      	orrs	r6, r4
 8001714:	469c      	mov	ip, r3
 8001716:	44e3      	add	fp, ip
 8001718:	2e00      	cmp	r6, #0
 800171a:	d100      	bne.n	800171e <__aeabi_dmul+0x19a>
 800171c:	e16f      	b.n	80019fe <__aeabi_dmul+0x47a>
 800171e:	2303      	movs	r3, #3
 8001720:	4649      	mov	r1, r9
 8001722:	431d      	orrs	r5, r3
 8001724:	9b00      	ldr	r3, [sp, #0]
 8001726:	4059      	eors	r1, r3
 8001728:	b2cb      	uxtb	r3, r1
 800172a:	9303      	str	r3, [sp, #12]
 800172c:	2d0a      	cmp	r5, #10
 800172e:	dd00      	ble.n	8001732 <__aeabi_dmul+0x1ae>
 8001730:	e133      	b.n	800199a <__aeabi_dmul+0x416>
 8001732:	2301      	movs	r3, #1
 8001734:	40ab      	lsls	r3, r5
 8001736:	001d      	movs	r5, r3
 8001738:	2303      	movs	r3, #3
 800173a:	9302      	str	r3, [sp, #8]
 800173c:	2288      	movs	r2, #136	@ 0x88
 800173e:	422a      	tst	r2, r5
 8001740:	d197      	bne.n	8001672 <__aeabi_dmul+0xee>
 8001742:	4642      	mov	r2, r8
 8001744:	4643      	mov	r3, r8
 8001746:	0412      	lsls	r2, r2, #16
 8001748:	0c12      	lsrs	r2, r2, #16
 800174a:	0016      	movs	r6, r2
 800174c:	9801      	ldr	r0, [sp, #4]
 800174e:	0c1d      	lsrs	r5, r3, #16
 8001750:	0c03      	lsrs	r3, r0, #16
 8001752:	0400      	lsls	r0, r0, #16
 8001754:	0c00      	lsrs	r0, r0, #16
 8001756:	4346      	muls	r6, r0
 8001758:	46b4      	mov	ip, r6
 800175a:	001e      	movs	r6, r3
 800175c:	436e      	muls	r6, r5
 800175e:	9600      	str	r6, [sp, #0]
 8001760:	0016      	movs	r6, r2
 8001762:	0007      	movs	r7, r0
 8001764:	435e      	muls	r6, r3
 8001766:	4661      	mov	r1, ip
 8001768:	46b0      	mov	r8, r6
 800176a:	436f      	muls	r7, r5
 800176c:	0c0e      	lsrs	r6, r1, #16
 800176e:	44b8      	add	r8, r7
 8001770:	4446      	add	r6, r8
 8001772:	42b7      	cmp	r7, r6
 8001774:	d905      	bls.n	8001782 <__aeabi_dmul+0x1fe>
 8001776:	2180      	movs	r1, #128	@ 0x80
 8001778:	0249      	lsls	r1, r1, #9
 800177a:	4688      	mov	r8, r1
 800177c:	9f00      	ldr	r7, [sp, #0]
 800177e:	4447      	add	r7, r8
 8001780:	9700      	str	r7, [sp, #0]
 8001782:	4661      	mov	r1, ip
 8001784:	0409      	lsls	r1, r1, #16
 8001786:	0c09      	lsrs	r1, r1, #16
 8001788:	0c37      	lsrs	r7, r6, #16
 800178a:	0436      	lsls	r6, r6, #16
 800178c:	468c      	mov	ip, r1
 800178e:	0031      	movs	r1, r6
 8001790:	4461      	add	r1, ip
 8001792:	9101      	str	r1, [sp, #4]
 8001794:	0011      	movs	r1, r2
 8001796:	0c26      	lsrs	r6, r4, #16
 8001798:	0424      	lsls	r4, r4, #16
 800179a:	0c24      	lsrs	r4, r4, #16
 800179c:	4361      	muls	r1, r4
 800179e:	468c      	mov	ip, r1
 80017a0:	0021      	movs	r1, r4
 80017a2:	4369      	muls	r1, r5
 80017a4:	4689      	mov	r9, r1
 80017a6:	4661      	mov	r1, ip
 80017a8:	0c09      	lsrs	r1, r1, #16
 80017aa:	4688      	mov	r8, r1
 80017ac:	4372      	muls	r2, r6
 80017ae:	444a      	add	r2, r9
 80017b0:	4442      	add	r2, r8
 80017b2:	4375      	muls	r5, r6
 80017b4:	4591      	cmp	r9, r2
 80017b6:	d903      	bls.n	80017c0 <__aeabi_dmul+0x23c>
 80017b8:	2180      	movs	r1, #128	@ 0x80
 80017ba:	0249      	lsls	r1, r1, #9
 80017bc:	4688      	mov	r8, r1
 80017be:	4445      	add	r5, r8
 80017c0:	0c11      	lsrs	r1, r2, #16
 80017c2:	4688      	mov	r8, r1
 80017c4:	4661      	mov	r1, ip
 80017c6:	0409      	lsls	r1, r1, #16
 80017c8:	0c09      	lsrs	r1, r1, #16
 80017ca:	468c      	mov	ip, r1
 80017cc:	0412      	lsls	r2, r2, #16
 80017ce:	4462      	add	r2, ip
 80017d0:	18b9      	adds	r1, r7, r2
 80017d2:	9102      	str	r1, [sp, #8]
 80017d4:	4651      	mov	r1, sl
 80017d6:	0c09      	lsrs	r1, r1, #16
 80017d8:	468c      	mov	ip, r1
 80017da:	4651      	mov	r1, sl
 80017dc:	040f      	lsls	r7, r1, #16
 80017de:	0c3f      	lsrs	r7, r7, #16
 80017e0:	0039      	movs	r1, r7
 80017e2:	4341      	muls	r1, r0
 80017e4:	4445      	add	r5, r8
 80017e6:	4688      	mov	r8, r1
 80017e8:	4661      	mov	r1, ip
 80017ea:	4341      	muls	r1, r0
 80017ec:	468a      	mov	sl, r1
 80017ee:	4641      	mov	r1, r8
 80017f0:	4660      	mov	r0, ip
 80017f2:	0c09      	lsrs	r1, r1, #16
 80017f4:	4689      	mov	r9, r1
 80017f6:	4358      	muls	r0, r3
 80017f8:	437b      	muls	r3, r7
 80017fa:	4453      	add	r3, sl
 80017fc:	444b      	add	r3, r9
 80017fe:	459a      	cmp	sl, r3
 8001800:	d903      	bls.n	800180a <__aeabi_dmul+0x286>
 8001802:	2180      	movs	r1, #128	@ 0x80
 8001804:	0249      	lsls	r1, r1, #9
 8001806:	4689      	mov	r9, r1
 8001808:	4448      	add	r0, r9
 800180a:	0c19      	lsrs	r1, r3, #16
 800180c:	4689      	mov	r9, r1
 800180e:	4641      	mov	r1, r8
 8001810:	0409      	lsls	r1, r1, #16
 8001812:	0c09      	lsrs	r1, r1, #16
 8001814:	4688      	mov	r8, r1
 8001816:	0039      	movs	r1, r7
 8001818:	4361      	muls	r1, r4
 800181a:	041b      	lsls	r3, r3, #16
 800181c:	4443      	add	r3, r8
 800181e:	4688      	mov	r8, r1
 8001820:	4661      	mov	r1, ip
 8001822:	434c      	muls	r4, r1
 8001824:	4371      	muls	r1, r6
 8001826:	468c      	mov	ip, r1
 8001828:	4641      	mov	r1, r8
 800182a:	4377      	muls	r7, r6
 800182c:	0c0e      	lsrs	r6, r1, #16
 800182e:	193f      	adds	r7, r7, r4
 8001830:	19f6      	adds	r6, r6, r7
 8001832:	4448      	add	r0, r9
 8001834:	42b4      	cmp	r4, r6
 8001836:	d903      	bls.n	8001840 <__aeabi_dmul+0x2bc>
 8001838:	2180      	movs	r1, #128	@ 0x80
 800183a:	0249      	lsls	r1, r1, #9
 800183c:	4689      	mov	r9, r1
 800183e:	44cc      	add	ip, r9
 8001840:	9902      	ldr	r1, [sp, #8]
 8001842:	9f00      	ldr	r7, [sp, #0]
 8001844:	4689      	mov	r9, r1
 8001846:	0431      	lsls	r1, r6, #16
 8001848:	444f      	add	r7, r9
 800184a:	4689      	mov	r9, r1
 800184c:	4641      	mov	r1, r8
 800184e:	4297      	cmp	r7, r2
 8001850:	4192      	sbcs	r2, r2
 8001852:	040c      	lsls	r4, r1, #16
 8001854:	0c24      	lsrs	r4, r4, #16
 8001856:	444c      	add	r4, r9
 8001858:	18ff      	adds	r7, r7, r3
 800185a:	4252      	negs	r2, r2
 800185c:	1964      	adds	r4, r4, r5
 800185e:	18a1      	adds	r1, r4, r2
 8001860:	429f      	cmp	r7, r3
 8001862:	419b      	sbcs	r3, r3
 8001864:	4688      	mov	r8, r1
 8001866:	4682      	mov	sl, r0
 8001868:	425b      	negs	r3, r3
 800186a:	4699      	mov	r9, r3
 800186c:	4590      	cmp	r8, r2
 800186e:	4192      	sbcs	r2, r2
 8001870:	42ac      	cmp	r4, r5
 8001872:	41a4      	sbcs	r4, r4
 8001874:	44c2      	add	sl, r8
 8001876:	44d1      	add	r9, sl
 8001878:	4252      	negs	r2, r2
 800187a:	4264      	negs	r4, r4
 800187c:	4314      	orrs	r4, r2
 800187e:	4599      	cmp	r9, r3
 8001880:	419b      	sbcs	r3, r3
 8001882:	4582      	cmp	sl, r0
 8001884:	4192      	sbcs	r2, r2
 8001886:	425b      	negs	r3, r3
 8001888:	4252      	negs	r2, r2
 800188a:	4313      	orrs	r3, r2
 800188c:	464a      	mov	r2, r9
 800188e:	0c36      	lsrs	r6, r6, #16
 8001890:	19a4      	adds	r4, r4, r6
 8001892:	18e3      	adds	r3, r4, r3
 8001894:	4463      	add	r3, ip
 8001896:	025b      	lsls	r3, r3, #9
 8001898:	0dd2      	lsrs	r2, r2, #23
 800189a:	431a      	orrs	r2, r3
 800189c:	9901      	ldr	r1, [sp, #4]
 800189e:	4692      	mov	sl, r2
 80018a0:	027a      	lsls	r2, r7, #9
 80018a2:	430a      	orrs	r2, r1
 80018a4:	1e50      	subs	r0, r2, #1
 80018a6:	4182      	sbcs	r2, r0
 80018a8:	0dff      	lsrs	r7, r7, #23
 80018aa:	4317      	orrs	r7, r2
 80018ac:	464a      	mov	r2, r9
 80018ae:	0252      	lsls	r2, r2, #9
 80018b0:	4317      	orrs	r7, r2
 80018b2:	46b8      	mov	r8, r7
 80018b4:	01db      	lsls	r3, r3, #7
 80018b6:	d500      	bpl.n	80018ba <__aeabi_dmul+0x336>
 80018b8:	e6ed      	b.n	8001696 <__aeabi_dmul+0x112>
 80018ba:	4b0d      	ldr	r3, [pc, #52]	@ (80018f0 <__aeabi_dmul+0x36c>)
 80018bc:	9a03      	ldr	r2, [sp, #12]
 80018be:	445b      	add	r3, fp
 80018c0:	4691      	mov	r9, r2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	dc00      	bgt.n	80018c8 <__aeabi_dmul+0x344>
 80018c6:	e0ac      	b.n	8001a22 <__aeabi_dmul+0x49e>
 80018c8:	003a      	movs	r2, r7
 80018ca:	0752      	lsls	r2, r2, #29
 80018cc:	d100      	bne.n	80018d0 <__aeabi_dmul+0x34c>
 80018ce:	e710      	b.n	80016f2 <__aeabi_dmul+0x16e>
 80018d0:	220f      	movs	r2, #15
 80018d2:	4658      	mov	r0, fp
 80018d4:	403a      	ands	r2, r7
 80018d6:	2a04      	cmp	r2, #4
 80018d8:	d000      	beq.n	80018dc <__aeabi_dmul+0x358>
 80018da:	e6f9      	b.n	80016d0 <__aeabi_dmul+0x14c>
 80018dc:	e709      	b.n	80016f2 <__aeabi_dmul+0x16e>
 80018de:	46c0      	nop			@ (mov r8, r8)
 80018e0:	000007ff 	.word	0x000007ff
 80018e4:	fffffc01 	.word	0xfffffc01
 80018e8:	feffffff 	.word	0xfeffffff
 80018ec:	000007fe 	.word	0x000007fe
 80018f0:	000003ff 	.word	0x000003ff
 80018f4:	0022      	movs	r2, r4
 80018f6:	4332      	orrs	r2, r6
 80018f8:	d06f      	beq.n	80019da <__aeabi_dmul+0x456>
 80018fa:	2c00      	cmp	r4, #0
 80018fc:	d100      	bne.n	8001900 <__aeabi_dmul+0x37c>
 80018fe:	e0c2      	b.n	8001a86 <__aeabi_dmul+0x502>
 8001900:	0020      	movs	r0, r4
 8001902:	f000 fddf 	bl	80024c4 <__clzsi2>
 8001906:	0002      	movs	r2, r0
 8001908:	0003      	movs	r3, r0
 800190a:	3a0b      	subs	r2, #11
 800190c:	201d      	movs	r0, #29
 800190e:	1a82      	subs	r2, r0, r2
 8001910:	0030      	movs	r0, r6
 8001912:	0019      	movs	r1, r3
 8001914:	40d0      	lsrs	r0, r2
 8001916:	3908      	subs	r1, #8
 8001918:	408c      	lsls	r4, r1
 800191a:	0002      	movs	r2, r0
 800191c:	4322      	orrs	r2, r4
 800191e:	0034      	movs	r4, r6
 8001920:	408c      	lsls	r4, r1
 8001922:	4659      	mov	r1, fp
 8001924:	1acb      	subs	r3, r1, r3
 8001926:	4986      	ldr	r1, [pc, #536]	@ (8001b40 <__aeabi_dmul+0x5bc>)
 8001928:	468b      	mov	fp, r1
 800192a:	449b      	add	fp, r3
 800192c:	2d0a      	cmp	r5, #10
 800192e:	dd00      	ble.n	8001932 <__aeabi_dmul+0x3ae>
 8001930:	e6a4      	b.n	800167c <__aeabi_dmul+0xf8>
 8001932:	4649      	mov	r1, r9
 8001934:	9b00      	ldr	r3, [sp, #0]
 8001936:	9401      	str	r4, [sp, #4]
 8001938:	4059      	eors	r1, r3
 800193a:	b2cb      	uxtb	r3, r1
 800193c:	0014      	movs	r4, r2
 800193e:	2000      	movs	r0, #0
 8001940:	9303      	str	r3, [sp, #12]
 8001942:	2d02      	cmp	r5, #2
 8001944:	dd00      	ble.n	8001948 <__aeabi_dmul+0x3c4>
 8001946:	e667      	b.n	8001618 <__aeabi_dmul+0x94>
 8001948:	e6fb      	b.n	8001742 <__aeabi_dmul+0x1be>
 800194a:	4653      	mov	r3, sl
 800194c:	4303      	orrs	r3, r0
 800194e:	4698      	mov	r8, r3
 8001950:	d03c      	beq.n	80019cc <__aeabi_dmul+0x448>
 8001952:	4653      	mov	r3, sl
 8001954:	2b00      	cmp	r3, #0
 8001956:	d100      	bne.n	800195a <__aeabi_dmul+0x3d6>
 8001958:	e0a3      	b.n	8001aa2 <__aeabi_dmul+0x51e>
 800195a:	4650      	mov	r0, sl
 800195c:	f000 fdb2 	bl	80024c4 <__clzsi2>
 8001960:	230b      	movs	r3, #11
 8001962:	425b      	negs	r3, r3
 8001964:	469c      	mov	ip, r3
 8001966:	0002      	movs	r2, r0
 8001968:	4484      	add	ip, r0
 800196a:	0011      	movs	r1, r2
 800196c:	4650      	mov	r0, sl
 800196e:	3908      	subs	r1, #8
 8001970:	4088      	lsls	r0, r1
 8001972:	231d      	movs	r3, #29
 8001974:	4680      	mov	r8, r0
 8001976:	4660      	mov	r0, ip
 8001978:	1a1b      	subs	r3, r3, r0
 800197a:	0020      	movs	r0, r4
 800197c:	40d8      	lsrs	r0, r3
 800197e:	0003      	movs	r3, r0
 8001980:	4640      	mov	r0, r8
 8001982:	4303      	orrs	r3, r0
 8001984:	469a      	mov	sl, r3
 8001986:	0023      	movs	r3, r4
 8001988:	408b      	lsls	r3, r1
 800198a:	4698      	mov	r8, r3
 800198c:	4b6c      	ldr	r3, [pc, #432]	@ (8001b40 <__aeabi_dmul+0x5bc>)
 800198e:	2500      	movs	r5, #0
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	469b      	mov	fp, r3
 8001994:	2300      	movs	r3, #0
 8001996:	9302      	str	r3, [sp, #8]
 8001998:	e61a      	b.n	80015d0 <__aeabi_dmul+0x4c>
 800199a:	2d0f      	cmp	r5, #15
 800199c:	d000      	beq.n	80019a0 <__aeabi_dmul+0x41c>
 800199e:	e0c9      	b.n	8001b34 <__aeabi_dmul+0x5b0>
 80019a0:	2380      	movs	r3, #128	@ 0x80
 80019a2:	4652      	mov	r2, sl
 80019a4:	031b      	lsls	r3, r3, #12
 80019a6:	421a      	tst	r2, r3
 80019a8:	d002      	beq.n	80019b0 <__aeabi_dmul+0x42c>
 80019aa:	421c      	tst	r4, r3
 80019ac:	d100      	bne.n	80019b0 <__aeabi_dmul+0x42c>
 80019ae:	e092      	b.n	8001ad6 <__aeabi_dmul+0x552>
 80019b0:	2480      	movs	r4, #128	@ 0x80
 80019b2:	4653      	mov	r3, sl
 80019b4:	0324      	lsls	r4, r4, #12
 80019b6:	431c      	orrs	r4, r3
 80019b8:	0324      	lsls	r4, r4, #12
 80019ba:	4642      	mov	r2, r8
 80019bc:	0b24      	lsrs	r4, r4, #12
 80019be:	e63e      	b.n	800163e <__aeabi_dmul+0xba>
 80019c0:	469b      	mov	fp, r3
 80019c2:	2303      	movs	r3, #3
 80019c4:	4680      	mov	r8, r0
 80019c6:	250c      	movs	r5, #12
 80019c8:	9302      	str	r3, [sp, #8]
 80019ca:	e601      	b.n	80015d0 <__aeabi_dmul+0x4c>
 80019cc:	2300      	movs	r3, #0
 80019ce:	469a      	mov	sl, r3
 80019d0:	469b      	mov	fp, r3
 80019d2:	3301      	adds	r3, #1
 80019d4:	2504      	movs	r5, #4
 80019d6:	9302      	str	r3, [sp, #8]
 80019d8:	e5fa      	b.n	80015d0 <__aeabi_dmul+0x4c>
 80019da:	2101      	movs	r1, #1
 80019dc:	430d      	orrs	r5, r1
 80019de:	2d0a      	cmp	r5, #10
 80019e0:	dd00      	ble.n	80019e4 <__aeabi_dmul+0x460>
 80019e2:	e64b      	b.n	800167c <__aeabi_dmul+0xf8>
 80019e4:	4649      	mov	r1, r9
 80019e6:	9800      	ldr	r0, [sp, #0]
 80019e8:	4041      	eors	r1, r0
 80019ea:	b2c9      	uxtb	r1, r1
 80019ec:	9103      	str	r1, [sp, #12]
 80019ee:	2d02      	cmp	r5, #2
 80019f0:	dc00      	bgt.n	80019f4 <__aeabi_dmul+0x470>
 80019f2:	e096      	b.n	8001b22 <__aeabi_dmul+0x59e>
 80019f4:	2300      	movs	r3, #0
 80019f6:	2400      	movs	r4, #0
 80019f8:	2001      	movs	r0, #1
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	e60c      	b.n	8001618 <__aeabi_dmul+0x94>
 80019fe:	4649      	mov	r1, r9
 8001a00:	2302      	movs	r3, #2
 8001a02:	9a00      	ldr	r2, [sp, #0]
 8001a04:	432b      	orrs	r3, r5
 8001a06:	4051      	eors	r1, r2
 8001a08:	b2ca      	uxtb	r2, r1
 8001a0a:	9203      	str	r2, [sp, #12]
 8001a0c:	2b0a      	cmp	r3, #10
 8001a0e:	dd00      	ble.n	8001a12 <__aeabi_dmul+0x48e>
 8001a10:	e634      	b.n	800167c <__aeabi_dmul+0xf8>
 8001a12:	2d00      	cmp	r5, #0
 8001a14:	d157      	bne.n	8001ac6 <__aeabi_dmul+0x542>
 8001a16:	9b03      	ldr	r3, [sp, #12]
 8001a18:	4699      	mov	r9, r3
 8001a1a:	2400      	movs	r4, #0
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	4b49      	ldr	r3, [pc, #292]	@ (8001b44 <__aeabi_dmul+0x5c0>)
 8001a20:	e60e      	b.n	8001640 <__aeabi_dmul+0xbc>
 8001a22:	4658      	mov	r0, fp
 8001a24:	2101      	movs	r1, #1
 8001a26:	1ac9      	subs	r1, r1, r3
 8001a28:	2938      	cmp	r1, #56	@ 0x38
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dmul+0x4aa>
 8001a2c:	e62f      	b.n	800168e <__aeabi_dmul+0x10a>
 8001a2e:	291f      	cmp	r1, #31
 8001a30:	dd56      	ble.n	8001ae0 <__aeabi_dmul+0x55c>
 8001a32:	221f      	movs	r2, #31
 8001a34:	4654      	mov	r4, sl
 8001a36:	4252      	negs	r2, r2
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	40dc      	lsrs	r4, r3
 8001a3c:	2920      	cmp	r1, #32
 8001a3e:	d007      	beq.n	8001a50 <__aeabi_dmul+0x4cc>
 8001a40:	4b41      	ldr	r3, [pc, #260]	@ (8001b48 <__aeabi_dmul+0x5c4>)
 8001a42:	4642      	mov	r2, r8
 8001a44:	469c      	mov	ip, r3
 8001a46:	4653      	mov	r3, sl
 8001a48:	4460      	add	r0, ip
 8001a4a:	4083      	lsls	r3, r0
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	4690      	mov	r8, r2
 8001a50:	4642      	mov	r2, r8
 8001a52:	2107      	movs	r1, #7
 8001a54:	1e53      	subs	r3, r2, #1
 8001a56:	419a      	sbcs	r2, r3
 8001a58:	000b      	movs	r3, r1
 8001a5a:	4322      	orrs	r2, r4
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2400      	movs	r4, #0
 8001a60:	4211      	tst	r1, r2
 8001a62:	d009      	beq.n	8001a78 <__aeabi_dmul+0x4f4>
 8001a64:	230f      	movs	r3, #15
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d05d      	beq.n	8001b28 <__aeabi_dmul+0x5a4>
 8001a6c:	1d11      	adds	r1, r2, #4
 8001a6e:	4291      	cmp	r1, r2
 8001a70:	419b      	sbcs	r3, r3
 8001a72:	000a      	movs	r2, r1
 8001a74:	425b      	negs	r3, r3
 8001a76:	075b      	lsls	r3, r3, #29
 8001a78:	08d2      	lsrs	r2, r2, #3
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	e5df      	b.n	8001640 <__aeabi_dmul+0xbc>
 8001a80:	9b03      	ldr	r3, [sp, #12]
 8001a82:	4699      	mov	r9, r3
 8001a84:	e5fa      	b.n	800167c <__aeabi_dmul+0xf8>
 8001a86:	9801      	ldr	r0, [sp, #4]
 8001a88:	f000 fd1c 	bl	80024c4 <__clzsi2>
 8001a8c:	0002      	movs	r2, r0
 8001a8e:	0003      	movs	r3, r0
 8001a90:	3215      	adds	r2, #21
 8001a92:	3320      	adds	r3, #32
 8001a94:	2a1c      	cmp	r2, #28
 8001a96:	dc00      	bgt.n	8001a9a <__aeabi_dmul+0x516>
 8001a98:	e738      	b.n	800190c <__aeabi_dmul+0x388>
 8001a9a:	9a01      	ldr	r2, [sp, #4]
 8001a9c:	3808      	subs	r0, #8
 8001a9e:	4082      	lsls	r2, r0
 8001aa0:	e73f      	b.n	8001922 <__aeabi_dmul+0x39e>
 8001aa2:	f000 fd0f 	bl	80024c4 <__clzsi2>
 8001aa6:	2315      	movs	r3, #21
 8001aa8:	469c      	mov	ip, r3
 8001aaa:	4484      	add	ip, r0
 8001aac:	0002      	movs	r2, r0
 8001aae:	4663      	mov	r3, ip
 8001ab0:	3220      	adds	r2, #32
 8001ab2:	2b1c      	cmp	r3, #28
 8001ab4:	dc00      	bgt.n	8001ab8 <__aeabi_dmul+0x534>
 8001ab6:	e758      	b.n	800196a <__aeabi_dmul+0x3e6>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	4698      	mov	r8, r3
 8001abc:	0023      	movs	r3, r4
 8001abe:	3808      	subs	r0, #8
 8001ac0:	4083      	lsls	r3, r0
 8001ac2:	469a      	mov	sl, r3
 8001ac4:	e762      	b.n	800198c <__aeabi_dmul+0x408>
 8001ac6:	001d      	movs	r5, r3
 8001ac8:	2300      	movs	r3, #0
 8001aca:	2400      	movs	r4, #0
 8001acc:	2002      	movs	r0, #2
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	e5a2      	b.n	8001618 <__aeabi_dmul+0x94>
 8001ad2:	9002      	str	r0, [sp, #8]
 8001ad4:	e632      	b.n	800173c <__aeabi_dmul+0x1b8>
 8001ad6:	431c      	orrs	r4, r3
 8001ad8:	9b00      	ldr	r3, [sp, #0]
 8001ada:	9a01      	ldr	r2, [sp, #4]
 8001adc:	4699      	mov	r9, r3
 8001ade:	e5ae      	b.n	800163e <__aeabi_dmul+0xba>
 8001ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b4c <__aeabi_dmul+0x5c8>)
 8001ae2:	4652      	mov	r2, sl
 8001ae4:	18c3      	adds	r3, r0, r3
 8001ae6:	4640      	mov	r0, r8
 8001ae8:	409a      	lsls	r2, r3
 8001aea:	40c8      	lsrs	r0, r1
 8001aec:	4302      	orrs	r2, r0
 8001aee:	4640      	mov	r0, r8
 8001af0:	4098      	lsls	r0, r3
 8001af2:	0003      	movs	r3, r0
 8001af4:	1e58      	subs	r0, r3, #1
 8001af6:	4183      	sbcs	r3, r0
 8001af8:	4654      	mov	r4, sl
 8001afa:	431a      	orrs	r2, r3
 8001afc:	40cc      	lsrs	r4, r1
 8001afe:	0753      	lsls	r3, r2, #29
 8001b00:	d009      	beq.n	8001b16 <__aeabi_dmul+0x592>
 8001b02:	230f      	movs	r3, #15
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d005      	beq.n	8001b16 <__aeabi_dmul+0x592>
 8001b0a:	1d13      	adds	r3, r2, #4
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	4192      	sbcs	r2, r2
 8001b10:	4252      	negs	r2, r2
 8001b12:	18a4      	adds	r4, r4, r2
 8001b14:	001a      	movs	r2, r3
 8001b16:	0223      	lsls	r3, r4, #8
 8001b18:	d508      	bpl.n	8001b2c <__aeabi_dmul+0x5a8>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2200      	movs	r2, #0
 8001b20:	e58e      	b.n	8001640 <__aeabi_dmul+0xbc>
 8001b22:	4689      	mov	r9, r1
 8001b24:	2400      	movs	r4, #0
 8001b26:	e58b      	b.n	8001640 <__aeabi_dmul+0xbc>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	e7a5      	b.n	8001a78 <__aeabi_dmul+0x4f4>
 8001b2c:	0763      	lsls	r3, r4, #29
 8001b2e:	0264      	lsls	r4, r4, #9
 8001b30:	0b24      	lsrs	r4, r4, #12
 8001b32:	e7a1      	b.n	8001a78 <__aeabi_dmul+0x4f4>
 8001b34:	9b00      	ldr	r3, [sp, #0]
 8001b36:	46a2      	mov	sl, r4
 8001b38:	4699      	mov	r9, r3
 8001b3a:	9b01      	ldr	r3, [sp, #4]
 8001b3c:	4698      	mov	r8, r3
 8001b3e:	e737      	b.n	80019b0 <__aeabi_dmul+0x42c>
 8001b40:	fffffc0d 	.word	0xfffffc0d
 8001b44:	000007ff 	.word	0x000007ff
 8001b48:	0000043e 	.word	0x0000043e
 8001b4c:	0000041e 	.word	0x0000041e

08001b50 <__aeabi_dsub>:
 8001b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b52:	4657      	mov	r7, sl
 8001b54:	464e      	mov	r6, r9
 8001b56:	4645      	mov	r5, r8
 8001b58:	46de      	mov	lr, fp
 8001b5a:	b5e0      	push	{r5, r6, r7, lr}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	9000      	str	r0, [sp, #0]
 8001b60:	9101      	str	r1, [sp, #4]
 8001b62:	030c      	lsls	r4, r1, #12
 8001b64:	004d      	lsls	r5, r1, #1
 8001b66:	0fce      	lsrs	r6, r1, #31
 8001b68:	0a61      	lsrs	r1, r4, #9
 8001b6a:	9c00      	ldr	r4, [sp, #0]
 8001b6c:	005f      	lsls	r7, r3, #1
 8001b6e:	0f64      	lsrs	r4, r4, #29
 8001b70:	430c      	orrs	r4, r1
 8001b72:	9900      	ldr	r1, [sp, #0]
 8001b74:	9200      	str	r2, [sp, #0]
 8001b76:	9301      	str	r3, [sp, #4]
 8001b78:	00c8      	lsls	r0, r1, #3
 8001b7a:	0319      	lsls	r1, r3, #12
 8001b7c:	0d7b      	lsrs	r3, r7, #21
 8001b7e:	4699      	mov	r9, r3
 8001b80:	9b01      	ldr	r3, [sp, #4]
 8001b82:	4fcc      	ldr	r7, [pc, #816]	@ (8001eb4 <__aeabi_dsub+0x364>)
 8001b84:	0fdb      	lsrs	r3, r3, #31
 8001b86:	469c      	mov	ip, r3
 8001b88:	0a4b      	lsrs	r3, r1, #9
 8001b8a:	9900      	ldr	r1, [sp, #0]
 8001b8c:	4680      	mov	r8, r0
 8001b8e:	0f49      	lsrs	r1, r1, #29
 8001b90:	4319      	orrs	r1, r3
 8001b92:	9b00      	ldr	r3, [sp, #0]
 8001b94:	468b      	mov	fp, r1
 8001b96:	00da      	lsls	r2, r3, #3
 8001b98:	4692      	mov	sl, r2
 8001b9a:	0d6d      	lsrs	r5, r5, #21
 8001b9c:	45b9      	cmp	r9, r7
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_dsub+0x52>
 8001ba0:	e0bf      	b.n	8001d22 <__aeabi_dsub+0x1d2>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	4661      	mov	r1, ip
 8001ba6:	4059      	eors	r1, r3
 8001ba8:	464b      	mov	r3, r9
 8001baa:	468c      	mov	ip, r1
 8001bac:	1aeb      	subs	r3, r5, r3
 8001bae:	428e      	cmp	r6, r1
 8001bb0:	d075      	beq.n	8001c9e <__aeabi_dsub+0x14e>
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	dc00      	bgt.n	8001bb8 <__aeabi_dsub+0x68>
 8001bb6:	e2a3      	b.n	8002100 <__aeabi_dsub+0x5b0>
 8001bb8:	4649      	mov	r1, r9
 8001bba:	2900      	cmp	r1, #0
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_dsub+0x70>
 8001bbe:	e0ce      	b.n	8001d5e <__aeabi_dsub+0x20e>
 8001bc0:	42bd      	cmp	r5, r7
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_dsub+0x76>
 8001bc4:	e200      	b.n	8001fc8 <__aeabi_dsub+0x478>
 8001bc6:	2701      	movs	r7, #1
 8001bc8:	2b38      	cmp	r3, #56	@ 0x38
 8001bca:	dc19      	bgt.n	8001c00 <__aeabi_dsub+0xb0>
 8001bcc:	2780      	movs	r7, #128	@ 0x80
 8001bce:	4659      	mov	r1, fp
 8001bd0:	043f      	lsls	r7, r7, #16
 8001bd2:	4339      	orrs	r1, r7
 8001bd4:	468b      	mov	fp, r1
 8001bd6:	2b1f      	cmp	r3, #31
 8001bd8:	dd00      	ble.n	8001bdc <__aeabi_dsub+0x8c>
 8001bda:	e1fa      	b.n	8001fd2 <__aeabi_dsub+0x482>
 8001bdc:	2720      	movs	r7, #32
 8001bde:	1af9      	subs	r1, r7, r3
 8001be0:	468c      	mov	ip, r1
 8001be2:	4659      	mov	r1, fp
 8001be4:	4667      	mov	r7, ip
 8001be6:	40b9      	lsls	r1, r7
 8001be8:	000f      	movs	r7, r1
 8001bea:	0011      	movs	r1, r2
 8001bec:	40d9      	lsrs	r1, r3
 8001bee:	430f      	orrs	r7, r1
 8001bf0:	4661      	mov	r1, ip
 8001bf2:	408a      	lsls	r2, r1
 8001bf4:	1e51      	subs	r1, r2, #1
 8001bf6:	418a      	sbcs	r2, r1
 8001bf8:	4659      	mov	r1, fp
 8001bfa:	40d9      	lsrs	r1, r3
 8001bfc:	4317      	orrs	r7, r2
 8001bfe:	1a64      	subs	r4, r4, r1
 8001c00:	1bc7      	subs	r7, r0, r7
 8001c02:	42b8      	cmp	r0, r7
 8001c04:	4180      	sbcs	r0, r0
 8001c06:	4240      	negs	r0, r0
 8001c08:	1a24      	subs	r4, r4, r0
 8001c0a:	0223      	lsls	r3, r4, #8
 8001c0c:	d400      	bmi.n	8001c10 <__aeabi_dsub+0xc0>
 8001c0e:	e140      	b.n	8001e92 <__aeabi_dsub+0x342>
 8001c10:	0264      	lsls	r4, r4, #9
 8001c12:	0a64      	lsrs	r4, r4, #9
 8001c14:	2c00      	cmp	r4, #0
 8001c16:	d100      	bne.n	8001c1a <__aeabi_dsub+0xca>
 8001c18:	e154      	b.n	8001ec4 <__aeabi_dsub+0x374>
 8001c1a:	0020      	movs	r0, r4
 8001c1c:	f000 fc52 	bl	80024c4 <__clzsi2>
 8001c20:	0003      	movs	r3, r0
 8001c22:	3b08      	subs	r3, #8
 8001c24:	2120      	movs	r1, #32
 8001c26:	0038      	movs	r0, r7
 8001c28:	1aca      	subs	r2, r1, r3
 8001c2a:	40d0      	lsrs	r0, r2
 8001c2c:	409c      	lsls	r4, r3
 8001c2e:	0002      	movs	r2, r0
 8001c30:	409f      	lsls	r7, r3
 8001c32:	4322      	orrs	r2, r4
 8001c34:	429d      	cmp	r5, r3
 8001c36:	dd00      	ble.n	8001c3a <__aeabi_dsub+0xea>
 8001c38:	e1a6      	b.n	8001f88 <__aeabi_dsub+0x438>
 8001c3a:	1b58      	subs	r0, r3, r5
 8001c3c:	3001      	adds	r0, #1
 8001c3e:	1a09      	subs	r1, r1, r0
 8001c40:	003c      	movs	r4, r7
 8001c42:	408f      	lsls	r7, r1
 8001c44:	40c4      	lsrs	r4, r0
 8001c46:	1e7b      	subs	r3, r7, #1
 8001c48:	419f      	sbcs	r7, r3
 8001c4a:	0013      	movs	r3, r2
 8001c4c:	408b      	lsls	r3, r1
 8001c4e:	4327      	orrs	r7, r4
 8001c50:	431f      	orrs	r7, r3
 8001c52:	40c2      	lsrs	r2, r0
 8001c54:	003b      	movs	r3, r7
 8001c56:	0014      	movs	r4, r2
 8001c58:	2500      	movs	r5, #0
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x110>
 8001c5e:	e1f7      	b.n	8002050 <__aeabi_dsub+0x500>
 8001c60:	077b      	lsls	r3, r7, #29
 8001c62:	d100      	bne.n	8001c66 <__aeabi_dsub+0x116>
 8001c64:	e377      	b.n	8002356 <__aeabi_dsub+0x806>
 8001c66:	230f      	movs	r3, #15
 8001c68:	0038      	movs	r0, r7
 8001c6a:	403b      	ands	r3, r7
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d004      	beq.n	8001c7a <__aeabi_dsub+0x12a>
 8001c70:	1d38      	adds	r0, r7, #4
 8001c72:	42b8      	cmp	r0, r7
 8001c74:	41bf      	sbcs	r7, r7
 8001c76:	427f      	negs	r7, r7
 8001c78:	19e4      	adds	r4, r4, r7
 8001c7a:	0223      	lsls	r3, r4, #8
 8001c7c:	d400      	bmi.n	8001c80 <__aeabi_dsub+0x130>
 8001c7e:	e368      	b.n	8002352 <__aeabi_dsub+0x802>
 8001c80:	4b8c      	ldr	r3, [pc, #560]	@ (8001eb4 <__aeabi_dsub+0x364>)
 8001c82:	3501      	adds	r5, #1
 8001c84:	429d      	cmp	r5, r3
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dsub+0x13a>
 8001c88:	e0f4      	b.n	8001e74 <__aeabi_dsub+0x324>
 8001c8a:	4b8b      	ldr	r3, [pc, #556]	@ (8001eb8 <__aeabi_dsub+0x368>)
 8001c8c:	056d      	lsls	r5, r5, #21
 8001c8e:	401c      	ands	r4, r3
 8001c90:	0d6d      	lsrs	r5, r5, #21
 8001c92:	0767      	lsls	r7, r4, #29
 8001c94:	08c0      	lsrs	r0, r0, #3
 8001c96:	0264      	lsls	r4, r4, #9
 8001c98:	4307      	orrs	r7, r0
 8001c9a:	0b24      	lsrs	r4, r4, #12
 8001c9c:	e0ec      	b.n	8001e78 <__aeabi_dsub+0x328>
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	dc00      	bgt.n	8001ca4 <__aeabi_dsub+0x154>
 8001ca2:	e329      	b.n	80022f8 <__aeabi_dsub+0x7a8>
 8001ca4:	4649      	mov	r1, r9
 8001ca6:	2900      	cmp	r1, #0
 8001ca8:	d000      	beq.n	8001cac <__aeabi_dsub+0x15c>
 8001caa:	e0d6      	b.n	8001e5a <__aeabi_dsub+0x30a>
 8001cac:	4659      	mov	r1, fp
 8001cae:	4311      	orrs	r1, r2
 8001cb0:	d100      	bne.n	8001cb4 <__aeabi_dsub+0x164>
 8001cb2:	e12e      	b.n	8001f12 <__aeabi_dsub+0x3c2>
 8001cb4:	1e59      	subs	r1, r3, #1
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0x16c>
 8001cba:	e1e6      	b.n	800208a <__aeabi_dsub+0x53a>
 8001cbc:	42bb      	cmp	r3, r7
 8001cbe:	d100      	bne.n	8001cc2 <__aeabi_dsub+0x172>
 8001cc0:	e182      	b.n	8001fc8 <__aeabi_dsub+0x478>
 8001cc2:	2701      	movs	r7, #1
 8001cc4:	000b      	movs	r3, r1
 8001cc6:	2938      	cmp	r1, #56	@ 0x38
 8001cc8:	dc14      	bgt.n	8001cf4 <__aeabi_dsub+0x1a4>
 8001cca:	2b1f      	cmp	r3, #31
 8001ccc:	dd00      	ble.n	8001cd0 <__aeabi_dsub+0x180>
 8001cce:	e23c      	b.n	800214a <__aeabi_dsub+0x5fa>
 8001cd0:	2720      	movs	r7, #32
 8001cd2:	1af9      	subs	r1, r7, r3
 8001cd4:	468c      	mov	ip, r1
 8001cd6:	4659      	mov	r1, fp
 8001cd8:	4667      	mov	r7, ip
 8001cda:	40b9      	lsls	r1, r7
 8001cdc:	000f      	movs	r7, r1
 8001cde:	0011      	movs	r1, r2
 8001ce0:	40d9      	lsrs	r1, r3
 8001ce2:	430f      	orrs	r7, r1
 8001ce4:	4661      	mov	r1, ip
 8001ce6:	408a      	lsls	r2, r1
 8001ce8:	1e51      	subs	r1, r2, #1
 8001cea:	418a      	sbcs	r2, r1
 8001cec:	4659      	mov	r1, fp
 8001cee:	40d9      	lsrs	r1, r3
 8001cf0:	4317      	orrs	r7, r2
 8001cf2:	1864      	adds	r4, r4, r1
 8001cf4:	183f      	adds	r7, r7, r0
 8001cf6:	4287      	cmp	r7, r0
 8001cf8:	4180      	sbcs	r0, r0
 8001cfa:	4240      	negs	r0, r0
 8001cfc:	1824      	adds	r4, r4, r0
 8001cfe:	0223      	lsls	r3, r4, #8
 8001d00:	d400      	bmi.n	8001d04 <__aeabi_dsub+0x1b4>
 8001d02:	e0c6      	b.n	8001e92 <__aeabi_dsub+0x342>
 8001d04:	4b6b      	ldr	r3, [pc, #428]	@ (8001eb4 <__aeabi_dsub+0x364>)
 8001d06:	3501      	adds	r5, #1
 8001d08:	429d      	cmp	r5, r3
 8001d0a:	d100      	bne.n	8001d0e <__aeabi_dsub+0x1be>
 8001d0c:	e0b2      	b.n	8001e74 <__aeabi_dsub+0x324>
 8001d0e:	2101      	movs	r1, #1
 8001d10:	4b69      	ldr	r3, [pc, #420]	@ (8001eb8 <__aeabi_dsub+0x368>)
 8001d12:	087a      	lsrs	r2, r7, #1
 8001d14:	401c      	ands	r4, r3
 8001d16:	4039      	ands	r1, r7
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	07e7      	lsls	r7, r4, #31
 8001d1c:	4317      	orrs	r7, r2
 8001d1e:	0864      	lsrs	r4, r4, #1
 8001d20:	e79e      	b.n	8001c60 <__aeabi_dsub+0x110>
 8001d22:	4b66      	ldr	r3, [pc, #408]	@ (8001ebc <__aeabi_dsub+0x36c>)
 8001d24:	4311      	orrs	r1, r2
 8001d26:	468a      	mov	sl, r1
 8001d28:	18eb      	adds	r3, r5, r3
 8001d2a:	2900      	cmp	r1, #0
 8001d2c:	d028      	beq.n	8001d80 <__aeabi_dsub+0x230>
 8001d2e:	4566      	cmp	r6, ip
 8001d30:	d02c      	beq.n	8001d8c <__aeabi_dsub+0x23c>
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d05b      	beq.n	8001dee <__aeabi_dsub+0x29e>
 8001d36:	2d00      	cmp	r5, #0
 8001d38:	d100      	bne.n	8001d3c <__aeabi_dsub+0x1ec>
 8001d3a:	e12c      	b.n	8001f96 <__aeabi_dsub+0x446>
 8001d3c:	465b      	mov	r3, fp
 8001d3e:	4666      	mov	r6, ip
 8001d40:	075f      	lsls	r7, r3, #29
 8001d42:	08d2      	lsrs	r2, r2, #3
 8001d44:	4317      	orrs	r7, r2
 8001d46:	08dd      	lsrs	r5, r3, #3
 8001d48:	003b      	movs	r3, r7
 8001d4a:	432b      	orrs	r3, r5
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_dsub+0x200>
 8001d4e:	e0e2      	b.n	8001f16 <__aeabi_dsub+0x3c6>
 8001d50:	2480      	movs	r4, #128	@ 0x80
 8001d52:	0324      	lsls	r4, r4, #12
 8001d54:	432c      	orrs	r4, r5
 8001d56:	0324      	lsls	r4, r4, #12
 8001d58:	4d56      	ldr	r5, [pc, #344]	@ (8001eb4 <__aeabi_dsub+0x364>)
 8001d5a:	0b24      	lsrs	r4, r4, #12
 8001d5c:	e08c      	b.n	8001e78 <__aeabi_dsub+0x328>
 8001d5e:	4659      	mov	r1, fp
 8001d60:	4311      	orrs	r1, r2
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dsub+0x216>
 8001d64:	e0d5      	b.n	8001f12 <__aeabi_dsub+0x3c2>
 8001d66:	1e59      	subs	r1, r3, #1
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d100      	bne.n	8001d6e <__aeabi_dsub+0x21e>
 8001d6c:	e1b9      	b.n	80020e2 <__aeabi_dsub+0x592>
 8001d6e:	42bb      	cmp	r3, r7
 8001d70:	d100      	bne.n	8001d74 <__aeabi_dsub+0x224>
 8001d72:	e1b1      	b.n	80020d8 <__aeabi_dsub+0x588>
 8001d74:	2701      	movs	r7, #1
 8001d76:	000b      	movs	r3, r1
 8001d78:	2938      	cmp	r1, #56	@ 0x38
 8001d7a:	dd00      	ble.n	8001d7e <__aeabi_dsub+0x22e>
 8001d7c:	e740      	b.n	8001c00 <__aeabi_dsub+0xb0>
 8001d7e:	e72a      	b.n	8001bd6 <__aeabi_dsub+0x86>
 8001d80:	4661      	mov	r1, ip
 8001d82:	2701      	movs	r7, #1
 8001d84:	4079      	eors	r1, r7
 8001d86:	468c      	mov	ip, r1
 8001d88:	4566      	cmp	r6, ip
 8001d8a:	d1d2      	bne.n	8001d32 <__aeabi_dsub+0x1e2>
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d100      	bne.n	8001d92 <__aeabi_dsub+0x242>
 8001d90:	e0c5      	b.n	8001f1e <__aeabi_dsub+0x3ce>
 8001d92:	2d00      	cmp	r5, #0
 8001d94:	d000      	beq.n	8001d98 <__aeabi_dsub+0x248>
 8001d96:	e155      	b.n	8002044 <__aeabi_dsub+0x4f4>
 8001d98:	464b      	mov	r3, r9
 8001d9a:	0025      	movs	r5, r4
 8001d9c:	4305      	orrs	r5, r0
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_dsub+0x252>
 8001da0:	e212      	b.n	80021c8 <__aeabi_dsub+0x678>
 8001da2:	1e59      	subs	r1, r3, #1
 8001da4:	468c      	mov	ip, r1
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d100      	bne.n	8001dac <__aeabi_dsub+0x25c>
 8001daa:	e249      	b.n	8002240 <__aeabi_dsub+0x6f0>
 8001dac:	4d41      	ldr	r5, [pc, #260]	@ (8001eb4 <__aeabi_dsub+0x364>)
 8001dae:	42ab      	cmp	r3, r5
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dsub+0x264>
 8001db2:	e28f      	b.n	80022d4 <__aeabi_dsub+0x784>
 8001db4:	2701      	movs	r7, #1
 8001db6:	2938      	cmp	r1, #56	@ 0x38
 8001db8:	dc11      	bgt.n	8001dde <__aeabi_dsub+0x28e>
 8001dba:	4663      	mov	r3, ip
 8001dbc:	2b1f      	cmp	r3, #31
 8001dbe:	dd00      	ble.n	8001dc2 <__aeabi_dsub+0x272>
 8001dc0:	e25b      	b.n	800227a <__aeabi_dsub+0x72a>
 8001dc2:	4661      	mov	r1, ip
 8001dc4:	2320      	movs	r3, #32
 8001dc6:	0027      	movs	r7, r4
 8001dc8:	1a5b      	subs	r3, r3, r1
 8001dca:	0005      	movs	r5, r0
 8001dcc:	4098      	lsls	r0, r3
 8001dce:	409f      	lsls	r7, r3
 8001dd0:	40cd      	lsrs	r5, r1
 8001dd2:	1e43      	subs	r3, r0, #1
 8001dd4:	4198      	sbcs	r0, r3
 8001dd6:	40cc      	lsrs	r4, r1
 8001dd8:	432f      	orrs	r7, r5
 8001dda:	4307      	orrs	r7, r0
 8001ddc:	44a3      	add	fp, r4
 8001dde:	18bf      	adds	r7, r7, r2
 8001de0:	4297      	cmp	r7, r2
 8001de2:	4192      	sbcs	r2, r2
 8001de4:	4252      	negs	r2, r2
 8001de6:	445a      	add	r2, fp
 8001de8:	0014      	movs	r4, r2
 8001dea:	464d      	mov	r5, r9
 8001dec:	e787      	b.n	8001cfe <__aeabi_dsub+0x1ae>
 8001dee:	4f34      	ldr	r7, [pc, #208]	@ (8001ec0 <__aeabi_dsub+0x370>)
 8001df0:	1c6b      	adds	r3, r5, #1
 8001df2:	423b      	tst	r3, r7
 8001df4:	d000      	beq.n	8001df8 <__aeabi_dsub+0x2a8>
 8001df6:	e0b6      	b.n	8001f66 <__aeabi_dsub+0x416>
 8001df8:	4659      	mov	r1, fp
 8001dfa:	0023      	movs	r3, r4
 8001dfc:	4311      	orrs	r1, r2
 8001dfe:	000f      	movs	r7, r1
 8001e00:	4303      	orrs	r3, r0
 8001e02:	2d00      	cmp	r5, #0
 8001e04:	d000      	beq.n	8001e08 <__aeabi_dsub+0x2b8>
 8001e06:	e126      	b.n	8002056 <__aeabi_dsub+0x506>
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d100      	bne.n	8001e0e <__aeabi_dsub+0x2be>
 8001e0c:	e1c0      	b.n	8002190 <__aeabi_dsub+0x640>
 8001e0e:	2900      	cmp	r1, #0
 8001e10:	d100      	bne.n	8001e14 <__aeabi_dsub+0x2c4>
 8001e12:	e0a1      	b.n	8001f58 <__aeabi_dsub+0x408>
 8001e14:	1a83      	subs	r3, r0, r2
 8001e16:	4698      	mov	r8, r3
 8001e18:	465b      	mov	r3, fp
 8001e1a:	4540      	cmp	r0, r8
 8001e1c:	41ad      	sbcs	r5, r5
 8001e1e:	1ae3      	subs	r3, r4, r3
 8001e20:	426d      	negs	r5, r5
 8001e22:	1b5b      	subs	r3, r3, r5
 8001e24:	2580      	movs	r5, #128	@ 0x80
 8001e26:	042d      	lsls	r5, r5, #16
 8001e28:	422b      	tst	r3, r5
 8001e2a:	d100      	bne.n	8001e2e <__aeabi_dsub+0x2de>
 8001e2c:	e14b      	b.n	80020c6 <__aeabi_dsub+0x576>
 8001e2e:	465b      	mov	r3, fp
 8001e30:	1a10      	subs	r0, r2, r0
 8001e32:	4282      	cmp	r2, r0
 8001e34:	4192      	sbcs	r2, r2
 8001e36:	1b1c      	subs	r4, r3, r4
 8001e38:	0007      	movs	r7, r0
 8001e3a:	2601      	movs	r6, #1
 8001e3c:	4663      	mov	r3, ip
 8001e3e:	4252      	negs	r2, r2
 8001e40:	1aa4      	subs	r4, r4, r2
 8001e42:	4327      	orrs	r7, r4
 8001e44:	401e      	ands	r6, r3
 8001e46:	2f00      	cmp	r7, #0
 8001e48:	d100      	bne.n	8001e4c <__aeabi_dsub+0x2fc>
 8001e4a:	e142      	b.n	80020d2 <__aeabi_dsub+0x582>
 8001e4c:	422c      	tst	r4, r5
 8001e4e:	d100      	bne.n	8001e52 <__aeabi_dsub+0x302>
 8001e50:	e26d      	b.n	800232e <__aeabi_dsub+0x7de>
 8001e52:	4b19      	ldr	r3, [pc, #100]	@ (8001eb8 <__aeabi_dsub+0x368>)
 8001e54:	2501      	movs	r5, #1
 8001e56:	401c      	ands	r4, r3
 8001e58:	e71b      	b.n	8001c92 <__aeabi_dsub+0x142>
 8001e5a:	42bd      	cmp	r5, r7
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_dsub+0x310>
 8001e5e:	e13b      	b.n	80020d8 <__aeabi_dsub+0x588>
 8001e60:	2701      	movs	r7, #1
 8001e62:	2b38      	cmp	r3, #56	@ 0x38
 8001e64:	dd00      	ble.n	8001e68 <__aeabi_dsub+0x318>
 8001e66:	e745      	b.n	8001cf4 <__aeabi_dsub+0x1a4>
 8001e68:	2780      	movs	r7, #128	@ 0x80
 8001e6a:	4659      	mov	r1, fp
 8001e6c:	043f      	lsls	r7, r7, #16
 8001e6e:	4339      	orrs	r1, r7
 8001e70:	468b      	mov	fp, r1
 8001e72:	e72a      	b.n	8001cca <__aeabi_dsub+0x17a>
 8001e74:	2400      	movs	r4, #0
 8001e76:	2700      	movs	r7, #0
 8001e78:	052d      	lsls	r5, r5, #20
 8001e7a:	4325      	orrs	r5, r4
 8001e7c:	07f6      	lsls	r6, r6, #31
 8001e7e:	4335      	orrs	r5, r6
 8001e80:	0038      	movs	r0, r7
 8001e82:	0029      	movs	r1, r5
 8001e84:	b003      	add	sp, #12
 8001e86:	bcf0      	pop	{r4, r5, r6, r7}
 8001e88:	46bb      	mov	fp, r7
 8001e8a:	46b2      	mov	sl, r6
 8001e8c:	46a9      	mov	r9, r5
 8001e8e:	46a0      	mov	r8, r4
 8001e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e92:	077b      	lsls	r3, r7, #29
 8001e94:	d004      	beq.n	8001ea0 <__aeabi_dsub+0x350>
 8001e96:	230f      	movs	r3, #15
 8001e98:	403b      	ands	r3, r7
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d000      	beq.n	8001ea0 <__aeabi_dsub+0x350>
 8001e9e:	e6e7      	b.n	8001c70 <__aeabi_dsub+0x120>
 8001ea0:	002b      	movs	r3, r5
 8001ea2:	08f8      	lsrs	r0, r7, #3
 8001ea4:	4a03      	ldr	r2, [pc, #12]	@ (8001eb4 <__aeabi_dsub+0x364>)
 8001ea6:	0767      	lsls	r7, r4, #29
 8001ea8:	4307      	orrs	r7, r0
 8001eaa:	08e5      	lsrs	r5, r4, #3
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d100      	bne.n	8001eb2 <__aeabi_dsub+0x362>
 8001eb0:	e74a      	b.n	8001d48 <__aeabi_dsub+0x1f8>
 8001eb2:	e0a5      	b.n	8002000 <__aeabi_dsub+0x4b0>
 8001eb4:	000007ff 	.word	0x000007ff
 8001eb8:	ff7fffff 	.word	0xff7fffff
 8001ebc:	fffff801 	.word	0xfffff801
 8001ec0:	000007fe 	.word	0x000007fe
 8001ec4:	0038      	movs	r0, r7
 8001ec6:	f000 fafd 	bl	80024c4 <__clzsi2>
 8001eca:	0003      	movs	r3, r0
 8001ecc:	3318      	adds	r3, #24
 8001ece:	2b1f      	cmp	r3, #31
 8001ed0:	dc00      	bgt.n	8001ed4 <__aeabi_dsub+0x384>
 8001ed2:	e6a7      	b.n	8001c24 <__aeabi_dsub+0xd4>
 8001ed4:	003a      	movs	r2, r7
 8001ed6:	3808      	subs	r0, #8
 8001ed8:	4082      	lsls	r2, r0
 8001eda:	429d      	cmp	r5, r3
 8001edc:	dd00      	ble.n	8001ee0 <__aeabi_dsub+0x390>
 8001ede:	e08a      	b.n	8001ff6 <__aeabi_dsub+0x4a6>
 8001ee0:	1b5b      	subs	r3, r3, r5
 8001ee2:	1c58      	adds	r0, r3, #1
 8001ee4:	281f      	cmp	r0, #31
 8001ee6:	dc00      	bgt.n	8001eea <__aeabi_dsub+0x39a>
 8001ee8:	e1d8      	b.n	800229c <__aeabi_dsub+0x74c>
 8001eea:	0017      	movs	r7, r2
 8001eec:	3b1f      	subs	r3, #31
 8001eee:	40df      	lsrs	r7, r3
 8001ef0:	2820      	cmp	r0, #32
 8001ef2:	d005      	beq.n	8001f00 <__aeabi_dsub+0x3b0>
 8001ef4:	2340      	movs	r3, #64	@ 0x40
 8001ef6:	1a1b      	subs	r3, r3, r0
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	1e53      	subs	r3, r2, #1
 8001efc:	419a      	sbcs	r2, r3
 8001efe:	4317      	orrs	r7, r2
 8001f00:	2500      	movs	r5, #0
 8001f02:	2f00      	cmp	r7, #0
 8001f04:	d100      	bne.n	8001f08 <__aeabi_dsub+0x3b8>
 8001f06:	e0e5      	b.n	80020d4 <__aeabi_dsub+0x584>
 8001f08:	077b      	lsls	r3, r7, #29
 8001f0a:	d000      	beq.n	8001f0e <__aeabi_dsub+0x3be>
 8001f0c:	e6ab      	b.n	8001c66 <__aeabi_dsub+0x116>
 8001f0e:	002c      	movs	r4, r5
 8001f10:	e7c6      	b.n	8001ea0 <__aeabi_dsub+0x350>
 8001f12:	08c0      	lsrs	r0, r0, #3
 8001f14:	e7c6      	b.n	8001ea4 <__aeabi_dsub+0x354>
 8001f16:	2700      	movs	r7, #0
 8001f18:	2400      	movs	r4, #0
 8001f1a:	4dd1      	ldr	r5, [pc, #836]	@ (8002260 <__aeabi_dsub+0x710>)
 8001f1c:	e7ac      	b.n	8001e78 <__aeabi_dsub+0x328>
 8001f1e:	4fd1      	ldr	r7, [pc, #836]	@ (8002264 <__aeabi_dsub+0x714>)
 8001f20:	1c6b      	adds	r3, r5, #1
 8001f22:	423b      	tst	r3, r7
 8001f24:	d171      	bne.n	800200a <__aeabi_dsub+0x4ba>
 8001f26:	0023      	movs	r3, r4
 8001f28:	4303      	orrs	r3, r0
 8001f2a:	2d00      	cmp	r5, #0
 8001f2c:	d000      	beq.n	8001f30 <__aeabi_dsub+0x3e0>
 8001f2e:	e14e      	b.n	80021ce <__aeabi_dsub+0x67e>
 8001f30:	4657      	mov	r7, sl
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d100      	bne.n	8001f38 <__aeabi_dsub+0x3e8>
 8001f36:	e1b5      	b.n	80022a4 <__aeabi_dsub+0x754>
 8001f38:	2f00      	cmp	r7, #0
 8001f3a:	d00d      	beq.n	8001f58 <__aeabi_dsub+0x408>
 8001f3c:	1883      	adds	r3, r0, r2
 8001f3e:	4283      	cmp	r3, r0
 8001f40:	4180      	sbcs	r0, r0
 8001f42:	445c      	add	r4, fp
 8001f44:	4240      	negs	r0, r0
 8001f46:	1824      	adds	r4, r4, r0
 8001f48:	0222      	lsls	r2, r4, #8
 8001f4a:	d500      	bpl.n	8001f4e <__aeabi_dsub+0x3fe>
 8001f4c:	e1c8      	b.n	80022e0 <__aeabi_dsub+0x790>
 8001f4e:	001f      	movs	r7, r3
 8001f50:	4698      	mov	r8, r3
 8001f52:	4327      	orrs	r7, r4
 8001f54:	d100      	bne.n	8001f58 <__aeabi_dsub+0x408>
 8001f56:	e0bc      	b.n	80020d2 <__aeabi_dsub+0x582>
 8001f58:	4643      	mov	r3, r8
 8001f5a:	0767      	lsls	r7, r4, #29
 8001f5c:	08db      	lsrs	r3, r3, #3
 8001f5e:	431f      	orrs	r7, r3
 8001f60:	08e5      	lsrs	r5, r4, #3
 8001f62:	2300      	movs	r3, #0
 8001f64:	e04c      	b.n	8002000 <__aeabi_dsub+0x4b0>
 8001f66:	1a83      	subs	r3, r0, r2
 8001f68:	4698      	mov	r8, r3
 8001f6a:	465b      	mov	r3, fp
 8001f6c:	4540      	cmp	r0, r8
 8001f6e:	41bf      	sbcs	r7, r7
 8001f70:	1ae3      	subs	r3, r4, r3
 8001f72:	427f      	negs	r7, r7
 8001f74:	1bdb      	subs	r3, r3, r7
 8001f76:	021f      	lsls	r7, r3, #8
 8001f78:	d47c      	bmi.n	8002074 <__aeabi_dsub+0x524>
 8001f7a:	4647      	mov	r7, r8
 8001f7c:	431f      	orrs	r7, r3
 8001f7e:	d100      	bne.n	8001f82 <__aeabi_dsub+0x432>
 8001f80:	e0a6      	b.n	80020d0 <__aeabi_dsub+0x580>
 8001f82:	001c      	movs	r4, r3
 8001f84:	4647      	mov	r7, r8
 8001f86:	e645      	b.n	8001c14 <__aeabi_dsub+0xc4>
 8001f88:	4cb7      	ldr	r4, [pc, #732]	@ (8002268 <__aeabi_dsub+0x718>)
 8001f8a:	1aed      	subs	r5, r5, r3
 8001f8c:	4014      	ands	r4, r2
 8001f8e:	077b      	lsls	r3, r7, #29
 8001f90:	d000      	beq.n	8001f94 <__aeabi_dsub+0x444>
 8001f92:	e780      	b.n	8001e96 <__aeabi_dsub+0x346>
 8001f94:	e784      	b.n	8001ea0 <__aeabi_dsub+0x350>
 8001f96:	464b      	mov	r3, r9
 8001f98:	0025      	movs	r5, r4
 8001f9a:	4305      	orrs	r5, r0
 8001f9c:	d066      	beq.n	800206c <__aeabi_dsub+0x51c>
 8001f9e:	1e5f      	subs	r7, r3, #1
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d100      	bne.n	8001fa6 <__aeabi_dsub+0x456>
 8001fa4:	e0fc      	b.n	80021a0 <__aeabi_dsub+0x650>
 8001fa6:	4dae      	ldr	r5, [pc, #696]	@ (8002260 <__aeabi_dsub+0x710>)
 8001fa8:	42ab      	cmp	r3, r5
 8001faa:	d100      	bne.n	8001fae <__aeabi_dsub+0x45e>
 8001fac:	e15e      	b.n	800226c <__aeabi_dsub+0x71c>
 8001fae:	4666      	mov	r6, ip
 8001fb0:	2f38      	cmp	r7, #56	@ 0x38
 8001fb2:	dc00      	bgt.n	8001fb6 <__aeabi_dsub+0x466>
 8001fb4:	e0b4      	b.n	8002120 <__aeabi_dsub+0x5d0>
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	1a17      	subs	r7, r2, r0
 8001fba:	42ba      	cmp	r2, r7
 8001fbc:	4192      	sbcs	r2, r2
 8001fbe:	465b      	mov	r3, fp
 8001fc0:	4252      	negs	r2, r2
 8001fc2:	464d      	mov	r5, r9
 8001fc4:	1a9c      	subs	r4, r3, r2
 8001fc6:	e620      	b.n	8001c0a <__aeabi_dsub+0xba>
 8001fc8:	0767      	lsls	r7, r4, #29
 8001fca:	08c0      	lsrs	r0, r0, #3
 8001fcc:	4307      	orrs	r7, r0
 8001fce:	08e5      	lsrs	r5, r4, #3
 8001fd0:	e6ba      	b.n	8001d48 <__aeabi_dsub+0x1f8>
 8001fd2:	001f      	movs	r7, r3
 8001fd4:	4659      	mov	r1, fp
 8001fd6:	3f20      	subs	r7, #32
 8001fd8:	40f9      	lsrs	r1, r7
 8001fda:	000f      	movs	r7, r1
 8001fdc:	2b20      	cmp	r3, #32
 8001fde:	d005      	beq.n	8001fec <__aeabi_dsub+0x49c>
 8001fe0:	2140      	movs	r1, #64	@ 0x40
 8001fe2:	1acb      	subs	r3, r1, r3
 8001fe4:	4659      	mov	r1, fp
 8001fe6:	4099      	lsls	r1, r3
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	4692      	mov	sl, r2
 8001fec:	4653      	mov	r3, sl
 8001fee:	1e5a      	subs	r2, r3, #1
 8001ff0:	4193      	sbcs	r3, r2
 8001ff2:	431f      	orrs	r7, r3
 8001ff4:	e604      	b.n	8001c00 <__aeabi_dsub+0xb0>
 8001ff6:	1aeb      	subs	r3, r5, r3
 8001ff8:	4d9b      	ldr	r5, [pc, #620]	@ (8002268 <__aeabi_dsub+0x718>)
 8001ffa:	4015      	ands	r5, r2
 8001ffc:	076f      	lsls	r7, r5, #29
 8001ffe:	08ed      	lsrs	r5, r5, #3
 8002000:	032c      	lsls	r4, r5, #12
 8002002:	055d      	lsls	r5, r3, #21
 8002004:	0b24      	lsrs	r4, r4, #12
 8002006:	0d6d      	lsrs	r5, r5, #21
 8002008:	e736      	b.n	8001e78 <__aeabi_dsub+0x328>
 800200a:	4d95      	ldr	r5, [pc, #596]	@ (8002260 <__aeabi_dsub+0x710>)
 800200c:	42ab      	cmp	r3, r5
 800200e:	d100      	bne.n	8002012 <__aeabi_dsub+0x4c2>
 8002010:	e0d6      	b.n	80021c0 <__aeabi_dsub+0x670>
 8002012:	1882      	adds	r2, r0, r2
 8002014:	0021      	movs	r1, r4
 8002016:	4282      	cmp	r2, r0
 8002018:	4180      	sbcs	r0, r0
 800201a:	4459      	add	r1, fp
 800201c:	4240      	negs	r0, r0
 800201e:	1808      	adds	r0, r1, r0
 8002020:	07c7      	lsls	r7, r0, #31
 8002022:	0852      	lsrs	r2, r2, #1
 8002024:	4317      	orrs	r7, r2
 8002026:	0844      	lsrs	r4, r0, #1
 8002028:	0752      	lsls	r2, r2, #29
 800202a:	d400      	bmi.n	800202e <__aeabi_dsub+0x4de>
 800202c:	e185      	b.n	800233a <__aeabi_dsub+0x7ea>
 800202e:	220f      	movs	r2, #15
 8002030:	001d      	movs	r5, r3
 8002032:	403a      	ands	r2, r7
 8002034:	2a04      	cmp	r2, #4
 8002036:	d000      	beq.n	800203a <__aeabi_dsub+0x4ea>
 8002038:	e61a      	b.n	8001c70 <__aeabi_dsub+0x120>
 800203a:	08ff      	lsrs	r7, r7, #3
 800203c:	0764      	lsls	r4, r4, #29
 800203e:	4327      	orrs	r7, r4
 8002040:	0905      	lsrs	r5, r0, #4
 8002042:	e7dd      	b.n	8002000 <__aeabi_dsub+0x4b0>
 8002044:	465b      	mov	r3, fp
 8002046:	08d2      	lsrs	r2, r2, #3
 8002048:	075f      	lsls	r7, r3, #29
 800204a:	4317      	orrs	r7, r2
 800204c:	08dd      	lsrs	r5, r3, #3
 800204e:	e67b      	b.n	8001d48 <__aeabi_dsub+0x1f8>
 8002050:	2700      	movs	r7, #0
 8002052:	2400      	movs	r4, #0
 8002054:	e710      	b.n	8001e78 <__aeabi_dsub+0x328>
 8002056:	2b00      	cmp	r3, #0
 8002058:	d000      	beq.n	800205c <__aeabi_dsub+0x50c>
 800205a:	e0d6      	b.n	800220a <__aeabi_dsub+0x6ba>
 800205c:	2900      	cmp	r1, #0
 800205e:	d000      	beq.n	8002062 <__aeabi_dsub+0x512>
 8002060:	e12f      	b.n	80022c2 <__aeabi_dsub+0x772>
 8002062:	2480      	movs	r4, #128	@ 0x80
 8002064:	2600      	movs	r6, #0
 8002066:	4d7e      	ldr	r5, [pc, #504]	@ (8002260 <__aeabi_dsub+0x710>)
 8002068:	0324      	lsls	r4, r4, #12
 800206a:	e705      	b.n	8001e78 <__aeabi_dsub+0x328>
 800206c:	4666      	mov	r6, ip
 800206e:	465c      	mov	r4, fp
 8002070:	08d0      	lsrs	r0, r2, #3
 8002072:	e717      	b.n	8001ea4 <__aeabi_dsub+0x354>
 8002074:	465b      	mov	r3, fp
 8002076:	1a17      	subs	r7, r2, r0
 8002078:	42ba      	cmp	r2, r7
 800207a:	4192      	sbcs	r2, r2
 800207c:	1b1c      	subs	r4, r3, r4
 800207e:	2601      	movs	r6, #1
 8002080:	4663      	mov	r3, ip
 8002082:	4252      	negs	r2, r2
 8002084:	1aa4      	subs	r4, r4, r2
 8002086:	401e      	ands	r6, r3
 8002088:	e5c4      	b.n	8001c14 <__aeabi_dsub+0xc4>
 800208a:	1883      	adds	r3, r0, r2
 800208c:	4283      	cmp	r3, r0
 800208e:	4180      	sbcs	r0, r0
 8002090:	445c      	add	r4, fp
 8002092:	4240      	negs	r0, r0
 8002094:	1825      	adds	r5, r4, r0
 8002096:	022a      	lsls	r2, r5, #8
 8002098:	d400      	bmi.n	800209c <__aeabi_dsub+0x54c>
 800209a:	e0da      	b.n	8002252 <__aeabi_dsub+0x702>
 800209c:	4a72      	ldr	r2, [pc, #456]	@ (8002268 <__aeabi_dsub+0x718>)
 800209e:	085b      	lsrs	r3, r3, #1
 80020a0:	4015      	ands	r5, r2
 80020a2:	07ea      	lsls	r2, r5, #31
 80020a4:	431a      	orrs	r2, r3
 80020a6:	0869      	lsrs	r1, r5, #1
 80020a8:	075b      	lsls	r3, r3, #29
 80020aa:	d400      	bmi.n	80020ae <__aeabi_dsub+0x55e>
 80020ac:	e14a      	b.n	8002344 <__aeabi_dsub+0x7f4>
 80020ae:	230f      	movs	r3, #15
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d100      	bne.n	80020b8 <__aeabi_dsub+0x568>
 80020b6:	e0fc      	b.n	80022b2 <__aeabi_dsub+0x762>
 80020b8:	1d17      	adds	r7, r2, #4
 80020ba:	4297      	cmp	r7, r2
 80020bc:	41a4      	sbcs	r4, r4
 80020be:	4264      	negs	r4, r4
 80020c0:	2502      	movs	r5, #2
 80020c2:	1864      	adds	r4, r4, r1
 80020c4:	e6ec      	b.n	8001ea0 <__aeabi_dsub+0x350>
 80020c6:	4647      	mov	r7, r8
 80020c8:	001c      	movs	r4, r3
 80020ca:	431f      	orrs	r7, r3
 80020cc:	d000      	beq.n	80020d0 <__aeabi_dsub+0x580>
 80020ce:	e743      	b.n	8001f58 <__aeabi_dsub+0x408>
 80020d0:	2600      	movs	r6, #0
 80020d2:	2500      	movs	r5, #0
 80020d4:	2400      	movs	r4, #0
 80020d6:	e6cf      	b.n	8001e78 <__aeabi_dsub+0x328>
 80020d8:	08c0      	lsrs	r0, r0, #3
 80020da:	0767      	lsls	r7, r4, #29
 80020dc:	4307      	orrs	r7, r0
 80020de:	08e5      	lsrs	r5, r4, #3
 80020e0:	e632      	b.n	8001d48 <__aeabi_dsub+0x1f8>
 80020e2:	1a87      	subs	r7, r0, r2
 80020e4:	465b      	mov	r3, fp
 80020e6:	42b8      	cmp	r0, r7
 80020e8:	4180      	sbcs	r0, r0
 80020ea:	1ae4      	subs	r4, r4, r3
 80020ec:	4240      	negs	r0, r0
 80020ee:	1a24      	subs	r4, r4, r0
 80020f0:	0223      	lsls	r3, r4, #8
 80020f2:	d428      	bmi.n	8002146 <__aeabi_dsub+0x5f6>
 80020f4:	0763      	lsls	r3, r4, #29
 80020f6:	08ff      	lsrs	r7, r7, #3
 80020f8:	431f      	orrs	r7, r3
 80020fa:	08e5      	lsrs	r5, r4, #3
 80020fc:	2301      	movs	r3, #1
 80020fe:	e77f      	b.n	8002000 <__aeabi_dsub+0x4b0>
 8002100:	2b00      	cmp	r3, #0
 8002102:	d100      	bne.n	8002106 <__aeabi_dsub+0x5b6>
 8002104:	e673      	b.n	8001dee <__aeabi_dsub+0x29e>
 8002106:	464b      	mov	r3, r9
 8002108:	1b5f      	subs	r7, r3, r5
 800210a:	003b      	movs	r3, r7
 800210c:	2d00      	cmp	r5, #0
 800210e:	d100      	bne.n	8002112 <__aeabi_dsub+0x5c2>
 8002110:	e742      	b.n	8001f98 <__aeabi_dsub+0x448>
 8002112:	2f38      	cmp	r7, #56	@ 0x38
 8002114:	dd00      	ble.n	8002118 <__aeabi_dsub+0x5c8>
 8002116:	e0ec      	b.n	80022f2 <__aeabi_dsub+0x7a2>
 8002118:	2380      	movs	r3, #128	@ 0x80
 800211a:	000e      	movs	r6, r1
 800211c:	041b      	lsls	r3, r3, #16
 800211e:	431c      	orrs	r4, r3
 8002120:	2f1f      	cmp	r7, #31
 8002122:	dc25      	bgt.n	8002170 <__aeabi_dsub+0x620>
 8002124:	2520      	movs	r5, #32
 8002126:	0023      	movs	r3, r4
 8002128:	1bed      	subs	r5, r5, r7
 800212a:	0001      	movs	r1, r0
 800212c:	40a8      	lsls	r0, r5
 800212e:	40ab      	lsls	r3, r5
 8002130:	40f9      	lsrs	r1, r7
 8002132:	1e45      	subs	r5, r0, #1
 8002134:	41a8      	sbcs	r0, r5
 8002136:	430b      	orrs	r3, r1
 8002138:	40fc      	lsrs	r4, r7
 800213a:	4318      	orrs	r0, r3
 800213c:	465b      	mov	r3, fp
 800213e:	1b1b      	subs	r3, r3, r4
 8002140:	469b      	mov	fp, r3
 8002142:	e739      	b.n	8001fb8 <__aeabi_dsub+0x468>
 8002144:	4666      	mov	r6, ip
 8002146:	2501      	movs	r5, #1
 8002148:	e562      	b.n	8001c10 <__aeabi_dsub+0xc0>
 800214a:	001f      	movs	r7, r3
 800214c:	4659      	mov	r1, fp
 800214e:	3f20      	subs	r7, #32
 8002150:	40f9      	lsrs	r1, r7
 8002152:	468c      	mov	ip, r1
 8002154:	2b20      	cmp	r3, #32
 8002156:	d005      	beq.n	8002164 <__aeabi_dsub+0x614>
 8002158:	2740      	movs	r7, #64	@ 0x40
 800215a:	4659      	mov	r1, fp
 800215c:	1afb      	subs	r3, r7, r3
 800215e:	4099      	lsls	r1, r3
 8002160:	430a      	orrs	r2, r1
 8002162:	4692      	mov	sl, r2
 8002164:	4657      	mov	r7, sl
 8002166:	1e7b      	subs	r3, r7, #1
 8002168:	419f      	sbcs	r7, r3
 800216a:	4663      	mov	r3, ip
 800216c:	431f      	orrs	r7, r3
 800216e:	e5c1      	b.n	8001cf4 <__aeabi_dsub+0x1a4>
 8002170:	003b      	movs	r3, r7
 8002172:	0025      	movs	r5, r4
 8002174:	3b20      	subs	r3, #32
 8002176:	40dd      	lsrs	r5, r3
 8002178:	2f20      	cmp	r7, #32
 800217a:	d004      	beq.n	8002186 <__aeabi_dsub+0x636>
 800217c:	2340      	movs	r3, #64	@ 0x40
 800217e:	1bdb      	subs	r3, r3, r7
 8002180:	409c      	lsls	r4, r3
 8002182:	4320      	orrs	r0, r4
 8002184:	4680      	mov	r8, r0
 8002186:	4640      	mov	r0, r8
 8002188:	1e43      	subs	r3, r0, #1
 800218a:	4198      	sbcs	r0, r3
 800218c:	4328      	orrs	r0, r5
 800218e:	e713      	b.n	8001fb8 <__aeabi_dsub+0x468>
 8002190:	2900      	cmp	r1, #0
 8002192:	d09d      	beq.n	80020d0 <__aeabi_dsub+0x580>
 8002194:	2601      	movs	r6, #1
 8002196:	4663      	mov	r3, ip
 8002198:	465c      	mov	r4, fp
 800219a:	4690      	mov	r8, r2
 800219c:	401e      	ands	r6, r3
 800219e:	e6db      	b.n	8001f58 <__aeabi_dsub+0x408>
 80021a0:	1a17      	subs	r7, r2, r0
 80021a2:	465b      	mov	r3, fp
 80021a4:	42ba      	cmp	r2, r7
 80021a6:	4192      	sbcs	r2, r2
 80021a8:	1b1c      	subs	r4, r3, r4
 80021aa:	4252      	negs	r2, r2
 80021ac:	1aa4      	subs	r4, r4, r2
 80021ae:	0223      	lsls	r3, r4, #8
 80021b0:	d4c8      	bmi.n	8002144 <__aeabi_dsub+0x5f4>
 80021b2:	0763      	lsls	r3, r4, #29
 80021b4:	08ff      	lsrs	r7, r7, #3
 80021b6:	431f      	orrs	r7, r3
 80021b8:	4666      	mov	r6, ip
 80021ba:	2301      	movs	r3, #1
 80021bc:	08e5      	lsrs	r5, r4, #3
 80021be:	e71f      	b.n	8002000 <__aeabi_dsub+0x4b0>
 80021c0:	001d      	movs	r5, r3
 80021c2:	2400      	movs	r4, #0
 80021c4:	2700      	movs	r7, #0
 80021c6:	e657      	b.n	8001e78 <__aeabi_dsub+0x328>
 80021c8:	465c      	mov	r4, fp
 80021ca:	08d0      	lsrs	r0, r2, #3
 80021cc:	e66a      	b.n	8001ea4 <__aeabi_dsub+0x354>
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d100      	bne.n	80021d4 <__aeabi_dsub+0x684>
 80021d2:	e737      	b.n	8002044 <__aeabi_dsub+0x4f4>
 80021d4:	4653      	mov	r3, sl
 80021d6:	08c0      	lsrs	r0, r0, #3
 80021d8:	0767      	lsls	r7, r4, #29
 80021da:	4307      	orrs	r7, r0
 80021dc:	08e5      	lsrs	r5, r4, #3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d100      	bne.n	80021e4 <__aeabi_dsub+0x694>
 80021e2:	e5b1      	b.n	8001d48 <__aeabi_dsub+0x1f8>
 80021e4:	2380      	movs	r3, #128	@ 0x80
 80021e6:	031b      	lsls	r3, r3, #12
 80021e8:	421d      	tst	r5, r3
 80021ea:	d008      	beq.n	80021fe <__aeabi_dsub+0x6ae>
 80021ec:	4659      	mov	r1, fp
 80021ee:	08c8      	lsrs	r0, r1, #3
 80021f0:	4218      	tst	r0, r3
 80021f2:	d104      	bne.n	80021fe <__aeabi_dsub+0x6ae>
 80021f4:	08d2      	lsrs	r2, r2, #3
 80021f6:	0749      	lsls	r1, r1, #29
 80021f8:	430a      	orrs	r2, r1
 80021fa:	0017      	movs	r7, r2
 80021fc:	0005      	movs	r5, r0
 80021fe:	0f7b      	lsrs	r3, r7, #29
 8002200:	00ff      	lsls	r7, r7, #3
 8002202:	08ff      	lsrs	r7, r7, #3
 8002204:	075b      	lsls	r3, r3, #29
 8002206:	431f      	orrs	r7, r3
 8002208:	e59e      	b.n	8001d48 <__aeabi_dsub+0x1f8>
 800220a:	08c0      	lsrs	r0, r0, #3
 800220c:	0763      	lsls	r3, r4, #29
 800220e:	4318      	orrs	r0, r3
 8002210:	08e5      	lsrs	r5, r4, #3
 8002212:	2900      	cmp	r1, #0
 8002214:	d053      	beq.n	80022be <__aeabi_dsub+0x76e>
 8002216:	2380      	movs	r3, #128	@ 0x80
 8002218:	031b      	lsls	r3, r3, #12
 800221a:	421d      	tst	r5, r3
 800221c:	d00a      	beq.n	8002234 <__aeabi_dsub+0x6e4>
 800221e:	4659      	mov	r1, fp
 8002220:	08cc      	lsrs	r4, r1, #3
 8002222:	421c      	tst	r4, r3
 8002224:	d106      	bne.n	8002234 <__aeabi_dsub+0x6e4>
 8002226:	2601      	movs	r6, #1
 8002228:	4663      	mov	r3, ip
 800222a:	0025      	movs	r5, r4
 800222c:	08d0      	lsrs	r0, r2, #3
 800222e:	0749      	lsls	r1, r1, #29
 8002230:	4308      	orrs	r0, r1
 8002232:	401e      	ands	r6, r3
 8002234:	0f47      	lsrs	r7, r0, #29
 8002236:	00c0      	lsls	r0, r0, #3
 8002238:	08c0      	lsrs	r0, r0, #3
 800223a:	077f      	lsls	r7, r7, #29
 800223c:	4307      	orrs	r7, r0
 800223e:	e583      	b.n	8001d48 <__aeabi_dsub+0x1f8>
 8002240:	1883      	adds	r3, r0, r2
 8002242:	4293      	cmp	r3, r2
 8002244:	4192      	sbcs	r2, r2
 8002246:	445c      	add	r4, fp
 8002248:	4252      	negs	r2, r2
 800224a:	18a5      	adds	r5, r4, r2
 800224c:	022a      	lsls	r2, r5, #8
 800224e:	d500      	bpl.n	8002252 <__aeabi_dsub+0x702>
 8002250:	e724      	b.n	800209c <__aeabi_dsub+0x54c>
 8002252:	076f      	lsls	r7, r5, #29
 8002254:	08db      	lsrs	r3, r3, #3
 8002256:	431f      	orrs	r7, r3
 8002258:	08ed      	lsrs	r5, r5, #3
 800225a:	2301      	movs	r3, #1
 800225c:	e6d0      	b.n	8002000 <__aeabi_dsub+0x4b0>
 800225e:	46c0      	nop			@ (mov r8, r8)
 8002260:	000007ff 	.word	0x000007ff
 8002264:	000007fe 	.word	0x000007fe
 8002268:	ff7fffff 	.word	0xff7fffff
 800226c:	465b      	mov	r3, fp
 800226e:	08d2      	lsrs	r2, r2, #3
 8002270:	075f      	lsls	r7, r3, #29
 8002272:	4666      	mov	r6, ip
 8002274:	4317      	orrs	r7, r2
 8002276:	08dd      	lsrs	r5, r3, #3
 8002278:	e566      	b.n	8001d48 <__aeabi_dsub+0x1f8>
 800227a:	0025      	movs	r5, r4
 800227c:	3b20      	subs	r3, #32
 800227e:	40dd      	lsrs	r5, r3
 8002280:	4663      	mov	r3, ip
 8002282:	2b20      	cmp	r3, #32
 8002284:	d005      	beq.n	8002292 <__aeabi_dsub+0x742>
 8002286:	2340      	movs	r3, #64	@ 0x40
 8002288:	4661      	mov	r1, ip
 800228a:	1a5b      	subs	r3, r3, r1
 800228c:	409c      	lsls	r4, r3
 800228e:	4320      	orrs	r0, r4
 8002290:	4680      	mov	r8, r0
 8002292:	4647      	mov	r7, r8
 8002294:	1e7b      	subs	r3, r7, #1
 8002296:	419f      	sbcs	r7, r3
 8002298:	432f      	orrs	r7, r5
 800229a:	e5a0      	b.n	8001dde <__aeabi_dsub+0x28e>
 800229c:	2120      	movs	r1, #32
 800229e:	2700      	movs	r7, #0
 80022a0:	1a09      	subs	r1, r1, r0
 80022a2:	e4d2      	b.n	8001c4a <__aeabi_dsub+0xfa>
 80022a4:	2f00      	cmp	r7, #0
 80022a6:	d100      	bne.n	80022aa <__aeabi_dsub+0x75a>
 80022a8:	e713      	b.n	80020d2 <__aeabi_dsub+0x582>
 80022aa:	465c      	mov	r4, fp
 80022ac:	0017      	movs	r7, r2
 80022ae:	2500      	movs	r5, #0
 80022b0:	e5f6      	b.n	8001ea0 <__aeabi_dsub+0x350>
 80022b2:	08d7      	lsrs	r7, r2, #3
 80022b4:	0749      	lsls	r1, r1, #29
 80022b6:	2302      	movs	r3, #2
 80022b8:	430f      	orrs	r7, r1
 80022ba:	092d      	lsrs	r5, r5, #4
 80022bc:	e6a0      	b.n	8002000 <__aeabi_dsub+0x4b0>
 80022be:	0007      	movs	r7, r0
 80022c0:	e542      	b.n	8001d48 <__aeabi_dsub+0x1f8>
 80022c2:	465b      	mov	r3, fp
 80022c4:	2601      	movs	r6, #1
 80022c6:	075f      	lsls	r7, r3, #29
 80022c8:	08dd      	lsrs	r5, r3, #3
 80022ca:	4663      	mov	r3, ip
 80022cc:	08d2      	lsrs	r2, r2, #3
 80022ce:	4317      	orrs	r7, r2
 80022d0:	401e      	ands	r6, r3
 80022d2:	e539      	b.n	8001d48 <__aeabi_dsub+0x1f8>
 80022d4:	465b      	mov	r3, fp
 80022d6:	08d2      	lsrs	r2, r2, #3
 80022d8:	075f      	lsls	r7, r3, #29
 80022da:	4317      	orrs	r7, r2
 80022dc:	08dd      	lsrs	r5, r3, #3
 80022de:	e533      	b.n	8001d48 <__aeabi_dsub+0x1f8>
 80022e0:	4a1e      	ldr	r2, [pc, #120]	@ (800235c <__aeabi_dsub+0x80c>)
 80022e2:	08db      	lsrs	r3, r3, #3
 80022e4:	4022      	ands	r2, r4
 80022e6:	0757      	lsls	r7, r2, #29
 80022e8:	0252      	lsls	r2, r2, #9
 80022ea:	2501      	movs	r5, #1
 80022ec:	431f      	orrs	r7, r3
 80022ee:	0b14      	lsrs	r4, r2, #12
 80022f0:	e5c2      	b.n	8001e78 <__aeabi_dsub+0x328>
 80022f2:	000e      	movs	r6, r1
 80022f4:	2001      	movs	r0, #1
 80022f6:	e65f      	b.n	8001fb8 <__aeabi_dsub+0x468>
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00d      	beq.n	8002318 <__aeabi_dsub+0x7c8>
 80022fc:	464b      	mov	r3, r9
 80022fe:	1b5b      	subs	r3, r3, r5
 8002300:	469c      	mov	ip, r3
 8002302:	2d00      	cmp	r5, #0
 8002304:	d100      	bne.n	8002308 <__aeabi_dsub+0x7b8>
 8002306:	e548      	b.n	8001d9a <__aeabi_dsub+0x24a>
 8002308:	2701      	movs	r7, #1
 800230a:	2b38      	cmp	r3, #56	@ 0x38
 800230c:	dd00      	ble.n	8002310 <__aeabi_dsub+0x7c0>
 800230e:	e566      	b.n	8001dde <__aeabi_dsub+0x28e>
 8002310:	2380      	movs	r3, #128	@ 0x80
 8002312:	041b      	lsls	r3, r3, #16
 8002314:	431c      	orrs	r4, r3
 8002316:	e550      	b.n	8001dba <__aeabi_dsub+0x26a>
 8002318:	1c6b      	adds	r3, r5, #1
 800231a:	4d11      	ldr	r5, [pc, #68]	@ (8002360 <__aeabi_dsub+0x810>)
 800231c:	422b      	tst	r3, r5
 800231e:	d000      	beq.n	8002322 <__aeabi_dsub+0x7d2>
 8002320:	e673      	b.n	800200a <__aeabi_dsub+0x4ba>
 8002322:	4659      	mov	r1, fp
 8002324:	0023      	movs	r3, r4
 8002326:	4311      	orrs	r1, r2
 8002328:	468a      	mov	sl, r1
 800232a:	4303      	orrs	r3, r0
 800232c:	e600      	b.n	8001f30 <__aeabi_dsub+0x3e0>
 800232e:	0767      	lsls	r7, r4, #29
 8002330:	08c0      	lsrs	r0, r0, #3
 8002332:	2300      	movs	r3, #0
 8002334:	4307      	orrs	r7, r0
 8002336:	08e5      	lsrs	r5, r4, #3
 8002338:	e662      	b.n	8002000 <__aeabi_dsub+0x4b0>
 800233a:	0764      	lsls	r4, r4, #29
 800233c:	08ff      	lsrs	r7, r7, #3
 800233e:	4327      	orrs	r7, r4
 8002340:	0905      	lsrs	r5, r0, #4
 8002342:	e65d      	b.n	8002000 <__aeabi_dsub+0x4b0>
 8002344:	08d2      	lsrs	r2, r2, #3
 8002346:	0749      	lsls	r1, r1, #29
 8002348:	4311      	orrs	r1, r2
 800234a:	000f      	movs	r7, r1
 800234c:	2302      	movs	r3, #2
 800234e:	092d      	lsrs	r5, r5, #4
 8002350:	e656      	b.n	8002000 <__aeabi_dsub+0x4b0>
 8002352:	0007      	movs	r7, r0
 8002354:	e5a4      	b.n	8001ea0 <__aeabi_dsub+0x350>
 8002356:	0038      	movs	r0, r7
 8002358:	e48f      	b.n	8001c7a <__aeabi_dsub+0x12a>
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	ff7fffff 	.word	0xff7fffff
 8002360:	000007fe 	.word	0x000007fe

08002364 <__aeabi_dcmpun>:
 8002364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002366:	46c6      	mov	lr, r8
 8002368:	031e      	lsls	r6, r3, #12
 800236a:	0b36      	lsrs	r6, r6, #12
 800236c:	46b0      	mov	r8, r6
 800236e:	4e0d      	ldr	r6, [pc, #52]	@ (80023a4 <__aeabi_dcmpun+0x40>)
 8002370:	030c      	lsls	r4, r1, #12
 8002372:	004d      	lsls	r5, r1, #1
 8002374:	005f      	lsls	r7, r3, #1
 8002376:	b500      	push	{lr}
 8002378:	0b24      	lsrs	r4, r4, #12
 800237a:	0d6d      	lsrs	r5, r5, #21
 800237c:	0d7f      	lsrs	r7, r7, #21
 800237e:	42b5      	cmp	r5, r6
 8002380:	d00b      	beq.n	800239a <__aeabi_dcmpun+0x36>
 8002382:	4908      	ldr	r1, [pc, #32]	@ (80023a4 <__aeabi_dcmpun+0x40>)
 8002384:	2000      	movs	r0, #0
 8002386:	428f      	cmp	r7, r1
 8002388:	d104      	bne.n	8002394 <__aeabi_dcmpun+0x30>
 800238a:	4646      	mov	r6, r8
 800238c:	4316      	orrs	r6, r2
 800238e:	0030      	movs	r0, r6
 8002390:	1e43      	subs	r3, r0, #1
 8002392:	4198      	sbcs	r0, r3
 8002394:	bc80      	pop	{r7}
 8002396:	46b8      	mov	r8, r7
 8002398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800239a:	4304      	orrs	r4, r0
 800239c:	2001      	movs	r0, #1
 800239e:	2c00      	cmp	r4, #0
 80023a0:	d1f8      	bne.n	8002394 <__aeabi_dcmpun+0x30>
 80023a2:	e7ee      	b.n	8002382 <__aeabi_dcmpun+0x1e>
 80023a4:	000007ff 	.word	0x000007ff

080023a8 <__aeabi_d2iz>:
 80023a8:	000b      	movs	r3, r1
 80023aa:	0002      	movs	r2, r0
 80023ac:	b570      	push	{r4, r5, r6, lr}
 80023ae:	4d16      	ldr	r5, [pc, #88]	@ (8002408 <__aeabi_d2iz+0x60>)
 80023b0:	030c      	lsls	r4, r1, #12
 80023b2:	b082      	sub	sp, #8
 80023b4:	0049      	lsls	r1, r1, #1
 80023b6:	2000      	movs	r0, #0
 80023b8:	9200      	str	r2, [sp, #0]
 80023ba:	9301      	str	r3, [sp, #4]
 80023bc:	0b24      	lsrs	r4, r4, #12
 80023be:	0d49      	lsrs	r1, r1, #21
 80023c0:	0fde      	lsrs	r6, r3, #31
 80023c2:	42a9      	cmp	r1, r5
 80023c4:	dd04      	ble.n	80023d0 <__aeabi_d2iz+0x28>
 80023c6:	4811      	ldr	r0, [pc, #68]	@ (800240c <__aeabi_d2iz+0x64>)
 80023c8:	4281      	cmp	r1, r0
 80023ca:	dd03      	ble.n	80023d4 <__aeabi_d2iz+0x2c>
 80023cc:	4b10      	ldr	r3, [pc, #64]	@ (8002410 <__aeabi_d2iz+0x68>)
 80023ce:	18f0      	adds	r0, r6, r3
 80023d0:	b002      	add	sp, #8
 80023d2:	bd70      	pop	{r4, r5, r6, pc}
 80023d4:	2080      	movs	r0, #128	@ 0x80
 80023d6:	0340      	lsls	r0, r0, #13
 80023d8:	4320      	orrs	r0, r4
 80023da:	4c0e      	ldr	r4, [pc, #56]	@ (8002414 <__aeabi_d2iz+0x6c>)
 80023dc:	1a64      	subs	r4, r4, r1
 80023de:	2c1f      	cmp	r4, #31
 80023e0:	dd08      	ble.n	80023f4 <__aeabi_d2iz+0x4c>
 80023e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002418 <__aeabi_d2iz+0x70>)
 80023e4:	1a5b      	subs	r3, r3, r1
 80023e6:	40d8      	lsrs	r0, r3
 80023e8:	0003      	movs	r3, r0
 80023ea:	4258      	negs	r0, r3
 80023ec:	2e00      	cmp	r6, #0
 80023ee:	d1ef      	bne.n	80023d0 <__aeabi_d2iz+0x28>
 80023f0:	0018      	movs	r0, r3
 80023f2:	e7ed      	b.n	80023d0 <__aeabi_d2iz+0x28>
 80023f4:	4b09      	ldr	r3, [pc, #36]	@ (800241c <__aeabi_d2iz+0x74>)
 80023f6:	9a00      	ldr	r2, [sp, #0]
 80023f8:	469c      	mov	ip, r3
 80023fa:	0003      	movs	r3, r0
 80023fc:	4461      	add	r1, ip
 80023fe:	408b      	lsls	r3, r1
 8002400:	40e2      	lsrs	r2, r4
 8002402:	4313      	orrs	r3, r2
 8002404:	e7f1      	b.n	80023ea <__aeabi_d2iz+0x42>
 8002406:	46c0      	nop			@ (mov r8, r8)
 8002408:	000003fe 	.word	0x000003fe
 800240c:	0000041d 	.word	0x0000041d
 8002410:	7fffffff 	.word	0x7fffffff
 8002414:	00000433 	.word	0x00000433
 8002418:	00000413 	.word	0x00000413
 800241c:	fffffbed 	.word	0xfffffbed

08002420 <__aeabi_i2d>:
 8002420:	b570      	push	{r4, r5, r6, lr}
 8002422:	2800      	cmp	r0, #0
 8002424:	d016      	beq.n	8002454 <__aeabi_i2d+0x34>
 8002426:	17c3      	asrs	r3, r0, #31
 8002428:	18c5      	adds	r5, r0, r3
 800242a:	405d      	eors	r5, r3
 800242c:	0fc4      	lsrs	r4, r0, #31
 800242e:	0028      	movs	r0, r5
 8002430:	f000 f848 	bl	80024c4 <__clzsi2>
 8002434:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <__aeabi_i2d+0x58>)
 8002436:	1a1b      	subs	r3, r3, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0d5b      	lsrs	r3, r3, #21
 800243c:	280a      	cmp	r0, #10
 800243e:	dc14      	bgt.n	800246a <__aeabi_i2d+0x4a>
 8002440:	0002      	movs	r2, r0
 8002442:	002e      	movs	r6, r5
 8002444:	3215      	adds	r2, #21
 8002446:	4096      	lsls	r6, r2
 8002448:	220b      	movs	r2, #11
 800244a:	1a12      	subs	r2, r2, r0
 800244c:	40d5      	lsrs	r5, r2
 800244e:	032d      	lsls	r5, r5, #12
 8002450:	0b2d      	lsrs	r5, r5, #12
 8002452:	e003      	b.n	800245c <__aeabi_i2d+0x3c>
 8002454:	2400      	movs	r4, #0
 8002456:	2300      	movs	r3, #0
 8002458:	2500      	movs	r5, #0
 800245a:	2600      	movs	r6, #0
 800245c:	051b      	lsls	r3, r3, #20
 800245e:	432b      	orrs	r3, r5
 8002460:	07e4      	lsls	r4, r4, #31
 8002462:	4323      	orrs	r3, r4
 8002464:	0030      	movs	r0, r6
 8002466:	0019      	movs	r1, r3
 8002468:	bd70      	pop	{r4, r5, r6, pc}
 800246a:	380b      	subs	r0, #11
 800246c:	4085      	lsls	r5, r0
 800246e:	032d      	lsls	r5, r5, #12
 8002470:	2600      	movs	r6, #0
 8002472:	0b2d      	lsrs	r5, r5, #12
 8002474:	e7f2      	b.n	800245c <__aeabi_i2d+0x3c>
 8002476:	46c0      	nop			@ (mov r8, r8)
 8002478:	0000041e 	.word	0x0000041e

0800247c <__aeabi_ui2d>:
 800247c:	b510      	push	{r4, lr}
 800247e:	1e04      	subs	r4, r0, #0
 8002480:	d010      	beq.n	80024a4 <__aeabi_ui2d+0x28>
 8002482:	f000 f81f 	bl	80024c4 <__clzsi2>
 8002486:	4b0e      	ldr	r3, [pc, #56]	@ (80024c0 <__aeabi_ui2d+0x44>)
 8002488:	1a1b      	subs	r3, r3, r0
 800248a:	055b      	lsls	r3, r3, #21
 800248c:	0d5b      	lsrs	r3, r3, #21
 800248e:	280a      	cmp	r0, #10
 8002490:	dc0f      	bgt.n	80024b2 <__aeabi_ui2d+0x36>
 8002492:	220b      	movs	r2, #11
 8002494:	0021      	movs	r1, r4
 8002496:	1a12      	subs	r2, r2, r0
 8002498:	40d1      	lsrs	r1, r2
 800249a:	3015      	adds	r0, #21
 800249c:	030a      	lsls	r2, r1, #12
 800249e:	4084      	lsls	r4, r0
 80024a0:	0b12      	lsrs	r2, r2, #12
 80024a2:	e001      	b.n	80024a8 <__aeabi_ui2d+0x2c>
 80024a4:	2300      	movs	r3, #0
 80024a6:	2200      	movs	r2, #0
 80024a8:	051b      	lsls	r3, r3, #20
 80024aa:	4313      	orrs	r3, r2
 80024ac:	0020      	movs	r0, r4
 80024ae:	0019      	movs	r1, r3
 80024b0:	bd10      	pop	{r4, pc}
 80024b2:	0022      	movs	r2, r4
 80024b4:	380b      	subs	r0, #11
 80024b6:	4082      	lsls	r2, r0
 80024b8:	0312      	lsls	r2, r2, #12
 80024ba:	2400      	movs	r4, #0
 80024bc:	0b12      	lsrs	r2, r2, #12
 80024be:	e7f3      	b.n	80024a8 <__aeabi_ui2d+0x2c>
 80024c0:	0000041e 	.word	0x0000041e

080024c4 <__clzsi2>:
 80024c4:	211c      	movs	r1, #28
 80024c6:	2301      	movs	r3, #1
 80024c8:	041b      	lsls	r3, r3, #16
 80024ca:	4298      	cmp	r0, r3
 80024cc:	d301      	bcc.n	80024d2 <__clzsi2+0xe>
 80024ce:	0c00      	lsrs	r0, r0, #16
 80024d0:	3910      	subs	r1, #16
 80024d2:	0a1b      	lsrs	r3, r3, #8
 80024d4:	4298      	cmp	r0, r3
 80024d6:	d301      	bcc.n	80024dc <__clzsi2+0x18>
 80024d8:	0a00      	lsrs	r0, r0, #8
 80024da:	3908      	subs	r1, #8
 80024dc:	091b      	lsrs	r3, r3, #4
 80024de:	4298      	cmp	r0, r3
 80024e0:	d301      	bcc.n	80024e6 <__clzsi2+0x22>
 80024e2:	0900      	lsrs	r0, r0, #4
 80024e4:	3904      	subs	r1, #4
 80024e6:	a202      	add	r2, pc, #8	@ (adr r2, 80024f0 <__clzsi2+0x2c>)
 80024e8:	5c10      	ldrb	r0, [r2, r0]
 80024ea:	1840      	adds	r0, r0, r1
 80024ec:	4770      	bx	lr
 80024ee:	46c0      	nop			@ (mov r8, r8)
 80024f0:	02020304 	.word	0x02020304
 80024f4:	01010101 	.word	0x01010101
	...

08002500 <dw_main>:
 * @param  none
 *
 * @return none
 */
int dw_main(void)
{
 8002500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002502:	b099      	sub	sp, #100	@ 0x64
 8002504:	af00      	add	r7, sp, #0
    // lcd_display_str(APP_NAME);

    /* Reset and initialise DW1000.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8002506:	f00c feb5 	bl	800f274 <reset_DW1000>
    port_set_dw1000_slowrate();
 800250a:	f00c ff1f 	bl	800f34c <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR)
 800250e:	2001      	movs	r0, #1
 8002510:	f00b fd38 	bl	800df84 <dwt_initialise>
 8002514:	0003      	movs	r3, r0
 8002516:	3301      	adds	r3, #1
 8002518:	d101      	bne.n	800251e <dw_main+0x1e>
    {
        // lcd_display_str("INIT FAILED");
        while (1)
 800251a:	46c0      	nop			@ (mov r8, r8)
 800251c:	e7fd      	b.n	800251a <dw_main+0x1a>
        { };
    }
    port_set_dw1000_fastrate();
 800251e:	f00c ff23 	bl	800f368 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 7 below. */
    dwt_configure(&config);
 8002522:	4bd8      	ldr	r3, [pc, #864]	@ (8002884 <dw_main+0x384>)
 8002524:	0018      	movs	r0, r3
 8002526:	f00b fea1 	bl	800e26c <dwt_configure>

    /* Apply TX config */
    dwt_configuretxrf(&tx_config);
 800252a:	4bd7      	ldr	r3, [pc, #860]	@ (8002888 <dw_main+0x388>)
 800252c:	0018      	movs	r0, r3
 800252e:	f00b fe87 	bl	800e240 <dwt_configuretxrf>

    dwt_setdblrxbuffmode(0);
 8002532:	2000      	movs	r0, #0
 8002534:	f00c fac8 	bl	800eac8 <dwt_setdblrxbuffmode>

    /* Apply default antenna delay value. See NOTE 1 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 8002538:	4bd4      	ldr	r3, [pc, #848]	@ (800288c <dw_main+0x38c>)
 800253a:	0018      	movs	r0, r3
 800253c:	f00c f83a 	bl	800e5b4 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 8002540:	4bd2      	ldr	r3, [pc, #840]	@ (800288c <dw_main+0x38c>)
 8002542:	0018      	movs	r0, r3
 8002544:	f00c f84a 	bl	800e5dc <dwt_settxantennadelay>

    /* Loop forever responding to ranging requests. */
    while (1)
    {
        /* Clear reception timeout to start next ranging process. */
        dwt_setrxtimeout(0);
 8002548:	2000      	movs	r0, #0
 800254a:	f00c fcc1 	bl	800eed0 <dwt_setrxtimeout>
//         {
//             rx_buffer[i] = 0;
//         }

        /* Activate reception immediately. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 800254e:	2000      	movs	r0, #0
 8002550:	f00c fc76 	bl	800ee40 <dwt_rxenable>

        /* Poll for reception of a frame or error/timeout. See NOTE 8 below. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8002554:	46c0      	nop			@ (mov r8, r8)
 8002556:	2100      	movs	r1, #0
 8002558:	200f      	movs	r0, #15
 800255a:	f00c f98f 	bl	800e87c <dwt_read32bitoffsetreg>
 800255e:	0002      	movs	r2, r0
 8002560:	4bcb      	ldr	r3, [pc, #812]	@ (8002890 <dw_main+0x390>)
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	4bca      	ldr	r3, [pc, #808]	@ (8002890 <dw_main+0x390>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4aca      	ldr	r2, [pc, #808]	@ (8002894 <dw_main+0x394>)
 800256a:	4013      	ands	r3, r2
 800256c:	d0f3      	beq.n	8002556 <dw_main+0x56>
        { };

        //  uint32 error = status_reg & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
//         CDC_Transmit_FS((uint8 *) &error, sizeof(status_reg));

        if (status_reg & SYS_STATUS_RXFCG)
 800256e:	4bc8      	ldr	r3, [pc, #800]	@ (8002890 <dw_main+0x390>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	2380      	movs	r3, #128	@ 0x80
 8002574:	01db      	lsls	r3, r3, #7
 8002576:	4013      	ands	r3, r2
 8002578:	d100      	bne.n	800257c <dw_main+0x7c>
 800257a:	e177      	b.n	800286c <dw_main+0x36c>
        {
            uint32 frame_len;

            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 800257c:	2380      	movs	r3, #128	@ 0x80
 800257e:	01db      	lsls	r3, r3, #7
 8002580:	001a      	movs	r2, r3
 8002582:	2100      	movs	r1, #0
 8002584:	200f      	movs	r0, #15
 8002586:	f00c fa0a 	bl	800e99e <dwt_write32bitoffsetreg>

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 800258a:	2100      	movs	r1, #0
 800258c:	2010      	movs	r0, #16
 800258e:	f00c f975 	bl	800e87c <dwt_read32bitoffsetreg>
 8002592:	0003      	movs	r3, r0
 8002594:	059b      	lsls	r3, r3, #22
 8002596:	0d9b      	lsrs	r3, r3, #22
 8002598:	65bb      	str	r3, [r7, #88]	@ 0x58
            if (frame_len <= RX_BUFFER_LEN)
 800259a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800259c:	2380      	movs	r3, #128	@ 0x80
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d806      	bhi.n	80025b2 <dw_main+0xb2>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 80025a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025a6:	b299      	uxth	r1, r3
 80025a8:	4bbb      	ldr	r3, [pc, #748]	@ (8002898 <dw_main+0x398>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	0018      	movs	r0, r3
 80025ae:	f00c f873 	bl	800e698 <dwt_readrxdata>
            }
            
            /* Check that the frame is a poll sent by "DS TWR initiator" example.
             * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
            rx_buffer[ALL_MSG_SN_IDX] = 0;
 80025b2:	4bb9      	ldr	r3, [pc, #740]	@ (8002898 <dw_main+0x398>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	709a      	strb	r2, [r3, #2]
            if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0)
 80025b8:	49b8      	ldr	r1, [pc, #736]	@ (800289c <dw_main+0x39c>)
 80025ba:	4bb7      	ldr	r3, [pc, #732]	@ (8002898 <dw_main+0x398>)
 80025bc:	220a      	movs	r2, #10
 80025be:	0018      	movs	r0, r3
 80025c0:	f00d fcba 	bl	800ff38 <memcmp>
 80025c4:	1e03      	subs	r3, r0, #0
 80025c6:	d1bf      	bne.n	8002548 <dw_main+0x48>

                uint32 resp_tx_time;
                int ret;

                /* Retrieve poll reception timestamp. */
                 poll_rx_ts = get_rx_timestamp_u64();
 80025c8:	f000 f9c8 	bl	800295c <get_rx_timestamp_u64>
 80025cc:	0002      	movs	r2, r0
 80025ce:	000b      	movs	r3, r1
 80025d0:	49b3      	ldr	r1, [pc, #716]	@ (80028a0 <dw_main+0x3a0>)
 80025d2:	600a      	str	r2, [r1, #0]
 80025d4:	604b      	str	r3, [r1, #4]

//                 CDC_Transmit_FS((uint8*) &poll_rx_ts, sizeof(poll_rx_ts));

                /* Set send time for response. See NOTE 9 below. */
                 resp_tx_time = (poll_rx_ts + (POLL_RX_TO_RESP_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 80025d6:	4bb2      	ldr	r3, [pc, #712]	@ (80028a0 <dw_main+0x3a0>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	48b1      	ldr	r0, [pc, #708]	@ (80028a4 <dw_main+0x3a4>)
 80025de:	2100      	movs	r1, #0
 80025e0:	1812      	adds	r2, r2, r0
 80025e2:	414b      	adcs	r3, r1
 80025e4:	0619      	lsls	r1, r3, #24
 80025e6:	0a14      	lsrs	r4, r2, #8
 80025e8:	430c      	orrs	r4, r1
 80025ea:	0a1d      	lsrs	r5, r3, #8
 80025ec:	0023      	movs	r3, r4
 80025ee:	657b      	str	r3, [r7, #84]	@ 0x54
                 dwt_setdelayedtrxtime(resp_tx_time);
 80025f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025f2:	0018      	movs	r0, r3
 80025f4:	f00c fb65 	bl	800ecc2 <dwt_setdelayedtrxtime>

                // CDC_Transmit_FS((uint8*)&resp_tx_time, sizeof(resp_tx_time));

                /* Set expected delay and timeout for final message reception. See NOTE 4 and 5 below. */
                 dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS);
 80025f8:	2064      	movs	r0, #100	@ 0x64
 80025fa:	f00c fa97 	bl	800eb2c <dwt_setrxaftertxdelay>
                 dwt_setrxtimeout(FINAL_RX_TIMEOUT_UUS);
 80025fe:	23af      	movs	r3, #175	@ 0xaf
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	0018      	movs	r0, r3
 8002604:	f00c fc64 	bl	800eed0 <dwt_setrxtimeout>

                /* Write and send the response message. See NOTE 10 below.*/
                tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8002608:	4ba7      	ldr	r3, [pc, #668]	@ (80028a8 <dw_main+0x3a8>)
 800260a:	781a      	ldrb	r2, [r3, #0]
 800260c:	4ba7      	ldr	r3, [pc, #668]	@ (80028ac <dw_main+0x3ac>)
 800260e:	709a      	strb	r2, [r3, #2]
                dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 8002610:	4ba6      	ldr	r3, [pc, #664]	@ (80028ac <dw_main+0x3ac>)
 8002612:	2200      	movs	r2, #0
 8002614:	0019      	movs	r1, r3
 8002616:	200f      	movs	r0, #15
 8002618:	f00b fff1 	bl	800e5fe <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 800261c:	2201      	movs	r2, #1
 800261e:	2100      	movs	r1, #0
 8002620:	200f      	movs	r0, #15
 8002622:	f00c f815 	bl	800e650 <dwt_writetxfctrl>
                ret = dwt_starttx(DWT_START_TX_DELAYED | DWT_RESPONSE_EXPECTED);
 8002626:	2003      	movs	r0, #3
 8002628:	f00c fb5a 	bl	800ece0 <dwt_starttx>
 800262c:	0003      	movs	r3, r0
 800262e:	653b      	str	r3, [r7, #80]	@ 0x50

                /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 11 below. */
                if (ret == DWT_ERROR)
 8002630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002632:	3301      	adds	r3, #1
 8002634:	d100      	bne.n	8002638 <dw_main+0x138>
 8002636:	e122      	b.n	800287e <dw_main+0x37e>
                {
                    continue;
                }

                /* Poll for reception of expected "final" frame or error/timeout. See NOTE 8 below. */
                while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8002638:	46c0      	nop			@ (mov r8, r8)
 800263a:	2100      	movs	r1, #0
 800263c:	200f      	movs	r0, #15
 800263e:	f00c f91d 	bl	800e87c <dwt_read32bitoffsetreg>
 8002642:	0002      	movs	r2, r0
 8002644:	4b92      	ldr	r3, [pc, #584]	@ (8002890 <dw_main+0x390>)
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	4b91      	ldr	r3, [pc, #580]	@ (8002890 <dw_main+0x390>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a91      	ldr	r2, [pc, #580]	@ (8002894 <dw_main+0x394>)
 800264e:	4013      	ands	r3, r2
 8002650:	d0f3      	beq.n	800263a <dw_main+0x13a>
                { };
                // uint32 error = status_reg & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
//                CDC_Transmit_FS((uint8 *) &error, sizeof(status_reg));

                /* Increment frame sequence number after transmission of the response message (modulo 256). */
                frame_seq_nb++;
 8002652:	4b95      	ldr	r3, [pc, #596]	@ (80028a8 <dw_main+0x3a8>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	3301      	adds	r3, #1
 8002658:	b2da      	uxtb	r2, r3
 800265a:	4b93      	ldr	r3, [pc, #588]	@ (80028a8 <dw_main+0x3a8>)
 800265c:	701a      	strb	r2, [r3, #0]

                if (status_reg & SYS_STATUS_RXFCG)
 800265e:	4b8c      	ldr	r3, [pc, #560]	@ (8002890 <dw_main+0x390>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	2380      	movs	r3, #128	@ 0x80
 8002664:	01db      	lsls	r3, r3, #7
 8002666:	4013      	ands	r3, r2
 8002668:	d100      	bne.n	800266c <dw_main+0x16c>
 800266a:	e0f6      	b.n	800285a <dw_main+0x35a>
                {
                    int i;

                    for (i = 0 ; i < RX_BUF_LEN; i++ )
 800266c:	2300      	movs	r3, #0
 800266e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002670:	e007      	b.n	8002682 <dw_main+0x182>
                    {
                        rx_buffer[i] = 0;
 8002672:	4a89      	ldr	r2, [pc, #548]	@ (8002898 <dw_main+0x398>)
 8002674:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002676:	18d3      	adds	r3, r2, r3
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
                    for (i = 0 ; i < RX_BUF_LEN; i++ )
 800267c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800267e:	3301      	adds	r3, #1
 8002680:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002682:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002684:	2b17      	cmp	r3, #23
 8002686:	ddf4      	ble.n	8002672 <dw_main+0x172>
                    }
//                	CDC_Transmit_FS((uint8 *) &status_reg, sizeof(error));
                    /* Clear good RX frame event and TX frame sent in the DW1000 status register. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG | SYS_STATUS_TXFRS);
 8002688:	2381      	movs	r3, #129	@ 0x81
 800268a:	01db      	lsls	r3, r3, #7
 800268c:	001a      	movs	r2, r3
 800268e:	2100      	movs	r1, #0
 8002690:	200f      	movs	r0, #15
 8002692:	f00c f984 	bl	800e99e <dwt_write32bitoffsetreg>

                    /* A frame has been received, read it into the local buffer. */
                    frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 8002696:	2100      	movs	r1, #0
 8002698:	2010      	movs	r0, #16
 800269a:	f00c f8ef 	bl	800e87c <dwt_read32bitoffsetreg>
 800269e:	0003      	movs	r3, r0
 80026a0:	227f      	movs	r2, #127	@ 0x7f
 80026a2:	4013      	ands	r3, r2
 80026a4:	65bb      	str	r3, [r7, #88]	@ 0x58
                    if (frame_len <= RX_BUF_LEN)
 80026a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026a8:	2b18      	cmp	r3, #24
 80026aa:	d806      	bhi.n	80026ba <dw_main+0x1ba>
                    {
                        dwt_readrxdata(rx_buffer, frame_len, 0);
 80026ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026ae:	b299      	uxth	r1, r3
 80026b0:	4b79      	ldr	r3, [pc, #484]	@ (8002898 <dw_main+0x398>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	0018      	movs	r0, r3
 80026b6:	f00b ffef 	bl	800e698 <dwt_readrxdata>

//                    CDC_Transmit_FS(rx_buffer, sizeof(rx_final_msg));

                    /* Check that the frame is a final message sent by "DS TWR initiator" example.
                     * As the sequence number field of the frame is not used in this example, it can be zeroed to ease the validation of the frame. */
                    rx_buffer[ALL_MSG_SN_IDX] = 0;
 80026ba:	4b77      	ldr	r3, [pc, #476]	@ (8002898 <dw_main+0x398>)
 80026bc:	2200      	movs	r2, #0
 80026be:	709a      	strb	r2, [r3, #2]
//                    CDC_Transmit_FS(rx_buffer, ALL_MSG_COMMON_LEN);
//                    CDC_Transmit_FS(rx_final_msg, ALL_MSG_COMMON_LEN);
                    if (memcmp(rx_buffer, rx_final_msg, ALL_MSG_COMMON_LEN) == 0)
 80026c0:	497b      	ldr	r1, [pc, #492]	@ (80028b0 <dw_main+0x3b0>)
 80026c2:	4b75      	ldr	r3, [pc, #468]	@ (8002898 <dw_main+0x398>)
 80026c4:	220a      	movs	r2, #10
 80026c6:	0018      	movs	r0, r3
 80026c8:	f00d fc36 	bl	800ff38 <memcmp>
 80026cc:	1e03      	subs	r3, r0, #0
 80026ce:	d000      	beq.n	80026d2 <dw_main+0x1d2>
 80026d0:	e73a      	b.n	8002548 <dw_main+0x48>
                        uint32 poll_rx_ts_32, resp_tx_ts_32, final_rx_ts_32;
                        double Ra, Rb, Da, Db;
                        int64 tof_dtu;

                        /* Retrieve response transmission and final reception timestamps. */
                        resp_tx_ts = get_tx_timestamp_u64();
 80026d2:	f000 f909 	bl	80028e8 <get_tx_timestamp_u64>
 80026d6:	0002      	movs	r2, r0
 80026d8:	000b      	movs	r3, r1
 80026da:	4976      	ldr	r1, [pc, #472]	@ (80028b4 <dw_main+0x3b4>)
 80026dc:	600a      	str	r2, [r1, #0]
 80026de:	604b      	str	r3, [r1, #4]
                        final_rx_ts = get_rx_timestamp_u64();
 80026e0:	f000 f93c 	bl	800295c <get_rx_timestamp_u64>
 80026e4:	0002      	movs	r2, r0
 80026e6:	000b      	movs	r3, r1
 80026e8:	4973      	ldr	r1, [pc, #460]	@ (80028b8 <dw_main+0x3b8>)
 80026ea:	600a      	str	r2, [r1, #0]
 80026ec:	604b      	str	r3, [r1, #4]

                        /* Get timestamps embedded in the final message. */
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX], &poll_tx_ts);
 80026ee:	230c      	movs	r3, #12
 80026f0:	2608      	movs	r6, #8
 80026f2:	199b      	adds	r3, r3, r6
 80026f4:	19da      	adds	r2, r3, r7
 80026f6:	4b71      	ldr	r3, [pc, #452]	@ (80028bc <dw_main+0x3bc>)
 80026f8:	0011      	movs	r1, r2
 80026fa:	0018      	movs	r0, r3
 80026fc:	f000 f968 	bl	80029d0 <final_msg_get_ts>
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_RESP_RX_TS_IDX], &resp_rx_ts);
 8002700:	2308      	movs	r3, #8
 8002702:	199b      	adds	r3, r3, r6
 8002704:	19da      	adds	r2, r3, r7
 8002706:	4b6e      	ldr	r3, [pc, #440]	@ (80028c0 <dw_main+0x3c0>)
 8002708:	0011      	movs	r1, r2
 800270a:	0018      	movs	r0, r3
 800270c:	f000 f960 	bl	80029d0 <final_msg_get_ts>
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_FINAL_TX_TS_IDX], &final_tx_ts);
 8002710:	230c      	movs	r3, #12
 8002712:	18fa      	adds	r2, r7, r3
 8002714:	4b6b      	ldr	r3, [pc, #428]	@ (80028c4 <dw_main+0x3c4>)
 8002716:	0011      	movs	r1, r2
 8002718:	0018      	movs	r0, r3
 800271a:	f000 f959 	bl	80029d0 <final_msg_get_ts>

                        /* Compute time of flight. 32-bit subtractions give correct answers even if clock has wrapped. See NOTE 12 below. */
                        poll_rx_ts_32 = (uint32)poll_rx_ts;
 800271e:	4b60      	ldr	r3, [pc, #384]	@ (80028a0 <dw_main+0x3a0>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	0013      	movs	r3, r2
 8002726:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        resp_tx_ts_32 = (uint32)resp_tx_ts;
 8002728:	4b62      	ldr	r3, [pc, #392]	@ (80028b4 <dw_main+0x3b4>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	0013      	movs	r3, r2
 8002730:	64bb      	str	r3, [r7, #72]	@ 0x48
                        final_rx_ts_32 = (uint32)final_rx_ts;
 8002732:	4b61      	ldr	r3, [pc, #388]	@ (80028b8 <dw_main+0x3b8>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	0013      	movs	r3, r2
 800273a:	647b      	str	r3, [r7, #68]	@ 0x44
                        Ra = (double)(resp_rx_ts - poll_tx_ts);
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	0018      	movs	r0, r3
 8002744:	f7ff fe9a 	bl	800247c <__aeabi_ui2d>
 8002748:	0002      	movs	r2, r0
 800274a:	000b      	movs	r3, r1
 800274c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800274e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                        Rb = (double)(final_rx_ts_32 - resp_tx_ts_32);
 8002750:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002752:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	0018      	movs	r0, r3
 8002758:	f7ff fe90 	bl	800247c <__aeabi_ui2d>
 800275c:	0002      	movs	r2, r0
 800275e:	000b      	movs	r3, r1
 8002760:	633a      	str	r2, [r7, #48]	@ 0x30
 8002762:	637b      	str	r3, [r7, #52]	@ 0x34
                        Da = (double)(final_tx_ts - resp_rx_ts);
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	0018      	movs	r0, r3
 800276c:	f7ff fe86 	bl	800247c <__aeabi_ui2d>
 8002770:	0002      	movs	r2, r0
 8002772:	000b      	movs	r3, r1
 8002774:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002776:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        Db = (double)(resp_tx_ts_32 - poll_rx_ts_32);
 8002778:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800277a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	0018      	movs	r0, r3
 8002780:	f7ff fe7c 	bl	800247c <__aeabi_ui2d>
 8002784:	0002      	movs	r2, r0
 8002786:	000b      	movs	r3, r1
 8002788:	623a      	str	r2, [r7, #32]
 800278a:	627b      	str	r3, [r7, #36]	@ 0x24
                        tof_dtu = (int64)((Ra * Rb - Da * Db) / (Ra + Rb + Da + Db));
 800278c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800278e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002790:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002792:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002794:	f7fe fef6 	bl	8001584 <__aeabi_dmul>
 8002798:	0002      	movs	r2, r0
 800279a:	000b      	movs	r3, r1
 800279c:	603a      	str	r2, [r7, #0]
 800279e:	607b      	str	r3, [r7, #4]
 80027a0:	6a3a      	ldr	r2, [r7, #32]
 80027a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80027a8:	f7fe feec 	bl	8001584 <__aeabi_dmul>
 80027ac:	0002      	movs	r2, r0
 80027ae:	000b      	movs	r3, r1
 80027b0:	6838      	ldr	r0, [r7, #0]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	f7ff f9cc 	bl	8001b50 <__aeabi_dsub>
 80027b8:	0002      	movs	r2, r0
 80027ba:	000b      	movs	r3, r1
 80027bc:	603a      	str	r2, [r7, #0]
 80027be:	607b      	str	r3, [r7, #4]
 80027c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027c4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80027c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80027c8:	f7fd fedc 	bl	8000584 <__aeabi_dadd>
 80027cc:	0002      	movs	r2, r0
 80027ce:	000b      	movs	r3, r1
 80027d0:	0010      	movs	r0, r2
 80027d2:	0019      	movs	r1, r3
 80027d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d8:	f7fd fed4 	bl	8000584 <__aeabi_dadd>
 80027dc:	0002      	movs	r2, r0
 80027de:	000b      	movs	r3, r1
 80027e0:	0010      	movs	r0, r2
 80027e2:	0019      	movs	r1, r3
 80027e4:	6a3a      	ldr	r2, [r7, #32]
 80027e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e8:	f7fd fecc 	bl	8000584 <__aeabi_dadd>
 80027ec:	0002      	movs	r2, r0
 80027ee:	000b      	movs	r3, r1
 80027f0:	6838      	ldr	r0, [r7, #0]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	f7fe fa8c 	bl	8000d10 <__aeabi_ddiv>
 80027f8:	0002      	movs	r2, r0
 80027fa:	000b      	movs	r3, r1
 80027fc:	0010      	movs	r0, r2
 80027fe:	0019      	movs	r1, r3
 8002800:	f7fd fe70 	bl	80004e4 <__aeabi_d2lz>
 8002804:	0002      	movs	r2, r0
 8002806:	000b      	movs	r3, r1
 8002808:	61ba      	str	r2, [r7, #24]
 800280a:	61fb      	str	r3, [r7, #28]

                        tof = tof_dtu * DWT_TIME_UNITS;
 800280c:	69b8      	ldr	r0, [r7, #24]
 800280e:	69f9      	ldr	r1, [r7, #28]
 8002810:	f7fd fea2 	bl	8000558 <__aeabi_l2d>
 8002814:	4a2c      	ldr	r2, [pc, #176]	@ (80028c8 <dw_main+0x3c8>)
 8002816:	4b2d      	ldr	r3, [pc, #180]	@ (80028cc <dw_main+0x3cc>)
 8002818:	f7fe feb4 	bl	8001584 <__aeabi_dmul>
 800281c:	0002      	movs	r2, r0
 800281e:	000b      	movs	r3, r1
 8002820:	492b      	ldr	r1, [pc, #172]	@ (80028d0 <dw_main+0x3d0>)
 8002822:	600a      	str	r2, [r1, #0]
 8002824:	604b      	str	r3, [r1, #4]
                        distance = tof * SPEED_OF_LIGHT;
 8002826:	4b2a      	ldr	r3, [pc, #168]	@ (80028d0 <dw_main+0x3d0>)
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	6859      	ldr	r1, [r3, #4]
 800282c:	2298      	movs	r2, #152	@ 0x98
 800282e:	0552      	lsls	r2, r2, #21
 8002830:	4b28      	ldr	r3, [pc, #160]	@ (80028d4 <dw_main+0x3d4>)
 8002832:	f7fe fea7 	bl	8001584 <__aeabi_dmul>
 8002836:	0002      	movs	r2, r0
 8002838:	000b      	movs	r3, r1
 800283a:	4927      	ldr	r1, [pc, #156]	@ (80028d8 <dw_main+0x3d8>)
 800283c:	600a      	str	r2, [r1, #0]
 800283e:	604b      	str	r3, [r1, #4]

                        /* Display computed distance on LCD. */
                        sprintf(dist_str, "DIST: %3.2f m\r\n", distance);
 8002840:	4b25      	ldr	r3, [pc, #148]	@ (80028d8 <dw_main+0x3d8>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4925      	ldr	r1, [pc, #148]	@ (80028dc <dw_main+0x3dc>)
 8002848:	4825      	ldr	r0, [pc, #148]	@ (80028e0 <dw_main+0x3e0>)
 800284a:	f00d fb07 	bl	800fe5c <siprintf>
                        // lcd_display_str(dist_str);

                         CDC_Transmit_FS((uint8_t*) dist_str, sizeof(dist_str));
 800284e:	4b24      	ldr	r3, [pc, #144]	@ (80028e0 <dw_main+0x3e0>)
 8002850:	2112      	movs	r1, #18
 8002852:	0018      	movs	r0, r3
 8002854:	f00a fedc 	bl	800d610 <CDC_Transmit_FS>
 8002858:	e676      	b.n	8002548 <dw_main+0x48>
                    }
                }
                else
                {
                    /* Clear RX error/timeout events in the DW1000 status register. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 800285a:	4b22      	ldr	r3, [pc, #136]	@ (80028e4 <dw_main+0x3e4>)
 800285c:	001a      	movs	r2, r3
 800285e:	2100      	movs	r1, #0
 8002860:	200f      	movs	r0, #15
 8002862:	f00c f89c 	bl	800e99e <dwt_write32bitoffsetreg>

                    /* Reset RX to properly reinitialise LDE operation. */
                    dwt_rxreset();
 8002866:	f00c fb83 	bl	800ef70 <dwt_rxreset>
 800286a:	e66d      	b.n	8002548 <dw_main+0x48>
            }
        }
        else
        {
            /* Clear RX error/timeout events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 800286c:	4b1d      	ldr	r3, [pc, #116]	@ (80028e4 <dw_main+0x3e4>)
 800286e:	001a      	movs	r2, r3
 8002870:	2100      	movs	r1, #0
 8002872:	200f      	movs	r0, #15
 8002874:	f00c f893 	bl	800e99e <dwt_write32bitoffsetreg>

            /* Reset RX to properly reinitialise LDE operation. */
            dwt_rxreset();
 8002878:	f00c fb7a 	bl	800ef70 <dwt_rxreset>
 800287c:	e664      	b.n	8002548 <dw_main+0x48>
                    continue;
 800287e:	46c0      	nop			@ (mov r8, r8)
        dwt_setrxtimeout(0);
 8002880:	e662      	b.n	8002548 <dw_main+0x48>
 8002882:	46c0      	nop			@ (mov r8, r8)
 8002884:	20000000 	.word	0x20000000
 8002888:	2000000c 	.word	0x2000000c
 800288c:	00004031 	.word	0x00004031
 8002890:	200003e0 	.word	0x200003e0
 8002894:	2427d000 	.word	0x2427d000
 8002898:	200003c8 	.word	0x200003c8
 800289c:	20000014 	.word	0x20000014
 80028a0:	200003e8 	.word	0x200003e8
 80028a4:	09c40000 	.word	0x09c40000
 80028a8:	200003c4 	.word	0x200003c4
 80028ac:	20000020 	.word	0x20000020
 80028b0:	20000030 	.word	0x20000030
 80028b4:	200003f0 	.word	0x200003f0
 80028b8:	200003f8 	.word	0x200003f8
 80028bc:	200003d2 	.word	0x200003d2
 80028c0:	200003d6 	.word	0x200003d6
 80028c4:	200003da 	.word	0x200003da
 80028c8:	3bce48fa 	.word	0x3bce48fa
 80028cc:	3db13518 	.word	0x3db13518
 80028d0:	20000400 	.word	0x20000400
 80028d4:	41b1dd19 	.word	0x41b1dd19
 80028d8:	20000408 	.word	0x20000408
 80028dc:	08012228 	.word	0x08012228
 80028e0:	20000410 	.word	0x20000410
 80028e4:	24279000 	.word	0x24279000

080028e8 <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_tx_timestamp_u64(void)
{
 80028e8:	b5b0      	push	{r4, r5, r7, lr}
 80028ea:	b08a      	sub	sp, #40	@ 0x28
 80028ec:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 80028ee:	2200      	movs	r2, #0
 80028f0:	2300      	movs	r3, #0
 80028f2:	623a      	str	r2, [r7, #32]
 80028f4:	627b      	str	r3, [r7, #36]	@ 0x24
    int i;
    dwt_readtxtimestamp(ts_tab);
 80028f6:	2314      	movs	r3, #20
 80028f8:	18fb      	adds	r3, r7, r3
 80028fa:	0018      	movs	r0, r3
 80028fc:	f00b fee5 	bl	800e6ca <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 8002900:	2304      	movs	r3, #4
 8002902:	61fb      	str	r3, [r7, #28]
 8002904:	e020      	b.n	8002948 <get_tx_timestamp_u64+0x60>
    {
        ts <<= 8;
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	0e1b      	lsrs	r3, r3, #24
 800290a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800290c:	0215      	lsls	r5, r2, #8
 800290e:	431d      	orrs	r5, r3
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	021c      	lsls	r4, r3, #8
 8002914:	623c      	str	r4, [r7, #32]
 8002916:	627d      	str	r5, [r7, #36]	@ 0x24
        ts |= ts_tab[i];
 8002918:	2314      	movs	r3, #20
 800291a:	18fa      	adds	r2, r7, r3
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	18d3      	adds	r3, r2, r3
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	0008      	movs	r0, r1
 8002930:	4318      	orrs	r0, r3
 8002932:	6038      	str	r0, [r7, #0]
 8002934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002936:	431a      	orrs	r2, r3
 8002938:	607a      	str	r2, [r7, #4]
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	623a      	str	r2, [r7, #32]
 8002940:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 4; i >= 0; i--)
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3b01      	subs	r3, #1
 8002946:	61fb      	str	r3, [r7, #28]
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	2b00      	cmp	r3, #0
 800294c:	dadb      	bge.n	8002906 <get_tx_timestamp_u64+0x1e>
    }
    return ts;
 800294e:	6a3a      	ldr	r2, [r7, #32]
 8002950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002952:	0010      	movs	r0, r2
 8002954:	0019      	movs	r1, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	b00a      	add	sp, #40	@ 0x28
 800295a:	bdb0      	pop	{r4, r5, r7, pc}

0800295c <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_rx_timestamp_u64(void)
{
 800295c:	b5b0      	push	{r4, r5, r7, lr}
 800295e:	b08a      	sub	sp, #40	@ 0x28
 8002960:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 8002962:	2200      	movs	r2, #0
 8002964:	2300      	movs	r3, #0
 8002966:	623a      	str	r2, [r7, #32]
 8002968:	627b      	str	r3, [r7, #36]	@ 0x24
    int i;
    dwt_readrxtimestamp(ts_tab);
 800296a:	2314      	movs	r3, #20
 800296c:	18fb      	adds	r3, r7, r3
 800296e:	0018      	movs	r0, r3
 8002970:	f00b feb9 	bl	800e6e6 <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 8002974:	2304      	movs	r3, #4
 8002976:	61fb      	str	r3, [r7, #28]
 8002978:	e020      	b.n	80029bc <get_rx_timestamp_u64+0x60>
    {
        ts <<= 8;
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	0e1b      	lsrs	r3, r3, #24
 800297e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002980:	0215      	lsls	r5, r2, #8
 8002982:	431d      	orrs	r5, r3
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	021c      	lsls	r4, r3, #8
 8002988:	623c      	str	r4, [r7, #32]
 800298a:	627d      	str	r5, [r7, #36]	@ 0x24
        ts |= ts_tab[i];
 800298c:	2314      	movs	r3, #20
 800298e:	18fa      	adds	r2, r7, r3
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	18d3      	adds	r3, r2, r3
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	68b9      	ldr	r1, [r7, #8]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	0008      	movs	r0, r1
 80029a4:	4318      	orrs	r0, r3
 80029a6:	6038      	str	r0, [r7, #0]
 80029a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029aa:	431a      	orrs	r2, r3
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	623a      	str	r2, [r7, #32]
 80029b4:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 4; i >= 0; i--)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3b01      	subs	r3, #1
 80029ba:	61fb      	str	r3, [r7, #28]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	dadb      	bge.n	800297a <get_rx_timestamp_u64+0x1e>
    }
    return ts;
 80029c2:	6a3a      	ldr	r2, [r7, #32]
 80029c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80029c6:	0010      	movs	r0, r2
 80029c8:	0019      	movs	r1, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b00a      	add	sp, #40	@ 0x28
 80029ce:	bdb0      	pop	{r4, r5, r7, pc}

080029d0 <final_msg_get_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
static void final_msg_get_ts(const uint8 *ts_field, uint32 *ts)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
    int i;
    *ts = 0;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 80029e0:	2300      	movs	r3, #0
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	e010      	b.n	8002a08 <final_msg_get_ts+0x38>
    {
        *ts += ts_field[i] << (i * 8);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	188a      	adds	r2, r1, r2
 80029f0:	7812      	ldrb	r2, [r2, #0]
 80029f2:	0011      	movs	r1, r2
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	00d2      	lsls	r2, r2, #3
 80029f8:	4091      	lsls	r1, r2
 80029fa:	000a      	movs	r2, r1
 80029fc:	189a      	adds	r2, r3, r2
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	3301      	adds	r3, #1
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	ddeb      	ble.n	80029e6 <final_msg_get_ts+0x16>
    }
}
 8002a0e:	46c0      	nop			@ (mov r8, r8)
 8002a10:	46c0      	nop			@ (mov r8, r8)
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b004      	add	sp, #16
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a1c:	f000 fe72 	bl	8003704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a20:	f000 f840 	bl	8002aa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a24:	f000 fa2e 	bl	8002e84 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a28:	f000 fa0e 	bl	8002e48 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002a2c:	f000 f9d8 	bl	8002de0 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8002a30:	f000 f904 	bl	8002c3c <MX_SPI1_Init>
  MX_ADC_Init();
 8002a34:	f000 f8a6 	bl	8002b84 <MX_ADC_Init>
  MX_SPI2_Init();
 8002a38:	f000 f93e 	bl	8002cb8 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8002a3c:	f00a fd64 	bl	800d508 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8002a40:	f000 f978 	bl	8002d34 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Startup sequence for LoRa module
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_SET);
 8002a44:	2390      	movs	r3, #144	@ 0x90
 8002a46:	05db      	lsls	r3, r3, #23
 8002a48:	2201      	movs	r2, #1
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f001 fdea 	bl	8004626 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8002a52:	23fa      	movs	r3, #250	@ 0xfa
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	0018      	movs	r0, r3
 8002a58:	f000 feb8 	bl	80037cc <HAL_Delay>
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_RESET);
 8002a5c:	2390      	movs	r3, #144	@ 0x90
 8002a5e:	05db      	lsls	r3, r3, #23
 8002a60:	2200      	movs	r2, #0
 8002a62:	2101      	movs	r1, #1
 8002a64:	0018      	movs	r0, r3
 8002a66:	f001 fdde 	bl	8004626 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8002a6a:	2064      	movs	r0, #100	@ 0x64
 8002a6c:	f000 feae 	bl	80037cc <HAL_Delay>
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_SET);
 8002a70:	2390      	movs	r3, #144	@ 0x90
 8002a72:	05db      	lsls	r3, r3, #23
 8002a74:	2201      	movs	r2, #1
 8002a76:	2101      	movs	r1, #1
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f001 fdd4 	bl	8004626 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8002a7e:	2064      	movs	r0, #100	@ 0x64
 8002a80:	f000 fea4 	bl	80037cc <HAL_Delay>

  // LoRa command reception callback
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_rx_buf, UART_RX_BUF_SIZE);
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	00da      	lsls	r2, r3, #3
 8002a88:	4904      	ldr	r1, [pc, #16]	@ (8002a9c <main+0x84>)
 8002a8a:	4b05      	ldr	r3, [pc, #20]	@ (8002aa0 <main+0x88>)
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f006 fecf 	bl	8009830 <HAL_UARTEx_ReceiveToIdle_DMA>
//
//  }

//  CDC_Transmit_FS("JOIN SUCCESS\r\n", 14);

   dw_main();
 8002a92:	f7ff fd35 	bl	8002500 <dw_main>
//  HAL_Delay(100);
//  send_at_msg("AT+TEST=RFCFG,915,SF8,500,12,15,14,ON,OFF,OFF\r\n");
//  HAL_Delay(100);
//  send_at_msg("AT+TEST=RXLRPKT\r\n");

  while (1)
 8002a96:	46c0      	nop			@ (mov r8, r8)
 8002a98:	e7fd      	b.n	8002a96 <main+0x7e>
 8002a9a:	46c0      	nop			@ (mov r8, r8)
 8002a9c:	20000670 	.word	0x20000670
 8002aa0:	20000574 	.word	0x20000574

08002aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002aa4:	b590      	push	{r4, r7, lr}
 8002aa6:	b099      	sub	sp, #100	@ 0x64
 8002aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aaa:	242c      	movs	r4, #44	@ 0x2c
 8002aac:	193b      	adds	r3, r7, r4
 8002aae:	0018      	movs	r0, r3
 8002ab0:	2334      	movs	r3, #52	@ 0x34
 8002ab2:	001a      	movs	r2, r3
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	f00d fa4d 	bl	800ff54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002aba:	231c      	movs	r3, #28
 8002abc:	18fb      	adds	r3, r7, r3
 8002abe:	0018      	movs	r0, r3
 8002ac0:	2310      	movs	r3, #16
 8002ac2:	001a      	movs	r2, r3
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	f00d fa45 	bl	800ff54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002aca:	003b      	movs	r3, r7
 8002acc:	0018      	movs	r0, r3
 8002ace:	231c      	movs	r3, #28
 8002ad0:	001a      	movs	r2, r3
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	f00d fa3e 	bl	800ff54 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8002ad8:	0021      	movs	r1, r4
 8002ada:	187b      	adds	r3, r7, r1
 8002adc:	2232      	movs	r2, #50	@ 0x32
 8002ade:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ae0:	187b      	adds	r3, r7, r1
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002ae6:	187b      	adds	r3, r7, r1
 8002ae8:	2201      	movs	r2, #1
 8002aea:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002aec:	187b      	adds	r3, r7, r1
 8002aee:	2201      	movs	r2, #1
 8002af0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002af2:	187b      	adds	r3, r7, r1
 8002af4:	2210      	movs	r2, #16
 8002af6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002af8:	187b      	adds	r3, r7, r1
 8002afa:	2210      	movs	r2, #16
 8002afc:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002afe:	187b      	adds	r3, r7, r1
 8002b00:	2202      	movs	r2, #2
 8002b02:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b04:	187b      	adds	r3, r7, r1
 8002b06:	2280      	movs	r2, #128	@ 0x80
 8002b08:	0212      	lsls	r2, r2, #8
 8002b0a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002b0c:	187b      	adds	r3, r7, r1
 8002b0e:	22e0      	movs	r2, #224	@ 0xe0
 8002b10:	0352      	lsls	r2, r2, #13
 8002b12:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8002b14:	187b      	adds	r3, r7, r1
 8002b16:	2201      	movs	r2, #1
 8002b18:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b1a:	187b      	adds	r3, r7, r1
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f003 fbfd 	bl	800631c <HAL_RCC_OscConfig>
 8002b22:	1e03      	subs	r3, r0, #0
 8002b24:	d001      	beq.n	8002b2a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002b26:	f000 fae1 	bl	80030ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b2a:	211c      	movs	r1, #28
 8002b2c:	187b      	adds	r3, r7, r1
 8002b2e:	2207      	movs	r2, #7
 8002b30:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b32:	187b      	adds	r3, r7, r1
 8002b34:	2202      	movs	r2, #2
 8002b36:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b38:	187b      	adds	r3, r7, r1
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b3e:	187b      	adds	r3, r7, r1
 8002b40:	2200      	movs	r2, #0
 8002b42:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002b44:	187b      	adds	r3, r7, r1
 8002b46:	2101      	movs	r1, #1
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f003 ff6d 	bl	8006a28 <HAL_RCC_ClockConfig>
 8002b4e:	1e03      	subs	r3, r0, #0
 8002b50:	d001      	beq.n	8002b56 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002b52:	f000 facb 	bl	80030ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 8002b56:	003b      	movs	r3, r7
 8002b58:	4a09      	ldr	r2, [pc, #36]	@ (8002b80 <SystemClock_Config+0xdc>)
 8002b5a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002b5c:	003b      	movs	r3, r7
 8002b5e:	2200      	movs	r2, #0
 8002b60:	609a      	str	r2, [r3, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002b62:	003b      	movs	r3, r7
 8002b64:	2200      	movs	r2, #0
 8002b66:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b68:	003b      	movs	r3, r7
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f004 f8c8 	bl	8006d00 <HAL_RCCEx_PeriphCLKConfig>
 8002b70:	1e03      	subs	r3, r0, #0
 8002b72:	d001      	beq.n	8002b78 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002b74:	f000 faba 	bl	80030ec <Error_Handler>
  }
}
 8002b78:	46c0      	nop			@ (mov r8, r8)
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b019      	add	sp, #100	@ 0x64
 8002b7e:	bd90      	pop	{r4, r7, pc}
 8002b80:	00020001 	.word	0x00020001

08002b84 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b8a:	1d3b      	adds	r3, r7, #4
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	230c      	movs	r3, #12
 8002b90:	001a      	movs	r2, r3
 8002b92:	2100      	movs	r1, #0
 8002b94:	f00d f9de 	bl	800ff54 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002b98:	4b26      	ldr	r3, [pc, #152]	@ (8002c34 <MX_ADC_Init+0xb0>)
 8002b9a:	4a27      	ldr	r2, [pc, #156]	@ (8002c38 <MX_ADC_Init+0xb4>)
 8002b9c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002b9e:	4b25      	ldr	r3, [pc, #148]	@ (8002c34 <MX_ADC_Init+0xb0>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002ba4:	4b23      	ldr	r3, [pc, #140]	@ (8002c34 <MX_ADC_Init+0xb0>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002baa:	4b22      	ldr	r3, [pc, #136]	@ (8002c34 <MX_ADC_Init+0xb0>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002bb0:	4b20      	ldr	r3, [pc, #128]	@ (8002c34 <MX_ADC_Init+0xb0>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002c34 <MX_ADC_Init+0xb0>)
 8002bb8:	2204      	movs	r2, #4
 8002bba:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002c34 <MX_ADC_Init+0xb0>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8002c34 <MX_ADC_Init+0xb0>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c34 <MX_ADC_Init+0xb0>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002bce:	4b19      	ldr	r3, [pc, #100]	@ (8002c34 <MX_ADC_Init+0xb0>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bd4:	4b17      	ldr	r3, [pc, #92]	@ (8002c34 <MX_ADC_Init+0xb0>)
 8002bd6:	22c2      	movs	r2, #194	@ 0xc2
 8002bd8:	32ff      	adds	r2, #255	@ 0xff
 8002bda:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002bdc:	4b15      	ldr	r3, [pc, #84]	@ (8002c34 <MX_ADC_Init+0xb0>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002be2:	4b14      	ldr	r3, [pc, #80]	@ (8002c34 <MX_ADC_Init+0xb0>)
 8002be4:	2224      	movs	r2, #36	@ 0x24
 8002be6:	2100      	movs	r1, #0
 8002be8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002bea:	4b12      	ldr	r3, [pc, #72]	@ (8002c34 <MX_ADC_Init+0xb0>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002bf0:	4b10      	ldr	r3, [pc, #64]	@ (8002c34 <MX_ADC_Init+0xb0>)
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f000 fe0e 	bl	8003814 <HAL_ADC_Init>
 8002bf8:	1e03      	subs	r3, r0, #0
 8002bfa:	d001      	beq.n	8002c00 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002bfc:	f000 fa76 	bl	80030ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002c00:	1d3b      	adds	r3, r7, #4
 8002c02:	2208      	movs	r2, #8
 8002c04:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002c06:	1d3b      	adds	r3, r7, #4
 8002c08:	2280      	movs	r2, #128	@ 0x80
 8002c0a:	0152      	lsls	r2, r2, #5
 8002c0c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002c0e:	1d3b      	adds	r3, r7, #4
 8002c10:	2280      	movs	r2, #128	@ 0x80
 8002c12:	0552      	lsls	r2, r2, #21
 8002c14:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002c16:	1d3a      	adds	r2, r7, #4
 8002c18:	4b06      	ldr	r3, [pc, #24]	@ (8002c34 <MX_ADC_Init+0xb0>)
 8002c1a:	0011      	movs	r1, r2
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f000 ff39 	bl	8003a94 <HAL_ADC_ConfigChannel>
 8002c22:	1e03      	subs	r3, r0, #0
 8002c24:	d001      	beq.n	8002c2a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002c26:	f000 fa61 	bl	80030ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002c2a:	46c0      	nop			@ (mov r8, r8)
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b004      	add	sp, #16
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	46c0      	nop			@ (mov r8, r8)
 8002c34:	20000424 	.word	0x20000424
 8002c38:	40012400 	.word	0x40012400

08002c3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c40:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb0 <MX_SPI1_Init+0x74>)
 8002c42:	4a1c      	ldr	r2, [pc, #112]	@ (8002cb4 <MX_SPI1_Init+0x78>)
 8002c44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c46:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb0 <MX_SPI1_Init+0x74>)
 8002c48:	2282      	movs	r2, #130	@ 0x82
 8002c4a:	0052      	lsls	r2, r2, #1
 8002c4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c4e:	4b18      	ldr	r3, [pc, #96]	@ (8002cb0 <MX_SPI1_Init+0x74>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c54:	4b16      	ldr	r3, [pc, #88]	@ (8002cb0 <MX_SPI1_Init+0x74>)
 8002c56:	22e0      	movs	r2, #224	@ 0xe0
 8002c58:	00d2      	lsls	r2, r2, #3
 8002c5a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c5c:	4b14      	ldr	r3, [pc, #80]	@ (8002cb0 <MX_SPI1_Init+0x74>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c62:	4b13      	ldr	r3, [pc, #76]	@ (8002cb0 <MX_SPI1_Init+0x74>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c68:	4b11      	ldr	r3, [pc, #68]	@ (8002cb0 <MX_SPI1_Init+0x74>)
 8002c6a:	2280      	movs	r2, #128	@ 0x80
 8002c6c:	0092      	lsls	r2, r2, #2
 8002c6e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002c70:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb0 <MX_SPI1_Init+0x74>)
 8002c72:	2208      	movs	r2, #8
 8002c74:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c76:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb0 <MX_SPI1_Init+0x74>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb0 <MX_SPI1_Init+0x74>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c82:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb0 <MX_SPI1_Init+0x74>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002c88:	4b09      	ldr	r3, [pc, #36]	@ (8002cb0 <MX_SPI1_Init+0x74>)
 8002c8a:	2207      	movs	r2, #7
 8002c8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c8e:	4b08      	ldr	r3, [pc, #32]	@ (8002cb0 <MX_SPI1_Init+0x74>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c94:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <MX_SPI1_Init+0x74>)
 8002c96:	2208      	movs	r2, #8
 8002c98:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c9a:	4b05      	ldr	r3, [pc, #20]	@ (8002cb0 <MX_SPI1_Init+0x74>)
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f004 f92d 	bl	8006efc <HAL_SPI_Init>
 8002ca2:	1e03      	subs	r3, r0, #0
 8002ca4:	d001      	beq.n	8002caa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002ca6:	f000 fa21 	bl	80030ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002caa:	46c0      	nop			@ (mov r8, r8)
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20000464 	.word	0x20000464
 8002cb4:	40013000 	.word	0x40013000

08002cb8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d2c <MX_SPI2_Init+0x74>)
 8002cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8002d30 <MX_SPI2_Init+0x78>)
 8002cc0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d2c <MX_SPI2_Init+0x74>)
 8002cc4:	2282      	movs	r2, #130	@ 0x82
 8002cc6:	0052      	lsls	r2, r2, #1
 8002cc8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002cca:	4b18      	ldr	r3, [pc, #96]	@ (8002d2c <MX_SPI2_Init+0x74>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002cd0:	4b16      	ldr	r3, [pc, #88]	@ (8002d2c <MX_SPI2_Init+0x74>)
 8002cd2:	22c0      	movs	r2, #192	@ 0xc0
 8002cd4:	0092      	lsls	r2, r2, #2
 8002cd6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cd8:	4b14      	ldr	r3, [pc, #80]	@ (8002d2c <MX_SPI2_Init+0x74>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cde:	4b13      	ldr	r3, [pc, #76]	@ (8002d2c <MX_SPI2_Init+0x74>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002ce4:	4b11      	ldr	r3, [pc, #68]	@ (8002d2c <MX_SPI2_Init+0x74>)
 8002ce6:	2280      	movs	r2, #128	@ 0x80
 8002ce8:	02d2      	lsls	r2, r2, #11
 8002cea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cec:	4b0f      	ldr	r3, [pc, #60]	@ (8002d2c <MX_SPI2_Init+0x74>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8002d2c <MX_SPI2_Init+0x74>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d2c <MX_SPI2_Init+0x74>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8002d2c <MX_SPI2_Init+0x74>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002d04:	4b09      	ldr	r3, [pc, #36]	@ (8002d2c <MX_SPI2_Init+0x74>)
 8002d06:	2207      	movs	r2, #7
 8002d08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d0a:	4b08      	ldr	r3, [pc, #32]	@ (8002d2c <MX_SPI2_Init+0x74>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d10:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <MX_SPI2_Init+0x74>)
 8002d12:	2208      	movs	r2, #8
 8002d14:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d16:	4b05      	ldr	r3, [pc, #20]	@ (8002d2c <MX_SPI2_Init+0x74>)
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f004 f8ef 	bl	8006efc <HAL_SPI_Init>
 8002d1e:	1e03      	subs	r3, r0, #0
 8002d20:	d001      	beq.n	8002d26 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002d22:	f000 f9e3 	bl	80030ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	200004c8 	.word	0x200004c8
 8002d30:	40003800 	.word	0x40003800

08002d34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d3a:	2308      	movs	r3, #8
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	0018      	movs	r0, r3
 8002d40:	2310      	movs	r3, #16
 8002d42:	001a      	movs	r2, r3
 8002d44:	2100      	movs	r1, #0
 8002d46:	f00d f905 	bl	800ff54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d4a:	003b      	movs	r3, r7
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	2308      	movs	r3, #8
 8002d50:	001a      	movs	r2, r3
 8002d52:	2100      	movs	r1, #0
 8002d54:	f00d f8fe 	bl	800ff54 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d58:	4b1f      	ldr	r3, [pc, #124]	@ (8002dd8 <MX_TIM3_Init+0xa4>)
 8002d5a:	4a20      	ldr	r2, [pc, #128]	@ (8002ddc <MX_TIM3_Init+0xa8>)
 8002d5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 8002d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd8 <MX_TIM3_Init+0xa4>)
 8002d60:	22f4      	movs	r2, #244	@ 0xf4
 8002d62:	32ff      	adds	r2, #255	@ 0xff
 8002d64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d66:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd8 <MX_TIM3_Init+0xa4>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 360-1;
 8002d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd8 <MX_TIM3_Init+0xa4>)
 8002d6e:	2268      	movs	r2, #104	@ 0x68
 8002d70:	32ff      	adds	r2, #255	@ 0xff
 8002d72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d74:	4b18      	ldr	r3, [pc, #96]	@ (8002dd8 <MX_TIM3_Init+0xa4>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d7a:	4b17      	ldr	r3, [pc, #92]	@ (8002dd8 <MX_TIM3_Init+0xa4>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d80:	4b15      	ldr	r3, [pc, #84]	@ (8002dd8 <MX_TIM3_Init+0xa4>)
 8002d82:	0018      	movs	r0, r3
 8002d84:	f004 ffe6 	bl	8007d54 <HAL_TIM_Base_Init>
 8002d88:	1e03      	subs	r3, r0, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8002d8c:	f000 f9ae 	bl	80030ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d90:	2108      	movs	r1, #8
 8002d92:	187b      	adds	r3, r7, r1
 8002d94:	2280      	movs	r2, #128	@ 0x80
 8002d96:	0152      	lsls	r2, r2, #5
 8002d98:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d9a:	187a      	adds	r2, r7, r1
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd8 <MX_TIM3_Init+0xa4>)
 8002d9e:	0011      	movs	r1, r2
 8002da0:	0018      	movs	r0, r3
 8002da2:	f005 f915 	bl	8007fd0 <HAL_TIM_ConfigClockSource>
 8002da6:	1e03      	subs	r3, r0, #0
 8002da8:	d001      	beq.n	8002dae <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002daa:	f000 f99f 	bl	80030ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dae:	003b      	movs	r3, r7
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002db4:	003b      	movs	r3, r7
 8002db6:	2200      	movs	r2, #0
 8002db8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002dba:	003a      	movs	r2, r7
 8002dbc:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <MX_TIM3_Init+0xa4>)
 8002dbe:	0011      	movs	r1, r2
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f005 fb29 	bl	8008418 <HAL_TIMEx_MasterConfigSynchronization>
 8002dc6:	1e03      	subs	r3, r0, #0
 8002dc8:	d001      	beq.n	8002dce <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002dca:	f000 f98f 	bl	80030ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002dce:	46c0      	nop			@ (mov r8, r8)
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b006      	add	sp, #24
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	46c0      	nop			@ (mov r8, r8)
 8002dd8:	2000052c 	.word	0x2000052c
 8002ddc:	40000400 	.word	0x40000400

08002de0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002de4:	4b16      	ldr	r3, [pc, #88]	@ (8002e40 <MX_USART1_UART_Init+0x60>)
 8002de6:	4a17      	ldr	r2, [pc, #92]	@ (8002e44 <MX_USART1_UART_Init+0x64>)
 8002de8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002dea:	4b15      	ldr	r3, [pc, #84]	@ (8002e40 <MX_USART1_UART_Init+0x60>)
 8002dec:	2296      	movs	r2, #150	@ 0x96
 8002dee:	0192      	lsls	r2, r2, #6
 8002df0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002df2:	4b13      	ldr	r3, [pc, #76]	@ (8002e40 <MX_USART1_UART_Init+0x60>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002df8:	4b11      	ldr	r3, [pc, #68]	@ (8002e40 <MX_USART1_UART_Init+0x60>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002dfe:	4b10      	ldr	r3, [pc, #64]	@ (8002e40 <MX_USART1_UART_Init+0x60>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e04:	4b0e      	ldr	r3, [pc, #56]	@ (8002e40 <MX_USART1_UART_Init+0x60>)
 8002e06:	220c      	movs	r2, #12
 8002e08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e40 <MX_USART1_UART_Init+0x60>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e10:	4b0b      	ldr	r3, [pc, #44]	@ (8002e40 <MX_USART1_UART_Init+0x60>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e16:	4b0a      	ldr	r3, [pc, #40]	@ (8002e40 <MX_USART1_UART_Init+0x60>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8002e1c:	4b08      	ldr	r3, [pc, #32]	@ (8002e40 <MX_USART1_UART_Init+0x60>)
 8002e1e:	2210      	movs	r2, #16
 8002e20:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002e22:	4b07      	ldr	r3, [pc, #28]	@ (8002e40 <MX_USART1_UART_Init+0x60>)
 8002e24:	2280      	movs	r2, #128	@ 0x80
 8002e26:	0152      	lsls	r2, r2, #5
 8002e28:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e2a:	4b05      	ldr	r3, [pc, #20]	@ (8002e40 <MX_USART1_UART_Init+0x60>)
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f005 fb61 	bl	80084f4 <HAL_UART_Init>
 8002e32:	1e03      	subs	r3, r0, #0
 8002e34:	d001      	beq.n	8002e3a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002e36:	f000 f959 	bl	80030ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e3a:	46c0      	nop			@ (mov r8, r8)
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	20000574 	.word	0x20000574
 8002e44:	40013800 	.word	0x40013800

08002e48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e80 <MX_DMA_Init+0x38>)
 8002e50:	695a      	ldr	r2, [r3, #20]
 8002e52:	4b0b      	ldr	r3, [pc, #44]	@ (8002e80 <MX_DMA_Init+0x38>)
 8002e54:	2101      	movs	r1, #1
 8002e56:	430a      	orrs	r2, r1
 8002e58:	615a      	str	r2, [r3, #20]
 8002e5a:	4b09      	ldr	r3, [pc, #36]	@ (8002e80 <MX_DMA_Init+0x38>)
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	4013      	ands	r3, r2
 8002e62:	607b      	str	r3, [r7, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002e66:	2200      	movs	r2, #0
 8002e68:	2100      	movs	r1, #0
 8002e6a:	200a      	movs	r0, #10
 8002e6c:	f000 ffee 	bl	8003e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002e70:	200a      	movs	r0, #10
 8002e72:	f001 f800 	bl	8003e76 <HAL_NVIC_EnableIRQ>

}
 8002e76:	46c0      	nop			@ (mov r8, r8)
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b002      	add	sp, #8
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	46c0      	nop			@ (mov r8, r8)
 8002e80:	40021000 	.word	0x40021000

08002e84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e84:	b590      	push	{r4, r7, lr}
 8002e86:	b089      	sub	sp, #36	@ 0x24
 8002e88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8a:	240c      	movs	r4, #12
 8002e8c:	193b      	adds	r3, r7, r4
 8002e8e:	0018      	movs	r0, r3
 8002e90:	2314      	movs	r3, #20
 8002e92:	001a      	movs	r2, r3
 8002e94:	2100      	movs	r1, #0
 8002e96:	f00d f85d 	bl	800ff54 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e9a:	4b5b      	ldr	r3, [pc, #364]	@ (8003008 <MX_GPIO_Init+0x184>)
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	4b5a      	ldr	r3, [pc, #360]	@ (8003008 <MX_GPIO_Init+0x184>)
 8002ea0:	2180      	movs	r1, #128	@ 0x80
 8002ea2:	03c9      	lsls	r1, r1, #15
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	615a      	str	r2, [r3, #20]
 8002ea8:	4b57      	ldr	r3, [pc, #348]	@ (8003008 <MX_GPIO_Init+0x184>)
 8002eaa:	695a      	ldr	r2, [r3, #20]
 8002eac:	2380      	movs	r3, #128	@ 0x80
 8002eae:	03db      	lsls	r3, r3, #15
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb6:	4b54      	ldr	r3, [pc, #336]	@ (8003008 <MX_GPIO_Init+0x184>)
 8002eb8:	695a      	ldr	r2, [r3, #20]
 8002eba:	4b53      	ldr	r3, [pc, #332]	@ (8003008 <MX_GPIO_Init+0x184>)
 8002ebc:	2180      	movs	r1, #128	@ 0x80
 8002ebe:	0289      	lsls	r1, r1, #10
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	615a      	str	r2, [r3, #20]
 8002ec4:	4b50      	ldr	r3, [pc, #320]	@ (8003008 <MX_GPIO_Init+0x184>)
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	2380      	movs	r3, #128	@ 0x80
 8002eca:	029b      	lsls	r3, r3, #10
 8002ecc:	4013      	ands	r3, r2
 8002ece:	607b      	str	r3, [r7, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed2:	4b4d      	ldr	r3, [pc, #308]	@ (8003008 <MX_GPIO_Init+0x184>)
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	4b4c      	ldr	r3, [pc, #304]	@ (8003008 <MX_GPIO_Init+0x184>)
 8002ed8:	2180      	movs	r1, #128	@ 0x80
 8002eda:	02c9      	lsls	r1, r1, #11
 8002edc:	430a      	orrs	r2, r1
 8002ede:	615a      	str	r2, [r3, #20]
 8002ee0:	4b49      	ldr	r3, [pc, #292]	@ (8003008 <MX_GPIO_Init+0x184>)
 8002ee2:	695a      	ldr	r2, [r3, #20]
 8002ee4:	2380      	movs	r3, #128	@ 0x80
 8002ee6:	02db      	lsls	r3, r3, #11
 8002ee8:	4013      	ands	r3, r2
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, E5_NRST_Pin|DW_NSS_Pin, GPIO_PIN_RESET);
 8002eee:	2390      	movs	r3, #144	@ 0x90
 8002ef0:	05db      	lsls	r3, r3, #23
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2111      	movs	r1, #17
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f001 fb95 	bl	8004626 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCREEN_EN_Pin|SD_CS_Pin|WAKE_Pin|TFT_DC_Pin
 8002efc:	4943      	ldr	r1, [pc, #268]	@ (800300c <MX_GPIO_Init+0x188>)
 8002efe:	4b44      	ldr	r3, [pc, #272]	@ (8003010 <MX_GPIO_Init+0x18c>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	0018      	movs	r0, r3
 8002f04:	f001 fb8f 	bl	8004626 <HAL_GPIO_WritePin>
                          |TFT_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : E5_NRST_Pin */
  GPIO_InitStruct.Pin = E5_NRST_Pin;
 8002f08:	193b      	adds	r3, r7, r4
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f0e:	193b      	adds	r3, r7, r4
 8002f10:	2201      	movs	r2, #1
 8002f12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	193b      	adds	r3, r7, r4
 8002f16:	2200      	movs	r2, #0
 8002f18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1a:	193b      	adds	r3, r7, r4
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(E5_NRST_GPIO_Port, &GPIO_InitStruct);
 8002f20:	193a      	adds	r2, r7, r4
 8002f22:	2390      	movs	r3, #144	@ 0x90
 8002f24:	05db      	lsls	r3, r3, #23
 8002f26:	0011      	movs	r1, r2
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f001 f9e7 	bl	80042fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_RESET_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin;
 8002f2e:	193b      	adds	r3, r7, r4
 8002f30:	2204      	movs	r2, #4
 8002f32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f34:	193b      	adds	r3, r7, r4
 8002f36:	2288      	movs	r2, #136	@ 0x88
 8002f38:	0352      	lsls	r2, r2, #13
 8002f3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3c:	193b      	adds	r3, r7, r4
 8002f3e:	2200      	movs	r2, #0
 8002f40:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8002f42:	193a      	adds	r2, r7, r4
 8002f44:	2390      	movs	r3, #144	@ 0x90
 8002f46:	05db      	lsls	r3, r3, #23
 8002f48:	0011      	movs	r1, r2
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f001 f9d6 	bl	80042fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 8002f50:	193b      	adds	r3, r7, r4
 8002f52:	2210      	movs	r2, #16
 8002f54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f56:	193b      	adds	r3, r7, r4
 8002f58:	2201      	movs	r2, #1
 8002f5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5c:	193b      	adds	r3, r7, r4
 8002f5e:	2200      	movs	r2, #0
 8002f60:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f62:	193b      	adds	r3, r7, r4
 8002f64:	2203      	movs	r2, #3
 8002f66:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 8002f68:	193a      	adds	r2, r7, r4
 8002f6a:	2390      	movs	r3, #144	@ 0x90
 8002f6c:	05db      	lsls	r3, r3, #23
 8002f6e:	0011      	movs	r1, r2
 8002f70:	0018      	movs	r0, r3
 8002f72:	f001 f9c3 	bl	80042fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SCREEN_EN_Pin SD_CS_Pin WAKE_Pin TFT_DC_Pin
                           TFT_RST_Pin */
  GPIO_InitStruct.Pin = SCREEN_EN_Pin|SD_CS_Pin|WAKE_Pin|TFT_DC_Pin
 8002f76:	193b      	adds	r3, r7, r4
 8002f78:	4a24      	ldr	r2, [pc, #144]	@ (800300c <MX_GPIO_Init+0x188>)
 8002f7a:	601a      	str	r2, [r3, #0]
                          |TFT_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f7c:	193b      	adds	r3, r7, r4
 8002f7e:	2201      	movs	r2, #1
 8002f80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f82:	193b      	adds	r3, r7, r4
 8002f84:	2200      	movs	r2, #0
 8002f86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f88:	193b      	adds	r3, r7, r4
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f8e:	193b      	adds	r3, r7, r4
 8002f90:	4a1f      	ldr	r2, [pc, #124]	@ (8003010 <MX_GPIO_Init+0x18c>)
 8002f92:	0019      	movs	r1, r3
 8002f94:	0010      	movs	r0, r2
 8002f96:	f001 f9b1 	bl	80042fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_DISP_Pin */
  GPIO_InitStruct.Pin = BTN_DISP_Pin;
 8002f9a:	0021      	movs	r1, r4
 8002f9c:	187b      	adds	r3, r7, r1
 8002f9e:	2280      	movs	r2, #128	@ 0x80
 8002fa0:	0192      	lsls	r2, r2, #6
 8002fa2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fa4:	000c      	movs	r4, r1
 8002fa6:	193b      	adds	r3, r7, r4
 8002fa8:	2200      	movs	r2, #0
 8002faa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	193b      	adds	r3, r7, r4
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_DISP_GPIO_Port, &GPIO_InitStruct);
 8002fb2:	193b      	adds	r3, r7, r4
 8002fb4:	4a16      	ldr	r2, [pc, #88]	@ (8003010 <MX_GPIO_Init+0x18c>)
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	0010      	movs	r0, r2
 8002fba:	f001 f99f 	bl	80042fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 8002fbe:	0021      	movs	r1, r4
 8002fc0:	187b      	adds	r3, r7, r1
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fc6:	187b      	adds	r3, r7, r1
 8002fc8:	2288      	movs	r2, #136	@ 0x88
 8002fca:	0352      	lsls	r2, r2, #13
 8002fcc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fce:	187b      	adds	r3, r7, r1
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 8002fd4:	187b      	adds	r3, r7, r1
 8002fd6:	4a0e      	ldr	r2, [pc, #56]	@ (8003010 <MX_GPIO_Init+0x18c>)
 8002fd8:	0019      	movs	r1, r3
 8002fda:	0010      	movs	r0, r2
 8002fdc:	f001 f98e 	bl	80042fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	2006      	movs	r0, #6
 8002fe6:	f000 ff31 	bl	8003e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002fea:	2006      	movs	r0, #6
 8002fec:	f000 ff43 	bl	8003e76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	2007      	movs	r0, #7
 8002ff6:	f000 ff29 	bl	8003e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002ffa:	2007      	movs	r0, #7
 8002ffc:	f000 ff3b 	bl	8003e76 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003000:	46c0      	nop			@ (mov r8, r8)
 8003002:	46bd      	mov	sp, r7
 8003004:	b009      	add	sp, #36	@ 0x24
 8003006:	bd90      	pop	{r4, r7, pc}
 8003008:	40021000 	.word	0x40021000
 800300c:	00000b44 	.word	0x00000b44
 8003010:	48000400 	.word	0x48000400

08003014 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t offset)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	000a      	movs	r2, r1
 800301e:	1cbb      	adds	r3, r7, #2
 8003020:	801a      	strh	r2, [r3, #0]

	static uint16_t last_offset = 0;

	// Ignore if called twice (which will happen on every half buffer)
	if (offset != last_offset) {
 8003022:	4b2d      	ldr	r3, [pc, #180]	@ (80030d8 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	1cba      	adds	r2, r7, #2
 8003028:	8812      	ldrh	r2, [r2, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d050      	beq.n	80030d0 <HAL_UARTEx_RxEventCallback+0xbc>

		// If wrap around reset last_size
		if (offset < last_offset)
 800302e:	4b2a      	ldr	r3, [pc, #168]	@ (80030d8 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	1cba      	adds	r2, r7, #2
 8003034:	8812      	ldrh	r2, [r2, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d202      	bcs.n	8003040 <HAL_UARTEx_RxEventCallback+0x2c>
			last_offset = 0;
 800303a:	4b27      	ldr	r3, [pc, #156]	@ (80030d8 <HAL_UARTEx_RxEventCallback+0xc4>)
 800303c:	2200      	movs	r2, #0
 800303e:	801a      	strh	r2, [r3, #0]

    CDC_Transmit_FS(uart_rx_buf + last_offset, offset - last_offset);
 8003040:	4b25      	ldr	r3, [pc, #148]	@ (80030d8 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	001a      	movs	r2, r3
 8003046:	4b25      	ldr	r3, [pc, #148]	@ (80030dc <HAL_UARTEx_RxEventCallback+0xc8>)
 8003048:	18d0      	adds	r0, r2, r3
 800304a:	1cbb      	adds	r3, r7, #2
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	4a22      	ldr	r2, [pc, #136]	@ (80030d8 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003050:	8812      	ldrh	r2, [r2, #0]
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	0019      	movs	r1, r3
 8003056:	f00a fadb 	bl	800d610 <CDC_Transmit_FS>
    
    static uint16_t response_offset = 0;
    
    for(uint16_t i = last_offset; i < offset; i++)
 800305a:	230e      	movs	r3, #14
 800305c:	18fb      	adds	r3, r7, r3
 800305e:	4a1e      	ldr	r2, [pc, #120]	@ (80030d8 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003060:	8812      	ldrh	r2, [r2, #0]
 8003062:	801a      	strh	r2, [r3, #0]
 8003064:	e029      	b.n	80030ba <HAL_UARTEx_RxEventCallback+0xa6>
    {
      if(uart_rx_buf[i] == '+')
 8003066:	210e      	movs	r1, #14
 8003068:	187b      	adds	r3, r7, r1
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	4a1b      	ldr	r2, [pc, #108]	@ (80030dc <HAL_UARTEx_RxEventCallback+0xc8>)
 800306e:	5cd3      	ldrb	r3, [r2, r3]
 8003070:	2b2b      	cmp	r3, #43	@ 0x2b
 8003072:	d11c      	bne.n	80030ae <HAL_UARTEx_RxEventCallback+0x9a>
      {
        response_offset = i;
 8003074:	4b1a      	ldr	r3, [pc, #104]	@ (80030e0 <HAL_UARTEx_RxEventCallback+0xcc>)
 8003076:	187a      	adds	r2, r7, r1
 8003078:	8812      	ldrh	r2, [r2, #0]
 800307a:	801a      	strh	r2, [r3, #0]
        if (offset < response_offset)
 800307c:	4b18      	ldr	r3, [pc, #96]	@ (80030e0 <HAL_UARTEx_RxEventCallback+0xcc>)
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	1cba      	adds	r2, r7, #2
 8003082:	8812      	ldrh	r2, [r2, #0]
 8003084:	429a      	cmp	r2, r3
 8003086:	d202      	bcs.n	800308e <HAL_UARTEx_RxEventCallback+0x7a>
          response_offset = 0;
 8003088:	4b15      	ldr	r3, [pc, #84]	@ (80030e0 <HAL_UARTEx_RxEventCallback+0xcc>)
 800308a:	2200      	movs	r2, #0
 800308c:	801a      	strh	r2, [r3, #0]
        if(memcmp(uart_rx_buf + response_offset, joined_msg, sizeof(joined_msg) - 1) == 0)
 800308e:	4b14      	ldr	r3, [pc, #80]	@ (80030e0 <HAL_UARTEx_RxEventCallback+0xcc>)
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	001a      	movs	r2, r3
 8003094:	4b11      	ldr	r3, [pc, #68]	@ (80030dc <HAL_UARTEx_RxEventCallback+0xc8>)
 8003096:	18d3      	adds	r3, r2, r3
 8003098:	4912      	ldr	r1, [pc, #72]	@ (80030e4 <HAL_UARTEx_RxEventCallback+0xd0>)
 800309a:	2215      	movs	r2, #21
 800309c:	0018      	movs	r0, r3
 800309e:	f00c ff4b 	bl	800ff38 <memcmp>
 80030a2:	1e03      	subs	r3, r0, #0
 80030a4:	d103      	bne.n	80030ae <HAL_UARTEx_RxEventCallback+0x9a>
        {
          joined = 1;
 80030a6:	4b10      	ldr	r3, [pc, #64]	@ (80030e8 <HAL_UARTEx_RxEventCallback+0xd4>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	701a      	strb	r2, [r3, #0]
          break;
 80030ac:	e00c      	b.n	80030c8 <HAL_UARTEx_RxEventCallback+0xb4>
    for(uint16_t i = last_offset; i < offset; i++)
 80030ae:	210e      	movs	r1, #14
 80030b0:	187b      	adds	r3, r7, r1
 80030b2:	881a      	ldrh	r2, [r3, #0]
 80030b4:	187b      	adds	r3, r7, r1
 80030b6:	3201      	adds	r2, #1
 80030b8:	801a      	strh	r2, [r3, #0]
 80030ba:	230e      	movs	r3, #14
 80030bc:	18fa      	adds	r2, r7, r3
 80030be:	1cbb      	adds	r3, r7, #2
 80030c0:	8812      	ldrh	r2, [r2, #0]
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d3ce      	bcc.n	8003066 <HAL_UARTEx_RxEventCallback+0x52>
        }
      }
    }

    last_offset = offset;
 80030c8:	4b03      	ldr	r3, [pc, #12]	@ (80030d8 <HAL_UARTEx_RxEventCallback+0xc4>)
 80030ca:	1cba      	adds	r2, r7, #2
 80030cc:	8812      	ldrh	r2, [r2, #0]
 80030ce:	801a      	strh	r2, [r3, #0]


	}

}
 80030d0:	46c0      	nop			@ (mov r8, r8)
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b004      	add	sp, #16
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	20000a72 	.word	0x20000a72
 80030dc:	20000670 	.word	0x20000670
 80030e0:	20000a74 	.word	0x20000a74
 80030e4:	20000048 	.word	0x20000048
 80030e8:	20000a70 	.word	0x20000a70

080030ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030f0:	b672      	cpsid	i
}
 80030f2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030f4:	46c0      	nop			@ (mov r8, r8)
 80030f6:	e7fd      	b.n	80030f4 <Error_Handler+0x8>

080030f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030fe:	4b13      	ldr	r3, [pc, #76]	@ (800314c <HAL_MspInit+0x54>)
 8003100:	699a      	ldr	r2, [r3, #24]
 8003102:	4b12      	ldr	r3, [pc, #72]	@ (800314c <HAL_MspInit+0x54>)
 8003104:	2101      	movs	r1, #1
 8003106:	430a      	orrs	r2, r1
 8003108:	619a      	str	r2, [r3, #24]
 800310a:	4b10      	ldr	r3, [pc, #64]	@ (800314c <HAL_MspInit+0x54>)
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2201      	movs	r2, #1
 8003110:	4013      	ands	r3, r2
 8003112:	607b      	str	r3, [r7, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003116:	4b0d      	ldr	r3, [pc, #52]	@ (800314c <HAL_MspInit+0x54>)
 8003118:	69da      	ldr	r2, [r3, #28]
 800311a:	4b0c      	ldr	r3, [pc, #48]	@ (800314c <HAL_MspInit+0x54>)
 800311c:	2180      	movs	r1, #128	@ 0x80
 800311e:	0549      	lsls	r1, r1, #21
 8003120:	430a      	orrs	r2, r1
 8003122:	61da      	str	r2, [r3, #28]
 8003124:	4b09      	ldr	r3, [pc, #36]	@ (800314c <HAL_MspInit+0x54>)
 8003126:	69da      	ldr	r2, [r3, #28]
 8003128:	2380      	movs	r3, #128	@ 0x80
 800312a:	055b      	lsls	r3, r3, #21
 800312c:	4013      	ands	r3, r2
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8003132:	2200      	movs	r2, #0
 8003134:	2100      	movs	r1, #0
 8003136:	2004      	movs	r0, #4
 8003138:	f000 fe88 	bl	8003e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 800313c:	2004      	movs	r0, #4
 800313e:	f000 fe9a 	bl	8003e76 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003142:	46c0      	nop			@ (mov r8, r8)
 8003144:	46bd      	mov	sp, r7
 8003146:	b002      	add	sp, #8
 8003148:	bd80      	pop	{r7, pc}
 800314a:	46c0      	nop			@ (mov r8, r8)
 800314c:	40021000 	.word	0x40021000

08003150 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003150:	b590      	push	{r4, r7, lr}
 8003152:	b08b      	sub	sp, #44	@ 0x2c
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003158:	2414      	movs	r4, #20
 800315a:	193b      	adds	r3, r7, r4
 800315c:	0018      	movs	r0, r3
 800315e:	2314      	movs	r3, #20
 8003160:	001a      	movs	r2, r3
 8003162:	2100      	movs	r1, #0
 8003164:	f00c fef6 	bl	800ff54 <memset>
  if(hadc->Instance==ADC1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a18      	ldr	r2, [pc, #96]	@ (80031d0 <HAL_ADC_MspInit+0x80>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d12a      	bne.n	80031c8 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003172:	4b18      	ldr	r3, [pc, #96]	@ (80031d4 <HAL_ADC_MspInit+0x84>)
 8003174:	699a      	ldr	r2, [r3, #24]
 8003176:	4b17      	ldr	r3, [pc, #92]	@ (80031d4 <HAL_ADC_MspInit+0x84>)
 8003178:	2180      	movs	r1, #128	@ 0x80
 800317a:	0089      	lsls	r1, r1, #2
 800317c:	430a      	orrs	r2, r1
 800317e:	619a      	str	r2, [r3, #24]
 8003180:	4b14      	ldr	r3, [pc, #80]	@ (80031d4 <HAL_ADC_MspInit+0x84>)
 8003182:	699a      	ldr	r2, [r3, #24]
 8003184:	2380      	movs	r3, #128	@ 0x80
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4013      	ands	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800318e:	4b11      	ldr	r3, [pc, #68]	@ (80031d4 <HAL_ADC_MspInit+0x84>)
 8003190:	695a      	ldr	r2, [r3, #20]
 8003192:	4b10      	ldr	r3, [pc, #64]	@ (80031d4 <HAL_ADC_MspInit+0x84>)
 8003194:	2180      	movs	r1, #128	@ 0x80
 8003196:	02c9      	lsls	r1, r1, #11
 8003198:	430a      	orrs	r2, r1
 800319a:	615a      	str	r2, [r3, #20]
 800319c:	4b0d      	ldr	r3, [pc, #52]	@ (80031d4 <HAL_ADC_MspInit+0x84>)
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	2380      	movs	r3, #128	@ 0x80
 80031a2:	02db      	lsls	r3, r3, #11
 80031a4:	4013      	ands	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = VBATT_ADC_Pin;
 80031aa:	193b      	adds	r3, r7, r4
 80031ac:	2201      	movs	r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031b0:	193b      	adds	r3, r7, r4
 80031b2:	2203      	movs	r2, #3
 80031b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b6:	193b      	adds	r3, r7, r4
 80031b8:	2200      	movs	r2, #0
 80031ba:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBATT_ADC_GPIO_Port, &GPIO_InitStruct);
 80031bc:	193b      	adds	r3, r7, r4
 80031be:	4a06      	ldr	r2, [pc, #24]	@ (80031d8 <HAL_ADC_MspInit+0x88>)
 80031c0:	0019      	movs	r1, r3
 80031c2:	0010      	movs	r0, r2
 80031c4:	f001 f89a 	bl	80042fc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80031c8:	46c0      	nop			@ (mov r8, r8)
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b00b      	add	sp, #44	@ 0x2c
 80031ce:	bd90      	pop	{r4, r7, pc}
 80031d0:	40012400 	.word	0x40012400
 80031d4:	40021000 	.word	0x40021000
 80031d8:	48000400 	.word	0x48000400

080031dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031dc:	b590      	push	{r4, r7, lr}
 80031de:	b08d      	sub	sp, #52	@ 0x34
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e4:	241c      	movs	r4, #28
 80031e6:	193b      	adds	r3, r7, r4
 80031e8:	0018      	movs	r0, r3
 80031ea:	2314      	movs	r3, #20
 80031ec:	001a      	movs	r2, r3
 80031ee:	2100      	movs	r1, #0
 80031f0:	f00c feb0 	bl	800ff54 <memset>
  if(hspi->Instance==SPI1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a45      	ldr	r2, [pc, #276]	@ (8003310 <HAL_SPI_MspInit+0x134>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d133      	bne.n	8003266 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031fe:	4b45      	ldr	r3, [pc, #276]	@ (8003314 <HAL_SPI_MspInit+0x138>)
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	4b44      	ldr	r3, [pc, #272]	@ (8003314 <HAL_SPI_MspInit+0x138>)
 8003204:	2180      	movs	r1, #128	@ 0x80
 8003206:	0149      	lsls	r1, r1, #5
 8003208:	430a      	orrs	r2, r1
 800320a:	619a      	str	r2, [r3, #24]
 800320c:	4b41      	ldr	r3, [pc, #260]	@ (8003314 <HAL_SPI_MspInit+0x138>)
 800320e:	699a      	ldr	r2, [r3, #24]
 8003210:	2380      	movs	r3, #128	@ 0x80
 8003212:	015b      	lsls	r3, r3, #5
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
 8003218:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800321a:	4b3e      	ldr	r3, [pc, #248]	@ (8003314 <HAL_SPI_MspInit+0x138>)
 800321c:	695a      	ldr	r2, [r3, #20]
 800321e:	4b3d      	ldr	r3, [pc, #244]	@ (8003314 <HAL_SPI_MspInit+0x138>)
 8003220:	2180      	movs	r1, #128	@ 0x80
 8003222:	0289      	lsls	r1, r1, #10
 8003224:	430a      	orrs	r2, r1
 8003226:	615a      	str	r2, [r3, #20]
 8003228:	4b3a      	ldr	r3, [pc, #232]	@ (8003314 <HAL_SPI_MspInit+0x138>)
 800322a:	695a      	ldr	r2, [r3, #20]
 800322c:	2380      	movs	r3, #128	@ 0x80
 800322e:	029b      	lsls	r3, r3, #10
 8003230:	4013      	ands	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DW_SCK_Pin|DW_MISO_Pin|DW_MOSI_Pin;
 8003236:	0021      	movs	r1, r4
 8003238:	187b      	adds	r3, r7, r1
 800323a:	22e0      	movs	r2, #224	@ 0xe0
 800323c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323e:	187b      	adds	r3, r7, r1
 8003240:	2202      	movs	r2, #2
 8003242:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003244:	187b      	adds	r3, r7, r1
 8003246:	2200      	movs	r2, #0
 8003248:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800324a:	187b      	adds	r3, r7, r1
 800324c:	2203      	movs	r2, #3
 800324e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003250:	187b      	adds	r3, r7, r1
 8003252:	2200      	movs	r2, #0
 8003254:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003256:	187a      	adds	r2, r7, r1
 8003258:	2390      	movs	r3, #144	@ 0x90
 800325a:	05db      	lsls	r3, r3, #23
 800325c:	0011      	movs	r1, r2
 800325e:	0018      	movs	r0, r3
 8003260:	f001 f84c 	bl	80042fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003264:	e04f      	b.n	8003306 <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI2)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a2b      	ldr	r2, [pc, #172]	@ (8003318 <HAL_SPI_MspInit+0x13c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d14a      	bne.n	8003306 <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003270:	4b28      	ldr	r3, [pc, #160]	@ (8003314 <HAL_SPI_MspInit+0x138>)
 8003272:	69da      	ldr	r2, [r3, #28]
 8003274:	4b27      	ldr	r3, [pc, #156]	@ (8003314 <HAL_SPI_MspInit+0x138>)
 8003276:	2180      	movs	r1, #128	@ 0x80
 8003278:	01c9      	lsls	r1, r1, #7
 800327a:	430a      	orrs	r2, r1
 800327c:	61da      	str	r2, [r3, #28]
 800327e:	4b25      	ldr	r3, [pc, #148]	@ (8003314 <HAL_SPI_MspInit+0x138>)
 8003280:	69da      	ldr	r2, [r3, #28]
 8003282:	2380      	movs	r3, #128	@ 0x80
 8003284:	01db      	lsls	r3, r3, #7
 8003286:	4013      	ands	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
 800328a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800328c:	4b21      	ldr	r3, [pc, #132]	@ (8003314 <HAL_SPI_MspInit+0x138>)
 800328e:	695a      	ldr	r2, [r3, #20]
 8003290:	4b20      	ldr	r3, [pc, #128]	@ (8003314 <HAL_SPI_MspInit+0x138>)
 8003292:	2180      	movs	r1, #128	@ 0x80
 8003294:	02c9      	lsls	r1, r1, #11
 8003296:	430a      	orrs	r2, r1
 8003298:	615a      	str	r2, [r3, #20]
 800329a:	4b1e      	ldr	r3, [pc, #120]	@ (8003314 <HAL_SPI_MspInit+0x138>)
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	2380      	movs	r3, #128	@ 0x80
 80032a0:	02db      	lsls	r3, r3, #11
 80032a2:	4013      	ands	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032a8:	211c      	movs	r1, #28
 80032aa:	187b      	adds	r3, r7, r1
 80032ac:	2280      	movs	r2, #128	@ 0x80
 80032ae:	00d2      	lsls	r2, r2, #3
 80032b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b2:	000c      	movs	r4, r1
 80032b4:	193b      	adds	r3, r7, r4
 80032b6:	2202      	movs	r2, #2
 80032b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ba:	193b      	adds	r3, r7, r4
 80032bc:	2200      	movs	r2, #0
 80032be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032c0:	193b      	adds	r3, r7, r4
 80032c2:	2203      	movs	r2, #3
 80032c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032c6:	193b      	adds	r3, r7, r4
 80032c8:	2205      	movs	r2, #5
 80032ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032cc:	193b      	adds	r3, r7, r4
 80032ce:	4a13      	ldr	r2, [pc, #76]	@ (800331c <HAL_SPI_MspInit+0x140>)
 80032d0:	0019      	movs	r1, r3
 80032d2:	0010      	movs	r0, r2
 80032d4:	f001 f812 	bl	80042fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TFT_CS_Pin|GPIO_PIN_14|GPIO_PIN_15;
 80032d8:	0021      	movs	r1, r4
 80032da:	187b      	adds	r3, r7, r1
 80032dc:	22d0      	movs	r2, #208	@ 0xd0
 80032de:	0212      	lsls	r2, r2, #8
 80032e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e2:	187b      	adds	r3, r7, r1
 80032e4:	2202      	movs	r2, #2
 80032e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e8:	187b      	adds	r3, r7, r1
 80032ea:	2200      	movs	r2, #0
 80032ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032ee:	187b      	adds	r3, r7, r1
 80032f0:	2203      	movs	r2, #3
 80032f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80032f4:	187b      	adds	r3, r7, r1
 80032f6:	2200      	movs	r2, #0
 80032f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032fa:	187b      	adds	r3, r7, r1
 80032fc:	4a07      	ldr	r2, [pc, #28]	@ (800331c <HAL_SPI_MspInit+0x140>)
 80032fe:	0019      	movs	r1, r3
 8003300:	0010      	movs	r0, r2
 8003302:	f000 fffb 	bl	80042fc <HAL_GPIO_Init>
}
 8003306:	46c0      	nop			@ (mov r8, r8)
 8003308:	46bd      	mov	sp, r7
 800330a:	b00d      	add	sp, #52	@ 0x34
 800330c:	bd90      	pop	{r4, r7, pc}
 800330e:	46c0      	nop			@ (mov r8, r8)
 8003310:	40013000 	.word	0x40013000
 8003314:	40021000 	.word	0x40021000
 8003318:	40003800 	.word	0x40003800
 800331c:	48000400 	.word	0x48000400

08003320 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a0d      	ldr	r2, [pc, #52]	@ (8003364 <HAL_TIM_Base_MspInit+0x44>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d113      	bne.n	800335a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003332:	4b0d      	ldr	r3, [pc, #52]	@ (8003368 <HAL_TIM_Base_MspInit+0x48>)
 8003334:	69da      	ldr	r2, [r3, #28]
 8003336:	4b0c      	ldr	r3, [pc, #48]	@ (8003368 <HAL_TIM_Base_MspInit+0x48>)
 8003338:	2102      	movs	r1, #2
 800333a:	430a      	orrs	r2, r1
 800333c:	61da      	str	r2, [r3, #28]
 800333e:	4b0a      	ldr	r3, [pc, #40]	@ (8003368 <HAL_TIM_Base_MspInit+0x48>)
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	2202      	movs	r2, #2
 8003344:	4013      	ands	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800334a:	2200      	movs	r2, #0
 800334c:	2100      	movs	r1, #0
 800334e:	2010      	movs	r0, #16
 8003350:	f000 fd7c 	bl	8003e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003354:	2010      	movs	r0, #16
 8003356:	f000 fd8e 	bl	8003e76 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800335a:	46c0      	nop			@ (mov r8, r8)
 800335c:	46bd      	mov	sp, r7
 800335e:	b004      	add	sp, #16
 8003360:	bd80      	pop	{r7, pc}
 8003362:	46c0      	nop			@ (mov r8, r8)
 8003364:	40000400 	.word	0x40000400
 8003368:	40021000 	.word	0x40021000

0800336c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800336c:	b590      	push	{r4, r7, lr}
 800336e:	b08b      	sub	sp, #44	@ 0x2c
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003374:	2414      	movs	r4, #20
 8003376:	193b      	adds	r3, r7, r4
 8003378:	0018      	movs	r0, r3
 800337a:	2314      	movs	r3, #20
 800337c:	001a      	movs	r2, r3
 800337e:	2100      	movs	r1, #0
 8003380:	f00c fde8 	bl	800ff54 <memset>
  if(huart->Instance==USART1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a34      	ldr	r2, [pc, #208]	@ (800345c <HAL_UART_MspInit+0xf0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d161      	bne.n	8003452 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800338e:	4b34      	ldr	r3, [pc, #208]	@ (8003460 <HAL_UART_MspInit+0xf4>)
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	4b33      	ldr	r3, [pc, #204]	@ (8003460 <HAL_UART_MspInit+0xf4>)
 8003394:	2180      	movs	r1, #128	@ 0x80
 8003396:	01c9      	lsls	r1, r1, #7
 8003398:	430a      	orrs	r2, r1
 800339a:	619a      	str	r2, [r3, #24]
 800339c:	4b30      	ldr	r3, [pc, #192]	@ (8003460 <HAL_UART_MspInit+0xf4>)
 800339e:	699a      	ldr	r2, [r3, #24]
 80033a0:	2380      	movs	r3, #128	@ 0x80
 80033a2:	01db      	lsls	r3, r3, #7
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003460 <HAL_UART_MspInit+0xf4>)
 80033ac:	695a      	ldr	r2, [r3, #20]
 80033ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003460 <HAL_UART_MspInit+0xf4>)
 80033b0:	2180      	movs	r1, #128	@ 0x80
 80033b2:	0289      	lsls	r1, r1, #10
 80033b4:	430a      	orrs	r2, r1
 80033b6:	615a      	str	r2, [r3, #20]
 80033b8:	4b29      	ldr	r3, [pc, #164]	@ (8003460 <HAL_UART_MspInit+0xf4>)
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	2380      	movs	r3, #128	@ 0x80
 80033be:	029b      	lsls	r3, r3, #10
 80033c0:	4013      	ands	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80033c6:	193b      	adds	r3, r7, r4
 80033c8:	22c0      	movs	r2, #192	@ 0xc0
 80033ca:	00d2      	lsls	r2, r2, #3
 80033cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ce:	0021      	movs	r1, r4
 80033d0:	187b      	adds	r3, r7, r1
 80033d2:	2202      	movs	r2, #2
 80033d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d6:	187b      	adds	r3, r7, r1
 80033d8:	2200      	movs	r2, #0
 80033da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033dc:	187b      	adds	r3, r7, r1
 80033de:	2203      	movs	r2, #3
 80033e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80033e2:	187b      	adds	r3, r7, r1
 80033e4:	2201      	movs	r2, #1
 80033e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e8:	187a      	adds	r2, r7, r1
 80033ea:	2390      	movs	r3, #144	@ 0x90
 80033ec:	05db      	lsls	r3, r3, #23
 80033ee:	0011      	movs	r1, r2
 80033f0:	0018      	movs	r0, r3
 80033f2:	f000 ff83 	bl	80042fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80033f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003464 <HAL_UART_MspInit+0xf8>)
 80033f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003468 <HAL_UART_MspInit+0xfc>)
 80033fa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033fc:	4b19      	ldr	r3, [pc, #100]	@ (8003464 <HAL_UART_MspInit+0xf8>)
 80033fe:	2200      	movs	r2, #0
 8003400:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003402:	4b18      	ldr	r3, [pc, #96]	@ (8003464 <HAL_UART_MspInit+0xf8>)
 8003404:	2200      	movs	r2, #0
 8003406:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003408:	4b16      	ldr	r3, [pc, #88]	@ (8003464 <HAL_UART_MspInit+0xf8>)
 800340a:	2280      	movs	r2, #128	@ 0x80
 800340c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800340e:	4b15      	ldr	r3, [pc, #84]	@ (8003464 <HAL_UART_MspInit+0xf8>)
 8003410:	2200      	movs	r2, #0
 8003412:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003414:	4b13      	ldr	r3, [pc, #76]	@ (8003464 <HAL_UART_MspInit+0xf8>)
 8003416:	2200      	movs	r2, #0
 8003418:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800341a:	4b12      	ldr	r3, [pc, #72]	@ (8003464 <HAL_UART_MspInit+0xf8>)
 800341c:	2220      	movs	r2, #32
 800341e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003420:	4b10      	ldr	r3, [pc, #64]	@ (8003464 <HAL_UART_MspInit+0xf8>)
 8003422:	2200      	movs	r2, #0
 8003424:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003426:	4b0f      	ldr	r3, [pc, #60]	@ (8003464 <HAL_UART_MspInit+0xf8>)
 8003428:	0018      	movs	r0, r3
 800342a:	f000 fd51 	bl	8003ed0 <HAL_DMA_Init>
 800342e:	1e03      	subs	r3, r0, #0
 8003430:	d001      	beq.n	8003436 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8003432:	f7ff fe5b 	bl	80030ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a0a      	ldr	r2, [pc, #40]	@ (8003464 <HAL_UART_MspInit+0xf8>)
 800343a:	675a      	str	r2, [r3, #116]	@ 0x74
 800343c:	4b09      	ldr	r3, [pc, #36]	@ (8003464 <HAL_UART_MspInit+0xf8>)
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003442:	2200      	movs	r2, #0
 8003444:	2100      	movs	r1, #0
 8003446:	201b      	movs	r0, #27
 8003448:	f000 fd00 	bl	8003e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800344c:	201b      	movs	r0, #27
 800344e:	f000 fd12 	bl	8003e76 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8003452:	46c0      	nop			@ (mov r8, r8)
 8003454:	46bd      	mov	sp, r7
 8003456:	b00b      	add	sp, #44	@ 0x2c
 8003458:	bd90      	pop	{r4, r7, pc}
 800345a:	46c0      	nop			@ (mov r8, r8)
 800345c:	40013800 	.word	0x40013800
 8003460:	40021000 	.word	0x40021000
 8003464:	2000062c 	.word	0x2000062c
 8003468:	40020030 	.word	0x40020030

0800346c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003470:	46c0      	nop			@ (mov r8, r8)
 8003472:	e7fd      	b.n	8003470 <NMI_Handler+0x4>

08003474 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003478:	46c0      	nop			@ (mov r8, r8)
 800347a:	e7fd      	b.n	8003478 <HardFault_Handler+0x4>

0800347c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003480:	46c0      	nop			@ (mov r8, r8)
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800348a:	46c0      	nop			@ (mov r8, r8)
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003494:	f000 f97e 	bl	8003794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003498:	46c0      	nop			@ (mov r8, r8)
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupts.
  */
void RCC_CRS_IRQHandler(void)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 80034a2:	46c0      	nop			@ (mov r8, r8)
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_RESET_Pin);
 80034ac:	2004      	movs	r0, #4
 80034ae:	f001 f8d7 	bl	8004660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80034b2:	46c0      	nop			@ (mov r8, r8)
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQn_Pin);
 80034bc:	2020      	movs	r0, #32
 80034be:	f001 f8cf 	bl	8004660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80034c2:	46c0      	nop			@ (mov r8, r8)
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80034cc:	4b03      	ldr	r3, [pc, #12]	@ (80034dc <DMA1_Channel2_3_IRQHandler+0x14>)
 80034ce:	0018      	movs	r0, r3
 80034d0:	f000 fe29 	bl	8004126 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80034d4:	46c0      	nop			@ (mov r8, r8)
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	46c0      	nop			@ (mov r8, r8)
 80034dc:	2000062c 	.word	0x2000062c

080034e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80034e4:	4b03      	ldr	r3, [pc, #12]	@ (80034f4 <TIM3_IRQHandler+0x14>)
 80034e6:	0018      	movs	r0, r3
 80034e8:	f004 fc84 	bl	8007df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80034ec:	46c0      	nop			@ (mov r8, r8)
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	46c0      	nop			@ (mov r8, r8)
 80034f4:	2000052c 	.word	0x2000052c

080034f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  //   __HAL_UART_CLEAR_IDLEFLAG(&huart1);
  //   UART1_IdleCallback();
  // }

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80034fc:	4b03      	ldr	r3, [pc, #12]	@ (800350c <USART1_IRQHandler+0x14>)
 80034fe:	0018      	movs	r0, r3
 8003500:	f005 f85e 	bl	80085c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003504:	46c0      	nop			@ (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	46c0      	nop			@ (mov r8, r8)
 800350c:	20000574 	.word	0x20000574

08003510 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003514:	4b03      	ldr	r3, [pc, #12]	@ (8003524 <USB_IRQHandler+0x14>)
 8003516:	0018      	movs	r0, r3
 8003518:	f001 f9d8 	bl	80048cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800351c:	46c0      	nop			@ (mov r8, r8)
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	20001748 	.word	0x20001748

08003528 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  return 1;
 800352c:	2301      	movs	r3, #1
}
 800352e:	0018      	movs	r0, r3
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <_kill>:

int _kill(int pid, int sig)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800353e:	f00c fd63 	bl	8010008 <__errno>
 8003542:	0003      	movs	r3, r0
 8003544:	2216      	movs	r2, #22
 8003546:	601a      	str	r2, [r3, #0]
  return -1;
 8003548:	2301      	movs	r3, #1
 800354a:	425b      	negs	r3, r3
}
 800354c:	0018      	movs	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	b002      	add	sp, #8
 8003552:	bd80      	pop	{r7, pc}

08003554 <_exit>:

void _exit (int status)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800355c:	2301      	movs	r3, #1
 800355e:	425a      	negs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	0011      	movs	r1, r2
 8003564:	0018      	movs	r0, r3
 8003566:	f7ff ffe5 	bl	8003534 <_kill>
  while (1) {}    /* Make sure we hang here */
 800356a:	46c0      	nop			@ (mov r8, r8)
 800356c:	e7fd      	b.n	800356a <_exit+0x16>

0800356e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b086      	sub	sp, #24
 8003572:	af00      	add	r7, sp, #0
 8003574:	60f8      	str	r0, [r7, #12]
 8003576:	60b9      	str	r1, [r7, #8]
 8003578:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]
 800357e:	e00a      	b.n	8003596 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003580:	e000      	b.n	8003584 <_read+0x16>
 8003582:	bf00      	nop
 8003584:	0001      	movs	r1, r0
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	60ba      	str	r2, [r7, #8]
 800358c:	b2ca      	uxtb	r2, r1
 800358e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	3301      	adds	r3, #1
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	429a      	cmp	r2, r3
 800359c:	dbf0      	blt.n	8003580 <_read+0x12>
  }

  return len;
 800359e:	687b      	ldr	r3, [r7, #4]
}
 80035a0:	0018      	movs	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	b006      	add	sp, #24
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	e009      	b.n	80035ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	60ba      	str	r2, [r7, #8]
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	0018      	movs	r0, r3
 80035c4:	e000      	b.n	80035c8 <_write+0x20>
 80035c6:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	3301      	adds	r3, #1
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	dbf1      	blt.n	80035ba <_write+0x12>
  }
  return len;
 80035d6:	687b      	ldr	r3, [r7, #4]
}
 80035d8:	0018      	movs	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	b006      	add	sp, #24
 80035de:	bd80      	pop	{r7, pc}

080035e0 <_close>:

int _close(int file)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035e8:	2301      	movs	r3, #1
 80035ea:	425b      	negs	r3, r3
}
 80035ec:	0018      	movs	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b002      	add	sp, #8
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2280      	movs	r2, #128	@ 0x80
 8003602:	0192      	lsls	r2, r2, #6
 8003604:	605a      	str	r2, [r3, #4]
  return 0;
 8003606:	2300      	movs	r3, #0
}
 8003608:	0018      	movs	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	b002      	add	sp, #8
 800360e:	bd80      	pop	{r7, pc}

08003610 <_isatty>:

int _isatty(int file)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003618:	2301      	movs	r3, #1
}
 800361a:	0018      	movs	r0, r3
 800361c:	46bd      	mov	sp, r7
 800361e:	b002      	add	sp, #8
 8003620:	bd80      	pop	{r7, pc}

08003622 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b084      	sub	sp, #16
 8003626:	af00      	add	r7, sp, #0
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800362e:	2300      	movs	r3, #0
}
 8003630:	0018      	movs	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	b004      	add	sp, #16
 8003636:	bd80      	pop	{r7, pc}

08003638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003640:	4a14      	ldr	r2, [pc, #80]	@ (8003694 <_sbrk+0x5c>)
 8003642:	4b15      	ldr	r3, [pc, #84]	@ (8003698 <_sbrk+0x60>)
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800364c:	4b13      	ldr	r3, [pc, #76]	@ (800369c <_sbrk+0x64>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d102      	bne.n	800365a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003654:	4b11      	ldr	r3, [pc, #68]	@ (800369c <_sbrk+0x64>)
 8003656:	4a12      	ldr	r2, [pc, #72]	@ (80036a0 <_sbrk+0x68>)
 8003658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800365a:	4b10      	ldr	r3, [pc, #64]	@ (800369c <_sbrk+0x64>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	18d3      	adds	r3, r2, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	429a      	cmp	r2, r3
 8003666:	d207      	bcs.n	8003678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003668:	f00c fcce 	bl	8010008 <__errno>
 800366c:	0003      	movs	r3, r0
 800366e:	220c      	movs	r2, #12
 8003670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003672:	2301      	movs	r3, #1
 8003674:	425b      	negs	r3, r3
 8003676:	e009      	b.n	800368c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003678:	4b08      	ldr	r3, [pc, #32]	@ (800369c <_sbrk+0x64>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800367e:	4b07      	ldr	r3, [pc, #28]	@ (800369c <_sbrk+0x64>)
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	18d2      	adds	r2, r2, r3
 8003686:	4b05      	ldr	r3, [pc, #20]	@ (800369c <_sbrk+0x64>)
 8003688:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800368a:	68fb      	ldr	r3, [r7, #12]
}
 800368c:	0018      	movs	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	b006      	add	sp, #24
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20004000 	.word	0x20004000
 8003698:	00000400 	.word	0x00000400
 800369c:	20000a78 	.word	0x20000a78
 80036a0:	20001dd0 	.word	0x20001dd0

080036a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80036a8:	46c0      	nop			@ (mov r8, r8)
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80036b0:	480d      	ldr	r0, [pc, #52]	@ (80036e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80036b2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80036b4:	f7ff fff6 	bl	80036a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036b8:	480c      	ldr	r0, [pc, #48]	@ (80036ec <LoopForever+0x6>)
  ldr r1, =_edata
 80036ba:	490d      	ldr	r1, [pc, #52]	@ (80036f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80036bc:	4a0d      	ldr	r2, [pc, #52]	@ (80036f4 <LoopForever+0xe>)
  movs r3, #0
 80036be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036c0:	e002      	b.n	80036c8 <LoopCopyDataInit>

080036c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036c6:	3304      	adds	r3, #4

080036c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036cc:	d3f9      	bcc.n	80036c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036ce:	4a0a      	ldr	r2, [pc, #40]	@ (80036f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80036d0:	4c0a      	ldr	r4, [pc, #40]	@ (80036fc <LoopForever+0x16>)
  movs r3, #0
 80036d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036d4:	e001      	b.n	80036da <LoopFillZerobss>

080036d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036d8:	3204      	adds	r2, #4

080036da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036dc:	d3fb      	bcc.n	80036d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80036de:	f00c fc99 	bl	8010014 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036e2:	f7ff f999 	bl	8002a18 <main>

080036e6 <LoopForever>:

LoopForever:
    b LoopForever
 80036e6:	e7fe      	b.n	80036e6 <LoopForever>
  ldr   r0, =_estack
 80036e8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80036ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036f0:	200003a8 	.word	0x200003a8
  ldr r2, =_sidata
 80036f4:	08012854 	.word	0x08012854
  ldr r2, =_sbss
 80036f8:	200003a8 	.word	0x200003a8
  ldr r4, =_ebss
 80036fc:	20001dcc 	.word	0x20001dcc

08003700 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003700:	e7fe      	b.n	8003700 <ADC1_COMP_IRQHandler>
	...

08003704 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003708:	4b07      	ldr	r3, [pc, #28]	@ (8003728 <HAL_Init+0x24>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4b06      	ldr	r3, [pc, #24]	@ (8003728 <HAL_Init+0x24>)
 800370e:	2110      	movs	r1, #16
 8003710:	430a      	orrs	r2, r1
 8003712:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003714:	2003      	movs	r0, #3
 8003716:	f000 f809 	bl	800372c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800371a:	f7ff fced 	bl	80030f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	0018      	movs	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	46c0      	nop			@ (mov r8, r8)
 8003728:	40022000 	.word	0x40022000

0800372c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800372c:	b590      	push	{r4, r7, lr}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003734:	4b14      	ldr	r3, [pc, #80]	@ (8003788 <HAL_InitTick+0x5c>)
 8003736:	681c      	ldr	r4, [r3, #0]
 8003738:	4b14      	ldr	r3, [pc, #80]	@ (800378c <HAL_InitTick+0x60>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	0019      	movs	r1, r3
 800373e:	23fa      	movs	r3, #250	@ 0xfa
 8003740:	0098      	lsls	r0, r3, #2
 8003742:	f7fc fcfd 	bl	8000140 <__udivsi3>
 8003746:	0003      	movs	r3, r0
 8003748:	0019      	movs	r1, r3
 800374a:	0020      	movs	r0, r4
 800374c:	f7fc fcf8 	bl	8000140 <__udivsi3>
 8003750:	0003      	movs	r3, r0
 8003752:	0018      	movs	r0, r3
 8003754:	f000 fbaf 	bl	8003eb6 <HAL_SYSTICK_Config>
 8003758:	1e03      	subs	r3, r0, #0
 800375a:	d001      	beq.n	8003760 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e00f      	b.n	8003780 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b03      	cmp	r3, #3
 8003764:	d80b      	bhi.n	800377e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	2301      	movs	r3, #1
 800376a:	425b      	negs	r3, r3
 800376c:	2200      	movs	r2, #0
 800376e:	0018      	movs	r0, r3
 8003770:	f000 fb6c 	bl	8003e4c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003774:	4b06      	ldr	r3, [pc, #24]	@ (8003790 <HAL_InitTick+0x64>)
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	e000      	b.n	8003780 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
}
 8003780:	0018      	movs	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	b003      	add	sp, #12
 8003786:	bd90      	pop	{r4, r7, pc}
 8003788:	20000060 	.word	0x20000060
 800378c:	20000068 	.word	0x20000068
 8003790:	20000064 	.word	0x20000064

08003794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003798:	4b05      	ldr	r3, [pc, #20]	@ (80037b0 <HAL_IncTick+0x1c>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	001a      	movs	r2, r3
 800379e:	4b05      	ldr	r3, [pc, #20]	@ (80037b4 <HAL_IncTick+0x20>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	18d2      	adds	r2, r2, r3
 80037a4:	4b03      	ldr	r3, [pc, #12]	@ (80037b4 <HAL_IncTick+0x20>)
 80037a6:	601a      	str	r2, [r3, #0]
}
 80037a8:	46c0      	nop			@ (mov r8, r8)
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	46c0      	nop			@ (mov r8, r8)
 80037b0:	20000068 	.word	0x20000068
 80037b4:	20000a7c 	.word	0x20000a7c

080037b8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  return uwTick;
 80037bc:	4b02      	ldr	r3, [pc, #8]	@ (80037c8 <HAL_GetTick+0x10>)
 80037be:	681b      	ldr	r3, [r3, #0]
}
 80037c0:	0018      	movs	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	20000a7c 	.word	0x20000a7c

080037cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037d4:	f7ff fff0 	bl	80037b8 <HAL_GetTick>
 80037d8:	0003      	movs	r3, r0
 80037da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	3301      	adds	r3, #1
 80037e4:	d005      	beq.n	80037f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003810 <HAL_Delay+0x44>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	001a      	movs	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	189b      	adds	r3, r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80037f2:	46c0      	nop			@ (mov r8, r8)
 80037f4:	f7ff ffe0 	bl	80037b8 <HAL_GetTick>
 80037f8:	0002      	movs	r2, r0
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	429a      	cmp	r2, r3
 8003802:	d8f7      	bhi.n	80037f4 <HAL_Delay+0x28>
  {
  }
}
 8003804:	46c0      	nop			@ (mov r8, r8)
 8003806:	46c0      	nop			@ (mov r8, r8)
 8003808:	46bd      	mov	sp, r7
 800380a:	b004      	add	sp, #16
 800380c:	bd80      	pop	{r7, pc}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	20000068 	.word	0x20000068

08003814 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800381c:	230f      	movs	r3, #15
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	2200      	movs	r2, #0
 8003822:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e125      	b.n	8003a7e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2234      	movs	r2, #52	@ 0x34
 8003844:	2100      	movs	r1, #0
 8003846:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	0018      	movs	r0, r3
 800384c:	f7ff fc80 	bl	8003150 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003854:	2210      	movs	r2, #16
 8003856:	4013      	ands	r3, r2
 8003858:	d000      	beq.n	800385c <HAL_ADC_Init+0x48>
 800385a:	e103      	b.n	8003a64 <HAL_ADC_Init+0x250>
 800385c:	230f      	movs	r3, #15
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d000      	beq.n	8003868 <HAL_ADC_Init+0x54>
 8003866:	e0fd      	b.n	8003a64 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2204      	movs	r2, #4
 8003870:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003872:	d000      	beq.n	8003876 <HAL_ADC_Init+0x62>
 8003874:	e0f6      	b.n	8003a64 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800387a:	4a83      	ldr	r2, [pc, #524]	@ (8003a88 <HAL_ADC_Init+0x274>)
 800387c:	4013      	ands	r3, r2
 800387e:	2202      	movs	r2, #2
 8003880:	431a      	orrs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2203      	movs	r2, #3
 800388e:	4013      	ands	r3, r2
 8003890:	2b01      	cmp	r3, #1
 8003892:	d112      	bne.n	80038ba <HAL_ADC_Init+0xa6>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2201      	movs	r2, #1
 800389c:	4013      	ands	r3, r2
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d009      	beq.n	80038b6 <HAL_ADC_Init+0xa2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	2380      	movs	r3, #128	@ 0x80
 80038aa:	021b      	lsls	r3, r3, #8
 80038ac:	401a      	ands	r2, r3
 80038ae:	2380      	movs	r3, #128	@ 0x80
 80038b0:	021b      	lsls	r3, r3, #8
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d101      	bne.n	80038ba <HAL_ADC_Init+0xa6>
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <HAL_ADC_Init+0xa8>
 80038ba:	2300      	movs	r3, #0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d116      	bne.n	80038ee <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	2218      	movs	r2, #24
 80038c8:	4393      	bics	r3, r2
 80038ca:	0019      	movs	r1, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	0899      	lsrs	r1, r3, #2
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4964      	ldr	r1, [pc, #400]	@ (8003a8c <HAL_ADC_Init+0x278>)
 80038fa:	400a      	ands	r2, r1
 80038fc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	7e1b      	ldrb	r3, [r3, #24]
 8003902:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	7e5b      	ldrb	r3, [r3, #25]
 8003908:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800390a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	7e9b      	ldrb	r3, [r3, #26]
 8003910:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003912:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003918:	2b01      	cmp	r3, #1
 800391a:	d002      	beq.n	8003922 <HAL_ADC_Init+0x10e>
 800391c:	2380      	movs	r3, #128	@ 0x80
 800391e:	015b      	lsls	r3, r3, #5
 8003920:	e000      	b.n	8003924 <HAL_ADC_Init+0x110>
 8003922:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003924:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800392a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	2b02      	cmp	r3, #2
 8003932:	d101      	bne.n	8003938 <HAL_ADC_Init+0x124>
 8003934:	2304      	movs	r3, #4
 8003936:	e000      	b.n	800393a <HAL_ADC_Init+0x126>
 8003938:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800393a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2124      	movs	r1, #36	@ 0x24
 8003940:	5c5b      	ldrb	r3, [r3, r1]
 8003942:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003944:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	4313      	orrs	r3, r2
 800394a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	7edb      	ldrb	r3, [r3, #27]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d115      	bne.n	8003980 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	7e9b      	ldrb	r3, [r3, #26]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d105      	bne.n	8003968 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2280      	movs	r2, #128	@ 0x80
 8003960:	0252      	lsls	r2, r2, #9
 8003962:	4313      	orrs	r3, r2
 8003964:	60bb      	str	r3, [r7, #8]
 8003966:	e00b      	b.n	8003980 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396c:	2220      	movs	r2, #32
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003978:	2201      	movs	r2, #1
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69da      	ldr	r2, [r3, #28]
 8003984:	23c2      	movs	r3, #194	@ 0xc2
 8003986:	33ff      	adds	r3, #255	@ 0xff
 8003988:	429a      	cmp	r2, r3
 800398a:	d007      	beq.n	800399c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003994:	4313      	orrs	r3, r2
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	4313      	orrs	r3, r2
 800399a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68d9      	ldr	r1, [r3, #12]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b0:	2380      	movs	r3, #128	@ 0x80
 80039b2:	055b      	lsls	r3, r3, #21
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d01b      	beq.n	80039f0 <HAL_ADC_Init+0x1dc>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d017      	beq.n	80039f0 <HAL_ADC_Init+0x1dc>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d013      	beq.n	80039f0 <HAL_ADC_Init+0x1dc>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d00f      	beq.n	80039f0 <HAL_ADC_Init+0x1dc>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d00b      	beq.n	80039f0 <HAL_ADC_Init+0x1dc>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039dc:	2b05      	cmp	r3, #5
 80039de:	d007      	beq.n	80039f0 <HAL_ADC_Init+0x1dc>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e4:	2b06      	cmp	r3, #6
 80039e6:	d003      	beq.n	80039f0 <HAL_ADC_Init+0x1dc>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ec:	2b07      	cmp	r3, #7
 80039ee:	d112      	bne.n	8003a16 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695a      	ldr	r2, [r3, #20]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2107      	movs	r1, #7
 80039fc:	438a      	bics	r2, r1
 80039fe:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6959      	ldr	r1, [r3, #20]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0a:	2207      	movs	r2, #7
 8003a0c:	401a      	ands	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4a1c      	ldr	r2, [pc, #112]	@ (8003a90 <HAL_ADC_Init+0x27c>)
 8003a1e:	4013      	ands	r3, r2
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d10b      	bne.n	8003a3e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a30:	2203      	movs	r2, #3
 8003a32:	4393      	bics	r3, r2
 8003a34:	2201      	movs	r2, #1
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003a3c:	e01c      	b.n	8003a78 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a42:	2212      	movs	r2, #18
 8003a44:	4393      	bics	r3, r2
 8003a46:	2210      	movs	r2, #16
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a52:	2201      	movs	r2, #1
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003a5a:	230f      	movs	r3, #15
 8003a5c:	18fb      	adds	r3, r7, r3
 8003a5e:	2201      	movs	r2, #1
 8003a60:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003a62:	e009      	b.n	8003a78 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a68:	2210      	movs	r2, #16
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003a70:	230f      	movs	r3, #15
 8003a72:	18fb      	adds	r3, r7, r3
 8003a74:	2201      	movs	r2, #1
 8003a76:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003a78:	230f      	movs	r3, #15
 8003a7a:	18fb      	adds	r3, r7, r3
 8003a7c:	781b      	ldrb	r3, [r3, #0]
}
 8003a7e:	0018      	movs	r0, r3
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b004      	add	sp, #16
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	46c0      	nop			@ (mov r8, r8)
 8003a88:	fffffefd 	.word	0xfffffefd
 8003a8c:	fffe0219 	.word	0xfffe0219
 8003a90:	833fffe7 	.word	0x833fffe7

08003a94 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a9e:	230f      	movs	r3, #15
 8003aa0:	18fb      	adds	r3, r7, r3
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aae:	2380      	movs	r3, #128	@ 0x80
 8003ab0:	055b      	lsls	r3, r3, #21
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d011      	beq.n	8003ada <HAL_ADC_ConfigChannel+0x46>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d00d      	beq.n	8003ada <HAL_ADC_ConfigChannel+0x46>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d009      	beq.n	8003ada <HAL_ADC_ConfigChannel+0x46>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	d005      	beq.n	8003ada <HAL_ADC_ConfigChannel+0x46>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d001      	beq.n	8003ada <HAL_ADC_ConfigChannel+0x46>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2234      	movs	r2, #52	@ 0x34
 8003ade:	5c9b      	ldrb	r3, [r3, r2]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x54>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e0d0      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x1f6>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2234      	movs	r2, #52	@ 0x34
 8003aec:	2101      	movs	r1, #1
 8003aee:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2204      	movs	r2, #4
 8003af8:	4013      	ands	r3, r2
 8003afa:	d000      	beq.n	8003afe <HAL_ADC_ConfigChannel+0x6a>
 8003afc:	e0b4      	b.n	8003c68 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	4a64      	ldr	r2, [pc, #400]	@ (8003c94 <HAL_ADC_ConfigChannel+0x200>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d100      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x76>
 8003b08:	e082      	b.n	8003c10 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2201      	movs	r2, #1
 8003b16:	409a      	lsls	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b24:	2380      	movs	r3, #128	@ 0x80
 8003b26:	055b      	lsls	r3, r3, #21
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d037      	beq.n	8003b9c <HAL_ADC_ConfigChannel+0x108>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d033      	beq.n	8003b9c <HAL_ADC_ConfigChannel+0x108>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d02f      	beq.n	8003b9c <HAL_ADC_ConfigChannel+0x108>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d02b      	beq.n	8003b9c <HAL_ADC_ConfigChannel+0x108>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d027      	beq.n	8003b9c <HAL_ADC_ConfigChannel+0x108>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b50:	2b05      	cmp	r3, #5
 8003b52:	d023      	beq.n	8003b9c <HAL_ADC_ConfigChannel+0x108>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b58:	2b06      	cmp	r3, #6
 8003b5a:	d01f      	beq.n	8003b9c <HAL_ADC_ConfigChannel+0x108>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b60:	2b07      	cmp	r3, #7
 8003b62:	d01b      	beq.n	8003b9c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	2107      	movs	r1, #7
 8003b70:	400b      	ands	r3, r1
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d012      	beq.n	8003b9c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695a      	ldr	r2, [r3, #20]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2107      	movs	r1, #7
 8003b82:	438a      	bics	r2, r1
 8003b84:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6959      	ldr	r1, [r3, #20]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2207      	movs	r2, #7
 8003b92:	401a      	ands	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b10      	cmp	r3, #16
 8003ba2:	d007      	beq.n	8003bb4 <HAL_ADC_ConfigChannel+0x120>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b11      	cmp	r3, #17
 8003baa:	d003      	beq.n	8003bb4 <HAL_ADC_ConfigChannel+0x120>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b12      	cmp	r3, #18
 8003bb2:	d163      	bne.n	8003c7c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003bb4:	4b38      	ldr	r3, [pc, #224]	@ (8003c98 <HAL_ADC_ConfigChannel+0x204>)
 8003bb6:	6819      	ldr	r1, [r3, #0]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b10      	cmp	r3, #16
 8003bbe:	d009      	beq.n	8003bd4 <HAL_ADC_ConfigChannel+0x140>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b11      	cmp	r3, #17
 8003bc6:	d102      	bne.n	8003bce <HAL_ADC_ConfigChannel+0x13a>
 8003bc8:	2380      	movs	r3, #128	@ 0x80
 8003bca:	03db      	lsls	r3, r3, #15
 8003bcc:	e004      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0x144>
 8003bce:	2380      	movs	r3, #128	@ 0x80
 8003bd0:	045b      	lsls	r3, r3, #17
 8003bd2:	e001      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0x144>
 8003bd4:	2380      	movs	r3, #128	@ 0x80
 8003bd6:	041b      	lsls	r3, r3, #16
 8003bd8:	4a2f      	ldr	r2, [pc, #188]	@ (8003c98 <HAL_ADC_ConfigChannel+0x204>)
 8003bda:	430b      	orrs	r3, r1
 8003bdc:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b10      	cmp	r3, #16
 8003be4:	d14a      	bne.n	8003c7c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003be6:	4b2d      	ldr	r3, [pc, #180]	@ (8003c9c <HAL_ADC_ConfigChannel+0x208>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	492d      	ldr	r1, [pc, #180]	@ (8003ca0 <HAL_ADC_ConfigChannel+0x20c>)
 8003bec:	0018      	movs	r0, r3
 8003bee:	f7fc faa7 	bl	8000140 <__udivsi3>
 8003bf2:	0003      	movs	r3, r0
 8003bf4:	001a      	movs	r2, r3
 8003bf6:	0013      	movs	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	189b      	adds	r3, r3, r2
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c00:	e002      	b.n	8003c08 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	3b01      	subs	r3, #1
 8003c06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f9      	bne.n	8003c02 <HAL_ADC_ConfigChannel+0x16e>
 8003c0e:	e035      	b.n	8003c7c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	4099      	lsls	r1, r3
 8003c1e:	000b      	movs	r3, r1
 8003c20:	43d9      	mvns	r1, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	400a      	ands	r2, r1
 8003c28:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b10      	cmp	r3, #16
 8003c30:	d007      	beq.n	8003c42 <HAL_ADC_ConfigChannel+0x1ae>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b11      	cmp	r3, #17
 8003c38:	d003      	beq.n	8003c42 <HAL_ADC_ConfigChannel+0x1ae>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b12      	cmp	r3, #18
 8003c40:	d11c      	bne.n	8003c7c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003c42:	4b15      	ldr	r3, [pc, #84]	@ (8003c98 <HAL_ADC_ConfigChannel+0x204>)
 8003c44:	6819      	ldr	r1, [r3, #0]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b10      	cmp	r3, #16
 8003c4c:	d007      	beq.n	8003c5e <HAL_ADC_ConfigChannel+0x1ca>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b11      	cmp	r3, #17
 8003c54:	d101      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x1c6>
 8003c56:	4b13      	ldr	r3, [pc, #76]	@ (8003ca4 <HAL_ADC_ConfigChannel+0x210>)
 8003c58:	e002      	b.n	8003c60 <HAL_ADC_ConfigChannel+0x1cc>
 8003c5a:	4b13      	ldr	r3, [pc, #76]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x214>)
 8003c5c:	e000      	b.n	8003c60 <HAL_ADC_ConfigChannel+0x1cc>
 8003c5e:	4b13      	ldr	r3, [pc, #76]	@ (8003cac <HAL_ADC_ConfigChannel+0x218>)
 8003c60:	4a0d      	ldr	r2, [pc, #52]	@ (8003c98 <HAL_ADC_ConfigChannel+0x204>)
 8003c62:	400b      	ands	r3, r1
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e009      	b.n	8003c7c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003c74:	230f      	movs	r3, #15
 8003c76:	18fb      	adds	r3, r7, r3
 8003c78:	2201      	movs	r2, #1
 8003c7a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2234      	movs	r2, #52	@ 0x34
 8003c80:	2100      	movs	r1, #0
 8003c82:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003c84:	230f      	movs	r3, #15
 8003c86:	18fb      	adds	r3, r7, r3
 8003c88:	781b      	ldrb	r3, [r3, #0]
}
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b004      	add	sp, #16
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	46c0      	nop			@ (mov r8, r8)
 8003c94:	00001001 	.word	0x00001001
 8003c98:	40012708 	.word	0x40012708
 8003c9c:	20000060 	.word	0x20000060
 8003ca0:	000f4240 	.word	0x000f4240
 8003ca4:	ffbfffff 	.word	0xffbfffff
 8003ca8:	feffffff 	.word	0xfeffffff
 8003cac:	ff7fffff 	.word	0xff7fffff

08003cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	0002      	movs	r2, r0
 8003cb8:	1dfb      	adds	r3, r7, #7
 8003cba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003cbc:	1dfb      	adds	r3, r7, #7
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b7f      	cmp	r3, #127	@ 0x7f
 8003cc2:	d809      	bhi.n	8003cd8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cc4:	1dfb      	adds	r3, r7, #7
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	001a      	movs	r2, r3
 8003cca:	231f      	movs	r3, #31
 8003ccc:	401a      	ands	r2, r3
 8003cce:	4b04      	ldr	r3, [pc, #16]	@ (8003ce0 <__NVIC_EnableIRQ+0x30>)
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	4091      	lsls	r1, r2
 8003cd4:	000a      	movs	r2, r1
 8003cd6:	601a      	str	r2, [r3, #0]
  }
}
 8003cd8:	46c0      	nop			@ (mov r8, r8)
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	b002      	add	sp, #8
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	e000e100 	.word	0xe000e100

08003ce4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	0002      	movs	r2, r0
 8003cec:	1dfb      	adds	r3, r7, #7
 8003cee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003cf0:	1dfb      	adds	r3, r7, #7
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b7f      	cmp	r3, #127	@ 0x7f
 8003cf6:	d810      	bhi.n	8003d1a <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cf8:	1dfb      	adds	r3, r7, #7
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	001a      	movs	r2, r3
 8003cfe:	231f      	movs	r3, #31
 8003d00:	4013      	ands	r3, r2
 8003d02:	4908      	ldr	r1, [pc, #32]	@ (8003d24 <__NVIC_DisableIRQ+0x40>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	409a      	lsls	r2, r3
 8003d08:	0013      	movs	r3, r2
 8003d0a:	2280      	movs	r2, #128	@ 0x80
 8003d0c:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003d0e:	f3bf 8f4f 	dsb	sy
}
 8003d12:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8003d14:	f3bf 8f6f 	isb	sy
}
 8003d18:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b002      	add	sp, #8
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	46c0      	nop			@ (mov r8, r8)
 8003d24:	e000e100 	.word	0xe000e100

08003d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d28:	b590      	push	{r4, r7, lr}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	0002      	movs	r2, r0
 8003d30:	6039      	str	r1, [r7, #0]
 8003d32:	1dfb      	adds	r3, r7, #7
 8003d34:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003d36:	1dfb      	adds	r3, r7, #7
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d3c:	d828      	bhi.n	8003d90 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d3e:	4a2f      	ldr	r2, [pc, #188]	@ (8003dfc <__NVIC_SetPriority+0xd4>)
 8003d40:	1dfb      	adds	r3, r7, #7
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	b25b      	sxtb	r3, r3
 8003d46:	089b      	lsrs	r3, r3, #2
 8003d48:	33c0      	adds	r3, #192	@ 0xc0
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	589b      	ldr	r3, [r3, r2]
 8003d4e:	1dfa      	adds	r2, r7, #7
 8003d50:	7812      	ldrb	r2, [r2, #0]
 8003d52:	0011      	movs	r1, r2
 8003d54:	2203      	movs	r2, #3
 8003d56:	400a      	ands	r2, r1
 8003d58:	00d2      	lsls	r2, r2, #3
 8003d5a:	21ff      	movs	r1, #255	@ 0xff
 8003d5c:	4091      	lsls	r1, r2
 8003d5e:	000a      	movs	r2, r1
 8003d60:	43d2      	mvns	r2, r2
 8003d62:	401a      	ands	r2, r3
 8003d64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	019b      	lsls	r3, r3, #6
 8003d6a:	22ff      	movs	r2, #255	@ 0xff
 8003d6c:	401a      	ands	r2, r3
 8003d6e:	1dfb      	adds	r3, r7, #7
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	0018      	movs	r0, r3
 8003d74:	2303      	movs	r3, #3
 8003d76:	4003      	ands	r3, r0
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d7c:	481f      	ldr	r0, [pc, #124]	@ (8003dfc <__NVIC_SetPriority+0xd4>)
 8003d7e:	1dfb      	adds	r3, r7, #7
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	b25b      	sxtb	r3, r3
 8003d84:	089b      	lsrs	r3, r3, #2
 8003d86:	430a      	orrs	r2, r1
 8003d88:	33c0      	adds	r3, #192	@ 0xc0
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003d8e:	e031      	b.n	8003df4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d90:	4a1b      	ldr	r2, [pc, #108]	@ (8003e00 <__NVIC_SetPriority+0xd8>)
 8003d92:	1dfb      	adds	r3, r7, #7
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	0019      	movs	r1, r3
 8003d98:	230f      	movs	r3, #15
 8003d9a:	400b      	ands	r3, r1
 8003d9c:	3b08      	subs	r3, #8
 8003d9e:	089b      	lsrs	r3, r3, #2
 8003da0:	3306      	adds	r3, #6
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	18d3      	adds	r3, r2, r3
 8003da6:	3304      	adds	r3, #4
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	1dfa      	adds	r2, r7, #7
 8003dac:	7812      	ldrb	r2, [r2, #0]
 8003dae:	0011      	movs	r1, r2
 8003db0:	2203      	movs	r2, #3
 8003db2:	400a      	ands	r2, r1
 8003db4:	00d2      	lsls	r2, r2, #3
 8003db6:	21ff      	movs	r1, #255	@ 0xff
 8003db8:	4091      	lsls	r1, r2
 8003dba:	000a      	movs	r2, r1
 8003dbc:	43d2      	mvns	r2, r2
 8003dbe:	401a      	ands	r2, r3
 8003dc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	019b      	lsls	r3, r3, #6
 8003dc6:	22ff      	movs	r2, #255	@ 0xff
 8003dc8:	401a      	ands	r2, r3
 8003dca:	1dfb      	adds	r3, r7, #7
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	0018      	movs	r0, r3
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	4003      	ands	r3, r0
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003dd8:	4809      	ldr	r0, [pc, #36]	@ (8003e00 <__NVIC_SetPriority+0xd8>)
 8003dda:	1dfb      	adds	r3, r7, #7
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	001c      	movs	r4, r3
 8003de0:	230f      	movs	r3, #15
 8003de2:	4023      	ands	r3, r4
 8003de4:	3b08      	subs	r3, #8
 8003de6:	089b      	lsrs	r3, r3, #2
 8003de8:	430a      	orrs	r2, r1
 8003dea:	3306      	adds	r3, #6
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	18c3      	adds	r3, r0, r3
 8003df0:	3304      	adds	r3, #4
 8003df2:	601a      	str	r2, [r3, #0]
}
 8003df4:	46c0      	nop			@ (mov r8, r8)
 8003df6:	46bd      	mov	sp, r7
 8003df8:	b003      	add	sp, #12
 8003dfa:	bd90      	pop	{r4, r7, pc}
 8003dfc:	e000e100 	.word	0xe000e100
 8003e00:	e000ed00 	.word	0xe000ed00

08003e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	1e5a      	subs	r2, r3, #1
 8003e10:	2380      	movs	r3, #128	@ 0x80
 8003e12:	045b      	lsls	r3, r3, #17
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d301      	bcc.n	8003e1c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e010      	b.n	8003e3e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e48 <SysTick_Config+0x44>)
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	3a01      	subs	r2, #1
 8003e22:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e24:	2301      	movs	r3, #1
 8003e26:	425b      	negs	r3, r3
 8003e28:	2103      	movs	r1, #3
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f7ff ff7c 	bl	8003d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e30:	4b05      	ldr	r3, [pc, #20]	@ (8003e48 <SysTick_Config+0x44>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e36:	4b04      	ldr	r3, [pc, #16]	@ (8003e48 <SysTick_Config+0x44>)
 8003e38:	2207      	movs	r2, #7
 8003e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	0018      	movs	r0, r3
 8003e40:	46bd      	mov	sp, r7
 8003e42:	b002      	add	sp, #8
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	46c0      	nop			@ (mov r8, r8)
 8003e48:	e000e010 	.word	0xe000e010

08003e4c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	607a      	str	r2, [r7, #4]
 8003e56:	210f      	movs	r1, #15
 8003e58:	187b      	adds	r3, r7, r1
 8003e5a:	1c02      	adds	r2, r0, #0
 8003e5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	187b      	adds	r3, r7, r1
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	b25b      	sxtb	r3, r3
 8003e66:	0011      	movs	r1, r2
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f7ff ff5d 	bl	8003d28 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003e6e:	46c0      	nop			@ (mov r8, r8)
 8003e70:	46bd      	mov	sp, r7
 8003e72:	b004      	add	sp, #16
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b082      	sub	sp, #8
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	0002      	movs	r2, r0
 8003e7e:	1dfb      	adds	r3, r7, #7
 8003e80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e82:	1dfb      	adds	r3, r7, #7
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	b25b      	sxtb	r3, r3
 8003e88:	0018      	movs	r0, r3
 8003e8a:	f7ff ff11 	bl	8003cb0 <__NVIC_EnableIRQ>
}
 8003e8e:	46c0      	nop			@ (mov r8, r8)
 8003e90:	46bd      	mov	sp, r7
 8003e92:	b002      	add	sp, #8
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b082      	sub	sp, #8
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	0002      	movs	r2, r0
 8003e9e:	1dfb      	adds	r3, r7, #7
 8003ea0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003ea2:	1dfb      	adds	r3, r7, #7
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	b25b      	sxtb	r3, r3
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f7ff ff1b 	bl	8003ce4 <__NVIC_DisableIRQ>
}
 8003eae:	46c0      	nop			@ (mov r8, r8)
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	b002      	add	sp, #8
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b082      	sub	sp, #8
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f7ff ff9f 	bl	8003e04 <SysTick_Config>
 8003ec6:	0003      	movs	r3, r0
}
 8003ec8:	0018      	movs	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	b002      	add	sp, #8
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e036      	b.n	8003f54 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2221      	movs	r2, #33	@ 0x21
 8003eea:	2102      	movs	r1, #2
 8003eec:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4a18      	ldr	r2, [pc, #96]	@ (8003f5c <HAL_DMA_Init+0x8c>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003f06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	0018      	movs	r0, r3
 8003f38:	f000 f9c4 	bl	80042c4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2221      	movs	r2, #33	@ 0x21
 8003f46:	2101      	movs	r1, #1
 8003f48:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	2100      	movs	r1, #0
 8003f50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	0018      	movs	r0, r3
 8003f56:	46bd      	mov	sp, r7
 8003f58:	b004      	add	sp, #16
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	ffffc00f 	.word	0xffffc00f

08003f60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
 8003f6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6e:	2317      	movs	r3, #23
 8003f70:	18fb      	adds	r3, r7, r3
 8003f72:	2200      	movs	r2, #0
 8003f74:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	5c9b      	ldrb	r3, [r3, r2]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_DMA_Start_IT+0x24>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e04f      	b.n	8004024 <HAL_DMA_Start_IT+0xc4>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2220      	movs	r2, #32
 8003f88:	2101      	movs	r1, #1
 8003f8a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2221      	movs	r2, #33	@ 0x21
 8003f90:	5c9b      	ldrb	r3, [r3, r2]
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d13a      	bne.n	800400e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2221      	movs	r2, #33	@ 0x21
 8003f9c:	2102      	movs	r1, #2
 8003f9e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	438a      	bics	r2, r1
 8003fb4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	68b9      	ldr	r1, [r7, #8]
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 f954 	bl	800426a <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d008      	beq.n	8003fdc <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	210e      	movs	r1, #14
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	e00f      	b.n	8003ffc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	210a      	movs	r1, #10
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2104      	movs	r1, #4
 8003ff8:	438a      	bics	r2, r1
 8003ffa:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2101      	movs	r1, #1
 8004008:	430a      	orrs	r2, r1
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	e007      	b.n	800401e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	2100      	movs	r1, #0
 8004014:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004016:	2317      	movs	r3, #23
 8004018:	18fb      	adds	r3, r7, r3
 800401a:	2202      	movs	r2, #2
 800401c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800401e:	2317      	movs	r3, #23
 8004020:	18fb      	adds	r3, r7, r3
 8004022:	781b      	ldrb	r3, [r3, #0]
}
 8004024:	0018      	movs	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	b006      	add	sp, #24
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2221      	movs	r2, #33	@ 0x21
 8004038:	5c9b      	ldrb	r3, [r3, r2]
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d008      	beq.n	8004052 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2204      	movs	r2, #4
 8004044:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2220      	movs	r2, #32
 800404a:	2100      	movs	r1, #0
 800404c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e020      	b.n	8004094 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	210e      	movs	r1, #14
 800405e:	438a      	bics	r2, r1
 8004060:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2101      	movs	r1, #1
 800406e:	438a      	bics	r2, r1
 8004070:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407a:	2101      	movs	r1, #1
 800407c:	4091      	lsls	r1, r2
 800407e:	000a      	movs	r2, r1
 8004080:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2221      	movs	r2, #33	@ 0x21
 8004086:	2101      	movs	r1, #1
 8004088:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2220      	movs	r2, #32
 800408e:	2100      	movs	r1, #0
 8004090:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	0018      	movs	r0, r3
 8004096:	46bd      	mov	sp, r7
 8004098:	b002      	add	sp, #8
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040a4:	210f      	movs	r1, #15
 80040a6:	187b      	adds	r3, r7, r1
 80040a8:	2200      	movs	r2, #0
 80040aa:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2221      	movs	r2, #33	@ 0x21
 80040b0:	5c9b      	ldrb	r3, [r3, r2]
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d006      	beq.n	80040c6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2204      	movs	r2, #4
 80040bc:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80040be:	187b      	adds	r3, r7, r1
 80040c0:	2201      	movs	r2, #1
 80040c2:	701a      	strb	r2, [r3, #0]
 80040c4:	e028      	b.n	8004118 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	210e      	movs	r1, #14
 80040d2:	438a      	bics	r2, r1
 80040d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2101      	movs	r1, #1
 80040e2:	438a      	bics	r2, r1
 80040e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ee:	2101      	movs	r1, #1
 80040f0:	4091      	lsls	r1, r2
 80040f2:	000a      	movs	r2, r1
 80040f4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2221      	movs	r2, #33	@ 0x21
 80040fa:	2101      	movs	r1, #1
 80040fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2220      	movs	r2, #32
 8004102:	2100      	movs	r1, #0
 8004104:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800410a:	2b00      	cmp	r3, #0
 800410c:	d004      	beq.n	8004118 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	0010      	movs	r0, r2
 8004116:	4798      	blx	r3
    }
  }
  return status;
 8004118:	230f      	movs	r3, #15
 800411a:	18fb      	adds	r3, r7, r3
 800411c:	781b      	ldrb	r3, [r3, #0]
}
 800411e:	0018      	movs	r0, r3
 8004120:	46bd      	mov	sp, r7
 8004122:	b004      	add	sp, #16
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b084      	sub	sp, #16
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004142:	2204      	movs	r2, #4
 8004144:	409a      	lsls	r2, r3
 8004146:	0013      	movs	r3, r2
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4013      	ands	r3, r2
 800414c:	d024      	beq.n	8004198 <HAL_DMA_IRQHandler+0x72>
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2204      	movs	r2, #4
 8004152:	4013      	ands	r3, r2
 8004154:	d020      	beq.n	8004198 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2220      	movs	r2, #32
 800415e:	4013      	ands	r3, r2
 8004160:	d107      	bne.n	8004172 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2104      	movs	r1, #4
 800416e:	438a      	bics	r2, r1
 8004170:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417a:	2104      	movs	r1, #4
 800417c:	4091      	lsls	r1, r2
 800417e:	000a      	movs	r2, r1
 8004180:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004186:	2b00      	cmp	r3, #0
 8004188:	d100      	bne.n	800418c <HAL_DMA_IRQHandler+0x66>
 800418a:	e06a      	b.n	8004262 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	0010      	movs	r0, r2
 8004194:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004196:	e064      	b.n	8004262 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419c:	2202      	movs	r2, #2
 800419e:	409a      	lsls	r2, r3
 80041a0:	0013      	movs	r3, r2
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4013      	ands	r3, r2
 80041a6:	d02b      	beq.n	8004200 <HAL_DMA_IRQHandler+0xda>
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2202      	movs	r2, #2
 80041ac:	4013      	ands	r3, r2
 80041ae:	d027      	beq.n	8004200 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2220      	movs	r2, #32
 80041b8:	4013      	ands	r3, r2
 80041ba:	d10b      	bne.n	80041d4 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	210a      	movs	r1, #10
 80041c8:	438a      	bics	r2, r1
 80041ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2221      	movs	r2, #33	@ 0x21
 80041d0:	2101      	movs	r1, #1
 80041d2:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041dc:	2102      	movs	r1, #2
 80041de:	4091      	lsls	r1, r2
 80041e0:	000a      	movs	r2, r1
 80041e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2220      	movs	r2, #32
 80041e8:	2100      	movs	r1, #0
 80041ea:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d036      	beq.n	8004262 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	0010      	movs	r0, r2
 80041fc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80041fe:	e030      	b.n	8004262 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004204:	2208      	movs	r2, #8
 8004206:	409a      	lsls	r2, r3
 8004208:	0013      	movs	r3, r2
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4013      	ands	r3, r2
 800420e:	d028      	beq.n	8004262 <HAL_DMA_IRQHandler+0x13c>
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2208      	movs	r2, #8
 8004214:	4013      	ands	r3, r2
 8004216:	d024      	beq.n	8004262 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	210e      	movs	r1, #14
 8004224:	438a      	bics	r2, r1
 8004226:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004230:	2101      	movs	r1, #1
 8004232:	4091      	lsls	r1, r2
 8004234:	000a      	movs	r2, r1
 8004236:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2221      	movs	r2, #33	@ 0x21
 8004242:	2101      	movs	r1, #1
 8004244:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2220      	movs	r2, #32
 800424a:	2100      	movs	r1, #0
 800424c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004252:	2b00      	cmp	r3, #0
 8004254:	d005      	beq.n	8004262 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	0010      	movs	r0, r2
 800425e:	4798      	blx	r3
    }
  }
}
 8004260:	e7ff      	b.n	8004262 <HAL_DMA_IRQHandler+0x13c>
 8004262:	46c0      	nop			@ (mov r8, r8)
 8004264:	46bd      	mov	sp, r7
 8004266:	b004      	add	sp, #16
 8004268:	bd80      	pop	{r7, pc}

0800426a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b084      	sub	sp, #16
 800426e:	af00      	add	r7, sp, #0
 8004270:	60f8      	str	r0, [r7, #12]
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	607a      	str	r2, [r7, #4]
 8004276:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004280:	2101      	movs	r1, #1
 8004282:	4091      	lsls	r1, r2
 8004284:	000a      	movs	r2, r1
 8004286:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b10      	cmp	r3, #16
 8004296:	d108      	bne.n	80042aa <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80042a8:	e007      	b.n	80042ba <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	60da      	str	r2, [r3, #12]
}
 80042ba:	46c0      	nop			@ (mov r8, r8)
 80042bc:	46bd      	mov	sp, r7
 80042be:	b004      	add	sp, #16
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a08      	ldr	r2, [pc, #32]	@ (80042f4 <DMA_CalcBaseAndBitshift+0x30>)
 80042d2:	4694      	mov	ip, r2
 80042d4:	4463      	add	r3, ip
 80042d6:	2114      	movs	r1, #20
 80042d8:	0018      	movs	r0, r3
 80042da:	f7fb ff31 	bl	8000140 <__udivsi3>
 80042de:	0003      	movs	r3, r0
 80042e0:	009a      	lsls	r2, r3, #2
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a03      	ldr	r2, [pc, #12]	@ (80042f8 <DMA_CalcBaseAndBitshift+0x34>)
 80042ea:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80042ec:	46c0      	nop			@ (mov r8, r8)
 80042ee:	46bd      	mov	sp, r7
 80042f0:	b002      	add	sp, #8
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	bffdfff8 	.word	0xbffdfff8
 80042f8:	40020000 	.word	0x40020000

080042fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004306:	2300      	movs	r3, #0
 8004308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800430a:	e155      	b.n	80045b8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2101      	movs	r1, #1
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	4091      	lsls	r1, r2
 8004316:	000a      	movs	r2, r1
 8004318:	4013      	ands	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d100      	bne.n	8004324 <HAL_GPIO_Init+0x28>
 8004322:	e146      	b.n	80045b2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2203      	movs	r2, #3
 800432a:	4013      	ands	r3, r2
 800432c:	2b01      	cmp	r3, #1
 800432e:	d005      	beq.n	800433c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2203      	movs	r2, #3
 8004336:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004338:	2b02      	cmp	r3, #2
 800433a:	d130      	bne.n	800439e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	2203      	movs	r2, #3
 8004348:	409a      	lsls	r2, r3
 800434a:	0013      	movs	r3, r2
 800434c:	43da      	mvns	r2, r3
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	4013      	ands	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	409a      	lsls	r2, r3
 800435e:	0013      	movs	r3, r2
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004372:	2201      	movs	r2, #1
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	409a      	lsls	r2, r3
 8004378:	0013      	movs	r3, r2
 800437a:	43da      	mvns	r2, r3
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	4013      	ands	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	091b      	lsrs	r3, r3, #4
 8004388:	2201      	movs	r2, #1
 800438a:	401a      	ands	r2, r3
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	409a      	lsls	r2, r3
 8004390:	0013      	movs	r3, r2
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2203      	movs	r2, #3
 80043a4:	4013      	ands	r3, r2
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d017      	beq.n	80043da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	2203      	movs	r2, #3
 80043b6:	409a      	lsls	r2, r3
 80043b8:	0013      	movs	r3, r2
 80043ba:	43da      	mvns	r2, r3
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	4013      	ands	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	409a      	lsls	r2, r3
 80043cc:	0013      	movs	r3, r2
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2203      	movs	r2, #3
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d123      	bne.n	800442e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	08da      	lsrs	r2, r3, #3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3208      	adds	r2, #8
 80043ee:	0092      	lsls	r2, r2, #2
 80043f0:	58d3      	ldr	r3, [r2, r3]
 80043f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2207      	movs	r2, #7
 80043f8:	4013      	ands	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	220f      	movs	r2, #15
 80043fe:	409a      	lsls	r2, r3
 8004400:	0013      	movs	r3, r2
 8004402:	43da      	mvns	r2, r3
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	4013      	ands	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	691a      	ldr	r2, [r3, #16]
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2107      	movs	r1, #7
 8004412:	400b      	ands	r3, r1
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	409a      	lsls	r2, r3
 8004418:	0013      	movs	r3, r2
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	4313      	orrs	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	08da      	lsrs	r2, r3, #3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3208      	adds	r2, #8
 8004428:	0092      	lsls	r2, r2, #2
 800442a:	6939      	ldr	r1, [r7, #16]
 800442c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	2203      	movs	r2, #3
 800443a:	409a      	lsls	r2, r3
 800443c:	0013      	movs	r3, r2
 800443e:	43da      	mvns	r2, r3
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	4013      	ands	r3, r2
 8004444:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2203      	movs	r2, #3
 800444c:	401a      	ands	r2, r3
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	409a      	lsls	r2, r3
 8004454:	0013      	movs	r3, r2
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	23c0      	movs	r3, #192	@ 0xc0
 8004468:	029b      	lsls	r3, r3, #10
 800446a:	4013      	ands	r3, r2
 800446c:	d100      	bne.n	8004470 <HAL_GPIO_Init+0x174>
 800446e:	e0a0      	b.n	80045b2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004470:	4b57      	ldr	r3, [pc, #348]	@ (80045d0 <HAL_GPIO_Init+0x2d4>)
 8004472:	699a      	ldr	r2, [r3, #24]
 8004474:	4b56      	ldr	r3, [pc, #344]	@ (80045d0 <HAL_GPIO_Init+0x2d4>)
 8004476:	2101      	movs	r1, #1
 8004478:	430a      	orrs	r2, r1
 800447a:	619a      	str	r2, [r3, #24]
 800447c:	4b54      	ldr	r3, [pc, #336]	@ (80045d0 <HAL_GPIO_Init+0x2d4>)
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	2201      	movs	r2, #1
 8004482:	4013      	ands	r3, r2
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004488:	4a52      	ldr	r2, [pc, #328]	@ (80045d4 <HAL_GPIO_Init+0x2d8>)
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	089b      	lsrs	r3, r3, #2
 800448e:	3302      	adds	r3, #2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	589b      	ldr	r3, [r3, r2]
 8004494:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2203      	movs	r2, #3
 800449a:	4013      	ands	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	220f      	movs	r2, #15
 80044a0:	409a      	lsls	r2, r3
 80044a2:	0013      	movs	r3, r2
 80044a4:	43da      	mvns	r2, r3
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	4013      	ands	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	2390      	movs	r3, #144	@ 0x90
 80044b0:	05db      	lsls	r3, r3, #23
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d019      	beq.n	80044ea <HAL_GPIO_Init+0x1ee>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a47      	ldr	r2, [pc, #284]	@ (80045d8 <HAL_GPIO_Init+0x2dc>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d013      	beq.n	80044e6 <HAL_GPIO_Init+0x1ea>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a46      	ldr	r2, [pc, #280]	@ (80045dc <HAL_GPIO_Init+0x2e0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00d      	beq.n	80044e2 <HAL_GPIO_Init+0x1e6>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a45      	ldr	r2, [pc, #276]	@ (80045e0 <HAL_GPIO_Init+0x2e4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d007      	beq.n	80044de <HAL_GPIO_Init+0x1e2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a44      	ldr	r2, [pc, #272]	@ (80045e4 <HAL_GPIO_Init+0x2e8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d101      	bne.n	80044da <HAL_GPIO_Init+0x1de>
 80044d6:	2304      	movs	r3, #4
 80044d8:	e008      	b.n	80044ec <HAL_GPIO_Init+0x1f0>
 80044da:	2305      	movs	r3, #5
 80044dc:	e006      	b.n	80044ec <HAL_GPIO_Init+0x1f0>
 80044de:	2303      	movs	r3, #3
 80044e0:	e004      	b.n	80044ec <HAL_GPIO_Init+0x1f0>
 80044e2:	2302      	movs	r3, #2
 80044e4:	e002      	b.n	80044ec <HAL_GPIO_Init+0x1f0>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <HAL_GPIO_Init+0x1f0>
 80044ea:	2300      	movs	r3, #0
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	2103      	movs	r1, #3
 80044f0:	400a      	ands	r2, r1
 80044f2:	0092      	lsls	r2, r2, #2
 80044f4:	4093      	lsls	r3, r2
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80044fc:	4935      	ldr	r1, [pc, #212]	@ (80045d4 <HAL_GPIO_Init+0x2d8>)
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	089b      	lsrs	r3, r3, #2
 8004502:	3302      	adds	r3, #2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800450a:	4b37      	ldr	r3, [pc, #220]	@ (80045e8 <HAL_GPIO_Init+0x2ec>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	43da      	mvns	r2, r3
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	4013      	ands	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	2380      	movs	r3, #128	@ 0x80
 8004520:	035b      	lsls	r3, r3, #13
 8004522:	4013      	ands	r3, r2
 8004524:	d003      	beq.n	800452e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800452e:	4b2e      	ldr	r3, [pc, #184]	@ (80045e8 <HAL_GPIO_Init+0x2ec>)
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004534:	4b2c      	ldr	r3, [pc, #176]	@ (80045e8 <HAL_GPIO_Init+0x2ec>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	43da      	mvns	r2, r3
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	4013      	ands	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	2380      	movs	r3, #128	@ 0x80
 800454a:	039b      	lsls	r3, r3, #14
 800454c:	4013      	ands	r3, r2
 800454e:	d003      	beq.n	8004558 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004558:	4b23      	ldr	r3, [pc, #140]	@ (80045e8 <HAL_GPIO_Init+0x2ec>)
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800455e:	4b22      	ldr	r3, [pc, #136]	@ (80045e8 <HAL_GPIO_Init+0x2ec>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	43da      	mvns	r2, r3
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	4013      	ands	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	2380      	movs	r3, #128	@ 0x80
 8004574:	029b      	lsls	r3, r3, #10
 8004576:	4013      	ands	r3, r2
 8004578:	d003      	beq.n	8004582 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004582:	4b19      	ldr	r3, [pc, #100]	@ (80045e8 <HAL_GPIO_Init+0x2ec>)
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8004588:	4b17      	ldr	r3, [pc, #92]	@ (80045e8 <HAL_GPIO_Init+0x2ec>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	43da      	mvns	r2, r3
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	4013      	ands	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	2380      	movs	r3, #128	@ 0x80
 800459e:	025b      	lsls	r3, r3, #9
 80045a0:	4013      	ands	r3, r2
 80045a2:	d003      	beq.n	80045ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80045ac:	4b0e      	ldr	r3, [pc, #56]	@ (80045e8 <HAL_GPIO_Init+0x2ec>)
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	3301      	adds	r3, #1
 80045b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	40da      	lsrs	r2, r3
 80045c0:	1e13      	subs	r3, r2, #0
 80045c2:	d000      	beq.n	80045c6 <HAL_GPIO_Init+0x2ca>
 80045c4:	e6a2      	b.n	800430c <HAL_GPIO_Init+0x10>
  } 
}
 80045c6:	46c0      	nop			@ (mov r8, r8)
 80045c8:	46c0      	nop			@ (mov r8, r8)
 80045ca:	46bd      	mov	sp, r7
 80045cc:	b006      	add	sp, #24
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40021000 	.word	0x40021000
 80045d4:	40010000 	.word	0x40010000
 80045d8:	48000400 	.word	0x48000400
 80045dc:	48000800 	.word	0x48000800
 80045e0:	48000c00 	.word	0x48000c00
 80045e4:	48001000 	.word	0x48001000
 80045e8:	40010400 	.word	0x40010400

080045ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	000a      	movs	r2, r1
 80045f6:	1cbb      	adds	r3, r7, #2
 80045f8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	1cba      	adds	r2, r7, #2
 8004600:	8812      	ldrh	r2, [r2, #0]
 8004602:	4013      	ands	r3, r2
 8004604:	d004      	beq.n	8004610 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004606:	230f      	movs	r3, #15
 8004608:	18fb      	adds	r3, r7, r3
 800460a:	2201      	movs	r2, #1
 800460c:	701a      	strb	r2, [r3, #0]
 800460e:	e003      	b.n	8004618 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004610:	230f      	movs	r3, #15
 8004612:	18fb      	adds	r3, r7, r3
 8004614:	2200      	movs	r2, #0
 8004616:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004618:	230f      	movs	r3, #15
 800461a:	18fb      	adds	r3, r7, r3
 800461c:	781b      	ldrb	r3, [r3, #0]
  }
 800461e:	0018      	movs	r0, r3
 8004620:	46bd      	mov	sp, r7
 8004622:	b004      	add	sp, #16
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b082      	sub	sp, #8
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	0008      	movs	r0, r1
 8004630:	0011      	movs	r1, r2
 8004632:	1cbb      	adds	r3, r7, #2
 8004634:	1c02      	adds	r2, r0, #0
 8004636:	801a      	strh	r2, [r3, #0]
 8004638:	1c7b      	adds	r3, r7, #1
 800463a:	1c0a      	adds	r2, r1, #0
 800463c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800463e:	1c7b      	adds	r3, r7, #1
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d004      	beq.n	8004650 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004646:	1cbb      	adds	r3, r7, #2
 8004648:	881a      	ldrh	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800464e:	e003      	b.n	8004658 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004650:	1cbb      	adds	r3, r7, #2
 8004652:	881a      	ldrh	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004658:	46c0      	nop			@ (mov r8, r8)
 800465a:	46bd      	mov	sp, r7
 800465c:	b002      	add	sp, #8
 800465e:	bd80      	pop	{r7, pc}

08004660 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	0002      	movs	r2, r0
 8004668:	1dbb      	adds	r3, r7, #6
 800466a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800466c:	4b09      	ldr	r3, [pc, #36]	@ (8004694 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	1dba      	adds	r2, r7, #6
 8004672:	8812      	ldrh	r2, [r2, #0]
 8004674:	4013      	ands	r3, r2
 8004676:	d008      	beq.n	800468a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004678:	4b06      	ldr	r3, [pc, #24]	@ (8004694 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800467a:	1dba      	adds	r2, r7, #6
 800467c:	8812      	ldrh	r2, [r2, #0]
 800467e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004680:	1dbb      	adds	r3, r7, #6
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	0018      	movs	r0, r3
 8004686:	f00a fe7d 	bl	800f384 <HAL_GPIO_EXTI_Callback>
  }
}
 800468a:	46c0      	nop			@ (mov r8, r8)
 800468c:	46bd      	mov	sp, r7
 800468e:	b002      	add	sp, #8
 8004690:	bd80      	pop	{r7, pc}
 8004692:	46c0      	nop			@ (mov r8, r8)
 8004694:	40010400 	.word	0x40010400

08004698 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004698:	b590      	push	{r4, r7, lr}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e0e4      	b.n	8004874 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a73      	ldr	r2, [pc, #460]	@ (800487c <HAL_PCD_Init+0x1e4>)
 80046ae:	5c9b      	ldrb	r3, [r3, r2]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d108      	bne.n	80046c8 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	23a4      	movs	r3, #164	@ 0xa4
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	2100      	movs	r1, #0
 80046be:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	0018      	movs	r0, r3
 80046c4:	f009 f902 	bl	800d8cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a6c      	ldr	r2, [pc, #432]	@ (800487c <HAL_PCD_Init+0x1e4>)
 80046cc:	2103      	movs	r1, #3
 80046ce:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	0018      	movs	r0, r3
 80046d6:	f005 f929 	bl	800992c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046da:	230f      	movs	r3, #15
 80046dc:	18fb      	adds	r3, r7, r3
 80046de:	2200      	movs	r2, #0
 80046e0:	701a      	strb	r2, [r3, #0]
 80046e2:	e047      	b.n	8004774 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80046e4:	200f      	movs	r0, #15
 80046e6:	183b      	adds	r3, r7, r0
 80046e8:	781a      	ldrb	r2, [r3, #0]
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	0013      	movs	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	189b      	adds	r3, r3, r2
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	18cb      	adds	r3, r1, r3
 80046f6:	3311      	adds	r3, #17
 80046f8:	2201      	movs	r2, #1
 80046fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80046fc:	183b      	adds	r3, r7, r0
 80046fe:	781a      	ldrb	r2, [r3, #0]
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	0013      	movs	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	189b      	adds	r3, r3, r2
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	18cb      	adds	r3, r1, r3
 800470c:	3310      	adds	r3, #16
 800470e:	183a      	adds	r2, r7, r0
 8004710:	7812      	ldrb	r2, [r2, #0]
 8004712:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004714:	183b      	adds	r3, r7, r0
 8004716:	781a      	ldrb	r2, [r3, #0]
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	0013      	movs	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	189b      	adds	r3, r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	18cb      	adds	r3, r1, r3
 8004724:	3313      	adds	r3, #19
 8004726:	2200      	movs	r2, #0
 8004728:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800472a:	183b      	adds	r3, r7, r0
 800472c:	781a      	ldrb	r2, [r3, #0]
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	0013      	movs	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	189b      	adds	r3, r3, r2
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	18cb      	adds	r3, r1, r3
 800473a:	3320      	adds	r3, #32
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004740:	183b      	adds	r3, r7, r0
 8004742:	781a      	ldrb	r2, [r3, #0]
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	0013      	movs	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	189b      	adds	r3, r3, r2
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	18cb      	adds	r3, r1, r3
 8004750:	3324      	adds	r3, #36	@ 0x24
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004756:	183b      	adds	r3, r7, r0
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	1c5a      	adds	r2, r3, #1
 800475e:	0013      	movs	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	189b      	adds	r3, r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	2200      	movs	r2, #0
 8004768:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800476a:	183b      	adds	r3, r7, r0
 800476c:	781a      	ldrb	r2, [r3, #0]
 800476e:	183b      	adds	r3, r7, r0
 8004770:	3201      	adds	r2, #1
 8004772:	701a      	strb	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	791b      	ldrb	r3, [r3, #4]
 8004778:	210f      	movs	r1, #15
 800477a:	187a      	adds	r2, r7, r1
 800477c:	7812      	ldrb	r2, [r2, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d3b0      	bcc.n	80046e4 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004782:	187b      	adds	r3, r7, r1
 8004784:	2200      	movs	r2, #0
 8004786:	701a      	strb	r2, [r3, #0]
 8004788:	e056      	b.n	8004838 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800478a:	240f      	movs	r4, #15
 800478c:	193b      	adds	r3, r7, r4
 800478e:	781a      	ldrb	r2, [r3, #0]
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	2352      	movs	r3, #82	@ 0x52
 8004794:	33ff      	adds	r3, #255	@ 0xff
 8004796:	0019      	movs	r1, r3
 8004798:	0013      	movs	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	189b      	adds	r3, r3, r2
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	18c3      	adds	r3, r0, r3
 80047a2:	185b      	adds	r3, r3, r1
 80047a4:	2200      	movs	r2, #0
 80047a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80047a8:	193b      	adds	r3, r7, r4
 80047aa:	781a      	ldrb	r2, [r3, #0]
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	23a8      	movs	r3, #168	@ 0xa8
 80047b0:	0059      	lsls	r1, r3, #1
 80047b2:	0013      	movs	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	189b      	adds	r3, r3, r2
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	18c3      	adds	r3, r0, r3
 80047bc:	185b      	adds	r3, r3, r1
 80047be:	193a      	adds	r2, r7, r4
 80047c0:	7812      	ldrb	r2, [r2, #0]
 80047c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80047c4:	193b      	adds	r3, r7, r4
 80047c6:	781a      	ldrb	r2, [r3, #0]
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	2354      	movs	r3, #84	@ 0x54
 80047cc:	33ff      	adds	r3, #255	@ 0xff
 80047ce:	0019      	movs	r1, r3
 80047d0:	0013      	movs	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	189b      	adds	r3, r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	18c3      	adds	r3, r0, r3
 80047da:	185b      	adds	r3, r3, r1
 80047dc:	2200      	movs	r2, #0
 80047de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80047e0:	193b      	adds	r3, r7, r4
 80047e2:	781a      	ldrb	r2, [r3, #0]
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	23b0      	movs	r3, #176	@ 0xb0
 80047e8:	0059      	lsls	r1, r3, #1
 80047ea:	0013      	movs	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	189b      	adds	r3, r3, r2
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	18c3      	adds	r3, r0, r3
 80047f4:	185b      	adds	r3, r3, r1
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80047fa:	193b      	adds	r3, r7, r4
 80047fc:	781a      	ldrb	r2, [r3, #0]
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	23b2      	movs	r3, #178	@ 0xb2
 8004802:	0059      	lsls	r1, r3, #1
 8004804:	0013      	movs	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	189b      	adds	r3, r3, r2
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	18c3      	adds	r3, r0, r3
 800480e:	185b      	adds	r3, r3, r1
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004814:	193b      	adds	r3, r7, r4
 8004816:	781a      	ldrb	r2, [r3, #0]
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	23b4      	movs	r3, #180	@ 0xb4
 800481c:	0059      	lsls	r1, r3, #1
 800481e:	0013      	movs	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	189b      	adds	r3, r3, r2
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	18c3      	adds	r3, r0, r3
 8004828:	185b      	adds	r3, r3, r1
 800482a:	2200      	movs	r2, #0
 800482c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800482e:	193b      	adds	r3, r7, r4
 8004830:	781a      	ldrb	r2, [r3, #0]
 8004832:	193b      	adds	r3, r7, r4
 8004834:	3201      	adds	r2, #1
 8004836:	701a      	strb	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	791b      	ldrb	r3, [r3, #4]
 800483c:	220f      	movs	r2, #15
 800483e:	18ba      	adds	r2, r7, r2
 8004840:	7812      	ldrb	r2, [r2, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d3a1      	bcc.n	800478a <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6818      	ldr	r0, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6859      	ldr	r1, [r3, #4]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	f005 f886 	bl	8009960 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a07      	ldr	r2, [pc, #28]	@ (800487c <HAL_PCD_Init+0x1e4>)
 800485e:	2101      	movs	r1, #1
 8004860:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	7a9b      	ldrb	r3, [r3, #10]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d103      	bne.n	8004872 <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	0018      	movs	r0, r3
 800486e:	f001 fd1f 	bl	80062b0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	0018      	movs	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	b005      	add	sp, #20
 800487a:	bd90      	pop	{r4, r7, pc}
 800487c:	00000291 	.word	0x00000291

08004880 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	23a4      	movs	r3, #164	@ 0xa4
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	5cd3      	ldrb	r3, [r2, r3]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_PCD_Start+0x18>
 8004894:	2302      	movs	r3, #2
 8004896:	e014      	b.n	80048c2 <HAL_PCD_Start+0x42>
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	23a4      	movs	r3, #164	@ 0xa4
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	2101      	movs	r1, #1
 80048a0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	0018      	movs	r0, r3
 80048a8:	f005 f82a 	bl	8009900 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	0018      	movs	r0, r3
 80048b2:	f007 f81f 	bl	800b8f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	23a4      	movs	r3, #164	@ 0xa4
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	2100      	movs	r1, #0
 80048be:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	0018      	movs	r0, r3
 80048c4:	46bd      	mov	sp, r7
 80048c6:	b002      	add	sp, #8
 80048c8:	bd80      	pop	{r7, pc}
	...

080048cc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	0018      	movs	r0, r3
 80048da:	f007 f821 	bl	800b920 <USB_ReadInterrupts>
 80048de:	0003      	movs	r3, r0
 80048e0:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	2380      	movs	r3, #128	@ 0x80
 80048e6:	021b      	lsls	r3, r3, #8
 80048e8:	4013      	ands	r3, r2
 80048ea:	d004      	beq.n	80048f6 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	0018      	movs	r0, r3
 80048f0:	f000 fb60 	bl	8004fb4 <PCD_EP_ISR_Handler>

    return;
 80048f4:	e11d      	b.n	8004b32 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	2380      	movs	r3, #128	@ 0x80
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	4013      	ands	r3, r2
 80048fe:	d015      	beq.n	800492c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2244      	movs	r2, #68	@ 0x44
 8004906:	5a9b      	ldrh	r3, [r3, r2]
 8004908:	b29a      	uxth	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	498a      	ldr	r1, [pc, #552]	@ (8004b38 <HAL_PCD_IRQHandler+0x26c>)
 8004910:	400a      	ands	r2, r1
 8004912:	b291      	uxth	r1, r2
 8004914:	2244      	movs	r2, #68	@ 0x44
 8004916:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	0018      	movs	r0, r3
 800491c:	f009 f861 	bl	800d9e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2100      	movs	r1, #0
 8004924:	0018      	movs	r0, r3
 8004926:	f000 f915 	bl	8004b54 <HAL_PCD_SetAddress>

    return;
 800492a:	e102      	b.n	8004b32 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	2380      	movs	r3, #128	@ 0x80
 8004930:	01db      	lsls	r3, r3, #7
 8004932:	4013      	ands	r3, r2
 8004934:	d00c      	beq.n	8004950 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2244      	movs	r2, #68	@ 0x44
 800493c:	5a9b      	ldrh	r3, [r3, r2]
 800493e:	b29a      	uxth	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	497d      	ldr	r1, [pc, #500]	@ (8004b3c <HAL_PCD_IRQHandler+0x270>)
 8004946:	400a      	ands	r2, r1
 8004948:	b291      	uxth	r1, r2
 800494a:	2244      	movs	r2, #68	@ 0x44
 800494c:	5299      	strh	r1, [r3, r2]

    return;
 800494e:	e0f0      	b.n	8004b32 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	2380      	movs	r3, #128	@ 0x80
 8004954:	019b      	lsls	r3, r3, #6
 8004956:	4013      	ands	r3, r2
 8004958:	d00c      	beq.n	8004974 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2244      	movs	r2, #68	@ 0x44
 8004960:	5a9b      	ldrh	r3, [r3, r2]
 8004962:	b29a      	uxth	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4975      	ldr	r1, [pc, #468]	@ (8004b40 <HAL_PCD_IRQHandler+0x274>)
 800496a:	400a      	ands	r2, r1
 800496c:	b291      	uxth	r1, r2
 800496e:	2244      	movs	r2, #68	@ 0x44
 8004970:	5299      	strh	r1, [r3, r2]

    return;
 8004972:	e0de      	b.n	8004b32 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	2380      	movs	r3, #128	@ 0x80
 8004978:	015b      	lsls	r3, r3, #5
 800497a:	4013      	ands	r3, r2
 800497c:	d038      	beq.n	80049f0 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2240      	movs	r2, #64	@ 0x40
 8004984:	5a9b      	ldrh	r3, [r3, r2]
 8004986:	b29a      	uxth	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2104      	movs	r1, #4
 800498e:	438a      	bics	r2, r1
 8004990:	b291      	uxth	r1, r2
 8004992:	2240      	movs	r2, #64	@ 0x40
 8004994:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2240      	movs	r2, #64	@ 0x40
 800499c:	5a9b      	ldrh	r3, [r3, r2]
 800499e:	b29a      	uxth	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2108      	movs	r1, #8
 80049a6:	438a      	bics	r2, r1
 80049a8:	b291      	uxth	r1, r2
 80049aa:	2240      	movs	r2, #64	@ 0x40
 80049ac:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	23b2      	movs	r3, #178	@ 0xb2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	5cd3      	ldrb	r3, [r2, r3]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d109      	bne.n	80049ce <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	23b2      	movs	r3, #178	@ 0xb2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	2100      	movs	r1, #0
 80049c2:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2100      	movs	r1, #0
 80049c8:	0018      	movs	r0, r3
 80049ca:	f001 fc9b 	bl	8006304 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	0018      	movs	r0, r3
 80049d2:	f009 f847 	bl	800da64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2244      	movs	r2, #68	@ 0x44
 80049dc:	5a9b      	ldrh	r3, [r3, r2]
 80049de:	b29a      	uxth	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4957      	ldr	r1, [pc, #348]	@ (8004b44 <HAL_PCD_IRQHandler+0x278>)
 80049e6:	400a      	ands	r2, r1
 80049e8:	b291      	uxth	r1, r2
 80049ea:	2244      	movs	r2, #68	@ 0x44
 80049ec:	5299      	strh	r1, [r3, r2]

    return;
 80049ee:	e0a0      	b.n	8004b32 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	2380      	movs	r3, #128	@ 0x80
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	4013      	ands	r3, r2
 80049f8:	d028      	beq.n	8004a4c <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2240      	movs	r2, #64	@ 0x40
 8004a00:	5a9b      	ldrh	r3, [r3, r2]
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2108      	movs	r1, #8
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	b291      	uxth	r1, r2
 8004a0e:	2240      	movs	r2, #64	@ 0x40
 8004a10:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2244      	movs	r2, #68	@ 0x44
 8004a18:	5a9b      	ldrh	r3, [r3, r2]
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4949      	ldr	r1, [pc, #292]	@ (8004b48 <HAL_PCD_IRQHandler+0x27c>)
 8004a22:	400a      	ands	r2, r1
 8004a24:	b291      	uxth	r1, r2
 8004a26:	2244      	movs	r2, #68	@ 0x44
 8004a28:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2240      	movs	r2, #64	@ 0x40
 8004a30:	5a9b      	ldrh	r3, [r3, r2]
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2104      	movs	r1, #4
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	b291      	uxth	r1, r2
 8004a3e:	2240      	movs	r2, #64	@ 0x40
 8004a40:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	0018      	movs	r0, r3
 8004a46:	f008 fff1 	bl	800da2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004a4a:	e072      	b.n	8004b32 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2280      	movs	r2, #128	@ 0x80
 8004a50:	4013      	ands	r3, r2
 8004a52:	d046      	beq.n	8004ae2 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2244      	movs	r2, #68	@ 0x44
 8004a5a:	5a9b      	ldrh	r3, [r3, r2]
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2180      	movs	r1, #128	@ 0x80
 8004a64:	438a      	bics	r2, r1
 8004a66:	b291      	uxth	r1, r2
 8004a68:	2244      	movs	r2, #68	@ 0x44
 8004a6a:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	23b2      	movs	r3, #178	@ 0xb2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	5cd3      	ldrb	r3, [r2, r3]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d12f      	bne.n	8004ad8 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2240      	movs	r2, #64	@ 0x40
 8004a7e:	5a9b      	ldrh	r3, [r3, r2]
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2104      	movs	r1, #4
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	b291      	uxth	r1, r2
 8004a8c:	2240      	movs	r2, #64	@ 0x40
 8004a8e:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2240      	movs	r2, #64	@ 0x40
 8004a96:	5a9b      	ldrh	r3, [r3, r2]
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2108      	movs	r1, #8
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	b291      	uxth	r1, r2
 8004aa4:	2240      	movs	r2, #64	@ 0x40
 8004aa6:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	23b2      	movs	r3, #178	@ 0xb2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	2101      	movs	r1, #1
 8004ab0:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2254      	movs	r2, #84	@ 0x54
 8004ab8:	5a9b      	ldrh	r3, [r3, r2]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	089b      	lsrs	r3, r3, #2
 8004abe:	223c      	movs	r2, #60	@ 0x3c
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	0019      	movs	r1, r3
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	23b3      	movs	r3, #179	@ 0xb3
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2101      	movs	r1, #1
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	f001 fc17 	bl	8006304 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004ad6:	e02c      	b.n	8004b32 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	0018      	movs	r0, r3
 8004adc:	f008 ffa6 	bl	800da2c <HAL_PCD_SuspendCallback>
    return;
 8004ae0:	e027      	b.n	8004b32 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	2380      	movs	r3, #128	@ 0x80
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d010      	beq.n	8004b0e <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2244      	movs	r2, #68	@ 0x44
 8004af2:	5a9b      	ldrh	r3, [r3, r2]
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4914      	ldr	r1, [pc, #80]	@ (8004b4c <HAL_PCD_IRQHandler+0x280>)
 8004afc:	400a      	ands	r2, r1
 8004afe:	b291      	uxth	r1, r2
 8004b00:	2244      	movs	r2, #68	@ 0x44
 8004b02:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	0018      	movs	r0, r3
 8004b08:	f008 ff5c 	bl	800d9c4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004b0c:	e011      	b.n	8004b32 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	2380      	movs	r3, #128	@ 0x80
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	4013      	ands	r3, r2
 8004b16:	d00c      	beq.n	8004b32 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2244      	movs	r2, #68	@ 0x44
 8004b1e:	5a9b      	ldrh	r3, [r3, r2]
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	490a      	ldr	r1, [pc, #40]	@ (8004b50 <HAL_PCD_IRQHandler+0x284>)
 8004b28:	400a      	ands	r2, r1
 8004b2a:	b291      	uxth	r1, r2
 8004b2c:	2244      	movs	r2, #68	@ 0x44
 8004b2e:	5299      	strh	r1, [r3, r2]

    return;
 8004b30:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004b32:	46bd      	mov	sp, r7
 8004b34:	b004      	add	sp, #16
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	fffffbff 	.word	0xfffffbff
 8004b3c:	ffffbfff 	.word	0xffffbfff
 8004b40:	ffffdfff 	.word	0xffffdfff
 8004b44:	ffffefff 	.word	0xffffefff
 8004b48:	fffff7ff 	.word	0xfffff7ff
 8004b4c:	fffffdff 	.word	0xfffffdff
 8004b50:	fffffeff 	.word	0xfffffeff

08004b54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	000a      	movs	r2, r1
 8004b5e:	1cfb      	adds	r3, r7, #3
 8004b60:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	23a4      	movs	r3, #164	@ 0xa4
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	5cd3      	ldrb	r3, [r2, r3]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d101      	bne.n	8004b72 <HAL_PCD_SetAddress+0x1e>
 8004b6e:	2302      	movs	r3, #2
 8004b70:	e016      	b.n	8004ba0 <HAL_PCD_SetAddress+0x4c>
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	23a4      	movs	r3, #164	@ 0xa4
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	2101      	movs	r1, #1
 8004b7a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	1cfa      	adds	r2, r7, #3
 8004b80:	7812      	ldrb	r2, [r2, #0]
 8004b82:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	1cfb      	adds	r3, r7, #3
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	0019      	movs	r1, r3
 8004b8e:	0010      	movs	r0, r2
 8004b90:	f006 fe9c 	bl	800b8cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	23a4      	movs	r3, #164	@ 0xa4
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	b002      	add	sp, #8
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ba8:	b590      	push	{r4, r7, lr}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	000c      	movs	r4, r1
 8004bb2:	0010      	movs	r0, r2
 8004bb4:	0019      	movs	r1, r3
 8004bb6:	1cfb      	adds	r3, r7, #3
 8004bb8:	1c22      	adds	r2, r4, #0
 8004bba:	701a      	strb	r2, [r3, #0]
 8004bbc:	003b      	movs	r3, r7
 8004bbe:	1c02      	adds	r2, r0, #0
 8004bc0:	801a      	strh	r2, [r3, #0]
 8004bc2:	1cbb      	adds	r3, r7, #2
 8004bc4:	1c0a      	adds	r2, r1, #0
 8004bc6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004bc8:	230b      	movs	r3, #11
 8004bca:	18fb      	adds	r3, r7, r3
 8004bcc:	2200      	movs	r2, #0
 8004bce:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bd0:	1cfb      	adds	r3, r7, #3
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	b25b      	sxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	da0f      	bge.n	8004bfa <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bda:	1cfb      	adds	r3, r7, #3
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2207      	movs	r2, #7
 8004be0:	401a      	ands	r2, r3
 8004be2:	0013      	movs	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	189b      	adds	r3, r3, r2
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	3310      	adds	r3, #16
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	18d3      	adds	r3, r2, r3
 8004bf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	705a      	strb	r2, [r3, #1]
 8004bf8:	e00f      	b.n	8004c1a <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bfa:	1cfb      	adds	r3, r7, #3
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2207      	movs	r2, #7
 8004c00:	401a      	ands	r2, r3
 8004c02:	0013      	movs	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	189b      	adds	r3, r3, r2
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	3351      	adds	r3, #81	@ 0x51
 8004c0c:	33ff      	adds	r3, #255	@ 0xff
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	18d3      	adds	r3, r2, r3
 8004c12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004c1a:	1cfb      	adds	r3, r7, #3
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2207      	movs	r2, #7
 8004c20:	4013      	ands	r3, r2
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004c28:	003b      	movs	r3, r7
 8004c2a:	881a      	ldrh	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	1cba      	adds	r2, r7, #2
 8004c34:	7812      	ldrb	r2, [r2, #0]
 8004c36:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004c38:	1cbb      	adds	r3, r7, #2
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d102      	bne.n	8004c46 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	23a4      	movs	r3, #164	@ 0xa4
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	5cd3      	ldrb	r3, [r2, r3]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d101      	bne.n	8004c56 <HAL_PCD_EP_Open+0xae>
 8004c52:	2302      	movs	r3, #2
 8004c54:	e013      	b.n	8004c7e <HAL_PCD_EP_Open+0xd6>
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	23a4      	movs	r3, #164	@ 0xa4
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	0011      	movs	r1, r2
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f004 fe95 	bl	8009998 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	23a4      	movs	r3, #164	@ 0xa4
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	2100      	movs	r1, #0
 8004c76:	54d1      	strb	r1, [r2, r3]

  return ret;
 8004c78:	230b      	movs	r3, #11
 8004c7a:	18fb      	adds	r3, r7, r3
 8004c7c:	781b      	ldrb	r3, [r3, #0]
}
 8004c7e:	0018      	movs	r0, r3
 8004c80:	46bd      	mov	sp, r7
 8004c82:	b005      	add	sp, #20
 8004c84:	bd90      	pop	{r4, r7, pc}

08004c86 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b084      	sub	sp, #16
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	000a      	movs	r2, r1
 8004c90:	1cfb      	adds	r3, r7, #3
 8004c92:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c94:	1cfb      	adds	r3, r7, #3
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	b25b      	sxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	da0f      	bge.n	8004cbe <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c9e:	1cfb      	adds	r3, r7, #3
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	2207      	movs	r2, #7
 8004ca4:	401a      	ands	r2, r3
 8004ca6:	0013      	movs	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	189b      	adds	r3, r3, r2
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	3310      	adds	r3, #16
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	18d3      	adds	r3, r2, r3
 8004cb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	705a      	strb	r2, [r3, #1]
 8004cbc:	e00f      	b.n	8004cde <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cbe:	1cfb      	adds	r3, r7, #3
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	2207      	movs	r2, #7
 8004cc4:	401a      	ands	r2, r3
 8004cc6:	0013      	movs	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	189b      	adds	r3, r3, r2
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	3351      	adds	r3, #81	@ 0x51
 8004cd0:	33ff      	adds	r3, #255	@ 0xff
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	18d3      	adds	r3, r2, r3
 8004cd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cde:	1cfb      	adds	r3, r7, #3
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	2207      	movs	r2, #7
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	23a4      	movs	r3, #164	@ 0xa4
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	5cd3      	ldrb	r3, [r2, r3]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d101      	bne.n	8004cfc <HAL_PCD_EP_Close+0x76>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e011      	b.n	8004d20 <HAL_PCD_EP_Close+0x9a>
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	23a4      	movs	r3, #164	@ 0xa4
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	2101      	movs	r1, #1
 8004d04:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	0011      	movs	r1, r2
 8004d0e:	0018      	movs	r0, r3
 8004d10:	f005 f9ea 	bl	800a0e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	23a4      	movs	r3, #164	@ 0xa4
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	0018      	movs	r0, r3
 8004d22:	46bd      	mov	sp, r7
 8004d24:	b004      	add	sp, #16
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	607a      	str	r2, [r7, #4]
 8004d32:	603b      	str	r3, [r7, #0]
 8004d34:	200b      	movs	r0, #11
 8004d36:	183b      	adds	r3, r7, r0
 8004d38:	1c0a      	adds	r2, r1, #0
 8004d3a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d3c:	0001      	movs	r1, r0
 8004d3e:	187b      	adds	r3, r7, r1
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	2207      	movs	r2, #7
 8004d44:	401a      	ands	r2, r3
 8004d46:	0013      	movs	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	189b      	adds	r3, r3, r2
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	3351      	adds	r3, #81	@ 0x51
 8004d50:	33ff      	adds	r3, #255	@ 0xff
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	18d3      	adds	r3, r2, r3
 8004d56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	2200      	movs	r2, #0
 8004d68:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d70:	187b      	adds	r3, r7, r1
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2207      	movs	r2, #7
 8004d76:	4013      	ands	r3, r2
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	0011      	movs	r1, r2
 8004d86:	0018      	movs	r0, r3
 8004d88:	f005 fb6e 	bl	800a468 <USB_EPStartXfer>

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	0018      	movs	r0, r3
 8004d90:	46bd      	mov	sp, r7
 8004d92:	b006      	add	sp, #24
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b082      	sub	sp, #8
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	000a      	movs	r2, r1
 8004da0:	1cfb      	adds	r3, r7, #3
 8004da2:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004da4:	1cfb      	adds	r3, r7, #3
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2207      	movs	r2, #7
 8004daa:	401a      	ands	r2, r3
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	23b6      	movs	r3, #182	@ 0xb6
 8004db0:	0059      	lsls	r1, r3, #1
 8004db2:	0013      	movs	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	189b      	adds	r3, r3, r2
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	18c3      	adds	r3, r0, r3
 8004dbc:	185b      	adds	r3, r3, r1
 8004dbe:	681b      	ldr	r3, [r3, #0]
}
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	b002      	add	sp, #8
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	607a      	str	r2, [r7, #4]
 8004dd2:	603b      	str	r3, [r7, #0]
 8004dd4:	200b      	movs	r0, #11
 8004dd6:	183b      	adds	r3, r7, r0
 8004dd8:	1c0a      	adds	r2, r1, #0
 8004dda:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ddc:	183b      	adds	r3, r7, r0
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	2207      	movs	r2, #7
 8004de2:	401a      	ands	r2, r3
 8004de4:	0013      	movs	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	189b      	adds	r3, r3, r2
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	3310      	adds	r3, #16
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	18d3      	adds	r3, r2, r3
 8004df2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2224      	movs	r2, #36	@ 0x24
 8004e04:	2101      	movs	r1, #1
 8004e06:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2200      	movs	r2, #0
 8004e12:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	2201      	movs	r2, #1
 8004e18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e1a:	183b      	adds	r3, r7, r0
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2207      	movs	r2, #7
 8004e20:	4013      	ands	r3, r2
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	0011      	movs	r1, r2
 8004e30:	0018      	movs	r0, r3
 8004e32:	f005 fb19 	bl	800a468 <USB_EPStartXfer>

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	0018      	movs	r0, r3
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	b006      	add	sp, #24
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	000a      	movs	r2, r1
 8004e4a:	1cfb      	adds	r3, r7, #3
 8004e4c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004e4e:	1cfb      	adds	r3, r7, #3
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	2207      	movs	r2, #7
 8004e54:	4013      	ands	r3, r2
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	7912      	ldrb	r2, [r2, #4]
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d901      	bls.n	8004e62 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e046      	b.n	8004ef0 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e62:	1cfb      	adds	r3, r7, #3
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	b25b      	sxtb	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	da0f      	bge.n	8004e8c <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e6c:	1cfb      	adds	r3, r7, #3
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	2207      	movs	r2, #7
 8004e72:	401a      	ands	r2, r3
 8004e74:	0013      	movs	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	189b      	adds	r3, r3, r2
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	3310      	adds	r3, #16
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	18d3      	adds	r3, r2, r3
 8004e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2201      	movs	r2, #1
 8004e88:	705a      	strb	r2, [r3, #1]
 8004e8a:	e00d      	b.n	8004ea8 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e8c:	1cfb      	adds	r3, r7, #3
 8004e8e:	781a      	ldrb	r2, [r3, #0]
 8004e90:	0013      	movs	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	189b      	adds	r3, r3, r2
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	3351      	adds	r3, #81	@ 0x51
 8004e9a:	33ff      	adds	r3, #255	@ 0xff
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	18d3      	adds	r3, r2, r3
 8004ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004eae:	1cfb      	adds	r3, r7, #3
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	2207      	movs	r2, #7
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	23a4      	movs	r3, #164	@ 0xa4
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	5cd3      	ldrb	r3, [r2, r3]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_PCD_EP_SetStall+0x8c>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e011      	b.n	8004ef0 <HAL_PCD_EP_SetStall+0xb0>
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	23a4      	movs	r3, #164	@ 0xa4
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	0011      	movs	r1, r2
 8004ede:	0018      	movs	r0, r3
 8004ee0:	f006 fbf2 	bl	800b6c8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	23a4      	movs	r3, #164	@ 0xa4
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	2100      	movs	r1, #0
 8004eec:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	b004      	add	sp, #16
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	000a      	movs	r2, r1
 8004f02:	1cfb      	adds	r3, r7, #3
 8004f04:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004f06:	1cfb      	adds	r3, r7, #3
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	220f      	movs	r2, #15
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	7912      	ldrb	r2, [r2, #4]
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d901      	bls.n	8004f1a <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e048      	b.n	8004fac <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f1a:	1cfb      	adds	r3, r7, #3
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	b25b      	sxtb	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	da0f      	bge.n	8004f44 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f24:	1cfb      	adds	r3, r7, #3
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2207      	movs	r2, #7
 8004f2a:	401a      	ands	r2, r3
 8004f2c:	0013      	movs	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	189b      	adds	r3, r3, r2
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	3310      	adds	r3, #16
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	18d3      	adds	r3, r2, r3
 8004f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	705a      	strb	r2, [r3, #1]
 8004f42:	e00f      	b.n	8004f64 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f44:	1cfb      	adds	r3, r7, #3
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	2207      	movs	r2, #7
 8004f4a:	401a      	ands	r2, r3
 8004f4c:	0013      	movs	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	189b      	adds	r3, r3, r2
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	3351      	adds	r3, #81	@ 0x51
 8004f56:	33ff      	adds	r3, #255	@ 0xff
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	18d3      	adds	r3, r2, r3
 8004f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f6a:	1cfb      	adds	r3, r7, #3
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2207      	movs	r2, #7
 8004f70:	4013      	ands	r3, r2
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	23a4      	movs	r3, #164	@ 0xa4
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	5cd3      	ldrb	r3, [r2, r3]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_PCD_EP_ClrStall+0x90>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e011      	b.n	8004fac <HAL_PCD_EP_ClrStall+0xb4>
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	23a4      	movs	r3, #164	@ 0xa4
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	2101      	movs	r1, #1
 8004f90:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	0011      	movs	r1, r2
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	f006 fbe4 	bl	800b768 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	23a4      	movs	r3, #164	@ 0xa4
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	0018      	movs	r0, r3
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	b004      	add	sp, #16
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004fb4:	b5b0      	push	{r4, r5, r7, lr}
 8004fb6:	b096      	sub	sp, #88	@ 0x58
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004fbc:	f000 fbea 	bl	8005794 <PCD_EP_ISR_Handler+0x7e0>
  {
    wIstr = hpcd->Instance->ISTR;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	2048      	movs	r0, #72	@ 0x48
 8004fc6:	183b      	adds	r3, r7, r0
 8004fc8:	2144      	movs	r1, #68	@ 0x44
 8004fca:	5a52      	ldrh	r2, [r2, r1]
 8004fcc:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004fce:	183b      	adds	r3, r7, r0
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	244f      	movs	r4, #79	@ 0x4f
 8004fd6:	193b      	adds	r3, r7, r4
 8004fd8:	210f      	movs	r1, #15
 8004fda:	400a      	ands	r2, r1
 8004fdc:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8004fde:	193b      	adds	r3, r7, r4
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d000      	beq.n	8004fe8 <PCD_EP_ISR_Handler+0x34>
 8004fe6:	e18d      	b.n	8005304 <PCD_EP_ISR_Handler+0x350>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004fe8:	183b      	adds	r3, r7, r0
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	2210      	movs	r2, #16
 8004fee:	4013      	ands	r3, r2
 8004ff0:	d152      	bne.n	8005098 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	200e      	movs	r0, #14
 8004ffc:	183b      	adds	r3, r7, r0
 8004ffe:	49ba      	ldr	r1, [pc, #744]	@ (80052e8 <PCD_EP_ISR_Handler+0x334>)
 8005000:	400a      	ands	r2, r1
 8005002:	801a      	strh	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	183a      	adds	r2, r7, r0
 800500a:	8812      	ldrh	r2, [r2, #0]
 800500c:	49b7      	ldr	r1, [pc, #732]	@ (80052ec <PCD_EP_ISR_Handler+0x338>)
 800500e:	430a      	orrs	r2, r1
 8005010:	b292      	uxth	r2, r2
 8005012:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3310      	adds	r3, #16
 8005018:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2250      	movs	r2, #80	@ 0x50
 8005020:	5a9b      	ldrh	r3, [r3, r2]
 8005022:	b29b      	uxth	r3, r3
 8005024:	001a      	movs	r2, r3
 8005026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	18d2      	adds	r2, r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	18d3      	adds	r3, r2, r3
 8005034:	4aae      	ldr	r2, [pc, #696]	@ (80052f0 <PCD_EP_ISR_Handler+0x33c>)
 8005036:	4694      	mov	ip, r2
 8005038:	4463      	add	r3, ip
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	059b      	lsls	r3, r3, #22
 800503e:	0d9a      	lsrs	r2, r3, #22
 8005040:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005042:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005046:	695a      	ldr	r2, [r3, #20]
 8005048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	18d2      	adds	r2, r2, r3
 800504e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005050:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2100      	movs	r1, #0
 8005056:	0018      	movs	r0, r3
 8005058:	f008 fc96 	bl	800d988 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	7b1b      	ldrb	r3, [r3, #12]
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <PCD_EP_ISR_Handler+0xb6>
 8005066:	f000 fb95 	bl	8005794 <PCD_EP_ISR_Handler+0x7e0>
 800506a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <PCD_EP_ISR_Handler+0xc2>
 8005072:	f000 fb8f 	bl	8005794 <PCD_EP_ISR_Handler+0x7e0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	7b1b      	ldrb	r3, [r3, #12]
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2280      	movs	r2, #128	@ 0x80
 800507e:	4252      	negs	r2, r2
 8005080:	4313      	orrs	r3, r2
 8005082:	b2da      	uxtb	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	0011      	movs	r1, r2
 800508a:	224c      	movs	r2, #76	@ 0x4c
 800508c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	731a      	strb	r2, [r3, #12]
 8005094:	f000 fb7e 	bl	8005794 <PCD_EP_ISR_Handler+0x7e0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3351      	adds	r3, #81	@ 0x51
 800509c:	33ff      	adds	r3, #255	@ 0xff
 800509e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	214c      	movs	r1, #76	@ 0x4c
 80050a6:	187b      	adds	r3, r7, r1
 80050a8:	8812      	ldrh	r2, [r2, #0]
 80050aa:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80050ac:	187b      	adds	r3, r7, r1
 80050ae:	881a      	ldrh	r2, [r3, #0]
 80050b0:	2380      	movs	r3, #128	@ 0x80
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	4013      	ands	r3, r2
 80050b6:	d037      	beq.n	8005128 <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2250      	movs	r2, #80	@ 0x50
 80050be:	5a9b      	ldrh	r3, [r3, r2]
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	001a      	movs	r2, r3
 80050c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	18d2      	adds	r2, r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	18d3      	adds	r3, r2, r3
 80050d2:	4a88      	ldr	r2, [pc, #544]	@ (80052f4 <PCD_EP_ISR_Handler+0x340>)
 80050d4:	4694      	mov	ip, r2
 80050d6:	4463      	add	r3, ip
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	059b      	lsls	r3, r3, #22
 80050dc:	0d9a      	lsrs	r2, r3, #22
 80050de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050e0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6818      	ldr	r0, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	22a6      	movs	r2, #166	@ 0xa6
 80050ea:	0092      	lsls	r2, r2, #2
 80050ec:	1899      	adds	r1, r3, r2
 80050ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050f0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80050f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050f4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	f006 fc6a 	bl	800b9d0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	b29a      	uxth	r2, r3
 8005104:	2010      	movs	r0, #16
 8005106:	183b      	adds	r3, r7, r0
 8005108:	497b      	ldr	r1, [pc, #492]	@ (80052f8 <PCD_EP_ISR_Handler+0x344>)
 800510a:	400a      	ands	r2, r1
 800510c:	801a      	strh	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	183a      	adds	r2, r7, r0
 8005114:	8812      	ldrh	r2, [r2, #0]
 8005116:	2180      	movs	r1, #128	@ 0x80
 8005118:	430a      	orrs	r2, r1
 800511a:	b292      	uxth	r2, r2
 800511c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	0018      	movs	r0, r3
 8005122:	f008 fbfb 	bl	800d91c <HAL_PCD_SetupStageCallback>
 8005126:	e335      	b.n	8005794 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005128:	234c      	movs	r3, #76	@ 0x4c
 800512a:	18fb      	adds	r3, r7, r3
 800512c:	2200      	movs	r2, #0
 800512e:	5e9b      	ldrsh	r3, [r3, r2]
 8005130:	2b00      	cmp	r3, #0
 8005132:	db00      	blt.n	8005136 <PCD_EP_ISR_Handler+0x182>
 8005134:	e32e      	b.n	8005794 <PCD_EP_ISR_Handler+0x7e0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	b29a      	uxth	r2, r3
 800513e:	201e      	movs	r0, #30
 8005140:	183b      	adds	r3, r7, r0
 8005142:	496d      	ldr	r1, [pc, #436]	@ (80052f8 <PCD_EP_ISR_Handler+0x344>)
 8005144:	400a      	ands	r2, r1
 8005146:	801a      	strh	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	183a      	adds	r2, r7, r0
 800514e:	8812      	ldrh	r2, [r2, #0]
 8005150:	2180      	movs	r1, #128	@ 0x80
 8005152:	430a      	orrs	r2, r1
 8005154:	b292      	uxth	r2, r2
 8005156:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2250      	movs	r2, #80	@ 0x50
 800515e:	5a9b      	ldrh	r3, [r3, r2]
 8005160:	b29b      	uxth	r3, r3
 8005162:	001a      	movs	r2, r3
 8005164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	18d2      	adds	r2, r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	18d3      	adds	r3, r2, r3
 8005172:	4a60      	ldr	r2, [pc, #384]	@ (80052f4 <PCD_EP_ISR_Handler+0x340>)
 8005174:	4694      	mov	ip, r2
 8005176:	4463      	add	r3, ip
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	059b      	lsls	r3, r3, #22
 800517c:	0d9a      	lsrs	r2, r3, #22
 800517e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005180:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d01a      	beq.n	80051c0 <PCD_EP_ISR_Handler+0x20c>
 800518a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d016      	beq.n	80051c0 <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005198:	6959      	ldr	r1, [r3, #20]
 800519a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800519c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800519e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051a0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	f006 fc14 	bl	800b9d0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80051a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051aa:	695a      	ldr	r2, [r3, #20]
 80051ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	18d2      	adds	r2, r2, r3
 80051b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051b4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2100      	movs	r1, #0
 80051ba:	0018      	movs	r0, r3
 80051bc:	f008 fbc3 	bl	800d946 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	214c      	movs	r1, #76	@ 0x4c
 80051c6:	187b      	adds	r3, r7, r1
 80051c8:	8812      	ldrh	r2, [r2, #0]
 80051ca:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80051cc:	187b      	adds	r3, r7, r1
 80051ce:	881a      	ldrh	r2, [r3, #0]
 80051d0:	2380      	movs	r3, #128	@ 0x80
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	4013      	ands	r3, r2
 80051d6:	d000      	beq.n	80051da <PCD_EP_ISR_Handler+0x226>
 80051d8:	e2dc      	b.n	8005794 <PCD_EP_ISR_Handler+0x7e0>
 80051da:	187b      	adds	r3, r7, r1
 80051dc:	881a      	ldrh	r2, [r3, #0]
 80051de:	23c0      	movs	r3, #192	@ 0xc0
 80051e0:	019b      	lsls	r3, r3, #6
 80051e2:	401a      	ands	r2, r3
 80051e4:	23c0      	movs	r3, #192	@ 0xc0
 80051e6:	019b      	lsls	r3, r3, #6
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d100      	bne.n	80051ee <PCD_EP_ISR_Handler+0x23a>
 80051ec:	e2d2      	b.n	8005794 <PCD_EP_ISR_Handler+0x7e0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	61bb      	str	r3, [r7, #24]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2250      	movs	r2, #80	@ 0x50
 80051fa:	5a9b      	ldrh	r3, [r3, r2]
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	001a      	movs	r2, r3
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	189b      	adds	r3, r3, r2
 8005204:	61bb      	str	r3, [r7, #24]
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	4a3a      	ldr	r2, [pc, #232]	@ (80052f4 <PCD_EP_ISR_Handler+0x340>)
 800520a:	4694      	mov	ip, r2
 800520c:	4463      	add	r3, ip
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	b29b      	uxth	r3, r3
 8005216:	059b      	lsls	r3, r3, #22
 8005218:	0d9b      	lsrs	r3, r3, #22
 800521a:	b29a      	uxth	r2, r3
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	801a      	strh	r2, [r3, #0]
 8005220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d108      	bne.n	800523a <PCD_EP_ISR_Handler+0x286>
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	b29b      	uxth	r3, r3
 800522e:	4a2f      	ldr	r2, [pc, #188]	@ (80052ec <PCD_EP_ISR_Handler+0x338>)
 8005230:	4313      	orrs	r3, r2
 8005232:	b29a      	uxth	r2, r3
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	801a      	strh	r2, [r3, #0]
 8005238:	e035      	b.n	80052a6 <PCD_EP_ISR_Handler+0x2f2>
 800523a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005240:	d817      	bhi.n	8005272 <PCD_EP_ISR_Handler+0x2be>
 8005242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	085b      	lsrs	r3, r3, #1
 8005248:	647b      	str	r3, [r7, #68]	@ 0x44
 800524a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	2201      	movs	r2, #1
 8005250:	4013      	ands	r3, r2
 8005252:	d002      	beq.n	800525a <PCD_EP_ISR_Handler+0x2a6>
 8005254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005256:	3301      	adds	r3, #1
 8005258:	647b      	str	r3, [r7, #68]	@ 0x44
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	b29a      	uxth	r2, r3
 8005260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005262:	b29b      	uxth	r3, r3
 8005264:	029b      	lsls	r3, r3, #10
 8005266:	b29b      	uxth	r3, r3
 8005268:	4313      	orrs	r3, r2
 800526a:	b29a      	uxth	r2, r3
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	801a      	strh	r2, [r3, #0]
 8005270:	e019      	b.n	80052a6 <PCD_EP_ISR_Handler+0x2f2>
 8005272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	095b      	lsrs	r3, r3, #5
 8005278:	647b      	str	r3, [r7, #68]	@ 0x44
 800527a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	221f      	movs	r2, #31
 8005280:	4013      	ands	r3, r2
 8005282:	d102      	bne.n	800528a <PCD_EP_ISR_Handler+0x2d6>
 8005284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005286:	3b01      	subs	r3, #1
 8005288:	647b      	str	r3, [r7, #68]	@ 0x44
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	b29a      	uxth	r2, r3
 8005290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005292:	b29b      	uxth	r3, r3
 8005294:	029b      	lsls	r3, r3, #10
 8005296:	b29b      	uxth	r3, r3
 8005298:	4313      	orrs	r3, r2
 800529a:	b29b      	uxth	r3, r3
 800529c:	4a13      	ldr	r2, [pc, #76]	@ (80052ec <PCD_EP_ISR_Handler+0x338>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	2012      	movs	r0, #18
 80052b0:	183b      	adds	r3, r7, r0
 80052b2:	4912      	ldr	r1, [pc, #72]	@ (80052fc <PCD_EP_ISR_Handler+0x348>)
 80052b4:	400a      	ands	r2, r1
 80052b6:	801a      	strh	r2, [r3, #0]
 80052b8:	183b      	adds	r3, r7, r0
 80052ba:	183a      	adds	r2, r7, r0
 80052bc:	8812      	ldrh	r2, [r2, #0]
 80052be:	2180      	movs	r1, #128	@ 0x80
 80052c0:	0149      	lsls	r1, r1, #5
 80052c2:	404a      	eors	r2, r1
 80052c4:	801a      	strh	r2, [r3, #0]
 80052c6:	183b      	adds	r3, r7, r0
 80052c8:	183a      	adds	r2, r7, r0
 80052ca:	8812      	ldrh	r2, [r2, #0]
 80052cc:	2180      	movs	r1, #128	@ 0x80
 80052ce:	0189      	lsls	r1, r1, #6
 80052d0:	404a      	eors	r2, r1
 80052d2:	801a      	strh	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	183a      	adds	r2, r7, r0
 80052da:	8812      	ldrh	r2, [r2, #0]
 80052dc:	4908      	ldr	r1, [pc, #32]	@ (8005300 <PCD_EP_ISR_Handler+0x34c>)
 80052de:	430a      	orrs	r2, r1
 80052e0:	b292      	uxth	r2, r2
 80052e2:	801a      	strh	r2, [r3, #0]
 80052e4:	e256      	b.n	8005794 <PCD_EP_ISR_Handler+0x7e0>
 80052e6:	46c0      	nop			@ (mov r8, r8)
 80052e8:	ffff8f0f 	.word	0xffff8f0f
 80052ec:	ffff8000 	.word	0xffff8000
 80052f0:	00000402 	.word	0x00000402
 80052f4:	00000406 	.word	0x00000406
 80052f8:	00000f8f 	.word	0x00000f8f
 80052fc:	ffffbf8f 	.word	0xffffbf8f
 8005300:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	001a      	movs	r2, r3
 800530a:	204f      	movs	r0, #79	@ 0x4f
 800530c:	183b      	adds	r3, r7, r0
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	18d2      	adds	r2, r2, r3
 8005314:	214c      	movs	r1, #76	@ 0x4c
 8005316:	187b      	adds	r3, r7, r1
 8005318:	8812      	ldrh	r2, [r2, #0]
 800531a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800531c:	187b      	adds	r3, r7, r1
 800531e:	2200      	movs	r2, #0
 8005320:	5e9b      	ldrsh	r3, [r3, r2]
 8005322:	2b00      	cmp	r3, #0
 8005324:	db00      	blt.n	8005328 <PCD_EP_ISR_Handler+0x374>
 8005326:	e0fa      	b.n	800551e <PCD_EP_ISR_Handler+0x56a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	001a      	movs	r2, r3
 800532e:	183b      	adds	r3, r7, r0
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	18d3      	adds	r3, r2, r3
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	b29a      	uxth	r2, r3
 800533a:	244a      	movs	r4, #74	@ 0x4a
 800533c:	193b      	adds	r3, r7, r4
 800533e:	49d1      	ldr	r1, [pc, #836]	@ (8005684 <PCD_EP_ISR_Handler+0x6d0>)
 8005340:	400a      	ands	r2, r1
 8005342:	801a      	strh	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	001a      	movs	r2, r3
 800534a:	183b      	adds	r3, r7, r0
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	18d3      	adds	r3, r2, r3
 8005352:	193a      	adds	r2, r7, r4
 8005354:	8812      	ldrh	r2, [r2, #0]
 8005356:	2180      	movs	r1, #128	@ 0x80
 8005358:	430a      	orrs	r2, r1
 800535a:	b292      	uxth	r2, r2
 800535c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800535e:	183b      	adds	r3, r7, r0
 8005360:	781a      	ldrb	r2, [r3, #0]
 8005362:	0013      	movs	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	189b      	adds	r3, r3, r2
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	3351      	adds	r3, #81	@ 0x51
 800536c:	33ff      	adds	r3, #255	@ 0xff
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	18d3      	adds	r3, r2, r3
 8005372:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005376:	7b1b      	ldrb	r3, [r3, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d125      	bne.n	80053c8 <PCD_EP_ISR_Handler+0x414>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2250      	movs	r2, #80	@ 0x50
 8005382:	5a9b      	ldrh	r3, [r3, r2]
 8005384:	b29b      	uxth	r3, r3
 8005386:	001a      	movs	r2, r3
 8005388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	00db      	lsls	r3, r3, #3
 800538e:	18d2      	adds	r2, r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	18d3      	adds	r3, r2, r3
 8005396:	4abc      	ldr	r2, [pc, #752]	@ (8005688 <PCD_EP_ISR_Handler+0x6d4>)
 8005398:	4694      	mov	ip, r2
 800539a:	4463      	add	r3, ip
 800539c:	881a      	ldrh	r2, [r3, #0]
 800539e:	2450      	movs	r4, #80	@ 0x50
 80053a0:	193b      	adds	r3, r7, r4
 80053a2:	0592      	lsls	r2, r2, #22
 80053a4:	0d92      	lsrs	r2, r2, #22
 80053a6:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80053a8:	193b      	adds	r3, r7, r4
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d100      	bne.n	80053b2 <PCD_EP_ISR_Handler+0x3fe>
 80053b0:	e08d      	b.n	80054ce <PCD_EP_ISR_Handler+0x51a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6818      	ldr	r0, [r3, #0]
 80053b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053b8:	6959      	ldr	r1, [r3, #20]
 80053ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053bc:	88da      	ldrh	r2, [r3, #6]
 80053be:	193b      	adds	r3, r7, r4
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	f006 fb05 	bl	800b9d0 <USB_ReadPMA>
 80053c6:	e082      	b.n	80054ce <PCD_EP_ISR_Handler+0x51a>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80053c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053ca:	78db      	ldrb	r3, [r3, #3]
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d10c      	bne.n	80053ea <PCD_EP_ISR_Handler+0x436>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80053d0:	2350      	movs	r3, #80	@ 0x50
 80053d2:	18fc      	adds	r4, r7, r3
 80053d4:	234c      	movs	r3, #76	@ 0x4c
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	881a      	ldrh	r2, [r3, #0]
 80053da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	0018      	movs	r0, r3
 80053e0:	f000 f9ec 	bl	80057bc <HAL_PCD_EP_DB_Receive>
 80053e4:	0003      	movs	r3, r0
 80053e6:	8023      	strh	r3, [r4, #0]
 80053e8:	e071      	b.n	80054ce <PCD_EP_ISR_Handler+0x51a>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	001a      	movs	r2, r3
 80053f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	18d3      	adds	r3, r2, r3
 80053f8:	881b      	ldrh	r3, [r3, #0]
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	2052      	movs	r0, #82	@ 0x52
 80053fe:	183b      	adds	r3, r7, r0
 8005400:	49a2      	ldr	r1, [pc, #648]	@ (800568c <PCD_EP_ISR_Handler+0x6d8>)
 8005402:	400a      	ands	r2, r1
 8005404:	801a      	strh	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	001a      	movs	r2, r3
 800540c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	18d3      	adds	r3, r2, r3
 8005414:	183a      	adds	r2, r7, r0
 8005416:	8812      	ldrh	r2, [r2, #0]
 8005418:	499d      	ldr	r1, [pc, #628]	@ (8005690 <PCD_EP_ISR_Handler+0x6dc>)
 800541a:	430a      	orrs	r2, r1
 800541c:	b292      	uxth	r2, r2
 800541e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	001a      	movs	r2, r3
 8005426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	18d3      	adds	r3, r2, r3
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	b29b      	uxth	r3, r3
 8005432:	001a      	movs	r2, r3
 8005434:	2380      	movs	r3, #128	@ 0x80
 8005436:	01db      	lsls	r3, r3, #7
 8005438:	4013      	ands	r3, r2
 800543a:	d024      	beq.n	8005486 <PCD_EP_ISR_Handler+0x4d2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2250      	movs	r2, #80	@ 0x50
 8005442:	5a9b      	ldrh	r3, [r3, r2]
 8005444:	b29b      	uxth	r3, r3
 8005446:	001a      	movs	r2, r3
 8005448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	18d2      	adds	r2, r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	18d3      	adds	r3, r2, r3
 8005456:	4a8f      	ldr	r2, [pc, #572]	@ (8005694 <PCD_EP_ISR_Handler+0x6e0>)
 8005458:	4694      	mov	ip, r2
 800545a:	4463      	add	r3, ip
 800545c:	881a      	ldrh	r2, [r3, #0]
 800545e:	2450      	movs	r4, #80	@ 0x50
 8005460:	193b      	adds	r3, r7, r4
 8005462:	0592      	lsls	r2, r2, #22
 8005464:	0d92      	lsrs	r2, r2, #22
 8005466:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8005468:	193b      	adds	r3, r7, r4
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d02e      	beq.n	80054ce <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6818      	ldr	r0, [r3, #0]
 8005474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005476:	6959      	ldr	r1, [r3, #20]
 8005478:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800547a:	891a      	ldrh	r2, [r3, #8]
 800547c:	193b      	adds	r3, r7, r4
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	f006 faa6 	bl	800b9d0 <USB_ReadPMA>
 8005484:	e023      	b.n	80054ce <PCD_EP_ISR_Handler+0x51a>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2250      	movs	r2, #80	@ 0x50
 800548c:	5a9b      	ldrh	r3, [r3, r2]
 800548e:	b29b      	uxth	r3, r3
 8005490:	001a      	movs	r2, r3
 8005492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	18d2      	adds	r2, r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	18d3      	adds	r3, r2, r3
 80054a0:	4a79      	ldr	r2, [pc, #484]	@ (8005688 <PCD_EP_ISR_Handler+0x6d4>)
 80054a2:	4694      	mov	ip, r2
 80054a4:	4463      	add	r3, ip
 80054a6:	881a      	ldrh	r2, [r3, #0]
 80054a8:	2450      	movs	r4, #80	@ 0x50
 80054aa:	193b      	adds	r3, r7, r4
 80054ac:	0592      	lsls	r2, r2, #22
 80054ae:	0d92      	lsrs	r2, r2, #22
 80054b0:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80054b2:	193b      	adds	r3, r7, r4
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d009      	beq.n	80054ce <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6818      	ldr	r0, [r3, #0]
 80054be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054c0:	6959      	ldr	r1, [r3, #20]
 80054c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054c4:	895a      	ldrh	r2, [r3, #10]
 80054c6:	193b      	adds	r3, r7, r4
 80054c8:	881b      	ldrh	r3, [r3, #0]
 80054ca:	f006 fa81 	bl	800b9d0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80054ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054d0:	69da      	ldr	r2, [r3, #28]
 80054d2:	2150      	movs	r1, #80	@ 0x50
 80054d4:	187b      	adds	r3, r7, r1
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	18d2      	adds	r2, r2, r3
 80054da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80054de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054e0:	695a      	ldr	r2, [r3, #20]
 80054e2:	187b      	adds	r3, r7, r1
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	18d2      	adds	r2, r2, r3
 80054e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054ea:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80054ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d005      	beq.n	8005500 <PCD_EP_ISR_Handler+0x54c>
 80054f4:	187b      	adds	r3, r7, r1
 80054f6:	881a      	ldrh	r2, [r3, #0]
 80054f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d207      	bcs.n	8005510 <PCD_EP_ISR_Handler+0x55c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005502:	781a      	ldrb	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	0011      	movs	r1, r2
 8005508:	0018      	movs	r0, r3
 800550a:	f008 fa1c 	bl	800d946 <HAL_PCD_DataOutStageCallback>
 800550e:	e006      	b.n	800551e <PCD_EP_ISR_Handler+0x56a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005516:	0011      	movs	r1, r2
 8005518:	0018      	movs	r0, r3
 800551a:	f004 ffa5 	bl	800a468 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800551e:	244c      	movs	r4, #76	@ 0x4c
 8005520:	193b      	adds	r3, r7, r4
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	2280      	movs	r2, #128	@ 0x80
 8005526:	4013      	ands	r3, r2
 8005528:	d100      	bne.n	800552c <PCD_EP_ISR_Handler+0x578>
 800552a:	e133      	b.n	8005794 <PCD_EP_ISR_Handler+0x7e0>
      {
        ep = &hpcd->IN_ep[epindex];
 800552c:	204f      	movs	r0, #79	@ 0x4f
 800552e:	183b      	adds	r3, r7, r0
 8005530:	781a      	ldrb	r2, [r3, #0]
 8005532:	0013      	movs	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	189b      	adds	r3, r3, r2
 8005538:	00db      	lsls	r3, r3, #3
 800553a:	3310      	adds	r3, #16
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	18d3      	adds	r3, r2, r3
 8005540:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	001a      	movs	r2, r3
 8005548:	183b      	adds	r3, r7, r0
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	18d3      	adds	r3, r2, r3
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	b29a      	uxth	r2, r3
 8005554:	2542      	movs	r5, #66	@ 0x42
 8005556:	197b      	adds	r3, r7, r5
 8005558:	494f      	ldr	r1, [pc, #316]	@ (8005698 <PCD_EP_ISR_Handler+0x6e4>)
 800555a:	400a      	ands	r2, r1
 800555c:	801a      	strh	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	001a      	movs	r2, r3
 8005564:	183b      	adds	r3, r7, r0
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	18d3      	adds	r3, r2, r3
 800556c:	197a      	adds	r2, r7, r5
 800556e:	8812      	ldrh	r2, [r2, #0]
 8005570:	494a      	ldr	r1, [pc, #296]	@ (800569c <PCD_EP_ISR_Handler+0x6e8>)
 8005572:	430a      	orrs	r2, r1
 8005574:	b292      	uxth	r2, r2
 8005576:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800557a:	78db      	ldrb	r3, [r3, #3]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d000      	beq.n	8005582 <PCD_EP_ISR_Handler+0x5ce>
 8005580:	e0af      	b.n	80056e2 <PCD_EP_ISR_Handler+0x72e>
        {
          ep->xfer_len = 0U;
 8005582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005584:	2200      	movs	r2, #0
 8005586:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005588:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800558a:	7b1b      	ldrb	r3, [r3, #12]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d100      	bne.n	8005592 <PCD_EP_ISR_Handler+0x5de>
 8005590:	e09f      	b.n	80056d2 <PCD_EP_ISR_Handler+0x71e>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005592:	193b      	adds	r3, r7, r4
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	2240      	movs	r2, #64	@ 0x40
 8005598:	4013      	ands	r3, r2
 800559a:	d046      	beq.n	800562a <PCD_EP_ISR_Handler+0x676>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800559c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800559e:	785b      	ldrb	r3, [r3, #1]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d125      	bne.n	80055f0 <PCD_EP_ISR_Handler+0x63c>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2250      	movs	r2, #80	@ 0x50
 80055b0:	5a9b      	ldrh	r3, [r3, r2]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	001a      	movs	r2, r3
 80055b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b8:	189b      	adds	r3, r3, r2
 80055ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80055bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	00da      	lsls	r2, r3, #3
 80055c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c4:	18d3      	adds	r3, r2, r3
 80055c6:	4a33      	ldr	r2, [pc, #204]	@ (8005694 <PCD_EP_ISR_Handler+0x6e0>)
 80055c8:	4694      	mov	ip, r2
 80055ca:	4463      	add	r3, ip
 80055cc:	623b      	str	r3, [r7, #32]
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	059b      	lsls	r3, r3, #22
 80055d6:	0d9b      	lsrs	r3, r3, #22
 80055d8:	b29a      	uxth	r2, r3
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	801a      	strh	r2, [r3, #0]
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	4a2d      	ldr	r2, [pc, #180]	@ (800569c <PCD_EP_ISR_Handler+0x6e8>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	801a      	strh	r2, [r3, #0]
 80055ee:	e070      	b.n	80056d2 <PCD_EP_ISR_Handler+0x71e>
 80055f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055f2:	785b      	ldrb	r3, [r3, #1]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d16c      	bne.n	80056d2 <PCD_EP_ISR_Handler+0x71e>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2250      	movs	r2, #80	@ 0x50
 8005604:	5a9b      	ldrh	r3, [r3, r2]
 8005606:	b29b      	uxth	r3, r3
 8005608:	001a      	movs	r2, r3
 800560a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800560c:	189b      	adds	r3, r3, r2
 800560e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	00da      	lsls	r2, r3, #3
 8005616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005618:	18d3      	adds	r3, r2, r3
 800561a:	4a1e      	ldr	r2, [pc, #120]	@ (8005694 <PCD_EP_ISR_Handler+0x6e0>)
 800561c:	4694      	mov	ip, r2
 800561e:	4463      	add	r3, ip
 8005620:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005624:	2200      	movs	r2, #0
 8005626:	801a      	strh	r2, [r3, #0]
 8005628:	e053      	b.n	80056d2 <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005632:	785b      	ldrb	r3, [r3, #1]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d133      	bne.n	80056a0 <PCD_EP_ISR_Handler+0x6ec>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	637b      	str	r3, [r7, #52]	@ 0x34
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2250      	movs	r2, #80	@ 0x50
 8005644:	5a9b      	ldrh	r3, [r3, r2]
 8005646:	b29b      	uxth	r3, r3
 8005648:	001a      	movs	r2, r3
 800564a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800564c:	189b      	adds	r3, r3, r2
 800564e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	00da      	lsls	r2, r3, #3
 8005656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005658:	18d3      	adds	r3, r2, r3
 800565a:	4a0b      	ldr	r2, [pc, #44]	@ (8005688 <PCD_EP_ISR_Handler+0x6d4>)
 800565c:	4694      	mov	ip, r2
 800565e:	4463      	add	r3, ip
 8005660:	633b      	str	r3, [r7, #48]	@ 0x30
 8005662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	b29b      	uxth	r3, r3
 8005668:	059b      	lsls	r3, r3, #22
 800566a:	0d9b      	lsrs	r3, r3, #22
 800566c:	b29a      	uxth	r2, r3
 800566e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005670:	801a      	strh	r2, [r3, #0]
 8005672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	b29b      	uxth	r3, r3
 8005678:	4a08      	ldr	r2, [pc, #32]	@ (800569c <PCD_EP_ISR_Handler+0x6e8>)
 800567a:	4313      	orrs	r3, r2
 800567c:	b29a      	uxth	r2, r3
 800567e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005680:	801a      	strh	r2, [r3, #0]
 8005682:	e026      	b.n	80056d2 <PCD_EP_ISR_Handler+0x71e>
 8005684:	00000f8f 	.word	0x00000f8f
 8005688:	00000406 	.word	0x00000406
 800568c:	ffff8f8f 	.word	0xffff8f8f
 8005690:	ffff80c0 	.word	0xffff80c0
 8005694:	00000402 	.word	0x00000402
 8005698:	ffff8f0f 	.word	0xffff8f0f
 800569c:	ffff8000 	.word	0xffff8000
 80056a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056a2:	785b      	ldrb	r3, [r3, #1]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d114      	bne.n	80056d2 <PCD_EP_ISR_Handler+0x71e>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2250      	movs	r2, #80	@ 0x50
 80056ae:	5a9b      	ldrh	r3, [r3, r2]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	001a      	movs	r2, r3
 80056b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056b6:	189b      	adds	r3, r3, r2
 80056b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	00da      	lsls	r2, r3, #3
 80056c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056c2:	18d3      	adds	r3, r2, r3
 80056c4:	4a3b      	ldr	r2, [pc, #236]	@ (80057b4 <PCD_EP_ISR_Handler+0x800>)
 80056c6:	4694      	mov	ip, r2
 80056c8:	4463      	add	r3, ip
 80056ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ce:	2200      	movs	r2, #0
 80056d0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056d4:	781a      	ldrb	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	0011      	movs	r1, r2
 80056da:	0018      	movs	r0, r3
 80056dc:	f008 f954 	bl	800d988 <HAL_PCD_DataInStageCallback>
 80056e0:	e058      	b.n	8005794 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80056e2:	234c      	movs	r3, #76	@ 0x4c
 80056e4:	18fb      	adds	r3, r7, r3
 80056e6:	881a      	ldrh	r2, [r3, #0]
 80056e8:	2380      	movs	r3, #128	@ 0x80
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	4013      	ands	r3, r2
 80056ee:	d149      	bne.n	8005784 <PCD_EP_ISR_Handler+0x7d0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2250      	movs	r2, #80	@ 0x50
 80056f6:	5a9b      	ldrh	r3, [r3, r2]
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	001a      	movs	r2, r3
 80056fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	18d2      	adds	r2, r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	18d3      	adds	r3, r2, r3
 800570a:	4a2b      	ldr	r2, [pc, #172]	@ (80057b8 <PCD_EP_ISR_Handler+0x804>)
 800570c:	4694      	mov	ip, r2
 800570e:	4463      	add	r3, ip
 8005710:	881a      	ldrh	r2, [r3, #0]
 8005712:	2140      	movs	r1, #64	@ 0x40
 8005714:	187b      	adds	r3, r7, r1
 8005716:	0592      	lsls	r2, r2, #22
 8005718:	0d92      	lsrs	r2, r2, #22
 800571a:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800571c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800571e:	699a      	ldr	r2, [r3, #24]
 8005720:	187b      	adds	r3, r7, r1
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d907      	bls.n	8005738 <PCD_EP_ISR_Handler+0x784>
            {
              ep->xfer_len -= TxPctSize;
 8005728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800572a:	699a      	ldr	r2, [r3, #24]
 800572c:	187b      	adds	r3, r7, r1
 800572e:	881b      	ldrh	r3, [r3, #0]
 8005730:	1ad2      	subs	r2, r2, r3
 8005732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005734:	619a      	str	r2, [r3, #24]
 8005736:	e002      	b.n	800573e <PCD_EP_ISR_Handler+0x78a>
            }
            else
            {
              ep->xfer_len = 0U;
 8005738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800573a:	2200      	movs	r2, #0
 800573c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800573e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d107      	bne.n	8005756 <PCD_EP_ISR_Handler+0x7a2>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005748:	781a      	ldrb	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	0011      	movs	r1, r2
 800574e:	0018      	movs	r0, r3
 8005750:	f008 f91a 	bl	800d988 <HAL_PCD_DataInStageCallback>
 8005754:	e01e      	b.n	8005794 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005758:	695a      	ldr	r2, [r3, #20]
 800575a:	2140      	movs	r1, #64	@ 0x40
 800575c:	187b      	adds	r3, r7, r1
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	18d2      	adds	r2, r2, r3
 8005762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005764:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005768:	69da      	ldr	r2, [r3, #28]
 800576a:	187b      	adds	r3, r7, r1
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	18d2      	adds	r2, r2, r3
 8005770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005772:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800577a:	0011      	movs	r1, r2
 800577c:	0018      	movs	r0, r3
 800577e:	f004 fe73 	bl	800a468 <USB_EPStartXfer>
 8005782:	e007      	b.n	8005794 <PCD_EP_ISR_Handler+0x7e0>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005784:	234c      	movs	r3, #76	@ 0x4c
 8005786:	18fb      	adds	r3, r7, r3
 8005788:	881a      	ldrh	r2, [r3, #0]
 800578a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	0018      	movs	r0, r3
 8005790:	f000 f930 	bl	80059f4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2244      	movs	r2, #68	@ 0x44
 800579a:	5a9b      	ldrh	r3, [r3, r2]
 800579c:	b29b      	uxth	r3, r3
 800579e:	b21b      	sxth	r3, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	da01      	bge.n	80057a8 <PCD_EP_ISR_Handler+0x7f4>
 80057a4:	f7ff fc0c 	bl	8004fc0 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	0018      	movs	r0, r3
 80057ac:	46bd      	mov	sp, r7
 80057ae:	b016      	add	sp, #88	@ 0x58
 80057b0:	bdb0      	pop	{r4, r5, r7, pc}
 80057b2:	46c0      	nop			@ (mov r8, r8)
 80057b4:	00000406 	.word	0x00000406
 80057b8:	00000402 	.word	0x00000402

080057bc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80057bc:	b590      	push	{r4, r7, lr}
 80057be:	b089      	sub	sp, #36	@ 0x24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	1dbb      	adds	r3, r7, #6
 80057c8:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80057ca:	1dbb      	adds	r3, r7, #6
 80057cc:	881a      	ldrh	r2, [r3, #0]
 80057ce:	2380      	movs	r3, #128	@ 0x80
 80057d0:	01db      	lsls	r3, r3, #7
 80057d2:	4013      	ands	r3, r2
 80057d4:	d100      	bne.n	80057d8 <HAL_PCD_EP_DB_Receive+0x1c>
 80057d6:	e07d      	b.n	80058d4 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2250      	movs	r2, #80	@ 0x50
 80057de:	5a9b      	ldrh	r3, [r3, r2]
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	001a      	movs	r2, r3
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	18d2      	adds	r2, r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	18d3      	adds	r3, r2, r3
 80057f2:	4a7a      	ldr	r2, [pc, #488]	@ (80059dc <HAL_PCD_EP_DB_Receive+0x220>)
 80057f4:	4694      	mov	ip, r2
 80057f6:	4463      	add	r3, ip
 80057f8:	881a      	ldrh	r2, [r3, #0]
 80057fa:	211a      	movs	r1, #26
 80057fc:	187b      	adds	r3, r7, r1
 80057fe:	0592      	lsls	r2, r2, #22
 8005800:	0d92      	lsrs	r2, r2, #22
 8005802:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	699a      	ldr	r2, [r3, #24]
 8005808:	187b      	adds	r3, r7, r1
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	429a      	cmp	r2, r3
 800580e:	d307      	bcc.n	8005820 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	699a      	ldr	r2, [r3, #24]
 8005814:	187b      	adds	r3, r7, r1
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	1ad2      	subs	r2, r2, r3
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	619a      	str	r2, [r3, #24]
 800581e:	e002      	b.n	8005826 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2200      	movs	r2, #0
 8005824:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d121      	bne.n	8005872 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	001a      	movs	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	18d3      	adds	r3, r2, r3
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	b29a      	uxth	r2, r3
 8005840:	2018      	movs	r0, #24
 8005842:	183b      	adds	r3, r7, r0
 8005844:	4966      	ldr	r1, [pc, #408]	@ (80059e0 <HAL_PCD_EP_DB_Receive+0x224>)
 8005846:	400a      	ands	r2, r1
 8005848:	801a      	strh	r2, [r3, #0]
 800584a:	183b      	adds	r3, r7, r0
 800584c:	183a      	adds	r2, r7, r0
 800584e:	8812      	ldrh	r2, [r2, #0]
 8005850:	2180      	movs	r1, #128	@ 0x80
 8005852:	0189      	lsls	r1, r1, #6
 8005854:	404a      	eors	r2, r1
 8005856:	801a      	strh	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	001a      	movs	r2, r3
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	18d3      	adds	r3, r2, r3
 8005866:	183a      	adds	r2, r7, r0
 8005868:	8812      	ldrh	r2, [r2, #0]
 800586a:	495e      	ldr	r1, [pc, #376]	@ (80059e4 <HAL_PCD_EP_DB_Receive+0x228>)
 800586c:	430a      	orrs	r2, r1
 800586e:	b292      	uxth	r2, r2
 8005870:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005872:	1dbb      	adds	r3, r7, #6
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	2240      	movs	r2, #64	@ 0x40
 8005878:	4013      	ands	r3, r2
 800587a:	d01a      	beq.n	80058b2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	001a      	movs	r2, r3
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	18d3      	adds	r3, r2, r3
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	b29a      	uxth	r2, r3
 800588e:	2016      	movs	r0, #22
 8005890:	183b      	adds	r3, r7, r0
 8005892:	4955      	ldr	r1, [pc, #340]	@ (80059e8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8005894:	400a      	ands	r2, r1
 8005896:	801a      	strh	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	001a      	movs	r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	18d3      	adds	r3, r2, r3
 80058a6:	183a      	adds	r2, r7, r0
 80058a8:	8812      	ldrh	r2, [r2, #0]
 80058aa:	4950      	ldr	r1, [pc, #320]	@ (80059ec <HAL_PCD_EP_DB_Receive+0x230>)
 80058ac:	430a      	orrs	r2, r1
 80058ae:	b292      	uxth	r2, r2
 80058b0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80058b2:	241a      	movs	r4, #26
 80058b4:	193b      	adds	r3, r7, r4
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d100      	bne.n	80058be <HAL_PCD_EP_DB_Receive+0x102>
 80058bc:	e086      	b.n	80059cc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6818      	ldr	r0, [r3, #0]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	6959      	ldr	r1, [r3, #20]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	891a      	ldrh	r2, [r3, #8]
 80058ca:	193b      	adds	r3, r7, r4
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	f006 f87f 	bl	800b9d0 <USB_ReadPMA>
 80058d2:	e07b      	b.n	80059cc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2250      	movs	r2, #80	@ 0x50
 80058da:	5a9b      	ldrh	r3, [r3, r2]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	001a      	movs	r2, r3
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	18d2      	adds	r2, r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	18d3      	adds	r3, r2, r3
 80058ee:	4a40      	ldr	r2, [pc, #256]	@ (80059f0 <HAL_PCD_EP_DB_Receive+0x234>)
 80058f0:	4694      	mov	ip, r2
 80058f2:	4463      	add	r3, ip
 80058f4:	881a      	ldrh	r2, [r3, #0]
 80058f6:	211a      	movs	r1, #26
 80058f8:	187b      	adds	r3, r7, r1
 80058fa:	0592      	lsls	r2, r2, #22
 80058fc:	0d92      	lsrs	r2, r2, #22
 80058fe:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	699a      	ldr	r2, [r3, #24]
 8005904:	187b      	adds	r3, r7, r1
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	429a      	cmp	r2, r3
 800590a:	d307      	bcc.n	800591c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	699a      	ldr	r2, [r3, #24]
 8005910:	187b      	adds	r3, r7, r1
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	1ad2      	subs	r2, r2, r3
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	619a      	str	r2, [r3, #24]
 800591a:	e002      	b.n	8005922 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2200      	movs	r2, #0
 8005920:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d121      	bne.n	800596e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	001a      	movs	r2, r3
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	18d3      	adds	r3, r2, r3
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	b29a      	uxth	r2, r3
 800593c:	201e      	movs	r0, #30
 800593e:	183b      	adds	r3, r7, r0
 8005940:	4927      	ldr	r1, [pc, #156]	@ (80059e0 <HAL_PCD_EP_DB_Receive+0x224>)
 8005942:	400a      	ands	r2, r1
 8005944:	801a      	strh	r2, [r3, #0]
 8005946:	183b      	adds	r3, r7, r0
 8005948:	183a      	adds	r2, r7, r0
 800594a:	8812      	ldrh	r2, [r2, #0]
 800594c:	2180      	movs	r1, #128	@ 0x80
 800594e:	0189      	lsls	r1, r1, #6
 8005950:	404a      	eors	r2, r1
 8005952:	801a      	strh	r2, [r3, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	001a      	movs	r2, r3
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	18d3      	adds	r3, r2, r3
 8005962:	183a      	adds	r2, r7, r0
 8005964:	8812      	ldrh	r2, [r2, #0]
 8005966:	491f      	ldr	r1, [pc, #124]	@ (80059e4 <HAL_PCD_EP_DB_Receive+0x228>)
 8005968:	430a      	orrs	r2, r1
 800596a:	b292      	uxth	r2, r2
 800596c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800596e:	1dbb      	adds	r3, r7, #6
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	2240      	movs	r2, #64	@ 0x40
 8005974:	4013      	ands	r3, r2
 8005976:	d11a      	bne.n	80059ae <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	001a      	movs	r2, r3
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	18d3      	adds	r3, r2, r3
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	b29a      	uxth	r2, r3
 800598a:	201c      	movs	r0, #28
 800598c:	183b      	adds	r3, r7, r0
 800598e:	4916      	ldr	r1, [pc, #88]	@ (80059e8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8005990:	400a      	ands	r2, r1
 8005992:	801a      	strh	r2, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	001a      	movs	r2, r3
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	18d3      	adds	r3, r2, r3
 80059a2:	183a      	adds	r2, r7, r0
 80059a4:	8812      	ldrh	r2, [r2, #0]
 80059a6:	4911      	ldr	r1, [pc, #68]	@ (80059ec <HAL_PCD_EP_DB_Receive+0x230>)
 80059a8:	430a      	orrs	r2, r1
 80059aa:	b292      	uxth	r2, r2
 80059ac:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80059ae:	241a      	movs	r4, #26
 80059b0:	193b      	adds	r3, r7, r4
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d009      	beq.n	80059cc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6818      	ldr	r0, [r3, #0]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6959      	ldr	r1, [r3, #20]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	895a      	ldrh	r2, [r3, #10]
 80059c4:	193b      	adds	r3, r7, r4
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	f006 f802 	bl	800b9d0 <USB_ReadPMA>
    }
  }

  return count;
 80059cc:	231a      	movs	r3, #26
 80059ce:	18fb      	adds	r3, r7, r3
 80059d0:	881b      	ldrh	r3, [r3, #0]
}
 80059d2:	0018      	movs	r0, r3
 80059d4:	46bd      	mov	sp, r7
 80059d6:	b009      	add	sp, #36	@ 0x24
 80059d8:	bd90      	pop	{r4, r7, pc}
 80059da:	46c0      	nop			@ (mov r8, r8)
 80059dc:	00000402 	.word	0x00000402
 80059e0:	ffffbf8f 	.word	0xffffbf8f
 80059e4:	ffff8080 	.word	0xffff8080
 80059e8:	ffff8f8f 	.word	0xffff8f8f
 80059ec:	ffff80c0 	.word	0xffff80c0
 80059f0:	00000406 	.word	0x00000406

080059f4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b0a4      	sub	sp, #144	@ 0x90
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	1dbb      	adds	r3, r7, #6
 8005a00:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005a02:	1dbb      	adds	r3, r7, #6
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	2240      	movs	r2, #64	@ 0x40
 8005a08:	4013      	ands	r3, r2
 8005a0a:	d100      	bne.n	8005a0e <HAL_PCD_EP_DB_Transmit+0x1a>
 8005a0c:	e1e4      	b.n	8005dd8 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2250      	movs	r2, #80	@ 0x50
 8005a14:	5a9b      	ldrh	r3, [r3, r2]
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	001a      	movs	r2, r3
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	18d2      	adds	r2, r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	18d3      	adds	r3, r2, r3
 8005a28:	4ad0      	ldr	r2, [pc, #832]	@ (8005d6c <HAL_PCD_EP_DB_Transmit+0x378>)
 8005a2a:	4694      	mov	ip, r2
 8005a2c:	4463      	add	r3, ip
 8005a2e:	881a      	ldrh	r2, [r3, #0]
 8005a30:	2188      	movs	r1, #136	@ 0x88
 8005a32:	187b      	adds	r3, r7, r1
 8005a34:	0592      	lsls	r2, r2, #22
 8005a36:	0d92      	lsrs	r2, r2, #22
 8005a38:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	699a      	ldr	r2, [r3, #24]
 8005a3e:	187b      	adds	r3, r7, r1
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d907      	bls.n	8005a56 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	699a      	ldr	r2, [r3, #24]
 8005a4a:	187b      	adds	r3, r7, r1
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	1ad2      	subs	r2, r2, r3
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	619a      	str	r2, [r3, #24]
 8005a54:	e002      	b.n	8005a5c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d000      	beq.n	8005a66 <HAL_PCD_EP_DB_Transmit+0x72>
 8005a64:	e0b5      	b.n	8005bd2 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	785b      	ldrb	r3, [r3, #1]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d125      	bne.n	8005aba <HAL_PCD_EP_DB_Transmit+0xc6>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2250      	movs	r2, #80	@ 0x50
 8005a7a:	5a9b      	ldrh	r3, [r3, r2]
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	001a      	movs	r2, r3
 8005a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a82:	189b      	adds	r3, r3, r2
 8005a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	00da      	lsls	r2, r3, #3
 8005a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a8e:	18d3      	adds	r3, r2, r3
 8005a90:	4ab6      	ldr	r2, [pc, #728]	@ (8005d6c <HAL_PCD_EP_DB_Transmit+0x378>)
 8005a92:	4694      	mov	ip, r2
 8005a94:	4463      	add	r3, ip
 8005a96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	059b      	lsls	r3, r3, #22
 8005aa0:	0d9b      	lsrs	r3, r3, #22
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa6:	801a      	strh	r2, [r3, #0]
 8005aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	4ab0      	ldr	r2, [pc, #704]	@ (8005d70 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab6:	801a      	strh	r2, [r3, #0]
 8005ab8:	e01b      	b.n	8005af2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	785b      	ldrb	r3, [r3, #1]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d117      	bne.n	8005af2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2250      	movs	r2, #80	@ 0x50
 8005ace:	5a9b      	ldrh	r3, [r3, r2]
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	001a      	movs	r2, r3
 8005ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad6:	189b      	adds	r3, r3, r2
 8005ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	00da      	lsls	r2, r3, #3
 8005ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae2:	18d3      	adds	r3, r2, r3
 8005ae4:	4aa1      	ldr	r2, [pc, #644]	@ (8005d6c <HAL_PCD_EP_DB_Transmit+0x378>)
 8005ae6:	4694      	mov	ip, r2
 8005ae8:	4463      	add	r3, ip
 8005aea:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aee:	2200      	movs	r2, #0
 8005af0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	785b      	ldrb	r3, [r3, #1]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d125      	bne.n	8005b4c <HAL_PCD_EP_DB_Transmit+0x158>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	61fb      	str	r3, [r7, #28]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2250      	movs	r2, #80	@ 0x50
 8005b0c:	5a9b      	ldrh	r3, [r3, r2]
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	001a      	movs	r2, r3
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	189b      	adds	r3, r3, r2
 8005b16:	61fb      	str	r3, [r7, #28]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	00da      	lsls	r2, r3, #3
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	18d3      	adds	r3, r2, r3
 8005b22:	4a94      	ldr	r2, [pc, #592]	@ (8005d74 <HAL_PCD_EP_DB_Transmit+0x380>)
 8005b24:	4694      	mov	ip, r2
 8005b26:	4463      	add	r3, ip
 8005b28:	61bb      	str	r3, [r7, #24]
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	059b      	lsls	r3, r3, #22
 8005b32:	0d9b      	lsrs	r3, r3, #22
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	801a      	strh	r2, [r3, #0]
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	4a8b      	ldr	r2, [pc, #556]	@ (8005d70 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	801a      	strh	r2, [r3, #0]
 8005b4a:	e018      	b.n	8005b7e <HAL_PCD_EP_DB_Transmit+0x18a>
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	785b      	ldrb	r3, [r3, #1]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d114      	bne.n	8005b7e <HAL_PCD_EP_DB_Transmit+0x18a>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2250      	movs	r2, #80	@ 0x50
 8005b5a:	5a9b      	ldrh	r3, [r3, r2]
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	001a      	movs	r2, r3
 8005b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b62:	189b      	adds	r3, r3, r2
 8005b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	00da      	lsls	r2, r3, #3
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6e:	18d3      	adds	r3, r2, r3
 8005b70:	4a80      	ldr	r2, [pc, #512]	@ (8005d74 <HAL_PCD_EP_DB_Transmit+0x380>)
 8005b72:	4694      	mov	ip, r2
 8005b74:	4463      	add	r3, ip
 8005b76:	623b      	str	r3, [r7, #32]
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	781a      	ldrb	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	0011      	movs	r1, r2
 8005b86:	0018      	movs	r0, r3
 8005b88:	f007 fefe 	bl	800d988 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005b8c:	1dbb      	adds	r3, r7, #6
 8005b8e:	881a      	ldrh	r2, [r3, #0]
 8005b90:	2380      	movs	r3, #128	@ 0x80
 8005b92:	01db      	lsls	r3, r3, #7
 8005b94:	4013      	ands	r3, r2
 8005b96:	d100      	bne.n	8005b9a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8005b98:	e308      	b.n	80061ac <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	001a      	movs	r2, r3
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	18d3      	adds	r3, r2, r3
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	2016      	movs	r0, #22
 8005bae:	183b      	adds	r3, r7, r0
 8005bb0:	4971      	ldr	r1, [pc, #452]	@ (8005d78 <HAL_PCD_EP_DB_Transmit+0x384>)
 8005bb2:	400a      	ands	r2, r1
 8005bb4:	801a      	strh	r2, [r3, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	001a      	movs	r2, r3
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	18d3      	adds	r3, r2, r3
 8005bc4:	183a      	adds	r2, r7, r0
 8005bc6:	8812      	ldrh	r2, [r2, #0]
 8005bc8:	496c      	ldr	r1, [pc, #432]	@ (8005d7c <HAL_PCD_EP_DB_Transmit+0x388>)
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	b292      	uxth	r2, r2
 8005bce:	801a      	strh	r2, [r3, #0]
 8005bd0:	e2ec      	b.n	80061ac <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005bd2:	1dbb      	adds	r3, r7, #6
 8005bd4:	881a      	ldrh	r2, [r3, #0]
 8005bd6:	2380      	movs	r3, #128	@ 0x80
 8005bd8:	01db      	lsls	r3, r3, #7
 8005bda:	4013      	ands	r3, r2
 8005bdc:	d01a      	beq.n	8005c14 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	001a      	movs	r2, r3
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	18d3      	adds	r3, r2, r3
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	208a      	movs	r0, #138	@ 0x8a
 8005bf2:	183b      	adds	r3, r7, r0
 8005bf4:	4960      	ldr	r1, [pc, #384]	@ (8005d78 <HAL_PCD_EP_DB_Transmit+0x384>)
 8005bf6:	400a      	ands	r2, r1
 8005bf8:	801a      	strh	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	001a      	movs	r2, r3
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	18d3      	adds	r3, r2, r3
 8005c08:	183a      	adds	r2, r7, r0
 8005c0a:	8812      	ldrh	r2, [r2, #0]
 8005c0c:	495b      	ldr	r1, [pc, #364]	@ (8005d7c <HAL_PCD_EP_DB_Transmit+0x388>)
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	b292      	uxth	r2, r2
 8005c12:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2224      	movs	r2, #36	@ 0x24
 8005c18:	5c9b      	ldrb	r3, [r3, r2]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d000      	beq.n	8005c20 <HAL_PCD_EP_DB_Transmit+0x22c>
 8005c1e:	e2c5      	b.n	80061ac <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	695a      	ldr	r2, [r3, #20]
 8005c24:	2188      	movs	r1, #136	@ 0x88
 8005c26:	187b      	adds	r3, r7, r1
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	18d2      	adds	r2, r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	69da      	ldr	r2, [r3, #28]
 8005c34:	187b      	adds	r3, r7, r1
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	18d2      	adds	r2, r2, r3
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	6a1a      	ldr	r2, [r3, #32]
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d30c      	bcc.n	8005c64 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	218c      	movs	r1, #140	@ 0x8c
 8005c50:	187a      	adds	r2, r7, r1
 8005c52:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	6a1a      	ldr	r2, [r3, #32]
 8005c58:	187b      	adds	r3, r7, r1
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	1ad2      	subs	r2, r2, r3
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	621a      	str	r2, [r3, #32]
 8005c62:	e01a      	b.n	8005c9a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10a      	bne.n	8005c82 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8005c6c:	2388      	movs	r3, #136	@ 0x88
 8005c6e:	18fb      	adds	r3, r7, r3
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	228c      	movs	r2, #140	@ 0x8c
 8005c74:	18ba      	adds	r2, r7, r2
 8005c76:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2224      	movs	r2, #36	@ 0x24
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	5499      	strb	r1, [r3, r2]
 8005c80:	e00b      	b.n	8005c9a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2224      	movs	r2, #36	@ 0x24
 8005c86:	2100      	movs	r1, #0
 8005c88:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	228c      	movs	r2, #140	@ 0x8c
 8005c90:	18ba      	adds	r2, r7, r2
 8005c92:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2200      	movs	r2, #0
 8005c98:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	785b      	ldrb	r3, [r3, #1]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d000      	beq.n	8005ca4 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8005ca2:	e06d      	b.n	8005d80 <HAL_PCD_EP_DB_Transmit+0x38c>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2250      	movs	r2, #80	@ 0x50
 8005cb0:	5a9b      	ldrh	r3, [r3, r2]
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	001a      	movs	r2, r3
 8005cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cb8:	189b      	adds	r3, r3, r2
 8005cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	00da      	lsls	r2, r3, #3
 8005cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cc4:	18d3      	adds	r3, r2, r3
 8005cc6:	4a29      	ldr	r2, [pc, #164]	@ (8005d6c <HAL_PCD_EP_DB_Transmit+0x378>)
 8005cc8:	4694      	mov	ip, r2
 8005cca:	4463      	add	r3, ip
 8005ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	059b      	lsls	r3, r3, #22
 8005cd6:	0d9b      	lsrs	r3, r3, #22
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cdc:	801a      	strh	r2, [r3, #0]
 8005cde:	238c      	movs	r3, #140	@ 0x8c
 8005ce0:	18fb      	adds	r3, r7, r3
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d108      	bne.n	8005cfa <HAL_PCD_EP_DB_Transmit+0x306>
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	4a20      	ldr	r2, [pc, #128]	@ (8005d70 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf6:	801a      	strh	r2, [r3, #0]
 8005cf8:	e061      	b.n	8005dbe <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005cfa:	228c      	movs	r2, #140	@ 0x8c
 8005cfc:	18bb      	adds	r3, r7, r2
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d02:	d817      	bhi.n	8005d34 <HAL_PCD_EP_DB_Transmit+0x340>
 8005d04:	18bb      	adds	r3, r7, r2
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	085b      	lsrs	r3, r3, #1
 8005d0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d0c:	18bb      	adds	r3, r7, r2
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2201      	movs	r2, #1
 8005d12:	4013      	ands	r3, r2
 8005d14:	d002      	beq.n	8005d1c <HAL_PCD_EP_DB_Transmit+0x328>
 8005d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d18:	3301      	adds	r3, #1
 8005d1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d1e:	881b      	ldrh	r3, [r3, #0]
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	029b      	lsls	r3, r3, #10
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d30:	801a      	strh	r2, [r3, #0]
 8005d32:	e044      	b.n	8005dbe <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005d34:	228c      	movs	r2, #140	@ 0x8c
 8005d36:	18bb      	adds	r3, r7, r2
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	095b      	lsrs	r3, r3, #5
 8005d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d3e:	18bb      	adds	r3, r7, r2
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	221f      	movs	r2, #31
 8005d44:	4013      	ands	r3, r2
 8005d46:	d102      	bne.n	8005d4e <HAL_PCD_EP_DB_Transmit+0x35a>
 8005d48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d50:	881b      	ldrh	r3, [r3, #0]
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	029b      	lsls	r3, r3, #10
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	4a03      	ldr	r2, [pc, #12]	@ (8005d70 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d68:	801a      	strh	r2, [r3, #0]
 8005d6a:	e028      	b.n	8005dbe <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005d6c:	00000402 	.word	0x00000402
 8005d70:	ffff8000 	.word	0xffff8000
 8005d74:	00000406 	.word	0x00000406
 8005d78:	ffff8f8f 	.word	0xffff8f8f
 8005d7c:	ffffc080 	.word	0xffffc080
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	785b      	ldrb	r3, [r3, #1]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d11a      	bne.n	8005dbe <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2250      	movs	r2, #80	@ 0x50
 8005d94:	5a9b      	ldrh	r3, [r3, r2]
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	001a      	movs	r2, r3
 8005d9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d9c:	189b      	adds	r3, r3, r2
 8005d9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	00da      	lsls	r2, r3, #3
 8005da6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005da8:	18d3      	adds	r3, r2, r3
 8005daa:	4ad9      	ldr	r2, [pc, #868]	@ (8006110 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005dac:	4694      	mov	ip, r2
 8005dae:	4463      	add	r3, ip
 8005db0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005db2:	238c      	movs	r3, #140	@ 0x8c
 8005db4:	18fb      	adds	r3, r7, r3
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dbc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6818      	ldr	r0, [r3, #0]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	6959      	ldr	r1, [r3, #20]
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	891a      	ldrh	r2, [r3, #8]
 8005dca:	238c      	movs	r3, #140	@ 0x8c
 8005dcc:	18fb      	adds	r3, r7, r3
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	f005 fdb3 	bl	800b93c <USB_WritePMA>
 8005dd6:	e1e9      	b.n	80061ac <HAL_PCD_EP_DB_Transmit+0x7b8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2250      	movs	r2, #80	@ 0x50
 8005dde:	5a9b      	ldrh	r3, [r3, r2]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	001a      	movs	r2, r3
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	18d2      	adds	r2, r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	18d3      	adds	r3, r2, r3
 8005df2:	4ac8      	ldr	r2, [pc, #800]	@ (8006114 <HAL_PCD_EP_DB_Transmit+0x720>)
 8005df4:	4694      	mov	ip, r2
 8005df6:	4463      	add	r3, ip
 8005df8:	881a      	ldrh	r2, [r3, #0]
 8005dfa:	2188      	movs	r1, #136	@ 0x88
 8005dfc:	187b      	adds	r3, r7, r1
 8005dfe:	0592      	lsls	r2, r2, #22
 8005e00:	0d92      	lsrs	r2, r2, #22
 8005e02:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	699a      	ldr	r2, [r3, #24]
 8005e08:	187b      	adds	r3, r7, r1
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d307      	bcc.n	8005e20 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	699a      	ldr	r2, [r3, #24]
 8005e14:	187b      	adds	r3, r7, r1
 8005e16:	881b      	ldrh	r3, [r3, #0]
 8005e18:	1ad2      	subs	r2, r2, r3
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	619a      	str	r2, [r3, #24]
 8005e1e:	e002      	b.n	8005e26 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	2200      	movs	r2, #0
 8005e24:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d000      	beq.n	8005e30 <HAL_PCD_EP_DB_Transmit+0x43c>
 8005e2e:	e0bb      	b.n	8005fa8 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	785b      	ldrb	r3, [r3, #1]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d125      	bne.n	8005e84 <HAL_PCD_EP_DB_Transmit+0x490>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2250      	movs	r2, #80	@ 0x50
 8005e44:	5a9b      	ldrh	r3, [r3, r2]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	001a      	movs	r2, r3
 8005e4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e4c:	189b      	adds	r3, r3, r2
 8005e4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	00da      	lsls	r2, r3, #3
 8005e56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e58:	18d3      	adds	r3, r2, r3
 8005e5a:	4aad      	ldr	r2, [pc, #692]	@ (8006110 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005e5c:	4694      	mov	ip, r2
 8005e5e:	4463      	add	r3, ip
 8005e60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e64:	881b      	ldrh	r3, [r3, #0]
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	059b      	lsls	r3, r3, #22
 8005e6a:	0d9b      	lsrs	r3, r3, #22
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e70:	801a      	strh	r2, [r3, #0]
 8005e72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e74:	881b      	ldrh	r3, [r3, #0]
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	4aa7      	ldr	r2, [pc, #668]	@ (8006118 <HAL_PCD_EP_DB_Transmit+0x724>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e80:	801a      	strh	r2, [r3, #0]
 8005e82:	e01b      	b.n	8005ebc <HAL_PCD_EP_DB_Transmit+0x4c8>
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	785b      	ldrb	r3, [r3, #1]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d117      	bne.n	8005ebc <HAL_PCD_EP_DB_Transmit+0x4c8>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2250      	movs	r2, #80	@ 0x50
 8005e98:	5a9b      	ldrh	r3, [r3, r2]
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	001a      	movs	r2, r3
 8005e9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ea0:	189b      	adds	r3, r3, r2
 8005ea2:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	00da      	lsls	r2, r3, #3
 8005eaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005eac:	18d3      	adds	r3, r2, r3
 8005eae:	4a98      	ldr	r2, [pc, #608]	@ (8006110 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005eb0:	4694      	mov	ip, r2
 8005eb2:	4463      	add	r3, ip
 8005eb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005eb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005eb8:	2200      	movs	r2, #0
 8005eba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	677b      	str	r3, [r7, #116]	@ 0x74
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	785b      	ldrb	r3, [r3, #1]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d12b      	bne.n	8005f22 <HAL_PCD_EP_DB_Transmit+0x52e>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2250      	movs	r2, #80	@ 0x50
 8005ed6:	5a9b      	ldrh	r3, [r3, r2]
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	001a      	movs	r2, r3
 8005edc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ede:	189b      	adds	r3, r3, r2
 8005ee0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	00da      	lsls	r2, r3, #3
 8005ee8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005eea:	18d3      	adds	r3, r2, r3
 8005eec:	4a89      	ldr	r2, [pc, #548]	@ (8006114 <HAL_PCD_EP_DB_Transmit+0x720>)
 8005eee:	4694      	mov	ip, r2
 8005ef0:	4463      	add	r3, ip
 8005ef2:	2184      	movs	r1, #132	@ 0x84
 8005ef4:	187a      	adds	r2, r7, r1
 8005ef6:	6013      	str	r3, [r2, #0]
 8005ef8:	187b      	adds	r3, r7, r1
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	059b      	lsls	r3, r3, #22
 8005f02:	0d9b      	lsrs	r3, r3, #22
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	187b      	adds	r3, r7, r1
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	801a      	strh	r2, [r3, #0]
 8005f0c:	187b      	adds	r3, r7, r1
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	4a80      	ldr	r2, [pc, #512]	@ (8006118 <HAL_PCD_EP_DB_Transmit+0x724>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	187b      	adds	r3, r7, r1
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	801a      	strh	r2, [r3, #0]
 8005f20:	e018      	b.n	8005f54 <HAL_PCD_EP_DB_Transmit+0x560>
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	785b      	ldrb	r3, [r3, #1]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d114      	bne.n	8005f54 <HAL_PCD_EP_DB_Transmit+0x560>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2250      	movs	r2, #80	@ 0x50
 8005f30:	5a9b      	ldrh	r3, [r3, r2]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	001a      	movs	r2, r3
 8005f36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f38:	189b      	adds	r3, r3, r2
 8005f3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	00da      	lsls	r2, r3, #3
 8005f42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f44:	18d3      	adds	r3, r2, r3
 8005f46:	4a73      	ldr	r2, [pc, #460]	@ (8006114 <HAL_PCD_EP_DB_Transmit+0x720>)
 8005f48:	4694      	mov	ip, r2
 8005f4a:	4463      	add	r3, ip
 8005f4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f50:	2200      	movs	r2, #0
 8005f52:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	781a      	ldrb	r2, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	0011      	movs	r1, r2
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	f007 fd13 	bl	800d988 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005f62:	1dbb      	adds	r3, r7, #6
 8005f64:	881a      	ldrh	r2, [r3, #0]
 8005f66:	2380      	movs	r3, #128	@ 0x80
 8005f68:	01db      	lsls	r3, r3, #7
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	d000      	beq.n	8005f70 <HAL_PCD_EP_DB_Transmit+0x57c>
 8005f6e:	e11d      	b.n	80061ac <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	001a      	movs	r2, r3
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	18d3      	adds	r3, r2, r3
 8005f7e:	881b      	ldrh	r3, [r3, #0]
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	2082      	movs	r0, #130	@ 0x82
 8005f84:	183b      	adds	r3, r7, r0
 8005f86:	4965      	ldr	r1, [pc, #404]	@ (800611c <HAL_PCD_EP_DB_Transmit+0x728>)
 8005f88:	400a      	ands	r2, r1
 8005f8a:	801a      	strh	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	001a      	movs	r2, r3
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	18d3      	adds	r3, r2, r3
 8005f9a:	183a      	adds	r2, r7, r0
 8005f9c:	8812      	ldrh	r2, [r2, #0]
 8005f9e:	4960      	ldr	r1, [pc, #384]	@ (8006120 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	b292      	uxth	r2, r2
 8005fa4:	801a      	strh	r2, [r3, #0]
 8005fa6:	e101      	b.n	80061ac <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005fa8:	1dbb      	adds	r3, r7, #6
 8005faa:	881a      	ldrh	r2, [r3, #0]
 8005fac:	2380      	movs	r3, #128	@ 0x80
 8005fae:	01db      	lsls	r3, r3, #7
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	d11a      	bne.n	8005fea <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	001a      	movs	r2, r3
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	18d3      	adds	r3, r2, r3
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	204e      	movs	r0, #78	@ 0x4e
 8005fc8:	183b      	adds	r3, r7, r0
 8005fca:	4954      	ldr	r1, [pc, #336]	@ (800611c <HAL_PCD_EP_DB_Transmit+0x728>)
 8005fcc:	400a      	ands	r2, r1
 8005fce:	801a      	strh	r2, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	001a      	movs	r2, r3
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	18d3      	adds	r3, r2, r3
 8005fde:	183a      	adds	r2, r7, r0
 8005fe0:	8812      	ldrh	r2, [r2, #0]
 8005fe2:	494f      	ldr	r1, [pc, #316]	@ (8006120 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	b292      	uxth	r2, r2
 8005fe8:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2224      	movs	r2, #36	@ 0x24
 8005fee:	5c9b      	ldrb	r3, [r3, r2]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d000      	beq.n	8005ff6 <HAL_PCD_EP_DB_Transmit+0x602>
 8005ff4:	e0da      	b.n	80061ac <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	695a      	ldr	r2, [r3, #20]
 8005ffa:	2188      	movs	r1, #136	@ 0x88
 8005ffc:	187b      	adds	r3, r7, r1
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	18d2      	adds	r2, r2, r3
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	69da      	ldr	r2, [r3, #28]
 800600a:	187b      	adds	r3, r7, r1
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	18d2      	adds	r2, r2, r3
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	6a1a      	ldr	r2, [r3, #32]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	429a      	cmp	r2, r3
 800601e:	d30c      	bcc.n	800603a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	218c      	movs	r1, #140	@ 0x8c
 8006026:	187a      	adds	r2, r7, r1
 8006028:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	6a1a      	ldr	r2, [r3, #32]
 800602e:	187b      	adds	r3, r7, r1
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	1ad2      	subs	r2, r2, r3
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	621a      	str	r2, [r3, #32]
 8006038:	e01a      	b.n	8006070 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10a      	bne.n	8006058 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8006042:	2388      	movs	r3, #136	@ 0x88
 8006044:	18fb      	adds	r3, r7, r3
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	228c      	movs	r2, #140	@ 0x8c
 800604a:	18ba      	adds	r2, r7, r2
 800604c:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2224      	movs	r2, #36	@ 0x24
 8006052:	2100      	movs	r1, #0
 8006054:	5499      	strb	r1, [r3, r2]
 8006056:	e00b      	b.n	8006070 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	228c      	movs	r2, #140	@ 0x8c
 800605e:	18ba      	adds	r2, r7, r2
 8006060:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2200      	movs	r2, #0
 8006066:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2224      	movs	r2, #36	@ 0x24
 800606c:	2100      	movs	r1, #0
 800606e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	657b      	str	r3, [r7, #84]	@ 0x54
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	785b      	ldrb	r3, [r3, #1]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d000      	beq.n	8006080 <HAL_PCD_EP_DB_Transmit+0x68c>
 800607e:	e06d      	b.n	800615c <HAL_PCD_EP_DB_Transmit+0x768>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2250      	movs	r2, #80	@ 0x50
 800608c:	5a9b      	ldrh	r3, [r3, r2]
 800608e:	b29b      	uxth	r3, r3
 8006090:	001a      	movs	r2, r3
 8006092:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006094:	189b      	adds	r3, r3, r2
 8006096:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	00da      	lsls	r2, r3, #3
 800609e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060a0:	18d3      	adds	r3, r2, r3
 80060a2:	4a1c      	ldr	r2, [pc, #112]	@ (8006114 <HAL_PCD_EP_DB_Transmit+0x720>)
 80060a4:	4694      	mov	ip, r2
 80060a6:	4463      	add	r3, ip
 80060a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	059b      	lsls	r3, r3, #22
 80060b2:	0d9b      	lsrs	r3, r3, #22
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060b8:	801a      	strh	r2, [r3, #0]
 80060ba:	238c      	movs	r3, #140	@ 0x8c
 80060bc:	18fb      	adds	r3, r7, r3
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d108      	bne.n	80060d6 <HAL_PCD_EP_DB_Transmit+0x6e2>
 80060c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	4a13      	ldr	r2, [pc, #76]	@ (8006118 <HAL_PCD_EP_DB_Transmit+0x724>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060d2:	801a      	strh	r2, [r3, #0]
 80060d4:	e05e      	b.n	8006194 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80060d6:	228c      	movs	r2, #140	@ 0x8c
 80060d8:	18bb      	adds	r3, r7, r2
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80060de:	d821      	bhi.n	8006124 <HAL_PCD_EP_DB_Transmit+0x730>
 80060e0:	18bb      	adds	r3, r7, r2
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	085b      	lsrs	r3, r3, #1
 80060e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060e8:	18bb      	adds	r3, r7, r2
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2201      	movs	r2, #1
 80060ee:	4013      	ands	r3, r2
 80060f0:	d002      	beq.n	80060f8 <HAL_PCD_EP_DB_Transmit+0x704>
 80060f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060f4:	3301      	adds	r3, #1
 80060f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006100:	b29b      	uxth	r3, r3
 8006102:	029b      	lsls	r3, r3, #10
 8006104:	b29b      	uxth	r3, r3
 8006106:	4313      	orrs	r3, r2
 8006108:	b29a      	uxth	r2, r3
 800610a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800610c:	801a      	strh	r2, [r3, #0]
 800610e:	e041      	b.n	8006194 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8006110:	00000402 	.word	0x00000402
 8006114:	00000406 	.word	0x00000406
 8006118:	ffff8000 	.word	0xffff8000
 800611c:	ffff8f8f 	.word	0xffff8f8f
 8006120:	ffffc080 	.word	0xffffc080
 8006124:	228c      	movs	r2, #140	@ 0x8c
 8006126:	18bb      	adds	r3, r7, r2
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	095b      	lsrs	r3, r3, #5
 800612c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800612e:	18bb      	adds	r3, r7, r2
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	221f      	movs	r2, #31
 8006134:	4013      	ands	r3, r2
 8006136:	d102      	bne.n	800613e <HAL_PCD_EP_DB_Transmit+0x74a>
 8006138:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800613a:	3b01      	subs	r3, #1
 800613c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800613e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006140:	881b      	ldrh	r3, [r3, #0]
 8006142:	b29a      	uxth	r2, r3
 8006144:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006146:	b29b      	uxth	r3, r3
 8006148:	029b      	lsls	r3, r3, #10
 800614a:	b29b      	uxth	r3, r3
 800614c:	4313      	orrs	r3, r2
 800614e:	b29b      	uxth	r3, r3
 8006150:	4a2c      	ldr	r2, [pc, #176]	@ (8006204 <HAL_PCD_EP_DB_Transmit+0x810>)
 8006152:	4313      	orrs	r3, r2
 8006154:	b29a      	uxth	r2, r3
 8006156:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006158:	801a      	strh	r2, [r3, #0]
 800615a:	e01b      	b.n	8006194 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	785b      	ldrb	r3, [r3, #1]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d117      	bne.n	8006194 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2250      	movs	r2, #80	@ 0x50
 800616a:	5a9b      	ldrh	r3, [r3, r2]
 800616c:	b29b      	uxth	r3, r3
 800616e:	001a      	movs	r2, r3
 8006170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006172:	189b      	adds	r3, r3, r2
 8006174:	657b      	str	r3, [r7, #84]	@ 0x54
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	00da      	lsls	r2, r3, #3
 800617c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800617e:	18d3      	adds	r3, r2, r3
 8006180:	4a21      	ldr	r2, [pc, #132]	@ (8006208 <HAL_PCD_EP_DB_Transmit+0x814>)
 8006182:	4694      	mov	ip, r2
 8006184:	4463      	add	r3, ip
 8006186:	653b      	str	r3, [r7, #80]	@ 0x50
 8006188:	238c      	movs	r3, #140	@ 0x8c
 800618a:	18fb      	adds	r3, r7, r3
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	b29a      	uxth	r2, r3
 8006190:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006192:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6818      	ldr	r0, [r3, #0]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	6959      	ldr	r1, [r3, #20]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	895a      	ldrh	r2, [r3, #10]
 80061a0:	238c      	movs	r3, #140	@ 0x8c
 80061a2:	18fb      	adds	r3, r7, r3
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	f005 fbc8 	bl	800b93c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	001a      	movs	r2, r3
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	18d3      	adds	r3, r2, r3
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	b29a      	uxth	r2, r3
 80061be:	2014      	movs	r0, #20
 80061c0:	183b      	adds	r3, r7, r0
 80061c2:	4912      	ldr	r1, [pc, #72]	@ (800620c <HAL_PCD_EP_DB_Transmit+0x818>)
 80061c4:	400a      	ands	r2, r1
 80061c6:	801a      	strh	r2, [r3, #0]
 80061c8:	183b      	adds	r3, r7, r0
 80061ca:	183a      	adds	r2, r7, r0
 80061cc:	8812      	ldrh	r2, [r2, #0]
 80061ce:	2110      	movs	r1, #16
 80061d0:	404a      	eors	r2, r1
 80061d2:	801a      	strh	r2, [r3, #0]
 80061d4:	183b      	adds	r3, r7, r0
 80061d6:	183a      	adds	r2, r7, r0
 80061d8:	8812      	ldrh	r2, [r2, #0]
 80061da:	2120      	movs	r1, #32
 80061dc:	404a      	eors	r2, r1
 80061de:	801a      	strh	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	001a      	movs	r2, r3
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	18d3      	adds	r3, r2, r3
 80061ee:	183a      	adds	r2, r7, r0
 80061f0:	8812      	ldrh	r2, [r2, #0]
 80061f2:	4907      	ldr	r1, [pc, #28]	@ (8006210 <HAL_PCD_EP_DB_Transmit+0x81c>)
 80061f4:	430a      	orrs	r2, r1
 80061f6:	b292      	uxth	r2, r2
 80061f8:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	0018      	movs	r0, r3
 80061fe:	46bd      	mov	sp, r7
 8006200:	b024      	add	sp, #144	@ 0x90
 8006202:	bd80      	pop	{r7, pc}
 8006204:	ffff8000 	.word	0xffff8000
 8006208:	00000406 	.word	0x00000406
 800620c:	ffff8fbf 	.word	0xffff8fbf
 8006210:	ffff8080 	.word	0xffff8080

08006214 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006214:	b590      	push	{r4, r7, lr}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	0008      	movs	r0, r1
 800621e:	0011      	movs	r1, r2
 8006220:	607b      	str	r3, [r7, #4]
 8006222:	240a      	movs	r4, #10
 8006224:	193b      	adds	r3, r7, r4
 8006226:	1c02      	adds	r2, r0, #0
 8006228:	801a      	strh	r2, [r3, #0]
 800622a:	2308      	movs	r3, #8
 800622c:	18fb      	adds	r3, r7, r3
 800622e:	1c0a      	adds	r2, r1, #0
 8006230:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006232:	0021      	movs	r1, r4
 8006234:	187b      	adds	r3, r7, r1
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	2280      	movs	r2, #128	@ 0x80
 800623a:	4013      	ands	r3, r2
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00c      	beq.n	800625c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006242:	187b      	adds	r3, r7, r1
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	2207      	movs	r2, #7
 8006248:	401a      	ands	r2, r3
 800624a:	0013      	movs	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	189b      	adds	r3, r3, r2
 8006250:	00db      	lsls	r3, r3, #3
 8006252:	3310      	adds	r3, #16
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	18d3      	adds	r3, r2, r3
 8006258:	617b      	str	r3, [r7, #20]
 800625a:	e00b      	b.n	8006274 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800625c:	230a      	movs	r3, #10
 800625e:	18fb      	adds	r3, r7, r3
 8006260:	881a      	ldrh	r2, [r3, #0]
 8006262:	0013      	movs	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	189b      	adds	r3, r3, r2
 8006268:	00db      	lsls	r3, r3, #3
 800626a:	3351      	adds	r3, #81	@ 0x51
 800626c:	33ff      	adds	r3, #255	@ 0xff
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	18d3      	adds	r3, r2, r3
 8006272:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006274:	2308      	movs	r3, #8
 8006276:	18fb      	adds	r3, r7, r3
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d107      	bne.n	800628e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	2200      	movs	r2, #0
 8006282:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	b29a      	uxth	r2, r3
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	80da      	strh	r2, [r3, #6]
 800628c:	e00b      	b.n	80062a6 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2201      	movs	r2, #1
 8006292:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	b29a      	uxth	r2, r3
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	0c1b      	lsrs	r3, r3, #16
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	0018      	movs	r0, r3
 80062aa:	46bd      	mov	sp, r7
 80062ac:	b007      	add	sp, #28
 80062ae:	bd90      	pop	{r4, r7, pc}

080062b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	23b4      	movs	r3, #180	@ 0xb4
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	2101      	movs	r1, #1
 80062c6:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	23b2      	movs	r3, #178	@ 0xb2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	2100      	movs	r1, #0
 80062d0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2254      	movs	r2, #84	@ 0x54
 80062d6:	5a9b      	ldrh	r3, [r3, r2]
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2201      	movs	r2, #1
 80062dc:	4313      	orrs	r3, r2
 80062de:	b299      	uxth	r1, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2254      	movs	r2, #84	@ 0x54
 80062e4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2254      	movs	r2, #84	@ 0x54
 80062ea:	5a9b      	ldrh	r3, [r3, r2]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	2202      	movs	r2, #2
 80062f0:	4313      	orrs	r3, r2
 80062f2:	b299      	uxth	r1, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2254      	movs	r2, #84	@ 0x54
 80062f8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	0018      	movs	r0, r3
 80062fe:	46bd      	mov	sp, r7
 8006300:	b004      	add	sp, #16
 8006302:	bd80      	pop	{r7, pc}

08006304 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	000a      	movs	r2, r1
 800630e:	1cfb      	adds	r3, r7, #3
 8006310:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006312:	46c0      	nop			@ (mov r8, r8)
 8006314:	46bd      	mov	sp, r7
 8006316:	b002      	add	sp, #8
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d102      	bne.n	8006330 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	f000 fb76 	bl	8006a1c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2201      	movs	r2, #1
 8006336:	4013      	ands	r3, r2
 8006338:	d100      	bne.n	800633c <HAL_RCC_OscConfig+0x20>
 800633a:	e08e      	b.n	800645a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800633c:	4bc5      	ldr	r3, [pc, #788]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	220c      	movs	r2, #12
 8006342:	4013      	ands	r3, r2
 8006344:	2b04      	cmp	r3, #4
 8006346:	d00e      	beq.n	8006366 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006348:	4bc2      	ldr	r3, [pc, #776]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	220c      	movs	r2, #12
 800634e:	4013      	ands	r3, r2
 8006350:	2b08      	cmp	r3, #8
 8006352:	d117      	bne.n	8006384 <HAL_RCC_OscConfig+0x68>
 8006354:	4bbf      	ldr	r3, [pc, #764]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	23c0      	movs	r3, #192	@ 0xc0
 800635a:	025b      	lsls	r3, r3, #9
 800635c:	401a      	ands	r2, r3
 800635e:	2380      	movs	r3, #128	@ 0x80
 8006360:	025b      	lsls	r3, r3, #9
 8006362:	429a      	cmp	r2, r3
 8006364:	d10e      	bne.n	8006384 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006366:	4bbb      	ldr	r3, [pc, #748]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	2380      	movs	r3, #128	@ 0x80
 800636c:	029b      	lsls	r3, r3, #10
 800636e:	4013      	ands	r3, r2
 8006370:	d100      	bne.n	8006374 <HAL_RCC_OscConfig+0x58>
 8006372:	e071      	b.n	8006458 <HAL_RCC_OscConfig+0x13c>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d000      	beq.n	800637e <HAL_RCC_OscConfig+0x62>
 800637c:	e06c      	b.n	8006458 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	f000 fb4c 	bl	8006a1c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d107      	bne.n	800639c <HAL_RCC_OscConfig+0x80>
 800638c:	4bb1      	ldr	r3, [pc, #708]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	4bb0      	ldr	r3, [pc, #704]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 8006392:	2180      	movs	r1, #128	@ 0x80
 8006394:	0249      	lsls	r1, r1, #9
 8006396:	430a      	orrs	r2, r1
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	e02f      	b.n	80063fc <HAL_RCC_OscConfig+0xe0>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10c      	bne.n	80063be <HAL_RCC_OscConfig+0xa2>
 80063a4:	4bab      	ldr	r3, [pc, #684]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	4baa      	ldr	r3, [pc, #680]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 80063aa:	49ab      	ldr	r1, [pc, #684]	@ (8006658 <HAL_RCC_OscConfig+0x33c>)
 80063ac:	400a      	ands	r2, r1
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	4ba8      	ldr	r3, [pc, #672]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	4ba7      	ldr	r3, [pc, #668]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 80063b6:	49a9      	ldr	r1, [pc, #676]	@ (800665c <HAL_RCC_OscConfig+0x340>)
 80063b8:	400a      	ands	r2, r1
 80063ba:	601a      	str	r2, [r3, #0]
 80063bc:	e01e      	b.n	80063fc <HAL_RCC_OscConfig+0xe0>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	2b05      	cmp	r3, #5
 80063c4:	d10e      	bne.n	80063e4 <HAL_RCC_OscConfig+0xc8>
 80063c6:	4ba3      	ldr	r3, [pc, #652]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	4ba2      	ldr	r3, [pc, #648]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 80063cc:	2180      	movs	r1, #128	@ 0x80
 80063ce:	02c9      	lsls	r1, r1, #11
 80063d0:	430a      	orrs	r2, r1
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	4b9f      	ldr	r3, [pc, #636]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	4b9e      	ldr	r3, [pc, #632]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 80063da:	2180      	movs	r1, #128	@ 0x80
 80063dc:	0249      	lsls	r1, r1, #9
 80063de:	430a      	orrs	r2, r1
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	e00b      	b.n	80063fc <HAL_RCC_OscConfig+0xe0>
 80063e4:	4b9b      	ldr	r3, [pc, #620]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	4b9a      	ldr	r3, [pc, #616]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 80063ea:	499b      	ldr	r1, [pc, #620]	@ (8006658 <HAL_RCC_OscConfig+0x33c>)
 80063ec:	400a      	ands	r2, r1
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	4b98      	ldr	r3, [pc, #608]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	4b97      	ldr	r3, [pc, #604]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 80063f6:	4999      	ldr	r1, [pc, #612]	@ (800665c <HAL_RCC_OscConfig+0x340>)
 80063f8:	400a      	ands	r2, r1
 80063fa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d014      	beq.n	800642e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006404:	f7fd f9d8 	bl	80037b8 <HAL_GetTick>
 8006408:	0003      	movs	r3, r0
 800640a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800640c:	e008      	b.n	8006420 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800640e:	f7fd f9d3 	bl	80037b8 <HAL_GetTick>
 8006412:	0002      	movs	r2, r0
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	2b64      	cmp	r3, #100	@ 0x64
 800641a:	d901      	bls.n	8006420 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e2fd      	b.n	8006a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006420:	4b8c      	ldr	r3, [pc, #560]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	2380      	movs	r3, #128	@ 0x80
 8006426:	029b      	lsls	r3, r3, #10
 8006428:	4013      	ands	r3, r2
 800642a:	d0f0      	beq.n	800640e <HAL_RCC_OscConfig+0xf2>
 800642c:	e015      	b.n	800645a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800642e:	f7fd f9c3 	bl	80037b8 <HAL_GetTick>
 8006432:	0003      	movs	r3, r0
 8006434:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006436:	e008      	b.n	800644a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006438:	f7fd f9be 	bl	80037b8 <HAL_GetTick>
 800643c:	0002      	movs	r2, r0
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b64      	cmp	r3, #100	@ 0x64
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e2e8      	b.n	8006a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800644a:	4b82      	ldr	r3, [pc, #520]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	2380      	movs	r3, #128	@ 0x80
 8006450:	029b      	lsls	r3, r3, #10
 8006452:	4013      	ands	r3, r2
 8006454:	d1f0      	bne.n	8006438 <HAL_RCC_OscConfig+0x11c>
 8006456:	e000      	b.n	800645a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006458:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2202      	movs	r2, #2
 8006460:	4013      	ands	r3, r2
 8006462:	d100      	bne.n	8006466 <HAL_RCC_OscConfig+0x14a>
 8006464:	e06c      	b.n	8006540 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006466:	4b7b      	ldr	r3, [pc, #492]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	220c      	movs	r2, #12
 800646c:	4013      	ands	r3, r2
 800646e:	d00e      	beq.n	800648e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006470:	4b78      	ldr	r3, [pc, #480]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	220c      	movs	r2, #12
 8006476:	4013      	ands	r3, r2
 8006478:	2b08      	cmp	r3, #8
 800647a:	d11f      	bne.n	80064bc <HAL_RCC_OscConfig+0x1a0>
 800647c:	4b75      	ldr	r3, [pc, #468]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	23c0      	movs	r3, #192	@ 0xc0
 8006482:	025b      	lsls	r3, r3, #9
 8006484:	401a      	ands	r2, r3
 8006486:	2380      	movs	r3, #128	@ 0x80
 8006488:	021b      	lsls	r3, r3, #8
 800648a:	429a      	cmp	r2, r3
 800648c:	d116      	bne.n	80064bc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800648e:	4b71      	ldr	r3, [pc, #452]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2202      	movs	r2, #2
 8006494:	4013      	ands	r3, r2
 8006496:	d005      	beq.n	80064a4 <HAL_RCC_OscConfig+0x188>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d001      	beq.n	80064a4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e2bb      	b.n	8006a1c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064a4:	4b6b      	ldr	r3, [pc, #428]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	22f8      	movs	r2, #248	@ 0xf8
 80064aa:	4393      	bics	r3, r2
 80064ac:	0019      	movs	r1, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	00da      	lsls	r2, r3, #3
 80064b4:	4b67      	ldr	r3, [pc, #412]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 80064b6:	430a      	orrs	r2, r1
 80064b8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ba:	e041      	b.n	8006540 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d024      	beq.n	800650e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064c4:	4b63      	ldr	r3, [pc, #396]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	4b62      	ldr	r3, [pc, #392]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 80064ca:	2101      	movs	r1, #1
 80064cc:	430a      	orrs	r2, r1
 80064ce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064d0:	f7fd f972 	bl	80037b8 <HAL_GetTick>
 80064d4:	0003      	movs	r3, r0
 80064d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064d8:	e008      	b.n	80064ec <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064da:	f7fd f96d 	bl	80037b8 <HAL_GetTick>
 80064de:	0002      	movs	r2, r0
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d901      	bls.n	80064ec <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e297      	b.n	8006a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ec:	4b59      	ldr	r3, [pc, #356]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2202      	movs	r2, #2
 80064f2:	4013      	ands	r3, r2
 80064f4:	d0f1      	beq.n	80064da <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064f6:	4b57      	ldr	r3, [pc, #348]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	22f8      	movs	r2, #248	@ 0xf8
 80064fc:	4393      	bics	r3, r2
 80064fe:	0019      	movs	r1, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	00da      	lsls	r2, r3, #3
 8006506:	4b53      	ldr	r3, [pc, #332]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 8006508:	430a      	orrs	r2, r1
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	e018      	b.n	8006540 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800650e:	4b51      	ldr	r3, [pc, #324]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	4b50      	ldr	r3, [pc, #320]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 8006514:	2101      	movs	r1, #1
 8006516:	438a      	bics	r2, r1
 8006518:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800651a:	f7fd f94d 	bl	80037b8 <HAL_GetTick>
 800651e:	0003      	movs	r3, r0
 8006520:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006522:	e008      	b.n	8006536 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006524:	f7fd f948 	bl	80037b8 <HAL_GetTick>
 8006528:	0002      	movs	r2, r0
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	2b02      	cmp	r3, #2
 8006530:	d901      	bls.n	8006536 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e272      	b.n	8006a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006536:	4b47      	ldr	r3, [pc, #284]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2202      	movs	r2, #2
 800653c:	4013      	ands	r3, r2
 800653e:	d1f1      	bne.n	8006524 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2208      	movs	r2, #8
 8006546:	4013      	ands	r3, r2
 8006548:	d036      	beq.n	80065b8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d019      	beq.n	8006586 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006552:	4b40      	ldr	r3, [pc, #256]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 8006554:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006556:	4b3f      	ldr	r3, [pc, #252]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 8006558:	2101      	movs	r1, #1
 800655a:	430a      	orrs	r2, r1
 800655c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800655e:	f7fd f92b 	bl	80037b8 <HAL_GetTick>
 8006562:	0003      	movs	r3, r0
 8006564:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006566:	e008      	b.n	800657a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006568:	f7fd f926 	bl	80037b8 <HAL_GetTick>
 800656c:	0002      	movs	r2, r0
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	2b02      	cmp	r3, #2
 8006574:	d901      	bls.n	800657a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e250      	b.n	8006a1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800657a:	4b36      	ldr	r3, [pc, #216]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 800657c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657e:	2202      	movs	r2, #2
 8006580:	4013      	ands	r3, r2
 8006582:	d0f1      	beq.n	8006568 <HAL_RCC_OscConfig+0x24c>
 8006584:	e018      	b.n	80065b8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006586:	4b33      	ldr	r3, [pc, #204]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 8006588:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800658a:	4b32      	ldr	r3, [pc, #200]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 800658c:	2101      	movs	r1, #1
 800658e:	438a      	bics	r2, r1
 8006590:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006592:	f7fd f911 	bl	80037b8 <HAL_GetTick>
 8006596:	0003      	movs	r3, r0
 8006598:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800659c:	f7fd f90c 	bl	80037b8 <HAL_GetTick>
 80065a0:	0002      	movs	r2, r0
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e236      	b.n	8006a1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065ae:	4b29      	ldr	r3, [pc, #164]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 80065b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b2:	2202      	movs	r2, #2
 80065b4:	4013      	ands	r3, r2
 80065b6:	d1f1      	bne.n	800659c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2204      	movs	r2, #4
 80065be:	4013      	ands	r3, r2
 80065c0:	d100      	bne.n	80065c4 <HAL_RCC_OscConfig+0x2a8>
 80065c2:	e0b5      	b.n	8006730 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065c4:	201f      	movs	r0, #31
 80065c6:	183b      	adds	r3, r7, r0
 80065c8:	2200      	movs	r2, #0
 80065ca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065cc:	4b21      	ldr	r3, [pc, #132]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 80065ce:	69da      	ldr	r2, [r3, #28]
 80065d0:	2380      	movs	r3, #128	@ 0x80
 80065d2:	055b      	lsls	r3, r3, #21
 80065d4:	4013      	ands	r3, r2
 80065d6:	d110      	bne.n	80065fa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065d8:	4b1e      	ldr	r3, [pc, #120]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 80065da:	69da      	ldr	r2, [r3, #28]
 80065dc:	4b1d      	ldr	r3, [pc, #116]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 80065de:	2180      	movs	r1, #128	@ 0x80
 80065e0:	0549      	lsls	r1, r1, #21
 80065e2:	430a      	orrs	r2, r1
 80065e4:	61da      	str	r2, [r3, #28]
 80065e6:	4b1b      	ldr	r3, [pc, #108]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 80065e8:	69da      	ldr	r2, [r3, #28]
 80065ea:	2380      	movs	r3, #128	@ 0x80
 80065ec:	055b      	lsls	r3, r3, #21
 80065ee:	4013      	ands	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]
 80065f2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80065f4:	183b      	adds	r3, r7, r0
 80065f6:	2201      	movs	r2, #1
 80065f8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065fa:	4b19      	ldr	r3, [pc, #100]	@ (8006660 <HAL_RCC_OscConfig+0x344>)
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	2380      	movs	r3, #128	@ 0x80
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	4013      	ands	r3, r2
 8006604:	d11a      	bne.n	800663c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006606:	4b16      	ldr	r3, [pc, #88]	@ (8006660 <HAL_RCC_OscConfig+0x344>)
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	4b15      	ldr	r3, [pc, #84]	@ (8006660 <HAL_RCC_OscConfig+0x344>)
 800660c:	2180      	movs	r1, #128	@ 0x80
 800660e:	0049      	lsls	r1, r1, #1
 8006610:	430a      	orrs	r2, r1
 8006612:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006614:	f7fd f8d0 	bl	80037b8 <HAL_GetTick>
 8006618:	0003      	movs	r3, r0
 800661a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800661c:	e008      	b.n	8006630 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800661e:	f7fd f8cb 	bl	80037b8 <HAL_GetTick>
 8006622:	0002      	movs	r2, r0
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b64      	cmp	r3, #100	@ 0x64
 800662a:	d901      	bls.n	8006630 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e1f5      	b.n	8006a1c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006630:	4b0b      	ldr	r3, [pc, #44]	@ (8006660 <HAL_RCC_OscConfig+0x344>)
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	2380      	movs	r3, #128	@ 0x80
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	4013      	ands	r3, r2
 800663a:	d0f0      	beq.n	800661e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d10f      	bne.n	8006664 <HAL_RCC_OscConfig+0x348>
 8006644:	4b03      	ldr	r3, [pc, #12]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 8006646:	6a1a      	ldr	r2, [r3, #32]
 8006648:	4b02      	ldr	r3, [pc, #8]	@ (8006654 <HAL_RCC_OscConfig+0x338>)
 800664a:	2101      	movs	r1, #1
 800664c:	430a      	orrs	r2, r1
 800664e:	621a      	str	r2, [r3, #32]
 8006650:	e036      	b.n	80066c0 <HAL_RCC_OscConfig+0x3a4>
 8006652:	46c0      	nop			@ (mov r8, r8)
 8006654:	40021000 	.word	0x40021000
 8006658:	fffeffff 	.word	0xfffeffff
 800665c:	fffbffff 	.word	0xfffbffff
 8006660:	40007000 	.word	0x40007000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10c      	bne.n	8006686 <HAL_RCC_OscConfig+0x36a>
 800666c:	4bca      	ldr	r3, [pc, #808]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 800666e:	6a1a      	ldr	r2, [r3, #32]
 8006670:	4bc9      	ldr	r3, [pc, #804]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 8006672:	2101      	movs	r1, #1
 8006674:	438a      	bics	r2, r1
 8006676:	621a      	str	r2, [r3, #32]
 8006678:	4bc7      	ldr	r3, [pc, #796]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 800667a:	6a1a      	ldr	r2, [r3, #32]
 800667c:	4bc6      	ldr	r3, [pc, #792]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 800667e:	2104      	movs	r1, #4
 8006680:	438a      	bics	r2, r1
 8006682:	621a      	str	r2, [r3, #32]
 8006684:	e01c      	b.n	80066c0 <HAL_RCC_OscConfig+0x3a4>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	2b05      	cmp	r3, #5
 800668c:	d10c      	bne.n	80066a8 <HAL_RCC_OscConfig+0x38c>
 800668e:	4bc2      	ldr	r3, [pc, #776]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 8006690:	6a1a      	ldr	r2, [r3, #32]
 8006692:	4bc1      	ldr	r3, [pc, #772]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 8006694:	2104      	movs	r1, #4
 8006696:	430a      	orrs	r2, r1
 8006698:	621a      	str	r2, [r3, #32]
 800669a:	4bbf      	ldr	r3, [pc, #764]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 800669c:	6a1a      	ldr	r2, [r3, #32]
 800669e:	4bbe      	ldr	r3, [pc, #760]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 80066a0:	2101      	movs	r1, #1
 80066a2:	430a      	orrs	r2, r1
 80066a4:	621a      	str	r2, [r3, #32]
 80066a6:	e00b      	b.n	80066c0 <HAL_RCC_OscConfig+0x3a4>
 80066a8:	4bbb      	ldr	r3, [pc, #748]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 80066aa:	6a1a      	ldr	r2, [r3, #32]
 80066ac:	4bba      	ldr	r3, [pc, #744]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 80066ae:	2101      	movs	r1, #1
 80066b0:	438a      	bics	r2, r1
 80066b2:	621a      	str	r2, [r3, #32]
 80066b4:	4bb8      	ldr	r3, [pc, #736]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 80066b6:	6a1a      	ldr	r2, [r3, #32]
 80066b8:	4bb7      	ldr	r3, [pc, #732]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 80066ba:	2104      	movs	r1, #4
 80066bc:	438a      	bics	r2, r1
 80066be:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d014      	beq.n	80066f2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066c8:	f7fd f876 	bl	80037b8 <HAL_GetTick>
 80066cc:	0003      	movs	r3, r0
 80066ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066d0:	e009      	b.n	80066e6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066d2:	f7fd f871 	bl	80037b8 <HAL_GetTick>
 80066d6:	0002      	movs	r2, r0
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	4aaf      	ldr	r2, [pc, #700]	@ (800699c <HAL_RCC_OscConfig+0x680>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e19a      	b.n	8006a1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066e6:	4bac      	ldr	r3, [pc, #688]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	2202      	movs	r2, #2
 80066ec:	4013      	ands	r3, r2
 80066ee:	d0f0      	beq.n	80066d2 <HAL_RCC_OscConfig+0x3b6>
 80066f0:	e013      	b.n	800671a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066f2:	f7fd f861 	bl	80037b8 <HAL_GetTick>
 80066f6:	0003      	movs	r3, r0
 80066f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066fa:	e009      	b.n	8006710 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066fc:	f7fd f85c 	bl	80037b8 <HAL_GetTick>
 8006700:	0002      	movs	r2, r0
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	4aa5      	ldr	r2, [pc, #660]	@ (800699c <HAL_RCC_OscConfig+0x680>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d901      	bls.n	8006710 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e185      	b.n	8006a1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006710:	4ba1      	ldr	r3, [pc, #644]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	2202      	movs	r2, #2
 8006716:	4013      	ands	r3, r2
 8006718:	d1f0      	bne.n	80066fc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800671a:	231f      	movs	r3, #31
 800671c:	18fb      	adds	r3, r7, r3
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d105      	bne.n	8006730 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006724:	4b9c      	ldr	r3, [pc, #624]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 8006726:	69da      	ldr	r2, [r3, #28]
 8006728:	4b9b      	ldr	r3, [pc, #620]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 800672a:	499d      	ldr	r1, [pc, #628]	@ (80069a0 <HAL_RCC_OscConfig+0x684>)
 800672c:	400a      	ands	r2, r1
 800672e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2210      	movs	r2, #16
 8006736:	4013      	ands	r3, r2
 8006738:	d063      	beq.n	8006802 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d12a      	bne.n	8006798 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006742:	4b95      	ldr	r3, [pc, #596]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 8006744:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006746:	4b94      	ldr	r3, [pc, #592]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 8006748:	2104      	movs	r1, #4
 800674a:	430a      	orrs	r2, r1
 800674c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800674e:	4b92      	ldr	r3, [pc, #584]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 8006750:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006752:	4b91      	ldr	r3, [pc, #580]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 8006754:	2101      	movs	r1, #1
 8006756:	430a      	orrs	r2, r1
 8006758:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800675a:	f7fd f82d 	bl	80037b8 <HAL_GetTick>
 800675e:	0003      	movs	r3, r0
 8006760:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006762:	e008      	b.n	8006776 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006764:	f7fd f828 	bl	80037b8 <HAL_GetTick>
 8006768:	0002      	movs	r2, r0
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	2b02      	cmp	r3, #2
 8006770:	d901      	bls.n	8006776 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e152      	b.n	8006a1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006776:	4b88      	ldr	r3, [pc, #544]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 8006778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800677a:	2202      	movs	r2, #2
 800677c:	4013      	ands	r3, r2
 800677e:	d0f1      	beq.n	8006764 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006780:	4b85      	ldr	r3, [pc, #532]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 8006782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006784:	22f8      	movs	r2, #248	@ 0xf8
 8006786:	4393      	bics	r3, r2
 8006788:	0019      	movs	r1, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	00da      	lsls	r2, r3, #3
 8006790:	4b81      	ldr	r3, [pc, #516]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 8006792:	430a      	orrs	r2, r1
 8006794:	635a      	str	r2, [r3, #52]	@ 0x34
 8006796:	e034      	b.n	8006802 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	3305      	adds	r3, #5
 800679e:	d111      	bne.n	80067c4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80067a0:	4b7d      	ldr	r3, [pc, #500]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 80067a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067a4:	4b7c      	ldr	r3, [pc, #496]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 80067a6:	2104      	movs	r1, #4
 80067a8:	438a      	bics	r2, r1
 80067aa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80067ac:	4b7a      	ldr	r3, [pc, #488]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 80067ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067b0:	22f8      	movs	r2, #248	@ 0xf8
 80067b2:	4393      	bics	r3, r2
 80067b4:	0019      	movs	r1, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	00da      	lsls	r2, r3, #3
 80067bc:	4b76      	ldr	r3, [pc, #472]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 80067be:	430a      	orrs	r2, r1
 80067c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80067c2:	e01e      	b.n	8006802 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80067c4:	4b74      	ldr	r3, [pc, #464]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 80067c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067c8:	4b73      	ldr	r3, [pc, #460]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 80067ca:	2104      	movs	r1, #4
 80067cc:	430a      	orrs	r2, r1
 80067ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80067d0:	4b71      	ldr	r3, [pc, #452]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 80067d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067d4:	4b70      	ldr	r3, [pc, #448]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 80067d6:	2101      	movs	r1, #1
 80067d8:	438a      	bics	r2, r1
 80067da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067dc:	f7fc ffec 	bl	80037b8 <HAL_GetTick>
 80067e0:	0003      	movs	r3, r0
 80067e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80067e4:	e008      	b.n	80067f8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80067e6:	f7fc ffe7 	bl	80037b8 <HAL_GetTick>
 80067ea:	0002      	movs	r2, r0
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d901      	bls.n	80067f8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e111      	b.n	8006a1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80067f8:	4b67      	ldr	r3, [pc, #412]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 80067fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067fc:	2202      	movs	r2, #2
 80067fe:	4013      	ands	r3, r2
 8006800:	d1f1      	bne.n	80067e6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2220      	movs	r2, #32
 8006808:	4013      	ands	r3, r2
 800680a:	d05c      	beq.n	80068c6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800680c:	4b62      	ldr	r3, [pc, #392]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	220c      	movs	r2, #12
 8006812:	4013      	ands	r3, r2
 8006814:	2b0c      	cmp	r3, #12
 8006816:	d00e      	beq.n	8006836 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006818:	4b5f      	ldr	r3, [pc, #380]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	220c      	movs	r2, #12
 800681e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006820:	2b08      	cmp	r3, #8
 8006822:	d114      	bne.n	800684e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006824:	4b5c      	ldr	r3, [pc, #368]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	23c0      	movs	r3, #192	@ 0xc0
 800682a:	025b      	lsls	r3, r3, #9
 800682c:	401a      	ands	r2, r3
 800682e:	23c0      	movs	r3, #192	@ 0xc0
 8006830:	025b      	lsls	r3, r3, #9
 8006832:	429a      	cmp	r2, r3
 8006834:	d10b      	bne.n	800684e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8006836:	4b58      	ldr	r3, [pc, #352]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 8006838:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800683a:	2380      	movs	r3, #128	@ 0x80
 800683c:	029b      	lsls	r3, r3, #10
 800683e:	4013      	ands	r3, r2
 8006840:	d040      	beq.n	80068c4 <HAL_RCC_OscConfig+0x5a8>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d03c      	beq.n	80068c4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e0e6      	b.n	8006a1c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d01b      	beq.n	800688e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006856:	4b50      	ldr	r3, [pc, #320]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 8006858:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800685a:	4b4f      	ldr	r3, [pc, #316]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 800685c:	2180      	movs	r1, #128	@ 0x80
 800685e:	0249      	lsls	r1, r1, #9
 8006860:	430a      	orrs	r2, r1
 8006862:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006864:	f7fc ffa8 	bl	80037b8 <HAL_GetTick>
 8006868:	0003      	movs	r3, r0
 800686a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800686c:	e008      	b.n	8006880 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800686e:	f7fc ffa3 	bl	80037b8 <HAL_GetTick>
 8006872:	0002      	movs	r2, r0
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	2b02      	cmp	r3, #2
 800687a:	d901      	bls.n	8006880 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e0cd      	b.n	8006a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006880:	4b45      	ldr	r3, [pc, #276]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 8006882:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006884:	2380      	movs	r3, #128	@ 0x80
 8006886:	029b      	lsls	r3, r3, #10
 8006888:	4013      	ands	r3, r2
 800688a:	d0f0      	beq.n	800686e <HAL_RCC_OscConfig+0x552>
 800688c:	e01b      	b.n	80068c6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800688e:	4b42      	ldr	r3, [pc, #264]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 8006890:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006892:	4b41      	ldr	r3, [pc, #260]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 8006894:	4943      	ldr	r1, [pc, #268]	@ (80069a4 <HAL_RCC_OscConfig+0x688>)
 8006896:	400a      	ands	r2, r1
 8006898:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800689a:	f7fc ff8d 	bl	80037b8 <HAL_GetTick>
 800689e:	0003      	movs	r3, r0
 80068a0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80068a2:	e008      	b.n	80068b6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068a4:	f7fc ff88 	bl	80037b8 <HAL_GetTick>
 80068a8:	0002      	movs	r2, r0
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e0b2      	b.n	8006a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80068b6:	4b38      	ldr	r3, [pc, #224]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 80068b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068ba:	2380      	movs	r3, #128	@ 0x80
 80068bc:	029b      	lsls	r3, r3, #10
 80068be:	4013      	ands	r3, r2
 80068c0:	d1f0      	bne.n	80068a4 <HAL_RCC_OscConfig+0x588>
 80068c2:	e000      	b.n	80068c6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80068c4:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d100      	bne.n	80068d0 <HAL_RCC_OscConfig+0x5b4>
 80068ce:	e0a4      	b.n	8006a1a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068d0:	4b31      	ldr	r3, [pc, #196]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	220c      	movs	r2, #12
 80068d6:	4013      	ands	r3, r2
 80068d8:	2b08      	cmp	r3, #8
 80068da:	d100      	bne.n	80068de <HAL_RCC_OscConfig+0x5c2>
 80068dc:	e078      	b.n	80069d0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d14c      	bne.n	8006980 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068e6:	4b2c      	ldr	r3, [pc, #176]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	4b2b      	ldr	r3, [pc, #172]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 80068ec:	492e      	ldr	r1, [pc, #184]	@ (80069a8 <HAL_RCC_OscConfig+0x68c>)
 80068ee:	400a      	ands	r2, r1
 80068f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068f2:	f7fc ff61 	bl	80037b8 <HAL_GetTick>
 80068f6:	0003      	movs	r3, r0
 80068f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068fa:	e008      	b.n	800690e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068fc:	f7fc ff5c 	bl	80037b8 <HAL_GetTick>
 8006900:	0002      	movs	r2, r0
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	2b02      	cmp	r3, #2
 8006908:	d901      	bls.n	800690e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e086      	b.n	8006a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800690e:	4b22      	ldr	r3, [pc, #136]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	2380      	movs	r3, #128	@ 0x80
 8006914:	049b      	lsls	r3, r3, #18
 8006916:	4013      	ands	r3, r2
 8006918:	d1f0      	bne.n	80068fc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800691a:	4b1f      	ldr	r3, [pc, #124]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 800691c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691e:	220f      	movs	r2, #15
 8006920:	4393      	bics	r3, r2
 8006922:	0019      	movs	r1, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006928:	4b1b      	ldr	r3, [pc, #108]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 800692a:	430a      	orrs	r2, r1
 800692c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800692e:	4b1a      	ldr	r3, [pc, #104]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	4a1e      	ldr	r2, [pc, #120]	@ (80069ac <HAL_RCC_OscConfig+0x690>)
 8006934:	4013      	ands	r3, r2
 8006936:	0019      	movs	r1, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006940:	431a      	orrs	r2, r3
 8006942:	4b15      	ldr	r3, [pc, #84]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 8006944:	430a      	orrs	r2, r1
 8006946:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006948:	4b13      	ldr	r3, [pc, #76]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	4b12      	ldr	r3, [pc, #72]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 800694e:	2180      	movs	r1, #128	@ 0x80
 8006950:	0449      	lsls	r1, r1, #17
 8006952:	430a      	orrs	r2, r1
 8006954:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006956:	f7fc ff2f 	bl	80037b8 <HAL_GetTick>
 800695a:	0003      	movs	r3, r0
 800695c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800695e:	e008      	b.n	8006972 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006960:	f7fc ff2a 	bl	80037b8 <HAL_GetTick>
 8006964:	0002      	movs	r2, r0
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b02      	cmp	r3, #2
 800696c:	d901      	bls.n	8006972 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e054      	b.n	8006a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006972:	4b09      	ldr	r3, [pc, #36]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	2380      	movs	r3, #128	@ 0x80
 8006978:	049b      	lsls	r3, r3, #18
 800697a:	4013      	ands	r3, r2
 800697c:	d0f0      	beq.n	8006960 <HAL_RCC_OscConfig+0x644>
 800697e:	e04c      	b.n	8006a1a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006980:	4b05      	ldr	r3, [pc, #20]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	4b04      	ldr	r3, [pc, #16]	@ (8006998 <HAL_RCC_OscConfig+0x67c>)
 8006986:	4908      	ldr	r1, [pc, #32]	@ (80069a8 <HAL_RCC_OscConfig+0x68c>)
 8006988:	400a      	ands	r2, r1
 800698a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800698c:	f7fc ff14 	bl	80037b8 <HAL_GetTick>
 8006990:	0003      	movs	r3, r0
 8006992:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006994:	e015      	b.n	80069c2 <HAL_RCC_OscConfig+0x6a6>
 8006996:	46c0      	nop			@ (mov r8, r8)
 8006998:	40021000 	.word	0x40021000
 800699c:	00001388 	.word	0x00001388
 80069a0:	efffffff 	.word	0xefffffff
 80069a4:	fffeffff 	.word	0xfffeffff
 80069a8:	feffffff 	.word	0xfeffffff
 80069ac:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069b0:	f7fc ff02 	bl	80037b8 <HAL_GetTick>
 80069b4:	0002      	movs	r2, r0
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e02c      	b.n	8006a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069c2:	4b18      	ldr	r3, [pc, #96]	@ (8006a24 <HAL_RCC_OscConfig+0x708>)
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	2380      	movs	r3, #128	@ 0x80
 80069c8:	049b      	lsls	r3, r3, #18
 80069ca:	4013      	ands	r3, r2
 80069cc:	d1f0      	bne.n	80069b0 <HAL_RCC_OscConfig+0x694>
 80069ce:	e024      	b.n	8006a1a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d101      	bne.n	80069dc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e01f      	b.n	8006a1c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80069dc:	4b11      	ldr	r3, [pc, #68]	@ (8006a24 <HAL_RCC_OscConfig+0x708>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80069e2:	4b10      	ldr	r3, [pc, #64]	@ (8006a24 <HAL_RCC_OscConfig+0x708>)
 80069e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	23c0      	movs	r3, #192	@ 0xc0
 80069ec:	025b      	lsls	r3, r3, #9
 80069ee:	401a      	ands	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d10e      	bne.n	8006a16 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	220f      	movs	r2, #15
 80069fc:	401a      	ands	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d107      	bne.n	8006a16 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	23f0      	movs	r3, #240	@ 0xf0
 8006a0a:	039b      	lsls	r3, r3, #14
 8006a0c:	401a      	ands	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d001      	beq.n	8006a1a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e000      	b.n	8006a1c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	b008      	add	sp, #32
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	40021000 	.word	0x40021000

08006a28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e0bf      	b.n	8006bbc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a3c:	4b61      	ldr	r3, [pc, #388]	@ (8006bc4 <HAL_RCC_ClockConfig+0x19c>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2201      	movs	r2, #1
 8006a42:	4013      	ands	r3, r2
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d911      	bls.n	8006a6e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a4a:	4b5e      	ldr	r3, [pc, #376]	@ (8006bc4 <HAL_RCC_ClockConfig+0x19c>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	4393      	bics	r3, r2
 8006a52:	0019      	movs	r1, r3
 8006a54:	4b5b      	ldr	r3, [pc, #364]	@ (8006bc4 <HAL_RCC_ClockConfig+0x19c>)
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a5c:	4b59      	ldr	r3, [pc, #356]	@ (8006bc4 <HAL_RCC_ClockConfig+0x19c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2201      	movs	r2, #1
 8006a62:	4013      	ands	r3, r2
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d001      	beq.n	8006a6e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e0a6      	b.n	8006bbc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2202      	movs	r2, #2
 8006a74:	4013      	ands	r3, r2
 8006a76:	d015      	beq.n	8006aa4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2204      	movs	r2, #4
 8006a7e:	4013      	ands	r3, r2
 8006a80:	d006      	beq.n	8006a90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006a82:	4b51      	ldr	r3, [pc, #324]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	4b50      	ldr	r3, [pc, #320]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8006a88:	21e0      	movs	r1, #224	@ 0xe0
 8006a8a:	00c9      	lsls	r1, r1, #3
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a90:	4b4d      	ldr	r3, [pc, #308]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	22f0      	movs	r2, #240	@ 0xf0
 8006a96:	4393      	bics	r3, r2
 8006a98:	0019      	movs	r1, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	689a      	ldr	r2, [r3, #8]
 8006a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	4013      	ands	r3, r2
 8006aac:	d04c      	beq.n	8006b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d107      	bne.n	8006ac6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ab6:	4b44      	ldr	r3, [pc, #272]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	2380      	movs	r3, #128	@ 0x80
 8006abc:	029b      	lsls	r3, r3, #10
 8006abe:	4013      	ands	r3, r2
 8006ac0:	d120      	bne.n	8006b04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e07a      	b.n	8006bbc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d107      	bne.n	8006ade <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ace:	4b3e      	ldr	r3, [pc, #248]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	2380      	movs	r3, #128	@ 0x80
 8006ad4:	049b      	lsls	r3, r3, #18
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	d114      	bne.n	8006b04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e06e      	b.n	8006bbc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	2b03      	cmp	r3, #3
 8006ae4:	d107      	bne.n	8006af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006ae6:	4b38      	ldr	r3, [pc, #224]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8006ae8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006aea:	2380      	movs	r3, #128	@ 0x80
 8006aec:	029b      	lsls	r3, r3, #10
 8006aee:	4013      	ands	r3, r2
 8006af0:	d108      	bne.n	8006b04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e062      	b.n	8006bbc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006af6:	4b34      	ldr	r3, [pc, #208]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2202      	movs	r2, #2
 8006afc:	4013      	ands	r3, r2
 8006afe:	d101      	bne.n	8006b04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e05b      	b.n	8006bbc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b04:	4b30      	ldr	r3, [pc, #192]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	2203      	movs	r2, #3
 8006b0a:	4393      	bics	r3, r2
 8006b0c:	0019      	movs	r1, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	4b2d      	ldr	r3, [pc, #180]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8006b14:	430a      	orrs	r2, r1
 8006b16:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b18:	f7fc fe4e 	bl	80037b8 <HAL_GetTick>
 8006b1c:	0003      	movs	r3, r0
 8006b1e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b20:	e009      	b.n	8006b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b22:	f7fc fe49 	bl	80037b8 <HAL_GetTick>
 8006b26:	0002      	movs	r2, r0
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	4a27      	ldr	r2, [pc, #156]	@ (8006bcc <HAL_RCC_ClockConfig+0x1a4>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d901      	bls.n	8006b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e042      	b.n	8006bbc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b36:	4b24      	ldr	r3, [pc, #144]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	220c      	movs	r2, #12
 8006b3c:	401a      	ands	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d1ec      	bne.n	8006b22 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b48:	4b1e      	ldr	r3, [pc, #120]	@ (8006bc4 <HAL_RCC_ClockConfig+0x19c>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	4013      	ands	r3, r2
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d211      	bcs.n	8006b7a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b56:	4b1b      	ldr	r3, [pc, #108]	@ (8006bc4 <HAL_RCC_ClockConfig+0x19c>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	4393      	bics	r3, r2
 8006b5e:	0019      	movs	r1, r3
 8006b60:	4b18      	ldr	r3, [pc, #96]	@ (8006bc4 <HAL_RCC_ClockConfig+0x19c>)
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	430a      	orrs	r2, r1
 8006b66:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b68:	4b16      	ldr	r3, [pc, #88]	@ (8006bc4 <HAL_RCC_ClockConfig+0x19c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	4013      	ands	r3, r2
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d001      	beq.n	8006b7a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e020      	b.n	8006bbc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2204      	movs	r2, #4
 8006b80:	4013      	ands	r3, r2
 8006b82:	d009      	beq.n	8006b98 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006b84:	4b10      	ldr	r3, [pc, #64]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	4a11      	ldr	r2, [pc, #68]	@ (8006bd0 <HAL_RCC_ClockConfig+0x1a8>)
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	0019      	movs	r1, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68da      	ldr	r2, [r3, #12]
 8006b92:	4b0d      	ldr	r3, [pc, #52]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8006b94:	430a      	orrs	r2, r1
 8006b96:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006b98:	f000 f820 	bl	8006bdc <HAL_RCC_GetSysClockFreq>
 8006b9c:	0001      	movs	r1, r0
 8006b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	091b      	lsrs	r3, r3, #4
 8006ba4:	220f      	movs	r2, #15
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1ac>)
 8006baa:	5cd3      	ldrb	r3, [r2, r3]
 8006bac:	000a      	movs	r2, r1
 8006bae:	40da      	lsrs	r2, r3
 8006bb0:	4b09      	ldr	r3, [pc, #36]	@ (8006bd8 <HAL_RCC_ClockConfig+0x1b0>)
 8006bb2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006bb4:	2003      	movs	r0, #3
 8006bb6:	f7fc fdb9 	bl	800372c <HAL_InitTick>
  
  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	0018      	movs	r0, r3
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	b004      	add	sp, #16
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	40022000 	.word	0x40022000
 8006bc8:	40021000 	.word	0x40021000
 8006bcc:	00001388 	.word	0x00001388
 8006bd0:	fffff8ff 	.word	0xfffff8ff
 8006bd4:	080122c0 	.word	0x080122c0
 8006bd8:	20000060 	.word	0x20000060

08006bdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006be2:	2300      	movs	r3, #0
 8006be4:	60fb      	str	r3, [r7, #12]
 8006be6:	2300      	movs	r3, #0
 8006be8:	60bb      	str	r3, [r7, #8]
 8006bea:	2300      	movs	r3, #0
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	2300      	movs	r3, #0
 8006bf0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006bf6:	4b2d      	ldr	r3, [pc, #180]	@ (8006cac <HAL_RCC_GetSysClockFreq+0xd0>)
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	220c      	movs	r2, #12
 8006c00:	4013      	ands	r3, r2
 8006c02:	2b0c      	cmp	r3, #12
 8006c04:	d046      	beq.n	8006c94 <HAL_RCC_GetSysClockFreq+0xb8>
 8006c06:	d848      	bhi.n	8006c9a <HAL_RCC_GetSysClockFreq+0xbe>
 8006c08:	2b04      	cmp	r3, #4
 8006c0a:	d002      	beq.n	8006c12 <HAL_RCC_GetSysClockFreq+0x36>
 8006c0c:	2b08      	cmp	r3, #8
 8006c0e:	d003      	beq.n	8006c18 <HAL_RCC_GetSysClockFreq+0x3c>
 8006c10:	e043      	b.n	8006c9a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006c12:	4b27      	ldr	r3, [pc, #156]	@ (8006cb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006c14:	613b      	str	r3, [r7, #16]
      break;
 8006c16:	e043      	b.n	8006ca0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	0c9b      	lsrs	r3, r3, #18
 8006c1c:	220f      	movs	r2, #15
 8006c1e:	4013      	ands	r3, r2
 8006c20:	4a24      	ldr	r2, [pc, #144]	@ (8006cb4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8006c22:	5cd3      	ldrb	r3, [r2, r3]
 8006c24:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006c26:	4b21      	ldr	r3, [pc, #132]	@ (8006cac <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2a:	220f      	movs	r2, #15
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	4a22      	ldr	r2, [pc, #136]	@ (8006cb8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8006c30:	5cd3      	ldrb	r3, [r2, r3]
 8006c32:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	23c0      	movs	r3, #192	@ 0xc0
 8006c38:	025b      	lsls	r3, r3, #9
 8006c3a:	401a      	ands	r2, r3
 8006c3c:	2380      	movs	r3, #128	@ 0x80
 8006c3e:	025b      	lsls	r3, r3, #9
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d109      	bne.n	8006c58 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006c44:	68b9      	ldr	r1, [r7, #8]
 8006c46:	481a      	ldr	r0, [pc, #104]	@ (8006cb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006c48:	f7f9 fa7a 	bl	8000140 <__udivsi3>
 8006c4c:	0003      	movs	r3, r0
 8006c4e:	001a      	movs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4353      	muls	r3, r2
 8006c54:	617b      	str	r3, [r7, #20]
 8006c56:	e01a      	b.n	8006c8e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	23c0      	movs	r3, #192	@ 0xc0
 8006c5c:	025b      	lsls	r3, r3, #9
 8006c5e:	401a      	ands	r2, r3
 8006c60:	23c0      	movs	r3, #192	@ 0xc0
 8006c62:	025b      	lsls	r3, r3, #9
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d109      	bne.n	8006c7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006c68:	68b9      	ldr	r1, [r7, #8]
 8006c6a:	4814      	ldr	r0, [pc, #80]	@ (8006cbc <HAL_RCC_GetSysClockFreq+0xe0>)
 8006c6c:	f7f9 fa68 	bl	8000140 <__udivsi3>
 8006c70:	0003      	movs	r3, r0
 8006c72:	001a      	movs	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4353      	muls	r3, r2
 8006c78:	617b      	str	r3, [r7, #20]
 8006c7a:	e008      	b.n	8006c8e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006c7c:	68b9      	ldr	r1, [r7, #8]
 8006c7e:	480c      	ldr	r0, [pc, #48]	@ (8006cb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006c80:	f7f9 fa5e 	bl	8000140 <__udivsi3>
 8006c84:	0003      	movs	r3, r0
 8006c86:	001a      	movs	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4353      	muls	r3, r2
 8006c8c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	613b      	str	r3, [r7, #16]
      break;
 8006c92:	e005      	b.n	8006ca0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8006c94:	4b09      	ldr	r3, [pc, #36]	@ (8006cbc <HAL_RCC_GetSysClockFreq+0xe0>)
 8006c96:	613b      	str	r3, [r7, #16]
      break;
 8006c98:	e002      	b.n	8006ca0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006c9a:	4b05      	ldr	r3, [pc, #20]	@ (8006cb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006c9c:	613b      	str	r3, [r7, #16]
      break;
 8006c9e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006ca0:	693b      	ldr	r3, [r7, #16]
}
 8006ca2:	0018      	movs	r0, r3
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	b006      	add	sp, #24
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	46c0      	nop			@ (mov r8, r8)
 8006cac:	40021000 	.word	0x40021000
 8006cb0:	007a1200 	.word	0x007a1200
 8006cb4:	080122d8 	.word	0x080122d8
 8006cb8:	080122e8 	.word	0x080122e8
 8006cbc:	02dc6c00 	.word	0x02dc6c00

08006cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cc4:	4b02      	ldr	r3, [pc, #8]	@ (8006cd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
}
 8006cc8:	0018      	movs	r0, r3
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	46c0      	nop			@ (mov r8, r8)
 8006cd0:	20000060 	.word	0x20000060

08006cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006cd8:	f7ff fff2 	bl	8006cc0 <HAL_RCC_GetHCLKFreq>
 8006cdc:	0001      	movs	r1, r0
 8006cde:	4b06      	ldr	r3, [pc, #24]	@ (8006cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	0a1b      	lsrs	r3, r3, #8
 8006ce4:	2207      	movs	r2, #7
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	4a04      	ldr	r2, [pc, #16]	@ (8006cfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006cea:	5cd3      	ldrb	r3, [r2, r3]
 8006cec:	40d9      	lsrs	r1, r3
 8006cee:	000b      	movs	r3, r1
}    
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	46c0      	nop			@ (mov r8, r8)
 8006cf8:	40021000 	.word	0x40021000
 8006cfc:	080122d0 	.word	0x080122d0

08006d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	2380      	movs	r3, #128	@ 0x80
 8006d16:	025b      	lsls	r3, r3, #9
 8006d18:	4013      	ands	r3, r2
 8006d1a:	d100      	bne.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006d1c:	e08e      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006d1e:	2017      	movs	r0, #23
 8006d20:	183b      	adds	r3, r7, r0
 8006d22:	2200      	movs	r2, #0
 8006d24:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d26:	4b6e      	ldr	r3, [pc, #440]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d28:	69da      	ldr	r2, [r3, #28]
 8006d2a:	2380      	movs	r3, #128	@ 0x80
 8006d2c:	055b      	lsls	r3, r3, #21
 8006d2e:	4013      	ands	r3, r2
 8006d30:	d110      	bne.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d32:	4b6b      	ldr	r3, [pc, #428]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d34:	69da      	ldr	r2, [r3, #28]
 8006d36:	4b6a      	ldr	r3, [pc, #424]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d38:	2180      	movs	r1, #128	@ 0x80
 8006d3a:	0549      	lsls	r1, r1, #21
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	61da      	str	r2, [r3, #28]
 8006d40:	4b67      	ldr	r3, [pc, #412]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d42:	69da      	ldr	r2, [r3, #28]
 8006d44:	2380      	movs	r3, #128	@ 0x80
 8006d46:	055b      	lsls	r3, r3, #21
 8006d48:	4013      	ands	r3, r2
 8006d4a:	60bb      	str	r3, [r7, #8]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d4e:	183b      	adds	r3, r7, r0
 8006d50:	2201      	movs	r2, #1
 8006d52:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d54:	4b63      	ldr	r3, [pc, #396]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	2380      	movs	r3, #128	@ 0x80
 8006d5a:	005b      	lsls	r3, r3, #1
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	d11a      	bne.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d60:	4b60      	ldr	r3, [pc, #384]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	4b5f      	ldr	r3, [pc, #380]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006d66:	2180      	movs	r1, #128	@ 0x80
 8006d68:	0049      	lsls	r1, r1, #1
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d6e:	f7fc fd23 	bl	80037b8 <HAL_GetTick>
 8006d72:	0003      	movs	r3, r0
 8006d74:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d76:	e008      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d78:	f7fc fd1e 	bl	80037b8 <HAL_GetTick>
 8006d7c:	0002      	movs	r2, r0
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	2b64      	cmp	r3, #100	@ 0x64
 8006d84:	d901      	bls.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e0a6      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d8a:	4b56      	ldr	r3, [pc, #344]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	2380      	movs	r3, #128	@ 0x80
 8006d90:	005b      	lsls	r3, r3, #1
 8006d92:	4013      	ands	r3, r2
 8006d94:	d0f0      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d96:	4b52      	ldr	r3, [pc, #328]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d98:	6a1a      	ldr	r2, [r3, #32]
 8006d9a:	23c0      	movs	r3, #192	@ 0xc0
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4013      	ands	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d034      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	23c0      	movs	r3, #192	@ 0xc0
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4013      	ands	r3, r2
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d02c      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006db8:	4b49      	ldr	r3, [pc, #292]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006dba:	6a1b      	ldr	r3, [r3, #32]
 8006dbc:	4a4a      	ldr	r2, [pc, #296]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006dc2:	4b47      	ldr	r3, [pc, #284]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006dc4:	6a1a      	ldr	r2, [r3, #32]
 8006dc6:	4b46      	ldr	r3, [pc, #280]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006dc8:	2180      	movs	r1, #128	@ 0x80
 8006dca:	0249      	lsls	r1, r1, #9
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006dd0:	4b43      	ldr	r3, [pc, #268]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006dd2:	6a1a      	ldr	r2, [r3, #32]
 8006dd4:	4b42      	ldr	r3, [pc, #264]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006dd6:	4945      	ldr	r1, [pc, #276]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006dd8:	400a      	ands	r2, r1
 8006dda:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006ddc:	4b40      	ldr	r3, [pc, #256]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2201      	movs	r2, #1
 8006de6:	4013      	ands	r3, r2
 8006de8:	d013      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dea:	f7fc fce5 	bl	80037b8 <HAL_GetTick>
 8006dee:	0003      	movs	r3, r0
 8006df0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006df2:	e009      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006df4:	f7fc fce0 	bl	80037b8 <HAL_GetTick>
 8006df8:	0002      	movs	r2, r0
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	4a3c      	ldr	r2, [pc, #240]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d901      	bls.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e067      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e08:	4b35      	ldr	r3, [pc, #212]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	2202      	movs	r2, #2
 8006e0e:	4013      	ands	r3, r2
 8006e10:	d0f0      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e12:	4b33      	ldr	r3, [pc, #204]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	4a34      	ldr	r2, [pc, #208]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006e18:	4013      	ands	r3, r2
 8006e1a:	0019      	movs	r1, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	4b2f      	ldr	r3, [pc, #188]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e22:	430a      	orrs	r2, r1
 8006e24:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006e26:	2317      	movs	r3, #23
 8006e28:	18fb      	adds	r3, r7, r3
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d105      	bne.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e30:	4b2b      	ldr	r3, [pc, #172]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e32:	69da      	ldr	r2, [r3, #28]
 8006e34:	4b2a      	ldr	r3, [pc, #168]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e36:	492f      	ldr	r1, [pc, #188]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006e38:	400a      	ands	r2, r1
 8006e3a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2201      	movs	r2, #1
 8006e42:	4013      	ands	r3, r2
 8006e44:	d009      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e46:	4b26      	ldr	r3, [pc, #152]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e4a:	2203      	movs	r2, #3
 8006e4c:	4393      	bics	r3, r2
 8006e4e:	0019      	movs	r1, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689a      	ldr	r2, [r3, #8]
 8006e54:	4b22      	ldr	r3, [pc, #136]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e56:	430a      	orrs	r2, r1
 8006e58:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	4013      	ands	r3, r2
 8006e62:	d009      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e64:	4b1e      	ldr	r3, [pc, #120]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e68:	4a23      	ldr	r2, [pc, #140]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	0019      	movs	r1, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68da      	ldr	r2, [r3, #12]
 8006e72:	4b1b      	ldr	r3, [pc, #108]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e74:	430a      	orrs	r2, r1
 8006e76:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2220      	movs	r2, #32
 8006e7e:	4013      	ands	r3, r2
 8006e80:	d009      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e82:	4b17      	ldr	r3, [pc, #92]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e86:	2210      	movs	r2, #16
 8006e88:	4393      	bics	r3, r2
 8006e8a:	0019      	movs	r1, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	691a      	ldr	r2, [r3, #16]
 8006e90:	4b13      	ldr	r3, [pc, #76]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e92:	430a      	orrs	r2, r1
 8006e94:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	2380      	movs	r3, #128	@ 0x80
 8006e9c:	029b      	lsls	r3, r3, #10
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	d009      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ea6:	2280      	movs	r2, #128	@ 0x80
 8006ea8:	4393      	bics	r3, r2
 8006eaa:	0019      	movs	r1, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	699a      	ldr	r2, [r3, #24]
 8006eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	2380      	movs	r3, #128	@ 0x80
 8006ebc:	00db      	lsls	r3, r3, #3
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	d009      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ec2:	4b07      	ldr	r3, [pc, #28]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec6:	2240      	movs	r2, #64	@ 0x40
 8006ec8:	4393      	bics	r3, r2
 8006eca:	0019      	movs	r1, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	695a      	ldr	r2, [r3, #20]
 8006ed0:	4b03      	ldr	r3, [pc, #12]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	0018      	movs	r0, r3
 8006eda:	46bd      	mov	sp, r7
 8006edc:	b006      	add	sp, #24
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	40021000 	.word	0x40021000
 8006ee4:	40007000 	.word	0x40007000
 8006ee8:	fffffcff 	.word	0xfffffcff
 8006eec:	fffeffff 	.word	0xfffeffff
 8006ef0:	00001388 	.word	0x00001388
 8006ef4:	efffffff 	.word	0xefffffff
 8006ef8:	fffcffff 	.word	0xfffcffff

08006efc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d101      	bne.n	8006f0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e0a8      	b.n	8007060 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d109      	bne.n	8006f2a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685a      	ldr	r2, [r3, #4]
 8006f1a:	2382      	movs	r3, #130	@ 0x82
 8006f1c:	005b      	lsls	r3, r3, #1
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d009      	beq.n	8006f36 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	61da      	str	r2, [r3, #28]
 8006f28:	e005      	b.n	8006f36 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	225d      	movs	r2, #93	@ 0x5d
 8006f40:	5c9b      	ldrb	r3, [r3, r2]
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d107      	bne.n	8006f58 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	225c      	movs	r2, #92	@ 0x5c
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	0018      	movs	r0, r3
 8006f54:	f7fc f942 	bl	80031dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	225d      	movs	r2, #93	@ 0x5d
 8006f5c:	2102      	movs	r1, #2
 8006f5e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2140      	movs	r1, #64	@ 0x40
 8006f6c:	438a      	bics	r2, r1
 8006f6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68da      	ldr	r2, [r3, #12]
 8006f74:	23e0      	movs	r3, #224	@ 0xe0
 8006f76:	00db      	lsls	r3, r3, #3
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d902      	bls.n	8006f82 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	e002      	b.n	8006f88 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006f82:	2380      	movs	r3, #128	@ 0x80
 8006f84:	015b      	lsls	r3, r3, #5
 8006f86:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68da      	ldr	r2, [r3, #12]
 8006f8c:	23f0      	movs	r3, #240	@ 0xf0
 8006f8e:	011b      	lsls	r3, r3, #4
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d008      	beq.n	8006fa6 <HAL_SPI_Init+0xaa>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68da      	ldr	r2, [r3, #12]
 8006f98:	23e0      	movs	r3, #224	@ 0xe0
 8006f9a:	00db      	lsls	r3, r3, #3
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d002      	beq.n	8006fa6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	2382      	movs	r3, #130	@ 0x82
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	401a      	ands	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6899      	ldr	r1, [r3, #8]
 8006fb4:	2384      	movs	r3, #132	@ 0x84
 8006fb6:	021b      	lsls	r3, r3, #8
 8006fb8:	400b      	ands	r3, r1
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	2102      	movs	r1, #2
 8006fc2:	400b      	ands	r3, r1
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	2101      	movs	r1, #1
 8006fcc:	400b      	ands	r3, r1
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6999      	ldr	r1, [r3, #24]
 8006fd4:	2380      	movs	r3, #128	@ 0x80
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	400b      	ands	r3, r1
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	2138      	movs	r1, #56	@ 0x38
 8006fe2:	400b      	ands	r3, r1
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	2180      	movs	r1, #128	@ 0x80
 8006fec:	400b      	ands	r3, r1
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	0011      	movs	r1, r2
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ff6:	2380      	movs	r3, #128	@ 0x80
 8006ff8:	019b      	lsls	r3, r3, #6
 8006ffa:	401a      	ands	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	430a      	orrs	r2, r1
 8007002:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	0c1b      	lsrs	r3, r3, #16
 800700a:	2204      	movs	r2, #4
 800700c:	401a      	ands	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007012:	2110      	movs	r1, #16
 8007014:	400b      	ands	r3, r1
 8007016:	431a      	orrs	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800701c:	2108      	movs	r1, #8
 800701e:	400b      	ands	r3, r1
 8007020:	431a      	orrs	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68d9      	ldr	r1, [r3, #12]
 8007026:	23f0      	movs	r3, #240	@ 0xf0
 8007028:	011b      	lsls	r3, r3, #4
 800702a:	400b      	ands	r3, r1
 800702c:	431a      	orrs	r2, r3
 800702e:	0011      	movs	r1, r2
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	2380      	movs	r3, #128	@ 0x80
 8007034:	015b      	lsls	r3, r3, #5
 8007036:	401a      	ands	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	430a      	orrs	r2, r1
 800703e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	69da      	ldr	r2, [r3, #28]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4907      	ldr	r1, [pc, #28]	@ (8007068 <HAL_SPI_Init+0x16c>)
 800704c:	400a      	ands	r2, r1
 800704e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	225d      	movs	r2, #93	@ 0x5d
 800705a:	2101      	movs	r1, #1
 800705c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	0018      	movs	r0, r3
 8007062:	46bd      	mov	sp, r7
 8007064:	b004      	add	sp, #16
 8007066:	bd80      	pop	{r7, pc}
 8007068:	fffff7ff 	.word	0xfffff7ff

0800706c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b088      	sub	sp, #32
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	603b      	str	r3, [r7, #0]
 8007078:	1dbb      	adds	r3, r7, #6
 800707a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800707c:	231f      	movs	r3, #31
 800707e:	18fb      	adds	r3, r7, r3
 8007080:	2200      	movs	r2, #0
 8007082:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	225c      	movs	r2, #92	@ 0x5c
 8007088:	5c9b      	ldrb	r3, [r3, r2]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d101      	bne.n	8007092 <HAL_SPI_Transmit+0x26>
 800708e:	2302      	movs	r3, #2
 8007090:	e147      	b.n	8007322 <HAL_SPI_Transmit+0x2b6>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	225c      	movs	r2, #92	@ 0x5c
 8007096:	2101      	movs	r1, #1
 8007098:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800709a:	f7fc fb8d 	bl	80037b8 <HAL_GetTick>
 800709e:	0003      	movs	r3, r0
 80070a0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80070a2:	2316      	movs	r3, #22
 80070a4:	18fb      	adds	r3, r7, r3
 80070a6:	1dba      	adds	r2, r7, #6
 80070a8:	8812      	ldrh	r2, [r2, #0]
 80070aa:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	225d      	movs	r2, #93	@ 0x5d
 80070b0:	5c9b      	ldrb	r3, [r3, r2]
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d004      	beq.n	80070c2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80070b8:	231f      	movs	r3, #31
 80070ba:	18fb      	adds	r3, r7, r3
 80070bc:	2202      	movs	r2, #2
 80070be:	701a      	strb	r2, [r3, #0]
    goto error;
 80070c0:	e128      	b.n	8007314 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d003      	beq.n	80070d0 <HAL_SPI_Transmit+0x64>
 80070c8:	1dbb      	adds	r3, r7, #6
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d104      	bne.n	80070da <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80070d0:	231f      	movs	r3, #31
 80070d2:	18fb      	adds	r3, r7, r3
 80070d4:	2201      	movs	r2, #1
 80070d6:	701a      	strb	r2, [r3, #0]
    goto error;
 80070d8:	e11c      	b.n	8007314 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	225d      	movs	r2, #93	@ 0x5d
 80070de:	2103      	movs	r1, #3
 80070e0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	1dba      	adds	r2, r7, #6
 80070f2:	8812      	ldrh	r2, [r2, #0]
 80070f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	1dba      	adds	r2, r7, #6
 80070fa:	8812      	ldrh	r2, [r2, #0]
 80070fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2244      	movs	r2, #68	@ 0x44
 8007108:	2100      	movs	r1, #0
 800710a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2246      	movs	r2, #70	@ 0x46
 8007110:	2100      	movs	r1, #0
 8007112:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	689a      	ldr	r2, [r3, #8]
 8007124:	2380      	movs	r3, #128	@ 0x80
 8007126:	021b      	lsls	r3, r3, #8
 8007128:	429a      	cmp	r2, r3
 800712a:	d110      	bne.n	800714e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2140      	movs	r1, #64	@ 0x40
 8007138:	438a      	bics	r2, r1
 800713a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2180      	movs	r1, #128	@ 0x80
 8007148:	01c9      	lsls	r1, r1, #7
 800714a:	430a      	orrs	r2, r1
 800714c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2240      	movs	r2, #64	@ 0x40
 8007156:	4013      	ands	r3, r2
 8007158:	2b40      	cmp	r3, #64	@ 0x40
 800715a:	d007      	beq.n	800716c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2140      	movs	r1, #64	@ 0x40
 8007168:	430a      	orrs	r2, r1
 800716a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	68da      	ldr	r2, [r3, #12]
 8007170:	23e0      	movs	r3, #224	@ 0xe0
 8007172:	00db      	lsls	r3, r3, #3
 8007174:	429a      	cmp	r2, r3
 8007176:	d952      	bls.n	800721e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d004      	beq.n	800718a <HAL_SPI_Transmit+0x11e>
 8007180:	2316      	movs	r3, #22
 8007182:	18fb      	adds	r3, r7, r3
 8007184:	881b      	ldrh	r3, [r3, #0]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d143      	bne.n	8007212 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800718e:	881a      	ldrh	r2, [r3, #0]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800719a:	1c9a      	adds	r2, r3, #2
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	3b01      	subs	r3, #1
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80071ae:	e030      	b.n	8007212 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	2202      	movs	r2, #2
 80071b8:	4013      	ands	r3, r2
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d112      	bne.n	80071e4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c2:	881a      	ldrh	r2, [r3, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ce:	1c9a      	adds	r2, r3, #2
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071d8:	b29b      	uxth	r3, r3
 80071da:	3b01      	subs	r3, #1
 80071dc:	b29a      	uxth	r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80071e2:	e016      	b.n	8007212 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071e4:	f7fc fae8 	bl	80037b8 <HAL_GetTick>
 80071e8:	0002      	movs	r2, r0
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d802      	bhi.n	80071fa <HAL_SPI_Transmit+0x18e>
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	3301      	adds	r3, #1
 80071f8:	d102      	bne.n	8007200 <HAL_SPI_Transmit+0x194>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d108      	bne.n	8007212 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8007200:	231f      	movs	r3, #31
 8007202:	18fb      	adds	r3, r7, r3
 8007204:	2203      	movs	r2, #3
 8007206:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	225d      	movs	r2, #93	@ 0x5d
 800720c:	2101      	movs	r1, #1
 800720e:	5499      	strb	r1, [r3, r2]
          goto error;
 8007210:	e080      	b.n	8007314 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007216:	b29b      	uxth	r3, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1c9      	bne.n	80071b0 <HAL_SPI_Transmit+0x144>
 800721c:	e053      	b.n	80072c6 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d004      	beq.n	8007230 <HAL_SPI_Transmit+0x1c4>
 8007226:	2316      	movs	r3, #22
 8007228:	18fb      	adds	r3, r7, r3
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d145      	bne.n	80072bc <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	330c      	adds	r3, #12
 800723a:	7812      	ldrb	r2, [r2, #0]
 800723c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007242:	1c5a      	adds	r2, r3, #1
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800724c:	b29b      	uxth	r3, r3
 800724e:	3b01      	subs	r3, #1
 8007250:	b29a      	uxth	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8007256:	e031      	b.n	80072bc <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	2202      	movs	r2, #2
 8007260:	4013      	ands	r3, r2
 8007262:	2b02      	cmp	r3, #2
 8007264:	d113      	bne.n	800728e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	330c      	adds	r3, #12
 8007270:	7812      	ldrb	r2, [r2, #0]
 8007272:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007278:	1c5a      	adds	r2, r3, #1
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007282:	b29b      	uxth	r3, r3
 8007284:	3b01      	subs	r3, #1
 8007286:	b29a      	uxth	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800728c:	e016      	b.n	80072bc <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800728e:	f7fc fa93 	bl	80037b8 <HAL_GetTick>
 8007292:	0002      	movs	r2, r0
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	429a      	cmp	r2, r3
 800729c:	d802      	bhi.n	80072a4 <HAL_SPI_Transmit+0x238>
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	3301      	adds	r3, #1
 80072a2:	d102      	bne.n	80072aa <HAL_SPI_Transmit+0x23e>
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d108      	bne.n	80072bc <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80072aa:	231f      	movs	r3, #31
 80072ac:	18fb      	adds	r3, r7, r3
 80072ae:	2203      	movs	r2, #3
 80072b0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	225d      	movs	r2, #93	@ 0x5d
 80072b6:	2101      	movs	r1, #1
 80072b8:	5499      	strb	r1, [r3, r2]
          goto error;
 80072ba:	e02b      	b.n	8007314 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1c8      	bne.n	8007258 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072c6:	69ba      	ldr	r2, [r7, #24]
 80072c8:	6839      	ldr	r1, [r7, #0]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	0018      	movs	r0, r3
 80072ce:	f000 fcfb 	bl	8007cc8 <SPI_EndRxTxTransaction>
 80072d2:	1e03      	subs	r3, r0, #0
 80072d4:	d002      	beq.n	80072dc <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2220      	movs	r2, #32
 80072da:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10a      	bne.n	80072fa <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072e4:	2300      	movs	r3, #0
 80072e6:	613b      	str	r3, [r7, #16]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	613b      	str	r3, [r7, #16]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	613b      	str	r3, [r7, #16]
 80072f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d004      	beq.n	800730c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8007302:	231f      	movs	r3, #31
 8007304:	18fb      	adds	r3, r7, r3
 8007306:	2201      	movs	r2, #1
 8007308:	701a      	strb	r2, [r3, #0]
 800730a:	e003      	b.n	8007314 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	225d      	movs	r2, #93	@ 0x5d
 8007310:	2101      	movs	r1, #1
 8007312:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	225c      	movs	r2, #92	@ 0x5c
 8007318:	2100      	movs	r1, #0
 800731a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800731c:	231f      	movs	r3, #31
 800731e:	18fb      	adds	r3, r7, r3
 8007320:	781b      	ldrb	r3, [r3, #0]
}
 8007322:	0018      	movs	r0, r3
 8007324:	46bd      	mov	sp, r7
 8007326:	b008      	add	sp, #32
 8007328:	bd80      	pop	{r7, pc}
	...

0800732c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800732c:	b590      	push	{r4, r7, lr}
 800732e:	b089      	sub	sp, #36	@ 0x24
 8007330:	af02      	add	r7, sp, #8
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	603b      	str	r3, [r7, #0]
 8007338:	1dbb      	adds	r3, r7, #6
 800733a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800733c:	2117      	movs	r1, #23
 800733e:	187b      	adds	r3, r7, r1
 8007340:	2200      	movs	r2, #0
 8007342:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	225d      	movs	r2, #93	@ 0x5d
 8007348:	5c9b      	ldrb	r3, [r3, r2]
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b01      	cmp	r3, #1
 800734e:	d003      	beq.n	8007358 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8007350:	187b      	adds	r3, r7, r1
 8007352:	2202      	movs	r2, #2
 8007354:	701a      	strb	r2, [r3, #0]
    goto error;
 8007356:	e12b      	b.n	80075b0 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	2382      	movs	r3, #130	@ 0x82
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	429a      	cmp	r2, r3
 8007362:	d113      	bne.n	800738c <HAL_SPI_Receive+0x60>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10f      	bne.n	800738c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	225d      	movs	r2, #93	@ 0x5d
 8007370:	2104      	movs	r1, #4
 8007372:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007374:	1dbb      	adds	r3, r7, #6
 8007376:	881c      	ldrh	r4, [r3, #0]
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	68b9      	ldr	r1, [r7, #8]
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	0023      	movs	r3, r4
 8007384:	f000 f924 	bl	80075d0 <HAL_SPI_TransmitReceive>
 8007388:	0003      	movs	r3, r0
 800738a:	e118      	b.n	80075be <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	225c      	movs	r2, #92	@ 0x5c
 8007390:	5c9b      	ldrb	r3, [r3, r2]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d101      	bne.n	800739a <HAL_SPI_Receive+0x6e>
 8007396:	2302      	movs	r3, #2
 8007398:	e111      	b.n	80075be <HAL_SPI_Receive+0x292>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	225c      	movs	r2, #92	@ 0x5c
 800739e:	2101      	movs	r1, #1
 80073a0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073a2:	f7fc fa09 	bl	80037b8 <HAL_GetTick>
 80073a6:	0003      	movs	r3, r0
 80073a8:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d003      	beq.n	80073b8 <HAL_SPI_Receive+0x8c>
 80073b0:	1dbb      	adds	r3, r7, #6
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d104      	bne.n	80073c2 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 80073b8:	2317      	movs	r3, #23
 80073ba:	18fb      	adds	r3, r7, r3
 80073bc:	2201      	movs	r2, #1
 80073be:	701a      	strb	r2, [r3, #0]
    goto error;
 80073c0:	e0f6      	b.n	80075b0 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	225d      	movs	r2, #93	@ 0x5d
 80073c6:	2104      	movs	r1, #4
 80073c8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	1dba      	adds	r2, r7, #6
 80073da:	2144      	movs	r1, #68	@ 0x44
 80073dc:	8812      	ldrh	r2, [r2, #0]
 80073de:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	1dba      	adds	r2, r7, #6
 80073e4:	2146      	movs	r1, #70	@ 0x46
 80073e6:	8812      	ldrh	r2, [r2, #0]
 80073e8:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	68da      	ldr	r2, [r3, #12]
 800740c:	23e0      	movs	r3, #224	@ 0xe0
 800740e:	00db      	lsls	r3, r3, #3
 8007410:	429a      	cmp	r2, r3
 8007412:	d908      	bls.n	8007426 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	496a      	ldr	r1, [pc, #424]	@ (80075c8 <HAL_SPI_Receive+0x29c>)
 8007420:	400a      	ands	r2, r1
 8007422:	605a      	str	r2, [r3, #4]
 8007424:	e008      	b.n	8007438 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2180      	movs	r1, #128	@ 0x80
 8007432:	0149      	lsls	r1, r1, #5
 8007434:	430a      	orrs	r2, r1
 8007436:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	689a      	ldr	r2, [r3, #8]
 800743c:	2380      	movs	r3, #128	@ 0x80
 800743e:	021b      	lsls	r3, r3, #8
 8007440:	429a      	cmp	r2, r3
 8007442:	d10f      	bne.n	8007464 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2140      	movs	r1, #64	@ 0x40
 8007450:	438a      	bics	r2, r1
 8007452:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	495b      	ldr	r1, [pc, #364]	@ (80075cc <HAL_SPI_Receive+0x2a0>)
 8007460:	400a      	ands	r2, r1
 8007462:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2240      	movs	r2, #64	@ 0x40
 800746c:	4013      	ands	r3, r2
 800746e:	2b40      	cmp	r3, #64	@ 0x40
 8007470:	d007      	beq.n	8007482 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2140      	movs	r1, #64	@ 0x40
 800747e:	430a      	orrs	r2, r1
 8007480:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	68da      	ldr	r2, [r3, #12]
 8007486:	23e0      	movs	r3, #224	@ 0xe0
 8007488:	00db      	lsls	r3, r3, #3
 800748a:	429a      	cmp	r2, r3
 800748c:	d900      	bls.n	8007490 <HAL_SPI_Receive+0x164>
 800748e:	e071      	b.n	8007574 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007490:	e035      	b.n	80074fe <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	2201      	movs	r2, #1
 800749a:	4013      	ands	r3, r2
 800749c:	2b01      	cmp	r3, #1
 800749e:	d117      	bne.n	80074d0 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	330c      	adds	r3, #12
 80074a6:	001a      	movs	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ac:	7812      	ldrb	r2, [r2, #0]
 80074ae:	b2d2      	uxtb	r2, r2
 80074b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b6:	1c5a      	adds	r2, r3, #1
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2246      	movs	r2, #70	@ 0x46
 80074c0:	5a9b      	ldrh	r3, [r3, r2]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	3b01      	subs	r3, #1
 80074c6:	b299      	uxth	r1, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2246      	movs	r2, #70	@ 0x46
 80074cc:	5299      	strh	r1, [r3, r2]
 80074ce:	e016      	b.n	80074fe <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074d0:	f7fc f972 	bl	80037b8 <HAL_GetTick>
 80074d4:	0002      	movs	r2, r0
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d802      	bhi.n	80074e6 <HAL_SPI_Receive+0x1ba>
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	3301      	adds	r3, #1
 80074e4:	d102      	bne.n	80074ec <HAL_SPI_Receive+0x1c0>
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d108      	bne.n	80074fe <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 80074ec:	2317      	movs	r3, #23
 80074ee:	18fb      	adds	r3, r7, r3
 80074f0:	2203      	movs	r2, #3
 80074f2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	225d      	movs	r2, #93	@ 0x5d
 80074f8:	2101      	movs	r1, #1
 80074fa:	5499      	strb	r1, [r3, r2]
          goto error;
 80074fc:	e058      	b.n	80075b0 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2246      	movs	r2, #70	@ 0x46
 8007502:	5a9b      	ldrh	r3, [r3, r2]
 8007504:	b29b      	uxth	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1c3      	bne.n	8007492 <HAL_SPI_Receive+0x166>
 800750a:	e039      	b.n	8007580 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	2201      	movs	r2, #1
 8007514:	4013      	ands	r3, r2
 8007516:	2b01      	cmp	r3, #1
 8007518:	d115      	bne.n	8007546 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68da      	ldr	r2, [r3, #12]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007524:	b292      	uxth	r2, r2
 8007526:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800752c:	1c9a      	adds	r2, r3, #2
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2246      	movs	r2, #70	@ 0x46
 8007536:	5a9b      	ldrh	r3, [r3, r2]
 8007538:	b29b      	uxth	r3, r3
 800753a:	3b01      	subs	r3, #1
 800753c:	b299      	uxth	r1, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2246      	movs	r2, #70	@ 0x46
 8007542:	5299      	strh	r1, [r3, r2]
 8007544:	e016      	b.n	8007574 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007546:	f7fc f937 	bl	80037b8 <HAL_GetTick>
 800754a:	0002      	movs	r2, r0
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	429a      	cmp	r2, r3
 8007554:	d802      	bhi.n	800755c <HAL_SPI_Receive+0x230>
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	3301      	adds	r3, #1
 800755a:	d102      	bne.n	8007562 <HAL_SPI_Receive+0x236>
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d108      	bne.n	8007574 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8007562:	2317      	movs	r3, #23
 8007564:	18fb      	adds	r3, r7, r3
 8007566:	2203      	movs	r2, #3
 8007568:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	225d      	movs	r2, #93	@ 0x5d
 800756e:	2101      	movs	r1, #1
 8007570:	5499      	strb	r1, [r3, r2]
          goto error;
 8007572:	e01d      	b.n	80075b0 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2246      	movs	r2, #70	@ 0x46
 8007578:	5a9b      	ldrh	r3, [r3, r2]
 800757a:	b29b      	uxth	r3, r3
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1c5      	bne.n	800750c <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	0018      	movs	r0, r3
 8007588:	f000 fb40 	bl	8007c0c <SPI_EndRxTransaction>
 800758c:	1e03      	subs	r3, r0, #0
 800758e:	d002      	beq.n	8007596 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2220      	movs	r2, #32
 8007594:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800759a:	2b00      	cmp	r3, #0
 800759c:	d004      	beq.n	80075a8 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800759e:	2317      	movs	r3, #23
 80075a0:	18fb      	adds	r3, r7, r3
 80075a2:	2201      	movs	r2, #1
 80075a4:	701a      	strb	r2, [r3, #0]
 80075a6:	e003      	b.n	80075b0 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	225d      	movs	r2, #93	@ 0x5d
 80075ac:	2101      	movs	r1, #1
 80075ae:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	225c      	movs	r2, #92	@ 0x5c
 80075b4:	2100      	movs	r1, #0
 80075b6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80075b8:	2317      	movs	r3, #23
 80075ba:	18fb      	adds	r3, r7, r3
 80075bc:	781b      	ldrb	r3, [r3, #0]
}
 80075be:	0018      	movs	r0, r3
 80075c0:	46bd      	mov	sp, r7
 80075c2:	b007      	add	sp, #28
 80075c4:	bd90      	pop	{r4, r7, pc}
 80075c6:	46c0      	nop			@ (mov r8, r8)
 80075c8:	ffffefff 	.word	0xffffefff
 80075cc:	ffffbfff 	.word	0xffffbfff

080075d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b08a      	sub	sp, #40	@ 0x28
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
 80075dc:	001a      	movs	r2, r3
 80075de:	1cbb      	adds	r3, r7, #2
 80075e0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80075e2:	2301      	movs	r3, #1
 80075e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80075e6:	2323      	movs	r3, #35	@ 0x23
 80075e8:	18fb      	adds	r3, r7, r3
 80075ea:	2200      	movs	r2, #0
 80075ec:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	225c      	movs	r2, #92	@ 0x5c
 80075f2:	5c9b      	ldrb	r3, [r3, r2]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d101      	bne.n	80075fc <HAL_SPI_TransmitReceive+0x2c>
 80075f8:	2302      	movs	r3, #2
 80075fa:	e1c4      	b.n	8007986 <HAL_SPI_TransmitReceive+0x3b6>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	225c      	movs	r2, #92	@ 0x5c
 8007600:	2101      	movs	r1, #1
 8007602:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007604:	f7fc f8d8 	bl	80037b8 <HAL_GetTick>
 8007608:	0003      	movs	r3, r0
 800760a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800760c:	201b      	movs	r0, #27
 800760e:	183b      	adds	r3, r7, r0
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	215d      	movs	r1, #93	@ 0x5d
 8007614:	5c52      	ldrb	r2, [r2, r1]
 8007616:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800761e:	2312      	movs	r3, #18
 8007620:	18fb      	adds	r3, r7, r3
 8007622:	1cba      	adds	r2, r7, #2
 8007624:	8812      	ldrh	r2, [r2, #0]
 8007626:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007628:	183b      	adds	r3, r7, r0
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d011      	beq.n	8007654 <HAL_SPI_TransmitReceive+0x84>
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	2382      	movs	r3, #130	@ 0x82
 8007634:	005b      	lsls	r3, r3, #1
 8007636:	429a      	cmp	r2, r3
 8007638:	d107      	bne.n	800764a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d103      	bne.n	800764a <HAL_SPI_TransmitReceive+0x7a>
 8007642:	183b      	adds	r3, r7, r0
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	2b04      	cmp	r3, #4
 8007648:	d004      	beq.n	8007654 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800764a:	2323      	movs	r3, #35	@ 0x23
 800764c:	18fb      	adds	r3, r7, r3
 800764e:	2202      	movs	r2, #2
 8007650:	701a      	strb	r2, [r3, #0]
    goto error;
 8007652:	e191      	b.n	8007978 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d006      	beq.n	8007668 <HAL_SPI_TransmitReceive+0x98>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d003      	beq.n	8007668 <HAL_SPI_TransmitReceive+0x98>
 8007660:	1cbb      	adds	r3, r7, #2
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d104      	bne.n	8007672 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007668:	2323      	movs	r3, #35	@ 0x23
 800766a:	18fb      	adds	r3, r7, r3
 800766c:	2201      	movs	r2, #1
 800766e:	701a      	strb	r2, [r3, #0]
    goto error;
 8007670:	e182      	b.n	8007978 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	225d      	movs	r2, #93	@ 0x5d
 8007676:	5c9b      	ldrb	r3, [r3, r2]
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b04      	cmp	r3, #4
 800767c:	d003      	beq.n	8007686 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	225d      	movs	r2, #93	@ 0x5d
 8007682:	2105      	movs	r1, #5
 8007684:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	1cba      	adds	r2, r7, #2
 8007696:	2146      	movs	r1, #70	@ 0x46
 8007698:	8812      	ldrh	r2, [r2, #0]
 800769a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	1cba      	adds	r2, r7, #2
 80076a0:	2144      	movs	r1, #68	@ 0x44
 80076a2:	8812      	ldrh	r2, [r2, #0]
 80076a4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	1cba      	adds	r2, r7, #2
 80076b0:	8812      	ldrh	r2, [r2, #0]
 80076b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	1cba      	adds	r2, r7, #2
 80076b8:	8812      	ldrh	r2, [r2, #0]
 80076ba:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	68da      	ldr	r2, [r3, #12]
 80076cc:	23e0      	movs	r3, #224	@ 0xe0
 80076ce:	00db      	lsls	r3, r3, #3
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d908      	bls.n	80076e6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	49ac      	ldr	r1, [pc, #688]	@ (8007990 <HAL_SPI_TransmitReceive+0x3c0>)
 80076e0:	400a      	ands	r2, r1
 80076e2:	605a      	str	r2, [r3, #4]
 80076e4:	e008      	b.n	80076f8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2180      	movs	r1, #128	@ 0x80
 80076f2:	0149      	lsls	r1, r1, #5
 80076f4:	430a      	orrs	r2, r1
 80076f6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2240      	movs	r2, #64	@ 0x40
 8007700:	4013      	ands	r3, r2
 8007702:	2b40      	cmp	r3, #64	@ 0x40
 8007704:	d007      	beq.n	8007716 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2140      	movs	r1, #64	@ 0x40
 8007712:	430a      	orrs	r2, r1
 8007714:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	68da      	ldr	r2, [r3, #12]
 800771a:	23e0      	movs	r3, #224	@ 0xe0
 800771c:	00db      	lsls	r3, r3, #3
 800771e:	429a      	cmp	r2, r3
 8007720:	d800      	bhi.n	8007724 <HAL_SPI_TransmitReceive+0x154>
 8007722:	e083      	b.n	800782c <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d005      	beq.n	8007738 <HAL_SPI_TransmitReceive+0x168>
 800772c:	2312      	movs	r3, #18
 800772e:	18fb      	adds	r3, r7, r3
 8007730:	881b      	ldrh	r3, [r3, #0]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d000      	beq.n	8007738 <HAL_SPI_TransmitReceive+0x168>
 8007736:	e06d      	b.n	8007814 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800773c:	881a      	ldrh	r2, [r3, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007748:	1c9a      	adds	r2, r3, #2
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007752:	b29b      	uxth	r3, r3
 8007754:	3b01      	subs	r3, #1
 8007756:	b29a      	uxth	r2, r3
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800775c:	e05a      	b.n	8007814 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	2202      	movs	r2, #2
 8007766:	4013      	ands	r3, r2
 8007768:	2b02      	cmp	r3, #2
 800776a:	d11b      	bne.n	80077a4 <HAL_SPI_TransmitReceive+0x1d4>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007770:	b29b      	uxth	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d016      	beq.n	80077a4 <HAL_SPI_TransmitReceive+0x1d4>
 8007776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007778:	2b01      	cmp	r3, #1
 800777a:	d113      	bne.n	80077a4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007780:	881a      	ldrh	r2, [r3, #0]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800778c:	1c9a      	adds	r2, r3, #2
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007796:	b29b      	uxth	r3, r3
 8007798:	3b01      	subs	r3, #1
 800779a:	b29a      	uxth	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077a0:	2300      	movs	r3, #0
 80077a2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	2201      	movs	r2, #1
 80077ac:	4013      	ands	r3, r2
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d11c      	bne.n	80077ec <HAL_SPI_TransmitReceive+0x21c>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2246      	movs	r2, #70	@ 0x46
 80077b6:	5a9b      	ldrh	r3, [r3, r2]
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d016      	beq.n	80077ec <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68da      	ldr	r2, [r3, #12]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c8:	b292      	uxth	r2, r2
 80077ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077d0:	1c9a      	adds	r2, r3, #2
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2246      	movs	r2, #70	@ 0x46
 80077da:	5a9b      	ldrh	r3, [r3, r2]
 80077dc:	b29b      	uxth	r3, r3
 80077de:	3b01      	subs	r3, #1
 80077e0:	b299      	uxth	r1, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2246      	movs	r2, #70	@ 0x46
 80077e6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077e8:	2301      	movs	r3, #1
 80077ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80077ec:	f7fb ffe4 	bl	80037b8 <HAL_GetTick>
 80077f0:	0002      	movs	r2, r0
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d80b      	bhi.n	8007814 <HAL_SPI_TransmitReceive+0x244>
 80077fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fe:	3301      	adds	r3, #1
 8007800:	d008      	beq.n	8007814 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8007802:	2323      	movs	r3, #35	@ 0x23
 8007804:	18fb      	adds	r3, r7, r3
 8007806:	2203      	movs	r2, #3
 8007808:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	225d      	movs	r2, #93	@ 0x5d
 800780e:	2101      	movs	r1, #1
 8007810:	5499      	strb	r1, [r3, r2]
        goto error;
 8007812:	e0b1      	b.n	8007978 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007818:	b29b      	uxth	r3, r3
 800781a:	2b00      	cmp	r3, #0
 800781c:	d19f      	bne.n	800775e <HAL_SPI_TransmitReceive+0x18e>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2246      	movs	r2, #70	@ 0x46
 8007822:	5a9b      	ldrh	r3, [r3, r2]
 8007824:	b29b      	uxth	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d199      	bne.n	800775e <HAL_SPI_TransmitReceive+0x18e>
 800782a:	e089      	b.n	8007940 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d005      	beq.n	8007840 <HAL_SPI_TransmitReceive+0x270>
 8007834:	2312      	movs	r3, #18
 8007836:	18fb      	adds	r3, r7, r3
 8007838:	881b      	ldrh	r3, [r3, #0]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d000      	beq.n	8007840 <HAL_SPI_TransmitReceive+0x270>
 800783e:	e074      	b.n	800792a <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	330c      	adds	r3, #12
 800784a:	7812      	ldrb	r2, [r2, #0]
 800784c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007852:	1c5a      	adds	r2, r3, #1
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800785c:	b29b      	uxth	r3, r3
 800785e:	3b01      	subs	r3, #1
 8007860:	b29a      	uxth	r2, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007866:	e060      	b.n	800792a <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	2202      	movs	r2, #2
 8007870:	4013      	ands	r3, r2
 8007872:	2b02      	cmp	r3, #2
 8007874:	d11c      	bne.n	80078b0 <HAL_SPI_TransmitReceive+0x2e0>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800787a:	b29b      	uxth	r3, r3
 800787c:	2b00      	cmp	r3, #0
 800787e:	d017      	beq.n	80078b0 <HAL_SPI_TransmitReceive+0x2e0>
 8007880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007882:	2b01      	cmp	r3, #1
 8007884:	d114      	bne.n	80078b0 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	330c      	adds	r3, #12
 8007890:	7812      	ldrb	r2, [r2, #0]
 8007892:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007898:	1c5a      	adds	r2, r3, #1
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	3b01      	subs	r3, #1
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078ac:	2300      	movs	r3, #0
 80078ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	2201      	movs	r2, #1
 80078b8:	4013      	ands	r3, r2
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d11e      	bne.n	80078fc <HAL_SPI_TransmitReceive+0x32c>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2246      	movs	r2, #70	@ 0x46
 80078c2:	5a9b      	ldrh	r3, [r3, r2]
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d018      	beq.n	80078fc <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	330c      	adds	r3, #12
 80078d0:	001a      	movs	r2, r3
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d6:	7812      	ldrb	r2, [r2, #0]
 80078d8:	b2d2      	uxtb	r2, r2
 80078da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e0:	1c5a      	adds	r2, r3, #1
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2246      	movs	r2, #70	@ 0x46
 80078ea:	5a9b      	ldrh	r3, [r3, r2]
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	3b01      	subs	r3, #1
 80078f0:	b299      	uxth	r1, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2246      	movs	r2, #70	@ 0x46
 80078f6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078f8:	2301      	movs	r3, #1
 80078fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80078fc:	f7fb ff5c 	bl	80037b8 <HAL_GetTick>
 8007900:	0002      	movs	r2, r0
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007908:	429a      	cmp	r2, r3
 800790a:	d802      	bhi.n	8007912 <HAL_SPI_TransmitReceive+0x342>
 800790c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790e:	3301      	adds	r3, #1
 8007910:	d102      	bne.n	8007918 <HAL_SPI_TransmitReceive+0x348>
 8007912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007914:	2b00      	cmp	r3, #0
 8007916:	d108      	bne.n	800792a <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8007918:	2323      	movs	r3, #35	@ 0x23
 800791a:	18fb      	adds	r3, r7, r3
 800791c:	2203      	movs	r2, #3
 800791e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	225d      	movs	r2, #93	@ 0x5d
 8007924:	2101      	movs	r1, #1
 8007926:	5499      	strb	r1, [r3, r2]
        goto error;
 8007928:	e026      	b.n	8007978 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800792e:	b29b      	uxth	r3, r3
 8007930:	2b00      	cmp	r3, #0
 8007932:	d199      	bne.n	8007868 <HAL_SPI_TransmitReceive+0x298>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2246      	movs	r2, #70	@ 0x46
 8007938:	5a9b      	ldrh	r3, [r3, r2]
 800793a:	b29b      	uxth	r3, r3
 800793c:	2b00      	cmp	r3, #0
 800793e:	d193      	bne.n	8007868 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007940:	69fa      	ldr	r2, [r7, #28]
 8007942:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	0018      	movs	r0, r3
 8007948:	f000 f9be 	bl	8007cc8 <SPI_EndRxTxTransaction>
 800794c:	1e03      	subs	r3, r0, #0
 800794e:	d006      	beq.n	800795e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8007950:	2323      	movs	r3, #35	@ 0x23
 8007952:	18fb      	adds	r3, r7, r3
 8007954:	2201      	movs	r2, #1
 8007956:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2220      	movs	r2, #32
 800795c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007962:	2b00      	cmp	r3, #0
 8007964:	d004      	beq.n	8007970 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8007966:	2323      	movs	r3, #35	@ 0x23
 8007968:	18fb      	adds	r3, r7, r3
 800796a:	2201      	movs	r2, #1
 800796c:	701a      	strb	r2, [r3, #0]
 800796e:	e003      	b.n	8007978 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	225d      	movs	r2, #93	@ 0x5d
 8007974:	2101      	movs	r1, #1
 8007976:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	225c      	movs	r2, #92	@ 0x5c
 800797c:	2100      	movs	r1, #0
 800797e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007980:	2323      	movs	r3, #35	@ 0x23
 8007982:	18fb      	adds	r3, r7, r3
 8007984:	781b      	ldrb	r3, [r3, #0]
}
 8007986:	0018      	movs	r0, r3
 8007988:	46bd      	mov	sp, r7
 800798a:	b00a      	add	sp, #40	@ 0x28
 800798c:	bd80      	pop	{r7, pc}
 800798e:	46c0      	nop			@ (mov r8, r8)
 8007990:	ffffefff 	.word	0xffffefff

08007994 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	225d      	movs	r2, #93	@ 0x5d
 80079a0:	5c9b      	ldrb	r3, [r3, r2]
 80079a2:	b2db      	uxtb	r3, r3
}
 80079a4:	0018      	movs	r0, r3
 80079a6:	46bd      	mov	sp, r7
 80079a8:	b002      	add	sp, #8
 80079aa:	bd80      	pop	{r7, pc}

080079ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b088      	sub	sp, #32
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	603b      	str	r3, [r7, #0]
 80079b8:	1dfb      	adds	r3, r7, #7
 80079ba:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80079bc:	f7fb fefc 	bl	80037b8 <HAL_GetTick>
 80079c0:	0002      	movs	r2, r0
 80079c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c4:	1a9b      	subs	r3, r3, r2
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	18d3      	adds	r3, r2, r3
 80079ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80079cc:	f7fb fef4 	bl	80037b8 <HAL_GetTick>
 80079d0:	0003      	movs	r3, r0
 80079d2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80079d4:	4b3a      	ldr	r3, [pc, #232]	@ (8007ac0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	015b      	lsls	r3, r3, #5
 80079da:	0d1b      	lsrs	r3, r3, #20
 80079dc:	69fa      	ldr	r2, [r7, #28]
 80079de:	4353      	muls	r3, r2
 80079e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079e2:	e058      	b.n	8007a96 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	3301      	adds	r3, #1
 80079e8:	d055      	beq.n	8007a96 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80079ea:	f7fb fee5 	bl	80037b8 <HAL_GetTick>
 80079ee:	0002      	movs	r2, r0
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	69fa      	ldr	r2, [r7, #28]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d902      	bls.n	8007a00 <SPI_WaitFlagStateUntilTimeout+0x54>
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d142      	bne.n	8007a86 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	685a      	ldr	r2, [r3, #4]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	21e0      	movs	r1, #224	@ 0xe0
 8007a0c:	438a      	bics	r2, r1
 8007a0e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	685a      	ldr	r2, [r3, #4]
 8007a14:	2382      	movs	r3, #130	@ 0x82
 8007a16:	005b      	lsls	r3, r3, #1
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d113      	bne.n	8007a44 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	689a      	ldr	r2, [r3, #8]
 8007a20:	2380      	movs	r3, #128	@ 0x80
 8007a22:	021b      	lsls	r3, r3, #8
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d005      	beq.n	8007a34 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	2380      	movs	r3, #128	@ 0x80
 8007a2e:	00db      	lsls	r3, r3, #3
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d107      	bne.n	8007a44 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2140      	movs	r1, #64	@ 0x40
 8007a40:	438a      	bics	r2, r1
 8007a42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a48:	2380      	movs	r3, #128	@ 0x80
 8007a4a:	019b      	lsls	r3, r3, #6
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d110      	bne.n	8007a72 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	491a      	ldr	r1, [pc, #104]	@ (8007ac4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007a5c:	400a      	ands	r2, r1
 8007a5e:	601a      	str	r2, [r3, #0]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2180      	movs	r1, #128	@ 0x80
 8007a6c:	0189      	lsls	r1, r1, #6
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	225d      	movs	r2, #93	@ 0x5d
 8007a76:	2101      	movs	r1, #1
 8007a78:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	225c      	movs	r2, #92	@ 0x5c
 8007a7e:	2100      	movs	r1, #0
 8007a80:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	e017      	b.n	8007ab6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d101      	bne.n	8007a90 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	3b01      	subs	r3, #1
 8007a94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	425a      	negs	r2, r3
 8007aa6:	4153      	adcs	r3, r2
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	001a      	movs	r2, r3
 8007aac:	1dfb      	adds	r3, r7, #7
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d197      	bne.n	80079e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	0018      	movs	r0, r3
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	b008      	add	sp, #32
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	46c0      	nop			@ (mov r8, r8)
 8007ac0:	20000060 	.word	0x20000060
 8007ac4:	ffffdfff 	.word	0xffffdfff

08007ac8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b08a      	sub	sp, #40	@ 0x28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	607a      	str	r2, [r7, #4]
 8007ad4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007ad6:	2317      	movs	r3, #23
 8007ad8:	18fb      	adds	r3, r7, r3
 8007ada:	2200      	movs	r2, #0
 8007adc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007ade:	f7fb fe6b 	bl	80037b8 <HAL_GetTick>
 8007ae2:	0002      	movs	r2, r0
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae6:	1a9b      	subs	r3, r3, r2
 8007ae8:	683a      	ldr	r2, [r7, #0]
 8007aea:	18d3      	adds	r3, r2, r3
 8007aec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007aee:	f7fb fe63 	bl	80037b8 <HAL_GetTick>
 8007af2:	0003      	movs	r3, r0
 8007af4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	330c      	adds	r3, #12
 8007afc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007afe:	4b41      	ldr	r3, [pc, #260]	@ (8007c04 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	0013      	movs	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	189b      	adds	r3, r3, r2
 8007b08:	00da      	lsls	r2, r3, #3
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	0d1b      	lsrs	r3, r3, #20
 8007b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b10:	4353      	muls	r3, r2
 8007b12:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007b14:	e068      	b.n	8007be8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	23c0      	movs	r3, #192	@ 0xc0
 8007b1a:	00db      	lsls	r3, r3, #3
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d10a      	bne.n	8007b36 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d107      	bne.n	8007b36 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	2117      	movs	r1, #23
 8007b2e:	187b      	adds	r3, r7, r1
 8007b30:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007b32:	187b      	adds	r3, r7, r1
 8007b34:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	d055      	beq.n	8007be8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b3c:	f7fb fe3c 	bl	80037b8 <HAL_GetTick>
 8007b40:	0002      	movs	r2, r0
 8007b42:	6a3b      	ldr	r3, [r7, #32]
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d902      	bls.n	8007b52 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d142      	bne.n	8007bd8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	685a      	ldr	r2, [r3, #4]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	21e0      	movs	r1, #224	@ 0xe0
 8007b5e:	438a      	bics	r2, r1
 8007b60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	685a      	ldr	r2, [r3, #4]
 8007b66:	2382      	movs	r3, #130	@ 0x82
 8007b68:	005b      	lsls	r3, r3, #1
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d113      	bne.n	8007b96 <SPI_WaitFifoStateUntilTimeout+0xce>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	689a      	ldr	r2, [r3, #8]
 8007b72:	2380      	movs	r3, #128	@ 0x80
 8007b74:	021b      	lsls	r3, r3, #8
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d005      	beq.n	8007b86 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	689a      	ldr	r2, [r3, #8]
 8007b7e:	2380      	movs	r3, #128	@ 0x80
 8007b80:	00db      	lsls	r3, r3, #3
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d107      	bne.n	8007b96 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2140      	movs	r1, #64	@ 0x40
 8007b92:	438a      	bics	r2, r1
 8007b94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b9a:	2380      	movs	r3, #128	@ 0x80
 8007b9c:	019b      	lsls	r3, r3, #6
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d110      	bne.n	8007bc4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4916      	ldr	r1, [pc, #88]	@ (8007c08 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007bae:	400a      	ands	r2, r1
 8007bb0:	601a      	str	r2, [r3, #0]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2180      	movs	r1, #128	@ 0x80
 8007bbe:	0189      	lsls	r1, r1, #6
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	225d      	movs	r2, #93	@ 0x5d
 8007bc8:	2101      	movs	r1, #1
 8007bca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	225c      	movs	r2, #92	@ 0x5c
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	e010      	b.n	8007bfa <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007bde:	2300      	movs	r3, #0
 8007be0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	3b01      	subs	r3, #1
 8007be6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d18e      	bne.n	8007b16 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	0018      	movs	r0, r3
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	b00a      	add	sp, #40	@ 0x28
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	46c0      	nop			@ (mov r8, r8)
 8007c04:	20000060 	.word	0x20000060
 8007c08:	ffffdfff 	.word	0xffffdfff

08007c0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af02      	add	r7, sp, #8
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	685a      	ldr	r2, [r3, #4]
 8007c1c:	2382      	movs	r3, #130	@ 0x82
 8007c1e:	005b      	lsls	r3, r3, #1
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d113      	bne.n	8007c4c <SPI_EndRxTransaction+0x40>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	689a      	ldr	r2, [r3, #8]
 8007c28:	2380      	movs	r3, #128	@ 0x80
 8007c2a:	021b      	lsls	r3, r3, #8
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d005      	beq.n	8007c3c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	2380      	movs	r3, #128	@ 0x80
 8007c36:	00db      	lsls	r3, r3, #3
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d107      	bne.n	8007c4c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2140      	movs	r1, #64	@ 0x40
 8007c48:	438a      	bics	r2, r1
 8007c4a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	0013      	movs	r3, r2
 8007c56:	2200      	movs	r2, #0
 8007c58:	2180      	movs	r1, #128	@ 0x80
 8007c5a:	f7ff fea7 	bl	80079ac <SPI_WaitFlagStateUntilTimeout>
 8007c5e:	1e03      	subs	r3, r0, #0
 8007c60:	d007      	beq.n	8007c72 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c66:	2220      	movs	r2, #32
 8007c68:	431a      	orrs	r2, r3
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	e026      	b.n	8007cc0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	2382      	movs	r3, #130	@ 0x82
 8007c78:	005b      	lsls	r3, r3, #1
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d11f      	bne.n	8007cbe <SPI_EndRxTransaction+0xb2>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	689a      	ldr	r2, [r3, #8]
 8007c82:	2380      	movs	r3, #128	@ 0x80
 8007c84:	021b      	lsls	r3, r3, #8
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d005      	beq.n	8007c96 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	689a      	ldr	r2, [r3, #8]
 8007c8e:	2380      	movs	r3, #128	@ 0x80
 8007c90:	00db      	lsls	r3, r3, #3
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d113      	bne.n	8007cbe <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	23c0      	movs	r3, #192	@ 0xc0
 8007c9a:	00d9      	lsls	r1, r3, #3
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	0013      	movs	r3, r2
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f7ff ff0f 	bl	8007ac8 <SPI_WaitFifoStateUntilTimeout>
 8007caa:	1e03      	subs	r3, r0, #0
 8007cac:	d007      	beq.n	8007cbe <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	431a      	orrs	r2, r3
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e000      	b.n	8007cc0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	0018      	movs	r0, r3
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	b004      	add	sp, #16
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af02      	add	r7, sp, #8
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	23c0      	movs	r3, #192	@ 0xc0
 8007cd8:	0159      	lsls	r1, r3, #5
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	0013      	movs	r3, r2
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f7ff fef0 	bl	8007ac8 <SPI_WaitFifoStateUntilTimeout>
 8007ce8:	1e03      	subs	r3, r0, #0
 8007cea:	d007      	beq.n	8007cfc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cf0:	2220      	movs	r2, #32
 8007cf2:	431a      	orrs	r2, r3
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e027      	b.n	8007d4c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	0013      	movs	r3, r2
 8007d06:	2200      	movs	r2, #0
 8007d08:	2180      	movs	r1, #128	@ 0x80
 8007d0a:	f7ff fe4f 	bl	80079ac <SPI_WaitFlagStateUntilTimeout>
 8007d0e:	1e03      	subs	r3, r0, #0
 8007d10:	d007      	beq.n	8007d22 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d16:	2220      	movs	r2, #32
 8007d18:	431a      	orrs	r2, r3
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	e014      	b.n	8007d4c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	23c0      	movs	r3, #192	@ 0xc0
 8007d26:	00d9      	lsls	r1, r3, #3
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	9300      	str	r3, [sp, #0]
 8007d2e:	0013      	movs	r3, r2
 8007d30:	2200      	movs	r2, #0
 8007d32:	f7ff fec9 	bl	8007ac8 <SPI_WaitFifoStateUntilTimeout>
 8007d36:	1e03      	subs	r3, r0, #0
 8007d38:	d007      	beq.n	8007d4a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d3e:	2220      	movs	r2, #32
 8007d40:	431a      	orrs	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e000      	b.n	8007d4c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	0018      	movs	r0, r3
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	b004      	add	sp, #16
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d101      	bne.n	8007d66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e042      	b.n	8007dec <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	223d      	movs	r2, #61	@ 0x3d
 8007d6a:	5c9b      	ldrb	r3, [r3, r2]
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d107      	bne.n	8007d82 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	223c      	movs	r2, #60	@ 0x3c
 8007d76:	2100      	movs	r1, #0
 8007d78:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	0018      	movs	r0, r3
 8007d7e:	f7fb facf 	bl	8003320 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	223d      	movs	r2, #61	@ 0x3d
 8007d86:	2102      	movs	r1, #2
 8007d88:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	3304      	adds	r3, #4
 8007d92:	0019      	movs	r1, r3
 8007d94:	0010      	movs	r0, r2
 8007d96:	f000 fa17 	bl	80081c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2246      	movs	r2, #70	@ 0x46
 8007d9e:	2101      	movs	r1, #1
 8007da0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	223e      	movs	r2, #62	@ 0x3e
 8007da6:	2101      	movs	r1, #1
 8007da8:	5499      	strb	r1, [r3, r2]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	223f      	movs	r2, #63	@ 0x3f
 8007dae:	2101      	movs	r1, #1
 8007db0:	5499      	strb	r1, [r3, r2]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2240      	movs	r2, #64	@ 0x40
 8007db6:	2101      	movs	r1, #1
 8007db8:	5499      	strb	r1, [r3, r2]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2241      	movs	r2, #65	@ 0x41
 8007dbe:	2101      	movs	r1, #1
 8007dc0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2242      	movs	r2, #66	@ 0x42
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	5499      	strb	r1, [r3, r2]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2243      	movs	r2, #67	@ 0x43
 8007dce:	2101      	movs	r1, #1
 8007dd0:	5499      	strb	r1, [r3, r2]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2244      	movs	r2, #68	@ 0x44
 8007dd6:	2101      	movs	r1, #1
 8007dd8:	5499      	strb	r1, [r3, r2]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2245      	movs	r2, #69	@ 0x45
 8007dde:	2101      	movs	r1, #1
 8007de0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	223d      	movs	r2, #61	@ 0x3d
 8007de6:	2101      	movs	r1, #1
 8007de8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	0018      	movs	r0, r3
 8007dee:	46bd      	mov	sp, r7
 8007df0:	b002      	add	sp, #8
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	2202      	movs	r2, #2
 8007e10:	4013      	ands	r3, r2
 8007e12:	d021      	beq.n	8007e58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2202      	movs	r2, #2
 8007e18:	4013      	ands	r3, r2
 8007e1a:	d01d      	beq.n	8007e58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2203      	movs	r2, #3
 8007e22:	4252      	negs	r2, r2
 8007e24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	2203      	movs	r2, #3
 8007e34:	4013      	ands	r3, r2
 8007e36:	d004      	beq.n	8007e42 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	0018      	movs	r0, r3
 8007e3c:	f000 f9ac 	bl	8008198 <HAL_TIM_IC_CaptureCallback>
 8007e40:	e007      	b.n	8007e52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	0018      	movs	r0, r3
 8007e46:	f000 f99f 	bl	8008188 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	0018      	movs	r0, r3
 8007e4e:	f000 f9ab 	bl	80081a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	2204      	movs	r2, #4
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	d022      	beq.n	8007ea6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2204      	movs	r2, #4
 8007e64:	4013      	ands	r3, r2
 8007e66:	d01e      	beq.n	8007ea6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2205      	movs	r2, #5
 8007e6e:	4252      	negs	r2, r2
 8007e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2202      	movs	r2, #2
 8007e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	699a      	ldr	r2, [r3, #24]
 8007e7e:	23c0      	movs	r3, #192	@ 0xc0
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	4013      	ands	r3, r2
 8007e84:	d004      	beq.n	8007e90 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	0018      	movs	r0, r3
 8007e8a:	f000 f985 	bl	8008198 <HAL_TIM_IC_CaptureCallback>
 8007e8e:	e007      	b.n	8007ea0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	0018      	movs	r0, r3
 8007e94:	f000 f978 	bl	8008188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	0018      	movs	r0, r3
 8007e9c:	f000 f984 	bl	80081a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	2208      	movs	r2, #8
 8007eaa:	4013      	ands	r3, r2
 8007eac:	d021      	beq.n	8007ef2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2208      	movs	r2, #8
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	d01d      	beq.n	8007ef2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2209      	movs	r2, #9
 8007ebc:	4252      	negs	r2, r2
 8007ebe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2204      	movs	r2, #4
 8007ec4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	69db      	ldr	r3, [r3, #28]
 8007ecc:	2203      	movs	r2, #3
 8007ece:	4013      	ands	r3, r2
 8007ed0:	d004      	beq.n	8007edc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	0018      	movs	r0, r3
 8007ed6:	f000 f95f 	bl	8008198 <HAL_TIM_IC_CaptureCallback>
 8007eda:	e007      	b.n	8007eec <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	0018      	movs	r0, r3
 8007ee0:	f000 f952 	bl	8008188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	0018      	movs	r0, r3
 8007ee8:	f000 f95e 	bl	80081a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	2210      	movs	r2, #16
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	d022      	beq.n	8007f40 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2210      	movs	r2, #16
 8007efe:	4013      	ands	r3, r2
 8007f00:	d01e      	beq.n	8007f40 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2211      	movs	r2, #17
 8007f08:	4252      	negs	r2, r2
 8007f0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2208      	movs	r2, #8
 8007f10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	69da      	ldr	r2, [r3, #28]
 8007f18:	23c0      	movs	r3, #192	@ 0xc0
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	d004      	beq.n	8007f2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	0018      	movs	r0, r3
 8007f24:	f000 f938 	bl	8008198 <HAL_TIM_IC_CaptureCallback>
 8007f28:	e007      	b.n	8007f3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	0018      	movs	r0, r3
 8007f2e:	f000 f92b 	bl	8008188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	0018      	movs	r0, r3
 8007f36:	f000 f937 	bl	80081a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2201      	movs	r2, #1
 8007f44:	4013      	ands	r3, r2
 8007f46:	d00c      	beq.n	8007f62 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	d008      	beq.n	8007f62 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2202      	movs	r2, #2
 8007f56:	4252      	negs	r2, r2
 8007f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	0018      	movs	r0, r3
 8007f5e:	f000 f90b 	bl	8008178 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	2280      	movs	r2, #128	@ 0x80
 8007f66:	4013      	ands	r3, r2
 8007f68:	d00c      	beq.n	8007f84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2280      	movs	r2, #128	@ 0x80
 8007f6e:	4013      	ands	r3, r2
 8007f70:	d008      	beq.n	8007f84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2281      	movs	r2, #129	@ 0x81
 8007f78:	4252      	negs	r2, r2
 8007f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	0018      	movs	r0, r3
 8007f80:	f000 fab0 	bl	80084e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	2240      	movs	r2, #64	@ 0x40
 8007f88:	4013      	ands	r3, r2
 8007f8a:	d00c      	beq.n	8007fa6 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2240      	movs	r2, #64	@ 0x40
 8007f90:	4013      	ands	r3, r2
 8007f92:	d008      	beq.n	8007fa6 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2241      	movs	r2, #65	@ 0x41
 8007f9a:	4252      	negs	r2, r2
 8007f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	0018      	movs	r0, r3
 8007fa2:	f000 f909 	bl	80081b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2220      	movs	r2, #32
 8007faa:	4013      	ands	r3, r2
 8007fac:	d00c      	beq.n	8007fc8 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2220      	movs	r2, #32
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	d008      	beq.n	8007fc8 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2221      	movs	r2, #33	@ 0x21
 8007fbc:	4252      	negs	r2, r2
 8007fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	0018      	movs	r0, r3
 8007fc4:	f000 fa86 	bl	80084d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007fc8:	46c0      	nop			@ (mov r8, r8)
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	b004      	add	sp, #16
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fda:	230f      	movs	r3, #15
 8007fdc:	18fb      	adds	r3, r7, r3
 8007fde:	2200      	movs	r2, #0
 8007fe0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	223c      	movs	r2, #60	@ 0x3c
 8007fe6:	5c9b      	ldrb	r3, [r3, r2]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d101      	bne.n	8007ff0 <HAL_TIM_ConfigClockSource+0x20>
 8007fec:	2302      	movs	r3, #2
 8007fee:	e0bc      	b.n	800816a <HAL_TIM_ConfigClockSource+0x19a>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	223c      	movs	r2, #60	@ 0x3c
 8007ff4:	2101      	movs	r1, #1
 8007ff6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	223d      	movs	r2, #61	@ 0x3d
 8007ffc:	2102      	movs	r1, #2
 8007ffe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	2277      	movs	r2, #119	@ 0x77
 800800c:	4393      	bics	r3, r2
 800800e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	4a58      	ldr	r2, [pc, #352]	@ (8008174 <HAL_TIM_ConfigClockSource+0x1a4>)
 8008014:	4013      	ands	r3, r2
 8008016:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2280      	movs	r2, #128	@ 0x80
 8008026:	0192      	lsls	r2, r2, #6
 8008028:	4293      	cmp	r3, r2
 800802a:	d040      	beq.n	80080ae <HAL_TIM_ConfigClockSource+0xde>
 800802c:	2280      	movs	r2, #128	@ 0x80
 800802e:	0192      	lsls	r2, r2, #6
 8008030:	4293      	cmp	r3, r2
 8008032:	d900      	bls.n	8008036 <HAL_TIM_ConfigClockSource+0x66>
 8008034:	e088      	b.n	8008148 <HAL_TIM_ConfigClockSource+0x178>
 8008036:	2280      	movs	r2, #128	@ 0x80
 8008038:	0152      	lsls	r2, r2, #5
 800803a:	4293      	cmp	r3, r2
 800803c:	d100      	bne.n	8008040 <HAL_TIM_ConfigClockSource+0x70>
 800803e:	e088      	b.n	8008152 <HAL_TIM_ConfigClockSource+0x182>
 8008040:	2280      	movs	r2, #128	@ 0x80
 8008042:	0152      	lsls	r2, r2, #5
 8008044:	4293      	cmp	r3, r2
 8008046:	d900      	bls.n	800804a <HAL_TIM_ConfigClockSource+0x7a>
 8008048:	e07e      	b.n	8008148 <HAL_TIM_ConfigClockSource+0x178>
 800804a:	2b70      	cmp	r3, #112	@ 0x70
 800804c:	d018      	beq.n	8008080 <HAL_TIM_ConfigClockSource+0xb0>
 800804e:	d900      	bls.n	8008052 <HAL_TIM_ConfigClockSource+0x82>
 8008050:	e07a      	b.n	8008148 <HAL_TIM_ConfigClockSource+0x178>
 8008052:	2b60      	cmp	r3, #96	@ 0x60
 8008054:	d04f      	beq.n	80080f6 <HAL_TIM_ConfigClockSource+0x126>
 8008056:	d900      	bls.n	800805a <HAL_TIM_ConfigClockSource+0x8a>
 8008058:	e076      	b.n	8008148 <HAL_TIM_ConfigClockSource+0x178>
 800805a:	2b50      	cmp	r3, #80	@ 0x50
 800805c:	d03b      	beq.n	80080d6 <HAL_TIM_ConfigClockSource+0x106>
 800805e:	d900      	bls.n	8008062 <HAL_TIM_ConfigClockSource+0x92>
 8008060:	e072      	b.n	8008148 <HAL_TIM_ConfigClockSource+0x178>
 8008062:	2b40      	cmp	r3, #64	@ 0x40
 8008064:	d057      	beq.n	8008116 <HAL_TIM_ConfigClockSource+0x146>
 8008066:	d900      	bls.n	800806a <HAL_TIM_ConfigClockSource+0x9a>
 8008068:	e06e      	b.n	8008148 <HAL_TIM_ConfigClockSource+0x178>
 800806a:	2b30      	cmp	r3, #48	@ 0x30
 800806c:	d063      	beq.n	8008136 <HAL_TIM_ConfigClockSource+0x166>
 800806e:	d86b      	bhi.n	8008148 <HAL_TIM_ConfigClockSource+0x178>
 8008070:	2b20      	cmp	r3, #32
 8008072:	d060      	beq.n	8008136 <HAL_TIM_ConfigClockSource+0x166>
 8008074:	d868      	bhi.n	8008148 <HAL_TIM_ConfigClockSource+0x178>
 8008076:	2b00      	cmp	r3, #0
 8008078:	d05d      	beq.n	8008136 <HAL_TIM_ConfigClockSource+0x166>
 800807a:	2b10      	cmp	r3, #16
 800807c:	d05b      	beq.n	8008136 <HAL_TIM_ConfigClockSource+0x166>
 800807e:	e063      	b.n	8008148 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008090:	f000 f9a2 	bl	80083d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	2277      	movs	r2, #119	@ 0x77
 80080a0:	4313      	orrs	r3, r2
 80080a2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	68ba      	ldr	r2, [r7, #8]
 80080aa:	609a      	str	r2, [r3, #8]
      break;
 80080ac:	e052      	b.n	8008154 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80080be:	f000 f98b 	bl	80083d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	689a      	ldr	r2, [r3, #8]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2180      	movs	r1, #128	@ 0x80
 80080ce:	01c9      	lsls	r1, r1, #7
 80080d0:	430a      	orrs	r2, r1
 80080d2:	609a      	str	r2, [r3, #8]
      break;
 80080d4:	e03e      	b.n	8008154 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080e2:	001a      	movs	r2, r3
 80080e4:	f000 f8fe 	bl	80082e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2150      	movs	r1, #80	@ 0x50
 80080ee:	0018      	movs	r0, r3
 80080f0:	f000 f958 	bl	80083a4 <TIM_ITRx_SetConfig>
      break;
 80080f4:	e02e      	b.n	8008154 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008102:	001a      	movs	r2, r3
 8008104:	f000 f91c 	bl	8008340 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2160      	movs	r1, #96	@ 0x60
 800810e:	0018      	movs	r0, r3
 8008110:	f000 f948 	bl	80083a4 <TIM_ITRx_SetConfig>
      break;
 8008114:	e01e      	b.n	8008154 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008122:	001a      	movs	r2, r3
 8008124:	f000 f8de 	bl	80082e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2140      	movs	r1, #64	@ 0x40
 800812e:	0018      	movs	r0, r3
 8008130:	f000 f938 	bl	80083a4 <TIM_ITRx_SetConfig>
      break;
 8008134:	e00e      	b.n	8008154 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	0019      	movs	r1, r3
 8008140:	0010      	movs	r0, r2
 8008142:	f000 f92f 	bl	80083a4 <TIM_ITRx_SetConfig>
      break;
 8008146:	e005      	b.n	8008154 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8008148:	230f      	movs	r3, #15
 800814a:	18fb      	adds	r3, r7, r3
 800814c:	2201      	movs	r2, #1
 800814e:	701a      	strb	r2, [r3, #0]
      break;
 8008150:	e000      	b.n	8008154 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8008152:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	223d      	movs	r2, #61	@ 0x3d
 8008158:	2101      	movs	r1, #1
 800815a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	223c      	movs	r2, #60	@ 0x3c
 8008160:	2100      	movs	r1, #0
 8008162:	5499      	strb	r1, [r3, r2]

  return status;
 8008164:	230f      	movs	r3, #15
 8008166:	18fb      	adds	r3, r7, r3
 8008168:	781b      	ldrb	r3, [r3, #0]
}
 800816a:	0018      	movs	r0, r3
 800816c:	46bd      	mov	sp, r7
 800816e:	b004      	add	sp, #16
 8008170:	bd80      	pop	{r7, pc}
 8008172:	46c0      	nop			@ (mov r8, r8)
 8008174:	ffff00ff 	.word	0xffff00ff

08008178 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008180:	46c0      	nop			@ (mov r8, r8)
 8008182:	46bd      	mov	sp, r7
 8008184:	b002      	add	sp, #8
 8008186:	bd80      	pop	{r7, pc}

08008188 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008190:	46c0      	nop			@ (mov r8, r8)
 8008192:	46bd      	mov	sp, r7
 8008194:	b002      	add	sp, #8
 8008196:	bd80      	pop	{r7, pc}

08008198 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081a0:	46c0      	nop			@ (mov r8, r8)
 80081a2:	46bd      	mov	sp, r7
 80081a4:	b002      	add	sp, #8
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081b0:	46c0      	nop			@ (mov r8, r8)
 80081b2:	46bd      	mov	sp, r7
 80081b4:	b002      	add	sp, #8
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081c0:	46c0      	nop			@ (mov r8, r8)
 80081c2:	46bd      	mov	sp, r7
 80081c4:	b002      	add	sp, #8
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a3b      	ldr	r2, [pc, #236]	@ (80082c8 <TIM_Base_SetConfig+0x100>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d008      	beq.n	80081f2 <TIM_Base_SetConfig+0x2a>
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	2380      	movs	r3, #128	@ 0x80
 80081e4:	05db      	lsls	r3, r3, #23
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d003      	beq.n	80081f2 <TIM_Base_SetConfig+0x2a>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a37      	ldr	r2, [pc, #220]	@ (80082cc <TIM_Base_SetConfig+0x104>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d108      	bne.n	8008204 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2270      	movs	r2, #112	@ 0x70
 80081f6:	4393      	bics	r3, r2
 80081f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	4313      	orrs	r3, r2
 8008202:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a30      	ldr	r2, [pc, #192]	@ (80082c8 <TIM_Base_SetConfig+0x100>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d018      	beq.n	800823e <TIM_Base_SetConfig+0x76>
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	2380      	movs	r3, #128	@ 0x80
 8008210:	05db      	lsls	r3, r3, #23
 8008212:	429a      	cmp	r2, r3
 8008214:	d013      	beq.n	800823e <TIM_Base_SetConfig+0x76>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a2c      	ldr	r2, [pc, #176]	@ (80082cc <TIM_Base_SetConfig+0x104>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d00f      	beq.n	800823e <TIM_Base_SetConfig+0x76>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a2b      	ldr	r2, [pc, #172]	@ (80082d0 <TIM_Base_SetConfig+0x108>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d00b      	beq.n	800823e <TIM_Base_SetConfig+0x76>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a2a      	ldr	r2, [pc, #168]	@ (80082d4 <TIM_Base_SetConfig+0x10c>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d007      	beq.n	800823e <TIM_Base_SetConfig+0x76>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a29      	ldr	r2, [pc, #164]	@ (80082d8 <TIM_Base_SetConfig+0x110>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d003      	beq.n	800823e <TIM_Base_SetConfig+0x76>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a28      	ldr	r2, [pc, #160]	@ (80082dc <TIM_Base_SetConfig+0x114>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d108      	bne.n	8008250 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4a27      	ldr	r2, [pc, #156]	@ (80082e0 <TIM_Base_SetConfig+0x118>)
 8008242:	4013      	ands	r3, r2
 8008244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	4313      	orrs	r3, r2
 800824e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2280      	movs	r2, #128	@ 0x80
 8008254:	4393      	bics	r3, r2
 8008256:	001a      	movs	r2, r3
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	695b      	ldr	r3, [r3, #20]
 800825c:	4313      	orrs	r3, r2
 800825e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	689a      	ldr	r2, [r3, #8]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a13      	ldr	r2, [pc, #76]	@ (80082c8 <TIM_Base_SetConfig+0x100>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d00b      	beq.n	8008296 <TIM_Base_SetConfig+0xce>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a14      	ldr	r2, [pc, #80]	@ (80082d4 <TIM_Base_SetConfig+0x10c>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d007      	beq.n	8008296 <TIM_Base_SetConfig+0xce>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a13      	ldr	r2, [pc, #76]	@ (80082d8 <TIM_Base_SetConfig+0x110>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d003      	beq.n	8008296 <TIM_Base_SetConfig+0xce>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a12      	ldr	r2, [pc, #72]	@ (80082dc <TIM_Base_SetConfig+0x114>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d103      	bne.n	800829e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	691a      	ldr	r2, [r3, #16]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2201      	movs	r2, #1
 80082a2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	2201      	movs	r2, #1
 80082aa:	4013      	ands	r3, r2
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d106      	bne.n	80082be <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	2201      	movs	r2, #1
 80082b6:	4393      	bics	r3, r2
 80082b8:	001a      	movs	r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	611a      	str	r2, [r3, #16]
  }
}
 80082be:	46c0      	nop			@ (mov r8, r8)
 80082c0:	46bd      	mov	sp, r7
 80082c2:	b004      	add	sp, #16
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	46c0      	nop			@ (mov r8, r8)
 80082c8:	40012c00 	.word	0x40012c00
 80082cc:	40000400 	.word	0x40000400
 80082d0:	40002000 	.word	0x40002000
 80082d4:	40014000 	.word	0x40014000
 80082d8:	40014400 	.word	0x40014400
 80082dc:	40014800 	.word	0x40014800
 80082e0:	fffffcff 	.word	0xfffffcff

080082e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6a1b      	ldr	r3, [r3, #32]
 80082f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	2201      	movs	r2, #1
 80082fc:	4393      	bics	r3, r2
 80082fe:	001a      	movs	r2, r3
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	22f0      	movs	r2, #240	@ 0xf0
 800830e:	4393      	bics	r3, r2
 8008310:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	011b      	lsls	r3, r3, #4
 8008316:	693a      	ldr	r2, [r7, #16]
 8008318:	4313      	orrs	r3, r2
 800831a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	220a      	movs	r2, #10
 8008320:	4393      	bics	r3, r2
 8008322:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008324:	697a      	ldr	r2, [r7, #20]
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	4313      	orrs	r3, r2
 800832a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	697a      	ldr	r2, [r7, #20]
 8008336:	621a      	str	r2, [r3, #32]
}
 8008338:	46c0      	nop			@ (mov r8, r8)
 800833a:	46bd      	mov	sp, r7
 800833c:	b006      	add	sp, #24
 800833e:	bd80      	pop	{r7, pc}

08008340 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6a1b      	ldr	r3, [r3, #32]
 8008350:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	2210      	movs	r2, #16
 8008358:	4393      	bics	r3, r2
 800835a:	001a      	movs	r2, r3
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	4a0d      	ldr	r2, [pc, #52]	@ (80083a0 <TIM_TI2_ConfigInputStage+0x60>)
 800836a:	4013      	ands	r3, r2
 800836c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	031b      	lsls	r3, r3, #12
 8008372:	693a      	ldr	r2, [r7, #16]
 8008374:	4313      	orrs	r3, r2
 8008376:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	22a0      	movs	r2, #160	@ 0xa0
 800837c:	4393      	bics	r3, r2
 800837e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	011b      	lsls	r3, r3, #4
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	4313      	orrs	r3, r2
 8008388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	697a      	ldr	r2, [r7, #20]
 8008394:	621a      	str	r2, [r3, #32]
}
 8008396:	46c0      	nop			@ (mov r8, r8)
 8008398:	46bd      	mov	sp, r7
 800839a:	b006      	add	sp, #24
 800839c:	bd80      	pop	{r7, pc}
 800839e:	46c0      	nop			@ (mov r8, r8)
 80083a0:	ffff0fff 	.word	0xffff0fff

080083a4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2270      	movs	r2, #112	@ 0x70
 80083b8:	4393      	bics	r3, r2
 80083ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083bc:	683a      	ldr	r2, [r7, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	2207      	movs	r2, #7
 80083c4:	4313      	orrs	r3, r2
 80083c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	609a      	str	r2, [r3, #8]
}
 80083ce:	46c0      	nop			@ (mov r8, r8)
 80083d0:	46bd      	mov	sp, r7
 80083d2:	b004      	add	sp, #16
 80083d4:	bd80      	pop	{r7, pc}
	...

080083d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
 80083e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	4a09      	ldr	r2, [pc, #36]	@ (8008414 <TIM_ETR_SetConfig+0x3c>)
 80083f0:	4013      	ands	r3, r2
 80083f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	021a      	lsls	r2, r3, #8
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	431a      	orrs	r2, r3
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	4313      	orrs	r3, r2
 8008400:	697a      	ldr	r2, [r7, #20]
 8008402:	4313      	orrs	r3, r2
 8008404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	697a      	ldr	r2, [r7, #20]
 800840a:	609a      	str	r2, [r3, #8]
}
 800840c:	46c0      	nop			@ (mov r8, r8)
 800840e:	46bd      	mov	sp, r7
 8008410:	b006      	add	sp, #24
 8008412:	bd80      	pop	{r7, pc}
 8008414:	ffff00ff 	.word	0xffff00ff

08008418 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	223c      	movs	r2, #60	@ 0x3c
 8008426:	5c9b      	ldrb	r3, [r3, r2]
 8008428:	2b01      	cmp	r3, #1
 800842a:	d101      	bne.n	8008430 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800842c:	2302      	movs	r3, #2
 800842e:	e047      	b.n	80084c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	223c      	movs	r2, #60	@ 0x3c
 8008434:	2101      	movs	r1, #1
 8008436:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	223d      	movs	r2, #61	@ 0x3d
 800843c:	2102      	movs	r1, #2
 800843e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2270      	movs	r2, #112	@ 0x70
 8008454:	4393      	bics	r3, r2
 8008456:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	4313      	orrs	r3, r2
 8008460:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a16      	ldr	r2, [pc, #88]	@ (80084c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d00f      	beq.n	8008494 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	2380      	movs	r3, #128	@ 0x80
 800847a:	05db      	lsls	r3, r3, #23
 800847c:	429a      	cmp	r2, r3
 800847e:	d009      	beq.n	8008494 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a11      	ldr	r2, [pc, #68]	@ (80084cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d004      	beq.n	8008494 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a10      	ldr	r2, [pc, #64]	@ (80084d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d10c      	bne.n	80084ae <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	2280      	movs	r2, #128	@ 0x80
 8008498:	4393      	bics	r3, r2
 800849a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	223d      	movs	r2, #61	@ 0x3d
 80084b2:	2101      	movs	r1, #1
 80084b4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	223c      	movs	r2, #60	@ 0x3c
 80084ba:	2100      	movs	r1, #0
 80084bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	0018      	movs	r0, r3
 80084c2:	46bd      	mov	sp, r7
 80084c4:	b004      	add	sp, #16
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	40012c00 	.word	0x40012c00
 80084cc:	40000400 	.word	0x40000400
 80084d0:	40014000 	.word	0x40014000

080084d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084dc:	46c0      	nop			@ (mov r8, r8)
 80084de:	46bd      	mov	sp, r7
 80084e0:	b002      	add	sp, #8
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084ec:	46c0      	nop			@ (mov r8, r8)
 80084ee:	46bd      	mov	sp, r7
 80084f0:	b002      	add	sp, #8
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d101      	bne.n	8008506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e053      	b.n	80085ae <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800850a:	2b00      	cmp	r3, #0
 800850c:	d116      	bne.n	800853c <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2278      	movs	r2, #120	@ 0x78
 8008512:	2100      	movs	r1, #0
 8008514:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	0018      	movs	r0, r3
 800851a:	f000 fb7b 	bl	8008c14 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	22b0      	movs	r2, #176	@ 0xb0
 8008522:	589b      	ldr	r3, [r3, r2]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d103      	bne.n	8008530 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	21b0      	movs	r1, #176	@ 0xb0
 800852c:	4a22      	ldr	r2, [pc, #136]	@ (80085b8 <HAL_UART_Init+0xc4>)
 800852e:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	22b0      	movs	r2, #176	@ 0xb0
 8008534:	589b      	ldr	r3, [r3, r2]
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	0010      	movs	r0, r2
 800853a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2224      	movs	r2, #36	@ 0x24
 8008540:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2101      	movs	r1, #1
 800854e:	438a      	bics	r2, r1
 8008550:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008556:	2b00      	cmp	r3, #0
 8008558:	d003      	beq.n	8008562 <HAL_UART_Init+0x6e>
  {
    UART_AdvFeatureConfig(huart);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	0018      	movs	r0, r3
 800855e:	f000 fd25 	bl	8008fac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	0018      	movs	r0, r3
 8008566:	f000 fb99 	bl	8008c9c <UART_SetConfig>
 800856a:	0003      	movs	r3, r0
 800856c:	2b01      	cmp	r3, #1
 800856e:	d101      	bne.n	8008574 <HAL_UART_Init+0x80>
  {
    return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e01c      	b.n	80085ae <HAL_UART_Init+0xba>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	685a      	ldr	r2, [r3, #4]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	490f      	ldr	r1, [pc, #60]	@ (80085bc <HAL_UART_Init+0xc8>)
 8008580:	400a      	ands	r2, r1
 8008582:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	689a      	ldr	r2, [r3, #8]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	212a      	movs	r1, #42	@ 0x2a
 8008590:	438a      	bics	r2, r1
 8008592:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2101      	movs	r1, #1
 80085a0:	430a      	orrs	r2, r1
 80085a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	0018      	movs	r0, r3
 80085a8:	f000 fdb4 	bl	8009114 <UART_CheckIdleState>
 80085ac:	0003      	movs	r3, r0
}
 80085ae:	0018      	movs	r0, r3
 80085b0:	46bd      	mov	sp, r7
 80085b2:	b002      	add	sp, #8
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	46c0      	nop			@ (mov r8, r8)
 80085b8:	0800336d 	.word	0x0800336d
 80085bc:	ffffb7ff 	.word	0xffffb7ff

080085c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085c0:	b590      	push	{r4, r7, lr}
 80085c2:	b0ab      	sub	sp, #172	@ 0xac
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	69db      	ldr	r3, [r3, #28]
 80085ce:	22a4      	movs	r2, #164	@ 0xa4
 80085d0:	18b9      	adds	r1, r7, r2
 80085d2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	20a0      	movs	r0, #160	@ 0xa0
 80085dc:	1839      	adds	r1, r7, r0
 80085de:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	219c      	movs	r1, #156	@ 0x9c
 80085e8:	1879      	adds	r1, r7, r1
 80085ea:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80085ec:	0011      	movs	r1, r2
 80085ee:	18bb      	adds	r3, r7, r2
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a9c      	ldr	r2, [pc, #624]	@ (8008864 <HAL_UART_IRQHandler+0x2a4>)
 80085f4:	4013      	ands	r3, r2
 80085f6:	2298      	movs	r2, #152	@ 0x98
 80085f8:	18bc      	adds	r4, r7, r2
 80085fa:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80085fc:	18bb      	adds	r3, r7, r2
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d114      	bne.n	800862e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008604:	187b      	adds	r3, r7, r1
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2220      	movs	r2, #32
 800860a:	4013      	ands	r3, r2
 800860c:	d00f      	beq.n	800862e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800860e:	183b      	adds	r3, r7, r0
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2220      	movs	r2, #32
 8008614:	4013      	ands	r3, r2
 8008616:	d00a      	beq.n	800862e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800861c:	2b00      	cmp	r3, #0
 800861e:	d100      	bne.n	8008622 <HAL_UART_IRQHandler+0x62>
 8008620:	e2a8      	b.n	8008b74 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	0010      	movs	r0, r2
 800862a:	4798      	blx	r3
      }
      return;
 800862c:	e2a2      	b.n	8008b74 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800862e:	2398      	movs	r3, #152	@ 0x98
 8008630:	18fb      	adds	r3, r7, r3
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d100      	bne.n	800863a <HAL_UART_IRQHandler+0x7a>
 8008638:	e11a      	b.n	8008870 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800863a:	239c      	movs	r3, #156	@ 0x9c
 800863c:	18fb      	adds	r3, r7, r3
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2201      	movs	r2, #1
 8008642:	4013      	ands	r3, r2
 8008644:	d106      	bne.n	8008654 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008646:	23a0      	movs	r3, #160	@ 0xa0
 8008648:	18fb      	adds	r3, r7, r3
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a86      	ldr	r2, [pc, #536]	@ (8008868 <HAL_UART_IRQHandler+0x2a8>)
 800864e:	4013      	ands	r3, r2
 8008650:	d100      	bne.n	8008654 <HAL_UART_IRQHandler+0x94>
 8008652:	e10d      	b.n	8008870 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008654:	23a4      	movs	r3, #164	@ 0xa4
 8008656:	18fb      	adds	r3, r7, r3
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2201      	movs	r2, #1
 800865c:	4013      	ands	r3, r2
 800865e:	d012      	beq.n	8008686 <HAL_UART_IRQHandler+0xc6>
 8008660:	23a0      	movs	r3, #160	@ 0xa0
 8008662:	18fb      	adds	r3, r7, r3
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	2380      	movs	r3, #128	@ 0x80
 8008668:	005b      	lsls	r3, r3, #1
 800866a:	4013      	ands	r3, r2
 800866c:	d00b      	beq.n	8008686 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2201      	movs	r2, #1
 8008674:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2284      	movs	r2, #132	@ 0x84
 800867a:	589b      	ldr	r3, [r3, r2]
 800867c:	2201      	movs	r2, #1
 800867e:	431a      	orrs	r2, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2184      	movs	r1, #132	@ 0x84
 8008684:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008686:	23a4      	movs	r3, #164	@ 0xa4
 8008688:	18fb      	adds	r3, r7, r3
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2202      	movs	r2, #2
 800868e:	4013      	ands	r3, r2
 8008690:	d011      	beq.n	80086b6 <HAL_UART_IRQHandler+0xf6>
 8008692:	239c      	movs	r3, #156	@ 0x9c
 8008694:	18fb      	adds	r3, r7, r3
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2201      	movs	r2, #1
 800869a:	4013      	ands	r3, r2
 800869c:	d00b      	beq.n	80086b6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2202      	movs	r2, #2
 80086a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2284      	movs	r2, #132	@ 0x84
 80086aa:	589b      	ldr	r3, [r3, r2]
 80086ac:	2204      	movs	r2, #4
 80086ae:	431a      	orrs	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2184      	movs	r1, #132	@ 0x84
 80086b4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086b6:	23a4      	movs	r3, #164	@ 0xa4
 80086b8:	18fb      	adds	r3, r7, r3
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2204      	movs	r2, #4
 80086be:	4013      	ands	r3, r2
 80086c0:	d011      	beq.n	80086e6 <HAL_UART_IRQHandler+0x126>
 80086c2:	239c      	movs	r3, #156	@ 0x9c
 80086c4:	18fb      	adds	r3, r7, r3
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2201      	movs	r2, #1
 80086ca:	4013      	ands	r3, r2
 80086cc:	d00b      	beq.n	80086e6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2204      	movs	r2, #4
 80086d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2284      	movs	r2, #132	@ 0x84
 80086da:	589b      	ldr	r3, [r3, r2]
 80086dc:	2202      	movs	r2, #2
 80086de:	431a      	orrs	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2184      	movs	r1, #132	@ 0x84
 80086e4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80086e6:	23a4      	movs	r3, #164	@ 0xa4
 80086e8:	18fb      	adds	r3, r7, r3
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2208      	movs	r2, #8
 80086ee:	4013      	ands	r3, r2
 80086f0:	d017      	beq.n	8008722 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80086f2:	23a0      	movs	r3, #160	@ 0xa0
 80086f4:	18fb      	adds	r3, r7, r3
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2220      	movs	r2, #32
 80086fa:	4013      	ands	r3, r2
 80086fc:	d105      	bne.n	800870a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80086fe:	239c      	movs	r3, #156	@ 0x9c
 8008700:	18fb      	adds	r3, r7, r3
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2201      	movs	r2, #1
 8008706:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008708:	d00b      	beq.n	8008722 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2208      	movs	r2, #8
 8008710:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2284      	movs	r2, #132	@ 0x84
 8008716:	589b      	ldr	r3, [r3, r2]
 8008718:	2208      	movs	r2, #8
 800871a:	431a      	orrs	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2184      	movs	r1, #132	@ 0x84
 8008720:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008722:	23a4      	movs	r3, #164	@ 0xa4
 8008724:	18fb      	adds	r3, r7, r3
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	2380      	movs	r3, #128	@ 0x80
 800872a:	011b      	lsls	r3, r3, #4
 800872c:	4013      	ands	r3, r2
 800872e:	d013      	beq.n	8008758 <HAL_UART_IRQHandler+0x198>
 8008730:	23a0      	movs	r3, #160	@ 0xa0
 8008732:	18fb      	adds	r3, r7, r3
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	2380      	movs	r3, #128	@ 0x80
 8008738:	04db      	lsls	r3, r3, #19
 800873a:	4013      	ands	r3, r2
 800873c:	d00c      	beq.n	8008758 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2280      	movs	r2, #128	@ 0x80
 8008744:	0112      	lsls	r2, r2, #4
 8008746:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2284      	movs	r2, #132	@ 0x84
 800874c:	589b      	ldr	r3, [r3, r2]
 800874e:	2220      	movs	r2, #32
 8008750:	431a      	orrs	r2, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2184      	movs	r1, #132	@ 0x84
 8008756:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2284      	movs	r2, #132	@ 0x84
 800875c:	589b      	ldr	r3, [r3, r2]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d100      	bne.n	8008764 <HAL_UART_IRQHandler+0x1a4>
 8008762:	e209      	b.n	8008b78 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008764:	23a4      	movs	r3, #164	@ 0xa4
 8008766:	18fb      	adds	r3, r7, r3
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2220      	movs	r2, #32
 800876c:	4013      	ands	r3, r2
 800876e:	d00e      	beq.n	800878e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008770:	23a0      	movs	r3, #160	@ 0xa0
 8008772:	18fb      	adds	r3, r7, r3
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2220      	movs	r2, #32
 8008778:	4013      	ands	r3, r2
 800877a:	d008      	beq.n	800878e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008780:	2b00      	cmp	r3, #0
 8008782:	d004      	beq.n	800878e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	0010      	movs	r0, r2
 800878c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2284      	movs	r2, #132	@ 0x84
 8008792:	589b      	ldr	r3, [r3, r2]
 8008794:	2194      	movs	r1, #148	@ 0x94
 8008796:	187a      	adds	r2, r7, r1
 8008798:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	2240      	movs	r2, #64	@ 0x40
 80087a2:	4013      	ands	r3, r2
 80087a4:	2b40      	cmp	r3, #64	@ 0x40
 80087a6:	d004      	beq.n	80087b2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80087a8:	187b      	adds	r3, r7, r1
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2228      	movs	r2, #40	@ 0x28
 80087ae:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80087b0:	d04b      	beq.n	800884a <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	0018      	movs	r0, r3
 80087b6:	f000 fe89 	bl	80094cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	2240      	movs	r2, #64	@ 0x40
 80087c2:	4013      	ands	r3, r2
 80087c4:	2b40      	cmp	r3, #64	@ 0x40
 80087c6:	d139      	bne.n	800883c <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087c8:	f3ef 8310 	mrs	r3, PRIMASK
 80087cc:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80087ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087d0:	2090      	movs	r0, #144	@ 0x90
 80087d2:	183a      	adds	r2, r7, r0
 80087d4:	6013      	str	r3, [r2, #0]
 80087d6:	2301      	movs	r3, #1
 80087d8:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087dc:	f383 8810 	msr	PRIMASK, r3
}
 80087e0:	46c0      	nop			@ (mov r8, r8)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	689a      	ldr	r2, [r3, #8]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2140      	movs	r1, #64	@ 0x40
 80087ee:	438a      	bics	r2, r1
 80087f0:	609a      	str	r2, [r3, #8]
 80087f2:	183b      	adds	r3, r7, r0
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80087fa:	f383 8810 	msr	PRIMASK, r3
}
 80087fe:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008804:	2b00      	cmp	r3, #0
 8008806:	d012      	beq.n	800882e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800880c:	4a17      	ldr	r2, [pc, #92]	@ (800886c <HAL_UART_IRQHandler+0x2ac>)
 800880e:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008814:	0018      	movs	r0, r3
 8008816:	f7fb fc41 	bl	800409c <HAL_DMA_Abort_IT>
 800881a:	1e03      	subs	r3, r0, #0
 800881c:	d020      	beq.n	8008860 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008822:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008828:	0018      	movs	r0, r3
 800882a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800882c:	e018      	b.n	8008860 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2298      	movs	r2, #152	@ 0x98
 8008832:	589b      	ldr	r3, [r3, r2]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	0010      	movs	r0, r2
 8008838:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800883a:	e011      	b.n	8008860 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2298      	movs	r2, #152	@ 0x98
 8008840:	589b      	ldr	r3, [r3, r2]
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	0010      	movs	r0, r2
 8008846:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008848:	e00a      	b.n	8008860 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2298      	movs	r2, #152	@ 0x98
 800884e:	589b      	ldr	r3, [r3, r2]
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	0010      	movs	r0, r2
 8008854:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2284      	movs	r2, #132	@ 0x84
 800885a:	2100      	movs	r1, #0
 800885c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800885e:	e18b      	b.n	8008b78 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008860:	46c0      	nop			@ (mov r8, r8)
    return;
 8008862:	e189      	b.n	8008b78 <HAL_UART_IRQHandler+0x5b8>
 8008864:	0000080f 	.word	0x0000080f
 8008868:	04000120 	.word	0x04000120
 800886c:	08009795 	.word	0x08009795

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008874:	2b01      	cmp	r3, #1
 8008876:	d000      	beq.n	800887a <HAL_UART_IRQHandler+0x2ba>
 8008878:	e13b      	b.n	8008af2 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800887a:	23a4      	movs	r3, #164	@ 0xa4
 800887c:	18fb      	adds	r3, r7, r3
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2210      	movs	r2, #16
 8008882:	4013      	ands	r3, r2
 8008884:	d100      	bne.n	8008888 <HAL_UART_IRQHandler+0x2c8>
 8008886:	e134      	b.n	8008af2 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008888:	23a0      	movs	r3, #160	@ 0xa0
 800888a:	18fb      	adds	r3, r7, r3
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2210      	movs	r2, #16
 8008890:	4013      	ands	r3, r2
 8008892:	d100      	bne.n	8008896 <HAL_UART_IRQHandler+0x2d6>
 8008894:	e12d      	b.n	8008af2 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2210      	movs	r2, #16
 800889c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	2240      	movs	r2, #64	@ 0x40
 80088a6:	4013      	ands	r3, r2
 80088a8:	2b40      	cmp	r3, #64	@ 0x40
 80088aa:	d000      	beq.n	80088ae <HAL_UART_IRQHandler+0x2ee>
 80088ac:	e0a0      	b.n	80089f0 <HAL_UART_IRQHandler+0x430>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	685a      	ldr	r2, [r3, #4]
 80088b6:	217e      	movs	r1, #126	@ 0x7e
 80088b8:	187b      	adds	r3, r7, r1
 80088ba:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80088bc:	187b      	adds	r3, r7, r1
 80088be:	881b      	ldrh	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d100      	bne.n	80088c6 <HAL_UART_IRQHandler+0x306>
 80088c4:	e15a      	b.n	8008b7c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2258      	movs	r2, #88	@ 0x58
 80088ca:	5a9b      	ldrh	r3, [r3, r2]
 80088cc:	187a      	adds	r2, r7, r1
 80088ce:	8812      	ldrh	r2, [r2, #0]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d300      	bcc.n	80088d6 <HAL_UART_IRQHandler+0x316>
 80088d4:	e152      	b.n	8008b7c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	187a      	adds	r2, r7, r1
 80088da:	215a      	movs	r1, #90	@ 0x5a
 80088dc:	8812      	ldrh	r2, [r2, #0]
 80088de:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	2b20      	cmp	r3, #32
 80088e8:	d06f      	beq.n	80089ca <HAL_UART_IRQHandler+0x40a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088ea:	f3ef 8310 	mrs	r3, PRIMASK
 80088ee:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80088f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80088f4:	2301      	movs	r3, #1
 80088f6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088fa:	f383 8810 	msr	PRIMASK, r3
}
 80088fe:	46c0      	nop			@ (mov r8, r8)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	49a0      	ldr	r1, [pc, #640]	@ (8008b8c <HAL_UART_IRQHandler+0x5cc>)
 800890c:	400a      	ands	r2, r1
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008912:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008916:	f383 8810 	msr	PRIMASK, r3
}
 800891a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800891c:	f3ef 8310 	mrs	r3, PRIMASK
 8008920:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8008922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008924:	677b      	str	r3, [r7, #116]	@ 0x74
 8008926:	2301      	movs	r3, #1
 8008928:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800892a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800892c:	f383 8810 	msr	PRIMASK, r3
}
 8008930:	46c0      	nop			@ (mov r8, r8)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	689a      	ldr	r2, [r3, #8]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2101      	movs	r1, #1
 800893e:	438a      	bics	r2, r1
 8008940:	609a      	str	r2, [r3, #8]
 8008942:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008944:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008946:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008948:	f383 8810 	msr	PRIMASK, r3
}
 800894c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800894e:	f3ef 8310 	mrs	r3, PRIMASK
 8008952:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8008954:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008956:	673b      	str	r3, [r7, #112]	@ 0x70
 8008958:	2301      	movs	r3, #1
 800895a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800895c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800895e:	f383 8810 	msr	PRIMASK, r3
}
 8008962:	46c0      	nop			@ (mov r8, r8)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	689a      	ldr	r2, [r3, #8]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2140      	movs	r1, #64	@ 0x40
 8008970:	438a      	bics	r2, r1
 8008972:	609a      	str	r2, [r3, #8]
 8008974:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008976:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008978:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800897a:	f383 8810 	msr	PRIMASK, r3
}
 800897e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2280      	movs	r2, #128	@ 0x80
 8008984:	2120      	movs	r1, #32
 8008986:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800898e:	f3ef 8310 	mrs	r3, PRIMASK
 8008992:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8008994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008996:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008998:	2301      	movs	r3, #1
 800899a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800899c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800899e:	f383 8810 	msr	PRIMASK, r3
}
 80089a2:	46c0      	nop			@ (mov r8, r8)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2110      	movs	r1, #16
 80089b0:	438a      	bics	r2, r1
 80089b2:	601a      	str	r2, [r3, #0]
 80089b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089ba:	f383 8810 	msr	PRIMASK, r3
}
 80089be:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089c4:	0018      	movs	r0, r3
 80089c6:	f7fb fb31 	bl	800402c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2202      	movs	r2, #2
 80089ce:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	22ac      	movs	r2, #172	@ 0xac
 80089d4:	589b      	ldr	r3, [r3, r2]
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	2158      	movs	r1, #88	@ 0x58
 80089da:	5a51      	ldrh	r1, [r2, r1]
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	205a      	movs	r0, #90	@ 0x5a
 80089e0:	5a12      	ldrh	r2, [r2, r0]
 80089e2:	b292      	uxth	r2, r2
 80089e4:	1a8a      	subs	r2, r1, r2
 80089e6:	b291      	uxth	r1, r2
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	0010      	movs	r0, r2
 80089ec:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089ee:	e0c5      	b.n	8008b7c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2258      	movs	r2, #88	@ 0x58
 80089f4:	5a99      	ldrh	r1, [r3, r2]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	225a      	movs	r2, #90	@ 0x5a
 80089fa:	5a9b      	ldrh	r3, [r3, r2]
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	208e      	movs	r0, #142	@ 0x8e
 8008a00:	183b      	adds	r3, r7, r0
 8008a02:	1a8a      	subs	r2, r1, r2
 8008a04:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	225a      	movs	r2, #90	@ 0x5a
 8008a0a:	5a9b      	ldrh	r3, [r3, r2]
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d100      	bne.n	8008a14 <HAL_UART_IRQHandler+0x454>
 8008a12:	e0b5      	b.n	8008b80 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8008a14:	183b      	adds	r3, r7, r0
 8008a16:	881b      	ldrh	r3, [r3, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d100      	bne.n	8008a1e <HAL_UART_IRQHandler+0x45e>
 8008a1c:	e0b0      	b.n	8008b80 <HAL_UART_IRQHandler+0x5c0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8008a22:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a24:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a26:	2488      	movs	r4, #136	@ 0x88
 8008a28:	193a      	adds	r2, r7, r4
 8008a2a:	6013      	str	r3, [r2, #0]
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	f383 8810 	msr	PRIMASK, r3
}
 8008a36:	46c0      	nop			@ (mov r8, r8)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4953      	ldr	r1, [pc, #332]	@ (8008b90 <HAL_UART_IRQHandler+0x5d0>)
 8008a44:	400a      	ands	r2, r1
 8008a46:	601a      	str	r2, [r3, #0]
 8008a48:	193b      	adds	r3, r7, r4
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	f383 8810 	msr	PRIMASK, r3
}
 8008a54:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a56:	f3ef 8310 	mrs	r3, PRIMASK
 8008a5a:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a5c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a5e:	2484      	movs	r4, #132	@ 0x84
 8008a60:	193a      	adds	r2, r7, r4
 8008a62:	6013      	str	r3, [r2, #0]
 8008a64:	2301      	movs	r3, #1
 8008a66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	f383 8810 	msr	PRIMASK, r3
}
 8008a6e:	46c0      	nop			@ (mov r8, r8)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	689a      	ldr	r2, [r3, #8]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2101      	movs	r1, #1
 8008a7c:	438a      	bics	r2, r1
 8008a7e:	609a      	str	r2, [r3, #8]
 8008a80:	193b      	adds	r3, r7, r4
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a86:	6a3b      	ldr	r3, [r7, #32]
 8008a88:	f383 8810 	msr	PRIMASK, r3
}
 8008a8c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2280      	movs	r2, #128	@ 0x80
 8008a92:	2120      	movs	r1, #32
 8008a94:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8008aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aaa:	2480      	movs	r4, #128	@ 0x80
 8008aac:	193a      	adds	r2, r7, r4
 8008aae:	6013      	str	r3, [r2, #0]
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab6:	f383 8810 	msr	PRIMASK, r3
}
 8008aba:	46c0      	nop			@ (mov r8, r8)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2110      	movs	r1, #16
 8008ac8:	438a      	bics	r2, r1
 8008aca:	601a      	str	r2, [r3, #0]
 8008acc:	193b      	adds	r3, r7, r4
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad4:	f383 8810 	msr	PRIMASK, r3
}
 8008ad8:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2202      	movs	r2, #2
 8008ade:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	22ac      	movs	r2, #172	@ 0xac
 8008ae4:	589b      	ldr	r3, [r3, r2]
 8008ae6:	183a      	adds	r2, r7, r0
 8008ae8:	8811      	ldrh	r1, [r2, #0]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	0010      	movs	r0, r2
 8008aee:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008af0:	e046      	b.n	8008b80 <HAL_UART_IRQHandler+0x5c0>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008af2:	23a4      	movs	r3, #164	@ 0xa4
 8008af4:	18fb      	adds	r3, r7, r3
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	2380      	movs	r3, #128	@ 0x80
 8008afa:	035b      	lsls	r3, r3, #13
 8008afc:	4013      	ands	r3, r2
 8008afe:	d012      	beq.n	8008b26 <HAL_UART_IRQHandler+0x566>
 8008b00:	239c      	movs	r3, #156	@ 0x9c
 8008b02:	18fb      	adds	r3, r7, r3
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	2380      	movs	r3, #128	@ 0x80
 8008b08:	03db      	lsls	r3, r3, #15
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	d00b      	beq.n	8008b26 <HAL_UART_IRQHandler+0x566>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2280      	movs	r2, #128	@ 0x80
 8008b14:	0352      	lsls	r2, r2, #13
 8008b16:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	22a8      	movs	r2, #168	@ 0xa8
 8008b1c:	589b      	ldr	r3, [r3, r2]
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	0010      	movs	r0, r2
 8008b22:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b24:	e02f      	b.n	8008b86 <HAL_UART_IRQHandler+0x5c6>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008b26:	23a4      	movs	r3, #164	@ 0xa4
 8008b28:	18fb      	adds	r3, r7, r3
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2280      	movs	r2, #128	@ 0x80
 8008b2e:	4013      	ands	r3, r2
 8008b30:	d00f      	beq.n	8008b52 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008b32:	23a0      	movs	r3, #160	@ 0xa0
 8008b34:	18fb      	adds	r3, r7, r3
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2280      	movs	r2, #128	@ 0x80
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	d009      	beq.n	8008b52 <HAL_UART_IRQHandler+0x592>
  {
    if (huart->TxISR != NULL)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d01e      	beq.n	8008b84 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	0010      	movs	r0, r2
 8008b4e:	4798      	blx	r3
    }
    return;
 8008b50:	e018      	b.n	8008b84 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008b52:	23a4      	movs	r3, #164	@ 0xa4
 8008b54:	18fb      	adds	r3, r7, r3
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2240      	movs	r2, #64	@ 0x40
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	d013      	beq.n	8008b86 <HAL_UART_IRQHandler+0x5c6>
 8008b5e:	23a0      	movs	r3, #160	@ 0xa0
 8008b60:	18fb      	adds	r3, r7, r3
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2240      	movs	r2, #64	@ 0x40
 8008b66:	4013      	ands	r3, r2
 8008b68:	d00d      	beq.n	8008b86 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	0018      	movs	r0, r3
 8008b6e:	f000 fe2a 	bl	80097c6 <UART_EndTransmit_IT>
    return;
 8008b72:	e008      	b.n	8008b86 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008b74:	46c0      	nop			@ (mov r8, r8)
 8008b76:	e006      	b.n	8008b86 <HAL_UART_IRQHandler+0x5c6>
    return;
 8008b78:	46c0      	nop			@ (mov r8, r8)
 8008b7a:	e004      	b.n	8008b86 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008b7c:	46c0      	nop			@ (mov r8, r8)
 8008b7e:	e002      	b.n	8008b86 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008b80:	46c0      	nop			@ (mov r8, r8)
 8008b82:	e000      	b.n	8008b86 <HAL_UART_IRQHandler+0x5c6>
    return;
 8008b84:	46c0      	nop			@ (mov r8, r8)
  }

}
 8008b86:	46bd      	mov	sp, r7
 8008b88:	b02b      	add	sp, #172	@ 0xac
 8008b8a:	bd90      	pop	{r4, r7, pc}
 8008b8c:	fffffeff 	.word	0xfffffeff
 8008b90:	fffffedf 	.word	0xfffffedf

08008b94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b9c:	46c0      	nop			@ (mov r8, r8)
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	b002      	add	sp, #8
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008bac:	46c0      	nop			@ (mov r8, r8)
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	b002      	add	sp, #8
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008bbc:	46c0      	nop			@ (mov r8, r8)
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	b002      	add	sp, #8
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008bcc:	46c0      	nop			@ (mov r8, r8)
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	b002      	add	sp, #8
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008bdc:	46c0      	nop			@ (mov r8, r8)
 8008bde:	46bd      	mov	sp, r7
 8008be0:	b002      	add	sp, #8
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008bec:	46c0      	nop			@ (mov r8, r8)
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	b002      	add	sp, #8
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008bfc:	46c0      	nop			@ (mov r8, r8)
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	b002      	add	sp, #8
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008c0c:	46c0      	nop			@ (mov r8, r8)
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	b002      	add	sp, #8
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2188      	movs	r1, #136	@ 0x88
 8008c20:	4a14      	ldr	r2, [pc, #80]	@ (8008c74 <UART_InitCallbacksToDefault+0x60>)
 8008c22:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	218c      	movs	r1, #140	@ 0x8c
 8008c28:	4a13      	ldr	r2, [pc, #76]	@ (8008c78 <UART_InitCallbacksToDefault+0x64>)
 8008c2a:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2190      	movs	r1, #144	@ 0x90
 8008c30:	4a12      	ldr	r2, [pc, #72]	@ (8008c7c <UART_InitCallbacksToDefault+0x68>)
 8008c32:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2194      	movs	r1, #148	@ 0x94
 8008c38:	4a11      	ldr	r2, [pc, #68]	@ (8008c80 <UART_InitCallbacksToDefault+0x6c>)
 8008c3a:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2198      	movs	r1, #152	@ 0x98
 8008c40:	4a10      	ldr	r2, [pc, #64]	@ (8008c84 <UART_InitCallbacksToDefault+0x70>)
 8008c42:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	219c      	movs	r1, #156	@ 0x9c
 8008c48:	4a0f      	ldr	r2, [pc, #60]	@ (8008c88 <UART_InitCallbacksToDefault+0x74>)
 8008c4a:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	21a0      	movs	r1, #160	@ 0xa0
 8008c50:	4a0e      	ldr	r2, [pc, #56]	@ (8008c8c <UART_InitCallbacksToDefault+0x78>)
 8008c52:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	21a4      	movs	r1, #164	@ 0xa4
 8008c58:	4a0d      	ldr	r2, [pc, #52]	@ (8008c90 <UART_InitCallbacksToDefault+0x7c>)
 8008c5a:	505a      	str	r2, [r3, r1]
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	21a8      	movs	r1, #168	@ 0xa8
 8008c60:	4a0c      	ldr	r2, [pc, #48]	@ (8008c94 <UART_InitCallbacksToDefault+0x80>)
 8008c62:	505a      	str	r2, [r3, r1]
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	21ac      	movs	r1, #172	@ 0xac
 8008c68:	4a0b      	ldr	r2, [pc, #44]	@ (8008c98 <UART_InitCallbacksToDefault+0x84>)
 8008c6a:	505a      	str	r2, [r3, r1]

}
 8008c6c:	46c0      	nop			@ (mov r8, r8)
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	b002      	add	sp, #8
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	08008ba5 	.word	0x08008ba5
 8008c78:	08008b95 	.word	0x08008b95
 8008c7c:	08008bc5 	.word	0x08008bc5
 8008c80:	08008bb5 	.word	0x08008bb5
 8008c84:	08008bd5 	.word	0x08008bd5
 8008c88:	08008be5 	.word	0x08008be5
 8008c8c:	08008bf5 	.word	0x08008bf5
 8008c90:	08008c05 	.word	0x08008c05
 8008c94:	08009821 	.word	0x08009821
 8008c98:	08003015 	.word	0x08003015

08008c9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b088      	sub	sp, #32
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ca4:	231e      	movs	r3, #30
 8008ca6:	18fb      	adds	r3, r7, r3
 8008ca8:	2200      	movs	r2, #0
 8008caa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	689a      	ldr	r2, [r3, #8]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	431a      	orrs	r2, r3
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	695b      	ldr	r3, [r3, #20]
 8008cba:	431a      	orrs	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	69db      	ldr	r3, [r3, #28]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4aaf      	ldr	r2, [pc, #700]	@ (8008f88 <UART_SetConfig+0x2ec>)
 8008ccc:	4013      	ands	r3, r2
 8008cce:	0019      	movs	r1, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	697a      	ldr	r2, [r7, #20]
 8008cd6:	430a      	orrs	r2, r1
 8008cd8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	4aaa      	ldr	r2, [pc, #680]	@ (8008f8c <UART_SetConfig+0x2f0>)
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	0019      	movs	r1, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	68da      	ldr	r2, [r3, #12]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	699b      	ldr	r3, [r3, #24]
 8008cf6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6a1b      	ldr	r3, [r3, #32]
 8008cfc:	697a      	ldr	r2, [r7, #20]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	4aa1      	ldr	r2, [pc, #644]	@ (8008f90 <UART_SetConfig+0x2f4>)
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	0019      	movs	r1, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	430a      	orrs	r2, r1
 8008d16:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a9d      	ldr	r2, [pc, #628]	@ (8008f94 <UART_SetConfig+0x2f8>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d127      	bne.n	8008d72 <UART_SetConfig+0xd6>
 8008d22:	4b9d      	ldr	r3, [pc, #628]	@ (8008f98 <UART_SetConfig+0x2fc>)
 8008d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d26:	2203      	movs	r2, #3
 8008d28:	4013      	ands	r3, r2
 8008d2a:	2b03      	cmp	r3, #3
 8008d2c:	d00d      	beq.n	8008d4a <UART_SetConfig+0xae>
 8008d2e:	d81b      	bhi.n	8008d68 <UART_SetConfig+0xcc>
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d014      	beq.n	8008d5e <UART_SetConfig+0xc2>
 8008d34:	d818      	bhi.n	8008d68 <UART_SetConfig+0xcc>
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d002      	beq.n	8008d40 <UART_SetConfig+0xa4>
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d00a      	beq.n	8008d54 <UART_SetConfig+0xb8>
 8008d3e:	e013      	b.n	8008d68 <UART_SetConfig+0xcc>
 8008d40:	231f      	movs	r3, #31
 8008d42:	18fb      	adds	r3, r7, r3
 8008d44:	2200      	movs	r2, #0
 8008d46:	701a      	strb	r2, [r3, #0]
 8008d48:	e065      	b.n	8008e16 <UART_SetConfig+0x17a>
 8008d4a:	231f      	movs	r3, #31
 8008d4c:	18fb      	adds	r3, r7, r3
 8008d4e:	2202      	movs	r2, #2
 8008d50:	701a      	strb	r2, [r3, #0]
 8008d52:	e060      	b.n	8008e16 <UART_SetConfig+0x17a>
 8008d54:	231f      	movs	r3, #31
 8008d56:	18fb      	adds	r3, r7, r3
 8008d58:	2204      	movs	r2, #4
 8008d5a:	701a      	strb	r2, [r3, #0]
 8008d5c:	e05b      	b.n	8008e16 <UART_SetConfig+0x17a>
 8008d5e:	231f      	movs	r3, #31
 8008d60:	18fb      	adds	r3, r7, r3
 8008d62:	2208      	movs	r2, #8
 8008d64:	701a      	strb	r2, [r3, #0]
 8008d66:	e056      	b.n	8008e16 <UART_SetConfig+0x17a>
 8008d68:	231f      	movs	r3, #31
 8008d6a:	18fb      	adds	r3, r7, r3
 8008d6c:	2210      	movs	r2, #16
 8008d6e:	701a      	strb	r2, [r3, #0]
 8008d70:	e051      	b.n	8008e16 <UART_SetConfig+0x17a>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a89      	ldr	r2, [pc, #548]	@ (8008f9c <UART_SetConfig+0x300>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d134      	bne.n	8008de6 <UART_SetConfig+0x14a>
 8008d7c:	4b86      	ldr	r3, [pc, #536]	@ (8008f98 <UART_SetConfig+0x2fc>)
 8008d7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d80:	23c0      	movs	r3, #192	@ 0xc0
 8008d82:	029b      	lsls	r3, r3, #10
 8008d84:	4013      	ands	r3, r2
 8008d86:	22c0      	movs	r2, #192	@ 0xc0
 8008d88:	0292      	lsls	r2, r2, #10
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d017      	beq.n	8008dbe <UART_SetConfig+0x122>
 8008d8e:	22c0      	movs	r2, #192	@ 0xc0
 8008d90:	0292      	lsls	r2, r2, #10
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d822      	bhi.n	8008ddc <UART_SetConfig+0x140>
 8008d96:	2280      	movs	r2, #128	@ 0x80
 8008d98:	0292      	lsls	r2, r2, #10
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d019      	beq.n	8008dd2 <UART_SetConfig+0x136>
 8008d9e:	2280      	movs	r2, #128	@ 0x80
 8008da0:	0292      	lsls	r2, r2, #10
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d81a      	bhi.n	8008ddc <UART_SetConfig+0x140>
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d004      	beq.n	8008db4 <UART_SetConfig+0x118>
 8008daa:	2280      	movs	r2, #128	@ 0x80
 8008dac:	0252      	lsls	r2, r2, #9
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d00a      	beq.n	8008dc8 <UART_SetConfig+0x12c>
 8008db2:	e013      	b.n	8008ddc <UART_SetConfig+0x140>
 8008db4:	231f      	movs	r3, #31
 8008db6:	18fb      	adds	r3, r7, r3
 8008db8:	2200      	movs	r2, #0
 8008dba:	701a      	strb	r2, [r3, #0]
 8008dbc:	e02b      	b.n	8008e16 <UART_SetConfig+0x17a>
 8008dbe:	231f      	movs	r3, #31
 8008dc0:	18fb      	adds	r3, r7, r3
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	701a      	strb	r2, [r3, #0]
 8008dc6:	e026      	b.n	8008e16 <UART_SetConfig+0x17a>
 8008dc8:	231f      	movs	r3, #31
 8008dca:	18fb      	adds	r3, r7, r3
 8008dcc:	2204      	movs	r2, #4
 8008dce:	701a      	strb	r2, [r3, #0]
 8008dd0:	e021      	b.n	8008e16 <UART_SetConfig+0x17a>
 8008dd2:	231f      	movs	r3, #31
 8008dd4:	18fb      	adds	r3, r7, r3
 8008dd6:	2208      	movs	r2, #8
 8008dd8:	701a      	strb	r2, [r3, #0]
 8008dda:	e01c      	b.n	8008e16 <UART_SetConfig+0x17a>
 8008ddc:	231f      	movs	r3, #31
 8008dde:	18fb      	adds	r3, r7, r3
 8008de0:	2210      	movs	r2, #16
 8008de2:	701a      	strb	r2, [r3, #0]
 8008de4:	e017      	b.n	8008e16 <UART_SetConfig+0x17a>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a6d      	ldr	r2, [pc, #436]	@ (8008fa0 <UART_SetConfig+0x304>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d104      	bne.n	8008dfa <UART_SetConfig+0x15e>
 8008df0:	231f      	movs	r3, #31
 8008df2:	18fb      	adds	r3, r7, r3
 8008df4:	2200      	movs	r2, #0
 8008df6:	701a      	strb	r2, [r3, #0]
 8008df8:	e00d      	b.n	8008e16 <UART_SetConfig+0x17a>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a69      	ldr	r2, [pc, #420]	@ (8008fa4 <UART_SetConfig+0x308>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d104      	bne.n	8008e0e <UART_SetConfig+0x172>
 8008e04:	231f      	movs	r3, #31
 8008e06:	18fb      	adds	r3, r7, r3
 8008e08:	2200      	movs	r2, #0
 8008e0a:	701a      	strb	r2, [r3, #0]
 8008e0c:	e003      	b.n	8008e16 <UART_SetConfig+0x17a>
 8008e0e:	231f      	movs	r3, #31
 8008e10:	18fb      	adds	r3, r7, r3
 8008e12:	2210      	movs	r2, #16
 8008e14:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	69da      	ldr	r2, [r3, #28]
 8008e1a:	2380      	movs	r3, #128	@ 0x80
 8008e1c:	021b      	lsls	r3, r3, #8
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d15c      	bne.n	8008edc <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8008e22:	231f      	movs	r3, #31
 8008e24:	18fb      	adds	r3, r7, r3
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	2b08      	cmp	r3, #8
 8008e2a:	d015      	beq.n	8008e58 <UART_SetConfig+0x1bc>
 8008e2c:	dc18      	bgt.n	8008e60 <UART_SetConfig+0x1c4>
 8008e2e:	2b04      	cmp	r3, #4
 8008e30:	d00d      	beq.n	8008e4e <UART_SetConfig+0x1b2>
 8008e32:	dc15      	bgt.n	8008e60 <UART_SetConfig+0x1c4>
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d002      	beq.n	8008e3e <UART_SetConfig+0x1a2>
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d005      	beq.n	8008e48 <UART_SetConfig+0x1ac>
 8008e3c:	e010      	b.n	8008e60 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e3e:	f7fd ff49 	bl	8006cd4 <HAL_RCC_GetPCLK1Freq>
 8008e42:	0003      	movs	r3, r0
 8008e44:	61bb      	str	r3, [r7, #24]
        break;
 8008e46:	e012      	b.n	8008e6e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e48:	4b57      	ldr	r3, [pc, #348]	@ (8008fa8 <UART_SetConfig+0x30c>)
 8008e4a:	61bb      	str	r3, [r7, #24]
        break;
 8008e4c:	e00f      	b.n	8008e6e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e4e:	f7fd fec5 	bl	8006bdc <HAL_RCC_GetSysClockFreq>
 8008e52:	0003      	movs	r3, r0
 8008e54:	61bb      	str	r3, [r7, #24]
        break;
 8008e56:	e00a      	b.n	8008e6e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e58:	2380      	movs	r3, #128	@ 0x80
 8008e5a:	021b      	lsls	r3, r3, #8
 8008e5c:	61bb      	str	r3, [r7, #24]
        break;
 8008e5e:	e006      	b.n	8008e6e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8008e60:	2300      	movs	r3, #0
 8008e62:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008e64:	231e      	movs	r3, #30
 8008e66:	18fb      	adds	r3, r7, r3
 8008e68:	2201      	movs	r2, #1
 8008e6a:	701a      	strb	r2, [r3, #0]
        break;
 8008e6c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d100      	bne.n	8008e76 <UART_SetConfig+0x1da>
 8008e74:	e07a      	b.n	8008f6c <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	005a      	lsls	r2, r3, #1
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	085b      	lsrs	r3, r3, #1
 8008e80:	18d2      	adds	r2, r2, r3
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	0019      	movs	r1, r3
 8008e88:	0010      	movs	r0, r2
 8008e8a:	f7f7 f959 	bl	8000140 <__udivsi3>
 8008e8e:	0003      	movs	r3, r0
 8008e90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	2b0f      	cmp	r3, #15
 8008e96:	d91c      	bls.n	8008ed2 <UART_SetConfig+0x236>
 8008e98:	693a      	ldr	r2, [r7, #16]
 8008e9a:	2380      	movs	r3, #128	@ 0x80
 8008e9c:	025b      	lsls	r3, r3, #9
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d217      	bcs.n	8008ed2 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	b29a      	uxth	r2, r3
 8008ea6:	200e      	movs	r0, #14
 8008ea8:	183b      	adds	r3, r7, r0
 8008eaa:	210f      	movs	r1, #15
 8008eac:	438a      	bics	r2, r1
 8008eae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	085b      	lsrs	r3, r3, #1
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	2207      	movs	r2, #7
 8008eb8:	4013      	ands	r3, r2
 8008eba:	b299      	uxth	r1, r3
 8008ebc:	183b      	adds	r3, r7, r0
 8008ebe:	183a      	adds	r2, r7, r0
 8008ec0:	8812      	ldrh	r2, [r2, #0]
 8008ec2:	430a      	orrs	r2, r1
 8008ec4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	183a      	adds	r2, r7, r0
 8008ecc:	8812      	ldrh	r2, [r2, #0]
 8008ece:	60da      	str	r2, [r3, #12]
 8008ed0:	e04c      	b.n	8008f6c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8008ed2:	231e      	movs	r3, #30
 8008ed4:	18fb      	adds	r3, r7, r3
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	701a      	strb	r2, [r3, #0]
 8008eda:	e047      	b.n	8008f6c <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008edc:	231f      	movs	r3, #31
 8008ede:	18fb      	adds	r3, r7, r3
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	2b08      	cmp	r3, #8
 8008ee4:	d015      	beq.n	8008f12 <UART_SetConfig+0x276>
 8008ee6:	dc18      	bgt.n	8008f1a <UART_SetConfig+0x27e>
 8008ee8:	2b04      	cmp	r3, #4
 8008eea:	d00d      	beq.n	8008f08 <UART_SetConfig+0x26c>
 8008eec:	dc15      	bgt.n	8008f1a <UART_SetConfig+0x27e>
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d002      	beq.n	8008ef8 <UART_SetConfig+0x25c>
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d005      	beq.n	8008f02 <UART_SetConfig+0x266>
 8008ef6:	e010      	b.n	8008f1a <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ef8:	f7fd feec 	bl	8006cd4 <HAL_RCC_GetPCLK1Freq>
 8008efc:	0003      	movs	r3, r0
 8008efe:	61bb      	str	r3, [r7, #24]
        break;
 8008f00:	e012      	b.n	8008f28 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f02:	4b29      	ldr	r3, [pc, #164]	@ (8008fa8 <UART_SetConfig+0x30c>)
 8008f04:	61bb      	str	r3, [r7, #24]
        break;
 8008f06:	e00f      	b.n	8008f28 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f08:	f7fd fe68 	bl	8006bdc <HAL_RCC_GetSysClockFreq>
 8008f0c:	0003      	movs	r3, r0
 8008f0e:	61bb      	str	r3, [r7, #24]
        break;
 8008f10:	e00a      	b.n	8008f28 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f12:	2380      	movs	r3, #128	@ 0x80
 8008f14:	021b      	lsls	r3, r3, #8
 8008f16:	61bb      	str	r3, [r7, #24]
        break;
 8008f18:	e006      	b.n	8008f28 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008f1e:	231e      	movs	r3, #30
 8008f20:	18fb      	adds	r3, r7, r3
 8008f22:	2201      	movs	r2, #1
 8008f24:	701a      	strb	r2, [r3, #0]
        break;
 8008f26:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d01e      	beq.n	8008f6c <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	085a      	lsrs	r2, r3, #1
 8008f34:	69bb      	ldr	r3, [r7, #24]
 8008f36:	18d2      	adds	r2, r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	0019      	movs	r1, r3
 8008f3e:	0010      	movs	r0, r2
 8008f40:	f7f7 f8fe 	bl	8000140 <__udivsi3>
 8008f44:	0003      	movs	r3, r0
 8008f46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	2b0f      	cmp	r3, #15
 8008f4c:	d90a      	bls.n	8008f64 <UART_SetConfig+0x2c8>
 8008f4e:	693a      	ldr	r2, [r7, #16]
 8008f50:	2380      	movs	r3, #128	@ 0x80
 8008f52:	025b      	lsls	r3, r3, #9
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d205      	bcs.n	8008f64 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	60da      	str	r2, [r3, #12]
 8008f62:	e003      	b.n	8008f6c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8008f64:	231e      	movs	r3, #30
 8008f66:	18fb      	adds	r3, r7, r3
 8008f68:	2201      	movs	r2, #1
 8008f6a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008f78:	231e      	movs	r3, #30
 8008f7a:	18fb      	adds	r3, r7, r3
 8008f7c:	781b      	ldrb	r3, [r3, #0]
}
 8008f7e:	0018      	movs	r0, r3
 8008f80:	46bd      	mov	sp, r7
 8008f82:	b008      	add	sp, #32
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	46c0      	nop			@ (mov r8, r8)
 8008f88:	efff69f3 	.word	0xefff69f3
 8008f8c:	ffffcfff 	.word	0xffffcfff
 8008f90:	fffff4ff 	.word	0xfffff4ff
 8008f94:	40013800 	.word	0x40013800
 8008f98:	40021000 	.word	0x40021000
 8008f9c:	40004400 	.word	0x40004400
 8008fa0:	40004800 	.word	0x40004800
 8008fa4:	40004c00 	.word	0x40004c00
 8008fa8:	007a1200 	.word	0x007a1200

08008fac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb8:	2208      	movs	r2, #8
 8008fba:	4013      	ands	r3, r2
 8008fbc:	d00b      	beq.n	8008fd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	4a4a      	ldr	r2, [pc, #296]	@ (80090f0 <UART_AdvFeatureConfig+0x144>)
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	0019      	movs	r1, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	430a      	orrs	r2, r1
 8008fd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fda:	2201      	movs	r2, #1
 8008fdc:	4013      	ands	r3, r2
 8008fde:	d00b      	beq.n	8008ff8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	4a43      	ldr	r2, [pc, #268]	@ (80090f4 <UART_AdvFeatureConfig+0x148>)
 8008fe8:	4013      	ands	r3, r2
 8008fea:	0019      	movs	r1, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	430a      	orrs	r2, r1
 8008ff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ffc:	2202      	movs	r2, #2
 8008ffe:	4013      	ands	r3, r2
 8009000:	d00b      	beq.n	800901a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	4a3b      	ldr	r2, [pc, #236]	@ (80090f8 <UART_AdvFeatureConfig+0x14c>)
 800900a:	4013      	ands	r3, r2
 800900c:	0019      	movs	r1, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	430a      	orrs	r2, r1
 8009018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800901e:	2204      	movs	r2, #4
 8009020:	4013      	ands	r3, r2
 8009022:	d00b      	beq.n	800903c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	4a34      	ldr	r2, [pc, #208]	@ (80090fc <UART_AdvFeatureConfig+0x150>)
 800902c:	4013      	ands	r3, r2
 800902e:	0019      	movs	r1, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	430a      	orrs	r2, r1
 800903a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009040:	2210      	movs	r2, #16
 8009042:	4013      	ands	r3, r2
 8009044:	d00b      	beq.n	800905e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	4a2c      	ldr	r2, [pc, #176]	@ (8009100 <UART_AdvFeatureConfig+0x154>)
 800904e:	4013      	ands	r3, r2
 8009050:	0019      	movs	r1, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	430a      	orrs	r2, r1
 800905c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009062:	2220      	movs	r2, #32
 8009064:	4013      	ands	r3, r2
 8009066:	d00b      	beq.n	8009080 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	4a25      	ldr	r2, [pc, #148]	@ (8009104 <UART_AdvFeatureConfig+0x158>)
 8009070:	4013      	ands	r3, r2
 8009072:	0019      	movs	r1, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	430a      	orrs	r2, r1
 800907e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009084:	2240      	movs	r2, #64	@ 0x40
 8009086:	4013      	ands	r3, r2
 8009088:	d01d      	beq.n	80090c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	4a1d      	ldr	r2, [pc, #116]	@ (8009108 <UART_AdvFeatureConfig+0x15c>)
 8009092:	4013      	ands	r3, r2
 8009094:	0019      	movs	r1, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	430a      	orrs	r2, r1
 80090a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80090a6:	2380      	movs	r3, #128	@ 0x80
 80090a8:	035b      	lsls	r3, r3, #13
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d10b      	bne.n	80090c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	4a15      	ldr	r2, [pc, #84]	@ (800910c <UART_AdvFeatureConfig+0x160>)
 80090b6:	4013      	ands	r3, r2
 80090b8:	0019      	movs	r1, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	430a      	orrs	r2, r1
 80090c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ca:	2280      	movs	r2, #128	@ 0x80
 80090cc:	4013      	ands	r3, r2
 80090ce:	d00b      	beq.n	80090e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	4a0e      	ldr	r2, [pc, #56]	@ (8009110 <UART_AdvFeatureConfig+0x164>)
 80090d8:	4013      	ands	r3, r2
 80090da:	0019      	movs	r1, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	430a      	orrs	r2, r1
 80090e6:	605a      	str	r2, [r3, #4]
  }
}
 80090e8:	46c0      	nop			@ (mov r8, r8)
 80090ea:	46bd      	mov	sp, r7
 80090ec:	b002      	add	sp, #8
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	ffff7fff 	.word	0xffff7fff
 80090f4:	fffdffff 	.word	0xfffdffff
 80090f8:	fffeffff 	.word	0xfffeffff
 80090fc:	fffbffff 	.word	0xfffbffff
 8009100:	ffffefff 	.word	0xffffefff
 8009104:	ffffdfff 	.word	0xffffdfff
 8009108:	ffefffff 	.word	0xffefffff
 800910c:	ff9fffff 	.word	0xff9fffff
 8009110:	fff7ffff 	.word	0xfff7ffff

08009114 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b092      	sub	sp, #72	@ 0x48
 8009118:	af02      	add	r7, sp, #8
 800911a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2284      	movs	r2, #132	@ 0x84
 8009120:	2100      	movs	r1, #0
 8009122:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009124:	f7fa fb48 	bl	80037b8 <HAL_GetTick>
 8009128:	0003      	movs	r3, r0
 800912a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2208      	movs	r2, #8
 8009134:	4013      	ands	r3, r2
 8009136:	2b08      	cmp	r3, #8
 8009138:	d12c      	bne.n	8009194 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800913a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800913c:	2280      	movs	r2, #128	@ 0x80
 800913e:	0391      	lsls	r1, r2, #14
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	4a46      	ldr	r2, [pc, #280]	@ (800925c <UART_CheckIdleState+0x148>)
 8009144:	9200      	str	r2, [sp, #0]
 8009146:	2200      	movs	r2, #0
 8009148:	f000 f88c 	bl	8009264 <UART_WaitOnFlagUntilTimeout>
 800914c:	1e03      	subs	r3, r0, #0
 800914e:	d021      	beq.n	8009194 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009150:	f3ef 8310 	mrs	r3, PRIMASK
 8009154:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009158:	63bb      	str	r3, [r7, #56]	@ 0x38
 800915a:	2301      	movs	r3, #1
 800915c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800915e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009160:	f383 8810 	msr	PRIMASK, r3
}
 8009164:	46c0      	nop			@ (mov r8, r8)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2180      	movs	r1, #128	@ 0x80
 8009172:	438a      	bics	r2, r1
 8009174:	601a      	str	r2, [r3, #0]
 8009176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009178:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800917a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800917c:	f383 8810 	msr	PRIMASK, r3
}
 8009180:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2220      	movs	r2, #32
 8009186:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2278      	movs	r2, #120	@ 0x78
 800918c:	2100      	movs	r1, #0
 800918e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009190:	2303      	movs	r3, #3
 8009192:	e05f      	b.n	8009254 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2204      	movs	r2, #4
 800919c:	4013      	ands	r3, r2
 800919e:	2b04      	cmp	r3, #4
 80091a0:	d146      	bne.n	8009230 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091a4:	2280      	movs	r2, #128	@ 0x80
 80091a6:	03d1      	lsls	r1, r2, #15
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	4a2c      	ldr	r2, [pc, #176]	@ (800925c <UART_CheckIdleState+0x148>)
 80091ac:	9200      	str	r2, [sp, #0]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f000 f858 	bl	8009264 <UART_WaitOnFlagUntilTimeout>
 80091b4:	1e03      	subs	r3, r0, #0
 80091b6:	d03b      	beq.n	8009230 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091b8:	f3ef 8310 	mrs	r3, PRIMASK
 80091bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80091be:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80091c2:	2301      	movs	r3, #1
 80091c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	f383 8810 	msr	PRIMASK, r3
}
 80091cc:	46c0      	nop			@ (mov r8, r8)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4921      	ldr	r1, [pc, #132]	@ (8009260 <UART_CheckIdleState+0x14c>)
 80091da:	400a      	ands	r2, r1
 80091dc:	601a      	str	r2, [r3, #0]
 80091de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	f383 8810 	msr	PRIMASK, r3
}
 80091e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091ea:	f3ef 8310 	mrs	r3, PRIMASK
 80091ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80091f0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80091f4:	2301      	movs	r3, #1
 80091f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	f383 8810 	msr	PRIMASK, r3
}
 80091fe:	46c0      	nop			@ (mov r8, r8)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	689a      	ldr	r2, [r3, #8]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2101      	movs	r1, #1
 800920c:	438a      	bics	r2, r1
 800920e:	609a      	str	r2, [r3, #8]
 8009210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009212:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009214:	6a3b      	ldr	r3, [r7, #32]
 8009216:	f383 8810 	msr	PRIMASK, r3
}
 800921a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2280      	movs	r2, #128	@ 0x80
 8009220:	2120      	movs	r1, #32
 8009222:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2278      	movs	r2, #120	@ 0x78
 8009228:	2100      	movs	r1, #0
 800922a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800922c:	2303      	movs	r3, #3
 800922e:	e011      	b.n	8009254 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2220      	movs	r2, #32
 8009234:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2280      	movs	r2, #128	@ 0x80
 800923a:	2120      	movs	r1, #32
 800923c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2278      	movs	r2, #120	@ 0x78
 800924e:	2100      	movs	r1, #0
 8009250:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	0018      	movs	r0, r3
 8009256:	46bd      	mov	sp, r7
 8009258:	b010      	add	sp, #64	@ 0x40
 800925a:	bd80      	pop	{r7, pc}
 800925c:	01ffffff 	.word	0x01ffffff
 8009260:	fffffedf 	.word	0xfffffedf

08009264 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	603b      	str	r3, [r7, #0]
 8009270:	1dfb      	adds	r3, r7, #7
 8009272:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009274:	e051      	b.n	800931a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	3301      	adds	r3, #1
 800927a:	d04e      	beq.n	800931a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800927c:	f7fa fa9c 	bl	80037b8 <HAL_GetTick>
 8009280:	0002      	movs	r2, r0
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	69ba      	ldr	r2, [r7, #24]
 8009288:	429a      	cmp	r2, r3
 800928a:	d302      	bcc.n	8009292 <UART_WaitOnFlagUntilTimeout+0x2e>
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d101      	bne.n	8009296 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8009292:	2303      	movs	r3, #3
 8009294:	e051      	b.n	800933a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2204      	movs	r2, #4
 800929e:	4013      	ands	r3, r2
 80092a0:	d03b      	beq.n	800931a <UART_WaitOnFlagUntilTimeout+0xb6>
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	2b80      	cmp	r3, #128	@ 0x80
 80092a6:	d038      	beq.n	800931a <UART_WaitOnFlagUntilTimeout+0xb6>
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	2b40      	cmp	r3, #64	@ 0x40
 80092ac:	d035      	beq.n	800931a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	69db      	ldr	r3, [r3, #28]
 80092b4:	2208      	movs	r2, #8
 80092b6:	4013      	ands	r3, r2
 80092b8:	2b08      	cmp	r3, #8
 80092ba:	d111      	bne.n	80092e0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2208      	movs	r2, #8
 80092c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	0018      	movs	r0, r3
 80092c8:	f000 f900 	bl	80094cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2284      	movs	r2, #132	@ 0x84
 80092d0:	2108      	movs	r1, #8
 80092d2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2278      	movs	r2, #120	@ 0x78
 80092d8:	2100      	movs	r1, #0
 80092da:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	e02c      	b.n	800933a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	69da      	ldr	r2, [r3, #28]
 80092e6:	2380      	movs	r3, #128	@ 0x80
 80092e8:	011b      	lsls	r3, r3, #4
 80092ea:	401a      	ands	r2, r3
 80092ec:	2380      	movs	r3, #128	@ 0x80
 80092ee:	011b      	lsls	r3, r3, #4
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d112      	bne.n	800931a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2280      	movs	r2, #128	@ 0x80
 80092fa:	0112      	lsls	r2, r2, #4
 80092fc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	0018      	movs	r0, r3
 8009302:	f000 f8e3 	bl	80094cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2284      	movs	r2, #132	@ 0x84
 800930a:	2120      	movs	r1, #32
 800930c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2278      	movs	r2, #120	@ 0x78
 8009312:	2100      	movs	r1, #0
 8009314:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009316:	2303      	movs	r3, #3
 8009318:	e00f      	b.n	800933a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	69db      	ldr	r3, [r3, #28]
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	4013      	ands	r3, r2
 8009324:	68ba      	ldr	r2, [r7, #8]
 8009326:	1ad3      	subs	r3, r2, r3
 8009328:	425a      	negs	r2, r3
 800932a:	4153      	adcs	r3, r2
 800932c:	b2db      	uxtb	r3, r3
 800932e:	001a      	movs	r2, r3
 8009330:	1dfb      	adds	r3, r7, #7
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	429a      	cmp	r2, r3
 8009336:	d09e      	beq.n	8009276 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	0018      	movs	r0, r3
 800933c:	46bd      	mov	sp, r7
 800933e:	b004      	add	sp, #16
 8009340:	bd80      	pop	{r7, pc}
	...

08009344 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b090      	sub	sp, #64	@ 0x40
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	1dbb      	adds	r3, r7, #6
 8009350:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	68ba      	ldr	r2, [r7, #8]
 8009356:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	1dba      	adds	r2, r7, #6
 800935c:	2158      	movs	r1, #88	@ 0x58
 800935e:	8812      	ldrh	r2, [r2, #0]
 8009360:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2284      	movs	r2, #132	@ 0x84
 8009366:	2100      	movs	r1, #0
 8009368:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2280      	movs	r2, #128	@ 0x80
 800936e:	2122      	movs	r1, #34	@ 0x22
 8009370:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009376:	2b00      	cmp	r3, #0
 8009378:	d028      	beq.n	80093cc <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800937e:	4a3e      	ldr	r2, [pc, #248]	@ (8009478 <UART_Start_Receive_DMA+0x134>)
 8009380:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009386:	4a3d      	ldr	r2, [pc, #244]	@ (800947c <UART_Start_Receive_DMA+0x138>)
 8009388:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800938e:	4a3c      	ldr	r2, [pc, #240]	@ (8009480 <UART_Start_Receive_DMA+0x13c>)
 8009390:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009396:	2200      	movs	r2, #0
 8009398:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	3324      	adds	r3, #36	@ 0x24
 80093a4:	0019      	movs	r1, r3
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093aa:	001a      	movs	r2, r3
 80093ac:	1dbb      	adds	r3, r7, #6
 80093ae:	881b      	ldrh	r3, [r3, #0]
 80093b0:	f7fa fdd6 	bl	8003f60 <HAL_DMA_Start_IT>
 80093b4:	1e03      	subs	r3, r0, #0
 80093b6:	d009      	beq.n	80093cc <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2284      	movs	r2, #132	@ 0x84
 80093bc:	2110      	movs	r1, #16
 80093be:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2280      	movs	r2, #128	@ 0x80
 80093c4:	2120      	movs	r1, #32
 80093c6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	e050      	b.n	800946e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d019      	beq.n	8009408 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093d4:	f3ef 8310 	mrs	r3, PRIMASK
 80093d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80093da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093de:	2301      	movs	r3, #1
 80093e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e4:	f383 8810 	msr	PRIMASK, r3
}
 80093e8:	46c0      	nop			@ (mov r8, r8)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2180      	movs	r1, #128	@ 0x80
 80093f6:	0049      	lsls	r1, r1, #1
 80093f8:	430a      	orrs	r2, r1
 80093fa:	601a      	str	r2, [r3, #0]
 80093fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093fe:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009402:	f383 8810 	msr	PRIMASK, r3
}
 8009406:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009408:	f3ef 8310 	mrs	r3, PRIMASK
 800940c:	613b      	str	r3, [r7, #16]
  return(result);
 800940e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009410:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009412:	2301      	movs	r3, #1
 8009414:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	f383 8810 	msr	PRIMASK, r3
}
 800941c:	46c0      	nop			@ (mov r8, r8)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	689a      	ldr	r2, [r3, #8]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2101      	movs	r1, #1
 800942a:	430a      	orrs	r2, r1
 800942c:	609a      	str	r2, [r3, #8]
 800942e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009430:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009432:	69bb      	ldr	r3, [r7, #24]
 8009434:	f383 8810 	msr	PRIMASK, r3
}
 8009438:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800943a:	f3ef 8310 	mrs	r3, PRIMASK
 800943e:	61fb      	str	r3, [r7, #28]
  return(result);
 8009440:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009442:	637b      	str	r3, [r7, #52]	@ 0x34
 8009444:	2301      	movs	r3, #1
 8009446:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009448:	6a3b      	ldr	r3, [r7, #32]
 800944a:	f383 8810 	msr	PRIMASK, r3
}
 800944e:	46c0      	nop			@ (mov r8, r8)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	689a      	ldr	r2, [r3, #8]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2140      	movs	r1, #64	@ 0x40
 800945c:	430a      	orrs	r2, r1
 800945e:	609a      	str	r2, [r3, #8]
 8009460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009462:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009466:	f383 8810 	msr	PRIMASK, r3
}
 800946a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	0018      	movs	r0, r3
 8009470:	46bd      	mov	sp, r7
 8009472:	b010      	add	sp, #64	@ 0x40
 8009474:	bd80      	pop	{r7, pc}
 8009476:	46c0      	nop			@ (mov r8, r8)
 8009478:	08009595 	.word	0x08009595
 800947c:	080096c5 	.word	0x080096c5
 8009480:	0800970d 	.word	0x0800970d

08009484 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b086      	sub	sp, #24
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800948c:	f3ef 8310 	mrs	r3, PRIMASK
 8009490:	60bb      	str	r3, [r7, #8]
  return(result);
 8009492:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009494:	617b      	str	r3, [r7, #20]
 8009496:	2301      	movs	r3, #1
 8009498:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f383 8810 	msr	PRIMASK, r3
}
 80094a0:	46c0      	nop			@ (mov r8, r8)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	21c0      	movs	r1, #192	@ 0xc0
 80094ae:	438a      	bics	r2, r1
 80094b0:	601a      	str	r2, [r3, #0]
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	f383 8810 	msr	PRIMASK, r3
}
 80094bc:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2220      	movs	r2, #32
 80094c2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80094c4:	46c0      	nop			@ (mov r8, r8)
 80094c6:	46bd      	mov	sp, r7
 80094c8:	b006      	add	sp, #24
 80094ca:	bd80      	pop	{r7, pc}

080094cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b08e      	sub	sp, #56	@ 0x38
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094d4:	f3ef 8310 	mrs	r3, PRIMASK
 80094d8:	617b      	str	r3, [r7, #20]
  return(result);
 80094da:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80094de:	2301      	movs	r3, #1
 80094e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	f383 8810 	msr	PRIMASK, r3
}
 80094e8:	46c0      	nop			@ (mov r8, r8)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4926      	ldr	r1, [pc, #152]	@ (8009590 <UART_EndRxTransfer+0xc4>)
 80094f6:	400a      	ands	r2, r1
 80094f8:	601a      	str	r2, [r3, #0]
 80094fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	f383 8810 	msr	PRIMASK, r3
}
 8009504:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009506:	f3ef 8310 	mrs	r3, PRIMASK
 800950a:	623b      	str	r3, [r7, #32]
  return(result);
 800950c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800950e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009510:	2301      	movs	r3, #1
 8009512:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009516:	f383 8810 	msr	PRIMASK, r3
}
 800951a:	46c0      	nop			@ (mov r8, r8)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	689a      	ldr	r2, [r3, #8]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2101      	movs	r1, #1
 8009528:	438a      	bics	r2, r1
 800952a:	609a      	str	r2, [r3, #8]
 800952c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800952e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009532:	f383 8810 	msr	PRIMASK, r3
}
 8009536:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800953c:	2b01      	cmp	r3, #1
 800953e:	d118      	bne.n	8009572 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009540:	f3ef 8310 	mrs	r3, PRIMASK
 8009544:	60bb      	str	r3, [r7, #8]
  return(result);
 8009546:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009548:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800954a:	2301      	movs	r3, #1
 800954c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f383 8810 	msr	PRIMASK, r3
}
 8009554:	46c0      	nop			@ (mov r8, r8)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2110      	movs	r1, #16
 8009562:	438a      	bics	r2, r1
 8009564:	601a      	str	r2, [r3, #0]
 8009566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009568:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	f383 8810 	msr	PRIMASK, r3
}
 8009570:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2280      	movs	r2, #128	@ 0x80
 8009576:	2120      	movs	r1, #32
 8009578:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009586:	46c0      	nop			@ (mov r8, r8)
 8009588:	46bd      	mov	sp, r7
 800958a:	b00e      	add	sp, #56	@ 0x38
 800958c:	bd80      	pop	{r7, pc}
 800958e:	46c0      	nop			@ (mov r8, r8)
 8009590:	fffffedf 	.word	0xfffffedf

08009594 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b094      	sub	sp, #80	@ 0x50
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095a0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	2b20      	cmp	r3, #32
 80095a8:	d06f      	beq.n	800968a <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 80095aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095ac:	225a      	movs	r2, #90	@ 0x5a
 80095ae:	2100      	movs	r1, #0
 80095b0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095b2:	f3ef 8310 	mrs	r3, PRIMASK
 80095b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80095b8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095bc:	2301      	movs	r3, #1
 80095be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	f383 8810 	msr	PRIMASK, r3
}
 80095c6:	46c0      	nop			@ (mov r8, r8)
 80095c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	493b      	ldr	r1, [pc, #236]	@ (80096c0 <UART_DMAReceiveCplt+0x12c>)
 80095d4:	400a      	ands	r2, r1
 80095d6:	601a      	str	r2, [r3, #0]
 80095d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095dc:	6a3b      	ldr	r3, [r7, #32]
 80095de:	f383 8810 	msr	PRIMASK, r3
}
 80095e2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095e4:	f3ef 8310 	mrs	r3, PRIMASK
 80095e8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80095ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80095ee:	2301      	movs	r3, #1
 80095f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f4:	f383 8810 	msr	PRIMASK, r3
}
 80095f8:	46c0      	nop			@ (mov r8, r8)
 80095fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	689a      	ldr	r2, [r3, #8]
 8009600:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2101      	movs	r1, #1
 8009606:	438a      	bics	r2, r1
 8009608:	609a      	str	r2, [r3, #8]
 800960a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800960c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800960e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009610:	f383 8810 	msr	PRIMASK, r3
}
 8009614:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009616:	f3ef 8310 	mrs	r3, PRIMASK
 800961a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800961c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800961e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009620:	2301      	movs	r3, #1
 8009622:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009626:	f383 8810 	msr	PRIMASK, r3
}
 800962a:	46c0      	nop			@ (mov r8, r8)
 800962c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	689a      	ldr	r2, [r3, #8]
 8009632:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2140      	movs	r1, #64	@ 0x40
 8009638:	438a      	bics	r2, r1
 800963a:	609a      	str	r2, [r3, #8]
 800963c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800963e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009642:	f383 8810 	msr	PRIMASK, r3
}
 8009646:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009648:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800964a:	2280      	movs	r2, #128	@ 0x80
 800964c:	2120      	movs	r1, #32
 800964e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009650:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009654:	2b01      	cmp	r3, #1
 8009656:	d118      	bne.n	800968a <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009658:	f3ef 8310 	mrs	r3, PRIMASK
 800965c:	60fb      	str	r3, [r7, #12]
  return(result);
 800965e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009660:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009662:	2301      	movs	r3, #1
 8009664:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	f383 8810 	msr	PRIMASK, r3
}
 800966c:	46c0      	nop			@ (mov r8, r8)
 800966e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2110      	movs	r1, #16
 800967a:	438a      	bics	r2, r1
 800967c:	601a      	str	r2, [r3, #0]
 800967e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009680:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	f383 8810 	msr	PRIMASK, r3
}
 8009688:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800968a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800968c:	2200      	movs	r2, #0
 800968e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009690:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009692:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009694:	2b01      	cmp	r3, #1
 8009696:	d109      	bne.n	80096ac <UART_DMAReceiveCplt+0x118>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8009698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800969a:	22ac      	movs	r2, #172	@ 0xac
 800969c:	589b      	ldr	r3, [r3, r2]
 800969e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80096a0:	2158      	movs	r1, #88	@ 0x58
 80096a2:	5a51      	ldrh	r1, [r2, r1]
 80096a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80096a6:	0010      	movs	r0, r2
 80096a8:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80096aa:	e005      	b.n	80096b8 <UART_DMAReceiveCplt+0x124>
    huart->RxCpltCallback(huart);
 80096ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096ae:	2294      	movs	r2, #148	@ 0x94
 80096b0:	589b      	ldr	r3, [r3, r2]
 80096b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80096b4:	0010      	movs	r0, r2
 80096b6:	4798      	blx	r3
}
 80096b8:	46c0      	nop			@ (mov r8, r8)
 80096ba:	46bd      	mov	sp, r7
 80096bc:	b014      	add	sp, #80	@ 0x50
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	fffffeff 	.word	0xfffffeff

080096c4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096d0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2201      	movs	r2, #1
 80096d6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d10b      	bne.n	80096f8 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	22ac      	movs	r2, #172	@ 0xac
 80096e4:	589b      	ldr	r3, [r3, r2]
 80096e6:	68fa      	ldr	r2, [r7, #12]
 80096e8:	2158      	movs	r1, #88	@ 0x58
 80096ea:	5a52      	ldrh	r2, [r2, r1]
 80096ec:	0852      	lsrs	r2, r2, #1
 80096ee:	b291      	uxth	r1, r2
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	0010      	movs	r0, r2
 80096f4:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80096f6:	e005      	b.n	8009704 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2290      	movs	r2, #144	@ 0x90
 80096fc:	589b      	ldr	r3, [r3, r2]
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	0010      	movs	r0, r2
 8009702:	4798      	blx	r3
}
 8009704:	46c0      	nop			@ (mov r8, r8)
 8009706:	46bd      	mov	sp, r7
 8009708:	b004      	add	sp, #16
 800970a:	bd80      	pop	{r7, pc}

0800970c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b086      	sub	sp, #24
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009718:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800971e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	2280      	movs	r2, #128	@ 0x80
 8009724:	589b      	ldr	r3, [r3, r2]
 8009726:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	2280      	movs	r2, #128	@ 0x80
 8009730:	4013      	ands	r3, r2
 8009732:	2b80      	cmp	r3, #128	@ 0x80
 8009734:	d10a      	bne.n	800974c <UART_DMAError+0x40>
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	2b21      	cmp	r3, #33	@ 0x21
 800973a:	d107      	bne.n	800974c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	2252      	movs	r2, #82	@ 0x52
 8009740:	2100      	movs	r1, #0
 8009742:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	0018      	movs	r0, r3
 8009748:	f7ff fe9c 	bl	8009484 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	2240      	movs	r2, #64	@ 0x40
 8009754:	4013      	ands	r3, r2
 8009756:	2b40      	cmp	r3, #64	@ 0x40
 8009758:	d10a      	bne.n	8009770 <UART_DMAError+0x64>
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2b22      	cmp	r3, #34	@ 0x22
 800975e:	d107      	bne.n	8009770 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	225a      	movs	r2, #90	@ 0x5a
 8009764:	2100      	movs	r1, #0
 8009766:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	0018      	movs	r0, r3
 800976c:	f7ff feae 	bl	80094cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	2284      	movs	r2, #132	@ 0x84
 8009774:	589b      	ldr	r3, [r3, r2]
 8009776:	2210      	movs	r2, #16
 8009778:	431a      	orrs	r2, r3
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	2184      	movs	r1, #132	@ 0x84
 800977e:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	2298      	movs	r2, #152	@ 0x98
 8009784:	589b      	ldr	r3, [r3, r2]
 8009786:	697a      	ldr	r2, [r7, #20]
 8009788:	0010      	movs	r0, r2
 800978a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800978c:	46c0      	nop			@ (mov r8, r8)
 800978e:	46bd      	mov	sp, r7
 8009790:	b006      	add	sp, #24
 8009792:	bd80      	pop	{r7, pc}

08009794 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	225a      	movs	r2, #90	@ 0x5a
 80097a6:	2100      	movs	r1, #0
 80097a8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2252      	movs	r2, #82	@ 0x52
 80097ae:	2100      	movs	r1, #0
 80097b0:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2298      	movs	r2, #152	@ 0x98
 80097b6:	589b      	ldr	r3, [r3, r2]
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	0010      	movs	r0, r2
 80097bc:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097be:	46c0      	nop			@ (mov r8, r8)
 80097c0:	46bd      	mov	sp, r7
 80097c2:	b004      	add	sp, #16
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b086      	sub	sp, #24
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097ce:	f3ef 8310 	mrs	r3, PRIMASK
 80097d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80097d4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097d6:	617b      	str	r3, [r7, #20]
 80097d8:	2301      	movs	r3, #1
 80097da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f383 8810 	msr	PRIMASK, r3
}
 80097e2:	46c0      	nop			@ (mov r8, r8)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2140      	movs	r1, #64	@ 0x40
 80097f0:	438a      	bics	r2, r1
 80097f2:	601a      	str	r2, [r3, #0]
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	f383 8810 	msr	PRIMASK, r3
}
 80097fe:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2220      	movs	r2, #32
 8009804:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	228c      	movs	r2, #140	@ 0x8c
 8009810:	589b      	ldr	r3, [r3, r2]
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	0010      	movs	r0, r2
 8009816:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009818:	46c0      	nop			@ (mov r8, r8)
 800981a:	46bd      	mov	sp, r7
 800981c:	b006      	add	sp, #24
 800981e:	bd80      	pop	{r7, pc}

08009820 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009828:	46c0      	nop			@ (mov r8, r8)
 800982a:	46bd      	mov	sp, r7
 800982c:	b002      	add	sp, #8
 800982e:	bd80      	pop	{r7, pc}

08009830 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009830:	b5b0      	push	{r4, r5, r7, lr}
 8009832:	b08a      	sub	sp, #40	@ 0x28
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	1dbb      	adds	r3, r7, #6
 800983c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2280      	movs	r2, #128	@ 0x80
 8009842:	589b      	ldr	r3, [r3, r2]
 8009844:	2b20      	cmp	r3, #32
 8009846:	d156      	bne.n	80098f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d003      	beq.n	8009856 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800984e:	1dbb      	adds	r3, r7, #6
 8009850:	881b      	ldrh	r3, [r3, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d101      	bne.n	800985a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	e04e      	b.n	80098f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	689a      	ldr	r2, [r3, #8]
 800985e:	2380      	movs	r3, #128	@ 0x80
 8009860:	015b      	lsls	r3, r3, #5
 8009862:	429a      	cmp	r2, r3
 8009864:	d109      	bne.n	800987a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d105      	bne.n	800987a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	2201      	movs	r2, #1
 8009872:	4013      	ands	r3, r2
 8009874:	d001      	beq.n	800987a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	e03e      	b.n	80098f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2201      	movs	r2, #1
 800987e:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2200      	movs	r2, #0
 8009884:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009886:	2527      	movs	r5, #39	@ 0x27
 8009888:	197c      	adds	r4, r7, r5
 800988a:	1dbb      	adds	r3, r7, #6
 800988c:	881a      	ldrh	r2, [r3, #0]
 800988e:	68b9      	ldr	r1, [r7, #8]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	0018      	movs	r0, r3
 8009894:	f7ff fd56 	bl	8009344 <UART_Start_Receive_DMA>
 8009898:	0003      	movs	r3, r0
 800989a:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800989c:	197b      	adds	r3, r7, r5
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d124      	bne.n	80098ee <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d11c      	bne.n	80098e6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2210      	movs	r2, #16
 80098b2:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098b4:	f3ef 8310 	mrs	r3, PRIMASK
 80098b8:	617b      	str	r3, [r7, #20]
  return(result);
 80098ba:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098bc:	623b      	str	r3, [r7, #32]
 80098be:	2301      	movs	r3, #1
 80098c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	f383 8810 	msr	PRIMASK, r3
}
 80098c8:	46c0      	nop			@ (mov r8, r8)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2110      	movs	r1, #16
 80098d6:	430a      	orrs	r2, r1
 80098d8:	601a      	str	r2, [r3, #0]
 80098da:	6a3b      	ldr	r3, [r7, #32]
 80098dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	f383 8810 	msr	PRIMASK, r3
}
 80098e4:	e003      	b.n	80098ee <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80098e6:	2327      	movs	r3, #39	@ 0x27
 80098e8:	18fb      	adds	r3, r7, r3
 80098ea:	2201      	movs	r2, #1
 80098ec:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80098ee:	2327      	movs	r3, #39	@ 0x27
 80098f0:	18fb      	adds	r3, r7, r3
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	e000      	b.n	80098f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80098f6:	2302      	movs	r3, #2
  }
}
 80098f8:	0018      	movs	r0, r3
 80098fa:	46bd      	mov	sp, r7
 80098fc:	b00a      	add	sp, #40	@ 0x28
 80098fe:	bdb0      	pop	{r4, r5, r7, pc}

08009900 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2244      	movs	r2, #68	@ 0x44
 800990c:	2100      	movs	r1, #0
 800990e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009910:	4b05      	ldr	r3, [pc, #20]	@ (8009928 <USB_EnableGlobalInt+0x28>)
 8009912:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	b299      	uxth	r1, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2240      	movs	r2, #64	@ 0x40
 800991c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800991e:	2300      	movs	r3, #0
}
 8009920:	0018      	movs	r0, r3
 8009922:	46bd      	mov	sp, r7
 8009924:	b004      	add	sp, #16
 8009926:	bd80      	pop	{r7, pc}
 8009928:	0000bf80 	.word	0x0000bf80

0800992c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009934:	4b09      	ldr	r3, [pc, #36]	@ (800995c <USB_DisableGlobalInt+0x30>)
 8009936:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2240      	movs	r2, #64	@ 0x40
 800993c:	5a9b      	ldrh	r3, [r3, r2]
 800993e:	b29b      	uxth	r3, r3
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	b292      	uxth	r2, r2
 8009944:	43d2      	mvns	r2, r2
 8009946:	b292      	uxth	r2, r2
 8009948:	4013      	ands	r3, r2
 800994a:	b299      	uxth	r1, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2240      	movs	r2, #64	@ 0x40
 8009950:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8009952:	2300      	movs	r3, #0
}
 8009954:	0018      	movs	r0, r3
 8009956:	46bd      	mov	sp, r7
 8009958:	b004      	add	sp, #16
 800995a:	bd80      	pop	{r7, pc}
 800995c:	0000bf80 	.word	0x0000bf80

08009960 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	1d3b      	adds	r3, r7, #4
 800996a:	6019      	str	r1, [r3, #0]
 800996c:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2240      	movs	r2, #64	@ 0x40
 8009972:	2101      	movs	r1, #1
 8009974:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2240      	movs	r2, #64	@ 0x40
 800997a:	2100      	movs	r1, #0
 800997c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2244      	movs	r2, #68	@ 0x44
 8009982:	2100      	movs	r1, #0
 8009984:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2250      	movs	r2, #80	@ 0x50
 800998a:	2100      	movs	r1, #0
 800998c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800998e:	2300      	movs	r3, #0
}
 8009990:	0018      	movs	r0, r3
 8009992:	46bd      	mov	sp, r7
 8009994:	b004      	add	sp, #16
 8009996:	bd80      	pop	{r7, pc}

08009998 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b09c      	sub	sp, #112	@ 0x70
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80099a2:	236f      	movs	r3, #111	@ 0x6f
 80099a4:	18fb      	adds	r3, r7, r3
 80099a6:	2200      	movs	r2, #0
 80099a8:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	18d3      	adds	r3, r2, r3
 80099b4:	881b      	ldrh	r3, [r3, #0]
 80099b6:	b29a      	uxth	r2, r3
 80099b8:	236c      	movs	r3, #108	@ 0x6c
 80099ba:	18fb      	adds	r3, r7, r3
 80099bc:	49a1      	ldr	r1, [pc, #644]	@ (8009c44 <USB_ActivateEndpoint+0x2ac>)
 80099be:	400a      	ands	r2, r1
 80099c0:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	78db      	ldrb	r3, [r3, #3]
 80099c6:	2b03      	cmp	r3, #3
 80099c8:	d017      	beq.n	80099fa <USB_ActivateEndpoint+0x62>
 80099ca:	dc28      	bgt.n	8009a1e <USB_ActivateEndpoint+0x86>
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d00e      	beq.n	80099ee <USB_ActivateEndpoint+0x56>
 80099d0:	dc25      	bgt.n	8009a1e <USB_ActivateEndpoint+0x86>
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d002      	beq.n	80099dc <USB_ActivateEndpoint+0x44>
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d018      	beq.n	8009a0c <USB_ActivateEndpoint+0x74>
 80099da:	e020      	b.n	8009a1e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80099dc:	226c      	movs	r2, #108	@ 0x6c
 80099de:	18bb      	adds	r3, r7, r2
 80099e0:	18ba      	adds	r2, r7, r2
 80099e2:	8812      	ldrh	r2, [r2, #0]
 80099e4:	2180      	movs	r1, #128	@ 0x80
 80099e6:	0089      	lsls	r1, r1, #2
 80099e8:	430a      	orrs	r2, r1
 80099ea:	801a      	strh	r2, [r3, #0]
      break;
 80099ec:	e01c      	b.n	8009a28 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80099ee:	226c      	movs	r2, #108	@ 0x6c
 80099f0:	18bb      	adds	r3, r7, r2
 80099f2:	18ba      	adds	r2, r7, r2
 80099f4:	8812      	ldrh	r2, [r2, #0]
 80099f6:	801a      	strh	r2, [r3, #0]
      break;
 80099f8:	e016      	b.n	8009a28 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80099fa:	226c      	movs	r2, #108	@ 0x6c
 80099fc:	18bb      	adds	r3, r7, r2
 80099fe:	18ba      	adds	r2, r7, r2
 8009a00:	8812      	ldrh	r2, [r2, #0]
 8009a02:	21c0      	movs	r1, #192	@ 0xc0
 8009a04:	00c9      	lsls	r1, r1, #3
 8009a06:	430a      	orrs	r2, r1
 8009a08:	801a      	strh	r2, [r3, #0]
      break;
 8009a0a:	e00d      	b.n	8009a28 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009a0c:	226c      	movs	r2, #108	@ 0x6c
 8009a0e:	18bb      	adds	r3, r7, r2
 8009a10:	18ba      	adds	r2, r7, r2
 8009a12:	8812      	ldrh	r2, [r2, #0]
 8009a14:	2180      	movs	r1, #128	@ 0x80
 8009a16:	00c9      	lsls	r1, r1, #3
 8009a18:	430a      	orrs	r2, r1
 8009a1a:	801a      	strh	r2, [r3, #0]
      break;
 8009a1c:	e004      	b.n	8009a28 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8009a1e:	236f      	movs	r3, #111	@ 0x6f
 8009a20:	18fb      	adds	r3, r7, r3
 8009a22:	2201      	movs	r2, #1
 8009a24:	701a      	strb	r2, [r3, #0]
      break;
 8009a26:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	18d3      	adds	r3, r2, r3
 8009a32:	226c      	movs	r2, #108	@ 0x6c
 8009a34:	18ba      	adds	r2, r7, r2
 8009a36:	8812      	ldrh	r2, [r2, #0]
 8009a38:	4983      	ldr	r1, [pc, #524]	@ (8009c48 <USB_ActivateEndpoint+0x2b0>)
 8009a3a:	430a      	orrs	r2, r1
 8009a3c:	b292      	uxth	r2, r2
 8009a3e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	18d3      	adds	r3, r2, r3
 8009a4a:	881b      	ldrh	r3, [r3, #0]
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	b21b      	sxth	r3, r3
 8009a50:	4a7e      	ldr	r2, [pc, #504]	@ (8009c4c <USB_ActivateEndpoint+0x2b4>)
 8009a52:	4013      	ands	r3, r2
 8009a54:	b21a      	sxth	r2, r3
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	b21b      	sxth	r3, r3
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	b21a      	sxth	r2, r3
 8009a60:	2166      	movs	r1, #102	@ 0x66
 8009a62:	187b      	adds	r3, r7, r1
 8009a64:	801a      	strh	r2, [r3, #0]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	18d3      	adds	r3, r2, r3
 8009a70:	187a      	adds	r2, r7, r1
 8009a72:	8812      	ldrh	r2, [r2, #0]
 8009a74:	4974      	ldr	r1, [pc, #464]	@ (8009c48 <USB_ActivateEndpoint+0x2b0>)
 8009a76:	430a      	orrs	r2, r1
 8009a78:	b292      	uxth	r2, r2
 8009a7a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	7b1b      	ldrb	r3, [r3, #12]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d000      	beq.n	8009a86 <USB_ActivateEndpoint+0xee>
 8009a84:	e177      	b.n	8009d76 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	785b      	ldrb	r3, [r3, #1]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d100      	bne.n	8009a90 <USB_ActivateEndpoint+0xf8>
 8009a8e:	e07a      	b.n	8009b86 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	61bb      	str	r3, [r7, #24]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2250      	movs	r2, #80	@ 0x50
 8009a98:	5a9b      	ldrh	r3, [r3, r2]
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	001a      	movs	r2, r3
 8009a9e:	69bb      	ldr	r3, [r7, #24]
 8009aa0:	189b      	adds	r3, r3, r2
 8009aa2:	61bb      	str	r3, [r7, #24]
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	00da      	lsls	r2, r3, #3
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	18d3      	adds	r3, r2, r3
 8009aae:	2280      	movs	r2, #128	@ 0x80
 8009ab0:	00d2      	lsls	r2, r2, #3
 8009ab2:	4694      	mov	ip, r2
 8009ab4:	4463      	add	r3, ip
 8009ab6:	617b      	str	r3, [r7, #20]
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	88db      	ldrh	r3, [r3, #6]
 8009abc:	085b      	lsrs	r3, r3, #1
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	18db      	adds	r3, r3, r3
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	18d2      	adds	r2, r2, r3
 8009ad2:	2112      	movs	r1, #18
 8009ad4:	187b      	adds	r3, r7, r1
 8009ad6:	8812      	ldrh	r2, [r2, #0]
 8009ad8:	801a      	strh	r2, [r3, #0]
 8009ada:	187b      	adds	r3, r7, r1
 8009adc:	881b      	ldrh	r3, [r3, #0]
 8009ade:	2240      	movs	r2, #64	@ 0x40
 8009ae0:	4013      	ands	r3, r2
 8009ae2:	d016      	beq.n	8009b12 <USB_ActivateEndpoint+0x17a>
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	18d3      	adds	r3, r2, r3
 8009aee:	881b      	ldrh	r3, [r3, #0]
 8009af0:	b29a      	uxth	r2, r3
 8009af2:	2010      	movs	r0, #16
 8009af4:	183b      	adds	r3, r7, r0
 8009af6:	4955      	ldr	r1, [pc, #340]	@ (8009c4c <USB_ActivateEndpoint+0x2b4>)
 8009af8:	400a      	ands	r2, r1
 8009afa:	801a      	strh	r2, [r3, #0]
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	18d3      	adds	r3, r2, r3
 8009b06:	183a      	adds	r2, r7, r0
 8009b08:	8812      	ldrh	r2, [r2, #0]
 8009b0a:	4951      	ldr	r1, [pc, #324]	@ (8009c50 <USB_ActivateEndpoint+0x2b8>)
 8009b0c:	430a      	orrs	r2, r1
 8009b0e:	b292      	uxth	r2, r2
 8009b10:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	78db      	ldrb	r3, [r3, #3]
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d01d      	beq.n	8009b56 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	18d3      	adds	r3, r2, r3
 8009b24:	881b      	ldrh	r3, [r3, #0]
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	200c      	movs	r0, #12
 8009b2a:	183b      	adds	r3, r7, r0
 8009b2c:	4949      	ldr	r1, [pc, #292]	@ (8009c54 <USB_ActivateEndpoint+0x2bc>)
 8009b2e:	400a      	ands	r2, r1
 8009b30:	801a      	strh	r2, [r3, #0]
 8009b32:	183b      	adds	r3, r7, r0
 8009b34:	183a      	adds	r2, r7, r0
 8009b36:	8812      	ldrh	r2, [r2, #0]
 8009b38:	2120      	movs	r1, #32
 8009b3a:	404a      	eors	r2, r1
 8009b3c:	801a      	strh	r2, [r3, #0]
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	18d3      	adds	r3, r2, r3
 8009b48:	183a      	adds	r2, r7, r0
 8009b4a:	8812      	ldrh	r2, [r2, #0]
 8009b4c:	493e      	ldr	r1, [pc, #248]	@ (8009c48 <USB_ActivateEndpoint+0x2b0>)
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	b292      	uxth	r2, r2
 8009b52:	801a      	strh	r2, [r3, #0]
 8009b54:	e2b5      	b.n	800a0c2 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	18d3      	adds	r3, r2, r3
 8009b60:	881b      	ldrh	r3, [r3, #0]
 8009b62:	b29a      	uxth	r2, r3
 8009b64:	200e      	movs	r0, #14
 8009b66:	183b      	adds	r3, r7, r0
 8009b68:	493a      	ldr	r1, [pc, #232]	@ (8009c54 <USB_ActivateEndpoint+0x2bc>)
 8009b6a:	400a      	ands	r2, r1
 8009b6c:	801a      	strh	r2, [r3, #0]
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	18d3      	adds	r3, r2, r3
 8009b78:	183a      	adds	r2, r7, r0
 8009b7a:	8812      	ldrh	r2, [r2, #0]
 8009b7c:	4932      	ldr	r1, [pc, #200]	@ (8009c48 <USB_ActivateEndpoint+0x2b0>)
 8009b7e:	430a      	orrs	r2, r1
 8009b80:	b292      	uxth	r2, r2
 8009b82:	801a      	strh	r2, [r3, #0]
 8009b84:	e29d      	b.n	800a0c2 <USB_ActivateEndpoint+0x72a>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2250      	movs	r2, #80	@ 0x50
 8009b8e:	5a9b      	ldrh	r3, [r3, r2]
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	001a      	movs	r2, r3
 8009b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b96:	189b      	adds	r3, r3, r2
 8009b98:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	00da      	lsls	r2, r3, #3
 8009ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba2:	18d3      	adds	r3, r2, r3
 8009ba4:	4a2c      	ldr	r2, [pc, #176]	@ (8009c58 <USB_ActivateEndpoint+0x2c0>)
 8009ba6:	4694      	mov	ip, r2
 8009ba8:	4463      	add	r3, ip
 8009baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	88db      	ldrh	r3, [r3, #6]
 8009bb0:	085b      	lsrs	r3, r3, #1
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	18db      	adds	r3, r3, r3
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bba:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2250      	movs	r2, #80	@ 0x50
 8009bc4:	5a9b      	ldrh	r3, [r3, r2]
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	001a      	movs	r2, r3
 8009bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bcc:	189b      	adds	r3, r3, r2
 8009bce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	00da      	lsls	r2, r3, #3
 8009bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd8:	18d3      	adds	r3, r2, r3
 8009bda:	4a20      	ldr	r2, [pc, #128]	@ (8009c5c <USB_ActivateEndpoint+0x2c4>)
 8009bdc:	4694      	mov	ip, r2
 8009bde:	4463      	add	r3, ip
 8009be0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be4:	881b      	ldrh	r3, [r3, #0]
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	059b      	lsls	r3, r3, #22
 8009bea:	0d9b      	lsrs	r3, r3, #22
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf0:	801a      	strh	r2, [r3, #0]
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d108      	bne.n	8009c0c <USB_ActivateEndpoint+0x274>
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfc:	881b      	ldrh	r3, [r3, #0]
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	4a17      	ldr	r2, [pc, #92]	@ (8009c60 <USB_ActivateEndpoint+0x2c8>)
 8009c02:	4313      	orrs	r3, r2
 8009c04:	b29a      	uxth	r2, r3
 8009c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c08:	801a      	strh	r2, [r3, #0]
 8009c0a:	e045      	b.n	8009c98 <USB_ActivateEndpoint+0x300>
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	691b      	ldr	r3, [r3, #16]
 8009c10:	2b3e      	cmp	r3, #62	@ 0x3e
 8009c12:	d827      	bhi.n	8009c64 <USB_ActivateEndpoint+0x2cc>
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	085b      	lsrs	r3, r3, #1
 8009c1a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	2201      	movs	r2, #1
 8009c22:	4013      	ands	r3, r2
 8009c24:	d002      	beq.n	8009c2c <USB_ActivateEndpoint+0x294>
 8009c26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c28:	3301      	adds	r3, #1
 8009c2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c2e:	881b      	ldrh	r3, [r3, #0]
 8009c30:	b29a      	uxth	r2, r3
 8009c32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	029b      	lsls	r3, r3, #10
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	b29a      	uxth	r2, r3
 8009c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c40:	801a      	strh	r2, [r3, #0]
 8009c42:	e029      	b.n	8009c98 <USB_ActivateEndpoint+0x300>
 8009c44:	ffff898f 	.word	0xffff898f
 8009c48:	ffff8080 	.word	0xffff8080
 8009c4c:	ffff8f8f 	.word	0xffff8f8f
 8009c50:	ffff80c0 	.word	0xffff80c0
 8009c54:	ffff8fbf 	.word	0xffff8fbf
 8009c58:	00000404 	.word	0x00000404
 8009c5c:	00000406 	.word	0x00000406
 8009c60:	ffff8000 	.word	0xffff8000
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	691b      	ldr	r3, [r3, #16]
 8009c68:	095b      	lsrs	r3, r3, #5
 8009c6a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	691b      	ldr	r3, [r3, #16]
 8009c70:	221f      	movs	r2, #31
 8009c72:	4013      	ands	r3, r2
 8009c74:	d102      	bne.n	8009c7c <USB_ActivateEndpoint+0x2e4>
 8009c76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c7e:	881b      	ldrh	r3, [r3, #0]
 8009c80:	b29a      	uxth	r2, r3
 8009c82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	029b      	lsls	r3, r3, #10
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	4ab5      	ldr	r2, [pc, #724]	@ (8009f64 <USB_ActivateEndpoint+0x5cc>)
 8009c90:	4313      	orrs	r3, r2
 8009c92:	b29a      	uxth	r2, r3
 8009c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c96:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	18d2      	adds	r2, r2, r3
 8009ca2:	2122      	movs	r1, #34	@ 0x22
 8009ca4:	187b      	adds	r3, r7, r1
 8009ca6:	8812      	ldrh	r2, [r2, #0]
 8009ca8:	801a      	strh	r2, [r3, #0]
 8009caa:	187b      	adds	r3, r7, r1
 8009cac:	881a      	ldrh	r2, [r3, #0]
 8009cae:	2380      	movs	r3, #128	@ 0x80
 8009cb0:	01db      	lsls	r3, r3, #7
 8009cb2:	4013      	ands	r3, r2
 8009cb4:	d016      	beq.n	8009ce4 <USB_ActivateEndpoint+0x34c>
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	18d3      	adds	r3, r2, r3
 8009cc0:	881b      	ldrh	r3, [r3, #0]
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	2020      	movs	r0, #32
 8009cc6:	183b      	adds	r3, r7, r0
 8009cc8:	49a7      	ldr	r1, [pc, #668]	@ (8009f68 <USB_ActivateEndpoint+0x5d0>)
 8009cca:	400a      	ands	r2, r1
 8009ccc:	801a      	strh	r2, [r3, #0]
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	18d3      	adds	r3, r2, r3
 8009cd8:	183a      	adds	r2, r7, r0
 8009cda:	8812      	ldrh	r2, [r2, #0]
 8009cdc:	49a3      	ldr	r1, [pc, #652]	@ (8009f6c <USB_ActivateEndpoint+0x5d4>)
 8009cde:	430a      	orrs	r2, r1
 8009ce0:	b292      	uxth	r2, r2
 8009ce2:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d125      	bne.n	8009d38 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	18d3      	adds	r3, r2, r3
 8009cf6:	881b      	ldrh	r3, [r3, #0]
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	201c      	movs	r0, #28
 8009cfc:	183b      	adds	r3, r7, r0
 8009cfe:	499c      	ldr	r1, [pc, #624]	@ (8009f70 <USB_ActivateEndpoint+0x5d8>)
 8009d00:	400a      	ands	r2, r1
 8009d02:	801a      	strh	r2, [r3, #0]
 8009d04:	183b      	adds	r3, r7, r0
 8009d06:	183a      	adds	r2, r7, r0
 8009d08:	8812      	ldrh	r2, [r2, #0]
 8009d0a:	2180      	movs	r1, #128	@ 0x80
 8009d0c:	0149      	lsls	r1, r1, #5
 8009d0e:	404a      	eors	r2, r1
 8009d10:	801a      	strh	r2, [r3, #0]
 8009d12:	183b      	adds	r3, r7, r0
 8009d14:	183a      	adds	r2, r7, r0
 8009d16:	8812      	ldrh	r2, [r2, #0]
 8009d18:	2180      	movs	r1, #128	@ 0x80
 8009d1a:	0189      	lsls	r1, r1, #6
 8009d1c:	404a      	eors	r2, r1
 8009d1e:	801a      	strh	r2, [r3, #0]
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	18d3      	adds	r3, r2, r3
 8009d2a:	183a      	adds	r2, r7, r0
 8009d2c:	8812      	ldrh	r2, [r2, #0]
 8009d2e:	4991      	ldr	r1, [pc, #580]	@ (8009f74 <USB_ActivateEndpoint+0x5dc>)
 8009d30:	430a      	orrs	r2, r1
 8009d32:	b292      	uxth	r2, r2
 8009d34:	801a      	strh	r2, [r3, #0]
 8009d36:	e1c4      	b.n	800a0c2 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	18d3      	adds	r3, r2, r3
 8009d42:	881b      	ldrh	r3, [r3, #0]
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	201e      	movs	r0, #30
 8009d48:	183b      	adds	r3, r7, r0
 8009d4a:	4989      	ldr	r1, [pc, #548]	@ (8009f70 <USB_ActivateEndpoint+0x5d8>)
 8009d4c:	400a      	ands	r2, r1
 8009d4e:	801a      	strh	r2, [r3, #0]
 8009d50:	183b      	adds	r3, r7, r0
 8009d52:	183a      	adds	r2, r7, r0
 8009d54:	8812      	ldrh	r2, [r2, #0]
 8009d56:	2180      	movs	r1, #128	@ 0x80
 8009d58:	0189      	lsls	r1, r1, #6
 8009d5a:	404a      	eors	r2, r1
 8009d5c:	801a      	strh	r2, [r3, #0]
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	18d3      	adds	r3, r2, r3
 8009d68:	183a      	adds	r2, r7, r0
 8009d6a:	8812      	ldrh	r2, [r2, #0]
 8009d6c:	4981      	ldr	r1, [pc, #516]	@ (8009f74 <USB_ActivateEndpoint+0x5dc>)
 8009d6e:	430a      	orrs	r2, r1
 8009d70:	b292      	uxth	r2, r2
 8009d72:	801a      	strh	r2, [r3, #0]
 8009d74:	e1a5      	b.n	800a0c2 <USB_ActivateEndpoint+0x72a>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	78db      	ldrb	r3, [r3, #3]
 8009d7a:	2b02      	cmp	r3, #2
 8009d7c:	d117      	bne.n	8009dae <USB_ActivateEndpoint+0x416>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	18d3      	adds	r3, r2, r3
 8009d88:	881b      	ldrh	r3, [r3, #0]
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	2062      	movs	r0, #98	@ 0x62
 8009d8e:	183b      	adds	r3, r7, r0
 8009d90:	4975      	ldr	r1, [pc, #468]	@ (8009f68 <USB_ActivateEndpoint+0x5d0>)
 8009d92:	400a      	ands	r2, r1
 8009d94:	801a      	strh	r2, [r3, #0]
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	18d3      	adds	r3, r2, r3
 8009da0:	183a      	adds	r2, r7, r0
 8009da2:	8812      	ldrh	r2, [r2, #0]
 8009da4:	4974      	ldr	r1, [pc, #464]	@ (8009f78 <USB_ActivateEndpoint+0x5e0>)
 8009da6:	430a      	orrs	r2, r1
 8009da8:	b292      	uxth	r2, r2
 8009daa:	801a      	strh	r2, [r3, #0]
 8009dac:	e016      	b.n	8009ddc <USB_ActivateEndpoint+0x444>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	18d3      	adds	r3, r2, r3
 8009db8:	881b      	ldrh	r3, [r3, #0]
 8009dba:	b29a      	uxth	r2, r3
 8009dbc:	2064      	movs	r0, #100	@ 0x64
 8009dbe:	183b      	adds	r3, r7, r0
 8009dc0:	496e      	ldr	r1, [pc, #440]	@ (8009f7c <USB_ActivateEndpoint+0x5e4>)
 8009dc2:	400a      	ands	r2, r1
 8009dc4:	801a      	strh	r2, [r3, #0]
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	18d3      	adds	r3, r2, r3
 8009dd0:	183a      	adds	r2, r7, r0
 8009dd2:	8812      	ldrh	r2, [r2, #0]
 8009dd4:	4967      	ldr	r1, [pc, #412]	@ (8009f74 <USB_ActivateEndpoint+0x5dc>)
 8009dd6:	430a      	orrs	r2, r1
 8009dd8:	b292      	uxth	r2, r2
 8009dda:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2250      	movs	r2, #80	@ 0x50
 8009de4:	5a9b      	ldrh	r3, [r3, r2]
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	001a      	movs	r2, r3
 8009dea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009dec:	189b      	adds	r3, r3, r2
 8009dee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	00da      	lsls	r2, r3, #3
 8009df6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009df8:	18d3      	adds	r3, r2, r3
 8009dfa:	2280      	movs	r2, #128	@ 0x80
 8009dfc:	00d2      	lsls	r2, r2, #3
 8009dfe:	4694      	mov	ip, r2
 8009e00:	4463      	add	r3, ip
 8009e02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	891b      	ldrh	r3, [r3, #8]
 8009e08:	085b      	lsrs	r3, r3, #1
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	18db      	adds	r3, r3, r3
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e12:	801a      	strh	r2, [r3, #0]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2250      	movs	r2, #80	@ 0x50
 8009e1c:	5a9b      	ldrh	r3, [r3, r2]
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	001a      	movs	r2, r3
 8009e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e24:	189b      	adds	r3, r3, r2
 8009e26:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	00da      	lsls	r2, r3, #3
 8009e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e30:	18d3      	adds	r3, r2, r3
 8009e32:	4a53      	ldr	r2, [pc, #332]	@ (8009f80 <USB_ActivateEndpoint+0x5e8>)
 8009e34:	4694      	mov	ip, r2
 8009e36:	4463      	add	r3, ip
 8009e38:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	895b      	ldrh	r3, [r3, #10]
 8009e3e:	085b      	lsrs	r3, r3, #1
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	18db      	adds	r3, r3, r3
 8009e44:	b29a      	uxth	r2, r3
 8009e46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e48:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	785b      	ldrb	r3, [r3, #1]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d000      	beq.n	8009e54 <USB_ActivateEndpoint+0x4bc>
 8009e52:	e09b      	b.n	8009f8c <USB_ActivateEndpoint+0x5f4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	18d2      	adds	r2, r2, r3
 8009e5e:	2140      	movs	r1, #64	@ 0x40
 8009e60:	187b      	adds	r3, r7, r1
 8009e62:	8812      	ldrh	r2, [r2, #0]
 8009e64:	801a      	strh	r2, [r3, #0]
 8009e66:	187b      	adds	r3, r7, r1
 8009e68:	881a      	ldrh	r2, [r3, #0]
 8009e6a:	2380      	movs	r3, #128	@ 0x80
 8009e6c:	01db      	lsls	r3, r3, #7
 8009e6e:	4013      	ands	r3, r2
 8009e70:	d016      	beq.n	8009ea0 <USB_ActivateEndpoint+0x508>
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	18d3      	adds	r3, r2, r3
 8009e7c:	881b      	ldrh	r3, [r3, #0]
 8009e7e:	b29a      	uxth	r2, r3
 8009e80:	203e      	movs	r0, #62	@ 0x3e
 8009e82:	183b      	adds	r3, r7, r0
 8009e84:	4938      	ldr	r1, [pc, #224]	@ (8009f68 <USB_ActivateEndpoint+0x5d0>)
 8009e86:	400a      	ands	r2, r1
 8009e88:	801a      	strh	r2, [r3, #0]
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	18d3      	adds	r3, r2, r3
 8009e94:	183a      	adds	r2, r7, r0
 8009e96:	8812      	ldrh	r2, [r2, #0]
 8009e98:	4934      	ldr	r1, [pc, #208]	@ (8009f6c <USB_ActivateEndpoint+0x5d4>)
 8009e9a:	430a      	orrs	r2, r1
 8009e9c:	b292      	uxth	r2, r2
 8009e9e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	18d2      	adds	r2, r2, r3
 8009eaa:	213c      	movs	r1, #60	@ 0x3c
 8009eac:	187b      	adds	r3, r7, r1
 8009eae:	8812      	ldrh	r2, [r2, #0]
 8009eb0:	801a      	strh	r2, [r3, #0]
 8009eb2:	187b      	adds	r3, r7, r1
 8009eb4:	881b      	ldrh	r3, [r3, #0]
 8009eb6:	2240      	movs	r2, #64	@ 0x40
 8009eb8:	4013      	ands	r3, r2
 8009eba:	d016      	beq.n	8009eea <USB_ActivateEndpoint+0x552>
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	18d3      	adds	r3, r2, r3
 8009ec6:	881b      	ldrh	r3, [r3, #0]
 8009ec8:	b29a      	uxth	r2, r3
 8009eca:	203a      	movs	r0, #58	@ 0x3a
 8009ecc:	183b      	adds	r3, r7, r0
 8009ece:	4926      	ldr	r1, [pc, #152]	@ (8009f68 <USB_ActivateEndpoint+0x5d0>)
 8009ed0:	400a      	ands	r2, r1
 8009ed2:	801a      	strh	r2, [r3, #0]
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	18d3      	adds	r3, r2, r3
 8009ede:	183a      	adds	r2, r7, r0
 8009ee0:	8812      	ldrh	r2, [r2, #0]
 8009ee2:	4928      	ldr	r1, [pc, #160]	@ (8009f84 <USB_ActivateEndpoint+0x5ec>)
 8009ee4:	430a      	orrs	r2, r1
 8009ee6:	b292      	uxth	r2, r2
 8009ee8:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	18d3      	adds	r3, r2, r3
 8009ef4:	881b      	ldrh	r3, [r3, #0]
 8009ef6:	b29a      	uxth	r2, r3
 8009ef8:	2038      	movs	r0, #56	@ 0x38
 8009efa:	183b      	adds	r3, r7, r0
 8009efc:	491c      	ldr	r1, [pc, #112]	@ (8009f70 <USB_ActivateEndpoint+0x5d8>)
 8009efe:	400a      	ands	r2, r1
 8009f00:	801a      	strh	r2, [r3, #0]
 8009f02:	183b      	adds	r3, r7, r0
 8009f04:	183a      	adds	r2, r7, r0
 8009f06:	8812      	ldrh	r2, [r2, #0]
 8009f08:	2180      	movs	r1, #128	@ 0x80
 8009f0a:	0149      	lsls	r1, r1, #5
 8009f0c:	404a      	eors	r2, r1
 8009f0e:	801a      	strh	r2, [r3, #0]
 8009f10:	183b      	adds	r3, r7, r0
 8009f12:	183a      	adds	r2, r7, r0
 8009f14:	8812      	ldrh	r2, [r2, #0]
 8009f16:	2180      	movs	r1, #128	@ 0x80
 8009f18:	0189      	lsls	r1, r1, #6
 8009f1a:	404a      	eors	r2, r1
 8009f1c:	801a      	strh	r2, [r3, #0]
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	18d3      	adds	r3, r2, r3
 8009f28:	183a      	adds	r2, r7, r0
 8009f2a:	8812      	ldrh	r2, [r2, #0]
 8009f2c:	4911      	ldr	r1, [pc, #68]	@ (8009f74 <USB_ActivateEndpoint+0x5dc>)
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	b292      	uxth	r2, r2
 8009f32:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	18d3      	adds	r3, r2, r3
 8009f3e:	881b      	ldrh	r3, [r3, #0]
 8009f40:	b29a      	uxth	r2, r3
 8009f42:	2036      	movs	r0, #54	@ 0x36
 8009f44:	183b      	adds	r3, r7, r0
 8009f46:	4910      	ldr	r1, [pc, #64]	@ (8009f88 <USB_ActivateEndpoint+0x5f0>)
 8009f48:	400a      	ands	r2, r1
 8009f4a:	801a      	strh	r2, [r3, #0]
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	18d3      	adds	r3, r2, r3
 8009f56:	183a      	adds	r2, r7, r0
 8009f58:	8812      	ldrh	r2, [r2, #0]
 8009f5a:	4906      	ldr	r1, [pc, #24]	@ (8009f74 <USB_ActivateEndpoint+0x5dc>)
 8009f5c:	430a      	orrs	r2, r1
 8009f5e:	b292      	uxth	r2, r2
 8009f60:	801a      	strh	r2, [r3, #0]
 8009f62:	e0ae      	b.n	800a0c2 <USB_ActivateEndpoint+0x72a>
 8009f64:	ffff8000 	.word	0xffff8000
 8009f68:	ffff8f8f 	.word	0xffff8f8f
 8009f6c:	ffffc080 	.word	0xffffc080
 8009f70:	ffffbf8f 	.word	0xffffbf8f
 8009f74:	ffff8080 	.word	0xffff8080
 8009f78:	ffff8180 	.word	0xffff8180
 8009f7c:	ffff8e8f 	.word	0xffff8e8f
 8009f80:	00000404 	.word	0x00000404
 8009f84:	ffff80c0 	.word	0xffff80c0
 8009f88:	ffff8fbf 	.word	0xffff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	18d2      	adds	r2, r2, r3
 8009f96:	214e      	movs	r1, #78	@ 0x4e
 8009f98:	187b      	adds	r3, r7, r1
 8009f9a:	8812      	ldrh	r2, [r2, #0]
 8009f9c:	801a      	strh	r2, [r3, #0]
 8009f9e:	187b      	adds	r3, r7, r1
 8009fa0:	881a      	ldrh	r2, [r3, #0]
 8009fa2:	2380      	movs	r3, #128	@ 0x80
 8009fa4:	01db      	lsls	r3, r3, #7
 8009fa6:	4013      	ands	r3, r2
 8009fa8:	d016      	beq.n	8009fd8 <USB_ActivateEndpoint+0x640>
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	18d3      	adds	r3, r2, r3
 8009fb4:	881b      	ldrh	r3, [r3, #0]
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	204c      	movs	r0, #76	@ 0x4c
 8009fba:	183b      	adds	r3, r7, r0
 8009fbc:	4944      	ldr	r1, [pc, #272]	@ (800a0d0 <USB_ActivateEndpoint+0x738>)
 8009fbe:	400a      	ands	r2, r1
 8009fc0:	801a      	strh	r2, [r3, #0]
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	18d3      	adds	r3, r2, r3
 8009fcc:	183a      	adds	r2, r7, r0
 8009fce:	8812      	ldrh	r2, [r2, #0]
 8009fd0:	4940      	ldr	r1, [pc, #256]	@ (800a0d4 <USB_ActivateEndpoint+0x73c>)
 8009fd2:	430a      	orrs	r2, r1
 8009fd4:	b292      	uxth	r2, r2
 8009fd6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	18d2      	adds	r2, r2, r3
 8009fe2:	214a      	movs	r1, #74	@ 0x4a
 8009fe4:	187b      	adds	r3, r7, r1
 8009fe6:	8812      	ldrh	r2, [r2, #0]
 8009fe8:	801a      	strh	r2, [r3, #0]
 8009fea:	187b      	adds	r3, r7, r1
 8009fec:	881b      	ldrh	r3, [r3, #0]
 8009fee:	2240      	movs	r2, #64	@ 0x40
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	d016      	beq.n	800a022 <USB_ActivateEndpoint+0x68a>
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	18d3      	adds	r3, r2, r3
 8009ffe:	881b      	ldrh	r3, [r3, #0]
 800a000:	b29a      	uxth	r2, r3
 800a002:	2048      	movs	r0, #72	@ 0x48
 800a004:	183b      	adds	r3, r7, r0
 800a006:	4932      	ldr	r1, [pc, #200]	@ (800a0d0 <USB_ActivateEndpoint+0x738>)
 800a008:	400a      	ands	r2, r1
 800a00a:	801a      	strh	r2, [r3, #0]
 800a00c:	687a      	ldr	r2, [r7, #4]
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	18d3      	adds	r3, r2, r3
 800a016:	183a      	adds	r2, r7, r0
 800a018:	8812      	ldrh	r2, [r2, #0]
 800a01a:	492f      	ldr	r1, [pc, #188]	@ (800a0d8 <USB_ActivateEndpoint+0x740>)
 800a01c:	430a      	orrs	r2, r1
 800a01e:	b292      	uxth	r2, r2
 800a020:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	78db      	ldrb	r3, [r3, #3]
 800a026:	2b01      	cmp	r3, #1
 800a028:	d01d      	beq.n	800a066 <USB_ActivateEndpoint+0x6ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	18d3      	adds	r3, r2, r3
 800a034:	881b      	ldrh	r3, [r3, #0]
 800a036:	b29a      	uxth	r2, r3
 800a038:	2044      	movs	r0, #68	@ 0x44
 800a03a:	183b      	adds	r3, r7, r0
 800a03c:	4927      	ldr	r1, [pc, #156]	@ (800a0dc <USB_ActivateEndpoint+0x744>)
 800a03e:	400a      	ands	r2, r1
 800a040:	801a      	strh	r2, [r3, #0]
 800a042:	183b      	adds	r3, r7, r0
 800a044:	183a      	adds	r2, r7, r0
 800a046:	8812      	ldrh	r2, [r2, #0]
 800a048:	2120      	movs	r1, #32
 800a04a:	404a      	eors	r2, r1
 800a04c:	801a      	strh	r2, [r3, #0]
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	18d3      	adds	r3, r2, r3
 800a058:	183a      	adds	r2, r7, r0
 800a05a:	8812      	ldrh	r2, [r2, #0]
 800a05c:	4920      	ldr	r1, [pc, #128]	@ (800a0e0 <USB_ActivateEndpoint+0x748>)
 800a05e:	430a      	orrs	r2, r1
 800a060:	b292      	uxth	r2, r2
 800a062:	801a      	strh	r2, [r3, #0]
 800a064:	e016      	b.n	800a094 <USB_ActivateEndpoint+0x6fc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	009b      	lsls	r3, r3, #2
 800a06e:	18d3      	adds	r3, r2, r3
 800a070:	881b      	ldrh	r3, [r3, #0]
 800a072:	b29a      	uxth	r2, r3
 800a074:	2046      	movs	r0, #70	@ 0x46
 800a076:	183b      	adds	r3, r7, r0
 800a078:	4918      	ldr	r1, [pc, #96]	@ (800a0dc <USB_ActivateEndpoint+0x744>)
 800a07a:	400a      	ands	r2, r1
 800a07c:	801a      	strh	r2, [r3, #0]
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	18d3      	adds	r3, r2, r3
 800a088:	183a      	adds	r2, r7, r0
 800a08a:	8812      	ldrh	r2, [r2, #0]
 800a08c:	4914      	ldr	r1, [pc, #80]	@ (800a0e0 <USB_ActivateEndpoint+0x748>)
 800a08e:	430a      	orrs	r2, r1
 800a090:	b292      	uxth	r2, r2
 800a092:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	18d3      	adds	r3, r2, r3
 800a09e:	881b      	ldrh	r3, [r3, #0]
 800a0a0:	b29a      	uxth	r2, r3
 800a0a2:	2042      	movs	r0, #66	@ 0x42
 800a0a4:	183b      	adds	r3, r7, r0
 800a0a6:	490f      	ldr	r1, [pc, #60]	@ (800a0e4 <USB_ActivateEndpoint+0x74c>)
 800a0a8:	400a      	ands	r2, r1
 800a0aa:	801a      	strh	r2, [r3, #0]
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	18d3      	adds	r3, r2, r3
 800a0b6:	183a      	adds	r2, r7, r0
 800a0b8:	8812      	ldrh	r2, [r2, #0]
 800a0ba:	4909      	ldr	r1, [pc, #36]	@ (800a0e0 <USB_ActivateEndpoint+0x748>)
 800a0bc:	430a      	orrs	r2, r1
 800a0be:	b292      	uxth	r2, r2
 800a0c0:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a0c2:	236f      	movs	r3, #111	@ 0x6f
 800a0c4:	18fb      	adds	r3, r7, r3
 800a0c6:	781b      	ldrb	r3, [r3, #0]
}
 800a0c8:	0018      	movs	r0, r3
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	b01c      	add	sp, #112	@ 0x70
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	ffff8f8f 	.word	0xffff8f8f
 800a0d4:	ffffc080 	.word	0xffffc080
 800a0d8:	ffff80c0 	.word	0xffff80c0
 800a0dc:	ffff8fbf 	.word	0xffff8fbf
 800a0e0:	ffff8080 	.word	0xffff8080
 800a0e4:	ffffbf8f 	.word	0xffffbf8f

0800a0e8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b08c      	sub	sp, #48	@ 0x30
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	7b1b      	ldrb	r3, [r3, #12]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d000      	beq.n	800a0fc <USB_DeactivateEndpoint+0x14>
 800a0fa:	e07e      	b.n	800a1fa <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	785b      	ldrb	r3, [r3, #1]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d03c      	beq.n	800a17e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	18d2      	adds	r2, r2, r3
 800a10e:	210c      	movs	r1, #12
 800a110:	187b      	adds	r3, r7, r1
 800a112:	8812      	ldrh	r2, [r2, #0]
 800a114:	801a      	strh	r2, [r3, #0]
 800a116:	187b      	adds	r3, r7, r1
 800a118:	881b      	ldrh	r3, [r3, #0]
 800a11a:	2240      	movs	r2, #64	@ 0x40
 800a11c:	4013      	ands	r3, r2
 800a11e:	d016      	beq.n	800a14e <USB_DeactivateEndpoint+0x66>
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	18d3      	adds	r3, r2, r3
 800a12a:	881b      	ldrh	r3, [r3, #0]
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	200a      	movs	r0, #10
 800a130:	183b      	adds	r3, r7, r0
 800a132:	49c7      	ldr	r1, [pc, #796]	@ (800a450 <USB_DeactivateEndpoint+0x368>)
 800a134:	400a      	ands	r2, r1
 800a136:	801a      	strh	r2, [r3, #0]
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	18d3      	adds	r3, r2, r3
 800a142:	183a      	adds	r2, r7, r0
 800a144:	8812      	ldrh	r2, [r2, #0]
 800a146:	49c3      	ldr	r1, [pc, #780]	@ (800a454 <USB_DeactivateEndpoint+0x36c>)
 800a148:	430a      	orrs	r2, r1
 800a14a:	b292      	uxth	r2, r2
 800a14c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	18d3      	adds	r3, r2, r3
 800a158:	881b      	ldrh	r3, [r3, #0]
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	2008      	movs	r0, #8
 800a15e:	183b      	adds	r3, r7, r0
 800a160:	49bd      	ldr	r1, [pc, #756]	@ (800a458 <USB_DeactivateEndpoint+0x370>)
 800a162:	400a      	ands	r2, r1
 800a164:	801a      	strh	r2, [r3, #0]
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	18d3      	adds	r3, r2, r3
 800a170:	183a      	adds	r2, r7, r0
 800a172:	8812      	ldrh	r2, [r2, #0]
 800a174:	49b9      	ldr	r1, [pc, #740]	@ (800a45c <USB_DeactivateEndpoint+0x374>)
 800a176:	430a      	orrs	r2, r1
 800a178:	b292      	uxth	r2, r2
 800a17a:	801a      	strh	r2, [r3, #0]
 800a17c:	e163      	b.n	800a446 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	18d2      	adds	r2, r2, r3
 800a188:	2112      	movs	r1, #18
 800a18a:	187b      	adds	r3, r7, r1
 800a18c:	8812      	ldrh	r2, [r2, #0]
 800a18e:	801a      	strh	r2, [r3, #0]
 800a190:	187b      	adds	r3, r7, r1
 800a192:	881a      	ldrh	r2, [r3, #0]
 800a194:	2380      	movs	r3, #128	@ 0x80
 800a196:	01db      	lsls	r3, r3, #7
 800a198:	4013      	ands	r3, r2
 800a19a:	d016      	beq.n	800a1ca <USB_DeactivateEndpoint+0xe2>
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	18d3      	adds	r3, r2, r3
 800a1a6:	881b      	ldrh	r3, [r3, #0]
 800a1a8:	b29a      	uxth	r2, r3
 800a1aa:	2010      	movs	r0, #16
 800a1ac:	183b      	adds	r3, r7, r0
 800a1ae:	49a8      	ldr	r1, [pc, #672]	@ (800a450 <USB_DeactivateEndpoint+0x368>)
 800a1b0:	400a      	ands	r2, r1
 800a1b2:	801a      	strh	r2, [r3, #0]
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	18d3      	adds	r3, r2, r3
 800a1be:	183a      	adds	r2, r7, r0
 800a1c0:	8812      	ldrh	r2, [r2, #0]
 800a1c2:	49a7      	ldr	r1, [pc, #668]	@ (800a460 <USB_DeactivateEndpoint+0x378>)
 800a1c4:	430a      	orrs	r2, r1
 800a1c6:	b292      	uxth	r2, r2
 800a1c8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	18d3      	adds	r3, r2, r3
 800a1d4:	881b      	ldrh	r3, [r3, #0]
 800a1d6:	b29a      	uxth	r2, r3
 800a1d8:	200e      	movs	r0, #14
 800a1da:	183b      	adds	r3, r7, r0
 800a1dc:	49a1      	ldr	r1, [pc, #644]	@ (800a464 <USB_DeactivateEndpoint+0x37c>)
 800a1de:	400a      	ands	r2, r1
 800a1e0:	801a      	strh	r2, [r3, #0]
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	18d3      	adds	r3, r2, r3
 800a1ec:	183a      	adds	r2, r7, r0
 800a1ee:	8812      	ldrh	r2, [r2, #0]
 800a1f0:	499a      	ldr	r1, [pc, #616]	@ (800a45c <USB_DeactivateEndpoint+0x374>)
 800a1f2:	430a      	orrs	r2, r1
 800a1f4:	b292      	uxth	r2, r2
 800a1f6:	801a      	strh	r2, [r3, #0]
 800a1f8:	e125      	b.n	800a446 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	785b      	ldrb	r3, [r3, #1]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d000      	beq.n	800a204 <USB_DeactivateEndpoint+0x11c>
 800a202:	e090      	b.n	800a326 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	18d2      	adds	r2, r2, r3
 800a20e:	2120      	movs	r1, #32
 800a210:	187b      	adds	r3, r7, r1
 800a212:	8812      	ldrh	r2, [r2, #0]
 800a214:	801a      	strh	r2, [r3, #0]
 800a216:	187b      	adds	r3, r7, r1
 800a218:	881a      	ldrh	r2, [r3, #0]
 800a21a:	2380      	movs	r3, #128	@ 0x80
 800a21c:	01db      	lsls	r3, r3, #7
 800a21e:	4013      	ands	r3, r2
 800a220:	d016      	beq.n	800a250 <USB_DeactivateEndpoint+0x168>
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	18d3      	adds	r3, r2, r3
 800a22c:	881b      	ldrh	r3, [r3, #0]
 800a22e:	b29a      	uxth	r2, r3
 800a230:	201e      	movs	r0, #30
 800a232:	183b      	adds	r3, r7, r0
 800a234:	4986      	ldr	r1, [pc, #536]	@ (800a450 <USB_DeactivateEndpoint+0x368>)
 800a236:	400a      	ands	r2, r1
 800a238:	801a      	strh	r2, [r3, #0]
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	18d3      	adds	r3, r2, r3
 800a244:	183a      	adds	r2, r7, r0
 800a246:	8812      	ldrh	r2, [r2, #0]
 800a248:	4985      	ldr	r1, [pc, #532]	@ (800a460 <USB_DeactivateEndpoint+0x378>)
 800a24a:	430a      	orrs	r2, r1
 800a24c:	b292      	uxth	r2, r2
 800a24e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	18d2      	adds	r2, r2, r3
 800a25a:	211c      	movs	r1, #28
 800a25c:	187b      	adds	r3, r7, r1
 800a25e:	8812      	ldrh	r2, [r2, #0]
 800a260:	801a      	strh	r2, [r3, #0]
 800a262:	187b      	adds	r3, r7, r1
 800a264:	881b      	ldrh	r3, [r3, #0]
 800a266:	2240      	movs	r2, #64	@ 0x40
 800a268:	4013      	ands	r3, r2
 800a26a:	d016      	beq.n	800a29a <USB_DeactivateEndpoint+0x1b2>
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	18d3      	adds	r3, r2, r3
 800a276:	881b      	ldrh	r3, [r3, #0]
 800a278:	b29a      	uxth	r2, r3
 800a27a:	201a      	movs	r0, #26
 800a27c:	183b      	adds	r3, r7, r0
 800a27e:	4974      	ldr	r1, [pc, #464]	@ (800a450 <USB_DeactivateEndpoint+0x368>)
 800a280:	400a      	ands	r2, r1
 800a282:	801a      	strh	r2, [r3, #0]
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	18d3      	adds	r3, r2, r3
 800a28e:	183a      	adds	r2, r7, r0
 800a290:	8812      	ldrh	r2, [r2, #0]
 800a292:	4970      	ldr	r1, [pc, #448]	@ (800a454 <USB_DeactivateEndpoint+0x36c>)
 800a294:	430a      	orrs	r2, r1
 800a296:	b292      	uxth	r2, r2
 800a298:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	18d3      	adds	r3, r2, r3
 800a2a4:	881b      	ldrh	r3, [r3, #0]
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	2018      	movs	r0, #24
 800a2aa:	183b      	adds	r3, r7, r0
 800a2ac:	4968      	ldr	r1, [pc, #416]	@ (800a450 <USB_DeactivateEndpoint+0x368>)
 800a2ae:	400a      	ands	r2, r1
 800a2b0:	801a      	strh	r2, [r3, #0]
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	18d3      	adds	r3, r2, r3
 800a2bc:	183a      	adds	r2, r7, r0
 800a2be:	8812      	ldrh	r2, [r2, #0]
 800a2c0:	4964      	ldr	r1, [pc, #400]	@ (800a454 <USB_DeactivateEndpoint+0x36c>)
 800a2c2:	430a      	orrs	r2, r1
 800a2c4:	b292      	uxth	r2, r2
 800a2c6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	18d3      	adds	r3, r2, r3
 800a2d2:	881b      	ldrh	r3, [r3, #0]
 800a2d4:	b29a      	uxth	r2, r3
 800a2d6:	2016      	movs	r0, #22
 800a2d8:	183b      	adds	r3, r7, r0
 800a2da:	4962      	ldr	r1, [pc, #392]	@ (800a464 <USB_DeactivateEndpoint+0x37c>)
 800a2dc:	400a      	ands	r2, r1
 800a2de:	801a      	strh	r2, [r3, #0]
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	18d3      	adds	r3, r2, r3
 800a2ea:	183a      	adds	r2, r7, r0
 800a2ec:	8812      	ldrh	r2, [r2, #0]
 800a2ee:	495b      	ldr	r1, [pc, #364]	@ (800a45c <USB_DeactivateEndpoint+0x374>)
 800a2f0:	430a      	orrs	r2, r1
 800a2f2:	b292      	uxth	r2, r2
 800a2f4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	18d3      	adds	r3, r2, r3
 800a300:	881b      	ldrh	r3, [r3, #0]
 800a302:	b29a      	uxth	r2, r3
 800a304:	2014      	movs	r0, #20
 800a306:	183b      	adds	r3, r7, r0
 800a308:	4953      	ldr	r1, [pc, #332]	@ (800a458 <USB_DeactivateEndpoint+0x370>)
 800a30a:	400a      	ands	r2, r1
 800a30c:	801a      	strh	r2, [r3, #0]
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	18d3      	adds	r3, r2, r3
 800a318:	183a      	adds	r2, r7, r0
 800a31a:	8812      	ldrh	r2, [r2, #0]
 800a31c:	494f      	ldr	r1, [pc, #316]	@ (800a45c <USB_DeactivateEndpoint+0x374>)
 800a31e:	430a      	orrs	r2, r1
 800a320:	b292      	uxth	r2, r2
 800a322:	801a      	strh	r2, [r3, #0]
 800a324:	e08f      	b.n	800a446 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	18d2      	adds	r2, r2, r3
 800a330:	212e      	movs	r1, #46	@ 0x2e
 800a332:	187b      	adds	r3, r7, r1
 800a334:	8812      	ldrh	r2, [r2, #0]
 800a336:	801a      	strh	r2, [r3, #0]
 800a338:	187b      	adds	r3, r7, r1
 800a33a:	881a      	ldrh	r2, [r3, #0]
 800a33c:	2380      	movs	r3, #128	@ 0x80
 800a33e:	01db      	lsls	r3, r3, #7
 800a340:	4013      	ands	r3, r2
 800a342:	d016      	beq.n	800a372 <USB_DeactivateEndpoint+0x28a>
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	18d3      	adds	r3, r2, r3
 800a34e:	881b      	ldrh	r3, [r3, #0]
 800a350:	b29a      	uxth	r2, r3
 800a352:	202c      	movs	r0, #44	@ 0x2c
 800a354:	183b      	adds	r3, r7, r0
 800a356:	493e      	ldr	r1, [pc, #248]	@ (800a450 <USB_DeactivateEndpoint+0x368>)
 800a358:	400a      	ands	r2, r1
 800a35a:	801a      	strh	r2, [r3, #0]
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	18d3      	adds	r3, r2, r3
 800a366:	183a      	adds	r2, r7, r0
 800a368:	8812      	ldrh	r2, [r2, #0]
 800a36a:	493d      	ldr	r1, [pc, #244]	@ (800a460 <USB_DeactivateEndpoint+0x378>)
 800a36c:	430a      	orrs	r2, r1
 800a36e:	b292      	uxth	r2, r2
 800a370:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	18d2      	adds	r2, r2, r3
 800a37c:	212a      	movs	r1, #42	@ 0x2a
 800a37e:	187b      	adds	r3, r7, r1
 800a380:	8812      	ldrh	r2, [r2, #0]
 800a382:	801a      	strh	r2, [r3, #0]
 800a384:	187b      	adds	r3, r7, r1
 800a386:	881b      	ldrh	r3, [r3, #0]
 800a388:	2240      	movs	r2, #64	@ 0x40
 800a38a:	4013      	ands	r3, r2
 800a38c:	d016      	beq.n	800a3bc <USB_DeactivateEndpoint+0x2d4>
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	18d3      	adds	r3, r2, r3
 800a398:	881b      	ldrh	r3, [r3, #0]
 800a39a:	b29a      	uxth	r2, r3
 800a39c:	2028      	movs	r0, #40	@ 0x28
 800a39e:	183b      	adds	r3, r7, r0
 800a3a0:	492b      	ldr	r1, [pc, #172]	@ (800a450 <USB_DeactivateEndpoint+0x368>)
 800a3a2:	400a      	ands	r2, r1
 800a3a4:	801a      	strh	r2, [r3, #0]
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	18d3      	adds	r3, r2, r3
 800a3b0:	183a      	adds	r2, r7, r0
 800a3b2:	8812      	ldrh	r2, [r2, #0]
 800a3b4:	4927      	ldr	r1, [pc, #156]	@ (800a454 <USB_DeactivateEndpoint+0x36c>)
 800a3b6:	430a      	orrs	r2, r1
 800a3b8:	b292      	uxth	r2, r2
 800a3ba:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	18d3      	adds	r3, r2, r3
 800a3c6:	881b      	ldrh	r3, [r3, #0]
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	2026      	movs	r0, #38	@ 0x26
 800a3cc:	183b      	adds	r3, r7, r0
 800a3ce:	4920      	ldr	r1, [pc, #128]	@ (800a450 <USB_DeactivateEndpoint+0x368>)
 800a3d0:	400a      	ands	r2, r1
 800a3d2:	801a      	strh	r2, [r3, #0]
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	18d3      	adds	r3, r2, r3
 800a3de:	183a      	adds	r2, r7, r0
 800a3e0:	8812      	ldrh	r2, [r2, #0]
 800a3e2:	491f      	ldr	r1, [pc, #124]	@ (800a460 <USB_DeactivateEndpoint+0x378>)
 800a3e4:	430a      	orrs	r2, r1
 800a3e6:	b292      	uxth	r2, r2
 800a3e8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	18d3      	adds	r3, r2, r3
 800a3f4:	881b      	ldrh	r3, [r3, #0]
 800a3f6:	b29a      	uxth	r2, r3
 800a3f8:	2024      	movs	r0, #36	@ 0x24
 800a3fa:	183b      	adds	r3, r7, r0
 800a3fc:	4916      	ldr	r1, [pc, #88]	@ (800a458 <USB_DeactivateEndpoint+0x370>)
 800a3fe:	400a      	ands	r2, r1
 800a400:	801a      	strh	r2, [r3, #0]
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	18d3      	adds	r3, r2, r3
 800a40c:	183a      	adds	r2, r7, r0
 800a40e:	8812      	ldrh	r2, [r2, #0]
 800a410:	4912      	ldr	r1, [pc, #72]	@ (800a45c <USB_DeactivateEndpoint+0x374>)
 800a412:	430a      	orrs	r2, r1
 800a414:	b292      	uxth	r2, r2
 800a416:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	009b      	lsls	r3, r3, #2
 800a420:	18d3      	adds	r3, r2, r3
 800a422:	881b      	ldrh	r3, [r3, #0]
 800a424:	b29a      	uxth	r2, r3
 800a426:	2022      	movs	r0, #34	@ 0x22
 800a428:	183b      	adds	r3, r7, r0
 800a42a:	490e      	ldr	r1, [pc, #56]	@ (800a464 <USB_DeactivateEndpoint+0x37c>)
 800a42c:	400a      	ands	r2, r1
 800a42e:	801a      	strh	r2, [r3, #0]
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	18d3      	adds	r3, r2, r3
 800a43a:	183a      	adds	r2, r7, r0
 800a43c:	8812      	ldrh	r2, [r2, #0]
 800a43e:	4907      	ldr	r1, [pc, #28]	@ (800a45c <USB_DeactivateEndpoint+0x374>)
 800a440:	430a      	orrs	r2, r1
 800a442:	b292      	uxth	r2, r2
 800a444:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	0018      	movs	r0, r3
 800a44a:	46bd      	mov	sp, r7
 800a44c:	b00c      	add	sp, #48	@ 0x30
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	ffff8f8f 	.word	0xffff8f8f
 800a454:	ffff80c0 	.word	0xffff80c0
 800a458:	ffff8fbf 	.word	0xffff8fbf
 800a45c:	ffff8080 	.word	0xffff8080
 800a460:	ffffc080 	.word	0xffffc080
 800a464:	ffffbf8f 	.word	0xffffbf8f

0800a468 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a468:	b590      	push	{r4, r7, lr}
 800a46a:	b0c3      	sub	sp, #268	@ 0x10c
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	785b      	ldrb	r3, [r3, #1]
 800a476:	2b01      	cmp	r3, #1
 800a478:	d001      	beq.n	800a47e <USB_EPStartXfer+0x16>
 800a47a:	f000 fd2d 	bl	800aed8 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	699a      	ldr	r2, [r3, #24]
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	429a      	cmp	r2, r3
 800a488:	d905      	bls.n	800a496 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	1d7a      	adds	r2, r7, #5
 800a490:	32ff      	adds	r2, #255	@ 0xff
 800a492:	6013      	str	r3, [r2, #0]
 800a494:	e004      	b.n	800a4a0 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	699b      	ldr	r3, [r3, #24]
 800a49a:	1d7a      	adds	r2, r7, #5
 800a49c:	32ff      	adds	r2, #255	@ 0xff
 800a49e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	7b1b      	ldrb	r3, [r3, #12]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d125      	bne.n	800a4f4 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	6959      	ldr	r1, [r3, #20]
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	88da      	ldrh	r2, [r3, #6]
 800a4b0:	1d7b      	adds	r3, r7, #5
 800a4b2:	33ff      	adds	r3, #255	@ 0xff
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f001 fa3f 	bl	800b93c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	613b      	str	r3, [r7, #16]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2250      	movs	r2, #80	@ 0x50
 800a4c6:	5a9b      	ldrh	r3, [r3, r2]
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	001a      	movs	r2, r3
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	189b      	adds	r3, r3, r2
 800a4d0:	613b      	str	r3, [r7, #16]
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	00da      	lsls	r2, r3, #3
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	18d3      	adds	r3, r2, r3
 800a4dc:	4ad7      	ldr	r2, [pc, #860]	@ (800a83c <USB_EPStartXfer+0x3d4>)
 800a4de:	4694      	mov	ip, r2
 800a4e0:	4463      	add	r3, ip
 800a4e2:	60fb      	str	r3, [r7, #12]
 800a4e4:	1d7b      	adds	r3, r7, #5
 800a4e6:	33ff      	adds	r3, #255	@ 0xff
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	801a      	strh	r2, [r3, #0]
 800a4f0:	f000 fccd 	bl	800ae8e <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	78db      	ldrb	r3, [r3, #3]
 800a4f8:	2b02      	cmp	r3, #2
 800a4fa:	d000      	beq.n	800a4fe <USB_EPStartXfer+0x96>
 800a4fc:	e362      	b.n	800abc4 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	6a1a      	ldr	r2, [r3, #32]
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	429a      	cmp	r2, r3
 800a508:	d800      	bhi.n	800a50c <USB_EPStartXfer+0xa4>
 800a50a:	e309      	b.n	800ab20 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	18d3      	adds	r3, r2, r3
 800a516:	881b      	ldrh	r3, [r3, #0]
 800a518:	b29a      	uxth	r2, r3
 800a51a:	2056      	movs	r0, #86	@ 0x56
 800a51c:	183b      	adds	r3, r7, r0
 800a51e:	49c8      	ldr	r1, [pc, #800]	@ (800a840 <USB_EPStartXfer+0x3d8>)
 800a520:	400a      	ands	r2, r1
 800a522:	801a      	strh	r2, [r3, #0]
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	18d3      	adds	r3, r2, r3
 800a52e:	183a      	adds	r2, r7, r0
 800a530:	8812      	ldrh	r2, [r2, #0]
 800a532:	49c4      	ldr	r1, [pc, #784]	@ (800a844 <USB_EPStartXfer+0x3dc>)
 800a534:	430a      	orrs	r2, r1
 800a536:	b292      	uxth	r2, r2
 800a538:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	6a1a      	ldr	r2, [r3, #32]
 800a53e:	1d7b      	adds	r3, r7, #5
 800a540:	33ff      	adds	r3, #255	@ 0xff
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	1ad2      	subs	r2, r2, r3
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	18d3      	adds	r3, r2, r3
 800a554:	881b      	ldrh	r3, [r3, #0]
 800a556:	b29b      	uxth	r3, r3
 800a558:	001a      	movs	r2, r3
 800a55a:	2340      	movs	r3, #64	@ 0x40
 800a55c:	4013      	ands	r3, r2
 800a55e:	d100      	bne.n	800a562 <USB_EPStartXfer+0xfa>
 800a560:	e176      	b.n	800a850 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	633b      	str	r3, [r7, #48]	@ 0x30
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	785b      	ldrb	r3, [r3, #1]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d000      	beq.n	800a570 <USB_EPStartXfer+0x108>
 800a56e:	e074      	b.n	800a65a <USB_EPStartXfer+0x1f2>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2250      	movs	r2, #80	@ 0x50
 800a578:	5a9b      	ldrh	r3, [r3, r2]
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	001a      	movs	r2, r3
 800a57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a580:	189b      	adds	r3, r3, r2
 800a582:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	00da      	lsls	r2, r3, #3
 800a58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a58c:	18d3      	adds	r3, r2, r3
 800a58e:	4aae      	ldr	r2, [pc, #696]	@ (800a848 <USB_EPStartXfer+0x3e0>)
 800a590:	4694      	mov	ip, r2
 800a592:	4463      	add	r3, ip
 800a594:	627b      	str	r3, [r7, #36]	@ 0x24
 800a596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a598:	881b      	ldrh	r3, [r3, #0]
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	059b      	lsls	r3, r3, #22
 800a59e:	0d9b      	lsrs	r3, r3, #22
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a4:	801a      	strh	r2, [r3, #0]
 800a5a6:	1d7b      	adds	r3, r7, #5
 800a5a8:	33ff      	adds	r3, #255	@ 0xff
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d108      	bne.n	800a5c2 <USB_EPStartXfer+0x15a>
 800a5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b2:	881b      	ldrh	r3, [r3, #0]
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	4aa5      	ldr	r2, [pc, #660]	@ (800a84c <USB_EPStartXfer+0x3e4>)
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	b29a      	uxth	r2, r3
 800a5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5be:	801a      	strh	r2, [r3, #0]
 800a5c0:	e066      	b.n	800a690 <USB_EPStartXfer+0x228>
 800a5c2:	1d7b      	adds	r3, r7, #5
 800a5c4:	33ff      	adds	r3, #255	@ 0xff
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2b3e      	cmp	r3, #62	@ 0x3e
 800a5ca:	d821      	bhi.n	800a610 <USB_EPStartXfer+0x1a8>
 800a5cc:	1d7b      	adds	r3, r7, #5
 800a5ce:	33ff      	adds	r3, #255	@ 0xff
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	085b      	lsrs	r3, r3, #1
 800a5d4:	1c7a      	adds	r2, r7, #1
 800a5d6:	32ff      	adds	r2, #255	@ 0xff
 800a5d8:	6013      	str	r3, [r2, #0]
 800a5da:	1d7b      	adds	r3, r7, #5
 800a5dc:	33ff      	adds	r3, #255	@ 0xff
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	4013      	ands	r3, r2
 800a5e4:	d006      	beq.n	800a5f4 <USB_EPStartXfer+0x18c>
 800a5e6:	1c7b      	adds	r3, r7, #1
 800a5e8:	33ff      	adds	r3, #255	@ 0xff
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	1c7a      	adds	r2, r7, #1
 800a5f0:	32ff      	adds	r2, #255	@ 0xff
 800a5f2:	6013      	str	r3, [r2, #0]
 800a5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f6:	881b      	ldrh	r3, [r3, #0]
 800a5f8:	b29a      	uxth	r2, r3
 800a5fa:	1c7b      	adds	r3, r7, #1
 800a5fc:	33ff      	adds	r3, #255	@ 0xff
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	b29b      	uxth	r3, r3
 800a602:	029b      	lsls	r3, r3, #10
 800a604:	b29b      	uxth	r3, r3
 800a606:	4313      	orrs	r3, r2
 800a608:	b29a      	uxth	r2, r3
 800a60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a60c:	801a      	strh	r2, [r3, #0]
 800a60e:	e03f      	b.n	800a690 <USB_EPStartXfer+0x228>
 800a610:	1d7b      	adds	r3, r7, #5
 800a612:	33ff      	adds	r3, #255	@ 0xff
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	095b      	lsrs	r3, r3, #5
 800a618:	1c7a      	adds	r2, r7, #1
 800a61a:	32ff      	adds	r2, #255	@ 0xff
 800a61c:	6013      	str	r3, [r2, #0]
 800a61e:	1d7b      	adds	r3, r7, #5
 800a620:	33ff      	adds	r3, #255	@ 0xff
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	221f      	movs	r2, #31
 800a626:	4013      	ands	r3, r2
 800a628:	d106      	bne.n	800a638 <USB_EPStartXfer+0x1d0>
 800a62a:	1c7b      	adds	r3, r7, #1
 800a62c:	33ff      	adds	r3, #255	@ 0xff
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	3b01      	subs	r3, #1
 800a632:	1c7a      	adds	r2, r7, #1
 800a634:	32ff      	adds	r2, #255	@ 0xff
 800a636:	6013      	str	r3, [r2, #0]
 800a638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a63a:	881b      	ldrh	r3, [r3, #0]
 800a63c:	b29a      	uxth	r2, r3
 800a63e:	1c7b      	adds	r3, r7, #1
 800a640:	33ff      	adds	r3, #255	@ 0xff
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	b29b      	uxth	r3, r3
 800a646:	029b      	lsls	r3, r3, #10
 800a648:	b29b      	uxth	r3, r3
 800a64a:	4313      	orrs	r3, r2
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	4a7f      	ldr	r2, [pc, #508]	@ (800a84c <USB_EPStartXfer+0x3e4>)
 800a650:	4313      	orrs	r3, r2
 800a652:	b29a      	uxth	r2, r3
 800a654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a656:	801a      	strh	r2, [r3, #0]
 800a658:	e01a      	b.n	800a690 <USB_EPStartXfer+0x228>
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	785b      	ldrb	r3, [r3, #1]
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d116      	bne.n	800a690 <USB_EPStartXfer+0x228>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2250      	movs	r2, #80	@ 0x50
 800a666:	5a9b      	ldrh	r3, [r3, r2]
 800a668:	b29b      	uxth	r3, r3
 800a66a:	001a      	movs	r2, r3
 800a66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66e:	189b      	adds	r3, r3, r2
 800a670:	633b      	str	r3, [r7, #48]	@ 0x30
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	00da      	lsls	r2, r3, #3
 800a678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a67a:	18d3      	adds	r3, r2, r3
 800a67c:	4a72      	ldr	r2, [pc, #456]	@ (800a848 <USB_EPStartXfer+0x3e0>)
 800a67e:	4694      	mov	ip, r2
 800a680:	4463      	add	r3, ip
 800a682:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a684:	1d7b      	adds	r3, r7, #5
 800a686:	33ff      	adds	r3, #255	@ 0xff
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	b29a      	uxth	r2, r3
 800a68c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a68e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a690:	2076      	movs	r0, #118	@ 0x76
 800a692:	183b      	adds	r3, r7, r0
 800a694:	683a      	ldr	r2, [r7, #0]
 800a696:	8952      	ldrh	r2, [r2, #10]
 800a698:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	6959      	ldr	r1, [r3, #20]
 800a69e:	1d7b      	adds	r3, r7, #5
 800a6a0:	33ff      	adds	r3, #255	@ 0xff
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	b29c      	uxth	r4, r3
 800a6a6:	183b      	adds	r3, r7, r0
 800a6a8:	881a      	ldrh	r2, [r3, #0]
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	0023      	movs	r3, r4
 800a6ae:	f001 f945 	bl	800b93c <USB_WritePMA>
            ep->xfer_buff += len;
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	695a      	ldr	r2, [r3, #20]
 800a6b6:	1d7b      	adds	r3, r7, #5
 800a6b8:	33ff      	adds	r3, #255	@ 0xff
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	18d2      	adds	r2, r2, r3
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	6a1a      	ldr	r2, [r3, #32]
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	691b      	ldr	r3, [r3, #16]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d908      	bls.n	800a6e0 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	6a1a      	ldr	r2, [r3, #32]
 800a6d2:	1d7b      	adds	r3, r7, #5
 800a6d4:	33ff      	adds	r3, #255	@ 0xff
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	1ad2      	subs	r2, r2, r3
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	621a      	str	r2, [r3, #32]
 800a6de:	e007      	b.n	800a6f0 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	6a1b      	ldr	r3, [r3, #32]
 800a6e4:	1d7a      	adds	r2, r7, #5
 800a6e6:	32ff      	adds	r2, #255	@ 0xff
 800a6e8:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	785b      	ldrb	r3, [r3, #1]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d000      	beq.n	800a6fa <USB_EPStartXfer+0x292>
 800a6f8:	e070      	b.n	800a7dc <USB_EPStartXfer+0x374>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	61bb      	str	r3, [r7, #24]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2250      	movs	r2, #80	@ 0x50
 800a702:	5a9b      	ldrh	r3, [r3, r2]
 800a704:	b29b      	uxth	r3, r3
 800a706:	001a      	movs	r2, r3
 800a708:	69bb      	ldr	r3, [r7, #24]
 800a70a:	189b      	adds	r3, r3, r2
 800a70c:	61bb      	str	r3, [r7, #24]
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	00da      	lsls	r2, r3, #3
 800a714:	69bb      	ldr	r3, [r7, #24]
 800a716:	18d3      	adds	r3, r2, r3
 800a718:	4a48      	ldr	r2, [pc, #288]	@ (800a83c <USB_EPStartXfer+0x3d4>)
 800a71a:	4694      	mov	ip, r2
 800a71c:	4463      	add	r3, ip
 800a71e:	617b      	str	r3, [r7, #20]
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	881b      	ldrh	r3, [r3, #0]
 800a724:	b29b      	uxth	r3, r3
 800a726:	059b      	lsls	r3, r3, #22
 800a728:	0d9b      	lsrs	r3, r3, #22
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	801a      	strh	r2, [r3, #0]
 800a730:	1d7b      	adds	r3, r7, #5
 800a732:	33ff      	adds	r3, #255	@ 0xff
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d108      	bne.n	800a74c <USB_EPStartXfer+0x2e4>
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	881b      	ldrh	r3, [r3, #0]
 800a73e:	b29b      	uxth	r3, r3
 800a740:	4a42      	ldr	r2, [pc, #264]	@ (800a84c <USB_EPStartXfer+0x3e4>)
 800a742:	4313      	orrs	r3, r2
 800a744:	b29a      	uxth	r2, r3
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	801a      	strh	r2, [r3, #0]
 800a74a:	e064      	b.n	800a816 <USB_EPStartXfer+0x3ae>
 800a74c:	1d7b      	adds	r3, r7, #5
 800a74e:	33ff      	adds	r3, #255	@ 0xff
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2b3e      	cmp	r3, #62	@ 0x3e
 800a754:	d81f      	bhi.n	800a796 <USB_EPStartXfer+0x32e>
 800a756:	1d7b      	adds	r3, r7, #5
 800a758:	33ff      	adds	r3, #255	@ 0xff
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	085b      	lsrs	r3, r3, #1
 800a75e:	21fc      	movs	r1, #252	@ 0xfc
 800a760:	187a      	adds	r2, r7, r1
 800a762:	6013      	str	r3, [r2, #0]
 800a764:	1d7b      	adds	r3, r7, #5
 800a766:	33ff      	adds	r3, #255	@ 0xff
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	2201      	movs	r2, #1
 800a76c:	4013      	ands	r3, r2
 800a76e:	d004      	beq.n	800a77a <USB_EPStartXfer+0x312>
 800a770:	187b      	adds	r3, r7, r1
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	3301      	adds	r3, #1
 800a776:	187a      	adds	r2, r7, r1
 800a778:	6013      	str	r3, [r2, #0]
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	881b      	ldrh	r3, [r3, #0]
 800a77e:	b29a      	uxth	r2, r3
 800a780:	23fc      	movs	r3, #252	@ 0xfc
 800a782:	18fb      	adds	r3, r7, r3
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	b29b      	uxth	r3, r3
 800a788:	029b      	lsls	r3, r3, #10
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	4313      	orrs	r3, r2
 800a78e:	b29a      	uxth	r2, r3
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	801a      	strh	r2, [r3, #0]
 800a794:	e03f      	b.n	800a816 <USB_EPStartXfer+0x3ae>
 800a796:	1d7b      	adds	r3, r7, #5
 800a798:	33ff      	adds	r3, #255	@ 0xff
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	095b      	lsrs	r3, r3, #5
 800a79e:	21fc      	movs	r1, #252	@ 0xfc
 800a7a0:	187a      	adds	r2, r7, r1
 800a7a2:	6013      	str	r3, [r2, #0]
 800a7a4:	1d7b      	adds	r3, r7, #5
 800a7a6:	33ff      	adds	r3, #255	@ 0xff
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	221f      	movs	r2, #31
 800a7ac:	4013      	ands	r3, r2
 800a7ae:	d104      	bne.n	800a7ba <USB_EPStartXfer+0x352>
 800a7b0:	187b      	adds	r3, r7, r1
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	3b01      	subs	r3, #1
 800a7b6:	187a      	adds	r2, r7, r1
 800a7b8:	6013      	str	r3, [r2, #0]
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	881b      	ldrh	r3, [r3, #0]
 800a7be:	b29a      	uxth	r2, r3
 800a7c0:	23fc      	movs	r3, #252	@ 0xfc
 800a7c2:	18fb      	adds	r3, r7, r3
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	029b      	lsls	r3, r3, #10
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	4a1e      	ldr	r2, [pc, #120]	@ (800a84c <USB_EPStartXfer+0x3e4>)
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	b29a      	uxth	r2, r3
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	801a      	strh	r2, [r3, #0]
 800a7da:	e01c      	b.n	800a816 <USB_EPStartXfer+0x3ae>
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	785b      	ldrb	r3, [r3, #1]
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d118      	bne.n	800a816 <USB_EPStartXfer+0x3ae>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	623b      	str	r3, [r7, #32]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2250      	movs	r2, #80	@ 0x50
 800a7ec:	5a9b      	ldrh	r3, [r3, r2]
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	001a      	movs	r2, r3
 800a7f2:	6a3b      	ldr	r3, [r7, #32]
 800a7f4:	189b      	adds	r3, r3, r2
 800a7f6:	623b      	str	r3, [r7, #32]
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	00da      	lsls	r2, r3, #3
 800a7fe:	6a3b      	ldr	r3, [r7, #32]
 800a800:	18d3      	adds	r3, r2, r3
 800a802:	4a0e      	ldr	r2, [pc, #56]	@ (800a83c <USB_EPStartXfer+0x3d4>)
 800a804:	4694      	mov	ip, r2
 800a806:	4463      	add	r3, ip
 800a808:	61fb      	str	r3, [r7, #28]
 800a80a:	1d7b      	adds	r3, r7, #5
 800a80c:	33ff      	adds	r3, #255	@ 0xff
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	b29a      	uxth	r2, r3
 800a812:	69fb      	ldr	r3, [r7, #28]
 800a814:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a816:	2076      	movs	r0, #118	@ 0x76
 800a818:	183b      	adds	r3, r7, r0
 800a81a:	683a      	ldr	r2, [r7, #0]
 800a81c:	8912      	ldrh	r2, [r2, #8]
 800a81e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	6959      	ldr	r1, [r3, #20]
 800a824:	1d7b      	adds	r3, r7, #5
 800a826:	33ff      	adds	r3, #255	@ 0xff
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	b29c      	uxth	r4, r3
 800a82c:	183b      	adds	r3, r7, r0
 800a82e:	881a      	ldrh	r2, [r3, #0]
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	0023      	movs	r3, r4
 800a834:	f001 f882 	bl	800b93c <USB_WritePMA>
 800a838:	e329      	b.n	800ae8e <USB_EPStartXfer+0xa26>
 800a83a:	46c0      	nop			@ (mov r8, r8)
 800a83c:	00000402 	.word	0x00000402
 800a840:	ffff8f8f 	.word	0xffff8f8f
 800a844:	ffff8180 	.word	0xffff8180
 800a848:	00000406 	.word	0x00000406
 800a84c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	785b      	ldrb	r3, [r3, #1]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d000      	beq.n	800a85a <USB_EPStartXfer+0x3f2>
 800a858:	e070      	b.n	800a93c <USB_EPStartXfer+0x4d4>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2250      	movs	r2, #80	@ 0x50
 800a862:	5a9b      	ldrh	r3, [r3, r2]
 800a864:	b29b      	uxth	r3, r3
 800a866:	001a      	movs	r2, r3
 800a868:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a86a:	189b      	adds	r3, r3, r2
 800a86c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	00da      	lsls	r2, r3, #3
 800a874:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a876:	18d3      	adds	r3, r2, r3
 800a878:	4acd      	ldr	r2, [pc, #820]	@ (800abb0 <USB_EPStartXfer+0x748>)
 800a87a:	4694      	mov	ip, r2
 800a87c:	4463      	add	r3, ip
 800a87e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a882:	881b      	ldrh	r3, [r3, #0]
 800a884:	b29b      	uxth	r3, r3
 800a886:	059b      	lsls	r3, r3, #22
 800a888:	0d9b      	lsrs	r3, r3, #22
 800a88a:	b29a      	uxth	r2, r3
 800a88c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a88e:	801a      	strh	r2, [r3, #0]
 800a890:	1d7b      	adds	r3, r7, #5
 800a892:	33ff      	adds	r3, #255	@ 0xff
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d108      	bne.n	800a8ac <USB_EPStartXfer+0x444>
 800a89a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a89c:	881b      	ldrh	r3, [r3, #0]
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	4ac4      	ldr	r2, [pc, #784]	@ (800abb4 <USB_EPStartXfer+0x74c>)
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8a8:	801a      	strh	r2, [r3, #0]
 800a8aa:	e064      	b.n	800a976 <USB_EPStartXfer+0x50e>
 800a8ac:	1d7b      	adds	r3, r7, #5
 800a8ae:	33ff      	adds	r3, #255	@ 0xff
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2b3e      	cmp	r3, #62	@ 0x3e
 800a8b4:	d81f      	bhi.n	800a8f6 <USB_EPStartXfer+0x48e>
 800a8b6:	1d7b      	adds	r3, r7, #5
 800a8b8:	33ff      	adds	r3, #255	@ 0xff
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	085b      	lsrs	r3, r3, #1
 800a8be:	21f8      	movs	r1, #248	@ 0xf8
 800a8c0:	187a      	adds	r2, r7, r1
 800a8c2:	6013      	str	r3, [r2, #0]
 800a8c4:	1d7b      	adds	r3, r7, #5
 800a8c6:	33ff      	adds	r3, #255	@ 0xff
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	4013      	ands	r3, r2
 800a8ce:	d004      	beq.n	800a8da <USB_EPStartXfer+0x472>
 800a8d0:	187b      	adds	r3, r7, r1
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	187a      	adds	r2, r7, r1
 800a8d8:	6013      	str	r3, [r2, #0]
 800a8da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8dc:	881b      	ldrh	r3, [r3, #0]
 800a8de:	b29a      	uxth	r2, r3
 800a8e0:	23f8      	movs	r3, #248	@ 0xf8
 800a8e2:	18fb      	adds	r3, r7, r3
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	029b      	lsls	r3, r3, #10
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	b29a      	uxth	r2, r3
 800a8f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8f2:	801a      	strh	r2, [r3, #0]
 800a8f4:	e03f      	b.n	800a976 <USB_EPStartXfer+0x50e>
 800a8f6:	1d7b      	adds	r3, r7, #5
 800a8f8:	33ff      	adds	r3, #255	@ 0xff
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	095b      	lsrs	r3, r3, #5
 800a8fe:	21f8      	movs	r1, #248	@ 0xf8
 800a900:	187a      	adds	r2, r7, r1
 800a902:	6013      	str	r3, [r2, #0]
 800a904:	1d7b      	adds	r3, r7, #5
 800a906:	33ff      	adds	r3, #255	@ 0xff
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	221f      	movs	r2, #31
 800a90c:	4013      	ands	r3, r2
 800a90e:	d104      	bne.n	800a91a <USB_EPStartXfer+0x4b2>
 800a910:	187b      	adds	r3, r7, r1
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	3b01      	subs	r3, #1
 800a916:	187a      	adds	r2, r7, r1
 800a918:	6013      	str	r3, [r2, #0]
 800a91a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a91c:	881b      	ldrh	r3, [r3, #0]
 800a91e:	b29a      	uxth	r2, r3
 800a920:	23f8      	movs	r3, #248	@ 0xf8
 800a922:	18fb      	adds	r3, r7, r3
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	b29b      	uxth	r3, r3
 800a928:	029b      	lsls	r3, r3, #10
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	4313      	orrs	r3, r2
 800a92e:	b29b      	uxth	r3, r3
 800a930:	4aa0      	ldr	r2, [pc, #640]	@ (800abb4 <USB_EPStartXfer+0x74c>)
 800a932:	4313      	orrs	r3, r2
 800a934:	b29a      	uxth	r2, r3
 800a936:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a938:	801a      	strh	r2, [r3, #0]
 800a93a:	e01c      	b.n	800a976 <USB_EPStartXfer+0x50e>
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	785b      	ldrb	r3, [r3, #1]
 800a940:	2b01      	cmp	r3, #1
 800a942:	d118      	bne.n	800a976 <USB_EPStartXfer+0x50e>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	653b      	str	r3, [r7, #80]	@ 0x50
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2250      	movs	r2, #80	@ 0x50
 800a94c:	5a9b      	ldrh	r3, [r3, r2]
 800a94e:	b29b      	uxth	r3, r3
 800a950:	001a      	movs	r2, r3
 800a952:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a954:	189b      	adds	r3, r3, r2
 800a956:	653b      	str	r3, [r7, #80]	@ 0x50
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	00da      	lsls	r2, r3, #3
 800a95e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a960:	18d3      	adds	r3, r2, r3
 800a962:	4a93      	ldr	r2, [pc, #588]	@ (800abb0 <USB_EPStartXfer+0x748>)
 800a964:	4694      	mov	ip, r2
 800a966:	4463      	add	r3, ip
 800a968:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a96a:	1d7b      	adds	r3, r7, #5
 800a96c:	33ff      	adds	r3, #255	@ 0xff
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	b29a      	uxth	r2, r3
 800a972:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a974:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a976:	2076      	movs	r0, #118	@ 0x76
 800a978:	183b      	adds	r3, r7, r0
 800a97a:	683a      	ldr	r2, [r7, #0]
 800a97c:	8912      	ldrh	r2, [r2, #8]
 800a97e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	6959      	ldr	r1, [r3, #20]
 800a984:	1d7b      	adds	r3, r7, #5
 800a986:	33ff      	adds	r3, #255	@ 0xff
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	b29c      	uxth	r4, r3
 800a98c:	183b      	adds	r3, r7, r0
 800a98e:	881a      	ldrh	r2, [r3, #0]
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	0023      	movs	r3, r4
 800a994:	f000 ffd2 	bl	800b93c <USB_WritePMA>
            ep->xfer_buff += len;
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	695a      	ldr	r2, [r3, #20]
 800a99c:	1d7b      	adds	r3, r7, #5
 800a99e:	33ff      	adds	r3, #255	@ 0xff
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	18d2      	adds	r2, r2, r3
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	6a1a      	ldr	r2, [r3, #32]
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	691b      	ldr	r3, [r3, #16]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d908      	bls.n	800a9c6 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	6a1a      	ldr	r2, [r3, #32]
 800a9b8:	1d7b      	adds	r3, r7, #5
 800a9ba:	33ff      	adds	r3, #255	@ 0xff
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	1ad2      	subs	r2, r2, r3
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	621a      	str	r2, [r3, #32]
 800a9c4:	e007      	b.n	800a9d6 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	6a1b      	ldr	r3, [r3, #32]
 800a9ca:	1d7a      	adds	r2, r7, #5
 800a9cc:	32ff      	adds	r2, #255	@ 0xff
 800a9ce:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	785b      	ldrb	r3, [r3, #1]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d000      	beq.n	800a9e4 <USB_EPStartXfer+0x57c>
 800a9e2:	e070      	b.n	800aac6 <USB_EPStartXfer+0x65e>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2250      	movs	r2, #80	@ 0x50
 800a9ec:	5a9b      	ldrh	r3, [r3, r2]
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	001a      	movs	r2, r3
 800a9f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f4:	189b      	adds	r3, r3, r2
 800a9f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	00da      	lsls	r2, r3, #3
 800a9fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa00:	18d3      	adds	r3, r2, r3
 800aa02:	4a6d      	ldr	r2, [pc, #436]	@ (800abb8 <USB_EPStartXfer+0x750>)
 800aa04:	4694      	mov	ip, r2
 800aa06:	4463      	add	r3, ip
 800aa08:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa0c:	881b      	ldrh	r3, [r3, #0]
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	059b      	lsls	r3, r3, #22
 800aa12:	0d9b      	lsrs	r3, r3, #22
 800aa14:	b29a      	uxth	r2, r3
 800aa16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa18:	801a      	strh	r2, [r3, #0]
 800aa1a:	1d7b      	adds	r3, r7, #5
 800aa1c:	33ff      	adds	r3, #255	@ 0xff
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d108      	bne.n	800aa36 <USB_EPStartXfer+0x5ce>
 800aa24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa26:	881b      	ldrh	r3, [r3, #0]
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	4a62      	ldr	r2, [pc, #392]	@ (800abb4 <USB_EPStartXfer+0x74c>)
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	b29a      	uxth	r2, r3
 800aa30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa32:	801a      	strh	r2, [r3, #0]
 800aa34:	e062      	b.n	800aafc <USB_EPStartXfer+0x694>
 800aa36:	1d7b      	adds	r3, r7, #5
 800aa38:	33ff      	adds	r3, #255	@ 0xff
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2b3e      	cmp	r3, #62	@ 0x3e
 800aa3e:	d81f      	bhi.n	800aa80 <USB_EPStartXfer+0x618>
 800aa40:	1d7b      	adds	r3, r7, #5
 800aa42:	33ff      	adds	r3, #255	@ 0xff
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	085b      	lsrs	r3, r3, #1
 800aa48:	21f4      	movs	r1, #244	@ 0xf4
 800aa4a:	187a      	adds	r2, r7, r1
 800aa4c:	6013      	str	r3, [r2, #0]
 800aa4e:	1d7b      	adds	r3, r7, #5
 800aa50:	33ff      	adds	r3, #255	@ 0xff
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	2201      	movs	r2, #1
 800aa56:	4013      	ands	r3, r2
 800aa58:	d004      	beq.n	800aa64 <USB_EPStartXfer+0x5fc>
 800aa5a:	187b      	adds	r3, r7, r1
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	187a      	adds	r2, r7, r1
 800aa62:	6013      	str	r3, [r2, #0]
 800aa64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa66:	881b      	ldrh	r3, [r3, #0]
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	23f4      	movs	r3, #244	@ 0xf4
 800aa6c:	18fb      	adds	r3, r7, r3
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	029b      	lsls	r3, r3, #10
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	4313      	orrs	r3, r2
 800aa78:	b29a      	uxth	r2, r3
 800aa7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa7c:	801a      	strh	r2, [r3, #0]
 800aa7e:	e03d      	b.n	800aafc <USB_EPStartXfer+0x694>
 800aa80:	1d7b      	adds	r3, r7, #5
 800aa82:	33ff      	adds	r3, #255	@ 0xff
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	095b      	lsrs	r3, r3, #5
 800aa88:	21f4      	movs	r1, #244	@ 0xf4
 800aa8a:	187a      	adds	r2, r7, r1
 800aa8c:	6013      	str	r3, [r2, #0]
 800aa8e:	1d7b      	adds	r3, r7, #5
 800aa90:	33ff      	adds	r3, #255	@ 0xff
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	221f      	movs	r2, #31
 800aa96:	4013      	ands	r3, r2
 800aa98:	d104      	bne.n	800aaa4 <USB_EPStartXfer+0x63c>
 800aa9a:	187b      	adds	r3, r7, r1
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	187a      	adds	r2, r7, r1
 800aaa2:	6013      	str	r3, [r2, #0]
 800aaa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaa6:	881b      	ldrh	r3, [r3, #0]
 800aaa8:	b29a      	uxth	r2, r3
 800aaaa:	23f4      	movs	r3, #244	@ 0xf4
 800aaac:	18fb      	adds	r3, r7, r3
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	029b      	lsls	r3, r3, #10
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	4313      	orrs	r3, r2
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	4a3e      	ldr	r2, [pc, #248]	@ (800abb4 <USB_EPStartXfer+0x74c>)
 800aabc:	4313      	orrs	r3, r2
 800aabe:	b29a      	uxth	r2, r3
 800aac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aac2:	801a      	strh	r2, [r3, #0]
 800aac4:	e01a      	b.n	800aafc <USB_EPStartXfer+0x694>
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	785b      	ldrb	r3, [r3, #1]
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d116      	bne.n	800aafc <USB_EPStartXfer+0x694>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2250      	movs	r2, #80	@ 0x50
 800aad2:	5a9b      	ldrh	r3, [r3, r2]
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	001a      	movs	r2, r3
 800aad8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aada:	189b      	adds	r3, r3, r2
 800aadc:	643b      	str	r3, [r7, #64]	@ 0x40
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	00da      	lsls	r2, r3, #3
 800aae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aae6:	18d3      	adds	r3, r2, r3
 800aae8:	4a33      	ldr	r2, [pc, #204]	@ (800abb8 <USB_EPStartXfer+0x750>)
 800aaea:	4694      	mov	ip, r2
 800aaec:	4463      	add	r3, ip
 800aaee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aaf0:	1d7b      	adds	r3, r7, #5
 800aaf2:	33ff      	adds	r3, #255	@ 0xff
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	b29a      	uxth	r2, r3
 800aaf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aafa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800aafc:	2076      	movs	r0, #118	@ 0x76
 800aafe:	183b      	adds	r3, r7, r0
 800ab00:	683a      	ldr	r2, [r7, #0]
 800ab02:	8952      	ldrh	r2, [r2, #10]
 800ab04:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	6959      	ldr	r1, [r3, #20]
 800ab0a:	1d7b      	adds	r3, r7, #5
 800ab0c:	33ff      	adds	r3, #255	@ 0xff
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	b29c      	uxth	r4, r3
 800ab12:	183b      	adds	r3, r7, r0
 800ab14:	881a      	ldrh	r2, [r3, #0]
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	0023      	movs	r3, r4
 800ab1a:	f000 ff0f 	bl	800b93c <USB_WritePMA>
 800ab1e:	e1b6      	b.n	800ae8e <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	6a1b      	ldr	r3, [r3, #32]
 800ab24:	1d7a      	adds	r2, r7, #5
 800ab26:	32ff      	adds	r2, #255	@ 0xff
 800ab28:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	18d3      	adds	r3, r2, r3
 800ab34:	881b      	ldrh	r3, [r3, #0]
 800ab36:	b29a      	uxth	r2, r3
 800ab38:	2062      	movs	r0, #98	@ 0x62
 800ab3a:	183b      	adds	r3, r7, r0
 800ab3c:	491f      	ldr	r1, [pc, #124]	@ (800abbc <USB_EPStartXfer+0x754>)
 800ab3e:	400a      	ands	r2, r1
 800ab40:	801a      	strh	r2, [r3, #0]
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	18d3      	adds	r3, r2, r3
 800ab4c:	183a      	adds	r2, r7, r0
 800ab4e:	8812      	ldrh	r2, [r2, #0]
 800ab50:	491b      	ldr	r1, [pc, #108]	@ (800abc0 <USB_EPStartXfer+0x758>)
 800ab52:	430a      	orrs	r2, r1
 800ab54:	b292      	uxth	r2, r2
 800ab56:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2250      	movs	r2, #80	@ 0x50
 800ab60:	5a9b      	ldrh	r3, [r3, r2]
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	001a      	movs	r2, r3
 800ab66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab68:	189b      	adds	r3, r3, r2
 800ab6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	00da      	lsls	r2, r3, #3
 800ab72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab74:	18d3      	adds	r3, r2, r3
 800ab76:	4a0e      	ldr	r2, [pc, #56]	@ (800abb0 <USB_EPStartXfer+0x748>)
 800ab78:	4694      	mov	ip, r2
 800ab7a:	4463      	add	r3, ip
 800ab7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ab7e:	1d7b      	adds	r3, r7, #5
 800ab80:	33ff      	adds	r3, #255	@ 0xff
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	b29a      	uxth	r2, r3
 800ab86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ab88:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ab8a:	2076      	movs	r0, #118	@ 0x76
 800ab8c:	183b      	adds	r3, r7, r0
 800ab8e:	683a      	ldr	r2, [r7, #0]
 800ab90:	8912      	ldrh	r2, [r2, #8]
 800ab92:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	6959      	ldr	r1, [r3, #20]
 800ab98:	1d7b      	adds	r3, r7, #5
 800ab9a:	33ff      	adds	r3, #255	@ 0xff
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	b29c      	uxth	r4, r3
 800aba0:	183b      	adds	r3, r7, r0
 800aba2:	881a      	ldrh	r2, [r3, #0]
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	0023      	movs	r3, r4
 800aba8:	f000 fec8 	bl	800b93c <USB_WritePMA>
 800abac:	e16f      	b.n	800ae8e <USB_EPStartXfer+0xa26>
 800abae:	46c0      	nop			@ (mov r8, r8)
 800abb0:	00000402 	.word	0x00000402
 800abb4:	ffff8000 	.word	0xffff8000
 800abb8:	00000406 	.word	0x00000406
 800abbc:	ffff8e8f 	.word	0xffff8e8f
 800abc0:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	6a1a      	ldr	r2, [r3, #32]
 800abc8:	1d7b      	adds	r3, r7, #5
 800abca:	33ff      	adds	r3, #255	@ 0xff
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	1ad2      	subs	r2, r2, r3
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	18d3      	adds	r3, r2, r3
 800abde:	881b      	ldrh	r3, [r3, #0]
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	001a      	movs	r2, r3
 800abe4:	2340      	movs	r3, #64	@ 0x40
 800abe6:	4013      	ands	r3, r2
 800abe8:	d100      	bne.n	800abec <USB_EPStartXfer+0x784>
 800abea:	e0a4      	b.n	800ad36 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	673b      	str	r3, [r7, #112]	@ 0x70
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	785b      	ldrb	r3, [r3, #1]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d000      	beq.n	800abfa <USB_EPStartXfer+0x792>
 800abf8:	e070      	b.n	800acdc <USB_EPStartXfer+0x874>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2250      	movs	r2, #80	@ 0x50
 800ac02:	5a9b      	ldrh	r3, [r3, r2]
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	001a      	movs	r2, r3
 800ac08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ac0a:	189b      	adds	r3, r3, r2
 800ac0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	00da      	lsls	r2, r3, #3
 800ac14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ac16:	18d3      	adds	r3, r2, r3
 800ac18:	4ada      	ldr	r2, [pc, #872]	@ (800af84 <USB_EPStartXfer+0xb1c>)
 800ac1a:	4694      	mov	ip, r2
 800ac1c:	4463      	add	r3, ip
 800ac1e:	667b      	str	r3, [r7, #100]	@ 0x64
 800ac20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac22:	881b      	ldrh	r3, [r3, #0]
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	059b      	lsls	r3, r3, #22
 800ac28:	0d9b      	lsrs	r3, r3, #22
 800ac2a:	b29a      	uxth	r2, r3
 800ac2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac2e:	801a      	strh	r2, [r3, #0]
 800ac30:	1d7b      	adds	r3, r7, #5
 800ac32:	33ff      	adds	r3, #255	@ 0xff
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d108      	bne.n	800ac4c <USB_EPStartXfer+0x7e4>
 800ac3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac3c:	881b      	ldrh	r3, [r3, #0]
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	4ad1      	ldr	r2, [pc, #836]	@ (800af88 <USB_EPStartXfer+0xb20>)
 800ac42:	4313      	orrs	r3, r2
 800ac44:	b29a      	uxth	r2, r3
 800ac46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac48:	801a      	strh	r2, [r3, #0]
 800ac4a:	e062      	b.n	800ad12 <USB_EPStartXfer+0x8aa>
 800ac4c:	1d7b      	adds	r3, r7, #5
 800ac4e:	33ff      	adds	r3, #255	@ 0xff
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2b3e      	cmp	r3, #62	@ 0x3e
 800ac54:	d81f      	bhi.n	800ac96 <USB_EPStartXfer+0x82e>
 800ac56:	1d7b      	adds	r3, r7, #5
 800ac58:	33ff      	adds	r3, #255	@ 0xff
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	085b      	lsrs	r3, r3, #1
 800ac5e:	21f0      	movs	r1, #240	@ 0xf0
 800ac60:	187a      	adds	r2, r7, r1
 800ac62:	6013      	str	r3, [r2, #0]
 800ac64:	1d7b      	adds	r3, r7, #5
 800ac66:	33ff      	adds	r3, #255	@ 0xff
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	4013      	ands	r3, r2
 800ac6e:	d004      	beq.n	800ac7a <USB_EPStartXfer+0x812>
 800ac70:	187b      	adds	r3, r7, r1
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	3301      	adds	r3, #1
 800ac76:	187a      	adds	r2, r7, r1
 800ac78:	6013      	str	r3, [r2, #0]
 800ac7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac7c:	881b      	ldrh	r3, [r3, #0]
 800ac7e:	b29a      	uxth	r2, r3
 800ac80:	23f0      	movs	r3, #240	@ 0xf0
 800ac82:	18fb      	adds	r3, r7, r3
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	029b      	lsls	r3, r3, #10
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	b29a      	uxth	r2, r3
 800ac90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac92:	801a      	strh	r2, [r3, #0]
 800ac94:	e03d      	b.n	800ad12 <USB_EPStartXfer+0x8aa>
 800ac96:	1d7b      	adds	r3, r7, #5
 800ac98:	33ff      	adds	r3, #255	@ 0xff
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	095b      	lsrs	r3, r3, #5
 800ac9e:	21f0      	movs	r1, #240	@ 0xf0
 800aca0:	187a      	adds	r2, r7, r1
 800aca2:	6013      	str	r3, [r2, #0]
 800aca4:	1d7b      	adds	r3, r7, #5
 800aca6:	33ff      	adds	r3, #255	@ 0xff
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	221f      	movs	r2, #31
 800acac:	4013      	ands	r3, r2
 800acae:	d104      	bne.n	800acba <USB_EPStartXfer+0x852>
 800acb0:	187b      	adds	r3, r7, r1
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	3b01      	subs	r3, #1
 800acb6:	187a      	adds	r2, r7, r1
 800acb8:	6013      	str	r3, [r2, #0]
 800acba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800acbc:	881b      	ldrh	r3, [r3, #0]
 800acbe:	b29a      	uxth	r2, r3
 800acc0:	23f0      	movs	r3, #240	@ 0xf0
 800acc2:	18fb      	adds	r3, r7, r3
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	029b      	lsls	r3, r3, #10
 800acca:	b29b      	uxth	r3, r3
 800accc:	4313      	orrs	r3, r2
 800acce:	b29b      	uxth	r3, r3
 800acd0:	4aad      	ldr	r2, [pc, #692]	@ (800af88 <USB_EPStartXfer+0xb20>)
 800acd2:	4313      	orrs	r3, r2
 800acd4:	b29a      	uxth	r2, r3
 800acd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800acd8:	801a      	strh	r2, [r3, #0]
 800acda:	e01a      	b.n	800ad12 <USB_EPStartXfer+0x8aa>
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	785b      	ldrb	r3, [r3, #1]
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d116      	bne.n	800ad12 <USB_EPStartXfer+0x8aa>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2250      	movs	r2, #80	@ 0x50
 800ace8:	5a9b      	ldrh	r3, [r3, r2]
 800acea:	b29b      	uxth	r3, r3
 800acec:	001a      	movs	r2, r3
 800acee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800acf0:	189b      	adds	r3, r3, r2
 800acf2:	673b      	str	r3, [r7, #112]	@ 0x70
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	00da      	lsls	r2, r3, #3
 800acfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800acfc:	18d3      	adds	r3, r2, r3
 800acfe:	4aa1      	ldr	r2, [pc, #644]	@ (800af84 <USB_EPStartXfer+0xb1c>)
 800ad00:	4694      	mov	ip, r2
 800ad02:	4463      	add	r3, ip
 800ad04:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ad06:	1d7b      	adds	r3, r7, #5
 800ad08:	33ff      	adds	r3, #255	@ 0xff
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	b29a      	uxth	r2, r3
 800ad0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad10:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ad12:	2076      	movs	r0, #118	@ 0x76
 800ad14:	183b      	adds	r3, r7, r0
 800ad16:	683a      	ldr	r2, [r7, #0]
 800ad18:	8952      	ldrh	r2, [r2, #10]
 800ad1a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	6959      	ldr	r1, [r3, #20]
 800ad20:	1d7b      	adds	r3, r7, #5
 800ad22:	33ff      	adds	r3, #255	@ 0xff
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	b29c      	uxth	r4, r3
 800ad28:	183b      	adds	r3, r7, r0
 800ad2a:	881a      	ldrh	r2, [r3, #0]
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	0023      	movs	r3, r4
 800ad30:	f000 fe04 	bl	800b93c <USB_WritePMA>
 800ad34:	e0ab      	b.n	800ae8e <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	785b      	ldrb	r3, [r3, #1]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d000      	beq.n	800ad40 <USB_EPStartXfer+0x8d8>
 800ad3e:	e070      	b.n	800ae22 <USB_EPStartXfer+0x9ba>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2250      	movs	r2, #80	@ 0x50
 800ad48:	5a9b      	ldrh	r3, [r3, r2]
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	001a      	movs	r2, r3
 800ad4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ad50:	189b      	adds	r3, r3, r2
 800ad52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	00da      	lsls	r2, r3, #3
 800ad5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ad5c:	18d3      	adds	r3, r2, r3
 800ad5e:	4a8b      	ldr	r2, [pc, #556]	@ (800af8c <USB_EPStartXfer+0xb24>)
 800ad60:	4694      	mov	ip, r2
 800ad62:	4463      	add	r3, ip
 800ad64:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ad66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad68:	881b      	ldrh	r3, [r3, #0]
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	059b      	lsls	r3, r3, #22
 800ad6e:	0d9b      	lsrs	r3, r3, #22
 800ad70:	b29a      	uxth	r2, r3
 800ad72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad74:	801a      	strh	r2, [r3, #0]
 800ad76:	1d7b      	adds	r3, r7, #5
 800ad78:	33ff      	adds	r3, #255	@ 0xff
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d108      	bne.n	800ad92 <USB_EPStartXfer+0x92a>
 800ad80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad82:	881b      	ldrh	r3, [r3, #0]
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	4a80      	ldr	r2, [pc, #512]	@ (800af88 <USB_EPStartXfer+0xb20>)
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	b29a      	uxth	r2, r3
 800ad8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad8e:	801a      	strh	r2, [r3, #0]
 800ad90:	e06c      	b.n	800ae6c <USB_EPStartXfer+0xa04>
 800ad92:	1d7b      	adds	r3, r7, #5
 800ad94:	33ff      	adds	r3, #255	@ 0xff
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2b3e      	cmp	r3, #62	@ 0x3e
 800ad9a:	d81f      	bhi.n	800addc <USB_EPStartXfer+0x974>
 800ad9c:	1d7b      	adds	r3, r7, #5
 800ad9e:	33ff      	adds	r3, #255	@ 0xff
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	085b      	lsrs	r3, r3, #1
 800ada4:	21ec      	movs	r1, #236	@ 0xec
 800ada6:	187a      	adds	r2, r7, r1
 800ada8:	6013      	str	r3, [r2, #0]
 800adaa:	1d7b      	adds	r3, r7, #5
 800adac:	33ff      	adds	r3, #255	@ 0xff
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2201      	movs	r2, #1
 800adb2:	4013      	ands	r3, r2
 800adb4:	d004      	beq.n	800adc0 <USB_EPStartXfer+0x958>
 800adb6:	187b      	adds	r3, r7, r1
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	3301      	adds	r3, #1
 800adbc:	187a      	adds	r2, r7, r1
 800adbe:	6013      	str	r3, [r2, #0]
 800adc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800adc2:	881b      	ldrh	r3, [r3, #0]
 800adc4:	b29a      	uxth	r2, r3
 800adc6:	23ec      	movs	r3, #236	@ 0xec
 800adc8:	18fb      	adds	r3, r7, r3
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	b29b      	uxth	r3, r3
 800adce:	029b      	lsls	r3, r3, #10
 800add0:	b29b      	uxth	r3, r3
 800add2:	4313      	orrs	r3, r2
 800add4:	b29a      	uxth	r2, r3
 800add6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800add8:	801a      	strh	r2, [r3, #0]
 800adda:	e047      	b.n	800ae6c <USB_EPStartXfer+0xa04>
 800addc:	1d7b      	adds	r3, r7, #5
 800adde:	33ff      	adds	r3, #255	@ 0xff
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	095b      	lsrs	r3, r3, #5
 800ade4:	21ec      	movs	r1, #236	@ 0xec
 800ade6:	187a      	adds	r2, r7, r1
 800ade8:	6013      	str	r3, [r2, #0]
 800adea:	1d7b      	adds	r3, r7, #5
 800adec:	33ff      	adds	r3, #255	@ 0xff
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	221f      	movs	r2, #31
 800adf2:	4013      	ands	r3, r2
 800adf4:	d104      	bne.n	800ae00 <USB_EPStartXfer+0x998>
 800adf6:	187b      	adds	r3, r7, r1
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	3b01      	subs	r3, #1
 800adfc:	187a      	adds	r2, r7, r1
 800adfe:	6013      	str	r3, [r2, #0]
 800ae00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae02:	881b      	ldrh	r3, [r3, #0]
 800ae04:	b29a      	uxth	r2, r3
 800ae06:	23ec      	movs	r3, #236	@ 0xec
 800ae08:	18fb      	adds	r3, r7, r3
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	029b      	lsls	r3, r3, #10
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	4313      	orrs	r3, r2
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	4a5c      	ldr	r2, [pc, #368]	@ (800af88 <USB_EPStartXfer+0xb20>)
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	b29a      	uxth	r2, r3
 800ae1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae1e:	801a      	strh	r2, [r3, #0]
 800ae20:	e024      	b.n	800ae6c <USB_EPStartXfer+0xa04>
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	785b      	ldrb	r3, [r3, #1]
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d120      	bne.n	800ae6c <USB_EPStartXfer+0xa04>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2184      	movs	r1, #132	@ 0x84
 800ae2e:	187a      	adds	r2, r7, r1
 800ae30:	6013      	str	r3, [r2, #0]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2250      	movs	r2, #80	@ 0x50
 800ae36:	5a9b      	ldrh	r3, [r3, r2]
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	001a      	movs	r2, r3
 800ae3c:	187b      	adds	r3, r7, r1
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	189b      	adds	r3, r3, r2
 800ae42:	187a      	adds	r2, r7, r1
 800ae44:	6013      	str	r3, [r2, #0]
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	00da      	lsls	r2, r3, #3
 800ae4c:	187b      	adds	r3, r7, r1
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	18d3      	adds	r3, r2, r3
 800ae52:	4a4e      	ldr	r2, [pc, #312]	@ (800af8c <USB_EPStartXfer+0xb24>)
 800ae54:	4694      	mov	ip, r2
 800ae56:	4463      	add	r3, ip
 800ae58:	2180      	movs	r1, #128	@ 0x80
 800ae5a:	187a      	adds	r2, r7, r1
 800ae5c:	6013      	str	r3, [r2, #0]
 800ae5e:	1d7b      	adds	r3, r7, #5
 800ae60:	33ff      	adds	r3, #255	@ 0xff
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	b29a      	uxth	r2, r3
 800ae66:	187b      	adds	r3, r7, r1
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ae6c:	2076      	movs	r0, #118	@ 0x76
 800ae6e:	183b      	adds	r3, r7, r0
 800ae70:	683a      	ldr	r2, [r7, #0]
 800ae72:	8912      	ldrh	r2, [r2, #8]
 800ae74:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	6959      	ldr	r1, [r3, #20]
 800ae7a:	1d7b      	adds	r3, r7, #5
 800ae7c:	33ff      	adds	r3, #255	@ 0xff
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	b29c      	uxth	r4, r3
 800ae82:	183b      	adds	r3, r7, r0
 800ae84:	881a      	ldrh	r2, [r3, #0]
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	0023      	movs	r3, r4
 800ae8a:	f000 fd57 	bl	800b93c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	18d3      	adds	r3, r2, r3
 800ae98:	881b      	ldrh	r3, [r3, #0]
 800ae9a:	b29a      	uxth	r2, r3
 800ae9c:	200a      	movs	r0, #10
 800ae9e:	183b      	adds	r3, r7, r0
 800aea0:	493b      	ldr	r1, [pc, #236]	@ (800af90 <USB_EPStartXfer+0xb28>)
 800aea2:	400a      	ands	r2, r1
 800aea4:	801a      	strh	r2, [r3, #0]
 800aea6:	183b      	adds	r3, r7, r0
 800aea8:	183a      	adds	r2, r7, r0
 800aeaa:	8812      	ldrh	r2, [r2, #0]
 800aeac:	2110      	movs	r1, #16
 800aeae:	404a      	eors	r2, r1
 800aeb0:	801a      	strh	r2, [r3, #0]
 800aeb2:	183b      	adds	r3, r7, r0
 800aeb4:	183a      	adds	r2, r7, r0
 800aeb6:	8812      	ldrh	r2, [r2, #0]
 800aeb8:	2120      	movs	r1, #32
 800aeba:	404a      	eors	r2, r1
 800aebc:	801a      	strh	r2, [r3, #0]
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	18d3      	adds	r3, r2, r3
 800aec8:	183a      	adds	r2, r7, r0
 800aeca:	8812      	ldrh	r2, [r2, #0]
 800aecc:	4931      	ldr	r1, [pc, #196]	@ (800af94 <USB_EPStartXfer+0xb2c>)
 800aece:	430a      	orrs	r2, r1
 800aed0:	b292      	uxth	r2, r2
 800aed2:	801a      	strh	r2, [r3, #0]
 800aed4:	f000 fbe9 	bl	800b6aa <USB_EPStartXfer+0x1242>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	7b1b      	ldrb	r3, [r3, #12]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d000      	beq.n	800aee2 <USB_EPStartXfer+0xa7a>
 800aee0:	e0a8      	b.n	800b034 <USB_EPStartXfer+0xbcc>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	699a      	ldr	r2, [r3, #24]
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	691b      	ldr	r3, [r3, #16]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d90d      	bls.n	800af0a <USB_EPStartXfer+0xaa2>
      {
        len = ep->maxpacket;
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	691b      	ldr	r3, [r3, #16]
 800aef2:	1d7a      	adds	r2, r7, #5
 800aef4:	32ff      	adds	r2, #255	@ 0xff
 800aef6:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	699a      	ldr	r2, [r3, #24]
 800aefc:	1d7b      	adds	r3, r7, #5
 800aefe:	33ff      	adds	r3, #255	@ 0xff
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	1ad2      	subs	r2, r2, r3
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	619a      	str	r2, [r3, #24]
 800af08:	e007      	b.n	800af1a <USB_EPStartXfer+0xab2>
      }
      else
      {
        len = ep->xfer_len;
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	699b      	ldr	r3, [r3, #24]
 800af0e:	1d7a      	adds	r2, r7, #5
 800af10:	32ff      	adds	r2, #255	@ 0xff
 800af12:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	2200      	movs	r2, #0
 800af18:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2190      	movs	r1, #144	@ 0x90
 800af1e:	187a      	adds	r2, r7, r1
 800af20:	6013      	str	r3, [r2, #0]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2250      	movs	r2, #80	@ 0x50
 800af26:	5a9b      	ldrh	r3, [r3, r2]
 800af28:	b29b      	uxth	r3, r3
 800af2a:	001a      	movs	r2, r3
 800af2c:	187b      	adds	r3, r7, r1
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	189b      	adds	r3, r3, r2
 800af32:	187a      	adds	r2, r7, r1
 800af34:	6013      	str	r3, [r2, #0]
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	00da      	lsls	r2, r3, #3
 800af3c:	187b      	adds	r3, r7, r1
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	18d3      	adds	r3, r2, r3
 800af42:	4a10      	ldr	r2, [pc, #64]	@ (800af84 <USB_EPStartXfer+0xb1c>)
 800af44:	4694      	mov	ip, r2
 800af46:	4463      	add	r3, ip
 800af48:	218c      	movs	r1, #140	@ 0x8c
 800af4a:	187a      	adds	r2, r7, r1
 800af4c:	6013      	str	r3, [r2, #0]
 800af4e:	187b      	adds	r3, r7, r1
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	881b      	ldrh	r3, [r3, #0]
 800af54:	b29b      	uxth	r3, r3
 800af56:	059b      	lsls	r3, r3, #22
 800af58:	0d9b      	lsrs	r3, r3, #22
 800af5a:	b29a      	uxth	r2, r3
 800af5c:	187b      	adds	r3, r7, r1
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	801a      	strh	r2, [r3, #0]
 800af62:	1d7b      	adds	r3, r7, #5
 800af64:	33ff      	adds	r3, #255	@ 0xff
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d115      	bne.n	800af98 <USB_EPStartXfer+0xb30>
 800af6c:	187b      	adds	r3, r7, r1
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	881b      	ldrh	r3, [r3, #0]
 800af72:	b29b      	uxth	r3, r3
 800af74:	4a04      	ldr	r2, [pc, #16]	@ (800af88 <USB_EPStartXfer+0xb20>)
 800af76:	4313      	orrs	r3, r2
 800af78:	b29a      	uxth	r2, r3
 800af7a:	187b      	adds	r3, r7, r1
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	801a      	strh	r2, [r3, #0]
 800af80:	e36e      	b.n	800b660 <USB_EPStartXfer+0x11f8>
 800af82:	46c0      	nop			@ (mov r8, r8)
 800af84:	00000406 	.word	0x00000406
 800af88:	ffff8000 	.word	0xffff8000
 800af8c:	00000402 	.word	0x00000402
 800af90:	ffff8fbf 	.word	0xffff8fbf
 800af94:	ffff8080 	.word	0xffff8080
 800af98:	1d7b      	adds	r3, r7, #5
 800af9a:	33ff      	adds	r3, #255	@ 0xff
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2b3e      	cmp	r3, #62	@ 0x3e
 800afa0:	d822      	bhi.n	800afe8 <USB_EPStartXfer+0xb80>
 800afa2:	1d7b      	adds	r3, r7, #5
 800afa4:	33ff      	adds	r3, #255	@ 0xff
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	085b      	lsrs	r3, r3, #1
 800afaa:	21e8      	movs	r1, #232	@ 0xe8
 800afac:	187a      	adds	r2, r7, r1
 800afae:	6013      	str	r3, [r2, #0]
 800afb0:	1d7b      	adds	r3, r7, #5
 800afb2:	33ff      	adds	r3, #255	@ 0xff
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2201      	movs	r2, #1
 800afb8:	4013      	ands	r3, r2
 800afba:	d004      	beq.n	800afc6 <USB_EPStartXfer+0xb5e>
 800afbc:	187b      	adds	r3, r7, r1
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	3301      	adds	r3, #1
 800afc2:	187a      	adds	r2, r7, r1
 800afc4:	6013      	str	r3, [r2, #0]
 800afc6:	218c      	movs	r1, #140	@ 0x8c
 800afc8:	187b      	adds	r3, r7, r1
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	881b      	ldrh	r3, [r3, #0]
 800afce:	b29a      	uxth	r2, r3
 800afd0:	23e8      	movs	r3, #232	@ 0xe8
 800afd2:	18fb      	adds	r3, r7, r3
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	029b      	lsls	r3, r3, #10
 800afda:	b29b      	uxth	r3, r3
 800afdc:	4313      	orrs	r3, r2
 800afde:	b29a      	uxth	r2, r3
 800afe0:	187b      	adds	r3, r7, r1
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	801a      	strh	r2, [r3, #0]
 800afe6:	e33b      	b.n	800b660 <USB_EPStartXfer+0x11f8>
 800afe8:	1d7b      	adds	r3, r7, #5
 800afea:	33ff      	adds	r3, #255	@ 0xff
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	095b      	lsrs	r3, r3, #5
 800aff0:	21e8      	movs	r1, #232	@ 0xe8
 800aff2:	187a      	adds	r2, r7, r1
 800aff4:	6013      	str	r3, [r2, #0]
 800aff6:	1d7b      	adds	r3, r7, #5
 800aff8:	33ff      	adds	r3, #255	@ 0xff
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	221f      	movs	r2, #31
 800affe:	4013      	ands	r3, r2
 800b000:	d104      	bne.n	800b00c <USB_EPStartXfer+0xba4>
 800b002:	187b      	adds	r3, r7, r1
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	3b01      	subs	r3, #1
 800b008:	187a      	adds	r2, r7, r1
 800b00a:	6013      	str	r3, [r2, #0]
 800b00c:	218c      	movs	r1, #140	@ 0x8c
 800b00e:	187b      	adds	r3, r7, r1
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	881b      	ldrh	r3, [r3, #0]
 800b014:	b29a      	uxth	r2, r3
 800b016:	23e8      	movs	r3, #232	@ 0xe8
 800b018:	18fb      	adds	r3, r7, r3
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	029b      	lsls	r3, r3, #10
 800b020:	b29b      	uxth	r3, r3
 800b022:	4313      	orrs	r3, r2
 800b024:	b29b      	uxth	r3, r3
 800b026:	4ad7      	ldr	r2, [pc, #860]	@ (800b384 <USB_EPStartXfer+0xf1c>)
 800b028:	4313      	orrs	r3, r2
 800b02a:	b29a      	uxth	r2, r3
 800b02c:	187b      	adds	r3, r7, r1
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	801a      	strh	r2, [r3, #0]
 800b032:	e315      	b.n	800b660 <USB_EPStartXfer+0x11f8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	78db      	ldrb	r3, [r3, #3]
 800b038:	2b02      	cmp	r3, #2
 800b03a:	d000      	beq.n	800b03e <USB_EPStartXfer+0xbd6>
 800b03c:	e189      	b.n	800b352 <USB_EPStartXfer+0xeea>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	785b      	ldrb	r3, [r3, #1]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d000      	beq.n	800b048 <USB_EPStartXfer+0xbe0>
 800b046:	e07b      	b.n	800b140 <USB_EPStartXfer+0xcd8>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	21ac      	movs	r1, #172	@ 0xac
 800b04c:	187a      	adds	r2, r7, r1
 800b04e:	6013      	str	r3, [r2, #0]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2250      	movs	r2, #80	@ 0x50
 800b054:	5a9b      	ldrh	r3, [r3, r2]
 800b056:	b29b      	uxth	r3, r3
 800b058:	001a      	movs	r2, r3
 800b05a:	187b      	adds	r3, r7, r1
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	189b      	adds	r3, r3, r2
 800b060:	187a      	adds	r2, r7, r1
 800b062:	6013      	str	r3, [r2, #0]
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	00da      	lsls	r2, r3, #3
 800b06a:	187b      	adds	r3, r7, r1
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	18d3      	adds	r3, r2, r3
 800b070:	4ac5      	ldr	r2, [pc, #788]	@ (800b388 <USB_EPStartXfer+0xf20>)
 800b072:	4694      	mov	ip, r2
 800b074:	4463      	add	r3, ip
 800b076:	21a8      	movs	r1, #168	@ 0xa8
 800b078:	187a      	adds	r2, r7, r1
 800b07a:	6013      	str	r3, [r2, #0]
 800b07c:	187b      	adds	r3, r7, r1
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	881b      	ldrh	r3, [r3, #0]
 800b082:	b29b      	uxth	r3, r3
 800b084:	059b      	lsls	r3, r3, #22
 800b086:	0d9b      	lsrs	r3, r3, #22
 800b088:	b29a      	uxth	r2, r3
 800b08a:	187b      	adds	r3, r7, r1
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	801a      	strh	r2, [r3, #0]
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	691b      	ldr	r3, [r3, #16]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d10a      	bne.n	800b0ae <USB_EPStartXfer+0xc46>
 800b098:	187b      	adds	r3, r7, r1
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	881b      	ldrh	r3, [r3, #0]
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	4ab8      	ldr	r2, [pc, #736]	@ (800b384 <USB_EPStartXfer+0xf1c>)
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	b29a      	uxth	r2, r3
 800b0a6:	187b      	adds	r3, r7, r1
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	801a      	strh	r2, [r3, #0]
 800b0ac:	e06c      	b.n	800b188 <USB_EPStartXfer+0xd20>
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	691b      	ldr	r3, [r3, #16]
 800b0b2:	2b3e      	cmp	r3, #62	@ 0x3e
 800b0b4:	d820      	bhi.n	800b0f8 <USB_EPStartXfer+0xc90>
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	691b      	ldr	r3, [r3, #16]
 800b0ba:	085b      	lsrs	r3, r3, #1
 800b0bc:	21e4      	movs	r1, #228	@ 0xe4
 800b0be:	187a      	adds	r2, r7, r1
 800b0c0:	6013      	str	r3, [r2, #0]
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	691b      	ldr	r3, [r3, #16]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	4013      	ands	r3, r2
 800b0ca:	d004      	beq.n	800b0d6 <USB_EPStartXfer+0xc6e>
 800b0cc:	187b      	adds	r3, r7, r1
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	187a      	adds	r2, r7, r1
 800b0d4:	6013      	str	r3, [r2, #0]
 800b0d6:	21a8      	movs	r1, #168	@ 0xa8
 800b0d8:	187b      	adds	r3, r7, r1
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	881b      	ldrh	r3, [r3, #0]
 800b0de:	b29a      	uxth	r2, r3
 800b0e0:	23e4      	movs	r3, #228	@ 0xe4
 800b0e2:	18fb      	adds	r3, r7, r3
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	029b      	lsls	r3, r3, #10
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	b29a      	uxth	r2, r3
 800b0f0:	187b      	adds	r3, r7, r1
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	801a      	strh	r2, [r3, #0]
 800b0f6:	e047      	b.n	800b188 <USB_EPStartXfer+0xd20>
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	691b      	ldr	r3, [r3, #16]
 800b0fc:	095b      	lsrs	r3, r3, #5
 800b0fe:	21e4      	movs	r1, #228	@ 0xe4
 800b100:	187a      	adds	r2, r7, r1
 800b102:	6013      	str	r3, [r2, #0]
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	221f      	movs	r2, #31
 800b10a:	4013      	ands	r3, r2
 800b10c:	d104      	bne.n	800b118 <USB_EPStartXfer+0xcb0>
 800b10e:	187b      	adds	r3, r7, r1
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	3b01      	subs	r3, #1
 800b114:	187a      	adds	r2, r7, r1
 800b116:	6013      	str	r3, [r2, #0]
 800b118:	21a8      	movs	r1, #168	@ 0xa8
 800b11a:	187b      	adds	r3, r7, r1
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	881b      	ldrh	r3, [r3, #0]
 800b120:	b29a      	uxth	r2, r3
 800b122:	23e4      	movs	r3, #228	@ 0xe4
 800b124:	18fb      	adds	r3, r7, r3
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	b29b      	uxth	r3, r3
 800b12a:	029b      	lsls	r3, r3, #10
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	4313      	orrs	r3, r2
 800b130:	b29b      	uxth	r3, r3
 800b132:	4a94      	ldr	r2, [pc, #592]	@ (800b384 <USB_EPStartXfer+0xf1c>)
 800b134:	4313      	orrs	r3, r2
 800b136:	b29a      	uxth	r2, r3
 800b138:	187b      	adds	r3, r7, r1
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	801a      	strh	r2, [r3, #0]
 800b13e:	e023      	b.n	800b188 <USB_EPStartXfer+0xd20>
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	785b      	ldrb	r3, [r3, #1]
 800b144:	2b01      	cmp	r3, #1
 800b146:	d11f      	bne.n	800b188 <USB_EPStartXfer+0xd20>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	21b4      	movs	r1, #180	@ 0xb4
 800b14c:	187a      	adds	r2, r7, r1
 800b14e:	6013      	str	r3, [r2, #0]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2250      	movs	r2, #80	@ 0x50
 800b154:	5a9b      	ldrh	r3, [r3, r2]
 800b156:	b29b      	uxth	r3, r3
 800b158:	001a      	movs	r2, r3
 800b15a:	187b      	adds	r3, r7, r1
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	189b      	adds	r3, r3, r2
 800b160:	187a      	adds	r2, r7, r1
 800b162:	6013      	str	r3, [r2, #0]
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	00da      	lsls	r2, r3, #3
 800b16a:	187b      	adds	r3, r7, r1
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	18d3      	adds	r3, r2, r3
 800b170:	4a85      	ldr	r2, [pc, #532]	@ (800b388 <USB_EPStartXfer+0xf20>)
 800b172:	4694      	mov	ip, r2
 800b174:	4463      	add	r3, ip
 800b176:	21b0      	movs	r1, #176	@ 0xb0
 800b178:	187a      	adds	r2, r7, r1
 800b17a:	6013      	str	r3, [r2, #0]
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	691b      	ldr	r3, [r3, #16]
 800b180:	b29a      	uxth	r2, r3
 800b182:	187b      	adds	r3, r7, r1
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	801a      	strh	r2, [r3, #0]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	22a4      	movs	r2, #164	@ 0xa4
 800b18c:	18ba      	adds	r2, r7, r2
 800b18e:	6013      	str	r3, [r2, #0]
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	785b      	ldrb	r3, [r3, #1]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d000      	beq.n	800b19a <USB_EPStartXfer+0xd32>
 800b198:	e07b      	b.n	800b292 <USB_EPStartXfer+0xe2a>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	219c      	movs	r1, #156	@ 0x9c
 800b19e:	187a      	adds	r2, r7, r1
 800b1a0:	6013      	str	r3, [r2, #0]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2250      	movs	r2, #80	@ 0x50
 800b1a6:	5a9b      	ldrh	r3, [r3, r2]
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	001a      	movs	r2, r3
 800b1ac:	187b      	adds	r3, r7, r1
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	189b      	adds	r3, r3, r2
 800b1b2:	187a      	adds	r2, r7, r1
 800b1b4:	6013      	str	r3, [r2, #0]
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	00da      	lsls	r2, r3, #3
 800b1bc:	187b      	adds	r3, r7, r1
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	18d3      	adds	r3, r2, r3
 800b1c2:	4a72      	ldr	r2, [pc, #456]	@ (800b38c <USB_EPStartXfer+0xf24>)
 800b1c4:	4694      	mov	ip, r2
 800b1c6:	4463      	add	r3, ip
 800b1c8:	2198      	movs	r1, #152	@ 0x98
 800b1ca:	187a      	adds	r2, r7, r1
 800b1cc:	6013      	str	r3, [r2, #0]
 800b1ce:	187b      	adds	r3, r7, r1
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	881b      	ldrh	r3, [r3, #0]
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	059b      	lsls	r3, r3, #22
 800b1d8:	0d9b      	lsrs	r3, r3, #22
 800b1da:	b29a      	uxth	r2, r3
 800b1dc:	187b      	adds	r3, r7, r1
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	801a      	strh	r2, [r3, #0]
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	691b      	ldr	r3, [r3, #16]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d10a      	bne.n	800b200 <USB_EPStartXfer+0xd98>
 800b1ea:	187b      	adds	r3, r7, r1
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	881b      	ldrh	r3, [r3, #0]
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	4a64      	ldr	r2, [pc, #400]	@ (800b384 <USB_EPStartXfer+0xf1c>)
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	b29a      	uxth	r2, r3
 800b1f8:	187b      	adds	r3, r7, r1
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	801a      	strh	r2, [r3, #0]
 800b1fe:	e069      	b.n	800b2d4 <USB_EPStartXfer+0xe6c>
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	691b      	ldr	r3, [r3, #16]
 800b204:	2b3e      	cmp	r3, #62	@ 0x3e
 800b206:	d820      	bhi.n	800b24a <USB_EPStartXfer+0xde2>
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	691b      	ldr	r3, [r3, #16]
 800b20c:	085b      	lsrs	r3, r3, #1
 800b20e:	21e0      	movs	r1, #224	@ 0xe0
 800b210:	187a      	adds	r2, r7, r1
 800b212:	6013      	str	r3, [r2, #0]
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	691b      	ldr	r3, [r3, #16]
 800b218:	2201      	movs	r2, #1
 800b21a:	4013      	ands	r3, r2
 800b21c:	d004      	beq.n	800b228 <USB_EPStartXfer+0xdc0>
 800b21e:	187b      	adds	r3, r7, r1
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	3301      	adds	r3, #1
 800b224:	187a      	adds	r2, r7, r1
 800b226:	6013      	str	r3, [r2, #0]
 800b228:	2198      	movs	r1, #152	@ 0x98
 800b22a:	187b      	adds	r3, r7, r1
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	881b      	ldrh	r3, [r3, #0]
 800b230:	b29a      	uxth	r2, r3
 800b232:	23e0      	movs	r3, #224	@ 0xe0
 800b234:	18fb      	adds	r3, r7, r3
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	b29b      	uxth	r3, r3
 800b23a:	029b      	lsls	r3, r3, #10
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	4313      	orrs	r3, r2
 800b240:	b29a      	uxth	r2, r3
 800b242:	187b      	adds	r3, r7, r1
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	801a      	strh	r2, [r3, #0]
 800b248:	e044      	b.n	800b2d4 <USB_EPStartXfer+0xe6c>
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	691b      	ldr	r3, [r3, #16]
 800b24e:	095b      	lsrs	r3, r3, #5
 800b250:	21e0      	movs	r1, #224	@ 0xe0
 800b252:	187a      	adds	r2, r7, r1
 800b254:	6013      	str	r3, [r2, #0]
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	691b      	ldr	r3, [r3, #16]
 800b25a:	221f      	movs	r2, #31
 800b25c:	4013      	ands	r3, r2
 800b25e:	d104      	bne.n	800b26a <USB_EPStartXfer+0xe02>
 800b260:	187b      	adds	r3, r7, r1
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	3b01      	subs	r3, #1
 800b266:	187a      	adds	r2, r7, r1
 800b268:	6013      	str	r3, [r2, #0]
 800b26a:	2198      	movs	r1, #152	@ 0x98
 800b26c:	187b      	adds	r3, r7, r1
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	881b      	ldrh	r3, [r3, #0]
 800b272:	b29a      	uxth	r2, r3
 800b274:	23e0      	movs	r3, #224	@ 0xe0
 800b276:	18fb      	adds	r3, r7, r3
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	029b      	lsls	r3, r3, #10
 800b27e:	b29b      	uxth	r3, r3
 800b280:	4313      	orrs	r3, r2
 800b282:	b29b      	uxth	r3, r3
 800b284:	4a3f      	ldr	r2, [pc, #252]	@ (800b384 <USB_EPStartXfer+0xf1c>)
 800b286:	4313      	orrs	r3, r2
 800b288:	b29a      	uxth	r2, r3
 800b28a:	187b      	adds	r3, r7, r1
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	801a      	strh	r2, [r3, #0]
 800b290:	e020      	b.n	800b2d4 <USB_EPStartXfer+0xe6c>
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	785b      	ldrb	r3, [r3, #1]
 800b296:	2b01      	cmp	r3, #1
 800b298:	d11c      	bne.n	800b2d4 <USB_EPStartXfer+0xe6c>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2250      	movs	r2, #80	@ 0x50
 800b29e:	5a9b      	ldrh	r3, [r3, r2]
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	001a      	movs	r2, r3
 800b2a4:	21a4      	movs	r1, #164	@ 0xa4
 800b2a6:	187b      	adds	r3, r7, r1
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	189b      	adds	r3, r3, r2
 800b2ac:	187a      	adds	r2, r7, r1
 800b2ae:	6013      	str	r3, [r2, #0]
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	00da      	lsls	r2, r3, #3
 800b2b6:	187b      	adds	r3, r7, r1
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	18d3      	adds	r3, r2, r3
 800b2bc:	4a33      	ldr	r2, [pc, #204]	@ (800b38c <USB_EPStartXfer+0xf24>)
 800b2be:	4694      	mov	ip, r2
 800b2c0:	4463      	add	r3, ip
 800b2c2:	21a0      	movs	r1, #160	@ 0xa0
 800b2c4:	187a      	adds	r2, r7, r1
 800b2c6:	6013      	str	r3, [r2, #0]
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	691b      	ldr	r3, [r3, #16]
 800b2cc:	b29a      	uxth	r2, r3
 800b2ce:	187b      	adds	r3, r7, r1
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	69db      	ldr	r3, [r3, #28]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d100      	bne.n	800b2de <USB_EPStartXfer+0xe76>
 800b2dc:	e1c0      	b.n	800b660 <USB_EPStartXfer+0x11f8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	18d2      	adds	r2, r2, r3
 800b2e8:	2196      	movs	r1, #150	@ 0x96
 800b2ea:	187b      	adds	r3, r7, r1
 800b2ec:	8812      	ldrh	r2, [r2, #0]
 800b2ee:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b2f0:	187b      	adds	r3, r7, r1
 800b2f2:	881a      	ldrh	r2, [r3, #0]
 800b2f4:	2380      	movs	r3, #128	@ 0x80
 800b2f6:	01db      	lsls	r3, r3, #7
 800b2f8:	4013      	ands	r3, r2
 800b2fa:	d004      	beq.n	800b306 <USB_EPStartXfer+0xe9e>
 800b2fc:	187b      	adds	r3, r7, r1
 800b2fe:	881b      	ldrh	r3, [r3, #0]
 800b300:	2240      	movs	r2, #64	@ 0x40
 800b302:	4013      	ands	r3, r2
 800b304:	d10d      	bne.n	800b322 <USB_EPStartXfer+0xeba>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b306:	2196      	movs	r1, #150	@ 0x96
 800b308:	187b      	adds	r3, r7, r1
 800b30a:	881a      	ldrh	r2, [r3, #0]
 800b30c:	2380      	movs	r3, #128	@ 0x80
 800b30e:	01db      	lsls	r3, r3, #7
 800b310:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b312:	d000      	beq.n	800b316 <USB_EPStartXfer+0xeae>
 800b314:	e1a4      	b.n	800b660 <USB_EPStartXfer+0x11f8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b316:	187b      	adds	r3, r7, r1
 800b318:	881b      	ldrh	r3, [r3, #0]
 800b31a:	2240      	movs	r2, #64	@ 0x40
 800b31c:	4013      	ands	r3, r2
 800b31e:	d000      	beq.n	800b322 <USB_EPStartXfer+0xeba>
 800b320:	e19e      	b.n	800b660 <USB_EPStartXfer+0x11f8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	009b      	lsls	r3, r3, #2
 800b32a:	18d3      	adds	r3, r2, r3
 800b32c:	881b      	ldrh	r3, [r3, #0]
 800b32e:	b29a      	uxth	r2, r3
 800b330:	2094      	movs	r0, #148	@ 0x94
 800b332:	183b      	adds	r3, r7, r0
 800b334:	4916      	ldr	r1, [pc, #88]	@ (800b390 <USB_EPStartXfer+0xf28>)
 800b336:	400a      	ands	r2, r1
 800b338:	801a      	strh	r2, [r3, #0]
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	18d3      	adds	r3, r2, r3
 800b344:	183a      	adds	r2, r7, r0
 800b346:	8812      	ldrh	r2, [r2, #0]
 800b348:	4912      	ldr	r1, [pc, #72]	@ (800b394 <USB_EPStartXfer+0xf2c>)
 800b34a:	430a      	orrs	r2, r1
 800b34c:	b292      	uxth	r2, r2
 800b34e:	801a      	strh	r2, [r3, #0]
 800b350:	e186      	b.n	800b660 <USB_EPStartXfer+0x11f8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	78db      	ldrb	r3, [r3, #3]
 800b356:	2b01      	cmp	r3, #1
 800b358:	d000      	beq.n	800b35c <USB_EPStartXfer+0xef4>
 800b35a:	e17f      	b.n	800b65c <USB_EPStartXfer+0x11f4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	699a      	ldr	r2, [r3, #24]
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	691b      	ldr	r3, [r3, #16]
 800b364:	429a      	cmp	r2, r3
 800b366:	d917      	bls.n	800b398 <USB_EPStartXfer+0xf30>
        {
          len = ep->maxpacket;
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	691b      	ldr	r3, [r3, #16]
 800b36c:	1d7a      	adds	r2, r7, #5
 800b36e:	32ff      	adds	r2, #255	@ 0xff
 800b370:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	699a      	ldr	r2, [r3, #24]
 800b376:	1d7b      	adds	r3, r7, #5
 800b378:	33ff      	adds	r3, #255	@ 0xff
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	1ad2      	subs	r2, r2, r3
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	619a      	str	r2, [r3, #24]
 800b382:	e011      	b.n	800b3a8 <USB_EPStartXfer+0xf40>
 800b384:	ffff8000 	.word	0xffff8000
 800b388:	00000402 	.word	0x00000402
 800b38c:	00000406 	.word	0x00000406
 800b390:	ffff8f8f 	.word	0xffff8f8f
 800b394:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	699b      	ldr	r3, [r3, #24]
 800b39c:	1d7a      	adds	r2, r7, #5
 800b39e:	32ff      	adds	r2, #255	@ 0xff
 800b3a0:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	785b      	ldrb	r3, [r3, #1]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d000      	beq.n	800b3b2 <USB_EPStartXfer+0xf4a>
 800b3b0:	e081      	b.n	800b4b6 <USB_EPStartXfer+0x104e>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	21cc      	movs	r1, #204	@ 0xcc
 800b3b6:	187a      	adds	r2, r7, r1
 800b3b8:	6013      	str	r3, [r2, #0]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2250      	movs	r2, #80	@ 0x50
 800b3be:	5a9b      	ldrh	r3, [r3, r2]
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	001a      	movs	r2, r3
 800b3c4:	187b      	adds	r3, r7, r1
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	189b      	adds	r3, r3, r2
 800b3ca:	187a      	adds	r2, r7, r1
 800b3cc:	6013      	str	r3, [r2, #0]
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	00da      	lsls	r2, r3, #3
 800b3d4:	187b      	adds	r3, r7, r1
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	18d3      	adds	r3, r2, r3
 800b3da:	4ab6      	ldr	r2, [pc, #728]	@ (800b6b4 <USB_EPStartXfer+0x124c>)
 800b3dc:	4694      	mov	ip, r2
 800b3de:	4463      	add	r3, ip
 800b3e0:	21c8      	movs	r1, #200	@ 0xc8
 800b3e2:	187a      	adds	r2, r7, r1
 800b3e4:	6013      	str	r3, [r2, #0]
 800b3e6:	187b      	adds	r3, r7, r1
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	881b      	ldrh	r3, [r3, #0]
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	059b      	lsls	r3, r3, #22
 800b3f0:	0d9b      	lsrs	r3, r3, #22
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	187b      	adds	r3, r7, r1
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	801a      	strh	r2, [r3, #0]
 800b3fa:	1d7b      	adds	r3, r7, #5
 800b3fc:	33ff      	adds	r3, #255	@ 0xff
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d10a      	bne.n	800b41a <USB_EPStartXfer+0xfb2>
 800b404:	187b      	adds	r3, r7, r1
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	881b      	ldrh	r3, [r3, #0]
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	4aaa      	ldr	r2, [pc, #680]	@ (800b6b8 <USB_EPStartXfer+0x1250>)
 800b40e:	4313      	orrs	r3, r2
 800b410:	b29a      	uxth	r2, r3
 800b412:	187b      	adds	r3, r7, r1
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	801a      	strh	r2, [r3, #0]
 800b418:	e072      	b.n	800b500 <USB_EPStartXfer+0x1098>
 800b41a:	1d7b      	adds	r3, r7, #5
 800b41c:	33ff      	adds	r3, #255	@ 0xff
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	2b3e      	cmp	r3, #62	@ 0x3e
 800b422:	d822      	bhi.n	800b46a <USB_EPStartXfer+0x1002>
 800b424:	1d7b      	adds	r3, r7, #5
 800b426:	33ff      	adds	r3, #255	@ 0xff
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	085b      	lsrs	r3, r3, #1
 800b42c:	21dc      	movs	r1, #220	@ 0xdc
 800b42e:	187a      	adds	r2, r7, r1
 800b430:	6013      	str	r3, [r2, #0]
 800b432:	1d7b      	adds	r3, r7, #5
 800b434:	33ff      	adds	r3, #255	@ 0xff
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2201      	movs	r2, #1
 800b43a:	4013      	ands	r3, r2
 800b43c:	d004      	beq.n	800b448 <USB_EPStartXfer+0xfe0>
 800b43e:	187b      	adds	r3, r7, r1
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	3301      	adds	r3, #1
 800b444:	187a      	adds	r2, r7, r1
 800b446:	6013      	str	r3, [r2, #0]
 800b448:	21c8      	movs	r1, #200	@ 0xc8
 800b44a:	187b      	adds	r3, r7, r1
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	881b      	ldrh	r3, [r3, #0]
 800b450:	b29a      	uxth	r2, r3
 800b452:	23dc      	movs	r3, #220	@ 0xdc
 800b454:	18fb      	adds	r3, r7, r3
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	b29b      	uxth	r3, r3
 800b45a:	029b      	lsls	r3, r3, #10
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	4313      	orrs	r3, r2
 800b460:	b29a      	uxth	r2, r3
 800b462:	187b      	adds	r3, r7, r1
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	801a      	strh	r2, [r3, #0]
 800b468:	e04a      	b.n	800b500 <USB_EPStartXfer+0x1098>
 800b46a:	1d7b      	adds	r3, r7, #5
 800b46c:	33ff      	adds	r3, #255	@ 0xff
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	095b      	lsrs	r3, r3, #5
 800b472:	21dc      	movs	r1, #220	@ 0xdc
 800b474:	187a      	adds	r2, r7, r1
 800b476:	6013      	str	r3, [r2, #0]
 800b478:	1d7b      	adds	r3, r7, #5
 800b47a:	33ff      	adds	r3, #255	@ 0xff
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	221f      	movs	r2, #31
 800b480:	4013      	ands	r3, r2
 800b482:	d104      	bne.n	800b48e <USB_EPStartXfer+0x1026>
 800b484:	187b      	adds	r3, r7, r1
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	3b01      	subs	r3, #1
 800b48a:	187a      	adds	r2, r7, r1
 800b48c:	6013      	str	r3, [r2, #0]
 800b48e:	21c8      	movs	r1, #200	@ 0xc8
 800b490:	187b      	adds	r3, r7, r1
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	881b      	ldrh	r3, [r3, #0]
 800b496:	b29a      	uxth	r2, r3
 800b498:	23dc      	movs	r3, #220	@ 0xdc
 800b49a:	18fb      	adds	r3, r7, r3
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	029b      	lsls	r3, r3, #10
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	4a83      	ldr	r2, [pc, #524]	@ (800b6b8 <USB_EPStartXfer+0x1250>)
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	b29a      	uxth	r2, r3
 800b4ae:	187b      	adds	r3, r7, r1
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	801a      	strh	r2, [r3, #0]
 800b4b4:	e024      	b.n	800b500 <USB_EPStartXfer+0x1098>
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	785b      	ldrb	r3, [r3, #1]
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d120      	bne.n	800b500 <USB_EPStartXfer+0x1098>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	21d4      	movs	r1, #212	@ 0xd4
 800b4c2:	187a      	adds	r2, r7, r1
 800b4c4:	6013      	str	r3, [r2, #0]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2250      	movs	r2, #80	@ 0x50
 800b4ca:	5a9b      	ldrh	r3, [r3, r2]
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	001a      	movs	r2, r3
 800b4d0:	187b      	adds	r3, r7, r1
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	189b      	adds	r3, r3, r2
 800b4d6:	187a      	adds	r2, r7, r1
 800b4d8:	6013      	str	r3, [r2, #0]
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	00da      	lsls	r2, r3, #3
 800b4e0:	187b      	adds	r3, r7, r1
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	18d3      	adds	r3, r2, r3
 800b4e6:	4a73      	ldr	r2, [pc, #460]	@ (800b6b4 <USB_EPStartXfer+0x124c>)
 800b4e8:	4694      	mov	ip, r2
 800b4ea:	4463      	add	r3, ip
 800b4ec:	21d0      	movs	r1, #208	@ 0xd0
 800b4ee:	187a      	adds	r2, r7, r1
 800b4f0:	6013      	str	r3, [r2, #0]
 800b4f2:	1d7b      	adds	r3, r7, #5
 800b4f4:	33ff      	adds	r3, #255	@ 0xff
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	b29a      	uxth	r2, r3
 800b4fa:	187b      	adds	r3, r7, r1
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	801a      	strh	r2, [r3, #0]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	22c4      	movs	r2, #196	@ 0xc4
 800b504:	18ba      	adds	r2, r7, r2
 800b506:	6013      	str	r3, [r2, #0]
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	785b      	ldrb	r3, [r3, #1]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d000      	beq.n	800b512 <USB_EPStartXfer+0x10aa>
 800b510:	e081      	b.n	800b616 <USB_EPStartXfer+0x11ae>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	21bc      	movs	r1, #188	@ 0xbc
 800b516:	187a      	adds	r2, r7, r1
 800b518:	6013      	str	r3, [r2, #0]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2250      	movs	r2, #80	@ 0x50
 800b51e:	5a9b      	ldrh	r3, [r3, r2]
 800b520:	b29b      	uxth	r3, r3
 800b522:	001a      	movs	r2, r3
 800b524:	187b      	adds	r3, r7, r1
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	189b      	adds	r3, r3, r2
 800b52a:	187a      	adds	r2, r7, r1
 800b52c:	6013      	str	r3, [r2, #0]
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	781b      	ldrb	r3, [r3, #0]
 800b532:	00da      	lsls	r2, r3, #3
 800b534:	187b      	adds	r3, r7, r1
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	18d3      	adds	r3, r2, r3
 800b53a:	4a60      	ldr	r2, [pc, #384]	@ (800b6bc <USB_EPStartXfer+0x1254>)
 800b53c:	4694      	mov	ip, r2
 800b53e:	4463      	add	r3, ip
 800b540:	21b8      	movs	r1, #184	@ 0xb8
 800b542:	187a      	adds	r2, r7, r1
 800b544:	6013      	str	r3, [r2, #0]
 800b546:	187b      	adds	r3, r7, r1
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	881b      	ldrh	r3, [r3, #0]
 800b54c:	b29b      	uxth	r3, r3
 800b54e:	059b      	lsls	r3, r3, #22
 800b550:	0d9b      	lsrs	r3, r3, #22
 800b552:	b29a      	uxth	r2, r3
 800b554:	187b      	adds	r3, r7, r1
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	801a      	strh	r2, [r3, #0]
 800b55a:	1d7b      	adds	r3, r7, #5
 800b55c:	33ff      	adds	r3, #255	@ 0xff
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d10a      	bne.n	800b57a <USB_EPStartXfer+0x1112>
 800b564:	187b      	adds	r3, r7, r1
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	881b      	ldrh	r3, [r3, #0]
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	4a52      	ldr	r2, [pc, #328]	@ (800b6b8 <USB_EPStartXfer+0x1250>)
 800b56e:	4313      	orrs	r3, r2
 800b570:	b29a      	uxth	r2, r3
 800b572:	187b      	adds	r3, r7, r1
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	801a      	strh	r2, [r3, #0]
 800b578:	e072      	b.n	800b660 <USB_EPStartXfer+0x11f8>
 800b57a:	1d7b      	adds	r3, r7, #5
 800b57c:	33ff      	adds	r3, #255	@ 0xff
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	2b3e      	cmp	r3, #62	@ 0x3e
 800b582:	d822      	bhi.n	800b5ca <USB_EPStartXfer+0x1162>
 800b584:	1d7b      	adds	r3, r7, #5
 800b586:	33ff      	adds	r3, #255	@ 0xff
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	085b      	lsrs	r3, r3, #1
 800b58c:	21d8      	movs	r1, #216	@ 0xd8
 800b58e:	187a      	adds	r2, r7, r1
 800b590:	6013      	str	r3, [r2, #0]
 800b592:	1d7b      	adds	r3, r7, #5
 800b594:	33ff      	adds	r3, #255	@ 0xff
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	2201      	movs	r2, #1
 800b59a:	4013      	ands	r3, r2
 800b59c:	d004      	beq.n	800b5a8 <USB_EPStartXfer+0x1140>
 800b59e:	187b      	adds	r3, r7, r1
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	187a      	adds	r2, r7, r1
 800b5a6:	6013      	str	r3, [r2, #0]
 800b5a8:	21b8      	movs	r1, #184	@ 0xb8
 800b5aa:	187b      	adds	r3, r7, r1
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	881b      	ldrh	r3, [r3, #0]
 800b5b0:	b29a      	uxth	r2, r3
 800b5b2:	23d8      	movs	r3, #216	@ 0xd8
 800b5b4:	18fb      	adds	r3, r7, r3
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	029b      	lsls	r3, r3, #10
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	b29a      	uxth	r2, r3
 800b5c2:	187b      	adds	r3, r7, r1
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	801a      	strh	r2, [r3, #0]
 800b5c8:	e04a      	b.n	800b660 <USB_EPStartXfer+0x11f8>
 800b5ca:	1d7b      	adds	r3, r7, #5
 800b5cc:	33ff      	adds	r3, #255	@ 0xff
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	095b      	lsrs	r3, r3, #5
 800b5d2:	21d8      	movs	r1, #216	@ 0xd8
 800b5d4:	187a      	adds	r2, r7, r1
 800b5d6:	6013      	str	r3, [r2, #0]
 800b5d8:	1d7b      	adds	r3, r7, #5
 800b5da:	33ff      	adds	r3, #255	@ 0xff
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	221f      	movs	r2, #31
 800b5e0:	4013      	ands	r3, r2
 800b5e2:	d104      	bne.n	800b5ee <USB_EPStartXfer+0x1186>
 800b5e4:	187b      	adds	r3, r7, r1
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	187a      	adds	r2, r7, r1
 800b5ec:	6013      	str	r3, [r2, #0]
 800b5ee:	21b8      	movs	r1, #184	@ 0xb8
 800b5f0:	187b      	adds	r3, r7, r1
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	881b      	ldrh	r3, [r3, #0]
 800b5f6:	b29a      	uxth	r2, r3
 800b5f8:	23d8      	movs	r3, #216	@ 0xd8
 800b5fa:	18fb      	adds	r3, r7, r3
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	029b      	lsls	r3, r3, #10
 800b602:	b29b      	uxth	r3, r3
 800b604:	4313      	orrs	r3, r2
 800b606:	b29b      	uxth	r3, r3
 800b608:	4a2b      	ldr	r2, [pc, #172]	@ (800b6b8 <USB_EPStartXfer+0x1250>)
 800b60a:	4313      	orrs	r3, r2
 800b60c:	b29a      	uxth	r2, r3
 800b60e:	187b      	adds	r3, r7, r1
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	801a      	strh	r2, [r3, #0]
 800b614:	e024      	b.n	800b660 <USB_EPStartXfer+0x11f8>
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	785b      	ldrb	r3, [r3, #1]
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d120      	bne.n	800b660 <USB_EPStartXfer+0x11f8>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2250      	movs	r2, #80	@ 0x50
 800b622:	5a9b      	ldrh	r3, [r3, r2]
 800b624:	b29b      	uxth	r3, r3
 800b626:	001a      	movs	r2, r3
 800b628:	21c4      	movs	r1, #196	@ 0xc4
 800b62a:	187b      	adds	r3, r7, r1
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	189b      	adds	r3, r3, r2
 800b630:	187a      	adds	r2, r7, r1
 800b632:	6013      	str	r3, [r2, #0]
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	00da      	lsls	r2, r3, #3
 800b63a:	187b      	adds	r3, r7, r1
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	18d3      	adds	r3, r2, r3
 800b640:	4a1e      	ldr	r2, [pc, #120]	@ (800b6bc <USB_EPStartXfer+0x1254>)
 800b642:	4694      	mov	ip, r2
 800b644:	4463      	add	r3, ip
 800b646:	21c0      	movs	r1, #192	@ 0xc0
 800b648:	187a      	adds	r2, r7, r1
 800b64a:	6013      	str	r3, [r2, #0]
 800b64c:	1d7b      	adds	r3, r7, #5
 800b64e:	33ff      	adds	r3, #255	@ 0xff
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	b29a      	uxth	r2, r3
 800b654:	187b      	adds	r3, r7, r1
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	801a      	strh	r2, [r3, #0]
 800b65a:	e001      	b.n	800b660 <USB_EPStartXfer+0x11f8>
      }
      else
      {
        return HAL_ERROR;
 800b65c:	2301      	movs	r3, #1
 800b65e:	e025      	b.n	800b6ac <USB_EPStartXfer+0x1244>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	009b      	lsls	r3, r3, #2
 800b668:	18d3      	adds	r3, r2, r3
 800b66a:	881b      	ldrh	r3, [r3, #0]
 800b66c:	b29a      	uxth	r2, r3
 800b66e:	208a      	movs	r0, #138	@ 0x8a
 800b670:	183b      	adds	r3, r7, r0
 800b672:	4913      	ldr	r1, [pc, #76]	@ (800b6c0 <USB_EPStartXfer+0x1258>)
 800b674:	400a      	ands	r2, r1
 800b676:	801a      	strh	r2, [r3, #0]
 800b678:	183b      	adds	r3, r7, r0
 800b67a:	183a      	adds	r2, r7, r0
 800b67c:	8812      	ldrh	r2, [r2, #0]
 800b67e:	2180      	movs	r1, #128	@ 0x80
 800b680:	0149      	lsls	r1, r1, #5
 800b682:	404a      	eors	r2, r1
 800b684:	801a      	strh	r2, [r3, #0]
 800b686:	183b      	adds	r3, r7, r0
 800b688:	183a      	adds	r2, r7, r0
 800b68a:	8812      	ldrh	r2, [r2, #0]
 800b68c:	2180      	movs	r1, #128	@ 0x80
 800b68e:	0189      	lsls	r1, r1, #6
 800b690:	404a      	eors	r2, r1
 800b692:	801a      	strh	r2, [r3, #0]
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	18d3      	adds	r3, r2, r3
 800b69e:	183a      	adds	r2, r7, r0
 800b6a0:	8812      	ldrh	r2, [r2, #0]
 800b6a2:	4908      	ldr	r1, [pc, #32]	@ (800b6c4 <USB_EPStartXfer+0x125c>)
 800b6a4:	430a      	orrs	r2, r1
 800b6a6:	b292      	uxth	r2, r2
 800b6a8:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800b6aa:	2300      	movs	r3, #0
}
 800b6ac:	0018      	movs	r0, r3
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	b043      	add	sp, #268	@ 0x10c
 800b6b2:	bd90      	pop	{r4, r7, pc}
 800b6b4:	00000402 	.word	0x00000402
 800b6b8:	ffff8000 	.word	0xffff8000
 800b6bc:	00000406 	.word	0x00000406
 800b6c0:	ffffbf8f 	.word	0xffffbf8f
 800b6c4:	ffff8080 	.word	0xffff8080

0800b6c8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	785b      	ldrb	r3, [r3, #1]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d01d      	beq.n	800b716 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b6da:	687a      	ldr	r2, [r7, #4]
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	009b      	lsls	r3, r3, #2
 800b6e2:	18d3      	adds	r3, r2, r3
 800b6e4:	881b      	ldrh	r3, [r3, #0]
 800b6e6:	b29a      	uxth	r2, r3
 800b6e8:	200c      	movs	r0, #12
 800b6ea:	183b      	adds	r3, r7, r0
 800b6ec:	491b      	ldr	r1, [pc, #108]	@ (800b75c <USB_EPSetStall+0x94>)
 800b6ee:	400a      	ands	r2, r1
 800b6f0:	801a      	strh	r2, [r3, #0]
 800b6f2:	183b      	adds	r3, r7, r0
 800b6f4:	183a      	adds	r2, r7, r0
 800b6f6:	8812      	ldrh	r2, [r2, #0]
 800b6f8:	2110      	movs	r1, #16
 800b6fa:	404a      	eors	r2, r1
 800b6fc:	801a      	strh	r2, [r3, #0]
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	009b      	lsls	r3, r3, #2
 800b706:	18d3      	adds	r3, r2, r3
 800b708:	183a      	adds	r2, r7, r0
 800b70a:	8812      	ldrh	r2, [r2, #0]
 800b70c:	4914      	ldr	r1, [pc, #80]	@ (800b760 <USB_EPSetStall+0x98>)
 800b70e:	430a      	orrs	r2, r1
 800b710:	b292      	uxth	r2, r2
 800b712:	801a      	strh	r2, [r3, #0]
 800b714:	e01d      	b.n	800b752 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	18d3      	adds	r3, r2, r3
 800b720:	881b      	ldrh	r3, [r3, #0]
 800b722:	b29a      	uxth	r2, r3
 800b724:	200e      	movs	r0, #14
 800b726:	183b      	adds	r3, r7, r0
 800b728:	490e      	ldr	r1, [pc, #56]	@ (800b764 <USB_EPSetStall+0x9c>)
 800b72a:	400a      	ands	r2, r1
 800b72c:	801a      	strh	r2, [r3, #0]
 800b72e:	183b      	adds	r3, r7, r0
 800b730:	183a      	adds	r2, r7, r0
 800b732:	8812      	ldrh	r2, [r2, #0]
 800b734:	2180      	movs	r1, #128	@ 0x80
 800b736:	0149      	lsls	r1, r1, #5
 800b738:	404a      	eors	r2, r1
 800b73a:	801a      	strh	r2, [r3, #0]
 800b73c:	687a      	ldr	r2, [r7, #4]
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	781b      	ldrb	r3, [r3, #0]
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	18d3      	adds	r3, r2, r3
 800b746:	183a      	adds	r2, r7, r0
 800b748:	8812      	ldrh	r2, [r2, #0]
 800b74a:	4905      	ldr	r1, [pc, #20]	@ (800b760 <USB_EPSetStall+0x98>)
 800b74c:	430a      	orrs	r2, r1
 800b74e:	b292      	uxth	r2, r2
 800b750:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800b752:	2300      	movs	r3, #0
}
 800b754:	0018      	movs	r0, r3
 800b756:	46bd      	mov	sp, r7
 800b758:	b004      	add	sp, #16
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	ffff8fbf 	.word	0xffff8fbf
 800b760:	ffff8080 	.word	0xffff8080
 800b764:	ffffbf8f 	.word	0xffffbf8f

0800b768 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b086      	sub	sp, #24
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	7b1b      	ldrb	r3, [r3, #12]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d000      	beq.n	800b77c <USB_EPClearStall+0x14>
 800b77a:	e095      	b.n	800b8a8 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	785b      	ldrb	r3, [r3, #1]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d046      	beq.n	800b812 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	781b      	ldrb	r3, [r3, #0]
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	18d2      	adds	r2, r2, r3
 800b78e:	2110      	movs	r1, #16
 800b790:	187b      	adds	r3, r7, r1
 800b792:	8812      	ldrh	r2, [r2, #0]
 800b794:	801a      	strh	r2, [r3, #0]
 800b796:	187b      	adds	r3, r7, r1
 800b798:	881b      	ldrh	r3, [r3, #0]
 800b79a:	2240      	movs	r2, #64	@ 0x40
 800b79c:	4013      	ands	r3, r2
 800b79e:	d016      	beq.n	800b7ce <USB_EPClearStall+0x66>
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	18d3      	adds	r3, r2, r3
 800b7aa:	881b      	ldrh	r3, [r3, #0]
 800b7ac:	b29a      	uxth	r2, r3
 800b7ae:	200e      	movs	r0, #14
 800b7b0:	183b      	adds	r3, r7, r0
 800b7b2:	4940      	ldr	r1, [pc, #256]	@ (800b8b4 <USB_EPClearStall+0x14c>)
 800b7b4:	400a      	ands	r2, r1
 800b7b6:	801a      	strh	r2, [r3, #0]
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	18d3      	adds	r3, r2, r3
 800b7c2:	183a      	adds	r2, r7, r0
 800b7c4:	8812      	ldrh	r2, [r2, #0]
 800b7c6:	493c      	ldr	r1, [pc, #240]	@ (800b8b8 <USB_EPClearStall+0x150>)
 800b7c8:	430a      	orrs	r2, r1
 800b7ca:	b292      	uxth	r2, r2
 800b7cc:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	78db      	ldrb	r3, [r3, #3]
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d068      	beq.n	800b8a8 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	18d3      	adds	r3, r2, r3
 800b7e0:	881b      	ldrh	r3, [r3, #0]
 800b7e2:	b29a      	uxth	r2, r3
 800b7e4:	200c      	movs	r0, #12
 800b7e6:	183b      	adds	r3, r7, r0
 800b7e8:	4934      	ldr	r1, [pc, #208]	@ (800b8bc <USB_EPClearStall+0x154>)
 800b7ea:	400a      	ands	r2, r1
 800b7ec:	801a      	strh	r2, [r3, #0]
 800b7ee:	183b      	adds	r3, r7, r0
 800b7f0:	183a      	adds	r2, r7, r0
 800b7f2:	8812      	ldrh	r2, [r2, #0]
 800b7f4:	2120      	movs	r1, #32
 800b7f6:	404a      	eors	r2, r1
 800b7f8:	801a      	strh	r2, [r3, #0]
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	009b      	lsls	r3, r3, #2
 800b802:	18d3      	adds	r3, r2, r3
 800b804:	183a      	adds	r2, r7, r0
 800b806:	8812      	ldrh	r2, [r2, #0]
 800b808:	492d      	ldr	r1, [pc, #180]	@ (800b8c0 <USB_EPClearStall+0x158>)
 800b80a:	430a      	orrs	r2, r1
 800b80c:	b292      	uxth	r2, r2
 800b80e:	801a      	strh	r2, [r3, #0]
 800b810:	e04a      	b.n	800b8a8 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	18d2      	adds	r2, r2, r3
 800b81c:	2116      	movs	r1, #22
 800b81e:	187b      	adds	r3, r7, r1
 800b820:	8812      	ldrh	r2, [r2, #0]
 800b822:	801a      	strh	r2, [r3, #0]
 800b824:	187b      	adds	r3, r7, r1
 800b826:	881a      	ldrh	r2, [r3, #0]
 800b828:	2380      	movs	r3, #128	@ 0x80
 800b82a:	01db      	lsls	r3, r3, #7
 800b82c:	4013      	ands	r3, r2
 800b82e:	d016      	beq.n	800b85e <USB_EPClearStall+0xf6>
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	18d3      	adds	r3, r2, r3
 800b83a:	881b      	ldrh	r3, [r3, #0]
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	2014      	movs	r0, #20
 800b840:	183b      	adds	r3, r7, r0
 800b842:	491c      	ldr	r1, [pc, #112]	@ (800b8b4 <USB_EPClearStall+0x14c>)
 800b844:	400a      	ands	r2, r1
 800b846:	801a      	strh	r2, [r3, #0]
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	18d3      	adds	r3, r2, r3
 800b852:	183a      	adds	r2, r7, r0
 800b854:	8812      	ldrh	r2, [r2, #0]
 800b856:	491b      	ldr	r1, [pc, #108]	@ (800b8c4 <USB_EPClearStall+0x15c>)
 800b858:	430a      	orrs	r2, r1
 800b85a:	b292      	uxth	r2, r2
 800b85c:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	18d3      	adds	r3, r2, r3
 800b868:	881b      	ldrh	r3, [r3, #0]
 800b86a:	b29a      	uxth	r2, r3
 800b86c:	2012      	movs	r0, #18
 800b86e:	183b      	adds	r3, r7, r0
 800b870:	4915      	ldr	r1, [pc, #84]	@ (800b8c8 <USB_EPClearStall+0x160>)
 800b872:	400a      	ands	r2, r1
 800b874:	801a      	strh	r2, [r3, #0]
 800b876:	183b      	adds	r3, r7, r0
 800b878:	183a      	adds	r2, r7, r0
 800b87a:	8812      	ldrh	r2, [r2, #0]
 800b87c:	2180      	movs	r1, #128	@ 0x80
 800b87e:	0149      	lsls	r1, r1, #5
 800b880:	404a      	eors	r2, r1
 800b882:	801a      	strh	r2, [r3, #0]
 800b884:	183b      	adds	r3, r7, r0
 800b886:	183a      	adds	r2, r7, r0
 800b888:	8812      	ldrh	r2, [r2, #0]
 800b88a:	2180      	movs	r1, #128	@ 0x80
 800b88c:	0189      	lsls	r1, r1, #6
 800b88e:	404a      	eors	r2, r1
 800b890:	801a      	strh	r2, [r3, #0]
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	18d3      	adds	r3, r2, r3
 800b89c:	183a      	adds	r2, r7, r0
 800b89e:	8812      	ldrh	r2, [r2, #0]
 800b8a0:	4907      	ldr	r1, [pc, #28]	@ (800b8c0 <USB_EPClearStall+0x158>)
 800b8a2:	430a      	orrs	r2, r1
 800b8a4:	b292      	uxth	r2, r2
 800b8a6:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800b8a8:	2300      	movs	r3, #0
}
 800b8aa:	0018      	movs	r0, r3
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	b006      	add	sp, #24
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	46c0      	nop			@ (mov r8, r8)
 800b8b4:	ffff8f8f 	.word	0xffff8f8f
 800b8b8:	ffff80c0 	.word	0xffff80c0
 800b8bc:	ffff8fbf 	.word	0xffff8fbf
 800b8c0:	ffff8080 	.word	0xffff8080
 800b8c4:	ffffc080 	.word	0xffffc080
 800b8c8:	ffffbf8f 	.word	0xffffbf8f

0800b8cc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	000a      	movs	r2, r1
 800b8d6:	1cfb      	adds	r3, r7, #3
 800b8d8:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800b8da:	1cfb      	adds	r3, r7, #3
 800b8dc:	781b      	ldrb	r3, [r3, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d103      	bne.n	800b8ea <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	224c      	movs	r2, #76	@ 0x4c
 800b8e6:	2180      	movs	r1, #128	@ 0x80
 800b8e8:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800b8ea:	2300      	movs	r3, #0
}
 800b8ec:	0018      	movs	r0, r3
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	b002      	add	sp, #8
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2258      	movs	r2, #88	@ 0x58
 800b900:	5a9b      	ldrh	r3, [r3, r2]
 800b902:	b29b      	uxth	r3, r3
 800b904:	4a05      	ldr	r2, [pc, #20]	@ (800b91c <USB_DevConnect+0x28>)
 800b906:	4313      	orrs	r3, r2
 800b908:	b299      	uxth	r1, r3
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2258      	movs	r2, #88	@ 0x58
 800b90e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800b910:	2300      	movs	r3, #0
}
 800b912:	0018      	movs	r0, r3
 800b914:	46bd      	mov	sp, r7
 800b916:	b002      	add	sp, #8
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	46c0      	nop			@ (mov r8, r8)
 800b91c:	ffff8000 	.word	0xffff8000

0800b920 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2244      	movs	r2, #68	@ 0x44
 800b92c:	5a9b      	ldrh	r3, [r3, r2]
 800b92e:	b29b      	uxth	r3, r3
 800b930:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b932:	68fb      	ldr	r3, [r7, #12]
}
 800b934:	0018      	movs	r0, r3
 800b936:	46bd      	mov	sp, r7
 800b938:	b004      	add	sp, #16
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b08a      	sub	sp, #40	@ 0x28
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	0019      	movs	r1, r3
 800b948:	1dbb      	adds	r3, r7, #6
 800b94a:	801a      	strh	r2, [r3, #0]
 800b94c:	1d3b      	adds	r3, r7, #4
 800b94e:	1c0a      	adds	r2, r1, #0
 800b950:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b952:	1d3b      	adds	r3, r7, #4
 800b954:	881b      	ldrh	r3, [r3, #0]
 800b956:	3301      	adds	r3, #1
 800b958:	085b      	lsrs	r3, r3, #1
 800b95a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b964:	1dbb      	adds	r3, r7, #6
 800b966:	881a      	ldrh	r2, [r3, #0]
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	18d3      	adds	r3, r2, r3
 800b96c:	2280      	movs	r2, #128	@ 0x80
 800b96e:	00d2      	lsls	r2, r2, #3
 800b970:	4694      	mov	ip, r2
 800b972:	4463      	add	r3, ip
 800b974:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b976:	69bb      	ldr	r3, [r7, #24]
 800b978:	627b      	str	r3, [r7, #36]	@ 0x24
 800b97a:	e021      	b.n	800b9c0 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	781a      	ldrb	r2, [r3, #0]
 800b980:	2112      	movs	r1, #18
 800b982:	187b      	adds	r3, r7, r1
 800b984:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b986:	69fb      	ldr	r3, [r7, #28]
 800b988:	3301      	adds	r3, #1
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	b21b      	sxth	r3, r3
 800b98e:	021b      	lsls	r3, r3, #8
 800b990:	b21a      	sxth	r2, r3
 800b992:	187b      	adds	r3, r7, r1
 800b994:	2000      	movs	r0, #0
 800b996:	5e1b      	ldrsh	r3, [r3, r0]
 800b998:	4313      	orrs	r3, r2
 800b99a:	b21a      	sxth	r2, r3
 800b99c:	187b      	adds	r3, r7, r1
 800b99e:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800b9a0:	6a3b      	ldr	r3, [r7, #32]
 800b9a2:	187a      	adds	r2, r7, r1
 800b9a4:	8812      	ldrh	r2, [r2, #0]
 800b9a6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b9a8:	6a3b      	ldr	r3, [r7, #32]
 800b9aa:	3302      	adds	r3, #2
 800b9ac:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b9ae:	69fb      	ldr	r3, [r7, #28]
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b9b4:	69fb      	ldr	r3, [r7, #28]
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9bc:	3b01      	subs	r3, #1
 800b9be:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d1da      	bne.n	800b97c <USB_WritePMA+0x40>
  }
}
 800b9c6:	46c0      	nop			@ (mov r8, r8)
 800b9c8:	46c0      	nop			@ (mov r8, r8)
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	b00a      	add	sp, #40	@ 0x28
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b08a      	sub	sp, #40	@ 0x28
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	60b9      	str	r1, [r7, #8]
 800b9da:	0019      	movs	r1, r3
 800b9dc:	1dbb      	adds	r3, r7, #6
 800b9de:	801a      	strh	r2, [r3, #0]
 800b9e0:	1d3b      	adds	r3, r7, #4
 800b9e2:	1c0a      	adds	r2, r1, #0
 800b9e4:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b9e6:	1d3b      	adds	r3, r7, #4
 800b9e8:	881b      	ldrh	r3, [r3, #0]
 800b9ea:	085b      	lsrs	r3, r3, #1
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b9f8:	1dbb      	adds	r3, r7, #6
 800b9fa:	881a      	ldrh	r2, [r3, #0]
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	18d3      	adds	r3, r2, r3
 800ba00:	2280      	movs	r2, #128	@ 0x80
 800ba02:	00d2      	lsls	r2, r2, #3
 800ba04:	4694      	mov	ip, r2
 800ba06:	4463      	add	r3, ip
 800ba08:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ba0a:	69bb      	ldr	r3, [r7, #24]
 800ba0c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba0e:	e018      	b.n	800ba42 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ba10:	6a3b      	ldr	r3, [r7, #32]
 800ba12:	881b      	ldrh	r3, [r3, #0]
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ba18:	6a3b      	ldr	r3, [r7, #32]
 800ba1a:	3302      	adds	r3, #2
 800ba1c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	b2da      	uxtb	r2, r3
 800ba22:	69fb      	ldr	r3, [r7, #28]
 800ba24:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ba26:	69fb      	ldr	r3, [r7, #28]
 800ba28:	3301      	adds	r3, #1
 800ba2a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	0a1b      	lsrs	r3, r3, #8
 800ba30:	b2da      	uxtb	r2, r3
 800ba32:	69fb      	ldr	r3, [r7, #28]
 800ba34:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	3301      	adds	r3, #1
 800ba3a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ba3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba3e:	3b01      	subs	r3, #1
 800ba40:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d1e3      	bne.n	800ba10 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ba48:	1d3b      	adds	r3, r7, #4
 800ba4a:	881b      	ldrh	r3, [r3, #0]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	4013      	ands	r3, r2
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d007      	beq.n	800ba66 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 800ba56:	6a3b      	ldr	r3, [r7, #32]
 800ba58:	881b      	ldrh	r3, [r3, #0]
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	b2da      	uxtb	r2, r3
 800ba62:	69fb      	ldr	r3, [r7, #28]
 800ba64:	701a      	strb	r2, [r3, #0]
  }
}
 800ba66:	46c0      	nop			@ (mov r8, r8)
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	b00a      	add	sp, #40	@ 0x28
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b084      	sub	sp, #16
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
 800ba76:	000a      	movs	r2, r1
 800ba78:	1cfb      	adds	r3, r7, #3
 800ba7a:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800ba7c:	230f      	movs	r3, #15
 800ba7e:	18fb      	adds	r3, r7, r3
 800ba80:	2200      	movs	r2, #0
 800ba82:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	7c1b      	ldrb	r3, [r3, #16]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d116      	bne.n	800baba <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ba8c:	2380      	movs	r3, #128	@ 0x80
 800ba8e:	009b      	lsls	r3, r3, #2
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	2202      	movs	r2, #2
 800ba94:	2181      	movs	r1, #129	@ 0x81
 800ba96:	f002 f88c 	bl	800dbb2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800baa0:	2380      	movs	r3, #128	@ 0x80
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	2202      	movs	r2, #2
 800baa8:	2101      	movs	r1, #1
 800baaa:	f002 f882 	bl	800dbb2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800baae:	687a      	ldr	r2, [r7, #4]
 800bab0:	23b6      	movs	r3, #182	@ 0xb6
 800bab2:	005b      	lsls	r3, r3, #1
 800bab4:	2101      	movs	r1, #1
 800bab6:	50d1      	str	r1, [r2, r3]
 800bab8:	e013      	b.n	800bae2 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	2340      	movs	r3, #64	@ 0x40
 800babe:	2202      	movs	r2, #2
 800bac0:	2181      	movs	r1, #129	@ 0x81
 800bac2:	f002 f876 	bl	800dbb2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2201      	movs	r2, #1
 800baca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	2340      	movs	r3, #64	@ 0x40
 800bad0:	2202      	movs	r2, #2
 800bad2:	2101      	movs	r1, #1
 800bad4:	f002 f86d 	bl	800dbb2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	23b6      	movs	r3, #182	@ 0xb6
 800badc:	005b      	lsls	r3, r3, #1
 800bade:	2101      	movs	r1, #1
 800bae0:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	2308      	movs	r3, #8
 800bae6:	2203      	movs	r2, #3
 800bae8:	2182      	movs	r1, #130	@ 0x82
 800baea:	f002 f862 	bl	800dbb2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2201      	movs	r2, #1
 800baf2:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800baf4:	2387      	movs	r3, #135	@ 0x87
 800baf6:	009b      	lsls	r3, r3, #2
 800baf8:	0018      	movs	r0, r3
 800bafa:	f002 f9f1 	bl	800dee0 <USBD_static_malloc>
 800bafe:	0001      	movs	r1, r0
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	23ae      	movs	r3, #174	@ 0xae
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	23ae      	movs	r3, #174	@ 0xae
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	58d3      	ldr	r3, [r2, r3]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d104      	bne.n	800bb1e <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800bb14:	230f      	movs	r3, #15
 800bb16:	18fb      	adds	r3, r7, r3
 800bb18:	2201      	movs	r2, #1
 800bb1a:	701a      	strb	r2, [r3, #0]
 800bb1c:	e02c      	b.n	800bb78 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	23ae      	movs	r3, #174	@ 0xae
 800bb22:	009b      	lsls	r3, r3, #2
 800bb24:	58d3      	ldr	r3, [r2, r3]
 800bb26:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bb28:	687a      	ldr	r2, [r7, #4]
 800bb2a:	23af      	movs	r3, #175	@ 0xaf
 800bb2c:	009b      	lsls	r3, r3, #2
 800bb2e:	58d3      	ldr	r3, [r2, r3]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800bb34:	68ba      	ldr	r2, [r7, #8]
 800bb36:	2385      	movs	r3, #133	@ 0x85
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	2100      	movs	r1, #0
 800bb3c:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800bb3e:	68ba      	ldr	r2, [r7, #8]
 800bb40:	2386      	movs	r3, #134	@ 0x86
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	2100      	movs	r1, #0
 800bb46:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	7c1b      	ldrb	r3, [r3, #16]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d10a      	bne.n	800bb66 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bb50:	68ba      	ldr	r2, [r7, #8]
 800bb52:	2381      	movs	r3, #129	@ 0x81
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	58d2      	ldr	r2, [r2, r3]
 800bb58:	2380      	movs	r3, #128	@ 0x80
 800bb5a:	009b      	lsls	r3, r3, #2
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	2101      	movs	r1, #1
 800bb60:	f002 f971 	bl	800de46 <USBD_LL_PrepareReceive>
 800bb64:	e008      	b.n	800bb78 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bb66:	68ba      	ldr	r2, [r7, #8]
 800bb68:	2381      	movs	r3, #129	@ 0x81
 800bb6a:	009b      	lsls	r3, r3, #2
 800bb6c:	58d2      	ldr	r2, [r2, r3]
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	2340      	movs	r3, #64	@ 0x40
 800bb72:	2101      	movs	r1, #1
 800bb74:	f002 f967 	bl	800de46 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800bb78:	230f      	movs	r3, #15
 800bb7a:	18fb      	adds	r3, r7, r3
 800bb7c:	781b      	ldrb	r3, [r3, #0]
}
 800bb7e:	0018      	movs	r0, r3
 800bb80:	46bd      	mov	sp, r7
 800bb82:	b004      	add	sp, #16
 800bb84:	bd80      	pop	{r7, pc}

0800bb86 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb86:	b580      	push	{r7, lr}
 800bb88:	b084      	sub	sp, #16
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6078      	str	r0, [r7, #4]
 800bb8e:	000a      	movs	r2, r1
 800bb90:	1cfb      	adds	r3, r7, #3
 800bb92:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800bb94:	230f      	movs	r3, #15
 800bb96:	18fb      	adds	r3, r7, r3
 800bb98:	2200      	movs	r2, #0
 800bb9a:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2181      	movs	r1, #129	@ 0x81
 800bba0:	0018      	movs	r0, r3
 800bba2:	f002 f83d 	bl	800dc20 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2101      	movs	r1, #1
 800bbb0:	0018      	movs	r0, r3
 800bbb2:	f002 f835 	bl	800dc20 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	23b6      	movs	r3, #182	@ 0xb6
 800bbba:	005b      	lsls	r3, r3, #1
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2182      	movs	r1, #130	@ 0x82
 800bbc4:	0018      	movs	r0, r3
 800bbc6:	f002 f82b 	bl	800dc20 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	23ae      	movs	r3, #174	@ 0xae
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	58d3      	ldr	r3, [r2, r3]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d011      	beq.n	800bc00 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	23af      	movs	r3, #175	@ 0xaf
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	58d3      	ldr	r3, [r2, r3]
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	23ae      	movs	r3, #174	@ 0xae
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	58d3      	ldr	r3, [r2, r3]
 800bbf0:	0018      	movs	r0, r3
 800bbf2:	f002 f981 	bl	800def8 <USBD_static_free>
    pdev->pClassData = NULL;
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	23ae      	movs	r3, #174	@ 0xae
 800bbfa:	009b      	lsls	r3, r3, #2
 800bbfc:	2100      	movs	r1, #0
 800bbfe:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800bc00:	230f      	movs	r3, #15
 800bc02:	18fb      	adds	r3, r7, r3
 800bc04:	781b      	ldrb	r3, [r3, #0]
}
 800bc06:	0018      	movs	r0, r3
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	b004      	add	sp, #16
 800bc0c:	bd80      	pop	{r7, pc}
	...

0800bc10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b086      	sub	sp, #24
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	23ae      	movs	r3, #174	@ 0xae
 800bc1e:	009b      	lsls	r3, r3, #2
 800bc20:	58d3      	ldr	r3, [r2, r3]
 800bc22:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800bc24:	230f      	movs	r3, #15
 800bc26:	18fb      	adds	r3, r7, r3
 800bc28:	2200      	movs	r2, #0
 800bc2a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800bc2c:	230c      	movs	r3, #12
 800bc2e:	18fb      	adds	r3, r7, r3
 800bc30:	2200      	movs	r2, #0
 800bc32:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800bc34:	2317      	movs	r3, #23
 800bc36:	18fb      	adds	r3, r7, r3
 800bc38:	2200      	movs	r2, #0
 800bc3a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	001a      	movs	r2, r3
 800bc42:	2360      	movs	r3, #96	@ 0x60
 800bc44:	4013      	ands	r3, r2
 800bc46:	d03d      	beq.n	800bcc4 <USBD_CDC_Setup+0xb4>
 800bc48:	2b20      	cmp	r3, #32
 800bc4a:	d000      	beq.n	800bc4e <USBD_CDC_Setup+0x3e>
 800bc4c:	e094      	b.n	800bd78 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	88db      	ldrh	r3, [r3, #6]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d02b      	beq.n	800bcae <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	b25b      	sxtb	r3, r3
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	da12      	bge.n	800bc86 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	23af      	movs	r3, #175	@ 0xaf
 800bc64:	009b      	lsls	r3, r3, #2
 800bc66:	58d3      	ldr	r3, [r2, r3]
 800bc68:	689b      	ldr	r3, [r3, #8]
 800bc6a:	683a      	ldr	r2, [r7, #0]
 800bc6c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800bc6e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bc70:	683a      	ldr	r2, [r7, #0]
 800bc72:	88d2      	ldrh	r2, [r2, #6]
 800bc74:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bc76:	6939      	ldr	r1, [r7, #16]
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	88da      	ldrh	r2, [r3, #6]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	0018      	movs	r0, r3
 800bc80:	f001 fbaf 	bl	800d3e2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800bc84:	e083      	b.n	800bd8e <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	7859      	ldrb	r1, [r3, #1]
 800bc8a:	693a      	ldr	r2, [r7, #16]
 800bc8c:	2380      	movs	r3, #128	@ 0x80
 800bc8e:	009b      	lsls	r3, r3, #2
 800bc90:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	88db      	ldrh	r3, [r3, #6]
 800bc96:	b2d9      	uxtb	r1, r3
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	4a40      	ldr	r2, [pc, #256]	@ (800bd9c <USBD_CDC_Setup+0x18c>)
 800bc9c:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bc9e:	6939      	ldr	r1, [r7, #16]
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	88da      	ldrh	r2, [r3, #6]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	0018      	movs	r0, r3
 800bca8:	f001 fbce 	bl	800d448 <USBD_CtlPrepareRx>
      break;
 800bcac:	e06f      	b.n	800bd8e <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	23af      	movs	r3, #175	@ 0xaf
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	58d3      	ldr	r3, [r2, r3]
 800bcb6:	689b      	ldr	r3, [r3, #8]
 800bcb8:	683a      	ldr	r2, [r7, #0]
 800bcba:	7850      	ldrb	r0, [r2, #1]
 800bcbc:	6839      	ldr	r1, [r7, #0]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	4798      	blx	r3
      break;
 800bcc2:	e064      	b.n	800bd8e <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	785b      	ldrb	r3, [r3, #1]
 800bcc8:	2b0b      	cmp	r3, #11
 800bcca:	d037      	beq.n	800bd3c <USBD_CDC_Setup+0x12c>
 800bccc:	dc47      	bgt.n	800bd5e <USBD_CDC_Setup+0x14e>
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d002      	beq.n	800bcd8 <USBD_CDC_Setup+0xc8>
 800bcd2:	2b0a      	cmp	r3, #10
 800bcd4:	d019      	beq.n	800bd0a <USBD_CDC_Setup+0xfa>
 800bcd6:	e042      	b.n	800bd5e <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	23a7      	movs	r3, #167	@ 0xa7
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	5cd3      	ldrb	r3, [r2, r3]
 800bce0:	2b03      	cmp	r3, #3
 800bce2:	d107      	bne.n	800bcf4 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800bce4:	230c      	movs	r3, #12
 800bce6:	18f9      	adds	r1, r7, r3
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2202      	movs	r2, #2
 800bcec:	0018      	movs	r0, r3
 800bcee:	f001 fb78 	bl	800d3e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bcf2:	e040      	b.n	800bd76 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800bcf4:	683a      	ldr	r2, [r7, #0]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	0011      	movs	r1, r2
 800bcfa:	0018      	movs	r0, r3
 800bcfc:	f001 faf3 	bl	800d2e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800bd00:	2317      	movs	r3, #23
 800bd02:	18fb      	adds	r3, r7, r3
 800bd04:	2202      	movs	r2, #2
 800bd06:	701a      	strb	r2, [r3, #0]
          break;
 800bd08:	e035      	b.n	800bd76 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	23a7      	movs	r3, #167	@ 0xa7
 800bd0e:	009b      	lsls	r3, r3, #2
 800bd10:	5cd3      	ldrb	r3, [r2, r3]
 800bd12:	2b03      	cmp	r3, #3
 800bd14:	d107      	bne.n	800bd26 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800bd16:	230f      	movs	r3, #15
 800bd18:	18f9      	adds	r1, r7, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	0018      	movs	r0, r3
 800bd20:	f001 fb5f 	bl	800d3e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bd24:	e027      	b.n	800bd76 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800bd26:	683a      	ldr	r2, [r7, #0]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	0011      	movs	r1, r2
 800bd2c:	0018      	movs	r0, r3
 800bd2e:	f001 fada 	bl	800d2e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800bd32:	2317      	movs	r3, #23
 800bd34:	18fb      	adds	r3, r7, r3
 800bd36:	2202      	movs	r2, #2
 800bd38:	701a      	strb	r2, [r3, #0]
          break;
 800bd3a:	e01c      	b.n	800bd76 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	23a7      	movs	r3, #167	@ 0xa7
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	5cd3      	ldrb	r3, [r2, r3]
 800bd44:	2b03      	cmp	r3, #3
 800bd46:	d015      	beq.n	800bd74 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800bd48:	683a      	ldr	r2, [r7, #0]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	0011      	movs	r1, r2
 800bd4e:	0018      	movs	r0, r3
 800bd50:	f001 fac9 	bl	800d2e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800bd54:	2317      	movs	r3, #23
 800bd56:	18fb      	adds	r3, r7, r3
 800bd58:	2202      	movs	r2, #2
 800bd5a:	701a      	strb	r2, [r3, #0]
          }
          break;
 800bd5c:	e00a      	b.n	800bd74 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800bd5e:	683a      	ldr	r2, [r7, #0]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	0011      	movs	r1, r2
 800bd64:	0018      	movs	r0, r3
 800bd66:	f001 fabe 	bl	800d2e6 <USBD_CtlError>
          ret = USBD_FAIL;
 800bd6a:	2317      	movs	r3, #23
 800bd6c:	18fb      	adds	r3, r7, r3
 800bd6e:	2202      	movs	r2, #2
 800bd70:	701a      	strb	r2, [r3, #0]
          break;
 800bd72:	e000      	b.n	800bd76 <USBD_CDC_Setup+0x166>
          break;
 800bd74:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800bd76:	e00a      	b.n	800bd8e <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800bd78:	683a      	ldr	r2, [r7, #0]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	0011      	movs	r1, r2
 800bd7e:	0018      	movs	r0, r3
 800bd80:	f001 fab1 	bl	800d2e6 <USBD_CtlError>
      ret = USBD_FAIL;
 800bd84:	2317      	movs	r3, #23
 800bd86:	18fb      	adds	r3, r7, r3
 800bd88:	2202      	movs	r2, #2
 800bd8a:	701a      	strb	r2, [r3, #0]
      break;
 800bd8c:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800bd8e:	2317      	movs	r3, #23
 800bd90:	18fb      	adds	r3, r7, r3
 800bd92:	781b      	ldrb	r3, [r3, #0]
}
 800bd94:	0018      	movs	r0, r3
 800bd96:	46bd      	mov	sp, r7
 800bd98:	b006      	add	sp, #24
 800bd9a:	bd80      	pop	{r7, pc}
 800bd9c:	00000201 	.word	0x00000201

0800bda0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	000a      	movs	r2, r1
 800bdaa:	1cfb      	adds	r3, r7, #3
 800bdac:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	23ae      	movs	r3, #174	@ 0xae
 800bdb2:	009b      	lsls	r3, r3, #2
 800bdb4:	58d3      	ldr	r3, [r2, r3]
 800bdb6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	23b0      	movs	r3, #176	@ 0xb0
 800bdbc:	009b      	lsls	r3, r3, #2
 800bdbe:	58d3      	ldr	r3, [r2, r3]
 800bdc0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	23ae      	movs	r3, #174	@ 0xae
 800bdc6:	009b      	lsls	r3, r3, #2
 800bdc8:	58d3      	ldr	r3, [r2, r3]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d03e      	beq.n	800be4c <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bdce:	1cfb      	adds	r3, r7, #3
 800bdd0:	781a      	ldrb	r2, [r3, #0]
 800bdd2:	6879      	ldr	r1, [r7, #4]
 800bdd4:	0013      	movs	r3, r2
 800bdd6:	009b      	lsls	r3, r3, #2
 800bdd8:	189b      	adds	r3, r3, r2
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	18cb      	adds	r3, r1, r3
 800bdde:	331c      	adds	r3, #28
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d02b      	beq.n	800be3e <USBD_CDC_DataIn+0x9e>
 800bde6:	1cfb      	adds	r3, r7, #3
 800bde8:	781a      	ldrb	r2, [r3, #0]
 800bdea:	6879      	ldr	r1, [r7, #4]
 800bdec:	0013      	movs	r3, r2
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	189b      	adds	r3, r3, r2
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	18cb      	adds	r3, r1, r3
 800bdf6:	331c      	adds	r3, #28
 800bdf8:	6818      	ldr	r0, [r3, #0]
 800bdfa:	1cfb      	adds	r3, r7, #3
 800bdfc:	781a      	ldrb	r2, [r3, #0]
 800bdfe:	68b9      	ldr	r1, [r7, #8]
 800be00:	0013      	movs	r3, r2
 800be02:	009b      	lsls	r3, r3, #2
 800be04:	189b      	adds	r3, r3, r2
 800be06:	00db      	lsls	r3, r3, #3
 800be08:	18cb      	adds	r3, r1, r3
 800be0a:	3320      	adds	r3, #32
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	0019      	movs	r1, r3
 800be10:	f7f4 fa1c 	bl	800024c <__aeabi_uidivmod>
 800be14:	1e0b      	subs	r3, r1, #0
 800be16:	d112      	bne.n	800be3e <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800be18:	1cfb      	adds	r3, r7, #3
 800be1a:	781a      	ldrb	r2, [r3, #0]
 800be1c:	6879      	ldr	r1, [r7, #4]
 800be1e:	0013      	movs	r3, r2
 800be20:	009b      	lsls	r3, r3, #2
 800be22:	189b      	adds	r3, r3, r2
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	18cb      	adds	r3, r1, r3
 800be28:	331c      	adds	r3, #28
 800be2a:	2200      	movs	r2, #0
 800be2c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800be2e:	1cfb      	adds	r3, r7, #3
 800be30:	7819      	ldrb	r1, [r3, #0]
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	2300      	movs	r3, #0
 800be36:	2200      	movs	r2, #0
 800be38:	f001 ffce 	bl	800ddd8 <USBD_LL_Transmit>
 800be3c:	e004      	b.n	800be48 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800be3e:	68fa      	ldr	r2, [r7, #12]
 800be40:	2385      	movs	r3, #133	@ 0x85
 800be42:	009b      	lsls	r3, r3, #2
 800be44:	2100      	movs	r1, #0
 800be46:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800be48:	2300      	movs	r3, #0
 800be4a:	e000      	b.n	800be4e <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800be4c:	2302      	movs	r3, #2
  }
}
 800be4e:	0018      	movs	r0, r3
 800be50:	46bd      	mov	sp, r7
 800be52:	b004      	add	sp, #16
 800be54:	bd80      	pop	{r7, pc}

0800be56 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be56:	b580      	push	{r7, lr}
 800be58:	b084      	sub	sp, #16
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
 800be5e:	000a      	movs	r2, r1
 800be60:	1cfb      	adds	r3, r7, #3
 800be62:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	23ae      	movs	r3, #174	@ 0xae
 800be68:	009b      	lsls	r3, r3, #2
 800be6a:	58d3      	ldr	r3, [r2, r3]
 800be6c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800be6e:	1cfb      	adds	r3, r7, #3
 800be70:	781a      	ldrb	r2, [r3, #0]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	0011      	movs	r1, r2
 800be76:	0018      	movs	r0, r3
 800be78:	f002 f81c 	bl	800deb4 <USBD_LL_GetRxDataSize>
 800be7c:	0001      	movs	r1, r0
 800be7e:	68fa      	ldr	r2, [r7, #12]
 800be80:	2383      	movs	r3, #131	@ 0x83
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	23ae      	movs	r3, #174	@ 0xae
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	58d3      	ldr	r3, [r2, r3]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d011      	beq.n	800beb6 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	23af      	movs	r3, #175	@ 0xaf
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	58d3      	ldr	r3, [r2, r3]
 800be9a:	68da      	ldr	r2, [r3, #12]
 800be9c:	68f9      	ldr	r1, [r7, #12]
 800be9e:	2381      	movs	r3, #129	@ 0x81
 800bea0:	009b      	lsls	r3, r3, #2
 800bea2:	58c8      	ldr	r0, [r1, r3]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2183      	movs	r1, #131	@ 0x83
 800bea8:	0089      	lsls	r1, r1, #2
 800beaa:	468c      	mov	ip, r1
 800beac:	4463      	add	r3, ip
 800beae:	0019      	movs	r1, r3
 800beb0:	4790      	blx	r2

    return USBD_OK;
 800beb2:	2300      	movs	r3, #0
 800beb4:	e000      	b.n	800beb8 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800beb6:	2302      	movs	r3, #2
  }
}
 800beb8:	0018      	movs	r0, r3
 800beba:	46bd      	mov	sp, r7
 800bebc:	b004      	add	sp, #16
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bec0:	b590      	push	{r4, r7, lr}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	23ae      	movs	r3, #174	@ 0xae
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	58d3      	ldr	r3, [r2, r3]
 800bed0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	23af      	movs	r3, #175	@ 0xaf
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	58d3      	ldr	r3, [r2, r3]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d018      	beq.n	800bf10 <USBD_CDC_EP0_RxReady+0x50>
 800bede:	68fa      	ldr	r2, [r7, #12]
 800bee0:	2380      	movs	r3, #128	@ 0x80
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	5cd3      	ldrb	r3, [r2, r3]
 800bee6:	2bff      	cmp	r3, #255	@ 0xff
 800bee8:	d012      	beq.n	800bf10 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	23af      	movs	r3, #175	@ 0xaf
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	58d3      	ldr	r3, [r2, r3]
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	68f9      	ldr	r1, [r7, #12]
 800bef6:	2280      	movs	r2, #128	@ 0x80
 800bef8:	0092      	lsls	r2, r2, #2
 800befa:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800befc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800befe:	68fa      	ldr	r2, [r7, #12]
 800bf00:	4c06      	ldr	r4, [pc, #24]	@ (800bf1c <USBD_CDC_EP0_RxReady+0x5c>)
 800bf02:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bf04:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	2380      	movs	r3, #128	@ 0x80
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	21ff      	movs	r1, #255	@ 0xff
 800bf0e:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800bf10:	2300      	movs	r3, #0
}
 800bf12:	0018      	movs	r0, r3
 800bf14:	46bd      	mov	sp, r7
 800bf16:	b005      	add	sp, #20
 800bf18:	bd90      	pop	{r4, r7, pc}
 800bf1a:	46c0      	nop			@ (mov r8, r8)
 800bf1c:	00000201 	.word	0x00000201

0800bf20 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2243      	movs	r2, #67	@ 0x43
 800bf2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800bf2e:	4b02      	ldr	r3, [pc, #8]	@ (800bf38 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800bf30:	0018      	movs	r0, r3
 800bf32:	46bd      	mov	sp, r7
 800bf34:	b002      	add	sp, #8
 800bf36:	bd80      	pop	{r7, pc}
 800bf38:	200000f4 	.word	0x200000f4

0800bf3c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2243      	movs	r2, #67	@ 0x43
 800bf48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800bf4a:	4b02      	ldr	r3, [pc, #8]	@ (800bf54 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800bf4c:	0018      	movs	r0, r3
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	b002      	add	sp, #8
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	200000b0 	.word	0x200000b0

0800bf58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2243      	movs	r2, #67	@ 0x43
 800bf64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800bf66:	4b02      	ldr	r3, [pc, #8]	@ (800bf70 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800bf68:	0018      	movs	r0, r3
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	b002      	add	sp, #8
 800bf6e:	bd80      	pop	{r7, pc}
 800bf70:	20000138 	.word	0x20000138

0800bf74 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b082      	sub	sp, #8
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	220a      	movs	r2, #10
 800bf80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800bf82:	4b02      	ldr	r3, [pc, #8]	@ (800bf8c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800bf84:	0018      	movs	r0, r3
 800bf86:	46bd      	mov	sp, r7
 800bf88:	b002      	add	sp, #8
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	2000006c 	.word	0x2000006c

0800bf90 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b084      	sub	sp, #16
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800bf9a:	200f      	movs	r0, #15
 800bf9c:	183b      	adds	r3, r7, r0
 800bf9e:	2202      	movs	r2, #2
 800bfa0:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d007      	beq.n	800bfb8 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	23af      	movs	r3, #175	@ 0xaf
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	6839      	ldr	r1, [r7, #0]
 800bfb0:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800bfb2:	183b      	adds	r3, r7, r0
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800bfb8:	230f      	movs	r3, #15
 800bfba:	18fb      	adds	r3, r7, r3
 800bfbc:	781b      	ldrb	r3, [r3, #0]
}
 800bfbe:	0018      	movs	r0, r3
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	b004      	add	sp, #16
 800bfc4:	bd80      	pop	{r7, pc}

0800bfc6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b086      	sub	sp, #24
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	60f8      	str	r0, [r7, #12]
 800bfce:	60b9      	str	r1, [r7, #8]
 800bfd0:	1dbb      	adds	r3, r7, #6
 800bfd2:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	23ae      	movs	r3, #174	@ 0xae
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	58d3      	ldr	r3, [r2, r3]
 800bfdc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800bfde:	697a      	ldr	r2, [r7, #20]
 800bfe0:	2382      	movs	r3, #130	@ 0x82
 800bfe2:	009b      	lsls	r3, r3, #2
 800bfe4:	68b9      	ldr	r1, [r7, #8]
 800bfe6:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800bfe8:	1dbb      	adds	r3, r7, #6
 800bfea:	8819      	ldrh	r1, [r3, #0]
 800bfec:	697a      	ldr	r2, [r7, #20]
 800bfee:	2384      	movs	r3, #132	@ 0x84
 800bff0:	009b      	lsls	r3, r3, #2
 800bff2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800bff4:	2300      	movs	r3, #0
}
 800bff6:	0018      	movs	r0, r3
 800bff8:	46bd      	mov	sp, r7
 800bffa:	b006      	add	sp, #24
 800bffc:	bd80      	pop	{r7, pc}

0800bffe <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800bffe:	b580      	push	{r7, lr}
 800c000:	b084      	sub	sp, #16
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
 800c006:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	23ae      	movs	r3, #174	@ 0xae
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	58d3      	ldr	r3, [r2, r3]
 800c010:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c012:	68fa      	ldr	r2, [r7, #12]
 800c014:	2381      	movs	r3, #129	@ 0x81
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	6839      	ldr	r1, [r7, #0]
 800c01a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800c01c:	2300      	movs	r3, #0
}
 800c01e:	0018      	movs	r0, r3
 800c020:	46bd      	mov	sp, r7
 800c022:	b004      	add	sp, #16
 800c024:	bd80      	pop	{r7, pc}

0800c026 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c026:	b580      	push	{r7, lr}
 800c028:	b084      	sub	sp, #16
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	23ae      	movs	r3, #174	@ 0xae
 800c032:	009b      	lsls	r3, r3, #2
 800c034:	58d3      	ldr	r3, [r2, r3]
 800c036:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800c038:	687a      	ldr	r2, [r7, #4]
 800c03a:	23ae      	movs	r3, #174	@ 0xae
 800c03c:	009b      	lsls	r3, r3, #2
 800c03e:	58d3      	ldr	r3, [r2, r3]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d022      	beq.n	800c08a <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800c044:	68fa      	ldr	r2, [r7, #12]
 800c046:	2385      	movs	r3, #133	@ 0x85
 800c048:	009b      	lsls	r3, r3, #2
 800c04a:	58d3      	ldr	r3, [r2, r3]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d11a      	bne.n	800c086 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800c050:	68fa      	ldr	r2, [r7, #12]
 800c052:	2385      	movs	r3, #133	@ 0x85
 800c054:	009b      	lsls	r3, r3, #2
 800c056:	2101      	movs	r1, #1
 800c058:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c05a:	68fa      	ldr	r2, [r7, #12]
 800c05c:	2384      	movs	r3, #132	@ 0x84
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	58d2      	ldr	r2, [r2, r3]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c066:	68fa      	ldr	r2, [r7, #12]
 800c068:	2382      	movs	r3, #130	@ 0x82
 800c06a:	009b      	lsls	r3, r3, #2
 800c06c:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800c06e:	68fa      	ldr	r2, [r7, #12]
 800c070:	2384      	movs	r3, #132	@ 0x84
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c076:	b29b      	uxth	r3, r3
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	000a      	movs	r2, r1
 800c07c:	2181      	movs	r1, #129	@ 0x81
 800c07e:	f001 feab 	bl	800ddd8 <USBD_LL_Transmit>

      return USBD_OK;
 800c082:	2300      	movs	r3, #0
 800c084:	e002      	b.n	800c08c <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800c086:	2301      	movs	r3, #1
 800c088:	e000      	b.n	800c08c <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800c08a:	2302      	movs	r3, #2
  }
}
 800c08c:	0018      	movs	r0, r3
 800c08e:	46bd      	mov	sp, r7
 800c090:	b004      	add	sp, #16
 800c092:	bd80      	pop	{r7, pc}

0800c094 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	23ae      	movs	r3, #174	@ 0xae
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	58d3      	ldr	r3, [r2, r3]
 800c0a4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	23ae      	movs	r3, #174	@ 0xae
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	58d3      	ldr	r3, [r2, r3]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d019      	beq.n	800c0e6 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	7c1b      	ldrb	r3, [r3, #16]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d10a      	bne.n	800c0d0 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	2381      	movs	r3, #129	@ 0x81
 800c0be:	009b      	lsls	r3, r3, #2
 800c0c0:	58d2      	ldr	r2, [r2, r3]
 800c0c2:	2380      	movs	r3, #128	@ 0x80
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	2101      	movs	r1, #1
 800c0ca:	f001 febc 	bl	800de46 <USBD_LL_PrepareReceive>
 800c0ce:	e008      	b.n	800c0e2 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c0d0:	68fa      	ldr	r2, [r7, #12]
 800c0d2:	2381      	movs	r3, #129	@ 0x81
 800c0d4:	009b      	lsls	r3, r3, #2
 800c0d6:	58d2      	ldr	r2, [r2, r3]
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	2340      	movs	r3, #64	@ 0x40
 800c0dc:	2101      	movs	r1, #1
 800c0de:	f001 feb2 	bl	800de46 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	e000      	b.n	800c0e8 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800c0e6:	2302      	movs	r3, #2
  }
}
 800c0e8:	0018      	movs	r0, r3
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	b004      	add	sp, #16
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	1dfb      	adds	r3, r7, #7
 800c0fc:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d101      	bne.n	800c108 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c104:	2302      	movs	r3, #2
 800c106:	e020      	b.n	800c14a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800c108:	68fa      	ldr	r2, [r7, #12]
 800c10a:	23ad      	movs	r3, #173	@ 0xad
 800c10c:	009b      	lsls	r3, r3, #2
 800c10e:	58d3      	ldr	r3, [r2, r3]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d004      	beq.n	800c11e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800c114:	68fa      	ldr	r2, [r7, #12]
 800c116:	23ad      	movs	r3, #173	@ 0xad
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	2100      	movs	r1, #0
 800c11c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d004      	beq.n	800c12e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c124:	68fa      	ldr	r2, [r7, #12]
 800c126:	23ac      	movs	r3, #172	@ 0xac
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	68b9      	ldr	r1, [r7, #8]
 800c12c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c12e:	68fa      	ldr	r2, [r7, #12]
 800c130:	23a7      	movs	r3, #167	@ 0xa7
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	2101      	movs	r1, #1
 800c136:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	1dfa      	adds	r2, r7, #7
 800c13c:	7812      	ldrb	r2, [r2, #0]
 800c13e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	0018      	movs	r0, r3
 800c144:	f001 fcac 	bl	800daa0 <USBD_LL_Init>

  return USBD_OK;
 800c148:	2300      	movs	r3, #0
}
 800c14a:	0018      	movs	r0, r3
 800c14c:	46bd      	mov	sp, r7
 800c14e:	b004      	add	sp, #16
 800c150:	bd80      	pop	{r7, pc}

0800c152 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c152:	b580      	push	{r7, lr}
 800c154:	b084      	sub	sp, #16
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
 800c15a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800c15c:	200f      	movs	r0, #15
 800c15e:	183b      	adds	r3, r7, r0
 800c160:	2200      	movs	r2, #0
 800c162:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d008      	beq.n	800c17c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c16a:	687a      	ldr	r2, [r7, #4]
 800c16c:	23ad      	movs	r3, #173	@ 0xad
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	6839      	ldr	r1, [r7, #0]
 800c172:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800c174:	183b      	adds	r3, r7, r0
 800c176:	2200      	movs	r2, #0
 800c178:	701a      	strb	r2, [r3, #0]
 800c17a:	e003      	b.n	800c184 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c17c:	230f      	movs	r3, #15
 800c17e:	18fb      	adds	r3, r7, r3
 800c180:	2202      	movs	r2, #2
 800c182:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800c184:	230f      	movs	r3, #15
 800c186:	18fb      	adds	r3, r7, r3
 800c188:	781b      	ldrb	r3, [r3, #0]
}
 800c18a:	0018      	movs	r0, r3
 800c18c:	46bd      	mov	sp, r7
 800c18e:	b004      	add	sp, #16
 800c190:	bd80      	pop	{r7, pc}

0800c192 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c192:	b580      	push	{r7, lr}
 800c194:	b082      	sub	sp, #8
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	0018      	movs	r0, r3
 800c19e:	f001 fce3 	bl	800db68 <USBD_LL_Start>

  return USBD_OK;
 800c1a2:	2300      	movs	r3, #0
}
 800c1a4:	0018      	movs	r0, r3
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	b002      	add	sp, #8
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c1b4:	2300      	movs	r3, #0
}
 800c1b6:	0018      	movs	r0, r3
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	b002      	add	sp, #8
 800c1bc:	bd80      	pop	{r7, pc}

0800c1be <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c1be:	b590      	push	{r4, r7, lr}
 800c1c0:	b085      	sub	sp, #20
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	6078      	str	r0, [r7, #4]
 800c1c6:	000a      	movs	r2, r1
 800c1c8:	1cfb      	adds	r3, r7, #3
 800c1ca:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c1cc:	240f      	movs	r4, #15
 800c1ce:	193b      	adds	r3, r7, r4
 800c1d0:	2202      	movs	r2, #2
 800c1d2:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	23ad      	movs	r3, #173	@ 0xad
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	58d3      	ldr	r3, [r2, r3]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d00e      	beq.n	800c1fe <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	23ad      	movs	r3, #173	@ 0xad
 800c1e4:	009b      	lsls	r3, r3, #2
 800c1e6:	58d3      	ldr	r3, [r2, r3]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	1cfa      	adds	r2, r7, #3
 800c1ec:	7811      	ldrb	r1, [r2, #0]
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	0010      	movs	r0, r2
 800c1f2:	4798      	blx	r3
 800c1f4:	1e03      	subs	r3, r0, #0
 800c1f6:	d102      	bne.n	800c1fe <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800c1f8:	193b      	adds	r3, r7, r4
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800c1fe:	230f      	movs	r3, #15
 800c200:	18fb      	adds	r3, r7, r3
 800c202:	781b      	ldrb	r3, [r3, #0]
}
 800c204:	0018      	movs	r0, r3
 800c206:	46bd      	mov	sp, r7
 800c208:	b005      	add	sp, #20
 800c20a:	bd90      	pop	{r4, r7, pc}

0800c20c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	000a      	movs	r2, r1
 800c216:	1cfb      	adds	r3, r7, #3
 800c218:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c21a:	687a      	ldr	r2, [r7, #4]
 800c21c:	23ad      	movs	r3, #173	@ 0xad
 800c21e:	009b      	lsls	r3, r3, #2
 800c220:	58d3      	ldr	r3, [r2, r3]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	1cfa      	adds	r2, r7, #3
 800c226:	7811      	ldrb	r1, [r2, #0]
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	0010      	movs	r0, r2
 800c22c:	4798      	blx	r3

  return USBD_OK;
 800c22e:	2300      	movs	r3, #0
}
 800c230:	0018      	movs	r0, r3
 800c232:	46bd      	mov	sp, r7
 800c234:	b002      	add	sp, #8
 800c236:	bd80      	pop	{r7, pc}

0800c238 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	22aa      	movs	r2, #170	@ 0xaa
 800c246:	0092      	lsls	r2, r2, #2
 800c248:	4694      	mov	ip, r2
 800c24a:	4463      	add	r3, ip
 800c24c:	683a      	ldr	r2, [r7, #0]
 800c24e:	0011      	movs	r1, r2
 800c250:	0018      	movs	r0, r3
 800c252:	f001 f810 	bl	800d276 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c256:	687a      	ldr	r2, [r7, #4]
 800c258:	23a5      	movs	r3, #165	@ 0xa5
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	2101      	movs	r1, #1
 800c25e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	4a23      	ldr	r2, [pc, #140]	@ (800c2f0 <USBD_LL_SetupStage+0xb8>)
 800c264:	5a9b      	ldrh	r3, [r3, r2]
 800c266:	0019      	movs	r1, r3
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	23a6      	movs	r3, #166	@ 0xa6
 800c26c:	009b      	lsls	r3, r3, #2
 800c26e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800c270:	687a      	ldr	r2, [r7, #4]
 800c272:	23aa      	movs	r3, #170	@ 0xaa
 800c274:	009b      	lsls	r3, r3, #2
 800c276:	5cd3      	ldrb	r3, [r2, r3]
 800c278:	001a      	movs	r2, r3
 800c27a:	231f      	movs	r3, #31
 800c27c:	4013      	ands	r3, r2
 800c27e:	2b02      	cmp	r3, #2
 800c280:	d019      	beq.n	800c2b6 <USBD_LL_SetupStage+0x7e>
 800c282:	d822      	bhi.n	800c2ca <USBD_LL_SetupStage+0x92>
 800c284:	2b00      	cmp	r3, #0
 800c286:	d002      	beq.n	800c28e <USBD_LL_SetupStage+0x56>
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d00a      	beq.n	800c2a2 <USBD_LL_SetupStage+0x6a>
 800c28c:	e01d      	b.n	800c2ca <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	22aa      	movs	r2, #170	@ 0xaa
 800c292:	0092      	lsls	r2, r2, #2
 800c294:	189a      	adds	r2, r3, r2
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	0011      	movs	r1, r2
 800c29a:	0018      	movs	r0, r3
 800c29c:	f000 fa10 	bl	800c6c0 <USBD_StdDevReq>
      break;
 800c2a0:	e020      	b.n	800c2e4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	22aa      	movs	r2, #170	@ 0xaa
 800c2a6:	0092      	lsls	r2, r2, #2
 800c2a8:	189a      	adds	r2, r3, r2
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	0011      	movs	r1, r2
 800c2ae:	0018      	movs	r0, r3
 800c2b0:	f000 fa78 	bl	800c7a4 <USBD_StdItfReq>
      break;
 800c2b4:	e016      	b.n	800c2e4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	22aa      	movs	r2, #170	@ 0xaa
 800c2ba:	0092      	lsls	r2, r2, #2
 800c2bc:	189a      	adds	r2, r3, r2
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	0011      	movs	r1, r2
 800c2c2:	0018      	movs	r0, r3
 800c2c4:	f000 fac5 	bl	800c852 <USBD_StdEPReq>
      break;
 800c2c8:	e00c      	b.n	800c2e4 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	23aa      	movs	r3, #170	@ 0xaa
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	5cd3      	ldrb	r3, [r2, r3]
 800c2d2:	227f      	movs	r2, #127	@ 0x7f
 800c2d4:	4393      	bics	r3, r2
 800c2d6:	b2da      	uxtb	r2, r3
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	0011      	movs	r1, r2
 800c2dc:	0018      	movs	r0, r3
 800c2de:	f001 fcca 	bl	800dc76 <USBD_LL_StallEP>
      break;
 800c2e2:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800c2e4:	2300      	movs	r3, #0
}
 800c2e6:	0018      	movs	r0, r3
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	b002      	add	sp, #8
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	46c0      	nop			@ (mov r8, r8)
 800c2f0:	000002ae 	.word	0x000002ae

0800c2f4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b086      	sub	sp, #24
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	607a      	str	r2, [r7, #4]
 800c2fe:	200b      	movs	r0, #11
 800c300:	183b      	adds	r3, r7, r0
 800c302:	1c0a      	adds	r2, r1, #0
 800c304:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c306:	183b      	adds	r3, r7, r0
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d154      	bne.n	800c3b8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	3355      	adds	r3, #85	@ 0x55
 800c312:	33ff      	adds	r3, #255	@ 0xff
 800c314:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c316:	68fa      	ldr	r2, [r7, #12]
 800c318:	23a5      	movs	r3, #165	@ 0xa5
 800c31a:	009b      	lsls	r3, r3, #2
 800c31c:	58d3      	ldr	r3, [r2, r3]
 800c31e:	2b03      	cmp	r3, #3
 800c320:	d139      	bne.n	800c396 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	68da      	ldr	r2, [r3, #12]
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	691b      	ldr	r3, [r3, #16]
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d919      	bls.n	800c362 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	68da      	ldr	r2, [r3, #12]
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	691b      	ldr	r3, [r3, #16]
 800c336:	1ad2      	subs	r2, r2, r3
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c33c:	697b      	ldr	r3, [r7, #20]
 800c33e:	68da      	ldr	r2, [r3, #12]
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c344:	429a      	cmp	r2, r3
 800c346:	d203      	bcs.n	800c350 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800c34c:	b29b      	uxth	r3, r3
 800c34e:	e002      	b.n	800c356 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c354:	b29b      	uxth	r3, r3
 800c356:	6879      	ldr	r1, [r7, #4]
 800c358:	68f8      	ldr	r0, [r7, #12]
 800c35a:	001a      	movs	r2, r3
 800c35c:	f001 f898 	bl	800d490 <USBD_CtlContinueRx>
 800c360:	e045      	b.n	800c3ee <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c362:	68fa      	ldr	r2, [r7, #12]
 800c364:	23ad      	movs	r3, #173	@ 0xad
 800c366:	009b      	lsls	r3, r3, #2
 800c368:	58d3      	ldr	r3, [r2, r3]
 800c36a:	691b      	ldr	r3, [r3, #16]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d00d      	beq.n	800c38c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c370:	68fa      	ldr	r2, [r7, #12]
 800c372:	23a7      	movs	r3, #167	@ 0xa7
 800c374:	009b      	lsls	r3, r3, #2
 800c376:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c378:	2b03      	cmp	r3, #3
 800c37a:	d107      	bne.n	800c38c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	23ad      	movs	r3, #173	@ 0xad
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	58d3      	ldr	r3, [r2, r3]
 800c384:	691b      	ldr	r3, [r3, #16]
 800c386:	68fa      	ldr	r2, [r7, #12]
 800c388:	0010      	movs	r0, r2
 800c38a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	0018      	movs	r0, r3
 800c390:	f001 f891 	bl	800d4b6 <USBD_CtlSendStatus>
 800c394:	e02b      	b.n	800c3ee <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c396:	68fa      	ldr	r2, [r7, #12]
 800c398:	23a5      	movs	r3, #165	@ 0xa5
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	58d3      	ldr	r3, [r2, r3]
 800c39e:	2b05      	cmp	r3, #5
 800c3a0:	d125      	bne.n	800c3ee <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c3a2:	68fa      	ldr	r2, [r7, #12]
 800c3a4:	23a5      	movs	r3, #165	@ 0xa5
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	2100      	movs	r1, #0
 800c3aa:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	2100      	movs	r1, #0
 800c3b0:	0018      	movs	r0, r3
 800c3b2:	f001 fc60 	bl	800dc76 <USBD_LL_StallEP>
 800c3b6:	e01a      	b.n	800c3ee <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c3b8:	68fa      	ldr	r2, [r7, #12]
 800c3ba:	23ad      	movs	r3, #173	@ 0xad
 800c3bc:	009b      	lsls	r3, r3, #2
 800c3be:	58d3      	ldr	r3, [r2, r3]
 800c3c0:	699b      	ldr	r3, [r3, #24]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d011      	beq.n	800c3ea <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c3c6:	68fa      	ldr	r2, [r7, #12]
 800c3c8:	23a7      	movs	r3, #167	@ 0xa7
 800c3ca:	009b      	lsls	r3, r3, #2
 800c3cc:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800c3ce:	2b03      	cmp	r3, #3
 800c3d0:	d10b      	bne.n	800c3ea <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c3d2:	68fa      	ldr	r2, [r7, #12]
 800c3d4:	23ad      	movs	r3, #173	@ 0xad
 800c3d6:	009b      	lsls	r3, r3, #2
 800c3d8:	58d3      	ldr	r3, [r2, r3]
 800c3da:	699b      	ldr	r3, [r3, #24]
 800c3dc:	220b      	movs	r2, #11
 800c3de:	18ba      	adds	r2, r7, r2
 800c3e0:	7811      	ldrb	r1, [r2, #0]
 800c3e2:	68fa      	ldr	r2, [r7, #12]
 800c3e4:	0010      	movs	r0, r2
 800c3e6:	4798      	blx	r3
 800c3e8:	e001      	b.n	800c3ee <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c3ea:	2302      	movs	r3, #2
 800c3ec:	e000      	b.n	800c3f0 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800c3ee:	2300      	movs	r3, #0
}
 800c3f0:	0018      	movs	r0, r3
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	b006      	add	sp, #24
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b086      	sub	sp, #24
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	60f8      	str	r0, [r7, #12]
 800c400:	607a      	str	r2, [r7, #4]
 800c402:	200b      	movs	r0, #11
 800c404:	183b      	adds	r3, r7, r0
 800c406:	1c0a      	adds	r2, r1, #0
 800c408:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c40a:	183b      	adds	r3, r7, r0
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d000      	beq.n	800c414 <USBD_LL_DataInStage+0x1c>
 800c412:	e08e      	b.n	800c532 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	3314      	adds	r3, #20
 800c418:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c41a:	68fa      	ldr	r2, [r7, #12]
 800c41c:	23a5      	movs	r3, #165	@ 0xa5
 800c41e:	009b      	lsls	r3, r3, #2
 800c420:	58d3      	ldr	r3, [r2, r3]
 800c422:	2b02      	cmp	r3, #2
 800c424:	d164      	bne.n	800c4f0 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	68da      	ldr	r2, [r3, #12]
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	691b      	ldr	r3, [r3, #16]
 800c42e:	429a      	cmp	r2, r3
 800c430:	d915      	bls.n	800c45e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	68da      	ldr	r2, [r3, #12]
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	691b      	ldr	r3, [r3, #16]
 800c43a:	1ad2      	subs	r2, r2, r3
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	68db      	ldr	r3, [r3, #12]
 800c444:	b29a      	uxth	r2, r3
 800c446:	6879      	ldr	r1, [r7, #4]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	0018      	movs	r0, r3
 800c44c:	f000 ffe9 	bl	800d422 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c450:	68f8      	ldr	r0, [r7, #12]
 800c452:	2300      	movs	r3, #0
 800c454:	2200      	movs	r2, #0
 800c456:	2100      	movs	r1, #0
 800c458:	f001 fcf5 	bl	800de46 <USBD_LL_PrepareReceive>
 800c45c:	e059      	b.n	800c512 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	689a      	ldr	r2, [r3, #8]
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	691b      	ldr	r3, [r3, #16]
 800c466:	0019      	movs	r1, r3
 800c468:	0010      	movs	r0, r2
 800c46a:	f7f3 feef 	bl	800024c <__aeabi_uidivmod>
 800c46e:	1e0b      	subs	r3, r1, #0
 800c470:	d11f      	bne.n	800c4b2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	689a      	ldr	r2, [r3, #8]
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d319      	bcc.n	800c4b2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	689a      	ldr	r2, [r3, #8]
 800c482:	68f9      	ldr	r1, [r7, #12]
 800c484:	23a6      	movs	r3, #166	@ 0xa6
 800c486:	009b      	lsls	r3, r3, #2
 800c488:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800c48a:	429a      	cmp	r2, r3
 800c48c:	d211      	bcs.n	800c4b2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2200      	movs	r2, #0
 800c492:	2100      	movs	r1, #0
 800c494:	0018      	movs	r0, r3
 800c496:	f000 ffc4 	bl	800d422 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c49a:	68fa      	ldr	r2, [r7, #12]
 800c49c:	23a6      	movs	r3, #166	@ 0xa6
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	2100      	movs	r1, #0
 800c4a2:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4a4:	68f8      	ldr	r0, [r7, #12]
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	2100      	movs	r1, #0
 800c4ac:	f001 fccb 	bl	800de46 <USBD_LL_PrepareReceive>
 800c4b0:	e02f      	b.n	800c512 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c4b2:	68fa      	ldr	r2, [r7, #12]
 800c4b4:	23ad      	movs	r3, #173	@ 0xad
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	58d3      	ldr	r3, [r2, r3]
 800c4ba:	68db      	ldr	r3, [r3, #12]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d00d      	beq.n	800c4dc <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c4c0:	68fa      	ldr	r2, [r7, #12]
 800c4c2:	23a7      	movs	r3, #167	@ 0xa7
 800c4c4:	009b      	lsls	r3, r3, #2
 800c4c6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c4c8:	2b03      	cmp	r3, #3
 800c4ca:	d107      	bne.n	800c4dc <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c4cc:	68fa      	ldr	r2, [r7, #12]
 800c4ce:	23ad      	movs	r3, #173	@ 0xad
 800c4d0:	009b      	lsls	r3, r3, #2
 800c4d2:	58d3      	ldr	r3, [r2, r3]
 800c4d4:	68db      	ldr	r3, [r3, #12]
 800c4d6:	68fa      	ldr	r2, [r7, #12]
 800c4d8:	0010      	movs	r0, r2
 800c4da:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2180      	movs	r1, #128	@ 0x80
 800c4e0:	0018      	movs	r0, r3
 800c4e2:	f001 fbc8 	bl	800dc76 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	0018      	movs	r0, r3
 800c4ea:	f000 fff8 	bl	800d4de <USBD_CtlReceiveStatus>
 800c4ee:	e010      	b.n	800c512 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c4f0:	68fa      	ldr	r2, [r7, #12]
 800c4f2:	23a5      	movs	r3, #165	@ 0xa5
 800c4f4:	009b      	lsls	r3, r3, #2
 800c4f6:	58d3      	ldr	r3, [r2, r3]
 800c4f8:	2b04      	cmp	r3, #4
 800c4fa:	d005      	beq.n	800c508 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c4fc:	68fa      	ldr	r2, [r7, #12]
 800c4fe:	23a5      	movs	r3, #165	@ 0xa5
 800c500:	009b      	lsls	r3, r3, #2
 800c502:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c504:	2b00      	cmp	r3, #0
 800c506:	d104      	bne.n	800c512 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2180      	movs	r1, #128	@ 0x80
 800c50c:	0018      	movs	r0, r3
 800c50e:	f001 fbb2 	bl	800dc76 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c512:	68fa      	ldr	r2, [r7, #12]
 800c514:	23a8      	movs	r3, #168	@ 0xa8
 800c516:	009b      	lsls	r3, r3, #2
 800c518:	5cd3      	ldrb	r3, [r2, r3]
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d124      	bne.n	800c568 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	0018      	movs	r0, r3
 800c522:	f7ff fe43 	bl	800c1ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c526:	68fa      	ldr	r2, [r7, #12]
 800c528:	23a8      	movs	r3, #168	@ 0xa8
 800c52a:	009b      	lsls	r3, r3, #2
 800c52c:	2100      	movs	r1, #0
 800c52e:	54d1      	strb	r1, [r2, r3]
 800c530:	e01a      	b.n	800c568 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c532:	68fa      	ldr	r2, [r7, #12]
 800c534:	23ad      	movs	r3, #173	@ 0xad
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	58d3      	ldr	r3, [r2, r3]
 800c53a:	695b      	ldr	r3, [r3, #20]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d011      	beq.n	800c564 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c540:	68fa      	ldr	r2, [r7, #12]
 800c542:	23a7      	movs	r3, #167	@ 0xa7
 800c544:	009b      	lsls	r3, r3, #2
 800c546:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800c548:	2b03      	cmp	r3, #3
 800c54a:	d10b      	bne.n	800c564 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c54c:	68fa      	ldr	r2, [r7, #12]
 800c54e:	23ad      	movs	r3, #173	@ 0xad
 800c550:	009b      	lsls	r3, r3, #2
 800c552:	58d3      	ldr	r3, [r2, r3]
 800c554:	695b      	ldr	r3, [r3, #20]
 800c556:	220b      	movs	r2, #11
 800c558:	18ba      	adds	r2, r7, r2
 800c55a:	7811      	ldrb	r1, [r2, #0]
 800c55c:	68fa      	ldr	r2, [r7, #12]
 800c55e:	0010      	movs	r0, r2
 800c560:	4798      	blx	r3
 800c562:	e001      	b.n	800c568 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c564:	2302      	movs	r3, #2
 800c566:	e000      	b.n	800c56a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800c568:	2300      	movs	r3, #0
}
 800c56a:	0018      	movs	r0, r3
 800c56c:	46bd      	mov	sp, r7
 800c56e:	b006      	add	sp, #24
 800c570:	bd80      	pop	{r7, pc}

0800c572 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c572:	b580      	push	{r7, lr}
 800c574:	b082      	sub	sp, #8
 800c576:	af00      	add	r7, sp, #0
 800c578:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	2340      	movs	r3, #64	@ 0x40
 800c57e:	2200      	movs	r2, #0
 800c580:	2100      	movs	r1, #0
 800c582:	f001 fb16 	bl	800dbb2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	23ac      	movs	r3, #172	@ 0xac
 800c58a:	005b      	lsls	r3, r3, #1
 800c58c:	2101      	movs	r1, #1
 800c58e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c590:	687a      	ldr	r2, [r7, #4]
 800c592:	23b2      	movs	r3, #178	@ 0xb2
 800c594:	005b      	lsls	r3, r3, #1
 800c596:	2140      	movs	r1, #64	@ 0x40
 800c598:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	2340      	movs	r3, #64	@ 0x40
 800c59e:	2200      	movs	r2, #0
 800c5a0:	2180      	movs	r1, #128	@ 0x80
 800c5a2:	f001 fb06 	bl	800dbb2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2201      	movs	r2, #1
 800c5aa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2240      	movs	r2, #64	@ 0x40
 800c5b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	23a7      	movs	r3, #167	@ 0xa7
 800c5b6:	009b      	lsls	r3, r3, #2
 800c5b8:	2101      	movs	r1, #1
 800c5ba:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	23a5      	movs	r3, #165	@ 0xa5
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	2100      	movs	r1, #0
 800c5c4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c5cc:	687a      	ldr	r2, [r7, #4]
 800c5ce:	23a9      	movs	r3, #169	@ 0xa9
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	2100      	movs	r1, #0
 800c5d4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	23ae      	movs	r3, #174	@ 0xae
 800c5da:	009b      	lsls	r3, r3, #2
 800c5dc:	58d3      	ldr	r3, [r2, r3]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d00a      	beq.n	800c5f8 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	23ad      	movs	r3, #173	@ 0xad
 800c5e6:	009b      	lsls	r3, r3, #2
 800c5e8:	58d3      	ldr	r3, [r2, r3]
 800c5ea:	685a      	ldr	r2, [r3, #4]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	b2d9      	uxtb	r1, r3
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	0018      	movs	r0, r3
 800c5f6:	4790      	blx	r2
  }

  return USBD_OK;
 800c5f8:	2300      	movs	r3, #0
}
 800c5fa:	0018      	movs	r0, r3
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	b002      	add	sp, #8
 800c600:	bd80      	pop	{r7, pc}

0800c602 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c602:	b580      	push	{r7, lr}
 800c604:	b082      	sub	sp, #8
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
 800c60a:	000a      	movs	r2, r1
 800c60c:	1cfb      	adds	r3, r7, #3
 800c60e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	1cfa      	adds	r2, r7, #3
 800c614:	7812      	ldrb	r2, [r2, #0]
 800c616:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c618:	2300      	movs	r3, #0
}
 800c61a:	0018      	movs	r0, r3
 800c61c:	46bd      	mov	sp, r7
 800c61e:	b002      	add	sp, #8
 800c620:	bd80      	pop	{r7, pc}
	...

0800c624 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	23a7      	movs	r3, #167	@ 0xa7
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	5cd1      	ldrb	r1, [r2, r3]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	4a06      	ldr	r2, [pc, #24]	@ (800c650 <USBD_LL_Suspend+0x2c>)
 800c638:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	23a7      	movs	r3, #167	@ 0xa7
 800c63e:	009b      	lsls	r3, r3, #2
 800c640:	2104      	movs	r1, #4
 800c642:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800c644:	2300      	movs	r3, #0
}
 800c646:	0018      	movs	r0, r3
 800c648:	46bd      	mov	sp, r7
 800c64a:	b002      	add	sp, #8
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	46c0      	nop			@ (mov r8, r8)
 800c650:	0000029d 	.word	0x0000029d

0800c654 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b082      	sub	sp, #8
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	23a7      	movs	r3, #167	@ 0xa7
 800c660:	009b      	lsls	r3, r3, #2
 800c662:	5cd3      	ldrb	r3, [r2, r3]
 800c664:	2b04      	cmp	r3, #4
 800c666:	d106      	bne.n	800c676 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	4a05      	ldr	r2, [pc, #20]	@ (800c680 <USBD_LL_Resume+0x2c>)
 800c66c:	5c99      	ldrb	r1, [r3, r2]
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	23a7      	movs	r3, #167	@ 0xa7
 800c672:	009b      	lsls	r3, r3, #2
 800c674:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800c676:	2300      	movs	r3, #0
}
 800c678:	0018      	movs	r0, r3
 800c67a:	46bd      	mov	sp, r7
 800c67c:	b002      	add	sp, #8
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	0000029d 	.word	0x0000029d

0800c684 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c68c:	687a      	ldr	r2, [r7, #4]
 800c68e:	23a7      	movs	r3, #167	@ 0xa7
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	5cd3      	ldrb	r3, [r2, r3]
 800c694:	2b03      	cmp	r3, #3
 800c696:	d10e      	bne.n	800c6b6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	23ad      	movs	r3, #173	@ 0xad
 800c69c:	009b      	lsls	r3, r3, #2
 800c69e:	58d3      	ldr	r3, [r2, r3]
 800c6a0:	69db      	ldr	r3, [r3, #28]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d007      	beq.n	800c6b6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	23ad      	movs	r3, #173	@ 0xad
 800c6aa:	009b      	lsls	r3, r3, #2
 800c6ac:	58d3      	ldr	r3, [r2, r3]
 800c6ae:	69db      	ldr	r3, [r3, #28]
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	0010      	movs	r0, r2
 800c6b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c6b6:	2300      	movs	r3, #0
}
 800c6b8:	0018      	movs	r0, r3
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	b002      	add	sp, #8
 800c6be:	bd80      	pop	{r7, pc}

0800c6c0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b084      	sub	sp, #16
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6ca:	230f      	movs	r3, #15
 800c6cc:	18fb      	adds	r3, r7, r3
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	001a      	movs	r2, r3
 800c6d8:	2360      	movs	r3, #96	@ 0x60
 800c6da:	4013      	ands	r3, r2
 800c6dc:	2b40      	cmp	r3, #64	@ 0x40
 800c6de:	d004      	beq.n	800c6ea <USBD_StdDevReq+0x2a>
 800c6e0:	d84f      	bhi.n	800c782 <USBD_StdDevReq+0xc2>
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d00b      	beq.n	800c6fe <USBD_StdDevReq+0x3e>
 800c6e6:	2b20      	cmp	r3, #32
 800c6e8:	d14b      	bne.n	800c782 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c6ea:	687a      	ldr	r2, [r7, #4]
 800c6ec:	23ad      	movs	r3, #173	@ 0xad
 800c6ee:	009b      	lsls	r3, r3, #2
 800c6f0:	58d3      	ldr	r3, [r2, r3]
 800c6f2:	689b      	ldr	r3, [r3, #8]
 800c6f4:	6839      	ldr	r1, [r7, #0]
 800c6f6:	687a      	ldr	r2, [r7, #4]
 800c6f8:	0010      	movs	r0, r2
 800c6fa:	4798      	blx	r3
      break;
 800c6fc:	e048      	b.n	800c790 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	785b      	ldrb	r3, [r3, #1]
 800c702:	2b09      	cmp	r3, #9
 800c704:	d835      	bhi.n	800c772 <USBD_StdDevReq+0xb2>
 800c706:	009a      	lsls	r2, r3, #2
 800c708:	4b25      	ldr	r3, [pc, #148]	@ (800c7a0 <USBD_StdDevReq+0xe0>)
 800c70a:	18d3      	adds	r3, r2, r3
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c710:	683a      	ldr	r2, [r7, #0]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	0011      	movs	r1, r2
 800c716:	0018      	movs	r0, r3
 800c718:	f000 fa52 	bl	800cbc0 <USBD_GetDescriptor>
          break;
 800c71c:	e030      	b.n	800c780 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c71e:	683a      	ldr	r2, [r7, #0]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	0011      	movs	r1, r2
 800c724:	0018      	movs	r0, r3
 800c726:	f000 fbfd 	bl	800cf24 <USBD_SetAddress>
          break;
 800c72a:	e029      	b.n	800c780 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800c72c:	683a      	ldr	r2, [r7, #0]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	0011      	movs	r1, r2
 800c732:	0018      	movs	r0, r3
 800c734:	f000 fc4a 	bl	800cfcc <USBD_SetConfig>
          break;
 800c738:	e022      	b.n	800c780 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c73a:	683a      	ldr	r2, [r7, #0]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	0011      	movs	r1, r2
 800c740:	0018      	movs	r0, r3
 800c742:	f000 fce7 	bl	800d114 <USBD_GetConfig>
          break;
 800c746:	e01b      	b.n	800c780 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c748:	683a      	ldr	r2, [r7, #0]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	0011      	movs	r1, r2
 800c74e:	0018      	movs	r0, r3
 800c750:	f000 fd1b 	bl	800d18a <USBD_GetStatus>
          break;
 800c754:	e014      	b.n	800c780 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c756:	683a      	ldr	r2, [r7, #0]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	0011      	movs	r1, r2
 800c75c:	0018      	movs	r0, r3
 800c75e:	f000 fd4e 	bl	800d1fe <USBD_SetFeature>
          break;
 800c762:	e00d      	b.n	800c780 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c764:	683a      	ldr	r2, [r7, #0]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	0011      	movs	r1, r2
 800c76a:	0018      	movs	r0, r3
 800c76c:	f000 fd5d 	bl	800d22a <USBD_ClrFeature>
          break;
 800c770:	e006      	b.n	800c780 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c772:	683a      	ldr	r2, [r7, #0]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	0011      	movs	r1, r2
 800c778:	0018      	movs	r0, r3
 800c77a:	f000 fdb4 	bl	800d2e6 <USBD_CtlError>
          break;
 800c77e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800c780:	e006      	b.n	800c790 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c782:	683a      	ldr	r2, [r7, #0]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	0011      	movs	r1, r2
 800c788:	0018      	movs	r0, r3
 800c78a:	f000 fdac 	bl	800d2e6 <USBD_CtlError>
      break;
 800c78e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800c790:	230f      	movs	r3, #15
 800c792:	18fb      	adds	r3, r7, r3
 800c794:	781b      	ldrb	r3, [r3, #0]
}
 800c796:	0018      	movs	r0, r3
 800c798:	46bd      	mov	sp, r7
 800c79a:	b004      	add	sp, #16
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	46c0      	nop			@ (mov r8, r8)
 800c7a0:	080122f8 	.word	0x080122f8

0800c7a4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800c7a4:	b5b0      	push	{r4, r5, r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7ae:	230f      	movs	r3, #15
 800c7b0:	18fb      	adds	r3, r7, r3
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	001a      	movs	r2, r3
 800c7bc:	2360      	movs	r3, #96	@ 0x60
 800c7be:	4013      	ands	r3, r2
 800c7c0:	2b40      	cmp	r3, #64	@ 0x40
 800c7c2:	d004      	beq.n	800c7ce <USBD_StdItfReq+0x2a>
 800c7c4:	d839      	bhi.n	800c83a <USBD_StdItfReq+0x96>
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d001      	beq.n	800c7ce <USBD_StdItfReq+0x2a>
 800c7ca:	2b20      	cmp	r3, #32
 800c7cc:	d135      	bne.n	800c83a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	23a7      	movs	r3, #167	@ 0xa7
 800c7d2:	009b      	lsls	r3, r3, #2
 800c7d4:	5cd3      	ldrb	r3, [r2, r3]
 800c7d6:	3b01      	subs	r3, #1
 800c7d8:	2b02      	cmp	r3, #2
 800c7da:	d825      	bhi.n	800c828 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	889b      	ldrh	r3, [r3, #4]
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	2b01      	cmp	r3, #1
 800c7e4:	d819      	bhi.n	800c81a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c7e6:	687a      	ldr	r2, [r7, #4]
 800c7e8:	23ad      	movs	r3, #173	@ 0xad
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	58d3      	ldr	r3, [r2, r3]
 800c7ee:	689b      	ldr	r3, [r3, #8]
 800c7f0:	250f      	movs	r5, #15
 800c7f2:	197c      	adds	r4, r7, r5
 800c7f4:	6839      	ldr	r1, [r7, #0]
 800c7f6:	687a      	ldr	r2, [r7, #4]
 800c7f8:	0010      	movs	r0, r2
 800c7fa:	4798      	blx	r3
 800c7fc:	0003      	movs	r3, r0
 800c7fe:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	88db      	ldrh	r3, [r3, #6]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d116      	bne.n	800c836 <USBD_StdItfReq+0x92>
 800c808:	197b      	adds	r3, r7, r5
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d112      	bne.n	800c836 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	0018      	movs	r0, r3
 800c814:	f000 fe4f 	bl	800d4b6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c818:	e00d      	b.n	800c836 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800c81a:	683a      	ldr	r2, [r7, #0]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	0011      	movs	r1, r2
 800c820:	0018      	movs	r0, r3
 800c822:	f000 fd60 	bl	800d2e6 <USBD_CtlError>
          break;
 800c826:	e006      	b.n	800c836 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800c828:	683a      	ldr	r2, [r7, #0]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	0011      	movs	r1, r2
 800c82e:	0018      	movs	r0, r3
 800c830:	f000 fd59 	bl	800d2e6 <USBD_CtlError>
          break;
 800c834:	e000      	b.n	800c838 <USBD_StdItfReq+0x94>
          break;
 800c836:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800c838:	e006      	b.n	800c848 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800c83a:	683a      	ldr	r2, [r7, #0]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	0011      	movs	r1, r2
 800c840:	0018      	movs	r0, r3
 800c842:	f000 fd50 	bl	800d2e6 <USBD_CtlError>
      break;
 800c846:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800c848:	2300      	movs	r3, #0
}
 800c84a:	0018      	movs	r0, r3
 800c84c:	46bd      	mov	sp, r7
 800c84e:	b004      	add	sp, #16
 800c850:	bdb0      	pop	{r4, r5, r7, pc}

0800c852 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800c852:	b5b0      	push	{r4, r5, r7, lr}
 800c854:	b084      	sub	sp, #16
 800c856:	af00      	add	r7, sp, #0
 800c858:	6078      	str	r0, [r7, #4]
 800c85a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c85c:	230f      	movs	r3, #15
 800c85e:	18fb      	adds	r3, r7, r3
 800c860:	2200      	movs	r2, #0
 800c862:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	889a      	ldrh	r2, [r3, #4]
 800c868:	230e      	movs	r3, #14
 800c86a:	18fb      	adds	r3, r7, r3
 800c86c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	001a      	movs	r2, r3
 800c874:	2360      	movs	r3, #96	@ 0x60
 800c876:	4013      	ands	r3, r2
 800c878:	2b40      	cmp	r3, #64	@ 0x40
 800c87a:	d006      	beq.n	800c88a <USBD_StdEPReq+0x38>
 800c87c:	d900      	bls.n	800c880 <USBD_StdEPReq+0x2e>
 800c87e:	e190      	b.n	800cba2 <USBD_StdEPReq+0x350>
 800c880:	2b00      	cmp	r3, #0
 800c882:	d00c      	beq.n	800c89e <USBD_StdEPReq+0x4c>
 800c884:	2b20      	cmp	r3, #32
 800c886:	d000      	beq.n	800c88a <USBD_StdEPReq+0x38>
 800c888:	e18b      	b.n	800cba2 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	23ad      	movs	r3, #173	@ 0xad
 800c88e:	009b      	lsls	r3, r3, #2
 800c890:	58d3      	ldr	r3, [r2, r3]
 800c892:	689b      	ldr	r3, [r3, #8]
 800c894:	6839      	ldr	r1, [r7, #0]
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	0010      	movs	r0, r2
 800c89a:	4798      	blx	r3
      break;
 800c89c:	e188      	b.n	800cbb0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	001a      	movs	r2, r3
 800c8a4:	2360      	movs	r3, #96	@ 0x60
 800c8a6:	4013      	ands	r3, r2
 800c8a8:	2b20      	cmp	r3, #32
 800c8aa:	d10f      	bne.n	800c8cc <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c8ac:	687a      	ldr	r2, [r7, #4]
 800c8ae:	23ad      	movs	r3, #173	@ 0xad
 800c8b0:	009b      	lsls	r3, r3, #2
 800c8b2:	58d3      	ldr	r3, [r2, r3]
 800c8b4:	689b      	ldr	r3, [r3, #8]
 800c8b6:	250f      	movs	r5, #15
 800c8b8:	197c      	adds	r4, r7, r5
 800c8ba:	6839      	ldr	r1, [r7, #0]
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	0010      	movs	r0, r2
 800c8c0:	4798      	blx	r3
 800c8c2:	0003      	movs	r3, r0
 800c8c4:	7023      	strb	r3, [r4, #0]

        return ret;
 800c8c6:	197b      	adds	r3, r7, r5
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	e174      	b.n	800cbb6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	785b      	ldrb	r3, [r3, #1]
 800c8d0:	2b03      	cmp	r3, #3
 800c8d2:	d007      	beq.n	800c8e4 <USBD_StdEPReq+0x92>
 800c8d4:	dd00      	ble.n	800c8d8 <USBD_StdEPReq+0x86>
 800c8d6:	e15c      	b.n	800cb92 <USBD_StdEPReq+0x340>
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d100      	bne.n	800c8de <USBD_StdEPReq+0x8c>
 800c8dc:	e092      	b.n	800ca04 <USBD_StdEPReq+0x1b2>
 800c8de:	2b01      	cmp	r3, #1
 800c8e0:	d04b      	beq.n	800c97a <USBD_StdEPReq+0x128>
 800c8e2:	e156      	b.n	800cb92 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	23a7      	movs	r3, #167	@ 0xa7
 800c8e8:	009b      	lsls	r3, r3, #2
 800c8ea:	5cd3      	ldrb	r3, [r2, r3]
 800c8ec:	2b02      	cmp	r3, #2
 800c8ee:	d002      	beq.n	800c8f6 <USBD_StdEPReq+0xa4>
 800c8f0:	2b03      	cmp	r3, #3
 800c8f2:	d01d      	beq.n	800c930 <USBD_StdEPReq+0xde>
 800c8f4:	e039      	b.n	800c96a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c8f6:	220e      	movs	r2, #14
 800c8f8:	18bb      	adds	r3, r7, r2
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d010      	beq.n	800c922 <USBD_StdEPReq+0xd0>
 800c900:	18bb      	adds	r3, r7, r2
 800c902:	781b      	ldrb	r3, [r3, #0]
 800c904:	2b80      	cmp	r3, #128	@ 0x80
 800c906:	d00c      	beq.n	800c922 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c908:	18bb      	adds	r3, r7, r2
 800c90a:	781a      	ldrb	r2, [r3, #0]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	0011      	movs	r1, r2
 800c910:	0018      	movs	r0, r3
 800c912:	f001 f9b0 	bl	800dc76 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2180      	movs	r1, #128	@ 0x80
 800c91a:	0018      	movs	r0, r3
 800c91c:	f001 f9ab 	bl	800dc76 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c920:	e02a      	b.n	800c978 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800c922:	683a      	ldr	r2, [r7, #0]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	0011      	movs	r1, r2
 800c928:	0018      	movs	r0, r3
 800c92a:	f000 fcdc 	bl	800d2e6 <USBD_CtlError>
              break;
 800c92e:	e023      	b.n	800c978 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	885b      	ldrh	r3, [r3, #2]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d113      	bne.n	800c960 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800c938:	220e      	movs	r2, #14
 800c93a:	18bb      	adds	r3, r7, r2
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d00e      	beq.n	800c960 <USBD_StdEPReq+0x10e>
 800c942:	18bb      	adds	r3, r7, r2
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	2b80      	cmp	r3, #128	@ 0x80
 800c948:	d00a      	beq.n	800c960 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	88db      	ldrh	r3, [r3, #6]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d106      	bne.n	800c960 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c952:	18bb      	adds	r3, r7, r2
 800c954:	781a      	ldrb	r2, [r3, #0]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	0011      	movs	r1, r2
 800c95a:	0018      	movs	r0, r3
 800c95c:	f001 f98b 	bl	800dc76 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	0018      	movs	r0, r3
 800c964:	f000 fda7 	bl	800d4b6 <USBD_CtlSendStatus>

              break;
 800c968:	e006      	b.n	800c978 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800c96a:	683a      	ldr	r2, [r7, #0]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	0011      	movs	r1, r2
 800c970:	0018      	movs	r0, r3
 800c972:	f000 fcb8 	bl	800d2e6 <USBD_CtlError>
              break;
 800c976:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800c978:	e112      	b.n	800cba0 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c97a:	687a      	ldr	r2, [r7, #4]
 800c97c:	23a7      	movs	r3, #167	@ 0xa7
 800c97e:	009b      	lsls	r3, r3, #2
 800c980:	5cd3      	ldrb	r3, [r2, r3]
 800c982:	2b02      	cmp	r3, #2
 800c984:	d002      	beq.n	800c98c <USBD_StdEPReq+0x13a>
 800c986:	2b03      	cmp	r3, #3
 800c988:	d01d      	beq.n	800c9c6 <USBD_StdEPReq+0x174>
 800c98a:	e032      	b.n	800c9f2 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c98c:	220e      	movs	r2, #14
 800c98e:	18bb      	adds	r3, r7, r2
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d010      	beq.n	800c9b8 <USBD_StdEPReq+0x166>
 800c996:	18bb      	adds	r3, r7, r2
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	2b80      	cmp	r3, #128	@ 0x80
 800c99c:	d00c      	beq.n	800c9b8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c99e:	18bb      	adds	r3, r7, r2
 800c9a0:	781a      	ldrb	r2, [r3, #0]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	0011      	movs	r1, r2
 800c9a6:	0018      	movs	r0, r3
 800c9a8:	f001 f965 	bl	800dc76 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2180      	movs	r1, #128	@ 0x80
 800c9b0:	0018      	movs	r0, r3
 800c9b2:	f001 f960 	bl	800dc76 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c9b6:	e024      	b.n	800ca02 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800c9b8:	683a      	ldr	r2, [r7, #0]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	0011      	movs	r1, r2
 800c9be:	0018      	movs	r0, r3
 800c9c0:	f000 fc91 	bl	800d2e6 <USBD_CtlError>
              break;
 800c9c4:	e01d      	b.n	800ca02 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	885b      	ldrh	r3, [r3, #2]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d118      	bne.n	800ca00 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c9ce:	210e      	movs	r1, #14
 800c9d0:	187b      	adds	r3, r7, r1
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	227f      	movs	r2, #127	@ 0x7f
 800c9d6:	4013      	ands	r3, r2
 800c9d8:	d006      	beq.n	800c9e8 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c9da:	187b      	adds	r3, r7, r1
 800c9dc:	781a      	ldrb	r2, [r3, #0]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	0011      	movs	r1, r2
 800c9e2:	0018      	movs	r0, r3
 800c9e4:	f001 f972 	bl	800dccc <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	0018      	movs	r0, r3
 800c9ec:	f000 fd63 	bl	800d4b6 <USBD_CtlSendStatus>
              }
              break;
 800c9f0:	e006      	b.n	800ca00 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800c9f2:	683a      	ldr	r2, [r7, #0]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	0011      	movs	r1, r2
 800c9f8:	0018      	movs	r0, r3
 800c9fa:	f000 fc74 	bl	800d2e6 <USBD_CtlError>
              break;
 800c9fe:	e000      	b.n	800ca02 <USBD_StdEPReq+0x1b0>
              break;
 800ca00:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800ca02:	e0cd      	b.n	800cba0 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	23a7      	movs	r3, #167	@ 0xa7
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	5cd3      	ldrb	r3, [r2, r3]
 800ca0c:	2b02      	cmp	r3, #2
 800ca0e:	d002      	beq.n	800ca16 <USBD_StdEPReq+0x1c4>
 800ca10:	2b03      	cmp	r3, #3
 800ca12:	d03c      	beq.n	800ca8e <USBD_StdEPReq+0x23c>
 800ca14:	e0b5      	b.n	800cb82 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca16:	220e      	movs	r2, #14
 800ca18:	18bb      	adds	r3, r7, r2
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d00a      	beq.n	800ca36 <USBD_StdEPReq+0x1e4>
 800ca20:	18bb      	adds	r3, r7, r2
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	2b80      	cmp	r3, #128	@ 0x80
 800ca26:	d006      	beq.n	800ca36 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800ca28:	683a      	ldr	r2, [r7, #0]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	0011      	movs	r1, r2
 800ca2e:	0018      	movs	r0, r3
 800ca30:	f000 fc59 	bl	800d2e6 <USBD_CtlError>
                break;
 800ca34:	e0ac      	b.n	800cb90 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca36:	220e      	movs	r2, #14
 800ca38:	18bb      	adds	r3, r7, r2
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	b25b      	sxtb	r3, r3
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	da0c      	bge.n	800ca5c <USBD_StdEPReq+0x20a>
 800ca42:	18bb      	adds	r3, r7, r2
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	227f      	movs	r2, #127	@ 0x7f
 800ca48:	401a      	ands	r2, r3
 800ca4a:	0013      	movs	r3, r2
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	189b      	adds	r3, r3, r2
 800ca50:	009b      	lsls	r3, r3, #2
 800ca52:	3310      	adds	r3, #16
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	18d3      	adds	r3, r2, r3
 800ca58:	3304      	adds	r3, #4
 800ca5a:	e00d      	b.n	800ca78 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ca5c:	230e      	movs	r3, #14
 800ca5e:	18fb      	adds	r3, r7, r3
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	227f      	movs	r2, #127	@ 0x7f
 800ca64:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca66:	0013      	movs	r3, r2
 800ca68:	009b      	lsls	r3, r3, #2
 800ca6a:	189b      	adds	r3, r3, r2
 800ca6c:	009b      	lsls	r3, r3, #2
 800ca6e:	3351      	adds	r3, #81	@ 0x51
 800ca70:	33ff      	adds	r3, #255	@ 0xff
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	18d3      	adds	r3, r2, r3
 800ca76:	3304      	adds	r3, #4
 800ca78:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ca80:	68b9      	ldr	r1, [r7, #8]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2202      	movs	r2, #2
 800ca86:	0018      	movs	r0, r3
 800ca88:	f000 fcab 	bl	800d3e2 <USBD_CtlSendData>
              break;
 800ca8c:	e080      	b.n	800cb90 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ca8e:	220e      	movs	r2, #14
 800ca90:	18bb      	adds	r3, r7, r2
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	b25b      	sxtb	r3, r3
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	da14      	bge.n	800cac4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ca9a:	18bb      	adds	r3, r7, r2
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	220f      	movs	r2, #15
 800caa0:	401a      	ands	r2, r3
 800caa2:	6879      	ldr	r1, [r7, #4]
 800caa4:	0013      	movs	r3, r2
 800caa6:	009b      	lsls	r3, r3, #2
 800caa8:	189b      	adds	r3, r3, r2
 800caaa:	009b      	lsls	r3, r3, #2
 800caac:	18cb      	adds	r3, r1, r3
 800caae:	3318      	adds	r3, #24
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d11e      	bne.n	800caf4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800cab6:	683a      	ldr	r2, [r7, #0]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	0011      	movs	r1, r2
 800cabc:	0018      	movs	r0, r3
 800cabe:	f000 fc12 	bl	800d2e6 <USBD_CtlError>
                  break;
 800cac2:	e065      	b.n	800cb90 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cac4:	230e      	movs	r3, #14
 800cac6:	18fb      	adds	r3, r7, r3
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	220f      	movs	r2, #15
 800cacc:	401a      	ands	r2, r3
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	23ac      	movs	r3, #172	@ 0xac
 800cad2:	0059      	lsls	r1, r3, #1
 800cad4:	0013      	movs	r3, r2
 800cad6:	009b      	lsls	r3, r3, #2
 800cad8:	189b      	adds	r3, r3, r2
 800cada:	009b      	lsls	r3, r3, #2
 800cadc:	18c3      	adds	r3, r0, r3
 800cade:	185b      	adds	r3, r3, r1
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d106      	bne.n	800caf4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800cae6:	683a      	ldr	r2, [r7, #0]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	0011      	movs	r1, r2
 800caec:	0018      	movs	r0, r3
 800caee:	f000 fbfa 	bl	800d2e6 <USBD_CtlError>
                  break;
 800caf2:	e04d      	b.n	800cb90 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800caf4:	220e      	movs	r2, #14
 800caf6:	18bb      	adds	r3, r7, r2
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	b25b      	sxtb	r3, r3
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	da0c      	bge.n	800cb1a <USBD_StdEPReq+0x2c8>
 800cb00:	18bb      	adds	r3, r7, r2
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	227f      	movs	r2, #127	@ 0x7f
 800cb06:	401a      	ands	r2, r3
 800cb08:	0013      	movs	r3, r2
 800cb0a:	009b      	lsls	r3, r3, #2
 800cb0c:	189b      	adds	r3, r3, r2
 800cb0e:	009b      	lsls	r3, r3, #2
 800cb10:	3310      	adds	r3, #16
 800cb12:	687a      	ldr	r2, [r7, #4]
 800cb14:	18d3      	adds	r3, r2, r3
 800cb16:	3304      	adds	r3, #4
 800cb18:	e00d      	b.n	800cb36 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cb1a:	230e      	movs	r3, #14
 800cb1c:	18fb      	adds	r3, r7, r3
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	227f      	movs	r2, #127	@ 0x7f
 800cb22:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb24:	0013      	movs	r3, r2
 800cb26:	009b      	lsls	r3, r3, #2
 800cb28:	189b      	adds	r3, r3, r2
 800cb2a:	009b      	lsls	r3, r3, #2
 800cb2c:	3351      	adds	r3, #81	@ 0x51
 800cb2e:	33ff      	adds	r3, #255	@ 0xff
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	18d3      	adds	r3, r2, r3
 800cb34:	3304      	adds	r3, #4
 800cb36:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cb38:	220e      	movs	r2, #14
 800cb3a:	18bb      	adds	r3, r7, r2
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d003      	beq.n	800cb4a <USBD_StdEPReq+0x2f8>
 800cb42:	18bb      	adds	r3, r7, r2
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	2b80      	cmp	r3, #128	@ 0x80
 800cb48:	d103      	bne.n	800cb52 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	601a      	str	r2, [r3, #0]
 800cb50:	e010      	b.n	800cb74 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800cb52:	230e      	movs	r3, #14
 800cb54:	18fb      	adds	r3, r7, r3
 800cb56:	781a      	ldrb	r2, [r3, #0]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	0011      	movs	r1, r2
 800cb5c:	0018      	movs	r0, r3
 800cb5e:	f001 f8e0 	bl	800dd22 <USBD_LL_IsStallEP>
 800cb62:	1e03      	subs	r3, r0, #0
 800cb64:	d003      	beq.n	800cb6e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	2201      	movs	r2, #1
 800cb6a:	601a      	str	r2, [r3, #0]
 800cb6c:	e002      	b.n	800cb74 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	2200      	movs	r2, #0
 800cb72:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cb74:	68b9      	ldr	r1, [r7, #8]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2202      	movs	r2, #2
 800cb7a:	0018      	movs	r0, r3
 800cb7c:	f000 fc31 	bl	800d3e2 <USBD_CtlSendData>
              break;
 800cb80:	e006      	b.n	800cb90 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800cb82:	683a      	ldr	r2, [r7, #0]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	0011      	movs	r1, r2
 800cb88:	0018      	movs	r0, r3
 800cb8a:	f000 fbac 	bl	800d2e6 <USBD_CtlError>
              break;
 800cb8e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800cb90:	e006      	b.n	800cba0 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800cb92:	683a      	ldr	r2, [r7, #0]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	0011      	movs	r1, r2
 800cb98:	0018      	movs	r0, r3
 800cb9a:	f000 fba4 	bl	800d2e6 <USBD_CtlError>
          break;
 800cb9e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800cba0:	e006      	b.n	800cbb0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800cba2:	683a      	ldr	r2, [r7, #0]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	0011      	movs	r1, r2
 800cba8:	0018      	movs	r0, r3
 800cbaa:	f000 fb9c 	bl	800d2e6 <USBD_CtlError>
      break;
 800cbae:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800cbb0:	230f      	movs	r3, #15
 800cbb2:	18fb      	adds	r3, r7, r3
 800cbb4:	781b      	ldrb	r3, [r3, #0]
}
 800cbb6:	0018      	movs	r0, r3
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	b004      	add	sp, #16
 800cbbc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800cbc0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b084      	sub	sp, #16
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cbca:	2308      	movs	r3, #8
 800cbcc:	18fb      	adds	r3, r7, r3
 800cbce:	2200      	movs	r2, #0
 800cbd0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cbd6:	230b      	movs	r3, #11
 800cbd8:	18fb      	adds	r3, r7, r3
 800cbda:	2200      	movs	r2, #0
 800cbdc:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	885b      	ldrh	r3, [r3, #2]
 800cbe2:	0a1b      	lsrs	r3, r3, #8
 800cbe4:	b29b      	uxth	r3, r3
 800cbe6:	2b07      	cmp	r3, #7
 800cbe8:	d900      	bls.n	800cbec <USBD_GetDescriptor+0x2c>
 800cbea:	e159      	b.n	800cea0 <USBD_GetDescriptor+0x2e0>
 800cbec:	009a      	lsls	r2, r3, #2
 800cbee:	4bcb      	ldr	r3, [pc, #812]	@ (800cf1c <USBD_GetDescriptor+0x35c>)
 800cbf0:	18d3      	adds	r3, r2, r3
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cbf6:	687a      	ldr	r2, [r7, #4]
 800cbf8:	23ac      	movs	r3, #172	@ 0xac
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	58d3      	ldr	r3, [r2, r3]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	687a      	ldr	r2, [r7, #4]
 800cc02:	7c12      	ldrb	r2, [r2, #16]
 800cc04:	2108      	movs	r1, #8
 800cc06:	1879      	adds	r1, r7, r1
 800cc08:	0010      	movs	r0, r2
 800cc0a:	4798      	blx	r3
 800cc0c:	0003      	movs	r3, r0
 800cc0e:	60fb      	str	r3, [r7, #12]
      break;
 800cc10:	e153      	b.n	800ceba <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	7c1b      	ldrb	r3, [r3, #16]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d10f      	bne.n	800cc3a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	23ad      	movs	r3, #173	@ 0xad
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	58d3      	ldr	r3, [r2, r3]
 800cc22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc24:	2208      	movs	r2, #8
 800cc26:	18ba      	adds	r2, r7, r2
 800cc28:	0010      	movs	r0, r2
 800cc2a:	4798      	blx	r3
 800cc2c:	0003      	movs	r3, r0
 800cc2e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	3301      	adds	r3, #1
 800cc34:	2202      	movs	r2, #2
 800cc36:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cc38:	e13f      	b.n	800ceba <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	23ad      	movs	r3, #173	@ 0xad
 800cc3e:	009b      	lsls	r3, r3, #2
 800cc40:	58d3      	ldr	r3, [r2, r3]
 800cc42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc44:	2208      	movs	r2, #8
 800cc46:	18ba      	adds	r2, r7, r2
 800cc48:	0010      	movs	r0, r2
 800cc4a:	4798      	blx	r3
 800cc4c:	0003      	movs	r3, r0
 800cc4e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	3301      	adds	r3, #1
 800cc54:	2202      	movs	r2, #2
 800cc56:	701a      	strb	r2, [r3, #0]
      break;
 800cc58:	e12f      	b.n	800ceba <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	885b      	ldrh	r3, [r3, #2]
 800cc5e:	b2db      	uxtb	r3, r3
 800cc60:	2b05      	cmp	r3, #5
 800cc62:	d900      	bls.n	800cc66 <USBD_GetDescriptor+0xa6>
 800cc64:	e0d0      	b.n	800ce08 <USBD_GetDescriptor+0x248>
 800cc66:	009a      	lsls	r2, r3, #2
 800cc68:	4bad      	ldr	r3, [pc, #692]	@ (800cf20 <USBD_GetDescriptor+0x360>)
 800cc6a:	18d3      	adds	r3, r2, r3
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	23ac      	movs	r3, #172	@ 0xac
 800cc74:	009b      	lsls	r3, r3, #2
 800cc76:	58d3      	ldr	r3, [r2, r3]
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d00d      	beq.n	800cc9a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	23ac      	movs	r3, #172	@ 0xac
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	58d3      	ldr	r3, [r2, r3]
 800cc86:	685b      	ldr	r3, [r3, #4]
 800cc88:	687a      	ldr	r2, [r7, #4]
 800cc8a:	7c12      	ldrb	r2, [r2, #16]
 800cc8c:	2108      	movs	r1, #8
 800cc8e:	1879      	adds	r1, r7, r1
 800cc90:	0010      	movs	r0, r2
 800cc92:	4798      	blx	r3
 800cc94:	0003      	movs	r3, r0
 800cc96:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc98:	e0c3      	b.n	800ce22 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800cc9a:	683a      	ldr	r2, [r7, #0]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	0011      	movs	r1, r2
 800cca0:	0018      	movs	r0, r3
 800cca2:	f000 fb20 	bl	800d2e6 <USBD_CtlError>
            err++;
 800cca6:	210b      	movs	r1, #11
 800cca8:	187b      	adds	r3, r7, r1
 800ccaa:	781a      	ldrb	r2, [r3, #0]
 800ccac:	187b      	adds	r3, r7, r1
 800ccae:	3201      	adds	r2, #1
 800ccb0:	701a      	strb	r2, [r3, #0]
          break;
 800ccb2:	e0b6      	b.n	800ce22 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ccb4:	687a      	ldr	r2, [r7, #4]
 800ccb6:	23ac      	movs	r3, #172	@ 0xac
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	58d3      	ldr	r3, [r2, r3]
 800ccbc:	689b      	ldr	r3, [r3, #8]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d00d      	beq.n	800ccde <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	23ac      	movs	r3, #172	@ 0xac
 800ccc6:	009b      	lsls	r3, r3, #2
 800ccc8:	58d3      	ldr	r3, [r2, r3]
 800ccca:	689b      	ldr	r3, [r3, #8]
 800cccc:	687a      	ldr	r2, [r7, #4]
 800ccce:	7c12      	ldrb	r2, [r2, #16]
 800ccd0:	2108      	movs	r1, #8
 800ccd2:	1879      	adds	r1, r7, r1
 800ccd4:	0010      	movs	r0, r2
 800ccd6:	4798      	blx	r3
 800ccd8:	0003      	movs	r3, r0
 800ccda:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccdc:	e0a1      	b.n	800ce22 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800ccde:	683a      	ldr	r2, [r7, #0]
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	0011      	movs	r1, r2
 800cce4:	0018      	movs	r0, r3
 800cce6:	f000 fafe 	bl	800d2e6 <USBD_CtlError>
            err++;
 800ccea:	210b      	movs	r1, #11
 800ccec:	187b      	adds	r3, r7, r1
 800ccee:	781a      	ldrb	r2, [r3, #0]
 800ccf0:	187b      	adds	r3, r7, r1
 800ccf2:	3201      	adds	r2, #1
 800ccf4:	701a      	strb	r2, [r3, #0]
          break;
 800ccf6:	e094      	b.n	800ce22 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ccf8:	687a      	ldr	r2, [r7, #4]
 800ccfa:	23ac      	movs	r3, #172	@ 0xac
 800ccfc:	009b      	lsls	r3, r3, #2
 800ccfe:	58d3      	ldr	r3, [r2, r3]
 800cd00:	68db      	ldr	r3, [r3, #12]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d00d      	beq.n	800cd22 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	23ac      	movs	r3, #172	@ 0xac
 800cd0a:	009b      	lsls	r3, r3, #2
 800cd0c:	58d3      	ldr	r3, [r2, r3]
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	7c12      	ldrb	r2, [r2, #16]
 800cd14:	2108      	movs	r1, #8
 800cd16:	1879      	adds	r1, r7, r1
 800cd18:	0010      	movs	r0, r2
 800cd1a:	4798      	blx	r3
 800cd1c:	0003      	movs	r3, r0
 800cd1e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd20:	e07f      	b.n	800ce22 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800cd22:	683a      	ldr	r2, [r7, #0]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	0011      	movs	r1, r2
 800cd28:	0018      	movs	r0, r3
 800cd2a:	f000 fadc 	bl	800d2e6 <USBD_CtlError>
            err++;
 800cd2e:	210b      	movs	r1, #11
 800cd30:	187b      	adds	r3, r7, r1
 800cd32:	781a      	ldrb	r2, [r3, #0]
 800cd34:	187b      	adds	r3, r7, r1
 800cd36:	3201      	adds	r2, #1
 800cd38:	701a      	strb	r2, [r3, #0]
          break;
 800cd3a:	e072      	b.n	800ce22 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	23ac      	movs	r3, #172	@ 0xac
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	58d3      	ldr	r3, [r2, r3]
 800cd44:	691b      	ldr	r3, [r3, #16]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d00d      	beq.n	800cd66 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cd4a:	687a      	ldr	r2, [r7, #4]
 800cd4c:	23ac      	movs	r3, #172	@ 0xac
 800cd4e:	009b      	lsls	r3, r3, #2
 800cd50:	58d3      	ldr	r3, [r2, r3]
 800cd52:	691b      	ldr	r3, [r3, #16]
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	7c12      	ldrb	r2, [r2, #16]
 800cd58:	2108      	movs	r1, #8
 800cd5a:	1879      	adds	r1, r7, r1
 800cd5c:	0010      	movs	r0, r2
 800cd5e:	4798      	blx	r3
 800cd60:	0003      	movs	r3, r0
 800cd62:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd64:	e05d      	b.n	800ce22 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800cd66:	683a      	ldr	r2, [r7, #0]
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	0011      	movs	r1, r2
 800cd6c:	0018      	movs	r0, r3
 800cd6e:	f000 faba 	bl	800d2e6 <USBD_CtlError>
            err++;
 800cd72:	210b      	movs	r1, #11
 800cd74:	187b      	adds	r3, r7, r1
 800cd76:	781a      	ldrb	r2, [r3, #0]
 800cd78:	187b      	adds	r3, r7, r1
 800cd7a:	3201      	adds	r2, #1
 800cd7c:	701a      	strb	r2, [r3, #0]
          break;
 800cd7e:	e050      	b.n	800ce22 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cd80:	687a      	ldr	r2, [r7, #4]
 800cd82:	23ac      	movs	r3, #172	@ 0xac
 800cd84:	009b      	lsls	r3, r3, #2
 800cd86:	58d3      	ldr	r3, [r2, r3]
 800cd88:	695b      	ldr	r3, [r3, #20]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d00d      	beq.n	800cdaa <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	23ac      	movs	r3, #172	@ 0xac
 800cd92:	009b      	lsls	r3, r3, #2
 800cd94:	58d3      	ldr	r3, [r2, r3]
 800cd96:	695b      	ldr	r3, [r3, #20]
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	7c12      	ldrb	r2, [r2, #16]
 800cd9c:	2108      	movs	r1, #8
 800cd9e:	1879      	adds	r1, r7, r1
 800cda0:	0010      	movs	r0, r2
 800cda2:	4798      	blx	r3
 800cda4:	0003      	movs	r3, r0
 800cda6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cda8:	e03b      	b.n	800ce22 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800cdaa:	683a      	ldr	r2, [r7, #0]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	0011      	movs	r1, r2
 800cdb0:	0018      	movs	r0, r3
 800cdb2:	f000 fa98 	bl	800d2e6 <USBD_CtlError>
            err++;
 800cdb6:	210b      	movs	r1, #11
 800cdb8:	187b      	adds	r3, r7, r1
 800cdba:	781a      	ldrb	r2, [r3, #0]
 800cdbc:	187b      	adds	r3, r7, r1
 800cdbe:	3201      	adds	r2, #1
 800cdc0:	701a      	strb	r2, [r3, #0]
          break;
 800cdc2:	e02e      	b.n	800ce22 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cdc4:	687a      	ldr	r2, [r7, #4]
 800cdc6:	23ac      	movs	r3, #172	@ 0xac
 800cdc8:	009b      	lsls	r3, r3, #2
 800cdca:	58d3      	ldr	r3, [r2, r3]
 800cdcc:	699b      	ldr	r3, [r3, #24]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d00d      	beq.n	800cdee <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	23ac      	movs	r3, #172	@ 0xac
 800cdd6:	009b      	lsls	r3, r3, #2
 800cdd8:	58d3      	ldr	r3, [r2, r3]
 800cdda:	699b      	ldr	r3, [r3, #24]
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	7c12      	ldrb	r2, [r2, #16]
 800cde0:	2108      	movs	r1, #8
 800cde2:	1879      	adds	r1, r7, r1
 800cde4:	0010      	movs	r0, r2
 800cde6:	4798      	blx	r3
 800cde8:	0003      	movs	r3, r0
 800cdea:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cdec:	e019      	b.n	800ce22 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800cdee:	683a      	ldr	r2, [r7, #0]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	0011      	movs	r1, r2
 800cdf4:	0018      	movs	r0, r3
 800cdf6:	f000 fa76 	bl	800d2e6 <USBD_CtlError>
            err++;
 800cdfa:	210b      	movs	r1, #11
 800cdfc:	187b      	adds	r3, r7, r1
 800cdfe:	781a      	ldrb	r2, [r3, #0]
 800ce00:	187b      	adds	r3, r7, r1
 800ce02:	3201      	adds	r2, #1
 800ce04:	701a      	strb	r2, [r3, #0]
          break;
 800ce06:	e00c      	b.n	800ce22 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ce08:	683a      	ldr	r2, [r7, #0]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	0011      	movs	r1, r2
 800ce0e:	0018      	movs	r0, r3
 800ce10:	f000 fa69 	bl	800d2e6 <USBD_CtlError>
          err++;
 800ce14:	210b      	movs	r1, #11
 800ce16:	187b      	adds	r3, r7, r1
 800ce18:	781a      	ldrb	r2, [r3, #0]
 800ce1a:	187b      	adds	r3, r7, r1
 800ce1c:	3201      	adds	r2, #1
 800ce1e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800ce20:	e04b      	b.n	800ceba <USBD_GetDescriptor+0x2fa>
 800ce22:	e04a      	b.n	800ceba <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	7c1b      	ldrb	r3, [r3, #16]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d10b      	bne.n	800ce44 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	23ad      	movs	r3, #173	@ 0xad
 800ce30:	009b      	lsls	r3, r3, #2
 800ce32:	58d3      	ldr	r3, [r2, r3]
 800ce34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce36:	2208      	movs	r2, #8
 800ce38:	18ba      	adds	r2, r7, r2
 800ce3a:	0010      	movs	r0, r2
 800ce3c:	4798      	blx	r3
 800ce3e:	0003      	movs	r3, r0
 800ce40:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce42:	e03a      	b.n	800ceba <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800ce44:	683a      	ldr	r2, [r7, #0]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	0011      	movs	r1, r2
 800ce4a:	0018      	movs	r0, r3
 800ce4c:	f000 fa4b 	bl	800d2e6 <USBD_CtlError>
        err++;
 800ce50:	210b      	movs	r1, #11
 800ce52:	187b      	adds	r3, r7, r1
 800ce54:	781a      	ldrb	r2, [r3, #0]
 800ce56:	187b      	adds	r3, r7, r1
 800ce58:	3201      	adds	r2, #1
 800ce5a:	701a      	strb	r2, [r3, #0]
      break;
 800ce5c:	e02d      	b.n	800ceba <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	7c1b      	ldrb	r3, [r3, #16]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d10f      	bne.n	800ce86 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ce66:	687a      	ldr	r2, [r7, #4]
 800ce68:	23ad      	movs	r3, #173	@ 0xad
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	58d3      	ldr	r3, [r2, r3]
 800ce6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce70:	2208      	movs	r2, #8
 800ce72:	18ba      	adds	r2, r7, r2
 800ce74:	0010      	movs	r0, r2
 800ce76:	4798      	blx	r3
 800ce78:	0003      	movs	r3, r0
 800ce7a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	3301      	adds	r3, #1
 800ce80:	2207      	movs	r2, #7
 800ce82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce84:	e019      	b.n	800ceba <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800ce86:	683a      	ldr	r2, [r7, #0]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	0011      	movs	r1, r2
 800ce8c:	0018      	movs	r0, r3
 800ce8e:	f000 fa2a 	bl	800d2e6 <USBD_CtlError>
        err++;
 800ce92:	210b      	movs	r1, #11
 800ce94:	187b      	adds	r3, r7, r1
 800ce96:	781a      	ldrb	r2, [r3, #0]
 800ce98:	187b      	adds	r3, r7, r1
 800ce9a:	3201      	adds	r2, #1
 800ce9c:	701a      	strb	r2, [r3, #0]
      break;
 800ce9e:	e00c      	b.n	800ceba <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800cea0:	683a      	ldr	r2, [r7, #0]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	0011      	movs	r1, r2
 800cea6:	0018      	movs	r0, r3
 800cea8:	f000 fa1d 	bl	800d2e6 <USBD_CtlError>
      err++;
 800ceac:	210b      	movs	r1, #11
 800ceae:	187b      	adds	r3, r7, r1
 800ceb0:	781a      	ldrb	r2, [r3, #0]
 800ceb2:	187b      	adds	r3, r7, r1
 800ceb4:	3201      	adds	r2, #1
 800ceb6:	701a      	strb	r2, [r3, #0]
      break;
 800ceb8:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 800ceba:	230b      	movs	r3, #11
 800cebc:	18fb      	adds	r3, r7, r3
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d127      	bne.n	800cf14 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800cec4:	2108      	movs	r1, #8
 800cec6:	187b      	adds	r3, r7, r1
 800cec8:	881b      	ldrh	r3, [r3, #0]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d019      	beq.n	800cf02 <USBD_GetDescriptor+0x342>
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	88db      	ldrh	r3, [r3, #6]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d015      	beq.n	800cf02 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	88da      	ldrh	r2, [r3, #6]
 800ceda:	187b      	adds	r3, r7, r1
 800cedc:	881b      	ldrh	r3, [r3, #0]
 800cede:	1c18      	adds	r0, r3, #0
 800cee0:	1c11      	adds	r1, r2, #0
 800cee2:	b28a      	uxth	r2, r1
 800cee4:	b283      	uxth	r3, r0
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d900      	bls.n	800ceec <USBD_GetDescriptor+0x32c>
 800ceea:	1c01      	adds	r1, r0, #0
 800ceec:	b28a      	uxth	r2, r1
 800ceee:	2108      	movs	r1, #8
 800cef0:	187b      	adds	r3, r7, r1
 800cef2:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cef4:	187b      	adds	r3, r7, r1
 800cef6:	881a      	ldrh	r2, [r3, #0]
 800cef8:	68f9      	ldr	r1, [r7, #12]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	0018      	movs	r0, r3
 800cefe:	f000 fa70 	bl	800d3e2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	88db      	ldrh	r3, [r3, #6]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d105      	bne.n	800cf16 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	0018      	movs	r0, r3
 800cf0e:	f000 fad2 	bl	800d4b6 <USBD_CtlSendStatus>
 800cf12:	e000      	b.n	800cf16 <USBD_GetDescriptor+0x356>
    return;
 800cf14:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800cf16:	46bd      	mov	sp, r7
 800cf18:	b004      	add	sp, #16
 800cf1a:	bd80      	pop	{r7, pc}
 800cf1c:	08012320 	.word	0x08012320
 800cf20:	08012340 	.word	0x08012340

0800cf24 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cf24:	b590      	push	{r4, r7, lr}
 800cf26:	b085      	sub	sp, #20
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	889b      	ldrh	r3, [r3, #4]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d13d      	bne.n	800cfb2 <USBD_SetAddress+0x8e>
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	88db      	ldrh	r3, [r3, #6]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d139      	bne.n	800cfb2 <USBD_SetAddress+0x8e>
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	885b      	ldrh	r3, [r3, #2]
 800cf42:	2b7f      	cmp	r3, #127	@ 0x7f
 800cf44:	d835      	bhi.n	800cfb2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	885b      	ldrh	r3, [r3, #2]
 800cf4a:	b2da      	uxtb	r2, r3
 800cf4c:	230f      	movs	r3, #15
 800cf4e:	18fb      	adds	r3, r7, r3
 800cf50:	217f      	movs	r1, #127	@ 0x7f
 800cf52:	400a      	ands	r2, r1
 800cf54:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	23a7      	movs	r3, #167	@ 0xa7
 800cf5a:	009b      	lsls	r3, r3, #2
 800cf5c:	5cd3      	ldrb	r3, [r2, r3]
 800cf5e:	2b03      	cmp	r3, #3
 800cf60:	d106      	bne.n	800cf70 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800cf62:	683a      	ldr	r2, [r7, #0]
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	0011      	movs	r1, r2
 800cf68:	0018      	movs	r0, r3
 800cf6a:	f000 f9bc 	bl	800d2e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf6e:	e027      	b.n	800cfc0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	240f      	movs	r4, #15
 800cf74:	193a      	adds	r2, r7, r4
 800cf76:	4914      	ldr	r1, [pc, #80]	@ (800cfc8 <USBD_SetAddress+0xa4>)
 800cf78:	7812      	ldrb	r2, [r2, #0]
 800cf7a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cf7c:	193b      	adds	r3, r7, r4
 800cf7e:	781a      	ldrb	r2, [r3, #0]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	0011      	movs	r1, r2
 800cf84:	0018      	movs	r0, r3
 800cf86:	f000 fefc 	bl	800dd82 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	0018      	movs	r0, r3
 800cf8e:	f000 fa92 	bl	800d4b6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cf92:	193b      	adds	r3, r7, r4
 800cf94:	781b      	ldrb	r3, [r3, #0]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d005      	beq.n	800cfa6 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf9a:	687a      	ldr	r2, [r7, #4]
 800cf9c:	23a7      	movs	r3, #167	@ 0xa7
 800cf9e:	009b      	lsls	r3, r3, #2
 800cfa0:	2102      	movs	r1, #2
 800cfa2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfa4:	e00c      	b.n	800cfc0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cfa6:	687a      	ldr	r2, [r7, #4]
 800cfa8:	23a7      	movs	r3, #167	@ 0xa7
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	2101      	movs	r1, #1
 800cfae:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfb0:	e006      	b.n	800cfc0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cfb2:	683a      	ldr	r2, [r7, #0]
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	0011      	movs	r1, r2
 800cfb8:	0018      	movs	r0, r3
 800cfba:	f000 f994 	bl	800d2e6 <USBD_CtlError>
  }
}
 800cfbe:	46c0      	nop			@ (mov r8, r8)
 800cfc0:	46c0      	nop			@ (mov r8, r8)
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	b005      	add	sp, #20
 800cfc6:	bd90      	pop	{r4, r7, pc}
 800cfc8:	0000029e 	.word	0x0000029e

0800cfcc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	885b      	ldrh	r3, [r3, #2]
 800cfda:	b2da      	uxtb	r2, r3
 800cfdc:	4b4c      	ldr	r3, [pc, #304]	@ (800d110 <USBD_SetConfig+0x144>)
 800cfde:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cfe0:	4b4b      	ldr	r3, [pc, #300]	@ (800d110 <USBD_SetConfig+0x144>)
 800cfe2:	781b      	ldrb	r3, [r3, #0]
 800cfe4:	2b01      	cmp	r3, #1
 800cfe6:	d906      	bls.n	800cff6 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800cfe8:	683a      	ldr	r2, [r7, #0]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	0011      	movs	r1, r2
 800cfee:	0018      	movs	r0, r3
 800cff0:	f000 f979 	bl	800d2e6 <USBD_CtlError>
 800cff4:	e088      	b.n	800d108 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800cff6:	687a      	ldr	r2, [r7, #4]
 800cff8:	23a7      	movs	r3, #167	@ 0xa7
 800cffa:	009b      	lsls	r3, r3, #2
 800cffc:	5cd3      	ldrb	r3, [r2, r3]
 800cffe:	2b02      	cmp	r3, #2
 800d000:	d002      	beq.n	800d008 <USBD_SetConfig+0x3c>
 800d002:	2b03      	cmp	r3, #3
 800d004:	d029      	beq.n	800d05a <USBD_SetConfig+0x8e>
 800d006:	e071      	b.n	800d0ec <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800d008:	4b41      	ldr	r3, [pc, #260]	@ (800d110 <USBD_SetConfig+0x144>)
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d01f      	beq.n	800d050 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800d010:	4b3f      	ldr	r3, [pc, #252]	@ (800d110 <USBD_SetConfig+0x144>)
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	001a      	movs	r2, r3
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d01a:	687a      	ldr	r2, [r7, #4]
 800d01c:	23a7      	movs	r3, #167	@ 0xa7
 800d01e:	009b      	lsls	r3, r3, #2
 800d020:	2103      	movs	r1, #3
 800d022:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d024:	4b3a      	ldr	r3, [pc, #232]	@ (800d110 <USBD_SetConfig+0x144>)
 800d026:	781a      	ldrb	r2, [r3, #0]
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	0011      	movs	r1, r2
 800d02c:	0018      	movs	r0, r3
 800d02e:	f7ff f8c6 	bl	800c1be <USBD_SetClassConfig>
 800d032:	0003      	movs	r3, r0
 800d034:	2b02      	cmp	r3, #2
 800d036:	d106      	bne.n	800d046 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800d038:	683a      	ldr	r2, [r7, #0]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	0011      	movs	r1, r2
 800d03e:	0018      	movs	r0, r3
 800d040:	f000 f951 	bl	800d2e6 <USBD_CtlError>
            return;
 800d044:	e060      	b.n	800d108 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	0018      	movs	r0, r3
 800d04a:	f000 fa34 	bl	800d4b6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d04e:	e05b      	b.n	800d108 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	0018      	movs	r0, r3
 800d054:	f000 fa2f 	bl	800d4b6 <USBD_CtlSendStatus>
        break;
 800d058:	e056      	b.n	800d108 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800d05a:	4b2d      	ldr	r3, [pc, #180]	@ (800d110 <USBD_SetConfig+0x144>)
 800d05c:	781b      	ldrb	r3, [r3, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d115      	bne.n	800d08e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	23a7      	movs	r3, #167	@ 0xa7
 800d066:	009b      	lsls	r3, r3, #2
 800d068:	2102      	movs	r1, #2
 800d06a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800d06c:	4b28      	ldr	r3, [pc, #160]	@ (800d110 <USBD_SetConfig+0x144>)
 800d06e:	781b      	ldrb	r3, [r3, #0]
 800d070:	001a      	movs	r2, r3
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800d076:	4b26      	ldr	r3, [pc, #152]	@ (800d110 <USBD_SetConfig+0x144>)
 800d078:	781a      	ldrb	r2, [r3, #0]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	0011      	movs	r1, r2
 800d07e:	0018      	movs	r0, r3
 800d080:	f7ff f8c4 	bl	800c20c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	0018      	movs	r0, r3
 800d088:	f000 fa15 	bl	800d4b6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d08c:	e03c      	b.n	800d108 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800d08e:	4b20      	ldr	r3, [pc, #128]	@ (800d110 <USBD_SetConfig+0x144>)
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	001a      	movs	r2, r3
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	429a      	cmp	r2, r3
 800d09a:	d022      	beq.n	800d0e2 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	b2da      	uxtb	r2, r3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	0011      	movs	r1, r2
 800d0a6:	0018      	movs	r0, r3
 800d0a8:	f7ff f8b0 	bl	800c20c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800d0ac:	4b18      	ldr	r3, [pc, #96]	@ (800d110 <USBD_SetConfig+0x144>)
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	001a      	movs	r2, r3
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d0b6:	4b16      	ldr	r3, [pc, #88]	@ (800d110 <USBD_SetConfig+0x144>)
 800d0b8:	781a      	ldrb	r2, [r3, #0]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	0011      	movs	r1, r2
 800d0be:	0018      	movs	r0, r3
 800d0c0:	f7ff f87d 	bl	800c1be <USBD_SetClassConfig>
 800d0c4:	0003      	movs	r3, r0
 800d0c6:	2b02      	cmp	r3, #2
 800d0c8:	d106      	bne.n	800d0d8 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800d0ca:	683a      	ldr	r2, [r7, #0]
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	0011      	movs	r1, r2
 800d0d0:	0018      	movs	r0, r3
 800d0d2:	f000 f908 	bl	800d2e6 <USBD_CtlError>
            return;
 800d0d6:	e017      	b.n	800d108 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	0018      	movs	r0, r3
 800d0dc:	f000 f9eb 	bl	800d4b6 <USBD_CtlSendStatus>
        break;
 800d0e0:	e012      	b.n	800d108 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	0018      	movs	r0, r3
 800d0e6:	f000 f9e6 	bl	800d4b6 <USBD_CtlSendStatus>
        break;
 800d0ea:	e00d      	b.n	800d108 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800d0ec:	683a      	ldr	r2, [r7, #0]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	0011      	movs	r1, r2
 800d0f2:	0018      	movs	r0, r3
 800d0f4:	f000 f8f7 	bl	800d2e6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800d0f8:	4b05      	ldr	r3, [pc, #20]	@ (800d110 <USBD_SetConfig+0x144>)
 800d0fa:	781a      	ldrb	r2, [r3, #0]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	0011      	movs	r1, r2
 800d100:	0018      	movs	r0, r3
 800d102:	f7ff f883 	bl	800c20c <USBD_ClrClassConfig>
        break;
 800d106:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800d108:	46bd      	mov	sp, r7
 800d10a:	b002      	add	sp, #8
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	46c0      	nop			@ (mov r8, r8)
 800d110:	20000a80 	.word	0x20000a80

0800d114 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	88db      	ldrh	r3, [r3, #6]
 800d122:	2b01      	cmp	r3, #1
 800d124:	d006      	beq.n	800d134 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800d126:	683a      	ldr	r2, [r7, #0]
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	0011      	movs	r1, r2
 800d12c:	0018      	movs	r0, r3
 800d12e:	f000 f8da 	bl	800d2e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d132:	e026      	b.n	800d182 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	23a7      	movs	r3, #167	@ 0xa7
 800d138:	009b      	lsls	r3, r3, #2
 800d13a:	5cd3      	ldrb	r3, [r2, r3]
 800d13c:	2b02      	cmp	r3, #2
 800d13e:	dc02      	bgt.n	800d146 <USBD_GetConfig+0x32>
 800d140:	2b00      	cmp	r3, #0
 800d142:	dc03      	bgt.n	800d14c <USBD_GetConfig+0x38>
 800d144:	e016      	b.n	800d174 <USBD_GetConfig+0x60>
 800d146:	2b03      	cmp	r3, #3
 800d148:	d00c      	beq.n	800d164 <USBD_GetConfig+0x50>
 800d14a:	e013      	b.n	800d174 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2200      	movs	r2, #0
 800d150:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	3308      	adds	r3, #8
 800d156:	0019      	movs	r1, r3
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2201      	movs	r2, #1
 800d15c:	0018      	movs	r0, r3
 800d15e:	f000 f940 	bl	800d3e2 <USBD_CtlSendData>
        break;
 800d162:	e00e      	b.n	800d182 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	1d19      	adds	r1, r3, #4
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2201      	movs	r2, #1
 800d16c:	0018      	movs	r0, r3
 800d16e:	f000 f938 	bl	800d3e2 <USBD_CtlSendData>
        break;
 800d172:	e006      	b.n	800d182 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800d174:	683a      	ldr	r2, [r7, #0]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	0011      	movs	r1, r2
 800d17a:	0018      	movs	r0, r3
 800d17c:	f000 f8b3 	bl	800d2e6 <USBD_CtlError>
        break;
 800d180:	46c0      	nop			@ (mov r8, r8)
}
 800d182:	46c0      	nop			@ (mov r8, r8)
 800d184:	46bd      	mov	sp, r7
 800d186:	b002      	add	sp, #8
 800d188:	bd80      	pop	{r7, pc}

0800d18a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d18a:	b580      	push	{r7, lr}
 800d18c:	b082      	sub	sp, #8
 800d18e:	af00      	add	r7, sp, #0
 800d190:	6078      	str	r0, [r7, #4]
 800d192:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d194:	687a      	ldr	r2, [r7, #4]
 800d196:	23a7      	movs	r3, #167	@ 0xa7
 800d198:	009b      	lsls	r3, r3, #2
 800d19a:	5cd3      	ldrb	r3, [r2, r3]
 800d19c:	3b01      	subs	r3, #1
 800d19e:	2b02      	cmp	r3, #2
 800d1a0:	d822      	bhi.n	800d1e8 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	88db      	ldrh	r3, [r3, #6]
 800d1a6:	2b02      	cmp	r3, #2
 800d1a8:	d006      	beq.n	800d1b8 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800d1aa:	683a      	ldr	r2, [r7, #0]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	0011      	movs	r1, r2
 800d1b0:	0018      	movs	r0, r3
 800d1b2:	f000 f898 	bl	800d2e6 <USBD_CtlError>
        break;
 800d1b6:	e01e      	b.n	800d1f6 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	23a9      	movs	r3, #169	@ 0xa9
 800d1c2:	009b      	lsls	r3, r3, #2
 800d1c4:	58d3      	ldr	r3, [r2, r3]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d005      	beq.n	800d1d6 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	2202      	movs	r2, #2
 800d1d0:	431a      	orrs	r2, r3
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	330c      	adds	r3, #12
 800d1da:	0019      	movs	r1, r3
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2202      	movs	r2, #2
 800d1e0:	0018      	movs	r0, r3
 800d1e2:	f000 f8fe 	bl	800d3e2 <USBD_CtlSendData>
      break;
 800d1e6:	e006      	b.n	800d1f6 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800d1e8:	683a      	ldr	r2, [r7, #0]
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	0011      	movs	r1, r2
 800d1ee:	0018      	movs	r0, r3
 800d1f0:	f000 f879 	bl	800d2e6 <USBD_CtlError>
      break;
 800d1f4:	46c0      	nop			@ (mov r8, r8)
  }
}
 800d1f6:	46c0      	nop			@ (mov r8, r8)
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	b002      	add	sp, #8
 800d1fc:	bd80      	pop	{r7, pc}

0800d1fe <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d1fe:	b580      	push	{r7, lr}
 800d200:	b082      	sub	sp, #8
 800d202:	af00      	add	r7, sp, #0
 800d204:	6078      	str	r0, [r7, #4]
 800d206:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	885b      	ldrh	r3, [r3, #2]
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d108      	bne.n	800d222 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800d210:	687a      	ldr	r2, [r7, #4]
 800d212:	23a9      	movs	r3, #169	@ 0xa9
 800d214:	009b      	lsls	r3, r3, #2
 800d216:	2101      	movs	r1, #1
 800d218:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	0018      	movs	r0, r3
 800d21e:	f000 f94a 	bl	800d4b6 <USBD_CtlSendStatus>
  }
}
 800d222:	46c0      	nop			@ (mov r8, r8)
 800d224:	46bd      	mov	sp, r7
 800d226:	b002      	add	sp, #8
 800d228:	bd80      	pop	{r7, pc}

0800d22a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d22a:	b580      	push	{r7, lr}
 800d22c:	b082      	sub	sp, #8
 800d22e:	af00      	add	r7, sp, #0
 800d230:	6078      	str	r0, [r7, #4]
 800d232:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	23a7      	movs	r3, #167	@ 0xa7
 800d238:	009b      	lsls	r3, r3, #2
 800d23a:	5cd3      	ldrb	r3, [r2, r3]
 800d23c:	3b01      	subs	r3, #1
 800d23e:	2b02      	cmp	r3, #2
 800d240:	d80d      	bhi.n	800d25e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	885b      	ldrh	r3, [r3, #2]
 800d246:	2b01      	cmp	r3, #1
 800d248:	d110      	bne.n	800d26c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800d24a:	687a      	ldr	r2, [r7, #4]
 800d24c:	23a9      	movs	r3, #169	@ 0xa9
 800d24e:	009b      	lsls	r3, r3, #2
 800d250:	2100      	movs	r1, #0
 800d252:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	0018      	movs	r0, r3
 800d258:	f000 f92d 	bl	800d4b6 <USBD_CtlSendStatus>
      }
      break;
 800d25c:	e006      	b.n	800d26c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800d25e:	683a      	ldr	r2, [r7, #0]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	0011      	movs	r1, r2
 800d264:	0018      	movs	r0, r3
 800d266:	f000 f83e 	bl	800d2e6 <USBD_CtlError>
      break;
 800d26a:	e000      	b.n	800d26e <USBD_ClrFeature+0x44>
      break;
 800d26c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800d26e:	46c0      	nop			@ (mov r8, r8)
 800d270:	46bd      	mov	sp, r7
 800d272:	b002      	add	sp, #8
 800d274:	bd80      	pop	{r7, pc}

0800d276 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d276:	b580      	push	{r7, lr}
 800d278:	b082      	sub	sp, #8
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
 800d27e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	781a      	ldrb	r2, [r3, #0]
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	785a      	ldrb	r2, [r3, #1]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	3302      	adds	r3, #2
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	001a      	movs	r2, r3
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	3303      	adds	r3, #3
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	021b      	lsls	r3, r3, #8
 800d2a0:	b29b      	uxth	r3, r3
 800d2a2:	18d3      	adds	r3, r2, r3
 800d2a4:	b29a      	uxth	r2, r3
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	3304      	adds	r3, #4
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	001a      	movs	r2, r3
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	3305      	adds	r3, #5
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	021b      	lsls	r3, r3, #8
 800d2ba:	b29b      	uxth	r3, r3
 800d2bc:	18d3      	adds	r3, r2, r3
 800d2be:	b29a      	uxth	r2, r3
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	3306      	adds	r3, #6
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	001a      	movs	r2, r3
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	3307      	adds	r3, #7
 800d2d0:	781b      	ldrb	r3, [r3, #0]
 800d2d2:	021b      	lsls	r3, r3, #8
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	18d3      	adds	r3, r2, r3
 800d2d8:	b29a      	uxth	r2, r3
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	80da      	strh	r2, [r3, #6]

}
 800d2de:	46c0      	nop			@ (mov r8, r8)
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	b002      	add	sp, #8
 800d2e4:	bd80      	pop	{r7, pc}

0800d2e6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800d2e6:	b580      	push	{r7, lr}
 800d2e8:	b082      	sub	sp, #8
 800d2ea:	af00      	add	r7, sp, #0
 800d2ec:	6078      	str	r0, [r7, #4]
 800d2ee:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2180      	movs	r1, #128	@ 0x80
 800d2f4:	0018      	movs	r0, r3
 800d2f6:	f000 fcbe 	bl	800dc76 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2100      	movs	r1, #0
 800d2fe:	0018      	movs	r0, r3
 800d300:	f000 fcb9 	bl	800dc76 <USBD_LL_StallEP>
}
 800d304:	46c0      	nop			@ (mov r8, r8)
 800d306:	46bd      	mov	sp, r7
 800d308:	b002      	add	sp, #8
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d30c:	b590      	push	{r4, r7, lr}
 800d30e:	b087      	sub	sp, #28
 800d310:	af00      	add	r7, sp, #0
 800d312:	60f8      	str	r0, [r7, #12]
 800d314:	60b9      	str	r1, [r7, #8]
 800d316:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d318:	2417      	movs	r4, #23
 800d31a:	193b      	adds	r3, r7, r4
 800d31c:	2200      	movs	r2, #0
 800d31e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d03c      	beq.n	800d3a0 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	0018      	movs	r0, r3
 800d32a:	f000 f83d 	bl	800d3a8 <USBD_GetLen>
 800d32e:	0003      	movs	r3, r0
 800d330:	3301      	adds	r3, #1
 800d332:	b29b      	uxth	r3, r3
 800d334:	18db      	adds	r3, r3, r3
 800d336:	b29a      	uxth	r2, r3
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d33c:	193b      	adds	r3, r7, r4
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	193a      	adds	r2, r7, r4
 800d342:	1c59      	adds	r1, r3, #1
 800d344:	7011      	strb	r1, [r2, #0]
 800d346:	001a      	movs	r2, r3
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	189b      	adds	r3, r3, r2
 800d34c:	687a      	ldr	r2, [r7, #4]
 800d34e:	7812      	ldrb	r2, [r2, #0]
 800d350:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d352:	193b      	adds	r3, r7, r4
 800d354:	781b      	ldrb	r3, [r3, #0]
 800d356:	193a      	adds	r2, r7, r4
 800d358:	1c59      	adds	r1, r3, #1
 800d35a:	7011      	strb	r1, [r2, #0]
 800d35c:	001a      	movs	r2, r3
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	189b      	adds	r3, r3, r2
 800d362:	2203      	movs	r2, #3
 800d364:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d366:	e017      	b.n	800d398 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	1c5a      	adds	r2, r3, #1
 800d36c:	60fa      	str	r2, [r7, #12]
 800d36e:	2417      	movs	r4, #23
 800d370:	193a      	adds	r2, r7, r4
 800d372:	7812      	ldrb	r2, [r2, #0]
 800d374:	1939      	adds	r1, r7, r4
 800d376:	1c50      	adds	r0, r2, #1
 800d378:	7008      	strb	r0, [r1, #0]
 800d37a:	0011      	movs	r1, r2
 800d37c:	68ba      	ldr	r2, [r7, #8]
 800d37e:	1852      	adds	r2, r2, r1
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d384:	193b      	adds	r3, r7, r4
 800d386:	781b      	ldrb	r3, [r3, #0]
 800d388:	193a      	adds	r2, r7, r4
 800d38a:	1c59      	adds	r1, r3, #1
 800d38c:	7011      	strb	r1, [r2, #0]
 800d38e:	001a      	movs	r2, r3
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	189b      	adds	r3, r3, r2
 800d394:	2200      	movs	r2, #0
 800d396:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d1e3      	bne.n	800d368 <USBD_GetString+0x5c>
    }
  }
}
 800d3a0:	46c0      	nop			@ (mov r8, r8)
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	b007      	add	sp, #28
 800d3a6:	bd90      	pop	{r4, r7, pc}

0800d3a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b084      	sub	sp, #16
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d3b0:	230f      	movs	r3, #15
 800d3b2:	18fb      	adds	r3, r7, r3
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800d3b8:	e008      	b.n	800d3cc <USBD_GetLen+0x24>
  {
    len++;
 800d3ba:	210f      	movs	r1, #15
 800d3bc:	187b      	adds	r3, r7, r1
 800d3be:	781a      	ldrb	r2, [r3, #0]
 800d3c0:	187b      	adds	r3, r7, r1
 800d3c2:	3201      	adds	r2, #1
 800d3c4:	701a      	strb	r2, [r3, #0]
    buf++;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d1f2      	bne.n	800d3ba <USBD_GetLen+0x12>
  }

  return len;
 800d3d4:	230f      	movs	r3, #15
 800d3d6:	18fb      	adds	r3, r7, r3
 800d3d8:	781b      	ldrb	r3, [r3, #0]
}
 800d3da:	0018      	movs	r0, r3
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	b004      	add	sp, #16
 800d3e0:	bd80      	pop	{r7, pc}

0800d3e2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800d3e2:	b580      	push	{r7, lr}
 800d3e4:	b084      	sub	sp, #16
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	60f8      	str	r0, [r7, #12]
 800d3ea:	60b9      	str	r1, [r7, #8]
 800d3ec:	1dbb      	adds	r3, r7, #6
 800d3ee:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d3f0:	68fa      	ldr	r2, [r7, #12]
 800d3f2:	23a5      	movs	r3, #165	@ 0xa5
 800d3f4:	009b      	lsls	r3, r3, #2
 800d3f6:	2102      	movs	r1, #2
 800d3f8:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800d3fa:	1dbb      	adds	r3, r7, #6
 800d3fc:	881a      	ldrh	r2, [r3, #0]
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d402:	1dbb      	adds	r3, r7, #6
 800d404:	881a      	ldrh	r2, [r3, #0]
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d40a:	1dbb      	adds	r3, r7, #6
 800d40c:	881b      	ldrh	r3, [r3, #0]
 800d40e:	68ba      	ldr	r2, [r7, #8]
 800d410:	68f8      	ldr	r0, [r7, #12]
 800d412:	2100      	movs	r1, #0
 800d414:	f000 fce0 	bl	800ddd8 <USBD_LL_Transmit>

  return USBD_OK;
 800d418:	2300      	movs	r3, #0
}
 800d41a:	0018      	movs	r0, r3
 800d41c:	46bd      	mov	sp, r7
 800d41e:	b004      	add	sp, #16
 800d420:	bd80      	pop	{r7, pc}

0800d422 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800d422:	b580      	push	{r7, lr}
 800d424:	b084      	sub	sp, #16
 800d426:	af00      	add	r7, sp, #0
 800d428:	60f8      	str	r0, [r7, #12]
 800d42a:	60b9      	str	r1, [r7, #8]
 800d42c:	1dbb      	adds	r3, r7, #6
 800d42e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d430:	1dbb      	adds	r3, r7, #6
 800d432:	881b      	ldrh	r3, [r3, #0]
 800d434:	68ba      	ldr	r2, [r7, #8]
 800d436:	68f8      	ldr	r0, [r7, #12]
 800d438:	2100      	movs	r1, #0
 800d43a:	f000 fccd 	bl	800ddd8 <USBD_LL_Transmit>

  return USBD_OK;
 800d43e:	2300      	movs	r3, #0
}
 800d440:	0018      	movs	r0, r3
 800d442:	46bd      	mov	sp, r7
 800d444:	b004      	add	sp, #16
 800d446:	bd80      	pop	{r7, pc}

0800d448 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b084      	sub	sp, #16
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	60b9      	str	r1, [r7, #8]
 800d452:	1dbb      	adds	r3, r7, #6
 800d454:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d456:	68fa      	ldr	r2, [r7, #12]
 800d458:	23a5      	movs	r3, #165	@ 0xa5
 800d45a:	009b      	lsls	r3, r3, #2
 800d45c:	2103      	movs	r1, #3
 800d45e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800d460:	1dbb      	adds	r3, r7, #6
 800d462:	8819      	ldrh	r1, [r3, #0]
 800d464:	68fa      	ldr	r2, [r7, #12]
 800d466:	23ae      	movs	r3, #174	@ 0xae
 800d468:	005b      	lsls	r3, r3, #1
 800d46a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800d46c:	1dbb      	adds	r3, r7, #6
 800d46e:	8819      	ldrh	r1, [r3, #0]
 800d470:	68fa      	ldr	r2, [r7, #12]
 800d472:	23b0      	movs	r3, #176	@ 0xb0
 800d474:	005b      	lsls	r3, r3, #1
 800d476:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d478:	1dbb      	adds	r3, r7, #6
 800d47a:	881b      	ldrh	r3, [r3, #0]
 800d47c:	68ba      	ldr	r2, [r7, #8]
 800d47e:	68f8      	ldr	r0, [r7, #12]
 800d480:	2100      	movs	r1, #0
 800d482:	f000 fce0 	bl	800de46 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d486:	2300      	movs	r3, #0
}
 800d488:	0018      	movs	r0, r3
 800d48a:	46bd      	mov	sp, r7
 800d48c:	b004      	add	sp, #16
 800d48e:	bd80      	pop	{r7, pc}

0800d490 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b084      	sub	sp, #16
 800d494:	af00      	add	r7, sp, #0
 800d496:	60f8      	str	r0, [r7, #12]
 800d498:	60b9      	str	r1, [r7, #8]
 800d49a:	1dbb      	adds	r3, r7, #6
 800d49c:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d49e:	1dbb      	adds	r3, r7, #6
 800d4a0:	881b      	ldrh	r3, [r3, #0]
 800d4a2:	68ba      	ldr	r2, [r7, #8]
 800d4a4:	68f8      	ldr	r0, [r7, #12]
 800d4a6:	2100      	movs	r1, #0
 800d4a8:	f000 fccd 	bl	800de46 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d4ac:	2300      	movs	r3, #0
}
 800d4ae:	0018      	movs	r0, r3
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	b004      	add	sp, #16
 800d4b4:	bd80      	pop	{r7, pc}

0800d4b6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d4b6:	b580      	push	{r7, lr}
 800d4b8:	b082      	sub	sp, #8
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	23a5      	movs	r3, #165	@ 0xa5
 800d4c2:	009b      	lsls	r3, r3, #2
 800d4c4:	2104      	movs	r1, #4
 800d4c6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	2100      	movs	r1, #0
 800d4d0:	f000 fc82 	bl	800ddd8 <USBD_LL_Transmit>

  return USBD_OK;
 800d4d4:	2300      	movs	r3, #0
}
 800d4d6:	0018      	movs	r0, r3
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	b002      	add	sp, #8
 800d4dc:	bd80      	pop	{r7, pc}

0800d4de <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d4de:	b580      	push	{r7, lr}
 800d4e0:	b082      	sub	sp, #8
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d4e6:	687a      	ldr	r2, [r7, #4]
 800d4e8:	23a5      	movs	r3, #165	@ 0xa5
 800d4ea:	009b      	lsls	r3, r3, #2
 800d4ec:	2105      	movs	r1, #5
 800d4ee:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	2100      	movs	r1, #0
 800d4f8:	f000 fca5 	bl	800de46 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d4fc:	2300      	movs	r3, #0
}
 800d4fe:	0018      	movs	r0, r3
 800d500:	46bd      	mov	sp, r7
 800d502:	b002      	add	sp, #8
 800d504:	bd80      	pop	{r7, pc}
	...

0800d508 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d50c:	4914      	ldr	r1, [pc, #80]	@ (800d560 <MX_USB_DEVICE_Init+0x58>)
 800d50e:	4b15      	ldr	r3, [pc, #84]	@ (800d564 <MX_USB_DEVICE_Init+0x5c>)
 800d510:	2200      	movs	r2, #0
 800d512:	0018      	movs	r0, r3
 800d514:	f7fe fdec 	bl	800c0f0 <USBD_Init>
 800d518:	1e03      	subs	r3, r0, #0
 800d51a:	d001      	beq.n	800d520 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d51c:	f7f5 fde6 	bl	80030ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d520:	4a11      	ldr	r2, [pc, #68]	@ (800d568 <MX_USB_DEVICE_Init+0x60>)
 800d522:	4b10      	ldr	r3, [pc, #64]	@ (800d564 <MX_USB_DEVICE_Init+0x5c>)
 800d524:	0011      	movs	r1, r2
 800d526:	0018      	movs	r0, r3
 800d528:	f7fe fe13 	bl	800c152 <USBD_RegisterClass>
 800d52c:	1e03      	subs	r3, r0, #0
 800d52e:	d001      	beq.n	800d534 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800d530:	f7f5 fddc 	bl	80030ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d534:	4a0d      	ldr	r2, [pc, #52]	@ (800d56c <MX_USB_DEVICE_Init+0x64>)
 800d536:	4b0b      	ldr	r3, [pc, #44]	@ (800d564 <MX_USB_DEVICE_Init+0x5c>)
 800d538:	0011      	movs	r1, r2
 800d53a:	0018      	movs	r0, r3
 800d53c:	f7fe fd28 	bl	800bf90 <USBD_CDC_RegisterInterface>
 800d540:	1e03      	subs	r3, r0, #0
 800d542:	d001      	beq.n	800d548 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800d544:	f7f5 fdd2 	bl	80030ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d548:	4b06      	ldr	r3, [pc, #24]	@ (800d564 <MX_USB_DEVICE_Init+0x5c>)
 800d54a:	0018      	movs	r0, r3
 800d54c:	f7fe fe21 	bl	800c192 <USBD_Start>
 800d550:	1e03      	subs	r3, r0, #0
 800d552:	d001      	beq.n	800d558 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800d554:	f7f5 fdca 	bl	80030ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d558:	46c0      	nop			@ (mov r8, r8)
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
 800d55e:	46c0      	nop			@ (mov r8, r8)
 800d560:	2000018c 	.word	0x2000018c
 800d564:	20000a84 	.word	0x20000a84
 800d568:	20000078 	.word	0x20000078
 800d56c:	2000017c 	.word	0x2000017c

0800d570 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d574:	4907      	ldr	r1, [pc, #28]	@ (800d594 <CDC_Init_FS+0x24>)
 800d576:	4b08      	ldr	r3, [pc, #32]	@ (800d598 <CDC_Init_FS+0x28>)
 800d578:	2200      	movs	r2, #0
 800d57a:	0018      	movs	r0, r3
 800d57c:	f7fe fd23 	bl	800bfc6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d580:	4a06      	ldr	r2, [pc, #24]	@ (800d59c <CDC_Init_FS+0x2c>)
 800d582:	4b05      	ldr	r3, [pc, #20]	@ (800d598 <CDC_Init_FS+0x28>)
 800d584:	0011      	movs	r1, r2
 800d586:	0018      	movs	r0, r3
 800d588:	f7fe fd39 	bl	800bffe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d58c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d58e:	0018      	movs	r0, r3
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}
 800d594:	20001148 	.word	0x20001148
 800d598:	20000a84 	.word	0x20000a84
 800d59c:	20000d48 	.word	0x20000d48

0800d5a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d5a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d5a6:	0018      	movs	r0, r3
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b082      	sub	sp, #8
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6039      	str	r1, [r7, #0]
 800d5b4:	0011      	movs	r1, r2
 800d5b6:	1dfb      	adds	r3, r7, #7
 800d5b8:	1c02      	adds	r2, r0, #0
 800d5ba:	701a      	strb	r2, [r3, #0]
 800d5bc:	1d3b      	adds	r3, r7, #4
 800d5be:	1c0a      	adds	r2, r1, #0
 800d5c0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d5c2:	1dfb      	adds	r3, r7, #7
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	2b23      	cmp	r3, #35	@ 0x23
 800d5c8:	d804      	bhi.n	800d5d4 <CDC_Control_FS+0x28>
 800d5ca:	009a      	lsls	r2, r3, #2
 800d5cc:	4b04      	ldr	r3, [pc, #16]	@ (800d5e0 <CDC_Control_FS+0x34>)
 800d5ce:	18d3      	adds	r3, r2, r3
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d5d4:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 800d5d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d5d8:	0018      	movs	r0, r3
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	b002      	add	sp, #8
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	08012358 	.word	0x08012358

0800d5e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b082      	sub	sp, #8
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	4b06      	ldr	r3, [pc, #24]	@ (800d60c <CDC_Receive_FS+0x28>)
 800d5f2:	0011      	movs	r1, r2
 800d5f4:	0018      	movs	r0, r3
 800d5f6:	f7fe fd02 	bl	800bffe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d5fa:	4b04      	ldr	r3, [pc, #16]	@ (800d60c <CDC_Receive_FS+0x28>)
 800d5fc:	0018      	movs	r0, r3
 800d5fe:	f7fe fd49 	bl	800c094 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d602:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d604:	0018      	movs	r0, r3
 800d606:	46bd      	mov	sp, r7
 800d608:	b002      	add	sp, #8
 800d60a:	bd80      	pop	{r7, pc}
 800d60c:	20000a84 	.word	0x20000a84

0800d610 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d610:	b5b0      	push	{r4, r5, r7, lr}
 800d612:	b084      	sub	sp, #16
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	000a      	movs	r2, r1
 800d61a:	1cbb      	adds	r3, r7, #2
 800d61c:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800d61e:	230f      	movs	r3, #15
 800d620:	18fb      	adds	r3, r7, r3
 800d622:	2200      	movs	r2, #0
 800d624:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d626:	4a11      	ldr	r2, [pc, #68]	@ (800d66c <CDC_Transmit_FS+0x5c>)
 800d628:	23ae      	movs	r3, #174	@ 0xae
 800d62a:	009b      	lsls	r3, r3, #2
 800d62c:	58d3      	ldr	r3, [r2, r3]
 800d62e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d630:	68ba      	ldr	r2, [r7, #8]
 800d632:	2385      	movs	r3, #133	@ 0x85
 800d634:	009b      	lsls	r3, r3, #2
 800d636:	58d3      	ldr	r3, [r2, r3]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d001      	beq.n	800d640 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800d63c:	2301      	movs	r3, #1
 800d63e:	e010      	b.n	800d662 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d640:	1cbb      	adds	r3, r7, #2
 800d642:	881a      	ldrh	r2, [r3, #0]
 800d644:	6879      	ldr	r1, [r7, #4]
 800d646:	4b09      	ldr	r3, [pc, #36]	@ (800d66c <CDC_Transmit_FS+0x5c>)
 800d648:	0018      	movs	r0, r3
 800d64a:	f7fe fcbc 	bl	800bfc6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d64e:	250f      	movs	r5, #15
 800d650:	197c      	adds	r4, r7, r5
 800d652:	4b06      	ldr	r3, [pc, #24]	@ (800d66c <CDC_Transmit_FS+0x5c>)
 800d654:	0018      	movs	r0, r3
 800d656:	f7fe fce6 	bl	800c026 <USBD_CDC_TransmitPacket>
 800d65a:	0003      	movs	r3, r0
 800d65c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800d65e:	197b      	adds	r3, r7, r5
 800d660:	781b      	ldrb	r3, [r3, #0]
}
 800d662:	0018      	movs	r0, r3
 800d664:	46bd      	mov	sp, r7
 800d666:	b004      	add	sp, #16
 800d668:	bdb0      	pop	{r4, r5, r7, pc}
 800d66a:	46c0      	nop			@ (mov r8, r8)
 800d66c:	20000a84 	.word	0x20000a84

0800d670 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	0002      	movs	r2, r0
 800d678:	6039      	str	r1, [r7, #0]
 800d67a:	1dfb      	adds	r3, r7, #7
 800d67c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	2212      	movs	r2, #18
 800d682:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d684:	4b02      	ldr	r3, [pc, #8]	@ (800d690 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d686:	0018      	movs	r0, r3
 800d688:	46bd      	mov	sp, r7
 800d68a:	b002      	add	sp, #8
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	46c0      	nop			@ (mov r8, r8)
 800d690:	200001a8 	.word	0x200001a8

0800d694 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b082      	sub	sp, #8
 800d698:	af00      	add	r7, sp, #0
 800d69a:	0002      	movs	r2, r0
 800d69c:	6039      	str	r1, [r7, #0]
 800d69e:	1dfb      	adds	r3, r7, #7
 800d6a0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	2204      	movs	r2, #4
 800d6a6:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d6a8:	4b02      	ldr	r3, [pc, #8]	@ (800d6b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d6aa:	0018      	movs	r0, r3
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	b002      	add	sp, #8
 800d6b0:	bd80      	pop	{r7, pc}
 800d6b2:	46c0      	nop			@ (mov r8, r8)
 800d6b4:	200001bc 	.word	0x200001bc

0800d6b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	0002      	movs	r2, r0
 800d6c0:	6039      	str	r1, [r7, #0]
 800d6c2:	1dfb      	adds	r3, r7, #7
 800d6c4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800d6c6:	1dfb      	adds	r3, r7, #7
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d106      	bne.n	800d6dc <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d6ce:	683a      	ldr	r2, [r7, #0]
 800d6d0:	4908      	ldr	r1, [pc, #32]	@ (800d6f4 <USBD_FS_ProductStrDescriptor+0x3c>)
 800d6d2:	4b09      	ldr	r3, [pc, #36]	@ (800d6f8 <USBD_FS_ProductStrDescriptor+0x40>)
 800d6d4:	0018      	movs	r0, r3
 800d6d6:	f7ff fe19 	bl	800d30c <USBD_GetString>
 800d6da:	e005      	b.n	800d6e8 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d6dc:	683a      	ldr	r2, [r7, #0]
 800d6de:	4905      	ldr	r1, [pc, #20]	@ (800d6f4 <USBD_FS_ProductStrDescriptor+0x3c>)
 800d6e0:	4b05      	ldr	r3, [pc, #20]	@ (800d6f8 <USBD_FS_ProductStrDescriptor+0x40>)
 800d6e2:	0018      	movs	r0, r3
 800d6e4:	f7ff fe12 	bl	800d30c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6e8:	4b02      	ldr	r3, [pc, #8]	@ (800d6f4 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800d6ea:	0018      	movs	r0, r3
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	b002      	add	sp, #8
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	46c0      	nop			@ (mov r8, r8)
 800d6f4:	20001548 	.word	0x20001548
 800d6f8:	08012238 	.word	0x08012238

0800d6fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b082      	sub	sp, #8
 800d700:	af00      	add	r7, sp, #0
 800d702:	0002      	movs	r2, r0
 800d704:	6039      	str	r1, [r7, #0]
 800d706:	1dfb      	adds	r3, r7, #7
 800d708:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d70a:	683a      	ldr	r2, [r7, #0]
 800d70c:	4904      	ldr	r1, [pc, #16]	@ (800d720 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d70e:	4b05      	ldr	r3, [pc, #20]	@ (800d724 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800d710:	0018      	movs	r0, r3
 800d712:	f7ff fdfb 	bl	800d30c <USBD_GetString>
  return USBD_StrDesc;
 800d716:	4b02      	ldr	r3, [pc, #8]	@ (800d720 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800d718:	0018      	movs	r0, r3
 800d71a:	46bd      	mov	sp, r7
 800d71c:	b002      	add	sp, #8
 800d71e:	bd80      	pop	{r7, pc}
 800d720:	20001548 	.word	0x20001548
 800d724:	08012250 	.word	0x08012250

0800d728 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	0002      	movs	r2, r0
 800d730:	6039      	str	r1, [r7, #0]
 800d732:	1dfb      	adds	r3, r7, #7
 800d734:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	221a      	movs	r2, #26
 800d73a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d73c:	f000 f84c 	bl	800d7d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d740:	4b02      	ldr	r3, [pc, #8]	@ (800d74c <USBD_FS_SerialStrDescriptor+0x24>)
}
 800d742:	0018      	movs	r0, r3
 800d744:	46bd      	mov	sp, r7
 800d746:	b002      	add	sp, #8
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	46c0      	nop			@ (mov r8, r8)
 800d74c:	200001c0 	.word	0x200001c0

0800d750 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
 800d756:	0002      	movs	r2, r0
 800d758:	6039      	str	r1, [r7, #0]
 800d75a:	1dfb      	adds	r3, r7, #7
 800d75c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800d75e:	1dfb      	adds	r3, r7, #7
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d106      	bne.n	800d774 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d766:	683a      	ldr	r2, [r7, #0]
 800d768:	4908      	ldr	r1, [pc, #32]	@ (800d78c <USBD_FS_ConfigStrDescriptor+0x3c>)
 800d76a:	4b09      	ldr	r3, [pc, #36]	@ (800d790 <USBD_FS_ConfigStrDescriptor+0x40>)
 800d76c:	0018      	movs	r0, r3
 800d76e:	f7ff fdcd 	bl	800d30c <USBD_GetString>
 800d772:	e005      	b.n	800d780 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d774:	683a      	ldr	r2, [r7, #0]
 800d776:	4905      	ldr	r1, [pc, #20]	@ (800d78c <USBD_FS_ConfigStrDescriptor+0x3c>)
 800d778:	4b05      	ldr	r3, [pc, #20]	@ (800d790 <USBD_FS_ConfigStrDescriptor+0x40>)
 800d77a:	0018      	movs	r0, r3
 800d77c:	f7ff fdc6 	bl	800d30c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d780:	4b02      	ldr	r3, [pc, #8]	@ (800d78c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800d782:	0018      	movs	r0, r3
 800d784:	46bd      	mov	sp, r7
 800d786:	b002      	add	sp, #8
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	46c0      	nop			@ (mov r8, r8)
 800d78c:	20001548 	.word	0x20001548
 800d790:	08012264 	.word	0x08012264

0800d794 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	0002      	movs	r2, r0
 800d79c:	6039      	str	r1, [r7, #0]
 800d79e:	1dfb      	adds	r3, r7, #7
 800d7a0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800d7a2:	1dfb      	adds	r3, r7, #7
 800d7a4:	781b      	ldrb	r3, [r3, #0]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d106      	bne.n	800d7b8 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d7aa:	683a      	ldr	r2, [r7, #0]
 800d7ac:	4908      	ldr	r1, [pc, #32]	@ (800d7d0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800d7ae:	4b09      	ldr	r3, [pc, #36]	@ (800d7d4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800d7b0:	0018      	movs	r0, r3
 800d7b2:	f7ff fdab 	bl	800d30c <USBD_GetString>
 800d7b6:	e005      	b.n	800d7c4 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d7b8:	683a      	ldr	r2, [r7, #0]
 800d7ba:	4905      	ldr	r1, [pc, #20]	@ (800d7d0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800d7bc:	4b05      	ldr	r3, [pc, #20]	@ (800d7d4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800d7be:	0018      	movs	r0, r3
 800d7c0:	f7ff fda4 	bl	800d30c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d7c4:	4b02      	ldr	r3, [pc, #8]	@ (800d7d0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800d7c6:	0018      	movs	r0, r3
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	b002      	add	sp, #8
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	46c0      	nop			@ (mov r8, r8)
 800d7d0:	20001548 	.word	0x20001548
 800d7d4:	08012270 	.word	0x08012270

0800d7d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b084      	sub	sp, #16
 800d7dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d7de:	4b10      	ldr	r3, [pc, #64]	@ (800d820 <Get_SerialNum+0x48>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d7e4:	4b0f      	ldr	r3, [pc, #60]	@ (800d824 <Get_SerialNum+0x4c>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d7ea:	4b0f      	ldr	r3, [pc, #60]	@ (800d828 <Get_SerialNum+0x50>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d7f0:	68fa      	ldr	r2, [r7, #12]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	18d3      	adds	r3, r2, r3
 800d7f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d00b      	beq.n	800d816 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d7fe:	490b      	ldr	r1, [pc, #44]	@ (800d82c <Get_SerialNum+0x54>)
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	2208      	movs	r2, #8
 800d804:	0018      	movs	r0, r3
 800d806:	f000 f815 	bl	800d834 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d80a:	4909      	ldr	r1, [pc, #36]	@ (800d830 <Get_SerialNum+0x58>)
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	2204      	movs	r2, #4
 800d810:	0018      	movs	r0, r3
 800d812:	f000 f80f 	bl	800d834 <IntToUnicode>
  }
}
 800d816:	46c0      	nop			@ (mov r8, r8)
 800d818:	46bd      	mov	sp, r7
 800d81a:	b004      	add	sp, #16
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	46c0      	nop			@ (mov r8, r8)
 800d820:	1ffff7ac 	.word	0x1ffff7ac
 800d824:	1ffff7b0 	.word	0x1ffff7b0
 800d828:	1ffff7b4 	.word	0x1ffff7b4
 800d82c:	200001c2 	.word	0x200001c2
 800d830:	200001d2 	.word	0x200001d2

0800d834 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b086      	sub	sp, #24
 800d838:	af00      	add	r7, sp, #0
 800d83a:	60f8      	str	r0, [r7, #12]
 800d83c:	60b9      	str	r1, [r7, #8]
 800d83e:	1dfb      	adds	r3, r7, #7
 800d840:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800d842:	2117      	movs	r1, #23
 800d844:	187b      	adds	r3, r7, r1
 800d846:	2200      	movs	r2, #0
 800d848:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800d84a:	187b      	adds	r3, r7, r1
 800d84c:	2200      	movs	r2, #0
 800d84e:	701a      	strb	r2, [r3, #0]
 800d850:	e02f      	b.n	800d8b2 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	0f1b      	lsrs	r3, r3, #28
 800d856:	2b09      	cmp	r3, #9
 800d858:	d80d      	bhi.n	800d876 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	0f1b      	lsrs	r3, r3, #28
 800d85e:	b2da      	uxtb	r2, r3
 800d860:	2317      	movs	r3, #23
 800d862:	18fb      	adds	r3, r7, r3
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	005b      	lsls	r3, r3, #1
 800d868:	0019      	movs	r1, r3
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	185b      	adds	r3, r3, r1
 800d86e:	3230      	adds	r2, #48	@ 0x30
 800d870:	b2d2      	uxtb	r2, r2
 800d872:	701a      	strb	r2, [r3, #0]
 800d874:	e00c      	b.n	800d890 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	0f1b      	lsrs	r3, r3, #28
 800d87a:	b2da      	uxtb	r2, r3
 800d87c:	2317      	movs	r3, #23
 800d87e:	18fb      	adds	r3, r7, r3
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	005b      	lsls	r3, r3, #1
 800d884:	0019      	movs	r1, r3
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	185b      	adds	r3, r3, r1
 800d88a:	3237      	adds	r2, #55	@ 0x37
 800d88c:	b2d2      	uxtb	r2, r2
 800d88e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	011b      	lsls	r3, r3, #4
 800d894:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d896:	2117      	movs	r1, #23
 800d898:	187b      	adds	r3, r7, r1
 800d89a:	781b      	ldrb	r3, [r3, #0]
 800d89c:	005b      	lsls	r3, r3, #1
 800d89e:	3301      	adds	r3, #1
 800d8a0:	68ba      	ldr	r2, [r7, #8]
 800d8a2:	18d3      	adds	r3, r2, r3
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d8a8:	187b      	adds	r3, r7, r1
 800d8aa:	781a      	ldrb	r2, [r3, #0]
 800d8ac:	187b      	adds	r3, r7, r1
 800d8ae:	3201      	adds	r2, #1
 800d8b0:	701a      	strb	r2, [r3, #0]
 800d8b2:	2317      	movs	r3, #23
 800d8b4:	18fa      	adds	r2, r7, r3
 800d8b6:	1dfb      	adds	r3, r7, #7
 800d8b8:	7812      	ldrb	r2, [r2, #0]
 800d8ba:	781b      	ldrb	r3, [r3, #0]
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d3c8      	bcc.n	800d852 <IntToUnicode+0x1e>
  }
}
 800d8c0:	46c0      	nop			@ (mov r8, r8)
 800d8c2:	46c0      	nop			@ (mov r8, r8)
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	b006      	add	sp, #24
 800d8c8:	bd80      	pop	{r7, pc}
	...

0800d8cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	4a0e      	ldr	r2, [pc, #56]	@ (800d914 <HAL_PCD_MspInit+0x48>)
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d115      	bne.n	800d90a <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d8de:	4b0e      	ldr	r3, [pc, #56]	@ (800d918 <HAL_PCD_MspInit+0x4c>)
 800d8e0:	69da      	ldr	r2, [r3, #28]
 800d8e2:	4b0d      	ldr	r3, [pc, #52]	@ (800d918 <HAL_PCD_MspInit+0x4c>)
 800d8e4:	2180      	movs	r1, #128	@ 0x80
 800d8e6:	0409      	lsls	r1, r1, #16
 800d8e8:	430a      	orrs	r2, r1
 800d8ea:	61da      	str	r2, [r3, #28]
 800d8ec:	4b0a      	ldr	r3, [pc, #40]	@ (800d918 <HAL_PCD_MspInit+0x4c>)
 800d8ee:	69da      	ldr	r2, [r3, #28]
 800d8f0:	2380      	movs	r3, #128	@ 0x80
 800d8f2:	041b      	lsls	r3, r3, #16
 800d8f4:	4013      	ands	r3, r2
 800d8f6:	60fb      	str	r3, [r7, #12]
 800d8f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	2100      	movs	r1, #0
 800d8fe:	201f      	movs	r0, #31
 800d900:	f7f6 faa4 	bl	8003e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800d904:	201f      	movs	r0, #31
 800d906:	f7f6 fab6 	bl	8003e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d90a:	46c0      	nop			@ (mov r8, r8)
 800d90c:	46bd      	mov	sp, r7
 800d90e:	b004      	add	sp, #16
 800d910:	bd80      	pop	{r7, pc}
 800d912:	46c0      	nop			@ (mov r8, r8)
 800d914:	40005c00 	.word	0x40005c00
 800d918:	40021000 	.word	0x40021000

0800d91c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b082      	sub	sp, #8
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d924:	687a      	ldr	r2, [r7, #4]
 800d926:	23b6      	movs	r3, #182	@ 0xb6
 800d928:	009b      	lsls	r3, r3, #2
 800d92a:	58d2      	ldr	r2, [r2, r3]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	21a6      	movs	r1, #166	@ 0xa6
 800d930:	0089      	lsls	r1, r1, #2
 800d932:	468c      	mov	ip, r1
 800d934:	4463      	add	r3, ip
 800d936:	0019      	movs	r1, r3
 800d938:	0010      	movs	r0, r2
 800d93a:	f7fe fc7d 	bl	800c238 <USBD_LL_SetupStage>
}
 800d93e:	46c0      	nop			@ (mov r8, r8)
 800d940:	46bd      	mov	sp, r7
 800d942:	b002      	add	sp, #8
 800d944:	bd80      	pop	{r7, pc}

0800d946 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d946:	b590      	push	{r4, r7, lr}
 800d948:	b083      	sub	sp, #12
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
 800d94e:	000a      	movs	r2, r1
 800d950:	1cfb      	adds	r3, r7, #3
 800d952:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d954:	687a      	ldr	r2, [r7, #4]
 800d956:	23b6      	movs	r3, #182	@ 0xb6
 800d958:	009b      	lsls	r3, r3, #2
 800d95a:	58d4      	ldr	r4, [r2, r3]
 800d95c:	1cfb      	adds	r3, r7, #3
 800d95e:	781a      	ldrb	r2, [r3, #0]
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	23b2      	movs	r3, #178	@ 0xb2
 800d964:	0059      	lsls	r1, r3, #1
 800d966:	0013      	movs	r3, r2
 800d968:	009b      	lsls	r3, r3, #2
 800d96a:	189b      	adds	r3, r3, r2
 800d96c:	00db      	lsls	r3, r3, #3
 800d96e:	18c3      	adds	r3, r0, r3
 800d970:	185b      	adds	r3, r3, r1
 800d972:	681a      	ldr	r2, [r3, #0]
 800d974:	1cfb      	adds	r3, r7, #3
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	0019      	movs	r1, r3
 800d97a:	0020      	movs	r0, r4
 800d97c:	f7fe fcba 	bl	800c2f4 <USBD_LL_DataOutStage>
}
 800d980:	46c0      	nop			@ (mov r8, r8)
 800d982:	46bd      	mov	sp, r7
 800d984:	b003      	add	sp, #12
 800d986:	bd90      	pop	{r4, r7, pc}

0800d988 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	000a      	movs	r2, r1
 800d992:	1cfb      	adds	r3, r7, #3
 800d994:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d996:	687a      	ldr	r2, [r7, #4]
 800d998:	23b6      	movs	r3, #182	@ 0xb6
 800d99a:	009b      	lsls	r3, r3, #2
 800d99c:	58d0      	ldr	r0, [r2, r3]
 800d99e:	1cfb      	adds	r3, r7, #3
 800d9a0:	781a      	ldrb	r2, [r3, #0]
 800d9a2:	6879      	ldr	r1, [r7, #4]
 800d9a4:	0013      	movs	r3, r2
 800d9a6:	009b      	lsls	r3, r3, #2
 800d9a8:	189b      	adds	r3, r3, r2
 800d9aa:	00db      	lsls	r3, r3, #3
 800d9ac:	18cb      	adds	r3, r1, r3
 800d9ae:	3324      	adds	r3, #36	@ 0x24
 800d9b0:	681a      	ldr	r2, [r3, #0]
 800d9b2:	1cfb      	adds	r3, r7, #3
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	0019      	movs	r1, r3
 800d9b8:	f7fe fd1e 	bl	800c3f8 <USBD_LL_DataInStage>
}
 800d9bc:	46c0      	nop			@ (mov r8, r8)
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	b002      	add	sp, #8
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d9cc:	687a      	ldr	r2, [r7, #4]
 800d9ce:	23b6      	movs	r3, #182	@ 0xb6
 800d9d0:	009b      	lsls	r3, r3, #2
 800d9d2:	58d3      	ldr	r3, [r2, r3]
 800d9d4:	0018      	movs	r0, r3
 800d9d6:	f7fe fe55 	bl	800c684 <USBD_LL_SOF>
}
 800d9da:	46c0      	nop			@ (mov r8, r8)
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	b002      	add	sp, #8
 800d9e0:	bd80      	pop	{r7, pc}

0800d9e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b084      	sub	sp, #16
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d9ea:	230f      	movs	r3, #15
 800d9ec:	18fb      	adds	r3, r7, r3
 800d9ee:	2201      	movs	r2, #1
 800d9f0:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	795b      	ldrb	r3, [r3, #5]
 800d9f6:	2b02      	cmp	r3, #2
 800d9f8:	d001      	beq.n	800d9fe <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800d9fa:	f7f5 fb77 	bl	80030ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d9fe:	687a      	ldr	r2, [r7, #4]
 800da00:	23b6      	movs	r3, #182	@ 0xb6
 800da02:	009b      	lsls	r3, r3, #2
 800da04:	58d2      	ldr	r2, [r2, r3]
 800da06:	230f      	movs	r3, #15
 800da08:	18fb      	adds	r3, r7, r3
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	0019      	movs	r1, r3
 800da0e:	0010      	movs	r0, r2
 800da10:	f7fe fdf7 	bl	800c602 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800da14:	687a      	ldr	r2, [r7, #4]
 800da16:	23b6      	movs	r3, #182	@ 0xb6
 800da18:	009b      	lsls	r3, r3, #2
 800da1a:	58d3      	ldr	r3, [r2, r3]
 800da1c:	0018      	movs	r0, r3
 800da1e:	f7fe fda8 	bl	800c572 <USBD_LL_Reset>
}
 800da22:	46c0      	nop			@ (mov r8, r8)
 800da24:	46bd      	mov	sp, r7
 800da26:	b004      	add	sp, #16
 800da28:	bd80      	pop	{r7, pc}
	...

0800da2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800da34:	687a      	ldr	r2, [r7, #4]
 800da36:	23b6      	movs	r3, #182	@ 0xb6
 800da38:	009b      	lsls	r3, r3, #2
 800da3a:	58d3      	ldr	r3, [r2, r3]
 800da3c:	0018      	movs	r0, r3
 800da3e:	f7fe fdf1 	bl	800c624 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	7a5b      	ldrb	r3, [r3, #9]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d005      	beq.n	800da56 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800da4a:	4b05      	ldr	r3, [pc, #20]	@ (800da60 <HAL_PCD_SuspendCallback+0x34>)
 800da4c:	691a      	ldr	r2, [r3, #16]
 800da4e:	4b04      	ldr	r3, [pc, #16]	@ (800da60 <HAL_PCD_SuspendCallback+0x34>)
 800da50:	2106      	movs	r1, #6
 800da52:	430a      	orrs	r2, r1
 800da54:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800da56:	46c0      	nop			@ (mov r8, r8)
 800da58:	46bd      	mov	sp, r7
 800da5a:	b002      	add	sp, #8
 800da5c:	bd80      	pop	{r7, pc}
 800da5e:	46c0      	nop			@ (mov r8, r8)
 800da60:	e000ed00 	.word	0xe000ed00

0800da64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b082      	sub	sp, #8
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	7a5b      	ldrb	r3, [r3, #9]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d007      	beq.n	800da84 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800da74:	4b09      	ldr	r3, [pc, #36]	@ (800da9c <HAL_PCD_ResumeCallback+0x38>)
 800da76:	691a      	ldr	r2, [r3, #16]
 800da78:	4b08      	ldr	r3, [pc, #32]	@ (800da9c <HAL_PCD_ResumeCallback+0x38>)
 800da7a:	2106      	movs	r1, #6
 800da7c:	438a      	bics	r2, r1
 800da7e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800da80:	f000 fa42 	bl	800df08 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800da84:	687a      	ldr	r2, [r7, #4]
 800da86:	23b6      	movs	r3, #182	@ 0xb6
 800da88:	009b      	lsls	r3, r3, #2
 800da8a:	58d3      	ldr	r3, [r2, r3]
 800da8c:	0018      	movs	r0, r3
 800da8e:	f7fe fde1 	bl	800c654 <USBD_LL_Resume>
}
 800da92:	46c0      	nop			@ (mov r8, r8)
 800da94:	46bd      	mov	sp, r7
 800da96:	b002      	add	sp, #8
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	46c0      	nop			@ (mov r8, r8)
 800da9c:	e000ed00 	.word	0xe000ed00

0800daa0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b082      	sub	sp, #8
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800daa8:	4a2d      	ldr	r2, [pc, #180]	@ (800db60 <USBD_LL_Init+0xc0>)
 800daaa:	23b6      	movs	r3, #182	@ 0xb6
 800daac:	009b      	lsls	r3, r3, #2
 800daae:	6879      	ldr	r1, [r7, #4]
 800dab0:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800dab2:	687a      	ldr	r2, [r7, #4]
 800dab4:	23b0      	movs	r3, #176	@ 0xb0
 800dab6:	009b      	lsls	r3, r3, #2
 800dab8:	4929      	ldr	r1, [pc, #164]	@ (800db60 <USBD_LL_Init+0xc0>)
 800daba:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800dabc:	4b28      	ldr	r3, [pc, #160]	@ (800db60 <USBD_LL_Init+0xc0>)
 800dabe:	4a29      	ldr	r2, [pc, #164]	@ (800db64 <USBD_LL_Init+0xc4>)
 800dac0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800dac2:	4b27      	ldr	r3, [pc, #156]	@ (800db60 <USBD_LL_Init+0xc0>)
 800dac4:	2208      	movs	r2, #8
 800dac6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800dac8:	4b25      	ldr	r3, [pc, #148]	@ (800db60 <USBD_LL_Init+0xc0>)
 800daca:	2202      	movs	r2, #2
 800dacc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dace:	4b24      	ldr	r3, [pc, #144]	@ (800db60 <USBD_LL_Init+0xc0>)
 800dad0:	2202      	movs	r2, #2
 800dad2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800dad4:	4b22      	ldr	r3, [pc, #136]	@ (800db60 <USBD_LL_Init+0xc0>)
 800dad6:	2200      	movs	r2, #0
 800dad8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800dada:	4b21      	ldr	r3, [pc, #132]	@ (800db60 <USBD_LL_Init+0xc0>)
 800dadc:	2200      	movs	r2, #0
 800dade:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800dae0:	4b1f      	ldr	r3, [pc, #124]	@ (800db60 <USBD_LL_Init+0xc0>)
 800dae2:	2200      	movs	r2, #0
 800dae4:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800dae6:	4b1e      	ldr	r3, [pc, #120]	@ (800db60 <USBD_LL_Init+0xc0>)
 800dae8:	0018      	movs	r0, r3
 800daea:	f7f6 fdd5 	bl	8004698 <HAL_PCD_Init>
 800daee:	1e03      	subs	r3, r0, #0
 800daf0:	d001      	beq.n	800daf6 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800daf2:	f7f5 fafb 	bl	80030ec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800daf6:	687a      	ldr	r2, [r7, #4]
 800daf8:	23b0      	movs	r3, #176	@ 0xb0
 800dafa:	009b      	lsls	r3, r3, #2
 800dafc:	58d0      	ldr	r0, [r2, r3]
 800dafe:	2318      	movs	r3, #24
 800db00:	2200      	movs	r2, #0
 800db02:	2100      	movs	r1, #0
 800db04:	f7f8 fb86 	bl	8006214 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800db08:	687a      	ldr	r2, [r7, #4]
 800db0a:	23b0      	movs	r3, #176	@ 0xb0
 800db0c:	009b      	lsls	r3, r3, #2
 800db0e:	58d0      	ldr	r0, [r2, r3]
 800db10:	2358      	movs	r3, #88	@ 0x58
 800db12:	2200      	movs	r2, #0
 800db14:	2180      	movs	r1, #128	@ 0x80
 800db16:	f7f8 fb7d 	bl	8006214 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800db1a:	687a      	ldr	r2, [r7, #4]
 800db1c:	23b0      	movs	r3, #176	@ 0xb0
 800db1e:	009b      	lsls	r3, r3, #2
 800db20:	58d0      	ldr	r0, [r2, r3]
 800db22:	23c0      	movs	r3, #192	@ 0xc0
 800db24:	2200      	movs	r2, #0
 800db26:	2181      	movs	r1, #129	@ 0x81
 800db28:	f7f8 fb74 	bl	8006214 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800db2c:	687a      	ldr	r2, [r7, #4]
 800db2e:	23b0      	movs	r3, #176	@ 0xb0
 800db30:	009b      	lsls	r3, r3, #2
 800db32:	58d0      	ldr	r0, [r2, r3]
 800db34:	2388      	movs	r3, #136	@ 0x88
 800db36:	005b      	lsls	r3, r3, #1
 800db38:	2200      	movs	r2, #0
 800db3a:	2101      	movs	r1, #1
 800db3c:	f7f8 fb6a 	bl	8006214 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800db40:	687a      	ldr	r2, [r7, #4]
 800db42:	23b0      	movs	r3, #176	@ 0xb0
 800db44:	009b      	lsls	r3, r3, #2
 800db46:	58d0      	ldr	r0, [r2, r3]
 800db48:	2380      	movs	r3, #128	@ 0x80
 800db4a:	005b      	lsls	r3, r3, #1
 800db4c:	2200      	movs	r2, #0
 800db4e:	2182      	movs	r1, #130	@ 0x82
 800db50:	f7f8 fb60 	bl	8006214 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800db54:	2300      	movs	r3, #0
}
 800db56:	0018      	movs	r0, r3
 800db58:	46bd      	mov	sp, r7
 800db5a:	b002      	add	sp, #8
 800db5c:	bd80      	pop	{r7, pc}
 800db5e:	46c0      	nop			@ (mov r8, r8)
 800db60:	20001748 	.word	0x20001748
 800db64:	40005c00 	.word	0x40005c00

0800db68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800db68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db6a:	b085      	sub	sp, #20
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db70:	210f      	movs	r1, #15
 800db72:	187b      	adds	r3, r7, r1
 800db74:	2200      	movs	r2, #0
 800db76:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db78:	260e      	movs	r6, #14
 800db7a:	19bb      	adds	r3, r7, r6
 800db7c:	2200      	movs	r2, #0
 800db7e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800db80:	687a      	ldr	r2, [r7, #4]
 800db82:	23b0      	movs	r3, #176	@ 0xb0
 800db84:	009b      	lsls	r3, r3, #2
 800db86:	58d3      	ldr	r3, [r2, r3]
 800db88:	000d      	movs	r5, r1
 800db8a:	187c      	adds	r4, r7, r1
 800db8c:	0018      	movs	r0, r3
 800db8e:	f7f6 fe77 	bl	8004880 <HAL_PCD_Start>
 800db92:	0003      	movs	r3, r0
 800db94:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db96:	19bc      	adds	r4, r7, r6
 800db98:	197b      	adds	r3, r7, r5
 800db9a:	781b      	ldrb	r3, [r3, #0]
 800db9c:	0018      	movs	r0, r3
 800db9e:	f000 f9ba 	bl	800df16 <USBD_Get_USB_Status>
 800dba2:	0003      	movs	r3, r0
 800dba4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800dba6:	19bb      	adds	r3, r7, r6
 800dba8:	781b      	ldrb	r3, [r3, #0]
}
 800dbaa:	0018      	movs	r0, r3
 800dbac:	46bd      	mov	sp, r7
 800dbae:	b005      	add	sp, #20
 800dbb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dbb2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dbb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbb4:	b085      	sub	sp, #20
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	6078      	str	r0, [r7, #4]
 800dbba:	000c      	movs	r4, r1
 800dbbc:	0010      	movs	r0, r2
 800dbbe:	0019      	movs	r1, r3
 800dbc0:	1cfb      	adds	r3, r7, #3
 800dbc2:	1c22      	adds	r2, r4, #0
 800dbc4:	701a      	strb	r2, [r3, #0]
 800dbc6:	1cbb      	adds	r3, r7, #2
 800dbc8:	1c02      	adds	r2, r0, #0
 800dbca:	701a      	strb	r2, [r3, #0]
 800dbcc:	003b      	movs	r3, r7
 800dbce:	1c0a      	adds	r2, r1, #0
 800dbd0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbd2:	260f      	movs	r6, #15
 800dbd4:	19bb      	adds	r3, r7, r6
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbda:	250e      	movs	r5, #14
 800dbdc:	197b      	adds	r3, r7, r5
 800dbde:	2200      	movs	r2, #0
 800dbe0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	23b0      	movs	r3, #176	@ 0xb0
 800dbe6:	009b      	lsls	r3, r3, #2
 800dbe8:	58d0      	ldr	r0, [r2, r3]
 800dbea:	19bc      	adds	r4, r7, r6
 800dbec:	1cbb      	adds	r3, r7, #2
 800dbee:	781d      	ldrb	r5, [r3, #0]
 800dbf0:	003b      	movs	r3, r7
 800dbf2:	881a      	ldrh	r2, [r3, #0]
 800dbf4:	1cfb      	adds	r3, r7, #3
 800dbf6:	7819      	ldrb	r1, [r3, #0]
 800dbf8:	002b      	movs	r3, r5
 800dbfa:	f7f6 ffd5 	bl	8004ba8 <HAL_PCD_EP_Open>
 800dbfe:	0003      	movs	r3, r0
 800dc00:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc02:	250e      	movs	r5, #14
 800dc04:	197c      	adds	r4, r7, r5
 800dc06:	19bb      	adds	r3, r7, r6
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	0018      	movs	r0, r3
 800dc0c:	f000 f983 	bl	800df16 <USBD_Get_USB_Status>
 800dc10:	0003      	movs	r3, r0
 800dc12:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800dc14:	197b      	adds	r3, r7, r5
 800dc16:	781b      	ldrb	r3, [r3, #0]
}
 800dc18:	0018      	movs	r0, r3
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	b005      	add	sp, #20
 800dc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dc20 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc22:	b085      	sub	sp, #20
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	000a      	movs	r2, r1
 800dc2a:	1cfb      	adds	r3, r7, #3
 800dc2c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc2e:	210f      	movs	r1, #15
 800dc30:	187b      	adds	r3, r7, r1
 800dc32:	2200      	movs	r2, #0
 800dc34:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc36:	260e      	movs	r6, #14
 800dc38:	19bb      	adds	r3, r7, r6
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dc3e:	687a      	ldr	r2, [r7, #4]
 800dc40:	23b0      	movs	r3, #176	@ 0xb0
 800dc42:	009b      	lsls	r3, r3, #2
 800dc44:	58d2      	ldr	r2, [r2, r3]
 800dc46:	000d      	movs	r5, r1
 800dc48:	187c      	adds	r4, r7, r1
 800dc4a:	1cfb      	adds	r3, r7, #3
 800dc4c:	781b      	ldrb	r3, [r3, #0]
 800dc4e:	0019      	movs	r1, r3
 800dc50:	0010      	movs	r0, r2
 800dc52:	f7f7 f818 	bl	8004c86 <HAL_PCD_EP_Close>
 800dc56:	0003      	movs	r3, r0
 800dc58:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc5a:	19bc      	adds	r4, r7, r6
 800dc5c:	197b      	adds	r3, r7, r5
 800dc5e:	781b      	ldrb	r3, [r3, #0]
 800dc60:	0018      	movs	r0, r3
 800dc62:	f000 f958 	bl	800df16 <USBD_Get_USB_Status>
 800dc66:	0003      	movs	r3, r0
 800dc68:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800dc6a:	19bb      	adds	r3, r7, r6
 800dc6c:	781b      	ldrb	r3, [r3, #0]
}
 800dc6e:	0018      	movs	r0, r3
 800dc70:	46bd      	mov	sp, r7
 800dc72:	b005      	add	sp, #20
 800dc74:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dc76 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc76:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc78:	b085      	sub	sp, #20
 800dc7a:	af00      	add	r7, sp, #0
 800dc7c:	6078      	str	r0, [r7, #4]
 800dc7e:	000a      	movs	r2, r1
 800dc80:	1cfb      	adds	r3, r7, #3
 800dc82:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc84:	210f      	movs	r1, #15
 800dc86:	187b      	adds	r3, r7, r1
 800dc88:	2200      	movs	r2, #0
 800dc8a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc8c:	260e      	movs	r6, #14
 800dc8e:	19bb      	adds	r3, r7, r6
 800dc90:	2200      	movs	r2, #0
 800dc92:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dc94:	687a      	ldr	r2, [r7, #4]
 800dc96:	23b0      	movs	r3, #176	@ 0xb0
 800dc98:	009b      	lsls	r3, r3, #2
 800dc9a:	58d2      	ldr	r2, [r2, r3]
 800dc9c:	000d      	movs	r5, r1
 800dc9e:	187c      	adds	r4, r7, r1
 800dca0:	1cfb      	adds	r3, r7, #3
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	0019      	movs	r1, r3
 800dca6:	0010      	movs	r0, r2
 800dca8:	f7f7 f8ca 	bl	8004e40 <HAL_PCD_EP_SetStall>
 800dcac:	0003      	movs	r3, r0
 800dcae:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcb0:	19bc      	adds	r4, r7, r6
 800dcb2:	197b      	adds	r3, r7, r5
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	0018      	movs	r0, r3
 800dcb8:	f000 f92d 	bl	800df16 <USBD_Get_USB_Status>
 800dcbc:	0003      	movs	r3, r0
 800dcbe:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800dcc0:	19bb      	adds	r3, r7, r6
 800dcc2:	781b      	ldrb	r3, [r3, #0]
}
 800dcc4:	0018      	movs	r0, r3
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	b005      	add	sp, #20
 800dcca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dccc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcce:	b085      	sub	sp, #20
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
 800dcd4:	000a      	movs	r2, r1
 800dcd6:	1cfb      	adds	r3, r7, #3
 800dcd8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcda:	210f      	movs	r1, #15
 800dcdc:	187b      	adds	r3, r7, r1
 800dcde:	2200      	movs	r2, #0
 800dce0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dce2:	260e      	movs	r6, #14
 800dce4:	19bb      	adds	r3, r7, r6
 800dce6:	2200      	movs	r2, #0
 800dce8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dcea:	687a      	ldr	r2, [r7, #4]
 800dcec:	23b0      	movs	r3, #176	@ 0xb0
 800dcee:	009b      	lsls	r3, r3, #2
 800dcf0:	58d2      	ldr	r2, [r2, r3]
 800dcf2:	000d      	movs	r5, r1
 800dcf4:	187c      	adds	r4, r7, r1
 800dcf6:	1cfb      	adds	r3, r7, #3
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	0019      	movs	r1, r3
 800dcfc:	0010      	movs	r0, r2
 800dcfe:	f7f7 f8fb 	bl	8004ef8 <HAL_PCD_EP_ClrStall>
 800dd02:	0003      	movs	r3, r0
 800dd04:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd06:	19bc      	adds	r4, r7, r6
 800dd08:	197b      	adds	r3, r7, r5
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	0018      	movs	r0, r3
 800dd0e:	f000 f902 	bl	800df16 <USBD_Get_USB_Status>
 800dd12:	0003      	movs	r3, r0
 800dd14:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800dd16:	19bb      	adds	r3, r7, r6
 800dd18:	781b      	ldrb	r3, [r3, #0]
}
 800dd1a:	0018      	movs	r0, r3
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	b005      	add	sp, #20
 800dd20:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dd22 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b084      	sub	sp, #16
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
 800dd2a:	000a      	movs	r2, r1
 800dd2c:	1cfb      	adds	r3, r7, #3
 800dd2e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dd30:	687a      	ldr	r2, [r7, #4]
 800dd32:	23b0      	movs	r3, #176	@ 0xb0
 800dd34:	009b      	lsls	r3, r3, #2
 800dd36:	58d3      	ldr	r3, [r2, r3]
 800dd38:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dd3a:	1cfb      	adds	r3, r7, #3
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	b25b      	sxtb	r3, r3
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	da0c      	bge.n	800dd5e <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dd44:	1cfb      	adds	r3, r7, #3
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	227f      	movs	r2, #127	@ 0x7f
 800dd4a:	401a      	ands	r2, r3
 800dd4c:	68f9      	ldr	r1, [r7, #12]
 800dd4e:	0013      	movs	r3, r2
 800dd50:	009b      	lsls	r3, r3, #2
 800dd52:	189b      	adds	r3, r3, r2
 800dd54:	00db      	lsls	r3, r3, #3
 800dd56:	18cb      	adds	r3, r1, r3
 800dd58:	3312      	adds	r3, #18
 800dd5a:	781b      	ldrb	r3, [r3, #0]
 800dd5c:	e00d      	b.n	800dd7a <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dd5e:	1cfb      	adds	r3, r7, #3
 800dd60:	781b      	ldrb	r3, [r3, #0]
 800dd62:	227f      	movs	r2, #127	@ 0x7f
 800dd64:	401a      	ands	r2, r3
 800dd66:	68f8      	ldr	r0, [r7, #12]
 800dd68:	23a9      	movs	r3, #169	@ 0xa9
 800dd6a:	0059      	lsls	r1, r3, #1
 800dd6c:	0013      	movs	r3, r2
 800dd6e:	009b      	lsls	r3, r3, #2
 800dd70:	189b      	adds	r3, r3, r2
 800dd72:	00db      	lsls	r3, r3, #3
 800dd74:	18c3      	adds	r3, r0, r3
 800dd76:	185b      	adds	r3, r3, r1
 800dd78:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dd7a:	0018      	movs	r0, r3
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	b004      	add	sp, #16
 800dd80:	bd80      	pop	{r7, pc}

0800dd82 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dd82:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd84:	b085      	sub	sp, #20
 800dd86:	af00      	add	r7, sp, #0
 800dd88:	6078      	str	r0, [r7, #4]
 800dd8a:	000a      	movs	r2, r1
 800dd8c:	1cfb      	adds	r3, r7, #3
 800dd8e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd90:	210f      	movs	r1, #15
 800dd92:	187b      	adds	r3, r7, r1
 800dd94:	2200      	movs	r2, #0
 800dd96:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd98:	260e      	movs	r6, #14
 800dd9a:	19bb      	adds	r3, r7, r6
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dda0:	687a      	ldr	r2, [r7, #4]
 800dda2:	23b0      	movs	r3, #176	@ 0xb0
 800dda4:	009b      	lsls	r3, r3, #2
 800dda6:	58d2      	ldr	r2, [r2, r3]
 800dda8:	000d      	movs	r5, r1
 800ddaa:	187c      	adds	r4, r7, r1
 800ddac:	1cfb      	adds	r3, r7, #3
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	0019      	movs	r1, r3
 800ddb2:	0010      	movs	r0, r2
 800ddb4:	f7f6 fece 	bl	8004b54 <HAL_PCD_SetAddress>
 800ddb8:	0003      	movs	r3, r0
 800ddba:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddbc:	19bc      	adds	r4, r7, r6
 800ddbe:	197b      	adds	r3, r7, r5
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	0018      	movs	r0, r3
 800ddc4:	f000 f8a7 	bl	800df16 <USBD_Get_USB_Status>
 800ddc8:	0003      	movs	r3, r0
 800ddca:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ddcc:	19bb      	adds	r3, r7, r6
 800ddce:	781b      	ldrb	r3, [r3, #0]
}
 800ddd0:	0018      	movs	r0, r3
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	b005      	add	sp, #20
 800ddd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ddd8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ddd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddda:	b087      	sub	sp, #28
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	0008      	movs	r0, r1
 800dde2:	607a      	str	r2, [r7, #4]
 800dde4:	0019      	movs	r1, r3
 800dde6:	230b      	movs	r3, #11
 800dde8:	18fb      	adds	r3, r7, r3
 800ddea:	1c02      	adds	r2, r0, #0
 800ddec:	701a      	strb	r2, [r3, #0]
 800ddee:	2408      	movs	r4, #8
 800ddf0:	193b      	adds	r3, r7, r4
 800ddf2:	1c0a      	adds	r2, r1, #0
 800ddf4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddf6:	2117      	movs	r1, #23
 800ddf8:	187b      	adds	r3, r7, r1
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddfe:	2516      	movs	r5, #22
 800de00:	197b      	adds	r3, r7, r5
 800de02:	2200      	movs	r2, #0
 800de04:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800de06:	68fa      	ldr	r2, [r7, #12]
 800de08:	23b0      	movs	r3, #176	@ 0xb0
 800de0a:	009b      	lsls	r3, r3, #2
 800de0c:	58d0      	ldr	r0, [r2, r3]
 800de0e:	193b      	adds	r3, r7, r4
 800de10:	881d      	ldrh	r5, [r3, #0]
 800de12:	000e      	movs	r6, r1
 800de14:	187c      	adds	r4, r7, r1
 800de16:	687a      	ldr	r2, [r7, #4]
 800de18:	230b      	movs	r3, #11
 800de1a:	18fb      	adds	r3, r7, r3
 800de1c:	7819      	ldrb	r1, [r3, #0]
 800de1e:	002b      	movs	r3, r5
 800de20:	f7f6 ffd2 	bl	8004dc8 <HAL_PCD_EP_Transmit>
 800de24:	0003      	movs	r3, r0
 800de26:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de28:	2516      	movs	r5, #22
 800de2a:	197c      	adds	r4, r7, r5
 800de2c:	19bb      	adds	r3, r7, r6
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	0018      	movs	r0, r3
 800de32:	f000 f870 	bl	800df16 <USBD_Get_USB_Status>
 800de36:	0003      	movs	r3, r0
 800de38:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800de3a:	197b      	adds	r3, r7, r5
 800de3c:	781b      	ldrb	r3, [r3, #0]
}
 800de3e:	0018      	movs	r0, r3
 800de40:	46bd      	mov	sp, r7
 800de42:	b007      	add	sp, #28
 800de44:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800de46 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800de46:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de48:	b087      	sub	sp, #28
 800de4a:	af00      	add	r7, sp, #0
 800de4c:	60f8      	str	r0, [r7, #12]
 800de4e:	0008      	movs	r0, r1
 800de50:	607a      	str	r2, [r7, #4]
 800de52:	0019      	movs	r1, r3
 800de54:	230b      	movs	r3, #11
 800de56:	18fb      	adds	r3, r7, r3
 800de58:	1c02      	adds	r2, r0, #0
 800de5a:	701a      	strb	r2, [r3, #0]
 800de5c:	2408      	movs	r4, #8
 800de5e:	193b      	adds	r3, r7, r4
 800de60:	1c0a      	adds	r2, r1, #0
 800de62:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de64:	2117      	movs	r1, #23
 800de66:	187b      	adds	r3, r7, r1
 800de68:	2200      	movs	r2, #0
 800de6a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de6c:	2516      	movs	r5, #22
 800de6e:	197b      	adds	r3, r7, r5
 800de70:	2200      	movs	r2, #0
 800de72:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800de74:	68fa      	ldr	r2, [r7, #12]
 800de76:	23b0      	movs	r3, #176	@ 0xb0
 800de78:	009b      	lsls	r3, r3, #2
 800de7a:	58d0      	ldr	r0, [r2, r3]
 800de7c:	193b      	adds	r3, r7, r4
 800de7e:	881d      	ldrh	r5, [r3, #0]
 800de80:	000e      	movs	r6, r1
 800de82:	187c      	adds	r4, r7, r1
 800de84:	687a      	ldr	r2, [r7, #4]
 800de86:	230b      	movs	r3, #11
 800de88:	18fb      	adds	r3, r7, r3
 800de8a:	7819      	ldrb	r1, [r3, #0]
 800de8c:	002b      	movs	r3, r5
 800de8e:	f7f6 ff4b 	bl	8004d28 <HAL_PCD_EP_Receive>
 800de92:	0003      	movs	r3, r0
 800de94:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de96:	2516      	movs	r5, #22
 800de98:	197c      	adds	r4, r7, r5
 800de9a:	19bb      	adds	r3, r7, r6
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	0018      	movs	r0, r3
 800dea0:	f000 f839 	bl	800df16 <USBD_Get_USB_Status>
 800dea4:	0003      	movs	r3, r0
 800dea6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800dea8:	197b      	adds	r3, r7, r5
 800deaa:	781b      	ldrb	r3, [r3, #0]
}
 800deac:	0018      	movs	r0, r3
 800deae:	46bd      	mov	sp, r7
 800deb0:	b007      	add	sp, #28
 800deb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800deb4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	000a      	movs	r2, r1
 800debe:	1cfb      	adds	r3, r7, #3
 800dec0:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dec2:	687a      	ldr	r2, [r7, #4]
 800dec4:	23b0      	movs	r3, #176	@ 0xb0
 800dec6:	009b      	lsls	r3, r3, #2
 800dec8:	58d2      	ldr	r2, [r2, r3]
 800deca:	1cfb      	adds	r3, r7, #3
 800decc:	781b      	ldrb	r3, [r3, #0]
 800dece:	0019      	movs	r1, r3
 800ded0:	0010      	movs	r0, r2
 800ded2:	f7f6 ff60 	bl	8004d96 <HAL_PCD_EP_GetRxCount>
 800ded6:	0003      	movs	r3, r0
}
 800ded8:	0018      	movs	r0, r3
 800deda:	46bd      	mov	sp, r7
 800dedc:	b002      	add	sp, #8
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b082      	sub	sp, #8
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dee8:	4b02      	ldr	r3, [pc, #8]	@ (800def4 <USBD_static_malloc+0x14>)
}
 800deea:	0018      	movs	r0, r3
 800deec:	46bd      	mov	sp, r7
 800deee:	b002      	add	sp, #8
 800def0:	bd80      	pop	{r7, pc}
 800def2:	46c0      	nop			@ (mov r8, r8)
 800def4:	20001a24 	.word	0x20001a24

0800def8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b082      	sub	sp, #8
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]

}
 800df00:	46c0      	nop			@ (mov r8, r8)
 800df02:	46bd      	mov	sp, r7
 800df04:	b002      	add	sp, #8
 800df06:	bd80      	pop	{r7, pc}

0800df08 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800df0c:	f7f4 fdca 	bl	8002aa4 <SystemClock_Config>
}
 800df10:	46c0      	nop			@ (mov r8, r8)
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}

0800df16 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800df16:	b580      	push	{r7, lr}
 800df18:	b084      	sub	sp, #16
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	0002      	movs	r2, r0
 800df1e:	1dfb      	adds	r3, r7, #7
 800df20:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df22:	230f      	movs	r3, #15
 800df24:	18fb      	adds	r3, r7, r3
 800df26:	2200      	movs	r2, #0
 800df28:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800df2a:	1dfb      	adds	r3, r7, #7
 800df2c:	781b      	ldrb	r3, [r3, #0]
 800df2e:	2b03      	cmp	r3, #3
 800df30:	d017      	beq.n	800df62 <USBD_Get_USB_Status+0x4c>
 800df32:	dc1b      	bgt.n	800df6c <USBD_Get_USB_Status+0x56>
 800df34:	2b02      	cmp	r3, #2
 800df36:	d00f      	beq.n	800df58 <USBD_Get_USB_Status+0x42>
 800df38:	dc18      	bgt.n	800df6c <USBD_Get_USB_Status+0x56>
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d002      	beq.n	800df44 <USBD_Get_USB_Status+0x2e>
 800df3e:	2b01      	cmp	r3, #1
 800df40:	d005      	beq.n	800df4e <USBD_Get_USB_Status+0x38>
 800df42:	e013      	b.n	800df6c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800df44:	230f      	movs	r3, #15
 800df46:	18fb      	adds	r3, r7, r3
 800df48:	2200      	movs	r2, #0
 800df4a:	701a      	strb	r2, [r3, #0]
    break;
 800df4c:	e013      	b.n	800df76 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800df4e:	230f      	movs	r3, #15
 800df50:	18fb      	adds	r3, r7, r3
 800df52:	2202      	movs	r2, #2
 800df54:	701a      	strb	r2, [r3, #0]
    break;
 800df56:	e00e      	b.n	800df76 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800df58:	230f      	movs	r3, #15
 800df5a:	18fb      	adds	r3, r7, r3
 800df5c:	2201      	movs	r2, #1
 800df5e:	701a      	strb	r2, [r3, #0]
    break;
 800df60:	e009      	b.n	800df76 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800df62:	230f      	movs	r3, #15
 800df64:	18fb      	adds	r3, r7, r3
 800df66:	2202      	movs	r2, #2
 800df68:	701a      	strb	r2, [r3, #0]
    break;
 800df6a:	e004      	b.n	800df76 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800df6c:	230f      	movs	r3, #15
 800df6e:	18fb      	adds	r3, r7, r3
 800df70:	2202      	movs	r2, #2
 800df72:	701a      	strb	r2, [r3, #0]
    break;
 800df74:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800df76:	230f      	movs	r3, #15
 800df78:	18fb      	adds	r3, r7, r3
 800df7a:	781b      	ldrb	r3, [r3, #0]
}
 800df7c:	0018      	movs	r0, r3
 800df7e:	46bd      	mov	sp, r7
 800df80:	b004      	add	sp, #16
 800df82:	bd80      	pop	{r7, pc}

0800df84 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 800df84:	b5b0      	push	{r4, r5, r7, lr}
 800df86:	b086      	sub	sp, #24
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 800df8c:	2316      	movs	r3, #22
 800df8e:	18fb      	adds	r3, r7, r3
 800df90:	2200      	movs	r2, #0
 800df92:	801a      	strh	r2, [r3, #0]
    uint32 ldo_tune = 0;
 800df94:	2300      	movs	r3, #0
 800df96:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 800df98:	4ba0      	ldr	r3, [pc, #640]	@ (800e21c <dwt_initialise+0x298>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	2200      	movs	r2, #0
 800df9e:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 800dfa0:	4b9e      	ldr	r3, [pc, #632]	@ (800e21c <dwt_initialise+0x298>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 800dfa8:	4b9c      	ldr	r3, [pc, #624]	@ (800e21c <dwt_initialise+0x298>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2200      	movs	r2, #0
 800dfae:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 800dfb0:	4b9a      	ldr	r3, [pc, #616]	@ (800e21c <dwt_initialise+0x298>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	629a      	str	r2, [r3, #40]	@ 0x28
    pdw1000local->cbRxOk = NULL;
 800dfb8:	4b98      	ldr	r3, [pc, #608]	@ (800e21c <dwt_initialise+0x298>)
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	62da      	str	r2, [r3, #44]	@ 0x2c
    pdw1000local->cbRxTo = NULL;
 800dfc0:	4b96      	ldr	r3, [pc, #600]	@ (800e21c <dwt_initialise+0x298>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	631a      	str	r2, [r3, #48]	@ 0x30
    pdw1000local->cbRxErr = NULL;
 800dfc8:	4b94      	ldr	r3, [pc, #592]	@ (800e21c <dwt_initialise+0x298>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	2200      	movs	r2, #0
 800dfce:	635a      	str	r2, [r3, #52]	@ 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 800dfd0:	f000 f92c 	bl	800e22c <dwt_readdevid>
 800dfd4:	0003      	movs	r3, r0
 800dfd6:	4a92      	ldr	r2, [pc, #584]	@ (800e220 <dwt_initialise+0x29c>)
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d002      	beq.n	800dfe2 <dwt_initialise+0x5e>
    {
        return DWT_ERROR ;
 800dfdc:	2301      	movs	r3, #1
 800dfde:	425b      	negs	r3, r3
 800dfe0:	e118      	b.n	800e214 <dwt_initialise+0x290>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2202      	movs	r2, #2
 800dfe6:	4013      	ands	r3, r2
 800dfe8:	d101      	bne.n	800dfee <dwt_initialise+0x6a>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 800dfea:	f000 ffd1 	bl	800ef90 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2202      	movs	r2, #2
 800dff2:	4013      	ands	r3, r2
 800dff4:	d003      	beq.n	800dffe <dwt_initialise+0x7a>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	22f8      	movs	r2, #248	@ 0xf8
 800dffa:	4013      	ands	r3, r2
 800dffc:	d102      	bne.n	800e004 <dwt_initialise+0x80>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 800dffe:	2000      	movs	r0, #0
 800e000:	f000 fdb2 	bl	800eb68 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 800e004:	2204      	movs	r2, #4
 800e006:	2100      	movs	r1, #0
 800e008:	2024      	movs	r0, #36	@ 0x24
 800e00a:	f000 fc95 	bl	800e938 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2202      	movs	r2, #2
 800e012:	4013      	ands	r3, r2
 800e014:	d118      	bne.n	800e048 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 800e016:	2004      	movs	r0, #4
 800e018:	f000 fce8 	bl	800e9ec <_dwt_otpread>
 800e01c:	0003      	movs	r3, r0
 800e01e:	613b      	str	r3, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	22ff      	movs	r2, #255	@ 0xff
 800e024:	4013      	ands	r3, r2
 800e026:	d021      	beq.n	800e06c <dwt_initialise+0xe8>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 800e028:	2202      	movs	r2, #2
 800e02a:	2112      	movs	r1, #18
 800e02c:	202d      	movs	r0, #45	@ 0x2d
 800e02e:	f000 fc83 	bl	800e938 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 800e032:	4b7a      	ldr	r3, [pc, #488]	@ (800e21c <dwt_initialise+0x298>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	8ada      	ldrh	r2, [r3, #22]
 800e038:	4b78      	ldr	r3, [pc, #480]	@ (800e21c <dwt_initialise+0x298>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	2180      	movs	r1, #128	@ 0x80
 800e03e:	0149      	lsls	r1, r1, #5
 800e040:	430a      	orrs	r2, r1
 800e042:	b292      	uxth	r2, r2
 800e044:	82da      	strh	r2, [r3, #22]
 800e046:	e011      	b.n	800e06c <dwt_initialise+0xe8>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 800e048:	2130      	movs	r1, #48	@ 0x30
 800e04a:	2028      	movs	r0, #40	@ 0x28
 800e04c:	f000 fc16 	bl	800e87c <dwt_read32bitoffsetreg>
 800e050:	0003      	movs	r3, r0
 800e052:	4a74      	ldr	r2, [pc, #464]	@ (800e224 <dwt_initialise+0x2a0>)
 800e054:	4293      	cmp	r3, r2
 800e056:	d009      	beq.n	800e06c <dwt_initialise+0xe8>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 800e058:	4b70      	ldr	r3, [pc, #448]	@ (800e21c <dwt_initialise+0x298>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	8ada      	ldrh	r2, [r3, #22]
 800e05e:	4b6f      	ldr	r3, [pc, #444]	@ (800e21c <dwt_initialise+0x298>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	2180      	movs	r1, #128	@ 0x80
 800e064:	0149      	lsls	r1, r1, #5
 800e066:	430a      	orrs	r2, r1
 800e068:	b292      	uxth	r2, r2
 800e06a:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2202      	movs	r2, #2
 800e070:	4013      	ands	r3, r2
 800e072:	d007      	beq.n	800e084 <dwt_initialise+0x100>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2202      	movs	r2, #2
 800e078:	4013      	ands	r3, r2
 800e07a:	d013      	beq.n	800e0a4 <dwt_initialise+0x120>
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2208      	movs	r2, #8
 800e080:	4013      	ands	r3, r2
 800e082:	d00f      	beq.n	800e0a4 <dwt_initialise+0x120>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 800e084:	201e      	movs	r0, #30
 800e086:	f000 fcb1 	bl	800e9ec <_dwt_otpread>
 800e08a:	0002      	movs	r2, r0
 800e08c:	2116      	movs	r1, #22
 800e08e:	187b      	adds	r3, r7, r1
 800e090:	801a      	strh	r2, [r3, #0]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 800e092:	187b      	adds	r3, r7, r1
 800e094:	881b      	ldrh	r3, [r3, #0]
 800e096:	0a1b      	lsrs	r3, r3, #8
 800e098:	b29a      	uxth	r2, r3
 800e09a:	4b60      	ldr	r3, [pc, #384]	@ (800e21c <dwt_initialise+0x298>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	b2d2      	uxtb	r2, r2
 800e0a0:	72da      	strb	r2, [r3, #11]
 800e0a2:	e003      	b.n	800e0ac <dwt_initialise+0x128>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 800e0a4:	4b5d      	ldr	r3, [pc, #372]	@ (800e21c <dwt_initialise+0x298>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2202      	movs	r2, #2
 800e0b0:	4013      	ands	r3, r2
 800e0b2:	d10f      	bne.n	800e0d4 <dwt_initialise+0x150>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 800e0b4:	2116      	movs	r1, #22
 800e0b6:	187b      	adds	r3, r7, r1
 800e0b8:	881b      	ldrh	r3, [r3, #0]
 800e0ba:	221f      	movs	r2, #31
 800e0bc:	4013      	ands	r3, r2
 800e0be:	d102      	bne.n	800e0c6 <dwt_initialise+0x142>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 800e0c0:	187b      	adds	r3, r7, r1
 800e0c2:	2210      	movs	r2, #16
 800e0c4:	801a      	strh	r2, [r3, #0]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 800e0c6:	2316      	movs	r3, #22
 800e0c8:	18fb      	adds	r3, r7, r3
 800e0ca:	881b      	ldrh	r3, [r3, #0]
 800e0cc:	b2db      	uxtb	r3, r3
 800e0ce:	0018      	movs	r0, r3
 800e0d0:	f000 ff84 	bl	800efdc <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2210      	movs	r2, #16
 800e0d8:	4013      	ands	r3, r2
 800e0da:	d007      	beq.n	800e0ec <dwt_initialise+0x168>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 800e0dc:	4b4f      	ldr	r3, [pc, #316]	@ (800e21c <dwt_initialise+0x298>)
 800e0de:	681c      	ldr	r4, [r3, #0]
 800e0e0:	2006      	movs	r0, #6
 800e0e2:	f000 fc83 	bl	800e9ec <_dwt_otpread>
 800e0e6:	0003      	movs	r3, r0
 800e0e8:	6023      	str	r3, [r4, #0]
 800e0ea:	e003      	b.n	800e0f4 <dwt_initialise+0x170>
    }
    else
    {
        pdw1000local->partID = 0;
 800e0ec:	4b4b      	ldr	r3, [pc, #300]	@ (800e21c <dwt_initialise+0x298>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2220      	movs	r2, #32
 800e0f8:	4013      	ands	r3, r2
 800e0fa:	d007      	beq.n	800e10c <dwt_initialise+0x188>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 800e0fc:	4b47      	ldr	r3, [pc, #284]	@ (800e21c <dwt_initialise+0x298>)
 800e0fe:	681c      	ldr	r4, [r3, #0]
 800e100:	2007      	movs	r0, #7
 800e102:	f000 fc73 	bl	800e9ec <_dwt_otpread>
 800e106:	0003      	movs	r3, r0
 800e108:	6063      	str	r3, [r4, #4]
 800e10a:	e003      	b.n	800e114 <dwt_initialise+0x190>
    }
    else
    {
        pdw1000local->lotID = 0;
 800e10c:	4b43      	ldr	r3, [pc, #268]	@ (800e21c <dwt_initialise+0x298>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	2200      	movs	r2, #0
 800e112:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2240      	movs	r2, #64	@ 0x40
 800e118:	4013      	ands	r3, r2
 800e11a:	d008      	beq.n	800e12e <dwt_initialise+0x1aa>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 800e11c:	2008      	movs	r0, #8
 800e11e:	f000 fc65 	bl	800e9ec <_dwt_otpread>
 800e122:	0002      	movs	r2, r0
 800e124:	4b3d      	ldr	r3, [pc, #244]	@ (800e21c <dwt_initialise+0x298>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	b2d2      	uxtb	r2, r2
 800e12a:	721a      	strb	r2, [r3, #8]
 800e12c:	e003      	b.n	800e136 <dwt_initialise+0x1b2>
    }
    else
    {
        pdw1000local->vBatP = 0;
 800e12e:	4b3b      	ldr	r3, [pc, #236]	@ (800e21c <dwt_initialise+0x298>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	2200      	movs	r2, #0
 800e134:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2280      	movs	r2, #128	@ 0x80
 800e13a:	4013      	ands	r3, r2
 800e13c:	d008      	beq.n	800e150 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 800e13e:	2009      	movs	r0, #9
 800e140:	f000 fc54 	bl	800e9ec <_dwt_otpread>
 800e144:	0002      	movs	r2, r0
 800e146:	4b35      	ldr	r3, [pc, #212]	@ (800e21c <dwt_initialise+0x298>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	b2d2      	uxtb	r2, r2
 800e14c:	725a      	strb	r2, [r3, #9]
 800e14e:	e003      	b.n	800e158 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 800e150:	4b32      	ldr	r3, [pc, #200]	@ (800e21c <dwt_initialise+0x298>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	2200      	movs	r2, #0
 800e156:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2202      	movs	r2, #2
 800e15c:	4013      	ands	r3, r2
 800e15e:	d127      	bne.n	800e1b0 <dwt_initialise+0x22c>
    {
        if(DWT_LOADUCODE & config)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2201      	movs	r2, #1
 800e164:	4013      	ands	r3, r2
 800e166:	d00c      	beq.n	800e182 <dwt_initialise+0x1fe>
        {
            _dwt_loaducodefromrom();
 800e168:	f000 fc98 	bl	800ea9c <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 800e16c:	4b2b      	ldr	r3, [pc, #172]	@ (800e21c <dwt_initialise+0x298>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	8ada      	ldrh	r2, [r3, #22]
 800e172:	4b2a      	ldr	r3, [pc, #168]	@ (800e21c <dwt_initialise+0x298>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	2180      	movs	r1, #128	@ 0x80
 800e178:	0109      	lsls	r1, r1, #4
 800e17a:	430a      	orrs	r2, r1
 800e17c:	b292      	uxth	r2, r2
 800e17e:	82da      	strh	r2, [r3, #22]
 800e180:	e024      	b.n	800e1cc <dwt_initialise+0x248>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 800e182:	250e      	movs	r5, #14
 800e184:	197c      	adds	r4, r7, r5
 800e186:	2105      	movs	r1, #5
 800e188:	2036      	movs	r0, #54	@ 0x36
 800e18a:	f000 fb9e 	bl	800e8ca <dwt_read16bitoffsetreg>
 800e18e:	0003      	movs	r3, r0
 800e190:	8023      	strh	r3, [r4, #0]
            rega &= 0xFDFF ; // Clear LDERUN bit
 800e192:	0028      	movs	r0, r5
 800e194:	183b      	adds	r3, r7, r0
 800e196:	183a      	adds	r2, r7, r0
 800e198:	8812      	ldrh	r2, [r2, #0]
 800e19a:	4923      	ldr	r1, [pc, #140]	@ (800e228 <dwt_initialise+0x2a4>)
 800e19c:	400a      	ands	r2, r1
 800e19e:	801a      	strh	r2, [r3, #0]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 800e1a0:	183b      	adds	r3, r7, r0
 800e1a2:	881b      	ldrh	r3, [r3, #0]
 800e1a4:	001a      	movs	r2, r3
 800e1a6:	2105      	movs	r1, #5
 800e1a8:	2036      	movs	r0, #54	@ 0x36
 800e1aa:	f000 fbd8 	bl	800e95e <dwt_write16bitoffsetreg>
 800e1ae:	e00d      	b.n	800e1cc <dwt_initialise+0x248>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2204      	movs	r2, #4
 800e1b4:	4013      	ands	r3, r2
 800e1b6:	d109      	bne.n	800e1cc <dwt_initialise+0x248>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 800e1b8:	4b18      	ldr	r3, [pc, #96]	@ (800e21c <dwt_initialise+0x298>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	8ada      	ldrh	r2, [r3, #22]
 800e1be:	4b17      	ldr	r3, [pc, #92]	@ (800e21c <dwt_initialise+0x298>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	2180      	movs	r1, #128	@ 0x80
 800e1c4:	0109      	lsls	r1, r1, #4
 800e1c6:	430a      	orrs	r2, r1
 800e1c8:	b292      	uxth	r2, r2
 800e1ca:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800e1cc:	2001      	movs	r0, #1
 800e1ce:	f000 fccb 	bl	800eb68 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	210a      	movs	r1, #10
 800e1d6:	202c      	movs	r0, #44	@ 0x2c
 800e1d8:	f000 fbae 	bl	800e938 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 800e1dc:	4b0f      	ldr	r3, [pc, #60]	@ (800e21c <dwt_initialise+0x298>)
 800e1de:	681c      	ldr	r4, [r3, #0]
 800e1e0:	2100      	movs	r1, #0
 800e1e2:	2004      	movs	r0, #4
 800e1e4:	f000 fb4a 	bl	800e87c <dwt_read32bitoffsetreg>
 800e1e8:	0003      	movs	r3, r0
 800e1ea:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800e1ec:	4b0b      	ldr	r3, [pc, #44]	@ (800e21c <dwt_initialise+0x298>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	691b      	ldr	r3, [r3, #16]
 800e1f2:	0c1b      	lsrs	r3, r3, #16
 800e1f4:	b2da      	uxtb	r2, r3
 800e1f6:	4b09      	ldr	r3, [pc, #36]	@ (800e21c <dwt_initialise+0x298>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	2103      	movs	r1, #3
 800e1fc:	400a      	ands	r2, r1
 800e1fe:	b2d2      	uxtb	r2, r2
 800e200:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 800e202:	4b06      	ldr	r3, [pc, #24]	@ (800e21c <dwt_initialise+0x298>)
 800e204:	681c      	ldr	r4, [r3, #0]
 800e206:	2100      	movs	r1, #0
 800e208:	2008      	movs	r0, #8
 800e20a:	f000 fb37 	bl	800e87c <dwt_read32bitoffsetreg>
 800e20e:	0003      	movs	r3, r0
 800e210:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 800e212:	2300      	movs	r3, #0

} // end dwt_initialise()
 800e214:	0018      	movs	r0, r3
 800e216:	46bd      	mov	sp, r7
 800e218:	b006      	add	sp, #24
 800e21a:	bdb0      	pop	{r4, r5, r7, pc}
 800e21c:	200001dc 	.word	0x200001dc
 800e220:	deca0130 	.word	0xdeca0130
 800e224:	88888888 	.word	0x88888888
 800e228:	fffffdff 	.word	0xfffffdff

0800e22c <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 800e230:	2100      	movs	r1, #0
 800e232:	2000      	movs	r0, #0
 800e234:	f000 fb22 	bl	800e87c <dwt_read32bitoffsetreg>
 800e238:	0003      	movs	r3, r0
}
 800e23a:	0018      	movs	r0, r3
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}

0800e240 <dwt_configuretxrf>:
 * output parameters
 *
 * no return value
 */
void dwt_configuretxrf(dwt_txconfig_t *config)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b082      	sub	sp, #8
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]

    // Configure RF TX PG_DELAY
    dwt_write8bitoffsetreg(TX_CAL_ID, TC_PGDELAY_OFFSET, config->PGdly);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	001a      	movs	r2, r3
 800e24e:	210b      	movs	r1, #11
 800e250:	202a      	movs	r0, #42	@ 0x2a
 800e252:	f000 fb71 	bl	800e938 <dwt_write8bitoffsetreg>

    // Configure TX power
    dwt_write32bitreg(TX_POWER_ID, config->power);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	685b      	ldr	r3, [r3, #4]
 800e25a:	001a      	movs	r2, r3
 800e25c:	2100      	movs	r1, #0
 800e25e:	201e      	movs	r0, #30
 800e260:	f000 fb9d 	bl	800e99e <dwt_write32bitoffsetreg>

}
 800e264:	46c0      	nop			@ (mov r8, r8)
 800e266:	46bd      	mov	sp, r7
 800e268:	b002      	add	sp, #8
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 800e26c:	b5b0      	push	{r4, r5, r7, lr}
 800e26e:	b086      	sub	sp, #24
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 800e274:	2317      	movs	r3, #23
 800e276:	18fb      	adds	r3, r7, r3
 800e278:	2200      	movs	r2, #0
 800e27a:	701a      	strb	r2, [r3, #0]
    uint8 useDWnsSFD = 0;
 800e27c:	2316      	movs	r3, #22
 800e27e:	18fb      	adds	r3, r7, r3
 800e280:	2200      	movs	r2, #0
 800e282:	701a      	strb	r2, [r3, #0]
    uint8 chan = config->chan ;
 800e284:	2013      	movs	r0, #19
 800e286:	183b      	adds	r3, r7, r0
 800e288:	687a      	ldr	r2, [r7, #4]
 800e28a:	7812      	ldrb	r2, [r2, #0]
 800e28c:	701a      	strb	r2, [r3, #0]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	795b      	ldrb	r3, [r3, #5]
 800e292:	0019      	movs	r1, r3
 800e294:	2314      	movs	r3, #20
 800e296:	18fb      	adds	r3, r7, r3
 800e298:	4ab6      	ldr	r2, [pc, #728]	@ (800e574 <dwt_configure+0x308>)
 800e29a:	0049      	lsls	r1, r1, #1
 800e29c:	5a8a      	ldrh	r2, [r1, r2]
 800e29e:	801a      	strh	r2, [r3, #0]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	785a      	ldrb	r2, [r3, #1]
 800e2a4:	2312      	movs	r3, #18
 800e2a6:	18fb      	adds	r3, r7, r3
 800e2a8:	3a01      	subs	r2, #1
 800e2aa:	701a      	strb	r2, [r3, #0]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 800e2ac:	183b      	adds	r3, r7, r0
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	2b04      	cmp	r3, #4
 800e2b2:	d003      	beq.n	800e2bc <dwt_configure+0x50>
 800e2b4:	183b      	adds	r3, r7, r0
 800e2b6:	781b      	ldrb	r3, [r3, #0]
 800e2b8:	2b07      	cmp	r3, #7
 800e2ba:	d101      	bne.n	800e2c0 <dwt_configure+0x54>
 800e2bc:	2201      	movs	r2, #1
 800e2be:	e000      	b.n	800e2c2 <dwt_configure+0x56>
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	2311      	movs	r3, #17
 800e2c4:	18fb      	adds	r3, r7, r3
 800e2c6:	701a      	strb	r2, [r3, #0]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	79db      	ldrb	r3, [r3, #7]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d10f      	bne.n	800e2f0 <dwt_configure+0x84>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 800e2d0:	4ba9      	ldr	r3, [pc, #676]	@ (800e578 <dwt_configure+0x30c>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	691a      	ldr	r2, [r3, #16]
 800e2d6:	4ba8      	ldr	r3, [pc, #672]	@ (800e578 <dwt_configure+0x30c>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	2180      	movs	r1, #128	@ 0x80
 800e2dc:	03c9      	lsls	r1, r1, #15
 800e2de:	430a      	orrs	r2, r1
 800e2e0:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 800e2e2:	2214      	movs	r2, #20
 800e2e4:	18bb      	adds	r3, r7, r2
 800e2e6:	18ba      	adds	r2, r7, r2
 800e2e8:	8812      	ldrh	r2, [r2, #0]
 800e2ea:	08d2      	lsrs	r2, r2, #3
 800e2ec:	801a      	strh	r2, [r3, #0]
 800e2ee:	e007      	b.n	800e300 <dwt_configure+0x94>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 800e2f0:	4ba1      	ldr	r3, [pc, #644]	@ (800e578 <dwt_configure+0x30c>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	691a      	ldr	r2, [r3, #16]
 800e2f6:	4ba0      	ldr	r3, [pc, #640]	@ (800e578 <dwt_configure+0x30c>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	49a0      	ldr	r1, [pc, #640]	@ (800e57c <dwt_configure+0x310>)
 800e2fc:	400a      	ands	r2, r1
 800e2fe:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 800e300:	4b9d      	ldr	r3, [pc, #628]	@ (800e578 <dwt_configure+0x30c>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	687a      	ldr	r2, [r7, #4]
 800e306:	7a12      	ldrb	r2, [r2, #8]
 800e308:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 800e30a:	4b9b      	ldr	r3, [pc, #620]	@ (800e578 <dwt_configure+0x30c>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	691a      	ldr	r2, [r3, #16]
 800e310:	4b99      	ldr	r3, [pc, #612]	@ (800e578 <dwt_configure+0x30c>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	499a      	ldr	r1, [pc, #616]	@ (800e580 <dwt_configure+0x314>)
 800e316:	400a      	ands	r2, r1
 800e318:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 800e31a:	4b97      	ldr	r3, [pc, #604]	@ (800e578 <dwt_configure+0x30c>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	6919      	ldr	r1, [r3, #16]
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	7a1b      	ldrb	r3, [r3, #8]
 800e324:	041a      	lsls	r2, r3, #16
 800e326:	23c0      	movs	r3, #192	@ 0xc0
 800e328:	029b      	lsls	r3, r3, #10
 800e32a:	401a      	ands	r2, r3
 800e32c:	4b92      	ldr	r3, [pc, #584]	@ (800e578 <dwt_configure+0x30c>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	430a      	orrs	r2, r1
 800e332:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 800e334:	4b90      	ldr	r3, [pc, #576]	@ (800e578 <dwt_configure+0x30c>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	691b      	ldr	r3, [r3, #16]
 800e33a:	001a      	movs	r2, r3
 800e33c:	2100      	movs	r1, #0
 800e33e:	2004      	movs	r0, #4
 800e340:	f000 fb2d 	bl	800e99e <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 800e344:	2314      	movs	r3, #20
 800e346:	18fb      	adds	r3, r7, r3
 800e348:	881b      	ldrh	r3, [r3, #0]
 800e34a:	498e      	ldr	r1, [pc, #568]	@ (800e584 <dwt_configure+0x318>)
 800e34c:	001a      	movs	r2, r3
 800e34e:	202e      	movs	r0, #46	@ 0x2e
 800e350:	f000 fb05 	bl	800e95e <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 800e354:	2512      	movs	r5, #18
 800e356:	197b      	adds	r3, r7, r5
 800e358:	781b      	ldrb	r3, [r3, #0]
 800e35a:	0018      	movs	r0, r3
 800e35c:	f000 fb78 	bl	800ea50 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 800e360:	2413      	movs	r4, #19
 800e362:	193b      	adds	r3, r7, r4
 800e364:	781b      	ldrb	r3, [r3, #0]
 800e366:	4a88      	ldr	r2, [pc, #544]	@ (800e588 <dwt_configure+0x31c>)
 800e368:	5cd3      	ldrb	r3, [r2, r3]
 800e36a:	001a      	movs	r2, r3
 800e36c:	4b87      	ldr	r3, [pc, #540]	@ (800e58c <dwt_configure+0x320>)
 800e36e:	0092      	lsls	r2, r2, #2
 800e370:	58d3      	ldr	r3, [r2, r3]
 800e372:	001a      	movs	r2, r3
 800e374:	2107      	movs	r1, #7
 800e376:	202b      	movs	r0, #43	@ 0x2b
 800e378:	f000 fb11 	bl	800e99e <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 800e37c:	193b      	adds	r3, r7, r4
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	4a81      	ldr	r2, [pc, #516]	@ (800e588 <dwt_configure+0x31c>)
 800e382:	5cd3      	ldrb	r3, [r2, r3]
 800e384:	001a      	movs	r2, r3
 800e386:	4b82      	ldr	r3, [pc, #520]	@ (800e590 <dwt_configure+0x324>)
 800e388:	5c9b      	ldrb	r3, [r3, r2]
 800e38a:	001a      	movs	r2, r3
 800e38c:	210b      	movs	r1, #11
 800e38e:	202b      	movs	r0, #43	@ 0x2b
 800e390:	f000 fad2 	bl	800e938 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 800e394:	2311      	movs	r3, #17
 800e396:	18fb      	adds	r3, r7, r3
 800e398:	781b      	ldrb	r3, [r3, #0]
 800e39a:	4a7e      	ldr	r2, [pc, #504]	@ (800e594 <dwt_configure+0x328>)
 800e39c:	5cd3      	ldrb	r3, [r2, r3]
 800e39e:	001a      	movs	r2, r3
 800e3a0:	210b      	movs	r1, #11
 800e3a2:	2028      	movs	r0, #40	@ 0x28
 800e3a4:	f000 fac8 	bl	800e938 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 800e3a8:	193b      	adds	r3, r7, r4
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	4a76      	ldr	r2, [pc, #472]	@ (800e588 <dwt_configure+0x31c>)
 800e3ae:	5cd3      	ldrb	r3, [r2, r3]
 800e3b0:	001a      	movs	r2, r3
 800e3b2:	4b79      	ldr	r3, [pc, #484]	@ (800e598 <dwt_configure+0x32c>)
 800e3b4:	0092      	lsls	r2, r2, #2
 800e3b6:	58d3      	ldr	r3, [r2, r3]
 800e3b8:	001a      	movs	r2, r3
 800e3ba:	210c      	movs	r1, #12
 800e3bc:	2028      	movs	r0, #40	@ 0x28
 800e3be:	f000 faee 	bl	800e99e <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	79db      	ldrb	r3, [r3, #7]
 800e3c6:	001a      	movs	r2, r3
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	799b      	ldrb	r3, [r3, #6]
 800e3cc:	0019      	movs	r1, r3
 800e3ce:	4b73      	ldr	r3, [pc, #460]	@ (800e59c <dwt_configure+0x330>)
 800e3d0:	0052      	lsls	r2, r2, #1
 800e3d2:	1852      	adds	r2, r2, r1
 800e3d4:	0052      	lsls	r2, r2, #1
 800e3d6:	5ad3      	ldrh	r3, [r2, r3]
 800e3d8:	001a      	movs	r2, r3
 800e3da:	2102      	movs	r1, #2
 800e3dc:	2027      	movs	r0, #39	@ 0x27
 800e3de:	f000 fabe 	bl	800e95e <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 800e3e2:	197b      	adds	r3, r7, r5
 800e3e4:	781a      	ldrb	r2, [r3, #0]
 800e3e6:	4b6e      	ldr	r3, [pc, #440]	@ (800e5a0 <dwt_configure+0x334>)
 800e3e8:	0052      	lsls	r2, r2, #1
 800e3ea:	5ad3      	ldrh	r3, [r2, r3]
 800e3ec:	001a      	movs	r2, r3
 800e3ee:	2104      	movs	r1, #4
 800e3f0:	2027      	movs	r0, #39	@ 0x27
 800e3f2:	f000 fab4 	bl	800e95e <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	79db      	ldrb	r3, [r3, #7]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d105      	bne.n	800e40a <dwt_configure+0x19e>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 800e3fe:	2264      	movs	r2, #100	@ 0x64
 800e400:	2106      	movs	r1, #6
 800e402:	2027      	movs	r0, #39	@ 0x27
 800e404:	f000 faab 	bl	800e95e <dwt_write16bitoffsetreg>
 800e408:	e018      	b.n	800e43c <dwt_configure+0x1d0>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	789b      	ldrb	r3, [r3, #2]
 800e40e:	2b04      	cmp	r3, #4
 800e410:	d10a      	bne.n	800e428 <dwt_configure+0x1bc>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 800e412:	2210      	movs	r2, #16
 800e414:	2106      	movs	r1, #6
 800e416:	2027      	movs	r0, #39	@ 0x27
 800e418:	f000 faa1 	bl	800e95e <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 800e41c:	2210      	movs	r2, #16
 800e41e:	2126      	movs	r1, #38	@ 0x26
 800e420:	2027      	movs	r0, #39	@ 0x27
 800e422:	f000 fa89 	bl	800e938 <dwt_write8bitoffsetreg>
 800e426:	e009      	b.n	800e43c <dwt_configure+0x1d0>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 800e428:	2220      	movs	r2, #32
 800e42a:	2106      	movs	r1, #6
 800e42c:	2027      	movs	r0, #39	@ 0x27
 800e42e:	f000 fa96 	bl	800e95e <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 800e432:	2228      	movs	r2, #40	@ 0x28
 800e434:	2126      	movs	r1, #38	@ 0x26
 800e436:	2027      	movs	r0, #39	@ 0x27
 800e438:	f000 fa7e 	bl	800e938 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 800e43c:	2312      	movs	r3, #18
 800e43e:	18fb      	adds	r3, r7, r3
 800e440:	781a      	ldrb	r2, [r3, #0]
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	78db      	ldrb	r3, [r3, #3]
 800e446:	0019      	movs	r1, r3
 800e448:	4b56      	ldr	r3, [pc, #344]	@ (800e5a4 <dwt_configure+0x338>)
 800e44a:	0092      	lsls	r2, r2, #2
 800e44c:	1852      	adds	r2, r2, r1
 800e44e:	0092      	lsls	r2, r2, #2
 800e450:	58d3      	ldr	r3, [r2, r3]
 800e452:	001a      	movs	r2, r3
 800e454:	2108      	movs	r1, #8
 800e456:	2027      	movs	r0, #39	@ 0x27
 800e458:	f000 faa1 	bl	800e99e <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	895b      	ldrh	r3, [r3, #10]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d102      	bne.n	800e46a <dwt_configure+0x1fe>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	4a50      	ldr	r2, [pc, #320]	@ (800e5a8 <dwt_configure+0x33c>)
 800e468:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	895b      	ldrh	r3, [r3, #10]
 800e46e:	001a      	movs	r2, r3
 800e470:	2120      	movs	r1, #32
 800e472:	2027      	movs	r0, #39	@ 0x27
 800e474:	f000 fa73 	bl	800e95e <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 800e478:	4b4c      	ldr	r3, [pc, #304]	@ (800e5ac <dwt_configure+0x340>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	001a      	movs	r2, r3
 800e47e:	210c      	movs	r1, #12
 800e480:	2023      	movs	r0, #35	@ 0x23
 800e482:	f000 fa8c 	bl	800e99e <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 800e486:	2312      	movs	r3, #18
 800e488:	18fb      	adds	r3, r7, r3
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	4a47      	ldr	r2, [pc, #284]	@ (800e5ac <dwt_configure+0x340>)
 800e48e:	005b      	lsls	r3, r3, #1
 800e490:	18d3      	adds	r3, r2, r3
 800e492:	3304      	adds	r3, #4
 800e494:	881b      	ldrh	r3, [r3, #0]
 800e496:	001a      	movs	r2, r3
 800e498:	2104      	movs	r1, #4
 800e49a:	2023      	movs	r0, #35	@ 0x23
 800e49c:	f000 fa5f 	bl	800e95e <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	799b      	ldrb	r3, [r3, #6]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d011      	beq.n	800e4cc <dwt_configure+0x260>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	79db      	ldrb	r3, [r3, #7]
 800e4ac:	001a      	movs	r2, r3
 800e4ae:	4b40      	ldr	r3, [pc, #256]	@ (800e5b0 <dwt_configure+0x344>)
 800e4b0:	5c9b      	ldrb	r3, [r3, r2]
 800e4b2:	001a      	movs	r2, r3
 800e4b4:	2100      	movs	r1, #0
 800e4b6:	2021      	movs	r0, #33	@ 0x21
 800e4b8:	f000 fa3e 	bl	800e938 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 800e4bc:	2317      	movs	r3, #23
 800e4be:	18fb      	adds	r3, r7, r3
 800e4c0:	2203      	movs	r2, #3
 800e4c2:	701a      	strb	r2, [r3, #0]
        useDWnsSFD = 1 ;
 800e4c4:	2316      	movs	r3, #22
 800e4c6:	18fb      	adds	r3, r7, r3
 800e4c8:	2201      	movs	r2, #1
 800e4ca:	701a      	strb	r2, [r3, #0]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800e4cc:	2113      	movs	r1, #19
 800e4ce:	187b      	adds	r3, r7, r1
 800e4d0:	781b      	ldrb	r3, [r3, #0]
 800e4d2:	220f      	movs	r2, #15
 800e4d4:	401a      	ands	r2, r3
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800e4d6:	187b      	adds	r3, r7, r1
 800e4d8:	781b      	ldrb	r3, [r3, #0]
 800e4da:	011b      	lsls	r3, r3, #4
 800e4dc:	21ff      	movs	r1, #255	@ 0xff
 800e4de:	400b      	ands	r3, r1
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800e4e0:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	785b      	ldrb	r3, [r3, #1]
 800e4e6:	0499      	lsls	r1, r3, #18
 800e4e8:	23c0      	movs	r3, #192	@ 0xc0
 800e4ea:	031b      	lsls	r3, r3, #12
 800e4ec:	400b      	ands	r3, r1
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800e4ee:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 800e4f0:	2317      	movs	r3, #23
 800e4f2:	18fb      	adds	r3, r7, r3
 800e4f4:	781b      	ldrb	r3, [r3, #0]
 800e4f6:	0519      	lsls	r1, r3, #20
 800e4f8:	23c0      	movs	r3, #192	@ 0xc0
 800e4fa:	039b      	lsls	r3, r3, #14
 800e4fc:	400b      	ands	r3, r1
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 800e4fe:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800e500:	2316      	movs	r3, #22
 800e502:	18fb      	adds	r3, r7, r3
 800e504:	781b      	ldrb	r3, [r3, #0]
 800e506:	0459      	lsls	r1, r3, #17
 800e508:	2380      	movs	r3, #128	@ 0x80
 800e50a:	029b      	lsls	r3, r3, #10
 800e50c:	400b      	ands	r3, r1
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 800e50e:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	791b      	ldrb	r3, [r3, #4]
 800e514:	0599      	lsls	r1, r3, #22
 800e516:	23f8      	movs	r3, #248	@ 0xf8
 800e518:	04db      	lsls	r3, r3, #19
 800e51a:	400b      	ands	r3, r1
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800e51c:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	795b      	ldrb	r3, [r3, #5]
 800e522:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800e524:	4313      	orrs	r3, r2
 800e526:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	001a      	movs	r2, r3
 800e52c:	2100      	movs	r1, #0
 800e52e:	201f      	movs	r0, #31
 800e530:	f000 fa35 	bl	800e99e <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	789a      	ldrb	r2, [r3, #2]
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	785b      	ldrb	r3, [r3, #1]
 800e53c:	4313      	orrs	r3, r2
 800e53e:	b2db      	uxtb	r3, r3
 800e540:	0419      	lsls	r1, r3, #16
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	79db      	ldrb	r3, [r3, #7]
 800e546:	035a      	lsls	r2, r3, #13
 800e548:	4b0b      	ldr	r3, [pc, #44]	@ (800e578 <dwt_configure+0x30c>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	430a      	orrs	r2, r1
 800e54e:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 800e550:	4b09      	ldr	r3, [pc, #36]	@ (800e578 <dwt_configure+0x30c>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	68db      	ldr	r3, [r3, #12]
 800e556:	001a      	movs	r2, r3
 800e558:	2100      	movs	r1, #0
 800e55a:	2008      	movs	r0, #8
 800e55c:	f000 fa1f 	bl	800e99e <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 800e560:	2242      	movs	r2, #66	@ 0x42
 800e562:	2100      	movs	r1, #0
 800e564:	200d      	movs	r0, #13
 800e566:	f000 f9e7 	bl	800e938 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 800e56a:	46c0      	nop			@ (mov r8, r8)
 800e56c:	46bd      	mov	sp, r7
 800e56e:	b006      	add	sp, #24
 800e570:	bdb0      	pop	{r4, r5, r7, pc}
 800e572:	46c0      	nop			@ (mov r8, r8)
 800e574:	080124a4 	.word	0x080124a4
 800e578:	200001dc 	.word	0x200001dc
 800e57c:	ffbfffff 	.word	0xffbfffff
 800e580:	fffcffff 	.word	0xfffcffff
 800e584:	00002804 	.word	0x00002804
 800e588:	08012424 	.word	0x08012424
 800e58c:	08012444 	.word	0x08012444
 800e590:	0801245c 	.word	0x0801245c
 800e594:	08012464 	.word	0x08012464
 800e598:	0801242c 	.word	0x0801242c
 800e59c:	08012474 	.word	0x08012474
 800e5a0:	08012480 	.word	0x08012480
 800e5a4:	08012484 	.word	0x08012484
 800e5a8:	00001041 	.word	0x00001041
 800e5ac:	08012468 	.word	0x08012468
 800e5b0:	08012470 	.word	0x08012470

0800e5b4 <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b082      	sub	sp, #8
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	0002      	movs	r2, r0
 800e5bc:	1dbb      	adds	r3, r7, #6
 800e5be:	801a      	strh	r2, [r3, #0]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 800e5c0:	1dbb      	adds	r3, r7, #6
 800e5c2:	881b      	ldrh	r3, [r3, #0]
 800e5c4:	4904      	ldr	r1, [pc, #16]	@ (800e5d8 <dwt_setrxantennadelay+0x24>)
 800e5c6:	001a      	movs	r2, r3
 800e5c8:	202e      	movs	r0, #46	@ 0x2e
 800e5ca:	f000 f9c8 	bl	800e95e <dwt_write16bitoffsetreg>
}
 800e5ce:	46c0      	nop			@ (mov r8, r8)
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	b002      	add	sp, #8
 800e5d4:	bd80      	pop	{r7, pc}
 800e5d6:	46c0      	nop			@ (mov r8, r8)
 800e5d8:	00001804 	.word	0x00001804

0800e5dc <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	0002      	movs	r2, r0
 800e5e4:	1dbb      	adds	r3, r7, #6
 800e5e6:	801a      	strh	r2, [r3, #0]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 800e5e8:	1dbb      	adds	r3, r7, #6
 800e5ea:	881b      	ldrh	r3, [r3, #0]
 800e5ec:	001a      	movs	r2, r3
 800e5ee:	2100      	movs	r1, #0
 800e5f0:	2018      	movs	r0, #24
 800e5f2:	f000 f9b4 	bl	800e95e <dwt_write16bitoffsetreg>
}
 800e5f6:	46c0      	nop			@ (mov r8, r8)
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	b002      	add	sp, #8
 800e5fc:	bd80      	pop	{r7, pc}

0800e5fe <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 800e5fe:	b580      	push	{r7, lr}
 800e600:	b082      	sub	sp, #8
 800e602:	af00      	add	r7, sp, #0
 800e604:	6039      	str	r1, [r7, #0]
 800e606:	0011      	movs	r1, r2
 800e608:	1dbb      	adds	r3, r7, #6
 800e60a:	1c02      	adds	r2, r0, #0
 800e60c:	801a      	strh	r2, [r3, #0]
 800e60e:	1d3b      	adds	r3, r7, #4
 800e610:	1c0a      	adds	r2, r1, #0
 800e612:	801a      	strh	r2, [r3, #0]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 800e614:	1d3b      	adds	r3, r7, #4
 800e616:	881a      	ldrh	r2, [r3, #0]
 800e618:	1dbb      	adds	r3, r7, #6
 800e61a:	881b      	ldrh	r3, [r3, #0]
 800e61c:	18d2      	adds	r2, r2, r3
 800e61e:	2380      	movs	r3, #128	@ 0x80
 800e620:	00db      	lsls	r3, r3, #3
 800e622:	429a      	cmp	r2, r3
 800e624:	dc0d      	bgt.n	800e642 <dwt_writetxdata+0x44>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 800e626:	1dbb      	adds	r3, r7, #6
 800e628:	881b      	ldrh	r3, [r3, #0]
 800e62a:	3b02      	subs	r3, #2
 800e62c:	0018      	movs	r0, r3
 800e62e:	683a      	ldr	r2, [r7, #0]
 800e630:	1d3b      	adds	r3, r7, #4
 800e632:	8819      	ldrh	r1, [r3, #0]
 800e634:	0013      	movs	r3, r2
 800e636:	0002      	movs	r2, r0
 800e638:	2009      	movs	r0, #9
 800e63a:	f000 f862 	bl	800e702 <dwt_writetodevice>
        return DWT_SUCCESS;
 800e63e:	2300      	movs	r3, #0
 800e640:	e001      	b.n	800e646 <dwt_writetxdata+0x48>
    }
    else
    {
        return DWT_ERROR;
 800e642:	2301      	movs	r3, #1
 800e644:	425b      	negs	r3, r3
    }
} // end dwt_writetxdata()
 800e646:	0018      	movs	r0, r3
 800e648:	46bd      	mov	sp, r7
 800e64a:	b002      	add	sp, #8
 800e64c:	bd80      	pop	{r7, pc}
	...

0800e650 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b084      	sub	sp, #16
 800e654:	af00      	add	r7, sp, #0
 800e656:	603a      	str	r2, [r7, #0]
 800e658:	1dbb      	adds	r3, r7, #6
 800e65a:	1c02      	adds	r2, r0, #0
 800e65c:	801a      	strh	r2, [r3, #0]
 800e65e:	1d3b      	adds	r3, r7, #4
 800e660:	1c0a      	adds	r2, r1, #0
 800e662:	801a      	strh	r2, [r3, #0]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 800e664:	4b0b      	ldr	r3, [pc, #44]	@ (800e694 <dwt_writetxfctrl+0x44>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	68da      	ldr	r2, [r3, #12]
 800e66a:	1dbb      	adds	r3, r7, #6
 800e66c:	881b      	ldrh	r3, [r3, #0]
 800e66e:	431a      	orrs	r2, r3
 800e670:	1d3b      	adds	r3, r7, #4
 800e672:	881b      	ldrh	r3, [r3, #0]
 800e674:	059b      	lsls	r3, r3, #22
 800e676:	431a      	orrs	r2, r3
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	03db      	lsls	r3, r3, #15
 800e67c:	4313      	orrs	r3, r2
 800e67e:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	001a      	movs	r2, r3
 800e684:	2100      	movs	r1, #0
 800e686:	2008      	movs	r0, #8
 800e688:	f000 f989 	bl	800e99e <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 800e68c:	46c0      	nop			@ (mov r8, r8)
 800e68e:	46bd      	mov	sp, r7
 800e690:	b004      	add	sp, #16
 800e692:	bd80      	pop	{r7, pc}
 800e694:	200001dc 	.word	0x200001dc

0800e698 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b082      	sub	sp, #8
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
 800e6a0:	0008      	movs	r0, r1
 800e6a2:	0011      	movs	r1, r2
 800e6a4:	1cbb      	adds	r3, r7, #2
 800e6a6:	1c02      	adds	r2, r0, #0
 800e6a8:	801a      	strh	r2, [r3, #0]
 800e6aa:	003b      	movs	r3, r7
 800e6ac:	1c0a      	adds	r2, r1, #0
 800e6ae:	801a      	strh	r2, [r3, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 800e6b0:	1cbb      	adds	r3, r7, #2
 800e6b2:	881a      	ldrh	r2, [r3, #0]
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	003b      	movs	r3, r7
 800e6b8:	8819      	ldrh	r1, [r3, #0]
 800e6ba:	0003      	movs	r3, r0
 800e6bc:	2011      	movs	r0, #17
 800e6be:	f000 f881 	bl	800e7c4 <dwt_readfromdevice>
}
 800e6c2:	46c0      	nop			@ (mov r8, r8)
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	b002      	add	sp, #8
 800e6c8:	bd80      	pop	{r7, pc}

0800e6ca <dwt_readtxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readtxtimestamp(uint8 * timestamp)
{
 800e6ca:	b580      	push	{r7, lr}
 800e6cc:	b082      	sub	sp, #8
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN, timestamp) ; // Read bytes directly into buffer
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2205      	movs	r2, #5
 800e6d6:	2100      	movs	r1, #0
 800e6d8:	2017      	movs	r0, #23
 800e6da:	f000 f873 	bl	800e7c4 <dwt_readfromdevice>
}
 800e6de:	46c0      	nop			@ (mov r8, r8)
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	b002      	add	sp, #8
 800e6e4:	bd80      	pop	{r7, pc}

0800e6e6 <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 * timestamp)
{
 800e6e6:	b580      	push	{r7, lr}
 800e6e8:	b082      	sub	sp, #8
 800e6ea:	af00      	add	r7, sp, #0
 800e6ec:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2205      	movs	r2, #5
 800e6f2:	2100      	movs	r1, #0
 800e6f4:	2015      	movs	r0, #21
 800e6f6:	f000 f865 	bl	800e7c4 <dwt_readfromdevice>
}
 800e6fa:	46c0      	nop			@ (mov r8, r8)
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	b002      	add	sp, #8
 800e700:	bd80      	pop	{r7, pc}

0800e702 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 800e702:	b590      	push	{r4, r7, lr}
 800e704:	b087      	sub	sp, #28
 800e706:	af00      	add	r7, sp, #0
 800e708:	60ba      	str	r2, [r7, #8]
 800e70a:	607b      	str	r3, [r7, #4]
 800e70c:	240e      	movs	r4, #14
 800e70e:	193b      	adds	r3, r7, r4
 800e710:	1c02      	adds	r2, r0, #0
 800e712:	801a      	strh	r2, [r3, #0]
 800e714:	200c      	movs	r0, #12
 800e716:	183b      	adds	r3, r7, r0
 800e718:	1c0a      	adds	r2, r1, #0
 800e71a:	801a      	strh	r2, [r3, #0]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 800e71c:	2300      	movs	r3, #0
 800e71e:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 800e720:	183b      	adds	r3, r7, r0
 800e722:	881b      	ldrh	r3, [r3, #0]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d10d      	bne.n	800e744 <dwt_writetodevice+0x42>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800e728:	193b      	adds	r3, r7, r4
 800e72a:	881b      	ldrh	r3, [r3, #0]
 800e72c:	b2da      	uxtb	r2, r3
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	1c59      	adds	r1, r3, #1
 800e732:	6179      	str	r1, [r7, #20]
 800e734:	2180      	movs	r1, #128	@ 0x80
 800e736:	4249      	negs	r1, r1
 800e738:	430a      	orrs	r2, r1
 800e73a:	b2d1      	uxtb	r1, r2
 800e73c:	2210      	movs	r2, #16
 800e73e:	18ba      	adds	r2, r7, r2
 800e740:	54d1      	strb	r1, [r2, r3]
 800e742:	e033      	b.n	800e7ac <dwt_writetodevice+0xaa>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800e744:	230e      	movs	r3, #14
 800e746:	18fb      	adds	r3, r7, r3
 800e748:	881b      	ldrh	r3, [r3, #0]
 800e74a:	b2da      	uxtb	r2, r3
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	1c59      	adds	r1, r3, #1
 800e750:	6179      	str	r1, [r7, #20]
 800e752:	2140      	movs	r1, #64	@ 0x40
 800e754:	4249      	negs	r1, r1
 800e756:	430a      	orrs	r2, r1
 800e758:	b2d1      	uxtb	r1, r2
 800e75a:	2010      	movs	r0, #16
 800e75c:	183a      	adds	r2, r7, r0
 800e75e:	54d1      	strb	r1, [r2, r3]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800e760:	210c      	movs	r1, #12
 800e762:	187b      	adds	r3, r7, r1
 800e764:	881b      	ldrh	r3, [r3, #0]
 800e766:	2b7f      	cmp	r3, #127	@ 0x7f
 800e768:	d808      	bhi.n	800e77c <dwt_writetodevice+0x7a>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800e76a:	697b      	ldr	r3, [r7, #20]
 800e76c:	1c5a      	adds	r2, r3, #1
 800e76e:	617a      	str	r2, [r7, #20]
 800e770:	187a      	adds	r2, r7, r1
 800e772:	8812      	ldrh	r2, [r2, #0]
 800e774:	b2d1      	uxtb	r1, r2
 800e776:	183a      	adds	r2, r7, r0
 800e778:	54d1      	strb	r1, [r2, r3]
 800e77a:	e017      	b.n	800e7ac <dwt_writetodevice+0xaa>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800e77c:	200c      	movs	r0, #12
 800e77e:	183b      	adds	r3, r7, r0
 800e780:	881b      	ldrh	r3, [r3, #0]
 800e782:	b2da      	uxtb	r2, r3
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	1c59      	adds	r1, r3, #1
 800e788:	6179      	str	r1, [r7, #20]
 800e78a:	2180      	movs	r1, #128	@ 0x80
 800e78c:	4249      	negs	r1, r1
 800e78e:	430a      	orrs	r2, r1
 800e790:	b2d1      	uxtb	r1, r2
 800e792:	2410      	movs	r4, #16
 800e794:	193a      	adds	r2, r7, r4
 800e796:	54d1      	strb	r1, [r2, r3]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800e798:	183b      	adds	r3, r7, r0
 800e79a:	881b      	ldrh	r3, [r3, #0]
 800e79c:	09db      	lsrs	r3, r3, #7
 800e79e:	b299      	uxth	r1, r3
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	1c5a      	adds	r2, r3, #1
 800e7a4:	617a      	str	r2, [r7, #20]
 800e7a6:	b2c9      	uxtb	r1, r1
 800e7a8:	193a      	adds	r2, r7, r4
 800e7aa:	54d1      	strb	r1, [r2, r3]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	b298      	uxth	r0, r3
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	68ba      	ldr	r2, [r7, #8]
 800e7b4:	2110      	movs	r1, #16
 800e7b6:	1879      	adds	r1, r7, r1
 800e7b8:	f000 fc58 	bl	800f06c <writetospi>
} // end dwt_writetodevice()
 800e7bc:	46c0      	nop			@ (mov r8, r8)
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	b007      	add	sp, #28
 800e7c2:	bd90      	pop	{r4, r7, pc}

0800e7c4 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 800e7c4:	b590      	push	{r4, r7, lr}
 800e7c6:	b087      	sub	sp, #28
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	60ba      	str	r2, [r7, #8]
 800e7cc:	607b      	str	r3, [r7, #4]
 800e7ce:	240e      	movs	r4, #14
 800e7d0:	193b      	adds	r3, r7, r4
 800e7d2:	1c02      	adds	r2, r0, #0
 800e7d4:	801a      	strh	r2, [r3, #0]
 800e7d6:	200c      	movs	r0, #12
 800e7d8:	183b      	adds	r3, r7, r0
 800e7da:	1c0a      	adds	r2, r1, #0
 800e7dc:	801a      	strh	r2, [r3, #0]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 800e7de:	2300      	movs	r3, #0
 800e7e0:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 800e7e2:	183b      	adds	r3, r7, r0
 800e7e4:	881b      	ldrh	r3, [r3, #0]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d109      	bne.n	800e7fe <dwt_readfromdevice+0x3a>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	1c5a      	adds	r2, r3, #1
 800e7ee:	617a      	str	r2, [r7, #20]
 800e7f0:	193a      	adds	r2, r7, r4
 800e7f2:	8812      	ldrh	r2, [r2, #0]
 800e7f4:	b2d1      	uxtb	r1, r2
 800e7f6:	2210      	movs	r2, #16
 800e7f8:	18ba      	adds	r2, r7, r2
 800e7fa:	54d1      	strb	r1, [r2, r3]
 800e7fc:	e032      	b.n	800e864 <dwt_readfromdevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800e7fe:	230e      	movs	r3, #14
 800e800:	18fb      	adds	r3, r7, r3
 800e802:	881b      	ldrh	r3, [r3, #0]
 800e804:	b2da      	uxtb	r2, r3
 800e806:	697b      	ldr	r3, [r7, #20]
 800e808:	1c59      	adds	r1, r3, #1
 800e80a:	6179      	str	r1, [r7, #20]
 800e80c:	2140      	movs	r1, #64	@ 0x40
 800e80e:	430a      	orrs	r2, r1
 800e810:	b2d1      	uxtb	r1, r2
 800e812:	2010      	movs	r0, #16
 800e814:	183a      	adds	r2, r7, r0
 800e816:	54d1      	strb	r1, [r2, r3]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800e818:	210c      	movs	r1, #12
 800e81a:	187b      	adds	r3, r7, r1
 800e81c:	881b      	ldrh	r3, [r3, #0]
 800e81e:	2b7f      	cmp	r3, #127	@ 0x7f
 800e820:	d808      	bhi.n	800e834 <dwt_readfromdevice+0x70>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	1c5a      	adds	r2, r3, #1
 800e826:	617a      	str	r2, [r7, #20]
 800e828:	187a      	adds	r2, r7, r1
 800e82a:	8812      	ldrh	r2, [r2, #0]
 800e82c:	b2d1      	uxtb	r1, r2
 800e82e:	183a      	adds	r2, r7, r0
 800e830:	54d1      	strb	r1, [r2, r3]
 800e832:	e017      	b.n	800e864 <dwt_readfromdevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800e834:	200c      	movs	r0, #12
 800e836:	183b      	adds	r3, r7, r0
 800e838:	881b      	ldrh	r3, [r3, #0]
 800e83a:	b2da      	uxtb	r2, r3
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	1c59      	adds	r1, r3, #1
 800e840:	6179      	str	r1, [r7, #20]
 800e842:	2180      	movs	r1, #128	@ 0x80
 800e844:	4249      	negs	r1, r1
 800e846:	430a      	orrs	r2, r1
 800e848:	b2d1      	uxtb	r1, r2
 800e84a:	2410      	movs	r4, #16
 800e84c:	193a      	adds	r2, r7, r4
 800e84e:	54d1      	strb	r1, [r2, r3]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800e850:	183b      	adds	r3, r7, r0
 800e852:	881b      	ldrh	r3, [r3, #0]
 800e854:	09db      	lsrs	r3, r3, #7
 800e856:	b299      	uxth	r1, r3
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	1c5a      	adds	r2, r3, #1
 800e85c:	617a      	str	r2, [r7, #20]
 800e85e:	b2c9      	uxtb	r1, r1
 800e860:	193a      	adds	r2, r7, r4
 800e862:	54d1      	strb	r1, [r2, r3]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	b298      	uxth	r0, r3
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	68ba      	ldr	r2, [r7, #8]
 800e86c:	2110      	movs	r1, #16
 800e86e:	1879      	adds	r1, r7, r1
 800e870:	f000 fc34 	bl	800f0dc <readfromspi>
} // end dwt_readfromdevice()
 800e874:	46c0      	nop			@ (mov r8, r8)
 800e876:	46bd      	mov	sp, r7
 800e878:	b007      	add	sp, #28
 800e87a:	bd90      	pop	{r4, r7, pc}

0800e87c <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b086      	sub	sp, #24
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
 800e884:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 800e886:	2300      	movs	r3, #0
 800e888:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	b298      	uxth	r0, r3
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	b299      	uxth	r1, r3
 800e892:	230c      	movs	r3, #12
 800e894:	18fb      	adds	r3, r7, r3
 800e896:	2204      	movs	r2, #4
 800e898:	f7ff ff94 	bl	800e7c4 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 800e89c:	2303      	movs	r3, #3
 800e89e:	613b      	str	r3, [r7, #16]
 800e8a0:	e00b      	b.n	800e8ba <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	021b      	lsls	r3, r3, #8
 800e8a6:	220c      	movs	r2, #12
 800e8a8:	18b9      	adds	r1, r7, r2
 800e8aa:	693a      	ldr	r2, [r7, #16]
 800e8ac:	188a      	adds	r2, r1, r2
 800e8ae:	7812      	ldrb	r2, [r2, #0]
 800e8b0:	189b      	adds	r3, r3, r2
 800e8b2:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 800e8b4:	693b      	ldr	r3, [r7, #16]
 800e8b6:	3b01      	subs	r3, #1
 800e8b8:	613b      	str	r3, [r7, #16]
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	daf0      	bge.n	800e8a2 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 800e8c0:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 800e8c2:	0018      	movs	r0, r3
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	b006      	add	sp, #24
 800e8c8:	bd80      	pop	{r7, pc}

0800e8ca <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 800e8ca:	b5b0      	push	{r4, r5, r7, lr}
 800e8cc:	b084      	sub	sp, #16
 800e8ce:	af00      	add	r7, sp, #0
 800e8d0:	6078      	str	r0, [r7, #4]
 800e8d2:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 800e8d4:	240e      	movs	r4, #14
 800e8d6:	193b      	adds	r3, r7, r4
 800e8d8:	2200      	movs	r2, #0
 800e8da:	801a      	strh	r2, [r3, #0]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	b298      	uxth	r0, r3
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	b299      	uxth	r1, r3
 800e8e4:	250c      	movs	r5, #12
 800e8e6:	197b      	adds	r3, r7, r5
 800e8e8:	2202      	movs	r2, #2
 800e8ea:	f7ff ff6b 	bl	800e7c4 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 800e8ee:	0029      	movs	r1, r5
 800e8f0:	187b      	adds	r3, r7, r1
 800e8f2:	785b      	ldrb	r3, [r3, #1]
 800e8f4:	021b      	lsls	r3, r3, #8
 800e8f6:	b29a      	uxth	r2, r3
 800e8f8:	187b      	adds	r3, r7, r1
 800e8fa:	781b      	ldrb	r3, [r3, #0]
 800e8fc:	0019      	movs	r1, r3
 800e8fe:	193b      	adds	r3, r7, r4
 800e900:	1852      	adds	r2, r2, r1
 800e902:	801a      	strh	r2, [r3, #0]
    return regval ;
 800e904:	193b      	adds	r3, r7, r4
 800e906:	881b      	ldrh	r3, [r3, #0]

} // end dwt_read16bitoffsetreg()
 800e908:	0018      	movs	r0, r3
 800e90a:	46bd      	mov	sp, r7
 800e90c:	b004      	add	sp, #16
 800e90e:	bdb0      	pop	{r4, r5, r7, pc}

0800e910 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 800e910:	b590      	push	{r4, r7, lr}
 800e912:	b085      	sub	sp, #20
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
 800e918:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	b298      	uxth	r0, r3
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	b299      	uxth	r1, r3
 800e922:	240f      	movs	r4, #15
 800e924:	193b      	adds	r3, r7, r4
 800e926:	2201      	movs	r2, #1
 800e928:	f7ff ff4c 	bl	800e7c4 <dwt_readfromdevice>

    return regval ;
 800e92c:	193b      	adds	r3, r7, r4
 800e92e:	781b      	ldrb	r3, [r3, #0]
}
 800e930:	0018      	movs	r0, r3
 800e932:	46bd      	mov	sp, r7
 800e934:	b005      	add	sp, #20
 800e936:	bd90      	pop	{r4, r7, pc}

0800e938 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b084      	sub	sp, #16
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	60f8      	str	r0, [r7, #12]
 800e940:	60b9      	str	r1, [r7, #8]
 800e942:	1dfb      	adds	r3, r7, #7
 800e944:	701a      	strb	r2, [r3, #0]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	b298      	uxth	r0, r3
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	b299      	uxth	r1, r3
 800e94e:	1dfb      	adds	r3, r7, #7
 800e950:	2201      	movs	r2, #1
 800e952:	f7ff fed6 	bl	800e702 <dwt_writetodevice>
}
 800e956:	46c0      	nop			@ (mov r8, r8)
 800e958:	46bd      	mov	sp, r7
 800e95a:	b004      	add	sp, #16
 800e95c:	bd80      	pop	{r7, pc}

0800e95e <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 800e95e:	b590      	push	{r4, r7, lr}
 800e960:	b087      	sub	sp, #28
 800e962:	af00      	add	r7, sp, #0
 800e964:	60f8      	str	r0, [r7, #12]
 800e966:	60b9      	str	r1, [r7, #8]
 800e968:	1dbb      	adds	r3, r7, #6
 800e96a:	801a      	strh	r2, [r3, #0]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 800e96c:	1dbb      	adds	r3, r7, #6
 800e96e:	881b      	ldrh	r3, [r3, #0]
 800e970:	b2da      	uxtb	r2, r3
 800e972:	2414      	movs	r4, #20
 800e974:	193b      	adds	r3, r7, r4
 800e976:	701a      	strb	r2, [r3, #0]
    buffer[1] = regval >> 8 ;
 800e978:	1dbb      	adds	r3, r7, #6
 800e97a:	881b      	ldrh	r3, [r3, #0]
 800e97c:	0a1b      	lsrs	r3, r3, #8
 800e97e:	b29b      	uxth	r3, r3
 800e980:	b2da      	uxtb	r2, r3
 800e982:	193b      	adds	r3, r7, r4
 800e984:	705a      	strb	r2, [r3, #1]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	b298      	uxth	r0, r3
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	b299      	uxth	r1, r3
 800e98e:	193b      	adds	r3, r7, r4
 800e990:	2202      	movs	r2, #2
 800e992:	f7ff feb6 	bl	800e702 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 800e996:	46c0      	nop			@ (mov r8, r8)
 800e998:	46bd      	mov	sp, r7
 800e99a:	b007      	add	sp, #28
 800e99c:	bd90      	pop	{r4, r7, pc}

0800e99e <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 800e99e:	b580      	push	{r7, lr}
 800e9a0:	b086      	sub	sp, #24
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	60f8      	str	r0, [r7, #12]
 800e9a6:	60b9      	str	r1, [r7, #8]
 800e9a8:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	617b      	str	r3, [r7, #20]
 800e9ae:	e00d      	b.n	800e9cc <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	b2d9      	uxtb	r1, r3
 800e9b4:	2310      	movs	r3, #16
 800e9b6:	18fa      	adds	r2, r7, r3
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	18d3      	adds	r3, r2, r3
 800e9bc:	1c0a      	adds	r2, r1, #0
 800e9be:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	0a1b      	lsrs	r3, r3, #8
 800e9c4:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	617b      	str	r3, [r7, #20]
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	2b03      	cmp	r3, #3
 800e9d0:	ddee      	ble.n	800e9b0 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	b298      	uxth	r0, r3
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	b299      	uxth	r1, r3
 800e9da:	2310      	movs	r3, #16
 800e9dc:	18fb      	adds	r3, r7, r3
 800e9de:	2204      	movs	r2, #4
 800e9e0:	f7ff fe8f 	bl	800e702 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 800e9e4:	46c0      	nop			@ (mov r8, r8)
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	b006      	add	sp, #24
 800e9ea:	bd80      	pop	{r7, pc}

0800e9ec <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b084      	sub	sp, #16
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	0002      	movs	r2, r0
 800e9f4:	1dbb      	adds	r3, r7, #6
 800e9f6:	801a      	strh	r2, [r3, #0]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 800e9f8:	1dbb      	adds	r3, r7, #6
 800e9fa:	881b      	ldrh	r3, [r3, #0]
 800e9fc:	001a      	movs	r2, r3
 800e9fe:	2104      	movs	r1, #4
 800ea00:	202d      	movs	r0, #45	@ 0x2d
 800ea02:	f7ff ffac 	bl	800e95e <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 800ea06:	2203      	movs	r2, #3
 800ea08:	2106      	movs	r1, #6
 800ea0a:	202d      	movs	r0, #45	@ 0x2d
 800ea0c:	f7ff ff94 	bl	800e938 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 800ea10:	2200      	movs	r2, #0
 800ea12:	2106      	movs	r1, #6
 800ea14:	202d      	movs	r0, #45	@ 0x2d
 800ea16:	f7ff ff8f 	bl	800e938 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 800ea1a:	210a      	movs	r1, #10
 800ea1c:	202d      	movs	r0, #45	@ 0x2d
 800ea1e:	f7ff ff2d 	bl	800e87c <dwt_read32bitoffsetreg>
 800ea22:	0003      	movs	r3, r0
 800ea24:	60fb      	str	r3, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 800ea26:	68fb      	ldr	r3, [r7, #12]
}
 800ea28:	0018      	movs	r0, r3
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	b004      	add	sp, #16
 800ea2e:	bd80      	pop	{r7, pc}

0800ea30 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 800ea34:	2200      	movs	r2, #0
 800ea36:	2102      	movs	r1, #2
 800ea38:	202c      	movs	r0, #44	@ 0x2c
 800ea3a:	f7ff ff7d 	bl	800e938 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 800ea3e:	2202      	movs	r2, #2
 800ea40:	2102      	movs	r1, #2
 800ea42:	202c      	movs	r0, #44	@ 0x2c
 800ea44:	f7ff ff78 	bl	800e938 <dwt_write8bitoffsetreg>
}
 800ea48:	46c0      	nop			@ (mov r8, r8)
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
	...

0800ea50 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b082      	sub	sp, #8
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 800ea58:	4b0c      	ldr	r3, [pc, #48]	@ (800ea8c <_dwt_configlde+0x3c>)
 800ea5a:	226d      	movs	r2, #109	@ 0x6d
 800ea5c:	0019      	movs	r1, r3
 800ea5e:	202e      	movs	r0, #46	@ 0x2e
 800ea60:	f7ff ff6a 	bl	800e938 <dwt_write8bitoffsetreg>

    if(prfIndex)
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d006      	beq.n	800ea78 <_dwt_configlde+0x28>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 800ea6a:	4a09      	ldr	r2, [pc, #36]	@ (800ea90 <_dwt_configlde+0x40>)
 800ea6c:	4b09      	ldr	r3, [pc, #36]	@ (800ea94 <_dwt_configlde+0x44>)
 800ea6e:	0019      	movs	r1, r3
 800ea70:	202e      	movs	r0, #46	@ 0x2e
 800ea72:	f7ff ff74 	bl	800e95e <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 800ea76:	e005      	b.n	800ea84 <_dwt_configlde+0x34>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 800ea78:	4a07      	ldr	r2, [pc, #28]	@ (800ea98 <_dwt_configlde+0x48>)
 800ea7a:	4b06      	ldr	r3, [pc, #24]	@ (800ea94 <_dwt_configlde+0x44>)
 800ea7c:	0019      	movs	r1, r3
 800ea7e:	202e      	movs	r0, #46	@ 0x2e
 800ea80:	f7ff ff6d 	bl	800e95e <dwt_write16bitoffsetreg>
}
 800ea84:	46c0      	nop			@ (mov r8, r8)
 800ea86:	46bd      	mov	sp, r7
 800ea88:	b002      	add	sp, #8
 800ea8a:	bd80      	pop	{r7, pc}
 800ea8c:	00000806 	.word	0x00000806
 800ea90:	00000607 	.word	0x00000607
 800ea94:	00001806 	.word	0x00001806
 800ea98:	00001607 	.word	0x00001607

0800ea9c <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 800eaa0:	200e      	movs	r0, #14
 800eaa2:	f000 f861 	bl	800eb68 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 800eaa6:	2380      	movs	r3, #128	@ 0x80
 800eaa8:	021b      	lsls	r3, r3, #8
 800eaaa:	001a      	movs	r2, r3
 800eaac:	2106      	movs	r1, #6
 800eaae:	202d      	movs	r0, #45	@ 0x2d
 800eab0:	f7ff ff55 	bl	800e95e <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 800eab4:	2001      	movs	r0, #1
 800eab6:	f000 facc 	bl	800f052 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800eaba:	2001      	movs	r0, #1
 800eabc:	f000 f854 	bl	800eb68 <_dwt_enableclocks>
}
 800eac0:	46c0      	nop			@ (mov r8, r8)
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}
	...

0800eac8 <dwt_setdblrxbuffmode>:
 * output parameters
 *
 * no return value
 */
void dwt_setdblrxbuffmode(int enable)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
    if(enable)
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d00c      	beq.n	800eaf0 <dwt_setdblrxbuffmode+0x28>
    {
        // Enable double RX buffer mode
        pdw1000local->sysCFGreg &= ~SYS_CFG_DIS_DRXB;
 800ead6:	4b13      	ldr	r3, [pc, #76]	@ (800eb24 <dwt_setdblrxbuffmode+0x5c>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	691a      	ldr	r2, [r3, #16]
 800eadc:	4b11      	ldr	r3, [pc, #68]	@ (800eb24 <dwt_setdblrxbuffmode+0x5c>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	4911      	ldr	r1, [pc, #68]	@ (800eb28 <dwt_setdblrxbuffmode+0x60>)
 800eae2:	400a      	ands	r2, r1
 800eae4:	611a      	str	r2, [r3, #16]
        pdw1000local->dblbuffon = 1;
 800eae6:	4b0f      	ldr	r3, [pc, #60]	@ (800eb24 <dwt_setdblrxbuffmode+0x5c>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	2201      	movs	r2, #1
 800eaec:	751a      	strb	r2, [r3, #20]
 800eaee:	e00c      	b.n	800eb0a <dwt_setdblrxbuffmode+0x42>
    }
    else
    {
        // Disable double RX buffer mode
        pdw1000local->sysCFGreg |= SYS_CFG_DIS_DRXB;
 800eaf0:	4b0c      	ldr	r3, [pc, #48]	@ (800eb24 <dwt_setdblrxbuffmode+0x5c>)
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	691a      	ldr	r2, [r3, #16]
 800eaf6:	4b0b      	ldr	r3, [pc, #44]	@ (800eb24 <dwt_setdblrxbuffmode+0x5c>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	2180      	movs	r1, #128	@ 0x80
 800eafc:	0149      	lsls	r1, r1, #5
 800eafe:	430a      	orrs	r2, r1
 800eb00:	611a      	str	r2, [r3, #16]
        pdw1000local->dblbuffon = 0;
 800eb02:	4b08      	ldr	r3, [pc, #32]	@ (800eb24 <dwt_setdblrxbuffmode+0x5c>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	2200      	movs	r2, #0
 800eb08:	751a      	strb	r2, [r3, #20]
    }

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 800eb0a:	4b06      	ldr	r3, [pc, #24]	@ (800eb24 <dwt_setdblrxbuffmode+0x5c>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	691b      	ldr	r3, [r3, #16]
 800eb10:	001a      	movs	r2, r3
 800eb12:	2100      	movs	r1, #0
 800eb14:	2004      	movs	r0, #4
 800eb16:	f7ff ff42 	bl	800e99e <dwt_write32bitoffsetreg>
}
 800eb1a:	46c0      	nop			@ (mov r8, r8)
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	b002      	add	sp, #8
 800eb20:	bd80      	pop	{r7, pc}
 800eb22:	46c0      	nop			@ (mov r8, r8)
 800eb24:	200001dc 	.word	0x200001dc
 800eb28:	ffffefff 	.word	0xffffefff

0800eb2c <dwt_setrxaftertxdelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32 rxDelayTime)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b084      	sub	sp, #16
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 800eb34:	2100      	movs	r1, #0
 800eb36:	201a      	movs	r0, #26
 800eb38:	f7ff fea0 	bl	800e87c <dwt_read32bitoffsetreg>
 800eb3c:	0003      	movs	r3, r0
 800eb3e:	60fb      	str	r3, [r7, #12]

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	0d1b      	lsrs	r3, r3, #20
 800eb44:	051b      	lsls	r3, r3, #20
 800eb46:	60fb      	str	r3, [r7, #12]

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	031b      	lsls	r3, r3, #12
 800eb4c:	0b1b      	lsrs	r3, r3, #12
 800eb4e:	68fa      	ldr	r2, [r7, #12]
 800eb50:	4313      	orrs	r3, r2
 800eb52:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	001a      	movs	r2, r3
 800eb58:	2100      	movs	r1, #0
 800eb5a:	201a      	movs	r0, #26
 800eb5c:	f7ff ff1f 	bl	800e99e <dwt_write32bitoffsetreg>
}
 800eb60:	46c0      	nop			@ (mov r8, r8)
 800eb62:	46bd      	mov	sp, r7
 800eb64:	b004      	add	sp, #16
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 800eb68:	b590      	push	{r4, r7, lr}
 800eb6a:	b085      	sub	sp, #20
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 800eb70:	230c      	movs	r3, #12
 800eb72:	18fb      	adds	r3, r7, r3
 800eb74:	2202      	movs	r2, #2
 800eb76:	2100      	movs	r1, #0
 800eb78:	2036      	movs	r0, #54	@ 0x36
 800eb7a:	f7ff fe23 	bl	800e7c4 <dwt_readfromdevice>
    switch(clocks)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2b0e      	cmp	r3, #14
 800eb82:	d900      	bls.n	800eb86 <_dwt_enableclocks+0x1e>
 800eb84:	e07b      	b.n	800ec7e <_dwt_enableclocks+0x116>
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	009a      	lsls	r2, r3, #2
 800eb8a:	4b46      	ldr	r3, [pc, #280]	@ (800eca4 <_dwt_enableclocks+0x13c>)
 800eb8c:	18d3      	adds	r3, r2, r3
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	469f      	mov	pc, r3
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 800eb92:	210c      	movs	r1, #12
 800eb94:	187b      	adds	r3, r7, r1
 800eb96:	2200      	movs	r2, #0
 800eb98:	701a      	strb	r2, [r3, #0]
            reg[1] = reg[1] & 0xfe;
 800eb9a:	187b      	adds	r3, r7, r1
 800eb9c:	785b      	ldrb	r3, [r3, #1]
 800eb9e:	2201      	movs	r2, #1
 800eba0:	4393      	bics	r3, r2
 800eba2:	b2da      	uxtb	r2, r3
 800eba4:	187b      	adds	r3, r7, r1
 800eba6:	705a      	strb	r2, [r3, #1]
        }
        break;
 800eba8:	e06a      	b.n	800ec80 <_dwt_enableclocks+0x118>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 800ebaa:	210c      	movs	r1, #12
 800ebac:	187b      	adds	r3, r7, r1
 800ebae:	781b      	ldrb	r3, [r3, #0]
 800ebb0:	b25b      	sxtb	r3, r3
 800ebb2:	2203      	movs	r2, #3
 800ebb4:	4393      	bics	r3, r2
 800ebb6:	b25b      	sxtb	r3, r3
 800ebb8:	2201      	movs	r2, #1
 800ebba:	4313      	orrs	r3, r2
 800ebbc:	b25b      	sxtb	r3, r3
 800ebbe:	b2da      	uxtb	r2, r3
 800ebc0:	187b      	adds	r3, r7, r1
 800ebc2:	701a      	strb	r2, [r3, #0]
        }
        break;
 800ebc4:	e05c      	b.n	800ec80 <_dwt_enableclocks+0x118>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 800ebc6:	210c      	movs	r1, #12
 800ebc8:	187b      	adds	r3, r7, r1
 800ebca:	781b      	ldrb	r3, [r3, #0]
 800ebcc:	b25b      	sxtb	r3, r3
 800ebce:	2203      	movs	r2, #3
 800ebd0:	4393      	bics	r3, r2
 800ebd2:	b25b      	sxtb	r3, r3
 800ebd4:	2202      	movs	r2, #2
 800ebd6:	4313      	orrs	r3, r2
 800ebd8:	b25b      	sxtb	r3, r3
 800ebda:	b2da      	uxtb	r2, r3
 800ebdc:	187b      	adds	r3, r7, r1
 800ebde:	701a      	strb	r2, [r3, #0]
        }
        break;
 800ebe0:	e04e      	b.n	800ec80 <_dwt_enableclocks+0x118>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 800ebe2:	210c      	movs	r1, #12
 800ebe4:	187b      	adds	r3, r7, r1
 800ebe6:	781b      	ldrb	r3, [r3, #0]
 800ebe8:	b25b      	sxtb	r3, r3
 800ebea:	224c      	movs	r2, #76	@ 0x4c
 800ebec:	4393      	bics	r3, r2
 800ebee:	b25b      	sxtb	r3, r3
 800ebf0:	2248      	movs	r2, #72	@ 0x48
 800ebf2:	4313      	orrs	r3, r2
 800ebf4:	b25b      	sxtb	r3, r3
 800ebf6:	b2da      	uxtb	r2, r3
 800ebf8:	187b      	adds	r3, r7, r1
 800ebfa:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x80 | reg[1];
 800ebfc:	187b      	adds	r3, r7, r1
 800ebfe:	785b      	ldrb	r3, [r3, #1]
 800ec00:	2280      	movs	r2, #128	@ 0x80
 800ec02:	4252      	negs	r2, r2
 800ec04:	4313      	orrs	r3, r2
 800ec06:	b2da      	uxtb	r2, r3
 800ec08:	187b      	adds	r3, r7, r1
 800ec0a:	705a      	strb	r2, [r3, #1]
        }
        break;
 800ec0c:	e038      	b.n	800ec80 <_dwt_enableclocks+0x118>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 800ec0e:	210c      	movs	r1, #12
 800ec10:	187b      	adds	r3, r7, r1
 800ec12:	781b      	ldrb	r3, [r3, #0]
 800ec14:	224c      	movs	r2, #76	@ 0x4c
 800ec16:	4393      	bics	r3, r2
 800ec18:	b2da      	uxtb	r2, r3
 800ec1a:	187b      	adds	r3, r7, r1
 800ec1c:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x7f & reg[1];
 800ec1e:	187b      	adds	r3, r7, r1
 800ec20:	785b      	ldrb	r3, [r3, #1]
 800ec22:	227f      	movs	r2, #127	@ 0x7f
 800ec24:	4013      	ands	r3, r2
 800ec26:	b2da      	uxtb	r2, r3
 800ec28:	187b      	adds	r3, r7, r1
 800ec2a:	705a      	strb	r2, [r3, #1]
        }
        break;
 800ec2c:	e028      	b.n	800ec80 <_dwt_enableclocks+0x118>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 800ec2e:	210c      	movs	r1, #12
 800ec30:	187b      	adds	r3, r7, r1
 800ec32:	785b      	ldrb	r3, [r3, #1]
 800ec34:	2202      	movs	r2, #2
 800ec36:	4313      	orrs	r3, r2
 800ec38:	b2da      	uxtb	r2, r3
 800ec3a:	187b      	adds	r3, r7, r1
 800ec3c:	705a      	strb	r2, [r3, #1]
        }
        break;
 800ec3e:	e01f      	b.n	800ec80 <_dwt_enableclocks+0x118>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 800ec40:	210c      	movs	r1, #12
 800ec42:	187b      	adds	r3, r7, r1
 800ec44:	785b      	ldrb	r3, [r3, #1]
 800ec46:	2202      	movs	r2, #2
 800ec48:	4393      	bics	r3, r2
 800ec4a:	b2da      	uxtb	r2, r3
 800ec4c:	187b      	adds	r3, r7, r1
 800ec4e:	705a      	strb	r2, [r3, #1]
        }
        break;
 800ec50:	e016      	b.n	800ec80 <_dwt_enableclocks+0x118>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 800ec52:	210c      	movs	r1, #12
 800ec54:	187b      	adds	r3, r7, r1
 800ec56:	781b      	ldrb	r3, [r3, #0]
 800ec58:	b25b      	sxtb	r3, r3
 800ec5a:	2230      	movs	r2, #48	@ 0x30
 800ec5c:	4393      	bics	r3, r2
 800ec5e:	b25b      	sxtb	r3, r3
 800ec60:	2220      	movs	r2, #32
 800ec62:	4313      	orrs	r3, r2
 800ec64:	b25b      	sxtb	r3, r3
 800ec66:	b2da      	uxtb	r2, r3
 800ec68:	187b      	adds	r3, r7, r1
 800ec6a:	701a      	strb	r2, [r3, #0]
        }
        break;
 800ec6c:	e008      	b.n	800ec80 <_dwt_enableclocks+0x118>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 800ec6e:	210c      	movs	r1, #12
 800ec70:	187b      	adds	r3, r7, r1
 800ec72:	2201      	movs	r2, #1
 800ec74:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x03;
 800ec76:	187b      	adds	r3, r7, r1
 800ec78:	2203      	movs	r2, #3
 800ec7a:	705a      	strb	r2, [r3, #1]
        }
        break;
 800ec7c:	e000      	b.n	800ec80 <_dwt_enableclocks+0x118>
        default:
        break;
 800ec7e:	46c0      	nop			@ (mov r8, r8)
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 800ec80:	240c      	movs	r4, #12
 800ec82:	193b      	adds	r3, r7, r4
 800ec84:	2201      	movs	r2, #1
 800ec86:	2100      	movs	r1, #0
 800ec88:	2036      	movs	r0, #54	@ 0x36
 800ec8a:	f7ff fd3a 	bl	800e702 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 800ec8e:	193b      	adds	r3, r7, r4
 800ec90:	3301      	adds	r3, #1
 800ec92:	2201      	movs	r2, #1
 800ec94:	2101      	movs	r1, #1
 800ec96:	2036      	movs	r0, #54	@ 0x36
 800ec98:	f7ff fd33 	bl	800e702 <dwt_writetodevice>

} // end _dwt_enableclocks()
 800ec9c:	46c0      	nop			@ (mov r8, r8)
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	b005      	add	sp, #20
 800eca2:	bd90      	pop	{r4, r7, pc}
 800eca4:	080123e8 	.word	0x080123e8

0800eca8 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 800ecac:	2000      	movs	r0, #0
 800ecae:	f7ff ff5b 	bl	800eb68 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	2104      	movs	r1, #4
 800ecb6:	2036      	movs	r0, #54	@ 0x36
 800ecb8:	f7ff fe51 	bl	800e95e <dwt_write16bitoffsetreg>
}
 800ecbc:	46c0      	nop			@ (mov r8, r8)
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}

0800ecc2 <dwt_setdelayedtrxtime>:
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32 starttime)
{
 800ecc2:	b580      	push	{r7, lr}
 800ecc4:	b082      	sub	sp, #8
 800ecc6:	af00      	add	r7, sp, #0
 800ecc8:	6078      	str	r0, [r7, #4]
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	001a      	movs	r2, r3
 800ecce:	2101      	movs	r1, #1
 800ecd0:	200a      	movs	r0, #10
 800ecd2:	f7ff fe64 	bl	800e99e <dwt_write32bitoffsetreg>

} // end dwt_setdelayedtrxtime()
 800ecd6:	46c0      	nop			@ (mov r8, r8)
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	b002      	add	sp, #8
 800ecdc:	bd80      	pop	{r7, pc}
	...

0800ece0 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 800ece0:	b5b0      	push	{r4, r5, r7, lr}
 800ece2:	b084      	sub	sp, #16
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	0002      	movs	r2, r0
 800ece8:	1dfb      	adds	r3, r7, #7
 800ecea:	701a      	strb	r2, [r3, #0]
    int retval = DWT_SUCCESS ;
 800ecec:	2300      	movs	r3, #0
 800ecee:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 800ecf0:	210b      	movs	r1, #11
 800ecf2:	187b      	adds	r3, r7, r1
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	701a      	strb	r2, [r3, #0]
    uint16 checkTxOK = 0 ;
 800ecf8:	2308      	movs	r3, #8
 800ecfa:	18fb      	adds	r3, r7, r3
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	801a      	strh	r2, [r3, #0]

    if(mode & DWT_RESPONSE_EXPECTED)
 800ed00:	1dfb      	adds	r3, r7, #7
 800ed02:	781b      	ldrb	r3, [r3, #0]
 800ed04:	2202      	movs	r2, #2
 800ed06:	4013      	ands	r3, r2
 800ed08:	d006      	beq.n	800ed18 <dwt_starttx+0x38>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 800ed0a:	187b      	adds	r3, r7, r1
 800ed0c:	2280      	movs	r2, #128	@ 0x80
 800ed0e:	701a      	strb	r2, [r3, #0]
        pdw1000local->wait4resp = 1;
 800ed10:	4b21      	ldr	r3, [pc, #132]	@ (800ed98 <dwt_starttx+0xb8>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	2201      	movs	r2, #1
 800ed16:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 800ed18:	1dfb      	adds	r3, r7, #7
 800ed1a:	781b      	ldrb	r3, [r3, #0]
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	4013      	ands	r3, r2
 800ed20:	d027      	beq.n	800ed72 <dwt_starttx+0x92>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 800ed22:	200b      	movs	r0, #11
 800ed24:	183b      	adds	r3, r7, r0
 800ed26:	183a      	adds	r2, r7, r0
 800ed28:	7812      	ldrb	r2, [r2, #0]
 800ed2a:	2106      	movs	r1, #6
 800ed2c:	430a      	orrs	r2, r1
 800ed2e:	701a      	strb	r2, [r3, #0]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800ed30:	183b      	adds	r3, r7, r0
 800ed32:	781b      	ldrb	r3, [r3, #0]
 800ed34:	001a      	movs	r2, r3
 800ed36:	2100      	movs	r1, #0
 800ed38:	200d      	movs	r0, #13
 800ed3a:	f7ff fdfd 	bl	800e938 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 800ed3e:	2508      	movs	r5, #8
 800ed40:	197c      	adds	r4, r7, r5
 800ed42:	2103      	movs	r1, #3
 800ed44:	200f      	movs	r0, #15
 800ed46:	f7ff fdc0 	bl	800e8ca <dwt_read16bitoffsetreg>
 800ed4a:	0003      	movs	r3, r0
 800ed4c:	8023      	strh	r3, [r4, #0]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 800ed4e:	197b      	adds	r3, r7, r5
 800ed50:	881a      	ldrh	r2, [r3, #0]
 800ed52:	2381      	movs	r3, #129	@ 0x81
 800ed54:	00db      	lsls	r3, r3, #3
 800ed56:	4013      	ands	r3, r2
 800ed58:	d102      	bne.n	800ed60 <dwt_starttx+0x80>
        {
            retval = DWT_SUCCESS ; // All okay
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	60fb      	str	r3, [r7, #12]
 800ed5e:	e016      	b.n	800ed8e <dwt_starttx+0xae>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 800ed60:	2240      	movs	r2, #64	@ 0x40
 800ed62:	2100      	movs	r1, #0
 800ed64:	200d      	movs	r0, #13
 800ed66:	f7ff fde7 	bl	800e938 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	425b      	negs	r3, r3
 800ed6e:	60fb      	str	r3, [r7, #12]
 800ed70:	e00d      	b.n	800ed8e <dwt_starttx+0xae>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 800ed72:	200b      	movs	r0, #11
 800ed74:	183b      	adds	r3, r7, r0
 800ed76:	183a      	adds	r2, r7, r0
 800ed78:	7812      	ldrb	r2, [r2, #0]
 800ed7a:	2102      	movs	r1, #2
 800ed7c:	430a      	orrs	r2, r1
 800ed7e:	701a      	strb	r2, [r3, #0]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800ed80:	183b      	adds	r3, r7, r0
 800ed82:	781b      	ldrb	r3, [r3, #0]
 800ed84:	001a      	movs	r2, r3
 800ed86:	2100      	movs	r1, #0
 800ed88:	200d      	movs	r0, #13
 800ed8a:	f7ff fdd5 	bl	800e938 <dwt_write8bitoffsetreg>
    }

    return retval;
 800ed8e:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 800ed90:	0018      	movs	r0, r3
 800ed92:	46bd      	mov	sp, r7
 800ed94:	b004      	add	sp, #16
 800ed96:	bdb0      	pop	{r4, r5, r7, pc}
 800ed98:	200001dc 	.word	0x200001dc

0800ed9c <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b082      	sub	sp, #8
 800eda0:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 800eda2:	2100      	movs	r1, #0
 800eda4:	200e      	movs	r0, #14
 800eda6:	f7ff fd69 	bl	800e87c <dwt_read32bitoffsetreg>
 800edaa:	0003      	movs	r3, r0
 800edac:	607b      	str	r3, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 800edae:	f000 f932 	bl	800f016 <decamutexon>
 800edb2:	0003      	movs	r3, r0
 800edb4:	603b      	str	r3, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 800edb6:	2200      	movs	r2, #0
 800edb8:	2100      	movs	r1, #0
 800edba:	200e      	movs	r0, #14
 800edbc:	f7ff fdef 	bl	800e99e <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 800edc0:	2240      	movs	r2, #64	@ 0x40
 800edc2:	2100      	movs	r1, #0
 800edc4:	200d      	movs	r0, #13
 800edc6:	f7ff fdb7 	bl	800e938 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 800edca:	4b0d      	ldr	r3, [pc, #52]	@ (800ee00 <dwt_forcetrxoff+0x64>)
 800edcc:	001a      	movs	r2, r3
 800edce:	2100      	movs	r1, #0
 800edd0:	200f      	movs	r0, #15
 800edd2:	f7ff fde4 	bl	800e99e <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 800edd6:	f000 f817 	bl	800ee08 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	001a      	movs	r2, r3
 800edde:	2100      	movs	r1, #0
 800ede0:	200e      	movs	r0, #14
 800ede2:	f7ff fddc 	bl	800e99e <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	0018      	movs	r0, r3
 800edea:	f000 f925 	bl	800f038 <decamutexoff>
    pdw1000local->wait4resp = 0;
 800edee:	4b05      	ldr	r3, [pc, #20]	@ (800ee04 <dwt_forcetrxoff+0x68>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	2200      	movs	r2, #0
 800edf4:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 800edf6:	46c0      	nop			@ (mov r8, r8)
 800edf8:	46bd      	mov	sp, r7
 800edfa:	b002      	add	sp, #8
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	46c0      	nop			@ (mov r8, r8)
 800ee00:	2427fff8 	.word	0x2427fff8
 800ee04:	200001dc 	.word	0x200001dc

0800ee08 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 800ee08:	b590      	push	{r4, r7, lr}
 800ee0a:	b083      	sub	sp, #12
 800ee0c:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 800ee0e:	1dfc      	adds	r4, r7, #7
 800ee10:	2103      	movs	r1, #3
 800ee12:	200f      	movs	r0, #15
 800ee14:	f7ff fd7c 	bl	800e910 <dwt_read8bitoffsetreg>
 800ee18:	0003      	movs	r3, r0
 800ee1a:	7023      	strb	r3, [r4, #0]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 800ee1c:	1dfb      	adds	r3, r7, #7
 800ee1e:	781a      	ldrb	r2, [r3, #0]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 800ee20:	1dfb      	adds	r3, r7, #7
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 800ee26:	4053      	eors	r3, r2
 800ee28:	2280      	movs	r2, #128	@ 0x80
 800ee2a:	4013      	ands	r3, r2
 800ee2c:	d004      	beq.n	800ee38 <dwt_syncrxbufptrs+0x30>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 800ee2e:	2201      	movs	r2, #1
 800ee30:	2103      	movs	r1, #3
 800ee32:	200d      	movs	r0, #13
 800ee34:	f7ff fd80 	bl	800e938 <dwt_write8bitoffsetreg>
    }
}
 800ee38:	46c0      	nop			@ (mov r8, r8)
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	b003      	add	sp, #12
 800ee3e:	bd90      	pop	{r4, r7, pc}

0800ee40 <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 800ee40:	b5b0      	push	{r4, r5, r7, lr}
 800ee42:	b084      	sub	sp, #16
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2204      	movs	r2, #4
 800ee4c:	4013      	ands	r3, r2
 800ee4e:	d101      	bne.n	800ee54 <dwt_rxenable+0x14>
    {
        dwt_syncrxbufptrs();
 800ee50:	f7ff ffda 	bl	800ee08 <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 800ee54:	210e      	movs	r1, #14
 800ee56:	187b      	adds	r3, r7, r1
 800ee58:	2280      	movs	r2, #128	@ 0x80
 800ee5a:	0052      	lsls	r2, r2, #1
 800ee5c:	801a      	strh	r2, [r3, #0]

    if (mode & DWT_START_RX_DELAYED)
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	2201      	movs	r2, #1
 800ee62:	4013      	ands	r3, r2
 800ee64:	d006      	beq.n	800ee74 <dwt_rxenable+0x34>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 800ee66:	187b      	adds	r3, r7, r1
 800ee68:	187a      	adds	r2, r7, r1
 800ee6a:	8812      	ldrh	r2, [r2, #0]
 800ee6c:	2180      	movs	r1, #128	@ 0x80
 800ee6e:	0089      	lsls	r1, r1, #2
 800ee70:	430a      	orrs	r2, r1
 800ee72:	801a      	strh	r2, [r3, #0]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800ee74:	230e      	movs	r3, #14
 800ee76:	18fb      	adds	r3, r7, r3
 800ee78:	881b      	ldrh	r3, [r3, #0]
 800ee7a:	001a      	movs	r2, r3
 800ee7c:	2100      	movs	r1, #0
 800ee7e:	200d      	movs	r0, #13
 800ee80:	f7ff fd6d 	bl	800e95e <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2201      	movs	r2, #1
 800ee88:	4013      	ands	r3, r2
 800ee8a:	d01c      	beq.n	800eec6 <dwt_rxenable+0x86>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 800ee8c:	250d      	movs	r5, #13
 800ee8e:	197c      	adds	r4, r7, r5
 800ee90:	2103      	movs	r1, #3
 800ee92:	200f      	movs	r0, #15
 800ee94:	f7ff fd3c 	bl	800e910 <dwt_read8bitoffsetreg>
 800ee98:	0003      	movs	r3, r0
 800ee9a:	7023      	strb	r3, [r4, #0]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 800ee9c:	197b      	adds	r3, r7, r5
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	2208      	movs	r2, #8
 800eea2:	4013      	ands	r3, r2
 800eea4:	d00f      	beq.n	800eec6 <dwt_rxenable+0x86>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 800eea6:	f7ff ff79 	bl	800ed9c <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2202      	movs	r2, #2
 800eeae:	4013      	ands	r3, r2
 800eeb0:	d106      	bne.n	800eec0 <dwt_rxenable+0x80>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 800eeb2:	2380      	movs	r3, #128	@ 0x80
 800eeb4:	005b      	lsls	r3, r3, #1
 800eeb6:	001a      	movs	r2, r3
 800eeb8:	2100      	movs	r1, #0
 800eeba:	200d      	movs	r0, #13
 800eebc:	f7ff fd4f 	bl	800e95e <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 800eec0:	2301      	movs	r3, #1
 800eec2:	425b      	negs	r3, r3
 800eec4:	e000      	b.n	800eec8 <dwt_rxenable+0x88>
        }
    }

    return DWT_SUCCESS;
 800eec6:	2300      	movs	r3, #0
} // end dwt_rxenable()
 800eec8:	0018      	movs	r0, r3
 800eeca:	46bd      	mov	sp, r7
 800eecc:	b004      	add	sp, #16
 800eece:	bdb0      	pop	{r4, r5, r7, pc}

0800eed0 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 800eed0:	b5b0      	push	{r4, r5, r7, lr}
 800eed2:	b084      	sub	sp, #16
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	0002      	movs	r2, r0
 800eed8:	1dbb      	adds	r3, r7, #6
 800eeda:	801a      	strh	r2, [r3, #0]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 800eedc:	250f      	movs	r5, #15
 800eede:	197c      	adds	r4, r7, r5
 800eee0:	2103      	movs	r1, #3
 800eee2:	2004      	movs	r0, #4
 800eee4:	f7ff fd14 	bl	800e910 <dwt_read8bitoffsetreg>
 800eee8:	0003      	movs	r3, r0
 800eeea:	7023      	strb	r3, [r4, #0]

    if(time > 0)
 800eeec:	1dbb      	adds	r3, r7, #6
 800eeee:	881b      	ldrh	r3, [r3, #0]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d01e      	beq.n	800ef32 <dwt_setrxtimeout+0x62>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 800eef4:	1dbb      	adds	r3, r7, #6
 800eef6:	881b      	ldrh	r3, [r3, #0]
 800eef8:	001a      	movs	r2, r3
 800eefa:	2100      	movs	r1, #0
 800eefc:	200c      	movs	r0, #12
 800eefe:	f7ff fd2e 	bl	800e95e <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 800ef02:	0028      	movs	r0, r5
 800ef04:	183b      	adds	r3, r7, r0
 800ef06:	183a      	adds	r2, r7, r0
 800ef08:	7812      	ldrb	r2, [r2, #0]
 800ef0a:	2110      	movs	r1, #16
 800ef0c:	430a      	orrs	r2, r1
 800ef0e:	701a      	strb	r2, [r3, #0]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 800ef10:	4b15      	ldr	r3, [pc, #84]	@ (800ef68 <dwt_setrxtimeout+0x98>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	691a      	ldr	r2, [r3, #16]
 800ef16:	4b14      	ldr	r3, [pc, #80]	@ (800ef68 <dwt_setrxtimeout+0x98>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	2180      	movs	r1, #128	@ 0x80
 800ef1c:	0549      	lsls	r1, r1, #21
 800ef1e:	430a      	orrs	r2, r1
 800ef20:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 800ef22:	183b      	adds	r3, r7, r0
 800ef24:	781b      	ldrb	r3, [r3, #0]
 800ef26:	001a      	movs	r2, r3
 800ef28:	2103      	movs	r1, #3
 800ef2a:	2004      	movs	r0, #4
 800ef2c:	f7ff fd04 	bl	800e938 <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 800ef30:	e015      	b.n	800ef5e <dwt_setrxtimeout+0x8e>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 800ef32:	200f      	movs	r0, #15
 800ef34:	183b      	adds	r3, r7, r0
 800ef36:	183a      	adds	r2, r7, r0
 800ef38:	7812      	ldrb	r2, [r2, #0]
 800ef3a:	2110      	movs	r1, #16
 800ef3c:	438a      	bics	r2, r1
 800ef3e:	701a      	strb	r2, [r3, #0]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 800ef40:	4b09      	ldr	r3, [pc, #36]	@ (800ef68 <dwt_setrxtimeout+0x98>)
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	691a      	ldr	r2, [r3, #16]
 800ef46:	4b08      	ldr	r3, [pc, #32]	@ (800ef68 <dwt_setrxtimeout+0x98>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	4908      	ldr	r1, [pc, #32]	@ (800ef6c <dwt_setrxtimeout+0x9c>)
 800ef4c:	400a      	ands	r2, r1
 800ef4e:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 800ef50:	183b      	adds	r3, r7, r0
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	001a      	movs	r2, r3
 800ef56:	2103      	movs	r1, #3
 800ef58:	2004      	movs	r0, #4
 800ef5a:	f7ff fced 	bl	800e938 <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 800ef5e:	46c0      	nop			@ (mov r8, r8)
 800ef60:	46bd      	mov	sp, r7
 800ef62:	b004      	add	sp, #16
 800ef64:	bdb0      	pop	{r4, r5, r7, pc}
 800ef66:	46c0      	nop			@ (mov r8, r8)
 800ef68:	200001dc 	.word	0x200001dc
 800ef6c:	efffffff 	.word	0xefffffff

0800ef70 <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	af00      	add	r7, sp, #0
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 800ef74:	22e0      	movs	r2, #224	@ 0xe0
 800ef76:	2103      	movs	r1, #3
 800ef78:	2036      	movs	r0, #54	@ 0x36
 800ef7a:	f7ff fcdd 	bl	800e938 <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 800ef7e:	22f0      	movs	r2, #240	@ 0xf0
 800ef80:	2103      	movs	r1, #3
 800ef82:	2036      	movs	r0, #54	@ 0x36
 800ef84:	f7ff fcd8 	bl	800e938 <dwt_write8bitoffsetreg>
}
 800ef88:	46c0      	nop			@ (mov r8, r8)
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
	...

0800ef90 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 800ef94:	f7ff fe88 	bl	800eca8 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 800ef98:	2200      	movs	r2, #0
 800ef9a:	2100      	movs	r1, #0
 800ef9c:	202c      	movs	r0, #44	@ 0x2c
 800ef9e:	f7ff fcde 	bl	800e95e <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 800efa2:	2200      	movs	r2, #0
 800efa4:	2106      	movs	r1, #6
 800efa6:	202c      	movs	r0, #44	@ 0x2c
 800efa8:	f7ff fcc6 	bl	800e938 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 800efac:	f7ff fd40 	bl	800ea30 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 800efb0:	2200      	movs	r2, #0
 800efb2:	2103      	movs	r1, #3
 800efb4:	2036      	movs	r0, #54	@ 0x36
 800efb6:	f7ff fcbf 	bl	800e938 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 800efba:	2001      	movs	r0, #1
 800efbc:	f000 f849 	bl	800f052 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 800efc0:	22f0      	movs	r2, #240	@ 0xf0
 800efc2:	2103      	movs	r1, #3
 800efc4:	2036      	movs	r0, #54	@ 0x36
 800efc6:	f7ff fcb7 	bl	800e938 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 800efca:	4b03      	ldr	r3, [pc, #12]	@ (800efd8 <dwt_softreset+0x48>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	2200      	movs	r2, #0
 800efd0:	755a      	strb	r2, [r3, #21]
}
 800efd2:	46c0      	nop			@ (mov r8, r8)
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}
 800efd8:	200001dc 	.word	0x200001dc

0800efdc <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b084      	sub	sp, #16
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	0002      	movs	r2, r0
 800efe4:	1dfb      	adds	r3, r7, #7
 800efe6:	701a      	strb	r2, [r3, #0]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 800efe8:	1dfb      	adds	r3, r7, #7
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	b25b      	sxtb	r3, r3
 800efee:	221f      	movs	r2, #31
 800eff0:	4013      	ands	r3, r2
 800eff2:	b25b      	sxtb	r3, r3
 800eff4:	2260      	movs	r2, #96	@ 0x60
 800eff6:	4313      	orrs	r3, r2
 800eff8:	b25a      	sxtb	r2, r3
 800effa:	210f      	movs	r1, #15
 800effc:	187b      	adds	r3, r7, r1
 800effe:	701a      	strb	r2, [r3, #0]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 800f000:	187b      	adds	r3, r7, r1
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	001a      	movs	r2, r3
 800f006:	210e      	movs	r1, #14
 800f008:	202b      	movs	r0, #43	@ 0x2b
 800f00a:	f7ff fc95 	bl	800e938 <dwt_write8bitoffsetreg>
}
 800f00e:	46c0      	nop			@ (mov r8, r8)
 800f010:	46bd      	mov	sp, r7
 800f012:	b004      	add	sp, #16
 800f014:	bd80      	pop	{r7, pc}

0800f016 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 800f016:	b580      	push	{r7, lr}
 800f018:	b082      	sub	sp, #8
 800f01a:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800f01c:	f000 f9e2 	bl	800f3e4 <port_GetEXT_IRQStatus>
 800f020:	0003      	movs	r3, r0
 800f022:	607b      	str	r3, [r7, #4]

	if(s) {
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d001      	beq.n	800f02e <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 800f02a:	f000 f9cb 	bl	800f3c4 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 800f02e:	687b      	ldr	r3, [r7, #4]
}
 800f030:	0018      	movs	r0, r3
 800f032:	46bd      	mov	sp, r7
 800f034:	b002      	add	sp, #8
 800f036:	bd80      	pop	{r7, pc}

0800f038 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b082      	sub	sp, #8
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d001      	beq.n	800f04a <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 800f046:	f000 f9c5 	bl	800f3d4 <port_EnableEXT_IRQ>
	}
}
 800f04a:	46c0      	nop			@ (mov r8, r8)
 800f04c:	46bd      	mov	sp, r7
 800f04e:	b002      	add	sp, #8
 800f050:	bd80      	pop	{r7, pc}

0800f052 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 800f052:	b580      	push	{r7, lr}
 800f054:	b082      	sub	sp, #8
 800f056:	af00      	add	r7, sp, #0
 800f058:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	0018      	movs	r0, r3
 800f05e:	f000 f8e2 	bl	800f226 <Sleep>
}
 800f062:	46c0      	nop			@ (mov r8, r8)
 800f064:	46bd      	mov	sp, r7
 800f066:	b002      	add	sp, #8
 800f068:	bd80      	pop	{r7, pc}
	...

0800f06c <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 800f06c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f06e:	46d6      	mov	lr, sl
 800f070:	4646      	mov	r6, r8
 800f072:	464f      	mov	r7, r9
 800f074:	b5c0      	push	{r6, r7, lr}
 800f076:	4682      	mov	sl, r0
 800f078:	4689      	mov	r9, r1
 800f07a:	0015      	movs	r5, r2
 800f07c:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800f07e:	f7ff ffca 	bl	800f016 <decamutexon>
 800f082:	0006      	movs	r6, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800f084:	4c14      	ldr	r4, [pc, #80]	@ (800f0d8 <writetospi+0x6c>)
 800f086:	0020      	movs	r0, r4
 800f088:	f7f8 fc84 	bl	8007994 <HAL_SPI_GetState>
 800f08c:	2801      	cmp	r0, #1
 800f08e:	d1fa      	bne.n	800f086 <writetospi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800f090:	308f      	adds	r0, #143	@ 0x8f
 800f092:	2200      	movs	r2, #0
 800f094:	2110      	movs	r1, #16
 800f096:	05c0      	lsls	r0, r0, #23
 800f098:	f7f5 fac5 	bl	8004626 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 800f09c:	2301      	movs	r3, #1
 800f09e:	4652      	mov	r2, sl
 800f0a0:	4649      	mov	r1, r9
 800f0a2:	0020      	movs	r0, r4
 800f0a4:	425b      	negs	r3, r3
 800f0a6:	f7f7 ffe1 	bl	800706c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	4641      	mov	r1, r8
 800f0ae:	b2aa      	uxth	r2, r5
 800f0b0:	425b      	negs	r3, r3
 800f0b2:	0020      	movs	r0, r4
 800f0b4:	f7f7 ffda 	bl	800706c <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800f0b8:	2090      	movs	r0, #144	@ 0x90
 800f0ba:	2201      	movs	r2, #1
 800f0bc:	2110      	movs	r1, #16
 800f0be:	05c0      	lsls	r0, r0, #23
 800f0c0:	f7f5 fab1 	bl	8004626 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800f0c4:	0030      	movs	r0, r6
 800f0c6:	f7ff ffb7 	bl	800f038 <decamutexoff>

    return 0;
} // end writetospi()
 800f0ca:	2000      	movs	r0, #0
 800f0cc:	bce0      	pop	{r5, r6, r7}
 800f0ce:	46ba      	mov	sl, r7
 800f0d0:	46b1      	mov	r9, r6
 800f0d2:	46a8      	mov	r8, r5
 800f0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0d6:	46c0      	nop			@ (mov r8, r8)
 800f0d8:	20000464 	.word	0x20000464

0800f0dc <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 800f0dc:	b570      	push	{r4, r5, r6, lr}
 800f0de:	46de      	mov	lr, fp
 800f0e0:	4656      	mov	r6, sl
 800f0e2:	464d      	mov	r5, r9
 800f0e4:	4644      	mov	r4, r8
 800f0e6:	b570      	push	{r4, r5, r6, lr}
 800f0e8:	4688      	mov	r8, r1
 800f0ea:	0006      	movs	r6, r0
 800f0ec:	4691      	mov	r9, r2
 800f0ee:	469b      	mov	fp, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800f0f0:	f7ff ff91 	bl	800f016 <decamutexon>
 800f0f4:	4682      	mov	sl, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800f0f6:	4d18      	ldr	r5, [pc, #96]	@ (800f158 <readfromspi+0x7c>)
 800f0f8:	0028      	movs	r0, r5
 800f0fa:	f7f8 fc4b 	bl	8007994 <HAL_SPI_GetState>
 800f0fe:	2801      	cmp	r0, #1
 800f100:	d1fa      	bne.n	800f0f8 <readfromspi+0x1c>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800f102:	308f      	adds	r0, #143	@ 0x8f
 800f104:	2200      	movs	r2, #0
 800f106:	2110      	movs	r1, #16
 800f108:	05c0      	lsls	r0, r0, #23
 800f10a:	f7f5 fa8c 	bl	8004626 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 800f10e:	2e00      	cmp	r6, #0
 800f110:	d00b      	beq.n	800f12a <readfromspi+0x4e>
 800f112:	2400      	movs	r4, #0
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 800f114:	4642      	mov	r2, r8
 800f116:	2301      	movs	r3, #1
 800f118:	1911      	adds	r1, r2, r4
 800f11a:	0028      	movs	r0, r5
 800f11c:	2201      	movs	r2, #1
 800f11e:	425b      	negs	r3, r3
    for(i=0; i<headerLength; i++)
 800f120:	3401      	adds	r4, #1
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 800f122:	f7f7 ffa3 	bl	800706c <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 800f126:	42b4      	cmp	r4, r6
 800f128:	dbf4      	blt.n	800f114 <readfromspi+0x38>
    //     }

    //     (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
    // }

    HAL_SPI_Receive(&hspi1, readBuffer, readlength, 100);
 800f12a:	464b      	mov	r3, r9
 800f12c:	4659      	mov	r1, fp
 800f12e:	0028      	movs	r0, r5
 800f130:	b29a      	uxth	r2, r3
 800f132:	2364      	movs	r3, #100	@ 0x64
 800f134:	f7f8 f8fa 	bl	800732c <HAL_SPI_Receive>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800f138:	2090      	movs	r0, #144	@ 0x90
 800f13a:	2201      	movs	r2, #1
 800f13c:	2110      	movs	r1, #16
 800f13e:	05c0      	lsls	r0, r0, #23
 800f140:	f7f5 fa71 	bl	8004626 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800f144:	4650      	mov	r0, sl
 800f146:	f7ff ff77 	bl	800f038 <decamutexoff>

    return 0;
} // end readfromspi()
 800f14a:	2000      	movs	r0, #0
 800f14c:	bc78      	pop	{r3, r4, r5, r6}
 800f14e:	46b3      	mov	fp, r6
 800f150:	46aa      	mov	sl, r5
 800f152:	46a1      	mov	r9, r4
 800f154:	4698      	mov	r8, r3
 800f156:	bd70      	pop	{r4, r5, r6, pc}
 800f158:	20000464 	.word	0x20000464

0800f15c <__NVIC_EnableIRQ>:
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b082      	sub	sp, #8
 800f160:	af00      	add	r7, sp, #0
 800f162:	0002      	movs	r2, r0
 800f164:	1dfb      	adds	r3, r7, #7
 800f166:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f168:	1dfb      	adds	r3, r7, #7
 800f16a:	781b      	ldrb	r3, [r3, #0]
 800f16c:	2b7f      	cmp	r3, #127	@ 0x7f
 800f16e:	d809      	bhi.n	800f184 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f170:	1dfb      	adds	r3, r7, #7
 800f172:	781b      	ldrb	r3, [r3, #0]
 800f174:	001a      	movs	r2, r3
 800f176:	231f      	movs	r3, #31
 800f178:	401a      	ands	r2, r3
 800f17a:	4b04      	ldr	r3, [pc, #16]	@ (800f18c <__NVIC_EnableIRQ+0x30>)
 800f17c:	2101      	movs	r1, #1
 800f17e:	4091      	lsls	r1, r2
 800f180:	000a      	movs	r2, r1
 800f182:	601a      	str	r2, [r3, #0]
}
 800f184:	46c0      	nop			@ (mov r8, r8)
 800f186:	46bd      	mov	sp, r7
 800f188:	b002      	add	sp, #8
 800f18a:	bd80      	pop	{r7, pc}
 800f18c:	e000e100 	.word	0xe000e100

0800f190 <__NVIC_DisableIRQ>:
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b082      	sub	sp, #8
 800f194:	af00      	add	r7, sp, #0
 800f196:	0002      	movs	r2, r0
 800f198:	1dfb      	adds	r3, r7, #7
 800f19a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f19c:	1dfb      	adds	r3, r7, #7
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	2b7f      	cmp	r3, #127	@ 0x7f
 800f1a2:	d810      	bhi.n	800f1c6 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f1a4:	1dfb      	adds	r3, r7, #7
 800f1a6:	781b      	ldrb	r3, [r3, #0]
 800f1a8:	001a      	movs	r2, r3
 800f1aa:	231f      	movs	r3, #31
 800f1ac:	4013      	ands	r3, r2
 800f1ae:	4908      	ldr	r1, [pc, #32]	@ (800f1d0 <__NVIC_DisableIRQ+0x40>)
 800f1b0:	2201      	movs	r2, #1
 800f1b2:	409a      	lsls	r2, r3
 800f1b4:	0013      	movs	r3, r2
 800f1b6:	2280      	movs	r2, #128	@ 0x80
 800f1b8:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 800f1ba:	f3bf 8f4f 	dsb	sy
}
 800f1be:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800f1c0:	f3bf 8f6f 	isb	sy
}
 800f1c4:	46c0      	nop			@ (mov r8, r8)
}
 800f1c6:	46c0      	nop			@ (mov r8, r8)
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	b002      	add	sp, #8
 800f1cc:	bd80      	pop	{r7, pc}
 800f1ce:	46c0      	nop			@ (mov r8, r8)
 800f1d0:	e000e100 	.word	0xe000e100

0800f1d4 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(useconds_t usec)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b084      	sub	sp, #16
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 800f1dc:	2300      	movs	r3, #0
 800f1de:	60fb      	str	r3, [r7, #12]
 800f1e0:	e014      	b.n	800f20c <usleep+0x38>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	60bb      	str	r3, [r7, #8]
 800f1e6:	e004      	b.n	800f1f2 <usleep+0x1e>
        {
            __NOP();
 800f1e8:	46c0      	nop			@ (mov r8, r8)
            __NOP();
 800f1ea:	46c0      	nop			@ (mov r8, r8)
        for(j=0;j<2;j++)
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	3301      	adds	r3, #1
 800f1f0:	60bb      	str	r3, [r7, #8]
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	2201      	movs	r2, #1
 800f1f6:	0fd8      	lsrs	r0, r3, #31
 800f1f8:	17d1      	asrs	r1, r2, #31
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	4148      	adcs	r0, r1
 800f1fe:	0003      	movs	r3, r0
 800f200:	b2db      	uxtb	r3, r3
 800f202:	2b00      	cmp	r3, #0
 800f204:	d1f0      	bne.n	800f1e8 <usleep+0x14>
    for(i=0;i<usec;i++)
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	3301      	adds	r3, #1
 800f20a:	60fb      	str	r3, [r7, #12]
 800f20c:	68fa      	ldr	r2, [r7, #12]
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	429a      	cmp	r2, r3
 800f212:	419b      	sbcs	r3, r3
 800f214:	425b      	negs	r3, r3
 800f216:	b2db      	uxtb	r3, r3
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d1e2      	bne.n	800f1e2 <usleep+0xe>
        }
    }
    return 0;
 800f21c:	2300      	movs	r3, #0
}
 800f21e:	0018      	movs	r0, r3
 800f220:	46bd      	mov	sp, r7
 800f222:	b004      	add	sp, #16
 800f224:	bd80      	pop	{r7, pc}

0800f226 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 800f226:	b580      	push	{r7, lr}
 800f228:	b082      	sub	sp, #8
 800f22a:	af00      	add	r7, sp, #0
 800f22c:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	0018      	movs	r0, r3
 800f232:	f7f4 facb 	bl	80037cc <HAL_Delay>
}
 800f236:	46c0      	nop			@ (mov r8, r8)
 800f238:	46bd      	mov	sp, r7
 800f23a:	b002      	add	sp, #8
 800f23c:	bd80      	pop	{r7, pc}
	...

0800f240 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b082      	sub	sp, #8
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 800f248:	4a09      	ldr	r2, [pc, #36]	@ (800f270 <EXTI_GetITEnStatus+0x30>)
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	095b      	lsrs	r3, r3, #5
 800f24e:	009b      	lsls	r3, r3, #2
 800f250:	589a      	ldr	r2, [r3, r2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	211f      	movs	r1, #31
 800f256:	400b      	ands	r3, r1
 800f258:	40da      	lsrs	r2, r3
 800f25a:	0013      	movs	r3, r2
 800f25c:	2201      	movs	r2, #1
 800f25e:	4013      	ands	r3, r2
 800f260:	1e5a      	subs	r2, r3, #1
 800f262:	4193      	sbcs	r3, r2
 800f264:	b2db      	uxtb	r3, r3
}
 800f266:	0018      	movs	r0, r3
 800f268:	46bd      	mov	sp, r7
 800f26a:	b002      	add	sp, #8
 800f26c:	bd80      	pop	{r7, pc}
 800f26e:	46c0      	nop			@ (mov r8, r8)
 800f270:	e000e100 	.word	0xe000e100

0800f274 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b086      	sub	sp, #24
 800f278:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 800f27a:	1d3b      	adds	r3, r7, #4
 800f27c:	2204      	movs	r2, #4
 800f27e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800f280:	1d3b      	adds	r3, r7, #4
 800f282:	2211      	movs	r2, #17
 800f284:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f286:	1d3b      	adds	r3, r7, #4
 800f288:	2200      	movs	r2, #0
 800f28a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800f28c:	1d3a      	adds	r2, r7, #4
 800f28e:	2390      	movs	r3, #144	@ 0x90
 800f290:	05db      	lsls	r3, r3, #23
 800f292:	0011      	movs	r1, r2
 800f294:	0018      	movs	r0, r3
 800f296:	f7f5 f831 	bl	80042fc <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 800f29a:	2390      	movs	r3, #144	@ 0x90
 800f29c:	05db      	lsls	r3, r3, #23
 800f29e:	2200      	movs	r2, #0
 800f2a0:	2104      	movs	r1, #4
 800f2a2:	0018      	movs	r0, r3
 800f2a4:	f7f5 f9bf 	bl	8004626 <HAL_GPIO_WritePin>

    usleep(1);
 800f2a8:	2001      	movs	r0, #1
 800f2aa:	f7ff ff93 	bl	800f1d4 <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 800f2ae:	2000      	movs	r0, #0
 800f2b0:	f000 f807 	bl	800f2c2 <setup_DW1000RSTnIRQ>



    Sleep(2);
 800f2b4:	2002      	movs	r0, #2
 800f2b6:	f7ff ffb6 	bl	800f226 <Sleep>
}
 800f2ba:	46c0      	nop			@ (mov r8, r8)
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	b006      	add	sp, #24
 800f2c0:	bd80      	pop	{r7, pc}

0800f2c2 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI2 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 800f2c2:	b580      	push	{r7, lr}
 800f2c4:	b088      	sub	sp, #32
 800f2c6:	af00      	add	r7, sp, #0
 800f2c8:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d01a      	beq.n	800f306 <setup_DW1000RSTnIRQ+0x44>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 800f2d0:	210c      	movs	r1, #12
 800f2d2:	187b      	adds	r3, r7, r1
 800f2d4:	2204      	movs	r2, #4
 800f2d6:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800f2d8:	187b      	adds	r3, r7, r1
 800f2da:	2288      	movs	r2, #136	@ 0x88
 800f2dc:	0352      	lsls	r2, r2, #13
 800f2de:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2e0:	187b      	adds	r3, r7, r1
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	609a      	str	r2, [r3, #8]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800f2e6:	187a      	adds	r2, r7, r1
 800f2e8:	2390      	movs	r3, #144	@ 0x90
 800f2ea:	05db      	lsls	r3, r3, #23
 800f2ec:	0011      	movs	r1, r2
 800f2ee:	0018      	movs	r0, r3
 800f2f0:	f7f5 f804 	bl	80042fc <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI2_IRQn);     //pin #0 -> EXTI #0
 800f2f4:	2006      	movs	r0, #6
 800f2f6:	f7f4 fdbe 	bl	8003e76 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	2105      	movs	r1, #5
 800f2fe:	2006      	movs	r0, #6
 800f300:	f7f4 fda4 	bl	8003e4c <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 800f304:	e01d      	b.n	800f342 <setup_DW1000RSTnIRQ+0x80>
        HAL_NVIC_DisableIRQ(EXTI2_IRQn);    //pin #0 -> EXTI #0
 800f306:	2006      	movs	r0, #6
 800f308:	f7f4 fdc5 	bl	8003e96 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 800f30c:	210c      	movs	r1, #12
 800f30e:	187b      	adds	r3, r7, r1
 800f310:	2204      	movs	r2, #4
 800f312:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800f314:	187b      	adds	r3, r7, r1
 800f316:	2211      	movs	r2, #17
 800f318:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f31a:	187b      	adds	r3, r7, r1
 800f31c:	2200      	movs	r2, #0
 800f31e:	609a      	str	r2, [r3, #8]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800f320:	187b      	adds	r3, r7, r1
 800f322:	2203      	movs	r2, #3
 800f324:	60da      	str	r2, [r3, #12]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800f326:	187a      	adds	r2, r7, r1
 800f328:	2390      	movs	r3, #144	@ 0x90
 800f32a:	05db      	lsls	r3, r3, #23
 800f32c:	0011      	movs	r1, r2
 800f32e:	0018      	movs	r0, r3
 800f330:	f7f4 ffe4 	bl	80042fc <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 800f334:	2390      	movs	r3, #144	@ 0x90
 800f336:	05db      	lsls	r3, r3, #23
 800f338:	2201      	movs	r2, #1
 800f33a:	2104      	movs	r1, #4
 800f33c:	0018      	movs	r0, r3
 800f33e:	f7f5 f972 	bl	8004626 <HAL_GPIO_WritePin>
}
 800f342:	46c0      	nop			@ (mov r8, r8)
 800f344:	46bd      	mov	sp, r7
 800f346:	b008      	add	sp, #32
 800f348:	bd80      	pop	{r7, pc}
	...

0800f34c <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800f350:	4b04      	ldr	r3, [pc, #16]	@ (800f364 <port_set_dw1000_slowrate+0x18>)
 800f352:	2218      	movs	r2, #24
 800f354:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800f356:	4b03      	ldr	r3, [pc, #12]	@ (800f364 <port_set_dw1000_slowrate+0x18>)
 800f358:	0018      	movs	r0, r3
 800f35a:	f7f7 fdcf 	bl	8006efc <HAL_SPI_Init>
}
 800f35e:	46c0      	nop			@ (mov r8, r8)
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}
 800f364:	20000464 	.word	0x20000464

0800f368 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f36c:	4b04      	ldr	r3, [pc, #16]	@ (800f380 <port_set_dw1000_fastrate+0x18>)
 800f36e:	2200      	movs	r2, #0
 800f370:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800f372:	4b03      	ldr	r3, [pc, #12]	@ (800f380 <port_set_dw1000_fastrate+0x18>)
 800f374:	0018      	movs	r0, r3
 800f376:	f7f7 fdc1 	bl	8006efc <HAL_SPI_Init>
}
 800f37a:	46c0      	nop			@ (mov r8, r8)
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}
 800f380:	20000464 	.word	0x20000464

0800f384 <HAL_GPIO_EXTI_Callback>:
/* @fn      HAL_GPIO_EXTI_Callback
 * @brief   IRQ HAL call-back for all EXTI configured lines
 *          i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b082      	sub	sp, #8
 800f388:	af00      	add	r7, sp, #0
 800f38a:	0002      	movs	r2, r0
 800f38c:	1dbb      	adds	r3, r7, #6
 800f38e:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == DW_IRQn_Pin)
 800f390:	1dbb      	adds	r3, r7, #6
 800f392:	881b      	ldrh	r3, [r3, #0]
 800f394:	2b20      	cmp	r3, #32
 800f396:	d101      	bne.n	800f39c <HAL_GPIO_EXTI_Callback+0x18>
    {
        process_deca_irq();
 800f398:	f000 f804 	bl	800f3a4 <process_deca_irq>
    }
}
 800f39c:	46c0      	nop			@ (mov r8, r8)
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	b002      	add	sp, #8
 800f3a2:	bd80      	pop	{r7, pc}

0800f3a4 <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	af00      	add	r7, sp, #0
    while(port_CheckEXT_IRQ() != 0)
 800f3a8:	e002      	b.n	800f3b0 <process_deca_irq+0xc>
    {

        port_deca_isr();
 800f3aa:	4b05      	ldr	r3, [pc, #20]	@ (800f3c0 <process_deca_irq+0x1c>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	4798      	blx	r3
    while(port_CheckEXT_IRQ() != 0)
 800f3b0:	f000 f822 	bl	800f3f8 <port_CheckEXT_IRQ>
 800f3b4:	1e03      	subs	r3, r0, #0
 800f3b6:	d1f8      	bne.n	800f3aa <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 800f3b8:	46c0      	nop			@ (mov r8, r8)
 800f3ba:	46c0      	nop			@ (mov r8, r8)
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}
 800f3c0:	20001c7c 	.word	0x20001c7c

0800f3c4 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 800f3c8:	2007      	movs	r0, #7
 800f3ca:	f7ff fee1 	bl	800f190 <__NVIC_DisableIRQ>
}
 800f3ce:	46c0      	nop			@ (mov r8, r8)
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 800f3d8:	2007      	movs	r0, #7
 800f3da:	f7ff febf 	bl	800f15c <__NVIC_EnableIRQ>
}
 800f3de:	46c0      	nop			@ (mov r8, r8)
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}

0800f3e4 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 800f3e8:	2007      	movs	r0, #7
 800f3ea:	f7ff ff29 	bl	800f240 <EXTI_GetITEnStatus>
 800f3ee:	0003      	movs	r3, r0
}
 800f3f0:	0018      	movs	r0, r3
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}
	...

0800f3f8 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DECAIRQ_GPIO, DW_IRQn_Pin);
 800f3fc:	4b04      	ldr	r3, [pc, #16]	@ (800f410 <port_CheckEXT_IRQ+0x18>)
 800f3fe:	2120      	movs	r1, #32
 800f400:	0018      	movs	r0, r3
 800f402:	f7f5 f8f3 	bl	80045ec <HAL_GPIO_ReadPin>
 800f406:	0003      	movs	r3, r0
}
 800f408:	0018      	movs	r0, r3
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}
 800f40e:	46c0      	nop			@ (mov r8, r8)
 800f410:	48000400 	.word	0x48000400

0800f414 <__cvt>:
 800f414:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f416:	001f      	movs	r7, r3
 800f418:	2300      	movs	r3, #0
 800f41a:	0016      	movs	r6, r2
 800f41c:	b08b      	sub	sp, #44	@ 0x2c
 800f41e:	429f      	cmp	r7, r3
 800f420:	da04      	bge.n	800f42c <__cvt+0x18>
 800f422:	2180      	movs	r1, #128	@ 0x80
 800f424:	0609      	lsls	r1, r1, #24
 800f426:	187b      	adds	r3, r7, r1
 800f428:	001f      	movs	r7, r3
 800f42a:	232d      	movs	r3, #45	@ 0x2d
 800f42c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f42e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800f430:	7013      	strb	r3, [r2, #0]
 800f432:	2320      	movs	r3, #32
 800f434:	2203      	movs	r2, #3
 800f436:	439d      	bics	r5, r3
 800f438:	2d46      	cmp	r5, #70	@ 0x46
 800f43a:	d007      	beq.n	800f44c <__cvt+0x38>
 800f43c:	002b      	movs	r3, r5
 800f43e:	3b45      	subs	r3, #69	@ 0x45
 800f440:	4259      	negs	r1, r3
 800f442:	414b      	adcs	r3, r1
 800f444:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800f446:	3a01      	subs	r2, #1
 800f448:	18cb      	adds	r3, r1, r3
 800f44a:	9310      	str	r3, [sp, #64]	@ 0x40
 800f44c:	ab09      	add	r3, sp, #36	@ 0x24
 800f44e:	9304      	str	r3, [sp, #16]
 800f450:	ab08      	add	r3, sp, #32
 800f452:	9303      	str	r3, [sp, #12]
 800f454:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f456:	9200      	str	r2, [sp, #0]
 800f458:	9302      	str	r3, [sp, #8]
 800f45a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f45c:	0032      	movs	r2, r6
 800f45e:	9301      	str	r3, [sp, #4]
 800f460:	003b      	movs	r3, r7
 800f462:	f000 fe8f 	bl	8010184 <_dtoa_r>
 800f466:	0004      	movs	r4, r0
 800f468:	2d47      	cmp	r5, #71	@ 0x47
 800f46a:	d11b      	bne.n	800f4a4 <__cvt+0x90>
 800f46c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f46e:	07db      	lsls	r3, r3, #31
 800f470:	d511      	bpl.n	800f496 <__cvt+0x82>
 800f472:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f474:	18c3      	adds	r3, r0, r3
 800f476:	9307      	str	r3, [sp, #28]
 800f478:	2200      	movs	r2, #0
 800f47a:	2300      	movs	r3, #0
 800f47c:	0030      	movs	r0, r6
 800f47e:	0039      	movs	r1, r7
 800f480:	f7f0 ffe4 	bl	800044c <__aeabi_dcmpeq>
 800f484:	2800      	cmp	r0, #0
 800f486:	d001      	beq.n	800f48c <__cvt+0x78>
 800f488:	9b07      	ldr	r3, [sp, #28]
 800f48a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f48c:	2230      	movs	r2, #48	@ 0x30
 800f48e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f490:	9907      	ldr	r1, [sp, #28]
 800f492:	428b      	cmp	r3, r1
 800f494:	d320      	bcc.n	800f4d8 <__cvt+0xc4>
 800f496:	0020      	movs	r0, r4
 800f498:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f49a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f49c:	1b1b      	subs	r3, r3, r4
 800f49e:	6013      	str	r3, [r2, #0]
 800f4a0:	b00b      	add	sp, #44	@ 0x2c
 800f4a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f4a6:	18c3      	adds	r3, r0, r3
 800f4a8:	9307      	str	r3, [sp, #28]
 800f4aa:	2d46      	cmp	r5, #70	@ 0x46
 800f4ac:	d1e4      	bne.n	800f478 <__cvt+0x64>
 800f4ae:	7803      	ldrb	r3, [r0, #0]
 800f4b0:	2b30      	cmp	r3, #48	@ 0x30
 800f4b2:	d10c      	bne.n	800f4ce <__cvt+0xba>
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	0030      	movs	r0, r6
 800f4ba:	0039      	movs	r1, r7
 800f4bc:	f7f0 ffc6 	bl	800044c <__aeabi_dcmpeq>
 800f4c0:	2800      	cmp	r0, #0
 800f4c2:	d104      	bne.n	800f4ce <__cvt+0xba>
 800f4c4:	2301      	movs	r3, #1
 800f4c6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800f4c8:	1a9b      	subs	r3, r3, r2
 800f4ca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f4cc:	6013      	str	r3, [r2, #0]
 800f4ce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f4d0:	9a07      	ldr	r2, [sp, #28]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	18d3      	adds	r3, r2, r3
 800f4d6:	e7ce      	b.n	800f476 <__cvt+0x62>
 800f4d8:	1c59      	adds	r1, r3, #1
 800f4da:	9109      	str	r1, [sp, #36]	@ 0x24
 800f4dc:	701a      	strb	r2, [r3, #0]
 800f4de:	e7d6      	b.n	800f48e <__cvt+0x7a>

0800f4e0 <__exponent>:
 800f4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4e2:	232b      	movs	r3, #43	@ 0x2b
 800f4e4:	b085      	sub	sp, #20
 800f4e6:	0005      	movs	r5, r0
 800f4e8:	1e0c      	subs	r4, r1, #0
 800f4ea:	7002      	strb	r2, [r0, #0]
 800f4ec:	da01      	bge.n	800f4f2 <__exponent+0x12>
 800f4ee:	424c      	negs	r4, r1
 800f4f0:	3302      	adds	r3, #2
 800f4f2:	706b      	strb	r3, [r5, #1]
 800f4f4:	2c09      	cmp	r4, #9
 800f4f6:	dd2c      	ble.n	800f552 <__exponent+0x72>
 800f4f8:	ab02      	add	r3, sp, #8
 800f4fa:	1dde      	adds	r6, r3, #7
 800f4fc:	0020      	movs	r0, r4
 800f4fe:	210a      	movs	r1, #10
 800f500:	f7f0 ff8e 	bl	8000420 <__aeabi_idivmod>
 800f504:	0037      	movs	r7, r6
 800f506:	3130      	adds	r1, #48	@ 0x30
 800f508:	3e01      	subs	r6, #1
 800f50a:	0020      	movs	r0, r4
 800f50c:	7031      	strb	r1, [r6, #0]
 800f50e:	210a      	movs	r1, #10
 800f510:	9401      	str	r4, [sp, #4]
 800f512:	f7f0 fe9f 	bl	8000254 <__divsi3>
 800f516:	9b01      	ldr	r3, [sp, #4]
 800f518:	0004      	movs	r4, r0
 800f51a:	2b63      	cmp	r3, #99	@ 0x63
 800f51c:	dcee      	bgt.n	800f4fc <__exponent+0x1c>
 800f51e:	1eba      	subs	r2, r7, #2
 800f520:	1ca8      	adds	r0, r5, #2
 800f522:	0001      	movs	r1, r0
 800f524:	0013      	movs	r3, r2
 800f526:	3430      	adds	r4, #48	@ 0x30
 800f528:	7014      	strb	r4, [r2, #0]
 800f52a:	ac02      	add	r4, sp, #8
 800f52c:	3407      	adds	r4, #7
 800f52e:	429c      	cmp	r4, r3
 800f530:	d80a      	bhi.n	800f548 <__exponent+0x68>
 800f532:	2300      	movs	r3, #0
 800f534:	4294      	cmp	r4, r2
 800f536:	d303      	bcc.n	800f540 <__exponent+0x60>
 800f538:	3309      	adds	r3, #9
 800f53a:	aa02      	add	r2, sp, #8
 800f53c:	189b      	adds	r3, r3, r2
 800f53e:	1bdb      	subs	r3, r3, r7
 800f540:	18c0      	adds	r0, r0, r3
 800f542:	1b40      	subs	r0, r0, r5
 800f544:	b005      	add	sp, #20
 800f546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f548:	781c      	ldrb	r4, [r3, #0]
 800f54a:	3301      	adds	r3, #1
 800f54c:	700c      	strb	r4, [r1, #0]
 800f54e:	3101      	adds	r1, #1
 800f550:	e7eb      	b.n	800f52a <__exponent+0x4a>
 800f552:	2330      	movs	r3, #48	@ 0x30
 800f554:	18e4      	adds	r4, r4, r3
 800f556:	70ab      	strb	r3, [r5, #2]
 800f558:	1d28      	adds	r0, r5, #4
 800f55a:	70ec      	strb	r4, [r5, #3]
 800f55c:	e7f1      	b.n	800f542 <__exponent+0x62>
	...

0800f560 <_printf_float>:
 800f560:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f562:	b097      	sub	sp, #92	@ 0x5c
 800f564:	000d      	movs	r5, r1
 800f566:	920a      	str	r2, [sp, #40]	@ 0x28
 800f568:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800f56a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f56c:	9009      	str	r0, [sp, #36]	@ 0x24
 800f56e:	f000 fcf9 	bl	800ff64 <_localeconv_r>
 800f572:	6803      	ldr	r3, [r0, #0]
 800f574:	0018      	movs	r0, r3
 800f576:	930d      	str	r3, [sp, #52]	@ 0x34
 800f578:	f7f0 fdc6 	bl	8000108 <strlen>
 800f57c:	2300      	movs	r3, #0
 800f57e:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f580:	9314      	str	r3, [sp, #80]	@ 0x50
 800f582:	7e2b      	ldrb	r3, [r5, #24]
 800f584:	2207      	movs	r2, #7
 800f586:	930c      	str	r3, [sp, #48]	@ 0x30
 800f588:	682b      	ldr	r3, [r5, #0]
 800f58a:	930e      	str	r3, [sp, #56]	@ 0x38
 800f58c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f58e:	6823      	ldr	r3, [r4, #0]
 800f590:	05c9      	lsls	r1, r1, #23
 800f592:	d545      	bpl.n	800f620 <_printf_float+0xc0>
 800f594:	189b      	adds	r3, r3, r2
 800f596:	4393      	bics	r3, r2
 800f598:	001a      	movs	r2, r3
 800f59a:	3208      	adds	r2, #8
 800f59c:	6022      	str	r2, [r4, #0]
 800f59e:	2201      	movs	r2, #1
 800f5a0:	681e      	ldr	r6, [r3, #0]
 800f5a2:	685f      	ldr	r7, [r3, #4]
 800f5a4:	007b      	lsls	r3, r7, #1
 800f5a6:	085b      	lsrs	r3, r3, #1
 800f5a8:	9311      	str	r3, [sp, #68]	@ 0x44
 800f5aa:	9610      	str	r6, [sp, #64]	@ 0x40
 800f5ac:	64ae      	str	r6, [r5, #72]	@ 0x48
 800f5ae:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800f5b0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f5b2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f5b4:	4ba7      	ldr	r3, [pc, #668]	@ (800f854 <_printf_float+0x2f4>)
 800f5b6:	4252      	negs	r2, r2
 800f5b8:	f7f2 fed4 	bl	8002364 <__aeabi_dcmpun>
 800f5bc:	2800      	cmp	r0, #0
 800f5be:	d131      	bne.n	800f624 <_printf_float+0xc4>
 800f5c0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f5c2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f5c4:	2201      	movs	r2, #1
 800f5c6:	4ba3      	ldr	r3, [pc, #652]	@ (800f854 <_printf_float+0x2f4>)
 800f5c8:	4252      	negs	r2, r2
 800f5ca:	f7f0 ff4f 	bl	800046c <__aeabi_dcmple>
 800f5ce:	2800      	cmp	r0, #0
 800f5d0:	d128      	bne.n	800f624 <_printf_float+0xc4>
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	0030      	movs	r0, r6
 800f5d8:	0039      	movs	r1, r7
 800f5da:	f7f0 ff3d 	bl	8000458 <__aeabi_dcmplt>
 800f5de:	2800      	cmp	r0, #0
 800f5e0:	d003      	beq.n	800f5ea <_printf_float+0x8a>
 800f5e2:	002b      	movs	r3, r5
 800f5e4:	222d      	movs	r2, #45	@ 0x2d
 800f5e6:	3343      	adds	r3, #67	@ 0x43
 800f5e8:	701a      	strb	r2, [r3, #0]
 800f5ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f5ec:	4f9a      	ldr	r7, [pc, #616]	@ (800f858 <_printf_float+0x2f8>)
 800f5ee:	2b47      	cmp	r3, #71	@ 0x47
 800f5f0:	d800      	bhi.n	800f5f4 <_printf_float+0x94>
 800f5f2:	4f9a      	ldr	r7, [pc, #616]	@ (800f85c <_printf_float+0x2fc>)
 800f5f4:	2303      	movs	r3, #3
 800f5f6:	2400      	movs	r4, #0
 800f5f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f5fa:	612b      	str	r3, [r5, #16]
 800f5fc:	3301      	adds	r3, #1
 800f5fe:	439a      	bics	r2, r3
 800f600:	602a      	str	r2, [r5, #0]
 800f602:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f604:	0029      	movs	r1, r5
 800f606:	9300      	str	r3, [sp, #0]
 800f608:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f60a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f60c:	aa15      	add	r2, sp, #84	@ 0x54
 800f60e:	f000 f9e5 	bl	800f9dc <_printf_common>
 800f612:	3001      	adds	r0, #1
 800f614:	d000      	beq.n	800f618 <_printf_float+0xb8>
 800f616:	e09e      	b.n	800f756 <_printf_float+0x1f6>
 800f618:	2001      	movs	r0, #1
 800f61a:	4240      	negs	r0, r0
 800f61c:	b017      	add	sp, #92	@ 0x5c
 800f61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f620:	3307      	adds	r3, #7
 800f622:	e7b8      	b.n	800f596 <_printf_float+0x36>
 800f624:	0032      	movs	r2, r6
 800f626:	003b      	movs	r3, r7
 800f628:	0030      	movs	r0, r6
 800f62a:	0039      	movs	r1, r7
 800f62c:	f7f2 fe9a 	bl	8002364 <__aeabi_dcmpun>
 800f630:	2800      	cmp	r0, #0
 800f632:	d00b      	beq.n	800f64c <_printf_float+0xec>
 800f634:	2f00      	cmp	r7, #0
 800f636:	da03      	bge.n	800f640 <_printf_float+0xe0>
 800f638:	002b      	movs	r3, r5
 800f63a:	222d      	movs	r2, #45	@ 0x2d
 800f63c:	3343      	adds	r3, #67	@ 0x43
 800f63e:	701a      	strb	r2, [r3, #0]
 800f640:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f642:	4f87      	ldr	r7, [pc, #540]	@ (800f860 <_printf_float+0x300>)
 800f644:	2b47      	cmp	r3, #71	@ 0x47
 800f646:	d8d5      	bhi.n	800f5f4 <_printf_float+0x94>
 800f648:	4f86      	ldr	r7, [pc, #536]	@ (800f864 <_printf_float+0x304>)
 800f64a:	e7d3      	b.n	800f5f4 <_printf_float+0x94>
 800f64c:	2220      	movs	r2, #32
 800f64e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800f650:	686b      	ldr	r3, [r5, #4]
 800f652:	4394      	bics	r4, r2
 800f654:	1c5a      	adds	r2, r3, #1
 800f656:	d146      	bne.n	800f6e6 <_printf_float+0x186>
 800f658:	3307      	adds	r3, #7
 800f65a:	606b      	str	r3, [r5, #4]
 800f65c:	2380      	movs	r3, #128	@ 0x80
 800f65e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f660:	00db      	lsls	r3, r3, #3
 800f662:	4313      	orrs	r3, r2
 800f664:	2200      	movs	r2, #0
 800f666:	602b      	str	r3, [r5, #0]
 800f668:	9206      	str	r2, [sp, #24]
 800f66a:	aa14      	add	r2, sp, #80	@ 0x50
 800f66c:	9205      	str	r2, [sp, #20]
 800f66e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f670:	a90a      	add	r1, sp, #40	@ 0x28
 800f672:	9204      	str	r2, [sp, #16]
 800f674:	aa13      	add	r2, sp, #76	@ 0x4c
 800f676:	9203      	str	r2, [sp, #12]
 800f678:	2223      	movs	r2, #35	@ 0x23
 800f67a:	1852      	adds	r2, r2, r1
 800f67c:	9202      	str	r2, [sp, #8]
 800f67e:	9301      	str	r3, [sp, #4]
 800f680:	686b      	ldr	r3, [r5, #4]
 800f682:	0032      	movs	r2, r6
 800f684:	9300      	str	r3, [sp, #0]
 800f686:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f688:	003b      	movs	r3, r7
 800f68a:	f7ff fec3 	bl	800f414 <__cvt>
 800f68e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f690:	0007      	movs	r7, r0
 800f692:	2c47      	cmp	r4, #71	@ 0x47
 800f694:	d12d      	bne.n	800f6f2 <_printf_float+0x192>
 800f696:	1cd3      	adds	r3, r2, #3
 800f698:	db02      	blt.n	800f6a0 <_printf_float+0x140>
 800f69a:	686b      	ldr	r3, [r5, #4]
 800f69c:	429a      	cmp	r2, r3
 800f69e:	dd47      	ble.n	800f730 <_printf_float+0x1d0>
 800f6a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f6a2:	3b02      	subs	r3, #2
 800f6a4:	b2db      	uxtb	r3, r3
 800f6a6:	930c      	str	r3, [sp, #48]	@ 0x30
 800f6a8:	0028      	movs	r0, r5
 800f6aa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f6ac:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f6ae:	3901      	subs	r1, #1
 800f6b0:	3050      	adds	r0, #80	@ 0x50
 800f6b2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f6b4:	f7ff ff14 	bl	800f4e0 <__exponent>
 800f6b8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f6ba:	0004      	movs	r4, r0
 800f6bc:	1813      	adds	r3, r2, r0
 800f6be:	612b      	str	r3, [r5, #16]
 800f6c0:	2a01      	cmp	r2, #1
 800f6c2:	dc02      	bgt.n	800f6ca <_printf_float+0x16a>
 800f6c4:	682a      	ldr	r2, [r5, #0]
 800f6c6:	07d2      	lsls	r2, r2, #31
 800f6c8:	d501      	bpl.n	800f6ce <_printf_float+0x16e>
 800f6ca:	3301      	adds	r3, #1
 800f6cc:	612b      	str	r3, [r5, #16]
 800f6ce:	2323      	movs	r3, #35	@ 0x23
 800f6d0:	aa0a      	add	r2, sp, #40	@ 0x28
 800f6d2:	189b      	adds	r3, r3, r2
 800f6d4:	781b      	ldrb	r3, [r3, #0]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d100      	bne.n	800f6dc <_printf_float+0x17c>
 800f6da:	e792      	b.n	800f602 <_printf_float+0xa2>
 800f6dc:	002b      	movs	r3, r5
 800f6de:	222d      	movs	r2, #45	@ 0x2d
 800f6e0:	3343      	adds	r3, #67	@ 0x43
 800f6e2:	701a      	strb	r2, [r3, #0]
 800f6e4:	e78d      	b.n	800f602 <_printf_float+0xa2>
 800f6e6:	2c47      	cmp	r4, #71	@ 0x47
 800f6e8:	d1b8      	bne.n	800f65c <_printf_float+0xfc>
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d1b6      	bne.n	800f65c <_printf_float+0xfc>
 800f6ee:	3301      	adds	r3, #1
 800f6f0:	e7b3      	b.n	800f65a <_printf_float+0xfa>
 800f6f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f6f4:	2b65      	cmp	r3, #101	@ 0x65
 800f6f6:	d9d7      	bls.n	800f6a8 <_printf_float+0x148>
 800f6f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f6fa:	2b66      	cmp	r3, #102	@ 0x66
 800f6fc:	d11a      	bne.n	800f734 <_printf_float+0x1d4>
 800f6fe:	686b      	ldr	r3, [r5, #4]
 800f700:	2a00      	cmp	r2, #0
 800f702:	dd09      	ble.n	800f718 <_printf_float+0x1b8>
 800f704:	612a      	str	r2, [r5, #16]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d102      	bne.n	800f710 <_printf_float+0x1b0>
 800f70a:	6829      	ldr	r1, [r5, #0]
 800f70c:	07c9      	lsls	r1, r1, #31
 800f70e:	d50b      	bpl.n	800f728 <_printf_float+0x1c8>
 800f710:	3301      	adds	r3, #1
 800f712:	189b      	adds	r3, r3, r2
 800f714:	612b      	str	r3, [r5, #16]
 800f716:	e007      	b.n	800f728 <_printf_float+0x1c8>
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d103      	bne.n	800f724 <_printf_float+0x1c4>
 800f71c:	2201      	movs	r2, #1
 800f71e:	6829      	ldr	r1, [r5, #0]
 800f720:	4211      	tst	r1, r2
 800f722:	d000      	beq.n	800f726 <_printf_float+0x1c6>
 800f724:	1c9a      	adds	r2, r3, #2
 800f726:	612a      	str	r2, [r5, #16]
 800f728:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f72a:	2400      	movs	r4, #0
 800f72c:	65ab      	str	r3, [r5, #88]	@ 0x58
 800f72e:	e7ce      	b.n	800f6ce <_printf_float+0x16e>
 800f730:	2367      	movs	r3, #103	@ 0x67
 800f732:	930c      	str	r3, [sp, #48]	@ 0x30
 800f734:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f736:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f738:	4299      	cmp	r1, r3
 800f73a:	db06      	blt.n	800f74a <_printf_float+0x1ea>
 800f73c:	682b      	ldr	r3, [r5, #0]
 800f73e:	6129      	str	r1, [r5, #16]
 800f740:	07db      	lsls	r3, r3, #31
 800f742:	d5f1      	bpl.n	800f728 <_printf_float+0x1c8>
 800f744:	3101      	adds	r1, #1
 800f746:	6129      	str	r1, [r5, #16]
 800f748:	e7ee      	b.n	800f728 <_printf_float+0x1c8>
 800f74a:	2201      	movs	r2, #1
 800f74c:	2900      	cmp	r1, #0
 800f74e:	dce0      	bgt.n	800f712 <_printf_float+0x1b2>
 800f750:	1892      	adds	r2, r2, r2
 800f752:	1a52      	subs	r2, r2, r1
 800f754:	e7dd      	b.n	800f712 <_printf_float+0x1b2>
 800f756:	682a      	ldr	r2, [r5, #0]
 800f758:	0553      	lsls	r3, r2, #21
 800f75a:	d408      	bmi.n	800f76e <_printf_float+0x20e>
 800f75c:	692b      	ldr	r3, [r5, #16]
 800f75e:	003a      	movs	r2, r7
 800f760:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f762:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f764:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f766:	47a0      	blx	r4
 800f768:	3001      	adds	r0, #1
 800f76a:	d129      	bne.n	800f7c0 <_printf_float+0x260>
 800f76c:	e754      	b.n	800f618 <_printf_float+0xb8>
 800f76e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f770:	2b65      	cmp	r3, #101	@ 0x65
 800f772:	d800      	bhi.n	800f776 <_printf_float+0x216>
 800f774:	e0db      	b.n	800f92e <_printf_float+0x3ce>
 800f776:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800f778:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f77a:	2200      	movs	r2, #0
 800f77c:	2300      	movs	r3, #0
 800f77e:	f7f0 fe65 	bl	800044c <__aeabi_dcmpeq>
 800f782:	2800      	cmp	r0, #0
 800f784:	d033      	beq.n	800f7ee <_printf_float+0x28e>
 800f786:	2301      	movs	r3, #1
 800f788:	4a37      	ldr	r2, [pc, #220]	@ (800f868 <_printf_float+0x308>)
 800f78a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f78c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f78e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f790:	47a0      	blx	r4
 800f792:	3001      	adds	r0, #1
 800f794:	d100      	bne.n	800f798 <_printf_float+0x238>
 800f796:	e73f      	b.n	800f618 <_printf_float+0xb8>
 800f798:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800f79a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f79c:	42b3      	cmp	r3, r6
 800f79e:	db02      	blt.n	800f7a6 <_printf_float+0x246>
 800f7a0:	682b      	ldr	r3, [r5, #0]
 800f7a2:	07db      	lsls	r3, r3, #31
 800f7a4:	d50c      	bpl.n	800f7c0 <_printf_float+0x260>
 800f7a6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f7a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f7ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f7ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f7b0:	47a0      	blx	r4
 800f7b2:	2400      	movs	r4, #0
 800f7b4:	3001      	adds	r0, #1
 800f7b6:	d100      	bne.n	800f7ba <_printf_float+0x25a>
 800f7b8:	e72e      	b.n	800f618 <_printf_float+0xb8>
 800f7ba:	1e73      	subs	r3, r6, #1
 800f7bc:	42a3      	cmp	r3, r4
 800f7be:	dc0a      	bgt.n	800f7d6 <_printf_float+0x276>
 800f7c0:	682b      	ldr	r3, [r5, #0]
 800f7c2:	079b      	lsls	r3, r3, #30
 800f7c4:	d500      	bpl.n	800f7c8 <_printf_float+0x268>
 800f7c6:	e106      	b.n	800f9d6 <_printf_float+0x476>
 800f7c8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f7ca:	68e8      	ldr	r0, [r5, #12]
 800f7cc:	4298      	cmp	r0, r3
 800f7ce:	db00      	blt.n	800f7d2 <_printf_float+0x272>
 800f7d0:	e724      	b.n	800f61c <_printf_float+0xbc>
 800f7d2:	0018      	movs	r0, r3
 800f7d4:	e722      	b.n	800f61c <_printf_float+0xbc>
 800f7d6:	002a      	movs	r2, r5
 800f7d8:	2301      	movs	r3, #1
 800f7da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f7dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f7de:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f7e0:	321a      	adds	r2, #26
 800f7e2:	47b8      	blx	r7
 800f7e4:	3001      	adds	r0, #1
 800f7e6:	d100      	bne.n	800f7ea <_printf_float+0x28a>
 800f7e8:	e716      	b.n	800f618 <_printf_float+0xb8>
 800f7ea:	3401      	adds	r4, #1
 800f7ec:	e7e5      	b.n	800f7ba <_printf_float+0x25a>
 800f7ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	dc3b      	bgt.n	800f86c <_printf_float+0x30c>
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	4a1c      	ldr	r2, [pc, #112]	@ (800f868 <_printf_float+0x308>)
 800f7f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f7fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f7fc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f7fe:	47a0      	blx	r4
 800f800:	3001      	adds	r0, #1
 800f802:	d100      	bne.n	800f806 <_printf_float+0x2a6>
 800f804:	e708      	b.n	800f618 <_printf_float+0xb8>
 800f806:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800f808:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f80a:	4333      	orrs	r3, r6
 800f80c:	d102      	bne.n	800f814 <_printf_float+0x2b4>
 800f80e:	682b      	ldr	r3, [r5, #0]
 800f810:	07db      	lsls	r3, r3, #31
 800f812:	d5d5      	bpl.n	800f7c0 <_printf_float+0x260>
 800f814:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f816:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f818:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f81a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f81c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f81e:	47a0      	blx	r4
 800f820:	2300      	movs	r3, #0
 800f822:	3001      	adds	r0, #1
 800f824:	d100      	bne.n	800f828 <_printf_float+0x2c8>
 800f826:	e6f7      	b.n	800f618 <_printf_float+0xb8>
 800f828:	930c      	str	r3, [sp, #48]	@ 0x30
 800f82a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f82c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f82e:	425b      	negs	r3, r3
 800f830:	4293      	cmp	r3, r2
 800f832:	dc01      	bgt.n	800f838 <_printf_float+0x2d8>
 800f834:	0033      	movs	r3, r6
 800f836:	e792      	b.n	800f75e <_printf_float+0x1fe>
 800f838:	002a      	movs	r2, r5
 800f83a:	2301      	movs	r3, #1
 800f83c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f83e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f840:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f842:	321a      	adds	r2, #26
 800f844:	47a0      	blx	r4
 800f846:	3001      	adds	r0, #1
 800f848:	d100      	bne.n	800f84c <_printf_float+0x2ec>
 800f84a:	e6e5      	b.n	800f618 <_printf_float+0xb8>
 800f84c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f84e:	3301      	adds	r3, #1
 800f850:	e7ea      	b.n	800f828 <_printf_float+0x2c8>
 800f852:	46c0      	nop			@ (mov r8, r8)
 800f854:	7fefffff 	.word	0x7fefffff
 800f858:	080124da 	.word	0x080124da
 800f85c:	080124d6 	.word	0x080124d6
 800f860:	080124e2 	.word	0x080124e2
 800f864:	080124de 	.word	0x080124de
 800f868:	080124e6 	.word	0x080124e6
 800f86c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f86e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800f870:	930c      	str	r3, [sp, #48]	@ 0x30
 800f872:	429e      	cmp	r6, r3
 800f874:	dd00      	ble.n	800f878 <_printf_float+0x318>
 800f876:	001e      	movs	r6, r3
 800f878:	2e00      	cmp	r6, #0
 800f87a:	dc31      	bgt.n	800f8e0 <_printf_float+0x380>
 800f87c:	43f3      	mvns	r3, r6
 800f87e:	2400      	movs	r4, #0
 800f880:	17db      	asrs	r3, r3, #31
 800f882:	4033      	ands	r3, r6
 800f884:	930e      	str	r3, [sp, #56]	@ 0x38
 800f886:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800f888:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f88a:	1af3      	subs	r3, r6, r3
 800f88c:	42a3      	cmp	r3, r4
 800f88e:	dc30      	bgt.n	800f8f2 <_printf_float+0x392>
 800f890:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f892:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f894:	429a      	cmp	r2, r3
 800f896:	dc38      	bgt.n	800f90a <_printf_float+0x3aa>
 800f898:	682b      	ldr	r3, [r5, #0]
 800f89a:	07db      	lsls	r3, r3, #31
 800f89c:	d435      	bmi.n	800f90a <_printf_float+0x3aa>
 800f89e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800f8a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f8a2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f8a4:	1b9b      	subs	r3, r3, r6
 800f8a6:	1b14      	subs	r4, r2, r4
 800f8a8:	429c      	cmp	r4, r3
 800f8aa:	dd00      	ble.n	800f8ae <_printf_float+0x34e>
 800f8ac:	001c      	movs	r4, r3
 800f8ae:	2c00      	cmp	r4, #0
 800f8b0:	dc34      	bgt.n	800f91c <_printf_float+0x3bc>
 800f8b2:	43e3      	mvns	r3, r4
 800f8b4:	2600      	movs	r6, #0
 800f8b6:	17db      	asrs	r3, r3, #31
 800f8b8:	401c      	ands	r4, r3
 800f8ba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f8bc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f8be:	1ad3      	subs	r3, r2, r3
 800f8c0:	1b1b      	subs	r3, r3, r4
 800f8c2:	42b3      	cmp	r3, r6
 800f8c4:	dc00      	bgt.n	800f8c8 <_printf_float+0x368>
 800f8c6:	e77b      	b.n	800f7c0 <_printf_float+0x260>
 800f8c8:	002a      	movs	r2, r5
 800f8ca:	2301      	movs	r3, #1
 800f8cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f8ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f8d0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f8d2:	321a      	adds	r2, #26
 800f8d4:	47b8      	blx	r7
 800f8d6:	3001      	adds	r0, #1
 800f8d8:	d100      	bne.n	800f8dc <_printf_float+0x37c>
 800f8da:	e69d      	b.n	800f618 <_printf_float+0xb8>
 800f8dc:	3601      	adds	r6, #1
 800f8de:	e7ec      	b.n	800f8ba <_printf_float+0x35a>
 800f8e0:	0033      	movs	r3, r6
 800f8e2:	003a      	movs	r2, r7
 800f8e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f8e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f8e8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f8ea:	47a0      	blx	r4
 800f8ec:	3001      	adds	r0, #1
 800f8ee:	d1c5      	bne.n	800f87c <_printf_float+0x31c>
 800f8f0:	e692      	b.n	800f618 <_printf_float+0xb8>
 800f8f2:	002a      	movs	r2, r5
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f8f8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f8fa:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f8fc:	321a      	adds	r2, #26
 800f8fe:	47b0      	blx	r6
 800f900:	3001      	adds	r0, #1
 800f902:	d100      	bne.n	800f906 <_printf_float+0x3a6>
 800f904:	e688      	b.n	800f618 <_printf_float+0xb8>
 800f906:	3401      	adds	r4, #1
 800f908:	e7bd      	b.n	800f886 <_printf_float+0x326>
 800f90a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f90c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f90e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f910:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f912:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f914:	47a0      	blx	r4
 800f916:	3001      	adds	r0, #1
 800f918:	d1c1      	bne.n	800f89e <_printf_float+0x33e>
 800f91a:	e67d      	b.n	800f618 <_printf_float+0xb8>
 800f91c:	19ba      	adds	r2, r7, r6
 800f91e:	0023      	movs	r3, r4
 800f920:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f922:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f924:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f926:	47b0      	blx	r6
 800f928:	3001      	adds	r0, #1
 800f92a:	d1c2      	bne.n	800f8b2 <_printf_float+0x352>
 800f92c:	e674      	b.n	800f618 <_printf_float+0xb8>
 800f92e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f930:	930c      	str	r3, [sp, #48]	@ 0x30
 800f932:	2b01      	cmp	r3, #1
 800f934:	dc02      	bgt.n	800f93c <_printf_float+0x3dc>
 800f936:	2301      	movs	r3, #1
 800f938:	421a      	tst	r2, r3
 800f93a:	d039      	beq.n	800f9b0 <_printf_float+0x450>
 800f93c:	2301      	movs	r3, #1
 800f93e:	003a      	movs	r2, r7
 800f940:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f942:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f944:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f946:	47b0      	blx	r6
 800f948:	3001      	adds	r0, #1
 800f94a:	d100      	bne.n	800f94e <_printf_float+0x3ee>
 800f94c:	e664      	b.n	800f618 <_printf_float+0xb8>
 800f94e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f950:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f952:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f954:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f956:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f958:	47b0      	blx	r6
 800f95a:	3001      	adds	r0, #1
 800f95c:	d100      	bne.n	800f960 <_printf_float+0x400>
 800f95e:	e65b      	b.n	800f618 <_printf_float+0xb8>
 800f960:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800f962:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f964:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f966:	2200      	movs	r2, #0
 800f968:	3b01      	subs	r3, #1
 800f96a:	930c      	str	r3, [sp, #48]	@ 0x30
 800f96c:	2300      	movs	r3, #0
 800f96e:	f7f0 fd6d 	bl	800044c <__aeabi_dcmpeq>
 800f972:	2800      	cmp	r0, #0
 800f974:	d11a      	bne.n	800f9ac <_printf_float+0x44c>
 800f976:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f978:	1c7a      	adds	r2, r7, #1
 800f97a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f97c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f97e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f980:	47b0      	blx	r6
 800f982:	3001      	adds	r0, #1
 800f984:	d10e      	bne.n	800f9a4 <_printf_float+0x444>
 800f986:	e647      	b.n	800f618 <_printf_float+0xb8>
 800f988:	002a      	movs	r2, r5
 800f98a:	2301      	movs	r3, #1
 800f98c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f98e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f990:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f992:	321a      	adds	r2, #26
 800f994:	47b8      	blx	r7
 800f996:	3001      	adds	r0, #1
 800f998:	d100      	bne.n	800f99c <_printf_float+0x43c>
 800f99a:	e63d      	b.n	800f618 <_printf_float+0xb8>
 800f99c:	3601      	adds	r6, #1
 800f99e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f9a0:	429e      	cmp	r6, r3
 800f9a2:	dbf1      	blt.n	800f988 <_printf_float+0x428>
 800f9a4:	002a      	movs	r2, r5
 800f9a6:	0023      	movs	r3, r4
 800f9a8:	3250      	adds	r2, #80	@ 0x50
 800f9aa:	e6d9      	b.n	800f760 <_printf_float+0x200>
 800f9ac:	2600      	movs	r6, #0
 800f9ae:	e7f6      	b.n	800f99e <_printf_float+0x43e>
 800f9b0:	003a      	movs	r2, r7
 800f9b2:	e7e2      	b.n	800f97a <_printf_float+0x41a>
 800f9b4:	002a      	movs	r2, r5
 800f9b6:	2301      	movs	r3, #1
 800f9b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f9ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f9bc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f9be:	3219      	adds	r2, #25
 800f9c0:	47b0      	blx	r6
 800f9c2:	3001      	adds	r0, #1
 800f9c4:	d100      	bne.n	800f9c8 <_printf_float+0x468>
 800f9c6:	e627      	b.n	800f618 <_printf_float+0xb8>
 800f9c8:	3401      	adds	r4, #1
 800f9ca:	68eb      	ldr	r3, [r5, #12]
 800f9cc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f9ce:	1a9b      	subs	r3, r3, r2
 800f9d0:	42a3      	cmp	r3, r4
 800f9d2:	dcef      	bgt.n	800f9b4 <_printf_float+0x454>
 800f9d4:	e6f8      	b.n	800f7c8 <_printf_float+0x268>
 800f9d6:	2400      	movs	r4, #0
 800f9d8:	e7f7      	b.n	800f9ca <_printf_float+0x46a>
 800f9da:	46c0      	nop			@ (mov r8, r8)

0800f9dc <_printf_common>:
 800f9dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f9de:	0016      	movs	r6, r2
 800f9e0:	9301      	str	r3, [sp, #4]
 800f9e2:	688a      	ldr	r2, [r1, #8]
 800f9e4:	690b      	ldr	r3, [r1, #16]
 800f9e6:	000c      	movs	r4, r1
 800f9e8:	9000      	str	r0, [sp, #0]
 800f9ea:	4293      	cmp	r3, r2
 800f9ec:	da00      	bge.n	800f9f0 <_printf_common+0x14>
 800f9ee:	0013      	movs	r3, r2
 800f9f0:	0022      	movs	r2, r4
 800f9f2:	6033      	str	r3, [r6, #0]
 800f9f4:	3243      	adds	r2, #67	@ 0x43
 800f9f6:	7812      	ldrb	r2, [r2, #0]
 800f9f8:	2a00      	cmp	r2, #0
 800f9fa:	d001      	beq.n	800fa00 <_printf_common+0x24>
 800f9fc:	3301      	adds	r3, #1
 800f9fe:	6033      	str	r3, [r6, #0]
 800fa00:	6823      	ldr	r3, [r4, #0]
 800fa02:	069b      	lsls	r3, r3, #26
 800fa04:	d502      	bpl.n	800fa0c <_printf_common+0x30>
 800fa06:	6833      	ldr	r3, [r6, #0]
 800fa08:	3302      	adds	r3, #2
 800fa0a:	6033      	str	r3, [r6, #0]
 800fa0c:	6822      	ldr	r2, [r4, #0]
 800fa0e:	2306      	movs	r3, #6
 800fa10:	0015      	movs	r5, r2
 800fa12:	401d      	ands	r5, r3
 800fa14:	421a      	tst	r2, r3
 800fa16:	d027      	beq.n	800fa68 <_printf_common+0x8c>
 800fa18:	0023      	movs	r3, r4
 800fa1a:	3343      	adds	r3, #67	@ 0x43
 800fa1c:	781b      	ldrb	r3, [r3, #0]
 800fa1e:	1e5a      	subs	r2, r3, #1
 800fa20:	4193      	sbcs	r3, r2
 800fa22:	6822      	ldr	r2, [r4, #0]
 800fa24:	0692      	lsls	r2, r2, #26
 800fa26:	d430      	bmi.n	800fa8a <_printf_common+0xae>
 800fa28:	0022      	movs	r2, r4
 800fa2a:	9901      	ldr	r1, [sp, #4]
 800fa2c:	9800      	ldr	r0, [sp, #0]
 800fa2e:	9d08      	ldr	r5, [sp, #32]
 800fa30:	3243      	adds	r2, #67	@ 0x43
 800fa32:	47a8      	blx	r5
 800fa34:	3001      	adds	r0, #1
 800fa36:	d025      	beq.n	800fa84 <_printf_common+0xa8>
 800fa38:	2206      	movs	r2, #6
 800fa3a:	6823      	ldr	r3, [r4, #0]
 800fa3c:	2500      	movs	r5, #0
 800fa3e:	4013      	ands	r3, r2
 800fa40:	2b04      	cmp	r3, #4
 800fa42:	d105      	bne.n	800fa50 <_printf_common+0x74>
 800fa44:	6833      	ldr	r3, [r6, #0]
 800fa46:	68e5      	ldr	r5, [r4, #12]
 800fa48:	1aed      	subs	r5, r5, r3
 800fa4a:	43eb      	mvns	r3, r5
 800fa4c:	17db      	asrs	r3, r3, #31
 800fa4e:	401d      	ands	r5, r3
 800fa50:	68a3      	ldr	r3, [r4, #8]
 800fa52:	6922      	ldr	r2, [r4, #16]
 800fa54:	4293      	cmp	r3, r2
 800fa56:	dd01      	ble.n	800fa5c <_printf_common+0x80>
 800fa58:	1a9b      	subs	r3, r3, r2
 800fa5a:	18ed      	adds	r5, r5, r3
 800fa5c:	2600      	movs	r6, #0
 800fa5e:	42b5      	cmp	r5, r6
 800fa60:	d120      	bne.n	800faa4 <_printf_common+0xc8>
 800fa62:	2000      	movs	r0, #0
 800fa64:	e010      	b.n	800fa88 <_printf_common+0xac>
 800fa66:	3501      	adds	r5, #1
 800fa68:	68e3      	ldr	r3, [r4, #12]
 800fa6a:	6832      	ldr	r2, [r6, #0]
 800fa6c:	1a9b      	subs	r3, r3, r2
 800fa6e:	42ab      	cmp	r3, r5
 800fa70:	ddd2      	ble.n	800fa18 <_printf_common+0x3c>
 800fa72:	0022      	movs	r2, r4
 800fa74:	2301      	movs	r3, #1
 800fa76:	9901      	ldr	r1, [sp, #4]
 800fa78:	9800      	ldr	r0, [sp, #0]
 800fa7a:	9f08      	ldr	r7, [sp, #32]
 800fa7c:	3219      	adds	r2, #25
 800fa7e:	47b8      	blx	r7
 800fa80:	3001      	adds	r0, #1
 800fa82:	d1f0      	bne.n	800fa66 <_printf_common+0x8a>
 800fa84:	2001      	movs	r0, #1
 800fa86:	4240      	negs	r0, r0
 800fa88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fa8a:	2030      	movs	r0, #48	@ 0x30
 800fa8c:	18e1      	adds	r1, r4, r3
 800fa8e:	3143      	adds	r1, #67	@ 0x43
 800fa90:	7008      	strb	r0, [r1, #0]
 800fa92:	0021      	movs	r1, r4
 800fa94:	1c5a      	adds	r2, r3, #1
 800fa96:	3145      	adds	r1, #69	@ 0x45
 800fa98:	7809      	ldrb	r1, [r1, #0]
 800fa9a:	18a2      	adds	r2, r4, r2
 800fa9c:	3243      	adds	r2, #67	@ 0x43
 800fa9e:	3302      	adds	r3, #2
 800faa0:	7011      	strb	r1, [r2, #0]
 800faa2:	e7c1      	b.n	800fa28 <_printf_common+0x4c>
 800faa4:	0022      	movs	r2, r4
 800faa6:	2301      	movs	r3, #1
 800faa8:	9901      	ldr	r1, [sp, #4]
 800faaa:	9800      	ldr	r0, [sp, #0]
 800faac:	9f08      	ldr	r7, [sp, #32]
 800faae:	321a      	adds	r2, #26
 800fab0:	47b8      	blx	r7
 800fab2:	3001      	adds	r0, #1
 800fab4:	d0e6      	beq.n	800fa84 <_printf_common+0xa8>
 800fab6:	3601      	adds	r6, #1
 800fab8:	e7d1      	b.n	800fa5e <_printf_common+0x82>
	...

0800fabc <_printf_i>:
 800fabc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fabe:	b08b      	sub	sp, #44	@ 0x2c
 800fac0:	9206      	str	r2, [sp, #24]
 800fac2:	000a      	movs	r2, r1
 800fac4:	3243      	adds	r2, #67	@ 0x43
 800fac6:	9307      	str	r3, [sp, #28]
 800fac8:	9005      	str	r0, [sp, #20]
 800faca:	9203      	str	r2, [sp, #12]
 800facc:	7e0a      	ldrb	r2, [r1, #24]
 800face:	000c      	movs	r4, r1
 800fad0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fad2:	2a78      	cmp	r2, #120	@ 0x78
 800fad4:	d809      	bhi.n	800faea <_printf_i+0x2e>
 800fad6:	2a62      	cmp	r2, #98	@ 0x62
 800fad8:	d80b      	bhi.n	800faf2 <_printf_i+0x36>
 800fada:	2a00      	cmp	r2, #0
 800fadc:	d100      	bne.n	800fae0 <_printf_i+0x24>
 800fade:	e0ba      	b.n	800fc56 <_printf_i+0x19a>
 800fae0:	497a      	ldr	r1, [pc, #488]	@ (800fccc <_printf_i+0x210>)
 800fae2:	9104      	str	r1, [sp, #16]
 800fae4:	2a58      	cmp	r2, #88	@ 0x58
 800fae6:	d100      	bne.n	800faea <_printf_i+0x2e>
 800fae8:	e08e      	b.n	800fc08 <_printf_i+0x14c>
 800faea:	0025      	movs	r5, r4
 800faec:	3542      	adds	r5, #66	@ 0x42
 800faee:	702a      	strb	r2, [r5, #0]
 800faf0:	e022      	b.n	800fb38 <_printf_i+0x7c>
 800faf2:	0010      	movs	r0, r2
 800faf4:	3863      	subs	r0, #99	@ 0x63
 800faf6:	2815      	cmp	r0, #21
 800faf8:	d8f7      	bhi.n	800faea <_printf_i+0x2e>
 800fafa:	f7f0 fb17 	bl	800012c <__gnu_thumb1_case_shi>
 800fafe:	0016      	.short	0x0016
 800fb00:	fff6001f 	.word	0xfff6001f
 800fb04:	fff6fff6 	.word	0xfff6fff6
 800fb08:	001ffff6 	.word	0x001ffff6
 800fb0c:	fff6fff6 	.word	0xfff6fff6
 800fb10:	fff6fff6 	.word	0xfff6fff6
 800fb14:	0036009f 	.word	0x0036009f
 800fb18:	fff6007e 	.word	0xfff6007e
 800fb1c:	00b0fff6 	.word	0x00b0fff6
 800fb20:	0036fff6 	.word	0x0036fff6
 800fb24:	fff6fff6 	.word	0xfff6fff6
 800fb28:	0082      	.short	0x0082
 800fb2a:	0025      	movs	r5, r4
 800fb2c:	681a      	ldr	r2, [r3, #0]
 800fb2e:	3542      	adds	r5, #66	@ 0x42
 800fb30:	1d11      	adds	r1, r2, #4
 800fb32:	6019      	str	r1, [r3, #0]
 800fb34:	6813      	ldr	r3, [r2, #0]
 800fb36:	702b      	strb	r3, [r5, #0]
 800fb38:	2301      	movs	r3, #1
 800fb3a:	e09e      	b.n	800fc7a <_printf_i+0x1be>
 800fb3c:	6818      	ldr	r0, [r3, #0]
 800fb3e:	6809      	ldr	r1, [r1, #0]
 800fb40:	1d02      	adds	r2, r0, #4
 800fb42:	060d      	lsls	r5, r1, #24
 800fb44:	d50b      	bpl.n	800fb5e <_printf_i+0xa2>
 800fb46:	6806      	ldr	r6, [r0, #0]
 800fb48:	601a      	str	r2, [r3, #0]
 800fb4a:	2e00      	cmp	r6, #0
 800fb4c:	da03      	bge.n	800fb56 <_printf_i+0x9a>
 800fb4e:	232d      	movs	r3, #45	@ 0x2d
 800fb50:	9a03      	ldr	r2, [sp, #12]
 800fb52:	4276      	negs	r6, r6
 800fb54:	7013      	strb	r3, [r2, #0]
 800fb56:	4b5d      	ldr	r3, [pc, #372]	@ (800fccc <_printf_i+0x210>)
 800fb58:	270a      	movs	r7, #10
 800fb5a:	9304      	str	r3, [sp, #16]
 800fb5c:	e018      	b.n	800fb90 <_printf_i+0xd4>
 800fb5e:	6806      	ldr	r6, [r0, #0]
 800fb60:	601a      	str	r2, [r3, #0]
 800fb62:	0649      	lsls	r1, r1, #25
 800fb64:	d5f1      	bpl.n	800fb4a <_printf_i+0x8e>
 800fb66:	b236      	sxth	r6, r6
 800fb68:	e7ef      	b.n	800fb4a <_printf_i+0x8e>
 800fb6a:	6808      	ldr	r0, [r1, #0]
 800fb6c:	6819      	ldr	r1, [r3, #0]
 800fb6e:	c940      	ldmia	r1!, {r6}
 800fb70:	0605      	lsls	r5, r0, #24
 800fb72:	d402      	bmi.n	800fb7a <_printf_i+0xbe>
 800fb74:	0640      	lsls	r0, r0, #25
 800fb76:	d500      	bpl.n	800fb7a <_printf_i+0xbe>
 800fb78:	b2b6      	uxth	r6, r6
 800fb7a:	6019      	str	r1, [r3, #0]
 800fb7c:	4b53      	ldr	r3, [pc, #332]	@ (800fccc <_printf_i+0x210>)
 800fb7e:	270a      	movs	r7, #10
 800fb80:	9304      	str	r3, [sp, #16]
 800fb82:	2a6f      	cmp	r2, #111	@ 0x6f
 800fb84:	d100      	bne.n	800fb88 <_printf_i+0xcc>
 800fb86:	3f02      	subs	r7, #2
 800fb88:	0023      	movs	r3, r4
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	3343      	adds	r3, #67	@ 0x43
 800fb8e:	701a      	strb	r2, [r3, #0]
 800fb90:	6863      	ldr	r3, [r4, #4]
 800fb92:	60a3      	str	r3, [r4, #8]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	db06      	blt.n	800fba6 <_printf_i+0xea>
 800fb98:	2104      	movs	r1, #4
 800fb9a:	6822      	ldr	r2, [r4, #0]
 800fb9c:	9d03      	ldr	r5, [sp, #12]
 800fb9e:	438a      	bics	r2, r1
 800fba0:	6022      	str	r2, [r4, #0]
 800fba2:	4333      	orrs	r3, r6
 800fba4:	d00c      	beq.n	800fbc0 <_printf_i+0x104>
 800fba6:	9d03      	ldr	r5, [sp, #12]
 800fba8:	0030      	movs	r0, r6
 800fbaa:	0039      	movs	r1, r7
 800fbac:	f7f0 fb4e 	bl	800024c <__aeabi_uidivmod>
 800fbb0:	9b04      	ldr	r3, [sp, #16]
 800fbb2:	3d01      	subs	r5, #1
 800fbb4:	5c5b      	ldrb	r3, [r3, r1]
 800fbb6:	702b      	strb	r3, [r5, #0]
 800fbb8:	0033      	movs	r3, r6
 800fbba:	0006      	movs	r6, r0
 800fbbc:	429f      	cmp	r7, r3
 800fbbe:	d9f3      	bls.n	800fba8 <_printf_i+0xec>
 800fbc0:	2f08      	cmp	r7, #8
 800fbc2:	d109      	bne.n	800fbd8 <_printf_i+0x11c>
 800fbc4:	6823      	ldr	r3, [r4, #0]
 800fbc6:	07db      	lsls	r3, r3, #31
 800fbc8:	d506      	bpl.n	800fbd8 <_printf_i+0x11c>
 800fbca:	6862      	ldr	r2, [r4, #4]
 800fbcc:	6923      	ldr	r3, [r4, #16]
 800fbce:	429a      	cmp	r2, r3
 800fbd0:	dc02      	bgt.n	800fbd8 <_printf_i+0x11c>
 800fbd2:	2330      	movs	r3, #48	@ 0x30
 800fbd4:	3d01      	subs	r5, #1
 800fbd6:	702b      	strb	r3, [r5, #0]
 800fbd8:	9b03      	ldr	r3, [sp, #12]
 800fbda:	1b5b      	subs	r3, r3, r5
 800fbdc:	6123      	str	r3, [r4, #16]
 800fbde:	9b07      	ldr	r3, [sp, #28]
 800fbe0:	0021      	movs	r1, r4
 800fbe2:	9300      	str	r3, [sp, #0]
 800fbe4:	9805      	ldr	r0, [sp, #20]
 800fbe6:	9b06      	ldr	r3, [sp, #24]
 800fbe8:	aa09      	add	r2, sp, #36	@ 0x24
 800fbea:	f7ff fef7 	bl	800f9dc <_printf_common>
 800fbee:	3001      	adds	r0, #1
 800fbf0:	d148      	bne.n	800fc84 <_printf_i+0x1c8>
 800fbf2:	2001      	movs	r0, #1
 800fbf4:	4240      	negs	r0, r0
 800fbf6:	b00b      	add	sp, #44	@ 0x2c
 800fbf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbfa:	2220      	movs	r2, #32
 800fbfc:	6809      	ldr	r1, [r1, #0]
 800fbfe:	430a      	orrs	r2, r1
 800fc00:	6022      	str	r2, [r4, #0]
 800fc02:	2278      	movs	r2, #120	@ 0x78
 800fc04:	4932      	ldr	r1, [pc, #200]	@ (800fcd0 <_printf_i+0x214>)
 800fc06:	9104      	str	r1, [sp, #16]
 800fc08:	0021      	movs	r1, r4
 800fc0a:	3145      	adds	r1, #69	@ 0x45
 800fc0c:	700a      	strb	r2, [r1, #0]
 800fc0e:	6819      	ldr	r1, [r3, #0]
 800fc10:	6822      	ldr	r2, [r4, #0]
 800fc12:	c940      	ldmia	r1!, {r6}
 800fc14:	0610      	lsls	r0, r2, #24
 800fc16:	d402      	bmi.n	800fc1e <_printf_i+0x162>
 800fc18:	0650      	lsls	r0, r2, #25
 800fc1a:	d500      	bpl.n	800fc1e <_printf_i+0x162>
 800fc1c:	b2b6      	uxth	r6, r6
 800fc1e:	6019      	str	r1, [r3, #0]
 800fc20:	07d3      	lsls	r3, r2, #31
 800fc22:	d502      	bpl.n	800fc2a <_printf_i+0x16e>
 800fc24:	2320      	movs	r3, #32
 800fc26:	4313      	orrs	r3, r2
 800fc28:	6023      	str	r3, [r4, #0]
 800fc2a:	2e00      	cmp	r6, #0
 800fc2c:	d001      	beq.n	800fc32 <_printf_i+0x176>
 800fc2e:	2710      	movs	r7, #16
 800fc30:	e7aa      	b.n	800fb88 <_printf_i+0xcc>
 800fc32:	2220      	movs	r2, #32
 800fc34:	6823      	ldr	r3, [r4, #0]
 800fc36:	4393      	bics	r3, r2
 800fc38:	6023      	str	r3, [r4, #0]
 800fc3a:	e7f8      	b.n	800fc2e <_printf_i+0x172>
 800fc3c:	681a      	ldr	r2, [r3, #0]
 800fc3e:	680d      	ldr	r5, [r1, #0]
 800fc40:	1d10      	adds	r0, r2, #4
 800fc42:	6949      	ldr	r1, [r1, #20]
 800fc44:	6018      	str	r0, [r3, #0]
 800fc46:	6813      	ldr	r3, [r2, #0]
 800fc48:	062e      	lsls	r6, r5, #24
 800fc4a:	d501      	bpl.n	800fc50 <_printf_i+0x194>
 800fc4c:	6019      	str	r1, [r3, #0]
 800fc4e:	e002      	b.n	800fc56 <_printf_i+0x19a>
 800fc50:	066d      	lsls	r5, r5, #25
 800fc52:	d5fb      	bpl.n	800fc4c <_printf_i+0x190>
 800fc54:	8019      	strh	r1, [r3, #0]
 800fc56:	2300      	movs	r3, #0
 800fc58:	9d03      	ldr	r5, [sp, #12]
 800fc5a:	6123      	str	r3, [r4, #16]
 800fc5c:	e7bf      	b.n	800fbde <_printf_i+0x122>
 800fc5e:	681a      	ldr	r2, [r3, #0]
 800fc60:	1d11      	adds	r1, r2, #4
 800fc62:	6019      	str	r1, [r3, #0]
 800fc64:	6815      	ldr	r5, [r2, #0]
 800fc66:	2100      	movs	r1, #0
 800fc68:	0028      	movs	r0, r5
 800fc6a:	6862      	ldr	r2, [r4, #4]
 800fc6c:	f000 f9f9 	bl	8010062 <memchr>
 800fc70:	2800      	cmp	r0, #0
 800fc72:	d001      	beq.n	800fc78 <_printf_i+0x1bc>
 800fc74:	1b40      	subs	r0, r0, r5
 800fc76:	6060      	str	r0, [r4, #4]
 800fc78:	6863      	ldr	r3, [r4, #4]
 800fc7a:	6123      	str	r3, [r4, #16]
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	9a03      	ldr	r2, [sp, #12]
 800fc80:	7013      	strb	r3, [r2, #0]
 800fc82:	e7ac      	b.n	800fbde <_printf_i+0x122>
 800fc84:	002a      	movs	r2, r5
 800fc86:	6923      	ldr	r3, [r4, #16]
 800fc88:	9906      	ldr	r1, [sp, #24]
 800fc8a:	9805      	ldr	r0, [sp, #20]
 800fc8c:	9d07      	ldr	r5, [sp, #28]
 800fc8e:	47a8      	blx	r5
 800fc90:	3001      	adds	r0, #1
 800fc92:	d0ae      	beq.n	800fbf2 <_printf_i+0x136>
 800fc94:	6823      	ldr	r3, [r4, #0]
 800fc96:	079b      	lsls	r3, r3, #30
 800fc98:	d415      	bmi.n	800fcc6 <_printf_i+0x20a>
 800fc9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc9c:	68e0      	ldr	r0, [r4, #12]
 800fc9e:	4298      	cmp	r0, r3
 800fca0:	daa9      	bge.n	800fbf6 <_printf_i+0x13a>
 800fca2:	0018      	movs	r0, r3
 800fca4:	e7a7      	b.n	800fbf6 <_printf_i+0x13a>
 800fca6:	0022      	movs	r2, r4
 800fca8:	2301      	movs	r3, #1
 800fcaa:	9906      	ldr	r1, [sp, #24]
 800fcac:	9805      	ldr	r0, [sp, #20]
 800fcae:	9e07      	ldr	r6, [sp, #28]
 800fcb0:	3219      	adds	r2, #25
 800fcb2:	47b0      	blx	r6
 800fcb4:	3001      	adds	r0, #1
 800fcb6:	d09c      	beq.n	800fbf2 <_printf_i+0x136>
 800fcb8:	3501      	adds	r5, #1
 800fcba:	68e3      	ldr	r3, [r4, #12]
 800fcbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fcbe:	1a9b      	subs	r3, r3, r2
 800fcc0:	42ab      	cmp	r3, r5
 800fcc2:	dcf0      	bgt.n	800fca6 <_printf_i+0x1ea>
 800fcc4:	e7e9      	b.n	800fc9a <_printf_i+0x1de>
 800fcc6:	2500      	movs	r5, #0
 800fcc8:	e7f7      	b.n	800fcba <_printf_i+0x1fe>
 800fcca:	46c0      	nop			@ (mov r8, r8)
 800fccc:	080124e8 	.word	0x080124e8
 800fcd0:	080124f9 	.word	0x080124f9

0800fcd4 <std>:
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	b510      	push	{r4, lr}
 800fcd8:	0004      	movs	r4, r0
 800fcda:	6003      	str	r3, [r0, #0]
 800fcdc:	6043      	str	r3, [r0, #4]
 800fcde:	6083      	str	r3, [r0, #8]
 800fce0:	8181      	strh	r1, [r0, #12]
 800fce2:	6643      	str	r3, [r0, #100]	@ 0x64
 800fce4:	81c2      	strh	r2, [r0, #14]
 800fce6:	6103      	str	r3, [r0, #16]
 800fce8:	6143      	str	r3, [r0, #20]
 800fcea:	6183      	str	r3, [r0, #24]
 800fcec:	0019      	movs	r1, r3
 800fcee:	2208      	movs	r2, #8
 800fcf0:	305c      	adds	r0, #92	@ 0x5c
 800fcf2:	f000 f92f 	bl	800ff54 <memset>
 800fcf6:	4b0b      	ldr	r3, [pc, #44]	@ (800fd24 <std+0x50>)
 800fcf8:	6224      	str	r4, [r4, #32]
 800fcfa:	6263      	str	r3, [r4, #36]	@ 0x24
 800fcfc:	4b0a      	ldr	r3, [pc, #40]	@ (800fd28 <std+0x54>)
 800fcfe:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fd00:	4b0a      	ldr	r3, [pc, #40]	@ (800fd2c <std+0x58>)
 800fd02:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fd04:	4b0a      	ldr	r3, [pc, #40]	@ (800fd30 <std+0x5c>)
 800fd06:	6323      	str	r3, [r4, #48]	@ 0x30
 800fd08:	4b0a      	ldr	r3, [pc, #40]	@ (800fd34 <std+0x60>)
 800fd0a:	429c      	cmp	r4, r3
 800fd0c:	d005      	beq.n	800fd1a <std+0x46>
 800fd0e:	4b0a      	ldr	r3, [pc, #40]	@ (800fd38 <std+0x64>)
 800fd10:	429c      	cmp	r4, r3
 800fd12:	d002      	beq.n	800fd1a <std+0x46>
 800fd14:	4b09      	ldr	r3, [pc, #36]	@ (800fd3c <std+0x68>)
 800fd16:	429c      	cmp	r4, r3
 800fd18:	d103      	bne.n	800fd22 <std+0x4e>
 800fd1a:	0020      	movs	r0, r4
 800fd1c:	3058      	adds	r0, #88	@ 0x58
 800fd1e:	f000 f99d 	bl	801005c <__retarget_lock_init_recursive>
 800fd22:	bd10      	pop	{r4, pc}
 800fd24:	0800fea1 	.word	0x0800fea1
 800fd28:	0800fec9 	.word	0x0800fec9
 800fd2c:	0800ff01 	.word	0x0800ff01
 800fd30:	0800ff2d 	.word	0x0800ff2d
 800fd34:	20001c80 	.word	0x20001c80
 800fd38:	20001ce8 	.word	0x20001ce8
 800fd3c:	20001d50 	.word	0x20001d50

0800fd40 <stdio_exit_handler>:
 800fd40:	b510      	push	{r4, lr}
 800fd42:	4a03      	ldr	r2, [pc, #12]	@ (800fd50 <stdio_exit_handler+0x10>)
 800fd44:	4903      	ldr	r1, [pc, #12]	@ (800fd54 <stdio_exit_handler+0x14>)
 800fd46:	4804      	ldr	r0, [pc, #16]	@ (800fd58 <stdio_exit_handler+0x18>)
 800fd48:	f000 f86c 	bl	800fe24 <_fwalk_sglue>
 800fd4c:	bd10      	pop	{r4, pc}
 800fd4e:	46c0      	nop			@ (mov r8, r8)
 800fd50:	200001e0 	.word	0x200001e0
 800fd54:	08011a71 	.word	0x08011a71
 800fd58:	200001f0 	.word	0x200001f0

0800fd5c <cleanup_stdio>:
 800fd5c:	6841      	ldr	r1, [r0, #4]
 800fd5e:	4b0b      	ldr	r3, [pc, #44]	@ (800fd8c <cleanup_stdio+0x30>)
 800fd60:	b510      	push	{r4, lr}
 800fd62:	0004      	movs	r4, r0
 800fd64:	4299      	cmp	r1, r3
 800fd66:	d001      	beq.n	800fd6c <cleanup_stdio+0x10>
 800fd68:	f001 fe82 	bl	8011a70 <_fflush_r>
 800fd6c:	68a1      	ldr	r1, [r4, #8]
 800fd6e:	4b08      	ldr	r3, [pc, #32]	@ (800fd90 <cleanup_stdio+0x34>)
 800fd70:	4299      	cmp	r1, r3
 800fd72:	d002      	beq.n	800fd7a <cleanup_stdio+0x1e>
 800fd74:	0020      	movs	r0, r4
 800fd76:	f001 fe7b 	bl	8011a70 <_fflush_r>
 800fd7a:	68e1      	ldr	r1, [r4, #12]
 800fd7c:	4b05      	ldr	r3, [pc, #20]	@ (800fd94 <cleanup_stdio+0x38>)
 800fd7e:	4299      	cmp	r1, r3
 800fd80:	d002      	beq.n	800fd88 <cleanup_stdio+0x2c>
 800fd82:	0020      	movs	r0, r4
 800fd84:	f001 fe74 	bl	8011a70 <_fflush_r>
 800fd88:	bd10      	pop	{r4, pc}
 800fd8a:	46c0      	nop			@ (mov r8, r8)
 800fd8c:	20001c80 	.word	0x20001c80
 800fd90:	20001ce8 	.word	0x20001ce8
 800fd94:	20001d50 	.word	0x20001d50

0800fd98 <global_stdio_init.part.0>:
 800fd98:	b510      	push	{r4, lr}
 800fd9a:	4b09      	ldr	r3, [pc, #36]	@ (800fdc0 <global_stdio_init.part.0+0x28>)
 800fd9c:	4a09      	ldr	r2, [pc, #36]	@ (800fdc4 <global_stdio_init.part.0+0x2c>)
 800fd9e:	2104      	movs	r1, #4
 800fda0:	601a      	str	r2, [r3, #0]
 800fda2:	4809      	ldr	r0, [pc, #36]	@ (800fdc8 <global_stdio_init.part.0+0x30>)
 800fda4:	2200      	movs	r2, #0
 800fda6:	f7ff ff95 	bl	800fcd4 <std>
 800fdaa:	2201      	movs	r2, #1
 800fdac:	2109      	movs	r1, #9
 800fdae:	4807      	ldr	r0, [pc, #28]	@ (800fdcc <global_stdio_init.part.0+0x34>)
 800fdb0:	f7ff ff90 	bl	800fcd4 <std>
 800fdb4:	2202      	movs	r2, #2
 800fdb6:	2112      	movs	r1, #18
 800fdb8:	4805      	ldr	r0, [pc, #20]	@ (800fdd0 <global_stdio_init.part.0+0x38>)
 800fdba:	f7ff ff8b 	bl	800fcd4 <std>
 800fdbe:	bd10      	pop	{r4, pc}
 800fdc0:	20001db8 	.word	0x20001db8
 800fdc4:	0800fd41 	.word	0x0800fd41
 800fdc8:	20001c80 	.word	0x20001c80
 800fdcc:	20001ce8 	.word	0x20001ce8
 800fdd0:	20001d50 	.word	0x20001d50

0800fdd4 <__sfp_lock_acquire>:
 800fdd4:	b510      	push	{r4, lr}
 800fdd6:	4802      	ldr	r0, [pc, #8]	@ (800fde0 <__sfp_lock_acquire+0xc>)
 800fdd8:	f000 f941 	bl	801005e <__retarget_lock_acquire_recursive>
 800fddc:	bd10      	pop	{r4, pc}
 800fdde:	46c0      	nop			@ (mov r8, r8)
 800fde0:	20001dc1 	.word	0x20001dc1

0800fde4 <__sfp_lock_release>:
 800fde4:	b510      	push	{r4, lr}
 800fde6:	4802      	ldr	r0, [pc, #8]	@ (800fdf0 <__sfp_lock_release+0xc>)
 800fde8:	f000 f93a 	bl	8010060 <__retarget_lock_release_recursive>
 800fdec:	bd10      	pop	{r4, pc}
 800fdee:	46c0      	nop			@ (mov r8, r8)
 800fdf0:	20001dc1 	.word	0x20001dc1

0800fdf4 <__sinit>:
 800fdf4:	b510      	push	{r4, lr}
 800fdf6:	0004      	movs	r4, r0
 800fdf8:	f7ff ffec 	bl	800fdd4 <__sfp_lock_acquire>
 800fdfc:	6a23      	ldr	r3, [r4, #32]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d002      	beq.n	800fe08 <__sinit+0x14>
 800fe02:	f7ff ffef 	bl	800fde4 <__sfp_lock_release>
 800fe06:	bd10      	pop	{r4, pc}
 800fe08:	4b04      	ldr	r3, [pc, #16]	@ (800fe1c <__sinit+0x28>)
 800fe0a:	6223      	str	r3, [r4, #32]
 800fe0c:	4b04      	ldr	r3, [pc, #16]	@ (800fe20 <__sinit+0x2c>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d1f6      	bne.n	800fe02 <__sinit+0xe>
 800fe14:	f7ff ffc0 	bl	800fd98 <global_stdio_init.part.0>
 800fe18:	e7f3      	b.n	800fe02 <__sinit+0xe>
 800fe1a:	46c0      	nop			@ (mov r8, r8)
 800fe1c:	0800fd5d 	.word	0x0800fd5d
 800fe20:	20001db8 	.word	0x20001db8

0800fe24 <_fwalk_sglue>:
 800fe24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe26:	0014      	movs	r4, r2
 800fe28:	2600      	movs	r6, #0
 800fe2a:	9000      	str	r0, [sp, #0]
 800fe2c:	9101      	str	r1, [sp, #4]
 800fe2e:	68a5      	ldr	r5, [r4, #8]
 800fe30:	6867      	ldr	r7, [r4, #4]
 800fe32:	3f01      	subs	r7, #1
 800fe34:	d504      	bpl.n	800fe40 <_fwalk_sglue+0x1c>
 800fe36:	6824      	ldr	r4, [r4, #0]
 800fe38:	2c00      	cmp	r4, #0
 800fe3a:	d1f8      	bne.n	800fe2e <_fwalk_sglue+0xa>
 800fe3c:	0030      	movs	r0, r6
 800fe3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fe40:	89ab      	ldrh	r3, [r5, #12]
 800fe42:	2b01      	cmp	r3, #1
 800fe44:	d908      	bls.n	800fe58 <_fwalk_sglue+0x34>
 800fe46:	220e      	movs	r2, #14
 800fe48:	5eab      	ldrsh	r3, [r5, r2]
 800fe4a:	3301      	adds	r3, #1
 800fe4c:	d004      	beq.n	800fe58 <_fwalk_sglue+0x34>
 800fe4e:	0029      	movs	r1, r5
 800fe50:	9800      	ldr	r0, [sp, #0]
 800fe52:	9b01      	ldr	r3, [sp, #4]
 800fe54:	4798      	blx	r3
 800fe56:	4306      	orrs	r6, r0
 800fe58:	3568      	adds	r5, #104	@ 0x68
 800fe5a:	e7ea      	b.n	800fe32 <_fwalk_sglue+0xe>

0800fe5c <siprintf>:
 800fe5c:	b40e      	push	{r1, r2, r3}
 800fe5e:	b510      	push	{r4, lr}
 800fe60:	2400      	movs	r4, #0
 800fe62:	490c      	ldr	r1, [pc, #48]	@ (800fe94 <siprintf+0x38>)
 800fe64:	b09d      	sub	sp, #116	@ 0x74
 800fe66:	ab1f      	add	r3, sp, #124	@ 0x7c
 800fe68:	9002      	str	r0, [sp, #8]
 800fe6a:	9006      	str	r0, [sp, #24]
 800fe6c:	9107      	str	r1, [sp, #28]
 800fe6e:	9104      	str	r1, [sp, #16]
 800fe70:	4809      	ldr	r0, [pc, #36]	@ (800fe98 <siprintf+0x3c>)
 800fe72:	490a      	ldr	r1, [pc, #40]	@ (800fe9c <siprintf+0x40>)
 800fe74:	cb04      	ldmia	r3!, {r2}
 800fe76:	9105      	str	r1, [sp, #20]
 800fe78:	6800      	ldr	r0, [r0, #0]
 800fe7a:	a902      	add	r1, sp, #8
 800fe7c:	9301      	str	r3, [sp, #4]
 800fe7e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800fe80:	f001 fc72 	bl	8011768 <_svfiprintf_r>
 800fe84:	9b02      	ldr	r3, [sp, #8]
 800fe86:	701c      	strb	r4, [r3, #0]
 800fe88:	b01d      	add	sp, #116	@ 0x74
 800fe8a:	bc10      	pop	{r4}
 800fe8c:	bc08      	pop	{r3}
 800fe8e:	b003      	add	sp, #12
 800fe90:	4718      	bx	r3
 800fe92:	46c0      	nop			@ (mov r8, r8)
 800fe94:	7fffffff 	.word	0x7fffffff
 800fe98:	200001ec 	.word	0x200001ec
 800fe9c:	ffff0208 	.word	0xffff0208

0800fea0 <__sread>:
 800fea0:	b570      	push	{r4, r5, r6, lr}
 800fea2:	000c      	movs	r4, r1
 800fea4:	250e      	movs	r5, #14
 800fea6:	5f49      	ldrsh	r1, [r1, r5]
 800fea8:	f000 f886 	bl	800ffb8 <_read_r>
 800feac:	2800      	cmp	r0, #0
 800feae:	db03      	blt.n	800feb8 <__sread+0x18>
 800feb0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800feb2:	181b      	adds	r3, r3, r0
 800feb4:	6563      	str	r3, [r4, #84]	@ 0x54
 800feb6:	bd70      	pop	{r4, r5, r6, pc}
 800feb8:	89a3      	ldrh	r3, [r4, #12]
 800feba:	4a02      	ldr	r2, [pc, #8]	@ (800fec4 <__sread+0x24>)
 800febc:	4013      	ands	r3, r2
 800febe:	81a3      	strh	r3, [r4, #12]
 800fec0:	e7f9      	b.n	800feb6 <__sread+0x16>
 800fec2:	46c0      	nop			@ (mov r8, r8)
 800fec4:	ffffefff 	.word	0xffffefff

0800fec8 <__swrite>:
 800fec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feca:	001f      	movs	r7, r3
 800fecc:	898b      	ldrh	r3, [r1, #12]
 800fece:	0005      	movs	r5, r0
 800fed0:	000c      	movs	r4, r1
 800fed2:	0016      	movs	r6, r2
 800fed4:	05db      	lsls	r3, r3, #23
 800fed6:	d505      	bpl.n	800fee4 <__swrite+0x1c>
 800fed8:	230e      	movs	r3, #14
 800feda:	5ec9      	ldrsh	r1, [r1, r3]
 800fedc:	2200      	movs	r2, #0
 800fede:	2302      	movs	r3, #2
 800fee0:	f000 f856 	bl	800ff90 <_lseek_r>
 800fee4:	89a3      	ldrh	r3, [r4, #12]
 800fee6:	4a05      	ldr	r2, [pc, #20]	@ (800fefc <__swrite+0x34>)
 800fee8:	0028      	movs	r0, r5
 800feea:	4013      	ands	r3, r2
 800feec:	81a3      	strh	r3, [r4, #12]
 800feee:	0032      	movs	r2, r6
 800fef0:	230e      	movs	r3, #14
 800fef2:	5ee1      	ldrsh	r1, [r4, r3]
 800fef4:	003b      	movs	r3, r7
 800fef6:	f000 f873 	bl	800ffe0 <_write_r>
 800fefa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fefc:	ffffefff 	.word	0xffffefff

0800ff00 <__sseek>:
 800ff00:	b570      	push	{r4, r5, r6, lr}
 800ff02:	000c      	movs	r4, r1
 800ff04:	250e      	movs	r5, #14
 800ff06:	5f49      	ldrsh	r1, [r1, r5]
 800ff08:	f000 f842 	bl	800ff90 <_lseek_r>
 800ff0c:	89a3      	ldrh	r3, [r4, #12]
 800ff0e:	1c42      	adds	r2, r0, #1
 800ff10:	d103      	bne.n	800ff1a <__sseek+0x1a>
 800ff12:	4a05      	ldr	r2, [pc, #20]	@ (800ff28 <__sseek+0x28>)
 800ff14:	4013      	ands	r3, r2
 800ff16:	81a3      	strh	r3, [r4, #12]
 800ff18:	bd70      	pop	{r4, r5, r6, pc}
 800ff1a:	2280      	movs	r2, #128	@ 0x80
 800ff1c:	0152      	lsls	r2, r2, #5
 800ff1e:	4313      	orrs	r3, r2
 800ff20:	81a3      	strh	r3, [r4, #12]
 800ff22:	6560      	str	r0, [r4, #84]	@ 0x54
 800ff24:	e7f8      	b.n	800ff18 <__sseek+0x18>
 800ff26:	46c0      	nop			@ (mov r8, r8)
 800ff28:	ffffefff 	.word	0xffffefff

0800ff2c <__sclose>:
 800ff2c:	b510      	push	{r4, lr}
 800ff2e:	230e      	movs	r3, #14
 800ff30:	5ec9      	ldrsh	r1, [r1, r3]
 800ff32:	f000 f81b 	bl	800ff6c <_close_r>
 800ff36:	bd10      	pop	{r4, pc}

0800ff38 <memcmp>:
 800ff38:	b530      	push	{r4, r5, lr}
 800ff3a:	2400      	movs	r4, #0
 800ff3c:	3901      	subs	r1, #1
 800ff3e:	42a2      	cmp	r2, r4
 800ff40:	d101      	bne.n	800ff46 <memcmp+0xe>
 800ff42:	2000      	movs	r0, #0
 800ff44:	e005      	b.n	800ff52 <memcmp+0x1a>
 800ff46:	5d03      	ldrb	r3, [r0, r4]
 800ff48:	3401      	adds	r4, #1
 800ff4a:	5d0d      	ldrb	r5, [r1, r4]
 800ff4c:	42ab      	cmp	r3, r5
 800ff4e:	d0f6      	beq.n	800ff3e <memcmp+0x6>
 800ff50:	1b58      	subs	r0, r3, r5
 800ff52:	bd30      	pop	{r4, r5, pc}

0800ff54 <memset>:
 800ff54:	0003      	movs	r3, r0
 800ff56:	1882      	adds	r2, r0, r2
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	d100      	bne.n	800ff5e <memset+0xa>
 800ff5c:	4770      	bx	lr
 800ff5e:	7019      	strb	r1, [r3, #0]
 800ff60:	3301      	adds	r3, #1
 800ff62:	e7f9      	b.n	800ff58 <memset+0x4>

0800ff64 <_localeconv_r>:
 800ff64:	4800      	ldr	r0, [pc, #0]	@ (800ff68 <_localeconv_r+0x4>)
 800ff66:	4770      	bx	lr
 800ff68:	2000032c 	.word	0x2000032c

0800ff6c <_close_r>:
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	b570      	push	{r4, r5, r6, lr}
 800ff70:	4d06      	ldr	r5, [pc, #24]	@ (800ff8c <_close_r+0x20>)
 800ff72:	0004      	movs	r4, r0
 800ff74:	0008      	movs	r0, r1
 800ff76:	602b      	str	r3, [r5, #0]
 800ff78:	f7f3 fb32 	bl	80035e0 <_close>
 800ff7c:	1c43      	adds	r3, r0, #1
 800ff7e:	d103      	bne.n	800ff88 <_close_r+0x1c>
 800ff80:	682b      	ldr	r3, [r5, #0]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d000      	beq.n	800ff88 <_close_r+0x1c>
 800ff86:	6023      	str	r3, [r4, #0]
 800ff88:	bd70      	pop	{r4, r5, r6, pc}
 800ff8a:	46c0      	nop			@ (mov r8, r8)
 800ff8c:	20001dbc 	.word	0x20001dbc

0800ff90 <_lseek_r>:
 800ff90:	b570      	push	{r4, r5, r6, lr}
 800ff92:	0004      	movs	r4, r0
 800ff94:	0008      	movs	r0, r1
 800ff96:	0011      	movs	r1, r2
 800ff98:	001a      	movs	r2, r3
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	4d05      	ldr	r5, [pc, #20]	@ (800ffb4 <_lseek_r+0x24>)
 800ff9e:	602b      	str	r3, [r5, #0]
 800ffa0:	f7f3 fb3f 	bl	8003622 <_lseek>
 800ffa4:	1c43      	adds	r3, r0, #1
 800ffa6:	d103      	bne.n	800ffb0 <_lseek_r+0x20>
 800ffa8:	682b      	ldr	r3, [r5, #0]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d000      	beq.n	800ffb0 <_lseek_r+0x20>
 800ffae:	6023      	str	r3, [r4, #0]
 800ffb0:	bd70      	pop	{r4, r5, r6, pc}
 800ffb2:	46c0      	nop			@ (mov r8, r8)
 800ffb4:	20001dbc 	.word	0x20001dbc

0800ffb8 <_read_r>:
 800ffb8:	b570      	push	{r4, r5, r6, lr}
 800ffba:	0004      	movs	r4, r0
 800ffbc:	0008      	movs	r0, r1
 800ffbe:	0011      	movs	r1, r2
 800ffc0:	001a      	movs	r2, r3
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	4d05      	ldr	r5, [pc, #20]	@ (800ffdc <_read_r+0x24>)
 800ffc6:	602b      	str	r3, [r5, #0]
 800ffc8:	f7f3 fad1 	bl	800356e <_read>
 800ffcc:	1c43      	adds	r3, r0, #1
 800ffce:	d103      	bne.n	800ffd8 <_read_r+0x20>
 800ffd0:	682b      	ldr	r3, [r5, #0]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d000      	beq.n	800ffd8 <_read_r+0x20>
 800ffd6:	6023      	str	r3, [r4, #0]
 800ffd8:	bd70      	pop	{r4, r5, r6, pc}
 800ffda:	46c0      	nop			@ (mov r8, r8)
 800ffdc:	20001dbc 	.word	0x20001dbc

0800ffe0 <_write_r>:
 800ffe0:	b570      	push	{r4, r5, r6, lr}
 800ffe2:	0004      	movs	r4, r0
 800ffe4:	0008      	movs	r0, r1
 800ffe6:	0011      	movs	r1, r2
 800ffe8:	001a      	movs	r2, r3
 800ffea:	2300      	movs	r3, #0
 800ffec:	4d05      	ldr	r5, [pc, #20]	@ (8010004 <_write_r+0x24>)
 800ffee:	602b      	str	r3, [r5, #0]
 800fff0:	f7f3 fada 	bl	80035a8 <_write>
 800fff4:	1c43      	adds	r3, r0, #1
 800fff6:	d103      	bne.n	8010000 <_write_r+0x20>
 800fff8:	682b      	ldr	r3, [r5, #0]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d000      	beq.n	8010000 <_write_r+0x20>
 800fffe:	6023      	str	r3, [r4, #0]
 8010000:	bd70      	pop	{r4, r5, r6, pc}
 8010002:	46c0      	nop			@ (mov r8, r8)
 8010004:	20001dbc 	.word	0x20001dbc

08010008 <__errno>:
 8010008:	4b01      	ldr	r3, [pc, #4]	@ (8010010 <__errno+0x8>)
 801000a:	6818      	ldr	r0, [r3, #0]
 801000c:	4770      	bx	lr
 801000e:	46c0      	nop			@ (mov r8, r8)
 8010010:	200001ec 	.word	0x200001ec

08010014 <__libc_init_array>:
 8010014:	b570      	push	{r4, r5, r6, lr}
 8010016:	2600      	movs	r6, #0
 8010018:	4c0c      	ldr	r4, [pc, #48]	@ (801004c <__libc_init_array+0x38>)
 801001a:	4d0d      	ldr	r5, [pc, #52]	@ (8010050 <__libc_init_array+0x3c>)
 801001c:	1b64      	subs	r4, r4, r5
 801001e:	10a4      	asrs	r4, r4, #2
 8010020:	42a6      	cmp	r6, r4
 8010022:	d109      	bne.n	8010038 <__libc_init_array+0x24>
 8010024:	2600      	movs	r6, #0
 8010026:	f002 f8f3 	bl	8012210 <_init>
 801002a:	4c0a      	ldr	r4, [pc, #40]	@ (8010054 <__libc_init_array+0x40>)
 801002c:	4d0a      	ldr	r5, [pc, #40]	@ (8010058 <__libc_init_array+0x44>)
 801002e:	1b64      	subs	r4, r4, r5
 8010030:	10a4      	asrs	r4, r4, #2
 8010032:	42a6      	cmp	r6, r4
 8010034:	d105      	bne.n	8010042 <__libc_init_array+0x2e>
 8010036:	bd70      	pop	{r4, r5, r6, pc}
 8010038:	00b3      	lsls	r3, r6, #2
 801003a:	58eb      	ldr	r3, [r5, r3]
 801003c:	4798      	blx	r3
 801003e:	3601      	adds	r6, #1
 8010040:	e7ee      	b.n	8010020 <__libc_init_array+0xc>
 8010042:	00b3      	lsls	r3, r6, #2
 8010044:	58eb      	ldr	r3, [r5, r3]
 8010046:	4798      	blx	r3
 8010048:	3601      	adds	r6, #1
 801004a:	e7f2      	b.n	8010032 <__libc_init_array+0x1e>
 801004c:	0801284c 	.word	0x0801284c
 8010050:	0801284c 	.word	0x0801284c
 8010054:	08012850 	.word	0x08012850
 8010058:	0801284c 	.word	0x0801284c

0801005c <__retarget_lock_init_recursive>:
 801005c:	4770      	bx	lr

0801005e <__retarget_lock_acquire_recursive>:
 801005e:	4770      	bx	lr

08010060 <__retarget_lock_release_recursive>:
 8010060:	4770      	bx	lr

08010062 <memchr>:
 8010062:	b2c9      	uxtb	r1, r1
 8010064:	1882      	adds	r2, r0, r2
 8010066:	4290      	cmp	r0, r2
 8010068:	d101      	bne.n	801006e <memchr+0xc>
 801006a:	2000      	movs	r0, #0
 801006c:	4770      	bx	lr
 801006e:	7803      	ldrb	r3, [r0, #0]
 8010070:	428b      	cmp	r3, r1
 8010072:	d0fb      	beq.n	801006c <memchr+0xa>
 8010074:	3001      	adds	r0, #1
 8010076:	e7f6      	b.n	8010066 <memchr+0x4>

08010078 <quorem>:
 8010078:	b5f0      	push	{r4, r5, r6, r7, lr}
 801007a:	6903      	ldr	r3, [r0, #16]
 801007c:	690c      	ldr	r4, [r1, #16]
 801007e:	b089      	sub	sp, #36	@ 0x24
 8010080:	9003      	str	r0, [sp, #12]
 8010082:	9106      	str	r1, [sp, #24]
 8010084:	2000      	movs	r0, #0
 8010086:	42a3      	cmp	r3, r4
 8010088:	db63      	blt.n	8010152 <quorem+0xda>
 801008a:	000b      	movs	r3, r1
 801008c:	3c01      	subs	r4, #1
 801008e:	3314      	adds	r3, #20
 8010090:	00a5      	lsls	r5, r4, #2
 8010092:	9304      	str	r3, [sp, #16]
 8010094:	195b      	adds	r3, r3, r5
 8010096:	9305      	str	r3, [sp, #20]
 8010098:	9b03      	ldr	r3, [sp, #12]
 801009a:	3314      	adds	r3, #20
 801009c:	9301      	str	r3, [sp, #4]
 801009e:	195d      	adds	r5, r3, r5
 80100a0:	9b05      	ldr	r3, [sp, #20]
 80100a2:	682f      	ldr	r7, [r5, #0]
 80100a4:	681e      	ldr	r6, [r3, #0]
 80100a6:	0038      	movs	r0, r7
 80100a8:	3601      	adds	r6, #1
 80100aa:	0031      	movs	r1, r6
 80100ac:	f7f0 f848 	bl	8000140 <__udivsi3>
 80100b0:	9002      	str	r0, [sp, #8]
 80100b2:	42b7      	cmp	r7, r6
 80100b4:	d327      	bcc.n	8010106 <quorem+0x8e>
 80100b6:	9b04      	ldr	r3, [sp, #16]
 80100b8:	2700      	movs	r7, #0
 80100ba:	469c      	mov	ip, r3
 80100bc:	9e01      	ldr	r6, [sp, #4]
 80100be:	9707      	str	r7, [sp, #28]
 80100c0:	4662      	mov	r2, ip
 80100c2:	ca08      	ldmia	r2!, {r3}
 80100c4:	6830      	ldr	r0, [r6, #0]
 80100c6:	4694      	mov	ip, r2
 80100c8:	9a02      	ldr	r2, [sp, #8]
 80100ca:	b299      	uxth	r1, r3
 80100cc:	4351      	muls	r1, r2
 80100ce:	0c1b      	lsrs	r3, r3, #16
 80100d0:	4353      	muls	r3, r2
 80100d2:	19c9      	adds	r1, r1, r7
 80100d4:	0c0a      	lsrs	r2, r1, #16
 80100d6:	189b      	adds	r3, r3, r2
 80100d8:	b289      	uxth	r1, r1
 80100da:	b282      	uxth	r2, r0
 80100dc:	1a52      	subs	r2, r2, r1
 80100de:	9907      	ldr	r1, [sp, #28]
 80100e0:	0c1f      	lsrs	r7, r3, #16
 80100e2:	1852      	adds	r2, r2, r1
 80100e4:	0c00      	lsrs	r0, r0, #16
 80100e6:	b29b      	uxth	r3, r3
 80100e8:	1411      	asrs	r1, r2, #16
 80100ea:	1ac3      	subs	r3, r0, r3
 80100ec:	185b      	adds	r3, r3, r1
 80100ee:	1419      	asrs	r1, r3, #16
 80100f0:	b292      	uxth	r2, r2
 80100f2:	041b      	lsls	r3, r3, #16
 80100f4:	431a      	orrs	r2, r3
 80100f6:	9b05      	ldr	r3, [sp, #20]
 80100f8:	9107      	str	r1, [sp, #28]
 80100fa:	c604      	stmia	r6!, {r2}
 80100fc:	4563      	cmp	r3, ip
 80100fe:	d2df      	bcs.n	80100c0 <quorem+0x48>
 8010100:	682b      	ldr	r3, [r5, #0]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d02b      	beq.n	801015e <quorem+0xe6>
 8010106:	9906      	ldr	r1, [sp, #24]
 8010108:	9803      	ldr	r0, [sp, #12]
 801010a:	f001 f9b7 	bl	801147c <__mcmp>
 801010e:	2800      	cmp	r0, #0
 8010110:	db1e      	blt.n	8010150 <quorem+0xd8>
 8010112:	2600      	movs	r6, #0
 8010114:	9d01      	ldr	r5, [sp, #4]
 8010116:	9904      	ldr	r1, [sp, #16]
 8010118:	c901      	ldmia	r1!, {r0}
 801011a:	682b      	ldr	r3, [r5, #0]
 801011c:	b287      	uxth	r7, r0
 801011e:	b29a      	uxth	r2, r3
 8010120:	1bd2      	subs	r2, r2, r7
 8010122:	1992      	adds	r2, r2, r6
 8010124:	0c00      	lsrs	r0, r0, #16
 8010126:	0c1b      	lsrs	r3, r3, #16
 8010128:	1a1b      	subs	r3, r3, r0
 801012a:	1410      	asrs	r0, r2, #16
 801012c:	181b      	adds	r3, r3, r0
 801012e:	141e      	asrs	r6, r3, #16
 8010130:	b292      	uxth	r2, r2
 8010132:	041b      	lsls	r3, r3, #16
 8010134:	431a      	orrs	r2, r3
 8010136:	9b05      	ldr	r3, [sp, #20]
 8010138:	c504      	stmia	r5!, {r2}
 801013a:	428b      	cmp	r3, r1
 801013c:	d2ec      	bcs.n	8010118 <quorem+0xa0>
 801013e:	9a01      	ldr	r2, [sp, #4]
 8010140:	00a3      	lsls	r3, r4, #2
 8010142:	18d3      	adds	r3, r2, r3
 8010144:	681a      	ldr	r2, [r3, #0]
 8010146:	2a00      	cmp	r2, #0
 8010148:	d014      	beq.n	8010174 <quorem+0xfc>
 801014a:	9b02      	ldr	r3, [sp, #8]
 801014c:	3301      	adds	r3, #1
 801014e:	9302      	str	r3, [sp, #8]
 8010150:	9802      	ldr	r0, [sp, #8]
 8010152:	b009      	add	sp, #36	@ 0x24
 8010154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010156:	682b      	ldr	r3, [r5, #0]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d104      	bne.n	8010166 <quorem+0xee>
 801015c:	3c01      	subs	r4, #1
 801015e:	9b01      	ldr	r3, [sp, #4]
 8010160:	3d04      	subs	r5, #4
 8010162:	42ab      	cmp	r3, r5
 8010164:	d3f7      	bcc.n	8010156 <quorem+0xde>
 8010166:	9b03      	ldr	r3, [sp, #12]
 8010168:	611c      	str	r4, [r3, #16]
 801016a:	e7cc      	b.n	8010106 <quorem+0x8e>
 801016c:	681a      	ldr	r2, [r3, #0]
 801016e:	2a00      	cmp	r2, #0
 8010170:	d104      	bne.n	801017c <quorem+0x104>
 8010172:	3c01      	subs	r4, #1
 8010174:	9a01      	ldr	r2, [sp, #4]
 8010176:	3b04      	subs	r3, #4
 8010178:	429a      	cmp	r2, r3
 801017a:	d3f7      	bcc.n	801016c <quorem+0xf4>
 801017c:	9b03      	ldr	r3, [sp, #12]
 801017e:	611c      	str	r4, [r3, #16]
 8010180:	e7e3      	b.n	801014a <quorem+0xd2>
	...

08010184 <_dtoa_r>:
 8010184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010186:	0014      	movs	r4, r2
 8010188:	001d      	movs	r5, r3
 801018a:	69c6      	ldr	r6, [r0, #28]
 801018c:	b09d      	sub	sp, #116	@ 0x74
 801018e:	940a      	str	r4, [sp, #40]	@ 0x28
 8010190:	950b      	str	r5, [sp, #44]	@ 0x2c
 8010192:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8010194:	9003      	str	r0, [sp, #12]
 8010196:	2e00      	cmp	r6, #0
 8010198:	d10f      	bne.n	80101ba <_dtoa_r+0x36>
 801019a:	2010      	movs	r0, #16
 801019c:	f000 fe2c 	bl	8010df8 <malloc>
 80101a0:	9b03      	ldr	r3, [sp, #12]
 80101a2:	1e02      	subs	r2, r0, #0
 80101a4:	61d8      	str	r0, [r3, #28]
 80101a6:	d104      	bne.n	80101b2 <_dtoa_r+0x2e>
 80101a8:	21ef      	movs	r1, #239	@ 0xef
 80101aa:	4bc7      	ldr	r3, [pc, #796]	@ (80104c8 <_dtoa_r+0x344>)
 80101ac:	48c7      	ldr	r0, [pc, #796]	@ (80104cc <_dtoa_r+0x348>)
 80101ae:	f001 fcb9 	bl	8011b24 <__assert_func>
 80101b2:	6046      	str	r6, [r0, #4]
 80101b4:	6086      	str	r6, [r0, #8]
 80101b6:	6006      	str	r6, [r0, #0]
 80101b8:	60c6      	str	r6, [r0, #12]
 80101ba:	9b03      	ldr	r3, [sp, #12]
 80101bc:	69db      	ldr	r3, [r3, #28]
 80101be:	6819      	ldr	r1, [r3, #0]
 80101c0:	2900      	cmp	r1, #0
 80101c2:	d00b      	beq.n	80101dc <_dtoa_r+0x58>
 80101c4:	685a      	ldr	r2, [r3, #4]
 80101c6:	2301      	movs	r3, #1
 80101c8:	4093      	lsls	r3, r2
 80101ca:	604a      	str	r2, [r1, #4]
 80101cc:	608b      	str	r3, [r1, #8]
 80101ce:	9803      	ldr	r0, [sp, #12]
 80101d0:	f000 ff12 	bl	8010ff8 <_Bfree>
 80101d4:	2200      	movs	r2, #0
 80101d6:	9b03      	ldr	r3, [sp, #12]
 80101d8:	69db      	ldr	r3, [r3, #28]
 80101da:	601a      	str	r2, [r3, #0]
 80101dc:	2d00      	cmp	r5, #0
 80101de:	da1e      	bge.n	801021e <_dtoa_r+0x9a>
 80101e0:	2301      	movs	r3, #1
 80101e2:	603b      	str	r3, [r7, #0]
 80101e4:	006b      	lsls	r3, r5, #1
 80101e6:	085b      	lsrs	r3, r3, #1
 80101e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80101ea:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80101ec:	4bb8      	ldr	r3, [pc, #736]	@ (80104d0 <_dtoa_r+0x34c>)
 80101ee:	4ab8      	ldr	r2, [pc, #736]	@ (80104d0 <_dtoa_r+0x34c>)
 80101f0:	403b      	ands	r3, r7
 80101f2:	4293      	cmp	r3, r2
 80101f4:	d116      	bne.n	8010224 <_dtoa_r+0xa0>
 80101f6:	4bb7      	ldr	r3, [pc, #732]	@ (80104d4 <_dtoa_r+0x350>)
 80101f8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80101fa:	6013      	str	r3, [r2, #0]
 80101fc:	033b      	lsls	r3, r7, #12
 80101fe:	0b1b      	lsrs	r3, r3, #12
 8010200:	4323      	orrs	r3, r4
 8010202:	d101      	bne.n	8010208 <_dtoa_r+0x84>
 8010204:	f000 fd80 	bl	8010d08 <_dtoa_r+0xb84>
 8010208:	4bb3      	ldr	r3, [pc, #716]	@ (80104d8 <_dtoa_r+0x354>)
 801020a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801020c:	9308      	str	r3, [sp, #32]
 801020e:	2a00      	cmp	r2, #0
 8010210:	d002      	beq.n	8010218 <_dtoa_r+0x94>
 8010212:	4bb2      	ldr	r3, [pc, #712]	@ (80104dc <_dtoa_r+0x358>)
 8010214:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8010216:	6013      	str	r3, [r2, #0]
 8010218:	9808      	ldr	r0, [sp, #32]
 801021a:	b01d      	add	sp, #116	@ 0x74
 801021c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801021e:	2300      	movs	r3, #0
 8010220:	603b      	str	r3, [r7, #0]
 8010222:	e7e2      	b.n	80101ea <_dtoa_r+0x66>
 8010224:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010226:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010228:	9212      	str	r2, [sp, #72]	@ 0x48
 801022a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801022c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801022e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010230:	2200      	movs	r2, #0
 8010232:	2300      	movs	r3, #0
 8010234:	f7f0 f90a 	bl	800044c <__aeabi_dcmpeq>
 8010238:	1e06      	subs	r6, r0, #0
 801023a:	d00b      	beq.n	8010254 <_dtoa_r+0xd0>
 801023c:	2301      	movs	r3, #1
 801023e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8010240:	6013      	str	r3, [r2, #0]
 8010242:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8010244:	2b00      	cmp	r3, #0
 8010246:	d002      	beq.n	801024e <_dtoa_r+0xca>
 8010248:	4ba5      	ldr	r3, [pc, #660]	@ (80104e0 <_dtoa_r+0x35c>)
 801024a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801024c:	6013      	str	r3, [r2, #0]
 801024e:	4ba5      	ldr	r3, [pc, #660]	@ (80104e4 <_dtoa_r+0x360>)
 8010250:	9308      	str	r3, [sp, #32]
 8010252:	e7e1      	b.n	8010218 <_dtoa_r+0x94>
 8010254:	ab1a      	add	r3, sp, #104	@ 0x68
 8010256:	9301      	str	r3, [sp, #4]
 8010258:	ab1b      	add	r3, sp, #108	@ 0x6c
 801025a:	9300      	str	r3, [sp, #0]
 801025c:	9803      	ldr	r0, [sp, #12]
 801025e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010260:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010262:	f001 f9c1 	bl	80115e8 <__d2b>
 8010266:	007a      	lsls	r2, r7, #1
 8010268:	9005      	str	r0, [sp, #20]
 801026a:	0d52      	lsrs	r2, r2, #21
 801026c:	d100      	bne.n	8010270 <_dtoa_r+0xec>
 801026e:	e07b      	b.n	8010368 <_dtoa_r+0x1e4>
 8010270:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010272:	9618      	str	r6, [sp, #96]	@ 0x60
 8010274:	0319      	lsls	r1, r3, #12
 8010276:	4b9c      	ldr	r3, [pc, #624]	@ (80104e8 <_dtoa_r+0x364>)
 8010278:	0b09      	lsrs	r1, r1, #12
 801027a:	430b      	orrs	r3, r1
 801027c:	499b      	ldr	r1, [pc, #620]	@ (80104ec <_dtoa_r+0x368>)
 801027e:	1857      	adds	r7, r2, r1
 8010280:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010282:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010284:	0019      	movs	r1, r3
 8010286:	2200      	movs	r2, #0
 8010288:	4b99      	ldr	r3, [pc, #612]	@ (80104f0 <_dtoa_r+0x36c>)
 801028a:	f7f1 fc61 	bl	8001b50 <__aeabi_dsub>
 801028e:	4a99      	ldr	r2, [pc, #612]	@ (80104f4 <_dtoa_r+0x370>)
 8010290:	4b99      	ldr	r3, [pc, #612]	@ (80104f8 <_dtoa_r+0x374>)
 8010292:	f7f1 f977 	bl	8001584 <__aeabi_dmul>
 8010296:	4a99      	ldr	r2, [pc, #612]	@ (80104fc <_dtoa_r+0x378>)
 8010298:	4b99      	ldr	r3, [pc, #612]	@ (8010500 <_dtoa_r+0x37c>)
 801029a:	f7f0 f973 	bl	8000584 <__aeabi_dadd>
 801029e:	0004      	movs	r4, r0
 80102a0:	0038      	movs	r0, r7
 80102a2:	000d      	movs	r5, r1
 80102a4:	f7f2 f8bc 	bl	8002420 <__aeabi_i2d>
 80102a8:	4a96      	ldr	r2, [pc, #600]	@ (8010504 <_dtoa_r+0x380>)
 80102aa:	4b97      	ldr	r3, [pc, #604]	@ (8010508 <_dtoa_r+0x384>)
 80102ac:	f7f1 f96a 	bl	8001584 <__aeabi_dmul>
 80102b0:	0002      	movs	r2, r0
 80102b2:	000b      	movs	r3, r1
 80102b4:	0020      	movs	r0, r4
 80102b6:	0029      	movs	r1, r5
 80102b8:	f7f0 f964 	bl	8000584 <__aeabi_dadd>
 80102bc:	0004      	movs	r4, r0
 80102be:	000d      	movs	r5, r1
 80102c0:	f7f2 f872 	bl	80023a8 <__aeabi_d2iz>
 80102c4:	2200      	movs	r2, #0
 80102c6:	9004      	str	r0, [sp, #16]
 80102c8:	2300      	movs	r3, #0
 80102ca:	0020      	movs	r0, r4
 80102cc:	0029      	movs	r1, r5
 80102ce:	f7f0 f8c3 	bl	8000458 <__aeabi_dcmplt>
 80102d2:	2800      	cmp	r0, #0
 80102d4:	d00b      	beq.n	80102ee <_dtoa_r+0x16a>
 80102d6:	9804      	ldr	r0, [sp, #16]
 80102d8:	f7f2 f8a2 	bl	8002420 <__aeabi_i2d>
 80102dc:	002b      	movs	r3, r5
 80102de:	0022      	movs	r2, r4
 80102e0:	f7f0 f8b4 	bl	800044c <__aeabi_dcmpeq>
 80102e4:	4243      	negs	r3, r0
 80102e6:	4158      	adcs	r0, r3
 80102e8:	9b04      	ldr	r3, [sp, #16]
 80102ea:	1a1b      	subs	r3, r3, r0
 80102ec:	9304      	str	r3, [sp, #16]
 80102ee:	2301      	movs	r3, #1
 80102f0:	9315      	str	r3, [sp, #84]	@ 0x54
 80102f2:	9b04      	ldr	r3, [sp, #16]
 80102f4:	2b16      	cmp	r3, #22
 80102f6:	d810      	bhi.n	801031a <_dtoa_r+0x196>
 80102f8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80102fa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80102fc:	9a04      	ldr	r2, [sp, #16]
 80102fe:	4b83      	ldr	r3, [pc, #524]	@ (801050c <_dtoa_r+0x388>)
 8010300:	00d2      	lsls	r2, r2, #3
 8010302:	189b      	adds	r3, r3, r2
 8010304:	681a      	ldr	r2, [r3, #0]
 8010306:	685b      	ldr	r3, [r3, #4]
 8010308:	f7f0 f8a6 	bl	8000458 <__aeabi_dcmplt>
 801030c:	2800      	cmp	r0, #0
 801030e:	d047      	beq.n	80103a0 <_dtoa_r+0x21c>
 8010310:	9b04      	ldr	r3, [sp, #16]
 8010312:	3b01      	subs	r3, #1
 8010314:	9304      	str	r3, [sp, #16]
 8010316:	2300      	movs	r3, #0
 8010318:	9315      	str	r3, [sp, #84]	@ 0x54
 801031a:	2200      	movs	r2, #0
 801031c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801031e:	9206      	str	r2, [sp, #24]
 8010320:	1bdb      	subs	r3, r3, r7
 8010322:	1e5a      	subs	r2, r3, #1
 8010324:	d53e      	bpl.n	80103a4 <_dtoa_r+0x220>
 8010326:	2201      	movs	r2, #1
 8010328:	1ad3      	subs	r3, r2, r3
 801032a:	9306      	str	r3, [sp, #24]
 801032c:	2300      	movs	r3, #0
 801032e:	930d      	str	r3, [sp, #52]	@ 0x34
 8010330:	9b04      	ldr	r3, [sp, #16]
 8010332:	2b00      	cmp	r3, #0
 8010334:	db38      	blt.n	80103a8 <_dtoa_r+0x224>
 8010336:	9a04      	ldr	r2, [sp, #16]
 8010338:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801033a:	4694      	mov	ip, r2
 801033c:	4463      	add	r3, ip
 801033e:	930d      	str	r3, [sp, #52]	@ 0x34
 8010340:	2300      	movs	r3, #0
 8010342:	9214      	str	r2, [sp, #80]	@ 0x50
 8010344:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010346:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010348:	2401      	movs	r4, #1
 801034a:	2b09      	cmp	r3, #9
 801034c:	d862      	bhi.n	8010414 <_dtoa_r+0x290>
 801034e:	2b05      	cmp	r3, #5
 8010350:	dd02      	ble.n	8010358 <_dtoa_r+0x1d4>
 8010352:	2400      	movs	r4, #0
 8010354:	3b04      	subs	r3, #4
 8010356:	9322      	str	r3, [sp, #136]	@ 0x88
 8010358:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801035a:	1e98      	subs	r0, r3, #2
 801035c:	2803      	cmp	r0, #3
 801035e:	d863      	bhi.n	8010428 <_dtoa_r+0x2a4>
 8010360:	f7ef feda 	bl	8000118 <__gnu_thumb1_case_uqi>
 8010364:	2b385654 	.word	0x2b385654
 8010368:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801036a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801036c:	18f6      	adds	r6, r6, r3
 801036e:	4b68      	ldr	r3, [pc, #416]	@ (8010510 <_dtoa_r+0x38c>)
 8010370:	18f2      	adds	r2, r6, r3
 8010372:	2a20      	cmp	r2, #32
 8010374:	dd0f      	ble.n	8010396 <_dtoa_r+0x212>
 8010376:	2340      	movs	r3, #64	@ 0x40
 8010378:	1a9b      	subs	r3, r3, r2
 801037a:	409f      	lsls	r7, r3
 801037c:	4b65      	ldr	r3, [pc, #404]	@ (8010514 <_dtoa_r+0x390>)
 801037e:	0038      	movs	r0, r7
 8010380:	18f3      	adds	r3, r6, r3
 8010382:	40dc      	lsrs	r4, r3
 8010384:	4320      	orrs	r0, r4
 8010386:	f7f2 f879 	bl	800247c <__aeabi_ui2d>
 801038a:	2201      	movs	r2, #1
 801038c:	4b62      	ldr	r3, [pc, #392]	@ (8010518 <_dtoa_r+0x394>)
 801038e:	1e77      	subs	r7, r6, #1
 8010390:	18cb      	adds	r3, r1, r3
 8010392:	9218      	str	r2, [sp, #96]	@ 0x60
 8010394:	e776      	b.n	8010284 <_dtoa_r+0x100>
 8010396:	2320      	movs	r3, #32
 8010398:	0020      	movs	r0, r4
 801039a:	1a9b      	subs	r3, r3, r2
 801039c:	4098      	lsls	r0, r3
 801039e:	e7f2      	b.n	8010386 <_dtoa_r+0x202>
 80103a0:	9015      	str	r0, [sp, #84]	@ 0x54
 80103a2:	e7ba      	b.n	801031a <_dtoa_r+0x196>
 80103a4:	920d      	str	r2, [sp, #52]	@ 0x34
 80103a6:	e7c3      	b.n	8010330 <_dtoa_r+0x1ac>
 80103a8:	9b06      	ldr	r3, [sp, #24]
 80103aa:	9a04      	ldr	r2, [sp, #16]
 80103ac:	1a9b      	subs	r3, r3, r2
 80103ae:	9306      	str	r3, [sp, #24]
 80103b0:	4253      	negs	r3, r2
 80103b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80103b4:	2300      	movs	r3, #0
 80103b6:	9314      	str	r3, [sp, #80]	@ 0x50
 80103b8:	e7c5      	b.n	8010346 <_dtoa_r+0x1c2>
 80103ba:	2301      	movs	r3, #1
 80103bc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80103be:	9310      	str	r3, [sp, #64]	@ 0x40
 80103c0:	4694      	mov	ip, r2
 80103c2:	9b04      	ldr	r3, [sp, #16]
 80103c4:	4463      	add	r3, ip
 80103c6:	930e      	str	r3, [sp, #56]	@ 0x38
 80103c8:	3301      	adds	r3, #1
 80103ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	dc08      	bgt.n	80103e2 <_dtoa_r+0x25e>
 80103d0:	2301      	movs	r3, #1
 80103d2:	e006      	b.n	80103e2 <_dtoa_r+0x25e>
 80103d4:	2301      	movs	r3, #1
 80103d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80103d8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80103da:	2b00      	cmp	r3, #0
 80103dc:	dd28      	ble.n	8010430 <_dtoa_r+0x2ac>
 80103de:	930e      	str	r3, [sp, #56]	@ 0x38
 80103e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80103e2:	9a03      	ldr	r2, [sp, #12]
 80103e4:	2100      	movs	r1, #0
 80103e6:	69d0      	ldr	r0, [r2, #28]
 80103e8:	2204      	movs	r2, #4
 80103ea:	0015      	movs	r5, r2
 80103ec:	3514      	adds	r5, #20
 80103ee:	429d      	cmp	r5, r3
 80103f0:	d923      	bls.n	801043a <_dtoa_r+0x2b6>
 80103f2:	6041      	str	r1, [r0, #4]
 80103f4:	9803      	ldr	r0, [sp, #12]
 80103f6:	f000 fdbb 	bl	8010f70 <_Balloc>
 80103fa:	9008      	str	r0, [sp, #32]
 80103fc:	2800      	cmp	r0, #0
 80103fe:	d11f      	bne.n	8010440 <_dtoa_r+0x2bc>
 8010400:	21b0      	movs	r1, #176	@ 0xb0
 8010402:	4b46      	ldr	r3, [pc, #280]	@ (801051c <_dtoa_r+0x398>)
 8010404:	4831      	ldr	r0, [pc, #196]	@ (80104cc <_dtoa_r+0x348>)
 8010406:	9a08      	ldr	r2, [sp, #32]
 8010408:	31ff      	adds	r1, #255	@ 0xff
 801040a:	e6d0      	b.n	80101ae <_dtoa_r+0x2a>
 801040c:	2300      	movs	r3, #0
 801040e:	e7e2      	b.n	80103d6 <_dtoa_r+0x252>
 8010410:	2300      	movs	r3, #0
 8010412:	e7d3      	b.n	80103bc <_dtoa_r+0x238>
 8010414:	2300      	movs	r3, #0
 8010416:	9410      	str	r4, [sp, #64]	@ 0x40
 8010418:	9322      	str	r3, [sp, #136]	@ 0x88
 801041a:	3b01      	subs	r3, #1
 801041c:	2200      	movs	r2, #0
 801041e:	930e      	str	r3, [sp, #56]	@ 0x38
 8010420:	9309      	str	r3, [sp, #36]	@ 0x24
 8010422:	3313      	adds	r3, #19
 8010424:	9223      	str	r2, [sp, #140]	@ 0x8c
 8010426:	e7dc      	b.n	80103e2 <_dtoa_r+0x25e>
 8010428:	2301      	movs	r3, #1
 801042a:	9310      	str	r3, [sp, #64]	@ 0x40
 801042c:	3b02      	subs	r3, #2
 801042e:	e7f5      	b.n	801041c <_dtoa_r+0x298>
 8010430:	2301      	movs	r3, #1
 8010432:	001a      	movs	r2, r3
 8010434:	930e      	str	r3, [sp, #56]	@ 0x38
 8010436:	9309      	str	r3, [sp, #36]	@ 0x24
 8010438:	e7f4      	b.n	8010424 <_dtoa_r+0x2a0>
 801043a:	3101      	adds	r1, #1
 801043c:	0052      	lsls	r2, r2, #1
 801043e:	e7d4      	b.n	80103ea <_dtoa_r+0x266>
 8010440:	9b03      	ldr	r3, [sp, #12]
 8010442:	9a08      	ldr	r2, [sp, #32]
 8010444:	69db      	ldr	r3, [r3, #28]
 8010446:	601a      	str	r2, [r3, #0]
 8010448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801044a:	2b0e      	cmp	r3, #14
 801044c:	d900      	bls.n	8010450 <_dtoa_r+0x2cc>
 801044e:	e0d6      	b.n	80105fe <_dtoa_r+0x47a>
 8010450:	2c00      	cmp	r4, #0
 8010452:	d100      	bne.n	8010456 <_dtoa_r+0x2d2>
 8010454:	e0d3      	b.n	80105fe <_dtoa_r+0x47a>
 8010456:	9b04      	ldr	r3, [sp, #16]
 8010458:	2b00      	cmp	r3, #0
 801045a:	dd63      	ble.n	8010524 <_dtoa_r+0x3a0>
 801045c:	210f      	movs	r1, #15
 801045e:	9a04      	ldr	r2, [sp, #16]
 8010460:	4b2a      	ldr	r3, [pc, #168]	@ (801050c <_dtoa_r+0x388>)
 8010462:	400a      	ands	r2, r1
 8010464:	00d2      	lsls	r2, r2, #3
 8010466:	189b      	adds	r3, r3, r2
 8010468:	681e      	ldr	r6, [r3, #0]
 801046a:	685f      	ldr	r7, [r3, #4]
 801046c:	9b04      	ldr	r3, [sp, #16]
 801046e:	2402      	movs	r4, #2
 8010470:	111d      	asrs	r5, r3, #4
 8010472:	05db      	lsls	r3, r3, #23
 8010474:	d50a      	bpl.n	801048c <_dtoa_r+0x308>
 8010476:	4b2a      	ldr	r3, [pc, #168]	@ (8010520 <_dtoa_r+0x39c>)
 8010478:	400d      	ands	r5, r1
 801047a:	6a1a      	ldr	r2, [r3, #32]
 801047c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801047e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010480:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010482:	f7f0 fc45 	bl	8000d10 <__aeabi_ddiv>
 8010486:	900a      	str	r0, [sp, #40]	@ 0x28
 8010488:	910b      	str	r1, [sp, #44]	@ 0x2c
 801048a:	3401      	adds	r4, #1
 801048c:	4b24      	ldr	r3, [pc, #144]	@ (8010520 <_dtoa_r+0x39c>)
 801048e:	930c      	str	r3, [sp, #48]	@ 0x30
 8010490:	2d00      	cmp	r5, #0
 8010492:	d108      	bne.n	80104a6 <_dtoa_r+0x322>
 8010494:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010496:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010498:	0032      	movs	r2, r6
 801049a:	003b      	movs	r3, r7
 801049c:	f7f0 fc38 	bl	8000d10 <__aeabi_ddiv>
 80104a0:	900a      	str	r0, [sp, #40]	@ 0x28
 80104a2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80104a4:	e059      	b.n	801055a <_dtoa_r+0x3d6>
 80104a6:	2301      	movs	r3, #1
 80104a8:	421d      	tst	r5, r3
 80104aa:	d009      	beq.n	80104c0 <_dtoa_r+0x33c>
 80104ac:	18e4      	adds	r4, r4, r3
 80104ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80104b0:	0030      	movs	r0, r6
 80104b2:	681a      	ldr	r2, [r3, #0]
 80104b4:	685b      	ldr	r3, [r3, #4]
 80104b6:	0039      	movs	r1, r7
 80104b8:	f7f1 f864 	bl	8001584 <__aeabi_dmul>
 80104bc:	0006      	movs	r6, r0
 80104be:	000f      	movs	r7, r1
 80104c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80104c2:	106d      	asrs	r5, r5, #1
 80104c4:	3308      	adds	r3, #8
 80104c6:	e7e2      	b.n	801048e <_dtoa_r+0x30a>
 80104c8:	08012517 	.word	0x08012517
 80104cc:	0801252e 	.word	0x0801252e
 80104d0:	7ff00000 	.word	0x7ff00000
 80104d4:	0000270f 	.word	0x0000270f
 80104d8:	08012513 	.word	0x08012513
 80104dc:	08012516 	.word	0x08012516
 80104e0:	080124e7 	.word	0x080124e7
 80104e4:	080124e6 	.word	0x080124e6
 80104e8:	3ff00000 	.word	0x3ff00000
 80104ec:	fffffc01 	.word	0xfffffc01
 80104f0:	3ff80000 	.word	0x3ff80000
 80104f4:	636f4361 	.word	0x636f4361
 80104f8:	3fd287a7 	.word	0x3fd287a7
 80104fc:	8b60c8b3 	.word	0x8b60c8b3
 8010500:	3fc68a28 	.word	0x3fc68a28
 8010504:	509f79fb 	.word	0x509f79fb
 8010508:	3fd34413 	.word	0x3fd34413
 801050c:	08012680 	.word	0x08012680
 8010510:	00000432 	.word	0x00000432
 8010514:	00000412 	.word	0x00000412
 8010518:	fe100000 	.word	0xfe100000
 801051c:	08012586 	.word	0x08012586
 8010520:	08012658 	.word	0x08012658
 8010524:	9b04      	ldr	r3, [sp, #16]
 8010526:	2402      	movs	r4, #2
 8010528:	2b00      	cmp	r3, #0
 801052a:	d016      	beq.n	801055a <_dtoa_r+0x3d6>
 801052c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801052e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010530:	220f      	movs	r2, #15
 8010532:	425d      	negs	r5, r3
 8010534:	402a      	ands	r2, r5
 8010536:	4bd5      	ldr	r3, [pc, #852]	@ (801088c <_dtoa_r+0x708>)
 8010538:	00d2      	lsls	r2, r2, #3
 801053a:	189b      	adds	r3, r3, r2
 801053c:	681a      	ldr	r2, [r3, #0]
 801053e:	685b      	ldr	r3, [r3, #4]
 8010540:	f7f1 f820 	bl	8001584 <__aeabi_dmul>
 8010544:	2701      	movs	r7, #1
 8010546:	2300      	movs	r3, #0
 8010548:	900a      	str	r0, [sp, #40]	@ 0x28
 801054a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801054c:	4ed0      	ldr	r6, [pc, #832]	@ (8010890 <_dtoa_r+0x70c>)
 801054e:	112d      	asrs	r5, r5, #4
 8010550:	2d00      	cmp	r5, #0
 8010552:	d000      	beq.n	8010556 <_dtoa_r+0x3d2>
 8010554:	e095      	b.n	8010682 <_dtoa_r+0x4fe>
 8010556:	2b00      	cmp	r3, #0
 8010558:	d1a2      	bne.n	80104a0 <_dtoa_r+0x31c>
 801055a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801055c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801055e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010560:	2b00      	cmp	r3, #0
 8010562:	d100      	bne.n	8010566 <_dtoa_r+0x3e2>
 8010564:	e098      	b.n	8010698 <_dtoa_r+0x514>
 8010566:	2200      	movs	r2, #0
 8010568:	0030      	movs	r0, r6
 801056a:	0039      	movs	r1, r7
 801056c:	4bc9      	ldr	r3, [pc, #804]	@ (8010894 <_dtoa_r+0x710>)
 801056e:	f7ef ff73 	bl	8000458 <__aeabi_dcmplt>
 8010572:	2800      	cmp	r0, #0
 8010574:	d100      	bne.n	8010578 <_dtoa_r+0x3f4>
 8010576:	e08f      	b.n	8010698 <_dtoa_r+0x514>
 8010578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801057a:	2b00      	cmp	r3, #0
 801057c:	d100      	bne.n	8010580 <_dtoa_r+0x3fc>
 801057e:	e08b      	b.n	8010698 <_dtoa_r+0x514>
 8010580:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010582:	2b00      	cmp	r3, #0
 8010584:	dd37      	ble.n	80105f6 <_dtoa_r+0x472>
 8010586:	9b04      	ldr	r3, [sp, #16]
 8010588:	2200      	movs	r2, #0
 801058a:	3b01      	subs	r3, #1
 801058c:	930c      	str	r3, [sp, #48]	@ 0x30
 801058e:	0030      	movs	r0, r6
 8010590:	4bc1      	ldr	r3, [pc, #772]	@ (8010898 <_dtoa_r+0x714>)
 8010592:	0039      	movs	r1, r7
 8010594:	f7f0 fff6 	bl	8001584 <__aeabi_dmul>
 8010598:	900a      	str	r0, [sp, #40]	@ 0x28
 801059a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801059c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801059e:	3401      	adds	r4, #1
 80105a0:	0020      	movs	r0, r4
 80105a2:	9311      	str	r3, [sp, #68]	@ 0x44
 80105a4:	f7f1 ff3c 	bl	8002420 <__aeabi_i2d>
 80105a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80105aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80105ac:	f7f0 ffea 	bl	8001584 <__aeabi_dmul>
 80105b0:	4bba      	ldr	r3, [pc, #744]	@ (801089c <_dtoa_r+0x718>)
 80105b2:	2200      	movs	r2, #0
 80105b4:	f7ef ffe6 	bl	8000584 <__aeabi_dadd>
 80105b8:	4bb9      	ldr	r3, [pc, #740]	@ (80108a0 <_dtoa_r+0x71c>)
 80105ba:	0006      	movs	r6, r0
 80105bc:	18cf      	adds	r7, r1, r3
 80105be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d16d      	bne.n	80106a0 <_dtoa_r+0x51c>
 80105c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80105c6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80105c8:	2200      	movs	r2, #0
 80105ca:	4bb6      	ldr	r3, [pc, #728]	@ (80108a4 <_dtoa_r+0x720>)
 80105cc:	f7f1 fac0 	bl	8001b50 <__aeabi_dsub>
 80105d0:	0032      	movs	r2, r6
 80105d2:	003b      	movs	r3, r7
 80105d4:	0004      	movs	r4, r0
 80105d6:	000d      	movs	r5, r1
 80105d8:	f7ef ff52 	bl	8000480 <__aeabi_dcmpgt>
 80105dc:	2800      	cmp	r0, #0
 80105de:	d000      	beq.n	80105e2 <_dtoa_r+0x45e>
 80105e0:	e2b6      	b.n	8010b50 <_dtoa_r+0x9cc>
 80105e2:	2180      	movs	r1, #128	@ 0x80
 80105e4:	0609      	lsls	r1, r1, #24
 80105e6:	187b      	adds	r3, r7, r1
 80105e8:	0032      	movs	r2, r6
 80105ea:	0020      	movs	r0, r4
 80105ec:	0029      	movs	r1, r5
 80105ee:	f7ef ff33 	bl	8000458 <__aeabi_dcmplt>
 80105f2:	2800      	cmp	r0, #0
 80105f4:	d128      	bne.n	8010648 <_dtoa_r+0x4c4>
 80105f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80105f8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80105fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80105fc:	940b      	str	r4, [sp, #44]	@ 0x2c
 80105fe:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010600:	2b00      	cmp	r3, #0
 8010602:	da00      	bge.n	8010606 <_dtoa_r+0x482>
 8010604:	e174      	b.n	80108f0 <_dtoa_r+0x76c>
 8010606:	9a04      	ldr	r2, [sp, #16]
 8010608:	2a0e      	cmp	r2, #14
 801060a:	dd00      	ble.n	801060e <_dtoa_r+0x48a>
 801060c:	e170      	b.n	80108f0 <_dtoa_r+0x76c>
 801060e:	4b9f      	ldr	r3, [pc, #636]	@ (801088c <_dtoa_r+0x708>)
 8010610:	00d2      	lsls	r2, r2, #3
 8010612:	189b      	adds	r3, r3, r2
 8010614:	685c      	ldr	r4, [r3, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	9306      	str	r3, [sp, #24]
 801061a:	9407      	str	r4, [sp, #28]
 801061c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801061e:	2b00      	cmp	r3, #0
 8010620:	db00      	blt.n	8010624 <_dtoa_r+0x4a0>
 8010622:	e0e7      	b.n	80107f4 <_dtoa_r+0x670>
 8010624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010626:	2b00      	cmp	r3, #0
 8010628:	dd00      	ble.n	801062c <_dtoa_r+0x4a8>
 801062a:	e0e3      	b.n	80107f4 <_dtoa_r+0x670>
 801062c:	d10c      	bne.n	8010648 <_dtoa_r+0x4c4>
 801062e:	9806      	ldr	r0, [sp, #24]
 8010630:	9907      	ldr	r1, [sp, #28]
 8010632:	2200      	movs	r2, #0
 8010634:	4b9b      	ldr	r3, [pc, #620]	@ (80108a4 <_dtoa_r+0x720>)
 8010636:	f7f0 ffa5 	bl	8001584 <__aeabi_dmul>
 801063a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801063c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801063e:	f7ef ff29 	bl	8000494 <__aeabi_dcmpge>
 8010642:	2800      	cmp	r0, #0
 8010644:	d100      	bne.n	8010648 <_dtoa_r+0x4c4>
 8010646:	e286      	b.n	8010b56 <_dtoa_r+0x9d2>
 8010648:	2600      	movs	r6, #0
 801064a:	0037      	movs	r7, r6
 801064c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801064e:	9c08      	ldr	r4, [sp, #32]
 8010650:	43db      	mvns	r3, r3
 8010652:	930c      	str	r3, [sp, #48]	@ 0x30
 8010654:	9704      	str	r7, [sp, #16]
 8010656:	2700      	movs	r7, #0
 8010658:	0031      	movs	r1, r6
 801065a:	9803      	ldr	r0, [sp, #12]
 801065c:	f000 fccc 	bl	8010ff8 <_Bfree>
 8010660:	9b04      	ldr	r3, [sp, #16]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d100      	bne.n	8010668 <_dtoa_r+0x4e4>
 8010666:	e0bb      	b.n	80107e0 <_dtoa_r+0x65c>
 8010668:	2f00      	cmp	r7, #0
 801066a:	d005      	beq.n	8010678 <_dtoa_r+0x4f4>
 801066c:	429f      	cmp	r7, r3
 801066e:	d003      	beq.n	8010678 <_dtoa_r+0x4f4>
 8010670:	0039      	movs	r1, r7
 8010672:	9803      	ldr	r0, [sp, #12]
 8010674:	f000 fcc0 	bl	8010ff8 <_Bfree>
 8010678:	9904      	ldr	r1, [sp, #16]
 801067a:	9803      	ldr	r0, [sp, #12]
 801067c:	f000 fcbc 	bl	8010ff8 <_Bfree>
 8010680:	e0ae      	b.n	80107e0 <_dtoa_r+0x65c>
 8010682:	423d      	tst	r5, r7
 8010684:	d005      	beq.n	8010692 <_dtoa_r+0x50e>
 8010686:	6832      	ldr	r2, [r6, #0]
 8010688:	6873      	ldr	r3, [r6, #4]
 801068a:	f7f0 ff7b 	bl	8001584 <__aeabi_dmul>
 801068e:	003b      	movs	r3, r7
 8010690:	3401      	adds	r4, #1
 8010692:	106d      	asrs	r5, r5, #1
 8010694:	3608      	adds	r6, #8
 8010696:	e75b      	b.n	8010550 <_dtoa_r+0x3cc>
 8010698:	9b04      	ldr	r3, [sp, #16]
 801069a:	930c      	str	r3, [sp, #48]	@ 0x30
 801069c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801069e:	e77f      	b.n	80105a0 <_dtoa_r+0x41c>
 80106a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80106a2:	4b7a      	ldr	r3, [pc, #488]	@ (801088c <_dtoa_r+0x708>)
 80106a4:	3a01      	subs	r2, #1
 80106a6:	00d2      	lsls	r2, r2, #3
 80106a8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80106aa:	189b      	adds	r3, r3, r2
 80106ac:	681a      	ldr	r2, [r3, #0]
 80106ae:	685b      	ldr	r3, [r3, #4]
 80106b0:	2900      	cmp	r1, #0
 80106b2:	d04c      	beq.n	801074e <_dtoa_r+0x5ca>
 80106b4:	2000      	movs	r0, #0
 80106b6:	497c      	ldr	r1, [pc, #496]	@ (80108a8 <_dtoa_r+0x724>)
 80106b8:	f7f0 fb2a 	bl	8000d10 <__aeabi_ddiv>
 80106bc:	0032      	movs	r2, r6
 80106be:	003b      	movs	r3, r7
 80106c0:	f7f1 fa46 	bl	8001b50 <__aeabi_dsub>
 80106c4:	9a08      	ldr	r2, [sp, #32]
 80106c6:	0006      	movs	r6, r0
 80106c8:	4694      	mov	ip, r2
 80106ca:	000f      	movs	r7, r1
 80106cc:	9b08      	ldr	r3, [sp, #32]
 80106ce:	9316      	str	r3, [sp, #88]	@ 0x58
 80106d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80106d2:	4463      	add	r3, ip
 80106d4:	9311      	str	r3, [sp, #68]	@ 0x44
 80106d6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80106d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80106da:	f7f1 fe65 	bl	80023a8 <__aeabi_d2iz>
 80106de:	0005      	movs	r5, r0
 80106e0:	f7f1 fe9e 	bl	8002420 <__aeabi_i2d>
 80106e4:	0002      	movs	r2, r0
 80106e6:	000b      	movs	r3, r1
 80106e8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80106ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80106ec:	f7f1 fa30 	bl	8001b50 <__aeabi_dsub>
 80106f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80106f2:	3530      	adds	r5, #48	@ 0x30
 80106f4:	1c5c      	adds	r4, r3, #1
 80106f6:	701d      	strb	r5, [r3, #0]
 80106f8:	0032      	movs	r2, r6
 80106fa:	003b      	movs	r3, r7
 80106fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80106fe:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010700:	f7ef feaa 	bl	8000458 <__aeabi_dcmplt>
 8010704:	2800      	cmp	r0, #0
 8010706:	d16b      	bne.n	80107e0 <_dtoa_r+0x65c>
 8010708:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801070a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801070c:	2000      	movs	r0, #0
 801070e:	4961      	ldr	r1, [pc, #388]	@ (8010894 <_dtoa_r+0x710>)
 8010710:	f7f1 fa1e 	bl	8001b50 <__aeabi_dsub>
 8010714:	0032      	movs	r2, r6
 8010716:	003b      	movs	r3, r7
 8010718:	f7ef fe9e 	bl	8000458 <__aeabi_dcmplt>
 801071c:	2800      	cmp	r0, #0
 801071e:	d000      	beq.n	8010722 <_dtoa_r+0x59e>
 8010720:	e0c6      	b.n	80108b0 <_dtoa_r+0x72c>
 8010722:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010724:	42a3      	cmp	r3, r4
 8010726:	d100      	bne.n	801072a <_dtoa_r+0x5a6>
 8010728:	e765      	b.n	80105f6 <_dtoa_r+0x472>
 801072a:	2200      	movs	r2, #0
 801072c:	0030      	movs	r0, r6
 801072e:	0039      	movs	r1, r7
 8010730:	4b59      	ldr	r3, [pc, #356]	@ (8010898 <_dtoa_r+0x714>)
 8010732:	f7f0 ff27 	bl	8001584 <__aeabi_dmul>
 8010736:	2200      	movs	r2, #0
 8010738:	0006      	movs	r6, r0
 801073a:	000f      	movs	r7, r1
 801073c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801073e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010740:	4b55      	ldr	r3, [pc, #340]	@ (8010898 <_dtoa_r+0x714>)
 8010742:	f7f0 ff1f 	bl	8001584 <__aeabi_dmul>
 8010746:	9416      	str	r4, [sp, #88]	@ 0x58
 8010748:	900a      	str	r0, [sp, #40]	@ 0x28
 801074a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801074c:	e7c3      	b.n	80106d6 <_dtoa_r+0x552>
 801074e:	0030      	movs	r0, r6
 8010750:	0039      	movs	r1, r7
 8010752:	f7f0 ff17 	bl	8001584 <__aeabi_dmul>
 8010756:	9d08      	ldr	r5, [sp, #32]
 8010758:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801075a:	002b      	movs	r3, r5
 801075c:	4694      	mov	ip, r2
 801075e:	9016      	str	r0, [sp, #88]	@ 0x58
 8010760:	9117      	str	r1, [sp, #92]	@ 0x5c
 8010762:	4463      	add	r3, ip
 8010764:	9319      	str	r3, [sp, #100]	@ 0x64
 8010766:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010768:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801076a:	f7f1 fe1d 	bl	80023a8 <__aeabi_d2iz>
 801076e:	0004      	movs	r4, r0
 8010770:	f7f1 fe56 	bl	8002420 <__aeabi_i2d>
 8010774:	000b      	movs	r3, r1
 8010776:	0002      	movs	r2, r0
 8010778:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801077a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801077c:	f7f1 f9e8 	bl	8001b50 <__aeabi_dsub>
 8010780:	3430      	adds	r4, #48	@ 0x30
 8010782:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010784:	702c      	strb	r4, [r5, #0]
 8010786:	3501      	adds	r5, #1
 8010788:	0006      	movs	r6, r0
 801078a:	000f      	movs	r7, r1
 801078c:	42ab      	cmp	r3, r5
 801078e:	d12a      	bne.n	80107e6 <_dtoa_r+0x662>
 8010790:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8010792:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8010794:	9b08      	ldr	r3, [sp, #32]
 8010796:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8010798:	469c      	mov	ip, r3
 801079a:	2200      	movs	r2, #0
 801079c:	4b42      	ldr	r3, [pc, #264]	@ (80108a8 <_dtoa_r+0x724>)
 801079e:	4464      	add	r4, ip
 80107a0:	f7ef fef0 	bl	8000584 <__aeabi_dadd>
 80107a4:	0002      	movs	r2, r0
 80107a6:	000b      	movs	r3, r1
 80107a8:	0030      	movs	r0, r6
 80107aa:	0039      	movs	r1, r7
 80107ac:	f7ef fe68 	bl	8000480 <__aeabi_dcmpgt>
 80107b0:	2800      	cmp	r0, #0
 80107b2:	d000      	beq.n	80107b6 <_dtoa_r+0x632>
 80107b4:	e07c      	b.n	80108b0 <_dtoa_r+0x72c>
 80107b6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80107b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80107ba:	2000      	movs	r0, #0
 80107bc:	493a      	ldr	r1, [pc, #232]	@ (80108a8 <_dtoa_r+0x724>)
 80107be:	f7f1 f9c7 	bl	8001b50 <__aeabi_dsub>
 80107c2:	0002      	movs	r2, r0
 80107c4:	000b      	movs	r3, r1
 80107c6:	0030      	movs	r0, r6
 80107c8:	0039      	movs	r1, r7
 80107ca:	f7ef fe45 	bl	8000458 <__aeabi_dcmplt>
 80107ce:	2800      	cmp	r0, #0
 80107d0:	d100      	bne.n	80107d4 <_dtoa_r+0x650>
 80107d2:	e710      	b.n	80105f6 <_dtoa_r+0x472>
 80107d4:	0023      	movs	r3, r4
 80107d6:	3c01      	subs	r4, #1
 80107d8:	7822      	ldrb	r2, [r4, #0]
 80107da:	2a30      	cmp	r2, #48	@ 0x30
 80107dc:	d0fa      	beq.n	80107d4 <_dtoa_r+0x650>
 80107de:	001c      	movs	r4, r3
 80107e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80107e2:	9304      	str	r3, [sp, #16]
 80107e4:	e042      	b.n	801086c <_dtoa_r+0x6e8>
 80107e6:	2200      	movs	r2, #0
 80107e8:	4b2b      	ldr	r3, [pc, #172]	@ (8010898 <_dtoa_r+0x714>)
 80107ea:	f7f0 fecb 	bl	8001584 <__aeabi_dmul>
 80107ee:	900a      	str	r0, [sp, #40]	@ 0x28
 80107f0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80107f2:	e7b8      	b.n	8010766 <_dtoa_r+0x5e2>
 80107f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107f6:	9d08      	ldr	r5, [sp, #32]
 80107f8:	3b01      	subs	r3, #1
 80107fa:	195b      	adds	r3, r3, r5
 80107fc:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80107fe:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8010800:	930a      	str	r3, [sp, #40]	@ 0x28
 8010802:	9a06      	ldr	r2, [sp, #24]
 8010804:	9b07      	ldr	r3, [sp, #28]
 8010806:	0030      	movs	r0, r6
 8010808:	0039      	movs	r1, r7
 801080a:	f7f0 fa81 	bl	8000d10 <__aeabi_ddiv>
 801080e:	f7f1 fdcb 	bl	80023a8 <__aeabi_d2iz>
 8010812:	9009      	str	r0, [sp, #36]	@ 0x24
 8010814:	f7f1 fe04 	bl	8002420 <__aeabi_i2d>
 8010818:	9a06      	ldr	r2, [sp, #24]
 801081a:	9b07      	ldr	r3, [sp, #28]
 801081c:	f7f0 feb2 	bl	8001584 <__aeabi_dmul>
 8010820:	0002      	movs	r2, r0
 8010822:	000b      	movs	r3, r1
 8010824:	0030      	movs	r0, r6
 8010826:	0039      	movs	r1, r7
 8010828:	f7f1 f992 	bl	8001b50 <__aeabi_dsub>
 801082c:	002b      	movs	r3, r5
 801082e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010830:	3501      	adds	r5, #1
 8010832:	3230      	adds	r2, #48	@ 0x30
 8010834:	701a      	strb	r2, [r3, #0]
 8010836:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010838:	002c      	movs	r4, r5
 801083a:	429a      	cmp	r2, r3
 801083c:	d14b      	bne.n	80108d6 <_dtoa_r+0x752>
 801083e:	0002      	movs	r2, r0
 8010840:	000b      	movs	r3, r1
 8010842:	f7ef fe9f 	bl	8000584 <__aeabi_dadd>
 8010846:	9a06      	ldr	r2, [sp, #24]
 8010848:	9b07      	ldr	r3, [sp, #28]
 801084a:	0006      	movs	r6, r0
 801084c:	000f      	movs	r7, r1
 801084e:	f7ef fe17 	bl	8000480 <__aeabi_dcmpgt>
 8010852:	2800      	cmp	r0, #0
 8010854:	d12a      	bne.n	80108ac <_dtoa_r+0x728>
 8010856:	9a06      	ldr	r2, [sp, #24]
 8010858:	9b07      	ldr	r3, [sp, #28]
 801085a:	0030      	movs	r0, r6
 801085c:	0039      	movs	r1, r7
 801085e:	f7ef fdf5 	bl	800044c <__aeabi_dcmpeq>
 8010862:	2800      	cmp	r0, #0
 8010864:	d002      	beq.n	801086c <_dtoa_r+0x6e8>
 8010866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010868:	07dd      	lsls	r5, r3, #31
 801086a:	d41f      	bmi.n	80108ac <_dtoa_r+0x728>
 801086c:	9905      	ldr	r1, [sp, #20]
 801086e:	9803      	ldr	r0, [sp, #12]
 8010870:	f000 fbc2 	bl	8010ff8 <_Bfree>
 8010874:	2300      	movs	r3, #0
 8010876:	7023      	strb	r3, [r4, #0]
 8010878:	9b04      	ldr	r3, [sp, #16]
 801087a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801087c:	3301      	adds	r3, #1
 801087e:	6013      	str	r3, [r2, #0]
 8010880:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8010882:	2b00      	cmp	r3, #0
 8010884:	d100      	bne.n	8010888 <_dtoa_r+0x704>
 8010886:	e4c7      	b.n	8010218 <_dtoa_r+0x94>
 8010888:	601c      	str	r4, [r3, #0]
 801088a:	e4c5      	b.n	8010218 <_dtoa_r+0x94>
 801088c:	08012680 	.word	0x08012680
 8010890:	08012658 	.word	0x08012658
 8010894:	3ff00000 	.word	0x3ff00000
 8010898:	40240000 	.word	0x40240000
 801089c:	401c0000 	.word	0x401c0000
 80108a0:	fcc00000 	.word	0xfcc00000
 80108a4:	40140000 	.word	0x40140000
 80108a8:	3fe00000 	.word	0x3fe00000
 80108ac:	9b04      	ldr	r3, [sp, #16]
 80108ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80108b0:	0023      	movs	r3, r4
 80108b2:	001c      	movs	r4, r3
 80108b4:	3b01      	subs	r3, #1
 80108b6:	781a      	ldrb	r2, [r3, #0]
 80108b8:	2a39      	cmp	r2, #57	@ 0x39
 80108ba:	d108      	bne.n	80108ce <_dtoa_r+0x74a>
 80108bc:	9a08      	ldr	r2, [sp, #32]
 80108be:	429a      	cmp	r2, r3
 80108c0:	d1f7      	bne.n	80108b2 <_dtoa_r+0x72e>
 80108c2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80108c4:	9908      	ldr	r1, [sp, #32]
 80108c6:	3201      	adds	r2, #1
 80108c8:	920c      	str	r2, [sp, #48]	@ 0x30
 80108ca:	2230      	movs	r2, #48	@ 0x30
 80108cc:	700a      	strb	r2, [r1, #0]
 80108ce:	781a      	ldrb	r2, [r3, #0]
 80108d0:	3201      	adds	r2, #1
 80108d2:	701a      	strb	r2, [r3, #0]
 80108d4:	e784      	b.n	80107e0 <_dtoa_r+0x65c>
 80108d6:	2200      	movs	r2, #0
 80108d8:	4bc6      	ldr	r3, [pc, #792]	@ (8010bf4 <_dtoa_r+0xa70>)
 80108da:	f7f0 fe53 	bl	8001584 <__aeabi_dmul>
 80108de:	2200      	movs	r2, #0
 80108e0:	2300      	movs	r3, #0
 80108e2:	0006      	movs	r6, r0
 80108e4:	000f      	movs	r7, r1
 80108e6:	f7ef fdb1 	bl	800044c <__aeabi_dcmpeq>
 80108ea:	2800      	cmp	r0, #0
 80108ec:	d089      	beq.n	8010802 <_dtoa_r+0x67e>
 80108ee:	e7bd      	b.n	801086c <_dtoa_r+0x6e8>
 80108f0:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80108f2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80108f4:	9c06      	ldr	r4, [sp, #24]
 80108f6:	2f00      	cmp	r7, #0
 80108f8:	d014      	beq.n	8010924 <_dtoa_r+0x7a0>
 80108fa:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80108fc:	2a01      	cmp	r2, #1
 80108fe:	dd00      	ble.n	8010902 <_dtoa_r+0x77e>
 8010900:	e0e4      	b.n	8010acc <_dtoa_r+0x948>
 8010902:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8010904:	2a00      	cmp	r2, #0
 8010906:	d100      	bne.n	801090a <_dtoa_r+0x786>
 8010908:	e0da      	b.n	8010ac0 <_dtoa_r+0x93c>
 801090a:	4abb      	ldr	r2, [pc, #748]	@ (8010bf8 <_dtoa_r+0xa74>)
 801090c:	189b      	adds	r3, r3, r2
 801090e:	9a06      	ldr	r2, [sp, #24]
 8010910:	2101      	movs	r1, #1
 8010912:	18d2      	adds	r2, r2, r3
 8010914:	9206      	str	r2, [sp, #24]
 8010916:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010918:	9803      	ldr	r0, [sp, #12]
 801091a:	18d3      	adds	r3, r2, r3
 801091c:	930d      	str	r3, [sp, #52]	@ 0x34
 801091e:	f000 fc23 	bl	8011168 <__i2b>
 8010922:	0007      	movs	r7, r0
 8010924:	2c00      	cmp	r4, #0
 8010926:	d00e      	beq.n	8010946 <_dtoa_r+0x7c2>
 8010928:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801092a:	2b00      	cmp	r3, #0
 801092c:	dd0b      	ble.n	8010946 <_dtoa_r+0x7c2>
 801092e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010930:	0023      	movs	r3, r4
 8010932:	4294      	cmp	r4, r2
 8010934:	dd00      	ble.n	8010938 <_dtoa_r+0x7b4>
 8010936:	0013      	movs	r3, r2
 8010938:	9a06      	ldr	r2, [sp, #24]
 801093a:	1ae4      	subs	r4, r4, r3
 801093c:	1ad2      	subs	r2, r2, r3
 801093e:	9206      	str	r2, [sp, #24]
 8010940:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010942:	1ad3      	subs	r3, r2, r3
 8010944:	930d      	str	r3, [sp, #52]	@ 0x34
 8010946:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010948:	2b00      	cmp	r3, #0
 801094a:	d021      	beq.n	8010990 <_dtoa_r+0x80c>
 801094c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801094e:	2b00      	cmp	r3, #0
 8010950:	d100      	bne.n	8010954 <_dtoa_r+0x7d0>
 8010952:	e0d3      	b.n	8010afc <_dtoa_r+0x978>
 8010954:	9e05      	ldr	r6, [sp, #20]
 8010956:	2d00      	cmp	r5, #0
 8010958:	d014      	beq.n	8010984 <_dtoa_r+0x800>
 801095a:	0039      	movs	r1, r7
 801095c:	002a      	movs	r2, r5
 801095e:	9803      	ldr	r0, [sp, #12]
 8010960:	f000 fcc4 	bl	80112ec <__pow5mult>
 8010964:	9a05      	ldr	r2, [sp, #20]
 8010966:	0001      	movs	r1, r0
 8010968:	0007      	movs	r7, r0
 801096a:	9803      	ldr	r0, [sp, #12]
 801096c:	f000 fc14 	bl	8011198 <__multiply>
 8010970:	0006      	movs	r6, r0
 8010972:	9905      	ldr	r1, [sp, #20]
 8010974:	9803      	ldr	r0, [sp, #12]
 8010976:	f000 fb3f 	bl	8010ff8 <_Bfree>
 801097a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801097c:	9605      	str	r6, [sp, #20]
 801097e:	1b5b      	subs	r3, r3, r5
 8010980:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010982:	d005      	beq.n	8010990 <_dtoa_r+0x80c>
 8010984:	0031      	movs	r1, r6
 8010986:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010988:	9803      	ldr	r0, [sp, #12]
 801098a:	f000 fcaf 	bl	80112ec <__pow5mult>
 801098e:	9005      	str	r0, [sp, #20]
 8010990:	2101      	movs	r1, #1
 8010992:	9803      	ldr	r0, [sp, #12]
 8010994:	f000 fbe8 	bl	8011168 <__i2b>
 8010998:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801099a:	0006      	movs	r6, r0
 801099c:	2b00      	cmp	r3, #0
 801099e:	d100      	bne.n	80109a2 <_dtoa_r+0x81e>
 80109a0:	e1bc      	b.n	8010d1c <_dtoa_r+0xb98>
 80109a2:	001a      	movs	r2, r3
 80109a4:	0001      	movs	r1, r0
 80109a6:	9803      	ldr	r0, [sp, #12]
 80109a8:	f000 fca0 	bl	80112ec <__pow5mult>
 80109ac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80109ae:	0006      	movs	r6, r0
 80109b0:	2500      	movs	r5, #0
 80109b2:	2b01      	cmp	r3, #1
 80109b4:	dc16      	bgt.n	80109e4 <_dtoa_r+0x860>
 80109b6:	2500      	movs	r5, #0
 80109b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109ba:	42ab      	cmp	r3, r5
 80109bc:	d10e      	bne.n	80109dc <_dtoa_r+0x858>
 80109be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80109c0:	031b      	lsls	r3, r3, #12
 80109c2:	42ab      	cmp	r3, r5
 80109c4:	d10a      	bne.n	80109dc <_dtoa_r+0x858>
 80109c6:	4b8d      	ldr	r3, [pc, #564]	@ (8010bfc <_dtoa_r+0xa78>)
 80109c8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80109ca:	4213      	tst	r3, r2
 80109cc:	d006      	beq.n	80109dc <_dtoa_r+0x858>
 80109ce:	9b06      	ldr	r3, [sp, #24]
 80109d0:	3501      	adds	r5, #1
 80109d2:	3301      	adds	r3, #1
 80109d4:	9306      	str	r3, [sp, #24]
 80109d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80109d8:	3301      	adds	r3, #1
 80109da:	930d      	str	r3, [sp, #52]	@ 0x34
 80109dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80109de:	2001      	movs	r0, #1
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d008      	beq.n	80109f6 <_dtoa_r+0x872>
 80109e4:	6933      	ldr	r3, [r6, #16]
 80109e6:	3303      	adds	r3, #3
 80109e8:	009b      	lsls	r3, r3, #2
 80109ea:	18f3      	adds	r3, r6, r3
 80109ec:	6858      	ldr	r0, [r3, #4]
 80109ee:	f000 fb6b 	bl	80110c8 <__hi0bits>
 80109f2:	2320      	movs	r3, #32
 80109f4:	1a18      	subs	r0, r3, r0
 80109f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80109f8:	1818      	adds	r0, r3, r0
 80109fa:	0002      	movs	r2, r0
 80109fc:	231f      	movs	r3, #31
 80109fe:	401a      	ands	r2, r3
 8010a00:	4218      	tst	r0, r3
 8010a02:	d100      	bne.n	8010a06 <_dtoa_r+0x882>
 8010a04:	e081      	b.n	8010b0a <_dtoa_r+0x986>
 8010a06:	3301      	adds	r3, #1
 8010a08:	1a9b      	subs	r3, r3, r2
 8010a0a:	2b04      	cmp	r3, #4
 8010a0c:	dd79      	ble.n	8010b02 <_dtoa_r+0x97e>
 8010a0e:	231c      	movs	r3, #28
 8010a10:	1a9b      	subs	r3, r3, r2
 8010a12:	9a06      	ldr	r2, [sp, #24]
 8010a14:	18e4      	adds	r4, r4, r3
 8010a16:	18d2      	adds	r2, r2, r3
 8010a18:	9206      	str	r2, [sp, #24]
 8010a1a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010a1c:	18d3      	adds	r3, r2, r3
 8010a1e:	930d      	str	r3, [sp, #52]	@ 0x34
 8010a20:	9b06      	ldr	r3, [sp, #24]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	dd05      	ble.n	8010a32 <_dtoa_r+0x8ae>
 8010a26:	001a      	movs	r2, r3
 8010a28:	9905      	ldr	r1, [sp, #20]
 8010a2a:	9803      	ldr	r0, [sp, #12]
 8010a2c:	f000 fcba 	bl	80113a4 <__lshift>
 8010a30:	9005      	str	r0, [sp, #20]
 8010a32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	dd05      	ble.n	8010a44 <_dtoa_r+0x8c0>
 8010a38:	0031      	movs	r1, r6
 8010a3a:	001a      	movs	r2, r3
 8010a3c:	9803      	ldr	r0, [sp, #12]
 8010a3e:	f000 fcb1 	bl	80113a4 <__lshift>
 8010a42:	0006      	movs	r6, r0
 8010a44:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d061      	beq.n	8010b0e <_dtoa_r+0x98a>
 8010a4a:	0031      	movs	r1, r6
 8010a4c:	9805      	ldr	r0, [sp, #20]
 8010a4e:	f000 fd15 	bl	801147c <__mcmp>
 8010a52:	2800      	cmp	r0, #0
 8010a54:	da5b      	bge.n	8010b0e <_dtoa_r+0x98a>
 8010a56:	9b04      	ldr	r3, [sp, #16]
 8010a58:	220a      	movs	r2, #10
 8010a5a:	3b01      	subs	r3, #1
 8010a5c:	930c      	str	r3, [sp, #48]	@ 0x30
 8010a5e:	9905      	ldr	r1, [sp, #20]
 8010a60:	2300      	movs	r3, #0
 8010a62:	9803      	ldr	r0, [sp, #12]
 8010a64:	f000 faec 	bl	8011040 <__multadd>
 8010a68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010a6a:	9005      	str	r0, [sp, #20]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d100      	bne.n	8010a72 <_dtoa_r+0x8ee>
 8010a70:	e15b      	b.n	8010d2a <_dtoa_r+0xba6>
 8010a72:	2300      	movs	r3, #0
 8010a74:	0039      	movs	r1, r7
 8010a76:	220a      	movs	r2, #10
 8010a78:	9803      	ldr	r0, [sp, #12]
 8010a7a:	f000 fae1 	bl	8011040 <__multadd>
 8010a7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a80:	0007      	movs	r7, r0
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	dc4d      	bgt.n	8010b22 <_dtoa_r+0x99e>
 8010a86:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010a88:	2b02      	cmp	r3, #2
 8010a8a:	dd46      	ble.n	8010b1a <_dtoa_r+0x996>
 8010a8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d000      	beq.n	8010a94 <_dtoa_r+0x910>
 8010a92:	e5db      	b.n	801064c <_dtoa_r+0x4c8>
 8010a94:	0031      	movs	r1, r6
 8010a96:	2205      	movs	r2, #5
 8010a98:	9803      	ldr	r0, [sp, #12]
 8010a9a:	f000 fad1 	bl	8011040 <__multadd>
 8010a9e:	0006      	movs	r6, r0
 8010aa0:	0001      	movs	r1, r0
 8010aa2:	9805      	ldr	r0, [sp, #20]
 8010aa4:	f000 fcea 	bl	801147c <__mcmp>
 8010aa8:	2800      	cmp	r0, #0
 8010aaa:	dc00      	bgt.n	8010aae <_dtoa_r+0x92a>
 8010aac:	e5ce      	b.n	801064c <_dtoa_r+0x4c8>
 8010aae:	9b08      	ldr	r3, [sp, #32]
 8010ab0:	9a08      	ldr	r2, [sp, #32]
 8010ab2:	1c5c      	adds	r4, r3, #1
 8010ab4:	2331      	movs	r3, #49	@ 0x31
 8010ab6:	7013      	strb	r3, [r2, #0]
 8010ab8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010aba:	3301      	adds	r3, #1
 8010abc:	930c      	str	r3, [sp, #48]	@ 0x30
 8010abe:	e5c9      	b.n	8010654 <_dtoa_r+0x4d0>
 8010ac0:	2336      	movs	r3, #54	@ 0x36
 8010ac2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010ac4:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8010ac6:	1a9b      	subs	r3, r3, r2
 8010ac8:	9c06      	ldr	r4, [sp, #24]
 8010aca:	e720      	b.n	801090e <_dtoa_r+0x78a>
 8010acc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ace:	1e5d      	subs	r5, r3, #1
 8010ad0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ad2:	42ab      	cmp	r3, r5
 8010ad4:	db08      	blt.n	8010ae8 <_dtoa_r+0x964>
 8010ad6:	1b5d      	subs	r5, r3, r5
 8010ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	daf4      	bge.n	8010ac8 <_dtoa_r+0x944>
 8010ade:	9b06      	ldr	r3, [sp, #24]
 8010ae0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010ae2:	1a9c      	subs	r4, r3, r2
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	e712      	b.n	801090e <_dtoa_r+0x78a>
 8010ae8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010aea:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010aec:	1aeb      	subs	r3, r5, r3
 8010aee:	18d3      	adds	r3, r2, r3
 8010af0:	9314      	str	r3, [sp, #80]	@ 0x50
 8010af2:	950f      	str	r5, [sp, #60]	@ 0x3c
 8010af4:	9c06      	ldr	r4, [sp, #24]
 8010af6:	2500      	movs	r5, #0
 8010af8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010afa:	e708      	b.n	801090e <_dtoa_r+0x78a>
 8010afc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010afe:	9905      	ldr	r1, [sp, #20]
 8010b00:	e742      	b.n	8010988 <_dtoa_r+0x804>
 8010b02:	2b04      	cmp	r3, #4
 8010b04:	d08c      	beq.n	8010a20 <_dtoa_r+0x89c>
 8010b06:	331c      	adds	r3, #28
 8010b08:	e783      	b.n	8010a12 <_dtoa_r+0x88e>
 8010b0a:	0013      	movs	r3, r2
 8010b0c:	e7fb      	b.n	8010b06 <_dtoa_r+0x982>
 8010b0e:	9b04      	ldr	r3, [sp, #16]
 8010b10:	930c      	str	r3, [sp, #48]	@ 0x30
 8010b12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b14:	930e      	str	r3, [sp, #56]	@ 0x38
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	ddb5      	ble.n	8010a86 <_dtoa_r+0x902>
 8010b1a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d100      	bne.n	8010b22 <_dtoa_r+0x99e>
 8010b20:	e107      	b.n	8010d32 <_dtoa_r+0xbae>
 8010b22:	2c00      	cmp	r4, #0
 8010b24:	dd05      	ble.n	8010b32 <_dtoa_r+0x9ae>
 8010b26:	0039      	movs	r1, r7
 8010b28:	0022      	movs	r2, r4
 8010b2a:	9803      	ldr	r0, [sp, #12]
 8010b2c:	f000 fc3a 	bl	80113a4 <__lshift>
 8010b30:	0007      	movs	r7, r0
 8010b32:	9704      	str	r7, [sp, #16]
 8010b34:	2d00      	cmp	r5, #0
 8010b36:	d020      	beq.n	8010b7a <_dtoa_r+0x9f6>
 8010b38:	6879      	ldr	r1, [r7, #4]
 8010b3a:	9803      	ldr	r0, [sp, #12]
 8010b3c:	f000 fa18 	bl	8010f70 <_Balloc>
 8010b40:	1e04      	subs	r4, r0, #0
 8010b42:	d10c      	bne.n	8010b5e <_dtoa_r+0x9da>
 8010b44:	0022      	movs	r2, r4
 8010b46:	4b2e      	ldr	r3, [pc, #184]	@ (8010c00 <_dtoa_r+0xa7c>)
 8010b48:	482e      	ldr	r0, [pc, #184]	@ (8010c04 <_dtoa_r+0xa80>)
 8010b4a:	492f      	ldr	r1, [pc, #188]	@ (8010c08 <_dtoa_r+0xa84>)
 8010b4c:	f7ff fb2f 	bl	80101ae <_dtoa_r+0x2a>
 8010b50:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8010b52:	0037      	movs	r7, r6
 8010b54:	e7ab      	b.n	8010aae <_dtoa_r+0x92a>
 8010b56:	9b04      	ldr	r3, [sp, #16]
 8010b58:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8010b5a:	930c      	str	r3, [sp, #48]	@ 0x30
 8010b5c:	e7f9      	b.n	8010b52 <_dtoa_r+0x9ce>
 8010b5e:	0039      	movs	r1, r7
 8010b60:	693a      	ldr	r2, [r7, #16]
 8010b62:	310c      	adds	r1, #12
 8010b64:	3202      	adds	r2, #2
 8010b66:	0092      	lsls	r2, r2, #2
 8010b68:	300c      	adds	r0, #12
 8010b6a:	f000 ffd1 	bl	8011b10 <memcpy>
 8010b6e:	2201      	movs	r2, #1
 8010b70:	0021      	movs	r1, r4
 8010b72:	9803      	ldr	r0, [sp, #12]
 8010b74:	f000 fc16 	bl	80113a4 <__lshift>
 8010b78:	9004      	str	r0, [sp, #16]
 8010b7a:	9b08      	ldr	r3, [sp, #32]
 8010b7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010b7e:	9306      	str	r3, [sp, #24]
 8010b80:	3b01      	subs	r3, #1
 8010b82:	189b      	adds	r3, r3, r2
 8010b84:	2201      	movs	r2, #1
 8010b86:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010b88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b8a:	4013      	ands	r3, r2
 8010b8c:	930e      	str	r3, [sp, #56]	@ 0x38
 8010b8e:	0031      	movs	r1, r6
 8010b90:	9805      	ldr	r0, [sp, #20]
 8010b92:	f7ff fa71 	bl	8010078 <quorem>
 8010b96:	0039      	movs	r1, r7
 8010b98:	0005      	movs	r5, r0
 8010b9a:	900a      	str	r0, [sp, #40]	@ 0x28
 8010b9c:	9805      	ldr	r0, [sp, #20]
 8010b9e:	f000 fc6d 	bl	801147c <__mcmp>
 8010ba2:	9a04      	ldr	r2, [sp, #16]
 8010ba4:	900d      	str	r0, [sp, #52]	@ 0x34
 8010ba6:	0031      	movs	r1, r6
 8010ba8:	9803      	ldr	r0, [sp, #12]
 8010baa:	f000 fc83 	bl	80114b4 <__mdiff>
 8010bae:	2201      	movs	r2, #1
 8010bb0:	68c3      	ldr	r3, [r0, #12]
 8010bb2:	0004      	movs	r4, r0
 8010bb4:	3530      	adds	r5, #48	@ 0x30
 8010bb6:	9209      	str	r2, [sp, #36]	@ 0x24
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d104      	bne.n	8010bc6 <_dtoa_r+0xa42>
 8010bbc:	0001      	movs	r1, r0
 8010bbe:	9805      	ldr	r0, [sp, #20]
 8010bc0:	f000 fc5c 	bl	801147c <__mcmp>
 8010bc4:	9009      	str	r0, [sp, #36]	@ 0x24
 8010bc6:	0021      	movs	r1, r4
 8010bc8:	9803      	ldr	r0, [sp, #12]
 8010bca:	f000 fa15 	bl	8010ff8 <_Bfree>
 8010bce:	9b06      	ldr	r3, [sp, #24]
 8010bd0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010bd2:	1c5c      	adds	r4, r3, #1
 8010bd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bd6:	4313      	orrs	r3, r2
 8010bd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010bda:	4313      	orrs	r3, r2
 8010bdc:	d116      	bne.n	8010c0c <_dtoa_r+0xa88>
 8010bde:	2d39      	cmp	r5, #57	@ 0x39
 8010be0:	d02f      	beq.n	8010c42 <_dtoa_r+0xabe>
 8010be2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	dd01      	ble.n	8010bec <_dtoa_r+0xa68>
 8010be8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8010bea:	3531      	adds	r5, #49	@ 0x31
 8010bec:	9b06      	ldr	r3, [sp, #24]
 8010bee:	701d      	strb	r5, [r3, #0]
 8010bf0:	e532      	b.n	8010658 <_dtoa_r+0x4d4>
 8010bf2:	46c0      	nop			@ (mov r8, r8)
 8010bf4:	40240000 	.word	0x40240000
 8010bf8:	00000433 	.word	0x00000433
 8010bfc:	7ff00000 	.word	0x7ff00000
 8010c00:	08012586 	.word	0x08012586
 8010c04:	0801252e 	.word	0x0801252e
 8010c08:	000002ef 	.word	0x000002ef
 8010c0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	db04      	blt.n	8010c1c <_dtoa_r+0xa98>
 8010c12:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010c14:	4313      	orrs	r3, r2
 8010c16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c18:	4313      	orrs	r3, r2
 8010c1a:	d11e      	bne.n	8010c5a <_dtoa_r+0xad6>
 8010c1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	dde4      	ble.n	8010bec <_dtoa_r+0xa68>
 8010c22:	9905      	ldr	r1, [sp, #20]
 8010c24:	2201      	movs	r2, #1
 8010c26:	9803      	ldr	r0, [sp, #12]
 8010c28:	f000 fbbc 	bl	80113a4 <__lshift>
 8010c2c:	0031      	movs	r1, r6
 8010c2e:	9005      	str	r0, [sp, #20]
 8010c30:	f000 fc24 	bl	801147c <__mcmp>
 8010c34:	2800      	cmp	r0, #0
 8010c36:	dc02      	bgt.n	8010c3e <_dtoa_r+0xaba>
 8010c38:	d1d8      	bne.n	8010bec <_dtoa_r+0xa68>
 8010c3a:	07eb      	lsls	r3, r5, #31
 8010c3c:	d5d6      	bpl.n	8010bec <_dtoa_r+0xa68>
 8010c3e:	2d39      	cmp	r5, #57	@ 0x39
 8010c40:	d1d2      	bne.n	8010be8 <_dtoa_r+0xa64>
 8010c42:	2339      	movs	r3, #57	@ 0x39
 8010c44:	9a06      	ldr	r2, [sp, #24]
 8010c46:	7013      	strb	r3, [r2, #0]
 8010c48:	0023      	movs	r3, r4
 8010c4a:	001c      	movs	r4, r3
 8010c4c:	3b01      	subs	r3, #1
 8010c4e:	781a      	ldrb	r2, [r3, #0]
 8010c50:	2a39      	cmp	r2, #57	@ 0x39
 8010c52:	d050      	beq.n	8010cf6 <_dtoa_r+0xb72>
 8010c54:	3201      	adds	r2, #1
 8010c56:	701a      	strb	r2, [r3, #0]
 8010c58:	e4fe      	b.n	8010658 <_dtoa_r+0x4d4>
 8010c5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	dd03      	ble.n	8010c68 <_dtoa_r+0xae4>
 8010c60:	2d39      	cmp	r5, #57	@ 0x39
 8010c62:	d0ee      	beq.n	8010c42 <_dtoa_r+0xabe>
 8010c64:	3501      	adds	r5, #1
 8010c66:	e7c1      	b.n	8010bec <_dtoa_r+0xa68>
 8010c68:	9b06      	ldr	r3, [sp, #24]
 8010c6a:	9a06      	ldr	r2, [sp, #24]
 8010c6c:	701d      	strb	r5, [r3, #0]
 8010c6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c70:	4293      	cmp	r3, r2
 8010c72:	d02b      	beq.n	8010ccc <_dtoa_r+0xb48>
 8010c74:	2300      	movs	r3, #0
 8010c76:	220a      	movs	r2, #10
 8010c78:	9905      	ldr	r1, [sp, #20]
 8010c7a:	9803      	ldr	r0, [sp, #12]
 8010c7c:	f000 f9e0 	bl	8011040 <__multadd>
 8010c80:	9b04      	ldr	r3, [sp, #16]
 8010c82:	9005      	str	r0, [sp, #20]
 8010c84:	429f      	cmp	r7, r3
 8010c86:	d109      	bne.n	8010c9c <_dtoa_r+0xb18>
 8010c88:	0039      	movs	r1, r7
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	220a      	movs	r2, #10
 8010c8e:	9803      	ldr	r0, [sp, #12]
 8010c90:	f000 f9d6 	bl	8011040 <__multadd>
 8010c94:	0007      	movs	r7, r0
 8010c96:	9004      	str	r0, [sp, #16]
 8010c98:	9406      	str	r4, [sp, #24]
 8010c9a:	e778      	b.n	8010b8e <_dtoa_r+0xa0a>
 8010c9c:	0039      	movs	r1, r7
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	220a      	movs	r2, #10
 8010ca2:	9803      	ldr	r0, [sp, #12]
 8010ca4:	f000 f9cc 	bl	8011040 <__multadd>
 8010ca8:	2300      	movs	r3, #0
 8010caa:	0007      	movs	r7, r0
 8010cac:	220a      	movs	r2, #10
 8010cae:	9904      	ldr	r1, [sp, #16]
 8010cb0:	9803      	ldr	r0, [sp, #12]
 8010cb2:	f000 f9c5 	bl	8011040 <__multadd>
 8010cb6:	9004      	str	r0, [sp, #16]
 8010cb8:	e7ee      	b.n	8010c98 <_dtoa_r+0xb14>
 8010cba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010cbc:	2401      	movs	r4, #1
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	dd00      	ble.n	8010cc4 <_dtoa_r+0xb40>
 8010cc2:	001c      	movs	r4, r3
 8010cc4:	9704      	str	r7, [sp, #16]
 8010cc6:	2700      	movs	r7, #0
 8010cc8:	9b08      	ldr	r3, [sp, #32]
 8010cca:	191c      	adds	r4, r3, r4
 8010ccc:	9905      	ldr	r1, [sp, #20]
 8010cce:	2201      	movs	r2, #1
 8010cd0:	9803      	ldr	r0, [sp, #12]
 8010cd2:	f000 fb67 	bl	80113a4 <__lshift>
 8010cd6:	0031      	movs	r1, r6
 8010cd8:	9005      	str	r0, [sp, #20]
 8010cda:	f000 fbcf 	bl	801147c <__mcmp>
 8010cde:	2800      	cmp	r0, #0
 8010ce0:	dcb2      	bgt.n	8010c48 <_dtoa_r+0xac4>
 8010ce2:	d101      	bne.n	8010ce8 <_dtoa_r+0xb64>
 8010ce4:	07ed      	lsls	r5, r5, #31
 8010ce6:	d4af      	bmi.n	8010c48 <_dtoa_r+0xac4>
 8010ce8:	0023      	movs	r3, r4
 8010cea:	001c      	movs	r4, r3
 8010cec:	3b01      	subs	r3, #1
 8010cee:	781a      	ldrb	r2, [r3, #0]
 8010cf0:	2a30      	cmp	r2, #48	@ 0x30
 8010cf2:	d0fa      	beq.n	8010cea <_dtoa_r+0xb66>
 8010cf4:	e4b0      	b.n	8010658 <_dtoa_r+0x4d4>
 8010cf6:	9a08      	ldr	r2, [sp, #32]
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d1a6      	bne.n	8010c4a <_dtoa_r+0xac6>
 8010cfc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010cfe:	3301      	adds	r3, #1
 8010d00:	930c      	str	r3, [sp, #48]	@ 0x30
 8010d02:	2331      	movs	r3, #49	@ 0x31
 8010d04:	7013      	strb	r3, [r2, #0]
 8010d06:	e4a7      	b.n	8010658 <_dtoa_r+0x4d4>
 8010d08:	4b14      	ldr	r3, [pc, #80]	@ (8010d5c <_dtoa_r+0xbd8>)
 8010d0a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8010d0c:	9308      	str	r3, [sp, #32]
 8010d0e:	4b14      	ldr	r3, [pc, #80]	@ (8010d60 <_dtoa_r+0xbdc>)
 8010d10:	2a00      	cmp	r2, #0
 8010d12:	d001      	beq.n	8010d18 <_dtoa_r+0xb94>
 8010d14:	f7ff fa7e 	bl	8010214 <_dtoa_r+0x90>
 8010d18:	f7ff fa7e 	bl	8010218 <_dtoa_r+0x94>
 8010d1c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010d1e:	2b01      	cmp	r3, #1
 8010d20:	dc00      	bgt.n	8010d24 <_dtoa_r+0xba0>
 8010d22:	e648      	b.n	80109b6 <_dtoa_r+0x832>
 8010d24:	2001      	movs	r0, #1
 8010d26:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8010d28:	e665      	b.n	80109f6 <_dtoa_r+0x872>
 8010d2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	dc00      	bgt.n	8010d32 <_dtoa_r+0xbae>
 8010d30:	e6a9      	b.n	8010a86 <_dtoa_r+0x902>
 8010d32:	2400      	movs	r4, #0
 8010d34:	0031      	movs	r1, r6
 8010d36:	9805      	ldr	r0, [sp, #20]
 8010d38:	f7ff f99e 	bl	8010078 <quorem>
 8010d3c:	9b08      	ldr	r3, [sp, #32]
 8010d3e:	3030      	adds	r0, #48	@ 0x30
 8010d40:	5518      	strb	r0, [r3, r4]
 8010d42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d44:	3401      	adds	r4, #1
 8010d46:	0005      	movs	r5, r0
 8010d48:	42a3      	cmp	r3, r4
 8010d4a:	ddb6      	ble.n	8010cba <_dtoa_r+0xb36>
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	220a      	movs	r2, #10
 8010d50:	9905      	ldr	r1, [sp, #20]
 8010d52:	9803      	ldr	r0, [sp, #12]
 8010d54:	f000 f974 	bl	8011040 <__multadd>
 8010d58:	9005      	str	r0, [sp, #20]
 8010d5a:	e7eb      	b.n	8010d34 <_dtoa_r+0xbb0>
 8010d5c:	0801250a 	.word	0x0801250a
 8010d60:	08012512 	.word	0x08012512

08010d64 <_free_r>:
 8010d64:	b570      	push	{r4, r5, r6, lr}
 8010d66:	0005      	movs	r5, r0
 8010d68:	1e0c      	subs	r4, r1, #0
 8010d6a:	d010      	beq.n	8010d8e <_free_r+0x2a>
 8010d6c:	3c04      	subs	r4, #4
 8010d6e:	6823      	ldr	r3, [r4, #0]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	da00      	bge.n	8010d76 <_free_r+0x12>
 8010d74:	18e4      	adds	r4, r4, r3
 8010d76:	0028      	movs	r0, r5
 8010d78:	f000 f8ea 	bl	8010f50 <__malloc_lock>
 8010d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8010df4 <_free_r+0x90>)
 8010d7e:	6813      	ldr	r3, [r2, #0]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d105      	bne.n	8010d90 <_free_r+0x2c>
 8010d84:	6063      	str	r3, [r4, #4]
 8010d86:	6014      	str	r4, [r2, #0]
 8010d88:	0028      	movs	r0, r5
 8010d8a:	f000 f8e9 	bl	8010f60 <__malloc_unlock>
 8010d8e:	bd70      	pop	{r4, r5, r6, pc}
 8010d90:	42a3      	cmp	r3, r4
 8010d92:	d908      	bls.n	8010da6 <_free_r+0x42>
 8010d94:	6820      	ldr	r0, [r4, #0]
 8010d96:	1821      	adds	r1, r4, r0
 8010d98:	428b      	cmp	r3, r1
 8010d9a:	d1f3      	bne.n	8010d84 <_free_r+0x20>
 8010d9c:	6819      	ldr	r1, [r3, #0]
 8010d9e:	685b      	ldr	r3, [r3, #4]
 8010da0:	1809      	adds	r1, r1, r0
 8010da2:	6021      	str	r1, [r4, #0]
 8010da4:	e7ee      	b.n	8010d84 <_free_r+0x20>
 8010da6:	001a      	movs	r2, r3
 8010da8:	685b      	ldr	r3, [r3, #4]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d001      	beq.n	8010db2 <_free_r+0x4e>
 8010dae:	42a3      	cmp	r3, r4
 8010db0:	d9f9      	bls.n	8010da6 <_free_r+0x42>
 8010db2:	6811      	ldr	r1, [r2, #0]
 8010db4:	1850      	adds	r0, r2, r1
 8010db6:	42a0      	cmp	r0, r4
 8010db8:	d10b      	bne.n	8010dd2 <_free_r+0x6e>
 8010dba:	6820      	ldr	r0, [r4, #0]
 8010dbc:	1809      	adds	r1, r1, r0
 8010dbe:	1850      	adds	r0, r2, r1
 8010dc0:	6011      	str	r1, [r2, #0]
 8010dc2:	4283      	cmp	r3, r0
 8010dc4:	d1e0      	bne.n	8010d88 <_free_r+0x24>
 8010dc6:	6818      	ldr	r0, [r3, #0]
 8010dc8:	685b      	ldr	r3, [r3, #4]
 8010dca:	1841      	adds	r1, r0, r1
 8010dcc:	6011      	str	r1, [r2, #0]
 8010dce:	6053      	str	r3, [r2, #4]
 8010dd0:	e7da      	b.n	8010d88 <_free_r+0x24>
 8010dd2:	42a0      	cmp	r0, r4
 8010dd4:	d902      	bls.n	8010ddc <_free_r+0x78>
 8010dd6:	230c      	movs	r3, #12
 8010dd8:	602b      	str	r3, [r5, #0]
 8010dda:	e7d5      	b.n	8010d88 <_free_r+0x24>
 8010ddc:	6820      	ldr	r0, [r4, #0]
 8010dde:	1821      	adds	r1, r4, r0
 8010de0:	428b      	cmp	r3, r1
 8010de2:	d103      	bne.n	8010dec <_free_r+0x88>
 8010de4:	6819      	ldr	r1, [r3, #0]
 8010de6:	685b      	ldr	r3, [r3, #4]
 8010de8:	1809      	adds	r1, r1, r0
 8010dea:	6021      	str	r1, [r4, #0]
 8010dec:	6063      	str	r3, [r4, #4]
 8010dee:	6054      	str	r4, [r2, #4]
 8010df0:	e7ca      	b.n	8010d88 <_free_r+0x24>
 8010df2:	46c0      	nop			@ (mov r8, r8)
 8010df4:	20001dc8 	.word	0x20001dc8

08010df8 <malloc>:
 8010df8:	b510      	push	{r4, lr}
 8010dfa:	4b03      	ldr	r3, [pc, #12]	@ (8010e08 <malloc+0x10>)
 8010dfc:	0001      	movs	r1, r0
 8010dfe:	6818      	ldr	r0, [r3, #0]
 8010e00:	f000 f826 	bl	8010e50 <_malloc_r>
 8010e04:	bd10      	pop	{r4, pc}
 8010e06:	46c0      	nop			@ (mov r8, r8)
 8010e08:	200001ec 	.word	0x200001ec

08010e0c <sbrk_aligned>:
 8010e0c:	b570      	push	{r4, r5, r6, lr}
 8010e0e:	4e0f      	ldr	r6, [pc, #60]	@ (8010e4c <sbrk_aligned+0x40>)
 8010e10:	000d      	movs	r5, r1
 8010e12:	6831      	ldr	r1, [r6, #0]
 8010e14:	0004      	movs	r4, r0
 8010e16:	2900      	cmp	r1, #0
 8010e18:	d102      	bne.n	8010e20 <sbrk_aligned+0x14>
 8010e1a:	f000 fe67 	bl	8011aec <_sbrk_r>
 8010e1e:	6030      	str	r0, [r6, #0]
 8010e20:	0029      	movs	r1, r5
 8010e22:	0020      	movs	r0, r4
 8010e24:	f000 fe62 	bl	8011aec <_sbrk_r>
 8010e28:	1c43      	adds	r3, r0, #1
 8010e2a:	d103      	bne.n	8010e34 <sbrk_aligned+0x28>
 8010e2c:	2501      	movs	r5, #1
 8010e2e:	426d      	negs	r5, r5
 8010e30:	0028      	movs	r0, r5
 8010e32:	bd70      	pop	{r4, r5, r6, pc}
 8010e34:	2303      	movs	r3, #3
 8010e36:	1cc5      	adds	r5, r0, #3
 8010e38:	439d      	bics	r5, r3
 8010e3a:	42a8      	cmp	r0, r5
 8010e3c:	d0f8      	beq.n	8010e30 <sbrk_aligned+0x24>
 8010e3e:	1a29      	subs	r1, r5, r0
 8010e40:	0020      	movs	r0, r4
 8010e42:	f000 fe53 	bl	8011aec <_sbrk_r>
 8010e46:	3001      	adds	r0, #1
 8010e48:	d1f2      	bne.n	8010e30 <sbrk_aligned+0x24>
 8010e4a:	e7ef      	b.n	8010e2c <sbrk_aligned+0x20>
 8010e4c:	20001dc4 	.word	0x20001dc4

08010e50 <_malloc_r>:
 8010e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e52:	2203      	movs	r2, #3
 8010e54:	1ccb      	adds	r3, r1, #3
 8010e56:	4393      	bics	r3, r2
 8010e58:	3308      	adds	r3, #8
 8010e5a:	0005      	movs	r5, r0
 8010e5c:	001f      	movs	r7, r3
 8010e5e:	2b0c      	cmp	r3, #12
 8010e60:	d234      	bcs.n	8010ecc <_malloc_r+0x7c>
 8010e62:	270c      	movs	r7, #12
 8010e64:	42b9      	cmp	r1, r7
 8010e66:	d833      	bhi.n	8010ed0 <_malloc_r+0x80>
 8010e68:	0028      	movs	r0, r5
 8010e6a:	f000 f871 	bl	8010f50 <__malloc_lock>
 8010e6e:	4e37      	ldr	r6, [pc, #220]	@ (8010f4c <_malloc_r+0xfc>)
 8010e70:	6833      	ldr	r3, [r6, #0]
 8010e72:	001c      	movs	r4, r3
 8010e74:	2c00      	cmp	r4, #0
 8010e76:	d12f      	bne.n	8010ed8 <_malloc_r+0x88>
 8010e78:	0039      	movs	r1, r7
 8010e7a:	0028      	movs	r0, r5
 8010e7c:	f7ff ffc6 	bl	8010e0c <sbrk_aligned>
 8010e80:	0004      	movs	r4, r0
 8010e82:	1c43      	adds	r3, r0, #1
 8010e84:	d15f      	bne.n	8010f46 <_malloc_r+0xf6>
 8010e86:	6834      	ldr	r4, [r6, #0]
 8010e88:	9400      	str	r4, [sp, #0]
 8010e8a:	9b00      	ldr	r3, [sp, #0]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d14a      	bne.n	8010f26 <_malloc_r+0xd6>
 8010e90:	2c00      	cmp	r4, #0
 8010e92:	d052      	beq.n	8010f3a <_malloc_r+0xea>
 8010e94:	6823      	ldr	r3, [r4, #0]
 8010e96:	0028      	movs	r0, r5
 8010e98:	18e3      	adds	r3, r4, r3
 8010e9a:	9900      	ldr	r1, [sp, #0]
 8010e9c:	9301      	str	r3, [sp, #4]
 8010e9e:	f000 fe25 	bl	8011aec <_sbrk_r>
 8010ea2:	9b01      	ldr	r3, [sp, #4]
 8010ea4:	4283      	cmp	r3, r0
 8010ea6:	d148      	bne.n	8010f3a <_malloc_r+0xea>
 8010ea8:	6823      	ldr	r3, [r4, #0]
 8010eaa:	0028      	movs	r0, r5
 8010eac:	1aff      	subs	r7, r7, r3
 8010eae:	0039      	movs	r1, r7
 8010eb0:	f7ff ffac 	bl	8010e0c <sbrk_aligned>
 8010eb4:	3001      	adds	r0, #1
 8010eb6:	d040      	beq.n	8010f3a <_malloc_r+0xea>
 8010eb8:	6823      	ldr	r3, [r4, #0]
 8010eba:	19db      	adds	r3, r3, r7
 8010ebc:	6023      	str	r3, [r4, #0]
 8010ebe:	6833      	ldr	r3, [r6, #0]
 8010ec0:	685a      	ldr	r2, [r3, #4]
 8010ec2:	2a00      	cmp	r2, #0
 8010ec4:	d133      	bne.n	8010f2e <_malloc_r+0xde>
 8010ec6:	9b00      	ldr	r3, [sp, #0]
 8010ec8:	6033      	str	r3, [r6, #0]
 8010eca:	e019      	b.n	8010f00 <_malloc_r+0xb0>
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	dac9      	bge.n	8010e64 <_malloc_r+0x14>
 8010ed0:	230c      	movs	r3, #12
 8010ed2:	602b      	str	r3, [r5, #0]
 8010ed4:	2000      	movs	r0, #0
 8010ed6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010ed8:	6821      	ldr	r1, [r4, #0]
 8010eda:	1bc9      	subs	r1, r1, r7
 8010edc:	d420      	bmi.n	8010f20 <_malloc_r+0xd0>
 8010ede:	290b      	cmp	r1, #11
 8010ee0:	d90a      	bls.n	8010ef8 <_malloc_r+0xa8>
 8010ee2:	19e2      	adds	r2, r4, r7
 8010ee4:	6027      	str	r7, [r4, #0]
 8010ee6:	42a3      	cmp	r3, r4
 8010ee8:	d104      	bne.n	8010ef4 <_malloc_r+0xa4>
 8010eea:	6032      	str	r2, [r6, #0]
 8010eec:	6863      	ldr	r3, [r4, #4]
 8010eee:	6011      	str	r1, [r2, #0]
 8010ef0:	6053      	str	r3, [r2, #4]
 8010ef2:	e005      	b.n	8010f00 <_malloc_r+0xb0>
 8010ef4:	605a      	str	r2, [r3, #4]
 8010ef6:	e7f9      	b.n	8010eec <_malloc_r+0x9c>
 8010ef8:	6862      	ldr	r2, [r4, #4]
 8010efa:	42a3      	cmp	r3, r4
 8010efc:	d10e      	bne.n	8010f1c <_malloc_r+0xcc>
 8010efe:	6032      	str	r2, [r6, #0]
 8010f00:	0028      	movs	r0, r5
 8010f02:	f000 f82d 	bl	8010f60 <__malloc_unlock>
 8010f06:	0020      	movs	r0, r4
 8010f08:	2207      	movs	r2, #7
 8010f0a:	300b      	adds	r0, #11
 8010f0c:	1d23      	adds	r3, r4, #4
 8010f0e:	4390      	bics	r0, r2
 8010f10:	1ac2      	subs	r2, r0, r3
 8010f12:	4298      	cmp	r0, r3
 8010f14:	d0df      	beq.n	8010ed6 <_malloc_r+0x86>
 8010f16:	1a1b      	subs	r3, r3, r0
 8010f18:	50a3      	str	r3, [r4, r2]
 8010f1a:	e7dc      	b.n	8010ed6 <_malloc_r+0x86>
 8010f1c:	605a      	str	r2, [r3, #4]
 8010f1e:	e7ef      	b.n	8010f00 <_malloc_r+0xb0>
 8010f20:	0023      	movs	r3, r4
 8010f22:	6864      	ldr	r4, [r4, #4]
 8010f24:	e7a6      	b.n	8010e74 <_malloc_r+0x24>
 8010f26:	9c00      	ldr	r4, [sp, #0]
 8010f28:	6863      	ldr	r3, [r4, #4]
 8010f2a:	9300      	str	r3, [sp, #0]
 8010f2c:	e7ad      	b.n	8010e8a <_malloc_r+0x3a>
 8010f2e:	001a      	movs	r2, r3
 8010f30:	685b      	ldr	r3, [r3, #4]
 8010f32:	42a3      	cmp	r3, r4
 8010f34:	d1fb      	bne.n	8010f2e <_malloc_r+0xde>
 8010f36:	2300      	movs	r3, #0
 8010f38:	e7da      	b.n	8010ef0 <_malloc_r+0xa0>
 8010f3a:	230c      	movs	r3, #12
 8010f3c:	0028      	movs	r0, r5
 8010f3e:	602b      	str	r3, [r5, #0]
 8010f40:	f000 f80e 	bl	8010f60 <__malloc_unlock>
 8010f44:	e7c6      	b.n	8010ed4 <_malloc_r+0x84>
 8010f46:	6007      	str	r7, [r0, #0]
 8010f48:	e7da      	b.n	8010f00 <_malloc_r+0xb0>
 8010f4a:	46c0      	nop			@ (mov r8, r8)
 8010f4c:	20001dc8 	.word	0x20001dc8

08010f50 <__malloc_lock>:
 8010f50:	b510      	push	{r4, lr}
 8010f52:	4802      	ldr	r0, [pc, #8]	@ (8010f5c <__malloc_lock+0xc>)
 8010f54:	f7ff f883 	bl	801005e <__retarget_lock_acquire_recursive>
 8010f58:	bd10      	pop	{r4, pc}
 8010f5a:	46c0      	nop			@ (mov r8, r8)
 8010f5c:	20001dc0 	.word	0x20001dc0

08010f60 <__malloc_unlock>:
 8010f60:	b510      	push	{r4, lr}
 8010f62:	4802      	ldr	r0, [pc, #8]	@ (8010f6c <__malloc_unlock+0xc>)
 8010f64:	f7ff f87c 	bl	8010060 <__retarget_lock_release_recursive>
 8010f68:	bd10      	pop	{r4, pc}
 8010f6a:	46c0      	nop			@ (mov r8, r8)
 8010f6c:	20001dc0 	.word	0x20001dc0

08010f70 <_Balloc>:
 8010f70:	b570      	push	{r4, r5, r6, lr}
 8010f72:	69c5      	ldr	r5, [r0, #28]
 8010f74:	0006      	movs	r6, r0
 8010f76:	000c      	movs	r4, r1
 8010f78:	2d00      	cmp	r5, #0
 8010f7a:	d10e      	bne.n	8010f9a <_Balloc+0x2a>
 8010f7c:	2010      	movs	r0, #16
 8010f7e:	f7ff ff3b 	bl	8010df8 <malloc>
 8010f82:	1e02      	subs	r2, r0, #0
 8010f84:	61f0      	str	r0, [r6, #28]
 8010f86:	d104      	bne.n	8010f92 <_Balloc+0x22>
 8010f88:	216b      	movs	r1, #107	@ 0x6b
 8010f8a:	4b19      	ldr	r3, [pc, #100]	@ (8010ff0 <_Balloc+0x80>)
 8010f8c:	4819      	ldr	r0, [pc, #100]	@ (8010ff4 <_Balloc+0x84>)
 8010f8e:	f000 fdc9 	bl	8011b24 <__assert_func>
 8010f92:	6045      	str	r5, [r0, #4]
 8010f94:	6085      	str	r5, [r0, #8]
 8010f96:	6005      	str	r5, [r0, #0]
 8010f98:	60c5      	str	r5, [r0, #12]
 8010f9a:	69f5      	ldr	r5, [r6, #28]
 8010f9c:	68eb      	ldr	r3, [r5, #12]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d013      	beq.n	8010fca <_Balloc+0x5a>
 8010fa2:	69f3      	ldr	r3, [r6, #28]
 8010fa4:	00a2      	lsls	r2, r4, #2
 8010fa6:	68db      	ldr	r3, [r3, #12]
 8010fa8:	189b      	adds	r3, r3, r2
 8010faa:	6818      	ldr	r0, [r3, #0]
 8010fac:	2800      	cmp	r0, #0
 8010fae:	d118      	bne.n	8010fe2 <_Balloc+0x72>
 8010fb0:	2101      	movs	r1, #1
 8010fb2:	000d      	movs	r5, r1
 8010fb4:	40a5      	lsls	r5, r4
 8010fb6:	1d6a      	adds	r2, r5, #5
 8010fb8:	0030      	movs	r0, r6
 8010fba:	0092      	lsls	r2, r2, #2
 8010fbc:	f000 fdd0 	bl	8011b60 <_calloc_r>
 8010fc0:	2800      	cmp	r0, #0
 8010fc2:	d00c      	beq.n	8010fde <_Balloc+0x6e>
 8010fc4:	6044      	str	r4, [r0, #4]
 8010fc6:	6085      	str	r5, [r0, #8]
 8010fc8:	e00d      	b.n	8010fe6 <_Balloc+0x76>
 8010fca:	2221      	movs	r2, #33	@ 0x21
 8010fcc:	2104      	movs	r1, #4
 8010fce:	0030      	movs	r0, r6
 8010fd0:	f000 fdc6 	bl	8011b60 <_calloc_r>
 8010fd4:	69f3      	ldr	r3, [r6, #28]
 8010fd6:	60e8      	str	r0, [r5, #12]
 8010fd8:	68db      	ldr	r3, [r3, #12]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d1e1      	bne.n	8010fa2 <_Balloc+0x32>
 8010fde:	2000      	movs	r0, #0
 8010fe0:	bd70      	pop	{r4, r5, r6, pc}
 8010fe2:	6802      	ldr	r2, [r0, #0]
 8010fe4:	601a      	str	r2, [r3, #0]
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	6103      	str	r3, [r0, #16]
 8010fea:	60c3      	str	r3, [r0, #12]
 8010fec:	e7f8      	b.n	8010fe0 <_Balloc+0x70>
 8010fee:	46c0      	nop			@ (mov r8, r8)
 8010ff0:	08012517 	.word	0x08012517
 8010ff4:	08012597 	.word	0x08012597

08010ff8 <_Bfree>:
 8010ff8:	b570      	push	{r4, r5, r6, lr}
 8010ffa:	69c6      	ldr	r6, [r0, #28]
 8010ffc:	0005      	movs	r5, r0
 8010ffe:	000c      	movs	r4, r1
 8011000:	2e00      	cmp	r6, #0
 8011002:	d10e      	bne.n	8011022 <_Bfree+0x2a>
 8011004:	2010      	movs	r0, #16
 8011006:	f7ff fef7 	bl	8010df8 <malloc>
 801100a:	1e02      	subs	r2, r0, #0
 801100c:	61e8      	str	r0, [r5, #28]
 801100e:	d104      	bne.n	801101a <_Bfree+0x22>
 8011010:	218f      	movs	r1, #143	@ 0x8f
 8011012:	4b09      	ldr	r3, [pc, #36]	@ (8011038 <_Bfree+0x40>)
 8011014:	4809      	ldr	r0, [pc, #36]	@ (801103c <_Bfree+0x44>)
 8011016:	f000 fd85 	bl	8011b24 <__assert_func>
 801101a:	6046      	str	r6, [r0, #4]
 801101c:	6086      	str	r6, [r0, #8]
 801101e:	6006      	str	r6, [r0, #0]
 8011020:	60c6      	str	r6, [r0, #12]
 8011022:	2c00      	cmp	r4, #0
 8011024:	d007      	beq.n	8011036 <_Bfree+0x3e>
 8011026:	69eb      	ldr	r3, [r5, #28]
 8011028:	6862      	ldr	r2, [r4, #4]
 801102a:	68db      	ldr	r3, [r3, #12]
 801102c:	0092      	lsls	r2, r2, #2
 801102e:	189b      	adds	r3, r3, r2
 8011030:	681a      	ldr	r2, [r3, #0]
 8011032:	6022      	str	r2, [r4, #0]
 8011034:	601c      	str	r4, [r3, #0]
 8011036:	bd70      	pop	{r4, r5, r6, pc}
 8011038:	08012517 	.word	0x08012517
 801103c:	08012597 	.word	0x08012597

08011040 <__multadd>:
 8011040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011042:	000f      	movs	r7, r1
 8011044:	9001      	str	r0, [sp, #4]
 8011046:	000c      	movs	r4, r1
 8011048:	001e      	movs	r6, r3
 801104a:	2000      	movs	r0, #0
 801104c:	690d      	ldr	r5, [r1, #16]
 801104e:	3714      	adds	r7, #20
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	3001      	adds	r0, #1
 8011054:	b299      	uxth	r1, r3
 8011056:	4351      	muls	r1, r2
 8011058:	0c1b      	lsrs	r3, r3, #16
 801105a:	4353      	muls	r3, r2
 801105c:	1989      	adds	r1, r1, r6
 801105e:	0c0e      	lsrs	r6, r1, #16
 8011060:	199b      	adds	r3, r3, r6
 8011062:	0c1e      	lsrs	r6, r3, #16
 8011064:	b289      	uxth	r1, r1
 8011066:	041b      	lsls	r3, r3, #16
 8011068:	185b      	adds	r3, r3, r1
 801106a:	c708      	stmia	r7!, {r3}
 801106c:	4285      	cmp	r5, r0
 801106e:	dcef      	bgt.n	8011050 <__multadd+0x10>
 8011070:	2e00      	cmp	r6, #0
 8011072:	d022      	beq.n	80110ba <__multadd+0x7a>
 8011074:	68a3      	ldr	r3, [r4, #8]
 8011076:	42ab      	cmp	r3, r5
 8011078:	dc19      	bgt.n	80110ae <__multadd+0x6e>
 801107a:	6861      	ldr	r1, [r4, #4]
 801107c:	9801      	ldr	r0, [sp, #4]
 801107e:	3101      	adds	r1, #1
 8011080:	f7ff ff76 	bl	8010f70 <_Balloc>
 8011084:	1e07      	subs	r7, r0, #0
 8011086:	d105      	bne.n	8011094 <__multadd+0x54>
 8011088:	003a      	movs	r2, r7
 801108a:	21ba      	movs	r1, #186	@ 0xba
 801108c:	4b0c      	ldr	r3, [pc, #48]	@ (80110c0 <__multadd+0x80>)
 801108e:	480d      	ldr	r0, [pc, #52]	@ (80110c4 <__multadd+0x84>)
 8011090:	f000 fd48 	bl	8011b24 <__assert_func>
 8011094:	0021      	movs	r1, r4
 8011096:	6922      	ldr	r2, [r4, #16]
 8011098:	310c      	adds	r1, #12
 801109a:	3202      	adds	r2, #2
 801109c:	0092      	lsls	r2, r2, #2
 801109e:	300c      	adds	r0, #12
 80110a0:	f000 fd36 	bl	8011b10 <memcpy>
 80110a4:	0021      	movs	r1, r4
 80110a6:	9801      	ldr	r0, [sp, #4]
 80110a8:	f7ff ffa6 	bl	8010ff8 <_Bfree>
 80110ac:	003c      	movs	r4, r7
 80110ae:	1d2b      	adds	r3, r5, #4
 80110b0:	009b      	lsls	r3, r3, #2
 80110b2:	18e3      	adds	r3, r4, r3
 80110b4:	3501      	adds	r5, #1
 80110b6:	605e      	str	r6, [r3, #4]
 80110b8:	6125      	str	r5, [r4, #16]
 80110ba:	0020      	movs	r0, r4
 80110bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80110be:	46c0      	nop			@ (mov r8, r8)
 80110c0:	08012586 	.word	0x08012586
 80110c4:	08012597 	.word	0x08012597

080110c8 <__hi0bits>:
 80110c8:	2280      	movs	r2, #128	@ 0x80
 80110ca:	0003      	movs	r3, r0
 80110cc:	0252      	lsls	r2, r2, #9
 80110ce:	2000      	movs	r0, #0
 80110d0:	4293      	cmp	r3, r2
 80110d2:	d201      	bcs.n	80110d8 <__hi0bits+0x10>
 80110d4:	041b      	lsls	r3, r3, #16
 80110d6:	3010      	adds	r0, #16
 80110d8:	2280      	movs	r2, #128	@ 0x80
 80110da:	0452      	lsls	r2, r2, #17
 80110dc:	4293      	cmp	r3, r2
 80110de:	d201      	bcs.n	80110e4 <__hi0bits+0x1c>
 80110e0:	3008      	adds	r0, #8
 80110e2:	021b      	lsls	r3, r3, #8
 80110e4:	2280      	movs	r2, #128	@ 0x80
 80110e6:	0552      	lsls	r2, r2, #21
 80110e8:	4293      	cmp	r3, r2
 80110ea:	d201      	bcs.n	80110f0 <__hi0bits+0x28>
 80110ec:	3004      	adds	r0, #4
 80110ee:	011b      	lsls	r3, r3, #4
 80110f0:	2280      	movs	r2, #128	@ 0x80
 80110f2:	05d2      	lsls	r2, r2, #23
 80110f4:	4293      	cmp	r3, r2
 80110f6:	d201      	bcs.n	80110fc <__hi0bits+0x34>
 80110f8:	3002      	adds	r0, #2
 80110fa:	009b      	lsls	r3, r3, #2
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	db03      	blt.n	8011108 <__hi0bits+0x40>
 8011100:	3001      	adds	r0, #1
 8011102:	4213      	tst	r3, r2
 8011104:	d100      	bne.n	8011108 <__hi0bits+0x40>
 8011106:	2020      	movs	r0, #32
 8011108:	4770      	bx	lr

0801110a <__lo0bits>:
 801110a:	6803      	ldr	r3, [r0, #0]
 801110c:	0001      	movs	r1, r0
 801110e:	2207      	movs	r2, #7
 8011110:	0018      	movs	r0, r3
 8011112:	4010      	ands	r0, r2
 8011114:	4213      	tst	r3, r2
 8011116:	d00d      	beq.n	8011134 <__lo0bits+0x2a>
 8011118:	3a06      	subs	r2, #6
 801111a:	2000      	movs	r0, #0
 801111c:	4213      	tst	r3, r2
 801111e:	d105      	bne.n	801112c <__lo0bits+0x22>
 8011120:	3002      	adds	r0, #2
 8011122:	4203      	tst	r3, r0
 8011124:	d003      	beq.n	801112e <__lo0bits+0x24>
 8011126:	40d3      	lsrs	r3, r2
 8011128:	0010      	movs	r0, r2
 801112a:	600b      	str	r3, [r1, #0]
 801112c:	4770      	bx	lr
 801112e:	089b      	lsrs	r3, r3, #2
 8011130:	600b      	str	r3, [r1, #0]
 8011132:	e7fb      	b.n	801112c <__lo0bits+0x22>
 8011134:	b29a      	uxth	r2, r3
 8011136:	2a00      	cmp	r2, #0
 8011138:	d101      	bne.n	801113e <__lo0bits+0x34>
 801113a:	2010      	movs	r0, #16
 801113c:	0c1b      	lsrs	r3, r3, #16
 801113e:	b2da      	uxtb	r2, r3
 8011140:	2a00      	cmp	r2, #0
 8011142:	d101      	bne.n	8011148 <__lo0bits+0x3e>
 8011144:	3008      	adds	r0, #8
 8011146:	0a1b      	lsrs	r3, r3, #8
 8011148:	071a      	lsls	r2, r3, #28
 801114a:	d101      	bne.n	8011150 <__lo0bits+0x46>
 801114c:	3004      	adds	r0, #4
 801114e:	091b      	lsrs	r3, r3, #4
 8011150:	079a      	lsls	r2, r3, #30
 8011152:	d101      	bne.n	8011158 <__lo0bits+0x4e>
 8011154:	3002      	adds	r0, #2
 8011156:	089b      	lsrs	r3, r3, #2
 8011158:	07da      	lsls	r2, r3, #31
 801115a:	d4e9      	bmi.n	8011130 <__lo0bits+0x26>
 801115c:	3001      	adds	r0, #1
 801115e:	085b      	lsrs	r3, r3, #1
 8011160:	d1e6      	bne.n	8011130 <__lo0bits+0x26>
 8011162:	2020      	movs	r0, #32
 8011164:	e7e2      	b.n	801112c <__lo0bits+0x22>
	...

08011168 <__i2b>:
 8011168:	b510      	push	{r4, lr}
 801116a:	000c      	movs	r4, r1
 801116c:	2101      	movs	r1, #1
 801116e:	f7ff feff 	bl	8010f70 <_Balloc>
 8011172:	2800      	cmp	r0, #0
 8011174:	d107      	bne.n	8011186 <__i2b+0x1e>
 8011176:	2146      	movs	r1, #70	@ 0x46
 8011178:	4c05      	ldr	r4, [pc, #20]	@ (8011190 <__i2b+0x28>)
 801117a:	0002      	movs	r2, r0
 801117c:	4b05      	ldr	r3, [pc, #20]	@ (8011194 <__i2b+0x2c>)
 801117e:	0020      	movs	r0, r4
 8011180:	31ff      	adds	r1, #255	@ 0xff
 8011182:	f000 fccf 	bl	8011b24 <__assert_func>
 8011186:	2301      	movs	r3, #1
 8011188:	6144      	str	r4, [r0, #20]
 801118a:	6103      	str	r3, [r0, #16]
 801118c:	bd10      	pop	{r4, pc}
 801118e:	46c0      	nop			@ (mov r8, r8)
 8011190:	08012597 	.word	0x08012597
 8011194:	08012586 	.word	0x08012586

08011198 <__multiply>:
 8011198:	b5f0      	push	{r4, r5, r6, r7, lr}
 801119a:	0014      	movs	r4, r2
 801119c:	690a      	ldr	r2, [r1, #16]
 801119e:	6923      	ldr	r3, [r4, #16]
 80111a0:	000d      	movs	r5, r1
 80111a2:	b089      	sub	sp, #36	@ 0x24
 80111a4:	429a      	cmp	r2, r3
 80111a6:	db02      	blt.n	80111ae <__multiply+0x16>
 80111a8:	0023      	movs	r3, r4
 80111aa:	000c      	movs	r4, r1
 80111ac:	001d      	movs	r5, r3
 80111ae:	6927      	ldr	r7, [r4, #16]
 80111b0:	692e      	ldr	r6, [r5, #16]
 80111b2:	6861      	ldr	r1, [r4, #4]
 80111b4:	19bb      	adds	r3, r7, r6
 80111b6:	9300      	str	r3, [sp, #0]
 80111b8:	68a3      	ldr	r3, [r4, #8]
 80111ba:	19ba      	adds	r2, r7, r6
 80111bc:	4293      	cmp	r3, r2
 80111be:	da00      	bge.n	80111c2 <__multiply+0x2a>
 80111c0:	3101      	adds	r1, #1
 80111c2:	f7ff fed5 	bl	8010f70 <_Balloc>
 80111c6:	4684      	mov	ip, r0
 80111c8:	2800      	cmp	r0, #0
 80111ca:	d106      	bne.n	80111da <__multiply+0x42>
 80111cc:	21b1      	movs	r1, #177	@ 0xb1
 80111ce:	4662      	mov	r2, ip
 80111d0:	4b44      	ldr	r3, [pc, #272]	@ (80112e4 <__multiply+0x14c>)
 80111d2:	4845      	ldr	r0, [pc, #276]	@ (80112e8 <__multiply+0x150>)
 80111d4:	0049      	lsls	r1, r1, #1
 80111d6:	f000 fca5 	bl	8011b24 <__assert_func>
 80111da:	0002      	movs	r2, r0
 80111dc:	19bb      	adds	r3, r7, r6
 80111de:	3214      	adds	r2, #20
 80111e0:	009b      	lsls	r3, r3, #2
 80111e2:	18d3      	adds	r3, r2, r3
 80111e4:	9301      	str	r3, [sp, #4]
 80111e6:	2100      	movs	r1, #0
 80111e8:	0013      	movs	r3, r2
 80111ea:	9801      	ldr	r0, [sp, #4]
 80111ec:	4283      	cmp	r3, r0
 80111ee:	d328      	bcc.n	8011242 <__multiply+0xaa>
 80111f0:	0023      	movs	r3, r4
 80111f2:	00bf      	lsls	r7, r7, #2
 80111f4:	3314      	adds	r3, #20
 80111f6:	9304      	str	r3, [sp, #16]
 80111f8:	3514      	adds	r5, #20
 80111fa:	19db      	adds	r3, r3, r7
 80111fc:	00b6      	lsls	r6, r6, #2
 80111fe:	9302      	str	r3, [sp, #8]
 8011200:	19ab      	adds	r3, r5, r6
 8011202:	9307      	str	r3, [sp, #28]
 8011204:	2304      	movs	r3, #4
 8011206:	9305      	str	r3, [sp, #20]
 8011208:	0023      	movs	r3, r4
 801120a:	9902      	ldr	r1, [sp, #8]
 801120c:	3315      	adds	r3, #21
 801120e:	4299      	cmp	r1, r3
 8011210:	d305      	bcc.n	801121e <__multiply+0x86>
 8011212:	1b0c      	subs	r4, r1, r4
 8011214:	3c15      	subs	r4, #21
 8011216:	08a4      	lsrs	r4, r4, #2
 8011218:	3401      	adds	r4, #1
 801121a:	00a3      	lsls	r3, r4, #2
 801121c:	9305      	str	r3, [sp, #20]
 801121e:	9b07      	ldr	r3, [sp, #28]
 8011220:	429d      	cmp	r5, r3
 8011222:	d310      	bcc.n	8011246 <__multiply+0xae>
 8011224:	9b00      	ldr	r3, [sp, #0]
 8011226:	2b00      	cmp	r3, #0
 8011228:	dd05      	ble.n	8011236 <__multiply+0x9e>
 801122a:	9b01      	ldr	r3, [sp, #4]
 801122c:	3b04      	subs	r3, #4
 801122e:	9301      	str	r3, [sp, #4]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d052      	beq.n	80112dc <__multiply+0x144>
 8011236:	4663      	mov	r3, ip
 8011238:	4660      	mov	r0, ip
 801123a:	9a00      	ldr	r2, [sp, #0]
 801123c:	611a      	str	r2, [r3, #16]
 801123e:	b009      	add	sp, #36	@ 0x24
 8011240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011242:	c302      	stmia	r3!, {r1}
 8011244:	e7d1      	b.n	80111ea <__multiply+0x52>
 8011246:	682c      	ldr	r4, [r5, #0]
 8011248:	b2a4      	uxth	r4, r4
 801124a:	2c00      	cmp	r4, #0
 801124c:	d01f      	beq.n	801128e <__multiply+0xf6>
 801124e:	2300      	movs	r3, #0
 8011250:	0017      	movs	r7, r2
 8011252:	9e04      	ldr	r6, [sp, #16]
 8011254:	9303      	str	r3, [sp, #12]
 8011256:	ce08      	ldmia	r6!, {r3}
 8011258:	6839      	ldr	r1, [r7, #0]
 801125a:	9306      	str	r3, [sp, #24]
 801125c:	466b      	mov	r3, sp
 801125e:	8b1b      	ldrh	r3, [r3, #24]
 8011260:	b288      	uxth	r0, r1
 8011262:	4363      	muls	r3, r4
 8011264:	181b      	adds	r3, r3, r0
 8011266:	9803      	ldr	r0, [sp, #12]
 8011268:	0c09      	lsrs	r1, r1, #16
 801126a:	181b      	adds	r3, r3, r0
 801126c:	9806      	ldr	r0, [sp, #24]
 801126e:	0c00      	lsrs	r0, r0, #16
 8011270:	4360      	muls	r0, r4
 8011272:	1840      	adds	r0, r0, r1
 8011274:	0c19      	lsrs	r1, r3, #16
 8011276:	1841      	adds	r1, r0, r1
 8011278:	0c08      	lsrs	r0, r1, #16
 801127a:	b29b      	uxth	r3, r3
 801127c:	0409      	lsls	r1, r1, #16
 801127e:	4319      	orrs	r1, r3
 8011280:	9b02      	ldr	r3, [sp, #8]
 8011282:	9003      	str	r0, [sp, #12]
 8011284:	c702      	stmia	r7!, {r1}
 8011286:	42b3      	cmp	r3, r6
 8011288:	d8e5      	bhi.n	8011256 <__multiply+0xbe>
 801128a:	9b05      	ldr	r3, [sp, #20]
 801128c:	50d0      	str	r0, [r2, r3]
 801128e:	682c      	ldr	r4, [r5, #0]
 8011290:	0c24      	lsrs	r4, r4, #16
 8011292:	d020      	beq.n	80112d6 <__multiply+0x13e>
 8011294:	2100      	movs	r1, #0
 8011296:	0010      	movs	r0, r2
 8011298:	6813      	ldr	r3, [r2, #0]
 801129a:	9e04      	ldr	r6, [sp, #16]
 801129c:	9103      	str	r1, [sp, #12]
 801129e:	6831      	ldr	r1, [r6, #0]
 80112a0:	6807      	ldr	r7, [r0, #0]
 80112a2:	b289      	uxth	r1, r1
 80112a4:	4361      	muls	r1, r4
 80112a6:	0c3f      	lsrs	r7, r7, #16
 80112a8:	19c9      	adds	r1, r1, r7
 80112aa:	9f03      	ldr	r7, [sp, #12]
 80112ac:	b29b      	uxth	r3, r3
 80112ae:	19c9      	adds	r1, r1, r7
 80112b0:	040f      	lsls	r7, r1, #16
 80112b2:	431f      	orrs	r7, r3
 80112b4:	6007      	str	r7, [r0, #0]
 80112b6:	ce80      	ldmia	r6!, {r7}
 80112b8:	6843      	ldr	r3, [r0, #4]
 80112ba:	0c3f      	lsrs	r7, r7, #16
 80112bc:	4367      	muls	r7, r4
 80112be:	b29b      	uxth	r3, r3
 80112c0:	0c09      	lsrs	r1, r1, #16
 80112c2:	18fb      	adds	r3, r7, r3
 80112c4:	185b      	adds	r3, r3, r1
 80112c6:	0c19      	lsrs	r1, r3, #16
 80112c8:	9103      	str	r1, [sp, #12]
 80112ca:	9902      	ldr	r1, [sp, #8]
 80112cc:	3004      	adds	r0, #4
 80112ce:	42b1      	cmp	r1, r6
 80112d0:	d8e5      	bhi.n	801129e <__multiply+0x106>
 80112d2:	9905      	ldr	r1, [sp, #20]
 80112d4:	5053      	str	r3, [r2, r1]
 80112d6:	3504      	adds	r5, #4
 80112d8:	3204      	adds	r2, #4
 80112da:	e7a0      	b.n	801121e <__multiply+0x86>
 80112dc:	9b00      	ldr	r3, [sp, #0]
 80112de:	3b01      	subs	r3, #1
 80112e0:	9300      	str	r3, [sp, #0]
 80112e2:	e79f      	b.n	8011224 <__multiply+0x8c>
 80112e4:	08012586 	.word	0x08012586
 80112e8:	08012597 	.word	0x08012597

080112ec <__pow5mult>:
 80112ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80112ee:	2303      	movs	r3, #3
 80112f0:	0015      	movs	r5, r2
 80112f2:	0007      	movs	r7, r0
 80112f4:	000e      	movs	r6, r1
 80112f6:	401a      	ands	r2, r3
 80112f8:	421d      	tst	r5, r3
 80112fa:	d008      	beq.n	801130e <__pow5mult+0x22>
 80112fc:	4925      	ldr	r1, [pc, #148]	@ (8011394 <__pow5mult+0xa8>)
 80112fe:	3a01      	subs	r2, #1
 8011300:	0092      	lsls	r2, r2, #2
 8011302:	5852      	ldr	r2, [r2, r1]
 8011304:	2300      	movs	r3, #0
 8011306:	0031      	movs	r1, r6
 8011308:	f7ff fe9a 	bl	8011040 <__multadd>
 801130c:	0006      	movs	r6, r0
 801130e:	10ad      	asrs	r5, r5, #2
 8011310:	d03d      	beq.n	801138e <__pow5mult+0xa2>
 8011312:	69fc      	ldr	r4, [r7, #28]
 8011314:	2c00      	cmp	r4, #0
 8011316:	d10f      	bne.n	8011338 <__pow5mult+0x4c>
 8011318:	2010      	movs	r0, #16
 801131a:	f7ff fd6d 	bl	8010df8 <malloc>
 801131e:	1e02      	subs	r2, r0, #0
 8011320:	61f8      	str	r0, [r7, #28]
 8011322:	d105      	bne.n	8011330 <__pow5mult+0x44>
 8011324:	21b4      	movs	r1, #180	@ 0xb4
 8011326:	4b1c      	ldr	r3, [pc, #112]	@ (8011398 <__pow5mult+0xac>)
 8011328:	481c      	ldr	r0, [pc, #112]	@ (801139c <__pow5mult+0xb0>)
 801132a:	31ff      	adds	r1, #255	@ 0xff
 801132c:	f000 fbfa 	bl	8011b24 <__assert_func>
 8011330:	6044      	str	r4, [r0, #4]
 8011332:	6084      	str	r4, [r0, #8]
 8011334:	6004      	str	r4, [r0, #0]
 8011336:	60c4      	str	r4, [r0, #12]
 8011338:	69fb      	ldr	r3, [r7, #28]
 801133a:	689c      	ldr	r4, [r3, #8]
 801133c:	9301      	str	r3, [sp, #4]
 801133e:	2c00      	cmp	r4, #0
 8011340:	d108      	bne.n	8011354 <__pow5mult+0x68>
 8011342:	0038      	movs	r0, r7
 8011344:	4916      	ldr	r1, [pc, #88]	@ (80113a0 <__pow5mult+0xb4>)
 8011346:	f7ff ff0f 	bl	8011168 <__i2b>
 801134a:	9b01      	ldr	r3, [sp, #4]
 801134c:	0004      	movs	r4, r0
 801134e:	6098      	str	r0, [r3, #8]
 8011350:	2300      	movs	r3, #0
 8011352:	6003      	str	r3, [r0, #0]
 8011354:	2301      	movs	r3, #1
 8011356:	421d      	tst	r5, r3
 8011358:	d00a      	beq.n	8011370 <__pow5mult+0x84>
 801135a:	0031      	movs	r1, r6
 801135c:	0022      	movs	r2, r4
 801135e:	0038      	movs	r0, r7
 8011360:	f7ff ff1a 	bl	8011198 <__multiply>
 8011364:	0031      	movs	r1, r6
 8011366:	9001      	str	r0, [sp, #4]
 8011368:	0038      	movs	r0, r7
 801136a:	f7ff fe45 	bl	8010ff8 <_Bfree>
 801136e:	9e01      	ldr	r6, [sp, #4]
 8011370:	106d      	asrs	r5, r5, #1
 8011372:	d00c      	beq.n	801138e <__pow5mult+0xa2>
 8011374:	6820      	ldr	r0, [r4, #0]
 8011376:	2800      	cmp	r0, #0
 8011378:	d107      	bne.n	801138a <__pow5mult+0x9e>
 801137a:	0022      	movs	r2, r4
 801137c:	0021      	movs	r1, r4
 801137e:	0038      	movs	r0, r7
 8011380:	f7ff ff0a 	bl	8011198 <__multiply>
 8011384:	2300      	movs	r3, #0
 8011386:	6020      	str	r0, [r4, #0]
 8011388:	6003      	str	r3, [r0, #0]
 801138a:	0004      	movs	r4, r0
 801138c:	e7e2      	b.n	8011354 <__pow5mult+0x68>
 801138e:	0030      	movs	r0, r6
 8011390:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011392:	46c0      	nop			@ (mov r8, r8)
 8011394:	08012648 	.word	0x08012648
 8011398:	08012517 	.word	0x08012517
 801139c:	08012597 	.word	0x08012597
 80113a0:	00000271 	.word	0x00000271

080113a4 <__lshift>:
 80113a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113a6:	000c      	movs	r4, r1
 80113a8:	0016      	movs	r6, r2
 80113aa:	6923      	ldr	r3, [r4, #16]
 80113ac:	1157      	asrs	r7, r2, #5
 80113ae:	b085      	sub	sp, #20
 80113b0:	18fb      	adds	r3, r7, r3
 80113b2:	9301      	str	r3, [sp, #4]
 80113b4:	3301      	adds	r3, #1
 80113b6:	9300      	str	r3, [sp, #0]
 80113b8:	6849      	ldr	r1, [r1, #4]
 80113ba:	68a3      	ldr	r3, [r4, #8]
 80113bc:	9002      	str	r0, [sp, #8]
 80113be:	9a00      	ldr	r2, [sp, #0]
 80113c0:	4293      	cmp	r3, r2
 80113c2:	db10      	blt.n	80113e6 <__lshift+0x42>
 80113c4:	9802      	ldr	r0, [sp, #8]
 80113c6:	f7ff fdd3 	bl	8010f70 <_Balloc>
 80113ca:	2300      	movs	r3, #0
 80113cc:	0001      	movs	r1, r0
 80113ce:	0005      	movs	r5, r0
 80113d0:	001a      	movs	r2, r3
 80113d2:	3114      	adds	r1, #20
 80113d4:	4298      	cmp	r0, r3
 80113d6:	d10c      	bne.n	80113f2 <__lshift+0x4e>
 80113d8:	21ef      	movs	r1, #239	@ 0xef
 80113da:	002a      	movs	r2, r5
 80113dc:	4b25      	ldr	r3, [pc, #148]	@ (8011474 <__lshift+0xd0>)
 80113de:	4826      	ldr	r0, [pc, #152]	@ (8011478 <__lshift+0xd4>)
 80113e0:	0049      	lsls	r1, r1, #1
 80113e2:	f000 fb9f 	bl	8011b24 <__assert_func>
 80113e6:	3101      	adds	r1, #1
 80113e8:	005b      	lsls	r3, r3, #1
 80113ea:	e7e8      	b.n	80113be <__lshift+0x1a>
 80113ec:	0098      	lsls	r0, r3, #2
 80113ee:	500a      	str	r2, [r1, r0]
 80113f0:	3301      	adds	r3, #1
 80113f2:	42bb      	cmp	r3, r7
 80113f4:	dbfa      	blt.n	80113ec <__lshift+0x48>
 80113f6:	43fb      	mvns	r3, r7
 80113f8:	17db      	asrs	r3, r3, #31
 80113fa:	401f      	ands	r7, r3
 80113fc:	00bf      	lsls	r7, r7, #2
 80113fe:	0023      	movs	r3, r4
 8011400:	201f      	movs	r0, #31
 8011402:	19c9      	adds	r1, r1, r7
 8011404:	0037      	movs	r7, r6
 8011406:	6922      	ldr	r2, [r4, #16]
 8011408:	3314      	adds	r3, #20
 801140a:	0092      	lsls	r2, r2, #2
 801140c:	189a      	adds	r2, r3, r2
 801140e:	4007      	ands	r7, r0
 8011410:	4206      	tst	r6, r0
 8011412:	d029      	beq.n	8011468 <__lshift+0xc4>
 8011414:	3001      	adds	r0, #1
 8011416:	1bc0      	subs	r0, r0, r7
 8011418:	9003      	str	r0, [sp, #12]
 801141a:	468c      	mov	ip, r1
 801141c:	2000      	movs	r0, #0
 801141e:	681e      	ldr	r6, [r3, #0]
 8011420:	40be      	lsls	r6, r7
 8011422:	4306      	orrs	r6, r0
 8011424:	4660      	mov	r0, ip
 8011426:	c040      	stmia	r0!, {r6}
 8011428:	4684      	mov	ip, r0
 801142a:	9e03      	ldr	r6, [sp, #12]
 801142c:	cb01      	ldmia	r3!, {r0}
 801142e:	40f0      	lsrs	r0, r6
 8011430:	429a      	cmp	r2, r3
 8011432:	d8f4      	bhi.n	801141e <__lshift+0x7a>
 8011434:	0026      	movs	r6, r4
 8011436:	3615      	adds	r6, #21
 8011438:	2304      	movs	r3, #4
 801143a:	42b2      	cmp	r2, r6
 801143c:	d304      	bcc.n	8011448 <__lshift+0xa4>
 801143e:	1b13      	subs	r3, r2, r4
 8011440:	3b15      	subs	r3, #21
 8011442:	089b      	lsrs	r3, r3, #2
 8011444:	3301      	adds	r3, #1
 8011446:	009b      	lsls	r3, r3, #2
 8011448:	50c8      	str	r0, [r1, r3]
 801144a:	2800      	cmp	r0, #0
 801144c:	d002      	beq.n	8011454 <__lshift+0xb0>
 801144e:	9b01      	ldr	r3, [sp, #4]
 8011450:	3302      	adds	r3, #2
 8011452:	9300      	str	r3, [sp, #0]
 8011454:	9b00      	ldr	r3, [sp, #0]
 8011456:	9802      	ldr	r0, [sp, #8]
 8011458:	3b01      	subs	r3, #1
 801145a:	0021      	movs	r1, r4
 801145c:	612b      	str	r3, [r5, #16]
 801145e:	f7ff fdcb 	bl	8010ff8 <_Bfree>
 8011462:	0028      	movs	r0, r5
 8011464:	b005      	add	sp, #20
 8011466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011468:	cb01      	ldmia	r3!, {r0}
 801146a:	c101      	stmia	r1!, {r0}
 801146c:	429a      	cmp	r2, r3
 801146e:	d8fb      	bhi.n	8011468 <__lshift+0xc4>
 8011470:	e7f0      	b.n	8011454 <__lshift+0xb0>
 8011472:	46c0      	nop			@ (mov r8, r8)
 8011474:	08012586 	.word	0x08012586
 8011478:	08012597 	.word	0x08012597

0801147c <__mcmp>:
 801147c:	b530      	push	{r4, r5, lr}
 801147e:	690b      	ldr	r3, [r1, #16]
 8011480:	6904      	ldr	r4, [r0, #16]
 8011482:	0002      	movs	r2, r0
 8011484:	1ae0      	subs	r0, r4, r3
 8011486:	429c      	cmp	r4, r3
 8011488:	d10f      	bne.n	80114aa <__mcmp+0x2e>
 801148a:	3214      	adds	r2, #20
 801148c:	009b      	lsls	r3, r3, #2
 801148e:	3114      	adds	r1, #20
 8011490:	0014      	movs	r4, r2
 8011492:	18c9      	adds	r1, r1, r3
 8011494:	18d2      	adds	r2, r2, r3
 8011496:	3a04      	subs	r2, #4
 8011498:	3904      	subs	r1, #4
 801149a:	6815      	ldr	r5, [r2, #0]
 801149c:	680b      	ldr	r3, [r1, #0]
 801149e:	429d      	cmp	r5, r3
 80114a0:	d004      	beq.n	80114ac <__mcmp+0x30>
 80114a2:	2001      	movs	r0, #1
 80114a4:	429d      	cmp	r5, r3
 80114a6:	d200      	bcs.n	80114aa <__mcmp+0x2e>
 80114a8:	3802      	subs	r0, #2
 80114aa:	bd30      	pop	{r4, r5, pc}
 80114ac:	4294      	cmp	r4, r2
 80114ae:	d3f2      	bcc.n	8011496 <__mcmp+0x1a>
 80114b0:	e7fb      	b.n	80114aa <__mcmp+0x2e>
	...

080114b4 <__mdiff>:
 80114b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114b6:	000c      	movs	r4, r1
 80114b8:	b087      	sub	sp, #28
 80114ba:	9000      	str	r0, [sp, #0]
 80114bc:	0011      	movs	r1, r2
 80114be:	0020      	movs	r0, r4
 80114c0:	0017      	movs	r7, r2
 80114c2:	f7ff ffdb 	bl	801147c <__mcmp>
 80114c6:	1e05      	subs	r5, r0, #0
 80114c8:	d110      	bne.n	80114ec <__mdiff+0x38>
 80114ca:	0001      	movs	r1, r0
 80114cc:	9800      	ldr	r0, [sp, #0]
 80114ce:	f7ff fd4f 	bl	8010f70 <_Balloc>
 80114d2:	1e02      	subs	r2, r0, #0
 80114d4:	d104      	bne.n	80114e0 <__mdiff+0x2c>
 80114d6:	4b40      	ldr	r3, [pc, #256]	@ (80115d8 <__mdiff+0x124>)
 80114d8:	4840      	ldr	r0, [pc, #256]	@ (80115dc <__mdiff+0x128>)
 80114da:	4941      	ldr	r1, [pc, #260]	@ (80115e0 <__mdiff+0x12c>)
 80114dc:	f000 fb22 	bl	8011b24 <__assert_func>
 80114e0:	2301      	movs	r3, #1
 80114e2:	6145      	str	r5, [r0, #20]
 80114e4:	6103      	str	r3, [r0, #16]
 80114e6:	0010      	movs	r0, r2
 80114e8:	b007      	add	sp, #28
 80114ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114ec:	2600      	movs	r6, #0
 80114ee:	42b0      	cmp	r0, r6
 80114f0:	da03      	bge.n	80114fa <__mdiff+0x46>
 80114f2:	0023      	movs	r3, r4
 80114f4:	003c      	movs	r4, r7
 80114f6:	001f      	movs	r7, r3
 80114f8:	3601      	adds	r6, #1
 80114fa:	6861      	ldr	r1, [r4, #4]
 80114fc:	9800      	ldr	r0, [sp, #0]
 80114fe:	f7ff fd37 	bl	8010f70 <_Balloc>
 8011502:	1e02      	subs	r2, r0, #0
 8011504:	d103      	bne.n	801150e <__mdiff+0x5a>
 8011506:	4b34      	ldr	r3, [pc, #208]	@ (80115d8 <__mdiff+0x124>)
 8011508:	4834      	ldr	r0, [pc, #208]	@ (80115dc <__mdiff+0x128>)
 801150a:	4936      	ldr	r1, [pc, #216]	@ (80115e4 <__mdiff+0x130>)
 801150c:	e7e6      	b.n	80114dc <__mdiff+0x28>
 801150e:	6923      	ldr	r3, [r4, #16]
 8011510:	3414      	adds	r4, #20
 8011512:	9300      	str	r3, [sp, #0]
 8011514:	009b      	lsls	r3, r3, #2
 8011516:	18e3      	adds	r3, r4, r3
 8011518:	0021      	movs	r1, r4
 801151a:	9401      	str	r4, [sp, #4]
 801151c:	003c      	movs	r4, r7
 801151e:	9302      	str	r3, [sp, #8]
 8011520:	693b      	ldr	r3, [r7, #16]
 8011522:	3414      	adds	r4, #20
 8011524:	009b      	lsls	r3, r3, #2
 8011526:	18e3      	adds	r3, r4, r3
 8011528:	9303      	str	r3, [sp, #12]
 801152a:	0003      	movs	r3, r0
 801152c:	60c6      	str	r6, [r0, #12]
 801152e:	468c      	mov	ip, r1
 8011530:	2000      	movs	r0, #0
 8011532:	3314      	adds	r3, #20
 8011534:	9304      	str	r3, [sp, #16]
 8011536:	9305      	str	r3, [sp, #20]
 8011538:	4663      	mov	r3, ip
 801153a:	cb20      	ldmia	r3!, {r5}
 801153c:	b2a9      	uxth	r1, r5
 801153e:	000e      	movs	r6, r1
 8011540:	469c      	mov	ip, r3
 8011542:	cc08      	ldmia	r4!, {r3}
 8011544:	0c2d      	lsrs	r5, r5, #16
 8011546:	b299      	uxth	r1, r3
 8011548:	1a71      	subs	r1, r6, r1
 801154a:	1809      	adds	r1, r1, r0
 801154c:	0c1b      	lsrs	r3, r3, #16
 801154e:	1408      	asrs	r0, r1, #16
 8011550:	1aeb      	subs	r3, r5, r3
 8011552:	181b      	adds	r3, r3, r0
 8011554:	1418      	asrs	r0, r3, #16
 8011556:	b289      	uxth	r1, r1
 8011558:	041b      	lsls	r3, r3, #16
 801155a:	4319      	orrs	r1, r3
 801155c:	9b05      	ldr	r3, [sp, #20]
 801155e:	c302      	stmia	r3!, {r1}
 8011560:	9305      	str	r3, [sp, #20]
 8011562:	9b03      	ldr	r3, [sp, #12]
 8011564:	42a3      	cmp	r3, r4
 8011566:	d8e7      	bhi.n	8011538 <__mdiff+0x84>
 8011568:	0039      	movs	r1, r7
 801156a:	9c03      	ldr	r4, [sp, #12]
 801156c:	3115      	adds	r1, #21
 801156e:	2304      	movs	r3, #4
 8011570:	428c      	cmp	r4, r1
 8011572:	d304      	bcc.n	801157e <__mdiff+0xca>
 8011574:	1be3      	subs	r3, r4, r7
 8011576:	3b15      	subs	r3, #21
 8011578:	089b      	lsrs	r3, r3, #2
 801157a:	3301      	adds	r3, #1
 801157c:	009b      	lsls	r3, r3, #2
 801157e:	9901      	ldr	r1, [sp, #4]
 8011580:	18cd      	adds	r5, r1, r3
 8011582:	9904      	ldr	r1, [sp, #16]
 8011584:	002e      	movs	r6, r5
 8011586:	18cb      	adds	r3, r1, r3
 8011588:	001f      	movs	r7, r3
 801158a:	9902      	ldr	r1, [sp, #8]
 801158c:	428e      	cmp	r6, r1
 801158e:	d311      	bcc.n	80115b4 <__mdiff+0x100>
 8011590:	9c02      	ldr	r4, [sp, #8]
 8011592:	1ee9      	subs	r1, r5, #3
 8011594:	2000      	movs	r0, #0
 8011596:	428c      	cmp	r4, r1
 8011598:	d304      	bcc.n	80115a4 <__mdiff+0xf0>
 801159a:	0021      	movs	r1, r4
 801159c:	3103      	adds	r1, #3
 801159e:	1b49      	subs	r1, r1, r5
 80115a0:	0889      	lsrs	r1, r1, #2
 80115a2:	0088      	lsls	r0, r1, #2
 80115a4:	181b      	adds	r3, r3, r0
 80115a6:	3b04      	subs	r3, #4
 80115a8:	6819      	ldr	r1, [r3, #0]
 80115aa:	2900      	cmp	r1, #0
 80115ac:	d010      	beq.n	80115d0 <__mdiff+0x11c>
 80115ae:	9b00      	ldr	r3, [sp, #0]
 80115b0:	6113      	str	r3, [r2, #16]
 80115b2:	e798      	b.n	80114e6 <__mdiff+0x32>
 80115b4:	4684      	mov	ip, r0
 80115b6:	ce02      	ldmia	r6!, {r1}
 80115b8:	b288      	uxth	r0, r1
 80115ba:	4460      	add	r0, ip
 80115bc:	1400      	asrs	r0, r0, #16
 80115be:	0c0c      	lsrs	r4, r1, #16
 80115c0:	1904      	adds	r4, r0, r4
 80115c2:	4461      	add	r1, ip
 80115c4:	1420      	asrs	r0, r4, #16
 80115c6:	b289      	uxth	r1, r1
 80115c8:	0424      	lsls	r4, r4, #16
 80115ca:	4321      	orrs	r1, r4
 80115cc:	c702      	stmia	r7!, {r1}
 80115ce:	e7dc      	b.n	801158a <__mdiff+0xd6>
 80115d0:	9900      	ldr	r1, [sp, #0]
 80115d2:	3901      	subs	r1, #1
 80115d4:	9100      	str	r1, [sp, #0]
 80115d6:	e7e6      	b.n	80115a6 <__mdiff+0xf2>
 80115d8:	08012586 	.word	0x08012586
 80115dc:	08012597 	.word	0x08012597
 80115e0:	00000237 	.word	0x00000237
 80115e4:	00000245 	.word	0x00000245

080115e8 <__d2b>:
 80115e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80115ea:	2101      	movs	r1, #1
 80115ec:	0016      	movs	r6, r2
 80115ee:	001f      	movs	r7, r3
 80115f0:	f7ff fcbe 	bl	8010f70 <_Balloc>
 80115f4:	1e04      	subs	r4, r0, #0
 80115f6:	d105      	bne.n	8011604 <__d2b+0x1c>
 80115f8:	0022      	movs	r2, r4
 80115fa:	4b25      	ldr	r3, [pc, #148]	@ (8011690 <__d2b+0xa8>)
 80115fc:	4825      	ldr	r0, [pc, #148]	@ (8011694 <__d2b+0xac>)
 80115fe:	4926      	ldr	r1, [pc, #152]	@ (8011698 <__d2b+0xb0>)
 8011600:	f000 fa90 	bl	8011b24 <__assert_func>
 8011604:	033b      	lsls	r3, r7, #12
 8011606:	007d      	lsls	r5, r7, #1
 8011608:	0b1b      	lsrs	r3, r3, #12
 801160a:	0d6d      	lsrs	r5, r5, #21
 801160c:	d002      	beq.n	8011614 <__d2b+0x2c>
 801160e:	2280      	movs	r2, #128	@ 0x80
 8011610:	0352      	lsls	r2, r2, #13
 8011612:	4313      	orrs	r3, r2
 8011614:	9301      	str	r3, [sp, #4]
 8011616:	2e00      	cmp	r6, #0
 8011618:	d025      	beq.n	8011666 <__d2b+0x7e>
 801161a:	4668      	mov	r0, sp
 801161c:	9600      	str	r6, [sp, #0]
 801161e:	f7ff fd74 	bl	801110a <__lo0bits>
 8011622:	9b01      	ldr	r3, [sp, #4]
 8011624:	9900      	ldr	r1, [sp, #0]
 8011626:	2800      	cmp	r0, #0
 8011628:	d01b      	beq.n	8011662 <__d2b+0x7a>
 801162a:	2220      	movs	r2, #32
 801162c:	001e      	movs	r6, r3
 801162e:	1a12      	subs	r2, r2, r0
 8011630:	4096      	lsls	r6, r2
 8011632:	0032      	movs	r2, r6
 8011634:	40c3      	lsrs	r3, r0
 8011636:	430a      	orrs	r2, r1
 8011638:	6162      	str	r2, [r4, #20]
 801163a:	9301      	str	r3, [sp, #4]
 801163c:	9e01      	ldr	r6, [sp, #4]
 801163e:	61a6      	str	r6, [r4, #24]
 8011640:	1e73      	subs	r3, r6, #1
 8011642:	419e      	sbcs	r6, r3
 8011644:	3601      	adds	r6, #1
 8011646:	6126      	str	r6, [r4, #16]
 8011648:	2d00      	cmp	r5, #0
 801164a:	d014      	beq.n	8011676 <__d2b+0x8e>
 801164c:	2635      	movs	r6, #53	@ 0x35
 801164e:	4b13      	ldr	r3, [pc, #76]	@ (801169c <__d2b+0xb4>)
 8011650:	18ed      	adds	r5, r5, r3
 8011652:	9b08      	ldr	r3, [sp, #32]
 8011654:	182d      	adds	r5, r5, r0
 8011656:	601d      	str	r5, [r3, #0]
 8011658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801165a:	1a36      	subs	r6, r6, r0
 801165c:	601e      	str	r6, [r3, #0]
 801165e:	0020      	movs	r0, r4
 8011660:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011662:	6161      	str	r1, [r4, #20]
 8011664:	e7ea      	b.n	801163c <__d2b+0x54>
 8011666:	a801      	add	r0, sp, #4
 8011668:	f7ff fd4f 	bl	801110a <__lo0bits>
 801166c:	9b01      	ldr	r3, [sp, #4]
 801166e:	2601      	movs	r6, #1
 8011670:	6163      	str	r3, [r4, #20]
 8011672:	3020      	adds	r0, #32
 8011674:	e7e7      	b.n	8011646 <__d2b+0x5e>
 8011676:	4b0a      	ldr	r3, [pc, #40]	@ (80116a0 <__d2b+0xb8>)
 8011678:	18c0      	adds	r0, r0, r3
 801167a:	9b08      	ldr	r3, [sp, #32]
 801167c:	6018      	str	r0, [r3, #0]
 801167e:	4b09      	ldr	r3, [pc, #36]	@ (80116a4 <__d2b+0xbc>)
 8011680:	18f3      	adds	r3, r6, r3
 8011682:	009b      	lsls	r3, r3, #2
 8011684:	18e3      	adds	r3, r4, r3
 8011686:	6958      	ldr	r0, [r3, #20]
 8011688:	f7ff fd1e 	bl	80110c8 <__hi0bits>
 801168c:	0176      	lsls	r6, r6, #5
 801168e:	e7e3      	b.n	8011658 <__d2b+0x70>
 8011690:	08012586 	.word	0x08012586
 8011694:	08012597 	.word	0x08012597
 8011698:	0000030f 	.word	0x0000030f
 801169c:	fffffbcd 	.word	0xfffffbcd
 80116a0:	fffffbce 	.word	0xfffffbce
 80116a4:	3fffffff 	.word	0x3fffffff

080116a8 <__ssputs_r>:
 80116a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116aa:	688e      	ldr	r6, [r1, #8]
 80116ac:	b085      	sub	sp, #20
 80116ae:	001f      	movs	r7, r3
 80116b0:	000c      	movs	r4, r1
 80116b2:	680b      	ldr	r3, [r1, #0]
 80116b4:	9002      	str	r0, [sp, #8]
 80116b6:	9203      	str	r2, [sp, #12]
 80116b8:	42be      	cmp	r6, r7
 80116ba:	d830      	bhi.n	801171e <__ssputs_r+0x76>
 80116bc:	210c      	movs	r1, #12
 80116be:	5e62      	ldrsh	r2, [r4, r1]
 80116c0:	2190      	movs	r1, #144	@ 0x90
 80116c2:	00c9      	lsls	r1, r1, #3
 80116c4:	420a      	tst	r2, r1
 80116c6:	d028      	beq.n	801171a <__ssputs_r+0x72>
 80116c8:	2003      	movs	r0, #3
 80116ca:	6921      	ldr	r1, [r4, #16]
 80116cc:	1a5b      	subs	r3, r3, r1
 80116ce:	9301      	str	r3, [sp, #4]
 80116d0:	6963      	ldr	r3, [r4, #20]
 80116d2:	4343      	muls	r3, r0
 80116d4:	9801      	ldr	r0, [sp, #4]
 80116d6:	0fdd      	lsrs	r5, r3, #31
 80116d8:	18ed      	adds	r5, r5, r3
 80116da:	1c7b      	adds	r3, r7, #1
 80116dc:	181b      	adds	r3, r3, r0
 80116de:	106d      	asrs	r5, r5, #1
 80116e0:	42ab      	cmp	r3, r5
 80116e2:	d900      	bls.n	80116e6 <__ssputs_r+0x3e>
 80116e4:	001d      	movs	r5, r3
 80116e6:	0552      	lsls	r2, r2, #21
 80116e8:	d528      	bpl.n	801173c <__ssputs_r+0x94>
 80116ea:	0029      	movs	r1, r5
 80116ec:	9802      	ldr	r0, [sp, #8]
 80116ee:	f7ff fbaf 	bl	8010e50 <_malloc_r>
 80116f2:	1e06      	subs	r6, r0, #0
 80116f4:	d02c      	beq.n	8011750 <__ssputs_r+0xa8>
 80116f6:	9a01      	ldr	r2, [sp, #4]
 80116f8:	6921      	ldr	r1, [r4, #16]
 80116fa:	f000 fa09 	bl	8011b10 <memcpy>
 80116fe:	89a2      	ldrh	r2, [r4, #12]
 8011700:	4b18      	ldr	r3, [pc, #96]	@ (8011764 <__ssputs_r+0xbc>)
 8011702:	401a      	ands	r2, r3
 8011704:	2380      	movs	r3, #128	@ 0x80
 8011706:	4313      	orrs	r3, r2
 8011708:	81a3      	strh	r3, [r4, #12]
 801170a:	9b01      	ldr	r3, [sp, #4]
 801170c:	6126      	str	r6, [r4, #16]
 801170e:	18f6      	adds	r6, r6, r3
 8011710:	6026      	str	r6, [r4, #0]
 8011712:	003e      	movs	r6, r7
 8011714:	6165      	str	r5, [r4, #20]
 8011716:	1aed      	subs	r5, r5, r3
 8011718:	60a5      	str	r5, [r4, #8]
 801171a:	42be      	cmp	r6, r7
 801171c:	d900      	bls.n	8011720 <__ssputs_r+0x78>
 801171e:	003e      	movs	r6, r7
 8011720:	0032      	movs	r2, r6
 8011722:	9903      	ldr	r1, [sp, #12]
 8011724:	6820      	ldr	r0, [r4, #0]
 8011726:	f000 f9ce 	bl	8011ac6 <memmove>
 801172a:	2000      	movs	r0, #0
 801172c:	68a3      	ldr	r3, [r4, #8]
 801172e:	1b9b      	subs	r3, r3, r6
 8011730:	60a3      	str	r3, [r4, #8]
 8011732:	6823      	ldr	r3, [r4, #0]
 8011734:	199b      	adds	r3, r3, r6
 8011736:	6023      	str	r3, [r4, #0]
 8011738:	b005      	add	sp, #20
 801173a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801173c:	002a      	movs	r2, r5
 801173e:	9802      	ldr	r0, [sp, #8]
 8011740:	f000 fa4d 	bl	8011bde <_realloc_r>
 8011744:	1e06      	subs	r6, r0, #0
 8011746:	d1e0      	bne.n	801170a <__ssputs_r+0x62>
 8011748:	6921      	ldr	r1, [r4, #16]
 801174a:	9802      	ldr	r0, [sp, #8]
 801174c:	f7ff fb0a 	bl	8010d64 <_free_r>
 8011750:	230c      	movs	r3, #12
 8011752:	2001      	movs	r0, #1
 8011754:	9a02      	ldr	r2, [sp, #8]
 8011756:	4240      	negs	r0, r0
 8011758:	6013      	str	r3, [r2, #0]
 801175a:	89a2      	ldrh	r2, [r4, #12]
 801175c:	3334      	adds	r3, #52	@ 0x34
 801175e:	4313      	orrs	r3, r2
 8011760:	81a3      	strh	r3, [r4, #12]
 8011762:	e7e9      	b.n	8011738 <__ssputs_r+0x90>
 8011764:	fffffb7f 	.word	0xfffffb7f

08011768 <_svfiprintf_r>:
 8011768:	b5f0      	push	{r4, r5, r6, r7, lr}
 801176a:	b0a1      	sub	sp, #132	@ 0x84
 801176c:	9003      	str	r0, [sp, #12]
 801176e:	001d      	movs	r5, r3
 8011770:	898b      	ldrh	r3, [r1, #12]
 8011772:	000f      	movs	r7, r1
 8011774:	0016      	movs	r6, r2
 8011776:	061b      	lsls	r3, r3, #24
 8011778:	d511      	bpl.n	801179e <_svfiprintf_r+0x36>
 801177a:	690b      	ldr	r3, [r1, #16]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d10e      	bne.n	801179e <_svfiprintf_r+0x36>
 8011780:	2140      	movs	r1, #64	@ 0x40
 8011782:	f7ff fb65 	bl	8010e50 <_malloc_r>
 8011786:	6038      	str	r0, [r7, #0]
 8011788:	6138      	str	r0, [r7, #16]
 801178a:	2800      	cmp	r0, #0
 801178c:	d105      	bne.n	801179a <_svfiprintf_r+0x32>
 801178e:	230c      	movs	r3, #12
 8011790:	9a03      	ldr	r2, [sp, #12]
 8011792:	6013      	str	r3, [r2, #0]
 8011794:	2001      	movs	r0, #1
 8011796:	4240      	negs	r0, r0
 8011798:	e0cf      	b.n	801193a <_svfiprintf_r+0x1d2>
 801179a:	2340      	movs	r3, #64	@ 0x40
 801179c:	617b      	str	r3, [r7, #20]
 801179e:	2300      	movs	r3, #0
 80117a0:	ac08      	add	r4, sp, #32
 80117a2:	6163      	str	r3, [r4, #20]
 80117a4:	3320      	adds	r3, #32
 80117a6:	7663      	strb	r3, [r4, #25]
 80117a8:	3310      	adds	r3, #16
 80117aa:	76a3      	strb	r3, [r4, #26]
 80117ac:	9507      	str	r5, [sp, #28]
 80117ae:	0035      	movs	r5, r6
 80117b0:	782b      	ldrb	r3, [r5, #0]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d001      	beq.n	80117ba <_svfiprintf_r+0x52>
 80117b6:	2b25      	cmp	r3, #37	@ 0x25
 80117b8:	d148      	bne.n	801184c <_svfiprintf_r+0xe4>
 80117ba:	1bab      	subs	r3, r5, r6
 80117bc:	9305      	str	r3, [sp, #20]
 80117be:	42b5      	cmp	r5, r6
 80117c0:	d00b      	beq.n	80117da <_svfiprintf_r+0x72>
 80117c2:	0032      	movs	r2, r6
 80117c4:	0039      	movs	r1, r7
 80117c6:	9803      	ldr	r0, [sp, #12]
 80117c8:	f7ff ff6e 	bl	80116a8 <__ssputs_r>
 80117cc:	3001      	adds	r0, #1
 80117ce:	d100      	bne.n	80117d2 <_svfiprintf_r+0x6a>
 80117d0:	e0ae      	b.n	8011930 <_svfiprintf_r+0x1c8>
 80117d2:	6963      	ldr	r3, [r4, #20]
 80117d4:	9a05      	ldr	r2, [sp, #20]
 80117d6:	189b      	adds	r3, r3, r2
 80117d8:	6163      	str	r3, [r4, #20]
 80117da:	782b      	ldrb	r3, [r5, #0]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d100      	bne.n	80117e2 <_svfiprintf_r+0x7a>
 80117e0:	e0a6      	b.n	8011930 <_svfiprintf_r+0x1c8>
 80117e2:	2201      	movs	r2, #1
 80117e4:	2300      	movs	r3, #0
 80117e6:	4252      	negs	r2, r2
 80117e8:	6062      	str	r2, [r4, #4]
 80117ea:	a904      	add	r1, sp, #16
 80117ec:	3254      	adds	r2, #84	@ 0x54
 80117ee:	1852      	adds	r2, r2, r1
 80117f0:	1c6e      	adds	r6, r5, #1
 80117f2:	6023      	str	r3, [r4, #0]
 80117f4:	60e3      	str	r3, [r4, #12]
 80117f6:	60a3      	str	r3, [r4, #8]
 80117f8:	7013      	strb	r3, [r2, #0]
 80117fa:	65a3      	str	r3, [r4, #88]	@ 0x58
 80117fc:	4b54      	ldr	r3, [pc, #336]	@ (8011950 <_svfiprintf_r+0x1e8>)
 80117fe:	2205      	movs	r2, #5
 8011800:	0018      	movs	r0, r3
 8011802:	7831      	ldrb	r1, [r6, #0]
 8011804:	9305      	str	r3, [sp, #20]
 8011806:	f7fe fc2c 	bl	8010062 <memchr>
 801180a:	1c75      	adds	r5, r6, #1
 801180c:	2800      	cmp	r0, #0
 801180e:	d11f      	bne.n	8011850 <_svfiprintf_r+0xe8>
 8011810:	6822      	ldr	r2, [r4, #0]
 8011812:	06d3      	lsls	r3, r2, #27
 8011814:	d504      	bpl.n	8011820 <_svfiprintf_r+0xb8>
 8011816:	2353      	movs	r3, #83	@ 0x53
 8011818:	a904      	add	r1, sp, #16
 801181a:	185b      	adds	r3, r3, r1
 801181c:	2120      	movs	r1, #32
 801181e:	7019      	strb	r1, [r3, #0]
 8011820:	0713      	lsls	r3, r2, #28
 8011822:	d504      	bpl.n	801182e <_svfiprintf_r+0xc6>
 8011824:	2353      	movs	r3, #83	@ 0x53
 8011826:	a904      	add	r1, sp, #16
 8011828:	185b      	adds	r3, r3, r1
 801182a:	212b      	movs	r1, #43	@ 0x2b
 801182c:	7019      	strb	r1, [r3, #0]
 801182e:	7833      	ldrb	r3, [r6, #0]
 8011830:	2b2a      	cmp	r3, #42	@ 0x2a
 8011832:	d016      	beq.n	8011862 <_svfiprintf_r+0xfa>
 8011834:	0035      	movs	r5, r6
 8011836:	2100      	movs	r1, #0
 8011838:	200a      	movs	r0, #10
 801183a:	68e3      	ldr	r3, [r4, #12]
 801183c:	782a      	ldrb	r2, [r5, #0]
 801183e:	1c6e      	adds	r6, r5, #1
 8011840:	3a30      	subs	r2, #48	@ 0x30
 8011842:	2a09      	cmp	r2, #9
 8011844:	d950      	bls.n	80118e8 <_svfiprintf_r+0x180>
 8011846:	2900      	cmp	r1, #0
 8011848:	d111      	bne.n	801186e <_svfiprintf_r+0x106>
 801184a:	e017      	b.n	801187c <_svfiprintf_r+0x114>
 801184c:	3501      	adds	r5, #1
 801184e:	e7af      	b.n	80117b0 <_svfiprintf_r+0x48>
 8011850:	9b05      	ldr	r3, [sp, #20]
 8011852:	6822      	ldr	r2, [r4, #0]
 8011854:	1ac0      	subs	r0, r0, r3
 8011856:	2301      	movs	r3, #1
 8011858:	4083      	lsls	r3, r0
 801185a:	4313      	orrs	r3, r2
 801185c:	002e      	movs	r6, r5
 801185e:	6023      	str	r3, [r4, #0]
 8011860:	e7cc      	b.n	80117fc <_svfiprintf_r+0x94>
 8011862:	9b07      	ldr	r3, [sp, #28]
 8011864:	1d19      	adds	r1, r3, #4
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	9107      	str	r1, [sp, #28]
 801186a:	2b00      	cmp	r3, #0
 801186c:	db01      	blt.n	8011872 <_svfiprintf_r+0x10a>
 801186e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011870:	e004      	b.n	801187c <_svfiprintf_r+0x114>
 8011872:	425b      	negs	r3, r3
 8011874:	60e3      	str	r3, [r4, #12]
 8011876:	2302      	movs	r3, #2
 8011878:	4313      	orrs	r3, r2
 801187a:	6023      	str	r3, [r4, #0]
 801187c:	782b      	ldrb	r3, [r5, #0]
 801187e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011880:	d10c      	bne.n	801189c <_svfiprintf_r+0x134>
 8011882:	786b      	ldrb	r3, [r5, #1]
 8011884:	2b2a      	cmp	r3, #42	@ 0x2a
 8011886:	d134      	bne.n	80118f2 <_svfiprintf_r+0x18a>
 8011888:	9b07      	ldr	r3, [sp, #28]
 801188a:	3502      	adds	r5, #2
 801188c:	1d1a      	adds	r2, r3, #4
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	9207      	str	r2, [sp, #28]
 8011892:	2b00      	cmp	r3, #0
 8011894:	da01      	bge.n	801189a <_svfiprintf_r+0x132>
 8011896:	2301      	movs	r3, #1
 8011898:	425b      	negs	r3, r3
 801189a:	9309      	str	r3, [sp, #36]	@ 0x24
 801189c:	4e2d      	ldr	r6, [pc, #180]	@ (8011954 <_svfiprintf_r+0x1ec>)
 801189e:	2203      	movs	r2, #3
 80118a0:	0030      	movs	r0, r6
 80118a2:	7829      	ldrb	r1, [r5, #0]
 80118a4:	f7fe fbdd 	bl	8010062 <memchr>
 80118a8:	2800      	cmp	r0, #0
 80118aa:	d006      	beq.n	80118ba <_svfiprintf_r+0x152>
 80118ac:	2340      	movs	r3, #64	@ 0x40
 80118ae:	1b80      	subs	r0, r0, r6
 80118b0:	4083      	lsls	r3, r0
 80118b2:	6822      	ldr	r2, [r4, #0]
 80118b4:	3501      	adds	r5, #1
 80118b6:	4313      	orrs	r3, r2
 80118b8:	6023      	str	r3, [r4, #0]
 80118ba:	7829      	ldrb	r1, [r5, #0]
 80118bc:	2206      	movs	r2, #6
 80118be:	4826      	ldr	r0, [pc, #152]	@ (8011958 <_svfiprintf_r+0x1f0>)
 80118c0:	1c6e      	adds	r6, r5, #1
 80118c2:	7621      	strb	r1, [r4, #24]
 80118c4:	f7fe fbcd 	bl	8010062 <memchr>
 80118c8:	2800      	cmp	r0, #0
 80118ca:	d038      	beq.n	801193e <_svfiprintf_r+0x1d6>
 80118cc:	4b23      	ldr	r3, [pc, #140]	@ (801195c <_svfiprintf_r+0x1f4>)
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d122      	bne.n	8011918 <_svfiprintf_r+0x1b0>
 80118d2:	2207      	movs	r2, #7
 80118d4:	9b07      	ldr	r3, [sp, #28]
 80118d6:	3307      	adds	r3, #7
 80118d8:	4393      	bics	r3, r2
 80118da:	3308      	adds	r3, #8
 80118dc:	9307      	str	r3, [sp, #28]
 80118de:	6963      	ldr	r3, [r4, #20]
 80118e0:	9a04      	ldr	r2, [sp, #16]
 80118e2:	189b      	adds	r3, r3, r2
 80118e4:	6163      	str	r3, [r4, #20]
 80118e6:	e762      	b.n	80117ae <_svfiprintf_r+0x46>
 80118e8:	4343      	muls	r3, r0
 80118ea:	0035      	movs	r5, r6
 80118ec:	2101      	movs	r1, #1
 80118ee:	189b      	adds	r3, r3, r2
 80118f0:	e7a4      	b.n	801183c <_svfiprintf_r+0xd4>
 80118f2:	2300      	movs	r3, #0
 80118f4:	200a      	movs	r0, #10
 80118f6:	0019      	movs	r1, r3
 80118f8:	3501      	adds	r5, #1
 80118fa:	6063      	str	r3, [r4, #4]
 80118fc:	782a      	ldrb	r2, [r5, #0]
 80118fe:	1c6e      	adds	r6, r5, #1
 8011900:	3a30      	subs	r2, #48	@ 0x30
 8011902:	2a09      	cmp	r2, #9
 8011904:	d903      	bls.n	801190e <_svfiprintf_r+0x1a6>
 8011906:	2b00      	cmp	r3, #0
 8011908:	d0c8      	beq.n	801189c <_svfiprintf_r+0x134>
 801190a:	9109      	str	r1, [sp, #36]	@ 0x24
 801190c:	e7c6      	b.n	801189c <_svfiprintf_r+0x134>
 801190e:	4341      	muls	r1, r0
 8011910:	0035      	movs	r5, r6
 8011912:	2301      	movs	r3, #1
 8011914:	1889      	adds	r1, r1, r2
 8011916:	e7f1      	b.n	80118fc <_svfiprintf_r+0x194>
 8011918:	aa07      	add	r2, sp, #28
 801191a:	9200      	str	r2, [sp, #0]
 801191c:	0021      	movs	r1, r4
 801191e:	003a      	movs	r2, r7
 8011920:	4b0f      	ldr	r3, [pc, #60]	@ (8011960 <_svfiprintf_r+0x1f8>)
 8011922:	9803      	ldr	r0, [sp, #12]
 8011924:	f7fd fe1c 	bl	800f560 <_printf_float>
 8011928:	9004      	str	r0, [sp, #16]
 801192a:	9b04      	ldr	r3, [sp, #16]
 801192c:	3301      	adds	r3, #1
 801192e:	d1d6      	bne.n	80118de <_svfiprintf_r+0x176>
 8011930:	89bb      	ldrh	r3, [r7, #12]
 8011932:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8011934:	065b      	lsls	r3, r3, #25
 8011936:	d500      	bpl.n	801193a <_svfiprintf_r+0x1d2>
 8011938:	e72c      	b.n	8011794 <_svfiprintf_r+0x2c>
 801193a:	b021      	add	sp, #132	@ 0x84
 801193c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801193e:	aa07      	add	r2, sp, #28
 8011940:	9200      	str	r2, [sp, #0]
 8011942:	0021      	movs	r1, r4
 8011944:	003a      	movs	r2, r7
 8011946:	4b06      	ldr	r3, [pc, #24]	@ (8011960 <_svfiprintf_r+0x1f8>)
 8011948:	9803      	ldr	r0, [sp, #12]
 801194a:	f7fe f8b7 	bl	800fabc <_printf_i>
 801194e:	e7eb      	b.n	8011928 <_svfiprintf_r+0x1c0>
 8011950:	080125f0 	.word	0x080125f0
 8011954:	080125f6 	.word	0x080125f6
 8011958:	080125fa 	.word	0x080125fa
 801195c:	0800f561 	.word	0x0800f561
 8011960:	080116a9 	.word	0x080116a9

08011964 <__sflush_r>:
 8011964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011966:	220c      	movs	r2, #12
 8011968:	5e8b      	ldrsh	r3, [r1, r2]
 801196a:	0005      	movs	r5, r0
 801196c:	000c      	movs	r4, r1
 801196e:	071a      	lsls	r2, r3, #28
 8011970:	d456      	bmi.n	8011a20 <__sflush_r+0xbc>
 8011972:	684a      	ldr	r2, [r1, #4]
 8011974:	2a00      	cmp	r2, #0
 8011976:	dc02      	bgt.n	801197e <__sflush_r+0x1a>
 8011978:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 801197a:	2a00      	cmp	r2, #0
 801197c:	dd4e      	ble.n	8011a1c <__sflush_r+0xb8>
 801197e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8011980:	2f00      	cmp	r7, #0
 8011982:	d04b      	beq.n	8011a1c <__sflush_r+0xb8>
 8011984:	2200      	movs	r2, #0
 8011986:	2080      	movs	r0, #128	@ 0x80
 8011988:	682e      	ldr	r6, [r5, #0]
 801198a:	602a      	str	r2, [r5, #0]
 801198c:	001a      	movs	r2, r3
 801198e:	0140      	lsls	r0, r0, #5
 8011990:	6a21      	ldr	r1, [r4, #32]
 8011992:	4002      	ands	r2, r0
 8011994:	4203      	tst	r3, r0
 8011996:	d033      	beq.n	8011a00 <__sflush_r+0x9c>
 8011998:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801199a:	89a3      	ldrh	r3, [r4, #12]
 801199c:	075b      	lsls	r3, r3, #29
 801199e:	d506      	bpl.n	80119ae <__sflush_r+0x4a>
 80119a0:	6863      	ldr	r3, [r4, #4]
 80119a2:	1ad2      	subs	r2, r2, r3
 80119a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d001      	beq.n	80119ae <__sflush_r+0x4a>
 80119aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80119ac:	1ad2      	subs	r2, r2, r3
 80119ae:	2300      	movs	r3, #0
 80119b0:	0028      	movs	r0, r5
 80119b2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80119b4:	6a21      	ldr	r1, [r4, #32]
 80119b6:	47b8      	blx	r7
 80119b8:	89a2      	ldrh	r2, [r4, #12]
 80119ba:	1c43      	adds	r3, r0, #1
 80119bc:	d106      	bne.n	80119cc <__sflush_r+0x68>
 80119be:	6829      	ldr	r1, [r5, #0]
 80119c0:	291d      	cmp	r1, #29
 80119c2:	d846      	bhi.n	8011a52 <__sflush_r+0xee>
 80119c4:	4b29      	ldr	r3, [pc, #164]	@ (8011a6c <__sflush_r+0x108>)
 80119c6:	40cb      	lsrs	r3, r1
 80119c8:	07db      	lsls	r3, r3, #31
 80119ca:	d542      	bpl.n	8011a52 <__sflush_r+0xee>
 80119cc:	2300      	movs	r3, #0
 80119ce:	6063      	str	r3, [r4, #4]
 80119d0:	6923      	ldr	r3, [r4, #16]
 80119d2:	6023      	str	r3, [r4, #0]
 80119d4:	04d2      	lsls	r2, r2, #19
 80119d6:	d505      	bpl.n	80119e4 <__sflush_r+0x80>
 80119d8:	1c43      	adds	r3, r0, #1
 80119da:	d102      	bne.n	80119e2 <__sflush_r+0x7e>
 80119dc:	682b      	ldr	r3, [r5, #0]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d100      	bne.n	80119e4 <__sflush_r+0x80>
 80119e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80119e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80119e6:	602e      	str	r6, [r5, #0]
 80119e8:	2900      	cmp	r1, #0
 80119ea:	d017      	beq.n	8011a1c <__sflush_r+0xb8>
 80119ec:	0023      	movs	r3, r4
 80119ee:	3344      	adds	r3, #68	@ 0x44
 80119f0:	4299      	cmp	r1, r3
 80119f2:	d002      	beq.n	80119fa <__sflush_r+0x96>
 80119f4:	0028      	movs	r0, r5
 80119f6:	f7ff f9b5 	bl	8010d64 <_free_r>
 80119fa:	2300      	movs	r3, #0
 80119fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80119fe:	e00d      	b.n	8011a1c <__sflush_r+0xb8>
 8011a00:	2301      	movs	r3, #1
 8011a02:	0028      	movs	r0, r5
 8011a04:	47b8      	blx	r7
 8011a06:	0002      	movs	r2, r0
 8011a08:	1c43      	adds	r3, r0, #1
 8011a0a:	d1c6      	bne.n	801199a <__sflush_r+0x36>
 8011a0c:	682b      	ldr	r3, [r5, #0]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d0c3      	beq.n	801199a <__sflush_r+0x36>
 8011a12:	2b1d      	cmp	r3, #29
 8011a14:	d001      	beq.n	8011a1a <__sflush_r+0xb6>
 8011a16:	2b16      	cmp	r3, #22
 8011a18:	d11a      	bne.n	8011a50 <__sflush_r+0xec>
 8011a1a:	602e      	str	r6, [r5, #0]
 8011a1c:	2000      	movs	r0, #0
 8011a1e:	e01e      	b.n	8011a5e <__sflush_r+0xfa>
 8011a20:	690e      	ldr	r6, [r1, #16]
 8011a22:	2e00      	cmp	r6, #0
 8011a24:	d0fa      	beq.n	8011a1c <__sflush_r+0xb8>
 8011a26:	680f      	ldr	r7, [r1, #0]
 8011a28:	600e      	str	r6, [r1, #0]
 8011a2a:	1bba      	subs	r2, r7, r6
 8011a2c:	9201      	str	r2, [sp, #4]
 8011a2e:	2200      	movs	r2, #0
 8011a30:	079b      	lsls	r3, r3, #30
 8011a32:	d100      	bne.n	8011a36 <__sflush_r+0xd2>
 8011a34:	694a      	ldr	r2, [r1, #20]
 8011a36:	60a2      	str	r2, [r4, #8]
 8011a38:	9b01      	ldr	r3, [sp, #4]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	ddee      	ble.n	8011a1c <__sflush_r+0xb8>
 8011a3e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8011a40:	0032      	movs	r2, r6
 8011a42:	001f      	movs	r7, r3
 8011a44:	0028      	movs	r0, r5
 8011a46:	9b01      	ldr	r3, [sp, #4]
 8011a48:	6a21      	ldr	r1, [r4, #32]
 8011a4a:	47b8      	blx	r7
 8011a4c:	2800      	cmp	r0, #0
 8011a4e:	dc07      	bgt.n	8011a60 <__sflush_r+0xfc>
 8011a50:	89a2      	ldrh	r2, [r4, #12]
 8011a52:	2340      	movs	r3, #64	@ 0x40
 8011a54:	2001      	movs	r0, #1
 8011a56:	4313      	orrs	r3, r2
 8011a58:	b21b      	sxth	r3, r3
 8011a5a:	81a3      	strh	r3, [r4, #12]
 8011a5c:	4240      	negs	r0, r0
 8011a5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011a60:	9b01      	ldr	r3, [sp, #4]
 8011a62:	1836      	adds	r6, r6, r0
 8011a64:	1a1b      	subs	r3, r3, r0
 8011a66:	9301      	str	r3, [sp, #4]
 8011a68:	e7e6      	b.n	8011a38 <__sflush_r+0xd4>
 8011a6a:	46c0      	nop			@ (mov r8, r8)
 8011a6c:	20400001 	.word	0x20400001

08011a70 <_fflush_r>:
 8011a70:	690b      	ldr	r3, [r1, #16]
 8011a72:	b570      	push	{r4, r5, r6, lr}
 8011a74:	0005      	movs	r5, r0
 8011a76:	000c      	movs	r4, r1
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d102      	bne.n	8011a82 <_fflush_r+0x12>
 8011a7c:	2500      	movs	r5, #0
 8011a7e:	0028      	movs	r0, r5
 8011a80:	bd70      	pop	{r4, r5, r6, pc}
 8011a82:	2800      	cmp	r0, #0
 8011a84:	d004      	beq.n	8011a90 <_fflush_r+0x20>
 8011a86:	6a03      	ldr	r3, [r0, #32]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d101      	bne.n	8011a90 <_fflush_r+0x20>
 8011a8c:	f7fe f9b2 	bl	800fdf4 <__sinit>
 8011a90:	220c      	movs	r2, #12
 8011a92:	5ea3      	ldrsh	r3, [r4, r2]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d0f1      	beq.n	8011a7c <_fflush_r+0xc>
 8011a98:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011a9a:	07d2      	lsls	r2, r2, #31
 8011a9c:	d404      	bmi.n	8011aa8 <_fflush_r+0x38>
 8011a9e:	059b      	lsls	r3, r3, #22
 8011aa0:	d402      	bmi.n	8011aa8 <_fflush_r+0x38>
 8011aa2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011aa4:	f7fe fadb 	bl	801005e <__retarget_lock_acquire_recursive>
 8011aa8:	0028      	movs	r0, r5
 8011aaa:	0021      	movs	r1, r4
 8011aac:	f7ff ff5a 	bl	8011964 <__sflush_r>
 8011ab0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011ab2:	0005      	movs	r5, r0
 8011ab4:	07db      	lsls	r3, r3, #31
 8011ab6:	d4e2      	bmi.n	8011a7e <_fflush_r+0xe>
 8011ab8:	89a3      	ldrh	r3, [r4, #12]
 8011aba:	059b      	lsls	r3, r3, #22
 8011abc:	d4df      	bmi.n	8011a7e <_fflush_r+0xe>
 8011abe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ac0:	f7fe face 	bl	8010060 <__retarget_lock_release_recursive>
 8011ac4:	e7db      	b.n	8011a7e <_fflush_r+0xe>

08011ac6 <memmove>:
 8011ac6:	b510      	push	{r4, lr}
 8011ac8:	4288      	cmp	r0, r1
 8011aca:	d902      	bls.n	8011ad2 <memmove+0xc>
 8011acc:	188b      	adds	r3, r1, r2
 8011ace:	4298      	cmp	r0, r3
 8011ad0:	d308      	bcc.n	8011ae4 <memmove+0x1e>
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	429a      	cmp	r2, r3
 8011ad6:	d007      	beq.n	8011ae8 <memmove+0x22>
 8011ad8:	5ccc      	ldrb	r4, [r1, r3]
 8011ada:	54c4      	strb	r4, [r0, r3]
 8011adc:	3301      	adds	r3, #1
 8011ade:	e7f9      	b.n	8011ad4 <memmove+0xe>
 8011ae0:	5c8b      	ldrb	r3, [r1, r2]
 8011ae2:	5483      	strb	r3, [r0, r2]
 8011ae4:	3a01      	subs	r2, #1
 8011ae6:	d2fb      	bcs.n	8011ae0 <memmove+0x1a>
 8011ae8:	bd10      	pop	{r4, pc}
	...

08011aec <_sbrk_r>:
 8011aec:	2300      	movs	r3, #0
 8011aee:	b570      	push	{r4, r5, r6, lr}
 8011af0:	4d06      	ldr	r5, [pc, #24]	@ (8011b0c <_sbrk_r+0x20>)
 8011af2:	0004      	movs	r4, r0
 8011af4:	0008      	movs	r0, r1
 8011af6:	602b      	str	r3, [r5, #0]
 8011af8:	f7f1 fd9e 	bl	8003638 <_sbrk>
 8011afc:	1c43      	adds	r3, r0, #1
 8011afe:	d103      	bne.n	8011b08 <_sbrk_r+0x1c>
 8011b00:	682b      	ldr	r3, [r5, #0]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d000      	beq.n	8011b08 <_sbrk_r+0x1c>
 8011b06:	6023      	str	r3, [r4, #0]
 8011b08:	bd70      	pop	{r4, r5, r6, pc}
 8011b0a:	46c0      	nop			@ (mov r8, r8)
 8011b0c:	20001dbc 	.word	0x20001dbc

08011b10 <memcpy>:
 8011b10:	2300      	movs	r3, #0
 8011b12:	b510      	push	{r4, lr}
 8011b14:	429a      	cmp	r2, r3
 8011b16:	d100      	bne.n	8011b1a <memcpy+0xa>
 8011b18:	bd10      	pop	{r4, pc}
 8011b1a:	5ccc      	ldrb	r4, [r1, r3]
 8011b1c:	54c4      	strb	r4, [r0, r3]
 8011b1e:	3301      	adds	r3, #1
 8011b20:	e7f8      	b.n	8011b14 <memcpy+0x4>
	...

08011b24 <__assert_func>:
 8011b24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011b26:	0014      	movs	r4, r2
 8011b28:	001a      	movs	r2, r3
 8011b2a:	4b09      	ldr	r3, [pc, #36]	@ (8011b50 <__assert_func+0x2c>)
 8011b2c:	0005      	movs	r5, r0
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	000e      	movs	r6, r1
 8011b32:	68d8      	ldr	r0, [r3, #12]
 8011b34:	4b07      	ldr	r3, [pc, #28]	@ (8011b54 <__assert_func+0x30>)
 8011b36:	2c00      	cmp	r4, #0
 8011b38:	d101      	bne.n	8011b3e <__assert_func+0x1a>
 8011b3a:	4b07      	ldr	r3, [pc, #28]	@ (8011b58 <__assert_func+0x34>)
 8011b3c:	001c      	movs	r4, r3
 8011b3e:	4907      	ldr	r1, [pc, #28]	@ (8011b5c <__assert_func+0x38>)
 8011b40:	9301      	str	r3, [sp, #4]
 8011b42:	9402      	str	r4, [sp, #8]
 8011b44:	002b      	movs	r3, r5
 8011b46:	9600      	str	r6, [sp, #0]
 8011b48:	f000 f886 	bl	8011c58 <fiprintf>
 8011b4c:	f000 f894 	bl	8011c78 <abort>
 8011b50:	200001ec 	.word	0x200001ec
 8011b54:	0801260b 	.word	0x0801260b
 8011b58:	08012646 	.word	0x08012646
 8011b5c:	08012618 	.word	0x08012618

08011b60 <_calloc_r>:
 8011b60:	b570      	push	{r4, r5, r6, lr}
 8011b62:	0c0b      	lsrs	r3, r1, #16
 8011b64:	0c15      	lsrs	r5, r2, #16
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d11e      	bne.n	8011ba8 <_calloc_r+0x48>
 8011b6a:	2d00      	cmp	r5, #0
 8011b6c:	d10c      	bne.n	8011b88 <_calloc_r+0x28>
 8011b6e:	b289      	uxth	r1, r1
 8011b70:	b294      	uxth	r4, r2
 8011b72:	434c      	muls	r4, r1
 8011b74:	0021      	movs	r1, r4
 8011b76:	f7ff f96b 	bl	8010e50 <_malloc_r>
 8011b7a:	1e05      	subs	r5, r0, #0
 8011b7c:	d01b      	beq.n	8011bb6 <_calloc_r+0x56>
 8011b7e:	0022      	movs	r2, r4
 8011b80:	2100      	movs	r1, #0
 8011b82:	f7fe f9e7 	bl	800ff54 <memset>
 8011b86:	e016      	b.n	8011bb6 <_calloc_r+0x56>
 8011b88:	1c2b      	adds	r3, r5, #0
 8011b8a:	1c0c      	adds	r4, r1, #0
 8011b8c:	b289      	uxth	r1, r1
 8011b8e:	b292      	uxth	r2, r2
 8011b90:	434a      	muls	r2, r1
 8011b92:	b29b      	uxth	r3, r3
 8011b94:	b2a1      	uxth	r1, r4
 8011b96:	4359      	muls	r1, r3
 8011b98:	0c14      	lsrs	r4, r2, #16
 8011b9a:	190c      	adds	r4, r1, r4
 8011b9c:	0c23      	lsrs	r3, r4, #16
 8011b9e:	d107      	bne.n	8011bb0 <_calloc_r+0x50>
 8011ba0:	0424      	lsls	r4, r4, #16
 8011ba2:	b292      	uxth	r2, r2
 8011ba4:	4314      	orrs	r4, r2
 8011ba6:	e7e5      	b.n	8011b74 <_calloc_r+0x14>
 8011ba8:	2d00      	cmp	r5, #0
 8011baa:	d101      	bne.n	8011bb0 <_calloc_r+0x50>
 8011bac:	1c14      	adds	r4, r2, #0
 8011bae:	e7ed      	b.n	8011b8c <_calloc_r+0x2c>
 8011bb0:	230c      	movs	r3, #12
 8011bb2:	2500      	movs	r5, #0
 8011bb4:	6003      	str	r3, [r0, #0]
 8011bb6:	0028      	movs	r0, r5
 8011bb8:	bd70      	pop	{r4, r5, r6, pc}

08011bba <__ascii_mbtowc>:
 8011bba:	b082      	sub	sp, #8
 8011bbc:	2900      	cmp	r1, #0
 8011bbe:	d100      	bne.n	8011bc2 <__ascii_mbtowc+0x8>
 8011bc0:	a901      	add	r1, sp, #4
 8011bc2:	1e10      	subs	r0, r2, #0
 8011bc4:	d006      	beq.n	8011bd4 <__ascii_mbtowc+0x1a>
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d006      	beq.n	8011bd8 <__ascii_mbtowc+0x1e>
 8011bca:	7813      	ldrb	r3, [r2, #0]
 8011bcc:	600b      	str	r3, [r1, #0]
 8011bce:	7810      	ldrb	r0, [r2, #0]
 8011bd0:	1e43      	subs	r3, r0, #1
 8011bd2:	4198      	sbcs	r0, r3
 8011bd4:	b002      	add	sp, #8
 8011bd6:	4770      	bx	lr
 8011bd8:	2002      	movs	r0, #2
 8011bda:	4240      	negs	r0, r0
 8011bdc:	e7fa      	b.n	8011bd4 <__ascii_mbtowc+0x1a>

08011bde <_realloc_r>:
 8011bde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011be0:	0006      	movs	r6, r0
 8011be2:	000c      	movs	r4, r1
 8011be4:	0015      	movs	r5, r2
 8011be6:	2900      	cmp	r1, #0
 8011be8:	d105      	bne.n	8011bf6 <_realloc_r+0x18>
 8011bea:	0011      	movs	r1, r2
 8011bec:	f7ff f930 	bl	8010e50 <_malloc_r>
 8011bf0:	0004      	movs	r4, r0
 8011bf2:	0020      	movs	r0, r4
 8011bf4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011bf6:	2a00      	cmp	r2, #0
 8011bf8:	d103      	bne.n	8011c02 <_realloc_r+0x24>
 8011bfa:	f7ff f8b3 	bl	8010d64 <_free_r>
 8011bfe:	002c      	movs	r4, r5
 8011c00:	e7f7      	b.n	8011bf2 <_realloc_r+0x14>
 8011c02:	f000 f840 	bl	8011c86 <_malloc_usable_size_r>
 8011c06:	0007      	movs	r7, r0
 8011c08:	4285      	cmp	r5, r0
 8011c0a:	d802      	bhi.n	8011c12 <_realloc_r+0x34>
 8011c0c:	0843      	lsrs	r3, r0, #1
 8011c0e:	42ab      	cmp	r3, r5
 8011c10:	d3ef      	bcc.n	8011bf2 <_realloc_r+0x14>
 8011c12:	0029      	movs	r1, r5
 8011c14:	0030      	movs	r0, r6
 8011c16:	f7ff f91b 	bl	8010e50 <_malloc_r>
 8011c1a:	9001      	str	r0, [sp, #4]
 8011c1c:	2800      	cmp	r0, #0
 8011c1e:	d101      	bne.n	8011c24 <_realloc_r+0x46>
 8011c20:	9c01      	ldr	r4, [sp, #4]
 8011c22:	e7e6      	b.n	8011bf2 <_realloc_r+0x14>
 8011c24:	002a      	movs	r2, r5
 8011c26:	42bd      	cmp	r5, r7
 8011c28:	d900      	bls.n	8011c2c <_realloc_r+0x4e>
 8011c2a:	003a      	movs	r2, r7
 8011c2c:	0021      	movs	r1, r4
 8011c2e:	9801      	ldr	r0, [sp, #4]
 8011c30:	f7ff ff6e 	bl	8011b10 <memcpy>
 8011c34:	0021      	movs	r1, r4
 8011c36:	0030      	movs	r0, r6
 8011c38:	f7ff f894 	bl	8010d64 <_free_r>
 8011c3c:	e7f0      	b.n	8011c20 <_realloc_r+0x42>

08011c3e <__ascii_wctomb>:
 8011c3e:	0003      	movs	r3, r0
 8011c40:	1e08      	subs	r0, r1, #0
 8011c42:	d005      	beq.n	8011c50 <__ascii_wctomb+0x12>
 8011c44:	2aff      	cmp	r2, #255	@ 0xff
 8011c46:	d904      	bls.n	8011c52 <__ascii_wctomb+0x14>
 8011c48:	228a      	movs	r2, #138	@ 0x8a
 8011c4a:	2001      	movs	r0, #1
 8011c4c:	601a      	str	r2, [r3, #0]
 8011c4e:	4240      	negs	r0, r0
 8011c50:	4770      	bx	lr
 8011c52:	2001      	movs	r0, #1
 8011c54:	700a      	strb	r2, [r1, #0]
 8011c56:	e7fb      	b.n	8011c50 <__ascii_wctomb+0x12>

08011c58 <fiprintf>:
 8011c58:	b40e      	push	{r1, r2, r3}
 8011c5a:	b517      	push	{r0, r1, r2, r4, lr}
 8011c5c:	4c05      	ldr	r4, [pc, #20]	@ (8011c74 <fiprintf+0x1c>)
 8011c5e:	ab05      	add	r3, sp, #20
 8011c60:	cb04      	ldmia	r3!, {r2}
 8011c62:	0001      	movs	r1, r0
 8011c64:	6820      	ldr	r0, [r4, #0]
 8011c66:	9301      	str	r3, [sp, #4]
 8011c68:	f000 f83c 	bl	8011ce4 <_vfiprintf_r>
 8011c6c:	bc1e      	pop	{r1, r2, r3, r4}
 8011c6e:	bc08      	pop	{r3}
 8011c70:	b003      	add	sp, #12
 8011c72:	4718      	bx	r3
 8011c74:	200001ec 	.word	0x200001ec

08011c78 <abort>:
 8011c78:	2006      	movs	r0, #6
 8011c7a:	b510      	push	{r4, lr}
 8011c7c:	f000 fa18 	bl	80120b0 <raise>
 8011c80:	2001      	movs	r0, #1
 8011c82:	f7f1 fc67 	bl	8003554 <_exit>

08011c86 <_malloc_usable_size_r>:
 8011c86:	1f0b      	subs	r3, r1, #4
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	1f18      	subs	r0, r3, #4
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	da01      	bge.n	8011c94 <_malloc_usable_size_r+0xe>
 8011c90:	580b      	ldr	r3, [r1, r0]
 8011c92:	18c0      	adds	r0, r0, r3
 8011c94:	4770      	bx	lr

08011c96 <__sfputc_r>:
 8011c96:	6893      	ldr	r3, [r2, #8]
 8011c98:	b510      	push	{r4, lr}
 8011c9a:	3b01      	subs	r3, #1
 8011c9c:	6093      	str	r3, [r2, #8]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	da04      	bge.n	8011cac <__sfputc_r+0x16>
 8011ca2:	6994      	ldr	r4, [r2, #24]
 8011ca4:	42a3      	cmp	r3, r4
 8011ca6:	db07      	blt.n	8011cb8 <__sfputc_r+0x22>
 8011ca8:	290a      	cmp	r1, #10
 8011caa:	d005      	beq.n	8011cb8 <__sfputc_r+0x22>
 8011cac:	6813      	ldr	r3, [r2, #0]
 8011cae:	1c58      	adds	r0, r3, #1
 8011cb0:	6010      	str	r0, [r2, #0]
 8011cb2:	7019      	strb	r1, [r3, #0]
 8011cb4:	0008      	movs	r0, r1
 8011cb6:	bd10      	pop	{r4, pc}
 8011cb8:	f000 f930 	bl	8011f1c <__swbuf_r>
 8011cbc:	0001      	movs	r1, r0
 8011cbe:	e7f9      	b.n	8011cb4 <__sfputc_r+0x1e>

08011cc0 <__sfputs_r>:
 8011cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cc2:	0006      	movs	r6, r0
 8011cc4:	000f      	movs	r7, r1
 8011cc6:	0014      	movs	r4, r2
 8011cc8:	18d5      	adds	r5, r2, r3
 8011cca:	42ac      	cmp	r4, r5
 8011ccc:	d101      	bne.n	8011cd2 <__sfputs_r+0x12>
 8011cce:	2000      	movs	r0, #0
 8011cd0:	e007      	b.n	8011ce2 <__sfputs_r+0x22>
 8011cd2:	7821      	ldrb	r1, [r4, #0]
 8011cd4:	003a      	movs	r2, r7
 8011cd6:	0030      	movs	r0, r6
 8011cd8:	f7ff ffdd 	bl	8011c96 <__sfputc_r>
 8011cdc:	3401      	adds	r4, #1
 8011cde:	1c43      	adds	r3, r0, #1
 8011ce0:	d1f3      	bne.n	8011cca <__sfputs_r+0xa>
 8011ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011ce4 <_vfiprintf_r>:
 8011ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ce6:	b0a1      	sub	sp, #132	@ 0x84
 8011ce8:	000f      	movs	r7, r1
 8011cea:	0015      	movs	r5, r2
 8011cec:	001e      	movs	r6, r3
 8011cee:	9003      	str	r0, [sp, #12]
 8011cf0:	2800      	cmp	r0, #0
 8011cf2:	d004      	beq.n	8011cfe <_vfiprintf_r+0x1a>
 8011cf4:	6a03      	ldr	r3, [r0, #32]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d101      	bne.n	8011cfe <_vfiprintf_r+0x1a>
 8011cfa:	f7fe f87b 	bl	800fdf4 <__sinit>
 8011cfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011d00:	07db      	lsls	r3, r3, #31
 8011d02:	d405      	bmi.n	8011d10 <_vfiprintf_r+0x2c>
 8011d04:	89bb      	ldrh	r3, [r7, #12]
 8011d06:	059b      	lsls	r3, r3, #22
 8011d08:	d402      	bmi.n	8011d10 <_vfiprintf_r+0x2c>
 8011d0a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011d0c:	f7fe f9a7 	bl	801005e <__retarget_lock_acquire_recursive>
 8011d10:	89bb      	ldrh	r3, [r7, #12]
 8011d12:	071b      	lsls	r3, r3, #28
 8011d14:	d502      	bpl.n	8011d1c <_vfiprintf_r+0x38>
 8011d16:	693b      	ldr	r3, [r7, #16]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d113      	bne.n	8011d44 <_vfiprintf_r+0x60>
 8011d1c:	0039      	movs	r1, r7
 8011d1e:	9803      	ldr	r0, [sp, #12]
 8011d20:	f000 f93e 	bl	8011fa0 <__swsetup_r>
 8011d24:	2800      	cmp	r0, #0
 8011d26:	d00d      	beq.n	8011d44 <_vfiprintf_r+0x60>
 8011d28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011d2a:	07db      	lsls	r3, r3, #31
 8011d2c:	d503      	bpl.n	8011d36 <_vfiprintf_r+0x52>
 8011d2e:	2001      	movs	r0, #1
 8011d30:	4240      	negs	r0, r0
 8011d32:	b021      	add	sp, #132	@ 0x84
 8011d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d36:	89bb      	ldrh	r3, [r7, #12]
 8011d38:	059b      	lsls	r3, r3, #22
 8011d3a:	d4f8      	bmi.n	8011d2e <_vfiprintf_r+0x4a>
 8011d3c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011d3e:	f7fe f98f 	bl	8010060 <__retarget_lock_release_recursive>
 8011d42:	e7f4      	b.n	8011d2e <_vfiprintf_r+0x4a>
 8011d44:	2300      	movs	r3, #0
 8011d46:	ac08      	add	r4, sp, #32
 8011d48:	6163      	str	r3, [r4, #20]
 8011d4a:	3320      	adds	r3, #32
 8011d4c:	7663      	strb	r3, [r4, #25]
 8011d4e:	3310      	adds	r3, #16
 8011d50:	76a3      	strb	r3, [r4, #26]
 8011d52:	9607      	str	r6, [sp, #28]
 8011d54:	002e      	movs	r6, r5
 8011d56:	7833      	ldrb	r3, [r6, #0]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d001      	beq.n	8011d60 <_vfiprintf_r+0x7c>
 8011d5c:	2b25      	cmp	r3, #37	@ 0x25
 8011d5e:	d148      	bne.n	8011df2 <_vfiprintf_r+0x10e>
 8011d60:	1b73      	subs	r3, r6, r5
 8011d62:	9305      	str	r3, [sp, #20]
 8011d64:	42ae      	cmp	r6, r5
 8011d66:	d00b      	beq.n	8011d80 <_vfiprintf_r+0x9c>
 8011d68:	002a      	movs	r2, r5
 8011d6a:	0039      	movs	r1, r7
 8011d6c:	9803      	ldr	r0, [sp, #12]
 8011d6e:	f7ff ffa7 	bl	8011cc0 <__sfputs_r>
 8011d72:	3001      	adds	r0, #1
 8011d74:	d100      	bne.n	8011d78 <_vfiprintf_r+0x94>
 8011d76:	e0ae      	b.n	8011ed6 <_vfiprintf_r+0x1f2>
 8011d78:	6963      	ldr	r3, [r4, #20]
 8011d7a:	9a05      	ldr	r2, [sp, #20]
 8011d7c:	189b      	adds	r3, r3, r2
 8011d7e:	6163      	str	r3, [r4, #20]
 8011d80:	7833      	ldrb	r3, [r6, #0]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d100      	bne.n	8011d88 <_vfiprintf_r+0xa4>
 8011d86:	e0a6      	b.n	8011ed6 <_vfiprintf_r+0x1f2>
 8011d88:	2201      	movs	r2, #1
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	4252      	negs	r2, r2
 8011d8e:	6062      	str	r2, [r4, #4]
 8011d90:	a904      	add	r1, sp, #16
 8011d92:	3254      	adds	r2, #84	@ 0x54
 8011d94:	1852      	adds	r2, r2, r1
 8011d96:	1c75      	adds	r5, r6, #1
 8011d98:	6023      	str	r3, [r4, #0]
 8011d9a:	60e3      	str	r3, [r4, #12]
 8011d9c:	60a3      	str	r3, [r4, #8]
 8011d9e:	7013      	strb	r3, [r2, #0]
 8011da0:	65a3      	str	r3, [r4, #88]	@ 0x58
 8011da2:	4b59      	ldr	r3, [pc, #356]	@ (8011f08 <_vfiprintf_r+0x224>)
 8011da4:	2205      	movs	r2, #5
 8011da6:	0018      	movs	r0, r3
 8011da8:	7829      	ldrb	r1, [r5, #0]
 8011daa:	9305      	str	r3, [sp, #20]
 8011dac:	f7fe f959 	bl	8010062 <memchr>
 8011db0:	1c6e      	adds	r6, r5, #1
 8011db2:	2800      	cmp	r0, #0
 8011db4:	d11f      	bne.n	8011df6 <_vfiprintf_r+0x112>
 8011db6:	6822      	ldr	r2, [r4, #0]
 8011db8:	06d3      	lsls	r3, r2, #27
 8011dba:	d504      	bpl.n	8011dc6 <_vfiprintf_r+0xe2>
 8011dbc:	2353      	movs	r3, #83	@ 0x53
 8011dbe:	a904      	add	r1, sp, #16
 8011dc0:	185b      	adds	r3, r3, r1
 8011dc2:	2120      	movs	r1, #32
 8011dc4:	7019      	strb	r1, [r3, #0]
 8011dc6:	0713      	lsls	r3, r2, #28
 8011dc8:	d504      	bpl.n	8011dd4 <_vfiprintf_r+0xf0>
 8011dca:	2353      	movs	r3, #83	@ 0x53
 8011dcc:	a904      	add	r1, sp, #16
 8011dce:	185b      	adds	r3, r3, r1
 8011dd0:	212b      	movs	r1, #43	@ 0x2b
 8011dd2:	7019      	strb	r1, [r3, #0]
 8011dd4:	782b      	ldrb	r3, [r5, #0]
 8011dd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8011dd8:	d016      	beq.n	8011e08 <_vfiprintf_r+0x124>
 8011dda:	002e      	movs	r6, r5
 8011ddc:	2100      	movs	r1, #0
 8011dde:	200a      	movs	r0, #10
 8011de0:	68e3      	ldr	r3, [r4, #12]
 8011de2:	7832      	ldrb	r2, [r6, #0]
 8011de4:	1c75      	adds	r5, r6, #1
 8011de6:	3a30      	subs	r2, #48	@ 0x30
 8011de8:	2a09      	cmp	r2, #9
 8011dea:	d950      	bls.n	8011e8e <_vfiprintf_r+0x1aa>
 8011dec:	2900      	cmp	r1, #0
 8011dee:	d111      	bne.n	8011e14 <_vfiprintf_r+0x130>
 8011df0:	e017      	b.n	8011e22 <_vfiprintf_r+0x13e>
 8011df2:	3601      	adds	r6, #1
 8011df4:	e7af      	b.n	8011d56 <_vfiprintf_r+0x72>
 8011df6:	9b05      	ldr	r3, [sp, #20]
 8011df8:	6822      	ldr	r2, [r4, #0]
 8011dfa:	1ac0      	subs	r0, r0, r3
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	4083      	lsls	r3, r0
 8011e00:	4313      	orrs	r3, r2
 8011e02:	0035      	movs	r5, r6
 8011e04:	6023      	str	r3, [r4, #0]
 8011e06:	e7cc      	b.n	8011da2 <_vfiprintf_r+0xbe>
 8011e08:	9b07      	ldr	r3, [sp, #28]
 8011e0a:	1d19      	adds	r1, r3, #4
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	9107      	str	r1, [sp, #28]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	db01      	blt.n	8011e18 <_vfiprintf_r+0x134>
 8011e14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011e16:	e004      	b.n	8011e22 <_vfiprintf_r+0x13e>
 8011e18:	425b      	negs	r3, r3
 8011e1a:	60e3      	str	r3, [r4, #12]
 8011e1c:	2302      	movs	r3, #2
 8011e1e:	4313      	orrs	r3, r2
 8011e20:	6023      	str	r3, [r4, #0]
 8011e22:	7833      	ldrb	r3, [r6, #0]
 8011e24:	2b2e      	cmp	r3, #46	@ 0x2e
 8011e26:	d10c      	bne.n	8011e42 <_vfiprintf_r+0x15e>
 8011e28:	7873      	ldrb	r3, [r6, #1]
 8011e2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e2c:	d134      	bne.n	8011e98 <_vfiprintf_r+0x1b4>
 8011e2e:	9b07      	ldr	r3, [sp, #28]
 8011e30:	3602      	adds	r6, #2
 8011e32:	1d1a      	adds	r2, r3, #4
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	9207      	str	r2, [sp, #28]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	da01      	bge.n	8011e40 <_vfiprintf_r+0x15c>
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	425b      	negs	r3, r3
 8011e40:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e42:	4d32      	ldr	r5, [pc, #200]	@ (8011f0c <_vfiprintf_r+0x228>)
 8011e44:	2203      	movs	r2, #3
 8011e46:	0028      	movs	r0, r5
 8011e48:	7831      	ldrb	r1, [r6, #0]
 8011e4a:	f7fe f90a 	bl	8010062 <memchr>
 8011e4e:	2800      	cmp	r0, #0
 8011e50:	d006      	beq.n	8011e60 <_vfiprintf_r+0x17c>
 8011e52:	2340      	movs	r3, #64	@ 0x40
 8011e54:	1b40      	subs	r0, r0, r5
 8011e56:	4083      	lsls	r3, r0
 8011e58:	6822      	ldr	r2, [r4, #0]
 8011e5a:	3601      	adds	r6, #1
 8011e5c:	4313      	orrs	r3, r2
 8011e5e:	6023      	str	r3, [r4, #0]
 8011e60:	7831      	ldrb	r1, [r6, #0]
 8011e62:	2206      	movs	r2, #6
 8011e64:	482a      	ldr	r0, [pc, #168]	@ (8011f10 <_vfiprintf_r+0x22c>)
 8011e66:	1c75      	adds	r5, r6, #1
 8011e68:	7621      	strb	r1, [r4, #24]
 8011e6a:	f7fe f8fa 	bl	8010062 <memchr>
 8011e6e:	2800      	cmp	r0, #0
 8011e70:	d040      	beq.n	8011ef4 <_vfiprintf_r+0x210>
 8011e72:	4b28      	ldr	r3, [pc, #160]	@ (8011f14 <_vfiprintf_r+0x230>)
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d122      	bne.n	8011ebe <_vfiprintf_r+0x1da>
 8011e78:	2207      	movs	r2, #7
 8011e7a:	9b07      	ldr	r3, [sp, #28]
 8011e7c:	3307      	adds	r3, #7
 8011e7e:	4393      	bics	r3, r2
 8011e80:	3308      	adds	r3, #8
 8011e82:	9307      	str	r3, [sp, #28]
 8011e84:	6963      	ldr	r3, [r4, #20]
 8011e86:	9a04      	ldr	r2, [sp, #16]
 8011e88:	189b      	adds	r3, r3, r2
 8011e8a:	6163      	str	r3, [r4, #20]
 8011e8c:	e762      	b.n	8011d54 <_vfiprintf_r+0x70>
 8011e8e:	4343      	muls	r3, r0
 8011e90:	002e      	movs	r6, r5
 8011e92:	2101      	movs	r1, #1
 8011e94:	189b      	adds	r3, r3, r2
 8011e96:	e7a4      	b.n	8011de2 <_vfiprintf_r+0xfe>
 8011e98:	2300      	movs	r3, #0
 8011e9a:	200a      	movs	r0, #10
 8011e9c:	0019      	movs	r1, r3
 8011e9e:	3601      	adds	r6, #1
 8011ea0:	6063      	str	r3, [r4, #4]
 8011ea2:	7832      	ldrb	r2, [r6, #0]
 8011ea4:	1c75      	adds	r5, r6, #1
 8011ea6:	3a30      	subs	r2, #48	@ 0x30
 8011ea8:	2a09      	cmp	r2, #9
 8011eaa:	d903      	bls.n	8011eb4 <_vfiprintf_r+0x1d0>
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d0c8      	beq.n	8011e42 <_vfiprintf_r+0x15e>
 8011eb0:	9109      	str	r1, [sp, #36]	@ 0x24
 8011eb2:	e7c6      	b.n	8011e42 <_vfiprintf_r+0x15e>
 8011eb4:	4341      	muls	r1, r0
 8011eb6:	002e      	movs	r6, r5
 8011eb8:	2301      	movs	r3, #1
 8011eba:	1889      	adds	r1, r1, r2
 8011ebc:	e7f1      	b.n	8011ea2 <_vfiprintf_r+0x1be>
 8011ebe:	aa07      	add	r2, sp, #28
 8011ec0:	9200      	str	r2, [sp, #0]
 8011ec2:	0021      	movs	r1, r4
 8011ec4:	003a      	movs	r2, r7
 8011ec6:	4b14      	ldr	r3, [pc, #80]	@ (8011f18 <_vfiprintf_r+0x234>)
 8011ec8:	9803      	ldr	r0, [sp, #12]
 8011eca:	f7fd fb49 	bl	800f560 <_printf_float>
 8011ece:	9004      	str	r0, [sp, #16]
 8011ed0:	9b04      	ldr	r3, [sp, #16]
 8011ed2:	3301      	adds	r3, #1
 8011ed4:	d1d6      	bne.n	8011e84 <_vfiprintf_r+0x1a0>
 8011ed6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011ed8:	07db      	lsls	r3, r3, #31
 8011eda:	d405      	bmi.n	8011ee8 <_vfiprintf_r+0x204>
 8011edc:	89bb      	ldrh	r3, [r7, #12]
 8011ede:	059b      	lsls	r3, r3, #22
 8011ee0:	d402      	bmi.n	8011ee8 <_vfiprintf_r+0x204>
 8011ee2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011ee4:	f7fe f8bc 	bl	8010060 <__retarget_lock_release_recursive>
 8011ee8:	89bb      	ldrh	r3, [r7, #12]
 8011eea:	065b      	lsls	r3, r3, #25
 8011eec:	d500      	bpl.n	8011ef0 <_vfiprintf_r+0x20c>
 8011eee:	e71e      	b.n	8011d2e <_vfiprintf_r+0x4a>
 8011ef0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8011ef2:	e71e      	b.n	8011d32 <_vfiprintf_r+0x4e>
 8011ef4:	aa07      	add	r2, sp, #28
 8011ef6:	9200      	str	r2, [sp, #0]
 8011ef8:	0021      	movs	r1, r4
 8011efa:	003a      	movs	r2, r7
 8011efc:	4b06      	ldr	r3, [pc, #24]	@ (8011f18 <_vfiprintf_r+0x234>)
 8011efe:	9803      	ldr	r0, [sp, #12]
 8011f00:	f7fd fddc 	bl	800fabc <_printf_i>
 8011f04:	e7e3      	b.n	8011ece <_vfiprintf_r+0x1ea>
 8011f06:	46c0      	nop			@ (mov r8, r8)
 8011f08:	080125f0 	.word	0x080125f0
 8011f0c:	080125f6 	.word	0x080125f6
 8011f10:	080125fa 	.word	0x080125fa
 8011f14:	0800f561 	.word	0x0800f561
 8011f18:	08011cc1 	.word	0x08011cc1

08011f1c <__swbuf_r>:
 8011f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f1e:	0006      	movs	r6, r0
 8011f20:	000d      	movs	r5, r1
 8011f22:	0014      	movs	r4, r2
 8011f24:	2800      	cmp	r0, #0
 8011f26:	d004      	beq.n	8011f32 <__swbuf_r+0x16>
 8011f28:	6a03      	ldr	r3, [r0, #32]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d101      	bne.n	8011f32 <__swbuf_r+0x16>
 8011f2e:	f7fd ff61 	bl	800fdf4 <__sinit>
 8011f32:	69a3      	ldr	r3, [r4, #24]
 8011f34:	60a3      	str	r3, [r4, #8]
 8011f36:	89a3      	ldrh	r3, [r4, #12]
 8011f38:	071b      	lsls	r3, r3, #28
 8011f3a:	d502      	bpl.n	8011f42 <__swbuf_r+0x26>
 8011f3c:	6923      	ldr	r3, [r4, #16]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d109      	bne.n	8011f56 <__swbuf_r+0x3a>
 8011f42:	0021      	movs	r1, r4
 8011f44:	0030      	movs	r0, r6
 8011f46:	f000 f82b 	bl	8011fa0 <__swsetup_r>
 8011f4a:	2800      	cmp	r0, #0
 8011f4c:	d003      	beq.n	8011f56 <__swbuf_r+0x3a>
 8011f4e:	2501      	movs	r5, #1
 8011f50:	426d      	negs	r5, r5
 8011f52:	0028      	movs	r0, r5
 8011f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f56:	6923      	ldr	r3, [r4, #16]
 8011f58:	6820      	ldr	r0, [r4, #0]
 8011f5a:	b2ef      	uxtb	r7, r5
 8011f5c:	1ac0      	subs	r0, r0, r3
 8011f5e:	6963      	ldr	r3, [r4, #20]
 8011f60:	b2ed      	uxtb	r5, r5
 8011f62:	4283      	cmp	r3, r0
 8011f64:	dc05      	bgt.n	8011f72 <__swbuf_r+0x56>
 8011f66:	0021      	movs	r1, r4
 8011f68:	0030      	movs	r0, r6
 8011f6a:	f7ff fd81 	bl	8011a70 <_fflush_r>
 8011f6e:	2800      	cmp	r0, #0
 8011f70:	d1ed      	bne.n	8011f4e <__swbuf_r+0x32>
 8011f72:	68a3      	ldr	r3, [r4, #8]
 8011f74:	3001      	adds	r0, #1
 8011f76:	3b01      	subs	r3, #1
 8011f78:	60a3      	str	r3, [r4, #8]
 8011f7a:	6823      	ldr	r3, [r4, #0]
 8011f7c:	1c5a      	adds	r2, r3, #1
 8011f7e:	6022      	str	r2, [r4, #0]
 8011f80:	701f      	strb	r7, [r3, #0]
 8011f82:	6963      	ldr	r3, [r4, #20]
 8011f84:	4283      	cmp	r3, r0
 8011f86:	d004      	beq.n	8011f92 <__swbuf_r+0x76>
 8011f88:	89a3      	ldrh	r3, [r4, #12]
 8011f8a:	07db      	lsls	r3, r3, #31
 8011f8c:	d5e1      	bpl.n	8011f52 <__swbuf_r+0x36>
 8011f8e:	2d0a      	cmp	r5, #10
 8011f90:	d1df      	bne.n	8011f52 <__swbuf_r+0x36>
 8011f92:	0021      	movs	r1, r4
 8011f94:	0030      	movs	r0, r6
 8011f96:	f7ff fd6b 	bl	8011a70 <_fflush_r>
 8011f9a:	2800      	cmp	r0, #0
 8011f9c:	d0d9      	beq.n	8011f52 <__swbuf_r+0x36>
 8011f9e:	e7d6      	b.n	8011f4e <__swbuf_r+0x32>

08011fa0 <__swsetup_r>:
 8011fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8012058 <__swsetup_r+0xb8>)
 8011fa2:	b570      	push	{r4, r5, r6, lr}
 8011fa4:	0005      	movs	r5, r0
 8011fa6:	6818      	ldr	r0, [r3, #0]
 8011fa8:	000c      	movs	r4, r1
 8011faa:	2800      	cmp	r0, #0
 8011fac:	d004      	beq.n	8011fb8 <__swsetup_r+0x18>
 8011fae:	6a03      	ldr	r3, [r0, #32]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d101      	bne.n	8011fb8 <__swsetup_r+0x18>
 8011fb4:	f7fd ff1e 	bl	800fdf4 <__sinit>
 8011fb8:	220c      	movs	r2, #12
 8011fba:	5ea3      	ldrsh	r3, [r4, r2]
 8011fbc:	071a      	lsls	r2, r3, #28
 8011fbe:	d423      	bmi.n	8012008 <__swsetup_r+0x68>
 8011fc0:	06da      	lsls	r2, r3, #27
 8011fc2:	d407      	bmi.n	8011fd4 <__swsetup_r+0x34>
 8011fc4:	2209      	movs	r2, #9
 8011fc6:	602a      	str	r2, [r5, #0]
 8011fc8:	2240      	movs	r2, #64	@ 0x40
 8011fca:	2001      	movs	r0, #1
 8011fcc:	4313      	orrs	r3, r2
 8011fce:	81a3      	strh	r3, [r4, #12]
 8011fd0:	4240      	negs	r0, r0
 8011fd2:	e03a      	b.n	801204a <__swsetup_r+0xaa>
 8011fd4:	075b      	lsls	r3, r3, #29
 8011fd6:	d513      	bpl.n	8012000 <__swsetup_r+0x60>
 8011fd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011fda:	2900      	cmp	r1, #0
 8011fdc:	d008      	beq.n	8011ff0 <__swsetup_r+0x50>
 8011fde:	0023      	movs	r3, r4
 8011fe0:	3344      	adds	r3, #68	@ 0x44
 8011fe2:	4299      	cmp	r1, r3
 8011fe4:	d002      	beq.n	8011fec <__swsetup_r+0x4c>
 8011fe6:	0028      	movs	r0, r5
 8011fe8:	f7fe febc 	bl	8010d64 <_free_r>
 8011fec:	2300      	movs	r3, #0
 8011fee:	6363      	str	r3, [r4, #52]	@ 0x34
 8011ff0:	2224      	movs	r2, #36	@ 0x24
 8011ff2:	89a3      	ldrh	r3, [r4, #12]
 8011ff4:	4393      	bics	r3, r2
 8011ff6:	81a3      	strh	r3, [r4, #12]
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	6063      	str	r3, [r4, #4]
 8011ffc:	6923      	ldr	r3, [r4, #16]
 8011ffe:	6023      	str	r3, [r4, #0]
 8012000:	2308      	movs	r3, #8
 8012002:	89a2      	ldrh	r2, [r4, #12]
 8012004:	4313      	orrs	r3, r2
 8012006:	81a3      	strh	r3, [r4, #12]
 8012008:	6923      	ldr	r3, [r4, #16]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d10b      	bne.n	8012026 <__swsetup_r+0x86>
 801200e:	21a0      	movs	r1, #160	@ 0xa0
 8012010:	2280      	movs	r2, #128	@ 0x80
 8012012:	89a3      	ldrh	r3, [r4, #12]
 8012014:	0089      	lsls	r1, r1, #2
 8012016:	0092      	lsls	r2, r2, #2
 8012018:	400b      	ands	r3, r1
 801201a:	4293      	cmp	r3, r2
 801201c:	d003      	beq.n	8012026 <__swsetup_r+0x86>
 801201e:	0021      	movs	r1, r4
 8012020:	0028      	movs	r0, r5
 8012022:	f000 f88f 	bl	8012144 <__smakebuf_r>
 8012026:	220c      	movs	r2, #12
 8012028:	5ea3      	ldrsh	r3, [r4, r2]
 801202a:	2101      	movs	r1, #1
 801202c:	001a      	movs	r2, r3
 801202e:	400a      	ands	r2, r1
 8012030:	420b      	tst	r3, r1
 8012032:	d00b      	beq.n	801204c <__swsetup_r+0xac>
 8012034:	2200      	movs	r2, #0
 8012036:	60a2      	str	r2, [r4, #8]
 8012038:	6962      	ldr	r2, [r4, #20]
 801203a:	4252      	negs	r2, r2
 801203c:	61a2      	str	r2, [r4, #24]
 801203e:	2000      	movs	r0, #0
 8012040:	6922      	ldr	r2, [r4, #16]
 8012042:	4282      	cmp	r2, r0
 8012044:	d101      	bne.n	801204a <__swsetup_r+0xaa>
 8012046:	061a      	lsls	r2, r3, #24
 8012048:	d4be      	bmi.n	8011fc8 <__swsetup_r+0x28>
 801204a:	bd70      	pop	{r4, r5, r6, pc}
 801204c:	0799      	lsls	r1, r3, #30
 801204e:	d400      	bmi.n	8012052 <__swsetup_r+0xb2>
 8012050:	6962      	ldr	r2, [r4, #20]
 8012052:	60a2      	str	r2, [r4, #8]
 8012054:	e7f3      	b.n	801203e <__swsetup_r+0x9e>
 8012056:	46c0      	nop			@ (mov r8, r8)
 8012058:	200001ec 	.word	0x200001ec

0801205c <_raise_r>:
 801205c:	b570      	push	{r4, r5, r6, lr}
 801205e:	0004      	movs	r4, r0
 8012060:	000d      	movs	r5, r1
 8012062:	291f      	cmp	r1, #31
 8012064:	d904      	bls.n	8012070 <_raise_r+0x14>
 8012066:	2316      	movs	r3, #22
 8012068:	6003      	str	r3, [r0, #0]
 801206a:	2001      	movs	r0, #1
 801206c:	4240      	negs	r0, r0
 801206e:	bd70      	pop	{r4, r5, r6, pc}
 8012070:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8012072:	2b00      	cmp	r3, #0
 8012074:	d004      	beq.n	8012080 <_raise_r+0x24>
 8012076:	008a      	lsls	r2, r1, #2
 8012078:	189b      	adds	r3, r3, r2
 801207a:	681a      	ldr	r2, [r3, #0]
 801207c:	2a00      	cmp	r2, #0
 801207e:	d108      	bne.n	8012092 <_raise_r+0x36>
 8012080:	0020      	movs	r0, r4
 8012082:	f000 f831 	bl	80120e8 <_getpid_r>
 8012086:	002a      	movs	r2, r5
 8012088:	0001      	movs	r1, r0
 801208a:	0020      	movs	r0, r4
 801208c:	f000 f81a 	bl	80120c4 <_kill_r>
 8012090:	e7ed      	b.n	801206e <_raise_r+0x12>
 8012092:	2a01      	cmp	r2, #1
 8012094:	d009      	beq.n	80120aa <_raise_r+0x4e>
 8012096:	1c51      	adds	r1, r2, #1
 8012098:	d103      	bne.n	80120a2 <_raise_r+0x46>
 801209a:	2316      	movs	r3, #22
 801209c:	6003      	str	r3, [r0, #0]
 801209e:	2001      	movs	r0, #1
 80120a0:	e7e5      	b.n	801206e <_raise_r+0x12>
 80120a2:	2100      	movs	r1, #0
 80120a4:	0028      	movs	r0, r5
 80120a6:	6019      	str	r1, [r3, #0]
 80120a8:	4790      	blx	r2
 80120aa:	2000      	movs	r0, #0
 80120ac:	e7df      	b.n	801206e <_raise_r+0x12>
	...

080120b0 <raise>:
 80120b0:	b510      	push	{r4, lr}
 80120b2:	4b03      	ldr	r3, [pc, #12]	@ (80120c0 <raise+0x10>)
 80120b4:	0001      	movs	r1, r0
 80120b6:	6818      	ldr	r0, [r3, #0]
 80120b8:	f7ff ffd0 	bl	801205c <_raise_r>
 80120bc:	bd10      	pop	{r4, pc}
 80120be:	46c0      	nop			@ (mov r8, r8)
 80120c0:	200001ec 	.word	0x200001ec

080120c4 <_kill_r>:
 80120c4:	2300      	movs	r3, #0
 80120c6:	b570      	push	{r4, r5, r6, lr}
 80120c8:	4d06      	ldr	r5, [pc, #24]	@ (80120e4 <_kill_r+0x20>)
 80120ca:	0004      	movs	r4, r0
 80120cc:	0008      	movs	r0, r1
 80120ce:	0011      	movs	r1, r2
 80120d0:	602b      	str	r3, [r5, #0]
 80120d2:	f7f1 fa2f 	bl	8003534 <_kill>
 80120d6:	1c43      	adds	r3, r0, #1
 80120d8:	d103      	bne.n	80120e2 <_kill_r+0x1e>
 80120da:	682b      	ldr	r3, [r5, #0]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d000      	beq.n	80120e2 <_kill_r+0x1e>
 80120e0:	6023      	str	r3, [r4, #0]
 80120e2:	bd70      	pop	{r4, r5, r6, pc}
 80120e4:	20001dbc 	.word	0x20001dbc

080120e8 <_getpid_r>:
 80120e8:	b510      	push	{r4, lr}
 80120ea:	f7f1 fa1d 	bl	8003528 <_getpid>
 80120ee:	bd10      	pop	{r4, pc}

080120f0 <__swhatbuf_r>:
 80120f0:	b570      	push	{r4, r5, r6, lr}
 80120f2:	000e      	movs	r6, r1
 80120f4:	001d      	movs	r5, r3
 80120f6:	230e      	movs	r3, #14
 80120f8:	5ec9      	ldrsh	r1, [r1, r3]
 80120fa:	0014      	movs	r4, r2
 80120fc:	b096      	sub	sp, #88	@ 0x58
 80120fe:	2900      	cmp	r1, #0
 8012100:	da0c      	bge.n	801211c <__swhatbuf_r+0x2c>
 8012102:	89b2      	ldrh	r2, [r6, #12]
 8012104:	2380      	movs	r3, #128	@ 0x80
 8012106:	0011      	movs	r1, r2
 8012108:	4019      	ands	r1, r3
 801210a:	421a      	tst	r2, r3
 801210c:	d114      	bne.n	8012138 <__swhatbuf_r+0x48>
 801210e:	2380      	movs	r3, #128	@ 0x80
 8012110:	00db      	lsls	r3, r3, #3
 8012112:	2000      	movs	r0, #0
 8012114:	6029      	str	r1, [r5, #0]
 8012116:	6023      	str	r3, [r4, #0]
 8012118:	b016      	add	sp, #88	@ 0x58
 801211a:	bd70      	pop	{r4, r5, r6, pc}
 801211c:	466a      	mov	r2, sp
 801211e:	f000 f853 	bl	80121c8 <_fstat_r>
 8012122:	2800      	cmp	r0, #0
 8012124:	dbed      	blt.n	8012102 <__swhatbuf_r+0x12>
 8012126:	23f0      	movs	r3, #240	@ 0xf0
 8012128:	9901      	ldr	r1, [sp, #4]
 801212a:	021b      	lsls	r3, r3, #8
 801212c:	4019      	ands	r1, r3
 801212e:	4b04      	ldr	r3, [pc, #16]	@ (8012140 <__swhatbuf_r+0x50>)
 8012130:	18c9      	adds	r1, r1, r3
 8012132:	424b      	negs	r3, r1
 8012134:	4159      	adcs	r1, r3
 8012136:	e7ea      	b.n	801210e <__swhatbuf_r+0x1e>
 8012138:	2100      	movs	r1, #0
 801213a:	2340      	movs	r3, #64	@ 0x40
 801213c:	e7e9      	b.n	8012112 <__swhatbuf_r+0x22>
 801213e:	46c0      	nop			@ (mov r8, r8)
 8012140:	ffffe000 	.word	0xffffe000

08012144 <__smakebuf_r>:
 8012144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012146:	2602      	movs	r6, #2
 8012148:	898b      	ldrh	r3, [r1, #12]
 801214a:	0005      	movs	r5, r0
 801214c:	000c      	movs	r4, r1
 801214e:	b085      	sub	sp, #20
 8012150:	4233      	tst	r3, r6
 8012152:	d007      	beq.n	8012164 <__smakebuf_r+0x20>
 8012154:	0023      	movs	r3, r4
 8012156:	3347      	adds	r3, #71	@ 0x47
 8012158:	6023      	str	r3, [r4, #0]
 801215a:	6123      	str	r3, [r4, #16]
 801215c:	2301      	movs	r3, #1
 801215e:	6163      	str	r3, [r4, #20]
 8012160:	b005      	add	sp, #20
 8012162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012164:	ab03      	add	r3, sp, #12
 8012166:	aa02      	add	r2, sp, #8
 8012168:	f7ff ffc2 	bl	80120f0 <__swhatbuf_r>
 801216c:	9f02      	ldr	r7, [sp, #8]
 801216e:	9001      	str	r0, [sp, #4]
 8012170:	0039      	movs	r1, r7
 8012172:	0028      	movs	r0, r5
 8012174:	f7fe fe6c 	bl	8010e50 <_malloc_r>
 8012178:	2800      	cmp	r0, #0
 801217a:	d108      	bne.n	801218e <__smakebuf_r+0x4a>
 801217c:	220c      	movs	r2, #12
 801217e:	5ea3      	ldrsh	r3, [r4, r2]
 8012180:	059a      	lsls	r2, r3, #22
 8012182:	d4ed      	bmi.n	8012160 <__smakebuf_r+0x1c>
 8012184:	2203      	movs	r2, #3
 8012186:	4393      	bics	r3, r2
 8012188:	431e      	orrs	r6, r3
 801218a:	81a6      	strh	r6, [r4, #12]
 801218c:	e7e2      	b.n	8012154 <__smakebuf_r+0x10>
 801218e:	2380      	movs	r3, #128	@ 0x80
 8012190:	89a2      	ldrh	r2, [r4, #12]
 8012192:	6020      	str	r0, [r4, #0]
 8012194:	4313      	orrs	r3, r2
 8012196:	81a3      	strh	r3, [r4, #12]
 8012198:	9b03      	ldr	r3, [sp, #12]
 801219a:	6120      	str	r0, [r4, #16]
 801219c:	6167      	str	r7, [r4, #20]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d00c      	beq.n	80121bc <__smakebuf_r+0x78>
 80121a2:	0028      	movs	r0, r5
 80121a4:	230e      	movs	r3, #14
 80121a6:	5ee1      	ldrsh	r1, [r4, r3]
 80121a8:	f000 f820 	bl	80121ec <_isatty_r>
 80121ac:	2800      	cmp	r0, #0
 80121ae:	d005      	beq.n	80121bc <__smakebuf_r+0x78>
 80121b0:	2303      	movs	r3, #3
 80121b2:	89a2      	ldrh	r2, [r4, #12]
 80121b4:	439a      	bics	r2, r3
 80121b6:	3b02      	subs	r3, #2
 80121b8:	4313      	orrs	r3, r2
 80121ba:	81a3      	strh	r3, [r4, #12]
 80121bc:	89a3      	ldrh	r3, [r4, #12]
 80121be:	9a01      	ldr	r2, [sp, #4]
 80121c0:	4313      	orrs	r3, r2
 80121c2:	81a3      	strh	r3, [r4, #12]
 80121c4:	e7cc      	b.n	8012160 <__smakebuf_r+0x1c>
	...

080121c8 <_fstat_r>:
 80121c8:	2300      	movs	r3, #0
 80121ca:	b570      	push	{r4, r5, r6, lr}
 80121cc:	4d06      	ldr	r5, [pc, #24]	@ (80121e8 <_fstat_r+0x20>)
 80121ce:	0004      	movs	r4, r0
 80121d0:	0008      	movs	r0, r1
 80121d2:	0011      	movs	r1, r2
 80121d4:	602b      	str	r3, [r5, #0]
 80121d6:	f7f1 fa0d 	bl	80035f4 <_fstat>
 80121da:	1c43      	adds	r3, r0, #1
 80121dc:	d103      	bne.n	80121e6 <_fstat_r+0x1e>
 80121de:	682b      	ldr	r3, [r5, #0]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d000      	beq.n	80121e6 <_fstat_r+0x1e>
 80121e4:	6023      	str	r3, [r4, #0]
 80121e6:	bd70      	pop	{r4, r5, r6, pc}
 80121e8:	20001dbc 	.word	0x20001dbc

080121ec <_isatty_r>:
 80121ec:	2300      	movs	r3, #0
 80121ee:	b570      	push	{r4, r5, r6, lr}
 80121f0:	4d06      	ldr	r5, [pc, #24]	@ (801220c <_isatty_r+0x20>)
 80121f2:	0004      	movs	r4, r0
 80121f4:	0008      	movs	r0, r1
 80121f6:	602b      	str	r3, [r5, #0]
 80121f8:	f7f1 fa0a 	bl	8003610 <_isatty>
 80121fc:	1c43      	adds	r3, r0, #1
 80121fe:	d103      	bne.n	8012208 <_isatty_r+0x1c>
 8012200:	682b      	ldr	r3, [r5, #0]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d000      	beq.n	8012208 <_isatty_r+0x1c>
 8012206:	6023      	str	r3, [r4, #0]
 8012208:	bd70      	pop	{r4, r5, r6, pc}
 801220a:	46c0      	nop			@ (mov r8, r8)
 801220c:	20001dbc 	.word	0x20001dbc

08012210 <_init>:
 8012210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012212:	46c0      	nop			@ (mov r8, r8)
 8012214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012216:	bc08      	pop	{r3}
 8012218:	469e      	mov	lr, r3
 801221a:	4770      	bx	lr

0801221c <_fini>:
 801221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801221e:	46c0      	nop			@ (mov r8, r8)
 8012220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012222:	bc08      	pop	{r3}
 8012224:	469e      	mov	lr, r3
 8012226:	4770      	bx	lr
