
NEAR_ANCHOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fce8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  0800fda8  0800fda8  00010da8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080103d8  080103d8  0001235c  2**0
                  CONTENTS
  4 .ARM          00000000  080103d8  080103d8  0001235c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080103d8  080103d8  0001235c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080103d8  080103d8  000113d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080103dc  080103dc  000113dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000035c  20000000  080103e0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000198c  2000035c  0801073c  0001235c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ce8  0801073c  00012ce8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001235c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b8c4  00000000  00000000  00012384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000442d  00000000  00000000  0002dc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001790  00000000  00000000  00032078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001234  00000000  00000000  00033808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000064e4  00000000  00000000  00034a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f5d5  00000000  00000000  0003af20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a64cf  00000000  00000000  0005a4f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001009c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065a0  00000000  00000000  00100a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00106fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000035c 	.word	0x2000035c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800fd90 	.word	0x0800fd90

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000360 	.word	0x20000360
 8000104:	0800fd90 	.word	0x0800fd90

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff69 	bl	8001314 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fea9 	bl	80011a4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff5b 	bl	8001314 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff51 	bl	8001314 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fed3 	bl	800122c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fec9 	bl	800122c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	b5e0      	push	{r5, r6, r7, lr}
 80004b4:	b083      	sub	sp, #12
 80004b6:	9000      	str	r0, [sp, #0]
 80004b8:	9101      	str	r1, [sp, #4]
 80004ba:	030c      	lsls	r4, r1, #12
 80004bc:	004f      	lsls	r7, r1, #1
 80004be:	0fce      	lsrs	r6, r1, #31
 80004c0:	0a61      	lsrs	r1, r4, #9
 80004c2:	9c00      	ldr	r4, [sp, #0]
 80004c4:	031d      	lsls	r5, r3, #12
 80004c6:	0f64      	lsrs	r4, r4, #29
 80004c8:	430c      	orrs	r4, r1
 80004ca:	9900      	ldr	r1, [sp, #0]
 80004cc:	9200      	str	r2, [sp, #0]
 80004ce:	9301      	str	r3, [sp, #4]
 80004d0:	00c8      	lsls	r0, r1, #3
 80004d2:	0059      	lsls	r1, r3, #1
 80004d4:	0d4b      	lsrs	r3, r1, #21
 80004d6:	4699      	mov	r9, r3
 80004d8:	9a00      	ldr	r2, [sp, #0]
 80004da:	9b01      	ldr	r3, [sp, #4]
 80004dc:	0a6d      	lsrs	r5, r5, #9
 80004de:	0fd9      	lsrs	r1, r3, #31
 80004e0:	0f53      	lsrs	r3, r2, #29
 80004e2:	432b      	orrs	r3, r5
 80004e4:	469a      	mov	sl, r3
 80004e6:	9b00      	ldr	r3, [sp, #0]
 80004e8:	0d7f      	lsrs	r7, r7, #21
 80004ea:	00da      	lsls	r2, r3, #3
 80004ec:	4694      	mov	ip, r2
 80004ee:	464a      	mov	r2, r9
 80004f0:	46b0      	mov	r8, r6
 80004f2:	1aba      	subs	r2, r7, r2
 80004f4:	428e      	cmp	r6, r1
 80004f6:	d100      	bne.n	80004fa <__aeabi_dadd+0x52>
 80004f8:	e0b0      	b.n	800065c <__aeabi_dadd+0x1b4>
 80004fa:	2a00      	cmp	r2, #0
 80004fc:	dc00      	bgt.n	8000500 <__aeabi_dadd+0x58>
 80004fe:	e078      	b.n	80005f2 <__aeabi_dadd+0x14a>
 8000500:	4649      	mov	r1, r9
 8000502:	2900      	cmp	r1, #0
 8000504:	d100      	bne.n	8000508 <__aeabi_dadd+0x60>
 8000506:	e0e9      	b.n	80006dc <__aeabi_dadd+0x234>
 8000508:	49c9      	ldr	r1, [pc, #804]	@ (8000830 <__aeabi_dadd+0x388>)
 800050a:	428f      	cmp	r7, r1
 800050c:	d100      	bne.n	8000510 <__aeabi_dadd+0x68>
 800050e:	e195      	b.n	800083c <__aeabi_dadd+0x394>
 8000510:	2501      	movs	r5, #1
 8000512:	2a38      	cmp	r2, #56	@ 0x38
 8000514:	dc16      	bgt.n	8000544 <__aeabi_dadd+0x9c>
 8000516:	2180      	movs	r1, #128	@ 0x80
 8000518:	4653      	mov	r3, sl
 800051a:	0409      	lsls	r1, r1, #16
 800051c:	430b      	orrs	r3, r1
 800051e:	469a      	mov	sl, r3
 8000520:	2a1f      	cmp	r2, #31
 8000522:	dd00      	ble.n	8000526 <__aeabi_dadd+0x7e>
 8000524:	e1e7      	b.n	80008f6 <__aeabi_dadd+0x44e>
 8000526:	2120      	movs	r1, #32
 8000528:	4655      	mov	r5, sl
 800052a:	1a8b      	subs	r3, r1, r2
 800052c:	4661      	mov	r1, ip
 800052e:	409d      	lsls	r5, r3
 8000530:	40d1      	lsrs	r1, r2
 8000532:	430d      	orrs	r5, r1
 8000534:	4661      	mov	r1, ip
 8000536:	4099      	lsls	r1, r3
 8000538:	1e4b      	subs	r3, r1, #1
 800053a:	4199      	sbcs	r1, r3
 800053c:	4653      	mov	r3, sl
 800053e:	40d3      	lsrs	r3, r2
 8000540:	430d      	orrs	r5, r1
 8000542:	1ae4      	subs	r4, r4, r3
 8000544:	1b45      	subs	r5, r0, r5
 8000546:	42a8      	cmp	r0, r5
 8000548:	4180      	sbcs	r0, r0
 800054a:	4240      	negs	r0, r0
 800054c:	1a24      	subs	r4, r4, r0
 800054e:	0223      	lsls	r3, r4, #8
 8000550:	d400      	bmi.n	8000554 <__aeabi_dadd+0xac>
 8000552:	e10f      	b.n	8000774 <__aeabi_dadd+0x2cc>
 8000554:	0264      	lsls	r4, r4, #9
 8000556:	0a64      	lsrs	r4, r4, #9
 8000558:	2c00      	cmp	r4, #0
 800055a:	d100      	bne.n	800055e <__aeabi_dadd+0xb6>
 800055c:	e139      	b.n	80007d2 <__aeabi_dadd+0x32a>
 800055e:	0020      	movs	r0, r4
 8000560:	f001 fe5e 	bl	8002220 <__clzsi2>
 8000564:	0003      	movs	r3, r0
 8000566:	3b08      	subs	r3, #8
 8000568:	2120      	movs	r1, #32
 800056a:	0028      	movs	r0, r5
 800056c:	1aca      	subs	r2, r1, r3
 800056e:	40d0      	lsrs	r0, r2
 8000570:	409c      	lsls	r4, r3
 8000572:	0002      	movs	r2, r0
 8000574:	409d      	lsls	r5, r3
 8000576:	4322      	orrs	r2, r4
 8000578:	429f      	cmp	r7, r3
 800057a:	dd00      	ble.n	800057e <__aeabi_dadd+0xd6>
 800057c:	e173      	b.n	8000866 <__aeabi_dadd+0x3be>
 800057e:	1bd8      	subs	r0, r3, r7
 8000580:	3001      	adds	r0, #1
 8000582:	1a09      	subs	r1, r1, r0
 8000584:	002c      	movs	r4, r5
 8000586:	408d      	lsls	r5, r1
 8000588:	40c4      	lsrs	r4, r0
 800058a:	1e6b      	subs	r3, r5, #1
 800058c:	419d      	sbcs	r5, r3
 800058e:	0013      	movs	r3, r2
 8000590:	40c2      	lsrs	r2, r0
 8000592:	408b      	lsls	r3, r1
 8000594:	4325      	orrs	r5, r4
 8000596:	2700      	movs	r7, #0
 8000598:	0014      	movs	r4, r2
 800059a:	431d      	orrs	r5, r3
 800059c:	076b      	lsls	r3, r5, #29
 800059e:	d009      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a0:	230f      	movs	r3, #15
 80005a2:	402b      	ands	r3, r5
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d005      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a8:	1d2b      	adds	r3, r5, #4
 80005aa:	42ab      	cmp	r3, r5
 80005ac:	41ad      	sbcs	r5, r5
 80005ae:	426d      	negs	r5, r5
 80005b0:	1964      	adds	r4, r4, r5
 80005b2:	001d      	movs	r5, r3
 80005b4:	0223      	lsls	r3, r4, #8
 80005b6:	d400      	bmi.n	80005ba <__aeabi_dadd+0x112>
 80005b8:	e12d      	b.n	8000816 <__aeabi_dadd+0x36e>
 80005ba:	4a9d      	ldr	r2, [pc, #628]	@ (8000830 <__aeabi_dadd+0x388>)
 80005bc:	3701      	adds	r7, #1
 80005be:	4297      	cmp	r7, r2
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x11c>
 80005c2:	e0d3      	b.n	800076c <__aeabi_dadd+0x2c4>
 80005c4:	4646      	mov	r6, r8
 80005c6:	499b      	ldr	r1, [pc, #620]	@ (8000834 <__aeabi_dadd+0x38c>)
 80005c8:	08ed      	lsrs	r5, r5, #3
 80005ca:	4021      	ands	r1, r4
 80005cc:	074a      	lsls	r2, r1, #29
 80005ce:	432a      	orrs	r2, r5
 80005d0:	057c      	lsls	r4, r7, #21
 80005d2:	024d      	lsls	r5, r1, #9
 80005d4:	0b2d      	lsrs	r5, r5, #12
 80005d6:	0d64      	lsrs	r4, r4, #21
 80005d8:	0524      	lsls	r4, r4, #20
 80005da:	432c      	orrs	r4, r5
 80005dc:	07f6      	lsls	r6, r6, #31
 80005de:	4334      	orrs	r4, r6
 80005e0:	0010      	movs	r0, r2
 80005e2:	0021      	movs	r1, r4
 80005e4:	b003      	add	sp, #12
 80005e6:	bcf0      	pop	{r4, r5, r6, r7}
 80005e8:	46bb      	mov	fp, r7
 80005ea:	46b2      	mov	sl, r6
 80005ec:	46a9      	mov	r9, r5
 80005ee:	46a0      	mov	r8, r4
 80005f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f2:	2a00      	cmp	r2, #0
 80005f4:	d100      	bne.n	80005f8 <__aeabi_dadd+0x150>
 80005f6:	e084      	b.n	8000702 <__aeabi_dadd+0x25a>
 80005f8:	464a      	mov	r2, r9
 80005fa:	1bd2      	subs	r2, r2, r7
 80005fc:	2f00      	cmp	r7, #0
 80005fe:	d000      	beq.n	8000602 <__aeabi_dadd+0x15a>
 8000600:	e16d      	b.n	80008de <__aeabi_dadd+0x436>
 8000602:	0025      	movs	r5, r4
 8000604:	4305      	orrs	r5, r0
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x162>
 8000608:	e127      	b.n	800085a <__aeabi_dadd+0x3b2>
 800060a:	1e56      	subs	r6, r2, #1
 800060c:	2a01      	cmp	r2, #1
 800060e:	d100      	bne.n	8000612 <__aeabi_dadd+0x16a>
 8000610:	e23b      	b.n	8000a8a <__aeabi_dadd+0x5e2>
 8000612:	4d87      	ldr	r5, [pc, #540]	@ (8000830 <__aeabi_dadd+0x388>)
 8000614:	42aa      	cmp	r2, r5
 8000616:	d100      	bne.n	800061a <__aeabi_dadd+0x172>
 8000618:	e26a      	b.n	8000af0 <__aeabi_dadd+0x648>
 800061a:	2501      	movs	r5, #1
 800061c:	2e38      	cmp	r6, #56	@ 0x38
 800061e:	dc12      	bgt.n	8000646 <__aeabi_dadd+0x19e>
 8000620:	0032      	movs	r2, r6
 8000622:	2a1f      	cmp	r2, #31
 8000624:	dd00      	ble.n	8000628 <__aeabi_dadd+0x180>
 8000626:	e1f8      	b.n	8000a1a <__aeabi_dadd+0x572>
 8000628:	2620      	movs	r6, #32
 800062a:	0025      	movs	r5, r4
 800062c:	1ab6      	subs	r6, r6, r2
 800062e:	0007      	movs	r7, r0
 8000630:	4653      	mov	r3, sl
 8000632:	40b0      	lsls	r0, r6
 8000634:	40d4      	lsrs	r4, r2
 8000636:	40b5      	lsls	r5, r6
 8000638:	40d7      	lsrs	r7, r2
 800063a:	1e46      	subs	r6, r0, #1
 800063c:	41b0      	sbcs	r0, r6
 800063e:	1b1b      	subs	r3, r3, r4
 8000640:	469a      	mov	sl, r3
 8000642:	433d      	orrs	r5, r7
 8000644:	4305      	orrs	r5, r0
 8000646:	4662      	mov	r2, ip
 8000648:	1b55      	subs	r5, r2, r5
 800064a:	45ac      	cmp	ip, r5
 800064c:	4192      	sbcs	r2, r2
 800064e:	4653      	mov	r3, sl
 8000650:	4252      	negs	r2, r2
 8000652:	000e      	movs	r6, r1
 8000654:	464f      	mov	r7, r9
 8000656:	4688      	mov	r8, r1
 8000658:	1a9c      	subs	r4, r3, r2
 800065a:	e778      	b.n	800054e <__aeabi_dadd+0xa6>
 800065c:	2a00      	cmp	r2, #0
 800065e:	dc00      	bgt.n	8000662 <__aeabi_dadd+0x1ba>
 8000660:	e08e      	b.n	8000780 <__aeabi_dadd+0x2d8>
 8000662:	4649      	mov	r1, r9
 8000664:	2900      	cmp	r1, #0
 8000666:	d175      	bne.n	8000754 <__aeabi_dadd+0x2ac>
 8000668:	4661      	mov	r1, ip
 800066a:	4653      	mov	r3, sl
 800066c:	4319      	orrs	r1, r3
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x1ca>
 8000670:	e0f6      	b.n	8000860 <__aeabi_dadd+0x3b8>
 8000672:	1e51      	subs	r1, r2, #1
 8000674:	2a01      	cmp	r2, #1
 8000676:	d100      	bne.n	800067a <__aeabi_dadd+0x1d2>
 8000678:	e191      	b.n	800099e <__aeabi_dadd+0x4f6>
 800067a:	4d6d      	ldr	r5, [pc, #436]	@ (8000830 <__aeabi_dadd+0x388>)
 800067c:	42aa      	cmp	r2, r5
 800067e:	d100      	bne.n	8000682 <__aeabi_dadd+0x1da>
 8000680:	e0dc      	b.n	800083c <__aeabi_dadd+0x394>
 8000682:	2501      	movs	r5, #1
 8000684:	2938      	cmp	r1, #56	@ 0x38
 8000686:	dc14      	bgt.n	80006b2 <__aeabi_dadd+0x20a>
 8000688:	000a      	movs	r2, r1
 800068a:	2a1f      	cmp	r2, #31
 800068c:	dd00      	ble.n	8000690 <__aeabi_dadd+0x1e8>
 800068e:	e1a2      	b.n	80009d6 <__aeabi_dadd+0x52e>
 8000690:	2120      	movs	r1, #32
 8000692:	4653      	mov	r3, sl
 8000694:	1a89      	subs	r1, r1, r2
 8000696:	408b      	lsls	r3, r1
 8000698:	001d      	movs	r5, r3
 800069a:	4663      	mov	r3, ip
 800069c:	40d3      	lsrs	r3, r2
 800069e:	431d      	orrs	r5, r3
 80006a0:	4663      	mov	r3, ip
 80006a2:	408b      	lsls	r3, r1
 80006a4:	0019      	movs	r1, r3
 80006a6:	1e4b      	subs	r3, r1, #1
 80006a8:	4199      	sbcs	r1, r3
 80006aa:	4653      	mov	r3, sl
 80006ac:	40d3      	lsrs	r3, r2
 80006ae:	430d      	orrs	r5, r1
 80006b0:	18e4      	adds	r4, r4, r3
 80006b2:	182d      	adds	r5, r5, r0
 80006b4:	4285      	cmp	r5, r0
 80006b6:	4180      	sbcs	r0, r0
 80006b8:	4240      	negs	r0, r0
 80006ba:	1824      	adds	r4, r4, r0
 80006bc:	0223      	lsls	r3, r4, #8
 80006be:	d559      	bpl.n	8000774 <__aeabi_dadd+0x2cc>
 80006c0:	4b5b      	ldr	r3, [pc, #364]	@ (8000830 <__aeabi_dadd+0x388>)
 80006c2:	3701      	adds	r7, #1
 80006c4:	429f      	cmp	r7, r3
 80006c6:	d051      	beq.n	800076c <__aeabi_dadd+0x2c4>
 80006c8:	2101      	movs	r1, #1
 80006ca:	4b5a      	ldr	r3, [pc, #360]	@ (8000834 <__aeabi_dadd+0x38c>)
 80006cc:	086a      	lsrs	r2, r5, #1
 80006ce:	401c      	ands	r4, r3
 80006d0:	4029      	ands	r1, r5
 80006d2:	430a      	orrs	r2, r1
 80006d4:	07e5      	lsls	r5, r4, #31
 80006d6:	4315      	orrs	r5, r2
 80006d8:	0864      	lsrs	r4, r4, #1
 80006da:	e75f      	b.n	800059c <__aeabi_dadd+0xf4>
 80006dc:	4661      	mov	r1, ip
 80006de:	4653      	mov	r3, sl
 80006e0:	4319      	orrs	r1, r3
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dadd+0x23e>
 80006e4:	e0bc      	b.n	8000860 <__aeabi_dadd+0x3b8>
 80006e6:	1e51      	subs	r1, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x246>
 80006ec:	e164      	b.n	80009b8 <__aeabi_dadd+0x510>
 80006ee:	4d50      	ldr	r5, [pc, #320]	@ (8000830 <__aeabi_dadd+0x388>)
 80006f0:	42aa      	cmp	r2, r5
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x24e>
 80006f4:	e16a      	b.n	80009cc <__aeabi_dadd+0x524>
 80006f6:	2501      	movs	r5, #1
 80006f8:	2938      	cmp	r1, #56	@ 0x38
 80006fa:	dd00      	ble.n	80006fe <__aeabi_dadd+0x256>
 80006fc:	e722      	b.n	8000544 <__aeabi_dadd+0x9c>
 80006fe:	000a      	movs	r2, r1
 8000700:	e70e      	b.n	8000520 <__aeabi_dadd+0x78>
 8000702:	4a4d      	ldr	r2, [pc, #308]	@ (8000838 <__aeabi_dadd+0x390>)
 8000704:	1c7d      	adds	r5, r7, #1
 8000706:	4215      	tst	r5, r2
 8000708:	d000      	beq.n	800070c <__aeabi_dadd+0x264>
 800070a:	e0d0      	b.n	80008ae <__aeabi_dadd+0x406>
 800070c:	0025      	movs	r5, r4
 800070e:	4662      	mov	r2, ip
 8000710:	4653      	mov	r3, sl
 8000712:	4305      	orrs	r5, r0
 8000714:	431a      	orrs	r2, r3
 8000716:	2f00      	cmp	r7, #0
 8000718:	d000      	beq.n	800071c <__aeabi_dadd+0x274>
 800071a:	e137      	b.n	800098c <__aeabi_dadd+0x4e4>
 800071c:	2d00      	cmp	r5, #0
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x27a>
 8000720:	e1a8      	b.n	8000a74 <__aeabi_dadd+0x5cc>
 8000722:	2a00      	cmp	r2, #0
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x280>
 8000726:	e16a      	b.n	80009fe <__aeabi_dadd+0x556>
 8000728:	4663      	mov	r3, ip
 800072a:	1ac5      	subs	r5, r0, r3
 800072c:	4653      	mov	r3, sl
 800072e:	1ae2      	subs	r2, r4, r3
 8000730:	42a8      	cmp	r0, r5
 8000732:	419b      	sbcs	r3, r3
 8000734:	425b      	negs	r3, r3
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	021a      	lsls	r2, r3, #8
 800073a:	d400      	bmi.n	800073e <__aeabi_dadd+0x296>
 800073c:	e203      	b.n	8000b46 <__aeabi_dadd+0x69e>
 800073e:	4663      	mov	r3, ip
 8000740:	1a1d      	subs	r5, r3, r0
 8000742:	45ac      	cmp	ip, r5
 8000744:	4192      	sbcs	r2, r2
 8000746:	4653      	mov	r3, sl
 8000748:	4252      	negs	r2, r2
 800074a:	1b1c      	subs	r4, r3, r4
 800074c:	000e      	movs	r6, r1
 800074e:	4688      	mov	r8, r1
 8000750:	1aa4      	subs	r4, r4, r2
 8000752:	e723      	b.n	800059c <__aeabi_dadd+0xf4>
 8000754:	4936      	ldr	r1, [pc, #216]	@ (8000830 <__aeabi_dadd+0x388>)
 8000756:	428f      	cmp	r7, r1
 8000758:	d070      	beq.n	800083c <__aeabi_dadd+0x394>
 800075a:	2501      	movs	r5, #1
 800075c:	2a38      	cmp	r2, #56	@ 0x38
 800075e:	dca8      	bgt.n	80006b2 <__aeabi_dadd+0x20a>
 8000760:	2180      	movs	r1, #128	@ 0x80
 8000762:	4653      	mov	r3, sl
 8000764:	0409      	lsls	r1, r1, #16
 8000766:	430b      	orrs	r3, r1
 8000768:	469a      	mov	sl, r3
 800076a:	e78e      	b.n	800068a <__aeabi_dadd+0x1e2>
 800076c:	003c      	movs	r4, r7
 800076e:	2500      	movs	r5, #0
 8000770:	2200      	movs	r2, #0
 8000772:	e731      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000774:	2307      	movs	r3, #7
 8000776:	402b      	ands	r3, r5
 8000778:	2b00      	cmp	r3, #0
 800077a:	d000      	beq.n	800077e <__aeabi_dadd+0x2d6>
 800077c:	e710      	b.n	80005a0 <__aeabi_dadd+0xf8>
 800077e:	e093      	b.n	80008a8 <__aeabi_dadd+0x400>
 8000780:	2a00      	cmp	r2, #0
 8000782:	d074      	beq.n	800086e <__aeabi_dadd+0x3c6>
 8000784:	464a      	mov	r2, r9
 8000786:	1bd2      	subs	r2, r2, r7
 8000788:	2f00      	cmp	r7, #0
 800078a:	d100      	bne.n	800078e <__aeabi_dadd+0x2e6>
 800078c:	e0c7      	b.n	800091e <__aeabi_dadd+0x476>
 800078e:	4928      	ldr	r1, [pc, #160]	@ (8000830 <__aeabi_dadd+0x388>)
 8000790:	4589      	cmp	r9, r1
 8000792:	d100      	bne.n	8000796 <__aeabi_dadd+0x2ee>
 8000794:	e185      	b.n	8000aa2 <__aeabi_dadd+0x5fa>
 8000796:	2501      	movs	r5, #1
 8000798:	2a38      	cmp	r2, #56	@ 0x38
 800079a:	dc12      	bgt.n	80007c2 <__aeabi_dadd+0x31a>
 800079c:	2180      	movs	r1, #128	@ 0x80
 800079e:	0409      	lsls	r1, r1, #16
 80007a0:	430c      	orrs	r4, r1
 80007a2:	2a1f      	cmp	r2, #31
 80007a4:	dd00      	ble.n	80007a8 <__aeabi_dadd+0x300>
 80007a6:	e1ab      	b.n	8000b00 <__aeabi_dadd+0x658>
 80007a8:	2120      	movs	r1, #32
 80007aa:	0025      	movs	r5, r4
 80007ac:	1a89      	subs	r1, r1, r2
 80007ae:	0007      	movs	r7, r0
 80007b0:	4088      	lsls	r0, r1
 80007b2:	408d      	lsls	r5, r1
 80007b4:	40d7      	lsrs	r7, r2
 80007b6:	1e41      	subs	r1, r0, #1
 80007b8:	4188      	sbcs	r0, r1
 80007ba:	40d4      	lsrs	r4, r2
 80007bc:	433d      	orrs	r5, r7
 80007be:	4305      	orrs	r5, r0
 80007c0:	44a2      	add	sl, r4
 80007c2:	4465      	add	r5, ip
 80007c4:	4565      	cmp	r5, ip
 80007c6:	4192      	sbcs	r2, r2
 80007c8:	4252      	negs	r2, r2
 80007ca:	4452      	add	r2, sl
 80007cc:	0014      	movs	r4, r2
 80007ce:	464f      	mov	r7, r9
 80007d0:	e774      	b.n	80006bc <__aeabi_dadd+0x214>
 80007d2:	0028      	movs	r0, r5
 80007d4:	f001 fd24 	bl	8002220 <__clzsi2>
 80007d8:	0003      	movs	r3, r0
 80007da:	3318      	adds	r3, #24
 80007dc:	2b1f      	cmp	r3, #31
 80007de:	dc00      	bgt.n	80007e2 <__aeabi_dadd+0x33a>
 80007e0:	e6c2      	b.n	8000568 <__aeabi_dadd+0xc0>
 80007e2:	002a      	movs	r2, r5
 80007e4:	3808      	subs	r0, #8
 80007e6:	4082      	lsls	r2, r0
 80007e8:	429f      	cmp	r7, r3
 80007ea:	dd00      	ble.n	80007ee <__aeabi_dadd+0x346>
 80007ec:	e0a9      	b.n	8000942 <__aeabi_dadd+0x49a>
 80007ee:	1bdb      	subs	r3, r3, r7
 80007f0:	1c58      	adds	r0, r3, #1
 80007f2:	281f      	cmp	r0, #31
 80007f4:	dc00      	bgt.n	80007f8 <__aeabi_dadd+0x350>
 80007f6:	e1ac      	b.n	8000b52 <__aeabi_dadd+0x6aa>
 80007f8:	0015      	movs	r5, r2
 80007fa:	3b1f      	subs	r3, #31
 80007fc:	40dd      	lsrs	r5, r3
 80007fe:	2820      	cmp	r0, #32
 8000800:	d005      	beq.n	800080e <__aeabi_dadd+0x366>
 8000802:	2340      	movs	r3, #64	@ 0x40
 8000804:	1a1b      	subs	r3, r3, r0
 8000806:	409a      	lsls	r2, r3
 8000808:	1e53      	subs	r3, r2, #1
 800080a:	419a      	sbcs	r2, r3
 800080c:	4315      	orrs	r5, r2
 800080e:	2307      	movs	r3, #7
 8000810:	2700      	movs	r7, #0
 8000812:	402b      	ands	r3, r5
 8000814:	e7b0      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000816:	08ed      	lsrs	r5, r5, #3
 8000818:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <__aeabi_dadd+0x388>)
 800081a:	0762      	lsls	r2, r4, #29
 800081c:	432a      	orrs	r2, r5
 800081e:	08e4      	lsrs	r4, r4, #3
 8000820:	429f      	cmp	r7, r3
 8000822:	d00f      	beq.n	8000844 <__aeabi_dadd+0x39c>
 8000824:	0324      	lsls	r4, r4, #12
 8000826:	0b25      	lsrs	r5, r4, #12
 8000828:	057c      	lsls	r4, r7, #21
 800082a:	0d64      	lsrs	r4, r4, #21
 800082c:	e6d4      	b.n	80005d8 <__aeabi_dadd+0x130>
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	000007ff 	.word	0x000007ff
 8000834:	ff7fffff 	.word	0xff7fffff
 8000838:	000007fe 	.word	0x000007fe
 800083c:	08c0      	lsrs	r0, r0, #3
 800083e:	0762      	lsls	r2, r4, #29
 8000840:	4302      	orrs	r2, r0
 8000842:	08e4      	lsrs	r4, r4, #3
 8000844:	0013      	movs	r3, r2
 8000846:	4323      	orrs	r3, r4
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x3a4>
 800084a:	e186      	b.n	8000b5a <__aeabi_dadd+0x6b2>
 800084c:	2580      	movs	r5, #128	@ 0x80
 800084e:	032d      	lsls	r5, r5, #12
 8000850:	4325      	orrs	r5, r4
 8000852:	032d      	lsls	r5, r5, #12
 8000854:	4cc3      	ldr	r4, [pc, #780]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000856:	0b2d      	lsrs	r5, r5, #12
 8000858:	e6be      	b.n	80005d8 <__aeabi_dadd+0x130>
 800085a:	4660      	mov	r0, ip
 800085c:	4654      	mov	r4, sl
 800085e:	000e      	movs	r6, r1
 8000860:	0017      	movs	r7, r2
 8000862:	08c5      	lsrs	r5, r0, #3
 8000864:	e7d8      	b.n	8000818 <__aeabi_dadd+0x370>
 8000866:	4cc0      	ldr	r4, [pc, #768]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 8000868:	1aff      	subs	r7, r7, r3
 800086a:	4014      	ands	r4, r2
 800086c:	e696      	b.n	800059c <__aeabi_dadd+0xf4>
 800086e:	4abf      	ldr	r2, [pc, #764]	@ (8000b6c <__aeabi_dadd+0x6c4>)
 8000870:	1c79      	adds	r1, r7, #1
 8000872:	4211      	tst	r1, r2
 8000874:	d16b      	bne.n	800094e <__aeabi_dadd+0x4a6>
 8000876:	0022      	movs	r2, r4
 8000878:	4302      	orrs	r2, r0
 800087a:	2f00      	cmp	r7, #0
 800087c:	d000      	beq.n	8000880 <__aeabi_dadd+0x3d8>
 800087e:	e0db      	b.n	8000a38 <__aeabi_dadd+0x590>
 8000880:	2a00      	cmp	r2, #0
 8000882:	d100      	bne.n	8000886 <__aeabi_dadd+0x3de>
 8000884:	e12d      	b.n	8000ae2 <__aeabi_dadd+0x63a>
 8000886:	4662      	mov	r2, ip
 8000888:	4653      	mov	r3, sl
 800088a:	431a      	orrs	r2, r3
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x3e8>
 800088e:	e0b6      	b.n	80009fe <__aeabi_dadd+0x556>
 8000890:	4663      	mov	r3, ip
 8000892:	18c5      	adds	r5, r0, r3
 8000894:	4285      	cmp	r5, r0
 8000896:	4180      	sbcs	r0, r0
 8000898:	4454      	add	r4, sl
 800089a:	4240      	negs	r0, r0
 800089c:	1824      	adds	r4, r4, r0
 800089e:	0223      	lsls	r3, r4, #8
 80008a0:	d502      	bpl.n	80008a8 <__aeabi_dadd+0x400>
 80008a2:	000f      	movs	r7, r1
 80008a4:	4bb0      	ldr	r3, [pc, #704]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 80008a6:	401c      	ands	r4, r3
 80008a8:	003a      	movs	r2, r7
 80008aa:	0028      	movs	r0, r5
 80008ac:	e7d8      	b.n	8000860 <__aeabi_dadd+0x3b8>
 80008ae:	4662      	mov	r2, ip
 80008b0:	1a85      	subs	r5, r0, r2
 80008b2:	42a8      	cmp	r0, r5
 80008b4:	4192      	sbcs	r2, r2
 80008b6:	4653      	mov	r3, sl
 80008b8:	4252      	negs	r2, r2
 80008ba:	4691      	mov	r9, r2
 80008bc:	1ae3      	subs	r3, r4, r3
 80008be:	001a      	movs	r2, r3
 80008c0:	464b      	mov	r3, r9
 80008c2:	1ad2      	subs	r2, r2, r3
 80008c4:	0013      	movs	r3, r2
 80008c6:	4691      	mov	r9, r2
 80008c8:	021a      	lsls	r2, r3, #8
 80008ca:	d454      	bmi.n	8000976 <__aeabi_dadd+0x4ce>
 80008cc:	464a      	mov	r2, r9
 80008ce:	464c      	mov	r4, r9
 80008d0:	432a      	orrs	r2, r5
 80008d2:	d000      	beq.n	80008d6 <__aeabi_dadd+0x42e>
 80008d4:	e640      	b.n	8000558 <__aeabi_dadd+0xb0>
 80008d6:	2600      	movs	r6, #0
 80008d8:	2400      	movs	r4, #0
 80008da:	2500      	movs	r5, #0
 80008dc:	e67c      	b.n	80005d8 <__aeabi_dadd+0x130>
 80008de:	4da1      	ldr	r5, [pc, #644]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 80008e0:	45a9      	cmp	r9, r5
 80008e2:	d100      	bne.n	80008e6 <__aeabi_dadd+0x43e>
 80008e4:	e090      	b.n	8000a08 <__aeabi_dadd+0x560>
 80008e6:	2501      	movs	r5, #1
 80008e8:	2a38      	cmp	r2, #56	@ 0x38
 80008ea:	dd00      	ble.n	80008ee <__aeabi_dadd+0x446>
 80008ec:	e6ab      	b.n	8000646 <__aeabi_dadd+0x19e>
 80008ee:	2580      	movs	r5, #128	@ 0x80
 80008f0:	042d      	lsls	r5, r5, #16
 80008f2:	432c      	orrs	r4, r5
 80008f4:	e695      	b.n	8000622 <__aeabi_dadd+0x17a>
 80008f6:	0011      	movs	r1, r2
 80008f8:	4655      	mov	r5, sl
 80008fa:	3920      	subs	r1, #32
 80008fc:	40cd      	lsrs	r5, r1
 80008fe:	46a9      	mov	r9, r5
 8000900:	2a20      	cmp	r2, #32
 8000902:	d006      	beq.n	8000912 <__aeabi_dadd+0x46a>
 8000904:	2140      	movs	r1, #64	@ 0x40
 8000906:	4653      	mov	r3, sl
 8000908:	1a8a      	subs	r2, r1, r2
 800090a:	4093      	lsls	r3, r2
 800090c:	4662      	mov	r2, ip
 800090e:	431a      	orrs	r2, r3
 8000910:	4694      	mov	ip, r2
 8000912:	4665      	mov	r5, ip
 8000914:	1e6b      	subs	r3, r5, #1
 8000916:	419d      	sbcs	r5, r3
 8000918:	464b      	mov	r3, r9
 800091a:	431d      	orrs	r5, r3
 800091c:	e612      	b.n	8000544 <__aeabi_dadd+0x9c>
 800091e:	0021      	movs	r1, r4
 8000920:	4301      	orrs	r1, r0
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x47e>
 8000924:	e0c4      	b.n	8000ab0 <__aeabi_dadd+0x608>
 8000926:	1e51      	subs	r1, r2, #1
 8000928:	2a01      	cmp	r2, #1
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x486>
 800092c:	e0fb      	b.n	8000b26 <__aeabi_dadd+0x67e>
 800092e:	4d8d      	ldr	r5, [pc, #564]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000930:	42aa      	cmp	r2, r5
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x48e>
 8000934:	e0b5      	b.n	8000aa2 <__aeabi_dadd+0x5fa>
 8000936:	2501      	movs	r5, #1
 8000938:	2938      	cmp	r1, #56	@ 0x38
 800093a:	dd00      	ble.n	800093e <__aeabi_dadd+0x496>
 800093c:	e741      	b.n	80007c2 <__aeabi_dadd+0x31a>
 800093e:	000a      	movs	r2, r1
 8000940:	e72f      	b.n	80007a2 <__aeabi_dadd+0x2fa>
 8000942:	4c89      	ldr	r4, [pc, #548]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 8000944:	1aff      	subs	r7, r7, r3
 8000946:	4014      	ands	r4, r2
 8000948:	0762      	lsls	r2, r4, #29
 800094a:	08e4      	lsrs	r4, r4, #3
 800094c:	e76a      	b.n	8000824 <__aeabi_dadd+0x37c>
 800094e:	4a85      	ldr	r2, [pc, #532]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000950:	4291      	cmp	r1, r2
 8000952:	d100      	bne.n	8000956 <__aeabi_dadd+0x4ae>
 8000954:	e0e3      	b.n	8000b1e <__aeabi_dadd+0x676>
 8000956:	4663      	mov	r3, ip
 8000958:	18c2      	adds	r2, r0, r3
 800095a:	4282      	cmp	r2, r0
 800095c:	4180      	sbcs	r0, r0
 800095e:	0023      	movs	r3, r4
 8000960:	4240      	negs	r0, r0
 8000962:	4453      	add	r3, sl
 8000964:	181b      	adds	r3, r3, r0
 8000966:	07dd      	lsls	r5, r3, #31
 8000968:	085c      	lsrs	r4, r3, #1
 800096a:	2307      	movs	r3, #7
 800096c:	0852      	lsrs	r2, r2, #1
 800096e:	4315      	orrs	r5, r2
 8000970:	000f      	movs	r7, r1
 8000972:	402b      	ands	r3, r5
 8000974:	e700      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000976:	4663      	mov	r3, ip
 8000978:	1a1d      	subs	r5, r3, r0
 800097a:	45ac      	cmp	ip, r5
 800097c:	4192      	sbcs	r2, r2
 800097e:	4653      	mov	r3, sl
 8000980:	4252      	negs	r2, r2
 8000982:	1b1c      	subs	r4, r3, r4
 8000984:	000e      	movs	r6, r1
 8000986:	4688      	mov	r8, r1
 8000988:	1aa4      	subs	r4, r4, r2
 800098a:	e5e5      	b.n	8000558 <__aeabi_dadd+0xb0>
 800098c:	2d00      	cmp	r5, #0
 800098e:	d000      	beq.n	8000992 <__aeabi_dadd+0x4ea>
 8000990:	e091      	b.n	8000ab6 <__aeabi_dadd+0x60e>
 8000992:	2a00      	cmp	r2, #0
 8000994:	d138      	bne.n	8000a08 <__aeabi_dadd+0x560>
 8000996:	2480      	movs	r4, #128	@ 0x80
 8000998:	2600      	movs	r6, #0
 800099a:	0324      	lsls	r4, r4, #12
 800099c:	e756      	b.n	800084c <__aeabi_dadd+0x3a4>
 800099e:	4663      	mov	r3, ip
 80009a0:	18c5      	adds	r5, r0, r3
 80009a2:	4285      	cmp	r5, r0
 80009a4:	4180      	sbcs	r0, r0
 80009a6:	4454      	add	r4, sl
 80009a8:	4240      	negs	r0, r0
 80009aa:	1824      	adds	r4, r4, r0
 80009ac:	2701      	movs	r7, #1
 80009ae:	0223      	lsls	r3, r4, #8
 80009b0:	d400      	bmi.n	80009b4 <__aeabi_dadd+0x50c>
 80009b2:	e6df      	b.n	8000774 <__aeabi_dadd+0x2cc>
 80009b4:	2702      	movs	r7, #2
 80009b6:	e687      	b.n	80006c8 <__aeabi_dadd+0x220>
 80009b8:	4663      	mov	r3, ip
 80009ba:	1ac5      	subs	r5, r0, r3
 80009bc:	42a8      	cmp	r0, r5
 80009be:	4180      	sbcs	r0, r0
 80009c0:	4653      	mov	r3, sl
 80009c2:	4240      	negs	r0, r0
 80009c4:	1ae4      	subs	r4, r4, r3
 80009c6:	2701      	movs	r7, #1
 80009c8:	1a24      	subs	r4, r4, r0
 80009ca:	e5c0      	b.n	800054e <__aeabi_dadd+0xa6>
 80009cc:	0762      	lsls	r2, r4, #29
 80009ce:	08c0      	lsrs	r0, r0, #3
 80009d0:	4302      	orrs	r2, r0
 80009d2:	08e4      	lsrs	r4, r4, #3
 80009d4:	e736      	b.n	8000844 <__aeabi_dadd+0x39c>
 80009d6:	0011      	movs	r1, r2
 80009d8:	4653      	mov	r3, sl
 80009da:	3920      	subs	r1, #32
 80009dc:	40cb      	lsrs	r3, r1
 80009de:	4699      	mov	r9, r3
 80009e0:	2a20      	cmp	r2, #32
 80009e2:	d006      	beq.n	80009f2 <__aeabi_dadd+0x54a>
 80009e4:	2140      	movs	r1, #64	@ 0x40
 80009e6:	4653      	mov	r3, sl
 80009e8:	1a8a      	subs	r2, r1, r2
 80009ea:	4093      	lsls	r3, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	431a      	orrs	r2, r3
 80009f0:	4694      	mov	ip, r2
 80009f2:	4665      	mov	r5, ip
 80009f4:	1e6b      	subs	r3, r5, #1
 80009f6:	419d      	sbcs	r5, r3
 80009f8:	464b      	mov	r3, r9
 80009fa:	431d      	orrs	r5, r3
 80009fc:	e659      	b.n	80006b2 <__aeabi_dadd+0x20a>
 80009fe:	0762      	lsls	r2, r4, #29
 8000a00:	08c0      	lsrs	r0, r0, #3
 8000a02:	4302      	orrs	r2, r0
 8000a04:	08e4      	lsrs	r4, r4, #3
 8000a06:	e70d      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000a08:	4653      	mov	r3, sl
 8000a0a:	075a      	lsls	r2, r3, #29
 8000a0c:	4663      	mov	r3, ip
 8000a0e:	08d8      	lsrs	r0, r3, #3
 8000a10:	4653      	mov	r3, sl
 8000a12:	000e      	movs	r6, r1
 8000a14:	4302      	orrs	r2, r0
 8000a16:	08dc      	lsrs	r4, r3, #3
 8000a18:	e714      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000a1a:	0015      	movs	r5, r2
 8000a1c:	0026      	movs	r6, r4
 8000a1e:	3d20      	subs	r5, #32
 8000a20:	40ee      	lsrs	r6, r5
 8000a22:	2a20      	cmp	r2, #32
 8000a24:	d003      	beq.n	8000a2e <__aeabi_dadd+0x586>
 8000a26:	2540      	movs	r5, #64	@ 0x40
 8000a28:	1aaa      	subs	r2, r5, r2
 8000a2a:	4094      	lsls	r4, r2
 8000a2c:	4320      	orrs	r0, r4
 8000a2e:	1e42      	subs	r2, r0, #1
 8000a30:	4190      	sbcs	r0, r2
 8000a32:	0005      	movs	r5, r0
 8000a34:	4335      	orrs	r5, r6
 8000a36:	e606      	b.n	8000646 <__aeabi_dadd+0x19e>
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	d07c      	beq.n	8000b36 <__aeabi_dadd+0x68e>
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	4653      	mov	r3, sl
 8000a40:	08c0      	lsrs	r0, r0, #3
 8000a42:	431a      	orrs	r2, r3
 8000a44:	d100      	bne.n	8000a48 <__aeabi_dadd+0x5a0>
 8000a46:	e6fa      	b.n	800083e <__aeabi_dadd+0x396>
 8000a48:	0762      	lsls	r2, r4, #29
 8000a4a:	4310      	orrs	r0, r2
 8000a4c:	2280      	movs	r2, #128	@ 0x80
 8000a4e:	08e4      	lsrs	r4, r4, #3
 8000a50:	0312      	lsls	r2, r2, #12
 8000a52:	4214      	tst	r4, r2
 8000a54:	d008      	beq.n	8000a68 <__aeabi_dadd+0x5c0>
 8000a56:	08d9      	lsrs	r1, r3, #3
 8000a58:	4211      	tst	r1, r2
 8000a5a:	d105      	bne.n	8000a68 <__aeabi_dadd+0x5c0>
 8000a5c:	4663      	mov	r3, ip
 8000a5e:	08d8      	lsrs	r0, r3, #3
 8000a60:	4653      	mov	r3, sl
 8000a62:	000c      	movs	r4, r1
 8000a64:	075b      	lsls	r3, r3, #29
 8000a66:	4318      	orrs	r0, r3
 8000a68:	0f42      	lsrs	r2, r0, #29
 8000a6a:	00c0      	lsls	r0, r0, #3
 8000a6c:	08c0      	lsrs	r0, r0, #3
 8000a6e:	0752      	lsls	r2, r2, #29
 8000a70:	4302      	orrs	r2, r0
 8000a72:	e6e7      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	d100      	bne.n	8000a7a <__aeabi_dadd+0x5d2>
 8000a78:	e72d      	b.n	80008d6 <__aeabi_dadd+0x42e>
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	08d8      	lsrs	r0, r3, #3
 8000a7e:	4653      	mov	r3, sl
 8000a80:	075a      	lsls	r2, r3, #29
 8000a82:	000e      	movs	r6, r1
 8000a84:	4302      	orrs	r2, r0
 8000a86:	08dc      	lsrs	r4, r3, #3
 8000a88:	e6cc      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000a8a:	4663      	mov	r3, ip
 8000a8c:	1a1d      	subs	r5, r3, r0
 8000a8e:	45ac      	cmp	ip, r5
 8000a90:	4192      	sbcs	r2, r2
 8000a92:	4653      	mov	r3, sl
 8000a94:	4252      	negs	r2, r2
 8000a96:	1b1c      	subs	r4, r3, r4
 8000a98:	000e      	movs	r6, r1
 8000a9a:	4688      	mov	r8, r1
 8000a9c:	1aa4      	subs	r4, r4, r2
 8000a9e:	3701      	adds	r7, #1
 8000aa0:	e555      	b.n	800054e <__aeabi_dadd+0xa6>
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	08d9      	lsrs	r1, r3, #3
 8000aa6:	4653      	mov	r3, sl
 8000aa8:	075a      	lsls	r2, r3, #29
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	08dc      	lsrs	r4, r3, #3
 8000aae:	e6c9      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000ab0:	4660      	mov	r0, ip
 8000ab2:	4654      	mov	r4, sl
 8000ab4:	e6d4      	b.n	8000860 <__aeabi_dadd+0x3b8>
 8000ab6:	08c0      	lsrs	r0, r0, #3
 8000ab8:	2a00      	cmp	r2, #0
 8000aba:	d100      	bne.n	8000abe <__aeabi_dadd+0x616>
 8000abc:	e6bf      	b.n	800083e <__aeabi_dadd+0x396>
 8000abe:	0762      	lsls	r2, r4, #29
 8000ac0:	4310      	orrs	r0, r2
 8000ac2:	2280      	movs	r2, #128	@ 0x80
 8000ac4:	08e4      	lsrs	r4, r4, #3
 8000ac6:	0312      	lsls	r2, r2, #12
 8000ac8:	4214      	tst	r4, r2
 8000aca:	d0cd      	beq.n	8000a68 <__aeabi_dadd+0x5c0>
 8000acc:	08dd      	lsrs	r5, r3, #3
 8000ace:	4215      	tst	r5, r2
 8000ad0:	d1ca      	bne.n	8000a68 <__aeabi_dadd+0x5c0>
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	08d8      	lsrs	r0, r3, #3
 8000ad6:	4653      	mov	r3, sl
 8000ad8:	075b      	lsls	r3, r3, #29
 8000ada:	000e      	movs	r6, r1
 8000adc:	002c      	movs	r4, r5
 8000ade:	4318      	orrs	r0, r3
 8000ae0:	e7c2      	b.n	8000a68 <__aeabi_dadd+0x5c0>
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	08d9      	lsrs	r1, r3, #3
 8000ae6:	4653      	mov	r3, sl
 8000ae8:	075a      	lsls	r2, r3, #29
 8000aea:	430a      	orrs	r2, r1
 8000aec:	08dc      	lsrs	r4, r3, #3
 8000aee:	e699      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000af0:	4663      	mov	r3, ip
 8000af2:	08d8      	lsrs	r0, r3, #3
 8000af4:	4653      	mov	r3, sl
 8000af6:	075a      	lsls	r2, r3, #29
 8000af8:	000e      	movs	r6, r1
 8000afa:	4302      	orrs	r2, r0
 8000afc:	08dc      	lsrs	r4, r3, #3
 8000afe:	e6a1      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000b00:	0011      	movs	r1, r2
 8000b02:	0027      	movs	r7, r4
 8000b04:	3920      	subs	r1, #32
 8000b06:	40cf      	lsrs	r7, r1
 8000b08:	2a20      	cmp	r2, #32
 8000b0a:	d003      	beq.n	8000b14 <__aeabi_dadd+0x66c>
 8000b0c:	2140      	movs	r1, #64	@ 0x40
 8000b0e:	1a8a      	subs	r2, r1, r2
 8000b10:	4094      	lsls	r4, r2
 8000b12:	4320      	orrs	r0, r4
 8000b14:	1e42      	subs	r2, r0, #1
 8000b16:	4190      	sbcs	r0, r2
 8000b18:	0005      	movs	r5, r0
 8000b1a:	433d      	orrs	r5, r7
 8000b1c:	e651      	b.n	80007c2 <__aeabi_dadd+0x31a>
 8000b1e:	000c      	movs	r4, r1
 8000b20:	2500      	movs	r5, #0
 8000b22:	2200      	movs	r2, #0
 8000b24:	e558      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000b26:	4460      	add	r0, ip
 8000b28:	4560      	cmp	r0, ip
 8000b2a:	4192      	sbcs	r2, r2
 8000b2c:	4454      	add	r4, sl
 8000b2e:	4252      	negs	r2, r2
 8000b30:	0005      	movs	r5, r0
 8000b32:	18a4      	adds	r4, r4, r2
 8000b34:	e73a      	b.n	80009ac <__aeabi_dadd+0x504>
 8000b36:	4653      	mov	r3, sl
 8000b38:	075a      	lsls	r2, r3, #29
 8000b3a:	4663      	mov	r3, ip
 8000b3c:	08d9      	lsrs	r1, r3, #3
 8000b3e:	4653      	mov	r3, sl
 8000b40:	430a      	orrs	r2, r1
 8000b42:	08dc      	lsrs	r4, r3, #3
 8000b44:	e67e      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000b46:	001a      	movs	r2, r3
 8000b48:	001c      	movs	r4, r3
 8000b4a:	432a      	orrs	r2, r5
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_dadd+0x6a8>
 8000b4e:	e6ab      	b.n	80008a8 <__aeabi_dadd+0x400>
 8000b50:	e6c1      	b.n	80008d6 <__aeabi_dadd+0x42e>
 8000b52:	2120      	movs	r1, #32
 8000b54:	2500      	movs	r5, #0
 8000b56:	1a09      	subs	r1, r1, r0
 8000b58:	e519      	b.n	800058e <__aeabi_dadd+0xe6>
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2500      	movs	r5, #0
 8000b5e:	4c01      	ldr	r4, [pc, #4]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000b60:	e53a      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	000007ff 	.word	0x000007ff
 8000b68:	ff7fffff 	.word	0xff7fffff
 8000b6c:	000007fe 	.word	0x000007fe

08000b70 <__aeabi_ddiv>:
 8000b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b72:	46de      	mov	lr, fp
 8000b74:	4645      	mov	r5, r8
 8000b76:	4657      	mov	r7, sl
 8000b78:	464e      	mov	r6, r9
 8000b7a:	b5e0      	push	{r5, r6, r7, lr}
 8000b7c:	b087      	sub	sp, #28
 8000b7e:	9200      	str	r2, [sp, #0]
 8000b80:	9301      	str	r3, [sp, #4]
 8000b82:	030b      	lsls	r3, r1, #12
 8000b84:	0b1b      	lsrs	r3, r3, #12
 8000b86:	469b      	mov	fp, r3
 8000b88:	0fca      	lsrs	r2, r1, #31
 8000b8a:	004b      	lsls	r3, r1, #1
 8000b8c:	0004      	movs	r4, r0
 8000b8e:	4680      	mov	r8, r0
 8000b90:	0d5b      	lsrs	r3, r3, #21
 8000b92:	9202      	str	r2, [sp, #8]
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0x28>
 8000b96:	e16a      	b.n	8000e6e <__aeabi_ddiv+0x2fe>
 8000b98:	4ad4      	ldr	r2, [pc, #848]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_ddiv+0x30>
 8000b9e:	e18c      	b.n	8000eba <__aeabi_ddiv+0x34a>
 8000ba0:	4659      	mov	r1, fp
 8000ba2:	0f42      	lsrs	r2, r0, #29
 8000ba4:	00c9      	lsls	r1, r1, #3
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	2180      	movs	r1, #128	@ 0x80
 8000baa:	0409      	lsls	r1, r1, #16
 8000bac:	4311      	orrs	r1, r2
 8000bae:	00c2      	lsls	r2, r0, #3
 8000bb0:	4690      	mov	r8, r2
 8000bb2:	4acf      	ldr	r2, [pc, #828]	@ (8000ef0 <__aeabi_ddiv+0x380>)
 8000bb4:	4689      	mov	r9, r1
 8000bb6:	4692      	mov	sl, r2
 8000bb8:	449a      	add	sl, r3
 8000bba:	2300      	movs	r3, #0
 8000bbc:	2400      	movs	r4, #0
 8000bbe:	9303      	str	r3, [sp, #12]
 8000bc0:	9e00      	ldr	r6, [sp, #0]
 8000bc2:	9f01      	ldr	r7, [sp, #4]
 8000bc4:	033b      	lsls	r3, r7, #12
 8000bc6:	0b1b      	lsrs	r3, r3, #12
 8000bc8:	469b      	mov	fp, r3
 8000bca:	007b      	lsls	r3, r7, #1
 8000bcc:	0030      	movs	r0, r6
 8000bce:	0d5b      	lsrs	r3, r3, #21
 8000bd0:	0ffd      	lsrs	r5, r7, #31
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_ddiv+0x68>
 8000bd6:	e128      	b.n	8000e2a <__aeabi_ddiv+0x2ba>
 8000bd8:	4ac4      	ldr	r2, [pc, #784]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_ddiv+0x70>
 8000bde:	e177      	b.n	8000ed0 <__aeabi_ddiv+0x360>
 8000be0:	4659      	mov	r1, fp
 8000be2:	0f72      	lsrs	r2, r6, #29
 8000be4:	00c9      	lsls	r1, r1, #3
 8000be6:	430a      	orrs	r2, r1
 8000be8:	2180      	movs	r1, #128	@ 0x80
 8000bea:	0409      	lsls	r1, r1, #16
 8000bec:	4311      	orrs	r1, r2
 8000bee:	468b      	mov	fp, r1
 8000bf0:	49bf      	ldr	r1, [pc, #764]	@ (8000ef0 <__aeabi_ddiv+0x380>)
 8000bf2:	00f2      	lsls	r2, r6, #3
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	4651      	mov	r1, sl
 8000bf8:	4463      	add	r3, ip
 8000bfa:	1acb      	subs	r3, r1, r3
 8000bfc:	469a      	mov	sl, r3
 8000bfe:	2300      	movs	r3, #0
 8000c00:	9e02      	ldr	r6, [sp, #8]
 8000c02:	406e      	eors	r6, r5
 8000c04:	2c0f      	cmp	r4, #15
 8000c06:	d827      	bhi.n	8000c58 <__aeabi_ddiv+0xe8>
 8000c08:	49ba      	ldr	r1, [pc, #744]	@ (8000ef4 <__aeabi_ddiv+0x384>)
 8000c0a:	00a4      	lsls	r4, r4, #2
 8000c0c:	5909      	ldr	r1, [r1, r4]
 8000c0e:	468f      	mov	pc, r1
 8000c10:	46cb      	mov	fp, r9
 8000c12:	4642      	mov	r2, r8
 8000c14:	9e02      	ldr	r6, [sp, #8]
 8000c16:	9b03      	ldr	r3, [sp, #12]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d016      	beq.n	8000c4a <__aeabi_ddiv+0xda>
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_ddiv+0xb2>
 8000c20:	e2a6      	b.n	8001170 <__aeabi_ddiv+0x600>
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d000      	beq.n	8000c28 <__aeabi_ddiv+0xb8>
 8000c26:	e0df      	b.n	8000de8 <__aeabi_ddiv+0x278>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2400      	movs	r4, #0
 8000c2e:	4690      	mov	r8, r2
 8000c30:	051b      	lsls	r3, r3, #20
 8000c32:	4323      	orrs	r3, r4
 8000c34:	07f6      	lsls	r6, r6, #31
 8000c36:	4333      	orrs	r3, r6
 8000c38:	4640      	mov	r0, r8
 8000c3a:	0019      	movs	r1, r3
 8000c3c:	b007      	add	sp, #28
 8000c3e:	bcf0      	pop	{r4, r5, r6, r7}
 8000c40:	46bb      	mov	fp, r7
 8000c42:	46b2      	mov	sl, r6
 8000c44:	46a9      	mov	r9, r5
 8000c46:	46a0      	mov	r8, r4
 8000c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2400      	movs	r4, #0
 8000c4e:	4690      	mov	r8, r2
 8000c50:	4ba6      	ldr	r3, [pc, #664]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000c52:	e7ed      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000c54:	002e      	movs	r6, r5
 8000c56:	e7df      	b.n	8000c18 <__aeabi_ddiv+0xa8>
 8000c58:	45cb      	cmp	fp, r9
 8000c5a:	d200      	bcs.n	8000c5e <__aeabi_ddiv+0xee>
 8000c5c:	e1d4      	b.n	8001008 <__aeabi_ddiv+0x498>
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_ddiv+0xf2>
 8000c60:	e1cf      	b.n	8001002 <__aeabi_ddiv+0x492>
 8000c62:	2301      	movs	r3, #1
 8000c64:	425b      	negs	r3, r3
 8000c66:	469c      	mov	ip, r3
 8000c68:	4644      	mov	r4, r8
 8000c6a:	4648      	mov	r0, r9
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	44e2      	add	sl, ip
 8000c70:	465b      	mov	r3, fp
 8000c72:	0e15      	lsrs	r5, r2, #24
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	431d      	orrs	r5, r3
 8000c78:	0c19      	lsrs	r1, r3, #16
 8000c7a:	042b      	lsls	r3, r5, #16
 8000c7c:	0212      	lsls	r2, r2, #8
 8000c7e:	9500      	str	r5, [sp, #0]
 8000c80:	0c1d      	lsrs	r5, r3, #16
 8000c82:	4691      	mov	r9, r2
 8000c84:	9102      	str	r1, [sp, #8]
 8000c86:	9503      	str	r5, [sp, #12]
 8000c88:	f7ff fae0 	bl	800024c <__aeabi_uidivmod>
 8000c8c:	0002      	movs	r2, r0
 8000c8e:	436a      	muls	r2, r5
 8000c90:	040b      	lsls	r3, r1, #16
 8000c92:	0c21      	lsrs	r1, r4, #16
 8000c94:	4680      	mov	r8, r0
 8000c96:	4319      	orrs	r1, r3
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	d909      	bls.n	8000cb0 <__aeabi_ddiv+0x140>
 8000c9c:	9d00      	ldr	r5, [sp, #0]
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	46ac      	mov	ip, r5
 8000ca2:	425b      	negs	r3, r3
 8000ca4:	4461      	add	r1, ip
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	44e0      	add	r8, ip
 8000caa:	428d      	cmp	r5, r1
 8000cac:	d800      	bhi.n	8000cb0 <__aeabi_ddiv+0x140>
 8000cae:	e1fb      	b.n	80010a8 <__aeabi_ddiv+0x538>
 8000cb0:	1a88      	subs	r0, r1, r2
 8000cb2:	9902      	ldr	r1, [sp, #8]
 8000cb4:	f7ff faca 	bl	800024c <__aeabi_uidivmod>
 8000cb8:	9a03      	ldr	r2, [sp, #12]
 8000cba:	0424      	lsls	r4, r4, #16
 8000cbc:	4342      	muls	r2, r0
 8000cbe:	0409      	lsls	r1, r1, #16
 8000cc0:	0c24      	lsrs	r4, r4, #16
 8000cc2:	0003      	movs	r3, r0
 8000cc4:	430c      	orrs	r4, r1
 8000cc6:	42a2      	cmp	r2, r4
 8000cc8:	d906      	bls.n	8000cd8 <__aeabi_ddiv+0x168>
 8000cca:	9900      	ldr	r1, [sp, #0]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	468c      	mov	ip, r1
 8000cd0:	4464      	add	r4, ip
 8000cd2:	42a1      	cmp	r1, r4
 8000cd4:	d800      	bhi.n	8000cd8 <__aeabi_ddiv+0x168>
 8000cd6:	e1e1      	b.n	800109c <__aeabi_ddiv+0x52c>
 8000cd8:	1aa0      	subs	r0, r4, r2
 8000cda:	4642      	mov	r2, r8
 8000cdc:	0412      	lsls	r2, r2, #16
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	4693      	mov	fp, r2
 8000ce2:	464b      	mov	r3, r9
 8000ce4:	4659      	mov	r1, fp
 8000ce6:	0c1b      	lsrs	r3, r3, #16
 8000ce8:	001d      	movs	r5, r3
 8000cea:	9304      	str	r3, [sp, #16]
 8000cec:	040b      	lsls	r3, r1, #16
 8000cee:	4649      	mov	r1, r9
 8000cf0:	0409      	lsls	r1, r1, #16
 8000cf2:	0c09      	lsrs	r1, r1, #16
 8000cf4:	000c      	movs	r4, r1
 8000cf6:	0c1b      	lsrs	r3, r3, #16
 8000cf8:	435c      	muls	r4, r3
 8000cfa:	0c12      	lsrs	r2, r2, #16
 8000cfc:	436b      	muls	r3, r5
 8000cfe:	4688      	mov	r8, r1
 8000d00:	4351      	muls	r1, r2
 8000d02:	436a      	muls	r2, r5
 8000d04:	0c25      	lsrs	r5, r4, #16
 8000d06:	46ac      	mov	ip, r5
 8000d08:	185b      	adds	r3, r3, r1
 8000d0a:	4463      	add	r3, ip
 8000d0c:	4299      	cmp	r1, r3
 8000d0e:	d903      	bls.n	8000d18 <__aeabi_ddiv+0x1a8>
 8000d10:	2180      	movs	r1, #128	@ 0x80
 8000d12:	0249      	lsls	r1, r1, #9
 8000d14:	468c      	mov	ip, r1
 8000d16:	4462      	add	r2, ip
 8000d18:	0c19      	lsrs	r1, r3, #16
 8000d1a:	0424      	lsls	r4, r4, #16
 8000d1c:	041b      	lsls	r3, r3, #16
 8000d1e:	0c24      	lsrs	r4, r4, #16
 8000d20:	188a      	adds	r2, r1, r2
 8000d22:	191c      	adds	r4, r3, r4
 8000d24:	4290      	cmp	r0, r2
 8000d26:	d302      	bcc.n	8000d2e <__aeabi_ddiv+0x1be>
 8000d28:	d116      	bne.n	8000d58 <__aeabi_ddiv+0x1e8>
 8000d2a:	42a7      	cmp	r7, r4
 8000d2c:	d214      	bcs.n	8000d58 <__aeabi_ddiv+0x1e8>
 8000d2e:	465b      	mov	r3, fp
 8000d30:	9d00      	ldr	r5, [sp, #0]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	444f      	add	r7, r9
 8000d36:	9305      	str	r3, [sp, #20]
 8000d38:	454f      	cmp	r7, r9
 8000d3a:	419b      	sbcs	r3, r3
 8000d3c:	46ac      	mov	ip, r5
 8000d3e:	425b      	negs	r3, r3
 8000d40:	4463      	add	r3, ip
 8000d42:	18c0      	adds	r0, r0, r3
 8000d44:	4285      	cmp	r5, r0
 8000d46:	d300      	bcc.n	8000d4a <__aeabi_ddiv+0x1da>
 8000d48:	e1a1      	b.n	800108e <__aeabi_ddiv+0x51e>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	d900      	bls.n	8000d50 <__aeabi_ddiv+0x1e0>
 8000d4e:	e1f6      	b.n	800113e <__aeabi_ddiv+0x5ce>
 8000d50:	d100      	bne.n	8000d54 <__aeabi_ddiv+0x1e4>
 8000d52:	e1f1      	b.n	8001138 <__aeabi_ddiv+0x5c8>
 8000d54:	9b05      	ldr	r3, [sp, #20]
 8000d56:	469b      	mov	fp, r3
 8000d58:	1b3c      	subs	r4, r7, r4
 8000d5a:	42a7      	cmp	r7, r4
 8000d5c:	41bf      	sbcs	r7, r7
 8000d5e:	9d00      	ldr	r5, [sp, #0]
 8000d60:	1a80      	subs	r0, r0, r2
 8000d62:	427f      	negs	r7, r7
 8000d64:	1bc0      	subs	r0, r0, r7
 8000d66:	4285      	cmp	r5, r0
 8000d68:	d100      	bne.n	8000d6c <__aeabi_ddiv+0x1fc>
 8000d6a:	e1d0      	b.n	800110e <__aeabi_ddiv+0x59e>
 8000d6c:	9902      	ldr	r1, [sp, #8]
 8000d6e:	f7ff fa6d 	bl	800024c <__aeabi_uidivmod>
 8000d72:	9a03      	ldr	r2, [sp, #12]
 8000d74:	040b      	lsls	r3, r1, #16
 8000d76:	4342      	muls	r2, r0
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	0007      	movs	r7, r0
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	428a      	cmp	r2, r1
 8000d80:	d900      	bls.n	8000d84 <__aeabi_ddiv+0x214>
 8000d82:	e178      	b.n	8001076 <__aeabi_ddiv+0x506>
 8000d84:	1a88      	subs	r0, r1, r2
 8000d86:	9902      	ldr	r1, [sp, #8]
 8000d88:	f7ff fa60 	bl	800024c <__aeabi_uidivmod>
 8000d8c:	9a03      	ldr	r2, [sp, #12]
 8000d8e:	0424      	lsls	r4, r4, #16
 8000d90:	4342      	muls	r2, r0
 8000d92:	0409      	lsls	r1, r1, #16
 8000d94:	0c24      	lsrs	r4, r4, #16
 8000d96:	0003      	movs	r3, r0
 8000d98:	430c      	orrs	r4, r1
 8000d9a:	42a2      	cmp	r2, r4
 8000d9c:	d900      	bls.n	8000da0 <__aeabi_ddiv+0x230>
 8000d9e:	e15d      	b.n	800105c <__aeabi_ddiv+0x4ec>
 8000da0:	4641      	mov	r1, r8
 8000da2:	1aa4      	subs	r4, r4, r2
 8000da4:	043a      	lsls	r2, r7, #16
 8000da6:	431a      	orrs	r2, r3
 8000da8:	9d04      	ldr	r5, [sp, #16]
 8000daa:	0413      	lsls	r3, r2, #16
 8000dac:	0c1b      	lsrs	r3, r3, #16
 8000dae:	4359      	muls	r1, r3
 8000db0:	4647      	mov	r7, r8
 8000db2:	436b      	muls	r3, r5
 8000db4:	469c      	mov	ip, r3
 8000db6:	0c10      	lsrs	r0, r2, #16
 8000db8:	4347      	muls	r7, r0
 8000dba:	0c0b      	lsrs	r3, r1, #16
 8000dbc:	44bc      	add	ip, r7
 8000dbe:	4463      	add	r3, ip
 8000dc0:	4368      	muls	r0, r5
 8000dc2:	429f      	cmp	r7, r3
 8000dc4:	d903      	bls.n	8000dce <__aeabi_ddiv+0x25e>
 8000dc6:	2580      	movs	r5, #128	@ 0x80
 8000dc8:	026d      	lsls	r5, r5, #9
 8000dca:	46ac      	mov	ip, r5
 8000dcc:	4460      	add	r0, ip
 8000dce:	0c1f      	lsrs	r7, r3, #16
 8000dd0:	0409      	lsls	r1, r1, #16
 8000dd2:	041b      	lsls	r3, r3, #16
 8000dd4:	0c09      	lsrs	r1, r1, #16
 8000dd6:	183f      	adds	r7, r7, r0
 8000dd8:	185b      	adds	r3, r3, r1
 8000dda:	42bc      	cmp	r4, r7
 8000ddc:	d200      	bcs.n	8000de0 <__aeabi_ddiv+0x270>
 8000dde:	e102      	b.n	8000fe6 <__aeabi_ddiv+0x476>
 8000de0:	d100      	bne.n	8000de4 <__aeabi_ddiv+0x274>
 8000de2:	e0fd      	b.n	8000fe0 <__aeabi_ddiv+0x470>
 8000de4:	2301      	movs	r3, #1
 8000de6:	431a      	orrs	r2, r3
 8000de8:	4b43      	ldr	r3, [pc, #268]	@ (8000ef8 <__aeabi_ddiv+0x388>)
 8000dea:	4453      	add	r3, sl
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	dc00      	bgt.n	8000df2 <__aeabi_ddiv+0x282>
 8000df0:	e0ae      	b.n	8000f50 <__aeabi_ddiv+0x3e0>
 8000df2:	0751      	lsls	r1, r2, #29
 8000df4:	d000      	beq.n	8000df8 <__aeabi_ddiv+0x288>
 8000df6:	e198      	b.n	800112a <__aeabi_ddiv+0x5ba>
 8000df8:	4659      	mov	r1, fp
 8000dfa:	01c9      	lsls	r1, r1, #7
 8000dfc:	d506      	bpl.n	8000e0c <__aeabi_ddiv+0x29c>
 8000dfe:	4659      	mov	r1, fp
 8000e00:	4b3e      	ldr	r3, [pc, #248]	@ (8000efc <__aeabi_ddiv+0x38c>)
 8000e02:	4019      	ands	r1, r3
 8000e04:	2380      	movs	r3, #128	@ 0x80
 8000e06:	468b      	mov	fp, r1
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	4453      	add	r3, sl
 8000e0c:	493c      	ldr	r1, [pc, #240]	@ (8000f00 <__aeabi_ddiv+0x390>)
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	dd00      	ble.n	8000e14 <__aeabi_ddiv+0x2a4>
 8000e12:	e71a      	b.n	8000c4a <__aeabi_ddiv+0xda>
 8000e14:	4659      	mov	r1, fp
 8000e16:	08d2      	lsrs	r2, r2, #3
 8000e18:	0749      	lsls	r1, r1, #29
 8000e1a:	4311      	orrs	r1, r2
 8000e1c:	465a      	mov	r2, fp
 8000e1e:	055b      	lsls	r3, r3, #21
 8000e20:	0254      	lsls	r4, r2, #9
 8000e22:	4688      	mov	r8, r1
 8000e24:	0b24      	lsrs	r4, r4, #12
 8000e26:	0d5b      	lsrs	r3, r3, #21
 8000e28:	e702      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000e2a:	465a      	mov	r2, fp
 8000e2c:	9b00      	ldr	r3, [sp, #0]
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	d100      	bne.n	8000e34 <__aeabi_ddiv+0x2c4>
 8000e32:	e07e      	b.n	8000f32 <__aeabi_ddiv+0x3c2>
 8000e34:	465b      	mov	r3, fp
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_ddiv+0x2cc>
 8000e3a:	e100      	b.n	800103e <__aeabi_ddiv+0x4ce>
 8000e3c:	4658      	mov	r0, fp
 8000e3e:	f001 f9ef 	bl	8002220 <__clzsi2>
 8000e42:	0002      	movs	r2, r0
 8000e44:	0003      	movs	r3, r0
 8000e46:	3a0b      	subs	r2, #11
 8000e48:	271d      	movs	r7, #29
 8000e4a:	9e00      	ldr	r6, [sp, #0]
 8000e4c:	1aba      	subs	r2, r7, r2
 8000e4e:	0019      	movs	r1, r3
 8000e50:	4658      	mov	r0, fp
 8000e52:	40d6      	lsrs	r6, r2
 8000e54:	3908      	subs	r1, #8
 8000e56:	4088      	lsls	r0, r1
 8000e58:	0032      	movs	r2, r6
 8000e5a:	4302      	orrs	r2, r0
 8000e5c:	4693      	mov	fp, r2
 8000e5e:	9a00      	ldr	r2, [sp, #0]
 8000e60:	408a      	lsls	r2, r1
 8000e62:	4928      	ldr	r1, [pc, #160]	@ (8000f04 <__aeabi_ddiv+0x394>)
 8000e64:	4453      	add	r3, sl
 8000e66:	468a      	mov	sl, r1
 8000e68:	449a      	add	sl, r3
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e6c8      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000e6e:	465b      	mov	r3, fp
 8000e70:	4303      	orrs	r3, r0
 8000e72:	4699      	mov	r9, r3
 8000e74:	d056      	beq.n	8000f24 <__aeabi_ddiv+0x3b4>
 8000e76:	465b      	mov	r3, fp
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d100      	bne.n	8000e7e <__aeabi_ddiv+0x30e>
 8000e7c:	e0cd      	b.n	800101a <__aeabi_ddiv+0x4aa>
 8000e7e:	4658      	mov	r0, fp
 8000e80:	f001 f9ce 	bl	8002220 <__clzsi2>
 8000e84:	230b      	movs	r3, #11
 8000e86:	425b      	negs	r3, r3
 8000e88:	469c      	mov	ip, r3
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	4484      	add	ip, r0
 8000e8e:	4666      	mov	r6, ip
 8000e90:	231d      	movs	r3, #29
 8000e92:	1b9b      	subs	r3, r3, r6
 8000e94:	0026      	movs	r6, r4
 8000e96:	0011      	movs	r1, r2
 8000e98:	4658      	mov	r0, fp
 8000e9a:	40de      	lsrs	r6, r3
 8000e9c:	3908      	subs	r1, #8
 8000e9e:	4088      	lsls	r0, r1
 8000ea0:	0033      	movs	r3, r6
 8000ea2:	4303      	orrs	r3, r0
 8000ea4:	4699      	mov	r9, r3
 8000ea6:	0023      	movs	r3, r4
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	4698      	mov	r8, r3
 8000eac:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <__aeabi_ddiv+0x398>)
 8000eae:	2400      	movs	r4, #0
 8000eb0:	1a9b      	subs	r3, r3, r2
 8000eb2:	469a      	mov	sl, r3
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9303      	str	r3, [sp, #12]
 8000eb8:	e682      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000eba:	465a      	mov	r2, fp
 8000ebc:	4302      	orrs	r2, r0
 8000ebe:	4691      	mov	r9, r2
 8000ec0:	d12a      	bne.n	8000f18 <__aeabi_ddiv+0x3a8>
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	469a      	mov	sl, r3
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	4690      	mov	r8, r2
 8000eca:	2408      	movs	r4, #8
 8000ecc:	9303      	str	r3, [sp, #12]
 8000ece:	e677      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000ed0:	465a      	mov	r2, fp
 8000ed2:	9b00      	ldr	r3, [sp, #0]
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <__aeabi_ddiv+0x39c>)
 8000ed8:	469c      	mov	ip, r3
 8000eda:	44e2      	add	sl, ip
 8000edc:	2a00      	cmp	r2, #0
 8000ede:	d117      	bne.n	8000f10 <__aeabi_ddiv+0x3a0>
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	431c      	orrs	r4, r3
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	469b      	mov	fp, r3
 8000ee8:	3302      	adds	r3, #2
 8000eea:	e689      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000eec:	000007ff 	.word	0x000007ff
 8000ef0:	fffffc01 	.word	0xfffffc01
 8000ef4:	0800fefc 	.word	0x0800fefc
 8000ef8:	000003ff 	.word	0x000003ff
 8000efc:	feffffff 	.word	0xfeffffff
 8000f00:	000007fe 	.word	0x000007fe
 8000f04:	000003f3 	.word	0x000003f3
 8000f08:	fffffc0d 	.word	0xfffffc0d
 8000f0c:	fffff801 	.word	0xfffff801
 8000f10:	2303      	movs	r3, #3
 8000f12:	0032      	movs	r2, r6
 8000f14:	431c      	orrs	r4, r3
 8000f16:	e673      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000f18:	469a      	mov	sl, r3
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	46d9      	mov	r9, fp
 8000f1e:	240c      	movs	r4, #12
 8000f20:	9303      	str	r3, [sp, #12]
 8000f22:	e64d      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000f24:	2300      	movs	r3, #0
 8000f26:	4698      	mov	r8, r3
 8000f28:	469a      	mov	sl, r3
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	2404      	movs	r4, #4
 8000f2e:	9303      	str	r3, [sp, #12]
 8000f30:	e646      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000f32:	2301      	movs	r3, #1
 8000f34:	431c      	orrs	r4, r3
 8000f36:	2300      	movs	r3, #0
 8000f38:	469b      	mov	fp, r3
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	e660      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	2480      	movs	r4, #128	@ 0x80
 8000f42:	4698      	mov	r8, r3
 8000f44:	2600      	movs	r6, #0
 8000f46:	4b92      	ldr	r3, [pc, #584]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000f48:	0324      	lsls	r4, r4, #12
 8000f4a:	e671      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4252      	negs	r2, r2
 8000f50:	2101      	movs	r1, #1
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	2938      	cmp	r1, #56	@ 0x38
 8000f56:	dd00      	ble.n	8000f5a <__aeabi_ddiv+0x3ea>
 8000f58:	e666      	b.n	8000c28 <__aeabi_ddiv+0xb8>
 8000f5a:	291f      	cmp	r1, #31
 8000f5c:	dc00      	bgt.n	8000f60 <__aeabi_ddiv+0x3f0>
 8000f5e:	e0ab      	b.n	80010b8 <__aeabi_ddiv+0x548>
 8000f60:	201f      	movs	r0, #31
 8000f62:	4240      	negs	r0, r0
 8000f64:	1ac3      	subs	r3, r0, r3
 8000f66:	4658      	mov	r0, fp
 8000f68:	40d8      	lsrs	r0, r3
 8000f6a:	0003      	movs	r3, r0
 8000f6c:	2920      	cmp	r1, #32
 8000f6e:	d004      	beq.n	8000f7a <__aeabi_ddiv+0x40a>
 8000f70:	4658      	mov	r0, fp
 8000f72:	4988      	ldr	r1, [pc, #544]	@ (8001194 <__aeabi_ddiv+0x624>)
 8000f74:	4451      	add	r1, sl
 8000f76:	4088      	lsls	r0, r1
 8000f78:	4302      	orrs	r2, r0
 8000f7a:	1e51      	subs	r1, r2, #1
 8000f7c:	418a      	sbcs	r2, r1
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	2307      	movs	r3, #7
 8000f82:	0019      	movs	r1, r3
 8000f84:	2400      	movs	r4, #0
 8000f86:	4011      	ands	r1, r2
 8000f88:	4213      	tst	r3, r2
 8000f8a:	d00c      	beq.n	8000fa6 <__aeabi_ddiv+0x436>
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d100      	bne.n	8000f96 <__aeabi_ddiv+0x426>
 8000f94:	e0f9      	b.n	800118a <__aeabi_ddiv+0x61a>
 8000f96:	1d11      	adds	r1, r2, #4
 8000f98:	4291      	cmp	r1, r2
 8000f9a:	419b      	sbcs	r3, r3
 8000f9c:	000a      	movs	r2, r1
 8000f9e:	425b      	negs	r3, r3
 8000fa0:	0759      	lsls	r1, r3, #29
 8000fa2:	025b      	lsls	r3, r3, #9
 8000fa4:	0b1c      	lsrs	r4, r3, #12
 8000fa6:	08d2      	lsrs	r2, r2, #3
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	4690      	mov	r8, r2
 8000fac:	2300      	movs	r3, #0
 8000fae:	e63f      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fb0:	2480      	movs	r4, #128	@ 0x80
 8000fb2:	464b      	mov	r3, r9
 8000fb4:	0324      	lsls	r4, r4, #12
 8000fb6:	4223      	tst	r3, r4
 8000fb8:	d009      	beq.n	8000fce <__aeabi_ddiv+0x45e>
 8000fba:	465b      	mov	r3, fp
 8000fbc:	4223      	tst	r3, r4
 8000fbe:	d106      	bne.n	8000fce <__aeabi_ddiv+0x45e>
 8000fc0:	431c      	orrs	r4, r3
 8000fc2:	0324      	lsls	r4, r4, #12
 8000fc4:	002e      	movs	r6, r5
 8000fc6:	4690      	mov	r8, r2
 8000fc8:	4b71      	ldr	r3, [pc, #452]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000fca:	0b24      	lsrs	r4, r4, #12
 8000fcc:	e630      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fce:	2480      	movs	r4, #128	@ 0x80
 8000fd0:	464b      	mov	r3, r9
 8000fd2:	0324      	lsls	r4, r4, #12
 8000fd4:	431c      	orrs	r4, r3
 8000fd6:	0324      	lsls	r4, r4, #12
 8000fd8:	9e02      	ldr	r6, [sp, #8]
 8000fda:	4b6d      	ldr	r3, [pc, #436]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000fdc:	0b24      	lsrs	r4, r4, #12
 8000fde:	e627      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_ddiv+0x476>
 8000fe4:	e700      	b.n	8000de8 <__aeabi_ddiv+0x278>
 8000fe6:	9800      	ldr	r0, [sp, #0]
 8000fe8:	1e51      	subs	r1, r2, #1
 8000fea:	4684      	mov	ip, r0
 8000fec:	4464      	add	r4, ip
 8000fee:	4284      	cmp	r4, r0
 8000ff0:	d200      	bcs.n	8000ff4 <__aeabi_ddiv+0x484>
 8000ff2:	e084      	b.n	80010fe <__aeabi_ddiv+0x58e>
 8000ff4:	42bc      	cmp	r4, r7
 8000ff6:	d200      	bcs.n	8000ffa <__aeabi_ddiv+0x48a>
 8000ff8:	e0ae      	b.n	8001158 <__aeabi_ddiv+0x5e8>
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_ddiv+0x48e>
 8000ffc:	e0c1      	b.n	8001182 <__aeabi_ddiv+0x612>
 8000ffe:	000a      	movs	r2, r1
 8001000:	e6f0      	b.n	8000de4 <__aeabi_ddiv+0x274>
 8001002:	4542      	cmp	r2, r8
 8001004:	d900      	bls.n	8001008 <__aeabi_ddiv+0x498>
 8001006:	e62c      	b.n	8000c62 <__aeabi_ddiv+0xf2>
 8001008:	464b      	mov	r3, r9
 800100a:	07dc      	lsls	r4, r3, #31
 800100c:	0858      	lsrs	r0, r3, #1
 800100e:	4643      	mov	r3, r8
 8001010:	085b      	lsrs	r3, r3, #1
 8001012:	431c      	orrs	r4, r3
 8001014:	4643      	mov	r3, r8
 8001016:	07df      	lsls	r7, r3, #31
 8001018:	e62a      	b.n	8000c70 <__aeabi_ddiv+0x100>
 800101a:	f001 f901 	bl	8002220 <__clzsi2>
 800101e:	2315      	movs	r3, #21
 8001020:	469c      	mov	ip, r3
 8001022:	4484      	add	ip, r0
 8001024:	0002      	movs	r2, r0
 8001026:	4663      	mov	r3, ip
 8001028:	3220      	adds	r2, #32
 800102a:	2b1c      	cmp	r3, #28
 800102c:	dc00      	bgt.n	8001030 <__aeabi_ddiv+0x4c0>
 800102e:	e72e      	b.n	8000e8e <__aeabi_ddiv+0x31e>
 8001030:	0023      	movs	r3, r4
 8001032:	3808      	subs	r0, #8
 8001034:	4083      	lsls	r3, r0
 8001036:	4699      	mov	r9, r3
 8001038:	2300      	movs	r3, #0
 800103a:	4698      	mov	r8, r3
 800103c:	e736      	b.n	8000eac <__aeabi_ddiv+0x33c>
 800103e:	f001 f8ef 	bl	8002220 <__clzsi2>
 8001042:	0002      	movs	r2, r0
 8001044:	0003      	movs	r3, r0
 8001046:	3215      	adds	r2, #21
 8001048:	3320      	adds	r3, #32
 800104a:	2a1c      	cmp	r2, #28
 800104c:	dc00      	bgt.n	8001050 <__aeabi_ddiv+0x4e0>
 800104e:	e6fb      	b.n	8000e48 <__aeabi_ddiv+0x2d8>
 8001050:	9900      	ldr	r1, [sp, #0]
 8001052:	3808      	subs	r0, #8
 8001054:	4081      	lsls	r1, r0
 8001056:	2200      	movs	r2, #0
 8001058:	468b      	mov	fp, r1
 800105a:	e702      	b.n	8000e62 <__aeabi_ddiv+0x2f2>
 800105c:	9900      	ldr	r1, [sp, #0]
 800105e:	3b01      	subs	r3, #1
 8001060:	468c      	mov	ip, r1
 8001062:	4464      	add	r4, ip
 8001064:	42a1      	cmp	r1, r4
 8001066:	d900      	bls.n	800106a <__aeabi_ddiv+0x4fa>
 8001068:	e69a      	b.n	8000da0 <__aeabi_ddiv+0x230>
 800106a:	42a2      	cmp	r2, r4
 800106c:	d800      	bhi.n	8001070 <__aeabi_ddiv+0x500>
 800106e:	e697      	b.n	8000da0 <__aeabi_ddiv+0x230>
 8001070:	1e83      	subs	r3, r0, #2
 8001072:	4464      	add	r4, ip
 8001074:	e694      	b.n	8000da0 <__aeabi_ddiv+0x230>
 8001076:	46ac      	mov	ip, r5
 8001078:	4461      	add	r1, ip
 800107a:	3f01      	subs	r7, #1
 800107c:	428d      	cmp	r5, r1
 800107e:	d900      	bls.n	8001082 <__aeabi_ddiv+0x512>
 8001080:	e680      	b.n	8000d84 <__aeabi_ddiv+0x214>
 8001082:	428a      	cmp	r2, r1
 8001084:	d800      	bhi.n	8001088 <__aeabi_ddiv+0x518>
 8001086:	e67d      	b.n	8000d84 <__aeabi_ddiv+0x214>
 8001088:	1e87      	subs	r7, r0, #2
 800108a:	4461      	add	r1, ip
 800108c:	e67a      	b.n	8000d84 <__aeabi_ddiv+0x214>
 800108e:	4285      	cmp	r5, r0
 8001090:	d000      	beq.n	8001094 <__aeabi_ddiv+0x524>
 8001092:	e65f      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 8001094:	45b9      	cmp	r9, r7
 8001096:	d900      	bls.n	800109a <__aeabi_ddiv+0x52a>
 8001098:	e65c      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 800109a:	e656      	b.n	8000d4a <__aeabi_ddiv+0x1da>
 800109c:	42a2      	cmp	r2, r4
 800109e:	d800      	bhi.n	80010a2 <__aeabi_ddiv+0x532>
 80010a0:	e61a      	b.n	8000cd8 <__aeabi_ddiv+0x168>
 80010a2:	1e83      	subs	r3, r0, #2
 80010a4:	4464      	add	r4, ip
 80010a6:	e617      	b.n	8000cd8 <__aeabi_ddiv+0x168>
 80010a8:	428a      	cmp	r2, r1
 80010aa:	d800      	bhi.n	80010ae <__aeabi_ddiv+0x53e>
 80010ac:	e600      	b.n	8000cb0 <__aeabi_ddiv+0x140>
 80010ae:	46ac      	mov	ip, r5
 80010b0:	1e83      	subs	r3, r0, #2
 80010b2:	4698      	mov	r8, r3
 80010b4:	4461      	add	r1, ip
 80010b6:	e5fb      	b.n	8000cb0 <__aeabi_ddiv+0x140>
 80010b8:	4837      	ldr	r0, [pc, #220]	@ (8001198 <__aeabi_ddiv+0x628>)
 80010ba:	0014      	movs	r4, r2
 80010bc:	4450      	add	r0, sl
 80010be:	4082      	lsls	r2, r0
 80010c0:	465b      	mov	r3, fp
 80010c2:	0017      	movs	r7, r2
 80010c4:	4083      	lsls	r3, r0
 80010c6:	40cc      	lsrs	r4, r1
 80010c8:	1e7a      	subs	r2, r7, #1
 80010ca:	4197      	sbcs	r7, r2
 80010cc:	4323      	orrs	r3, r4
 80010ce:	433b      	orrs	r3, r7
 80010d0:	001a      	movs	r2, r3
 80010d2:	465b      	mov	r3, fp
 80010d4:	40cb      	lsrs	r3, r1
 80010d6:	0751      	lsls	r1, r2, #29
 80010d8:	d009      	beq.n	80010ee <__aeabi_ddiv+0x57e>
 80010da:	210f      	movs	r1, #15
 80010dc:	4011      	ands	r1, r2
 80010de:	2904      	cmp	r1, #4
 80010e0:	d005      	beq.n	80010ee <__aeabi_ddiv+0x57e>
 80010e2:	1d11      	adds	r1, r2, #4
 80010e4:	4291      	cmp	r1, r2
 80010e6:	4192      	sbcs	r2, r2
 80010e8:	4252      	negs	r2, r2
 80010ea:	189b      	adds	r3, r3, r2
 80010ec:	000a      	movs	r2, r1
 80010ee:	0219      	lsls	r1, r3, #8
 80010f0:	d400      	bmi.n	80010f4 <__aeabi_ddiv+0x584>
 80010f2:	e755      	b.n	8000fa0 <__aeabi_ddiv+0x430>
 80010f4:	2200      	movs	r2, #0
 80010f6:	2301      	movs	r3, #1
 80010f8:	2400      	movs	r4, #0
 80010fa:	4690      	mov	r8, r2
 80010fc:	e598      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 80010fe:	000a      	movs	r2, r1
 8001100:	42bc      	cmp	r4, r7
 8001102:	d000      	beq.n	8001106 <__aeabi_ddiv+0x596>
 8001104:	e66e      	b.n	8000de4 <__aeabi_ddiv+0x274>
 8001106:	454b      	cmp	r3, r9
 8001108:	d000      	beq.n	800110c <__aeabi_ddiv+0x59c>
 800110a:	e66b      	b.n	8000de4 <__aeabi_ddiv+0x274>
 800110c:	e66c      	b.n	8000de8 <__aeabi_ddiv+0x278>
 800110e:	4b23      	ldr	r3, [pc, #140]	@ (800119c <__aeabi_ddiv+0x62c>)
 8001110:	4a23      	ldr	r2, [pc, #140]	@ (80011a0 <__aeabi_ddiv+0x630>)
 8001112:	4453      	add	r3, sl
 8001114:	4592      	cmp	sl, r2
 8001116:	da00      	bge.n	800111a <__aeabi_ddiv+0x5aa>
 8001118:	e718      	b.n	8000f4c <__aeabi_ddiv+0x3dc>
 800111a:	2101      	movs	r1, #1
 800111c:	4249      	negs	r1, r1
 800111e:	1d0a      	adds	r2, r1, #4
 8001120:	428a      	cmp	r2, r1
 8001122:	4189      	sbcs	r1, r1
 8001124:	4249      	negs	r1, r1
 8001126:	448b      	add	fp, r1
 8001128:	e666      	b.n	8000df8 <__aeabi_ddiv+0x288>
 800112a:	210f      	movs	r1, #15
 800112c:	4011      	ands	r1, r2
 800112e:	2904      	cmp	r1, #4
 8001130:	d100      	bne.n	8001134 <__aeabi_ddiv+0x5c4>
 8001132:	e661      	b.n	8000df8 <__aeabi_ddiv+0x288>
 8001134:	0011      	movs	r1, r2
 8001136:	e7f2      	b.n	800111e <__aeabi_ddiv+0x5ae>
 8001138:	42bc      	cmp	r4, r7
 800113a:	d800      	bhi.n	800113e <__aeabi_ddiv+0x5ce>
 800113c:	e60a      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 800113e:	2302      	movs	r3, #2
 8001140:	425b      	negs	r3, r3
 8001142:	469c      	mov	ip, r3
 8001144:	9900      	ldr	r1, [sp, #0]
 8001146:	444f      	add	r7, r9
 8001148:	454f      	cmp	r7, r9
 800114a:	419b      	sbcs	r3, r3
 800114c:	44e3      	add	fp, ip
 800114e:	468c      	mov	ip, r1
 8001150:	425b      	negs	r3, r3
 8001152:	4463      	add	r3, ip
 8001154:	18c0      	adds	r0, r0, r3
 8001156:	e5ff      	b.n	8000d58 <__aeabi_ddiv+0x1e8>
 8001158:	4649      	mov	r1, r9
 800115a:	9d00      	ldr	r5, [sp, #0]
 800115c:	0048      	lsls	r0, r1, #1
 800115e:	4548      	cmp	r0, r9
 8001160:	4189      	sbcs	r1, r1
 8001162:	46ac      	mov	ip, r5
 8001164:	4249      	negs	r1, r1
 8001166:	4461      	add	r1, ip
 8001168:	4681      	mov	r9, r0
 800116a:	3a02      	subs	r2, #2
 800116c:	1864      	adds	r4, r4, r1
 800116e:	e7c7      	b.n	8001100 <__aeabi_ddiv+0x590>
 8001170:	2480      	movs	r4, #128	@ 0x80
 8001172:	465b      	mov	r3, fp
 8001174:	0324      	lsls	r4, r4, #12
 8001176:	431c      	orrs	r4, r3
 8001178:	0324      	lsls	r4, r4, #12
 800117a:	4690      	mov	r8, r2
 800117c:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <__aeabi_ddiv+0x620>)
 800117e:	0b24      	lsrs	r4, r4, #12
 8001180:	e556      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8001182:	4599      	cmp	r9, r3
 8001184:	d3e8      	bcc.n	8001158 <__aeabi_ddiv+0x5e8>
 8001186:	000a      	movs	r2, r1
 8001188:	e7bd      	b.n	8001106 <__aeabi_ddiv+0x596>
 800118a:	2300      	movs	r3, #0
 800118c:	e708      	b.n	8000fa0 <__aeabi_ddiv+0x430>
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	000007ff 	.word	0x000007ff
 8001194:	0000043e 	.word	0x0000043e
 8001198:	0000041e 	.word	0x0000041e
 800119c:	000003ff 	.word	0x000003ff
 80011a0:	fffffc02 	.word	0xfffffc02

080011a4 <__eqdf2>:
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	4657      	mov	r7, sl
 80011a8:	46de      	mov	lr, fp
 80011aa:	464e      	mov	r6, r9
 80011ac:	4645      	mov	r5, r8
 80011ae:	b5e0      	push	{r5, r6, r7, lr}
 80011b0:	000d      	movs	r5, r1
 80011b2:	0004      	movs	r4, r0
 80011b4:	0fe8      	lsrs	r0, r5, #31
 80011b6:	4683      	mov	fp, r0
 80011b8:	0309      	lsls	r1, r1, #12
 80011ba:	0fd8      	lsrs	r0, r3, #31
 80011bc:	0b09      	lsrs	r1, r1, #12
 80011be:	4682      	mov	sl, r0
 80011c0:	4819      	ldr	r0, [pc, #100]	@ (8001228 <__eqdf2+0x84>)
 80011c2:	468c      	mov	ip, r1
 80011c4:	031f      	lsls	r7, r3, #12
 80011c6:	0069      	lsls	r1, r5, #1
 80011c8:	005e      	lsls	r6, r3, #1
 80011ca:	0d49      	lsrs	r1, r1, #21
 80011cc:	0b3f      	lsrs	r7, r7, #12
 80011ce:	0d76      	lsrs	r6, r6, #21
 80011d0:	4281      	cmp	r1, r0
 80011d2:	d018      	beq.n	8001206 <__eqdf2+0x62>
 80011d4:	4286      	cmp	r6, r0
 80011d6:	d00f      	beq.n	80011f8 <__eqdf2+0x54>
 80011d8:	2001      	movs	r0, #1
 80011da:	42b1      	cmp	r1, r6
 80011dc:	d10d      	bne.n	80011fa <__eqdf2+0x56>
 80011de:	45bc      	cmp	ip, r7
 80011e0:	d10b      	bne.n	80011fa <__eqdf2+0x56>
 80011e2:	4294      	cmp	r4, r2
 80011e4:	d109      	bne.n	80011fa <__eqdf2+0x56>
 80011e6:	45d3      	cmp	fp, sl
 80011e8:	d01c      	beq.n	8001224 <__eqdf2+0x80>
 80011ea:	2900      	cmp	r1, #0
 80011ec:	d105      	bne.n	80011fa <__eqdf2+0x56>
 80011ee:	4660      	mov	r0, ip
 80011f0:	4320      	orrs	r0, r4
 80011f2:	1e43      	subs	r3, r0, #1
 80011f4:	4198      	sbcs	r0, r3
 80011f6:	e000      	b.n	80011fa <__eqdf2+0x56>
 80011f8:	2001      	movs	r0, #1
 80011fa:	bcf0      	pop	{r4, r5, r6, r7}
 80011fc:	46bb      	mov	fp, r7
 80011fe:	46b2      	mov	sl, r6
 8001200:	46a9      	mov	r9, r5
 8001202:	46a0      	mov	r8, r4
 8001204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001206:	2001      	movs	r0, #1
 8001208:	428e      	cmp	r6, r1
 800120a:	d1f6      	bne.n	80011fa <__eqdf2+0x56>
 800120c:	4661      	mov	r1, ip
 800120e:	4339      	orrs	r1, r7
 8001210:	000f      	movs	r7, r1
 8001212:	4317      	orrs	r7, r2
 8001214:	4327      	orrs	r7, r4
 8001216:	d1f0      	bne.n	80011fa <__eqdf2+0x56>
 8001218:	465b      	mov	r3, fp
 800121a:	4652      	mov	r2, sl
 800121c:	1a98      	subs	r0, r3, r2
 800121e:	1e43      	subs	r3, r0, #1
 8001220:	4198      	sbcs	r0, r3
 8001222:	e7ea      	b.n	80011fa <__eqdf2+0x56>
 8001224:	2000      	movs	r0, #0
 8001226:	e7e8      	b.n	80011fa <__eqdf2+0x56>
 8001228:	000007ff 	.word	0x000007ff

0800122c <__gedf2>:
 800122c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122e:	4657      	mov	r7, sl
 8001230:	464e      	mov	r6, r9
 8001232:	4645      	mov	r5, r8
 8001234:	46de      	mov	lr, fp
 8001236:	b5e0      	push	{r5, r6, r7, lr}
 8001238:	000d      	movs	r5, r1
 800123a:	030f      	lsls	r7, r1, #12
 800123c:	0b39      	lsrs	r1, r7, #12
 800123e:	b083      	sub	sp, #12
 8001240:	0004      	movs	r4, r0
 8001242:	4680      	mov	r8, r0
 8001244:	9101      	str	r1, [sp, #4]
 8001246:	0058      	lsls	r0, r3, #1
 8001248:	0fe9      	lsrs	r1, r5, #31
 800124a:	4f31      	ldr	r7, [pc, #196]	@ (8001310 <__gedf2+0xe4>)
 800124c:	0d40      	lsrs	r0, r0, #21
 800124e:	468c      	mov	ip, r1
 8001250:	006e      	lsls	r6, r5, #1
 8001252:	0319      	lsls	r1, r3, #12
 8001254:	4682      	mov	sl, r0
 8001256:	4691      	mov	r9, r2
 8001258:	0d76      	lsrs	r6, r6, #21
 800125a:	0b09      	lsrs	r1, r1, #12
 800125c:	0fd8      	lsrs	r0, r3, #31
 800125e:	42be      	cmp	r6, r7
 8001260:	d01f      	beq.n	80012a2 <__gedf2+0x76>
 8001262:	45ba      	cmp	sl, r7
 8001264:	d00f      	beq.n	8001286 <__gedf2+0x5a>
 8001266:	2e00      	cmp	r6, #0
 8001268:	d12f      	bne.n	80012ca <__gedf2+0x9e>
 800126a:	4655      	mov	r5, sl
 800126c:	9e01      	ldr	r6, [sp, #4]
 800126e:	4334      	orrs	r4, r6
 8001270:	2d00      	cmp	r5, #0
 8001272:	d127      	bne.n	80012c4 <__gedf2+0x98>
 8001274:	430a      	orrs	r2, r1
 8001276:	d03a      	beq.n	80012ee <__gedf2+0xc2>
 8001278:	2c00      	cmp	r4, #0
 800127a:	d145      	bne.n	8001308 <__gedf2+0xdc>
 800127c:	2800      	cmp	r0, #0
 800127e:	d11a      	bne.n	80012b6 <__gedf2+0x8a>
 8001280:	2001      	movs	r0, #1
 8001282:	4240      	negs	r0, r0
 8001284:	e017      	b.n	80012b6 <__gedf2+0x8a>
 8001286:	4311      	orrs	r1, r2
 8001288:	d13b      	bne.n	8001302 <__gedf2+0xd6>
 800128a:	2e00      	cmp	r6, #0
 800128c:	d102      	bne.n	8001294 <__gedf2+0x68>
 800128e:	9f01      	ldr	r7, [sp, #4]
 8001290:	4327      	orrs	r7, r4
 8001292:	d0f3      	beq.n	800127c <__gedf2+0x50>
 8001294:	4584      	cmp	ip, r0
 8001296:	d109      	bne.n	80012ac <__gedf2+0x80>
 8001298:	4663      	mov	r3, ip
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f0      	beq.n	8001280 <__gedf2+0x54>
 800129e:	4660      	mov	r0, ip
 80012a0:	e009      	b.n	80012b6 <__gedf2+0x8a>
 80012a2:	9f01      	ldr	r7, [sp, #4]
 80012a4:	4327      	orrs	r7, r4
 80012a6:	d12c      	bne.n	8001302 <__gedf2+0xd6>
 80012a8:	45b2      	cmp	sl, r6
 80012aa:	d024      	beq.n	80012f6 <__gedf2+0xca>
 80012ac:	4663      	mov	r3, ip
 80012ae:	2002      	movs	r0, #2
 80012b0:	3b01      	subs	r3, #1
 80012b2:	4018      	ands	r0, r3
 80012b4:	3801      	subs	r0, #1
 80012b6:	b003      	add	sp, #12
 80012b8:	bcf0      	pop	{r4, r5, r6, r7}
 80012ba:	46bb      	mov	fp, r7
 80012bc:	46b2      	mov	sl, r6
 80012be:	46a9      	mov	r9, r5
 80012c0:	46a0      	mov	r8, r4
 80012c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c4:	2c00      	cmp	r4, #0
 80012c6:	d0d9      	beq.n	800127c <__gedf2+0x50>
 80012c8:	e7e4      	b.n	8001294 <__gedf2+0x68>
 80012ca:	4654      	mov	r4, sl
 80012cc:	2c00      	cmp	r4, #0
 80012ce:	d0ed      	beq.n	80012ac <__gedf2+0x80>
 80012d0:	4584      	cmp	ip, r0
 80012d2:	d1eb      	bne.n	80012ac <__gedf2+0x80>
 80012d4:	4556      	cmp	r6, sl
 80012d6:	dce9      	bgt.n	80012ac <__gedf2+0x80>
 80012d8:	dbde      	blt.n	8001298 <__gedf2+0x6c>
 80012da:	9b01      	ldr	r3, [sp, #4]
 80012dc:	428b      	cmp	r3, r1
 80012de:	d8e5      	bhi.n	80012ac <__gedf2+0x80>
 80012e0:	d1da      	bne.n	8001298 <__gedf2+0x6c>
 80012e2:	45c8      	cmp	r8, r9
 80012e4:	d8e2      	bhi.n	80012ac <__gedf2+0x80>
 80012e6:	2000      	movs	r0, #0
 80012e8:	45c8      	cmp	r8, r9
 80012ea:	d2e4      	bcs.n	80012b6 <__gedf2+0x8a>
 80012ec:	e7d4      	b.n	8001298 <__gedf2+0x6c>
 80012ee:	2000      	movs	r0, #0
 80012f0:	2c00      	cmp	r4, #0
 80012f2:	d0e0      	beq.n	80012b6 <__gedf2+0x8a>
 80012f4:	e7da      	b.n	80012ac <__gedf2+0x80>
 80012f6:	4311      	orrs	r1, r2
 80012f8:	d103      	bne.n	8001302 <__gedf2+0xd6>
 80012fa:	4584      	cmp	ip, r0
 80012fc:	d1d6      	bne.n	80012ac <__gedf2+0x80>
 80012fe:	2000      	movs	r0, #0
 8001300:	e7d9      	b.n	80012b6 <__gedf2+0x8a>
 8001302:	2002      	movs	r0, #2
 8001304:	4240      	negs	r0, r0
 8001306:	e7d6      	b.n	80012b6 <__gedf2+0x8a>
 8001308:	4584      	cmp	ip, r0
 800130a:	d0e6      	beq.n	80012da <__gedf2+0xae>
 800130c:	e7ce      	b.n	80012ac <__gedf2+0x80>
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	000007ff 	.word	0x000007ff

08001314 <__ledf2>:
 8001314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001316:	4657      	mov	r7, sl
 8001318:	464e      	mov	r6, r9
 800131a:	4645      	mov	r5, r8
 800131c:	46de      	mov	lr, fp
 800131e:	b5e0      	push	{r5, r6, r7, lr}
 8001320:	000d      	movs	r5, r1
 8001322:	030f      	lsls	r7, r1, #12
 8001324:	0004      	movs	r4, r0
 8001326:	4680      	mov	r8, r0
 8001328:	0fe8      	lsrs	r0, r5, #31
 800132a:	0b39      	lsrs	r1, r7, #12
 800132c:	4684      	mov	ip, r0
 800132e:	b083      	sub	sp, #12
 8001330:	0058      	lsls	r0, r3, #1
 8001332:	4f30      	ldr	r7, [pc, #192]	@ (80013f4 <__ledf2+0xe0>)
 8001334:	0d40      	lsrs	r0, r0, #21
 8001336:	9101      	str	r1, [sp, #4]
 8001338:	031e      	lsls	r6, r3, #12
 800133a:	0069      	lsls	r1, r5, #1
 800133c:	4682      	mov	sl, r0
 800133e:	4691      	mov	r9, r2
 8001340:	0d49      	lsrs	r1, r1, #21
 8001342:	0b36      	lsrs	r6, r6, #12
 8001344:	0fd8      	lsrs	r0, r3, #31
 8001346:	42b9      	cmp	r1, r7
 8001348:	d020      	beq.n	800138c <__ledf2+0x78>
 800134a:	45ba      	cmp	sl, r7
 800134c:	d00f      	beq.n	800136e <__ledf2+0x5a>
 800134e:	2900      	cmp	r1, #0
 8001350:	d12b      	bne.n	80013aa <__ledf2+0x96>
 8001352:	9901      	ldr	r1, [sp, #4]
 8001354:	430c      	orrs	r4, r1
 8001356:	4651      	mov	r1, sl
 8001358:	2900      	cmp	r1, #0
 800135a:	d137      	bne.n	80013cc <__ledf2+0xb8>
 800135c:	4332      	orrs	r2, r6
 800135e:	d038      	beq.n	80013d2 <__ledf2+0xbe>
 8001360:	2c00      	cmp	r4, #0
 8001362:	d144      	bne.n	80013ee <__ledf2+0xda>
 8001364:	2800      	cmp	r0, #0
 8001366:	d119      	bne.n	800139c <__ledf2+0x88>
 8001368:	2001      	movs	r0, #1
 800136a:	4240      	negs	r0, r0
 800136c:	e016      	b.n	800139c <__ledf2+0x88>
 800136e:	4316      	orrs	r6, r2
 8001370:	d113      	bne.n	800139a <__ledf2+0x86>
 8001372:	2900      	cmp	r1, #0
 8001374:	d102      	bne.n	800137c <__ledf2+0x68>
 8001376:	9f01      	ldr	r7, [sp, #4]
 8001378:	4327      	orrs	r7, r4
 800137a:	d0f3      	beq.n	8001364 <__ledf2+0x50>
 800137c:	4584      	cmp	ip, r0
 800137e:	d020      	beq.n	80013c2 <__ledf2+0xae>
 8001380:	4663      	mov	r3, ip
 8001382:	2002      	movs	r0, #2
 8001384:	3b01      	subs	r3, #1
 8001386:	4018      	ands	r0, r3
 8001388:	3801      	subs	r0, #1
 800138a:	e007      	b.n	800139c <__ledf2+0x88>
 800138c:	9f01      	ldr	r7, [sp, #4]
 800138e:	4327      	orrs	r7, r4
 8001390:	d103      	bne.n	800139a <__ledf2+0x86>
 8001392:	458a      	cmp	sl, r1
 8001394:	d1f4      	bne.n	8001380 <__ledf2+0x6c>
 8001396:	4316      	orrs	r6, r2
 8001398:	d01f      	beq.n	80013da <__ledf2+0xc6>
 800139a:	2002      	movs	r0, #2
 800139c:	b003      	add	sp, #12
 800139e:	bcf0      	pop	{r4, r5, r6, r7}
 80013a0:	46bb      	mov	fp, r7
 80013a2:	46b2      	mov	sl, r6
 80013a4:	46a9      	mov	r9, r5
 80013a6:	46a0      	mov	r8, r4
 80013a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013aa:	4654      	mov	r4, sl
 80013ac:	2c00      	cmp	r4, #0
 80013ae:	d0e7      	beq.n	8001380 <__ledf2+0x6c>
 80013b0:	4584      	cmp	ip, r0
 80013b2:	d1e5      	bne.n	8001380 <__ledf2+0x6c>
 80013b4:	4551      	cmp	r1, sl
 80013b6:	dce3      	bgt.n	8001380 <__ledf2+0x6c>
 80013b8:	db03      	blt.n	80013c2 <__ledf2+0xae>
 80013ba:	9b01      	ldr	r3, [sp, #4]
 80013bc:	42b3      	cmp	r3, r6
 80013be:	d8df      	bhi.n	8001380 <__ledf2+0x6c>
 80013c0:	d00f      	beq.n	80013e2 <__ledf2+0xce>
 80013c2:	4663      	mov	r3, ip
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0cf      	beq.n	8001368 <__ledf2+0x54>
 80013c8:	4660      	mov	r0, ip
 80013ca:	e7e7      	b.n	800139c <__ledf2+0x88>
 80013cc:	2c00      	cmp	r4, #0
 80013ce:	d0c9      	beq.n	8001364 <__ledf2+0x50>
 80013d0:	e7d4      	b.n	800137c <__ledf2+0x68>
 80013d2:	2000      	movs	r0, #0
 80013d4:	2c00      	cmp	r4, #0
 80013d6:	d0e1      	beq.n	800139c <__ledf2+0x88>
 80013d8:	e7d2      	b.n	8001380 <__ledf2+0x6c>
 80013da:	4584      	cmp	ip, r0
 80013dc:	d1d0      	bne.n	8001380 <__ledf2+0x6c>
 80013de:	2000      	movs	r0, #0
 80013e0:	e7dc      	b.n	800139c <__ledf2+0x88>
 80013e2:	45c8      	cmp	r8, r9
 80013e4:	d8cc      	bhi.n	8001380 <__ledf2+0x6c>
 80013e6:	2000      	movs	r0, #0
 80013e8:	45c8      	cmp	r8, r9
 80013ea:	d2d7      	bcs.n	800139c <__ledf2+0x88>
 80013ec:	e7e9      	b.n	80013c2 <__ledf2+0xae>
 80013ee:	4584      	cmp	ip, r0
 80013f0:	d0e3      	beq.n	80013ba <__ledf2+0xa6>
 80013f2:	e7c5      	b.n	8001380 <__ledf2+0x6c>
 80013f4:	000007ff 	.word	0x000007ff

080013f8 <__aeabi_dmul>:
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	4657      	mov	r7, sl
 80013fc:	46de      	mov	lr, fp
 80013fe:	464e      	mov	r6, r9
 8001400:	4645      	mov	r5, r8
 8001402:	b5e0      	push	{r5, r6, r7, lr}
 8001404:	001f      	movs	r7, r3
 8001406:	030b      	lsls	r3, r1, #12
 8001408:	0b1b      	lsrs	r3, r3, #12
 800140a:	0016      	movs	r6, r2
 800140c:	469a      	mov	sl, r3
 800140e:	0fca      	lsrs	r2, r1, #31
 8001410:	004b      	lsls	r3, r1, #1
 8001412:	0004      	movs	r4, r0
 8001414:	4693      	mov	fp, r2
 8001416:	b087      	sub	sp, #28
 8001418:	0d5b      	lsrs	r3, r3, #21
 800141a:	d100      	bne.n	800141e <__aeabi_dmul+0x26>
 800141c:	e0d5      	b.n	80015ca <__aeabi_dmul+0x1d2>
 800141e:	4abb      	ldr	r2, [pc, #748]	@ (800170c <__aeabi_dmul+0x314>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d100      	bne.n	8001426 <__aeabi_dmul+0x2e>
 8001424:	e0f8      	b.n	8001618 <__aeabi_dmul+0x220>
 8001426:	4651      	mov	r1, sl
 8001428:	0f42      	lsrs	r2, r0, #29
 800142a:	00c9      	lsls	r1, r1, #3
 800142c:	430a      	orrs	r2, r1
 800142e:	2180      	movs	r1, #128	@ 0x80
 8001430:	0409      	lsls	r1, r1, #16
 8001432:	4311      	orrs	r1, r2
 8001434:	00c2      	lsls	r2, r0, #3
 8001436:	4691      	mov	r9, r2
 8001438:	4ab5      	ldr	r2, [pc, #724]	@ (8001710 <__aeabi_dmul+0x318>)
 800143a:	468a      	mov	sl, r1
 800143c:	189d      	adds	r5, r3, r2
 800143e:	2300      	movs	r3, #0
 8001440:	4698      	mov	r8, r3
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	033c      	lsls	r4, r7, #12
 8001446:	007b      	lsls	r3, r7, #1
 8001448:	0ffa      	lsrs	r2, r7, #31
 800144a:	0030      	movs	r0, r6
 800144c:	0b24      	lsrs	r4, r4, #12
 800144e:	0d5b      	lsrs	r3, r3, #21
 8001450:	9200      	str	r2, [sp, #0]
 8001452:	d100      	bne.n	8001456 <__aeabi_dmul+0x5e>
 8001454:	e096      	b.n	8001584 <__aeabi_dmul+0x18c>
 8001456:	4aad      	ldr	r2, [pc, #692]	@ (800170c <__aeabi_dmul+0x314>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d031      	beq.n	80014c0 <__aeabi_dmul+0xc8>
 800145c:	0f72      	lsrs	r2, r6, #29
 800145e:	00e4      	lsls	r4, r4, #3
 8001460:	4322      	orrs	r2, r4
 8001462:	2480      	movs	r4, #128	@ 0x80
 8001464:	0424      	lsls	r4, r4, #16
 8001466:	4314      	orrs	r4, r2
 8001468:	4aa9      	ldr	r2, [pc, #676]	@ (8001710 <__aeabi_dmul+0x318>)
 800146a:	00f0      	lsls	r0, r6, #3
 800146c:	4694      	mov	ip, r2
 800146e:	4463      	add	r3, ip
 8001470:	195b      	adds	r3, r3, r5
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	9201      	str	r2, [sp, #4]
 8001476:	4642      	mov	r2, r8
 8001478:	2600      	movs	r6, #0
 800147a:	2a0a      	cmp	r2, #10
 800147c:	dc42      	bgt.n	8001504 <__aeabi_dmul+0x10c>
 800147e:	465a      	mov	r2, fp
 8001480:	9900      	ldr	r1, [sp, #0]
 8001482:	404a      	eors	r2, r1
 8001484:	4693      	mov	fp, r2
 8001486:	4642      	mov	r2, r8
 8001488:	2a02      	cmp	r2, #2
 800148a:	dc32      	bgt.n	80014f2 <__aeabi_dmul+0xfa>
 800148c:	3a01      	subs	r2, #1
 800148e:	2a01      	cmp	r2, #1
 8001490:	d900      	bls.n	8001494 <__aeabi_dmul+0x9c>
 8001492:	e149      	b.n	8001728 <__aeabi_dmul+0x330>
 8001494:	2e02      	cmp	r6, #2
 8001496:	d100      	bne.n	800149a <__aeabi_dmul+0xa2>
 8001498:	e0ca      	b.n	8001630 <__aeabi_dmul+0x238>
 800149a:	2e01      	cmp	r6, #1
 800149c:	d13d      	bne.n	800151a <__aeabi_dmul+0x122>
 800149e:	2300      	movs	r3, #0
 80014a0:	2400      	movs	r4, #0
 80014a2:	2200      	movs	r2, #0
 80014a4:	0010      	movs	r0, r2
 80014a6:	465a      	mov	r2, fp
 80014a8:	051b      	lsls	r3, r3, #20
 80014aa:	4323      	orrs	r3, r4
 80014ac:	07d2      	lsls	r2, r2, #31
 80014ae:	4313      	orrs	r3, r2
 80014b0:	0019      	movs	r1, r3
 80014b2:	b007      	add	sp, #28
 80014b4:	bcf0      	pop	{r4, r5, r6, r7}
 80014b6:	46bb      	mov	fp, r7
 80014b8:	46b2      	mov	sl, r6
 80014ba:	46a9      	mov	r9, r5
 80014bc:	46a0      	mov	r8, r4
 80014be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c0:	4b92      	ldr	r3, [pc, #584]	@ (800170c <__aeabi_dmul+0x314>)
 80014c2:	4326      	orrs	r6, r4
 80014c4:	18eb      	adds	r3, r5, r3
 80014c6:	2e00      	cmp	r6, #0
 80014c8:	d100      	bne.n	80014cc <__aeabi_dmul+0xd4>
 80014ca:	e0bb      	b.n	8001644 <__aeabi_dmul+0x24c>
 80014cc:	2203      	movs	r2, #3
 80014ce:	4641      	mov	r1, r8
 80014d0:	4311      	orrs	r1, r2
 80014d2:	465a      	mov	r2, fp
 80014d4:	4688      	mov	r8, r1
 80014d6:	9900      	ldr	r1, [sp, #0]
 80014d8:	404a      	eors	r2, r1
 80014da:	2180      	movs	r1, #128	@ 0x80
 80014dc:	0109      	lsls	r1, r1, #4
 80014de:	468c      	mov	ip, r1
 80014e0:	0029      	movs	r1, r5
 80014e2:	4461      	add	r1, ip
 80014e4:	9101      	str	r1, [sp, #4]
 80014e6:	4641      	mov	r1, r8
 80014e8:	290a      	cmp	r1, #10
 80014ea:	dd00      	ble.n	80014ee <__aeabi_dmul+0xf6>
 80014ec:	e233      	b.n	8001956 <__aeabi_dmul+0x55e>
 80014ee:	4693      	mov	fp, r2
 80014f0:	2603      	movs	r6, #3
 80014f2:	4642      	mov	r2, r8
 80014f4:	2701      	movs	r7, #1
 80014f6:	4097      	lsls	r7, r2
 80014f8:	21a6      	movs	r1, #166	@ 0xa6
 80014fa:	003a      	movs	r2, r7
 80014fc:	00c9      	lsls	r1, r1, #3
 80014fe:	400a      	ands	r2, r1
 8001500:	420f      	tst	r7, r1
 8001502:	d031      	beq.n	8001568 <__aeabi_dmul+0x170>
 8001504:	9e02      	ldr	r6, [sp, #8]
 8001506:	2e02      	cmp	r6, #2
 8001508:	d100      	bne.n	800150c <__aeabi_dmul+0x114>
 800150a:	e235      	b.n	8001978 <__aeabi_dmul+0x580>
 800150c:	2e03      	cmp	r6, #3
 800150e:	d100      	bne.n	8001512 <__aeabi_dmul+0x11a>
 8001510:	e1d2      	b.n	80018b8 <__aeabi_dmul+0x4c0>
 8001512:	4654      	mov	r4, sl
 8001514:	4648      	mov	r0, r9
 8001516:	2e01      	cmp	r6, #1
 8001518:	d0c1      	beq.n	800149e <__aeabi_dmul+0xa6>
 800151a:	9a01      	ldr	r2, [sp, #4]
 800151c:	4b7d      	ldr	r3, [pc, #500]	@ (8001714 <__aeabi_dmul+0x31c>)
 800151e:	4694      	mov	ip, r2
 8001520:	4463      	add	r3, ip
 8001522:	2b00      	cmp	r3, #0
 8001524:	dc00      	bgt.n	8001528 <__aeabi_dmul+0x130>
 8001526:	e0c0      	b.n	80016aa <__aeabi_dmul+0x2b2>
 8001528:	0742      	lsls	r2, r0, #29
 800152a:	d009      	beq.n	8001540 <__aeabi_dmul+0x148>
 800152c:	220f      	movs	r2, #15
 800152e:	4002      	ands	r2, r0
 8001530:	2a04      	cmp	r2, #4
 8001532:	d005      	beq.n	8001540 <__aeabi_dmul+0x148>
 8001534:	1d02      	adds	r2, r0, #4
 8001536:	4282      	cmp	r2, r0
 8001538:	4180      	sbcs	r0, r0
 800153a:	4240      	negs	r0, r0
 800153c:	1824      	adds	r4, r4, r0
 800153e:	0010      	movs	r0, r2
 8001540:	01e2      	lsls	r2, r4, #7
 8001542:	d506      	bpl.n	8001552 <__aeabi_dmul+0x15a>
 8001544:	4b74      	ldr	r3, [pc, #464]	@ (8001718 <__aeabi_dmul+0x320>)
 8001546:	9a01      	ldr	r2, [sp, #4]
 8001548:	401c      	ands	r4, r3
 800154a:	2380      	movs	r3, #128	@ 0x80
 800154c:	4694      	mov	ip, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4463      	add	r3, ip
 8001552:	4a72      	ldr	r2, [pc, #456]	@ (800171c <__aeabi_dmul+0x324>)
 8001554:	4293      	cmp	r3, r2
 8001556:	dc6b      	bgt.n	8001630 <__aeabi_dmul+0x238>
 8001558:	0762      	lsls	r2, r4, #29
 800155a:	08c0      	lsrs	r0, r0, #3
 800155c:	0264      	lsls	r4, r4, #9
 800155e:	055b      	lsls	r3, r3, #21
 8001560:	4302      	orrs	r2, r0
 8001562:	0b24      	lsrs	r4, r4, #12
 8001564:	0d5b      	lsrs	r3, r3, #21
 8001566:	e79d      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001568:	2190      	movs	r1, #144	@ 0x90
 800156a:	0089      	lsls	r1, r1, #2
 800156c:	420f      	tst	r7, r1
 800156e:	d163      	bne.n	8001638 <__aeabi_dmul+0x240>
 8001570:	2288      	movs	r2, #136	@ 0x88
 8001572:	423a      	tst	r2, r7
 8001574:	d100      	bne.n	8001578 <__aeabi_dmul+0x180>
 8001576:	e0d7      	b.n	8001728 <__aeabi_dmul+0x330>
 8001578:	9b00      	ldr	r3, [sp, #0]
 800157a:	46a2      	mov	sl, r4
 800157c:	469b      	mov	fp, r3
 800157e:	4681      	mov	r9, r0
 8001580:	9602      	str	r6, [sp, #8]
 8001582:	e7bf      	b.n	8001504 <__aeabi_dmul+0x10c>
 8001584:	0023      	movs	r3, r4
 8001586:	4333      	orrs	r3, r6
 8001588:	d100      	bne.n	800158c <__aeabi_dmul+0x194>
 800158a:	e07f      	b.n	800168c <__aeabi_dmul+0x294>
 800158c:	2c00      	cmp	r4, #0
 800158e:	d100      	bne.n	8001592 <__aeabi_dmul+0x19a>
 8001590:	e1ad      	b.n	80018ee <__aeabi_dmul+0x4f6>
 8001592:	0020      	movs	r0, r4
 8001594:	f000 fe44 	bl	8002220 <__clzsi2>
 8001598:	0002      	movs	r2, r0
 800159a:	0003      	movs	r3, r0
 800159c:	3a0b      	subs	r2, #11
 800159e:	201d      	movs	r0, #29
 80015a0:	0019      	movs	r1, r3
 80015a2:	1a82      	subs	r2, r0, r2
 80015a4:	0030      	movs	r0, r6
 80015a6:	3908      	subs	r1, #8
 80015a8:	40d0      	lsrs	r0, r2
 80015aa:	408c      	lsls	r4, r1
 80015ac:	4304      	orrs	r4, r0
 80015ae:	0030      	movs	r0, r6
 80015b0:	4088      	lsls	r0, r1
 80015b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001720 <__aeabi_dmul+0x328>)
 80015b4:	1aeb      	subs	r3, r5, r3
 80015b6:	4694      	mov	ip, r2
 80015b8:	4463      	add	r3, ip
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	9201      	str	r2, [sp, #4]
 80015be:	4642      	mov	r2, r8
 80015c0:	2600      	movs	r6, #0
 80015c2:	2a0a      	cmp	r2, #10
 80015c4:	dc00      	bgt.n	80015c8 <__aeabi_dmul+0x1d0>
 80015c6:	e75a      	b.n	800147e <__aeabi_dmul+0x86>
 80015c8:	e79c      	b.n	8001504 <__aeabi_dmul+0x10c>
 80015ca:	4653      	mov	r3, sl
 80015cc:	4303      	orrs	r3, r0
 80015ce:	4699      	mov	r9, r3
 80015d0:	d054      	beq.n	800167c <__aeabi_dmul+0x284>
 80015d2:	4653      	mov	r3, sl
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d100      	bne.n	80015da <__aeabi_dmul+0x1e2>
 80015d8:	e177      	b.n	80018ca <__aeabi_dmul+0x4d2>
 80015da:	4650      	mov	r0, sl
 80015dc:	f000 fe20 	bl	8002220 <__clzsi2>
 80015e0:	230b      	movs	r3, #11
 80015e2:	425b      	negs	r3, r3
 80015e4:	469c      	mov	ip, r3
 80015e6:	0002      	movs	r2, r0
 80015e8:	4484      	add	ip, r0
 80015ea:	0011      	movs	r1, r2
 80015ec:	4650      	mov	r0, sl
 80015ee:	3908      	subs	r1, #8
 80015f0:	4088      	lsls	r0, r1
 80015f2:	231d      	movs	r3, #29
 80015f4:	4680      	mov	r8, r0
 80015f6:	4660      	mov	r0, ip
 80015f8:	1a1b      	subs	r3, r3, r0
 80015fa:	0020      	movs	r0, r4
 80015fc:	40d8      	lsrs	r0, r3
 80015fe:	0003      	movs	r3, r0
 8001600:	4640      	mov	r0, r8
 8001602:	4303      	orrs	r3, r0
 8001604:	469a      	mov	sl, r3
 8001606:	0023      	movs	r3, r4
 8001608:	408b      	lsls	r3, r1
 800160a:	4699      	mov	r9, r3
 800160c:	2300      	movs	r3, #0
 800160e:	4d44      	ldr	r5, [pc, #272]	@ (8001720 <__aeabi_dmul+0x328>)
 8001610:	4698      	mov	r8, r3
 8001612:	1aad      	subs	r5, r5, r2
 8001614:	9302      	str	r3, [sp, #8]
 8001616:	e715      	b.n	8001444 <__aeabi_dmul+0x4c>
 8001618:	4652      	mov	r2, sl
 800161a:	4302      	orrs	r2, r0
 800161c:	4691      	mov	r9, r2
 800161e:	d126      	bne.n	800166e <__aeabi_dmul+0x276>
 8001620:	2200      	movs	r2, #0
 8001622:	001d      	movs	r5, r3
 8001624:	2302      	movs	r3, #2
 8001626:	4692      	mov	sl, r2
 8001628:	3208      	adds	r2, #8
 800162a:	4690      	mov	r8, r2
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	e709      	b.n	8001444 <__aeabi_dmul+0x4c>
 8001630:	2400      	movs	r4, #0
 8001632:	2200      	movs	r2, #0
 8001634:	4b35      	ldr	r3, [pc, #212]	@ (800170c <__aeabi_dmul+0x314>)
 8001636:	e735      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001638:	2300      	movs	r3, #0
 800163a:	2480      	movs	r4, #128	@ 0x80
 800163c:	469b      	mov	fp, r3
 800163e:	0324      	lsls	r4, r4, #12
 8001640:	4b32      	ldr	r3, [pc, #200]	@ (800170c <__aeabi_dmul+0x314>)
 8001642:	e72f      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001644:	2202      	movs	r2, #2
 8001646:	4641      	mov	r1, r8
 8001648:	4311      	orrs	r1, r2
 800164a:	2280      	movs	r2, #128	@ 0x80
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	4694      	mov	ip, r2
 8001650:	002a      	movs	r2, r5
 8001652:	4462      	add	r2, ip
 8001654:	4688      	mov	r8, r1
 8001656:	9201      	str	r2, [sp, #4]
 8001658:	290a      	cmp	r1, #10
 800165a:	dd00      	ble.n	800165e <__aeabi_dmul+0x266>
 800165c:	e752      	b.n	8001504 <__aeabi_dmul+0x10c>
 800165e:	465a      	mov	r2, fp
 8001660:	2000      	movs	r0, #0
 8001662:	9900      	ldr	r1, [sp, #0]
 8001664:	0004      	movs	r4, r0
 8001666:	404a      	eors	r2, r1
 8001668:	4693      	mov	fp, r2
 800166a:	2602      	movs	r6, #2
 800166c:	e70b      	b.n	8001486 <__aeabi_dmul+0x8e>
 800166e:	220c      	movs	r2, #12
 8001670:	001d      	movs	r5, r3
 8001672:	2303      	movs	r3, #3
 8001674:	4681      	mov	r9, r0
 8001676:	4690      	mov	r8, r2
 8001678:	9302      	str	r3, [sp, #8]
 800167a:	e6e3      	b.n	8001444 <__aeabi_dmul+0x4c>
 800167c:	2300      	movs	r3, #0
 800167e:	469a      	mov	sl, r3
 8001680:	3304      	adds	r3, #4
 8001682:	4698      	mov	r8, r3
 8001684:	3b03      	subs	r3, #3
 8001686:	2500      	movs	r5, #0
 8001688:	9302      	str	r3, [sp, #8]
 800168a:	e6db      	b.n	8001444 <__aeabi_dmul+0x4c>
 800168c:	4642      	mov	r2, r8
 800168e:	3301      	adds	r3, #1
 8001690:	431a      	orrs	r2, r3
 8001692:	002b      	movs	r3, r5
 8001694:	4690      	mov	r8, r2
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	9201      	str	r2, [sp, #4]
 800169a:	4642      	mov	r2, r8
 800169c:	2400      	movs	r4, #0
 800169e:	2000      	movs	r0, #0
 80016a0:	2601      	movs	r6, #1
 80016a2:	2a0a      	cmp	r2, #10
 80016a4:	dc00      	bgt.n	80016a8 <__aeabi_dmul+0x2b0>
 80016a6:	e6ea      	b.n	800147e <__aeabi_dmul+0x86>
 80016a8:	e72c      	b.n	8001504 <__aeabi_dmul+0x10c>
 80016aa:	2201      	movs	r2, #1
 80016ac:	1ad2      	subs	r2, r2, r3
 80016ae:	2a38      	cmp	r2, #56	@ 0x38
 80016b0:	dd00      	ble.n	80016b4 <__aeabi_dmul+0x2bc>
 80016b2:	e6f4      	b.n	800149e <__aeabi_dmul+0xa6>
 80016b4:	2a1f      	cmp	r2, #31
 80016b6:	dc00      	bgt.n	80016ba <__aeabi_dmul+0x2c2>
 80016b8:	e12a      	b.n	8001910 <__aeabi_dmul+0x518>
 80016ba:	211f      	movs	r1, #31
 80016bc:	4249      	negs	r1, r1
 80016be:	1acb      	subs	r3, r1, r3
 80016c0:	0021      	movs	r1, r4
 80016c2:	40d9      	lsrs	r1, r3
 80016c4:	000b      	movs	r3, r1
 80016c6:	2a20      	cmp	r2, #32
 80016c8:	d005      	beq.n	80016d6 <__aeabi_dmul+0x2de>
 80016ca:	4a16      	ldr	r2, [pc, #88]	@ (8001724 <__aeabi_dmul+0x32c>)
 80016cc:	9d01      	ldr	r5, [sp, #4]
 80016ce:	4694      	mov	ip, r2
 80016d0:	4465      	add	r5, ip
 80016d2:	40ac      	lsls	r4, r5
 80016d4:	4320      	orrs	r0, r4
 80016d6:	1e42      	subs	r2, r0, #1
 80016d8:	4190      	sbcs	r0, r2
 80016da:	4318      	orrs	r0, r3
 80016dc:	2307      	movs	r3, #7
 80016de:	0019      	movs	r1, r3
 80016e0:	2400      	movs	r4, #0
 80016e2:	4001      	ands	r1, r0
 80016e4:	4203      	tst	r3, r0
 80016e6:	d00c      	beq.n	8001702 <__aeabi_dmul+0x30a>
 80016e8:	230f      	movs	r3, #15
 80016ea:	4003      	ands	r3, r0
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d100      	bne.n	80016f2 <__aeabi_dmul+0x2fa>
 80016f0:	e140      	b.n	8001974 <__aeabi_dmul+0x57c>
 80016f2:	1d03      	adds	r3, r0, #4
 80016f4:	4283      	cmp	r3, r0
 80016f6:	41a4      	sbcs	r4, r4
 80016f8:	0018      	movs	r0, r3
 80016fa:	4264      	negs	r4, r4
 80016fc:	0761      	lsls	r1, r4, #29
 80016fe:	0264      	lsls	r4, r4, #9
 8001700:	0b24      	lsrs	r4, r4, #12
 8001702:	08c2      	lsrs	r2, r0, #3
 8001704:	2300      	movs	r3, #0
 8001706:	430a      	orrs	r2, r1
 8001708:	e6cc      	b.n	80014a4 <__aeabi_dmul+0xac>
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	000007ff 	.word	0x000007ff
 8001710:	fffffc01 	.word	0xfffffc01
 8001714:	000003ff 	.word	0x000003ff
 8001718:	feffffff 	.word	0xfeffffff
 800171c:	000007fe 	.word	0x000007fe
 8001720:	fffffc0d 	.word	0xfffffc0d
 8001724:	0000043e 	.word	0x0000043e
 8001728:	4649      	mov	r1, r9
 800172a:	464a      	mov	r2, r9
 800172c:	0409      	lsls	r1, r1, #16
 800172e:	0c09      	lsrs	r1, r1, #16
 8001730:	000d      	movs	r5, r1
 8001732:	0c16      	lsrs	r6, r2, #16
 8001734:	0c02      	lsrs	r2, r0, #16
 8001736:	0400      	lsls	r0, r0, #16
 8001738:	0c00      	lsrs	r0, r0, #16
 800173a:	4345      	muls	r5, r0
 800173c:	46ac      	mov	ip, r5
 800173e:	0005      	movs	r5, r0
 8001740:	4375      	muls	r5, r6
 8001742:	46a8      	mov	r8, r5
 8001744:	0015      	movs	r5, r2
 8001746:	000f      	movs	r7, r1
 8001748:	4375      	muls	r5, r6
 800174a:	9200      	str	r2, [sp, #0]
 800174c:	9502      	str	r5, [sp, #8]
 800174e:	002a      	movs	r2, r5
 8001750:	9d00      	ldr	r5, [sp, #0]
 8001752:	436f      	muls	r7, r5
 8001754:	4665      	mov	r5, ip
 8001756:	0c2d      	lsrs	r5, r5, #16
 8001758:	46a9      	mov	r9, r5
 800175a:	4447      	add	r7, r8
 800175c:	444f      	add	r7, r9
 800175e:	45b8      	cmp	r8, r7
 8001760:	d905      	bls.n	800176e <__aeabi_dmul+0x376>
 8001762:	0015      	movs	r5, r2
 8001764:	2280      	movs	r2, #128	@ 0x80
 8001766:	0252      	lsls	r2, r2, #9
 8001768:	4690      	mov	r8, r2
 800176a:	4445      	add	r5, r8
 800176c:	9502      	str	r5, [sp, #8]
 800176e:	0c3d      	lsrs	r5, r7, #16
 8001770:	9503      	str	r5, [sp, #12]
 8001772:	4665      	mov	r5, ip
 8001774:	042d      	lsls	r5, r5, #16
 8001776:	043f      	lsls	r7, r7, #16
 8001778:	0c2d      	lsrs	r5, r5, #16
 800177a:	46ac      	mov	ip, r5
 800177c:	003d      	movs	r5, r7
 800177e:	4465      	add	r5, ip
 8001780:	9504      	str	r5, [sp, #16]
 8001782:	0c25      	lsrs	r5, r4, #16
 8001784:	0424      	lsls	r4, r4, #16
 8001786:	0c24      	lsrs	r4, r4, #16
 8001788:	46ac      	mov	ip, r5
 800178a:	0025      	movs	r5, r4
 800178c:	4375      	muls	r5, r6
 800178e:	46a8      	mov	r8, r5
 8001790:	4665      	mov	r5, ip
 8001792:	000f      	movs	r7, r1
 8001794:	4369      	muls	r1, r5
 8001796:	4441      	add	r1, r8
 8001798:	4689      	mov	r9, r1
 800179a:	4367      	muls	r7, r4
 800179c:	0c39      	lsrs	r1, r7, #16
 800179e:	4449      	add	r1, r9
 80017a0:	436e      	muls	r6, r5
 80017a2:	4588      	cmp	r8, r1
 80017a4:	d903      	bls.n	80017ae <__aeabi_dmul+0x3b6>
 80017a6:	2280      	movs	r2, #128	@ 0x80
 80017a8:	0252      	lsls	r2, r2, #9
 80017aa:	4690      	mov	r8, r2
 80017ac:	4446      	add	r6, r8
 80017ae:	0c0d      	lsrs	r5, r1, #16
 80017b0:	46a8      	mov	r8, r5
 80017b2:	0035      	movs	r5, r6
 80017b4:	4445      	add	r5, r8
 80017b6:	9505      	str	r5, [sp, #20]
 80017b8:	9d03      	ldr	r5, [sp, #12]
 80017ba:	043f      	lsls	r7, r7, #16
 80017bc:	46a8      	mov	r8, r5
 80017be:	0c3f      	lsrs	r7, r7, #16
 80017c0:	0409      	lsls	r1, r1, #16
 80017c2:	19c9      	adds	r1, r1, r7
 80017c4:	4488      	add	r8, r1
 80017c6:	4645      	mov	r5, r8
 80017c8:	9503      	str	r5, [sp, #12]
 80017ca:	4655      	mov	r5, sl
 80017cc:	042e      	lsls	r6, r5, #16
 80017ce:	0c36      	lsrs	r6, r6, #16
 80017d0:	0c2f      	lsrs	r7, r5, #16
 80017d2:	0035      	movs	r5, r6
 80017d4:	4345      	muls	r5, r0
 80017d6:	4378      	muls	r0, r7
 80017d8:	4681      	mov	r9, r0
 80017da:	0038      	movs	r0, r7
 80017dc:	46a8      	mov	r8, r5
 80017de:	0c2d      	lsrs	r5, r5, #16
 80017e0:	46aa      	mov	sl, r5
 80017e2:	9a00      	ldr	r2, [sp, #0]
 80017e4:	4350      	muls	r0, r2
 80017e6:	4372      	muls	r2, r6
 80017e8:	444a      	add	r2, r9
 80017ea:	4452      	add	r2, sl
 80017ec:	4591      	cmp	r9, r2
 80017ee:	d903      	bls.n	80017f8 <__aeabi_dmul+0x400>
 80017f0:	2580      	movs	r5, #128	@ 0x80
 80017f2:	026d      	lsls	r5, r5, #9
 80017f4:	46a9      	mov	r9, r5
 80017f6:	4448      	add	r0, r9
 80017f8:	0c15      	lsrs	r5, r2, #16
 80017fa:	46a9      	mov	r9, r5
 80017fc:	4645      	mov	r5, r8
 80017fe:	042d      	lsls	r5, r5, #16
 8001800:	0c2d      	lsrs	r5, r5, #16
 8001802:	46a8      	mov	r8, r5
 8001804:	4665      	mov	r5, ip
 8001806:	437d      	muls	r5, r7
 8001808:	0412      	lsls	r2, r2, #16
 800180a:	4448      	add	r0, r9
 800180c:	4490      	add	r8, r2
 800180e:	46a9      	mov	r9, r5
 8001810:	0032      	movs	r2, r6
 8001812:	4665      	mov	r5, ip
 8001814:	4362      	muls	r2, r4
 8001816:	436e      	muls	r6, r5
 8001818:	437c      	muls	r4, r7
 800181a:	0c17      	lsrs	r7, r2, #16
 800181c:	1936      	adds	r6, r6, r4
 800181e:	19bf      	adds	r7, r7, r6
 8001820:	42bc      	cmp	r4, r7
 8001822:	d903      	bls.n	800182c <__aeabi_dmul+0x434>
 8001824:	2480      	movs	r4, #128	@ 0x80
 8001826:	0264      	lsls	r4, r4, #9
 8001828:	46a4      	mov	ip, r4
 800182a:	44e1      	add	r9, ip
 800182c:	9c02      	ldr	r4, [sp, #8]
 800182e:	9e03      	ldr	r6, [sp, #12]
 8001830:	46a4      	mov	ip, r4
 8001832:	9d05      	ldr	r5, [sp, #20]
 8001834:	4466      	add	r6, ip
 8001836:	428e      	cmp	r6, r1
 8001838:	4189      	sbcs	r1, r1
 800183a:	46ac      	mov	ip, r5
 800183c:	0412      	lsls	r2, r2, #16
 800183e:	043c      	lsls	r4, r7, #16
 8001840:	0c12      	lsrs	r2, r2, #16
 8001842:	18a2      	adds	r2, r4, r2
 8001844:	4462      	add	r2, ip
 8001846:	4249      	negs	r1, r1
 8001848:	1854      	adds	r4, r2, r1
 800184a:	4446      	add	r6, r8
 800184c:	46a4      	mov	ip, r4
 800184e:	4546      	cmp	r6, r8
 8001850:	41a4      	sbcs	r4, r4
 8001852:	4682      	mov	sl, r0
 8001854:	4264      	negs	r4, r4
 8001856:	46a0      	mov	r8, r4
 8001858:	42aa      	cmp	r2, r5
 800185a:	4192      	sbcs	r2, r2
 800185c:	458c      	cmp	ip, r1
 800185e:	4189      	sbcs	r1, r1
 8001860:	44e2      	add	sl, ip
 8001862:	44d0      	add	r8, sl
 8001864:	4249      	negs	r1, r1
 8001866:	4252      	negs	r2, r2
 8001868:	430a      	orrs	r2, r1
 800186a:	45a0      	cmp	r8, r4
 800186c:	41a4      	sbcs	r4, r4
 800186e:	4582      	cmp	sl, r0
 8001870:	4189      	sbcs	r1, r1
 8001872:	4264      	negs	r4, r4
 8001874:	4249      	negs	r1, r1
 8001876:	430c      	orrs	r4, r1
 8001878:	4641      	mov	r1, r8
 800187a:	0c3f      	lsrs	r7, r7, #16
 800187c:	19d2      	adds	r2, r2, r7
 800187e:	1912      	adds	r2, r2, r4
 8001880:	0dcc      	lsrs	r4, r1, #23
 8001882:	9904      	ldr	r1, [sp, #16]
 8001884:	0270      	lsls	r0, r6, #9
 8001886:	4308      	orrs	r0, r1
 8001888:	1e41      	subs	r1, r0, #1
 800188a:	4188      	sbcs	r0, r1
 800188c:	4641      	mov	r1, r8
 800188e:	444a      	add	r2, r9
 8001890:	0df6      	lsrs	r6, r6, #23
 8001892:	0252      	lsls	r2, r2, #9
 8001894:	4330      	orrs	r0, r6
 8001896:	0249      	lsls	r1, r1, #9
 8001898:	4314      	orrs	r4, r2
 800189a:	4308      	orrs	r0, r1
 800189c:	01d2      	lsls	r2, r2, #7
 800189e:	d535      	bpl.n	800190c <__aeabi_dmul+0x514>
 80018a0:	2201      	movs	r2, #1
 80018a2:	0843      	lsrs	r3, r0, #1
 80018a4:	4002      	ands	r2, r0
 80018a6:	4313      	orrs	r3, r2
 80018a8:	07e0      	lsls	r0, r4, #31
 80018aa:	4318      	orrs	r0, r3
 80018ac:	0864      	lsrs	r4, r4, #1
 80018ae:	e634      	b.n	800151a <__aeabi_dmul+0x122>
 80018b0:	9b00      	ldr	r3, [sp, #0]
 80018b2:	46a2      	mov	sl, r4
 80018b4:	469b      	mov	fp, r3
 80018b6:	4681      	mov	r9, r0
 80018b8:	2480      	movs	r4, #128	@ 0x80
 80018ba:	4653      	mov	r3, sl
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	431c      	orrs	r4, r3
 80018c0:	0324      	lsls	r4, r4, #12
 80018c2:	464a      	mov	r2, r9
 80018c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001980 <__aeabi_dmul+0x588>)
 80018c6:	0b24      	lsrs	r4, r4, #12
 80018c8:	e5ec      	b.n	80014a4 <__aeabi_dmul+0xac>
 80018ca:	f000 fca9 	bl	8002220 <__clzsi2>
 80018ce:	2315      	movs	r3, #21
 80018d0:	469c      	mov	ip, r3
 80018d2:	4484      	add	ip, r0
 80018d4:	0002      	movs	r2, r0
 80018d6:	4663      	mov	r3, ip
 80018d8:	3220      	adds	r2, #32
 80018da:	2b1c      	cmp	r3, #28
 80018dc:	dc00      	bgt.n	80018e0 <__aeabi_dmul+0x4e8>
 80018de:	e684      	b.n	80015ea <__aeabi_dmul+0x1f2>
 80018e0:	2300      	movs	r3, #0
 80018e2:	4699      	mov	r9, r3
 80018e4:	0023      	movs	r3, r4
 80018e6:	3808      	subs	r0, #8
 80018e8:	4083      	lsls	r3, r0
 80018ea:	469a      	mov	sl, r3
 80018ec:	e68e      	b.n	800160c <__aeabi_dmul+0x214>
 80018ee:	f000 fc97 	bl	8002220 <__clzsi2>
 80018f2:	0002      	movs	r2, r0
 80018f4:	0003      	movs	r3, r0
 80018f6:	3215      	adds	r2, #21
 80018f8:	3320      	adds	r3, #32
 80018fa:	2a1c      	cmp	r2, #28
 80018fc:	dc00      	bgt.n	8001900 <__aeabi_dmul+0x508>
 80018fe:	e64e      	b.n	800159e <__aeabi_dmul+0x1a6>
 8001900:	0002      	movs	r2, r0
 8001902:	0034      	movs	r4, r6
 8001904:	3a08      	subs	r2, #8
 8001906:	2000      	movs	r0, #0
 8001908:	4094      	lsls	r4, r2
 800190a:	e652      	b.n	80015b2 <__aeabi_dmul+0x1ba>
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	e604      	b.n	800151a <__aeabi_dmul+0x122>
 8001910:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <__aeabi_dmul+0x58c>)
 8001912:	0021      	movs	r1, r4
 8001914:	469c      	mov	ip, r3
 8001916:	0003      	movs	r3, r0
 8001918:	9d01      	ldr	r5, [sp, #4]
 800191a:	40d3      	lsrs	r3, r2
 800191c:	4465      	add	r5, ip
 800191e:	40a9      	lsls	r1, r5
 8001920:	4319      	orrs	r1, r3
 8001922:	0003      	movs	r3, r0
 8001924:	40ab      	lsls	r3, r5
 8001926:	1e58      	subs	r0, r3, #1
 8001928:	4183      	sbcs	r3, r0
 800192a:	4319      	orrs	r1, r3
 800192c:	0008      	movs	r0, r1
 800192e:	40d4      	lsrs	r4, r2
 8001930:	074b      	lsls	r3, r1, #29
 8001932:	d009      	beq.n	8001948 <__aeabi_dmul+0x550>
 8001934:	230f      	movs	r3, #15
 8001936:	400b      	ands	r3, r1
 8001938:	2b04      	cmp	r3, #4
 800193a:	d005      	beq.n	8001948 <__aeabi_dmul+0x550>
 800193c:	1d0b      	adds	r3, r1, #4
 800193e:	428b      	cmp	r3, r1
 8001940:	4180      	sbcs	r0, r0
 8001942:	4240      	negs	r0, r0
 8001944:	1824      	adds	r4, r4, r0
 8001946:	0018      	movs	r0, r3
 8001948:	0223      	lsls	r3, r4, #8
 800194a:	d400      	bmi.n	800194e <__aeabi_dmul+0x556>
 800194c:	e6d6      	b.n	80016fc <__aeabi_dmul+0x304>
 800194e:	2301      	movs	r3, #1
 8001950:	2400      	movs	r4, #0
 8001952:	2200      	movs	r2, #0
 8001954:	e5a6      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001956:	290f      	cmp	r1, #15
 8001958:	d1aa      	bne.n	80018b0 <__aeabi_dmul+0x4b8>
 800195a:	2380      	movs	r3, #128	@ 0x80
 800195c:	4652      	mov	r2, sl
 800195e:	031b      	lsls	r3, r3, #12
 8001960:	421a      	tst	r2, r3
 8001962:	d0a9      	beq.n	80018b8 <__aeabi_dmul+0x4c0>
 8001964:	421c      	tst	r4, r3
 8001966:	d1a7      	bne.n	80018b8 <__aeabi_dmul+0x4c0>
 8001968:	431c      	orrs	r4, r3
 800196a:	9b00      	ldr	r3, [sp, #0]
 800196c:	0002      	movs	r2, r0
 800196e:	469b      	mov	fp, r3
 8001970:	4b03      	ldr	r3, [pc, #12]	@ (8001980 <__aeabi_dmul+0x588>)
 8001972:	e597      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001974:	2400      	movs	r4, #0
 8001976:	e6c1      	b.n	80016fc <__aeabi_dmul+0x304>
 8001978:	2400      	movs	r4, #0
 800197a:	4b01      	ldr	r3, [pc, #4]	@ (8001980 <__aeabi_dmul+0x588>)
 800197c:	0022      	movs	r2, r4
 800197e:	e591      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001980:	000007ff 	.word	0x000007ff
 8001984:	0000041e 	.word	0x0000041e

08001988 <__aeabi_dsub>:
 8001988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198a:	464e      	mov	r6, r9
 800198c:	4645      	mov	r5, r8
 800198e:	46de      	mov	lr, fp
 8001990:	4657      	mov	r7, sl
 8001992:	b5e0      	push	{r5, r6, r7, lr}
 8001994:	b085      	sub	sp, #20
 8001996:	9000      	str	r0, [sp, #0]
 8001998:	9101      	str	r1, [sp, #4]
 800199a:	030c      	lsls	r4, r1, #12
 800199c:	004f      	lsls	r7, r1, #1
 800199e:	0fce      	lsrs	r6, r1, #31
 80019a0:	0a61      	lsrs	r1, r4, #9
 80019a2:	9c00      	ldr	r4, [sp, #0]
 80019a4:	46b0      	mov	r8, r6
 80019a6:	0f64      	lsrs	r4, r4, #29
 80019a8:	430c      	orrs	r4, r1
 80019aa:	9900      	ldr	r1, [sp, #0]
 80019ac:	0d7f      	lsrs	r7, r7, #21
 80019ae:	00c8      	lsls	r0, r1, #3
 80019b0:	0011      	movs	r1, r2
 80019b2:	001a      	movs	r2, r3
 80019b4:	031b      	lsls	r3, r3, #12
 80019b6:	469c      	mov	ip, r3
 80019b8:	9100      	str	r1, [sp, #0]
 80019ba:	9201      	str	r2, [sp, #4]
 80019bc:	0051      	lsls	r1, r2, #1
 80019be:	0d4b      	lsrs	r3, r1, #21
 80019c0:	4699      	mov	r9, r3
 80019c2:	9b01      	ldr	r3, [sp, #4]
 80019c4:	9d00      	ldr	r5, [sp, #0]
 80019c6:	0fd9      	lsrs	r1, r3, #31
 80019c8:	4663      	mov	r3, ip
 80019ca:	0f6a      	lsrs	r2, r5, #29
 80019cc:	0a5b      	lsrs	r3, r3, #9
 80019ce:	4313      	orrs	r3, r2
 80019d0:	00ea      	lsls	r2, r5, #3
 80019d2:	4694      	mov	ip, r2
 80019d4:	4693      	mov	fp, r2
 80019d6:	4ac1      	ldr	r2, [pc, #772]	@ (8001cdc <__aeabi_dsub+0x354>)
 80019d8:	9003      	str	r0, [sp, #12]
 80019da:	9302      	str	r3, [sp, #8]
 80019dc:	4591      	cmp	r9, r2
 80019de:	d100      	bne.n	80019e2 <__aeabi_dsub+0x5a>
 80019e0:	e0cd      	b.n	8001b7e <__aeabi_dsub+0x1f6>
 80019e2:	2501      	movs	r5, #1
 80019e4:	4069      	eors	r1, r5
 80019e6:	464d      	mov	r5, r9
 80019e8:	1b7d      	subs	r5, r7, r5
 80019ea:	46aa      	mov	sl, r5
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d100      	bne.n	80019f2 <__aeabi_dsub+0x6a>
 80019f0:	e080      	b.n	8001af4 <__aeabi_dsub+0x16c>
 80019f2:	2d00      	cmp	r5, #0
 80019f4:	dc00      	bgt.n	80019f8 <__aeabi_dsub+0x70>
 80019f6:	e335      	b.n	8002064 <__aeabi_dsub+0x6dc>
 80019f8:	4649      	mov	r1, r9
 80019fa:	2900      	cmp	r1, #0
 80019fc:	d100      	bne.n	8001a00 <__aeabi_dsub+0x78>
 80019fe:	e0df      	b.n	8001bc0 <__aeabi_dsub+0x238>
 8001a00:	4297      	cmp	r7, r2
 8001a02:	d100      	bne.n	8001a06 <__aeabi_dsub+0x7e>
 8001a04:	e194      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001a06:	4652      	mov	r2, sl
 8001a08:	2501      	movs	r5, #1
 8001a0a:	2a38      	cmp	r2, #56	@ 0x38
 8001a0c:	dc19      	bgt.n	8001a42 <__aeabi_dsub+0xba>
 8001a0e:	2280      	movs	r2, #128	@ 0x80
 8001a10:	9b02      	ldr	r3, [sp, #8]
 8001a12:	0412      	lsls	r2, r2, #16
 8001a14:	4313      	orrs	r3, r2
 8001a16:	9302      	str	r3, [sp, #8]
 8001a18:	4652      	mov	r2, sl
 8001a1a:	2a1f      	cmp	r2, #31
 8001a1c:	dd00      	ble.n	8001a20 <__aeabi_dsub+0x98>
 8001a1e:	e1e3      	b.n	8001de8 <__aeabi_dsub+0x460>
 8001a20:	4653      	mov	r3, sl
 8001a22:	2220      	movs	r2, #32
 8001a24:	4661      	mov	r1, ip
 8001a26:	9d02      	ldr	r5, [sp, #8]
 8001a28:	1ad2      	subs	r2, r2, r3
 8001a2a:	4095      	lsls	r5, r2
 8001a2c:	40d9      	lsrs	r1, r3
 8001a2e:	430d      	orrs	r5, r1
 8001a30:	4661      	mov	r1, ip
 8001a32:	4091      	lsls	r1, r2
 8001a34:	000a      	movs	r2, r1
 8001a36:	1e51      	subs	r1, r2, #1
 8001a38:	418a      	sbcs	r2, r1
 8001a3a:	4315      	orrs	r5, r2
 8001a3c:	9a02      	ldr	r2, [sp, #8]
 8001a3e:	40da      	lsrs	r2, r3
 8001a40:	1aa4      	subs	r4, r4, r2
 8001a42:	1b45      	subs	r5, r0, r5
 8001a44:	42a8      	cmp	r0, r5
 8001a46:	4180      	sbcs	r0, r0
 8001a48:	4240      	negs	r0, r0
 8001a4a:	1a24      	subs	r4, r4, r0
 8001a4c:	0223      	lsls	r3, r4, #8
 8001a4e:	d400      	bmi.n	8001a52 <__aeabi_dsub+0xca>
 8001a50:	e13d      	b.n	8001cce <__aeabi_dsub+0x346>
 8001a52:	0264      	lsls	r4, r4, #9
 8001a54:	0a64      	lsrs	r4, r4, #9
 8001a56:	2c00      	cmp	r4, #0
 8001a58:	d100      	bne.n	8001a5c <__aeabi_dsub+0xd4>
 8001a5a:	e147      	b.n	8001cec <__aeabi_dsub+0x364>
 8001a5c:	0020      	movs	r0, r4
 8001a5e:	f000 fbdf 	bl	8002220 <__clzsi2>
 8001a62:	0003      	movs	r3, r0
 8001a64:	3b08      	subs	r3, #8
 8001a66:	2120      	movs	r1, #32
 8001a68:	0028      	movs	r0, r5
 8001a6a:	1aca      	subs	r2, r1, r3
 8001a6c:	40d0      	lsrs	r0, r2
 8001a6e:	409c      	lsls	r4, r3
 8001a70:	0002      	movs	r2, r0
 8001a72:	409d      	lsls	r5, r3
 8001a74:	4322      	orrs	r2, r4
 8001a76:	429f      	cmp	r7, r3
 8001a78:	dd00      	ble.n	8001a7c <__aeabi_dsub+0xf4>
 8001a7a:	e177      	b.n	8001d6c <__aeabi_dsub+0x3e4>
 8001a7c:	1bd8      	subs	r0, r3, r7
 8001a7e:	3001      	adds	r0, #1
 8001a80:	1a09      	subs	r1, r1, r0
 8001a82:	002c      	movs	r4, r5
 8001a84:	408d      	lsls	r5, r1
 8001a86:	40c4      	lsrs	r4, r0
 8001a88:	1e6b      	subs	r3, r5, #1
 8001a8a:	419d      	sbcs	r5, r3
 8001a8c:	0013      	movs	r3, r2
 8001a8e:	40c2      	lsrs	r2, r0
 8001a90:	408b      	lsls	r3, r1
 8001a92:	4325      	orrs	r5, r4
 8001a94:	2700      	movs	r7, #0
 8001a96:	0014      	movs	r4, r2
 8001a98:	431d      	orrs	r5, r3
 8001a9a:	076b      	lsls	r3, r5, #29
 8001a9c:	d009      	beq.n	8001ab2 <__aeabi_dsub+0x12a>
 8001a9e:	230f      	movs	r3, #15
 8001aa0:	402b      	ands	r3, r5
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d005      	beq.n	8001ab2 <__aeabi_dsub+0x12a>
 8001aa6:	1d2b      	adds	r3, r5, #4
 8001aa8:	42ab      	cmp	r3, r5
 8001aaa:	41ad      	sbcs	r5, r5
 8001aac:	426d      	negs	r5, r5
 8001aae:	1964      	adds	r4, r4, r5
 8001ab0:	001d      	movs	r5, r3
 8001ab2:	0223      	lsls	r3, r4, #8
 8001ab4:	d400      	bmi.n	8001ab8 <__aeabi_dsub+0x130>
 8001ab6:	e140      	b.n	8001d3a <__aeabi_dsub+0x3b2>
 8001ab8:	4a88      	ldr	r2, [pc, #544]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001aba:	3701      	adds	r7, #1
 8001abc:	4297      	cmp	r7, r2
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dsub+0x13a>
 8001ac0:	e101      	b.n	8001cc6 <__aeabi_dsub+0x33e>
 8001ac2:	2601      	movs	r6, #1
 8001ac4:	4643      	mov	r3, r8
 8001ac6:	4986      	ldr	r1, [pc, #536]	@ (8001ce0 <__aeabi_dsub+0x358>)
 8001ac8:	08ed      	lsrs	r5, r5, #3
 8001aca:	4021      	ands	r1, r4
 8001acc:	074a      	lsls	r2, r1, #29
 8001ace:	432a      	orrs	r2, r5
 8001ad0:	057c      	lsls	r4, r7, #21
 8001ad2:	024d      	lsls	r5, r1, #9
 8001ad4:	0b2d      	lsrs	r5, r5, #12
 8001ad6:	0d64      	lsrs	r4, r4, #21
 8001ad8:	401e      	ands	r6, r3
 8001ada:	0524      	lsls	r4, r4, #20
 8001adc:	432c      	orrs	r4, r5
 8001ade:	07f6      	lsls	r6, r6, #31
 8001ae0:	4334      	orrs	r4, r6
 8001ae2:	0010      	movs	r0, r2
 8001ae4:	0021      	movs	r1, r4
 8001ae6:	b005      	add	sp, #20
 8001ae8:	bcf0      	pop	{r4, r5, r6, r7}
 8001aea:	46bb      	mov	fp, r7
 8001aec:	46b2      	mov	sl, r6
 8001aee:	46a9      	mov	r9, r5
 8001af0:	46a0      	mov	r8, r4
 8001af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af4:	2d00      	cmp	r5, #0
 8001af6:	dc00      	bgt.n	8001afa <__aeabi_dsub+0x172>
 8001af8:	e2d0      	b.n	800209c <__aeabi_dsub+0x714>
 8001afa:	4649      	mov	r1, r9
 8001afc:	2900      	cmp	r1, #0
 8001afe:	d000      	beq.n	8001b02 <__aeabi_dsub+0x17a>
 8001b00:	e0d4      	b.n	8001cac <__aeabi_dsub+0x324>
 8001b02:	4661      	mov	r1, ip
 8001b04:	9b02      	ldr	r3, [sp, #8]
 8001b06:	4319      	orrs	r1, r3
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dsub+0x184>
 8001b0a:	e12b      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001b0c:	1e69      	subs	r1, r5, #1
 8001b0e:	2d01      	cmp	r5, #1
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dsub+0x18c>
 8001b12:	e1d9      	b.n	8001ec8 <__aeabi_dsub+0x540>
 8001b14:	4295      	cmp	r5, r2
 8001b16:	d100      	bne.n	8001b1a <__aeabi_dsub+0x192>
 8001b18:	e10a      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001b1a:	2501      	movs	r5, #1
 8001b1c:	2938      	cmp	r1, #56	@ 0x38
 8001b1e:	dc17      	bgt.n	8001b50 <__aeabi_dsub+0x1c8>
 8001b20:	468a      	mov	sl, r1
 8001b22:	4653      	mov	r3, sl
 8001b24:	2b1f      	cmp	r3, #31
 8001b26:	dd00      	ble.n	8001b2a <__aeabi_dsub+0x1a2>
 8001b28:	e1e7      	b.n	8001efa <__aeabi_dsub+0x572>
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	1ad2      	subs	r2, r2, r3
 8001b2e:	9b02      	ldr	r3, [sp, #8]
 8001b30:	4661      	mov	r1, ip
 8001b32:	4093      	lsls	r3, r2
 8001b34:	001d      	movs	r5, r3
 8001b36:	4653      	mov	r3, sl
 8001b38:	40d9      	lsrs	r1, r3
 8001b3a:	4663      	mov	r3, ip
 8001b3c:	4093      	lsls	r3, r2
 8001b3e:	001a      	movs	r2, r3
 8001b40:	430d      	orrs	r5, r1
 8001b42:	1e51      	subs	r1, r2, #1
 8001b44:	418a      	sbcs	r2, r1
 8001b46:	4653      	mov	r3, sl
 8001b48:	4315      	orrs	r5, r2
 8001b4a:	9a02      	ldr	r2, [sp, #8]
 8001b4c:	40da      	lsrs	r2, r3
 8001b4e:	18a4      	adds	r4, r4, r2
 8001b50:	182d      	adds	r5, r5, r0
 8001b52:	4285      	cmp	r5, r0
 8001b54:	4180      	sbcs	r0, r0
 8001b56:	4240      	negs	r0, r0
 8001b58:	1824      	adds	r4, r4, r0
 8001b5a:	0223      	lsls	r3, r4, #8
 8001b5c:	d400      	bmi.n	8001b60 <__aeabi_dsub+0x1d8>
 8001b5e:	e0b6      	b.n	8001cce <__aeabi_dsub+0x346>
 8001b60:	4b5e      	ldr	r3, [pc, #376]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001b62:	3701      	adds	r7, #1
 8001b64:	429f      	cmp	r7, r3
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dsub+0x1e2>
 8001b68:	e0ad      	b.n	8001cc6 <__aeabi_dsub+0x33e>
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	4b5c      	ldr	r3, [pc, #368]	@ (8001ce0 <__aeabi_dsub+0x358>)
 8001b6e:	086a      	lsrs	r2, r5, #1
 8001b70:	401c      	ands	r4, r3
 8001b72:	4029      	ands	r1, r5
 8001b74:	430a      	orrs	r2, r1
 8001b76:	07e5      	lsls	r5, r4, #31
 8001b78:	4315      	orrs	r5, r2
 8001b7a:	0864      	lsrs	r4, r4, #1
 8001b7c:	e78d      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001b7e:	4a59      	ldr	r2, [pc, #356]	@ (8001ce4 <__aeabi_dsub+0x35c>)
 8001b80:	9b02      	ldr	r3, [sp, #8]
 8001b82:	4692      	mov	sl, r2
 8001b84:	4662      	mov	r2, ip
 8001b86:	44ba      	add	sl, r7
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	d02c      	beq.n	8001be6 <__aeabi_dsub+0x25e>
 8001b8c:	428e      	cmp	r6, r1
 8001b8e:	d02e      	beq.n	8001bee <__aeabi_dsub+0x266>
 8001b90:	4652      	mov	r2, sl
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	d060      	beq.n	8001c58 <__aeabi_dsub+0x2d0>
 8001b96:	2f00      	cmp	r7, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x214>
 8001b9a:	e0db      	b.n	8001d54 <__aeabi_dsub+0x3cc>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	000e      	movs	r6, r1
 8001ba0:	9c02      	ldr	r4, [sp, #8]
 8001ba2:	08d8      	lsrs	r0, r3, #3
 8001ba4:	0762      	lsls	r2, r4, #29
 8001ba6:	4302      	orrs	r2, r0
 8001ba8:	08e4      	lsrs	r4, r4, #3
 8001baa:	0013      	movs	r3, r2
 8001bac:	4323      	orrs	r3, r4
 8001bae:	d100      	bne.n	8001bb2 <__aeabi_dsub+0x22a>
 8001bb0:	e254      	b.n	800205c <__aeabi_dsub+0x6d4>
 8001bb2:	2580      	movs	r5, #128	@ 0x80
 8001bb4:	032d      	lsls	r5, r5, #12
 8001bb6:	4325      	orrs	r5, r4
 8001bb8:	032d      	lsls	r5, r5, #12
 8001bba:	4c48      	ldr	r4, [pc, #288]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001bbc:	0b2d      	lsrs	r5, r5, #12
 8001bbe:	e78c      	b.n	8001ada <__aeabi_dsub+0x152>
 8001bc0:	4661      	mov	r1, ip
 8001bc2:	9b02      	ldr	r3, [sp, #8]
 8001bc4:	4319      	orrs	r1, r3
 8001bc6:	d100      	bne.n	8001bca <__aeabi_dsub+0x242>
 8001bc8:	e0cc      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001bca:	0029      	movs	r1, r5
 8001bcc:	3901      	subs	r1, #1
 8001bce:	2d01      	cmp	r5, #1
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dsub+0x24c>
 8001bd2:	e188      	b.n	8001ee6 <__aeabi_dsub+0x55e>
 8001bd4:	4295      	cmp	r5, r2
 8001bd6:	d100      	bne.n	8001bda <__aeabi_dsub+0x252>
 8001bd8:	e0aa      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001bda:	2501      	movs	r5, #1
 8001bdc:	2938      	cmp	r1, #56	@ 0x38
 8001bde:	dd00      	ble.n	8001be2 <__aeabi_dsub+0x25a>
 8001be0:	e72f      	b.n	8001a42 <__aeabi_dsub+0xba>
 8001be2:	468a      	mov	sl, r1
 8001be4:	e718      	b.n	8001a18 <__aeabi_dsub+0x90>
 8001be6:	2201      	movs	r2, #1
 8001be8:	4051      	eors	r1, r2
 8001bea:	428e      	cmp	r6, r1
 8001bec:	d1d0      	bne.n	8001b90 <__aeabi_dsub+0x208>
 8001bee:	4653      	mov	r3, sl
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dsub+0x26e>
 8001bf4:	e0be      	b.n	8001d74 <__aeabi_dsub+0x3ec>
 8001bf6:	2f00      	cmp	r7, #0
 8001bf8:	d000      	beq.n	8001bfc <__aeabi_dsub+0x274>
 8001bfa:	e138      	b.n	8001e6e <__aeabi_dsub+0x4e6>
 8001bfc:	46ca      	mov	sl, r9
 8001bfe:	0022      	movs	r2, r4
 8001c00:	4302      	orrs	r2, r0
 8001c02:	d100      	bne.n	8001c06 <__aeabi_dsub+0x27e>
 8001c04:	e1e2      	b.n	8001fcc <__aeabi_dsub+0x644>
 8001c06:	4653      	mov	r3, sl
 8001c08:	1e59      	subs	r1, r3, #1
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0x288>
 8001c0e:	e20d      	b.n	800202c <__aeabi_dsub+0x6a4>
 8001c10:	4a32      	ldr	r2, [pc, #200]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001c12:	4592      	cmp	sl, r2
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x290>
 8001c16:	e1d2      	b.n	8001fbe <__aeabi_dsub+0x636>
 8001c18:	2701      	movs	r7, #1
 8001c1a:	2938      	cmp	r1, #56	@ 0x38
 8001c1c:	dc13      	bgt.n	8001c46 <__aeabi_dsub+0x2be>
 8001c1e:	291f      	cmp	r1, #31
 8001c20:	dd00      	ble.n	8001c24 <__aeabi_dsub+0x29c>
 8001c22:	e1ee      	b.n	8002002 <__aeabi_dsub+0x67a>
 8001c24:	2220      	movs	r2, #32
 8001c26:	9b02      	ldr	r3, [sp, #8]
 8001c28:	1a52      	subs	r2, r2, r1
 8001c2a:	0025      	movs	r5, r4
 8001c2c:	0007      	movs	r7, r0
 8001c2e:	469a      	mov	sl, r3
 8001c30:	40cc      	lsrs	r4, r1
 8001c32:	4090      	lsls	r0, r2
 8001c34:	4095      	lsls	r5, r2
 8001c36:	40cf      	lsrs	r7, r1
 8001c38:	44a2      	add	sl, r4
 8001c3a:	1e42      	subs	r2, r0, #1
 8001c3c:	4190      	sbcs	r0, r2
 8001c3e:	4653      	mov	r3, sl
 8001c40:	432f      	orrs	r7, r5
 8001c42:	4307      	orrs	r7, r0
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	003d      	movs	r5, r7
 8001c48:	4465      	add	r5, ip
 8001c4a:	4565      	cmp	r5, ip
 8001c4c:	4192      	sbcs	r2, r2
 8001c4e:	9b02      	ldr	r3, [sp, #8]
 8001c50:	4252      	negs	r2, r2
 8001c52:	464f      	mov	r7, r9
 8001c54:	18d4      	adds	r4, r2, r3
 8001c56:	e780      	b.n	8001b5a <__aeabi_dsub+0x1d2>
 8001c58:	4a23      	ldr	r2, [pc, #140]	@ (8001ce8 <__aeabi_dsub+0x360>)
 8001c5a:	1c7d      	adds	r5, r7, #1
 8001c5c:	4215      	tst	r5, r2
 8001c5e:	d000      	beq.n	8001c62 <__aeabi_dsub+0x2da>
 8001c60:	e0aa      	b.n	8001db8 <__aeabi_dsub+0x430>
 8001c62:	4662      	mov	r2, ip
 8001c64:	0025      	movs	r5, r4
 8001c66:	9b02      	ldr	r3, [sp, #8]
 8001c68:	4305      	orrs	r5, r0
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	2f00      	cmp	r7, #0
 8001c6e:	d000      	beq.n	8001c72 <__aeabi_dsub+0x2ea>
 8001c70:	e0f5      	b.n	8001e5e <__aeabi_dsub+0x4d6>
 8001c72:	2d00      	cmp	r5, #0
 8001c74:	d100      	bne.n	8001c78 <__aeabi_dsub+0x2f0>
 8001c76:	e16b      	b.n	8001f50 <__aeabi_dsub+0x5c8>
 8001c78:	2a00      	cmp	r2, #0
 8001c7a:	d100      	bne.n	8001c7e <__aeabi_dsub+0x2f6>
 8001c7c:	e152      	b.n	8001f24 <__aeabi_dsub+0x59c>
 8001c7e:	4663      	mov	r3, ip
 8001c80:	1ac5      	subs	r5, r0, r3
 8001c82:	9b02      	ldr	r3, [sp, #8]
 8001c84:	1ae2      	subs	r2, r4, r3
 8001c86:	42a8      	cmp	r0, r5
 8001c88:	419b      	sbcs	r3, r3
 8001c8a:	425b      	negs	r3, r3
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	021a      	lsls	r2, r3, #8
 8001c90:	d400      	bmi.n	8001c94 <__aeabi_dsub+0x30c>
 8001c92:	e1d5      	b.n	8002040 <__aeabi_dsub+0x6b8>
 8001c94:	4663      	mov	r3, ip
 8001c96:	1a1d      	subs	r5, r3, r0
 8001c98:	45ac      	cmp	ip, r5
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	2601      	movs	r6, #1
 8001c9e:	9b02      	ldr	r3, [sp, #8]
 8001ca0:	4252      	negs	r2, r2
 8001ca2:	1b1c      	subs	r4, r3, r4
 8001ca4:	4688      	mov	r8, r1
 8001ca6:	1aa4      	subs	r4, r4, r2
 8001ca8:	400e      	ands	r6, r1
 8001caa:	e6f6      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001cac:	4297      	cmp	r7, r2
 8001cae:	d03f      	beq.n	8001d30 <__aeabi_dsub+0x3a8>
 8001cb0:	4652      	mov	r2, sl
 8001cb2:	2501      	movs	r5, #1
 8001cb4:	2a38      	cmp	r2, #56	@ 0x38
 8001cb6:	dd00      	ble.n	8001cba <__aeabi_dsub+0x332>
 8001cb8:	e74a      	b.n	8001b50 <__aeabi_dsub+0x1c8>
 8001cba:	2280      	movs	r2, #128	@ 0x80
 8001cbc:	9b02      	ldr	r3, [sp, #8]
 8001cbe:	0412      	lsls	r2, r2, #16
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	9302      	str	r3, [sp, #8]
 8001cc4:	e72d      	b.n	8001b22 <__aeabi_dsub+0x19a>
 8001cc6:	003c      	movs	r4, r7
 8001cc8:	2500      	movs	r5, #0
 8001cca:	2200      	movs	r2, #0
 8001ccc:	e705      	b.n	8001ada <__aeabi_dsub+0x152>
 8001cce:	2307      	movs	r3, #7
 8001cd0:	402b      	ands	r3, r5
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d000      	beq.n	8001cd8 <__aeabi_dsub+0x350>
 8001cd6:	e6e2      	b.n	8001a9e <__aeabi_dsub+0x116>
 8001cd8:	e06b      	b.n	8001db2 <__aeabi_dsub+0x42a>
 8001cda:	46c0      	nop			@ (mov r8, r8)
 8001cdc:	000007ff 	.word	0x000007ff
 8001ce0:	ff7fffff 	.word	0xff7fffff
 8001ce4:	fffff801 	.word	0xfffff801
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	0028      	movs	r0, r5
 8001cee:	f000 fa97 	bl	8002220 <__clzsi2>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	3318      	adds	r3, #24
 8001cf6:	2b1f      	cmp	r3, #31
 8001cf8:	dc00      	bgt.n	8001cfc <__aeabi_dsub+0x374>
 8001cfa:	e6b4      	b.n	8001a66 <__aeabi_dsub+0xde>
 8001cfc:	002a      	movs	r2, r5
 8001cfe:	3808      	subs	r0, #8
 8001d00:	4082      	lsls	r2, r0
 8001d02:	429f      	cmp	r7, r3
 8001d04:	dd00      	ble.n	8001d08 <__aeabi_dsub+0x380>
 8001d06:	e0b9      	b.n	8001e7c <__aeabi_dsub+0x4f4>
 8001d08:	1bdb      	subs	r3, r3, r7
 8001d0a:	1c58      	adds	r0, r3, #1
 8001d0c:	281f      	cmp	r0, #31
 8001d0e:	dc00      	bgt.n	8001d12 <__aeabi_dsub+0x38a>
 8001d10:	e1a0      	b.n	8002054 <__aeabi_dsub+0x6cc>
 8001d12:	0015      	movs	r5, r2
 8001d14:	3b1f      	subs	r3, #31
 8001d16:	40dd      	lsrs	r5, r3
 8001d18:	2820      	cmp	r0, #32
 8001d1a:	d005      	beq.n	8001d28 <__aeabi_dsub+0x3a0>
 8001d1c:	2340      	movs	r3, #64	@ 0x40
 8001d1e:	1a1b      	subs	r3, r3, r0
 8001d20:	409a      	lsls	r2, r3
 8001d22:	1e53      	subs	r3, r2, #1
 8001d24:	419a      	sbcs	r2, r3
 8001d26:	4315      	orrs	r5, r2
 8001d28:	2307      	movs	r3, #7
 8001d2a:	2700      	movs	r7, #0
 8001d2c:	402b      	ands	r3, r5
 8001d2e:	e7d0      	b.n	8001cd2 <__aeabi_dsub+0x34a>
 8001d30:	08c0      	lsrs	r0, r0, #3
 8001d32:	0762      	lsls	r2, r4, #29
 8001d34:	4302      	orrs	r2, r0
 8001d36:	08e4      	lsrs	r4, r4, #3
 8001d38:	e737      	b.n	8001baa <__aeabi_dsub+0x222>
 8001d3a:	08ea      	lsrs	r2, r5, #3
 8001d3c:	0763      	lsls	r3, r4, #29
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	4bd3      	ldr	r3, [pc, #844]	@ (8002090 <__aeabi_dsub+0x708>)
 8001d42:	08e4      	lsrs	r4, r4, #3
 8001d44:	429f      	cmp	r7, r3
 8001d46:	d100      	bne.n	8001d4a <__aeabi_dsub+0x3c2>
 8001d48:	e72f      	b.n	8001baa <__aeabi_dsub+0x222>
 8001d4a:	0324      	lsls	r4, r4, #12
 8001d4c:	0b25      	lsrs	r5, r4, #12
 8001d4e:	057c      	lsls	r4, r7, #21
 8001d50:	0d64      	lsrs	r4, r4, #21
 8001d52:	e6c2      	b.n	8001ada <__aeabi_dsub+0x152>
 8001d54:	46ca      	mov	sl, r9
 8001d56:	0022      	movs	r2, r4
 8001d58:	4302      	orrs	r2, r0
 8001d5a:	d158      	bne.n	8001e0e <__aeabi_dsub+0x486>
 8001d5c:	4663      	mov	r3, ip
 8001d5e:	000e      	movs	r6, r1
 8001d60:	9c02      	ldr	r4, [sp, #8]
 8001d62:	9303      	str	r3, [sp, #12]
 8001d64:	9b03      	ldr	r3, [sp, #12]
 8001d66:	4657      	mov	r7, sl
 8001d68:	08da      	lsrs	r2, r3, #3
 8001d6a:	e7e7      	b.n	8001d3c <__aeabi_dsub+0x3b4>
 8001d6c:	4cc9      	ldr	r4, [pc, #804]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001d6e:	1aff      	subs	r7, r7, r3
 8001d70:	4014      	ands	r4, r2
 8001d72:	e692      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001d74:	4dc8      	ldr	r5, [pc, #800]	@ (8002098 <__aeabi_dsub+0x710>)
 8001d76:	1c7a      	adds	r2, r7, #1
 8001d78:	422a      	tst	r2, r5
 8001d7a:	d000      	beq.n	8001d7e <__aeabi_dsub+0x3f6>
 8001d7c:	e084      	b.n	8001e88 <__aeabi_dsub+0x500>
 8001d7e:	0022      	movs	r2, r4
 8001d80:	4302      	orrs	r2, r0
 8001d82:	2f00      	cmp	r7, #0
 8001d84:	d000      	beq.n	8001d88 <__aeabi_dsub+0x400>
 8001d86:	e0ef      	b.n	8001f68 <__aeabi_dsub+0x5e0>
 8001d88:	2a00      	cmp	r2, #0
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dsub+0x406>
 8001d8c:	e0e5      	b.n	8001f5a <__aeabi_dsub+0x5d2>
 8001d8e:	4662      	mov	r2, ip
 8001d90:	9902      	ldr	r1, [sp, #8]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	d100      	bne.n	8001d98 <__aeabi_dsub+0x410>
 8001d96:	e0c5      	b.n	8001f24 <__aeabi_dsub+0x59c>
 8001d98:	4663      	mov	r3, ip
 8001d9a:	18c5      	adds	r5, r0, r3
 8001d9c:	468c      	mov	ip, r1
 8001d9e:	4285      	cmp	r5, r0
 8001da0:	4180      	sbcs	r0, r0
 8001da2:	4464      	add	r4, ip
 8001da4:	4240      	negs	r0, r0
 8001da6:	1824      	adds	r4, r4, r0
 8001da8:	0223      	lsls	r3, r4, #8
 8001daa:	d502      	bpl.n	8001db2 <__aeabi_dsub+0x42a>
 8001dac:	4bb9      	ldr	r3, [pc, #740]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001dae:	3701      	adds	r7, #1
 8001db0:	401c      	ands	r4, r3
 8001db2:	46ba      	mov	sl, r7
 8001db4:	9503      	str	r5, [sp, #12]
 8001db6:	e7d5      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001db8:	4662      	mov	r2, ip
 8001dba:	1a85      	subs	r5, r0, r2
 8001dbc:	42a8      	cmp	r0, r5
 8001dbe:	4192      	sbcs	r2, r2
 8001dc0:	4252      	negs	r2, r2
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9b02      	ldr	r3, [sp, #8]
 8001dc6:	1ae3      	subs	r3, r4, r3
 8001dc8:	001a      	movs	r2, r3
 8001dca:	464b      	mov	r3, r9
 8001dcc:	1ad2      	subs	r2, r2, r3
 8001dce:	0013      	movs	r3, r2
 8001dd0:	4691      	mov	r9, r2
 8001dd2:	021a      	lsls	r2, r3, #8
 8001dd4:	d46c      	bmi.n	8001eb0 <__aeabi_dsub+0x528>
 8001dd6:	464a      	mov	r2, r9
 8001dd8:	464c      	mov	r4, r9
 8001dda:	432a      	orrs	r2, r5
 8001ddc:	d000      	beq.n	8001de0 <__aeabi_dsub+0x458>
 8001dde:	e63a      	b.n	8001a56 <__aeabi_dsub+0xce>
 8001de0:	2600      	movs	r6, #0
 8001de2:	2400      	movs	r4, #0
 8001de4:	2500      	movs	r5, #0
 8001de6:	e678      	b.n	8001ada <__aeabi_dsub+0x152>
 8001de8:	9902      	ldr	r1, [sp, #8]
 8001dea:	4653      	mov	r3, sl
 8001dec:	000d      	movs	r5, r1
 8001dee:	3a20      	subs	r2, #32
 8001df0:	40d5      	lsrs	r5, r2
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	d006      	beq.n	8001e04 <__aeabi_dsub+0x47c>
 8001df6:	2240      	movs	r2, #64	@ 0x40
 8001df8:	1ad2      	subs	r2, r2, r3
 8001dfa:	000b      	movs	r3, r1
 8001dfc:	4093      	lsls	r3, r2
 8001dfe:	4662      	mov	r2, ip
 8001e00:	431a      	orrs	r2, r3
 8001e02:	4693      	mov	fp, r2
 8001e04:	465b      	mov	r3, fp
 8001e06:	1e5a      	subs	r2, r3, #1
 8001e08:	4193      	sbcs	r3, r2
 8001e0a:	431d      	orrs	r5, r3
 8001e0c:	e619      	b.n	8001a42 <__aeabi_dsub+0xba>
 8001e0e:	4653      	mov	r3, sl
 8001e10:	1e5a      	subs	r2, r3, #1
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x490>
 8001e16:	e0c6      	b.n	8001fa6 <__aeabi_dsub+0x61e>
 8001e18:	4e9d      	ldr	r6, [pc, #628]	@ (8002090 <__aeabi_dsub+0x708>)
 8001e1a:	45b2      	cmp	sl, r6
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_dsub+0x498>
 8001e1e:	e6bd      	b.n	8001b9c <__aeabi_dsub+0x214>
 8001e20:	4688      	mov	r8, r1
 8001e22:	000e      	movs	r6, r1
 8001e24:	2501      	movs	r5, #1
 8001e26:	2a38      	cmp	r2, #56	@ 0x38
 8001e28:	dc10      	bgt.n	8001e4c <__aeabi_dsub+0x4c4>
 8001e2a:	2a1f      	cmp	r2, #31
 8001e2c:	dc7f      	bgt.n	8001f2e <__aeabi_dsub+0x5a6>
 8001e2e:	2120      	movs	r1, #32
 8001e30:	0025      	movs	r5, r4
 8001e32:	1a89      	subs	r1, r1, r2
 8001e34:	0007      	movs	r7, r0
 8001e36:	4088      	lsls	r0, r1
 8001e38:	408d      	lsls	r5, r1
 8001e3a:	40d7      	lsrs	r7, r2
 8001e3c:	40d4      	lsrs	r4, r2
 8001e3e:	1e41      	subs	r1, r0, #1
 8001e40:	4188      	sbcs	r0, r1
 8001e42:	9b02      	ldr	r3, [sp, #8]
 8001e44:	433d      	orrs	r5, r7
 8001e46:	1b1b      	subs	r3, r3, r4
 8001e48:	4305      	orrs	r5, r0
 8001e4a:	9302      	str	r3, [sp, #8]
 8001e4c:	4662      	mov	r2, ip
 8001e4e:	1b55      	subs	r5, r2, r5
 8001e50:	45ac      	cmp	ip, r5
 8001e52:	4192      	sbcs	r2, r2
 8001e54:	9b02      	ldr	r3, [sp, #8]
 8001e56:	4252      	negs	r2, r2
 8001e58:	464f      	mov	r7, r9
 8001e5a:	1a9c      	subs	r4, r3, r2
 8001e5c:	e5f6      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001e5e:	2d00      	cmp	r5, #0
 8001e60:	d000      	beq.n	8001e64 <__aeabi_dsub+0x4dc>
 8001e62:	e0b7      	b.n	8001fd4 <__aeabi_dsub+0x64c>
 8001e64:	2a00      	cmp	r2, #0
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dsub+0x4e2>
 8001e68:	e0f0      	b.n	800204c <__aeabi_dsub+0x6c4>
 8001e6a:	2601      	movs	r6, #1
 8001e6c:	400e      	ands	r6, r1
 8001e6e:	4663      	mov	r3, ip
 8001e70:	9802      	ldr	r0, [sp, #8]
 8001e72:	08d9      	lsrs	r1, r3, #3
 8001e74:	0742      	lsls	r2, r0, #29
 8001e76:	430a      	orrs	r2, r1
 8001e78:	08c4      	lsrs	r4, r0, #3
 8001e7a:	e696      	b.n	8001baa <__aeabi_dsub+0x222>
 8001e7c:	4c85      	ldr	r4, [pc, #532]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001e7e:	1aff      	subs	r7, r7, r3
 8001e80:	4014      	ands	r4, r2
 8001e82:	0762      	lsls	r2, r4, #29
 8001e84:	08e4      	lsrs	r4, r4, #3
 8001e86:	e760      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001e88:	4981      	ldr	r1, [pc, #516]	@ (8002090 <__aeabi_dsub+0x708>)
 8001e8a:	428a      	cmp	r2, r1
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dsub+0x508>
 8001e8e:	e0c9      	b.n	8002024 <__aeabi_dsub+0x69c>
 8001e90:	4663      	mov	r3, ip
 8001e92:	18c1      	adds	r1, r0, r3
 8001e94:	4281      	cmp	r1, r0
 8001e96:	4180      	sbcs	r0, r0
 8001e98:	9b02      	ldr	r3, [sp, #8]
 8001e9a:	4240      	negs	r0, r0
 8001e9c:	18e3      	adds	r3, r4, r3
 8001e9e:	181b      	adds	r3, r3, r0
 8001ea0:	07dd      	lsls	r5, r3, #31
 8001ea2:	085c      	lsrs	r4, r3, #1
 8001ea4:	2307      	movs	r3, #7
 8001ea6:	0849      	lsrs	r1, r1, #1
 8001ea8:	430d      	orrs	r5, r1
 8001eaa:	0017      	movs	r7, r2
 8001eac:	402b      	ands	r3, r5
 8001eae:	e710      	b.n	8001cd2 <__aeabi_dsub+0x34a>
 8001eb0:	4663      	mov	r3, ip
 8001eb2:	1a1d      	subs	r5, r3, r0
 8001eb4:	45ac      	cmp	ip, r5
 8001eb6:	4192      	sbcs	r2, r2
 8001eb8:	2601      	movs	r6, #1
 8001eba:	9b02      	ldr	r3, [sp, #8]
 8001ebc:	4252      	negs	r2, r2
 8001ebe:	1b1c      	subs	r4, r3, r4
 8001ec0:	4688      	mov	r8, r1
 8001ec2:	1aa4      	subs	r4, r4, r2
 8001ec4:	400e      	ands	r6, r1
 8001ec6:	e5c6      	b.n	8001a56 <__aeabi_dsub+0xce>
 8001ec8:	4663      	mov	r3, ip
 8001eca:	18c5      	adds	r5, r0, r3
 8001ecc:	9b02      	ldr	r3, [sp, #8]
 8001ece:	4285      	cmp	r5, r0
 8001ed0:	4180      	sbcs	r0, r0
 8001ed2:	469c      	mov	ip, r3
 8001ed4:	4240      	negs	r0, r0
 8001ed6:	4464      	add	r4, ip
 8001ed8:	1824      	adds	r4, r4, r0
 8001eda:	2701      	movs	r7, #1
 8001edc:	0223      	lsls	r3, r4, #8
 8001ede:	d400      	bmi.n	8001ee2 <__aeabi_dsub+0x55a>
 8001ee0:	e6f5      	b.n	8001cce <__aeabi_dsub+0x346>
 8001ee2:	2702      	movs	r7, #2
 8001ee4:	e641      	b.n	8001b6a <__aeabi_dsub+0x1e2>
 8001ee6:	4663      	mov	r3, ip
 8001ee8:	1ac5      	subs	r5, r0, r3
 8001eea:	42a8      	cmp	r0, r5
 8001eec:	4180      	sbcs	r0, r0
 8001eee:	9b02      	ldr	r3, [sp, #8]
 8001ef0:	4240      	negs	r0, r0
 8001ef2:	1ae4      	subs	r4, r4, r3
 8001ef4:	2701      	movs	r7, #1
 8001ef6:	1a24      	subs	r4, r4, r0
 8001ef8:	e5a8      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001efa:	9d02      	ldr	r5, [sp, #8]
 8001efc:	4652      	mov	r2, sl
 8001efe:	002b      	movs	r3, r5
 8001f00:	3a20      	subs	r2, #32
 8001f02:	40d3      	lsrs	r3, r2
 8001f04:	0019      	movs	r1, r3
 8001f06:	4653      	mov	r3, sl
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	d006      	beq.n	8001f1a <__aeabi_dsub+0x592>
 8001f0c:	2240      	movs	r2, #64	@ 0x40
 8001f0e:	1ad2      	subs	r2, r2, r3
 8001f10:	002b      	movs	r3, r5
 8001f12:	4093      	lsls	r3, r2
 8001f14:	4662      	mov	r2, ip
 8001f16:	431a      	orrs	r2, r3
 8001f18:	4693      	mov	fp, r2
 8001f1a:	465d      	mov	r5, fp
 8001f1c:	1e6b      	subs	r3, r5, #1
 8001f1e:	419d      	sbcs	r5, r3
 8001f20:	430d      	orrs	r5, r1
 8001f22:	e615      	b.n	8001b50 <__aeabi_dsub+0x1c8>
 8001f24:	0762      	lsls	r2, r4, #29
 8001f26:	08c0      	lsrs	r0, r0, #3
 8001f28:	4302      	orrs	r2, r0
 8001f2a:	08e4      	lsrs	r4, r4, #3
 8001f2c:	e70d      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001f2e:	0011      	movs	r1, r2
 8001f30:	0027      	movs	r7, r4
 8001f32:	3920      	subs	r1, #32
 8001f34:	40cf      	lsrs	r7, r1
 8001f36:	2a20      	cmp	r2, #32
 8001f38:	d005      	beq.n	8001f46 <__aeabi_dsub+0x5be>
 8001f3a:	2140      	movs	r1, #64	@ 0x40
 8001f3c:	1a8a      	subs	r2, r1, r2
 8001f3e:	4094      	lsls	r4, r2
 8001f40:	0025      	movs	r5, r4
 8001f42:	4305      	orrs	r5, r0
 8001f44:	9503      	str	r5, [sp, #12]
 8001f46:	9d03      	ldr	r5, [sp, #12]
 8001f48:	1e6a      	subs	r2, r5, #1
 8001f4a:	4195      	sbcs	r5, r2
 8001f4c:	433d      	orrs	r5, r7
 8001f4e:	e77d      	b.n	8001e4c <__aeabi_dsub+0x4c4>
 8001f50:	2a00      	cmp	r2, #0
 8001f52:	d100      	bne.n	8001f56 <__aeabi_dsub+0x5ce>
 8001f54:	e744      	b.n	8001de0 <__aeabi_dsub+0x458>
 8001f56:	2601      	movs	r6, #1
 8001f58:	400e      	ands	r6, r1
 8001f5a:	4663      	mov	r3, ip
 8001f5c:	08d9      	lsrs	r1, r3, #3
 8001f5e:	9b02      	ldr	r3, [sp, #8]
 8001f60:	075a      	lsls	r2, r3, #29
 8001f62:	430a      	orrs	r2, r1
 8001f64:	08dc      	lsrs	r4, r3, #3
 8001f66:	e6f0      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001f68:	2a00      	cmp	r2, #0
 8001f6a:	d028      	beq.n	8001fbe <__aeabi_dsub+0x636>
 8001f6c:	4662      	mov	r2, ip
 8001f6e:	9f02      	ldr	r7, [sp, #8]
 8001f70:	08c0      	lsrs	r0, r0, #3
 8001f72:	433a      	orrs	r2, r7
 8001f74:	d100      	bne.n	8001f78 <__aeabi_dsub+0x5f0>
 8001f76:	e6dc      	b.n	8001d32 <__aeabi_dsub+0x3aa>
 8001f78:	0762      	lsls	r2, r4, #29
 8001f7a:	4310      	orrs	r0, r2
 8001f7c:	2280      	movs	r2, #128	@ 0x80
 8001f7e:	08e4      	lsrs	r4, r4, #3
 8001f80:	0312      	lsls	r2, r2, #12
 8001f82:	4214      	tst	r4, r2
 8001f84:	d009      	beq.n	8001f9a <__aeabi_dsub+0x612>
 8001f86:	08fd      	lsrs	r5, r7, #3
 8001f88:	4215      	tst	r5, r2
 8001f8a:	d106      	bne.n	8001f9a <__aeabi_dsub+0x612>
 8001f8c:	4663      	mov	r3, ip
 8001f8e:	2601      	movs	r6, #1
 8001f90:	002c      	movs	r4, r5
 8001f92:	08d8      	lsrs	r0, r3, #3
 8001f94:	077b      	lsls	r3, r7, #29
 8001f96:	4318      	orrs	r0, r3
 8001f98:	400e      	ands	r6, r1
 8001f9a:	0f42      	lsrs	r2, r0, #29
 8001f9c:	00c0      	lsls	r0, r0, #3
 8001f9e:	08c0      	lsrs	r0, r0, #3
 8001fa0:	0752      	lsls	r2, r2, #29
 8001fa2:	4302      	orrs	r2, r0
 8001fa4:	e601      	b.n	8001baa <__aeabi_dsub+0x222>
 8001fa6:	4663      	mov	r3, ip
 8001fa8:	1a1d      	subs	r5, r3, r0
 8001faa:	45ac      	cmp	ip, r5
 8001fac:	4192      	sbcs	r2, r2
 8001fae:	9b02      	ldr	r3, [sp, #8]
 8001fb0:	4252      	negs	r2, r2
 8001fb2:	1b1c      	subs	r4, r3, r4
 8001fb4:	000e      	movs	r6, r1
 8001fb6:	4688      	mov	r8, r1
 8001fb8:	2701      	movs	r7, #1
 8001fba:	1aa4      	subs	r4, r4, r2
 8001fbc:	e546      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001fbe:	4663      	mov	r3, ip
 8001fc0:	08d9      	lsrs	r1, r3, #3
 8001fc2:	9b02      	ldr	r3, [sp, #8]
 8001fc4:	075a      	lsls	r2, r3, #29
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	08dc      	lsrs	r4, r3, #3
 8001fca:	e5ee      	b.n	8001baa <__aeabi_dsub+0x222>
 8001fcc:	4663      	mov	r3, ip
 8001fce:	9c02      	ldr	r4, [sp, #8]
 8001fd0:	9303      	str	r3, [sp, #12]
 8001fd2:	e6c7      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001fd4:	08c0      	lsrs	r0, r0, #3
 8001fd6:	2a00      	cmp	r2, #0
 8001fd8:	d100      	bne.n	8001fdc <__aeabi_dsub+0x654>
 8001fda:	e6aa      	b.n	8001d32 <__aeabi_dsub+0x3aa>
 8001fdc:	0762      	lsls	r2, r4, #29
 8001fde:	4310      	orrs	r0, r2
 8001fe0:	2280      	movs	r2, #128	@ 0x80
 8001fe2:	08e4      	lsrs	r4, r4, #3
 8001fe4:	0312      	lsls	r2, r2, #12
 8001fe6:	4214      	tst	r4, r2
 8001fe8:	d0d7      	beq.n	8001f9a <__aeabi_dsub+0x612>
 8001fea:	9f02      	ldr	r7, [sp, #8]
 8001fec:	08fd      	lsrs	r5, r7, #3
 8001fee:	4215      	tst	r5, r2
 8001ff0:	d1d3      	bne.n	8001f9a <__aeabi_dsub+0x612>
 8001ff2:	4663      	mov	r3, ip
 8001ff4:	2601      	movs	r6, #1
 8001ff6:	08d8      	lsrs	r0, r3, #3
 8001ff8:	077b      	lsls	r3, r7, #29
 8001ffa:	002c      	movs	r4, r5
 8001ffc:	4318      	orrs	r0, r3
 8001ffe:	400e      	ands	r6, r1
 8002000:	e7cb      	b.n	8001f9a <__aeabi_dsub+0x612>
 8002002:	000a      	movs	r2, r1
 8002004:	0027      	movs	r7, r4
 8002006:	3a20      	subs	r2, #32
 8002008:	40d7      	lsrs	r7, r2
 800200a:	2920      	cmp	r1, #32
 800200c:	d005      	beq.n	800201a <__aeabi_dsub+0x692>
 800200e:	2240      	movs	r2, #64	@ 0x40
 8002010:	1a52      	subs	r2, r2, r1
 8002012:	4094      	lsls	r4, r2
 8002014:	0025      	movs	r5, r4
 8002016:	4305      	orrs	r5, r0
 8002018:	9503      	str	r5, [sp, #12]
 800201a:	9d03      	ldr	r5, [sp, #12]
 800201c:	1e6a      	subs	r2, r5, #1
 800201e:	4195      	sbcs	r5, r2
 8002020:	432f      	orrs	r7, r5
 8002022:	e610      	b.n	8001c46 <__aeabi_dsub+0x2be>
 8002024:	0014      	movs	r4, r2
 8002026:	2500      	movs	r5, #0
 8002028:	2200      	movs	r2, #0
 800202a:	e556      	b.n	8001ada <__aeabi_dsub+0x152>
 800202c:	9b02      	ldr	r3, [sp, #8]
 800202e:	4460      	add	r0, ip
 8002030:	4699      	mov	r9, r3
 8002032:	4560      	cmp	r0, ip
 8002034:	4192      	sbcs	r2, r2
 8002036:	444c      	add	r4, r9
 8002038:	4252      	negs	r2, r2
 800203a:	0005      	movs	r5, r0
 800203c:	18a4      	adds	r4, r4, r2
 800203e:	e74c      	b.n	8001eda <__aeabi_dsub+0x552>
 8002040:	001a      	movs	r2, r3
 8002042:	001c      	movs	r4, r3
 8002044:	432a      	orrs	r2, r5
 8002046:	d000      	beq.n	800204a <__aeabi_dsub+0x6c2>
 8002048:	e6b3      	b.n	8001db2 <__aeabi_dsub+0x42a>
 800204a:	e6c9      	b.n	8001de0 <__aeabi_dsub+0x458>
 800204c:	2480      	movs	r4, #128	@ 0x80
 800204e:	2600      	movs	r6, #0
 8002050:	0324      	lsls	r4, r4, #12
 8002052:	e5ae      	b.n	8001bb2 <__aeabi_dsub+0x22a>
 8002054:	2120      	movs	r1, #32
 8002056:	2500      	movs	r5, #0
 8002058:	1a09      	subs	r1, r1, r0
 800205a:	e517      	b.n	8001a8c <__aeabi_dsub+0x104>
 800205c:	2200      	movs	r2, #0
 800205e:	2500      	movs	r5, #0
 8002060:	4c0b      	ldr	r4, [pc, #44]	@ (8002090 <__aeabi_dsub+0x708>)
 8002062:	e53a      	b.n	8001ada <__aeabi_dsub+0x152>
 8002064:	2d00      	cmp	r5, #0
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0x6e2>
 8002068:	e5f6      	b.n	8001c58 <__aeabi_dsub+0x2d0>
 800206a:	464b      	mov	r3, r9
 800206c:	1bda      	subs	r2, r3, r7
 800206e:	4692      	mov	sl, r2
 8002070:	2f00      	cmp	r7, #0
 8002072:	d100      	bne.n	8002076 <__aeabi_dsub+0x6ee>
 8002074:	e66f      	b.n	8001d56 <__aeabi_dsub+0x3ce>
 8002076:	2a38      	cmp	r2, #56	@ 0x38
 8002078:	dc05      	bgt.n	8002086 <__aeabi_dsub+0x6fe>
 800207a:	2680      	movs	r6, #128	@ 0x80
 800207c:	0436      	lsls	r6, r6, #16
 800207e:	4334      	orrs	r4, r6
 8002080:	4688      	mov	r8, r1
 8002082:	000e      	movs	r6, r1
 8002084:	e6d1      	b.n	8001e2a <__aeabi_dsub+0x4a2>
 8002086:	4688      	mov	r8, r1
 8002088:	000e      	movs	r6, r1
 800208a:	2501      	movs	r5, #1
 800208c:	e6de      	b.n	8001e4c <__aeabi_dsub+0x4c4>
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	000007ff 	.word	0x000007ff
 8002094:	ff7fffff 	.word	0xff7fffff
 8002098:	000007fe 	.word	0x000007fe
 800209c:	2d00      	cmp	r5, #0
 800209e:	d100      	bne.n	80020a2 <__aeabi_dsub+0x71a>
 80020a0:	e668      	b.n	8001d74 <__aeabi_dsub+0x3ec>
 80020a2:	464b      	mov	r3, r9
 80020a4:	1bd9      	subs	r1, r3, r7
 80020a6:	2f00      	cmp	r7, #0
 80020a8:	d101      	bne.n	80020ae <__aeabi_dsub+0x726>
 80020aa:	468a      	mov	sl, r1
 80020ac:	e5a7      	b.n	8001bfe <__aeabi_dsub+0x276>
 80020ae:	2701      	movs	r7, #1
 80020b0:	2938      	cmp	r1, #56	@ 0x38
 80020b2:	dd00      	ble.n	80020b6 <__aeabi_dsub+0x72e>
 80020b4:	e5c7      	b.n	8001c46 <__aeabi_dsub+0x2be>
 80020b6:	2280      	movs	r2, #128	@ 0x80
 80020b8:	0412      	lsls	r2, r2, #16
 80020ba:	4314      	orrs	r4, r2
 80020bc:	e5af      	b.n	8001c1e <__aeabi_dsub+0x296>
 80020be:	46c0      	nop			@ (mov r8, r8)

080020c0 <__aeabi_dcmpun>:
 80020c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c2:	46c6      	mov	lr, r8
 80020c4:	031e      	lsls	r6, r3, #12
 80020c6:	0b36      	lsrs	r6, r6, #12
 80020c8:	46b0      	mov	r8, r6
 80020ca:	4e0d      	ldr	r6, [pc, #52]	@ (8002100 <__aeabi_dcmpun+0x40>)
 80020cc:	030c      	lsls	r4, r1, #12
 80020ce:	004d      	lsls	r5, r1, #1
 80020d0:	005f      	lsls	r7, r3, #1
 80020d2:	b500      	push	{lr}
 80020d4:	0b24      	lsrs	r4, r4, #12
 80020d6:	0d6d      	lsrs	r5, r5, #21
 80020d8:	0d7f      	lsrs	r7, r7, #21
 80020da:	42b5      	cmp	r5, r6
 80020dc:	d00b      	beq.n	80020f6 <__aeabi_dcmpun+0x36>
 80020de:	4908      	ldr	r1, [pc, #32]	@ (8002100 <__aeabi_dcmpun+0x40>)
 80020e0:	2000      	movs	r0, #0
 80020e2:	428f      	cmp	r7, r1
 80020e4:	d104      	bne.n	80020f0 <__aeabi_dcmpun+0x30>
 80020e6:	4646      	mov	r6, r8
 80020e8:	4316      	orrs	r6, r2
 80020ea:	0030      	movs	r0, r6
 80020ec:	1e43      	subs	r3, r0, #1
 80020ee:	4198      	sbcs	r0, r3
 80020f0:	bc80      	pop	{r7}
 80020f2:	46b8      	mov	r8, r7
 80020f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020f6:	4304      	orrs	r4, r0
 80020f8:	2001      	movs	r0, #1
 80020fa:	2c00      	cmp	r4, #0
 80020fc:	d1f8      	bne.n	80020f0 <__aeabi_dcmpun+0x30>
 80020fe:	e7ee      	b.n	80020de <__aeabi_dcmpun+0x1e>
 8002100:	000007ff 	.word	0x000007ff

08002104 <__aeabi_d2iz>:
 8002104:	000b      	movs	r3, r1
 8002106:	0002      	movs	r2, r0
 8002108:	b570      	push	{r4, r5, r6, lr}
 800210a:	4d16      	ldr	r5, [pc, #88]	@ (8002164 <__aeabi_d2iz+0x60>)
 800210c:	030c      	lsls	r4, r1, #12
 800210e:	b082      	sub	sp, #8
 8002110:	0049      	lsls	r1, r1, #1
 8002112:	2000      	movs	r0, #0
 8002114:	9200      	str	r2, [sp, #0]
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	0b24      	lsrs	r4, r4, #12
 800211a:	0d49      	lsrs	r1, r1, #21
 800211c:	0fde      	lsrs	r6, r3, #31
 800211e:	42a9      	cmp	r1, r5
 8002120:	dd04      	ble.n	800212c <__aeabi_d2iz+0x28>
 8002122:	4811      	ldr	r0, [pc, #68]	@ (8002168 <__aeabi_d2iz+0x64>)
 8002124:	4281      	cmp	r1, r0
 8002126:	dd03      	ble.n	8002130 <__aeabi_d2iz+0x2c>
 8002128:	4b10      	ldr	r3, [pc, #64]	@ (800216c <__aeabi_d2iz+0x68>)
 800212a:	18f0      	adds	r0, r6, r3
 800212c:	b002      	add	sp, #8
 800212e:	bd70      	pop	{r4, r5, r6, pc}
 8002130:	2080      	movs	r0, #128	@ 0x80
 8002132:	0340      	lsls	r0, r0, #13
 8002134:	4320      	orrs	r0, r4
 8002136:	4c0e      	ldr	r4, [pc, #56]	@ (8002170 <__aeabi_d2iz+0x6c>)
 8002138:	1a64      	subs	r4, r4, r1
 800213a:	2c1f      	cmp	r4, #31
 800213c:	dd08      	ble.n	8002150 <__aeabi_d2iz+0x4c>
 800213e:	4b0d      	ldr	r3, [pc, #52]	@ (8002174 <__aeabi_d2iz+0x70>)
 8002140:	1a5b      	subs	r3, r3, r1
 8002142:	40d8      	lsrs	r0, r3
 8002144:	0003      	movs	r3, r0
 8002146:	4258      	negs	r0, r3
 8002148:	2e00      	cmp	r6, #0
 800214a:	d1ef      	bne.n	800212c <__aeabi_d2iz+0x28>
 800214c:	0018      	movs	r0, r3
 800214e:	e7ed      	b.n	800212c <__aeabi_d2iz+0x28>
 8002150:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <__aeabi_d2iz+0x74>)
 8002152:	9a00      	ldr	r2, [sp, #0]
 8002154:	469c      	mov	ip, r3
 8002156:	0003      	movs	r3, r0
 8002158:	4461      	add	r1, ip
 800215a:	408b      	lsls	r3, r1
 800215c:	40e2      	lsrs	r2, r4
 800215e:	4313      	orrs	r3, r2
 8002160:	e7f1      	b.n	8002146 <__aeabi_d2iz+0x42>
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	000003fe 	.word	0x000003fe
 8002168:	0000041d 	.word	0x0000041d
 800216c:	7fffffff 	.word	0x7fffffff
 8002170:	00000433 	.word	0x00000433
 8002174:	00000413 	.word	0x00000413
 8002178:	fffffbed 	.word	0xfffffbed

0800217c <__aeabi_i2d>:
 800217c:	b570      	push	{r4, r5, r6, lr}
 800217e:	2800      	cmp	r0, #0
 8002180:	d016      	beq.n	80021b0 <__aeabi_i2d+0x34>
 8002182:	17c3      	asrs	r3, r0, #31
 8002184:	18c5      	adds	r5, r0, r3
 8002186:	405d      	eors	r5, r3
 8002188:	0fc4      	lsrs	r4, r0, #31
 800218a:	0028      	movs	r0, r5
 800218c:	f000 f848 	bl	8002220 <__clzsi2>
 8002190:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <__aeabi_i2d+0x58>)
 8002192:	1a1b      	subs	r3, r3, r0
 8002194:	055b      	lsls	r3, r3, #21
 8002196:	0d5b      	lsrs	r3, r3, #21
 8002198:	280a      	cmp	r0, #10
 800219a:	dc14      	bgt.n	80021c6 <__aeabi_i2d+0x4a>
 800219c:	0002      	movs	r2, r0
 800219e:	002e      	movs	r6, r5
 80021a0:	3215      	adds	r2, #21
 80021a2:	4096      	lsls	r6, r2
 80021a4:	220b      	movs	r2, #11
 80021a6:	1a12      	subs	r2, r2, r0
 80021a8:	40d5      	lsrs	r5, r2
 80021aa:	032d      	lsls	r5, r5, #12
 80021ac:	0b2d      	lsrs	r5, r5, #12
 80021ae:	e003      	b.n	80021b8 <__aeabi_i2d+0x3c>
 80021b0:	2400      	movs	r4, #0
 80021b2:	2300      	movs	r3, #0
 80021b4:	2500      	movs	r5, #0
 80021b6:	2600      	movs	r6, #0
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	432b      	orrs	r3, r5
 80021bc:	07e4      	lsls	r4, r4, #31
 80021be:	4323      	orrs	r3, r4
 80021c0:	0030      	movs	r0, r6
 80021c2:	0019      	movs	r1, r3
 80021c4:	bd70      	pop	{r4, r5, r6, pc}
 80021c6:	380b      	subs	r0, #11
 80021c8:	4085      	lsls	r5, r0
 80021ca:	032d      	lsls	r5, r5, #12
 80021cc:	2600      	movs	r6, #0
 80021ce:	0b2d      	lsrs	r5, r5, #12
 80021d0:	e7f2      	b.n	80021b8 <__aeabi_i2d+0x3c>
 80021d2:	46c0      	nop			@ (mov r8, r8)
 80021d4:	0000041e 	.word	0x0000041e

080021d8 <__aeabi_ui2d>:
 80021d8:	b510      	push	{r4, lr}
 80021da:	1e04      	subs	r4, r0, #0
 80021dc:	d010      	beq.n	8002200 <__aeabi_ui2d+0x28>
 80021de:	f000 f81f 	bl	8002220 <__clzsi2>
 80021e2:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <__aeabi_ui2d+0x44>)
 80021e4:	1a1b      	subs	r3, r3, r0
 80021e6:	055b      	lsls	r3, r3, #21
 80021e8:	0d5b      	lsrs	r3, r3, #21
 80021ea:	280a      	cmp	r0, #10
 80021ec:	dc0f      	bgt.n	800220e <__aeabi_ui2d+0x36>
 80021ee:	220b      	movs	r2, #11
 80021f0:	0021      	movs	r1, r4
 80021f2:	1a12      	subs	r2, r2, r0
 80021f4:	40d1      	lsrs	r1, r2
 80021f6:	3015      	adds	r0, #21
 80021f8:	030a      	lsls	r2, r1, #12
 80021fa:	4084      	lsls	r4, r0
 80021fc:	0b12      	lsrs	r2, r2, #12
 80021fe:	e001      	b.n	8002204 <__aeabi_ui2d+0x2c>
 8002200:	2300      	movs	r3, #0
 8002202:	2200      	movs	r2, #0
 8002204:	051b      	lsls	r3, r3, #20
 8002206:	4313      	orrs	r3, r2
 8002208:	0020      	movs	r0, r4
 800220a:	0019      	movs	r1, r3
 800220c:	bd10      	pop	{r4, pc}
 800220e:	0022      	movs	r2, r4
 8002210:	380b      	subs	r0, #11
 8002212:	4082      	lsls	r2, r0
 8002214:	0312      	lsls	r2, r2, #12
 8002216:	2400      	movs	r4, #0
 8002218:	0b12      	lsrs	r2, r2, #12
 800221a:	e7f3      	b.n	8002204 <__aeabi_ui2d+0x2c>
 800221c:	0000041e 	.word	0x0000041e

08002220 <__clzsi2>:
 8002220:	211c      	movs	r1, #28
 8002222:	2301      	movs	r3, #1
 8002224:	041b      	lsls	r3, r3, #16
 8002226:	4298      	cmp	r0, r3
 8002228:	d301      	bcc.n	800222e <__clzsi2+0xe>
 800222a:	0c00      	lsrs	r0, r0, #16
 800222c:	3910      	subs	r1, #16
 800222e:	0a1b      	lsrs	r3, r3, #8
 8002230:	4298      	cmp	r0, r3
 8002232:	d301      	bcc.n	8002238 <__clzsi2+0x18>
 8002234:	0a00      	lsrs	r0, r0, #8
 8002236:	3908      	subs	r1, #8
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	4298      	cmp	r0, r3
 800223c:	d301      	bcc.n	8002242 <__clzsi2+0x22>
 800223e:	0900      	lsrs	r0, r0, #4
 8002240:	3904      	subs	r1, #4
 8002242:	a202      	add	r2, pc, #8	@ (adr r2, 800224c <__clzsi2+0x2c>)
 8002244:	5c10      	ldrb	r0, [r2, r0]
 8002246:	1840      	adds	r0, r0, r1
 8002248:	4770      	bx	lr
 800224a:	46c0      	nop			@ (mov r8, r8)
 800224c:	02020304 	.word	0x02020304
 8002250:	01010101 	.word	0x01010101
	...

0800225c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800225c:	b5b0      	push	{r4, r5, r7, lr}
 800225e:	b0bc      	sub	sp, #240	@ 0xf0
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002262:	f000 ff95 	bl	8003190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002266:	f000 f963 	bl	8002530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800226a:	f000 fb51 	bl	8002910 <MX_GPIO_Init>
  MX_DMA_Init();
 800226e:	f000 fb31 	bl	80028d4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002272:	f000 fafb 	bl	800286c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8002276:	f000 fa27 	bl	80026c8 <MX_SPI1_Init>
  MX_ADC_Init();
 800227a:	f000 f9c9 	bl	8002610 <MX_ADC_Init>
  MX_SPI2_Init();
 800227e:	f000 fa61 	bl	8002744 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8002282:	f00a f907 	bl	800c494 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8002286:	f000 fa9b 	bl	80027c0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_SET);
 800228a:	2390      	movs	r3, #144	@ 0x90
 800228c:	05db      	lsls	r3, r3, #23
 800228e:	2201      	movs	r2, #1
 8002290:	2101      	movs	r1, #1
 8002292:	0018      	movs	r0, r3
 8002294:	f001 fedb 	bl	800404e <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8002298:	23fa      	movs	r3, #250	@ 0xfa
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	0018      	movs	r0, r3
 800229e:	f000 ffdb 	bl	8003258 <HAL_Delay>
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_RESET);
 80022a2:	2390      	movs	r3, #144	@ 0x90
 80022a4:	05db      	lsls	r3, r3, #23
 80022a6:	2200      	movs	r2, #0
 80022a8:	2101      	movs	r1, #1
 80022aa:	0018      	movs	r0, r3
 80022ac:	f001 fecf 	bl	800404e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80022b0:	2064      	movs	r0, #100	@ 0x64
 80022b2:	f000 ffd1 	bl	8003258 <HAL_Delay>
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_SET);
 80022b6:	2390      	movs	r3, #144	@ 0x90
 80022b8:	05db      	lsls	r3, r3, #23
 80022ba:	2201      	movs	r2, #1
 80022bc:	2101      	movs	r1, #1
 80022be:	0018      	movs	r0, r3
 80022c0:	f001 fec5 	bl	800404e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80022c4:	2064      	movs	r0, #100	@ 0x64
 80022c6:	f000 ffc7 	bl	8003258 <HAL_Delay>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_rx_buf, UART_RX_BUF_SIZE);
 80022ca:	2380      	movs	r3, #128	@ 0x80
 80022cc:	00da      	lsls	r2, r3, #3
 80022ce:	4987      	ldr	r1, [pc, #540]	@ (80024ec <main+0x290>)
 80022d0:	4b87      	ldr	r3, [pc, #540]	@ (80024f0 <main+0x294>)
 80022d2:	0018      	movs	r0, r3
 80022d4:	f006 fa73 	bl	80087be <HAL_UARTEx_ReceiveToIdle_DMA>

  char tx_msg4[] = "AT+DR=US915\r\n"; 
 80022d8:	25dc      	movs	r5, #220	@ 0xdc
 80022da:	197b      	adds	r3, r7, r5
 80022dc:	4a85      	ldr	r2, [pc, #532]	@ (80024f4 <main+0x298>)
 80022de:	ca13      	ldmia	r2!, {r0, r1, r4}
 80022e0:	c313      	stmia	r3!, {r0, r1, r4}
 80022e2:	8812      	ldrh	r2, [r2, #0]
 80022e4:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit_IT(&huart1, (uint8_t*) &tx_msg4, sizeof(tx_msg4));
 80022e6:	1979      	adds	r1, r7, r5
 80022e8:	4b81      	ldr	r3, [pc, #516]	@ (80024f0 <main+0x294>)
 80022ea:	220e      	movs	r2, #14
 80022ec:	0018      	movs	r0, r3
 80022ee:	f005 f807 	bl	8007300 <HAL_UART_Transmit_IT>
  HAL_Delay(100);
 80022f2:	2064      	movs	r0, #100	@ 0x64
 80022f4:	f000 ffb0 	bl	8003258 <HAL_Delay>

  char tx_msg5[] = "AT+CH\r\n"; 
 80022f8:	24d4      	movs	r4, #212	@ 0xd4
 80022fa:	193b      	adds	r3, r7, r4
 80022fc:	4a7e      	ldr	r2, [pc, #504]	@ (80024f8 <main+0x29c>)
 80022fe:	ca03      	ldmia	r2!, {r0, r1}
 8002300:	c303      	stmia	r3!, {r0, r1}
  HAL_UART_Transmit_IT(&huart1, (uint8_t*) &tx_msg5, sizeof(tx_msg5));
 8002302:	1939      	adds	r1, r7, r4
 8002304:	4b7a      	ldr	r3, [pc, #488]	@ (80024f0 <main+0x294>)
 8002306:	2208      	movs	r2, #8
 8002308:	0018      	movs	r0, r3
 800230a:	f004 fff9 	bl	8007300 <HAL_UART_Transmit_IT>
  HAL_Delay(100);
 800230e:	2064      	movs	r0, #100	@ 0x64
 8002310:	f000 ffa2 	bl	8003258 <HAL_Delay>

  for(int i = 0; i < 72; i++)
 8002314:	2300      	movs	r3, #0
 8002316:	22ec      	movs	r2, #236	@ 0xec
 8002318:	18ba      	adds	r2, r7, r2
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	e020      	b.n	8002360 <main+0x104>
  {
    if(i < 8 || i > 72)
 800231e:	22ec      	movs	r2, #236	@ 0xec
 8002320:	18bb      	adds	r3, r7, r2
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b07      	cmp	r3, #7
 8002326:	dd03      	ble.n	8002330 <main+0xd4>
 8002328:	18bb      	adds	r3, r7, r2
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b48      	cmp	r3, #72	@ 0x48
 800232e:	dd0e      	ble.n	800234e <main+0xf2>
    {
      char tx_msg5_[14];
      sprintf(tx_msg5_, "AT+CH=%d, OFF", i);
 8002330:	23ec      	movs	r3, #236	@ 0xec
 8002332:	18fb      	adds	r3, r7, r3
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	4971      	ldr	r1, [pc, #452]	@ (80024fc <main+0x2a0>)
 8002338:	247c      	movs	r4, #124	@ 0x7c
 800233a:	193b      	adds	r3, r7, r4
 800233c:	0018      	movs	r0, r3
 800233e:	f00b fb3b 	bl	800d9b8 <siprintf>
      HAL_UART_Transmit_IT(&huart1, (uint8_t*) &tx_msg5_, sizeof(tx_msg5_));
 8002342:	1939      	adds	r1, r7, r4
 8002344:	4b6a      	ldr	r3, [pc, #424]	@ (80024f0 <main+0x294>)
 8002346:	220e      	movs	r2, #14
 8002348:	0018      	movs	r0, r3
 800234a:	f004 ffd9 	bl	8007300 <HAL_UART_Transmit_IT>
    }
    HAL_Delay(50);
 800234e:	2032      	movs	r0, #50	@ 0x32
 8002350:	f000 ff82 	bl	8003258 <HAL_Delay>
  for(int i = 0; i < 72; i++)
 8002354:	22ec      	movs	r2, #236	@ 0xec
 8002356:	18bb      	adds	r3, r7, r2
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	3301      	adds	r3, #1
 800235c:	18ba      	adds	r2, r7, r2
 800235e:	6013      	str	r3, [r2, #0]
 8002360:	23ec      	movs	r3, #236	@ 0xec
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b47      	cmp	r3, #71	@ 0x47
 8002368:	ddd9      	ble.n	800231e <main+0xc2>
  }

  char tx_msg0[] = "AT+KEY=APPKEY,\"B8AC2B18AE0F96A0FF83A63E33D0BA15\"\r\n"; 
 800236a:	24a0      	movs	r4, #160	@ 0xa0
 800236c:	193a      	adds	r2, r7, r4
 800236e:	4b64      	ldr	r3, [pc, #400]	@ (8002500 <main+0x2a4>)
 8002370:	0010      	movs	r0, r2
 8002372:	0019      	movs	r1, r3
 8002374:	2333      	movs	r3, #51	@ 0x33
 8002376:	001a      	movs	r2, r3
 8002378:	f00b fc2a 	bl	800dbd0 <memcpy>
  HAL_UART_Transmit_IT(&huart1, (uint8_t*) &tx_msg0, sizeof(tx_msg0));
 800237c:	1939      	adds	r1, r7, r4
 800237e:	4b5c      	ldr	r3, [pc, #368]	@ (80024f0 <main+0x294>)
 8002380:	2233      	movs	r2, #51	@ 0x33
 8002382:	0018      	movs	r0, r3
 8002384:	f004 ffbc 	bl	8007300 <HAL_UART_Transmit_IT>
  HAL_Delay(500);
 8002388:	23fa      	movs	r3, #250	@ 0xfa
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	0018      	movs	r0, r3
 800238e:	f000 ff63 	bl	8003258 <HAL_Delay>

  char tx_msg3[] = "AT+MODE= LWOTAA\r\n";
 8002392:	258c      	movs	r5, #140	@ 0x8c
 8002394:	197b      	adds	r3, r7, r5
 8002396:	4a5b      	ldr	r2, [pc, #364]	@ (8002504 <main+0x2a8>)
 8002398:	ca13      	ldmia	r2!, {r0, r1, r4}
 800239a:	c313      	stmia	r3!, {r0, r1, r4}
 800239c:	6811      	ldr	r1, [r2, #0]
 800239e:	6019      	str	r1, [r3, #0]
 80023a0:	8892      	ldrh	r2, [r2, #4]
 80023a2:	809a      	strh	r2, [r3, #4]
  HAL_UART_Transmit_IT(&huart1, (uint8_t*) &tx_msg3, sizeof(tx_msg3));
 80023a4:	1979      	adds	r1, r7, r5
 80023a6:	4b52      	ldr	r3, [pc, #328]	@ (80024f0 <main+0x294>)
 80023a8:	2212      	movs	r2, #18
 80023aa:	0018      	movs	r0, r3
 80023ac:	f004 ffa8 	bl	8007300 <HAL_UART_Transmit_IT>
  HAL_Delay(100);
 80023b0:	2064      	movs	r0, #100	@ 0x64
 80023b2:	f000 ff51 	bl	8003258 <HAL_Delay>

  while(!joined)
 80023b6:	e078      	b.n	80024aa <main+0x24e>
  {
    char tx_msg_[] = "AT+ID=DevEui\r\n"; 
 80023b8:	256c      	movs	r5, #108	@ 0x6c
 80023ba:	197b      	adds	r3, r7, r5
 80023bc:	4a52      	ldr	r2, [pc, #328]	@ (8002508 <main+0x2ac>)
 80023be:	ca13      	ldmia	r2!, {r0, r1, r4}
 80023c0:	c313      	stmia	r3!, {r0, r1, r4}
 80023c2:	8811      	ldrh	r1, [r2, #0]
 80023c4:	8019      	strh	r1, [r3, #0]
 80023c6:	7892      	ldrb	r2, [r2, #2]
 80023c8:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit_IT(&huart1, (uint8_t*) &tx_msg_, sizeof(tx_msg_));
 80023ca:	1979      	adds	r1, r7, r5
 80023cc:	4b48      	ldr	r3, [pc, #288]	@ (80024f0 <main+0x294>)
 80023ce:	220f      	movs	r2, #15
 80023d0:	0018      	movs	r0, r3
 80023d2:	f004 ff95 	bl	8007300 <HAL_UART_Transmit_IT>
    HAL_Delay(1000);
 80023d6:	23fa      	movs	r3, #250	@ 0xfa
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	0018      	movs	r0, r3
 80023dc:	f000 ff3c 	bl	8003258 <HAL_Delay>
    
    char tx_msg2[] = "AT+ID=AppEui\r\n";
 80023e0:	255c      	movs	r5, #92	@ 0x5c
 80023e2:	197b      	adds	r3, r7, r5
 80023e4:	4a49      	ldr	r2, [pc, #292]	@ (800250c <main+0x2b0>)
 80023e6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80023e8:	c313      	stmia	r3!, {r0, r1, r4}
 80023ea:	8811      	ldrh	r1, [r2, #0]
 80023ec:	8019      	strh	r1, [r3, #0]
 80023ee:	7892      	ldrb	r2, [r2, #2]
 80023f0:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit_IT(&huart1, (uint8_t*) &tx_msg2, sizeof(tx_msg2));
 80023f2:	1979      	adds	r1, r7, r5
 80023f4:	4b3e      	ldr	r3, [pc, #248]	@ (80024f0 <main+0x294>)
 80023f6:	220f      	movs	r2, #15
 80023f8:	0018      	movs	r0, r3
 80023fa:	f004 ff81 	bl	8007300 <HAL_UART_Transmit_IT>
    HAL_Delay(1000);
 80023fe:	23fa      	movs	r3, #250	@ 0xfa
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	0018      	movs	r0, r3
 8002404:	f000 ff28 	bl	8003258 <HAL_Delay>

    char tx_msg_class[] = "AT+CLASS=C\r\n";
 8002408:	254c      	movs	r5, #76	@ 0x4c
 800240a:	197b      	adds	r3, r7, r5
 800240c:	4a40      	ldr	r2, [pc, #256]	@ (8002510 <main+0x2b4>)
 800240e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002410:	c313      	stmia	r3!, {r0, r1, r4}
 8002412:	7812      	ldrb	r2, [r2, #0]
 8002414:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_IT(&huart1, (uint8_t*) &tx_msg_class, sizeof(tx_msg_class));
 8002416:	1979      	adds	r1, r7, r5
 8002418:	4b35      	ldr	r3, [pc, #212]	@ (80024f0 <main+0x294>)
 800241a:	220d      	movs	r2, #13
 800241c:	0018      	movs	r0, r3
 800241e:	f004 ff6f 	bl	8007300 <HAL_UART_Transmit_IT>
    HAL_Delay(1000);
 8002422:	23fa      	movs	r3, #250	@ 0xfa
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	0018      	movs	r0, r3
 8002428:	f000 ff16 	bl	8003258 <HAL_Delay>

    // char tx_msg_mc[] = "AT+LW=MC,OFF\r\n";
    // HAL_UART_Transmit_IT(&huart1, (uint8_t*) &tx_msg_class, sizeof(tx_msg_class));
    // HAL_Delay(1000);

    char tx_msg_durmx[] = "AT+LW=DUMRX,ON\r\n";
 800242c:	2538      	movs	r5, #56	@ 0x38
 800242e:	197b      	adds	r3, r7, r5
 8002430:	4a38      	ldr	r2, [pc, #224]	@ (8002514 <main+0x2b8>)
 8002432:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002434:	c313      	stmia	r3!, {r0, r1, r4}
 8002436:	6811      	ldr	r1, [r2, #0]
 8002438:	6019      	str	r1, [r3, #0]
 800243a:	7912      	ldrb	r2, [r2, #4]
 800243c:	711a      	strb	r2, [r3, #4]
    HAL_UART_Transmit_IT(&huart1, (uint8_t*) &tx_msg_durmx, sizeof(tx_msg_durmx));
 800243e:	1979      	adds	r1, r7, r5
 8002440:	4b2b      	ldr	r3, [pc, #172]	@ (80024f0 <main+0x294>)
 8002442:	2211      	movs	r2, #17
 8002444:	0018      	movs	r0, r3
 8002446:	f004 ff5b 	bl	8007300 <HAL_UART_Transmit_IT>
    HAL_Delay(1000);
 800244a:	23fa      	movs	r3, #250	@ 0xfa
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	0018      	movs	r0, r3
 8002450:	f000 ff02 	bl	8003258 <HAL_Delay>

    char tx_msg_dcmrx[] = "AT+LW=DCMRX,ON\r\n";
 8002454:	2524      	movs	r5, #36	@ 0x24
 8002456:	197b      	adds	r3, r7, r5
 8002458:	4a2f      	ldr	r2, [pc, #188]	@ (8002518 <main+0x2bc>)
 800245a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800245c:	c313      	stmia	r3!, {r0, r1, r4}
 800245e:	6811      	ldr	r1, [r2, #0]
 8002460:	6019      	str	r1, [r3, #0]
 8002462:	7912      	ldrb	r2, [r2, #4]
 8002464:	711a      	strb	r2, [r3, #4]
    HAL_UART_Transmit_IT(&huart1, (uint8_t*) &tx_msg_dcmrx, sizeof(tx_msg_dcmrx));
 8002466:	1979      	adds	r1, r7, r5
 8002468:	4b21      	ldr	r3, [pc, #132]	@ (80024f0 <main+0x294>)
 800246a:	2211      	movs	r2, #17
 800246c:	0018      	movs	r0, r3
 800246e:	f004 ff47 	bl	8007300 <HAL_UART_Transmit_IT>
    HAL_Delay(1000);
 8002472:	23fa      	movs	r3, #250	@ 0xfa
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	0018      	movs	r0, r3
 8002478:	f000 feee 	bl	8003258 <HAL_Delay>

    char tx_msg8[] = "AT+JOIN\r\n"; 
 800247c:	2418      	movs	r4, #24
 800247e:	193b      	adds	r3, r7, r4
 8002480:	4a26      	ldr	r2, [pc, #152]	@ (800251c <main+0x2c0>)
 8002482:	ca03      	ldmia	r2!, {r0, r1}
 8002484:	c303      	stmia	r3!, {r0, r1}
 8002486:	8812      	ldrh	r2, [r2, #0]
 8002488:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit_IT(&huart1, (uint8_t*) &tx_msg8, sizeof(tx_msg8));
 800248a:	1939      	adds	r1, r7, r4
 800248c:	4b18      	ldr	r3, [pc, #96]	@ (80024f0 <main+0x294>)
 800248e:	220a      	movs	r2, #10
 8002490:	0018      	movs	r0, r3
 8002492:	f004 ff35 	bl	8007300 <HAL_UART_Transmit_IT>

    CDC_Transmit_FS("JOIN ATTEMPT\r\n", 14);
 8002496:	4b22      	ldr	r3, [pc, #136]	@ (8002520 <main+0x2c4>)
 8002498:	210e      	movs	r1, #14
 800249a:	0018      	movs	r0, r3
 800249c:	f00a f87e 	bl	800c59c <CDC_Transmit_FS>

    HAL_Delay(1000);
 80024a0:	23fa      	movs	r3, #250	@ 0xfa
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	0018      	movs	r0, r3
 80024a6:	f000 fed7 	bl	8003258 <HAL_Delay>
  while(!joined)
 80024aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002524 <main+0x2c8>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2201      	movs	r2, #1
 80024b0:	4053      	eors	r3, r2
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d000      	beq.n	80024ba <main+0x25e>
 80024b8:	e77e      	b.n	80023b8 <main+0x15c>

  }

  CDC_Transmit_FS("JOIN SUCCESS\r\n", 14);
 80024ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002528 <main+0x2cc>)
 80024bc:	210e      	movs	r1, #14
 80024be:	0018      	movs	r0, r3
 80024c0:	f00a f86c 	bl	800c59c <CDC_Transmit_FS>
  {
    // char tx_msg8[] = "AT+JOIN\r\n"; 
    // HAL_UART_Transmit_IT(&huart1, (uint8_t*) &tx_msg8, sizeof(tx_msg8));
    // HAL_Delay(3000);
    
    char tx_msg[] = "AT+MSG=\"Adi<3robot\"\r\n"; 
 80024c4:	003b      	movs	r3, r7
 80024c6:	4a19      	ldr	r2, [pc, #100]	@ (800252c <main+0x2d0>)
 80024c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80024ca:	c313      	stmia	r3!, {r0, r1, r4}
 80024cc:	ca03      	ldmia	r2!, {r0, r1}
 80024ce:	c303      	stmia	r3!, {r0, r1}
 80024d0:	8812      	ldrh	r2, [r2, #0]
 80024d2:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit_IT(&huart1, (uint8_t*) &tx_msg, sizeof(tx_msg));
 80024d4:	0039      	movs	r1, r7
 80024d6:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <main+0x294>)
 80024d8:	2216      	movs	r2, #22
 80024da:	0018      	movs	r0, r3
 80024dc:	f004 ff10 	bl	8007300 <HAL_UART_Transmit_IT>
    HAL_Delay(10);
 80024e0:	200a      	movs	r0, #10
 80024e2:	f000 feb9 	bl	8003258 <HAL_Delay>
  {
 80024e6:	46c0      	nop			@ (mov r8, r8)
 80024e8:	e7ec      	b.n	80024c4 <main+0x268>
 80024ea:	46c0      	nop			@ (mov r8, r8)
 80024ec:	200005c4 	.word	0x200005c4
 80024f0:	200004c8 	.word	0x200004c8
 80024f4:	0800fdd8 	.word	0x0800fdd8
 80024f8:	0800fde8 	.word	0x0800fde8
 80024fc:	0800fda8 	.word	0x0800fda8
 8002500:	0800fdf0 	.word	0x0800fdf0
 8002504:	0800fe24 	.word	0x0800fe24
 8002508:	0800fe38 	.word	0x0800fe38
 800250c:	0800fe48 	.word	0x0800fe48
 8002510:	0800fe58 	.word	0x0800fe58
 8002514:	0800fe68 	.word	0x0800fe68
 8002518:	0800fe7c 	.word	0x0800fe7c
 800251c:	0800fe90 	.word	0x0800fe90
 8002520:	0800fdb8 	.word	0x0800fdb8
 8002524:	200009c4 	.word	0x200009c4
 8002528:	0800fdc8 	.word	0x0800fdc8
 800252c:	0800fe9c 	.word	0x0800fe9c

08002530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002530:	b590      	push	{r4, r7, lr}
 8002532:	b099      	sub	sp, #100	@ 0x64
 8002534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002536:	242c      	movs	r4, #44	@ 0x2c
 8002538:	193b      	adds	r3, r7, r4
 800253a:	0018      	movs	r0, r3
 800253c:	2334      	movs	r3, #52	@ 0x34
 800253e:	001a      	movs	r2, r3
 8002540:	2100      	movs	r1, #0
 8002542:	f00b fab3 	bl	800daac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002546:	231c      	movs	r3, #28
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	0018      	movs	r0, r3
 800254c:	2310      	movs	r3, #16
 800254e:	001a      	movs	r2, r3
 8002550:	2100      	movs	r1, #0
 8002552:	f00b faab 	bl	800daac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002556:	003b      	movs	r3, r7
 8002558:	0018      	movs	r0, r3
 800255a:	231c      	movs	r3, #28
 800255c:	001a      	movs	r2, r3
 800255e:	2100      	movs	r1, #0
 8002560:	f00b faa4 	bl	800daac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8002564:	0021      	movs	r1, r4
 8002566:	187b      	adds	r3, r7, r1
 8002568:	2232      	movs	r2, #50	@ 0x32
 800256a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800256c:	187b      	adds	r3, r7, r1
 800256e:	2201      	movs	r2, #1
 8002570:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002572:	187b      	adds	r3, r7, r1
 8002574:	2201      	movs	r2, #1
 8002576:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002578:	187b      	adds	r3, r7, r1
 800257a:	2201      	movs	r2, #1
 800257c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800257e:	187b      	adds	r3, r7, r1
 8002580:	2210      	movs	r2, #16
 8002582:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002584:	187b      	adds	r3, r7, r1
 8002586:	2210      	movs	r2, #16
 8002588:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800258a:	187b      	adds	r3, r7, r1
 800258c:	2202      	movs	r2, #2
 800258e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002590:	187b      	adds	r3, r7, r1
 8002592:	2280      	movs	r2, #128	@ 0x80
 8002594:	0212      	lsls	r2, r2, #8
 8002596:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002598:	187b      	adds	r3, r7, r1
 800259a:	22e0      	movs	r2, #224	@ 0xe0
 800259c:	0352      	lsls	r2, r2, #13
 800259e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80025a0:	187b      	adds	r3, r7, r1
 80025a2:	2201      	movs	r2, #1
 80025a4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025a6:	187b      	adds	r3, r7, r1
 80025a8:	0018      	movs	r0, r3
 80025aa:	f003 fbcb 	bl	8005d44 <HAL_RCC_OscConfig>
 80025ae:	1e03      	subs	r3, r0, #0
 80025b0:	d001      	beq.n	80025b6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80025b2:	f000 fae1 	bl	8002b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025b6:	211c      	movs	r1, #28
 80025b8:	187b      	adds	r3, r7, r1
 80025ba:	2207      	movs	r2, #7
 80025bc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025be:	187b      	adds	r3, r7, r1
 80025c0:	2202      	movs	r2, #2
 80025c2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025c4:	187b      	adds	r3, r7, r1
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025ca:	187b      	adds	r3, r7, r1
 80025cc:	2200      	movs	r2, #0
 80025ce:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80025d0:	187b      	adds	r3, r7, r1
 80025d2:	2101      	movs	r1, #1
 80025d4:	0018      	movs	r0, r3
 80025d6:	f003 ff3b 	bl	8006450 <HAL_RCC_ClockConfig>
 80025da:	1e03      	subs	r3, r0, #0
 80025dc:	d001      	beq.n	80025e2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80025de:	f000 facb 	bl	8002b78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 80025e2:	003b      	movs	r3, r7
 80025e4:	4a09      	ldr	r2, [pc, #36]	@ (800260c <SystemClock_Config+0xdc>)
 80025e6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80025e8:	003b      	movs	r3, r7
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80025ee:	003b      	movs	r3, r7
 80025f0:	2200      	movs	r2, #0
 80025f2:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025f4:	003b      	movs	r3, r7
 80025f6:	0018      	movs	r0, r3
 80025f8:	f004 f896 	bl	8006728 <HAL_RCCEx_PeriphCLKConfig>
 80025fc:	1e03      	subs	r3, r0, #0
 80025fe:	d001      	beq.n	8002604 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002600:	f000 faba 	bl	8002b78 <Error_Handler>
  }
}
 8002604:	46c0      	nop			@ (mov r8, r8)
 8002606:	46bd      	mov	sp, r7
 8002608:	b019      	add	sp, #100	@ 0x64
 800260a:	bd90      	pop	{r4, r7, pc}
 800260c:	00020001 	.word	0x00020001

08002610 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002616:	1d3b      	adds	r3, r7, #4
 8002618:	0018      	movs	r0, r3
 800261a:	230c      	movs	r3, #12
 800261c:	001a      	movs	r2, r3
 800261e:	2100      	movs	r1, #0
 8002620:	f00b fa44 	bl	800daac <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002624:	4b26      	ldr	r3, [pc, #152]	@ (80026c0 <MX_ADC_Init+0xb0>)
 8002626:	4a27      	ldr	r2, [pc, #156]	@ (80026c4 <MX_ADC_Init+0xb4>)
 8002628:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800262a:	4b25      	ldr	r3, [pc, #148]	@ (80026c0 <MX_ADC_Init+0xb0>)
 800262c:	2200      	movs	r2, #0
 800262e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002630:	4b23      	ldr	r3, [pc, #140]	@ (80026c0 <MX_ADC_Init+0xb0>)
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002636:	4b22      	ldr	r3, [pc, #136]	@ (80026c0 <MX_ADC_Init+0xb0>)
 8002638:	2200      	movs	r2, #0
 800263a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800263c:	4b20      	ldr	r3, [pc, #128]	@ (80026c0 <MX_ADC_Init+0xb0>)
 800263e:	2201      	movs	r2, #1
 8002640:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002642:	4b1f      	ldr	r3, [pc, #124]	@ (80026c0 <MX_ADC_Init+0xb0>)
 8002644:	2204      	movs	r2, #4
 8002646:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002648:	4b1d      	ldr	r3, [pc, #116]	@ (80026c0 <MX_ADC_Init+0xb0>)
 800264a:	2200      	movs	r2, #0
 800264c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800264e:	4b1c      	ldr	r3, [pc, #112]	@ (80026c0 <MX_ADC_Init+0xb0>)
 8002650:	2200      	movs	r2, #0
 8002652:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002654:	4b1a      	ldr	r3, [pc, #104]	@ (80026c0 <MX_ADC_Init+0xb0>)
 8002656:	2200      	movs	r2, #0
 8002658:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800265a:	4b19      	ldr	r3, [pc, #100]	@ (80026c0 <MX_ADC_Init+0xb0>)
 800265c:	2200      	movs	r2, #0
 800265e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002660:	4b17      	ldr	r3, [pc, #92]	@ (80026c0 <MX_ADC_Init+0xb0>)
 8002662:	22c2      	movs	r2, #194	@ 0xc2
 8002664:	32ff      	adds	r2, #255	@ 0xff
 8002666:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002668:	4b15      	ldr	r3, [pc, #84]	@ (80026c0 <MX_ADC_Init+0xb0>)
 800266a:	2200      	movs	r2, #0
 800266c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800266e:	4b14      	ldr	r3, [pc, #80]	@ (80026c0 <MX_ADC_Init+0xb0>)
 8002670:	2224      	movs	r2, #36	@ 0x24
 8002672:	2100      	movs	r1, #0
 8002674:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002676:	4b12      	ldr	r3, [pc, #72]	@ (80026c0 <MX_ADC_Init+0xb0>)
 8002678:	2201      	movs	r2, #1
 800267a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800267c:	4b10      	ldr	r3, [pc, #64]	@ (80026c0 <MX_ADC_Init+0xb0>)
 800267e:	0018      	movs	r0, r3
 8002680:	f000 fe0e 	bl	80032a0 <HAL_ADC_Init>
 8002684:	1e03      	subs	r3, r0, #0
 8002686:	d001      	beq.n	800268c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002688:	f000 fa76 	bl	8002b78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	2208      	movs	r2, #8
 8002690:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002692:	1d3b      	adds	r3, r7, #4
 8002694:	2280      	movs	r2, #128	@ 0x80
 8002696:	0152      	lsls	r2, r2, #5
 8002698:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800269a:	1d3b      	adds	r3, r7, #4
 800269c:	2280      	movs	r2, #128	@ 0x80
 800269e:	0552      	lsls	r2, r2, #21
 80026a0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80026a2:	1d3a      	adds	r2, r7, #4
 80026a4:	4b06      	ldr	r3, [pc, #24]	@ (80026c0 <MX_ADC_Init+0xb0>)
 80026a6:	0011      	movs	r1, r2
 80026a8:	0018      	movs	r0, r3
 80026aa:	f000 ff39 	bl	8003520 <HAL_ADC_ConfigChannel>
 80026ae:	1e03      	subs	r3, r0, #0
 80026b0:	d001      	beq.n	80026b6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80026b2:	f000 fa61 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80026b6:	46c0      	nop			@ (mov r8, r8)
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b004      	add	sp, #16
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	46c0      	nop			@ (mov r8, r8)
 80026c0:	20000378 	.word	0x20000378
 80026c4:	40012400 	.word	0x40012400

080026c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80026cc:	4b1b      	ldr	r3, [pc, #108]	@ (800273c <MX_SPI1_Init+0x74>)
 80026ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002740 <MX_SPI1_Init+0x78>)
 80026d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026d2:	4b1a      	ldr	r3, [pc, #104]	@ (800273c <MX_SPI1_Init+0x74>)
 80026d4:	2282      	movs	r2, #130	@ 0x82
 80026d6:	0052      	lsls	r2, r2, #1
 80026d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026da:	4b18      	ldr	r3, [pc, #96]	@ (800273c <MX_SPI1_Init+0x74>)
 80026dc:	2200      	movs	r2, #0
 80026de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026e0:	4b16      	ldr	r3, [pc, #88]	@ (800273c <MX_SPI1_Init+0x74>)
 80026e2:	22e0      	movs	r2, #224	@ 0xe0
 80026e4:	00d2      	lsls	r2, r2, #3
 80026e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026e8:	4b14      	ldr	r3, [pc, #80]	@ (800273c <MX_SPI1_Init+0x74>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026ee:	4b13      	ldr	r3, [pc, #76]	@ (800273c <MX_SPI1_Init+0x74>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026f4:	4b11      	ldr	r3, [pc, #68]	@ (800273c <MX_SPI1_Init+0x74>)
 80026f6:	2280      	movs	r2, #128	@ 0x80
 80026f8:	0092      	lsls	r2, r2, #2
 80026fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80026fc:	4b0f      	ldr	r3, [pc, #60]	@ (800273c <MX_SPI1_Init+0x74>)
 80026fe:	2208      	movs	r2, #8
 8002700:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002702:	4b0e      	ldr	r3, [pc, #56]	@ (800273c <MX_SPI1_Init+0x74>)
 8002704:	2200      	movs	r2, #0
 8002706:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002708:	4b0c      	ldr	r3, [pc, #48]	@ (800273c <MX_SPI1_Init+0x74>)
 800270a:	2200      	movs	r2, #0
 800270c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800270e:	4b0b      	ldr	r3, [pc, #44]	@ (800273c <MX_SPI1_Init+0x74>)
 8002710:	2200      	movs	r2, #0
 8002712:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002714:	4b09      	ldr	r3, [pc, #36]	@ (800273c <MX_SPI1_Init+0x74>)
 8002716:	2207      	movs	r2, #7
 8002718:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800271a:	4b08      	ldr	r3, [pc, #32]	@ (800273c <MX_SPI1_Init+0x74>)
 800271c:	2200      	movs	r2, #0
 800271e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002720:	4b06      	ldr	r3, [pc, #24]	@ (800273c <MX_SPI1_Init+0x74>)
 8002722:	2208      	movs	r2, #8
 8002724:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002726:	4b05      	ldr	r3, [pc, #20]	@ (800273c <MX_SPI1_Init+0x74>)
 8002728:	0018      	movs	r0, r3
 800272a:	f004 f8fb 	bl	8006924 <HAL_SPI_Init>
 800272e:	1e03      	subs	r3, r0, #0
 8002730:	d001      	beq.n	8002736 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002732:	f000 fa21 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002736:	46c0      	nop			@ (mov r8, r8)
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	200003b8 	.word	0x200003b8
 8002740:	40013000 	.word	0x40013000

08002744 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002748:	4b1b      	ldr	r3, [pc, #108]	@ (80027b8 <MX_SPI2_Init+0x74>)
 800274a:	4a1c      	ldr	r2, [pc, #112]	@ (80027bc <MX_SPI2_Init+0x78>)
 800274c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800274e:	4b1a      	ldr	r3, [pc, #104]	@ (80027b8 <MX_SPI2_Init+0x74>)
 8002750:	2282      	movs	r2, #130	@ 0x82
 8002752:	0052      	lsls	r2, r2, #1
 8002754:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002756:	4b18      	ldr	r3, [pc, #96]	@ (80027b8 <MX_SPI2_Init+0x74>)
 8002758:	2200      	movs	r2, #0
 800275a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800275c:	4b16      	ldr	r3, [pc, #88]	@ (80027b8 <MX_SPI2_Init+0x74>)
 800275e:	22c0      	movs	r2, #192	@ 0xc0
 8002760:	0092      	lsls	r2, r2, #2
 8002762:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002764:	4b14      	ldr	r3, [pc, #80]	@ (80027b8 <MX_SPI2_Init+0x74>)
 8002766:	2200      	movs	r2, #0
 8002768:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800276a:	4b13      	ldr	r3, [pc, #76]	@ (80027b8 <MX_SPI2_Init+0x74>)
 800276c:	2200      	movs	r2, #0
 800276e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002770:	4b11      	ldr	r3, [pc, #68]	@ (80027b8 <MX_SPI2_Init+0x74>)
 8002772:	2280      	movs	r2, #128	@ 0x80
 8002774:	02d2      	lsls	r2, r2, #11
 8002776:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002778:	4b0f      	ldr	r3, [pc, #60]	@ (80027b8 <MX_SPI2_Init+0x74>)
 800277a:	2200      	movs	r2, #0
 800277c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800277e:	4b0e      	ldr	r3, [pc, #56]	@ (80027b8 <MX_SPI2_Init+0x74>)
 8002780:	2200      	movs	r2, #0
 8002782:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002784:	4b0c      	ldr	r3, [pc, #48]	@ (80027b8 <MX_SPI2_Init+0x74>)
 8002786:	2200      	movs	r2, #0
 8002788:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800278a:	4b0b      	ldr	r3, [pc, #44]	@ (80027b8 <MX_SPI2_Init+0x74>)
 800278c:	2200      	movs	r2, #0
 800278e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002790:	4b09      	ldr	r3, [pc, #36]	@ (80027b8 <MX_SPI2_Init+0x74>)
 8002792:	2207      	movs	r2, #7
 8002794:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002796:	4b08      	ldr	r3, [pc, #32]	@ (80027b8 <MX_SPI2_Init+0x74>)
 8002798:	2200      	movs	r2, #0
 800279a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800279c:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <MX_SPI2_Init+0x74>)
 800279e:	2208      	movs	r2, #8
 80027a0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80027a2:	4b05      	ldr	r3, [pc, #20]	@ (80027b8 <MX_SPI2_Init+0x74>)
 80027a4:	0018      	movs	r0, r3
 80027a6:	f004 f8bd 	bl	8006924 <HAL_SPI_Init>
 80027aa:	1e03      	subs	r3, r0, #0
 80027ac:	d001      	beq.n	80027b2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80027ae:	f000 f9e3 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80027b2:	46c0      	nop			@ (mov r8, r8)
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	2000041c 	.word	0x2000041c
 80027bc:	40003800 	.word	0x40003800

080027c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027c6:	2308      	movs	r3, #8
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	0018      	movs	r0, r3
 80027cc:	2310      	movs	r3, #16
 80027ce:	001a      	movs	r2, r3
 80027d0:	2100      	movs	r1, #0
 80027d2:	f00b f96b 	bl	800daac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027d6:	003b      	movs	r3, r7
 80027d8:	0018      	movs	r0, r3
 80027da:	2308      	movs	r3, #8
 80027dc:	001a      	movs	r2, r3
 80027de:	2100      	movs	r1, #0
 80027e0:	f00b f964 	bl	800daac <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002864 <MX_TIM3_Init+0xa4>)
 80027e6:	4a20      	ldr	r2, [pc, #128]	@ (8002868 <MX_TIM3_Init+0xa8>)
 80027e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 80027ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002864 <MX_TIM3_Init+0xa4>)
 80027ec:	22f4      	movs	r2, #244	@ 0xf4
 80027ee:	32ff      	adds	r2, #255	@ 0xff
 80027f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002864 <MX_TIM3_Init+0xa4>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 360-1;
 80027f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002864 <MX_TIM3_Init+0xa4>)
 80027fa:	2268      	movs	r2, #104	@ 0x68
 80027fc:	32ff      	adds	r2, #255	@ 0xff
 80027fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002800:	4b18      	ldr	r3, [pc, #96]	@ (8002864 <MX_TIM3_Init+0xa4>)
 8002802:	2200      	movs	r2, #0
 8002804:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002806:	4b17      	ldr	r3, [pc, #92]	@ (8002864 <MX_TIM3_Init+0xa4>)
 8002808:	2200      	movs	r2, #0
 800280a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800280c:	4b15      	ldr	r3, [pc, #84]	@ (8002864 <MX_TIM3_Init+0xa4>)
 800280e:	0018      	movs	r0, r3
 8002810:	f004 f940 	bl	8006a94 <HAL_TIM_Base_Init>
 8002814:	1e03      	subs	r3, r0, #0
 8002816:	d001      	beq.n	800281c <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8002818:	f000 f9ae 	bl	8002b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800281c:	2108      	movs	r1, #8
 800281e:	187b      	adds	r3, r7, r1
 8002820:	2280      	movs	r2, #128	@ 0x80
 8002822:	0152      	lsls	r2, r2, #5
 8002824:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002826:	187a      	adds	r2, r7, r1
 8002828:	4b0e      	ldr	r3, [pc, #56]	@ (8002864 <MX_TIM3_Init+0xa4>)
 800282a:	0011      	movs	r1, r2
 800282c:	0018      	movs	r0, r3
 800282e:	f004 fa6f 	bl	8006d10 <HAL_TIM_ConfigClockSource>
 8002832:	1e03      	subs	r3, r0, #0
 8002834:	d001      	beq.n	800283a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002836:	f000 f99f 	bl	8002b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800283a:	003b      	movs	r3, r7
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002840:	003b      	movs	r3, r7
 8002842:	2200      	movs	r2, #0
 8002844:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002846:	003a      	movs	r2, r7
 8002848:	4b06      	ldr	r3, [pc, #24]	@ (8002864 <MX_TIM3_Init+0xa4>)
 800284a:	0011      	movs	r1, r2
 800284c:	0018      	movs	r0, r3
 800284e:	f004 fc83 	bl	8007158 <HAL_TIMEx_MasterConfigSynchronization>
 8002852:	1e03      	subs	r3, r0, #0
 8002854:	d001      	beq.n	800285a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002856:	f000 f98f 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800285a:	46c0      	nop			@ (mov r8, r8)
 800285c:	46bd      	mov	sp, r7
 800285e:	b006      	add	sp, #24
 8002860:	bd80      	pop	{r7, pc}
 8002862:	46c0      	nop			@ (mov r8, r8)
 8002864:	20000480 	.word	0x20000480
 8002868:	40000400 	.word	0x40000400

0800286c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002870:	4b16      	ldr	r3, [pc, #88]	@ (80028cc <MX_USART1_UART_Init+0x60>)
 8002872:	4a17      	ldr	r2, [pc, #92]	@ (80028d0 <MX_USART1_UART_Init+0x64>)
 8002874:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002876:	4b15      	ldr	r3, [pc, #84]	@ (80028cc <MX_USART1_UART_Init+0x60>)
 8002878:	2296      	movs	r2, #150	@ 0x96
 800287a:	0192      	lsls	r2, r2, #6
 800287c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800287e:	4b13      	ldr	r3, [pc, #76]	@ (80028cc <MX_USART1_UART_Init+0x60>)
 8002880:	2200      	movs	r2, #0
 8002882:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002884:	4b11      	ldr	r3, [pc, #68]	@ (80028cc <MX_USART1_UART_Init+0x60>)
 8002886:	2200      	movs	r2, #0
 8002888:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800288a:	4b10      	ldr	r3, [pc, #64]	@ (80028cc <MX_USART1_UART_Init+0x60>)
 800288c:	2200      	movs	r2, #0
 800288e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002890:	4b0e      	ldr	r3, [pc, #56]	@ (80028cc <MX_USART1_UART_Init+0x60>)
 8002892:	220c      	movs	r2, #12
 8002894:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002896:	4b0d      	ldr	r3, [pc, #52]	@ (80028cc <MX_USART1_UART_Init+0x60>)
 8002898:	2200      	movs	r2, #0
 800289a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800289c:	4b0b      	ldr	r3, [pc, #44]	@ (80028cc <MX_USART1_UART_Init+0x60>)
 800289e:	2200      	movs	r2, #0
 80028a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028a2:	4b0a      	ldr	r3, [pc, #40]	@ (80028cc <MX_USART1_UART_Init+0x60>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80028a8:	4b08      	ldr	r3, [pc, #32]	@ (80028cc <MX_USART1_UART_Init+0x60>)
 80028aa:	2210      	movs	r2, #16
 80028ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80028ae:	4b07      	ldr	r3, [pc, #28]	@ (80028cc <MX_USART1_UART_Init+0x60>)
 80028b0:	2280      	movs	r2, #128	@ 0x80
 80028b2:	0152      	lsls	r2, r2, #5
 80028b4:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028b6:	4b05      	ldr	r3, [pc, #20]	@ (80028cc <MX_USART1_UART_Init+0x60>)
 80028b8:	0018      	movs	r0, r3
 80028ba:	f004 fcbb 	bl	8007234 <HAL_UART_Init>
 80028be:	1e03      	subs	r3, r0, #0
 80028c0:	d001      	beq.n	80028c6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80028c2:	f000 f959 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028c6:	46c0      	nop			@ (mov r8, r8)
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	200004c8 	.word	0x200004c8
 80028d0:	40013800 	.word	0x40013800

080028d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028da:	4b0c      	ldr	r3, [pc, #48]	@ (800290c <MX_DMA_Init+0x38>)
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	4b0b      	ldr	r3, [pc, #44]	@ (800290c <MX_DMA_Init+0x38>)
 80028e0:	2101      	movs	r1, #1
 80028e2:	430a      	orrs	r2, r1
 80028e4:	615a      	str	r2, [r3, #20]
 80028e6:	4b09      	ldr	r3, [pc, #36]	@ (800290c <MX_DMA_Init+0x38>)
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	2201      	movs	r2, #1
 80028ec:	4013      	ands	r3, r2
 80028ee:	607b      	str	r3, [r7, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80028f2:	2200      	movs	r2, #0
 80028f4:	2100      	movs	r1, #0
 80028f6:	200a      	movs	r0, #10
 80028f8:	f000 ffcc 	bl	8003894 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80028fc:	200a      	movs	r0, #10
 80028fe:	f000 ffde 	bl	80038be <HAL_NVIC_EnableIRQ>

}
 8002902:	46c0      	nop			@ (mov r8, r8)
 8002904:	46bd      	mov	sp, r7
 8002906:	b002      	add	sp, #8
 8002908:	bd80      	pop	{r7, pc}
 800290a:	46c0      	nop			@ (mov r8, r8)
 800290c:	40021000 	.word	0x40021000

08002910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002910:	b590      	push	{r4, r7, lr}
 8002912:	b089      	sub	sp, #36	@ 0x24
 8002914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002916:	240c      	movs	r4, #12
 8002918:	193b      	adds	r3, r7, r4
 800291a:	0018      	movs	r0, r3
 800291c:	2314      	movs	r3, #20
 800291e:	001a      	movs	r2, r3
 8002920:	2100      	movs	r1, #0
 8002922:	f00b f8c3 	bl	800daac <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002926:	4b5b      	ldr	r3, [pc, #364]	@ (8002a94 <MX_GPIO_Init+0x184>)
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	4b5a      	ldr	r3, [pc, #360]	@ (8002a94 <MX_GPIO_Init+0x184>)
 800292c:	2180      	movs	r1, #128	@ 0x80
 800292e:	03c9      	lsls	r1, r1, #15
 8002930:	430a      	orrs	r2, r1
 8002932:	615a      	str	r2, [r3, #20]
 8002934:	4b57      	ldr	r3, [pc, #348]	@ (8002a94 <MX_GPIO_Init+0x184>)
 8002936:	695a      	ldr	r2, [r3, #20]
 8002938:	2380      	movs	r3, #128	@ 0x80
 800293a:	03db      	lsls	r3, r3, #15
 800293c:	4013      	ands	r3, r2
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002942:	4b54      	ldr	r3, [pc, #336]	@ (8002a94 <MX_GPIO_Init+0x184>)
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	4b53      	ldr	r3, [pc, #332]	@ (8002a94 <MX_GPIO_Init+0x184>)
 8002948:	2180      	movs	r1, #128	@ 0x80
 800294a:	0289      	lsls	r1, r1, #10
 800294c:	430a      	orrs	r2, r1
 800294e:	615a      	str	r2, [r3, #20]
 8002950:	4b50      	ldr	r3, [pc, #320]	@ (8002a94 <MX_GPIO_Init+0x184>)
 8002952:	695a      	ldr	r2, [r3, #20]
 8002954:	2380      	movs	r3, #128	@ 0x80
 8002956:	029b      	lsls	r3, r3, #10
 8002958:	4013      	ands	r3, r2
 800295a:	607b      	str	r3, [r7, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800295e:	4b4d      	ldr	r3, [pc, #308]	@ (8002a94 <MX_GPIO_Init+0x184>)
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	4b4c      	ldr	r3, [pc, #304]	@ (8002a94 <MX_GPIO_Init+0x184>)
 8002964:	2180      	movs	r1, #128	@ 0x80
 8002966:	02c9      	lsls	r1, r1, #11
 8002968:	430a      	orrs	r2, r1
 800296a:	615a      	str	r2, [r3, #20]
 800296c:	4b49      	ldr	r3, [pc, #292]	@ (8002a94 <MX_GPIO_Init+0x184>)
 800296e:	695a      	ldr	r2, [r3, #20]
 8002970:	2380      	movs	r3, #128	@ 0x80
 8002972:	02db      	lsls	r3, r3, #11
 8002974:	4013      	ands	r3, r2
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, E5_NRST_Pin|DW_NSS_Pin, GPIO_PIN_RESET);
 800297a:	2390      	movs	r3, #144	@ 0x90
 800297c:	05db      	lsls	r3, r3, #23
 800297e:	2200      	movs	r2, #0
 8002980:	2111      	movs	r1, #17
 8002982:	0018      	movs	r0, r3
 8002984:	f001 fb63 	bl	800404e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCREEN_EN_Pin|SD_CS_Pin|WAKE_Pin|TFT_DC_Pin
 8002988:	4943      	ldr	r1, [pc, #268]	@ (8002a98 <MX_GPIO_Init+0x188>)
 800298a:	4b44      	ldr	r3, [pc, #272]	@ (8002a9c <MX_GPIO_Init+0x18c>)
 800298c:	2200      	movs	r2, #0
 800298e:	0018      	movs	r0, r3
 8002990:	f001 fb5d 	bl	800404e <HAL_GPIO_WritePin>
                          |TFT_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : E5_NRST_Pin */
  GPIO_InitStruct.Pin = E5_NRST_Pin;
 8002994:	193b      	adds	r3, r7, r4
 8002996:	2201      	movs	r2, #1
 8002998:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800299a:	193b      	adds	r3, r7, r4
 800299c:	2201      	movs	r2, #1
 800299e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	193b      	adds	r3, r7, r4
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a6:	193b      	adds	r3, r7, r4
 80029a8:	2200      	movs	r2, #0
 80029aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(E5_NRST_GPIO_Port, &GPIO_InitStruct);
 80029ac:	193a      	adds	r2, r7, r4
 80029ae:	2390      	movs	r3, #144	@ 0x90
 80029b0:	05db      	lsls	r3, r3, #23
 80029b2:	0011      	movs	r1, r2
 80029b4:	0018      	movs	r0, r3
 80029b6:	f001 f9b5 	bl	8003d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_RESET_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin;
 80029ba:	193b      	adds	r3, r7, r4
 80029bc:	2204      	movs	r2, #4
 80029be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029c0:	193b      	adds	r3, r7, r4
 80029c2:	2288      	movs	r2, #136	@ 0x88
 80029c4:	0352      	lsls	r2, r2, #13
 80029c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	193b      	adds	r3, r7, r4
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 80029ce:	193a      	adds	r2, r7, r4
 80029d0:	2390      	movs	r3, #144	@ 0x90
 80029d2:	05db      	lsls	r3, r3, #23
 80029d4:	0011      	movs	r1, r2
 80029d6:	0018      	movs	r0, r3
 80029d8:	f001 f9a4 	bl	8003d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 80029dc:	193b      	adds	r3, r7, r4
 80029de:	2210      	movs	r2, #16
 80029e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e2:	193b      	adds	r3, r7, r4
 80029e4:	2201      	movs	r2, #1
 80029e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	193b      	adds	r3, r7, r4
 80029ea:	2200      	movs	r2, #0
 80029ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ee:	193b      	adds	r3, r7, r4
 80029f0:	2203      	movs	r2, #3
 80029f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 80029f4:	193a      	adds	r2, r7, r4
 80029f6:	2390      	movs	r3, #144	@ 0x90
 80029f8:	05db      	lsls	r3, r3, #23
 80029fa:	0011      	movs	r1, r2
 80029fc:	0018      	movs	r0, r3
 80029fe:	f001 f991 	bl	8003d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCREEN_EN_Pin SD_CS_Pin WAKE_Pin TFT_DC_Pin
                           TFT_RST_Pin */
  GPIO_InitStruct.Pin = SCREEN_EN_Pin|SD_CS_Pin|WAKE_Pin|TFT_DC_Pin
 8002a02:	193b      	adds	r3, r7, r4
 8002a04:	4a24      	ldr	r2, [pc, #144]	@ (8002a98 <MX_GPIO_Init+0x188>)
 8002a06:	601a      	str	r2, [r3, #0]
                          |TFT_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a08:	193b      	adds	r3, r7, r4
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	193b      	adds	r3, r7, r4
 8002a10:	2200      	movs	r2, #0
 8002a12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a14:	193b      	adds	r3, r7, r4
 8002a16:	2200      	movs	r2, #0
 8002a18:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1a:	193b      	adds	r3, r7, r4
 8002a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8002a9c <MX_GPIO_Init+0x18c>)
 8002a1e:	0019      	movs	r1, r3
 8002a20:	0010      	movs	r0, r2
 8002a22:	f001 f97f 	bl	8003d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_DISP_Pin */
  GPIO_InitStruct.Pin = BTN_DISP_Pin;
 8002a26:	0021      	movs	r1, r4
 8002a28:	187b      	adds	r3, r7, r1
 8002a2a:	2280      	movs	r2, #128	@ 0x80
 8002a2c:	0192      	lsls	r2, r2, #6
 8002a2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a30:	000c      	movs	r4, r1
 8002a32:	193b      	adds	r3, r7, r4
 8002a34:	2200      	movs	r2, #0
 8002a36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	193b      	adds	r3, r7, r4
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_DISP_GPIO_Port, &GPIO_InitStruct);
 8002a3e:	193b      	adds	r3, r7, r4
 8002a40:	4a16      	ldr	r2, [pc, #88]	@ (8002a9c <MX_GPIO_Init+0x18c>)
 8002a42:	0019      	movs	r1, r3
 8002a44:	0010      	movs	r0, r2
 8002a46:	f001 f96d 	bl	8003d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 8002a4a:	0021      	movs	r1, r4
 8002a4c:	187b      	adds	r3, r7, r1
 8002a4e:	2220      	movs	r2, #32
 8002a50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a52:	187b      	adds	r3, r7, r1
 8002a54:	2288      	movs	r2, #136	@ 0x88
 8002a56:	0352      	lsls	r2, r2, #13
 8002a58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a5a:	187b      	adds	r3, r7, r1
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 8002a60:	187b      	adds	r3, r7, r1
 8002a62:	4a0e      	ldr	r2, [pc, #56]	@ (8002a9c <MX_GPIO_Init+0x18c>)
 8002a64:	0019      	movs	r1, r3
 8002a66:	0010      	movs	r0, r2
 8002a68:	f001 f95c 	bl	8003d24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2100      	movs	r1, #0
 8002a70:	2006      	movs	r0, #6
 8002a72:	f000 ff0f 	bl	8003894 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002a76:	2006      	movs	r0, #6
 8002a78:	f000 ff21 	bl	80038be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2100      	movs	r1, #0
 8002a80:	2007      	movs	r0, #7
 8002a82:	f000 ff07 	bl	8003894 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002a86:	2007      	movs	r0, #7
 8002a88:	f000 ff19 	bl	80038be <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a8c:	46c0      	nop			@ (mov r8, r8)
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b009      	add	sp, #36	@ 0x24
 8002a92:	bd90      	pop	{r4, r7, pc}
 8002a94:	40021000 	.word	0x40021000
 8002a98:	00000b44 	.word	0x00000b44
 8002a9c:	48000400 	.word	0x48000400

08002aa0 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t offset)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	000a      	movs	r2, r1
 8002aaa:	1cbb      	adds	r3, r7, #2
 8002aac:	801a      	strh	r2, [r3, #0]

	static uint16_t last_offset = 0;

	// Ignore if called twice (which will happen on every half buffer)
	if (offset != last_offset) {
 8002aae:	4b2d      	ldr	r3, [pc, #180]	@ (8002b64 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	1cba      	adds	r2, r7, #2
 8002ab4:	8812      	ldrh	r2, [r2, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d050      	beq.n	8002b5c <HAL_UARTEx_RxEventCallback+0xbc>

		// If wrap around reset last_size
		if (offset < last_offset)
 8002aba:	4b2a      	ldr	r3, [pc, #168]	@ (8002b64 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	1cba      	adds	r2, r7, #2
 8002ac0:	8812      	ldrh	r2, [r2, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d202      	bcs.n	8002acc <HAL_UARTEx_RxEventCallback+0x2c>
			last_offset = 0;
 8002ac6:	4b27      	ldr	r3, [pc, #156]	@ (8002b64 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	801a      	strh	r2, [r3, #0]

    CDC_Transmit_FS(uart_rx_buf + last_offset, offset - last_offset);
 8002acc:	4b25      	ldr	r3, [pc, #148]	@ (8002b64 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	001a      	movs	r2, r3
 8002ad2:	4b25      	ldr	r3, [pc, #148]	@ (8002b68 <HAL_UARTEx_RxEventCallback+0xc8>)
 8002ad4:	18d0      	adds	r0, r2, r3
 8002ad6:	1cbb      	adds	r3, r7, #2
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	4a22      	ldr	r2, [pc, #136]	@ (8002b64 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002adc:	8812      	ldrh	r2, [r2, #0]
 8002ade:	1a9b      	subs	r3, r3, r2
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	f009 fd5b 	bl	800c59c <CDC_Transmit_FS>
    
    static uint16_t response_offset = 0;
    
    for(uint16_t i = last_offset; i < offset; i++)
 8002ae6:	230e      	movs	r3, #14
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	4a1e      	ldr	r2, [pc, #120]	@ (8002b64 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002aec:	8812      	ldrh	r2, [r2, #0]
 8002aee:	801a      	strh	r2, [r3, #0]
 8002af0:	e029      	b.n	8002b46 <HAL_UARTEx_RxEventCallback+0xa6>
    {
      if(uart_rx_buf[i] == '+')
 8002af2:	210e      	movs	r1, #14
 8002af4:	187b      	adds	r3, r7, r1
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	4a1b      	ldr	r2, [pc, #108]	@ (8002b68 <HAL_UARTEx_RxEventCallback+0xc8>)
 8002afa:	5cd3      	ldrb	r3, [r2, r3]
 8002afc:	2b2b      	cmp	r3, #43	@ 0x2b
 8002afe:	d11c      	bne.n	8002b3a <HAL_UARTEx_RxEventCallback+0x9a>
      {
        response_offset = i;
 8002b00:	4b1a      	ldr	r3, [pc, #104]	@ (8002b6c <HAL_UARTEx_RxEventCallback+0xcc>)
 8002b02:	187a      	adds	r2, r7, r1
 8002b04:	8812      	ldrh	r2, [r2, #0]
 8002b06:	801a      	strh	r2, [r3, #0]
        if (offset < response_offset)
 8002b08:	4b18      	ldr	r3, [pc, #96]	@ (8002b6c <HAL_UARTEx_RxEventCallback+0xcc>)
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	1cba      	adds	r2, r7, #2
 8002b0e:	8812      	ldrh	r2, [r2, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d202      	bcs.n	8002b1a <HAL_UARTEx_RxEventCallback+0x7a>
          response_offset = 0;
 8002b14:	4b15      	ldr	r3, [pc, #84]	@ (8002b6c <HAL_UARTEx_RxEventCallback+0xcc>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	801a      	strh	r2, [r3, #0]
        if(memcmp(uart_rx_buf + response_offset, joined_msg, sizeof(joined_msg) - 1) == 0)
 8002b1a:	4b14      	ldr	r3, [pc, #80]	@ (8002b6c <HAL_UARTEx_RxEventCallback+0xcc>)
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	001a      	movs	r2, r3
 8002b20:	4b11      	ldr	r3, [pc, #68]	@ (8002b68 <HAL_UARTEx_RxEventCallback+0xc8>)
 8002b22:	18d3      	adds	r3, r2, r3
 8002b24:	4912      	ldr	r1, [pc, #72]	@ (8002b70 <HAL_UARTEx_RxEventCallback+0xd0>)
 8002b26:	2215      	movs	r2, #21
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f00a ffb1 	bl	800da90 <memcmp>
 8002b2e:	1e03      	subs	r3, r0, #0
 8002b30:	d103      	bne.n	8002b3a <HAL_UARTEx_RxEventCallback+0x9a>
        {
          joined = 1;
 8002b32:	4b10      	ldr	r3, [pc, #64]	@ (8002b74 <HAL_UARTEx_RxEventCallback+0xd4>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	701a      	strb	r2, [r3, #0]
          break;
 8002b38:	e00c      	b.n	8002b54 <HAL_UARTEx_RxEventCallback+0xb4>
    for(uint16_t i = last_offset; i < offset; i++)
 8002b3a:	210e      	movs	r1, #14
 8002b3c:	187b      	adds	r3, r7, r1
 8002b3e:	881a      	ldrh	r2, [r3, #0]
 8002b40:	187b      	adds	r3, r7, r1
 8002b42:	3201      	adds	r2, #1
 8002b44:	801a      	strh	r2, [r3, #0]
 8002b46:	230e      	movs	r3, #14
 8002b48:	18fa      	adds	r2, r7, r3
 8002b4a:	1cbb      	adds	r3, r7, #2
 8002b4c:	8812      	ldrh	r2, [r2, #0]
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d3ce      	bcc.n	8002af2 <HAL_UARTEx_RxEventCallback+0x52>
        }
      }
    }

    last_offset = offset;
 8002b54:	4b03      	ldr	r3, [pc, #12]	@ (8002b64 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002b56:	1cba      	adds	r2, r7, #2
 8002b58:	8812      	ldrh	r2, [r2, #0]
 8002b5a:	801a      	strh	r2, [r3, #0]


	}

}
 8002b5c:	46c0      	nop			@ (mov r8, r8)
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b004      	add	sp, #16
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	200009c6 	.word	0x200009c6
 8002b68:	200005c4 	.word	0x200005c4
 8002b6c:	200009c8 	.word	0x200009c8
 8002b70:	20000000 	.word	0x20000000
 8002b74:	200009c4 	.word	0x200009c4

08002b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b7c:	b672      	cpsid	i
}
 8002b7e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b80:	46c0      	nop			@ (mov r8, r8)
 8002b82:	e7fd      	b.n	8002b80 <Error_Handler+0x8>

08002b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8a:	4b13      	ldr	r3, [pc, #76]	@ (8002bd8 <HAL_MspInit+0x54>)
 8002b8c:	699a      	ldr	r2, [r3, #24]
 8002b8e:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <HAL_MspInit+0x54>)
 8002b90:	2101      	movs	r1, #1
 8002b92:	430a      	orrs	r2, r1
 8002b94:	619a      	str	r2, [r3, #24]
 8002b96:	4b10      	ldr	r3, [pc, #64]	@ (8002bd8 <HAL_MspInit+0x54>)
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	607b      	str	r3, [r7, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd8 <HAL_MspInit+0x54>)
 8002ba4:	69da      	ldr	r2, [r3, #28]
 8002ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd8 <HAL_MspInit+0x54>)
 8002ba8:	2180      	movs	r1, #128	@ 0x80
 8002baa:	0549      	lsls	r1, r1, #21
 8002bac:	430a      	orrs	r2, r1
 8002bae:	61da      	str	r2, [r3, #28]
 8002bb0:	4b09      	ldr	r3, [pc, #36]	@ (8002bd8 <HAL_MspInit+0x54>)
 8002bb2:	69da      	ldr	r2, [r3, #28]
 8002bb4:	2380      	movs	r3, #128	@ 0x80
 8002bb6:	055b      	lsls	r3, r3, #21
 8002bb8:	4013      	ands	r3, r2
 8002bba:	603b      	str	r3, [r7, #0]
 8002bbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	2004      	movs	r0, #4
 8002bc4:	f000 fe66 	bl	8003894 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8002bc8:	2004      	movs	r0, #4
 8002bca:	f000 fe78 	bl	80038be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bce:	46c0      	nop			@ (mov r8, r8)
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b002      	add	sp, #8
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	46c0      	nop			@ (mov r8, r8)
 8002bd8:	40021000 	.word	0x40021000

08002bdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b08b      	sub	sp, #44	@ 0x2c
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be4:	2414      	movs	r4, #20
 8002be6:	193b      	adds	r3, r7, r4
 8002be8:	0018      	movs	r0, r3
 8002bea:	2314      	movs	r3, #20
 8002bec:	001a      	movs	r2, r3
 8002bee:	2100      	movs	r1, #0
 8002bf0:	f00a ff5c 	bl	800daac <memset>
  if(hadc->Instance==ADC1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a18      	ldr	r2, [pc, #96]	@ (8002c5c <HAL_ADC_MspInit+0x80>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d12a      	bne.n	8002c54 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002bfe:	4b18      	ldr	r3, [pc, #96]	@ (8002c60 <HAL_ADC_MspInit+0x84>)
 8002c00:	699a      	ldr	r2, [r3, #24]
 8002c02:	4b17      	ldr	r3, [pc, #92]	@ (8002c60 <HAL_ADC_MspInit+0x84>)
 8002c04:	2180      	movs	r1, #128	@ 0x80
 8002c06:	0089      	lsls	r1, r1, #2
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	619a      	str	r2, [r3, #24]
 8002c0c:	4b14      	ldr	r3, [pc, #80]	@ (8002c60 <HAL_ADC_MspInit+0x84>)
 8002c0e:	699a      	ldr	r2, [r3, #24]
 8002c10:	2380      	movs	r3, #128	@ 0x80
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4013      	ands	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
 8002c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1a:	4b11      	ldr	r3, [pc, #68]	@ (8002c60 <HAL_ADC_MspInit+0x84>)
 8002c1c:	695a      	ldr	r2, [r3, #20]
 8002c1e:	4b10      	ldr	r3, [pc, #64]	@ (8002c60 <HAL_ADC_MspInit+0x84>)
 8002c20:	2180      	movs	r1, #128	@ 0x80
 8002c22:	02c9      	lsls	r1, r1, #11
 8002c24:	430a      	orrs	r2, r1
 8002c26:	615a      	str	r2, [r3, #20]
 8002c28:	4b0d      	ldr	r3, [pc, #52]	@ (8002c60 <HAL_ADC_MspInit+0x84>)
 8002c2a:	695a      	ldr	r2, [r3, #20]
 8002c2c:	2380      	movs	r3, #128	@ 0x80
 8002c2e:	02db      	lsls	r3, r3, #11
 8002c30:	4013      	ands	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = VBATT_ADC_Pin;
 8002c36:	193b      	adds	r3, r7, r4
 8002c38:	2201      	movs	r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c3c:	193b      	adds	r3, r7, r4
 8002c3e:	2203      	movs	r2, #3
 8002c40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c42:	193b      	adds	r3, r7, r4
 8002c44:	2200      	movs	r2, #0
 8002c46:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBATT_ADC_GPIO_Port, &GPIO_InitStruct);
 8002c48:	193b      	adds	r3, r7, r4
 8002c4a:	4a06      	ldr	r2, [pc, #24]	@ (8002c64 <HAL_ADC_MspInit+0x88>)
 8002c4c:	0019      	movs	r1, r3
 8002c4e:	0010      	movs	r0, r2
 8002c50:	f001 f868 	bl	8003d24 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002c54:	46c0      	nop			@ (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b00b      	add	sp, #44	@ 0x2c
 8002c5a:	bd90      	pop	{r4, r7, pc}
 8002c5c:	40012400 	.word	0x40012400
 8002c60:	40021000 	.word	0x40021000
 8002c64:	48000400 	.word	0x48000400

08002c68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c68:	b590      	push	{r4, r7, lr}
 8002c6a:	b08d      	sub	sp, #52	@ 0x34
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c70:	241c      	movs	r4, #28
 8002c72:	193b      	adds	r3, r7, r4
 8002c74:	0018      	movs	r0, r3
 8002c76:	2314      	movs	r3, #20
 8002c78:	001a      	movs	r2, r3
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	f00a ff16 	bl	800daac <memset>
  if(hspi->Instance==SPI1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a45      	ldr	r2, [pc, #276]	@ (8002d9c <HAL_SPI_MspInit+0x134>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d133      	bne.n	8002cf2 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c8a:	4b45      	ldr	r3, [pc, #276]	@ (8002da0 <HAL_SPI_MspInit+0x138>)
 8002c8c:	699a      	ldr	r2, [r3, #24]
 8002c8e:	4b44      	ldr	r3, [pc, #272]	@ (8002da0 <HAL_SPI_MspInit+0x138>)
 8002c90:	2180      	movs	r1, #128	@ 0x80
 8002c92:	0149      	lsls	r1, r1, #5
 8002c94:	430a      	orrs	r2, r1
 8002c96:	619a      	str	r2, [r3, #24]
 8002c98:	4b41      	ldr	r3, [pc, #260]	@ (8002da0 <HAL_SPI_MspInit+0x138>)
 8002c9a:	699a      	ldr	r2, [r3, #24]
 8002c9c:	2380      	movs	r3, #128	@ 0x80
 8002c9e:	015b      	lsls	r3, r3, #5
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
 8002ca4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca6:	4b3e      	ldr	r3, [pc, #248]	@ (8002da0 <HAL_SPI_MspInit+0x138>)
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	4b3d      	ldr	r3, [pc, #244]	@ (8002da0 <HAL_SPI_MspInit+0x138>)
 8002cac:	2180      	movs	r1, #128	@ 0x80
 8002cae:	0289      	lsls	r1, r1, #10
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	615a      	str	r2, [r3, #20]
 8002cb4:	4b3a      	ldr	r3, [pc, #232]	@ (8002da0 <HAL_SPI_MspInit+0x138>)
 8002cb6:	695a      	ldr	r2, [r3, #20]
 8002cb8:	2380      	movs	r3, #128	@ 0x80
 8002cba:	029b      	lsls	r3, r3, #10
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DW_SCK_Pin|DW_MISO_Pin|DW_MOSI_Pin;
 8002cc2:	0021      	movs	r1, r4
 8002cc4:	187b      	adds	r3, r7, r1
 8002cc6:	22e0      	movs	r2, #224	@ 0xe0
 8002cc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cca:	187b      	adds	r3, r7, r1
 8002ccc:	2202      	movs	r2, #2
 8002cce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd0:	187b      	adds	r3, r7, r1
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cd6:	187b      	adds	r3, r7, r1
 8002cd8:	2203      	movs	r2, #3
 8002cda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002cdc:	187b      	adds	r3, r7, r1
 8002cde:	2200      	movs	r2, #0
 8002ce0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce2:	187a      	adds	r2, r7, r1
 8002ce4:	2390      	movs	r3, #144	@ 0x90
 8002ce6:	05db      	lsls	r3, r3, #23
 8002ce8:	0011      	movs	r1, r2
 8002cea:	0018      	movs	r0, r3
 8002cec:	f001 f81a 	bl	8003d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002cf0:	e04f      	b.n	8002d92 <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI2)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a2b      	ldr	r2, [pc, #172]	@ (8002da4 <HAL_SPI_MspInit+0x13c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d14a      	bne.n	8002d92 <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002cfc:	4b28      	ldr	r3, [pc, #160]	@ (8002da0 <HAL_SPI_MspInit+0x138>)
 8002cfe:	69da      	ldr	r2, [r3, #28]
 8002d00:	4b27      	ldr	r3, [pc, #156]	@ (8002da0 <HAL_SPI_MspInit+0x138>)
 8002d02:	2180      	movs	r1, #128	@ 0x80
 8002d04:	01c9      	lsls	r1, r1, #7
 8002d06:	430a      	orrs	r2, r1
 8002d08:	61da      	str	r2, [r3, #28]
 8002d0a:	4b25      	ldr	r3, [pc, #148]	@ (8002da0 <HAL_SPI_MspInit+0x138>)
 8002d0c:	69da      	ldr	r2, [r3, #28]
 8002d0e:	2380      	movs	r3, #128	@ 0x80
 8002d10:	01db      	lsls	r3, r3, #7
 8002d12:	4013      	ands	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d18:	4b21      	ldr	r3, [pc, #132]	@ (8002da0 <HAL_SPI_MspInit+0x138>)
 8002d1a:	695a      	ldr	r2, [r3, #20]
 8002d1c:	4b20      	ldr	r3, [pc, #128]	@ (8002da0 <HAL_SPI_MspInit+0x138>)
 8002d1e:	2180      	movs	r1, #128	@ 0x80
 8002d20:	02c9      	lsls	r1, r1, #11
 8002d22:	430a      	orrs	r2, r1
 8002d24:	615a      	str	r2, [r3, #20]
 8002d26:	4b1e      	ldr	r3, [pc, #120]	@ (8002da0 <HAL_SPI_MspInit+0x138>)
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	2380      	movs	r3, #128	@ 0x80
 8002d2c:	02db      	lsls	r3, r3, #11
 8002d2e:	4013      	ands	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d34:	211c      	movs	r1, #28
 8002d36:	187b      	adds	r3, r7, r1
 8002d38:	2280      	movs	r2, #128	@ 0x80
 8002d3a:	00d2      	lsls	r2, r2, #3
 8002d3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3e:	000c      	movs	r4, r1
 8002d40:	193b      	adds	r3, r7, r4
 8002d42:	2202      	movs	r2, #2
 8002d44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d46:	193b      	adds	r3, r7, r4
 8002d48:	2200      	movs	r2, #0
 8002d4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d4c:	193b      	adds	r3, r7, r4
 8002d4e:	2203      	movs	r2, #3
 8002d50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d52:	193b      	adds	r3, r7, r4
 8002d54:	2205      	movs	r2, #5
 8002d56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d58:	193b      	adds	r3, r7, r4
 8002d5a:	4a13      	ldr	r2, [pc, #76]	@ (8002da8 <HAL_SPI_MspInit+0x140>)
 8002d5c:	0019      	movs	r1, r3
 8002d5e:	0010      	movs	r0, r2
 8002d60:	f000 ffe0 	bl	8003d24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TFT_CS_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8002d64:	0021      	movs	r1, r4
 8002d66:	187b      	adds	r3, r7, r1
 8002d68:	22d0      	movs	r2, #208	@ 0xd0
 8002d6a:	0212      	lsls	r2, r2, #8
 8002d6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6e:	187b      	adds	r3, r7, r1
 8002d70:	2202      	movs	r2, #2
 8002d72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	187b      	adds	r3, r7, r1
 8002d76:	2200      	movs	r2, #0
 8002d78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d7a:	187b      	adds	r3, r7, r1
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002d80:	187b      	adds	r3, r7, r1
 8002d82:	2200      	movs	r2, #0
 8002d84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d86:	187b      	adds	r3, r7, r1
 8002d88:	4a07      	ldr	r2, [pc, #28]	@ (8002da8 <HAL_SPI_MspInit+0x140>)
 8002d8a:	0019      	movs	r1, r3
 8002d8c:	0010      	movs	r0, r2
 8002d8e:	f000 ffc9 	bl	8003d24 <HAL_GPIO_Init>
}
 8002d92:	46c0      	nop			@ (mov r8, r8)
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b00d      	add	sp, #52	@ 0x34
 8002d98:	bd90      	pop	{r4, r7, pc}
 8002d9a:	46c0      	nop			@ (mov r8, r8)
 8002d9c:	40013000 	.word	0x40013000
 8002da0:	40021000 	.word	0x40021000
 8002da4:	40003800 	.word	0x40003800
 8002da8:	48000400 	.word	0x48000400

08002dac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a0d      	ldr	r2, [pc, #52]	@ (8002df0 <HAL_TIM_Base_MspInit+0x44>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d113      	bne.n	8002de6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002df4 <HAL_TIM_Base_MspInit+0x48>)
 8002dc0:	69da      	ldr	r2, [r3, #28]
 8002dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8002df4 <HAL_TIM_Base_MspInit+0x48>)
 8002dc4:	2102      	movs	r1, #2
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	61da      	str	r2, [r3, #28]
 8002dca:	4b0a      	ldr	r3, [pc, #40]	@ (8002df4 <HAL_TIM_Base_MspInit+0x48>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2100      	movs	r1, #0
 8002dda:	2010      	movs	r0, #16
 8002ddc:	f000 fd5a 	bl	8003894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002de0:	2010      	movs	r0, #16
 8002de2:	f000 fd6c 	bl	80038be <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002de6:	46c0      	nop			@ (mov r8, r8)
 8002de8:	46bd      	mov	sp, r7
 8002dea:	b004      	add	sp, #16
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	46c0      	nop			@ (mov r8, r8)
 8002df0:	40000400 	.word	0x40000400
 8002df4:	40021000 	.word	0x40021000

08002df8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002df8:	b590      	push	{r4, r7, lr}
 8002dfa:	b08b      	sub	sp, #44	@ 0x2c
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e00:	2414      	movs	r4, #20
 8002e02:	193b      	adds	r3, r7, r4
 8002e04:	0018      	movs	r0, r3
 8002e06:	2314      	movs	r3, #20
 8002e08:	001a      	movs	r2, r3
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	f00a fe4e 	bl	800daac <memset>
  if(huart->Instance==USART1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a34      	ldr	r2, [pc, #208]	@ (8002ee8 <HAL_UART_MspInit+0xf0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d161      	bne.n	8002ede <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e1a:	4b34      	ldr	r3, [pc, #208]	@ (8002eec <HAL_UART_MspInit+0xf4>)
 8002e1c:	699a      	ldr	r2, [r3, #24]
 8002e1e:	4b33      	ldr	r3, [pc, #204]	@ (8002eec <HAL_UART_MspInit+0xf4>)
 8002e20:	2180      	movs	r1, #128	@ 0x80
 8002e22:	01c9      	lsls	r1, r1, #7
 8002e24:	430a      	orrs	r2, r1
 8002e26:	619a      	str	r2, [r3, #24]
 8002e28:	4b30      	ldr	r3, [pc, #192]	@ (8002eec <HAL_UART_MspInit+0xf4>)
 8002e2a:	699a      	ldr	r2, [r3, #24]
 8002e2c:	2380      	movs	r3, #128	@ 0x80
 8002e2e:	01db      	lsls	r3, r3, #7
 8002e30:	4013      	ands	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e36:	4b2d      	ldr	r3, [pc, #180]	@ (8002eec <HAL_UART_MspInit+0xf4>)
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8002eec <HAL_UART_MspInit+0xf4>)
 8002e3c:	2180      	movs	r1, #128	@ 0x80
 8002e3e:	0289      	lsls	r1, r1, #10
 8002e40:	430a      	orrs	r2, r1
 8002e42:	615a      	str	r2, [r3, #20]
 8002e44:	4b29      	ldr	r3, [pc, #164]	@ (8002eec <HAL_UART_MspInit+0xf4>)
 8002e46:	695a      	ldr	r2, [r3, #20]
 8002e48:	2380      	movs	r3, #128	@ 0x80
 8002e4a:	029b      	lsls	r3, r3, #10
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e52:	193b      	adds	r3, r7, r4
 8002e54:	22c0      	movs	r2, #192	@ 0xc0
 8002e56:	00d2      	lsls	r2, r2, #3
 8002e58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	0021      	movs	r1, r4
 8002e5c:	187b      	adds	r3, r7, r1
 8002e5e:	2202      	movs	r2, #2
 8002e60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	187b      	adds	r3, r7, r1
 8002e64:	2200      	movs	r2, #0
 8002e66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e68:	187b      	adds	r3, r7, r1
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002e6e:	187b      	adds	r3, r7, r1
 8002e70:	2201      	movs	r2, #1
 8002e72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e74:	187a      	adds	r2, r7, r1
 8002e76:	2390      	movs	r3, #144	@ 0x90
 8002e78:	05db      	lsls	r3, r3, #23
 8002e7a:	0011      	movs	r1, r2
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f000 ff51 	bl	8003d24 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8002e82:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef0 <HAL_UART_MspInit+0xf8>)
 8002e84:	4a1b      	ldr	r2, [pc, #108]	@ (8002ef4 <HAL_UART_MspInit+0xfc>)
 8002e86:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e88:	4b19      	ldr	r3, [pc, #100]	@ (8002ef0 <HAL_UART_MspInit+0xf8>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e8e:	4b18      	ldr	r3, [pc, #96]	@ (8002ef0 <HAL_UART_MspInit+0xf8>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e94:	4b16      	ldr	r3, [pc, #88]	@ (8002ef0 <HAL_UART_MspInit+0xf8>)
 8002e96:	2280      	movs	r2, #128	@ 0x80
 8002e98:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e9a:	4b15      	ldr	r3, [pc, #84]	@ (8002ef0 <HAL_UART_MspInit+0xf8>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ea0:	4b13      	ldr	r3, [pc, #76]	@ (8002ef0 <HAL_UART_MspInit+0xf8>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002ea6:	4b12      	ldr	r3, [pc, #72]	@ (8002ef0 <HAL_UART_MspInit+0xf8>)
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002eac:	4b10      	ldr	r3, [pc, #64]	@ (8002ef0 <HAL_UART_MspInit+0xf8>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef0 <HAL_UART_MspInit+0xf8>)
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f000 fd1f 	bl	80038f8 <HAL_DMA_Init>
 8002eba:	1e03      	subs	r3, r0, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002ebe:	f7ff fe5b 	bl	8002b78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef0 <HAL_UART_MspInit+0xf8>)
 8002ec6:	675a      	str	r2, [r3, #116]	@ 0x74
 8002ec8:	4b09      	ldr	r3, [pc, #36]	@ (8002ef0 <HAL_UART_MspInit+0xf8>)
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	201b      	movs	r0, #27
 8002ed4:	f000 fcde 	bl	8003894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ed8:	201b      	movs	r0, #27
 8002eda:	f000 fcf0 	bl	80038be <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002ede:	46c0      	nop			@ (mov r8, r8)
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b00b      	add	sp, #44	@ 0x2c
 8002ee4:	bd90      	pop	{r4, r7, pc}
 8002ee6:	46c0      	nop			@ (mov r8, r8)
 8002ee8:	40013800 	.word	0x40013800
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	20000580 	.word	0x20000580
 8002ef4:	40020030 	.word	0x40020030

08002ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002efc:	46c0      	nop			@ (mov r8, r8)
 8002efe:	e7fd      	b.n	8002efc <NMI_Handler+0x4>

08002f00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f04:	46c0      	nop			@ (mov r8, r8)
 8002f06:	e7fd      	b.n	8002f04 <HardFault_Handler+0x4>

08002f08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002f0c:	46c0      	nop			@ (mov r8, r8)
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f16:	46c0      	nop			@ (mov r8, r8)
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f20:	f000 f97e 	bl	8003220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f24:	46c0      	nop			@ (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupts.
  */
void RCC_CRS_IRQHandler(void)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 8002f2e:	46c0      	nop			@ (mov r8, r8)
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_RESET_Pin);
 8002f38:	2004      	movs	r0, #4
 8002f3a:	f001 f8a5 	bl	8004088 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002f3e:	46c0      	nop			@ (mov r8, r8)
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQn_Pin);
 8002f48:	2020      	movs	r0, #32
 8002f4a:	f001 f89d 	bl	8004088 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002f4e:	46c0      	nop			@ (mov r8, r8)
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002f58:	4b03      	ldr	r3, [pc, #12]	@ (8002f68 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f000 fdf7 	bl	8003b4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002f60:	46c0      	nop			@ (mov r8, r8)
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	46c0      	nop			@ (mov r8, r8)
 8002f68:	20000580 	.word	0x20000580

08002f6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f70:	4b03      	ldr	r3, [pc, #12]	@ (8002f80 <TIM3_IRQHandler+0x14>)
 8002f72:	0018      	movs	r0, r3
 8002f74:	f003 fdde 	bl	8006b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f78:	46c0      	nop			@ (mov r8, r8)
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	46c0      	nop			@ (mov r8, r8)
 8002f80:	20000480 	.word	0x20000480

08002f84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  //   __HAL_UART_CLEAR_IDLEFLAG(&huart1);
  //   UART1_IdleCallback();
  // }

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f88:	4b03      	ldr	r3, [pc, #12]	@ (8002f98 <USART1_IRQHandler+0x14>)
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f004 fa28 	bl	80073e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f90:	46c0      	nop			@ (mov r8, r8)
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	46c0      	nop			@ (mov r8, r8)
 8002f98:	200004c8 	.word	0x200004c8

08002f9c <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002fa0:	4b03      	ldr	r3, [pc, #12]	@ (8002fb0 <USB_IRQHandler+0x14>)
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f001 f9a6 	bl	80042f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002fa8:	46c0      	nop			@ (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	46c0      	nop			@ (mov r8, r8)
 8002fb0:	2000169c 	.word	0x2000169c

08002fb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  return 1;
 8002fb8:	2301      	movs	r3, #1
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <_kill>:

int _kill(int pid, int sig)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fca:	f00a fdc9 	bl	800db60 <__errno>
 8002fce:	0003      	movs	r3, r0
 8002fd0:	2216      	movs	r2, #22
 8002fd2:	601a      	str	r2, [r3, #0]
  return -1;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	425b      	negs	r3, r3
}
 8002fd8:	0018      	movs	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	b002      	add	sp, #8
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <_exit>:

void _exit (int status)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002fe8:	2301      	movs	r3, #1
 8002fea:	425a      	negs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	0011      	movs	r1, r2
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f7ff ffe5 	bl	8002fc0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ff6:	46c0      	nop			@ (mov r8, r8)
 8002ff8:	e7fd      	b.n	8002ff6 <_exit+0x16>

08002ffa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b086      	sub	sp, #24
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	60f8      	str	r0, [r7, #12]
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	e00a      	b.n	8003022 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800300c:	e000      	b.n	8003010 <_read+0x16>
 800300e:	bf00      	nop
 8003010:	0001      	movs	r1, r0
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	60ba      	str	r2, [r7, #8]
 8003018:	b2ca      	uxtb	r2, r1
 800301a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	3301      	adds	r3, #1
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	429a      	cmp	r2, r3
 8003028:	dbf0      	blt.n	800300c <_read+0x12>
  }

  return len;
 800302a:	687b      	ldr	r3, [r7, #4]
}
 800302c:	0018      	movs	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	b006      	add	sp, #24
 8003032:	bd80      	pop	{r7, pc}

08003034 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003040:	2300      	movs	r3, #0
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	e009      	b.n	800305a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	60ba      	str	r2, [r7, #8]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	0018      	movs	r0, r3
 8003050:	e000      	b.n	8003054 <_write+0x20>
 8003052:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	3301      	adds	r3, #1
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	429a      	cmp	r2, r3
 8003060:	dbf1      	blt.n	8003046 <_write+0x12>
  }
  return len;
 8003062:	687b      	ldr	r3, [r7, #4]
}
 8003064:	0018      	movs	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	b006      	add	sp, #24
 800306a:	bd80      	pop	{r7, pc}

0800306c <_close>:

int _close(int file)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003074:	2301      	movs	r3, #1
 8003076:	425b      	negs	r3, r3
}
 8003078:	0018      	movs	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	b002      	add	sp, #8
 800307e:	bd80      	pop	{r7, pc}

08003080 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2280      	movs	r2, #128	@ 0x80
 800308e:	0192      	lsls	r2, r2, #6
 8003090:	605a      	str	r2, [r3, #4]
  return 0;
 8003092:	2300      	movs	r3, #0
}
 8003094:	0018      	movs	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	b002      	add	sp, #8
 800309a:	bd80      	pop	{r7, pc}

0800309c <_isatty>:

int _isatty(int file)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030a4:	2301      	movs	r3, #1
}
 80030a6:	0018      	movs	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	b002      	add	sp, #8
 80030ac:	bd80      	pop	{r7, pc}

080030ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	0018      	movs	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	b004      	add	sp, #16
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030cc:	4a14      	ldr	r2, [pc, #80]	@ (8003120 <_sbrk+0x5c>)
 80030ce:	4b15      	ldr	r3, [pc, #84]	@ (8003124 <_sbrk+0x60>)
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030d8:	4b13      	ldr	r3, [pc, #76]	@ (8003128 <_sbrk+0x64>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d102      	bne.n	80030e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030e0:	4b11      	ldr	r3, [pc, #68]	@ (8003128 <_sbrk+0x64>)
 80030e2:	4a12      	ldr	r2, [pc, #72]	@ (800312c <_sbrk+0x68>)
 80030e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030e6:	4b10      	ldr	r3, [pc, #64]	@ (8003128 <_sbrk+0x64>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	18d3      	adds	r3, r2, r3
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d207      	bcs.n	8003104 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030f4:	f00a fd34 	bl	800db60 <__errno>
 80030f8:	0003      	movs	r3, r0
 80030fa:	220c      	movs	r2, #12
 80030fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030fe:	2301      	movs	r3, #1
 8003100:	425b      	negs	r3, r3
 8003102:	e009      	b.n	8003118 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003104:	4b08      	ldr	r3, [pc, #32]	@ (8003128 <_sbrk+0x64>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800310a:	4b07      	ldr	r3, [pc, #28]	@ (8003128 <_sbrk+0x64>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	18d2      	adds	r2, r2, r3
 8003112:	4b05      	ldr	r3, [pc, #20]	@ (8003128 <_sbrk+0x64>)
 8003114:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003116:	68fb      	ldr	r3, [r7, #12]
}
 8003118:	0018      	movs	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	b006      	add	sp, #24
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20004000 	.word	0x20004000
 8003124:	00000400 	.word	0x00000400
 8003128:	200009cc 	.word	0x200009cc
 800312c:	20001ce8 	.word	0x20001ce8

08003130 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003134:	46c0      	nop			@ (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800313c:	480d      	ldr	r0, [pc, #52]	@ (8003174 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800313e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003140:	f7ff fff6 	bl	8003130 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003144:	480c      	ldr	r0, [pc, #48]	@ (8003178 <LoopForever+0x6>)
  ldr r1, =_edata
 8003146:	490d      	ldr	r1, [pc, #52]	@ (800317c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003148:	4a0d      	ldr	r2, [pc, #52]	@ (8003180 <LoopForever+0xe>)
  movs r3, #0
 800314a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800314c:	e002      	b.n	8003154 <LoopCopyDataInit>

0800314e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800314e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003152:	3304      	adds	r3, #4

08003154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003158:	d3f9      	bcc.n	800314e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800315a:	4a0a      	ldr	r2, [pc, #40]	@ (8003184 <LoopForever+0x12>)
  ldr r4, =_ebss
 800315c:	4c0a      	ldr	r4, [pc, #40]	@ (8003188 <LoopForever+0x16>)
  movs r3, #0
 800315e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003160:	e001      	b.n	8003166 <LoopFillZerobss>

08003162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003164:	3204      	adds	r2, #4

08003166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003168:	d3fb      	bcc.n	8003162 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800316a:	f00a fcff 	bl	800db6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800316e:	f7ff f875 	bl	800225c <main>

08003172 <LoopForever>:

LoopForever:
    b LoopForever
 8003172:	e7fe      	b.n	8003172 <LoopForever>
  ldr   r0, =_estack
 8003174:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800317c:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 8003180:	080103e0 	.word	0x080103e0
  ldr r2, =_sbss
 8003184:	2000035c 	.word	0x2000035c
  ldr r4, =_ebss
 8003188:	20001ce8 	.word	0x20001ce8

0800318c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800318c:	e7fe      	b.n	800318c <ADC1_COMP_IRQHandler>
	...

08003190 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003194:	4b07      	ldr	r3, [pc, #28]	@ (80031b4 <HAL_Init+0x24>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4b06      	ldr	r3, [pc, #24]	@ (80031b4 <HAL_Init+0x24>)
 800319a:	2110      	movs	r1, #16
 800319c:	430a      	orrs	r2, r1
 800319e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80031a0:	2003      	movs	r0, #3
 80031a2:	f000 f809 	bl	80031b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031a6:	f7ff fced 	bl	8002b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	0018      	movs	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	46c0      	nop			@ (mov r8, r8)
 80031b4:	40022000 	.word	0x40022000

080031b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031b8:	b590      	push	{r4, r7, lr}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031c0:	4b14      	ldr	r3, [pc, #80]	@ (8003214 <HAL_InitTick+0x5c>)
 80031c2:	681c      	ldr	r4, [r3, #0]
 80031c4:	4b14      	ldr	r3, [pc, #80]	@ (8003218 <HAL_InitTick+0x60>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	0019      	movs	r1, r3
 80031ca:	23fa      	movs	r3, #250	@ 0xfa
 80031cc:	0098      	lsls	r0, r3, #2
 80031ce:	f7fc ffb7 	bl	8000140 <__udivsi3>
 80031d2:	0003      	movs	r3, r0
 80031d4:	0019      	movs	r1, r3
 80031d6:	0020      	movs	r0, r4
 80031d8:	f7fc ffb2 	bl	8000140 <__udivsi3>
 80031dc:	0003      	movs	r3, r0
 80031de:	0018      	movs	r0, r3
 80031e0:	f000 fb7d 	bl	80038de <HAL_SYSTICK_Config>
 80031e4:	1e03      	subs	r3, r0, #0
 80031e6:	d001      	beq.n	80031ec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e00f      	b.n	800320c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	d80b      	bhi.n	800320a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	2301      	movs	r3, #1
 80031f6:	425b      	negs	r3, r3
 80031f8:	2200      	movs	r2, #0
 80031fa:	0018      	movs	r0, r3
 80031fc:	f000 fb4a 	bl	8003894 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003200:	4b06      	ldr	r3, [pc, #24]	@ (800321c <HAL_InitTick+0x64>)
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	e000      	b.n	800320c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
}
 800320c:	0018      	movs	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	b003      	add	sp, #12
 8003212:	bd90      	pop	{r4, r7, pc}
 8003214:	20000018 	.word	0x20000018
 8003218:	20000020 	.word	0x20000020
 800321c:	2000001c 	.word	0x2000001c

08003220 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003224:	4b05      	ldr	r3, [pc, #20]	@ (800323c <HAL_IncTick+0x1c>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	001a      	movs	r2, r3
 800322a:	4b05      	ldr	r3, [pc, #20]	@ (8003240 <HAL_IncTick+0x20>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	18d2      	adds	r2, r2, r3
 8003230:	4b03      	ldr	r3, [pc, #12]	@ (8003240 <HAL_IncTick+0x20>)
 8003232:	601a      	str	r2, [r3, #0]
}
 8003234:	46c0      	nop			@ (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	46c0      	nop			@ (mov r8, r8)
 800323c:	20000020 	.word	0x20000020
 8003240:	200009d0 	.word	0x200009d0

08003244 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  return uwTick;
 8003248:	4b02      	ldr	r3, [pc, #8]	@ (8003254 <HAL_GetTick+0x10>)
 800324a:	681b      	ldr	r3, [r3, #0]
}
 800324c:	0018      	movs	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	46c0      	nop			@ (mov r8, r8)
 8003254:	200009d0 	.word	0x200009d0

08003258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003260:	f7ff fff0 	bl	8003244 <HAL_GetTick>
 8003264:	0003      	movs	r3, r0
 8003266:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	3301      	adds	r3, #1
 8003270:	d005      	beq.n	800327e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003272:	4b0a      	ldr	r3, [pc, #40]	@ (800329c <HAL_Delay+0x44>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	001a      	movs	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	189b      	adds	r3, r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800327e:	46c0      	nop			@ (mov r8, r8)
 8003280:	f7ff ffe0 	bl	8003244 <HAL_GetTick>
 8003284:	0002      	movs	r2, r0
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	429a      	cmp	r2, r3
 800328e:	d8f7      	bhi.n	8003280 <HAL_Delay+0x28>
  {
  }
}
 8003290:	46c0      	nop			@ (mov r8, r8)
 8003292:	46c0      	nop			@ (mov r8, r8)
 8003294:	46bd      	mov	sp, r7
 8003296:	b004      	add	sp, #16
 8003298:	bd80      	pop	{r7, pc}
 800329a:	46c0      	nop			@ (mov r8, r8)
 800329c:	20000020 	.word	0x20000020

080032a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032a8:	230f      	movs	r3, #15
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	2200      	movs	r2, #0
 80032ae:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e125      	b.n	800350a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10a      	bne.n	80032dc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2234      	movs	r2, #52	@ 0x34
 80032d0:	2100      	movs	r1, #0
 80032d2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	0018      	movs	r0, r3
 80032d8:	f7ff fc80 	bl	8002bdc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e0:	2210      	movs	r2, #16
 80032e2:	4013      	ands	r3, r2
 80032e4:	d000      	beq.n	80032e8 <HAL_ADC_Init+0x48>
 80032e6:	e103      	b.n	80034f0 <HAL_ADC_Init+0x250>
 80032e8:	230f      	movs	r3, #15
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d000      	beq.n	80032f4 <HAL_ADC_Init+0x54>
 80032f2:	e0fd      	b.n	80034f0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2204      	movs	r2, #4
 80032fc:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80032fe:	d000      	beq.n	8003302 <HAL_ADC_Init+0x62>
 8003300:	e0f6      	b.n	80034f0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003306:	4a83      	ldr	r2, [pc, #524]	@ (8003514 <HAL_ADC_Init+0x274>)
 8003308:	4013      	ands	r3, r2
 800330a:	2202      	movs	r2, #2
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2203      	movs	r2, #3
 800331a:	4013      	ands	r3, r2
 800331c:	2b01      	cmp	r3, #1
 800331e:	d112      	bne.n	8003346 <HAL_ADC_Init+0xa6>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2201      	movs	r2, #1
 8003328:	4013      	ands	r3, r2
 800332a:	2b01      	cmp	r3, #1
 800332c:	d009      	beq.n	8003342 <HAL_ADC_Init+0xa2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	2380      	movs	r3, #128	@ 0x80
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	401a      	ands	r2, r3
 800333a:	2380      	movs	r3, #128	@ 0x80
 800333c:	021b      	lsls	r3, r3, #8
 800333e:	429a      	cmp	r2, r3
 8003340:	d101      	bne.n	8003346 <HAL_ADC_Init+0xa6>
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <HAL_ADC_Init+0xa8>
 8003346:	2300      	movs	r3, #0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d116      	bne.n	800337a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	2218      	movs	r2, #24
 8003354:	4393      	bics	r3, r2
 8003356:	0019      	movs	r1, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	0899      	lsrs	r1, r3, #2
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4964      	ldr	r1, [pc, #400]	@ (8003518 <HAL_ADC_Init+0x278>)
 8003386:	400a      	ands	r2, r1
 8003388:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	7e1b      	ldrb	r3, [r3, #24]
 800338e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	7e5b      	ldrb	r3, [r3, #25]
 8003394:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003396:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	7e9b      	ldrb	r3, [r3, #26]
 800339c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800339e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d002      	beq.n	80033ae <HAL_ADC_Init+0x10e>
 80033a8:	2380      	movs	r3, #128	@ 0x80
 80033aa:	015b      	lsls	r3, r3, #5
 80033ac:	e000      	b.n	80033b0 <HAL_ADC_Init+0x110>
 80033ae:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80033b0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80033b6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d101      	bne.n	80033c4 <HAL_ADC_Init+0x124>
 80033c0:	2304      	movs	r3, #4
 80033c2:	e000      	b.n	80033c6 <HAL_ADC_Init+0x126>
 80033c4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80033c6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2124      	movs	r1, #36	@ 0x24
 80033cc:	5c5b      	ldrb	r3, [r3, r1]
 80033ce:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80033d0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	7edb      	ldrb	r3, [r3, #27]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d115      	bne.n	800340c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	7e9b      	ldrb	r3, [r3, #26]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d105      	bne.n	80033f4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2280      	movs	r2, #128	@ 0x80
 80033ec:	0252      	lsls	r2, r2, #9
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	e00b      	b.n	800340c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f8:	2220      	movs	r2, #32
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003404:	2201      	movs	r2, #1
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69da      	ldr	r2, [r3, #28]
 8003410:	23c2      	movs	r3, #194	@ 0xc2
 8003412:	33ff      	adds	r3, #255	@ 0xff
 8003414:	429a      	cmp	r2, r3
 8003416:	d007      	beq.n	8003428 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003420:	4313      	orrs	r3, r2
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	4313      	orrs	r3, r2
 8003426:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68d9      	ldr	r1, [r3, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	430a      	orrs	r2, r1
 8003436:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800343c:	2380      	movs	r3, #128	@ 0x80
 800343e:	055b      	lsls	r3, r3, #21
 8003440:	429a      	cmp	r2, r3
 8003442:	d01b      	beq.n	800347c <HAL_ADC_Init+0x1dc>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003448:	2b01      	cmp	r3, #1
 800344a:	d017      	beq.n	800347c <HAL_ADC_Init+0x1dc>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003450:	2b02      	cmp	r3, #2
 8003452:	d013      	beq.n	800347c <HAL_ADC_Init+0x1dc>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003458:	2b03      	cmp	r3, #3
 800345a:	d00f      	beq.n	800347c <HAL_ADC_Init+0x1dc>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003460:	2b04      	cmp	r3, #4
 8003462:	d00b      	beq.n	800347c <HAL_ADC_Init+0x1dc>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003468:	2b05      	cmp	r3, #5
 800346a:	d007      	beq.n	800347c <HAL_ADC_Init+0x1dc>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003470:	2b06      	cmp	r3, #6
 8003472:	d003      	beq.n	800347c <HAL_ADC_Init+0x1dc>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003478:	2b07      	cmp	r3, #7
 800347a:	d112      	bne.n	80034a2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2107      	movs	r1, #7
 8003488:	438a      	bics	r2, r1
 800348a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6959      	ldr	r1, [r3, #20]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003496:	2207      	movs	r2, #7
 8003498:	401a      	ands	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	4a1c      	ldr	r2, [pc, #112]	@ (800351c <HAL_ADC_Init+0x27c>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d10b      	bne.n	80034ca <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034bc:	2203      	movs	r2, #3
 80034be:	4393      	bics	r3, r2
 80034c0:	2201      	movs	r2, #1
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80034c8:	e01c      	b.n	8003504 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ce:	2212      	movs	r2, #18
 80034d0:	4393      	bics	r3, r2
 80034d2:	2210      	movs	r2, #16
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034de:	2201      	movs	r2, #1
 80034e0:	431a      	orrs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80034e6:	230f      	movs	r3, #15
 80034e8:	18fb      	adds	r3, r7, r3
 80034ea:	2201      	movs	r2, #1
 80034ec:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80034ee:	e009      	b.n	8003504 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f4:	2210      	movs	r2, #16
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80034fc:	230f      	movs	r3, #15
 80034fe:	18fb      	adds	r3, r7, r3
 8003500:	2201      	movs	r2, #1
 8003502:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003504:	230f      	movs	r3, #15
 8003506:	18fb      	adds	r3, r7, r3
 8003508:	781b      	ldrb	r3, [r3, #0]
}
 800350a:	0018      	movs	r0, r3
 800350c:	46bd      	mov	sp, r7
 800350e:	b004      	add	sp, #16
 8003510:	bd80      	pop	{r7, pc}
 8003512:	46c0      	nop			@ (mov r8, r8)
 8003514:	fffffefd 	.word	0xfffffefd
 8003518:	fffe0219 	.word	0xfffe0219
 800351c:	833fffe7 	.word	0x833fffe7

08003520 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800352a:	230f      	movs	r3, #15
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	2200      	movs	r2, #0
 8003530:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	055b      	lsls	r3, r3, #21
 800353e:	429a      	cmp	r2, r3
 8003540:	d011      	beq.n	8003566 <HAL_ADC_ConfigChannel+0x46>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003546:	2b01      	cmp	r3, #1
 8003548:	d00d      	beq.n	8003566 <HAL_ADC_ConfigChannel+0x46>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354e:	2b02      	cmp	r3, #2
 8003550:	d009      	beq.n	8003566 <HAL_ADC_ConfigChannel+0x46>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003556:	2b03      	cmp	r3, #3
 8003558:	d005      	beq.n	8003566 <HAL_ADC_ConfigChannel+0x46>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355e:	2b04      	cmp	r3, #4
 8003560:	d001      	beq.n	8003566 <HAL_ADC_ConfigChannel+0x46>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2234      	movs	r2, #52	@ 0x34
 800356a:	5c9b      	ldrb	r3, [r3, r2]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x54>
 8003570:	2302      	movs	r3, #2
 8003572:	e0d0      	b.n	8003716 <HAL_ADC_ConfigChannel+0x1f6>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2234      	movs	r2, #52	@ 0x34
 8003578:	2101      	movs	r1, #1
 800357a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2204      	movs	r2, #4
 8003584:	4013      	ands	r3, r2
 8003586:	d000      	beq.n	800358a <HAL_ADC_ConfigChannel+0x6a>
 8003588:	e0b4      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	4a64      	ldr	r2, [pc, #400]	@ (8003720 <HAL_ADC_ConfigChannel+0x200>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d100      	bne.n	8003596 <HAL_ADC_ConfigChannel+0x76>
 8003594:	e082      	b.n	800369c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2201      	movs	r2, #1
 80035a2:	409a      	lsls	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035b0:	2380      	movs	r3, #128	@ 0x80
 80035b2:	055b      	lsls	r3, r3, #21
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d037      	beq.n	8003628 <HAL_ADC_ConfigChannel+0x108>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d033      	beq.n	8003628 <HAL_ADC_ConfigChannel+0x108>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d02f      	beq.n	8003628 <HAL_ADC_ConfigChannel+0x108>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d02b      	beq.n	8003628 <HAL_ADC_ConfigChannel+0x108>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d027      	beq.n	8003628 <HAL_ADC_ConfigChannel+0x108>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035dc:	2b05      	cmp	r3, #5
 80035de:	d023      	beq.n	8003628 <HAL_ADC_ConfigChannel+0x108>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e4:	2b06      	cmp	r3, #6
 80035e6:	d01f      	beq.n	8003628 <HAL_ADC_ConfigChannel+0x108>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ec:	2b07      	cmp	r3, #7
 80035ee:	d01b      	beq.n	8003628 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	2107      	movs	r1, #7
 80035fc:	400b      	ands	r3, r1
 80035fe:	429a      	cmp	r2, r3
 8003600:	d012      	beq.n	8003628 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695a      	ldr	r2, [r3, #20]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2107      	movs	r1, #7
 800360e:	438a      	bics	r2, r1
 8003610:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6959      	ldr	r1, [r3, #20]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2207      	movs	r2, #7
 800361e:	401a      	ands	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b10      	cmp	r3, #16
 800362e:	d007      	beq.n	8003640 <HAL_ADC_ConfigChannel+0x120>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b11      	cmp	r3, #17
 8003636:	d003      	beq.n	8003640 <HAL_ADC_ConfigChannel+0x120>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b12      	cmp	r3, #18
 800363e:	d163      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003640:	4b38      	ldr	r3, [pc, #224]	@ (8003724 <HAL_ADC_ConfigChannel+0x204>)
 8003642:	6819      	ldr	r1, [r3, #0]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b10      	cmp	r3, #16
 800364a:	d009      	beq.n	8003660 <HAL_ADC_ConfigChannel+0x140>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b11      	cmp	r3, #17
 8003652:	d102      	bne.n	800365a <HAL_ADC_ConfigChannel+0x13a>
 8003654:	2380      	movs	r3, #128	@ 0x80
 8003656:	03db      	lsls	r3, r3, #15
 8003658:	e004      	b.n	8003664 <HAL_ADC_ConfigChannel+0x144>
 800365a:	2380      	movs	r3, #128	@ 0x80
 800365c:	045b      	lsls	r3, r3, #17
 800365e:	e001      	b.n	8003664 <HAL_ADC_ConfigChannel+0x144>
 8003660:	2380      	movs	r3, #128	@ 0x80
 8003662:	041b      	lsls	r3, r3, #16
 8003664:	4a2f      	ldr	r2, [pc, #188]	@ (8003724 <HAL_ADC_ConfigChannel+0x204>)
 8003666:	430b      	orrs	r3, r1
 8003668:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b10      	cmp	r3, #16
 8003670:	d14a      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003672:	4b2d      	ldr	r3, [pc, #180]	@ (8003728 <HAL_ADC_ConfigChannel+0x208>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	492d      	ldr	r1, [pc, #180]	@ (800372c <HAL_ADC_ConfigChannel+0x20c>)
 8003678:	0018      	movs	r0, r3
 800367a:	f7fc fd61 	bl	8000140 <__udivsi3>
 800367e:	0003      	movs	r3, r0
 8003680:	001a      	movs	r2, r3
 8003682:	0013      	movs	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	189b      	adds	r3, r3, r2
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800368c:	e002      	b.n	8003694 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	3b01      	subs	r3, #1
 8003692:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f9      	bne.n	800368e <HAL_ADC_ConfigChannel+0x16e>
 800369a:	e035      	b.n	8003708 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2101      	movs	r1, #1
 80036a8:	4099      	lsls	r1, r3
 80036aa:	000b      	movs	r3, r1
 80036ac:	43d9      	mvns	r1, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	400a      	ands	r2, r1
 80036b4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b10      	cmp	r3, #16
 80036bc:	d007      	beq.n	80036ce <HAL_ADC_ConfigChannel+0x1ae>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b11      	cmp	r3, #17
 80036c4:	d003      	beq.n	80036ce <HAL_ADC_ConfigChannel+0x1ae>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b12      	cmp	r3, #18
 80036cc:	d11c      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80036ce:	4b15      	ldr	r3, [pc, #84]	@ (8003724 <HAL_ADC_ConfigChannel+0x204>)
 80036d0:	6819      	ldr	r1, [r3, #0]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b10      	cmp	r3, #16
 80036d8:	d007      	beq.n	80036ea <HAL_ADC_ConfigChannel+0x1ca>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b11      	cmp	r3, #17
 80036e0:	d101      	bne.n	80036e6 <HAL_ADC_ConfigChannel+0x1c6>
 80036e2:	4b13      	ldr	r3, [pc, #76]	@ (8003730 <HAL_ADC_ConfigChannel+0x210>)
 80036e4:	e002      	b.n	80036ec <HAL_ADC_ConfigChannel+0x1cc>
 80036e6:	4b13      	ldr	r3, [pc, #76]	@ (8003734 <HAL_ADC_ConfigChannel+0x214>)
 80036e8:	e000      	b.n	80036ec <HAL_ADC_ConfigChannel+0x1cc>
 80036ea:	4b13      	ldr	r3, [pc, #76]	@ (8003738 <HAL_ADC_ConfigChannel+0x218>)
 80036ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003724 <HAL_ADC_ConfigChannel+0x204>)
 80036ee:	400b      	ands	r3, r1
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	e009      	b.n	8003708 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f8:	2220      	movs	r2, #32
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003700:	230f      	movs	r3, #15
 8003702:	18fb      	adds	r3, r7, r3
 8003704:	2201      	movs	r2, #1
 8003706:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2234      	movs	r2, #52	@ 0x34
 800370c:	2100      	movs	r1, #0
 800370e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003710:	230f      	movs	r3, #15
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	781b      	ldrb	r3, [r3, #0]
}
 8003716:	0018      	movs	r0, r3
 8003718:	46bd      	mov	sp, r7
 800371a:	b004      	add	sp, #16
 800371c:	bd80      	pop	{r7, pc}
 800371e:	46c0      	nop			@ (mov r8, r8)
 8003720:	00001001 	.word	0x00001001
 8003724:	40012708 	.word	0x40012708
 8003728:	20000018 	.word	0x20000018
 800372c:	000f4240 	.word	0x000f4240
 8003730:	ffbfffff 	.word	0xffbfffff
 8003734:	feffffff 	.word	0xfeffffff
 8003738:	ff7fffff 	.word	0xff7fffff

0800373c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	0002      	movs	r2, r0
 8003744:	1dfb      	adds	r3, r7, #7
 8003746:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003748:	1dfb      	adds	r3, r7, #7
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b7f      	cmp	r3, #127	@ 0x7f
 800374e:	d809      	bhi.n	8003764 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003750:	1dfb      	adds	r3, r7, #7
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	001a      	movs	r2, r3
 8003756:	231f      	movs	r3, #31
 8003758:	401a      	ands	r2, r3
 800375a:	4b04      	ldr	r3, [pc, #16]	@ (800376c <__NVIC_EnableIRQ+0x30>)
 800375c:	2101      	movs	r1, #1
 800375e:	4091      	lsls	r1, r2
 8003760:	000a      	movs	r2, r1
 8003762:	601a      	str	r2, [r3, #0]
  }
}
 8003764:	46c0      	nop			@ (mov r8, r8)
 8003766:	46bd      	mov	sp, r7
 8003768:	b002      	add	sp, #8
 800376a:	bd80      	pop	{r7, pc}
 800376c:	e000e100 	.word	0xe000e100

08003770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003770:	b590      	push	{r4, r7, lr}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	0002      	movs	r2, r0
 8003778:	6039      	str	r1, [r7, #0]
 800377a:	1dfb      	adds	r3, r7, #7
 800377c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800377e:	1dfb      	adds	r3, r7, #7
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b7f      	cmp	r3, #127	@ 0x7f
 8003784:	d828      	bhi.n	80037d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003786:	4a2f      	ldr	r2, [pc, #188]	@ (8003844 <__NVIC_SetPriority+0xd4>)
 8003788:	1dfb      	adds	r3, r7, #7
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	b25b      	sxtb	r3, r3
 800378e:	089b      	lsrs	r3, r3, #2
 8003790:	33c0      	adds	r3, #192	@ 0xc0
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	589b      	ldr	r3, [r3, r2]
 8003796:	1dfa      	adds	r2, r7, #7
 8003798:	7812      	ldrb	r2, [r2, #0]
 800379a:	0011      	movs	r1, r2
 800379c:	2203      	movs	r2, #3
 800379e:	400a      	ands	r2, r1
 80037a0:	00d2      	lsls	r2, r2, #3
 80037a2:	21ff      	movs	r1, #255	@ 0xff
 80037a4:	4091      	lsls	r1, r2
 80037a6:	000a      	movs	r2, r1
 80037a8:	43d2      	mvns	r2, r2
 80037aa:	401a      	ands	r2, r3
 80037ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	019b      	lsls	r3, r3, #6
 80037b2:	22ff      	movs	r2, #255	@ 0xff
 80037b4:	401a      	ands	r2, r3
 80037b6:	1dfb      	adds	r3, r7, #7
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	0018      	movs	r0, r3
 80037bc:	2303      	movs	r3, #3
 80037be:	4003      	ands	r3, r0
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037c4:	481f      	ldr	r0, [pc, #124]	@ (8003844 <__NVIC_SetPriority+0xd4>)
 80037c6:	1dfb      	adds	r3, r7, #7
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	b25b      	sxtb	r3, r3
 80037cc:	089b      	lsrs	r3, r3, #2
 80037ce:	430a      	orrs	r2, r1
 80037d0:	33c0      	adds	r3, #192	@ 0xc0
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80037d6:	e031      	b.n	800383c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003848 <__NVIC_SetPriority+0xd8>)
 80037da:	1dfb      	adds	r3, r7, #7
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	0019      	movs	r1, r3
 80037e0:	230f      	movs	r3, #15
 80037e2:	400b      	ands	r3, r1
 80037e4:	3b08      	subs	r3, #8
 80037e6:	089b      	lsrs	r3, r3, #2
 80037e8:	3306      	adds	r3, #6
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	18d3      	adds	r3, r2, r3
 80037ee:	3304      	adds	r3, #4
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	1dfa      	adds	r2, r7, #7
 80037f4:	7812      	ldrb	r2, [r2, #0]
 80037f6:	0011      	movs	r1, r2
 80037f8:	2203      	movs	r2, #3
 80037fa:	400a      	ands	r2, r1
 80037fc:	00d2      	lsls	r2, r2, #3
 80037fe:	21ff      	movs	r1, #255	@ 0xff
 8003800:	4091      	lsls	r1, r2
 8003802:	000a      	movs	r2, r1
 8003804:	43d2      	mvns	r2, r2
 8003806:	401a      	ands	r2, r3
 8003808:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	019b      	lsls	r3, r3, #6
 800380e:	22ff      	movs	r2, #255	@ 0xff
 8003810:	401a      	ands	r2, r3
 8003812:	1dfb      	adds	r3, r7, #7
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	0018      	movs	r0, r3
 8003818:	2303      	movs	r3, #3
 800381a:	4003      	ands	r3, r0
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003820:	4809      	ldr	r0, [pc, #36]	@ (8003848 <__NVIC_SetPriority+0xd8>)
 8003822:	1dfb      	adds	r3, r7, #7
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	001c      	movs	r4, r3
 8003828:	230f      	movs	r3, #15
 800382a:	4023      	ands	r3, r4
 800382c:	3b08      	subs	r3, #8
 800382e:	089b      	lsrs	r3, r3, #2
 8003830:	430a      	orrs	r2, r1
 8003832:	3306      	adds	r3, #6
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	18c3      	adds	r3, r0, r3
 8003838:	3304      	adds	r3, #4
 800383a:	601a      	str	r2, [r3, #0]
}
 800383c:	46c0      	nop			@ (mov r8, r8)
 800383e:	46bd      	mov	sp, r7
 8003840:	b003      	add	sp, #12
 8003842:	bd90      	pop	{r4, r7, pc}
 8003844:	e000e100 	.word	0xe000e100
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	1e5a      	subs	r2, r3, #1
 8003858:	2380      	movs	r3, #128	@ 0x80
 800385a:	045b      	lsls	r3, r3, #17
 800385c:	429a      	cmp	r2, r3
 800385e:	d301      	bcc.n	8003864 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003860:	2301      	movs	r3, #1
 8003862:	e010      	b.n	8003886 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003864:	4b0a      	ldr	r3, [pc, #40]	@ (8003890 <SysTick_Config+0x44>)
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	3a01      	subs	r2, #1
 800386a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800386c:	2301      	movs	r3, #1
 800386e:	425b      	negs	r3, r3
 8003870:	2103      	movs	r1, #3
 8003872:	0018      	movs	r0, r3
 8003874:	f7ff ff7c 	bl	8003770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003878:	4b05      	ldr	r3, [pc, #20]	@ (8003890 <SysTick_Config+0x44>)
 800387a:	2200      	movs	r2, #0
 800387c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800387e:	4b04      	ldr	r3, [pc, #16]	@ (8003890 <SysTick_Config+0x44>)
 8003880:	2207      	movs	r2, #7
 8003882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003884:	2300      	movs	r3, #0
}
 8003886:	0018      	movs	r0, r3
 8003888:	46bd      	mov	sp, r7
 800388a:	b002      	add	sp, #8
 800388c:	bd80      	pop	{r7, pc}
 800388e:	46c0      	nop			@ (mov r8, r8)
 8003890:	e000e010 	.word	0xe000e010

08003894 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	60b9      	str	r1, [r7, #8]
 800389c:	607a      	str	r2, [r7, #4]
 800389e:	210f      	movs	r1, #15
 80038a0:	187b      	adds	r3, r7, r1
 80038a2:	1c02      	adds	r2, r0, #0
 80038a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	187b      	adds	r3, r7, r1
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	b25b      	sxtb	r3, r3
 80038ae:	0011      	movs	r1, r2
 80038b0:	0018      	movs	r0, r3
 80038b2:	f7ff ff5d 	bl	8003770 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80038b6:	46c0      	nop			@ (mov r8, r8)
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b004      	add	sp, #16
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	0002      	movs	r2, r0
 80038c6:	1dfb      	adds	r3, r7, #7
 80038c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038ca:	1dfb      	adds	r3, r7, #7
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	b25b      	sxtb	r3, r3
 80038d0:	0018      	movs	r0, r3
 80038d2:	f7ff ff33 	bl	800373c <__NVIC_EnableIRQ>
}
 80038d6:	46c0      	nop			@ (mov r8, r8)
 80038d8:	46bd      	mov	sp, r7
 80038da:	b002      	add	sp, #8
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	0018      	movs	r0, r3
 80038ea:	f7ff ffaf 	bl	800384c <SysTick_Config>
 80038ee:	0003      	movs	r3, r0
}
 80038f0:	0018      	movs	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b002      	add	sp, #8
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e036      	b.n	800397c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2221      	movs	r2, #33	@ 0x21
 8003912:	2102      	movs	r1, #2
 8003914:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4a18      	ldr	r2, [pc, #96]	@ (8003984 <HAL_DMA_Init+0x8c>)
 8003922:	4013      	ands	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800392e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800393a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003946:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	0018      	movs	r0, r3
 8003960:	f000 f9c4 	bl	8003cec <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2221      	movs	r2, #33	@ 0x21
 800396e:	2101      	movs	r1, #1
 8003970:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	2100      	movs	r1, #0
 8003978:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	0018      	movs	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	b004      	add	sp, #16
 8003982:	bd80      	pop	{r7, pc}
 8003984:	ffffc00f 	.word	0xffffc00f

08003988 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003996:	2317      	movs	r3, #23
 8003998:	18fb      	adds	r3, r7, r3
 800399a:	2200      	movs	r2, #0
 800399c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2220      	movs	r2, #32
 80039a2:	5c9b      	ldrb	r3, [r3, r2]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_DMA_Start_IT+0x24>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e04f      	b.n	8003a4c <HAL_DMA_Start_IT+0xc4>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	2101      	movs	r1, #1
 80039b2:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2221      	movs	r2, #33	@ 0x21
 80039b8:	5c9b      	ldrb	r3, [r3, r2]
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d13a      	bne.n	8003a36 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2221      	movs	r2, #33	@ 0x21
 80039c4:	2102      	movs	r1, #2
 80039c6:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2101      	movs	r1, #1
 80039da:	438a      	bics	r2, r1
 80039dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f954 	bl	8003c92 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d008      	beq.n	8003a04 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	210e      	movs	r1, #14
 80039fe:	430a      	orrs	r2, r1
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	e00f      	b.n	8003a24 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	210a      	movs	r1, #10
 8003a10:	430a      	orrs	r2, r1
 8003a12:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2104      	movs	r1, #4
 8003a20:	438a      	bics	r2, r1
 8003a22:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2101      	movs	r1, #1
 8003a30:	430a      	orrs	r2, r1
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	e007      	b.n	8003a46 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a3e:	2317      	movs	r3, #23
 8003a40:	18fb      	adds	r3, r7, r3
 8003a42:	2202      	movs	r2, #2
 8003a44:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003a46:	2317      	movs	r3, #23
 8003a48:	18fb      	adds	r3, r7, r3
 8003a4a:	781b      	ldrb	r3, [r3, #0]
}
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b006      	add	sp, #24
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2221      	movs	r2, #33	@ 0x21
 8003a60:	5c9b      	ldrb	r3, [r3, r2]
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d008      	beq.n	8003a7a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2220      	movs	r2, #32
 8003a72:	2100      	movs	r1, #0
 8003a74:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e020      	b.n	8003abc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	210e      	movs	r1, #14
 8003a86:	438a      	bics	r2, r1
 8003a88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2101      	movs	r1, #1
 8003a96:	438a      	bics	r2, r1
 8003a98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	4091      	lsls	r1, r2
 8003aa6:	000a      	movs	r2, r1
 8003aa8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2221      	movs	r2, #33	@ 0x21
 8003aae:	2101      	movs	r1, #1
 8003ab0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	0018      	movs	r0, r3
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b002      	add	sp, #8
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003acc:	210f      	movs	r1, #15
 8003ace:	187b      	adds	r3, r7, r1
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2221      	movs	r2, #33	@ 0x21
 8003ad8:	5c9b      	ldrb	r3, [r3, r2]
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d006      	beq.n	8003aee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2204      	movs	r2, #4
 8003ae4:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8003ae6:	187b      	adds	r3, r7, r1
 8003ae8:	2201      	movs	r2, #1
 8003aea:	701a      	strb	r2, [r3, #0]
 8003aec:	e028      	b.n	8003b40 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	210e      	movs	r1, #14
 8003afa:	438a      	bics	r2, r1
 8003afc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2101      	movs	r1, #1
 8003b0a:	438a      	bics	r2, r1
 8003b0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b16:	2101      	movs	r1, #1
 8003b18:	4091      	lsls	r1, r2
 8003b1a:	000a      	movs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2221      	movs	r2, #33	@ 0x21
 8003b22:	2101      	movs	r1, #1
 8003b24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d004      	beq.n	8003b40 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	0010      	movs	r0, r2
 8003b3e:	4798      	blx	r3
    }
  }
  return status;
 8003b40:	230f      	movs	r3, #15
 8003b42:	18fb      	adds	r3, r7, r3
 8003b44:	781b      	ldrb	r3, [r3, #0]
}
 8003b46:	0018      	movs	r0, r3
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b004      	add	sp, #16
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6a:	2204      	movs	r2, #4
 8003b6c:	409a      	lsls	r2, r3
 8003b6e:	0013      	movs	r3, r2
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4013      	ands	r3, r2
 8003b74:	d024      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x72>
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2204      	movs	r2, #4
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d020      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2220      	movs	r2, #32
 8003b86:	4013      	ands	r3, r2
 8003b88:	d107      	bne.n	8003b9a <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2104      	movs	r1, #4
 8003b96:	438a      	bics	r2, r1
 8003b98:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba2:	2104      	movs	r1, #4
 8003ba4:	4091      	lsls	r1, r2
 8003ba6:	000a      	movs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d100      	bne.n	8003bb4 <HAL_DMA_IRQHandler+0x66>
 8003bb2:	e06a      	b.n	8003c8a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	0010      	movs	r0, r2
 8003bbc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003bbe:	e064      	b.n	8003c8a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	0013      	movs	r3, r2
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	d02b      	beq.n	8003c28 <HAL_DMA_IRQHandler+0xda>
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d027      	beq.n	8003c28 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2220      	movs	r2, #32
 8003be0:	4013      	ands	r3, r2
 8003be2:	d10b      	bne.n	8003bfc <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	210a      	movs	r1, #10
 8003bf0:	438a      	bics	r2, r1
 8003bf2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2221      	movs	r2, #33	@ 0x21
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c04:	2102      	movs	r1, #2
 8003c06:	4091      	lsls	r1, r2
 8003c08:	000a      	movs	r2, r1
 8003c0a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	2100      	movs	r1, #0
 8003c12:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d036      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	0010      	movs	r0, r2
 8003c24:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003c26:	e030      	b.n	8003c8a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2c:	2208      	movs	r2, #8
 8003c2e:	409a      	lsls	r2, r3
 8003c30:	0013      	movs	r3, r2
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4013      	ands	r3, r2
 8003c36:	d028      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x13c>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2208      	movs	r2, #8
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d024      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	210e      	movs	r1, #14
 8003c4c:	438a      	bics	r2, r1
 8003c4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c58:	2101      	movs	r1, #1
 8003c5a:	4091      	lsls	r1, r2
 8003c5c:	000a      	movs	r2, r1
 8003c5e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2221      	movs	r2, #33	@ 0x21
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	2100      	movs	r1, #0
 8003c74:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d005      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	0010      	movs	r0, r2
 8003c86:	4798      	blx	r3
    }
  }
}
 8003c88:	e7ff      	b.n	8003c8a <HAL_DMA_IRQHandler+0x13c>
 8003c8a:	46c0      	nop			@ (mov r8, r8)
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b004      	add	sp, #16
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b084      	sub	sp, #16
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	607a      	str	r2, [r7, #4]
 8003c9e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca8:	2101      	movs	r1, #1
 8003caa:	4091      	lsls	r1, r2
 8003cac:	000a      	movs	r2, r1
 8003cae:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	d108      	bne.n	8003cd2 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003cd0:	e007      	b.n	8003ce2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	60da      	str	r2, [r3, #12]
}
 8003ce2:	46c0      	nop			@ (mov r8, r8)
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	b004      	add	sp, #16
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a08      	ldr	r2, [pc, #32]	@ (8003d1c <DMA_CalcBaseAndBitshift+0x30>)
 8003cfa:	4694      	mov	ip, r2
 8003cfc:	4463      	add	r3, ip
 8003cfe:	2114      	movs	r1, #20
 8003d00:	0018      	movs	r0, r3
 8003d02:	f7fc fa1d 	bl	8000140 <__udivsi3>
 8003d06:	0003      	movs	r3, r0
 8003d08:	009a      	lsls	r2, r3, #2
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a03      	ldr	r2, [pc, #12]	@ (8003d20 <DMA_CalcBaseAndBitshift+0x34>)
 8003d12:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8003d14:	46c0      	nop			@ (mov r8, r8)
 8003d16:	46bd      	mov	sp, r7
 8003d18:	b002      	add	sp, #8
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	bffdfff8 	.word	0xbffdfff8
 8003d20:	40020000 	.word	0x40020000

08003d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d32:	e155      	b.n	8003fe0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2101      	movs	r1, #1
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4091      	lsls	r1, r2
 8003d3e:	000a      	movs	r2, r1
 8003d40:	4013      	ands	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d100      	bne.n	8003d4c <HAL_GPIO_Init+0x28>
 8003d4a:	e146      	b.n	8003fda <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2203      	movs	r2, #3
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d005      	beq.n	8003d64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2203      	movs	r2, #3
 8003d5e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d130      	bne.n	8003dc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	2203      	movs	r2, #3
 8003d70:	409a      	lsls	r2, r3
 8003d72:	0013      	movs	r3, r2
 8003d74:	43da      	mvns	r2, r3
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	409a      	lsls	r2, r3
 8003d86:	0013      	movs	r3, r2
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	0013      	movs	r3, r2
 8003da2:	43da      	mvns	r2, r3
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	4013      	ands	r3, r2
 8003da8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	091b      	lsrs	r3, r3, #4
 8003db0:	2201      	movs	r2, #1
 8003db2:	401a      	ands	r2, r3
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	409a      	lsls	r2, r3
 8003db8:	0013      	movs	r3, r2
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2203      	movs	r2, #3
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b03      	cmp	r3, #3
 8003dd0:	d017      	beq.n	8003e02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	2203      	movs	r2, #3
 8003dde:	409a      	lsls	r2, r3
 8003de0:	0013      	movs	r3, r2
 8003de2:	43da      	mvns	r2, r3
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	4013      	ands	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	409a      	lsls	r2, r3
 8003df4:	0013      	movs	r3, r2
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2203      	movs	r2, #3
 8003e08:	4013      	ands	r3, r2
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d123      	bne.n	8003e56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	08da      	lsrs	r2, r3, #3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3208      	adds	r2, #8
 8003e16:	0092      	lsls	r2, r2, #2
 8003e18:	58d3      	ldr	r3, [r2, r3]
 8003e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	2207      	movs	r2, #7
 8003e20:	4013      	ands	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	220f      	movs	r2, #15
 8003e26:	409a      	lsls	r2, r3
 8003e28:	0013      	movs	r3, r2
 8003e2a:	43da      	mvns	r2, r3
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	691a      	ldr	r2, [r3, #16]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2107      	movs	r1, #7
 8003e3a:	400b      	ands	r3, r1
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	409a      	lsls	r2, r3
 8003e40:	0013      	movs	r3, r2
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	08da      	lsrs	r2, r3, #3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3208      	adds	r2, #8
 8003e50:	0092      	lsls	r2, r2, #2
 8003e52:	6939      	ldr	r1, [r7, #16]
 8003e54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	2203      	movs	r2, #3
 8003e62:	409a      	lsls	r2, r3
 8003e64:	0013      	movs	r3, r2
 8003e66:	43da      	mvns	r2, r3
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2203      	movs	r2, #3
 8003e74:	401a      	ands	r2, r3
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	0013      	movs	r3, r2
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	23c0      	movs	r3, #192	@ 0xc0
 8003e90:	029b      	lsls	r3, r3, #10
 8003e92:	4013      	ands	r3, r2
 8003e94:	d100      	bne.n	8003e98 <HAL_GPIO_Init+0x174>
 8003e96:	e0a0      	b.n	8003fda <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e98:	4b57      	ldr	r3, [pc, #348]	@ (8003ff8 <HAL_GPIO_Init+0x2d4>)
 8003e9a:	699a      	ldr	r2, [r3, #24]
 8003e9c:	4b56      	ldr	r3, [pc, #344]	@ (8003ff8 <HAL_GPIO_Init+0x2d4>)
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	619a      	str	r2, [r3, #24]
 8003ea4:	4b54      	ldr	r3, [pc, #336]	@ (8003ff8 <HAL_GPIO_Init+0x2d4>)
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	4013      	ands	r3, r2
 8003eac:	60bb      	str	r3, [r7, #8]
 8003eae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003eb0:	4a52      	ldr	r2, [pc, #328]	@ (8003ffc <HAL_GPIO_Init+0x2d8>)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	089b      	lsrs	r3, r3, #2
 8003eb6:	3302      	adds	r3, #2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	589b      	ldr	r3, [r3, r2]
 8003ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	220f      	movs	r2, #15
 8003ec8:	409a      	lsls	r2, r3
 8003eca:	0013      	movs	r3, r2
 8003ecc:	43da      	mvns	r2, r3
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	2390      	movs	r3, #144	@ 0x90
 8003ed8:	05db      	lsls	r3, r3, #23
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d019      	beq.n	8003f12 <HAL_GPIO_Init+0x1ee>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a47      	ldr	r2, [pc, #284]	@ (8004000 <HAL_GPIO_Init+0x2dc>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d013      	beq.n	8003f0e <HAL_GPIO_Init+0x1ea>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a46      	ldr	r2, [pc, #280]	@ (8004004 <HAL_GPIO_Init+0x2e0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00d      	beq.n	8003f0a <HAL_GPIO_Init+0x1e6>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a45      	ldr	r2, [pc, #276]	@ (8004008 <HAL_GPIO_Init+0x2e4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d007      	beq.n	8003f06 <HAL_GPIO_Init+0x1e2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a44      	ldr	r2, [pc, #272]	@ (800400c <HAL_GPIO_Init+0x2e8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d101      	bne.n	8003f02 <HAL_GPIO_Init+0x1de>
 8003efe:	2304      	movs	r3, #4
 8003f00:	e008      	b.n	8003f14 <HAL_GPIO_Init+0x1f0>
 8003f02:	2305      	movs	r3, #5
 8003f04:	e006      	b.n	8003f14 <HAL_GPIO_Init+0x1f0>
 8003f06:	2303      	movs	r3, #3
 8003f08:	e004      	b.n	8003f14 <HAL_GPIO_Init+0x1f0>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e002      	b.n	8003f14 <HAL_GPIO_Init+0x1f0>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <HAL_GPIO_Init+0x1f0>
 8003f12:	2300      	movs	r3, #0
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	2103      	movs	r1, #3
 8003f18:	400a      	ands	r2, r1
 8003f1a:	0092      	lsls	r2, r2, #2
 8003f1c:	4093      	lsls	r3, r2
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f24:	4935      	ldr	r1, [pc, #212]	@ (8003ffc <HAL_GPIO_Init+0x2d8>)
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	089b      	lsrs	r3, r3, #2
 8003f2a:	3302      	adds	r3, #2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f32:	4b37      	ldr	r3, [pc, #220]	@ (8004010 <HAL_GPIO_Init+0x2ec>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	43da      	mvns	r2, r3
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	2380      	movs	r3, #128	@ 0x80
 8003f48:	035b      	lsls	r3, r3, #13
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d003      	beq.n	8003f56 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003f56:	4b2e      	ldr	r3, [pc, #184]	@ (8004010 <HAL_GPIO_Init+0x2ec>)
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003f5c:	4b2c      	ldr	r3, [pc, #176]	@ (8004010 <HAL_GPIO_Init+0x2ec>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	43da      	mvns	r2, r3
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	2380      	movs	r3, #128	@ 0x80
 8003f72:	039b      	lsls	r3, r3, #14
 8003f74:	4013      	ands	r3, r2
 8003f76:	d003      	beq.n	8003f80 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003f80:	4b23      	ldr	r3, [pc, #140]	@ (8004010 <HAL_GPIO_Init+0x2ec>)
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003f86:	4b22      	ldr	r3, [pc, #136]	@ (8004010 <HAL_GPIO_Init+0x2ec>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	43da      	mvns	r2, r3
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	4013      	ands	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	2380      	movs	r3, #128	@ 0x80
 8003f9c:	029b      	lsls	r3, r3, #10
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	d003      	beq.n	8003faa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003faa:	4b19      	ldr	r3, [pc, #100]	@ (8004010 <HAL_GPIO_Init+0x2ec>)
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003fb0:	4b17      	ldr	r3, [pc, #92]	@ (8004010 <HAL_GPIO_Init+0x2ec>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	43da      	mvns	r2, r3
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	2380      	movs	r3, #128	@ 0x80
 8003fc6:	025b      	lsls	r3, r3, #9
 8003fc8:	4013      	ands	r3, r2
 8003fca:	d003      	beq.n	8003fd4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8004010 <HAL_GPIO_Init+0x2ec>)
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	40da      	lsrs	r2, r3
 8003fe8:	1e13      	subs	r3, r2, #0
 8003fea:	d000      	beq.n	8003fee <HAL_GPIO_Init+0x2ca>
 8003fec:	e6a2      	b.n	8003d34 <HAL_GPIO_Init+0x10>
  } 
}
 8003fee:	46c0      	nop			@ (mov r8, r8)
 8003ff0:	46c0      	nop			@ (mov r8, r8)
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b006      	add	sp, #24
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	40010000 	.word	0x40010000
 8004000:	48000400 	.word	0x48000400
 8004004:	48000800 	.word	0x48000800
 8004008:	48000c00 	.word	0x48000c00
 800400c:	48001000 	.word	0x48001000
 8004010:	40010400 	.word	0x40010400

08004014 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	000a      	movs	r2, r1
 800401e:	1cbb      	adds	r3, r7, #2
 8004020:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	1cba      	adds	r2, r7, #2
 8004028:	8812      	ldrh	r2, [r2, #0]
 800402a:	4013      	ands	r3, r2
 800402c:	d004      	beq.n	8004038 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800402e:	230f      	movs	r3, #15
 8004030:	18fb      	adds	r3, r7, r3
 8004032:	2201      	movs	r2, #1
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	e003      	b.n	8004040 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004038:	230f      	movs	r3, #15
 800403a:	18fb      	adds	r3, r7, r3
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004040:	230f      	movs	r3, #15
 8004042:	18fb      	adds	r3, r7, r3
 8004044:	781b      	ldrb	r3, [r3, #0]
  }
 8004046:	0018      	movs	r0, r3
 8004048:	46bd      	mov	sp, r7
 800404a:	b004      	add	sp, #16
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b082      	sub	sp, #8
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	0008      	movs	r0, r1
 8004058:	0011      	movs	r1, r2
 800405a:	1cbb      	adds	r3, r7, #2
 800405c:	1c02      	adds	r2, r0, #0
 800405e:	801a      	strh	r2, [r3, #0]
 8004060:	1c7b      	adds	r3, r7, #1
 8004062:	1c0a      	adds	r2, r1, #0
 8004064:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004066:	1c7b      	adds	r3, r7, #1
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d004      	beq.n	8004078 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800406e:	1cbb      	adds	r3, r7, #2
 8004070:	881a      	ldrh	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004076:	e003      	b.n	8004080 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004078:	1cbb      	adds	r3, r7, #2
 800407a:	881a      	ldrh	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004080:	46c0      	nop			@ (mov r8, r8)
 8004082:	46bd      	mov	sp, r7
 8004084:	b002      	add	sp, #8
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	0002      	movs	r2, r0
 8004090:	1dbb      	adds	r3, r7, #6
 8004092:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004094:	4b09      	ldr	r3, [pc, #36]	@ (80040bc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	1dba      	adds	r2, r7, #6
 800409a:	8812      	ldrh	r2, [r2, #0]
 800409c:	4013      	ands	r3, r2
 800409e:	d008      	beq.n	80040b2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040a0:	4b06      	ldr	r3, [pc, #24]	@ (80040bc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80040a2:	1dba      	adds	r2, r7, #6
 80040a4:	8812      	ldrh	r2, [r2, #0]
 80040a6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040a8:	1dbb      	adds	r3, r7, #6
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	0018      	movs	r0, r3
 80040ae:	f008 ff2f 	bl	800cf10 <HAL_GPIO_EXTI_Callback>
  }
}
 80040b2:	46c0      	nop			@ (mov r8, r8)
 80040b4:	46bd      	mov	sp, r7
 80040b6:	b002      	add	sp, #8
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	46c0      	nop			@ (mov r8, r8)
 80040bc:	40010400 	.word	0x40010400

080040c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040c0:	b590      	push	{r4, r7, lr}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e0e4      	b.n	800429c <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a73      	ldr	r2, [pc, #460]	@ (80042a4 <HAL_PCD_Init+0x1e4>)
 80040d6:	5c9b      	ldrb	r3, [r3, r2]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d108      	bne.n	80040f0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	23a4      	movs	r3, #164	@ 0xa4
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	2100      	movs	r1, #0
 80040e6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	0018      	movs	r0, r3
 80040ec:	f008 fbb4 	bl	800c858 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a6c      	ldr	r2, [pc, #432]	@ (80042a4 <HAL_PCD_Init+0x1e4>)
 80040f4:	2103      	movs	r1, #3
 80040f6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	0018      	movs	r0, r3
 80040fe:	f004 fbdd 	bl	80088bc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004102:	230f      	movs	r3, #15
 8004104:	18fb      	adds	r3, r7, r3
 8004106:	2200      	movs	r2, #0
 8004108:	701a      	strb	r2, [r3, #0]
 800410a:	e047      	b.n	800419c <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800410c:	200f      	movs	r0, #15
 800410e:	183b      	adds	r3, r7, r0
 8004110:	781a      	ldrb	r2, [r3, #0]
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	0013      	movs	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	189b      	adds	r3, r3, r2
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	18cb      	adds	r3, r1, r3
 800411e:	3311      	adds	r3, #17
 8004120:	2201      	movs	r2, #1
 8004122:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004124:	183b      	adds	r3, r7, r0
 8004126:	781a      	ldrb	r2, [r3, #0]
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	0013      	movs	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	189b      	adds	r3, r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	18cb      	adds	r3, r1, r3
 8004134:	3310      	adds	r3, #16
 8004136:	183a      	adds	r2, r7, r0
 8004138:	7812      	ldrb	r2, [r2, #0]
 800413a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800413c:	183b      	adds	r3, r7, r0
 800413e:	781a      	ldrb	r2, [r3, #0]
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	0013      	movs	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	189b      	adds	r3, r3, r2
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	18cb      	adds	r3, r1, r3
 800414c:	3313      	adds	r3, #19
 800414e:	2200      	movs	r2, #0
 8004150:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004152:	183b      	adds	r3, r7, r0
 8004154:	781a      	ldrb	r2, [r3, #0]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	0013      	movs	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	189b      	adds	r3, r3, r2
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	18cb      	adds	r3, r1, r3
 8004162:	3320      	adds	r3, #32
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004168:	183b      	adds	r3, r7, r0
 800416a:	781a      	ldrb	r2, [r3, #0]
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	0013      	movs	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	189b      	adds	r3, r3, r2
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	18cb      	adds	r3, r1, r3
 8004178:	3324      	adds	r3, #36	@ 0x24
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800417e:	183b      	adds	r3, r7, r0
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	0013      	movs	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	189b      	adds	r3, r3, r2
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	2200      	movs	r2, #0
 8004190:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004192:	183b      	adds	r3, r7, r0
 8004194:	781a      	ldrb	r2, [r3, #0]
 8004196:	183b      	adds	r3, r7, r0
 8004198:	3201      	adds	r2, #1
 800419a:	701a      	strb	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	791b      	ldrb	r3, [r3, #4]
 80041a0:	210f      	movs	r1, #15
 80041a2:	187a      	adds	r2, r7, r1
 80041a4:	7812      	ldrb	r2, [r2, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d3b0      	bcc.n	800410c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041aa:	187b      	adds	r3, r7, r1
 80041ac:	2200      	movs	r2, #0
 80041ae:	701a      	strb	r2, [r3, #0]
 80041b0:	e056      	b.n	8004260 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041b2:	240f      	movs	r4, #15
 80041b4:	193b      	adds	r3, r7, r4
 80041b6:	781a      	ldrb	r2, [r3, #0]
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	2352      	movs	r3, #82	@ 0x52
 80041bc:	33ff      	adds	r3, #255	@ 0xff
 80041be:	0019      	movs	r1, r3
 80041c0:	0013      	movs	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	189b      	adds	r3, r3, r2
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	18c3      	adds	r3, r0, r3
 80041ca:	185b      	adds	r3, r3, r1
 80041cc:	2200      	movs	r2, #0
 80041ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041d0:	193b      	adds	r3, r7, r4
 80041d2:	781a      	ldrb	r2, [r3, #0]
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	23a8      	movs	r3, #168	@ 0xa8
 80041d8:	0059      	lsls	r1, r3, #1
 80041da:	0013      	movs	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	189b      	adds	r3, r3, r2
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	18c3      	adds	r3, r0, r3
 80041e4:	185b      	adds	r3, r3, r1
 80041e6:	193a      	adds	r2, r7, r4
 80041e8:	7812      	ldrb	r2, [r2, #0]
 80041ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041ec:	193b      	adds	r3, r7, r4
 80041ee:	781a      	ldrb	r2, [r3, #0]
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	2354      	movs	r3, #84	@ 0x54
 80041f4:	33ff      	adds	r3, #255	@ 0xff
 80041f6:	0019      	movs	r1, r3
 80041f8:	0013      	movs	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	189b      	adds	r3, r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	18c3      	adds	r3, r0, r3
 8004202:	185b      	adds	r3, r3, r1
 8004204:	2200      	movs	r2, #0
 8004206:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004208:	193b      	adds	r3, r7, r4
 800420a:	781a      	ldrb	r2, [r3, #0]
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	23b0      	movs	r3, #176	@ 0xb0
 8004210:	0059      	lsls	r1, r3, #1
 8004212:	0013      	movs	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	189b      	adds	r3, r3, r2
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	18c3      	adds	r3, r0, r3
 800421c:	185b      	adds	r3, r3, r1
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004222:	193b      	adds	r3, r7, r4
 8004224:	781a      	ldrb	r2, [r3, #0]
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	23b2      	movs	r3, #178	@ 0xb2
 800422a:	0059      	lsls	r1, r3, #1
 800422c:	0013      	movs	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	189b      	adds	r3, r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	18c3      	adds	r3, r0, r3
 8004236:	185b      	adds	r3, r3, r1
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800423c:	193b      	adds	r3, r7, r4
 800423e:	781a      	ldrb	r2, [r3, #0]
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	23b4      	movs	r3, #180	@ 0xb4
 8004244:	0059      	lsls	r1, r3, #1
 8004246:	0013      	movs	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	189b      	adds	r3, r3, r2
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	18c3      	adds	r3, r0, r3
 8004250:	185b      	adds	r3, r3, r1
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004256:	193b      	adds	r3, r7, r4
 8004258:	781a      	ldrb	r2, [r3, #0]
 800425a:	193b      	adds	r3, r7, r4
 800425c:	3201      	adds	r2, #1
 800425e:	701a      	strb	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	791b      	ldrb	r3, [r3, #4]
 8004264:	220f      	movs	r2, #15
 8004266:	18ba      	adds	r2, r7, r2
 8004268:	7812      	ldrb	r2, [r2, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d3a1      	bcc.n	80041b2 <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6859      	ldr	r1, [r3, #4]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	f004 fb3a 	bl	80088f0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a07      	ldr	r2, [pc, #28]	@ (80042a4 <HAL_PCD_Init+0x1e4>)
 8004286:	2101      	movs	r1, #1
 8004288:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	7a9b      	ldrb	r3, [r3, #10]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d103      	bne.n	800429a <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	0018      	movs	r0, r3
 8004296:	f001 fd1f 	bl	8005cd8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	0018      	movs	r0, r3
 800429e:	46bd      	mov	sp, r7
 80042a0:	b005      	add	sp, #20
 80042a2:	bd90      	pop	{r4, r7, pc}
 80042a4:	00000291 	.word	0x00000291

080042a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	23a4      	movs	r3, #164	@ 0xa4
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	5cd3      	ldrb	r3, [r2, r3]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_PCD_Start+0x18>
 80042bc:	2302      	movs	r3, #2
 80042be:	e014      	b.n	80042ea <HAL_PCD_Start+0x42>
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	23a4      	movs	r3, #164	@ 0xa4
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	2101      	movs	r1, #1
 80042c8:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	0018      	movs	r0, r3
 80042d0:	f004 fade 	bl	8008890 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	0018      	movs	r0, r3
 80042da:	f006 fad3 	bl	800a884 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	23a4      	movs	r3, #164	@ 0xa4
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	2100      	movs	r1, #0
 80042e6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	0018      	movs	r0, r3
 80042ec:	46bd      	mov	sp, r7
 80042ee:	b002      	add	sp, #8
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	0018      	movs	r0, r3
 8004302:	f006 fad5 	bl	800a8b0 <USB_ReadInterrupts>
 8004306:	0003      	movs	r3, r0
 8004308:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	2380      	movs	r3, #128	@ 0x80
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	4013      	ands	r3, r2
 8004312:	d004      	beq.n	800431e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	0018      	movs	r0, r3
 8004318:	f000 fb60 	bl	80049dc <PCD_EP_ISR_Handler>

    return;
 800431c:	e11d      	b.n	800455a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	2380      	movs	r3, #128	@ 0x80
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	4013      	ands	r3, r2
 8004326:	d015      	beq.n	8004354 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2244      	movs	r2, #68	@ 0x44
 800432e:	5a9b      	ldrh	r3, [r3, r2]
 8004330:	b29a      	uxth	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	498a      	ldr	r1, [pc, #552]	@ (8004560 <HAL_PCD_IRQHandler+0x26c>)
 8004338:	400a      	ands	r2, r1
 800433a:	b291      	uxth	r1, r2
 800433c:	2244      	movs	r2, #68	@ 0x44
 800433e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	0018      	movs	r0, r3
 8004344:	f008 fb13 	bl	800c96e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2100      	movs	r1, #0
 800434c:	0018      	movs	r0, r3
 800434e:	f000 f915 	bl	800457c <HAL_PCD_SetAddress>

    return;
 8004352:	e102      	b.n	800455a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	2380      	movs	r3, #128	@ 0x80
 8004358:	01db      	lsls	r3, r3, #7
 800435a:	4013      	ands	r3, r2
 800435c:	d00c      	beq.n	8004378 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2244      	movs	r2, #68	@ 0x44
 8004364:	5a9b      	ldrh	r3, [r3, r2]
 8004366:	b29a      	uxth	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	497d      	ldr	r1, [pc, #500]	@ (8004564 <HAL_PCD_IRQHandler+0x270>)
 800436e:	400a      	ands	r2, r1
 8004370:	b291      	uxth	r1, r2
 8004372:	2244      	movs	r2, #68	@ 0x44
 8004374:	5299      	strh	r1, [r3, r2]

    return;
 8004376:	e0f0      	b.n	800455a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	2380      	movs	r3, #128	@ 0x80
 800437c:	019b      	lsls	r3, r3, #6
 800437e:	4013      	ands	r3, r2
 8004380:	d00c      	beq.n	800439c <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2244      	movs	r2, #68	@ 0x44
 8004388:	5a9b      	ldrh	r3, [r3, r2]
 800438a:	b29a      	uxth	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4975      	ldr	r1, [pc, #468]	@ (8004568 <HAL_PCD_IRQHandler+0x274>)
 8004392:	400a      	ands	r2, r1
 8004394:	b291      	uxth	r1, r2
 8004396:	2244      	movs	r2, #68	@ 0x44
 8004398:	5299      	strh	r1, [r3, r2]

    return;
 800439a:	e0de      	b.n	800455a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	2380      	movs	r3, #128	@ 0x80
 80043a0:	015b      	lsls	r3, r3, #5
 80043a2:	4013      	ands	r3, r2
 80043a4:	d038      	beq.n	8004418 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2240      	movs	r2, #64	@ 0x40
 80043ac:	5a9b      	ldrh	r3, [r3, r2]
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2104      	movs	r1, #4
 80043b6:	438a      	bics	r2, r1
 80043b8:	b291      	uxth	r1, r2
 80043ba:	2240      	movs	r2, #64	@ 0x40
 80043bc:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2240      	movs	r2, #64	@ 0x40
 80043c4:	5a9b      	ldrh	r3, [r3, r2]
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2108      	movs	r1, #8
 80043ce:	438a      	bics	r2, r1
 80043d0:	b291      	uxth	r1, r2
 80043d2:	2240      	movs	r2, #64	@ 0x40
 80043d4:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	23b2      	movs	r3, #178	@ 0xb2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	5cd3      	ldrb	r3, [r2, r3]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d109      	bne.n	80043f6 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	23b2      	movs	r3, #178	@ 0xb2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	2100      	movs	r1, #0
 80043ea:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2100      	movs	r1, #0
 80043f0:	0018      	movs	r0, r3
 80043f2:	f001 fc9b 	bl	8005d2c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	0018      	movs	r0, r3
 80043fa:	f008 faf9 	bl	800c9f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2244      	movs	r2, #68	@ 0x44
 8004404:	5a9b      	ldrh	r3, [r3, r2]
 8004406:	b29a      	uxth	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4957      	ldr	r1, [pc, #348]	@ (800456c <HAL_PCD_IRQHandler+0x278>)
 800440e:	400a      	ands	r2, r1
 8004410:	b291      	uxth	r1, r2
 8004412:	2244      	movs	r2, #68	@ 0x44
 8004414:	5299      	strh	r1, [r3, r2]

    return;
 8004416:	e0a0      	b.n	800455a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	2380      	movs	r3, #128	@ 0x80
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	4013      	ands	r3, r2
 8004420:	d028      	beq.n	8004474 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2240      	movs	r2, #64	@ 0x40
 8004428:	5a9b      	ldrh	r3, [r3, r2]
 800442a:	b29a      	uxth	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2108      	movs	r1, #8
 8004432:	430a      	orrs	r2, r1
 8004434:	b291      	uxth	r1, r2
 8004436:	2240      	movs	r2, #64	@ 0x40
 8004438:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2244      	movs	r2, #68	@ 0x44
 8004440:	5a9b      	ldrh	r3, [r3, r2]
 8004442:	b29a      	uxth	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4949      	ldr	r1, [pc, #292]	@ (8004570 <HAL_PCD_IRQHandler+0x27c>)
 800444a:	400a      	ands	r2, r1
 800444c:	b291      	uxth	r1, r2
 800444e:	2244      	movs	r2, #68	@ 0x44
 8004450:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2240      	movs	r2, #64	@ 0x40
 8004458:	5a9b      	ldrh	r3, [r3, r2]
 800445a:	b29a      	uxth	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2104      	movs	r1, #4
 8004462:	430a      	orrs	r2, r1
 8004464:	b291      	uxth	r1, r2
 8004466:	2240      	movs	r2, #64	@ 0x40
 8004468:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	0018      	movs	r0, r3
 800446e:	f008 faa3 	bl	800c9b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004472:	e072      	b.n	800455a <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2280      	movs	r2, #128	@ 0x80
 8004478:	4013      	ands	r3, r2
 800447a:	d046      	beq.n	800450a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2244      	movs	r2, #68	@ 0x44
 8004482:	5a9b      	ldrh	r3, [r3, r2]
 8004484:	b29a      	uxth	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2180      	movs	r1, #128	@ 0x80
 800448c:	438a      	bics	r2, r1
 800448e:	b291      	uxth	r1, r2
 8004490:	2244      	movs	r2, #68	@ 0x44
 8004492:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	23b2      	movs	r3, #178	@ 0xb2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	5cd3      	ldrb	r3, [r2, r3]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d12f      	bne.n	8004500 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2240      	movs	r2, #64	@ 0x40
 80044a6:	5a9b      	ldrh	r3, [r3, r2]
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2104      	movs	r1, #4
 80044b0:	430a      	orrs	r2, r1
 80044b2:	b291      	uxth	r1, r2
 80044b4:	2240      	movs	r2, #64	@ 0x40
 80044b6:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2240      	movs	r2, #64	@ 0x40
 80044be:	5a9b      	ldrh	r3, [r3, r2]
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2108      	movs	r1, #8
 80044c8:	430a      	orrs	r2, r1
 80044ca:	b291      	uxth	r1, r2
 80044cc:	2240      	movs	r2, #64	@ 0x40
 80044ce:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	23b2      	movs	r3, #178	@ 0xb2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	2101      	movs	r1, #1
 80044d8:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2254      	movs	r2, #84	@ 0x54
 80044e0:	5a9b      	ldrh	r3, [r3, r2]
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	089b      	lsrs	r3, r3, #2
 80044e6:	223c      	movs	r2, #60	@ 0x3c
 80044e8:	4013      	ands	r3, r2
 80044ea:	0019      	movs	r1, r3
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	23b3      	movs	r3, #179	@ 0xb3
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2101      	movs	r1, #1
 80044f8:	0018      	movs	r0, r3
 80044fa:	f001 fc17 	bl	8005d2c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80044fe:	e02c      	b.n	800455a <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	0018      	movs	r0, r3
 8004504:	f008 fa58 	bl	800c9b8 <HAL_PCD_SuspendCallback>
    return;
 8004508:	e027      	b.n	800455a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	2380      	movs	r3, #128	@ 0x80
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4013      	ands	r3, r2
 8004512:	d010      	beq.n	8004536 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2244      	movs	r2, #68	@ 0x44
 800451a:	5a9b      	ldrh	r3, [r3, r2]
 800451c:	b29a      	uxth	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4914      	ldr	r1, [pc, #80]	@ (8004574 <HAL_PCD_IRQHandler+0x280>)
 8004524:	400a      	ands	r2, r1
 8004526:	b291      	uxth	r1, r2
 8004528:	2244      	movs	r2, #68	@ 0x44
 800452a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	0018      	movs	r0, r3
 8004530:	f008 fa0e 	bl	800c950 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004534:	e011      	b.n	800455a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	2380      	movs	r3, #128	@ 0x80
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	4013      	ands	r3, r2
 800453e:	d00c      	beq.n	800455a <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2244      	movs	r2, #68	@ 0x44
 8004546:	5a9b      	ldrh	r3, [r3, r2]
 8004548:	b29a      	uxth	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	490a      	ldr	r1, [pc, #40]	@ (8004578 <HAL_PCD_IRQHandler+0x284>)
 8004550:	400a      	ands	r2, r1
 8004552:	b291      	uxth	r1, r2
 8004554:	2244      	movs	r2, #68	@ 0x44
 8004556:	5299      	strh	r1, [r3, r2]

    return;
 8004558:	46c0      	nop			@ (mov r8, r8)
  }
}
 800455a:	46bd      	mov	sp, r7
 800455c:	b004      	add	sp, #16
 800455e:	bd80      	pop	{r7, pc}
 8004560:	fffffbff 	.word	0xfffffbff
 8004564:	ffffbfff 	.word	0xffffbfff
 8004568:	ffffdfff 	.word	0xffffdfff
 800456c:	ffffefff 	.word	0xffffefff
 8004570:	fffff7ff 	.word	0xfffff7ff
 8004574:	fffffdff 	.word	0xfffffdff
 8004578:	fffffeff 	.word	0xfffffeff

0800457c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	000a      	movs	r2, r1
 8004586:	1cfb      	adds	r3, r7, #3
 8004588:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	23a4      	movs	r3, #164	@ 0xa4
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	5cd3      	ldrb	r3, [r2, r3]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <HAL_PCD_SetAddress+0x1e>
 8004596:	2302      	movs	r3, #2
 8004598:	e016      	b.n	80045c8 <HAL_PCD_SetAddress+0x4c>
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	23a4      	movs	r3, #164	@ 0xa4
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	2101      	movs	r1, #1
 80045a2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	1cfa      	adds	r2, r7, #3
 80045a8:	7812      	ldrb	r2, [r2, #0]
 80045aa:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	1cfb      	adds	r3, r7, #3
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	0019      	movs	r1, r3
 80045b6:	0010      	movs	r0, r2
 80045b8:	f006 f950 	bl	800a85c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	23a4      	movs	r3, #164	@ 0xa4
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	2100      	movs	r1, #0
 80045c4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	0018      	movs	r0, r3
 80045ca:	46bd      	mov	sp, r7
 80045cc:	b002      	add	sp, #8
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045d0:	b590      	push	{r4, r7, lr}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	000c      	movs	r4, r1
 80045da:	0010      	movs	r0, r2
 80045dc:	0019      	movs	r1, r3
 80045de:	1cfb      	adds	r3, r7, #3
 80045e0:	1c22      	adds	r2, r4, #0
 80045e2:	701a      	strb	r2, [r3, #0]
 80045e4:	003b      	movs	r3, r7
 80045e6:	1c02      	adds	r2, r0, #0
 80045e8:	801a      	strh	r2, [r3, #0]
 80045ea:	1cbb      	adds	r3, r7, #2
 80045ec:	1c0a      	adds	r2, r1, #0
 80045ee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80045f0:	230b      	movs	r3, #11
 80045f2:	18fb      	adds	r3, r7, r3
 80045f4:	2200      	movs	r2, #0
 80045f6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045f8:	1cfb      	adds	r3, r7, #3
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	b25b      	sxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	da0f      	bge.n	8004622 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004602:	1cfb      	adds	r3, r7, #3
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2207      	movs	r2, #7
 8004608:	401a      	ands	r2, r3
 800460a:	0013      	movs	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	189b      	adds	r3, r3, r2
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	3310      	adds	r3, #16
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	18d3      	adds	r3, r2, r3
 8004618:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2201      	movs	r2, #1
 800461e:	705a      	strb	r2, [r3, #1]
 8004620:	e00f      	b.n	8004642 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004622:	1cfb      	adds	r3, r7, #3
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2207      	movs	r2, #7
 8004628:	401a      	ands	r2, r3
 800462a:	0013      	movs	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	189b      	adds	r3, r3, r2
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	3351      	adds	r3, #81	@ 0x51
 8004634:	33ff      	adds	r3, #255	@ 0xff
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	18d3      	adds	r3, r2, r3
 800463a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004642:	1cfb      	adds	r3, r7, #3
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2207      	movs	r2, #7
 8004648:	4013      	ands	r3, r2
 800464a:	b2da      	uxtb	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004650:	003b      	movs	r3, r7
 8004652:	881a      	ldrh	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	1cba      	adds	r2, r7, #2
 800465c:	7812      	ldrb	r2, [r2, #0]
 800465e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004660:	1cbb      	adds	r3, r7, #2
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b02      	cmp	r3, #2
 8004666:	d102      	bne.n	800466e <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	23a4      	movs	r3, #164	@ 0xa4
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	5cd3      	ldrb	r3, [r2, r3]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <HAL_PCD_EP_Open+0xae>
 800467a:	2302      	movs	r3, #2
 800467c:	e013      	b.n	80046a6 <HAL_PCD_EP_Open+0xd6>
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	23a4      	movs	r3, #164	@ 0xa4
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	2101      	movs	r1, #1
 8004686:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	0011      	movs	r1, r2
 8004690:	0018      	movs	r0, r3
 8004692:	f004 f949 	bl	8008928 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	23a4      	movs	r3, #164	@ 0xa4
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	2100      	movs	r1, #0
 800469e:	54d1      	strb	r1, [r2, r3]

  return ret;
 80046a0:	230b      	movs	r3, #11
 80046a2:	18fb      	adds	r3, r7, r3
 80046a4:	781b      	ldrb	r3, [r3, #0]
}
 80046a6:	0018      	movs	r0, r3
 80046a8:	46bd      	mov	sp, r7
 80046aa:	b005      	add	sp, #20
 80046ac:	bd90      	pop	{r4, r7, pc}

080046ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b084      	sub	sp, #16
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	000a      	movs	r2, r1
 80046b8:	1cfb      	adds	r3, r7, #3
 80046ba:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046bc:	1cfb      	adds	r3, r7, #3
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	b25b      	sxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	da0f      	bge.n	80046e6 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046c6:	1cfb      	adds	r3, r7, #3
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	2207      	movs	r2, #7
 80046cc:	401a      	ands	r2, r3
 80046ce:	0013      	movs	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	189b      	adds	r3, r3, r2
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	3310      	adds	r3, #16
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	18d3      	adds	r3, r2, r3
 80046dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	705a      	strb	r2, [r3, #1]
 80046e4:	e00f      	b.n	8004706 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046e6:	1cfb      	adds	r3, r7, #3
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2207      	movs	r2, #7
 80046ec:	401a      	ands	r2, r3
 80046ee:	0013      	movs	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	189b      	adds	r3, r3, r2
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	3351      	adds	r3, #81	@ 0x51
 80046f8:	33ff      	adds	r3, #255	@ 0xff
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	18d3      	adds	r3, r2, r3
 80046fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004706:	1cfb      	adds	r3, r7, #3
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2207      	movs	r2, #7
 800470c:	4013      	ands	r3, r2
 800470e:	b2da      	uxtb	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	23a4      	movs	r3, #164	@ 0xa4
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	5cd3      	ldrb	r3, [r2, r3]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_PCD_EP_Close+0x76>
 8004720:	2302      	movs	r3, #2
 8004722:	e011      	b.n	8004748 <HAL_PCD_EP_Close+0x9a>
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	23a4      	movs	r3, #164	@ 0xa4
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	2101      	movs	r1, #1
 800472c:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	0011      	movs	r1, r2
 8004736:	0018      	movs	r0, r3
 8004738:	f004 fc9e 	bl	8009078 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	23a4      	movs	r3, #164	@ 0xa4
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	2100      	movs	r1, #0
 8004744:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	0018      	movs	r0, r3
 800474a:	46bd      	mov	sp, r7
 800474c:	b004      	add	sp, #16
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	607a      	str	r2, [r7, #4]
 800475a:	603b      	str	r3, [r7, #0]
 800475c:	200b      	movs	r0, #11
 800475e:	183b      	adds	r3, r7, r0
 8004760:	1c0a      	adds	r2, r1, #0
 8004762:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004764:	0001      	movs	r1, r0
 8004766:	187b      	adds	r3, r7, r1
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2207      	movs	r2, #7
 800476c:	401a      	ands	r2, r3
 800476e:	0013      	movs	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	189b      	adds	r3, r3, r2
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	3351      	adds	r3, #81	@ 0x51
 8004778:	33ff      	adds	r3, #255	@ 0xff
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	18d3      	adds	r3, r2, r3
 800477e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	2200      	movs	r2, #0
 8004790:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2200      	movs	r2, #0
 8004796:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004798:	187b      	adds	r3, r7, r1
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2207      	movs	r2, #7
 800479e:	4013      	ands	r3, r2
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	0011      	movs	r1, r2
 80047ae:	0018      	movs	r0, r3
 80047b0:	f004 fe22 	bl	80093f8 <USB_EPStartXfer>

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	0018      	movs	r0, r3
 80047b8:	46bd      	mov	sp, r7
 80047ba:	b006      	add	sp, #24
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b082      	sub	sp, #8
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	000a      	movs	r2, r1
 80047c8:	1cfb      	adds	r3, r7, #3
 80047ca:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047cc:	1cfb      	adds	r3, r7, #3
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2207      	movs	r2, #7
 80047d2:	401a      	ands	r2, r3
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	23b6      	movs	r3, #182	@ 0xb6
 80047d8:	0059      	lsls	r1, r3, #1
 80047da:	0013      	movs	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	189b      	adds	r3, r3, r2
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	18c3      	adds	r3, r0, r3
 80047e4:	185b      	adds	r3, r3, r1
 80047e6:	681b      	ldr	r3, [r3, #0]
}
 80047e8:	0018      	movs	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	b002      	add	sp, #8
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	607a      	str	r2, [r7, #4]
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	200b      	movs	r0, #11
 80047fe:	183b      	adds	r3, r7, r0
 8004800:	1c0a      	adds	r2, r1, #0
 8004802:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004804:	183b      	adds	r3, r7, r0
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	2207      	movs	r2, #7
 800480a:	401a      	ands	r2, r3
 800480c:	0013      	movs	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	189b      	adds	r3, r3, r2
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	3310      	adds	r3, #16
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	18d3      	adds	r3, r2, r3
 800481a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	2224      	movs	r2, #36	@ 0x24
 800482c:	2101      	movs	r1, #1
 800482e:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2200      	movs	r2, #0
 800483a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2201      	movs	r2, #1
 8004840:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004842:	183b      	adds	r3, r7, r0
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2207      	movs	r2, #7
 8004848:	4013      	ands	r3, r2
 800484a:	b2da      	uxtb	r2, r3
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	0011      	movs	r1, r2
 8004858:	0018      	movs	r0, r3
 800485a:	f004 fdcd 	bl	80093f8 <USB_EPStartXfer>

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	0018      	movs	r0, r3
 8004862:	46bd      	mov	sp, r7
 8004864:	b006      	add	sp, #24
 8004866:	bd80      	pop	{r7, pc}

08004868 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	000a      	movs	r2, r1
 8004872:	1cfb      	adds	r3, r7, #3
 8004874:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004876:	1cfb      	adds	r3, r7, #3
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2207      	movs	r2, #7
 800487c:	4013      	ands	r3, r2
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	7912      	ldrb	r2, [r2, #4]
 8004882:	4293      	cmp	r3, r2
 8004884:	d901      	bls.n	800488a <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e046      	b.n	8004918 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800488a:	1cfb      	adds	r3, r7, #3
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	b25b      	sxtb	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	da0f      	bge.n	80048b4 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004894:	1cfb      	adds	r3, r7, #3
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2207      	movs	r2, #7
 800489a:	401a      	ands	r2, r3
 800489c:	0013      	movs	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	189b      	adds	r3, r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	3310      	adds	r3, #16
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	18d3      	adds	r3, r2, r3
 80048aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	705a      	strb	r2, [r3, #1]
 80048b2:	e00d      	b.n	80048d0 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048b4:	1cfb      	adds	r3, r7, #3
 80048b6:	781a      	ldrb	r2, [r3, #0]
 80048b8:	0013      	movs	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	189b      	adds	r3, r3, r2
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	3351      	adds	r3, #81	@ 0x51
 80048c2:	33ff      	adds	r3, #255	@ 0xff
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	18d3      	adds	r3, r2, r3
 80048c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2201      	movs	r2, #1
 80048d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048d6:	1cfb      	adds	r3, r7, #3
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2207      	movs	r2, #7
 80048dc:	4013      	ands	r3, r2
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	23a4      	movs	r3, #164	@ 0xa4
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	5cd3      	ldrb	r3, [r2, r3]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_PCD_EP_SetStall+0x8c>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e011      	b.n	8004918 <HAL_PCD_EP_SetStall+0xb0>
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	23a4      	movs	r3, #164	@ 0xa4
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	2101      	movs	r1, #1
 80048fc:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	0011      	movs	r1, r2
 8004906:	0018      	movs	r0, r3
 8004908:	f005 fea6 	bl	800a658 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	23a4      	movs	r3, #164	@ 0xa4
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	2100      	movs	r1, #0
 8004914:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	0018      	movs	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	b004      	add	sp, #16
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	000a      	movs	r2, r1
 800492a:	1cfb      	adds	r3, r7, #3
 800492c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800492e:	1cfb      	adds	r3, r7, #3
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	220f      	movs	r2, #15
 8004934:	4013      	ands	r3, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	7912      	ldrb	r2, [r2, #4]
 800493a:	4293      	cmp	r3, r2
 800493c:	d901      	bls.n	8004942 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e048      	b.n	80049d4 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004942:	1cfb      	adds	r3, r7, #3
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	b25b      	sxtb	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	da0f      	bge.n	800496c <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800494c:	1cfb      	adds	r3, r7, #3
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2207      	movs	r2, #7
 8004952:	401a      	ands	r2, r3
 8004954:	0013      	movs	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	189b      	adds	r3, r3, r2
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	3310      	adds	r3, #16
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	18d3      	adds	r3, r2, r3
 8004962:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2201      	movs	r2, #1
 8004968:	705a      	strb	r2, [r3, #1]
 800496a:	e00f      	b.n	800498c <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800496c:	1cfb      	adds	r3, r7, #3
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2207      	movs	r2, #7
 8004972:	401a      	ands	r2, r3
 8004974:	0013      	movs	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	189b      	adds	r3, r3, r2
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	3351      	adds	r3, #81	@ 0x51
 800497e:	33ff      	adds	r3, #255	@ 0xff
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	18d3      	adds	r3, r2, r3
 8004984:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004992:	1cfb      	adds	r3, r7, #3
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	2207      	movs	r2, #7
 8004998:	4013      	ands	r3, r2
 800499a:	b2da      	uxtb	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	23a4      	movs	r3, #164	@ 0xa4
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	5cd3      	ldrb	r3, [r2, r3]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d101      	bne.n	80049b0 <HAL_PCD_EP_ClrStall+0x90>
 80049ac:	2302      	movs	r3, #2
 80049ae:	e011      	b.n	80049d4 <HAL_PCD_EP_ClrStall+0xb4>
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	23a4      	movs	r3, #164	@ 0xa4
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	2101      	movs	r1, #1
 80049b8:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	0011      	movs	r1, r2
 80049c2:	0018      	movs	r0, r3
 80049c4:	f005 fe98 	bl	800a6f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	23a4      	movs	r3, #164	@ 0xa4
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	2100      	movs	r1, #0
 80049d0:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	0018      	movs	r0, r3
 80049d6:	46bd      	mov	sp, r7
 80049d8:	b004      	add	sp, #16
 80049da:	bd80      	pop	{r7, pc}

080049dc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80049dc:	b5b0      	push	{r4, r5, r7, lr}
 80049de:	b096      	sub	sp, #88	@ 0x58
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80049e4:	f000 fbea 	bl	80051bc <PCD_EP_ISR_Handler+0x7e0>
  {
    wIstr = hpcd->Instance->ISTR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	2048      	movs	r0, #72	@ 0x48
 80049ee:	183b      	adds	r3, r7, r0
 80049f0:	2144      	movs	r1, #68	@ 0x44
 80049f2:	5a52      	ldrh	r2, [r2, r1]
 80049f4:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80049f6:	183b      	adds	r3, r7, r0
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	244f      	movs	r4, #79	@ 0x4f
 80049fe:	193b      	adds	r3, r7, r4
 8004a00:	210f      	movs	r1, #15
 8004a02:	400a      	ands	r2, r1
 8004a04:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8004a06:	193b      	adds	r3, r7, r4
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d000      	beq.n	8004a10 <PCD_EP_ISR_Handler+0x34>
 8004a0e:	e18d      	b.n	8004d2c <PCD_EP_ISR_Handler+0x350>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004a10:	183b      	adds	r3, r7, r0
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	2210      	movs	r2, #16
 8004a16:	4013      	ands	r3, r2
 8004a18:	d152      	bne.n	8004ac0 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	881b      	ldrh	r3, [r3, #0]
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	200e      	movs	r0, #14
 8004a24:	183b      	adds	r3, r7, r0
 8004a26:	49ba      	ldr	r1, [pc, #744]	@ (8004d10 <PCD_EP_ISR_Handler+0x334>)
 8004a28:	400a      	ands	r2, r1
 8004a2a:	801a      	strh	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	183a      	adds	r2, r7, r0
 8004a32:	8812      	ldrh	r2, [r2, #0]
 8004a34:	49b7      	ldr	r1, [pc, #732]	@ (8004d14 <PCD_EP_ISR_Handler+0x338>)
 8004a36:	430a      	orrs	r2, r1
 8004a38:	b292      	uxth	r2, r2
 8004a3a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3310      	adds	r3, #16
 8004a40:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2250      	movs	r2, #80	@ 0x50
 8004a48:	5a9b      	ldrh	r3, [r3, r2]
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	001a      	movs	r2, r3
 8004a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	18d2      	adds	r2, r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	18d3      	adds	r3, r2, r3
 8004a5c:	4aae      	ldr	r2, [pc, #696]	@ (8004d18 <PCD_EP_ISR_Handler+0x33c>)
 8004a5e:	4694      	mov	ip, r2
 8004a60:	4463      	add	r3, ip
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	059b      	lsls	r3, r3, #22
 8004a66:	0d9a      	lsrs	r2, r3, #22
 8004a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a6a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004a6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a6e:	695a      	ldr	r2, [r3, #20]
 8004a70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a72:	69db      	ldr	r3, [r3, #28]
 8004a74:	18d2      	adds	r2, r2, r3
 8004a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a78:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f007 ff48 	bl	800c914 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	7b1b      	ldrb	r3, [r3, #12]
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <PCD_EP_ISR_Handler+0xb6>
 8004a8e:	f000 fb95 	bl	80051bc <PCD_EP_ISR_Handler+0x7e0>
 8004a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <PCD_EP_ISR_Handler+0xc2>
 8004a9a:	f000 fb8f 	bl	80051bc <PCD_EP_ISR_Handler+0x7e0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	7b1b      	ldrb	r3, [r3, #12]
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2280      	movs	r2, #128	@ 0x80
 8004aa6:	4252      	negs	r2, r2
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	0011      	movs	r1, r2
 8004ab2:	224c      	movs	r2, #76	@ 0x4c
 8004ab4:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	731a      	strb	r2, [r3, #12]
 8004abc:	f000 fb7e 	bl	80051bc <PCD_EP_ISR_Handler+0x7e0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3351      	adds	r3, #81	@ 0x51
 8004ac4:	33ff      	adds	r3, #255	@ 0xff
 8004ac6:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	214c      	movs	r1, #76	@ 0x4c
 8004ace:	187b      	adds	r3, r7, r1
 8004ad0:	8812      	ldrh	r2, [r2, #0]
 8004ad2:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004ad4:	187b      	adds	r3, r7, r1
 8004ad6:	881a      	ldrh	r2, [r3, #0]
 8004ad8:	2380      	movs	r3, #128	@ 0x80
 8004ada:	011b      	lsls	r3, r3, #4
 8004adc:	4013      	ands	r3, r2
 8004ade:	d037      	beq.n	8004b50 <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2250      	movs	r2, #80	@ 0x50
 8004ae6:	5a9b      	ldrh	r3, [r3, r2]
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	001a      	movs	r2, r3
 8004aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	18d2      	adds	r2, r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	18d3      	adds	r3, r2, r3
 8004afa:	4a88      	ldr	r2, [pc, #544]	@ (8004d1c <PCD_EP_ISR_Handler+0x340>)
 8004afc:	4694      	mov	ip, r2
 8004afe:	4463      	add	r3, ip
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	059b      	lsls	r3, r3, #22
 8004b04:	0d9a      	lsrs	r2, r3, #22
 8004b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b08:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6818      	ldr	r0, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	22a6      	movs	r2, #166	@ 0xa6
 8004b12:	0092      	lsls	r2, r2, #2
 8004b14:	1899      	adds	r1, r3, r2
 8004b16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b18:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b1c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	f005 ff1d 	bl	800a95e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	2010      	movs	r0, #16
 8004b2e:	183b      	adds	r3, r7, r0
 8004b30:	497b      	ldr	r1, [pc, #492]	@ (8004d20 <PCD_EP_ISR_Handler+0x344>)
 8004b32:	400a      	ands	r2, r1
 8004b34:	801a      	strh	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	183a      	adds	r2, r7, r0
 8004b3c:	8812      	ldrh	r2, [r2, #0]
 8004b3e:	2180      	movs	r1, #128	@ 0x80
 8004b40:	430a      	orrs	r2, r1
 8004b42:	b292      	uxth	r2, r2
 8004b44:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f007 fead 	bl	800c8a8 <HAL_PCD_SetupStageCallback>
 8004b4e:	e335      	b.n	80051bc <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004b50:	234c      	movs	r3, #76	@ 0x4c
 8004b52:	18fb      	adds	r3, r7, r3
 8004b54:	2200      	movs	r2, #0
 8004b56:	5e9b      	ldrsh	r3, [r3, r2]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	db00      	blt.n	8004b5e <PCD_EP_ISR_Handler+0x182>
 8004b5c:	e32e      	b.n	80051bc <PCD_EP_ISR_Handler+0x7e0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	201e      	movs	r0, #30
 8004b68:	183b      	adds	r3, r7, r0
 8004b6a:	496d      	ldr	r1, [pc, #436]	@ (8004d20 <PCD_EP_ISR_Handler+0x344>)
 8004b6c:	400a      	ands	r2, r1
 8004b6e:	801a      	strh	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	183a      	adds	r2, r7, r0
 8004b76:	8812      	ldrh	r2, [r2, #0]
 8004b78:	2180      	movs	r1, #128	@ 0x80
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	b292      	uxth	r2, r2
 8004b7e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2250      	movs	r2, #80	@ 0x50
 8004b86:	5a9b      	ldrh	r3, [r3, r2]
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	001a      	movs	r2, r3
 8004b8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	00db      	lsls	r3, r3, #3
 8004b92:	18d2      	adds	r2, r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	18d3      	adds	r3, r2, r3
 8004b9a:	4a60      	ldr	r2, [pc, #384]	@ (8004d1c <PCD_EP_ISR_Handler+0x340>)
 8004b9c:	4694      	mov	ip, r2
 8004b9e:	4463      	add	r3, ip
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	059b      	lsls	r3, r3, #22
 8004ba4:	0d9a      	lsrs	r2, r3, #22
 8004ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ba8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d01a      	beq.n	8004be8 <PCD_EP_ISR_Handler+0x20c>
 8004bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d016      	beq.n	8004be8 <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6818      	ldr	r0, [r3, #0]
 8004bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bc0:	6959      	ldr	r1, [r3, #20]
 8004bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bc4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bc8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	f005 fec7 	bl	800a95e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bd2:	695a      	ldr	r2, [r3, #20]
 8004bd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	18d2      	adds	r2, r2, r3
 8004bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bdc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2100      	movs	r1, #0
 8004be2:	0018      	movs	r0, r3
 8004be4:	f007 fe75 	bl	800c8d2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	214c      	movs	r1, #76	@ 0x4c
 8004bee:	187b      	adds	r3, r7, r1
 8004bf0:	8812      	ldrh	r2, [r2, #0]
 8004bf2:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004bf4:	187b      	adds	r3, r7, r1
 8004bf6:	881a      	ldrh	r2, [r3, #0]
 8004bf8:	2380      	movs	r3, #128	@ 0x80
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d000      	beq.n	8004c02 <PCD_EP_ISR_Handler+0x226>
 8004c00:	e2dc      	b.n	80051bc <PCD_EP_ISR_Handler+0x7e0>
 8004c02:	187b      	adds	r3, r7, r1
 8004c04:	881a      	ldrh	r2, [r3, #0]
 8004c06:	23c0      	movs	r3, #192	@ 0xc0
 8004c08:	019b      	lsls	r3, r3, #6
 8004c0a:	401a      	ands	r2, r3
 8004c0c:	23c0      	movs	r3, #192	@ 0xc0
 8004c0e:	019b      	lsls	r3, r3, #6
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d100      	bne.n	8004c16 <PCD_EP_ISR_Handler+0x23a>
 8004c14:	e2d2      	b.n	80051bc <PCD_EP_ISR_Handler+0x7e0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	61bb      	str	r3, [r7, #24]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2250      	movs	r2, #80	@ 0x50
 8004c22:	5a9b      	ldrh	r3, [r3, r2]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	001a      	movs	r2, r3
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	189b      	adds	r3, r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	4a3a      	ldr	r2, [pc, #232]	@ (8004d1c <PCD_EP_ISR_Handler+0x340>)
 8004c32:	4694      	mov	ip, r2
 8004c34:	4463      	add	r3, ip
 8004c36:	617b      	str	r3, [r7, #20]
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	059b      	lsls	r3, r3, #22
 8004c40:	0d9b      	lsrs	r3, r3, #22
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	801a      	strh	r2, [r3, #0]
 8004c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d108      	bne.n	8004c62 <PCD_EP_ISR_Handler+0x286>
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	4a2f      	ldr	r2, [pc, #188]	@ (8004d14 <PCD_EP_ISR_Handler+0x338>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	801a      	strh	r2, [r3, #0]
 8004c60:	e035      	b.n	8004cce <PCD_EP_ISR_Handler+0x2f2>
 8004c62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c68:	d817      	bhi.n	8004c9a <PCD_EP_ISR_Handler+0x2be>
 8004c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	085b      	lsrs	r3, r3, #1
 8004c70:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	2201      	movs	r2, #1
 8004c78:	4013      	ands	r3, r2
 8004c7a:	d002      	beq.n	8004c82 <PCD_EP_ISR_Handler+0x2a6>
 8004c7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c7e:	3301      	adds	r3, #1
 8004c80:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	029b      	lsls	r3, r3, #10
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	4313      	orrs	r3, r2
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	801a      	strh	r2, [r3, #0]
 8004c98:	e019      	b.n	8004cce <PCD_EP_ISR_Handler+0x2f2>
 8004c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	095b      	lsrs	r3, r3, #5
 8004ca0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	221f      	movs	r2, #31
 8004ca8:	4013      	ands	r3, r2
 8004caa:	d102      	bne.n	8004cb2 <PCD_EP_ISR_Handler+0x2d6>
 8004cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	029b      	lsls	r3, r3, #10
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	4a13      	ldr	r2, [pc, #76]	@ (8004d14 <PCD_EP_ISR_Handler+0x338>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	2012      	movs	r0, #18
 8004cd8:	183b      	adds	r3, r7, r0
 8004cda:	4912      	ldr	r1, [pc, #72]	@ (8004d24 <PCD_EP_ISR_Handler+0x348>)
 8004cdc:	400a      	ands	r2, r1
 8004cde:	801a      	strh	r2, [r3, #0]
 8004ce0:	183b      	adds	r3, r7, r0
 8004ce2:	183a      	adds	r2, r7, r0
 8004ce4:	8812      	ldrh	r2, [r2, #0]
 8004ce6:	2180      	movs	r1, #128	@ 0x80
 8004ce8:	0149      	lsls	r1, r1, #5
 8004cea:	404a      	eors	r2, r1
 8004cec:	801a      	strh	r2, [r3, #0]
 8004cee:	183b      	adds	r3, r7, r0
 8004cf0:	183a      	adds	r2, r7, r0
 8004cf2:	8812      	ldrh	r2, [r2, #0]
 8004cf4:	2180      	movs	r1, #128	@ 0x80
 8004cf6:	0189      	lsls	r1, r1, #6
 8004cf8:	404a      	eors	r2, r1
 8004cfa:	801a      	strh	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	183a      	adds	r2, r7, r0
 8004d02:	8812      	ldrh	r2, [r2, #0]
 8004d04:	4908      	ldr	r1, [pc, #32]	@ (8004d28 <PCD_EP_ISR_Handler+0x34c>)
 8004d06:	430a      	orrs	r2, r1
 8004d08:	b292      	uxth	r2, r2
 8004d0a:	801a      	strh	r2, [r3, #0]
 8004d0c:	e256      	b.n	80051bc <PCD_EP_ISR_Handler+0x7e0>
 8004d0e:	46c0      	nop			@ (mov r8, r8)
 8004d10:	ffff8f0f 	.word	0xffff8f0f
 8004d14:	ffff8000 	.word	0xffff8000
 8004d18:	00000402 	.word	0x00000402
 8004d1c:	00000406 	.word	0x00000406
 8004d20:	00000f8f 	.word	0x00000f8f
 8004d24:	ffffbf8f 	.word	0xffffbf8f
 8004d28:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	001a      	movs	r2, r3
 8004d32:	204f      	movs	r0, #79	@ 0x4f
 8004d34:	183b      	adds	r3, r7, r0
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	18d2      	adds	r2, r2, r3
 8004d3c:	214c      	movs	r1, #76	@ 0x4c
 8004d3e:	187b      	adds	r3, r7, r1
 8004d40:	8812      	ldrh	r2, [r2, #0]
 8004d42:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004d44:	187b      	adds	r3, r7, r1
 8004d46:	2200      	movs	r2, #0
 8004d48:	5e9b      	ldrsh	r3, [r3, r2]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	db00      	blt.n	8004d50 <PCD_EP_ISR_Handler+0x374>
 8004d4e:	e0fa      	b.n	8004f46 <PCD_EP_ISR_Handler+0x56a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	001a      	movs	r2, r3
 8004d56:	183b      	adds	r3, r7, r0
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	18d3      	adds	r3, r2, r3
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	244a      	movs	r4, #74	@ 0x4a
 8004d64:	193b      	adds	r3, r7, r4
 8004d66:	49d1      	ldr	r1, [pc, #836]	@ (80050ac <PCD_EP_ISR_Handler+0x6d0>)
 8004d68:	400a      	ands	r2, r1
 8004d6a:	801a      	strh	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	001a      	movs	r2, r3
 8004d72:	183b      	adds	r3, r7, r0
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	18d3      	adds	r3, r2, r3
 8004d7a:	193a      	adds	r2, r7, r4
 8004d7c:	8812      	ldrh	r2, [r2, #0]
 8004d7e:	2180      	movs	r1, #128	@ 0x80
 8004d80:	430a      	orrs	r2, r1
 8004d82:	b292      	uxth	r2, r2
 8004d84:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004d86:	183b      	adds	r3, r7, r0
 8004d88:	781a      	ldrb	r2, [r3, #0]
 8004d8a:	0013      	movs	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	189b      	adds	r3, r3, r2
 8004d90:	00db      	lsls	r3, r3, #3
 8004d92:	3351      	adds	r3, #81	@ 0x51
 8004d94:	33ff      	adds	r3, #255	@ 0xff
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	18d3      	adds	r3, r2, r3
 8004d9a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004d9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d9e:	7b1b      	ldrb	r3, [r3, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d125      	bne.n	8004df0 <PCD_EP_ISR_Handler+0x414>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2250      	movs	r2, #80	@ 0x50
 8004daa:	5a9b      	ldrh	r3, [r3, r2]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	001a      	movs	r2, r3
 8004db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	18d2      	adds	r2, r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	18d3      	adds	r3, r2, r3
 8004dbe:	4abc      	ldr	r2, [pc, #752]	@ (80050b0 <PCD_EP_ISR_Handler+0x6d4>)
 8004dc0:	4694      	mov	ip, r2
 8004dc2:	4463      	add	r3, ip
 8004dc4:	881a      	ldrh	r2, [r3, #0]
 8004dc6:	2450      	movs	r4, #80	@ 0x50
 8004dc8:	193b      	adds	r3, r7, r4
 8004dca:	0592      	lsls	r2, r2, #22
 8004dcc:	0d92      	lsrs	r2, r2, #22
 8004dce:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8004dd0:	193b      	adds	r3, r7, r4
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d100      	bne.n	8004dda <PCD_EP_ISR_Handler+0x3fe>
 8004dd8:	e08d      	b.n	8004ef6 <PCD_EP_ISR_Handler+0x51a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6818      	ldr	r0, [r3, #0]
 8004dde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004de0:	6959      	ldr	r1, [r3, #20]
 8004de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004de4:	88da      	ldrh	r2, [r3, #6]
 8004de6:	193b      	adds	r3, r7, r4
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	f005 fdb8 	bl	800a95e <USB_ReadPMA>
 8004dee:	e082      	b.n	8004ef6 <PCD_EP_ISR_Handler+0x51a>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004df0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004df2:	78db      	ldrb	r3, [r3, #3]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d10c      	bne.n	8004e12 <PCD_EP_ISR_Handler+0x436>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004df8:	2350      	movs	r3, #80	@ 0x50
 8004dfa:	18fc      	adds	r4, r7, r3
 8004dfc:	234c      	movs	r3, #76	@ 0x4c
 8004dfe:	18fb      	adds	r3, r7, r3
 8004e00:	881a      	ldrh	r2, [r3, #0]
 8004e02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	0018      	movs	r0, r3
 8004e08:	f000 f9ec 	bl	80051e4 <HAL_PCD_EP_DB_Receive>
 8004e0c:	0003      	movs	r3, r0
 8004e0e:	8023      	strh	r3, [r4, #0]
 8004e10:	e071      	b.n	8004ef6 <PCD_EP_ISR_Handler+0x51a>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	001a      	movs	r2, r3
 8004e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	18d3      	adds	r3, r2, r3
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	2052      	movs	r0, #82	@ 0x52
 8004e26:	183b      	adds	r3, r7, r0
 8004e28:	49a2      	ldr	r1, [pc, #648]	@ (80050b4 <PCD_EP_ISR_Handler+0x6d8>)
 8004e2a:	400a      	ands	r2, r1
 8004e2c:	801a      	strh	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	001a      	movs	r2, r3
 8004e34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	18d3      	adds	r3, r2, r3
 8004e3c:	183a      	adds	r2, r7, r0
 8004e3e:	8812      	ldrh	r2, [r2, #0]
 8004e40:	499d      	ldr	r1, [pc, #628]	@ (80050b8 <PCD_EP_ISR_Handler+0x6dc>)
 8004e42:	430a      	orrs	r2, r1
 8004e44:	b292      	uxth	r2, r2
 8004e46:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	001a      	movs	r2, r3
 8004e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	18d3      	adds	r3, r2, r3
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	001a      	movs	r2, r3
 8004e5c:	2380      	movs	r3, #128	@ 0x80
 8004e5e:	01db      	lsls	r3, r3, #7
 8004e60:	4013      	ands	r3, r2
 8004e62:	d024      	beq.n	8004eae <PCD_EP_ISR_Handler+0x4d2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2250      	movs	r2, #80	@ 0x50
 8004e6a:	5a9b      	ldrh	r3, [r3, r2]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	001a      	movs	r2, r3
 8004e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	18d2      	adds	r2, r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	18d3      	adds	r3, r2, r3
 8004e7e:	4a8f      	ldr	r2, [pc, #572]	@ (80050bc <PCD_EP_ISR_Handler+0x6e0>)
 8004e80:	4694      	mov	ip, r2
 8004e82:	4463      	add	r3, ip
 8004e84:	881a      	ldrh	r2, [r3, #0]
 8004e86:	2450      	movs	r4, #80	@ 0x50
 8004e88:	193b      	adds	r3, r7, r4
 8004e8a:	0592      	lsls	r2, r2, #22
 8004e8c:	0d92      	lsrs	r2, r2, #22
 8004e8e:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8004e90:	193b      	adds	r3, r7, r4
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d02e      	beq.n	8004ef6 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e9e:	6959      	ldr	r1, [r3, #20]
 8004ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ea2:	891a      	ldrh	r2, [r3, #8]
 8004ea4:	193b      	adds	r3, r7, r4
 8004ea6:	881b      	ldrh	r3, [r3, #0]
 8004ea8:	f005 fd59 	bl	800a95e <USB_ReadPMA>
 8004eac:	e023      	b.n	8004ef6 <PCD_EP_ISR_Handler+0x51a>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2250      	movs	r2, #80	@ 0x50
 8004eb4:	5a9b      	ldrh	r3, [r3, r2]
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	001a      	movs	r2, r3
 8004eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	18d2      	adds	r2, r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	18d3      	adds	r3, r2, r3
 8004ec8:	4a79      	ldr	r2, [pc, #484]	@ (80050b0 <PCD_EP_ISR_Handler+0x6d4>)
 8004eca:	4694      	mov	ip, r2
 8004ecc:	4463      	add	r3, ip
 8004ece:	881a      	ldrh	r2, [r3, #0]
 8004ed0:	2450      	movs	r4, #80	@ 0x50
 8004ed2:	193b      	adds	r3, r7, r4
 8004ed4:	0592      	lsls	r2, r2, #22
 8004ed6:	0d92      	lsrs	r2, r2, #22
 8004ed8:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8004eda:	193b      	adds	r3, r7, r4
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d009      	beq.n	8004ef6 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6818      	ldr	r0, [r3, #0]
 8004ee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ee8:	6959      	ldr	r1, [r3, #20]
 8004eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eec:	895a      	ldrh	r2, [r3, #10]
 8004eee:	193b      	adds	r3, r7, r4
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	f005 fd34 	bl	800a95e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ef8:	69da      	ldr	r2, [r3, #28]
 8004efa:	2150      	movs	r1, #80	@ 0x50
 8004efc:	187b      	adds	r3, r7, r1
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	18d2      	adds	r2, r2, r3
 8004f02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f04:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f08:	695a      	ldr	r2, [r3, #20]
 8004f0a:	187b      	adds	r3, r7, r1
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	18d2      	adds	r2, r2, r3
 8004f10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f12:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004f14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <PCD_EP_ISR_Handler+0x54c>
 8004f1c:	187b      	adds	r3, r7, r1
 8004f1e:	881a      	ldrh	r2, [r3, #0]
 8004f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d207      	bcs.n	8004f38 <PCD_EP_ISR_Handler+0x55c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004f28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f2a:	781a      	ldrb	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	0011      	movs	r1, r2
 8004f30:	0018      	movs	r0, r3
 8004f32:	f007 fcce 	bl	800c8d2 <HAL_PCD_DataOutStageCallback>
 8004f36:	e006      	b.n	8004f46 <PCD_EP_ISR_Handler+0x56a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004f3e:	0011      	movs	r1, r2
 8004f40:	0018      	movs	r0, r3
 8004f42:	f004 fa59 	bl	80093f8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004f46:	244c      	movs	r4, #76	@ 0x4c
 8004f48:	193b      	adds	r3, r7, r4
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	2280      	movs	r2, #128	@ 0x80
 8004f4e:	4013      	ands	r3, r2
 8004f50:	d100      	bne.n	8004f54 <PCD_EP_ISR_Handler+0x578>
 8004f52:	e133      	b.n	80051bc <PCD_EP_ISR_Handler+0x7e0>
      {
        ep = &hpcd->IN_ep[epindex];
 8004f54:	204f      	movs	r0, #79	@ 0x4f
 8004f56:	183b      	adds	r3, r7, r0
 8004f58:	781a      	ldrb	r2, [r3, #0]
 8004f5a:	0013      	movs	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	189b      	adds	r3, r3, r2
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	3310      	adds	r3, #16
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	18d3      	adds	r3, r2, r3
 8004f68:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	001a      	movs	r2, r3
 8004f70:	183b      	adds	r3, r7, r0
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	18d3      	adds	r3, r2, r3
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	2542      	movs	r5, #66	@ 0x42
 8004f7e:	197b      	adds	r3, r7, r5
 8004f80:	494f      	ldr	r1, [pc, #316]	@ (80050c0 <PCD_EP_ISR_Handler+0x6e4>)
 8004f82:	400a      	ands	r2, r1
 8004f84:	801a      	strh	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	001a      	movs	r2, r3
 8004f8c:	183b      	adds	r3, r7, r0
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	18d3      	adds	r3, r2, r3
 8004f94:	197a      	adds	r2, r7, r5
 8004f96:	8812      	ldrh	r2, [r2, #0]
 8004f98:	494a      	ldr	r1, [pc, #296]	@ (80050c4 <PCD_EP_ISR_Handler+0x6e8>)
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	b292      	uxth	r2, r2
 8004f9e:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fa2:	78db      	ldrb	r3, [r3, #3]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d000      	beq.n	8004faa <PCD_EP_ISR_Handler+0x5ce>
 8004fa8:	e0af      	b.n	800510a <PCD_EP_ISR_Handler+0x72e>
        {
          ep->xfer_len = 0U;
 8004faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fac:	2200      	movs	r2, #0
 8004fae:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fb2:	7b1b      	ldrb	r3, [r3, #12]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d100      	bne.n	8004fba <PCD_EP_ISR_Handler+0x5de>
 8004fb8:	e09f      	b.n	80050fa <PCD_EP_ISR_Handler+0x71e>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004fba:	193b      	adds	r3, r7, r4
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	2240      	movs	r2, #64	@ 0x40
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d046      	beq.n	8005052 <PCD_EP_ISR_Handler+0x676>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fc6:	785b      	ldrb	r3, [r3, #1]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d125      	bne.n	8005018 <PCD_EP_ISR_Handler+0x63c>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2250      	movs	r2, #80	@ 0x50
 8004fd8:	5a9b      	ldrh	r3, [r3, r2]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	001a      	movs	r2, r3
 8004fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe0:	189b      	adds	r3, r3, r2
 8004fe2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	00da      	lsls	r2, r3, #3
 8004fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fec:	18d3      	adds	r3, r2, r3
 8004fee:	4a33      	ldr	r2, [pc, #204]	@ (80050bc <PCD_EP_ISR_Handler+0x6e0>)
 8004ff0:	4694      	mov	ip, r2
 8004ff2:	4463      	add	r3, ip
 8004ff4:	623b      	str	r3, [r7, #32]
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	059b      	lsls	r3, r3, #22
 8004ffe:	0d9b      	lsrs	r3, r3, #22
 8005000:	b29a      	uxth	r2, r3
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	801a      	strh	r2, [r3, #0]
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	b29b      	uxth	r3, r3
 800500c:	4a2d      	ldr	r2, [pc, #180]	@ (80050c4 <PCD_EP_ISR_Handler+0x6e8>)
 800500e:	4313      	orrs	r3, r2
 8005010:	b29a      	uxth	r2, r3
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	801a      	strh	r2, [r3, #0]
 8005016:	e070      	b.n	80050fa <PCD_EP_ISR_Handler+0x71e>
 8005018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800501a:	785b      	ldrb	r3, [r3, #1]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d16c      	bne.n	80050fa <PCD_EP_ISR_Handler+0x71e>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2250      	movs	r2, #80	@ 0x50
 800502c:	5a9b      	ldrh	r3, [r3, r2]
 800502e:	b29b      	uxth	r3, r3
 8005030:	001a      	movs	r2, r3
 8005032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005034:	189b      	adds	r3, r3, r2
 8005036:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	00da      	lsls	r2, r3, #3
 800503e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005040:	18d3      	adds	r3, r2, r3
 8005042:	4a1e      	ldr	r2, [pc, #120]	@ (80050bc <PCD_EP_ISR_Handler+0x6e0>)
 8005044:	4694      	mov	ip, r2
 8005046:	4463      	add	r3, ip
 8005048:	62bb      	str	r3, [r7, #40]	@ 0x28
 800504a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800504c:	2200      	movs	r2, #0
 800504e:	801a      	strh	r2, [r3, #0]
 8005050:	e053      	b.n	80050fa <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800505a:	785b      	ldrb	r3, [r3, #1]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d133      	bne.n	80050c8 <PCD_EP_ISR_Handler+0x6ec>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	637b      	str	r3, [r7, #52]	@ 0x34
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2250      	movs	r2, #80	@ 0x50
 800506c:	5a9b      	ldrh	r3, [r3, r2]
 800506e:	b29b      	uxth	r3, r3
 8005070:	001a      	movs	r2, r3
 8005072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005074:	189b      	adds	r3, r3, r2
 8005076:	637b      	str	r3, [r7, #52]	@ 0x34
 8005078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	00da      	lsls	r2, r3, #3
 800507e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005080:	18d3      	adds	r3, r2, r3
 8005082:	4a0b      	ldr	r2, [pc, #44]	@ (80050b0 <PCD_EP_ISR_Handler+0x6d4>)
 8005084:	4694      	mov	ip, r2
 8005086:	4463      	add	r3, ip
 8005088:	633b      	str	r3, [r7, #48]	@ 0x30
 800508a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	b29b      	uxth	r3, r3
 8005090:	059b      	lsls	r3, r3, #22
 8005092:	0d9b      	lsrs	r3, r3, #22
 8005094:	b29a      	uxth	r2, r3
 8005096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005098:	801a      	strh	r2, [r3, #0]
 800509a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	b29b      	uxth	r3, r3
 80050a0:	4a08      	ldr	r2, [pc, #32]	@ (80050c4 <PCD_EP_ISR_Handler+0x6e8>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a8:	801a      	strh	r2, [r3, #0]
 80050aa:	e026      	b.n	80050fa <PCD_EP_ISR_Handler+0x71e>
 80050ac:	00000f8f 	.word	0x00000f8f
 80050b0:	00000406 	.word	0x00000406
 80050b4:	ffff8f8f 	.word	0xffff8f8f
 80050b8:	ffff80c0 	.word	0xffff80c0
 80050bc:	00000402 	.word	0x00000402
 80050c0:	ffff8f0f 	.word	0xffff8f0f
 80050c4:	ffff8000 	.word	0xffff8000
 80050c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ca:	785b      	ldrb	r3, [r3, #1]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d114      	bne.n	80050fa <PCD_EP_ISR_Handler+0x71e>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2250      	movs	r2, #80	@ 0x50
 80050d6:	5a9b      	ldrh	r3, [r3, r2]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	001a      	movs	r2, r3
 80050dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050de:	189b      	adds	r3, r3, r2
 80050e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	00da      	lsls	r2, r3, #3
 80050e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050ea:	18d3      	adds	r3, r2, r3
 80050ec:	4a3b      	ldr	r2, [pc, #236]	@ (80051dc <PCD_EP_ISR_Handler+0x800>)
 80050ee:	4694      	mov	ip, r2
 80050f0:	4463      	add	r3, ip
 80050f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f6:	2200      	movs	r2, #0
 80050f8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80050fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050fc:	781a      	ldrb	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	0011      	movs	r1, r2
 8005102:	0018      	movs	r0, r3
 8005104:	f007 fc06 	bl	800c914 <HAL_PCD_DataInStageCallback>
 8005108:	e058      	b.n	80051bc <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800510a:	234c      	movs	r3, #76	@ 0x4c
 800510c:	18fb      	adds	r3, r7, r3
 800510e:	881a      	ldrh	r2, [r3, #0]
 8005110:	2380      	movs	r3, #128	@ 0x80
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	4013      	ands	r3, r2
 8005116:	d149      	bne.n	80051ac <PCD_EP_ISR_Handler+0x7d0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2250      	movs	r2, #80	@ 0x50
 800511e:	5a9b      	ldrh	r3, [r3, r2]
 8005120:	b29b      	uxth	r3, r3
 8005122:	001a      	movs	r2, r3
 8005124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	18d2      	adds	r2, r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	18d3      	adds	r3, r2, r3
 8005132:	4a2b      	ldr	r2, [pc, #172]	@ (80051e0 <PCD_EP_ISR_Handler+0x804>)
 8005134:	4694      	mov	ip, r2
 8005136:	4463      	add	r3, ip
 8005138:	881a      	ldrh	r2, [r3, #0]
 800513a:	2140      	movs	r1, #64	@ 0x40
 800513c:	187b      	adds	r3, r7, r1
 800513e:	0592      	lsls	r2, r2, #22
 8005140:	0d92      	lsrs	r2, r2, #22
 8005142:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8005144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005146:	699a      	ldr	r2, [r3, #24]
 8005148:	187b      	adds	r3, r7, r1
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d907      	bls.n	8005160 <PCD_EP_ISR_Handler+0x784>
            {
              ep->xfer_len -= TxPctSize;
 8005150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005152:	699a      	ldr	r2, [r3, #24]
 8005154:	187b      	adds	r3, r7, r1
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	1ad2      	subs	r2, r2, r3
 800515a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800515c:	619a      	str	r2, [r3, #24]
 800515e:	e002      	b.n	8005166 <PCD_EP_ISR_Handler+0x78a>
            }
            else
            {
              ep->xfer_len = 0U;
 8005160:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005162:	2200      	movs	r2, #0
 8005164:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d107      	bne.n	800517e <PCD_EP_ISR_Handler+0x7a2>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800516e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005170:	781a      	ldrb	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	0011      	movs	r1, r2
 8005176:	0018      	movs	r0, r3
 8005178:	f007 fbcc 	bl	800c914 <HAL_PCD_DataInStageCallback>
 800517c:	e01e      	b.n	80051bc <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800517e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005180:	695a      	ldr	r2, [r3, #20]
 8005182:	2140      	movs	r1, #64	@ 0x40
 8005184:	187b      	adds	r3, r7, r1
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	18d2      	adds	r2, r2, r3
 800518a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800518c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800518e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005190:	69da      	ldr	r2, [r3, #28]
 8005192:	187b      	adds	r3, r7, r1
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	18d2      	adds	r2, r2, r3
 8005198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800519a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80051a2:	0011      	movs	r1, r2
 80051a4:	0018      	movs	r0, r3
 80051a6:	f004 f927 	bl	80093f8 <USB_EPStartXfer>
 80051aa:	e007      	b.n	80051bc <PCD_EP_ISR_Handler+0x7e0>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80051ac:	234c      	movs	r3, #76	@ 0x4c
 80051ae:	18fb      	adds	r3, r7, r3
 80051b0:	881a      	ldrh	r2, [r3, #0]
 80051b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	0018      	movs	r0, r3
 80051b8:	f000 f930 	bl	800541c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2244      	movs	r2, #68	@ 0x44
 80051c2:	5a9b      	ldrh	r3, [r3, r2]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	b21b      	sxth	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	da01      	bge.n	80051d0 <PCD_EP_ISR_Handler+0x7f4>
 80051cc:	f7ff fc0c 	bl	80049e8 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	0018      	movs	r0, r3
 80051d4:	46bd      	mov	sp, r7
 80051d6:	b016      	add	sp, #88	@ 0x58
 80051d8:	bdb0      	pop	{r4, r5, r7, pc}
 80051da:	46c0      	nop			@ (mov r8, r8)
 80051dc:	00000406 	.word	0x00000406
 80051e0:	00000402 	.word	0x00000402

080051e4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80051e4:	b590      	push	{r4, r7, lr}
 80051e6:	b089      	sub	sp, #36	@ 0x24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	1dbb      	adds	r3, r7, #6
 80051f0:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80051f2:	1dbb      	adds	r3, r7, #6
 80051f4:	881a      	ldrh	r2, [r3, #0]
 80051f6:	2380      	movs	r3, #128	@ 0x80
 80051f8:	01db      	lsls	r3, r3, #7
 80051fa:	4013      	ands	r3, r2
 80051fc:	d100      	bne.n	8005200 <HAL_PCD_EP_DB_Receive+0x1c>
 80051fe:	e07d      	b.n	80052fc <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2250      	movs	r2, #80	@ 0x50
 8005206:	5a9b      	ldrh	r3, [r3, r2]
 8005208:	b29b      	uxth	r3, r3
 800520a:	001a      	movs	r2, r3
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	18d2      	adds	r2, r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	18d3      	adds	r3, r2, r3
 800521a:	4a7a      	ldr	r2, [pc, #488]	@ (8005404 <HAL_PCD_EP_DB_Receive+0x220>)
 800521c:	4694      	mov	ip, r2
 800521e:	4463      	add	r3, ip
 8005220:	881a      	ldrh	r2, [r3, #0]
 8005222:	211a      	movs	r1, #26
 8005224:	187b      	adds	r3, r7, r1
 8005226:	0592      	lsls	r2, r2, #22
 8005228:	0d92      	lsrs	r2, r2, #22
 800522a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	699a      	ldr	r2, [r3, #24]
 8005230:	187b      	adds	r3, r7, r1
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d307      	bcc.n	8005248 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	699a      	ldr	r2, [r3, #24]
 800523c:	187b      	adds	r3, r7, r1
 800523e:	881b      	ldrh	r3, [r3, #0]
 8005240:	1ad2      	subs	r2, r2, r3
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	619a      	str	r2, [r3, #24]
 8005246:	e002      	b.n	800524e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2200      	movs	r2, #0
 800524c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d121      	bne.n	800529a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	001a      	movs	r2, r3
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	18d3      	adds	r3, r2, r3
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	b29a      	uxth	r2, r3
 8005268:	2018      	movs	r0, #24
 800526a:	183b      	adds	r3, r7, r0
 800526c:	4966      	ldr	r1, [pc, #408]	@ (8005408 <HAL_PCD_EP_DB_Receive+0x224>)
 800526e:	400a      	ands	r2, r1
 8005270:	801a      	strh	r2, [r3, #0]
 8005272:	183b      	adds	r3, r7, r0
 8005274:	183a      	adds	r2, r7, r0
 8005276:	8812      	ldrh	r2, [r2, #0]
 8005278:	2180      	movs	r1, #128	@ 0x80
 800527a:	0189      	lsls	r1, r1, #6
 800527c:	404a      	eors	r2, r1
 800527e:	801a      	strh	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	001a      	movs	r2, r3
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	18d3      	adds	r3, r2, r3
 800528e:	183a      	adds	r2, r7, r0
 8005290:	8812      	ldrh	r2, [r2, #0]
 8005292:	495e      	ldr	r1, [pc, #376]	@ (800540c <HAL_PCD_EP_DB_Receive+0x228>)
 8005294:	430a      	orrs	r2, r1
 8005296:	b292      	uxth	r2, r2
 8005298:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800529a:	1dbb      	adds	r3, r7, #6
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	2240      	movs	r2, #64	@ 0x40
 80052a0:	4013      	ands	r3, r2
 80052a2:	d01a      	beq.n	80052da <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	001a      	movs	r2, r3
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	18d3      	adds	r3, r2, r3
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	2016      	movs	r0, #22
 80052b8:	183b      	adds	r3, r7, r0
 80052ba:	4955      	ldr	r1, [pc, #340]	@ (8005410 <HAL_PCD_EP_DB_Receive+0x22c>)
 80052bc:	400a      	ands	r2, r1
 80052be:	801a      	strh	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	001a      	movs	r2, r3
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	18d3      	adds	r3, r2, r3
 80052ce:	183a      	adds	r2, r7, r0
 80052d0:	8812      	ldrh	r2, [r2, #0]
 80052d2:	4950      	ldr	r1, [pc, #320]	@ (8005414 <HAL_PCD_EP_DB_Receive+0x230>)
 80052d4:	430a      	orrs	r2, r1
 80052d6:	b292      	uxth	r2, r2
 80052d8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80052da:	241a      	movs	r4, #26
 80052dc:	193b      	adds	r3, r7, r4
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d100      	bne.n	80052e6 <HAL_PCD_EP_DB_Receive+0x102>
 80052e4:	e086      	b.n	80053f4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6818      	ldr	r0, [r3, #0]
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	6959      	ldr	r1, [r3, #20]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	891a      	ldrh	r2, [r3, #8]
 80052f2:	193b      	adds	r3, r7, r4
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	f005 fb32 	bl	800a95e <USB_ReadPMA>
 80052fa:	e07b      	b.n	80053f4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2250      	movs	r2, #80	@ 0x50
 8005302:	5a9b      	ldrh	r3, [r3, r2]
 8005304:	b29b      	uxth	r3, r3
 8005306:	001a      	movs	r2, r3
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	18d2      	adds	r2, r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	18d3      	adds	r3, r2, r3
 8005316:	4a40      	ldr	r2, [pc, #256]	@ (8005418 <HAL_PCD_EP_DB_Receive+0x234>)
 8005318:	4694      	mov	ip, r2
 800531a:	4463      	add	r3, ip
 800531c:	881a      	ldrh	r2, [r3, #0]
 800531e:	211a      	movs	r1, #26
 8005320:	187b      	adds	r3, r7, r1
 8005322:	0592      	lsls	r2, r2, #22
 8005324:	0d92      	lsrs	r2, r2, #22
 8005326:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	699a      	ldr	r2, [r3, #24]
 800532c:	187b      	adds	r3, r7, r1
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	429a      	cmp	r2, r3
 8005332:	d307      	bcc.n	8005344 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	699a      	ldr	r2, [r3, #24]
 8005338:	187b      	adds	r3, r7, r1
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	1ad2      	subs	r2, r2, r3
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	619a      	str	r2, [r3, #24]
 8005342:	e002      	b.n	800534a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2200      	movs	r2, #0
 8005348:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d121      	bne.n	8005396 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	001a      	movs	r2, r3
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	18d3      	adds	r3, r2, r3
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	b29a      	uxth	r2, r3
 8005364:	201e      	movs	r0, #30
 8005366:	183b      	adds	r3, r7, r0
 8005368:	4927      	ldr	r1, [pc, #156]	@ (8005408 <HAL_PCD_EP_DB_Receive+0x224>)
 800536a:	400a      	ands	r2, r1
 800536c:	801a      	strh	r2, [r3, #0]
 800536e:	183b      	adds	r3, r7, r0
 8005370:	183a      	adds	r2, r7, r0
 8005372:	8812      	ldrh	r2, [r2, #0]
 8005374:	2180      	movs	r1, #128	@ 0x80
 8005376:	0189      	lsls	r1, r1, #6
 8005378:	404a      	eors	r2, r1
 800537a:	801a      	strh	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	001a      	movs	r2, r3
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	18d3      	adds	r3, r2, r3
 800538a:	183a      	adds	r2, r7, r0
 800538c:	8812      	ldrh	r2, [r2, #0]
 800538e:	491f      	ldr	r1, [pc, #124]	@ (800540c <HAL_PCD_EP_DB_Receive+0x228>)
 8005390:	430a      	orrs	r2, r1
 8005392:	b292      	uxth	r2, r2
 8005394:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005396:	1dbb      	adds	r3, r7, #6
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	2240      	movs	r2, #64	@ 0x40
 800539c:	4013      	ands	r3, r2
 800539e:	d11a      	bne.n	80053d6 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	001a      	movs	r2, r3
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	18d3      	adds	r3, r2, r3
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	201c      	movs	r0, #28
 80053b4:	183b      	adds	r3, r7, r0
 80053b6:	4916      	ldr	r1, [pc, #88]	@ (8005410 <HAL_PCD_EP_DB_Receive+0x22c>)
 80053b8:	400a      	ands	r2, r1
 80053ba:	801a      	strh	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	001a      	movs	r2, r3
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	18d3      	adds	r3, r2, r3
 80053ca:	183a      	adds	r2, r7, r0
 80053cc:	8812      	ldrh	r2, [r2, #0]
 80053ce:	4911      	ldr	r1, [pc, #68]	@ (8005414 <HAL_PCD_EP_DB_Receive+0x230>)
 80053d0:	430a      	orrs	r2, r1
 80053d2:	b292      	uxth	r2, r2
 80053d4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80053d6:	241a      	movs	r4, #26
 80053d8:	193b      	adds	r3, r7, r4
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d009      	beq.n	80053f4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6818      	ldr	r0, [r3, #0]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	6959      	ldr	r1, [r3, #20]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	895a      	ldrh	r2, [r3, #10]
 80053ec:	193b      	adds	r3, r7, r4
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	f005 fab5 	bl	800a95e <USB_ReadPMA>
    }
  }

  return count;
 80053f4:	231a      	movs	r3, #26
 80053f6:	18fb      	adds	r3, r7, r3
 80053f8:	881b      	ldrh	r3, [r3, #0]
}
 80053fa:	0018      	movs	r0, r3
 80053fc:	46bd      	mov	sp, r7
 80053fe:	b009      	add	sp, #36	@ 0x24
 8005400:	bd90      	pop	{r4, r7, pc}
 8005402:	46c0      	nop			@ (mov r8, r8)
 8005404:	00000402 	.word	0x00000402
 8005408:	ffffbf8f 	.word	0xffffbf8f
 800540c:	ffff8080 	.word	0xffff8080
 8005410:	ffff8f8f 	.word	0xffff8f8f
 8005414:	ffff80c0 	.word	0xffff80c0
 8005418:	00000406 	.word	0x00000406

0800541c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b0a4      	sub	sp, #144	@ 0x90
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	1dbb      	adds	r3, r7, #6
 8005428:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800542a:	1dbb      	adds	r3, r7, #6
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	2240      	movs	r2, #64	@ 0x40
 8005430:	4013      	ands	r3, r2
 8005432:	d100      	bne.n	8005436 <HAL_PCD_EP_DB_Transmit+0x1a>
 8005434:	e1e4      	b.n	8005800 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2250      	movs	r2, #80	@ 0x50
 800543c:	5a9b      	ldrh	r3, [r3, r2]
 800543e:	b29b      	uxth	r3, r3
 8005440:	001a      	movs	r2, r3
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	18d2      	adds	r2, r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	18d3      	adds	r3, r2, r3
 8005450:	4ad0      	ldr	r2, [pc, #832]	@ (8005794 <HAL_PCD_EP_DB_Transmit+0x378>)
 8005452:	4694      	mov	ip, r2
 8005454:	4463      	add	r3, ip
 8005456:	881a      	ldrh	r2, [r3, #0]
 8005458:	2188      	movs	r1, #136	@ 0x88
 800545a:	187b      	adds	r3, r7, r1
 800545c:	0592      	lsls	r2, r2, #22
 800545e:	0d92      	lsrs	r2, r2, #22
 8005460:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	187b      	adds	r3, r7, r1
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	429a      	cmp	r2, r3
 800546c:	d907      	bls.n	800547e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	699a      	ldr	r2, [r3, #24]
 8005472:	187b      	adds	r3, r7, r1
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	1ad2      	subs	r2, r2, r3
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	619a      	str	r2, [r3, #24]
 800547c:	e002      	b.n	8005484 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2200      	movs	r2, #0
 8005482:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d000      	beq.n	800548e <HAL_PCD_EP_DB_Transmit+0x72>
 800548c:	e0b5      	b.n	80055fa <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	785b      	ldrb	r3, [r3, #1]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d125      	bne.n	80054e2 <HAL_PCD_EP_DB_Transmit+0xc6>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2250      	movs	r2, #80	@ 0x50
 80054a2:	5a9b      	ldrh	r3, [r3, r2]
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	001a      	movs	r2, r3
 80054a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054aa:	189b      	adds	r3, r3, r2
 80054ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	00da      	lsls	r2, r3, #3
 80054b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b6:	18d3      	adds	r3, r2, r3
 80054b8:	4ab6      	ldr	r2, [pc, #728]	@ (8005794 <HAL_PCD_EP_DB_Transmit+0x378>)
 80054ba:	4694      	mov	ip, r2
 80054bc:	4463      	add	r3, ip
 80054be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	059b      	lsls	r3, r3, #22
 80054c8:	0d9b      	lsrs	r3, r3, #22
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ce:	801a      	strh	r2, [r3, #0]
 80054d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	4ab0      	ldr	r2, [pc, #704]	@ (8005798 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	b29a      	uxth	r2, r3
 80054dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054de:	801a      	strh	r2, [r3, #0]
 80054e0:	e01b      	b.n	800551a <HAL_PCD_EP_DB_Transmit+0xfe>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	785b      	ldrb	r3, [r3, #1]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d117      	bne.n	800551a <HAL_PCD_EP_DB_Transmit+0xfe>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2250      	movs	r2, #80	@ 0x50
 80054f6:	5a9b      	ldrh	r3, [r3, r2]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	001a      	movs	r2, r3
 80054fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054fe:	189b      	adds	r3, r3, r2
 8005500:	637b      	str	r3, [r7, #52]	@ 0x34
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	00da      	lsls	r2, r3, #3
 8005508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800550a:	18d3      	adds	r3, r2, r3
 800550c:	4aa1      	ldr	r2, [pc, #644]	@ (8005794 <HAL_PCD_EP_DB_Transmit+0x378>)
 800550e:	4694      	mov	ip, r2
 8005510:	4463      	add	r3, ip
 8005512:	633b      	str	r3, [r7, #48]	@ 0x30
 8005514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005516:	2200      	movs	r2, #0
 8005518:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	785b      	ldrb	r3, [r3, #1]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d125      	bne.n	8005574 <HAL_PCD_EP_DB_Transmit+0x158>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	61fb      	str	r3, [r7, #28]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2250      	movs	r2, #80	@ 0x50
 8005534:	5a9b      	ldrh	r3, [r3, r2]
 8005536:	b29b      	uxth	r3, r3
 8005538:	001a      	movs	r2, r3
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	189b      	adds	r3, r3, r2
 800553e:	61fb      	str	r3, [r7, #28]
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	00da      	lsls	r2, r3, #3
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	18d3      	adds	r3, r2, r3
 800554a:	4a94      	ldr	r2, [pc, #592]	@ (800579c <HAL_PCD_EP_DB_Transmit+0x380>)
 800554c:	4694      	mov	ip, r2
 800554e:	4463      	add	r3, ip
 8005550:	61bb      	str	r3, [r7, #24]
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	b29b      	uxth	r3, r3
 8005558:	059b      	lsls	r3, r3, #22
 800555a:	0d9b      	lsrs	r3, r3, #22
 800555c:	b29a      	uxth	r2, r3
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	801a      	strh	r2, [r3, #0]
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	881b      	ldrh	r3, [r3, #0]
 8005566:	b29b      	uxth	r3, r3
 8005568:	4a8b      	ldr	r2, [pc, #556]	@ (8005798 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800556a:	4313      	orrs	r3, r2
 800556c:	b29a      	uxth	r2, r3
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	801a      	strh	r2, [r3, #0]
 8005572:	e018      	b.n	80055a6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	785b      	ldrb	r3, [r3, #1]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d114      	bne.n	80055a6 <HAL_PCD_EP_DB_Transmit+0x18a>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2250      	movs	r2, #80	@ 0x50
 8005582:	5a9b      	ldrh	r3, [r3, r2]
 8005584:	b29b      	uxth	r3, r3
 8005586:	001a      	movs	r2, r3
 8005588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558a:	189b      	adds	r3, r3, r2
 800558c:	627b      	str	r3, [r7, #36]	@ 0x24
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	00da      	lsls	r2, r3, #3
 8005594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005596:	18d3      	adds	r3, r2, r3
 8005598:	4a80      	ldr	r2, [pc, #512]	@ (800579c <HAL_PCD_EP_DB_Transmit+0x380>)
 800559a:	4694      	mov	ip, r2
 800559c:	4463      	add	r3, ip
 800559e:	623b      	str	r3, [r7, #32]
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	2200      	movs	r2, #0
 80055a4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	781a      	ldrb	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	0011      	movs	r1, r2
 80055ae:	0018      	movs	r0, r3
 80055b0:	f007 f9b0 	bl	800c914 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80055b4:	1dbb      	adds	r3, r7, #6
 80055b6:	881a      	ldrh	r2, [r3, #0]
 80055b8:	2380      	movs	r3, #128	@ 0x80
 80055ba:	01db      	lsls	r3, r3, #7
 80055bc:	4013      	ands	r3, r2
 80055be:	d100      	bne.n	80055c2 <HAL_PCD_EP_DB_Transmit+0x1a6>
 80055c0:	e308      	b.n	8005bd4 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	001a      	movs	r2, r3
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	18d3      	adds	r3, r2, r3
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	2016      	movs	r0, #22
 80055d6:	183b      	adds	r3, r7, r0
 80055d8:	4971      	ldr	r1, [pc, #452]	@ (80057a0 <HAL_PCD_EP_DB_Transmit+0x384>)
 80055da:	400a      	ands	r2, r1
 80055dc:	801a      	strh	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	001a      	movs	r2, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	18d3      	adds	r3, r2, r3
 80055ec:	183a      	adds	r2, r7, r0
 80055ee:	8812      	ldrh	r2, [r2, #0]
 80055f0:	496c      	ldr	r1, [pc, #432]	@ (80057a4 <HAL_PCD_EP_DB_Transmit+0x388>)
 80055f2:	430a      	orrs	r2, r1
 80055f4:	b292      	uxth	r2, r2
 80055f6:	801a      	strh	r2, [r3, #0]
 80055f8:	e2ec      	b.n	8005bd4 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80055fa:	1dbb      	adds	r3, r7, #6
 80055fc:	881a      	ldrh	r2, [r3, #0]
 80055fe:	2380      	movs	r3, #128	@ 0x80
 8005600:	01db      	lsls	r3, r3, #7
 8005602:	4013      	ands	r3, r2
 8005604:	d01a      	beq.n	800563c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	001a      	movs	r2, r3
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	18d3      	adds	r3, r2, r3
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	b29a      	uxth	r2, r3
 8005618:	208a      	movs	r0, #138	@ 0x8a
 800561a:	183b      	adds	r3, r7, r0
 800561c:	4960      	ldr	r1, [pc, #384]	@ (80057a0 <HAL_PCD_EP_DB_Transmit+0x384>)
 800561e:	400a      	ands	r2, r1
 8005620:	801a      	strh	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	001a      	movs	r2, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	18d3      	adds	r3, r2, r3
 8005630:	183a      	adds	r2, r7, r0
 8005632:	8812      	ldrh	r2, [r2, #0]
 8005634:	495b      	ldr	r1, [pc, #364]	@ (80057a4 <HAL_PCD_EP_DB_Transmit+0x388>)
 8005636:	430a      	orrs	r2, r1
 8005638:	b292      	uxth	r2, r2
 800563a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2224      	movs	r2, #36	@ 0x24
 8005640:	5c9b      	ldrb	r3, [r3, r2]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d000      	beq.n	8005648 <HAL_PCD_EP_DB_Transmit+0x22c>
 8005646:	e2c5      	b.n	8005bd4 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	695a      	ldr	r2, [r3, #20]
 800564c:	2188      	movs	r1, #136	@ 0x88
 800564e:	187b      	adds	r3, r7, r1
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	18d2      	adds	r2, r2, r3
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	69da      	ldr	r2, [r3, #28]
 800565c:	187b      	adds	r3, r7, r1
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	18d2      	adds	r2, r2, r3
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	6a1a      	ldr	r2, [r3, #32]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	429a      	cmp	r2, r3
 8005670:	d30c      	bcc.n	800568c <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	218c      	movs	r1, #140	@ 0x8c
 8005678:	187a      	adds	r2, r7, r1
 800567a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	6a1a      	ldr	r2, [r3, #32]
 8005680:	187b      	adds	r3, r7, r1
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	1ad2      	subs	r2, r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	621a      	str	r2, [r3, #32]
 800568a:	e01a      	b.n	80056c2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10a      	bne.n	80056aa <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8005694:	2388      	movs	r3, #136	@ 0x88
 8005696:	18fb      	adds	r3, r7, r3
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	228c      	movs	r2, #140	@ 0x8c
 800569c:	18ba      	adds	r2, r7, r2
 800569e:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	2224      	movs	r2, #36	@ 0x24
 80056a4:	2100      	movs	r1, #0
 80056a6:	5499      	strb	r1, [r3, r2]
 80056a8:	e00b      	b.n	80056c2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2224      	movs	r2, #36	@ 0x24
 80056ae:	2100      	movs	r1, #0
 80056b0:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	228c      	movs	r2, #140	@ 0x8c
 80056b8:	18ba      	adds	r2, r7, r2
 80056ba:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2200      	movs	r2, #0
 80056c0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	785b      	ldrb	r3, [r3, #1]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d000      	beq.n	80056cc <HAL_PCD_EP_DB_Transmit+0x2b0>
 80056ca:	e06d      	b.n	80057a8 <HAL_PCD_EP_DB_Transmit+0x38c>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2250      	movs	r2, #80	@ 0x50
 80056d8:	5a9b      	ldrh	r3, [r3, r2]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	001a      	movs	r2, r3
 80056de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056e0:	189b      	adds	r3, r3, r2
 80056e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	00da      	lsls	r2, r3, #3
 80056ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ec:	18d3      	adds	r3, r2, r3
 80056ee:	4a29      	ldr	r2, [pc, #164]	@ (8005794 <HAL_PCD_EP_DB_Transmit+0x378>)
 80056f0:	4694      	mov	ip, r2
 80056f2:	4463      	add	r3, ip
 80056f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	059b      	lsls	r3, r3, #22
 80056fe:	0d9b      	lsrs	r3, r3, #22
 8005700:	b29a      	uxth	r2, r3
 8005702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005704:	801a      	strh	r2, [r3, #0]
 8005706:	238c      	movs	r3, #140	@ 0x8c
 8005708:	18fb      	adds	r3, r7, r3
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d108      	bne.n	8005722 <HAL_PCD_EP_DB_Transmit+0x306>
 8005710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	b29b      	uxth	r3, r3
 8005716:	4a20      	ldr	r2, [pc, #128]	@ (8005798 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005718:	4313      	orrs	r3, r2
 800571a:	b29a      	uxth	r2, r3
 800571c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571e:	801a      	strh	r2, [r3, #0]
 8005720:	e061      	b.n	80057e6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005722:	228c      	movs	r2, #140	@ 0x8c
 8005724:	18bb      	adds	r3, r7, r2
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b3e      	cmp	r3, #62	@ 0x3e
 800572a:	d817      	bhi.n	800575c <HAL_PCD_EP_DB_Transmit+0x340>
 800572c:	18bb      	adds	r3, r7, r2
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	085b      	lsrs	r3, r3, #1
 8005732:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005734:	18bb      	adds	r3, r7, r2
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2201      	movs	r2, #1
 800573a:	4013      	ands	r3, r2
 800573c:	d002      	beq.n	8005744 <HAL_PCD_EP_DB_Transmit+0x328>
 800573e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005740:	3301      	adds	r3, #1
 8005742:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005746:	881b      	ldrh	r3, [r3, #0]
 8005748:	b29a      	uxth	r2, r3
 800574a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800574c:	b29b      	uxth	r3, r3
 800574e:	029b      	lsls	r3, r3, #10
 8005750:	b29b      	uxth	r3, r3
 8005752:	4313      	orrs	r3, r2
 8005754:	b29a      	uxth	r2, r3
 8005756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005758:	801a      	strh	r2, [r3, #0]
 800575a:	e044      	b.n	80057e6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800575c:	228c      	movs	r2, #140	@ 0x8c
 800575e:	18bb      	adds	r3, r7, r2
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	095b      	lsrs	r3, r3, #5
 8005764:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005766:	18bb      	adds	r3, r7, r2
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	221f      	movs	r2, #31
 800576c:	4013      	ands	r3, r2
 800576e:	d102      	bne.n	8005776 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005770:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005772:	3b01      	subs	r3, #1
 8005774:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	b29a      	uxth	r2, r3
 800577c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800577e:	b29b      	uxth	r3, r3
 8005780:	029b      	lsls	r3, r3, #10
 8005782:	b29b      	uxth	r3, r3
 8005784:	4313      	orrs	r3, r2
 8005786:	b29b      	uxth	r3, r3
 8005788:	4a03      	ldr	r2, [pc, #12]	@ (8005798 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800578a:	4313      	orrs	r3, r2
 800578c:	b29a      	uxth	r2, r3
 800578e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005790:	801a      	strh	r2, [r3, #0]
 8005792:	e028      	b.n	80057e6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005794:	00000402 	.word	0x00000402
 8005798:	ffff8000 	.word	0xffff8000
 800579c:	00000406 	.word	0x00000406
 80057a0:	ffff8f8f 	.word	0xffff8f8f
 80057a4:	ffffc080 	.word	0xffffc080
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	785b      	ldrb	r3, [r3, #1]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d11a      	bne.n	80057e6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2250      	movs	r2, #80	@ 0x50
 80057bc:	5a9b      	ldrh	r3, [r3, r2]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	001a      	movs	r2, r3
 80057c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057c4:	189b      	adds	r3, r3, r2
 80057c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	00da      	lsls	r2, r3, #3
 80057ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057d0:	18d3      	adds	r3, r2, r3
 80057d2:	4ad9      	ldr	r2, [pc, #868]	@ (8005b38 <HAL_PCD_EP_DB_Transmit+0x71c>)
 80057d4:	4694      	mov	ip, r2
 80057d6:	4463      	add	r3, ip
 80057d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80057da:	238c      	movs	r3, #140	@ 0x8c
 80057dc:	18fb      	adds	r3, r7, r3
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057e4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6818      	ldr	r0, [r3, #0]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	6959      	ldr	r1, [r3, #20]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	891a      	ldrh	r2, [r3, #8]
 80057f2:	238c      	movs	r3, #140	@ 0x8c
 80057f4:	18fb      	adds	r3, r7, r3
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	f005 f867 	bl	800a8cc <USB_WritePMA>
 80057fe:	e1e9      	b.n	8005bd4 <HAL_PCD_EP_DB_Transmit+0x7b8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2250      	movs	r2, #80	@ 0x50
 8005806:	5a9b      	ldrh	r3, [r3, r2]
 8005808:	b29b      	uxth	r3, r3
 800580a:	001a      	movs	r2, r3
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	18d2      	adds	r2, r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	18d3      	adds	r3, r2, r3
 800581a:	4ac8      	ldr	r2, [pc, #800]	@ (8005b3c <HAL_PCD_EP_DB_Transmit+0x720>)
 800581c:	4694      	mov	ip, r2
 800581e:	4463      	add	r3, ip
 8005820:	881a      	ldrh	r2, [r3, #0]
 8005822:	2188      	movs	r1, #136	@ 0x88
 8005824:	187b      	adds	r3, r7, r1
 8005826:	0592      	lsls	r2, r2, #22
 8005828:	0d92      	lsrs	r2, r2, #22
 800582a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	699a      	ldr	r2, [r3, #24]
 8005830:	187b      	adds	r3, r7, r1
 8005832:	881b      	ldrh	r3, [r3, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d307      	bcc.n	8005848 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	699a      	ldr	r2, [r3, #24]
 800583c:	187b      	adds	r3, r7, r1
 800583e:	881b      	ldrh	r3, [r3, #0]
 8005840:	1ad2      	subs	r2, r2, r3
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	619a      	str	r2, [r3, #24]
 8005846:	e002      	b.n	800584e <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2200      	movs	r2, #0
 800584c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d000      	beq.n	8005858 <HAL_PCD_EP_DB_Transmit+0x43c>
 8005856:	e0bb      	b.n	80059d0 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	785b      	ldrb	r3, [r3, #1]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d125      	bne.n	80058ac <HAL_PCD_EP_DB_Transmit+0x490>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2250      	movs	r2, #80	@ 0x50
 800586c:	5a9b      	ldrh	r3, [r3, r2]
 800586e:	b29b      	uxth	r3, r3
 8005870:	001a      	movs	r2, r3
 8005872:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005874:	189b      	adds	r3, r3, r2
 8005876:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	00da      	lsls	r2, r3, #3
 800587e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005880:	18d3      	adds	r3, r2, r3
 8005882:	4aad      	ldr	r2, [pc, #692]	@ (8005b38 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005884:	4694      	mov	ip, r2
 8005886:	4463      	add	r3, ip
 8005888:	67bb      	str	r3, [r7, #120]	@ 0x78
 800588a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	b29b      	uxth	r3, r3
 8005890:	059b      	lsls	r3, r3, #22
 8005892:	0d9b      	lsrs	r3, r3, #22
 8005894:	b29a      	uxth	r2, r3
 8005896:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005898:	801a      	strh	r2, [r3, #0]
 800589a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	b29b      	uxth	r3, r3
 80058a0:	4aa7      	ldr	r2, [pc, #668]	@ (8005b40 <HAL_PCD_EP_DB_Transmit+0x724>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058a8:	801a      	strh	r2, [r3, #0]
 80058aa:	e01b      	b.n	80058e4 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	785b      	ldrb	r3, [r3, #1]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d117      	bne.n	80058e4 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2250      	movs	r2, #80	@ 0x50
 80058c0:	5a9b      	ldrh	r3, [r3, r2]
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	001a      	movs	r2, r3
 80058c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058c8:	189b      	adds	r3, r3, r2
 80058ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	00da      	lsls	r2, r3, #3
 80058d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058d4:	18d3      	adds	r3, r2, r3
 80058d6:	4a98      	ldr	r2, [pc, #608]	@ (8005b38 <HAL_PCD_EP_DB_Transmit+0x71c>)
 80058d8:	4694      	mov	ip, r2
 80058da:	4463      	add	r3, ip
 80058dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80058de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058e0:	2200      	movs	r2, #0
 80058e2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	677b      	str	r3, [r7, #116]	@ 0x74
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	785b      	ldrb	r3, [r3, #1]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d12b      	bne.n	800594a <HAL_PCD_EP_DB_Transmit+0x52e>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2250      	movs	r2, #80	@ 0x50
 80058fe:	5a9b      	ldrh	r3, [r3, r2]
 8005900:	b29b      	uxth	r3, r3
 8005902:	001a      	movs	r2, r3
 8005904:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005906:	189b      	adds	r3, r3, r2
 8005908:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	00da      	lsls	r2, r3, #3
 8005910:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005912:	18d3      	adds	r3, r2, r3
 8005914:	4a89      	ldr	r2, [pc, #548]	@ (8005b3c <HAL_PCD_EP_DB_Transmit+0x720>)
 8005916:	4694      	mov	ip, r2
 8005918:	4463      	add	r3, ip
 800591a:	2184      	movs	r1, #132	@ 0x84
 800591c:	187a      	adds	r2, r7, r1
 800591e:	6013      	str	r3, [r2, #0]
 8005920:	187b      	adds	r3, r7, r1
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	b29b      	uxth	r3, r3
 8005928:	059b      	lsls	r3, r3, #22
 800592a:	0d9b      	lsrs	r3, r3, #22
 800592c:	b29a      	uxth	r2, r3
 800592e:	187b      	adds	r3, r7, r1
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	801a      	strh	r2, [r3, #0]
 8005934:	187b      	adds	r3, r7, r1
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	b29b      	uxth	r3, r3
 800593c:	4a80      	ldr	r2, [pc, #512]	@ (8005b40 <HAL_PCD_EP_DB_Transmit+0x724>)
 800593e:	4313      	orrs	r3, r2
 8005940:	b29a      	uxth	r2, r3
 8005942:	187b      	adds	r3, r7, r1
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	801a      	strh	r2, [r3, #0]
 8005948:	e018      	b.n	800597c <HAL_PCD_EP_DB_Transmit+0x560>
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	785b      	ldrb	r3, [r3, #1]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d114      	bne.n	800597c <HAL_PCD_EP_DB_Transmit+0x560>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2250      	movs	r2, #80	@ 0x50
 8005958:	5a9b      	ldrh	r3, [r3, r2]
 800595a:	b29b      	uxth	r3, r3
 800595c:	001a      	movs	r2, r3
 800595e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005960:	189b      	adds	r3, r3, r2
 8005962:	677b      	str	r3, [r7, #116]	@ 0x74
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	00da      	lsls	r2, r3, #3
 800596a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800596c:	18d3      	adds	r3, r2, r3
 800596e:	4a73      	ldr	r2, [pc, #460]	@ (8005b3c <HAL_PCD_EP_DB_Transmit+0x720>)
 8005970:	4694      	mov	ip, r2
 8005972:	4463      	add	r3, ip
 8005974:	673b      	str	r3, [r7, #112]	@ 0x70
 8005976:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005978:	2200      	movs	r2, #0
 800597a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	781a      	ldrb	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	0011      	movs	r1, r2
 8005984:	0018      	movs	r0, r3
 8005986:	f006 ffc5 	bl	800c914 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800598a:	1dbb      	adds	r3, r7, #6
 800598c:	881a      	ldrh	r2, [r3, #0]
 800598e:	2380      	movs	r3, #128	@ 0x80
 8005990:	01db      	lsls	r3, r3, #7
 8005992:	4013      	ands	r3, r2
 8005994:	d000      	beq.n	8005998 <HAL_PCD_EP_DB_Transmit+0x57c>
 8005996:	e11d      	b.n	8005bd4 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	001a      	movs	r2, r3
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	18d3      	adds	r3, r2, r3
 80059a6:	881b      	ldrh	r3, [r3, #0]
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	2082      	movs	r0, #130	@ 0x82
 80059ac:	183b      	adds	r3, r7, r0
 80059ae:	4965      	ldr	r1, [pc, #404]	@ (8005b44 <HAL_PCD_EP_DB_Transmit+0x728>)
 80059b0:	400a      	ands	r2, r1
 80059b2:	801a      	strh	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	001a      	movs	r2, r3
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	18d3      	adds	r3, r2, r3
 80059c2:	183a      	adds	r2, r7, r0
 80059c4:	8812      	ldrh	r2, [r2, #0]
 80059c6:	4960      	ldr	r1, [pc, #384]	@ (8005b48 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80059c8:	430a      	orrs	r2, r1
 80059ca:	b292      	uxth	r2, r2
 80059cc:	801a      	strh	r2, [r3, #0]
 80059ce:	e101      	b.n	8005bd4 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80059d0:	1dbb      	adds	r3, r7, #6
 80059d2:	881a      	ldrh	r2, [r3, #0]
 80059d4:	2380      	movs	r3, #128	@ 0x80
 80059d6:	01db      	lsls	r3, r3, #7
 80059d8:	4013      	ands	r3, r2
 80059da:	d11a      	bne.n	8005a12 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	001a      	movs	r2, r3
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	18d3      	adds	r3, r2, r3
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	204e      	movs	r0, #78	@ 0x4e
 80059f0:	183b      	adds	r3, r7, r0
 80059f2:	4954      	ldr	r1, [pc, #336]	@ (8005b44 <HAL_PCD_EP_DB_Transmit+0x728>)
 80059f4:	400a      	ands	r2, r1
 80059f6:	801a      	strh	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	001a      	movs	r2, r3
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	18d3      	adds	r3, r2, r3
 8005a06:	183a      	adds	r2, r7, r0
 8005a08:	8812      	ldrh	r2, [r2, #0]
 8005a0a:	494f      	ldr	r1, [pc, #316]	@ (8005b48 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	b292      	uxth	r2, r2
 8005a10:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2224      	movs	r2, #36	@ 0x24
 8005a16:	5c9b      	ldrb	r3, [r3, r2]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d000      	beq.n	8005a1e <HAL_PCD_EP_DB_Transmit+0x602>
 8005a1c:	e0da      	b.n	8005bd4 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	695a      	ldr	r2, [r3, #20]
 8005a22:	2188      	movs	r1, #136	@ 0x88
 8005a24:	187b      	adds	r3, r7, r1
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	18d2      	adds	r2, r2, r3
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	69da      	ldr	r2, [r3, #28]
 8005a32:	187b      	adds	r3, r7, r1
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	18d2      	adds	r2, r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	6a1a      	ldr	r2, [r3, #32]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d30c      	bcc.n	8005a62 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	218c      	movs	r1, #140	@ 0x8c
 8005a4e:	187a      	adds	r2, r7, r1
 8005a50:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	6a1a      	ldr	r2, [r3, #32]
 8005a56:	187b      	adds	r3, r7, r1
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	1ad2      	subs	r2, r2, r3
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	621a      	str	r2, [r3, #32]
 8005a60:	e01a      	b.n	8005a98 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10a      	bne.n	8005a80 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8005a6a:	2388      	movs	r3, #136	@ 0x88
 8005a6c:	18fb      	adds	r3, r7, r3
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	228c      	movs	r2, #140	@ 0x8c
 8005a72:	18ba      	adds	r2, r7, r2
 8005a74:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2224      	movs	r2, #36	@ 0x24
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	5499      	strb	r1, [r3, r2]
 8005a7e:	e00b      	b.n	8005a98 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	228c      	movs	r2, #140	@ 0x8c
 8005a86:	18ba      	adds	r2, r7, r2
 8005a88:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2224      	movs	r2, #36	@ 0x24
 8005a94:	2100      	movs	r1, #0
 8005a96:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	785b      	ldrb	r3, [r3, #1]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d000      	beq.n	8005aa8 <HAL_PCD_EP_DB_Transmit+0x68c>
 8005aa6:	e06d      	b.n	8005b84 <HAL_PCD_EP_DB_Transmit+0x768>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2250      	movs	r2, #80	@ 0x50
 8005ab4:	5a9b      	ldrh	r3, [r3, r2]
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	001a      	movs	r2, r3
 8005aba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005abc:	189b      	adds	r3, r3, r2
 8005abe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	00da      	lsls	r2, r3, #3
 8005ac6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ac8:	18d3      	adds	r3, r2, r3
 8005aca:	4a1c      	ldr	r2, [pc, #112]	@ (8005b3c <HAL_PCD_EP_DB_Transmit+0x720>)
 8005acc:	4694      	mov	ip, r2
 8005ace:	4463      	add	r3, ip
 8005ad0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ad2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	059b      	lsls	r3, r3, #22
 8005ada:	0d9b      	lsrs	r3, r3, #22
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ae0:	801a      	strh	r2, [r3, #0]
 8005ae2:	238c      	movs	r3, #140	@ 0x8c
 8005ae4:	18fb      	adds	r3, r7, r3
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d108      	bne.n	8005afe <HAL_PCD_EP_DB_Transmit+0x6e2>
 8005aec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	4a13      	ldr	r2, [pc, #76]	@ (8005b40 <HAL_PCD_EP_DB_Transmit+0x724>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005afa:	801a      	strh	r2, [r3, #0]
 8005afc:	e05e      	b.n	8005bbc <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005afe:	228c      	movs	r2, #140	@ 0x8c
 8005b00:	18bb      	adds	r3, r7, r2
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b06:	d821      	bhi.n	8005b4c <HAL_PCD_EP_DB_Transmit+0x730>
 8005b08:	18bb      	adds	r3, r7, r2
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	085b      	lsrs	r3, r3, #1
 8005b0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b10:	18bb      	adds	r3, r7, r2
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2201      	movs	r2, #1
 8005b16:	4013      	ands	r3, r2
 8005b18:	d002      	beq.n	8005b20 <HAL_PCD_EP_DB_Transmit+0x704>
 8005b1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	029b      	lsls	r3, r3, #10
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b34:	801a      	strh	r2, [r3, #0]
 8005b36:	e041      	b.n	8005bbc <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005b38:	00000402 	.word	0x00000402
 8005b3c:	00000406 	.word	0x00000406
 8005b40:	ffff8000 	.word	0xffff8000
 8005b44:	ffff8f8f 	.word	0xffff8f8f
 8005b48:	ffffc080 	.word	0xffffc080
 8005b4c:	228c      	movs	r2, #140	@ 0x8c
 8005b4e:	18bb      	adds	r3, r7, r2
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	095b      	lsrs	r3, r3, #5
 8005b54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b56:	18bb      	adds	r3, r7, r2
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	221f      	movs	r2, #31
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	d102      	bne.n	8005b66 <HAL_PCD_EP_DB_Transmit+0x74a>
 8005b60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b62:	3b01      	subs	r3, #1
 8005b64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	029b      	lsls	r3, r3, #10
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	4313      	orrs	r3, r2
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	4a2c      	ldr	r2, [pc, #176]	@ (8005c2c <HAL_PCD_EP_DB_Transmit+0x810>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b80:	801a      	strh	r2, [r3, #0]
 8005b82:	e01b      	b.n	8005bbc <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	785b      	ldrb	r3, [r3, #1]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d117      	bne.n	8005bbc <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2250      	movs	r2, #80	@ 0x50
 8005b92:	5a9b      	ldrh	r3, [r3, r2]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	001a      	movs	r2, r3
 8005b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b9a:	189b      	adds	r3, r3, r2
 8005b9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	00da      	lsls	r2, r3, #3
 8005ba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ba6:	18d3      	adds	r3, r2, r3
 8005ba8:	4a21      	ldr	r2, [pc, #132]	@ (8005c30 <HAL_PCD_EP_DB_Transmit+0x814>)
 8005baa:	4694      	mov	ip, r2
 8005bac:	4463      	add	r3, ip
 8005bae:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bb0:	238c      	movs	r3, #140	@ 0x8c
 8005bb2:	18fb      	adds	r3, r7, r3
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bba:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6818      	ldr	r0, [r3, #0]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	6959      	ldr	r1, [r3, #20]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	895a      	ldrh	r2, [r3, #10]
 8005bc8:	238c      	movs	r3, #140	@ 0x8c
 8005bca:	18fb      	adds	r3, r7, r3
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	f004 fe7c 	bl	800a8cc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	001a      	movs	r2, r3
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	18d3      	adds	r3, r2, r3
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	2014      	movs	r0, #20
 8005be8:	183b      	adds	r3, r7, r0
 8005bea:	4912      	ldr	r1, [pc, #72]	@ (8005c34 <HAL_PCD_EP_DB_Transmit+0x818>)
 8005bec:	400a      	ands	r2, r1
 8005bee:	801a      	strh	r2, [r3, #0]
 8005bf0:	183b      	adds	r3, r7, r0
 8005bf2:	183a      	adds	r2, r7, r0
 8005bf4:	8812      	ldrh	r2, [r2, #0]
 8005bf6:	2110      	movs	r1, #16
 8005bf8:	404a      	eors	r2, r1
 8005bfa:	801a      	strh	r2, [r3, #0]
 8005bfc:	183b      	adds	r3, r7, r0
 8005bfe:	183a      	adds	r2, r7, r0
 8005c00:	8812      	ldrh	r2, [r2, #0]
 8005c02:	2120      	movs	r1, #32
 8005c04:	404a      	eors	r2, r1
 8005c06:	801a      	strh	r2, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	001a      	movs	r2, r3
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	18d3      	adds	r3, r2, r3
 8005c16:	183a      	adds	r2, r7, r0
 8005c18:	8812      	ldrh	r2, [r2, #0]
 8005c1a:	4907      	ldr	r1, [pc, #28]	@ (8005c38 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	b292      	uxth	r2, r2
 8005c20:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	0018      	movs	r0, r3
 8005c26:	46bd      	mov	sp, r7
 8005c28:	b024      	add	sp, #144	@ 0x90
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	ffff8000 	.word	0xffff8000
 8005c30:	00000406 	.word	0x00000406
 8005c34:	ffff8fbf 	.word	0xffff8fbf
 8005c38:	ffff8080 	.word	0xffff8080

08005c3c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005c3c:	b590      	push	{r4, r7, lr}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	0008      	movs	r0, r1
 8005c46:	0011      	movs	r1, r2
 8005c48:	607b      	str	r3, [r7, #4]
 8005c4a:	240a      	movs	r4, #10
 8005c4c:	193b      	adds	r3, r7, r4
 8005c4e:	1c02      	adds	r2, r0, #0
 8005c50:	801a      	strh	r2, [r3, #0]
 8005c52:	2308      	movs	r3, #8
 8005c54:	18fb      	adds	r3, r7, r3
 8005c56:	1c0a      	adds	r2, r1, #0
 8005c58:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005c5a:	0021      	movs	r1, r4
 8005c5c:	187b      	adds	r3, r7, r1
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	2280      	movs	r2, #128	@ 0x80
 8005c62:	4013      	ands	r3, r2
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00c      	beq.n	8005c84 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c6a:	187b      	adds	r3, r7, r1
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	2207      	movs	r2, #7
 8005c70:	401a      	ands	r2, r3
 8005c72:	0013      	movs	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	189b      	adds	r3, r3, r2
 8005c78:	00db      	lsls	r3, r3, #3
 8005c7a:	3310      	adds	r3, #16
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	18d3      	adds	r3, r2, r3
 8005c80:	617b      	str	r3, [r7, #20]
 8005c82:	e00b      	b.n	8005c9c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c84:	230a      	movs	r3, #10
 8005c86:	18fb      	adds	r3, r7, r3
 8005c88:	881a      	ldrh	r2, [r3, #0]
 8005c8a:	0013      	movs	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	189b      	adds	r3, r3, r2
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	3351      	adds	r3, #81	@ 0x51
 8005c94:	33ff      	adds	r3, #255	@ 0xff
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	18d3      	adds	r3, r2, r3
 8005c9a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005c9c:	2308      	movs	r3, #8
 8005c9e:	18fb      	adds	r3, r7, r3
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d107      	bne.n	8005cb6 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	80da      	strh	r2, [r3, #6]
 8005cb4:	e00b      	b.n	8005cce <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	0c1b      	lsrs	r3, r3, #16
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	b007      	add	sp, #28
 8005cd6:	bd90      	pop	{r4, r7, pc}

08005cd8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	23b4      	movs	r3, #180	@ 0xb4
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	2101      	movs	r1, #1
 8005cee:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	23b2      	movs	r3, #178	@ 0xb2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2254      	movs	r2, #84	@ 0x54
 8005cfe:	5a9b      	ldrh	r3, [r3, r2]
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2201      	movs	r2, #1
 8005d04:	4313      	orrs	r3, r2
 8005d06:	b299      	uxth	r1, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2254      	movs	r2, #84	@ 0x54
 8005d0c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2254      	movs	r2, #84	@ 0x54
 8005d12:	5a9b      	ldrh	r3, [r3, r2]
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	2202      	movs	r2, #2
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	b299      	uxth	r1, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2254      	movs	r2, #84	@ 0x54
 8005d20:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	0018      	movs	r0, r3
 8005d26:	46bd      	mov	sp, r7
 8005d28:	b004      	add	sp, #16
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	000a      	movs	r2, r1
 8005d36:	1cfb      	adds	r3, r7, #3
 8005d38:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005d3a:	46c0      	nop			@ (mov r8, r8)
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	b002      	add	sp, #8
 8005d40:	bd80      	pop	{r7, pc}
	...

08005d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d102      	bne.n	8005d58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	f000 fb76 	bl	8006444 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	4013      	ands	r3, r2
 8005d60:	d100      	bne.n	8005d64 <HAL_RCC_OscConfig+0x20>
 8005d62:	e08e      	b.n	8005e82 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005d64:	4bc5      	ldr	r3, [pc, #788]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	220c      	movs	r2, #12
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	2b04      	cmp	r3, #4
 8005d6e:	d00e      	beq.n	8005d8e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005d70:	4bc2      	ldr	r3, [pc, #776]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	220c      	movs	r2, #12
 8005d76:	4013      	ands	r3, r2
 8005d78:	2b08      	cmp	r3, #8
 8005d7a:	d117      	bne.n	8005dac <HAL_RCC_OscConfig+0x68>
 8005d7c:	4bbf      	ldr	r3, [pc, #764]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	23c0      	movs	r3, #192	@ 0xc0
 8005d82:	025b      	lsls	r3, r3, #9
 8005d84:	401a      	ands	r2, r3
 8005d86:	2380      	movs	r3, #128	@ 0x80
 8005d88:	025b      	lsls	r3, r3, #9
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d10e      	bne.n	8005dac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d8e:	4bbb      	ldr	r3, [pc, #748]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	2380      	movs	r3, #128	@ 0x80
 8005d94:	029b      	lsls	r3, r3, #10
 8005d96:	4013      	ands	r3, r2
 8005d98:	d100      	bne.n	8005d9c <HAL_RCC_OscConfig+0x58>
 8005d9a:	e071      	b.n	8005e80 <HAL_RCC_OscConfig+0x13c>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d000      	beq.n	8005da6 <HAL_RCC_OscConfig+0x62>
 8005da4:	e06c      	b.n	8005e80 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	f000 fb4c 	bl	8006444 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d107      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x80>
 8005db4:	4bb1      	ldr	r3, [pc, #708]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	4bb0      	ldr	r3, [pc, #704]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005dba:	2180      	movs	r1, #128	@ 0x80
 8005dbc:	0249      	lsls	r1, r1, #9
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	e02f      	b.n	8005e24 <HAL_RCC_OscConfig+0xe0>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10c      	bne.n	8005de6 <HAL_RCC_OscConfig+0xa2>
 8005dcc:	4bab      	ldr	r3, [pc, #684]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	4baa      	ldr	r3, [pc, #680]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005dd2:	49ab      	ldr	r1, [pc, #684]	@ (8006080 <HAL_RCC_OscConfig+0x33c>)
 8005dd4:	400a      	ands	r2, r1
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	4ba8      	ldr	r3, [pc, #672]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	4ba7      	ldr	r3, [pc, #668]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005dde:	49a9      	ldr	r1, [pc, #676]	@ (8006084 <HAL_RCC_OscConfig+0x340>)
 8005de0:	400a      	ands	r2, r1
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	e01e      	b.n	8005e24 <HAL_RCC_OscConfig+0xe0>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2b05      	cmp	r3, #5
 8005dec:	d10e      	bne.n	8005e0c <HAL_RCC_OscConfig+0xc8>
 8005dee:	4ba3      	ldr	r3, [pc, #652]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	4ba2      	ldr	r3, [pc, #648]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005df4:	2180      	movs	r1, #128	@ 0x80
 8005df6:	02c9      	lsls	r1, r1, #11
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	601a      	str	r2, [r3, #0]
 8005dfc:	4b9f      	ldr	r3, [pc, #636]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	4b9e      	ldr	r3, [pc, #632]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005e02:	2180      	movs	r1, #128	@ 0x80
 8005e04:	0249      	lsls	r1, r1, #9
 8005e06:	430a      	orrs	r2, r1
 8005e08:	601a      	str	r2, [r3, #0]
 8005e0a:	e00b      	b.n	8005e24 <HAL_RCC_OscConfig+0xe0>
 8005e0c:	4b9b      	ldr	r3, [pc, #620]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	4b9a      	ldr	r3, [pc, #616]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005e12:	499b      	ldr	r1, [pc, #620]	@ (8006080 <HAL_RCC_OscConfig+0x33c>)
 8005e14:	400a      	ands	r2, r1
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	4b98      	ldr	r3, [pc, #608]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	4b97      	ldr	r3, [pc, #604]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005e1e:	4999      	ldr	r1, [pc, #612]	@ (8006084 <HAL_RCC_OscConfig+0x340>)
 8005e20:	400a      	ands	r2, r1
 8005e22:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d014      	beq.n	8005e56 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e2c:	f7fd fa0a 	bl	8003244 <HAL_GetTick>
 8005e30:	0003      	movs	r3, r0
 8005e32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e34:	e008      	b.n	8005e48 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e36:	f7fd fa05 	bl	8003244 <HAL_GetTick>
 8005e3a:	0002      	movs	r2, r0
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b64      	cmp	r3, #100	@ 0x64
 8005e42:	d901      	bls.n	8005e48 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e2fd      	b.n	8006444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e48:	4b8c      	ldr	r3, [pc, #560]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	2380      	movs	r3, #128	@ 0x80
 8005e4e:	029b      	lsls	r3, r3, #10
 8005e50:	4013      	ands	r3, r2
 8005e52:	d0f0      	beq.n	8005e36 <HAL_RCC_OscConfig+0xf2>
 8005e54:	e015      	b.n	8005e82 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e56:	f7fd f9f5 	bl	8003244 <HAL_GetTick>
 8005e5a:	0003      	movs	r3, r0
 8005e5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e60:	f7fd f9f0 	bl	8003244 <HAL_GetTick>
 8005e64:	0002      	movs	r2, r0
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b64      	cmp	r3, #100	@ 0x64
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e2e8      	b.n	8006444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e72:	4b82      	ldr	r3, [pc, #520]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	2380      	movs	r3, #128	@ 0x80
 8005e78:	029b      	lsls	r3, r3, #10
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	d1f0      	bne.n	8005e60 <HAL_RCC_OscConfig+0x11c>
 8005e7e:	e000      	b.n	8005e82 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e80:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2202      	movs	r2, #2
 8005e88:	4013      	ands	r3, r2
 8005e8a:	d100      	bne.n	8005e8e <HAL_RCC_OscConfig+0x14a>
 8005e8c:	e06c      	b.n	8005f68 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005e8e:	4b7b      	ldr	r3, [pc, #492]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	220c      	movs	r2, #12
 8005e94:	4013      	ands	r3, r2
 8005e96:	d00e      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005e98:	4b78      	ldr	r3, [pc, #480]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	220c      	movs	r2, #12
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	2b08      	cmp	r3, #8
 8005ea2:	d11f      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x1a0>
 8005ea4:	4b75      	ldr	r3, [pc, #468]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	23c0      	movs	r3, #192	@ 0xc0
 8005eaa:	025b      	lsls	r3, r3, #9
 8005eac:	401a      	ands	r2, r3
 8005eae:	2380      	movs	r3, #128	@ 0x80
 8005eb0:	021b      	lsls	r3, r3, #8
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d116      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eb6:	4b71      	ldr	r3, [pc, #452]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	d005      	beq.n	8005ecc <HAL_RCC_OscConfig+0x188>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d001      	beq.n	8005ecc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e2bb      	b.n	8006444 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ecc:	4b6b      	ldr	r3, [pc, #428]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	22f8      	movs	r2, #248	@ 0xf8
 8005ed2:	4393      	bics	r3, r2
 8005ed4:	0019      	movs	r1, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	00da      	lsls	r2, r3, #3
 8005edc:	4b67      	ldr	r3, [pc, #412]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ee2:	e041      	b.n	8005f68 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d024      	beq.n	8005f36 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005eec:	4b63      	ldr	r3, [pc, #396]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	4b62      	ldr	r3, [pc, #392]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef8:	f7fd f9a4 	bl	8003244 <HAL_GetTick>
 8005efc:	0003      	movs	r3, r0
 8005efe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f00:	e008      	b.n	8005f14 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f02:	f7fd f99f 	bl	8003244 <HAL_GetTick>
 8005f06:	0002      	movs	r2, r0
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d901      	bls.n	8005f14 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e297      	b.n	8006444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f14:	4b59      	ldr	r3, [pc, #356]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2202      	movs	r2, #2
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	d0f1      	beq.n	8005f02 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f1e:	4b57      	ldr	r3, [pc, #348]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	22f8      	movs	r2, #248	@ 0xf8
 8005f24:	4393      	bics	r3, r2
 8005f26:	0019      	movs	r1, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	00da      	lsls	r2, r3, #3
 8005f2e:	4b53      	ldr	r3, [pc, #332]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005f30:	430a      	orrs	r2, r1
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	e018      	b.n	8005f68 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f36:	4b51      	ldr	r3, [pc, #324]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	4b50      	ldr	r3, [pc, #320]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005f3c:	2101      	movs	r1, #1
 8005f3e:	438a      	bics	r2, r1
 8005f40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f42:	f7fd f97f 	bl	8003244 <HAL_GetTick>
 8005f46:	0003      	movs	r3, r0
 8005f48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f4a:	e008      	b.n	8005f5e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f4c:	f7fd f97a 	bl	8003244 <HAL_GetTick>
 8005f50:	0002      	movs	r2, r0
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d901      	bls.n	8005f5e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e272      	b.n	8006444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f5e:	4b47      	ldr	r3, [pc, #284]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2202      	movs	r2, #2
 8005f64:	4013      	ands	r3, r2
 8005f66:	d1f1      	bne.n	8005f4c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2208      	movs	r2, #8
 8005f6e:	4013      	ands	r3, r2
 8005f70:	d036      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d019      	beq.n	8005fae <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f7a:	4b40      	ldr	r3, [pc, #256]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005f7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f7e:	4b3f      	ldr	r3, [pc, #252]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005f80:	2101      	movs	r1, #1
 8005f82:	430a      	orrs	r2, r1
 8005f84:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f86:	f7fd f95d 	bl	8003244 <HAL_GetTick>
 8005f8a:	0003      	movs	r3, r0
 8005f8c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f90:	f7fd f958 	bl	8003244 <HAL_GetTick>
 8005f94:	0002      	movs	r2, r0
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e250      	b.n	8006444 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fa2:	4b36      	ldr	r3, [pc, #216]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	4013      	ands	r3, r2
 8005faa:	d0f1      	beq.n	8005f90 <HAL_RCC_OscConfig+0x24c>
 8005fac:	e018      	b.n	8005fe0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fae:	4b33      	ldr	r3, [pc, #204]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005fb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005fb2:	4b32      	ldr	r3, [pc, #200]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	438a      	bics	r2, r1
 8005fb8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fba:	f7fd f943 	bl	8003244 <HAL_GetTick>
 8005fbe:	0003      	movs	r3, r0
 8005fc0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fc4:	f7fd f93e 	bl	8003244 <HAL_GetTick>
 8005fc8:	0002      	movs	r2, r0
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e236      	b.n	8006444 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fd6:	4b29      	ldr	r3, [pc, #164]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fda:	2202      	movs	r2, #2
 8005fdc:	4013      	ands	r3, r2
 8005fde:	d1f1      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2204      	movs	r2, #4
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	d100      	bne.n	8005fec <HAL_RCC_OscConfig+0x2a8>
 8005fea:	e0b5      	b.n	8006158 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fec:	201f      	movs	r0, #31
 8005fee:	183b      	adds	r3, r7, r0
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ff4:	4b21      	ldr	r3, [pc, #132]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8005ff6:	69da      	ldr	r2, [r3, #28]
 8005ff8:	2380      	movs	r3, #128	@ 0x80
 8005ffa:	055b      	lsls	r3, r3, #21
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	d110      	bne.n	8006022 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006000:	4b1e      	ldr	r3, [pc, #120]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8006002:	69da      	ldr	r2, [r3, #28]
 8006004:	4b1d      	ldr	r3, [pc, #116]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8006006:	2180      	movs	r1, #128	@ 0x80
 8006008:	0549      	lsls	r1, r1, #21
 800600a:	430a      	orrs	r2, r1
 800600c:	61da      	str	r2, [r3, #28]
 800600e:	4b1b      	ldr	r3, [pc, #108]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8006010:	69da      	ldr	r2, [r3, #28]
 8006012:	2380      	movs	r3, #128	@ 0x80
 8006014:	055b      	lsls	r3, r3, #21
 8006016:	4013      	ands	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]
 800601a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800601c:	183b      	adds	r3, r7, r0
 800601e:	2201      	movs	r2, #1
 8006020:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006022:	4b19      	ldr	r3, [pc, #100]	@ (8006088 <HAL_RCC_OscConfig+0x344>)
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	2380      	movs	r3, #128	@ 0x80
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	4013      	ands	r3, r2
 800602c:	d11a      	bne.n	8006064 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800602e:	4b16      	ldr	r3, [pc, #88]	@ (8006088 <HAL_RCC_OscConfig+0x344>)
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	4b15      	ldr	r3, [pc, #84]	@ (8006088 <HAL_RCC_OscConfig+0x344>)
 8006034:	2180      	movs	r1, #128	@ 0x80
 8006036:	0049      	lsls	r1, r1, #1
 8006038:	430a      	orrs	r2, r1
 800603a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800603c:	f7fd f902 	bl	8003244 <HAL_GetTick>
 8006040:	0003      	movs	r3, r0
 8006042:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006044:	e008      	b.n	8006058 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006046:	f7fd f8fd 	bl	8003244 <HAL_GetTick>
 800604a:	0002      	movs	r2, r0
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b64      	cmp	r3, #100	@ 0x64
 8006052:	d901      	bls.n	8006058 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e1f5      	b.n	8006444 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006058:	4b0b      	ldr	r3, [pc, #44]	@ (8006088 <HAL_RCC_OscConfig+0x344>)
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	2380      	movs	r3, #128	@ 0x80
 800605e:	005b      	lsls	r3, r3, #1
 8006060:	4013      	ands	r3, r2
 8006062:	d0f0      	beq.n	8006046 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d10f      	bne.n	800608c <HAL_RCC_OscConfig+0x348>
 800606c:	4b03      	ldr	r3, [pc, #12]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 800606e:	6a1a      	ldr	r2, [r3, #32]
 8006070:	4b02      	ldr	r3, [pc, #8]	@ (800607c <HAL_RCC_OscConfig+0x338>)
 8006072:	2101      	movs	r1, #1
 8006074:	430a      	orrs	r2, r1
 8006076:	621a      	str	r2, [r3, #32]
 8006078:	e036      	b.n	80060e8 <HAL_RCC_OscConfig+0x3a4>
 800607a:	46c0      	nop			@ (mov r8, r8)
 800607c:	40021000 	.word	0x40021000
 8006080:	fffeffff 	.word	0xfffeffff
 8006084:	fffbffff 	.word	0xfffbffff
 8006088:	40007000 	.word	0x40007000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10c      	bne.n	80060ae <HAL_RCC_OscConfig+0x36a>
 8006094:	4bca      	ldr	r3, [pc, #808]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 8006096:	6a1a      	ldr	r2, [r3, #32]
 8006098:	4bc9      	ldr	r3, [pc, #804]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 800609a:	2101      	movs	r1, #1
 800609c:	438a      	bics	r2, r1
 800609e:	621a      	str	r2, [r3, #32]
 80060a0:	4bc7      	ldr	r3, [pc, #796]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80060a2:	6a1a      	ldr	r2, [r3, #32]
 80060a4:	4bc6      	ldr	r3, [pc, #792]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80060a6:	2104      	movs	r1, #4
 80060a8:	438a      	bics	r2, r1
 80060aa:	621a      	str	r2, [r3, #32]
 80060ac:	e01c      	b.n	80060e8 <HAL_RCC_OscConfig+0x3a4>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	2b05      	cmp	r3, #5
 80060b4:	d10c      	bne.n	80060d0 <HAL_RCC_OscConfig+0x38c>
 80060b6:	4bc2      	ldr	r3, [pc, #776]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80060b8:	6a1a      	ldr	r2, [r3, #32]
 80060ba:	4bc1      	ldr	r3, [pc, #772]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80060bc:	2104      	movs	r1, #4
 80060be:	430a      	orrs	r2, r1
 80060c0:	621a      	str	r2, [r3, #32]
 80060c2:	4bbf      	ldr	r3, [pc, #764]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80060c4:	6a1a      	ldr	r2, [r3, #32]
 80060c6:	4bbe      	ldr	r3, [pc, #760]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80060c8:	2101      	movs	r1, #1
 80060ca:	430a      	orrs	r2, r1
 80060cc:	621a      	str	r2, [r3, #32]
 80060ce:	e00b      	b.n	80060e8 <HAL_RCC_OscConfig+0x3a4>
 80060d0:	4bbb      	ldr	r3, [pc, #748]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80060d2:	6a1a      	ldr	r2, [r3, #32]
 80060d4:	4bba      	ldr	r3, [pc, #744]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80060d6:	2101      	movs	r1, #1
 80060d8:	438a      	bics	r2, r1
 80060da:	621a      	str	r2, [r3, #32]
 80060dc:	4bb8      	ldr	r3, [pc, #736]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80060de:	6a1a      	ldr	r2, [r3, #32]
 80060e0:	4bb7      	ldr	r3, [pc, #732]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80060e2:	2104      	movs	r1, #4
 80060e4:	438a      	bics	r2, r1
 80060e6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d014      	beq.n	800611a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060f0:	f7fd f8a8 	bl	8003244 <HAL_GetTick>
 80060f4:	0003      	movs	r3, r0
 80060f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060f8:	e009      	b.n	800610e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060fa:	f7fd f8a3 	bl	8003244 <HAL_GetTick>
 80060fe:	0002      	movs	r2, r0
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	4aaf      	ldr	r2, [pc, #700]	@ (80063c4 <HAL_RCC_OscConfig+0x680>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e19a      	b.n	8006444 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800610e:	4bac      	ldr	r3, [pc, #688]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	2202      	movs	r2, #2
 8006114:	4013      	ands	r3, r2
 8006116:	d0f0      	beq.n	80060fa <HAL_RCC_OscConfig+0x3b6>
 8006118:	e013      	b.n	8006142 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800611a:	f7fd f893 	bl	8003244 <HAL_GetTick>
 800611e:	0003      	movs	r3, r0
 8006120:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006122:	e009      	b.n	8006138 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006124:	f7fd f88e 	bl	8003244 <HAL_GetTick>
 8006128:	0002      	movs	r2, r0
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	4aa5      	ldr	r2, [pc, #660]	@ (80063c4 <HAL_RCC_OscConfig+0x680>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d901      	bls.n	8006138 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e185      	b.n	8006444 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006138:	4ba1      	ldr	r3, [pc, #644]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	2202      	movs	r2, #2
 800613e:	4013      	ands	r3, r2
 8006140:	d1f0      	bne.n	8006124 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006142:	231f      	movs	r3, #31
 8006144:	18fb      	adds	r3, r7, r3
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d105      	bne.n	8006158 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800614c:	4b9c      	ldr	r3, [pc, #624]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 800614e:	69da      	ldr	r2, [r3, #28]
 8006150:	4b9b      	ldr	r3, [pc, #620]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 8006152:	499d      	ldr	r1, [pc, #628]	@ (80063c8 <HAL_RCC_OscConfig+0x684>)
 8006154:	400a      	ands	r2, r1
 8006156:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2210      	movs	r2, #16
 800615e:	4013      	ands	r3, r2
 8006160:	d063      	beq.n	800622a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d12a      	bne.n	80061c0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800616a:	4b95      	ldr	r3, [pc, #596]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 800616c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800616e:	4b94      	ldr	r3, [pc, #592]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 8006170:	2104      	movs	r1, #4
 8006172:	430a      	orrs	r2, r1
 8006174:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8006176:	4b92      	ldr	r3, [pc, #584]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 8006178:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800617a:	4b91      	ldr	r3, [pc, #580]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 800617c:	2101      	movs	r1, #1
 800617e:	430a      	orrs	r2, r1
 8006180:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006182:	f7fd f85f 	bl	8003244 <HAL_GetTick>
 8006186:	0003      	movs	r3, r0
 8006188:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800618a:	e008      	b.n	800619e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800618c:	f7fd f85a 	bl	8003244 <HAL_GetTick>
 8006190:	0002      	movs	r2, r0
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b02      	cmp	r3, #2
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e152      	b.n	8006444 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800619e:	4b88      	ldr	r3, [pc, #544]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80061a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061a2:	2202      	movs	r2, #2
 80061a4:	4013      	ands	r3, r2
 80061a6:	d0f1      	beq.n	800618c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80061a8:	4b85      	ldr	r3, [pc, #532]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80061aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ac:	22f8      	movs	r2, #248	@ 0xf8
 80061ae:	4393      	bics	r3, r2
 80061b0:	0019      	movs	r1, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	00da      	lsls	r2, r3, #3
 80061b8:	4b81      	ldr	r3, [pc, #516]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80061ba:	430a      	orrs	r2, r1
 80061bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80061be:	e034      	b.n	800622a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	3305      	adds	r3, #5
 80061c6:	d111      	bne.n	80061ec <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80061c8:	4b7d      	ldr	r3, [pc, #500]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80061ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061cc:	4b7c      	ldr	r3, [pc, #496]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80061ce:	2104      	movs	r1, #4
 80061d0:	438a      	bics	r2, r1
 80061d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80061d4:	4b7a      	ldr	r3, [pc, #488]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80061d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061d8:	22f8      	movs	r2, #248	@ 0xf8
 80061da:	4393      	bics	r3, r2
 80061dc:	0019      	movs	r1, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	00da      	lsls	r2, r3, #3
 80061e4:	4b76      	ldr	r3, [pc, #472]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80061e6:	430a      	orrs	r2, r1
 80061e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80061ea:	e01e      	b.n	800622a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80061ec:	4b74      	ldr	r3, [pc, #464]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80061ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061f0:	4b73      	ldr	r3, [pc, #460]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80061f2:	2104      	movs	r1, #4
 80061f4:	430a      	orrs	r2, r1
 80061f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80061f8:	4b71      	ldr	r3, [pc, #452]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80061fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061fc:	4b70      	ldr	r3, [pc, #448]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80061fe:	2101      	movs	r1, #1
 8006200:	438a      	bics	r2, r1
 8006202:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006204:	f7fd f81e 	bl	8003244 <HAL_GetTick>
 8006208:	0003      	movs	r3, r0
 800620a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800620c:	e008      	b.n	8006220 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800620e:	f7fd f819 	bl	8003244 <HAL_GetTick>
 8006212:	0002      	movs	r2, r0
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d901      	bls.n	8006220 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e111      	b.n	8006444 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006220:	4b67      	ldr	r3, [pc, #412]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 8006222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006224:	2202      	movs	r2, #2
 8006226:	4013      	ands	r3, r2
 8006228:	d1f1      	bne.n	800620e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2220      	movs	r2, #32
 8006230:	4013      	ands	r3, r2
 8006232:	d05c      	beq.n	80062ee <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006234:	4b62      	ldr	r3, [pc, #392]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	220c      	movs	r2, #12
 800623a:	4013      	ands	r3, r2
 800623c:	2b0c      	cmp	r3, #12
 800623e:	d00e      	beq.n	800625e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006240:	4b5f      	ldr	r3, [pc, #380]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	220c      	movs	r2, #12
 8006246:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006248:	2b08      	cmp	r3, #8
 800624a:	d114      	bne.n	8006276 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800624c:	4b5c      	ldr	r3, [pc, #368]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	23c0      	movs	r3, #192	@ 0xc0
 8006252:	025b      	lsls	r3, r3, #9
 8006254:	401a      	ands	r2, r3
 8006256:	23c0      	movs	r3, #192	@ 0xc0
 8006258:	025b      	lsls	r3, r3, #9
 800625a:	429a      	cmp	r2, r3
 800625c:	d10b      	bne.n	8006276 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800625e:	4b58      	ldr	r3, [pc, #352]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 8006260:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006262:	2380      	movs	r3, #128	@ 0x80
 8006264:	029b      	lsls	r3, r3, #10
 8006266:	4013      	ands	r3, r2
 8006268:	d040      	beq.n	80062ec <HAL_RCC_OscConfig+0x5a8>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d03c      	beq.n	80062ec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e0e6      	b.n	8006444 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d01b      	beq.n	80062b6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800627e:	4b50      	ldr	r3, [pc, #320]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 8006280:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006282:	4b4f      	ldr	r3, [pc, #316]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 8006284:	2180      	movs	r1, #128	@ 0x80
 8006286:	0249      	lsls	r1, r1, #9
 8006288:	430a      	orrs	r2, r1
 800628a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800628c:	f7fc ffda 	bl	8003244 <HAL_GetTick>
 8006290:	0003      	movs	r3, r0
 8006292:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006294:	e008      	b.n	80062a8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006296:	f7fc ffd5 	bl	8003244 <HAL_GetTick>
 800629a:	0002      	movs	r2, r0
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d901      	bls.n	80062a8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e0cd      	b.n	8006444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80062a8:	4b45      	ldr	r3, [pc, #276]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80062aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062ac:	2380      	movs	r3, #128	@ 0x80
 80062ae:	029b      	lsls	r3, r3, #10
 80062b0:	4013      	ands	r3, r2
 80062b2:	d0f0      	beq.n	8006296 <HAL_RCC_OscConfig+0x552>
 80062b4:	e01b      	b.n	80062ee <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80062b6:	4b42      	ldr	r3, [pc, #264]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80062b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062ba:	4b41      	ldr	r3, [pc, #260]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80062bc:	4943      	ldr	r1, [pc, #268]	@ (80063cc <HAL_RCC_OscConfig+0x688>)
 80062be:	400a      	ands	r2, r1
 80062c0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062c2:	f7fc ffbf 	bl	8003244 <HAL_GetTick>
 80062c6:	0003      	movs	r3, r0
 80062c8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80062ca:	e008      	b.n	80062de <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062cc:	f7fc ffba 	bl	8003244 <HAL_GetTick>
 80062d0:	0002      	movs	r2, r0
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d901      	bls.n	80062de <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e0b2      	b.n	8006444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80062de:	4b38      	ldr	r3, [pc, #224]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80062e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062e2:	2380      	movs	r3, #128	@ 0x80
 80062e4:	029b      	lsls	r3, r3, #10
 80062e6:	4013      	ands	r3, r2
 80062e8:	d1f0      	bne.n	80062cc <HAL_RCC_OscConfig+0x588>
 80062ea:	e000      	b.n	80062ee <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80062ec:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d100      	bne.n	80062f8 <HAL_RCC_OscConfig+0x5b4>
 80062f6:	e0a4      	b.n	8006442 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062f8:	4b31      	ldr	r3, [pc, #196]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	220c      	movs	r2, #12
 80062fe:	4013      	ands	r3, r2
 8006300:	2b08      	cmp	r3, #8
 8006302:	d100      	bne.n	8006306 <HAL_RCC_OscConfig+0x5c2>
 8006304:	e078      	b.n	80063f8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800630a:	2b02      	cmp	r3, #2
 800630c:	d14c      	bne.n	80063a8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800630e:	4b2c      	ldr	r3, [pc, #176]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	4b2b      	ldr	r3, [pc, #172]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 8006314:	492e      	ldr	r1, [pc, #184]	@ (80063d0 <HAL_RCC_OscConfig+0x68c>)
 8006316:	400a      	ands	r2, r1
 8006318:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800631a:	f7fc ff93 	bl	8003244 <HAL_GetTick>
 800631e:	0003      	movs	r3, r0
 8006320:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006322:	e008      	b.n	8006336 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006324:	f7fc ff8e 	bl	8003244 <HAL_GetTick>
 8006328:	0002      	movs	r2, r0
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b02      	cmp	r3, #2
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e086      	b.n	8006444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006336:	4b22      	ldr	r3, [pc, #136]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	2380      	movs	r3, #128	@ 0x80
 800633c:	049b      	lsls	r3, r3, #18
 800633e:	4013      	ands	r3, r2
 8006340:	d1f0      	bne.n	8006324 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006342:	4b1f      	ldr	r3, [pc, #124]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 8006344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006346:	220f      	movs	r2, #15
 8006348:	4393      	bics	r3, r2
 800634a:	0019      	movs	r1, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006350:	4b1b      	ldr	r3, [pc, #108]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 8006352:	430a      	orrs	r2, r1
 8006354:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006356:	4b1a      	ldr	r3, [pc, #104]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	4a1e      	ldr	r2, [pc, #120]	@ (80063d4 <HAL_RCC_OscConfig+0x690>)
 800635c:	4013      	ands	r3, r2
 800635e:	0019      	movs	r1, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006368:	431a      	orrs	r2, r3
 800636a:	4b15      	ldr	r3, [pc, #84]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 800636c:	430a      	orrs	r2, r1
 800636e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006370:	4b13      	ldr	r3, [pc, #76]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	4b12      	ldr	r3, [pc, #72]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 8006376:	2180      	movs	r1, #128	@ 0x80
 8006378:	0449      	lsls	r1, r1, #17
 800637a:	430a      	orrs	r2, r1
 800637c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800637e:	f7fc ff61 	bl	8003244 <HAL_GetTick>
 8006382:	0003      	movs	r3, r0
 8006384:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006386:	e008      	b.n	800639a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006388:	f7fc ff5c 	bl	8003244 <HAL_GetTick>
 800638c:	0002      	movs	r2, r0
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e054      	b.n	8006444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800639a:	4b09      	ldr	r3, [pc, #36]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	2380      	movs	r3, #128	@ 0x80
 80063a0:	049b      	lsls	r3, r3, #18
 80063a2:	4013      	ands	r3, r2
 80063a4:	d0f0      	beq.n	8006388 <HAL_RCC_OscConfig+0x644>
 80063a6:	e04c      	b.n	8006442 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063a8:	4b05      	ldr	r3, [pc, #20]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	4b04      	ldr	r3, [pc, #16]	@ (80063c0 <HAL_RCC_OscConfig+0x67c>)
 80063ae:	4908      	ldr	r1, [pc, #32]	@ (80063d0 <HAL_RCC_OscConfig+0x68c>)
 80063b0:	400a      	ands	r2, r1
 80063b2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b4:	f7fc ff46 	bl	8003244 <HAL_GetTick>
 80063b8:	0003      	movs	r3, r0
 80063ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063bc:	e015      	b.n	80063ea <HAL_RCC_OscConfig+0x6a6>
 80063be:	46c0      	nop			@ (mov r8, r8)
 80063c0:	40021000 	.word	0x40021000
 80063c4:	00001388 	.word	0x00001388
 80063c8:	efffffff 	.word	0xefffffff
 80063cc:	fffeffff 	.word	0xfffeffff
 80063d0:	feffffff 	.word	0xfeffffff
 80063d4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063d8:	f7fc ff34 	bl	8003244 <HAL_GetTick>
 80063dc:	0002      	movs	r2, r0
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d901      	bls.n	80063ea <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e02c      	b.n	8006444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063ea:	4b18      	ldr	r3, [pc, #96]	@ (800644c <HAL_RCC_OscConfig+0x708>)
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	2380      	movs	r3, #128	@ 0x80
 80063f0:	049b      	lsls	r3, r3, #18
 80063f2:	4013      	ands	r3, r2
 80063f4:	d1f0      	bne.n	80063d8 <HAL_RCC_OscConfig+0x694>
 80063f6:	e024      	b.n	8006442 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d101      	bne.n	8006404 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e01f      	b.n	8006444 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006404:	4b11      	ldr	r3, [pc, #68]	@ (800644c <HAL_RCC_OscConfig+0x708>)
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800640a:	4b10      	ldr	r3, [pc, #64]	@ (800644c <HAL_RCC_OscConfig+0x708>)
 800640c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	23c0      	movs	r3, #192	@ 0xc0
 8006414:	025b      	lsls	r3, r3, #9
 8006416:	401a      	ands	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641c:	429a      	cmp	r2, r3
 800641e:	d10e      	bne.n	800643e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	220f      	movs	r2, #15
 8006424:	401a      	ands	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800642a:	429a      	cmp	r2, r3
 800642c:	d107      	bne.n	800643e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	23f0      	movs	r3, #240	@ 0xf0
 8006432:	039b      	lsls	r3, r3, #14
 8006434:	401a      	ands	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800643a:	429a      	cmp	r2, r3
 800643c:	d001      	beq.n	8006442 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e000      	b.n	8006444 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	0018      	movs	r0, r3
 8006446:	46bd      	mov	sp, r7
 8006448:	b008      	add	sp, #32
 800644a:	bd80      	pop	{r7, pc}
 800644c:	40021000 	.word	0x40021000

08006450 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e0bf      	b.n	80065e4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006464:	4b61      	ldr	r3, [pc, #388]	@ (80065ec <HAL_RCC_ClockConfig+0x19c>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2201      	movs	r2, #1
 800646a:	4013      	ands	r3, r2
 800646c:	683a      	ldr	r2, [r7, #0]
 800646e:	429a      	cmp	r2, r3
 8006470:	d911      	bls.n	8006496 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006472:	4b5e      	ldr	r3, [pc, #376]	@ (80065ec <HAL_RCC_ClockConfig+0x19c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2201      	movs	r2, #1
 8006478:	4393      	bics	r3, r2
 800647a:	0019      	movs	r1, r3
 800647c:	4b5b      	ldr	r3, [pc, #364]	@ (80065ec <HAL_RCC_ClockConfig+0x19c>)
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006484:	4b59      	ldr	r3, [pc, #356]	@ (80065ec <HAL_RCC_ClockConfig+0x19c>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2201      	movs	r2, #1
 800648a:	4013      	ands	r3, r2
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	429a      	cmp	r2, r3
 8006490:	d001      	beq.n	8006496 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e0a6      	b.n	80065e4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2202      	movs	r2, #2
 800649c:	4013      	ands	r3, r2
 800649e:	d015      	beq.n	80064cc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2204      	movs	r2, #4
 80064a6:	4013      	ands	r3, r2
 80064a8:	d006      	beq.n	80064b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80064aa:	4b51      	ldr	r3, [pc, #324]	@ (80065f0 <HAL_RCC_ClockConfig+0x1a0>)
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	4b50      	ldr	r3, [pc, #320]	@ (80065f0 <HAL_RCC_ClockConfig+0x1a0>)
 80064b0:	21e0      	movs	r1, #224	@ 0xe0
 80064b2:	00c9      	lsls	r1, r1, #3
 80064b4:	430a      	orrs	r2, r1
 80064b6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064b8:	4b4d      	ldr	r3, [pc, #308]	@ (80065f0 <HAL_RCC_ClockConfig+0x1a0>)
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	22f0      	movs	r2, #240	@ 0xf0
 80064be:	4393      	bics	r3, r2
 80064c0:	0019      	movs	r1, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689a      	ldr	r2, [r3, #8]
 80064c6:	4b4a      	ldr	r3, [pc, #296]	@ (80065f0 <HAL_RCC_ClockConfig+0x1a0>)
 80064c8:	430a      	orrs	r2, r1
 80064ca:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2201      	movs	r2, #1
 80064d2:	4013      	ands	r3, r2
 80064d4:	d04c      	beq.n	8006570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d107      	bne.n	80064ee <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064de:	4b44      	ldr	r3, [pc, #272]	@ (80065f0 <HAL_RCC_ClockConfig+0x1a0>)
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	2380      	movs	r3, #128	@ 0x80
 80064e4:	029b      	lsls	r3, r3, #10
 80064e6:	4013      	ands	r3, r2
 80064e8:	d120      	bne.n	800652c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e07a      	b.n	80065e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d107      	bne.n	8006506 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064f6:	4b3e      	ldr	r3, [pc, #248]	@ (80065f0 <HAL_RCC_ClockConfig+0x1a0>)
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	2380      	movs	r3, #128	@ 0x80
 80064fc:	049b      	lsls	r3, r3, #18
 80064fe:	4013      	ands	r3, r2
 8006500:	d114      	bne.n	800652c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e06e      	b.n	80065e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	2b03      	cmp	r3, #3
 800650c:	d107      	bne.n	800651e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800650e:	4b38      	ldr	r3, [pc, #224]	@ (80065f0 <HAL_RCC_ClockConfig+0x1a0>)
 8006510:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006512:	2380      	movs	r3, #128	@ 0x80
 8006514:	029b      	lsls	r3, r3, #10
 8006516:	4013      	ands	r3, r2
 8006518:	d108      	bne.n	800652c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e062      	b.n	80065e4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800651e:	4b34      	ldr	r3, [pc, #208]	@ (80065f0 <HAL_RCC_ClockConfig+0x1a0>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2202      	movs	r2, #2
 8006524:	4013      	ands	r3, r2
 8006526:	d101      	bne.n	800652c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e05b      	b.n	80065e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800652c:	4b30      	ldr	r3, [pc, #192]	@ (80065f0 <HAL_RCC_ClockConfig+0x1a0>)
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	2203      	movs	r2, #3
 8006532:	4393      	bics	r3, r2
 8006534:	0019      	movs	r1, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	4b2d      	ldr	r3, [pc, #180]	@ (80065f0 <HAL_RCC_ClockConfig+0x1a0>)
 800653c:	430a      	orrs	r2, r1
 800653e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006540:	f7fc fe80 	bl	8003244 <HAL_GetTick>
 8006544:	0003      	movs	r3, r0
 8006546:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006548:	e009      	b.n	800655e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800654a:	f7fc fe7b 	bl	8003244 <HAL_GetTick>
 800654e:	0002      	movs	r2, r0
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	4a27      	ldr	r2, [pc, #156]	@ (80065f4 <HAL_RCC_ClockConfig+0x1a4>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d901      	bls.n	800655e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e042      	b.n	80065e4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800655e:	4b24      	ldr	r3, [pc, #144]	@ (80065f0 <HAL_RCC_ClockConfig+0x1a0>)
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	220c      	movs	r2, #12
 8006564:	401a      	ands	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	429a      	cmp	r2, r3
 800656e:	d1ec      	bne.n	800654a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006570:	4b1e      	ldr	r3, [pc, #120]	@ (80065ec <HAL_RCC_ClockConfig+0x19c>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2201      	movs	r2, #1
 8006576:	4013      	ands	r3, r2
 8006578:	683a      	ldr	r2, [r7, #0]
 800657a:	429a      	cmp	r2, r3
 800657c:	d211      	bcs.n	80065a2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800657e:	4b1b      	ldr	r3, [pc, #108]	@ (80065ec <HAL_RCC_ClockConfig+0x19c>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2201      	movs	r2, #1
 8006584:	4393      	bics	r3, r2
 8006586:	0019      	movs	r1, r3
 8006588:	4b18      	ldr	r3, [pc, #96]	@ (80065ec <HAL_RCC_ClockConfig+0x19c>)
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	430a      	orrs	r2, r1
 800658e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006590:	4b16      	ldr	r3, [pc, #88]	@ (80065ec <HAL_RCC_ClockConfig+0x19c>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2201      	movs	r2, #1
 8006596:	4013      	ands	r3, r2
 8006598:	683a      	ldr	r2, [r7, #0]
 800659a:	429a      	cmp	r2, r3
 800659c:	d001      	beq.n	80065a2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e020      	b.n	80065e4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2204      	movs	r2, #4
 80065a8:	4013      	ands	r3, r2
 80065aa:	d009      	beq.n	80065c0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80065ac:	4b10      	ldr	r3, [pc, #64]	@ (80065f0 <HAL_RCC_ClockConfig+0x1a0>)
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	4a11      	ldr	r2, [pc, #68]	@ (80065f8 <HAL_RCC_ClockConfig+0x1a8>)
 80065b2:	4013      	ands	r3, r2
 80065b4:	0019      	movs	r1, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68da      	ldr	r2, [r3, #12]
 80065ba:	4b0d      	ldr	r3, [pc, #52]	@ (80065f0 <HAL_RCC_ClockConfig+0x1a0>)
 80065bc:	430a      	orrs	r2, r1
 80065be:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80065c0:	f000 f820 	bl	8006604 <HAL_RCC_GetSysClockFreq>
 80065c4:	0001      	movs	r1, r0
 80065c6:	4b0a      	ldr	r3, [pc, #40]	@ (80065f0 <HAL_RCC_ClockConfig+0x1a0>)
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	091b      	lsrs	r3, r3, #4
 80065cc:	220f      	movs	r2, #15
 80065ce:	4013      	ands	r3, r2
 80065d0:	4a0a      	ldr	r2, [pc, #40]	@ (80065fc <HAL_RCC_ClockConfig+0x1ac>)
 80065d2:	5cd3      	ldrb	r3, [r2, r3]
 80065d4:	000a      	movs	r2, r1
 80065d6:	40da      	lsrs	r2, r3
 80065d8:	4b09      	ldr	r3, [pc, #36]	@ (8006600 <HAL_RCC_ClockConfig+0x1b0>)
 80065da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80065dc:	2003      	movs	r0, #3
 80065de:	f7fc fdeb 	bl	80031b8 <HAL_InitTick>
  
  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	0018      	movs	r0, r3
 80065e6:	46bd      	mov	sp, r7
 80065e8:	b004      	add	sp, #16
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	40022000 	.word	0x40022000
 80065f0:	40021000 	.word	0x40021000
 80065f4:	00001388 	.word	0x00001388
 80065f8:	fffff8ff 	.word	0xfffff8ff
 80065fc:	0800ff3c 	.word	0x0800ff3c
 8006600:	20000018 	.word	0x20000018

08006604 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800660a:	2300      	movs	r3, #0
 800660c:	60fb      	str	r3, [r7, #12]
 800660e:	2300      	movs	r3, #0
 8006610:	60bb      	str	r3, [r7, #8]
 8006612:	2300      	movs	r3, #0
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	2300      	movs	r3, #0
 8006618:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800661a:	2300      	movs	r3, #0
 800661c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800661e:	4b2d      	ldr	r3, [pc, #180]	@ (80066d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	220c      	movs	r2, #12
 8006628:	4013      	ands	r3, r2
 800662a:	2b0c      	cmp	r3, #12
 800662c:	d046      	beq.n	80066bc <HAL_RCC_GetSysClockFreq+0xb8>
 800662e:	d848      	bhi.n	80066c2 <HAL_RCC_GetSysClockFreq+0xbe>
 8006630:	2b04      	cmp	r3, #4
 8006632:	d002      	beq.n	800663a <HAL_RCC_GetSysClockFreq+0x36>
 8006634:	2b08      	cmp	r3, #8
 8006636:	d003      	beq.n	8006640 <HAL_RCC_GetSysClockFreq+0x3c>
 8006638:	e043      	b.n	80066c2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800663a:	4b27      	ldr	r3, [pc, #156]	@ (80066d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800663c:	613b      	str	r3, [r7, #16]
      break;
 800663e:	e043      	b.n	80066c8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	0c9b      	lsrs	r3, r3, #18
 8006644:	220f      	movs	r2, #15
 8006646:	4013      	ands	r3, r2
 8006648:	4a24      	ldr	r2, [pc, #144]	@ (80066dc <HAL_RCC_GetSysClockFreq+0xd8>)
 800664a:	5cd3      	ldrb	r3, [r2, r3]
 800664c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800664e:	4b21      	ldr	r3, [pc, #132]	@ (80066d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006652:	220f      	movs	r2, #15
 8006654:	4013      	ands	r3, r2
 8006656:	4a22      	ldr	r2, [pc, #136]	@ (80066e0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8006658:	5cd3      	ldrb	r3, [r2, r3]
 800665a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	23c0      	movs	r3, #192	@ 0xc0
 8006660:	025b      	lsls	r3, r3, #9
 8006662:	401a      	ands	r2, r3
 8006664:	2380      	movs	r3, #128	@ 0x80
 8006666:	025b      	lsls	r3, r3, #9
 8006668:	429a      	cmp	r2, r3
 800666a:	d109      	bne.n	8006680 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800666c:	68b9      	ldr	r1, [r7, #8]
 800666e:	481a      	ldr	r0, [pc, #104]	@ (80066d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006670:	f7f9 fd66 	bl	8000140 <__udivsi3>
 8006674:	0003      	movs	r3, r0
 8006676:	001a      	movs	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4353      	muls	r3, r2
 800667c:	617b      	str	r3, [r7, #20]
 800667e:	e01a      	b.n	80066b6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	23c0      	movs	r3, #192	@ 0xc0
 8006684:	025b      	lsls	r3, r3, #9
 8006686:	401a      	ands	r2, r3
 8006688:	23c0      	movs	r3, #192	@ 0xc0
 800668a:	025b      	lsls	r3, r3, #9
 800668c:	429a      	cmp	r2, r3
 800668e:	d109      	bne.n	80066a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006690:	68b9      	ldr	r1, [r7, #8]
 8006692:	4814      	ldr	r0, [pc, #80]	@ (80066e4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8006694:	f7f9 fd54 	bl	8000140 <__udivsi3>
 8006698:	0003      	movs	r3, r0
 800669a:	001a      	movs	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4353      	muls	r3, r2
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	e008      	b.n	80066b6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80066a4:	68b9      	ldr	r1, [r7, #8]
 80066a6:	480c      	ldr	r0, [pc, #48]	@ (80066d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80066a8:	f7f9 fd4a 	bl	8000140 <__udivsi3>
 80066ac:	0003      	movs	r3, r0
 80066ae:	001a      	movs	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4353      	muls	r3, r2
 80066b4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	613b      	str	r3, [r7, #16]
      break;
 80066ba:	e005      	b.n	80066c8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80066bc:	4b09      	ldr	r3, [pc, #36]	@ (80066e4 <HAL_RCC_GetSysClockFreq+0xe0>)
 80066be:	613b      	str	r3, [r7, #16]
      break;
 80066c0:	e002      	b.n	80066c8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80066c2:	4b05      	ldr	r3, [pc, #20]	@ (80066d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80066c4:	613b      	str	r3, [r7, #16]
      break;
 80066c6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80066c8:	693b      	ldr	r3, [r7, #16]
}
 80066ca:	0018      	movs	r0, r3
 80066cc:	46bd      	mov	sp, r7
 80066ce:	b006      	add	sp, #24
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	46c0      	nop			@ (mov r8, r8)
 80066d4:	40021000 	.word	0x40021000
 80066d8:	007a1200 	.word	0x007a1200
 80066dc:	0800ff54 	.word	0x0800ff54
 80066e0:	0800ff64 	.word	0x0800ff64
 80066e4:	02dc6c00 	.word	0x02dc6c00

080066e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066ec:	4b02      	ldr	r3, [pc, #8]	@ (80066f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80066ee:	681b      	ldr	r3, [r3, #0]
}
 80066f0:	0018      	movs	r0, r3
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	46c0      	nop			@ (mov r8, r8)
 80066f8:	20000018 	.word	0x20000018

080066fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006700:	f7ff fff2 	bl	80066e8 <HAL_RCC_GetHCLKFreq>
 8006704:	0001      	movs	r1, r0
 8006706:	4b06      	ldr	r3, [pc, #24]	@ (8006720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	0a1b      	lsrs	r3, r3, #8
 800670c:	2207      	movs	r2, #7
 800670e:	4013      	ands	r3, r2
 8006710:	4a04      	ldr	r2, [pc, #16]	@ (8006724 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006712:	5cd3      	ldrb	r3, [r2, r3]
 8006714:	40d9      	lsrs	r1, r3
 8006716:	000b      	movs	r3, r1
}    
 8006718:	0018      	movs	r0, r3
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	46c0      	nop			@ (mov r8, r8)
 8006720:	40021000 	.word	0x40021000
 8006724:	0800ff4c 	.word	0x0800ff4c

08006728 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	2380      	movs	r3, #128	@ 0x80
 800673e:	025b      	lsls	r3, r3, #9
 8006740:	4013      	ands	r3, r2
 8006742:	d100      	bne.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006744:	e08e      	b.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006746:	2017      	movs	r0, #23
 8006748:	183b      	adds	r3, r7, r0
 800674a:	2200      	movs	r2, #0
 800674c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800674e:	4b6e      	ldr	r3, [pc, #440]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006750:	69da      	ldr	r2, [r3, #28]
 8006752:	2380      	movs	r3, #128	@ 0x80
 8006754:	055b      	lsls	r3, r3, #21
 8006756:	4013      	ands	r3, r2
 8006758:	d110      	bne.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800675a:	4b6b      	ldr	r3, [pc, #428]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800675c:	69da      	ldr	r2, [r3, #28]
 800675e:	4b6a      	ldr	r3, [pc, #424]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006760:	2180      	movs	r1, #128	@ 0x80
 8006762:	0549      	lsls	r1, r1, #21
 8006764:	430a      	orrs	r2, r1
 8006766:	61da      	str	r2, [r3, #28]
 8006768:	4b67      	ldr	r3, [pc, #412]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800676a:	69da      	ldr	r2, [r3, #28]
 800676c:	2380      	movs	r3, #128	@ 0x80
 800676e:	055b      	lsls	r3, r3, #21
 8006770:	4013      	ands	r3, r2
 8006772:	60bb      	str	r3, [r7, #8]
 8006774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006776:	183b      	adds	r3, r7, r0
 8006778:	2201      	movs	r2, #1
 800677a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800677c:	4b63      	ldr	r3, [pc, #396]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	2380      	movs	r3, #128	@ 0x80
 8006782:	005b      	lsls	r3, r3, #1
 8006784:	4013      	ands	r3, r2
 8006786:	d11a      	bne.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006788:	4b60      	ldr	r3, [pc, #384]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	4b5f      	ldr	r3, [pc, #380]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800678e:	2180      	movs	r1, #128	@ 0x80
 8006790:	0049      	lsls	r1, r1, #1
 8006792:	430a      	orrs	r2, r1
 8006794:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006796:	f7fc fd55 	bl	8003244 <HAL_GetTick>
 800679a:	0003      	movs	r3, r0
 800679c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800679e:	e008      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067a0:	f7fc fd50 	bl	8003244 <HAL_GetTick>
 80067a4:	0002      	movs	r2, r0
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	2b64      	cmp	r3, #100	@ 0x64
 80067ac:	d901      	bls.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e0a6      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067b2:	4b56      	ldr	r3, [pc, #344]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	2380      	movs	r3, #128	@ 0x80
 80067b8:	005b      	lsls	r3, r3, #1
 80067ba:	4013      	ands	r3, r2
 80067bc:	d0f0      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80067be:	4b52      	ldr	r3, [pc, #328]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80067c0:	6a1a      	ldr	r2, [r3, #32]
 80067c2:	23c0      	movs	r3, #192	@ 0xc0
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4013      	ands	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d034      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	23c0      	movs	r3, #192	@ 0xc0
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4013      	ands	r3, r2
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d02c      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067e0:	4b49      	ldr	r3, [pc, #292]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	4a4a      	ldr	r2, [pc, #296]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80067e6:	4013      	ands	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067ea:	4b47      	ldr	r3, [pc, #284]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80067ec:	6a1a      	ldr	r2, [r3, #32]
 80067ee:	4b46      	ldr	r3, [pc, #280]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80067f0:	2180      	movs	r1, #128	@ 0x80
 80067f2:	0249      	lsls	r1, r1, #9
 80067f4:	430a      	orrs	r2, r1
 80067f6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067f8:	4b43      	ldr	r3, [pc, #268]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80067fa:	6a1a      	ldr	r2, [r3, #32]
 80067fc:	4b42      	ldr	r3, [pc, #264]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80067fe:	4945      	ldr	r1, [pc, #276]	@ (8006914 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006800:	400a      	ands	r2, r1
 8006802:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006804:	4b40      	ldr	r3, [pc, #256]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2201      	movs	r2, #1
 800680e:	4013      	ands	r3, r2
 8006810:	d013      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006812:	f7fc fd17 	bl	8003244 <HAL_GetTick>
 8006816:	0003      	movs	r3, r0
 8006818:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800681a:	e009      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800681c:	f7fc fd12 	bl	8003244 <HAL_GetTick>
 8006820:	0002      	movs	r2, r0
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	4a3c      	ldr	r2, [pc, #240]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d901      	bls.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e067      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006830:	4b35      	ldr	r3, [pc, #212]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	2202      	movs	r2, #2
 8006836:	4013      	ands	r3, r2
 8006838:	d0f0      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800683a:	4b33      	ldr	r3, [pc, #204]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	4a34      	ldr	r2, [pc, #208]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006840:	4013      	ands	r3, r2
 8006842:	0019      	movs	r1, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685a      	ldr	r2, [r3, #4]
 8006848:	4b2f      	ldr	r3, [pc, #188]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800684a:	430a      	orrs	r2, r1
 800684c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800684e:	2317      	movs	r3, #23
 8006850:	18fb      	adds	r3, r7, r3
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d105      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006858:	4b2b      	ldr	r3, [pc, #172]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800685a:	69da      	ldr	r2, [r3, #28]
 800685c:	4b2a      	ldr	r3, [pc, #168]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800685e:	492f      	ldr	r1, [pc, #188]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006860:	400a      	ands	r2, r1
 8006862:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2201      	movs	r2, #1
 800686a:	4013      	ands	r3, r2
 800686c:	d009      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800686e:	4b26      	ldr	r3, [pc, #152]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006872:	2203      	movs	r2, #3
 8006874:	4393      	bics	r3, r2
 8006876:	0019      	movs	r1, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	4b22      	ldr	r3, [pc, #136]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800687e:	430a      	orrs	r2, r1
 8006880:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2202      	movs	r2, #2
 8006888:	4013      	ands	r3, r2
 800688a:	d009      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800688c:	4b1e      	ldr	r3, [pc, #120]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800688e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006890:	4a23      	ldr	r2, [pc, #140]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006892:	4013      	ands	r3, r2
 8006894:	0019      	movs	r1, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68da      	ldr	r2, [r3, #12]
 800689a:	4b1b      	ldr	r3, [pc, #108]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800689c:	430a      	orrs	r2, r1
 800689e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2220      	movs	r2, #32
 80068a6:	4013      	ands	r3, r2
 80068a8:	d009      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068aa:	4b17      	ldr	r3, [pc, #92]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80068ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ae:	2210      	movs	r2, #16
 80068b0:	4393      	bics	r3, r2
 80068b2:	0019      	movs	r1, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	691a      	ldr	r2, [r3, #16]
 80068b8:	4b13      	ldr	r3, [pc, #76]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80068ba:	430a      	orrs	r2, r1
 80068bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	2380      	movs	r3, #128	@ 0x80
 80068c4:	029b      	lsls	r3, r3, #10
 80068c6:	4013      	ands	r3, r2
 80068c8:	d009      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068ca:	4b0f      	ldr	r3, [pc, #60]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80068cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ce:	2280      	movs	r2, #128	@ 0x80
 80068d0:	4393      	bics	r3, r2
 80068d2:	0019      	movs	r1, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	699a      	ldr	r2, [r3, #24]
 80068d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80068da:	430a      	orrs	r2, r1
 80068dc:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	2380      	movs	r3, #128	@ 0x80
 80068e4:	00db      	lsls	r3, r3, #3
 80068e6:	4013      	ands	r3, r2
 80068e8:	d009      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80068ea:	4b07      	ldr	r3, [pc, #28]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80068ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ee:	2240      	movs	r2, #64	@ 0x40
 80068f0:	4393      	bics	r3, r2
 80068f2:	0019      	movs	r1, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	695a      	ldr	r2, [r3, #20]
 80068f8:	4b03      	ldr	r3, [pc, #12]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80068fa:	430a      	orrs	r2, r1
 80068fc:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	0018      	movs	r0, r3
 8006902:	46bd      	mov	sp, r7
 8006904:	b006      	add	sp, #24
 8006906:	bd80      	pop	{r7, pc}
 8006908:	40021000 	.word	0x40021000
 800690c:	40007000 	.word	0x40007000
 8006910:	fffffcff 	.word	0xfffffcff
 8006914:	fffeffff 	.word	0xfffeffff
 8006918:	00001388 	.word	0x00001388
 800691c:	efffffff 	.word	0xefffffff
 8006920:	fffcffff 	.word	0xfffcffff

08006924 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e0a8      	b.n	8006a88 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693a:	2b00      	cmp	r3, #0
 800693c:	d109      	bne.n	8006952 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	2382      	movs	r3, #130	@ 0x82
 8006944:	005b      	lsls	r3, r3, #1
 8006946:	429a      	cmp	r2, r3
 8006948:	d009      	beq.n	800695e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	61da      	str	r2, [r3, #28]
 8006950:	e005      	b.n	800695e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	225d      	movs	r2, #93	@ 0x5d
 8006968:	5c9b      	ldrb	r3, [r3, r2]
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	d107      	bne.n	8006980 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	225c      	movs	r2, #92	@ 0x5c
 8006974:	2100      	movs	r1, #0
 8006976:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	0018      	movs	r0, r3
 800697c:	f7fc f974 	bl	8002c68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	225d      	movs	r2, #93	@ 0x5d
 8006984:	2102      	movs	r1, #2
 8006986:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2140      	movs	r1, #64	@ 0x40
 8006994:	438a      	bics	r2, r1
 8006996:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68da      	ldr	r2, [r3, #12]
 800699c:	23e0      	movs	r3, #224	@ 0xe0
 800699e:	00db      	lsls	r3, r3, #3
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d902      	bls.n	80069aa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80069a4:	2300      	movs	r3, #0
 80069a6:	60fb      	str	r3, [r7, #12]
 80069a8:	e002      	b.n	80069b0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80069aa:	2380      	movs	r3, #128	@ 0x80
 80069ac:	015b      	lsls	r3, r3, #5
 80069ae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68da      	ldr	r2, [r3, #12]
 80069b4:	23f0      	movs	r3, #240	@ 0xf0
 80069b6:	011b      	lsls	r3, r3, #4
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d008      	beq.n	80069ce <HAL_SPI_Init+0xaa>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68da      	ldr	r2, [r3, #12]
 80069c0:	23e0      	movs	r3, #224	@ 0xe0
 80069c2:	00db      	lsls	r3, r3, #3
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d002      	beq.n	80069ce <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	2382      	movs	r3, #130	@ 0x82
 80069d4:	005b      	lsls	r3, r3, #1
 80069d6:	401a      	ands	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6899      	ldr	r1, [r3, #8]
 80069dc:	2384      	movs	r3, #132	@ 0x84
 80069de:	021b      	lsls	r3, r3, #8
 80069e0:	400b      	ands	r3, r1
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	2102      	movs	r1, #2
 80069ea:	400b      	ands	r3, r1
 80069ec:	431a      	orrs	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	2101      	movs	r1, #1
 80069f4:	400b      	ands	r3, r1
 80069f6:	431a      	orrs	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6999      	ldr	r1, [r3, #24]
 80069fc:	2380      	movs	r3, #128	@ 0x80
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	400b      	ands	r3, r1
 8006a02:	431a      	orrs	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	2138      	movs	r1, #56	@ 0x38
 8006a0a:	400b      	ands	r3, r1
 8006a0c:	431a      	orrs	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	2180      	movs	r1, #128	@ 0x80
 8006a14:	400b      	ands	r3, r1
 8006a16:	431a      	orrs	r2, r3
 8006a18:	0011      	movs	r1, r2
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a1e:	2380      	movs	r3, #128	@ 0x80
 8006a20:	019b      	lsls	r3, r3, #6
 8006a22:	401a      	ands	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	0c1b      	lsrs	r3, r3, #16
 8006a32:	2204      	movs	r2, #4
 8006a34:	401a      	ands	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3a:	2110      	movs	r1, #16
 8006a3c:	400b      	ands	r3, r1
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a44:	2108      	movs	r1, #8
 8006a46:	400b      	ands	r3, r1
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68d9      	ldr	r1, [r3, #12]
 8006a4e:	23f0      	movs	r3, #240	@ 0xf0
 8006a50:	011b      	lsls	r3, r3, #4
 8006a52:	400b      	ands	r3, r1
 8006a54:	431a      	orrs	r2, r3
 8006a56:	0011      	movs	r1, r2
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	2380      	movs	r3, #128	@ 0x80
 8006a5c:	015b      	lsls	r3, r3, #5
 8006a5e:	401a      	ands	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	430a      	orrs	r2, r1
 8006a66:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	69da      	ldr	r2, [r3, #28]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4907      	ldr	r1, [pc, #28]	@ (8006a90 <HAL_SPI_Init+0x16c>)
 8006a74:	400a      	ands	r2, r1
 8006a76:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	225d      	movs	r2, #93	@ 0x5d
 8006a82:	2101      	movs	r1, #1
 8006a84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	0018      	movs	r0, r3
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	b004      	add	sp, #16
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	fffff7ff 	.word	0xfffff7ff

08006a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e042      	b.n	8006b2c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	223d      	movs	r2, #61	@ 0x3d
 8006aaa:	5c9b      	ldrb	r3, [r3, r2]
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d107      	bne.n	8006ac2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	223c      	movs	r2, #60	@ 0x3c
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	0018      	movs	r0, r3
 8006abe:	f7fc f975 	bl	8002dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	223d      	movs	r2, #61	@ 0x3d
 8006ac6:	2102      	movs	r1, #2
 8006ac8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	0019      	movs	r1, r3
 8006ad4:	0010      	movs	r0, r2
 8006ad6:	f000 fa17 	bl	8006f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2246      	movs	r2, #70	@ 0x46
 8006ade:	2101      	movs	r1, #1
 8006ae0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	223e      	movs	r2, #62	@ 0x3e
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	5499      	strb	r1, [r3, r2]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	223f      	movs	r2, #63	@ 0x3f
 8006aee:	2101      	movs	r1, #1
 8006af0:	5499      	strb	r1, [r3, r2]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2240      	movs	r2, #64	@ 0x40
 8006af6:	2101      	movs	r1, #1
 8006af8:	5499      	strb	r1, [r3, r2]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2241      	movs	r2, #65	@ 0x41
 8006afe:	2101      	movs	r1, #1
 8006b00:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2242      	movs	r2, #66	@ 0x42
 8006b06:	2101      	movs	r1, #1
 8006b08:	5499      	strb	r1, [r3, r2]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2243      	movs	r2, #67	@ 0x43
 8006b0e:	2101      	movs	r1, #1
 8006b10:	5499      	strb	r1, [r3, r2]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2244      	movs	r2, #68	@ 0x44
 8006b16:	2101      	movs	r1, #1
 8006b18:	5499      	strb	r1, [r3, r2]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2245      	movs	r2, #69	@ 0x45
 8006b1e:	2101      	movs	r1, #1
 8006b20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	223d      	movs	r2, #61	@ 0x3d
 8006b26:	2101      	movs	r1, #1
 8006b28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	b002      	add	sp, #8
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	4013      	ands	r3, r2
 8006b52:	d021      	beq.n	8006b98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2202      	movs	r2, #2
 8006b58:	4013      	ands	r3, r2
 8006b5a:	d01d      	beq.n	8006b98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2203      	movs	r2, #3
 8006b62:	4252      	negs	r2, r2
 8006b64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	2203      	movs	r2, #3
 8006b74:	4013      	ands	r3, r2
 8006b76:	d004      	beq.n	8006b82 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	0018      	movs	r0, r3
 8006b7c:	f000 f9ac 	bl	8006ed8 <HAL_TIM_IC_CaptureCallback>
 8006b80:	e007      	b.n	8006b92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	0018      	movs	r0, r3
 8006b86:	f000 f99f 	bl	8006ec8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	0018      	movs	r0, r3
 8006b8e:	f000 f9ab 	bl	8006ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2204      	movs	r2, #4
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	d022      	beq.n	8006be6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2204      	movs	r2, #4
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	d01e      	beq.n	8006be6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2205      	movs	r2, #5
 8006bae:	4252      	negs	r2, r2
 8006bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	699a      	ldr	r2, [r3, #24]
 8006bbe:	23c0      	movs	r3, #192	@ 0xc0
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	d004      	beq.n	8006bd0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	0018      	movs	r0, r3
 8006bca:	f000 f985 	bl	8006ed8 <HAL_TIM_IC_CaptureCallback>
 8006bce:	e007      	b.n	8006be0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	f000 f978 	bl	8006ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	0018      	movs	r0, r3
 8006bdc:	f000 f984 	bl	8006ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2208      	movs	r2, #8
 8006bea:	4013      	ands	r3, r2
 8006bec:	d021      	beq.n	8006c32 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2208      	movs	r2, #8
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	d01d      	beq.n	8006c32 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2209      	movs	r2, #9
 8006bfc:	4252      	negs	r2, r2
 8006bfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2204      	movs	r2, #4
 8006c04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	69db      	ldr	r3, [r3, #28]
 8006c0c:	2203      	movs	r2, #3
 8006c0e:	4013      	ands	r3, r2
 8006c10:	d004      	beq.n	8006c1c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	0018      	movs	r0, r3
 8006c16:	f000 f95f 	bl	8006ed8 <HAL_TIM_IC_CaptureCallback>
 8006c1a:	e007      	b.n	8006c2c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	0018      	movs	r0, r3
 8006c20:	f000 f952 	bl	8006ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	0018      	movs	r0, r3
 8006c28:	f000 f95e 	bl	8006ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2210      	movs	r2, #16
 8006c36:	4013      	ands	r3, r2
 8006c38:	d022      	beq.n	8006c80 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2210      	movs	r2, #16
 8006c3e:	4013      	ands	r3, r2
 8006c40:	d01e      	beq.n	8006c80 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2211      	movs	r2, #17
 8006c48:	4252      	negs	r2, r2
 8006c4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2208      	movs	r2, #8
 8006c50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	69da      	ldr	r2, [r3, #28]
 8006c58:	23c0      	movs	r3, #192	@ 0xc0
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	d004      	beq.n	8006c6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	0018      	movs	r0, r3
 8006c64:	f000 f938 	bl	8006ed8 <HAL_TIM_IC_CaptureCallback>
 8006c68:	e007      	b.n	8006c7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	0018      	movs	r0, r3
 8006c6e:	f000 f92b 	bl	8006ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	0018      	movs	r0, r3
 8006c76:	f000 f937 	bl	8006ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	2201      	movs	r2, #1
 8006c84:	4013      	ands	r3, r2
 8006c86:	d00c      	beq.n	8006ca2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	d008      	beq.n	8006ca2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2202      	movs	r2, #2
 8006c96:	4252      	negs	r2, r2
 8006c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	0018      	movs	r0, r3
 8006c9e:	f000 f90b 	bl	8006eb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	2280      	movs	r2, #128	@ 0x80
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	d00c      	beq.n	8006cc4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2280      	movs	r2, #128	@ 0x80
 8006cae:	4013      	ands	r3, r2
 8006cb0:	d008      	beq.n	8006cc4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2281      	movs	r2, #129	@ 0x81
 8006cb8:	4252      	negs	r2, r2
 8006cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	0018      	movs	r0, r3
 8006cc0:	f000 fab0 	bl	8007224 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2240      	movs	r2, #64	@ 0x40
 8006cc8:	4013      	ands	r3, r2
 8006cca:	d00c      	beq.n	8006ce6 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2240      	movs	r2, #64	@ 0x40
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	d008      	beq.n	8006ce6 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2241      	movs	r2, #65	@ 0x41
 8006cda:	4252      	negs	r2, r2
 8006cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	0018      	movs	r0, r3
 8006ce2:	f000 f909 	bl	8006ef8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	4013      	ands	r3, r2
 8006cec:	d00c      	beq.n	8006d08 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	d008      	beq.n	8006d08 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2221      	movs	r2, #33	@ 0x21
 8006cfc:	4252      	negs	r2, r2
 8006cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	0018      	movs	r0, r3
 8006d04:	f000 fa86 	bl	8007214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d08:	46c0      	nop			@ (mov r8, r8)
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	b004      	add	sp, #16
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d1a:	230f      	movs	r3, #15
 8006d1c:	18fb      	adds	r3, r7, r3
 8006d1e:	2200      	movs	r2, #0
 8006d20:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	223c      	movs	r2, #60	@ 0x3c
 8006d26:	5c9b      	ldrb	r3, [r3, r2]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d101      	bne.n	8006d30 <HAL_TIM_ConfigClockSource+0x20>
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	e0bc      	b.n	8006eaa <HAL_TIM_ConfigClockSource+0x19a>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	223c      	movs	r2, #60	@ 0x3c
 8006d34:	2101      	movs	r1, #1
 8006d36:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	223d      	movs	r2, #61	@ 0x3d
 8006d3c:	2102      	movs	r1, #2
 8006d3e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2277      	movs	r2, #119	@ 0x77
 8006d4c:	4393      	bics	r3, r2
 8006d4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	4a58      	ldr	r2, [pc, #352]	@ (8006eb4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006d54:	4013      	ands	r3, r2
 8006d56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2280      	movs	r2, #128	@ 0x80
 8006d66:	0192      	lsls	r2, r2, #6
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d040      	beq.n	8006dee <HAL_TIM_ConfigClockSource+0xde>
 8006d6c:	2280      	movs	r2, #128	@ 0x80
 8006d6e:	0192      	lsls	r2, r2, #6
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d900      	bls.n	8006d76 <HAL_TIM_ConfigClockSource+0x66>
 8006d74:	e088      	b.n	8006e88 <HAL_TIM_ConfigClockSource+0x178>
 8006d76:	2280      	movs	r2, #128	@ 0x80
 8006d78:	0152      	lsls	r2, r2, #5
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d100      	bne.n	8006d80 <HAL_TIM_ConfigClockSource+0x70>
 8006d7e:	e088      	b.n	8006e92 <HAL_TIM_ConfigClockSource+0x182>
 8006d80:	2280      	movs	r2, #128	@ 0x80
 8006d82:	0152      	lsls	r2, r2, #5
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d900      	bls.n	8006d8a <HAL_TIM_ConfigClockSource+0x7a>
 8006d88:	e07e      	b.n	8006e88 <HAL_TIM_ConfigClockSource+0x178>
 8006d8a:	2b70      	cmp	r3, #112	@ 0x70
 8006d8c:	d018      	beq.n	8006dc0 <HAL_TIM_ConfigClockSource+0xb0>
 8006d8e:	d900      	bls.n	8006d92 <HAL_TIM_ConfigClockSource+0x82>
 8006d90:	e07a      	b.n	8006e88 <HAL_TIM_ConfigClockSource+0x178>
 8006d92:	2b60      	cmp	r3, #96	@ 0x60
 8006d94:	d04f      	beq.n	8006e36 <HAL_TIM_ConfigClockSource+0x126>
 8006d96:	d900      	bls.n	8006d9a <HAL_TIM_ConfigClockSource+0x8a>
 8006d98:	e076      	b.n	8006e88 <HAL_TIM_ConfigClockSource+0x178>
 8006d9a:	2b50      	cmp	r3, #80	@ 0x50
 8006d9c:	d03b      	beq.n	8006e16 <HAL_TIM_ConfigClockSource+0x106>
 8006d9e:	d900      	bls.n	8006da2 <HAL_TIM_ConfigClockSource+0x92>
 8006da0:	e072      	b.n	8006e88 <HAL_TIM_ConfigClockSource+0x178>
 8006da2:	2b40      	cmp	r3, #64	@ 0x40
 8006da4:	d057      	beq.n	8006e56 <HAL_TIM_ConfigClockSource+0x146>
 8006da6:	d900      	bls.n	8006daa <HAL_TIM_ConfigClockSource+0x9a>
 8006da8:	e06e      	b.n	8006e88 <HAL_TIM_ConfigClockSource+0x178>
 8006daa:	2b30      	cmp	r3, #48	@ 0x30
 8006dac:	d063      	beq.n	8006e76 <HAL_TIM_ConfigClockSource+0x166>
 8006dae:	d86b      	bhi.n	8006e88 <HAL_TIM_ConfigClockSource+0x178>
 8006db0:	2b20      	cmp	r3, #32
 8006db2:	d060      	beq.n	8006e76 <HAL_TIM_ConfigClockSource+0x166>
 8006db4:	d868      	bhi.n	8006e88 <HAL_TIM_ConfigClockSource+0x178>
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d05d      	beq.n	8006e76 <HAL_TIM_ConfigClockSource+0x166>
 8006dba:	2b10      	cmp	r3, #16
 8006dbc:	d05b      	beq.n	8006e76 <HAL_TIM_ConfigClockSource+0x166>
 8006dbe:	e063      	b.n	8006e88 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006dd0:	f000 f9a2 	bl	8007118 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	2277      	movs	r2, #119	@ 0x77
 8006de0:	4313      	orrs	r3, r2
 8006de2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	609a      	str	r2, [r3, #8]
      break;
 8006dec:	e052      	b.n	8006e94 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006dfe:	f000 f98b 	bl	8007118 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2180      	movs	r1, #128	@ 0x80
 8006e0e:	01c9      	lsls	r1, r1, #7
 8006e10:	430a      	orrs	r2, r1
 8006e12:	609a      	str	r2, [r3, #8]
      break;
 8006e14:	e03e      	b.n	8006e94 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e22:	001a      	movs	r2, r3
 8006e24:	f000 f8fe 	bl	8007024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2150      	movs	r1, #80	@ 0x50
 8006e2e:	0018      	movs	r0, r3
 8006e30:	f000 f958 	bl	80070e4 <TIM_ITRx_SetConfig>
      break;
 8006e34:	e02e      	b.n	8006e94 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e42:	001a      	movs	r2, r3
 8006e44:	f000 f91c 	bl	8007080 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2160      	movs	r1, #96	@ 0x60
 8006e4e:	0018      	movs	r0, r3
 8006e50:	f000 f948 	bl	80070e4 <TIM_ITRx_SetConfig>
      break;
 8006e54:	e01e      	b.n	8006e94 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e62:	001a      	movs	r2, r3
 8006e64:	f000 f8de 	bl	8007024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2140      	movs	r1, #64	@ 0x40
 8006e6e:	0018      	movs	r0, r3
 8006e70:	f000 f938 	bl	80070e4 <TIM_ITRx_SetConfig>
      break;
 8006e74:	e00e      	b.n	8006e94 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	0019      	movs	r1, r3
 8006e80:	0010      	movs	r0, r2
 8006e82:	f000 f92f 	bl	80070e4 <TIM_ITRx_SetConfig>
      break;
 8006e86:	e005      	b.n	8006e94 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006e88:	230f      	movs	r3, #15
 8006e8a:	18fb      	adds	r3, r7, r3
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	701a      	strb	r2, [r3, #0]
      break;
 8006e90:	e000      	b.n	8006e94 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006e92:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	223d      	movs	r2, #61	@ 0x3d
 8006e98:	2101      	movs	r1, #1
 8006e9a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	223c      	movs	r2, #60	@ 0x3c
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	5499      	strb	r1, [r3, r2]

  return status;
 8006ea4:	230f      	movs	r3, #15
 8006ea6:	18fb      	adds	r3, r7, r3
 8006ea8:	781b      	ldrb	r3, [r3, #0]
}
 8006eaa:	0018      	movs	r0, r3
 8006eac:	46bd      	mov	sp, r7
 8006eae:	b004      	add	sp, #16
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	46c0      	nop			@ (mov r8, r8)
 8006eb4:	ffff00ff 	.word	0xffff00ff

08006eb8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ec0:	46c0      	nop			@ (mov r8, r8)
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	b002      	add	sp, #8
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ed0:	46c0      	nop			@ (mov r8, r8)
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	b002      	add	sp, #8
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ee0:	46c0      	nop			@ (mov r8, r8)
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	b002      	add	sp, #8
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ef0:	46c0      	nop			@ (mov r8, r8)
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	b002      	add	sp, #8
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f00:	46c0      	nop			@ (mov r8, r8)
 8006f02:	46bd      	mov	sp, r7
 8006f04:	b002      	add	sp, #8
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a3b      	ldr	r2, [pc, #236]	@ (8007008 <TIM_Base_SetConfig+0x100>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d008      	beq.n	8006f32 <TIM_Base_SetConfig+0x2a>
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	2380      	movs	r3, #128	@ 0x80
 8006f24:	05db      	lsls	r3, r3, #23
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d003      	beq.n	8006f32 <TIM_Base_SetConfig+0x2a>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a37      	ldr	r2, [pc, #220]	@ (800700c <TIM_Base_SetConfig+0x104>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d108      	bne.n	8006f44 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2270      	movs	r2, #112	@ 0x70
 8006f36:	4393      	bics	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a30      	ldr	r2, [pc, #192]	@ (8007008 <TIM_Base_SetConfig+0x100>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d018      	beq.n	8006f7e <TIM_Base_SetConfig+0x76>
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	2380      	movs	r3, #128	@ 0x80
 8006f50:	05db      	lsls	r3, r3, #23
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d013      	beq.n	8006f7e <TIM_Base_SetConfig+0x76>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a2c      	ldr	r2, [pc, #176]	@ (800700c <TIM_Base_SetConfig+0x104>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d00f      	beq.n	8006f7e <TIM_Base_SetConfig+0x76>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a2b      	ldr	r2, [pc, #172]	@ (8007010 <TIM_Base_SetConfig+0x108>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d00b      	beq.n	8006f7e <TIM_Base_SetConfig+0x76>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a2a      	ldr	r2, [pc, #168]	@ (8007014 <TIM_Base_SetConfig+0x10c>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d007      	beq.n	8006f7e <TIM_Base_SetConfig+0x76>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a29      	ldr	r2, [pc, #164]	@ (8007018 <TIM_Base_SetConfig+0x110>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d003      	beq.n	8006f7e <TIM_Base_SetConfig+0x76>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a28      	ldr	r2, [pc, #160]	@ (800701c <TIM_Base_SetConfig+0x114>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d108      	bne.n	8006f90 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	4a27      	ldr	r2, [pc, #156]	@ (8007020 <TIM_Base_SetConfig+0x118>)
 8006f82:	4013      	ands	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2280      	movs	r2, #128	@ 0x80
 8006f94:	4393      	bics	r3, r2
 8006f96:	001a      	movs	r2, r3
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	689a      	ldr	r2, [r3, #8]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a13      	ldr	r2, [pc, #76]	@ (8007008 <TIM_Base_SetConfig+0x100>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d00b      	beq.n	8006fd6 <TIM_Base_SetConfig+0xce>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a14      	ldr	r2, [pc, #80]	@ (8007014 <TIM_Base_SetConfig+0x10c>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d007      	beq.n	8006fd6 <TIM_Base_SetConfig+0xce>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a13      	ldr	r2, [pc, #76]	@ (8007018 <TIM_Base_SetConfig+0x110>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d003      	beq.n	8006fd6 <TIM_Base_SetConfig+0xce>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a12      	ldr	r2, [pc, #72]	@ (800701c <TIM_Base_SetConfig+0x114>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d103      	bne.n	8006fde <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	691a      	ldr	r2, [r3, #16]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	4013      	ands	r3, r2
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d106      	bne.n	8006ffe <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	4393      	bics	r3, r2
 8006ff8:	001a      	movs	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	611a      	str	r2, [r3, #16]
  }
}
 8006ffe:	46c0      	nop			@ (mov r8, r8)
 8007000:	46bd      	mov	sp, r7
 8007002:	b004      	add	sp, #16
 8007004:	bd80      	pop	{r7, pc}
 8007006:	46c0      	nop			@ (mov r8, r8)
 8007008:	40012c00 	.word	0x40012c00
 800700c:	40000400 	.word	0x40000400
 8007010:	40002000 	.word	0x40002000
 8007014:	40014000 	.word	0x40014000
 8007018:	40014400 	.word	0x40014400
 800701c:	40014800 	.word	0x40014800
 8007020:	fffffcff 	.word	0xfffffcff

08007024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6a1b      	ldr	r3, [r3, #32]
 8007034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	2201      	movs	r2, #1
 800703c:	4393      	bics	r3, r2
 800703e:	001a      	movs	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	22f0      	movs	r2, #240	@ 0xf0
 800704e:	4393      	bics	r3, r2
 8007050:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	011b      	lsls	r3, r3, #4
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	4313      	orrs	r3, r2
 800705a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	220a      	movs	r2, #10
 8007060:	4393      	bics	r3, r2
 8007062:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	4313      	orrs	r3, r2
 800706a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	621a      	str	r2, [r3, #32]
}
 8007078:	46c0      	nop			@ (mov r8, r8)
 800707a:	46bd      	mov	sp, r7
 800707c:	b006      	add	sp, #24
 800707e:	bd80      	pop	{r7, pc}

08007080 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	2210      	movs	r2, #16
 8007098:	4393      	bics	r3, r2
 800709a:	001a      	movs	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	4a0d      	ldr	r2, [pc, #52]	@ (80070e0 <TIM_TI2_ConfigInputStage+0x60>)
 80070aa:	4013      	ands	r3, r2
 80070ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	031b      	lsls	r3, r3, #12
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	22a0      	movs	r2, #160	@ 0xa0
 80070bc:	4393      	bics	r3, r2
 80070be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	011b      	lsls	r3, r3, #4
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	621a      	str	r2, [r3, #32]
}
 80070d6:	46c0      	nop			@ (mov r8, r8)
 80070d8:	46bd      	mov	sp, r7
 80070da:	b006      	add	sp, #24
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	46c0      	nop			@ (mov r8, r8)
 80070e0:	ffff0fff 	.word	0xffff0fff

080070e4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2270      	movs	r2, #112	@ 0x70
 80070f8:	4393      	bics	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	4313      	orrs	r3, r2
 8007102:	2207      	movs	r2, #7
 8007104:	4313      	orrs	r3, r2
 8007106:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	609a      	str	r2, [r3, #8]
}
 800710e:	46c0      	nop			@ (mov r8, r8)
 8007110:	46bd      	mov	sp, r7
 8007112:	b004      	add	sp, #16
 8007114:	bd80      	pop	{r7, pc}
	...

08007118 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
 8007124:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	4a09      	ldr	r2, [pc, #36]	@ (8007154 <TIM_ETR_SetConfig+0x3c>)
 8007130:	4013      	ands	r3, r2
 8007132:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	021a      	lsls	r2, r3, #8
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	431a      	orrs	r2, r3
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	4313      	orrs	r3, r2
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	4313      	orrs	r3, r2
 8007144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	609a      	str	r2, [r3, #8]
}
 800714c:	46c0      	nop			@ (mov r8, r8)
 800714e:	46bd      	mov	sp, r7
 8007150:	b006      	add	sp, #24
 8007152:	bd80      	pop	{r7, pc}
 8007154:	ffff00ff 	.word	0xffff00ff

08007158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	223c      	movs	r2, #60	@ 0x3c
 8007166:	5c9b      	ldrb	r3, [r3, r2]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d101      	bne.n	8007170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800716c:	2302      	movs	r3, #2
 800716e:	e047      	b.n	8007200 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	223c      	movs	r2, #60	@ 0x3c
 8007174:	2101      	movs	r1, #1
 8007176:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	223d      	movs	r2, #61	@ 0x3d
 800717c:	2102      	movs	r1, #2
 800717e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2270      	movs	r2, #112	@ 0x70
 8007194:	4393      	bics	r3, r2
 8007196:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	4313      	orrs	r3, r2
 80071a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a16      	ldr	r2, [pc, #88]	@ (8007208 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d00f      	beq.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	2380      	movs	r3, #128	@ 0x80
 80071ba:	05db      	lsls	r3, r3, #23
 80071bc:	429a      	cmp	r2, r3
 80071be:	d009      	beq.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a11      	ldr	r2, [pc, #68]	@ (800720c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d004      	beq.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a10      	ldr	r2, [pc, #64]	@ (8007210 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d10c      	bne.n	80071ee <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	2280      	movs	r2, #128	@ 0x80
 80071d8:	4393      	bics	r3, r2
 80071da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	223d      	movs	r2, #61	@ 0x3d
 80071f2:	2101      	movs	r1, #1
 80071f4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	223c      	movs	r2, #60	@ 0x3c
 80071fa:	2100      	movs	r1, #0
 80071fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	0018      	movs	r0, r3
 8007202:	46bd      	mov	sp, r7
 8007204:	b004      	add	sp, #16
 8007206:	bd80      	pop	{r7, pc}
 8007208:	40012c00 	.word	0x40012c00
 800720c:	40000400 	.word	0x40000400
 8007210:	40014000 	.word	0x40014000

08007214 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800721c:	46c0      	nop			@ (mov r8, r8)
 800721e:	46bd      	mov	sp, r7
 8007220:	b002      	add	sp, #8
 8007222:	bd80      	pop	{r7, pc}

08007224 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800722c:	46c0      	nop			@ (mov r8, r8)
 800722e:	46bd      	mov	sp, r7
 8007230:	b002      	add	sp, #8
 8007232:	bd80      	pop	{r7, pc}

08007234 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e053      	b.n	80072ee <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800724a:	2b00      	cmp	r3, #0
 800724c:	d116      	bne.n	800727c <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2278      	movs	r2, #120	@ 0x78
 8007252:	2100      	movs	r1, #0
 8007254:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	0018      	movs	r0, r3
 800725a:	f000 fbeb 	bl	8007a34 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	22b0      	movs	r2, #176	@ 0xb0
 8007262:	589b      	ldr	r3, [r3, r2]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d103      	bne.n	8007270 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	21b0      	movs	r1, #176	@ 0xb0
 800726c:	4a22      	ldr	r2, [pc, #136]	@ (80072f8 <HAL_UART_Init+0xc4>)
 800726e:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	22b0      	movs	r2, #176	@ 0xb0
 8007274:	589b      	ldr	r3, [r3, r2]
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	0010      	movs	r0, r2
 800727a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2224      	movs	r2, #36	@ 0x24
 8007280:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2101      	movs	r1, #1
 800728e:	438a      	bics	r2, r1
 8007290:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007296:	2b00      	cmp	r3, #0
 8007298:	d003      	beq.n	80072a2 <HAL_UART_Init+0x6e>
  {
    UART_AdvFeatureConfig(huart);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	0018      	movs	r0, r3
 800729e:	f000 fd95 	bl	8007dcc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	0018      	movs	r0, r3
 80072a6:	f000 fc09 	bl	8007abc <UART_SetConfig>
 80072aa:	0003      	movs	r3, r0
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d101      	bne.n	80072b4 <HAL_UART_Init+0x80>
  {
    return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e01c      	b.n	80072ee <HAL_UART_Init+0xba>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	490f      	ldr	r1, [pc, #60]	@ (80072fc <HAL_UART_Init+0xc8>)
 80072c0:	400a      	ands	r2, r1
 80072c2:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689a      	ldr	r2, [r3, #8]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	212a      	movs	r1, #42	@ 0x2a
 80072d0:	438a      	bics	r2, r1
 80072d2:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2101      	movs	r1, #1
 80072e0:	430a      	orrs	r2, r1
 80072e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	0018      	movs	r0, r3
 80072e8:	f000 fe24 	bl	8007f34 <UART_CheckIdleState>
 80072ec:	0003      	movs	r3, r0
}
 80072ee:	0018      	movs	r0, r3
 80072f0:	46bd      	mov	sp, r7
 80072f2:	b002      	add	sp, #8
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	46c0      	nop			@ (mov r8, r8)
 80072f8:	08002df9 	.word	0x08002df9
 80072fc:	ffffb7ff 	.word	0xffffb7ff

08007300 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b088      	sub	sp, #32
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	1dbb      	adds	r3, r7, #6
 800730c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007312:	2b20      	cmp	r3, #32
 8007314:	d15b      	bne.n	80073ce <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d003      	beq.n	8007324 <HAL_UART_Transmit_IT+0x24>
 800731c:	1dbb      	adds	r3, r7, #6
 800731e:	881b      	ldrh	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e053      	b.n	80073d0 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	689a      	ldr	r2, [r3, #8]
 800732c:	2380      	movs	r3, #128	@ 0x80
 800732e:	015b      	lsls	r3, r3, #5
 8007330:	429a      	cmp	r2, r3
 8007332:	d109      	bne.n	8007348 <HAL_UART_Transmit_IT+0x48>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d105      	bne.n	8007348 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	2201      	movs	r2, #1
 8007340:	4013      	ands	r3, r2
 8007342:	d001      	beq.n	8007348 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e043      	b.n	80073d0 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	1dba      	adds	r2, r7, #6
 8007352:	2150      	movs	r1, #80	@ 0x50
 8007354:	8812      	ldrh	r2, [r2, #0]
 8007356:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	1dba      	adds	r2, r7, #6
 800735c:	2152      	movs	r1, #82	@ 0x52
 800735e:	8812      	ldrh	r2, [r2, #0]
 8007360:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2284      	movs	r2, #132	@ 0x84
 800736c:	2100      	movs	r1, #0
 800736e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2221      	movs	r2, #33	@ 0x21
 8007374:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	689a      	ldr	r2, [r3, #8]
 800737a:	2380      	movs	r3, #128	@ 0x80
 800737c:	015b      	lsls	r3, r3, #5
 800737e:	429a      	cmp	r2, r3
 8007380:	d107      	bne.n	8007392 <HAL_UART_Transmit_IT+0x92>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d103      	bne.n	8007392 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	4a12      	ldr	r2, [pc, #72]	@ (80073d8 <HAL_UART_Transmit_IT+0xd8>)
 800738e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007390:	e002      	b.n	8007398 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4a11      	ldr	r2, [pc, #68]	@ (80073dc <HAL_UART_Transmit_IT+0xdc>)
 8007396:	66da      	str	r2, [r3, #108]	@ 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007398:	f3ef 8310 	mrs	r3, PRIMASK
 800739c:	613b      	str	r3, [r7, #16]
  return(result);
 800739e:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80073a0:	61fb      	str	r3, [r7, #28]
 80073a2:	2301      	movs	r3, #1
 80073a4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f383 8810 	msr	PRIMASK, r3
}
 80073ac:	46c0      	nop			@ (mov r8, r8)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2180      	movs	r1, #128	@ 0x80
 80073ba:	430a      	orrs	r2, r1
 80073bc:	601a      	str	r2, [r3, #0]
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	f383 8810 	msr	PRIMASK, r3
}
 80073c8:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	e000      	b.n	80073d0 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80073ce:	2302      	movs	r3, #2
  }
}
 80073d0:	0018      	movs	r0, r3
 80073d2:	46bd      	mov	sp, r7
 80073d4:	b008      	add	sp, #32
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	08008699 	.word	0x08008699
 80073dc:	080085e7 	.word	0x080085e7

080073e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073e0:	b590      	push	{r4, r7, lr}
 80073e2:	b0ab      	sub	sp, #172	@ 0xac
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	22a4      	movs	r2, #164	@ 0xa4
 80073f0:	18b9      	adds	r1, r7, r2
 80073f2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	20a0      	movs	r0, #160	@ 0xa0
 80073fc:	1839      	adds	r1, r7, r0
 80073fe:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	219c      	movs	r1, #156	@ 0x9c
 8007408:	1879      	adds	r1, r7, r1
 800740a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800740c:	0011      	movs	r1, r2
 800740e:	18bb      	adds	r3, r7, r2
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a9c      	ldr	r2, [pc, #624]	@ (8007684 <HAL_UART_IRQHandler+0x2a4>)
 8007414:	4013      	ands	r3, r2
 8007416:	2298      	movs	r2, #152	@ 0x98
 8007418:	18bc      	adds	r4, r7, r2
 800741a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800741c:	18bb      	adds	r3, r7, r2
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d114      	bne.n	800744e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007424:	187b      	adds	r3, r7, r1
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2220      	movs	r2, #32
 800742a:	4013      	ands	r3, r2
 800742c:	d00f      	beq.n	800744e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800742e:	183b      	adds	r3, r7, r0
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2220      	movs	r2, #32
 8007434:	4013      	ands	r3, r2
 8007436:	d00a      	beq.n	800744e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800743c:	2b00      	cmp	r3, #0
 800743e:	d100      	bne.n	8007442 <HAL_UART_IRQHandler+0x62>
 8007440:	e2a8      	b.n	8007994 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	0010      	movs	r0, r2
 800744a:	4798      	blx	r3
      }
      return;
 800744c:	e2a2      	b.n	8007994 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800744e:	2398      	movs	r3, #152	@ 0x98
 8007450:	18fb      	adds	r3, r7, r3
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d100      	bne.n	800745a <HAL_UART_IRQHandler+0x7a>
 8007458:	e11a      	b.n	8007690 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800745a:	239c      	movs	r3, #156	@ 0x9c
 800745c:	18fb      	adds	r3, r7, r3
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2201      	movs	r2, #1
 8007462:	4013      	ands	r3, r2
 8007464:	d106      	bne.n	8007474 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007466:	23a0      	movs	r3, #160	@ 0xa0
 8007468:	18fb      	adds	r3, r7, r3
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a86      	ldr	r2, [pc, #536]	@ (8007688 <HAL_UART_IRQHandler+0x2a8>)
 800746e:	4013      	ands	r3, r2
 8007470:	d100      	bne.n	8007474 <HAL_UART_IRQHandler+0x94>
 8007472:	e10d      	b.n	8007690 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007474:	23a4      	movs	r3, #164	@ 0xa4
 8007476:	18fb      	adds	r3, r7, r3
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2201      	movs	r2, #1
 800747c:	4013      	ands	r3, r2
 800747e:	d012      	beq.n	80074a6 <HAL_UART_IRQHandler+0xc6>
 8007480:	23a0      	movs	r3, #160	@ 0xa0
 8007482:	18fb      	adds	r3, r7, r3
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	2380      	movs	r3, #128	@ 0x80
 8007488:	005b      	lsls	r3, r3, #1
 800748a:	4013      	ands	r3, r2
 800748c:	d00b      	beq.n	80074a6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2201      	movs	r2, #1
 8007494:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2284      	movs	r2, #132	@ 0x84
 800749a:	589b      	ldr	r3, [r3, r2]
 800749c:	2201      	movs	r2, #1
 800749e:	431a      	orrs	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2184      	movs	r1, #132	@ 0x84
 80074a4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074a6:	23a4      	movs	r3, #164	@ 0xa4
 80074a8:	18fb      	adds	r3, r7, r3
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2202      	movs	r2, #2
 80074ae:	4013      	ands	r3, r2
 80074b0:	d011      	beq.n	80074d6 <HAL_UART_IRQHandler+0xf6>
 80074b2:	239c      	movs	r3, #156	@ 0x9c
 80074b4:	18fb      	adds	r3, r7, r3
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2201      	movs	r2, #1
 80074ba:	4013      	ands	r3, r2
 80074bc:	d00b      	beq.n	80074d6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2202      	movs	r2, #2
 80074c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2284      	movs	r2, #132	@ 0x84
 80074ca:	589b      	ldr	r3, [r3, r2]
 80074cc:	2204      	movs	r2, #4
 80074ce:	431a      	orrs	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2184      	movs	r1, #132	@ 0x84
 80074d4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074d6:	23a4      	movs	r3, #164	@ 0xa4
 80074d8:	18fb      	adds	r3, r7, r3
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2204      	movs	r2, #4
 80074de:	4013      	ands	r3, r2
 80074e0:	d011      	beq.n	8007506 <HAL_UART_IRQHandler+0x126>
 80074e2:	239c      	movs	r3, #156	@ 0x9c
 80074e4:	18fb      	adds	r3, r7, r3
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2201      	movs	r2, #1
 80074ea:	4013      	ands	r3, r2
 80074ec:	d00b      	beq.n	8007506 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2204      	movs	r2, #4
 80074f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2284      	movs	r2, #132	@ 0x84
 80074fa:	589b      	ldr	r3, [r3, r2]
 80074fc:	2202      	movs	r2, #2
 80074fe:	431a      	orrs	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2184      	movs	r1, #132	@ 0x84
 8007504:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007506:	23a4      	movs	r3, #164	@ 0xa4
 8007508:	18fb      	adds	r3, r7, r3
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2208      	movs	r2, #8
 800750e:	4013      	ands	r3, r2
 8007510:	d017      	beq.n	8007542 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007512:	23a0      	movs	r3, #160	@ 0xa0
 8007514:	18fb      	adds	r3, r7, r3
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2220      	movs	r2, #32
 800751a:	4013      	ands	r3, r2
 800751c:	d105      	bne.n	800752a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800751e:	239c      	movs	r3, #156	@ 0x9c
 8007520:	18fb      	adds	r3, r7, r3
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2201      	movs	r2, #1
 8007526:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007528:	d00b      	beq.n	8007542 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2208      	movs	r2, #8
 8007530:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2284      	movs	r2, #132	@ 0x84
 8007536:	589b      	ldr	r3, [r3, r2]
 8007538:	2208      	movs	r2, #8
 800753a:	431a      	orrs	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2184      	movs	r1, #132	@ 0x84
 8007540:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007542:	23a4      	movs	r3, #164	@ 0xa4
 8007544:	18fb      	adds	r3, r7, r3
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	2380      	movs	r3, #128	@ 0x80
 800754a:	011b      	lsls	r3, r3, #4
 800754c:	4013      	ands	r3, r2
 800754e:	d013      	beq.n	8007578 <HAL_UART_IRQHandler+0x198>
 8007550:	23a0      	movs	r3, #160	@ 0xa0
 8007552:	18fb      	adds	r3, r7, r3
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	2380      	movs	r3, #128	@ 0x80
 8007558:	04db      	lsls	r3, r3, #19
 800755a:	4013      	ands	r3, r2
 800755c:	d00c      	beq.n	8007578 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2280      	movs	r2, #128	@ 0x80
 8007564:	0112      	lsls	r2, r2, #4
 8007566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2284      	movs	r2, #132	@ 0x84
 800756c:	589b      	ldr	r3, [r3, r2]
 800756e:	2220      	movs	r2, #32
 8007570:	431a      	orrs	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2184      	movs	r1, #132	@ 0x84
 8007576:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2284      	movs	r2, #132	@ 0x84
 800757c:	589b      	ldr	r3, [r3, r2]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d100      	bne.n	8007584 <HAL_UART_IRQHandler+0x1a4>
 8007582:	e209      	b.n	8007998 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007584:	23a4      	movs	r3, #164	@ 0xa4
 8007586:	18fb      	adds	r3, r7, r3
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2220      	movs	r2, #32
 800758c:	4013      	ands	r3, r2
 800758e:	d00e      	beq.n	80075ae <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007590:	23a0      	movs	r3, #160	@ 0xa0
 8007592:	18fb      	adds	r3, r7, r3
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2220      	movs	r2, #32
 8007598:	4013      	ands	r3, r2
 800759a:	d008      	beq.n	80075ae <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d004      	beq.n	80075ae <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	0010      	movs	r0, r2
 80075ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2284      	movs	r2, #132	@ 0x84
 80075b2:	589b      	ldr	r3, [r3, r2]
 80075b4:	2194      	movs	r1, #148	@ 0x94
 80075b6:	187a      	adds	r2, r7, r1
 80075b8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	2240      	movs	r2, #64	@ 0x40
 80075c2:	4013      	ands	r3, r2
 80075c4:	2b40      	cmp	r3, #64	@ 0x40
 80075c6:	d004      	beq.n	80075d2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80075c8:	187b      	adds	r3, r7, r1
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2228      	movs	r2, #40	@ 0x28
 80075ce:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075d0:	d04b      	beq.n	800766a <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	0018      	movs	r0, r3
 80075d6:	f000 fe89 	bl	80082ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	2240      	movs	r2, #64	@ 0x40
 80075e2:	4013      	ands	r3, r2
 80075e4:	2b40      	cmp	r3, #64	@ 0x40
 80075e6:	d139      	bne.n	800765c <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075e8:	f3ef 8310 	mrs	r3, PRIMASK
 80075ec:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80075ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075f0:	2090      	movs	r0, #144	@ 0x90
 80075f2:	183a      	adds	r2, r7, r0
 80075f4:	6013      	str	r3, [r2, #0]
 80075f6:	2301      	movs	r3, #1
 80075f8:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075fc:	f383 8810 	msr	PRIMASK, r3
}
 8007600:	46c0      	nop			@ (mov r8, r8)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689a      	ldr	r2, [r3, #8]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2140      	movs	r1, #64	@ 0x40
 800760e:	438a      	bics	r2, r1
 8007610:	609a      	str	r2, [r3, #8]
 8007612:	183b      	adds	r3, r7, r0
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007618:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800761a:	f383 8810 	msr	PRIMASK, r3
}
 800761e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007624:	2b00      	cmp	r3, #0
 8007626:	d012      	beq.n	800764e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800762c:	4a17      	ldr	r2, [pc, #92]	@ (800768c <HAL_UART_IRQHandler+0x2ac>)
 800762e:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007634:	0018      	movs	r0, r3
 8007636:	f7fc fa45 	bl	8003ac4 <HAL_DMA_Abort_IT>
 800763a:	1e03      	subs	r3, r0, #0
 800763c:	d020      	beq.n	8007680 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007642:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007648:	0018      	movs	r0, r3
 800764a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800764c:	e018      	b.n	8007680 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2298      	movs	r2, #152	@ 0x98
 8007652:	589b      	ldr	r3, [r3, r2]
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	0010      	movs	r0, r2
 8007658:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800765a:	e011      	b.n	8007680 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2298      	movs	r2, #152	@ 0x98
 8007660:	589b      	ldr	r3, [r3, r2]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	0010      	movs	r0, r2
 8007666:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007668:	e00a      	b.n	8007680 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2298      	movs	r2, #152	@ 0x98
 800766e:	589b      	ldr	r3, [r3, r2]
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	0010      	movs	r0, r2
 8007674:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2284      	movs	r2, #132	@ 0x84
 800767a:	2100      	movs	r1, #0
 800767c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800767e:	e18b      	b.n	8007998 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007680:	46c0      	nop			@ (mov r8, r8)
    return;
 8007682:	e189      	b.n	8007998 <HAL_UART_IRQHandler+0x5b8>
 8007684:	0000080f 	.word	0x0000080f
 8007688:	04000120 	.word	0x04000120
 800768c:	080085b5 	.word	0x080085b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007694:	2b01      	cmp	r3, #1
 8007696:	d000      	beq.n	800769a <HAL_UART_IRQHandler+0x2ba>
 8007698:	e13b      	b.n	8007912 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800769a:	23a4      	movs	r3, #164	@ 0xa4
 800769c:	18fb      	adds	r3, r7, r3
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2210      	movs	r2, #16
 80076a2:	4013      	ands	r3, r2
 80076a4:	d100      	bne.n	80076a8 <HAL_UART_IRQHandler+0x2c8>
 80076a6:	e134      	b.n	8007912 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80076a8:	23a0      	movs	r3, #160	@ 0xa0
 80076aa:	18fb      	adds	r3, r7, r3
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2210      	movs	r2, #16
 80076b0:	4013      	ands	r3, r2
 80076b2:	d100      	bne.n	80076b6 <HAL_UART_IRQHandler+0x2d6>
 80076b4:	e12d      	b.n	8007912 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2210      	movs	r2, #16
 80076bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	2240      	movs	r2, #64	@ 0x40
 80076c6:	4013      	ands	r3, r2
 80076c8:	2b40      	cmp	r3, #64	@ 0x40
 80076ca:	d000      	beq.n	80076ce <HAL_UART_IRQHandler+0x2ee>
 80076cc:	e0a0      	b.n	8007810 <HAL_UART_IRQHandler+0x430>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	217e      	movs	r1, #126	@ 0x7e
 80076d8:	187b      	adds	r3, r7, r1
 80076da:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80076dc:	187b      	adds	r3, r7, r1
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d100      	bne.n	80076e6 <HAL_UART_IRQHandler+0x306>
 80076e4:	e15a      	b.n	800799c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2258      	movs	r2, #88	@ 0x58
 80076ea:	5a9b      	ldrh	r3, [r3, r2]
 80076ec:	187a      	adds	r2, r7, r1
 80076ee:	8812      	ldrh	r2, [r2, #0]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d300      	bcc.n	80076f6 <HAL_UART_IRQHandler+0x316>
 80076f4:	e152      	b.n	800799c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	187a      	adds	r2, r7, r1
 80076fa:	215a      	movs	r1, #90	@ 0x5a
 80076fc:	8812      	ldrh	r2, [r2, #0]
 80076fe:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	2b20      	cmp	r3, #32
 8007708:	d06f      	beq.n	80077ea <HAL_UART_IRQHandler+0x40a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800770a:	f3ef 8310 	mrs	r3, PRIMASK
 800770e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8007710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007712:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007714:	2301      	movs	r3, #1
 8007716:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800771a:	f383 8810 	msr	PRIMASK, r3
}
 800771e:	46c0      	nop			@ (mov r8, r8)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	49a0      	ldr	r1, [pc, #640]	@ (80079ac <HAL_UART_IRQHandler+0x5cc>)
 800772c:	400a      	ands	r2, r1
 800772e:	601a      	str	r2, [r3, #0]
 8007730:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007732:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007736:	f383 8810 	msr	PRIMASK, r3
}
 800773a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800773c:	f3ef 8310 	mrs	r3, PRIMASK
 8007740:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8007742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007744:	677b      	str	r3, [r7, #116]	@ 0x74
 8007746:	2301      	movs	r3, #1
 8007748:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800774a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800774c:	f383 8810 	msr	PRIMASK, r3
}
 8007750:	46c0      	nop			@ (mov r8, r8)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	689a      	ldr	r2, [r3, #8]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2101      	movs	r1, #1
 800775e:	438a      	bics	r2, r1
 8007760:	609a      	str	r2, [r3, #8]
 8007762:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007764:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007766:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007768:	f383 8810 	msr	PRIMASK, r3
}
 800776c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800776e:	f3ef 8310 	mrs	r3, PRIMASK
 8007772:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8007774:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007776:	673b      	str	r3, [r7, #112]	@ 0x70
 8007778:	2301      	movs	r3, #1
 800777a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800777c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800777e:	f383 8810 	msr	PRIMASK, r3
}
 8007782:	46c0      	nop			@ (mov r8, r8)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	689a      	ldr	r2, [r3, #8]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2140      	movs	r1, #64	@ 0x40
 8007790:	438a      	bics	r2, r1
 8007792:	609a      	str	r2, [r3, #8]
 8007794:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007796:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800779a:	f383 8810 	msr	PRIMASK, r3
}
 800779e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2280      	movs	r2, #128	@ 0x80
 80077a4:	2120      	movs	r1, #32
 80077a6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077ae:	f3ef 8310 	mrs	r3, PRIMASK
 80077b2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80077b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80077b8:	2301      	movs	r3, #1
 80077ba:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077be:	f383 8810 	msr	PRIMASK, r3
}
 80077c2:	46c0      	nop			@ (mov r8, r8)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2110      	movs	r1, #16
 80077d0:	438a      	bics	r2, r1
 80077d2:	601a      	str	r2, [r3, #0]
 80077d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077da:	f383 8810 	msr	PRIMASK, r3
}
 80077de:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077e4:	0018      	movs	r0, r3
 80077e6:	f7fc f935 	bl	8003a54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2202      	movs	r2, #2
 80077ee:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	22ac      	movs	r2, #172	@ 0xac
 80077f4:	589b      	ldr	r3, [r3, r2]
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	2158      	movs	r1, #88	@ 0x58
 80077fa:	5a51      	ldrh	r1, [r2, r1]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	205a      	movs	r0, #90	@ 0x5a
 8007800:	5a12      	ldrh	r2, [r2, r0]
 8007802:	b292      	uxth	r2, r2
 8007804:	1a8a      	subs	r2, r1, r2
 8007806:	b291      	uxth	r1, r2
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	0010      	movs	r0, r2
 800780c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800780e:	e0c5      	b.n	800799c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2258      	movs	r2, #88	@ 0x58
 8007814:	5a99      	ldrh	r1, [r3, r2]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	225a      	movs	r2, #90	@ 0x5a
 800781a:	5a9b      	ldrh	r3, [r3, r2]
 800781c:	b29a      	uxth	r2, r3
 800781e:	208e      	movs	r0, #142	@ 0x8e
 8007820:	183b      	adds	r3, r7, r0
 8007822:	1a8a      	subs	r2, r1, r2
 8007824:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	225a      	movs	r2, #90	@ 0x5a
 800782a:	5a9b      	ldrh	r3, [r3, r2]
 800782c:	b29b      	uxth	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d100      	bne.n	8007834 <HAL_UART_IRQHandler+0x454>
 8007832:	e0b5      	b.n	80079a0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007834:	183b      	adds	r3, r7, r0
 8007836:	881b      	ldrh	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d100      	bne.n	800783e <HAL_UART_IRQHandler+0x45e>
 800783c:	e0b0      	b.n	80079a0 <HAL_UART_IRQHandler+0x5c0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800783e:	f3ef 8310 	mrs	r3, PRIMASK
 8007842:	60fb      	str	r3, [r7, #12]
  return(result);
 8007844:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007846:	2488      	movs	r4, #136	@ 0x88
 8007848:	193a      	adds	r2, r7, r4
 800784a:	6013      	str	r3, [r2, #0]
 800784c:	2301      	movs	r3, #1
 800784e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	f383 8810 	msr	PRIMASK, r3
}
 8007856:	46c0      	nop			@ (mov r8, r8)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4953      	ldr	r1, [pc, #332]	@ (80079b0 <HAL_UART_IRQHandler+0x5d0>)
 8007864:	400a      	ands	r2, r1
 8007866:	601a      	str	r2, [r3, #0]
 8007868:	193b      	adds	r3, r7, r4
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f383 8810 	msr	PRIMASK, r3
}
 8007874:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007876:	f3ef 8310 	mrs	r3, PRIMASK
 800787a:	61bb      	str	r3, [r7, #24]
  return(result);
 800787c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800787e:	2484      	movs	r4, #132	@ 0x84
 8007880:	193a      	adds	r2, r7, r4
 8007882:	6013      	str	r3, [r2, #0]
 8007884:	2301      	movs	r3, #1
 8007886:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	f383 8810 	msr	PRIMASK, r3
}
 800788e:	46c0      	nop			@ (mov r8, r8)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	689a      	ldr	r2, [r3, #8]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2101      	movs	r1, #1
 800789c:	438a      	bics	r2, r1
 800789e:	609a      	str	r2, [r3, #8]
 80078a0:	193b      	adds	r3, r7, r4
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078a6:	6a3b      	ldr	r3, [r7, #32]
 80078a8:	f383 8810 	msr	PRIMASK, r3
}
 80078ac:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2280      	movs	r2, #128	@ 0x80
 80078b2:	2120      	movs	r1, #32
 80078b4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078c2:	f3ef 8310 	mrs	r3, PRIMASK
 80078c6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80078c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ca:	2480      	movs	r4, #128	@ 0x80
 80078cc:	193a      	adds	r2, r7, r4
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	2301      	movs	r3, #1
 80078d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d6:	f383 8810 	msr	PRIMASK, r3
}
 80078da:	46c0      	nop			@ (mov r8, r8)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2110      	movs	r1, #16
 80078e8:	438a      	bics	r2, r1
 80078ea:	601a      	str	r2, [r3, #0]
 80078ec:	193b      	adds	r3, r7, r4
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f4:	f383 8810 	msr	PRIMASK, r3
}
 80078f8:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2202      	movs	r2, #2
 80078fe:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	22ac      	movs	r2, #172	@ 0xac
 8007904:	589b      	ldr	r3, [r3, r2]
 8007906:	183a      	adds	r2, r7, r0
 8007908:	8811      	ldrh	r1, [r2, #0]
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	0010      	movs	r0, r2
 800790e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007910:	e046      	b.n	80079a0 <HAL_UART_IRQHandler+0x5c0>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007912:	23a4      	movs	r3, #164	@ 0xa4
 8007914:	18fb      	adds	r3, r7, r3
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	2380      	movs	r3, #128	@ 0x80
 800791a:	035b      	lsls	r3, r3, #13
 800791c:	4013      	ands	r3, r2
 800791e:	d012      	beq.n	8007946 <HAL_UART_IRQHandler+0x566>
 8007920:	239c      	movs	r3, #156	@ 0x9c
 8007922:	18fb      	adds	r3, r7, r3
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	2380      	movs	r3, #128	@ 0x80
 8007928:	03db      	lsls	r3, r3, #15
 800792a:	4013      	ands	r3, r2
 800792c:	d00b      	beq.n	8007946 <HAL_UART_IRQHandler+0x566>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2280      	movs	r2, #128	@ 0x80
 8007934:	0352      	lsls	r2, r2, #13
 8007936:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	22a8      	movs	r2, #168	@ 0xa8
 800793c:	589b      	ldr	r3, [r3, r2]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	0010      	movs	r0, r2
 8007942:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007944:	e02f      	b.n	80079a6 <HAL_UART_IRQHandler+0x5c6>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007946:	23a4      	movs	r3, #164	@ 0xa4
 8007948:	18fb      	adds	r3, r7, r3
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2280      	movs	r2, #128	@ 0x80
 800794e:	4013      	ands	r3, r2
 8007950:	d00f      	beq.n	8007972 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007952:	23a0      	movs	r3, #160	@ 0xa0
 8007954:	18fb      	adds	r3, r7, r3
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2280      	movs	r2, #128	@ 0x80
 800795a:	4013      	ands	r3, r2
 800795c:	d009      	beq.n	8007972 <HAL_UART_IRQHandler+0x592>
  {
    if (huart->TxISR != NULL)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007962:	2b00      	cmp	r3, #0
 8007964:	d01e      	beq.n	80079a4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	0010      	movs	r0, r2
 800796e:	4798      	blx	r3
    }
    return;
 8007970:	e018      	b.n	80079a4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007972:	23a4      	movs	r3, #164	@ 0xa4
 8007974:	18fb      	adds	r3, r7, r3
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2240      	movs	r2, #64	@ 0x40
 800797a:	4013      	ands	r3, r2
 800797c:	d013      	beq.n	80079a6 <HAL_UART_IRQHandler+0x5c6>
 800797e:	23a0      	movs	r3, #160	@ 0xa0
 8007980:	18fb      	adds	r3, r7, r3
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2240      	movs	r2, #64	@ 0x40
 8007986:	4013      	ands	r3, r2
 8007988:	d00d      	beq.n	80079a6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	0018      	movs	r0, r3
 800798e:	f000 fee1 	bl	8008754 <UART_EndTransmit_IT>
    return;
 8007992:	e008      	b.n	80079a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007994:	46c0      	nop			@ (mov r8, r8)
 8007996:	e006      	b.n	80079a6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007998:	46c0      	nop			@ (mov r8, r8)
 800799a:	e004      	b.n	80079a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 800799c:	46c0      	nop			@ (mov r8, r8)
 800799e:	e002      	b.n	80079a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80079a0:	46c0      	nop			@ (mov r8, r8)
 80079a2:	e000      	b.n	80079a6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80079a4:	46c0      	nop			@ (mov r8, r8)
  }

}
 80079a6:	46bd      	mov	sp, r7
 80079a8:	b02b      	add	sp, #172	@ 0xac
 80079aa:	bd90      	pop	{r4, r7, pc}
 80079ac:	fffffeff 	.word	0xfffffeff
 80079b0:	fffffedf 	.word	0xfffffedf

080079b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80079bc:	46c0      	nop			@ (mov r8, r8)
 80079be:	46bd      	mov	sp, r7
 80079c0:	b002      	add	sp, #8
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80079cc:	46c0      	nop			@ (mov r8, r8)
 80079ce:	46bd      	mov	sp, r7
 80079d0:	b002      	add	sp, #8
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80079dc:	46c0      	nop			@ (mov r8, r8)
 80079de:	46bd      	mov	sp, r7
 80079e0:	b002      	add	sp, #8
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80079ec:	46c0      	nop			@ (mov r8, r8)
 80079ee:	46bd      	mov	sp, r7
 80079f0:	b002      	add	sp, #8
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80079fc:	46c0      	nop			@ (mov r8, r8)
 80079fe:	46bd      	mov	sp, r7
 8007a00:	b002      	add	sp, #8
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007a0c:	46c0      	nop			@ (mov r8, r8)
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	b002      	add	sp, #8
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007a1c:	46c0      	nop			@ (mov r8, r8)
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	b002      	add	sp, #8
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007a2c:	46c0      	nop			@ (mov r8, r8)
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	b002      	add	sp, #8
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2188      	movs	r1, #136	@ 0x88
 8007a40:	4a14      	ldr	r2, [pc, #80]	@ (8007a94 <UART_InitCallbacksToDefault+0x60>)
 8007a42:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	218c      	movs	r1, #140	@ 0x8c
 8007a48:	4a13      	ldr	r2, [pc, #76]	@ (8007a98 <UART_InitCallbacksToDefault+0x64>)
 8007a4a:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2190      	movs	r1, #144	@ 0x90
 8007a50:	4a12      	ldr	r2, [pc, #72]	@ (8007a9c <UART_InitCallbacksToDefault+0x68>)
 8007a52:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2194      	movs	r1, #148	@ 0x94
 8007a58:	4a11      	ldr	r2, [pc, #68]	@ (8007aa0 <UART_InitCallbacksToDefault+0x6c>)
 8007a5a:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2198      	movs	r1, #152	@ 0x98
 8007a60:	4a10      	ldr	r2, [pc, #64]	@ (8007aa4 <UART_InitCallbacksToDefault+0x70>)
 8007a62:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	219c      	movs	r1, #156	@ 0x9c
 8007a68:	4a0f      	ldr	r2, [pc, #60]	@ (8007aa8 <UART_InitCallbacksToDefault+0x74>)
 8007a6a:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	21a0      	movs	r1, #160	@ 0xa0
 8007a70:	4a0e      	ldr	r2, [pc, #56]	@ (8007aac <UART_InitCallbacksToDefault+0x78>)
 8007a72:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	21a4      	movs	r1, #164	@ 0xa4
 8007a78:	4a0d      	ldr	r2, [pc, #52]	@ (8007ab0 <UART_InitCallbacksToDefault+0x7c>)
 8007a7a:	505a      	str	r2, [r3, r1]
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	21a8      	movs	r1, #168	@ 0xa8
 8007a80:	4a0c      	ldr	r2, [pc, #48]	@ (8007ab4 <UART_InitCallbacksToDefault+0x80>)
 8007a82:	505a      	str	r2, [r3, r1]
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	21ac      	movs	r1, #172	@ 0xac
 8007a88:	4a0b      	ldr	r2, [pc, #44]	@ (8007ab8 <UART_InitCallbacksToDefault+0x84>)
 8007a8a:	505a      	str	r2, [r3, r1]

}
 8007a8c:	46c0      	nop			@ (mov r8, r8)
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	b002      	add	sp, #8
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	080079c5 	.word	0x080079c5
 8007a98:	080079b5 	.word	0x080079b5
 8007a9c:	080079e5 	.word	0x080079e5
 8007aa0:	080079d5 	.word	0x080079d5
 8007aa4:	080079f5 	.word	0x080079f5
 8007aa8:	08007a05 	.word	0x08007a05
 8007aac:	08007a15 	.word	0x08007a15
 8007ab0:	08007a25 	.word	0x08007a25
 8007ab4:	080087af 	.word	0x080087af
 8007ab8:	08002aa1 	.word	0x08002aa1

08007abc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b088      	sub	sp, #32
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ac4:	231e      	movs	r3, #30
 8007ac6:	18fb      	adds	r3, r7, r3
 8007ac8:	2200      	movs	r2, #0
 8007aca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	689a      	ldr	r2, [r3, #8]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	431a      	orrs	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	69db      	ldr	r3, [r3, #28]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4aaf      	ldr	r2, [pc, #700]	@ (8007da8 <UART_SetConfig+0x2ec>)
 8007aec:	4013      	ands	r3, r2
 8007aee:	0019      	movs	r1, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	430a      	orrs	r2, r1
 8007af8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	4aaa      	ldr	r2, [pc, #680]	@ (8007dac <UART_SetConfig+0x2f0>)
 8007b02:	4013      	ands	r3, r2
 8007b04:	0019      	movs	r1, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68da      	ldr	r2, [r3, #12]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a1b      	ldr	r3, [r3, #32]
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	4aa1      	ldr	r2, [pc, #644]	@ (8007db0 <UART_SetConfig+0x2f4>)
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	0019      	movs	r1, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	430a      	orrs	r2, r1
 8007b36:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a9d      	ldr	r2, [pc, #628]	@ (8007db4 <UART_SetConfig+0x2f8>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d127      	bne.n	8007b92 <UART_SetConfig+0xd6>
 8007b42:	4b9d      	ldr	r3, [pc, #628]	@ (8007db8 <UART_SetConfig+0x2fc>)
 8007b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b46:	2203      	movs	r2, #3
 8007b48:	4013      	ands	r3, r2
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d00d      	beq.n	8007b6a <UART_SetConfig+0xae>
 8007b4e:	d81b      	bhi.n	8007b88 <UART_SetConfig+0xcc>
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d014      	beq.n	8007b7e <UART_SetConfig+0xc2>
 8007b54:	d818      	bhi.n	8007b88 <UART_SetConfig+0xcc>
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d002      	beq.n	8007b60 <UART_SetConfig+0xa4>
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d00a      	beq.n	8007b74 <UART_SetConfig+0xb8>
 8007b5e:	e013      	b.n	8007b88 <UART_SetConfig+0xcc>
 8007b60:	231f      	movs	r3, #31
 8007b62:	18fb      	adds	r3, r7, r3
 8007b64:	2200      	movs	r2, #0
 8007b66:	701a      	strb	r2, [r3, #0]
 8007b68:	e065      	b.n	8007c36 <UART_SetConfig+0x17a>
 8007b6a:	231f      	movs	r3, #31
 8007b6c:	18fb      	adds	r3, r7, r3
 8007b6e:	2202      	movs	r2, #2
 8007b70:	701a      	strb	r2, [r3, #0]
 8007b72:	e060      	b.n	8007c36 <UART_SetConfig+0x17a>
 8007b74:	231f      	movs	r3, #31
 8007b76:	18fb      	adds	r3, r7, r3
 8007b78:	2204      	movs	r2, #4
 8007b7a:	701a      	strb	r2, [r3, #0]
 8007b7c:	e05b      	b.n	8007c36 <UART_SetConfig+0x17a>
 8007b7e:	231f      	movs	r3, #31
 8007b80:	18fb      	adds	r3, r7, r3
 8007b82:	2208      	movs	r2, #8
 8007b84:	701a      	strb	r2, [r3, #0]
 8007b86:	e056      	b.n	8007c36 <UART_SetConfig+0x17a>
 8007b88:	231f      	movs	r3, #31
 8007b8a:	18fb      	adds	r3, r7, r3
 8007b8c:	2210      	movs	r2, #16
 8007b8e:	701a      	strb	r2, [r3, #0]
 8007b90:	e051      	b.n	8007c36 <UART_SetConfig+0x17a>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a89      	ldr	r2, [pc, #548]	@ (8007dbc <UART_SetConfig+0x300>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d134      	bne.n	8007c06 <UART_SetConfig+0x14a>
 8007b9c:	4b86      	ldr	r3, [pc, #536]	@ (8007db8 <UART_SetConfig+0x2fc>)
 8007b9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ba0:	23c0      	movs	r3, #192	@ 0xc0
 8007ba2:	029b      	lsls	r3, r3, #10
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	22c0      	movs	r2, #192	@ 0xc0
 8007ba8:	0292      	lsls	r2, r2, #10
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d017      	beq.n	8007bde <UART_SetConfig+0x122>
 8007bae:	22c0      	movs	r2, #192	@ 0xc0
 8007bb0:	0292      	lsls	r2, r2, #10
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d822      	bhi.n	8007bfc <UART_SetConfig+0x140>
 8007bb6:	2280      	movs	r2, #128	@ 0x80
 8007bb8:	0292      	lsls	r2, r2, #10
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d019      	beq.n	8007bf2 <UART_SetConfig+0x136>
 8007bbe:	2280      	movs	r2, #128	@ 0x80
 8007bc0:	0292      	lsls	r2, r2, #10
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d81a      	bhi.n	8007bfc <UART_SetConfig+0x140>
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d004      	beq.n	8007bd4 <UART_SetConfig+0x118>
 8007bca:	2280      	movs	r2, #128	@ 0x80
 8007bcc:	0252      	lsls	r2, r2, #9
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d00a      	beq.n	8007be8 <UART_SetConfig+0x12c>
 8007bd2:	e013      	b.n	8007bfc <UART_SetConfig+0x140>
 8007bd4:	231f      	movs	r3, #31
 8007bd6:	18fb      	adds	r3, r7, r3
 8007bd8:	2200      	movs	r2, #0
 8007bda:	701a      	strb	r2, [r3, #0]
 8007bdc:	e02b      	b.n	8007c36 <UART_SetConfig+0x17a>
 8007bde:	231f      	movs	r3, #31
 8007be0:	18fb      	adds	r3, r7, r3
 8007be2:	2202      	movs	r2, #2
 8007be4:	701a      	strb	r2, [r3, #0]
 8007be6:	e026      	b.n	8007c36 <UART_SetConfig+0x17a>
 8007be8:	231f      	movs	r3, #31
 8007bea:	18fb      	adds	r3, r7, r3
 8007bec:	2204      	movs	r2, #4
 8007bee:	701a      	strb	r2, [r3, #0]
 8007bf0:	e021      	b.n	8007c36 <UART_SetConfig+0x17a>
 8007bf2:	231f      	movs	r3, #31
 8007bf4:	18fb      	adds	r3, r7, r3
 8007bf6:	2208      	movs	r2, #8
 8007bf8:	701a      	strb	r2, [r3, #0]
 8007bfa:	e01c      	b.n	8007c36 <UART_SetConfig+0x17a>
 8007bfc:	231f      	movs	r3, #31
 8007bfe:	18fb      	adds	r3, r7, r3
 8007c00:	2210      	movs	r2, #16
 8007c02:	701a      	strb	r2, [r3, #0]
 8007c04:	e017      	b.n	8007c36 <UART_SetConfig+0x17a>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a6d      	ldr	r2, [pc, #436]	@ (8007dc0 <UART_SetConfig+0x304>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d104      	bne.n	8007c1a <UART_SetConfig+0x15e>
 8007c10:	231f      	movs	r3, #31
 8007c12:	18fb      	adds	r3, r7, r3
 8007c14:	2200      	movs	r2, #0
 8007c16:	701a      	strb	r2, [r3, #0]
 8007c18:	e00d      	b.n	8007c36 <UART_SetConfig+0x17a>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a69      	ldr	r2, [pc, #420]	@ (8007dc4 <UART_SetConfig+0x308>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d104      	bne.n	8007c2e <UART_SetConfig+0x172>
 8007c24:	231f      	movs	r3, #31
 8007c26:	18fb      	adds	r3, r7, r3
 8007c28:	2200      	movs	r2, #0
 8007c2a:	701a      	strb	r2, [r3, #0]
 8007c2c:	e003      	b.n	8007c36 <UART_SetConfig+0x17a>
 8007c2e:	231f      	movs	r3, #31
 8007c30:	18fb      	adds	r3, r7, r3
 8007c32:	2210      	movs	r2, #16
 8007c34:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	69da      	ldr	r2, [r3, #28]
 8007c3a:	2380      	movs	r3, #128	@ 0x80
 8007c3c:	021b      	lsls	r3, r3, #8
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d15c      	bne.n	8007cfc <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8007c42:	231f      	movs	r3, #31
 8007c44:	18fb      	adds	r3, r7, r3
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	2b08      	cmp	r3, #8
 8007c4a:	d015      	beq.n	8007c78 <UART_SetConfig+0x1bc>
 8007c4c:	dc18      	bgt.n	8007c80 <UART_SetConfig+0x1c4>
 8007c4e:	2b04      	cmp	r3, #4
 8007c50:	d00d      	beq.n	8007c6e <UART_SetConfig+0x1b2>
 8007c52:	dc15      	bgt.n	8007c80 <UART_SetConfig+0x1c4>
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d002      	beq.n	8007c5e <UART_SetConfig+0x1a2>
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d005      	beq.n	8007c68 <UART_SetConfig+0x1ac>
 8007c5c:	e010      	b.n	8007c80 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c5e:	f7fe fd4d 	bl	80066fc <HAL_RCC_GetPCLK1Freq>
 8007c62:	0003      	movs	r3, r0
 8007c64:	61bb      	str	r3, [r7, #24]
        break;
 8007c66:	e012      	b.n	8007c8e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c68:	4b57      	ldr	r3, [pc, #348]	@ (8007dc8 <UART_SetConfig+0x30c>)
 8007c6a:	61bb      	str	r3, [r7, #24]
        break;
 8007c6c:	e00f      	b.n	8007c8e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c6e:	f7fe fcc9 	bl	8006604 <HAL_RCC_GetSysClockFreq>
 8007c72:	0003      	movs	r3, r0
 8007c74:	61bb      	str	r3, [r7, #24]
        break;
 8007c76:	e00a      	b.n	8007c8e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c78:	2380      	movs	r3, #128	@ 0x80
 8007c7a:	021b      	lsls	r3, r3, #8
 8007c7c:	61bb      	str	r3, [r7, #24]
        break;
 8007c7e:	e006      	b.n	8007c8e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8007c80:	2300      	movs	r3, #0
 8007c82:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c84:	231e      	movs	r3, #30
 8007c86:	18fb      	adds	r3, r7, r3
 8007c88:	2201      	movs	r2, #1
 8007c8a:	701a      	strb	r2, [r3, #0]
        break;
 8007c8c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d100      	bne.n	8007c96 <UART_SetConfig+0x1da>
 8007c94:	e07a      	b.n	8007d8c <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	005a      	lsls	r2, r3, #1
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	085b      	lsrs	r3, r3, #1
 8007ca0:	18d2      	adds	r2, r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	0019      	movs	r1, r3
 8007ca8:	0010      	movs	r0, r2
 8007caa:	f7f8 fa49 	bl	8000140 <__udivsi3>
 8007cae:	0003      	movs	r3, r0
 8007cb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	2b0f      	cmp	r3, #15
 8007cb6:	d91c      	bls.n	8007cf2 <UART_SetConfig+0x236>
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	2380      	movs	r3, #128	@ 0x80
 8007cbc:	025b      	lsls	r3, r3, #9
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d217      	bcs.n	8007cf2 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	200e      	movs	r0, #14
 8007cc8:	183b      	adds	r3, r7, r0
 8007cca:	210f      	movs	r1, #15
 8007ccc:	438a      	bics	r2, r1
 8007cce:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	085b      	lsrs	r3, r3, #1
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	2207      	movs	r2, #7
 8007cd8:	4013      	ands	r3, r2
 8007cda:	b299      	uxth	r1, r3
 8007cdc:	183b      	adds	r3, r7, r0
 8007cde:	183a      	adds	r2, r7, r0
 8007ce0:	8812      	ldrh	r2, [r2, #0]
 8007ce2:	430a      	orrs	r2, r1
 8007ce4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	183a      	adds	r2, r7, r0
 8007cec:	8812      	ldrh	r2, [r2, #0]
 8007cee:	60da      	str	r2, [r3, #12]
 8007cf0:	e04c      	b.n	8007d8c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8007cf2:	231e      	movs	r3, #30
 8007cf4:	18fb      	adds	r3, r7, r3
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	701a      	strb	r2, [r3, #0]
 8007cfa:	e047      	b.n	8007d8c <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007cfc:	231f      	movs	r3, #31
 8007cfe:	18fb      	adds	r3, r7, r3
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	2b08      	cmp	r3, #8
 8007d04:	d015      	beq.n	8007d32 <UART_SetConfig+0x276>
 8007d06:	dc18      	bgt.n	8007d3a <UART_SetConfig+0x27e>
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	d00d      	beq.n	8007d28 <UART_SetConfig+0x26c>
 8007d0c:	dc15      	bgt.n	8007d3a <UART_SetConfig+0x27e>
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d002      	beq.n	8007d18 <UART_SetConfig+0x25c>
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d005      	beq.n	8007d22 <UART_SetConfig+0x266>
 8007d16:	e010      	b.n	8007d3a <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d18:	f7fe fcf0 	bl	80066fc <HAL_RCC_GetPCLK1Freq>
 8007d1c:	0003      	movs	r3, r0
 8007d1e:	61bb      	str	r3, [r7, #24]
        break;
 8007d20:	e012      	b.n	8007d48 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d22:	4b29      	ldr	r3, [pc, #164]	@ (8007dc8 <UART_SetConfig+0x30c>)
 8007d24:	61bb      	str	r3, [r7, #24]
        break;
 8007d26:	e00f      	b.n	8007d48 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d28:	f7fe fc6c 	bl	8006604 <HAL_RCC_GetSysClockFreq>
 8007d2c:	0003      	movs	r3, r0
 8007d2e:	61bb      	str	r3, [r7, #24]
        break;
 8007d30:	e00a      	b.n	8007d48 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d32:	2380      	movs	r3, #128	@ 0x80
 8007d34:	021b      	lsls	r3, r3, #8
 8007d36:	61bb      	str	r3, [r7, #24]
        break;
 8007d38:	e006      	b.n	8007d48 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d3e:	231e      	movs	r3, #30
 8007d40:	18fb      	adds	r3, r7, r3
 8007d42:	2201      	movs	r2, #1
 8007d44:	701a      	strb	r2, [r3, #0]
        break;
 8007d46:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d01e      	beq.n	8007d8c <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	085a      	lsrs	r2, r3, #1
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	18d2      	adds	r2, r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	0019      	movs	r1, r3
 8007d5e:	0010      	movs	r0, r2
 8007d60:	f7f8 f9ee 	bl	8000140 <__udivsi3>
 8007d64:	0003      	movs	r3, r0
 8007d66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	2b0f      	cmp	r3, #15
 8007d6c:	d90a      	bls.n	8007d84 <UART_SetConfig+0x2c8>
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	2380      	movs	r3, #128	@ 0x80
 8007d72:	025b      	lsls	r3, r3, #9
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d205      	bcs.n	8007d84 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	60da      	str	r2, [r3, #12]
 8007d82:	e003      	b.n	8007d8c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8007d84:	231e      	movs	r3, #30
 8007d86:	18fb      	adds	r3, r7, r3
 8007d88:	2201      	movs	r2, #1
 8007d8a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007d98:	231e      	movs	r3, #30
 8007d9a:	18fb      	adds	r3, r7, r3
 8007d9c:	781b      	ldrb	r3, [r3, #0]
}
 8007d9e:	0018      	movs	r0, r3
 8007da0:	46bd      	mov	sp, r7
 8007da2:	b008      	add	sp, #32
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	46c0      	nop			@ (mov r8, r8)
 8007da8:	efff69f3 	.word	0xefff69f3
 8007dac:	ffffcfff 	.word	0xffffcfff
 8007db0:	fffff4ff 	.word	0xfffff4ff
 8007db4:	40013800 	.word	0x40013800
 8007db8:	40021000 	.word	0x40021000
 8007dbc:	40004400 	.word	0x40004400
 8007dc0:	40004800 	.word	0x40004800
 8007dc4:	40004c00 	.word	0x40004c00
 8007dc8:	007a1200 	.word	0x007a1200

08007dcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd8:	2208      	movs	r2, #8
 8007dda:	4013      	ands	r3, r2
 8007ddc:	d00b      	beq.n	8007df6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	4a4a      	ldr	r2, [pc, #296]	@ (8007f10 <UART_AdvFeatureConfig+0x144>)
 8007de6:	4013      	ands	r3, r2
 8007de8:	0019      	movs	r1, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	430a      	orrs	r2, r1
 8007df4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	d00b      	beq.n	8007e18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	4a43      	ldr	r2, [pc, #268]	@ (8007f14 <UART_AdvFeatureConfig+0x148>)
 8007e08:	4013      	ands	r3, r2
 8007e0a:	0019      	movs	r1, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	430a      	orrs	r2, r1
 8007e16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e1c:	2202      	movs	r2, #2
 8007e1e:	4013      	ands	r3, r2
 8007e20:	d00b      	beq.n	8007e3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	4a3b      	ldr	r2, [pc, #236]	@ (8007f18 <UART_AdvFeatureConfig+0x14c>)
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	0019      	movs	r1, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	430a      	orrs	r2, r1
 8007e38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e3e:	2204      	movs	r2, #4
 8007e40:	4013      	ands	r3, r2
 8007e42:	d00b      	beq.n	8007e5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	4a34      	ldr	r2, [pc, #208]	@ (8007f1c <UART_AdvFeatureConfig+0x150>)
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	0019      	movs	r1, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	430a      	orrs	r2, r1
 8007e5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e60:	2210      	movs	r2, #16
 8007e62:	4013      	ands	r3, r2
 8007e64:	d00b      	beq.n	8007e7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8007f20 <UART_AdvFeatureConfig+0x154>)
 8007e6e:	4013      	ands	r3, r2
 8007e70:	0019      	movs	r1, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	430a      	orrs	r2, r1
 8007e7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e82:	2220      	movs	r2, #32
 8007e84:	4013      	ands	r3, r2
 8007e86:	d00b      	beq.n	8007ea0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	4a25      	ldr	r2, [pc, #148]	@ (8007f24 <UART_AdvFeatureConfig+0x158>)
 8007e90:	4013      	ands	r3, r2
 8007e92:	0019      	movs	r1, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	430a      	orrs	r2, r1
 8007e9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea4:	2240      	movs	r2, #64	@ 0x40
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	d01d      	beq.n	8007ee6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8007f28 <UART_AdvFeatureConfig+0x15c>)
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	0019      	movs	r1, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	430a      	orrs	r2, r1
 8007ec0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ec6:	2380      	movs	r3, #128	@ 0x80
 8007ec8:	035b      	lsls	r3, r3, #13
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d10b      	bne.n	8007ee6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	4a15      	ldr	r2, [pc, #84]	@ (8007f2c <UART_AdvFeatureConfig+0x160>)
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	0019      	movs	r1, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	430a      	orrs	r2, r1
 8007ee4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eea:	2280      	movs	r2, #128	@ 0x80
 8007eec:	4013      	ands	r3, r2
 8007eee:	d00b      	beq.n	8007f08 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8007f30 <UART_AdvFeatureConfig+0x164>)
 8007ef8:	4013      	ands	r3, r2
 8007efa:	0019      	movs	r1, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	430a      	orrs	r2, r1
 8007f06:	605a      	str	r2, [r3, #4]
  }
}
 8007f08:	46c0      	nop			@ (mov r8, r8)
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	b002      	add	sp, #8
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	ffff7fff 	.word	0xffff7fff
 8007f14:	fffdffff 	.word	0xfffdffff
 8007f18:	fffeffff 	.word	0xfffeffff
 8007f1c:	fffbffff 	.word	0xfffbffff
 8007f20:	ffffefff 	.word	0xffffefff
 8007f24:	ffffdfff 	.word	0xffffdfff
 8007f28:	ffefffff 	.word	0xffefffff
 8007f2c:	ff9fffff 	.word	0xff9fffff
 8007f30:	fff7ffff 	.word	0xfff7ffff

08007f34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b092      	sub	sp, #72	@ 0x48
 8007f38:	af02      	add	r7, sp, #8
 8007f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2284      	movs	r2, #132	@ 0x84
 8007f40:	2100      	movs	r1, #0
 8007f42:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f44:	f7fb f97e 	bl	8003244 <HAL_GetTick>
 8007f48:	0003      	movs	r3, r0
 8007f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2208      	movs	r2, #8
 8007f54:	4013      	ands	r3, r2
 8007f56:	2b08      	cmp	r3, #8
 8007f58:	d12c      	bne.n	8007fb4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f5c:	2280      	movs	r2, #128	@ 0x80
 8007f5e:	0391      	lsls	r1, r2, #14
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	4a46      	ldr	r2, [pc, #280]	@ (800807c <UART_CheckIdleState+0x148>)
 8007f64:	9200      	str	r2, [sp, #0]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f000 f88c 	bl	8008084 <UART_WaitOnFlagUntilTimeout>
 8007f6c:	1e03      	subs	r3, r0, #0
 8007f6e:	d021      	beq.n	8007fb4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f70:	f3ef 8310 	mrs	r3, PRIMASK
 8007f74:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007f78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f80:	f383 8810 	msr	PRIMASK, r3
}
 8007f84:	46c0      	nop			@ (mov r8, r8)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2180      	movs	r1, #128	@ 0x80
 8007f92:	438a      	bics	r2, r1
 8007f94:	601a      	str	r2, [r3, #0]
 8007f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f9c:	f383 8810 	msr	PRIMASK, r3
}
 8007fa0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2220      	movs	r2, #32
 8007fa6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2278      	movs	r2, #120	@ 0x78
 8007fac:	2100      	movs	r1, #0
 8007fae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e05f      	b.n	8008074 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2204      	movs	r2, #4
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	2b04      	cmp	r3, #4
 8007fc0:	d146      	bne.n	8008050 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fc4:	2280      	movs	r2, #128	@ 0x80
 8007fc6:	03d1      	lsls	r1, r2, #15
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	4a2c      	ldr	r2, [pc, #176]	@ (800807c <UART_CheckIdleState+0x148>)
 8007fcc:	9200      	str	r2, [sp, #0]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f000 f858 	bl	8008084 <UART_WaitOnFlagUntilTimeout>
 8007fd4:	1e03      	subs	r3, r0, #0
 8007fd6:	d03b      	beq.n	8008050 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8007fdc:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fde:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fe0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	f383 8810 	msr	PRIMASK, r3
}
 8007fec:	46c0      	nop			@ (mov r8, r8)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4921      	ldr	r1, [pc, #132]	@ (8008080 <UART_CheckIdleState+0x14c>)
 8007ffa:	400a      	ands	r2, r1
 8007ffc:	601a      	str	r2, [r3, #0]
 8007ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008000:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	f383 8810 	msr	PRIMASK, r3
}
 8008008:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800800a:	f3ef 8310 	mrs	r3, PRIMASK
 800800e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008010:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008012:	633b      	str	r3, [r7, #48]	@ 0x30
 8008014:	2301      	movs	r3, #1
 8008016:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	f383 8810 	msr	PRIMASK, r3
}
 800801e:	46c0      	nop			@ (mov r8, r8)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689a      	ldr	r2, [r3, #8]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2101      	movs	r1, #1
 800802c:	438a      	bics	r2, r1
 800802e:	609a      	str	r2, [r3, #8]
 8008030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008032:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	f383 8810 	msr	PRIMASK, r3
}
 800803a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2280      	movs	r2, #128	@ 0x80
 8008040:	2120      	movs	r1, #32
 8008042:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2278      	movs	r2, #120	@ 0x78
 8008048:	2100      	movs	r1, #0
 800804a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e011      	b.n	8008074 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2220      	movs	r2, #32
 8008054:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2280      	movs	r2, #128	@ 0x80
 800805a:	2120      	movs	r1, #32
 800805c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2278      	movs	r2, #120	@ 0x78
 800806e:	2100      	movs	r1, #0
 8008070:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	0018      	movs	r0, r3
 8008076:	46bd      	mov	sp, r7
 8008078:	b010      	add	sp, #64	@ 0x40
 800807a:	bd80      	pop	{r7, pc}
 800807c:	01ffffff 	.word	0x01ffffff
 8008080:	fffffedf 	.word	0xfffffedf

08008084 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	603b      	str	r3, [r7, #0]
 8008090:	1dfb      	adds	r3, r7, #7
 8008092:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008094:	e051      	b.n	800813a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	3301      	adds	r3, #1
 800809a:	d04e      	beq.n	800813a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800809c:	f7fb f8d2 	bl	8003244 <HAL_GetTick>
 80080a0:	0002      	movs	r2, r0
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	69ba      	ldr	r2, [r7, #24]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d302      	bcc.n	80080b2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d101      	bne.n	80080b6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80080b2:	2303      	movs	r3, #3
 80080b4:	e051      	b.n	800815a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2204      	movs	r2, #4
 80080be:	4013      	ands	r3, r2
 80080c0:	d03b      	beq.n	800813a <UART_WaitOnFlagUntilTimeout+0xb6>
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	2b80      	cmp	r3, #128	@ 0x80
 80080c6:	d038      	beq.n	800813a <UART_WaitOnFlagUntilTimeout+0xb6>
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	2b40      	cmp	r3, #64	@ 0x40
 80080cc:	d035      	beq.n	800813a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	69db      	ldr	r3, [r3, #28]
 80080d4:	2208      	movs	r2, #8
 80080d6:	4013      	ands	r3, r2
 80080d8:	2b08      	cmp	r3, #8
 80080da:	d111      	bne.n	8008100 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2208      	movs	r2, #8
 80080e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	0018      	movs	r0, r3
 80080e8:	f000 f900 	bl	80082ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2284      	movs	r2, #132	@ 0x84
 80080f0:	2108      	movs	r1, #8
 80080f2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2278      	movs	r2, #120	@ 0x78
 80080f8:	2100      	movs	r1, #0
 80080fa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e02c      	b.n	800815a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	69da      	ldr	r2, [r3, #28]
 8008106:	2380      	movs	r3, #128	@ 0x80
 8008108:	011b      	lsls	r3, r3, #4
 800810a:	401a      	ands	r2, r3
 800810c:	2380      	movs	r3, #128	@ 0x80
 800810e:	011b      	lsls	r3, r3, #4
 8008110:	429a      	cmp	r2, r3
 8008112:	d112      	bne.n	800813a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2280      	movs	r2, #128	@ 0x80
 800811a:	0112      	lsls	r2, r2, #4
 800811c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	0018      	movs	r0, r3
 8008122:	f000 f8e3 	bl	80082ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2284      	movs	r2, #132	@ 0x84
 800812a:	2120      	movs	r1, #32
 800812c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2278      	movs	r2, #120	@ 0x78
 8008132:	2100      	movs	r1, #0
 8008134:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e00f      	b.n	800815a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	69db      	ldr	r3, [r3, #28]
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	4013      	ands	r3, r2
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	425a      	negs	r2, r3
 800814a:	4153      	adcs	r3, r2
 800814c:	b2db      	uxtb	r3, r3
 800814e:	001a      	movs	r2, r3
 8008150:	1dfb      	adds	r3, r7, #7
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	429a      	cmp	r2, r3
 8008156:	d09e      	beq.n	8008096 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	0018      	movs	r0, r3
 800815c:	46bd      	mov	sp, r7
 800815e:	b004      	add	sp, #16
 8008160:	bd80      	pop	{r7, pc}
	...

08008164 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b090      	sub	sp, #64	@ 0x40
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	1dbb      	adds	r3, r7, #6
 8008170:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	1dba      	adds	r2, r7, #6
 800817c:	2158      	movs	r1, #88	@ 0x58
 800817e:	8812      	ldrh	r2, [r2, #0]
 8008180:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2284      	movs	r2, #132	@ 0x84
 8008186:	2100      	movs	r1, #0
 8008188:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2280      	movs	r2, #128	@ 0x80
 800818e:	2122      	movs	r1, #34	@ 0x22
 8008190:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008196:	2b00      	cmp	r3, #0
 8008198:	d028      	beq.n	80081ec <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800819e:	4a3e      	ldr	r2, [pc, #248]	@ (8008298 <UART_Start_Receive_DMA+0x134>)
 80081a0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081a6:	4a3d      	ldr	r2, [pc, #244]	@ (800829c <UART_Start_Receive_DMA+0x138>)
 80081a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081ae:	4a3c      	ldr	r2, [pc, #240]	@ (80082a0 <UART_Start_Receive_DMA+0x13c>)
 80081b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081b6:	2200      	movs	r2, #0
 80081b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3324      	adds	r3, #36	@ 0x24
 80081c4:	0019      	movs	r1, r3
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081ca:	001a      	movs	r2, r3
 80081cc:	1dbb      	adds	r3, r7, #6
 80081ce:	881b      	ldrh	r3, [r3, #0]
 80081d0:	f7fb fbda 	bl	8003988 <HAL_DMA_Start_IT>
 80081d4:	1e03      	subs	r3, r0, #0
 80081d6:	d009      	beq.n	80081ec <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2284      	movs	r2, #132	@ 0x84
 80081dc:	2110      	movs	r1, #16
 80081de:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2280      	movs	r2, #128	@ 0x80
 80081e4:	2120      	movs	r1, #32
 80081e6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e050      	b.n	800828e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d019      	beq.n	8008228 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081f4:	f3ef 8310 	mrs	r3, PRIMASK
 80081f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80081fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081fe:	2301      	movs	r3, #1
 8008200:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008204:	f383 8810 	msr	PRIMASK, r3
}
 8008208:	46c0      	nop			@ (mov r8, r8)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2180      	movs	r1, #128	@ 0x80
 8008216:	0049      	lsls	r1, r1, #1
 8008218:	430a      	orrs	r2, r1
 800821a:	601a      	str	r2, [r3, #0]
 800821c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800821e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008222:	f383 8810 	msr	PRIMASK, r3
}
 8008226:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008228:	f3ef 8310 	mrs	r3, PRIMASK
 800822c:	613b      	str	r3, [r7, #16]
  return(result);
 800822e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008230:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008232:	2301      	movs	r3, #1
 8008234:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f383 8810 	msr	PRIMASK, r3
}
 800823c:	46c0      	nop			@ (mov r8, r8)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	689a      	ldr	r2, [r3, #8]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2101      	movs	r1, #1
 800824a:	430a      	orrs	r2, r1
 800824c:	609a      	str	r2, [r3, #8]
 800824e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008250:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	f383 8810 	msr	PRIMASK, r3
}
 8008258:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800825a:	f3ef 8310 	mrs	r3, PRIMASK
 800825e:	61fb      	str	r3, [r7, #28]
  return(result);
 8008260:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008262:	637b      	str	r3, [r7, #52]	@ 0x34
 8008264:	2301      	movs	r3, #1
 8008266:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008268:	6a3b      	ldr	r3, [r7, #32]
 800826a:	f383 8810 	msr	PRIMASK, r3
}
 800826e:	46c0      	nop			@ (mov r8, r8)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	689a      	ldr	r2, [r3, #8]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2140      	movs	r1, #64	@ 0x40
 800827c:	430a      	orrs	r2, r1
 800827e:	609a      	str	r2, [r3, #8]
 8008280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008282:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008286:	f383 8810 	msr	PRIMASK, r3
}
 800828a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	0018      	movs	r0, r3
 8008290:	46bd      	mov	sp, r7
 8008292:	b010      	add	sp, #64	@ 0x40
 8008294:	bd80      	pop	{r7, pc}
 8008296:	46c0      	nop			@ (mov r8, r8)
 8008298:	080083b5 	.word	0x080083b5
 800829c:	080084e5 	.word	0x080084e5
 80082a0:	0800852d 	.word	0x0800852d

080082a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082ac:	f3ef 8310 	mrs	r3, PRIMASK
 80082b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80082b2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80082b4:	617b      	str	r3, [r7, #20]
 80082b6:	2301      	movs	r3, #1
 80082b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f383 8810 	msr	PRIMASK, r3
}
 80082c0:	46c0      	nop			@ (mov r8, r8)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	21c0      	movs	r1, #192	@ 0xc0
 80082ce:	438a      	bics	r2, r1
 80082d0:	601a      	str	r2, [r3, #0]
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	f383 8810 	msr	PRIMASK, r3
}
 80082dc:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2220      	movs	r2, #32
 80082e2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80082e4:	46c0      	nop			@ (mov r8, r8)
 80082e6:	46bd      	mov	sp, r7
 80082e8:	b006      	add	sp, #24
 80082ea:	bd80      	pop	{r7, pc}

080082ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b08e      	sub	sp, #56	@ 0x38
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082f4:	f3ef 8310 	mrs	r3, PRIMASK
 80082f8:	617b      	str	r3, [r7, #20]
  return(result);
 80082fa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80082fe:	2301      	movs	r3, #1
 8008300:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	f383 8810 	msr	PRIMASK, r3
}
 8008308:	46c0      	nop			@ (mov r8, r8)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4926      	ldr	r1, [pc, #152]	@ (80083b0 <UART_EndRxTransfer+0xc4>)
 8008316:	400a      	ands	r2, r1
 8008318:	601a      	str	r2, [r3, #0]
 800831a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800831c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	f383 8810 	msr	PRIMASK, r3
}
 8008324:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008326:	f3ef 8310 	mrs	r3, PRIMASK
 800832a:	623b      	str	r3, [r7, #32]
  return(result);
 800832c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800832e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008330:	2301      	movs	r3, #1
 8008332:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008336:	f383 8810 	msr	PRIMASK, r3
}
 800833a:	46c0      	nop			@ (mov r8, r8)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	689a      	ldr	r2, [r3, #8]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2101      	movs	r1, #1
 8008348:	438a      	bics	r2, r1
 800834a:	609a      	str	r2, [r3, #8]
 800834c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008352:	f383 8810 	msr	PRIMASK, r3
}
 8008356:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800835c:	2b01      	cmp	r3, #1
 800835e:	d118      	bne.n	8008392 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008360:	f3ef 8310 	mrs	r3, PRIMASK
 8008364:	60bb      	str	r3, [r7, #8]
  return(result);
 8008366:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008368:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800836a:	2301      	movs	r3, #1
 800836c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f383 8810 	msr	PRIMASK, r3
}
 8008374:	46c0      	nop			@ (mov r8, r8)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2110      	movs	r1, #16
 8008382:	438a      	bics	r2, r1
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008388:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	f383 8810 	msr	PRIMASK, r3
}
 8008390:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2280      	movs	r2, #128	@ 0x80
 8008396:	2120      	movs	r1, #32
 8008398:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80083a6:	46c0      	nop			@ (mov r8, r8)
 80083a8:	46bd      	mov	sp, r7
 80083aa:	b00e      	add	sp, #56	@ 0x38
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	46c0      	nop			@ (mov r8, r8)
 80083b0:	fffffedf 	.word	0xfffffedf

080083b4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b094      	sub	sp, #80	@ 0x50
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083c0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	2b20      	cmp	r3, #32
 80083c8:	d06f      	beq.n	80084aa <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 80083ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083cc:	225a      	movs	r2, #90	@ 0x5a
 80083ce:	2100      	movs	r1, #0
 80083d0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083d2:	f3ef 8310 	mrs	r3, PRIMASK
 80083d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80083d8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083dc:	2301      	movs	r3, #1
 80083de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	f383 8810 	msr	PRIMASK, r3
}
 80083e6:	46c0      	nop			@ (mov r8, r8)
 80083e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	493b      	ldr	r1, [pc, #236]	@ (80084e0 <UART_DMAReceiveCplt+0x12c>)
 80083f4:	400a      	ands	r2, r1
 80083f6:	601a      	str	r2, [r3, #0]
 80083f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083fc:	6a3b      	ldr	r3, [r7, #32]
 80083fe:	f383 8810 	msr	PRIMASK, r3
}
 8008402:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008404:	f3ef 8310 	mrs	r3, PRIMASK
 8008408:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800840a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800840c:	647b      	str	r3, [r7, #68]	@ 0x44
 800840e:	2301      	movs	r3, #1
 8008410:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008414:	f383 8810 	msr	PRIMASK, r3
}
 8008418:	46c0      	nop			@ (mov r8, r8)
 800841a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	689a      	ldr	r2, [r3, #8]
 8008420:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2101      	movs	r1, #1
 8008426:	438a      	bics	r2, r1
 8008428:	609a      	str	r2, [r3, #8]
 800842a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800842c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800842e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008430:	f383 8810 	msr	PRIMASK, r3
}
 8008434:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008436:	f3ef 8310 	mrs	r3, PRIMASK
 800843a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800843c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800843e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008440:	2301      	movs	r3, #1
 8008442:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008446:	f383 8810 	msr	PRIMASK, r3
}
 800844a:	46c0      	nop			@ (mov r8, r8)
 800844c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	689a      	ldr	r2, [r3, #8]
 8008452:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2140      	movs	r1, #64	@ 0x40
 8008458:	438a      	bics	r2, r1
 800845a:	609a      	str	r2, [r3, #8]
 800845c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800845e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008462:	f383 8810 	msr	PRIMASK, r3
}
 8008466:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008468:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800846a:	2280      	movs	r2, #128	@ 0x80
 800846c:	2120      	movs	r1, #32
 800846e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008470:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008474:	2b01      	cmp	r3, #1
 8008476:	d118      	bne.n	80084aa <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008478:	f3ef 8310 	mrs	r3, PRIMASK
 800847c:	60fb      	str	r3, [r7, #12]
  return(result);
 800847e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008480:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008482:	2301      	movs	r3, #1
 8008484:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	f383 8810 	msr	PRIMASK, r3
}
 800848c:	46c0      	nop			@ (mov r8, r8)
 800848e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2110      	movs	r1, #16
 800849a:	438a      	bics	r2, r1
 800849c:	601a      	str	r2, [r3, #0]
 800849e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	f383 8810 	msr	PRIMASK, r3
}
 80084a8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084ac:	2200      	movs	r2, #0
 80084ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d109      	bne.n	80084cc <UART_DMAReceiveCplt+0x118>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80084b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084ba:	22ac      	movs	r2, #172	@ 0xac
 80084bc:	589b      	ldr	r3, [r3, r2]
 80084be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80084c0:	2158      	movs	r1, #88	@ 0x58
 80084c2:	5a51      	ldrh	r1, [r2, r1]
 80084c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80084c6:	0010      	movs	r0, r2
 80084c8:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80084ca:	e005      	b.n	80084d8 <UART_DMAReceiveCplt+0x124>
    huart->RxCpltCallback(huart);
 80084cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084ce:	2294      	movs	r2, #148	@ 0x94
 80084d0:	589b      	ldr	r3, [r3, r2]
 80084d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80084d4:	0010      	movs	r0, r2
 80084d6:	4798      	blx	r3
}
 80084d8:	46c0      	nop			@ (mov r8, r8)
 80084da:	46bd      	mov	sp, r7
 80084dc:	b014      	add	sp, #80	@ 0x50
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	fffffeff 	.word	0xfffffeff

080084e4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2201      	movs	r2, #1
 80084f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d10b      	bne.n	8008518 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	22ac      	movs	r2, #172	@ 0xac
 8008504:	589b      	ldr	r3, [r3, r2]
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	2158      	movs	r1, #88	@ 0x58
 800850a:	5a52      	ldrh	r2, [r2, r1]
 800850c:	0852      	lsrs	r2, r2, #1
 800850e:	b291      	uxth	r1, r2
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	0010      	movs	r0, r2
 8008514:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008516:	e005      	b.n	8008524 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2290      	movs	r2, #144	@ 0x90
 800851c:	589b      	ldr	r3, [r3, r2]
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	0010      	movs	r0, r2
 8008522:	4798      	blx	r3
}
 8008524:	46c0      	nop			@ (mov r8, r8)
 8008526:	46bd      	mov	sp, r7
 8008528:	b004      	add	sp, #16
 800852a:	bd80      	pop	{r7, pc}

0800852c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b086      	sub	sp, #24
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008538:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800853e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	2280      	movs	r2, #128	@ 0x80
 8008544:	589b      	ldr	r3, [r3, r2]
 8008546:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	2280      	movs	r2, #128	@ 0x80
 8008550:	4013      	ands	r3, r2
 8008552:	2b80      	cmp	r3, #128	@ 0x80
 8008554:	d10a      	bne.n	800856c <UART_DMAError+0x40>
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	2b21      	cmp	r3, #33	@ 0x21
 800855a:	d107      	bne.n	800856c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	2252      	movs	r2, #82	@ 0x52
 8008560:	2100      	movs	r1, #0
 8008562:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	0018      	movs	r0, r3
 8008568:	f7ff fe9c 	bl	80082a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	2240      	movs	r2, #64	@ 0x40
 8008574:	4013      	ands	r3, r2
 8008576:	2b40      	cmp	r3, #64	@ 0x40
 8008578:	d10a      	bne.n	8008590 <UART_DMAError+0x64>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2b22      	cmp	r3, #34	@ 0x22
 800857e:	d107      	bne.n	8008590 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	225a      	movs	r2, #90	@ 0x5a
 8008584:	2100      	movs	r1, #0
 8008586:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	0018      	movs	r0, r3
 800858c:	f7ff feae 	bl	80082ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	2284      	movs	r2, #132	@ 0x84
 8008594:	589b      	ldr	r3, [r3, r2]
 8008596:	2210      	movs	r2, #16
 8008598:	431a      	orrs	r2, r3
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	2184      	movs	r1, #132	@ 0x84
 800859e:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	2298      	movs	r2, #152	@ 0x98
 80085a4:	589b      	ldr	r3, [r3, r2]
 80085a6:	697a      	ldr	r2, [r7, #20]
 80085a8:	0010      	movs	r0, r2
 80085aa:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085ac:	46c0      	nop			@ (mov r8, r8)
 80085ae:	46bd      	mov	sp, r7
 80085b0:	b006      	add	sp, #24
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	225a      	movs	r2, #90	@ 0x5a
 80085c6:	2100      	movs	r1, #0
 80085c8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2252      	movs	r2, #82	@ 0x52
 80085ce:	2100      	movs	r1, #0
 80085d0:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2298      	movs	r2, #152	@ 0x98
 80085d6:	589b      	ldr	r3, [r3, r2]
 80085d8:	68fa      	ldr	r2, [r7, #12]
 80085da:	0010      	movs	r0, r2
 80085dc:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085de:	46c0      	nop			@ (mov r8, r8)
 80085e0:	46bd      	mov	sp, r7
 80085e2:	b004      	add	sp, #16
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b08a      	sub	sp, #40	@ 0x28
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085f2:	2b21      	cmp	r3, #33	@ 0x21
 80085f4:	d14c      	bne.n	8008690 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2252      	movs	r2, #82	@ 0x52
 80085fa:	5a9b      	ldrh	r3, [r3, r2]
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d132      	bne.n	8008668 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008602:	f3ef 8310 	mrs	r3, PRIMASK
 8008606:	60bb      	str	r3, [r7, #8]
  return(result);
 8008608:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800860a:	627b      	str	r3, [r7, #36]	@ 0x24
 800860c:	2301      	movs	r3, #1
 800860e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f383 8810 	msr	PRIMASK, r3
}
 8008616:	46c0      	nop			@ (mov r8, r8)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2180      	movs	r1, #128	@ 0x80
 8008624:	438a      	bics	r2, r1
 8008626:	601a      	str	r2, [r3, #0]
 8008628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800862a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	f383 8810 	msr	PRIMASK, r3
}
 8008632:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008634:	f3ef 8310 	mrs	r3, PRIMASK
 8008638:	617b      	str	r3, [r7, #20]
  return(result);
 800863a:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800863c:	623b      	str	r3, [r7, #32]
 800863e:	2301      	movs	r3, #1
 8008640:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	f383 8810 	msr	PRIMASK, r3
}
 8008648:	46c0      	nop			@ (mov r8, r8)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2140      	movs	r1, #64	@ 0x40
 8008656:	430a      	orrs	r2, r1
 8008658:	601a      	str	r2, [r3, #0]
 800865a:	6a3b      	ldr	r3, [r7, #32]
 800865c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	f383 8810 	msr	PRIMASK, r3
}
 8008664:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008666:	e013      	b.n	8008690 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800866c:	781a      	ldrb	r2, [r3, #0]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008678:	1c5a      	adds	r2, r3, #1
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2252      	movs	r2, #82	@ 0x52
 8008682:	5a9b      	ldrh	r3, [r3, r2]
 8008684:	b29b      	uxth	r3, r3
 8008686:	3b01      	subs	r3, #1
 8008688:	b299      	uxth	r1, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2252      	movs	r2, #82	@ 0x52
 800868e:	5299      	strh	r1, [r3, r2]
}
 8008690:	46c0      	nop			@ (mov r8, r8)
 8008692:	46bd      	mov	sp, r7
 8008694:	b00a      	add	sp, #40	@ 0x28
 8008696:	bd80      	pop	{r7, pc}

08008698 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b08c      	sub	sp, #48	@ 0x30
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086a4:	2b21      	cmp	r3, #33	@ 0x21
 80086a6:	d151      	bne.n	800874c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2252      	movs	r2, #82	@ 0x52
 80086ac:	5a9b      	ldrh	r3, [r3, r2]
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d132      	bne.n	800871a <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086b4:	f3ef 8310 	mrs	r3, PRIMASK
 80086b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80086ba:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80086bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086be:	2301      	movs	r3, #1
 80086c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	f383 8810 	msr	PRIMASK, r3
}
 80086c8:	46c0      	nop			@ (mov r8, r8)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2180      	movs	r1, #128	@ 0x80
 80086d6:	438a      	bics	r2, r1
 80086d8:	601a      	str	r2, [r3, #0]
 80086da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f383 8810 	msr	PRIMASK, r3
}
 80086e4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086e6:	f3ef 8310 	mrs	r3, PRIMASK
 80086ea:	61bb      	str	r3, [r7, #24]
  return(result);
 80086ec:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80086f0:	2301      	movs	r3, #1
 80086f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	f383 8810 	msr	PRIMASK, r3
}
 80086fa:	46c0      	nop			@ (mov r8, r8)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2140      	movs	r1, #64	@ 0x40
 8008708:	430a      	orrs	r2, r1
 800870a:	601a      	str	r2, [r3, #0]
 800870c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008710:	6a3b      	ldr	r3, [r7, #32]
 8008712:	f383 8810 	msr	PRIMASK, r3
}
 8008716:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008718:	e018      	b.n	800874c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800871e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008722:	881a      	ldrh	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	05d2      	lsls	r2, r2, #23
 800872a:	0dd2      	lsrs	r2, r2, #23
 800872c:	b292      	uxth	r2, r2
 800872e:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008734:	1c9a      	adds	r2, r3, #2
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2252      	movs	r2, #82	@ 0x52
 800873e:	5a9b      	ldrh	r3, [r3, r2]
 8008740:	b29b      	uxth	r3, r3
 8008742:	3b01      	subs	r3, #1
 8008744:	b299      	uxth	r1, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2252      	movs	r2, #82	@ 0x52
 800874a:	5299      	strh	r1, [r3, r2]
}
 800874c:	46c0      	nop			@ (mov r8, r8)
 800874e:	46bd      	mov	sp, r7
 8008750:	b00c      	add	sp, #48	@ 0x30
 8008752:	bd80      	pop	{r7, pc}

08008754 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b086      	sub	sp, #24
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800875c:	f3ef 8310 	mrs	r3, PRIMASK
 8008760:	60bb      	str	r3, [r7, #8]
  return(result);
 8008762:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008764:	617b      	str	r3, [r7, #20]
 8008766:	2301      	movs	r3, #1
 8008768:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f383 8810 	msr	PRIMASK, r3
}
 8008770:	46c0      	nop			@ (mov r8, r8)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2140      	movs	r1, #64	@ 0x40
 800877e:	438a      	bics	r2, r1
 8008780:	601a      	str	r2, [r3, #0]
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	f383 8810 	msr	PRIMASK, r3
}
 800878c:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2220      	movs	r2, #32
 8008792:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	228c      	movs	r2, #140	@ 0x8c
 800879e:	589b      	ldr	r3, [r3, r2]
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	0010      	movs	r0, r2
 80087a4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087a6:	46c0      	nop			@ (mov r8, r8)
 80087a8:	46bd      	mov	sp, r7
 80087aa:	b006      	add	sp, #24
 80087ac:	bd80      	pop	{r7, pc}

080087ae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b082      	sub	sp, #8
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80087b6:	46c0      	nop			@ (mov r8, r8)
 80087b8:	46bd      	mov	sp, r7
 80087ba:	b002      	add	sp, #8
 80087bc:	bd80      	pop	{r7, pc}

080087be <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087be:	b5b0      	push	{r4, r5, r7, lr}
 80087c0:	b08a      	sub	sp, #40	@ 0x28
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	60f8      	str	r0, [r7, #12]
 80087c6:	60b9      	str	r1, [r7, #8]
 80087c8:	1dbb      	adds	r3, r7, #6
 80087ca:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2280      	movs	r2, #128	@ 0x80
 80087d0:	589b      	ldr	r3, [r3, r2]
 80087d2:	2b20      	cmp	r3, #32
 80087d4:	d156      	bne.n	8008884 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d003      	beq.n	80087e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80087dc:	1dbb      	adds	r3, r7, #6
 80087de:	881b      	ldrh	r3, [r3, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d101      	bne.n	80087e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	e04e      	b.n	8008886 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	689a      	ldr	r2, [r3, #8]
 80087ec:	2380      	movs	r3, #128	@ 0x80
 80087ee:	015b      	lsls	r3, r3, #5
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d109      	bne.n	8008808 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d105      	bne.n	8008808 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	2201      	movs	r2, #1
 8008800:	4013      	ands	r3, r2
 8008802:	d001      	beq.n	8008808 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e03e      	b.n	8008886 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2201      	movs	r2, #1
 800880c:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008814:	2527      	movs	r5, #39	@ 0x27
 8008816:	197c      	adds	r4, r7, r5
 8008818:	1dbb      	adds	r3, r7, #6
 800881a:	881a      	ldrh	r2, [r3, #0]
 800881c:	68b9      	ldr	r1, [r7, #8]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	0018      	movs	r0, r3
 8008822:	f7ff fc9f 	bl	8008164 <UART_Start_Receive_DMA>
 8008826:	0003      	movs	r3, r0
 8008828:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800882a:	197b      	adds	r3, r7, r5
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d124      	bne.n	800887c <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008836:	2b01      	cmp	r3, #1
 8008838:	d11c      	bne.n	8008874 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2210      	movs	r2, #16
 8008840:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008842:	f3ef 8310 	mrs	r3, PRIMASK
 8008846:	617b      	str	r3, [r7, #20]
  return(result);
 8008848:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800884a:	623b      	str	r3, [r7, #32]
 800884c:	2301      	movs	r3, #1
 800884e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	f383 8810 	msr	PRIMASK, r3
}
 8008856:	46c0      	nop			@ (mov r8, r8)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2110      	movs	r1, #16
 8008864:	430a      	orrs	r2, r1
 8008866:	601a      	str	r2, [r3, #0]
 8008868:	6a3b      	ldr	r3, [r7, #32]
 800886a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	f383 8810 	msr	PRIMASK, r3
}
 8008872:	e003      	b.n	800887c <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008874:	2327      	movs	r3, #39	@ 0x27
 8008876:	18fb      	adds	r3, r7, r3
 8008878:	2201      	movs	r2, #1
 800887a:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800887c:	2327      	movs	r3, #39	@ 0x27
 800887e:	18fb      	adds	r3, r7, r3
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	e000      	b.n	8008886 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8008884:	2302      	movs	r3, #2
  }
}
 8008886:	0018      	movs	r0, r3
 8008888:	46bd      	mov	sp, r7
 800888a:	b00a      	add	sp, #40	@ 0x28
 800888c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008890 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2244      	movs	r2, #68	@ 0x44
 800889c:	2100      	movs	r1, #0
 800889e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80088a0:	4b05      	ldr	r3, [pc, #20]	@ (80088b8 <USB_EnableGlobalInt+0x28>)
 80088a2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	b299      	uxth	r1, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2240      	movs	r2, #64	@ 0x40
 80088ac:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	0018      	movs	r0, r3
 80088b2:	46bd      	mov	sp, r7
 80088b4:	b004      	add	sp, #16
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	0000bf80 	.word	0x0000bf80

080088bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80088c4:	4b09      	ldr	r3, [pc, #36]	@ (80088ec <USB_DisableGlobalInt+0x30>)
 80088c6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2240      	movs	r2, #64	@ 0x40
 80088cc:	5a9b      	ldrh	r3, [r3, r2]
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	b292      	uxth	r2, r2
 80088d4:	43d2      	mvns	r2, r2
 80088d6:	b292      	uxth	r2, r2
 80088d8:	4013      	ands	r3, r2
 80088da:	b299      	uxth	r1, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2240      	movs	r2, #64	@ 0x40
 80088e0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	0018      	movs	r0, r3
 80088e6:	46bd      	mov	sp, r7
 80088e8:	b004      	add	sp, #16
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	0000bf80 	.word	0x0000bf80

080088f0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	1d3b      	adds	r3, r7, #4
 80088fa:	6019      	str	r1, [r3, #0]
 80088fc:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2240      	movs	r2, #64	@ 0x40
 8008902:	2101      	movs	r1, #1
 8008904:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2240      	movs	r2, #64	@ 0x40
 800890a:	2100      	movs	r1, #0
 800890c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2244      	movs	r2, #68	@ 0x44
 8008912:	2100      	movs	r1, #0
 8008914:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2250      	movs	r2, #80	@ 0x50
 800891a:	2100      	movs	r1, #0
 800891c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	0018      	movs	r0, r3
 8008922:	46bd      	mov	sp, r7
 8008924:	b004      	add	sp, #16
 8008926:	bd80      	pop	{r7, pc}

08008928 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b09c      	sub	sp, #112	@ 0x70
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008932:	236f      	movs	r3, #111	@ 0x6f
 8008934:	18fb      	adds	r3, r7, r3
 8008936:	2200      	movs	r2, #0
 8008938:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	18d3      	adds	r3, r2, r3
 8008944:	881b      	ldrh	r3, [r3, #0]
 8008946:	b29a      	uxth	r2, r3
 8008948:	236c      	movs	r3, #108	@ 0x6c
 800894a:	18fb      	adds	r3, r7, r3
 800894c:	49a1      	ldr	r1, [pc, #644]	@ (8008bd4 <USB_ActivateEndpoint+0x2ac>)
 800894e:	400a      	ands	r2, r1
 8008950:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	78db      	ldrb	r3, [r3, #3]
 8008956:	2b03      	cmp	r3, #3
 8008958:	d017      	beq.n	800898a <USB_ActivateEndpoint+0x62>
 800895a:	dc28      	bgt.n	80089ae <USB_ActivateEndpoint+0x86>
 800895c:	2b02      	cmp	r3, #2
 800895e:	d00e      	beq.n	800897e <USB_ActivateEndpoint+0x56>
 8008960:	dc25      	bgt.n	80089ae <USB_ActivateEndpoint+0x86>
 8008962:	2b00      	cmp	r3, #0
 8008964:	d002      	beq.n	800896c <USB_ActivateEndpoint+0x44>
 8008966:	2b01      	cmp	r3, #1
 8008968:	d018      	beq.n	800899c <USB_ActivateEndpoint+0x74>
 800896a:	e020      	b.n	80089ae <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800896c:	226c      	movs	r2, #108	@ 0x6c
 800896e:	18bb      	adds	r3, r7, r2
 8008970:	18ba      	adds	r2, r7, r2
 8008972:	8812      	ldrh	r2, [r2, #0]
 8008974:	2180      	movs	r1, #128	@ 0x80
 8008976:	0089      	lsls	r1, r1, #2
 8008978:	430a      	orrs	r2, r1
 800897a:	801a      	strh	r2, [r3, #0]
      break;
 800897c:	e01c      	b.n	80089b8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800897e:	226c      	movs	r2, #108	@ 0x6c
 8008980:	18bb      	adds	r3, r7, r2
 8008982:	18ba      	adds	r2, r7, r2
 8008984:	8812      	ldrh	r2, [r2, #0]
 8008986:	801a      	strh	r2, [r3, #0]
      break;
 8008988:	e016      	b.n	80089b8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800898a:	226c      	movs	r2, #108	@ 0x6c
 800898c:	18bb      	adds	r3, r7, r2
 800898e:	18ba      	adds	r2, r7, r2
 8008990:	8812      	ldrh	r2, [r2, #0]
 8008992:	21c0      	movs	r1, #192	@ 0xc0
 8008994:	00c9      	lsls	r1, r1, #3
 8008996:	430a      	orrs	r2, r1
 8008998:	801a      	strh	r2, [r3, #0]
      break;
 800899a:	e00d      	b.n	80089b8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800899c:	226c      	movs	r2, #108	@ 0x6c
 800899e:	18bb      	adds	r3, r7, r2
 80089a0:	18ba      	adds	r2, r7, r2
 80089a2:	8812      	ldrh	r2, [r2, #0]
 80089a4:	2180      	movs	r1, #128	@ 0x80
 80089a6:	00c9      	lsls	r1, r1, #3
 80089a8:	430a      	orrs	r2, r1
 80089aa:	801a      	strh	r2, [r3, #0]
      break;
 80089ac:	e004      	b.n	80089b8 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80089ae:	236f      	movs	r3, #111	@ 0x6f
 80089b0:	18fb      	adds	r3, r7, r3
 80089b2:	2201      	movs	r2, #1
 80089b4:	701a      	strb	r2, [r3, #0]
      break;
 80089b6:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	18d3      	adds	r3, r2, r3
 80089c2:	226c      	movs	r2, #108	@ 0x6c
 80089c4:	18ba      	adds	r2, r7, r2
 80089c6:	8812      	ldrh	r2, [r2, #0]
 80089c8:	4983      	ldr	r1, [pc, #524]	@ (8008bd8 <USB_ActivateEndpoint+0x2b0>)
 80089ca:	430a      	orrs	r2, r1
 80089cc:	b292      	uxth	r2, r2
 80089ce:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	18d3      	adds	r3, r2, r3
 80089da:	881b      	ldrh	r3, [r3, #0]
 80089dc:	b29b      	uxth	r3, r3
 80089de:	b21b      	sxth	r3, r3
 80089e0:	4a7e      	ldr	r2, [pc, #504]	@ (8008bdc <USB_ActivateEndpoint+0x2b4>)
 80089e2:	4013      	ands	r3, r2
 80089e4:	b21a      	sxth	r2, r3
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	b21b      	sxth	r3, r3
 80089ec:	4313      	orrs	r3, r2
 80089ee:	b21a      	sxth	r2, r3
 80089f0:	2166      	movs	r1, #102	@ 0x66
 80089f2:	187b      	adds	r3, r7, r1
 80089f4:	801a      	strh	r2, [r3, #0]
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	18d3      	adds	r3, r2, r3
 8008a00:	187a      	adds	r2, r7, r1
 8008a02:	8812      	ldrh	r2, [r2, #0]
 8008a04:	4974      	ldr	r1, [pc, #464]	@ (8008bd8 <USB_ActivateEndpoint+0x2b0>)
 8008a06:	430a      	orrs	r2, r1
 8008a08:	b292      	uxth	r2, r2
 8008a0a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	7b1b      	ldrb	r3, [r3, #12]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d000      	beq.n	8008a16 <USB_ActivateEndpoint+0xee>
 8008a14:	e177      	b.n	8008d06 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	785b      	ldrb	r3, [r3, #1]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d100      	bne.n	8008a20 <USB_ActivateEndpoint+0xf8>
 8008a1e:	e07a      	b.n	8008b16 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	61bb      	str	r3, [r7, #24]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2250      	movs	r2, #80	@ 0x50
 8008a28:	5a9b      	ldrh	r3, [r3, r2]
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	001a      	movs	r2, r3
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	189b      	adds	r3, r3, r2
 8008a32:	61bb      	str	r3, [r7, #24]
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	00da      	lsls	r2, r3, #3
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	18d3      	adds	r3, r2, r3
 8008a3e:	2280      	movs	r2, #128	@ 0x80
 8008a40:	00d2      	lsls	r2, r2, #3
 8008a42:	4694      	mov	ip, r2
 8008a44:	4463      	add	r3, ip
 8008a46:	617b      	str	r3, [r7, #20]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	88db      	ldrh	r3, [r3, #6]
 8008a4c:	085b      	lsrs	r3, r3, #1
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	18db      	adds	r3, r3, r3
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	18d2      	adds	r2, r2, r3
 8008a62:	2112      	movs	r1, #18
 8008a64:	187b      	adds	r3, r7, r1
 8008a66:	8812      	ldrh	r2, [r2, #0]
 8008a68:	801a      	strh	r2, [r3, #0]
 8008a6a:	187b      	adds	r3, r7, r1
 8008a6c:	881b      	ldrh	r3, [r3, #0]
 8008a6e:	2240      	movs	r2, #64	@ 0x40
 8008a70:	4013      	ands	r3, r2
 8008a72:	d016      	beq.n	8008aa2 <USB_ActivateEndpoint+0x17a>
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	18d3      	adds	r3, r2, r3
 8008a7e:	881b      	ldrh	r3, [r3, #0]
 8008a80:	b29a      	uxth	r2, r3
 8008a82:	2010      	movs	r0, #16
 8008a84:	183b      	adds	r3, r7, r0
 8008a86:	4955      	ldr	r1, [pc, #340]	@ (8008bdc <USB_ActivateEndpoint+0x2b4>)
 8008a88:	400a      	ands	r2, r1
 8008a8a:	801a      	strh	r2, [r3, #0]
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	18d3      	adds	r3, r2, r3
 8008a96:	183a      	adds	r2, r7, r0
 8008a98:	8812      	ldrh	r2, [r2, #0]
 8008a9a:	4951      	ldr	r1, [pc, #324]	@ (8008be0 <USB_ActivateEndpoint+0x2b8>)
 8008a9c:	430a      	orrs	r2, r1
 8008a9e:	b292      	uxth	r2, r2
 8008aa0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	78db      	ldrb	r3, [r3, #3]
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d01d      	beq.n	8008ae6 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	18d3      	adds	r3, r2, r3
 8008ab4:	881b      	ldrh	r3, [r3, #0]
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	200c      	movs	r0, #12
 8008aba:	183b      	adds	r3, r7, r0
 8008abc:	4949      	ldr	r1, [pc, #292]	@ (8008be4 <USB_ActivateEndpoint+0x2bc>)
 8008abe:	400a      	ands	r2, r1
 8008ac0:	801a      	strh	r2, [r3, #0]
 8008ac2:	183b      	adds	r3, r7, r0
 8008ac4:	183a      	adds	r2, r7, r0
 8008ac6:	8812      	ldrh	r2, [r2, #0]
 8008ac8:	2120      	movs	r1, #32
 8008aca:	404a      	eors	r2, r1
 8008acc:	801a      	strh	r2, [r3, #0]
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	18d3      	adds	r3, r2, r3
 8008ad8:	183a      	adds	r2, r7, r0
 8008ada:	8812      	ldrh	r2, [r2, #0]
 8008adc:	493e      	ldr	r1, [pc, #248]	@ (8008bd8 <USB_ActivateEndpoint+0x2b0>)
 8008ade:	430a      	orrs	r2, r1
 8008ae0:	b292      	uxth	r2, r2
 8008ae2:	801a      	strh	r2, [r3, #0]
 8008ae4:	e2b5      	b.n	8009052 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	18d3      	adds	r3, r2, r3
 8008af0:	881b      	ldrh	r3, [r3, #0]
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	200e      	movs	r0, #14
 8008af6:	183b      	adds	r3, r7, r0
 8008af8:	493a      	ldr	r1, [pc, #232]	@ (8008be4 <USB_ActivateEndpoint+0x2bc>)
 8008afa:	400a      	ands	r2, r1
 8008afc:	801a      	strh	r2, [r3, #0]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	18d3      	adds	r3, r2, r3
 8008b08:	183a      	adds	r2, r7, r0
 8008b0a:	8812      	ldrh	r2, [r2, #0]
 8008b0c:	4932      	ldr	r1, [pc, #200]	@ (8008bd8 <USB_ActivateEndpoint+0x2b0>)
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	b292      	uxth	r2, r2
 8008b12:	801a      	strh	r2, [r3, #0]
 8008b14:	e29d      	b.n	8009052 <USB_ActivateEndpoint+0x72a>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2250      	movs	r2, #80	@ 0x50
 8008b1e:	5a9b      	ldrh	r3, [r3, r2]
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	001a      	movs	r2, r3
 8008b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b26:	189b      	adds	r3, r3, r2
 8008b28:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	00da      	lsls	r2, r3, #3
 8008b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b32:	18d3      	adds	r3, r2, r3
 8008b34:	4a2c      	ldr	r2, [pc, #176]	@ (8008be8 <USB_ActivateEndpoint+0x2c0>)
 8008b36:	4694      	mov	ip, r2
 8008b38:	4463      	add	r3, ip
 8008b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	88db      	ldrh	r3, [r3, #6]
 8008b40:	085b      	lsrs	r3, r3, #1
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	18db      	adds	r3, r3, r3
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b4a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2250      	movs	r2, #80	@ 0x50
 8008b54:	5a9b      	ldrh	r3, [r3, r2]
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	001a      	movs	r2, r3
 8008b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b5c:	189b      	adds	r3, r3, r2
 8008b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	00da      	lsls	r2, r3, #3
 8008b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b68:	18d3      	adds	r3, r2, r3
 8008b6a:	4a20      	ldr	r2, [pc, #128]	@ (8008bec <USB_ActivateEndpoint+0x2c4>)
 8008b6c:	4694      	mov	ip, r2
 8008b6e:	4463      	add	r3, ip
 8008b70:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b74:	881b      	ldrh	r3, [r3, #0]
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	059b      	lsls	r3, r3, #22
 8008b7a:	0d9b      	lsrs	r3, r3, #22
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b80:	801a      	strh	r2, [r3, #0]
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d108      	bne.n	8008b9c <USB_ActivateEndpoint+0x274>
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8c:	881b      	ldrh	r3, [r3, #0]
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	4a17      	ldr	r2, [pc, #92]	@ (8008bf0 <USB_ActivateEndpoint+0x2c8>)
 8008b92:	4313      	orrs	r3, r2
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b98:	801a      	strh	r2, [r3, #0]
 8008b9a:	e045      	b.n	8008c28 <USB_ActivateEndpoint+0x300>
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	691b      	ldr	r3, [r3, #16]
 8008ba0:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ba2:	d827      	bhi.n	8008bf4 <USB_ActivateEndpoint+0x2cc>
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	691b      	ldr	r3, [r3, #16]
 8008ba8:	085b      	lsrs	r3, r3, #1
 8008baa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	d002      	beq.n	8008bbc <USB_ActivateEndpoint+0x294>
 8008bb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008bb8:	3301      	adds	r3, #1
 8008bba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bbe:	881b      	ldrh	r3, [r3, #0]
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	029b      	lsls	r3, r3, #10
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd0:	801a      	strh	r2, [r3, #0]
 8008bd2:	e029      	b.n	8008c28 <USB_ActivateEndpoint+0x300>
 8008bd4:	ffff898f 	.word	0xffff898f
 8008bd8:	ffff8080 	.word	0xffff8080
 8008bdc:	ffff8f8f 	.word	0xffff8f8f
 8008be0:	ffff80c0 	.word	0xffff80c0
 8008be4:	ffff8fbf 	.word	0xffff8fbf
 8008be8:	00000404 	.word	0x00000404
 8008bec:	00000406 	.word	0x00000406
 8008bf0:	ffff8000 	.word	0xffff8000
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	095b      	lsrs	r3, r3, #5
 8008bfa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	221f      	movs	r2, #31
 8008c02:	4013      	ands	r3, r2
 8008c04:	d102      	bne.n	8008c0c <USB_ActivateEndpoint+0x2e4>
 8008c06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c0e:	881b      	ldrh	r3, [r3, #0]
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	029b      	lsls	r3, r3, #10
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	4ab5      	ldr	r2, [pc, #724]	@ (8008ef4 <USB_ActivateEndpoint+0x5cc>)
 8008c20:	4313      	orrs	r3, r2
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c26:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	18d2      	adds	r2, r2, r3
 8008c32:	2122      	movs	r1, #34	@ 0x22
 8008c34:	187b      	adds	r3, r7, r1
 8008c36:	8812      	ldrh	r2, [r2, #0]
 8008c38:	801a      	strh	r2, [r3, #0]
 8008c3a:	187b      	adds	r3, r7, r1
 8008c3c:	881a      	ldrh	r2, [r3, #0]
 8008c3e:	2380      	movs	r3, #128	@ 0x80
 8008c40:	01db      	lsls	r3, r3, #7
 8008c42:	4013      	ands	r3, r2
 8008c44:	d016      	beq.n	8008c74 <USB_ActivateEndpoint+0x34c>
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	18d3      	adds	r3, r2, r3
 8008c50:	881b      	ldrh	r3, [r3, #0]
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	2020      	movs	r0, #32
 8008c56:	183b      	adds	r3, r7, r0
 8008c58:	49a7      	ldr	r1, [pc, #668]	@ (8008ef8 <USB_ActivateEndpoint+0x5d0>)
 8008c5a:	400a      	ands	r2, r1
 8008c5c:	801a      	strh	r2, [r3, #0]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	18d3      	adds	r3, r2, r3
 8008c68:	183a      	adds	r2, r7, r0
 8008c6a:	8812      	ldrh	r2, [r2, #0]
 8008c6c:	49a3      	ldr	r1, [pc, #652]	@ (8008efc <USB_ActivateEndpoint+0x5d4>)
 8008c6e:	430a      	orrs	r2, r1
 8008c70:	b292      	uxth	r2, r2
 8008c72:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d125      	bne.n	8008cc8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	18d3      	adds	r3, r2, r3
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	201c      	movs	r0, #28
 8008c8c:	183b      	adds	r3, r7, r0
 8008c8e:	499c      	ldr	r1, [pc, #624]	@ (8008f00 <USB_ActivateEndpoint+0x5d8>)
 8008c90:	400a      	ands	r2, r1
 8008c92:	801a      	strh	r2, [r3, #0]
 8008c94:	183b      	adds	r3, r7, r0
 8008c96:	183a      	adds	r2, r7, r0
 8008c98:	8812      	ldrh	r2, [r2, #0]
 8008c9a:	2180      	movs	r1, #128	@ 0x80
 8008c9c:	0149      	lsls	r1, r1, #5
 8008c9e:	404a      	eors	r2, r1
 8008ca0:	801a      	strh	r2, [r3, #0]
 8008ca2:	183b      	adds	r3, r7, r0
 8008ca4:	183a      	adds	r2, r7, r0
 8008ca6:	8812      	ldrh	r2, [r2, #0]
 8008ca8:	2180      	movs	r1, #128	@ 0x80
 8008caa:	0189      	lsls	r1, r1, #6
 8008cac:	404a      	eors	r2, r1
 8008cae:	801a      	strh	r2, [r3, #0]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	18d3      	adds	r3, r2, r3
 8008cba:	183a      	adds	r2, r7, r0
 8008cbc:	8812      	ldrh	r2, [r2, #0]
 8008cbe:	4991      	ldr	r1, [pc, #580]	@ (8008f04 <USB_ActivateEndpoint+0x5dc>)
 8008cc0:	430a      	orrs	r2, r1
 8008cc2:	b292      	uxth	r2, r2
 8008cc4:	801a      	strh	r2, [r3, #0]
 8008cc6:	e1c4      	b.n	8009052 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	18d3      	adds	r3, r2, r3
 8008cd2:	881b      	ldrh	r3, [r3, #0]
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	201e      	movs	r0, #30
 8008cd8:	183b      	adds	r3, r7, r0
 8008cda:	4989      	ldr	r1, [pc, #548]	@ (8008f00 <USB_ActivateEndpoint+0x5d8>)
 8008cdc:	400a      	ands	r2, r1
 8008cde:	801a      	strh	r2, [r3, #0]
 8008ce0:	183b      	adds	r3, r7, r0
 8008ce2:	183a      	adds	r2, r7, r0
 8008ce4:	8812      	ldrh	r2, [r2, #0]
 8008ce6:	2180      	movs	r1, #128	@ 0x80
 8008ce8:	0189      	lsls	r1, r1, #6
 8008cea:	404a      	eors	r2, r1
 8008cec:	801a      	strh	r2, [r3, #0]
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	18d3      	adds	r3, r2, r3
 8008cf8:	183a      	adds	r2, r7, r0
 8008cfa:	8812      	ldrh	r2, [r2, #0]
 8008cfc:	4981      	ldr	r1, [pc, #516]	@ (8008f04 <USB_ActivateEndpoint+0x5dc>)
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	b292      	uxth	r2, r2
 8008d02:	801a      	strh	r2, [r3, #0]
 8008d04:	e1a5      	b.n	8009052 <USB_ActivateEndpoint+0x72a>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	78db      	ldrb	r3, [r3, #3]
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d117      	bne.n	8008d3e <USB_ActivateEndpoint+0x416>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	18d3      	adds	r3, r2, r3
 8008d18:	881b      	ldrh	r3, [r3, #0]
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	2062      	movs	r0, #98	@ 0x62
 8008d1e:	183b      	adds	r3, r7, r0
 8008d20:	4975      	ldr	r1, [pc, #468]	@ (8008ef8 <USB_ActivateEndpoint+0x5d0>)
 8008d22:	400a      	ands	r2, r1
 8008d24:	801a      	strh	r2, [r3, #0]
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	18d3      	adds	r3, r2, r3
 8008d30:	183a      	adds	r2, r7, r0
 8008d32:	8812      	ldrh	r2, [r2, #0]
 8008d34:	4974      	ldr	r1, [pc, #464]	@ (8008f08 <USB_ActivateEndpoint+0x5e0>)
 8008d36:	430a      	orrs	r2, r1
 8008d38:	b292      	uxth	r2, r2
 8008d3a:	801a      	strh	r2, [r3, #0]
 8008d3c:	e016      	b.n	8008d6c <USB_ActivateEndpoint+0x444>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	18d3      	adds	r3, r2, r3
 8008d48:	881b      	ldrh	r3, [r3, #0]
 8008d4a:	b29a      	uxth	r2, r3
 8008d4c:	2064      	movs	r0, #100	@ 0x64
 8008d4e:	183b      	adds	r3, r7, r0
 8008d50:	496e      	ldr	r1, [pc, #440]	@ (8008f0c <USB_ActivateEndpoint+0x5e4>)
 8008d52:	400a      	ands	r2, r1
 8008d54:	801a      	strh	r2, [r3, #0]
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	18d3      	adds	r3, r2, r3
 8008d60:	183a      	adds	r2, r7, r0
 8008d62:	8812      	ldrh	r2, [r2, #0]
 8008d64:	4967      	ldr	r1, [pc, #412]	@ (8008f04 <USB_ActivateEndpoint+0x5dc>)
 8008d66:	430a      	orrs	r2, r1
 8008d68:	b292      	uxth	r2, r2
 8008d6a:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2250      	movs	r2, #80	@ 0x50
 8008d74:	5a9b      	ldrh	r3, [r3, r2]
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	001a      	movs	r2, r3
 8008d7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d7c:	189b      	adds	r3, r3, r2
 8008d7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	00da      	lsls	r2, r3, #3
 8008d86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d88:	18d3      	adds	r3, r2, r3
 8008d8a:	2280      	movs	r2, #128	@ 0x80
 8008d8c:	00d2      	lsls	r2, r2, #3
 8008d8e:	4694      	mov	ip, r2
 8008d90:	4463      	add	r3, ip
 8008d92:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	891b      	ldrh	r3, [r3, #8]
 8008d98:	085b      	lsrs	r3, r3, #1
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	18db      	adds	r3, r3, r3
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008da2:	801a      	strh	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	657b      	str	r3, [r7, #84]	@ 0x54
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2250      	movs	r2, #80	@ 0x50
 8008dac:	5a9b      	ldrh	r3, [r3, r2]
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	001a      	movs	r2, r3
 8008db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008db4:	189b      	adds	r3, r3, r2
 8008db6:	657b      	str	r3, [r7, #84]	@ 0x54
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	00da      	lsls	r2, r3, #3
 8008dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008dc0:	18d3      	adds	r3, r2, r3
 8008dc2:	4a53      	ldr	r2, [pc, #332]	@ (8008f10 <USB_ActivateEndpoint+0x5e8>)
 8008dc4:	4694      	mov	ip, r2
 8008dc6:	4463      	add	r3, ip
 8008dc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	895b      	ldrh	r3, [r3, #10]
 8008dce:	085b      	lsrs	r3, r3, #1
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	18db      	adds	r3, r3, r3
 8008dd4:	b29a      	uxth	r2, r3
 8008dd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008dd8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	785b      	ldrb	r3, [r3, #1]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d000      	beq.n	8008de4 <USB_ActivateEndpoint+0x4bc>
 8008de2:	e09b      	b.n	8008f1c <USB_ActivateEndpoint+0x5f4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	18d2      	adds	r2, r2, r3
 8008dee:	2140      	movs	r1, #64	@ 0x40
 8008df0:	187b      	adds	r3, r7, r1
 8008df2:	8812      	ldrh	r2, [r2, #0]
 8008df4:	801a      	strh	r2, [r3, #0]
 8008df6:	187b      	adds	r3, r7, r1
 8008df8:	881a      	ldrh	r2, [r3, #0]
 8008dfa:	2380      	movs	r3, #128	@ 0x80
 8008dfc:	01db      	lsls	r3, r3, #7
 8008dfe:	4013      	ands	r3, r2
 8008e00:	d016      	beq.n	8008e30 <USB_ActivateEndpoint+0x508>
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	18d3      	adds	r3, r2, r3
 8008e0c:	881b      	ldrh	r3, [r3, #0]
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	203e      	movs	r0, #62	@ 0x3e
 8008e12:	183b      	adds	r3, r7, r0
 8008e14:	4938      	ldr	r1, [pc, #224]	@ (8008ef8 <USB_ActivateEndpoint+0x5d0>)
 8008e16:	400a      	ands	r2, r1
 8008e18:	801a      	strh	r2, [r3, #0]
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	18d3      	adds	r3, r2, r3
 8008e24:	183a      	adds	r2, r7, r0
 8008e26:	8812      	ldrh	r2, [r2, #0]
 8008e28:	4934      	ldr	r1, [pc, #208]	@ (8008efc <USB_ActivateEndpoint+0x5d4>)
 8008e2a:	430a      	orrs	r2, r1
 8008e2c:	b292      	uxth	r2, r2
 8008e2e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	18d2      	adds	r2, r2, r3
 8008e3a:	213c      	movs	r1, #60	@ 0x3c
 8008e3c:	187b      	adds	r3, r7, r1
 8008e3e:	8812      	ldrh	r2, [r2, #0]
 8008e40:	801a      	strh	r2, [r3, #0]
 8008e42:	187b      	adds	r3, r7, r1
 8008e44:	881b      	ldrh	r3, [r3, #0]
 8008e46:	2240      	movs	r2, #64	@ 0x40
 8008e48:	4013      	ands	r3, r2
 8008e4a:	d016      	beq.n	8008e7a <USB_ActivateEndpoint+0x552>
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	18d3      	adds	r3, r2, r3
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	203a      	movs	r0, #58	@ 0x3a
 8008e5c:	183b      	adds	r3, r7, r0
 8008e5e:	4926      	ldr	r1, [pc, #152]	@ (8008ef8 <USB_ActivateEndpoint+0x5d0>)
 8008e60:	400a      	ands	r2, r1
 8008e62:	801a      	strh	r2, [r3, #0]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	18d3      	adds	r3, r2, r3
 8008e6e:	183a      	adds	r2, r7, r0
 8008e70:	8812      	ldrh	r2, [r2, #0]
 8008e72:	4928      	ldr	r1, [pc, #160]	@ (8008f14 <USB_ActivateEndpoint+0x5ec>)
 8008e74:	430a      	orrs	r2, r1
 8008e76:	b292      	uxth	r2, r2
 8008e78:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	18d3      	adds	r3, r2, r3
 8008e84:	881b      	ldrh	r3, [r3, #0]
 8008e86:	b29a      	uxth	r2, r3
 8008e88:	2038      	movs	r0, #56	@ 0x38
 8008e8a:	183b      	adds	r3, r7, r0
 8008e8c:	491c      	ldr	r1, [pc, #112]	@ (8008f00 <USB_ActivateEndpoint+0x5d8>)
 8008e8e:	400a      	ands	r2, r1
 8008e90:	801a      	strh	r2, [r3, #0]
 8008e92:	183b      	adds	r3, r7, r0
 8008e94:	183a      	adds	r2, r7, r0
 8008e96:	8812      	ldrh	r2, [r2, #0]
 8008e98:	2180      	movs	r1, #128	@ 0x80
 8008e9a:	0149      	lsls	r1, r1, #5
 8008e9c:	404a      	eors	r2, r1
 8008e9e:	801a      	strh	r2, [r3, #0]
 8008ea0:	183b      	adds	r3, r7, r0
 8008ea2:	183a      	adds	r2, r7, r0
 8008ea4:	8812      	ldrh	r2, [r2, #0]
 8008ea6:	2180      	movs	r1, #128	@ 0x80
 8008ea8:	0189      	lsls	r1, r1, #6
 8008eaa:	404a      	eors	r2, r1
 8008eac:	801a      	strh	r2, [r3, #0]
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	18d3      	adds	r3, r2, r3
 8008eb8:	183a      	adds	r2, r7, r0
 8008eba:	8812      	ldrh	r2, [r2, #0]
 8008ebc:	4911      	ldr	r1, [pc, #68]	@ (8008f04 <USB_ActivateEndpoint+0x5dc>)
 8008ebe:	430a      	orrs	r2, r1
 8008ec0:	b292      	uxth	r2, r2
 8008ec2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	18d3      	adds	r3, r2, r3
 8008ece:	881b      	ldrh	r3, [r3, #0]
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	2036      	movs	r0, #54	@ 0x36
 8008ed4:	183b      	adds	r3, r7, r0
 8008ed6:	4910      	ldr	r1, [pc, #64]	@ (8008f18 <USB_ActivateEndpoint+0x5f0>)
 8008ed8:	400a      	ands	r2, r1
 8008eda:	801a      	strh	r2, [r3, #0]
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	18d3      	adds	r3, r2, r3
 8008ee6:	183a      	adds	r2, r7, r0
 8008ee8:	8812      	ldrh	r2, [r2, #0]
 8008eea:	4906      	ldr	r1, [pc, #24]	@ (8008f04 <USB_ActivateEndpoint+0x5dc>)
 8008eec:	430a      	orrs	r2, r1
 8008eee:	b292      	uxth	r2, r2
 8008ef0:	801a      	strh	r2, [r3, #0]
 8008ef2:	e0ae      	b.n	8009052 <USB_ActivateEndpoint+0x72a>
 8008ef4:	ffff8000 	.word	0xffff8000
 8008ef8:	ffff8f8f 	.word	0xffff8f8f
 8008efc:	ffffc080 	.word	0xffffc080
 8008f00:	ffffbf8f 	.word	0xffffbf8f
 8008f04:	ffff8080 	.word	0xffff8080
 8008f08:	ffff8180 	.word	0xffff8180
 8008f0c:	ffff8e8f 	.word	0xffff8e8f
 8008f10:	00000404 	.word	0x00000404
 8008f14:	ffff80c0 	.word	0xffff80c0
 8008f18:	ffff8fbf 	.word	0xffff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	18d2      	adds	r2, r2, r3
 8008f26:	214e      	movs	r1, #78	@ 0x4e
 8008f28:	187b      	adds	r3, r7, r1
 8008f2a:	8812      	ldrh	r2, [r2, #0]
 8008f2c:	801a      	strh	r2, [r3, #0]
 8008f2e:	187b      	adds	r3, r7, r1
 8008f30:	881a      	ldrh	r2, [r3, #0]
 8008f32:	2380      	movs	r3, #128	@ 0x80
 8008f34:	01db      	lsls	r3, r3, #7
 8008f36:	4013      	ands	r3, r2
 8008f38:	d016      	beq.n	8008f68 <USB_ActivateEndpoint+0x640>
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	18d3      	adds	r3, r2, r3
 8008f44:	881b      	ldrh	r3, [r3, #0]
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	204c      	movs	r0, #76	@ 0x4c
 8008f4a:	183b      	adds	r3, r7, r0
 8008f4c:	4944      	ldr	r1, [pc, #272]	@ (8009060 <USB_ActivateEndpoint+0x738>)
 8008f4e:	400a      	ands	r2, r1
 8008f50:	801a      	strh	r2, [r3, #0]
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	18d3      	adds	r3, r2, r3
 8008f5c:	183a      	adds	r2, r7, r0
 8008f5e:	8812      	ldrh	r2, [r2, #0]
 8008f60:	4940      	ldr	r1, [pc, #256]	@ (8009064 <USB_ActivateEndpoint+0x73c>)
 8008f62:	430a      	orrs	r2, r1
 8008f64:	b292      	uxth	r2, r2
 8008f66:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	18d2      	adds	r2, r2, r3
 8008f72:	214a      	movs	r1, #74	@ 0x4a
 8008f74:	187b      	adds	r3, r7, r1
 8008f76:	8812      	ldrh	r2, [r2, #0]
 8008f78:	801a      	strh	r2, [r3, #0]
 8008f7a:	187b      	adds	r3, r7, r1
 8008f7c:	881b      	ldrh	r3, [r3, #0]
 8008f7e:	2240      	movs	r2, #64	@ 0x40
 8008f80:	4013      	ands	r3, r2
 8008f82:	d016      	beq.n	8008fb2 <USB_ActivateEndpoint+0x68a>
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	18d3      	adds	r3, r2, r3
 8008f8e:	881b      	ldrh	r3, [r3, #0]
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	2048      	movs	r0, #72	@ 0x48
 8008f94:	183b      	adds	r3, r7, r0
 8008f96:	4932      	ldr	r1, [pc, #200]	@ (8009060 <USB_ActivateEndpoint+0x738>)
 8008f98:	400a      	ands	r2, r1
 8008f9a:	801a      	strh	r2, [r3, #0]
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	18d3      	adds	r3, r2, r3
 8008fa6:	183a      	adds	r2, r7, r0
 8008fa8:	8812      	ldrh	r2, [r2, #0]
 8008faa:	492f      	ldr	r1, [pc, #188]	@ (8009068 <USB_ActivateEndpoint+0x740>)
 8008fac:	430a      	orrs	r2, r1
 8008fae:	b292      	uxth	r2, r2
 8008fb0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	78db      	ldrb	r3, [r3, #3]
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d01d      	beq.n	8008ff6 <USB_ActivateEndpoint+0x6ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	18d3      	adds	r3, r2, r3
 8008fc4:	881b      	ldrh	r3, [r3, #0]
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	2044      	movs	r0, #68	@ 0x44
 8008fca:	183b      	adds	r3, r7, r0
 8008fcc:	4927      	ldr	r1, [pc, #156]	@ (800906c <USB_ActivateEndpoint+0x744>)
 8008fce:	400a      	ands	r2, r1
 8008fd0:	801a      	strh	r2, [r3, #0]
 8008fd2:	183b      	adds	r3, r7, r0
 8008fd4:	183a      	adds	r2, r7, r0
 8008fd6:	8812      	ldrh	r2, [r2, #0]
 8008fd8:	2120      	movs	r1, #32
 8008fda:	404a      	eors	r2, r1
 8008fdc:	801a      	strh	r2, [r3, #0]
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	18d3      	adds	r3, r2, r3
 8008fe8:	183a      	adds	r2, r7, r0
 8008fea:	8812      	ldrh	r2, [r2, #0]
 8008fec:	4920      	ldr	r1, [pc, #128]	@ (8009070 <USB_ActivateEndpoint+0x748>)
 8008fee:	430a      	orrs	r2, r1
 8008ff0:	b292      	uxth	r2, r2
 8008ff2:	801a      	strh	r2, [r3, #0]
 8008ff4:	e016      	b.n	8009024 <USB_ActivateEndpoint+0x6fc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	18d3      	adds	r3, r2, r3
 8009000:	881b      	ldrh	r3, [r3, #0]
 8009002:	b29a      	uxth	r2, r3
 8009004:	2046      	movs	r0, #70	@ 0x46
 8009006:	183b      	adds	r3, r7, r0
 8009008:	4918      	ldr	r1, [pc, #96]	@ (800906c <USB_ActivateEndpoint+0x744>)
 800900a:	400a      	ands	r2, r1
 800900c:	801a      	strh	r2, [r3, #0]
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	18d3      	adds	r3, r2, r3
 8009018:	183a      	adds	r2, r7, r0
 800901a:	8812      	ldrh	r2, [r2, #0]
 800901c:	4914      	ldr	r1, [pc, #80]	@ (8009070 <USB_ActivateEndpoint+0x748>)
 800901e:	430a      	orrs	r2, r1
 8009020:	b292      	uxth	r2, r2
 8009022:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	18d3      	adds	r3, r2, r3
 800902e:	881b      	ldrh	r3, [r3, #0]
 8009030:	b29a      	uxth	r2, r3
 8009032:	2042      	movs	r0, #66	@ 0x42
 8009034:	183b      	adds	r3, r7, r0
 8009036:	490f      	ldr	r1, [pc, #60]	@ (8009074 <USB_ActivateEndpoint+0x74c>)
 8009038:	400a      	ands	r2, r1
 800903a:	801a      	strh	r2, [r3, #0]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	18d3      	adds	r3, r2, r3
 8009046:	183a      	adds	r2, r7, r0
 8009048:	8812      	ldrh	r2, [r2, #0]
 800904a:	4909      	ldr	r1, [pc, #36]	@ (8009070 <USB_ActivateEndpoint+0x748>)
 800904c:	430a      	orrs	r2, r1
 800904e:	b292      	uxth	r2, r2
 8009050:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009052:	236f      	movs	r3, #111	@ 0x6f
 8009054:	18fb      	adds	r3, r7, r3
 8009056:	781b      	ldrb	r3, [r3, #0]
}
 8009058:	0018      	movs	r0, r3
 800905a:	46bd      	mov	sp, r7
 800905c:	b01c      	add	sp, #112	@ 0x70
 800905e:	bd80      	pop	{r7, pc}
 8009060:	ffff8f8f 	.word	0xffff8f8f
 8009064:	ffffc080 	.word	0xffffc080
 8009068:	ffff80c0 	.word	0xffff80c0
 800906c:	ffff8fbf 	.word	0xffff8fbf
 8009070:	ffff8080 	.word	0xffff8080
 8009074:	ffffbf8f 	.word	0xffffbf8f

08009078 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b08c      	sub	sp, #48	@ 0x30
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	7b1b      	ldrb	r3, [r3, #12]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d000      	beq.n	800908c <USB_DeactivateEndpoint+0x14>
 800908a:	e07e      	b.n	800918a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	785b      	ldrb	r3, [r3, #1]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d03c      	beq.n	800910e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	18d2      	adds	r2, r2, r3
 800909e:	210c      	movs	r1, #12
 80090a0:	187b      	adds	r3, r7, r1
 80090a2:	8812      	ldrh	r2, [r2, #0]
 80090a4:	801a      	strh	r2, [r3, #0]
 80090a6:	187b      	adds	r3, r7, r1
 80090a8:	881b      	ldrh	r3, [r3, #0]
 80090aa:	2240      	movs	r2, #64	@ 0x40
 80090ac:	4013      	ands	r3, r2
 80090ae:	d016      	beq.n	80090de <USB_DeactivateEndpoint+0x66>
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	18d3      	adds	r3, r2, r3
 80090ba:	881b      	ldrh	r3, [r3, #0]
 80090bc:	b29a      	uxth	r2, r3
 80090be:	200a      	movs	r0, #10
 80090c0:	183b      	adds	r3, r7, r0
 80090c2:	49c7      	ldr	r1, [pc, #796]	@ (80093e0 <USB_DeactivateEndpoint+0x368>)
 80090c4:	400a      	ands	r2, r1
 80090c6:	801a      	strh	r2, [r3, #0]
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	18d3      	adds	r3, r2, r3
 80090d2:	183a      	adds	r2, r7, r0
 80090d4:	8812      	ldrh	r2, [r2, #0]
 80090d6:	49c3      	ldr	r1, [pc, #780]	@ (80093e4 <USB_DeactivateEndpoint+0x36c>)
 80090d8:	430a      	orrs	r2, r1
 80090da:	b292      	uxth	r2, r2
 80090dc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	18d3      	adds	r3, r2, r3
 80090e8:	881b      	ldrh	r3, [r3, #0]
 80090ea:	b29a      	uxth	r2, r3
 80090ec:	2008      	movs	r0, #8
 80090ee:	183b      	adds	r3, r7, r0
 80090f0:	49bd      	ldr	r1, [pc, #756]	@ (80093e8 <USB_DeactivateEndpoint+0x370>)
 80090f2:	400a      	ands	r2, r1
 80090f4:	801a      	strh	r2, [r3, #0]
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	18d3      	adds	r3, r2, r3
 8009100:	183a      	adds	r2, r7, r0
 8009102:	8812      	ldrh	r2, [r2, #0]
 8009104:	49b9      	ldr	r1, [pc, #740]	@ (80093ec <USB_DeactivateEndpoint+0x374>)
 8009106:	430a      	orrs	r2, r1
 8009108:	b292      	uxth	r2, r2
 800910a:	801a      	strh	r2, [r3, #0]
 800910c:	e163      	b.n	80093d6 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	18d2      	adds	r2, r2, r3
 8009118:	2112      	movs	r1, #18
 800911a:	187b      	adds	r3, r7, r1
 800911c:	8812      	ldrh	r2, [r2, #0]
 800911e:	801a      	strh	r2, [r3, #0]
 8009120:	187b      	adds	r3, r7, r1
 8009122:	881a      	ldrh	r2, [r3, #0]
 8009124:	2380      	movs	r3, #128	@ 0x80
 8009126:	01db      	lsls	r3, r3, #7
 8009128:	4013      	ands	r3, r2
 800912a:	d016      	beq.n	800915a <USB_DeactivateEndpoint+0xe2>
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	18d3      	adds	r3, r2, r3
 8009136:	881b      	ldrh	r3, [r3, #0]
 8009138:	b29a      	uxth	r2, r3
 800913a:	2010      	movs	r0, #16
 800913c:	183b      	adds	r3, r7, r0
 800913e:	49a8      	ldr	r1, [pc, #672]	@ (80093e0 <USB_DeactivateEndpoint+0x368>)
 8009140:	400a      	ands	r2, r1
 8009142:	801a      	strh	r2, [r3, #0]
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	18d3      	adds	r3, r2, r3
 800914e:	183a      	adds	r2, r7, r0
 8009150:	8812      	ldrh	r2, [r2, #0]
 8009152:	49a7      	ldr	r1, [pc, #668]	@ (80093f0 <USB_DeactivateEndpoint+0x378>)
 8009154:	430a      	orrs	r2, r1
 8009156:	b292      	uxth	r2, r2
 8009158:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	18d3      	adds	r3, r2, r3
 8009164:	881b      	ldrh	r3, [r3, #0]
 8009166:	b29a      	uxth	r2, r3
 8009168:	200e      	movs	r0, #14
 800916a:	183b      	adds	r3, r7, r0
 800916c:	49a1      	ldr	r1, [pc, #644]	@ (80093f4 <USB_DeactivateEndpoint+0x37c>)
 800916e:	400a      	ands	r2, r1
 8009170:	801a      	strh	r2, [r3, #0]
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	18d3      	adds	r3, r2, r3
 800917c:	183a      	adds	r2, r7, r0
 800917e:	8812      	ldrh	r2, [r2, #0]
 8009180:	499a      	ldr	r1, [pc, #616]	@ (80093ec <USB_DeactivateEndpoint+0x374>)
 8009182:	430a      	orrs	r2, r1
 8009184:	b292      	uxth	r2, r2
 8009186:	801a      	strh	r2, [r3, #0]
 8009188:	e125      	b.n	80093d6 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	785b      	ldrb	r3, [r3, #1]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d000      	beq.n	8009194 <USB_DeactivateEndpoint+0x11c>
 8009192:	e090      	b.n	80092b6 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	18d2      	adds	r2, r2, r3
 800919e:	2120      	movs	r1, #32
 80091a0:	187b      	adds	r3, r7, r1
 80091a2:	8812      	ldrh	r2, [r2, #0]
 80091a4:	801a      	strh	r2, [r3, #0]
 80091a6:	187b      	adds	r3, r7, r1
 80091a8:	881a      	ldrh	r2, [r3, #0]
 80091aa:	2380      	movs	r3, #128	@ 0x80
 80091ac:	01db      	lsls	r3, r3, #7
 80091ae:	4013      	ands	r3, r2
 80091b0:	d016      	beq.n	80091e0 <USB_DeactivateEndpoint+0x168>
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	18d3      	adds	r3, r2, r3
 80091bc:	881b      	ldrh	r3, [r3, #0]
 80091be:	b29a      	uxth	r2, r3
 80091c0:	201e      	movs	r0, #30
 80091c2:	183b      	adds	r3, r7, r0
 80091c4:	4986      	ldr	r1, [pc, #536]	@ (80093e0 <USB_DeactivateEndpoint+0x368>)
 80091c6:	400a      	ands	r2, r1
 80091c8:	801a      	strh	r2, [r3, #0]
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	18d3      	adds	r3, r2, r3
 80091d4:	183a      	adds	r2, r7, r0
 80091d6:	8812      	ldrh	r2, [r2, #0]
 80091d8:	4985      	ldr	r1, [pc, #532]	@ (80093f0 <USB_DeactivateEndpoint+0x378>)
 80091da:	430a      	orrs	r2, r1
 80091dc:	b292      	uxth	r2, r2
 80091de:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	18d2      	adds	r2, r2, r3
 80091ea:	211c      	movs	r1, #28
 80091ec:	187b      	adds	r3, r7, r1
 80091ee:	8812      	ldrh	r2, [r2, #0]
 80091f0:	801a      	strh	r2, [r3, #0]
 80091f2:	187b      	adds	r3, r7, r1
 80091f4:	881b      	ldrh	r3, [r3, #0]
 80091f6:	2240      	movs	r2, #64	@ 0x40
 80091f8:	4013      	ands	r3, r2
 80091fa:	d016      	beq.n	800922a <USB_DeactivateEndpoint+0x1b2>
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	18d3      	adds	r3, r2, r3
 8009206:	881b      	ldrh	r3, [r3, #0]
 8009208:	b29a      	uxth	r2, r3
 800920a:	201a      	movs	r0, #26
 800920c:	183b      	adds	r3, r7, r0
 800920e:	4974      	ldr	r1, [pc, #464]	@ (80093e0 <USB_DeactivateEndpoint+0x368>)
 8009210:	400a      	ands	r2, r1
 8009212:	801a      	strh	r2, [r3, #0]
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	18d3      	adds	r3, r2, r3
 800921e:	183a      	adds	r2, r7, r0
 8009220:	8812      	ldrh	r2, [r2, #0]
 8009222:	4970      	ldr	r1, [pc, #448]	@ (80093e4 <USB_DeactivateEndpoint+0x36c>)
 8009224:	430a      	orrs	r2, r1
 8009226:	b292      	uxth	r2, r2
 8009228:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	18d3      	adds	r3, r2, r3
 8009234:	881b      	ldrh	r3, [r3, #0]
 8009236:	b29a      	uxth	r2, r3
 8009238:	2018      	movs	r0, #24
 800923a:	183b      	adds	r3, r7, r0
 800923c:	4968      	ldr	r1, [pc, #416]	@ (80093e0 <USB_DeactivateEndpoint+0x368>)
 800923e:	400a      	ands	r2, r1
 8009240:	801a      	strh	r2, [r3, #0]
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	18d3      	adds	r3, r2, r3
 800924c:	183a      	adds	r2, r7, r0
 800924e:	8812      	ldrh	r2, [r2, #0]
 8009250:	4964      	ldr	r1, [pc, #400]	@ (80093e4 <USB_DeactivateEndpoint+0x36c>)
 8009252:	430a      	orrs	r2, r1
 8009254:	b292      	uxth	r2, r2
 8009256:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	18d3      	adds	r3, r2, r3
 8009262:	881b      	ldrh	r3, [r3, #0]
 8009264:	b29a      	uxth	r2, r3
 8009266:	2016      	movs	r0, #22
 8009268:	183b      	adds	r3, r7, r0
 800926a:	4962      	ldr	r1, [pc, #392]	@ (80093f4 <USB_DeactivateEndpoint+0x37c>)
 800926c:	400a      	ands	r2, r1
 800926e:	801a      	strh	r2, [r3, #0]
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	18d3      	adds	r3, r2, r3
 800927a:	183a      	adds	r2, r7, r0
 800927c:	8812      	ldrh	r2, [r2, #0]
 800927e:	495b      	ldr	r1, [pc, #364]	@ (80093ec <USB_DeactivateEndpoint+0x374>)
 8009280:	430a      	orrs	r2, r1
 8009282:	b292      	uxth	r2, r2
 8009284:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	18d3      	adds	r3, r2, r3
 8009290:	881b      	ldrh	r3, [r3, #0]
 8009292:	b29a      	uxth	r2, r3
 8009294:	2014      	movs	r0, #20
 8009296:	183b      	adds	r3, r7, r0
 8009298:	4953      	ldr	r1, [pc, #332]	@ (80093e8 <USB_DeactivateEndpoint+0x370>)
 800929a:	400a      	ands	r2, r1
 800929c:	801a      	strh	r2, [r3, #0]
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	18d3      	adds	r3, r2, r3
 80092a8:	183a      	adds	r2, r7, r0
 80092aa:	8812      	ldrh	r2, [r2, #0]
 80092ac:	494f      	ldr	r1, [pc, #316]	@ (80093ec <USB_DeactivateEndpoint+0x374>)
 80092ae:	430a      	orrs	r2, r1
 80092b0:	b292      	uxth	r2, r2
 80092b2:	801a      	strh	r2, [r3, #0]
 80092b4:	e08f      	b.n	80093d6 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	18d2      	adds	r2, r2, r3
 80092c0:	212e      	movs	r1, #46	@ 0x2e
 80092c2:	187b      	adds	r3, r7, r1
 80092c4:	8812      	ldrh	r2, [r2, #0]
 80092c6:	801a      	strh	r2, [r3, #0]
 80092c8:	187b      	adds	r3, r7, r1
 80092ca:	881a      	ldrh	r2, [r3, #0]
 80092cc:	2380      	movs	r3, #128	@ 0x80
 80092ce:	01db      	lsls	r3, r3, #7
 80092d0:	4013      	ands	r3, r2
 80092d2:	d016      	beq.n	8009302 <USB_DeactivateEndpoint+0x28a>
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	18d3      	adds	r3, r2, r3
 80092de:	881b      	ldrh	r3, [r3, #0]
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	202c      	movs	r0, #44	@ 0x2c
 80092e4:	183b      	adds	r3, r7, r0
 80092e6:	493e      	ldr	r1, [pc, #248]	@ (80093e0 <USB_DeactivateEndpoint+0x368>)
 80092e8:	400a      	ands	r2, r1
 80092ea:	801a      	strh	r2, [r3, #0]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	18d3      	adds	r3, r2, r3
 80092f6:	183a      	adds	r2, r7, r0
 80092f8:	8812      	ldrh	r2, [r2, #0]
 80092fa:	493d      	ldr	r1, [pc, #244]	@ (80093f0 <USB_DeactivateEndpoint+0x378>)
 80092fc:	430a      	orrs	r2, r1
 80092fe:	b292      	uxth	r2, r2
 8009300:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	18d2      	adds	r2, r2, r3
 800930c:	212a      	movs	r1, #42	@ 0x2a
 800930e:	187b      	adds	r3, r7, r1
 8009310:	8812      	ldrh	r2, [r2, #0]
 8009312:	801a      	strh	r2, [r3, #0]
 8009314:	187b      	adds	r3, r7, r1
 8009316:	881b      	ldrh	r3, [r3, #0]
 8009318:	2240      	movs	r2, #64	@ 0x40
 800931a:	4013      	ands	r3, r2
 800931c:	d016      	beq.n	800934c <USB_DeactivateEndpoint+0x2d4>
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	18d3      	adds	r3, r2, r3
 8009328:	881b      	ldrh	r3, [r3, #0]
 800932a:	b29a      	uxth	r2, r3
 800932c:	2028      	movs	r0, #40	@ 0x28
 800932e:	183b      	adds	r3, r7, r0
 8009330:	492b      	ldr	r1, [pc, #172]	@ (80093e0 <USB_DeactivateEndpoint+0x368>)
 8009332:	400a      	ands	r2, r1
 8009334:	801a      	strh	r2, [r3, #0]
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	18d3      	adds	r3, r2, r3
 8009340:	183a      	adds	r2, r7, r0
 8009342:	8812      	ldrh	r2, [r2, #0]
 8009344:	4927      	ldr	r1, [pc, #156]	@ (80093e4 <USB_DeactivateEndpoint+0x36c>)
 8009346:	430a      	orrs	r2, r1
 8009348:	b292      	uxth	r2, r2
 800934a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	18d3      	adds	r3, r2, r3
 8009356:	881b      	ldrh	r3, [r3, #0]
 8009358:	b29a      	uxth	r2, r3
 800935a:	2026      	movs	r0, #38	@ 0x26
 800935c:	183b      	adds	r3, r7, r0
 800935e:	4920      	ldr	r1, [pc, #128]	@ (80093e0 <USB_DeactivateEndpoint+0x368>)
 8009360:	400a      	ands	r2, r1
 8009362:	801a      	strh	r2, [r3, #0]
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	18d3      	adds	r3, r2, r3
 800936e:	183a      	adds	r2, r7, r0
 8009370:	8812      	ldrh	r2, [r2, #0]
 8009372:	491f      	ldr	r1, [pc, #124]	@ (80093f0 <USB_DeactivateEndpoint+0x378>)
 8009374:	430a      	orrs	r2, r1
 8009376:	b292      	uxth	r2, r2
 8009378:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	18d3      	adds	r3, r2, r3
 8009384:	881b      	ldrh	r3, [r3, #0]
 8009386:	b29a      	uxth	r2, r3
 8009388:	2024      	movs	r0, #36	@ 0x24
 800938a:	183b      	adds	r3, r7, r0
 800938c:	4916      	ldr	r1, [pc, #88]	@ (80093e8 <USB_DeactivateEndpoint+0x370>)
 800938e:	400a      	ands	r2, r1
 8009390:	801a      	strh	r2, [r3, #0]
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	18d3      	adds	r3, r2, r3
 800939c:	183a      	adds	r2, r7, r0
 800939e:	8812      	ldrh	r2, [r2, #0]
 80093a0:	4912      	ldr	r1, [pc, #72]	@ (80093ec <USB_DeactivateEndpoint+0x374>)
 80093a2:	430a      	orrs	r2, r1
 80093a4:	b292      	uxth	r2, r2
 80093a6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	18d3      	adds	r3, r2, r3
 80093b2:	881b      	ldrh	r3, [r3, #0]
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	2022      	movs	r0, #34	@ 0x22
 80093b8:	183b      	adds	r3, r7, r0
 80093ba:	490e      	ldr	r1, [pc, #56]	@ (80093f4 <USB_DeactivateEndpoint+0x37c>)
 80093bc:	400a      	ands	r2, r1
 80093be:	801a      	strh	r2, [r3, #0]
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	18d3      	adds	r3, r2, r3
 80093ca:	183a      	adds	r2, r7, r0
 80093cc:	8812      	ldrh	r2, [r2, #0]
 80093ce:	4907      	ldr	r1, [pc, #28]	@ (80093ec <USB_DeactivateEndpoint+0x374>)
 80093d0:	430a      	orrs	r2, r1
 80093d2:	b292      	uxth	r2, r2
 80093d4:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	0018      	movs	r0, r3
 80093da:	46bd      	mov	sp, r7
 80093dc:	b00c      	add	sp, #48	@ 0x30
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	ffff8f8f 	.word	0xffff8f8f
 80093e4:	ffff80c0 	.word	0xffff80c0
 80093e8:	ffff8fbf 	.word	0xffff8fbf
 80093ec:	ffff8080 	.word	0xffff8080
 80093f0:	ffffc080 	.word	0xffffc080
 80093f4:	ffffbf8f 	.word	0xffffbf8f

080093f8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80093f8:	b590      	push	{r4, r7, lr}
 80093fa:	b0c3      	sub	sp, #268	@ 0x10c
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	785b      	ldrb	r3, [r3, #1]
 8009406:	2b01      	cmp	r3, #1
 8009408:	d001      	beq.n	800940e <USB_EPStartXfer+0x16>
 800940a:	f000 fd2d 	bl	8009e68 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	699a      	ldr	r2, [r3, #24]
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	429a      	cmp	r2, r3
 8009418:	d905      	bls.n	8009426 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	1d7a      	adds	r2, r7, #5
 8009420:	32ff      	adds	r2, #255	@ 0xff
 8009422:	6013      	str	r3, [r2, #0]
 8009424:	e004      	b.n	8009430 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	699b      	ldr	r3, [r3, #24]
 800942a:	1d7a      	adds	r2, r7, #5
 800942c:	32ff      	adds	r2, #255	@ 0xff
 800942e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	7b1b      	ldrb	r3, [r3, #12]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d125      	bne.n	8009484 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	6959      	ldr	r1, [r3, #20]
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	88da      	ldrh	r2, [r3, #6]
 8009440:	1d7b      	adds	r3, r7, #5
 8009442:	33ff      	adds	r3, #255	@ 0xff
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	b29b      	uxth	r3, r3
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f001 fa3f 	bl	800a8cc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	613b      	str	r3, [r7, #16]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2250      	movs	r2, #80	@ 0x50
 8009456:	5a9b      	ldrh	r3, [r3, r2]
 8009458:	b29b      	uxth	r3, r3
 800945a:	001a      	movs	r2, r3
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	189b      	adds	r3, r3, r2
 8009460:	613b      	str	r3, [r7, #16]
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	00da      	lsls	r2, r3, #3
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	18d3      	adds	r3, r2, r3
 800946c:	4ad7      	ldr	r2, [pc, #860]	@ (80097cc <USB_EPStartXfer+0x3d4>)
 800946e:	4694      	mov	ip, r2
 8009470:	4463      	add	r3, ip
 8009472:	60fb      	str	r3, [r7, #12]
 8009474:	1d7b      	adds	r3, r7, #5
 8009476:	33ff      	adds	r3, #255	@ 0xff
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	b29a      	uxth	r2, r3
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	801a      	strh	r2, [r3, #0]
 8009480:	f000 fccd 	bl	8009e1e <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	78db      	ldrb	r3, [r3, #3]
 8009488:	2b02      	cmp	r3, #2
 800948a:	d000      	beq.n	800948e <USB_EPStartXfer+0x96>
 800948c:	e362      	b.n	8009b54 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	6a1a      	ldr	r2, [r3, #32]
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	429a      	cmp	r2, r3
 8009498:	d800      	bhi.n	800949c <USB_EPStartXfer+0xa4>
 800949a:	e309      	b.n	8009ab0 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	18d3      	adds	r3, r2, r3
 80094a6:	881b      	ldrh	r3, [r3, #0]
 80094a8:	b29a      	uxth	r2, r3
 80094aa:	2056      	movs	r0, #86	@ 0x56
 80094ac:	183b      	adds	r3, r7, r0
 80094ae:	49c8      	ldr	r1, [pc, #800]	@ (80097d0 <USB_EPStartXfer+0x3d8>)
 80094b0:	400a      	ands	r2, r1
 80094b2:	801a      	strh	r2, [r3, #0]
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	18d3      	adds	r3, r2, r3
 80094be:	183a      	adds	r2, r7, r0
 80094c0:	8812      	ldrh	r2, [r2, #0]
 80094c2:	49c4      	ldr	r1, [pc, #784]	@ (80097d4 <USB_EPStartXfer+0x3dc>)
 80094c4:	430a      	orrs	r2, r1
 80094c6:	b292      	uxth	r2, r2
 80094c8:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	6a1a      	ldr	r2, [r3, #32]
 80094ce:	1d7b      	adds	r3, r7, #5
 80094d0:	33ff      	adds	r3, #255	@ 0xff
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	1ad2      	subs	r2, r2, r3
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	18d3      	adds	r3, r2, r3
 80094e4:	881b      	ldrh	r3, [r3, #0]
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	001a      	movs	r2, r3
 80094ea:	2340      	movs	r3, #64	@ 0x40
 80094ec:	4013      	ands	r3, r2
 80094ee:	d100      	bne.n	80094f2 <USB_EPStartXfer+0xfa>
 80094f0:	e176      	b.n	80097e0 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	785b      	ldrb	r3, [r3, #1]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d000      	beq.n	8009500 <USB_EPStartXfer+0x108>
 80094fe:	e074      	b.n	80095ea <USB_EPStartXfer+0x1f2>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2250      	movs	r2, #80	@ 0x50
 8009508:	5a9b      	ldrh	r3, [r3, r2]
 800950a:	b29b      	uxth	r3, r3
 800950c:	001a      	movs	r2, r3
 800950e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009510:	189b      	adds	r3, r3, r2
 8009512:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	00da      	lsls	r2, r3, #3
 800951a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951c:	18d3      	adds	r3, r2, r3
 800951e:	4aae      	ldr	r2, [pc, #696]	@ (80097d8 <USB_EPStartXfer+0x3e0>)
 8009520:	4694      	mov	ip, r2
 8009522:	4463      	add	r3, ip
 8009524:	627b      	str	r3, [r7, #36]	@ 0x24
 8009526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009528:	881b      	ldrh	r3, [r3, #0]
 800952a:	b29b      	uxth	r3, r3
 800952c:	059b      	lsls	r3, r3, #22
 800952e:	0d9b      	lsrs	r3, r3, #22
 8009530:	b29a      	uxth	r2, r3
 8009532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009534:	801a      	strh	r2, [r3, #0]
 8009536:	1d7b      	adds	r3, r7, #5
 8009538:	33ff      	adds	r3, #255	@ 0xff
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d108      	bne.n	8009552 <USB_EPStartXfer+0x15a>
 8009540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009542:	881b      	ldrh	r3, [r3, #0]
 8009544:	b29b      	uxth	r3, r3
 8009546:	4aa5      	ldr	r2, [pc, #660]	@ (80097dc <USB_EPStartXfer+0x3e4>)
 8009548:	4313      	orrs	r3, r2
 800954a:	b29a      	uxth	r2, r3
 800954c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800954e:	801a      	strh	r2, [r3, #0]
 8009550:	e066      	b.n	8009620 <USB_EPStartXfer+0x228>
 8009552:	1d7b      	adds	r3, r7, #5
 8009554:	33ff      	adds	r3, #255	@ 0xff
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2b3e      	cmp	r3, #62	@ 0x3e
 800955a:	d821      	bhi.n	80095a0 <USB_EPStartXfer+0x1a8>
 800955c:	1d7b      	adds	r3, r7, #5
 800955e:	33ff      	adds	r3, #255	@ 0xff
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	085b      	lsrs	r3, r3, #1
 8009564:	1c7a      	adds	r2, r7, #1
 8009566:	32ff      	adds	r2, #255	@ 0xff
 8009568:	6013      	str	r3, [r2, #0]
 800956a:	1d7b      	adds	r3, r7, #5
 800956c:	33ff      	adds	r3, #255	@ 0xff
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2201      	movs	r2, #1
 8009572:	4013      	ands	r3, r2
 8009574:	d006      	beq.n	8009584 <USB_EPStartXfer+0x18c>
 8009576:	1c7b      	adds	r3, r7, #1
 8009578:	33ff      	adds	r3, #255	@ 0xff
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	3301      	adds	r3, #1
 800957e:	1c7a      	adds	r2, r7, #1
 8009580:	32ff      	adds	r2, #255	@ 0xff
 8009582:	6013      	str	r3, [r2, #0]
 8009584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009586:	881b      	ldrh	r3, [r3, #0]
 8009588:	b29a      	uxth	r2, r3
 800958a:	1c7b      	adds	r3, r7, #1
 800958c:	33ff      	adds	r3, #255	@ 0xff
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	b29b      	uxth	r3, r3
 8009592:	029b      	lsls	r3, r3, #10
 8009594:	b29b      	uxth	r3, r3
 8009596:	4313      	orrs	r3, r2
 8009598:	b29a      	uxth	r2, r3
 800959a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800959c:	801a      	strh	r2, [r3, #0]
 800959e:	e03f      	b.n	8009620 <USB_EPStartXfer+0x228>
 80095a0:	1d7b      	adds	r3, r7, #5
 80095a2:	33ff      	adds	r3, #255	@ 0xff
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	095b      	lsrs	r3, r3, #5
 80095a8:	1c7a      	adds	r2, r7, #1
 80095aa:	32ff      	adds	r2, #255	@ 0xff
 80095ac:	6013      	str	r3, [r2, #0]
 80095ae:	1d7b      	adds	r3, r7, #5
 80095b0:	33ff      	adds	r3, #255	@ 0xff
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	221f      	movs	r2, #31
 80095b6:	4013      	ands	r3, r2
 80095b8:	d106      	bne.n	80095c8 <USB_EPStartXfer+0x1d0>
 80095ba:	1c7b      	adds	r3, r7, #1
 80095bc:	33ff      	adds	r3, #255	@ 0xff
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	3b01      	subs	r3, #1
 80095c2:	1c7a      	adds	r2, r7, #1
 80095c4:	32ff      	adds	r2, #255	@ 0xff
 80095c6:	6013      	str	r3, [r2, #0]
 80095c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ca:	881b      	ldrh	r3, [r3, #0]
 80095cc:	b29a      	uxth	r2, r3
 80095ce:	1c7b      	adds	r3, r7, #1
 80095d0:	33ff      	adds	r3, #255	@ 0xff
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	029b      	lsls	r3, r3, #10
 80095d8:	b29b      	uxth	r3, r3
 80095da:	4313      	orrs	r3, r2
 80095dc:	b29b      	uxth	r3, r3
 80095de:	4a7f      	ldr	r2, [pc, #508]	@ (80097dc <USB_EPStartXfer+0x3e4>)
 80095e0:	4313      	orrs	r3, r2
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e6:	801a      	strh	r2, [r3, #0]
 80095e8:	e01a      	b.n	8009620 <USB_EPStartXfer+0x228>
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	785b      	ldrb	r3, [r3, #1]
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d116      	bne.n	8009620 <USB_EPStartXfer+0x228>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2250      	movs	r2, #80	@ 0x50
 80095f6:	5a9b      	ldrh	r3, [r3, r2]
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	001a      	movs	r2, r3
 80095fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fe:	189b      	adds	r3, r3, r2
 8009600:	633b      	str	r3, [r7, #48]	@ 0x30
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	00da      	lsls	r2, r3, #3
 8009608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800960a:	18d3      	adds	r3, r2, r3
 800960c:	4a72      	ldr	r2, [pc, #456]	@ (80097d8 <USB_EPStartXfer+0x3e0>)
 800960e:	4694      	mov	ip, r2
 8009610:	4463      	add	r3, ip
 8009612:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009614:	1d7b      	adds	r3, r7, #5
 8009616:	33ff      	adds	r3, #255	@ 0xff
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	b29a      	uxth	r2, r3
 800961c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800961e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009620:	2076      	movs	r0, #118	@ 0x76
 8009622:	183b      	adds	r3, r7, r0
 8009624:	683a      	ldr	r2, [r7, #0]
 8009626:	8952      	ldrh	r2, [r2, #10]
 8009628:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	6959      	ldr	r1, [r3, #20]
 800962e:	1d7b      	adds	r3, r7, #5
 8009630:	33ff      	adds	r3, #255	@ 0xff
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	b29c      	uxth	r4, r3
 8009636:	183b      	adds	r3, r7, r0
 8009638:	881a      	ldrh	r2, [r3, #0]
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	0023      	movs	r3, r4
 800963e:	f001 f945 	bl	800a8cc <USB_WritePMA>
            ep->xfer_buff += len;
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	695a      	ldr	r2, [r3, #20]
 8009646:	1d7b      	adds	r3, r7, #5
 8009648:	33ff      	adds	r3, #255	@ 0xff
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	18d2      	adds	r2, r2, r3
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	6a1a      	ldr	r2, [r3, #32]
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	429a      	cmp	r2, r3
 800965c:	d908      	bls.n	8009670 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	6a1a      	ldr	r2, [r3, #32]
 8009662:	1d7b      	adds	r3, r7, #5
 8009664:	33ff      	adds	r3, #255	@ 0xff
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	1ad2      	subs	r2, r2, r3
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	621a      	str	r2, [r3, #32]
 800966e:	e007      	b.n	8009680 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	6a1b      	ldr	r3, [r3, #32]
 8009674:	1d7a      	adds	r2, r7, #5
 8009676:	32ff      	adds	r2, #255	@ 0xff
 8009678:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	2200      	movs	r2, #0
 800967e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	785b      	ldrb	r3, [r3, #1]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d000      	beq.n	800968a <USB_EPStartXfer+0x292>
 8009688:	e070      	b.n	800976c <USB_EPStartXfer+0x374>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	61bb      	str	r3, [r7, #24]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2250      	movs	r2, #80	@ 0x50
 8009692:	5a9b      	ldrh	r3, [r3, r2]
 8009694:	b29b      	uxth	r3, r3
 8009696:	001a      	movs	r2, r3
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	189b      	adds	r3, r3, r2
 800969c:	61bb      	str	r3, [r7, #24]
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	00da      	lsls	r2, r3, #3
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	18d3      	adds	r3, r2, r3
 80096a8:	4a48      	ldr	r2, [pc, #288]	@ (80097cc <USB_EPStartXfer+0x3d4>)
 80096aa:	4694      	mov	ip, r2
 80096ac:	4463      	add	r3, ip
 80096ae:	617b      	str	r3, [r7, #20]
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	881b      	ldrh	r3, [r3, #0]
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	059b      	lsls	r3, r3, #22
 80096b8:	0d9b      	lsrs	r3, r3, #22
 80096ba:	b29a      	uxth	r2, r3
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	801a      	strh	r2, [r3, #0]
 80096c0:	1d7b      	adds	r3, r7, #5
 80096c2:	33ff      	adds	r3, #255	@ 0xff
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d108      	bne.n	80096dc <USB_EPStartXfer+0x2e4>
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	881b      	ldrh	r3, [r3, #0]
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	4a42      	ldr	r2, [pc, #264]	@ (80097dc <USB_EPStartXfer+0x3e4>)
 80096d2:	4313      	orrs	r3, r2
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	801a      	strh	r2, [r3, #0]
 80096da:	e064      	b.n	80097a6 <USB_EPStartXfer+0x3ae>
 80096dc:	1d7b      	adds	r3, r7, #5
 80096de:	33ff      	adds	r3, #255	@ 0xff
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80096e4:	d81f      	bhi.n	8009726 <USB_EPStartXfer+0x32e>
 80096e6:	1d7b      	adds	r3, r7, #5
 80096e8:	33ff      	adds	r3, #255	@ 0xff
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	085b      	lsrs	r3, r3, #1
 80096ee:	21fc      	movs	r1, #252	@ 0xfc
 80096f0:	187a      	adds	r2, r7, r1
 80096f2:	6013      	str	r3, [r2, #0]
 80096f4:	1d7b      	adds	r3, r7, #5
 80096f6:	33ff      	adds	r3, #255	@ 0xff
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2201      	movs	r2, #1
 80096fc:	4013      	ands	r3, r2
 80096fe:	d004      	beq.n	800970a <USB_EPStartXfer+0x312>
 8009700:	187b      	adds	r3, r7, r1
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	3301      	adds	r3, #1
 8009706:	187a      	adds	r2, r7, r1
 8009708:	6013      	str	r3, [r2, #0]
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	881b      	ldrh	r3, [r3, #0]
 800970e:	b29a      	uxth	r2, r3
 8009710:	23fc      	movs	r3, #252	@ 0xfc
 8009712:	18fb      	adds	r3, r7, r3
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	b29b      	uxth	r3, r3
 8009718:	029b      	lsls	r3, r3, #10
 800971a:	b29b      	uxth	r3, r3
 800971c:	4313      	orrs	r3, r2
 800971e:	b29a      	uxth	r2, r3
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	801a      	strh	r2, [r3, #0]
 8009724:	e03f      	b.n	80097a6 <USB_EPStartXfer+0x3ae>
 8009726:	1d7b      	adds	r3, r7, #5
 8009728:	33ff      	adds	r3, #255	@ 0xff
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	095b      	lsrs	r3, r3, #5
 800972e:	21fc      	movs	r1, #252	@ 0xfc
 8009730:	187a      	adds	r2, r7, r1
 8009732:	6013      	str	r3, [r2, #0]
 8009734:	1d7b      	adds	r3, r7, #5
 8009736:	33ff      	adds	r3, #255	@ 0xff
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	221f      	movs	r2, #31
 800973c:	4013      	ands	r3, r2
 800973e:	d104      	bne.n	800974a <USB_EPStartXfer+0x352>
 8009740:	187b      	adds	r3, r7, r1
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	3b01      	subs	r3, #1
 8009746:	187a      	adds	r2, r7, r1
 8009748:	6013      	str	r3, [r2, #0]
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	881b      	ldrh	r3, [r3, #0]
 800974e:	b29a      	uxth	r2, r3
 8009750:	23fc      	movs	r3, #252	@ 0xfc
 8009752:	18fb      	adds	r3, r7, r3
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	b29b      	uxth	r3, r3
 8009758:	029b      	lsls	r3, r3, #10
 800975a:	b29b      	uxth	r3, r3
 800975c:	4313      	orrs	r3, r2
 800975e:	b29b      	uxth	r3, r3
 8009760:	4a1e      	ldr	r2, [pc, #120]	@ (80097dc <USB_EPStartXfer+0x3e4>)
 8009762:	4313      	orrs	r3, r2
 8009764:	b29a      	uxth	r2, r3
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	801a      	strh	r2, [r3, #0]
 800976a:	e01c      	b.n	80097a6 <USB_EPStartXfer+0x3ae>
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	785b      	ldrb	r3, [r3, #1]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d118      	bne.n	80097a6 <USB_EPStartXfer+0x3ae>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	623b      	str	r3, [r7, #32]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2250      	movs	r2, #80	@ 0x50
 800977c:	5a9b      	ldrh	r3, [r3, r2]
 800977e:	b29b      	uxth	r3, r3
 8009780:	001a      	movs	r2, r3
 8009782:	6a3b      	ldr	r3, [r7, #32]
 8009784:	189b      	adds	r3, r3, r2
 8009786:	623b      	str	r3, [r7, #32]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	00da      	lsls	r2, r3, #3
 800978e:	6a3b      	ldr	r3, [r7, #32]
 8009790:	18d3      	adds	r3, r2, r3
 8009792:	4a0e      	ldr	r2, [pc, #56]	@ (80097cc <USB_EPStartXfer+0x3d4>)
 8009794:	4694      	mov	ip, r2
 8009796:	4463      	add	r3, ip
 8009798:	61fb      	str	r3, [r7, #28]
 800979a:	1d7b      	adds	r3, r7, #5
 800979c:	33ff      	adds	r3, #255	@ 0xff
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80097a6:	2076      	movs	r0, #118	@ 0x76
 80097a8:	183b      	adds	r3, r7, r0
 80097aa:	683a      	ldr	r2, [r7, #0]
 80097ac:	8912      	ldrh	r2, [r2, #8]
 80097ae:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	6959      	ldr	r1, [r3, #20]
 80097b4:	1d7b      	adds	r3, r7, #5
 80097b6:	33ff      	adds	r3, #255	@ 0xff
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	b29c      	uxth	r4, r3
 80097bc:	183b      	adds	r3, r7, r0
 80097be:	881a      	ldrh	r2, [r3, #0]
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	0023      	movs	r3, r4
 80097c4:	f001 f882 	bl	800a8cc <USB_WritePMA>
 80097c8:	e329      	b.n	8009e1e <USB_EPStartXfer+0xa26>
 80097ca:	46c0      	nop			@ (mov r8, r8)
 80097cc:	00000402 	.word	0x00000402
 80097d0:	ffff8f8f 	.word	0xffff8f8f
 80097d4:	ffff8180 	.word	0xffff8180
 80097d8:	00000406 	.word	0x00000406
 80097dc:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	785b      	ldrb	r3, [r3, #1]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d000      	beq.n	80097ea <USB_EPStartXfer+0x3f2>
 80097e8:	e070      	b.n	80098cc <USB_EPStartXfer+0x4d4>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2250      	movs	r2, #80	@ 0x50
 80097f2:	5a9b      	ldrh	r3, [r3, r2]
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	001a      	movs	r2, r3
 80097f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097fa:	189b      	adds	r3, r3, r2
 80097fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	00da      	lsls	r2, r3, #3
 8009804:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009806:	18d3      	adds	r3, r2, r3
 8009808:	4acd      	ldr	r2, [pc, #820]	@ (8009b40 <USB_EPStartXfer+0x748>)
 800980a:	4694      	mov	ip, r2
 800980c:	4463      	add	r3, ip
 800980e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009812:	881b      	ldrh	r3, [r3, #0]
 8009814:	b29b      	uxth	r3, r3
 8009816:	059b      	lsls	r3, r3, #22
 8009818:	0d9b      	lsrs	r3, r3, #22
 800981a:	b29a      	uxth	r2, r3
 800981c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800981e:	801a      	strh	r2, [r3, #0]
 8009820:	1d7b      	adds	r3, r7, #5
 8009822:	33ff      	adds	r3, #255	@ 0xff
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d108      	bne.n	800983c <USB_EPStartXfer+0x444>
 800982a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800982c:	881b      	ldrh	r3, [r3, #0]
 800982e:	b29b      	uxth	r3, r3
 8009830:	4ac4      	ldr	r2, [pc, #784]	@ (8009b44 <USB_EPStartXfer+0x74c>)
 8009832:	4313      	orrs	r3, r2
 8009834:	b29a      	uxth	r2, r3
 8009836:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009838:	801a      	strh	r2, [r3, #0]
 800983a:	e064      	b.n	8009906 <USB_EPStartXfer+0x50e>
 800983c:	1d7b      	adds	r3, r7, #5
 800983e:	33ff      	adds	r3, #255	@ 0xff
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b3e      	cmp	r3, #62	@ 0x3e
 8009844:	d81f      	bhi.n	8009886 <USB_EPStartXfer+0x48e>
 8009846:	1d7b      	adds	r3, r7, #5
 8009848:	33ff      	adds	r3, #255	@ 0xff
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	085b      	lsrs	r3, r3, #1
 800984e:	21f8      	movs	r1, #248	@ 0xf8
 8009850:	187a      	adds	r2, r7, r1
 8009852:	6013      	str	r3, [r2, #0]
 8009854:	1d7b      	adds	r3, r7, #5
 8009856:	33ff      	adds	r3, #255	@ 0xff
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2201      	movs	r2, #1
 800985c:	4013      	ands	r3, r2
 800985e:	d004      	beq.n	800986a <USB_EPStartXfer+0x472>
 8009860:	187b      	adds	r3, r7, r1
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	3301      	adds	r3, #1
 8009866:	187a      	adds	r2, r7, r1
 8009868:	6013      	str	r3, [r2, #0]
 800986a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800986c:	881b      	ldrh	r3, [r3, #0]
 800986e:	b29a      	uxth	r2, r3
 8009870:	23f8      	movs	r3, #248	@ 0xf8
 8009872:	18fb      	adds	r3, r7, r3
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	b29b      	uxth	r3, r3
 8009878:	029b      	lsls	r3, r3, #10
 800987a:	b29b      	uxth	r3, r3
 800987c:	4313      	orrs	r3, r2
 800987e:	b29a      	uxth	r2, r3
 8009880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009882:	801a      	strh	r2, [r3, #0]
 8009884:	e03f      	b.n	8009906 <USB_EPStartXfer+0x50e>
 8009886:	1d7b      	adds	r3, r7, #5
 8009888:	33ff      	adds	r3, #255	@ 0xff
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	095b      	lsrs	r3, r3, #5
 800988e:	21f8      	movs	r1, #248	@ 0xf8
 8009890:	187a      	adds	r2, r7, r1
 8009892:	6013      	str	r3, [r2, #0]
 8009894:	1d7b      	adds	r3, r7, #5
 8009896:	33ff      	adds	r3, #255	@ 0xff
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	221f      	movs	r2, #31
 800989c:	4013      	ands	r3, r2
 800989e:	d104      	bne.n	80098aa <USB_EPStartXfer+0x4b2>
 80098a0:	187b      	adds	r3, r7, r1
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	3b01      	subs	r3, #1
 80098a6:	187a      	adds	r2, r7, r1
 80098a8:	6013      	str	r3, [r2, #0]
 80098aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098ac:	881b      	ldrh	r3, [r3, #0]
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	23f8      	movs	r3, #248	@ 0xf8
 80098b2:	18fb      	adds	r3, r7, r3
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	029b      	lsls	r3, r3, #10
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	4313      	orrs	r3, r2
 80098be:	b29b      	uxth	r3, r3
 80098c0:	4aa0      	ldr	r2, [pc, #640]	@ (8009b44 <USB_EPStartXfer+0x74c>)
 80098c2:	4313      	orrs	r3, r2
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098c8:	801a      	strh	r2, [r3, #0]
 80098ca:	e01c      	b.n	8009906 <USB_EPStartXfer+0x50e>
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	785b      	ldrb	r3, [r3, #1]
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d118      	bne.n	8009906 <USB_EPStartXfer+0x50e>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2250      	movs	r2, #80	@ 0x50
 80098dc:	5a9b      	ldrh	r3, [r3, r2]
 80098de:	b29b      	uxth	r3, r3
 80098e0:	001a      	movs	r2, r3
 80098e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098e4:	189b      	adds	r3, r3, r2
 80098e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	00da      	lsls	r2, r3, #3
 80098ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098f0:	18d3      	adds	r3, r2, r3
 80098f2:	4a93      	ldr	r2, [pc, #588]	@ (8009b40 <USB_EPStartXfer+0x748>)
 80098f4:	4694      	mov	ip, r2
 80098f6:	4463      	add	r3, ip
 80098f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098fa:	1d7b      	adds	r3, r7, #5
 80098fc:	33ff      	adds	r3, #255	@ 0xff
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	b29a      	uxth	r2, r3
 8009902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009904:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009906:	2076      	movs	r0, #118	@ 0x76
 8009908:	183b      	adds	r3, r7, r0
 800990a:	683a      	ldr	r2, [r7, #0]
 800990c:	8912      	ldrh	r2, [r2, #8]
 800990e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	6959      	ldr	r1, [r3, #20]
 8009914:	1d7b      	adds	r3, r7, #5
 8009916:	33ff      	adds	r3, #255	@ 0xff
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	b29c      	uxth	r4, r3
 800991c:	183b      	adds	r3, r7, r0
 800991e:	881a      	ldrh	r2, [r3, #0]
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	0023      	movs	r3, r4
 8009924:	f000 ffd2 	bl	800a8cc <USB_WritePMA>
            ep->xfer_buff += len;
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	695a      	ldr	r2, [r3, #20]
 800992c:	1d7b      	adds	r3, r7, #5
 800992e:	33ff      	adds	r3, #255	@ 0xff
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	18d2      	adds	r2, r2, r3
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	6a1a      	ldr	r2, [r3, #32]
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	691b      	ldr	r3, [r3, #16]
 8009940:	429a      	cmp	r2, r3
 8009942:	d908      	bls.n	8009956 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	6a1a      	ldr	r2, [r3, #32]
 8009948:	1d7b      	adds	r3, r7, #5
 800994a:	33ff      	adds	r3, #255	@ 0xff
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	1ad2      	subs	r2, r2, r3
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	621a      	str	r2, [r3, #32]
 8009954:	e007      	b.n	8009966 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	6a1b      	ldr	r3, [r3, #32]
 800995a:	1d7a      	adds	r2, r7, #5
 800995c:	32ff      	adds	r2, #255	@ 0xff
 800995e:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	2200      	movs	r2, #0
 8009964:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	643b      	str	r3, [r7, #64]	@ 0x40
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	785b      	ldrb	r3, [r3, #1]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d000      	beq.n	8009974 <USB_EPStartXfer+0x57c>
 8009972:	e070      	b.n	8009a56 <USB_EPStartXfer+0x65e>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2250      	movs	r2, #80	@ 0x50
 800997c:	5a9b      	ldrh	r3, [r3, r2]
 800997e:	b29b      	uxth	r3, r3
 8009980:	001a      	movs	r2, r3
 8009982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009984:	189b      	adds	r3, r3, r2
 8009986:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	00da      	lsls	r2, r3, #3
 800998e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009990:	18d3      	adds	r3, r2, r3
 8009992:	4a6d      	ldr	r2, [pc, #436]	@ (8009b48 <USB_EPStartXfer+0x750>)
 8009994:	4694      	mov	ip, r2
 8009996:	4463      	add	r3, ip
 8009998:	637b      	str	r3, [r7, #52]	@ 0x34
 800999a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800999c:	881b      	ldrh	r3, [r3, #0]
 800999e:	b29b      	uxth	r3, r3
 80099a0:	059b      	lsls	r3, r3, #22
 80099a2:	0d9b      	lsrs	r3, r3, #22
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099a8:	801a      	strh	r2, [r3, #0]
 80099aa:	1d7b      	adds	r3, r7, #5
 80099ac:	33ff      	adds	r3, #255	@ 0xff
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d108      	bne.n	80099c6 <USB_EPStartXfer+0x5ce>
 80099b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099b6:	881b      	ldrh	r3, [r3, #0]
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	4a62      	ldr	r2, [pc, #392]	@ (8009b44 <USB_EPStartXfer+0x74c>)
 80099bc:	4313      	orrs	r3, r2
 80099be:	b29a      	uxth	r2, r3
 80099c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099c2:	801a      	strh	r2, [r3, #0]
 80099c4:	e062      	b.n	8009a8c <USB_EPStartXfer+0x694>
 80099c6:	1d7b      	adds	r3, r7, #5
 80099c8:	33ff      	adds	r3, #255	@ 0xff
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80099ce:	d81f      	bhi.n	8009a10 <USB_EPStartXfer+0x618>
 80099d0:	1d7b      	adds	r3, r7, #5
 80099d2:	33ff      	adds	r3, #255	@ 0xff
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	085b      	lsrs	r3, r3, #1
 80099d8:	21f4      	movs	r1, #244	@ 0xf4
 80099da:	187a      	adds	r2, r7, r1
 80099dc:	6013      	str	r3, [r2, #0]
 80099de:	1d7b      	adds	r3, r7, #5
 80099e0:	33ff      	adds	r3, #255	@ 0xff
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2201      	movs	r2, #1
 80099e6:	4013      	ands	r3, r2
 80099e8:	d004      	beq.n	80099f4 <USB_EPStartXfer+0x5fc>
 80099ea:	187b      	adds	r3, r7, r1
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	3301      	adds	r3, #1
 80099f0:	187a      	adds	r2, r7, r1
 80099f2:	6013      	str	r3, [r2, #0]
 80099f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099f6:	881b      	ldrh	r3, [r3, #0]
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	23f4      	movs	r3, #244	@ 0xf4
 80099fc:	18fb      	adds	r3, r7, r3
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	029b      	lsls	r3, r3, #10
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	4313      	orrs	r3, r2
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a0c:	801a      	strh	r2, [r3, #0]
 8009a0e:	e03d      	b.n	8009a8c <USB_EPStartXfer+0x694>
 8009a10:	1d7b      	adds	r3, r7, #5
 8009a12:	33ff      	adds	r3, #255	@ 0xff
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	095b      	lsrs	r3, r3, #5
 8009a18:	21f4      	movs	r1, #244	@ 0xf4
 8009a1a:	187a      	adds	r2, r7, r1
 8009a1c:	6013      	str	r3, [r2, #0]
 8009a1e:	1d7b      	adds	r3, r7, #5
 8009a20:	33ff      	adds	r3, #255	@ 0xff
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	221f      	movs	r2, #31
 8009a26:	4013      	ands	r3, r2
 8009a28:	d104      	bne.n	8009a34 <USB_EPStartXfer+0x63c>
 8009a2a:	187b      	adds	r3, r7, r1
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	187a      	adds	r2, r7, r1
 8009a32:	6013      	str	r3, [r2, #0]
 8009a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a36:	881b      	ldrh	r3, [r3, #0]
 8009a38:	b29a      	uxth	r2, r3
 8009a3a:	23f4      	movs	r3, #244	@ 0xf4
 8009a3c:	18fb      	adds	r3, r7, r3
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	029b      	lsls	r3, r3, #10
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	4313      	orrs	r3, r2
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	4a3e      	ldr	r2, [pc, #248]	@ (8009b44 <USB_EPStartXfer+0x74c>)
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	b29a      	uxth	r2, r3
 8009a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a52:	801a      	strh	r2, [r3, #0]
 8009a54:	e01a      	b.n	8009a8c <USB_EPStartXfer+0x694>
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	785b      	ldrb	r3, [r3, #1]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d116      	bne.n	8009a8c <USB_EPStartXfer+0x694>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2250      	movs	r2, #80	@ 0x50
 8009a62:	5a9b      	ldrh	r3, [r3, r2]
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	001a      	movs	r2, r3
 8009a68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a6a:	189b      	adds	r3, r3, r2
 8009a6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	00da      	lsls	r2, r3, #3
 8009a74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a76:	18d3      	adds	r3, r2, r3
 8009a78:	4a33      	ldr	r2, [pc, #204]	@ (8009b48 <USB_EPStartXfer+0x750>)
 8009a7a:	4694      	mov	ip, r2
 8009a7c:	4463      	add	r3, ip
 8009a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a80:	1d7b      	adds	r3, r7, #5
 8009a82:	33ff      	adds	r3, #255	@ 0xff
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a8a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009a8c:	2076      	movs	r0, #118	@ 0x76
 8009a8e:	183b      	adds	r3, r7, r0
 8009a90:	683a      	ldr	r2, [r7, #0]
 8009a92:	8952      	ldrh	r2, [r2, #10]
 8009a94:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	6959      	ldr	r1, [r3, #20]
 8009a9a:	1d7b      	adds	r3, r7, #5
 8009a9c:	33ff      	adds	r3, #255	@ 0xff
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	b29c      	uxth	r4, r3
 8009aa2:	183b      	adds	r3, r7, r0
 8009aa4:	881a      	ldrh	r2, [r3, #0]
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	0023      	movs	r3, r4
 8009aaa:	f000 ff0f 	bl	800a8cc <USB_WritePMA>
 8009aae:	e1b6      	b.n	8009e1e <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	6a1b      	ldr	r3, [r3, #32]
 8009ab4:	1d7a      	adds	r2, r7, #5
 8009ab6:	32ff      	adds	r2, #255	@ 0xff
 8009ab8:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	18d3      	adds	r3, r2, r3
 8009ac4:	881b      	ldrh	r3, [r3, #0]
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	2062      	movs	r0, #98	@ 0x62
 8009aca:	183b      	adds	r3, r7, r0
 8009acc:	491f      	ldr	r1, [pc, #124]	@ (8009b4c <USB_EPStartXfer+0x754>)
 8009ace:	400a      	ands	r2, r1
 8009ad0:	801a      	strh	r2, [r3, #0]
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	18d3      	adds	r3, r2, r3
 8009adc:	183a      	adds	r2, r7, r0
 8009ade:	8812      	ldrh	r2, [r2, #0]
 8009ae0:	491b      	ldr	r1, [pc, #108]	@ (8009b50 <USB_EPStartXfer+0x758>)
 8009ae2:	430a      	orrs	r2, r1
 8009ae4:	b292      	uxth	r2, r2
 8009ae6:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2250      	movs	r2, #80	@ 0x50
 8009af0:	5a9b      	ldrh	r3, [r3, r2]
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	001a      	movs	r2, r3
 8009af6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009af8:	189b      	adds	r3, r3, r2
 8009afa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	00da      	lsls	r2, r3, #3
 8009b02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b04:	18d3      	adds	r3, r2, r3
 8009b06:	4a0e      	ldr	r2, [pc, #56]	@ (8009b40 <USB_EPStartXfer+0x748>)
 8009b08:	4694      	mov	ip, r2
 8009b0a:	4463      	add	r3, ip
 8009b0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009b0e:	1d7b      	adds	r3, r7, #5
 8009b10:	33ff      	adds	r3, #255	@ 0xff
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009b18:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009b1a:	2076      	movs	r0, #118	@ 0x76
 8009b1c:	183b      	adds	r3, r7, r0
 8009b1e:	683a      	ldr	r2, [r7, #0]
 8009b20:	8912      	ldrh	r2, [r2, #8]
 8009b22:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	6959      	ldr	r1, [r3, #20]
 8009b28:	1d7b      	adds	r3, r7, #5
 8009b2a:	33ff      	adds	r3, #255	@ 0xff
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	b29c      	uxth	r4, r3
 8009b30:	183b      	adds	r3, r7, r0
 8009b32:	881a      	ldrh	r2, [r3, #0]
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	0023      	movs	r3, r4
 8009b38:	f000 fec8 	bl	800a8cc <USB_WritePMA>
 8009b3c:	e16f      	b.n	8009e1e <USB_EPStartXfer+0xa26>
 8009b3e:	46c0      	nop			@ (mov r8, r8)
 8009b40:	00000402 	.word	0x00000402
 8009b44:	ffff8000 	.word	0xffff8000
 8009b48:	00000406 	.word	0x00000406
 8009b4c:	ffff8e8f 	.word	0xffff8e8f
 8009b50:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	6a1a      	ldr	r2, [r3, #32]
 8009b58:	1d7b      	adds	r3, r7, #5
 8009b5a:	33ff      	adds	r3, #255	@ 0xff
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	1ad2      	subs	r2, r2, r3
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	18d3      	adds	r3, r2, r3
 8009b6e:	881b      	ldrh	r3, [r3, #0]
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	001a      	movs	r2, r3
 8009b74:	2340      	movs	r3, #64	@ 0x40
 8009b76:	4013      	ands	r3, r2
 8009b78:	d100      	bne.n	8009b7c <USB_EPStartXfer+0x784>
 8009b7a:	e0a4      	b.n	8009cc6 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	785b      	ldrb	r3, [r3, #1]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d000      	beq.n	8009b8a <USB_EPStartXfer+0x792>
 8009b88:	e070      	b.n	8009c6c <USB_EPStartXfer+0x874>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2250      	movs	r2, #80	@ 0x50
 8009b92:	5a9b      	ldrh	r3, [r3, r2]
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	001a      	movs	r2, r3
 8009b98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009b9a:	189b      	adds	r3, r3, r2
 8009b9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	00da      	lsls	r2, r3, #3
 8009ba4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ba6:	18d3      	adds	r3, r2, r3
 8009ba8:	4ada      	ldr	r2, [pc, #872]	@ (8009f14 <USB_EPStartXfer+0xb1c>)
 8009baa:	4694      	mov	ip, r2
 8009bac:	4463      	add	r3, ip
 8009bae:	667b      	str	r3, [r7, #100]	@ 0x64
 8009bb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bb2:	881b      	ldrh	r3, [r3, #0]
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	059b      	lsls	r3, r3, #22
 8009bb8:	0d9b      	lsrs	r3, r3, #22
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bbe:	801a      	strh	r2, [r3, #0]
 8009bc0:	1d7b      	adds	r3, r7, #5
 8009bc2:	33ff      	adds	r3, #255	@ 0xff
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d108      	bne.n	8009bdc <USB_EPStartXfer+0x7e4>
 8009bca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bcc:	881b      	ldrh	r3, [r3, #0]
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	4ad1      	ldr	r2, [pc, #836]	@ (8009f18 <USB_EPStartXfer+0xb20>)
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bd8:	801a      	strh	r2, [r3, #0]
 8009bda:	e062      	b.n	8009ca2 <USB_EPStartXfer+0x8aa>
 8009bdc:	1d7b      	adds	r3, r7, #5
 8009bde:	33ff      	adds	r3, #255	@ 0xff
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2b3e      	cmp	r3, #62	@ 0x3e
 8009be4:	d81f      	bhi.n	8009c26 <USB_EPStartXfer+0x82e>
 8009be6:	1d7b      	adds	r3, r7, #5
 8009be8:	33ff      	adds	r3, #255	@ 0xff
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	085b      	lsrs	r3, r3, #1
 8009bee:	21f0      	movs	r1, #240	@ 0xf0
 8009bf0:	187a      	adds	r2, r7, r1
 8009bf2:	6013      	str	r3, [r2, #0]
 8009bf4:	1d7b      	adds	r3, r7, #5
 8009bf6:	33ff      	adds	r3, #255	@ 0xff
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	d004      	beq.n	8009c0a <USB_EPStartXfer+0x812>
 8009c00:	187b      	adds	r3, r7, r1
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	3301      	adds	r3, #1
 8009c06:	187a      	adds	r2, r7, r1
 8009c08:	6013      	str	r3, [r2, #0]
 8009c0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c0c:	881b      	ldrh	r3, [r3, #0]
 8009c0e:	b29a      	uxth	r2, r3
 8009c10:	23f0      	movs	r3, #240	@ 0xf0
 8009c12:	18fb      	adds	r3, r7, r3
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	029b      	lsls	r3, r3, #10
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	b29a      	uxth	r2, r3
 8009c20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c22:	801a      	strh	r2, [r3, #0]
 8009c24:	e03d      	b.n	8009ca2 <USB_EPStartXfer+0x8aa>
 8009c26:	1d7b      	adds	r3, r7, #5
 8009c28:	33ff      	adds	r3, #255	@ 0xff
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	095b      	lsrs	r3, r3, #5
 8009c2e:	21f0      	movs	r1, #240	@ 0xf0
 8009c30:	187a      	adds	r2, r7, r1
 8009c32:	6013      	str	r3, [r2, #0]
 8009c34:	1d7b      	adds	r3, r7, #5
 8009c36:	33ff      	adds	r3, #255	@ 0xff
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	221f      	movs	r2, #31
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	d104      	bne.n	8009c4a <USB_EPStartXfer+0x852>
 8009c40:	187b      	adds	r3, r7, r1
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	3b01      	subs	r3, #1
 8009c46:	187a      	adds	r2, r7, r1
 8009c48:	6013      	str	r3, [r2, #0]
 8009c4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c4c:	881b      	ldrh	r3, [r3, #0]
 8009c4e:	b29a      	uxth	r2, r3
 8009c50:	23f0      	movs	r3, #240	@ 0xf0
 8009c52:	18fb      	adds	r3, r7, r3
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	029b      	lsls	r3, r3, #10
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	4aad      	ldr	r2, [pc, #692]	@ (8009f18 <USB_EPStartXfer+0xb20>)
 8009c62:	4313      	orrs	r3, r2
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c68:	801a      	strh	r2, [r3, #0]
 8009c6a:	e01a      	b.n	8009ca2 <USB_EPStartXfer+0x8aa>
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	785b      	ldrb	r3, [r3, #1]
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d116      	bne.n	8009ca2 <USB_EPStartXfer+0x8aa>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2250      	movs	r2, #80	@ 0x50
 8009c78:	5a9b      	ldrh	r3, [r3, r2]
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	001a      	movs	r2, r3
 8009c7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c80:	189b      	adds	r3, r3, r2
 8009c82:	673b      	str	r3, [r7, #112]	@ 0x70
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	00da      	lsls	r2, r3, #3
 8009c8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c8c:	18d3      	adds	r3, r2, r3
 8009c8e:	4aa1      	ldr	r2, [pc, #644]	@ (8009f14 <USB_EPStartXfer+0xb1c>)
 8009c90:	4694      	mov	ip, r2
 8009c92:	4463      	add	r3, ip
 8009c94:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009c96:	1d7b      	adds	r3, r7, #5
 8009c98:	33ff      	adds	r3, #255	@ 0xff
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ca0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009ca2:	2076      	movs	r0, #118	@ 0x76
 8009ca4:	183b      	adds	r3, r7, r0
 8009ca6:	683a      	ldr	r2, [r7, #0]
 8009ca8:	8952      	ldrh	r2, [r2, #10]
 8009caa:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	6959      	ldr	r1, [r3, #20]
 8009cb0:	1d7b      	adds	r3, r7, #5
 8009cb2:	33ff      	adds	r3, #255	@ 0xff
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	b29c      	uxth	r4, r3
 8009cb8:	183b      	adds	r3, r7, r0
 8009cba:	881a      	ldrh	r2, [r3, #0]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	0023      	movs	r3, r4
 8009cc0:	f000 fe04 	bl	800a8cc <USB_WritePMA>
 8009cc4:	e0ab      	b.n	8009e1e <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	785b      	ldrb	r3, [r3, #1]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d000      	beq.n	8009cd0 <USB_EPStartXfer+0x8d8>
 8009cce:	e070      	b.n	8009db2 <USB_EPStartXfer+0x9ba>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2250      	movs	r2, #80	@ 0x50
 8009cd8:	5a9b      	ldrh	r3, [r3, r2]
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	001a      	movs	r2, r3
 8009cde:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009ce0:	189b      	adds	r3, r3, r2
 8009ce2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	00da      	lsls	r2, r3, #3
 8009cea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009cec:	18d3      	adds	r3, r2, r3
 8009cee:	4a8b      	ldr	r2, [pc, #556]	@ (8009f1c <USB_EPStartXfer+0xb24>)
 8009cf0:	4694      	mov	ip, r2
 8009cf2:	4463      	add	r3, ip
 8009cf4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009cf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009cf8:	881b      	ldrh	r3, [r3, #0]
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	059b      	lsls	r3, r3, #22
 8009cfe:	0d9b      	lsrs	r3, r3, #22
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d04:	801a      	strh	r2, [r3, #0]
 8009d06:	1d7b      	adds	r3, r7, #5
 8009d08:	33ff      	adds	r3, #255	@ 0xff
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d108      	bne.n	8009d22 <USB_EPStartXfer+0x92a>
 8009d10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d12:	881b      	ldrh	r3, [r3, #0]
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	4a80      	ldr	r2, [pc, #512]	@ (8009f18 <USB_EPStartXfer+0xb20>)
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d1e:	801a      	strh	r2, [r3, #0]
 8009d20:	e06c      	b.n	8009dfc <USB_EPStartXfer+0xa04>
 8009d22:	1d7b      	adds	r3, r7, #5
 8009d24:	33ff      	adds	r3, #255	@ 0xff
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2b3e      	cmp	r3, #62	@ 0x3e
 8009d2a:	d81f      	bhi.n	8009d6c <USB_EPStartXfer+0x974>
 8009d2c:	1d7b      	adds	r3, r7, #5
 8009d2e:	33ff      	adds	r3, #255	@ 0xff
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	085b      	lsrs	r3, r3, #1
 8009d34:	21ec      	movs	r1, #236	@ 0xec
 8009d36:	187a      	adds	r2, r7, r1
 8009d38:	6013      	str	r3, [r2, #0]
 8009d3a:	1d7b      	adds	r3, r7, #5
 8009d3c:	33ff      	adds	r3, #255	@ 0xff
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2201      	movs	r2, #1
 8009d42:	4013      	ands	r3, r2
 8009d44:	d004      	beq.n	8009d50 <USB_EPStartXfer+0x958>
 8009d46:	187b      	adds	r3, r7, r1
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	187a      	adds	r2, r7, r1
 8009d4e:	6013      	str	r3, [r2, #0]
 8009d50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d52:	881b      	ldrh	r3, [r3, #0]
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	23ec      	movs	r3, #236	@ 0xec
 8009d58:	18fb      	adds	r3, r7, r3
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	029b      	lsls	r3, r3, #10
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	4313      	orrs	r3, r2
 8009d64:	b29a      	uxth	r2, r3
 8009d66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d68:	801a      	strh	r2, [r3, #0]
 8009d6a:	e047      	b.n	8009dfc <USB_EPStartXfer+0xa04>
 8009d6c:	1d7b      	adds	r3, r7, #5
 8009d6e:	33ff      	adds	r3, #255	@ 0xff
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	095b      	lsrs	r3, r3, #5
 8009d74:	21ec      	movs	r1, #236	@ 0xec
 8009d76:	187a      	adds	r2, r7, r1
 8009d78:	6013      	str	r3, [r2, #0]
 8009d7a:	1d7b      	adds	r3, r7, #5
 8009d7c:	33ff      	adds	r3, #255	@ 0xff
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	221f      	movs	r2, #31
 8009d82:	4013      	ands	r3, r2
 8009d84:	d104      	bne.n	8009d90 <USB_EPStartXfer+0x998>
 8009d86:	187b      	adds	r3, r7, r1
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	187a      	adds	r2, r7, r1
 8009d8e:	6013      	str	r3, [r2, #0]
 8009d90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d92:	881b      	ldrh	r3, [r3, #0]
 8009d94:	b29a      	uxth	r2, r3
 8009d96:	23ec      	movs	r3, #236	@ 0xec
 8009d98:	18fb      	adds	r3, r7, r3
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	029b      	lsls	r3, r3, #10
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	4313      	orrs	r3, r2
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	4a5c      	ldr	r2, [pc, #368]	@ (8009f18 <USB_EPStartXfer+0xb20>)
 8009da8:	4313      	orrs	r3, r2
 8009daa:	b29a      	uxth	r2, r3
 8009dac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009dae:	801a      	strh	r2, [r3, #0]
 8009db0:	e024      	b.n	8009dfc <USB_EPStartXfer+0xa04>
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	785b      	ldrb	r3, [r3, #1]
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d120      	bne.n	8009dfc <USB_EPStartXfer+0xa04>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2184      	movs	r1, #132	@ 0x84
 8009dbe:	187a      	adds	r2, r7, r1
 8009dc0:	6013      	str	r3, [r2, #0]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2250      	movs	r2, #80	@ 0x50
 8009dc6:	5a9b      	ldrh	r3, [r3, r2]
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	001a      	movs	r2, r3
 8009dcc:	187b      	adds	r3, r7, r1
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	189b      	adds	r3, r3, r2
 8009dd2:	187a      	adds	r2, r7, r1
 8009dd4:	6013      	str	r3, [r2, #0]
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	00da      	lsls	r2, r3, #3
 8009ddc:	187b      	adds	r3, r7, r1
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	18d3      	adds	r3, r2, r3
 8009de2:	4a4e      	ldr	r2, [pc, #312]	@ (8009f1c <USB_EPStartXfer+0xb24>)
 8009de4:	4694      	mov	ip, r2
 8009de6:	4463      	add	r3, ip
 8009de8:	2180      	movs	r1, #128	@ 0x80
 8009dea:	187a      	adds	r2, r7, r1
 8009dec:	6013      	str	r3, [r2, #0]
 8009dee:	1d7b      	adds	r3, r7, #5
 8009df0:	33ff      	adds	r3, #255	@ 0xff
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	b29a      	uxth	r2, r3
 8009df6:	187b      	adds	r3, r7, r1
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009dfc:	2076      	movs	r0, #118	@ 0x76
 8009dfe:	183b      	adds	r3, r7, r0
 8009e00:	683a      	ldr	r2, [r7, #0]
 8009e02:	8912      	ldrh	r2, [r2, #8]
 8009e04:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	6959      	ldr	r1, [r3, #20]
 8009e0a:	1d7b      	adds	r3, r7, #5
 8009e0c:	33ff      	adds	r3, #255	@ 0xff
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	b29c      	uxth	r4, r3
 8009e12:	183b      	adds	r3, r7, r0
 8009e14:	881a      	ldrh	r2, [r3, #0]
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	0023      	movs	r3, r4
 8009e1a:	f000 fd57 	bl	800a8cc <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	18d3      	adds	r3, r2, r3
 8009e28:	881b      	ldrh	r3, [r3, #0]
 8009e2a:	b29a      	uxth	r2, r3
 8009e2c:	200a      	movs	r0, #10
 8009e2e:	183b      	adds	r3, r7, r0
 8009e30:	493b      	ldr	r1, [pc, #236]	@ (8009f20 <USB_EPStartXfer+0xb28>)
 8009e32:	400a      	ands	r2, r1
 8009e34:	801a      	strh	r2, [r3, #0]
 8009e36:	183b      	adds	r3, r7, r0
 8009e38:	183a      	adds	r2, r7, r0
 8009e3a:	8812      	ldrh	r2, [r2, #0]
 8009e3c:	2110      	movs	r1, #16
 8009e3e:	404a      	eors	r2, r1
 8009e40:	801a      	strh	r2, [r3, #0]
 8009e42:	183b      	adds	r3, r7, r0
 8009e44:	183a      	adds	r2, r7, r0
 8009e46:	8812      	ldrh	r2, [r2, #0]
 8009e48:	2120      	movs	r1, #32
 8009e4a:	404a      	eors	r2, r1
 8009e4c:	801a      	strh	r2, [r3, #0]
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	18d3      	adds	r3, r2, r3
 8009e58:	183a      	adds	r2, r7, r0
 8009e5a:	8812      	ldrh	r2, [r2, #0]
 8009e5c:	4931      	ldr	r1, [pc, #196]	@ (8009f24 <USB_EPStartXfer+0xb2c>)
 8009e5e:	430a      	orrs	r2, r1
 8009e60:	b292      	uxth	r2, r2
 8009e62:	801a      	strh	r2, [r3, #0]
 8009e64:	f000 fbe9 	bl	800a63a <USB_EPStartXfer+0x1242>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	7b1b      	ldrb	r3, [r3, #12]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d000      	beq.n	8009e72 <USB_EPStartXfer+0xa7a>
 8009e70:	e0a8      	b.n	8009fc4 <USB_EPStartXfer+0xbcc>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	699a      	ldr	r2, [r3, #24]
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	691b      	ldr	r3, [r3, #16]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d90d      	bls.n	8009e9a <USB_EPStartXfer+0xaa2>
      {
        len = ep->maxpacket;
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	1d7a      	adds	r2, r7, #5
 8009e84:	32ff      	adds	r2, #255	@ 0xff
 8009e86:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	699a      	ldr	r2, [r3, #24]
 8009e8c:	1d7b      	adds	r3, r7, #5
 8009e8e:	33ff      	adds	r3, #255	@ 0xff
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	1ad2      	subs	r2, r2, r3
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	619a      	str	r2, [r3, #24]
 8009e98:	e007      	b.n	8009eaa <USB_EPStartXfer+0xab2>
      }
      else
      {
        len = ep->xfer_len;
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	699b      	ldr	r3, [r3, #24]
 8009e9e:	1d7a      	adds	r2, r7, #5
 8009ea0:	32ff      	adds	r2, #255	@ 0xff
 8009ea2:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2190      	movs	r1, #144	@ 0x90
 8009eae:	187a      	adds	r2, r7, r1
 8009eb0:	6013      	str	r3, [r2, #0]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2250      	movs	r2, #80	@ 0x50
 8009eb6:	5a9b      	ldrh	r3, [r3, r2]
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	001a      	movs	r2, r3
 8009ebc:	187b      	adds	r3, r7, r1
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	189b      	adds	r3, r3, r2
 8009ec2:	187a      	adds	r2, r7, r1
 8009ec4:	6013      	str	r3, [r2, #0]
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	00da      	lsls	r2, r3, #3
 8009ecc:	187b      	adds	r3, r7, r1
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	18d3      	adds	r3, r2, r3
 8009ed2:	4a10      	ldr	r2, [pc, #64]	@ (8009f14 <USB_EPStartXfer+0xb1c>)
 8009ed4:	4694      	mov	ip, r2
 8009ed6:	4463      	add	r3, ip
 8009ed8:	218c      	movs	r1, #140	@ 0x8c
 8009eda:	187a      	adds	r2, r7, r1
 8009edc:	6013      	str	r3, [r2, #0]
 8009ede:	187b      	adds	r3, r7, r1
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	881b      	ldrh	r3, [r3, #0]
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	059b      	lsls	r3, r3, #22
 8009ee8:	0d9b      	lsrs	r3, r3, #22
 8009eea:	b29a      	uxth	r2, r3
 8009eec:	187b      	adds	r3, r7, r1
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	801a      	strh	r2, [r3, #0]
 8009ef2:	1d7b      	adds	r3, r7, #5
 8009ef4:	33ff      	adds	r3, #255	@ 0xff
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d115      	bne.n	8009f28 <USB_EPStartXfer+0xb30>
 8009efc:	187b      	adds	r3, r7, r1
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	881b      	ldrh	r3, [r3, #0]
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	4a04      	ldr	r2, [pc, #16]	@ (8009f18 <USB_EPStartXfer+0xb20>)
 8009f06:	4313      	orrs	r3, r2
 8009f08:	b29a      	uxth	r2, r3
 8009f0a:	187b      	adds	r3, r7, r1
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	801a      	strh	r2, [r3, #0]
 8009f10:	e36e      	b.n	800a5f0 <USB_EPStartXfer+0x11f8>
 8009f12:	46c0      	nop			@ (mov r8, r8)
 8009f14:	00000406 	.word	0x00000406
 8009f18:	ffff8000 	.word	0xffff8000
 8009f1c:	00000402 	.word	0x00000402
 8009f20:	ffff8fbf 	.word	0xffff8fbf
 8009f24:	ffff8080 	.word	0xffff8080
 8009f28:	1d7b      	adds	r3, r7, #5
 8009f2a:	33ff      	adds	r3, #255	@ 0xff
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f30:	d822      	bhi.n	8009f78 <USB_EPStartXfer+0xb80>
 8009f32:	1d7b      	adds	r3, r7, #5
 8009f34:	33ff      	adds	r3, #255	@ 0xff
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	085b      	lsrs	r3, r3, #1
 8009f3a:	21e8      	movs	r1, #232	@ 0xe8
 8009f3c:	187a      	adds	r2, r7, r1
 8009f3e:	6013      	str	r3, [r2, #0]
 8009f40:	1d7b      	adds	r3, r7, #5
 8009f42:	33ff      	adds	r3, #255	@ 0xff
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2201      	movs	r2, #1
 8009f48:	4013      	ands	r3, r2
 8009f4a:	d004      	beq.n	8009f56 <USB_EPStartXfer+0xb5e>
 8009f4c:	187b      	adds	r3, r7, r1
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	3301      	adds	r3, #1
 8009f52:	187a      	adds	r2, r7, r1
 8009f54:	6013      	str	r3, [r2, #0]
 8009f56:	218c      	movs	r1, #140	@ 0x8c
 8009f58:	187b      	adds	r3, r7, r1
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	881b      	ldrh	r3, [r3, #0]
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	23e8      	movs	r3, #232	@ 0xe8
 8009f62:	18fb      	adds	r3, r7, r3
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	029b      	lsls	r3, r3, #10
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	b29a      	uxth	r2, r3
 8009f70:	187b      	adds	r3, r7, r1
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	801a      	strh	r2, [r3, #0]
 8009f76:	e33b      	b.n	800a5f0 <USB_EPStartXfer+0x11f8>
 8009f78:	1d7b      	adds	r3, r7, #5
 8009f7a:	33ff      	adds	r3, #255	@ 0xff
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	095b      	lsrs	r3, r3, #5
 8009f80:	21e8      	movs	r1, #232	@ 0xe8
 8009f82:	187a      	adds	r2, r7, r1
 8009f84:	6013      	str	r3, [r2, #0]
 8009f86:	1d7b      	adds	r3, r7, #5
 8009f88:	33ff      	adds	r3, #255	@ 0xff
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	221f      	movs	r2, #31
 8009f8e:	4013      	ands	r3, r2
 8009f90:	d104      	bne.n	8009f9c <USB_EPStartXfer+0xba4>
 8009f92:	187b      	adds	r3, r7, r1
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	3b01      	subs	r3, #1
 8009f98:	187a      	adds	r2, r7, r1
 8009f9a:	6013      	str	r3, [r2, #0]
 8009f9c:	218c      	movs	r1, #140	@ 0x8c
 8009f9e:	187b      	adds	r3, r7, r1
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	881b      	ldrh	r3, [r3, #0]
 8009fa4:	b29a      	uxth	r2, r3
 8009fa6:	23e8      	movs	r3, #232	@ 0xe8
 8009fa8:	18fb      	adds	r3, r7, r3
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	029b      	lsls	r3, r3, #10
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	4ad7      	ldr	r2, [pc, #860]	@ (800a314 <USB_EPStartXfer+0xf1c>)
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	187b      	adds	r3, r7, r1
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	801a      	strh	r2, [r3, #0]
 8009fc2:	e315      	b.n	800a5f0 <USB_EPStartXfer+0x11f8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	78db      	ldrb	r3, [r3, #3]
 8009fc8:	2b02      	cmp	r3, #2
 8009fca:	d000      	beq.n	8009fce <USB_EPStartXfer+0xbd6>
 8009fcc:	e189      	b.n	800a2e2 <USB_EPStartXfer+0xeea>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	785b      	ldrb	r3, [r3, #1]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d000      	beq.n	8009fd8 <USB_EPStartXfer+0xbe0>
 8009fd6:	e07b      	b.n	800a0d0 <USB_EPStartXfer+0xcd8>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	21ac      	movs	r1, #172	@ 0xac
 8009fdc:	187a      	adds	r2, r7, r1
 8009fde:	6013      	str	r3, [r2, #0]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2250      	movs	r2, #80	@ 0x50
 8009fe4:	5a9b      	ldrh	r3, [r3, r2]
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	001a      	movs	r2, r3
 8009fea:	187b      	adds	r3, r7, r1
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	189b      	adds	r3, r3, r2
 8009ff0:	187a      	adds	r2, r7, r1
 8009ff2:	6013      	str	r3, [r2, #0]
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	00da      	lsls	r2, r3, #3
 8009ffa:	187b      	adds	r3, r7, r1
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	18d3      	adds	r3, r2, r3
 800a000:	4ac5      	ldr	r2, [pc, #788]	@ (800a318 <USB_EPStartXfer+0xf20>)
 800a002:	4694      	mov	ip, r2
 800a004:	4463      	add	r3, ip
 800a006:	21a8      	movs	r1, #168	@ 0xa8
 800a008:	187a      	adds	r2, r7, r1
 800a00a:	6013      	str	r3, [r2, #0]
 800a00c:	187b      	adds	r3, r7, r1
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	881b      	ldrh	r3, [r3, #0]
 800a012:	b29b      	uxth	r3, r3
 800a014:	059b      	lsls	r3, r3, #22
 800a016:	0d9b      	lsrs	r3, r3, #22
 800a018:	b29a      	uxth	r2, r3
 800a01a:	187b      	adds	r3, r7, r1
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	801a      	strh	r2, [r3, #0]
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10a      	bne.n	800a03e <USB_EPStartXfer+0xc46>
 800a028:	187b      	adds	r3, r7, r1
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	881b      	ldrh	r3, [r3, #0]
 800a02e:	b29b      	uxth	r3, r3
 800a030:	4ab8      	ldr	r2, [pc, #736]	@ (800a314 <USB_EPStartXfer+0xf1c>)
 800a032:	4313      	orrs	r3, r2
 800a034:	b29a      	uxth	r2, r3
 800a036:	187b      	adds	r3, r7, r1
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	801a      	strh	r2, [r3, #0]
 800a03c:	e06c      	b.n	800a118 <USB_EPStartXfer+0xd20>
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	691b      	ldr	r3, [r3, #16]
 800a042:	2b3e      	cmp	r3, #62	@ 0x3e
 800a044:	d820      	bhi.n	800a088 <USB_EPStartXfer+0xc90>
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	085b      	lsrs	r3, r3, #1
 800a04c:	21e4      	movs	r1, #228	@ 0xe4
 800a04e:	187a      	adds	r2, r7, r1
 800a050:	6013      	str	r3, [r2, #0]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	691b      	ldr	r3, [r3, #16]
 800a056:	2201      	movs	r2, #1
 800a058:	4013      	ands	r3, r2
 800a05a:	d004      	beq.n	800a066 <USB_EPStartXfer+0xc6e>
 800a05c:	187b      	adds	r3, r7, r1
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	3301      	adds	r3, #1
 800a062:	187a      	adds	r2, r7, r1
 800a064:	6013      	str	r3, [r2, #0]
 800a066:	21a8      	movs	r1, #168	@ 0xa8
 800a068:	187b      	adds	r3, r7, r1
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	881b      	ldrh	r3, [r3, #0]
 800a06e:	b29a      	uxth	r2, r3
 800a070:	23e4      	movs	r3, #228	@ 0xe4
 800a072:	18fb      	adds	r3, r7, r3
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	b29b      	uxth	r3, r3
 800a078:	029b      	lsls	r3, r3, #10
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	4313      	orrs	r3, r2
 800a07e:	b29a      	uxth	r2, r3
 800a080:	187b      	adds	r3, r7, r1
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	801a      	strh	r2, [r3, #0]
 800a086:	e047      	b.n	800a118 <USB_EPStartXfer+0xd20>
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	095b      	lsrs	r3, r3, #5
 800a08e:	21e4      	movs	r1, #228	@ 0xe4
 800a090:	187a      	adds	r2, r7, r1
 800a092:	6013      	str	r3, [r2, #0]
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	221f      	movs	r2, #31
 800a09a:	4013      	ands	r3, r2
 800a09c:	d104      	bne.n	800a0a8 <USB_EPStartXfer+0xcb0>
 800a09e:	187b      	adds	r3, r7, r1
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	187a      	adds	r2, r7, r1
 800a0a6:	6013      	str	r3, [r2, #0]
 800a0a8:	21a8      	movs	r1, #168	@ 0xa8
 800a0aa:	187b      	adds	r3, r7, r1
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	881b      	ldrh	r3, [r3, #0]
 800a0b0:	b29a      	uxth	r2, r3
 800a0b2:	23e4      	movs	r3, #228	@ 0xe4
 800a0b4:	18fb      	adds	r3, r7, r3
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	029b      	lsls	r3, r3, #10
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	4a94      	ldr	r2, [pc, #592]	@ (800a314 <USB_EPStartXfer+0xf1c>)
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	b29a      	uxth	r2, r3
 800a0c8:	187b      	adds	r3, r7, r1
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	801a      	strh	r2, [r3, #0]
 800a0ce:	e023      	b.n	800a118 <USB_EPStartXfer+0xd20>
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	785b      	ldrb	r3, [r3, #1]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d11f      	bne.n	800a118 <USB_EPStartXfer+0xd20>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	21b4      	movs	r1, #180	@ 0xb4
 800a0dc:	187a      	adds	r2, r7, r1
 800a0de:	6013      	str	r3, [r2, #0]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2250      	movs	r2, #80	@ 0x50
 800a0e4:	5a9b      	ldrh	r3, [r3, r2]
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	001a      	movs	r2, r3
 800a0ea:	187b      	adds	r3, r7, r1
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	189b      	adds	r3, r3, r2
 800a0f0:	187a      	adds	r2, r7, r1
 800a0f2:	6013      	str	r3, [r2, #0]
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	00da      	lsls	r2, r3, #3
 800a0fa:	187b      	adds	r3, r7, r1
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	18d3      	adds	r3, r2, r3
 800a100:	4a85      	ldr	r2, [pc, #532]	@ (800a318 <USB_EPStartXfer+0xf20>)
 800a102:	4694      	mov	ip, r2
 800a104:	4463      	add	r3, ip
 800a106:	21b0      	movs	r1, #176	@ 0xb0
 800a108:	187a      	adds	r2, r7, r1
 800a10a:	6013      	str	r3, [r2, #0]
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	b29a      	uxth	r2, r3
 800a112:	187b      	adds	r3, r7, r1
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	801a      	strh	r2, [r3, #0]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	22a4      	movs	r2, #164	@ 0xa4
 800a11c:	18ba      	adds	r2, r7, r2
 800a11e:	6013      	str	r3, [r2, #0]
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	785b      	ldrb	r3, [r3, #1]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d000      	beq.n	800a12a <USB_EPStartXfer+0xd32>
 800a128:	e07b      	b.n	800a222 <USB_EPStartXfer+0xe2a>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	219c      	movs	r1, #156	@ 0x9c
 800a12e:	187a      	adds	r2, r7, r1
 800a130:	6013      	str	r3, [r2, #0]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2250      	movs	r2, #80	@ 0x50
 800a136:	5a9b      	ldrh	r3, [r3, r2]
 800a138:	b29b      	uxth	r3, r3
 800a13a:	001a      	movs	r2, r3
 800a13c:	187b      	adds	r3, r7, r1
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	189b      	adds	r3, r3, r2
 800a142:	187a      	adds	r2, r7, r1
 800a144:	6013      	str	r3, [r2, #0]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	00da      	lsls	r2, r3, #3
 800a14c:	187b      	adds	r3, r7, r1
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	18d3      	adds	r3, r2, r3
 800a152:	4a72      	ldr	r2, [pc, #456]	@ (800a31c <USB_EPStartXfer+0xf24>)
 800a154:	4694      	mov	ip, r2
 800a156:	4463      	add	r3, ip
 800a158:	2198      	movs	r1, #152	@ 0x98
 800a15a:	187a      	adds	r2, r7, r1
 800a15c:	6013      	str	r3, [r2, #0]
 800a15e:	187b      	adds	r3, r7, r1
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	881b      	ldrh	r3, [r3, #0]
 800a164:	b29b      	uxth	r3, r3
 800a166:	059b      	lsls	r3, r3, #22
 800a168:	0d9b      	lsrs	r3, r3, #22
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	187b      	adds	r3, r7, r1
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	801a      	strh	r2, [r3, #0]
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	691b      	ldr	r3, [r3, #16]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d10a      	bne.n	800a190 <USB_EPStartXfer+0xd98>
 800a17a:	187b      	adds	r3, r7, r1
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	881b      	ldrh	r3, [r3, #0]
 800a180:	b29b      	uxth	r3, r3
 800a182:	4a64      	ldr	r2, [pc, #400]	@ (800a314 <USB_EPStartXfer+0xf1c>)
 800a184:	4313      	orrs	r3, r2
 800a186:	b29a      	uxth	r2, r3
 800a188:	187b      	adds	r3, r7, r1
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	801a      	strh	r2, [r3, #0]
 800a18e:	e069      	b.n	800a264 <USB_EPStartXfer+0xe6c>
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	691b      	ldr	r3, [r3, #16]
 800a194:	2b3e      	cmp	r3, #62	@ 0x3e
 800a196:	d820      	bhi.n	800a1da <USB_EPStartXfer+0xde2>
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	085b      	lsrs	r3, r3, #1
 800a19e:	21e0      	movs	r1, #224	@ 0xe0
 800a1a0:	187a      	adds	r2, r7, r1
 800a1a2:	6013      	str	r3, [r2, #0]
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	4013      	ands	r3, r2
 800a1ac:	d004      	beq.n	800a1b8 <USB_EPStartXfer+0xdc0>
 800a1ae:	187b      	adds	r3, r7, r1
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	187a      	adds	r2, r7, r1
 800a1b6:	6013      	str	r3, [r2, #0]
 800a1b8:	2198      	movs	r1, #152	@ 0x98
 800a1ba:	187b      	adds	r3, r7, r1
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	881b      	ldrh	r3, [r3, #0]
 800a1c0:	b29a      	uxth	r2, r3
 800a1c2:	23e0      	movs	r3, #224	@ 0xe0
 800a1c4:	18fb      	adds	r3, r7, r3
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	029b      	lsls	r3, r3, #10
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	187b      	adds	r3, r7, r1
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	801a      	strh	r2, [r3, #0]
 800a1d8:	e044      	b.n	800a264 <USB_EPStartXfer+0xe6c>
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	691b      	ldr	r3, [r3, #16]
 800a1de:	095b      	lsrs	r3, r3, #5
 800a1e0:	21e0      	movs	r1, #224	@ 0xe0
 800a1e2:	187a      	adds	r2, r7, r1
 800a1e4:	6013      	str	r3, [r2, #0]
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	691b      	ldr	r3, [r3, #16]
 800a1ea:	221f      	movs	r2, #31
 800a1ec:	4013      	ands	r3, r2
 800a1ee:	d104      	bne.n	800a1fa <USB_EPStartXfer+0xe02>
 800a1f0:	187b      	adds	r3, r7, r1
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	3b01      	subs	r3, #1
 800a1f6:	187a      	adds	r2, r7, r1
 800a1f8:	6013      	str	r3, [r2, #0]
 800a1fa:	2198      	movs	r1, #152	@ 0x98
 800a1fc:	187b      	adds	r3, r7, r1
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	881b      	ldrh	r3, [r3, #0]
 800a202:	b29a      	uxth	r2, r3
 800a204:	23e0      	movs	r3, #224	@ 0xe0
 800a206:	18fb      	adds	r3, r7, r3
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	029b      	lsls	r3, r3, #10
 800a20e:	b29b      	uxth	r3, r3
 800a210:	4313      	orrs	r3, r2
 800a212:	b29b      	uxth	r3, r3
 800a214:	4a3f      	ldr	r2, [pc, #252]	@ (800a314 <USB_EPStartXfer+0xf1c>)
 800a216:	4313      	orrs	r3, r2
 800a218:	b29a      	uxth	r2, r3
 800a21a:	187b      	adds	r3, r7, r1
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	801a      	strh	r2, [r3, #0]
 800a220:	e020      	b.n	800a264 <USB_EPStartXfer+0xe6c>
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	785b      	ldrb	r3, [r3, #1]
 800a226:	2b01      	cmp	r3, #1
 800a228:	d11c      	bne.n	800a264 <USB_EPStartXfer+0xe6c>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2250      	movs	r2, #80	@ 0x50
 800a22e:	5a9b      	ldrh	r3, [r3, r2]
 800a230:	b29b      	uxth	r3, r3
 800a232:	001a      	movs	r2, r3
 800a234:	21a4      	movs	r1, #164	@ 0xa4
 800a236:	187b      	adds	r3, r7, r1
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	189b      	adds	r3, r3, r2
 800a23c:	187a      	adds	r2, r7, r1
 800a23e:	6013      	str	r3, [r2, #0]
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	00da      	lsls	r2, r3, #3
 800a246:	187b      	adds	r3, r7, r1
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	18d3      	adds	r3, r2, r3
 800a24c:	4a33      	ldr	r2, [pc, #204]	@ (800a31c <USB_EPStartXfer+0xf24>)
 800a24e:	4694      	mov	ip, r2
 800a250:	4463      	add	r3, ip
 800a252:	21a0      	movs	r1, #160	@ 0xa0
 800a254:	187a      	adds	r2, r7, r1
 800a256:	6013      	str	r3, [r2, #0]
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	691b      	ldr	r3, [r3, #16]
 800a25c:	b29a      	uxth	r2, r3
 800a25e:	187b      	adds	r3, r7, r1
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	69db      	ldr	r3, [r3, #28]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d100      	bne.n	800a26e <USB_EPStartXfer+0xe76>
 800a26c:	e1c0      	b.n	800a5f0 <USB_EPStartXfer+0x11f8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	18d2      	adds	r2, r2, r3
 800a278:	2196      	movs	r1, #150	@ 0x96
 800a27a:	187b      	adds	r3, r7, r1
 800a27c:	8812      	ldrh	r2, [r2, #0]
 800a27e:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a280:	187b      	adds	r3, r7, r1
 800a282:	881a      	ldrh	r2, [r3, #0]
 800a284:	2380      	movs	r3, #128	@ 0x80
 800a286:	01db      	lsls	r3, r3, #7
 800a288:	4013      	ands	r3, r2
 800a28a:	d004      	beq.n	800a296 <USB_EPStartXfer+0xe9e>
 800a28c:	187b      	adds	r3, r7, r1
 800a28e:	881b      	ldrh	r3, [r3, #0]
 800a290:	2240      	movs	r2, #64	@ 0x40
 800a292:	4013      	ands	r3, r2
 800a294:	d10d      	bne.n	800a2b2 <USB_EPStartXfer+0xeba>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a296:	2196      	movs	r1, #150	@ 0x96
 800a298:	187b      	adds	r3, r7, r1
 800a29a:	881a      	ldrh	r2, [r3, #0]
 800a29c:	2380      	movs	r3, #128	@ 0x80
 800a29e:	01db      	lsls	r3, r3, #7
 800a2a0:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a2a2:	d000      	beq.n	800a2a6 <USB_EPStartXfer+0xeae>
 800a2a4:	e1a4      	b.n	800a5f0 <USB_EPStartXfer+0x11f8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a2a6:	187b      	adds	r3, r7, r1
 800a2a8:	881b      	ldrh	r3, [r3, #0]
 800a2aa:	2240      	movs	r2, #64	@ 0x40
 800a2ac:	4013      	ands	r3, r2
 800a2ae:	d000      	beq.n	800a2b2 <USB_EPStartXfer+0xeba>
 800a2b0:	e19e      	b.n	800a5f0 <USB_EPStartXfer+0x11f8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	18d3      	adds	r3, r2, r3
 800a2bc:	881b      	ldrh	r3, [r3, #0]
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	2094      	movs	r0, #148	@ 0x94
 800a2c2:	183b      	adds	r3, r7, r0
 800a2c4:	4916      	ldr	r1, [pc, #88]	@ (800a320 <USB_EPStartXfer+0xf28>)
 800a2c6:	400a      	ands	r2, r1
 800a2c8:	801a      	strh	r2, [r3, #0]
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	18d3      	adds	r3, r2, r3
 800a2d4:	183a      	adds	r2, r7, r0
 800a2d6:	8812      	ldrh	r2, [r2, #0]
 800a2d8:	4912      	ldr	r1, [pc, #72]	@ (800a324 <USB_EPStartXfer+0xf2c>)
 800a2da:	430a      	orrs	r2, r1
 800a2dc:	b292      	uxth	r2, r2
 800a2de:	801a      	strh	r2, [r3, #0]
 800a2e0:	e186      	b.n	800a5f0 <USB_EPStartXfer+0x11f8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	78db      	ldrb	r3, [r3, #3]
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d000      	beq.n	800a2ec <USB_EPStartXfer+0xef4>
 800a2ea:	e17f      	b.n	800a5ec <USB_EPStartXfer+0x11f4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	699a      	ldr	r2, [r3, #24]
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d917      	bls.n	800a328 <USB_EPStartXfer+0xf30>
        {
          len = ep->maxpacket;
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	691b      	ldr	r3, [r3, #16]
 800a2fc:	1d7a      	adds	r2, r7, #5
 800a2fe:	32ff      	adds	r2, #255	@ 0xff
 800a300:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	699a      	ldr	r2, [r3, #24]
 800a306:	1d7b      	adds	r3, r7, #5
 800a308:	33ff      	adds	r3, #255	@ 0xff
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	1ad2      	subs	r2, r2, r3
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	619a      	str	r2, [r3, #24]
 800a312:	e011      	b.n	800a338 <USB_EPStartXfer+0xf40>
 800a314:	ffff8000 	.word	0xffff8000
 800a318:	00000402 	.word	0x00000402
 800a31c:	00000406 	.word	0x00000406
 800a320:	ffff8f8f 	.word	0xffff8f8f
 800a324:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	699b      	ldr	r3, [r3, #24]
 800a32c:	1d7a      	adds	r2, r7, #5
 800a32e:	32ff      	adds	r2, #255	@ 0xff
 800a330:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	2200      	movs	r2, #0
 800a336:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	785b      	ldrb	r3, [r3, #1]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d000      	beq.n	800a342 <USB_EPStartXfer+0xf4a>
 800a340:	e081      	b.n	800a446 <USB_EPStartXfer+0x104e>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	21cc      	movs	r1, #204	@ 0xcc
 800a346:	187a      	adds	r2, r7, r1
 800a348:	6013      	str	r3, [r2, #0]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2250      	movs	r2, #80	@ 0x50
 800a34e:	5a9b      	ldrh	r3, [r3, r2]
 800a350:	b29b      	uxth	r3, r3
 800a352:	001a      	movs	r2, r3
 800a354:	187b      	adds	r3, r7, r1
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	189b      	adds	r3, r3, r2
 800a35a:	187a      	adds	r2, r7, r1
 800a35c:	6013      	str	r3, [r2, #0]
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	00da      	lsls	r2, r3, #3
 800a364:	187b      	adds	r3, r7, r1
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	18d3      	adds	r3, r2, r3
 800a36a:	4ab6      	ldr	r2, [pc, #728]	@ (800a644 <USB_EPStartXfer+0x124c>)
 800a36c:	4694      	mov	ip, r2
 800a36e:	4463      	add	r3, ip
 800a370:	21c8      	movs	r1, #200	@ 0xc8
 800a372:	187a      	adds	r2, r7, r1
 800a374:	6013      	str	r3, [r2, #0]
 800a376:	187b      	adds	r3, r7, r1
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	881b      	ldrh	r3, [r3, #0]
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	059b      	lsls	r3, r3, #22
 800a380:	0d9b      	lsrs	r3, r3, #22
 800a382:	b29a      	uxth	r2, r3
 800a384:	187b      	adds	r3, r7, r1
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	801a      	strh	r2, [r3, #0]
 800a38a:	1d7b      	adds	r3, r7, #5
 800a38c:	33ff      	adds	r3, #255	@ 0xff
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d10a      	bne.n	800a3aa <USB_EPStartXfer+0xfb2>
 800a394:	187b      	adds	r3, r7, r1
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	881b      	ldrh	r3, [r3, #0]
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	4aaa      	ldr	r2, [pc, #680]	@ (800a648 <USB_EPStartXfer+0x1250>)
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	b29a      	uxth	r2, r3
 800a3a2:	187b      	adds	r3, r7, r1
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	801a      	strh	r2, [r3, #0]
 800a3a8:	e072      	b.n	800a490 <USB_EPStartXfer+0x1098>
 800a3aa:	1d7b      	adds	r3, r7, #5
 800a3ac:	33ff      	adds	r3, #255	@ 0xff
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2b3e      	cmp	r3, #62	@ 0x3e
 800a3b2:	d822      	bhi.n	800a3fa <USB_EPStartXfer+0x1002>
 800a3b4:	1d7b      	adds	r3, r7, #5
 800a3b6:	33ff      	adds	r3, #255	@ 0xff
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	085b      	lsrs	r3, r3, #1
 800a3bc:	21dc      	movs	r1, #220	@ 0xdc
 800a3be:	187a      	adds	r2, r7, r1
 800a3c0:	6013      	str	r3, [r2, #0]
 800a3c2:	1d7b      	adds	r3, r7, #5
 800a3c4:	33ff      	adds	r3, #255	@ 0xff
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	d004      	beq.n	800a3d8 <USB_EPStartXfer+0xfe0>
 800a3ce:	187b      	adds	r3, r7, r1
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	187a      	adds	r2, r7, r1
 800a3d6:	6013      	str	r3, [r2, #0]
 800a3d8:	21c8      	movs	r1, #200	@ 0xc8
 800a3da:	187b      	adds	r3, r7, r1
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	881b      	ldrh	r3, [r3, #0]
 800a3e0:	b29a      	uxth	r2, r3
 800a3e2:	23dc      	movs	r3, #220	@ 0xdc
 800a3e4:	18fb      	adds	r3, r7, r3
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	029b      	lsls	r3, r3, #10
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	187b      	adds	r3, r7, r1
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	801a      	strh	r2, [r3, #0]
 800a3f8:	e04a      	b.n	800a490 <USB_EPStartXfer+0x1098>
 800a3fa:	1d7b      	adds	r3, r7, #5
 800a3fc:	33ff      	adds	r3, #255	@ 0xff
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	095b      	lsrs	r3, r3, #5
 800a402:	21dc      	movs	r1, #220	@ 0xdc
 800a404:	187a      	adds	r2, r7, r1
 800a406:	6013      	str	r3, [r2, #0]
 800a408:	1d7b      	adds	r3, r7, #5
 800a40a:	33ff      	adds	r3, #255	@ 0xff
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	221f      	movs	r2, #31
 800a410:	4013      	ands	r3, r2
 800a412:	d104      	bne.n	800a41e <USB_EPStartXfer+0x1026>
 800a414:	187b      	adds	r3, r7, r1
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	3b01      	subs	r3, #1
 800a41a:	187a      	adds	r2, r7, r1
 800a41c:	6013      	str	r3, [r2, #0]
 800a41e:	21c8      	movs	r1, #200	@ 0xc8
 800a420:	187b      	adds	r3, r7, r1
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	881b      	ldrh	r3, [r3, #0]
 800a426:	b29a      	uxth	r2, r3
 800a428:	23dc      	movs	r3, #220	@ 0xdc
 800a42a:	18fb      	adds	r3, r7, r3
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	b29b      	uxth	r3, r3
 800a430:	029b      	lsls	r3, r3, #10
 800a432:	b29b      	uxth	r3, r3
 800a434:	4313      	orrs	r3, r2
 800a436:	b29b      	uxth	r3, r3
 800a438:	4a83      	ldr	r2, [pc, #524]	@ (800a648 <USB_EPStartXfer+0x1250>)
 800a43a:	4313      	orrs	r3, r2
 800a43c:	b29a      	uxth	r2, r3
 800a43e:	187b      	adds	r3, r7, r1
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	801a      	strh	r2, [r3, #0]
 800a444:	e024      	b.n	800a490 <USB_EPStartXfer+0x1098>
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	785b      	ldrb	r3, [r3, #1]
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d120      	bne.n	800a490 <USB_EPStartXfer+0x1098>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	21d4      	movs	r1, #212	@ 0xd4
 800a452:	187a      	adds	r2, r7, r1
 800a454:	6013      	str	r3, [r2, #0]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2250      	movs	r2, #80	@ 0x50
 800a45a:	5a9b      	ldrh	r3, [r3, r2]
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	001a      	movs	r2, r3
 800a460:	187b      	adds	r3, r7, r1
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	189b      	adds	r3, r3, r2
 800a466:	187a      	adds	r2, r7, r1
 800a468:	6013      	str	r3, [r2, #0]
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	00da      	lsls	r2, r3, #3
 800a470:	187b      	adds	r3, r7, r1
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	18d3      	adds	r3, r2, r3
 800a476:	4a73      	ldr	r2, [pc, #460]	@ (800a644 <USB_EPStartXfer+0x124c>)
 800a478:	4694      	mov	ip, r2
 800a47a:	4463      	add	r3, ip
 800a47c:	21d0      	movs	r1, #208	@ 0xd0
 800a47e:	187a      	adds	r2, r7, r1
 800a480:	6013      	str	r3, [r2, #0]
 800a482:	1d7b      	adds	r3, r7, #5
 800a484:	33ff      	adds	r3, #255	@ 0xff
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	b29a      	uxth	r2, r3
 800a48a:	187b      	adds	r3, r7, r1
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	801a      	strh	r2, [r3, #0]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	22c4      	movs	r2, #196	@ 0xc4
 800a494:	18ba      	adds	r2, r7, r2
 800a496:	6013      	str	r3, [r2, #0]
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	785b      	ldrb	r3, [r3, #1]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d000      	beq.n	800a4a2 <USB_EPStartXfer+0x10aa>
 800a4a0:	e081      	b.n	800a5a6 <USB_EPStartXfer+0x11ae>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	21bc      	movs	r1, #188	@ 0xbc
 800a4a6:	187a      	adds	r2, r7, r1
 800a4a8:	6013      	str	r3, [r2, #0]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2250      	movs	r2, #80	@ 0x50
 800a4ae:	5a9b      	ldrh	r3, [r3, r2]
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	001a      	movs	r2, r3
 800a4b4:	187b      	adds	r3, r7, r1
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	189b      	adds	r3, r3, r2
 800a4ba:	187a      	adds	r2, r7, r1
 800a4bc:	6013      	str	r3, [r2, #0]
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	00da      	lsls	r2, r3, #3
 800a4c4:	187b      	adds	r3, r7, r1
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	18d3      	adds	r3, r2, r3
 800a4ca:	4a60      	ldr	r2, [pc, #384]	@ (800a64c <USB_EPStartXfer+0x1254>)
 800a4cc:	4694      	mov	ip, r2
 800a4ce:	4463      	add	r3, ip
 800a4d0:	21b8      	movs	r1, #184	@ 0xb8
 800a4d2:	187a      	adds	r2, r7, r1
 800a4d4:	6013      	str	r3, [r2, #0]
 800a4d6:	187b      	adds	r3, r7, r1
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	881b      	ldrh	r3, [r3, #0]
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	059b      	lsls	r3, r3, #22
 800a4e0:	0d9b      	lsrs	r3, r3, #22
 800a4e2:	b29a      	uxth	r2, r3
 800a4e4:	187b      	adds	r3, r7, r1
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	801a      	strh	r2, [r3, #0]
 800a4ea:	1d7b      	adds	r3, r7, #5
 800a4ec:	33ff      	adds	r3, #255	@ 0xff
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d10a      	bne.n	800a50a <USB_EPStartXfer+0x1112>
 800a4f4:	187b      	adds	r3, r7, r1
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	881b      	ldrh	r3, [r3, #0]
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	4a52      	ldr	r2, [pc, #328]	@ (800a648 <USB_EPStartXfer+0x1250>)
 800a4fe:	4313      	orrs	r3, r2
 800a500:	b29a      	uxth	r2, r3
 800a502:	187b      	adds	r3, r7, r1
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	801a      	strh	r2, [r3, #0]
 800a508:	e072      	b.n	800a5f0 <USB_EPStartXfer+0x11f8>
 800a50a:	1d7b      	adds	r3, r7, #5
 800a50c:	33ff      	adds	r3, #255	@ 0xff
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2b3e      	cmp	r3, #62	@ 0x3e
 800a512:	d822      	bhi.n	800a55a <USB_EPStartXfer+0x1162>
 800a514:	1d7b      	adds	r3, r7, #5
 800a516:	33ff      	adds	r3, #255	@ 0xff
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	085b      	lsrs	r3, r3, #1
 800a51c:	21d8      	movs	r1, #216	@ 0xd8
 800a51e:	187a      	adds	r2, r7, r1
 800a520:	6013      	str	r3, [r2, #0]
 800a522:	1d7b      	adds	r3, r7, #5
 800a524:	33ff      	adds	r3, #255	@ 0xff
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2201      	movs	r2, #1
 800a52a:	4013      	ands	r3, r2
 800a52c:	d004      	beq.n	800a538 <USB_EPStartXfer+0x1140>
 800a52e:	187b      	adds	r3, r7, r1
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	3301      	adds	r3, #1
 800a534:	187a      	adds	r2, r7, r1
 800a536:	6013      	str	r3, [r2, #0]
 800a538:	21b8      	movs	r1, #184	@ 0xb8
 800a53a:	187b      	adds	r3, r7, r1
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	881b      	ldrh	r3, [r3, #0]
 800a540:	b29a      	uxth	r2, r3
 800a542:	23d8      	movs	r3, #216	@ 0xd8
 800a544:	18fb      	adds	r3, r7, r3
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	b29b      	uxth	r3, r3
 800a54a:	029b      	lsls	r3, r3, #10
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	4313      	orrs	r3, r2
 800a550:	b29a      	uxth	r2, r3
 800a552:	187b      	adds	r3, r7, r1
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	801a      	strh	r2, [r3, #0]
 800a558:	e04a      	b.n	800a5f0 <USB_EPStartXfer+0x11f8>
 800a55a:	1d7b      	adds	r3, r7, #5
 800a55c:	33ff      	adds	r3, #255	@ 0xff
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	095b      	lsrs	r3, r3, #5
 800a562:	21d8      	movs	r1, #216	@ 0xd8
 800a564:	187a      	adds	r2, r7, r1
 800a566:	6013      	str	r3, [r2, #0]
 800a568:	1d7b      	adds	r3, r7, #5
 800a56a:	33ff      	adds	r3, #255	@ 0xff
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	221f      	movs	r2, #31
 800a570:	4013      	ands	r3, r2
 800a572:	d104      	bne.n	800a57e <USB_EPStartXfer+0x1186>
 800a574:	187b      	adds	r3, r7, r1
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	3b01      	subs	r3, #1
 800a57a:	187a      	adds	r2, r7, r1
 800a57c:	6013      	str	r3, [r2, #0]
 800a57e:	21b8      	movs	r1, #184	@ 0xb8
 800a580:	187b      	adds	r3, r7, r1
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	881b      	ldrh	r3, [r3, #0]
 800a586:	b29a      	uxth	r2, r3
 800a588:	23d8      	movs	r3, #216	@ 0xd8
 800a58a:	18fb      	adds	r3, r7, r3
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	b29b      	uxth	r3, r3
 800a590:	029b      	lsls	r3, r3, #10
 800a592:	b29b      	uxth	r3, r3
 800a594:	4313      	orrs	r3, r2
 800a596:	b29b      	uxth	r3, r3
 800a598:	4a2b      	ldr	r2, [pc, #172]	@ (800a648 <USB_EPStartXfer+0x1250>)
 800a59a:	4313      	orrs	r3, r2
 800a59c:	b29a      	uxth	r2, r3
 800a59e:	187b      	adds	r3, r7, r1
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	801a      	strh	r2, [r3, #0]
 800a5a4:	e024      	b.n	800a5f0 <USB_EPStartXfer+0x11f8>
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	785b      	ldrb	r3, [r3, #1]
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d120      	bne.n	800a5f0 <USB_EPStartXfer+0x11f8>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2250      	movs	r2, #80	@ 0x50
 800a5b2:	5a9b      	ldrh	r3, [r3, r2]
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	001a      	movs	r2, r3
 800a5b8:	21c4      	movs	r1, #196	@ 0xc4
 800a5ba:	187b      	adds	r3, r7, r1
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	189b      	adds	r3, r3, r2
 800a5c0:	187a      	adds	r2, r7, r1
 800a5c2:	6013      	str	r3, [r2, #0]
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	00da      	lsls	r2, r3, #3
 800a5ca:	187b      	adds	r3, r7, r1
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	18d3      	adds	r3, r2, r3
 800a5d0:	4a1e      	ldr	r2, [pc, #120]	@ (800a64c <USB_EPStartXfer+0x1254>)
 800a5d2:	4694      	mov	ip, r2
 800a5d4:	4463      	add	r3, ip
 800a5d6:	21c0      	movs	r1, #192	@ 0xc0
 800a5d8:	187a      	adds	r2, r7, r1
 800a5da:	6013      	str	r3, [r2, #0]
 800a5dc:	1d7b      	adds	r3, r7, #5
 800a5de:	33ff      	adds	r3, #255	@ 0xff
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	b29a      	uxth	r2, r3
 800a5e4:	187b      	adds	r3, r7, r1
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	801a      	strh	r2, [r3, #0]
 800a5ea:	e001      	b.n	800a5f0 <USB_EPStartXfer+0x11f8>
      }
      else
      {
        return HAL_ERROR;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e025      	b.n	800a63c <USB_EPStartXfer+0x1244>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	18d3      	adds	r3, r2, r3
 800a5fa:	881b      	ldrh	r3, [r3, #0]
 800a5fc:	b29a      	uxth	r2, r3
 800a5fe:	208a      	movs	r0, #138	@ 0x8a
 800a600:	183b      	adds	r3, r7, r0
 800a602:	4913      	ldr	r1, [pc, #76]	@ (800a650 <USB_EPStartXfer+0x1258>)
 800a604:	400a      	ands	r2, r1
 800a606:	801a      	strh	r2, [r3, #0]
 800a608:	183b      	adds	r3, r7, r0
 800a60a:	183a      	adds	r2, r7, r0
 800a60c:	8812      	ldrh	r2, [r2, #0]
 800a60e:	2180      	movs	r1, #128	@ 0x80
 800a610:	0149      	lsls	r1, r1, #5
 800a612:	404a      	eors	r2, r1
 800a614:	801a      	strh	r2, [r3, #0]
 800a616:	183b      	adds	r3, r7, r0
 800a618:	183a      	adds	r2, r7, r0
 800a61a:	8812      	ldrh	r2, [r2, #0]
 800a61c:	2180      	movs	r1, #128	@ 0x80
 800a61e:	0189      	lsls	r1, r1, #6
 800a620:	404a      	eors	r2, r1
 800a622:	801a      	strh	r2, [r3, #0]
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	18d3      	adds	r3, r2, r3
 800a62e:	183a      	adds	r2, r7, r0
 800a630:	8812      	ldrh	r2, [r2, #0]
 800a632:	4908      	ldr	r1, [pc, #32]	@ (800a654 <USB_EPStartXfer+0x125c>)
 800a634:	430a      	orrs	r2, r1
 800a636:	b292      	uxth	r2, r2
 800a638:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	0018      	movs	r0, r3
 800a63e:	46bd      	mov	sp, r7
 800a640:	b043      	add	sp, #268	@ 0x10c
 800a642:	bd90      	pop	{r4, r7, pc}
 800a644:	00000402 	.word	0x00000402
 800a648:	ffff8000 	.word	0xffff8000
 800a64c:	00000406 	.word	0x00000406
 800a650:	ffffbf8f 	.word	0xffffbf8f
 800a654:	ffff8080 	.word	0xffff8080

0800a658 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	785b      	ldrb	r3, [r3, #1]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d01d      	beq.n	800a6a6 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	18d3      	adds	r3, r2, r3
 800a674:	881b      	ldrh	r3, [r3, #0]
 800a676:	b29a      	uxth	r2, r3
 800a678:	200c      	movs	r0, #12
 800a67a:	183b      	adds	r3, r7, r0
 800a67c:	491b      	ldr	r1, [pc, #108]	@ (800a6ec <USB_EPSetStall+0x94>)
 800a67e:	400a      	ands	r2, r1
 800a680:	801a      	strh	r2, [r3, #0]
 800a682:	183b      	adds	r3, r7, r0
 800a684:	183a      	adds	r2, r7, r0
 800a686:	8812      	ldrh	r2, [r2, #0]
 800a688:	2110      	movs	r1, #16
 800a68a:	404a      	eors	r2, r1
 800a68c:	801a      	strh	r2, [r3, #0]
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	18d3      	adds	r3, r2, r3
 800a698:	183a      	adds	r2, r7, r0
 800a69a:	8812      	ldrh	r2, [r2, #0]
 800a69c:	4914      	ldr	r1, [pc, #80]	@ (800a6f0 <USB_EPSetStall+0x98>)
 800a69e:	430a      	orrs	r2, r1
 800a6a0:	b292      	uxth	r2, r2
 800a6a2:	801a      	strh	r2, [r3, #0]
 800a6a4:	e01d      	b.n	800a6e2 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	18d3      	adds	r3, r2, r3
 800a6b0:	881b      	ldrh	r3, [r3, #0]
 800a6b2:	b29a      	uxth	r2, r3
 800a6b4:	200e      	movs	r0, #14
 800a6b6:	183b      	adds	r3, r7, r0
 800a6b8:	490e      	ldr	r1, [pc, #56]	@ (800a6f4 <USB_EPSetStall+0x9c>)
 800a6ba:	400a      	ands	r2, r1
 800a6bc:	801a      	strh	r2, [r3, #0]
 800a6be:	183b      	adds	r3, r7, r0
 800a6c0:	183a      	adds	r2, r7, r0
 800a6c2:	8812      	ldrh	r2, [r2, #0]
 800a6c4:	2180      	movs	r1, #128	@ 0x80
 800a6c6:	0149      	lsls	r1, r1, #5
 800a6c8:	404a      	eors	r2, r1
 800a6ca:	801a      	strh	r2, [r3, #0]
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	18d3      	adds	r3, r2, r3
 800a6d6:	183a      	adds	r2, r7, r0
 800a6d8:	8812      	ldrh	r2, [r2, #0]
 800a6da:	4905      	ldr	r1, [pc, #20]	@ (800a6f0 <USB_EPSetStall+0x98>)
 800a6dc:	430a      	orrs	r2, r1
 800a6de:	b292      	uxth	r2, r2
 800a6e0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	0018      	movs	r0, r3
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	b004      	add	sp, #16
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	ffff8fbf 	.word	0xffff8fbf
 800a6f0:	ffff8080 	.word	0xffff8080
 800a6f4:	ffffbf8f 	.word	0xffffbf8f

0800a6f8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b086      	sub	sp, #24
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	7b1b      	ldrb	r3, [r3, #12]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d000      	beq.n	800a70c <USB_EPClearStall+0x14>
 800a70a:	e095      	b.n	800a838 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	785b      	ldrb	r3, [r3, #1]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d046      	beq.n	800a7a2 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	18d2      	adds	r2, r2, r3
 800a71e:	2110      	movs	r1, #16
 800a720:	187b      	adds	r3, r7, r1
 800a722:	8812      	ldrh	r2, [r2, #0]
 800a724:	801a      	strh	r2, [r3, #0]
 800a726:	187b      	adds	r3, r7, r1
 800a728:	881b      	ldrh	r3, [r3, #0]
 800a72a:	2240      	movs	r2, #64	@ 0x40
 800a72c:	4013      	ands	r3, r2
 800a72e:	d016      	beq.n	800a75e <USB_EPClearStall+0x66>
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	18d3      	adds	r3, r2, r3
 800a73a:	881b      	ldrh	r3, [r3, #0]
 800a73c:	b29a      	uxth	r2, r3
 800a73e:	200e      	movs	r0, #14
 800a740:	183b      	adds	r3, r7, r0
 800a742:	4940      	ldr	r1, [pc, #256]	@ (800a844 <USB_EPClearStall+0x14c>)
 800a744:	400a      	ands	r2, r1
 800a746:	801a      	strh	r2, [r3, #0]
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	009b      	lsls	r3, r3, #2
 800a750:	18d3      	adds	r3, r2, r3
 800a752:	183a      	adds	r2, r7, r0
 800a754:	8812      	ldrh	r2, [r2, #0]
 800a756:	493c      	ldr	r1, [pc, #240]	@ (800a848 <USB_EPClearStall+0x150>)
 800a758:	430a      	orrs	r2, r1
 800a75a:	b292      	uxth	r2, r2
 800a75c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	78db      	ldrb	r3, [r3, #3]
 800a762:	2b01      	cmp	r3, #1
 800a764:	d068      	beq.n	800a838 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	18d3      	adds	r3, r2, r3
 800a770:	881b      	ldrh	r3, [r3, #0]
 800a772:	b29a      	uxth	r2, r3
 800a774:	200c      	movs	r0, #12
 800a776:	183b      	adds	r3, r7, r0
 800a778:	4934      	ldr	r1, [pc, #208]	@ (800a84c <USB_EPClearStall+0x154>)
 800a77a:	400a      	ands	r2, r1
 800a77c:	801a      	strh	r2, [r3, #0]
 800a77e:	183b      	adds	r3, r7, r0
 800a780:	183a      	adds	r2, r7, r0
 800a782:	8812      	ldrh	r2, [r2, #0]
 800a784:	2120      	movs	r1, #32
 800a786:	404a      	eors	r2, r1
 800a788:	801a      	strh	r2, [r3, #0]
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	18d3      	adds	r3, r2, r3
 800a794:	183a      	adds	r2, r7, r0
 800a796:	8812      	ldrh	r2, [r2, #0]
 800a798:	492d      	ldr	r1, [pc, #180]	@ (800a850 <USB_EPClearStall+0x158>)
 800a79a:	430a      	orrs	r2, r1
 800a79c:	b292      	uxth	r2, r2
 800a79e:	801a      	strh	r2, [r3, #0]
 800a7a0:	e04a      	b.n	800a838 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	18d2      	adds	r2, r2, r3
 800a7ac:	2116      	movs	r1, #22
 800a7ae:	187b      	adds	r3, r7, r1
 800a7b0:	8812      	ldrh	r2, [r2, #0]
 800a7b2:	801a      	strh	r2, [r3, #0]
 800a7b4:	187b      	adds	r3, r7, r1
 800a7b6:	881a      	ldrh	r2, [r3, #0]
 800a7b8:	2380      	movs	r3, #128	@ 0x80
 800a7ba:	01db      	lsls	r3, r3, #7
 800a7bc:	4013      	ands	r3, r2
 800a7be:	d016      	beq.n	800a7ee <USB_EPClearStall+0xf6>
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	18d3      	adds	r3, r2, r3
 800a7ca:	881b      	ldrh	r3, [r3, #0]
 800a7cc:	b29a      	uxth	r2, r3
 800a7ce:	2014      	movs	r0, #20
 800a7d0:	183b      	adds	r3, r7, r0
 800a7d2:	491c      	ldr	r1, [pc, #112]	@ (800a844 <USB_EPClearStall+0x14c>)
 800a7d4:	400a      	ands	r2, r1
 800a7d6:	801a      	strh	r2, [r3, #0]
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	18d3      	adds	r3, r2, r3
 800a7e2:	183a      	adds	r2, r7, r0
 800a7e4:	8812      	ldrh	r2, [r2, #0]
 800a7e6:	491b      	ldr	r1, [pc, #108]	@ (800a854 <USB_EPClearStall+0x15c>)
 800a7e8:	430a      	orrs	r2, r1
 800a7ea:	b292      	uxth	r2, r2
 800a7ec:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	18d3      	adds	r3, r2, r3
 800a7f8:	881b      	ldrh	r3, [r3, #0]
 800a7fa:	b29a      	uxth	r2, r3
 800a7fc:	2012      	movs	r0, #18
 800a7fe:	183b      	adds	r3, r7, r0
 800a800:	4915      	ldr	r1, [pc, #84]	@ (800a858 <USB_EPClearStall+0x160>)
 800a802:	400a      	ands	r2, r1
 800a804:	801a      	strh	r2, [r3, #0]
 800a806:	183b      	adds	r3, r7, r0
 800a808:	183a      	adds	r2, r7, r0
 800a80a:	8812      	ldrh	r2, [r2, #0]
 800a80c:	2180      	movs	r1, #128	@ 0x80
 800a80e:	0149      	lsls	r1, r1, #5
 800a810:	404a      	eors	r2, r1
 800a812:	801a      	strh	r2, [r3, #0]
 800a814:	183b      	adds	r3, r7, r0
 800a816:	183a      	adds	r2, r7, r0
 800a818:	8812      	ldrh	r2, [r2, #0]
 800a81a:	2180      	movs	r1, #128	@ 0x80
 800a81c:	0189      	lsls	r1, r1, #6
 800a81e:	404a      	eors	r2, r1
 800a820:	801a      	strh	r2, [r3, #0]
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	18d3      	adds	r3, r2, r3
 800a82c:	183a      	adds	r2, r7, r0
 800a82e:	8812      	ldrh	r2, [r2, #0]
 800a830:	4907      	ldr	r1, [pc, #28]	@ (800a850 <USB_EPClearStall+0x158>)
 800a832:	430a      	orrs	r2, r1
 800a834:	b292      	uxth	r2, r2
 800a836:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800a838:	2300      	movs	r3, #0
}
 800a83a:	0018      	movs	r0, r3
 800a83c:	46bd      	mov	sp, r7
 800a83e:	b006      	add	sp, #24
 800a840:	bd80      	pop	{r7, pc}
 800a842:	46c0      	nop			@ (mov r8, r8)
 800a844:	ffff8f8f 	.word	0xffff8f8f
 800a848:	ffff80c0 	.word	0xffff80c0
 800a84c:	ffff8fbf 	.word	0xffff8fbf
 800a850:	ffff8080 	.word	0xffff8080
 800a854:	ffffc080 	.word	0xffffc080
 800a858:	ffffbf8f 	.word	0xffffbf8f

0800a85c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	000a      	movs	r2, r1
 800a866:	1cfb      	adds	r3, r7, #3
 800a868:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800a86a:	1cfb      	adds	r3, r7, #3
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d103      	bne.n	800a87a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	224c      	movs	r2, #76	@ 0x4c
 800a876:	2180      	movs	r1, #128	@ 0x80
 800a878:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	0018      	movs	r0, r3
 800a87e:	46bd      	mov	sp, r7
 800a880:	b002      	add	sp, #8
 800a882:	bd80      	pop	{r7, pc}

0800a884 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2258      	movs	r2, #88	@ 0x58
 800a890:	5a9b      	ldrh	r3, [r3, r2]
 800a892:	b29b      	uxth	r3, r3
 800a894:	4a05      	ldr	r2, [pc, #20]	@ (800a8ac <USB_DevConnect+0x28>)
 800a896:	4313      	orrs	r3, r2
 800a898:	b299      	uxth	r1, r3
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2258      	movs	r2, #88	@ 0x58
 800a89e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800a8a0:	2300      	movs	r3, #0
}
 800a8a2:	0018      	movs	r0, r3
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	b002      	add	sp, #8
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	46c0      	nop			@ (mov r8, r8)
 800a8ac:	ffff8000 	.word	0xffff8000

0800a8b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2244      	movs	r2, #68	@ 0x44
 800a8bc:	5a9b      	ldrh	r3, [r3, r2]
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
}
 800a8c4:	0018      	movs	r0, r3
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	b004      	add	sp, #16
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b08a      	sub	sp, #40	@ 0x28
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	0019      	movs	r1, r3
 800a8d8:	1dbb      	adds	r3, r7, #6
 800a8da:	801a      	strh	r2, [r3, #0]
 800a8dc:	1d3b      	adds	r3, r7, #4
 800a8de:	1c0a      	adds	r2, r1, #0
 800a8e0:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a8e2:	1d3b      	adds	r3, r7, #4
 800a8e4:	881b      	ldrh	r3, [r3, #0]
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	085b      	lsrs	r3, r3, #1
 800a8ea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a8f4:	1dbb      	adds	r3, r7, #6
 800a8f6:	881a      	ldrh	r2, [r3, #0]
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	18d3      	adds	r3, r2, r3
 800a8fc:	2280      	movs	r2, #128	@ 0x80
 800a8fe:	00d2      	lsls	r2, r2, #3
 800a900:	4694      	mov	ip, r2
 800a902:	4463      	add	r3, ip
 800a904:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	627b      	str	r3, [r7, #36]	@ 0x24
 800a90a:	e020      	b.n	800a94e <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	781a      	ldrb	r2, [r3, #0]
 800a910:	2112      	movs	r1, #18
 800a912:	187b      	adds	r3, r7, r1
 800a914:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a916:	69fb      	ldr	r3, [r7, #28]
 800a918:	3301      	adds	r3, #1
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	021b      	lsls	r3, r3, #8
 800a91e:	b21a      	sxth	r2, r3
 800a920:	187b      	adds	r3, r7, r1
 800a922:	2000      	movs	r0, #0
 800a924:	5e1b      	ldrsh	r3, [r3, r0]
 800a926:	4313      	orrs	r3, r2
 800a928:	b21a      	sxth	r2, r3
 800a92a:	187b      	adds	r3, r7, r1
 800a92c:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800a92e:	6a3b      	ldr	r3, [r7, #32]
 800a930:	187a      	adds	r2, r7, r1
 800a932:	8812      	ldrh	r2, [r2, #0]
 800a934:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a936:	6a3b      	ldr	r3, [r7, #32]
 800a938:	3302      	adds	r3, #2
 800a93a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	3301      	adds	r3, #1
 800a940:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a942:	69fb      	ldr	r3, [r7, #28]
 800a944:	3301      	adds	r3, #1
 800a946:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a94a:	3b01      	subs	r3, #1
 800a94c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a94e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a950:	2b00      	cmp	r3, #0
 800a952:	d1db      	bne.n	800a90c <USB_WritePMA+0x40>
  }
}
 800a954:	46c0      	nop			@ (mov r8, r8)
 800a956:	46c0      	nop			@ (mov r8, r8)
 800a958:	46bd      	mov	sp, r7
 800a95a:	b00a      	add	sp, #40	@ 0x28
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b08a      	sub	sp, #40	@ 0x28
 800a962:	af00      	add	r7, sp, #0
 800a964:	60f8      	str	r0, [r7, #12]
 800a966:	60b9      	str	r1, [r7, #8]
 800a968:	0019      	movs	r1, r3
 800a96a:	1dbb      	adds	r3, r7, #6
 800a96c:	801a      	strh	r2, [r3, #0]
 800a96e:	1d3b      	adds	r3, r7, #4
 800a970:	1c0a      	adds	r2, r1, #0
 800a972:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a974:	1d3b      	adds	r3, r7, #4
 800a976:	881b      	ldrh	r3, [r3, #0]
 800a978:	085b      	lsrs	r3, r3, #1
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a986:	1dbb      	adds	r3, r7, #6
 800a988:	881a      	ldrh	r2, [r3, #0]
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	18d3      	adds	r3, r2, r3
 800a98e:	2280      	movs	r2, #128	@ 0x80
 800a990:	00d2      	lsls	r2, r2, #3
 800a992:	4694      	mov	ip, r2
 800a994:	4463      	add	r3, ip
 800a996:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a99c:	e018      	b.n	800a9d0 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a99e:	6a3b      	ldr	r3, [r7, #32]
 800a9a0:	881b      	ldrh	r3, [r3, #0]
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a9a6:	6a3b      	ldr	r3, [r7, #32]
 800a9a8:	3302      	adds	r3, #2
 800a9aa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	b2da      	uxtb	r2, r3
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	0a1b      	lsrs	r3, r3, #8
 800a9be:	b2da      	uxtb	r2, r3
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a9c4:	69fb      	ldr	r3, [r7, #28]
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1e3      	bne.n	800a99e <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a9d6:	1d3b      	adds	r3, r7, #4
 800a9d8:	881b      	ldrh	r3, [r3, #0]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	4013      	ands	r3, r2
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d007      	beq.n	800a9f4 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 800a9e4:	6a3b      	ldr	r3, [r7, #32]
 800a9e6:	881b      	ldrh	r3, [r3, #0]
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	b2da      	uxtb	r2, r3
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	701a      	strb	r2, [r3, #0]
  }
}
 800a9f4:	46c0      	nop			@ (mov r8, r8)
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	b00a      	add	sp, #40	@ 0x28
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	000a      	movs	r2, r1
 800aa06:	1cfb      	adds	r3, r7, #3
 800aa08:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800aa0a:	230f      	movs	r3, #15
 800aa0c:	18fb      	adds	r3, r7, r3
 800aa0e:	2200      	movs	r2, #0
 800aa10:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	7c1b      	ldrb	r3, [r3, #16]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d116      	bne.n	800aa48 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aa1a:	2380      	movs	r3, #128	@ 0x80
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	2202      	movs	r2, #2
 800aa22:	2181      	movs	r1, #129	@ 0x81
 800aa24:	f002 f88b 	bl	800cb3e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aa2e:	2380      	movs	r3, #128	@ 0x80
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	2202      	movs	r2, #2
 800aa36:	2101      	movs	r1, #1
 800aa38:	f002 f881 	bl	800cb3e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	23b6      	movs	r3, #182	@ 0xb6
 800aa40:	005b      	lsls	r3, r3, #1
 800aa42:	2101      	movs	r1, #1
 800aa44:	50d1      	str	r1, [r2, r3]
 800aa46:	e013      	b.n	800aa70 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	2340      	movs	r3, #64	@ 0x40
 800aa4c:	2202      	movs	r2, #2
 800aa4e:	2181      	movs	r1, #129	@ 0x81
 800aa50:	f002 f875 	bl	800cb3e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	2340      	movs	r3, #64	@ 0x40
 800aa5e:	2202      	movs	r2, #2
 800aa60:	2101      	movs	r1, #1
 800aa62:	f002 f86c 	bl	800cb3e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	23b6      	movs	r3, #182	@ 0xb6
 800aa6a:	005b      	lsls	r3, r3, #1
 800aa6c:	2101      	movs	r1, #1
 800aa6e:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	2308      	movs	r3, #8
 800aa74:	2203      	movs	r2, #3
 800aa76:	2182      	movs	r1, #130	@ 0x82
 800aa78:	f002 f861 	bl	800cb3e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aa82:	2387      	movs	r3, #135	@ 0x87
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	0018      	movs	r0, r3
 800aa88:	f002 f9f0 	bl	800ce6c <USBD_static_malloc>
 800aa8c:	0001      	movs	r1, r0
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	23ae      	movs	r3, #174	@ 0xae
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	23ae      	movs	r3, #174	@ 0xae
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	58d3      	ldr	r3, [r2, r3]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d104      	bne.n	800aaac <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800aaa2:	230f      	movs	r3, #15
 800aaa4:	18fb      	adds	r3, r7, r3
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	701a      	strb	r2, [r3, #0]
 800aaaa:	e02c      	b.n	800ab06 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	23ae      	movs	r3, #174	@ 0xae
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	58d3      	ldr	r3, [r2, r3]
 800aab4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	23af      	movs	r3, #175	@ 0xaf
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	58d3      	ldr	r3, [r2, r3]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800aac2:	68ba      	ldr	r2, [r7, #8]
 800aac4:	2385      	movs	r3, #133	@ 0x85
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	2100      	movs	r1, #0
 800aaca:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	2386      	movs	r3, #134	@ 0x86
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	2100      	movs	r1, #0
 800aad4:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	7c1b      	ldrb	r3, [r3, #16]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d10a      	bne.n	800aaf4 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aade:	68ba      	ldr	r2, [r7, #8]
 800aae0:	2381      	movs	r3, #129	@ 0x81
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	58d2      	ldr	r2, [r2, r3]
 800aae6:	2380      	movs	r3, #128	@ 0x80
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	2101      	movs	r1, #1
 800aaee:	f002 f970 	bl	800cdd2 <USBD_LL_PrepareReceive>
 800aaf2:	e008      	b.n	800ab06 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aaf4:	68ba      	ldr	r2, [r7, #8]
 800aaf6:	2381      	movs	r3, #129	@ 0x81
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	58d2      	ldr	r2, [r2, r3]
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	2340      	movs	r3, #64	@ 0x40
 800ab00:	2101      	movs	r1, #1
 800ab02:	f002 f966 	bl	800cdd2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800ab06:	230f      	movs	r3, #15
 800ab08:	18fb      	adds	r3, r7, r3
 800ab0a:	781b      	ldrb	r3, [r3, #0]
}
 800ab0c:	0018      	movs	r0, r3
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	b004      	add	sp, #16
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	000a      	movs	r2, r1
 800ab1e:	1cfb      	adds	r3, r7, #3
 800ab20:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800ab22:	230f      	movs	r3, #15
 800ab24:	18fb      	adds	r3, r7, r3
 800ab26:	2200      	movs	r2, #0
 800ab28:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2181      	movs	r1, #129	@ 0x81
 800ab2e:	0018      	movs	r0, r3
 800ab30:	f002 f83c 	bl	800cbac <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2200      	movs	r2, #0
 800ab38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2101      	movs	r1, #1
 800ab3e:	0018      	movs	r0, r3
 800ab40:	f002 f834 	bl	800cbac <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	23b6      	movs	r3, #182	@ 0xb6
 800ab48:	005b      	lsls	r3, r3, #1
 800ab4a:	2100      	movs	r1, #0
 800ab4c:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2182      	movs	r1, #130	@ 0x82
 800ab52:	0018      	movs	r0, r3
 800ab54:	f002 f82a 	bl	800cbac <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	23ae      	movs	r3, #174	@ 0xae
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	58d3      	ldr	r3, [r2, r3]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d011      	beq.n	800ab8e <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	23af      	movs	r3, #175	@ 0xaf
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	58d3      	ldr	r3, [r2, r3]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	23ae      	movs	r3, #174	@ 0xae
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	58d3      	ldr	r3, [r2, r3]
 800ab7e:	0018      	movs	r0, r3
 800ab80:	f002 f980 	bl	800ce84 <USBD_static_free>
    pdev->pClassData = NULL;
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	23ae      	movs	r3, #174	@ 0xae
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	2100      	movs	r1, #0
 800ab8c:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800ab8e:	230f      	movs	r3, #15
 800ab90:	18fb      	adds	r3, r7, r3
 800ab92:	781b      	ldrb	r3, [r3, #0]
}
 800ab94:	0018      	movs	r0, r3
 800ab96:	46bd      	mov	sp, r7
 800ab98:	b004      	add	sp, #16
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b086      	sub	sp, #24
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	23ae      	movs	r3, #174	@ 0xae
 800abaa:	009b      	lsls	r3, r3, #2
 800abac:	58d3      	ldr	r3, [r2, r3]
 800abae:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800abb0:	230f      	movs	r3, #15
 800abb2:	18fb      	adds	r3, r7, r3
 800abb4:	2200      	movs	r2, #0
 800abb6:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800abb8:	230c      	movs	r3, #12
 800abba:	18fb      	adds	r3, r7, r3
 800abbc:	2200      	movs	r2, #0
 800abbe:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800abc0:	2317      	movs	r3, #23
 800abc2:	18fb      	adds	r3, r7, r3
 800abc4:	2200      	movs	r2, #0
 800abc6:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	001a      	movs	r2, r3
 800abce:	2360      	movs	r3, #96	@ 0x60
 800abd0:	4013      	ands	r3, r2
 800abd2:	d03d      	beq.n	800ac50 <USBD_CDC_Setup+0xb4>
 800abd4:	2b20      	cmp	r3, #32
 800abd6:	d000      	beq.n	800abda <USBD_CDC_Setup+0x3e>
 800abd8:	e094      	b.n	800ad04 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	88db      	ldrh	r3, [r3, #6]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d02b      	beq.n	800ac3a <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	b25b      	sxtb	r3, r3
 800abe8:	2b00      	cmp	r3, #0
 800abea:	da12      	bge.n	800ac12 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	23af      	movs	r3, #175	@ 0xaf
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	58d3      	ldr	r3, [r2, r3]
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	683a      	ldr	r2, [r7, #0]
 800abf8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800abfa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800abfc:	683a      	ldr	r2, [r7, #0]
 800abfe:	88d2      	ldrh	r2, [r2, #6]
 800ac00:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ac02:	6939      	ldr	r1, [r7, #16]
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	88da      	ldrh	r2, [r3, #6]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	0018      	movs	r0, r3
 800ac0c:	f001 fbaf 	bl	800c36e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800ac10:	e083      	b.n	800ad1a <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	7859      	ldrb	r1, [r3, #1]
 800ac16:	693a      	ldr	r2, [r7, #16]
 800ac18:	2380      	movs	r3, #128	@ 0x80
 800ac1a:	009b      	lsls	r3, r3, #2
 800ac1c:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	88db      	ldrh	r3, [r3, #6]
 800ac22:	b2d9      	uxtb	r1, r3
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	4a40      	ldr	r2, [pc, #256]	@ (800ad28 <USBD_CDC_Setup+0x18c>)
 800ac28:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ac2a:	6939      	ldr	r1, [r7, #16]
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	88da      	ldrh	r2, [r3, #6]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	0018      	movs	r0, r3
 800ac34:	f001 fbce 	bl	800c3d4 <USBD_CtlPrepareRx>
      break;
 800ac38:	e06f      	b.n	800ad1a <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	23af      	movs	r3, #175	@ 0xaf
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	58d3      	ldr	r3, [r2, r3]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	683a      	ldr	r2, [r7, #0]
 800ac46:	7850      	ldrb	r0, [r2, #1]
 800ac48:	6839      	ldr	r1, [r7, #0]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	4798      	blx	r3
      break;
 800ac4e:	e064      	b.n	800ad1a <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	785b      	ldrb	r3, [r3, #1]
 800ac54:	2b0b      	cmp	r3, #11
 800ac56:	d037      	beq.n	800acc8 <USBD_CDC_Setup+0x12c>
 800ac58:	dc47      	bgt.n	800acea <USBD_CDC_Setup+0x14e>
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d002      	beq.n	800ac64 <USBD_CDC_Setup+0xc8>
 800ac5e:	2b0a      	cmp	r3, #10
 800ac60:	d019      	beq.n	800ac96 <USBD_CDC_Setup+0xfa>
 800ac62:	e042      	b.n	800acea <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	23a7      	movs	r3, #167	@ 0xa7
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	5cd3      	ldrb	r3, [r2, r3]
 800ac6c:	2b03      	cmp	r3, #3
 800ac6e:	d107      	bne.n	800ac80 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800ac70:	230c      	movs	r3, #12
 800ac72:	18f9      	adds	r1, r7, r3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2202      	movs	r2, #2
 800ac78:	0018      	movs	r0, r3
 800ac7a:	f001 fb78 	bl	800c36e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac7e:	e040      	b.n	800ad02 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800ac80:	683a      	ldr	r2, [r7, #0]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	0011      	movs	r1, r2
 800ac86:	0018      	movs	r0, r3
 800ac88:	f001 faf3 	bl	800c272 <USBD_CtlError>
            ret = USBD_FAIL;
 800ac8c:	2317      	movs	r3, #23
 800ac8e:	18fb      	adds	r3, r7, r3
 800ac90:	2202      	movs	r2, #2
 800ac92:	701a      	strb	r2, [r3, #0]
          break;
 800ac94:	e035      	b.n	800ad02 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	23a7      	movs	r3, #167	@ 0xa7
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	5cd3      	ldrb	r3, [r2, r3]
 800ac9e:	2b03      	cmp	r3, #3
 800aca0:	d107      	bne.n	800acb2 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800aca2:	230f      	movs	r3, #15
 800aca4:	18f9      	adds	r1, r7, r3
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2201      	movs	r2, #1
 800acaa:	0018      	movs	r0, r3
 800acac:	f001 fb5f 	bl	800c36e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800acb0:	e027      	b.n	800ad02 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800acb2:	683a      	ldr	r2, [r7, #0]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	0011      	movs	r1, r2
 800acb8:	0018      	movs	r0, r3
 800acba:	f001 fada 	bl	800c272 <USBD_CtlError>
            ret = USBD_FAIL;
 800acbe:	2317      	movs	r3, #23
 800acc0:	18fb      	adds	r3, r7, r3
 800acc2:	2202      	movs	r2, #2
 800acc4:	701a      	strb	r2, [r3, #0]
          break;
 800acc6:	e01c      	b.n	800ad02 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	23a7      	movs	r3, #167	@ 0xa7
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	5cd3      	ldrb	r3, [r2, r3]
 800acd0:	2b03      	cmp	r3, #3
 800acd2:	d015      	beq.n	800ad00 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800acd4:	683a      	ldr	r2, [r7, #0]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	0011      	movs	r1, r2
 800acda:	0018      	movs	r0, r3
 800acdc:	f001 fac9 	bl	800c272 <USBD_CtlError>
            ret = USBD_FAIL;
 800ace0:	2317      	movs	r3, #23
 800ace2:	18fb      	adds	r3, r7, r3
 800ace4:	2202      	movs	r2, #2
 800ace6:	701a      	strb	r2, [r3, #0]
          }
          break;
 800ace8:	e00a      	b.n	800ad00 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800acea:	683a      	ldr	r2, [r7, #0]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	0011      	movs	r1, r2
 800acf0:	0018      	movs	r0, r3
 800acf2:	f001 fabe 	bl	800c272 <USBD_CtlError>
          ret = USBD_FAIL;
 800acf6:	2317      	movs	r3, #23
 800acf8:	18fb      	adds	r3, r7, r3
 800acfa:	2202      	movs	r2, #2
 800acfc:	701a      	strb	r2, [r3, #0]
          break;
 800acfe:	e000      	b.n	800ad02 <USBD_CDC_Setup+0x166>
          break;
 800ad00:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800ad02:	e00a      	b.n	800ad1a <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800ad04:	683a      	ldr	r2, [r7, #0]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	0011      	movs	r1, r2
 800ad0a:	0018      	movs	r0, r3
 800ad0c:	f001 fab1 	bl	800c272 <USBD_CtlError>
      ret = USBD_FAIL;
 800ad10:	2317      	movs	r3, #23
 800ad12:	18fb      	adds	r3, r7, r3
 800ad14:	2202      	movs	r2, #2
 800ad16:	701a      	strb	r2, [r3, #0]
      break;
 800ad18:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800ad1a:	2317      	movs	r3, #23
 800ad1c:	18fb      	adds	r3, r7, r3
 800ad1e:	781b      	ldrb	r3, [r3, #0]
}
 800ad20:	0018      	movs	r0, r3
 800ad22:	46bd      	mov	sp, r7
 800ad24:	b006      	add	sp, #24
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	00000201 	.word	0x00000201

0800ad2c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	000a      	movs	r2, r1
 800ad36:	1cfb      	adds	r3, r7, #3
 800ad38:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	23ae      	movs	r3, #174	@ 0xae
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	58d3      	ldr	r3, [r2, r3]
 800ad42:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	23b0      	movs	r3, #176	@ 0xb0
 800ad48:	009b      	lsls	r3, r3, #2
 800ad4a:	58d3      	ldr	r3, [r2, r3]
 800ad4c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	23ae      	movs	r3, #174	@ 0xae
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	58d3      	ldr	r3, [r2, r3]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d03e      	beq.n	800add8 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ad5a:	1cfb      	adds	r3, r7, #3
 800ad5c:	781a      	ldrb	r2, [r3, #0]
 800ad5e:	6879      	ldr	r1, [r7, #4]
 800ad60:	0013      	movs	r3, r2
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	189b      	adds	r3, r3, r2
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	18cb      	adds	r3, r1, r3
 800ad6a:	331c      	adds	r3, #28
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d02b      	beq.n	800adca <USBD_CDC_DataIn+0x9e>
 800ad72:	1cfb      	adds	r3, r7, #3
 800ad74:	781a      	ldrb	r2, [r3, #0]
 800ad76:	6879      	ldr	r1, [r7, #4]
 800ad78:	0013      	movs	r3, r2
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	189b      	adds	r3, r3, r2
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	18cb      	adds	r3, r1, r3
 800ad82:	331c      	adds	r3, #28
 800ad84:	6818      	ldr	r0, [r3, #0]
 800ad86:	1cfb      	adds	r3, r7, #3
 800ad88:	781a      	ldrb	r2, [r3, #0]
 800ad8a:	68b9      	ldr	r1, [r7, #8]
 800ad8c:	0013      	movs	r3, r2
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	189b      	adds	r3, r3, r2
 800ad92:	00db      	lsls	r3, r3, #3
 800ad94:	18cb      	adds	r3, r1, r3
 800ad96:	3320      	adds	r3, #32
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	0019      	movs	r1, r3
 800ad9c:	f7f5 fa56 	bl	800024c <__aeabi_uidivmod>
 800ada0:	1e0b      	subs	r3, r1, #0
 800ada2:	d112      	bne.n	800adca <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800ada4:	1cfb      	adds	r3, r7, #3
 800ada6:	781a      	ldrb	r2, [r3, #0]
 800ada8:	6879      	ldr	r1, [r7, #4]
 800adaa:	0013      	movs	r3, r2
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	189b      	adds	r3, r3, r2
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	18cb      	adds	r3, r1, r3
 800adb4:	331c      	adds	r3, #28
 800adb6:	2200      	movs	r2, #0
 800adb8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800adba:	1cfb      	adds	r3, r7, #3
 800adbc:	7819      	ldrb	r1, [r3, #0]
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	2300      	movs	r3, #0
 800adc2:	2200      	movs	r2, #0
 800adc4:	f001 ffce 	bl	800cd64 <USBD_LL_Transmit>
 800adc8:	e004      	b.n	800add4 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800adca:	68fa      	ldr	r2, [r7, #12]
 800adcc:	2385      	movs	r3, #133	@ 0x85
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	2100      	movs	r1, #0
 800add2:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800add4:	2300      	movs	r3, #0
 800add6:	e000      	b.n	800adda <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800add8:	2302      	movs	r3, #2
  }
}
 800adda:	0018      	movs	r0, r3
 800addc:	46bd      	mov	sp, r7
 800adde:	b004      	add	sp, #16
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b084      	sub	sp, #16
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
 800adea:	000a      	movs	r2, r1
 800adec:	1cfb      	adds	r3, r7, #3
 800adee:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	23ae      	movs	r3, #174	@ 0xae
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	58d3      	ldr	r3, [r2, r3]
 800adf8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800adfa:	1cfb      	adds	r3, r7, #3
 800adfc:	781a      	ldrb	r2, [r3, #0]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	0011      	movs	r1, r2
 800ae02:	0018      	movs	r0, r3
 800ae04:	f002 f81c 	bl	800ce40 <USBD_LL_GetRxDataSize>
 800ae08:	0001      	movs	r1, r0
 800ae0a:	68fa      	ldr	r2, [r7, #12]
 800ae0c:	2383      	movs	r3, #131	@ 0x83
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	23ae      	movs	r3, #174	@ 0xae
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	58d3      	ldr	r3, [r2, r3]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d011      	beq.n	800ae42 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	23af      	movs	r3, #175	@ 0xaf
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	58d3      	ldr	r3, [r2, r3]
 800ae26:	68da      	ldr	r2, [r3, #12]
 800ae28:	68f9      	ldr	r1, [r7, #12]
 800ae2a:	2381      	movs	r3, #129	@ 0x81
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	58c8      	ldr	r0, [r1, r3]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2183      	movs	r1, #131	@ 0x83
 800ae34:	0089      	lsls	r1, r1, #2
 800ae36:	468c      	mov	ip, r1
 800ae38:	4463      	add	r3, ip
 800ae3a:	0019      	movs	r1, r3
 800ae3c:	4790      	blx	r2

    return USBD_OK;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	e000      	b.n	800ae44 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800ae42:	2302      	movs	r3, #2
  }
}
 800ae44:	0018      	movs	r0, r3
 800ae46:	46bd      	mov	sp, r7
 800ae48:	b004      	add	sp, #16
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ae4c:	b590      	push	{r4, r7, lr}
 800ae4e:	b085      	sub	sp, #20
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	23ae      	movs	r3, #174	@ 0xae
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	58d3      	ldr	r3, [r2, r3]
 800ae5c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	23af      	movs	r3, #175	@ 0xaf
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	58d3      	ldr	r3, [r2, r3]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d018      	beq.n	800ae9c <USBD_CDC_EP0_RxReady+0x50>
 800ae6a:	68fa      	ldr	r2, [r7, #12]
 800ae6c:	2380      	movs	r3, #128	@ 0x80
 800ae6e:	009b      	lsls	r3, r3, #2
 800ae70:	5cd3      	ldrb	r3, [r2, r3]
 800ae72:	2bff      	cmp	r3, #255	@ 0xff
 800ae74:	d012      	beq.n	800ae9c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	23af      	movs	r3, #175	@ 0xaf
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	58d3      	ldr	r3, [r2, r3]
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	68f9      	ldr	r1, [r7, #12]
 800ae82:	2280      	movs	r2, #128	@ 0x80
 800ae84:	0092      	lsls	r2, r2, #2
 800ae86:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800ae88:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ae8a:	68fa      	ldr	r2, [r7, #12]
 800ae8c:	4c06      	ldr	r4, [pc, #24]	@ (800aea8 <USBD_CDC_EP0_RxReady+0x5c>)
 800ae8e:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ae90:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ae92:	68fa      	ldr	r2, [r7, #12]
 800ae94:	2380      	movs	r3, #128	@ 0x80
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	21ff      	movs	r1, #255	@ 0xff
 800ae9a:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	0018      	movs	r0, r3
 800aea0:	46bd      	mov	sp, r7
 800aea2:	b005      	add	sp, #20
 800aea4:	bd90      	pop	{r4, r7, pc}
 800aea6:	46c0      	nop			@ (mov r8, r8)
 800aea8:	00000201 	.word	0x00000201

0800aeac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2243      	movs	r2, #67	@ 0x43
 800aeb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800aeba:	4b02      	ldr	r3, [pc, #8]	@ (800aec4 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800aebc:	0018      	movs	r0, r3
 800aebe:	46bd      	mov	sp, r7
 800aec0:	b002      	add	sp, #8
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	200000ac 	.word	0x200000ac

0800aec8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2243      	movs	r2, #67	@ 0x43
 800aed4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800aed6:	4b02      	ldr	r3, [pc, #8]	@ (800aee0 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800aed8:	0018      	movs	r0, r3
 800aeda:	46bd      	mov	sp, r7
 800aedc:	b002      	add	sp, #8
 800aede:	bd80      	pop	{r7, pc}
 800aee0:	20000068 	.word	0x20000068

0800aee4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2243      	movs	r2, #67	@ 0x43
 800aef0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800aef2:	4b02      	ldr	r3, [pc, #8]	@ (800aefc <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800aef4:	0018      	movs	r0, r3
 800aef6:	46bd      	mov	sp, r7
 800aef8:	b002      	add	sp, #8
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	200000f0 	.word	0x200000f0

0800af00 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	220a      	movs	r2, #10
 800af0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800af0e:	4b02      	ldr	r3, [pc, #8]	@ (800af18 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800af10:	0018      	movs	r0, r3
 800af12:	46bd      	mov	sp, r7
 800af14:	b002      	add	sp, #8
 800af16:	bd80      	pop	{r7, pc}
 800af18:	20000024 	.word	0x20000024

0800af1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800af26:	200f      	movs	r0, #15
 800af28:	183b      	adds	r3, r7, r0
 800af2a:	2202      	movs	r2, #2
 800af2c:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d007      	beq.n	800af44 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	23af      	movs	r3, #175	@ 0xaf
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	6839      	ldr	r1, [r7, #0]
 800af3c:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800af3e:	183b      	adds	r3, r7, r0
 800af40:	2200      	movs	r2, #0
 800af42:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800af44:	230f      	movs	r3, #15
 800af46:	18fb      	adds	r3, r7, r3
 800af48:	781b      	ldrb	r3, [r3, #0]
}
 800af4a:	0018      	movs	r0, r3
 800af4c:	46bd      	mov	sp, r7
 800af4e:	b004      	add	sp, #16
 800af50:	bd80      	pop	{r7, pc}

0800af52 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b086      	sub	sp, #24
 800af56:	af00      	add	r7, sp, #0
 800af58:	60f8      	str	r0, [r7, #12]
 800af5a:	60b9      	str	r1, [r7, #8]
 800af5c:	1dbb      	adds	r3, r7, #6
 800af5e:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af60:	68fa      	ldr	r2, [r7, #12]
 800af62:	23ae      	movs	r3, #174	@ 0xae
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	58d3      	ldr	r3, [r2, r3]
 800af68:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800af6a:	697a      	ldr	r2, [r7, #20]
 800af6c:	2382      	movs	r3, #130	@ 0x82
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	68b9      	ldr	r1, [r7, #8]
 800af72:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800af74:	1dbb      	adds	r3, r7, #6
 800af76:	8819      	ldrh	r1, [r3, #0]
 800af78:	697a      	ldr	r2, [r7, #20]
 800af7a:	2384      	movs	r3, #132	@ 0x84
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800af80:	2300      	movs	r3, #0
}
 800af82:	0018      	movs	r0, r3
 800af84:	46bd      	mov	sp, r7
 800af86:	b006      	add	sp, #24
 800af88:	bd80      	pop	{r7, pc}

0800af8a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b084      	sub	sp, #16
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
 800af92:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	23ae      	movs	r3, #174	@ 0xae
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	58d3      	ldr	r3, [r2, r3]
 800af9c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800af9e:	68fa      	ldr	r2, [r7, #12]
 800afa0:	2381      	movs	r3, #129	@ 0x81
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	6839      	ldr	r1, [r7, #0]
 800afa6:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800afa8:	2300      	movs	r3, #0
}
 800afaa:	0018      	movs	r0, r3
 800afac:	46bd      	mov	sp, r7
 800afae:	b004      	add	sp, #16
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b084      	sub	sp, #16
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	23ae      	movs	r3, #174	@ 0xae
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	58d3      	ldr	r3, [r2, r3]
 800afc2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	23ae      	movs	r3, #174	@ 0xae
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	58d3      	ldr	r3, [r2, r3]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d022      	beq.n	800b016 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800afd0:	68fa      	ldr	r2, [r7, #12]
 800afd2:	2385      	movs	r3, #133	@ 0x85
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	58d3      	ldr	r3, [r2, r3]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d11a      	bne.n	800b012 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	2385      	movs	r3, #133	@ 0x85
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	2101      	movs	r1, #1
 800afe4:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	2384      	movs	r3, #132	@ 0x84
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	58d2      	ldr	r2, [r2, r3]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800aff2:	68fa      	ldr	r2, [r7, #12]
 800aff4:	2382      	movs	r3, #130	@ 0x82
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800affa:	68fa      	ldr	r2, [r7, #12]
 800affc:	2384      	movs	r3, #132	@ 0x84
 800affe:	009b      	lsls	r3, r3, #2
 800b000:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b002:	b29b      	uxth	r3, r3
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	000a      	movs	r2, r1
 800b008:	2181      	movs	r1, #129	@ 0x81
 800b00a:	f001 feab 	bl	800cd64 <USBD_LL_Transmit>

      return USBD_OK;
 800b00e:	2300      	movs	r3, #0
 800b010:	e002      	b.n	800b018 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800b012:	2301      	movs	r3, #1
 800b014:	e000      	b.n	800b018 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800b016:	2302      	movs	r3, #2
  }
}
 800b018:	0018      	movs	r0, r3
 800b01a:	46bd      	mov	sp, r7
 800b01c:	b004      	add	sp, #16
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	23ae      	movs	r3, #174	@ 0xae
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	58d3      	ldr	r3, [r2, r3]
 800b030:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	23ae      	movs	r3, #174	@ 0xae
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	58d3      	ldr	r3, [r2, r3]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d019      	beq.n	800b072 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	7c1b      	ldrb	r3, [r3, #16]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d10a      	bne.n	800b05c <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b046:	68fa      	ldr	r2, [r7, #12]
 800b048:	2381      	movs	r3, #129	@ 0x81
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	58d2      	ldr	r2, [r2, r3]
 800b04e:	2380      	movs	r3, #128	@ 0x80
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	2101      	movs	r1, #1
 800b056:	f001 febc 	bl	800cdd2 <USBD_LL_PrepareReceive>
 800b05a:	e008      	b.n	800b06e <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	2381      	movs	r3, #129	@ 0x81
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	58d2      	ldr	r2, [r2, r3]
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	2340      	movs	r3, #64	@ 0x40
 800b068:	2101      	movs	r1, #1
 800b06a:	f001 feb2 	bl	800cdd2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b06e:	2300      	movs	r3, #0
 800b070:	e000      	b.n	800b074 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800b072:	2302      	movs	r3, #2
  }
}
 800b074:	0018      	movs	r0, r3
 800b076:	46bd      	mov	sp, r7
 800b078:	b004      	add	sp, #16
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	1dfb      	adds	r3, r7, #7
 800b088:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d101      	bne.n	800b094 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b090:	2302      	movs	r3, #2
 800b092:	e020      	b.n	800b0d6 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b094:	68fa      	ldr	r2, [r7, #12]
 800b096:	23ad      	movs	r3, #173	@ 0xad
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	58d3      	ldr	r3, [r2, r3]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d004      	beq.n	800b0aa <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800b0a0:	68fa      	ldr	r2, [r7, #12]
 800b0a2:	23ad      	movs	r3, #173	@ 0xad
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	2100      	movs	r1, #0
 800b0a8:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d004      	beq.n	800b0ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b0b0:	68fa      	ldr	r2, [r7, #12]
 800b0b2:	23ac      	movs	r3, #172	@ 0xac
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	68b9      	ldr	r1, [r7, #8]
 800b0b8:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0ba:	68fa      	ldr	r2, [r7, #12]
 800b0bc:	23a7      	movs	r3, #167	@ 0xa7
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	2101      	movs	r1, #1
 800b0c2:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	1dfa      	adds	r2, r7, #7
 800b0c8:	7812      	ldrb	r2, [r2, #0]
 800b0ca:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	0018      	movs	r0, r3
 800b0d0:	f001 fcac 	bl	800ca2c <USBD_LL_Init>

  return USBD_OK;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	0018      	movs	r0, r3
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	b004      	add	sp, #16
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b084      	sub	sp, #16
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
 800b0e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b0e8:	200f      	movs	r0, #15
 800b0ea:	183b      	adds	r3, r7, r0
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d008      	beq.n	800b108 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	23ad      	movs	r3, #173	@ 0xad
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	6839      	ldr	r1, [r7, #0]
 800b0fe:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800b100:	183b      	adds	r3, r7, r0
 800b102:	2200      	movs	r2, #0
 800b104:	701a      	strb	r2, [r3, #0]
 800b106:	e003      	b.n	800b110 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b108:	230f      	movs	r3, #15
 800b10a:	18fb      	adds	r3, r7, r3
 800b10c:	2202      	movs	r2, #2
 800b10e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800b110:	230f      	movs	r3, #15
 800b112:	18fb      	adds	r3, r7, r3
 800b114:	781b      	ldrb	r3, [r3, #0]
}
 800b116:	0018      	movs	r0, r3
 800b118:	46bd      	mov	sp, r7
 800b11a:	b004      	add	sp, #16
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b11e:	b580      	push	{r7, lr}
 800b120:	b082      	sub	sp, #8
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	0018      	movs	r0, r3
 800b12a:	f001 fce3 	bl	800caf4 <USBD_LL_Start>

  return USBD_OK;
 800b12e:	2300      	movs	r3, #0
}
 800b130:	0018      	movs	r0, r3
 800b132:	46bd      	mov	sp, r7
 800b134:	b002      	add	sp, #8
 800b136:	bd80      	pop	{r7, pc}

0800b138 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b140:	2300      	movs	r3, #0
}
 800b142:	0018      	movs	r0, r3
 800b144:	46bd      	mov	sp, r7
 800b146:	b002      	add	sp, #8
 800b148:	bd80      	pop	{r7, pc}

0800b14a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b14a:	b590      	push	{r4, r7, lr}
 800b14c:	b085      	sub	sp, #20
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
 800b152:	000a      	movs	r2, r1
 800b154:	1cfb      	adds	r3, r7, #3
 800b156:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b158:	240f      	movs	r4, #15
 800b15a:	193b      	adds	r3, r7, r4
 800b15c:	2202      	movs	r2, #2
 800b15e:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	23ad      	movs	r3, #173	@ 0xad
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	58d3      	ldr	r3, [r2, r3]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d00e      	beq.n	800b18a <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	23ad      	movs	r3, #173	@ 0xad
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	58d3      	ldr	r3, [r2, r3]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	1cfa      	adds	r2, r7, #3
 800b178:	7811      	ldrb	r1, [r2, #0]
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	0010      	movs	r0, r2
 800b17e:	4798      	blx	r3
 800b180:	1e03      	subs	r3, r0, #0
 800b182:	d102      	bne.n	800b18a <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800b184:	193b      	adds	r3, r7, r4
 800b186:	2200      	movs	r2, #0
 800b188:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800b18a:	230f      	movs	r3, #15
 800b18c:	18fb      	adds	r3, r7, r3
 800b18e:	781b      	ldrb	r3, [r3, #0]
}
 800b190:	0018      	movs	r0, r3
 800b192:	46bd      	mov	sp, r7
 800b194:	b005      	add	sp, #20
 800b196:	bd90      	pop	{r4, r7, pc}

0800b198 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	000a      	movs	r2, r1
 800b1a2:	1cfb      	adds	r3, r7, #3
 800b1a4:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	23ad      	movs	r3, #173	@ 0xad
 800b1aa:	009b      	lsls	r3, r3, #2
 800b1ac:	58d3      	ldr	r3, [r2, r3]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	1cfa      	adds	r2, r7, #3
 800b1b2:	7811      	ldrb	r1, [r2, #0]
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	0010      	movs	r0, r2
 800b1b8:	4798      	blx	r3

  return USBD_OK;
 800b1ba:	2300      	movs	r3, #0
}
 800b1bc:	0018      	movs	r0, r3
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	b002      	add	sp, #8
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b082      	sub	sp, #8
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	22aa      	movs	r2, #170	@ 0xaa
 800b1d2:	0092      	lsls	r2, r2, #2
 800b1d4:	4694      	mov	ip, r2
 800b1d6:	4463      	add	r3, ip
 800b1d8:	683a      	ldr	r2, [r7, #0]
 800b1da:	0011      	movs	r1, r2
 800b1dc:	0018      	movs	r0, r3
 800b1de:	f001 f810 	bl	800c202 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	23a5      	movs	r3, #165	@ 0xa5
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	2101      	movs	r1, #1
 800b1ea:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	4a23      	ldr	r2, [pc, #140]	@ (800b27c <USBD_LL_SetupStage+0xb8>)
 800b1f0:	5a9b      	ldrh	r3, [r3, r2]
 800b1f2:	0019      	movs	r1, r3
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	23a6      	movs	r3, #166	@ 0xa6
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	23aa      	movs	r3, #170	@ 0xaa
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	5cd3      	ldrb	r3, [r2, r3]
 800b204:	001a      	movs	r2, r3
 800b206:	231f      	movs	r3, #31
 800b208:	4013      	ands	r3, r2
 800b20a:	2b02      	cmp	r3, #2
 800b20c:	d019      	beq.n	800b242 <USBD_LL_SetupStage+0x7e>
 800b20e:	d822      	bhi.n	800b256 <USBD_LL_SetupStage+0x92>
 800b210:	2b00      	cmp	r3, #0
 800b212:	d002      	beq.n	800b21a <USBD_LL_SetupStage+0x56>
 800b214:	2b01      	cmp	r3, #1
 800b216:	d00a      	beq.n	800b22e <USBD_LL_SetupStage+0x6a>
 800b218:	e01d      	b.n	800b256 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	22aa      	movs	r2, #170	@ 0xaa
 800b21e:	0092      	lsls	r2, r2, #2
 800b220:	189a      	adds	r2, r3, r2
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	0011      	movs	r1, r2
 800b226:	0018      	movs	r0, r3
 800b228:	f000 fa10 	bl	800b64c <USBD_StdDevReq>
      break;
 800b22c:	e020      	b.n	800b270 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	22aa      	movs	r2, #170	@ 0xaa
 800b232:	0092      	lsls	r2, r2, #2
 800b234:	189a      	adds	r2, r3, r2
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	0011      	movs	r1, r2
 800b23a:	0018      	movs	r0, r3
 800b23c:	f000 fa78 	bl	800b730 <USBD_StdItfReq>
      break;
 800b240:	e016      	b.n	800b270 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	22aa      	movs	r2, #170	@ 0xaa
 800b246:	0092      	lsls	r2, r2, #2
 800b248:	189a      	adds	r2, r3, r2
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	0011      	movs	r1, r2
 800b24e:	0018      	movs	r0, r3
 800b250:	f000 fac5 	bl	800b7de <USBD_StdEPReq>
      break;
 800b254:	e00c      	b.n	800b270 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	23aa      	movs	r3, #170	@ 0xaa
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	5cd3      	ldrb	r3, [r2, r3]
 800b25e:	227f      	movs	r2, #127	@ 0x7f
 800b260:	4393      	bics	r3, r2
 800b262:	b2da      	uxtb	r2, r3
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	0011      	movs	r1, r2
 800b268:	0018      	movs	r0, r3
 800b26a:	f001 fcca 	bl	800cc02 <USBD_LL_StallEP>
      break;
 800b26e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800b270:	2300      	movs	r3, #0
}
 800b272:	0018      	movs	r0, r3
 800b274:	46bd      	mov	sp, r7
 800b276:	b002      	add	sp, #8
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	46c0      	nop			@ (mov r8, r8)
 800b27c:	000002ae 	.word	0x000002ae

0800b280 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b086      	sub	sp, #24
 800b284:	af00      	add	r7, sp, #0
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	607a      	str	r2, [r7, #4]
 800b28a:	200b      	movs	r0, #11
 800b28c:	183b      	adds	r3, r7, r0
 800b28e:	1c0a      	adds	r2, r1, #0
 800b290:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b292:	183b      	adds	r3, r7, r0
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d154      	bne.n	800b344 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	3355      	adds	r3, #85	@ 0x55
 800b29e:	33ff      	adds	r3, #255	@ 0xff
 800b2a0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	23a5      	movs	r3, #165	@ 0xa5
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	58d3      	ldr	r3, [r2, r3]
 800b2aa:	2b03      	cmp	r3, #3
 800b2ac:	d139      	bne.n	800b322 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	68da      	ldr	r2, [r3, #12]
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d919      	bls.n	800b2ee <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	68da      	ldr	r2, [r3, #12]
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	691b      	ldr	r3, [r3, #16]
 800b2c2:	1ad2      	subs	r2, r2, r3
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	68da      	ldr	r2, [r3, #12]
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d203      	bcs.n	800b2dc <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	e002      	b.n	800b2e2 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	6879      	ldr	r1, [r7, #4]
 800b2e4:	68f8      	ldr	r0, [r7, #12]
 800b2e6:	001a      	movs	r2, r3
 800b2e8:	f001 f898 	bl	800c41c <USBD_CtlContinueRx>
 800b2ec:	e045      	b.n	800b37a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b2ee:	68fa      	ldr	r2, [r7, #12]
 800b2f0:	23ad      	movs	r3, #173	@ 0xad
 800b2f2:	009b      	lsls	r3, r3, #2
 800b2f4:	58d3      	ldr	r3, [r2, r3]
 800b2f6:	691b      	ldr	r3, [r3, #16]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d00d      	beq.n	800b318 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b2fc:	68fa      	ldr	r2, [r7, #12]
 800b2fe:	23a7      	movs	r3, #167	@ 0xa7
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b304:	2b03      	cmp	r3, #3
 800b306:	d107      	bne.n	800b318 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b308:	68fa      	ldr	r2, [r7, #12]
 800b30a:	23ad      	movs	r3, #173	@ 0xad
 800b30c:	009b      	lsls	r3, r3, #2
 800b30e:	58d3      	ldr	r3, [r2, r3]
 800b310:	691b      	ldr	r3, [r3, #16]
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	0010      	movs	r0, r2
 800b316:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	0018      	movs	r0, r3
 800b31c:	f001 f891 	bl	800c442 <USBD_CtlSendStatus>
 800b320:	e02b      	b.n	800b37a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b322:	68fa      	ldr	r2, [r7, #12]
 800b324:	23a5      	movs	r3, #165	@ 0xa5
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	58d3      	ldr	r3, [r2, r3]
 800b32a:	2b05      	cmp	r3, #5
 800b32c:	d125      	bne.n	800b37a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b32e:	68fa      	ldr	r2, [r7, #12]
 800b330:	23a5      	movs	r3, #165	@ 0xa5
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	2100      	movs	r1, #0
 800b336:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2100      	movs	r1, #0
 800b33c:	0018      	movs	r0, r3
 800b33e:	f001 fc60 	bl	800cc02 <USBD_LL_StallEP>
 800b342:	e01a      	b.n	800b37a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b344:	68fa      	ldr	r2, [r7, #12]
 800b346:	23ad      	movs	r3, #173	@ 0xad
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	58d3      	ldr	r3, [r2, r3]
 800b34c:	699b      	ldr	r3, [r3, #24]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d011      	beq.n	800b376 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b352:	68fa      	ldr	r2, [r7, #12]
 800b354:	23a7      	movs	r3, #167	@ 0xa7
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800b35a:	2b03      	cmp	r3, #3
 800b35c:	d10b      	bne.n	800b376 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	23ad      	movs	r3, #173	@ 0xad
 800b362:	009b      	lsls	r3, r3, #2
 800b364:	58d3      	ldr	r3, [r2, r3]
 800b366:	699b      	ldr	r3, [r3, #24]
 800b368:	220b      	movs	r2, #11
 800b36a:	18ba      	adds	r2, r7, r2
 800b36c:	7811      	ldrb	r1, [r2, #0]
 800b36e:	68fa      	ldr	r2, [r7, #12]
 800b370:	0010      	movs	r0, r2
 800b372:	4798      	blx	r3
 800b374:	e001      	b.n	800b37a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b376:	2302      	movs	r3, #2
 800b378:	e000      	b.n	800b37c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800b37a:	2300      	movs	r3, #0
}
 800b37c:	0018      	movs	r0, r3
 800b37e:	46bd      	mov	sp, r7
 800b380:	b006      	add	sp, #24
 800b382:	bd80      	pop	{r7, pc}

0800b384 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b086      	sub	sp, #24
 800b388:	af00      	add	r7, sp, #0
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	607a      	str	r2, [r7, #4]
 800b38e:	200b      	movs	r0, #11
 800b390:	183b      	adds	r3, r7, r0
 800b392:	1c0a      	adds	r2, r1, #0
 800b394:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b396:	183b      	adds	r3, r7, r0
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d000      	beq.n	800b3a0 <USBD_LL_DataInStage+0x1c>
 800b39e:	e08e      	b.n	800b4be <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	3314      	adds	r3, #20
 800b3a4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b3a6:	68fa      	ldr	r2, [r7, #12]
 800b3a8:	23a5      	movs	r3, #165	@ 0xa5
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	58d3      	ldr	r3, [r2, r3]
 800b3ae:	2b02      	cmp	r3, #2
 800b3b0:	d164      	bne.n	800b47c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	68da      	ldr	r2, [r3, #12]
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	691b      	ldr	r3, [r3, #16]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d915      	bls.n	800b3ea <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	68da      	ldr	r2, [r3, #12]
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	691b      	ldr	r3, [r3, #16]
 800b3c6:	1ad2      	subs	r2, r2, r3
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	68db      	ldr	r3, [r3, #12]
 800b3d0:	b29a      	uxth	r2, r3
 800b3d2:	6879      	ldr	r1, [r7, #4]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	0018      	movs	r0, r3
 800b3d8:	f000 ffe9 	bl	800c3ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3dc:	68f8      	ldr	r0, [r7, #12]
 800b3de:	2300      	movs	r3, #0
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	2100      	movs	r1, #0
 800b3e4:	f001 fcf5 	bl	800cdd2 <USBD_LL_PrepareReceive>
 800b3e8:	e059      	b.n	800b49e <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	689a      	ldr	r2, [r3, #8]
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	691b      	ldr	r3, [r3, #16]
 800b3f2:	0019      	movs	r1, r3
 800b3f4:	0010      	movs	r0, r2
 800b3f6:	f7f4 ff29 	bl	800024c <__aeabi_uidivmod>
 800b3fa:	1e0b      	subs	r3, r1, #0
 800b3fc:	d11f      	bne.n	800b43e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	689a      	ldr	r2, [r3, #8]
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b406:	429a      	cmp	r2, r3
 800b408:	d319      	bcc.n	800b43e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	689a      	ldr	r2, [r3, #8]
 800b40e:	68f9      	ldr	r1, [r7, #12]
 800b410:	23a6      	movs	r3, #166	@ 0xa6
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800b416:	429a      	cmp	r2, r3
 800b418:	d211      	bcs.n	800b43e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2200      	movs	r2, #0
 800b41e:	2100      	movs	r1, #0
 800b420:	0018      	movs	r0, r3
 800b422:	f000 ffc4 	bl	800c3ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b426:	68fa      	ldr	r2, [r7, #12]
 800b428:	23a6      	movs	r3, #166	@ 0xa6
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	2100      	movs	r1, #0
 800b42e:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b430:	68f8      	ldr	r0, [r7, #12]
 800b432:	2300      	movs	r3, #0
 800b434:	2200      	movs	r2, #0
 800b436:	2100      	movs	r1, #0
 800b438:	f001 fccb 	bl	800cdd2 <USBD_LL_PrepareReceive>
 800b43c:	e02f      	b.n	800b49e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b43e:	68fa      	ldr	r2, [r7, #12]
 800b440:	23ad      	movs	r3, #173	@ 0xad
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	58d3      	ldr	r3, [r2, r3]
 800b446:	68db      	ldr	r3, [r3, #12]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d00d      	beq.n	800b468 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	23a7      	movs	r3, #167	@ 0xa7
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b454:	2b03      	cmp	r3, #3
 800b456:	d107      	bne.n	800b468 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b458:	68fa      	ldr	r2, [r7, #12]
 800b45a:	23ad      	movs	r3, #173	@ 0xad
 800b45c:	009b      	lsls	r3, r3, #2
 800b45e:	58d3      	ldr	r3, [r2, r3]
 800b460:	68db      	ldr	r3, [r3, #12]
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	0010      	movs	r0, r2
 800b466:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2180      	movs	r1, #128	@ 0x80
 800b46c:	0018      	movs	r0, r3
 800b46e:	f001 fbc8 	bl	800cc02 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	0018      	movs	r0, r3
 800b476:	f000 fff8 	bl	800c46a <USBD_CtlReceiveStatus>
 800b47a:	e010      	b.n	800b49e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b47c:	68fa      	ldr	r2, [r7, #12]
 800b47e:	23a5      	movs	r3, #165	@ 0xa5
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	58d3      	ldr	r3, [r2, r3]
 800b484:	2b04      	cmp	r3, #4
 800b486:	d005      	beq.n	800b494 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	23a5      	movs	r3, #165	@ 0xa5
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b490:	2b00      	cmp	r3, #0
 800b492:	d104      	bne.n	800b49e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2180      	movs	r1, #128	@ 0x80
 800b498:	0018      	movs	r0, r3
 800b49a:	f001 fbb2 	bl	800cc02 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	23a8      	movs	r3, #168	@ 0xa8
 800b4a2:	009b      	lsls	r3, r3, #2
 800b4a4:	5cd3      	ldrb	r3, [r2, r3]
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d124      	bne.n	800b4f4 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	0018      	movs	r0, r3
 800b4ae:	f7ff fe43 	bl	800b138 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b4b2:	68fa      	ldr	r2, [r7, #12]
 800b4b4:	23a8      	movs	r3, #168	@ 0xa8
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	54d1      	strb	r1, [r2, r3]
 800b4bc:	e01a      	b.n	800b4f4 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b4be:	68fa      	ldr	r2, [r7, #12]
 800b4c0:	23ad      	movs	r3, #173	@ 0xad
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	58d3      	ldr	r3, [r2, r3]
 800b4c6:	695b      	ldr	r3, [r3, #20]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d011      	beq.n	800b4f0 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	23a7      	movs	r3, #167	@ 0xa7
 800b4d0:	009b      	lsls	r3, r3, #2
 800b4d2:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800b4d4:	2b03      	cmp	r3, #3
 800b4d6:	d10b      	bne.n	800b4f0 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	23ad      	movs	r3, #173	@ 0xad
 800b4dc:	009b      	lsls	r3, r3, #2
 800b4de:	58d3      	ldr	r3, [r2, r3]
 800b4e0:	695b      	ldr	r3, [r3, #20]
 800b4e2:	220b      	movs	r2, #11
 800b4e4:	18ba      	adds	r2, r7, r2
 800b4e6:	7811      	ldrb	r1, [r2, #0]
 800b4e8:	68fa      	ldr	r2, [r7, #12]
 800b4ea:	0010      	movs	r0, r2
 800b4ec:	4798      	blx	r3
 800b4ee:	e001      	b.n	800b4f4 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b4f0:	2302      	movs	r3, #2
 800b4f2:	e000      	b.n	800b4f6 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800b4f4:	2300      	movs	r3, #0
}
 800b4f6:	0018      	movs	r0, r3
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	b006      	add	sp, #24
 800b4fc:	bd80      	pop	{r7, pc}

0800b4fe <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b4fe:	b580      	push	{r7, lr}
 800b500:	b082      	sub	sp, #8
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	2340      	movs	r3, #64	@ 0x40
 800b50a:	2200      	movs	r2, #0
 800b50c:	2100      	movs	r1, #0
 800b50e:	f001 fb16 	bl	800cb3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	23ac      	movs	r3, #172	@ 0xac
 800b516:	005b      	lsls	r3, r3, #1
 800b518:	2101      	movs	r1, #1
 800b51a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	23b2      	movs	r3, #178	@ 0xb2
 800b520:	005b      	lsls	r3, r3, #1
 800b522:	2140      	movs	r1, #64	@ 0x40
 800b524:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	2340      	movs	r3, #64	@ 0x40
 800b52a:	2200      	movs	r2, #0
 800b52c:	2180      	movs	r1, #128	@ 0x80
 800b52e:	f001 fb06 	bl	800cb3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2201      	movs	r2, #1
 800b536:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2240      	movs	r2, #64	@ 0x40
 800b53c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	23a7      	movs	r3, #167	@ 0xa7
 800b542:	009b      	lsls	r3, r3, #2
 800b544:	2101      	movs	r1, #1
 800b546:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	23a5      	movs	r3, #165	@ 0xa5
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	2100      	movs	r1, #0
 800b550:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2200      	movs	r2, #0
 800b556:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	23a9      	movs	r3, #169	@ 0xa9
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	2100      	movs	r1, #0
 800b560:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	23ae      	movs	r3, #174	@ 0xae
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	58d3      	ldr	r3, [r2, r3]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d00a      	beq.n	800b584 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	23ad      	movs	r3, #173	@ 0xad
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	58d3      	ldr	r3, [r2, r3]
 800b576:	685a      	ldr	r2, [r3, #4]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	b2d9      	uxtb	r1, r3
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	0018      	movs	r0, r3
 800b582:	4790      	blx	r2
  }

  return USBD_OK;
 800b584:	2300      	movs	r3, #0
}
 800b586:	0018      	movs	r0, r3
 800b588:	46bd      	mov	sp, r7
 800b58a:	b002      	add	sp, #8
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b082      	sub	sp, #8
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
 800b596:	000a      	movs	r2, r1
 800b598:	1cfb      	adds	r3, r7, #3
 800b59a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	1cfa      	adds	r2, r7, #3
 800b5a0:	7812      	ldrb	r2, [r2, #0]
 800b5a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b5a4:	2300      	movs	r3, #0
}
 800b5a6:	0018      	movs	r0, r3
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	b002      	add	sp, #8
 800b5ac:	bd80      	pop	{r7, pc}
	...

0800b5b0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	23a7      	movs	r3, #167	@ 0xa7
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	5cd1      	ldrb	r1, [r2, r3]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4a06      	ldr	r2, [pc, #24]	@ (800b5dc <USBD_LL_Suspend+0x2c>)
 800b5c4:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b5c6:	687a      	ldr	r2, [r7, #4]
 800b5c8:	23a7      	movs	r3, #167	@ 0xa7
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	2104      	movs	r1, #4
 800b5ce:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	0018      	movs	r0, r3
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	b002      	add	sp, #8
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	46c0      	nop			@ (mov r8, r8)
 800b5dc:	0000029d 	.word	0x0000029d

0800b5e0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	23a7      	movs	r3, #167	@ 0xa7
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	5cd3      	ldrb	r3, [r2, r3]
 800b5f0:	2b04      	cmp	r3, #4
 800b5f2:	d106      	bne.n	800b602 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	4a05      	ldr	r2, [pc, #20]	@ (800b60c <USBD_LL_Resume+0x2c>)
 800b5f8:	5c99      	ldrb	r1, [r3, r2]
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	23a7      	movs	r3, #167	@ 0xa7
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800b602:	2300      	movs	r3, #0
}
 800b604:	0018      	movs	r0, r3
 800b606:	46bd      	mov	sp, r7
 800b608:	b002      	add	sp, #8
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	0000029d 	.word	0x0000029d

0800b610 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	23a7      	movs	r3, #167	@ 0xa7
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	5cd3      	ldrb	r3, [r2, r3]
 800b620:	2b03      	cmp	r3, #3
 800b622:	d10e      	bne.n	800b642 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	23ad      	movs	r3, #173	@ 0xad
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	58d3      	ldr	r3, [r2, r3]
 800b62c:	69db      	ldr	r3, [r3, #28]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d007      	beq.n	800b642 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	23ad      	movs	r3, #173	@ 0xad
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	58d3      	ldr	r3, [r2, r3]
 800b63a:	69db      	ldr	r3, [r3, #28]
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	0010      	movs	r0, r2
 800b640:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b642:	2300      	movs	r3, #0
}
 800b644:	0018      	movs	r0, r3
 800b646:	46bd      	mov	sp, r7
 800b648:	b002      	add	sp, #8
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b656:	230f      	movs	r3, #15
 800b658:	18fb      	adds	r3, r7, r3
 800b65a:	2200      	movs	r2, #0
 800b65c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	001a      	movs	r2, r3
 800b664:	2360      	movs	r3, #96	@ 0x60
 800b666:	4013      	ands	r3, r2
 800b668:	2b40      	cmp	r3, #64	@ 0x40
 800b66a:	d004      	beq.n	800b676 <USBD_StdDevReq+0x2a>
 800b66c:	d84f      	bhi.n	800b70e <USBD_StdDevReq+0xc2>
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d00b      	beq.n	800b68a <USBD_StdDevReq+0x3e>
 800b672:	2b20      	cmp	r3, #32
 800b674:	d14b      	bne.n	800b70e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b676:	687a      	ldr	r2, [r7, #4]
 800b678:	23ad      	movs	r3, #173	@ 0xad
 800b67a:	009b      	lsls	r3, r3, #2
 800b67c:	58d3      	ldr	r3, [r2, r3]
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	6839      	ldr	r1, [r7, #0]
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	0010      	movs	r0, r2
 800b686:	4798      	blx	r3
      break;
 800b688:	e048      	b.n	800b71c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	785b      	ldrb	r3, [r3, #1]
 800b68e:	2b09      	cmp	r3, #9
 800b690:	d835      	bhi.n	800b6fe <USBD_StdDevReq+0xb2>
 800b692:	009a      	lsls	r2, r3, #2
 800b694:	4b25      	ldr	r3, [pc, #148]	@ (800b72c <USBD_StdDevReq+0xe0>)
 800b696:	18d3      	adds	r3, r2, r3
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b69c:	683a      	ldr	r2, [r7, #0]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	0011      	movs	r1, r2
 800b6a2:	0018      	movs	r0, r3
 800b6a4:	f000 fa52 	bl	800bb4c <USBD_GetDescriptor>
          break;
 800b6a8:	e030      	b.n	800b70c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b6aa:	683a      	ldr	r2, [r7, #0]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	0011      	movs	r1, r2
 800b6b0:	0018      	movs	r0, r3
 800b6b2:	f000 fbfd 	bl	800beb0 <USBD_SetAddress>
          break;
 800b6b6:	e029      	b.n	800b70c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b6b8:	683a      	ldr	r2, [r7, #0]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	0011      	movs	r1, r2
 800b6be:	0018      	movs	r0, r3
 800b6c0:	f000 fc4a 	bl	800bf58 <USBD_SetConfig>
          break;
 800b6c4:	e022      	b.n	800b70c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b6c6:	683a      	ldr	r2, [r7, #0]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	0011      	movs	r1, r2
 800b6cc:	0018      	movs	r0, r3
 800b6ce:	f000 fce7 	bl	800c0a0 <USBD_GetConfig>
          break;
 800b6d2:	e01b      	b.n	800b70c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b6d4:	683a      	ldr	r2, [r7, #0]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	0011      	movs	r1, r2
 800b6da:	0018      	movs	r0, r3
 800b6dc:	f000 fd1b 	bl	800c116 <USBD_GetStatus>
          break;
 800b6e0:	e014      	b.n	800b70c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b6e2:	683a      	ldr	r2, [r7, #0]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	0011      	movs	r1, r2
 800b6e8:	0018      	movs	r0, r3
 800b6ea:	f000 fd4e 	bl	800c18a <USBD_SetFeature>
          break;
 800b6ee:	e00d      	b.n	800b70c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b6f0:	683a      	ldr	r2, [r7, #0]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	0011      	movs	r1, r2
 800b6f6:	0018      	movs	r0, r3
 800b6f8:	f000 fd5d 	bl	800c1b6 <USBD_ClrFeature>
          break;
 800b6fc:	e006      	b.n	800b70c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b6fe:	683a      	ldr	r2, [r7, #0]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	0011      	movs	r1, r2
 800b704:	0018      	movs	r0, r3
 800b706:	f000 fdb4 	bl	800c272 <USBD_CtlError>
          break;
 800b70a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800b70c:	e006      	b.n	800b71c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b70e:	683a      	ldr	r2, [r7, #0]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	0011      	movs	r1, r2
 800b714:	0018      	movs	r0, r3
 800b716:	f000 fdac 	bl	800c272 <USBD_CtlError>
      break;
 800b71a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800b71c:	230f      	movs	r3, #15
 800b71e:	18fb      	adds	r3, r7, r3
 800b720:	781b      	ldrb	r3, [r3, #0]
}
 800b722:	0018      	movs	r0, r3
 800b724:	46bd      	mov	sp, r7
 800b726:	b004      	add	sp, #16
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	46c0      	nop			@ (mov r8, r8)
 800b72c:	0800ff74 	.word	0x0800ff74

0800b730 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b730:	b5b0      	push	{r4, r5, r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b73a:	230f      	movs	r3, #15
 800b73c:	18fb      	adds	r3, r7, r3
 800b73e:	2200      	movs	r2, #0
 800b740:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	001a      	movs	r2, r3
 800b748:	2360      	movs	r3, #96	@ 0x60
 800b74a:	4013      	ands	r3, r2
 800b74c:	2b40      	cmp	r3, #64	@ 0x40
 800b74e:	d004      	beq.n	800b75a <USBD_StdItfReq+0x2a>
 800b750:	d839      	bhi.n	800b7c6 <USBD_StdItfReq+0x96>
 800b752:	2b00      	cmp	r3, #0
 800b754:	d001      	beq.n	800b75a <USBD_StdItfReq+0x2a>
 800b756:	2b20      	cmp	r3, #32
 800b758:	d135      	bne.n	800b7c6 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	23a7      	movs	r3, #167	@ 0xa7
 800b75e:	009b      	lsls	r3, r3, #2
 800b760:	5cd3      	ldrb	r3, [r2, r3]
 800b762:	3b01      	subs	r3, #1
 800b764:	2b02      	cmp	r3, #2
 800b766:	d825      	bhi.n	800b7b4 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	889b      	ldrh	r3, [r3, #4]
 800b76c:	b2db      	uxtb	r3, r3
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d819      	bhi.n	800b7a6 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	23ad      	movs	r3, #173	@ 0xad
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	58d3      	ldr	r3, [r2, r3]
 800b77a:	689b      	ldr	r3, [r3, #8]
 800b77c:	250f      	movs	r5, #15
 800b77e:	197c      	adds	r4, r7, r5
 800b780:	6839      	ldr	r1, [r7, #0]
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	0010      	movs	r0, r2
 800b786:	4798      	blx	r3
 800b788:	0003      	movs	r3, r0
 800b78a:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	88db      	ldrh	r3, [r3, #6]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d116      	bne.n	800b7c2 <USBD_StdItfReq+0x92>
 800b794:	197b      	adds	r3, r7, r5
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d112      	bne.n	800b7c2 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	0018      	movs	r0, r3
 800b7a0:	f000 fe4f 	bl	800c442 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b7a4:	e00d      	b.n	800b7c2 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800b7a6:	683a      	ldr	r2, [r7, #0]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	0011      	movs	r1, r2
 800b7ac:	0018      	movs	r0, r3
 800b7ae:	f000 fd60 	bl	800c272 <USBD_CtlError>
          break;
 800b7b2:	e006      	b.n	800b7c2 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800b7b4:	683a      	ldr	r2, [r7, #0]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	0011      	movs	r1, r2
 800b7ba:	0018      	movs	r0, r3
 800b7bc:	f000 fd59 	bl	800c272 <USBD_CtlError>
          break;
 800b7c0:	e000      	b.n	800b7c4 <USBD_StdItfReq+0x94>
          break;
 800b7c2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800b7c4:	e006      	b.n	800b7d4 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800b7c6:	683a      	ldr	r2, [r7, #0]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	0011      	movs	r1, r2
 800b7cc:	0018      	movs	r0, r3
 800b7ce:	f000 fd50 	bl	800c272 <USBD_CtlError>
      break;
 800b7d2:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800b7d4:	2300      	movs	r3, #0
}
 800b7d6:	0018      	movs	r0, r3
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	b004      	add	sp, #16
 800b7dc:	bdb0      	pop	{r4, r5, r7, pc}

0800b7de <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b7de:	b5b0      	push	{r4, r5, r7, lr}
 800b7e0:	b084      	sub	sp, #16
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
 800b7e6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b7e8:	230f      	movs	r3, #15
 800b7ea:	18fb      	adds	r3, r7, r3
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	889a      	ldrh	r2, [r3, #4]
 800b7f4:	230e      	movs	r3, #14
 800b7f6:	18fb      	adds	r3, r7, r3
 800b7f8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	001a      	movs	r2, r3
 800b800:	2360      	movs	r3, #96	@ 0x60
 800b802:	4013      	ands	r3, r2
 800b804:	2b40      	cmp	r3, #64	@ 0x40
 800b806:	d006      	beq.n	800b816 <USBD_StdEPReq+0x38>
 800b808:	d900      	bls.n	800b80c <USBD_StdEPReq+0x2e>
 800b80a:	e190      	b.n	800bb2e <USBD_StdEPReq+0x350>
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d00c      	beq.n	800b82a <USBD_StdEPReq+0x4c>
 800b810:	2b20      	cmp	r3, #32
 800b812:	d000      	beq.n	800b816 <USBD_StdEPReq+0x38>
 800b814:	e18b      	b.n	800bb2e <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	23ad      	movs	r3, #173	@ 0xad
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	58d3      	ldr	r3, [r2, r3]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	6839      	ldr	r1, [r7, #0]
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	0010      	movs	r0, r2
 800b826:	4798      	blx	r3
      break;
 800b828:	e188      	b.n	800bb3c <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	001a      	movs	r2, r3
 800b830:	2360      	movs	r3, #96	@ 0x60
 800b832:	4013      	ands	r3, r2
 800b834:	2b20      	cmp	r3, #32
 800b836:	d10f      	bne.n	800b858 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	23ad      	movs	r3, #173	@ 0xad
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	58d3      	ldr	r3, [r2, r3]
 800b840:	689b      	ldr	r3, [r3, #8]
 800b842:	250f      	movs	r5, #15
 800b844:	197c      	adds	r4, r7, r5
 800b846:	6839      	ldr	r1, [r7, #0]
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	0010      	movs	r0, r2
 800b84c:	4798      	blx	r3
 800b84e:	0003      	movs	r3, r0
 800b850:	7023      	strb	r3, [r4, #0]

        return ret;
 800b852:	197b      	adds	r3, r7, r5
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	e174      	b.n	800bb42 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	785b      	ldrb	r3, [r3, #1]
 800b85c:	2b03      	cmp	r3, #3
 800b85e:	d007      	beq.n	800b870 <USBD_StdEPReq+0x92>
 800b860:	dd00      	ble.n	800b864 <USBD_StdEPReq+0x86>
 800b862:	e15c      	b.n	800bb1e <USBD_StdEPReq+0x340>
 800b864:	2b00      	cmp	r3, #0
 800b866:	d100      	bne.n	800b86a <USBD_StdEPReq+0x8c>
 800b868:	e092      	b.n	800b990 <USBD_StdEPReq+0x1b2>
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d04b      	beq.n	800b906 <USBD_StdEPReq+0x128>
 800b86e:	e156      	b.n	800bb1e <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	23a7      	movs	r3, #167	@ 0xa7
 800b874:	009b      	lsls	r3, r3, #2
 800b876:	5cd3      	ldrb	r3, [r2, r3]
 800b878:	2b02      	cmp	r3, #2
 800b87a:	d002      	beq.n	800b882 <USBD_StdEPReq+0xa4>
 800b87c:	2b03      	cmp	r3, #3
 800b87e:	d01d      	beq.n	800b8bc <USBD_StdEPReq+0xde>
 800b880:	e039      	b.n	800b8f6 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b882:	220e      	movs	r2, #14
 800b884:	18bb      	adds	r3, r7, r2
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d010      	beq.n	800b8ae <USBD_StdEPReq+0xd0>
 800b88c:	18bb      	adds	r3, r7, r2
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	2b80      	cmp	r3, #128	@ 0x80
 800b892:	d00c      	beq.n	800b8ae <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b894:	18bb      	adds	r3, r7, r2
 800b896:	781a      	ldrb	r2, [r3, #0]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	0011      	movs	r1, r2
 800b89c:	0018      	movs	r0, r3
 800b89e:	f001 f9b0 	bl	800cc02 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2180      	movs	r1, #128	@ 0x80
 800b8a6:	0018      	movs	r0, r3
 800b8a8:	f001 f9ab 	bl	800cc02 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b8ac:	e02a      	b.n	800b904 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800b8ae:	683a      	ldr	r2, [r7, #0]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	0011      	movs	r1, r2
 800b8b4:	0018      	movs	r0, r3
 800b8b6:	f000 fcdc 	bl	800c272 <USBD_CtlError>
              break;
 800b8ba:	e023      	b.n	800b904 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	885b      	ldrh	r3, [r3, #2]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d113      	bne.n	800b8ec <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800b8c4:	220e      	movs	r2, #14
 800b8c6:	18bb      	adds	r3, r7, r2
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00e      	beq.n	800b8ec <USBD_StdEPReq+0x10e>
 800b8ce:	18bb      	adds	r3, r7, r2
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	2b80      	cmp	r3, #128	@ 0x80
 800b8d4:	d00a      	beq.n	800b8ec <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	88db      	ldrh	r3, [r3, #6]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d106      	bne.n	800b8ec <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b8de:	18bb      	adds	r3, r7, r2
 800b8e0:	781a      	ldrb	r2, [r3, #0]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	0011      	movs	r1, r2
 800b8e6:	0018      	movs	r0, r3
 800b8e8:	f001 f98b 	bl	800cc02 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	0018      	movs	r0, r3
 800b8f0:	f000 fda7 	bl	800c442 <USBD_CtlSendStatus>

              break;
 800b8f4:	e006      	b.n	800b904 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800b8f6:	683a      	ldr	r2, [r7, #0]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	0011      	movs	r1, r2
 800b8fc:	0018      	movs	r0, r3
 800b8fe:	f000 fcb8 	bl	800c272 <USBD_CtlError>
              break;
 800b902:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800b904:	e112      	b.n	800bb2c <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b906:	687a      	ldr	r2, [r7, #4]
 800b908:	23a7      	movs	r3, #167	@ 0xa7
 800b90a:	009b      	lsls	r3, r3, #2
 800b90c:	5cd3      	ldrb	r3, [r2, r3]
 800b90e:	2b02      	cmp	r3, #2
 800b910:	d002      	beq.n	800b918 <USBD_StdEPReq+0x13a>
 800b912:	2b03      	cmp	r3, #3
 800b914:	d01d      	beq.n	800b952 <USBD_StdEPReq+0x174>
 800b916:	e032      	b.n	800b97e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b918:	220e      	movs	r2, #14
 800b91a:	18bb      	adds	r3, r7, r2
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d010      	beq.n	800b944 <USBD_StdEPReq+0x166>
 800b922:	18bb      	adds	r3, r7, r2
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	2b80      	cmp	r3, #128	@ 0x80
 800b928:	d00c      	beq.n	800b944 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b92a:	18bb      	adds	r3, r7, r2
 800b92c:	781a      	ldrb	r2, [r3, #0]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	0011      	movs	r1, r2
 800b932:	0018      	movs	r0, r3
 800b934:	f001 f965 	bl	800cc02 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2180      	movs	r1, #128	@ 0x80
 800b93c:	0018      	movs	r0, r3
 800b93e:	f001 f960 	bl	800cc02 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b942:	e024      	b.n	800b98e <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800b944:	683a      	ldr	r2, [r7, #0]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	0011      	movs	r1, r2
 800b94a:	0018      	movs	r0, r3
 800b94c:	f000 fc91 	bl	800c272 <USBD_CtlError>
              break;
 800b950:	e01d      	b.n	800b98e <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	885b      	ldrh	r3, [r3, #2]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d118      	bne.n	800b98c <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b95a:	210e      	movs	r1, #14
 800b95c:	187b      	adds	r3, r7, r1
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	227f      	movs	r2, #127	@ 0x7f
 800b962:	4013      	ands	r3, r2
 800b964:	d006      	beq.n	800b974 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b966:	187b      	adds	r3, r7, r1
 800b968:	781a      	ldrb	r2, [r3, #0]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	0011      	movs	r1, r2
 800b96e:	0018      	movs	r0, r3
 800b970:	f001 f972 	bl	800cc58 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	0018      	movs	r0, r3
 800b978:	f000 fd63 	bl	800c442 <USBD_CtlSendStatus>
              }
              break;
 800b97c:	e006      	b.n	800b98c <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800b97e:	683a      	ldr	r2, [r7, #0]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	0011      	movs	r1, r2
 800b984:	0018      	movs	r0, r3
 800b986:	f000 fc74 	bl	800c272 <USBD_CtlError>
              break;
 800b98a:	e000      	b.n	800b98e <USBD_StdEPReq+0x1b0>
              break;
 800b98c:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800b98e:	e0cd      	b.n	800bb2c <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	23a7      	movs	r3, #167	@ 0xa7
 800b994:	009b      	lsls	r3, r3, #2
 800b996:	5cd3      	ldrb	r3, [r2, r3]
 800b998:	2b02      	cmp	r3, #2
 800b99a:	d002      	beq.n	800b9a2 <USBD_StdEPReq+0x1c4>
 800b99c:	2b03      	cmp	r3, #3
 800b99e:	d03c      	beq.n	800ba1a <USBD_StdEPReq+0x23c>
 800b9a0:	e0b5      	b.n	800bb0e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9a2:	220e      	movs	r2, #14
 800b9a4:	18bb      	adds	r3, r7, r2
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d00a      	beq.n	800b9c2 <USBD_StdEPReq+0x1e4>
 800b9ac:	18bb      	adds	r3, r7, r2
 800b9ae:	781b      	ldrb	r3, [r3, #0]
 800b9b0:	2b80      	cmp	r3, #128	@ 0x80
 800b9b2:	d006      	beq.n	800b9c2 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800b9b4:	683a      	ldr	r2, [r7, #0]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	0011      	movs	r1, r2
 800b9ba:	0018      	movs	r0, r3
 800b9bc:	f000 fc59 	bl	800c272 <USBD_CtlError>
                break;
 800b9c0:	e0ac      	b.n	800bb1c <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9c2:	220e      	movs	r2, #14
 800b9c4:	18bb      	adds	r3, r7, r2
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	b25b      	sxtb	r3, r3
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	da0c      	bge.n	800b9e8 <USBD_StdEPReq+0x20a>
 800b9ce:	18bb      	adds	r3, r7, r2
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	227f      	movs	r2, #127	@ 0x7f
 800b9d4:	401a      	ands	r2, r3
 800b9d6:	0013      	movs	r3, r2
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	189b      	adds	r3, r3, r2
 800b9dc:	009b      	lsls	r3, r3, #2
 800b9de:	3310      	adds	r3, #16
 800b9e0:	687a      	ldr	r2, [r7, #4]
 800b9e2:	18d3      	adds	r3, r2, r3
 800b9e4:	3304      	adds	r3, #4
 800b9e6:	e00d      	b.n	800ba04 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9e8:	230e      	movs	r3, #14
 800b9ea:	18fb      	adds	r3, r7, r3
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	227f      	movs	r2, #127	@ 0x7f
 800b9f0:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9f2:	0013      	movs	r3, r2
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	189b      	adds	r3, r3, r2
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	3351      	adds	r3, #81	@ 0x51
 800b9fc:	33ff      	adds	r3, #255	@ 0xff
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	18d3      	adds	r3, r2, r3
 800ba02:	3304      	adds	r3, #4
 800ba04:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ba0c:	68b9      	ldr	r1, [r7, #8]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2202      	movs	r2, #2
 800ba12:	0018      	movs	r0, r3
 800ba14:	f000 fcab 	bl	800c36e <USBD_CtlSendData>
              break;
 800ba18:	e080      	b.n	800bb1c <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ba1a:	220e      	movs	r2, #14
 800ba1c:	18bb      	adds	r3, r7, r2
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	b25b      	sxtb	r3, r3
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	da14      	bge.n	800ba50 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ba26:	18bb      	adds	r3, r7, r2
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	220f      	movs	r2, #15
 800ba2c:	401a      	ands	r2, r3
 800ba2e:	6879      	ldr	r1, [r7, #4]
 800ba30:	0013      	movs	r3, r2
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	189b      	adds	r3, r3, r2
 800ba36:	009b      	lsls	r3, r3, #2
 800ba38:	18cb      	adds	r3, r1, r3
 800ba3a:	3318      	adds	r3, #24
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d11e      	bne.n	800ba80 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800ba42:	683a      	ldr	r2, [r7, #0]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	0011      	movs	r1, r2
 800ba48:	0018      	movs	r0, r3
 800ba4a:	f000 fc12 	bl	800c272 <USBD_CtlError>
                  break;
 800ba4e:	e065      	b.n	800bb1c <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ba50:	230e      	movs	r3, #14
 800ba52:	18fb      	adds	r3, r7, r3
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	220f      	movs	r2, #15
 800ba58:	401a      	ands	r2, r3
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	23ac      	movs	r3, #172	@ 0xac
 800ba5e:	0059      	lsls	r1, r3, #1
 800ba60:	0013      	movs	r3, r2
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	189b      	adds	r3, r3, r2
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	18c3      	adds	r3, r0, r3
 800ba6a:	185b      	adds	r3, r3, r1
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d106      	bne.n	800ba80 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800ba72:	683a      	ldr	r2, [r7, #0]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	0011      	movs	r1, r2
 800ba78:	0018      	movs	r0, r3
 800ba7a:	f000 fbfa 	bl	800c272 <USBD_CtlError>
                  break;
 800ba7e:	e04d      	b.n	800bb1c <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba80:	220e      	movs	r2, #14
 800ba82:	18bb      	adds	r3, r7, r2
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	b25b      	sxtb	r3, r3
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	da0c      	bge.n	800baa6 <USBD_StdEPReq+0x2c8>
 800ba8c:	18bb      	adds	r3, r7, r2
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	227f      	movs	r2, #127	@ 0x7f
 800ba92:	401a      	ands	r2, r3
 800ba94:	0013      	movs	r3, r2
 800ba96:	009b      	lsls	r3, r3, #2
 800ba98:	189b      	adds	r3, r3, r2
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	3310      	adds	r3, #16
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	18d3      	adds	r3, r2, r3
 800baa2:	3304      	adds	r3, #4
 800baa4:	e00d      	b.n	800bac2 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800baa6:	230e      	movs	r3, #14
 800baa8:	18fb      	adds	r3, r7, r3
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	227f      	movs	r2, #127	@ 0x7f
 800baae:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bab0:	0013      	movs	r3, r2
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	189b      	adds	r3, r3, r2
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	3351      	adds	r3, #81	@ 0x51
 800baba:	33ff      	adds	r3, #255	@ 0xff
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	18d3      	adds	r3, r2, r3
 800bac0:	3304      	adds	r3, #4
 800bac2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bac4:	220e      	movs	r2, #14
 800bac6:	18bb      	adds	r3, r7, r2
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d003      	beq.n	800bad6 <USBD_StdEPReq+0x2f8>
 800bace:	18bb      	adds	r3, r7, r2
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	2b80      	cmp	r3, #128	@ 0x80
 800bad4:	d103      	bne.n	800bade <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	2200      	movs	r2, #0
 800bada:	601a      	str	r2, [r3, #0]
 800badc:	e010      	b.n	800bb00 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800bade:	230e      	movs	r3, #14
 800bae0:	18fb      	adds	r3, r7, r3
 800bae2:	781a      	ldrb	r2, [r3, #0]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	0011      	movs	r1, r2
 800bae8:	0018      	movs	r0, r3
 800baea:	f001 f8e0 	bl	800ccae <USBD_LL_IsStallEP>
 800baee:	1e03      	subs	r3, r0, #0
 800baf0:	d003      	beq.n	800bafa <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	2201      	movs	r2, #1
 800baf6:	601a      	str	r2, [r3, #0]
 800baf8:	e002      	b.n	800bb00 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	2200      	movs	r2, #0
 800bafe:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bb00:	68b9      	ldr	r1, [r7, #8]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2202      	movs	r2, #2
 800bb06:	0018      	movs	r0, r3
 800bb08:	f000 fc31 	bl	800c36e <USBD_CtlSendData>
              break;
 800bb0c:	e006      	b.n	800bb1c <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800bb0e:	683a      	ldr	r2, [r7, #0]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	0011      	movs	r1, r2
 800bb14:	0018      	movs	r0, r3
 800bb16:	f000 fbac 	bl	800c272 <USBD_CtlError>
              break;
 800bb1a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800bb1c:	e006      	b.n	800bb2c <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800bb1e:	683a      	ldr	r2, [r7, #0]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	0011      	movs	r1, r2
 800bb24:	0018      	movs	r0, r3
 800bb26:	f000 fba4 	bl	800c272 <USBD_CtlError>
          break;
 800bb2a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800bb2c:	e006      	b.n	800bb3c <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800bb2e:	683a      	ldr	r2, [r7, #0]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	0011      	movs	r1, r2
 800bb34:	0018      	movs	r0, r3
 800bb36:	f000 fb9c 	bl	800c272 <USBD_CtlError>
      break;
 800bb3a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800bb3c:	230f      	movs	r3, #15
 800bb3e:	18fb      	adds	r3, r7, r3
 800bb40:	781b      	ldrb	r3, [r3, #0]
}
 800bb42:	0018      	movs	r0, r3
 800bb44:	46bd      	mov	sp, r7
 800bb46:	b004      	add	sp, #16
 800bb48:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800bb4c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb56:	2308      	movs	r3, #8
 800bb58:	18fb      	adds	r3, r7, r3
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bb62:	230b      	movs	r3, #11
 800bb64:	18fb      	adds	r3, r7, r3
 800bb66:	2200      	movs	r2, #0
 800bb68:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	885b      	ldrh	r3, [r3, #2]
 800bb6e:	0a1b      	lsrs	r3, r3, #8
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	2b07      	cmp	r3, #7
 800bb74:	d900      	bls.n	800bb78 <USBD_GetDescriptor+0x2c>
 800bb76:	e159      	b.n	800be2c <USBD_GetDescriptor+0x2e0>
 800bb78:	009a      	lsls	r2, r3, #2
 800bb7a:	4bcb      	ldr	r3, [pc, #812]	@ (800bea8 <USBD_GetDescriptor+0x35c>)
 800bb7c:	18d3      	adds	r3, r2, r3
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	23ac      	movs	r3, #172	@ 0xac
 800bb86:	009b      	lsls	r3, r3, #2
 800bb88:	58d3      	ldr	r3, [r2, r3]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	7c12      	ldrb	r2, [r2, #16]
 800bb90:	2108      	movs	r1, #8
 800bb92:	1879      	adds	r1, r7, r1
 800bb94:	0010      	movs	r0, r2
 800bb96:	4798      	blx	r3
 800bb98:	0003      	movs	r3, r0
 800bb9a:	60fb      	str	r3, [r7, #12]
      break;
 800bb9c:	e153      	b.n	800be46 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	7c1b      	ldrb	r3, [r3, #16]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d10f      	bne.n	800bbc6 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	23ad      	movs	r3, #173	@ 0xad
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	58d3      	ldr	r3, [r2, r3]
 800bbae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbb0:	2208      	movs	r2, #8
 800bbb2:	18ba      	adds	r2, r7, r2
 800bbb4:	0010      	movs	r0, r2
 800bbb6:	4798      	blx	r3
 800bbb8:	0003      	movs	r3, r0
 800bbba:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	2202      	movs	r2, #2
 800bbc2:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bbc4:	e13f      	b.n	800be46 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	23ad      	movs	r3, #173	@ 0xad
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	58d3      	ldr	r3, [r2, r3]
 800bbce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbd0:	2208      	movs	r2, #8
 800bbd2:	18ba      	adds	r2, r7, r2
 800bbd4:	0010      	movs	r0, r2
 800bbd6:	4798      	blx	r3
 800bbd8:	0003      	movs	r3, r0
 800bbda:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	3301      	adds	r3, #1
 800bbe0:	2202      	movs	r2, #2
 800bbe2:	701a      	strb	r2, [r3, #0]
      break;
 800bbe4:	e12f      	b.n	800be46 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	885b      	ldrh	r3, [r3, #2]
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	2b05      	cmp	r3, #5
 800bbee:	d900      	bls.n	800bbf2 <USBD_GetDescriptor+0xa6>
 800bbf0:	e0d0      	b.n	800bd94 <USBD_GetDescriptor+0x248>
 800bbf2:	009a      	lsls	r2, r3, #2
 800bbf4:	4bad      	ldr	r3, [pc, #692]	@ (800beac <USBD_GetDescriptor+0x360>)
 800bbf6:	18d3      	adds	r3, r2, r3
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	23ac      	movs	r3, #172	@ 0xac
 800bc00:	009b      	lsls	r3, r3, #2
 800bc02:	58d3      	ldr	r3, [r2, r3]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d00d      	beq.n	800bc26 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	23ac      	movs	r3, #172	@ 0xac
 800bc0e:	009b      	lsls	r3, r3, #2
 800bc10:	58d3      	ldr	r3, [r2, r3]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	7c12      	ldrb	r2, [r2, #16]
 800bc18:	2108      	movs	r1, #8
 800bc1a:	1879      	adds	r1, r7, r1
 800bc1c:	0010      	movs	r0, r2
 800bc1e:	4798      	blx	r3
 800bc20:	0003      	movs	r3, r0
 800bc22:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc24:	e0c3      	b.n	800bdae <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bc26:	683a      	ldr	r2, [r7, #0]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	0011      	movs	r1, r2
 800bc2c:	0018      	movs	r0, r3
 800bc2e:	f000 fb20 	bl	800c272 <USBD_CtlError>
            err++;
 800bc32:	210b      	movs	r1, #11
 800bc34:	187b      	adds	r3, r7, r1
 800bc36:	781a      	ldrb	r2, [r3, #0]
 800bc38:	187b      	adds	r3, r7, r1
 800bc3a:	3201      	adds	r2, #1
 800bc3c:	701a      	strb	r2, [r3, #0]
          break;
 800bc3e:	e0b6      	b.n	800bdae <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	23ac      	movs	r3, #172	@ 0xac
 800bc44:	009b      	lsls	r3, r3, #2
 800bc46:	58d3      	ldr	r3, [r2, r3]
 800bc48:	689b      	ldr	r3, [r3, #8]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d00d      	beq.n	800bc6a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	23ac      	movs	r3, #172	@ 0xac
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	58d3      	ldr	r3, [r2, r3]
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	7c12      	ldrb	r2, [r2, #16]
 800bc5c:	2108      	movs	r1, #8
 800bc5e:	1879      	adds	r1, r7, r1
 800bc60:	0010      	movs	r0, r2
 800bc62:	4798      	blx	r3
 800bc64:	0003      	movs	r3, r0
 800bc66:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc68:	e0a1      	b.n	800bdae <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bc6a:	683a      	ldr	r2, [r7, #0]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	0011      	movs	r1, r2
 800bc70:	0018      	movs	r0, r3
 800bc72:	f000 fafe 	bl	800c272 <USBD_CtlError>
            err++;
 800bc76:	210b      	movs	r1, #11
 800bc78:	187b      	adds	r3, r7, r1
 800bc7a:	781a      	ldrb	r2, [r3, #0]
 800bc7c:	187b      	adds	r3, r7, r1
 800bc7e:	3201      	adds	r2, #1
 800bc80:	701a      	strb	r2, [r3, #0]
          break;
 800bc82:	e094      	b.n	800bdae <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	23ac      	movs	r3, #172	@ 0xac
 800bc88:	009b      	lsls	r3, r3, #2
 800bc8a:	58d3      	ldr	r3, [r2, r3]
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00d      	beq.n	800bcae <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	23ac      	movs	r3, #172	@ 0xac
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	58d3      	ldr	r3, [r2, r3]
 800bc9a:	68db      	ldr	r3, [r3, #12]
 800bc9c:	687a      	ldr	r2, [r7, #4]
 800bc9e:	7c12      	ldrb	r2, [r2, #16]
 800bca0:	2108      	movs	r1, #8
 800bca2:	1879      	adds	r1, r7, r1
 800bca4:	0010      	movs	r0, r2
 800bca6:	4798      	blx	r3
 800bca8:	0003      	movs	r3, r0
 800bcaa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcac:	e07f      	b.n	800bdae <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bcae:	683a      	ldr	r2, [r7, #0]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	0011      	movs	r1, r2
 800bcb4:	0018      	movs	r0, r3
 800bcb6:	f000 fadc 	bl	800c272 <USBD_CtlError>
            err++;
 800bcba:	210b      	movs	r1, #11
 800bcbc:	187b      	adds	r3, r7, r1
 800bcbe:	781a      	ldrb	r2, [r3, #0]
 800bcc0:	187b      	adds	r3, r7, r1
 800bcc2:	3201      	adds	r2, #1
 800bcc4:	701a      	strb	r2, [r3, #0]
          break;
 800bcc6:	e072      	b.n	800bdae <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	23ac      	movs	r3, #172	@ 0xac
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	58d3      	ldr	r3, [r2, r3]
 800bcd0:	691b      	ldr	r3, [r3, #16]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d00d      	beq.n	800bcf2 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	23ac      	movs	r3, #172	@ 0xac
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	58d3      	ldr	r3, [r2, r3]
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	7c12      	ldrb	r2, [r2, #16]
 800bce4:	2108      	movs	r1, #8
 800bce6:	1879      	adds	r1, r7, r1
 800bce8:	0010      	movs	r0, r2
 800bcea:	4798      	blx	r3
 800bcec:	0003      	movs	r3, r0
 800bcee:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcf0:	e05d      	b.n	800bdae <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bcf2:	683a      	ldr	r2, [r7, #0]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	0011      	movs	r1, r2
 800bcf8:	0018      	movs	r0, r3
 800bcfa:	f000 faba 	bl	800c272 <USBD_CtlError>
            err++;
 800bcfe:	210b      	movs	r1, #11
 800bd00:	187b      	adds	r3, r7, r1
 800bd02:	781a      	ldrb	r2, [r3, #0]
 800bd04:	187b      	adds	r3, r7, r1
 800bd06:	3201      	adds	r2, #1
 800bd08:	701a      	strb	r2, [r3, #0]
          break;
 800bd0a:	e050      	b.n	800bdae <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	23ac      	movs	r3, #172	@ 0xac
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	58d3      	ldr	r3, [r2, r3]
 800bd14:	695b      	ldr	r3, [r3, #20]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d00d      	beq.n	800bd36 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	23ac      	movs	r3, #172	@ 0xac
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	58d3      	ldr	r3, [r2, r3]
 800bd22:	695b      	ldr	r3, [r3, #20]
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	7c12      	ldrb	r2, [r2, #16]
 800bd28:	2108      	movs	r1, #8
 800bd2a:	1879      	adds	r1, r7, r1
 800bd2c:	0010      	movs	r0, r2
 800bd2e:	4798      	blx	r3
 800bd30:	0003      	movs	r3, r0
 800bd32:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd34:	e03b      	b.n	800bdae <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bd36:	683a      	ldr	r2, [r7, #0]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	0011      	movs	r1, r2
 800bd3c:	0018      	movs	r0, r3
 800bd3e:	f000 fa98 	bl	800c272 <USBD_CtlError>
            err++;
 800bd42:	210b      	movs	r1, #11
 800bd44:	187b      	adds	r3, r7, r1
 800bd46:	781a      	ldrb	r2, [r3, #0]
 800bd48:	187b      	adds	r3, r7, r1
 800bd4a:	3201      	adds	r2, #1
 800bd4c:	701a      	strb	r2, [r3, #0]
          break;
 800bd4e:	e02e      	b.n	800bdae <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	23ac      	movs	r3, #172	@ 0xac
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	58d3      	ldr	r3, [r2, r3]
 800bd58:	699b      	ldr	r3, [r3, #24]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d00d      	beq.n	800bd7a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bd5e:	687a      	ldr	r2, [r7, #4]
 800bd60:	23ac      	movs	r3, #172	@ 0xac
 800bd62:	009b      	lsls	r3, r3, #2
 800bd64:	58d3      	ldr	r3, [r2, r3]
 800bd66:	699b      	ldr	r3, [r3, #24]
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	7c12      	ldrb	r2, [r2, #16]
 800bd6c:	2108      	movs	r1, #8
 800bd6e:	1879      	adds	r1, r7, r1
 800bd70:	0010      	movs	r0, r2
 800bd72:	4798      	blx	r3
 800bd74:	0003      	movs	r3, r0
 800bd76:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd78:	e019      	b.n	800bdae <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bd7a:	683a      	ldr	r2, [r7, #0]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	0011      	movs	r1, r2
 800bd80:	0018      	movs	r0, r3
 800bd82:	f000 fa76 	bl	800c272 <USBD_CtlError>
            err++;
 800bd86:	210b      	movs	r1, #11
 800bd88:	187b      	adds	r3, r7, r1
 800bd8a:	781a      	ldrb	r2, [r3, #0]
 800bd8c:	187b      	adds	r3, r7, r1
 800bd8e:	3201      	adds	r2, #1
 800bd90:	701a      	strb	r2, [r3, #0]
          break;
 800bd92:	e00c      	b.n	800bdae <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800bd94:	683a      	ldr	r2, [r7, #0]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	0011      	movs	r1, r2
 800bd9a:	0018      	movs	r0, r3
 800bd9c:	f000 fa69 	bl	800c272 <USBD_CtlError>
          err++;
 800bda0:	210b      	movs	r1, #11
 800bda2:	187b      	adds	r3, r7, r1
 800bda4:	781a      	ldrb	r2, [r3, #0]
 800bda6:	187b      	adds	r3, r7, r1
 800bda8:	3201      	adds	r2, #1
 800bdaa:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800bdac:	e04b      	b.n	800be46 <USBD_GetDescriptor+0x2fa>
 800bdae:	e04a      	b.n	800be46 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	7c1b      	ldrb	r3, [r3, #16]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d10b      	bne.n	800bdd0 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	23ad      	movs	r3, #173	@ 0xad
 800bdbc:	009b      	lsls	r3, r3, #2
 800bdbe:	58d3      	ldr	r3, [r2, r3]
 800bdc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdc2:	2208      	movs	r2, #8
 800bdc4:	18ba      	adds	r2, r7, r2
 800bdc6:	0010      	movs	r0, r2
 800bdc8:	4798      	blx	r3
 800bdca:	0003      	movs	r3, r0
 800bdcc:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bdce:	e03a      	b.n	800be46 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800bdd0:	683a      	ldr	r2, [r7, #0]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	0011      	movs	r1, r2
 800bdd6:	0018      	movs	r0, r3
 800bdd8:	f000 fa4b 	bl	800c272 <USBD_CtlError>
        err++;
 800bddc:	210b      	movs	r1, #11
 800bdde:	187b      	adds	r3, r7, r1
 800bde0:	781a      	ldrb	r2, [r3, #0]
 800bde2:	187b      	adds	r3, r7, r1
 800bde4:	3201      	adds	r2, #1
 800bde6:	701a      	strb	r2, [r3, #0]
      break;
 800bde8:	e02d      	b.n	800be46 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	7c1b      	ldrb	r3, [r3, #16]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d10f      	bne.n	800be12 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	23ad      	movs	r3, #173	@ 0xad
 800bdf6:	009b      	lsls	r3, r3, #2
 800bdf8:	58d3      	ldr	r3, [r2, r3]
 800bdfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdfc:	2208      	movs	r2, #8
 800bdfe:	18ba      	adds	r2, r7, r2
 800be00:	0010      	movs	r0, r2
 800be02:	4798      	blx	r3
 800be04:	0003      	movs	r3, r0
 800be06:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	3301      	adds	r3, #1
 800be0c:	2207      	movs	r2, #7
 800be0e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be10:	e019      	b.n	800be46 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800be12:	683a      	ldr	r2, [r7, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	0011      	movs	r1, r2
 800be18:	0018      	movs	r0, r3
 800be1a:	f000 fa2a 	bl	800c272 <USBD_CtlError>
        err++;
 800be1e:	210b      	movs	r1, #11
 800be20:	187b      	adds	r3, r7, r1
 800be22:	781a      	ldrb	r2, [r3, #0]
 800be24:	187b      	adds	r3, r7, r1
 800be26:	3201      	adds	r2, #1
 800be28:	701a      	strb	r2, [r3, #0]
      break;
 800be2a:	e00c      	b.n	800be46 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800be2c:	683a      	ldr	r2, [r7, #0]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	0011      	movs	r1, r2
 800be32:	0018      	movs	r0, r3
 800be34:	f000 fa1d 	bl	800c272 <USBD_CtlError>
      err++;
 800be38:	210b      	movs	r1, #11
 800be3a:	187b      	adds	r3, r7, r1
 800be3c:	781a      	ldrb	r2, [r3, #0]
 800be3e:	187b      	adds	r3, r7, r1
 800be40:	3201      	adds	r2, #1
 800be42:	701a      	strb	r2, [r3, #0]
      break;
 800be44:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 800be46:	230b      	movs	r3, #11
 800be48:	18fb      	adds	r3, r7, r3
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d127      	bne.n	800bea0 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800be50:	2108      	movs	r1, #8
 800be52:	187b      	adds	r3, r7, r1
 800be54:	881b      	ldrh	r3, [r3, #0]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d019      	beq.n	800be8e <USBD_GetDescriptor+0x342>
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	88db      	ldrh	r3, [r3, #6]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d015      	beq.n	800be8e <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	88da      	ldrh	r2, [r3, #6]
 800be66:	187b      	adds	r3, r7, r1
 800be68:	881b      	ldrh	r3, [r3, #0]
 800be6a:	1c18      	adds	r0, r3, #0
 800be6c:	1c11      	adds	r1, r2, #0
 800be6e:	b28a      	uxth	r2, r1
 800be70:	b283      	uxth	r3, r0
 800be72:	429a      	cmp	r2, r3
 800be74:	d900      	bls.n	800be78 <USBD_GetDescriptor+0x32c>
 800be76:	1c01      	adds	r1, r0, #0
 800be78:	b28a      	uxth	r2, r1
 800be7a:	2108      	movs	r1, #8
 800be7c:	187b      	adds	r3, r7, r1
 800be7e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800be80:	187b      	adds	r3, r7, r1
 800be82:	881a      	ldrh	r2, [r3, #0]
 800be84:	68f9      	ldr	r1, [r7, #12]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	0018      	movs	r0, r3
 800be8a:	f000 fa70 	bl	800c36e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	88db      	ldrh	r3, [r3, #6]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d105      	bne.n	800bea2 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	0018      	movs	r0, r3
 800be9a:	f000 fad2 	bl	800c442 <USBD_CtlSendStatus>
 800be9e:	e000      	b.n	800bea2 <USBD_GetDescriptor+0x356>
    return;
 800bea0:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800bea2:	46bd      	mov	sp, r7
 800bea4:	b004      	add	sp, #16
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	0800ff9c 	.word	0x0800ff9c
 800beac:	0800ffbc 	.word	0x0800ffbc

0800beb0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800beb0:	b590      	push	{r4, r7, lr}
 800beb2:	b085      	sub	sp, #20
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	889b      	ldrh	r3, [r3, #4]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d13d      	bne.n	800bf3e <USBD_SetAddress+0x8e>
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	88db      	ldrh	r3, [r3, #6]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d139      	bne.n	800bf3e <USBD_SetAddress+0x8e>
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	885b      	ldrh	r3, [r3, #2]
 800bece:	2b7f      	cmp	r3, #127	@ 0x7f
 800bed0:	d835      	bhi.n	800bf3e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	885b      	ldrh	r3, [r3, #2]
 800bed6:	b2da      	uxtb	r2, r3
 800bed8:	230f      	movs	r3, #15
 800beda:	18fb      	adds	r3, r7, r3
 800bedc:	217f      	movs	r1, #127	@ 0x7f
 800bede:	400a      	ands	r2, r1
 800bee0:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	23a7      	movs	r3, #167	@ 0xa7
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	5cd3      	ldrb	r3, [r2, r3]
 800beea:	2b03      	cmp	r3, #3
 800beec:	d106      	bne.n	800befc <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800beee:	683a      	ldr	r2, [r7, #0]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	0011      	movs	r1, r2
 800bef4:	0018      	movs	r0, r3
 800bef6:	f000 f9bc 	bl	800c272 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800befa:	e027      	b.n	800bf4c <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	240f      	movs	r4, #15
 800bf00:	193a      	adds	r2, r7, r4
 800bf02:	4914      	ldr	r1, [pc, #80]	@ (800bf54 <USBD_SetAddress+0xa4>)
 800bf04:	7812      	ldrb	r2, [r2, #0]
 800bf06:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bf08:	193b      	adds	r3, r7, r4
 800bf0a:	781a      	ldrb	r2, [r3, #0]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	0011      	movs	r1, r2
 800bf10:	0018      	movs	r0, r3
 800bf12:	f000 fefc 	bl	800cd0e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	0018      	movs	r0, r3
 800bf1a:	f000 fa92 	bl	800c442 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bf1e:	193b      	adds	r3, r7, r4
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d005      	beq.n	800bf32 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	23a7      	movs	r3, #167	@ 0xa7
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	2102      	movs	r1, #2
 800bf2e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf30:	e00c      	b.n	800bf4c <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	23a7      	movs	r3, #167	@ 0xa7
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	2101      	movs	r1, #1
 800bf3a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf3c:	e006      	b.n	800bf4c <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bf3e:	683a      	ldr	r2, [r7, #0]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	0011      	movs	r1, r2
 800bf44:	0018      	movs	r0, r3
 800bf46:	f000 f994 	bl	800c272 <USBD_CtlError>
  }
}
 800bf4a:	46c0      	nop			@ (mov r8, r8)
 800bf4c:	46c0      	nop			@ (mov r8, r8)
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	b005      	add	sp, #20
 800bf52:	bd90      	pop	{r4, r7, pc}
 800bf54:	0000029e 	.word	0x0000029e

0800bf58 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	885b      	ldrh	r3, [r3, #2]
 800bf66:	b2da      	uxtb	r2, r3
 800bf68:	4b4c      	ldr	r3, [pc, #304]	@ (800c09c <USBD_SetConfig+0x144>)
 800bf6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bf6c:	4b4b      	ldr	r3, [pc, #300]	@ (800c09c <USBD_SetConfig+0x144>)
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d906      	bls.n	800bf82 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800bf74:	683a      	ldr	r2, [r7, #0]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	0011      	movs	r1, r2
 800bf7a:	0018      	movs	r0, r3
 800bf7c:	f000 f979 	bl	800c272 <USBD_CtlError>
 800bf80:	e088      	b.n	800c094 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800bf82:	687a      	ldr	r2, [r7, #4]
 800bf84:	23a7      	movs	r3, #167	@ 0xa7
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	5cd3      	ldrb	r3, [r2, r3]
 800bf8a:	2b02      	cmp	r3, #2
 800bf8c:	d002      	beq.n	800bf94 <USBD_SetConfig+0x3c>
 800bf8e:	2b03      	cmp	r3, #3
 800bf90:	d029      	beq.n	800bfe6 <USBD_SetConfig+0x8e>
 800bf92:	e071      	b.n	800c078 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800bf94:	4b41      	ldr	r3, [pc, #260]	@ (800c09c <USBD_SetConfig+0x144>)
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d01f      	beq.n	800bfdc <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800bf9c:	4b3f      	ldr	r3, [pc, #252]	@ (800c09c <USBD_SetConfig+0x144>)
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	001a      	movs	r2, r3
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bfa6:	687a      	ldr	r2, [r7, #4]
 800bfa8:	23a7      	movs	r3, #167	@ 0xa7
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	2103      	movs	r1, #3
 800bfae:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bfb0:	4b3a      	ldr	r3, [pc, #232]	@ (800c09c <USBD_SetConfig+0x144>)
 800bfb2:	781a      	ldrb	r2, [r3, #0]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	0011      	movs	r1, r2
 800bfb8:	0018      	movs	r0, r3
 800bfba:	f7ff f8c6 	bl	800b14a <USBD_SetClassConfig>
 800bfbe:	0003      	movs	r3, r0
 800bfc0:	2b02      	cmp	r3, #2
 800bfc2:	d106      	bne.n	800bfd2 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800bfc4:	683a      	ldr	r2, [r7, #0]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	0011      	movs	r1, r2
 800bfca:	0018      	movs	r0, r3
 800bfcc:	f000 f951 	bl	800c272 <USBD_CtlError>
            return;
 800bfd0:	e060      	b.n	800c094 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	0018      	movs	r0, r3
 800bfd6:	f000 fa34 	bl	800c442 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bfda:	e05b      	b.n	800c094 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	0018      	movs	r0, r3
 800bfe0:	f000 fa2f 	bl	800c442 <USBD_CtlSendStatus>
        break;
 800bfe4:	e056      	b.n	800c094 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800bfe6:	4b2d      	ldr	r3, [pc, #180]	@ (800c09c <USBD_SetConfig+0x144>)
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d115      	bne.n	800c01a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	23a7      	movs	r3, #167	@ 0xa7
 800bff2:	009b      	lsls	r3, r3, #2
 800bff4:	2102      	movs	r1, #2
 800bff6:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800bff8:	4b28      	ldr	r3, [pc, #160]	@ (800c09c <USBD_SetConfig+0x144>)
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	001a      	movs	r2, r3
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c002:	4b26      	ldr	r3, [pc, #152]	@ (800c09c <USBD_SetConfig+0x144>)
 800c004:	781a      	ldrb	r2, [r3, #0]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	0011      	movs	r1, r2
 800c00a:	0018      	movs	r0, r3
 800c00c:	f7ff f8c4 	bl	800b198 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	0018      	movs	r0, r3
 800c014:	f000 fa15 	bl	800c442 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c018:	e03c      	b.n	800c094 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800c01a:	4b20      	ldr	r3, [pc, #128]	@ (800c09c <USBD_SetConfig+0x144>)
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	001a      	movs	r2, r3
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	429a      	cmp	r2, r3
 800c026:	d022      	beq.n	800c06e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	b2da      	uxtb	r2, r3
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	0011      	movs	r1, r2
 800c032:	0018      	movs	r0, r3
 800c034:	f7ff f8b0 	bl	800b198 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c038:	4b18      	ldr	r3, [pc, #96]	@ (800c09c <USBD_SetConfig+0x144>)
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	001a      	movs	r2, r3
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c042:	4b16      	ldr	r3, [pc, #88]	@ (800c09c <USBD_SetConfig+0x144>)
 800c044:	781a      	ldrb	r2, [r3, #0]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	0011      	movs	r1, r2
 800c04a:	0018      	movs	r0, r3
 800c04c:	f7ff f87d 	bl	800b14a <USBD_SetClassConfig>
 800c050:	0003      	movs	r3, r0
 800c052:	2b02      	cmp	r3, #2
 800c054:	d106      	bne.n	800c064 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800c056:	683a      	ldr	r2, [r7, #0]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	0011      	movs	r1, r2
 800c05c:	0018      	movs	r0, r3
 800c05e:	f000 f908 	bl	800c272 <USBD_CtlError>
            return;
 800c062:	e017      	b.n	800c094 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	0018      	movs	r0, r3
 800c068:	f000 f9eb 	bl	800c442 <USBD_CtlSendStatus>
        break;
 800c06c:	e012      	b.n	800c094 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	0018      	movs	r0, r3
 800c072:	f000 f9e6 	bl	800c442 <USBD_CtlSendStatus>
        break;
 800c076:	e00d      	b.n	800c094 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800c078:	683a      	ldr	r2, [r7, #0]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	0011      	movs	r1, r2
 800c07e:	0018      	movs	r0, r3
 800c080:	f000 f8f7 	bl	800c272 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c084:	4b05      	ldr	r3, [pc, #20]	@ (800c09c <USBD_SetConfig+0x144>)
 800c086:	781a      	ldrb	r2, [r3, #0]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	0011      	movs	r1, r2
 800c08c:	0018      	movs	r0, r3
 800c08e:	f7ff f883 	bl	800b198 <USBD_ClrClassConfig>
        break;
 800c092:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800c094:	46bd      	mov	sp, r7
 800c096:	b002      	add	sp, #8
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	46c0      	nop			@ (mov r8, r8)
 800c09c:	200009d4 	.word	0x200009d4

0800c0a0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	88db      	ldrh	r3, [r3, #6]
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d006      	beq.n	800c0c0 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800c0b2:	683a      	ldr	r2, [r7, #0]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	0011      	movs	r1, r2
 800c0b8:	0018      	movs	r0, r3
 800c0ba:	f000 f8da 	bl	800c272 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c0be:	e026      	b.n	800c10e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	23a7      	movs	r3, #167	@ 0xa7
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	5cd3      	ldrb	r3, [r2, r3]
 800c0c8:	2b02      	cmp	r3, #2
 800c0ca:	dc02      	bgt.n	800c0d2 <USBD_GetConfig+0x32>
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	dc03      	bgt.n	800c0d8 <USBD_GetConfig+0x38>
 800c0d0:	e016      	b.n	800c100 <USBD_GetConfig+0x60>
 800c0d2:	2b03      	cmp	r3, #3
 800c0d4:	d00c      	beq.n	800c0f0 <USBD_GetConfig+0x50>
 800c0d6:	e013      	b.n	800c100 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	3308      	adds	r3, #8
 800c0e2:	0019      	movs	r1, r3
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	0018      	movs	r0, r3
 800c0ea:	f000 f940 	bl	800c36e <USBD_CtlSendData>
        break;
 800c0ee:	e00e      	b.n	800c10e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	1d19      	adds	r1, r3, #4
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	0018      	movs	r0, r3
 800c0fa:	f000 f938 	bl	800c36e <USBD_CtlSendData>
        break;
 800c0fe:	e006      	b.n	800c10e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800c100:	683a      	ldr	r2, [r7, #0]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	0011      	movs	r1, r2
 800c106:	0018      	movs	r0, r3
 800c108:	f000 f8b3 	bl	800c272 <USBD_CtlError>
        break;
 800c10c:	46c0      	nop			@ (mov r8, r8)
}
 800c10e:	46c0      	nop			@ (mov r8, r8)
 800c110:	46bd      	mov	sp, r7
 800c112:	b002      	add	sp, #8
 800c114:	bd80      	pop	{r7, pc}

0800c116 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c116:	b580      	push	{r7, lr}
 800c118:	b082      	sub	sp, #8
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
 800c11e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	23a7      	movs	r3, #167	@ 0xa7
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	5cd3      	ldrb	r3, [r2, r3]
 800c128:	3b01      	subs	r3, #1
 800c12a:	2b02      	cmp	r3, #2
 800c12c:	d822      	bhi.n	800c174 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	88db      	ldrh	r3, [r3, #6]
 800c132:	2b02      	cmp	r3, #2
 800c134:	d006      	beq.n	800c144 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800c136:	683a      	ldr	r2, [r7, #0]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	0011      	movs	r1, r2
 800c13c:	0018      	movs	r0, r3
 800c13e:	f000 f898 	bl	800c272 <USBD_CtlError>
        break;
 800c142:	e01e      	b.n	800c182 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2201      	movs	r2, #1
 800c148:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c14a:	687a      	ldr	r2, [r7, #4]
 800c14c:	23a9      	movs	r3, #169	@ 0xa9
 800c14e:	009b      	lsls	r3, r3, #2
 800c150:	58d3      	ldr	r3, [r2, r3]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d005      	beq.n	800c162 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	68db      	ldr	r3, [r3, #12]
 800c15a:	2202      	movs	r2, #2
 800c15c:	431a      	orrs	r2, r3
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	330c      	adds	r3, #12
 800c166:	0019      	movs	r1, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2202      	movs	r2, #2
 800c16c:	0018      	movs	r0, r3
 800c16e:	f000 f8fe 	bl	800c36e <USBD_CtlSendData>
      break;
 800c172:	e006      	b.n	800c182 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800c174:	683a      	ldr	r2, [r7, #0]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	0011      	movs	r1, r2
 800c17a:	0018      	movs	r0, r3
 800c17c:	f000 f879 	bl	800c272 <USBD_CtlError>
      break;
 800c180:	46c0      	nop			@ (mov r8, r8)
  }
}
 800c182:	46c0      	nop			@ (mov r8, r8)
 800c184:	46bd      	mov	sp, r7
 800c186:	b002      	add	sp, #8
 800c188:	bd80      	pop	{r7, pc}

0800c18a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c18a:	b580      	push	{r7, lr}
 800c18c:	b082      	sub	sp, #8
 800c18e:	af00      	add	r7, sp, #0
 800c190:	6078      	str	r0, [r7, #4]
 800c192:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	885b      	ldrh	r3, [r3, #2]
 800c198:	2b01      	cmp	r3, #1
 800c19a:	d108      	bne.n	800c1ae <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800c19c:	687a      	ldr	r2, [r7, #4]
 800c19e:	23a9      	movs	r3, #169	@ 0xa9
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	2101      	movs	r1, #1
 800c1a4:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	0018      	movs	r0, r3
 800c1aa:	f000 f94a 	bl	800c442 <USBD_CtlSendStatus>
  }
}
 800c1ae:	46c0      	nop			@ (mov r8, r8)
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	b002      	add	sp, #8
 800c1b4:	bd80      	pop	{r7, pc}

0800c1b6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c1b6:	b580      	push	{r7, lr}
 800c1b8:	b082      	sub	sp, #8
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
 800c1be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	23a7      	movs	r3, #167	@ 0xa7
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	5cd3      	ldrb	r3, [r2, r3]
 800c1c8:	3b01      	subs	r3, #1
 800c1ca:	2b02      	cmp	r3, #2
 800c1cc:	d80d      	bhi.n	800c1ea <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	885b      	ldrh	r3, [r3, #2]
 800c1d2:	2b01      	cmp	r3, #1
 800c1d4:	d110      	bne.n	800c1f8 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	23a9      	movs	r3, #169	@ 0xa9
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	2100      	movs	r1, #0
 800c1de:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	0018      	movs	r0, r3
 800c1e4:	f000 f92d 	bl	800c442 <USBD_CtlSendStatus>
      }
      break;
 800c1e8:	e006      	b.n	800c1f8 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800c1ea:	683a      	ldr	r2, [r7, #0]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	0011      	movs	r1, r2
 800c1f0:	0018      	movs	r0, r3
 800c1f2:	f000 f83e 	bl	800c272 <USBD_CtlError>
      break;
 800c1f6:	e000      	b.n	800c1fa <USBD_ClrFeature+0x44>
      break;
 800c1f8:	46c0      	nop			@ (mov r8, r8)
  }
}
 800c1fa:	46c0      	nop			@ (mov r8, r8)
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	b002      	add	sp, #8
 800c200:	bd80      	pop	{r7, pc}

0800c202 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c202:	b580      	push	{r7, lr}
 800c204:	b082      	sub	sp, #8
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
 800c20a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	781a      	ldrb	r2, [r3, #0]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	785a      	ldrb	r2, [r3, #1]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	3302      	adds	r3, #2
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	001a      	movs	r2, r3
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	3303      	adds	r3, #3
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	021b      	lsls	r3, r3, #8
 800c22c:	b29b      	uxth	r3, r3
 800c22e:	18d3      	adds	r3, r2, r3
 800c230:	b29a      	uxth	r2, r3
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	3304      	adds	r3, #4
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	001a      	movs	r2, r3
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	3305      	adds	r3, #5
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	021b      	lsls	r3, r3, #8
 800c246:	b29b      	uxth	r3, r3
 800c248:	18d3      	adds	r3, r2, r3
 800c24a:	b29a      	uxth	r2, r3
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	3306      	adds	r3, #6
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	001a      	movs	r2, r3
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	3307      	adds	r3, #7
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	021b      	lsls	r3, r3, #8
 800c260:	b29b      	uxth	r3, r3
 800c262:	18d3      	adds	r3, r2, r3
 800c264:	b29a      	uxth	r2, r3
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	80da      	strh	r2, [r3, #6]

}
 800c26a:	46c0      	nop			@ (mov r8, r8)
 800c26c:	46bd      	mov	sp, r7
 800c26e:	b002      	add	sp, #8
 800c270:	bd80      	pop	{r7, pc}

0800c272 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c272:	b580      	push	{r7, lr}
 800c274:	b082      	sub	sp, #8
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
 800c27a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2180      	movs	r1, #128	@ 0x80
 800c280:	0018      	movs	r0, r3
 800c282:	f000 fcbe 	bl	800cc02 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2100      	movs	r1, #0
 800c28a:	0018      	movs	r0, r3
 800c28c:	f000 fcb9 	bl	800cc02 <USBD_LL_StallEP>
}
 800c290:	46c0      	nop			@ (mov r8, r8)
 800c292:	46bd      	mov	sp, r7
 800c294:	b002      	add	sp, #8
 800c296:	bd80      	pop	{r7, pc}

0800c298 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c298:	b590      	push	{r4, r7, lr}
 800c29a:	b087      	sub	sp, #28
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c2a4:	2417      	movs	r4, #23
 800c2a6:	193b      	adds	r3, r7, r4
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d03c      	beq.n	800c32c <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	0018      	movs	r0, r3
 800c2b6:	f000 f83d 	bl	800c334 <USBD_GetLen>
 800c2ba:	0003      	movs	r3, r0
 800c2bc:	3301      	adds	r3, #1
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	18db      	adds	r3, r3, r3
 800c2c2:	b29a      	uxth	r2, r3
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c2c8:	193b      	adds	r3, r7, r4
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	193a      	adds	r2, r7, r4
 800c2ce:	1c59      	adds	r1, r3, #1
 800c2d0:	7011      	strb	r1, [r2, #0]
 800c2d2:	001a      	movs	r2, r3
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	189b      	adds	r3, r3, r2
 800c2d8:	687a      	ldr	r2, [r7, #4]
 800c2da:	7812      	ldrb	r2, [r2, #0]
 800c2dc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c2de:	193b      	adds	r3, r7, r4
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	193a      	adds	r2, r7, r4
 800c2e4:	1c59      	adds	r1, r3, #1
 800c2e6:	7011      	strb	r1, [r2, #0]
 800c2e8:	001a      	movs	r2, r3
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	189b      	adds	r3, r3, r2
 800c2ee:	2203      	movs	r2, #3
 800c2f0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c2f2:	e017      	b.n	800c324 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	1c5a      	adds	r2, r3, #1
 800c2f8:	60fa      	str	r2, [r7, #12]
 800c2fa:	2417      	movs	r4, #23
 800c2fc:	193a      	adds	r2, r7, r4
 800c2fe:	7812      	ldrb	r2, [r2, #0]
 800c300:	1939      	adds	r1, r7, r4
 800c302:	1c50      	adds	r0, r2, #1
 800c304:	7008      	strb	r0, [r1, #0]
 800c306:	0011      	movs	r1, r2
 800c308:	68ba      	ldr	r2, [r7, #8]
 800c30a:	1852      	adds	r2, r2, r1
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c310:	193b      	adds	r3, r7, r4
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	193a      	adds	r2, r7, r4
 800c316:	1c59      	adds	r1, r3, #1
 800c318:	7011      	strb	r1, [r2, #0]
 800c31a:	001a      	movs	r2, r3
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	189b      	adds	r3, r3, r2
 800c320:	2200      	movs	r2, #0
 800c322:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d1e3      	bne.n	800c2f4 <USBD_GetString+0x5c>
    }
  }
}
 800c32c:	46c0      	nop			@ (mov r8, r8)
 800c32e:	46bd      	mov	sp, r7
 800c330:	b007      	add	sp, #28
 800c332:	bd90      	pop	{r4, r7, pc}

0800c334 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c33c:	230f      	movs	r3, #15
 800c33e:	18fb      	adds	r3, r7, r3
 800c340:	2200      	movs	r2, #0
 800c342:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800c344:	e008      	b.n	800c358 <USBD_GetLen+0x24>
  {
    len++;
 800c346:	210f      	movs	r1, #15
 800c348:	187b      	adds	r3, r7, r1
 800c34a:	781a      	ldrb	r2, [r3, #0]
 800c34c:	187b      	adds	r3, r7, r1
 800c34e:	3201      	adds	r2, #1
 800c350:	701a      	strb	r2, [r3, #0]
    buf++;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	3301      	adds	r3, #1
 800c356:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d1f2      	bne.n	800c346 <USBD_GetLen+0x12>
  }

  return len;
 800c360:	230f      	movs	r3, #15
 800c362:	18fb      	adds	r3, r7, r3
 800c364:	781b      	ldrb	r3, [r3, #0]
}
 800c366:	0018      	movs	r0, r3
 800c368:	46bd      	mov	sp, r7
 800c36a:	b004      	add	sp, #16
 800c36c:	bd80      	pop	{r7, pc}

0800c36e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c36e:	b580      	push	{r7, lr}
 800c370:	b084      	sub	sp, #16
 800c372:	af00      	add	r7, sp, #0
 800c374:	60f8      	str	r0, [r7, #12]
 800c376:	60b9      	str	r1, [r7, #8]
 800c378:	1dbb      	adds	r3, r7, #6
 800c37a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	23a5      	movs	r3, #165	@ 0xa5
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	2102      	movs	r1, #2
 800c384:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800c386:	1dbb      	adds	r3, r7, #6
 800c388:	881a      	ldrh	r2, [r3, #0]
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c38e:	1dbb      	adds	r3, r7, #6
 800c390:	881a      	ldrh	r2, [r3, #0]
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c396:	1dbb      	adds	r3, r7, #6
 800c398:	881b      	ldrh	r3, [r3, #0]
 800c39a:	68ba      	ldr	r2, [r7, #8]
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	2100      	movs	r1, #0
 800c3a0:	f000 fce0 	bl	800cd64 <USBD_LL_Transmit>

  return USBD_OK;
 800c3a4:	2300      	movs	r3, #0
}
 800c3a6:	0018      	movs	r0, r3
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	b004      	add	sp, #16
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b084      	sub	sp, #16
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	60f8      	str	r0, [r7, #12]
 800c3b6:	60b9      	str	r1, [r7, #8]
 800c3b8:	1dbb      	adds	r3, r7, #6
 800c3ba:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c3bc:	1dbb      	adds	r3, r7, #6
 800c3be:	881b      	ldrh	r3, [r3, #0]
 800c3c0:	68ba      	ldr	r2, [r7, #8]
 800c3c2:	68f8      	ldr	r0, [r7, #12]
 800c3c4:	2100      	movs	r1, #0
 800c3c6:	f000 fccd 	bl	800cd64 <USBD_LL_Transmit>

  return USBD_OK;
 800c3ca:	2300      	movs	r3, #0
}
 800c3cc:	0018      	movs	r0, r3
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	b004      	add	sp, #16
 800c3d2:	bd80      	pop	{r7, pc}

0800c3d4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	60f8      	str	r0, [r7, #12]
 800c3dc:	60b9      	str	r1, [r7, #8]
 800c3de:	1dbb      	adds	r3, r7, #6
 800c3e0:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c3e2:	68fa      	ldr	r2, [r7, #12]
 800c3e4:	23a5      	movs	r3, #165	@ 0xa5
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	2103      	movs	r1, #3
 800c3ea:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800c3ec:	1dbb      	adds	r3, r7, #6
 800c3ee:	8819      	ldrh	r1, [r3, #0]
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	23ae      	movs	r3, #174	@ 0xae
 800c3f4:	005b      	lsls	r3, r3, #1
 800c3f6:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800c3f8:	1dbb      	adds	r3, r7, #6
 800c3fa:	8819      	ldrh	r1, [r3, #0]
 800c3fc:	68fa      	ldr	r2, [r7, #12]
 800c3fe:	23b0      	movs	r3, #176	@ 0xb0
 800c400:	005b      	lsls	r3, r3, #1
 800c402:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c404:	1dbb      	adds	r3, r7, #6
 800c406:	881b      	ldrh	r3, [r3, #0]
 800c408:	68ba      	ldr	r2, [r7, #8]
 800c40a:	68f8      	ldr	r0, [r7, #12]
 800c40c:	2100      	movs	r1, #0
 800c40e:	f000 fce0 	bl	800cdd2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c412:	2300      	movs	r3, #0
}
 800c414:	0018      	movs	r0, r3
 800c416:	46bd      	mov	sp, r7
 800c418:	b004      	add	sp, #16
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	1dbb      	adds	r3, r7, #6
 800c428:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c42a:	1dbb      	adds	r3, r7, #6
 800c42c:	881b      	ldrh	r3, [r3, #0]
 800c42e:	68ba      	ldr	r2, [r7, #8]
 800c430:	68f8      	ldr	r0, [r7, #12]
 800c432:	2100      	movs	r1, #0
 800c434:	f000 fccd 	bl	800cdd2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c438:	2300      	movs	r3, #0
}
 800c43a:	0018      	movs	r0, r3
 800c43c:	46bd      	mov	sp, r7
 800c43e:	b004      	add	sp, #16
 800c440:	bd80      	pop	{r7, pc}

0800c442 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c442:	b580      	push	{r7, lr}
 800c444:	b082      	sub	sp, #8
 800c446:	af00      	add	r7, sp, #0
 800c448:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	23a5      	movs	r3, #165	@ 0xa5
 800c44e:	009b      	lsls	r3, r3, #2
 800c450:	2104      	movs	r1, #4
 800c452:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	2300      	movs	r3, #0
 800c458:	2200      	movs	r2, #0
 800c45a:	2100      	movs	r1, #0
 800c45c:	f000 fc82 	bl	800cd64 <USBD_LL_Transmit>

  return USBD_OK;
 800c460:	2300      	movs	r3, #0
}
 800c462:	0018      	movs	r0, r3
 800c464:	46bd      	mov	sp, r7
 800c466:	b002      	add	sp, #8
 800c468:	bd80      	pop	{r7, pc}

0800c46a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c46a:	b580      	push	{r7, lr}
 800c46c:	b082      	sub	sp, #8
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	23a5      	movs	r3, #165	@ 0xa5
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	2105      	movs	r1, #5
 800c47a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	2300      	movs	r3, #0
 800c480:	2200      	movs	r2, #0
 800c482:	2100      	movs	r1, #0
 800c484:	f000 fca5 	bl	800cdd2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c488:	2300      	movs	r3, #0
}
 800c48a:	0018      	movs	r0, r3
 800c48c:	46bd      	mov	sp, r7
 800c48e:	b002      	add	sp, #8
 800c490:	bd80      	pop	{r7, pc}
	...

0800c494 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c498:	4914      	ldr	r1, [pc, #80]	@ (800c4ec <MX_USB_DEVICE_Init+0x58>)
 800c49a:	4b15      	ldr	r3, [pc, #84]	@ (800c4f0 <MX_USB_DEVICE_Init+0x5c>)
 800c49c:	2200      	movs	r2, #0
 800c49e:	0018      	movs	r0, r3
 800c4a0:	f7fe fdec 	bl	800b07c <USBD_Init>
 800c4a4:	1e03      	subs	r3, r0, #0
 800c4a6:	d001      	beq.n	800c4ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c4a8:	f7f6 fb66 	bl	8002b78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c4ac:	4a11      	ldr	r2, [pc, #68]	@ (800c4f4 <MX_USB_DEVICE_Init+0x60>)
 800c4ae:	4b10      	ldr	r3, [pc, #64]	@ (800c4f0 <MX_USB_DEVICE_Init+0x5c>)
 800c4b0:	0011      	movs	r1, r2
 800c4b2:	0018      	movs	r0, r3
 800c4b4:	f7fe fe13 	bl	800b0de <USBD_RegisterClass>
 800c4b8:	1e03      	subs	r3, r0, #0
 800c4ba:	d001      	beq.n	800c4c0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800c4bc:	f7f6 fb5c 	bl	8002b78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c4c0:	4a0d      	ldr	r2, [pc, #52]	@ (800c4f8 <MX_USB_DEVICE_Init+0x64>)
 800c4c2:	4b0b      	ldr	r3, [pc, #44]	@ (800c4f0 <MX_USB_DEVICE_Init+0x5c>)
 800c4c4:	0011      	movs	r1, r2
 800c4c6:	0018      	movs	r0, r3
 800c4c8:	f7fe fd28 	bl	800af1c <USBD_CDC_RegisterInterface>
 800c4cc:	1e03      	subs	r3, r0, #0
 800c4ce:	d001      	beq.n	800c4d4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800c4d0:	f7f6 fb52 	bl	8002b78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c4d4:	4b06      	ldr	r3, [pc, #24]	@ (800c4f0 <MX_USB_DEVICE_Init+0x5c>)
 800c4d6:	0018      	movs	r0, r3
 800c4d8:	f7fe fe21 	bl	800b11e <USBD_Start>
 800c4dc:	1e03      	subs	r3, r0, #0
 800c4de:	d001      	beq.n	800c4e4 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800c4e0:	f7f6 fb4a 	bl	8002b78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c4e4:	46c0      	nop			@ (mov r8, r8)
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	46c0      	nop			@ (mov r8, r8)
 800c4ec:	20000144 	.word	0x20000144
 800c4f0:	200009d8 	.word	0x200009d8
 800c4f4:	20000030 	.word	0x20000030
 800c4f8:	20000134 	.word	0x20000134

0800c4fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c500:	4907      	ldr	r1, [pc, #28]	@ (800c520 <CDC_Init_FS+0x24>)
 800c502:	4b08      	ldr	r3, [pc, #32]	@ (800c524 <CDC_Init_FS+0x28>)
 800c504:	2200      	movs	r2, #0
 800c506:	0018      	movs	r0, r3
 800c508:	f7fe fd23 	bl	800af52 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c50c:	4a06      	ldr	r2, [pc, #24]	@ (800c528 <CDC_Init_FS+0x2c>)
 800c50e:	4b05      	ldr	r3, [pc, #20]	@ (800c524 <CDC_Init_FS+0x28>)
 800c510:	0011      	movs	r1, r2
 800c512:	0018      	movs	r0, r3
 800c514:	f7fe fd39 	bl	800af8a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c518:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c51a:	0018      	movs	r0, r3
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	2000109c 	.word	0x2000109c
 800c524:	200009d8 	.word	0x200009d8
 800c528:	20000c9c 	.word	0x20000c9c

0800c52c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c530:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c532:	0018      	movs	r0, r3
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6039      	str	r1, [r7, #0]
 800c540:	0011      	movs	r1, r2
 800c542:	1dfb      	adds	r3, r7, #7
 800c544:	1c02      	adds	r2, r0, #0
 800c546:	701a      	strb	r2, [r3, #0]
 800c548:	1d3b      	adds	r3, r7, #4
 800c54a:	1c0a      	adds	r2, r1, #0
 800c54c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c54e:	1dfb      	adds	r3, r7, #7
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	2b23      	cmp	r3, #35	@ 0x23
 800c554:	d804      	bhi.n	800c560 <CDC_Control_FS+0x28>
 800c556:	009a      	lsls	r2, r3, #2
 800c558:	4b04      	ldr	r3, [pc, #16]	@ (800c56c <CDC_Control_FS+0x34>)
 800c55a:	18d3      	adds	r3, r2, r3
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c560:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 800c562:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c564:	0018      	movs	r0, r3
 800c566:	46bd      	mov	sp, r7
 800c568:	b002      	add	sp, #8
 800c56a:	bd80      	pop	{r7, pc}
 800c56c:	0800ffd4 	.word	0x0800ffd4

0800c570 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c57a:	687a      	ldr	r2, [r7, #4]
 800c57c:	4b06      	ldr	r3, [pc, #24]	@ (800c598 <CDC_Receive_FS+0x28>)
 800c57e:	0011      	movs	r1, r2
 800c580:	0018      	movs	r0, r3
 800c582:	f7fe fd02 	bl	800af8a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c586:	4b04      	ldr	r3, [pc, #16]	@ (800c598 <CDC_Receive_FS+0x28>)
 800c588:	0018      	movs	r0, r3
 800c58a:	f7fe fd49 	bl	800b020 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c58e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c590:	0018      	movs	r0, r3
 800c592:	46bd      	mov	sp, r7
 800c594:	b002      	add	sp, #8
 800c596:	bd80      	pop	{r7, pc}
 800c598:	200009d8 	.word	0x200009d8

0800c59c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c59c:	b5b0      	push	{r4, r5, r7, lr}
 800c59e:	b084      	sub	sp, #16
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	000a      	movs	r2, r1
 800c5a6:	1cbb      	adds	r3, r7, #2
 800c5a8:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800c5aa:	230f      	movs	r3, #15
 800c5ac:	18fb      	adds	r3, r7, r3
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c5b2:	4a11      	ldr	r2, [pc, #68]	@ (800c5f8 <CDC_Transmit_FS+0x5c>)
 800c5b4:	23ae      	movs	r3, #174	@ 0xae
 800c5b6:	009b      	lsls	r3, r3, #2
 800c5b8:	58d3      	ldr	r3, [r2, r3]
 800c5ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c5bc:	68ba      	ldr	r2, [r7, #8]
 800c5be:	2385      	movs	r3, #133	@ 0x85
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	58d3      	ldr	r3, [r2, r3]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d001      	beq.n	800c5cc <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	e010      	b.n	800c5ee <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c5cc:	1cbb      	adds	r3, r7, #2
 800c5ce:	881a      	ldrh	r2, [r3, #0]
 800c5d0:	6879      	ldr	r1, [r7, #4]
 800c5d2:	4b09      	ldr	r3, [pc, #36]	@ (800c5f8 <CDC_Transmit_FS+0x5c>)
 800c5d4:	0018      	movs	r0, r3
 800c5d6:	f7fe fcbc 	bl	800af52 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c5da:	250f      	movs	r5, #15
 800c5dc:	197c      	adds	r4, r7, r5
 800c5de:	4b06      	ldr	r3, [pc, #24]	@ (800c5f8 <CDC_Transmit_FS+0x5c>)
 800c5e0:	0018      	movs	r0, r3
 800c5e2:	f7fe fce6 	bl	800afb2 <USBD_CDC_TransmitPacket>
 800c5e6:	0003      	movs	r3, r0
 800c5e8:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800c5ea:	197b      	adds	r3, r7, r5
 800c5ec:	781b      	ldrb	r3, [r3, #0]
}
 800c5ee:	0018      	movs	r0, r3
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	b004      	add	sp, #16
 800c5f4:	bdb0      	pop	{r4, r5, r7, pc}
 800c5f6:	46c0      	nop			@ (mov r8, r8)
 800c5f8:	200009d8 	.word	0x200009d8

0800c5fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	0002      	movs	r2, r0
 800c604:	6039      	str	r1, [r7, #0]
 800c606:	1dfb      	adds	r3, r7, #7
 800c608:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	2212      	movs	r2, #18
 800c60e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c610:	4b02      	ldr	r3, [pc, #8]	@ (800c61c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c612:	0018      	movs	r0, r3
 800c614:	46bd      	mov	sp, r7
 800c616:	b002      	add	sp, #8
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	46c0      	nop			@ (mov r8, r8)
 800c61c:	20000160 	.word	0x20000160

0800c620 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0
 800c626:	0002      	movs	r2, r0
 800c628:	6039      	str	r1, [r7, #0]
 800c62a:	1dfb      	adds	r3, r7, #7
 800c62c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	2204      	movs	r2, #4
 800c632:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c634:	4b02      	ldr	r3, [pc, #8]	@ (800c640 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c636:	0018      	movs	r0, r3
 800c638:	46bd      	mov	sp, r7
 800c63a:	b002      	add	sp, #8
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	46c0      	nop			@ (mov r8, r8)
 800c640:	20000174 	.word	0x20000174

0800c644 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
 800c64a:	0002      	movs	r2, r0
 800c64c:	6039      	str	r1, [r7, #0]
 800c64e:	1dfb      	adds	r3, r7, #7
 800c650:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800c652:	1dfb      	adds	r3, r7, #7
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d106      	bne.n	800c668 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c65a:	683a      	ldr	r2, [r7, #0]
 800c65c:	4908      	ldr	r1, [pc, #32]	@ (800c680 <USBD_FS_ProductStrDescriptor+0x3c>)
 800c65e:	4b09      	ldr	r3, [pc, #36]	@ (800c684 <USBD_FS_ProductStrDescriptor+0x40>)
 800c660:	0018      	movs	r0, r3
 800c662:	f7ff fe19 	bl	800c298 <USBD_GetString>
 800c666:	e005      	b.n	800c674 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c668:	683a      	ldr	r2, [r7, #0]
 800c66a:	4905      	ldr	r1, [pc, #20]	@ (800c680 <USBD_FS_ProductStrDescriptor+0x3c>)
 800c66c:	4b05      	ldr	r3, [pc, #20]	@ (800c684 <USBD_FS_ProductStrDescriptor+0x40>)
 800c66e:	0018      	movs	r0, r3
 800c670:	f7ff fe12 	bl	800c298 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c674:	4b02      	ldr	r3, [pc, #8]	@ (800c680 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800c676:	0018      	movs	r0, r3
 800c678:	46bd      	mov	sp, r7
 800c67a:	b002      	add	sp, #8
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	46c0      	nop			@ (mov r8, r8)
 800c680:	2000149c 	.word	0x2000149c
 800c684:	0800feb4 	.word	0x0800feb4

0800c688 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	0002      	movs	r2, r0
 800c690:	6039      	str	r1, [r7, #0]
 800c692:	1dfb      	adds	r3, r7, #7
 800c694:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c696:	683a      	ldr	r2, [r7, #0]
 800c698:	4904      	ldr	r1, [pc, #16]	@ (800c6ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c69a:	4b05      	ldr	r3, [pc, #20]	@ (800c6b0 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800c69c:	0018      	movs	r0, r3
 800c69e:	f7ff fdfb 	bl	800c298 <USBD_GetString>
  return USBD_StrDesc;
 800c6a2:	4b02      	ldr	r3, [pc, #8]	@ (800c6ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800c6a4:	0018      	movs	r0, r3
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	b002      	add	sp, #8
 800c6aa:	bd80      	pop	{r7, pc}
 800c6ac:	2000149c 	.word	0x2000149c
 800c6b0:	0800fecc 	.word	0x0800fecc

0800c6b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	0002      	movs	r2, r0
 800c6bc:	6039      	str	r1, [r7, #0]
 800c6be:	1dfb      	adds	r3, r7, #7
 800c6c0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	221a      	movs	r2, #26
 800c6c6:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c6c8:	f000 f84c 	bl	800c764 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c6cc:	4b02      	ldr	r3, [pc, #8]	@ (800c6d8 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800c6ce:	0018      	movs	r0, r3
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	b002      	add	sp, #8
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	46c0      	nop			@ (mov r8, r8)
 800c6d8:	20000178 	.word	0x20000178

0800c6dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	0002      	movs	r2, r0
 800c6e4:	6039      	str	r1, [r7, #0]
 800c6e6:	1dfb      	adds	r3, r7, #7
 800c6e8:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800c6ea:	1dfb      	adds	r3, r7, #7
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d106      	bne.n	800c700 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c6f2:	683a      	ldr	r2, [r7, #0]
 800c6f4:	4908      	ldr	r1, [pc, #32]	@ (800c718 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800c6f6:	4b09      	ldr	r3, [pc, #36]	@ (800c71c <USBD_FS_ConfigStrDescriptor+0x40>)
 800c6f8:	0018      	movs	r0, r3
 800c6fa:	f7ff fdcd 	bl	800c298 <USBD_GetString>
 800c6fe:	e005      	b.n	800c70c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c700:	683a      	ldr	r2, [r7, #0]
 800c702:	4905      	ldr	r1, [pc, #20]	@ (800c718 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800c704:	4b05      	ldr	r3, [pc, #20]	@ (800c71c <USBD_FS_ConfigStrDescriptor+0x40>)
 800c706:	0018      	movs	r0, r3
 800c708:	f7ff fdc6 	bl	800c298 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c70c:	4b02      	ldr	r3, [pc, #8]	@ (800c718 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800c70e:	0018      	movs	r0, r3
 800c710:	46bd      	mov	sp, r7
 800c712:	b002      	add	sp, #8
 800c714:	bd80      	pop	{r7, pc}
 800c716:	46c0      	nop			@ (mov r8, r8)
 800c718:	2000149c 	.word	0x2000149c
 800c71c:	0800fee0 	.word	0x0800fee0

0800c720 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b082      	sub	sp, #8
 800c724:	af00      	add	r7, sp, #0
 800c726:	0002      	movs	r2, r0
 800c728:	6039      	str	r1, [r7, #0]
 800c72a:	1dfb      	adds	r3, r7, #7
 800c72c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800c72e:	1dfb      	adds	r3, r7, #7
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d106      	bne.n	800c744 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c736:	683a      	ldr	r2, [r7, #0]
 800c738:	4908      	ldr	r1, [pc, #32]	@ (800c75c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800c73a:	4b09      	ldr	r3, [pc, #36]	@ (800c760 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800c73c:	0018      	movs	r0, r3
 800c73e:	f7ff fdab 	bl	800c298 <USBD_GetString>
 800c742:	e005      	b.n	800c750 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c744:	683a      	ldr	r2, [r7, #0]
 800c746:	4905      	ldr	r1, [pc, #20]	@ (800c75c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800c748:	4b05      	ldr	r3, [pc, #20]	@ (800c760 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800c74a:	0018      	movs	r0, r3
 800c74c:	f7ff fda4 	bl	800c298 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c750:	4b02      	ldr	r3, [pc, #8]	@ (800c75c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800c752:	0018      	movs	r0, r3
 800c754:	46bd      	mov	sp, r7
 800c756:	b002      	add	sp, #8
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	46c0      	nop			@ (mov r8, r8)
 800c75c:	2000149c 	.word	0x2000149c
 800c760:	0800feec 	.word	0x0800feec

0800c764 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c76a:	4b10      	ldr	r3, [pc, #64]	@ (800c7ac <Get_SerialNum+0x48>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c770:	4b0f      	ldr	r3, [pc, #60]	@ (800c7b0 <Get_SerialNum+0x4c>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c776:	4b0f      	ldr	r3, [pc, #60]	@ (800c7b4 <Get_SerialNum+0x50>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c77c:	68fa      	ldr	r2, [r7, #12]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	18d3      	adds	r3, r2, r3
 800c782:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d00b      	beq.n	800c7a2 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c78a:	490b      	ldr	r1, [pc, #44]	@ (800c7b8 <Get_SerialNum+0x54>)
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2208      	movs	r2, #8
 800c790:	0018      	movs	r0, r3
 800c792:	f000 f815 	bl	800c7c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c796:	4909      	ldr	r1, [pc, #36]	@ (800c7bc <Get_SerialNum+0x58>)
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	2204      	movs	r2, #4
 800c79c:	0018      	movs	r0, r3
 800c79e:	f000 f80f 	bl	800c7c0 <IntToUnicode>
  }
}
 800c7a2:	46c0      	nop			@ (mov r8, r8)
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	b004      	add	sp, #16
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	46c0      	nop			@ (mov r8, r8)
 800c7ac:	1ffff7ac 	.word	0x1ffff7ac
 800c7b0:	1ffff7b0 	.word	0x1ffff7b0
 800c7b4:	1ffff7b4 	.word	0x1ffff7b4
 800c7b8:	2000017a 	.word	0x2000017a
 800c7bc:	2000018a 	.word	0x2000018a

0800c7c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b086      	sub	sp, #24
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	60b9      	str	r1, [r7, #8]
 800c7ca:	1dfb      	adds	r3, r7, #7
 800c7cc:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800c7ce:	2117      	movs	r1, #23
 800c7d0:	187b      	adds	r3, r7, r1
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800c7d6:	187b      	adds	r3, r7, r1
 800c7d8:	2200      	movs	r2, #0
 800c7da:	701a      	strb	r2, [r3, #0]
 800c7dc:	e02f      	b.n	800c83e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	0f1b      	lsrs	r3, r3, #28
 800c7e2:	2b09      	cmp	r3, #9
 800c7e4:	d80d      	bhi.n	800c802 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	0f1b      	lsrs	r3, r3, #28
 800c7ea:	b2da      	uxtb	r2, r3
 800c7ec:	2317      	movs	r3, #23
 800c7ee:	18fb      	adds	r3, r7, r3
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	005b      	lsls	r3, r3, #1
 800c7f4:	0019      	movs	r1, r3
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	185b      	adds	r3, r3, r1
 800c7fa:	3230      	adds	r2, #48	@ 0x30
 800c7fc:	b2d2      	uxtb	r2, r2
 800c7fe:	701a      	strb	r2, [r3, #0]
 800c800:	e00c      	b.n	800c81c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	0f1b      	lsrs	r3, r3, #28
 800c806:	b2da      	uxtb	r2, r3
 800c808:	2317      	movs	r3, #23
 800c80a:	18fb      	adds	r3, r7, r3
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	005b      	lsls	r3, r3, #1
 800c810:	0019      	movs	r1, r3
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	185b      	adds	r3, r3, r1
 800c816:	3237      	adds	r2, #55	@ 0x37
 800c818:	b2d2      	uxtb	r2, r2
 800c81a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	011b      	lsls	r3, r3, #4
 800c820:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c822:	2117      	movs	r1, #23
 800c824:	187b      	adds	r3, r7, r1
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	005b      	lsls	r3, r3, #1
 800c82a:	3301      	adds	r3, #1
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	18d3      	adds	r3, r2, r3
 800c830:	2200      	movs	r2, #0
 800c832:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c834:	187b      	adds	r3, r7, r1
 800c836:	781a      	ldrb	r2, [r3, #0]
 800c838:	187b      	adds	r3, r7, r1
 800c83a:	3201      	adds	r2, #1
 800c83c:	701a      	strb	r2, [r3, #0]
 800c83e:	2317      	movs	r3, #23
 800c840:	18fa      	adds	r2, r7, r3
 800c842:	1dfb      	adds	r3, r7, #7
 800c844:	7812      	ldrb	r2, [r2, #0]
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	429a      	cmp	r2, r3
 800c84a:	d3c8      	bcc.n	800c7de <IntToUnicode+0x1e>
  }
}
 800c84c:	46c0      	nop			@ (mov r8, r8)
 800c84e:	46c0      	nop			@ (mov r8, r8)
 800c850:	46bd      	mov	sp, r7
 800c852:	b006      	add	sp, #24
 800c854:	bd80      	pop	{r7, pc}
	...

0800c858 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4a0e      	ldr	r2, [pc, #56]	@ (800c8a0 <HAL_PCD_MspInit+0x48>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d115      	bne.n	800c896 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c86a:	4b0e      	ldr	r3, [pc, #56]	@ (800c8a4 <HAL_PCD_MspInit+0x4c>)
 800c86c:	69da      	ldr	r2, [r3, #28]
 800c86e:	4b0d      	ldr	r3, [pc, #52]	@ (800c8a4 <HAL_PCD_MspInit+0x4c>)
 800c870:	2180      	movs	r1, #128	@ 0x80
 800c872:	0409      	lsls	r1, r1, #16
 800c874:	430a      	orrs	r2, r1
 800c876:	61da      	str	r2, [r3, #28]
 800c878:	4b0a      	ldr	r3, [pc, #40]	@ (800c8a4 <HAL_PCD_MspInit+0x4c>)
 800c87a:	69da      	ldr	r2, [r3, #28]
 800c87c:	2380      	movs	r3, #128	@ 0x80
 800c87e:	041b      	lsls	r3, r3, #16
 800c880:	4013      	ands	r3, r2
 800c882:	60fb      	str	r3, [r7, #12]
 800c884:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800c886:	2200      	movs	r2, #0
 800c888:	2100      	movs	r1, #0
 800c88a:	201f      	movs	r0, #31
 800c88c:	f7f7 f802 	bl	8003894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c890:	201f      	movs	r0, #31
 800c892:	f7f7 f814 	bl	80038be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c896:	46c0      	nop			@ (mov r8, r8)
 800c898:	46bd      	mov	sp, r7
 800c89a:	b004      	add	sp, #16
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	46c0      	nop			@ (mov r8, r8)
 800c8a0:	40005c00 	.word	0x40005c00
 800c8a4:	40021000 	.word	0x40021000

0800c8a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b082      	sub	sp, #8
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	23b6      	movs	r3, #182	@ 0xb6
 800c8b4:	009b      	lsls	r3, r3, #2
 800c8b6:	58d2      	ldr	r2, [r2, r3]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	21a6      	movs	r1, #166	@ 0xa6
 800c8bc:	0089      	lsls	r1, r1, #2
 800c8be:	468c      	mov	ip, r1
 800c8c0:	4463      	add	r3, ip
 800c8c2:	0019      	movs	r1, r3
 800c8c4:	0010      	movs	r0, r2
 800c8c6:	f7fe fc7d 	bl	800b1c4 <USBD_LL_SetupStage>
}
 800c8ca:	46c0      	nop			@ (mov r8, r8)
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	b002      	add	sp, #8
 800c8d0:	bd80      	pop	{r7, pc}

0800c8d2 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8d2:	b590      	push	{r4, r7, lr}
 800c8d4:	b083      	sub	sp, #12
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
 800c8da:	000a      	movs	r2, r1
 800c8dc:	1cfb      	adds	r3, r7, #3
 800c8de:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	23b6      	movs	r3, #182	@ 0xb6
 800c8e4:	009b      	lsls	r3, r3, #2
 800c8e6:	58d4      	ldr	r4, [r2, r3]
 800c8e8:	1cfb      	adds	r3, r7, #3
 800c8ea:	781a      	ldrb	r2, [r3, #0]
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	23b2      	movs	r3, #178	@ 0xb2
 800c8f0:	0059      	lsls	r1, r3, #1
 800c8f2:	0013      	movs	r3, r2
 800c8f4:	009b      	lsls	r3, r3, #2
 800c8f6:	189b      	adds	r3, r3, r2
 800c8f8:	00db      	lsls	r3, r3, #3
 800c8fa:	18c3      	adds	r3, r0, r3
 800c8fc:	185b      	adds	r3, r3, r1
 800c8fe:	681a      	ldr	r2, [r3, #0]
 800c900:	1cfb      	adds	r3, r7, #3
 800c902:	781b      	ldrb	r3, [r3, #0]
 800c904:	0019      	movs	r1, r3
 800c906:	0020      	movs	r0, r4
 800c908:	f7fe fcba 	bl	800b280 <USBD_LL_DataOutStage>
}
 800c90c:	46c0      	nop			@ (mov r8, r8)
 800c90e:	46bd      	mov	sp, r7
 800c910:	b003      	add	sp, #12
 800c912:	bd90      	pop	{r4, r7, pc}

0800c914 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b082      	sub	sp, #8
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	000a      	movs	r2, r1
 800c91e:	1cfb      	adds	r3, r7, #3
 800c920:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	23b6      	movs	r3, #182	@ 0xb6
 800c926:	009b      	lsls	r3, r3, #2
 800c928:	58d0      	ldr	r0, [r2, r3]
 800c92a:	1cfb      	adds	r3, r7, #3
 800c92c:	781a      	ldrb	r2, [r3, #0]
 800c92e:	6879      	ldr	r1, [r7, #4]
 800c930:	0013      	movs	r3, r2
 800c932:	009b      	lsls	r3, r3, #2
 800c934:	189b      	adds	r3, r3, r2
 800c936:	00db      	lsls	r3, r3, #3
 800c938:	18cb      	adds	r3, r1, r3
 800c93a:	3324      	adds	r3, #36	@ 0x24
 800c93c:	681a      	ldr	r2, [r3, #0]
 800c93e:	1cfb      	adds	r3, r7, #3
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	0019      	movs	r1, r3
 800c944:	f7fe fd1e 	bl	800b384 <USBD_LL_DataInStage>
}
 800c948:	46c0      	nop			@ (mov r8, r8)
 800c94a:	46bd      	mov	sp, r7
 800c94c:	b002      	add	sp, #8
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	23b6      	movs	r3, #182	@ 0xb6
 800c95c:	009b      	lsls	r3, r3, #2
 800c95e:	58d3      	ldr	r3, [r2, r3]
 800c960:	0018      	movs	r0, r3
 800c962:	f7fe fe55 	bl	800b610 <USBD_LL_SOF>
}
 800c966:	46c0      	nop			@ (mov r8, r8)
 800c968:	46bd      	mov	sp, r7
 800c96a:	b002      	add	sp, #8
 800c96c:	bd80      	pop	{r7, pc}

0800c96e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c96e:	b580      	push	{r7, lr}
 800c970:	b084      	sub	sp, #16
 800c972:	af00      	add	r7, sp, #0
 800c974:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c976:	230f      	movs	r3, #15
 800c978:	18fb      	adds	r3, r7, r3
 800c97a:	2201      	movs	r2, #1
 800c97c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	795b      	ldrb	r3, [r3, #5]
 800c982:	2b02      	cmp	r3, #2
 800c984:	d001      	beq.n	800c98a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800c986:	f7f6 f8f7 	bl	8002b78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	23b6      	movs	r3, #182	@ 0xb6
 800c98e:	009b      	lsls	r3, r3, #2
 800c990:	58d2      	ldr	r2, [r2, r3]
 800c992:	230f      	movs	r3, #15
 800c994:	18fb      	adds	r3, r7, r3
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	0019      	movs	r1, r3
 800c99a:	0010      	movs	r0, r2
 800c99c:	f7fe fdf7 	bl	800b58e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	23b6      	movs	r3, #182	@ 0xb6
 800c9a4:	009b      	lsls	r3, r3, #2
 800c9a6:	58d3      	ldr	r3, [r2, r3]
 800c9a8:	0018      	movs	r0, r3
 800c9aa:	f7fe fda8 	bl	800b4fe <USBD_LL_Reset>
}
 800c9ae:	46c0      	nop			@ (mov r8, r8)
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	b004      	add	sp, #16
 800c9b4:	bd80      	pop	{r7, pc}
	...

0800c9b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b082      	sub	sp, #8
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	23b6      	movs	r3, #182	@ 0xb6
 800c9c4:	009b      	lsls	r3, r3, #2
 800c9c6:	58d3      	ldr	r3, [r2, r3]
 800c9c8:	0018      	movs	r0, r3
 800c9ca:	f7fe fdf1 	bl	800b5b0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	7a5b      	ldrb	r3, [r3, #9]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d005      	beq.n	800c9e2 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9d6:	4b05      	ldr	r3, [pc, #20]	@ (800c9ec <HAL_PCD_SuspendCallback+0x34>)
 800c9d8:	691a      	ldr	r2, [r3, #16]
 800c9da:	4b04      	ldr	r3, [pc, #16]	@ (800c9ec <HAL_PCD_SuspendCallback+0x34>)
 800c9dc:	2106      	movs	r1, #6
 800c9de:	430a      	orrs	r2, r1
 800c9e0:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800c9e2:	46c0      	nop			@ (mov r8, r8)
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	b002      	add	sp, #8
 800c9e8:	bd80      	pop	{r7, pc}
 800c9ea:	46c0      	nop			@ (mov r8, r8)
 800c9ec:	e000ed00 	.word	0xe000ed00

0800c9f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	7a5b      	ldrb	r3, [r3, #9]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d007      	beq.n	800ca10 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca00:	4b09      	ldr	r3, [pc, #36]	@ (800ca28 <HAL_PCD_ResumeCallback+0x38>)
 800ca02:	691a      	ldr	r2, [r3, #16]
 800ca04:	4b08      	ldr	r3, [pc, #32]	@ (800ca28 <HAL_PCD_ResumeCallback+0x38>)
 800ca06:	2106      	movs	r1, #6
 800ca08:	438a      	bics	r2, r1
 800ca0a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800ca0c:	f000 fa42 	bl	800ce94 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	23b6      	movs	r3, #182	@ 0xb6
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	58d3      	ldr	r3, [r2, r3]
 800ca18:	0018      	movs	r0, r3
 800ca1a:	f7fe fde1 	bl	800b5e0 <USBD_LL_Resume>
}
 800ca1e:	46c0      	nop			@ (mov r8, r8)
 800ca20:	46bd      	mov	sp, r7
 800ca22:	b002      	add	sp, #8
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	46c0      	nop			@ (mov r8, r8)
 800ca28:	e000ed00 	.word	0xe000ed00

0800ca2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b082      	sub	sp, #8
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ca34:	4a2d      	ldr	r2, [pc, #180]	@ (800caec <USBD_LL_Init+0xc0>)
 800ca36:	23b6      	movs	r3, #182	@ 0xb6
 800ca38:	009b      	lsls	r3, r3, #2
 800ca3a:	6879      	ldr	r1, [r7, #4]
 800ca3c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	23b0      	movs	r3, #176	@ 0xb0
 800ca42:	009b      	lsls	r3, r3, #2
 800ca44:	4929      	ldr	r1, [pc, #164]	@ (800caec <USBD_LL_Init+0xc0>)
 800ca46:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800ca48:	4b28      	ldr	r3, [pc, #160]	@ (800caec <USBD_LL_Init+0xc0>)
 800ca4a:	4a29      	ldr	r2, [pc, #164]	@ (800caf0 <USBD_LL_Init+0xc4>)
 800ca4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ca4e:	4b27      	ldr	r3, [pc, #156]	@ (800caec <USBD_LL_Init+0xc0>)
 800ca50:	2208      	movs	r2, #8
 800ca52:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ca54:	4b25      	ldr	r3, [pc, #148]	@ (800caec <USBD_LL_Init+0xc0>)
 800ca56:	2202      	movs	r2, #2
 800ca58:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ca5a:	4b24      	ldr	r3, [pc, #144]	@ (800caec <USBD_LL_Init+0xc0>)
 800ca5c:	2202      	movs	r2, #2
 800ca5e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ca60:	4b22      	ldr	r3, [pc, #136]	@ (800caec <USBD_LL_Init+0xc0>)
 800ca62:	2200      	movs	r2, #0
 800ca64:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ca66:	4b21      	ldr	r3, [pc, #132]	@ (800caec <USBD_LL_Init+0xc0>)
 800ca68:	2200      	movs	r2, #0
 800ca6a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ca6c:	4b1f      	ldr	r3, [pc, #124]	@ (800caec <USBD_LL_Init+0xc0>)
 800ca6e:	2200      	movs	r2, #0
 800ca70:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ca72:	4b1e      	ldr	r3, [pc, #120]	@ (800caec <USBD_LL_Init+0xc0>)
 800ca74:	0018      	movs	r0, r3
 800ca76:	f7f7 fb23 	bl	80040c0 <HAL_PCD_Init>
 800ca7a:	1e03      	subs	r3, r0, #0
 800ca7c:	d001      	beq.n	800ca82 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800ca7e:	f7f6 f87b 	bl	8002b78 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	23b0      	movs	r3, #176	@ 0xb0
 800ca86:	009b      	lsls	r3, r3, #2
 800ca88:	58d0      	ldr	r0, [r2, r3]
 800ca8a:	2318      	movs	r3, #24
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	2100      	movs	r1, #0
 800ca90:	f7f9 f8d4 	bl	8005c3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	23b0      	movs	r3, #176	@ 0xb0
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	58d0      	ldr	r0, [r2, r3]
 800ca9c:	2358      	movs	r3, #88	@ 0x58
 800ca9e:	2200      	movs	r2, #0
 800caa0:	2180      	movs	r1, #128	@ 0x80
 800caa2:	f7f9 f8cb 	bl	8005c3c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800caa6:	687a      	ldr	r2, [r7, #4]
 800caa8:	23b0      	movs	r3, #176	@ 0xb0
 800caaa:	009b      	lsls	r3, r3, #2
 800caac:	58d0      	ldr	r0, [r2, r3]
 800caae:	23c0      	movs	r3, #192	@ 0xc0
 800cab0:	2200      	movs	r2, #0
 800cab2:	2181      	movs	r1, #129	@ 0x81
 800cab4:	f7f9 f8c2 	bl	8005c3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	23b0      	movs	r3, #176	@ 0xb0
 800cabc:	009b      	lsls	r3, r3, #2
 800cabe:	58d0      	ldr	r0, [r2, r3]
 800cac0:	2388      	movs	r3, #136	@ 0x88
 800cac2:	005b      	lsls	r3, r3, #1
 800cac4:	2200      	movs	r2, #0
 800cac6:	2101      	movs	r1, #1
 800cac8:	f7f9 f8b8 	bl	8005c3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cacc:	687a      	ldr	r2, [r7, #4]
 800cace:	23b0      	movs	r3, #176	@ 0xb0
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	58d0      	ldr	r0, [r2, r3]
 800cad4:	2380      	movs	r3, #128	@ 0x80
 800cad6:	005b      	lsls	r3, r3, #1
 800cad8:	2200      	movs	r2, #0
 800cada:	2182      	movs	r1, #130	@ 0x82
 800cadc:	f7f9 f8ae 	bl	8005c3c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cae0:	2300      	movs	r3, #0
}
 800cae2:	0018      	movs	r0, r3
 800cae4:	46bd      	mov	sp, r7
 800cae6:	b002      	add	sp, #8
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	46c0      	nop			@ (mov r8, r8)
 800caec:	2000169c 	.word	0x2000169c
 800caf0:	40005c00 	.word	0x40005c00

0800caf4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800caf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800caf6:	b085      	sub	sp, #20
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cafc:	210f      	movs	r1, #15
 800cafe:	187b      	adds	r3, r7, r1
 800cb00:	2200      	movs	r2, #0
 800cb02:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb04:	260e      	movs	r6, #14
 800cb06:	19bb      	adds	r3, r7, r6
 800cb08:	2200      	movs	r2, #0
 800cb0a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	23b0      	movs	r3, #176	@ 0xb0
 800cb10:	009b      	lsls	r3, r3, #2
 800cb12:	58d3      	ldr	r3, [r2, r3]
 800cb14:	000d      	movs	r5, r1
 800cb16:	187c      	adds	r4, r7, r1
 800cb18:	0018      	movs	r0, r3
 800cb1a:	f7f7 fbc5 	bl	80042a8 <HAL_PCD_Start>
 800cb1e:	0003      	movs	r3, r0
 800cb20:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb22:	19bc      	adds	r4, r7, r6
 800cb24:	197b      	adds	r3, r7, r5
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	0018      	movs	r0, r3
 800cb2a:	f000 f9ba 	bl	800cea2 <USBD_Get_USB_Status>
 800cb2e:	0003      	movs	r3, r0
 800cb30:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cb32:	19bb      	adds	r3, r7, r6
 800cb34:	781b      	ldrb	r3, [r3, #0]
}
 800cb36:	0018      	movs	r0, r3
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	b005      	add	sp, #20
 800cb3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cb3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb40:	b085      	sub	sp, #20
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	6078      	str	r0, [r7, #4]
 800cb46:	000c      	movs	r4, r1
 800cb48:	0010      	movs	r0, r2
 800cb4a:	0019      	movs	r1, r3
 800cb4c:	1cfb      	adds	r3, r7, #3
 800cb4e:	1c22      	adds	r2, r4, #0
 800cb50:	701a      	strb	r2, [r3, #0]
 800cb52:	1cbb      	adds	r3, r7, #2
 800cb54:	1c02      	adds	r2, r0, #0
 800cb56:	701a      	strb	r2, [r3, #0]
 800cb58:	003b      	movs	r3, r7
 800cb5a:	1c0a      	adds	r2, r1, #0
 800cb5c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb5e:	260f      	movs	r6, #15
 800cb60:	19bb      	adds	r3, r7, r6
 800cb62:	2200      	movs	r2, #0
 800cb64:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb66:	250e      	movs	r5, #14
 800cb68:	197b      	adds	r3, r7, r5
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	23b0      	movs	r3, #176	@ 0xb0
 800cb72:	009b      	lsls	r3, r3, #2
 800cb74:	58d0      	ldr	r0, [r2, r3]
 800cb76:	19bc      	adds	r4, r7, r6
 800cb78:	1cbb      	adds	r3, r7, #2
 800cb7a:	781d      	ldrb	r5, [r3, #0]
 800cb7c:	003b      	movs	r3, r7
 800cb7e:	881a      	ldrh	r2, [r3, #0]
 800cb80:	1cfb      	adds	r3, r7, #3
 800cb82:	7819      	ldrb	r1, [r3, #0]
 800cb84:	002b      	movs	r3, r5
 800cb86:	f7f7 fd23 	bl	80045d0 <HAL_PCD_EP_Open>
 800cb8a:	0003      	movs	r3, r0
 800cb8c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb8e:	250e      	movs	r5, #14
 800cb90:	197c      	adds	r4, r7, r5
 800cb92:	19bb      	adds	r3, r7, r6
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	0018      	movs	r0, r3
 800cb98:	f000 f983 	bl	800cea2 <USBD_Get_USB_Status>
 800cb9c:	0003      	movs	r3, r0
 800cb9e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cba0:	197b      	adds	r3, r7, r5
 800cba2:	781b      	ldrb	r3, [r3, #0]
}
 800cba4:	0018      	movs	r0, r3
 800cba6:	46bd      	mov	sp, r7
 800cba8:	b005      	add	sp, #20
 800cbaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cbac <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbae:	b085      	sub	sp, #20
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	000a      	movs	r2, r1
 800cbb6:	1cfb      	adds	r3, r7, #3
 800cbb8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbba:	210f      	movs	r1, #15
 800cbbc:	187b      	adds	r3, r7, r1
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbc2:	260e      	movs	r6, #14
 800cbc4:	19bb      	adds	r3, r7, r6
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cbca:	687a      	ldr	r2, [r7, #4]
 800cbcc:	23b0      	movs	r3, #176	@ 0xb0
 800cbce:	009b      	lsls	r3, r3, #2
 800cbd0:	58d2      	ldr	r2, [r2, r3]
 800cbd2:	000d      	movs	r5, r1
 800cbd4:	187c      	adds	r4, r7, r1
 800cbd6:	1cfb      	adds	r3, r7, #3
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	0019      	movs	r1, r3
 800cbdc:	0010      	movs	r0, r2
 800cbde:	f7f7 fd66 	bl	80046ae <HAL_PCD_EP_Close>
 800cbe2:	0003      	movs	r3, r0
 800cbe4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbe6:	19bc      	adds	r4, r7, r6
 800cbe8:	197b      	adds	r3, r7, r5
 800cbea:	781b      	ldrb	r3, [r3, #0]
 800cbec:	0018      	movs	r0, r3
 800cbee:	f000 f958 	bl	800cea2 <USBD_Get_USB_Status>
 800cbf2:	0003      	movs	r3, r0
 800cbf4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cbf6:	19bb      	adds	r3, r7, r6
 800cbf8:	781b      	ldrb	r3, [r3, #0]
}
 800cbfa:	0018      	movs	r0, r3
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	b005      	add	sp, #20
 800cc00:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cc02 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc02:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc04:	b085      	sub	sp, #20
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	6078      	str	r0, [r7, #4]
 800cc0a:	000a      	movs	r2, r1
 800cc0c:	1cfb      	adds	r3, r7, #3
 800cc0e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc10:	210f      	movs	r1, #15
 800cc12:	187b      	adds	r3, r7, r1
 800cc14:	2200      	movs	r2, #0
 800cc16:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc18:	260e      	movs	r6, #14
 800cc1a:	19bb      	adds	r3, r7, r6
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	23b0      	movs	r3, #176	@ 0xb0
 800cc24:	009b      	lsls	r3, r3, #2
 800cc26:	58d2      	ldr	r2, [r2, r3]
 800cc28:	000d      	movs	r5, r1
 800cc2a:	187c      	adds	r4, r7, r1
 800cc2c:	1cfb      	adds	r3, r7, #3
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	0019      	movs	r1, r3
 800cc32:	0010      	movs	r0, r2
 800cc34:	f7f7 fe18 	bl	8004868 <HAL_PCD_EP_SetStall>
 800cc38:	0003      	movs	r3, r0
 800cc3a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc3c:	19bc      	adds	r4, r7, r6
 800cc3e:	197b      	adds	r3, r7, r5
 800cc40:	781b      	ldrb	r3, [r3, #0]
 800cc42:	0018      	movs	r0, r3
 800cc44:	f000 f92d 	bl	800cea2 <USBD_Get_USB_Status>
 800cc48:	0003      	movs	r3, r0
 800cc4a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cc4c:	19bb      	adds	r3, r7, r6
 800cc4e:	781b      	ldrb	r3, [r3, #0]
}
 800cc50:	0018      	movs	r0, r3
 800cc52:	46bd      	mov	sp, r7
 800cc54:	b005      	add	sp, #20
 800cc56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cc58 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc5a:	b085      	sub	sp, #20
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	000a      	movs	r2, r1
 800cc62:	1cfb      	adds	r3, r7, #3
 800cc64:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc66:	210f      	movs	r1, #15
 800cc68:	187b      	adds	r3, r7, r1
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc6e:	260e      	movs	r6, #14
 800cc70:	19bb      	adds	r3, r7, r6
 800cc72:	2200      	movs	r2, #0
 800cc74:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cc76:	687a      	ldr	r2, [r7, #4]
 800cc78:	23b0      	movs	r3, #176	@ 0xb0
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	58d2      	ldr	r2, [r2, r3]
 800cc7e:	000d      	movs	r5, r1
 800cc80:	187c      	adds	r4, r7, r1
 800cc82:	1cfb      	adds	r3, r7, #3
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	0019      	movs	r1, r3
 800cc88:	0010      	movs	r0, r2
 800cc8a:	f7f7 fe49 	bl	8004920 <HAL_PCD_EP_ClrStall>
 800cc8e:	0003      	movs	r3, r0
 800cc90:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc92:	19bc      	adds	r4, r7, r6
 800cc94:	197b      	adds	r3, r7, r5
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	0018      	movs	r0, r3
 800cc9a:	f000 f902 	bl	800cea2 <USBD_Get_USB_Status>
 800cc9e:	0003      	movs	r3, r0
 800cca0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cca2:	19bb      	adds	r3, r7, r6
 800cca4:	781b      	ldrb	r3, [r3, #0]
}
 800cca6:	0018      	movs	r0, r3
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	b005      	add	sp, #20
 800ccac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ccae <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccae:	b580      	push	{r7, lr}
 800ccb0:	b084      	sub	sp, #16
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	6078      	str	r0, [r7, #4]
 800ccb6:	000a      	movs	r2, r1
 800ccb8:	1cfb      	adds	r3, r7, #3
 800ccba:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ccbc:	687a      	ldr	r2, [r7, #4]
 800ccbe:	23b0      	movs	r3, #176	@ 0xb0
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	58d3      	ldr	r3, [r2, r3]
 800ccc4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ccc6:	1cfb      	adds	r3, r7, #3
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	b25b      	sxtb	r3, r3
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	da0c      	bge.n	800ccea <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ccd0:	1cfb      	adds	r3, r7, #3
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	227f      	movs	r2, #127	@ 0x7f
 800ccd6:	401a      	ands	r2, r3
 800ccd8:	68f9      	ldr	r1, [r7, #12]
 800ccda:	0013      	movs	r3, r2
 800ccdc:	009b      	lsls	r3, r3, #2
 800ccde:	189b      	adds	r3, r3, r2
 800cce0:	00db      	lsls	r3, r3, #3
 800cce2:	18cb      	adds	r3, r1, r3
 800cce4:	3312      	adds	r3, #18
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	e00d      	b.n	800cd06 <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ccea:	1cfb      	adds	r3, r7, #3
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	227f      	movs	r2, #127	@ 0x7f
 800ccf0:	401a      	ands	r2, r3
 800ccf2:	68f8      	ldr	r0, [r7, #12]
 800ccf4:	23a9      	movs	r3, #169	@ 0xa9
 800ccf6:	0059      	lsls	r1, r3, #1
 800ccf8:	0013      	movs	r3, r2
 800ccfa:	009b      	lsls	r3, r3, #2
 800ccfc:	189b      	adds	r3, r3, r2
 800ccfe:	00db      	lsls	r3, r3, #3
 800cd00:	18c3      	adds	r3, r0, r3
 800cd02:	185b      	adds	r3, r3, r1
 800cd04:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd06:	0018      	movs	r0, r3
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	b004      	add	sp, #16
 800cd0c:	bd80      	pop	{r7, pc}

0800cd0e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd10:	b085      	sub	sp, #20
 800cd12:	af00      	add	r7, sp, #0
 800cd14:	6078      	str	r0, [r7, #4]
 800cd16:	000a      	movs	r2, r1
 800cd18:	1cfb      	adds	r3, r7, #3
 800cd1a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd1c:	210f      	movs	r1, #15
 800cd1e:	187b      	adds	r3, r7, r1
 800cd20:	2200      	movs	r2, #0
 800cd22:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd24:	260e      	movs	r6, #14
 800cd26:	19bb      	adds	r3, r7, r6
 800cd28:	2200      	movs	r2, #0
 800cd2a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cd2c:	687a      	ldr	r2, [r7, #4]
 800cd2e:	23b0      	movs	r3, #176	@ 0xb0
 800cd30:	009b      	lsls	r3, r3, #2
 800cd32:	58d2      	ldr	r2, [r2, r3]
 800cd34:	000d      	movs	r5, r1
 800cd36:	187c      	adds	r4, r7, r1
 800cd38:	1cfb      	adds	r3, r7, #3
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	0019      	movs	r1, r3
 800cd3e:	0010      	movs	r0, r2
 800cd40:	f7f7 fc1c 	bl	800457c <HAL_PCD_SetAddress>
 800cd44:	0003      	movs	r3, r0
 800cd46:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd48:	19bc      	adds	r4, r7, r6
 800cd4a:	197b      	adds	r3, r7, r5
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	0018      	movs	r0, r3
 800cd50:	f000 f8a7 	bl	800cea2 <USBD_Get_USB_Status>
 800cd54:	0003      	movs	r3, r0
 800cd56:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cd58:	19bb      	adds	r3, r7, r6
 800cd5a:	781b      	ldrb	r3, [r3, #0]
}
 800cd5c:	0018      	movs	r0, r3
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	b005      	add	sp, #20
 800cd62:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cd64 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cd64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd66:	b087      	sub	sp, #28
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	0008      	movs	r0, r1
 800cd6e:	607a      	str	r2, [r7, #4]
 800cd70:	0019      	movs	r1, r3
 800cd72:	230b      	movs	r3, #11
 800cd74:	18fb      	adds	r3, r7, r3
 800cd76:	1c02      	adds	r2, r0, #0
 800cd78:	701a      	strb	r2, [r3, #0]
 800cd7a:	2408      	movs	r4, #8
 800cd7c:	193b      	adds	r3, r7, r4
 800cd7e:	1c0a      	adds	r2, r1, #0
 800cd80:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd82:	2117      	movs	r1, #23
 800cd84:	187b      	adds	r3, r7, r1
 800cd86:	2200      	movs	r2, #0
 800cd88:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd8a:	2516      	movs	r5, #22
 800cd8c:	197b      	adds	r3, r7, r5
 800cd8e:	2200      	movs	r2, #0
 800cd90:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cd92:	68fa      	ldr	r2, [r7, #12]
 800cd94:	23b0      	movs	r3, #176	@ 0xb0
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	58d0      	ldr	r0, [r2, r3]
 800cd9a:	193b      	adds	r3, r7, r4
 800cd9c:	881d      	ldrh	r5, [r3, #0]
 800cd9e:	000e      	movs	r6, r1
 800cda0:	187c      	adds	r4, r7, r1
 800cda2:	687a      	ldr	r2, [r7, #4]
 800cda4:	230b      	movs	r3, #11
 800cda6:	18fb      	adds	r3, r7, r3
 800cda8:	7819      	ldrb	r1, [r3, #0]
 800cdaa:	002b      	movs	r3, r5
 800cdac:	f7f7 fd20 	bl	80047f0 <HAL_PCD_EP_Transmit>
 800cdb0:	0003      	movs	r3, r0
 800cdb2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdb4:	2516      	movs	r5, #22
 800cdb6:	197c      	adds	r4, r7, r5
 800cdb8:	19bb      	adds	r3, r7, r6
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	0018      	movs	r0, r3
 800cdbe:	f000 f870 	bl	800cea2 <USBD_Get_USB_Status>
 800cdc2:	0003      	movs	r3, r0
 800cdc4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cdc6:	197b      	adds	r3, r7, r5
 800cdc8:	781b      	ldrb	r3, [r3, #0]
}
 800cdca:	0018      	movs	r0, r3
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	b007      	add	sp, #28
 800cdd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cdd2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cdd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdd4:	b087      	sub	sp, #28
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	60f8      	str	r0, [r7, #12]
 800cdda:	0008      	movs	r0, r1
 800cddc:	607a      	str	r2, [r7, #4]
 800cdde:	0019      	movs	r1, r3
 800cde0:	230b      	movs	r3, #11
 800cde2:	18fb      	adds	r3, r7, r3
 800cde4:	1c02      	adds	r2, r0, #0
 800cde6:	701a      	strb	r2, [r3, #0]
 800cde8:	2408      	movs	r4, #8
 800cdea:	193b      	adds	r3, r7, r4
 800cdec:	1c0a      	adds	r2, r1, #0
 800cdee:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdf0:	2117      	movs	r1, #23
 800cdf2:	187b      	adds	r3, r7, r1
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdf8:	2516      	movs	r5, #22
 800cdfa:	197b      	adds	r3, r7, r5
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce00:	68fa      	ldr	r2, [r7, #12]
 800ce02:	23b0      	movs	r3, #176	@ 0xb0
 800ce04:	009b      	lsls	r3, r3, #2
 800ce06:	58d0      	ldr	r0, [r2, r3]
 800ce08:	193b      	adds	r3, r7, r4
 800ce0a:	881d      	ldrh	r5, [r3, #0]
 800ce0c:	000e      	movs	r6, r1
 800ce0e:	187c      	adds	r4, r7, r1
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	230b      	movs	r3, #11
 800ce14:	18fb      	adds	r3, r7, r3
 800ce16:	7819      	ldrb	r1, [r3, #0]
 800ce18:	002b      	movs	r3, r5
 800ce1a:	f7f7 fc99 	bl	8004750 <HAL_PCD_EP_Receive>
 800ce1e:	0003      	movs	r3, r0
 800ce20:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce22:	2516      	movs	r5, #22
 800ce24:	197c      	adds	r4, r7, r5
 800ce26:	19bb      	adds	r3, r7, r6
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	0018      	movs	r0, r3
 800ce2c:	f000 f839 	bl	800cea2 <USBD_Get_USB_Status>
 800ce30:	0003      	movs	r3, r0
 800ce32:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ce34:	197b      	adds	r3, r7, r5
 800ce36:	781b      	ldrb	r3, [r3, #0]
}
 800ce38:	0018      	movs	r0, r3
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	b007      	add	sp, #28
 800ce3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce40 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	000a      	movs	r2, r1
 800ce4a:	1cfb      	adds	r3, r7, #3
 800ce4c:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ce4e:	687a      	ldr	r2, [r7, #4]
 800ce50:	23b0      	movs	r3, #176	@ 0xb0
 800ce52:	009b      	lsls	r3, r3, #2
 800ce54:	58d2      	ldr	r2, [r2, r3]
 800ce56:	1cfb      	adds	r3, r7, #3
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	0019      	movs	r1, r3
 800ce5c:	0010      	movs	r0, r2
 800ce5e:	f7f7 fcae 	bl	80047be <HAL_PCD_EP_GetRxCount>
 800ce62:	0003      	movs	r3, r0
}
 800ce64:	0018      	movs	r0, r3
 800ce66:	46bd      	mov	sp, r7
 800ce68:	b002      	add	sp, #8
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b082      	sub	sp, #8
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ce74:	4b02      	ldr	r3, [pc, #8]	@ (800ce80 <USBD_static_malloc+0x14>)
}
 800ce76:	0018      	movs	r0, r3
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	b002      	add	sp, #8
 800ce7c:	bd80      	pop	{r7, pc}
 800ce7e:	46c0      	nop			@ (mov r8, r8)
 800ce80:	20001978 	.word	0x20001978

0800ce84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]

}
 800ce8c:	46c0      	nop			@ (mov r8, r8)
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	b002      	add	sp, #8
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ce98:	f7f5 fb4a 	bl	8002530 <SystemClock_Config>
}
 800ce9c:	46c0      	nop			@ (mov r8, r8)
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}

0800cea2 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cea2:	b580      	push	{r7, lr}
 800cea4:	b084      	sub	sp, #16
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	0002      	movs	r2, r0
 800ceaa:	1dfb      	adds	r3, r7, #7
 800ceac:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ceae:	230f      	movs	r3, #15
 800ceb0:	18fb      	adds	r3, r7, r3
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800ceb6:	1dfb      	adds	r3, r7, #7
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	2b03      	cmp	r3, #3
 800cebc:	d017      	beq.n	800ceee <USBD_Get_USB_Status+0x4c>
 800cebe:	dc1b      	bgt.n	800cef8 <USBD_Get_USB_Status+0x56>
 800cec0:	2b02      	cmp	r3, #2
 800cec2:	d00f      	beq.n	800cee4 <USBD_Get_USB_Status+0x42>
 800cec4:	dc18      	bgt.n	800cef8 <USBD_Get_USB_Status+0x56>
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d002      	beq.n	800ced0 <USBD_Get_USB_Status+0x2e>
 800ceca:	2b01      	cmp	r3, #1
 800cecc:	d005      	beq.n	800ceda <USBD_Get_USB_Status+0x38>
 800cece:	e013      	b.n	800cef8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ced0:	230f      	movs	r3, #15
 800ced2:	18fb      	adds	r3, r7, r3
 800ced4:	2200      	movs	r2, #0
 800ced6:	701a      	strb	r2, [r3, #0]
    break;
 800ced8:	e013      	b.n	800cf02 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ceda:	230f      	movs	r3, #15
 800cedc:	18fb      	adds	r3, r7, r3
 800cede:	2202      	movs	r2, #2
 800cee0:	701a      	strb	r2, [r3, #0]
    break;
 800cee2:	e00e      	b.n	800cf02 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cee4:	230f      	movs	r3, #15
 800cee6:	18fb      	adds	r3, r7, r3
 800cee8:	2201      	movs	r2, #1
 800ceea:	701a      	strb	r2, [r3, #0]
    break;
 800ceec:	e009      	b.n	800cf02 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ceee:	230f      	movs	r3, #15
 800cef0:	18fb      	adds	r3, r7, r3
 800cef2:	2202      	movs	r2, #2
 800cef4:	701a      	strb	r2, [r3, #0]
    break;
 800cef6:	e004      	b.n	800cf02 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800cef8:	230f      	movs	r3, #15
 800cefa:	18fb      	adds	r3, r7, r3
 800cefc:	2202      	movs	r2, #2
 800cefe:	701a      	strb	r2, [r3, #0]
    break;
 800cf00:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800cf02:	230f      	movs	r3, #15
 800cf04:	18fb      	adds	r3, r7, r3
 800cf06:	781b      	ldrb	r3, [r3, #0]
}
 800cf08:	0018      	movs	r0, r3
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	b004      	add	sp, #16
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <HAL_GPIO_EXTI_Callback>:
/* @fn      HAL_GPIO_EXTI_Callback
 * @brief   IRQ HAL call-back for all EXTI configured lines
 *          i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b082      	sub	sp, #8
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	0002      	movs	r2, r0
 800cf18:	1dbb      	adds	r3, r7, #6
 800cf1a:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == DW_IRQn_Pin)
 800cf1c:	1dbb      	adds	r3, r7, #6
 800cf1e:	881b      	ldrh	r3, [r3, #0]
 800cf20:	2b20      	cmp	r3, #32
 800cf22:	d101      	bne.n	800cf28 <HAL_GPIO_EXTI_Callback+0x18>
    {
        process_deca_irq();
 800cf24:	f000 f804 	bl	800cf30 <process_deca_irq>
    }
}
 800cf28:	46c0      	nop			@ (mov r8, r8)
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	b002      	add	sp, #8
 800cf2e:	bd80      	pop	{r7, pc}

0800cf30 <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	af00      	add	r7, sp, #0
    while(port_CheckEXT_IRQ() != 0)
 800cf34:	e002      	b.n	800cf3c <process_deca_irq+0xc>
    {

        port_deca_isr();
 800cf36:	4b05      	ldr	r3, [pc, #20]	@ (800cf4c <process_deca_irq+0x1c>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	4798      	blx	r3
    while(port_CheckEXT_IRQ() != 0)
 800cf3c:	f000 f808 	bl	800cf50 <port_CheckEXT_IRQ>
 800cf40:	1e03      	subs	r3, r0, #0
 800cf42:	d1f8      	bne.n	800cf36 <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 800cf44:	46c0      	nop			@ (mov r8, r8)
 800cf46:	46c0      	nop			@ (mov r8, r8)
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}
 800cf4c:	20001b98 	.word	0x20001b98

0800cf50 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DECAIRQ_GPIO, DW_IRQn_Pin);
 800cf54:	4b04      	ldr	r3, [pc, #16]	@ (800cf68 <port_CheckEXT_IRQ+0x18>)
 800cf56:	2120      	movs	r1, #32
 800cf58:	0018      	movs	r0, r3
 800cf5a:	f7f7 f85b 	bl	8004014 <HAL_GPIO_ReadPin>
 800cf5e:	0003      	movs	r3, r0
}
 800cf60:	0018      	movs	r0, r3
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	46c0      	nop			@ (mov r8, r8)
 800cf68:	48000400 	.word	0x48000400

0800cf6c <__cvt>:
 800cf6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf6e:	001f      	movs	r7, r3
 800cf70:	2300      	movs	r3, #0
 800cf72:	0016      	movs	r6, r2
 800cf74:	b08b      	sub	sp, #44	@ 0x2c
 800cf76:	429f      	cmp	r7, r3
 800cf78:	da04      	bge.n	800cf84 <__cvt+0x18>
 800cf7a:	2180      	movs	r1, #128	@ 0x80
 800cf7c:	0609      	lsls	r1, r1, #24
 800cf7e:	187b      	adds	r3, r7, r1
 800cf80:	001f      	movs	r7, r3
 800cf82:	232d      	movs	r3, #45	@ 0x2d
 800cf84:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cf86:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800cf88:	7013      	strb	r3, [r2, #0]
 800cf8a:	2320      	movs	r3, #32
 800cf8c:	2203      	movs	r2, #3
 800cf8e:	439d      	bics	r5, r3
 800cf90:	2d46      	cmp	r5, #70	@ 0x46
 800cf92:	d007      	beq.n	800cfa4 <__cvt+0x38>
 800cf94:	002b      	movs	r3, r5
 800cf96:	3b45      	subs	r3, #69	@ 0x45
 800cf98:	4259      	negs	r1, r3
 800cf9a:	414b      	adcs	r3, r1
 800cf9c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800cf9e:	3a01      	subs	r2, #1
 800cfa0:	18cb      	adds	r3, r1, r3
 800cfa2:	9310      	str	r3, [sp, #64]	@ 0x40
 800cfa4:	ab09      	add	r3, sp, #36	@ 0x24
 800cfa6:	9304      	str	r3, [sp, #16]
 800cfa8:	ab08      	add	r3, sp, #32
 800cfaa:	9303      	str	r3, [sp, #12]
 800cfac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cfae:	9200      	str	r2, [sp, #0]
 800cfb0:	9302      	str	r3, [sp, #8]
 800cfb2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cfb4:	0032      	movs	r2, r6
 800cfb6:	9301      	str	r3, [sp, #4]
 800cfb8:	003b      	movs	r3, r7
 800cfba:	f000 fea1 	bl	800dd00 <_dtoa_r>
 800cfbe:	0004      	movs	r4, r0
 800cfc0:	2d47      	cmp	r5, #71	@ 0x47
 800cfc2:	d11b      	bne.n	800cffc <__cvt+0x90>
 800cfc4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cfc6:	07db      	lsls	r3, r3, #31
 800cfc8:	d511      	bpl.n	800cfee <__cvt+0x82>
 800cfca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cfcc:	18c3      	adds	r3, r0, r3
 800cfce:	9307      	str	r3, [sp, #28]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	0030      	movs	r0, r6
 800cfd6:	0039      	movs	r1, r7
 800cfd8:	f7f3 fa38 	bl	800044c <__aeabi_dcmpeq>
 800cfdc:	2800      	cmp	r0, #0
 800cfde:	d001      	beq.n	800cfe4 <__cvt+0x78>
 800cfe0:	9b07      	ldr	r3, [sp, #28]
 800cfe2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfe4:	2230      	movs	r2, #48	@ 0x30
 800cfe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfe8:	9907      	ldr	r1, [sp, #28]
 800cfea:	428b      	cmp	r3, r1
 800cfec:	d320      	bcc.n	800d030 <__cvt+0xc4>
 800cfee:	0020      	movs	r0, r4
 800cff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cff2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800cff4:	1b1b      	subs	r3, r3, r4
 800cff6:	6013      	str	r3, [r2, #0]
 800cff8:	b00b      	add	sp, #44	@ 0x2c
 800cffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cffc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cffe:	18c3      	adds	r3, r0, r3
 800d000:	9307      	str	r3, [sp, #28]
 800d002:	2d46      	cmp	r5, #70	@ 0x46
 800d004:	d1e4      	bne.n	800cfd0 <__cvt+0x64>
 800d006:	7803      	ldrb	r3, [r0, #0]
 800d008:	2b30      	cmp	r3, #48	@ 0x30
 800d00a:	d10c      	bne.n	800d026 <__cvt+0xba>
 800d00c:	2200      	movs	r2, #0
 800d00e:	2300      	movs	r3, #0
 800d010:	0030      	movs	r0, r6
 800d012:	0039      	movs	r1, r7
 800d014:	f7f3 fa1a 	bl	800044c <__aeabi_dcmpeq>
 800d018:	2800      	cmp	r0, #0
 800d01a:	d104      	bne.n	800d026 <__cvt+0xba>
 800d01c:	2301      	movs	r3, #1
 800d01e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800d020:	1a9b      	subs	r3, r3, r2
 800d022:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d024:	6013      	str	r3, [r2, #0]
 800d026:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d028:	9a07      	ldr	r2, [sp, #28]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	18d3      	adds	r3, r2, r3
 800d02e:	e7ce      	b.n	800cfce <__cvt+0x62>
 800d030:	1c59      	adds	r1, r3, #1
 800d032:	9109      	str	r1, [sp, #36]	@ 0x24
 800d034:	701a      	strb	r2, [r3, #0]
 800d036:	e7d6      	b.n	800cfe6 <__cvt+0x7a>

0800d038 <__exponent>:
 800d038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d03a:	232b      	movs	r3, #43	@ 0x2b
 800d03c:	0005      	movs	r5, r0
 800d03e:	000c      	movs	r4, r1
 800d040:	b085      	sub	sp, #20
 800d042:	7002      	strb	r2, [r0, #0]
 800d044:	2900      	cmp	r1, #0
 800d046:	da01      	bge.n	800d04c <__exponent+0x14>
 800d048:	424c      	negs	r4, r1
 800d04a:	3302      	adds	r3, #2
 800d04c:	706b      	strb	r3, [r5, #1]
 800d04e:	2c09      	cmp	r4, #9
 800d050:	dd2c      	ble.n	800d0ac <__exponent+0x74>
 800d052:	ab02      	add	r3, sp, #8
 800d054:	1dde      	adds	r6, r3, #7
 800d056:	0020      	movs	r0, r4
 800d058:	210a      	movs	r1, #10
 800d05a:	f7f3 f9e1 	bl	8000420 <__aeabi_idivmod>
 800d05e:	0037      	movs	r7, r6
 800d060:	3130      	adds	r1, #48	@ 0x30
 800d062:	3e01      	subs	r6, #1
 800d064:	0020      	movs	r0, r4
 800d066:	7031      	strb	r1, [r6, #0]
 800d068:	210a      	movs	r1, #10
 800d06a:	9401      	str	r4, [sp, #4]
 800d06c:	f7f3 f8f2 	bl	8000254 <__divsi3>
 800d070:	9b01      	ldr	r3, [sp, #4]
 800d072:	0004      	movs	r4, r0
 800d074:	2b63      	cmp	r3, #99	@ 0x63
 800d076:	dcee      	bgt.n	800d056 <__exponent+0x1e>
 800d078:	1eba      	subs	r2, r7, #2
 800d07a:	1ca8      	adds	r0, r5, #2
 800d07c:	0001      	movs	r1, r0
 800d07e:	0013      	movs	r3, r2
 800d080:	3430      	adds	r4, #48	@ 0x30
 800d082:	7014      	strb	r4, [r2, #0]
 800d084:	ac02      	add	r4, sp, #8
 800d086:	3407      	adds	r4, #7
 800d088:	429c      	cmp	r4, r3
 800d08a:	d80a      	bhi.n	800d0a2 <__exponent+0x6a>
 800d08c:	2300      	movs	r3, #0
 800d08e:	42a2      	cmp	r2, r4
 800d090:	d803      	bhi.n	800d09a <__exponent+0x62>
 800d092:	3309      	adds	r3, #9
 800d094:	aa02      	add	r2, sp, #8
 800d096:	189b      	adds	r3, r3, r2
 800d098:	1bdb      	subs	r3, r3, r7
 800d09a:	18c0      	adds	r0, r0, r3
 800d09c:	1b40      	subs	r0, r0, r5
 800d09e:	b005      	add	sp, #20
 800d0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0a2:	781c      	ldrb	r4, [r3, #0]
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	700c      	strb	r4, [r1, #0]
 800d0a8:	3101      	adds	r1, #1
 800d0aa:	e7eb      	b.n	800d084 <__exponent+0x4c>
 800d0ac:	2330      	movs	r3, #48	@ 0x30
 800d0ae:	18e4      	adds	r4, r4, r3
 800d0b0:	70ab      	strb	r3, [r5, #2]
 800d0b2:	1d28      	adds	r0, r5, #4
 800d0b4:	70ec      	strb	r4, [r5, #3]
 800d0b6:	e7f1      	b.n	800d09c <__exponent+0x64>

0800d0b8 <_printf_float>:
 800d0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0ba:	b097      	sub	sp, #92	@ 0x5c
 800d0bc:	000d      	movs	r5, r1
 800d0be:	920a      	str	r2, [sp, #40]	@ 0x28
 800d0c0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800d0c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d0c4:	9009      	str	r0, [sp, #36]	@ 0x24
 800d0c6:	f000 fcf9 	bl	800dabc <_localeconv_r>
 800d0ca:	6803      	ldr	r3, [r0, #0]
 800d0cc:	0018      	movs	r0, r3
 800d0ce:	930d      	str	r3, [sp, #52]	@ 0x34
 800d0d0:	f7f3 f81a 	bl	8000108 <strlen>
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d0d8:	9314      	str	r3, [sp, #80]	@ 0x50
 800d0da:	7e2b      	ldrb	r3, [r5, #24]
 800d0dc:	2207      	movs	r2, #7
 800d0de:	930c      	str	r3, [sp, #48]	@ 0x30
 800d0e0:	682b      	ldr	r3, [r5, #0]
 800d0e2:	930e      	str	r3, [sp, #56]	@ 0x38
 800d0e4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d0e6:	6823      	ldr	r3, [r4, #0]
 800d0e8:	05c9      	lsls	r1, r1, #23
 800d0ea:	d545      	bpl.n	800d178 <_printf_float+0xc0>
 800d0ec:	189b      	adds	r3, r3, r2
 800d0ee:	4393      	bics	r3, r2
 800d0f0:	001a      	movs	r2, r3
 800d0f2:	3208      	adds	r2, #8
 800d0f4:	6022      	str	r2, [r4, #0]
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	681e      	ldr	r6, [r3, #0]
 800d0fa:	685f      	ldr	r7, [r3, #4]
 800d0fc:	007b      	lsls	r3, r7, #1
 800d0fe:	085b      	lsrs	r3, r3, #1
 800d100:	9311      	str	r3, [sp, #68]	@ 0x44
 800d102:	9610      	str	r6, [sp, #64]	@ 0x40
 800d104:	64ae      	str	r6, [r5, #72]	@ 0x48
 800d106:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800d108:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d10a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800d10c:	4ba7      	ldr	r3, [pc, #668]	@ (800d3ac <_printf_float+0x2f4>)
 800d10e:	4252      	negs	r2, r2
 800d110:	f7f4 ffd6 	bl	80020c0 <__aeabi_dcmpun>
 800d114:	2800      	cmp	r0, #0
 800d116:	d131      	bne.n	800d17c <_printf_float+0xc4>
 800d118:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d11a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800d11c:	2201      	movs	r2, #1
 800d11e:	4ba3      	ldr	r3, [pc, #652]	@ (800d3ac <_printf_float+0x2f4>)
 800d120:	4252      	negs	r2, r2
 800d122:	f7f3 f9a3 	bl	800046c <__aeabi_dcmple>
 800d126:	2800      	cmp	r0, #0
 800d128:	d128      	bne.n	800d17c <_printf_float+0xc4>
 800d12a:	2200      	movs	r2, #0
 800d12c:	2300      	movs	r3, #0
 800d12e:	0030      	movs	r0, r6
 800d130:	0039      	movs	r1, r7
 800d132:	f7f3 f991 	bl	8000458 <__aeabi_dcmplt>
 800d136:	2800      	cmp	r0, #0
 800d138:	d003      	beq.n	800d142 <_printf_float+0x8a>
 800d13a:	002b      	movs	r3, r5
 800d13c:	222d      	movs	r2, #45	@ 0x2d
 800d13e:	3343      	adds	r3, #67	@ 0x43
 800d140:	701a      	strb	r2, [r3, #0]
 800d142:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d144:	4f9a      	ldr	r7, [pc, #616]	@ (800d3b0 <_printf_float+0x2f8>)
 800d146:	2b47      	cmp	r3, #71	@ 0x47
 800d148:	d900      	bls.n	800d14c <_printf_float+0x94>
 800d14a:	4f9a      	ldr	r7, [pc, #616]	@ (800d3b4 <_printf_float+0x2fc>)
 800d14c:	2303      	movs	r3, #3
 800d14e:	2400      	movs	r4, #0
 800d150:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d152:	612b      	str	r3, [r5, #16]
 800d154:	3301      	adds	r3, #1
 800d156:	439a      	bics	r2, r3
 800d158:	602a      	str	r2, [r5, #0]
 800d15a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d15c:	0029      	movs	r1, r5
 800d15e:	9300      	str	r3, [sp, #0]
 800d160:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d162:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d164:	aa15      	add	r2, sp, #84	@ 0x54
 800d166:	f000 f9e5 	bl	800d534 <_printf_common>
 800d16a:	3001      	adds	r0, #1
 800d16c:	d000      	beq.n	800d170 <_printf_float+0xb8>
 800d16e:	e09f      	b.n	800d2b0 <_printf_float+0x1f8>
 800d170:	2001      	movs	r0, #1
 800d172:	4240      	negs	r0, r0
 800d174:	b017      	add	sp, #92	@ 0x5c
 800d176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d178:	3307      	adds	r3, #7
 800d17a:	e7b8      	b.n	800d0ee <_printf_float+0x36>
 800d17c:	0032      	movs	r2, r6
 800d17e:	003b      	movs	r3, r7
 800d180:	0030      	movs	r0, r6
 800d182:	0039      	movs	r1, r7
 800d184:	f7f4 ff9c 	bl	80020c0 <__aeabi_dcmpun>
 800d188:	2800      	cmp	r0, #0
 800d18a:	d00b      	beq.n	800d1a4 <_printf_float+0xec>
 800d18c:	2f00      	cmp	r7, #0
 800d18e:	da03      	bge.n	800d198 <_printf_float+0xe0>
 800d190:	002b      	movs	r3, r5
 800d192:	222d      	movs	r2, #45	@ 0x2d
 800d194:	3343      	adds	r3, #67	@ 0x43
 800d196:	701a      	strb	r2, [r3, #0]
 800d198:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d19a:	4f87      	ldr	r7, [pc, #540]	@ (800d3b8 <_printf_float+0x300>)
 800d19c:	2b47      	cmp	r3, #71	@ 0x47
 800d19e:	d9d5      	bls.n	800d14c <_printf_float+0x94>
 800d1a0:	4f86      	ldr	r7, [pc, #536]	@ (800d3bc <_printf_float+0x304>)
 800d1a2:	e7d3      	b.n	800d14c <_printf_float+0x94>
 800d1a4:	2220      	movs	r2, #32
 800d1a6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800d1a8:	686b      	ldr	r3, [r5, #4]
 800d1aa:	4394      	bics	r4, r2
 800d1ac:	1c5a      	adds	r2, r3, #1
 800d1ae:	d146      	bne.n	800d23e <_printf_float+0x186>
 800d1b0:	3307      	adds	r3, #7
 800d1b2:	606b      	str	r3, [r5, #4]
 800d1b4:	2380      	movs	r3, #128	@ 0x80
 800d1b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1b8:	00db      	lsls	r3, r3, #3
 800d1ba:	4313      	orrs	r3, r2
 800d1bc:	2200      	movs	r2, #0
 800d1be:	602b      	str	r3, [r5, #0]
 800d1c0:	9206      	str	r2, [sp, #24]
 800d1c2:	aa14      	add	r2, sp, #80	@ 0x50
 800d1c4:	9205      	str	r2, [sp, #20]
 800d1c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d1c8:	a90a      	add	r1, sp, #40	@ 0x28
 800d1ca:	9204      	str	r2, [sp, #16]
 800d1cc:	aa13      	add	r2, sp, #76	@ 0x4c
 800d1ce:	9203      	str	r2, [sp, #12]
 800d1d0:	2223      	movs	r2, #35	@ 0x23
 800d1d2:	1852      	adds	r2, r2, r1
 800d1d4:	9202      	str	r2, [sp, #8]
 800d1d6:	9301      	str	r3, [sp, #4]
 800d1d8:	686b      	ldr	r3, [r5, #4]
 800d1da:	0032      	movs	r2, r6
 800d1dc:	9300      	str	r3, [sp, #0]
 800d1de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d1e0:	003b      	movs	r3, r7
 800d1e2:	f7ff fec3 	bl	800cf6c <__cvt>
 800d1e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d1e8:	0007      	movs	r7, r0
 800d1ea:	2c47      	cmp	r4, #71	@ 0x47
 800d1ec:	d12d      	bne.n	800d24a <_printf_float+0x192>
 800d1ee:	1cd3      	adds	r3, r2, #3
 800d1f0:	db02      	blt.n	800d1f8 <_printf_float+0x140>
 800d1f2:	686b      	ldr	r3, [r5, #4]
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	dd48      	ble.n	800d28a <_printf_float+0x1d2>
 800d1f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d1fa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d1fc:	3b02      	subs	r3, #2
 800d1fe:	b2db      	uxtb	r3, r3
 800d200:	930c      	str	r3, [sp, #48]	@ 0x30
 800d202:	0028      	movs	r0, r5
 800d204:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d206:	3901      	subs	r1, #1
 800d208:	3050      	adds	r0, #80	@ 0x50
 800d20a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d20c:	f7ff ff14 	bl	800d038 <__exponent>
 800d210:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d212:	0004      	movs	r4, r0
 800d214:	1813      	adds	r3, r2, r0
 800d216:	612b      	str	r3, [r5, #16]
 800d218:	2a01      	cmp	r2, #1
 800d21a:	dc02      	bgt.n	800d222 <_printf_float+0x16a>
 800d21c:	682a      	ldr	r2, [r5, #0]
 800d21e:	07d2      	lsls	r2, r2, #31
 800d220:	d501      	bpl.n	800d226 <_printf_float+0x16e>
 800d222:	3301      	adds	r3, #1
 800d224:	612b      	str	r3, [r5, #16]
 800d226:	2323      	movs	r3, #35	@ 0x23
 800d228:	aa0a      	add	r2, sp, #40	@ 0x28
 800d22a:	189b      	adds	r3, r3, r2
 800d22c:	781b      	ldrb	r3, [r3, #0]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d100      	bne.n	800d234 <_printf_float+0x17c>
 800d232:	e792      	b.n	800d15a <_printf_float+0xa2>
 800d234:	002b      	movs	r3, r5
 800d236:	222d      	movs	r2, #45	@ 0x2d
 800d238:	3343      	adds	r3, #67	@ 0x43
 800d23a:	701a      	strb	r2, [r3, #0]
 800d23c:	e78d      	b.n	800d15a <_printf_float+0xa2>
 800d23e:	2c47      	cmp	r4, #71	@ 0x47
 800d240:	d1b8      	bne.n	800d1b4 <_printf_float+0xfc>
 800d242:	2b00      	cmp	r3, #0
 800d244:	d1b6      	bne.n	800d1b4 <_printf_float+0xfc>
 800d246:	3301      	adds	r3, #1
 800d248:	e7b3      	b.n	800d1b2 <_printf_float+0xfa>
 800d24a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d24c:	0011      	movs	r1, r2
 800d24e:	2b65      	cmp	r3, #101	@ 0x65
 800d250:	d9d7      	bls.n	800d202 <_printf_float+0x14a>
 800d252:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d254:	2b66      	cmp	r3, #102	@ 0x66
 800d256:	d11a      	bne.n	800d28e <_printf_float+0x1d6>
 800d258:	686b      	ldr	r3, [r5, #4]
 800d25a:	2a00      	cmp	r2, #0
 800d25c:	dd09      	ble.n	800d272 <_printf_float+0x1ba>
 800d25e:	612a      	str	r2, [r5, #16]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d102      	bne.n	800d26a <_printf_float+0x1b2>
 800d264:	6829      	ldr	r1, [r5, #0]
 800d266:	07c9      	lsls	r1, r1, #31
 800d268:	d50b      	bpl.n	800d282 <_printf_float+0x1ca>
 800d26a:	3301      	adds	r3, #1
 800d26c:	189b      	adds	r3, r3, r2
 800d26e:	612b      	str	r3, [r5, #16]
 800d270:	e007      	b.n	800d282 <_printf_float+0x1ca>
 800d272:	2b00      	cmp	r3, #0
 800d274:	d103      	bne.n	800d27e <_printf_float+0x1c6>
 800d276:	2201      	movs	r2, #1
 800d278:	6829      	ldr	r1, [r5, #0]
 800d27a:	4211      	tst	r1, r2
 800d27c:	d000      	beq.n	800d280 <_printf_float+0x1c8>
 800d27e:	1c9a      	adds	r2, r3, #2
 800d280:	612a      	str	r2, [r5, #16]
 800d282:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d284:	2400      	movs	r4, #0
 800d286:	65ab      	str	r3, [r5, #88]	@ 0x58
 800d288:	e7cd      	b.n	800d226 <_printf_float+0x16e>
 800d28a:	2367      	movs	r3, #103	@ 0x67
 800d28c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d28e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d290:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d292:	4299      	cmp	r1, r3
 800d294:	db06      	blt.n	800d2a4 <_printf_float+0x1ec>
 800d296:	682b      	ldr	r3, [r5, #0]
 800d298:	6129      	str	r1, [r5, #16]
 800d29a:	07db      	lsls	r3, r3, #31
 800d29c:	d5f1      	bpl.n	800d282 <_printf_float+0x1ca>
 800d29e:	3101      	adds	r1, #1
 800d2a0:	6129      	str	r1, [r5, #16]
 800d2a2:	e7ee      	b.n	800d282 <_printf_float+0x1ca>
 800d2a4:	2201      	movs	r2, #1
 800d2a6:	2900      	cmp	r1, #0
 800d2a8:	dce0      	bgt.n	800d26c <_printf_float+0x1b4>
 800d2aa:	1892      	adds	r2, r2, r2
 800d2ac:	1a52      	subs	r2, r2, r1
 800d2ae:	e7dd      	b.n	800d26c <_printf_float+0x1b4>
 800d2b0:	682a      	ldr	r2, [r5, #0]
 800d2b2:	0553      	lsls	r3, r2, #21
 800d2b4:	d408      	bmi.n	800d2c8 <_printf_float+0x210>
 800d2b6:	692b      	ldr	r3, [r5, #16]
 800d2b8:	003a      	movs	r2, r7
 800d2ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d2bc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2be:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d2c0:	47a0      	blx	r4
 800d2c2:	3001      	adds	r0, #1
 800d2c4:	d129      	bne.n	800d31a <_printf_float+0x262>
 800d2c6:	e753      	b.n	800d170 <_printf_float+0xb8>
 800d2c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d2ca:	2b65      	cmp	r3, #101	@ 0x65
 800d2cc:	d800      	bhi.n	800d2d0 <_printf_float+0x218>
 800d2ce:	e0da      	b.n	800d486 <_printf_float+0x3ce>
 800d2d0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800d2d2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	f7f3 f8b8 	bl	800044c <__aeabi_dcmpeq>
 800d2dc:	2800      	cmp	r0, #0
 800d2de:	d033      	beq.n	800d348 <_printf_float+0x290>
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	4a37      	ldr	r2, [pc, #220]	@ (800d3c0 <_printf_float+0x308>)
 800d2e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d2e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2e8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d2ea:	47a0      	blx	r4
 800d2ec:	3001      	adds	r0, #1
 800d2ee:	d100      	bne.n	800d2f2 <_printf_float+0x23a>
 800d2f0:	e73e      	b.n	800d170 <_printf_float+0xb8>
 800d2f2:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800d2f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d2f6:	42b3      	cmp	r3, r6
 800d2f8:	db02      	blt.n	800d300 <_printf_float+0x248>
 800d2fa:	682b      	ldr	r3, [r5, #0]
 800d2fc:	07db      	lsls	r3, r3, #31
 800d2fe:	d50c      	bpl.n	800d31a <_printf_float+0x262>
 800d300:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d302:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d304:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d306:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d308:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d30a:	47a0      	blx	r4
 800d30c:	2400      	movs	r4, #0
 800d30e:	3001      	adds	r0, #1
 800d310:	d100      	bne.n	800d314 <_printf_float+0x25c>
 800d312:	e72d      	b.n	800d170 <_printf_float+0xb8>
 800d314:	1e73      	subs	r3, r6, #1
 800d316:	42a3      	cmp	r3, r4
 800d318:	dc0a      	bgt.n	800d330 <_printf_float+0x278>
 800d31a:	682b      	ldr	r3, [r5, #0]
 800d31c:	079b      	lsls	r3, r3, #30
 800d31e:	d500      	bpl.n	800d322 <_printf_float+0x26a>
 800d320:	e105      	b.n	800d52e <_printf_float+0x476>
 800d322:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d324:	68e8      	ldr	r0, [r5, #12]
 800d326:	4298      	cmp	r0, r3
 800d328:	db00      	blt.n	800d32c <_printf_float+0x274>
 800d32a:	e723      	b.n	800d174 <_printf_float+0xbc>
 800d32c:	0018      	movs	r0, r3
 800d32e:	e721      	b.n	800d174 <_printf_float+0xbc>
 800d330:	002a      	movs	r2, r5
 800d332:	2301      	movs	r3, #1
 800d334:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d336:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d338:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d33a:	321a      	adds	r2, #26
 800d33c:	47b8      	blx	r7
 800d33e:	3001      	adds	r0, #1
 800d340:	d100      	bne.n	800d344 <_printf_float+0x28c>
 800d342:	e715      	b.n	800d170 <_printf_float+0xb8>
 800d344:	3401      	adds	r4, #1
 800d346:	e7e5      	b.n	800d314 <_printf_float+0x25c>
 800d348:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	dc3a      	bgt.n	800d3c4 <_printf_float+0x30c>
 800d34e:	2301      	movs	r3, #1
 800d350:	4a1b      	ldr	r2, [pc, #108]	@ (800d3c0 <_printf_float+0x308>)
 800d352:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d354:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d356:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d358:	47a0      	blx	r4
 800d35a:	3001      	adds	r0, #1
 800d35c:	d100      	bne.n	800d360 <_printf_float+0x2a8>
 800d35e:	e707      	b.n	800d170 <_printf_float+0xb8>
 800d360:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800d362:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d364:	4333      	orrs	r3, r6
 800d366:	d102      	bne.n	800d36e <_printf_float+0x2b6>
 800d368:	682b      	ldr	r3, [r5, #0]
 800d36a:	07db      	lsls	r3, r3, #31
 800d36c:	d5d5      	bpl.n	800d31a <_printf_float+0x262>
 800d36e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d370:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d372:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d374:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d376:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d378:	47a0      	blx	r4
 800d37a:	2300      	movs	r3, #0
 800d37c:	3001      	adds	r0, #1
 800d37e:	d100      	bne.n	800d382 <_printf_float+0x2ca>
 800d380:	e6f6      	b.n	800d170 <_printf_float+0xb8>
 800d382:	930c      	str	r3, [sp, #48]	@ 0x30
 800d384:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d386:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d388:	425b      	negs	r3, r3
 800d38a:	4293      	cmp	r3, r2
 800d38c:	dc01      	bgt.n	800d392 <_printf_float+0x2da>
 800d38e:	0033      	movs	r3, r6
 800d390:	e792      	b.n	800d2b8 <_printf_float+0x200>
 800d392:	002a      	movs	r2, r5
 800d394:	2301      	movs	r3, #1
 800d396:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d398:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d39a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d39c:	321a      	adds	r2, #26
 800d39e:	47a0      	blx	r4
 800d3a0:	3001      	adds	r0, #1
 800d3a2:	d100      	bne.n	800d3a6 <_printf_float+0x2ee>
 800d3a4:	e6e4      	b.n	800d170 <_printf_float+0xb8>
 800d3a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d3a8:	3301      	adds	r3, #1
 800d3aa:	e7ea      	b.n	800d382 <_printf_float+0x2ca>
 800d3ac:	7fefffff 	.word	0x7fefffff
 800d3b0:	08010064 	.word	0x08010064
 800d3b4:	08010068 	.word	0x08010068
 800d3b8:	0801006c 	.word	0x0801006c
 800d3bc:	08010070 	.word	0x08010070
 800d3c0:	08010074 	.word	0x08010074
 800d3c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d3c6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800d3c8:	930c      	str	r3, [sp, #48]	@ 0x30
 800d3ca:	429e      	cmp	r6, r3
 800d3cc:	dd00      	ble.n	800d3d0 <_printf_float+0x318>
 800d3ce:	001e      	movs	r6, r3
 800d3d0:	2e00      	cmp	r6, #0
 800d3d2:	dc31      	bgt.n	800d438 <_printf_float+0x380>
 800d3d4:	43f3      	mvns	r3, r6
 800d3d6:	2400      	movs	r4, #0
 800d3d8:	17db      	asrs	r3, r3, #31
 800d3da:	4033      	ands	r3, r6
 800d3dc:	930e      	str	r3, [sp, #56]	@ 0x38
 800d3de:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800d3e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3e2:	1af3      	subs	r3, r6, r3
 800d3e4:	42a3      	cmp	r3, r4
 800d3e6:	dc30      	bgt.n	800d44a <_printf_float+0x392>
 800d3e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d3ea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	dc38      	bgt.n	800d462 <_printf_float+0x3aa>
 800d3f0:	682b      	ldr	r3, [r5, #0]
 800d3f2:	07db      	lsls	r3, r3, #31
 800d3f4:	d435      	bmi.n	800d462 <_printf_float+0x3aa>
 800d3f6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800d3f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d3fa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d3fc:	1b9b      	subs	r3, r3, r6
 800d3fe:	1b14      	subs	r4, r2, r4
 800d400:	429c      	cmp	r4, r3
 800d402:	dd00      	ble.n	800d406 <_printf_float+0x34e>
 800d404:	001c      	movs	r4, r3
 800d406:	2c00      	cmp	r4, #0
 800d408:	dc34      	bgt.n	800d474 <_printf_float+0x3bc>
 800d40a:	43e3      	mvns	r3, r4
 800d40c:	2600      	movs	r6, #0
 800d40e:	17db      	asrs	r3, r3, #31
 800d410:	401c      	ands	r4, r3
 800d412:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d414:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d416:	1ad3      	subs	r3, r2, r3
 800d418:	1b1b      	subs	r3, r3, r4
 800d41a:	42b3      	cmp	r3, r6
 800d41c:	dc00      	bgt.n	800d420 <_printf_float+0x368>
 800d41e:	e77c      	b.n	800d31a <_printf_float+0x262>
 800d420:	002a      	movs	r2, r5
 800d422:	2301      	movs	r3, #1
 800d424:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d426:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d428:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d42a:	321a      	adds	r2, #26
 800d42c:	47b8      	blx	r7
 800d42e:	3001      	adds	r0, #1
 800d430:	d100      	bne.n	800d434 <_printf_float+0x37c>
 800d432:	e69d      	b.n	800d170 <_printf_float+0xb8>
 800d434:	3601      	adds	r6, #1
 800d436:	e7ec      	b.n	800d412 <_printf_float+0x35a>
 800d438:	0033      	movs	r3, r6
 800d43a:	003a      	movs	r2, r7
 800d43c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d43e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d440:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d442:	47a0      	blx	r4
 800d444:	3001      	adds	r0, #1
 800d446:	d1c5      	bne.n	800d3d4 <_printf_float+0x31c>
 800d448:	e692      	b.n	800d170 <_printf_float+0xb8>
 800d44a:	002a      	movs	r2, r5
 800d44c:	2301      	movs	r3, #1
 800d44e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d450:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d452:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d454:	321a      	adds	r2, #26
 800d456:	47b0      	blx	r6
 800d458:	3001      	adds	r0, #1
 800d45a:	d100      	bne.n	800d45e <_printf_float+0x3a6>
 800d45c:	e688      	b.n	800d170 <_printf_float+0xb8>
 800d45e:	3401      	adds	r4, #1
 800d460:	e7bd      	b.n	800d3de <_printf_float+0x326>
 800d462:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d464:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d466:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d468:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d46a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d46c:	47a0      	blx	r4
 800d46e:	3001      	adds	r0, #1
 800d470:	d1c1      	bne.n	800d3f6 <_printf_float+0x33e>
 800d472:	e67d      	b.n	800d170 <_printf_float+0xb8>
 800d474:	19ba      	adds	r2, r7, r6
 800d476:	0023      	movs	r3, r4
 800d478:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d47a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d47c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d47e:	47b0      	blx	r6
 800d480:	3001      	adds	r0, #1
 800d482:	d1c2      	bne.n	800d40a <_printf_float+0x352>
 800d484:	e674      	b.n	800d170 <_printf_float+0xb8>
 800d486:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d488:	930c      	str	r3, [sp, #48]	@ 0x30
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	dc02      	bgt.n	800d494 <_printf_float+0x3dc>
 800d48e:	2301      	movs	r3, #1
 800d490:	421a      	tst	r2, r3
 800d492:	d039      	beq.n	800d508 <_printf_float+0x450>
 800d494:	2301      	movs	r3, #1
 800d496:	003a      	movs	r2, r7
 800d498:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d49a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d49c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d49e:	47b0      	blx	r6
 800d4a0:	3001      	adds	r0, #1
 800d4a2:	d100      	bne.n	800d4a6 <_printf_float+0x3ee>
 800d4a4:	e664      	b.n	800d170 <_printf_float+0xb8>
 800d4a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d4aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4ae:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d4b0:	47b0      	blx	r6
 800d4b2:	3001      	adds	r0, #1
 800d4b4:	d100      	bne.n	800d4b8 <_printf_float+0x400>
 800d4b6:	e65b      	b.n	800d170 <_printf_float+0xb8>
 800d4b8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800d4ba:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d4bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d4be:	2200      	movs	r2, #0
 800d4c0:	3b01      	subs	r3, #1
 800d4c2:	930c      	str	r3, [sp, #48]	@ 0x30
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	f7f2 ffc1 	bl	800044c <__aeabi_dcmpeq>
 800d4ca:	2800      	cmp	r0, #0
 800d4cc:	d11a      	bne.n	800d504 <_printf_float+0x44c>
 800d4ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d4d0:	1c7a      	adds	r2, r7, #1
 800d4d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4d4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4d6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d4d8:	47b0      	blx	r6
 800d4da:	3001      	adds	r0, #1
 800d4dc:	d10e      	bne.n	800d4fc <_printf_float+0x444>
 800d4de:	e647      	b.n	800d170 <_printf_float+0xb8>
 800d4e0:	002a      	movs	r2, r5
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4e8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d4ea:	321a      	adds	r2, #26
 800d4ec:	47b8      	blx	r7
 800d4ee:	3001      	adds	r0, #1
 800d4f0:	d100      	bne.n	800d4f4 <_printf_float+0x43c>
 800d4f2:	e63d      	b.n	800d170 <_printf_float+0xb8>
 800d4f4:	3601      	adds	r6, #1
 800d4f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d4f8:	429e      	cmp	r6, r3
 800d4fa:	dbf1      	blt.n	800d4e0 <_printf_float+0x428>
 800d4fc:	002a      	movs	r2, r5
 800d4fe:	0023      	movs	r3, r4
 800d500:	3250      	adds	r2, #80	@ 0x50
 800d502:	e6da      	b.n	800d2ba <_printf_float+0x202>
 800d504:	2600      	movs	r6, #0
 800d506:	e7f6      	b.n	800d4f6 <_printf_float+0x43e>
 800d508:	003a      	movs	r2, r7
 800d50a:	e7e2      	b.n	800d4d2 <_printf_float+0x41a>
 800d50c:	002a      	movs	r2, r5
 800d50e:	2301      	movs	r3, #1
 800d510:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d512:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d514:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d516:	3219      	adds	r2, #25
 800d518:	47b0      	blx	r6
 800d51a:	3001      	adds	r0, #1
 800d51c:	d100      	bne.n	800d520 <_printf_float+0x468>
 800d51e:	e627      	b.n	800d170 <_printf_float+0xb8>
 800d520:	3401      	adds	r4, #1
 800d522:	68eb      	ldr	r3, [r5, #12]
 800d524:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d526:	1a9b      	subs	r3, r3, r2
 800d528:	42a3      	cmp	r3, r4
 800d52a:	dcef      	bgt.n	800d50c <_printf_float+0x454>
 800d52c:	e6f9      	b.n	800d322 <_printf_float+0x26a>
 800d52e:	2400      	movs	r4, #0
 800d530:	e7f7      	b.n	800d522 <_printf_float+0x46a>
 800d532:	46c0      	nop			@ (mov r8, r8)

0800d534 <_printf_common>:
 800d534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d536:	0016      	movs	r6, r2
 800d538:	9301      	str	r3, [sp, #4]
 800d53a:	688a      	ldr	r2, [r1, #8]
 800d53c:	690b      	ldr	r3, [r1, #16]
 800d53e:	000c      	movs	r4, r1
 800d540:	9000      	str	r0, [sp, #0]
 800d542:	4293      	cmp	r3, r2
 800d544:	da00      	bge.n	800d548 <_printf_common+0x14>
 800d546:	0013      	movs	r3, r2
 800d548:	0022      	movs	r2, r4
 800d54a:	6033      	str	r3, [r6, #0]
 800d54c:	3243      	adds	r2, #67	@ 0x43
 800d54e:	7812      	ldrb	r2, [r2, #0]
 800d550:	2a00      	cmp	r2, #0
 800d552:	d001      	beq.n	800d558 <_printf_common+0x24>
 800d554:	3301      	adds	r3, #1
 800d556:	6033      	str	r3, [r6, #0]
 800d558:	6823      	ldr	r3, [r4, #0]
 800d55a:	069b      	lsls	r3, r3, #26
 800d55c:	d502      	bpl.n	800d564 <_printf_common+0x30>
 800d55e:	6833      	ldr	r3, [r6, #0]
 800d560:	3302      	adds	r3, #2
 800d562:	6033      	str	r3, [r6, #0]
 800d564:	6822      	ldr	r2, [r4, #0]
 800d566:	2306      	movs	r3, #6
 800d568:	0015      	movs	r5, r2
 800d56a:	401d      	ands	r5, r3
 800d56c:	421a      	tst	r2, r3
 800d56e:	d027      	beq.n	800d5c0 <_printf_common+0x8c>
 800d570:	0023      	movs	r3, r4
 800d572:	3343      	adds	r3, #67	@ 0x43
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	1e5a      	subs	r2, r3, #1
 800d578:	4193      	sbcs	r3, r2
 800d57a:	6822      	ldr	r2, [r4, #0]
 800d57c:	0692      	lsls	r2, r2, #26
 800d57e:	d430      	bmi.n	800d5e2 <_printf_common+0xae>
 800d580:	0022      	movs	r2, r4
 800d582:	9901      	ldr	r1, [sp, #4]
 800d584:	9800      	ldr	r0, [sp, #0]
 800d586:	9d08      	ldr	r5, [sp, #32]
 800d588:	3243      	adds	r2, #67	@ 0x43
 800d58a:	47a8      	blx	r5
 800d58c:	3001      	adds	r0, #1
 800d58e:	d025      	beq.n	800d5dc <_printf_common+0xa8>
 800d590:	2206      	movs	r2, #6
 800d592:	6823      	ldr	r3, [r4, #0]
 800d594:	2500      	movs	r5, #0
 800d596:	4013      	ands	r3, r2
 800d598:	2b04      	cmp	r3, #4
 800d59a:	d105      	bne.n	800d5a8 <_printf_common+0x74>
 800d59c:	6833      	ldr	r3, [r6, #0]
 800d59e:	68e5      	ldr	r5, [r4, #12]
 800d5a0:	1aed      	subs	r5, r5, r3
 800d5a2:	43eb      	mvns	r3, r5
 800d5a4:	17db      	asrs	r3, r3, #31
 800d5a6:	401d      	ands	r5, r3
 800d5a8:	68a3      	ldr	r3, [r4, #8]
 800d5aa:	6922      	ldr	r2, [r4, #16]
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	dd01      	ble.n	800d5b4 <_printf_common+0x80>
 800d5b0:	1a9b      	subs	r3, r3, r2
 800d5b2:	18ed      	adds	r5, r5, r3
 800d5b4:	2600      	movs	r6, #0
 800d5b6:	42b5      	cmp	r5, r6
 800d5b8:	d120      	bne.n	800d5fc <_printf_common+0xc8>
 800d5ba:	2000      	movs	r0, #0
 800d5bc:	e010      	b.n	800d5e0 <_printf_common+0xac>
 800d5be:	3501      	adds	r5, #1
 800d5c0:	68e3      	ldr	r3, [r4, #12]
 800d5c2:	6832      	ldr	r2, [r6, #0]
 800d5c4:	1a9b      	subs	r3, r3, r2
 800d5c6:	42ab      	cmp	r3, r5
 800d5c8:	ddd2      	ble.n	800d570 <_printf_common+0x3c>
 800d5ca:	0022      	movs	r2, r4
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	9901      	ldr	r1, [sp, #4]
 800d5d0:	9800      	ldr	r0, [sp, #0]
 800d5d2:	9f08      	ldr	r7, [sp, #32]
 800d5d4:	3219      	adds	r2, #25
 800d5d6:	47b8      	blx	r7
 800d5d8:	3001      	adds	r0, #1
 800d5da:	d1f0      	bne.n	800d5be <_printf_common+0x8a>
 800d5dc:	2001      	movs	r0, #1
 800d5de:	4240      	negs	r0, r0
 800d5e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d5e2:	2030      	movs	r0, #48	@ 0x30
 800d5e4:	18e1      	adds	r1, r4, r3
 800d5e6:	3143      	adds	r1, #67	@ 0x43
 800d5e8:	7008      	strb	r0, [r1, #0]
 800d5ea:	0021      	movs	r1, r4
 800d5ec:	1c5a      	adds	r2, r3, #1
 800d5ee:	3145      	adds	r1, #69	@ 0x45
 800d5f0:	7809      	ldrb	r1, [r1, #0]
 800d5f2:	18a2      	adds	r2, r4, r2
 800d5f4:	3243      	adds	r2, #67	@ 0x43
 800d5f6:	3302      	adds	r3, #2
 800d5f8:	7011      	strb	r1, [r2, #0]
 800d5fa:	e7c1      	b.n	800d580 <_printf_common+0x4c>
 800d5fc:	0022      	movs	r2, r4
 800d5fe:	2301      	movs	r3, #1
 800d600:	9901      	ldr	r1, [sp, #4]
 800d602:	9800      	ldr	r0, [sp, #0]
 800d604:	9f08      	ldr	r7, [sp, #32]
 800d606:	321a      	adds	r2, #26
 800d608:	47b8      	blx	r7
 800d60a:	3001      	adds	r0, #1
 800d60c:	d0e6      	beq.n	800d5dc <_printf_common+0xa8>
 800d60e:	3601      	adds	r6, #1
 800d610:	e7d1      	b.n	800d5b6 <_printf_common+0x82>
	...

0800d614 <_printf_i>:
 800d614:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d616:	b08b      	sub	sp, #44	@ 0x2c
 800d618:	9206      	str	r2, [sp, #24]
 800d61a:	000a      	movs	r2, r1
 800d61c:	3243      	adds	r2, #67	@ 0x43
 800d61e:	9307      	str	r3, [sp, #28]
 800d620:	9005      	str	r0, [sp, #20]
 800d622:	9203      	str	r2, [sp, #12]
 800d624:	7e0a      	ldrb	r2, [r1, #24]
 800d626:	000c      	movs	r4, r1
 800d628:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d62a:	2a78      	cmp	r2, #120	@ 0x78
 800d62c:	d809      	bhi.n	800d642 <_printf_i+0x2e>
 800d62e:	2a62      	cmp	r2, #98	@ 0x62
 800d630:	d80b      	bhi.n	800d64a <_printf_i+0x36>
 800d632:	2a00      	cmp	r2, #0
 800d634:	d100      	bne.n	800d638 <_printf_i+0x24>
 800d636:	e0bc      	b.n	800d7b2 <_printf_i+0x19e>
 800d638:	497b      	ldr	r1, [pc, #492]	@ (800d828 <_printf_i+0x214>)
 800d63a:	9104      	str	r1, [sp, #16]
 800d63c:	2a58      	cmp	r2, #88	@ 0x58
 800d63e:	d100      	bne.n	800d642 <_printf_i+0x2e>
 800d640:	e090      	b.n	800d764 <_printf_i+0x150>
 800d642:	0025      	movs	r5, r4
 800d644:	3542      	adds	r5, #66	@ 0x42
 800d646:	702a      	strb	r2, [r5, #0]
 800d648:	e022      	b.n	800d690 <_printf_i+0x7c>
 800d64a:	0010      	movs	r0, r2
 800d64c:	3863      	subs	r0, #99	@ 0x63
 800d64e:	2815      	cmp	r0, #21
 800d650:	d8f7      	bhi.n	800d642 <_printf_i+0x2e>
 800d652:	f7f2 fd6b 	bl	800012c <__gnu_thumb1_case_shi>
 800d656:	0016      	.short	0x0016
 800d658:	fff6001f 	.word	0xfff6001f
 800d65c:	fff6fff6 	.word	0xfff6fff6
 800d660:	001ffff6 	.word	0x001ffff6
 800d664:	fff6fff6 	.word	0xfff6fff6
 800d668:	fff6fff6 	.word	0xfff6fff6
 800d66c:	003600a1 	.word	0x003600a1
 800d670:	fff60080 	.word	0xfff60080
 800d674:	00b2fff6 	.word	0x00b2fff6
 800d678:	0036fff6 	.word	0x0036fff6
 800d67c:	fff6fff6 	.word	0xfff6fff6
 800d680:	0084      	.short	0x0084
 800d682:	0025      	movs	r5, r4
 800d684:	681a      	ldr	r2, [r3, #0]
 800d686:	3542      	adds	r5, #66	@ 0x42
 800d688:	1d11      	adds	r1, r2, #4
 800d68a:	6019      	str	r1, [r3, #0]
 800d68c:	6813      	ldr	r3, [r2, #0]
 800d68e:	702b      	strb	r3, [r5, #0]
 800d690:	2301      	movs	r3, #1
 800d692:	e0a0      	b.n	800d7d6 <_printf_i+0x1c2>
 800d694:	6818      	ldr	r0, [r3, #0]
 800d696:	6809      	ldr	r1, [r1, #0]
 800d698:	1d02      	adds	r2, r0, #4
 800d69a:	060d      	lsls	r5, r1, #24
 800d69c:	d50b      	bpl.n	800d6b6 <_printf_i+0xa2>
 800d69e:	6806      	ldr	r6, [r0, #0]
 800d6a0:	601a      	str	r2, [r3, #0]
 800d6a2:	2e00      	cmp	r6, #0
 800d6a4:	da03      	bge.n	800d6ae <_printf_i+0x9a>
 800d6a6:	232d      	movs	r3, #45	@ 0x2d
 800d6a8:	9a03      	ldr	r2, [sp, #12]
 800d6aa:	4276      	negs	r6, r6
 800d6ac:	7013      	strb	r3, [r2, #0]
 800d6ae:	4b5e      	ldr	r3, [pc, #376]	@ (800d828 <_printf_i+0x214>)
 800d6b0:	270a      	movs	r7, #10
 800d6b2:	9304      	str	r3, [sp, #16]
 800d6b4:	e018      	b.n	800d6e8 <_printf_i+0xd4>
 800d6b6:	6806      	ldr	r6, [r0, #0]
 800d6b8:	601a      	str	r2, [r3, #0]
 800d6ba:	0649      	lsls	r1, r1, #25
 800d6bc:	d5f1      	bpl.n	800d6a2 <_printf_i+0x8e>
 800d6be:	b236      	sxth	r6, r6
 800d6c0:	e7ef      	b.n	800d6a2 <_printf_i+0x8e>
 800d6c2:	6808      	ldr	r0, [r1, #0]
 800d6c4:	6819      	ldr	r1, [r3, #0]
 800d6c6:	c940      	ldmia	r1!, {r6}
 800d6c8:	0605      	lsls	r5, r0, #24
 800d6ca:	d402      	bmi.n	800d6d2 <_printf_i+0xbe>
 800d6cc:	0640      	lsls	r0, r0, #25
 800d6ce:	d500      	bpl.n	800d6d2 <_printf_i+0xbe>
 800d6d0:	b2b6      	uxth	r6, r6
 800d6d2:	6019      	str	r1, [r3, #0]
 800d6d4:	4b54      	ldr	r3, [pc, #336]	@ (800d828 <_printf_i+0x214>)
 800d6d6:	270a      	movs	r7, #10
 800d6d8:	9304      	str	r3, [sp, #16]
 800d6da:	2a6f      	cmp	r2, #111	@ 0x6f
 800d6dc:	d100      	bne.n	800d6e0 <_printf_i+0xcc>
 800d6de:	3f02      	subs	r7, #2
 800d6e0:	0023      	movs	r3, r4
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	3343      	adds	r3, #67	@ 0x43
 800d6e6:	701a      	strb	r2, [r3, #0]
 800d6e8:	6863      	ldr	r3, [r4, #4]
 800d6ea:	60a3      	str	r3, [r4, #8]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	db03      	blt.n	800d6f8 <_printf_i+0xe4>
 800d6f0:	2104      	movs	r1, #4
 800d6f2:	6822      	ldr	r2, [r4, #0]
 800d6f4:	438a      	bics	r2, r1
 800d6f6:	6022      	str	r2, [r4, #0]
 800d6f8:	2e00      	cmp	r6, #0
 800d6fa:	d102      	bne.n	800d702 <_printf_i+0xee>
 800d6fc:	9d03      	ldr	r5, [sp, #12]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d00c      	beq.n	800d71c <_printf_i+0x108>
 800d702:	9d03      	ldr	r5, [sp, #12]
 800d704:	0030      	movs	r0, r6
 800d706:	0039      	movs	r1, r7
 800d708:	f7f2 fda0 	bl	800024c <__aeabi_uidivmod>
 800d70c:	9b04      	ldr	r3, [sp, #16]
 800d70e:	3d01      	subs	r5, #1
 800d710:	5c5b      	ldrb	r3, [r3, r1]
 800d712:	702b      	strb	r3, [r5, #0]
 800d714:	0033      	movs	r3, r6
 800d716:	0006      	movs	r6, r0
 800d718:	429f      	cmp	r7, r3
 800d71a:	d9f3      	bls.n	800d704 <_printf_i+0xf0>
 800d71c:	2f08      	cmp	r7, #8
 800d71e:	d109      	bne.n	800d734 <_printf_i+0x120>
 800d720:	6823      	ldr	r3, [r4, #0]
 800d722:	07db      	lsls	r3, r3, #31
 800d724:	d506      	bpl.n	800d734 <_printf_i+0x120>
 800d726:	6862      	ldr	r2, [r4, #4]
 800d728:	6923      	ldr	r3, [r4, #16]
 800d72a:	429a      	cmp	r2, r3
 800d72c:	dc02      	bgt.n	800d734 <_printf_i+0x120>
 800d72e:	2330      	movs	r3, #48	@ 0x30
 800d730:	3d01      	subs	r5, #1
 800d732:	702b      	strb	r3, [r5, #0]
 800d734:	9b03      	ldr	r3, [sp, #12]
 800d736:	1b5b      	subs	r3, r3, r5
 800d738:	6123      	str	r3, [r4, #16]
 800d73a:	9b07      	ldr	r3, [sp, #28]
 800d73c:	0021      	movs	r1, r4
 800d73e:	9300      	str	r3, [sp, #0]
 800d740:	9805      	ldr	r0, [sp, #20]
 800d742:	9b06      	ldr	r3, [sp, #24]
 800d744:	aa09      	add	r2, sp, #36	@ 0x24
 800d746:	f7ff fef5 	bl	800d534 <_printf_common>
 800d74a:	3001      	adds	r0, #1
 800d74c:	d148      	bne.n	800d7e0 <_printf_i+0x1cc>
 800d74e:	2001      	movs	r0, #1
 800d750:	4240      	negs	r0, r0
 800d752:	b00b      	add	sp, #44	@ 0x2c
 800d754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d756:	2220      	movs	r2, #32
 800d758:	6809      	ldr	r1, [r1, #0]
 800d75a:	430a      	orrs	r2, r1
 800d75c:	6022      	str	r2, [r4, #0]
 800d75e:	2278      	movs	r2, #120	@ 0x78
 800d760:	4932      	ldr	r1, [pc, #200]	@ (800d82c <_printf_i+0x218>)
 800d762:	9104      	str	r1, [sp, #16]
 800d764:	0021      	movs	r1, r4
 800d766:	3145      	adds	r1, #69	@ 0x45
 800d768:	700a      	strb	r2, [r1, #0]
 800d76a:	6819      	ldr	r1, [r3, #0]
 800d76c:	6822      	ldr	r2, [r4, #0]
 800d76e:	c940      	ldmia	r1!, {r6}
 800d770:	0610      	lsls	r0, r2, #24
 800d772:	d402      	bmi.n	800d77a <_printf_i+0x166>
 800d774:	0650      	lsls	r0, r2, #25
 800d776:	d500      	bpl.n	800d77a <_printf_i+0x166>
 800d778:	b2b6      	uxth	r6, r6
 800d77a:	6019      	str	r1, [r3, #0]
 800d77c:	07d3      	lsls	r3, r2, #31
 800d77e:	d502      	bpl.n	800d786 <_printf_i+0x172>
 800d780:	2320      	movs	r3, #32
 800d782:	4313      	orrs	r3, r2
 800d784:	6023      	str	r3, [r4, #0]
 800d786:	2e00      	cmp	r6, #0
 800d788:	d001      	beq.n	800d78e <_printf_i+0x17a>
 800d78a:	2710      	movs	r7, #16
 800d78c:	e7a8      	b.n	800d6e0 <_printf_i+0xcc>
 800d78e:	2220      	movs	r2, #32
 800d790:	6823      	ldr	r3, [r4, #0]
 800d792:	4393      	bics	r3, r2
 800d794:	6023      	str	r3, [r4, #0]
 800d796:	e7f8      	b.n	800d78a <_printf_i+0x176>
 800d798:	681a      	ldr	r2, [r3, #0]
 800d79a:	680d      	ldr	r5, [r1, #0]
 800d79c:	1d10      	adds	r0, r2, #4
 800d79e:	6949      	ldr	r1, [r1, #20]
 800d7a0:	6018      	str	r0, [r3, #0]
 800d7a2:	6813      	ldr	r3, [r2, #0]
 800d7a4:	062e      	lsls	r6, r5, #24
 800d7a6:	d501      	bpl.n	800d7ac <_printf_i+0x198>
 800d7a8:	6019      	str	r1, [r3, #0]
 800d7aa:	e002      	b.n	800d7b2 <_printf_i+0x19e>
 800d7ac:	066d      	lsls	r5, r5, #25
 800d7ae:	d5fb      	bpl.n	800d7a8 <_printf_i+0x194>
 800d7b0:	8019      	strh	r1, [r3, #0]
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	9d03      	ldr	r5, [sp, #12]
 800d7b6:	6123      	str	r3, [r4, #16]
 800d7b8:	e7bf      	b.n	800d73a <_printf_i+0x126>
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	1d11      	adds	r1, r2, #4
 800d7be:	6019      	str	r1, [r3, #0]
 800d7c0:	6815      	ldr	r5, [r2, #0]
 800d7c2:	2100      	movs	r1, #0
 800d7c4:	0028      	movs	r0, r5
 800d7c6:	6862      	ldr	r2, [r4, #4]
 800d7c8:	f000 f9f7 	bl	800dbba <memchr>
 800d7cc:	2800      	cmp	r0, #0
 800d7ce:	d001      	beq.n	800d7d4 <_printf_i+0x1c0>
 800d7d0:	1b40      	subs	r0, r0, r5
 800d7d2:	6060      	str	r0, [r4, #4]
 800d7d4:	6863      	ldr	r3, [r4, #4]
 800d7d6:	6123      	str	r3, [r4, #16]
 800d7d8:	2300      	movs	r3, #0
 800d7da:	9a03      	ldr	r2, [sp, #12]
 800d7dc:	7013      	strb	r3, [r2, #0]
 800d7de:	e7ac      	b.n	800d73a <_printf_i+0x126>
 800d7e0:	002a      	movs	r2, r5
 800d7e2:	6923      	ldr	r3, [r4, #16]
 800d7e4:	9906      	ldr	r1, [sp, #24]
 800d7e6:	9805      	ldr	r0, [sp, #20]
 800d7e8:	9d07      	ldr	r5, [sp, #28]
 800d7ea:	47a8      	blx	r5
 800d7ec:	3001      	adds	r0, #1
 800d7ee:	d0ae      	beq.n	800d74e <_printf_i+0x13a>
 800d7f0:	6823      	ldr	r3, [r4, #0]
 800d7f2:	079b      	lsls	r3, r3, #30
 800d7f4:	d415      	bmi.n	800d822 <_printf_i+0x20e>
 800d7f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7f8:	68e0      	ldr	r0, [r4, #12]
 800d7fa:	4298      	cmp	r0, r3
 800d7fc:	daa9      	bge.n	800d752 <_printf_i+0x13e>
 800d7fe:	0018      	movs	r0, r3
 800d800:	e7a7      	b.n	800d752 <_printf_i+0x13e>
 800d802:	0022      	movs	r2, r4
 800d804:	2301      	movs	r3, #1
 800d806:	9906      	ldr	r1, [sp, #24]
 800d808:	9805      	ldr	r0, [sp, #20]
 800d80a:	9e07      	ldr	r6, [sp, #28]
 800d80c:	3219      	adds	r2, #25
 800d80e:	47b0      	blx	r6
 800d810:	3001      	adds	r0, #1
 800d812:	d09c      	beq.n	800d74e <_printf_i+0x13a>
 800d814:	3501      	adds	r5, #1
 800d816:	68e3      	ldr	r3, [r4, #12]
 800d818:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d81a:	1a9b      	subs	r3, r3, r2
 800d81c:	42ab      	cmp	r3, r5
 800d81e:	dcf0      	bgt.n	800d802 <_printf_i+0x1ee>
 800d820:	e7e9      	b.n	800d7f6 <_printf_i+0x1e2>
 800d822:	2500      	movs	r5, #0
 800d824:	e7f7      	b.n	800d816 <_printf_i+0x202>
 800d826:	46c0      	nop			@ (mov r8, r8)
 800d828:	08010076 	.word	0x08010076
 800d82c:	08010087 	.word	0x08010087

0800d830 <std>:
 800d830:	2300      	movs	r3, #0
 800d832:	b510      	push	{r4, lr}
 800d834:	0004      	movs	r4, r0
 800d836:	6003      	str	r3, [r0, #0]
 800d838:	6043      	str	r3, [r0, #4]
 800d83a:	6083      	str	r3, [r0, #8]
 800d83c:	8181      	strh	r1, [r0, #12]
 800d83e:	6643      	str	r3, [r0, #100]	@ 0x64
 800d840:	81c2      	strh	r2, [r0, #14]
 800d842:	6103      	str	r3, [r0, #16]
 800d844:	6143      	str	r3, [r0, #20]
 800d846:	6183      	str	r3, [r0, #24]
 800d848:	0019      	movs	r1, r3
 800d84a:	2208      	movs	r2, #8
 800d84c:	305c      	adds	r0, #92	@ 0x5c
 800d84e:	f000 f92d 	bl	800daac <memset>
 800d852:	4b0b      	ldr	r3, [pc, #44]	@ (800d880 <std+0x50>)
 800d854:	6224      	str	r4, [r4, #32]
 800d856:	6263      	str	r3, [r4, #36]	@ 0x24
 800d858:	4b0a      	ldr	r3, [pc, #40]	@ (800d884 <std+0x54>)
 800d85a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d85c:	4b0a      	ldr	r3, [pc, #40]	@ (800d888 <std+0x58>)
 800d85e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d860:	4b0a      	ldr	r3, [pc, #40]	@ (800d88c <std+0x5c>)
 800d862:	6323      	str	r3, [r4, #48]	@ 0x30
 800d864:	4b0a      	ldr	r3, [pc, #40]	@ (800d890 <std+0x60>)
 800d866:	429c      	cmp	r4, r3
 800d868:	d005      	beq.n	800d876 <std+0x46>
 800d86a:	4b0a      	ldr	r3, [pc, #40]	@ (800d894 <std+0x64>)
 800d86c:	429c      	cmp	r4, r3
 800d86e:	d002      	beq.n	800d876 <std+0x46>
 800d870:	4b09      	ldr	r3, [pc, #36]	@ (800d898 <std+0x68>)
 800d872:	429c      	cmp	r4, r3
 800d874:	d103      	bne.n	800d87e <std+0x4e>
 800d876:	0020      	movs	r0, r4
 800d878:	3058      	adds	r0, #88	@ 0x58
 800d87a:	f000 f99b 	bl	800dbb4 <__retarget_lock_init_recursive>
 800d87e:	bd10      	pop	{r4, pc}
 800d880:	0800d9f9 	.word	0x0800d9f9
 800d884:	0800da21 	.word	0x0800da21
 800d888:	0800da59 	.word	0x0800da59
 800d88c:	0800da85 	.word	0x0800da85
 800d890:	20001b9c 	.word	0x20001b9c
 800d894:	20001c04 	.word	0x20001c04
 800d898:	20001c6c 	.word	0x20001c6c

0800d89c <stdio_exit_handler>:
 800d89c:	b510      	push	{r4, lr}
 800d89e:	4a03      	ldr	r2, [pc, #12]	@ (800d8ac <stdio_exit_handler+0x10>)
 800d8a0:	4903      	ldr	r1, [pc, #12]	@ (800d8b0 <stdio_exit_handler+0x14>)
 800d8a2:	4804      	ldr	r0, [pc, #16]	@ (800d8b4 <stdio_exit_handler+0x18>)
 800d8a4:	f000 f86c 	bl	800d980 <_fwalk_sglue>
 800d8a8:	bd10      	pop	{r4, pc}
 800d8aa:	46c0      	nop			@ (mov r8, r8)
 800d8ac:	20000194 	.word	0x20000194
 800d8b0:	0800f605 	.word	0x0800f605
 800d8b4:	200001a4 	.word	0x200001a4

0800d8b8 <cleanup_stdio>:
 800d8b8:	6841      	ldr	r1, [r0, #4]
 800d8ba:	4b0b      	ldr	r3, [pc, #44]	@ (800d8e8 <cleanup_stdio+0x30>)
 800d8bc:	b510      	push	{r4, lr}
 800d8be:	0004      	movs	r4, r0
 800d8c0:	4299      	cmp	r1, r3
 800d8c2:	d001      	beq.n	800d8c8 <cleanup_stdio+0x10>
 800d8c4:	f001 fe9e 	bl	800f604 <_fflush_r>
 800d8c8:	68a1      	ldr	r1, [r4, #8]
 800d8ca:	4b08      	ldr	r3, [pc, #32]	@ (800d8ec <cleanup_stdio+0x34>)
 800d8cc:	4299      	cmp	r1, r3
 800d8ce:	d002      	beq.n	800d8d6 <cleanup_stdio+0x1e>
 800d8d0:	0020      	movs	r0, r4
 800d8d2:	f001 fe97 	bl	800f604 <_fflush_r>
 800d8d6:	68e1      	ldr	r1, [r4, #12]
 800d8d8:	4b05      	ldr	r3, [pc, #20]	@ (800d8f0 <cleanup_stdio+0x38>)
 800d8da:	4299      	cmp	r1, r3
 800d8dc:	d002      	beq.n	800d8e4 <cleanup_stdio+0x2c>
 800d8de:	0020      	movs	r0, r4
 800d8e0:	f001 fe90 	bl	800f604 <_fflush_r>
 800d8e4:	bd10      	pop	{r4, pc}
 800d8e6:	46c0      	nop			@ (mov r8, r8)
 800d8e8:	20001b9c 	.word	0x20001b9c
 800d8ec:	20001c04 	.word	0x20001c04
 800d8f0:	20001c6c 	.word	0x20001c6c

0800d8f4 <global_stdio_init.part.0>:
 800d8f4:	b510      	push	{r4, lr}
 800d8f6:	4b09      	ldr	r3, [pc, #36]	@ (800d91c <global_stdio_init.part.0+0x28>)
 800d8f8:	4a09      	ldr	r2, [pc, #36]	@ (800d920 <global_stdio_init.part.0+0x2c>)
 800d8fa:	2104      	movs	r1, #4
 800d8fc:	601a      	str	r2, [r3, #0]
 800d8fe:	4809      	ldr	r0, [pc, #36]	@ (800d924 <global_stdio_init.part.0+0x30>)
 800d900:	2200      	movs	r2, #0
 800d902:	f7ff ff95 	bl	800d830 <std>
 800d906:	2201      	movs	r2, #1
 800d908:	2109      	movs	r1, #9
 800d90a:	4807      	ldr	r0, [pc, #28]	@ (800d928 <global_stdio_init.part.0+0x34>)
 800d90c:	f7ff ff90 	bl	800d830 <std>
 800d910:	2202      	movs	r2, #2
 800d912:	2112      	movs	r1, #18
 800d914:	4805      	ldr	r0, [pc, #20]	@ (800d92c <global_stdio_init.part.0+0x38>)
 800d916:	f7ff ff8b 	bl	800d830 <std>
 800d91a:	bd10      	pop	{r4, pc}
 800d91c:	20001cd4 	.word	0x20001cd4
 800d920:	0800d89d 	.word	0x0800d89d
 800d924:	20001b9c 	.word	0x20001b9c
 800d928:	20001c04 	.word	0x20001c04
 800d92c:	20001c6c 	.word	0x20001c6c

0800d930 <__sfp_lock_acquire>:
 800d930:	b510      	push	{r4, lr}
 800d932:	4802      	ldr	r0, [pc, #8]	@ (800d93c <__sfp_lock_acquire+0xc>)
 800d934:	f000 f93f 	bl	800dbb6 <__retarget_lock_acquire_recursive>
 800d938:	bd10      	pop	{r4, pc}
 800d93a:	46c0      	nop			@ (mov r8, r8)
 800d93c:	20001cdd 	.word	0x20001cdd

0800d940 <__sfp_lock_release>:
 800d940:	b510      	push	{r4, lr}
 800d942:	4802      	ldr	r0, [pc, #8]	@ (800d94c <__sfp_lock_release+0xc>)
 800d944:	f000 f938 	bl	800dbb8 <__retarget_lock_release_recursive>
 800d948:	bd10      	pop	{r4, pc}
 800d94a:	46c0      	nop			@ (mov r8, r8)
 800d94c:	20001cdd 	.word	0x20001cdd

0800d950 <__sinit>:
 800d950:	b510      	push	{r4, lr}
 800d952:	0004      	movs	r4, r0
 800d954:	f7ff ffec 	bl	800d930 <__sfp_lock_acquire>
 800d958:	6a23      	ldr	r3, [r4, #32]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d002      	beq.n	800d964 <__sinit+0x14>
 800d95e:	f7ff ffef 	bl	800d940 <__sfp_lock_release>
 800d962:	bd10      	pop	{r4, pc}
 800d964:	4b04      	ldr	r3, [pc, #16]	@ (800d978 <__sinit+0x28>)
 800d966:	6223      	str	r3, [r4, #32]
 800d968:	4b04      	ldr	r3, [pc, #16]	@ (800d97c <__sinit+0x2c>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d1f6      	bne.n	800d95e <__sinit+0xe>
 800d970:	f7ff ffc0 	bl	800d8f4 <global_stdio_init.part.0>
 800d974:	e7f3      	b.n	800d95e <__sinit+0xe>
 800d976:	46c0      	nop			@ (mov r8, r8)
 800d978:	0800d8b9 	.word	0x0800d8b9
 800d97c:	20001cd4 	.word	0x20001cd4

0800d980 <_fwalk_sglue>:
 800d980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d982:	0014      	movs	r4, r2
 800d984:	2600      	movs	r6, #0
 800d986:	9000      	str	r0, [sp, #0]
 800d988:	9101      	str	r1, [sp, #4]
 800d98a:	68a5      	ldr	r5, [r4, #8]
 800d98c:	6867      	ldr	r7, [r4, #4]
 800d98e:	3f01      	subs	r7, #1
 800d990:	d504      	bpl.n	800d99c <_fwalk_sglue+0x1c>
 800d992:	6824      	ldr	r4, [r4, #0]
 800d994:	2c00      	cmp	r4, #0
 800d996:	d1f8      	bne.n	800d98a <_fwalk_sglue+0xa>
 800d998:	0030      	movs	r0, r6
 800d99a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d99c:	89ab      	ldrh	r3, [r5, #12]
 800d99e:	2b01      	cmp	r3, #1
 800d9a0:	d908      	bls.n	800d9b4 <_fwalk_sglue+0x34>
 800d9a2:	220e      	movs	r2, #14
 800d9a4:	5eab      	ldrsh	r3, [r5, r2]
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	d004      	beq.n	800d9b4 <_fwalk_sglue+0x34>
 800d9aa:	0029      	movs	r1, r5
 800d9ac:	9800      	ldr	r0, [sp, #0]
 800d9ae:	9b01      	ldr	r3, [sp, #4]
 800d9b0:	4798      	blx	r3
 800d9b2:	4306      	orrs	r6, r0
 800d9b4:	3568      	adds	r5, #104	@ 0x68
 800d9b6:	e7ea      	b.n	800d98e <_fwalk_sglue+0xe>

0800d9b8 <siprintf>:
 800d9b8:	b40e      	push	{r1, r2, r3}
 800d9ba:	b500      	push	{lr}
 800d9bc:	490b      	ldr	r1, [pc, #44]	@ (800d9ec <siprintf+0x34>)
 800d9be:	b09c      	sub	sp, #112	@ 0x70
 800d9c0:	ab1d      	add	r3, sp, #116	@ 0x74
 800d9c2:	9002      	str	r0, [sp, #8]
 800d9c4:	9006      	str	r0, [sp, #24]
 800d9c6:	9107      	str	r1, [sp, #28]
 800d9c8:	9104      	str	r1, [sp, #16]
 800d9ca:	4809      	ldr	r0, [pc, #36]	@ (800d9f0 <siprintf+0x38>)
 800d9cc:	4909      	ldr	r1, [pc, #36]	@ (800d9f4 <siprintf+0x3c>)
 800d9ce:	cb04      	ldmia	r3!, {r2}
 800d9d0:	9105      	str	r1, [sp, #20]
 800d9d2:	6800      	ldr	r0, [r0, #0]
 800d9d4:	a902      	add	r1, sp, #8
 800d9d6:	9301      	str	r3, [sp, #4]
 800d9d8:	f001 fc90 	bl	800f2fc <_svfiprintf_r>
 800d9dc:	2200      	movs	r2, #0
 800d9de:	9b02      	ldr	r3, [sp, #8]
 800d9e0:	701a      	strb	r2, [r3, #0]
 800d9e2:	b01c      	add	sp, #112	@ 0x70
 800d9e4:	bc08      	pop	{r3}
 800d9e6:	b003      	add	sp, #12
 800d9e8:	4718      	bx	r3
 800d9ea:	46c0      	nop			@ (mov r8, r8)
 800d9ec:	7fffffff 	.word	0x7fffffff
 800d9f0:	200001a0 	.word	0x200001a0
 800d9f4:	ffff0208 	.word	0xffff0208

0800d9f8 <__sread>:
 800d9f8:	b570      	push	{r4, r5, r6, lr}
 800d9fa:	000c      	movs	r4, r1
 800d9fc:	250e      	movs	r5, #14
 800d9fe:	5f49      	ldrsh	r1, [r1, r5]
 800da00:	f000 f886 	bl	800db10 <_read_r>
 800da04:	2800      	cmp	r0, #0
 800da06:	db03      	blt.n	800da10 <__sread+0x18>
 800da08:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800da0a:	181b      	adds	r3, r3, r0
 800da0c:	6563      	str	r3, [r4, #84]	@ 0x54
 800da0e:	bd70      	pop	{r4, r5, r6, pc}
 800da10:	89a3      	ldrh	r3, [r4, #12]
 800da12:	4a02      	ldr	r2, [pc, #8]	@ (800da1c <__sread+0x24>)
 800da14:	4013      	ands	r3, r2
 800da16:	81a3      	strh	r3, [r4, #12]
 800da18:	e7f9      	b.n	800da0e <__sread+0x16>
 800da1a:	46c0      	nop			@ (mov r8, r8)
 800da1c:	ffffefff 	.word	0xffffefff

0800da20 <__swrite>:
 800da20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da22:	001f      	movs	r7, r3
 800da24:	898b      	ldrh	r3, [r1, #12]
 800da26:	0005      	movs	r5, r0
 800da28:	000c      	movs	r4, r1
 800da2a:	0016      	movs	r6, r2
 800da2c:	05db      	lsls	r3, r3, #23
 800da2e:	d505      	bpl.n	800da3c <__swrite+0x1c>
 800da30:	230e      	movs	r3, #14
 800da32:	5ec9      	ldrsh	r1, [r1, r3]
 800da34:	2200      	movs	r2, #0
 800da36:	2302      	movs	r3, #2
 800da38:	f000 f856 	bl	800dae8 <_lseek_r>
 800da3c:	89a3      	ldrh	r3, [r4, #12]
 800da3e:	4a05      	ldr	r2, [pc, #20]	@ (800da54 <__swrite+0x34>)
 800da40:	0028      	movs	r0, r5
 800da42:	4013      	ands	r3, r2
 800da44:	81a3      	strh	r3, [r4, #12]
 800da46:	0032      	movs	r2, r6
 800da48:	230e      	movs	r3, #14
 800da4a:	5ee1      	ldrsh	r1, [r4, r3]
 800da4c:	003b      	movs	r3, r7
 800da4e:	f000 f873 	bl	800db38 <_write_r>
 800da52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da54:	ffffefff 	.word	0xffffefff

0800da58 <__sseek>:
 800da58:	b570      	push	{r4, r5, r6, lr}
 800da5a:	000c      	movs	r4, r1
 800da5c:	250e      	movs	r5, #14
 800da5e:	5f49      	ldrsh	r1, [r1, r5]
 800da60:	f000 f842 	bl	800dae8 <_lseek_r>
 800da64:	89a3      	ldrh	r3, [r4, #12]
 800da66:	1c42      	adds	r2, r0, #1
 800da68:	d103      	bne.n	800da72 <__sseek+0x1a>
 800da6a:	4a05      	ldr	r2, [pc, #20]	@ (800da80 <__sseek+0x28>)
 800da6c:	4013      	ands	r3, r2
 800da6e:	81a3      	strh	r3, [r4, #12]
 800da70:	bd70      	pop	{r4, r5, r6, pc}
 800da72:	2280      	movs	r2, #128	@ 0x80
 800da74:	0152      	lsls	r2, r2, #5
 800da76:	4313      	orrs	r3, r2
 800da78:	81a3      	strh	r3, [r4, #12]
 800da7a:	6560      	str	r0, [r4, #84]	@ 0x54
 800da7c:	e7f8      	b.n	800da70 <__sseek+0x18>
 800da7e:	46c0      	nop			@ (mov r8, r8)
 800da80:	ffffefff 	.word	0xffffefff

0800da84 <__sclose>:
 800da84:	b510      	push	{r4, lr}
 800da86:	230e      	movs	r3, #14
 800da88:	5ec9      	ldrsh	r1, [r1, r3]
 800da8a:	f000 f81b 	bl	800dac4 <_close_r>
 800da8e:	bd10      	pop	{r4, pc}

0800da90 <memcmp>:
 800da90:	b530      	push	{r4, r5, lr}
 800da92:	2400      	movs	r4, #0
 800da94:	3901      	subs	r1, #1
 800da96:	42a2      	cmp	r2, r4
 800da98:	d101      	bne.n	800da9e <memcmp+0xe>
 800da9a:	2000      	movs	r0, #0
 800da9c:	e005      	b.n	800daaa <memcmp+0x1a>
 800da9e:	5d03      	ldrb	r3, [r0, r4]
 800daa0:	3401      	adds	r4, #1
 800daa2:	5d0d      	ldrb	r5, [r1, r4]
 800daa4:	42ab      	cmp	r3, r5
 800daa6:	d0f6      	beq.n	800da96 <memcmp+0x6>
 800daa8:	1b58      	subs	r0, r3, r5
 800daaa:	bd30      	pop	{r4, r5, pc}

0800daac <memset>:
 800daac:	0003      	movs	r3, r0
 800daae:	1882      	adds	r2, r0, r2
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d100      	bne.n	800dab6 <memset+0xa>
 800dab4:	4770      	bx	lr
 800dab6:	7019      	strb	r1, [r3, #0]
 800dab8:	3301      	adds	r3, #1
 800daba:	e7f9      	b.n	800dab0 <memset+0x4>

0800dabc <_localeconv_r>:
 800dabc:	4800      	ldr	r0, [pc, #0]	@ (800dac0 <_localeconv_r+0x4>)
 800dabe:	4770      	bx	lr
 800dac0:	200002e0 	.word	0x200002e0

0800dac4 <_close_r>:
 800dac4:	2300      	movs	r3, #0
 800dac6:	b570      	push	{r4, r5, r6, lr}
 800dac8:	4d06      	ldr	r5, [pc, #24]	@ (800dae4 <_close_r+0x20>)
 800daca:	0004      	movs	r4, r0
 800dacc:	0008      	movs	r0, r1
 800dace:	602b      	str	r3, [r5, #0]
 800dad0:	f7f5 facc 	bl	800306c <_close>
 800dad4:	1c43      	adds	r3, r0, #1
 800dad6:	d103      	bne.n	800dae0 <_close_r+0x1c>
 800dad8:	682b      	ldr	r3, [r5, #0]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d000      	beq.n	800dae0 <_close_r+0x1c>
 800dade:	6023      	str	r3, [r4, #0]
 800dae0:	bd70      	pop	{r4, r5, r6, pc}
 800dae2:	46c0      	nop			@ (mov r8, r8)
 800dae4:	20001cd8 	.word	0x20001cd8

0800dae8 <_lseek_r>:
 800dae8:	b570      	push	{r4, r5, r6, lr}
 800daea:	0004      	movs	r4, r0
 800daec:	0008      	movs	r0, r1
 800daee:	0011      	movs	r1, r2
 800daf0:	001a      	movs	r2, r3
 800daf2:	2300      	movs	r3, #0
 800daf4:	4d05      	ldr	r5, [pc, #20]	@ (800db0c <_lseek_r+0x24>)
 800daf6:	602b      	str	r3, [r5, #0]
 800daf8:	f7f5 fad9 	bl	80030ae <_lseek>
 800dafc:	1c43      	adds	r3, r0, #1
 800dafe:	d103      	bne.n	800db08 <_lseek_r+0x20>
 800db00:	682b      	ldr	r3, [r5, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d000      	beq.n	800db08 <_lseek_r+0x20>
 800db06:	6023      	str	r3, [r4, #0]
 800db08:	bd70      	pop	{r4, r5, r6, pc}
 800db0a:	46c0      	nop			@ (mov r8, r8)
 800db0c:	20001cd8 	.word	0x20001cd8

0800db10 <_read_r>:
 800db10:	b570      	push	{r4, r5, r6, lr}
 800db12:	0004      	movs	r4, r0
 800db14:	0008      	movs	r0, r1
 800db16:	0011      	movs	r1, r2
 800db18:	001a      	movs	r2, r3
 800db1a:	2300      	movs	r3, #0
 800db1c:	4d05      	ldr	r5, [pc, #20]	@ (800db34 <_read_r+0x24>)
 800db1e:	602b      	str	r3, [r5, #0]
 800db20:	f7f5 fa6b 	bl	8002ffa <_read>
 800db24:	1c43      	adds	r3, r0, #1
 800db26:	d103      	bne.n	800db30 <_read_r+0x20>
 800db28:	682b      	ldr	r3, [r5, #0]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d000      	beq.n	800db30 <_read_r+0x20>
 800db2e:	6023      	str	r3, [r4, #0]
 800db30:	bd70      	pop	{r4, r5, r6, pc}
 800db32:	46c0      	nop			@ (mov r8, r8)
 800db34:	20001cd8 	.word	0x20001cd8

0800db38 <_write_r>:
 800db38:	b570      	push	{r4, r5, r6, lr}
 800db3a:	0004      	movs	r4, r0
 800db3c:	0008      	movs	r0, r1
 800db3e:	0011      	movs	r1, r2
 800db40:	001a      	movs	r2, r3
 800db42:	2300      	movs	r3, #0
 800db44:	4d05      	ldr	r5, [pc, #20]	@ (800db5c <_write_r+0x24>)
 800db46:	602b      	str	r3, [r5, #0]
 800db48:	f7f5 fa74 	bl	8003034 <_write>
 800db4c:	1c43      	adds	r3, r0, #1
 800db4e:	d103      	bne.n	800db58 <_write_r+0x20>
 800db50:	682b      	ldr	r3, [r5, #0]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d000      	beq.n	800db58 <_write_r+0x20>
 800db56:	6023      	str	r3, [r4, #0]
 800db58:	bd70      	pop	{r4, r5, r6, pc}
 800db5a:	46c0      	nop			@ (mov r8, r8)
 800db5c:	20001cd8 	.word	0x20001cd8

0800db60 <__errno>:
 800db60:	4b01      	ldr	r3, [pc, #4]	@ (800db68 <__errno+0x8>)
 800db62:	6818      	ldr	r0, [r3, #0]
 800db64:	4770      	bx	lr
 800db66:	46c0      	nop			@ (mov r8, r8)
 800db68:	200001a0 	.word	0x200001a0

0800db6c <__libc_init_array>:
 800db6c:	b570      	push	{r4, r5, r6, lr}
 800db6e:	2600      	movs	r6, #0
 800db70:	4c0c      	ldr	r4, [pc, #48]	@ (800dba4 <__libc_init_array+0x38>)
 800db72:	4d0d      	ldr	r5, [pc, #52]	@ (800dba8 <__libc_init_array+0x3c>)
 800db74:	1b64      	subs	r4, r4, r5
 800db76:	10a4      	asrs	r4, r4, #2
 800db78:	42a6      	cmp	r6, r4
 800db7a:	d109      	bne.n	800db90 <__libc_init_array+0x24>
 800db7c:	2600      	movs	r6, #0
 800db7e:	f002 f907 	bl	800fd90 <_init>
 800db82:	4c0a      	ldr	r4, [pc, #40]	@ (800dbac <__libc_init_array+0x40>)
 800db84:	4d0a      	ldr	r5, [pc, #40]	@ (800dbb0 <__libc_init_array+0x44>)
 800db86:	1b64      	subs	r4, r4, r5
 800db88:	10a4      	asrs	r4, r4, #2
 800db8a:	42a6      	cmp	r6, r4
 800db8c:	d105      	bne.n	800db9a <__libc_init_array+0x2e>
 800db8e:	bd70      	pop	{r4, r5, r6, pc}
 800db90:	00b3      	lsls	r3, r6, #2
 800db92:	58eb      	ldr	r3, [r5, r3]
 800db94:	4798      	blx	r3
 800db96:	3601      	adds	r6, #1
 800db98:	e7ee      	b.n	800db78 <__libc_init_array+0xc>
 800db9a:	00b3      	lsls	r3, r6, #2
 800db9c:	58eb      	ldr	r3, [r5, r3]
 800db9e:	4798      	blx	r3
 800dba0:	3601      	adds	r6, #1
 800dba2:	e7f2      	b.n	800db8a <__libc_init_array+0x1e>
 800dba4:	080103d8 	.word	0x080103d8
 800dba8:	080103d8 	.word	0x080103d8
 800dbac:	080103dc 	.word	0x080103dc
 800dbb0:	080103d8 	.word	0x080103d8

0800dbb4 <__retarget_lock_init_recursive>:
 800dbb4:	4770      	bx	lr

0800dbb6 <__retarget_lock_acquire_recursive>:
 800dbb6:	4770      	bx	lr

0800dbb8 <__retarget_lock_release_recursive>:
 800dbb8:	4770      	bx	lr

0800dbba <memchr>:
 800dbba:	b2c9      	uxtb	r1, r1
 800dbbc:	1882      	adds	r2, r0, r2
 800dbbe:	4290      	cmp	r0, r2
 800dbc0:	d101      	bne.n	800dbc6 <memchr+0xc>
 800dbc2:	2000      	movs	r0, #0
 800dbc4:	4770      	bx	lr
 800dbc6:	7803      	ldrb	r3, [r0, #0]
 800dbc8:	428b      	cmp	r3, r1
 800dbca:	d0fb      	beq.n	800dbc4 <memchr+0xa>
 800dbcc:	3001      	adds	r0, #1
 800dbce:	e7f6      	b.n	800dbbe <memchr+0x4>

0800dbd0 <memcpy>:
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	b510      	push	{r4, lr}
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d100      	bne.n	800dbda <memcpy+0xa>
 800dbd8:	bd10      	pop	{r4, pc}
 800dbda:	5ccc      	ldrb	r4, [r1, r3]
 800dbdc:	54c4      	strb	r4, [r0, r3]
 800dbde:	3301      	adds	r3, #1
 800dbe0:	e7f8      	b.n	800dbd4 <memcpy+0x4>

0800dbe2 <quorem>:
 800dbe2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbe4:	6902      	ldr	r2, [r0, #16]
 800dbe6:	690f      	ldr	r7, [r1, #16]
 800dbe8:	b087      	sub	sp, #28
 800dbea:	0006      	movs	r6, r0
 800dbec:	000b      	movs	r3, r1
 800dbee:	2000      	movs	r0, #0
 800dbf0:	9102      	str	r1, [sp, #8]
 800dbf2:	42ba      	cmp	r2, r7
 800dbf4:	db6d      	blt.n	800dcd2 <quorem+0xf0>
 800dbf6:	3f01      	subs	r7, #1
 800dbf8:	00bc      	lsls	r4, r7, #2
 800dbfa:	3314      	adds	r3, #20
 800dbfc:	9305      	str	r3, [sp, #20]
 800dbfe:	191b      	adds	r3, r3, r4
 800dc00:	9303      	str	r3, [sp, #12]
 800dc02:	0033      	movs	r3, r6
 800dc04:	3314      	adds	r3, #20
 800dc06:	191c      	adds	r4, r3, r4
 800dc08:	9301      	str	r3, [sp, #4]
 800dc0a:	6823      	ldr	r3, [r4, #0]
 800dc0c:	9304      	str	r3, [sp, #16]
 800dc0e:	9b03      	ldr	r3, [sp, #12]
 800dc10:	9804      	ldr	r0, [sp, #16]
 800dc12:	681d      	ldr	r5, [r3, #0]
 800dc14:	3501      	adds	r5, #1
 800dc16:	0029      	movs	r1, r5
 800dc18:	f7f2 fa92 	bl	8000140 <__udivsi3>
 800dc1c:	9b04      	ldr	r3, [sp, #16]
 800dc1e:	9000      	str	r0, [sp, #0]
 800dc20:	42ab      	cmp	r3, r5
 800dc22:	d32b      	bcc.n	800dc7c <quorem+0x9a>
 800dc24:	9b05      	ldr	r3, [sp, #20]
 800dc26:	9d01      	ldr	r5, [sp, #4]
 800dc28:	469c      	mov	ip, r3
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	9305      	str	r3, [sp, #20]
 800dc2e:	9304      	str	r3, [sp, #16]
 800dc30:	4662      	mov	r2, ip
 800dc32:	ca08      	ldmia	r2!, {r3}
 800dc34:	6828      	ldr	r0, [r5, #0]
 800dc36:	4694      	mov	ip, r2
 800dc38:	9a00      	ldr	r2, [sp, #0]
 800dc3a:	b299      	uxth	r1, r3
 800dc3c:	4351      	muls	r1, r2
 800dc3e:	9a05      	ldr	r2, [sp, #20]
 800dc40:	0c1b      	lsrs	r3, r3, #16
 800dc42:	1889      	adds	r1, r1, r2
 800dc44:	9a00      	ldr	r2, [sp, #0]
 800dc46:	4353      	muls	r3, r2
 800dc48:	0c0a      	lsrs	r2, r1, #16
 800dc4a:	189b      	adds	r3, r3, r2
 800dc4c:	0c1a      	lsrs	r2, r3, #16
 800dc4e:	b289      	uxth	r1, r1
 800dc50:	9205      	str	r2, [sp, #20]
 800dc52:	b282      	uxth	r2, r0
 800dc54:	1a52      	subs	r2, r2, r1
 800dc56:	9904      	ldr	r1, [sp, #16]
 800dc58:	0c00      	lsrs	r0, r0, #16
 800dc5a:	1852      	adds	r2, r2, r1
 800dc5c:	b29b      	uxth	r3, r3
 800dc5e:	1411      	asrs	r1, r2, #16
 800dc60:	1ac3      	subs	r3, r0, r3
 800dc62:	185b      	adds	r3, r3, r1
 800dc64:	1419      	asrs	r1, r3, #16
 800dc66:	b292      	uxth	r2, r2
 800dc68:	041b      	lsls	r3, r3, #16
 800dc6a:	431a      	orrs	r2, r3
 800dc6c:	9b03      	ldr	r3, [sp, #12]
 800dc6e:	9104      	str	r1, [sp, #16]
 800dc70:	c504      	stmia	r5!, {r2}
 800dc72:	4563      	cmp	r3, ip
 800dc74:	d2dc      	bcs.n	800dc30 <quorem+0x4e>
 800dc76:	6823      	ldr	r3, [r4, #0]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d030      	beq.n	800dcde <quorem+0xfc>
 800dc7c:	0030      	movs	r0, r6
 800dc7e:	9902      	ldr	r1, [sp, #8]
 800dc80:	f001 f9c6 	bl	800f010 <__mcmp>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	db23      	blt.n	800dcd0 <quorem+0xee>
 800dc88:	0034      	movs	r4, r6
 800dc8a:	2500      	movs	r5, #0
 800dc8c:	9902      	ldr	r1, [sp, #8]
 800dc8e:	3414      	adds	r4, #20
 800dc90:	3114      	adds	r1, #20
 800dc92:	6823      	ldr	r3, [r4, #0]
 800dc94:	c901      	ldmia	r1!, {r0}
 800dc96:	9302      	str	r3, [sp, #8]
 800dc98:	466b      	mov	r3, sp
 800dc9a:	891b      	ldrh	r3, [r3, #8]
 800dc9c:	b282      	uxth	r2, r0
 800dc9e:	1a9a      	subs	r2, r3, r2
 800dca0:	9b02      	ldr	r3, [sp, #8]
 800dca2:	1952      	adds	r2, r2, r5
 800dca4:	0c00      	lsrs	r0, r0, #16
 800dca6:	0c1b      	lsrs	r3, r3, #16
 800dca8:	1a1b      	subs	r3, r3, r0
 800dcaa:	1410      	asrs	r0, r2, #16
 800dcac:	181b      	adds	r3, r3, r0
 800dcae:	141d      	asrs	r5, r3, #16
 800dcb0:	b292      	uxth	r2, r2
 800dcb2:	041b      	lsls	r3, r3, #16
 800dcb4:	431a      	orrs	r2, r3
 800dcb6:	9b03      	ldr	r3, [sp, #12]
 800dcb8:	c404      	stmia	r4!, {r2}
 800dcba:	428b      	cmp	r3, r1
 800dcbc:	d2e9      	bcs.n	800dc92 <quorem+0xb0>
 800dcbe:	9a01      	ldr	r2, [sp, #4]
 800dcc0:	00bb      	lsls	r3, r7, #2
 800dcc2:	18d3      	adds	r3, r2, r3
 800dcc4:	681a      	ldr	r2, [r3, #0]
 800dcc6:	2a00      	cmp	r2, #0
 800dcc8:	d013      	beq.n	800dcf2 <quorem+0x110>
 800dcca:	9b00      	ldr	r3, [sp, #0]
 800dccc:	3301      	adds	r3, #1
 800dcce:	9300      	str	r3, [sp, #0]
 800dcd0:	9800      	ldr	r0, [sp, #0]
 800dcd2:	b007      	add	sp, #28
 800dcd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcd6:	6823      	ldr	r3, [r4, #0]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d104      	bne.n	800dce6 <quorem+0x104>
 800dcdc:	3f01      	subs	r7, #1
 800dcde:	9b01      	ldr	r3, [sp, #4]
 800dce0:	3c04      	subs	r4, #4
 800dce2:	42a3      	cmp	r3, r4
 800dce4:	d3f7      	bcc.n	800dcd6 <quorem+0xf4>
 800dce6:	6137      	str	r7, [r6, #16]
 800dce8:	e7c8      	b.n	800dc7c <quorem+0x9a>
 800dcea:	681a      	ldr	r2, [r3, #0]
 800dcec:	2a00      	cmp	r2, #0
 800dcee:	d104      	bne.n	800dcfa <quorem+0x118>
 800dcf0:	3f01      	subs	r7, #1
 800dcf2:	9a01      	ldr	r2, [sp, #4]
 800dcf4:	3b04      	subs	r3, #4
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d3f7      	bcc.n	800dcea <quorem+0x108>
 800dcfa:	6137      	str	r7, [r6, #16]
 800dcfc:	e7e5      	b.n	800dcca <quorem+0xe8>
	...

0800dd00 <_dtoa_r>:
 800dd00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd02:	0014      	movs	r4, r2
 800dd04:	001d      	movs	r5, r3
 800dd06:	69c6      	ldr	r6, [r0, #28]
 800dd08:	b09d      	sub	sp, #116	@ 0x74
 800dd0a:	940a      	str	r4, [sp, #40]	@ 0x28
 800dd0c:	950b      	str	r5, [sp, #44]	@ 0x2c
 800dd0e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800dd10:	9003      	str	r0, [sp, #12]
 800dd12:	2e00      	cmp	r6, #0
 800dd14:	d10f      	bne.n	800dd36 <_dtoa_r+0x36>
 800dd16:	2010      	movs	r0, #16
 800dd18:	f000 fe30 	bl	800e97c <malloc>
 800dd1c:	9b03      	ldr	r3, [sp, #12]
 800dd1e:	1e02      	subs	r2, r0, #0
 800dd20:	61d8      	str	r0, [r3, #28]
 800dd22:	d104      	bne.n	800dd2e <_dtoa_r+0x2e>
 800dd24:	21ef      	movs	r1, #239	@ 0xef
 800dd26:	4bc7      	ldr	r3, [pc, #796]	@ (800e044 <_dtoa_r+0x344>)
 800dd28:	48c7      	ldr	r0, [pc, #796]	@ (800e048 <_dtoa_r+0x348>)
 800dd2a:	f001 fcbb 	bl	800f6a4 <__assert_func>
 800dd2e:	6046      	str	r6, [r0, #4]
 800dd30:	6086      	str	r6, [r0, #8]
 800dd32:	6006      	str	r6, [r0, #0]
 800dd34:	60c6      	str	r6, [r0, #12]
 800dd36:	9b03      	ldr	r3, [sp, #12]
 800dd38:	69db      	ldr	r3, [r3, #28]
 800dd3a:	6819      	ldr	r1, [r3, #0]
 800dd3c:	2900      	cmp	r1, #0
 800dd3e:	d00b      	beq.n	800dd58 <_dtoa_r+0x58>
 800dd40:	685a      	ldr	r2, [r3, #4]
 800dd42:	2301      	movs	r3, #1
 800dd44:	4093      	lsls	r3, r2
 800dd46:	604a      	str	r2, [r1, #4]
 800dd48:	608b      	str	r3, [r1, #8]
 800dd4a:	9803      	ldr	r0, [sp, #12]
 800dd4c:	f000 ff16 	bl	800eb7c <_Bfree>
 800dd50:	2200      	movs	r2, #0
 800dd52:	9b03      	ldr	r3, [sp, #12]
 800dd54:	69db      	ldr	r3, [r3, #28]
 800dd56:	601a      	str	r2, [r3, #0]
 800dd58:	2d00      	cmp	r5, #0
 800dd5a:	da1e      	bge.n	800dd9a <_dtoa_r+0x9a>
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	603b      	str	r3, [r7, #0]
 800dd60:	006b      	lsls	r3, r5, #1
 800dd62:	085b      	lsrs	r3, r3, #1
 800dd64:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd66:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800dd68:	4bb8      	ldr	r3, [pc, #736]	@ (800e04c <_dtoa_r+0x34c>)
 800dd6a:	4ab8      	ldr	r2, [pc, #736]	@ (800e04c <_dtoa_r+0x34c>)
 800dd6c:	403b      	ands	r3, r7
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d116      	bne.n	800dda0 <_dtoa_r+0xa0>
 800dd72:	4bb7      	ldr	r3, [pc, #732]	@ (800e050 <_dtoa_r+0x350>)
 800dd74:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800dd76:	6013      	str	r3, [r2, #0]
 800dd78:	033b      	lsls	r3, r7, #12
 800dd7a:	0b1b      	lsrs	r3, r3, #12
 800dd7c:	4323      	orrs	r3, r4
 800dd7e:	d101      	bne.n	800dd84 <_dtoa_r+0x84>
 800dd80:	f000 fd83 	bl	800e88a <_dtoa_r+0xb8a>
 800dd84:	4bb3      	ldr	r3, [pc, #716]	@ (800e054 <_dtoa_r+0x354>)
 800dd86:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800dd88:	9308      	str	r3, [sp, #32]
 800dd8a:	2a00      	cmp	r2, #0
 800dd8c:	d002      	beq.n	800dd94 <_dtoa_r+0x94>
 800dd8e:	4bb2      	ldr	r3, [pc, #712]	@ (800e058 <_dtoa_r+0x358>)
 800dd90:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800dd92:	6013      	str	r3, [r2, #0]
 800dd94:	9808      	ldr	r0, [sp, #32]
 800dd96:	b01d      	add	sp, #116	@ 0x74
 800dd98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	603b      	str	r3, [r7, #0]
 800dd9e:	e7e2      	b.n	800dd66 <_dtoa_r+0x66>
 800dda0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dda2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dda4:	9212      	str	r2, [sp, #72]	@ 0x48
 800dda6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dda8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800ddaa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ddac:	2200      	movs	r2, #0
 800ddae:	2300      	movs	r3, #0
 800ddb0:	f7f2 fb4c 	bl	800044c <__aeabi_dcmpeq>
 800ddb4:	1e06      	subs	r6, r0, #0
 800ddb6:	d00b      	beq.n	800ddd0 <_dtoa_r+0xd0>
 800ddb8:	2301      	movs	r3, #1
 800ddba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ddbc:	6013      	str	r3, [r2, #0]
 800ddbe:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d002      	beq.n	800ddca <_dtoa_r+0xca>
 800ddc4:	4ba5      	ldr	r3, [pc, #660]	@ (800e05c <_dtoa_r+0x35c>)
 800ddc6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800ddc8:	6013      	str	r3, [r2, #0]
 800ddca:	4ba5      	ldr	r3, [pc, #660]	@ (800e060 <_dtoa_r+0x360>)
 800ddcc:	9308      	str	r3, [sp, #32]
 800ddce:	e7e1      	b.n	800dd94 <_dtoa_r+0x94>
 800ddd0:	ab1a      	add	r3, sp, #104	@ 0x68
 800ddd2:	9301      	str	r3, [sp, #4]
 800ddd4:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ddd6:	9300      	str	r3, [sp, #0]
 800ddd8:	9803      	ldr	r0, [sp, #12]
 800ddda:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800dddc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ddde:	f001 f9cd 	bl	800f17c <__d2b>
 800dde2:	007a      	lsls	r2, r7, #1
 800dde4:	9005      	str	r0, [sp, #20]
 800dde6:	0d52      	lsrs	r2, r2, #21
 800dde8:	d100      	bne.n	800ddec <_dtoa_r+0xec>
 800ddea:	e07b      	b.n	800dee4 <_dtoa_r+0x1e4>
 800ddec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ddee:	9618      	str	r6, [sp, #96]	@ 0x60
 800ddf0:	0319      	lsls	r1, r3, #12
 800ddf2:	4b9c      	ldr	r3, [pc, #624]	@ (800e064 <_dtoa_r+0x364>)
 800ddf4:	0b09      	lsrs	r1, r1, #12
 800ddf6:	430b      	orrs	r3, r1
 800ddf8:	499b      	ldr	r1, [pc, #620]	@ (800e068 <_dtoa_r+0x368>)
 800ddfa:	1857      	adds	r7, r2, r1
 800ddfc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800ddfe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800de00:	0019      	movs	r1, r3
 800de02:	2200      	movs	r2, #0
 800de04:	4b99      	ldr	r3, [pc, #612]	@ (800e06c <_dtoa_r+0x36c>)
 800de06:	f7f3 fdbf 	bl	8001988 <__aeabi_dsub>
 800de0a:	4a99      	ldr	r2, [pc, #612]	@ (800e070 <_dtoa_r+0x370>)
 800de0c:	4b99      	ldr	r3, [pc, #612]	@ (800e074 <_dtoa_r+0x374>)
 800de0e:	f7f3 faf3 	bl	80013f8 <__aeabi_dmul>
 800de12:	4a99      	ldr	r2, [pc, #612]	@ (800e078 <_dtoa_r+0x378>)
 800de14:	4b99      	ldr	r3, [pc, #612]	@ (800e07c <_dtoa_r+0x37c>)
 800de16:	f7f2 fb47 	bl	80004a8 <__aeabi_dadd>
 800de1a:	0004      	movs	r4, r0
 800de1c:	0038      	movs	r0, r7
 800de1e:	000d      	movs	r5, r1
 800de20:	f7f4 f9ac 	bl	800217c <__aeabi_i2d>
 800de24:	4a96      	ldr	r2, [pc, #600]	@ (800e080 <_dtoa_r+0x380>)
 800de26:	4b97      	ldr	r3, [pc, #604]	@ (800e084 <_dtoa_r+0x384>)
 800de28:	f7f3 fae6 	bl	80013f8 <__aeabi_dmul>
 800de2c:	0002      	movs	r2, r0
 800de2e:	000b      	movs	r3, r1
 800de30:	0020      	movs	r0, r4
 800de32:	0029      	movs	r1, r5
 800de34:	f7f2 fb38 	bl	80004a8 <__aeabi_dadd>
 800de38:	0004      	movs	r4, r0
 800de3a:	000d      	movs	r5, r1
 800de3c:	f7f4 f962 	bl	8002104 <__aeabi_d2iz>
 800de40:	2200      	movs	r2, #0
 800de42:	9004      	str	r0, [sp, #16]
 800de44:	2300      	movs	r3, #0
 800de46:	0020      	movs	r0, r4
 800de48:	0029      	movs	r1, r5
 800de4a:	f7f2 fb05 	bl	8000458 <__aeabi_dcmplt>
 800de4e:	2800      	cmp	r0, #0
 800de50:	d00b      	beq.n	800de6a <_dtoa_r+0x16a>
 800de52:	9804      	ldr	r0, [sp, #16]
 800de54:	f7f4 f992 	bl	800217c <__aeabi_i2d>
 800de58:	002b      	movs	r3, r5
 800de5a:	0022      	movs	r2, r4
 800de5c:	f7f2 faf6 	bl	800044c <__aeabi_dcmpeq>
 800de60:	4243      	negs	r3, r0
 800de62:	4158      	adcs	r0, r3
 800de64:	9b04      	ldr	r3, [sp, #16]
 800de66:	1a1b      	subs	r3, r3, r0
 800de68:	9304      	str	r3, [sp, #16]
 800de6a:	2301      	movs	r3, #1
 800de6c:	9315      	str	r3, [sp, #84]	@ 0x54
 800de6e:	9b04      	ldr	r3, [sp, #16]
 800de70:	2b16      	cmp	r3, #22
 800de72:	d810      	bhi.n	800de96 <_dtoa_r+0x196>
 800de74:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800de76:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800de78:	9a04      	ldr	r2, [sp, #16]
 800de7a:	4b83      	ldr	r3, [pc, #524]	@ (800e088 <_dtoa_r+0x388>)
 800de7c:	00d2      	lsls	r2, r2, #3
 800de7e:	189b      	adds	r3, r3, r2
 800de80:	681a      	ldr	r2, [r3, #0]
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	f7f2 fae8 	bl	8000458 <__aeabi_dcmplt>
 800de88:	2800      	cmp	r0, #0
 800de8a:	d047      	beq.n	800df1c <_dtoa_r+0x21c>
 800de8c:	9b04      	ldr	r3, [sp, #16]
 800de8e:	3b01      	subs	r3, #1
 800de90:	9304      	str	r3, [sp, #16]
 800de92:	2300      	movs	r3, #0
 800de94:	9315      	str	r3, [sp, #84]	@ 0x54
 800de96:	2200      	movs	r2, #0
 800de98:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800de9a:	9206      	str	r2, [sp, #24]
 800de9c:	1bdb      	subs	r3, r3, r7
 800de9e:	1e5a      	subs	r2, r3, #1
 800dea0:	d53e      	bpl.n	800df20 <_dtoa_r+0x220>
 800dea2:	2201      	movs	r2, #1
 800dea4:	1ad3      	subs	r3, r2, r3
 800dea6:	9306      	str	r3, [sp, #24]
 800dea8:	2300      	movs	r3, #0
 800deaa:	930d      	str	r3, [sp, #52]	@ 0x34
 800deac:	9b04      	ldr	r3, [sp, #16]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	db38      	blt.n	800df24 <_dtoa_r+0x224>
 800deb2:	9a04      	ldr	r2, [sp, #16]
 800deb4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800deb6:	4694      	mov	ip, r2
 800deb8:	4463      	add	r3, ip
 800deba:	930d      	str	r3, [sp, #52]	@ 0x34
 800debc:	2300      	movs	r3, #0
 800debe:	9214      	str	r2, [sp, #80]	@ 0x50
 800dec0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dec2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800dec4:	2401      	movs	r4, #1
 800dec6:	2b09      	cmp	r3, #9
 800dec8:	d867      	bhi.n	800df9a <_dtoa_r+0x29a>
 800deca:	2b05      	cmp	r3, #5
 800decc:	dd02      	ble.n	800ded4 <_dtoa_r+0x1d4>
 800dece:	2400      	movs	r4, #0
 800ded0:	3b04      	subs	r3, #4
 800ded2:	9322      	str	r3, [sp, #136]	@ 0x88
 800ded4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ded6:	1e98      	subs	r0, r3, #2
 800ded8:	2803      	cmp	r0, #3
 800deda:	d867      	bhi.n	800dfac <_dtoa_r+0x2ac>
 800dedc:	f7f2 f91c 	bl	8000118 <__gnu_thumb1_case_uqi>
 800dee0:	5b383a2b 	.word	0x5b383a2b
 800dee4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800dee6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800dee8:	18f6      	adds	r6, r6, r3
 800deea:	4b68      	ldr	r3, [pc, #416]	@ (800e08c <_dtoa_r+0x38c>)
 800deec:	18f2      	adds	r2, r6, r3
 800deee:	2a20      	cmp	r2, #32
 800def0:	dd0f      	ble.n	800df12 <_dtoa_r+0x212>
 800def2:	2340      	movs	r3, #64	@ 0x40
 800def4:	1a9b      	subs	r3, r3, r2
 800def6:	409f      	lsls	r7, r3
 800def8:	4b65      	ldr	r3, [pc, #404]	@ (800e090 <_dtoa_r+0x390>)
 800defa:	0038      	movs	r0, r7
 800defc:	18f3      	adds	r3, r6, r3
 800defe:	40dc      	lsrs	r4, r3
 800df00:	4320      	orrs	r0, r4
 800df02:	f7f4 f969 	bl	80021d8 <__aeabi_ui2d>
 800df06:	2201      	movs	r2, #1
 800df08:	4b62      	ldr	r3, [pc, #392]	@ (800e094 <_dtoa_r+0x394>)
 800df0a:	1e77      	subs	r7, r6, #1
 800df0c:	18cb      	adds	r3, r1, r3
 800df0e:	9218      	str	r2, [sp, #96]	@ 0x60
 800df10:	e776      	b.n	800de00 <_dtoa_r+0x100>
 800df12:	2320      	movs	r3, #32
 800df14:	0020      	movs	r0, r4
 800df16:	1a9b      	subs	r3, r3, r2
 800df18:	4098      	lsls	r0, r3
 800df1a:	e7f2      	b.n	800df02 <_dtoa_r+0x202>
 800df1c:	9015      	str	r0, [sp, #84]	@ 0x54
 800df1e:	e7ba      	b.n	800de96 <_dtoa_r+0x196>
 800df20:	920d      	str	r2, [sp, #52]	@ 0x34
 800df22:	e7c3      	b.n	800deac <_dtoa_r+0x1ac>
 800df24:	9b06      	ldr	r3, [sp, #24]
 800df26:	9a04      	ldr	r2, [sp, #16]
 800df28:	1a9b      	subs	r3, r3, r2
 800df2a:	9306      	str	r3, [sp, #24]
 800df2c:	4253      	negs	r3, r2
 800df2e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800df30:	2300      	movs	r3, #0
 800df32:	9314      	str	r3, [sp, #80]	@ 0x50
 800df34:	e7c5      	b.n	800dec2 <_dtoa_r+0x1c2>
 800df36:	2300      	movs	r3, #0
 800df38:	9310      	str	r3, [sp, #64]	@ 0x40
 800df3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800df3c:	930e      	str	r3, [sp, #56]	@ 0x38
 800df3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800df40:	2b00      	cmp	r3, #0
 800df42:	dc13      	bgt.n	800df6c <_dtoa_r+0x26c>
 800df44:	2301      	movs	r3, #1
 800df46:	001a      	movs	r2, r3
 800df48:	930e      	str	r3, [sp, #56]	@ 0x38
 800df4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800df4c:	9223      	str	r2, [sp, #140]	@ 0x8c
 800df4e:	e00d      	b.n	800df6c <_dtoa_r+0x26c>
 800df50:	2301      	movs	r3, #1
 800df52:	e7f1      	b.n	800df38 <_dtoa_r+0x238>
 800df54:	2300      	movs	r3, #0
 800df56:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800df58:	9310      	str	r3, [sp, #64]	@ 0x40
 800df5a:	4694      	mov	ip, r2
 800df5c:	9b04      	ldr	r3, [sp, #16]
 800df5e:	4463      	add	r3, ip
 800df60:	930e      	str	r3, [sp, #56]	@ 0x38
 800df62:	3301      	adds	r3, #1
 800df64:	9309      	str	r3, [sp, #36]	@ 0x24
 800df66:	2b00      	cmp	r3, #0
 800df68:	dc00      	bgt.n	800df6c <_dtoa_r+0x26c>
 800df6a:	2301      	movs	r3, #1
 800df6c:	9a03      	ldr	r2, [sp, #12]
 800df6e:	2100      	movs	r1, #0
 800df70:	69d0      	ldr	r0, [r2, #28]
 800df72:	2204      	movs	r2, #4
 800df74:	0015      	movs	r5, r2
 800df76:	3514      	adds	r5, #20
 800df78:	429d      	cmp	r5, r3
 800df7a:	d91b      	bls.n	800dfb4 <_dtoa_r+0x2b4>
 800df7c:	6041      	str	r1, [r0, #4]
 800df7e:	9803      	ldr	r0, [sp, #12]
 800df80:	f000 fdb8 	bl	800eaf4 <_Balloc>
 800df84:	9008      	str	r0, [sp, #32]
 800df86:	2800      	cmp	r0, #0
 800df88:	d117      	bne.n	800dfba <_dtoa_r+0x2ba>
 800df8a:	21b0      	movs	r1, #176	@ 0xb0
 800df8c:	4b42      	ldr	r3, [pc, #264]	@ (800e098 <_dtoa_r+0x398>)
 800df8e:	482e      	ldr	r0, [pc, #184]	@ (800e048 <_dtoa_r+0x348>)
 800df90:	9a08      	ldr	r2, [sp, #32]
 800df92:	31ff      	adds	r1, #255	@ 0xff
 800df94:	e6c9      	b.n	800dd2a <_dtoa_r+0x2a>
 800df96:	2301      	movs	r3, #1
 800df98:	e7dd      	b.n	800df56 <_dtoa_r+0x256>
 800df9a:	2300      	movs	r3, #0
 800df9c:	9410      	str	r4, [sp, #64]	@ 0x40
 800df9e:	9322      	str	r3, [sp, #136]	@ 0x88
 800dfa0:	3b01      	subs	r3, #1
 800dfa2:	930e      	str	r3, [sp, #56]	@ 0x38
 800dfa4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	3313      	adds	r3, #19
 800dfaa:	e7cf      	b.n	800df4c <_dtoa_r+0x24c>
 800dfac:	2301      	movs	r3, #1
 800dfae:	9310      	str	r3, [sp, #64]	@ 0x40
 800dfb0:	3b02      	subs	r3, #2
 800dfb2:	e7f6      	b.n	800dfa2 <_dtoa_r+0x2a2>
 800dfb4:	3101      	adds	r1, #1
 800dfb6:	0052      	lsls	r2, r2, #1
 800dfb8:	e7dc      	b.n	800df74 <_dtoa_r+0x274>
 800dfba:	9b03      	ldr	r3, [sp, #12]
 800dfbc:	9a08      	ldr	r2, [sp, #32]
 800dfbe:	69db      	ldr	r3, [r3, #28]
 800dfc0:	601a      	str	r2, [r3, #0]
 800dfc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfc4:	2b0e      	cmp	r3, #14
 800dfc6:	d900      	bls.n	800dfca <_dtoa_r+0x2ca>
 800dfc8:	e0d9      	b.n	800e17e <_dtoa_r+0x47e>
 800dfca:	2c00      	cmp	r4, #0
 800dfcc:	d100      	bne.n	800dfd0 <_dtoa_r+0x2d0>
 800dfce:	e0d6      	b.n	800e17e <_dtoa_r+0x47e>
 800dfd0:	9b04      	ldr	r3, [sp, #16]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	dd64      	ble.n	800e0a0 <_dtoa_r+0x3a0>
 800dfd6:	210f      	movs	r1, #15
 800dfd8:	9a04      	ldr	r2, [sp, #16]
 800dfda:	4b2b      	ldr	r3, [pc, #172]	@ (800e088 <_dtoa_r+0x388>)
 800dfdc:	400a      	ands	r2, r1
 800dfde:	00d2      	lsls	r2, r2, #3
 800dfe0:	189b      	adds	r3, r3, r2
 800dfe2:	681e      	ldr	r6, [r3, #0]
 800dfe4:	685f      	ldr	r7, [r3, #4]
 800dfe6:	9b04      	ldr	r3, [sp, #16]
 800dfe8:	2402      	movs	r4, #2
 800dfea:	111d      	asrs	r5, r3, #4
 800dfec:	05db      	lsls	r3, r3, #23
 800dfee:	d50a      	bpl.n	800e006 <_dtoa_r+0x306>
 800dff0:	4b2a      	ldr	r3, [pc, #168]	@ (800e09c <_dtoa_r+0x39c>)
 800dff2:	400d      	ands	r5, r1
 800dff4:	6a1a      	ldr	r2, [r3, #32]
 800dff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dff8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800dffa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800dffc:	f7f2 fdb8 	bl	8000b70 <__aeabi_ddiv>
 800e000:	900a      	str	r0, [sp, #40]	@ 0x28
 800e002:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e004:	3401      	adds	r4, #1
 800e006:	4b25      	ldr	r3, [pc, #148]	@ (800e09c <_dtoa_r+0x39c>)
 800e008:	930c      	str	r3, [sp, #48]	@ 0x30
 800e00a:	2d00      	cmp	r5, #0
 800e00c:	d108      	bne.n	800e020 <_dtoa_r+0x320>
 800e00e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e010:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e012:	0032      	movs	r2, r6
 800e014:	003b      	movs	r3, r7
 800e016:	f7f2 fdab 	bl	8000b70 <__aeabi_ddiv>
 800e01a:	900a      	str	r0, [sp, #40]	@ 0x28
 800e01c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e01e:	e05a      	b.n	800e0d6 <_dtoa_r+0x3d6>
 800e020:	2301      	movs	r3, #1
 800e022:	421d      	tst	r5, r3
 800e024:	d009      	beq.n	800e03a <_dtoa_r+0x33a>
 800e026:	18e4      	adds	r4, r4, r3
 800e028:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e02a:	0030      	movs	r0, r6
 800e02c:	681a      	ldr	r2, [r3, #0]
 800e02e:	685b      	ldr	r3, [r3, #4]
 800e030:	0039      	movs	r1, r7
 800e032:	f7f3 f9e1 	bl	80013f8 <__aeabi_dmul>
 800e036:	0006      	movs	r6, r0
 800e038:	000f      	movs	r7, r1
 800e03a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e03c:	106d      	asrs	r5, r5, #1
 800e03e:	3308      	adds	r3, #8
 800e040:	e7e2      	b.n	800e008 <_dtoa_r+0x308>
 800e042:	46c0      	nop			@ (mov r8, r8)
 800e044:	080100a5 	.word	0x080100a5
 800e048:	080100bc 	.word	0x080100bc
 800e04c:	7ff00000 	.word	0x7ff00000
 800e050:	0000270f 	.word	0x0000270f
 800e054:	080100a1 	.word	0x080100a1
 800e058:	080100a4 	.word	0x080100a4
 800e05c:	08010075 	.word	0x08010075
 800e060:	08010074 	.word	0x08010074
 800e064:	3ff00000 	.word	0x3ff00000
 800e068:	fffffc01 	.word	0xfffffc01
 800e06c:	3ff80000 	.word	0x3ff80000
 800e070:	636f4361 	.word	0x636f4361
 800e074:	3fd287a7 	.word	0x3fd287a7
 800e078:	8b60c8b3 	.word	0x8b60c8b3
 800e07c:	3fc68a28 	.word	0x3fc68a28
 800e080:	509f79fb 	.word	0x509f79fb
 800e084:	3fd34413 	.word	0x3fd34413
 800e088:	080101b8 	.word	0x080101b8
 800e08c:	00000432 	.word	0x00000432
 800e090:	00000412 	.word	0x00000412
 800e094:	fe100000 	.word	0xfe100000
 800e098:	08010114 	.word	0x08010114
 800e09c:	08010190 	.word	0x08010190
 800e0a0:	9b04      	ldr	r3, [sp, #16]
 800e0a2:	2402      	movs	r4, #2
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d016      	beq.n	800e0d6 <_dtoa_r+0x3d6>
 800e0a8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800e0aa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e0ac:	220f      	movs	r2, #15
 800e0ae:	425d      	negs	r5, r3
 800e0b0:	402a      	ands	r2, r5
 800e0b2:	4bd7      	ldr	r3, [pc, #860]	@ (800e410 <_dtoa_r+0x710>)
 800e0b4:	00d2      	lsls	r2, r2, #3
 800e0b6:	189b      	adds	r3, r3, r2
 800e0b8:	681a      	ldr	r2, [r3, #0]
 800e0ba:	685b      	ldr	r3, [r3, #4]
 800e0bc:	f7f3 f99c 	bl	80013f8 <__aeabi_dmul>
 800e0c0:	2701      	movs	r7, #1
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	900a      	str	r0, [sp, #40]	@ 0x28
 800e0c6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e0c8:	4ed2      	ldr	r6, [pc, #840]	@ (800e414 <_dtoa_r+0x714>)
 800e0ca:	112d      	asrs	r5, r5, #4
 800e0cc:	2d00      	cmp	r5, #0
 800e0ce:	d000      	beq.n	800e0d2 <_dtoa_r+0x3d2>
 800e0d0:	e0ba      	b.n	800e248 <_dtoa_r+0x548>
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d1a1      	bne.n	800e01a <_dtoa_r+0x31a>
 800e0d6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e0d8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800e0da:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d100      	bne.n	800e0e2 <_dtoa_r+0x3e2>
 800e0e0:	e0bd      	b.n	800e25e <_dtoa_r+0x55e>
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	0030      	movs	r0, r6
 800e0e6:	0039      	movs	r1, r7
 800e0e8:	4bcb      	ldr	r3, [pc, #812]	@ (800e418 <_dtoa_r+0x718>)
 800e0ea:	f7f2 f9b5 	bl	8000458 <__aeabi_dcmplt>
 800e0ee:	2800      	cmp	r0, #0
 800e0f0:	d100      	bne.n	800e0f4 <_dtoa_r+0x3f4>
 800e0f2:	e0b4      	b.n	800e25e <_dtoa_r+0x55e>
 800e0f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d100      	bne.n	800e0fc <_dtoa_r+0x3fc>
 800e0fa:	e0b0      	b.n	800e25e <_dtoa_r+0x55e>
 800e0fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	dd39      	ble.n	800e176 <_dtoa_r+0x476>
 800e102:	9b04      	ldr	r3, [sp, #16]
 800e104:	2200      	movs	r2, #0
 800e106:	3b01      	subs	r3, #1
 800e108:	930c      	str	r3, [sp, #48]	@ 0x30
 800e10a:	0030      	movs	r0, r6
 800e10c:	4bc3      	ldr	r3, [pc, #780]	@ (800e41c <_dtoa_r+0x71c>)
 800e10e:	0039      	movs	r1, r7
 800e110:	f7f3 f972 	bl	80013f8 <__aeabi_dmul>
 800e114:	900a      	str	r0, [sp, #40]	@ 0x28
 800e116:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e118:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e11a:	3401      	adds	r4, #1
 800e11c:	0020      	movs	r0, r4
 800e11e:	9311      	str	r3, [sp, #68]	@ 0x44
 800e120:	f7f4 f82c 	bl	800217c <__aeabi_i2d>
 800e124:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e126:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e128:	f7f3 f966 	bl	80013f8 <__aeabi_dmul>
 800e12c:	4bbc      	ldr	r3, [pc, #752]	@ (800e420 <_dtoa_r+0x720>)
 800e12e:	2200      	movs	r2, #0
 800e130:	f7f2 f9ba 	bl	80004a8 <__aeabi_dadd>
 800e134:	4bbb      	ldr	r3, [pc, #748]	@ (800e424 <_dtoa_r+0x724>)
 800e136:	0006      	movs	r6, r0
 800e138:	18cf      	adds	r7, r1, r3
 800e13a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d000      	beq.n	800e142 <_dtoa_r+0x442>
 800e140:	e091      	b.n	800e266 <_dtoa_r+0x566>
 800e142:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e144:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e146:	2200      	movs	r2, #0
 800e148:	4bb7      	ldr	r3, [pc, #732]	@ (800e428 <_dtoa_r+0x728>)
 800e14a:	f7f3 fc1d 	bl	8001988 <__aeabi_dsub>
 800e14e:	0032      	movs	r2, r6
 800e150:	003b      	movs	r3, r7
 800e152:	0004      	movs	r4, r0
 800e154:	000d      	movs	r5, r1
 800e156:	f7f2 f993 	bl	8000480 <__aeabi_dcmpgt>
 800e15a:	2800      	cmp	r0, #0
 800e15c:	d000      	beq.n	800e160 <_dtoa_r+0x460>
 800e15e:	e29d      	b.n	800e69c <_dtoa_r+0x99c>
 800e160:	2180      	movs	r1, #128	@ 0x80
 800e162:	0609      	lsls	r1, r1, #24
 800e164:	187b      	adds	r3, r7, r1
 800e166:	0032      	movs	r2, r6
 800e168:	0020      	movs	r0, r4
 800e16a:	0029      	movs	r1, r5
 800e16c:	f7f2 f974 	bl	8000458 <__aeabi_dcmplt>
 800e170:	2800      	cmp	r0, #0
 800e172:	d000      	beq.n	800e176 <_dtoa_r+0x476>
 800e174:	e130      	b.n	800e3d8 <_dtoa_r+0x6d8>
 800e176:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e178:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800e17a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e17c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e17e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e180:	2b00      	cmp	r3, #0
 800e182:	da00      	bge.n	800e186 <_dtoa_r+0x486>
 800e184:	e177      	b.n	800e476 <_dtoa_r+0x776>
 800e186:	9a04      	ldr	r2, [sp, #16]
 800e188:	2a0e      	cmp	r2, #14
 800e18a:	dd00      	ble.n	800e18e <_dtoa_r+0x48e>
 800e18c:	e173      	b.n	800e476 <_dtoa_r+0x776>
 800e18e:	4ba0      	ldr	r3, [pc, #640]	@ (800e410 <_dtoa_r+0x710>)
 800e190:	00d2      	lsls	r2, r2, #3
 800e192:	189b      	adds	r3, r3, r2
 800e194:	685c      	ldr	r4, [r3, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	9306      	str	r3, [sp, #24]
 800e19a:	9407      	str	r4, [sp, #28]
 800e19c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	da03      	bge.n	800e1aa <_dtoa_r+0x4aa>
 800e1a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	dc00      	bgt.n	800e1aa <_dtoa_r+0x4aa>
 800e1a8:	e106      	b.n	800e3b8 <_dtoa_r+0x6b8>
 800e1aa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e1ac:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800e1ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1b0:	9d08      	ldr	r5, [sp, #32]
 800e1b2:	3b01      	subs	r3, #1
 800e1b4:	195b      	adds	r3, r3, r5
 800e1b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e1b8:	9a06      	ldr	r2, [sp, #24]
 800e1ba:	9b07      	ldr	r3, [sp, #28]
 800e1bc:	0030      	movs	r0, r6
 800e1be:	0039      	movs	r1, r7
 800e1c0:	f7f2 fcd6 	bl	8000b70 <__aeabi_ddiv>
 800e1c4:	f7f3 ff9e 	bl	8002104 <__aeabi_d2iz>
 800e1c8:	9009      	str	r0, [sp, #36]	@ 0x24
 800e1ca:	f7f3 ffd7 	bl	800217c <__aeabi_i2d>
 800e1ce:	9a06      	ldr	r2, [sp, #24]
 800e1d0:	9b07      	ldr	r3, [sp, #28]
 800e1d2:	f7f3 f911 	bl	80013f8 <__aeabi_dmul>
 800e1d6:	0002      	movs	r2, r0
 800e1d8:	000b      	movs	r3, r1
 800e1da:	0030      	movs	r0, r6
 800e1dc:	0039      	movs	r1, r7
 800e1de:	f7f3 fbd3 	bl	8001988 <__aeabi_dsub>
 800e1e2:	002b      	movs	r3, r5
 800e1e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e1e6:	3501      	adds	r5, #1
 800e1e8:	3230      	adds	r2, #48	@ 0x30
 800e1ea:	701a      	strb	r2, [r3, #0]
 800e1ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e1ee:	002c      	movs	r4, r5
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	d000      	beq.n	800e1f6 <_dtoa_r+0x4f6>
 800e1f4:	e131      	b.n	800e45a <_dtoa_r+0x75a>
 800e1f6:	0002      	movs	r2, r0
 800e1f8:	000b      	movs	r3, r1
 800e1fa:	f7f2 f955 	bl	80004a8 <__aeabi_dadd>
 800e1fe:	9a06      	ldr	r2, [sp, #24]
 800e200:	9b07      	ldr	r3, [sp, #28]
 800e202:	0006      	movs	r6, r0
 800e204:	000f      	movs	r7, r1
 800e206:	f7f2 f93b 	bl	8000480 <__aeabi_dcmpgt>
 800e20a:	2800      	cmp	r0, #0
 800e20c:	d000      	beq.n	800e210 <_dtoa_r+0x510>
 800e20e:	e10f      	b.n	800e430 <_dtoa_r+0x730>
 800e210:	9a06      	ldr	r2, [sp, #24]
 800e212:	9b07      	ldr	r3, [sp, #28]
 800e214:	0030      	movs	r0, r6
 800e216:	0039      	movs	r1, r7
 800e218:	f7f2 f918 	bl	800044c <__aeabi_dcmpeq>
 800e21c:	2800      	cmp	r0, #0
 800e21e:	d003      	beq.n	800e228 <_dtoa_r+0x528>
 800e220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e222:	07dd      	lsls	r5, r3, #31
 800e224:	d500      	bpl.n	800e228 <_dtoa_r+0x528>
 800e226:	e103      	b.n	800e430 <_dtoa_r+0x730>
 800e228:	9905      	ldr	r1, [sp, #20]
 800e22a:	9803      	ldr	r0, [sp, #12]
 800e22c:	f000 fca6 	bl	800eb7c <_Bfree>
 800e230:	2300      	movs	r3, #0
 800e232:	7023      	strb	r3, [r4, #0]
 800e234:	9b04      	ldr	r3, [sp, #16]
 800e236:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e238:	3301      	adds	r3, #1
 800e23a:	6013      	str	r3, [r2, #0]
 800e23c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d100      	bne.n	800e244 <_dtoa_r+0x544>
 800e242:	e5a7      	b.n	800dd94 <_dtoa_r+0x94>
 800e244:	601c      	str	r4, [r3, #0]
 800e246:	e5a5      	b.n	800dd94 <_dtoa_r+0x94>
 800e248:	423d      	tst	r5, r7
 800e24a:	d005      	beq.n	800e258 <_dtoa_r+0x558>
 800e24c:	6832      	ldr	r2, [r6, #0]
 800e24e:	6873      	ldr	r3, [r6, #4]
 800e250:	f7f3 f8d2 	bl	80013f8 <__aeabi_dmul>
 800e254:	003b      	movs	r3, r7
 800e256:	3401      	adds	r4, #1
 800e258:	106d      	asrs	r5, r5, #1
 800e25a:	3608      	adds	r6, #8
 800e25c:	e736      	b.n	800e0cc <_dtoa_r+0x3cc>
 800e25e:	9b04      	ldr	r3, [sp, #16]
 800e260:	930c      	str	r3, [sp, #48]	@ 0x30
 800e262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e264:	e75a      	b.n	800e11c <_dtoa_r+0x41c>
 800e266:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e268:	4b69      	ldr	r3, [pc, #420]	@ (800e410 <_dtoa_r+0x710>)
 800e26a:	3a01      	subs	r2, #1
 800e26c:	00d2      	lsls	r2, r2, #3
 800e26e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800e270:	189b      	adds	r3, r3, r2
 800e272:	681a      	ldr	r2, [r3, #0]
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	2900      	cmp	r1, #0
 800e278:	d04c      	beq.n	800e314 <_dtoa_r+0x614>
 800e27a:	2000      	movs	r0, #0
 800e27c:	496b      	ldr	r1, [pc, #428]	@ (800e42c <_dtoa_r+0x72c>)
 800e27e:	f7f2 fc77 	bl	8000b70 <__aeabi_ddiv>
 800e282:	0032      	movs	r2, r6
 800e284:	003b      	movs	r3, r7
 800e286:	f7f3 fb7f 	bl	8001988 <__aeabi_dsub>
 800e28a:	9a08      	ldr	r2, [sp, #32]
 800e28c:	0006      	movs	r6, r0
 800e28e:	4694      	mov	ip, r2
 800e290:	000f      	movs	r7, r1
 800e292:	9b08      	ldr	r3, [sp, #32]
 800e294:	9316      	str	r3, [sp, #88]	@ 0x58
 800e296:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e298:	4463      	add	r3, ip
 800e29a:	9311      	str	r3, [sp, #68]	@ 0x44
 800e29c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e29e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e2a0:	f7f3 ff30 	bl	8002104 <__aeabi_d2iz>
 800e2a4:	0005      	movs	r5, r0
 800e2a6:	f7f3 ff69 	bl	800217c <__aeabi_i2d>
 800e2aa:	0002      	movs	r2, r0
 800e2ac:	000b      	movs	r3, r1
 800e2ae:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e2b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e2b2:	f7f3 fb69 	bl	8001988 <__aeabi_dsub>
 800e2b6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e2b8:	3530      	adds	r5, #48	@ 0x30
 800e2ba:	1c5c      	adds	r4, r3, #1
 800e2bc:	701d      	strb	r5, [r3, #0]
 800e2be:	0032      	movs	r2, r6
 800e2c0:	003b      	movs	r3, r7
 800e2c2:	900a      	str	r0, [sp, #40]	@ 0x28
 800e2c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e2c6:	f7f2 f8c7 	bl	8000458 <__aeabi_dcmplt>
 800e2ca:	2800      	cmp	r0, #0
 800e2cc:	d16a      	bne.n	800e3a4 <_dtoa_r+0x6a4>
 800e2ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e2d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e2d2:	2000      	movs	r0, #0
 800e2d4:	4950      	ldr	r1, [pc, #320]	@ (800e418 <_dtoa_r+0x718>)
 800e2d6:	f7f3 fb57 	bl	8001988 <__aeabi_dsub>
 800e2da:	0032      	movs	r2, r6
 800e2dc:	003b      	movs	r3, r7
 800e2de:	f7f2 f8bb 	bl	8000458 <__aeabi_dcmplt>
 800e2e2:	2800      	cmp	r0, #0
 800e2e4:	d000      	beq.n	800e2e8 <_dtoa_r+0x5e8>
 800e2e6:	e0a5      	b.n	800e434 <_dtoa_r+0x734>
 800e2e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e2ea:	42a3      	cmp	r3, r4
 800e2ec:	d100      	bne.n	800e2f0 <_dtoa_r+0x5f0>
 800e2ee:	e742      	b.n	800e176 <_dtoa_r+0x476>
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	0030      	movs	r0, r6
 800e2f4:	0039      	movs	r1, r7
 800e2f6:	4b49      	ldr	r3, [pc, #292]	@ (800e41c <_dtoa_r+0x71c>)
 800e2f8:	f7f3 f87e 	bl	80013f8 <__aeabi_dmul>
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	0006      	movs	r6, r0
 800e300:	000f      	movs	r7, r1
 800e302:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e304:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e306:	4b45      	ldr	r3, [pc, #276]	@ (800e41c <_dtoa_r+0x71c>)
 800e308:	f7f3 f876 	bl	80013f8 <__aeabi_dmul>
 800e30c:	9416      	str	r4, [sp, #88]	@ 0x58
 800e30e:	900a      	str	r0, [sp, #40]	@ 0x28
 800e310:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e312:	e7c3      	b.n	800e29c <_dtoa_r+0x59c>
 800e314:	0030      	movs	r0, r6
 800e316:	0039      	movs	r1, r7
 800e318:	f7f3 f86e 	bl	80013f8 <__aeabi_dmul>
 800e31c:	9d08      	ldr	r5, [sp, #32]
 800e31e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e320:	002b      	movs	r3, r5
 800e322:	4694      	mov	ip, r2
 800e324:	9016      	str	r0, [sp, #88]	@ 0x58
 800e326:	9117      	str	r1, [sp, #92]	@ 0x5c
 800e328:	4463      	add	r3, ip
 800e32a:	9319      	str	r3, [sp, #100]	@ 0x64
 800e32c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e32e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e330:	f7f3 fee8 	bl	8002104 <__aeabi_d2iz>
 800e334:	0004      	movs	r4, r0
 800e336:	f7f3 ff21 	bl	800217c <__aeabi_i2d>
 800e33a:	000b      	movs	r3, r1
 800e33c:	0002      	movs	r2, r0
 800e33e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e340:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e342:	f7f3 fb21 	bl	8001988 <__aeabi_dsub>
 800e346:	3430      	adds	r4, #48	@ 0x30
 800e348:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e34a:	702c      	strb	r4, [r5, #0]
 800e34c:	3501      	adds	r5, #1
 800e34e:	0006      	movs	r6, r0
 800e350:	000f      	movs	r7, r1
 800e352:	42ab      	cmp	r3, r5
 800e354:	d129      	bne.n	800e3aa <_dtoa_r+0x6aa>
 800e356:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800e358:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800e35a:	9b08      	ldr	r3, [sp, #32]
 800e35c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800e35e:	469c      	mov	ip, r3
 800e360:	2200      	movs	r2, #0
 800e362:	4b32      	ldr	r3, [pc, #200]	@ (800e42c <_dtoa_r+0x72c>)
 800e364:	4464      	add	r4, ip
 800e366:	f7f2 f89f 	bl	80004a8 <__aeabi_dadd>
 800e36a:	0002      	movs	r2, r0
 800e36c:	000b      	movs	r3, r1
 800e36e:	0030      	movs	r0, r6
 800e370:	0039      	movs	r1, r7
 800e372:	f7f2 f885 	bl	8000480 <__aeabi_dcmpgt>
 800e376:	2800      	cmp	r0, #0
 800e378:	d15c      	bne.n	800e434 <_dtoa_r+0x734>
 800e37a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e37c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e37e:	2000      	movs	r0, #0
 800e380:	492a      	ldr	r1, [pc, #168]	@ (800e42c <_dtoa_r+0x72c>)
 800e382:	f7f3 fb01 	bl	8001988 <__aeabi_dsub>
 800e386:	0002      	movs	r2, r0
 800e388:	000b      	movs	r3, r1
 800e38a:	0030      	movs	r0, r6
 800e38c:	0039      	movs	r1, r7
 800e38e:	f7f2 f863 	bl	8000458 <__aeabi_dcmplt>
 800e392:	2800      	cmp	r0, #0
 800e394:	d100      	bne.n	800e398 <_dtoa_r+0x698>
 800e396:	e6ee      	b.n	800e176 <_dtoa_r+0x476>
 800e398:	0023      	movs	r3, r4
 800e39a:	3c01      	subs	r4, #1
 800e39c:	7822      	ldrb	r2, [r4, #0]
 800e39e:	2a30      	cmp	r2, #48	@ 0x30
 800e3a0:	d0fa      	beq.n	800e398 <_dtoa_r+0x698>
 800e3a2:	001c      	movs	r4, r3
 800e3a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e3a6:	9304      	str	r3, [sp, #16]
 800e3a8:	e73e      	b.n	800e228 <_dtoa_r+0x528>
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	4b1b      	ldr	r3, [pc, #108]	@ (800e41c <_dtoa_r+0x71c>)
 800e3ae:	f7f3 f823 	bl	80013f8 <__aeabi_dmul>
 800e3b2:	900a      	str	r0, [sp, #40]	@ 0x28
 800e3b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e3b6:	e7b9      	b.n	800e32c <_dtoa_r+0x62c>
 800e3b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d10c      	bne.n	800e3d8 <_dtoa_r+0x6d8>
 800e3be:	9806      	ldr	r0, [sp, #24]
 800e3c0:	9907      	ldr	r1, [sp, #28]
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	4b18      	ldr	r3, [pc, #96]	@ (800e428 <_dtoa_r+0x728>)
 800e3c6:	f7f3 f817 	bl	80013f8 <__aeabi_dmul>
 800e3ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e3cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e3ce:	f7f2 f861 	bl	8000494 <__aeabi_dcmpge>
 800e3d2:	2800      	cmp	r0, #0
 800e3d4:	d100      	bne.n	800e3d8 <_dtoa_r+0x6d8>
 800e3d6:	e164      	b.n	800e6a2 <_dtoa_r+0x9a2>
 800e3d8:	2600      	movs	r6, #0
 800e3da:	0037      	movs	r7, r6
 800e3dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e3de:	9c08      	ldr	r4, [sp, #32]
 800e3e0:	43db      	mvns	r3, r3
 800e3e2:	930c      	str	r3, [sp, #48]	@ 0x30
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	9304      	str	r3, [sp, #16]
 800e3e8:	0031      	movs	r1, r6
 800e3ea:	9803      	ldr	r0, [sp, #12]
 800e3ec:	f000 fbc6 	bl	800eb7c <_Bfree>
 800e3f0:	2f00      	cmp	r7, #0
 800e3f2:	d0d7      	beq.n	800e3a4 <_dtoa_r+0x6a4>
 800e3f4:	9b04      	ldr	r3, [sp, #16]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d005      	beq.n	800e406 <_dtoa_r+0x706>
 800e3fa:	42bb      	cmp	r3, r7
 800e3fc:	d003      	beq.n	800e406 <_dtoa_r+0x706>
 800e3fe:	0019      	movs	r1, r3
 800e400:	9803      	ldr	r0, [sp, #12]
 800e402:	f000 fbbb 	bl	800eb7c <_Bfree>
 800e406:	0039      	movs	r1, r7
 800e408:	9803      	ldr	r0, [sp, #12]
 800e40a:	f000 fbb7 	bl	800eb7c <_Bfree>
 800e40e:	e7c9      	b.n	800e3a4 <_dtoa_r+0x6a4>
 800e410:	080101b8 	.word	0x080101b8
 800e414:	08010190 	.word	0x08010190
 800e418:	3ff00000 	.word	0x3ff00000
 800e41c:	40240000 	.word	0x40240000
 800e420:	401c0000 	.word	0x401c0000
 800e424:	fcc00000 	.word	0xfcc00000
 800e428:	40140000 	.word	0x40140000
 800e42c:	3fe00000 	.word	0x3fe00000
 800e430:	9b04      	ldr	r3, [sp, #16]
 800e432:	930c      	str	r3, [sp, #48]	@ 0x30
 800e434:	0023      	movs	r3, r4
 800e436:	001c      	movs	r4, r3
 800e438:	3b01      	subs	r3, #1
 800e43a:	781a      	ldrb	r2, [r3, #0]
 800e43c:	2a39      	cmp	r2, #57	@ 0x39
 800e43e:	d108      	bne.n	800e452 <_dtoa_r+0x752>
 800e440:	9a08      	ldr	r2, [sp, #32]
 800e442:	429a      	cmp	r2, r3
 800e444:	d1f7      	bne.n	800e436 <_dtoa_r+0x736>
 800e446:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e448:	9908      	ldr	r1, [sp, #32]
 800e44a:	3201      	adds	r2, #1
 800e44c:	920c      	str	r2, [sp, #48]	@ 0x30
 800e44e:	2230      	movs	r2, #48	@ 0x30
 800e450:	700a      	strb	r2, [r1, #0]
 800e452:	781a      	ldrb	r2, [r3, #0]
 800e454:	3201      	adds	r2, #1
 800e456:	701a      	strb	r2, [r3, #0]
 800e458:	e7a4      	b.n	800e3a4 <_dtoa_r+0x6a4>
 800e45a:	2200      	movs	r2, #0
 800e45c:	4bc6      	ldr	r3, [pc, #792]	@ (800e778 <_dtoa_r+0xa78>)
 800e45e:	f7f2 ffcb 	bl	80013f8 <__aeabi_dmul>
 800e462:	2200      	movs	r2, #0
 800e464:	2300      	movs	r3, #0
 800e466:	0006      	movs	r6, r0
 800e468:	000f      	movs	r7, r1
 800e46a:	f7f1 ffef 	bl	800044c <__aeabi_dcmpeq>
 800e46e:	2800      	cmp	r0, #0
 800e470:	d100      	bne.n	800e474 <_dtoa_r+0x774>
 800e472:	e6a1      	b.n	800e1b8 <_dtoa_r+0x4b8>
 800e474:	e6d8      	b.n	800e228 <_dtoa_r+0x528>
 800e476:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800e478:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800e47a:	9c06      	ldr	r4, [sp, #24]
 800e47c:	2f00      	cmp	r7, #0
 800e47e:	d014      	beq.n	800e4aa <_dtoa_r+0x7aa>
 800e480:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e482:	2a01      	cmp	r2, #1
 800e484:	dd00      	ble.n	800e488 <_dtoa_r+0x788>
 800e486:	e0c8      	b.n	800e61a <_dtoa_r+0x91a>
 800e488:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800e48a:	2a00      	cmp	r2, #0
 800e48c:	d100      	bne.n	800e490 <_dtoa_r+0x790>
 800e48e:	e0be      	b.n	800e60e <_dtoa_r+0x90e>
 800e490:	4aba      	ldr	r2, [pc, #744]	@ (800e77c <_dtoa_r+0xa7c>)
 800e492:	189b      	adds	r3, r3, r2
 800e494:	9a06      	ldr	r2, [sp, #24]
 800e496:	2101      	movs	r1, #1
 800e498:	18d2      	adds	r2, r2, r3
 800e49a:	9206      	str	r2, [sp, #24]
 800e49c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e49e:	9803      	ldr	r0, [sp, #12]
 800e4a0:	18d3      	adds	r3, r2, r3
 800e4a2:	930d      	str	r3, [sp, #52]	@ 0x34
 800e4a4:	f000 fc22 	bl	800ecec <__i2b>
 800e4a8:	0007      	movs	r7, r0
 800e4aa:	2c00      	cmp	r4, #0
 800e4ac:	d00e      	beq.n	800e4cc <_dtoa_r+0x7cc>
 800e4ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	dd0b      	ble.n	800e4cc <_dtoa_r+0x7cc>
 800e4b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e4b6:	0023      	movs	r3, r4
 800e4b8:	4294      	cmp	r4, r2
 800e4ba:	dd00      	ble.n	800e4be <_dtoa_r+0x7be>
 800e4bc:	0013      	movs	r3, r2
 800e4be:	9a06      	ldr	r2, [sp, #24]
 800e4c0:	1ae4      	subs	r4, r4, r3
 800e4c2:	1ad2      	subs	r2, r2, r3
 800e4c4:	9206      	str	r2, [sp, #24]
 800e4c6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e4c8:	1ad3      	subs	r3, r2, r3
 800e4ca:	930d      	str	r3, [sp, #52]	@ 0x34
 800e4cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d01f      	beq.n	800e512 <_dtoa_r+0x812>
 800e4d2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d100      	bne.n	800e4da <_dtoa_r+0x7da>
 800e4d8:	e0b5      	b.n	800e646 <_dtoa_r+0x946>
 800e4da:	2d00      	cmp	r5, #0
 800e4dc:	d010      	beq.n	800e500 <_dtoa_r+0x800>
 800e4de:	0039      	movs	r1, r7
 800e4e0:	002a      	movs	r2, r5
 800e4e2:	9803      	ldr	r0, [sp, #12]
 800e4e4:	f000 fccc 	bl	800ee80 <__pow5mult>
 800e4e8:	9a05      	ldr	r2, [sp, #20]
 800e4ea:	0001      	movs	r1, r0
 800e4ec:	0007      	movs	r7, r0
 800e4ee:	9803      	ldr	r0, [sp, #12]
 800e4f0:	f000 fc14 	bl	800ed1c <__multiply>
 800e4f4:	0006      	movs	r6, r0
 800e4f6:	9905      	ldr	r1, [sp, #20]
 800e4f8:	9803      	ldr	r0, [sp, #12]
 800e4fa:	f000 fb3f 	bl	800eb7c <_Bfree>
 800e4fe:	9605      	str	r6, [sp, #20]
 800e500:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e502:	1b5a      	subs	r2, r3, r5
 800e504:	42ab      	cmp	r3, r5
 800e506:	d004      	beq.n	800e512 <_dtoa_r+0x812>
 800e508:	9905      	ldr	r1, [sp, #20]
 800e50a:	9803      	ldr	r0, [sp, #12]
 800e50c:	f000 fcb8 	bl	800ee80 <__pow5mult>
 800e510:	9005      	str	r0, [sp, #20]
 800e512:	2101      	movs	r1, #1
 800e514:	9803      	ldr	r0, [sp, #12]
 800e516:	f000 fbe9 	bl	800ecec <__i2b>
 800e51a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e51c:	0006      	movs	r6, r0
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d100      	bne.n	800e524 <_dtoa_r+0x824>
 800e522:	e1bc      	b.n	800e89e <_dtoa_r+0xb9e>
 800e524:	001a      	movs	r2, r3
 800e526:	0001      	movs	r1, r0
 800e528:	9803      	ldr	r0, [sp, #12]
 800e52a:	f000 fca9 	bl	800ee80 <__pow5mult>
 800e52e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e530:	0006      	movs	r6, r0
 800e532:	2500      	movs	r5, #0
 800e534:	2b01      	cmp	r3, #1
 800e536:	dc16      	bgt.n	800e566 <_dtoa_r+0x866>
 800e538:	2500      	movs	r5, #0
 800e53a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e53c:	42ab      	cmp	r3, r5
 800e53e:	d10e      	bne.n	800e55e <_dtoa_r+0x85e>
 800e540:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e542:	031b      	lsls	r3, r3, #12
 800e544:	42ab      	cmp	r3, r5
 800e546:	d10a      	bne.n	800e55e <_dtoa_r+0x85e>
 800e548:	4b8d      	ldr	r3, [pc, #564]	@ (800e780 <_dtoa_r+0xa80>)
 800e54a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e54c:	4213      	tst	r3, r2
 800e54e:	d006      	beq.n	800e55e <_dtoa_r+0x85e>
 800e550:	9b06      	ldr	r3, [sp, #24]
 800e552:	3501      	adds	r5, #1
 800e554:	3301      	adds	r3, #1
 800e556:	9306      	str	r3, [sp, #24]
 800e558:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e55a:	3301      	adds	r3, #1
 800e55c:	930d      	str	r3, [sp, #52]	@ 0x34
 800e55e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e560:	2001      	movs	r0, #1
 800e562:	2b00      	cmp	r3, #0
 800e564:	d008      	beq.n	800e578 <_dtoa_r+0x878>
 800e566:	6933      	ldr	r3, [r6, #16]
 800e568:	3303      	adds	r3, #3
 800e56a:	009b      	lsls	r3, r3, #2
 800e56c:	18f3      	adds	r3, r6, r3
 800e56e:	6858      	ldr	r0, [r3, #4]
 800e570:	f000 fb6c 	bl	800ec4c <__hi0bits>
 800e574:	2320      	movs	r3, #32
 800e576:	1a18      	subs	r0, r3, r0
 800e578:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e57a:	1818      	adds	r0, r3, r0
 800e57c:	0002      	movs	r2, r0
 800e57e:	231f      	movs	r3, #31
 800e580:	401a      	ands	r2, r3
 800e582:	4218      	tst	r0, r3
 800e584:	d065      	beq.n	800e652 <_dtoa_r+0x952>
 800e586:	3301      	adds	r3, #1
 800e588:	1a9b      	subs	r3, r3, r2
 800e58a:	2b04      	cmp	r3, #4
 800e58c:	dd5d      	ble.n	800e64a <_dtoa_r+0x94a>
 800e58e:	231c      	movs	r3, #28
 800e590:	1a9b      	subs	r3, r3, r2
 800e592:	9a06      	ldr	r2, [sp, #24]
 800e594:	18e4      	adds	r4, r4, r3
 800e596:	18d2      	adds	r2, r2, r3
 800e598:	9206      	str	r2, [sp, #24]
 800e59a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e59c:	18d3      	adds	r3, r2, r3
 800e59e:	930d      	str	r3, [sp, #52]	@ 0x34
 800e5a0:	9b06      	ldr	r3, [sp, #24]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	dd05      	ble.n	800e5b2 <_dtoa_r+0x8b2>
 800e5a6:	001a      	movs	r2, r3
 800e5a8:	9905      	ldr	r1, [sp, #20]
 800e5aa:	9803      	ldr	r0, [sp, #12]
 800e5ac:	f000 fcc4 	bl	800ef38 <__lshift>
 800e5b0:	9005      	str	r0, [sp, #20]
 800e5b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	dd05      	ble.n	800e5c4 <_dtoa_r+0x8c4>
 800e5b8:	0031      	movs	r1, r6
 800e5ba:	001a      	movs	r2, r3
 800e5bc:	9803      	ldr	r0, [sp, #12]
 800e5be:	f000 fcbb 	bl	800ef38 <__lshift>
 800e5c2:	0006      	movs	r6, r0
 800e5c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d045      	beq.n	800e656 <_dtoa_r+0x956>
 800e5ca:	0031      	movs	r1, r6
 800e5cc:	9805      	ldr	r0, [sp, #20]
 800e5ce:	f000 fd1f 	bl	800f010 <__mcmp>
 800e5d2:	2800      	cmp	r0, #0
 800e5d4:	da3f      	bge.n	800e656 <_dtoa_r+0x956>
 800e5d6:	9b04      	ldr	r3, [sp, #16]
 800e5d8:	220a      	movs	r2, #10
 800e5da:	3b01      	subs	r3, #1
 800e5dc:	930c      	str	r3, [sp, #48]	@ 0x30
 800e5de:	9905      	ldr	r1, [sp, #20]
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	9803      	ldr	r0, [sp, #12]
 800e5e4:	f000 faee 	bl	800ebc4 <__multadd>
 800e5e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e5ea:	9005      	str	r0, [sp, #20]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d100      	bne.n	800e5f2 <_dtoa_r+0x8f2>
 800e5f0:	e15c      	b.n	800e8ac <_dtoa_r+0xbac>
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	0039      	movs	r1, r7
 800e5f6:	220a      	movs	r2, #10
 800e5f8:	9803      	ldr	r0, [sp, #12]
 800e5fa:	f000 fae3 	bl	800ebc4 <__multadd>
 800e5fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e600:	0007      	movs	r7, r0
 800e602:	2b00      	cmp	r3, #0
 800e604:	dc55      	bgt.n	800e6b2 <_dtoa_r+0x9b2>
 800e606:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e608:	2b02      	cmp	r3, #2
 800e60a:	dc2d      	bgt.n	800e668 <_dtoa_r+0x968>
 800e60c:	e051      	b.n	800e6b2 <_dtoa_r+0x9b2>
 800e60e:	2336      	movs	r3, #54	@ 0x36
 800e610:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e612:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800e614:	9c06      	ldr	r4, [sp, #24]
 800e616:	1a9b      	subs	r3, r3, r2
 800e618:	e73c      	b.n	800e494 <_dtoa_r+0x794>
 800e61a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e61c:	1e5d      	subs	r5, r3, #1
 800e61e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e620:	42ab      	cmp	r3, r5
 800e622:	db08      	blt.n	800e636 <_dtoa_r+0x936>
 800e624:	1b5d      	subs	r5, r3, r5
 800e626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e628:	9c06      	ldr	r4, [sp, #24]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	db00      	blt.n	800e630 <_dtoa_r+0x930>
 800e62e:	e731      	b.n	800e494 <_dtoa_r+0x794>
 800e630:	1ae4      	subs	r4, r4, r3
 800e632:	2300      	movs	r3, #0
 800e634:	e72e      	b.n	800e494 <_dtoa_r+0x794>
 800e636:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e638:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e63a:	1aeb      	subs	r3, r5, r3
 800e63c:	18d3      	adds	r3, r2, r3
 800e63e:	950f      	str	r5, [sp, #60]	@ 0x3c
 800e640:	9314      	str	r3, [sp, #80]	@ 0x50
 800e642:	2500      	movs	r5, #0
 800e644:	e7ef      	b.n	800e626 <_dtoa_r+0x926>
 800e646:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e648:	e75e      	b.n	800e508 <_dtoa_r+0x808>
 800e64a:	2b04      	cmp	r3, #4
 800e64c:	d0a8      	beq.n	800e5a0 <_dtoa_r+0x8a0>
 800e64e:	331c      	adds	r3, #28
 800e650:	e79f      	b.n	800e592 <_dtoa_r+0x892>
 800e652:	0013      	movs	r3, r2
 800e654:	e7fb      	b.n	800e64e <_dtoa_r+0x94e>
 800e656:	9b04      	ldr	r3, [sp, #16]
 800e658:	930c      	str	r3, [sp, #48]	@ 0x30
 800e65a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e65c:	930e      	str	r3, [sp, #56]	@ 0x38
 800e65e:	2b00      	cmp	r3, #0
 800e660:	dc23      	bgt.n	800e6aa <_dtoa_r+0x9aa>
 800e662:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e664:	2b02      	cmp	r3, #2
 800e666:	dd20      	ble.n	800e6aa <_dtoa_r+0x9aa>
 800e668:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d000      	beq.n	800e670 <_dtoa_r+0x970>
 800e66e:	e6b5      	b.n	800e3dc <_dtoa_r+0x6dc>
 800e670:	0031      	movs	r1, r6
 800e672:	2205      	movs	r2, #5
 800e674:	9803      	ldr	r0, [sp, #12]
 800e676:	f000 faa5 	bl	800ebc4 <__multadd>
 800e67a:	0006      	movs	r6, r0
 800e67c:	0001      	movs	r1, r0
 800e67e:	9805      	ldr	r0, [sp, #20]
 800e680:	f000 fcc6 	bl	800f010 <__mcmp>
 800e684:	2800      	cmp	r0, #0
 800e686:	dc00      	bgt.n	800e68a <_dtoa_r+0x98a>
 800e688:	e6a8      	b.n	800e3dc <_dtoa_r+0x6dc>
 800e68a:	9b08      	ldr	r3, [sp, #32]
 800e68c:	9a08      	ldr	r2, [sp, #32]
 800e68e:	1c5c      	adds	r4, r3, #1
 800e690:	2331      	movs	r3, #49	@ 0x31
 800e692:	7013      	strb	r3, [r2, #0]
 800e694:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e696:	3301      	adds	r3, #1
 800e698:	930c      	str	r3, [sp, #48]	@ 0x30
 800e69a:	e6a3      	b.n	800e3e4 <_dtoa_r+0x6e4>
 800e69c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800e69e:	0037      	movs	r7, r6
 800e6a0:	e7f3      	b.n	800e68a <_dtoa_r+0x98a>
 800e6a2:	9b04      	ldr	r3, [sp, #16]
 800e6a4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800e6a6:	930c      	str	r3, [sp, #48]	@ 0x30
 800e6a8:	e7f9      	b.n	800e69e <_dtoa_r+0x99e>
 800e6aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d100      	bne.n	800e6b2 <_dtoa_r+0x9b2>
 800e6b0:	e100      	b.n	800e8b4 <_dtoa_r+0xbb4>
 800e6b2:	2c00      	cmp	r4, #0
 800e6b4:	dd05      	ble.n	800e6c2 <_dtoa_r+0x9c2>
 800e6b6:	0039      	movs	r1, r7
 800e6b8:	0022      	movs	r2, r4
 800e6ba:	9803      	ldr	r0, [sp, #12]
 800e6bc:	f000 fc3c 	bl	800ef38 <__lshift>
 800e6c0:	0007      	movs	r7, r0
 800e6c2:	0038      	movs	r0, r7
 800e6c4:	2d00      	cmp	r5, #0
 800e6c6:	d018      	beq.n	800e6fa <_dtoa_r+0x9fa>
 800e6c8:	6879      	ldr	r1, [r7, #4]
 800e6ca:	9803      	ldr	r0, [sp, #12]
 800e6cc:	f000 fa12 	bl	800eaf4 <_Balloc>
 800e6d0:	1e04      	subs	r4, r0, #0
 800e6d2:	d105      	bne.n	800e6e0 <_dtoa_r+0x9e0>
 800e6d4:	0022      	movs	r2, r4
 800e6d6:	4b2b      	ldr	r3, [pc, #172]	@ (800e784 <_dtoa_r+0xa84>)
 800e6d8:	482b      	ldr	r0, [pc, #172]	@ (800e788 <_dtoa_r+0xa88>)
 800e6da:	492c      	ldr	r1, [pc, #176]	@ (800e78c <_dtoa_r+0xa8c>)
 800e6dc:	f7ff fb25 	bl	800dd2a <_dtoa_r+0x2a>
 800e6e0:	0039      	movs	r1, r7
 800e6e2:	693a      	ldr	r2, [r7, #16]
 800e6e4:	310c      	adds	r1, #12
 800e6e6:	3202      	adds	r2, #2
 800e6e8:	0092      	lsls	r2, r2, #2
 800e6ea:	300c      	adds	r0, #12
 800e6ec:	f7ff fa70 	bl	800dbd0 <memcpy>
 800e6f0:	2201      	movs	r2, #1
 800e6f2:	0021      	movs	r1, r4
 800e6f4:	9803      	ldr	r0, [sp, #12]
 800e6f6:	f000 fc1f 	bl	800ef38 <__lshift>
 800e6fa:	9b08      	ldr	r3, [sp, #32]
 800e6fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e6fe:	9306      	str	r3, [sp, #24]
 800e700:	3b01      	subs	r3, #1
 800e702:	189b      	adds	r3, r3, r2
 800e704:	2201      	movs	r2, #1
 800e706:	9704      	str	r7, [sp, #16]
 800e708:	0007      	movs	r7, r0
 800e70a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e70c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e70e:	4013      	ands	r3, r2
 800e710:	930e      	str	r3, [sp, #56]	@ 0x38
 800e712:	0031      	movs	r1, r6
 800e714:	9805      	ldr	r0, [sp, #20]
 800e716:	f7ff fa64 	bl	800dbe2 <quorem>
 800e71a:	9904      	ldr	r1, [sp, #16]
 800e71c:	0005      	movs	r5, r0
 800e71e:	900a      	str	r0, [sp, #40]	@ 0x28
 800e720:	9805      	ldr	r0, [sp, #20]
 800e722:	f000 fc75 	bl	800f010 <__mcmp>
 800e726:	003a      	movs	r2, r7
 800e728:	900d      	str	r0, [sp, #52]	@ 0x34
 800e72a:	0031      	movs	r1, r6
 800e72c:	9803      	ldr	r0, [sp, #12]
 800e72e:	f000 fc8b 	bl	800f048 <__mdiff>
 800e732:	2201      	movs	r2, #1
 800e734:	68c3      	ldr	r3, [r0, #12]
 800e736:	0004      	movs	r4, r0
 800e738:	3530      	adds	r5, #48	@ 0x30
 800e73a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d104      	bne.n	800e74a <_dtoa_r+0xa4a>
 800e740:	0001      	movs	r1, r0
 800e742:	9805      	ldr	r0, [sp, #20]
 800e744:	f000 fc64 	bl	800f010 <__mcmp>
 800e748:	9009      	str	r0, [sp, #36]	@ 0x24
 800e74a:	0021      	movs	r1, r4
 800e74c:	9803      	ldr	r0, [sp, #12]
 800e74e:	f000 fa15 	bl	800eb7c <_Bfree>
 800e752:	9b06      	ldr	r3, [sp, #24]
 800e754:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e756:	1c5c      	adds	r4, r3, #1
 800e758:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e75a:	4313      	orrs	r3, r2
 800e75c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e75e:	4313      	orrs	r3, r2
 800e760:	d116      	bne.n	800e790 <_dtoa_r+0xa90>
 800e762:	2d39      	cmp	r5, #57	@ 0x39
 800e764:	d02f      	beq.n	800e7c6 <_dtoa_r+0xac6>
 800e766:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e768:	2b00      	cmp	r3, #0
 800e76a:	dd01      	ble.n	800e770 <_dtoa_r+0xa70>
 800e76c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800e76e:	3531      	adds	r5, #49	@ 0x31
 800e770:	9b06      	ldr	r3, [sp, #24]
 800e772:	701d      	strb	r5, [r3, #0]
 800e774:	e638      	b.n	800e3e8 <_dtoa_r+0x6e8>
 800e776:	46c0      	nop			@ (mov r8, r8)
 800e778:	40240000 	.word	0x40240000
 800e77c:	00000433 	.word	0x00000433
 800e780:	7ff00000 	.word	0x7ff00000
 800e784:	08010114 	.word	0x08010114
 800e788:	080100bc 	.word	0x080100bc
 800e78c:	000002ef 	.word	0x000002ef
 800e790:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e792:	2b00      	cmp	r3, #0
 800e794:	db04      	blt.n	800e7a0 <_dtoa_r+0xaa0>
 800e796:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e798:	4313      	orrs	r3, r2
 800e79a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e79c:	4313      	orrs	r3, r2
 800e79e:	d11e      	bne.n	800e7de <_dtoa_r+0xade>
 800e7a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	dde4      	ble.n	800e770 <_dtoa_r+0xa70>
 800e7a6:	9905      	ldr	r1, [sp, #20]
 800e7a8:	2201      	movs	r2, #1
 800e7aa:	9803      	ldr	r0, [sp, #12]
 800e7ac:	f000 fbc4 	bl	800ef38 <__lshift>
 800e7b0:	0031      	movs	r1, r6
 800e7b2:	9005      	str	r0, [sp, #20]
 800e7b4:	f000 fc2c 	bl	800f010 <__mcmp>
 800e7b8:	2800      	cmp	r0, #0
 800e7ba:	dc02      	bgt.n	800e7c2 <_dtoa_r+0xac2>
 800e7bc:	d1d8      	bne.n	800e770 <_dtoa_r+0xa70>
 800e7be:	07eb      	lsls	r3, r5, #31
 800e7c0:	d5d6      	bpl.n	800e770 <_dtoa_r+0xa70>
 800e7c2:	2d39      	cmp	r5, #57	@ 0x39
 800e7c4:	d1d2      	bne.n	800e76c <_dtoa_r+0xa6c>
 800e7c6:	2339      	movs	r3, #57	@ 0x39
 800e7c8:	9a06      	ldr	r2, [sp, #24]
 800e7ca:	7013      	strb	r3, [r2, #0]
 800e7cc:	0023      	movs	r3, r4
 800e7ce:	001c      	movs	r4, r3
 800e7d0:	3b01      	subs	r3, #1
 800e7d2:	781a      	ldrb	r2, [r3, #0]
 800e7d4:	2a39      	cmp	r2, #57	@ 0x39
 800e7d6:	d04f      	beq.n	800e878 <_dtoa_r+0xb78>
 800e7d8:	3201      	adds	r2, #1
 800e7da:	701a      	strb	r2, [r3, #0]
 800e7dc:	e604      	b.n	800e3e8 <_dtoa_r+0x6e8>
 800e7de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	dd03      	ble.n	800e7ec <_dtoa_r+0xaec>
 800e7e4:	2d39      	cmp	r5, #57	@ 0x39
 800e7e6:	d0ee      	beq.n	800e7c6 <_dtoa_r+0xac6>
 800e7e8:	3501      	adds	r5, #1
 800e7ea:	e7c1      	b.n	800e770 <_dtoa_r+0xa70>
 800e7ec:	9b06      	ldr	r3, [sp, #24]
 800e7ee:	9a06      	ldr	r2, [sp, #24]
 800e7f0:	701d      	strb	r5, [r3, #0]
 800e7f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e7f4:	4293      	cmp	r3, r2
 800e7f6:	d02a      	beq.n	800e84e <_dtoa_r+0xb4e>
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	220a      	movs	r2, #10
 800e7fc:	9905      	ldr	r1, [sp, #20]
 800e7fe:	9803      	ldr	r0, [sp, #12]
 800e800:	f000 f9e0 	bl	800ebc4 <__multadd>
 800e804:	9b04      	ldr	r3, [sp, #16]
 800e806:	9005      	str	r0, [sp, #20]
 800e808:	42bb      	cmp	r3, r7
 800e80a:	d109      	bne.n	800e820 <_dtoa_r+0xb20>
 800e80c:	2300      	movs	r3, #0
 800e80e:	220a      	movs	r2, #10
 800e810:	9904      	ldr	r1, [sp, #16]
 800e812:	9803      	ldr	r0, [sp, #12]
 800e814:	f000 f9d6 	bl	800ebc4 <__multadd>
 800e818:	9004      	str	r0, [sp, #16]
 800e81a:	0007      	movs	r7, r0
 800e81c:	9406      	str	r4, [sp, #24]
 800e81e:	e778      	b.n	800e712 <_dtoa_r+0xa12>
 800e820:	9904      	ldr	r1, [sp, #16]
 800e822:	2300      	movs	r3, #0
 800e824:	220a      	movs	r2, #10
 800e826:	9803      	ldr	r0, [sp, #12]
 800e828:	f000 f9cc 	bl	800ebc4 <__multadd>
 800e82c:	2300      	movs	r3, #0
 800e82e:	9004      	str	r0, [sp, #16]
 800e830:	220a      	movs	r2, #10
 800e832:	0039      	movs	r1, r7
 800e834:	9803      	ldr	r0, [sp, #12]
 800e836:	f000 f9c5 	bl	800ebc4 <__multadd>
 800e83a:	e7ee      	b.n	800e81a <_dtoa_r+0xb1a>
 800e83c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e83e:	2401      	movs	r4, #1
 800e840:	2b00      	cmp	r3, #0
 800e842:	dd00      	ble.n	800e846 <_dtoa_r+0xb46>
 800e844:	001c      	movs	r4, r3
 800e846:	9b08      	ldr	r3, [sp, #32]
 800e848:	191c      	adds	r4, r3, r4
 800e84a:	2300      	movs	r3, #0
 800e84c:	9304      	str	r3, [sp, #16]
 800e84e:	9905      	ldr	r1, [sp, #20]
 800e850:	2201      	movs	r2, #1
 800e852:	9803      	ldr	r0, [sp, #12]
 800e854:	f000 fb70 	bl	800ef38 <__lshift>
 800e858:	0031      	movs	r1, r6
 800e85a:	9005      	str	r0, [sp, #20]
 800e85c:	f000 fbd8 	bl	800f010 <__mcmp>
 800e860:	2800      	cmp	r0, #0
 800e862:	dcb3      	bgt.n	800e7cc <_dtoa_r+0xacc>
 800e864:	d101      	bne.n	800e86a <_dtoa_r+0xb6a>
 800e866:	07ed      	lsls	r5, r5, #31
 800e868:	d4b0      	bmi.n	800e7cc <_dtoa_r+0xacc>
 800e86a:	0023      	movs	r3, r4
 800e86c:	001c      	movs	r4, r3
 800e86e:	3b01      	subs	r3, #1
 800e870:	781a      	ldrb	r2, [r3, #0]
 800e872:	2a30      	cmp	r2, #48	@ 0x30
 800e874:	d0fa      	beq.n	800e86c <_dtoa_r+0xb6c>
 800e876:	e5b7      	b.n	800e3e8 <_dtoa_r+0x6e8>
 800e878:	9a08      	ldr	r2, [sp, #32]
 800e87a:	429a      	cmp	r2, r3
 800e87c:	d1a7      	bne.n	800e7ce <_dtoa_r+0xace>
 800e87e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e880:	3301      	adds	r3, #1
 800e882:	930c      	str	r3, [sp, #48]	@ 0x30
 800e884:	2331      	movs	r3, #49	@ 0x31
 800e886:	7013      	strb	r3, [r2, #0]
 800e888:	e5ae      	b.n	800e3e8 <_dtoa_r+0x6e8>
 800e88a:	4b15      	ldr	r3, [pc, #84]	@ (800e8e0 <_dtoa_r+0xbe0>)
 800e88c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800e88e:	9308      	str	r3, [sp, #32]
 800e890:	4b14      	ldr	r3, [pc, #80]	@ (800e8e4 <_dtoa_r+0xbe4>)
 800e892:	2a00      	cmp	r2, #0
 800e894:	d001      	beq.n	800e89a <_dtoa_r+0xb9a>
 800e896:	f7ff fa7b 	bl	800dd90 <_dtoa_r+0x90>
 800e89a:	f7ff fa7b 	bl	800dd94 <_dtoa_r+0x94>
 800e89e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e8a0:	2b01      	cmp	r3, #1
 800e8a2:	dc00      	bgt.n	800e8a6 <_dtoa_r+0xba6>
 800e8a4:	e648      	b.n	800e538 <_dtoa_r+0x838>
 800e8a6:	2001      	movs	r0, #1
 800e8a8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800e8aa:	e665      	b.n	800e578 <_dtoa_r+0x878>
 800e8ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	dc00      	bgt.n	800e8b4 <_dtoa_r+0xbb4>
 800e8b2:	e6d6      	b.n	800e662 <_dtoa_r+0x962>
 800e8b4:	2400      	movs	r4, #0
 800e8b6:	0031      	movs	r1, r6
 800e8b8:	9805      	ldr	r0, [sp, #20]
 800e8ba:	f7ff f992 	bl	800dbe2 <quorem>
 800e8be:	9b08      	ldr	r3, [sp, #32]
 800e8c0:	3030      	adds	r0, #48	@ 0x30
 800e8c2:	5518      	strb	r0, [r3, r4]
 800e8c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8c6:	3401      	adds	r4, #1
 800e8c8:	0005      	movs	r5, r0
 800e8ca:	429c      	cmp	r4, r3
 800e8cc:	dab6      	bge.n	800e83c <_dtoa_r+0xb3c>
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	220a      	movs	r2, #10
 800e8d2:	9905      	ldr	r1, [sp, #20]
 800e8d4:	9803      	ldr	r0, [sp, #12]
 800e8d6:	f000 f975 	bl	800ebc4 <__multadd>
 800e8da:	9005      	str	r0, [sp, #20]
 800e8dc:	e7eb      	b.n	800e8b6 <_dtoa_r+0xbb6>
 800e8de:	46c0      	nop			@ (mov r8, r8)
 800e8e0:	08010098 	.word	0x08010098
 800e8e4:	080100a0 	.word	0x080100a0

0800e8e8 <_free_r>:
 800e8e8:	b570      	push	{r4, r5, r6, lr}
 800e8ea:	0005      	movs	r5, r0
 800e8ec:	1e0c      	subs	r4, r1, #0
 800e8ee:	d010      	beq.n	800e912 <_free_r+0x2a>
 800e8f0:	3c04      	subs	r4, #4
 800e8f2:	6823      	ldr	r3, [r4, #0]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	da00      	bge.n	800e8fa <_free_r+0x12>
 800e8f8:	18e4      	adds	r4, r4, r3
 800e8fa:	0028      	movs	r0, r5
 800e8fc:	f000 f8ea 	bl	800ead4 <__malloc_lock>
 800e900:	4a1d      	ldr	r2, [pc, #116]	@ (800e978 <_free_r+0x90>)
 800e902:	6813      	ldr	r3, [r2, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d105      	bne.n	800e914 <_free_r+0x2c>
 800e908:	6063      	str	r3, [r4, #4]
 800e90a:	6014      	str	r4, [r2, #0]
 800e90c:	0028      	movs	r0, r5
 800e90e:	f000 f8e9 	bl	800eae4 <__malloc_unlock>
 800e912:	bd70      	pop	{r4, r5, r6, pc}
 800e914:	42a3      	cmp	r3, r4
 800e916:	d908      	bls.n	800e92a <_free_r+0x42>
 800e918:	6820      	ldr	r0, [r4, #0]
 800e91a:	1821      	adds	r1, r4, r0
 800e91c:	428b      	cmp	r3, r1
 800e91e:	d1f3      	bne.n	800e908 <_free_r+0x20>
 800e920:	6819      	ldr	r1, [r3, #0]
 800e922:	685b      	ldr	r3, [r3, #4]
 800e924:	1809      	adds	r1, r1, r0
 800e926:	6021      	str	r1, [r4, #0]
 800e928:	e7ee      	b.n	800e908 <_free_r+0x20>
 800e92a:	001a      	movs	r2, r3
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d001      	beq.n	800e936 <_free_r+0x4e>
 800e932:	42a3      	cmp	r3, r4
 800e934:	d9f9      	bls.n	800e92a <_free_r+0x42>
 800e936:	6811      	ldr	r1, [r2, #0]
 800e938:	1850      	adds	r0, r2, r1
 800e93a:	42a0      	cmp	r0, r4
 800e93c:	d10b      	bne.n	800e956 <_free_r+0x6e>
 800e93e:	6820      	ldr	r0, [r4, #0]
 800e940:	1809      	adds	r1, r1, r0
 800e942:	1850      	adds	r0, r2, r1
 800e944:	6011      	str	r1, [r2, #0]
 800e946:	4283      	cmp	r3, r0
 800e948:	d1e0      	bne.n	800e90c <_free_r+0x24>
 800e94a:	6818      	ldr	r0, [r3, #0]
 800e94c:	685b      	ldr	r3, [r3, #4]
 800e94e:	1841      	adds	r1, r0, r1
 800e950:	6011      	str	r1, [r2, #0]
 800e952:	6053      	str	r3, [r2, #4]
 800e954:	e7da      	b.n	800e90c <_free_r+0x24>
 800e956:	42a0      	cmp	r0, r4
 800e958:	d902      	bls.n	800e960 <_free_r+0x78>
 800e95a:	230c      	movs	r3, #12
 800e95c:	602b      	str	r3, [r5, #0]
 800e95e:	e7d5      	b.n	800e90c <_free_r+0x24>
 800e960:	6820      	ldr	r0, [r4, #0]
 800e962:	1821      	adds	r1, r4, r0
 800e964:	428b      	cmp	r3, r1
 800e966:	d103      	bne.n	800e970 <_free_r+0x88>
 800e968:	6819      	ldr	r1, [r3, #0]
 800e96a:	685b      	ldr	r3, [r3, #4]
 800e96c:	1809      	adds	r1, r1, r0
 800e96e:	6021      	str	r1, [r4, #0]
 800e970:	6063      	str	r3, [r4, #4]
 800e972:	6054      	str	r4, [r2, #4]
 800e974:	e7ca      	b.n	800e90c <_free_r+0x24>
 800e976:	46c0      	nop			@ (mov r8, r8)
 800e978:	20001ce4 	.word	0x20001ce4

0800e97c <malloc>:
 800e97c:	b510      	push	{r4, lr}
 800e97e:	4b03      	ldr	r3, [pc, #12]	@ (800e98c <malloc+0x10>)
 800e980:	0001      	movs	r1, r0
 800e982:	6818      	ldr	r0, [r3, #0]
 800e984:	f000 f826 	bl	800e9d4 <_malloc_r>
 800e988:	bd10      	pop	{r4, pc}
 800e98a:	46c0      	nop			@ (mov r8, r8)
 800e98c:	200001a0 	.word	0x200001a0

0800e990 <sbrk_aligned>:
 800e990:	b570      	push	{r4, r5, r6, lr}
 800e992:	4e0f      	ldr	r6, [pc, #60]	@ (800e9d0 <sbrk_aligned+0x40>)
 800e994:	000d      	movs	r5, r1
 800e996:	6831      	ldr	r1, [r6, #0]
 800e998:	0004      	movs	r4, r0
 800e99a:	2900      	cmp	r1, #0
 800e99c:	d102      	bne.n	800e9a4 <sbrk_aligned+0x14>
 800e99e:	f000 fe6f 	bl	800f680 <_sbrk_r>
 800e9a2:	6030      	str	r0, [r6, #0]
 800e9a4:	0029      	movs	r1, r5
 800e9a6:	0020      	movs	r0, r4
 800e9a8:	f000 fe6a 	bl	800f680 <_sbrk_r>
 800e9ac:	1c43      	adds	r3, r0, #1
 800e9ae:	d103      	bne.n	800e9b8 <sbrk_aligned+0x28>
 800e9b0:	2501      	movs	r5, #1
 800e9b2:	426d      	negs	r5, r5
 800e9b4:	0028      	movs	r0, r5
 800e9b6:	bd70      	pop	{r4, r5, r6, pc}
 800e9b8:	2303      	movs	r3, #3
 800e9ba:	1cc5      	adds	r5, r0, #3
 800e9bc:	439d      	bics	r5, r3
 800e9be:	42a8      	cmp	r0, r5
 800e9c0:	d0f8      	beq.n	800e9b4 <sbrk_aligned+0x24>
 800e9c2:	1a29      	subs	r1, r5, r0
 800e9c4:	0020      	movs	r0, r4
 800e9c6:	f000 fe5b 	bl	800f680 <_sbrk_r>
 800e9ca:	3001      	adds	r0, #1
 800e9cc:	d1f2      	bne.n	800e9b4 <sbrk_aligned+0x24>
 800e9ce:	e7ef      	b.n	800e9b0 <sbrk_aligned+0x20>
 800e9d0:	20001ce0 	.word	0x20001ce0

0800e9d4 <_malloc_r>:
 800e9d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e9d6:	2203      	movs	r2, #3
 800e9d8:	1ccb      	adds	r3, r1, #3
 800e9da:	4393      	bics	r3, r2
 800e9dc:	3308      	adds	r3, #8
 800e9de:	0005      	movs	r5, r0
 800e9e0:	001f      	movs	r7, r3
 800e9e2:	2b0c      	cmp	r3, #12
 800e9e4:	d234      	bcs.n	800ea50 <_malloc_r+0x7c>
 800e9e6:	270c      	movs	r7, #12
 800e9e8:	42b9      	cmp	r1, r7
 800e9ea:	d833      	bhi.n	800ea54 <_malloc_r+0x80>
 800e9ec:	0028      	movs	r0, r5
 800e9ee:	f000 f871 	bl	800ead4 <__malloc_lock>
 800e9f2:	4e37      	ldr	r6, [pc, #220]	@ (800ead0 <_malloc_r+0xfc>)
 800e9f4:	6833      	ldr	r3, [r6, #0]
 800e9f6:	001c      	movs	r4, r3
 800e9f8:	2c00      	cmp	r4, #0
 800e9fa:	d12f      	bne.n	800ea5c <_malloc_r+0x88>
 800e9fc:	0039      	movs	r1, r7
 800e9fe:	0028      	movs	r0, r5
 800ea00:	f7ff ffc6 	bl	800e990 <sbrk_aligned>
 800ea04:	0004      	movs	r4, r0
 800ea06:	1c43      	adds	r3, r0, #1
 800ea08:	d15f      	bne.n	800eaca <_malloc_r+0xf6>
 800ea0a:	6834      	ldr	r4, [r6, #0]
 800ea0c:	9400      	str	r4, [sp, #0]
 800ea0e:	9b00      	ldr	r3, [sp, #0]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d14a      	bne.n	800eaaa <_malloc_r+0xd6>
 800ea14:	2c00      	cmp	r4, #0
 800ea16:	d052      	beq.n	800eabe <_malloc_r+0xea>
 800ea18:	6823      	ldr	r3, [r4, #0]
 800ea1a:	0028      	movs	r0, r5
 800ea1c:	18e3      	adds	r3, r4, r3
 800ea1e:	9900      	ldr	r1, [sp, #0]
 800ea20:	9301      	str	r3, [sp, #4]
 800ea22:	f000 fe2d 	bl	800f680 <_sbrk_r>
 800ea26:	9b01      	ldr	r3, [sp, #4]
 800ea28:	4283      	cmp	r3, r0
 800ea2a:	d148      	bne.n	800eabe <_malloc_r+0xea>
 800ea2c:	6823      	ldr	r3, [r4, #0]
 800ea2e:	0028      	movs	r0, r5
 800ea30:	1aff      	subs	r7, r7, r3
 800ea32:	0039      	movs	r1, r7
 800ea34:	f7ff ffac 	bl	800e990 <sbrk_aligned>
 800ea38:	3001      	adds	r0, #1
 800ea3a:	d040      	beq.n	800eabe <_malloc_r+0xea>
 800ea3c:	6823      	ldr	r3, [r4, #0]
 800ea3e:	19db      	adds	r3, r3, r7
 800ea40:	6023      	str	r3, [r4, #0]
 800ea42:	6833      	ldr	r3, [r6, #0]
 800ea44:	685a      	ldr	r2, [r3, #4]
 800ea46:	2a00      	cmp	r2, #0
 800ea48:	d133      	bne.n	800eab2 <_malloc_r+0xde>
 800ea4a:	9b00      	ldr	r3, [sp, #0]
 800ea4c:	6033      	str	r3, [r6, #0]
 800ea4e:	e019      	b.n	800ea84 <_malloc_r+0xb0>
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	dac9      	bge.n	800e9e8 <_malloc_r+0x14>
 800ea54:	230c      	movs	r3, #12
 800ea56:	602b      	str	r3, [r5, #0]
 800ea58:	2000      	movs	r0, #0
 800ea5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ea5c:	6821      	ldr	r1, [r4, #0]
 800ea5e:	1bc9      	subs	r1, r1, r7
 800ea60:	d420      	bmi.n	800eaa4 <_malloc_r+0xd0>
 800ea62:	290b      	cmp	r1, #11
 800ea64:	d90a      	bls.n	800ea7c <_malloc_r+0xa8>
 800ea66:	19e2      	adds	r2, r4, r7
 800ea68:	6027      	str	r7, [r4, #0]
 800ea6a:	42a3      	cmp	r3, r4
 800ea6c:	d104      	bne.n	800ea78 <_malloc_r+0xa4>
 800ea6e:	6032      	str	r2, [r6, #0]
 800ea70:	6863      	ldr	r3, [r4, #4]
 800ea72:	6011      	str	r1, [r2, #0]
 800ea74:	6053      	str	r3, [r2, #4]
 800ea76:	e005      	b.n	800ea84 <_malloc_r+0xb0>
 800ea78:	605a      	str	r2, [r3, #4]
 800ea7a:	e7f9      	b.n	800ea70 <_malloc_r+0x9c>
 800ea7c:	6862      	ldr	r2, [r4, #4]
 800ea7e:	42a3      	cmp	r3, r4
 800ea80:	d10e      	bne.n	800eaa0 <_malloc_r+0xcc>
 800ea82:	6032      	str	r2, [r6, #0]
 800ea84:	0028      	movs	r0, r5
 800ea86:	f000 f82d 	bl	800eae4 <__malloc_unlock>
 800ea8a:	0020      	movs	r0, r4
 800ea8c:	2207      	movs	r2, #7
 800ea8e:	300b      	adds	r0, #11
 800ea90:	1d23      	adds	r3, r4, #4
 800ea92:	4390      	bics	r0, r2
 800ea94:	1ac2      	subs	r2, r0, r3
 800ea96:	4298      	cmp	r0, r3
 800ea98:	d0df      	beq.n	800ea5a <_malloc_r+0x86>
 800ea9a:	1a1b      	subs	r3, r3, r0
 800ea9c:	50a3      	str	r3, [r4, r2]
 800ea9e:	e7dc      	b.n	800ea5a <_malloc_r+0x86>
 800eaa0:	605a      	str	r2, [r3, #4]
 800eaa2:	e7ef      	b.n	800ea84 <_malloc_r+0xb0>
 800eaa4:	0023      	movs	r3, r4
 800eaa6:	6864      	ldr	r4, [r4, #4]
 800eaa8:	e7a6      	b.n	800e9f8 <_malloc_r+0x24>
 800eaaa:	9c00      	ldr	r4, [sp, #0]
 800eaac:	6863      	ldr	r3, [r4, #4]
 800eaae:	9300      	str	r3, [sp, #0]
 800eab0:	e7ad      	b.n	800ea0e <_malloc_r+0x3a>
 800eab2:	001a      	movs	r2, r3
 800eab4:	685b      	ldr	r3, [r3, #4]
 800eab6:	42a3      	cmp	r3, r4
 800eab8:	d1fb      	bne.n	800eab2 <_malloc_r+0xde>
 800eaba:	2300      	movs	r3, #0
 800eabc:	e7da      	b.n	800ea74 <_malloc_r+0xa0>
 800eabe:	230c      	movs	r3, #12
 800eac0:	0028      	movs	r0, r5
 800eac2:	602b      	str	r3, [r5, #0]
 800eac4:	f000 f80e 	bl	800eae4 <__malloc_unlock>
 800eac8:	e7c6      	b.n	800ea58 <_malloc_r+0x84>
 800eaca:	6007      	str	r7, [r0, #0]
 800eacc:	e7da      	b.n	800ea84 <_malloc_r+0xb0>
 800eace:	46c0      	nop			@ (mov r8, r8)
 800ead0:	20001ce4 	.word	0x20001ce4

0800ead4 <__malloc_lock>:
 800ead4:	b510      	push	{r4, lr}
 800ead6:	4802      	ldr	r0, [pc, #8]	@ (800eae0 <__malloc_lock+0xc>)
 800ead8:	f7ff f86d 	bl	800dbb6 <__retarget_lock_acquire_recursive>
 800eadc:	bd10      	pop	{r4, pc}
 800eade:	46c0      	nop			@ (mov r8, r8)
 800eae0:	20001cdc 	.word	0x20001cdc

0800eae4 <__malloc_unlock>:
 800eae4:	b510      	push	{r4, lr}
 800eae6:	4802      	ldr	r0, [pc, #8]	@ (800eaf0 <__malloc_unlock+0xc>)
 800eae8:	f7ff f866 	bl	800dbb8 <__retarget_lock_release_recursive>
 800eaec:	bd10      	pop	{r4, pc}
 800eaee:	46c0      	nop			@ (mov r8, r8)
 800eaf0:	20001cdc 	.word	0x20001cdc

0800eaf4 <_Balloc>:
 800eaf4:	b570      	push	{r4, r5, r6, lr}
 800eaf6:	69c5      	ldr	r5, [r0, #28]
 800eaf8:	0006      	movs	r6, r0
 800eafa:	000c      	movs	r4, r1
 800eafc:	2d00      	cmp	r5, #0
 800eafe:	d10e      	bne.n	800eb1e <_Balloc+0x2a>
 800eb00:	2010      	movs	r0, #16
 800eb02:	f7ff ff3b 	bl	800e97c <malloc>
 800eb06:	1e02      	subs	r2, r0, #0
 800eb08:	61f0      	str	r0, [r6, #28]
 800eb0a:	d104      	bne.n	800eb16 <_Balloc+0x22>
 800eb0c:	216b      	movs	r1, #107	@ 0x6b
 800eb0e:	4b19      	ldr	r3, [pc, #100]	@ (800eb74 <_Balloc+0x80>)
 800eb10:	4819      	ldr	r0, [pc, #100]	@ (800eb78 <_Balloc+0x84>)
 800eb12:	f000 fdc7 	bl	800f6a4 <__assert_func>
 800eb16:	6045      	str	r5, [r0, #4]
 800eb18:	6085      	str	r5, [r0, #8]
 800eb1a:	6005      	str	r5, [r0, #0]
 800eb1c:	60c5      	str	r5, [r0, #12]
 800eb1e:	69f5      	ldr	r5, [r6, #28]
 800eb20:	68eb      	ldr	r3, [r5, #12]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d013      	beq.n	800eb4e <_Balloc+0x5a>
 800eb26:	69f3      	ldr	r3, [r6, #28]
 800eb28:	00a2      	lsls	r2, r4, #2
 800eb2a:	68db      	ldr	r3, [r3, #12]
 800eb2c:	189b      	adds	r3, r3, r2
 800eb2e:	6818      	ldr	r0, [r3, #0]
 800eb30:	2800      	cmp	r0, #0
 800eb32:	d118      	bne.n	800eb66 <_Balloc+0x72>
 800eb34:	2101      	movs	r1, #1
 800eb36:	000d      	movs	r5, r1
 800eb38:	40a5      	lsls	r5, r4
 800eb3a:	1d6a      	adds	r2, r5, #5
 800eb3c:	0030      	movs	r0, r6
 800eb3e:	0092      	lsls	r2, r2, #2
 800eb40:	f000 fdce 	bl	800f6e0 <_calloc_r>
 800eb44:	2800      	cmp	r0, #0
 800eb46:	d00c      	beq.n	800eb62 <_Balloc+0x6e>
 800eb48:	6044      	str	r4, [r0, #4]
 800eb4a:	6085      	str	r5, [r0, #8]
 800eb4c:	e00d      	b.n	800eb6a <_Balloc+0x76>
 800eb4e:	2221      	movs	r2, #33	@ 0x21
 800eb50:	2104      	movs	r1, #4
 800eb52:	0030      	movs	r0, r6
 800eb54:	f000 fdc4 	bl	800f6e0 <_calloc_r>
 800eb58:	69f3      	ldr	r3, [r6, #28]
 800eb5a:	60e8      	str	r0, [r5, #12]
 800eb5c:	68db      	ldr	r3, [r3, #12]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d1e1      	bne.n	800eb26 <_Balloc+0x32>
 800eb62:	2000      	movs	r0, #0
 800eb64:	bd70      	pop	{r4, r5, r6, pc}
 800eb66:	6802      	ldr	r2, [r0, #0]
 800eb68:	601a      	str	r2, [r3, #0]
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	6103      	str	r3, [r0, #16]
 800eb6e:	60c3      	str	r3, [r0, #12]
 800eb70:	e7f8      	b.n	800eb64 <_Balloc+0x70>
 800eb72:	46c0      	nop			@ (mov r8, r8)
 800eb74:	080100a5 	.word	0x080100a5
 800eb78:	08010125 	.word	0x08010125

0800eb7c <_Bfree>:
 800eb7c:	b570      	push	{r4, r5, r6, lr}
 800eb7e:	69c6      	ldr	r6, [r0, #28]
 800eb80:	0005      	movs	r5, r0
 800eb82:	000c      	movs	r4, r1
 800eb84:	2e00      	cmp	r6, #0
 800eb86:	d10e      	bne.n	800eba6 <_Bfree+0x2a>
 800eb88:	2010      	movs	r0, #16
 800eb8a:	f7ff fef7 	bl	800e97c <malloc>
 800eb8e:	1e02      	subs	r2, r0, #0
 800eb90:	61e8      	str	r0, [r5, #28]
 800eb92:	d104      	bne.n	800eb9e <_Bfree+0x22>
 800eb94:	218f      	movs	r1, #143	@ 0x8f
 800eb96:	4b09      	ldr	r3, [pc, #36]	@ (800ebbc <_Bfree+0x40>)
 800eb98:	4809      	ldr	r0, [pc, #36]	@ (800ebc0 <_Bfree+0x44>)
 800eb9a:	f000 fd83 	bl	800f6a4 <__assert_func>
 800eb9e:	6046      	str	r6, [r0, #4]
 800eba0:	6086      	str	r6, [r0, #8]
 800eba2:	6006      	str	r6, [r0, #0]
 800eba4:	60c6      	str	r6, [r0, #12]
 800eba6:	2c00      	cmp	r4, #0
 800eba8:	d007      	beq.n	800ebba <_Bfree+0x3e>
 800ebaa:	69eb      	ldr	r3, [r5, #28]
 800ebac:	6862      	ldr	r2, [r4, #4]
 800ebae:	68db      	ldr	r3, [r3, #12]
 800ebb0:	0092      	lsls	r2, r2, #2
 800ebb2:	189b      	adds	r3, r3, r2
 800ebb4:	681a      	ldr	r2, [r3, #0]
 800ebb6:	6022      	str	r2, [r4, #0]
 800ebb8:	601c      	str	r4, [r3, #0]
 800ebba:	bd70      	pop	{r4, r5, r6, pc}
 800ebbc:	080100a5 	.word	0x080100a5
 800ebc0:	08010125 	.word	0x08010125

0800ebc4 <__multadd>:
 800ebc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ebc6:	000f      	movs	r7, r1
 800ebc8:	9001      	str	r0, [sp, #4]
 800ebca:	000c      	movs	r4, r1
 800ebcc:	001e      	movs	r6, r3
 800ebce:	2000      	movs	r0, #0
 800ebd0:	690d      	ldr	r5, [r1, #16]
 800ebd2:	3714      	adds	r7, #20
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	3001      	adds	r0, #1
 800ebd8:	b299      	uxth	r1, r3
 800ebda:	4351      	muls	r1, r2
 800ebdc:	0c1b      	lsrs	r3, r3, #16
 800ebde:	4353      	muls	r3, r2
 800ebe0:	1989      	adds	r1, r1, r6
 800ebe2:	0c0e      	lsrs	r6, r1, #16
 800ebe4:	199b      	adds	r3, r3, r6
 800ebe6:	0c1e      	lsrs	r6, r3, #16
 800ebe8:	b289      	uxth	r1, r1
 800ebea:	041b      	lsls	r3, r3, #16
 800ebec:	185b      	adds	r3, r3, r1
 800ebee:	c708      	stmia	r7!, {r3}
 800ebf0:	4285      	cmp	r5, r0
 800ebf2:	dcef      	bgt.n	800ebd4 <__multadd+0x10>
 800ebf4:	2e00      	cmp	r6, #0
 800ebf6:	d022      	beq.n	800ec3e <__multadd+0x7a>
 800ebf8:	68a3      	ldr	r3, [r4, #8]
 800ebfa:	42ab      	cmp	r3, r5
 800ebfc:	dc19      	bgt.n	800ec32 <__multadd+0x6e>
 800ebfe:	6861      	ldr	r1, [r4, #4]
 800ec00:	9801      	ldr	r0, [sp, #4]
 800ec02:	3101      	adds	r1, #1
 800ec04:	f7ff ff76 	bl	800eaf4 <_Balloc>
 800ec08:	1e07      	subs	r7, r0, #0
 800ec0a:	d105      	bne.n	800ec18 <__multadd+0x54>
 800ec0c:	003a      	movs	r2, r7
 800ec0e:	21ba      	movs	r1, #186	@ 0xba
 800ec10:	4b0c      	ldr	r3, [pc, #48]	@ (800ec44 <__multadd+0x80>)
 800ec12:	480d      	ldr	r0, [pc, #52]	@ (800ec48 <__multadd+0x84>)
 800ec14:	f000 fd46 	bl	800f6a4 <__assert_func>
 800ec18:	0021      	movs	r1, r4
 800ec1a:	6922      	ldr	r2, [r4, #16]
 800ec1c:	310c      	adds	r1, #12
 800ec1e:	3202      	adds	r2, #2
 800ec20:	0092      	lsls	r2, r2, #2
 800ec22:	300c      	adds	r0, #12
 800ec24:	f7fe ffd4 	bl	800dbd0 <memcpy>
 800ec28:	0021      	movs	r1, r4
 800ec2a:	9801      	ldr	r0, [sp, #4]
 800ec2c:	f7ff ffa6 	bl	800eb7c <_Bfree>
 800ec30:	003c      	movs	r4, r7
 800ec32:	1d2b      	adds	r3, r5, #4
 800ec34:	009b      	lsls	r3, r3, #2
 800ec36:	18e3      	adds	r3, r4, r3
 800ec38:	3501      	adds	r5, #1
 800ec3a:	605e      	str	r6, [r3, #4]
 800ec3c:	6125      	str	r5, [r4, #16]
 800ec3e:	0020      	movs	r0, r4
 800ec40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ec42:	46c0      	nop			@ (mov r8, r8)
 800ec44:	08010114 	.word	0x08010114
 800ec48:	08010125 	.word	0x08010125

0800ec4c <__hi0bits>:
 800ec4c:	2280      	movs	r2, #128	@ 0x80
 800ec4e:	0003      	movs	r3, r0
 800ec50:	0252      	lsls	r2, r2, #9
 800ec52:	2000      	movs	r0, #0
 800ec54:	4293      	cmp	r3, r2
 800ec56:	d201      	bcs.n	800ec5c <__hi0bits+0x10>
 800ec58:	041b      	lsls	r3, r3, #16
 800ec5a:	3010      	adds	r0, #16
 800ec5c:	2280      	movs	r2, #128	@ 0x80
 800ec5e:	0452      	lsls	r2, r2, #17
 800ec60:	4293      	cmp	r3, r2
 800ec62:	d201      	bcs.n	800ec68 <__hi0bits+0x1c>
 800ec64:	3008      	adds	r0, #8
 800ec66:	021b      	lsls	r3, r3, #8
 800ec68:	2280      	movs	r2, #128	@ 0x80
 800ec6a:	0552      	lsls	r2, r2, #21
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d201      	bcs.n	800ec74 <__hi0bits+0x28>
 800ec70:	3004      	adds	r0, #4
 800ec72:	011b      	lsls	r3, r3, #4
 800ec74:	2280      	movs	r2, #128	@ 0x80
 800ec76:	05d2      	lsls	r2, r2, #23
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d201      	bcs.n	800ec80 <__hi0bits+0x34>
 800ec7c:	3002      	adds	r0, #2
 800ec7e:	009b      	lsls	r3, r3, #2
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	db03      	blt.n	800ec8c <__hi0bits+0x40>
 800ec84:	3001      	adds	r0, #1
 800ec86:	4213      	tst	r3, r2
 800ec88:	d100      	bne.n	800ec8c <__hi0bits+0x40>
 800ec8a:	2020      	movs	r0, #32
 800ec8c:	4770      	bx	lr

0800ec8e <__lo0bits>:
 800ec8e:	6803      	ldr	r3, [r0, #0]
 800ec90:	0001      	movs	r1, r0
 800ec92:	2207      	movs	r2, #7
 800ec94:	0018      	movs	r0, r3
 800ec96:	4010      	ands	r0, r2
 800ec98:	4213      	tst	r3, r2
 800ec9a:	d00d      	beq.n	800ecb8 <__lo0bits+0x2a>
 800ec9c:	3a06      	subs	r2, #6
 800ec9e:	2000      	movs	r0, #0
 800eca0:	4213      	tst	r3, r2
 800eca2:	d105      	bne.n	800ecb0 <__lo0bits+0x22>
 800eca4:	3002      	adds	r0, #2
 800eca6:	4203      	tst	r3, r0
 800eca8:	d003      	beq.n	800ecb2 <__lo0bits+0x24>
 800ecaa:	40d3      	lsrs	r3, r2
 800ecac:	0010      	movs	r0, r2
 800ecae:	600b      	str	r3, [r1, #0]
 800ecb0:	4770      	bx	lr
 800ecb2:	089b      	lsrs	r3, r3, #2
 800ecb4:	600b      	str	r3, [r1, #0]
 800ecb6:	e7fb      	b.n	800ecb0 <__lo0bits+0x22>
 800ecb8:	b29a      	uxth	r2, r3
 800ecba:	2a00      	cmp	r2, #0
 800ecbc:	d101      	bne.n	800ecc2 <__lo0bits+0x34>
 800ecbe:	2010      	movs	r0, #16
 800ecc0:	0c1b      	lsrs	r3, r3, #16
 800ecc2:	b2da      	uxtb	r2, r3
 800ecc4:	2a00      	cmp	r2, #0
 800ecc6:	d101      	bne.n	800eccc <__lo0bits+0x3e>
 800ecc8:	3008      	adds	r0, #8
 800ecca:	0a1b      	lsrs	r3, r3, #8
 800eccc:	071a      	lsls	r2, r3, #28
 800ecce:	d101      	bne.n	800ecd4 <__lo0bits+0x46>
 800ecd0:	3004      	adds	r0, #4
 800ecd2:	091b      	lsrs	r3, r3, #4
 800ecd4:	079a      	lsls	r2, r3, #30
 800ecd6:	d101      	bne.n	800ecdc <__lo0bits+0x4e>
 800ecd8:	3002      	adds	r0, #2
 800ecda:	089b      	lsrs	r3, r3, #2
 800ecdc:	07da      	lsls	r2, r3, #31
 800ecde:	d4e9      	bmi.n	800ecb4 <__lo0bits+0x26>
 800ece0:	3001      	adds	r0, #1
 800ece2:	085b      	lsrs	r3, r3, #1
 800ece4:	d1e6      	bne.n	800ecb4 <__lo0bits+0x26>
 800ece6:	2020      	movs	r0, #32
 800ece8:	e7e2      	b.n	800ecb0 <__lo0bits+0x22>
	...

0800ecec <__i2b>:
 800ecec:	b510      	push	{r4, lr}
 800ecee:	000c      	movs	r4, r1
 800ecf0:	2101      	movs	r1, #1
 800ecf2:	f7ff feff 	bl	800eaf4 <_Balloc>
 800ecf6:	2800      	cmp	r0, #0
 800ecf8:	d107      	bne.n	800ed0a <__i2b+0x1e>
 800ecfa:	2146      	movs	r1, #70	@ 0x46
 800ecfc:	4c05      	ldr	r4, [pc, #20]	@ (800ed14 <__i2b+0x28>)
 800ecfe:	0002      	movs	r2, r0
 800ed00:	4b05      	ldr	r3, [pc, #20]	@ (800ed18 <__i2b+0x2c>)
 800ed02:	0020      	movs	r0, r4
 800ed04:	31ff      	adds	r1, #255	@ 0xff
 800ed06:	f000 fccd 	bl	800f6a4 <__assert_func>
 800ed0a:	2301      	movs	r3, #1
 800ed0c:	6144      	str	r4, [r0, #20]
 800ed0e:	6103      	str	r3, [r0, #16]
 800ed10:	bd10      	pop	{r4, pc}
 800ed12:	46c0      	nop			@ (mov r8, r8)
 800ed14:	08010125 	.word	0x08010125
 800ed18:	08010114 	.word	0x08010114

0800ed1c <__multiply>:
 800ed1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed1e:	0014      	movs	r4, r2
 800ed20:	690a      	ldr	r2, [r1, #16]
 800ed22:	6923      	ldr	r3, [r4, #16]
 800ed24:	000d      	movs	r5, r1
 800ed26:	b08b      	sub	sp, #44	@ 0x2c
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	db02      	blt.n	800ed32 <__multiply+0x16>
 800ed2c:	0023      	movs	r3, r4
 800ed2e:	000c      	movs	r4, r1
 800ed30:	001d      	movs	r5, r3
 800ed32:	6927      	ldr	r7, [r4, #16]
 800ed34:	692e      	ldr	r6, [r5, #16]
 800ed36:	6861      	ldr	r1, [r4, #4]
 800ed38:	19bb      	adds	r3, r7, r6
 800ed3a:	9303      	str	r3, [sp, #12]
 800ed3c:	68a3      	ldr	r3, [r4, #8]
 800ed3e:	19ba      	adds	r2, r7, r6
 800ed40:	4293      	cmp	r3, r2
 800ed42:	da00      	bge.n	800ed46 <__multiply+0x2a>
 800ed44:	3101      	adds	r1, #1
 800ed46:	f7ff fed5 	bl	800eaf4 <_Balloc>
 800ed4a:	9002      	str	r0, [sp, #8]
 800ed4c:	2800      	cmp	r0, #0
 800ed4e:	d106      	bne.n	800ed5e <__multiply+0x42>
 800ed50:	21b1      	movs	r1, #177	@ 0xb1
 800ed52:	4b49      	ldr	r3, [pc, #292]	@ (800ee78 <__multiply+0x15c>)
 800ed54:	4849      	ldr	r0, [pc, #292]	@ (800ee7c <__multiply+0x160>)
 800ed56:	9a02      	ldr	r2, [sp, #8]
 800ed58:	0049      	lsls	r1, r1, #1
 800ed5a:	f000 fca3 	bl	800f6a4 <__assert_func>
 800ed5e:	9b02      	ldr	r3, [sp, #8]
 800ed60:	2200      	movs	r2, #0
 800ed62:	3314      	adds	r3, #20
 800ed64:	469c      	mov	ip, r3
 800ed66:	19bb      	adds	r3, r7, r6
 800ed68:	009b      	lsls	r3, r3, #2
 800ed6a:	4463      	add	r3, ip
 800ed6c:	9304      	str	r3, [sp, #16]
 800ed6e:	4663      	mov	r3, ip
 800ed70:	9904      	ldr	r1, [sp, #16]
 800ed72:	428b      	cmp	r3, r1
 800ed74:	d32a      	bcc.n	800edcc <__multiply+0xb0>
 800ed76:	0023      	movs	r3, r4
 800ed78:	00bf      	lsls	r7, r7, #2
 800ed7a:	3314      	adds	r3, #20
 800ed7c:	3514      	adds	r5, #20
 800ed7e:	9308      	str	r3, [sp, #32]
 800ed80:	00b6      	lsls	r6, r6, #2
 800ed82:	19db      	adds	r3, r3, r7
 800ed84:	9305      	str	r3, [sp, #20]
 800ed86:	19ab      	adds	r3, r5, r6
 800ed88:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed8a:	2304      	movs	r3, #4
 800ed8c:	9306      	str	r3, [sp, #24]
 800ed8e:	0023      	movs	r3, r4
 800ed90:	9a05      	ldr	r2, [sp, #20]
 800ed92:	3315      	adds	r3, #21
 800ed94:	9501      	str	r5, [sp, #4]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d305      	bcc.n	800eda6 <__multiply+0x8a>
 800ed9a:	1b13      	subs	r3, r2, r4
 800ed9c:	3b15      	subs	r3, #21
 800ed9e:	089b      	lsrs	r3, r3, #2
 800eda0:	3301      	adds	r3, #1
 800eda2:	009b      	lsls	r3, r3, #2
 800eda4:	9306      	str	r3, [sp, #24]
 800eda6:	9b01      	ldr	r3, [sp, #4]
 800eda8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800edaa:	4293      	cmp	r3, r2
 800edac:	d310      	bcc.n	800edd0 <__multiply+0xb4>
 800edae:	9b03      	ldr	r3, [sp, #12]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	dd05      	ble.n	800edc0 <__multiply+0xa4>
 800edb4:	9b04      	ldr	r3, [sp, #16]
 800edb6:	3b04      	subs	r3, #4
 800edb8:	9304      	str	r3, [sp, #16]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d056      	beq.n	800ee6e <__multiply+0x152>
 800edc0:	9b02      	ldr	r3, [sp, #8]
 800edc2:	9a03      	ldr	r2, [sp, #12]
 800edc4:	0018      	movs	r0, r3
 800edc6:	611a      	str	r2, [r3, #16]
 800edc8:	b00b      	add	sp, #44	@ 0x2c
 800edca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edcc:	c304      	stmia	r3!, {r2}
 800edce:	e7cf      	b.n	800ed70 <__multiply+0x54>
 800edd0:	9b01      	ldr	r3, [sp, #4]
 800edd2:	6818      	ldr	r0, [r3, #0]
 800edd4:	b280      	uxth	r0, r0
 800edd6:	2800      	cmp	r0, #0
 800edd8:	d01e      	beq.n	800ee18 <__multiply+0xfc>
 800edda:	4667      	mov	r7, ip
 800eddc:	2500      	movs	r5, #0
 800edde:	9e08      	ldr	r6, [sp, #32]
 800ede0:	ce02      	ldmia	r6!, {r1}
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	9307      	str	r3, [sp, #28]
 800ede6:	b28b      	uxth	r3, r1
 800ede8:	4343      	muls	r3, r0
 800edea:	001a      	movs	r2, r3
 800edec:	466b      	mov	r3, sp
 800edee:	0c09      	lsrs	r1, r1, #16
 800edf0:	8b9b      	ldrh	r3, [r3, #28]
 800edf2:	4341      	muls	r1, r0
 800edf4:	18d3      	adds	r3, r2, r3
 800edf6:	9a07      	ldr	r2, [sp, #28]
 800edf8:	195b      	adds	r3, r3, r5
 800edfa:	0c12      	lsrs	r2, r2, #16
 800edfc:	1889      	adds	r1, r1, r2
 800edfe:	0c1a      	lsrs	r2, r3, #16
 800ee00:	188a      	adds	r2, r1, r2
 800ee02:	b29b      	uxth	r3, r3
 800ee04:	0c15      	lsrs	r5, r2, #16
 800ee06:	0412      	lsls	r2, r2, #16
 800ee08:	431a      	orrs	r2, r3
 800ee0a:	9b05      	ldr	r3, [sp, #20]
 800ee0c:	c704      	stmia	r7!, {r2}
 800ee0e:	42b3      	cmp	r3, r6
 800ee10:	d8e6      	bhi.n	800ede0 <__multiply+0xc4>
 800ee12:	4663      	mov	r3, ip
 800ee14:	9a06      	ldr	r2, [sp, #24]
 800ee16:	509d      	str	r5, [r3, r2]
 800ee18:	9b01      	ldr	r3, [sp, #4]
 800ee1a:	6818      	ldr	r0, [r3, #0]
 800ee1c:	0c00      	lsrs	r0, r0, #16
 800ee1e:	d020      	beq.n	800ee62 <__multiply+0x146>
 800ee20:	4663      	mov	r3, ip
 800ee22:	0025      	movs	r5, r4
 800ee24:	4661      	mov	r1, ip
 800ee26:	2700      	movs	r7, #0
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	3514      	adds	r5, #20
 800ee2c:	682a      	ldr	r2, [r5, #0]
 800ee2e:	680e      	ldr	r6, [r1, #0]
 800ee30:	b292      	uxth	r2, r2
 800ee32:	4342      	muls	r2, r0
 800ee34:	0c36      	lsrs	r6, r6, #16
 800ee36:	1992      	adds	r2, r2, r6
 800ee38:	19d2      	adds	r2, r2, r7
 800ee3a:	0416      	lsls	r6, r2, #16
 800ee3c:	b29b      	uxth	r3, r3
 800ee3e:	431e      	orrs	r6, r3
 800ee40:	600e      	str	r6, [r1, #0]
 800ee42:	cd40      	ldmia	r5!, {r6}
 800ee44:	684b      	ldr	r3, [r1, #4]
 800ee46:	0c36      	lsrs	r6, r6, #16
 800ee48:	4346      	muls	r6, r0
 800ee4a:	b29b      	uxth	r3, r3
 800ee4c:	0c12      	lsrs	r2, r2, #16
 800ee4e:	18f3      	adds	r3, r6, r3
 800ee50:	189b      	adds	r3, r3, r2
 800ee52:	9a05      	ldr	r2, [sp, #20]
 800ee54:	0c1f      	lsrs	r7, r3, #16
 800ee56:	3104      	adds	r1, #4
 800ee58:	42aa      	cmp	r2, r5
 800ee5a:	d8e7      	bhi.n	800ee2c <__multiply+0x110>
 800ee5c:	4662      	mov	r2, ip
 800ee5e:	9906      	ldr	r1, [sp, #24]
 800ee60:	5053      	str	r3, [r2, r1]
 800ee62:	9b01      	ldr	r3, [sp, #4]
 800ee64:	3304      	adds	r3, #4
 800ee66:	9301      	str	r3, [sp, #4]
 800ee68:	2304      	movs	r3, #4
 800ee6a:	449c      	add	ip, r3
 800ee6c:	e79b      	b.n	800eda6 <__multiply+0x8a>
 800ee6e:	9b03      	ldr	r3, [sp, #12]
 800ee70:	3b01      	subs	r3, #1
 800ee72:	9303      	str	r3, [sp, #12]
 800ee74:	e79b      	b.n	800edae <__multiply+0x92>
 800ee76:	46c0      	nop			@ (mov r8, r8)
 800ee78:	08010114 	.word	0x08010114
 800ee7c:	08010125 	.word	0x08010125

0800ee80 <__pow5mult>:
 800ee80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee82:	2303      	movs	r3, #3
 800ee84:	0015      	movs	r5, r2
 800ee86:	0007      	movs	r7, r0
 800ee88:	000e      	movs	r6, r1
 800ee8a:	401a      	ands	r2, r3
 800ee8c:	421d      	tst	r5, r3
 800ee8e:	d008      	beq.n	800eea2 <__pow5mult+0x22>
 800ee90:	4925      	ldr	r1, [pc, #148]	@ (800ef28 <__pow5mult+0xa8>)
 800ee92:	3a01      	subs	r2, #1
 800ee94:	0092      	lsls	r2, r2, #2
 800ee96:	5852      	ldr	r2, [r2, r1]
 800ee98:	2300      	movs	r3, #0
 800ee9a:	0031      	movs	r1, r6
 800ee9c:	f7ff fe92 	bl	800ebc4 <__multadd>
 800eea0:	0006      	movs	r6, r0
 800eea2:	10ad      	asrs	r5, r5, #2
 800eea4:	d03d      	beq.n	800ef22 <__pow5mult+0xa2>
 800eea6:	69fc      	ldr	r4, [r7, #28]
 800eea8:	2c00      	cmp	r4, #0
 800eeaa:	d10f      	bne.n	800eecc <__pow5mult+0x4c>
 800eeac:	2010      	movs	r0, #16
 800eeae:	f7ff fd65 	bl	800e97c <malloc>
 800eeb2:	1e02      	subs	r2, r0, #0
 800eeb4:	61f8      	str	r0, [r7, #28]
 800eeb6:	d105      	bne.n	800eec4 <__pow5mult+0x44>
 800eeb8:	21b4      	movs	r1, #180	@ 0xb4
 800eeba:	4b1c      	ldr	r3, [pc, #112]	@ (800ef2c <__pow5mult+0xac>)
 800eebc:	481c      	ldr	r0, [pc, #112]	@ (800ef30 <__pow5mult+0xb0>)
 800eebe:	31ff      	adds	r1, #255	@ 0xff
 800eec0:	f000 fbf0 	bl	800f6a4 <__assert_func>
 800eec4:	6044      	str	r4, [r0, #4]
 800eec6:	6084      	str	r4, [r0, #8]
 800eec8:	6004      	str	r4, [r0, #0]
 800eeca:	60c4      	str	r4, [r0, #12]
 800eecc:	69fb      	ldr	r3, [r7, #28]
 800eece:	689c      	ldr	r4, [r3, #8]
 800eed0:	9301      	str	r3, [sp, #4]
 800eed2:	2c00      	cmp	r4, #0
 800eed4:	d108      	bne.n	800eee8 <__pow5mult+0x68>
 800eed6:	0038      	movs	r0, r7
 800eed8:	4916      	ldr	r1, [pc, #88]	@ (800ef34 <__pow5mult+0xb4>)
 800eeda:	f7ff ff07 	bl	800ecec <__i2b>
 800eede:	9b01      	ldr	r3, [sp, #4]
 800eee0:	0004      	movs	r4, r0
 800eee2:	6098      	str	r0, [r3, #8]
 800eee4:	2300      	movs	r3, #0
 800eee6:	6003      	str	r3, [r0, #0]
 800eee8:	2301      	movs	r3, #1
 800eeea:	421d      	tst	r5, r3
 800eeec:	d00a      	beq.n	800ef04 <__pow5mult+0x84>
 800eeee:	0031      	movs	r1, r6
 800eef0:	0022      	movs	r2, r4
 800eef2:	0038      	movs	r0, r7
 800eef4:	f7ff ff12 	bl	800ed1c <__multiply>
 800eef8:	0031      	movs	r1, r6
 800eefa:	9001      	str	r0, [sp, #4]
 800eefc:	0038      	movs	r0, r7
 800eefe:	f7ff fe3d 	bl	800eb7c <_Bfree>
 800ef02:	9e01      	ldr	r6, [sp, #4]
 800ef04:	106d      	asrs	r5, r5, #1
 800ef06:	d00c      	beq.n	800ef22 <__pow5mult+0xa2>
 800ef08:	6820      	ldr	r0, [r4, #0]
 800ef0a:	2800      	cmp	r0, #0
 800ef0c:	d107      	bne.n	800ef1e <__pow5mult+0x9e>
 800ef0e:	0022      	movs	r2, r4
 800ef10:	0021      	movs	r1, r4
 800ef12:	0038      	movs	r0, r7
 800ef14:	f7ff ff02 	bl	800ed1c <__multiply>
 800ef18:	2300      	movs	r3, #0
 800ef1a:	6020      	str	r0, [r4, #0]
 800ef1c:	6003      	str	r3, [r0, #0]
 800ef1e:	0004      	movs	r4, r0
 800ef20:	e7e2      	b.n	800eee8 <__pow5mult+0x68>
 800ef22:	0030      	movs	r0, r6
 800ef24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ef26:	46c0      	nop			@ (mov r8, r8)
 800ef28:	08010180 	.word	0x08010180
 800ef2c:	080100a5 	.word	0x080100a5
 800ef30:	08010125 	.word	0x08010125
 800ef34:	00000271 	.word	0x00000271

0800ef38 <__lshift>:
 800ef38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef3a:	000c      	movs	r4, r1
 800ef3c:	0016      	movs	r6, r2
 800ef3e:	6923      	ldr	r3, [r4, #16]
 800ef40:	1157      	asrs	r7, r2, #5
 800ef42:	b085      	sub	sp, #20
 800ef44:	18fb      	adds	r3, r7, r3
 800ef46:	9301      	str	r3, [sp, #4]
 800ef48:	3301      	adds	r3, #1
 800ef4a:	9300      	str	r3, [sp, #0]
 800ef4c:	6849      	ldr	r1, [r1, #4]
 800ef4e:	68a3      	ldr	r3, [r4, #8]
 800ef50:	9002      	str	r0, [sp, #8]
 800ef52:	9a00      	ldr	r2, [sp, #0]
 800ef54:	4293      	cmp	r3, r2
 800ef56:	db10      	blt.n	800ef7a <__lshift+0x42>
 800ef58:	9802      	ldr	r0, [sp, #8]
 800ef5a:	f7ff fdcb 	bl	800eaf4 <_Balloc>
 800ef5e:	2300      	movs	r3, #0
 800ef60:	0001      	movs	r1, r0
 800ef62:	0005      	movs	r5, r0
 800ef64:	001a      	movs	r2, r3
 800ef66:	3114      	adds	r1, #20
 800ef68:	4298      	cmp	r0, r3
 800ef6a:	d10c      	bne.n	800ef86 <__lshift+0x4e>
 800ef6c:	21ef      	movs	r1, #239	@ 0xef
 800ef6e:	002a      	movs	r2, r5
 800ef70:	4b25      	ldr	r3, [pc, #148]	@ (800f008 <__lshift+0xd0>)
 800ef72:	4826      	ldr	r0, [pc, #152]	@ (800f00c <__lshift+0xd4>)
 800ef74:	0049      	lsls	r1, r1, #1
 800ef76:	f000 fb95 	bl	800f6a4 <__assert_func>
 800ef7a:	3101      	adds	r1, #1
 800ef7c:	005b      	lsls	r3, r3, #1
 800ef7e:	e7e8      	b.n	800ef52 <__lshift+0x1a>
 800ef80:	0098      	lsls	r0, r3, #2
 800ef82:	500a      	str	r2, [r1, r0]
 800ef84:	3301      	adds	r3, #1
 800ef86:	42bb      	cmp	r3, r7
 800ef88:	dbfa      	blt.n	800ef80 <__lshift+0x48>
 800ef8a:	43fb      	mvns	r3, r7
 800ef8c:	17db      	asrs	r3, r3, #31
 800ef8e:	401f      	ands	r7, r3
 800ef90:	00bf      	lsls	r7, r7, #2
 800ef92:	0023      	movs	r3, r4
 800ef94:	201f      	movs	r0, #31
 800ef96:	19c9      	adds	r1, r1, r7
 800ef98:	0037      	movs	r7, r6
 800ef9a:	6922      	ldr	r2, [r4, #16]
 800ef9c:	3314      	adds	r3, #20
 800ef9e:	0092      	lsls	r2, r2, #2
 800efa0:	189a      	adds	r2, r3, r2
 800efa2:	4007      	ands	r7, r0
 800efa4:	4206      	tst	r6, r0
 800efa6:	d029      	beq.n	800effc <__lshift+0xc4>
 800efa8:	3001      	adds	r0, #1
 800efaa:	1bc0      	subs	r0, r0, r7
 800efac:	9003      	str	r0, [sp, #12]
 800efae:	468c      	mov	ip, r1
 800efb0:	2000      	movs	r0, #0
 800efb2:	681e      	ldr	r6, [r3, #0]
 800efb4:	40be      	lsls	r6, r7
 800efb6:	4306      	orrs	r6, r0
 800efb8:	4660      	mov	r0, ip
 800efba:	c040      	stmia	r0!, {r6}
 800efbc:	4684      	mov	ip, r0
 800efbe:	9e03      	ldr	r6, [sp, #12]
 800efc0:	cb01      	ldmia	r3!, {r0}
 800efc2:	40f0      	lsrs	r0, r6
 800efc4:	429a      	cmp	r2, r3
 800efc6:	d8f4      	bhi.n	800efb2 <__lshift+0x7a>
 800efc8:	0026      	movs	r6, r4
 800efca:	3615      	adds	r6, #21
 800efcc:	2304      	movs	r3, #4
 800efce:	42b2      	cmp	r2, r6
 800efd0:	d304      	bcc.n	800efdc <__lshift+0xa4>
 800efd2:	1b13      	subs	r3, r2, r4
 800efd4:	3b15      	subs	r3, #21
 800efd6:	089b      	lsrs	r3, r3, #2
 800efd8:	3301      	adds	r3, #1
 800efda:	009b      	lsls	r3, r3, #2
 800efdc:	50c8      	str	r0, [r1, r3]
 800efde:	2800      	cmp	r0, #0
 800efe0:	d002      	beq.n	800efe8 <__lshift+0xb0>
 800efe2:	9b01      	ldr	r3, [sp, #4]
 800efe4:	3302      	adds	r3, #2
 800efe6:	9300      	str	r3, [sp, #0]
 800efe8:	9b00      	ldr	r3, [sp, #0]
 800efea:	9802      	ldr	r0, [sp, #8]
 800efec:	3b01      	subs	r3, #1
 800efee:	0021      	movs	r1, r4
 800eff0:	612b      	str	r3, [r5, #16]
 800eff2:	f7ff fdc3 	bl	800eb7c <_Bfree>
 800eff6:	0028      	movs	r0, r5
 800eff8:	b005      	add	sp, #20
 800effa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800effc:	cb01      	ldmia	r3!, {r0}
 800effe:	c101      	stmia	r1!, {r0}
 800f000:	429a      	cmp	r2, r3
 800f002:	d8fb      	bhi.n	800effc <__lshift+0xc4>
 800f004:	e7f0      	b.n	800efe8 <__lshift+0xb0>
 800f006:	46c0      	nop			@ (mov r8, r8)
 800f008:	08010114 	.word	0x08010114
 800f00c:	08010125 	.word	0x08010125

0800f010 <__mcmp>:
 800f010:	b530      	push	{r4, r5, lr}
 800f012:	690b      	ldr	r3, [r1, #16]
 800f014:	6904      	ldr	r4, [r0, #16]
 800f016:	0002      	movs	r2, r0
 800f018:	1ae0      	subs	r0, r4, r3
 800f01a:	429c      	cmp	r4, r3
 800f01c:	d10f      	bne.n	800f03e <__mcmp+0x2e>
 800f01e:	3214      	adds	r2, #20
 800f020:	009b      	lsls	r3, r3, #2
 800f022:	3114      	adds	r1, #20
 800f024:	0014      	movs	r4, r2
 800f026:	18c9      	adds	r1, r1, r3
 800f028:	18d2      	adds	r2, r2, r3
 800f02a:	3a04      	subs	r2, #4
 800f02c:	3904      	subs	r1, #4
 800f02e:	6815      	ldr	r5, [r2, #0]
 800f030:	680b      	ldr	r3, [r1, #0]
 800f032:	429d      	cmp	r5, r3
 800f034:	d004      	beq.n	800f040 <__mcmp+0x30>
 800f036:	2001      	movs	r0, #1
 800f038:	429d      	cmp	r5, r3
 800f03a:	d200      	bcs.n	800f03e <__mcmp+0x2e>
 800f03c:	3802      	subs	r0, #2
 800f03e:	bd30      	pop	{r4, r5, pc}
 800f040:	4294      	cmp	r4, r2
 800f042:	d3f2      	bcc.n	800f02a <__mcmp+0x1a>
 800f044:	e7fb      	b.n	800f03e <__mcmp+0x2e>
	...

0800f048 <__mdiff>:
 800f048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f04a:	000c      	movs	r4, r1
 800f04c:	b087      	sub	sp, #28
 800f04e:	9000      	str	r0, [sp, #0]
 800f050:	0011      	movs	r1, r2
 800f052:	0020      	movs	r0, r4
 800f054:	0017      	movs	r7, r2
 800f056:	f7ff ffdb 	bl	800f010 <__mcmp>
 800f05a:	1e05      	subs	r5, r0, #0
 800f05c:	d110      	bne.n	800f080 <__mdiff+0x38>
 800f05e:	0001      	movs	r1, r0
 800f060:	9800      	ldr	r0, [sp, #0]
 800f062:	f7ff fd47 	bl	800eaf4 <_Balloc>
 800f066:	1e02      	subs	r2, r0, #0
 800f068:	d104      	bne.n	800f074 <__mdiff+0x2c>
 800f06a:	4b40      	ldr	r3, [pc, #256]	@ (800f16c <__mdiff+0x124>)
 800f06c:	4840      	ldr	r0, [pc, #256]	@ (800f170 <__mdiff+0x128>)
 800f06e:	4941      	ldr	r1, [pc, #260]	@ (800f174 <__mdiff+0x12c>)
 800f070:	f000 fb18 	bl	800f6a4 <__assert_func>
 800f074:	2301      	movs	r3, #1
 800f076:	6145      	str	r5, [r0, #20]
 800f078:	6103      	str	r3, [r0, #16]
 800f07a:	0010      	movs	r0, r2
 800f07c:	b007      	add	sp, #28
 800f07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f080:	2600      	movs	r6, #0
 800f082:	42b0      	cmp	r0, r6
 800f084:	da03      	bge.n	800f08e <__mdiff+0x46>
 800f086:	0023      	movs	r3, r4
 800f088:	003c      	movs	r4, r7
 800f08a:	001f      	movs	r7, r3
 800f08c:	3601      	adds	r6, #1
 800f08e:	6861      	ldr	r1, [r4, #4]
 800f090:	9800      	ldr	r0, [sp, #0]
 800f092:	f7ff fd2f 	bl	800eaf4 <_Balloc>
 800f096:	1e02      	subs	r2, r0, #0
 800f098:	d103      	bne.n	800f0a2 <__mdiff+0x5a>
 800f09a:	4b34      	ldr	r3, [pc, #208]	@ (800f16c <__mdiff+0x124>)
 800f09c:	4834      	ldr	r0, [pc, #208]	@ (800f170 <__mdiff+0x128>)
 800f09e:	4936      	ldr	r1, [pc, #216]	@ (800f178 <__mdiff+0x130>)
 800f0a0:	e7e6      	b.n	800f070 <__mdiff+0x28>
 800f0a2:	6923      	ldr	r3, [r4, #16]
 800f0a4:	3414      	adds	r4, #20
 800f0a6:	9300      	str	r3, [sp, #0]
 800f0a8:	009b      	lsls	r3, r3, #2
 800f0aa:	18e3      	adds	r3, r4, r3
 800f0ac:	0021      	movs	r1, r4
 800f0ae:	9401      	str	r4, [sp, #4]
 800f0b0:	003c      	movs	r4, r7
 800f0b2:	9302      	str	r3, [sp, #8]
 800f0b4:	693b      	ldr	r3, [r7, #16]
 800f0b6:	3414      	adds	r4, #20
 800f0b8:	009b      	lsls	r3, r3, #2
 800f0ba:	18e3      	adds	r3, r4, r3
 800f0bc:	9303      	str	r3, [sp, #12]
 800f0be:	0003      	movs	r3, r0
 800f0c0:	60c6      	str	r6, [r0, #12]
 800f0c2:	468c      	mov	ip, r1
 800f0c4:	2000      	movs	r0, #0
 800f0c6:	3314      	adds	r3, #20
 800f0c8:	9304      	str	r3, [sp, #16]
 800f0ca:	9305      	str	r3, [sp, #20]
 800f0cc:	4663      	mov	r3, ip
 800f0ce:	cb20      	ldmia	r3!, {r5}
 800f0d0:	b2a9      	uxth	r1, r5
 800f0d2:	000e      	movs	r6, r1
 800f0d4:	469c      	mov	ip, r3
 800f0d6:	cc08      	ldmia	r4!, {r3}
 800f0d8:	0c2d      	lsrs	r5, r5, #16
 800f0da:	b299      	uxth	r1, r3
 800f0dc:	1a71      	subs	r1, r6, r1
 800f0de:	1809      	adds	r1, r1, r0
 800f0e0:	0c1b      	lsrs	r3, r3, #16
 800f0e2:	1408      	asrs	r0, r1, #16
 800f0e4:	1aeb      	subs	r3, r5, r3
 800f0e6:	181b      	adds	r3, r3, r0
 800f0e8:	1418      	asrs	r0, r3, #16
 800f0ea:	b289      	uxth	r1, r1
 800f0ec:	041b      	lsls	r3, r3, #16
 800f0ee:	4319      	orrs	r1, r3
 800f0f0:	9b05      	ldr	r3, [sp, #20]
 800f0f2:	c302      	stmia	r3!, {r1}
 800f0f4:	9305      	str	r3, [sp, #20]
 800f0f6:	9b03      	ldr	r3, [sp, #12]
 800f0f8:	42a3      	cmp	r3, r4
 800f0fa:	d8e7      	bhi.n	800f0cc <__mdiff+0x84>
 800f0fc:	0039      	movs	r1, r7
 800f0fe:	9c03      	ldr	r4, [sp, #12]
 800f100:	3115      	adds	r1, #21
 800f102:	2304      	movs	r3, #4
 800f104:	428c      	cmp	r4, r1
 800f106:	d304      	bcc.n	800f112 <__mdiff+0xca>
 800f108:	1be3      	subs	r3, r4, r7
 800f10a:	3b15      	subs	r3, #21
 800f10c:	089b      	lsrs	r3, r3, #2
 800f10e:	3301      	adds	r3, #1
 800f110:	009b      	lsls	r3, r3, #2
 800f112:	9901      	ldr	r1, [sp, #4]
 800f114:	18cd      	adds	r5, r1, r3
 800f116:	9904      	ldr	r1, [sp, #16]
 800f118:	002e      	movs	r6, r5
 800f11a:	18cb      	adds	r3, r1, r3
 800f11c:	001f      	movs	r7, r3
 800f11e:	9902      	ldr	r1, [sp, #8]
 800f120:	428e      	cmp	r6, r1
 800f122:	d311      	bcc.n	800f148 <__mdiff+0x100>
 800f124:	9c02      	ldr	r4, [sp, #8]
 800f126:	1ee9      	subs	r1, r5, #3
 800f128:	2000      	movs	r0, #0
 800f12a:	428c      	cmp	r4, r1
 800f12c:	d304      	bcc.n	800f138 <__mdiff+0xf0>
 800f12e:	0021      	movs	r1, r4
 800f130:	3103      	adds	r1, #3
 800f132:	1b49      	subs	r1, r1, r5
 800f134:	0889      	lsrs	r1, r1, #2
 800f136:	0088      	lsls	r0, r1, #2
 800f138:	181b      	adds	r3, r3, r0
 800f13a:	3b04      	subs	r3, #4
 800f13c:	6819      	ldr	r1, [r3, #0]
 800f13e:	2900      	cmp	r1, #0
 800f140:	d010      	beq.n	800f164 <__mdiff+0x11c>
 800f142:	9b00      	ldr	r3, [sp, #0]
 800f144:	6113      	str	r3, [r2, #16]
 800f146:	e798      	b.n	800f07a <__mdiff+0x32>
 800f148:	4684      	mov	ip, r0
 800f14a:	ce02      	ldmia	r6!, {r1}
 800f14c:	b288      	uxth	r0, r1
 800f14e:	4460      	add	r0, ip
 800f150:	1400      	asrs	r0, r0, #16
 800f152:	0c0c      	lsrs	r4, r1, #16
 800f154:	1904      	adds	r4, r0, r4
 800f156:	4461      	add	r1, ip
 800f158:	1420      	asrs	r0, r4, #16
 800f15a:	b289      	uxth	r1, r1
 800f15c:	0424      	lsls	r4, r4, #16
 800f15e:	4321      	orrs	r1, r4
 800f160:	c702      	stmia	r7!, {r1}
 800f162:	e7dc      	b.n	800f11e <__mdiff+0xd6>
 800f164:	9900      	ldr	r1, [sp, #0]
 800f166:	3901      	subs	r1, #1
 800f168:	9100      	str	r1, [sp, #0]
 800f16a:	e7e6      	b.n	800f13a <__mdiff+0xf2>
 800f16c:	08010114 	.word	0x08010114
 800f170:	08010125 	.word	0x08010125
 800f174:	00000237 	.word	0x00000237
 800f178:	00000245 	.word	0x00000245

0800f17c <__d2b>:
 800f17c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f17e:	2101      	movs	r1, #1
 800f180:	0016      	movs	r6, r2
 800f182:	001f      	movs	r7, r3
 800f184:	f7ff fcb6 	bl	800eaf4 <_Balloc>
 800f188:	1e04      	subs	r4, r0, #0
 800f18a:	d105      	bne.n	800f198 <__d2b+0x1c>
 800f18c:	0022      	movs	r2, r4
 800f18e:	4b25      	ldr	r3, [pc, #148]	@ (800f224 <__d2b+0xa8>)
 800f190:	4825      	ldr	r0, [pc, #148]	@ (800f228 <__d2b+0xac>)
 800f192:	4926      	ldr	r1, [pc, #152]	@ (800f22c <__d2b+0xb0>)
 800f194:	f000 fa86 	bl	800f6a4 <__assert_func>
 800f198:	033b      	lsls	r3, r7, #12
 800f19a:	007d      	lsls	r5, r7, #1
 800f19c:	0b1b      	lsrs	r3, r3, #12
 800f19e:	0d6d      	lsrs	r5, r5, #21
 800f1a0:	d002      	beq.n	800f1a8 <__d2b+0x2c>
 800f1a2:	2280      	movs	r2, #128	@ 0x80
 800f1a4:	0352      	lsls	r2, r2, #13
 800f1a6:	4313      	orrs	r3, r2
 800f1a8:	9301      	str	r3, [sp, #4]
 800f1aa:	2e00      	cmp	r6, #0
 800f1ac:	d025      	beq.n	800f1fa <__d2b+0x7e>
 800f1ae:	4668      	mov	r0, sp
 800f1b0:	9600      	str	r6, [sp, #0]
 800f1b2:	f7ff fd6c 	bl	800ec8e <__lo0bits>
 800f1b6:	9b01      	ldr	r3, [sp, #4]
 800f1b8:	9900      	ldr	r1, [sp, #0]
 800f1ba:	2800      	cmp	r0, #0
 800f1bc:	d01b      	beq.n	800f1f6 <__d2b+0x7a>
 800f1be:	2220      	movs	r2, #32
 800f1c0:	001e      	movs	r6, r3
 800f1c2:	1a12      	subs	r2, r2, r0
 800f1c4:	4096      	lsls	r6, r2
 800f1c6:	0032      	movs	r2, r6
 800f1c8:	40c3      	lsrs	r3, r0
 800f1ca:	430a      	orrs	r2, r1
 800f1cc:	6162      	str	r2, [r4, #20]
 800f1ce:	9301      	str	r3, [sp, #4]
 800f1d0:	9e01      	ldr	r6, [sp, #4]
 800f1d2:	61a6      	str	r6, [r4, #24]
 800f1d4:	1e73      	subs	r3, r6, #1
 800f1d6:	419e      	sbcs	r6, r3
 800f1d8:	3601      	adds	r6, #1
 800f1da:	6126      	str	r6, [r4, #16]
 800f1dc:	2d00      	cmp	r5, #0
 800f1de:	d014      	beq.n	800f20a <__d2b+0x8e>
 800f1e0:	2635      	movs	r6, #53	@ 0x35
 800f1e2:	4b13      	ldr	r3, [pc, #76]	@ (800f230 <__d2b+0xb4>)
 800f1e4:	18ed      	adds	r5, r5, r3
 800f1e6:	9b08      	ldr	r3, [sp, #32]
 800f1e8:	182d      	adds	r5, r5, r0
 800f1ea:	601d      	str	r5, [r3, #0]
 800f1ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1ee:	1a36      	subs	r6, r6, r0
 800f1f0:	601e      	str	r6, [r3, #0]
 800f1f2:	0020      	movs	r0, r4
 800f1f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f1f6:	6161      	str	r1, [r4, #20]
 800f1f8:	e7ea      	b.n	800f1d0 <__d2b+0x54>
 800f1fa:	a801      	add	r0, sp, #4
 800f1fc:	f7ff fd47 	bl	800ec8e <__lo0bits>
 800f200:	9b01      	ldr	r3, [sp, #4]
 800f202:	2601      	movs	r6, #1
 800f204:	6163      	str	r3, [r4, #20]
 800f206:	3020      	adds	r0, #32
 800f208:	e7e7      	b.n	800f1da <__d2b+0x5e>
 800f20a:	4b0a      	ldr	r3, [pc, #40]	@ (800f234 <__d2b+0xb8>)
 800f20c:	18c0      	adds	r0, r0, r3
 800f20e:	9b08      	ldr	r3, [sp, #32]
 800f210:	6018      	str	r0, [r3, #0]
 800f212:	4b09      	ldr	r3, [pc, #36]	@ (800f238 <__d2b+0xbc>)
 800f214:	18f3      	adds	r3, r6, r3
 800f216:	009b      	lsls	r3, r3, #2
 800f218:	18e3      	adds	r3, r4, r3
 800f21a:	6958      	ldr	r0, [r3, #20]
 800f21c:	f7ff fd16 	bl	800ec4c <__hi0bits>
 800f220:	0176      	lsls	r6, r6, #5
 800f222:	e7e3      	b.n	800f1ec <__d2b+0x70>
 800f224:	08010114 	.word	0x08010114
 800f228:	08010125 	.word	0x08010125
 800f22c:	0000030f 	.word	0x0000030f
 800f230:	fffffbcd 	.word	0xfffffbcd
 800f234:	fffffbce 	.word	0xfffffbce
 800f238:	3fffffff 	.word	0x3fffffff

0800f23c <__ssputs_r>:
 800f23c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f23e:	688e      	ldr	r6, [r1, #8]
 800f240:	b085      	sub	sp, #20
 800f242:	001f      	movs	r7, r3
 800f244:	000c      	movs	r4, r1
 800f246:	680b      	ldr	r3, [r1, #0]
 800f248:	9002      	str	r0, [sp, #8]
 800f24a:	9203      	str	r2, [sp, #12]
 800f24c:	42be      	cmp	r6, r7
 800f24e:	d830      	bhi.n	800f2b2 <__ssputs_r+0x76>
 800f250:	210c      	movs	r1, #12
 800f252:	5e62      	ldrsh	r2, [r4, r1]
 800f254:	2190      	movs	r1, #144	@ 0x90
 800f256:	00c9      	lsls	r1, r1, #3
 800f258:	420a      	tst	r2, r1
 800f25a:	d028      	beq.n	800f2ae <__ssputs_r+0x72>
 800f25c:	2003      	movs	r0, #3
 800f25e:	6921      	ldr	r1, [r4, #16]
 800f260:	1a5b      	subs	r3, r3, r1
 800f262:	9301      	str	r3, [sp, #4]
 800f264:	6963      	ldr	r3, [r4, #20]
 800f266:	4343      	muls	r3, r0
 800f268:	9801      	ldr	r0, [sp, #4]
 800f26a:	0fdd      	lsrs	r5, r3, #31
 800f26c:	18ed      	adds	r5, r5, r3
 800f26e:	1c7b      	adds	r3, r7, #1
 800f270:	181b      	adds	r3, r3, r0
 800f272:	106d      	asrs	r5, r5, #1
 800f274:	42ab      	cmp	r3, r5
 800f276:	d900      	bls.n	800f27a <__ssputs_r+0x3e>
 800f278:	001d      	movs	r5, r3
 800f27a:	0552      	lsls	r2, r2, #21
 800f27c:	d528      	bpl.n	800f2d0 <__ssputs_r+0x94>
 800f27e:	0029      	movs	r1, r5
 800f280:	9802      	ldr	r0, [sp, #8]
 800f282:	f7ff fba7 	bl	800e9d4 <_malloc_r>
 800f286:	1e06      	subs	r6, r0, #0
 800f288:	d02c      	beq.n	800f2e4 <__ssputs_r+0xa8>
 800f28a:	9a01      	ldr	r2, [sp, #4]
 800f28c:	6921      	ldr	r1, [r4, #16]
 800f28e:	f7fe fc9f 	bl	800dbd0 <memcpy>
 800f292:	89a2      	ldrh	r2, [r4, #12]
 800f294:	4b18      	ldr	r3, [pc, #96]	@ (800f2f8 <__ssputs_r+0xbc>)
 800f296:	401a      	ands	r2, r3
 800f298:	2380      	movs	r3, #128	@ 0x80
 800f29a:	4313      	orrs	r3, r2
 800f29c:	81a3      	strh	r3, [r4, #12]
 800f29e:	9b01      	ldr	r3, [sp, #4]
 800f2a0:	6126      	str	r6, [r4, #16]
 800f2a2:	18f6      	adds	r6, r6, r3
 800f2a4:	6026      	str	r6, [r4, #0]
 800f2a6:	003e      	movs	r6, r7
 800f2a8:	6165      	str	r5, [r4, #20]
 800f2aa:	1aed      	subs	r5, r5, r3
 800f2ac:	60a5      	str	r5, [r4, #8]
 800f2ae:	42be      	cmp	r6, r7
 800f2b0:	d900      	bls.n	800f2b4 <__ssputs_r+0x78>
 800f2b2:	003e      	movs	r6, r7
 800f2b4:	0032      	movs	r2, r6
 800f2b6:	9903      	ldr	r1, [sp, #12]
 800f2b8:	6820      	ldr	r0, [r4, #0]
 800f2ba:	f000 f9ce 	bl	800f65a <memmove>
 800f2be:	2000      	movs	r0, #0
 800f2c0:	68a3      	ldr	r3, [r4, #8]
 800f2c2:	1b9b      	subs	r3, r3, r6
 800f2c4:	60a3      	str	r3, [r4, #8]
 800f2c6:	6823      	ldr	r3, [r4, #0]
 800f2c8:	199b      	adds	r3, r3, r6
 800f2ca:	6023      	str	r3, [r4, #0]
 800f2cc:	b005      	add	sp, #20
 800f2ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2d0:	002a      	movs	r2, r5
 800f2d2:	9802      	ldr	r0, [sp, #8]
 800f2d4:	f000 fa43 	bl	800f75e <_realloc_r>
 800f2d8:	1e06      	subs	r6, r0, #0
 800f2da:	d1e0      	bne.n	800f29e <__ssputs_r+0x62>
 800f2dc:	6921      	ldr	r1, [r4, #16]
 800f2de:	9802      	ldr	r0, [sp, #8]
 800f2e0:	f7ff fb02 	bl	800e8e8 <_free_r>
 800f2e4:	230c      	movs	r3, #12
 800f2e6:	2001      	movs	r0, #1
 800f2e8:	9a02      	ldr	r2, [sp, #8]
 800f2ea:	4240      	negs	r0, r0
 800f2ec:	6013      	str	r3, [r2, #0]
 800f2ee:	89a2      	ldrh	r2, [r4, #12]
 800f2f0:	3334      	adds	r3, #52	@ 0x34
 800f2f2:	4313      	orrs	r3, r2
 800f2f4:	81a3      	strh	r3, [r4, #12]
 800f2f6:	e7e9      	b.n	800f2cc <__ssputs_r+0x90>
 800f2f8:	fffffb7f 	.word	0xfffffb7f

0800f2fc <_svfiprintf_r>:
 800f2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2fe:	b0a1      	sub	sp, #132	@ 0x84
 800f300:	9003      	str	r0, [sp, #12]
 800f302:	001d      	movs	r5, r3
 800f304:	898b      	ldrh	r3, [r1, #12]
 800f306:	000f      	movs	r7, r1
 800f308:	0016      	movs	r6, r2
 800f30a:	061b      	lsls	r3, r3, #24
 800f30c:	d511      	bpl.n	800f332 <_svfiprintf_r+0x36>
 800f30e:	690b      	ldr	r3, [r1, #16]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d10e      	bne.n	800f332 <_svfiprintf_r+0x36>
 800f314:	2140      	movs	r1, #64	@ 0x40
 800f316:	f7ff fb5d 	bl	800e9d4 <_malloc_r>
 800f31a:	6038      	str	r0, [r7, #0]
 800f31c:	6138      	str	r0, [r7, #16]
 800f31e:	2800      	cmp	r0, #0
 800f320:	d105      	bne.n	800f32e <_svfiprintf_r+0x32>
 800f322:	230c      	movs	r3, #12
 800f324:	9a03      	ldr	r2, [sp, #12]
 800f326:	6013      	str	r3, [r2, #0]
 800f328:	2001      	movs	r0, #1
 800f32a:	4240      	negs	r0, r0
 800f32c:	e0cf      	b.n	800f4ce <_svfiprintf_r+0x1d2>
 800f32e:	2340      	movs	r3, #64	@ 0x40
 800f330:	617b      	str	r3, [r7, #20]
 800f332:	2300      	movs	r3, #0
 800f334:	ac08      	add	r4, sp, #32
 800f336:	6163      	str	r3, [r4, #20]
 800f338:	3320      	adds	r3, #32
 800f33a:	7663      	strb	r3, [r4, #25]
 800f33c:	3310      	adds	r3, #16
 800f33e:	76a3      	strb	r3, [r4, #26]
 800f340:	9507      	str	r5, [sp, #28]
 800f342:	0035      	movs	r5, r6
 800f344:	782b      	ldrb	r3, [r5, #0]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d001      	beq.n	800f34e <_svfiprintf_r+0x52>
 800f34a:	2b25      	cmp	r3, #37	@ 0x25
 800f34c:	d148      	bne.n	800f3e0 <_svfiprintf_r+0xe4>
 800f34e:	1bab      	subs	r3, r5, r6
 800f350:	9305      	str	r3, [sp, #20]
 800f352:	42b5      	cmp	r5, r6
 800f354:	d00b      	beq.n	800f36e <_svfiprintf_r+0x72>
 800f356:	0032      	movs	r2, r6
 800f358:	0039      	movs	r1, r7
 800f35a:	9803      	ldr	r0, [sp, #12]
 800f35c:	f7ff ff6e 	bl	800f23c <__ssputs_r>
 800f360:	3001      	adds	r0, #1
 800f362:	d100      	bne.n	800f366 <_svfiprintf_r+0x6a>
 800f364:	e0ae      	b.n	800f4c4 <_svfiprintf_r+0x1c8>
 800f366:	6963      	ldr	r3, [r4, #20]
 800f368:	9a05      	ldr	r2, [sp, #20]
 800f36a:	189b      	adds	r3, r3, r2
 800f36c:	6163      	str	r3, [r4, #20]
 800f36e:	782b      	ldrb	r3, [r5, #0]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d100      	bne.n	800f376 <_svfiprintf_r+0x7a>
 800f374:	e0a6      	b.n	800f4c4 <_svfiprintf_r+0x1c8>
 800f376:	2201      	movs	r2, #1
 800f378:	2300      	movs	r3, #0
 800f37a:	4252      	negs	r2, r2
 800f37c:	6062      	str	r2, [r4, #4]
 800f37e:	a904      	add	r1, sp, #16
 800f380:	3254      	adds	r2, #84	@ 0x54
 800f382:	1852      	adds	r2, r2, r1
 800f384:	1c6e      	adds	r6, r5, #1
 800f386:	6023      	str	r3, [r4, #0]
 800f388:	60e3      	str	r3, [r4, #12]
 800f38a:	60a3      	str	r3, [r4, #8]
 800f38c:	7013      	strb	r3, [r2, #0]
 800f38e:	65a3      	str	r3, [r4, #88]	@ 0x58
 800f390:	4b54      	ldr	r3, [pc, #336]	@ (800f4e4 <_svfiprintf_r+0x1e8>)
 800f392:	2205      	movs	r2, #5
 800f394:	0018      	movs	r0, r3
 800f396:	7831      	ldrb	r1, [r6, #0]
 800f398:	9305      	str	r3, [sp, #20]
 800f39a:	f7fe fc0e 	bl	800dbba <memchr>
 800f39e:	1c75      	adds	r5, r6, #1
 800f3a0:	2800      	cmp	r0, #0
 800f3a2:	d11f      	bne.n	800f3e4 <_svfiprintf_r+0xe8>
 800f3a4:	6822      	ldr	r2, [r4, #0]
 800f3a6:	06d3      	lsls	r3, r2, #27
 800f3a8:	d504      	bpl.n	800f3b4 <_svfiprintf_r+0xb8>
 800f3aa:	2353      	movs	r3, #83	@ 0x53
 800f3ac:	a904      	add	r1, sp, #16
 800f3ae:	185b      	adds	r3, r3, r1
 800f3b0:	2120      	movs	r1, #32
 800f3b2:	7019      	strb	r1, [r3, #0]
 800f3b4:	0713      	lsls	r3, r2, #28
 800f3b6:	d504      	bpl.n	800f3c2 <_svfiprintf_r+0xc6>
 800f3b8:	2353      	movs	r3, #83	@ 0x53
 800f3ba:	a904      	add	r1, sp, #16
 800f3bc:	185b      	adds	r3, r3, r1
 800f3be:	212b      	movs	r1, #43	@ 0x2b
 800f3c0:	7019      	strb	r1, [r3, #0]
 800f3c2:	7833      	ldrb	r3, [r6, #0]
 800f3c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3c6:	d016      	beq.n	800f3f6 <_svfiprintf_r+0xfa>
 800f3c8:	0035      	movs	r5, r6
 800f3ca:	2100      	movs	r1, #0
 800f3cc:	200a      	movs	r0, #10
 800f3ce:	68e3      	ldr	r3, [r4, #12]
 800f3d0:	782a      	ldrb	r2, [r5, #0]
 800f3d2:	1c6e      	adds	r6, r5, #1
 800f3d4:	3a30      	subs	r2, #48	@ 0x30
 800f3d6:	2a09      	cmp	r2, #9
 800f3d8:	d950      	bls.n	800f47c <_svfiprintf_r+0x180>
 800f3da:	2900      	cmp	r1, #0
 800f3dc:	d111      	bne.n	800f402 <_svfiprintf_r+0x106>
 800f3de:	e017      	b.n	800f410 <_svfiprintf_r+0x114>
 800f3e0:	3501      	adds	r5, #1
 800f3e2:	e7af      	b.n	800f344 <_svfiprintf_r+0x48>
 800f3e4:	9b05      	ldr	r3, [sp, #20]
 800f3e6:	6822      	ldr	r2, [r4, #0]
 800f3e8:	1ac0      	subs	r0, r0, r3
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	4083      	lsls	r3, r0
 800f3ee:	4313      	orrs	r3, r2
 800f3f0:	002e      	movs	r6, r5
 800f3f2:	6023      	str	r3, [r4, #0]
 800f3f4:	e7cc      	b.n	800f390 <_svfiprintf_r+0x94>
 800f3f6:	9b07      	ldr	r3, [sp, #28]
 800f3f8:	1d19      	adds	r1, r3, #4
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	9107      	str	r1, [sp, #28]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	db01      	blt.n	800f406 <_svfiprintf_r+0x10a>
 800f402:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f404:	e004      	b.n	800f410 <_svfiprintf_r+0x114>
 800f406:	425b      	negs	r3, r3
 800f408:	60e3      	str	r3, [r4, #12]
 800f40a:	2302      	movs	r3, #2
 800f40c:	4313      	orrs	r3, r2
 800f40e:	6023      	str	r3, [r4, #0]
 800f410:	782b      	ldrb	r3, [r5, #0]
 800f412:	2b2e      	cmp	r3, #46	@ 0x2e
 800f414:	d10c      	bne.n	800f430 <_svfiprintf_r+0x134>
 800f416:	786b      	ldrb	r3, [r5, #1]
 800f418:	2b2a      	cmp	r3, #42	@ 0x2a
 800f41a:	d134      	bne.n	800f486 <_svfiprintf_r+0x18a>
 800f41c:	9b07      	ldr	r3, [sp, #28]
 800f41e:	3502      	adds	r5, #2
 800f420:	1d1a      	adds	r2, r3, #4
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	9207      	str	r2, [sp, #28]
 800f426:	2b00      	cmp	r3, #0
 800f428:	da01      	bge.n	800f42e <_svfiprintf_r+0x132>
 800f42a:	2301      	movs	r3, #1
 800f42c:	425b      	negs	r3, r3
 800f42e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f430:	4e2d      	ldr	r6, [pc, #180]	@ (800f4e8 <_svfiprintf_r+0x1ec>)
 800f432:	2203      	movs	r2, #3
 800f434:	0030      	movs	r0, r6
 800f436:	7829      	ldrb	r1, [r5, #0]
 800f438:	f7fe fbbf 	bl	800dbba <memchr>
 800f43c:	2800      	cmp	r0, #0
 800f43e:	d006      	beq.n	800f44e <_svfiprintf_r+0x152>
 800f440:	2340      	movs	r3, #64	@ 0x40
 800f442:	1b80      	subs	r0, r0, r6
 800f444:	4083      	lsls	r3, r0
 800f446:	6822      	ldr	r2, [r4, #0]
 800f448:	3501      	adds	r5, #1
 800f44a:	4313      	orrs	r3, r2
 800f44c:	6023      	str	r3, [r4, #0]
 800f44e:	7829      	ldrb	r1, [r5, #0]
 800f450:	2206      	movs	r2, #6
 800f452:	4826      	ldr	r0, [pc, #152]	@ (800f4ec <_svfiprintf_r+0x1f0>)
 800f454:	1c6e      	adds	r6, r5, #1
 800f456:	7621      	strb	r1, [r4, #24]
 800f458:	f7fe fbaf 	bl	800dbba <memchr>
 800f45c:	2800      	cmp	r0, #0
 800f45e:	d038      	beq.n	800f4d2 <_svfiprintf_r+0x1d6>
 800f460:	4b23      	ldr	r3, [pc, #140]	@ (800f4f0 <_svfiprintf_r+0x1f4>)
 800f462:	2b00      	cmp	r3, #0
 800f464:	d122      	bne.n	800f4ac <_svfiprintf_r+0x1b0>
 800f466:	2207      	movs	r2, #7
 800f468:	9b07      	ldr	r3, [sp, #28]
 800f46a:	3307      	adds	r3, #7
 800f46c:	4393      	bics	r3, r2
 800f46e:	3308      	adds	r3, #8
 800f470:	9307      	str	r3, [sp, #28]
 800f472:	6963      	ldr	r3, [r4, #20]
 800f474:	9a04      	ldr	r2, [sp, #16]
 800f476:	189b      	adds	r3, r3, r2
 800f478:	6163      	str	r3, [r4, #20]
 800f47a:	e762      	b.n	800f342 <_svfiprintf_r+0x46>
 800f47c:	4343      	muls	r3, r0
 800f47e:	0035      	movs	r5, r6
 800f480:	2101      	movs	r1, #1
 800f482:	189b      	adds	r3, r3, r2
 800f484:	e7a4      	b.n	800f3d0 <_svfiprintf_r+0xd4>
 800f486:	2300      	movs	r3, #0
 800f488:	200a      	movs	r0, #10
 800f48a:	0019      	movs	r1, r3
 800f48c:	3501      	adds	r5, #1
 800f48e:	6063      	str	r3, [r4, #4]
 800f490:	782a      	ldrb	r2, [r5, #0]
 800f492:	1c6e      	adds	r6, r5, #1
 800f494:	3a30      	subs	r2, #48	@ 0x30
 800f496:	2a09      	cmp	r2, #9
 800f498:	d903      	bls.n	800f4a2 <_svfiprintf_r+0x1a6>
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d0c8      	beq.n	800f430 <_svfiprintf_r+0x134>
 800f49e:	9109      	str	r1, [sp, #36]	@ 0x24
 800f4a0:	e7c6      	b.n	800f430 <_svfiprintf_r+0x134>
 800f4a2:	4341      	muls	r1, r0
 800f4a4:	0035      	movs	r5, r6
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	1889      	adds	r1, r1, r2
 800f4aa:	e7f1      	b.n	800f490 <_svfiprintf_r+0x194>
 800f4ac:	aa07      	add	r2, sp, #28
 800f4ae:	9200      	str	r2, [sp, #0]
 800f4b0:	0021      	movs	r1, r4
 800f4b2:	003a      	movs	r2, r7
 800f4b4:	4b0f      	ldr	r3, [pc, #60]	@ (800f4f4 <_svfiprintf_r+0x1f8>)
 800f4b6:	9803      	ldr	r0, [sp, #12]
 800f4b8:	f7fd fdfe 	bl	800d0b8 <_printf_float>
 800f4bc:	9004      	str	r0, [sp, #16]
 800f4be:	9b04      	ldr	r3, [sp, #16]
 800f4c0:	3301      	adds	r3, #1
 800f4c2:	d1d6      	bne.n	800f472 <_svfiprintf_r+0x176>
 800f4c4:	89bb      	ldrh	r3, [r7, #12]
 800f4c6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800f4c8:	065b      	lsls	r3, r3, #25
 800f4ca:	d500      	bpl.n	800f4ce <_svfiprintf_r+0x1d2>
 800f4cc:	e72c      	b.n	800f328 <_svfiprintf_r+0x2c>
 800f4ce:	b021      	add	sp, #132	@ 0x84
 800f4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4d2:	aa07      	add	r2, sp, #28
 800f4d4:	9200      	str	r2, [sp, #0]
 800f4d6:	0021      	movs	r1, r4
 800f4d8:	003a      	movs	r2, r7
 800f4da:	4b06      	ldr	r3, [pc, #24]	@ (800f4f4 <_svfiprintf_r+0x1f8>)
 800f4dc:	9803      	ldr	r0, [sp, #12]
 800f4de:	f7fe f899 	bl	800d614 <_printf_i>
 800f4e2:	e7eb      	b.n	800f4bc <_svfiprintf_r+0x1c0>
 800f4e4:	08010280 	.word	0x08010280
 800f4e8:	08010286 	.word	0x08010286
 800f4ec:	0801028a 	.word	0x0801028a
 800f4f0:	0800d0b9 	.word	0x0800d0b9
 800f4f4:	0800f23d 	.word	0x0800f23d

0800f4f8 <__sflush_r>:
 800f4f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f4fa:	220c      	movs	r2, #12
 800f4fc:	5e8b      	ldrsh	r3, [r1, r2]
 800f4fe:	0005      	movs	r5, r0
 800f500:	000c      	movs	r4, r1
 800f502:	071a      	lsls	r2, r3, #28
 800f504:	d456      	bmi.n	800f5b4 <__sflush_r+0xbc>
 800f506:	684a      	ldr	r2, [r1, #4]
 800f508:	2a00      	cmp	r2, #0
 800f50a:	dc02      	bgt.n	800f512 <__sflush_r+0x1a>
 800f50c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800f50e:	2a00      	cmp	r2, #0
 800f510:	dd4e      	ble.n	800f5b0 <__sflush_r+0xb8>
 800f512:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f514:	2f00      	cmp	r7, #0
 800f516:	d04b      	beq.n	800f5b0 <__sflush_r+0xb8>
 800f518:	2200      	movs	r2, #0
 800f51a:	2080      	movs	r0, #128	@ 0x80
 800f51c:	682e      	ldr	r6, [r5, #0]
 800f51e:	602a      	str	r2, [r5, #0]
 800f520:	001a      	movs	r2, r3
 800f522:	0140      	lsls	r0, r0, #5
 800f524:	6a21      	ldr	r1, [r4, #32]
 800f526:	4002      	ands	r2, r0
 800f528:	4203      	tst	r3, r0
 800f52a:	d033      	beq.n	800f594 <__sflush_r+0x9c>
 800f52c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f52e:	89a3      	ldrh	r3, [r4, #12]
 800f530:	075b      	lsls	r3, r3, #29
 800f532:	d506      	bpl.n	800f542 <__sflush_r+0x4a>
 800f534:	6863      	ldr	r3, [r4, #4]
 800f536:	1ad2      	subs	r2, r2, r3
 800f538:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d001      	beq.n	800f542 <__sflush_r+0x4a>
 800f53e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f540:	1ad2      	subs	r2, r2, r3
 800f542:	2300      	movs	r3, #0
 800f544:	0028      	movs	r0, r5
 800f546:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f548:	6a21      	ldr	r1, [r4, #32]
 800f54a:	47b8      	blx	r7
 800f54c:	89a2      	ldrh	r2, [r4, #12]
 800f54e:	1c43      	adds	r3, r0, #1
 800f550:	d106      	bne.n	800f560 <__sflush_r+0x68>
 800f552:	6829      	ldr	r1, [r5, #0]
 800f554:	291d      	cmp	r1, #29
 800f556:	d846      	bhi.n	800f5e6 <__sflush_r+0xee>
 800f558:	4b29      	ldr	r3, [pc, #164]	@ (800f600 <__sflush_r+0x108>)
 800f55a:	410b      	asrs	r3, r1
 800f55c:	07db      	lsls	r3, r3, #31
 800f55e:	d442      	bmi.n	800f5e6 <__sflush_r+0xee>
 800f560:	2300      	movs	r3, #0
 800f562:	6063      	str	r3, [r4, #4]
 800f564:	6923      	ldr	r3, [r4, #16]
 800f566:	6023      	str	r3, [r4, #0]
 800f568:	04d2      	lsls	r2, r2, #19
 800f56a:	d505      	bpl.n	800f578 <__sflush_r+0x80>
 800f56c:	1c43      	adds	r3, r0, #1
 800f56e:	d102      	bne.n	800f576 <__sflush_r+0x7e>
 800f570:	682b      	ldr	r3, [r5, #0]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d100      	bne.n	800f578 <__sflush_r+0x80>
 800f576:	6560      	str	r0, [r4, #84]	@ 0x54
 800f578:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f57a:	602e      	str	r6, [r5, #0]
 800f57c:	2900      	cmp	r1, #0
 800f57e:	d017      	beq.n	800f5b0 <__sflush_r+0xb8>
 800f580:	0023      	movs	r3, r4
 800f582:	3344      	adds	r3, #68	@ 0x44
 800f584:	4299      	cmp	r1, r3
 800f586:	d002      	beq.n	800f58e <__sflush_r+0x96>
 800f588:	0028      	movs	r0, r5
 800f58a:	f7ff f9ad 	bl	800e8e8 <_free_r>
 800f58e:	2300      	movs	r3, #0
 800f590:	6363      	str	r3, [r4, #52]	@ 0x34
 800f592:	e00d      	b.n	800f5b0 <__sflush_r+0xb8>
 800f594:	2301      	movs	r3, #1
 800f596:	0028      	movs	r0, r5
 800f598:	47b8      	blx	r7
 800f59a:	0002      	movs	r2, r0
 800f59c:	1c43      	adds	r3, r0, #1
 800f59e:	d1c6      	bne.n	800f52e <__sflush_r+0x36>
 800f5a0:	682b      	ldr	r3, [r5, #0]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d0c3      	beq.n	800f52e <__sflush_r+0x36>
 800f5a6:	2b1d      	cmp	r3, #29
 800f5a8:	d001      	beq.n	800f5ae <__sflush_r+0xb6>
 800f5aa:	2b16      	cmp	r3, #22
 800f5ac:	d11a      	bne.n	800f5e4 <__sflush_r+0xec>
 800f5ae:	602e      	str	r6, [r5, #0]
 800f5b0:	2000      	movs	r0, #0
 800f5b2:	e01e      	b.n	800f5f2 <__sflush_r+0xfa>
 800f5b4:	690e      	ldr	r6, [r1, #16]
 800f5b6:	2e00      	cmp	r6, #0
 800f5b8:	d0fa      	beq.n	800f5b0 <__sflush_r+0xb8>
 800f5ba:	680f      	ldr	r7, [r1, #0]
 800f5bc:	600e      	str	r6, [r1, #0]
 800f5be:	1bba      	subs	r2, r7, r6
 800f5c0:	9201      	str	r2, [sp, #4]
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	079b      	lsls	r3, r3, #30
 800f5c6:	d100      	bne.n	800f5ca <__sflush_r+0xd2>
 800f5c8:	694a      	ldr	r2, [r1, #20]
 800f5ca:	60a2      	str	r2, [r4, #8]
 800f5cc:	9b01      	ldr	r3, [sp, #4]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	ddee      	ble.n	800f5b0 <__sflush_r+0xb8>
 800f5d2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800f5d4:	0032      	movs	r2, r6
 800f5d6:	001f      	movs	r7, r3
 800f5d8:	0028      	movs	r0, r5
 800f5da:	9b01      	ldr	r3, [sp, #4]
 800f5dc:	6a21      	ldr	r1, [r4, #32]
 800f5de:	47b8      	blx	r7
 800f5e0:	2800      	cmp	r0, #0
 800f5e2:	dc07      	bgt.n	800f5f4 <__sflush_r+0xfc>
 800f5e4:	89a2      	ldrh	r2, [r4, #12]
 800f5e6:	2340      	movs	r3, #64	@ 0x40
 800f5e8:	2001      	movs	r0, #1
 800f5ea:	4313      	orrs	r3, r2
 800f5ec:	b21b      	sxth	r3, r3
 800f5ee:	81a3      	strh	r3, [r4, #12]
 800f5f0:	4240      	negs	r0, r0
 800f5f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f5f4:	9b01      	ldr	r3, [sp, #4]
 800f5f6:	1836      	adds	r6, r6, r0
 800f5f8:	1a1b      	subs	r3, r3, r0
 800f5fa:	9301      	str	r3, [sp, #4]
 800f5fc:	e7e6      	b.n	800f5cc <__sflush_r+0xd4>
 800f5fe:	46c0      	nop			@ (mov r8, r8)
 800f600:	dfbffffe 	.word	0xdfbffffe

0800f604 <_fflush_r>:
 800f604:	690b      	ldr	r3, [r1, #16]
 800f606:	b570      	push	{r4, r5, r6, lr}
 800f608:	0005      	movs	r5, r0
 800f60a:	000c      	movs	r4, r1
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d102      	bne.n	800f616 <_fflush_r+0x12>
 800f610:	2500      	movs	r5, #0
 800f612:	0028      	movs	r0, r5
 800f614:	bd70      	pop	{r4, r5, r6, pc}
 800f616:	2800      	cmp	r0, #0
 800f618:	d004      	beq.n	800f624 <_fflush_r+0x20>
 800f61a:	6a03      	ldr	r3, [r0, #32]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d101      	bne.n	800f624 <_fflush_r+0x20>
 800f620:	f7fe f996 	bl	800d950 <__sinit>
 800f624:	220c      	movs	r2, #12
 800f626:	5ea3      	ldrsh	r3, [r4, r2]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d0f1      	beq.n	800f610 <_fflush_r+0xc>
 800f62c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f62e:	07d2      	lsls	r2, r2, #31
 800f630:	d404      	bmi.n	800f63c <_fflush_r+0x38>
 800f632:	059b      	lsls	r3, r3, #22
 800f634:	d402      	bmi.n	800f63c <_fflush_r+0x38>
 800f636:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f638:	f7fe fabd 	bl	800dbb6 <__retarget_lock_acquire_recursive>
 800f63c:	0028      	movs	r0, r5
 800f63e:	0021      	movs	r1, r4
 800f640:	f7ff ff5a 	bl	800f4f8 <__sflush_r>
 800f644:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f646:	0005      	movs	r5, r0
 800f648:	07db      	lsls	r3, r3, #31
 800f64a:	d4e2      	bmi.n	800f612 <_fflush_r+0xe>
 800f64c:	89a3      	ldrh	r3, [r4, #12]
 800f64e:	059b      	lsls	r3, r3, #22
 800f650:	d4df      	bmi.n	800f612 <_fflush_r+0xe>
 800f652:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f654:	f7fe fab0 	bl	800dbb8 <__retarget_lock_release_recursive>
 800f658:	e7db      	b.n	800f612 <_fflush_r+0xe>

0800f65a <memmove>:
 800f65a:	b510      	push	{r4, lr}
 800f65c:	4288      	cmp	r0, r1
 800f65e:	d806      	bhi.n	800f66e <memmove+0x14>
 800f660:	2300      	movs	r3, #0
 800f662:	429a      	cmp	r2, r3
 800f664:	d008      	beq.n	800f678 <memmove+0x1e>
 800f666:	5ccc      	ldrb	r4, [r1, r3]
 800f668:	54c4      	strb	r4, [r0, r3]
 800f66a:	3301      	adds	r3, #1
 800f66c:	e7f9      	b.n	800f662 <memmove+0x8>
 800f66e:	188b      	adds	r3, r1, r2
 800f670:	4298      	cmp	r0, r3
 800f672:	d2f5      	bcs.n	800f660 <memmove+0x6>
 800f674:	3a01      	subs	r2, #1
 800f676:	d200      	bcs.n	800f67a <memmove+0x20>
 800f678:	bd10      	pop	{r4, pc}
 800f67a:	5c8b      	ldrb	r3, [r1, r2]
 800f67c:	5483      	strb	r3, [r0, r2]
 800f67e:	e7f9      	b.n	800f674 <memmove+0x1a>

0800f680 <_sbrk_r>:
 800f680:	2300      	movs	r3, #0
 800f682:	b570      	push	{r4, r5, r6, lr}
 800f684:	4d06      	ldr	r5, [pc, #24]	@ (800f6a0 <_sbrk_r+0x20>)
 800f686:	0004      	movs	r4, r0
 800f688:	0008      	movs	r0, r1
 800f68a:	602b      	str	r3, [r5, #0]
 800f68c:	f7f3 fd1a 	bl	80030c4 <_sbrk>
 800f690:	1c43      	adds	r3, r0, #1
 800f692:	d103      	bne.n	800f69c <_sbrk_r+0x1c>
 800f694:	682b      	ldr	r3, [r5, #0]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d000      	beq.n	800f69c <_sbrk_r+0x1c>
 800f69a:	6023      	str	r3, [r4, #0]
 800f69c:	bd70      	pop	{r4, r5, r6, pc}
 800f69e:	46c0      	nop			@ (mov r8, r8)
 800f6a0:	20001cd8 	.word	0x20001cd8

0800f6a4 <__assert_func>:
 800f6a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f6a6:	0014      	movs	r4, r2
 800f6a8:	001a      	movs	r2, r3
 800f6aa:	4b09      	ldr	r3, [pc, #36]	@ (800f6d0 <__assert_func+0x2c>)
 800f6ac:	0005      	movs	r5, r0
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	000e      	movs	r6, r1
 800f6b2:	68d8      	ldr	r0, [r3, #12]
 800f6b4:	4b07      	ldr	r3, [pc, #28]	@ (800f6d4 <__assert_func+0x30>)
 800f6b6:	2c00      	cmp	r4, #0
 800f6b8:	d101      	bne.n	800f6be <__assert_func+0x1a>
 800f6ba:	4b07      	ldr	r3, [pc, #28]	@ (800f6d8 <__assert_func+0x34>)
 800f6bc:	001c      	movs	r4, r3
 800f6be:	4907      	ldr	r1, [pc, #28]	@ (800f6dc <__assert_func+0x38>)
 800f6c0:	9301      	str	r3, [sp, #4]
 800f6c2:	9402      	str	r4, [sp, #8]
 800f6c4:	002b      	movs	r3, r5
 800f6c6:	9600      	str	r6, [sp, #0]
 800f6c8:	f000 f886 	bl	800f7d8 <fiprintf>
 800f6cc:	f000 f894 	bl	800f7f8 <abort>
 800f6d0:	200001a0 	.word	0x200001a0
 800f6d4:	0801029b 	.word	0x0801029b
 800f6d8:	080102d6 	.word	0x080102d6
 800f6dc:	080102a8 	.word	0x080102a8

0800f6e0 <_calloc_r>:
 800f6e0:	b570      	push	{r4, r5, r6, lr}
 800f6e2:	0c0b      	lsrs	r3, r1, #16
 800f6e4:	0c15      	lsrs	r5, r2, #16
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d11e      	bne.n	800f728 <_calloc_r+0x48>
 800f6ea:	2d00      	cmp	r5, #0
 800f6ec:	d10c      	bne.n	800f708 <_calloc_r+0x28>
 800f6ee:	b289      	uxth	r1, r1
 800f6f0:	b294      	uxth	r4, r2
 800f6f2:	434c      	muls	r4, r1
 800f6f4:	0021      	movs	r1, r4
 800f6f6:	f7ff f96d 	bl	800e9d4 <_malloc_r>
 800f6fa:	1e05      	subs	r5, r0, #0
 800f6fc:	d01a      	beq.n	800f734 <_calloc_r+0x54>
 800f6fe:	0022      	movs	r2, r4
 800f700:	2100      	movs	r1, #0
 800f702:	f7fe f9d3 	bl	800daac <memset>
 800f706:	e016      	b.n	800f736 <_calloc_r+0x56>
 800f708:	1c2b      	adds	r3, r5, #0
 800f70a:	1c0c      	adds	r4, r1, #0
 800f70c:	b289      	uxth	r1, r1
 800f70e:	b292      	uxth	r2, r2
 800f710:	434a      	muls	r2, r1
 800f712:	b29b      	uxth	r3, r3
 800f714:	b2a1      	uxth	r1, r4
 800f716:	4359      	muls	r1, r3
 800f718:	0c14      	lsrs	r4, r2, #16
 800f71a:	190c      	adds	r4, r1, r4
 800f71c:	0c23      	lsrs	r3, r4, #16
 800f71e:	d107      	bne.n	800f730 <_calloc_r+0x50>
 800f720:	0424      	lsls	r4, r4, #16
 800f722:	b292      	uxth	r2, r2
 800f724:	4314      	orrs	r4, r2
 800f726:	e7e5      	b.n	800f6f4 <_calloc_r+0x14>
 800f728:	2d00      	cmp	r5, #0
 800f72a:	d101      	bne.n	800f730 <_calloc_r+0x50>
 800f72c:	1c14      	adds	r4, r2, #0
 800f72e:	e7ed      	b.n	800f70c <_calloc_r+0x2c>
 800f730:	230c      	movs	r3, #12
 800f732:	6003      	str	r3, [r0, #0]
 800f734:	2500      	movs	r5, #0
 800f736:	0028      	movs	r0, r5
 800f738:	bd70      	pop	{r4, r5, r6, pc}

0800f73a <__ascii_mbtowc>:
 800f73a:	b082      	sub	sp, #8
 800f73c:	2900      	cmp	r1, #0
 800f73e:	d100      	bne.n	800f742 <__ascii_mbtowc+0x8>
 800f740:	a901      	add	r1, sp, #4
 800f742:	1e10      	subs	r0, r2, #0
 800f744:	d006      	beq.n	800f754 <__ascii_mbtowc+0x1a>
 800f746:	2b00      	cmp	r3, #0
 800f748:	d006      	beq.n	800f758 <__ascii_mbtowc+0x1e>
 800f74a:	7813      	ldrb	r3, [r2, #0]
 800f74c:	600b      	str	r3, [r1, #0]
 800f74e:	7810      	ldrb	r0, [r2, #0]
 800f750:	1e43      	subs	r3, r0, #1
 800f752:	4198      	sbcs	r0, r3
 800f754:	b002      	add	sp, #8
 800f756:	4770      	bx	lr
 800f758:	2002      	movs	r0, #2
 800f75a:	4240      	negs	r0, r0
 800f75c:	e7fa      	b.n	800f754 <__ascii_mbtowc+0x1a>

0800f75e <_realloc_r>:
 800f75e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f760:	0006      	movs	r6, r0
 800f762:	000c      	movs	r4, r1
 800f764:	0015      	movs	r5, r2
 800f766:	2900      	cmp	r1, #0
 800f768:	d105      	bne.n	800f776 <_realloc_r+0x18>
 800f76a:	0011      	movs	r1, r2
 800f76c:	f7ff f932 	bl	800e9d4 <_malloc_r>
 800f770:	0004      	movs	r4, r0
 800f772:	0020      	movs	r0, r4
 800f774:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f776:	2a00      	cmp	r2, #0
 800f778:	d103      	bne.n	800f782 <_realloc_r+0x24>
 800f77a:	f7ff f8b5 	bl	800e8e8 <_free_r>
 800f77e:	2400      	movs	r4, #0
 800f780:	e7f7      	b.n	800f772 <_realloc_r+0x14>
 800f782:	f000 f840 	bl	800f806 <_malloc_usable_size_r>
 800f786:	0007      	movs	r7, r0
 800f788:	4285      	cmp	r5, r0
 800f78a:	d802      	bhi.n	800f792 <_realloc_r+0x34>
 800f78c:	0843      	lsrs	r3, r0, #1
 800f78e:	42ab      	cmp	r3, r5
 800f790:	d3ef      	bcc.n	800f772 <_realloc_r+0x14>
 800f792:	0029      	movs	r1, r5
 800f794:	0030      	movs	r0, r6
 800f796:	f7ff f91d 	bl	800e9d4 <_malloc_r>
 800f79a:	9001      	str	r0, [sp, #4]
 800f79c:	2800      	cmp	r0, #0
 800f79e:	d0ee      	beq.n	800f77e <_realloc_r+0x20>
 800f7a0:	002a      	movs	r2, r5
 800f7a2:	42bd      	cmp	r5, r7
 800f7a4:	d900      	bls.n	800f7a8 <_realloc_r+0x4a>
 800f7a6:	003a      	movs	r2, r7
 800f7a8:	0021      	movs	r1, r4
 800f7aa:	9801      	ldr	r0, [sp, #4]
 800f7ac:	f7fe fa10 	bl	800dbd0 <memcpy>
 800f7b0:	0021      	movs	r1, r4
 800f7b2:	0030      	movs	r0, r6
 800f7b4:	f7ff f898 	bl	800e8e8 <_free_r>
 800f7b8:	9c01      	ldr	r4, [sp, #4]
 800f7ba:	e7da      	b.n	800f772 <_realloc_r+0x14>

0800f7bc <__ascii_wctomb>:
 800f7bc:	0003      	movs	r3, r0
 800f7be:	1e08      	subs	r0, r1, #0
 800f7c0:	d005      	beq.n	800f7ce <__ascii_wctomb+0x12>
 800f7c2:	2aff      	cmp	r2, #255	@ 0xff
 800f7c4:	d904      	bls.n	800f7d0 <__ascii_wctomb+0x14>
 800f7c6:	228a      	movs	r2, #138	@ 0x8a
 800f7c8:	2001      	movs	r0, #1
 800f7ca:	601a      	str	r2, [r3, #0]
 800f7cc:	4240      	negs	r0, r0
 800f7ce:	4770      	bx	lr
 800f7d0:	2001      	movs	r0, #1
 800f7d2:	700a      	strb	r2, [r1, #0]
 800f7d4:	e7fb      	b.n	800f7ce <__ascii_wctomb+0x12>
	...

0800f7d8 <fiprintf>:
 800f7d8:	b40e      	push	{r1, r2, r3}
 800f7da:	b517      	push	{r0, r1, r2, r4, lr}
 800f7dc:	4c05      	ldr	r4, [pc, #20]	@ (800f7f4 <fiprintf+0x1c>)
 800f7de:	ab05      	add	r3, sp, #20
 800f7e0:	cb04      	ldmia	r3!, {r2}
 800f7e2:	0001      	movs	r1, r0
 800f7e4:	6820      	ldr	r0, [r4, #0]
 800f7e6:	9301      	str	r3, [sp, #4]
 800f7e8:	f000 f83c 	bl	800f864 <_vfiprintf_r>
 800f7ec:	bc1e      	pop	{r1, r2, r3, r4}
 800f7ee:	bc08      	pop	{r3}
 800f7f0:	b003      	add	sp, #12
 800f7f2:	4718      	bx	r3
 800f7f4:	200001a0 	.word	0x200001a0

0800f7f8 <abort>:
 800f7f8:	2006      	movs	r0, #6
 800f7fa:	b510      	push	{r4, lr}
 800f7fc:	f000 fa18 	bl	800fc30 <raise>
 800f800:	2001      	movs	r0, #1
 800f802:	f7f3 fbed 	bl	8002fe0 <_exit>

0800f806 <_malloc_usable_size_r>:
 800f806:	1f0b      	subs	r3, r1, #4
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	1f18      	subs	r0, r3, #4
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	da01      	bge.n	800f814 <_malloc_usable_size_r+0xe>
 800f810:	580b      	ldr	r3, [r1, r0]
 800f812:	18c0      	adds	r0, r0, r3
 800f814:	4770      	bx	lr

0800f816 <__sfputc_r>:
 800f816:	6893      	ldr	r3, [r2, #8]
 800f818:	b510      	push	{r4, lr}
 800f81a:	3b01      	subs	r3, #1
 800f81c:	6093      	str	r3, [r2, #8]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	da04      	bge.n	800f82c <__sfputc_r+0x16>
 800f822:	6994      	ldr	r4, [r2, #24]
 800f824:	42a3      	cmp	r3, r4
 800f826:	db07      	blt.n	800f838 <__sfputc_r+0x22>
 800f828:	290a      	cmp	r1, #10
 800f82a:	d005      	beq.n	800f838 <__sfputc_r+0x22>
 800f82c:	6813      	ldr	r3, [r2, #0]
 800f82e:	1c58      	adds	r0, r3, #1
 800f830:	6010      	str	r0, [r2, #0]
 800f832:	7019      	strb	r1, [r3, #0]
 800f834:	0008      	movs	r0, r1
 800f836:	bd10      	pop	{r4, pc}
 800f838:	f000 f930 	bl	800fa9c <__swbuf_r>
 800f83c:	0001      	movs	r1, r0
 800f83e:	e7f9      	b.n	800f834 <__sfputc_r+0x1e>

0800f840 <__sfputs_r>:
 800f840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f842:	0006      	movs	r6, r0
 800f844:	000f      	movs	r7, r1
 800f846:	0014      	movs	r4, r2
 800f848:	18d5      	adds	r5, r2, r3
 800f84a:	42ac      	cmp	r4, r5
 800f84c:	d101      	bne.n	800f852 <__sfputs_r+0x12>
 800f84e:	2000      	movs	r0, #0
 800f850:	e007      	b.n	800f862 <__sfputs_r+0x22>
 800f852:	7821      	ldrb	r1, [r4, #0]
 800f854:	003a      	movs	r2, r7
 800f856:	0030      	movs	r0, r6
 800f858:	f7ff ffdd 	bl	800f816 <__sfputc_r>
 800f85c:	3401      	adds	r4, #1
 800f85e:	1c43      	adds	r3, r0, #1
 800f860:	d1f3      	bne.n	800f84a <__sfputs_r+0xa>
 800f862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f864 <_vfiprintf_r>:
 800f864:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f866:	b0a1      	sub	sp, #132	@ 0x84
 800f868:	000f      	movs	r7, r1
 800f86a:	0015      	movs	r5, r2
 800f86c:	001e      	movs	r6, r3
 800f86e:	9003      	str	r0, [sp, #12]
 800f870:	2800      	cmp	r0, #0
 800f872:	d004      	beq.n	800f87e <_vfiprintf_r+0x1a>
 800f874:	6a03      	ldr	r3, [r0, #32]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d101      	bne.n	800f87e <_vfiprintf_r+0x1a>
 800f87a:	f7fe f869 	bl	800d950 <__sinit>
 800f87e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f880:	07db      	lsls	r3, r3, #31
 800f882:	d405      	bmi.n	800f890 <_vfiprintf_r+0x2c>
 800f884:	89bb      	ldrh	r3, [r7, #12]
 800f886:	059b      	lsls	r3, r3, #22
 800f888:	d402      	bmi.n	800f890 <_vfiprintf_r+0x2c>
 800f88a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f88c:	f7fe f993 	bl	800dbb6 <__retarget_lock_acquire_recursive>
 800f890:	89bb      	ldrh	r3, [r7, #12]
 800f892:	071b      	lsls	r3, r3, #28
 800f894:	d502      	bpl.n	800f89c <_vfiprintf_r+0x38>
 800f896:	693b      	ldr	r3, [r7, #16]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d113      	bne.n	800f8c4 <_vfiprintf_r+0x60>
 800f89c:	0039      	movs	r1, r7
 800f89e:	9803      	ldr	r0, [sp, #12]
 800f8a0:	f000 f93e 	bl	800fb20 <__swsetup_r>
 800f8a4:	2800      	cmp	r0, #0
 800f8a6:	d00d      	beq.n	800f8c4 <_vfiprintf_r+0x60>
 800f8a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f8aa:	07db      	lsls	r3, r3, #31
 800f8ac:	d503      	bpl.n	800f8b6 <_vfiprintf_r+0x52>
 800f8ae:	2001      	movs	r0, #1
 800f8b0:	4240      	negs	r0, r0
 800f8b2:	b021      	add	sp, #132	@ 0x84
 800f8b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8b6:	89bb      	ldrh	r3, [r7, #12]
 800f8b8:	059b      	lsls	r3, r3, #22
 800f8ba:	d4f8      	bmi.n	800f8ae <_vfiprintf_r+0x4a>
 800f8bc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f8be:	f7fe f97b 	bl	800dbb8 <__retarget_lock_release_recursive>
 800f8c2:	e7f4      	b.n	800f8ae <_vfiprintf_r+0x4a>
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	ac08      	add	r4, sp, #32
 800f8c8:	6163      	str	r3, [r4, #20]
 800f8ca:	3320      	adds	r3, #32
 800f8cc:	7663      	strb	r3, [r4, #25]
 800f8ce:	3310      	adds	r3, #16
 800f8d0:	76a3      	strb	r3, [r4, #26]
 800f8d2:	9607      	str	r6, [sp, #28]
 800f8d4:	002e      	movs	r6, r5
 800f8d6:	7833      	ldrb	r3, [r6, #0]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d001      	beq.n	800f8e0 <_vfiprintf_r+0x7c>
 800f8dc:	2b25      	cmp	r3, #37	@ 0x25
 800f8de:	d148      	bne.n	800f972 <_vfiprintf_r+0x10e>
 800f8e0:	1b73      	subs	r3, r6, r5
 800f8e2:	9305      	str	r3, [sp, #20]
 800f8e4:	42ae      	cmp	r6, r5
 800f8e6:	d00b      	beq.n	800f900 <_vfiprintf_r+0x9c>
 800f8e8:	002a      	movs	r2, r5
 800f8ea:	0039      	movs	r1, r7
 800f8ec:	9803      	ldr	r0, [sp, #12]
 800f8ee:	f7ff ffa7 	bl	800f840 <__sfputs_r>
 800f8f2:	3001      	adds	r0, #1
 800f8f4:	d100      	bne.n	800f8f8 <_vfiprintf_r+0x94>
 800f8f6:	e0ae      	b.n	800fa56 <_vfiprintf_r+0x1f2>
 800f8f8:	6963      	ldr	r3, [r4, #20]
 800f8fa:	9a05      	ldr	r2, [sp, #20]
 800f8fc:	189b      	adds	r3, r3, r2
 800f8fe:	6163      	str	r3, [r4, #20]
 800f900:	7833      	ldrb	r3, [r6, #0]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d100      	bne.n	800f908 <_vfiprintf_r+0xa4>
 800f906:	e0a6      	b.n	800fa56 <_vfiprintf_r+0x1f2>
 800f908:	2201      	movs	r2, #1
 800f90a:	2300      	movs	r3, #0
 800f90c:	4252      	negs	r2, r2
 800f90e:	6062      	str	r2, [r4, #4]
 800f910:	a904      	add	r1, sp, #16
 800f912:	3254      	adds	r2, #84	@ 0x54
 800f914:	1852      	adds	r2, r2, r1
 800f916:	1c75      	adds	r5, r6, #1
 800f918:	6023      	str	r3, [r4, #0]
 800f91a:	60e3      	str	r3, [r4, #12]
 800f91c:	60a3      	str	r3, [r4, #8]
 800f91e:	7013      	strb	r3, [r2, #0]
 800f920:	65a3      	str	r3, [r4, #88]	@ 0x58
 800f922:	4b59      	ldr	r3, [pc, #356]	@ (800fa88 <_vfiprintf_r+0x224>)
 800f924:	2205      	movs	r2, #5
 800f926:	0018      	movs	r0, r3
 800f928:	7829      	ldrb	r1, [r5, #0]
 800f92a:	9305      	str	r3, [sp, #20]
 800f92c:	f7fe f945 	bl	800dbba <memchr>
 800f930:	1c6e      	adds	r6, r5, #1
 800f932:	2800      	cmp	r0, #0
 800f934:	d11f      	bne.n	800f976 <_vfiprintf_r+0x112>
 800f936:	6822      	ldr	r2, [r4, #0]
 800f938:	06d3      	lsls	r3, r2, #27
 800f93a:	d504      	bpl.n	800f946 <_vfiprintf_r+0xe2>
 800f93c:	2353      	movs	r3, #83	@ 0x53
 800f93e:	a904      	add	r1, sp, #16
 800f940:	185b      	adds	r3, r3, r1
 800f942:	2120      	movs	r1, #32
 800f944:	7019      	strb	r1, [r3, #0]
 800f946:	0713      	lsls	r3, r2, #28
 800f948:	d504      	bpl.n	800f954 <_vfiprintf_r+0xf0>
 800f94a:	2353      	movs	r3, #83	@ 0x53
 800f94c:	a904      	add	r1, sp, #16
 800f94e:	185b      	adds	r3, r3, r1
 800f950:	212b      	movs	r1, #43	@ 0x2b
 800f952:	7019      	strb	r1, [r3, #0]
 800f954:	782b      	ldrb	r3, [r5, #0]
 800f956:	2b2a      	cmp	r3, #42	@ 0x2a
 800f958:	d016      	beq.n	800f988 <_vfiprintf_r+0x124>
 800f95a:	002e      	movs	r6, r5
 800f95c:	2100      	movs	r1, #0
 800f95e:	200a      	movs	r0, #10
 800f960:	68e3      	ldr	r3, [r4, #12]
 800f962:	7832      	ldrb	r2, [r6, #0]
 800f964:	1c75      	adds	r5, r6, #1
 800f966:	3a30      	subs	r2, #48	@ 0x30
 800f968:	2a09      	cmp	r2, #9
 800f96a:	d950      	bls.n	800fa0e <_vfiprintf_r+0x1aa>
 800f96c:	2900      	cmp	r1, #0
 800f96e:	d111      	bne.n	800f994 <_vfiprintf_r+0x130>
 800f970:	e017      	b.n	800f9a2 <_vfiprintf_r+0x13e>
 800f972:	3601      	adds	r6, #1
 800f974:	e7af      	b.n	800f8d6 <_vfiprintf_r+0x72>
 800f976:	9b05      	ldr	r3, [sp, #20]
 800f978:	6822      	ldr	r2, [r4, #0]
 800f97a:	1ac0      	subs	r0, r0, r3
 800f97c:	2301      	movs	r3, #1
 800f97e:	4083      	lsls	r3, r0
 800f980:	4313      	orrs	r3, r2
 800f982:	0035      	movs	r5, r6
 800f984:	6023      	str	r3, [r4, #0]
 800f986:	e7cc      	b.n	800f922 <_vfiprintf_r+0xbe>
 800f988:	9b07      	ldr	r3, [sp, #28]
 800f98a:	1d19      	adds	r1, r3, #4
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	9107      	str	r1, [sp, #28]
 800f990:	2b00      	cmp	r3, #0
 800f992:	db01      	blt.n	800f998 <_vfiprintf_r+0x134>
 800f994:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f996:	e004      	b.n	800f9a2 <_vfiprintf_r+0x13e>
 800f998:	425b      	negs	r3, r3
 800f99a:	60e3      	str	r3, [r4, #12]
 800f99c:	2302      	movs	r3, #2
 800f99e:	4313      	orrs	r3, r2
 800f9a0:	6023      	str	r3, [r4, #0]
 800f9a2:	7833      	ldrb	r3, [r6, #0]
 800f9a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800f9a6:	d10c      	bne.n	800f9c2 <_vfiprintf_r+0x15e>
 800f9a8:	7873      	ldrb	r3, [r6, #1]
 800f9aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9ac:	d134      	bne.n	800fa18 <_vfiprintf_r+0x1b4>
 800f9ae:	9b07      	ldr	r3, [sp, #28]
 800f9b0:	3602      	adds	r6, #2
 800f9b2:	1d1a      	adds	r2, r3, #4
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	9207      	str	r2, [sp, #28]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	da01      	bge.n	800f9c0 <_vfiprintf_r+0x15c>
 800f9bc:	2301      	movs	r3, #1
 800f9be:	425b      	negs	r3, r3
 800f9c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9c2:	4d32      	ldr	r5, [pc, #200]	@ (800fa8c <_vfiprintf_r+0x228>)
 800f9c4:	2203      	movs	r2, #3
 800f9c6:	0028      	movs	r0, r5
 800f9c8:	7831      	ldrb	r1, [r6, #0]
 800f9ca:	f7fe f8f6 	bl	800dbba <memchr>
 800f9ce:	2800      	cmp	r0, #0
 800f9d0:	d006      	beq.n	800f9e0 <_vfiprintf_r+0x17c>
 800f9d2:	2340      	movs	r3, #64	@ 0x40
 800f9d4:	1b40      	subs	r0, r0, r5
 800f9d6:	4083      	lsls	r3, r0
 800f9d8:	6822      	ldr	r2, [r4, #0]
 800f9da:	3601      	adds	r6, #1
 800f9dc:	4313      	orrs	r3, r2
 800f9de:	6023      	str	r3, [r4, #0]
 800f9e0:	7831      	ldrb	r1, [r6, #0]
 800f9e2:	2206      	movs	r2, #6
 800f9e4:	482a      	ldr	r0, [pc, #168]	@ (800fa90 <_vfiprintf_r+0x22c>)
 800f9e6:	1c75      	adds	r5, r6, #1
 800f9e8:	7621      	strb	r1, [r4, #24]
 800f9ea:	f7fe f8e6 	bl	800dbba <memchr>
 800f9ee:	2800      	cmp	r0, #0
 800f9f0:	d040      	beq.n	800fa74 <_vfiprintf_r+0x210>
 800f9f2:	4b28      	ldr	r3, [pc, #160]	@ (800fa94 <_vfiprintf_r+0x230>)
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d122      	bne.n	800fa3e <_vfiprintf_r+0x1da>
 800f9f8:	2207      	movs	r2, #7
 800f9fa:	9b07      	ldr	r3, [sp, #28]
 800f9fc:	3307      	adds	r3, #7
 800f9fe:	4393      	bics	r3, r2
 800fa00:	3308      	adds	r3, #8
 800fa02:	9307      	str	r3, [sp, #28]
 800fa04:	6963      	ldr	r3, [r4, #20]
 800fa06:	9a04      	ldr	r2, [sp, #16]
 800fa08:	189b      	adds	r3, r3, r2
 800fa0a:	6163      	str	r3, [r4, #20]
 800fa0c:	e762      	b.n	800f8d4 <_vfiprintf_r+0x70>
 800fa0e:	4343      	muls	r3, r0
 800fa10:	002e      	movs	r6, r5
 800fa12:	2101      	movs	r1, #1
 800fa14:	189b      	adds	r3, r3, r2
 800fa16:	e7a4      	b.n	800f962 <_vfiprintf_r+0xfe>
 800fa18:	2300      	movs	r3, #0
 800fa1a:	200a      	movs	r0, #10
 800fa1c:	0019      	movs	r1, r3
 800fa1e:	3601      	adds	r6, #1
 800fa20:	6063      	str	r3, [r4, #4]
 800fa22:	7832      	ldrb	r2, [r6, #0]
 800fa24:	1c75      	adds	r5, r6, #1
 800fa26:	3a30      	subs	r2, #48	@ 0x30
 800fa28:	2a09      	cmp	r2, #9
 800fa2a:	d903      	bls.n	800fa34 <_vfiprintf_r+0x1d0>
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d0c8      	beq.n	800f9c2 <_vfiprintf_r+0x15e>
 800fa30:	9109      	str	r1, [sp, #36]	@ 0x24
 800fa32:	e7c6      	b.n	800f9c2 <_vfiprintf_r+0x15e>
 800fa34:	4341      	muls	r1, r0
 800fa36:	002e      	movs	r6, r5
 800fa38:	2301      	movs	r3, #1
 800fa3a:	1889      	adds	r1, r1, r2
 800fa3c:	e7f1      	b.n	800fa22 <_vfiprintf_r+0x1be>
 800fa3e:	aa07      	add	r2, sp, #28
 800fa40:	9200      	str	r2, [sp, #0]
 800fa42:	0021      	movs	r1, r4
 800fa44:	003a      	movs	r2, r7
 800fa46:	4b14      	ldr	r3, [pc, #80]	@ (800fa98 <_vfiprintf_r+0x234>)
 800fa48:	9803      	ldr	r0, [sp, #12]
 800fa4a:	f7fd fb35 	bl	800d0b8 <_printf_float>
 800fa4e:	9004      	str	r0, [sp, #16]
 800fa50:	9b04      	ldr	r3, [sp, #16]
 800fa52:	3301      	adds	r3, #1
 800fa54:	d1d6      	bne.n	800fa04 <_vfiprintf_r+0x1a0>
 800fa56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fa58:	07db      	lsls	r3, r3, #31
 800fa5a:	d405      	bmi.n	800fa68 <_vfiprintf_r+0x204>
 800fa5c:	89bb      	ldrh	r3, [r7, #12]
 800fa5e:	059b      	lsls	r3, r3, #22
 800fa60:	d402      	bmi.n	800fa68 <_vfiprintf_r+0x204>
 800fa62:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fa64:	f7fe f8a8 	bl	800dbb8 <__retarget_lock_release_recursive>
 800fa68:	89bb      	ldrh	r3, [r7, #12]
 800fa6a:	065b      	lsls	r3, r3, #25
 800fa6c:	d500      	bpl.n	800fa70 <_vfiprintf_r+0x20c>
 800fa6e:	e71e      	b.n	800f8ae <_vfiprintf_r+0x4a>
 800fa70:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800fa72:	e71e      	b.n	800f8b2 <_vfiprintf_r+0x4e>
 800fa74:	aa07      	add	r2, sp, #28
 800fa76:	9200      	str	r2, [sp, #0]
 800fa78:	0021      	movs	r1, r4
 800fa7a:	003a      	movs	r2, r7
 800fa7c:	4b06      	ldr	r3, [pc, #24]	@ (800fa98 <_vfiprintf_r+0x234>)
 800fa7e:	9803      	ldr	r0, [sp, #12]
 800fa80:	f7fd fdc8 	bl	800d614 <_printf_i>
 800fa84:	e7e3      	b.n	800fa4e <_vfiprintf_r+0x1ea>
 800fa86:	46c0      	nop			@ (mov r8, r8)
 800fa88:	08010280 	.word	0x08010280
 800fa8c:	08010286 	.word	0x08010286
 800fa90:	0801028a 	.word	0x0801028a
 800fa94:	0800d0b9 	.word	0x0800d0b9
 800fa98:	0800f841 	.word	0x0800f841

0800fa9c <__swbuf_r>:
 800fa9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa9e:	0006      	movs	r6, r0
 800faa0:	000d      	movs	r5, r1
 800faa2:	0014      	movs	r4, r2
 800faa4:	2800      	cmp	r0, #0
 800faa6:	d004      	beq.n	800fab2 <__swbuf_r+0x16>
 800faa8:	6a03      	ldr	r3, [r0, #32]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d101      	bne.n	800fab2 <__swbuf_r+0x16>
 800faae:	f7fd ff4f 	bl	800d950 <__sinit>
 800fab2:	69a3      	ldr	r3, [r4, #24]
 800fab4:	60a3      	str	r3, [r4, #8]
 800fab6:	89a3      	ldrh	r3, [r4, #12]
 800fab8:	071b      	lsls	r3, r3, #28
 800faba:	d502      	bpl.n	800fac2 <__swbuf_r+0x26>
 800fabc:	6923      	ldr	r3, [r4, #16]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d109      	bne.n	800fad6 <__swbuf_r+0x3a>
 800fac2:	0021      	movs	r1, r4
 800fac4:	0030      	movs	r0, r6
 800fac6:	f000 f82b 	bl	800fb20 <__swsetup_r>
 800faca:	2800      	cmp	r0, #0
 800facc:	d003      	beq.n	800fad6 <__swbuf_r+0x3a>
 800face:	2501      	movs	r5, #1
 800fad0:	426d      	negs	r5, r5
 800fad2:	0028      	movs	r0, r5
 800fad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fad6:	6923      	ldr	r3, [r4, #16]
 800fad8:	6820      	ldr	r0, [r4, #0]
 800fada:	b2ef      	uxtb	r7, r5
 800fadc:	1ac0      	subs	r0, r0, r3
 800fade:	6963      	ldr	r3, [r4, #20]
 800fae0:	b2ed      	uxtb	r5, r5
 800fae2:	4283      	cmp	r3, r0
 800fae4:	dc05      	bgt.n	800faf2 <__swbuf_r+0x56>
 800fae6:	0021      	movs	r1, r4
 800fae8:	0030      	movs	r0, r6
 800faea:	f7ff fd8b 	bl	800f604 <_fflush_r>
 800faee:	2800      	cmp	r0, #0
 800faf0:	d1ed      	bne.n	800face <__swbuf_r+0x32>
 800faf2:	68a3      	ldr	r3, [r4, #8]
 800faf4:	3001      	adds	r0, #1
 800faf6:	3b01      	subs	r3, #1
 800faf8:	60a3      	str	r3, [r4, #8]
 800fafa:	6823      	ldr	r3, [r4, #0]
 800fafc:	1c5a      	adds	r2, r3, #1
 800fafe:	6022      	str	r2, [r4, #0]
 800fb00:	701f      	strb	r7, [r3, #0]
 800fb02:	6963      	ldr	r3, [r4, #20]
 800fb04:	4283      	cmp	r3, r0
 800fb06:	d004      	beq.n	800fb12 <__swbuf_r+0x76>
 800fb08:	89a3      	ldrh	r3, [r4, #12]
 800fb0a:	07db      	lsls	r3, r3, #31
 800fb0c:	d5e1      	bpl.n	800fad2 <__swbuf_r+0x36>
 800fb0e:	2d0a      	cmp	r5, #10
 800fb10:	d1df      	bne.n	800fad2 <__swbuf_r+0x36>
 800fb12:	0021      	movs	r1, r4
 800fb14:	0030      	movs	r0, r6
 800fb16:	f7ff fd75 	bl	800f604 <_fflush_r>
 800fb1a:	2800      	cmp	r0, #0
 800fb1c:	d0d9      	beq.n	800fad2 <__swbuf_r+0x36>
 800fb1e:	e7d6      	b.n	800face <__swbuf_r+0x32>

0800fb20 <__swsetup_r>:
 800fb20:	4b2d      	ldr	r3, [pc, #180]	@ (800fbd8 <__swsetup_r+0xb8>)
 800fb22:	b570      	push	{r4, r5, r6, lr}
 800fb24:	0005      	movs	r5, r0
 800fb26:	6818      	ldr	r0, [r3, #0]
 800fb28:	000c      	movs	r4, r1
 800fb2a:	2800      	cmp	r0, #0
 800fb2c:	d004      	beq.n	800fb38 <__swsetup_r+0x18>
 800fb2e:	6a03      	ldr	r3, [r0, #32]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d101      	bne.n	800fb38 <__swsetup_r+0x18>
 800fb34:	f7fd ff0c 	bl	800d950 <__sinit>
 800fb38:	230c      	movs	r3, #12
 800fb3a:	5ee2      	ldrsh	r2, [r4, r3]
 800fb3c:	0713      	lsls	r3, r2, #28
 800fb3e:	d423      	bmi.n	800fb88 <__swsetup_r+0x68>
 800fb40:	06d3      	lsls	r3, r2, #27
 800fb42:	d407      	bmi.n	800fb54 <__swsetup_r+0x34>
 800fb44:	2309      	movs	r3, #9
 800fb46:	602b      	str	r3, [r5, #0]
 800fb48:	2340      	movs	r3, #64	@ 0x40
 800fb4a:	2001      	movs	r0, #1
 800fb4c:	4313      	orrs	r3, r2
 800fb4e:	81a3      	strh	r3, [r4, #12]
 800fb50:	4240      	negs	r0, r0
 800fb52:	e03a      	b.n	800fbca <__swsetup_r+0xaa>
 800fb54:	0752      	lsls	r2, r2, #29
 800fb56:	d513      	bpl.n	800fb80 <__swsetup_r+0x60>
 800fb58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fb5a:	2900      	cmp	r1, #0
 800fb5c:	d008      	beq.n	800fb70 <__swsetup_r+0x50>
 800fb5e:	0023      	movs	r3, r4
 800fb60:	3344      	adds	r3, #68	@ 0x44
 800fb62:	4299      	cmp	r1, r3
 800fb64:	d002      	beq.n	800fb6c <__swsetup_r+0x4c>
 800fb66:	0028      	movs	r0, r5
 800fb68:	f7fe febe 	bl	800e8e8 <_free_r>
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb70:	2224      	movs	r2, #36	@ 0x24
 800fb72:	89a3      	ldrh	r3, [r4, #12]
 800fb74:	4393      	bics	r3, r2
 800fb76:	81a3      	strh	r3, [r4, #12]
 800fb78:	2300      	movs	r3, #0
 800fb7a:	6063      	str	r3, [r4, #4]
 800fb7c:	6923      	ldr	r3, [r4, #16]
 800fb7e:	6023      	str	r3, [r4, #0]
 800fb80:	2308      	movs	r3, #8
 800fb82:	89a2      	ldrh	r2, [r4, #12]
 800fb84:	4313      	orrs	r3, r2
 800fb86:	81a3      	strh	r3, [r4, #12]
 800fb88:	6923      	ldr	r3, [r4, #16]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d10b      	bne.n	800fba6 <__swsetup_r+0x86>
 800fb8e:	21a0      	movs	r1, #160	@ 0xa0
 800fb90:	2280      	movs	r2, #128	@ 0x80
 800fb92:	89a3      	ldrh	r3, [r4, #12]
 800fb94:	0089      	lsls	r1, r1, #2
 800fb96:	0092      	lsls	r2, r2, #2
 800fb98:	400b      	ands	r3, r1
 800fb9a:	4293      	cmp	r3, r2
 800fb9c:	d003      	beq.n	800fba6 <__swsetup_r+0x86>
 800fb9e:	0021      	movs	r1, r4
 800fba0:	0028      	movs	r0, r5
 800fba2:	f000 f88f 	bl	800fcc4 <__smakebuf_r>
 800fba6:	230c      	movs	r3, #12
 800fba8:	5ee2      	ldrsh	r2, [r4, r3]
 800fbaa:	2101      	movs	r1, #1
 800fbac:	0013      	movs	r3, r2
 800fbae:	400b      	ands	r3, r1
 800fbb0:	420a      	tst	r2, r1
 800fbb2:	d00b      	beq.n	800fbcc <__swsetup_r+0xac>
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	60a3      	str	r3, [r4, #8]
 800fbb8:	6963      	ldr	r3, [r4, #20]
 800fbba:	425b      	negs	r3, r3
 800fbbc:	61a3      	str	r3, [r4, #24]
 800fbbe:	2000      	movs	r0, #0
 800fbc0:	6923      	ldr	r3, [r4, #16]
 800fbc2:	4283      	cmp	r3, r0
 800fbc4:	d101      	bne.n	800fbca <__swsetup_r+0xaa>
 800fbc6:	0613      	lsls	r3, r2, #24
 800fbc8:	d4be      	bmi.n	800fb48 <__swsetup_r+0x28>
 800fbca:	bd70      	pop	{r4, r5, r6, pc}
 800fbcc:	0791      	lsls	r1, r2, #30
 800fbce:	d400      	bmi.n	800fbd2 <__swsetup_r+0xb2>
 800fbd0:	6963      	ldr	r3, [r4, #20]
 800fbd2:	60a3      	str	r3, [r4, #8]
 800fbd4:	e7f3      	b.n	800fbbe <__swsetup_r+0x9e>
 800fbd6:	46c0      	nop			@ (mov r8, r8)
 800fbd8:	200001a0 	.word	0x200001a0

0800fbdc <_raise_r>:
 800fbdc:	b570      	push	{r4, r5, r6, lr}
 800fbde:	0004      	movs	r4, r0
 800fbe0:	000d      	movs	r5, r1
 800fbe2:	291f      	cmp	r1, #31
 800fbe4:	d904      	bls.n	800fbf0 <_raise_r+0x14>
 800fbe6:	2316      	movs	r3, #22
 800fbe8:	6003      	str	r3, [r0, #0]
 800fbea:	2001      	movs	r0, #1
 800fbec:	4240      	negs	r0, r0
 800fbee:	bd70      	pop	{r4, r5, r6, pc}
 800fbf0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d004      	beq.n	800fc00 <_raise_r+0x24>
 800fbf6:	008a      	lsls	r2, r1, #2
 800fbf8:	189b      	adds	r3, r3, r2
 800fbfa:	681a      	ldr	r2, [r3, #0]
 800fbfc:	2a00      	cmp	r2, #0
 800fbfe:	d108      	bne.n	800fc12 <_raise_r+0x36>
 800fc00:	0020      	movs	r0, r4
 800fc02:	f000 f831 	bl	800fc68 <_getpid_r>
 800fc06:	002a      	movs	r2, r5
 800fc08:	0001      	movs	r1, r0
 800fc0a:	0020      	movs	r0, r4
 800fc0c:	f000 f81a 	bl	800fc44 <_kill_r>
 800fc10:	e7ed      	b.n	800fbee <_raise_r+0x12>
 800fc12:	2a01      	cmp	r2, #1
 800fc14:	d009      	beq.n	800fc2a <_raise_r+0x4e>
 800fc16:	1c51      	adds	r1, r2, #1
 800fc18:	d103      	bne.n	800fc22 <_raise_r+0x46>
 800fc1a:	2316      	movs	r3, #22
 800fc1c:	6003      	str	r3, [r0, #0]
 800fc1e:	2001      	movs	r0, #1
 800fc20:	e7e5      	b.n	800fbee <_raise_r+0x12>
 800fc22:	2100      	movs	r1, #0
 800fc24:	0028      	movs	r0, r5
 800fc26:	6019      	str	r1, [r3, #0]
 800fc28:	4790      	blx	r2
 800fc2a:	2000      	movs	r0, #0
 800fc2c:	e7df      	b.n	800fbee <_raise_r+0x12>
	...

0800fc30 <raise>:
 800fc30:	b510      	push	{r4, lr}
 800fc32:	4b03      	ldr	r3, [pc, #12]	@ (800fc40 <raise+0x10>)
 800fc34:	0001      	movs	r1, r0
 800fc36:	6818      	ldr	r0, [r3, #0]
 800fc38:	f7ff ffd0 	bl	800fbdc <_raise_r>
 800fc3c:	bd10      	pop	{r4, pc}
 800fc3e:	46c0      	nop			@ (mov r8, r8)
 800fc40:	200001a0 	.word	0x200001a0

0800fc44 <_kill_r>:
 800fc44:	2300      	movs	r3, #0
 800fc46:	b570      	push	{r4, r5, r6, lr}
 800fc48:	4d06      	ldr	r5, [pc, #24]	@ (800fc64 <_kill_r+0x20>)
 800fc4a:	0004      	movs	r4, r0
 800fc4c:	0008      	movs	r0, r1
 800fc4e:	0011      	movs	r1, r2
 800fc50:	602b      	str	r3, [r5, #0]
 800fc52:	f7f3 f9b5 	bl	8002fc0 <_kill>
 800fc56:	1c43      	adds	r3, r0, #1
 800fc58:	d103      	bne.n	800fc62 <_kill_r+0x1e>
 800fc5a:	682b      	ldr	r3, [r5, #0]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d000      	beq.n	800fc62 <_kill_r+0x1e>
 800fc60:	6023      	str	r3, [r4, #0]
 800fc62:	bd70      	pop	{r4, r5, r6, pc}
 800fc64:	20001cd8 	.word	0x20001cd8

0800fc68 <_getpid_r>:
 800fc68:	b510      	push	{r4, lr}
 800fc6a:	f7f3 f9a3 	bl	8002fb4 <_getpid>
 800fc6e:	bd10      	pop	{r4, pc}

0800fc70 <__swhatbuf_r>:
 800fc70:	b570      	push	{r4, r5, r6, lr}
 800fc72:	000e      	movs	r6, r1
 800fc74:	001d      	movs	r5, r3
 800fc76:	230e      	movs	r3, #14
 800fc78:	5ec9      	ldrsh	r1, [r1, r3]
 800fc7a:	0014      	movs	r4, r2
 800fc7c:	b096      	sub	sp, #88	@ 0x58
 800fc7e:	2900      	cmp	r1, #0
 800fc80:	da0c      	bge.n	800fc9c <__swhatbuf_r+0x2c>
 800fc82:	89b2      	ldrh	r2, [r6, #12]
 800fc84:	2380      	movs	r3, #128	@ 0x80
 800fc86:	0011      	movs	r1, r2
 800fc88:	4019      	ands	r1, r3
 800fc8a:	421a      	tst	r2, r3
 800fc8c:	d114      	bne.n	800fcb8 <__swhatbuf_r+0x48>
 800fc8e:	2380      	movs	r3, #128	@ 0x80
 800fc90:	00db      	lsls	r3, r3, #3
 800fc92:	2000      	movs	r0, #0
 800fc94:	6029      	str	r1, [r5, #0]
 800fc96:	6023      	str	r3, [r4, #0]
 800fc98:	b016      	add	sp, #88	@ 0x58
 800fc9a:	bd70      	pop	{r4, r5, r6, pc}
 800fc9c:	466a      	mov	r2, sp
 800fc9e:	f000 f853 	bl	800fd48 <_fstat_r>
 800fca2:	2800      	cmp	r0, #0
 800fca4:	dbed      	blt.n	800fc82 <__swhatbuf_r+0x12>
 800fca6:	23f0      	movs	r3, #240	@ 0xf0
 800fca8:	9901      	ldr	r1, [sp, #4]
 800fcaa:	021b      	lsls	r3, r3, #8
 800fcac:	4019      	ands	r1, r3
 800fcae:	4b04      	ldr	r3, [pc, #16]	@ (800fcc0 <__swhatbuf_r+0x50>)
 800fcb0:	18c9      	adds	r1, r1, r3
 800fcb2:	424b      	negs	r3, r1
 800fcb4:	4159      	adcs	r1, r3
 800fcb6:	e7ea      	b.n	800fc8e <__swhatbuf_r+0x1e>
 800fcb8:	2100      	movs	r1, #0
 800fcba:	2340      	movs	r3, #64	@ 0x40
 800fcbc:	e7e9      	b.n	800fc92 <__swhatbuf_r+0x22>
 800fcbe:	46c0      	nop			@ (mov r8, r8)
 800fcc0:	ffffe000 	.word	0xffffe000

0800fcc4 <__smakebuf_r>:
 800fcc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcc6:	2602      	movs	r6, #2
 800fcc8:	898b      	ldrh	r3, [r1, #12]
 800fcca:	0005      	movs	r5, r0
 800fccc:	000c      	movs	r4, r1
 800fcce:	b085      	sub	sp, #20
 800fcd0:	4233      	tst	r3, r6
 800fcd2:	d007      	beq.n	800fce4 <__smakebuf_r+0x20>
 800fcd4:	0023      	movs	r3, r4
 800fcd6:	3347      	adds	r3, #71	@ 0x47
 800fcd8:	6023      	str	r3, [r4, #0]
 800fcda:	6123      	str	r3, [r4, #16]
 800fcdc:	2301      	movs	r3, #1
 800fcde:	6163      	str	r3, [r4, #20]
 800fce0:	b005      	add	sp, #20
 800fce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fce4:	ab03      	add	r3, sp, #12
 800fce6:	aa02      	add	r2, sp, #8
 800fce8:	f7ff ffc2 	bl	800fc70 <__swhatbuf_r>
 800fcec:	9f02      	ldr	r7, [sp, #8]
 800fcee:	9001      	str	r0, [sp, #4]
 800fcf0:	0039      	movs	r1, r7
 800fcf2:	0028      	movs	r0, r5
 800fcf4:	f7fe fe6e 	bl	800e9d4 <_malloc_r>
 800fcf8:	2800      	cmp	r0, #0
 800fcfa:	d108      	bne.n	800fd0e <__smakebuf_r+0x4a>
 800fcfc:	220c      	movs	r2, #12
 800fcfe:	5ea3      	ldrsh	r3, [r4, r2]
 800fd00:	059a      	lsls	r2, r3, #22
 800fd02:	d4ed      	bmi.n	800fce0 <__smakebuf_r+0x1c>
 800fd04:	2203      	movs	r2, #3
 800fd06:	4393      	bics	r3, r2
 800fd08:	431e      	orrs	r6, r3
 800fd0a:	81a6      	strh	r6, [r4, #12]
 800fd0c:	e7e2      	b.n	800fcd4 <__smakebuf_r+0x10>
 800fd0e:	2380      	movs	r3, #128	@ 0x80
 800fd10:	89a2      	ldrh	r2, [r4, #12]
 800fd12:	6020      	str	r0, [r4, #0]
 800fd14:	4313      	orrs	r3, r2
 800fd16:	81a3      	strh	r3, [r4, #12]
 800fd18:	9b03      	ldr	r3, [sp, #12]
 800fd1a:	6120      	str	r0, [r4, #16]
 800fd1c:	6167      	str	r7, [r4, #20]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d00c      	beq.n	800fd3c <__smakebuf_r+0x78>
 800fd22:	0028      	movs	r0, r5
 800fd24:	230e      	movs	r3, #14
 800fd26:	5ee1      	ldrsh	r1, [r4, r3]
 800fd28:	f000 f820 	bl	800fd6c <_isatty_r>
 800fd2c:	2800      	cmp	r0, #0
 800fd2e:	d005      	beq.n	800fd3c <__smakebuf_r+0x78>
 800fd30:	2303      	movs	r3, #3
 800fd32:	89a2      	ldrh	r2, [r4, #12]
 800fd34:	439a      	bics	r2, r3
 800fd36:	3b02      	subs	r3, #2
 800fd38:	4313      	orrs	r3, r2
 800fd3a:	81a3      	strh	r3, [r4, #12]
 800fd3c:	89a3      	ldrh	r3, [r4, #12]
 800fd3e:	9a01      	ldr	r2, [sp, #4]
 800fd40:	4313      	orrs	r3, r2
 800fd42:	81a3      	strh	r3, [r4, #12]
 800fd44:	e7cc      	b.n	800fce0 <__smakebuf_r+0x1c>
	...

0800fd48 <_fstat_r>:
 800fd48:	2300      	movs	r3, #0
 800fd4a:	b570      	push	{r4, r5, r6, lr}
 800fd4c:	4d06      	ldr	r5, [pc, #24]	@ (800fd68 <_fstat_r+0x20>)
 800fd4e:	0004      	movs	r4, r0
 800fd50:	0008      	movs	r0, r1
 800fd52:	0011      	movs	r1, r2
 800fd54:	602b      	str	r3, [r5, #0]
 800fd56:	f7f3 f993 	bl	8003080 <_fstat>
 800fd5a:	1c43      	adds	r3, r0, #1
 800fd5c:	d103      	bne.n	800fd66 <_fstat_r+0x1e>
 800fd5e:	682b      	ldr	r3, [r5, #0]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d000      	beq.n	800fd66 <_fstat_r+0x1e>
 800fd64:	6023      	str	r3, [r4, #0]
 800fd66:	bd70      	pop	{r4, r5, r6, pc}
 800fd68:	20001cd8 	.word	0x20001cd8

0800fd6c <_isatty_r>:
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	b570      	push	{r4, r5, r6, lr}
 800fd70:	4d06      	ldr	r5, [pc, #24]	@ (800fd8c <_isatty_r+0x20>)
 800fd72:	0004      	movs	r4, r0
 800fd74:	0008      	movs	r0, r1
 800fd76:	602b      	str	r3, [r5, #0]
 800fd78:	f7f3 f990 	bl	800309c <_isatty>
 800fd7c:	1c43      	adds	r3, r0, #1
 800fd7e:	d103      	bne.n	800fd88 <_isatty_r+0x1c>
 800fd80:	682b      	ldr	r3, [r5, #0]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d000      	beq.n	800fd88 <_isatty_r+0x1c>
 800fd86:	6023      	str	r3, [r4, #0]
 800fd88:	bd70      	pop	{r4, r5, r6, pc}
 800fd8a:	46c0      	nop			@ (mov r8, r8)
 800fd8c:	20001cd8 	.word	0x20001cd8

0800fd90 <_init>:
 800fd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd92:	46c0      	nop			@ (mov r8, r8)
 800fd94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd96:	bc08      	pop	{r3}
 800fd98:	469e      	mov	lr, r3
 800fd9a:	4770      	bx	lr

0800fd9c <_fini>:
 800fd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd9e:	46c0      	nop			@ (mov r8, r8)
 800fda0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fda2:	bc08      	pop	{r3}
 800fda4:	469e      	mov	lr, r3
 800fda6:	4770      	bx	lr
