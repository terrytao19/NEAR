
NEAR_ANCHOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016538  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ce8  080165f8  080165f8  000175f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a2e0  0801a2e0  0001c3d8  2**0
                  CONTENTS
  4 .ARM          00000000  0801a2e0  0801a2e0  0001c3d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801a2e0  0801a2e0  0001c3d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a2e0  0801a2e0  0001b2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a2e4  0801a2e4  0001b2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003d8  20000000  0801a2e8  0001c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bd0  200003d8  0801a6c0  0001c3d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001fa8  0801a6c0  0001cfa8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001c3d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023a78  00000000  00000000  0001c400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055ed  00000000  00000000  0003fe78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002028  00000000  00000000  00045468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018f3  00000000  00000000  00047490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f39  00000000  00000000  00048d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029505  00000000  00000000  0006ccbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0cac  00000000  00000000  000961c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00146e6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008720  00000000  00000000  00146eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0014f5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000103  00000000  00000000  0014f623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200003d8 	.word	0x200003d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080165e0 	.word	0x080165e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200003dc 	.word	0x200003dc
 8000104:	080165e0 	.word	0x080165e0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fa77 	bl	8001930 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f9b7 	bl	80017c0 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa69 	bl	8001930 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa5f 	bl	8001930 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f9e1 	bl	8001848 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f9d7 	bl	8001848 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f002 f92f 	bl	8002720 <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fd6a 	bl	8001fa4 <__aeabi_dsub>
 80004d0:	f002 f926 	bl	8002720 <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	@ 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	2200      	movs	r2, #0
 80004e8:	2300      	movs	r3, #0
 80004ea:	0004      	movs	r4, r0
 80004ec:	000d      	movs	r5, r1
 80004ee:	f7ff ffb3 	bl	8000458 <__aeabi_dcmplt>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d108      	bne.n	8000508 <__aeabi_d2lz+0x24>
 80004f6:	0020      	movs	r0, r4
 80004f8:	0029      	movs	r1, r5
 80004fa:	f000 f80f 	bl	800051c <__aeabi_d2ulz>
 80004fe:	0002      	movs	r2, r0
 8000500:	000b      	movs	r3, r1
 8000502:	0010      	movs	r0, r2
 8000504:	0019      	movs	r1, r3
 8000506:	bd70      	pop	{r4, r5, r6, pc}
 8000508:	2380      	movs	r3, #128	@ 0x80
 800050a:	061b      	lsls	r3, r3, #24
 800050c:	18e9      	adds	r1, r5, r3
 800050e:	0020      	movs	r0, r4
 8000510:	f000 f804 	bl	800051c <__aeabi_d2ulz>
 8000514:	2300      	movs	r3, #0
 8000516:	4242      	negs	r2, r0
 8000518:	418b      	sbcs	r3, r1
 800051a:	e7f2      	b.n	8000502 <__aeabi_d2lz+0x1e>

0800051c <__aeabi_d2ulz>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	2200      	movs	r2, #0
 8000520:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <__aeabi_d2ulz+0x34>)
 8000522:	000d      	movs	r5, r1
 8000524:	0004      	movs	r4, r0
 8000526:	f001 fa75 	bl	8001a14 <__aeabi_dmul>
 800052a:	f7ff ffbd 	bl	80004a8 <__aeabi_d2uiz>
 800052e:	0006      	movs	r6, r0
 8000530:	f002 f960 	bl	80027f4 <__aeabi_ui2d>
 8000534:	2200      	movs	r2, #0
 8000536:	4b07      	ldr	r3, [pc, #28]	@ (8000554 <__aeabi_d2ulz+0x38>)
 8000538:	f001 fa6c 	bl	8001a14 <__aeabi_dmul>
 800053c:	0002      	movs	r2, r0
 800053e:	000b      	movs	r3, r1
 8000540:	0020      	movs	r0, r4
 8000542:	0029      	movs	r1, r5
 8000544:	f001 fd2e 	bl	8001fa4 <__aeabi_dsub>
 8000548:	f7ff ffae 	bl	80004a8 <__aeabi_d2uiz>
 800054c:	0031      	movs	r1, r6
 800054e:	bd70      	pop	{r4, r5, r6, pc}
 8000550:	3df00000 	.word	0x3df00000
 8000554:	41f00000 	.word	0x41f00000

08000558 <__aeabi_l2d>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	0006      	movs	r6, r0
 800055c:	0008      	movs	r0, r1
 800055e:	f002 f91b 	bl	8002798 <__aeabi_i2d>
 8000562:	2200      	movs	r2, #0
 8000564:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <__aeabi_l2d+0x28>)
 8000566:	f001 fa55 	bl	8001a14 <__aeabi_dmul>
 800056a:	000d      	movs	r5, r1
 800056c:	0004      	movs	r4, r0
 800056e:	0030      	movs	r0, r6
 8000570:	f002 f940 	bl	80027f4 <__aeabi_ui2d>
 8000574:	002b      	movs	r3, r5
 8000576:	0022      	movs	r2, r4
 8000578:	f000 faa4 	bl	8000ac4 <__aeabi_dadd>
 800057c:	bd70      	pop	{r4, r5, r6, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)
 8000580:	41f00000 	.word	0x41f00000

08000584 <__aeabi_fdiv>:
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	464f      	mov	r7, r9
 8000588:	4646      	mov	r6, r8
 800058a:	46d6      	mov	lr, sl
 800058c:	0244      	lsls	r4, r0, #9
 800058e:	b5c0      	push	{r6, r7, lr}
 8000590:	0047      	lsls	r7, r0, #1
 8000592:	1c0e      	adds	r6, r1, #0
 8000594:	0a64      	lsrs	r4, r4, #9
 8000596:	0e3f      	lsrs	r7, r7, #24
 8000598:	0fc5      	lsrs	r5, r0, #31
 800059a:	2f00      	cmp	r7, #0
 800059c:	d03c      	beq.n	8000618 <__aeabi_fdiv+0x94>
 800059e:	2fff      	cmp	r7, #255	@ 0xff
 80005a0:	d042      	beq.n	8000628 <__aeabi_fdiv+0xa4>
 80005a2:	2300      	movs	r3, #0
 80005a4:	2280      	movs	r2, #128	@ 0x80
 80005a6:	4699      	mov	r9, r3
 80005a8:	469a      	mov	sl, r3
 80005aa:	00e4      	lsls	r4, r4, #3
 80005ac:	04d2      	lsls	r2, r2, #19
 80005ae:	4314      	orrs	r4, r2
 80005b0:	3f7f      	subs	r7, #127	@ 0x7f
 80005b2:	0273      	lsls	r3, r6, #9
 80005b4:	0a5b      	lsrs	r3, r3, #9
 80005b6:	4698      	mov	r8, r3
 80005b8:	0073      	lsls	r3, r6, #1
 80005ba:	0e1b      	lsrs	r3, r3, #24
 80005bc:	0ff6      	lsrs	r6, r6, #31
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d01b      	beq.n	80005fa <__aeabi_fdiv+0x76>
 80005c2:	2bff      	cmp	r3, #255	@ 0xff
 80005c4:	d013      	beq.n	80005ee <__aeabi_fdiv+0x6a>
 80005c6:	4642      	mov	r2, r8
 80005c8:	2180      	movs	r1, #128	@ 0x80
 80005ca:	00d2      	lsls	r2, r2, #3
 80005cc:	04c9      	lsls	r1, r1, #19
 80005ce:	4311      	orrs	r1, r2
 80005d0:	4688      	mov	r8, r1
 80005d2:	2000      	movs	r0, #0
 80005d4:	3b7f      	subs	r3, #127	@ 0x7f
 80005d6:	0029      	movs	r1, r5
 80005d8:	1aff      	subs	r7, r7, r3
 80005da:	464b      	mov	r3, r9
 80005dc:	4071      	eors	r1, r6
 80005de:	b2c9      	uxtb	r1, r1
 80005e0:	2b0f      	cmp	r3, #15
 80005e2:	d900      	bls.n	80005e6 <__aeabi_fdiv+0x62>
 80005e4:	e0b5      	b.n	8000752 <__aeabi_fdiv+0x1ce>
 80005e6:	4a74      	ldr	r2, [pc, #464]	@ (80007b8 <__aeabi_fdiv+0x234>)
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	58d3      	ldr	r3, [r2, r3]
 80005ec:	469f      	mov	pc, r3
 80005ee:	4643      	mov	r3, r8
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d13f      	bne.n	8000674 <__aeabi_fdiv+0xf0>
 80005f4:	3fff      	subs	r7, #255	@ 0xff
 80005f6:	3302      	adds	r3, #2
 80005f8:	e003      	b.n	8000602 <__aeabi_fdiv+0x7e>
 80005fa:	4643      	mov	r3, r8
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d12d      	bne.n	800065c <__aeabi_fdiv+0xd8>
 8000600:	2301      	movs	r3, #1
 8000602:	0029      	movs	r1, r5
 8000604:	464a      	mov	r2, r9
 8000606:	4071      	eors	r1, r6
 8000608:	b2c9      	uxtb	r1, r1
 800060a:	431a      	orrs	r2, r3
 800060c:	2a0e      	cmp	r2, #14
 800060e:	d838      	bhi.n	8000682 <__aeabi_fdiv+0xfe>
 8000610:	486a      	ldr	r0, [pc, #424]	@ (80007bc <__aeabi_fdiv+0x238>)
 8000612:	0092      	lsls	r2, r2, #2
 8000614:	5882      	ldr	r2, [r0, r2]
 8000616:	4697      	mov	pc, r2
 8000618:	2c00      	cmp	r4, #0
 800061a:	d113      	bne.n	8000644 <__aeabi_fdiv+0xc0>
 800061c:	2304      	movs	r3, #4
 800061e:	4699      	mov	r9, r3
 8000620:	3b03      	subs	r3, #3
 8000622:	2700      	movs	r7, #0
 8000624:	469a      	mov	sl, r3
 8000626:	e7c4      	b.n	80005b2 <__aeabi_fdiv+0x2e>
 8000628:	2c00      	cmp	r4, #0
 800062a:	d105      	bne.n	8000638 <__aeabi_fdiv+0xb4>
 800062c:	2308      	movs	r3, #8
 800062e:	4699      	mov	r9, r3
 8000630:	3b06      	subs	r3, #6
 8000632:	27ff      	movs	r7, #255	@ 0xff
 8000634:	469a      	mov	sl, r3
 8000636:	e7bc      	b.n	80005b2 <__aeabi_fdiv+0x2e>
 8000638:	230c      	movs	r3, #12
 800063a:	4699      	mov	r9, r3
 800063c:	3b09      	subs	r3, #9
 800063e:	27ff      	movs	r7, #255	@ 0xff
 8000640:	469a      	mov	sl, r3
 8000642:	e7b6      	b.n	80005b2 <__aeabi_fdiv+0x2e>
 8000644:	0020      	movs	r0, r4
 8000646:	f002 f941 	bl	80028cc <__clzsi2>
 800064a:	2776      	movs	r7, #118	@ 0x76
 800064c:	1f43      	subs	r3, r0, #5
 800064e:	409c      	lsls	r4, r3
 8000650:	2300      	movs	r3, #0
 8000652:	427f      	negs	r7, r7
 8000654:	4699      	mov	r9, r3
 8000656:	469a      	mov	sl, r3
 8000658:	1a3f      	subs	r7, r7, r0
 800065a:	e7aa      	b.n	80005b2 <__aeabi_fdiv+0x2e>
 800065c:	4640      	mov	r0, r8
 800065e:	f002 f935 	bl	80028cc <__clzsi2>
 8000662:	4642      	mov	r2, r8
 8000664:	1f43      	subs	r3, r0, #5
 8000666:	409a      	lsls	r2, r3
 8000668:	2376      	movs	r3, #118	@ 0x76
 800066a:	425b      	negs	r3, r3
 800066c:	1a1b      	subs	r3, r3, r0
 800066e:	4690      	mov	r8, r2
 8000670:	2000      	movs	r0, #0
 8000672:	e7b0      	b.n	80005d6 <__aeabi_fdiv+0x52>
 8000674:	2303      	movs	r3, #3
 8000676:	464a      	mov	r2, r9
 8000678:	431a      	orrs	r2, r3
 800067a:	4691      	mov	r9, r2
 800067c:	2003      	movs	r0, #3
 800067e:	33fc      	adds	r3, #252	@ 0xfc
 8000680:	e7a9      	b.n	80005d6 <__aeabi_fdiv+0x52>
 8000682:	000d      	movs	r5, r1
 8000684:	20ff      	movs	r0, #255	@ 0xff
 8000686:	2200      	movs	r2, #0
 8000688:	05c0      	lsls	r0, r0, #23
 800068a:	07ed      	lsls	r5, r5, #31
 800068c:	4310      	orrs	r0, r2
 800068e:	4328      	orrs	r0, r5
 8000690:	bce0      	pop	{r5, r6, r7}
 8000692:	46ba      	mov	sl, r7
 8000694:	46b1      	mov	r9, r6
 8000696:	46a8      	mov	r8, r5
 8000698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800069a:	000d      	movs	r5, r1
 800069c:	2000      	movs	r0, #0
 800069e:	2200      	movs	r2, #0
 80006a0:	e7f2      	b.n	8000688 <__aeabi_fdiv+0x104>
 80006a2:	4653      	mov	r3, sl
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	d0ed      	beq.n	8000684 <__aeabi_fdiv+0x100>
 80006a8:	2b03      	cmp	r3, #3
 80006aa:	d033      	beq.n	8000714 <__aeabi_fdiv+0x190>
 80006ac:	46a0      	mov	r8, r4
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d105      	bne.n	80006be <__aeabi_fdiv+0x13a>
 80006b2:	2000      	movs	r0, #0
 80006b4:	2200      	movs	r2, #0
 80006b6:	e7e7      	b.n	8000688 <__aeabi_fdiv+0x104>
 80006b8:	0035      	movs	r5, r6
 80006ba:	2803      	cmp	r0, #3
 80006bc:	d07a      	beq.n	80007b4 <__aeabi_fdiv+0x230>
 80006be:	003b      	movs	r3, r7
 80006c0:	337f      	adds	r3, #127	@ 0x7f
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	dd2d      	ble.n	8000722 <__aeabi_fdiv+0x19e>
 80006c6:	4642      	mov	r2, r8
 80006c8:	0752      	lsls	r2, r2, #29
 80006ca:	d007      	beq.n	80006dc <__aeabi_fdiv+0x158>
 80006cc:	220f      	movs	r2, #15
 80006ce:	4641      	mov	r1, r8
 80006d0:	400a      	ands	r2, r1
 80006d2:	2a04      	cmp	r2, #4
 80006d4:	d002      	beq.n	80006dc <__aeabi_fdiv+0x158>
 80006d6:	2204      	movs	r2, #4
 80006d8:	4694      	mov	ip, r2
 80006da:	44e0      	add	r8, ip
 80006dc:	4642      	mov	r2, r8
 80006de:	0112      	lsls	r2, r2, #4
 80006e0:	d505      	bpl.n	80006ee <__aeabi_fdiv+0x16a>
 80006e2:	4642      	mov	r2, r8
 80006e4:	4b36      	ldr	r3, [pc, #216]	@ (80007c0 <__aeabi_fdiv+0x23c>)
 80006e6:	401a      	ands	r2, r3
 80006e8:	003b      	movs	r3, r7
 80006ea:	4690      	mov	r8, r2
 80006ec:	3380      	adds	r3, #128	@ 0x80
 80006ee:	2bfe      	cmp	r3, #254	@ 0xfe
 80006f0:	dcc8      	bgt.n	8000684 <__aeabi_fdiv+0x100>
 80006f2:	4642      	mov	r2, r8
 80006f4:	0192      	lsls	r2, r2, #6
 80006f6:	0a52      	lsrs	r2, r2, #9
 80006f8:	b2d8      	uxtb	r0, r3
 80006fa:	e7c5      	b.n	8000688 <__aeabi_fdiv+0x104>
 80006fc:	2280      	movs	r2, #128	@ 0x80
 80006fe:	2500      	movs	r5, #0
 8000700:	20ff      	movs	r0, #255	@ 0xff
 8000702:	03d2      	lsls	r2, r2, #15
 8000704:	e7c0      	b.n	8000688 <__aeabi_fdiv+0x104>
 8000706:	2280      	movs	r2, #128	@ 0x80
 8000708:	03d2      	lsls	r2, r2, #15
 800070a:	4214      	tst	r4, r2
 800070c:	d002      	beq.n	8000714 <__aeabi_fdiv+0x190>
 800070e:	4643      	mov	r3, r8
 8000710:	4213      	tst	r3, r2
 8000712:	d049      	beq.n	80007a8 <__aeabi_fdiv+0x224>
 8000714:	2280      	movs	r2, #128	@ 0x80
 8000716:	03d2      	lsls	r2, r2, #15
 8000718:	4322      	orrs	r2, r4
 800071a:	0252      	lsls	r2, r2, #9
 800071c:	20ff      	movs	r0, #255	@ 0xff
 800071e:	0a52      	lsrs	r2, r2, #9
 8000720:	e7b2      	b.n	8000688 <__aeabi_fdiv+0x104>
 8000722:	2201      	movs	r2, #1
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	2b1b      	cmp	r3, #27
 8000728:	dcc3      	bgt.n	80006b2 <__aeabi_fdiv+0x12e>
 800072a:	4642      	mov	r2, r8
 800072c:	40da      	lsrs	r2, r3
 800072e:	4643      	mov	r3, r8
 8000730:	379e      	adds	r7, #158	@ 0x9e
 8000732:	40bb      	lsls	r3, r7
 8000734:	1e59      	subs	r1, r3, #1
 8000736:	418b      	sbcs	r3, r1
 8000738:	431a      	orrs	r2, r3
 800073a:	0753      	lsls	r3, r2, #29
 800073c:	d004      	beq.n	8000748 <__aeabi_fdiv+0x1c4>
 800073e:	230f      	movs	r3, #15
 8000740:	4013      	ands	r3, r2
 8000742:	2b04      	cmp	r3, #4
 8000744:	d000      	beq.n	8000748 <__aeabi_fdiv+0x1c4>
 8000746:	3204      	adds	r2, #4
 8000748:	0153      	lsls	r3, r2, #5
 800074a:	d529      	bpl.n	80007a0 <__aeabi_fdiv+0x21c>
 800074c:	2001      	movs	r0, #1
 800074e:	2200      	movs	r2, #0
 8000750:	e79a      	b.n	8000688 <__aeabi_fdiv+0x104>
 8000752:	4642      	mov	r2, r8
 8000754:	0163      	lsls	r3, r4, #5
 8000756:	0155      	lsls	r5, r2, #5
 8000758:	42ab      	cmp	r3, r5
 800075a:	d215      	bcs.n	8000788 <__aeabi_fdiv+0x204>
 800075c:	201b      	movs	r0, #27
 800075e:	2200      	movs	r2, #0
 8000760:	3f01      	subs	r7, #1
 8000762:	2601      	movs	r6, #1
 8000764:	001c      	movs	r4, r3
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	2c00      	cmp	r4, #0
 800076c:	db01      	blt.n	8000772 <__aeabi_fdiv+0x1ee>
 800076e:	429d      	cmp	r5, r3
 8000770:	d801      	bhi.n	8000776 <__aeabi_fdiv+0x1f2>
 8000772:	1b5b      	subs	r3, r3, r5
 8000774:	4332      	orrs	r2, r6
 8000776:	3801      	subs	r0, #1
 8000778:	2800      	cmp	r0, #0
 800077a:	d1f3      	bne.n	8000764 <__aeabi_fdiv+0x1e0>
 800077c:	1e58      	subs	r0, r3, #1
 800077e:	4183      	sbcs	r3, r0
 8000780:	4313      	orrs	r3, r2
 8000782:	4698      	mov	r8, r3
 8000784:	000d      	movs	r5, r1
 8000786:	e79a      	b.n	80006be <__aeabi_fdiv+0x13a>
 8000788:	201a      	movs	r0, #26
 800078a:	2201      	movs	r2, #1
 800078c:	1b5b      	subs	r3, r3, r5
 800078e:	e7e8      	b.n	8000762 <__aeabi_fdiv+0x1de>
 8000790:	3b02      	subs	r3, #2
 8000792:	425a      	negs	r2, r3
 8000794:	4153      	adcs	r3, r2
 8000796:	425b      	negs	r3, r3
 8000798:	0035      	movs	r5, r6
 800079a:	2200      	movs	r2, #0
 800079c:	b2d8      	uxtb	r0, r3
 800079e:	e773      	b.n	8000688 <__aeabi_fdiv+0x104>
 80007a0:	0192      	lsls	r2, r2, #6
 80007a2:	2000      	movs	r0, #0
 80007a4:	0a52      	lsrs	r2, r2, #9
 80007a6:	e76f      	b.n	8000688 <__aeabi_fdiv+0x104>
 80007a8:	431a      	orrs	r2, r3
 80007aa:	0252      	lsls	r2, r2, #9
 80007ac:	0035      	movs	r5, r6
 80007ae:	20ff      	movs	r0, #255	@ 0xff
 80007b0:	0a52      	lsrs	r2, r2, #9
 80007b2:	e769      	b.n	8000688 <__aeabi_fdiv+0x104>
 80007b4:	4644      	mov	r4, r8
 80007b6:	e7ad      	b.n	8000714 <__aeabi_fdiv+0x190>
 80007b8:	0801678c 	.word	0x0801678c
 80007bc:	080167cc 	.word	0x080167cc
 80007c0:	f7ffffff 	.word	0xf7ffffff

080007c4 <__aeabi_fmul>:
 80007c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007c6:	464f      	mov	r7, r9
 80007c8:	4646      	mov	r6, r8
 80007ca:	46d6      	mov	lr, sl
 80007cc:	0243      	lsls	r3, r0, #9
 80007ce:	0a5b      	lsrs	r3, r3, #9
 80007d0:	0045      	lsls	r5, r0, #1
 80007d2:	b5c0      	push	{r6, r7, lr}
 80007d4:	4699      	mov	r9, r3
 80007d6:	1c0f      	adds	r7, r1, #0
 80007d8:	0e2d      	lsrs	r5, r5, #24
 80007da:	0fc6      	lsrs	r6, r0, #31
 80007dc:	2d00      	cmp	r5, #0
 80007de:	d100      	bne.n	80007e2 <__aeabi_fmul+0x1e>
 80007e0:	e088      	b.n	80008f4 <__aeabi_fmul+0x130>
 80007e2:	2dff      	cmp	r5, #255	@ 0xff
 80007e4:	d100      	bne.n	80007e8 <__aeabi_fmul+0x24>
 80007e6:	e08d      	b.n	8000904 <__aeabi_fmul+0x140>
 80007e8:	2280      	movs	r2, #128	@ 0x80
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	04d2      	lsls	r2, r2, #19
 80007ee:	431a      	orrs	r2, r3
 80007f0:	2300      	movs	r3, #0
 80007f2:	4691      	mov	r9, r2
 80007f4:	4698      	mov	r8, r3
 80007f6:	469a      	mov	sl, r3
 80007f8:	3d7f      	subs	r5, #127	@ 0x7f
 80007fa:	027c      	lsls	r4, r7, #9
 80007fc:	007b      	lsls	r3, r7, #1
 80007fe:	0a64      	lsrs	r4, r4, #9
 8000800:	0e1b      	lsrs	r3, r3, #24
 8000802:	0fff      	lsrs	r7, r7, #31
 8000804:	2b00      	cmp	r3, #0
 8000806:	d068      	beq.n	80008da <__aeabi_fmul+0x116>
 8000808:	2bff      	cmp	r3, #255	@ 0xff
 800080a:	d021      	beq.n	8000850 <__aeabi_fmul+0x8c>
 800080c:	2280      	movs	r2, #128	@ 0x80
 800080e:	00e4      	lsls	r4, r4, #3
 8000810:	04d2      	lsls	r2, r2, #19
 8000812:	4314      	orrs	r4, r2
 8000814:	4642      	mov	r2, r8
 8000816:	3b7f      	subs	r3, #127	@ 0x7f
 8000818:	195b      	adds	r3, r3, r5
 800081a:	2100      	movs	r1, #0
 800081c:	1c5d      	adds	r5, r3, #1
 800081e:	2a0a      	cmp	r2, #10
 8000820:	dc2e      	bgt.n	8000880 <__aeabi_fmul+0xbc>
 8000822:	407e      	eors	r6, r7
 8000824:	4642      	mov	r2, r8
 8000826:	2a02      	cmp	r2, #2
 8000828:	dc23      	bgt.n	8000872 <__aeabi_fmul+0xae>
 800082a:	3a01      	subs	r2, #1
 800082c:	2a01      	cmp	r2, #1
 800082e:	d900      	bls.n	8000832 <__aeabi_fmul+0x6e>
 8000830:	e0bd      	b.n	80009ae <__aeabi_fmul+0x1ea>
 8000832:	2902      	cmp	r1, #2
 8000834:	d06e      	beq.n	8000914 <__aeabi_fmul+0x150>
 8000836:	2901      	cmp	r1, #1
 8000838:	d12c      	bne.n	8000894 <__aeabi_fmul+0xd0>
 800083a:	2000      	movs	r0, #0
 800083c:	2200      	movs	r2, #0
 800083e:	05c0      	lsls	r0, r0, #23
 8000840:	07f6      	lsls	r6, r6, #31
 8000842:	4310      	orrs	r0, r2
 8000844:	4330      	orrs	r0, r6
 8000846:	bce0      	pop	{r5, r6, r7}
 8000848:	46ba      	mov	sl, r7
 800084a:	46b1      	mov	r9, r6
 800084c:	46a8      	mov	r8, r5
 800084e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000850:	002b      	movs	r3, r5
 8000852:	33ff      	adds	r3, #255	@ 0xff
 8000854:	2c00      	cmp	r4, #0
 8000856:	d065      	beq.n	8000924 <__aeabi_fmul+0x160>
 8000858:	2203      	movs	r2, #3
 800085a:	4641      	mov	r1, r8
 800085c:	4311      	orrs	r1, r2
 800085e:	0032      	movs	r2, r6
 8000860:	3501      	adds	r5, #1
 8000862:	4688      	mov	r8, r1
 8000864:	407a      	eors	r2, r7
 8000866:	35ff      	adds	r5, #255	@ 0xff
 8000868:	290a      	cmp	r1, #10
 800086a:	dd00      	ble.n	800086e <__aeabi_fmul+0xaa>
 800086c:	e0d8      	b.n	8000a20 <__aeabi_fmul+0x25c>
 800086e:	0016      	movs	r6, r2
 8000870:	2103      	movs	r1, #3
 8000872:	4640      	mov	r0, r8
 8000874:	2201      	movs	r2, #1
 8000876:	4082      	lsls	r2, r0
 8000878:	20a6      	movs	r0, #166	@ 0xa6
 800087a:	00c0      	lsls	r0, r0, #3
 800087c:	4202      	tst	r2, r0
 800087e:	d020      	beq.n	80008c2 <__aeabi_fmul+0xfe>
 8000880:	4653      	mov	r3, sl
 8000882:	2b02      	cmp	r3, #2
 8000884:	d046      	beq.n	8000914 <__aeabi_fmul+0x150>
 8000886:	2b03      	cmp	r3, #3
 8000888:	d100      	bne.n	800088c <__aeabi_fmul+0xc8>
 800088a:	e0bb      	b.n	8000a04 <__aeabi_fmul+0x240>
 800088c:	4651      	mov	r1, sl
 800088e:	464c      	mov	r4, r9
 8000890:	2901      	cmp	r1, #1
 8000892:	d0d2      	beq.n	800083a <__aeabi_fmul+0x76>
 8000894:	002b      	movs	r3, r5
 8000896:	337f      	adds	r3, #127	@ 0x7f
 8000898:	2b00      	cmp	r3, #0
 800089a:	dd70      	ble.n	800097e <__aeabi_fmul+0x1ba>
 800089c:	0762      	lsls	r2, r4, #29
 800089e:	d004      	beq.n	80008aa <__aeabi_fmul+0xe6>
 80008a0:	220f      	movs	r2, #15
 80008a2:	4022      	ands	r2, r4
 80008a4:	2a04      	cmp	r2, #4
 80008a6:	d000      	beq.n	80008aa <__aeabi_fmul+0xe6>
 80008a8:	3404      	adds	r4, #4
 80008aa:	0122      	lsls	r2, r4, #4
 80008ac:	d503      	bpl.n	80008b6 <__aeabi_fmul+0xf2>
 80008ae:	4b63      	ldr	r3, [pc, #396]	@ (8000a3c <__aeabi_fmul+0x278>)
 80008b0:	401c      	ands	r4, r3
 80008b2:	002b      	movs	r3, r5
 80008b4:	3380      	adds	r3, #128	@ 0x80
 80008b6:	2bfe      	cmp	r3, #254	@ 0xfe
 80008b8:	dc2c      	bgt.n	8000914 <__aeabi_fmul+0x150>
 80008ba:	01a2      	lsls	r2, r4, #6
 80008bc:	0a52      	lsrs	r2, r2, #9
 80008be:	b2d8      	uxtb	r0, r3
 80008c0:	e7bd      	b.n	800083e <__aeabi_fmul+0x7a>
 80008c2:	2090      	movs	r0, #144	@ 0x90
 80008c4:	0080      	lsls	r0, r0, #2
 80008c6:	4202      	tst	r2, r0
 80008c8:	d127      	bne.n	800091a <__aeabi_fmul+0x156>
 80008ca:	38b9      	subs	r0, #185	@ 0xb9
 80008cc:	38ff      	subs	r0, #255	@ 0xff
 80008ce:	4210      	tst	r0, r2
 80008d0:	d06d      	beq.n	80009ae <__aeabi_fmul+0x1ea>
 80008d2:	003e      	movs	r6, r7
 80008d4:	46a1      	mov	r9, r4
 80008d6:	468a      	mov	sl, r1
 80008d8:	e7d2      	b.n	8000880 <__aeabi_fmul+0xbc>
 80008da:	2c00      	cmp	r4, #0
 80008dc:	d141      	bne.n	8000962 <__aeabi_fmul+0x19e>
 80008de:	2301      	movs	r3, #1
 80008e0:	4642      	mov	r2, r8
 80008e2:	431a      	orrs	r2, r3
 80008e4:	4690      	mov	r8, r2
 80008e6:	002b      	movs	r3, r5
 80008e8:	4642      	mov	r2, r8
 80008ea:	2101      	movs	r1, #1
 80008ec:	1c5d      	adds	r5, r3, #1
 80008ee:	2a0a      	cmp	r2, #10
 80008f0:	dd97      	ble.n	8000822 <__aeabi_fmul+0x5e>
 80008f2:	e7c5      	b.n	8000880 <__aeabi_fmul+0xbc>
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d126      	bne.n	8000946 <__aeabi_fmul+0x182>
 80008f8:	2304      	movs	r3, #4
 80008fa:	4698      	mov	r8, r3
 80008fc:	3b03      	subs	r3, #3
 80008fe:	2500      	movs	r5, #0
 8000900:	469a      	mov	sl, r3
 8000902:	e77a      	b.n	80007fa <__aeabi_fmul+0x36>
 8000904:	2b00      	cmp	r3, #0
 8000906:	d118      	bne.n	800093a <__aeabi_fmul+0x176>
 8000908:	2308      	movs	r3, #8
 800090a:	4698      	mov	r8, r3
 800090c:	3b06      	subs	r3, #6
 800090e:	25ff      	movs	r5, #255	@ 0xff
 8000910:	469a      	mov	sl, r3
 8000912:	e772      	b.n	80007fa <__aeabi_fmul+0x36>
 8000914:	20ff      	movs	r0, #255	@ 0xff
 8000916:	2200      	movs	r2, #0
 8000918:	e791      	b.n	800083e <__aeabi_fmul+0x7a>
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	2600      	movs	r6, #0
 800091e:	20ff      	movs	r0, #255	@ 0xff
 8000920:	03d2      	lsls	r2, r2, #15
 8000922:	e78c      	b.n	800083e <__aeabi_fmul+0x7a>
 8000924:	4641      	mov	r1, r8
 8000926:	2202      	movs	r2, #2
 8000928:	3501      	adds	r5, #1
 800092a:	4311      	orrs	r1, r2
 800092c:	4688      	mov	r8, r1
 800092e:	35ff      	adds	r5, #255	@ 0xff
 8000930:	290a      	cmp	r1, #10
 8000932:	dca5      	bgt.n	8000880 <__aeabi_fmul+0xbc>
 8000934:	2102      	movs	r1, #2
 8000936:	407e      	eors	r6, r7
 8000938:	e774      	b.n	8000824 <__aeabi_fmul+0x60>
 800093a:	230c      	movs	r3, #12
 800093c:	4698      	mov	r8, r3
 800093e:	3b09      	subs	r3, #9
 8000940:	25ff      	movs	r5, #255	@ 0xff
 8000942:	469a      	mov	sl, r3
 8000944:	e759      	b.n	80007fa <__aeabi_fmul+0x36>
 8000946:	0018      	movs	r0, r3
 8000948:	f001 ffc0 	bl	80028cc <__clzsi2>
 800094c:	464a      	mov	r2, r9
 800094e:	1f43      	subs	r3, r0, #5
 8000950:	2576      	movs	r5, #118	@ 0x76
 8000952:	409a      	lsls	r2, r3
 8000954:	2300      	movs	r3, #0
 8000956:	426d      	negs	r5, r5
 8000958:	4691      	mov	r9, r2
 800095a:	4698      	mov	r8, r3
 800095c:	469a      	mov	sl, r3
 800095e:	1a2d      	subs	r5, r5, r0
 8000960:	e74b      	b.n	80007fa <__aeabi_fmul+0x36>
 8000962:	0020      	movs	r0, r4
 8000964:	f001 ffb2 	bl	80028cc <__clzsi2>
 8000968:	4642      	mov	r2, r8
 800096a:	1f43      	subs	r3, r0, #5
 800096c:	409c      	lsls	r4, r3
 800096e:	1a2b      	subs	r3, r5, r0
 8000970:	3b76      	subs	r3, #118	@ 0x76
 8000972:	2100      	movs	r1, #0
 8000974:	1c5d      	adds	r5, r3, #1
 8000976:	2a0a      	cmp	r2, #10
 8000978:	dc00      	bgt.n	800097c <__aeabi_fmul+0x1b8>
 800097a:	e752      	b.n	8000822 <__aeabi_fmul+0x5e>
 800097c:	e780      	b.n	8000880 <__aeabi_fmul+0xbc>
 800097e:	2201      	movs	r2, #1
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	2b1b      	cmp	r3, #27
 8000984:	dd00      	ble.n	8000988 <__aeabi_fmul+0x1c4>
 8000986:	e758      	b.n	800083a <__aeabi_fmul+0x76>
 8000988:	359e      	adds	r5, #158	@ 0x9e
 800098a:	0022      	movs	r2, r4
 800098c:	40ac      	lsls	r4, r5
 800098e:	40da      	lsrs	r2, r3
 8000990:	1e63      	subs	r3, r4, #1
 8000992:	419c      	sbcs	r4, r3
 8000994:	4322      	orrs	r2, r4
 8000996:	0753      	lsls	r3, r2, #29
 8000998:	d004      	beq.n	80009a4 <__aeabi_fmul+0x1e0>
 800099a:	230f      	movs	r3, #15
 800099c:	4013      	ands	r3, r2
 800099e:	2b04      	cmp	r3, #4
 80009a0:	d000      	beq.n	80009a4 <__aeabi_fmul+0x1e0>
 80009a2:	3204      	adds	r2, #4
 80009a4:	0153      	lsls	r3, r2, #5
 80009a6:	d537      	bpl.n	8000a18 <__aeabi_fmul+0x254>
 80009a8:	2001      	movs	r0, #1
 80009aa:	2200      	movs	r2, #0
 80009ac:	e747      	b.n	800083e <__aeabi_fmul+0x7a>
 80009ae:	0c21      	lsrs	r1, r4, #16
 80009b0:	464a      	mov	r2, r9
 80009b2:	0424      	lsls	r4, r4, #16
 80009b4:	0c24      	lsrs	r4, r4, #16
 80009b6:	0027      	movs	r7, r4
 80009b8:	0c10      	lsrs	r0, r2, #16
 80009ba:	0412      	lsls	r2, r2, #16
 80009bc:	0c12      	lsrs	r2, r2, #16
 80009be:	4344      	muls	r4, r0
 80009c0:	4357      	muls	r7, r2
 80009c2:	4348      	muls	r0, r1
 80009c4:	4351      	muls	r1, r2
 80009c6:	0c3a      	lsrs	r2, r7, #16
 80009c8:	1909      	adds	r1, r1, r4
 80009ca:	1852      	adds	r2, r2, r1
 80009cc:	4294      	cmp	r4, r2
 80009ce:	d903      	bls.n	80009d8 <__aeabi_fmul+0x214>
 80009d0:	2180      	movs	r1, #128	@ 0x80
 80009d2:	0249      	lsls	r1, r1, #9
 80009d4:	468c      	mov	ip, r1
 80009d6:	4460      	add	r0, ip
 80009d8:	043f      	lsls	r7, r7, #16
 80009da:	0411      	lsls	r1, r2, #16
 80009dc:	0c3f      	lsrs	r7, r7, #16
 80009de:	19c9      	adds	r1, r1, r7
 80009e0:	018c      	lsls	r4, r1, #6
 80009e2:	1e67      	subs	r7, r4, #1
 80009e4:	41bc      	sbcs	r4, r7
 80009e6:	0c12      	lsrs	r2, r2, #16
 80009e8:	0e89      	lsrs	r1, r1, #26
 80009ea:	1812      	adds	r2, r2, r0
 80009ec:	430c      	orrs	r4, r1
 80009ee:	0192      	lsls	r2, r2, #6
 80009f0:	4314      	orrs	r4, r2
 80009f2:	0112      	lsls	r2, r2, #4
 80009f4:	d50e      	bpl.n	8000a14 <__aeabi_fmul+0x250>
 80009f6:	2301      	movs	r3, #1
 80009f8:	0862      	lsrs	r2, r4, #1
 80009fa:	401c      	ands	r4, r3
 80009fc:	4314      	orrs	r4, r2
 80009fe:	e749      	b.n	8000894 <__aeabi_fmul+0xd0>
 8000a00:	003e      	movs	r6, r7
 8000a02:	46a1      	mov	r9, r4
 8000a04:	2280      	movs	r2, #128	@ 0x80
 8000a06:	464b      	mov	r3, r9
 8000a08:	03d2      	lsls	r2, r2, #15
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	0252      	lsls	r2, r2, #9
 8000a0e:	20ff      	movs	r0, #255	@ 0xff
 8000a10:	0a52      	lsrs	r2, r2, #9
 8000a12:	e714      	b.n	800083e <__aeabi_fmul+0x7a>
 8000a14:	001d      	movs	r5, r3
 8000a16:	e73d      	b.n	8000894 <__aeabi_fmul+0xd0>
 8000a18:	0192      	lsls	r2, r2, #6
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	0a52      	lsrs	r2, r2, #9
 8000a1e:	e70e      	b.n	800083e <__aeabi_fmul+0x7a>
 8000a20:	290f      	cmp	r1, #15
 8000a22:	d1ed      	bne.n	8000a00 <__aeabi_fmul+0x23c>
 8000a24:	2280      	movs	r2, #128	@ 0x80
 8000a26:	464b      	mov	r3, r9
 8000a28:	03d2      	lsls	r2, r2, #15
 8000a2a:	4213      	tst	r3, r2
 8000a2c:	d0ea      	beq.n	8000a04 <__aeabi_fmul+0x240>
 8000a2e:	4214      	tst	r4, r2
 8000a30:	d1e8      	bne.n	8000a04 <__aeabi_fmul+0x240>
 8000a32:	003e      	movs	r6, r7
 8000a34:	20ff      	movs	r0, #255	@ 0xff
 8000a36:	4322      	orrs	r2, r4
 8000a38:	e701      	b.n	800083e <__aeabi_fmul+0x7a>
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	f7ffffff 	.word	0xf7ffffff

08000a40 <__aeabi_ui2f>:
 8000a40:	b570      	push	{r4, r5, r6, lr}
 8000a42:	1e04      	subs	r4, r0, #0
 8000a44:	d00e      	beq.n	8000a64 <__aeabi_ui2f+0x24>
 8000a46:	f001 ff41 	bl	80028cc <__clzsi2>
 8000a4a:	239e      	movs	r3, #158	@ 0x9e
 8000a4c:	0001      	movs	r1, r0
 8000a4e:	1a1b      	subs	r3, r3, r0
 8000a50:	2b96      	cmp	r3, #150	@ 0x96
 8000a52:	dc0c      	bgt.n	8000a6e <__aeabi_ui2f+0x2e>
 8000a54:	2808      	cmp	r0, #8
 8000a56:	d02f      	beq.n	8000ab8 <__aeabi_ui2f+0x78>
 8000a58:	3908      	subs	r1, #8
 8000a5a:	408c      	lsls	r4, r1
 8000a5c:	0264      	lsls	r4, r4, #9
 8000a5e:	0a64      	lsrs	r4, r4, #9
 8000a60:	b2d8      	uxtb	r0, r3
 8000a62:	e001      	b.n	8000a68 <__aeabi_ui2f+0x28>
 8000a64:	2000      	movs	r0, #0
 8000a66:	2400      	movs	r4, #0
 8000a68:	05c0      	lsls	r0, r0, #23
 8000a6a:	4320      	orrs	r0, r4
 8000a6c:	bd70      	pop	{r4, r5, r6, pc}
 8000a6e:	2b99      	cmp	r3, #153	@ 0x99
 8000a70:	dc16      	bgt.n	8000aa0 <__aeabi_ui2f+0x60>
 8000a72:	1f42      	subs	r2, r0, #5
 8000a74:	2805      	cmp	r0, #5
 8000a76:	d000      	beq.n	8000a7a <__aeabi_ui2f+0x3a>
 8000a78:	4094      	lsls	r4, r2
 8000a7a:	0022      	movs	r2, r4
 8000a7c:	4810      	ldr	r0, [pc, #64]	@ (8000ac0 <__aeabi_ui2f+0x80>)
 8000a7e:	4002      	ands	r2, r0
 8000a80:	0765      	lsls	r5, r4, #29
 8000a82:	d009      	beq.n	8000a98 <__aeabi_ui2f+0x58>
 8000a84:	250f      	movs	r5, #15
 8000a86:	402c      	ands	r4, r5
 8000a88:	2c04      	cmp	r4, #4
 8000a8a:	d005      	beq.n	8000a98 <__aeabi_ui2f+0x58>
 8000a8c:	3204      	adds	r2, #4
 8000a8e:	0154      	lsls	r4, r2, #5
 8000a90:	d502      	bpl.n	8000a98 <__aeabi_ui2f+0x58>
 8000a92:	239f      	movs	r3, #159	@ 0x9f
 8000a94:	4002      	ands	r2, r0
 8000a96:	1a5b      	subs	r3, r3, r1
 8000a98:	0192      	lsls	r2, r2, #6
 8000a9a:	0a54      	lsrs	r4, r2, #9
 8000a9c:	b2d8      	uxtb	r0, r3
 8000a9e:	e7e3      	b.n	8000a68 <__aeabi_ui2f+0x28>
 8000aa0:	0002      	movs	r2, r0
 8000aa2:	0020      	movs	r0, r4
 8000aa4:	321b      	adds	r2, #27
 8000aa6:	4090      	lsls	r0, r2
 8000aa8:	0002      	movs	r2, r0
 8000aaa:	1e50      	subs	r0, r2, #1
 8000aac:	4182      	sbcs	r2, r0
 8000aae:	2005      	movs	r0, #5
 8000ab0:	1a40      	subs	r0, r0, r1
 8000ab2:	40c4      	lsrs	r4, r0
 8000ab4:	4314      	orrs	r4, r2
 8000ab6:	e7e0      	b.n	8000a7a <__aeabi_ui2f+0x3a>
 8000ab8:	0264      	lsls	r4, r4, #9
 8000aba:	2096      	movs	r0, #150	@ 0x96
 8000abc:	0a64      	lsrs	r4, r4, #9
 8000abe:	e7d3      	b.n	8000a68 <__aeabi_ui2f+0x28>
 8000ac0:	fbffffff 	.word	0xfbffffff

08000ac4 <__aeabi_dadd>:
 8000ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ac6:	4657      	mov	r7, sl
 8000ac8:	464e      	mov	r6, r9
 8000aca:	4645      	mov	r5, r8
 8000acc:	46de      	mov	lr, fp
 8000ace:	b5e0      	push	{r5, r6, r7, lr}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	9000      	str	r0, [sp, #0]
 8000ad4:	9101      	str	r1, [sp, #4]
 8000ad6:	030c      	lsls	r4, r1, #12
 8000ad8:	004f      	lsls	r7, r1, #1
 8000ada:	0fce      	lsrs	r6, r1, #31
 8000adc:	0a61      	lsrs	r1, r4, #9
 8000ade:	9c00      	ldr	r4, [sp, #0]
 8000ae0:	031d      	lsls	r5, r3, #12
 8000ae2:	0f64      	lsrs	r4, r4, #29
 8000ae4:	430c      	orrs	r4, r1
 8000ae6:	9900      	ldr	r1, [sp, #0]
 8000ae8:	9200      	str	r2, [sp, #0]
 8000aea:	9301      	str	r3, [sp, #4]
 8000aec:	00c8      	lsls	r0, r1, #3
 8000aee:	0059      	lsls	r1, r3, #1
 8000af0:	0d4b      	lsrs	r3, r1, #21
 8000af2:	4699      	mov	r9, r3
 8000af4:	9a00      	ldr	r2, [sp, #0]
 8000af6:	9b01      	ldr	r3, [sp, #4]
 8000af8:	0a6d      	lsrs	r5, r5, #9
 8000afa:	0fd9      	lsrs	r1, r3, #31
 8000afc:	0f53      	lsrs	r3, r2, #29
 8000afe:	432b      	orrs	r3, r5
 8000b00:	469a      	mov	sl, r3
 8000b02:	9b00      	ldr	r3, [sp, #0]
 8000b04:	0d7f      	lsrs	r7, r7, #21
 8000b06:	00da      	lsls	r2, r3, #3
 8000b08:	4694      	mov	ip, r2
 8000b0a:	464a      	mov	r2, r9
 8000b0c:	46b0      	mov	r8, r6
 8000b0e:	1aba      	subs	r2, r7, r2
 8000b10:	428e      	cmp	r6, r1
 8000b12:	d100      	bne.n	8000b16 <__aeabi_dadd+0x52>
 8000b14:	e0b0      	b.n	8000c78 <__aeabi_dadd+0x1b4>
 8000b16:	2a00      	cmp	r2, #0
 8000b18:	dc00      	bgt.n	8000b1c <__aeabi_dadd+0x58>
 8000b1a:	e078      	b.n	8000c0e <__aeabi_dadd+0x14a>
 8000b1c:	4649      	mov	r1, r9
 8000b1e:	2900      	cmp	r1, #0
 8000b20:	d100      	bne.n	8000b24 <__aeabi_dadd+0x60>
 8000b22:	e0e9      	b.n	8000cf8 <__aeabi_dadd+0x234>
 8000b24:	49c9      	ldr	r1, [pc, #804]	@ (8000e4c <__aeabi_dadd+0x388>)
 8000b26:	428f      	cmp	r7, r1
 8000b28:	d100      	bne.n	8000b2c <__aeabi_dadd+0x68>
 8000b2a:	e195      	b.n	8000e58 <__aeabi_dadd+0x394>
 8000b2c:	2501      	movs	r5, #1
 8000b2e:	2a38      	cmp	r2, #56	@ 0x38
 8000b30:	dc16      	bgt.n	8000b60 <__aeabi_dadd+0x9c>
 8000b32:	2180      	movs	r1, #128	@ 0x80
 8000b34:	4653      	mov	r3, sl
 8000b36:	0409      	lsls	r1, r1, #16
 8000b38:	430b      	orrs	r3, r1
 8000b3a:	469a      	mov	sl, r3
 8000b3c:	2a1f      	cmp	r2, #31
 8000b3e:	dd00      	ble.n	8000b42 <__aeabi_dadd+0x7e>
 8000b40:	e1e7      	b.n	8000f12 <__aeabi_dadd+0x44e>
 8000b42:	2120      	movs	r1, #32
 8000b44:	4655      	mov	r5, sl
 8000b46:	1a8b      	subs	r3, r1, r2
 8000b48:	4661      	mov	r1, ip
 8000b4a:	409d      	lsls	r5, r3
 8000b4c:	40d1      	lsrs	r1, r2
 8000b4e:	430d      	orrs	r5, r1
 8000b50:	4661      	mov	r1, ip
 8000b52:	4099      	lsls	r1, r3
 8000b54:	1e4b      	subs	r3, r1, #1
 8000b56:	4199      	sbcs	r1, r3
 8000b58:	4653      	mov	r3, sl
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	430d      	orrs	r5, r1
 8000b5e:	1ae4      	subs	r4, r4, r3
 8000b60:	1b45      	subs	r5, r0, r5
 8000b62:	42a8      	cmp	r0, r5
 8000b64:	4180      	sbcs	r0, r0
 8000b66:	4240      	negs	r0, r0
 8000b68:	1a24      	subs	r4, r4, r0
 8000b6a:	0223      	lsls	r3, r4, #8
 8000b6c:	d400      	bmi.n	8000b70 <__aeabi_dadd+0xac>
 8000b6e:	e10f      	b.n	8000d90 <__aeabi_dadd+0x2cc>
 8000b70:	0264      	lsls	r4, r4, #9
 8000b72:	0a64      	lsrs	r4, r4, #9
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d100      	bne.n	8000b7a <__aeabi_dadd+0xb6>
 8000b78:	e139      	b.n	8000dee <__aeabi_dadd+0x32a>
 8000b7a:	0020      	movs	r0, r4
 8000b7c:	f001 fea6 	bl	80028cc <__clzsi2>
 8000b80:	0003      	movs	r3, r0
 8000b82:	3b08      	subs	r3, #8
 8000b84:	2120      	movs	r1, #32
 8000b86:	0028      	movs	r0, r5
 8000b88:	1aca      	subs	r2, r1, r3
 8000b8a:	40d0      	lsrs	r0, r2
 8000b8c:	409c      	lsls	r4, r3
 8000b8e:	0002      	movs	r2, r0
 8000b90:	409d      	lsls	r5, r3
 8000b92:	4322      	orrs	r2, r4
 8000b94:	429f      	cmp	r7, r3
 8000b96:	dd00      	ble.n	8000b9a <__aeabi_dadd+0xd6>
 8000b98:	e173      	b.n	8000e82 <__aeabi_dadd+0x3be>
 8000b9a:	1bd8      	subs	r0, r3, r7
 8000b9c:	3001      	adds	r0, #1
 8000b9e:	1a09      	subs	r1, r1, r0
 8000ba0:	002c      	movs	r4, r5
 8000ba2:	408d      	lsls	r5, r1
 8000ba4:	40c4      	lsrs	r4, r0
 8000ba6:	1e6b      	subs	r3, r5, #1
 8000ba8:	419d      	sbcs	r5, r3
 8000baa:	0013      	movs	r3, r2
 8000bac:	40c2      	lsrs	r2, r0
 8000bae:	408b      	lsls	r3, r1
 8000bb0:	4325      	orrs	r5, r4
 8000bb2:	2700      	movs	r7, #0
 8000bb4:	0014      	movs	r4, r2
 8000bb6:	431d      	orrs	r5, r3
 8000bb8:	076b      	lsls	r3, r5, #29
 8000bba:	d009      	beq.n	8000bd0 <__aeabi_dadd+0x10c>
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	402b      	ands	r3, r5
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d005      	beq.n	8000bd0 <__aeabi_dadd+0x10c>
 8000bc4:	1d2b      	adds	r3, r5, #4
 8000bc6:	42ab      	cmp	r3, r5
 8000bc8:	41ad      	sbcs	r5, r5
 8000bca:	426d      	negs	r5, r5
 8000bcc:	1964      	adds	r4, r4, r5
 8000bce:	001d      	movs	r5, r3
 8000bd0:	0223      	lsls	r3, r4, #8
 8000bd2:	d400      	bmi.n	8000bd6 <__aeabi_dadd+0x112>
 8000bd4:	e12d      	b.n	8000e32 <__aeabi_dadd+0x36e>
 8000bd6:	4a9d      	ldr	r2, [pc, #628]	@ (8000e4c <__aeabi_dadd+0x388>)
 8000bd8:	3701      	adds	r7, #1
 8000bda:	4297      	cmp	r7, r2
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_dadd+0x11c>
 8000bde:	e0d3      	b.n	8000d88 <__aeabi_dadd+0x2c4>
 8000be0:	4646      	mov	r6, r8
 8000be2:	499b      	ldr	r1, [pc, #620]	@ (8000e50 <__aeabi_dadd+0x38c>)
 8000be4:	08ed      	lsrs	r5, r5, #3
 8000be6:	4021      	ands	r1, r4
 8000be8:	074a      	lsls	r2, r1, #29
 8000bea:	432a      	orrs	r2, r5
 8000bec:	057c      	lsls	r4, r7, #21
 8000bee:	024d      	lsls	r5, r1, #9
 8000bf0:	0b2d      	lsrs	r5, r5, #12
 8000bf2:	0d64      	lsrs	r4, r4, #21
 8000bf4:	0524      	lsls	r4, r4, #20
 8000bf6:	432c      	orrs	r4, r5
 8000bf8:	07f6      	lsls	r6, r6, #31
 8000bfa:	4334      	orrs	r4, r6
 8000bfc:	0010      	movs	r0, r2
 8000bfe:	0021      	movs	r1, r4
 8000c00:	b003      	add	sp, #12
 8000c02:	bcf0      	pop	{r4, r5, r6, r7}
 8000c04:	46bb      	mov	fp, r7
 8000c06:	46b2      	mov	sl, r6
 8000c08:	46a9      	mov	r9, r5
 8000c0a:	46a0      	mov	r8, r4
 8000c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c0e:	2a00      	cmp	r2, #0
 8000c10:	d100      	bne.n	8000c14 <__aeabi_dadd+0x150>
 8000c12:	e084      	b.n	8000d1e <__aeabi_dadd+0x25a>
 8000c14:	464a      	mov	r2, r9
 8000c16:	1bd2      	subs	r2, r2, r7
 8000c18:	2f00      	cmp	r7, #0
 8000c1a:	d000      	beq.n	8000c1e <__aeabi_dadd+0x15a>
 8000c1c:	e16d      	b.n	8000efa <__aeabi_dadd+0x436>
 8000c1e:	0025      	movs	r5, r4
 8000c20:	4305      	orrs	r5, r0
 8000c22:	d100      	bne.n	8000c26 <__aeabi_dadd+0x162>
 8000c24:	e127      	b.n	8000e76 <__aeabi_dadd+0x3b2>
 8000c26:	1e56      	subs	r6, r2, #1
 8000c28:	2a01      	cmp	r2, #1
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_dadd+0x16a>
 8000c2c:	e23b      	b.n	80010a6 <__aeabi_dadd+0x5e2>
 8000c2e:	4d87      	ldr	r5, [pc, #540]	@ (8000e4c <__aeabi_dadd+0x388>)
 8000c30:	42aa      	cmp	r2, r5
 8000c32:	d100      	bne.n	8000c36 <__aeabi_dadd+0x172>
 8000c34:	e26a      	b.n	800110c <__aeabi_dadd+0x648>
 8000c36:	2501      	movs	r5, #1
 8000c38:	2e38      	cmp	r6, #56	@ 0x38
 8000c3a:	dc12      	bgt.n	8000c62 <__aeabi_dadd+0x19e>
 8000c3c:	0032      	movs	r2, r6
 8000c3e:	2a1f      	cmp	r2, #31
 8000c40:	dd00      	ble.n	8000c44 <__aeabi_dadd+0x180>
 8000c42:	e1f8      	b.n	8001036 <__aeabi_dadd+0x572>
 8000c44:	2620      	movs	r6, #32
 8000c46:	0025      	movs	r5, r4
 8000c48:	1ab6      	subs	r6, r6, r2
 8000c4a:	0007      	movs	r7, r0
 8000c4c:	4653      	mov	r3, sl
 8000c4e:	40b0      	lsls	r0, r6
 8000c50:	40d4      	lsrs	r4, r2
 8000c52:	40b5      	lsls	r5, r6
 8000c54:	40d7      	lsrs	r7, r2
 8000c56:	1e46      	subs	r6, r0, #1
 8000c58:	41b0      	sbcs	r0, r6
 8000c5a:	1b1b      	subs	r3, r3, r4
 8000c5c:	469a      	mov	sl, r3
 8000c5e:	433d      	orrs	r5, r7
 8000c60:	4305      	orrs	r5, r0
 8000c62:	4662      	mov	r2, ip
 8000c64:	1b55      	subs	r5, r2, r5
 8000c66:	45ac      	cmp	ip, r5
 8000c68:	4192      	sbcs	r2, r2
 8000c6a:	4653      	mov	r3, sl
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	000e      	movs	r6, r1
 8000c70:	464f      	mov	r7, r9
 8000c72:	4688      	mov	r8, r1
 8000c74:	1a9c      	subs	r4, r3, r2
 8000c76:	e778      	b.n	8000b6a <__aeabi_dadd+0xa6>
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	dc00      	bgt.n	8000c7e <__aeabi_dadd+0x1ba>
 8000c7c:	e08e      	b.n	8000d9c <__aeabi_dadd+0x2d8>
 8000c7e:	4649      	mov	r1, r9
 8000c80:	2900      	cmp	r1, #0
 8000c82:	d175      	bne.n	8000d70 <__aeabi_dadd+0x2ac>
 8000c84:	4661      	mov	r1, ip
 8000c86:	4653      	mov	r3, sl
 8000c88:	4319      	orrs	r1, r3
 8000c8a:	d100      	bne.n	8000c8e <__aeabi_dadd+0x1ca>
 8000c8c:	e0f6      	b.n	8000e7c <__aeabi_dadd+0x3b8>
 8000c8e:	1e51      	subs	r1, r2, #1
 8000c90:	2a01      	cmp	r2, #1
 8000c92:	d100      	bne.n	8000c96 <__aeabi_dadd+0x1d2>
 8000c94:	e191      	b.n	8000fba <__aeabi_dadd+0x4f6>
 8000c96:	4d6d      	ldr	r5, [pc, #436]	@ (8000e4c <__aeabi_dadd+0x388>)
 8000c98:	42aa      	cmp	r2, r5
 8000c9a:	d100      	bne.n	8000c9e <__aeabi_dadd+0x1da>
 8000c9c:	e0dc      	b.n	8000e58 <__aeabi_dadd+0x394>
 8000c9e:	2501      	movs	r5, #1
 8000ca0:	2938      	cmp	r1, #56	@ 0x38
 8000ca2:	dc14      	bgt.n	8000cce <__aeabi_dadd+0x20a>
 8000ca4:	000a      	movs	r2, r1
 8000ca6:	2a1f      	cmp	r2, #31
 8000ca8:	dd00      	ble.n	8000cac <__aeabi_dadd+0x1e8>
 8000caa:	e1a2      	b.n	8000ff2 <__aeabi_dadd+0x52e>
 8000cac:	2120      	movs	r1, #32
 8000cae:	4653      	mov	r3, sl
 8000cb0:	1a89      	subs	r1, r1, r2
 8000cb2:	408b      	lsls	r3, r1
 8000cb4:	001d      	movs	r5, r3
 8000cb6:	4663      	mov	r3, ip
 8000cb8:	40d3      	lsrs	r3, r2
 8000cba:	431d      	orrs	r5, r3
 8000cbc:	4663      	mov	r3, ip
 8000cbe:	408b      	lsls	r3, r1
 8000cc0:	0019      	movs	r1, r3
 8000cc2:	1e4b      	subs	r3, r1, #1
 8000cc4:	4199      	sbcs	r1, r3
 8000cc6:	4653      	mov	r3, sl
 8000cc8:	40d3      	lsrs	r3, r2
 8000cca:	430d      	orrs	r5, r1
 8000ccc:	18e4      	adds	r4, r4, r3
 8000cce:	182d      	adds	r5, r5, r0
 8000cd0:	4285      	cmp	r5, r0
 8000cd2:	4180      	sbcs	r0, r0
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	1824      	adds	r4, r4, r0
 8000cd8:	0223      	lsls	r3, r4, #8
 8000cda:	d559      	bpl.n	8000d90 <__aeabi_dadd+0x2cc>
 8000cdc:	4b5b      	ldr	r3, [pc, #364]	@ (8000e4c <__aeabi_dadd+0x388>)
 8000cde:	3701      	adds	r7, #1
 8000ce0:	429f      	cmp	r7, r3
 8000ce2:	d051      	beq.n	8000d88 <__aeabi_dadd+0x2c4>
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	4b5a      	ldr	r3, [pc, #360]	@ (8000e50 <__aeabi_dadd+0x38c>)
 8000ce8:	086a      	lsrs	r2, r5, #1
 8000cea:	401c      	ands	r4, r3
 8000cec:	4029      	ands	r1, r5
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	07e5      	lsls	r5, r4, #31
 8000cf2:	4315      	orrs	r5, r2
 8000cf4:	0864      	lsrs	r4, r4, #1
 8000cf6:	e75f      	b.n	8000bb8 <__aeabi_dadd+0xf4>
 8000cf8:	4661      	mov	r1, ip
 8000cfa:	4653      	mov	r3, sl
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	d100      	bne.n	8000d02 <__aeabi_dadd+0x23e>
 8000d00:	e0bc      	b.n	8000e7c <__aeabi_dadd+0x3b8>
 8000d02:	1e51      	subs	r1, r2, #1
 8000d04:	2a01      	cmp	r2, #1
 8000d06:	d100      	bne.n	8000d0a <__aeabi_dadd+0x246>
 8000d08:	e164      	b.n	8000fd4 <__aeabi_dadd+0x510>
 8000d0a:	4d50      	ldr	r5, [pc, #320]	@ (8000e4c <__aeabi_dadd+0x388>)
 8000d0c:	42aa      	cmp	r2, r5
 8000d0e:	d100      	bne.n	8000d12 <__aeabi_dadd+0x24e>
 8000d10:	e16a      	b.n	8000fe8 <__aeabi_dadd+0x524>
 8000d12:	2501      	movs	r5, #1
 8000d14:	2938      	cmp	r1, #56	@ 0x38
 8000d16:	dd00      	ble.n	8000d1a <__aeabi_dadd+0x256>
 8000d18:	e722      	b.n	8000b60 <__aeabi_dadd+0x9c>
 8000d1a:	000a      	movs	r2, r1
 8000d1c:	e70e      	b.n	8000b3c <__aeabi_dadd+0x78>
 8000d1e:	4a4d      	ldr	r2, [pc, #308]	@ (8000e54 <__aeabi_dadd+0x390>)
 8000d20:	1c7d      	adds	r5, r7, #1
 8000d22:	4215      	tst	r5, r2
 8000d24:	d000      	beq.n	8000d28 <__aeabi_dadd+0x264>
 8000d26:	e0d0      	b.n	8000eca <__aeabi_dadd+0x406>
 8000d28:	0025      	movs	r5, r4
 8000d2a:	4662      	mov	r2, ip
 8000d2c:	4653      	mov	r3, sl
 8000d2e:	4305      	orrs	r5, r0
 8000d30:	431a      	orrs	r2, r3
 8000d32:	2f00      	cmp	r7, #0
 8000d34:	d000      	beq.n	8000d38 <__aeabi_dadd+0x274>
 8000d36:	e137      	b.n	8000fa8 <__aeabi_dadd+0x4e4>
 8000d38:	2d00      	cmp	r5, #0
 8000d3a:	d100      	bne.n	8000d3e <__aeabi_dadd+0x27a>
 8000d3c:	e1a8      	b.n	8001090 <__aeabi_dadd+0x5cc>
 8000d3e:	2a00      	cmp	r2, #0
 8000d40:	d100      	bne.n	8000d44 <__aeabi_dadd+0x280>
 8000d42:	e16a      	b.n	800101a <__aeabi_dadd+0x556>
 8000d44:	4663      	mov	r3, ip
 8000d46:	1ac5      	subs	r5, r0, r3
 8000d48:	4653      	mov	r3, sl
 8000d4a:	1ae2      	subs	r2, r4, r3
 8000d4c:	42a8      	cmp	r0, r5
 8000d4e:	419b      	sbcs	r3, r3
 8000d50:	425b      	negs	r3, r3
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	021a      	lsls	r2, r3, #8
 8000d56:	d400      	bmi.n	8000d5a <__aeabi_dadd+0x296>
 8000d58:	e203      	b.n	8001162 <__aeabi_dadd+0x69e>
 8000d5a:	4663      	mov	r3, ip
 8000d5c:	1a1d      	subs	r5, r3, r0
 8000d5e:	45ac      	cmp	ip, r5
 8000d60:	4192      	sbcs	r2, r2
 8000d62:	4653      	mov	r3, sl
 8000d64:	4252      	negs	r2, r2
 8000d66:	1b1c      	subs	r4, r3, r4
 8000d68:	000e      	movs	r6, r1
 8000d6a:	4688      	mov	r8, r1
 8000d6c:	1aa4      	subs	r4, r4, r2
 8000d6e:	e723      	b.n	8000bb8 <__aeabi_dadd+0xf4>
 8000d70:	4936      	ldr	r1, [pc, #216]	@ (8000e4c <__aeabi_dadd+0x388>)
 8000d72:	428f      	cmp	r7, r1
 8000d74:	d070      	beq.n	8000e58 <__aeabi_dadd+0x394>
 8000d76:	2501      	movs	r5, #1
 8000d78:	2a38      	cmp	r2, #56	@ 0x38
 8000d7a:	dca8      	bgt.n	8000cce <__aeabi_dadd+0x20a>
 8000d7c:	2180      	movs	r1, #128	@ 0x80
 8000d7e:	4653      	mov	r3, sl
 8000d80:	0409      	lsls	r1, r1, #16
 8000d82:	430b      	orrs	r3, r1
 8000d84:	469a      	mov	sl, r3
 8000d86:	e78e      	b.n	8000ca6 <__aeabi_dadd+0x1e2>
 8000d88:	003c      	movs	r4, r7
 8000d8a:	2500      	movs	r5, #0
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	e731      	b.n	8000bf4 <__aeabi_dadd+0x130>
 8000d90:	2307      	movs	r3, #7
 8000d92:	402b      	ands	r3, r5
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d000      	beq.n	8000d9a <__aeabi_dadd+0x2d6>
 8000d98:	e710      	b.n	8000bbc <__aeabi_dadd+0xf8>
 8000d9a:	e093      	b.n	8000ec4 <__aeabi_dadd+0x400>
 8000d9c:	2a00      	cmp	r2, #0
 8000d9e:	d074      	beq.n	8000e8a <__aeabi_dadd+0x3c6>
 8000da0:	464a      	mov	r2, r9
 8000da2:	1bd2      	subs	r2, r2, r7
 8000da4:	2f00      	cmp	r7, #0
 8000da6:	d100      	bne.n	8000daa <__aeabi_dadd+0x2e6>
 8000da8:	e0c7      	b.n	8000f3a <__aeabi_dadd+0x476>
 8000daa:	4928      	ldr	r1, [pc, #160]	@ (8000e4c <__aeabi_dadd+0x388>)
 8000dac:	4589      	cmp	r9, r1
 8000dae:	d100      	bne.n	8000db2 <__aeabi_dadd+0x2ee>
 8000db0:	e185      	b.n	80010be <__aeabi_dadd+0x5fa>
 8000db2:	2501      	movs	r5, #1
 8000db4:	2a38      	cmp	r2, #56	@ 0x38
 8000db6:	dc12      	bgt.n	8000dde <__aeabi_dadd+0x31a>
 8000db8:	2180      	movs	r1, #128	@ 0x80
 8000dba:	0409      	lsls	r1, r1, #16
 8000dbc:	430c      	orrs	r4, r1
 8000dbe:	2a1f      	cmp	r2, #31
 8000dc0:	dd00      	ble.n	8000dc4 <__aeabi_dadd+0x300>
 8000dc2:	e1ab      	b.n	800111c <__aeabi_dadd+0x658>
 8000dc4:	2120      	movs	r1, #32
 8000dc6:	0025      	movs	r5, r4
 8000dc8:	1a89      	subs	r1, r1, r2
 8000dca:	0007      	movs	r7, r0
 8000dcc:	4088      	lsls	r0, r1
 8000dce:	408d      	lsls	r5, r1
 8000dd0:	40d7      	lsrs	r7, r2
 8000dd2:	1e41      	subs	r1, r0, #1
 8000dd4:	4188      	sbcs	r0, r1
 8000dd6:	40d4      	lsrs	r4, r2
 8000dd8:	433d      	orrs	r5, r7
 8000dda:	4305      	orrs	r5, r0
 8000ddc:	44a2      	add	sl, r4
 8000dde:	4465      	add	r5, ip
 8000de0:	4565      	cmp	r5, ip
 8000de2:	4192      	sbcs	r2, r2
 8000de4:	4252      	negs	r2, r2
 8000de6:	4452      	add	r2, sl
 8000de8:	0014      	movs	r4, r2
 8000dea:	464f      	mov	r7, r9
 8000dec:	e774      	b.n	8000cd8 <__aeabi_dadd+0x214>
 8000dee:	0028      	movs	r0, r5
 8000df0:	f001 fd6c 	bl	80028cc <__clzsi2>
 8000df4:	0003      	movs	r3, r0
 8000df6:	3318      	adds	r3, #24
 8000df8:	2b1f      	cmp	r3, #31
 8000dfa:	dc00      	bgt.n	8000dfe <__aeabi_dadd+0x33a>
 8000dfc:	e6c2      	b.n	8000b84 <__aeabi_dadd+0xc0>
 8000dfe:	002a      	movs	r2, r5
 8000e00:	3808      	subs	r0, #8
 8000e02:	4082      	lsls	r2, r0
 8000e04:	429f      	cmp	r7, r3
 8000e06:	dd00      	ble.n	8000e0a <__aeabi_dadd+0x346>
 8000e08:	e0a9      	b.n	8000f5e <__aeabi_dadd+0x49a>
 8000e0a:	1bdb      	subs	r3, r3, r7
 8000e0c:	1c58      	adds	r0, r3, #1
 8000e0e:	281f      	cmp	r0, #31
 8000e10:	dc00      	bgt.n	8000e14 <__aeabi_dadd+0x350>
 8000e12:	e1ac      	b.n	800116e <__aeabi_dadd+0x6aa>
 8000e14:	0015      	movs	r5, r2
 8000e16:	3b1f      	subs	r3, #31
 8000e18:	40dd      	lsrs	r5, r3
 8000e1a:	2820      	cmp	r0, #32
 8000e1c:	d005      	beq.n	8000e2a <__aeabi_dadd+0x366>
 8000e1e:	2340      	movs	r3, #64	@ 0x40
 8000e20:	1a1b      	subs	r3, r3, r0
 8000e22:	409a      	lsls	r2, r3
 8000e24:	1e53      	subs	r3, r2, #1
 8000e26:	419a      	sbcs	r2, r3
 8000e28:	4315      	orrs	r5, r2
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	2700      	movs	r7, #0
 8000e2e:	402b      	ands	r3, r5
 8000e30:	e7b0      	b.n	8000d94 <__aeabi_dadd+0x2d0>
 8000e32:	08ed      	lsrs	r5, r5, #3
 8000e34:	4b05      	ldr	r3, [pc, #20]	@ (8000e4c <__aeabi_dadd+0x388>)
 8000e36:	0762      	lsls	r2, r4, #29
 8000e38:	432a      	orrs	r2, r5
 8000e3a:	08e4      	lsrs	r4, r4, #3
 8000e3c:	429f      	cmp	r7, r3
 8000e3e:	d00f      	beq.n	8000e60 <__aeabi_dadd+0x39c>
 8000e40:	0324      	lsls	r4, r4, #12
 8000e42:	0b25      	lsrs	r5, r4, #12
 8000e44:	057c      	lsls	r4, r7, #21
 8000e46:	0d64      	lsrs	r4, r4, #21
 8000e48:	e6d4      	b.n	8000bf4 <__aeabi_dadd+0x130>
 8000e4a:	46c0      	nop			@ (mov r8, r8)
 8000e4c:	000007ff 	.word	0x000007ff
 8000e50:	ff7fffff 	.word	0xff7fffff
 8000e54:	000007fe 	.word	0x000007fe
 8000e58:	08c0      	lsrs	r0, r0, #3
 8000e5a:	0762      	lsls	r2, r4, #29
 8000e5c:	4302      	orrs	r2, r0
 8000e5e:	08e4      	lsrs	r4, r4, #3
 8000e60:	0013      	movs	r3, r2
 8000e62:	4323      	orrs	r3, r4
 8000e64:	d100      	bne.n	8000e68 <__aeabi_dadd+0x3a4>
 8000e66:	e186      	b.n	8001176 <__aeabi_dadd+0x6b2>
 8000e68:	2580      	movs	r5, #128	@ 0x80
 8000e6a:	032d      	lsls	r5, r5, #12
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	032d      	lsls	r5, r5, #12
 8000e70:	4cc3      	ldr	r4, [pc, #780]	@ (8001180 <__aeabi_dadd+0x6bc>)
 8000e72:	0b2d      	lsrs	r5, r5, #12
 8000e74:	e6be      	b.n	8000bf4 <__aeabi_dadd+0x130>
 8000e76:	4660      	mov	r0, ip
 8000e78:	4654      	mov	r4, sl
 8000e7a:	000e      	movs	r6, r1
 8000e7c:	0017      	movs	r7, r2
 8000e7e:	08c5      	lsrs	r5, r0, #3
 8000e80:	e7d8      	b.n	8000e34 <__aeabi_dadd+0x370>
 8000e82:	4cc0      	ldr	r4, [pc, #768]	@ (8001184 <__aeabi_dadd+0x6c0>)
 8000e84:	1aff      	subs	r7, r7, r3
 8000e86:	4014      	ands	r4, r2
 8000e88:	e696      	b.n	8000bb8 <__aeabi_dadd+0xf4>
 8000e8a:	4abf      	ldr	r2, [pc, #764]	@ (8001188 <__aeabi_dadd+0x6c4>)
 8000e8c:	1c79      	adds	r1, r7, #1
 8000e8e:	4211      	tst	r1, r2
 8000e90:	d16b      	bne.n	8000f6a <__aeabi_dadd+0x4a6>
 8000e92:	0022      	movs	r2, r4
 8000e94:	4302      	orrs	r2, r0
 8000e96:	2f00      	cmp	r7, #0
 8000e98:	d000      	beq.n	8000e9c <__aeabi_dadd+0x3d8>
 8000e9a:	e0db      	b.n	8001054 <__aeabi_dadd+0x590>
 8000e9c:	2a00      	cmp	r2, #0
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_dadd+0x3de>
 8000ea0:	e12d      	b.n	80010fe <__aeabi_dadd+0x63a>
 8000ea2:	4662      	mov	r2, ip
 8000ea4:	4653      	mov	r3, sl
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	d100      	bne.n	8000eac <__aeabi_dadd+0x3e8>
 8000eaa:	e0b6      	b.n	800101a <__aeabi_dadd+0x556>
 8000eac:	4663      	mov	r3, ip
 8000eae:	18c5      	adds	r5, r0, r3
 8000eb0:	4285      	cmp	r5, r0
 8000eb2:	4180      	sbcs	r0, r0
 8000eb4:	4454      	add	r4, sl
 8000eb6:	4240      	negs	r0, r0
 8000eb8:	1824      	adds	r4, r4, r0
 8000eba:	0223      	lsls	r3, r4, #8
 8000ebc:	d502      	bpl.n	8000ec4 <__aeabi_dadd+0x400>
 8000ebe:	000f      	movs	r7, r1
 8000ec0:	4bb0      	ldr	r3, [pc, #704]	@ (8001184 <__aeabi_dadd+0x6c0>)
 8000ec2:	401c      	ands	r4, r3
 8000ec4:	003a      	movs	r2, r7
 8000ec6:	0028      	movs	r0, r5
 8000ec8:	e7d8      	b.n	8000e7c <__aeabi_dadd+0x3b8>
 8000eca:	4662      	mov	r2, ip
 8000ecc:	1a85      	subs	r5, r0, r2
 8000ece:	42a8      	cmp	r0, r5
 8000ed0:	4192      	sbcs	r2, r2
 8000ed2:	4653      	mov	r3, sl
 8000ed4:	4252      	negs	r2, r2
 8000ed6:	4691      	mov	r9, r2
 8000ed8:	1ae3      	subs	r3, r4, r3
 8000eda:	001a      	movs	r2, r3
 8000edc:	464b      	mov	r3, r9
 8000ede:	1ad2      	subs	r2, r2, r3
 8000ee0:	0013      	movs	r3, r2
 8000ee2:	4691      	mov	r9, r2
 8000ee4:	021a      	lsls	r2, r3, #8
 8000ee6:	d454      	bmi.n	8000f92 <__aeabi_dadd+0x4ce>
 8000ee8:	464a      	mov	r2, r9
 8000eea:	464c      	mov	r4, r9
 8000eec:	432a      	orrs	r2, r5
 8000eee:	d000      	beq.n	8000ef2 <__aeabi_dadd+0x42e>
 8000ef0:	e640      	b.n	8000b74 <__aeabi_dadd+0xb0>
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	2400      	movs	r4, #0
 8000ef6:	2500      	movs	r5, #0
 8000ef8:	e67c      	b.n	8000bf4 <__aeabi_dadd+0x130>
 8000efa:	4da1      	ldr	r5, [pc, #644]	@ (8001180 <__aeabi_dadd+0x6bc>)
 8000efc:	45a9      	cmp	r9, r5
 8000efe:	d100      	bne.n	8000f02 <__aeabi_dadd+0x43e>
 8000f00:	e090      	b.n	8001024 <__aeabi_dadd+0x560>
 8000f02:	2501      	movs	r5, #1
 8000f04:	2a38      	cmp	r2, #56	@ 0x38
 8000f06:	dd00      	ble.n	8000f0a <__aeabi_dadd+0x446>
 8000f08:	e6ab      	b.n	8000c62 <__aeabi_dadd+0x19e>
 8000f0a:	2580      	movs	r5, #128	@ 0x80
 8000f0c:	042d      	lsls	r5, r5, #16
 8000f0e:	432c      	orrs	r4, r5
 8000f10:	e695      	b.n	8000c3e <__aeabi_dadd+0x17a>
 8000f12:	0011      	movs	r1, r2
 8000f14:	4655      	mov	r5, sl
 8000f16:	3920      	subs	r1, #32
 8000f18:	40cd      	lsrs	r5, r1
 8000f1a:	46a9      	mov	r9, r5
 8000f1c:	2a20      	cmp	r2, #32
 8000f1e:	d006      	beq.n	8000f2e <__aeabi_dadd+0x46a>
 8000f20:	2140      	movs	r1, #64	@ 0x40
 8000f22:	4653      	mov	r3, sl
 8000f24:	1a8a      	subs	r2, r1, r2
 8000f26:	4093      	lsls	r3, r2
 8000f28:	4662      	mov	r2, ip
 8000f2a:	431a      	orrs	r2, r3
 8000f2c:	4694      	mov	ip, r2
 8000f2e:	4665      	mov	r5, ip
 8000f30:	1e6b      	subs	r3, r5, #1
 8000f32:	419d      	sbcs	r5, r3
 8000f34:	464b      	mov	r3, r9
 8000f36:	431d      	orrs	r5, r3
 8000f38:	e612      	b.n	8000b60 <__aeabi_dadd+0x9c>
 8000f3a:	0021      	movs	r1, r4
 8000f3c:	4301      	orrs	r1, r0
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_dadd+0x47e>
 8000f40:	e0c4      	b.n	80010cc <__aeabi_dadd+0x608>
 8000f42:	1e51      	subs	r1, r2, #1
 8000f44:	2a01      	cmp	r2, #1
 8000f46:	d100      	bne.n	8000f4a <__aeabi_dadd+0x486>
 8000f48:	e0fb      	b.n	8001142 <__aeabi_dadd+0x67e>
 8000f4a:	4d8d      	ldr	r5, [pc, #564]	@ (8001180 <__aeabi_dadd+0x6bc>)
 8000f4c:	42aa      	cmp	r2, r5
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_dadd+0x48e>
 8000f50:	e0b5      	b.n	80010be <__aeabi_dadd+0x5fa>
 8000f52:	2501      	movs	r5, #1
 8000f54:	2938      	cmp	r1, #56	@ 0x38
 8000f56:	dd00      	ble.n	8000f5a <__aeabi_dadd+0x496>
 8000f58:	e741      	b.n	8000dde <__aeabi_dadd+0x31a>
 8000f5a:	000a      	movs	r2, r1
 8000f5c:	e72f      	b.n	8000dbe <__aeabi_dadd+0x2fa>
 8000f5e:	4c89      	ldr	r4, [pc, #548]	@ (8001184 <__aeabi_dadd+0x6c0>)
 8000f60:	1aff      	subs	r7, r7, r3
 8000f62:	4014      	ands	r4, r2
 8000f64:	0762      	lsls	r2, r4, #29
 8000f66:	08e4      	lsrs	r4, r4, #3
 8000f68:	e76a      	b.n	8000e40 <__aeabi_dadd+0x37c>
 8000f6a:	4a85      	ldr	r2, [pc, #532]	@ (8001180 <__aeabi_dadd+0x6bc>)
 8000f6c:	4291      	cmp	r1, r2
 8000f6e:	d100      	bne.n	8000f72 <__aeabi_dadd+0x4ae>
 8000f70:	e0e3      	b.n	800113a <__aeabi_dadd+0x676>
 8000f72:	4663      	mov	r3, ip
 8000f74:	18c2      	adds	r2, r0, r3
 8000f76:	4282      	cmp	r2, r0
 8000f78:	4180      	sbcs	r0, r0
 8000f7a:	0023      	movs	r3, r4
 8000f7c:	4240      	negs	r0, r0
 8000f7e:	4453      	add	r3, sl
 8000f80:	181b      	adds	r3, r3, r0
 8000f82:	07dd      	lsls	r5, r3, #31
 8000f84:	085c      	lsrs	r4, r3, #1
 8000f86:	2307      	movs	r3, #7
 8000f88:	0852      	lsrs	r2, r2, #1
 8000f8a:	4315      	orrs	r5, r2
 8000f8c:	000f      	movs	r7, r1
 8000f8e:	402b      	ands	r3, r5
 8000f90:	e700      	b.n	8000d94 <__aeabi_dadd+0x2d0>
 8000f92:	4663      	mov	r3, ip
 8000f94:	1a1d      	subs	r5, r3, r0
 8000f96:	45ac      	cmp	ip, r5
 8000f98:	4192      	sbcs	r2, r2
 8000f9a:	4653      	mov	r3, sl
 8000f9c:	4252      	negs	r2, r2
 8000f9e:	1b1c      	subs	r4, r3, r4
 8000fa0:	000e      	movs	r6, r1
 8000fa2:	4688      	mov	r8, r1
 8000fa4:	1aa4      	subs	r4, r4, r2
 8000fa6:	e5e5      	b.n	8000b74 <__aeabi_dadd+0xb0>
 8000fa8:	2d00      	cmp	r5, #0
 8000faa:	d000      	beq.n	8000fae <__aeabi_dadd+0x4ea>
 8000fac:	e091      	b.n	80010d2 <__aeabi_dadd+0x60e>
 8000fae:	2a00      	cmp	r2, #0
 8000fb0:	d138      	bne.n	8001024 <__aeabi_dadd+0x560>
 8000fb2:	2480      	movs	r4, #128	@ 0x80
 8000fb4:	2600      	movs	r6, #0
 8000fb6:	0324      	lsls	r4, r4, #12
 8000fb8:	e756      	b.n	8000e68 <__aeabi_dadd+0x3a4>
 8000fba:	4663      	mov	r3, ip
 8000fbc:	18c5      	adds	r5, r0, r3
 8000fbe:	4285      	cmp	r5, r0
 8000fc0:	4180      	sbcs	r0, r0
 8000fc2:	4454      	add	r4, sl
 8000fc4:	4240      	negs	r0, r0
 8000fc6:	1824      	adds	r4, r4, r0
 8000fc8:	2701      	movs	r7, #1
 8000fca:	0223      	lsls	r3, r4, #8
 8000fcc:	d400      	bmi.n	8000fd0 <__aeabi_dadd+0x50c>
 8000fce:	e6df      	b.n	8000d90 <__aeabi_dadd+0x2cc>
 8000fd0:	2702      	movs	r7, #2
 8000fd2:	e687      	b.n	8000ce4 <__aeabi_dadd+0x220>
 8000fd4:	4663      	mov	r3, ip
 8000fd6:	1ac5      	subs	r5, r0, r3
 8000fd8:	42a8      	cmp	r0, r5
 8000fda:	4180      	sbcs	r0, r0
 8000fdc:	4653      	mov	r3, sl
 8000fde:	4240      	negs	r0, r0
 8000fe0:	1ae4      	subs	r4, r4, r3
 8000fe2:	2701      	movs	r7, #1
 8000fe4:	1a24      	subs	r4, r4, r0
 8000fe6:	e5c0      	b.n	8000b6a <__aeabi_dadd+0xa6>
 8000fe8:	0762      	lsls	r2, r4, #29
 8000fea:	08c0      	lsrs	r0, r0, #3
 8000fec:	4302      	orrs	r2, r0
 8000fee:	08e4      	lsrs	r4, r4, #3
 8000ff0:	e736      	b.n	8000e60 <__aeabi_dadd+0x39c>
 8000ff2:	0011      	movs	r1, r2
 8000ff4:	4653      	mov	r3, sl
 8000ff6:	3920      	subs	r1, #32
 8000ff8:	40cb      	lsrs	r3, r1
 8000ffa:	4699      	mov	r9, r3
 8000ffc:	2a20      	cmp	r2, #32
 8000ffe:	d006      	beq.n	800100e <__aeabi_dadd+0x54a>
 8001000:	2140      	movs	r1, #64	@ 0x40
 8001002:	4653      	mov	r3, sl
 8001004:	1a8a      	subs	r2, r1, r2
 8001006:	4093      	lsls	r3, r2
 8001008:	4662      	mov	r2, ip
 800100a:	431a      	orrs	r2, r3
 800100c:	4694      	mov	ip, r2
 800100e:	4665      	mov	r5, ip
 8001010:	1e6b      	subs	r3, r5, #1
 8001012:	419d      	sbcs	r5, r3
 8001014:	464b      	mov	r3, r9
 8001016:	431d      	orrs	r5, r3
 8001018:	e659      	b.n	8000cce <__aeabi_dadd+0x20a>
 800101a:	0762      	lsls	r2, r4, #29
 800101c:	08c0      	lsrs	r0, r0, #3
 800101e:	4302      	orrs	r2, r0
 8001020:	08e4      	lsrs	r4, r4, #3
 8001022:	e70d      	b.n	8000e40 <__aeabi_dadd+0x37c>
 8001024:	4653      	mov	r3, sl
 8001026:	075a      	lsls	r2, r3, #29
 8001028:	4663      	mov	r3, ip
 800102a:	08d8      	lsrs	r0, r3, #3
 800102c:	4653      	mov	r3, sl
 800102e:	000e      	movs	r6, r1
 8001030:	4302      	orrs	r2, r0
 8001032:	08dc      	lsrs	r4, r3, #3
 8001034:	e714      	b.n	8000e60 <__aeabi_dadd+0x39c>
 8001036:	0015      	movs	r5, r2
 8001038:	0026      	movs	r6, r4
 800103a:	3d20      	subs	r5, #32
 800103c:	40ee      	lsrs	r6, r5
 800103e:	2a20      	cmp	r2, #32
 8001040:	d003      	beq.n	800104a <__aeabi_dadd+0x586>
 8001042:	2540      	movs	r5, #64	@ 0x40
 8001044:	1aaa      	subs	r2, r5, r2
 8001046:	4094      	lsls	r4, r2
 8001048:	4320      	orrs	r0, r4
 800104a:	1e42      	subs	r2, r0, #1
 800104c:	4190      	sbcs	r0, r2
 800104e:	0005      	movs	r5, r0
 8001050:	4335      	orrs	r5, r6
 8001052:	e606      	b.n	8000c62 <__aeabi_dadd+0x19e>
 8001054:	2a00      	cmp	r2, #0
 8001056:	d07c      	beq.n	8001152 <__aeabi_dadd+0x68e>
 8001058:	4662      	mov	r2, ip
 800105a:	4653      	mov	r3, sl
 800105c:	08c0      	lsrs	r0, r0, #3
 800105e:	431a      	orrs	r2, r3
 8001060:	d100      	bne.n	8001064 <__aeabi_dadd+0x5a0>
 8001062:	e6fa      	b.n	8000e5a <__aeabi_dadd+0x396>
 8001064:	0762      	lsls	r2, r4, #29
 8001066:	4310      	orrs	r0, r2
 8001068:	2280      	movs	r2, #128	@ 0x80
 800106a:	08e4      	lsrs	r4, r4, #3
 800106c:	0312      	lsls	r2, r2, #12
 800106e:	4214      	tst	r4, r2
 8001070:	d008      	beq.n	8001084 <__aeabi_dadd+0x5c0>
 8001072:	08d9      	lsrs	r1, r3, #3
 8001074:	4211      	tst	r1, r2
 8001076:	d105      	bne.n	8001084 <__aeabi_dadd+0x5c0>
 8001078:	4663      	mov	r3, ip
 800107a:	08d8      	lsrs	r0, r3, #3
 800107c:	4653      	mov	r3, sl
 800107e:	000c      	movs	r4, r1
 8001080:	075b      	lsls	r3, r3, #29
 8001082:	4318      	orrs	r0, r3
 8001084:	0f42      	lsrs	r2, r0, #29
 8001086:	00c0      	lsls	r0, r0, #3
 8001088:	08c0      	lsrs	r0, r0, #3
 800108a:	0752      	lsls	r2, r2, #29
 800108c:	4302      	orrs	r2, r0
 800108e:	e6e7      	b.n	8000e60 <__aeabi_dadd+0x39c>
 8001090:	2a00      	cmp	r2, #0
 8001092:	d100      	bne.n	8001096 <__aeabi_dadd+0x5d2>
 8001094:	e72d      	b.n	8000ef2 <__aeabi_dadd+0x42e>
 8001096:	4663      	mov	r3, ip
 8001098:	08d8      	lsrs	r0, r3, #3
 800109a:	4653      	mov	r3, sl
 800109c:	075a      	lsls	r2, r3, #29
 800109e:	000e      	movs	r6, r1
 80010a0:	4302      	orrs	r2, r0
 80010a2:	08dc      	lsrs	r4, r3, #3
 80010a4:	e6cc      	b.n	8000e40 <__aeabi_dadd+0x37c>
 80010a6:	4663      	mov	r3, ip
 80010a8:	1a1d      	subs	r5, r3, r0
 80010aa:	45ac      	cmp	ip, r5
 80010ac:	4192      	sbcs	r2, r2
 80010ae:	4653      	mov	r3, sl
 80010b0:	4252      	negs	r2, r2
 80010b2:	1b1c      	subs	r4, r3, r4
 80010b4:	000e      	movs	r6, r1
 80010b6:	4688      	mov	r8, r1
 80010b8:	1aa4      	subs	r4, r4, r2
 80010ba:	3701      	adds	r7, #1
 80010bc:	e555      	b.n	8000b6a <__aeabi_dadd+0xa6>
 80010be:	4663      	mov	r3, ip
 80010c0:	08d9      	lsrs	r1, r3, #3
 80010c2:	4653      	mov	r3, sl
 80010c4:	075a      	lsls	r2, r3, #29
 80010c6:	430a      	orrs	r2, r1
 80010c8:	08dc      	lsrs	r4, r3, #3
 80010ca:	e6c9      	b.n	8000e60 <__aeabi_dadd+0x39c>
 80010cc:	4660      	mov	r0, ip
 80010ce:	4654      	mov	r4, sl
 80010d0:	e6d4      	b.n	8000e7c <__aeabi_dadd+0x3b8>
 80010d2:	08c0      	lsrs	r0, r0, #3
 80010d4:	2a00      	cmp	r2, #0
 80010d6:	d100      	bne.n	80010da <__aeabi_dadd+0x616>
 80010d8:	e6bf      	b.n	8000e5a <__aeabi_dadd+0x396>
 80010da:	0762      	lsls	r2, r4, #29
 80010dc:	4310      	orrs	r0, r2
 80010de:	2280      	movs	r2, #128	@ 0x80
 80010e0:	08e4      	lsrs	r4, r4, #3
 80010e2:	0312      	lsls	r2, r2, #12
 80010e4:	4214      	tst	r4, r2
 80010e6:	d0cd      	beq.n	8001084 <__aeabi_dadd+0x5c0>
 80010e8:	08dd      	lsrs	r5, r3, #3
 80010ea:	4215      	tst	r5, r2
 80010ec:	d1ca      	bne.n	8001084 <__aeabi_dadd+0x5c0>
 80010ee:	4663      	mov	r3, ip
 80010f0:	08d8      	lsrs	r0, r3, #3
 80010f2:	4653      	mov	r3, sl
 80010f4:	075b      	lsls	r3, r3, #29
 80010f6:	000e      	movs	r6, r1
 80010f8:	002c      	movs	r4, r5
 80010fa:	4318      	orrs	r0, r3
 80010fc:	e7c2      	b.n	8001084 <__aeabi_dadd+0x5c0>
 80010fe:	4663      	mov	r3, ip
 8001100:	08d9      	lsrs	r1, r3, #3
 8001102:	4653      	mov	r3, sl
 8001104:	075a      	lsls	r2, r3, #29
 8001106:	430a      	orrs	r2, r1
 8001108:	08dc      	lsrs	r4, r3, #3
 800110a:	e699      	b.n	8000e40 <__aeabi_dadd+0x37c>
 800110c:	4663      	mov	r3, ip
 800110e:	08d8      	lsrs	r0, r3, #3
 8001110:	4653      	mov	r3, sl
 8001112:	075a      	lsls	r2, r3, #29
 8001114:	000e      	movs	r6, r1
 8001116:	4302      	orrs	r2, r0
 8001118:	08dc      	lsrs	r4, r3, #3
 800111a:	e6a1      	b.n	8000e60 <__aeabi_dadd+0x39c>
 800111c:	0011      	movs	r1, r2
 800111e:	0027      	movs	r7, r4
 8001120:	3920      	subs	r1, #32
 8001122:	40cf      	lsrs	r7, r1
 8001124:	2a20      	cmp	r2, #32
 8001126:	d003      	beq.n	8001130 <__aeabi_dadd+0x66c>
 8001128:	2140      	movs	r1, #64	@ 0x40
 800112a:	1a8a      	subs	r2, r1, r2
 800112c:	4094      	lsls	r4, r2
 800112e:	4320      	orrs	r0, r4
 8001130:	1e42      	subs	r2, r0, #1
 8001132:	4190      	sbcs	r0, r2
 8001134:	0005      	movs	r5, r0
 8001136:	433d      	orrs	r5, r7
 8001138:	e651      	b.n	8000dde <__aeabi_dadd+0x31a>
 800113a:	000c      	movs	r4, r1
 800113c:	2500      	movs	r5, #0
 800113e:	2200      	movs	r2, #0
 8001140:	e558      	b.n	8000bf4 <__aeabi_dadd+0x130>
 8001142:	4460      	add	r0, ip
 8001144:	4560      	cmp	r0, ip
 8001146:	4192      	sbcs	r2, r2
 8001148:	4454      	add	r4, sl
 800114a:	4252      	negs	r2, r2
 800114c:	0005      	movs	r5, r0
 800114e:	18a4      	adds	r4, r4, r2
 8001150:	e73a      	b.n	8000fc8 <__aeabi_dadd+0x504>
 8001152:	4653      	mov	r3, sl
 8001154:	075a      	lsls	r2, r3, #29
 8001156:	4663      	mov	r3, ip
 8001158:	08d9      	lsrs	r1, r3, #3
 800115a:	4653      	mov	r3, sl
 800115c:	430a      	orrs	r2, r1
 800115e:	08dc      	lsrs	r4, r3, #3
 8001160:	e67e      	b.n	8000e60 <__aeabi_dadd+0x39c>
 8001162:	001a      	movs	r2, r3
 8001164:	001c      	movs	r4, r3
 8001166:	432a      	orrs	r2, r5
 8001168:	d000      	beq.n	800116c <__aeabi_dadd+0x6a8>
 800116a:	e6ab      	b.n	8000ec4 <__aeabi_dadd+0x400>
 800116c:	e6c1      	b.n	8000ef2 <__aeabi_dadd+0x42e>
 800116e:	2120      	movs	r1, #32
 8001170:	2500      	movs	r5, #0
 8001172:	1a09      	subs	r1, r1, r0
 8001174:	e519      	b.n	8000baa <__aeabi_dadd+0xe6>
 8001176:	2200      	movs	r2, #0
 8001178:	2500      	movs	r5, #0
 800117a:	4c01      	ldr	r4, [pc, #4]	@ (8001180 <__aeabi_dadd+0x6bc>)
 800117c:	e53a      	b.n	8000bf4 <__aeabi_dadd+0x130>
 800117e:	46c0      	nop			@ (mov r8, r8)
 8001180:	000007ff 	.word	0x000007ff
 8001184:	ff7fffff 	.word	0xff7fffff
 8001188:	000007fe 	.word	0x000007fe

0800118c <__aeabi_ddiv>:
 800118c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118e:	46de      	mov	lr, fp
 8001190:	4645      	mov	r5, r8
 8001192:	4657      	mov	r7, sl
 8001194:	464e      	mov	r6, r9
 8001196:	b5e0      	push	{r5, r6, r7, lr}
 8001198:	b087      	sub	sp, #28
 800119a:	9200      	str	r2, [sp, #0]
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	030b      	lsls	r3, r1, #12
 80011a0:	0b1b      	lsrs	r3, r3, #12
 80011a2:	469b      	mov	fp, r3
 80011a4:	0fca      	lsrs	r2, r1, #31
 80011a6:	004b      	lsls	r3, r1, #1
 80011a8:	0004      	movs	r4, r0
 80011aa:	4680      	mov	r8, r0
 80011ac:	0d5b      	lsrs	r3, r3, #21
 80011ae:	9202      	str	r2, [sp, #8]
 80011b0:	d100      	bne.n	80011b4 <__aeabi_ddiv+0x28>
 80011b2:	e16a      	b.n	800148a <__aeabi_ddiv+0x2fe>
 80011b4:	4ad4      	ldr	r2, [pc, #848]	@ (8001508 <__aeabi_ddiv+0x37c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d100      	bne.n	80011bc <__aeabi_ddiv+0x30>
 80011ba:	e18c      	b.n	80014d6 <__aeabi_ddiv+0x34a>
 80011bc:	4659      	mov	r1, fp
 80011be:	0f42      	lsrs	r2, r0, #29
 80011c0:	00c9      	lsls	r1, r1, #3
 80011c2:	430a      	orrs	r2, r1
 80011c4:	2180      	movs	r1, #128	@ 0x80
 80011c6:	0409      	lsls	r1, r1, #16
 80011c8:	4311      	orrs	r1, r2
 80011ca:	00c2      	lsls	r2, r0, #3
 80011cc:	4690      	mov	r8, r2
 80011ce:	4acf      	ldr	r2, [pc, #828]	@ (800150c <__aeabi_ddiv+0x380>)
 80011d0:	4689      	mov	r9, r1
 80011d2:	4692      	mov	sl, r2
 80011d4:	449a      	add	sl, r3
 80011d6:	2300      	movs	r3, #0
 80011d8:	2400      	movs	r4, #0
 80011da:	9303      	str	r3, [sp, #12]
 80011dc:	9e00      	ldr	r6, [sp, #0]
 80011de:	9f01      	ldr	r7, [sp, #4]
 80011e0:	033b      	lsls	r3, r7, #12
 80011e2:	0b1b      	lsrs	r3, r3, #12
 80011e4:	469b      	mov	fp, r3
 80011e6:	007b      	lsls	r3, r7, #1
 80011e8:	0030      	movs	r0, r6
 80011ea:	0d5b      	lsrs	r3, r3, #21
 80011ec:	0ffd      	lsrs	r5, r7, #31
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d100      	bne.n	80011f4 <__aeabi_ddiv+0x68>
 80011f2:	e128      	b.n	8001446 <__aeabi_ddiv+0x2ba>
 80011f4:	4ac4      	ldr	r2, [pc, #784]	@ (8001508 <__aeabi_ddiv+0x37c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d100      	bne.n	80011fc <__aeabi_ddiv+0x70>
 80011fa:	e177      	b.n	80014ec <__aeabi_ddiv+0x360>
 80011fc:	4659      	mov	r1, fp
 80011fe:	0f72      	lsrs	r2, r6, #29
 8001200:	00c9      	lsls	r1, r1, #3
 8001202:	430a      	orrs	r2, r1
 8001204:	2180      	movs	r1, #128	@ 0x80
 8001206:	0409      	lsls	r1, r1, #16
 8001208:	4311      	orrs	r1, r2
 800120a:	468b      	mov	fp, r1
 800120c:	49bf      	ldr	r1, [pc, #764]	@ (800150c <__aeabi_ddiv+0x380>)
 800120e:	00f2      	lsls	r2, r6, #3
 8001210:	468c      	mov	ip, r1
 8001212:	4651      	mov	r1, sl
 8001214:	4463      	add	r3, ip
 8001216:	1acb      	subs	r3, r1, r3
 8001218:	469a      	mov	sl, r3
 800121a:	2300      	movs	r3, #0
 800121c:	9e02      	ldr	r6, [sp, #8]
 800121e:	406e      	eors	r6, r5
 8001220:	2c0f      	cmp	r4, #15
 8001222:	d827      	bhi.n	8001274 <__aeabi_ddiv+0xe8>
 8001224:	49ba      	ldr	r1, [pc, #744]	@ (8001510 <__aeabi_ddiv+0x384>)
 8001226:	00a4      	lsls	r4, r4, #2
 8001228:	5909      	ldr	r1, [r1, r4]
 800122a:	468f      	mov	pc, r1
 800122c:	46cb      	mov	fp, r9
 800122e:	4642      	mov	r2, r8
 8001230:	9e02      	ldr	r6, [sp, #8]
 8001232:	9b03      	ldr	r3, [sp, #12]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d016      	beq.n	8001266 <__aeabi_ddiv+0xda>
 8001238:	2b03      	cmp	r3, #3
 800123a:	d100      	bne.n	800123e <__aeabi_ddiv+0xb2>
 800123c:	e2a6      	b.n	800178c <__aeabi_ddiv+0x600>
 800123e:	2b01      	cmp	r3, #1
 8001240:	d000      	beq.n	8001244 <__aeabi_ddiv+0xb8>
 8001242:	e0df      	b.n	8001404 <__aeabi_ddiv+0x278>
 8001244:	2200      	movs	r2, #0
 8001246:	2300      	movs	r3, #0
 8001248:	2400      	movs	r4, #0
 800124a:	4690      	mov	r8, r2
 800124c:	051b      	lsls	r3, r3, #20
 800124e:	4323      	orrs	r3, r4
 8001250:	07f6      	lsls	r6, r6, #31
 8001252:	4333      	orrs	r3, r6
 8001254:	4640      	mov	r0, r8
 8001256:	0019      	movs	r1, r3
 8001258:	b007      	add	sp, #28
 800125a:	bcf0      	pop	{r4, r5, r6, r7}
 800125c:	46bb      	mov	fp, r7
 800125e:	46b2      	mov	sl, r6
 8001260:	46a9      	mov	r9, r5
 8001262:	46a0      	mov	r8, r4
 8001264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001266:	2200      	movs	r2, #0
 8001268:	2400      	movs	r4, #0
 800126a:	4690      	mov	r8, r2
 800126c:	4ba6      	ldr	r3, [pc, #664]	@ (8001508 <__aeabi_ddiv+0x37c>)
 800126e:	e7ed      	b.n	800124c <__aeabi_ddiv+0xc0>
 8001270:	002e      	movs	r6, r5
 8001272:	e7df      	b.n	8001234 <__aeabi_ddiv+0xa8>
 8001274:	45cb      	cmp	fp, r9
 8001276:	d200      	bcs.n	800127a <__aeabi_ddiv+0xee>
 8001278:	e1d4      	b.n	8001624 <__aeabi_ddiv+0x498>
 800127a:	d100      	bne.n	800127e <__aeabi_ddiv+0xf2>
 800127c:	e1cf      	b.n	800161e <__aeabi_ddiv+0x492>
 800127e:	2301      	movs	r3, #1
 8001280:	425b      	negs	r3, r3
 8001282:	469c      	mov	ip, r3
 8001284:	4644      	mov	r4, r8
 8001286:	4648      	mov	r0, r9
 8001288:	2700      	movs	r7, #0
 800128a:	44e2      	add	sl, ip
 800128c:	465b      	mov	r3, fp
 800128e:	0e15      	lsrs	r5, r2, #24
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	431d      	orrs	r5, r3
 8001294:	0c19      	lsrs	r1, r3, #16
 8001296:	042b      	lsls	r3, r5, #16
 8001298:	0212      	lsls	r2, r2, #8
 800129a:	9500      	str	r5, [sp, #0]
 800129c:	0c1d      	lsrs	r5, r3, #16
 800129e:	4691      	mov	r9, r2
 80012a0:	9102      	str	r1, [sp, #8]
 80012a2:	9503      	str	r5, [sp, #12]
 80012a4:	f7fe ffd2 	bl	800024c <__aeabi_uidivmod>
 80012a8:	0002      	movs	r2, r0
 80012aa:	436a      	muls	r2, r5
 80012ac:	040b      	lsls	r3, r1, #16
 80012ae:	0c21      	lsrs	r1, r4, #16
 80012b0:	4680      	mov	r8, r0
 80012b2:	4319      	orrs	r1, r3
 80012b4:	428a      	cmp	r2, r1
 80012b6:	d909      	bls.n	80012cc <__aeabi_ddiv+0x140>
 80012b8:	9d00      	ldr	r5, [sp, #0]
 80012ba:	2301      	movs	r3, #1
 80012bc:	46ac      	mov	ip, r5
 80012be:	425b      	negs	r3, r3
 80012c0:	4461      	add	r1, ip
 80012c2:	469c      	mov	ip, r3
 80012c4:	44e0      	add	r8, ip
 80012c6:	428d      	cmp	r5, r1
 80012c8:	d800      	bhi.n	80012cc <__aeabi_ddiv+0x140>
 80012ca:	e1fb      	b.n	80016c4 <__aeabi_ddiv+0x538>
 80012cc:	1a88      	subs	r0, r1, r2
 80012ce:	9902      	ldr	r1, [sp, #8]
 80012d0:	f7fe ffbc 	bl	800024c <__aeabi_uidivmod>
 80012d4:	9a03      	ldr	r2, [sp, #12]
 80012d6:	0424      	lsls	r4, r4, #16
 80012d8:	4342      	muls	r2, r0
 80012da:	0409      	lsls	r1, r1, #16
 80012dc:	0c24      	lsrs	r4, r4, #16
 80012de:	0003      	movs	r3, r0
 80012e0:	430c      	orrs	r4, r1
 80012e2:	42a2      	cmp	r2, r4
 80012e4:	d906      	bls.n	80012f4 <__aeabi_ddiv+0x168>
 80012e6:	9900      	ldr	r1, [sp, #0]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	468c      	mov	ip, r1
 80012ec:	4464      	add	r4, ip
 80012ee:	42a1      	cmp	r1, r4
 80012f0:	d800      	bhi.n	80012f4 <__aeabi_ddiv+0x168>
 80012f2:	e1e1      	b.n	80016b8 <__aeabi_ddiv+0x52c>
 80012f4:	1aa0      	subs	r0, r4, r2
 80012f6:	4642      	mov	r2, r8
 80012f8:	0412      	lsls	r2, r2, #16
 80012fa:	431a      	orrs	r2, r3
 80012fc:	4693      	mov	fp, r2
 80012fe:	464b      	mov	r3, r9
 8001300:	4659      	mov	r1, fp
 8001302:	0c1b      	lsrs	r3, r3, #16
 8001304:	001d      	movs	r5, r3
 8001306:	9304      	str	r3, [sp, #16]
 8001308:	040b      	lsls	r3, r1, #16
 800130a:	4649      	mov	r1, r9
 800130c:	0409      	lsls	r1, r1, #16
 800130e:	0c09      	lsrs	r1, r1, #16
 8001310:	000c      	movs	r4, r1
 8001312:	0c1b      	lsrs	r3, r3, #16
 8001314:	435c      	muls	r4, r3
 8001316:	0c12      	lsrs	r2, r2, #16
 8001318:	436b      	muls	r3, r5
 800131a:	4688      	mov	r8, r1
 800131c:	4351      	muls	r1, r2
 800131e:	436a      	muls	r2, r5
 8001320:	0c25      	lsrs	r5, r4, #16
 8001322:	46ac      	mov	ip, r5
 8001324:	185b      	adds	r3, r3, r1
 8001326:	4463      	add	r3, ip
 8001328:	4299      	cmp	r1, r3
 800132a:	d903      	bls.n	8001334 <__aeabi_ddiv+0x1a8>
 800132c:	2180      	movs	r1, #128	@ 0x80
 800132e:	0249      	lsls	r1, r1, #9
 8001330:	468c      	mov	ip, r1
 8001332:	4462      	add	r2, ip
 8001334:	0c19      	lsrs	r1, r3, #16
 8001336:	0424      	lsls	r4, r4, #16
 8001338:	041b      	lsls	r3, r3, #16
 800133a:	0c24      	lsrs	r4, r4, #16
 800133c:	188a      	adds	r2, r1, r2
 800133e:	191c      	adds	r4, r3, r4
 8001340:	4290      	cmp	r0, r2
 8001342:	d302      	bcc.n	800134a <__aeabi_ddiv+0x1be>
 8001344:	d116      	bne.n	8001374 <__aeabi_ddiv+0x1e8>
 8001346:	42a7      	cmp	r7, r4
 8001348:	d214      	bcs.n	8001374 <__aeabi_ddiv+0x1e8>
 800134a:	465b      	mov	r3, fp
 800134c:	9d00      	ldr	r5, [sp, #0]
 800134e:	3b01      	subs	r3, #1
 8001350:	444f      	add	r7, r9
 8001352:	9305      	str	r3, [sp, #20]
 8001354:	454f      	cmp	r7, r9
 8001356:	419b      	sbcs	r3, r3
 8001358:	46ac      	mov	ip, r5
 800135a:	425b      	negs	r3, r3
 800135c:	4463      	add	r3, ip
 800135e:	18c0      	adds	r0, r0, r3
 8001360:	4285      	cmp	r5, r0
 8001362:	d300      	bcc.n	8001366 <__aeabi_ddiv+0x1da>
 8001364:	e1a1      	b.n	80016aa <__aeabi_ddiv+0x51e>
 8001366:	4282      	cmp	r2, r0
 8001368:	d900      	bls.n	800136c <__aeabi_ddiv+0x1e0>
 800136a:	e1f6      	b.n	800175a <__aeabi_ddiv+0x5ce>
 800136c:	d100      	bne.n	8001370 <__aeabi_ddiv+0x1e4>
 800136e:	e1f1      	b.n	8001754 <__aeabi_ddiv+0x5c8>
 8001370:	9b05      	ldr	r3, [sp, #20]
 8001372:	469b      	mov	fp, r3
 8001374:	1b3c      	subs	r4, r7, r4
 8001376:	42a7      	cmp	r7, r4
 8001378:	41bf      	sbcs	r7, r7
 800137a:	9d00      	ldr	r5, [sp, #0]
 800137c:	1a80      	subs	r0, r0, r2
 800137e:	427f      	negs	r7, r7
 8001380:	1bc0      	subs	r0, r0, r7
 8001382:	4285      	cmp	r5, r0
 8001384:	d100      	bne.n	8001388 <__aeabi_ddiv+0x1fc>
 8001386:	e1d0      	b.n	800172a <__aeabi_ddiv+0x59e>
 8001388:	9902      	ldr	r1, [sp, #8]
 800138a:	f7fe ff5f 	bl	800024c <__aeabi_uidivmod>
 800138e:	9a03      	ldr	r2, [sp, #12]
 8001390:	040b      	lsls	r3, r1, #16
 8001392:	4342      	muls	r2, r0
 8001394:	0c21      	lsrs	r1, r4, #16
 8001396:	0007      	movs	r7, r0
 8001398:	4319      	orrs	r1, r3
 800139a:	428a      	cmp	r2, r1
 800139c:	d900      	bls.n	80013a0 <__aeabi_ddiv+0x214>
 800139e:	e178      	b.n	8001692 <__aeabi_ddiv+0x506>
 80013a0:	1a88      	subs	r0, r1, r2
 80013a2:	9902      	ldr	r1, [sp, #8]
 80013a4:	f7fe ff52 	bl	800024c <__aeabi_uidivmod>
 80013a8:	9a03      	ldr	r2, [sp, #12]
 80013aa:	0424      	lsls	r4, r4, #16
 80013ac:	4342      	muls	r2, r0
 80013ae:	0409      	lsls	r1, r1, #16
 80013b0:	0c24      	lsrs	r4, r4, #16
 80013b2:	0003      	movs	r3, r0
 80013b4:	430c      	orrs	r4, r1
 80013b6:	42a2      	cmp	r2, r4
 80013b8:	d900      	bls.n	80013bc <__aeabi_ddiv+0x230>
 80013ba:	e15d      	b.n	8001678 <__aeabi_ddiv+0x4ec>
 80013bc:	4641      	mov	r1, r8
 80013be:	1aa4      	subs	r4, r4, r2
 80013c0:	043a      	lsls	r2, r7, #16
 80013c2:	431a      	orrs	r2, r3
 80013c4:	9d04      	ldr	r5, [sp, #16]
 80013c6:	0413      	lsls	r3, r2, #16
 80013c8:	0c1b      	lsrs	r3, r3, #16
 80013ca:	4359      	muls	r1, r3
 80013cc:	4647      	mov	r7, r8
 80013ce:	436b      	muls	r3, r5
 80013d0:	469c      	mov	ip, r3
 80013d2:	0c10      	lsrs	r0, r2, #16
 80013d4:	4347      	muls	r7, r0
 80013d6:	0c0b      	lsrs	r3, r1, #16
 80013d8:	44bc      	add	ip, r7
 80013da:	4463      	add	r3, ip
 80013dc:	4368      	muls	r0, r5
 80013de:	429f      	cmp	r7, r3
 80013e0:	d903      	bls.n	80013ea <__aeabi_ddiv+0x25e>
 80013e2:	2580      	movs	r5, #128	@ 0x80
 80013e4:	026d      	lsls	r5, r5, #9
 80013e6:	46ac      	mov	ip, r5
 80013e8:	4460      	add	r0, ip
 80013ea:	0c1f      	lsrs	r7, r3, #16
 80013ec:	0409      	lsls	r1, r1, #16
 80013ee:	041b      	lsls	r3, r3, #16
 80013f0:	0c09      	lsrs	r1, r1, #16
 80013f2:	183f      	adds	r7, r7, r0
 80013f4:	185b      	adds	r3, r3, r1
 80013f6:	42bc      	cmp	r4, r7
 80013f8:	d200      	bcs.n	80013fc <__aeabi_ddiv+0x270>
 80013fa:	e102      	b.n	8001602 <__aeabi_ddiv+0x476>
 80013fc:	d100      	bne.n	8001400 <__aeabi_ddiv+0x274>
 80013fe:	e0fd      	b.n	80015fc <__aeabi_ddiv+0x470>
 8001400:	2301      	movs	r3, #1
 8001402:	431a      	orrs	r2, r3
 8001404:	4b43      	ldr	r3, [pc, #268]	@ (8001514 <__aeabi_ddiv+0x388>)
 8001406:	4453      	add	r3, sl
 8001408:	2b00      	cmp	r3, #0
 800140a:	dc00      	bgt.n	800140e <__aeabi_ddiv+0x282>
 800140c:	e0ae      	b.n	800156c <__aeabi_ddiv+0x3e0>
 800140e:	0751      	lsls	r1, r2, #29
 8001410:	d000      	beq.n	8001414 <__aeabi_ddiv+0x288>
 8001412:	e198      	b.n	8001746 <__aeabi_ddiv+0x5ba>
 8001414:	4659      	mov	r1, fp
 8001416:	01c9      	lsls	r1, r1, #7
 8001418:	d506      	bpl.n	8001428 <__aeabi_ddiv+0x29c>
 800141a:	4659      	mov	r1, fp
 800141c:	4b3e      	ldr	r3, [pc, #248]	@ (8001518 <__aeabi_ddiv+0x38c>)
 800141e:	4019      	ands	r1, r3
 8001420:	2380      	movs	r3, #128	@ 0x80
 8001422:	468b      	mov	fp, r1
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	4453      	add	r3, sl
 8001428:	493c      	ldr	r1, [pc, #240]	@ (800151c <__aeabi_ddiv+0x390>)
 800142a:	428b      	cmp	r3, r1
 800142c:	dd00      	ble.n	8001430 <__aeabi_ddiv+0x2a4>
 800142e:	e71a      	b.n	8001266 <__aeabi_ddiv+0xda>
 8001430:	4659      	mov	r1, fp
 8001432:	08d2      	lsrs	r2, r2, #3
 8001434:	0749      	lsls	r1, r1, #29
 8001436:	4311      	orrs	r1, r2
 8001438:	465a      	mov	r2, fp
 800143a:	055b      	lsls	r3, r3, #21
 800143c:	0254      	lsls	r4, r2, #9
 800143e:	4688      	mov	r8, r1
 8001440:	0b24      	lsrs	r4, r4, #12
 8001442:	0d5b      	lsrs	r3, r3, #21
 8001444:	e702      	b.n	800124c <__aeabi_ddiv+0xc0>
 8001446:	465a      	mov	r2, fp
 8001448:	9b00      	ldr	r3, [sp, #0]
 800144a:	431a      	orrs	r2, r3
 800144c:	d100      	bne.n	8001450 <__aeabi_ddiv+0x2c4>
 800144e:	e07e      	b.n	800154e <__aeabi_ddiv+0x3c2>
 8001450:	465b      	mov	r3, fp
 8001452:	2b00      	cmp	r3, #0
 8001454:	d100      	bne.n	8001458 <__aeabi_ddiv+0x2cc>
 8001456:	e100      	b.n	800165a <__aeabi_ddiv+0x4ce>
 8001458:	4658      	mov	r0, fp
 800145a:	f001 fa37 	bl	80028cc <__clzsi2>
 800145e:	0002      	movs	r2, r0
 8001460:	0003      	movs	r3, r0
 8001462:	3a0b      	subs	r2, #11
 8001464:	271d      	movs	r7, #29
 8001466:	9e00      	ldr	r6, [sp, #0]
 8001468:	1aba      	subs	r2, r7, r2
 800146a:	0019      	movs	r1, r3
 800146c:	4658      	mov	r0, fp
 800146e:	40d6      	lsrs	r6, r2
 8001470:	3908      	subs	r1, #8
 8001472:	4088      	lsls	r0, r1
 8001474:	0032      	movs	r2, r6
 8001476:	4302      	orrs	r2, r0
 8001478:	4693      	mov	fp, r2
 800147a:	9a00      	ldr	r2, [sp, #0]
 800147c:	408a      	lsls	r2, r1
 800147e:	4928      	ldr	r1, [pc, #160]	@ (8001520 <__aeabi_ddiv+0x394>)
 8001480:	4453      	add	r3, sl
 8001482:	468a      	mov	sl, r1
 8001484:	449a      	add	sl, r3
 8001486:	2300      	movs	r3, #0
 8001488:	e6c8      	b.n	800121c <__aeabi_ddiv+0x90>
 800148a:	465b      	mov	r3, fp
 800148c:	4303      	orrs	r3, r0
 800148e:	4699      	mov	r9, r3
 8001490:	d056      	beq.n	8001540 <__aeabi_ddiv+0x3b4>
 8001492:	465b      	mov	r3, fp
 8001494:	2b00      	cmp	r3, #0
 8001496:	d100      	bne.n	800149a <__aeabi_ddiv+0x30e>
 8001498:	e0cd      	b.n	8001636 <__aeabi_ddiv+0x4aa>
 800149a:	4658      	mov	r0, fp
 800149c:	f001 fa16 	bl	80028cc <__clzsi2>
 80014a0:	230b      	movs	r3, #11
 80014a2:	425b      	negs	r3, r3
 80014a4:	469c      	mov	ip, r3
 80014a6:	0002      	movs	r2, r0
 80014a8:	4484      	add	ip, r0
 80014aa:	4666      	mov	r6, ip
 80014ac:	231d      	movs	r3, #29
 80014ae:	1b9b      	subs	r3, r3, r6
 80014b0:	0026      	movs	r6, r4
 80014b2:	0011      	movs	r1, r2
 80014b4:	4658      	mov	r0, fp
 80014b6:	40de      	lsrs	r6, r3
 80014b8:	3908      	subs	r1, #8
 80014ba:	4088      	lsls	r0, r1
 80014bc:	0033      	movs	r3, r6
 80014be:	4303      	orrs	r3, r0
 80014c0:	4699      	mov	r9, r3
 80014c2:	0023      	movs	r3, r4
 80014c4:	408b      	lsls	r3, r1
 80014c6:	4698      	mov	r8, r3
 80014c8:	4b16      	ldr	r3, [pc, #88]	@ (8001524 <__aeabi_ddiv+0x398>)
 80014ca:	2400      	movs	r4, #0
 80014cc:	1a9b      	subs	r3, r3, r2
 80014ce:	469a      	mov	sl, r3
 80014d0:	2300      	movs	r3, #0
 80014d2:	9303      	str	r3, [sp, #12]
 80014d4:	e682      	b.n	80011dc <__aeabi_ddiv+0x50>
 80014d6:	465a      	mov	r2, fp
 80014d8:	4302      	orrs	r2, r0
 80014da:	4691      	mov	r9, r2
 80014dc:	d12a      	bne.n	8001534 <__aeabi_ddiv+0x3a8>
 80014de:	2200      	movs	r2, #0
 80014e0:	469a      	mov	sl, r3
 80014e2:	2302      	movs	r3, #2
 80014e4:	4690      	mov	r8, r2
 80014e6:	2408      	movs	r4, #8
 80014e8:	9303      	str	r3, [sp, #12]
 80014ea:	e677      	b.n	80011dc <__aeabi_ddiv+0x50>
 80014ec:	465a      	mov	r2, fp
 80014ee:	9b00      	ldr	r3, [sp, #0]
 80014f0:	431a      	orrs	r2, r3
 80014f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <__aeabi_ddiv+0x39c>)
 80014f4:	469c      	mov	ip, r3
 80014f6:	44e2      	add	sl, ip
 80014f8:	2a00      	cmp	r2, #0
 80014fa:	d117      	bne.n	800152c <__aeabi_ddiv+0x3a0>
 80014fc:	2302      	movs	r3, #2
 80014fe:	431c      	orrs	r4, r3
 8001500:	2300      	movs	r3, #0
 8001502:	469b      	mov	fp, r3
 8001504:	3302      	adds	r3, #2
 8001506:	e689      	b.n	800121c <__aeabi_ddiv+0x90>
 8001508:	000007ff 	.word	0x000007ff
 800150c:	fffffc01 	.word	0xfffffc01
 8001510:	08016808 	.word	0x08016808
 8001514:	000003ff 	.word	0x000003ff
 8001518:	feffffff 	.word	0xfeffffff
 800151c:	000007fe 	.word	0x000007fe
 8001520:	000003f3 	.word	0x000003f3
 8001524:	fffffc0d 	.word	0xfffffc0d
 8001528:	fffff801 	.word	0xfffff801
 800152c:	2303      	movs	r3, #3
 800152e:	0032      	movs	r2, r6
 8001530:	431c      	orrs	r4, r3
 8001532:	e673      	b.n	800121c <__aeabi_ddiv+0x90>
 8001534:	469a      	mov	sl, r3
 8001536:	2303      	movs	r3, #3
 8001538:	46d9      	mov	r9, fp
 800153a:	240c      	movs	r4, #12
 800153c:	9303      	str	r3, [sp, #12]
 800153e:	e64d      	b.n	80011dc <__aeabi_ddiv+0x50>
 8001540:	2300      	movs	r3, #0
 8001542:	4698      	mov	r8, r3
 8001544:	469a      	mov	sl, r3
 8001546:	3301      	adds	r3, #1
 8001548:	2404      	movs	r4, #4
 800154a:	9303      	str	r3, [sp, #12]
 800154c:	e646      	b.n	80011dc <__aeabi_ddiv+0x50>
 800154e:	2301      	movs	r3, #1
 8001550:	431c      	orrs	r4, r3
 8001552:	2300      	movs	r3, #0
 8001554:	469b      	mov	fp, r3
 8001556:	3301      	adds	r3, #1
 8001558:	e660      	b.n	800121c <__aeabi_ddiv+0x90>
 800155a:	2300      	movs	r3, #0
 800155c:	2480      	movs	r4, #128	@ 0x80
 800155e:	4698      	mov	r8, r3
 8001560:	2600      	movs	r6, #0
 8001562:	4b92      	ldr	r3, [pc, #584]	@ (80017ac <__aeabi_ddiv+0x620>)
 8001564:	0324      	lsls	r4, r4, #12
 8001566:	e671      	b.n	800124c <__aeabi_ddiv+0xc0>
 8001568:	2201      	movs	r2, #1
 800156a:	4252      	negs	r2, r2
 800156c:	2101      	movs	r1, #1
 800156e:	1ac9      	subs	r1, r1, r3
 8001570:	2938      	cmp	r1, #56	@ 0x38
 8001572:	dd00      	ble.n	8001576 <__aeabi_ddiv+0x3ea>
 8001574:	e666      	b.n	8001244 <__aeabi_ddiv+0xb8>
 8001576:	291f      	cmp	r1, #31
 8001578:	dc00      	bgt.n	800157c <__aeabi_ddiv+0x3f0>
 800157a:	e0ab      	b.n	80016d4 <__aeabi_ddiv+0x548>
 800157c:	201f      	movs	r0, #31
 800157e:	4240      	negs	r0, r0
 8001580:	1ac3      	subs	r3, r0, r3
 8001582:	4658      	mov	r0, fp
 8001584:	40d8      	lsrs	r0, r3
 8001586:	0003      	movs	r3, r0
 8001588:	2920      	cmp	r1, #32
 800158a:	d004      	beq.n	8001596 <__aeabi_ddiv+0x40a>
 800158c:	4658      	mov	r0, fp
 800158e:	4988      	ldr	r1, [pc, #544]	@ (80017b0 <__aeabi_ddiv+0x624>)
 8001590:	4451      	add	r1, sl
 8001592:	4088      	lsls	r0, r1
 8001594:	4302      	orrs	r2, r0
 8001596:	1e51      	subs	r1, r2, #1
 8001598:	418a      	sbcs	r2, r1
 800159a:	431a      	orrs	r2, r3
 800159c:	2307      	movs	r3, #7
 800159e:	0019      	movs	r1, r3
 80015a0:	2400      	movs	r4, #0
 80015a2:	4011      	ands	r1, r2
 80015a4:	4213      	tst	r3, r2
 80015a6:	d00c      	beq.n	80015c2 <__aeabi_ddiv+0x436>
 80015a8:	230f      	movs	r3, #15
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b04      	cmp	r3, #4
 80015ae:	d100      	bne.n	80015b2 <__aeabi_ddiv+0x426>
 80015b0:	e0f9      	b.n	80017a6 <__aeabi_ddiv+0x61a>
 80015b2:	1d11      	adds	r1, r2, #4
 80015b4:	4291      	cmp	r1, r2
 80015b6:	419b      	sbcs	r3, r3
 80015b8:	000a      	movs	r2, r1
 80015ba:	425b      	negs	r3, r3
 80015bc:	0759      	lsls	r1, r3, #29
 80015be:	025b      	lsls	r3, r3, #9
 80015c0:	0b1c      	lsrs	r4, r3, #12
 80015c2:	08d2      	lsrs	r2, r2, #3
 80015c4:	430a      	orrs	r2, r1
 80015c6:	4690      	mov	r8, r2
 80015c8:	2300      	movs	r3, #0
 80015ca:	e63f      	b.n	800124c <__aeabi_ddiv+0xc0>
 80015cc:	2480      	movs	r4, #128	@ 0x80
 80015ce:	464b      	mov	r3, r9
 80015d0:	0324      	lsls	r4, r4, #12
 80015d2:	4223      	tst	r3, r4
 80015d4:	d009      	beq.n	80015ea <__aeabi_ddiv+0x45e>
 80015d6:	465b      	mov	r3, fp
 80015d8:	4223      	tst	r3, r4
 80015da:	d106      	bne.n	80015ea <__aeabi_ddiv+0x45e>
 80015dc:	431c      	orrs	r4, r3
 80015de:	0324      	lsls	r4, r4, #12
 80015e0:	002e      	movs	r6, r5
 80015e2:	4690      	mov	r8, r2
 80015e4:	4b71      	ldr	r3, [pc, #452]	@ (80017ac <__aeabi_ddiv+0x620>)
 80015e6:	0b24      	lsrs	r4, r4, #12
 80015e8:	e630      	b.n	800124c <__aeabi_ddiv+0xc0>
 80015ea:	2480      	movs	r4, #128	@ 0x80
 80015ec:	464b      	mov	r3, r9
 80015ee:	0324      	lsls	r4, r4, #12
 80015f0:	431c      	orrs	r4, r3
 80015f2:	0324      	lsls	r4, r4, #12
 80015f4:	9e02      	ldr	r6, [sp, #8]
 80015f6:	4b6d      	ldr	r3, [pc, #436]	@ (80017ac <__aeabi_ddiv+0x620>)
 80015f8:	0b24      	lsrs	r4, r4, #12
 80015fa:	e627      	b.n	800124c <__aeabi_ddiv+0xc0>
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d100      	bne.n	8001602 <__aeabi_ddiv+0x476>
 8001600:	e700      	b.n	8001404 <__aeabi_ddiv+0x278>
 8001602:	9800      	ldr	r0, [sp, #0]
 8001604:	1e51      	subs	r1, r2, #1
 8001606:	4684      	mov	ip, r0
 8001608:	4464      	add	r4, ip
 800160a:	4284      	cmp	r4, r0
 800160c:	d200      	bcs.n	8001610 <__aeabi_ddiv+0x484>
 800160e:	e084      	b.n	800171a <__aeabi_ddiv+0x58e>
 8001610:	42bc      	cmp	r4, r7
 8001612:	d200      	bcs.n	8001616 <__aeabi_ddiv+0x48a>
 8001614:	e0ae      	b.n	8001774 <__aeabi_ddiv+0x5e8>
 8001616:	d100      	bne.n	800161a <__aeabi_ddiv+0x48e>
 8001618:	e0c1      	b.n	800179e <__aeabi_ddiv+0x612>
 800161a:	000a      	movs	r2, r1
 800161c:	e6f0      	b.n	8001400 <__aeabi_ddiv+0x274>
 800161e:	4542      	cmp	r2, r8
 8001620:	d900      	bls.n	8001624 <__aeabi_ddiv+0x498>
 8001622:	e62c      	b.n	800127e <__aeabi_ddiv+0xf2>
 8001624:	464b      	mov	r3, r9
 8001626:	07dc      	lsls	r4, r3, #31
 8001628:	0858      	lsrs	r0, r3, #1
 800162a:	4643      	mov	r3, r8
 800162c:	085b      	lsrs	r3, r3, #1
 800162e:	431c      	orrs	r4, r3
 8001630:	4643      	mov	r3, r8
 8001632:	07df      	lsls	r7, r3, #31
 8001634:	e62a      	b.n	800128c <__aeabi_ddiv+0x100>
 8001636:	f001 f949 	bl	80028cc <__clzsi2>
 800163a:	2315      	movs	r3, #21
 800163c:	469c      	mov	ip, r3
 800163e:	4484      	add	ip, r0
 8001640:	0002      	movs	r2, r0
 8001642:	4663      	mov	r3, ip
 8001644:	3220      	adds	r2, #32
 8001646:	2b1c      	cmp	r3, #28
 8001648:	dc00      	bgt.n	800164c <__aeabi_ddiv+0x4c0>
 800164a:	e72e      	b.n	80014aa <__aeabi_ddiv+0x31e>
 800164c:	0023      	movs	r3, r4
 800164e:	3808      	subs	r0, #8
 8001650:	4083      	lsls	r3, r0
 8001652:	4699      	mov	r9, r3
 8001654:	2300      	movs	r3, #0
 8001656:	4698      	mov	r8, r3
 8001658:	e736      	b.n	80014c8 <__aeabi_ddiv+0x33c>
 800165a:	f001 f937 	bl	80028cc <__clzsi2>
 800165e:	0002      	movs	r2, r0
 8001660:	0003      	movs	r3, r0
 8001662:	3215      	adds	r2, #21
 8001664:	3320      	adds	r3, #32
 8001666:	2a1c      	cmp	r2, #28
 8001668:	dc00      	bgt.n	800166c <__aeabi_ddiv+0x4e0>
 800166a:	e6fb      	b.n	8001464 <__aeabi_ddiv+0x2d8>
 800166c:	9900      	ldr	r1, [sp, #0]
 800166e:	3808      	subs	r0, #8
 8001670:	4081      	lsls	r1, r0
 8001672:	2200      	movs	r2, #0
 8001674:	468b      	mov	fp, r1
 8001676:	e702      	b.n	800147e <__aeabi_ddiv+0x2f2>
 8001678:	9900      	ldr	r1, [sp, #0]
 800167a:	3b01      	subs	r3, #1
 800167c:	468c      	mov	ip, r1
 800167e:	4464      	add	r4, ip
 8001680:	42a1      	cmp	r1, r4
 8001682:	d900      	bls.n	8001686 <__aeabi_ddiv+0x4fa>
 8001684:	e69a      	b.n	80013bc <__aeabi_ddiv+0x230>
 8001686:	42a2      	cmp	r2, r4
 8001688:	d800      	bhi.n	800168c <__aeabi_ddiv+0x500>
 800168a:	e697      	b.n	80013bc <__aeabi_ddiv+0x230>
 800168c:	1e83      	subs	r3, r0, #2
 800168e:	4464      	add	r4, ip
 8001690:	e694      	b.n	80013bc <__aeabi_ddiv+0x230>
 8001692:	46ac      	mov	ip, r5
 8001694:	4461      	add	r1, ip
 8001696:	3f01      	subs	r7, #1
 8001698:	428d      	cmp	r5, r1
 800169a:	d900      	bls.n	800169e <__aeabi_ddiv+0x512>
 800169c:	e680      	b.n	80013a0 <__aeabi_ddiv+0x214>
 800169e:	428a      	cmp	r2, r1
 80016a0:	d800      	bhi.n	80016a4 <__aeabi_ddiv+0x518>
 80016a2:	e67d      	b.n	80013a0 <__aeabi_ddiv+0x214>
 80016a4:	1e87      	subs	r7, r0, #2
 80016a6:	4461      	add	r1, ip
 80016a8:	e67a      	b.n	80013a0 <__aeabi_ddiv+0x214>
 80016aa:	4285      	cmp	r5, r0
 80016ac:	d000      	beq.n	80016b0 <__aeabi_ddiv+0x524>
 80016ae:	e65f      	b.n	8001370 <__aeabi_ddiv+0x1e4>
 80016b0:	45b9      	cmp	r9, r7
 80016b2:	d900      	bls.n	80016b6 <__aeabi_ddiv+0x52a>
 80016b4:	e65c      	b.n	8001370 <__aeabi_ddiv+0x1e4>
 80016b6:	e656      	b.n	8001366 <__aeabi_ddiv+0x1da>
 80016b8:	42a2      	cmp	r2, r4
 80016ba:	d800      	bhi.n	80016be <__aeabi_ddiv+0x532>
 80016bc:	e61a      	b.n	80012f4 <__aeabi_ddiv+0x168>
 80016be:	1e83      	subs	r3, r0, #2
 80016c0:	4464      	add	r4, ip
 80016c2:	e617      	b.n	80012f4 <__aeabi_ddiv+0x168>
 80016c4:	428a      	cmp	r2, r1
 80016c6:	d800      	bhi.n	80016ca <__aeabi_ddiv+0x53e>
 80016c8:	e600      	b.n	80012cc <__aeabi_ddiv+0x140>
 80016ca:	46ac      	mov	ip, r5
 80016cc:	1e83      	subs	r3, r0, #2
 80016ce:	4698      	mov	r8, r3
 80016d0:	4461      	add	r1, ip
 80016d2:	e5fb      	b.n	80012cc <__aeabi_ddiv+0x140>
 80016d4:	4837      	ldr	r0, [pc, #220]	@ (80017b4 <__aeabi_ddiv+0x628>)
 80016d6:	0014      	movs	r4, r2
 80016d8:	4450      	add	r0, sl
 80016da:	4082      	lsls	r2, r0
 80016dc:	465b      	mov	r3, fp
 80016de:	0017      	movs	r7, r2
 80016e0:	4083      	lsls	r3, r0
 80016e2:	40cc      	lsrs	r4, r1
 80016e4:	1e7a      	subs	r2, r7, #1
 80016e6:	4197      	sbcs	r7, r2
 80016e8:	4323      	orrs	r3, r4
 80016ea:	433b      	orrs	r3, r7
 80016ec:	001a      	movs	r2, r3
 80016ee:	465b      	mov	r3, fp
 80016f0:	40cb      	lsrs	r3, r1
 80016f2:	0751      	lsls	r1, r2, #29
 80016f4:	d009      	beq.n	800170a <__aeabi_ddiv+0x57e>
 80016f6:	210f      	movs	r1, #15
 80016f8:	4011      	ands	r1, r2
 80016fa:	2904      	cmp	r1, #4
 80016fc:	d005      	beq.n	800170a <__aeabi_ddiv+0x57e>
 80016fe:	1d11      	adds	r1, r2, #4
 8001700:	4291      	cmp	r1, r2
 8001702:	4192      	sbcs	r2, r2
 8001704:	4252      	negs	r2, r2
 8001706:	189b      	adds	r3, r3, r2
 8001708:	000a      	movs	r2, r1
 800170a:	0219      	lsls	r1, r3, #8
 800170c:	d400      	bmi.n	8001710 <__aeabi_ddiv+0x584>
 800170e:	e755      	b.n	80015bc <__aeabi_ddiv+0x430>
 8001710:	2200      	movs	r2, #0
 8001712:	2301      	movs	r3, #1
 8001714:	2400      	movs	r4, #0
 8001716:	4690      	mov	r8, r2
 8001718:	e598      	b.n	800124c <__aeabi_ddiv+0xc0>
 800171a:	000a      	movs	r2, r1
 800171c:	42bc      	cmp	r4, r7
 800171e:	d000      	beq.n	8001722 <__aeabi_ddiv+0x596>
 8001720:	e66e      	b.n	8001400 <__aeabi_ddiv+0x274>
 8001722:	454b      	cmp	r3, r9
 8001724:	d000      	beq.n	8001728 <__aeabi_ddiv+0x59c>
 8001726:	e66b      	b.n	8001400 <__aeabi_ddiv+0x274>
 8001728:	e66c      	b.n	8001404 <__aeabi_ddiv+0x278>
 800172a:	4b23      	ldr	r3, [pc, #140]	@ (80017b8 <__aeabi_ddiv+0x62c>)
 800172c:	4a23      	ldr	r2, [pc, #140]	@ (80017bc <__aeabi_ddiv+0x630>)
 800172e:	4453      	add	r3, sl
 8001730:	4592      	cmp	sl, r2
 8001732:	da00      	bge.n	8001736 <__aeabi_ddiv+0x5aa>
 8001734:	e718      	b.n	8001568 <__aeabi_ddiv+0x3dc>
 8001736:	2101      	movs	r1, #1
 8001738:	4249      	negs	r1, r1
 800173a:	1d0a      	adds	r2, r1, #4
 800173c:	428a      	cmp	r2, r1
 800173e:	4189      	sbcs	r1, r1
 8001740:	4249      	negs	r1, r1
 8001742:	448b      	add	fp, r1
 8001744:	e666      	b.n	8001414 <__aeabi_ddiv+0x288>
 8001746:	210f      	movs	r1, #15
 8001748:	4011      	ands	r1, r2
 800174a:	2904      	cmp	r1, #4
 800174c:	d100      	bne.n	8001750 <__aeabi_ddiv+0x5c4>
 800174e:	e661      	b.n	8001414 <__aeabi_ddiv+0x288>
 8001750:	0011      	movs	r1, r2
 8001752:	e7f2      	b.n	800173a <__aeabi_ddiv+0x5ae>
 8001754:	42bc      	cmp	r4, r7
 8001756:	d800      	bhi.n	800175a <__aeabi_ddiv+0x5ce>
 8001758:	e60a      	b.n	8001370 <__aeabi_ddiv+0x1e4>
 800175a:	2302      	movs	r3, #2
 800175c:	425b      	negs	r3, r3
 800175e:	469c      	mov	ip, r3
 8001760:	9900      	ldr	r1, [sp, #0]
 8001762:	444f      	add	r7, r9
 8001764:	454f      	cmp	r7, r9
 8001766:	419b      	sbcs	r3, r3
 8001768:	44e3      	add	fp, ip
 800176a:	468c      	mov	ip, r1
 800176c:	425b      	negs	r3, r3
 800176e:	4463      	add	r3, ip
 8001770:	18c0      	adds	r0, r0, r3
 8001772:	e5ff      	b.n	8001374 <__aeabi_ddiv+0x1e8>
 8001774:	4649      	mov	r1, r9
 8001776:	9d00      	ldr	r5, [sp, #0]
 8001778:	0048      	lsls	r0, r1, #1
 800177a:	4548      	cmp	r0, r9
 800177c:	4189      	sbcs	r1, r1
 800177e:	46ac      	mov	ip, r5
 8001780:	4249      	negs	r1, r1
 8001782:	4461      	add	r1, ip
 8001784:	4681      	mov	r9, r0
 8001786:	3a02      	subs	r2, #2
 8001788:	1864      	adds	r4, r4, r1
 800178a:	e7c7      	b.n	800171c <__aeabi_ddiv+0x590>
 800178c:	2480      	movs	r4, #128	@ 0x80
 800178e:	465b      	mov	r3, fp
 8001790:	0324      	lsls	r4, r4, #12
 8001792:	431c      	orrs	r4, r3
 8001794:	0324      	lsls	r4, r4, #12
 8001796:	4690      	mov	r8, r2
 8001798:	4b04      	ldr	r3, [pc, #16]	@ (80017ac <__aeabi_ddiv+0x620>)
 800179a:	0b24      	lsrs	r4, r4, #12
 800179c:	e556      	b.n	800124c <__aeabi_ddiv+0xc0>
 800179e:	4599      	cmp	r9, r3
 80017a0:	d3e8      	bcc.n	8001774 <__aeabi_ddiv+0x5e8>
 80017a2:	000a      	movs	r2, r1
 80017a4:	e7bd      	b.n	8001722 <__aeabi_ddiv+0x596>
 80017a6:	2300      	movs	r3, #0
 80017a8:	e708      	b.n	80015bc <__aeabi_ddiv+0x430>
 80017aa:	46c0      	nop			@ (mov r8, r8)
 80017ac:	000007ff 	.word	0x000007ff
 80017b0:	0000043e 	.word	0x0000043e
 80017b4:	0000041e 	.word	0x0000041e
 80017b8:	000003ff 	.word	0x000003ff
 80017bc:	fffffc02 	.word	0xfffffc02

080017c0 <__eqdf2>:
 80017c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c2:	4657      	mov	r7, sl
 80017c4:	46de      	mov	lr, fp
 80017c6:	464e      	mov	r6, r9
 80017c8:	4645      	mov	r5, r8
 80017ca:	b5e0      	push	{r5, r6, r7, lr}
 80017cc:	000d      	movs	r5, r1
 80017ce:	0004      	movs	r4, r0
 80017d0:	0fe8      	lsrs	r0, r5, #31
 80017d2:	4683      	mov	fp, r0
 80017d4:	0309      	lsls	r1, r1, #12
 80017d6:	0fd8      	lsrs	r0, r3, #31
 80017d8:	0b09      	lsrs	r1, r1, #12
 80017da:	4682      	mov	sl, r0
 80017dc:	4819      	ldr	r0, [pc, #100]	@ (8001844 <__eqdf2+0x84>)
 80017de:	468c      	mov	ip, r1
 80017e0:	031f      	lsls	r7, r3, #12
 80017e2:	0069      	lsls	r1, r5, #1
 80017e4:	005e      	lsls	r6, r3, #1
 80017e6:	0d49      	lsrs	r1, r1, #21
 80017e8:	0b3f      	lsrs	r7, r7, #12
 80017ea:	0d76      	lsrs	r6, r6, #21
 80017ec:	4281      	cmp	r1, r0
 80017ee:	d018      	beq.n	8001822 <__eqdf2+0x62>
 80017f0:	4286      	cmp	r6, r0
 80017f2:	d00f      	beq.n	8001814 <__eqdf2+0x54>
 80017f4:	2001      	movs	r0, #1
 80017f6:	42b1      	cmp	r1, r6
 80017f8:	d10d      	bne.n	8001816 <__eqdf2+0x56>
 80017fa:	45bc      	cmp	ip, r7
 80017fc:	d10b      	bne.n	8001816 <__eqdf2+0x56>
 80017fe:	4294      	cmp	r4, r2
 8001800:	d109      	bne.n	8001816 <__eqdf2+0x56>
 8001802:	45d3      	cmp	fp, sl
 8001804:	d01c      	beq.n	8001840 <__eqdf2+0x80>
 8001806:	2900      	cmp	r1, #0
 8001808:	d105      	bne.n	8001816 <__eqdf2+0x56>
 800180a:	4660      	mov	r0, ip
 800180c:	4320      	orrs	r0, r4
 800180e:	1e43      	subs	r3, r0, #1
 8001810:	4198      	sbcs	r0, r3
 8001812:	e000      	b.n	8001816 <__eqdf2+0x56>
 8001814:	2001      	movs	r0, #1
 8001816:	bcf0      	pop	{r4, r5, r6, r7}
 8001818:	46bb      	mov	fp, r7
 800181a:	46b2      	mov	sl, r6
 800181c:	46a9      	mov	r9, r5
 800181e:	46a0      	mov	r8, r4
 8001820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001822:	2001      	movs	r0, #1
 8001824:	428e      	cmp	r6, r1
 8001826:	d1f6      	bne.n	8001816 <__eqdf2+0x56>
 8001828:	4661      	mov	r1, ip
 800182a:	4339      	orrs	r1, r7
 800182c:	000f      	movs	r7, r1
 800182e:	4317      	orrs	r7, r2
 8001830:	4327      	orrs	r7, r4
 8001832:	d1f0      	bne.n	8001816 <__eqdf2+0x56>
 8001834:	465b      	mov	r3, fp
 8001836:	4652      	mov	r2, sl
 8001838:	1a98      	subs	r0, r3, r2
 800183a:	1e43      	subs	r3, r0, #1
 800183c:	4198      	sbcs	r0, r3
 800183e:	e7ea      	b.n	8001816 <__eqdf2+0x56>
 8001840:	2000      	movs	r0, #0
 8001842:	e7e8      	b.n	8001816 <__eqdf2+0x56>
 8001844:	000007ff 	.word	0x000007ff

08001848 <__gedf2>:
 8001848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800184a:	4657      	mov	r7, sl
 800184c:	464e      	mov	r6, r9
 800184e:	4645      	mov	r5, r8
 8001850:	46de      	mov	lr, fp
 8001852:	b5e0      	push	{r5, r6, r7, lr}
 8001854:	000d      	movs	r5, r1
 8001856:	030f      	lsls	r7, r1, #12
 8001858:	0b39      	lsrs	r1, r7, #12
 800185a:	b083      	sub	sp, #12
 800185c:	0004      	movs	r4, r0
 800185e:	4680      	mov	r8, r0
 8001860:	9101      	str	r1, [sp, #4]
 8001862:	0058      	lsls	r0, r3, #1
 8001864:	0fe9      	lsrs	r1, r5, #31
 8001866:	4f31      	ldr	r7, [pc, #196]	@ (800192c <__gedf2+0xe4>)
 8001868:	0d40      	lsrs	r0, r0, #21
 800186a:	468c      	mov	ip, r1
 800186c:	006e      	lsls	r6, r5, #1
 800186e:	0319      	lsls	r1, r3, #12
 8001870:	4682      	mov	sl, r0
 8001872:	4691      	mov	r9, r2
 8001874:	0d76      	lsrs	r6, r6, #21
 8001876:	0b09      	lsrs	r1, r1, #12
 8001878:	0fd8      	lsrs	r0, r3, #31
 800187a:	42be      	cmp	r6, r7
 800187c:	d01f      	beq.n	80018be <__gedf2+0x76>
 800187e:	45ba      	cmp	sl, r7
 8001880:	d00f      	beq.n	80018a2 <__gedf2+0x5a>
 8001882:	2e00      	cmp	r6, #0
 8001884:	d12f      	bne.n	80018e6 <__gedf2+0x9e>
 8001886:	4655      	mov	r5, sl
 8001888:	9e01      	ldr	r6, [sp, #4]
 800188a:	4334      	orrs	r4, r6
 800188c:	2d00      	cmp	r5, #0
 800188e:	d127      	bne.n	80018e0 <__gedf2+0x98>
 8001890:	430a      	orrs	r2, r1
 8001892:	d03a      	beq.n	800190a <__gedf2+0xc2>
 8001894:	2c00      	cmp	r4, #0
 8001896:	d145      	bne.n	8001924 <__gedf2+0xdc>
 8001898:	2800      	cmp	r0, #0
 800189a:	d11a      	bne.n	80018d2 <__gedf2+0x8a>
 800189c:	2001      	movs	r0, #1
 800189e:	4240      	negs	r0, r0
 80018a0:	e017      	b.n	80018d2 <__gedf2+0x8a>
 80018a2:	4311      	orrs	r1, r2
 80018a4:	d13b      	bne.n	800191e <__gedf2+0xd6>
 80018a6:	2e00      	cmp	r6, #0
 80018a8:	d102      	bne.n	80018b0 <__gedf2+0x68>
 80018aa:	9f01      	ldr	r7, [sp, #4]
 80018ac:	4327      	orrs	r7, r4
 80018ae:	d0f3      	beq.n	8001898 <__gedf2+0x50>
 80018b0:	4584      	cmp	ip, r0
 80018b2:	d109      	bne.n	80018c8 <__gedf2+0x80>
 80018b4:	4663      	mov	r3, ip
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0f0      	beq.n	800189c <__gedf2+0x54>
 80018ba:	4660      	mov	r0, ip
 80018bc:	e009      	b.n	80018d2 <__gedf2+0x8a>
 80018be:	9f01      	ldr	r7, [sp, #4]
 80018c0:	4327      	orrs	r7, r4
 80018c2:	d12c      	bne.n	800191e <__gedf2+0xd6>
 80018c4:	45b2      	cmp	sl, r6
 80018c6:	d024      	beq.n	8001912 <__gedf2+0xca>
 80018c8:	4663      	mov	r3, ip
 80018ca:	2002      	movs	r0, #2
 80018cc:	3b01      	subs	r3, #1
 80018ce:	4018      	ands	r0, r3
 80018d0:	3801      	subs	r0, #1
 80018d2:	b003      	add	sp, #12
 80018d4:	bcf0      	pop	{r4, r5, r6, r7}
 80018d6:	46bb      	mov	fp, r7
 80018d8:	46b2      	mov	sl, r6
 80018da:	46a9      	mov	r9, r5
 80018dc:	46a0      	mov	r8, r4
 80018de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018e0:	2c00      	cmp	r4, #0
 80018e2:	d0d9      	beq.n	8001898 <__gedf2+0x50>
 80018e4:	e7e4      	b.n	80018b0 <__gedf2+0x68>
 80018e6:	4654      	mov	r4, sl
 80018e8:	2c00      	cmp	r4, #0
 80018ea:	d0ed      	beq.n	80018c8 <__gedf2+0x80>
 80018ec:	4584      	cmp	ip, r0
 80018ee:	d1eb      	bne.n	80018c8 <__gedf2+0x80>
 80018f0:	4556      	cmp	r6, sl
 80018f2:	dce9      	bgt.n	80018c8 <__gedf2+0x80>
 80018f4:	dbde      	blt.n	80018b4 <__gedf2+0x6c>
 80018f6:	9b01      	ldr	r3, [sp, #4]
 80018f8:	428b      	cmp	r3, r1
 80018fa:	d8e5      	bhi.n	80018c8 <__gedf2+0x80>
 80018fc:	d1da      	bne.n	80018b4 <__gedf2+0x6c>
 80018fe:	45c8      	cmp	r8, r9
 8001900:	d8e2      	bhi.n	80018c8 <__gedf2+0x80>
 8001902:	2000      	movs	r0, #0
 8001904:	45c8      	cmp	r8, r9
 8001906:	d2e4      	bcs.n	80018d2 <__gedf2+0x8a>
 8001908:	e7d4      	b.n	80018b4 <__gedf2+0x6c>
 800190a:	2000      	movs	r0, #0
 800190c:	2c00      	cmp	r4, #0
 800190e:	d0e0      	beq.n	80018d2 <__gedf2+0x8a>
 8001910:	e7da      	b.n	80018c8 <__gedf2+0x80>
 8001912:	4311      	orrs	r1, r2
 8001914:	d103      	bne.n	800191e <__gedf2+0xd6>
 8001916:	4584      	cmp	ip, r0
 8001918:	d1d6      	bne.n	80018c8 <__gedf2+0x80>
 800191a:	2000      	movs	r0, #0
 800191c:	e7d9      	b.n	80018d2 <__gedf2+0x8a>
 800191e:	2002      	movs	r0, #2
 8001920:	4240      	negs	r0, r0
 8001922:	e7d6      	b.n	80018d2 <__gedf2+0x8a>
 8001924:	4584      	cmp	ip, r0
 8001926:	d0e6      	beq.n	80018f6 <__gedf2+0xae>
 8001928:	e7ce      	b.n	80018c8 <__gedf2+0x80>
 800192a:	46c0      	nop			@ (mov r8, r8)
 800192c:	000007ff 	.word	0x000007ff

08001930 <__ledf2>:
 8001930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001932:	4657      	mov	r7, sl
 8001934:	464e      	mov	r6, r9
 8001936:	4645      	mov	r5, r8
 8001938:	46de      	mov	lr, fp
 800193a:	b5e0      	push	{r5, r6, r7, lr}
 800193c:	000d      	movs	r5, r1
 800193e:	030f      	lsls	r7, r1, #12
 8001940:	0004      	movs	r4, r0
 8001942:	4680      	mov	r8, r0
 8001944:	0fe8      	lsrs	r0, r5, #31
 8001946:	0b39      	lsrs	r1, r7, #12
 8001948:	4684      	mov	ip, r0
 800194a:	b083      	sub	sp, #12
 800194c:	0058      	lsls	r0, r3, #1
 800194e:	4f30      	ldr	r7, [pc, #192]	@ (8001a10 <__ledf2+0xe0>)
 8001950:	0d40      	lsrs	r0, r0, #21
 8001952:	9101      	str	r1, [sp, #4]
 8001954:	031e      	lsls	r6, r3, #12
 8001956:	0069      	lsls	r1, r5, #1
 8001958:	4682      	mov	sl, r0
 800195a:	4691      	mov	r9, r2
 800195c:	0d49      	lsrs	r1, r1, #21
 800195e:	0b36      	lsrs	r6, r6, #12
 8001960:	0fd8      	lsrs	r0, r3, #31
 8001962:	42b9      	cmp	r1, r7
 8001964:	d020      	beq.n	80019a8 <__ledf2+0x78>
 8001966:	45ba      	cmp	sl, r7
 8001968:	d00f      	beq.n	800198a <__ledf2+0x5a>
 800196a:	2900      	cmp	r1, #0
 800196c:	d12b      	bne.n	80019c6 <__ledf2+0x96>
 800196e:	9901      	ldr	r1, [sp, #4]
 8001970:	430c      	orrs	r4, r1
 8001972:	4651      	mov	r1, sl
 8001974:	2900      	cmp	r1, #0
 8001976:	d137      	bne.n	80019e8 <__ledf2+0xb8>
 8001978:	4332      	orrs	r2, r6
 800197a:	d038      	beq.n	80019ee <__ledf2+0xbe>
 800197c:	2c00      	cmp	r4, #0
 800197e:	d144      	bne.n	8001a0a <__ledf2+0xda>
 8001980:	2800      	cmp	r0, #0
 8001982:	d119      	bne.n	80019b8 <__ledf2+0x88>
 8001984:	2001      	movs	r0, #1
 8001986:	4240      	negs	r0, r0
 8001988:	e016      	b.n	80019b8 <__ledf2+0x88>
 800198a:	4316      	orrs	r6, r2
 800198c:	d113      	bne.n	80019b6 <__ledf2+0x86>
 800198e:	2900      	cmp	r1, #0
 8001990:	d102      	bne.n	8001998 <__ledf2+0x68>
 8001992:	9f01      	ldr	r7, [sp, #4]
 8001994:	4327      	orrs	r7, r4
 8001996:	d0f3      	beq.n	8001980 <__ledf2+0x50>
 8001998:	4584      	cmp	ip, r0
 800199a:	d020      	beq.n	80019de <__ledf2+0xae>
 800199c:	4663      	mov	r3, ip
 800199e:	2002      	movs	r0, #2
 80019a0:	3b01      	subs	r3, #1
 80019a2:	4018      	ands	r0, r3
 80019a4:	3801      	subs	r0, #1
 80019a6:	e007      	b.n	80019b8 <__ledf2+0x88>
 80019a8:	9f01      	ldr	r7, [sp, #4]
 80019aa:	4327      	orrs	r7, r4
 80019ac:	d103      	bne.n	80019b6 <__ledf2+0x86>
 80019ae:	458a      	cmp	sl, r1
 80019b0:	d1f4      	bne.n	800199c <__ledf2+0x6c>
 80019b2:	4316      	orrs	r6, r2
 80019b4:	d01f      	beq.n	80019f6 <__ledf2+0xc6>
 80019b6:	2002      	movs	r0, #2
 80019b8:	b003      	add	sp, #12
 80019ba:	bcf0      	pop	{r4, r5, r6, r7}
 80019bc:	46bb      	mov	fp, r7
 80019be:	46b2      	mov	sl, r6
 80019c0:	46a9      	mov	r9, r5
 80019c2:	46a0      	mov	r8, r4
 80019c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019c6:	4654      	mov	r4, sl
 80019c8:	2c00      	cmp	r4, #0
 80019ca:	d0e7      	beq.n	800199c <__ledf2+0x6c>
 80019cc:	4584      	cmp	ip, r0
 80019ce:	d1e5      	bne.n	800199c <__ledf2+0x6c>
 80019d0:	4551      	cmp	r1, sl
 80019d2:	dce3      	bgt.n	800199c <__ledf2+0x6c>
 80019d4:	db03      	blt.n	80019de <__ledf2+0xae>
 80019d6:	9b01      	ldr	r3, [sp, #4]
 80019d8:	42b3      	cmp	r3, r6
 80019da:	d8df      	bhi.n	800199c <__ledf2+0x6c>
 80019dc:	d00f      	beq.n	80019fe <__ledf2+0xce>
 80019de:	4663      	mov	r3, ip
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0cf      	beq.n	8001984 <__ledf2+0x54>
 80019e4:	4660      	mov	r0, ip
 80019e6:	e7e7      	b.n	80019b8 <__ledf2+0x88>
 80019e8:	2c00      	cmp	r4, #0
 80019ea:	d0c9      	beq.n	8001980 <__ledf2+0x50>
 80019ec:	e7d4      	b.n	8001998 <__ledf2+0x68>
 80019ee:	2000      	movs	r0, #0
 80019f0:	2c00      	cmp	r4, #0
 80019f2:	d0e1      	beq.n	80019b8 <__ledf2+0x88>
 80019f4:	e7d2      	b.n	800199c <__ledf2+0x6c>
 80019f6:	4584      	cmp	ip, r0
 80019f8:	d1d0      	bne.n	800199c <__ledf2+0x6c>
 80019fa:	2000      	movs	r0, #0
 80019fc:	e7dc      	b.n	80019b8 <__ledf2+0x88>
 80019fe:	45c8      	cmp	r8, r9
 8001a00:	d8cc      	bhi.n	800199c <__ledf2+0x6c>
 8001a02:	2000      	movs	r0, #0
 8001a04:	45c8      	cmp	r8, r9
 8001a06:	d2d7      	bcs.n	80019b8 <__ledf2+0x88>
 8001a08:	e7e9      	b.n	80019de <__ledf2+0xae>
 8001a0a:	4584      	cmp	ip, r0
 8001a0c:	d0e3      	beq.n	80019d6 <__ledf2+0xa6>
 8001a0e:	e7c5      	b.n	800199c <__ledf2+0x6c>
 8001a10:	000007ff 	.word	0x000007ff

08001a14 <__aeabi_dmul>:
 8001a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a16:	4657      	mov	r7, sl
 8001a18:	46de      	mov	lr, fp
 8001a1a:	464e      	mov	r6, r9
 8001a1c:	4645      	mov	r5, r8
 8001a1e:	b5e0      	push	{r5, r6, r7, lr}
 8001a20:	001f      	movs	r7, r3
 8001a22:	030b      	lsls	r3, r1, #12
 8001a24:	0b1b      	lsrs	r3, r3, #12
 8001a26:	0016      	movs	r6, r2
 8001a28:	469a      	mov	sl, r3
 8001a2a:	0fca      	lsrs	r2, r1, #31
 8001a2c:	004b      	lsls	r3, r1, #1
 8001a2e:	0004      	movs	r4, r0
 8001a30:	4693      	mov	fp, r2
 8001a32:	b087      	sub	sp, #28
 8001a34:	0d5b      	lsrs	r3, r3, #21
 8001a36:	d100      	bne.n	8001a3a <__aeabi_dmul+0x26>
 8001a38:	e0d5      	b.n	8001be6 <__aeabi_dmul+0x1d2>
 8001a3a:	4abb      	ldr	r2, [pc, #748]	@ (8001d28 <__aeabi_dmul+0x314>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d100      	bne.n	8001a42 <__aeabi_dmul+0x2e>
 8001a40:	e0f8      	b.n	8001c34 <__aeabi_dmul+0x220>
 8001a42:	4651      	mov	r1, sl
 8001a44:	0f42      	lsrs	r2, r0, #29
 8001a46:	00c9      	lsls	r1, r1, #3
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	2180      	movs	r1, #128	@ 0x80
 8001a4c:	0409      	lsls	r1, r1, #16
 8001a4e:	4311      	orrs	r1, r2
 8001a50:	00c2      	lsls	r2, r0, #3
 8001a52:	4691      	mov	r9, r2
 8001a54:	4ab5      	ldr	r2, [pc, #724]	@ (8001d2c <__aeabi_dmul+0x318>)
 8001a56:	468a      	mov	sl, r1
 8001a58:	189d      	adds	r5, r3, r2
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	4698      	mov	r8, r3
 8001a5e:	9302      	str	r3, [sp, #8]
 8001a60:	033c      	lsls	r4, r7, #12
 8001a62:	007b      	lsls	r3, r7, #1
 8001a64:	0ffa      	lsrs	r2, r7, #31
 8001a66:	0030      	movs	r0, r6
 8001a68:	0b24      	lsrs	r4, r4, #12
 8001a6a:	0d5b      	lsrs	r3, r3, #21
 8001a6c:	9200      	str	r2, [sp, #0]
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_dmul+0x5e>
 8001a70:	e096      	b.n	8001ba0 <__aeabi_dmul+0x18c>
 8001a72:	4aad      	ldr	r2, [pc, #692]	@ (8001d28 <__aeabi_dmul+0x314>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d031      	beq.n	8001adc <__aeabi_dmul+0xc8>
 8001a78:	0f72      	lsrs	r2, r6, #29
 8001a7a:	00e4      	lsls	r4, r4, #3
 8001a7c:	4322      	orrs	r2, r4
 8001a7e:	2480      	movs	r4, #128	@ 0x80
 8001a80:	0424      	lsls	r4, r4, #16
 8001a82:	4314      	orrs	r4, r2
 8001a84:	4aa9      	ldr	r2, [pc, #676]	@ (8001d2c <__aeabi_dmul+0x318>)
 8001a86:	00f0      	lsls	r0, r6, #3
 8001a88:	4694      	mov	ip, r2
 8001a8a:	4463      	add	r3, ip
 8001a8c:	195b      	adds	r3, r3, r5
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	9201      	str	r2, [sp, #4]
 8001a92:	4642      	mov	r2, r8
 8001a94:	2600      	movs	r6, #0
 8001a96:	2a0a      	cmp	r2, #10
 8001a98:	dc42      	bgt.n	8001b20 <__aeabi_dmul+0x10c>
 8001a9a:	465a      	mov	r2, fp
 8001a9c:	9900      	ldr	r1, [sp, #0]
 8001a9e:	404a      	eors	r2, r1
 8001aa0:	4693      	mov	fp, r2
 8001aa2:	4642      	mov	r2, r8
 8001aa4:	2a02      	cmp	r2, #2
 8001aa6:	dc32      	bgt.n	8001b0e <__aeabi_dmul+0xfa>
 8001aa8:	3a01      	subs	r2, #1
 8001aaa:	2a01      	cmp	r2, #1
 8001aac:	d900      	bls.n	8001ab0 <__aeabi_dmul+0x9c>
 8001aae:	e149      	b.n	8001d44 <__aeabi_dmul+0x330>
 8001ab0:	2e02      	cmp	r6, #2
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dmul+0xa2>
 8001ab4:	e0ca      	b.n	8001c4c <__aeabi_dmul+0x238>
 8001ab6:	2e01      	cmp	r6, #1
 8001ab8:	d13d      	bne.n	8001b36 <__aeabi_dmul+0x122>
 8001aba:	2300      	movs	r3, #0
 8001abc:	2400      	movs	r4, #0
 8001abe:	2200      	movs	r2, #0
 8001ac0:	0010      	movs	r0, r2
 8001ac2:	465a      	mov	r2, fp
 8001ac4:	051b      	lsls	r3, r3, #20
 8001ac6:	4323      	orrs	r3, r4
 8001ac8:	07d2      	lsls	r2, r2, #31
 8001aca:	4313      	orrs	r3, r2
 8001acc:	0019      	movs	r1, r3
 8001ace:	b007      	add	sp, #28
 8001ad0:	bcf0      	pop	{r4, r5, r6, r7}
 8001ad2:	46bb      	mov	fp, r7
 8001ad4:	46b2      	mov	sl, r6
 8001ad6:	46a9      	mov	r9, r5
 8001ad8:	46a0      	mov	r8, r4
 8001ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001adc:	4b92      	ldr	r3, [pc, #584]	@ (8001d28 <__aeabi_dmul+0x314>)
 8001ade:	4326      	orrs	r6, r4
 8001ae0:	18eb      	adds	r3, r5, r3
 8001ae2:	2e00      	cmp	r6, #0
 8001ae4:	d100      	bne.n	8001ae8 <__aeabi_dmul+0xd4>
 8001ae6:	e0bb      	b.n	8001c60 <__aeabi_dmul+0x24c>
 8001ae8:	2203      	movs	r2, #3
 8001aea:	4641      	mov	r1, r8
 8001aec:	4311      	orrs	r1, r2
 8001aee:	465a      	mov	r2, fp
 8001af0:	4688      	mov	r8, r1
 8001af2:	9900      	ldr	r1, [sp, #0]
 8001af4:	404a      	eors	r2, r1
 8001af6:	2180      	movs	r1, #128	@ 0x80
 8001af8:	0109      	lsls	r1, r1, #4
 8001afa:	468c      	mov	ip, r1
 8001afc:	0029      	movs	r1, r5
 8001afe:	4461      	add	r1, ip
 8001b00:	9101      	str	r1, [sp, #4]
 8001b02:	4641      	mov	r1, r8
 8001b04:	290a      	cmp	r1, #10
 8001b06:	dd00      	ble.n	8001b0a <__aeabi_dmul+0xf6>
 8001b08:	e233      	b.n	8001f72 <__aeabi_dmul+0x55e>
 8001b0a:	4693      	mov	fp, r2
 8001b0c:	2603      	movs	r6, #3
 8001b0e:	4642      	mov	r2, r8
 8001b10:	2701      	movs	r7, #1
 8001b12:	4097      	lsls	r7, r2
 8001b14:	21a6      	movs	r1, #166	@ 0xa6
 8001b16:	003a      	movs	r2, r7
 8001b18:	00c9      	lsls	r1, r1, #3
 8001b1a:	400a      	ands	r2, r1
 8001b1c:	420f      	tst	r7, r1
 8001b1e:	d031      	beq.n	8001b84 <__aeabi_dmul+0x170>
 8001b20:	9e02      	ldr	r6, [sp, #8]
 8001b22:	2e02      	cmp	r6, #2
 8001b24:	d100      	bne.n	8001b28 <__aeabi_dmul+0x114>
 8001b26:	e235      	b.n	8001f94 <__aeabi_dmul+0x580>
 8001b28:	2e03      	cmp	r6, #3
 8001b2a:	d100      	bne.n	8001b2e <__aeabi_dmul+0x11a>
 8001b2c:	e1d2      	b.n	8001ed4 <__aeabi_dmul+0x4c0>
 8001b2e:	4654      	mov	r4, sl
 8001b30:	4648      	mov	r0, r9
 8001b32:	2e01      	cmp	r6, #1
 8001b34:	d0c1      	beq.n	8001aba <__aeabi_dmul+0xa6>
 8001b36:	9a01      	ldr	r2, [sp, #4]
 8001b38:	4b7d      	ldr	r3, [pc, #500]	@ (8001d30 <__aeabi_dmul+0x31c>)
 8001b3a:	4694      	mov	ip, r2
 8001b3c:	4463      	add	r3, ip
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	dc00      	bgt.n	8001b44 <__aeabi_dmul+0x130>
 8001b42:	e0c0      	b.n	8001cc6 <__aeabi_dmul+0x2b2>
 8001b44:	0742      	lsls	r2, r0, #29
 8001b46:	d009      	beq.n	8001b5c <__aeabi_dmul+0x148>
 8001b48:	220f      	movs	r2, #15
 8001b4a:	4002      	ands	r2, r0
 8001b4c:	2a04      	cmp	r2, #4
 8001b4e:	d005      	beq.n	8001b5c <__aeabi_dmul+0x148>
 8001b50:	1d02      	adds	r2, r0, #4
 8001b52:	4282      	cmp	r2, r0
 8001b54:	4180      	sbcs	r0, r0
 8001b56:	4240      	negs	r0, r0
 8001b58:	1824      	adds	r4, r4, r0
 8001b5a:	0010      	movs	r0, r2
 8001b5c:	01e2      	lsls	r2, r4, #7
 8001b5e:	d506      	bpl.n	8001b6e <__aeabi_dmul+0x15a>
 8001b60:	4b74      	ldr	r3, [pc, #464]	@ (8001d34 <__aeabi_dmul+0x320>)
 8001b62:	9a01      	ldr	r2, [sp, #4]
 8001b64:	401c      	ands	r4, r3
 8001b66:	2380      	movs	r3, #128	@ 0x80
 8001b68:	4694      	mov	ip, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4463      	add	r3, ip
 8001b6e:	4a72      	ldr	r2, [pc, #456]	@ (8001d38 <__aeabi_dmul+0x324>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	dc6b      	bgt.n	8001c4c <__aeabi_dmul+0x238>
 8001b74:	0762      	lsls	r2, r4, #29
 8001b76:	08c0      	lsrs	r0, r0, #3
 8001b78:	0264      	lsls	r4, r4, #9
 8001b7a:	055b      	lsls	r3, r3, #21
 8001b7c:	4302      	orrs	r2, r0
 8001b7e:	0b24      	lsrs	r4, r4, #12
 8001b80:	0d5b      	lsrs	r3, r3, #21
 8001b82:	e79d      	b.n	8001ac0 <__aeabi_dmul+0xac>
 8001b84:	2190      	movs	r1, #144	@ 0x90
 8001b86:	0089      	lsls	r1, r1, #2
 8001b88:	420f      	tst	r7, r1
 8001b8a:	d163      	bne.n	8001c54 <__aeabi_dmul+0x240>
 8001b8c:	2288      	movs	r2, #136	@ 0x88
 8001b8e:	423a      	tst	r2, r7
 8001b90:	d100      	bne.n	8001b94 <__aeabi_dmul+0x180>
 8001b92:	e0d7      	b.n	8001d44 <__aeabi_dmul+0x330>
 8001b94:	9b00      	ldr	r3, [sp, #0]
 8001b96:	46a2      	mov	sl, r4
 8001b98:	469b      	mov	fp, r3
 8001b9a:	4681      	mov	r9, r0
 8001b9c:	9602      	str	r6, [sp, #8]
 8001b9e:	e7bf      	b.n	8001b20 <__aeabi_dmul+0x10c>
 8001ba0:	0023      	movs	r3, r4
 8001ba2:	4333      	orrs	r3, r6
 8001ba4:	d100      	bne.n	8001ba8 <__aeabi_dmul+0x194>
 8001ba6:	e07f      	b.n	8001ca8 <__aeabi_dmul+0x294>
 8001ba8:	2c00      	cmp	r4, #0
 8001baa:	d100      	bne.n	8001bae <__aeabi_dmul+0x19a>
 8001bac:	e1ad      	b.n	8001f0a <__aeabi_dmul+0x4f6>
 8001bae:	0020      	movs	r0, r4
 8001bb0:	f000 fe8c 	bl	80028cc <__clzsi2>
 8001bb4:	0002      	movs	r2, r0
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	3a0b      	subs	r2, #11
 8001bba:	201d      	movs	r0, #29
 8001bbc:	0019      	movs	r1, r3
 8001bbe:	1a82      	subs	r2, r0, r2
 8001bc0:	0030      	movs	r0, r6
 8001bc2:	3908      	subs	r1, #8
 8001bc4:	40d0      	lsrs	r0, r2
 8001bc6:	408c      	lsls	r4, r1
 8001bc8:	4304      	orrs	r4, r0
 8001bca:	0030      	movs	r0, r6
 8001bcc:	4088      	lsls	r0, r1
 8001bce:	4a5b      	ldr	r2, [pc, #364]	@ (8001d3c <__aeabi_dmul+0x328>)
 8001bd0:	1aeb      	subs	r3, r5, r3
 8001bd2:	4694      	mov	ip, r2
 8001bd4:	4463      	add	r3, ip
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	9201      	str	r2, [sp, #4]
 8001bda:	4642      	mov	r2, r8
 8001bdc:	2600      	movs	r6, #0
 8001bde:	2a0a      	cmp	r2, #10
 8001be0:	dc00      	bgt.n	8001be4 <__aeabi_dmul+0x1d0>
 8001be2:	e75a      	b.n	8001a9a <__aeabi_dmul+0x86>
 8001be4:	e79c      	b.n	8001b20 <__aeabi_dmul+0x10c>
 8001be6:	4653      	mov	r3, sl
 8001be8:	4303      	orrs	r3, r0
 8001bea:	4699      	mov	r9, r3
 8001bec:	d054      	beq.n	8001c98 <__aeabi_dmul+0x284>
 8001bee:	4653      	mov	r3, sl
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dmul+0x1e2>
 8001bf4:	e177      	b.n	8001ee6 <__aeabi_dmul+0x4d2>
 8001bf6:	4650      	mov	r0, sl
 8001bf8:	f000 fe68 	bl	80028cc <__clzsi2>
 8001bfc:	230b      	movs	r3, #11
 8001bfe:	425b      	negs	r3, r3
 8001c00:	469c      	mov	ip, r3
 8001c02:	0002      	movs	r2, r0
 8001c04:	4484      	add	ip, r0
 8001c06:	0011      	movs	r1, r2
 8001c08:	4650      	mov	r0, sl
 8001c0a:	3908      	subs	r1, #8
 8001c0c:	4088      	lsls	r0, r1
 8001c0e:	231d      	movs	r3, #29
 8001c10:	4680      	mov	r8, r0
 8001c12:	4660      	mov	r0, ip
 8001c14:	1a1b      	subs	r3, r3, r0
 8001c16:	0020      	movs	r0, r4
 8001c18:	40d8      	lsrs	r0, r3
 8001c1a:	0003      	movs	r3, r0
 8001c1c:	4640      	mov	r0, r8
 8001c1e:	4303      	orrs	r3, r0
 8001c20:	469a      	mov	sl, r3
 8001c22:	0023      	movs	r3, r4
 8001c24:	408b      	lsls	r3, r1
 8001c26:	4699      	mov	r9, r3
 8001c28:	2300      	movs	r3, #0
 8001c2a:	4d44      	ldr	r5, [pc, #272]	@ (8001d3c <__aeabi_dmul+0x328>)
 8001c2c:	4698      	mov	r8, r3
 8001c2e:	1aad      	subs	r5, r5, r2
 8001c30:	9302      	str	r3, [sp, #8]
 8001c32:	e715      	b.n	8001a60 <__aeabi_dmul+0x4c>
 8001c34:	4652      	mov	r2, sl
 8001c36:	4302      	orrs	r2, r0
 8001c38:	4691      	mov	r9, r2
 8001c3a:	d126      	bne.n	8001c8a <__aeabi_dmul+0x276>
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	001d      	movs	r5, r3
 8001c40:	2302      	movs	r3, #2
 8001c42:	4692      	mov	sl, r2
 8001c44:	3208      	adds	r2, #8
 8001c46:	4690      	mov	r8, r2
 8001c48:	9302      	str	r3, [sp, #8]
 8001c4a:	e709      	b.n	8001a60 <__aeabi_dmul+0x4c>
 8001c4c:	2400      	movs	r4, #0
 8001c4e:	2200      	movs	r2, #0
 8001c50:	4b35      	ldr	r3, [pc, #212]	@ (8001d28 <__aeabi_dmul+0x314>)
 8001c52:	e735      	b.n	8001ac0 <__aeabi_dmul+0xac>
 8001c54:	2300      	movs	r3, #0
 8001c56:	2480      	movs	r4, #128	@ 0x80
 8001c58:	469b      	mov	fp, r3
 8001c5a:	0324      	lsls	r4, r4, #12
 8001c5c:	4b32      	ldr	r3, [pc, #200]	@ (8001d28 <__aeabi_dmul+0x314>)
 8001c5e:	e72f      	b.n	8001ac0 <__aeabi_dmul+0xac>
 8001c60:	2202      	movs	r2, #2
 8001c62:	4641      	mov	r1, r8
 8001c64:	4311      	orrs	r1, r2
 8001c66:	2280      	movs	r2, #128	@ 0x80
 8001c68:	0112      	lsls	r2, r2, #4
 8001c6a:	4694      	mov	ip, r2
 8001c6c:	002a      	movs	r2, r5
 8001c6e:	4462      	add	r2, ip
 8001c70:	4688      	mov	r8, r1
 8001c72:	9201      	str	r2, [sp, #4]
 8001c74:	290a      	cmp	r1, #10
 8001c76:	dd00      	ble.n	8001c7a <__aeabi_dmul+0x266>
 8001c78:	e752      	b.n	8001b20 <__aeabi_dmul+0x10c>
 8001c7a:	465a      	mov	r2, fp
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	9900      	ldr	r1, [sp, #0]
 8001c80:	0004      	movs	r4, r0
 8001c82:	404a      	eors	r2, r1
 8001c84:	4693      	mov	fp, r2
 8001c86:	2602      	movs	r6, #2
 8001c88:	e70b      	b.n	8001aa2 <__aeabi_dmul+0x8e>
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	001d      	movs	r5, r3
 8001c8e:	2303      	movs	r3, #3
 8001c90:	4681      	mov	r9, r0
 8001c92:	4690      	mov	r8, r2
 8001c94:	9302      	str	r3, [sp, #8]
 8001c96:	e6e3      	b.n	8001a60 <__aeabi_dmul+0x4c>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	469a      	mov	sl, r3
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	4698      	mov	r8, r3
 8001ca0:	3b03      	subs	r3, #3
 8001ca2:	2500      	movs	r5, #0
 8001ca4:	9302      	str	r3, [sp, #8]
 8001ca6:	e6db      	b.n	8001a60 <__aeabi_dmul+0x4c>
 8001ca8:	4642      	mov	r2, r8
 8001caa:	3301      	adds	r3, #1
 8001cac:	431a      	orrs	r2, r3
 8001cae:	002b      	movs	r3, r5
 8001cb0:	4690      	mov	r8, r2
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	9201      	str	r2, [sp, #4]
 8001cb6:	4642      	mov	r2, r8
 8001cb8:	2400      	movs	r4, #0
 8001cba:	2000      	movs	r0, #0
 8001cbc:	2601      	movs	r6, #1
 8001cbe:	2a0a      	cmp	r2, #10
 8001cc0:	dc00      	bgt.n	8001cc4 <__aeabi_dmul+0x2b0>
 8001cc2:	e6ea      	b.n	8001a9a <__aeabi_dmul+0x86>
 8001cc4:	e72c      	b.n	8001b20 <__aeabi_dmul+0x10c>
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	1ad2      	subs	r2, r2, r3
 8001cca:	2a38      	cmp	r2, #56	@ 0x38
 8001ccc:	dd00      	ble.n	8001cd0 <__aeabi_dmul+0x2bc>
 8001cce:	e6f4      	b.n	8001aba <__aeabi_dmul+0xa6>
 8001cd0:	2a1f      	cmp	r2, #31
 8001cd2:	dc00      	bgt.n	8001cd6 <__aeabi_dmul+0x2c2>
 8001cd4:	e12a      	b.n	8001f2c <__aeabi_dmul+0x518>
 8001cd6:	211f      	movs	r1, #31
 8001cd8:	4249      	negs	r1, r1
 8001cda:	1acb      	subs	r3, r1, r3
 8001cdc:	0021      	movs	r1, r4
 8001cde:	40d9      	lsrs	r1, r3
 8001ce0:	000b      	movs	r3, r1
 8001ce2:	2a20      	cmp	r2, #32
 8001ce4:	d005      	beq.n	8001cf2 <__aeabi_dmul+0x2de>
 8001ce6:	4a16      	ldr	r2, [pc, #88]	@ (8001d40 <__aeabi_dmul+0x32c>)
 8001ce8:	9d01      	ldr	r5, [sp, #4]
 8001cea:	4694      	mov	ip, r2
 8001cec:	4465      	add	r5, ip
 8001cee:	40ac      	lsls	r4, r5
 8001cf0:	4320      	orrs	r0, r4
 8001cf2:	1e42      	subs	r2, r0, #1
 8001cf4:	4190      	sbcs	r0, r2
 8001cf6:	4318      	orrs	r0, r3
 8001cf8:	2307      	movs	r3, #7
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	2400      	movs	r4, #0
 8001cfe:	4001      	ands	r1, r0
 8001d00:	4203      	tst	r3, r0
 8001d02:	d00c      	beq.n	8001d1e <__aeabi_dmul+0x30a>
 8001d04:	230f      	movs	r3, #15
 8001d06:	4003      	ands	r3, r0
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d100      	bne.n	8001d0e <__aeabi_dmul+0x2fa>
 8001d0c:	e140      	b.n	8001f90 <__aeabi_dmul+0x57c>
 8001d0e:	1d03      	adds	r3, r0, #4
 8001d10:	4283      	cmp	r3, r0
 8001d12:	41a4      	sbcs	r4, r4
 8001d14:	0018      	movs	r0, r3
 8001d16:	4264      	negs	r4, r4
 8001d18:	0761      	lsls	r1, r4, #29
 8001d1a:	0264      	lsls	r4, r4, #9
 8001d1c:	0b24      	lsrs	r4, r4, #12
 8001d1e:	08c2      	lsrs	r2, r0, #3
 8001d20:	2300      	movs	r3, #0
 8001d22:	430a      	orrs	r2, r1
 8001d24:	e6cc      	b.n	8001ac0 <__aeabi_dmul+0xac>
 8001d26:	46c0      	nop			@ (mov r8, r8)
 8001d28:	000007ff 	.word	0x000007ff
 8001d2c:	fffffc01 	.word	0xfffffc01
 8001d30:	000003ff 	.word	0x000003ff
 8001d34:	feffffff 	.word	0xfeffffff
 8001d38:	000007fe 	.word	0x000007fe
 8001d3c:	fffffc0d 	.word	0xfffffc0d
 8001d40:	0000043e 	.word	0x0000043e
 8001d44:	4649      	mov	r1, r9
 8001d46:	464a      	mov	r2, r9
 8001d48:	0409      	lsls	r1, r1, #16
 8001d4a:	0c09      	lsrs	r1, r1, #16
 8001d4c:	000d      	movs	r5, r1
 8001d4e:	0c16      	lsrs	r6, r2, #16
 8001d50:	0c02      	lsrs	r2, r0, #16
 8001d52:	0400      	lsls	r0, r0, #16
 8001d54:	0c00      	lsrs	r0, r0, #16
 8001d56:	4345      	muls	r5, r0
 8001d58:	46ac      	mov	ip, r5
 8001d5a:	0005      	movs	r5, r0
 8001d5c:	4375      	muls	r5, r6
 8001d5e:	46a8      	mov	r8, r5
 8001d60:	0015      	movs	r5, r2
 8001d62:	000f      	movs	r7, r1
 8001d64:	4375      	muls	r5, r6
 8001d66:	9200      	str	r2, [sp, #0]
 8001d68:	9502      	str	r5, [sp, #8]
 8001d6a:	002a      	movs	r2, r5
 8001d6c:	9d00      	ldr	r5, [sp, #0]
 8001d6e:	436f      	muls	r7, r5
 8001d70:	4665      	mov	r5, ip
 8001d72:	0c2d      	lsrs	r5, r5, #16
 8001d74:	46a9      	mov	r9, r5
 8001d76:	4447      	add	r7, r8
 8001d78:	444f      	add	r7, r9
 8001d7a:	45b8      	cmp	r8, r7
 8001d7c:	d905      	bls.n	8001d8a <__aeabi_dmul+0x376>
 8001d7e:	0015      	movs	r5, r2
 8001d80:	2280      	movs	r2, #128	@ 0x80
 8001d82:	0252      	lsls	r2, r2, #9
 8001d84:	4690      	mov	r8, r2
 8001d86:	4445      	add	r5, r8
 8001d88:	9502      	str	r5, [sp, #8]
 8001d8a:	0c3d      	lsrs	r5, r7, #16
 8001d8c:	9503      	str	r5, [sp, #12]
 8001d8e:	4665      	mov	r5, ip
 8001d90:	042d      	lsls	r5, r5, #16
 8001d92:	043f      	lsls	r7, r7, #16
 8001d94:	0c2d      	lsrs	r5, r5, #16
 8001d96:	46ac      	mov	ip, r5
 8001d98:	003d      	movs	r5, r7
 8001d9a:	4465      	add	r5, ip
 8001d9c:	9504      	str	r5, [sp, #16]
 8001d9e:	0c25      	lsrs	r5, r4, #16
 8001da0:	0424      	lsls	r4, r4, #16
 8001da2:	0c24      	lsrs	r4, r4, #16
 8001da4:	46ac      	mov	ip, r5
 8001da6:	0025      	movs	r5, r4
 8001da8:	4375      	muls	r5, r6
 8001daa:	46a8      	mov	r8, r5
 8001dac:	4665      	mov	r5, ip
 8001dae:	000f      	movs	r7, r1
 8001db0:	4369      	muls	r1, r5
 8001db2:	4441      	add	r1, r8
 8001db4:	4689      	mov	r9, r1
 8001db6:	4367      	muls	r7, r4
 8001db8:	0c39      	lsrs	r1, r7, #16
 8001dba:	4449      	add	r1, r9
 8001dbc:	436e      	muls	r6, r5
 8001dbe:	4588      	cmp	r8, r1
 8001dc0:	d903      	bls.n	8001dca <__aeabi_dmul+0x3b6>
 8001dc2:	2280      	movs	r2, #128	@ 0x80
 8001dc4:	0252      	lsls	r2, r2, #9
 8001dc6:	4690      	mov	r8, r2
 8001dc8:	4446      	add	r6, r8
 8001dca:	0c0d      	lsrs	r5, r1, #16
 8001dcc:	46a8      	mov	r8, r5
 8001dce:	0035      	movs	r5, r6
 8001dd0:	4445      	add	r5, r8
 8001dd2:	9505      	str	r5, [sp, #20]
 8001dd4:	9d03      	ldr	r5, [sp, #12]
 8001dd6:	043f      	lsls	r7, r7, #16
 8001dd8:	46a8      	mov	r8, r5
 8001dda:	0c3f      	lsrs	r7, r7, #16
 8001ddc:	0409      	lsls	r1, r1, #16
 8001dde:	19c9      	adds	r1, r1, r7
 8001de0:	4488      	add	r8, r1
 8001de2:	4645      	mov	r5, r8
 8001de4:	9503      	str	r5, [sp, #12]
 8001de6:	4655      	mov	r5, sl
 8001de8:	042e      	lsls	r6, r5, #16
 8001dea:	0c36      	lsrs	r6, r6, #16
 8001dec:	0c2f      	lsrs	r7, r5, #16
 8001dee:	0035      	movs	r5, r6
 8001df0:	4345      	muls	r5, r0
 8001df2:	4378      	muls	r0, r7
 8001df4:	4681      	mov	r9, r0
 8001df6:	0038      	movs	r0, r7
 8001df8:	46a8      	mov	r8, r5
 8001dfa:	0c2d      	lsrs	r5, r5, #16
 8001dfc:	46aa      	mov	sl, r5
 8001dfe:	9a00      	ldr	r2, [sp, #0]
 8001e00:	4350      	muls	r0, r2
 8001e02:	4372      	muls	r2, r6
 8001e04:	444a      	add	r2, r9
 8001e06:	4452      	add	r2, sl
 8001e08:	4591      	cmp	r9, r2
 8001e0a:	d903      	bls.n	8001e14 <__aeabi_dmul+0x400>
 8001e0c:	2580      	movs	r5, #128	@ 0x80
 8001e0e:	026d      	lsls	r5, r5, #9
 8001e10:	46a9      	mov	r9, r5
 8001e12:	4448      	add	r0, r9
 8001e14:	0c15      	lsrs	r5, r2, #16
 8001e16:	46a9      	mov	r9, r5
 8001e18:	4645      	mov	r5, r8
 8001e1a:	042d      	lsls	r5, r5, #16
 8001e1c:	0c2d      	lsrs	r5, r5, #16
 8001e1e:	46a8      	mov	r8, r5
 8001e20:	4665      	mov	r5, ip
 8001e22:	437d      	muls	r5, r7
 8001e24:	0412      	lsls	r2, r2, #16
 8001e26:	4448      	add	r0, r9
 8001e28:	4490      	add	r8, r2
 8001e2a:	46a9      	mov	r9, r5
 8001e2c:	0032      	movs	r2, r6
 8001e2e:	4665      	mov	r5, ip
 8001e30:	4362      	muls	r2, r4
 8001e32:	436e      	muls	r6, r5
 8001e34:	437c      	muls	r4, r7
 8001e36:	0c17      	lsrs	r7, r2, #16
 8001e38:	1936      	adds	r6, r6, r4
 8001e3a:	19bf      	adds	r7, r7, r6
 8001e3c:	42bc      	cmp	r4, r7
 8001e3e:	d903      	bls.n	8001e48 <__aeabi_dmul+0x434>
 8001e40:	2480      	movs	r4, #128	@ 0x80
 8001e42:	0264      	lsls	r4, r4, #9
 8001e44:	46a4      	mov	ip, r4
 8001e46:	44e1      	add	r9, ip
 8001e48:	9c02      	ldr	r4, [sp, #8]
 8001e4a:	9e03      	ldr	r6, [sp, #12]
 8001e4c:	46a4      	mov	ip, r4
 8001e4e:	9d05      	ldr	r5, [sp, #20]
 8001e50:	4466      	add	r6, ip
 8001e52:	428e      	cmp	r6, r1
 8001e54:	4189      	sbcs	r1, r1
 8001e56:	46ac      	mov	ip, r5
 8001e58:	0412      	lsls	r2, r2, #16
 8001e5a:	043c      	lsls	r4, r7, #16
 8001e5c:	0c12      	lsrs	r2, r2, #16
 8001e5e:	18a2      	adds	r2, r4, r2
 8001e60:	4462      	add	r2, ip
 8001e62:	4249      	negs	r1, r1
 8001e64:	1854      	adds	r4, r2, r1
 8001e66:	4446      	add	r6, r8
 8001e68:	46a4      	mov	ip, r4
 8001e6a:	4546      	cmp	r6, r8
 8001e6c:	41a4      	sbcs	r4, r4
 8001e6e:	4682      	mov	sl, r0
 8001e70:	4264      	negs	r4, r4
 8001e72:	46a0      	mov	r8, r4
 8001e74:	42aa      	cmp	r2, r5
 8001e76:	4192      	sbcs	r2, r2
 8001e78:	458c      	cmp	ip, r1
 8001e7a:	4189      	sbcs	r1, r1
 8001e7c:	44e2      	add	sl, ip
 8001e7e:	44d0      	add	r8, sl
 8001e80:	4249      	negs	r1, r1
 8001e82:	4252      	negs	r2, r2
 8001e84:	430a      	orrs	r2, r1
 8001e86:	45a0      	cmp	r8, r4
 8001e88:	41a4      	sbcs	r4, r4
 8001e8a:	4582      	cmp	sl, r0
 8001e8c:	4189      	sbcs	r1, r1
 8001e8e:	4264      	negs	r4, r4
 8001e90:	4249      	negs	r1, r1
 8001e92:	430c      	orrs	r4, r1
 8001e94:	4641      	mov	r1, r8
 8001e96:	0c3f      	lsrs	r7, r7, #16
 8001e98:	19d2      	adds	r2, r2, r7
 8001e9a:	1912      	adds	r2, r2, r4
 8001e9c:	0dcc      	lsrs	r4, r1, #23
 8001e9e:	9904      	ldr	r1, [sp, #16]
 8001ea0:	0270      	lsls	r0, r6, #9
 8001ea2:	4308      	orrs	r0, r1
 8001ea4:	1e41      	subs	r1, r0, #1
 8001ea6:	4188      	sbcs	r0, r1
 8001ea8:	4641      	mov	r1, r8
 8001eaa:	444a      	add	r2, r9
 8001eac:	0df6      	lsrs	r6, r6, #23
 8001eae:	0252      	lsls	r2, r2, #9
 8001eb0:	4330      	orrs	r0, r6
 8001eb2:	0249      	lsls	r1, r1, #9
 8001eb4:	4314      	orrs	r4, r2
 8001eb6:	4308      	orrs	r0, r1
 8001eb8:	01d2      	lsls	r2, r2, #7
 8001eba:	d535      	bpl.n	8001f28 <__aeabi_dmul+0x514>
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	0843      	lsrs	r3, r0, #1
 8001ec0:	4002      	ands	r2, r0
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	07e0      	lsls	r0, r4, #31
 8001ec6:	4318      	orrs	r0, r3
 8001ec8:	0864      	lsrs	r4, r4, #1
 8001eca:	e634      	b.n	8001b36 <__aeabi_dmul+0x122>
 8001ecc:	9b00      	ldr	r3, [sp, #0]
 8001ece:	46a2      	mov	sl, r4
 8001ed0:	469b      	mov	fp, r3
 8001ed2:	4681      	mov	r9, r0
 8001ed4:	2480      	movs	r4, #128	@ 0x80
 8001ed6:	4653      	mov	r3, sl
 8001ed8:	0324      	lsls	r4, r4, #12
 8001eda:	431c      	orrs	r4, r3
 8001edc:	0324      	lsls	r4, r4, #12
 8001ede:	464a      	mov	r2, r9
 8001ee0:	4b2e      	ldr	r3, [pc, #184]	@ (8001f9c <__aeabi_dmul+0x588>)
 8001ee2:	0b24      	lsrs	r4, r4, #12
 8001ee4:	e5ec      	b.n	8001ac0 <__aeabi_dmul+0xac>
 8001ee6:	f000 fcf1 	bl	80028cc <__clzsi2>
 8001eea:	2315      	movs	r3, #21
 8001eec:	469c      	mov	ip, r3
 8001eee:	4484      	add	ip, r0
 8001ef0:	0002      	movs	r2, r0
 8001ef2:	4663      	mov	r3, ip
 8001ef4:	3220      	adds	r2, #32
 8001ef6:	2b1c      	cmp	r3, #28
 8001ef8:	dc00      	bgt.n	8001efc <__aeabi_dmul+0x4e8>
 8001efa:	e684      	b.n	8001c06 <__aeabi_dmul+0x1f2>
 8001efc:	2300      	movs	r3, #0
 8001efe:	4699      	mov	r9, r3
 8001f00:	0023      	movs	r3, r4
 8001f02:	3808      	subs	r0, #8
 8001f04:	4083      	lsls	r3, r0
 8001f06:	469a      	mov	sl, r3
 8001f08:	e68e      	b.n	8001c28 <__aeabi_dmul+0x214>
 8001f0a:	f000 fcdf 	bl	80028cc <__clzsi2>
 8001f0e:	0002      	movs	r2, r0
 8001f10:	0003      	movs	r3, r0
 8001f12:	3215      	adds	r2, #21
 8001f14:	3320      	adds	r3, #32
 8001f16:	2a1c      	cmp	r2, #28
 8001f18:	dc00      	bgt.n	8001f1c <__aeabi_dmul+0x508>
 8001f1a:	e64e      	b.n	8001bba <__aeabi_dmul+0x1a6>
 8001f1c:	0002      	movs	r2, r0
 8001f1e:	0034      	movs	r4, r6
 8001f20:	3a08      	subs	r2, #8
 8001f22:	2000      	movs	r0, #0
 8001f24:	4094      	lsls	r4, r2
 8001f26:	e652      	b.n	8001bce <__aeabi_dmul+0x1ba>
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	e604      	b.n	8001b36 <__aeabi_dmul+0x122>
 8001f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa0 <__aeabi_dmul+0x58c>)
 8001f2e:	0021      	movs	r1, r4
 8001f30:	469c      	mov	ip, r3
 8001f32:	0003      	movs	r3, r0
 8001f34:	9d01      	ldr	r5, [sp, #4]
 8001f36:	40d3      	lsrs	r3, r2
 8001f38:	4465      	add	r5, ip
 8001f3a:	40a9      	lsls	r1, r5
 8001f3c:	4319      	orrs	r1, r3
 8001f3e:	0003      	movs	r3, r0
 8001f40:	40ab      	lsls	r3, r5
 8001f42:	1e58      	subs	r0, r3, #1
 8001f44:	4183      	sbcs	r3, r0
 8001f46:	4319      	orrs	r1, r3
 8001f48:	0008      	movs	r0, r1
 8001f4a:	40d4      	lsrs	r4, r2
 8001f4c:	074b      	lsls	r3, r1, #29
 8001f4e:	d009      	beq.n	8001f64 <__aeabi_dmul+0x550>
 8001f50:	230f      	movs	r3, #15
 8001f52:	400b      	ands	r3, r1
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d005      	beq.n	8001f64 <__aeabi_dmul+0x550>
 8001f58:	1d0b      	adds	r3, r1, #4
 8001f5a:	428b      	cmp	r3, r1
 8001f5c:	4180      	sbcs	r0, r0
 8001f5e:	4240      	negs	r0, r0
 8001f60:	1824      	adds	r4, r4, r0
 8001f62:	0018      	movs	r0, r3
 8001f64:	0223      	lsls	r3, r4, #8
 8001f66:	d400      	bmi.n	8001f6a <__aeabi_dmul+0x556>
 8001f68:	e6d6      	b.n	8001d18 <__aeabi_dmul+0x304>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	2400      	movs	r4, #0
 8001f6e:	2200      	movs	r2, #0
 8001f70:	e5a6      	b.n	8001ac0 <__aeabi_dmul+0xac>
 8001f72:	290f      	cmp	r1, #15
 8001f74:	d1aa      	bne.n	8001ecc <__aeabi_dmul+0x4b8>
 8001f76:	2380      	movs	r3, #128	@ 0x80
 8001f78:	4652      	mov	r2, sl
 8001f7a:	031b      	lsls	r3, r3, #12
 8001f7c:	421a      	tst	r2, r3
 8001f7e:	d0a9      	beq.n	8001ed4 <__aeabi_dmul+0x4c0>
 8001f80:	421c      	tst	r4, r3
 8001f82:	d1a7      	bne.n	8001ed4 <__aeabi_dmul+0x4c0>
 8001f84:	431c      	orrs	r4, r3
 8001f86:	9b00      	ldr	r3, [sp, #0]
 8001f88:	0002      	movs	r2, r0
 8001f8a:	469b      	mov	fp, r3
 8001f8c:	4b03      	ldr	r3, [pc, #12]	@ (8001f9c <__aeabi_dmul+0x588>)
 8001f8e:	e597      	b.n	8001ac0 <__aeabi_dmul+0xac>
 8001f90:	2400      	movs	r4, #0
 8001f92:	e6c1      	b.n	8001d18 <__aeabi_dmul+0x304>
 8001f94:	2400      	movs	r4, #0
 8001f96:	4b01      	ldr	r3, [pc, #4]	@ (8001f9c <__aeabi_dmul+0x588>)
 8001f98:	0022      	movs	r2, r4
 8001f9a:	e591      	b.n	8001ac0 <__aeabi_dmul+0xac>
 8001f9c:	000007ff 	.word	0x000007ff
 8001fa0:	0000041e 	.word	0x0000041e

08001fa4 <__aeabi_dsub>:
 8001fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fa6:	464e      	mov	r6, r9
 8001fa8:	4645      	mov	r5, r8
 8001faa:	46de      	mov	lr, fp
 8001fac:	4657      	mov	r7, sl
 8001fae:	b5e0      	push	{r5, r6, r7, lr}
 8001fb0:	b085      	sub	sp, #20
 8001fb2:	9000      	str	r0, [sp, #0]
 8001fb4:	9101      	str	r1, [sp, #4]
 8001fb6:	030c      	lsls	r4, r1, #12
 8001fb8:	004f      	lsls	r7, r1, #1
 8001fba:	0fce      	lsrs	r6, r1, #31
 8001fbc:	0a61      	lsrs	r1, r4, #9
 8001fbe:	9c00      	ldr	r4, [sp, #0]
 8001fc0:	46b0      	mov	r8, r6
 8001fc2:	0f64      	lsrs	r4, r4, #29
 8001fc4:	430c      	orrs	r4, r1
 8001fc6:	9900      	ldr	r1, [sp, #0]
 8001fc8:	0d7f      	lsrs	r7, r7, #21
 8001fca:	00c8      	lsls	r0, r1, #3
 8001fcc:	0011      	movs	r1, r2
 8001fce:	001a      	movs	r2, r3
 8001fd0:	031b      	lsls	r3, r3, #12
 8001fd2:	469c      	mov	ip, r3
 8001fd4:	9100      	str	r1, [sp, #0]
 8001fd6:	9201      	str	r2, [sp, #4]
 8001fd8:	0051      	lsls	r1, r2, #1
 8001fda:	0d4b      	lsrs	r3, r1, #21
 8001fdc:	4699      	mov	r9, r3
 8001fde:	9b01      	ldr	r3, [sp, #4]
 8001fe0:	9d00      	ldr	r5, [sp, #0]
 8001fe2:	0fd9      	lsrs	r1, r3, #31
 8001fe4:	4663      	mov	r3, ip
 8001fe6:	0f6a      	lsrs	r2, r5, #29
 8001fe8:	0a5b      	lsrs	r3, r3, #9
 8001fea:	4313      	orrs	r3, r2
 8001fec:	00ea      	lsls	r2, r5, #3
 8001fee:	4694      	mov	ip, r2
 8001ff0:	4693      	mov	fp, r2
 8001ff2:	4ac1      	ldr	r2, [pc, #772]	@ (80022f8 <__aeabi_dsub+0x354>)
 8001ff4:	9003      	str	r0, [sp, #12]
 8001ff6:	9302      	str	r3, [sp, #8]
 8001ff8:	4591      	cmp	r9, r2
 8001ffa:	d100      	bne.n	8001ffe <__aeabi_dsub+0x5a>
 8001ffc:	e0cd      	b.n	800219a <__aeabi_dsub+0x1f6>
 8001ffe:	2501      	movs	r5, #1
 8002000:	4069      	eors	r1, r5
 8002002:	464d      	mov	r5, r9
 8002004:	1b7d      	subs	r5, r7, r5
 8002006:	46aa      	mov	sl, r5
 8002008:	428e      	cmp	r6, r1
 800200a:	d100      	bne.n	800200e <__aeabi_dsub+0x6a>
 800200c:	e080      	b.n	8002110 <__aeabi_dsub+0x16c>
 800200e:	2d00      	cmp	r5, #0
 8002010:	dc00      	bgt.n	8002014 <__aeabi_dsub+0x70>
 8002012:	e335      	b.n	8002680 <__aeabi_dsub+0x6dc>
 8002014:	4649      	mov	r1, r9
 8002016:	2900      	cmp	r1, #0
 8002018:	d100      	bne.n	800201c <__aeabi_dsub+0x78>
 800201a:	e0df      	b.n	80021dc <__aeabi_dsub+0x238>
 800201c:	4297      	cmp	r7, r2
 800201e:	d100      	bne.n	8002022 <__aeabi_dsub+0x7e>
 8002020:	e194      	b.n	800234c <__aeabi_dsub+0x3a8>
 8002022:	4652      	mov	r2, sl
 8002024:	2501      	movs	r5, #1
 8002026:	2a38      	cmp	r2, #56	@ 0x38
 8002028:	dc19      	bgt.n	800205e <__aeabi_dsub+0xba>
 800202a:	2280      	movs	r2, #128	@ 0x80
 800202c:	9b02      	ldr	r3, [sp, #8]
 800202e:	0412      	lsls	r2, r2, #16
 8002030:	4313      	orrs	r3, r2
 8002032:	9302      	str	r3, [sp, #8]
 8002034:	4652      	mov	r2, sl
 8002036:	2a1f      	cmp	r2, #31
 8002038:	dd00      	ble.n	800203c <__aeabi_dsub+0x98>
 800203a:	e1e3      	b.n	8002404 <__aeabi_dsub+0x460>
 800203c:	4653      	mov	r3, sl
 800203e:	2220      	movs	r2, #32
 8002040:	4661      	mov	r1, ip
 8002042:	9d02      	ldr	r5, [sp, #8]
 8002044:	1ad2      	subs	r2, r2, r3
 8002046:	4095      	lsls	r5, r2
 8002048:	40d9      	lsrs	r1, r3
 800204a:	430d      	orrs	r5, r1
 800204c:	4661      	mov	r1, ip
 800204e:	4091      	lsls	r1, r2
 8002050:	000a      	movs	r2, r1
 8002052:	1e51      	subs	r1, r2, #1
 8002054:	418a      	sbcs	r2, r1
 8002056:	4315      	orrs	r5, r2
 8002058:	9a02      	ldr	r2, [sp, #8]
 800205a:	40da      	lsrs	r2, r3
 800205c:	1aa4      	subs	r4, r4, r2
 800205e:	1b45      	subs	r5, r0, r5
 8002060:	42a8      	cmp	r0, r5
 8002062:	4180      	sbcs	r0, r0
 8002064:	4240      	negs	r0, r0
 8002066:	1a24      	subs	r4, r4, r0
 8002068:	0223      	lsls	r3, r4, #8
 800206a:	d400      	bmi.n	800206e <__aeabi_dsub+0xca>
 800206c:	e13d      	b.n	80022ea <__aeabi_dsub+0x346>
 800206e:	0264      	lsls	r4, r4, #9
 8002070:	0a64      	lsrs	r4, r4, #9
 8002072:	2c00      	cmp	r4, #0
 8002074:	d100      	bne.n	8002078 <__aeabi_dsub+0xd4>
 8002076:	e147      	b.n	8002308 <__aeabi_dsub+0x364>
 8002078:	0020      	movs	r0, r4
 800207a:	f000 fc27 	bl	80028cc <__clzsi2>
 800207e:	0003      	movs	r3, r0
 8002080:	3b08      	subs	r3, #8
 8002082:	2120      	movs	r1, #32
 8002084:	0028      	movs	r0, r5
 8002086:	1aca      	subs	r2, r1, r3
 8002088:	40d0      	lsrs	r0, r2
 800208a:	409c      	lsls	r4, r3
 800208c:	0002      	movs	r2, r0
 800208e:	409d      	lsls	r5, r3
 8002090:	4322      	orrs	r2, r4
 8002092:	429f      	cmp	r7, r3
 8002094:	dd00      	ble.n	8002098 <__aeabi_dsub+0xf4>
 8002096:	e177      	b.n	8002388 <__aeabi_dsub+0x3e4>
 8002098:	1bd8      	subs	r0, r3, r7
 800209a:	3001      	adds	r0, #1
 800209c:	1a09      	subs	r1, r1, r0
 800209e:	002c      	movs	r4, r5
 80020a0:	408d      	lsls	r5, r1
 80020a2:	40c4      	lsrs	r4, r0
 80020a4:	1e6b      	subs	r3, r5, #1
 80020a6:	419d      	sbcs	r5, r3
 80020a8:	0013      	movs	r3, r2
 80020aa:	40c2      	lsrs	r2, r0
 80020ac:	408b      	lsls	r3, r1
 80020ae:	4325      	orrs	r5, r4
 80020b0:	2700      	movs	r7, #0
 80020b2:	0014      	movs	r4, r2
 80020b4:	431d      	orrs	r5, r3
 80020b6:	076b      	lsls	r3, r5, #29
 80020b8:	d009      	beq.n	80020ce <__aeabi_dsub+0x12a>
 80020ba:	230f      	movs	r3, #15
 80020bc:	402b      	ands	r3, r5
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d005      	beq.n	80020ce <__aeabi_dsub+0x12a>
 80020c2:	1d2b      	adds	r3, r5, #4
 80020c4:	42ab      	cmp	r3, r5
 80020c6:	41ad      	sbcs	r5, r5
 80020c8:	426d      	negs	r5, r5
 80020ca:	1964      	adds	r4, r4, r5
 80020cc:	001d      	movs	r5, r3
 80020ce:	0223      	lsls	r3, r4, #8
 80020d0:	d400      	bmi.n	80020d4 <__aeabi_dsub+0x130>
 80020d2:	e140      	b.n	8002356 <__aeabi_dsub+0x3b2>
 80020d4:	4a88      	ldr	r2, [pc, #544]	@ (80022f8 <__aeabi_dsub+0x354>)
 80020d6:	3701      	adds	r7, #1
 80020d8:	4297      	cmp	r7, r2
 80020da:	d100      	bne.n	80020de <__aeabi_dsub+0x13a>
 80020dc:	e101      	b.n	80022e2 <__aeabi_dsub+0x33e>
 80020de:	2601      	movs	r6, #1
 80020e0:	4643      	mov	r3, r8
 80020e2:	4986      	ldr	r1, [pc, #536]	@ (80022fc <__aeabi_dsub+0x358>)
 80020e4:	08ed      	lsrs	r5, r5, #3
 80020e6:	4021      	ands	r1, r4
 80020e8:	074a      	lsls	r2, r1, #29
 80020ea:	432a      	orrs	r2, r5
 80020ec:	057c      	lsls	r4, r7, #21
 80020ee:	024d      	lsls	r5, r1, #9
 80020f0:	0b2d      	lsrs	r5, r5, #12
 80020f2:	0d64      	lsrs	r4, r4, #21
 80020f4:	401e      	ands	r6, r3
 80020f6:	0524      	lsls	r4, r4, #20
 80020f8:	432c      	orrs	r4, r5
 80020fa:	07f6      	lsls	r6, r6, #31
 80020fc:	4334      	orrs	r4, r6
 80020fe:	0010      	movs	r0, r2
 8002100:	0021      	movs	r1, r4
 8002102:	b005      	add	sp, #20
 8002104:	bcf0      	pop	{r4, r5, r6, r7}
 8002106:	46bb      	mov	fp, r7
 8002108:	46b2      	mov	sl, r6
 800210a:	46a9      	mov	r9, r5
 800210c:	46a0      	mov	r8, r4
 800210e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002110:	2d00      	cmp	r5, #0
 8002112:	dc00      	bgt.n	8002116 <__aeabi_dsub+0x172>
 8002114:	e2d0      	b.n	80026b8 <__aeabi_dsub+0x714>
 8002116:	4649      	mov	r1, r9
 8002118:	2900      	cmp	r1, #0
 800211a:	d000      	beq.n	800211e <__aeabi_dsub+0x17a>
 800211c:	e0d4      	b.n	80022c8 <__aeabi_dsub+0x324>
 800211e:	4661      	mov	r1, ip
 8002120:	9b02      	ldr	r3, [sp, #8]
 8002122:	4319      	orrs	r1, r3
 8002124:	d100      	bne.n	8002128 <__aeabi_dsub+0x184>
 8002126:	e12b      	b.n	8002380 <__aeabi_dsub+0x3dc>
 8002128:	1e69      	subs	r1, r5, #1
 800212a:	2d01      	cmp	r5, #1
 800212c:	d100      	bne.n	8002130 <__aeabi_dsub+0x18c>
 800212e:	e1d9      	b.n	80024e4 <__aeabi_dsub+0x540>
 8002130:	4295      	cmp	r5, r2
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x192>
 8002134:	e10a      	b.n	800234c <__aeabi_dsub+0x3a8>
 8002136:	2501      	movs	r5, #1
 8002138:	2938      	cmp	r1, #56	@ 0x38
 800213a:	dc17      	bgt.n	800216c <__aeabi_dsub+0x1c8>
 800213c:	468a      	mov	sl, r1
 800213e:	4653      	mov	r3, sl
 8002140:	2b1f      	cmp	r3, #31
 8002142:	dd00      	ble.n	8002146 <__aeabi_dsub+0x1a2>
 8002144:	e1e7      	b.n	8002516 <__aeabi_dsub+0x572>
 8002146:	2220      	movs	r2, #32
 8002148:	1ad2      	subs	r2, r2, r3
 800214a:	9b02      	ldr	r3, [sp, #8]
 800214c:	4661      	mov	r1, ip
 800214e:	4093      	lsls	r3, r2
 8002150:	001d      	movs	r5, r3
 8002152:	4653      	mov	r3, sl
 8002154:	40d9      	lsrs	r1, r3
 8002156:	4663      	mov	r3, ip
 8002158:	4093      	lsls	r3, r2
 800215a:	001a      	movs	r2, r3
 800215c:	430d      	orrs	r5, r1
 800215e:	1e51      	subs	r1, r2, #1
 8002160:	418a      	sbcs	r2, r1
 8002162:	4653      	mov	r3, sl
 8002164:	4315      	orrs	r5, r2
 8002166:	9a02      	ldr	r2, [sp, #8]
 8002168:	40da      	lsrs	r2, r3
 800216a:	18a4      	adds	r4, r4, r2
 800216c:	182d      	adds	r5, r5, r0
 800216e:	4285      	cmp	r5, r0
 8002170:	4180      	sbcs	r0, r0
 8002172:	4240      	negs	r0, r0
 8002174:	1824      	adds	r4, r4, r0
 8002176:	0223      	lsls	r3, r4, #8
 8002178:	d400      	bmi.n	800217c <__aeabi_dsub+0x1d8>
 800217a:	e0b6      	b.n	80022ea <__aeabi_dsub+0x346>
 800217c:	4b5e      	ldr	r3, [pc, #376]	@ (80022f8 <__aeabi_dsub+0x354>)
 800217e:	3701      	adds	r7, #1
 8002180:	429f      	cmp	r7, r3
 8002182:	d100      	bne.n	8002186 <__aeabi_dsub+0x1e2>
 8002184:	e0ad      	b.n	80022e2 <__aeabi_dsub+0x33e>
 8002186:	2101      	movs	r1, #1
 8002188:	4b5c      	ldr	r3, [pc, #368]	@ (80022fc <__aeabi_dsub+0x358>)
 800218a:	086a      	lsrs	r2, r5, #1
 800218c:	401c      	ands	r4, r3
 800218e:	4029      	ands	r1, r5
 8002190:	430a      	orrs	r2, r1
 8002192:	07e5      	lsls	r5, r4, #31
 8002194:	4315      	orrs	r5, r2
 8002196:	0864      	lsrs	r4, r4, #1
 8002198:	e78d      	b.n	80020b6 <__aeabi_dsub+0x112>
 800219a:	4a59      	ldr	r2, [pc, #356]	@ (8002300 <__aeabi_dsub+0x35c>)
 800219c:	9b02      	ldr	r3, [sp, #8]
 800219e:	4692      	mov	sl, r2
 80021a0:	4662      	mov	r2, ip
 80021a2:	44ba      	add	sl, r7
 80021a4:	431a      	orrs	r2, r3
 80021a6:	d02c      	beq.n	8002202 <__aeabi_dsub+0x25e>
 80021a8:	428e      	cmp	r6, r1
 80021aa:	d02e      	beq.n	800220a <__aeabi_dsub+0x266>
 80021ac:	4652      	mov	r2, sl
 80021ae:	2a00      	cmp	r2, #0
 80021b0:	d060      	beq.n	8002274 <__aeabi_dsub+0x2d0>
 80021b2:	2f00      	cmp	r7, #0
 80021b4:	d100      	bne.n	80021b8 <__aeabi_dsub+0x214>
 80021b6:	e0db      	b.n	8002370 <__aeabi_dsub+0x3cc>
 80021b8:	4663      	mov	r3, ip
 80021ba:	000e      	movs	r6, r1
 80021bc:	9c02      	ldr	r4, [sp, #8]
 80021be:	08d8      	lsrs	r0, r3, #3
 80021c0:	0762      	lsls	r2, r4, #29
 80021c2:	4302      	orrs	r2, r0
 80021c4:	08e4      	lsrs	r4, r4, #3
 80021c6:	0013      	movs	r3, r2
 80021c8:	4323      	orrs	r3, r4
 80021ca:	d100      	bne.n	80021ce <__aeabi_dsub+0x22a>
 80021cc:	e254      	b.n	8002678 <__aeabi_dsub+0x6d4>
 80021ce:	2580      	movs	r5, #128	@ 0x80
 80021d0:	032d      	lsls	r5, r5, #12
 80021d2:	4325      	orrs	r5, r4
 80021d4:	032d      	lsls	r5, r5, #12
 80021d6:	4c48      	ldr	r4, [pc, #288]	@ (80022f8 <__aeabi_dsub+0x354>)
 80021d8:	0b2d      	lsrs	r5, r5, #12
 80021da:	e78c      	b.n	80020f6 <__aeabi_dsub+0x152>
 80021dc:	4661      	mov	r1, ip
 80021de:	9b02      	ldr	r3, [sp, #8]
 80021e0:	4319      	orrs	r1, r3
 80021e2:	d100      	bne.n	80021e6 <__aeabi_dsub+0x242>
 80021e4:	e0cc      	b.n	8002380 <__aeabi_dsub+0x3dc>
 80021e6:	0029      	movs	r1, r5
 80021e8:	3901      	subs	r1, #1
 80021ea:	2d01      	cmp	r5, #1
 80021ec:	d100      	bne.n	80021f0 <__aeabi_dsub+0x24c>
 80021ee:	e188      	b.n	8002502 <__aeabi_dsub+0x55e>
 80021f0:	4295      	cmp	r5, r2
 80021f2:	d100      	bne.n	80021f6 <__aeabi_dsub+0x252>
 80021f4:	e0aa      	b.n	800234c <__aeabi_dsub+0x3a8>
 80021f6:	2501      	movs	r5, #1
 80021f8:	2938      	cmp	r1, #56	@ 0x38
 80021fa:	dd00      	ble.n	80021fe <__aeabi_dsub+0x25a>
 80021fc:	e72f      	b.n	800205e <__aeabi_dsub+0xba>
 80021fe:	468a      	mov	sl, r1
 8002200:	e718      	b.n	8002034 <__aeabi_dsub+0x90>
 8002202:	2201      	movs	r2, #1
 8002204:	4051      	eors	r1, r2
 8002206:	428e      	cmp	r6, r1
 8002208:	d1d0      	bne.n	80021ac <__aeabi_dsub+0x208>
 800220a:	4653      	mov	r3, sl
 800220c:	2b00      	cmp	r3, #0
 800220e:	d100      	bne.n	8002212 <__aeabi_dsub+0x26e>
 8002210:	e0be      	b.n	8002390 <__aeabi_dsub+0x3ec>
 8002212:	2f00      	cmp	r7, #0
 8002214:	d000      	beq.n	8002218 <__aeabi_dsub+0x274>
 8002216:	e138      	b.n	800248a <__aeabi_dsub+0x4e6>
 8002218:	46ca      	mov	sl, r9
 800221a:	0022      	movs	r2, r4
 800221c:	4302      	orrs	r2, r0
 800221e:	d100      	bne.n	8002222 <__aeabi_dsub+0x27e>
 8002220:	e1e2      	b.n	80025e8 <__aeabi_dsub+0x644>
 8002222:	4653      	mov	r3, sl
 8002224:	1e59      	subs	r1, r3, #1
 8002226:	2b01      	cmp	r3, #1
 8002228:	d100      	bne.n	800222c <__aeabi_dsub+0x288>
 800222a:	e20d      	b.n	8002648 <__aeabi_dsub+0x6a4>
 800222c:	4a32      	ldr	r2, [pc, #200]	@ (80022f8 <__aeabi_dsub+0x354>)
 800222e:	4592      	cmp	sl, r2
 8002230:	d100      	bne.n	8002234 <__aeabi_dsub+0x290>
 8002232:	e1d2      	b.n	80025da <__aeabi_dsub+0x636>
 8002234:	2701      	movs	r7, #1
 8002236:	2938      	cmp	r1, #56	@ 0x38
 8002238:	dc13      	bgt.n	8002262 <__aeabi_dsub+0x2be>
 800223a:	291f      	cmp	r1, #31
 800223c:	dd00      	ble.n	8002240 <__aeabi_dsub+0x29c>
 800223e:	e1ee      	b.n	800261e <__aeabi_dsub+0x67a>
 8002240:	2220      	movs	r2, #32
 8002242:	9b02      	ldr	r3, [sp, #8]
 8002244:	1a52      	subs	r2, r2, r1
 8002246:	0025      	movs	r5, r4
 8002248:	0007      	movs	r7, r0
 800224a:	469a      	mov	sl, r3
 800224c:	40cc      	lsrs	r4, r1
 800224e:	4090      	lsls	r0, r2
 8002250:	4095      	lsls	r5, r2
 8002252:	40cf      	lsrs	r7, r1
 8002254:	44a2      	add	sl, r4
 8002256:	1e42      	subs	r2, r0, #1
 8002258:	4190      	sbcs	r0, r2
 800225a:	4653      	mov	r3, sl
 800225c:	432f      	orrs	r7, r5
 800225e:	4307      	orrs	r7, r0
 8002260:	9302      	str	r3, [sp, #8]
 8002262:	003d      	movs	r5, r7
 8002264:	4465      	add	r5, ip
 8002266:	4565      	cmp	r5, ip
 8002268:	4192      	sbcs	r2, r2
 800226a:	9b02      	ldr	r3, [sp, #8]
 800226c:	4252      	negs	r2, r2
 800226e:	464f      	mov	r7, r9
 8002270:	18d4      	adds	r4, r2, r3
 8002272:	e780      	b.n	8002176 <__aeabi_dsub+0x1d2>
 8002274:	4a23      	ldr	r2, [pc, #140]	@ (8002304 <__aeabi_dsub+0x360>)
 8002276:	1c7d      	adds	r5, r7, #1
 8002278:	4215      	tst	r5, r2
 800227a:	d000      	beq.n	800227e <__aeabi_dsub+0x2da>
 800227c:	e0aa      	b.n	80023d4 <__aeabi_dsub+0x430>
 800227e:	4662      	mov	r2, ip
 8002280:	0025      	movs	r5, r4
 8002282:	9b02      	ldr	r3, [sp, #8]
 8002284:	4305      	orrs	r5, r0
 8002286:	431a      	orrs	r2, r3
 8002288:	2f00      	cmp	r7, #0
 800228a:	d000      	beq.n	800228e <__aeabi_dsub+0x2ea>
 800228c:	e0f5      	b.n	800247a <__aeabi_dsub+0x4d6>
 800228e:	2d00      	cmp	r5, #0
 8002290:	d100      	bne.n	8002294 <__aeabi_dsub+0x2f0>
 8002292:	e16b      	b.n	800256c <__aeabi_dsub+0x5c8>
 8002294:	2a00      	cmp	r2, #0
 8002296:	d100      	bne.n	800229a <__aeabi_dsub+0x2f6>
 8002298:	e152      	b.n	8002540 <__aeabi_dsub+0x59c>
 800229a:	4663      	mov	r3, ip
 800229c:	1ac5      	subs	r5, r0, r3
 800229e:	9b02      	ldr	r3, [sp, #8]
 80022a0:	1ae2      	subs	r2, r4, r3
 80022a2:	42a8      	cmp	r0, r5
 80022a4:	419b      	sbcs	r3, r3
 80022a6:	425b      	negs	r3, r3
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	021a      	lsls	r2, r3, #8
 80022ac:	d400      	bmi.n	80022b0 <__aeabi_dsub+0x30c>
 80022ae:	e1d5      	b.n	800265c <__aeabi_dsub+0x6b8>
 80022b0:	4663      	mov	r3, ip
 80022b2:	1a1d      	subs	r5, r3, r0
 80022b4:	45ac      	cmp	ip, r5
 80022b6:	4192      	sbcs	r2, r2
 80022b8:	2601      	movs	r6, #1
 80022ba:	9b02      	ldr	r3, [sp, #8]
 80022bc:	4252      	negs	r2, r2
 80022be:	1b1c      	subs	r4, r3, r4
 80022c0:	4688      	mov	r8, r1
 80022c2:	1aa4      	subs	r4, r4, r2
 80022c4:	400e      	ands	r6, r1
 80022c6:	e6f6      	b.n	80020b6 <__aeabi_dsub+0x112>
 80022c8:	4297      	cmp	r7, r2
 80022ca:	d03f      	beq.n	800234c <__aeabi_dsub+0x3a8>
 80022cc:	4652      	mov	r2, sl
 80022ce:	2501      	movs	r5, #1
 80022d0:	2a38      	cmp	r2, #56	@ 0x38
 80022d2:	dd00      	ble.n	80022d6 <__aeabi_dsub+0x332>
 80022d4:	e74a      	b.n	800216c <__aeabi_dsub+0x1c8>
 80022d6:	2280      	movs	r2, #128	@ 0x80
 80022d8:	9b02      	ldr	r3, [sp, #8]
 80022da:	0412      	lsls	r2, r2, #16
 80022dc:	4313      	orrs	r3, r2
 80022de:	9302      	str	r3, [sp, #8]
 80022e0:	e72d      	b.n	800213e <__aeabi_dsub+0x19a>
 80022e2:	003c      	movs	r4, r7
 80022e4:	2500      	movs	r5, #0
 80022e6:	2200      	movs	r2, #0
 80022e8:	e705      	b.n	80020f6 <__aeabi_dsub+0x152>
 80022ea:	2307      	movs	r3, #7
 80022ec:	402b      	ands	r3, r5
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d000      	beq.n	80022f4 <__aeabi_dsub+0x350>
 80022f2:	e6e2      	b.n	80020ba <__aeabi_dsub+0x116>
 80022f4:	e06b      	b.n	80023ce <__aeabi_dsub+0x42a>
 80022f6:	46c0      	nop			@ (mov r8, r8)
 80022f8:	000007ff 	.word	0x000007ff
 80022fc:	ff7fffff 	.word	0xff7fffff
 8002300:	fffff801 	.word	0xfffff801
 8002304:	000007fe 	.word	0x000007fe
 8002308:	0028      	movs	r0, r5
 800230a:	f000 fadf 	bl	80028cc <__clzsi2>
 800230e:	0003      	movs	r3, r0
 8002310:	3318      	adds	r3, #24
 8002312:	2b1f      	cmp	r3, #31
 8002314:	dc00      	bgt.n	8002318 <__aeabi_dsub+0x374>
 8002316:	e6b4      	b.n	8002082 <__aeabi_dsub+0xde>
 8002318:	002a      	movs	r2, r5
 800231a:	3808      	subs	r0, #8
 800231c:	4082      	lsls	r2, r0
 800231e:	429f      	cmp	r7, r3
 8002320:	dd00      	ble.n	8002324 <__aeabi_dsub+0x380>
 8002322:	e0b9      	b.n	8002498 <__aeabi_dsub+0x4f4>
 8002324:	1bdb      	subs	r3, r3, r7
 8002326:	1c58      	adds	r0, r3, #1
 8002328:	281f      	cmp	r0, #31
 800232a:	dc00      	bgt.n	800232e <__aeabi_dsub+0x38a>
 800232c:	e1a0      	b.n	8002670 <__aeabi_dsub+0x6cc>
 800232e:	0015      	movs	r5, r2
 8002330:	3b1f      	subs	r3, #31
 8002332:	40dd      	lsrs	r5, r3
 8002334:	2820      	cmp	r0, #32
 8002336:	d005      	beq.n	8002344 <__aeabi_dsub+0x3a0>
 8002338:	2340      	movs	r3, #64	@ 0x40
 800233a:	1a1b      	subs	r3, r3, r0
 800233c:	409a      	lsls	r2, r3
 800233e:	1e53      	subs	r3, r2, #1
 8002340:	419a      	sbcs	r2, r3
 8002342:	4315      	orrs	r5, r2
 8002344:	2307      	movs	r3, #7
 8002346:	2700      	movs	r7, #0
 8002348:	402b      	ands	r3, r5
 800234a:	e7d0      	b.n	80022ee <__aeabi_dsub+0x34a>
 800234c:	08c0      	lsrs	r0, r0, #3
 800234e:	0762      	lsls	r2, r4, #29
 8002350:	4302      	orrs	r2, r0
 8002352:	08e4      	lsrs	r4, r4, #3
 8002354:	e737      	b.n	80021c6 <__aeabi_dsub+0x222>
 8002356:	08ea      	lsrs	r2, r5, #3
 8002358:	0763      	lsls	r3, r4, #29
 800235a:	431a      	orrs	r2, r3
 800235c:	4bd3      	ldr	r3, [pc, #844]	@ (80026ac <__aeabi_dsub+0x708>)
 800235e:	08e4      	lsrs	r4, r4, #3
 8002360:	429f      	cmp	r7, r3
 8002362:	d100      	bne.n	8002366 <__aeabi_dsub+0x3c2>
 8002364:	e72f      	b.n	80021c6 <__aeabi_dsub+0x222>
 8002366:	0324      	lsls	r4, r4, #12
 8002368:	0b25      	lsrs	r5, r4, #12
 800236a:	057c      	lsls	r4, r7, #21
 800236c:	0d64      	lsrs	r4, r4, #21
 800236e:	e6c2      	b.n	80020f6 <__aeabi_dsub+0x152>
 8002370:	46ca      	mov	sl, r9
 8002372:	0022      	movs	r2, r4
 8002374:	4302      	orrs	r2, r0
 8002376:	d158      	bne.n	800242a <__aeabi_dsub+0x486>
 8002378:	4663      	mov	r3, ip
 800237a:	000e      	movs	r6, r1
 800237c:	9c02      	ldr	r4, [sp, #8]
 800237e:	9303      	str	r3, [sp, #12]
 8002380:	9b03      	ldr	r3, [sp, #12]
 8002382:	4657      	mov	r7, sl
 8002384:	08da      	lsrs	r2, r3, #3
 8002386:	e7e7      	b.n	8002358 <__aeabi_dsub+0x3b4>
 8002388:	4cc9      	ldr	r4, [pc, #804]	@ (80026b0 <__aeabi_dsub+0x70c>)
 800238a:	1aff      	subs	r7, r7, r3
 800238c:	4014      	ands	r4, r2
 800238e:	e692      	b.n	80020b6 <__aeabi_dsub+0x112>
 8002390:	4dc8      	ldr	r5, [pc, #800]	@ (80026b4 <__aeabi_dsub+0x710>)
 8002392:	1c7a      	adds	r2, r7, #1
 8002394:	422a      	tst	r2, r5
 8002396:	d000      	beq.n	800239a <__aeabi_dsub+0x3f6>
 8002398:	e084      	b.n	80024a4 <__aeabi_dsub+0x500>
 800239a:	0022      	movs	r2, r4
 800239c:	4302      	orrs	r2, r0
 800239e:	2f00      	cmp	r7, #0
 80023a0:	d000      	beq.n	80023a4 <__aeabi_dsub+0x400>
 80023a2:	e0ef      	b.n	8002584 <__aeabi_dsub+0x5e0>
 80023a4:	2a00      	cmp	r2, #0
 80023a6:	d100      	bne.n	80023aa <__aeabi_dsub+0x406>
 80023a8:	e0e5      	b.n	8002576 <__aeabi_dsub+0x5d2>
 80023aa:	4662      	mov	r2, ip
 80023ac:	9902      	ldr	r1, [sp, #8]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	d100      	bne.n	80023b4 <__aeabi_dsub+0x410>
 80023b2:	e0c5      	b.n	8002540 <__aeabi_dsub+0x59c>
 80023b4:	4663      	mov	r3, ip
 80023b6:	18c5      	adds	r5, r0, r3
 80023b8:	468c      	mov	ip, r1
 80023ba:	4285      	cmp	r5, r0
 80023bc:	4180      	sbcs	r0, r0
 80023be:	4464      	add	r4, ip
 80023c0:	4240      	negs	r0, r0
 80023c2:	1824      	adds	r4, r4, r0
 80023c4:	0223      	lsls	r3, r4, #8
 80023c6:	d502      	bpl.n	80023ce <__aeabi_dsub+0x42a>
 80023c8:	4bb9      	ldr	r3, [pc, #740]	@ (80026b0 <__aeabi_dsub+0x70c>)
 80023ca:	3701      	adds	r7, #1
 80023cc:	401c      	ands	r4, r3
 80023ce:	46ba      	mov	sl, r7
 80023d0:	9503      	str	r5, [sp, #12]
 80023d2:	e7d5      	b.n	8002380 <__aeabi_dsub+0x3dc>
 80023d4:	4662      	mov	r2, ip
 80023d6:	1a85      	subs	r5, r0, r2
 80023d8:	42a8      	cmp	r0, r5
 80023da:	4192      	sbcs	r2, r2
 80023dc:	4252      	negs	r2, r2
 80023de:	4691      	mov	r9, r2
 80023e0:	9b02      	ldr	r3, [sp, #8]
 80023e2:	1ae3      	subs	r3, r4, r3
 80023e4:	001a      	movs	r2, r3
 80023e6:	464b      	mov	r3, r9
 80023e8:	1ad2      	subs	r2, r2, r3
 80023ea:	0013      	movs	r3, r2
 80023ec:	4691      	mov	r9, r2
 80023ee:	021a      	lsls	r2, r3, #8
 80023f0:	d46c      	bmi.n	80024cc <__aeabi_dsub+0x528>
 80023f2:	464a      	mov	r2, r9
 80023f4:	464c      	mov	r4, r9
 80023f6:	432a      	orrs	r2, r5
 80023f8:	d000      	beq.n	80023fc <__aeabi_dsub+0x458>
 80023fa:	e63a      	b.n	8002072 <__aeabi_dsub+0xce>
 80023fc:	2600      	movs	r6, #0
 80023fe:	2400      	movs	r4, #0
 8002400:	2500      	movs	r5, #0
 8002402:	e678      	b.n	80020f6 <__aeabi_dsub+0x152>
 8002404:	9902      	ldr	r1, [sp, #8]
 8002406:	4653      	mov	r3, sl
 8002408:	000d      	movs	r5, r1
 800240a:	3a20      	subs	r2, #32
 800240c:	40d5      	lsrs	r5, r2
 800240e:	2b20      	cmp	r3, #32
 8002410:	d006      	beq.n	8002420 <__aeabi_dsub+0x47c>
 8002412:	2240      	movs	r2, #64	@ 0x40
 8002414:	1ad2      	subs	r2, r2, r3
 8002416:	000b      	movs	r3, r1
 8002418:	4093      	lsls	r3, r2
 800241a:	4662      	mov	r2, ip
 800241c:	431a      	orrs	r2, r3
 800241e:	4693      	mov	fp, r2
 8002420:	465b      	mov	r3, fp
 8002422:	1e5a      	subs	r2, r3, #1
 8002424:	4193      	sbcs	r3, r2
 8002426:	431d      	orrs	r5, r3
 8002428:	e619      	b.n	800205e <__aeabi_dsub+0xba>
 800242a:	4653      	mov	r3, sl
 800242c:	1e5a      	subs	r2, r3, #1
 800242e:	2b01      	cmp	r3, #1
 8002430:	d100      	bne.n	8002434 <__aeabi_dsub+0x490>
 8002432:	e0c6      	b.n	80025c2 <__aeabi_dsub+0x61e>
 8002434:	4e9d      	ldr	r6, [pc, #628]	@ (80026ac <__aeabi_dsub+0x708>)
 8002436:	45b2      	cmp	sl, r6
 8002438:	d100      	bne.n	800243c <__aeabi_dsub+0x498>
 800243a:	e6bd      	b.n	80021b8 <__aeabi_dsub+0x214>
 800243c:	4688      	mov	r8, r1
 800243e:	000e      	movs	r6, r1
 8002440:	2501      	movs	r5, #1
 8002442:	2a38      	cmp	r2, #56	@ 0x38
 8002444:	dc10      	bgt.n	8002468 <__aeabi_dsub+0x4c4>
 8002446:	2a1f      	cmp	r2, #31
 8002448:	dc7f      	bgt.n	800254a <__aeabi_dsub+0x5a6>
 800244a:	2120      	movs	r1, #32
 800244c:	0025      	movs	r5, r4
 800244e:	1a89      	subs	r1, r1, r2
 8002450:	0007      	movs	r7, r0
 8002452:	4088      	lsls	r0, r1
 8002454:	408d      	lsls	r5, r1
 8002456:	40d7      	lsrs	r7, r2
 8002458:	40d4      	lsrs	r4, r2
 800245a:	1e41      	subs	r1, r0, #1
 800245c:	4188      	sbcs	r0, r1
 800245e:	9b02      	ldr	r3, [sp, #8]
 8002460:	433d      	orrs	r5, r7
 8002462:	1b1b      	subs	r3, r3, r4
 8002464:	4305      	orrs	r5, r0
 8002466:	9302      	str	r3, [sp, #8]
 8002468:	4662      	mov	r2, ip
 800246a:	1b55      	subs	r5, r2, r5
 800246c:	45ac      	cmp	ip, r5
 800246e:	4192      	sbcs	r2, r2
 8002470:	9b02      	ldr	r3, [sp, #8]
 8002472:	4252      	negs	r2, r2
 8002474:	464f      	mov	r7, r9
 8002476:	1a9c      	subs	r4, r3, r2
 8002478:	e5f6      	b.n	8002068 <__aeabi_dsub+0xc4>
 800247a:	2d00      	cmp	r5, #0
 800247c:	d000      	beq.n	8002480 <__aeabi_dsub+0x4dc>
 800247e:	e0b7      	b.n	80025f0 <__aeabi_dsub+0x64c>
 8002480:	2a00      	cmp	r2, #0
 8002482:	d100      	bne.n	8002486 <__aeabi_dsub+0x4e2>
 8002484:	e0f0      	b.n	8002668 <__aeabi_dsub+0x6c4>
 8002486:	2601      	movs	r6, #1
 8002488:	400e      	ands	r6, r1
 800248a:	4663      	mov	r3, ip
 800248c:	9802      	ldr	r0, [sp, #8]
 800248e:	08d9      	lsrs	r1, r3, #3
 8002490:	0742      	lsls	r2, r0, #29
 8002492:	430a      	orrs	r2, r1
 8002494:	08c4      	lsrs	r4, r0, #3
 8002496:	e696      	b.n	80021c6 <__aeabi_dsub+0x222>
 8002498:	4c85      	ldr	r4, [pc, #532]	@ (80026b0 <__aeabi_dsub+0x70c>)
 800249a:	1aff      	subs	r7, r7, r3
 800249c:	4014      	ands	r4, r2
 800249e:	0762      	lsls	r2, r4, #29
 80024a0:	08e4      	lsrs	r4, r4, #3
 80024a2:	e760      	b.n	8002366 <__aeabi_dsub+0x3c2>
 80024a4:	4981      	ldr	r1, [pc, #516]	@ (80026ac <__aeabi_dsub+0x708>)
 80024a6:	428a      	cmp	r2, r1
 80024a8:	d100      	bne.n	80024ac <__aeabi_dsub+0x508>
 80024aa:	e0c9      	b.n	8002640 <__aeabi_dsub+0x69c>
 80024ac:	4663      	mov	r3, ip
 80024ae:	18c1      	adds	r1, r0, r3
 80024b0:	4281      	cmp	r1, r0
 80024b2:	4180      	sbcs	r0, r0
 80024b4:	9b02      	ldr	r3, [sp, #8]
 80024b6:	4240      	negs	r0, r0
 80024b8:	18e3      	adds	r3, r4, r3
 80024ba:	181b      	adds	r3, r3, r0
 80024bc:	07dd      	lsls	r5, r3, #31
 80024be:	085c      	lsrs	r4, r3, #1
 80024c0:	2307      	movs	r3, #7
 80024c2:	0849      	lsrs	r1, r1, #1
 80024c4:	430d      	orrs	r5, r1
 80024c6:	0017      	movs	r7, r2
 80024c8:	402b      	ands	r3, r5
 80024ca:	e710      	b.n	80022ee <__aeabi_dsub+0x34a>
 80024cc:	4663      	mov	r3, ip
 80024ce:	1a1d      	subs	r5, r3, r0
 80024d0:	45ac      	cmp	ip, r5
 80024d2:	4192      	sbcs	r2, r2
 80024d4:	2601      	movs	r6, #1
 80024d6:	9b02      	ldr	r3, [sp, #8]
 80024d8:	4252      	negs	r2, r2
 80024da:	1b1c      	subs	r4, r3, r4
 80024dc:	4688      	mov	r8, r1
 80024de:	1aa4      	subs	r4, r4, r2
 80024e0:	400e      	ands	r6, r1
 80024e2:	e5c6      	b.n	8002072 <__aeabi_dsub+0xce>
 80024e4:	4663      	mov	r3, ip
 80024e6:	18c5      	adds	r5, r0, r3
 80024e8:	9b02      	ldr	r3, [sp, #8]
 80024ea:	4285      	cmp	r5, r0
 80024ec:	4180      	sbcs	r0, r0
 80024ee:	469c      	mov	ip, r3
 80024f0:	4240      	negs	r0, r0
 80024f2:	4464      	add	r4, ip
 80024f4:	1824      	adds	r4, r4, r0
 80024f6:	2701      	movs	r7, #1
 80024f8:	0223      	lsls	r3, r4, #8
 80024fa:	d400      	bmi.n	80024fe <__aeabi_dsub+0x55a>
 80024fc:	e6f5      	b.n	80022ea <__aeabi_dsub+0x346>
 80024fe:	2702      	movs	r7, #2
 8002500:	e641      	b.n	8002186 <__aeabi_dsub+0x1e2>
 8002502:	4663      	mov	r3, ip
 8002504:	1ac5      	subs	r5, r0, r3
 8002506:	42a8      	cmp	r0, r5
 8002508:	4180      	sbcs	r0, r0
 800250a:	9b02      	ldr	r3, [sp, #8]
 800250c:	4240      	negs	r0, r0
 800250e:	1ae4      	subs	r4, r4, r3
 8002510:	2701      	movs	r7, #1
 8002512:	1a24      	subs	r4, r4, r0
 8002514:	e5a8      	b.n	8002068 <__aeabi_dsub+0xc4>
 8002516:	9d02      	ldr	r5, [sp, #8]
 8002518:	4652      	mov	r2, sl
 800251a:	002b      	movs	r3, r5
 800251c:	3a20      	subs	r2, #32
 800251e:	40d3      	lsrs	r3, r2
 8002520:	0019      	movs	r1, r3
 8002522:	4653      	mov	r3, sl
 8002524:	2b20      	cmp	r3, #32
 8002526:	d006      	beq.n	8002536 <__aeabi_dsub+0x592>
 8002528:	2240      	movs	r2, #64	@ 0x40
 800252a:	1ad2      	subs	r2, r2, r3
 800252c:	002b      	movs	r3, r5
 800252e:	4093      	lsls	r3, r2
 8002530:	4662      	mov	r2, ip
 8002532:	431a      	orrs	r2, r3
 8002534:	4693      	mov	fp, r2
 8002536:	465d      	mov	r5, fp
 8002538:	1e6b      	subs	r3, r5, #1
 800253a:	419d      	sbcs	r5, r3
 800253c:	430d      	orrs	r5, r1
 800253e:	e615      	b.n	800216c <__aeabi_dsub+0x1c8>
 8002540:	0762      	lsls	r2, r4, #29
 8002542:	08c0      	lsrs	r0, r0, #3
 8002544:	4302      	orrs	r2, r0
 8002546:	08e4      	lsrs	r4, r4, #3
 8002548:	e70d      	b.n	8002366 <__aeabi_dsub+0x3c2>
 800254a:	0011      	movs	r1, r2
 800254c:	0027      	movs	r7, r4
 800254e:	3920      	subs	r1, #32
 8002550:	40cf      	lsrs	r7, r1
 8002552:	2a20      	cmp	r2, #32
 8002554:	d005      	beq.n	8002562 <__aeabi_dsub+0x5be>
 8002556:	2140      	movs	r1, #64	@ 0x40
 8002558:	1a8a      	subs	r2, r1, r2
 800255a:	4094      	lsls	r4, r2
 800255c:	0025      	movs	r5, r4
 800255e:	4305      	orrs	r5, r0
 8002560:	9503      	str	r5, [sp, #12]
 8002562:	9d03      	ldr	r5, [sp, #12]
 8002564:	1e6a      	subs	r2, r5, #1
 8002566:	4195      	sbcs	r5, r2
 8002568:	433d      	orrs	r5, r7
 800256a:	e77d      	b.n	8002468 <__aeabi_dsub+0x4c4>
 800256c:	2a00      	cmp	r2, #0
 800256e:	d100      	bne.n	8002572 <__aeabi_dsub+0x5ce>
 8002570:	e744      	b.n	80023fc <__aeabi_dsub+0x458>
 8002572:	2601      	movs	r6, #1
 8002574:	400e      	ands	r6, r1
 8002576:	4663      	mov	r3, ip
 8002578:	08d9      	lsrs	r1, r3, #3
 800257a:	9b02      	ldr	r3, [sp, #8]
 800257c:	075a      	lsls	r2, r3, #29
 800257e:	430a      	orrs	r2, r1
 8002580:	08dc      	lsrs	r4, r3, #3
 8002582:	e6f0      	b.n	8002366 <__aeabi_dsub+0x3c2>
 8002584:	2a00      	cmp	r2, #0
 8002586:	d028      	beq.n	80025da <__aeabi_dsub+0x636>
 8002588:	4662      	mov	r2, ip
 800258a:	9f02      	ldr	r7, [sp, #8]
 800258c:	08c0      	lsrs	r0, r0, #3
 800258e:	433a      	orrs	r2, r7
 8002590:	d100      	bne.n	8002594 <__aeabi_dsub+0x5f0>
 8002592:	e6dc      	b.n	800234e <__aeabi_dsub+0x3aa>
 8002594:	0762      	lsls	r2, r4, #29
 8002596:	4310      	orrs	r0, r2
 8002598:	2280      	movs	r2, #128	@ 0x80
 800259a:	08e4      	lsrs	r4, r4, #3
 800259c:	0312      	lsls	r2, r2, #12
 800259e:	4214      	tst	r4, r2
 80025a0:	d009      	beq.n	80025b6 <__aeabi_dsub+0x612>
 80025a2:	08fd      	lsrs	r5, r7, #3
 80025a4:	4215      	tst	r5, r2
 80025a6:	d106      	bne.n	80025b6 <__aeabi_dsub+0x612>
 80025a8:	4663      	mov	r3, ip
 80025aa:	2601      	movs	r6, #1
 80025ac:	002c      	movs	r4, r5
 80025ae:	08d8      	lsrs	r0, r3, #3
 80025b0:	077b      	lsls	r3, r7, #29
 80025b2:	4318      	orrs	r0, r3
 80025b4:	400e      	ands	r6, r1
 80025b6:	0f42      	lsrs	r2, r0, #29
 80025b8:	00c0      	lsls	r0, r0, #3
 80025ba:	08c0      	lsrs	r0, r0, #3
 80025bc:	0752      	lsls	r2, r2, #29
 80025be:	4302      	orrs	r2, r0
 80025c0:	e601      	b.n	80021c6 <__aeabi_dsub+0x222>
 80025c2:	4663      	mov	r3, ip
 80025c4:	1a1d      	subs	r5, r3, r0
 80025c6:	45ac      	cmp	ip, r5
 80025c8:	4192      	sbcs	r2, r2
 80025ca:	9b02      	ldr	r3, [sp, #8]
 80025cc:	4252      	negs	r2, r2
 80025ce:	1b1c      	subs	r4, r3, r4
 80025d0:	000e      	movs	r6, r1
 80025d2:	4688      	mov	r8, r1
 80025d4:	2701      	movs	r7, #1
 80025d6:	1aa4      	subs	r4, r4, r2
 80025d8:	e546      	b.n	8002068 <__aeabi_dsub+0xc4>
 80025da:	4663      	mov	r3, ip
 80025dc:	08d9      	lsrs	r1, r3, #3
 80025de:	9b02      	ldr	r3, [sp, #8]
 80025e0:	075a      	lsls	r2, r3, #29
 80025e2:	430a      	orrs	r2, r1
 80025e4:	08dc      	lsrs	r4, r3, #3
 80025e6:	e5ee      	b.n	80021c6 <__aeabi_dsub+0x222>
 80025e8:	4663      	mov	r3, ip
 80025ea:	9c02      	ldr	r4, [sp, #8]
 80025ec:	9303      	str	r3, [sp, #12]
 80025ee:	e6c7      	b.n	8002380 <__aeabi_dsub+0x3dc>
 80025f0:	08c0      	lsrs	r0, r0, #3
 80025f2:	2a00      	cmp	r2, #0
 80025f4:	d100      	bne.n	80025f8 <__aeabi_dsub+0x654>
 80025f6:	e6aa      	b.n	800234e <__aeabi_dsub+0x3aa>
 80025f8:	0762      	lsls	r2, r4, #29
 80025fa:	4310      	orrs	r0, r2
 80025fc:	2280      	movs	r2, #128	@ 0x80
 80025fe:	08e4      	lsrs	r4, r4, #3
 8002600:	0312      	lsls	r2, r2, #12
 8002602:	4214      	tst	r4, r2
 8002604:	d0d7      	beq.n	80025b6 <__aeabi_dsub+0x612>
 8002606:	9f02      	ldr	r7, [sp, #8]
 8002608:	08fd      	lsrs	r5, r7, #3
 800260a:	4215      	tst	r5, r2
 800260c:	d1d3      	bne.n	80025b6 <__aeabi_dsub+0x612>
 800260e:	4663      	mov	r3, ip
 8002610:	2601      	movs	r6, #1
 8002612:	08d8      	lsrs	r0, r3, #3
 8002614:	077b      	lsls	r3, r7, #29
 8002616:	002c      	movs	r4, r5
 8002618:	4318      	orrs	r0, r3
 800261a:	400e      	ands	r6, r1
 800261c:	e7cb      	b.n	80025b6 <__aeabi_dsub+0x612>
 800261e:	000a      	movs	r2, r1
 8002620:	0027      	movs	r7, r4
 8002622:	3a20      	subs	r2, #32
 8002624:	40d7      	lsrs	r7, r2
 8002626:	2920      	cmp	r1, #32
 8002628:	d005      	beq.n	8002636 <__aeabi_dsub+0x692>
 800262a:	2240      	movs	r2, #64	@ 0x40
 800262c:	1a52      	subs	r2, r2, r1
 800262e:	4094      	lsls	r4, r2
 8002630:	0025      	movs	r5, r4
 8002632:	4305      	orrs	r5, r0
 8002634:	9503      	str	r5, [sp, #12]
 8002636:	9d03      	ldr	r5, [sp, #12]
 8002638:	1e6a      	subs	r2, r5, #1
 800263a:	4195      	sbcs	r5, r2
 800263c:	432f      	orrs	r7, r5
 800263e:	e610      	b.n	8002262 <__aeabi_dsub+0x2be>
 8002640:	0014      	movs	r4, r2
 8002642:	2500      	movs	r5, #0
 8002644:	2200      	movs	r2, #0
 8002646:	e556      	b.n	80020f6 <__aeabi_dsub+0x152>
 8002648:	9b02      	ldr	r3, [sp, #8]
 800264a:	4460      	add	r0, ip
 800264c:	4699      	mov	r9, r3
 800264e:	4560      	cmp	r0, ip
 8002650:	4192      	sbcs	r2, r2
 8002652:	444c      	add	r4, r9
 8002654:	4252      	negs	r2, r2
 8002656:	0005      	movs	r5, r0
 8002658:	18a4      	adds	r4, r4, r2
 800265a:	e74c      	b.n	80024f6 <__aeabi_dsub+0x552>
 800265c:	001a      	movs	r2, r3
 800265e:	001c      	movs	r4, r3
 8002660:	432a      	orrs	r2, r5
 8002662:	d000      	beq.n	8002666 <__aeabi_dsub+0x6c2>
 8002664:	e6b3      	b.n	80023ce <__aeabi_dsub+0x42a>
 8002666:	e6c9      	b.n	80023fc <__aeabi_dsub+0x458>
 8002668:	2480      	movs	r4, #128	@ 0x80
 800266a:	2600      	movs	r6, #0
 800266c:	0324      	lsls	r4, r4, #12
 800266e:	e5ae      	b.n	80021ce <__aeabi_dsub+0x22a>
 8002670:	2120      	movs	r1, #32
 8002672:	2500      	movs	r5, #0
 8002674:	1a09      	subs	r1, r1, r0
 8002676:	e517      	b.n	80020a8 <__aeabi_dsub+0x104>
 8002678:	2200      	movs	r2, #0
 800267a:	2500      	movs	r5, #0
 800267c:	4c0b      	ldr	r4, [pc, #44]	@ (80026ac <__aeabi_dsub+0x708>)
 800267e:	e53a      	b.n	80020f6 <__aeabi_dsub+0x152>
 8002680:	2d00      	cmp	r5, #0
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0x6e2>
 8002684:	e5f6      	b.n	8002274 <__aeabi_dsub+0x2d0>
 8002686:	464b      	mov	r3, r9
 8002688:	1bda      	subs	r2, r3, r7
 800268a:	4692      	mov	sl, r2
 800268c:	2f00      	cmp	r7, #0
 800268e:	d100      	bne.n	8002692 <__aeabi_dsub+0x6ee>
 8002690:	e66f      	b.n	8002372 <__aeabi_dsub+0x3ce>
 8002692:	2a38      	cmp	r2, #56	@ 0x38
 8002694:	dc05      	bgt.n	80026a2 <__aeabi_dsub+0x6fe>
 8002696:	2680      	movs	r6, #128	@ 0x80
 8002698:	0436      	lsls	r6, r6, #16
 800269a:	4334      	orrs	r4, r6
 800269c:	4688      	mov	r8, r1
 800269e:	000e      	movs	r6, r1
 80026a0:	e6d1      	b.n	8002446 <__aeabi_dsub+0x4a2>
 80026a2:	4688      	mov	r8, r1
 80026a4:	000e      	movs	r6, r1
 80026a6:	2501      	movs	r5, #1
 80026a8:	e6de      	b.n	8002468 <__aeabi_dsub+0x4c4>
 80026aa:	46c0      	nop			@ (mov r8, r8)
 80026ac:	000007ff 	.word	0x000007ff
 80026b0:	ff7fffff 	.word	0xff7fffff
 80026b4:	000007fe 	.word	0x000007fe
 80026b8:	2d00      	cmp	r5, #0
 80026ba:	d100      	bne.n	80026be <__aeabi_dsub+0x71a>
 80026bc:	e668      	b.n	8002390 <__aeabi_dsub+0x3ec>
 80026be:	464b      	mov	r3, r9
 80026c0:	1bd9      	subs	r1, r3, r7
 80026c2:	2f00      	cmp	r7, #0
 80026c4:	d101      	bne.n	80026ca <__aeabi_dsub+0x726>
 80026c6:	468a      	mov	sl, r1
 80026c8:	e5a7      	b.n	800221a <__aeabi_dsub+0x276>
 80026ca:	2701      	movs	r7, #1
 80026cc:	2938      	cmp	r1, #56	@ 0x38
 80026ce:	dd00      	ble.n	80026d2 <__aeabi_dsub+0x72e>
 80026d0:	e5c7      	b.n	8002262 <__aeabi_dsub+0x2be>
 80026d2:	2280      	movs	r2, #128	@ 0x80
 80026d4:	0412      	lsls	r2, r2, #16
 80026d6:	4314      	orrs	r4, r2
 80026d8:	e5af      	b.n	800223a <__aeabi_dsub+0x296>
 80026da:	46c0      	nop			@ (mov r8, r8)

080026dc <__aeabi_dcmpun>:
 80026dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026de:	46c6      	mov	lr, r8
 80026e0:	031e      	lsls	r6, r3, #12
 80026e2:	0b36      	lsrs	r6, r6, #12
 80026e4:	46b0      	mov	r8, r6
 80026e6:	4e0d      	ldr	r6, [pc, #52]	@ (800271c <__aeabi_dcmpun+0x40>)
 80026e8:	030c      	lsls	r4, r1, #12
 80026ea:	004d      	lsls	r5, r1, #1
 80026ec:	005f      	lsls	r7, r3, #1
 80026ee:	b500      	push	{lr}
 80026f0:	0b24      	lsrs	r4, r4, #12
 80026f2:	0d6d      	lsrs	r5, r5, #21
 80026f4:	0d7f      	lsrs	r7, r7, #21
 80026f6:	42b5      	cmp	r5, r6
 80026f8:	d00b      	beq.n	8002712 <__aeabi_dcmpun+0x36>
 80026fa:	4908      	ldr	r1, [pc, #32]	@ (800271c <__aeabi_dcmpun+0x40>)
 80026fc:	2000      	movs	r0, #0
 80026fe:	428f      	cmp	r7, r1
 8002700:	d104      	bne.n	800270c <__aeabi_dcmpun+0x30>
 8002702:	4646      	mov	r6, r8
 8002704:	4316      	orrs	r6, r2
 8002706:	0030      	movs	r0, r6
 8002708:	1e43      	subs	r3, r0, #1
 800270a:	4198      	sbcs	r0, r3
 800270c:	bc80      	pop	{r7}
 800270e:	46b8      	mov	r8, r7
 8002710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002712:	4304      	orrs	r4, r0
 8002714:	2001      	movs	r0, #1
 8002716:	2c00      	cmp	r4, #0
 8002718:	d1f8      	bne.n	800270c <__aeabi_dcmpun+0x30>
 800271a:	e7ee      	b.n	80026fa <__aeabi_dcmpun+0x1e>
 800271c:	000007ff 	.word	0x000007ff

08002720 <__aeabi_d2iz>:
 8002720:	000b      	movs	r3, r1
 8002722:	0002      	movs	r2, r0
 8002724:	b570      	push	{r4, r5, r6, lr}
 8002726:	4d16      	ldr	r5, [pc, #88]	@ (8002780 <__aeabi_d2iz+0x60>)
 8002728:	030c      	lsls	r4, r1, #12
 800272a:	b082      	sub	sp, #8
 800272c:	0049      	lsls	r1, r1, #1
 800272e:	2000      	movs	r0, #0
 8002730:	9200      	str	r2, [sp, #0]
 8002732:	9301      	str	r3, [sp, #4]
 8002734:	0b24      	lsrs	r4, r4, #12
 8002736:	0d49      	lsrs	r1, r1, #21
 8002738:	0fde      	lsrs	r6, r3, #31
 800273a:	42a9      	cmp	r1, r5
 800273c:	dd04      	ble.n	8002748 <__aeabi_d2iz+0x28>
 800273e:	4811      	ldr	r0, [pc, #68]	@ (8002784 <__aeabi_d2iz+0x64>)
 8002740:	4281      	cmp	r1, r0
 8002742:	dd03      	ble.n	800274c <__aeabi_d2iz+0x2c>
 8002744:	4b10      	ldr	r3, [pc, #64]	@ (8002788 <__aeabi_d2iz+0x68>)
 8002746:	18f0      	adds	r0, r6, r3
 8002748:	b002      	add	sp, #8
 800274a:	bd70      	pop	{r4, r5, r6, pc}
 800274c:	2080      	movs	r0, #128	@ 0x80
 800274e:	0340      	lsls	r0, r0, #13
 8002750:	4320      	orrs	r0, r4
 8002752:	4c0e      	ldr	r4, [pc, #56]	@ (800278c <__aeabi_d2iz+0x6c>)
 8002754:	1a64      	subs	r4, r4, r1
 8002756:	2c1f      	cmp	r4, #31
 8002758:	dd08      	ble.n	800276c <__aeabi_d2iz+0x4c>
 800275a:	4b0d      	ldr	r3, [pc, #52]	@ (8002790 <__aeabi_d2iz+0x70>)
 800275c:	1a5b      	subs	r3, r3, r1
 800275e:	40d8      	lsrs	r0, r3
 8002760:	0003      	movs	r3, r0
 8002762:	4258      	negs	r0, r3
 8002764:	2e00      	cmp	r6, #0
 8002766:	d1ef      	bne.n	8002748 <__aeabi_d2iz+0x28>
 8002768:	0018      	movs	r0, r3
 800276a:	e7ed      	b.n	8002748 <__aeabi_d2iz+0x28>
 800276c:	4b09      	ldr	r3, [pc, #36]	@ (8002794 <__aeabi_d2iz+0x74>)
 800276e:	9a00      	ldr	r2, [sp, #0]
 8002770:	469c      	mov	ip, r3
 8002772:	0003      	movs	r3, r0
 8002774:	4461      	add	r1, ip
 8002776:	408b      	lsls	r3, r1
 8002778:	40e2      	lsrs	r2, r4
 800277a:	4313      	orrs	r3, r2
 800277c:	e7f1      	b.n	8002762 <__aeabi_d2iz+0x42>
 800277e:	46c0      	nop			@ (mov r8, r8)
 8002780:	000003fe 	.word	0x000003fe
 8002784:	0000041d 	.word	0x0000041d
 8002788:	7fffffff 	.word	0x7fffffff
 800278c:	00000433 	.word	0x00000433
 8002790:	00000413 	.word	0x00000413
 8002794:	fffffbed 	.word	0xfffffbed

08002798 <__aeabi_i2d>:
 8002798:	b570      	push	{r4, r5, r6, lr}
 800279a:	2800      	cmp	r0, #0
 800279c:	d016      	beq.n	80027cc <__aeabi_i2d+0x34>
 800279e:	17c3      	asrs	r3, r0, #31
 80027a0:	18c5      	adds	r5, r0, r3
 80027a2:	405d      	eors	r5, r3
 80027a4:	0fc4      	lsrs	r4, r0, #31
 80027a6:	0028      	movs	r0, r5
 80027a8:	f000 f890 	bl	80028cc <__clzsi2>
 80027ac:	4b10      	ldr	r3, [pc, #64]	@ (80027f0 <__aeabi_i2d+0x58>)
 80027ae:	1a1b      	subs	r3, r3, r0
 80027b0:	055b      	lsls	r3, r3, #21
 80027b2:	0d5b      	lsrs	r3, r3, #21
 80027b4:	280a      	cmp	r0, #10
 80027b6:	dc14      	bgt.n	80027e2 <__aeabi_i2d+0x4a>
 80027b8:	0002      	movs	r2, r0
 80027ba:	002e      	movs	r6, r5
 80027bc:	3215      	adds	r2, #21
 80027be:	4096      	lsls	r6, r2
 80027c0:	220b      	movs	r2, #11
 80027c2:	1a12      	subs	r2, r2, r0
 80027c4:	40d5      	lsrs	r5, r2
 80027c6:	032d      	lsls	r5, r5, #12
 80027c8:	0b2d      	lsrs	r5, r5, #12
 80027ca:	e003      	b.n	80027d4 <__aeabi_i2d+0x3c>
 80027cc:	2400      	movs	r4, #0
 80027ce:	2300      	movs	r3, #0
 80027d0:	2500      	movs	r5, #0
 80027d2:	2600      	movs	r6, #0
 80027d4:	051b      	lsls	r3, r3, #20
 80027d6:	432b      	orrs	r3, r5
 80027d8:	07e4      	lsls	r4, r4, #31
 80027da:	4323      	orrs	r3, r4
 80027dc:	0030      	movs	r0, r6
 80027de:	0019      	movs	r1, r3
 80027e0:	bd70      	pop	{r4, r5, r6, pc}
 80027e2:	380b      	subs	r0, #11
 80027e4:	4085      	lsls	r5, r0
 80027e6:	032d      	lsls	r5, r5, #12
 80027e8:	2600      	movs	r6, #0
 80027ea:	0b2d      	lsrs	r5, r5, #12
 80027ec:	e7f2      	b.n	80027d4 <__aeabi_i2d+0x3c>
 80027ee:	46c0      	nop			@ (mov r8, r8)
 80027f0:	0000041e 	.word	0x0000041e

080027f4 <__aeabi_ui2d>:
 80027f4:	b510      	push	{r4, lr}
 80027f6:	1e04      	subs	r4, r0, #0
 80027f8:	d010      	beq.n	800281c <__aeabi_ui2d+0x28>
 80027fa:	f000 f867 	bl	80028cc <__clzsi2>
 80027fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002838 <__aeabi_ui2d+0x44>)
 8002800:	1a1b      	subs	r3, r3, r0
 8002802:	055b      	lsls	r3, r3, #21
 8002804:	0d5b      	lsrs	r3, r3, #21
 8002806:	280a      	cmp	r0, #10
 8002808:	dc0f      	bgt.n	800282a <__aeabi_ui2d+0x36>
 800280a:	220b      	movs	r2, #11
 800280c:	0021      	movs	r1, r4
 800280e:	1a12      	subs	r2, r2, r0
 8002810:	40d1      	lsrs	r1, r2
 8002812:	3015      	adds	r0, #21
 8002814:	030a      	lsls	r2, r1, #12
 8002816:	4084      	lsls	r4, r0
 8002818:	0b12      	lsrs	r2, r2, #12
 800281a:	e001      	b.n	8002820 <__aeabi_ui2d+0x2c>
 800281c:	2300      	movs	r3, #0
 800281e:	2200      	movs	r2, #0
 8002820:	051b      	lsls	r3, r3, #20
 8002822:	4313      	orrs	r3, r2
 8002824:	0020      	movs	r0, r4
 8002826:	0019      	movs	r1, r3
 8002828:	bd10      	pop	{r4, pc}
 800282a:	0022      	movs	r2, r4
 800282c:	380b      	subs	r0, #11
 800282e:	4082      	lsls	r2, r0
 8002830:	0312      	lsls	r2, r2, #12
 8002832:	2400      	movs	r4, #0
 8002834:	0b12      	lsrs	r2, r2, #12
 8002836:	e7f3      	b.n	8002820 <__aeabi_ui2d+0x2c>
 8002838:	0000041e 	.word	0x0000041e

0800283c <__aeabi_f2d>:
 800283c:	b570      	push	{r4, r5, r6, lr}
 800283e:	0242      	lsls	r2, r0, #9
 8002840:	0043      	lsls	r3, r0, #1
 8002842:	0fc4      	lsrs	r4, r0, #31
 8002844:	20fe      	movs	r0, #254	@ 0xfe
 8002846:	0e1b      	lsrs	r3, r3, #24
 8002848:	1c59      	adds	r1, r3, #1
 800284a:	0a55      	lsrs	r5, r2, #9
 800284c:	4208      	tst	r0, r1
 800284e:	d00c      	beq.n	800286a <__aeabi_f2d+0x2e>
 8002850:	21e0      	movs	r1, #224	@ 0xe0
 8002852:	0089      	lsls	r1, r1, #2
 8002854:	468c      	mov	ip, r1
 8002856:	076d      	lsls	r5, r5, #29
 8002858:	0b12      	lsrs	r2, r2, #12
 800285a:	4463      	add	r3, ip
 800285c:	051b      	lsls	r3, r3, #20
 800285e:	4313      	orrs	r3, r2
 8002860:	07e4      	lsls	r4, r4, #31
 8002862:	4323      	orrs	r3, r4
 8002864:	0028      	movs	r0, r5
 8002866:	0019      	movs	r1, r3
 8002868:	bd70      	pop	{r4, r5, r6, pc}
 800286a:	2b00      	cmp	r3, #0
 800286c:	d114      	bne.n	8002898 <__aeabi_f2d+0x5c>
 800286e:	2d00      	cmp	r5, #0
 8002870:	d01b      	beq.n	80028aa <__aeabi_f2d+0x6e>
 8002872:	0028      	movs	r0, r5
 8002874:	f000 f82a 	bl	80028cc <__clzsi2>
 8002878:	280a      	cmp	r0, #10
 800287a:	dc1c      	bgt.n	80028b6 <__aeabi_f2d+0x7a>
 800287c:	230b      	movs	r3, #11
 800287e:	002a      	movs	r2, r5
 8002880:	1a1b      	subs	r3, r3, r0
 8002882:	40da      	lsrs	r2, r3
 8002884:	0003      	movs	r3, r0
 8002886:	3315      	adds	r3, #21
 8002888:	409d      	lsls	r5, r3
 800288a:	4b0e      	ldr	r3, [pc, #56]	@ (80028c4 <__aeabi_f2d+0x88>)
 800288c:	0312      	lsls	r2, r2, #12
 800288e:	1a1b      	subs	r3, r3, r0
 8002890:	055b      	lsls	r3, r3, #21
 8002892:	0b12      	lsrs	r2, r2, #12
 8002894:	0d5b      	lsrs	r3, r3, #21
 8002896:	e7e1      	b.n	800285c <__aeabi_f2d+0x20>
 8002898:	2d00      	cmp	r5, #0
 800289a:	d009      	beq.n	80028b0 <__aeabi_f2d+0x74>
 800289c:	0b13      	lsrs	r3, r2, #12
 800289e:	2280      	movs	r2, #128	@ 0x80
 80028a0:	0312      	lsls	r2, r2, #12
 80028a2:	431a      	orrs	r2, r3
 80028a4:	076d      	lsls	r5, r5, #29
 80028a6:	4b08      	ldr	r3, [pc, #32]	@ (80028c8 <__aeabi_f2d+0x8c>)
 80028a8:	e7d8      	b.n	800285c <__aeabi_f2d+0x20>
 80028aa:	2300      	movs	r3, #0
 80028ac:	2200      	movs	r2, #0
 80028ae:	e7d5      	b.n	800285c <__aeabi_f2d+0x20>
 80028b0:	2200      	movs	r2, #0
 80028b2:	4b05      	ldr	r3, [pc, #20]	@ (80028c8 <__aeabi_f2d+0x8c>)
 80028b4:	e7d2      	b.n	800285c <__aeabi_f2d+0x20>
 80028b6:	0003      	movs	r3, r0
 80028b8:	002a      	movs	r2, r5
 80028ba:	3b0b      	subs	r3, #11
 80028bc:	409a      	lsls	r2, r3
 80028be:	2500      	movs	r5, #0
 80028c0:	e7e3      	b.n	800288a <__aeabi_f2d+0x4e>
 80028c2:	46c0      	nop			@ (mov r8, r8)
 80028c4:	00000389 	.word	0x00000389
 80028c8:	000007ff 	.word	0x000007ff

080028cc <__clzsi2>:
 80028cc:	211c      	movs	r1, #28
 80028ce:	2301      	movs	r3, #1
 80028d0:	041b      	lsls	r3, r3, #16
 80028d2:	4298      	cmp	r0, r3
 80028d4:	d301      	bcc.n	80028da <__clzsi2+0xe>
 80028d6:	0c00      	lsrs	r0, r0, #16
 80028d8:	3910      	subs	r1, #16
 80028da:	0a1b      	lsrs	r3, r3, #8
 80028dc:	4298      	cmp	r0, r3
 80028de:	d301      	bcc.n	80028e4 <__clzsi2+0x18>
 80028e0:	0a00      	lsrs	r0, r0, #8
 80028e2:	3908      	subs	r1, #8
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	4298      	cmp	r0, r3
 80028e8:	d301      	bcc.n	80028ee <__clzsi2+0x22>
 80028ea:	0900      	lsrs	r0, r0, #4
 80028ec:	3904      	subs	r1, #4
 80028ee:	a202      	add	r2, pc, #8	@ (adr r2, 80028f8 <__clzsi2+0x2c>)
 80028f0:	5c10      	ldrb	r0, [r2, r0]
 80028f2:	1840      	adds	r0, r0, r1
 80028f4:	4770      	bx	lr
 80028f6:	46c0      	nop			@ (mov r8, r8)
 80028f8:	02020304 	.word	0x02020304
 80028fc:	01010101 	.word	0x01010101
	...

08002908 <display_info>:
uint8_t total_screens;

uint32_t last_disp_tag_tick = 0;
  
void display_info()
{
 8002908:	b590      	push	{r4, r7, lr}
 800290a:	b093      	sub	sp, #76	@ 0x4c
 800290c:	af02      	add	r7, sp, #8
    UG_FillFrame(146, 20, 210, 56, C_RED);
 800290e:	23f8      	movs	r3, #248	@ 0xf8
 8002910:	021b      	lsls	r3, r3, #8
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	2338      	movs	r3, #56	@ 0x38
 8002916:	22d2      	movs	r2, #210	@ 0xd2
 8002918:	2114      	movs	r1, #20
 800291a:	2092      	movs	r0, #146	@ 0x92
 800291c:	f00c fdfe 	bl	800f51c <UG_FillFrame>
    uint16_t raw_volt_adc;
    char volt_msg[10];
    float battery_percentage;

    HAL_ADC_Start(&hadc);
 8002920:	4b4c      	ldr	r3, [pc, #304]	@ (8002a54 <display_info+0x14c>)
 8002922:	0018      	movs	r0, r3
 8002924:	f001 feda 	bl	80046dc <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8002928:	2301      	movs	r3, #1
 800292a:	425a      	negs	r2, r3
 800292c:	4b49      	ldr	r3, [pc, #292]	@ (8002a54 <display_info+0x14c>)
 800292e:	0011      	movs	r1, r2
 8002930:	0018      	movs	r0, r3
 8002932:	f001 ff27 	bl	8004784 <HAL_ADC_PollForConversion>
    raw_volt_adc = HAL_ADC_GetValue(&hadc);
 8002936:	4b47      	ldr	r3, [pc, #284]	@ (8002a54 <display_info+0x14c>)
 8002938:	0018      	movs	r0, r3
 800293a:	f001 ffbb 	bl	80048b4 <HAL_ADC_GetValue>
 800293e:	0002      	movs	r2, r0
 8002940:	213c      	movs	r1, #60	@ 0x3c
 8002942:	187b      	adds	r3, r7, r1
 8002944:	801a      	strh	r2, [r3, #0]

    // Convert ADC value to battery percentage (example calculation)
    battery_percentage = ((float)raw_volt_adc / 2730.0f) * 100.0f;
 8002946:	187b      	adds	r3, r7, r1
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	0018      	movs	r0, r3
 800294c:	f7fe f878 	bl	8000a40 <__aeabi_ui2f>
 8002950:	1c03      	adds	r3, r0, #0
 8002952:	4941      	ldr	r1, [pc, #260]	@ (8002a58 <display_info+0x150>)
 8002954:	1c18      	adds	r0, r3, #0
 8002956:	f7fd fe15 	bl	8000584 <__aeabi_fdiv>
 800295a:	1c03      	adds	r3, r0, #0
 800295c:	493f      	ldr	r1, [pc, #252]	@ (8002a5c <display_info+0x154>)
 800295e:	1c18      	adds	r0, r3, #0
 8002960:	f7fd ff30 	bl	80007c4 <__aeabi_fmul>
 8002964:	1c03      	adds	r3, r0, #0
 8002966:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Format the battery percentage into a string
    sprintf(volt_msg, "BATT: %.0f%%", battery_percentage);
 8002968:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800296a:	f7ff ff67 	bl	800283c <__aeabi_f2d>
 800296e:	0002      	movs	r2, r0
 8002970:	000b      	movs	r3, r1
 8002972:	493b      	ldr	r1, [pc, #236]	@ (8002a60 <display_info+0x158>)
 8002974:	242c      	movs	r4, #44	@ 0x2c
 8002976:	1938      	adds	r0, r7, r4
 8002978:	f011 fb38 	bl	8013fec <siprintf>

    // Display the battery percentage on the LCD
    LCD_PutStr(50, 20, volt_msg, FONT_16X26, C_WHITE, C_BLACK);
 800297c:	4b39      	ldr	r3, [pc, #228]	@ (8002a64 <display_info+0x15c>)
 800297e:	193a      	adds	r2, r7, r4
 8002980:	2100      	movs	r1, #0
 8002982:	9101      	str	r1, [sp, #4]
 8002984:	4938      	ldr	r1, [pc, #224]	@ (8002a68 <display_info+0x160>)
 8002986:	9100      	str	r1, [sp, #0]
 8002988:	2114      	movs	r1, #20
 800298a:	2032      	movs	r0, #50	@ 0x32
 800298c:	f00c fc11 	bl	800f1b2 <LCD_PutStr>

    // Print the anchor ID (1-indexed)
    char anchor_id_msg[20];
    sprintf(anchor_id_msg, "ANCHOR ID: %d", ANCHOR_IDX + 1);
 8002990:	4936      	ldr	r1, [pc, #216]	@ (8002a6c <display_info+0x164>)
 8002992:	2418      	movs	r4, #24
 8002994:	193b      	adds	r3, r7, r4
 8002996:	2201      	movs	r2, #1
 8002998:	0018      	movs	r0, r3
 800299a:	f011 fb27 	bl	8013fec <siprintf>
    LCD_PutStr(50, 70, anchor_id_msg, FONT_16X26, C_WHITE, C_BLACK);
 800299e:	4b31      	ldr	r3, [pc, #196]	@ (8002a64 <display_info+0x15c>)
 80029a0:	193a      	adds	r2, r7, r4
 80029a2:	2100      	movs	r1, #0
 80029a4:	9101      	str	r1, [sp, #4]
 80029a6:	4930      	ldr	r1, [pc, #192]	@ (8002a68 <display_info+0x160>)
 80029a8:	9100      	str	r1, [sp, #0]
 80029aa:	2146      	movs	r1, #70	@ 0x46
 80029ac:	2032      	movs	r0, #50	@ 0x32
 80029ae:	f00c fc00 	bl	800f1b2 <LCD_PutStr>

    // Count the number of active tags
    uint8_t active_tags = 0;
 80029b2:	233f      	movs	r3, #63	@ 0x3f
 80029b4:	18fb      	adds	r3, r7, r3
 80029b6:	2200      	movs	r2, #0
 80029b8:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < total_tags; i++) {
 80029ba:	233e      	movs	r3, #62	@ 0x3e
 80029bc:	18fb      	adds	r3, r7, r3
 80029be:	2200      	movs	r2, #0
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	e01f      	b.n	8002a04 <display_info+0xfc>
        if (tags_last_heard[i] != 0 && HAL_GetTick() - tags_last_heard[i] <= TAG_ACTIVITY_TIMEOUT) {
 80029c4:	243e      	movs	r4, #62	@ 0x3e
 80029c6:	193b      	adds	r3, r7, r4
 80029c8:	781a      	ldrb	r2, [r3, #0]
 80029ca:	4b29      	ldr	r3, [pc, #164]	@ (8002a70 <display_info+0x168>)
 80029cc:	0092      	lsls	r2, r2, #2
 80029ce:	58d3      	ldr	r3, [r2, r3]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d011      	beq.n	80029f8 <display_info+0xf0>
 80029d4:	f001 fd14 	bl	8004400 <HAL_GetTick>
 80029d8:	0001      	movs	r1, r0
 80029da:	193b      	adds	r3, r7, r4
 80029dc:	781a      	ldrb	r2, [r3, #0]
 80029de:	4b24      	ldr	r3, [pc, #144]	@ (8002a70 <display_info+0x168>)
 80029e0:	0092      	lsls	r2, r2, #2
 80029e2:	58d3      	ldr	r3, [r2, r3]
 80029e4:	1acb      	subs	r3, r1, r3
 80029e6:	4a23      	ldr	r2, [pc, #140]	@ (8002a74 <display_info+0x16c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d805      	bhi.n	80029f8 <display_info+0xf0>
            active_tags++;
 80029ec:	213f      	movs	r1, #63	@ 0x3f
 80029ee:	187b      	adds	r3, r7, r1
 80029f0:	781a      	ldrb	r2, [r3, #0]
 80029f2:	187b      	adds	r3, r7, r1
 80029f4:	3201      	adds	r2, #1
 80029f6:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < total_tags; i++) {
 80029f8:	213e      	movs	r1, #62	@ 0x3e
 80029fa:	187b      	adds	r3, r7, r1
 80029fc:	781a      	ldrb	r2, [r3, #0]
 80029fe:	187b      	adds	r3, r7, r1
 8002a00:	3201      	adds	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]
 8002a04:	4b1c      	ldr	r3, [pc, #112]	@ (8002a78 <display_info+0x170>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	223e      	movs	r2, #62	@ 0x3e
 8002a0a:	18ba      	adds	r2, r7, r2
 8002a0c:	7812      	ldrb	r2, [r2, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d3d8      	bcc.n	80029c4 <display_info+0xbc>
        }
    }

    UG_FillFrame(256, 120, 288, 146, C_RED);
 8002a12:	2390      	movs	r3, #144	@ 0x90
 8002a14:	005a      	lsls	r2, r3, #1
 8002a16:	2380      	movs	r3, #128	@ 0x80
 8002a18:	0058      	lsls	r0, r3, #1
 8002a1a:	23f8      	movs	r3, #248	@ 0xf8
 8002a1c:	021b      	lsls	r3, r3, #8
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	2392      	movs	r3, #146	@ 0x92
 8002a22:	2178      	movs	r1, #120	@ 0x78
 8002a24:	f00c fd7a 	bl	800f51c <UG_FillFrame>

    // Print the number of active tags
    char active_tags_msg[20];
    sprintf(active_tags_msg, "ACTIVE TAGS: %d", active_tags);
 8002a28:	233f      	movs	r3, #63	@ 0x3f
 8002a2a:	18fb      	adds	r3, r7, r3
 8002a2c:	781a      	ldrb	r2, [r3, #0]
 8002a2e:	4913      	ldr	r1, [pc, #76]	@ (8002a7c <display_info+0x174>)
 8002a30:	1d3b      	adds	r3, r7, #4
 8002a32:	0018      	movs	r0, r3
 8002a34:	f011 fada 	bl	8013fec <siprintf>
    LCD_PutStr(50, 120, active_tags_msg, FONT_16X26, C_WHITE, C_BLACK);
 8002a38:	4b0a      	ldr	r3, [pc, #40]	@ (8002a64 <display_info+0x15c>)
 8002a3a:	1d3a      	adds	r2, r7, #4
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	9101      	str	r1, [sp, #4]
 8002a40:	4909      	ldr	r1, [pc, #36]	@ (8002a68 <display_info+0x160>)
 8002a42:	9100      	str	r1, [sp, #0]
 8002a44:	2178      	movs	r1, #120	@ 0x78
 8002a46:	2032      	movs	r0, #50	@ 0x32
 8002a48:	f00c fbb3 	bl	800f1b2 <LCD_PutStr>

}
 8002a4c:	46c0      	nop			@ (mov r8, r8)
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b011      	add	sp, #68	@ 0x44
 8002a52:	bd90      	pop	{r4, r7, pc}
 8002a54:	20000528 	.word	0x20000528
 8002a58:	452aa000 	.word	0x452aa000
 8002a5c:	42c80000 	.word	0x42c80000
 8002a60:	080165f8 	.word	0x080165f8
 8002a64:	0801692c 	.word	0x0801692c
 8002a68:	0000ffff 	.word	0x0000ffff
 8002a6c:	08016608 	.word	0x08016608
 8002a70:	20000410 	.word	0x20000410
 8002a74:	00002710 	.word	0x00002710
 8002a78:	2000000a 	.word	0x2000000a
 8002a7c:	08016618 	.word	0x08016618

08002a80 <display_tag>:

void display_tag(uint8_t tag_id)
{
 8002a80:	b5b0      	push	{r4, r5, r7, lr}
 8002a82:	b096      	sub	sp, #88	@ 0x58
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	0002      	movs	r2, r0
 8002a88:	1dfb      	adds	r3, r7, #7
 8002a8a:	701a      	strb	r2, [r3, #0]

    if (HAL_GetTick() - last_disp_tag_tick >= 100)
 8002a8c:	f001 fcb8 	bl	8004400 <HAL_GetTick>
 8002a90:	0002      	movs	r2, r0
 8002a92:	4b46      	ldr	r3, [pc, #280]	@ (8002bac <display_tag+0x12c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b63      	cmp	r3, #99	@ 0x63
 8002a9a:	d800      	bhi.n	8002a9e <display_tag+0x1e>
 8002a9c:	e083      	b.n	8002ba6 <display_tag+0x126>
    {
        if (HAL_GetTick() - tags_last_heard[tag_id - 1] > TAG_ACTIVITY_TIMEOUT) {
 8002a9e:	f001 fcaf 	bl	8004400 <HAL_GetTick>
 8002aa2:	0001      	movs	r1, r0
 8002aa4:	1dfb      	adds	r3, r7, #7
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	1e5a      	subs	r2, r3, #1
 8002aaa:	4b41      	ldr	r3, [pc, #260]	@ (8002bb0 <display_tag+0x130>)
 8002aac:	0092      	lsls	r2, r2, #2
 8002aae:	58d3      	ldr	r3, [r2, r3]
 8002ab0:	1acb      	subs	r3, r1, r3
 8002ab2:	4a40      	ldr	r2, [pc, #256]	@ (8002bb4 <display_tag+0x134>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d920      	bls.n	8002afa <display_tag+0x7a>
            UG_FillFrame(152, 50, 300, 92, C_BLACK);
 8002ab8:	2396      	movs	r3, #150	@ 0x96
 8002aba:	005a      	lsls	r2, r3, #1
 8002abc:	2300      	movs	r3, #0
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	235c      	movs	r3, #92	@ 0x5c
 8002ac2:	2132      	movs	r1, #50	@ 0x32
 8002ac4:	2098      	movs	r0, #152	@ 0x98
 8002ac6:	f00c fd29 	bl	800f51c <UG_FillFrame>
            char inactive_msg[20];
            sprintf(inactive_msg, "TAG %d: INACTIVE", tag_id);
 8002aca:	1dfb      	adds	r3, r7, #7
 8002acc:	781a      	ldrb	r2, [r3, #0]
 8002ace:	493a      	ldr	r1, [pc, #232]	@ (8002bb8 <display_tag+0x138>)
 8002ad0:	240c      	movs	r4, #12
 8002ad2:	193b      	adds	r3, r7, r4
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f011 fa89 	bl	8013fec <siprintf>
            LCD_PutStr(50, 50, inactive_msg, FONT_16X26, C_WHITE, C_BLACK);
 8002ada:	4b38      	ldr	r3, [pc, #224]	@ (8002bbc <display_tag+0x13c>)
 8002adc:	193a      	adds	r2, r7, r4
 8002ade:	2100      	movs	r1, #0
 8002ae0:	9101      	str	r1, [sp, #4]
 8002ae2:	4937      	ldr	r1, [pc, #220]	@ (8002bc0 <display_tag+0x140>)
 8002ae4:	9100      	str	r1, [sp, #0]
 8002ae6:	2132      	movs	r1, #50	@ 0x32
 8002ae8:	2032      	movs	r0, #50	@ 0x32
 8002aea:	f00c fb62 	bl	800f1b2 <LCD_PutStr>
            last_disp_tag_tick = HAL_GetTick();
 8002aee:	f001 fc87 	bl	8004400 <HAL_GetTick>
 8002af2:	0002      	movs	r2, r0
 8002af4:	4b2d      	ldr	r3, [pc, #180]	@ (8002bac <display_tag+0x12c>)
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	e055      	b.n	8002ba6 <display_tag+0x126>
            return;
        }
        UG_FillFrame(152, 50, 300, 92, C_RED);
 8002afa:	2396      	movs	r3, #150	@ 0x96
 8002afc:	005a      	lsls	r2, r3, #1
 8002afe:	23f8      	movs	r3, #248	@ 0xf8
 8002b00:	021b      	lsls	r3, r3, #8
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	235c      	movs	r3, #92	@ 0x5c
 8002b06:	2132      	movs	r1, #50	@ 0x32
 8002b08:	2098      	movs	r0, #152	@ 0x98
 8002b0a:	f00c fd07 	bl	800f51c <UG_FillFrame>
        char tag_msg[20];
        sprintf(tag_msg, "TAG %d: %.3f m", tag_id, tag_distances[tag_id - 1]);
 8002b0e:	1dfb      	adds	r3, r7, #7
 8002b10:	781c      	ldrb	r4, [r3, #0]
 8002b12:	1dfb      	adds	r3, r7, #7
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	4a2a      	ldr	r2, [pc, #168]	@ (8002bc4 <display_tag+0x144>)
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	18d3      	adds	r3, r2, r3
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	4929      	ldr	r1, [pc, #164]	@ (8002bc8 <display_tag+0x148>)
 8002b24:	2534      	movs	r5, #52	@ 0x34
 8002b26:	1978      	adds	r0, r7, r5
 8002b28:	9200      	str	r2, [sp, #0]
 8002b2a:	9301      	str	r3, [sp, #4]
 8002b2c:	0022      	movs	r2, r4
 8002b2e:	f011 fa5d 	bl	8013fec <siprintf>
        LCD_PutStr(50, 50, tag_msg, FONT_16X26, C_WHITE, C_BLACK);
 8002b32:	4b22      	ldr	r3, [pc, #136]	@ (8002bbc <display_tag+0x13c>)
 8002b34:	197a      	adds	r2, r7, r5
 8002b36:	2100      	movs	r1, #0
 8002b38:	9101      	str	r1, [sp, #4]
 8002b3a:	4921      	ldr	r1, [pc, #132]	@ (8002bc0 <display_tag+0x140>)
 8002b3c:	9100      	str	r1, [sp, #0]
 8002b3e:	2132      	movs	r1, #50	@ 0x32
 8002b40:	2032      	movs	r0, #50	@ 0x32
 8002b42:	f00c fb36 	bl	800f1b2 <LCD_PutStr>

        // Calculate the standard deviation (square root of variance)
        double tag_stdev = sqrt(tags_variance[tag_id - 1]);
 8002b46:	1dfb      	adds	r3, r7, #7
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8002bcc <display_tag+0x14c>)
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	18d3      	adds	r3, r2, r3
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	0010      	movs	r0, r2
 8002b58:	0019      	movs	r1, r3
 8002b5a:	f013 fc33 	bl	80163c4 <sqrt>
 8002b5e:	0002      	movs	r2, r0
 8002b60:	000b      	movs	r3, r1
 8002b62:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002b64:	64fb      	str	r3, [r7, #76]	@ 0x4c

        // Print the standard deviation of the tag
        UG_FillFrame(152, 100, 300, 142, C_RED);
 8002b66:	2396      	movs	r3, #150	@ 0x96
 8002b68:	005a      	lsls	r2, r3, #1
 8002b6a:	23f8      	movs	r3, #248	@ 0xf8
 8002b6c:	021b      	lsls	r3, r3, #8
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	238e      	movs	r3, #142	@ 0x8e
 8002b72:	2164      	movs	r1, #100	@ 0x64
 8002b74:	2098      	movs	r0, #152	@ 0x98
 8002b76:	f00c fcd1 	bl	800f51c <UG_FillFrame>
        char stdev_msg[20];
        sprintf(stdev_msg, "STDEV: %.3f m", tag_stdev);
 8002b7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b7e:	4914      	ldr	r1, [pc, #80]	@ (8002bd0 <display_tag+0x150>)
 8002b80:	2420      	movs	r4, #32
 8002b82:	1938      	adds	r0, r7, r4
 8002b84:	f011 fa32 	bl	8013fec <siprintf>
        LCD_PutStr(50, 100, stdev_msg, FONT_16X26, C_WHITE, C_BLACK);
 8002b88:	4b0c      	ldr	r3, [pc, #48]	@ (8002bbc <display_tag+0x13c>)
 8002b8a:	193a      	adds	r2, r7, r4
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	9101      	str	r1, [sp, #4]
 8002b90:	490b      	ldr	r1, [pc, #44]	@ (8002bc0 <display_tag+0x140>)
 8002b92:	9100      	str	r1, [sp, #0]
 8002b94:	2164      	movs	r1, #100	@ 0x64
 8002b96:	2032      	movs	r0, #50	@ 0x32
 8002b98:	f00c fb0b 	bl	800f1b2 <LCD_PutStr>

        last_disp_tag_tick = HAL_GetTick();
 8002b9c:	f001 fc30 	bl	8004400 <HAL_GetTick>
 8002ba0:	0002      	movs	r2, r0
 8002ba2:	4b02      	ldr	r3, [pc, #8]	@ (8002bac <display_tag+0x12c>)
 8002ba4:	601a      	str	r2, [r3, #0]
    }

}
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b014      	add	sp, #80	@ 0x50
 8002baa:	bdb0      	pop	{r4, r5, r7, pc}
 8002bac:	2000045c 	.word	0x2000045c
 8002bb0:	20000410 	.word	0x20000410
 8002bb4:	00002710 	.word	0x00002710
 8002bb8:	08016628 	.word	0x08016628
 8002bbc:	0801692c 	.word	0x0801692c
 8002bc0:	0000ffff 	.word	0x0000ffff
 8002bc4:	200003f8 	.word	0x200003f8
 8002bc8:	0801663c 	.word	0x0801663c
 8002bcc:	20000438 	.word	0x20000438
 8002bd0:	0801664c 	.word	0x0801664c

08002bd4 <display_clear>:

void display_clear()
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
    UG_FillScreen(C_BLACK);
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f00c fc79 	bl	800f4d0 <UG_FillScreen>
}
 8002bde:	46c0      	nop			@ (mov r8, r8)
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <handle_screens>:

void handle_screens()
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
    if(current_screen == 0)
 8002be8:	4b06      	ldr	r3, [pc, #24]	@ (8002c04 <handle_screens+0x20>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d102      	bne.n	8002bf6 <handle_screens+0x12>
    {
        display_info();
 8002bf0:	f7ff fe8a 	bl	8002908 <display_info>
        return;
 8002bf4:	e004      	b.n	8002c00 <handle_screens+0x1c>
    }
    display_tag(current_screen);
 8002bf6:	4b03      	ldr	r3, [pc, #12]	@ (8002c04 <handle_screens+0x20>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f7ff ff40 	bl	8002a80 <display_tag>
}
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000457 	.word	0x20000457

08002c08 <lcd_off>:

void lcd_off()
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SCREEN_EN_GPIO_Port, SCREEN_EN_Pin, GPIO_PIN_RESET);
 8002c0c:	4b07      	ldr	r3, [pc, #28]	@ (8002c2c <lcd_off+0x24>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	2104      	movs	r1, #4
 8002c12:	0018      	movs	r0, r3
 8002c14:	f002 fcb3 	bl	800557e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SCREEN_EN_AUX_GPIO_Port, SCREEN_EN_AUX_Pin, GPIO_PIN_RESET);
 8002c18:	4b04      	ldr	r3, [pc, #16]	@ (8002c2c <lcd_off+0x24>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2102      	movs	r1, #2
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f002 fcad 	bl	800557e <HAL_GPIO_WritePin>
}
 8002c24:	46c0      	nop			@ (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	46c0      	nop			@ (mov r8, r8)
 8002c2c:	48000400 	.word	0x48000400

08002c30 <lcd_on>:

void lcd_on()
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SCREEN_EN_GPIO_Port, SCREEN_EN_Pin, GPIO_PIN_SET);
 8002c34:	4b08      	ldr	r3, [pc, #32]	@ (8002c58 <lcd_on+0x28>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	2104      	movs	r1, #4
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f002 fc9f 	bl	800557e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SCREEN_EN_AUX_GPIO_Port, SCREEN_EN_AUX_Pin, GPIO_PIN_SET);
 8002c40:	4b05      	ldr	r3, [pc, #20]	@ (8002c58 <lcd_on+0x28>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	2102      	movs	r1, #2
 8002c46:	0018      	movs	r0, r3
 8002c48:	f002 fc99 	bl	800557e <HAL_GPIO_WritePin>
    
    LCD_init();
 8002c4c:	f00c fb08 	bl	800f260 <LCD_init>
}
 8002c50:	46c0      	nop			@ (mov r8, r8)
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	46c0      	nop			@ (mov r8, r8)
 8002c58:	48000400 	.word	0x48000400

08002c5c <handle_btn>:

// Returns true when lcd should be on 
bool handle_btn()
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
    if(HAL_GPIO_ReadPin(BTN_DISP_GPIO_Port, BTN_DISP_Pin))
 8002c60:	2380      	movs	r3, #128	@ 0x80
 8002c62:	019b      	lsls	r3, r3, #6
 8002c64:	4a2d      	ldr	r2, [pc, #180]	@ (8002d1c <handle_btn+0xc0>)
 8002c66:	0019      	movs	r1, r3
 8002c68:	0010      	movs	r0, r2
 8002c6a:	f002 fc6b 	bl	8005544 <HAL_GPIO_ReadPin>
 8002c6e:	1e03      	subs	r3, r0, #0
 8002c70:	d022      	beq.n	8002cb8 <handle_btn+0x5c>
    {
        btn_press_tick = HAL_GetTick();
 8002c72:	f001 fbc5 	bl	8004400 <HAL_GetTick>
 8002c76:	0002      	movs	r2, r0
 8002c78:	4b29      	ldr	r3, [pc, #164]	@ (8002d20 <handle_btn+0xc4>)
 8002c7a:	601a      	str	r2, [r3, #0]

        // Rising edge btn
        if(!last_btn && disp_on)
 8002c7c:	4b29      	ldr	r3, [pc, #164]	@ (8002d24 <handle_btn+0xc8>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2201      	movs	r2, #1
 8002c82:	4053      	eors	r3, r2
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d012      	beq.n	8002cb0 <handle_btn+0x54>
 8002c8a:	4b27      	ldr	r3, [pc, #156]	@ (8002d28 <handle_btn+0xcc>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00e      	beq.n	8002cb0 <handle_btn+0x54>
        {
            current_screen = (current_screen + 1) % total_screens;
 8002c92:	4b26      	ldr	r3, [pc, #152]	@ (8002d2c <handle_btn+0xd0>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	4b25      	ldr	r3, [pc, #148]	@ (8002d30 <handle_btn+0xd4>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	0019      	movs	r1, r3
 8002c9e:	0010      	movs	r0, r2
 8002ca0:	f7fd fbbe 	bl	8000420 <__aeabi_idivmod>
 8002ca4:	000b      	movs	r3, r1
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	4b20      	ldr	r3, [pc, #128]	@ (8002d2c <handle_btn+0xd0>)
 8002caa:	701a      	strb	r2, [r3, #0]
            display_clear();
 8002cac:	f7ff ff92 	bl	8002bd4 <display_clear>
        }

        last_btn = true;
 8002cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8002d24 <handle_btn+0xc8>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	701a      	strb	r2, [r3, #0]
 8002cb6:	e002      	b.n	8002cbe <handle_btn+0x62>
    }
    else
    {
        last_btn = false;
 8002cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d24 <handle_btn+0xc8>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
    }

    disp_on = HAL_GetTick() - btn_press_tick < SCREEN_SLEEP_TIMEOUT;
 8002cbe:	f001 fb9f 	bl	8004400 <HAL_GetTick>
 8002cc2:	0002      	movs	r2, r0
 8002cc4:	4b16      	ldr	r3, [pc, #88]	@ (8002d20 <handle_btn+0xc4>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	1ad2      	subs	r2, r2, r3
 8002cca:	491a      	ldr	r1, [pc, #104]	@ (8002d34 <handle_btn+0xd8>)
 8002ccc:	2300      	movs	r3, #0
 8002cce:	4291      	cmp	r1, r2
 8002cd0:	415b      	adcs	r3, r3
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	4b14      	ldr	r3, [pc, #80]	@ (8002d28 <handle_btn+0xcc>)
 8002cd6:	701a      	strb	r2, [r3, #0]

    if(disp_on)
 8002cd8:	4b13      	ldr	r3, [pc, #76]	@ (8002d28 <handle_btn+0xcc>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00f      	beq.n	8002d00 <handle_btn+0xa4>
    {
        // Rising edge lcd
        if(!last_lcd_on)
 8002ce0:	4b15      	ldr	r3, [pc, #84]	@ (8002d38 <handle_btn+0xdc>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	4053      	eors	r3, r2
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <handle_btn+0x9a>
        {
            lcd_on();
 8002cee:	f7ff ff9f 	bl	8002c30 <lcd_on>
            display_clear();
 8002cf2:	f7ff ff6f 	bl	8002bd4 <display_clear>
        }

        last_lcd_on = true;
 8002cf6:	4b10      	ldr	r3, [pc, #64]	@ (8002d38 <handle_btn+0xdc>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	701a      	strb	r2, [r3, #0]
        return true;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e009      	b.n	8002d14 <handle_btn+0xb8>
    }

    // Falling edge
    if(last_lcd_on)
 8002d00:	4b0d      	ldr	r3, [pc, #52]	@ (8002d38 <handle_btn+0xdc>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <handle_btn+0xb0>
    {
        lcd_off();
 8002d08:	f7ff ff7e 	bl	8002c08 <lcd_off>
    }

    last_lcd_on = false;
 8002d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d38 <handle_btn+0xdc>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	701a      	strb	r2, [r3, #0]
    return false;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	0018      	movs	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	46c0      	nop			@ (mov r8, r8)
 8002d1c:	48000400 	.word	0x48000400
 8002d20:	20000450 	.word	0x20000450
 8002d24:	20000455 	.word	0x20000455
 8002d28:	20000456 	.word	0x20000456
 8002d2c:	20000457 	.word	0x20000457
 8002d30:	20000458 	.word	0x20000458
 8002d34:	0000270f 	.word	0x0000270f
 8002d38:	20000454 	.word	0x20000454

08002d3c <anchor_main>:
 * @param  none

 * @return none
 */
int anchor_main(void (*send_at_msg_ptr)(char *))
{
 8002d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d3e:	b09f      	sub	sp, #124	@ 0x7c
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	6178      	str	r0, [r7, #20]
    total_screens = total_tags + 1;
 8002d44:	4b7c      	ldr	r3, [pc, #496]	@ (8002f38 <anchor_main+0x1fc>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	4b7b      	ldr	r3, [pc, #492]	@ (8002f3c <anchor_main+0x200>)
 8002d4e:	701a      	strb	r2, [r3, #0]

    memcpy((rx_poll_msg) + RX_POLL_MSG_ANCHOR_ID_IDX, anchor_id, 2);
 8002d50:	487b      	ldr	r0, [pc, #492]	@ (8002f40 <anchor_main+0x204>)
 8002d52:	4b7c      	ldr	r3, [pc, #496]	@ (8002f44 <anchor_main+0x208>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2202      	movs	r2, #2
 8002d58:	0019      	movs	r1, r3
 8002d5a:	f011 fa53 	bl	8014204 <memcpy>
    memcpy((tx_resp_msg) + TX_RESP_MSG_ANCHOR_ID_IDX, anchor_id, 2);
 8002d5e:	487a      	ldr	r0, [pc, #488]	@ (8002f48 <anchor_main+0x20c>)
 8002d60:	4b78      	ldr	r3, [pc, #480]	@ (8002f44 <anchor_main+0x208>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2202      	movs	r2, #2
 8002d66:	0019      	movs	r1, r3
 8002d68:	f011 fa4c 	bl	8014204 <memcpy>
    memcpy((rx_final_msg) + RX_FINAL_MSG_ANCHOR_ID_IDX, anchor_id, 2);
 8002d6c:	4877      	ldr	r0, [pc, #476]	@ (8002f4c <anchor_main+0x210>)
 8002d6e:	4b75      	ldr	r3, [pc, #468]	@ (8002f44 <anchor_main+0x208>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2202      	movs	r2, #2
 8002d74:	0019      	movs	r1, r3
 8002d76:	f011 fa45 	bl	8014204 <memcpy>
    // lcd_display_str(APP_NAME);

    /* Reset and initialise DW1000.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8002d7a:	f010 fb41 	bl	8013400 <reset_DW1000>
    port_set_dw1000_slowrate();
 8002d7e:	f010 fbab 	bl	80134d8 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR)
 8002d82:	2001      	movs	r0, #1
 8002d84:	f00f f9c4 	bl	8012110 <dwt_initialise>
 8002d88:	0003      	movs	r3, r0
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <anchor_main+0x56>
    {
        // lcd_display_str("INIT FAILED");
        while (1)
 8002d8e:	46c0      	nop			@ (mov r8, r8)
 8002d90:	e7fd      	b.n	8002d8e <anchor_main+0x52>
        {
        };
    }
    port_set_dw1000_fastrate();
 8002d92:	f010 fbaf 	bl	80134f4 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 7 below. */
    dwt_configure(&config);
 8002d96:	4b6e      	ldr	r3, [pc, #440]	@ (8002f50 <anchor_main+0x214>)
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f00f fb2d 	bl	80123f8 <dwt_configure>

    /* Apply TX config */
    dwt_configuretxrf(&tx_config);
 8002d9e:	4b6d      	ldr	r3, [pc, #436]	@ (8002f54 <anchor_main+0x218>)
 8002da0:	0018      	movs	r0, r3
 8002da2:	f00f fb13 	bl	80123cc <dwt_configuretxrf>

    dwt_setdblrxbuffmode(0);
 8002da6:	2000      	movs	r0, #0
 8002da8:	f00f ff54 	bl	8012c54 <dwt_setdblrxbuffmode>

    /* Apply default antenna delay value. See NOTE 1 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 8002dac:	4b6a      	ldr	r3, [pc, #424]	@ (8002f58 <anchor_main+0x21c>)
 8002dae:	0018      	movs	r0, r3
 8002db0:	f00f fcc6 	bl	8012740 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 8002db4:	4b68      	ldr	r3, [pc, #416]	@ (8002f58 <anchor_main+0x21c>)
 8002db6:	0018      	movs	r0, r3
 8002db8:	f00f fcd6 	bl	8012768 <dwt_settxantennadelay>

    /* Set preamble timeout for expected frames. See NOTE 6 below. */
    // dwt_setpreambledetecttimeout(PRE_TIMEOUT);

    HAL_Delay(2000);
 8002dbc:	23fa      	movs	r3, #250	@ 0xfa
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f001 fb27 	bl	8004414 <HAL_Delay>
    (*send_at_msg_ptr)("AT+MODE=TEST\r\n");
 8002dc6:	4a65      	ldr	r2, [pc, #404]	@ (8002f5c <anchor_main+0x220>)
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	0010      	movs	r0, r2
 8002dcc:	4798      	blx	r3
    HAL_Delay(100);
 8002dce:	2064      	movs	r0, #100	@ 0x64
 8002dd0:	f001 fb20 	bl	8004414 <HAL_Delay>
    (*send_at_msg_ptr)("AT+TEST=RFCFG,915,SF8,500,12,15,14,ON,OFF,OFF\r\n");
 8002dd4:	4a62      	ldr	r2, [pc, #392]	@ (8002f60 <anchor_main+0x224>)
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	0010      	movs	r0, r2
 8002dda:	4798      	blx	r3
    /* Loop forever responding to ranging requests. */
    while (1)
    {

        /* Clear reception timeout to start next ranging process. */
        dwt_setrxtimeout(0);
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f010 f93d 	bl	801305c <dwt_setrxtimeout>

        /* Activate reception immediately. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8002de2:	2000      	movs	r0, #0
 8002de4:	f010 f8f2 	bl	8012fcc <dwt_rxenable>

        /* Poll for reception of a frame or error/timeout. See NOTE 8 below. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8002de8:	e005      	b.n	8002df6 <anchor_main+0xba>
        // while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
        {

            if(handle_btn())
 8002dea:	f7ff ff37 	bl	8002c5c <handle_btn>
 8002dee:	1e03      	subs	r3, r0, #0
 8002df0:	d001      	beq.n	8002df6 <anchor_main+0xba>
            {
                handle_screens();
 8002df2:	f7ff fef7 	bl	8002be4 <handle_screens>
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8002df6:	2100      	movs	r1, #0
 8002df8:	200f      	movs	r0, #15
 8002dfa:	f00f fe05 	bl	8012a08 <dwt_read32bitoffsetreg>
 8002dfe:	0002      	movs	r2, r0
 8002e00:	4b58      	ldr	r3, [pc, #352]	@ (8002f64 <anchor_main+0x228>)
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	4b57      	ldr	r3, [pc, #348]	@ (8002f64 <anchor_main+0x228>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a57      	ldr	r2, [pc, #348]	@ (8002f68 <anchor_main+0x22c>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d0ed      	beq.n	8002dea <anchor_main+0xae>
        };

        //  uint32 error = status_reg & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
        //         CDC_Transmit_FS((uint8 *) &error, sizeof(status_reg));

        if (status_reg & SYS_STATUS_RXFCG)
 8002e0e:	4b55      	ldr	r3, [pc, #340]	@ (8002f64 <anchor_main+0x228>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	2380      	movs	r3, #128	@ 0x80
 8002e14:	01db      	lsls	r3, r3, #7
 8002e16:	4013      	ands	r3, r2
 8002e18:	d100      	bne.n	8002e1c <anchor_main+0xe0>
 8002e1a:	e26f      	b.n	80032fc <anchor_main+0x5c0>
        {
            uint32 frame_len;

            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 8002e1c:	2380      	movs	r3, #128	@ 0x80
 8002e1e:	01db      	lsls	r3, r3, #7
 8002e20:	001a      	movs	r2, r3
 8002e22:	2100      	movs	r1, #0
 8002e24:	200f      	movs	r0, #15
 8002e26:	f00f fe80 	bl	8012b2a <dwt_write32bitoffsetreg>

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	2010      	movs	r0, #16
 8002e2e:	f00f fdeb 	bl	8012a08 <dwt_read32bitoffsetreg>
 8002e32:	0003      	movs	r3, r0
 8002e34:	059b      	lsls	r3, r3, #22
 8002e36:	0d9b      	lsrs	r3, r3, #22
 8002e38:	66bb      	str	r3, [r7, #104]	@ 0x68
            if (frame_len <= RX_BUFFER_LEN)
 8002e3a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002e3c:	2380      	movs	r3, #128	@ 0x80
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d806      	bhi.n	8002e52 <anchor_main+0x116>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 8002e44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e46:	b299      	uxth	r1, r3
 8002e48:	4b48      	ldr	r3, [pc, #288]	@ (8002f6c <anchor_main+0x230>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f00f fce9 	bl	8012824 <dwt_readrxdata>
            }

            /* Check that the frame is a poll sent by "DS TWR initiator" example.
             * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
            rx_buffer[ALL_MSG_SN_IDX] = 0;
 8002e52:	4b46      	ldr	r3, [pc, #280]	@ (8002f6c <anchor_main+0x230>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	709a      	strb	r2, [r3, #2]

            memcpy(tx_resp_msg + TX_RESP_MSG_TAG_ID_IDX, rx_buffer + RX_POLL_MSG_TAG_ID_IDX, 2);  // Save the incoming tag id into next message
 8002e58:	4b45      	ldr	r3, [pc, #276]	@ (8002f70 <anchor_main+0x234>)
 8002e5a:	4946      	ldr	r1, [pc, #280]	@ (8002f74 <anchor_main+0x238>)
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f011 f9d0 	bl	8014204 <memcpy>
            memcpy(rx_final_msg + RX_FINAL_MSG_TAG_ID_IDX, rx_buffer + RX_POLL_MSG_TAG_ID_IDX, 2);  // Used for comparing tag id of poll with final
 8002e64:	4b44      	ldr	r3, [pc, #272]	@ (8002f78 <anchor_main+0x23c>)
 8002e66:	4943      	ldr	r1, [pc, #268]	@ (8002f74 <anchor_main+0x238>)
 8002e68:	2202      	movs	r2, #2
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f011 f9ca 	bl	8014204 <memcpy>
            memcpy(rx_poll_msg + RX_POLL_MSG_TAG_ID_IDX, rx_buffer + RX_POLL_MSG_TAG_ID_IDX, 2);  // Respond to all tags
 8002e70:	4b42      	ldr	r3, [pc, #264]	@ (8002f7c <anchor_main+0x240>)
 8002e72:	4940      	ldr	r1, [pc, #256]	@ (8002f74 <anchor_main+0x238>)
 8002e74:	2202      	movs	r2, #2
 8002e76:	0018      	movs	r0, r3
 8002e78:	f011 f9c4 	bl	8014204 <memcpy>

            if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0)
 8002e7c:	4940      	ldr	r1, [pc, #256]	@ (8002f80 <anchor_main+0x244>)
 8002e7e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f6c <anchor_main+0x230>)
 8002e80:	220a      	movs	r2, #10
 8002e82:	0018      	movs	r0, r3
 8002e84:	f011 f91e 	bl	80140c4 <memcmp>
 8002e88:	1e03      	subs	r3, r0, #0
 8002e8a:	d1a7      	bne.n	8002ddc <anchor_main+0xa0>

                uint32 resp_tx_time;
                int ret;

                /* Retrieve poll reception timestamp. */
                poll_rx_ts = get_rx_timestamp_u64();
 8002e8c:	f000 fab0 	bl	80033f0 <get_rx_timestamp_u64>
 8002e90:	0002      	movs	r2, r0
 8002e92:	000b      	movs	r3, r1
 8002e94:	493b      	ldr	r1, [pc, #236]	@ (8002f84 <anchor_main+0x248>)
 8002e96:	600a      	str	r2, [r1, #0]
 8002e98:	604b      	str	r3, [r1, #4]

                //                 CDC_Transmit_FS((uint8*) &poll_rx_ts, sizeof(poll_rx_ts));

                /* Set send time for response. See NOTE 9 below. */
                resp_tx_time = (poll_rx_ts + (POLL_RX_TO_RESP_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 8002e9a:	4b3a      	ldr	r3, [pc, #232]	@ (8002f84 <anchor_main+0x248>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	4839      	ldr	r0, [pc, #228]	@ (8002f88 <anchor_main+0x24c>)
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	1812      	adds	r2, r2, r0
 8002ea6:	414b      	adcs	r3, r1
 8002ea8:	0619      	lsls	r1, r3, #24
 8002eaa:	0a14      	lsrs	r4, r2, #8
 8002eac:	430c      	orrs	r4, r1
 8002eae:	0a1d      	lsrs	r5, r3, #8
 8002eb0:	0023      	movs	r3, r4
 8002eb2:	667b      	str	r3, [r7, #100]	@ 0x64
                dwt_setdelayedtrxtime(resp_tx_time);
 8002eb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f00f ffc9 	bl	8012e4e <dwt_setdelayedtrxtime>

                // CDC_Transmit_FS((uint8*)&resp_tx_time, sizeof(resp_tx_time));

                /* Set expected delay and timeout for final message reception. See NOTE 4 and 5 below. */
                dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS);
 8002ebc:	2064      	movs	r0, #100	@ 0x64
 8002ebe:	f00f fefb 	bl	8012cb8 <dwt_setrxaftertxdelay>
                dwt_setrxtimeout(FINAL_RX_TIMEOUT_UUS);
 8002ec2:	23af      	movs	r3, #175	@ 0xaf
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f010 f8c8 	bl	801305c <dwt_setrxtimeout>

                /* Write and send the response message. See NOTE 10 below.*/
                tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8002ecc:	4b2f      	ldr	r3, [pc, #188]	@ (8002f8c <anchor_main+0x250>)
 8002ece:	781a      	ldrb	r2, [r3, #0]
 8002ed0:	4b2f      	ldr	r3, [pc, #188]	@ (8002f90 <anchor_main+0x254>)
 8002ed2:	709a      	strb	r2, [r3, #2]
                dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 8002ed4:	4b2e      	ldr	r3, [pc, #184]	@ (8002f90 <anchor_main+0x254>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	0019      	movs	r1, r3
 8002eda:	200f      	movs	r0, #15
 8002edc:	f00f fc55 	bl	801278a <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1);          /* Zero offset in TX buffer, ranging. */
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	200f      	movs	r0, #15
 8002ee6:	f00f fc79 	bl	80127dc <dwt_writetxfctrl>
                ret = dwt_starttx(DWT_START_TX_DELAYED | DWT_RESPONSE_EXPECTED);
 8002eea:	2003      	movs	r0, #3
 8002eec:	f00f ffbe 	bl	8012e6c <dwt_starttx>
 8002ef0:	0003      	movs	r3, r0
 8002ef2:	663b      	str	r3, [r7, #96]	@ 0x60

                /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 11 below. */
                if (ret == DWT_ERROR)
 8002ef4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	d100      	bne.n	8002efc <anchor_main+0x1c0>
 8002efa:	e208      	b.n	800330e <anchor_main+0x5d2>
                {
                    continue;
                }

                /* Poll for reception of expected "final" frame or error/timeout. See NOTE 8 below. */
                while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8002efc:	46c0      	nop			@ (mov r8, r8)
 8002efe:	2100      	movs	r1, #0
 8002f00:	200f      	movs	r0, #15
 8002f02:	f00f fd81 	bl	8012a08 <dwt_read32bitoffsetreg>
 8002f06:	0002      	movs	r2, r0
 8002f08:	4b16      	ldr	r3, [pc, #88]	@ (8002f64 <anchor_main+0x228>)
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	4b15      	ldr	r3, [pc, #84]	@ (8002f64 <anchor_main+0x228>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a15      	ldr	r2, [pc, #84]	@ (8002f68 <anchor_main+0x22c>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	d0f3      	beq.n	8002efe <anchor_main+0x1c2>
                };
                // uint32 error = status_reg & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
                //                CDC_Transmit_FS((uint8 *) &error, sizeof(status_reg));

                /* Increment frame sequence number after transmission of the response message (modulo 256). */
                frame_seq_nb++;
 8002f16:	4b1d      	ldr	r3, [pc, #116]	@ (8002f8c <anchor_main+0x250>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002f8c <anchor_main+0x250>)
 8002f20:	701a      	strb	r2, [r3, #0]

                if (status_reg & SYS_STATUS_RXFCG)
 8002f22:	4b10      	ldr	r3, [pc, #64]	@ (8002f64 <anchor_main+0x228>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	2380      	movs	r3, #128	@ 0x80
 8002f28:	01db      	lsls	r3, r3, #7
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d100      	bne.n	8002f30 <anchor_main+0x1f4>
 8002f2e:	e1dc      	b.n	80032ea <anchor_main+0x5ae>
                {
                    int i;

                    for (i = 0; i < RX_BUF_LEN; i++)
 8002f30:	2300      	movs	r3, #0
 8002f32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f34:	e036      	b.n	8002fa4 <anchor_main+0x268>
 8002f36:	46c0      	nop			@ (mov r8, r8)
 8002f38:	2000000a 	.word	0x2000000a
 8002f3c:	20000458 	.word	0x20000458
 8002f40:	20000029 	.word	0x20000029
 8002f44:	20000020 	.word	0x20000020
 8002f48:	20000037 	.word	0x20000037
 8002f4c:	20000045 	.word	0x20000045
 8002f50:	2000000c 	.word	0x2000000c
 8002f54:	20000018 	.word	0x20000018
 8002f58:	00004031 	.word	0x00004031
 8002f5c:	0801665c 	.word	0x0801665c
 8002f60:	0801666c 	.word	0x0801666c
 8002f64:	2000047c 	.word	0x2000047c
 8002f68:	2427d000 	.word	0x2427d000
 8002f6c:	20000464 	.word	0x20000464
 8002f70:	20000035 	.word	0x20000035
 8002f74:	2000046b 	.word	0x2000046b
 8002f78:	20000047 	.word	0x20000047
 8002f7c:	2000002b 	.word	0x2000002b
 8002f80:	20000024 	.word	0x20000024
 8002f84:	20000480 	.word	0x20000480
 8002f88:	09c40000 	.word	0x09c40000
 8002f8c:	20000460 	.word	0x20000460
 8002f90:	20000030 	.word	0x20000030
                    {
                        rx_buffer[i] = 0;
 8002f94:	4ae0      	ldr	r2, [pc, #896]	@ (8003318 <anchor_main+0x5dc>)
 8002f96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f98:	18d3      	adds	r3, r2, r3
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	701a      	strb	r2, [r3, #0]
                    for (i = 0; i < RX_BUF_LEN; i++)
 8002f9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002fa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fa6:	2b17      	cmp	r3, #23
 8002fa8:	ddf4      	ble.n	8002f94 <anchor_main+0x258>
                    }
                    //                	CDC_Transmit_FS((uint8 *) &status_reg, sizeof(error));
                    /* Clear good RX frame event and TX frame sent in the DW1000 status register. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG | SYS_STATUS_TXFRS);
 8002faa:	2381      	movs	r3, #129	@ 0x81
 8002fac:	01db      	lsls	r3, r3, #7
 8002fae:	001a      	movs	r2, r3
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	200f      	movs	r0, #15
 8002fb4:	f00f fdb9 	bl	8012b2a <dwt_write32bitoffsetreg>

                    /* A frame has been received, read it into the local buffer. */
                    frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 8002fb8:	2100      	movs	r1, #0
 8002fba:	2010      	movs	r0, #16
 8002fbc:	f00f fd24 	bl	8012a08 <dwt_read32bitoffsetreg>
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	227f      	movs	r2, #127	@ 0x7f
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	66bb      	str	r3, [r7, #104]	@ 0x68
                    if (frame_len <= RX_BUF_LEN)
 8002fc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fca:	2b18      	cmp	r3, #24
 8002fcc:	d806      	bhi.n	8002fdc <anchor_main+0x2a0>
                    {
                        dwt_readrxdata(rx_buffer, frame_len, 0);
 8002fce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fd0:	b299      	uxth	r1, r3
 8002fd2:	4bd1      	ldr	r3, [pc, #836]	@ (8003318 <anchor_main+0x5dc>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f00f fc24 	bl	8012824 <dwt_readrxdata>

                    //                    CDC_Transmit_FS(rx_buffer, sizeof(rx_final_msg));

                    /* Check that the frame is a final message sent by "DS TWR initiator" example.
                     * As the sequence number field of the frame is not used in this example, it can be zeroed to ease the validation of the frame. */
                    rx_buffer[ALL_MSG_SN_IDX] = 0;
 8002fdc:	4bce      	ldr	r3, [pc, #824]	@ (8003318 <anchor_main+0x5dc>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	709a      	strb	r2, [r3, #2]
                    //                    CDC_Transmit_FS(rx_buffer, ALL_MSG_COMMON_LEN);
                    //                    CDC_Transmit_FS(rx_final_msg, ALL_MSG_COMMON_LEN);

                    if (memcmp(rx_buffer, rx_final_msg, ALL_MSG_COMMON_LEN) == 0)
 8002fe2:	49ce      	ldr	r1, [pc, #824]	@ (800331c <anchor_main+0x5e0>)
 8002fe4:	4bcc      	ldr	r3, [pc, #816]	@ (8003318 <anchor_main+0x5dc>)
 8002fe6:	220a      	movs	r2, #10
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f011 f86b 	bl	80140c4 <memcmp>
 8002fee:	1e03      	subs	r3, r0, #0
 8002ff0:	d000      	beq.n	8002ff4 <anchor_main+0x2b8>
 8002ff2:	e6f3      	b.n	8002ddc <anchor_main+0xa0>
                        uint32 poll_rx_ts_32, resp_tx_ts_32, final_rx_ts_32;
                        double Ra, Rb, Da, Db;
                        int64 tof_dtu;

                        /* Retrieve response transmission and final reception timestamps. */
                        resp_tx_ts = get_tx_timestamp_u64();
 8002ff4:	f000 f9c2 	bl	800337c <get_tx_timestamp_u64>
 8002ff8:	0002      	movs	r2, r0
 8002ffa:	000b      	movs	r3, r1
 8002ffc:	49c8      	ldr	r1, [pc, #800]	@ (8003320 <anchor_main+0x5e4>)
 8002ffe:	600a      	str	r2, [r1, #0]
 8003000:	604b      	str	r3, [r1, #4]
                        final_rx_ts = get_rx_timestamp_u64();
 8003002:	f000 f9f5 	bl	80033f0 <get_rx_timestamp_u64>
 8003006:	0002      	movs	r2, r0
 8003008:	000b      	movs	r3, r1
 800300a:	49c6      	ldr	r1, [pc, #792]	@ (8003324 <anchor_main+0x5e8>)
 800300c:	600a      	str	r2, [r1, #0]
 800300e:	604b      	str	r3, [r1, #4]

                        /* Get timestamps embedded in the final message. */
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX], &poll_tx_ts);
 8003010:	2310      	movs	r3, #16
 8003012:	2610      	movs	r6, #16
 8003014:	199b      	adds	r3, r3, r6
 8003016:	19da      	adds	r2, r3, r7
 8003018:	4bc3      	ldr	r3, [pc, #780]	@ (8003328 <anchor_main+0x5ec>)
 800301a:	0011      	movs	r1, r2
 800301c:	0018      	movs	r0, r3
 800301e:	f000 fa21 	bl	8003464 <final_msg_get_ts>
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_RESP_RX_TS_IDX], &resp_rx_ts);
 8003022:	230c      	movs	r3, #12
 8003024:	199b      	adds	r3, r3, r6
 8003026:	19da      	adds	r2, r3, r7
 8003028:	4bc0      	ldr	r3, [pc, #768]	@ (800332c <anchor_main+0x5f0>)
 800302a:	0011      	movs	r1, r2
 800302c:	0018      	movs	r0, r3
 800302e:	f000 fa19 	bl	8003464 <final_msg_get_ts>
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_FINAL_TX_TS_IDX], &final_tx_ts);
 8003032:	2308      	movs	r3, #8
 8003034:	199b      	adds	r3, r3, r6
 8003036:	19da      	adds	r2, r3, r7
 8003038:	4bbd      	ldr	r3, [pc, #756]	@ (8003330 <anchor_main+0x5f4>)
 800303a:	0011      	movs	r1, r2
 800303c:	0018      	movs	r0, r3
 800303e:	f000 fa11 	bl	8003464 <final_msg_get_ts>

                        /* Compute time of flight. 32-bit subtractions give correct answers even if clock has wrapped. See NOTE 12 below. */
                        poll_rx_ts_32 = (uint32)poll_rx_ts;
 8003042:	4bbc      	ldr	r3, [pc, #752]	@ (8003334 <anchor_main+0x5f8>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	0013      	movs	r3, r2
 800304a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        resp_tx_ts_32 = (uint32)resp_tx_ts;
 800304c:	4bb4      	ldr	r3, [pc, #720]	@ (8003320 <anchor_main+0x5e4>)
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	0013      	movs	r3, r2
 8003054:	65bb      	str	r3, [r7, #88]	@ 0x58
                        final_rx_ts_32 = (uint32)final_rx_ts;
 8003056:	4bb3      	ldr	r3, [pc, #716]	@ (8003324 <anchor_main+0x5e8>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	0013      	movs	r3, r2
 800305e:	657b      	str	r3, [r7, #84]	@ 0x54
                        Ra = (double)(resp_rx_ts - poll_tx_ts);
 8003060:	69fa      	ldr	r2, [r7, #28]
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	0018      	movs	r0, r3
 8003068:	f7ff fbc4 	bl	80027f4 <__aeabi_ui2d>
 800306c:	0002      	movs	r2, r0
 800306e:	000b      	movs	r3, r1
 8003070:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003072:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        Rb = (double)(final_rx_ts_32 - resp_tx_ts_32);
 8003074:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003076:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	0018      	movs	r0, r3
 800307c:	f7ff fbba 	bl	80027f4 <__aeabi_ui2d>
 8003080:	0002      	movs	r2, r0
 8003082:	000b      	movs	r3, r1
 8003084:	643a      	str	r2, [r7, #64]	@ 0x40
 8003086:	647b      	str	r3, [r7, #68]	@ 0x44
                        Da = (double)(final_tx_ts - resp_rx_ts);
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	0018      	movs	r0, r3
 8003090:	f7ff fbb0 	bl	80027f4 <__aeabi_ui2d>
 8003094:	0002      	movs	r2, r0
 8003096:	000b      	movs	r3, r1
 8003098:	63ba      	str	r2, [r7, #56]	@ 0x38
 800309a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                        Db = (double)(resp_tx_ts_32 - poll_rx_ts_32);
 800309c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800309e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	0018      	movs	r0, r3
 80030a4:	f7ff fba6 	bl	80027f4 <__aeabi_ui2d>
 80030a8:	0002      	movs	r2, r0
 80030aa:	000b      	movs	r3, r1
 80030ac:	633a      	str	r2, [r7, #48]	@ 0x30
 80030ae:	637b      	str	r3, [r7, #52]	@ 0x34
                        tof_dtu = (int64)((Ra * Rb - Da * Db) / (Ra + Rb + Da + Db));
 80030b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030b4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80030b6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80030b8:	f7fe fcac 	bl	8001a14 <__aeabi_dmul>
 80030bc:	0002      	movs	r2, r0
 80030be:	000b      	movs	r3, r1
 80030c0:	60ba      	str	r2, [r7, #8]
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030c8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80030ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030cc:	f7fe fca2 	bl	8001a14 <__aeabi_dmul>
 80030d0:	0002      	movs	r2, r0
 80030d2:	000b      	movs	r3, r1
 80030d4:	68b8      	ldr	r0, [r7, #8]
 80030d6:	68f9      	ldr	r1, [r7, #12]
 80030d8:	f7fe ff64 	bl	8001fa4 <__aeabi_dsub>
 80030dc:	0002      	movs	r2, r0
 80030de:	000b      	movs	r3, r1
 80030e0:	60ba      	str	r2, [r7, #8]
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030e8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80030ea:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80030ec:	f7fd fcea 	bl	8000ac4 <__aeabi_dadd>
 80030f0:	0002      	movs	r2, r0
 80030f2:	000b      	movs	r3, r1
 80030f4:	0010      	movs	r0, r2
 80030f6:	0019      	movs	r1, r3
 80030f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80030fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030fc:	f7fd fce2 	bl	8000ac4 <__aeabi_dadd>
 8003100:	0002      	movs	r2, r0
 8003102:	000b      	movs	r3, r1
 8003104:	0010      	movs	r0, r2
 8003106:	0019      	movs	r1, r3
 8003108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800310a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800310c:	f7fd fcda 	bl	8000ac4 <__aeabi_dadd>
 8003110:	0002      	movs	r2, r0
 8003112:	000b      	movs	r3, r1
 8003114:	68b8      	ldr	r0, [r7, #8]
 8003116:	68f9      	ldr	r1, [r7, #12]
 8003118:	f7fe f838 	bl	800118c <__aeabi_ddiv>
 800311c:	0002      	movs	r2, r0
 800311e:	000b      	movs	r3, r1
 8003120:	0010      	movs	r0, r2
 8003122:	0019      	movs	r1, r3
 8003124:	f7fd f9de 	bl	80004e4 <__aeabi_d2lz>
 8003128:	0002      	movs	r2, r0
 800312a:	000b      	movs	r3, r1
 800312c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800312e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        tof = tof_dtu * DWT_TIME_UNITS;
 8003130:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003132:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003134:	f7fd fa10 	bl	8000558 <__aeabi_l2d>
 8003138:	4a7f      	ldr	r2, [pc, #508]	@ (8003338 <anchor_main+0x5fc>)
 800313a:	4b80      	ldr	r3, [pc, #512]	@ (800333c <anchor_main+0x600>)
 800313c:	f7fe fc6a 	bl	8001a14 <__aeabi_dmul>
 8003140:	0002      	movs	r2, r0
 8003142:	000b      	movs	r3, r1
 8003144:	497e      	ldr	r1, [pc, #504]	@ (8003340 <anchor_main+0x604>)
 8003146:	600a      	str	r2, [r1, #0]
 8003148:	604b      	str	r3, [r1, #4]

                        distance = tof * SPEED_OF_LIGHT;
 800314a:	4b7d      	ldr	r3, [pc, #500]	@ (8003340 <anchor_main+0x604>)
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	6859      	ldr	r1, [r3, #4]
 8003150:	2298      	movs	r2, #152	@ 0x98
 8003152:	0552      	lsls	r2, r2, #21
 8003154:	4b7b      	ldr	r3, [pc, #492]	@ (8003344 <anchor_main+0x608>)
 8003156:	f7fe fc5d 	bl	8001a14 <__aeabi_dmul>
 800315a:	0002      	movs	r2, r0
 800315c:	000b      	movs	r3, r1
 800315e:	497a      	ldr	r1, [pc, #488]	@ (8003348 <anchor_main+0x60c>)
 8003160:	600a      	str	r2, [r1, #0]
 8003162:	604b      	str	r3, [r1, #4]

                        if(distance < 0)
 8003164:	4b78      	ldr	r3, [pc, #480]	@ (8003348 <anchor_main+0x60c>)
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	6859      	ldr	r1, [r3, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	2300      	movs	r3, #0
 800316e:	f7fd f973 	bl	8000458 <__aeabi_dcmplt>
 8003172:	1e03      	subs	r3, r0, #0
 8003174:	d000      	beq.n	8003178 <anchor_main+0x43c>
 8003176:	e0cc      	b.n	8003312 <anchor_main+0x5d6>
                        {
                            continue;
                        }

                        uint8 tag_index = rx_final_msg[RX_FINAL_MSG_TAG_ID_IDX + 1] - '0' - 1; // Convert char to uint8
 8003178:	4b68      	ldr	r3, [pc, #416]	@ (800331c <anchor_main+0x5e0>)
 800317a:	7a1a      	ldrb	r2, [r3, #8]
 800317c:	2617      	movs	r6, #23
 800317e:	2110      	movs	r1, #16
 8003180:	1873      	adds	r3, r6, r1
 8003182:	19db      	adds	r3, r3, r7
 8003184:	3a31      	subs	r2, #49	@ 0x31
 8003186:	701a      	strb	r2, [r3, #0]
                        if (tag_index < total_tags) // Ensure tag ID is within bounds
 8003188:	4b70      	ldr	r3, [pc, #448]	@ (800334c <anchor_main+0x610>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	1872      	adds	r2, r6, r1
 800318e:	19d2      	adds	r2, r2, r7
 8003190:	7812      	ldrb	r2, [r2, #0]
 8003192:	429a      	cmp	r2, r3
 8003194:	d300      	bcc.n	8003198 <anchor_main+0x45c>
 8003196:	e08f      	b.n	80032b8 <anchor_main+0x57c>
                        {
                            tags_last_heard[tag_index] = HAL_GetTick();
 8003198:	1872      	adds	r2, r6, r1
 800319a:	19d3      	adds	r3, r2, r7
 800319c:	781e      	ldrb	r6, [r3, #0]
 800319e:	f001 f92f 	bl	8004400 <HAL_GetTick>
 80031a2:	0001      	movs	r1, r0
 80031a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003350 <anchor_main+0x614>)
 80031a6:	00b2      	lsls	r2, r6, #2
 80031a8:	50d1      	str	r1, [r2, r3]
                            tag_distances[tag_index] = distance; // Update the distance for the tag
 80031aa:	2617      	movs	r6, #23
 80031ac:	2310      	movs	r3, #16
 80031ae:	18f2      	adds	r2, r6, r3
 80031b0:	19d3      	adds	r3, r2, r7
 80031b2:	7819      	ldrb	r1, [r3, #0]
 80031b4:	4b64      	ldr	r3, [pc, #400]	@ (8003348 <anchor_main+0x60c>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4866      	ldr	r0, [pc, #408]	@ (8003354 <anchor_main+0x618>)
 80031bc:	00c9      	lsls	r1, r1, #3
 80031be:	1841      	adds	r1, r0, r1
 80031c0:	600a      	str	r2, [r1, #0]
 80031c2:	604b      	str	r3, [r1, #4]

                            // Update tag mean and variance
                            tags_variance[tag_index] = (SLIDING_WINDOW_VARIANCE_RHO_INV * tags_variance[tag_index]) + (SLIDING_WINDOW_VARIANCE_RHO * (distance - tags_mean[tag_index]) * (distance - tags_mean[tag_index]));
 80031c4:	2310      	movs	r3, #16
 80031c6:	18f2      	adds	r2, r6, r3
 80031c8:	19d3      	adds	r3, r2, r7
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	4a62      	ldr	r2, [pc, #392]	@ (8003358 <anchor_main+0x61c>)
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	18d3      	adds	r3, r2, r3
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	6859      	ldr	r1, [r3, #4]
 80031d6:	4a61      	ldr	r2, [pc, #388]	@ (800335c <anchor_main+0x620>)
 80031d8:	4b61      	ldr	r3, [pc, #388]	@ (8003360 <anchor_main+0x624>)
 80031da:	f7fe fc1b 	bl	8001a14 <__aeabi_dmul>
 80031de:	0002      	movs	r2, r0
 80031e0:	000b      	movs	r3, r1
 80031e2:	60ba      	str	r2, [r7, #8]
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	4b58      	ldr	r3, [pc, #352]	@ (8003348 <anchor_main+0x60c>)
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	6859      	ldr	r1, [r3, #4]
 80031ec:	2310      	movs	r3, #16
 80031ee:	18f2      	adds	r2, r6, r3
 80031f0:	19d3      	adds	r3, r2, r7
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	4a5b      	ldr	r2, [pc, #364]	@ (8003364 <anchor_main+0x628>)
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	18d3      	adds	r3, r2, r3
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f7fe fed1 	bl	8001fa4 <__aeabi_dsub>
 8003202:	0002      	movs	r2, r0
 8003204:	000b      	movs	r3, r1
 8003206:	0010      	movs	r0, r2
 8003208:	0019      	movs	r1, r3
 800320a:	4a54      	ldr	r2, [pc, #336]	@ (800335c <anchor_main+0x620>)
 800320c:	4b56      	ldr	r3, [pc, #344]	@ (8003368 <anchor_main+0x62c>)
 800320e:	f7fe fc01 	bl	8001a14 <__aeabi_dmul>
 8003212:	0002      	movs	r2, r0
 8003214:	000b      	movs	r3, r1
 8003216:	603a      	str	r2, [r7, #0]
 8003218:	607b      	str	r3, [r7, #4]
 800321a:	4b4b      	ldr	r3, [pc, #300]	@ (8003348 <anchor_main+0x60c>)
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	6859      	ldr	r1, [r3, #4]
 8003220:	2310      	movs	r3, #16
 8003222:	18f2      	adds	r2, r6, r3
 8003224:	19d3      	adds	r3, r2, r7
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	4a4e      	ldr	r2, [pc, #312]	@ (8003364 <anchor_main+0x628>)
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	18d3      	adds	r3, r2, r3
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f7fe feb7 	bl	8001fa4 <__aeabi_dsub>
 8003236:	0002      	movs	r2, r0
 8003238:	000b      	movs	r3, r1
 800323a:	6838      	ldr	r0, [r7, #0]
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	f7fe fbe9 	bl	8001a14 <__aeabi_dmul>
 8003242:	0002      	movs	r2, r0
 8003244:	000b      	movs	r3, r1
 8003246:	2110      	movs	r1, #16
 8003248:	1870      	adds	r0, r6, r1
 800324a:	19c1      	adds	r1, r0, r7
 800324c:	780e      	ldrb	r6, [r1, #0]
 800324e:	68b8      	ldr	r0, [r7, #8]
 8003250:	68f9      	ldr	r1, [r7, #12]
 8003252:	f7fd fc37 	bl	8000ac4 <__aeabi_dadd>
 8003256:	0002      	movs	r2, r0
 8003258:	000b      	movs	r3, r1
 800325a:	483f      	ldr	r0, [pc, #252]	@ (8003358 <anchor_main+0x61c>)
 800325c:	00f1      	lsls	r1, r6, #3
 800325e:	1841      	adds	r1, r0, r1
 8003260:	600a      	str	r2, [r1, #0]
 8003262:	604b      	str	r3, [r1, #4]
                            tags_mean[tag_index] = (SLIDING_WINDOW_VARIANCE_RHO_INV * tags_mean[tag_index]) + (SLIDING_WINDOW_VARIANCE_RHO * distance);
 8003264:	2617      	movs	r6, #23
 8003266:	2110      	movs	r1, #16
 8003268:	1873      	adds	r3, r6, r1
 800326a:	19db      	adds	r3, r3, r7
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	4a3d      	ldr	r2, [pc, #244]	@ (8003364 <anchor_main+0x628>)
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	18d3      	adds	r3, r2, r3
 8003274:	6818      	ldr	r0, [r3, #0]
 8003276:	6859      	ldr	r1, [r3, #4]
 8003278:	4a38      	ldr	r2, [pc, #224]	@ (800335c <anchor_main+0x620>)
 800327a:	4b39      	ldr	r3, [pc, #228]	@ (8003360 <anchor_main+0x624>)
 800327c:	f7fe fbca 	bl	8001a14 <__aeabi_dmul>
 8003280:	0002      	movs	r2, r0
 8003282:	000b      	movs	r3, r1
 8003284:	60ba      	str	r2, [r7, #8]
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	4b2f      	ldr	r3, [pc, #188]	@ (8003348 <anchor_main+0x60c>)
 800328a:	6818      	ldr	r0, [r3, #0]
 800328c:	6859      	ldr	r1, [r3, #4]
 800328e:	4a33      	ldr	r2, [pc, #204]	@ (800335c <anchor_main+0x620>)
 8003290:	4b35      	ldr	r3, [pc, #212]	@ (8003368 <anchor_main+0x62c>)
 8003292:	f7fe fbbf 	bl	8001a14 <__aeabi_dmul>
 8003296:	0002      	movs	r2, r0
 8003298:	000b      	movs	r3, r1
 800329a:	2110      	movs	r1, #16
 800329c:	1871      	adds	r1, r6, r1
 800329e:	19c9      	adds	r1, r1, r7
 80032a0:	780e      	ldrb	r6, [r1, #0]
 80032a2:	68b8      	ldr	r0, [r7, #8]
 80032a4:	68f9      	ldr	r1, [r7, #12]
 80032a6:	f7fd fc0d 	bl	8000ac4 <__aeabi_dadd>
 80032aa:	0002      	movs	r2, r0
 80032ac:	000b      	movs	r3, r1
 80032ae:	482d      	ldr	r0, [pc, #180]	@ (8003364 <anchor_main+0x628>)
 80032b0:	00f1      	lsls	r1, r6, #3
 80032b2:	1841      	adds	r1, r0, r1
 80032b4:	600a      	str	r2, [r1, #0]
 80032b6:	604b      	str	r3, [r1, #4]
                        }

                        /* Display computed distance on LCD. */
                        sprintf(dist_str, "AT+TEST=TXLRSTR, \"%c,%c,%3.2f\"\r\n", anchor_id[1], rx_final_msg[RX_FINAL_MSG_TAG_ID_IDX + 1], distance);
 80032b8:	4b2c      	ldr	r3, [pc, #176]	@ (800336c <anchor_main+0x630>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	3301      	adds	r3, #1
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	001e      	movs	r6, r3
 80032c2:	4b16      	ldr	r3, [pc, #88]	@ (800331c <anchor_main+0x5e0>)
 80032c4:	7a1b      	ldrb	r3, [r3, #8]
 80032c6:	469c      	mov	ip, r3
 80032c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003348 <anchor_main+0x60c>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	4928      	ldr	r1, [pc, #160]	@ (8003370 <anchor_main+0x634>)
 80032d0:	4828      	ldr	r0, [pc, #160]	@ (8003374 <anchor_main+0x638>)
 80032d2:	9200      	str	r2, [sp, #0]
 80032d4:	9301      	str	r3, [sp, #4]
 80032d6:	4663      	mov	r3, ip
 80032d8:	0032      	movs	r2, r6
 80032da:	f010 fe87 	bl	8013fec <siprintf>
                        // lcd_display_str(dist_str);

                        CDC_Transmit_FS((uint8_t *)dist_str, sizeof(dist_str));
 80032de:	4b25      	ldr	r3, [pc, #148]	@ (8003374 <anchor_main+0x638>)
 80032e0:	2180      	movs	r1, #128	@ 0x80
 80032e2:	0018      	movs	r0, r3
 80032e4:	f00e fa5a 	bl	801179c <CDC_Transmit_FS>
 80032e8:	e578      	b.n	8002ddc <anchor_main+0xa0>
                    }
                }
                else
                {
                    /* Clear RX error/timeout events in the DW1000 status register. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 80032ea:	4b23      	ldr	r3, [pc, #140]	@ (8003378 <anchor_main+0x63c>)
 80032ec:	001a      	movs	r2, r3
 80032ee:	2100      	movs	r1, #0
 80032f0:	200f      	movs	r0, #15
 80032f2:	f00f fc1a 	bl	8012b2a <dwt_write32bitoffsetreg>

                    /* Reset RX to properly reinitialise LDE operation. */
                    dwt_rxreset();
 80032f6:	f00f ff01 	bl	80130fc <dwt_rxreset>
 80032fa:	e56f      	b.n	8002ddc <anchor_main+0xa0>
            }
        }
        else
        {
            /* Clear RX error/timeout events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 80032fc:	4b1e      	ldr	r3, [pc, #120]	@ (8003378 <anchor_main+0x63c>)
 80032fe:	001a      	movs	r2, r3
 8003300:	2100      	movs	r1, #0
 8003302:	200f      	movs	r0, #15
 8003304:	f00f fc11 	bl	8012b2a <dwt_write32bitoffsetreg>

            /* Reset RX to properly reinitialise LDE operation. */
            dwt_rxreset();
 8003308:	f00f fef8 	bl	80130fc <dwt_rxreset>
 800330c:	e566      	b.n	8002ddc <anchor_main+0xa0>
                    continue;
 800330e:	46c0      	nop			@ (mov r8, r8)
 8003310:	e564      	b.n	8002ddc <anchor_main+0xa0>
                            continue;
 8003312:	46c0      	nop			@ (mov r8, r8)
        dwt_setrxtimeout(0);
 8003314:	e562      	b.n	8002ddc <anchor_main+0xa0>
 8003316:	46c0      	nop			@ (mov r8, r8)
 8003318:	20000464 	.word	0x20000464
 800331c:	20000040 	.word	0x20000040
 8003320:	20000488 	.word	0x20000488
 8003324:	20000490 	.word	0x20000490
 8003328:	2000046e 	.word	0x2000046e
 800332c:	20000472 	.word	0x20000472
 8003330:	20000476 	.word	0x20000476
 8003334:	20000480 	.word	0x20000480
 8003338:	3bce48fa 	.word	0x3bce48fa
 800333c:	3db13518 	.word	0x3db13518
 8003340:	20000498 	.word	0x20000498
 8003344:	41b1dd19 	.word	0x41b1dd19
 8003348:	200004a0 	.word	0x200004a0
 800334c:	2000000a 	.word	0x2000000a
 8003350:	20000410 	.word	0x20000410
 8003354:	200003f8 	.word	0x200003f8
 8003358:	20000438 	.word	0x20000438
 800335c:	33333333 	.word	0x33333333
 8003360:	3feb3333 	.word	0x3feb3333
 8003364:	20000420 	.word	0x20000420
 8003368:	3fc33333 	.word	0x3fc33333
 800336c:	20000020 	.word	0x20000020
 8003370:	0801669c 	.word	0x0801669c
 8003374:	200004a8 	.word	0x200004a8
 8003378:	24279000 	.word	0x24279000

0800337c <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_tx_timestamp_u64(void)
{
 800337c:	b5b0      	push	{r4, r5, r7, lr}
 800337e:	b08a      	sub	sp, #40	@ 0x28
 8003380:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 8003382:	2200      	movs	r2, #0
 8003384:	2300      	movs	r3, #0
 8003386:	623a      	str	r2, [r7, #32]
 8003388:	627b      	str	r3, [r7, #36]	@ 0x24
    int i;
    dwt_readtxtimestamp(ts_tab);
 800338a:	2314      	movs	r3, #20
 800338c:	18fb      	adds	r3, r7, r3
 800338e:	0018      	movs	r0, r3
 8003390:	f00f fa61 	bl	8012856 <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 8003394:	2304      	movs	r3, #4
 8003396:	61fb      	str	r3, [r7, #28]
 8003398:	e020      	b.n	80033dc <get_tx_timestamp_u64+0x60>
    {
        ts <<= 8;
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	0e1b      	lsrs	r3, r3, #24
 800339e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033a0:	0215      	lsls	r5, r2, #8
 80033a2:	431d      	orrs	r5, r3
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	021c      	lsls	r4, r3, #8
 80033a8:	623c      	str	r4, [r7, #32]
 80033aa:	627d      	str	r5, [r7, #36]	@ 0x24
        ts |= ts_tab[i];
 80033ac:	2314      	movs	r3, #20
 80033ae:	18fa      	adds	r2, r7, r3
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	18d3      	adds	r3, r2, r3
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	60bb      	str	r3, [r7, #8]
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	68b9      	ldr	r1, [r7, #8]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	0008      	movs	r0, r1
 80033c4:	4318      	orrs	r0, r3
 80033c6:	6038      	str	r0, [r7, #0]
 80033c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ca:	431a      	orrs	r2, r3
 80033cc:	607a      	str	r2, [r7, #4]
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	623a      	str	r2, [r7, #32]
 80033d4:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 4; i >= 0; i--)
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3b01      	subs	r3, #1
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	dadb      	bge.n	800339a <get_tx_timestamp_u64+0x1e>
    }
    return ts;
 80033e2:	6a3a      	ldr	r2, [r7, #32]
 80033e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80033e6:	0010      	movs	r0, r2
 80033e8:	0019      	movs	r1, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	b00a      	add	sp, #40	@ 0x28
 80033ee:	bdb0      	pop	{r4, r5, r7, pc}

080033f0 <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_rx_timestamp_u64(void)
{
 80033f0:	b5b0      	push	{r4, r5, r7, lr}
 80033f2:	b08a      	sub	sp, #40	@ 0x28
 80033f4:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 80033f6:	2200      	movs	r2, #0
 80033f8:	2300      	movs	r3, #0
 80033fa:	623a      	str	r2, [r7, #32]
 80033fc:	627b      	str	r3, [r7, #36]	@ 0x24
    int i;
    dwt_readrxtimestamp(ts_tab);
 80033fe:	2314      	movs	r3, #20
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	0018      	movs	r0, r3
 8003404:	f00f fa35 	bl	8012872 <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 8003408:	2304      	movs	r3, #4
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	e020      	b.n	8003450 <get_rx_timestamp_u64+0x60>
    {
        ts <<= 8;
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	0e1b      	lsrs	r3, r3, #24
 8003412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003414:	0215      	lsls	r5, r2, #8
 8003416:	431d      	orrs	r5, r3
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	021c      	lsls	r4, r3, #8
 800341c:	623c      	str	r4, [r7, #32]
 800341e:	627d      	str	r5, [r7, #36]	@ 0x24
        ts |= ts_tab[i];
 8003420:	2314      	movs	r3, #20
 8003422:	18fa      	adds	r2, r7, r3
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	18d3      	adds	r3, r2, r3
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	60bb      	str	r3, [r7, #8]
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	68b9      	ldr	r1, [r7, #8]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	0008      	movs	r0, r1
 8003438:	4318      	orrs	r0, r3
 800343a:	6038      	str	r0, [r7, #0]
 800343c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343e:	431a      	orrs	r2, r3
 8003440:	607a      	str	r2, [r7, #4]
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	623a      	str	r2, [r7, #32]
 8003448:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 4; i >= 0; i--)
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	3b01      	subs	r3, #1
 800344e:	61fb      	str	r3, [r7, #28]
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	2b00      	cmp	r3, #0
 8003454:	dadb      	bge.n	800340e <get_rx_timestamp_u64+0x1e>
    }
    return ts;
 8003456:	6a3a      	ldr	r2, [r7, #32]
 8003458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800345a:	0010      	movs	r0, r2
 800345c:	0019      	movs	r1, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	b00a      	add	sp, #40	@ 0x28
 8003462:	bdb0      	pop	{r4, r5, r7, pc}

08003464 <final_msg_get_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
static void final_msg_get_ts(const uint8 *ts_field, uint32 *ts)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
    int i;
    *ts = 0;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8003474:	2300      	movs	r3, #0
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	e010      	b.n	800349c <final_msg_get_ts+0x38>
    {
        *ts += ts_field[i] << (i * 8);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	188a      	adds	r2, r1, r2
 8003484:	7812      	ldrb	r2, [r2, #0]
 8003486:	0011      	movs	r1, r2
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	00d2      	lsls	r2, r2, #3
 800348c:	4091      	lsls	r1, r2
 800348e:	000a      	movs	r2, r1
 8003490:	189a      	adds	r2, r3, r2
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	3301      	adds	r3, #1
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b03      	cmp	r3, #3
 80034a0:	ddeb      	ble.n	800347a <final_msg_get_ts+0x16>
    }
}
 80034a2:	46c0      	nop			@ (mov r8, r8)
 80034a4:	46c0      	nop			@ (mov r8, r8)
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b004      	add	sp, #16
 80034aa:	bd80      	pop	{r7, pc}

080034ac <send_at_msg>:
static void MX_SPI2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

void send_at_msg(char *msg)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit_IT(&huart1, (uint8_t *)msg, strlen(msg));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	0018      	movs	r0, r3
 80034b8:	f7fc fe26 	bl	8000108 <strlen>
 80034bc:	0003      	movs	r3, r0
 80034be:	b29a      	uxth	r2, r3
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4b04      	ldr	r3, [pc, #16]	@ (80034d4 <send_at_msg+0x28>)
 80034c4:	0018      	movs	r0, r3
 80034c6:	f006 f9c7 	bl	8009858 <HAL_UART_Transmit_IT>
}
 80034ca:	46c0      	nop			@ (mov r8, r8)
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b002      	add	sp, #8
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	46c0      	nop			@ (mov r8, r8)
 80034d4:	200006bc 	.word	0x200006bc

080034d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  send_at_msg_ptr = &send_at_msg;
 80034de:	4b40      	ldr	r3, [pc, #256]	@ (80035e0 <main+0x108>)
 80034e0:	4a40      	ldr	r2, [pc, #256]	@ (80035e4 <main+0x10c>)
 80034e2:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034e4:	f000 ff32 	bl	800434c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034e8:	f000 f890 	bl	800360c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034ec:	f000 fa86 	bl	80039fc <MX_GPIO_Init>
  MX_DMA_Init();
 80034f0:	f000 fa5e 	bl	80039b0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80034f4:	f000 fa28 	bl	8003948 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80034f8:	f000 f954 	bl	80037a4 <MX_SPI1_Init>
  MX_ADC_Init();
 80034fc:	f000 f8f6 	bl	80036ec <MX_ADC_Init>
  MX_SPI2_Init();
 8003500:	f000 f98e 	bl	8003820 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8003504:	f00e f8c6 	bl	8011694 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8003508:	f000 f9c8 	bl	800389c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Power to screen
  HAL_GPIO_WritePin(SCREEN_EN_GPIO_Port, SCREEN_EN_Pin, GPIO_PIN_SET);
 800350c:	4b36      	ldr	r3, [pc, #216]	@ (80035e8 <main+0x110>)
 800350e:	2201      	movs	r2, #1
 8003510:	2104      	movs	r1, #4
 8003512:	0018      	movs	r0, r3
 8003514:	f002 f833 	bl	800557e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SCREEN_EN_AUX_GPIO_Port, SCREEN_EN_AUX_Pin, GPIO_PIN_SET);
 8003518:	4b33      	ldr	r3, [pc, #204]	@ (80035e8 <main+0x110>)
 800351a:	2201      	movs	r2, #1
 800351c:	2102      	movs	r1, #2
 800351e:	0018      	movs	r0, r3
 8003520:	f002 f82d 	bl	800557e <HAL_GPIO_WritePin>

  LCD_init();
 8003524:	f00b fe9c 	bl	800f260 <LCD_init>

  // Startup sequence for LoRa module
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_SET);
 8003528:	2390      	movs	r3, #144	@ 0x90
 800352a:	05db      	lsls	r3, r3, #23
 800352c:	2201      	movs	r2, #1
 800352e:	2101      	movs	r1, #1
 8003530:	0018      	movs	r0, r3
 8003532:	f002 f824 	bl	800557e <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8003536:	23fa      	movs	r3, #250	@ 0xfa
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	0018      	movs	r0, r3
 800353c:	f000 ff6a 	bl	8004414 <HAL_Delay>
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_RESET);
 8003540:	2390      	movs	r3, #144	@ 0x90
 8003542:	05db      	lsls	r3, r3, #23
 8003544:	2200      	movs	r2, #0
 8003546:	2101      	movs	r1, #1
 8003548:	0018      	movs	r0, r3
 800354a:	f002 f818 	bl	800557e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800354e:	2064      	movs	r0, #100	@ 0x64
 8003550:	f000 ff60 	bl	8004414 <HAL_Delay>
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_SET);
 8003554:	2390      	movs	r3, #144	@ 0x90
 8003556:	05db      	lsls	r3, r3, #23
 8003558:	2201      	movs	r2, #1
 800355a:	2101      	movs	r1, #1
 800355c:	0018      	movs	r0, r3
 800355e:	f002 f80e 	bl	800557e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003562:	2064      	movs	r0, #100	@ 0x64
 8003564:	f000 ff56 	bl	8004414 <HAL_Delay>

  // LoRa command reception callback
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_rx_buf, UART_RX_BUF_SIZE);
 8003568:	2380      	movs	r3, #128	@ 0x80
 800356a:	00da      	lsls	r2, r3, #3
 800356c:	491f      	ldr	r1, [pc, #124]	@ (80035ec <main+0x114>)
 800356e:	4b20      	ldr	r3, [pc, #128]	@ (80035f0 <main+0x118>)
 8003570:	0018      	movs	r0, r3
 8003572:	f007 fbd0 	bl	800ad16 <HAL_UARTEx_ReceiveToIdle_DMA>

  // Startup lcd text

  UG_FontSetTransparency(1);
 8003576:	2001      	movs	r0, #1
 8003578:	f00c fae4 	bl	800fb44 <UG_FontSetTransparency>
  UG_FillScreen(C_BLACK);
 800357c:	2000      	movs	r0, #0
 800357e:	f00b ffa7 	bl	800f4d0 <UG_FillScreen>

  LCD_PutStr(50, 20, "NEAR ANCHOR", FONT_16X26, C_WHITE, C_BLACK);
 8003582:	4b1c      	ldr	r3, [pc, #112]	@ (80035f4 <main+0x11c>)
 8003584:	4a1c      	ldr	r2, [pc, #112]	@ (80035f8 <main+0x120>)
 8003586:	2100      	movs	r1, #0
 8003588:	9101      	str	r1, [sp, #4]
 800358a:	491c      	ldr	r1, [pc, #112]	@ (80035fc <main+0x124>)
 800358c:	9100      	str	r1, [sp, #0]
 800358e:	2114      	movs	r1, #20
 8003590:	2032      	movs	r0, #50	@ 0x32
 8003592:	f00b fe0e 	bl	800f1b2 <LCD_PutStr>
  LCD_PutStr(50, 50, "DESIGNED BY:", FONT_16X26, C_WHITE, C_BLACK);
 8003596:	4b17      	ldr	r3, [pc, #92]	@ (80035f4 <main+0x11c>)
 8003598:	4a19      	ldr	r2, [pc, #100]	@ (8003600 <main+0x128>)
 800359a:	2100      	movs	r1, #0
 800359c:	9101      	str	r1, [sp, #4]
 800359e:	4917      	ldr	r1, [pc, #92]	@ (80035fc <main+0x124>)
 80035a0:	9100      	str	r1, [sp, #0]
 80035a2:	2132      	movs	r1, #50	@ 0x32
 80035a4:	2032      	movs	r0, #50	@ 0x32
 80035a6:	f00b fe04 	bl	800f1b2 <LCD_PutStr>
  LCD_PutStr(50, 80, "TERRY TAO", FONT_16X26, C_WHITE, C_BLACK);
 80035aa:	4b12      	ldr	r3, [pc, #72]	@ (80035f4 <main+0x11c>)
 80035ac:	4a15      	ldr	r2, [pc, #84]	@ (8003604 <main+0x12c>)
 80035ae:	2100      	movs	r1, #0
 80035b0:	9101      	str	r1, [sp, #4]
 80035b2:	4912      	ldr	r1, [pc, #72]	@ (80035fc <main+0x124>)
 80035b4:	9100      	str	r1, [sp, #0]
 80035b6:	2150      	movs	r1, #80	@ 0x50
 80035b8:	2032      	movs	r0, #50	@ 0x32
 80035ba:	f00b fdfa 	bl	800f1b2 <LCD_PutStr>
  LCD_PutStr(50, 110, "THOR HELGESON", FONT_16X26, C_WHITE, C_BLACK);
 80035be:	4b0d      	ldr	r3, [pc, #52]	@ (80035f4 <main+0x11c>)
 80035c0:	4a11      	ldr	r2, [pc, #68]	@ (8003608 <main+0x130>)
 80035c2:	2100      	movs	r1, #0
 80035c4:	9101      	str	r1, [sp, #4]
 80035c6:	490d      	ldr	r1, [pc, #52]	@ (80035fc <main+0x124>)
 80035c8:	9100      	str	r1, [sp, #0]
 80035ca:	216e      	movs	r1, #110	@ 0x6e
 80035cc:	2032      	movs	r0, #50	@ 0x32
 80035ce:	f00b fdf0 	bl	800f1b2 <LCD_PutStr>
#ifdef FLASH_TAG
  tag_main();
#endif

#ifdef FLASH_ANCHOR
  anchor_main(send_at_msg_ptr);
 80035d2:	4b03      	ldr	r3, [pc, #12]	@ (80035e0 <main+0x108>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	0018      	movs	r0, r3
 80035d8:	f7ff fbb0 	bl	8002d3c <anchor_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80035dc:	46c0      	nop			@ (mov r8, r8)
 80035de:	e7fd      	b.n	80035dc <main+0x104>
 80035e0:	200007b8 	.word	0x200007b8
 80035e4:	080034ad 	.word	0x080034ad
 80035e8:	48000400 	.word	0x48000400
 80035ec:	200007bc 	.word	0x200007bc
 80035f0:	200006bc 	.word	0x200006bc
 80035f4:	0801692c 	.word	0x0801692c
 80035f8:	08016700 	.word	0x08016700
 80035fc:	0000ffff 	.word	0x0000ffff
 8003600:	0801670c 	.word	0x0801670c
 8003604:	0801671c 	.word	0x0801671c
 8003608:	08016728 	.word	0x08016728

0800360c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800360c:	b590      	push	{r4, r7, lr}
 800360e:	b099      	sub	sp, #100	@ 0x64
 8003610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003612:	242c      	movs	r4, #44	@ 0x2c
 8003614:	193b      	adds	r3, r7, r4
 8003616:	0018      	movs	r0, r3
 8003618:	2334      	movs	r3, #52	@ 0x34
 800361a:	001a      	movs	r2, r3
 800361c:	2100      	movs	r1, #0
 800361e:	f010 fd5f 	bl	80140e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003622:	231c      	movs	r3, #28
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	0018      	movs	r0, r3
 8003628:	2310      	movs	r3, #16
 800362a:	001a      	movs	r2, r3
 800362c:	2100      	movs	r1, #0
 800362e:	f010 fd57 	bl	80140e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003632:	003b      	movs	r3, r7
 8003634:	0018      	movs	r0, r3
 8003636:	231c      	movs	r3, #28
 8003638:	001a      	movs	r2, r3
 800363a:	2100      	movs	r1, #0
 800363c:	f010 fd50 	bl	80140e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8003640:	0021      	movs	r1, r4
 8003642:	187b      	adds	r3, r7, r1
 8003644:	2232      	movs	r2, #50	@ 0x32
 8003646:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003648:	187b      	adds	r3, r7, r1
 800364a:	2201      	movs	r2, #1
 800364c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800364e:	187b      	adds	r3, r7, r1
 8003650:	2201      	movs	r2, #1
 8003652:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8003654:	187b      	adds	r3, r7, r1
 8003656:	2201      	movs	r2, #1
 8003658:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800365a:	187b      	adds	r3, r7, r1
 800365c:	2210      	movs	r2, #16
 800365e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8003660:	187b      	adds	r3, r7, r1
 8003662:	2210      	movs	r2, #16
 8003664:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003666:	187b      	adds	r3, r7, r1
 8003668:	2202      	movs	r2, #2
 800366a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800366c:	187b      	adds	r3, r7, r1
 800366e:	2280      	movs	r2, #128	@ 0x80
 8003670:	0212      	lsls	r2, r2, #8
 8003672:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003674:	187b      	adds	r3, r7, r1
 8003676:	22e0      	movs	r2, #224	@ 0xe0
 8003678:	0352      	lsls	r2, r2, #13
 800367a:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 800367c:	187b      	adds	r3, r7, r1
 800367e:	2201      	movs	r2, #1
 8003680:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003682:	187b      	adds	r3, r7, r1
 8003684:	0018      	movs	r0, r3
 8003686:	f003 fdf5 	bl	8007274 <HAL_RCC_OscConfig>
 800368a:	1e03      	subs	r3, r0, #0
 800368c:	d001      	beq.n	8003692 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800368e:	f000 fb1b 	bl	8003cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003692:	211c      	movs	r1, #28
 8003694:	187b      	adds	r3, r7, r1
 8003696:	2207      	movs	r2, #7
 8003698:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800369a:	187b      	adds	r3, r7, r1
 800369c:	2202      	movs	r2, #2
 800369e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036a0:	187b      	adds	r3, r7, r1
 80036a2:	2200      	movs	r2, #0
 80036a4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80036a6:	187b      	adds	r3, r7, r1
 80036a8:	2200      	movs	r2, #0
 80036aa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80036ac:	187b      	adds	r3, r7, r1
 80036ae:	2101      	movs	r1, #1
 80036b0:	0018      	movs	r0, r3
 80036b2:	f004 f965 	bl	8007980 <HAL_RCC_ClockConfig>
 80036b6:	1e03      	subs	r3, r0, #0
 80036b8:	d001      	beq.n	80036be <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80036ba:	f000 fb05 	bl	8003cc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 80036be:	003b      	movs	r3, r7
 80036c0:	4a09      	ldr	r2, [pc, #36]	@ (80036e8 <SystemClock_Config+0xdc>)
 80036c2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80036c4:	003b      	movs	r3, r7
 80036c6:	2200      	movs	r2, #0
 80036c8:	609a      	str	r2, [r3, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80036ca:	003b      	movs	r3, r7
 80036cc:	2200      	movs	r2, #0
 80036ce:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036d0:	003b      	movs	r3, r7
 80036d2:	0018      	movs	r0, r3
 80036d4:	f004 fac0 	bl	8007c58 <HAL_RCCEx_PeriphCLKConfig>
 80036d8:	1e03      	subs	r3, r0, #0
 80036da:	d001      	beq.n	80036e0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80036dc:	f000 faf4 	bl	8003cc8 <Error_Handler>
  }
}
 80036e0:	46c0      	nop			@ (mov r8, r8)
 80036e2:	46bd      	mov	sp, r7
 80036e4:	b019      	add	sp, #100	@ 0x64
 80036e6:	bd90      	pop	{r4, r7, pc}
 80036e8:	00020001 	.word	0x00020001

080036ec <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80036f2:	1d3b      	adds	r3, r7, #4
 80036f4:	0018      	movs	r0, r3
 80036f6:	230c      	movs	r3, #12
 80036f8:	001a      	movs	r2, r3
 80036fa:	2100      	movs	r1, #0
 80036fc:	f010 fcf0 	bl	80140e0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003700:	4b26      	ldr	r3, [pc, #152]	@ (800379c <MX_ADC_Init+0xb0>)
 8003702:	4a27      	ldr	r2, [pc, #156]	@ (80037a0 <MX_ADC_Init+0xb4>)
 8003704:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003706:	4b25      	ldr	r3, [pc, #148]	@ (800379c <MX_ADC_Init+0xb0>)
 8003708:	2200      	movs	r2, #0
 800370a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800370c:	4b23      	ldr	r3, [pc, #140]	@ (800379c <MX_ADC_Init+0xb0>)
 800370e:	2200      	movs	r2, #0
 8003710:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003712:	4b22      	ldr	r3, [pc, #136]	@ (800379c <MX_ADC_Init+0xb0>)
 8003714:	2200      	movs	r2, #0
 8003716:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003718:	4b20      	ldr	r3, [pc, #128]	@ (800379c <MX_ADC_Init+0xb0>)
 800371a:	2201      	movs	r2, #1
 800371c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800371e:	4b1f      	ldr	r3, [pc, #124]	@ (800379c <MX_ADC_Init+0xb0>)
 8003720:	2208      	movs	r2, #8
 8003722:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003724:	4b1d      	ldr	r3, [pc, #116]	@ (800379c <MX_ADC_Init+0xb0>)
 8003726:	2200      	movs	r2, #0
 8003728:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800372a:	4b1c      	ldr	r3, [pc, #112]	@ (800379c <MX_ADC_Init+0xb0>)
 800372c:	2200      	movs	r2, #0
 800372e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003730:	4b1a      	ldr	r3, [pc, #104]	@ (800379c <MX_ADC_Init+0xb0>)
 8003732:	2200      	movs	r2, #0
 8003734:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003736:	4b19      	ldr	r3, [pc, #100]	@ (800379c <MX_ADC_Init+0xb0>)
 8003738:	2200      	movs	r2, #0
 800373a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800373c:	4b17      	ldr	r3, [pc, #92]	@ (800379c <MX_ADC_Init+0xb0>)
 800373e:	22c2      	movs	r2, #194	@ 0xc2
 8003740:	32ff      	adds	r2, #255	@ 0xff
 8003742:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003744:	4b15      	ldr	r3, [pc, #84]	@ (800379c <MX_ADC_Init+0xb0>)
 8003746:	2200      	movs	r2, #0
 8003748:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800374a:	4b14      	ldr	r3, [pc, #80]	@ (800379c <MX_ADC_Init+0xb0>)
 800374c:	2224      	movs	r2, #36	@ 0x24
 800374e:	2100      	movs	r1, #0
 8003750:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003752:	4b12      	ldr	r3, [pc, #72]	@ (800379c <MX_ADC_Init+0xb0>)
 8003754:	2201      	movs	r2, #1
 8003756:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003758:	4b10      	ldr	r3, [pc, #64]	@ (800379c <MX_ADC_Init+0xb0>)
 800375a:	0018      	movs	r0, r3
 800375c:	f000 fe7e 	bl	800445c <HAL_ADC_Init>
 8003760:	1e03      	subs	r3, r0, #0
 8003762:	d001      	beq.n	8003768 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8003764:	f000 fab0 	bl	8003cc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003768:	1d3b      	adds	r3, r7, #4
 800376a:	2208      	movs	r2, #8
 800376c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800376e:	1d3b      	adds	r3, r7, #4
 8003770:	2280      	movs	r2, #128	@ 0x80
 8003772:	0152      	lsls	r2, r2, #5
 8003774:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003776:	1d3b      	adds	r3, r7, #4
 8003778:	2280      	movs	r2, #128	@ 0x80
 800377a:	0552      	lsls	r2, r2, #21
 800377c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800377e:	1d3a      	adds	r2, r7, #4
 8003780:	4b06      	ldr	r3, [pc, #24]	@ (800379c <MX_ADC_Init+0xb0>)
 8003782:	0011      	movs	r1, r2
 8003784:	0018      	movs	r0, r3
 8003786:	f001 f8a1 	bl	80048cc <HAL_ADC_ConfigChannel>
 800378a:	1e03      	subs	r3, r0, #0
 800378c:	d001      	beq.n	8003792 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800378e:	f000 fa9b 	bl	8003cc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b004      	add	sp, #16
 8003798:	bd80      	pop	{r7, pc}
 800379a:	46c0      	nop			@ (mov r8, r8)
 800379c:	20000528 	.word	0x20000528
 80037a0:	40012400 	.word	0x40012400

080037a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80037a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003818 <MX_SPI1_Init+0x74>)
 80037aa:	4a1c      	ldr	r2, [pc, #112]	@ (800381c <MX_SPI1_Init+0x78>)
 80037ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80037ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003818 <MX_SPI1_Init+0x74>)
 80037b0:	2282      	movs	r2, #130	@ 0x82
 80037b2:	0052      	lsls	r2, r2, #1
 80037b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80037b6:	4b18      	ldr	r3, [pc, #96]	@ (8003818 <MX_SPI1_Init+0x74>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80037bc:	4b16      	ldr	r3, [pc, #88]	@ (8003818 <MX_SPI1_Init+0x74>)
 80037be:	22e0      	movs	r2, #224	@ 0xe0
 80037c0:	00d2      	lsls	r2, r2, #3
 80037c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037c4:	4b14      	ldr	r3, [pc, #80]	@ (8003818 <MX_SPI1_Init+0x74>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037ca:	4b13      	ldr	r3, [pc, #76]	@ (8003818 <MX_SPI1_Init+0x74>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80037d0:	4b11      	ldr	r3, [pc, #68]	@ (8003818 <MX_SPI1_Init+0x74>)
 80037d2:	2280      	movs	r2, #128	@ 0x80
 80037d4:	0092      	lsls	r2, r2, #2
 80037d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003818 <MX_SPI1_Init+0x74>)
 80037da:	2200      	movs	r2, #0
 80037dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037de:	4b0e      	ldr	r3, [pc, #56]	@ (8003818 <MX_SPI1_Init+0x74>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80037e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003818 <MX_SPI1_Init+0x74>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003818 <MX_SPI1_Init+0x74>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80037f0:	4b09      	ldr	r3, [pc, #36]	@ (8003818 <MX_SPI1_Init+0x74>)
 80037f2:	2207      	movs	r2, #7
 80037f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80037f6:	4b08      	ldr	r3, [pc, #32]	@ (8003818 <MX_SPI1_Init+0x74>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80037fc:	4b06      	ldr	r3, [pc, #24]	@ (8003818 <MX_SPI1_Init+0x74>)
 80037fe:	2208      	movs	r2, #8
 8003800:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003802:	4b05      	ldr	r3, [pc, #20]	@ (8003818 <MX_SPI1_Init+0x74>)
 8003804:	0018      	movs	r0, r3
 8003806:	f004 fb25 	bl	8007e54 <HAL_SPI_Init>
 800380a:	1e03      	subs	r3, r0, #0
 800380c:	d001      	beq.n	8003812 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800380e:	f000 fa5b 	bl	8003cc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003812:	46c0      	nop			@ (mov r8, r8)
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	20000568 	.word	0x20000568
 800381c:	40013000 	.word	0x40013000

08003820 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003824:	4b1b      	ldr	r3, [pc, #108]	@ (8003894 <MX_SPI2_Init+0x74>)
 8003826:	4a1c      	ldr	r2, [pc, #112]	@ (8003898 <MX_SPI2_Init+0x78>)
 8003828:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800382a:	4b1a      	ldr	r3, [pc, #104]	@ (8003894 <MX_SPI2_Init+0x74>)
 800382c:	2282      	movs	r2, #130	@ 0x82
 800382e:	0052      	lsls	r2, r2, #1
 8003830:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003832:	4b18      	ldr	r3, [pc, #96]	@ (8003894 <MX_SPI2_Init+0x74>)
 8003834:	2200      	movs	r2, #0
 8003836:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003838:	4b16      	ldr	r3, [pc, #88]	@ (8003894 <MX_SPI2_Init+0x74>)
 800383a:	22e0      	movs	r2, #224	@ 0xe0
 800383c:	00d2      	lsls	r2, r2, #3
 800383e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003840:	4b14      	ldr	r3, [pc, #80]	@ (8003894 <MX_SPI2_Init+0x74>)
 8003842:	2200      	movs	r2, #0
 8003844:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003846:	4b13      	ldr	r3, [pc, #76]	@ (8003894 <MX_SPI2_Init+0x74>)
 8003848:	2200      	movs	r2, #0
 800384a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800384c:	4b11      	ldr	r3, [pc, #68]	@ (8003894 <MX_SPI2_Init+0x74>)
 800384e:	2280      	movs	r2, #128	@ 0x80
 8003850:	0092      	lsls	r2, r2, #2
 8003852:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003854:	4b0f      	ldr	r3, [pc, #60]	@ (8003894 <MX_SPI2_Init+0x74>)
 8003856:	2200      	movs	r2, #0
 8003858:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800385a:	4b0e      	ldr	r3, [pc, #56]	@ (8003894 <MX_SPI2_Init+0x74>)
 800385c:	2200      	movs	r2, #0
 800385e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003860:	4b0c      	ldr	r3, [pc, #48]	@ (8003894 <MX_SPI2_Init+0x74>)
 8003862:	2200      	movs	r2, #0
 8003864:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003866:	4b0b      	ldr	r3, [pc, #44]	@ (8003894 <MX_SPI2_Init+0x74>)
 8003868:	2200      	movs	r2, #0
 800386a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800386c:	4b09      	ldr	r3, [pc, #36]	@ (8003894 <MX_SPI2_Init+0x74>)
 800386e:	2207      	movs	r2, #7
 8003870:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003872:	4b08      	ldr	r3, [pc, #32]	@ (8003894 <MX_SPI2_Init+0x74>)
 8003874:	2200      	movs	r2, #0
 8003876:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003878:	4b06      	ldr	r3, [pc, #24]	@ (8003894 <MX_SPI2_Init+0x74>)
 800387a:	2208      	movs	r2, #8
 800387c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800387e:	4b05      	ldr	r3, [pc, #20]	@ (8003894 <MX_SPI2_Init+0x74>)
 8003880:	0018      	movs	r0, r3
 8003882:	f004 fae7 	bl	8007e54 <HAL_SPI_Init>
 8003886:	1e03      	subs	r3, r0, #0
 8003888:	d001      	beq.n	800388e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800388a:	f000 fa1d 	bl	8003cc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800388e:	46c0      	nop			@ (mov r8, r8)
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	200005cc 	.word	0x200005cc
 8003898:	40003800 	.word	0x40003800

0800389c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038a2:	2308      	movs	r3, #8
 80038a4:	18fb      	adds	r3, r7, r3
 80038a6:	0018      	movs	r0, r3
 80038a8:	2310      	movs	r3, #16
 80038aa:	001a      	movs	r2, r3
 80038ac:	2100      	movs	r1, #0
 80038ae:	f010 fc17 	bl	80140e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038b2:	003b      	movs	r3, r7
 80038b4:	0018      	movs	r0, r3
 80038b6:	2308      	movs	r3, #8
 80038b8:	001a      	movs	r2, r3
 80038ba:	2100      	movs	r1, #0
 80038bc:	f010 fc10 	bl	80140e0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80038c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003940 <MX_TIM3_Init+0xa4>)
 80038c2:	4a20      	ldr	r2, [pc, #128]	@ (8003944 <MX_TIM3_Init+0xa8>)
 80038c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 80038c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003940 <MX_TIM3_Init+0xa4>)
 80038c8:	22f4      	movs	r2, #244	@ 0xf4
 80038ca:	32ff      	adds	r2, #255	@ 0xff
 80038cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003940 <MX_TIM3_Init+0xa4>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 360-1;
 80038d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003940 <MX_TIM3_Init+0xa4>)
 80038d6:	2268      	movs	r2, #104	@ 0x68
 80038d8:	32ff      	adds	r2, #255	@ 0xff
 80038da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038dc:	4b18      	ldr	r3, [pc, #96]	@ (8003940 <MX_TIM3_Init+0xa4>)
 80038de:	2200      	movs	r2, #0
 80038e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038e2:	4b17      	ldr	r3, [pc, #92]	@ (8003940 <MX_TIM3_Init+0xa4>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80038e8:	4b15      	ldr	r3, [pc, #84]	@ (8003940 <MX_TIM3_Init+0xa4>)
 80038ea:	0018      	movs	r0, r3
 80038ec:	f005 fb7e 	bl	8008fec <HAL_TIM_Base_Init>
 80038f0:	1e03      	subs	r3, r0, #0
 80038f2:	d001      	beq.n	80038f8 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80038f4:	f000 f9e8 	bl	8003cc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038f8:	2108      	movs	r1, #8
 80038fa:	187b      	adds	r3, r7, r1
 80038fc:	2280      	movs	r2, #128	@ 0x80
 80038fe:	0152      	lsls	r2, r2, #5
 8003900:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003902:	187a      	adds	r2, r7, r1
 8003904:	4b0e      	ldr	r3, [pc, #56]	@ (8003940 <MX_TIM3_Init+0xa4>)
 8003906:	0011      	movs	r1, r2
 8003908:	0018      	movs	r0, r3
 800390a:	f005 fcad 	bl	8009268 <HAL_TIM_ConfigClockSource>
 800390e:	1e03      	subs	r3, r0, #0
 8003910:	d001      	beq.n	8003916 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8003912:	f000 f9d9 	bl	8003cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003916:	003b      	movs	r3, r7
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800391c:	003b      	movs	r3, r7
 800391e:	2200      	movs	r2, #0
 8003920:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003922:	003a      	movs	r2, r7
 8003924:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <MX_TIM3_Init+0xa4>)
 8003926:	0011      	movs	r1, r2
 8003928:	0018      	movs	r0, r3
 800392a:	f005 fec1 	bl	80096b0 <HAL_TIMEx_MasterConfigSynchronization>
 800392e:	1e03      	subs	r3, r0, #0
 8003930:	d001      	beq.n	8003936 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003932:	f000 f9c9 	bl	8003cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	46bd      	mov	sp, r7
 800393a:	b006      	add	sp, #24
 800393c:	bd80      	pop	{r7, pc}
 800393e:	46c0      	nop			@ (mov r8, r8)
 8003940:	20000674 	.word	0x20000674
 8003944:	40000400 	.word	0x40000400

08003948 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800394c:	4b16      	ldr	r3, [pc, #88]	@ (80039a8 <MX_USART1_UART_Init+0x60>)
 800394e:	4a17      	ldr	r2, [pc, #92]	@ (80039ac <MX_USART1_UART_Init+0x64>)
 8003950:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003952:	4b15      	ldr	r3, [pc, #84]	@ (80039a8 <MX_USART1_UART_Init+0x60>)
 8003954:	2296      	movs	r2, #150	@ 0x96
 8003956:	0192      	lsls	r2, r2, #6
 8003958:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800395a:	4b13      	ldr	r3, [pc, #76]	@ (80039a8 <MX_USART1_UART_Init+0x60>)
 800395c:	2200      	movs	r2, #0
 800395e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003960:	4b11      	ldr	r3, [pc, #68]	@ (80039a8 <MX_USART1_UART_Init+0x60>)
 8003962:	2200      	movs	r2, #0
 8003964:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003966:	4b10      	ldr	r3, [pc, #64]	@ (80039a8 <MX_USART1_UART_Init+0x60>)
 8003968:	2200      	movs	r2, #0
 800396a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800396c:	4b0e      	ldr	r3, [pc, #56]	@ (80039a8 <MX_USART1_UART_Init+0x60>)
 800396e:	220c      	movs	r2, #12
 8003970:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003972:	4b0d      	ldr	r3, [pc, #52]	@ (80039a8 <MX_USART1_UART_Init+0x60>)
 8003974:	2200      	movs	r2, #0
 8003976:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003978:	4b0b      	ldr	r3, [pc, #44]	@ (80039a8 <MX_USART1_UART_Init+0x60>)
 800397a:	2200      	movs	r2, #0
 800397c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800397e:	4b0a      	ldr	r3, [pc, #40]	@ (80039a8 <MX_USART1_UART_Init+0x60>)
 8003980:	2200      	movs	r2, #0
 8003982:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003984:	4b08      	ldr	r3, [pc, #32]	@ (80039a8 <MX_USART1_UART_Init+0x60>)
 8003986:	2210      	movs	r2, #16
 8003988:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800398a:	4b07      	ldr	r3, [pc, #28]	@ (80039a8 <MX_USART1_UART_Init+0x60>)
 800398c:	2280      	movs	r2, #128	@ 0x80
 800398e:	0152      	lsls	r2, r2, #5
 8003990:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003992:	4b05      	ldr	r3, [pc, #20]	@ (80039a8 <MX_USART1_UART_Init+0x60>)
 8003994:	0018      	movs	r0, r3
 8003996:	f005 fef9 	bl	800978c <HAL_UART_Init>
 800399a:	1e03      	subs	r3, r0, #0
 800399c:	d001      	beq.n	80039a2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800399e:	f000 f993 	bl	8003cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80039a2:	46c0      	nop			@ (mov r8, r8)
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	200006bc 	.word	0x200006bc
 80039ac:	40013800 	.word	0x40013800

080039b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80039b6:	4b10      	ldr	r3, [pc, #64]	@ (80039f8 <MX_DMA_Init+0x48>)
 80039b8:	695a      	ldr	r2, [r3, #20]
 80039ba:	4b0f      	ldr	r3, [pc, #60]	@ (80039f8 <MX_DMA_Init+0x48>)
 80039bc:	2101      	movs	r1, #1
 80039be:	430a      	orrs	r2, r1
 80039c0:	615a      	str	r2, [r3, #20]
 80039c2:	4b0d      	ldr	r3, [pc, #52]	@ (80039f8 <MX_DMA_Init+0x48>)
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	2201      	movs	r2, #1
 80039c8:	4013      	ands	r3, r2
 80039ca:	607b      	str	r3, [r7, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80039ce:	2200      	movs	r2, #0
 80039d0:	2100      	movs	r1, #0
 80039d2:	200a      	movs	r0, #10
 80039d4:	f001 f9da 	bl	8004d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80039d8:	200a      	movs	r0, #10
 80039da:	f001 f9ec 	bl	8004db6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80039de:	2200      	movs	r2, #0
 80039e0:	2100      	movs	r1, #0
 80039e2:	200b      	movs	r0, #11
 80039e4:	f001 f9d2 	bl	8004d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80039e8:	200b      	movs	r0, #11
 80039ea:	f001 f9e4 	bl	8004db6 <HAL_NVIC_EnableIRQ>

}
 80039ee:	46c0      	nop			@ (mov r8, r8)
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b002      	add	sp, #8
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	46c0      	nop			@ (mov r8, r8)
 80039f8:	40021000 	.word	0x40021000

080039fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039fc:	b590      	push	{r4, r7, lr}
 80039fe:	b089      	sub	sp, #36	@ 0x24
 8003a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a02:	240c      	movs	r4, #12
 8003a04:	193b      	adds	r3, r7, r4
 8003a06:	0018      	movs	r0, r3
 8003a08:	2314      	movs	r3, #20
 8003a0a:	001a      	movs	r2, r3
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	f010 fb67 	bl	80140e0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a12:	4b74      	ldr	r3, [pc, #464]	@ (8003be4 <MX_GPIO_Init+0x1e8>)
 8003a14:	695a      	ldr	r2, [r3, #20]
 8003a16:	4b73      	ldr	r3, [pc, #460]	@ (8003be4 <MX_GPIO_Init+0x1e8>)
 8003a18:	2180      	movs	r1, #128	@ 0x80
 8003a1a:	03c9      	lsls	r1, r1, #15
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	615a      	str	r2, [r3, #20]
 8003a20:	4b70      	ldr	r3, [pc, #448]	@ (8003be4 <MX_GPIO_Init+0x1e8>)
 8003a22:	695a      	ldr	r2, [r3, #20]
 8003a24:	2380      	movs	r3, #128	@ 0x80
 8003a26:	03db      	lsls	r3, r3, #15
 8003a28:	4013      	ands	r3, r2
 8003a2a:	60bb      	str	r3, [r7, #8]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2e:	4b6d      	ldr	r3, [pc, #436]	@ (8003be4 <MX_GPIO_Init+0x1e8>)
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	4b6c      	ldr	r3, [pc, #432]	@ (8003be4 <MX_GPIO_Init+0x1e8>)
 8003a34:	2180      	movs	r1, #128	@ 0x80
 8003a36:	0289      	lsls	r1, r1, #10
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	615a      	str	r2, [r3, #20]
 8003a3c:	4b69      	ldr	r3, [pc, #420]	@ (8003be4 <MX_GPIO_Init+0x1e8>)
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	2380      	movs	r3, #128	@ 0x80
 8003a42:	029b      	lsls	r3, r3, #10
 8003a44:	4013      	ands	r3, r2
 8003a46:	607b      	str	r3, [r7, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a4a:	4b66      	ldr	r3, [pc, #408]	@ (8003be4 <MX_GPIO_Init+0x1e8>)
 8003a4c:	695a      	ldr	r2, [r3, #20]
 8003a4e:	4b65      	ldr	r3, [pc, #404]	@ (8003be4 <MX_GPIO_Init+0x1e8>)
 8003a50:	2180      	movs	r1, #128	@ 0x80
 8003a52:	02c9      	lsls	r1, r1, #11
 8003a54:	430a      	orrs	r2, r1
 8003a56:	615a      	str	r2, [r3, #20]
 8003a58:	4b62      	ldr	r3, [pc, #392]	@ (8003be4 <MX_GPIO_Init+0x1e8>)
 8003a5a:	695a      	ldr	r2, [r3, #20]
 8003a5c:	2380      	movs	r3, #128	@ 0x80
 8003a5e:	02db      	lsls	r3, r3, #11
 8003a60:	4013      	ands	r3, r2
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, E5_NRST_Pin|DW_NSS_Pin, GPIO_PIN_RESET);
 8003a66:	2390      	movs	r3, #144	@ 0x90
 8003a68:	05db      	lsls	r3, r3, #23
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2111      	movs	r1, #17
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f001 fd85 	bl	800557e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCREEN_EN_AUX_Pin|SCREEN_EN_Pin|SD_CS_Pin|WAKE_Pin, GPIO_PIN_RESET);
 8003a74:	495c      	ldr	r1, [pc, #368]	@ (8003be8 <MX_GPIO_Init+0x1ec>)
 8003a76:	4b5d      	ldr	r3, [pc, #372]	@ (8003bec <MX_GPIO_Init+0x1f0>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f001 fd7f 	bl	800557e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_CS_Pin|TFT_DC_Pin|TFT_RST_Pin, GPIO_PIN_SET);
 8003a80:	2398      	movs	r3, #152	@ 0x98
 8003a82:	015b      	lsls	r3, r3, #5
 8003a84:	4859      	ldr	r0, [pc, #356]	@ (8003bec <MX_GPIO_Init+0x1f0>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	0019      	movs	r1, r3
 8003a8a:	f001 fd78 	bl	800557e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : E5_NRST_Pin */
  GPIO_InitStruct.Pin = E5_NRST_Pin;
 8003a8e:	193b      	adds	r3, r7, r4
 8003a90:	2201      	movs	r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a94:	193b      	adds	r3, r7, r4
 8003a96:	2201      	movs	r2, #1
 8003a98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9a:	193b      	adds	r3, r7, r4
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa0:	193b      	adds	r3, r7, r4
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(E5_NRST_GPIO_Port, &GPIO_InitStruct);
 8003aa6:	193a      	adds	r2, r7, r4
 8003aa8:	2390      	movs	r3, #144	@ 0x90
 8003aaa:	05db      	lsls	r3, r3, #23
 8003aac:	0011      	movs	r1, r2
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f001 fbd0 	bl	8005254 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_RESET_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin;
 8003ab4:	193b      	adds	r3, r7, r4
 8003ab6:	2204      	movs	r2, #4
 8003ab8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003aba:	193b      	adds	r3, r7, r4
 8003abc:	2288      	movs	r2, #136	@ 0x88
 8003abe:	0352      	lsls	r2, r2, #13
 8003ac0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac2:	193b      	adds	r3, r7, r4
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8003ac8:	193a      	adds	r2, r7, r4
 8003aca:	2390      	movs	r3, #144	@ 0x90
 8003acc:	05db      	lsls	r3, r3, #23
 8003ace:	0011      	movs	r1, r2
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f001 fbbf 	bl	8005254 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 8003ad6:	193b      	adds	r3, r7, r4
 8003ad8:	2210      	movs	r2, #16
 8003ada:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003adc:	193b      	adds	r3, r7, r4
 8003ade:	2201      	movs	r2, #1
 8003ae0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae2:	193b      	adds	r3, r7, r4
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ae8:	193b      	adds	r3, r7, r4
 8003aea:	2203      	movs	r2, #3
 8003aec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 8003aee:	193a      	adds	r2, r7, r4
 8003af0:	2390      	movs	r3, #144	@ 0x90
 8003af2:	05db      	lsls	r3, r3, #23
 8003af4:	0011      	movs	r1, r2
 8003af6:	0018      	movs	r0, r3
 8003af8:	f001 fbac 	bl	8005254 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCREEN_EN_AUX_Pin SCREEN_EN_Pin WAKE_Pin */
  GPIO_InitStruct.Pin = SCREEN_EN_AUX_Pin|SCREEN_EN_Pin|WAKE_Pin;
 8003afc:	193b      	adds	r3, r7, r4
 8003afe:	2246      	movs	r2, #70	@ 0x46
 8003b00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b02:	193b      	adds	r3, r7, r4
 8003b04:	2201      	movs	r2, #1
 8003b06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	193b      	adds	r3, r7, r4
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b0e:	193b      	adds	r3, r7, r4
 8003b10:	2200      	movs	r2, #0
 8003b12:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b14:	193b      	adds	r3, r7, r4
 8003b16:	4a35      	ldr	r2, [pc, #212]	@ (8003bec <MX_GPIO_Init+0x1f0>)
 8003b18:	0019      	movs	r1, r3
 8003b1a:	0010      	movs	r0, r2
 8003b1c:	f001 fb9a 	bl	8005254 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin TFT_DC_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|TFT_DC_Pin;
 8003b20:	0021      	movs	r1, r4
 8003b22:	187b      	adds	r3, r7, r1
 8003b24:	2290      	movs	r2, #144	@ 0x90
 8003b26:	0112      	lsls	r2, r2, #4
 8003b28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b2a:	000c      	movs	r4, r1
 8003b2c:	193b      	adds	r3, r7, r4
 8003b2e:	2201      	movs	r2, #1
 8003b30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b32:	193b      	adds	r3, r7, r4
 8003b34:	2200      	movs	r2, #0
 8003b36:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b38:	193b      	adds	r3, r7, r4
 8003b3a:	2203      	movs	r2, #3
 8003b3c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b3e:	193b      	adds	r3, r7, r4
 8003b40:	4a2a      	ldr	r2, [pc, #168]	@ (8003bec <MX_GPIO_Init+0x1f0>)
 8003b42:	0019      	movs	r1, r3
 8003b44:	0010      	movs	r0, r2
 8003b46:	f001 fb85 	bl	8005254 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_CS_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_RST_Pin;
 8003b4a:	0021      	movs	r1, r4
 8003b4c:	187b      	adds	r3, r7, r1
 8003b4e:	2290      	movs	r2, #144	@ 0x90
 8003b50:	0152      	lsls	r2, r2, #5
 8003b52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b54:	000c      	movs	r4, r1
 8003b56:	193b      	adds	r3, r7, r4
 8003b58:	2201      	movs	r2, #1
 8003b5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b5c:	193b      	adds	r3, r7, r4
 8003b5e:	2201      	movs	r2, #1
 8003b60:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b62:	193b      	adds	r3, r7, r4
 8003b64:	2203      	movs	r2, #3
 8003b66:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b68:	193b      	adds	r3, r7, r4
 8003b6a:	4a20      	ldr	r2, [pc, #128]	@ (8003bec <MX_GPIO_Init+0x1f0>)
 8003b6c:	0019      	movs	r1, r3
 8003b6e:	0010      	movs	r0, r2
 8003b70:	f001 fb70 	bl	8005254 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_DISP_Pin */
  GPIO_InitStruct.Pin = BTN_DISP_Pin;
 8003b74:	0021      	movs	r1, r4
 8003b76:	187b      	adds	r3, r7, r1
 8003b78:	2280      	movs	r2, #128	@ 0x80
 8003b7a:	0192      	lsls	r2, r2, #6
 8003b7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b7e:	000c      	movs	r4, r1
 8003b80:	193b      	adds	r3, r7, r4
 8003b82:	2200      	movs	r2, #0
 8003b84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b86:	193b      	adds	r3, r7, r4
 8003b88:	2202      	movs	r2, #2
 8003b8a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_DISP_GPIO_Port, &GPIO_InitStruct);
 8003b8c:	193b      	adds	r3, r7, r4
 8003b8e:	4a17      	ldr	r2, [pc, #92]	@ (8003bec <MX_GPIO_Init+0x1f0>)
 8003b90:	0019      	movs	r1, r3
 8003b92:	0010      	movs	r0, r2
 8003b94:	f001 fb5e 	bl	8005254 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 8003b98:	0021      	movs	r1, r4
 8003b9a:	187b      	adds	r3, r7, r1
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ba0:	187b      	adds	r3, r7, r1
 8003ba2:	2288      	movs	r2, #136	@ 0x88
 8003ba4:	0352      	lsls	r2, r2, #13
 8003ba6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ba8:	187b      	adds	r3, r7, r1
 8003baa:	2202      	movs	r2, #2
 8003bac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 8003bae:	187b      	adds	r3, r7, r1
 8003bb0:	4a0e      	ldr	r2, [pc, #56]	@ (8003bec <MX_GPIO_Init+0x1f0>)
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	0010      	movs	r0, r2
 8003bb6:	f001 fb4d 	bl	8005254 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	2006      	movs	r0, #6
 8003bc0:	f001 f8e4 	bl	8004d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003bc4:	2006      	movs	r0, #6
 8003bc6:	f001 f8f6 	bl	8004db6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003bca:	2200      	movs	r2, #0
 8003bcc:	2100      	movs	r1, #0
 8003bce:	2007      	movs	r0, #7
 8003bd0:	f001 f8dc 	bl	8004d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003bd4:	2007      	movs	r0, #7
 8003bd6:	f001 f8ee 	bl	8004db6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003bda:	46c0      	nop			@ (mov r8, r8)
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	b009      	add	sp, #36	@ 0x24
 8003be0:	bd90      	pop	{r4, r7, pc}
 8003be2:	46c0      	nop			@ (mov r8, r8)
 8003be4:	40021000 	.word	0x40021000
 8003be8:	00000846 	.word	0x00000846
 8003bec:	48000400 	.word	0x48000400

08003bf0 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t offset)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	000a      	movs	r2, r1
 8003bfa:	1cbb      	adds	r3, r7, #2
 8003bfc:	801a      	strh	r2, [r3, #0]

  static uint16_t last_offset = 0;

  // Ignore if called twice (which will happen on every half buffer)
  if (offset != last_offset)
 8003bfe:	4b2d      	ldr	r3, [pc, #180]	@ (8003cb4 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	1cba      	adds	r2, r7, #2
 8003c04:	8812      	ldrh	r2, [r2, #0]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d050      	beq.n	8003cac <HAL_UARTEx_RxEventCallback+0xbc>
  {

    // If wrap around reset last_size
    if (offset < last_offset)
 8003c0a:	4b2a      	ldr	r3, [pc, #168]	@ (8003cb4 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	1cba      	adds	r2, r7, #2
 8003c10:	8812      	ldrh	r2, [r2, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d202      	bcs.n	8003c1c <HAL_UARTEx_RxEventCallback+0x2c>
      last_offset = 0;
 8003c16:	4b27      	ldr	r3, [pc, #156]	@ (8003cb4 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	801a      	strh	r2, [r3, #0]

    CDC_Transmit_FS(uart_rx_buf + last_offset, offset - last_offset);
 8003c1c:	4b25      	ldr	r3, [pc, #148]	@ (8003cb4 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	001a      	movs	r2, r3
 8003c22:	4b25      	ldr	r3, [pc, #148]	@ (8003cb8 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003c24:	18d0      	adds	r0, r2, r3
 8003c26:	1cbb      	adds	r3, r7, #2
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	4a22      	ldr	r2, [pc, #136]	@ (8003cb4 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003c2c:	8812      	ldrh	r2, [r2, #0]
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	0019      	movs	r1, r3
 8003c32:	f00d fdb3 	bl	801179c <CDC_Transmit_FS>

    static uint16_t response_offset = 0;

    for (uint16_t i = last_offset; i < offset; i++)
 8003c36:	230e      	movs	r3, #14
 8003c38:	18fb      	adds	r3, r7, r3
 8003c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8003cb4 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003c3c:	8812      	ldrh	r2, [r2, #0]
 8003c3e:	801a      	strh	r2, [r3, #0]
 8003c40:	e029      	b.n	8003c96 <HAL_UARTEx_RxEventCallback+0xa6>
    {
      if (uart_rx_buf[i] == '+')
 8003c42:	210e      	movs	r1, #14
 8003c44:	187b      	adds	r3, r7, r1
 8003c46:	881b      	ldrh	r3, [r3, #0]
 8003c48:	4a1b      	ldr	r2, [pc, #108]	@ (8003cb8 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003c4a:	5cd3      	ldrb	r3, [r2, r3]
 8003c4c:	2b2b      	cmp	r3, #43	@ 0x2b
 8003c4e:	d11c      	bne.n	8003c8a <HAL_UARTEx_RxEventCallback+0x9a>
      {
        response_offset = i;
 8003c50:	4b1a      	ldr	r3, [pc, #104]	@ (8003cbc <HAL_UARTEx_RxEventCallback+0xcc>)
 8003c52:	187a      	adds	r2, r7, r1
 8003c54:	8812      	ldrh	r2, [r2, #0]
 8003c56:	801a      	strh	r2, [r3, #0]
        if (offset < response_offset)
 8003c58:	4b18      	ldr	r3, [pc, #96]	@ (8003cbc <HAL_UARTEx_RxEventCallback+0xcc>)
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	1cba      	adds	r2, r7, #2
 8003c5e:	8812      	ldrh	r2, [r2, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d202      	bcs.n	8003c6a <HAL_UARTEx_RxEventCallback+0x7a>
          response_offset = 0;
 8003c64:	4b15      	ldr	r3, [pc, #84]	@ (8003cbc <HAL_UARTEx_RxEventCallback+0xcc>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	801a      	strh	r2, [r3, #0]
        if (memcmp(uart_rx_buf + response_offset, joined_msg, sizeof(joined_msg) - 1) == 0)
 8003c6a:	4b14      	ldr	r3, [pc, #80]	@ (8003cbc <HAL_UARTEx_RxEventCallback+0xcc>)
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	001a      	movs	r2, r3
 8003c70:	4b11      	ldr	r3, [pc, #68]	@ (8003cb8 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003c72:	18d3      	adds	r3, r2, r3
 8003c74:	4912      	ldr	r1, [pc, #72]	@ (8003cc0 <HAL_UARTEx_RxEventCallback+0xd0>)
 8003c76:	2215      	movs	r2, #21
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f010 fa23 	bl	80140c4 <memcmp>
 8003c7e:	1e03      	subs	r3, r0, #0
 8003c80:	d103      	bne.n	8003c8a <HAL_UARTEx_RxEventCallback+0x9a>
        {
          joined = 1;
 8003c82:	4b10      	ldr	r3, [pc, #64]	@ (8003cc4 <HAL_UARTEx_RxEventCallback+0xd4>)
 8003c84:	2201      	movs	r2, #1
 8003c86:	701a      	strb	r2, [r3, #0]
          break;
 8003c88:	e00c      	b.n	8003ca4 <HAL_UARTEx_RxEventCallback+0xb4>
    for (uint16_t i = last_offset; i < offset; i++)
 8003c8a:	210e      	movs	r1, #14
 8003c8c:	187b      	adds	r3, r7, r1
 8003c8e:	881a      	ldrh	r2, [r3, #0]
 8003c90:	187b      	adds	r3, r7, r1
 8003c92:	3201      	adds	r2, #1
 8003c94:	801a      	strh	r2, [r3, #0]
 8003c96:	230e      	movs	r3, #14
 8003c98:	18fa      	adds	r2, r7, r3
 8003c9a:	1cbb      	adds	r3, r7, #2
 8003c9c:	8812      	ldrh	r2, [r2, #0]
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d3ce      	bcc.n	8003c42 <HAL_UARTEx_RxEventCallback+0x52>
        }
      }
    }

    last_offset = offset;
 8003ca4:	4b03      	ldr	r3, [pc, #12]	@ (8003cb4 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003ca6:	1cba      	adds	r2, r7, #2
 8003ca8:	8812      	ldrh	r2, [r2, #0]
 8003caa:	801a      	strh	r2, [r3, #0]
  }
}
 8003cac:	46c0      	nop			@ (mov r8, r8)
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	b004      	add	sp, #16
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	20000bbe 	.word	0x20000bbe
 8003cb8:	200007bc 	.word	0x200007bc
 8003cbc:	20000bc0 	.word	0x20000bc0
 8003cc0:	20000058 	.word	0x20000058
 8003cc4:	20000bbc 	.word	0x20000bbc

08003cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ccc:	b672      	cpsid	i
}
 8003cce:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cd0:	46c0      	nop			@ (mov r8, r8)
 8003cd2:	e7fd      	b.n	8003cd0 <Error_Handler+0x8>

08003cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cda:	4b13      	ldr	r3, [pc, #76]	@ (8003d28 <HAL_MspInit+0x54>)
 8003cdc:	699a      	ldr	r2, [r3, #24]
 8003cde:	4b12      	ldr	r3, [pc, #72]	@ (8003d28 <HAL_MspInit+0x54>)
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	619a      	str	r2, [r3, #24]
 8003ce6:	4b10      	ldr	r3, [pc, #64]	@ (8003d28 <HAL_MspInit+0x54>)
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	2201      	movs	r2, #1
 8003cec:	4013      	ands	r3, r2
 8003cee:	607b      	str	r3, [r7, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8003d28 <HAL_MspInit+0x54>)
 8003cf4:	69da      	ldr	r2, [r3, #28]
 8003cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8003d28 <HAL_MspInit+0x54>)
 8003cf8:	2180      	movs	r1, #128	@ 0x80
 8003cfa:	0549      	lsls	r1, r1, #21
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	61da      	str	r2, [r3, #28]
 8003d00:	4b09      	ldr	r3, [pc, #36]	@ (8003d28 <HAL_MspInit+0x54>)
 8003d02:	69da      	ldr	r2, [r3, #28]
 8003d04:	2380      	movs	r3, #128	@ 0x80
 8003d06:	055b      	lsls	r3, r3, #21
 8003d08:	4013      	ands	r3, r2
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2100      	movs	r1, #0
 8003d12:	2004      	movs	r0, #4
 8003d14:	f001 f83a 	bl	8004d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8003d18:	2004      	movs	r0, #4
 8003d1a:	f001 f84c 	bl	8004db6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d1e:	46c0      	nop			@ (mov r8, r8)
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b002      	add	sp, #8
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	46c0      	nop			@ (mov r8, r8)
 8003d28:	40021000 	.word	0x40021000

08003d2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d2c:	b590      	push	{r4, r7, lr}
 8003d2e:	b08b      	sub	sp, #44	@ 0x2c
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d34:	2414      	movs	r4, #20
 8003d36:	193b      	adds	r3, r7, r4
 8003d38:	0018      	movs	r0, r3
 8003d3a:	2314      	movs	r3, #20
 8003d3c:	001a      	movs	r2, r3
 8003d3e:	2100      	movs	r1, #0
 8003d40:	f010 f9ce 	bl	80140e0 <memset>
  if(hadc->Instance==ADC1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a18      	ldr	r2, [pc, #96]	@ (8003dac <HAL_ADC_MspInit+0x80>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d12a      	bne.n	8003da4 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d4e:	4b18      	ldr	r3, [pc, #96]	@ (8003db0 <HAL_ADC_MspInit+0x84>)
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	4b17      	ldr	r3, [pc, #92]	@ (8003db0 <HAL_ADC_MspInit+0x84>)
 8003d54:	2180      	movs	r1, #128	@ 0x80
 8003d56:	0089      	lsls	r1, r1, #2
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	619a      	str	r2, [r3, #24]
 8003d5c:	4b14      	ldr	r3, [pc, #80]	@ (8003db0 <HAL_ADC_MspInit+0x84>)
 8003d5e:	699a      	ldr	r2, [r3, #24]
 8003d60:	2380      	movs	r3, #128	@ 0x80
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4013      	ands	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
 8003d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d6a:	4b11      	ldr	r3, [pc, #68]	@ (8003db0 <HAL_ADC_MspInit+0x84>)
 8003d6c:	695a      	ldr	r2, [r3, #20]
 8003d6e:	4b10      	ldr	r3, [pc, #64]	@ (8003db0 <HAL_ADC_MspInit+0x84>)
 8003d70:	2180      	movs	r1, #128	@ 0x80
 8003d72:	02c9      	lsls	r1, r1, #11
 8003d74:	430a      	orrs	r2, r1
 8003d76:	615a      	str	r2, [r3, #20]
 8003d78:	4b0d      	ldr	r3, [pc, #52]	@ (8003db0 <HAL_ADC_MspInit+0x84>)
 8003d7a:	695a      	ldr	r2, [r3, #20]
 8003d7c:	2380      	movs	r3, #128	@ 0x80
 8003d7e:	02db      	lsls	r3, r3, #11
 8003d80:	4013      	ands	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = VBATT_ADC_Pin;
 8003d86:	193b      	adds	r3, r7, r4
 8003d88:	2201      	movs	r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d8c:	193b      	adds	r3, r7, r4
 8003d8e:	2203      	movs	r2, #3
 8003d90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d92:	193b      	adds	r3, r7, r4
 8003d94:	2200      	movs	r2, #0
 8003d96:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBATT_ADC_GPIO_Port, &GPIO_InitStruct);
 8003d98:	193b      	adds	r3, r7, r4
 8003d9a:	4a06      	ldr	r2, [pc, #24]	@ (8003db4 <HAL_ADC_MspInit+0x88>)
 8003d9c:	0019      	movs	r1, r3
 8003d9e:	0010      	movs	r0, r2
 8003da0:	f001 fa58 	bl	8005254 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003da4:	46c0      	nop			@ (mov r8, r8)
 8003da6:	46bd      	mov	sp, r7
 8003da8:	b00b      	add	sp, #44	@ 0x2c
 8003daa:	bd90      	pop	{r4, r7, pc}
 8003dac:	40012400 	.word	0x40012400
 8003db0:	40021000 	.word	0x40021000
 8003db4:	48000400 	.word	0x48000400

08003db8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003db8:	b590      	push	{r4, r7, lr}
 8003dba:	b08d      	sub	sp, #52	@ 0x34
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc0:	241c      	movs	r4, #28
 8003dc2:	193b      	adds	r3, r7, r4
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	2314      	movs	r3, #20
 8003dc8:	001a      	movs	r2, r3
 8003dca:	2100      	movs	r1, #0
 8003dcc:	f010 f988 	bl	80140e0 <memset>
  if(hspi->Instance==SPI1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a58      	ldr	r2, [pc, #352]	@ (8003f38 <HAL_SPI_MspInit+0x180>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d133      	bne.n	8003e42 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003dda:	4b58      	ldr	r3, [pc, #352]	@ (8003f3c <HAL_SPI_MspInit+0x184>)
 8003ddc:	699a      	ldr	r2, [r3, #24]
 8003dde:	4b57      	ldr	r3, [pc, #348]	@ (8003f3c <HAL_SPI_MspInit+0x184>)
 8003de0:	2180      	movs	r1, #128	@ 0x80
 8003de2:	0149      	lsls	r1, r1, #5
 8003de4:	430a      	orrs	r2, r1
 8003de6:	619a      	str	r2, [r3, #24]
 8003de8:	4b54      	ldr	r3, [pc, #336]	@ (8003f3c <HAL_SPI_MspInit+0x184>)
 8003dea:	699a      	ldr	r2, [r3, #24]
 8003dec:	2380      	movs	r3, #128	@ 0x80
 8003dee:	015b      	lsls	r3, r3, #5
 8003df0:	4013      	ands	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
 8003df4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003df6:	4b51      	ldr	r3, [pc, #324]	@ (8003f3c <HAL_SPI_MspInit+0x184>)
 8003df8:	695a      	ldr	r2, [r3, #20]
 8003dfa:	4b50      	ldr	r3, [pc, #320]	@ (8003f3c <HAL_SPI_MspInit+0x184>)
 8003dfc:	2180      	movs	r1, #128	@ 0x80
 8003dfe:	0289      	lsls	r1, r1, #10
 8003e00:	430a      	orrs	r2, r1
 8003e02:	615a      	str	r2, [r3, #20]
 8003e04:	4b4d      	ldr	r3, [pc, #308]	@ (8003f3c <HAL_SPI_MspInit+0x184>)
 8003e06:	695a      	ldr	r2, [r3, #20]
 8003e08:	2380      	movs	r3, #128	@ 0x80
 8003e0a:	029b      	lsls	r3, r3, #10
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DW_SCK_Pin|DW_MISO_Pin|DW_MOSI_Pin;
 8003e12:	0021      	movs	r1, r4
 8003e14:	187b      	adds	r3, r7, r1
 8003e16:	22e0      	movs	r2, #224	@ 0xe0
 8003e18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e1a:	187b      	adds	r3, r7, r1
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e20:	187b      	adds	r3, r7, r1
 8003e22:	2200      	movs	r2, #0
 8003e24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e26:	187b      	adds	r3, r7, r1
 8003e28:	2203      	movs	r2, #3
 8003e2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003e2c:	187b      	adds	r3, r7, r1
 8003e2e:	2200      	movs	r2, #0
 8003e30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e32:	187a      	adds	r2, r7, r1
 8003e34:	2390      	movs	r3, #144	@ 0x90
 8003e36:	05db      	lsls	r3, r3, #23
 8003e38:	0011      	movs	r1, r2
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f001 fa0a 	bl	8005254 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003e40:	e075      	b.n	8003f2e <HAL_SPI_MspInit+0x176>
  else if(hspi->Instance==SPI2)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a3e      	ldr	r2, [pc, #248]	@ (8003f40 <HAL_SPI_MspInit+0x188>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d170      	bne.n	8003f2e <HAL_SPI_MspInit+0x176>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003e4c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f3c <HAL_SPI_MspInit+0x184>)
 8003e4e:	69da      	ldr	r2, [r3, #28]
 8003e50:	4b3a      	ldr	r3, [pc, #232]	@ (8003f3c <HAL_SPI_MspInit+0x184>)
 8003e52:	2180      	movs	r1, #128	@ 0x80
 8003e54:	01c9      	lsls	r1, r1, #7
 8003e56:	430a      	orrs	r2, r1
 8003e58:	61da      	str	r2, [r3, #28]
 8003e5a:	4b38      	ldr	r3, [pc, #224]	@ (8003f3c <HAL_SPI_MspInit+0x184>)
 8003e5c:	69da      	ldr	r2, [r3, #28]
 8003e5e:	2380      	movs	r3, #128	@ 0x80
 8003e60:	01db      	lsls	r3, r3, #7
 8003e62:	4013      	ands	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e68:	4b34      	ldr	r3, [pc, #208]	@ (8003f3c <HAL_SPI_MspInit+0x184>)
 8003e6a:	695a      	ldr	r2, [r3, #20]
 8003e6c:	4b33      	ldr	r3, [pc, #204]	@ (8003f3c <HAL_SPI_MspInit+0x184>)
 8003e6e:	2180      	movs	r1, #128	@ 0x80
 8003e70:	02c9      	lsls	r1, r1, #11
 8003e72:	430a      	orrs	r2, r1
 8003e74:	615a      	str	r2, [r3, #20]
 8003e76:	4b31      	ldr	r3, [pc, #196]	@ (8003f3c <HAL_SPI_MspInit+0x184>)
 8003e78:	695a      	ldr	r2, [r3, #20]
 8003e7a:	2380      	movs	r3, #128	@ 0x80
 8003e7c:	02db      	lsls	r3, r3, #11
 8003e7e:	4013      	ands	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e84:	211c      	movs	r1, #28
 8003e86:	187b      	adds	r3, r7, r1
 8003e88:	2280      	movs	r2, #128	@ 0x80
 8003e8a:	00d2      	lsls	r2, r2, #3
 8003e8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8e:	000c      	movs	r4, r1
 8003e90:	193b      	adds	r3, r7, r4
 8003e92:	2202      	movs	r2, #2
 8003e94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e96:	193b      	adds	r3, r7, r4
 8003e98:	2200      	movs	r2, #0
 8003e9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e9c:	193b      	adds	r3, r7, r4
 8003e9e:	2203      	movs	r2, #3
 8003ea0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003ea2:	193b      	adds	r3, r7, r4
 8003ea4:	2205      	movs	r2, #5
 8003ea6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ea8:	193b      	adds	r3, r7, r4
 8003eaa:	4a26      	ldr	r2, [pc, #152]	@ (8003f44 <HAL_SPI_MspInit+0x18c>)
 8003eac:	0019      	movs	r1, r3
 8003eae:	0010      	movs	r0, r2
 8003eb0:	f001 f9d0 	bl	8005254 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003eb4:	0021      	movs	r1, r4
 8003eb6:	187b      	adds	r3, r7, r1
 8003eb8:	22c0      	movs	r2, #192	@ 0xc0
 8003eba:	0212      	lsls	r2, r2, #8
 8003ebc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ebe:	187b      	adds	r3, r7, r1
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec4:	187b      	adds	r3, r7, r1
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003eca:	187b      	adds	r3, r7, r1
 8003ecc:	2203      	movs	r2, #3
 8003ece:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003ed0:	187b      	adds	r3, r7, r1
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ed6:	187b      	adds	r3, r7, r1
 8003ed8:	4a1a      	ldr	r2, [pc, #104]	@ (8003f44 <HAL_SPI_MspInit+0x18c>)
 8003eda:	0019      	movs	r1, r3
 8003edc:	0010      	movs	r0, r2
 8003ede:	f001 f9b9 	bl	8005254 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8003ee2:	4b19      	ldr	r3, [pc, #100]	@ (8003f48 <HAL_SPI_MspInit+0x190>)
 8003ee4:	4a19      	ldr	r2, [pc, #100]	@ (8003f4c <HAL_SPI_MspInit+0x194>)
 8003ee6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ee8:	4b17      	ldr	r3, [pc, #92]	@ (8003f48 <HAL_SPI_MspInit+0x190>)
 8003eea:	2210      	movs	r2, #16
 8003eec:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003eee:	4b16      	ldr	r3, [pc, #88]	@ (8003f48 <HAL_SPI_MspInit+0x190>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ef4:	4b14      	ldr	r3, [pc, #80]	@ (8003f48 <HAL_SPI_MspInit+0x190>)
 8003ef6:	2280      	movs	r2, #128	@ 0x80
 8003ef8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003efa:	4b13      	ldr	r3, [pc, #76]	@ (8003f48 <HAL_SPI_MspInit+0x190>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f00:	4b11      	ldr	r3, [pc, #68]	@ (8003f48 <HAL_SPI_MspInit+0x190>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003f06:	4b10      	ldr	r3, [pc, #64]	@ (8003f48 <HAL_SPI_MspInit+0x190>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8003f48 <HAL_SPI_MspInit+0x190>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003f12:	4b0d      	ldr	r3, [pc, #52]	@ (8003f48 <HAL_SPI_MspInit+0x190>)
 8003f14:	0018      	movs	r0, r3
 8003f16:	f000 ff7b 	bl	8004e10 <HAL_DMA_Init>
 8003f1a:	1e03      	subs	r3, r0, #0
 8003f1c:	d001      	beq.n	8003f22 <HAL_SPI_MspInit+0x16a>
      Error_Handler();
 8003f1e:	f7ff fed3 	bl	8003cc8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a08      	ldr	r2, [pc, #32]	@ (8003f48 <HAL_SPI_MspInit+0x190>)
 8003f26:	655a      	str	r2, [r3, #84]	@ 0x54
 8003f28:	4b07      	ldr	r3, [pc, #28]	@ (8003f48 <HAL_SPI_MspInit+0x190>)
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003f2e:	46c0      	nop			@ (mov r8, r8)
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b00d      	add	sp, #52	@ 0x34
 8003f34:	bd90      	pop	{r4, r7, pc}
 8003f36:	46c0      	nop			@ (mov r8, r8)
 8003f38:	40013000 	.word	0x40013000
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	40003800 	.word	0x40003800
 8003f44:	48000400 	.word	0x48000400
 8003f48:	20000630 	.word	0x20000630
 8003f4c:	40020058 	.word	0x40020058

08003f50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8003f94 <HAL_TIM_Base_MspInit+0x44>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d113      	bne.n	8003f8a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f62:	4b0d      	ldr	r3, [pc, #52]	@ (8003f98 <HAL_TIM_Base_MspInit+0x48>)
 8003f64:	69da      	ldr	r2, [r3, #28]
 8003f66:	4b0c      	ldr	r3, [pc, #48]	@ (8003f98 <HAL_TIM_Base_MspInit+0x48>)
 8003f68:	2102      	movs	r1, #2
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	61da      	str	r2, [r3, #28]
 8003f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f98 <HAL_TIM_Base_MspInit+0x48>)
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	2202      	movs	r2, #2
 8003f74:	4013      	ands	r3, r2
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	2010      	movs	r0, #16
 8003f80:	f000 ff04 	bl	8004d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003f84:	2010      	movs	r0, #16
 8003f86:	f000 ff16 	bl	8004db6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003f8a:	46c0      	nop			@ (mov r8, r8)
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	b004      	add	sp, #16
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	46c0      	nop			@ (mov r8, r8)
 8003f94:	40000400 	.word	0x40000400
 8003f98:	40021000 	.word	0x40021000

08003f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f9c:	b590      	push	{r4, r7, lr}
 8003f9e:	b08b      	sub	sp, #44	@ 0x2c
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa4:	2414      	movs	r4, #20
 8003fa6:	193b      	adds	r3, r7, r4
 8003fa8:	0018      	movs	r0, r3
 8003faa:	2314      	movs	r3, #20
 8003fac:	001a      	movs	r2, r3
 8003fae:	2100      	movs	r1, #0
 8003fb0:	f010 f896 	bl	80140e0 <memset>
  if(huart->Instance==USART1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a34      	ldr	r2, [pc, #208]	@ (800408c <HAL_UART_MspInit+0xf0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d161      	bne.n	8004082 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fbe:	4b34      	ldr	r3, [pc, #208]	@ (8004090 <HAL_UART_MspInit+0xf4>)
 8003fc0:	699a      	ldr	r2, [r3, #24]
 8003fc2:	4b33      	ldr	r3, [pc, #204]	@ (8004090 <HAL_UART_MspInit+0xf4>)
 8003fc4:	2180      	movs	r1, #128	@ 0x80
 8003fc6:	01c9      	lsls	r1, r1, #7
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	619a      	str	r2, [r3, #24]
 8003fcc:	4b30      	ldr	r3, [pc, #192]	@ (8004090 <HAL_UART_MspInit+0xf4>)
 8003fce:	699a      	ldr	r2, [r3, #24]
 8003fd0:	2380      	movs	r3, #128	@ 0x80
 8003fd2:	01db      	lsls	r3, r3, #7
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
 8003fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fda:	4b2d      	ldr	r3, [pc, #180]	@ (8004090 <HAL_UART_MspInit+0xf4>)
 8003fdc:	695a      	ldr	r2, [r3, #20]
 8003fde:	4b2c      	ldr	r3, [pc, #176]	@ (8004090 <HAL_UART_MspInit+0xf4>)
 8003fe0:	2180      	movs	r1, #128	@ 0x80
 8003fe2:	0289      	lsls	r1, r1, #10
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	615a      	str	r2, [r3, #20]
 8003fe8:	4b29      	ldr	r3, [pc, #164]	@ (8004090 <HAL_UART_MspInit+0xf4>)
 8003fea:	695a      	ldr	r2, [r3, #20]
 8003fec:	2380      	movs	r3, #128	@ 0x80
 8003fee:	029b      	lsls	r3, r3, #10
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003ff6:	193b      	adds	r3, r7, r4
 8003ff8:	22c0      	movs	r2, #192	@ 0xc0
 8003ffa:	00d2      	lsls	r2, r2, #3
 8003ffc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ffe:	0021      	movs	r1, r4
 8004000:	187b      	adds	r3, r7, r1
 8004002:	2202      	movs	r2, #2
 8004004:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004006:	187b      	adds	r3, r7, r1
 8004008:	2200      	movs	r2, #0
 800400a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800400c:	187b      	adds	r3, r7, r1
 800400e:	2203      	movs	r2, #3
 8004010:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004012:	187b      	adds	r3, r7, r1
 8004014:	2201      	movs	r2, #1
 8004016:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004018:	187a      	adds	r2, r7, r1
 800401a:	2390      	movs	r3, #144	@ 0x90
 800401c:	05db      	lsls	r3, r3, #23
 800401e:	0011      	movs	r1, r2
 8004020:	0018      	movs	r0, r3
 8004022:	f001 f917 	bl	8005254 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8004026:	4b1b      	ldr	r3, [pc, #108]	@ (8004094 <HAL_UART_MspInit+0xf8>)
 8004028:	4a1b      	ldr	r2, [pc, #108]	@ (8004098 <HAL_UART_MspInit+0xfc>)
 800402a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800402c:	4b19      	ldr	r3, [pc, #100]	@ (8004094 <HAL_UART_MspInit+0xf8>)
 800402e:	2200      	movs	r2, #0
 8004030:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004032:	4b18      	ldr	r3, [pc, #96]	@ (8004094 <HAL_UART_MspInit+0xf8>)
 8004034:	2200      	movs	r2, #0
 8004036:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004038:	4b16      	ldr	r3, [pc, #88]	@ (8004094 <HAL_UART_MspInit+0xf8>)
 800403a:	2280      	movs	r2, #128	@ 0x80
 800403c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800403e:	4b15      	ldr	r3, [pc, #84]	@ (8004094 <HAL_UART_MspInit+0xf8>)
 8004040:	2200      	movs	r2, #0
 8004042:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004044:	4b13      	ldr	r3, [pc, #76]	@ (8004094 <HAL_UART_MspInit+0xf8>)
 8004046:	2200      	movs	r2, #0
 8004048:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800404a:	4b12      	ldr	r3, [pc, #72]	@ (8004094 <HAL_UART_MspInit+0xf8>)
 800404c:	2220      	movs	r2, #32
 800404e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004050:	4b10      	ldr	r3, [pc, #64]	@ (8004094 <HAL_UART_MspInit+0xf8>)
 8004052:	2200      	movs	r2, #0
 8004054:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004056:	4b0f      	ldr	r3, [pc, #60]	@ (8004094 <HAL_UART_MspInit+0xf8>)
 8004058:	0018      	movs	r0, r3
 800405a:	f000 fed9 	bl	8004e10 <HAL_DMA_Init>
 800405e:	1e03      	subs	r3, r0, #0
 8004060:	d001      	beq.n	8004066 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004062:	f7ff fe31 	bl	8003cc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a0a      	ldr	r2, [pc, #40]	@ (8004094 <HAL_UART_MspInit+0xf8>)
 800406a:	675a      	str	r2, [r3, #116]	@ 0x74
 800406c:	4b09      	ldr	r3, [pc, #36]	@ (8004094 <HAL_UART_MspInit+0xf8>)
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004072:	2200      	movs	r2, #0
 8004074:	2100      	movs	r1, #0
 8004076:	201b      	movs	r0, #27
 8004078:	f000 fe88 	bl	8004d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800407c:	201b      	movs	r0, #27
 800407e:	f000 fe9a 	bl	8004db6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8004082:	46c0      	nop			@ (mov r8, r8)
 8004084:	46bd      	mov	sp, r7
 8004086:	b00b      	add	sp, #44	@ 0x2c
 8004088:	bd90      	pop	{r4, r7, pc}
 800408a:	46c0      	nop			@ (mov r8, r8)
 800408c:	40013800 	.word	0x40013800
 8004090:	40021000 	.word	0x40021000
 8004094:	20000774 	.word	0x20000774
 8004098:	40020030 	.word	0x40020030

0800409c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80040a0:	46c0      	nop			@ (mov r8, r8)
 80040a2:	e7fd      	b.n	80040a0 <NMI_Handler+0x4>

080040a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040a8:	46c0      	nop			@ (mov r8, r8)
 80040aa:	e7fd      	b.n	80040a8 <HardFault_Handler+0x4>

080040ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80040b0:	46c0      	nop			@ (mov r8, r8)
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040ba:	46c0      	nop			@ (mov r8, r8)
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040c4:	f000 f98a 	bl	80043dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040c8:	46c0      	nop			@ (mov r8, r8)
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupts.
  */
void RCC_CRS_IRQHandler(void)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 80040d2:	46c0      	nop			@ (mov r8, r8)
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_RESET_Pin);
 80040dc:	2004      	movs	r0, #4
 80040de:	f001 fa6b 	bl	80055b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80040e2:	46c0      	nop			@ (mov r8, r8)
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQn_Pin);
 80040ec:	2020      	movs	r0, #32
 80040ee:	f001 fa63 	bl	80055b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80040f2:	46c0      	nop			@ (mov r8, r8)
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80040fc:	4b03      	ldr	r3, [pc, #12]	@ (800410c <DMA1_Channel2_3_IRQHandler+0x14>)
 80040fe:	0018      	movs	r0, r3
 8004100:	f000 ffb1 	bl	8005066 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004104:	46c0      	nop			@ (mov r8, r8)
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	46c0      	nop			@ (mov r8, r8)
 800410c:	20000774 	.word	0x20000774

08004110 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004114:	4b03      	ldr	r3, [pc, #12]	@ (8004124 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8004116:	0018      	movs	r0, r3
 8004118:	f000 ffa5 	bl	8005066 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800411c:	46c0      	nop			@ (mov r8, r8)
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	46c0      	nop			@ (mov r8, r8)
 8004124:	20000630 	.word	0x20000630

08004128 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800412c:	4b03      	ldr	r3, [pc, #12]	@ (800413c <TIM3_IRQHandler+0x14>)
 800412e:	0018      	movs	r0, r3
 8004130:	f004 ffac 	bl	800908c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004134:	46c0      	nop			@ (mov r8, r8)
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	46c0      	nop			@ (mov r8, r8)
 800413c:	20000674 	.word	0x20000674

08004140 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  //   __HAL_UART_CLEAR_IDLEFLAG(&huart1);
  //   UART1_IdleCallback();
  // }

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004144:	4b03      	ldr	r3, [pc, #12]	@ (8004154 <USART1_IRQHandler+0x14>)
 8004146:	0018      	movs	r0, r3
 8004148:	f005 fbf6 	bl	8009938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800414c:	46c0      	nop			@ (mov r8, r8)
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	46c0      	nop			@ (mov r8, r8)
 8004154:	200006bc 	.word	0x200006bc

08004158 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800415c:	4b03      	ldr	r3, [pc, #12]	@ (800416c <USB_IRQHandler+0x14>)
 800415e:	0018      	movs	r0, r3
 8004160:	f001 fb60 	bl	8005824 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8004164:	46c0      	nop			@ (mov r8, r8)
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	46c0      	nop			@ (mov r8, r8)
 800416c:	20001924 	.word	0x20001924

08004170 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  return 1;
 8004174:	2301      	movs	r3, #1
}
 8004176:	0018      	movs	r0, r3
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <_kill>:

int _kill(int pid, int sig)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004186:	f010 f805 	bl	8014194 <__errno>
 800418a:	0003      	movs	r3, r0
 800418c:	2216      	movs	r2, #22
 800418e:	601a      	str	r2, [r3, #0]
  return -1;
 8004190:	2301      	movs	r3, #1
 8004192:	425b      	negs	r3, r3
}
 8004194:	0018      	movs	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	b002      	add	sp, #8
 800419a:	bd80      	pop	{r7, pc}

0800419c <_exit>:

void _exit (int status)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80041a4:	2301      	movs	r3, #1
 80041a6:	425a      	negs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	0011      	movs	r1, r2
 80041ac:	0018      	movs	r0, r3
 80041ae:	f7ff ffe5 	bl	800417c <_kill>
  while (1) {}    /* Make sure we hang here */
 80041b2:	46c0      	nop			@ (mov r8, r8)
 80041b4:	e7fd      	b.n	80041b2 <_exit+0x16>

080041b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b086      	sub	sp, #24
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	e00a      	b.n	80041de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80041c8:	e000      	b.n	80041cc <_read+0x16>
 80041ca:	bf00      	nop
 80041cc:	0001      	movs	r1, r0
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	60ba      	str	r2, [r7, #8]
 80041d4:	b2ca      	uxtb	r2, r1
 80041d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	3301      	adds	r3, #1
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	dbf0      	blt.n	80041c8 <_read+0x12>
  }

  return len;
 80041e6:	687b      	ldr	r3, [r7, #4]
}
 80041e8:	0018      	movs	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b006      	add	sp, #24
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041fc:	2300      	movs	r3, #0
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	e009      	b.n	8004216 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	60ba      	str	r2, [r7, #8]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	0018      	movs	r0, r3
 800420c:	e000      	b.n	8004210 <_write+0x20>
 800420e:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	3301      	adds	r3, #1
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	429a      	cmp	r2, r3
 800421c:	dbf1      	blt.n	8004202 <_write+0x12>
  }
  return len;
 800421e:	687b      	ldr	r3, [r7, #4]
}
 8004220:	0018      	movs	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	b006      	add	sp, #24
 8004226:	bd80      	pop	{r7, pc}

08004228 <_close>:

int _close(int file)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004230:	2301      	movs	r3, #1
 8004232:	425b      	negs	r3, r3
}
 8004234:	0018      	movs	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	b002      	add	sp, #8
 800423a:	bd80      	pop	{r7, pc}

0800423c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2280      	movs	r2, #128	@ 0x80
 800424a:	0192      	lsls	r2, r2, #6
 800424c:	605a      	str	r2, [r3, #4]
  return 0;
 800424e:	2300      	movs	r3, #0
}
 8004250:	0018      	movs	r0, r3
 8004252:	46bd      	mov	sp, r7
 8004254:	b002      	add	sp, #8
 8004256:	bd80      	pop	{r7, pc}

08004258 <_isatty>:

int _isatty(int file)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004260:	2301      	movs	r3, #1
}
 8004262:	0018      	movs	r0, r3
 8004264:	46bd      	mov	sp, r7
 8004266:	b002      	add	sp, #8
 8004268:	bd80      	pop	{r7, pc}

0800426a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b084      	sub	sp, #16
 800426e:	af00      	add	r7, sp, #0
 8004270:	60f8      	str	r0, [r7, #12]
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004276:	2300      	movs	r3, #0
}
 8004278:	0018      	movs	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	b004      	add	sp, #16
 800427e:	bd80      	pop	{r7, pc}

08004280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004288:	4a14      	ldr	r2, [pc, #80]	@ (80042dc <_sbrk+0x5c>)
 800428a:	4b15      	ldr	r3, [pc, #84]	@ (80042e0 <_sbrk+0x60>)
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004294:	4b13      	ldr	r3, [pc, #76]	@ (80042e4 <_sbrk+0x64>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d102      	bne.n	80042a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800429c:	4b11      	ldr	r3, [pc, #68]	@ (80042e4 <_sbrk+0x64>)
 800429e:	4a12      	ldr	r2, [pc, #72]	@ (80042e8 <_sbrk+0x68>)
 80042a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042a2:	4b10      	ldr	r3, [pc, #64]	@ (80042e4 <_sbrk+0x64>)
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	18d3      	adds	r3, r2, r3
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d207      	bcs.n	80042c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042b0:	f00f ff70 	bl	8014194 <__errno>
 80042b4:	0003      	movs	r3, r0
 80042b6:	220c      	movs	r2, #12
 80042b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042ba:	2301      	movs	r3, #1
 80042bc:	425b      	negs	r3, r3
 80042be:	e009      	b.n	80042d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042c0:	4b08      	ldr	r3, [pc, #32]	@ (80042e4 <_sbrk+0x64>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042c6:	4b07      	ldr	r3, [pc, #28]	@ (80042e4 <_sbrk+0x64>)
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	18d2      	adds	r2, r2, r3
 80042ce:	4b05      	ldr	r3, [pc, #20]	@ (80042e4 <_sbrk+0x64>)
 80042d0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80042d2:	68fb      	ldr	r3, [r7, #12]
}
 80042d4:	0018      	movs	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	b006      	add	sp, #24
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	20004000 	.word	0x20004000
 80042e0:	00000400 	.word	0x00000400
 80042e4:	20000bc4 	.word	0x20000bc4
 80042e8:	20001fa8 	.word	0x20001fa8

080042ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80042f0:	46c0      	nop			@ (mov r8, r8)
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
	...

080042f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80042f8:	480d      	ldr	r0, [pc, #52]	@ (8004330 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80042fa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80042fc:	f7ff fff6 	bl	80042ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004300:	480c      	ldr	r0, [pc, #48]	@ (8004334 <LoopForever+0x6>)
  ldr r1, =_edata
 8004302:	490d      	ldr	r1, [pc, #52]	@ (8004338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004304:	4a0d      	ldr	r2, [pc, #52]	@ (800433c <LoopForever+0xe>)
  movs r3, #0
 8004306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004308:	e002      	b.n	8004310 <LoopCopyDataInit>

0800430a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800430a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800430c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800430e:	3304      	adds	r3, #4

08004310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004314:	d3f9      	bcc.n	800430a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004316:	4a0a      	ldr	r2, [pc, #40]	@ (8004340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004318:	4c0a      	ldr	r4, [pc, #40]	@ (8004344 <LoopForever+0x16>)
  movs r3, #0
 800431a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800431c:	e001      	b.n	8004322 <LoopFillZerobss>

0800431e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800431e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004320:	3204      	adds	r2, #4

08004322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004324:	d3fb      	bcc.n	800431e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004326:	f00f ff3b 	bl	80141a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800432a:	f7ff f8d5 	bl	80034d8 <main>

0800432e <LoopForever>:

LoopForever:
    b LoopForever
 800432e:	e7fe      	b.n	800432e <LoopForever>
  ldr   r0, =_estack
 8004330:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8004334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004338:	200003d8 	.word	0x200003d8
  ldr r2, =_sidata
 800433c:	0801a2e8 	.word	0x0801a2e8
  ldr r2, =_sbss
 8004340:	200003d8 	.word	0x200003d8
  ldr r4, =_ebss
 8004344:	20001fa8 	.word	0x20001fa8

08004348 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004348:	e7fe      	b.n	8004348 <ADC1_COMP_IRQHandler>
	...

0800434c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004350:	4b07      	ldr	r3, [pc, #28]	@ (8004370 <HAL_Init+0x24>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	4b06      	ldr	r3, [pc, #24]	@ (8004370 <HAL_Init+0x24>)
 8004356:	2110      	movs	r1, #16
 8004358:	430a      	orrs	r2, r1
 800435a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800435c:	2003      	movs	r0, #3
 800435e:	f000 f809 	bl	8004374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004362:	f7ff fcb7 	bl	8003cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	0018      	movs	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	46c0      	nop			@ (mov r8, r8)
 8004370:	40022000 	.word	0x40022000

08004374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004374:	b590      	push	{r4, r7, lr}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800437c:	4b14      	ldr	r3, [pc, #80]	@ (80043d0 <HAL_InitTick+0x5c>)
 800437e:	681c      	ldr	r4, [r3, #0]
 8004380:	4b14      	ldr	r3, [pc, #80]	@ (80043d4 <HAL_InitTick+0x60>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	0019      	movs	r1, r3
 8004386:	23fa      	movs	r3, #250	@ 0xfa
 8004388:	0098      	lsls	r0, r3, #2
 800438a:	f7fb fed9 	bl	8000140 <__udivsi3>
 800438e:	0003      	movs	r3, r0
 8004390:	0019      	movs	r1, r3
 8004392:	0020      	movs	r0, r4
 8004394:	f7fb fed4 	bl	8000140 <__udivsi3>
 8004398:	0003      	movs	r3, r0
 800439a:	0018      	movs	r0, r3
 800439c:	f000 fd2b 	bl	8004df6 <HAL_SYSTICK_Config>
 80043a0:	1e03      	subs	r3, r0, #0
 80043a2:	d001      	beq.n	80043a8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e00f      	b.n	80043c8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d80b      	bhi.n	80043c6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	2301      	movs	r3, #1
 80043b2:	425b      	negs	r3, r3
 80043b4:	2200      	movs	r2, #0
 80043b6:	0018      	movs	r0, r3
 80043b8:	f000 fce8 	bl	8004d8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043bc:	4b06      	ldr	r3, [pc, #24]	@ (80043d8 <HAL_InitTick+0x64>)
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
 80043c4:	e000      	b.n	80043c8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
}
 80043c8:	0018      	movs	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	b003      	add	sp, #12
 80043ce:	bd90      	pop	{r4, r7, pc}
 80043d0:	20000070 	.word	0x20000070
 80043d4:	20000078 	.word	0x20000078
 80043d8:	20000074 	.word	0x20000074

080043dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043e0:	4b05      	ldr	r3, [pc, #20]	@ (80043f8 <HAL_IncTick+0x1c>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	001a      	movs	r2, r3
 80043e6:	4b05      	ldr	r3, [pc, #20]	@ (80043fc <HAL_IncTick+0x20>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	18d2      	adds	r2, r2, r3
 80043ec:	4b03      	ldr	r3, [pc, #12]	@ (80043fc <HAL_IncTick+0x20>)
 80043ee:	601a      	str	r2, [r3, #0]
}
 80043f0:	46c0      	nop			@ (mov r8, r8)
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	46c0      	nop			@ (mov r8, r8)
 80043f8:	20000078 	.word	0x20000078
 80043fc:	20000bc8 	.word	0x20000bc8

08004400 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  return uwTick;
 8004404:	4b02      	ldr	r3, [pc, #8]	@ (8004410 <HAL_GetTick+0x10>)
 8004406:	681b      	ldr	r3, [r3, #0]
}
 8004408:	0018      	movs	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	46c0      	nop			@ (mov r8, r8)
 8004410:	20000bc8 	.word	0x20000bc8

08004414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800441c:	f7ff fff0 	bl	8004400 <HAL_GetTick>
 8004420:	0003      	movs	r3, r0
 8004422:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3301      	adds	r3, #1
 800442c:	d005      	beq.n	800443a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800442e:	4b0a      	ldr	r3, [pc, #40]	@ (8004458 <HAL_Delay+0x44>)
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	001a      	movs	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	189b      	adds	r3, r3, r2
 8004438:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800443a:	46c0      	nop			@ (mov r8, r8)
 800443c:	f7ff ffe0 	bl	8004400 <HAL_GetTick>
 8004440:	0002      	movs	r2, r0
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	429a      	cmp	r2, r3
 800444a:	d8f7      	bhi.n	800443c <HAL_Delay+0x28>
  {
  }
}
 800444c:	46c0      	nop			@ (mov r8, r8)
 800444e:	46c0      	nop			@ (mov r8, r8)
 8004450:	46bd      	mov	sp, r7
 8004452:	b004      	add	sp, #16
 8004454:	bd80      	pop	{r7, pc}
 8004456:	46c0      	nop			@ (mov r8, r8)
 8004458:	20000078 	.word	0x20000078

0800445c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004464:	230f      	movs	r3, #15
 8004466:	18fb      	adds	r3, r7, r3
 8004468:	2200      	movs	r2, #0
 800446a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e125      	b.n	80046c6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10a      	bne.n	8004498 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2234      	movs	r2, #52	@ 0x34
 800448c:	2100      	movs	r1, #0
 800448e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	0018      	movs	r0, r3
 8004494:	f7ff fc4a 	bl	8003d2c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449c:	2210      	movs	r2, #16
 800449e:	4013      	ands	r3, r2
 80044a0:	d000      	beq.n	80044a4 <HAL_ADC_Init+0x48>
 80044a2:	e103      	b.n	80046ac <HAL_ADC_Init+0x250>
 80044a4:	230f      	movs	r3, #15
 80044a6:	18fb      	adds	r3, r7, r3
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d000      	beq.n	80044b0 <HAL_ADC_Init+0x54>
 80044ae:	e0fd      	b.n	80046ac <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2204      	movs	r2, #4
 80044b8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80044ba:	d000      	beq.n	80044be <HAL_ADC_Init+0x62>
 80044bc:	e0f6      	b.n	80046ac <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c2:	4a83      	ldr	r2, [pc, #524]	@ (80046d0 <HAL_ADC_Init+0x274>)
 80044c4:	4013      	ands	r3, r2
 80044c6:	2202      	movs	r2, #2
 80044c8:	431a      	orrs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2203      	movs	r2, #3
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d112      	bne.n	8004502 <HAL_ADC_Init+0xa6>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2201      	movs	r2, #1
 80044e4:	4013      	ands	r3, r2
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d009      	beq.n	80044fe <HAL_ADC_Init+0xa2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	2380      	movs	r3, #128	@ 0x80
 80044f2:	021b      	lsls	r3, r3, #8
 80044f4:	401a      	ands	r2, r3
 80044f6:	2380      	movs	r3, #128	@ 0x80
 80044f8:	021b      	lsls	r3, r3, #8
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d101      	bne.n	8004502 <HAL_ADC_Init+0xa6>
 80044fe:	2301      	movs	r3, #1
 8004500:	e000      	b.n	8004504 <HAL_ADC_Init+0xa8>
 8004502:	2300      	movs	r3, #0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d116      	bne.n	8004536 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	2218      	movs	r2, #24
 8004510:	4393      	bics	r3, r2
 8004512:	0019      	movs	r1, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	0899      	lsrs	r1, r3, #2
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4964      	ldr	r1, [pc, #400]	@ (80046d4 <HAL_ADC_Init+0x278>)
 8004542:	400a      	ands	r2, r1
 8004544:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	7e1b      	ldrb	r3, [r3, #24]
 800454a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	7e5b      	ldrb	r3, [r3, #25]
 8004550:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004552:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	7e9b      	ldrb	r3, [r3, #26]
 8004558:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800455a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004560:	2b01      	cmp	r3, #1
 8004562:	d002      	beq.n	800456a <HAL_ADC_Init+0x10e>
 8004564:	2380      	movs	r3, #128	@ 0x80
 8004566:	015b      	lsls	r3, r3, #5
 8004568:	e000      	b.n	800456c <HAL_ADC_Init+0x110>
 800456a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800456c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004572:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	2b02      	cmp	r3, #2
 800457a:	d101      	bne.n	8004580 <HAL_ADC_Init+0x124>
 800457c:	2304      	movs	r3, #4
 800457e:	e000      	b.n	8004582 <HAL_ADC_Init+0x126>
 8004580:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8004582:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2124      	movs	r1, #36	@ 0x24
 8004588:	5c5b      	ldrb	r3, [r3, r1]
 800458a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800458c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	4313      	orrs	r3, r2
 8004592:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	7edb      	ldrb	r3, [r3, #27]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d115      	bne.n	80045c8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	7e9b      	ldrb	r3, [r3, #26]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d105      	bne.n	80045b0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2280      	movs	r2, #128	@ 0x80
 80045a8:	0252      	lsls	r2, r2, #9
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60bb      	str	r3, [r7, #8]
 80045ae:	e00b      	b.n	80045c8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b4:	2220      	movs	r2, #32
 80045b6:	431a      	orrs	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c0:	2201      	movs	r2, #1
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	69da      	ldr	r2, [r3, #28]
 80045cc:	23c2      	movs	r3, #194	@ 0xc2
 80045ce:	33ff      	adds	r3, #255	@ 0xff
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d007      	beq.n	80045e4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80045dc:	4313      	orrs	r3, r2
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68d9      	ldr	r1, [r3, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f8:	2380      	movs	r3, #128	@ 0x80
 80045fa:	055b      	lsls	r3, r3, #21
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d01b      	beq.n	8004638 <HAL_ADC_Init+0x1dc>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004604:	2b01      	cmp	r3, #1
 8004606:	d017      	beq.n	8004638 <HAL_ADC_Init+0x1dc>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460c:	2b02      	cmp	r3, #2
 800460e:	d013      	beq.n	8004638 <HAL_ADC_Init+0x1dc>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004614:	2b03      	cmp	r3, #3
 8004616:	d00f      	beq.n	8004638 <HAL_ADC_Init+0x1dc>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461c:	2b04      	cmp	r3, #4
 800461e:	d00b      	beq.n	8004638 <HAL_ADC_Init+0x1dc>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004624:	2b05      	cmp	r3, #5
 8004626:	d007      	beq.n	8004638 <HAL_ADC_Init+0x1dc>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462c:	2b06      	cmp	r3, #6
 800462e:	d003      	beq.n	8004638 <HAL_ADC_Init+0x1dc>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004634:	2b07      	cmp	r3, #7
 8004636:	d112      	bne.n	800465e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695a      	ldr	r2, [r3, #20]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2107      	movs	r1, #7
 8004644:	438a      	bics	r2, r1
 8004646:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6959      	ldr	r1, [r3, #20]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004652:	2207      	movs	r2, #7
 8004654:	401a      	ands	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	4a1c      	ldr	r2, [pc, #112]	@ (80046d8 <HAL_ADC_Init+0x27c>)
 8004666:	4013      	ands	r3, r2
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	429a      	cmp	r2, r3
 800466c:	d10b      	bne.n	8004686 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004678:	2203      	movs	r2, #3
 800467a:	4393      	bics	r3, r2
 800467c:	2201      	movs	r2, #1
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004684:	e01c      	b.n	80046c0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800468a:	2212      	movs	r2, #18
 800468c:	4393      	bics	r3, r2
 800468e:	2210      	movs	r2, #16
 8004690:	431a      	orrs	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469a:	2201      	movs	r2, #1
 800469c:	431a      	orrs	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80046a2:	230f      	movs	r3, #15
 80046a4:	18fb      	adds	r3, r7, r3
 80046a6:	2201      	movs	r2, #1
 80046a8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80046aa:	e009      	b.n	80046c0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b0:	2210      	movs	r2, #16
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80046b8:	230f      	movs	r3, #15
 80046ba:	18fb      	adds	r3, r7, r3
 80046bc:	2201      	movs	r2, #1
 80046be:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80046c0:	230f      	movs	r3, #15
 80046c2:	18fb      	adds	r3, r7, r3
 80046c4:	781b      	ldrb	r3, [r3, #0]
}
 80046c6:	0018      	movs	r0, r3
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b004      	add	sp, #16
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	46c0      	nop			@ (mov r8, r8)
 80046d0:	fffffefd 	.word	0xfffffefd
 80046d4:	fffe0219 	.word	0xfffe0219
 80046d8:	833fffe7 	.word	0x833fffe7

080046dc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80046dc:	b590      	push	{r4, r7, lr}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046e4:	230f      	movs	r3, #15
 80046e6:	18fb      	adds	r3, r7, r3
 80046e8:	2200      	movs	r2, #0
 80046ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2204      	movs	r2, #4
 80046f4:	4013      	ands	r3, r2
 80046f6:	d138      	bne.n	800476a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2234      	movs	r2, #52	@ 0x34
 80046fc:	5c9b      	ldrb	r3, [r3, r2]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d101      	bne.n	8004706 <HAL_ADC_Start+0x2a>
 8004702:	2302      	movs	r3, #2
 8004704:	e038      	b.n	8004778 <HAL_ADC_Start+0x9c>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2234      	movs	r2, #52	@ 0x34
 800470a:	2101      	movs	r1, #1
 800470c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	7e5b      	ldrb	r3, [r3, #25]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d007      	beq.n	8004726 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8004716:	230f      	movs	r3, #15
 8004718:	18fc      	adds	r4, r7, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	0018      	movs	r0, r3
 800471e:	f000 f9e3 	bl	8004ae8 <ADC_Enable>
 8004722:	0003      	movs	r3, r0
 8004724:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004726:	230f      	movs	r3, #15
 8004728:	18fb      	adds	r3, r7, r3
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d120      	bne.n	8004772 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004734:	4a12      	ldr	r2, [pc, #72]	@ (8004780 <HAL_ADC_Start+0xa4>)
 8004736:	4013      	ands	r3, r2
 8004738:	2280      	movs	r2, #128	@ 0x80
 800473a:	0052      	lsls	r2, r2, #1
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2234      	movs	r2, #52	@ 0x34
 800474c:	2100      	movs	r1, #0
 800474e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	221c      	movs	r2, #28
 8004756:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2104      	movs	r1, #4
 8004764:	430a      	orrs	r2, r1
 8004766:	609a      	str	r2, [r3, #8]
 8004768:	e003      	b.n	8004772 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800476a:	230f      	movs	r3, #15
 800476c:	18fb      	adds	r3, r7, r3
 800476e:	2202      	movs	r2, #2
 8004770:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004772:	230f      	movs	r3, #15
 8004774:	18fb      	adds	r3, r7, r3
 8004776:	781b      	ldrb	r3, [r3, #0]
}
 8004778:	0018      	movs	r0, r3
 800477a:	46bd      	mov	sp, r7
 800477c:	b005      	add	sp, #20
 800477e:	bd90      	pop	{r4, r7, pc}
 8004780:	fffff0fe 	.word	0xfffff0fe

08004784 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	2b08      	cmp	r3, #8
 8004794:	d102      	bne.n	800479c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8004796:	2308      	movs	r3, #8
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	e014      	b.n	80047c6 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	2201      	movs	r2, #1
 80047a4:	4013      	ands	r3, r2
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d10b      	bne.n	80047c2 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ae:	2220      	movs	r2, #32
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2234      	movs	r2, #52	@ 0x34
 80047ba:	2100      	movs	r1, #0
 80047bc:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e071      	b.n	80048a6 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80047c2:	230c      	movs	r3, #12
 80047c4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80047c6:	f7ff fe1b 	bl	8004400 <HAL_GetTick>
 80047ca:	0003      	movs	r3, r0
 80047cc:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80047ce:	e01f      	b.n	8004810 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	3301      	adds	r3, #1
 80047d4:	d01c      	beq.n	8004810 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d007      	beq.n	80047ec <HAL_ADC_PollForConversion+0x68>
 80047dc:	f7ff fe10 	bl	8004400 <HAL_GetTick>
 80047e0:	0002      	movs	r2, r0
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d211      	bcs.n	8004810 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	4013      	ands	r3, r2
 80047f6:	d10b      	bne.n	8004810 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047fc:	2204      	movs	r2, #4
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2234      	movs	r2, #52	@ 0x34
 8004808:	2100      	movs	r1, #0
 800480a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e04a      	b.n	80048a6 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4013      	ands	r3, r2
 800481a:	d0d9      	beq.n	80047d0 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004820:	2280      	movs	r2, #128	@ 0x80
 8004822:	0092      	lsls	r2, r2, #2
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	23c0      	movs	r3, #192	@ 0xc0
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	4013      	ands	r3, r2
 8004836:	d12d      	bne.n	8004894 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800483c:	2b00      	cmp	r3, #0
 800483e:	d129      	bne.n	8004894 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2208      	movs	r2, #8
 8004848:	4013      	ands	r3, r2
 800484a:	2b08      	cmp	r3, #8
 800484c:	d122      	bne.n	8004894 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	2204      	movs	r2, #4
 8004856:	4013      	ands	r3, r2
 8004858:	d110      	bne.n	800487c <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	210c      	movs	r1, #12
 8004866:	438a      	bics	r2, r1
 8004868:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486e:	4a10      	ldr	r2, [pc, #64]	@ (80048b0 <HAL_ADC_PollForConversion+0x12c>)
 8004870:	4013      	ands	r3, r2
 8004872:	2201      	movs	r2, #1
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	639a      	str	r2, [r3, #56]	@ 0x38
 800487a:	e00b      	b.n	8004894 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004880:	2220      	movs	r2, #32
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800488c:	2201      	movs	r2, #1
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	7e1b      	ldrb	r3, [r3, #24]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d103      	bne.n	80048a4 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	220c      	movs	r2, #12
 80048a2:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	0018      	movs	r0, r3
 80048a8:	46bd      	mov	sp, r7
 80048aa:	b004      	add	sp, #16
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	46c0      	nop			@ (mov r8, r8)
 80048b0:	fffffefe 	.word	0xfffffefe

080048b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80048c2:	0018      	movs	r0, r3
 80048c4:	46bd      	mov	sp, r7
 80048c6:	b002      	add	sp, #8
 80048c8:	bd80      	pop	{r7, pc}
	...

080048cc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048d6:	230f      	movs	r3, #15
 80048d8:	18fb      	adds	r3, r7, r3
 80048da:	2200      	movs	r2, #0
 80048dc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80048de:	2300      	movs	r3, #0
 80048e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048e6:	2380      	movs	r3, #128	@ 0x80
 80048e8:	055b      	lsls	r3, r3, #21
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d011      	beq.n	8004912 <HAL_ADC_ConfigChannel+0x46>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d00d      	beq.n	8004912 <HAL_ADC_ConfigChannel+0x46>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d009      	beq.n	8004912 <HAL_ADC_ConfigChannel+0x46>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004902:	2b03      	cmp	r3, #3
 8004904:	d005      	beq.n	8004912 <HAL_ADC_ConfigChannel+0x46>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490a:	2b04      	cmp	r3, #4
 800490c:	d001      	beq.n	8004912 <HAL_ADC_ConfigChannel+0x46>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2234      	movs	r2, #52	@ 0x34
 8004916:	5c9b      	ldrb	r3, [r3, r2]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <HAL_ADC_ConfigChannel+0x54>
 800491c:	2302      	movs	r3, #2
 800491e:	e0d0      	b.n	8004ac2 <HAL_ADC_ConfigChannel+0x1f6>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2234      	movs	r2, #52	@ 0x34
 8004924:	2101      	movs	r1, #1
 8004926:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	2204      	movs	r2, #4
 8004930:	4013      	ands	r3, r2
 8004932:	d000      	beq.n	8004936 <HAL_ADC_ConfigChannel+0x6a>
 8004934:	e0b4      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	4a64      	ldr	r2, [pc, #400]	@ (8004acc <HAL_ADC_ConfigChannel+0x200>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d100      	bne.n	8004942 <HAL_ADC_ConfigChannel+0x76>
 8004940:	e082      	b.n	8004a48 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2201      	movs	r2, #1
 800494e:	409a      	lsls	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800495c:	2380      	movs	r3, #128	@ 0x80
 800495e:	055b      	lsls	r3, r3, #21
 8004960:	429a      	cmp	r2, r3
 8004962:	d037      	beq.n	80049d4 <HAL_ADC_ConfigChannel+0x108>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004968:	2b01      	cmp	r3, #1
 800496a:	d033      	beq.n	80049d4 <HAL_ADC_ConfigChannel+0x108>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004970:	2b02      	cmp	r3, #2
 8004972:	d02f      	beq.n	80049d4 <HAL_ADC_ConfigChannel+0x108>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004978:	2b03      	cmp	r3, #3
 800497a:	d02b      	beq.n	80049d4 <HAL_ADC_ConfigChannel+0x108>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004980:	2b04      	cmp	r3, #4
 8004982:	d027      	beq.n	80049d4 <HAL_ADC_ConfigChannel+0x108>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004988:	2b05      	cmp	r3, #5
 800498a:	d023      	beq.n	80049d4 <HAL_ADC_ConfigChannel+0x108>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004990:	2b06      	cmp	r3, #6
 8004992:	d01f      	beq.n	80049d4 <HAL_ADC_ConfigChannel+0x108>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004998:	2b07      	cmp	r3, #7
 800499a:	d01b      	beq.n	80049d4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	2107      	movs	r1, #7
 80049a8:	400b      	ands	r3, r1
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d012      	beq.n	80049d4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695a      	ldr	r2, [r3, #20]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2107      	movs	r1, #7
 80049ba:	438a      	bics	r2, r1
 80049bc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6959      	ldr	r1, [r3, #20]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	2207      	movs	r2, #7
 80049ca:	401a      	ands	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b10      	cmp	r3, #16
 80049da:	d007      	beq.n	80049ec <HAL_ADC_ConfigChannel+0x120>
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b11      	cmp	r3, #17
 80049e2:	d003      	beq.n	80049ec <HAL_ADC_ConfigChannel+0x120>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b12      	cmp	r3, #18
 80049ea:	d163      	bne.n	8004ab4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80049ec:	4b38      	ldr	r3, [pc, #224]	@ (8004ad0 <HAL_ADC_ConfigChannel+0x204>)
 80049ee:	6819      	ldr	r1, [r3, #0]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b10      	cmp	r3, #16
 80049f6:	d009      	beq.n	8004a0c <HAL_ADC_ConfigChannel+0x140>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b11      	cmp	r3, #17
 80049fe:	d102      	bne.n	8004a06 <HAL_ADC_ConfigChannel+0x13a>
 8004a00:	2380      	movs	r3, #128	@ 0x80
 8004a02:	03db      	lsls	r3, r3, #15
 8004a04:	e004      	b.n	8004a10 <HAL_ADC_ConfigChannel+0x144>
 8004a06:	2380      	movs	r3, #128	@ 0x80
 8004a08:	045b      	lsls	r3, r3, #17
 8004a0a:	e001      	b.n	8004a10 <HAL_ADC_ConfigChannel+0x144>
 8004a0c:	2380      	movs	r3, #128	@ 0x80
 8004a0e:	041b      	lsls	r3, r3, #16
 8004a10:	4a2f      	ldr	r2, [pc, #188]	@ (8004ad0 <HAL_ADC_ConfigChannel+0x204>)
 8004a12:	430b      	orrs	r3, r1
 8004a14:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b10      	cmp	r3, #16
 8004a1c:	d14a      	bne.n	8004ab4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004a1e:	4b2d      	ldr	r3, [pc, #180]	@ (8004ad4 <HAL_ADC_ConfigChannel+0x208>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	492d      	ldr	r1, [pc, #180]	@ (8004ad8 <HAL_ADC_ConfigChannel+0x20c>)
 8004a24:	0018      	movs	r0, r3
 8004a26:	f7fb fb8b 	bl	8000140 <__udivsi3>
 8004a2a:	0003      	movs	r3, r0
 8004a2c:	001a      	movs	r2, r3
 8004a2e:	0013      	movs	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	189b      	adds	r3, r3, r2
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004a38:	e002      	b.n	8004a40 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1f9      	bne.n	8004a3a <HAL_ADC_ConfigChannel+0x16e>
 8004a46:	e035      	b.n	8004ab4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2101      	movs	r1, #1
 8004a54:	4099      	lsls	r1, r3
 8004a56:	000b      	movs	r3, r1
 8004a58:	43d9      	mvns	r1, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	400a      	ands	r2, r1
 8004a60:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b10      	cmp	r3, #16
 8004a68:	d007      	beq.n	8004a7a <HAL_ADC_ConfigChannel+0x1ae>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b11      	cmp	r3, #17
 8004a70:	d003      	beq.n	8004a7a <HAL_ADC_ConfigChannel+0x1ae>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b12      	cmp	r3, #18
 8004a78:	d11c      	bne.n	8004ab4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004a7a:	4b15      	ldr	r3, [pc, #84]	@ (8004ad0 <HAL_ADC_ConfigChannel+0x204>)
 8004a7c:	6819      	ldr	r1, [r3, #0]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b10      	cmp	r3, #16
 8004a84:	d007      	beq.n	8004a96 <HAL_ADC_ConfigChannel+0x1ca>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b11      	cmp	r3, #17
 8004a8c:	d101      	bne.n	8004a92 <HAL_ADC_ConfigChannel+0x1c6>
 8004a8e:	4b13      	ldr	r3, [pc, #76]	@ (8004adc <HAL_ADC_ConfigChannel+0x210>)
 8004a90:	e002      	b.n	8004a98 <HAL_ADC_ConfigChannel+0x1cc>
 8004a92:	4b13      	ldr	r3, [pc, #76]	@ (8004ae0 <HAL_ADC_ConfigChannel+0x214>)
 8004a94:	e000      	b.n	8004a98 <HAL_ADC_ConfigChannel+0x1cc>
 8004a96:	4b13      	ldr	r3, [pc, #76]	@ (8004ae4 <HAL_ADC_ConfigChannel+0x218>)
 8004a98:	4a0d      	ldr	r2, [pc, #52]	@ (8004ad0 <HAL_ADC_ConfigChannel+0x204>)
 8004a9a:	400b      	ands	r3, r1
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	e009      	b.n	8004ab4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004aac:	230f      	movs	r3, #15
 8004aae:	18fb      	adds	r3, r7, r3
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2234      	movs	r2, #52	@ 0x34
 8004ab8:	2100      	movs	r1, #0
 8004aba:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004abc:	230f      	movs	r3, #15
 8004abe:	18fb      	adds	r3, r7, r3
 8004ac0:	781b      	ldrb	r3, [r3, #0]
}
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	b004      	add	sp, #16
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	46c0      	nop			@ (mov r8, r8)
 8004acc:	00001001 	.word	0x00001001
 8004ad0:	40012708 	.word	0x40012708
 8004ad4:	20000070 	.word	0x20000070
 8004ad8:	000f4240 	.word	0x000f4240
 8004adc:	ffbfffff 	.word	0xffbfffff
 8004ae0:	feffffff 	.word	0xfeffffff
 8004ae4:	ff7fffff 	.word	0xff7fffff

08004ae8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	2203      	movs	r2, #3
 8004b00:	4013      	ands	r3, r2
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d112      	bne.n	8004b2c <ADC_Enable+0x44>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	4013      	ands	r3, r2
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d009      	beq.n	8004b28 <ADC_Enable+0x40>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	2380      	movs	r3, #128	@ 0x80
 8004b1c:	021b      	lsls	r3, r3, #8
 8004b1e:	401a      	ands	r2, r3
 8004b20:	2380      	movs	r3, #128	@ 0x80
 8004b22:	021b      	lsls	r3, r3, #8
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d101      	bne.n	8004b2c <ADC_Enable+0x44>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <ADC_Enable+0x46>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d152      	bne.n	8004bd8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	4a2a      	ldr	r2, [pc, #168]	@ (8004be4 <ADC_Enable+0xfc>)
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	d00d      	beq.n	8004b5a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b42:	2210      	movs	r2, #16
 8004b44:	431a      	orrs	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4e:	2201      	movs	r2, #1
 8004b50:	431a      	orrs	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e03f      	b.n	8004bda <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2101      	movs	r1, #1
 8004b66:	430a      	orrs	r2, r1
 8004b68:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8004be8 <ADC_Enable+0x100>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	491f      	ldr	r1, [pc, #124]	@ (8004bec <ADC_Enable+0x104>)
 8004b70:	0018      	movs	r0, r3
 8004b72:	f7fb fae5 	bl	8000140 <__udivsi3>
 8004b76:	0003      	movs	r3, r0
 8004b78:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004b7a:	e002      	b.n	8004b82 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1f9      	bne.n	8004b7c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b88:	f7ff fc3a 	bl	8004400 <HAL_GetTick>
 8004b8c:	0003      	movs	r3, r0
 8004b8e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004b90:	e01b      	b.n	8004bca <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b92:	f7ff fc35 	bl	8004400 <HAL_GetTick>
 8004b96:	0002      	movs	r2, r0
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d914      	bls.n	8004bca <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	4013      	ands	r3, r2
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d00d      	beq.n	8004bca <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb2:	2210      	movs	r2, #16
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e007      	b.n	8004bda <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d1dc      	bne.n	8004b92 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	0018      	movs	r0, r3
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	b004      	add	sp, #16
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	46c0      	nop			@ (mov r8, r8)
 8004be4:	80000017 	.word	0x80000017
 8004be8:	20000070 	.word	0x20000070
 8004bec:	000f4240 	.word	0x000f4240

08004bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	0002      	movs	r2, r0
 8004bf8:	1dfb      	adds	r3, r7, #7
 8004bfa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004bfc:	1dfb      	adds	r3, r7, #7
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c02:	d809      	bhi.n	8004c18 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c04:	1dfb      	adds	r3, r7, #7
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	001a      	movs	r2, r3
 8004c0a:	231f      	movs	r3, #31
 8004c0c:	401a      	ands	r2, r3
 8004c0e:	4b04      	ldr	r3, [pc, #16]	@ (8004c20 <__NVIC_EnableIRQ+0x30>)
 8004c10:	2101      	movs	r1, #1
 8004c12:	4091      	lsls	r1, r2
 8004c14:	000a      	movs	r2, r1
 8004c16:	601a      	str	r2, [r3, #0]
  }
}
 8004c18:	46c0      	nop			@ (mov r8, r8)
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	b002      	add	sp, #8
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	e000e100 	.word	0xe000e100

08004c24 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	0002      	movs	r2, r0
 8004c2c:	1dfb      	adds	r3, r7, #7
 8004c2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004c30:	1dfb      	adds	r3, r7, #7
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c36:	d810      	bhi.n	8004c5a <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c38:	1dfb      	adds	r3, r7, #7
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	001a      	movs	r2, r3
 8004c3e:	231f      	movs	r3, #31
 8004c40:	4013      	ands	r3, r2
 8004c42:	4908      	ldr	r1, [pc, #32]	@ (8004c64 <__NVIC_DisableIRQ+0x40>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	409a      	lsls	r2, r3
 8004c48:	0013      	movs	r3, r2
 8004c4a:	2280      	movs	r2, #128	@ 0x80
 8004c4c:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004c4e:	f3bf 8f4f 	dsb	sy
}
 8004c52:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8004c54:	f3bf 8f6f 	isb	sy
}
 8004c58:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8004c5a:	46c0      	nop			@ (mov r8, r8)
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	b002      	add	sp, #8
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	46c0      	nop			@ (mov r8, r8)
 8004c64:	e000e100 	.word	0xe000e100

08004c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c68:	b590      	push	{r4, r7, lr}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	0002      	movs	r2, r0
 8004c70:	6039      	str	r1, [r7, #0]
 8004c72:	1dfb      	adds	r3, r7, #7
 8004c74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004c76:	1dfb      	adds	r3, r7, #7
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c7c:	d828      	bhi.n	8004cd0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c7e:	4a2f      	ldr	r2, [pc, #188]	@ (8004d3c <__NVIC_SetPriority+0xd4>)
 8004c80:	1dfb      	adds	r3, r7, #7
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	b25b      	sxtb	r3, r3
 8004c86:	089b      	lsrs	r3, r3, #2
 8004c88:	33c0      	adds	r3, #192	@ 0xc0
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	589b      	ldr	r3, [r3, r2]
 8004c8e:	1dfa      	adds	r2, r7, #7
 8004c90:	7812      	ldrb	r2, [r2, #0]
 8004c92:	0011      	movs	r1, r2
 8004c94:	2203      	movs	r2, #3
 8004c96:	400a      	ands	r2, r1
 8004c98:	00d2      	lsls	r2, r2, #3
 8004c9a:	21ff      	movs	r1, #255	@ 0xff
 8004c9c:	4091      	lsls	r1, r2
 8004c9e:	000a      	movs	r2, r1
 8004ca0:	43d2      	mvns	r2, r2
 8004ca2:	401a      	ands	r2, r3
 8004ca4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	019b      	lsls	r3, r3, #6
 8004caa:	22ff      	movs	r2, #255	@ 0xff
 8004cac:	401a      	ands	r2, r3
 8004cae:	1dfb      	adds	r3, r7, #7
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	0018      	movs	r0, r3
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	4003      	ands	r3, r0
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004cbc:	481f      	ldr	r0, [pc, #124]	@ (8004d3c <__NVIC_SetPriority+0xd4>)
 8004cbe:	1dfb      	adds	r3, r7, #7
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	b25b      	sxtb	r3, r3
 8004cc4:	089b      	lsrs	r3, r3, #2
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	33c0      	adds	r3, #192	@ 0xc0
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004cce:	e031      	b.n	8004d34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8004d40 <__NVIC_SetPriority+0xd8>)
 8004cd2:	1dfb      	adds	r3, r7, #7
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	0019      	movs	r1, r3
 8004cd8:	230f      	movs	r3, #15
 8004cda:	400b      	ands	r3, r1
 8004cdc:	3b08      	subs	r3, #8
 8004cde:	089b      	lsrs	r3, r3, #2
 8004ce0:	3306      	adds	r3, #6
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	18d3      	adds	r3, r2, r3
 8004ce6:	3304      	adds	r3, #4
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	1dfa      	adds	r2, r7, #7
 8004cec:	7812      	ldrb	r2, [r2, #0]
 8004cee:	0011      	movs	r1, r2
 8004cf0:	2203      	movs	r2, #3
 8004cf2:	400a      	ands	r2, r1
 8004cf4:	00d2      	lsls	r2, r2, #3
 8004cf6:	21ff      	movs	r1, #255	@ 0xff
 8004cf8:	4091      	lsls	r1, r2
 8004cfa:	000a      	movs	r2, r1
 8004cfc:	43d2      	mvns	r2, r2
 8004cfe:	401a      	ands	r2, r3
 8004d00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	019b      	lsls	r3, r3, #6
 8004d06:	22ff      	movs	r2, #255	@ 0xff
 8004d08:	401a      	ands	r2, r3
 8004d0a:	1dfb      	adds	r3, r7, #7
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	0018      	movs	r0, r3
 8004d10:	2303      	movs	r3, #3
 8004d12:	4003      	ands	r3, r0
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d18:	4809      	ldr	r0, [pc, #36]	@ (8004d40 <__NVIC_SetPriority+0xd8>)
 8004d1a:	1dfb      	adds	r3, r7, #7
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	001c      	movs	r4, r3
 8004d20:	230f      	movs	r3, #15
 8004d22:	4023      	ands	r3, r4
 8004d24:	3b08      	subs	r3, #8
 8004d26:	089b      	lsrs	r3, r3, #2
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	3306      	adds	r3, #6
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	18c3      	adds	r3, r0, r3
 8004d30:	3304      	adds	r3, #4
 8004d32:	601a      	str	r2, [r3, #0]
}
 8004d34:	46c0      	nop			@ (mov r8, r8)
 8004d36:	46bd      	mov	sp, r7
 8004d38:	b003      	add	sp, #12
 8004d3a:	bd90      	pop	{r4, r7, pc}
 8004d3c:	e000e100 	.word	0xe000e100
 8004d40:	e000ed00 	.word	0xe000ed00

08004d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	1e5a      	subs	r2, r3, #1
 8004d50:	2380      	movs	r3, #128	@ 0x80
 8004d52:	045b      	lsls	r3, r3, #17
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d301      	bcc.n	8004d5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e010      	b.n	8004d7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d88 <SysTick_Config+0x44>)
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	3a01      	subs	r2, #1
 8004d62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d64:	2301      	movs	r3, #1
 8004d66:	425b      	negs	r3, r3
 8004d68:	2103      	movs	r1, #3
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	f7ff ff7c 	bl	8004c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d70:	4b05      	ldr	r3, [pc, #20]	@ (8004d88 <SysTick_Config+0x44>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d76:	4b04      	ldr	r3, [pc, #16]	@ (8004d88 <SysTick_Config+0x44>)
 8004d78:	2207      	movs	r2, #7
 8004d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	0018      	movs	r0, r3
 8004d80:	46bd      	mov	sp, r7
 8004d82:	b002      	add	sp, #8
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	46c0      	nop			@ (mov r8, r8)
 8004d88:	e000e010 	.word	0xe000e010

08004d8c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	607a      	str	r2, [r7, #4]
 8004d96:	210f      	movs	r1, #15
 8004d98:	187b      	adds	r3, r7, r1
 8004d9a:	1c02      	adds	r2, r0, #0
 8004d9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	187b      	adds	r3, r7, r1
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	b25b      	sxtb	r3, r3
 8004da6:	0011      	movs	r1, r2
 8004da8:	0018      	movs	r0, r3
 8004daa:	f7ff ff5d 	bl	8004c68 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8004dae:	46c0      	nop			@ (mov r8, r8)
 8004db0:	46bd      	mov	sp, r7
 8004db2:	b004      	add	sp, #16
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b082      	sub	sp, #8
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	0002      	movs	r2, r0
 8004dbe:	1dfb      	adds	r3, r7, #7
 8004dc0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dc2:	1dfb      	adds	r3, r7, #7
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	b25b      	sxtb	r3, r3
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f7ff ff11 	bl	8004bf0 <__NVIC_EnableIRQ>
}
 8004dce:	46c0      	nop			@ (mov r8, r8)
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	b002      	add	sp, #8
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b082      	sub	sp, #8
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	0002      	movs	r2, r0
 8004dde:	1dfb      	adds	r3, r7, #7
 8004de0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004de2:	1dfb      	adds	r3, r7, #7
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	b25b      	sxtb	r3, r3
 8004de8:	0018      	movs	r0, r3
 8004dea:	f7ff ff1b 	bl	8004c24 <__NVIC_DisableIRQ>
}
 8004dee:	46c0      	nop			@ (mov r8, r8)
 8004df0:	46bd      	mov	sp, r7
 8004df2:	b002      	add	sp, #8
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b082      	sub	sp, #8
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	0018      	movs	r0, r3
 8004e02:	f7ff ff9f 	bl	8004d44 <SysTick_Config>
 8004e06:	0003      	movs	r3, r0
}
 8004e08:	0018      	movs	r0, r3
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	b002      	add	sp, #8
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e036      	b.n	8004e94 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2221      	movs	r2, #33	@ 0x21
 8004e2a:	2102      	movs	r1, #2
 8004e2c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	4a18      	ldr	r2, [pc, #96]	@ (8004e9c <HAL_DMA_Init+0x8c>)
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004e46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	0018      	movs	r0, r3
 8004e78:	f000 f9d0 	bl	800521c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2221      	movs	r2, #33	@ 0x21
 8004e86:	2101      	movs	r1, #1
 8004e88:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	2100      	movs	r1, #0
 8004e90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	0018      	movs	r0, r3
 8004e96:	46bd      	mov	sp, r7
 8004e98:	b004      	add	sp, #16
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	ffffc00f 	.word	0xffffc00f

08004ea0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
 8004eac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eae:	2317      	movs	r3, #23
 8004eb0:	18fb      	adds	r3, r7, r3
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	5c9b      	ldrb	r3, [r3, r2]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_DMA_Start_IT+0x24>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e04f      	b.n	8004f64 <HAL_DMA_Start_IT+0xc4>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	2101      	movs	r1, #1
 8004eca:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2221      	movs	r2, #33	@ 0x21
 8004ed0:	5c9b      	ldrb	r3, [r3, r2]
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d13a      	bne.n	8004f4e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2221      	movs	r2, #33	@ 0x21
 8004edc:	2102      	movs	r1, #2
 8004ede:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	438a      	bics	r2, r1
 8004ef4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 f960 	bl	80051c2 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d008      	beq.n	8004f1c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	210e      	movs	r1, #14
 8004f16:	430a      	orrs	r2, r1
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	e00f      	b.n	8004f3c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	210a      	movs	r1, #10
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2104      	movs	r1, #4
 8004f38:	438a      	bics	r2, r1
 8004f3a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2101      	movs	r1, #1
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	e007      	b.n	8004f5e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2220      	movs	r2, #32
 8004f52:	2100      	movs	r1, #0
 8004f54:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004f56:	2317      	movs	r3, #23
 8004f58:	18fb      	adds	r3, r7, r3
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004f5e:	2317      	movs	r3, #23
 8004f60:	18fb      	adds	r3, r7, r3
 8004f62:	781b      	ldrb	r3, [r3, #0]
}
 8004f64:	0018      	movs	r0, r3
 8004f66:	46bd      	mov	sp, r7
 8004f68:	b006      	add	sp, #24
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2221      	movs	r2, #33	@ 0x21
 8004f78:	5c9b      	ldrb	r3, [r3, r2]
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d008      	beq.n	8004f92 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2204      	movs	r2, #4
 8004f84:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e020      	b.n	8004fd4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	210e      	movs	r1, #14
 8004f9e:	438a      	bics	r2, r1
 8004fa0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2101      	movs	r1, #1
 8004fae:	438a      	bics	r2, r1
 8004fb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fba:	2101      	movs	r1, #1
 8004fbc:	4091      	lsls	r1, r2
 8004fbe:	000a      	movs	r2, r1
 8004fc0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2221      	movs	r2, #33	@ 0x21
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2220      	movs	r2, #32
 8004fce:	2100      	movs	r1, #0
 8004fd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	b002      	add	sp, #8
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fe4:	210f      	movs	r1, #15
 8004fe6:	187b      	adds	r3, r7, r1
 8004fe8:	2200      	movs	r2, #0
 8004fea:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2221      	movs	r2, #33	@ 0x21
 8004ff0:	5c9b      	ldrb	r3, [r3, r2]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d006      	beq.n	8005006 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2204      	movs	r2, #4
 8004ffc:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8004ffe:	187b      	adds	r3, r7, r1
 8005000:	2201      	movs	r2, #1
 8005002:	701a      	strb	r2, [r3, #0]
 8005004:	e028      	b.n	8005058 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	210e      	movs	r1, #14
 8005012:	438a      	bics	r2, r1
 8005014:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2101      	movs	r1, #1
 8005022:	438a      	bics	r2, r1
 8005024:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800502e:	2101      	movs	r1, #1
 8005030:	4091      	lsls	r1, r2
 8005032:	000a      	movs	r2, r1
 8005034:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2221      	movs	r2, #33	@ 0x21
 800503a:	2101      	movs	r1, #1
 800503c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2220      	movs	r2, #32
 8005042:	2100      	movs	r1, #0
 8005044:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800504a:	2b00      	cmp	r3, #0
 800504c:	d004      	beq.n	8005058 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	0010      	movs	r0, r2
 8005056:	4798      	blx	r3
    }
  }
  return status;
 8005058:	230f      	movs	r3, #15
 800505a:	18fb      	adds	r3, r7, r3
 800505c:	781b      	ldrb	r3, [r3, #0]
}
 800505e:	0018      	movs	r0, r3
 8005060:	46bd      	mov	sp, r7
 8005062:	b004      	add	sp, #16
 8005064:	bd80      	pop	{r7, pc}

08005066 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b084      	sub	sp, #16
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005082:	2204      	movs	r2, #4
 8005084:	409a      	lsls	r2, r3
 8005086:	0013      	movs	r3, r2
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	4013      	ands	r3, r2
 800508c:	d024      	beq.n	80050d8 <HAL_DMA_IRQHandler+0x72>
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2204      	movs	r2, #4
 8005092:	4013      	ands	r3, r2
 8005094:	d020      	beq.n	80050d8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2220      	movs	r2, #32
 800509e:	4013      	ands	r3, r2
 80050a0:	d107      	bne.n	80050b2 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2104      	movs	r1, #4
 80050ae:	438a      	bics	r2, r1
 80050b0:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ba:	2104      	movs	r1, #4
 80050bc:	4091      	lsls	r1, r2
 80050be:	000a      	movs	r2, r1
 80050c0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d100      	bne.n	80050cc <HAL_DMA_IRQHandler+0x66>
 80050ca:	e06a      	b.n	80051a2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	0010      	movs	r0, r2
 80050d4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80050d6:	e064      	b.n	80051a2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050dc:	2202      	movs	r2, #2
 80050de:	409a      	lsls	r2, r3
 80050e0:	0013      	movs	r3, r2
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4013      	ands	r3, r2
 80050e6:	d02b      	beq.n	8005140 <HAL_DMA_IRQHandler+0xda>
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2202      	movs	r2, #2
 80050ec:	4013      	ands	r3, r2
 80050ee:	d027      	beq.n	8005140 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2220      	movs	r2, #32
 80050f8:	4013      	ands	r3, r2
 80050fa:	d10b      	bne.n	8005114 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	210a      	movs	r1, #10
 8005108:	438a      	bics	r2, r1
 800510a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2221      	movs	r2, #33	@ 0x21
 8005110:	2101      	movs	r1, #1
 8005112:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800511c:	2102      	movs	r1, #2
 800511e:	4091      	lsls	r1, r2
 8005120:	000a      	movs	r2, r1
 8005122:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2220      	movs	r2, #32
 8005128:	2100      	movs	r1, #0
 800512a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005130:	2b00      	cmp	r3, #0
 8005132:	d036      	beq.n	80051a2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	0010      	movs	r0, r2
 800513c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800513e:	e030      	b.n	80051a2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005144:	2208      	movs	r2, #8
 8005146:	409a      	lsls	r2, r3
 8005148:	0013      	movs	r3, r2
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	4013      	ands	r3, r2
 800514e:	d028      	beq.n	80051a2 <HAL_DMA_IRQHandler+0x13c>
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2208      	movs	r2, #8
 8005154:	4013      	ands	r3, r2
 8005156:	d024      	beq.n	80051a2 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	210e      	movs	r1, #14
 8005164:	438a      	bics	r2, r1
 8005166:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005170:	2101      	movs	r1, #1
 8005172:	4091      	lsls	r1, r2
 8005174:	000a      	movs	r2, r1
 8005176:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2221      	movs	r2, #33	@ 0x21
 8005182:	2101      	movs	r1, #1
 8005184:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2220      	movs	r2, #32
 800518a:	2100      	movs	r1, #0
 800518c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005192:	2b00      	cmp	r3, #0
 8005194:	d005      	beq.n	80051a2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	0010      	movs	r0, r2
 800519e:	4798      	blx	r3
    }
  }
}
 80051a0:	e7ff      	b.n	80051a2 <HAL_DMA_IRQHandler+0x13c>
 80051a2:	46c0      	nop			@ (mov r8, r8)
 80051a4:	46bd      	mov	sp, r7
 80051a6:	b004      	add	sp, #16
 80051a8:	bd80      	pop	{r7, pc}

080051aa <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b082      	sub	sp, #8
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2221      	movs	r2, #33	@ 0x21
 80051b6:	5c9b      	ldrb	r3, [r3, r2]
 80051b8:	b2db      	uxtb	r3, r3
}
 80051ba:	0018      	movs	r0, r3
 80051bc:	46bd      	mov	sp, r7
 80051be:	b002      	add	sp, #8
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	607a      	str	r2, [r7, #4]
 80051ce:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051d8:	2101      	movs	r1, #1
 80051da:	4091      	lsls	r1, r2
 80051dc:	000a      	movs	r2, r1
 80051de:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2b10      	cmp	r3, #16
 80051ee:	d108      	bne.n	8005202 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005200:	e007      	b.n	8005212 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	60da      	str	r2, [r3, #12]
}
 8005212:	46c0      	nop			@ (mov r8, r8)
 8005214:	46bd      	mov	sp, r7
 8005216:	b004      	add	sp, #16
 8005218:	bd80      	pop	{r7, pc}
	...

0800521c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a08      	ldr	r2, [pc, #32]	@ (800524c <DMA_CalcBaseAndBitshift+0x30>)
 800522a:	4694      	mov	ip, r2
 800522c:	4463      	add	r3, ip
 800522e:	2114      	movs	r1, #20
 8005230:	0018      	movs	r0, r3
 8005232:	f7fa ff85 	bl	8000140 <__udivsi3>
 8005236:	0003      	movs	r3, r0
 8005238:	009a      	lsls	r2, r3, #2
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a03      	ldr	r2, [pc, #12]	@ (8005250 <DMA_CalcBaseAndBitshift+0x34>)
 8005242:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8005244:	46c0      	nop			@ (mov r8, r8)
 8005246:	46bd      	mov	sp, r7
 8005248:	b002      	add	sp, #8
 800524a:	bd80      	pop	{r7, pc}
 800524c:	bffdfff8 	.word	0xbffdfff8
 8005250:	40020000 	.word	0x40020000

08005254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800525e:	2300      	movs	r3, #0
 8005260:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005262:	e155      	b.n	8005510 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2101      	movs	r1, #1
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4091      	lsls	r1, r2
 800526e:	000a      	movs	r2, r1
 8005270:	4013      	ands	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d100      	bne.n	800527c <HAL_GPIO_Init+0x28>
 800527a:	e146      	b.n	800550a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	2203      	movs	r2, #3
 8005282:	4013      	ands	r3, r2
 8005284:	2b01      	cmp	r3, #1
 8005286:	d005      	beq.n	8005294 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	2203      	movs	r2, #3
 800528e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005290:	2b02      	cmp	r3, #2
 8005292:	d130      	bne.n	80052f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	2203      	movs	r2, #3
 80052a0:	409a      	lsls	r2, r3
 80052a2:	0013      	movs	r3, r2
 80052a4:	43da      	mvns	r2, r3
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	4013      	ands	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	409a      	lsls	r2, r3
 80052b6:	0013      	movs	r3, r2
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052ca:	2201      	movs	r2, #1
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	409a      	lsls	r2, r3
 80052d0:	0013      	movs	r3, r2
 80052d2:	43da      	mvns	r2, r3
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	4013      	ands	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	091b      	lsrs	r3, r3, #4
 80052e0:	2201      	movs	r2, #1
 80052e2:	401a      	ands	r2, r3
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	409a      	lsls	r2, r3
 80052e8:	0013      	movs	r3, r2
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2203      	movs	r2, #3
 80052fc:	4013      	ands	r3, r2
 80052fe:	2b03      	cmp	r3, #3
 8005300:	d017      	beq.n	8005332 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	2203      	movs	r2, #3
 800530e:	409a      	lsls	r2, r3
 8005310:	0013      	movs	r3, r2
 8005312:	43da      	mvns	r2, r3
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	4013      	ands	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	689a      	ldr	r2, [r3, #8]
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	409a      	lsls	r2, r3
 8005324:	0013      	movs	r3, r2
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2203      	movs	r2, #3
 8005338:	4013      	ands	r3, r2
 800533a:	2b02      	cmp	r3, #2
 800533c:	d123      	bne.n	8005386 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	08da      	lsrs	r2, r3, #3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	3208      	adds	r2, #8
 8005346:	0092      	lsls	r2, r2, #2
 8005348:	58d3      	ldr	r3, [r2, r3]
 800534a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	2207      	movs	r2, #7
 8005350:	4013      	ands	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	220f      	movs	r2, #15
 8005356:	409a      	lsls	r2, r3
 8005358:	0013      	movs	r3, r2
 800535a:	43da      	mvns	r2, r3
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	4013      	ands	r3, r2
 8005360:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	691a      	ldr	r2, [r3, #16]
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	2107      	movs	r1, #7
 800536a:	400b      	ands	r3, r1
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	409a      	lsls	r2, r3
 8005370:	0013      	movs	r3, r2
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	4313      	orrs	r3, r2
 8005376:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	08da      	lsrs	r2, r3, #3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3208      	adds	r2, #8
 8005380:	0092      	lsls	r2, r2, #2
 8005382:	6939      	ldr	r1, [r7, #16]
 8005384:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	005b      	lsls	r3, r3, #1
 8005390:	2203      	movs	r2, #3
 8005392:	409a      	lsls	r2, r3
 8005394:	0013      	movs	r3, r2
 8005396:	43da      	mvns	r2, r3
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	4013      	ands	r3, r2
 800539c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	2203      	movs	r2, #3
 80053a4:	401a      	ands	r2, r3
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	409a      	lsls	r2, r3
 80053ac:	0013      	movs	r3, r2
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	23c0      	movs	r3, #192	@ 0xc0
 80053c0:	029b      	lsls	r3, r3, #10
 80053c2:	4013      	ands	r3, r2
 80053c4:	d100      	bne.n	80053c8 <HAL_GPIO_Init+0x174>
 80053c6:	e0a0      	b.n	800550a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053c8:	4b57      	ldr	r3, [pc, #348]	@ (8005528 <HAL_GPIO_Init+0x2d4>)
 80053ca:	699a      	ldr	r2, [r3, #24]
 80053cc:	4b56      	ldr	r3, [pc, #344]	@ (8005528 <HAL_GPIO_Init+0x2d4>)
 80053ce:	2101      	movs	r1, #1
 80053d0:	430a      	orrs	r2, r1
 80053d2:	619a      	str	r2, [r3, #24]
 80053d4:	4b54      	ldr	r3, [pc, #336]	@ (8005528 <HAL_GPIO_Init+0x2d4>)
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	2201      	movs	r2, #1
 80053da:	4013      	ands	r3, r2
 80053dc:	60bb      	str	r3, [r7, #8]
 80053de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80053e0:	4a52      	ldr	r2, [pc, #328]	@ (800552c <HAL_GPIO_Init+0x2d8>)
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	089b      	lsrs	r3, r3, #2
 80053e6:	3302      	adds	r3, #2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	589b      	ldr	r3, [r3, r2]
 80053ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2203      	movs	r2, #3
 80053f2:	4013      	ands	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	220f      	movs	r2, #15
 80053f8:	409a      	lsls	r2, r3
 80053fa:	0013      	movs	r3, r2
 80053fc:	43da      	mvns	r2, r3
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	4013      	ands	r3, r2
 8005402:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	2390      	movs	r3, #144	@ 0x90
 8005408:	05db      	lsls	r3, r3, #23
 800540a:	429a      	cmp	r2, r3
 800540c:	d019      	beq.n	8005442 <HAL_GPIO_Init+0x1ee>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a47      	ldr	r2, [pc, #284]	@ (8005530 <HAL_GPIO_Init+0x2dc>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d013      	beq.n	800543e <HAL_GPIO_Init+0x1ea>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a46      	ldr	r2, [pc, #280]	@ (8005534 <HAL_GPIO_Init+0x2e0>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d00d      	beq.n	800543a <HAL_GPIO_Init+0x1e6>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a45      	ldr	r2, [pc, #276]	@ (8005538 <HAL_GPIO_Init+0x2e4>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d007      	beq.n	8005436 <HAL_GPIO_Init+0x1e2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a44      	ldr	r2, [pc, #272]	@ (800553c <HAL_GPIO_Init+0x2e8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d101      	bne.n	8005432 <HAL_GPIO_Init+0x1de>
 800542e:	2304      	movs	r3, #4
 8005430:	e008      	b.n	8005444 <HAL_GPIO_Init+0x1f0>
 8005432:	2305      	movs	r3, #5
 8005434:	e006      	b.n	8005444 <HAL_GPIO_Init+0x1f0>
 8005436:	2303      	movs	r3, #3
 8005438:	e004      	b.n	8005444 <HAL_GPIO_Init+0x1f0>
 800543a:	2302      	movs	r3, #2
 800543c:	e002      	b.n	8005444 <HAL_GPIO_Init+0x1f0>
 800543e:	2301      	movs	r3, #1
 8005440:	e000      	b.n	8005444 <HAL_GPIO_Init+0x1f0>
 8005442:	2300      	movs	r3, #0
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	2103      	movs	r1, #3
 8005448:	400a      	ands	r2, r1
 800544a:	0092      	lsls	r2, r2, #2
 800544c:	4093      	lsls	r3, r2
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	4313      	orrs	r3, r2
 8005452:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005454:	4935      	ldr	r1, [pc, #212]	@ (800552c <HAL_GPIO_Init+0x2d8>)
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	089b      	lsrs	r3, r3, #2
 800545a:	3302      	adds	r3, #2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005462:	4b37      	ldr	r3, [pc, #220]	@ (8005540 <HAL_GPIO_Init+0x2ec>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	43da      	mvns	r2, r3
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	4013      	ands	r3, r2
 8005470:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	2380      	movs	r3, #128	@ 0x80
 8005478:	035b      	lsls	r3, r3, #13
 800547a:	4013      	ands	r3, r2
 800547c:	d003      	beq.n	8005486 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005486:	4b2e      	ldr	r3, [pc, #184]	@ (8005540 <HAL_GPIO_Init+0x2ec>)
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800548c:	4b2c      	ldr	r3, [pc, #176]	@ (8005540 <HAL_GPIO_Init+0x2ec>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	43da      	mvns	r2, r3
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	4013      	ands	r3, r2
 800549a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	2380      	movs	r3, #128	@ 0x80
 80054a2:	039b      	lsls	r3, r3, #14
 80054a4:	4013      	ands	r3, r2
 80054a6:	d003      	beq.n	80054b0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80054b0:	4b23      	ldr	r3, [pc, #140]	@ (8005540 <HAL_GPIO_Init+0x2ec>)
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80054b6:	4b22      	ldr	r3, [pc, #136]	@ (8005540 <HAL_GPIO_Init+0x2ec>)
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	43da      	mvns	r2, r3
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	4013      	ands	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	2380      	movs	r3, #128	@ 0x80
 80054cc:	029b      	lsls	r3, r3, #10
 80054ce:	4013      	ands	r3, r2
 80054d0:	d003      	beq.n	80054da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80054da:	4b19      	ldr	r3, [pc, #100]	@ (8005540 <HAL_GPIO_Init+0x2ec>)
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80054e0:	4b17      	ldr	r3, [pc, #92]	@ (8005540 <HAL_GPIO_Init+0x2ec>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	43da      	mvns	r2, r3
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	4013      	ands	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	2380      	movs	r3, #128	@ 0x80
 80054f6:	025b      	lsls	r3, r3, #9
 80054f8:	4013      	ands	r3, r2
 80054fa:	d003      	beq.n	8005504 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4313      	orrs	r3, r2
 8005502:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005504:	4b0e      	ldr	r3, [pc, #56]	@ (8005540 <HAL_GPIO_Init+0x2ec>)
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	3301      	adds	r3, #1
 800550e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	40da      	lsrs	r2, r3
 8005518:	1e13      	subs	r3, r2, #0
 800551a:	d000      	beq.n	800551e <HAL_GPIO_Init+0x2ca>
 800551c:	e6a2      	b.n	8005264 <HAL_GPIO_Init+0x10>
  } 
}
 800551e:	46c0      	nop			@ (mov r8, r8)
 8005520:	46c0      	nop			@ (mov r8, r8)
 8005522:	46bd      	mov	sp, r7
 8005524:	b006      	add	sp, #24
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40021000 	.word	0x40021000
 800552c:	40010000 	.word	0x40010000
 8005530:	48000400 	.word	0x48000400
 8005534:	48000800 	.word	0x48000800
 8005538:	48000c00 	.word	0x48000c00
 800553c:	48001000 	.word	0x48001000
 8005540:	40010400 	.word	0x40010400

08005544 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	000a      	movs	r2, r1
 800554e:	1cbb      	adds	r3, r7, #2
 8005550:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	1cba      	adds	r2, r7, #2
 8005558:	8812      	ldrh	r2, [r2, #0]
 800555a:	4013      	ands	r3, r2
 800555c:	d004      	beq.n	8005568 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800555e:	230f      	movs	r3, #15
 8005560:	18fb      	adds	r3, r7, r3
 8005562:	2201      	movs	r2, #1
 8005564:	701a      	strb	r2, [r3, #0]
 8005566:	e003      	b.n	8005570 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005568:	230f      	movs	r3, #15
 800556a:	18fb      	adds	r3, r7, r3
 800556c:	2200      	movs	r2, #0
 800556e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005570:	230f      	movs	r3, #15
 8005572:	18fb      	adds	r3, r7, r3
 8005574:	781b      	ldrb	r3, [r3, #0]
  }
 8005576:	0018      	movs	r0, r3
 8005578:	46bd      	mov	sp, r7
 800557a:	b004      	add	sp, #16
 800557c:	bd80      	pop	{r7, pc}

0800557e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b082      	sub	sp, #8
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	0008      	movs	r0, r1
 8005588:	0011      	movs	r1, r2
 800558a:	1cbb      	adds	r3, r7, #2
 800558c:	1c02      	adds	r2, r0, #0
 800558e:	801a      	strh	r2, [r3, #0]
 8005590:	1c7b      	adds	r3, r7, #1
 8005592:	1c0a      	adds	r2, r1, #0
 8005594:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005596:	1c7b      	adds	r3, r7, #1
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d004      	beq.n	80055a8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800559e:	1cbb      	adds	r3, r7, #2
 80055a0:	881a      	ldrh	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80055a6:	e003      	b.n	80055b0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80055a8:	1cbb      	adds	r3, r7, #2
 80055aa:	881a      	ldrh	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80055b0:	46c0      	nop			@ (mov r8, r8)
 80055b2:	46bd      	mov	sp, r7
 80055b4:	b002      	add	sp, #8
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	0002      	movs	r2, r0
 80055c0:	1dbb      	adds	r3, r7, #6
 80055c2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80055c4:	4b09      	ldr	r3, [pc, #36]	@ (80055ec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	1dba      	adds	r2, r7, #6
 80055ca:	8812      	ldrh	r2, [r2, #0]
 80055cc:	4013      	ands	r3, r2
 80055ce:	d008      	beq.n	80055e2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055d0:	4b06      	ldr	r3, [pc, #24]	@ (80055ec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80055d2:	1dba      	adds	r2, r7, #6
 80055d4:	8812      	ldrh	r2, [r2, #0]
 80055d6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055d8:	1dbb      	adds	r3, r7, #6
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	0018      	movs	r0, r3
 80055de:	f00d ff97 	bl	8013510 <HAL_GPIO_EXTI_Callback>
  }
}
 80055e2:	46c0      	nop			@ (mov r8, r8)
 80055e4:	46bd      	mov	sp, r7
 80055e6:	b002      	add	sp, #8
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	46c0      	nop			@ (mov r8, r8)
 80055ec:	40010400 	.word	0x40010400

080055f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80055f0:	b590      	push	{r4, r7, lr}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e0e4      	b.n	80057cc <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a73      	ldr	r2, [pc, #460]	@ (80057d4 <HAL_PCD_Init+0x1e4>)
 8005606:	5c9b      	ldrb	r3, [r3, r2]
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d108      	bne.n	8005620 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	23a4      	movs	r3, #164	@ 0xa4
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	2100      	movs	r1, #0
 8005616:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	0018      	movs	r0, r3
 800561c:	f00c fa1c 	bl	8011a58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a6c      	ldr	r2, [pc, #432]	@ (80057d4 <HAL_PCD_Init+0x1e4>)
 8005624:	2103      	movs	r1, #3
 8005626:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	0018      	movs	r0, r3
 800562e:	f005 fbf1 	bl	800ae14 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005632:	230f      	movs	r3, #15
 8005634:	18fb      	adds	r3, r7, r3
 8005636:	2200      	movs	r2, #0
 8005638:	701a      	strb	r2, [r3, #0]
 800563a:	e047      	b.n	80056cc <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800563c:	200f      	movs	r0, #15
 800563e:	183b      	adds	r3, r7, r0
 8005640:	781a      	ldrb	r2, [r3, #0]
 8005642:	6879      	ldr	r1, [r7, #4]
 8005644:	0013      	movs	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	189b      	adds	r3, r3, r2
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	18cb      	adds	r3, r1, r3
 800564e:	3311      	adds	r3, #17
 8005650:	2201      	movs	r2, #1
 8005652:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005654:	183b      	adds	r3, r7, r0
 8005656:	781a      	ldrb	r2, [r3, #0]
 8005658:	6879      	ldr	r1, [r7, #4]
 800565a:	0013      	movs	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	189b      	adds	r3, r3, r2
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	18cb      	adds	r3, r1, r3
 8005664:	3310      	adds	r3, #16
 8005666:	183a      	adds	r2, r7, r0
 8005668:	7812      	ldrb	r2, [r2, #0]
 800566a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800566c:	183b      	adds	r3, r7, r0
 800566e:	781a      	ldrb	r2, [r3, #0]
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	0013      	movs	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	189b      	adds	r3, r3, r2
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	18cb      	adds	r3, r1, r3
 800567c:	3313      	adds	r3, #19
 800567e:	2200      	movs	r2, #0
 8005680:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005682:	183b      	adds	r3, r7, r0
 8005684:	781a      	ldrb	r2, [r3, #0]
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	0013      	movs	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	189b      	adds	r3, r3, r2
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	18cb      	adds	r3, r1, r3
 8005692:	3320      	adds	r3, #32
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005698:	183b      	adds	r3, r7, r0
 800569a:	781a      	ldrb	r2, [r3, #0]
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	0013      	movs	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	189b      	adds	r3, r3, r2
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	18cb      	adds	r3, r1, r3
 80056a8:	3324      	adds	r3, #36	@ 0x24
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80056ae:	183b      	adds	r3, r7, r0
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	6879      	ldr	r1, [r7, #4]
 80056b4:	1c5a      	adds	r2, r3, #1
 80056b6:	0013      	movs	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	189b      	adds	r3, r3, r2
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	2200      	movs	r2, #0
 80056c0:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056c2:	183b      	adds	r3, r7, r0
 80056c4:	781a      	ldrb	r2, [r3, #0]
 80056c6:	183b      	adds	r3, r7, r0
 80056c8:	3201      	adds	r2, #1
 80056ca:	701a      	strb	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	791b      	ldrb	r3, [r3, #4]
 80056d0:	210f      	movs	r1, #15
 80056d2:	187a      	adds	r2, r7, r1
 80056d4:	7812      	ldrb	r2, [r2, #0]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d3b0      	bcc.n	800563c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056da:	187b      	adds	r3, r7, r1
 80056dc:	2200      	movs	r2, #0
 80056de:	701a      	strb	r2, [r3, #0]
 80056e0:	e056      	b.n	8005790 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80056e2:	240f      	movs	r4, #15
 80056e4:	193b      	adds	r3, r7, r4
 80056e6:	781a      	ldrb	r2, [r3, #0]
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	2352      	movs	r3, #82	@ 0x52
 80056ec:	33ff      	adds	r3, #255	@ 0xff
 80056ee:	0019      	movs	r1, r3
 80056f0:	0013      	movs	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	189b      	adds	r3, r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	18c3      	adds	r3, r0, r3
 80056fa:	185b      	adds	r3, r3, r1
 80056fc:	2200      	movs	r2, #0
 80056fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005700:	193b      	adds	r3, r7, r4
 8005702:	781a      	ldrb	r2, [r3, #0]
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	23a8      	movs	r3, #168	@ 0xa8
 8005708:	0059      	lsls	r1, r3, #1
 800570a:	0013      	movs	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	189b      	adds	r3, r3, r2
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	18c3      	adds	r3, r0, r3
 8005714:	185b      	adds	r3, r3, r1
 8005716:	193a      	adds	r2, r7, r4
 8005718:	7812      	ldrb	r2, [r2, #0]
 800571a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800571c:	193b      	adds	r3, r7, r4
 800571e:	781a      	ldrb	r2, [r3, #0]
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	2354      	movs	r3, #84	@ 0x54
 8005724:	33ff      	adds	r3, #255	@ 0xff
 8005726:	0019      	movs	r1, r3
 8005728:	0013      	movs	r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	189b      	adds	r3, r3, r2
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	18c3      	adds	r3, r0, r3
 8005732:	185b      	adds	r3, r3, r1
 8005734:	2200      	movs	r2, #0
 8005736:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005738:	193b      	adds	r3, r7, r4
 800573a:	781a      	ldrb	r2, [r3, #0]
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	23b0      	movs	r3, #176	@ 0xb0
 8005740:	0059      	lsls	r1, r3, #1
 8005742:	0013      	movs	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	189b      	adds	r3, r3, r2
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	18c3      	adds	r3, r0, r3
 800574c:	185b      	adds	r3, r3, r1
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005752:	193b      	adds	r3, r7, r4
 8005754:	781a      	ldrb	r2, [r3, #0]
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	23b2      	movs	r3, #178	@ 0xb2
 800575a:	0059      	lsls	r1, r3, #1
 800575c:	0013      	movs	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	189b      	adds	r3, r3, r2
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	18c3      	adds	r3, r0, r3
 8005766:	185b      	adds	r3, r3, r1
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800576c:	193b      	adds	r3, r7, r4
 800576e:	781a      	ldrb	r2, [r3, #0]
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	23b4      	movs	r3, #180	@ 0xb4
 8005774:	0059      	lsls	r1, r3, #1
 8005776:	0013      	movs	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	189b      	adds	r3, r3, r2
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	18c3      	adds	r3, r0, r3
 8005780:	185b      	adds	r3, r3, r1
 8005782:	2200      	movs	r2, #0
 8005784:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005786:	193b      	adds	r3, r7, r4
 8005788:	781a      	ldrb	r2, [r3, #0]
 800578a:	193b      	adds	r3, r7, r4
 800578c:	3201      	adds	r2, #1
 800578e:	701a      	strb	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	791b      	ldrb	r3, [r3, #4]
 8005794:	220f      	movs	r2, #15
 8005796:	18ba      	adds	r2, r7, r2
 8005798:	7812      	ldrb	r2, [r2, #0]
 800579a:	429a      	cmp	r2, r3
 800579c:	d3a1      	bcc.n	80056e2 <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6818      	ldr	r0, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6859      	ldr	r1, [r3, #4]
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	f005 fb4e 	bl	800ae48 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a07      	ldr	r2, [pc, #28]	@ (80057d4 <HAL_PCD_Init+0x1e4>)
 80057b6:	2101      	movs	r1, #1
 80057b8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	7a9b      	ldrb	r3, [r3, #10]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d103      	bne.n	80057ca <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	0018      	movs	r0, r3
 80057c6:	f001 fd1f 	bl	8007208 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	0018      	movs	r0, r3
 80057ce:	46bd      	mov	sp, r7
 80057d0:	b005      	add	sp, #20
 80057d2:	bd90      	pop	{r4, r7, pc}
 80057d4:	00000291 	.word	0x00000291

080057d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	23a4      	movs	r3, #164	@ 0xa4
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	5cd3      	ldrb	r3, [r2, r3]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_PCD_Start+0x18>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e014      	b.n	800581a <HAL_PCD_Start+0x42>
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	23a4      	movs	r3, #164	@ 0xa4
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	2101      	movs	r1, #1
 80057f8:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	0018      	movs	r0, r3
 8005800:	f005 faf2 	bl	800ade8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	0018      	movs	r0, r3
 800580a:	f007 fae7 	bl	800cddc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	23a4      	movs	r3, #164	@ 0xa4
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	2100      	movs	r1, #0
 8005816:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	0018      	movs	r0, r3
 800581c:	46bd      	mov	sp, r7
 800581e:	b002      	add	sp, #8
 8005820:	bd80      	pop	{r7, pc}
	...

08005824 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	0018      	movs	r0, r3
 8005832:	f007 fae9 	bl	800ce08 <USB_ReadInterrupts>
 8005836:	0003      	movs	r3, r0
 8005838:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	2380      	movs	r3, #128	@ 0x80
 800583e:	021b      	lsls	r3, r3, #8
 8005840:	4013      	ands	r3, r2
 8005842:	d004      	beq.n	800584e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	0018      	movs	r0, r3
 8005848:	f000 fb60 	bl	8005f0c <PCD_EP_ISR_Handler>

    return;
 800584c:	e11d      	b.n	8005a8a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	2380      	movs	r3, #128	@ 0x80
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	4013      	ands	r3, r2
 8005856:	d015      	beq.n	8005884 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2244      	movs	r2, #68	@ 0x44
 800585e:	5a9b      	ldrh	r3, [r3, r2]
 8005860:	b29a      	uxth	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	498a      	ldr	r1, [pc, #552]	@ (8005a90 <HAL_PCD_IRQHandler+0x26c>)
 8005868:	400a      	ands	r2, r1
 800586a:	b291      	uxth	r1, r2
 800586c:	2244      	movs	r2, #68	@ 0x44
 800586e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	0018      	movs	r0, r3
 8005874:	f00c f97b 	bl	8011b6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2100      	movs	r1, #0
 800587c:	0018      	movs	r0, r3
 800587e:	f000 f915 	bl	8005aac <HAL_PCD_SetAddress>

    return;
 8005882:	e102      	b.n	8005a8a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	2380      	movs	r3, #128	@ 0x80
 8005888:	01db      	lsls	r3, r3, #7
 800588a:	4013      	ands	r3, r2
 800588c:	d00c      	beq.n	80058a8 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2244      	movs	r2, #68	@ 0x44
 8005894:	5a9b      	ldrh	r3, [r3, r2]
 8005896:	b29a      	uxth	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	497d      	ldr	r1, [pc, #500]	@ (8005a94 <HAL_PCD_IRQHandler+0x270>)
 800589e:	400a      	ands	r2, r1
 80058a0:	b291      	uxth	r1, r2
 80058a2:	2244      	movs	r2, #68	@ 0x44
 80058a4:	5299      	strh	r1, [r3, r2]

    return;
 80058a6:	e0f0      	b.n	8005a8a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	2380      	movs	r3, #128	@ 0x80
 80058ac:	019b      	lsls	r3, r3, #6
 80058ae:	4013      	ands	r3, r2
 80058b0:	d00c      	beq.n	80058cc <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2244      	movs	r2, #68	@ 0x44
 80058b8:	5a9b      	ldrh	r3, [r3, r2]
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4975      	ldr	r1, [pc, #468]	@ (8005a98 <HAL_PCD_IRQHandler+0x274>)
 80058c2:	400a      	ands	r2, r1
 80058c4:	b291      	uxth	r1, r2
 80058c6:	2244      	movs	r2, #68	@ 0x44
 80058c8:	5299      	strh	r1, [r3, r2]

    return;
 80058ca:	e0de      	b.n	8005a8a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	2380      	movs	r3, #128	@ 0x80
 80058d0:	015b      	lsls	r3, r3, #5
 80058d2:	4013      	ands	r3, r2
 80058d4:	d038      	beq.n	8005948 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2240      	movs	r2, #64	@ 0x40
 80058dc:	5a9b      	ldrh	r3, [r3, r2]
 80058de:	b29a      	uxth	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2104      	movs	r1, #4
 80058e6:	438a      	bics	r2, r1
 80058e8:	b291      	uxth	r1, r2
 80058ea:	2240      	movs	r2, #64	@ 0x40
 80058ec:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2240      	movs	r2, #64	@ 0x40
 80058f4:	5a9b      	ldrh	r3, [r3, r2]
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2108      	movs	r1, #8
 80058fe:	438a      	bics	r2, r1
 8005900:	b291      	uxth	r1, r2
 8005902:	2240      	movs	r2, #64	@ 0x40
 8005904:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	23b2      	movs	r3, #178	@ 0xb2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	5cd3      	ldrb	r3, [r2, r3]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d109      	bne.n	8005926 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	23b2      	movs	r3, #178	@ 0xb2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	2100      	movs	r1, #0
 800591a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2100      	movs	r1, #0
 8005920:	0018      	movs	r0, r3
 8005922:	f001 fc9b 	bl	800725c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	0018      	movs	r0, r3
 800592a:	f00c f961 	bl	8011bf0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2244      	movs	r2, #68	@ 0x44
 8005934:	5a9b      	ldrh	r3, [r3, r2]
 8005936:	b29a      	uxth	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4957      	ldr	r1, [pc, #348]	@ (8005a9c <HAL_PCD_IRQHandler+0x278>)
 800593e:	400a      	ands	r2, r1
 8005940:	b291      	uxth	r1, r2
 8005942:	2244      	movs	r2, #68	@ 0x44
 8005944:	5299      	strh	r1, [r3, r2]

    return;
 8005946:	e0a0      	b.n	8005a8a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	2380      	movs	r3, #128	@ 0x80
 800594c:	011b      	lsls	r3, r3, #4
 800594e:	4013      	ands	r3, r2
 8005950:	d028      	beq.n	80059a4 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2240      	movs	r2, #64	@ 0x40
 8005958:	5a9b      	ldrh	r3, [r3, r2]
 800595a:	b29a      	uxth	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2108      	movs	r1, #8
 8005962:	430a      	orrs	r2, r1
 8005964:	b291      	uxth	r1, r2
 8005966:	2240      	movs	r2, #64	@ 0x40
 8005968:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2244      	movs	r2, #68	@ 0x44
 8005970:	5a9b      	ldrh	r3, [r3, r2]
 8005972:	b29a      	uxth	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4949      	ldr	r1, [pc, #292]	@ (8005aa0 <HAL_PCD_IRQHandler+0x27c>)
 800597a:	400a      	ands	r2, r1
 800597c:	b291      	uxth	r1, r2
 800597e:	2244      	movs	r2, #68	@ 0x44
 8005980:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2240      	movs	r2, #64	@ 0x40
 8005988:	5a9b      	ldrh	r3, [r3, r2]
 800598a:	b29a      	uxth	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2104      	movs	r1, #4
 8005992:	430a      	orrs	r2, r1
 8005994:	b291      	uxth	r1, r2
 8005996:	2240      	movs	r2, #64	@ 0x40
 8005998:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	0018      	movs	r0, r3
 800599e:	f00c f90b 	bl	8011bb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80059a2:	e072      	b.n	8005a8a <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2280      	movs	r2, #128	@ 0x80
 80059a8:	4013      	ands	r3, r2
 80059aa:	d046      	beq.n	8005a3a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2244      	movs	r2, #68	@ 0x44
 80059b2:	5a9b      	ldrh	r3, [r3, r2]
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2180      	movs	r1, #128	@ 0x80
 80059bc:	438a      	bics	r2, r1
 80059be:	b291      	uxth	r1, r2
 80059c0:	2244      	movs	r2, #68	@ 0x44
 80059c2:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	23b2      	movs	r3, #178	@ 0xb2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	5cd3      	ldrb	r3, [r2, r3]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d12f      	bne.n	8005a30 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2240      	movs	r2, #64	@ 0x40
 80059d6:	5a9b      	ldrh	r3, [r3, r2]
 80059d8:	b29a      	uxth	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2104      	movs	r1, #4
 80059e0:	430a      	orrs	r2, r1
 80059e2:	b291      	uxth	r1, r2
 80059e4:	2240      	movs	r2, #64	@ 0x40
 80059e6:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2240      	movs	r2, #64	@ 0x40
 80059ee:	5a9b      	ldrh	r3, [r3, r2]
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2108      	movs	r1, #8
 80059f8:	430a      	orrs	r2, r1
 80059fa:	b291      	uxth	r1, r2
 80059fc:	2240      	movs	r2, #64	@ 0x40
 80059fe:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	23b2      	movs	r3, #178	@ 0xb2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	2101      	movs	r1, #1
 8005a08:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2254      	movs	r2, #84	@ 0x54
 8005a10:	5a9b      	ldrh	r3, [r3, r2]
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	089b      	lsrs	r3, r3, #2
 8005a16:	223c      	movs	r2, #60	@ 0x3c
 8005a18:	4013      	ands	r3, r2
 8005a1a:	0019      	movs	r1, r3
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	23b3      	movs	r3, #179	@ 0xb3
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2101      	movs	r1, #1
 8005a28:	0018      	movs	r0, r3
 8005a2a:	f001 fc17 	bl	800725c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005a2e:	e02c      	b.n	8005a8a <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	0018      	movs	r0, r3
 8005a34:	f00c f8c0 	bl	8011bb8 <HAL_PCD_SuspendCallback>
    return;
 8005a38:	e027      	b.n	8005a8a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	2380      	movs	r3, #128	@ 0x80
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4013      	ands	r3, r2
 8005a42:	d010      	beq.n	8005a66 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2244      	movs	r2, #68	@ 0x44
 8005a4a:	5a9b      	ldrh	r3, [r3, r2]
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4914      	ldr	r1, [pc, #80]	@ (8005aa4 <HAL_PCD_IRQHandler+0x280>)
 8005a54:	400a      	ands	r2, r1
 8005a56:	b291      	uxth	r1, r2
 8005a58:	2244      	movs	r2, #68	@ 0x44
 8005a5a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	0018      	movs	r0, r3
 8005a60:	f00c f876 	bl	8011b50 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005a64:	e011      	b.n	8005a8a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	2380      	movs	r3, #128	@ 0x80
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	d00c      	beq.n	8005a8a <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2244      	movs	r2, #68	@ 0x44
 8005a76:	5a9b      	ldrh	r3, [r3, r2]
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	490a      	ldr	r1, [pc, #40]	@ (8005aa8 <HAL_PCD_IRQHandler+0x284>)
 8005a80:	400a      	ands	r2, r1
 8005a82:	b291      	uxth	r1, r2
 8005a84:	2244      	movs	r2, #68	@ 0x44
 8005a86:	5299      	strh	r1, [r3, r2]

    return;
 8005a88:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	b004      	add	sp, #16
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	fffffbff 	.word	0xfffffbff
 8005a94:	ffffbfff 	.word	0xffffbfff
 8005a98:	ffffdfff 	.word	0xffffdfff
 8005a9c:	ffffefff 	.word	0xffffefff
 8005aa0:	fffff7ff 	.word	0xfffff7ff
 8005aa4:	fffffdff 	.word	0xfffffdff
 8005aa8:	fffffeff 	.word	0xfffffeff

08005aac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	000a      	movs	r2, r1
 8005ab6:	1cfb      	adds	r3, r7, #3
 8005ab8:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	23a4      	movs	r3, #164	@ 0xa4
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	5cd3      	ldrb	r3, [r2, r3]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d101      	bne.n	8005aca <HAL_PCD_SetAddress+0x1e>
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	e016      	b.n	8005af8 <HAL_PCD_SetAddress+0x4c>
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	23a4      	movs	r3, #164	@ 0xa4
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	1cfa      	adds	r2, r7, #3
 8005ad8:	7812      	ldrb	r2, [r2, #0]
 8005ada:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	1cfb      	adds	r3, r7, #3
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	0019      	movs	r1, r3
 8005ae6:	0010      	movs	r0, r2
 8005ae8:	f007 f964 	bl	800cdb4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	23a4      	movs	r3, #164	@ 0xa4
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	2100      	movs	r1, #0
 8005af4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	0018      	movs	r0, r3
 8005afa:	46bd      	mov	sp, r7
 8005afc:	b002      	add	sp, #8
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005b00:	b590      	push	{r4, r7, lr}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	000c      	movs	r4, r1
 8005b0a:	0010      	movs	r0, r2
 8005b0c:	0019      	movs	r1, r3
 8005b0e:	1cfb      	adds	r3, r7, #3
 8005b10:	1c22      	adds	r2, r4, #0
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	003b      	movs	r3, r7
 8005b16:	1c02      	adds	r2, r0, #0
 8005b18:	801a      	strh	r2, [r3, #0]
 8005b1a:	1cbb      	adds	r3, r7, #2
 8005b1c:	1c0a      	adds	r2, r1, #0
 8005b1e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005b20:	230b      	movs	r3, #11
 8005b22:	18fb      	adds	r3, r7, r3
 8005b24:	2200      	movs	r2, #0
 8005b26:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b28:	1cfb      	adds	r3, r7, #3
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	b25b      	sxtb	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	da0f      	bge.n	8005b52 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b32:	1cfb      	adds	r3, r7, #3
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2207      	movs	r2, #7
 8005b38:	401a      	ands	r2, r3
 8005b3a:	0013      	movs	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	189b      	adds	r3, r3, r2
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	3310      	adds	r3, #16
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	18d3      	adds	r3, r2, r3
 8005b48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	705a      	strb	r2, [r3, #1]
 8005b50:	e00f      	b.n	8005b72 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b52:	1cfb      	adds	r3, r7, #3
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2207      	movs	r2, #7
 8005b58:	401a      	ands	r2, r3
 8005b5a:	0013      	movs	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	189b      	adds	r3, r3, r2
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	3351      	adds	r3, #81	@ 0x51
 8005b64:	33ff      	adds	r3, #255	@ 0xff
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	18d3      	adds	r3, r2, r3
 8005b6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005b72:	1cfb      	adds	r3, r7, #3
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2207      	movs	r2, #7
 8005b78:	4013      	ands	r3, r2
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005b80:	003b      	movs	r3, r7
 8005b82:	881a      	ldrh	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	1cba      	adds	r2, r7, #2
 8005b8c:	7812      	ldrb	r2, [r2, #0]
 8005b8e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005b90:	1cbb      	adds	r3, r7, #2
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d102      	bne.n	8005b9e <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	23a4      	movs	r3, #164	@ 0xa4
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	5cd3      	ldrb	r3, [r2, r3]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d101      	bne.n	8005bae <HAL_PCD_EP_Open+0xae>
 8005baa:	2302      	movs	r3, #2
 8005bac:	e013      	b.n	8005bd6 <HAL_PCD_EP_Open+0xd6>
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	23a4      	movs	r3, #164	@ 0xa4
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	2101      	movs	r1, #1
 8005bb6:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	0011      	movs	r1, r2
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	f005 f95d 	bl	800ae80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	23a4      	movs	r3, #164	@ 0xa4
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	2100      	movs	r1, #0
 8005bce:	54d1      	strb	r1, [r2, r3]

  return ret;
 8005bd0:	230b      	movs	r3, #11
 8005bd2:	18fb      	adds	r3, r7, r3
 8005bd4:	781b      	ldrb	r3, [r3, #0]
}
 8005bd6:	0018      	movs	r0, r3
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	b005      	add	sp, #20
 8005bdc:	bd90      	pop	{r4, r7, pc}

08005bde <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b084      	sub	sp, #16
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	000a      	movs	r2, r1
 8005be8:	1cfb      	adds	r3, r7, #3
 8005bea:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005bec:	1cfb      	adds	r3, r7, #3
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	b25b      	sxtb	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	da0f      	bge.n	8005c16 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bf6:	1cfb      	adds	r3, r7, #3
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2207      	movs	r2, #7
 8005bfc:	401a      	ands	r2, r3
 8005bfe:	0013      	movs	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	189b      	adds	r3, r3, r2
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	3310      	adds	r3, #16
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	18d3      	adds	r3, r2, r3
 8005c0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2201      	movs	r2, #1
 8005c12:	705a      	strb	r2, [r3, #1]
 8005c14:	e00f      	b.n	8005c36 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c16:	1cfb      	adds	r3, r7, #3
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2207      	movs	r2, #7
 8005c1c:	401a      	ands	r2, r3
 8005c1e:	0013      	movs	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	189b      	adds	r3, r3, r2
 8005c24:	00db      	lsls	r3, r3, #3
 8005c26:	3351      	adds	r3, #81	@ 0x51
 8005c28:	33ff      	adds	r3, #255	@ 0xff
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	18d3      	adds	r3, r2, r3
 8005c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c36:	1cfb      	adds	r3, r7, #3
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	2207      	movs	r2, #7
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	23a4      	movs	r3, #164	@ 0xa4
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	5cd3      	ldrb	r3, [r2, r3]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d101      	bne.n	8005c54 <HAL_PCD_EP_Close+0x76>
 8005c50:	2302      	movs	r3, #2
 8005c52:	e011      	b.n	8005c78 <HAL_PCD_EP_Close+0x9a>
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	23a4      	movs	r3, #164	@ 0xa4
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	0011      	movs	r1, r2
 8005c66:	0018      	movs	r0, r3
 8005c68:	f005 fcb2 	bl	800b5d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	23a4      	movs	r3, #164	@ 0xa4
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	2100      	movs	r1, #0
 8005c74:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	0018      	movs	r0, r3
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	b004      	add	sp, #16
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	607a      	str	r2, [r7, #4]
 8005c8a:	603b      	str	r3, [r7, #0]
 8005c8c:	200b      	movs	r0, #11
 8005c8e:	183b      	adds	r3, r7, r0
 8005c90:	1c0a      	adds	r2, r1, #0
 8005c92:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c94:	0001      	movs	r1, r0
 8005c96:	187b      	adds	r3, r7, r1
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	2207      	movs	r2, #7
 8005c9c:	401a      	ands	r2, r3
 8005c9e:	0013      	movs	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	189b      	adds	r3, r3, r2
 8005ca4:	00db      	lsls	r3, r3, #3
 8005ca6:	3351      	adds	r3, #81	@ 0x51
 8005ca8:	33ff      	adds	r3, #255	@ 0xff
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	18d3      	adds	r3, r2, r3
 8005cae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cc8:	187b      	adds	r3, r7, r1
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	2207      	movs	r2, #7
 8005cce:	4013      	ands	r3, r2
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	0011      	movs	r1, r2
 8005cde:	0018      	movs	r0, r3
 8005ce0:	f005 fe36 	bl	800b950 <USB_EPStartXfer>

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	b006      	add	sp, #24
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b082      	sub	sp, #8
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	000a      	movs	r2, r1
 8005cf8:	1cfb      	adds	r3, r7, #3
 8005cfa:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005cfc:	1cfb      	adds	r3, r7, #3
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	2207      	movs	r2, #7
 8005d02:	401a      	ands	r2, r3
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	23b6      	movs	r3, #182	@ 0xb6
 8005d08:	0059      	lsls	r1, r3, #1
 8005d0a:	0013      	movs	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	189b      	adds	r3, r3, r2
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	18c3      	adds	r3, r0, r3
 8005d14:	185b      	adds	r3, r3, r1
 8005d16:	681b      	ldr	r3, [r3, #0]
}
 8005d18:	0018      	movs	r0, r3
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	b002      	add	sp, #8
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	607a      	str	r2, [r7, #4]
 8005d2a:	603b      	str	r3, [r7, #0]
 8005d2c:	200b      	movs	r0, #11
 8005d2e:	183b      	adds	r3, r7, r0
 8005d30:	1c0a      	adds	r2, r1, #0
 8005d32:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d34:	183b      	adds	r3, r7, r0
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	2207      	movs	r2, #7
 8005d3a:	401a      	ands	r2, r3
 8005d3c:	0013      	movs	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	189b      	adds	r3, r3, r2
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	3310      	adds	r3, #16
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	18d3      	adds	r3, r2, r3
 8005d4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	2224      	movs	r2, #36	@ 0x24
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d72:	183b      	adds	r3, r7, r0
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2207      	movs	r2, #7
 8005d78:	4013      	ands	r3, r2
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	0011      	movs	r1, r2
 8005d88:	0018      	movs	r0, r3
 8005d8a:	f005 fde1 	bl	800b950 <USB_EPStartXfer>

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	0018      	movs	r0, r3
 8005d92:	46bd      	mov	sp, r7
 8005d94:	b006      	add	sp, #24
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	000a      	movs	r2, r1
 8005da2:	1cfb      	adds	r3, r7, #3
 8005da4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005da6:	1cfb      	adds	r3, r7, #3
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2207      	movs	r2, #7
 8005dac:	4013      	ands	r3, r2
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	7912      	ldrb	r2, [r2, #4]
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d901      	bls.n	8005dba <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e046      	b.n	8005e48 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005dba:	1cfb      	adds	r3, r7, #3
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	b25b      	sxtb	r3, r3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	da0f      	bge.n	8005de4 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dc4:	1cfb      	adds	r3, r7, #3
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2207      	movs	r2, #7
 8005dca:	401a      	ands	r2, r3
 8005dcc:	0013      	movs	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	189b      	adds	r3, r3, r2
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	3310      	adds	r3, #16
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	18d3      	adds	r3, r2, r3
 8005dda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2201      	movs	r2, #1
 8005de0:	705a      	strb	r2, [r3, #1]
 8005de2:	e00d      	b.n	8005e00 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005de4:	1cfb      	adds	r3, r7, #3
 8005de6:	781a      	ldrb	r2, [r3, #0]
 8005de8:	0013      	movs	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	189b      	adds	r3, r3, r2
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	3351      	adds	r3, #81	@ 0x51
 8005df2:	33ff      	adds	r3, #255	@ 0xff
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	18d3      	adds	r3, r2, r3
 8005df8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2201      	movs	r2, #1
 8005e04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e06:	1cfb      	adds	r3, r7, #3
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2207      	movs	r2, #7
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	23a4      	movs	r3, #164	@ 0xa4
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	5cd3      	ldrb	r3, [r2, r3]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d101      	bne.n	8005e24 <HAL_PCD_EP_SetStall+0x8c>
 8005e20:	2302      	movs	r3, #2
 8005e22:	e011      	b.n	8005e48 <HAL_PCD_EP_SetStall+0xb0>
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	23a4      	movs	r3, #164	@ 0xa4
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	0011      	movs	r1, r2
 8005e36:	0018      	movs	r0, r3
 8005e38:	f006 feba 	bl	800cbb0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	23a4      	movs	r3, #164	@ 0xa4
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	2100      	movs	r1, #0
 8005e44:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	0018      	movs	r0, r3
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	b004      	add	sp, #16
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	000a      	movs	r2, r1
 8005e5a:	1cfb      	adds	r3, r7, #3
 8005e5c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005e5e:	1cfb      	adds	r3, r7, #3
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	220f      	movs	r2, #15
 8005e64:	4013      	ands	r3, r2
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	7912      	ldrb	r2, [r2, #4]
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d901      	bls.n	8005e72 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e048      	b.n	8005f04 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e72:	1cfb      	adds	r3, r7, #3
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	b25b      	sxtb	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	da0f      	bge.n	8005e9c <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e7c:	1cfb      	adds	r3, r7, #3
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2207      	movs	r2, #7
 8005e82:	401a      	ands	r2, r3
 8005e84:	0013      	movs	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	189b      	adds	r3, r3, r2
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	3310      	adds	r3, #16
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	18d3      	adds	r3, r2, r3
 8005e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2201      	movs	r2, #1
 8005e98:	705a      	strb	r2, [r3, #1]
 8005e9a:	e00f      	b.n	8005ebc <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e9c:	1cfb      	adds	r3, r7, #3
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	2207      	movs	r2, #7
 8005ea2:	401a      	ands	r2, r3
 8005ea4:	0013      	movs	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	189b      	adds	r3, r3, r2
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	3351      	adds	r3, #81	@ 0x51
 8005eae:	33ff      	adds	r3, #255	@ 0xff
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	18d3      	adds	r3, r2, r3
 8005eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ec2:	1cfb      	adds	r3, r7, #3
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	2207      	movs	r2, #7
 8005ec8:	4013      	ands	r3, r2
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	23a4      	movs	r3, #164	@ 0xa4
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	5cd3      	ldrb	r3, [r2, r3]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d101      	bne.n	8005ee0 <HAL_PCD_EP_ClrStall+0x90>
 8005edc:	2302      	movs	r3, #2
 8005ede:	e011      	b.n	8005f04 <HAL_PCD_EP_ClrStall+0xb4>
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	23a4      	movs	r3, #164	@ 0xa4
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	0011      	movs	r1, r2
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f006 feac 	bl	800cc50 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	23a4      	movs	r3, #164	@ 0xa4
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	2100      	movs	r1, #0
 8005f00:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	0018      	movs	r0, r3
 8005f06:	46bd      	mov	sp, r7
 8005f08:	b004      	add	sp, #16
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005f0c:	b5b0      	push	{r4, r5, r7, lr}
 8005f0e:	b096      	sub	sp, #88	@ 0x58
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005f14:	f000 fbea 	bl	80066ec <PCD_EP_ISR_Handler+0x7e0>
  {
    wIstr = hpcd->Instance->ISTR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	2048      	movs	r0, #72	@ 0x48
 8005f1e:	183b      	adds	r3, r7, r0
 8005f20:	2144      	movs	r1, #68	@ 0x44
 8005f22:	5a52      	ldrh	r2, [r2, r1]
 8005f24:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005f26:	183b      	adds	r3, r7, r0
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	244f      	movs	r4, #79	@ 0x4f
 8005f2e:	193b      	adds	r3, r7, r4
 8005f30:	210f      	movs	r1, #15
 8005f32:	400a      	ands	r2, r1
 8005f34:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8005f36:	193b      	adds	r3, r7, r4
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d000      	beq.n	8005f40 <PCD_EP_ISR_Handler+0x34>
 8005f3e:	e18d      	b.n	800625c <PCD_EP_ISR_Handler+0x350>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005f40:	183b      	adds	r3, r7, r0
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	2210      	movs	r2, #16
 8005f46:	4013      	ands	r3, r2
 8005f48:	d152      	bne.n	8005ff0 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	881b      	ldrh	r3, [r3, #0]
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	200e      	movs	r0, #14
 8005f54:	183b      	adds	r3, r7, r0
 8005f56:	49ba      	ldr	r1, [pc, #744]	@ (8006240 <PCD_EP_ISR_Handler+0x334>)
 8005f58:	400a      	ands	r2, r1
 8005f5a:	801a      	strh	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	183a      	adds	r2, r7, r0
 8005f62:	8812      	ldrh	r2, [r2, #0]
 8005f64:	49b7      	ldr	r1, [pc, #732]	@ (8006244 <PCD_EP_ISR_Handler+0x338>)
 8005f66:	430a      	orrs	r2, r1
 8005f68:	b292      	uxth	r2, r2
 8005f6a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	3310      	adds	r3, #16
 8005f70:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2250      	movs	r2, #80	@ 0x50
 8005f78:	5a9b      	ldrh	r3, [r3, r2]
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	001a      	movs	r2, r3
 8005f7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	18d2      	adds	r2, r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	18d3      	adds	r3, r2, r3
 8005f8c:	4aae      	ldr	r2, [pc, #696]	@ (8006248 <PCD_EP_ISR_Handler+0x33c>)
 8005f8e:	4694      	mov	ip, r2
 8005f90:	4463      	add	r3, ip
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	059b      	lsls	r3, r3, #22
 8005f96:	0d9a      	lsrs	r2, r3, #22
 8005f98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f9a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005f9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f9e:	695a      	ldr	r2, [r3, #20]
 8005fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fa2:	69db      	ldr	r3, [r3, #28]
 8005fa4:	18d2      	adds	r2, r2, r3
 8005fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fa8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2100      	movs	r1, #0
 8005fae:	0018      	movs	r0, r3
 8005fb0:	f00b fdb0 	bl	8011b14 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	7b1b      	ldrb	r3, [r3, #12]
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <PCD_EP_ISR_Handler+0xb6>
 8005fbe:	f000 fb95 	bl	80066ec <PCD_EP_ISR_Handler+0x7e0>
 8005fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <PCD_EP_ISR_Handler+0xc2>
 8005fca:	f000 fb8f 	bl	80066ec <PCD_EP_ISR_Handler+0x7e0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	7b1b      	ldrb	r3, [r3, #12]
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2280      	movs	r2, #128	@ 0x80
 8005fd6:	4252      	negs	r2, r2
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	0011      	movs	r1, r2
 8005fe2:	224c      	movs	r2, #76	@ 0x4c
 8005fe4:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	731a      	strb	r2, [r3, #12]
 8005fec:	f000 fb7e 	bl	80066ec <PCD_EP_ISR_Handler+0x7e0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3351      	adds	r3, #81	@ 0x51
 8005ff4:	33ff      	adds	r3, #255	@ 0xff
 8005ff6:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	214c      	movs	r1, #76	@ 0x4c
 8005ffe:	187b      	adds	r3, r7, r1
 8006000:	8812      	ldrh	r2, [r2, #0]
 8006002:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006004:	187b      	adds	r3, r7, r1
 8006006:	881a      	ldrh	r2, [r3, #0]
 8006008:	2380      	movs	r3, #128	@ 0x80
 800600a:	011b      	lsls	r3, r3, #4
 800600c:	4013      	ands	r3, r2
 800600e:	d037      	beq.n	8006080 <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2250      	movs	r2, #80	@ 0x50
 8006016:	5a9b      	ldrh	r3, [r3, r2]
 8006018:	b29b      	uxth	r3, r3
 800601a:	001a      	movs	r2, r3
 800601c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	00db      	lsls	r3, r3, #3
 8006022:	18d2      	adds	r2, r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	18d3      	adds	r3, r2, r3
 800602a:	4a88      	ldr	r2, [pc, #544]	@ (800624c <PCD_EP_ISR_Handler+0x340>)
 800602c:	4694      	mov	ip, r2
 800602e:	4463      	add	r3, ip
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	059b      	lsls	r3, r3, #22
 8006034:	0d9a      	lsrs	r2, r3, #22
 8006036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006038:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	22a6      	movs	r2, #166	@ 0xa6
 8006042:	0092      	lsls	r2, r2, #2
 8006044:	1899      	adds	r1, r3, r2
 8006046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006048:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800604a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800604c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800604e:	b29b      	uxth	r3, r3
 8006050:	f006 ff31 	bl	800ceb6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	b29a      	uxth	r2, r3
 800605c:	2010      	movs	r0, #16
 800605e:	183b      	adds	r3, r7, r0
 8006060:	497b      	ldr	r1, [pc, #492]	@ (8006250 <PCD_EP_ISR_Handler+0x344>)
 8006062:	400a      	ands	r2, r1
 8006064:	801a      	strh	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	183a      	adds	r2, r7, r0
 800606c:	8812      	ldrh	r2, [r2, #0]
 800606e:	2180      	movs	r1, #128	@ 0x80
 8006070:	430a      	orrs	r2, r1
 8006072:	b292      	uxth	r2, r2
 8006074:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	0018      	movs	r0, r3
 800607a:	f00b fd15 	bl	8011aa8 <HAL_PCD_SetupStageCallback>
 800607e:	e335      	b.n	80066ec <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006080:	234c      	movs	r3, #76	@ 0x4c
 8006082:	18fb      	adds	r3, r7, r3
 8006084:	2200      	movs	r2, #0
 8006086:	5e9b      	ldrsh	r3, [r3, r2]
 8006088:	2b00      	cmp	r3, #0
 800608a:	db00      	blt.n	800608e <PCD_EP_ISR_Handler+0x182>
 800608c:	e32e      	b.n	80066ec <PCD_EP_ISR_Handler+0x7e0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	881b      	ldrh	r3, [r3, #0]
 8006094:	b29a      	uxth	r2, r3
 8006096:	201e      	movs	r0, #30
 8006098:	183b      	adds	r3, r7, r0
 800609a:	496d      	ldr	r1, [pc, #436]	@ (8006250 <PCD_EP_ISR_Handler+0x344>)
 800609c:	400a      	ands	r2, r1
 800609e:	801a      	strh	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	183a      	adds	r2, r7, r0
 80060a6:	8812      	ldrh	r2, [r2, #0]
 80060a8:	2180      	movs	r1, #128	@ 0x80
 80060aa:	430a      	orrs	r2, r1
 80060ac:	b292      	uxth	r2, r2
 80060ae:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2250      	movs	r2, #80	@ 0x50
 80060b6:	5a9b      	ldrh	r3, [r3, r2]
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	001a      	movs	r2, r3
 80060bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	18d2      	adds	r2, r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	18d3      	adds	r3, r2, r3
 80060ca:	4a60      	ldr	r2, [pc, #384]	@ (800624c <PCD_EP_ISR_Handler+0x340>)
 80060cc:	4694      	mov	ip, r2
 80060ce:	4463      	add	r3, ip
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	059b      	lsls	r3, r3, #22
 80060d4:	0d9a      	lsrs	r2, r3, #22
 80060d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060d8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80060da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d01a      	beq.n	8006118 <PCD_EP_ISR_Handler+0x20c>
 80060e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d016      	beq.n	8006118 <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6818      	ldr	r0, [r3, #0]
 80060ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060f0:	6959      	ldr	r1, [r3, #20]
 80060f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060f4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80060f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060f8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	f006 fedb 	bl	800ceb6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006102:	695a      	ldr	r2, [r3, #20]
 8006104:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	18d2      	adds	r2, r2, r3
 800610a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800610c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2100      	movs	r1, #0
 8006112:	0018      	movs	r0, r3
 8006114:	f00b fcdd 	bl	8011ad2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	214c      	movs	r1, #76	@ 0x4c
 800611e:	187b      	adds	r3, r7, r1
 8006120:	8812      	ldrh	r2, [r2, #0]
 8006122:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006124:	187b      	adds	r3, r7, r1
 8006126:	881a      	ldrh	r2, [r3, #0]
 8006128:	2380      	movs	r3, #128	@ 0x80
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	4013      	ands	r3, r2
 800612e:	d000      	beq.n	8006132 <PCD_EP_ISR_Handler+0x226>
 8006130:	e2dc      	b.n	80066ec <PCD_EP_ISR_Handler+0x7e0>
 8006132:	187b      	adds	r3, r7, r1
 8006134:	881a      	ldrh	r2, [r3, #0]
 8006136:	23c0      	movs	r3, #192	@ 0xc0
 8006138:	019b      	lsls	r3, r3, #6
 800613a:	401a      	ands	r2, r3
 800613c:	23c0      	movs	r3, #192	@ 0xc0
 800613e:	019b      	lsls	r3, r3, #6
 8006140:	429a      	cmp	r2, r3
 8006142:	d100      	bne.n	8006146 <PCD_EP_ISR_Handler+0x23a>
 8006144:	e2d2      	b.n	80066ec <PCD_EP_ISR_Handler+0x7e0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	61bb      	str	r3, [r7, #24]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2250      	movs	r2, #80	@ 0x50
 8006152:	5a9b      	ldrh	r3, [r3, r2]
 8006154:	b29b      	uxth	r3, r3
 8006156:	001a      	movs	r2, r3
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	189b      	adds	r3, r3, r2
 800615c:	61bb      	str	r3, [r7, #24]
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	4a3a      	ldr	r2, [pc, #232]	@ (800624c <PCD_EP_ISR_Handler+0x340>)
 8006162:	4694      	mov	ip, r2
 8006164:	4463      	add	r3, ip
 8006166:	617b      	str	r3, [r7, #20]
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	b29b      	uxth	r3, r3
 800616e:	059b      	lsls	r3, r3, #22
 8006170:	0d9b      	lsrs	r3, r3, #22
 8006172:	b29a      	uxth	r2, r3
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	801a      	strh	r2, [r3, #0]
 8006178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d108      	bne.n	8006192 <PCD_EP_ISR_Handler+0x286>
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	b29b      	uxth	r3, r3
 8006186:	4a2f      	ldr	r2, [pc, #188]	@ (8006244 <PCD_EP_ISR_Handler+0x338>)
 8006188:	4313      	orrs	r3, r2
 800618a:	b29a      	uxth	r2, r3
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	801a      	strh	r2, [r3, #0]
 8006190:	e035      	b.n	80061fe <PCD_EP_ISR_Handler+0x2f2>
 8006192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	2b3e      	cmp	r3, #62	@ 0x3e
 8006198:	d817      	bhi.n	80061ca <PCD_EP_ISR_Handler+0x2be>
 800619a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	085b      	lsrs	r3, r3, #1
 80061a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80061a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	2201      	movs	r2, #1
 80061a8:	4013      	ands	r3, r2
 80061aa:	d002      	beq.n	80061b2 <PCD_EP_ISR_Handler+0x2a6>
 80061ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061ae:	3301      	adds	r3, #1
 80061b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	029b      	lsls	r3, r3, #10
 80061be:	b29b      	uxth	r3, r3
 80061c0:	4313      	orrs	r3, r2
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	801a      	strh	r2, [r3, #0]
 80061c8:	e019      	b.n	80061fe <PCD_EP_ISR_Handler+0x2f2>
 80061ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	095b      	lsrs	r3, r3, #5
 80061d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80061d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	221f      	movs	r2, #31
 80061d8:	4013      	ands	r3, r2
 80061da:	d102      	bne.n	80061e2 <PCD_EP_ISR_Handler+0x2d6>
 80061dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061de:	3b01      	subs	r3, #1
 80061e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	029b      	lsls	r3, r3, #10
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	4313      	orrs	r3, r2
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	4a13      	ldr	r2, [pc, #76]	@ (8006244 <PCD_EP_ISR_Handler+0x338>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	b29a      	uxth	r2, r3
 8006206:	2012      	movs	r0, #18
 8006208:	183b      	adds	r3, r7, r0
 800620a:	4912      	ldr	r1, [pc, #72]	@ (8006254 <PCD_EP_ISR_Handler+0x348>)
 800620c:	400a      	ands	r2, r1
 800620e:	801a      	strh	r2, [r3, #0]
 8006210:	183b      	adds	r3, r7, r0
 8006212:	183a      	adds	r2, r7, r0
 8006214:	8812      	ldrh	r2, [r2, #0]
 8006216:	2180      	movs	r1, #128	@ 0x80
 8006218:	0149      	lsls	r1, r1, #5
 800621a:	404a      	eors	r2, r1
 800621c:	801a      	strh	r2, [r3, #0]
 800621e:	183b      	adds	r3, r7, r0
 8006220:	183a      	adds	r2, r7, r0
 8006222:	8812      	ldrh	r2, [r2, #0]
 8006224:	2180      	movs	r1, #128	@ 0x80
 8006226:	0189      	lsls	r1, r1, #6
 8006228:	404a      	eors	r2, r1
 800622a:	801a      	strh	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	183a      	adds	r2, r7, r0
 8006232:	8812      	ldrh	r2, [r2, #0]
 8006234:	4908      	ldr	r1, [pc, #32]	@ (8006258 <PCD_EP_ISR_Handler+0x34c>)
 8006236:	430a      	orrs	r2, r1
 8006238:	b292      	uxth	r2, r2
 800623a:	801a      	strh	r2, [r3, #0]
 800623c:	e256      	b.n	80066ec <PCD_EP_ISR_Handler+0x7e0>
 800623e:	46c0      	nop			@ (mov r8, r8)
 8006240:	ffff8f0f 	.word	0xffff8f0f
 8006244:	ffff8000 	.word	0xffff8000
 8006248:	00000402 	.word	0x00000402
 800624c:	00000406 	.word	0x00000406
 8006250:	00000f8f 	.word	0x00000f8f
 8006254:	ffffbf8f 	.word	0xffffbf8f
 8006258:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	001a      	movs	r2, r3
 8006262:	204f      	movs	r0, #79	@ 0x4f
 8006264:	183b      	adds	r3, r7, r0
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	18d2      	adds	r2, r2, r3
 800626c:	214c      	movs	r1, #76	@ 0x4c
 800626e:	187b      	adds	r3, r7, r1
 8006270:	8812      	ldrh	r2, [r2, #0]
 8006272:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006274:	187b      	adds	r3, r7, r1
 8006276:	2200      	movs	r2, #0
 8006278:	5e9b      	ldrsh	r3, [r3, r2]
 800627a:	2b00      	cmp	r3, #0
 800627c:	db00      	blt.n	8006280 <PCD_EP_ISR_Handler+0x374>
 800627e:	e0fa      	b.n	8006476 <PCD_EP_ISR_Handler+0x56a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	001a      	movs	r2, r3
 8006286:	183b      	adds	r3, r7, r0
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	18d3      	adds	r3, r2, r3
 800628e:	881b      	ldrh	r3, [r3, #0]
 8006290:	b29a      	uxth	r2, r3
 8006292:	244a      	movs	r4, #74	@ 0x4a
 8006294:	193b      	adds	r3, r7, r4
 8006296:	49d1      	ldr	r1, [pc, #836]	@ (80065dc <PCD_EP_ISR_Handler+0x6d0>)
 8006298:	400a      	ands	r2, r1
 800629a:	801a      	strh	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	001a      	movs	r2, r3
 80062a2:	183b      	adds	r3, r7, r0
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	18d3      	adds	r3, r2, r3
 80062aa:	193a      	adds	r2, r7, r4
 80062ac:	8812      	ldrh	r2, [r2, #0]
 80062ae:	2180      	movs	r1, #128	@ 0x80
 80062b0:	430a      	orrs	r2, r1
 80062b2:	b292      	uxth	r2, r2
 80062b4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80062b6:	183b      	adds	r3, r7, r0
 80062b8:	781a      	ldrb	r2, [r3, #0]
 80062ba:	0013      	movs	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	189b      	adds	r3, r3, r2
 80062c0:	00db      	lsls	r3, r3, #3
 80062c2:	3351      	adds	r3, #81	@ 0x51
 80062c4:	33ff      	adds	r3, #255	@ 0xff
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	18d3      	adds	r3, r2, r3
 80062ca:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80062cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062ce:	7b1b      	ldrb	r3, [r3, #12]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d125      	bne.n	8006320 <PCD_EP_ISR_Handler+0x414>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2250      	movs	r2, #80	@ 0x50
 80062da:	5a9b      	ldrh	r3, [r3, r2]
 80062dc:	b29b      	uxth	r3, r3
 80062de:	001a      	movs	r2, r3
 80062e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	00db      	lsls	r3, r3, #3
 80062e6:	18d2      	adds	r2, r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	18d3      	adds	r3, r2, r3
 80062ee:	4abc      	ldr	r2, [pc, #752]	@ (80065e0 <PCD_EP_ISR_Handler+0x6d4>)
 80062f0:	4694      	mov	ip, r2
 80062f2:	4463      	add	r3, ip
 80062f4:	881a      	ldrh	r2, [r3, #0]
 80062f6:	2450      	movs	r4, #80	@ 0x50
 80062f8:	193b      	adds	r3, r7, r4
 80062fa:	0592      	lsls	r2, r2, #22
 80062fc:	0d92      	lsrs	r2, r2, #22
 80062fe:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8006300:	193b      	adds	r3, r7, r4
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d100      	bne.n	800630a <PCD_EP_ISR_Handler+0x3fe>
 8006308:	e08d      	b.n	8006426 <PCD_EP_ISR_Handler+0x51a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6818      	ldr	r0, [r3, #0]
 800630e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006310:	6959      	ldr	r1, [r3, #20]
 8006312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006314:	88da      	ldrh	r2, [r3, #6]
 8006316:	193b      	adds	r3, r7, r4
 8006318:	881b      	ldrh	r3, [r3, #0]
 800631a:	f006 fdcc 	bl	800ceb6 <USB_ReadPMA>
 800631e:	e082      	b.n	8006426 <PCD_EP_ISR_Handler+0x51a>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006320:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006322:	78db      	ldrb	r3, [r3, #3]
 8006324:	2b02      	cmp	r3, #2
 8006326:	d10c      	bne.n	8006342 <PCD_EP_ISR_Handler+0x436>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006328:	2350      	movs	r3, #80	@ 0x50
 800632a:	18fc      	adds	r4, r7, r3
 800632c:	234c      	movs	r3, #76	@ 0x4c
 800632e:	18fb      	adds	r3, r7, r3
 8006330:	881a      	ldrh	r2, [r3, #0]
 8006332:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	0018      	movs	r0, r3
 8006338:	f000 f9ec 	bl	8006714 <HAL_PCD_EP_DB_Receive>
 800633c:	0003      	movs	r3, r0
 800633e:	8023      	strh	r3, [r4, #0]
 8006340:	e071      	b.n	8006426 <PCD_EP_ISR_Handler+0x51a>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	001a      	movs	r2, r3
 8006348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	18d3      	adds	r3, r2, r3
 8006350:	881b      	ldrh	r3, [r3, #0]
 8006352:	b29a      	uxth	r2, r3
 8006354:	2052      	movs	r0, #82	@ 0x52
 8006356:	183b      	adds	r3, r7, r0
 8006358:	49a2      	ldr	r1, [pc, #648]	@ (80065e4 <PCD_EP_ISR_Handler+0x6d8>)
 800635a:	400a      	ands	r2, r1
 800635c:	801a      	strh	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	001a      	movs	r2, r3
 8006364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	18d3      	adds	r3, r2, r3
 800636c:	183a      	adds	r2, r7, r0
 800636e:	8812      	ldrh	r2, [r2, #0]
 8006370:	499d      	ldr	r1, [pc, #628]	@ (80065e8 <PCD_EP_ISR_Handler+0x6dc>)
 8006372:	430a      	orrs	r2, r1
 8006374:	b292      	uxth	r2, r2
 8006376:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	001a      	movs	r2, r3
 800637e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	18d3      	adds	r3, r2, r3
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	b29b      	uxth	r3, r3
 800638a:	001a      	movs	r2, r3
 800638c:	2380      	movs	r3, #128	@ 0x80
 800638e:	01db      	lsls	r3, r3, #7
 8006390:	4013      	ands	r3, r2
 8006392:	d024      	beq.n	80063de <PCD_EP_ISR_Handler+0x4d2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2250      	movs	r2, #80	@ 0x50
 800639a:	5a9b      	ldrh	r3, [r3, r2]
 800639c:	b29b      	uxth	r3, r3
 800639e:	001a      	movs	r2, r3
 80063a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	00db      	lsls	r3, r3, #3
 80063a6:	18d2      	adds	r2, r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	18d3      	adds	r3, r2, r3
 80063ae:	4a8f      	ldr	r2, [pc, #572]	@ (80065ec <PCD_EP_ISR_Handler+0x6e0>)
 80063b0:	4694      	mov	ip, r2
 80063b2:	4463      	add	r3, ip
 80063b4:	881a      	ldrh	r2, [r3, #0]
 80063b6:	2450      	movs	r4, #80	@ 0x50
 80063b8:	193b      	adds	r3, r7, r4
 80063ba:	0592      	lsls	r2, r2, #22
 80063bc:	0d92      	lsrs	r2, r2, #22
 80063be:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80063c0:	193b      	adds	r3, r7, r4
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d02e      	beq.n	8006426 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6818      	ldr	r0, [r3, #0]
 80063cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063ce:	6959      	ldr	r1, [r3, #20]
 80063d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063d2:	891a      	ldrh	r2, [r3, #8]
 80063d4:	193b      	adds	r3, r7, r4
 80063d6:	881b      	ldrh	r3, [r3, #0]
 80063d8:	f006 fd6d 	bl	800ceb6 <USB_ReadPMA>
 80063dc:	e023      	b.n	8006426 <PCD_EP_ISR_Handler+0x51a>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2250      	movs	r2, #80	@ 0x50
 80063e4:	5a9b      	ldrh	r3, [r3, r2]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	001a      	movs	r2, r3
 80063ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	18d2      	adds	r2, r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	18d3      	adds	r3, r2, r3
 80063f8:	4a79      	ldr	r2, [pc, #484]	@ (80065e0 <PCD_EP_ISR_Handler+0x6d4>)
 80063fa:	4694      	mov	ip, r2
 80063fc:	4463      	add	r3, ip
 80063fe:	881a      	ldrh	r2, [r3, #0]
 8006400:	2450      	movs	r4, #80	@ 0x50
 8006402:	193b      	adds	r3, r7, r4
 8006404:	0592      	lsls	r2, r2, #22
 8006406:	0d92      	lsrs	r2, r2, #22
 8006408:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800640a:	193b      	adds	r3, r7, r4
 800640c:	881b      	ldrh	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d009      	beq.n	8006426 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6818      	ldr	r0, [r3, #0]
 8006416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006418:	6959      	ldr	r1, [r3, #20]
 800641a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800641c:	895a      	ldrh	r2, [r3, #10]
 800641e:	193b      	adds	r3, r7, r4
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	f006 fd48 	bl	800ceb6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006428:	69da      	ldr	r2, [r3, #28]
 800642a:	2150      	movs	r1, #80	@ 0x50
 800642c:	187b      	adds	r3, r7, r1
 800642e:	881b      	ldrh	r3, [r3, #0]
 8006430:	18d2      	adds	r2, r2, r3
 8006432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006434:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006438:	695a      	ldr	r2, [r3, #20]
 800643a:	187b      	adds	r3, r7, r1
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	18d2      	adds	r2, r2, r3
 8006440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006442:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d005      	beq.n	8006458 <PCD_EP_ISR_Handler+0x54c>
 800644c:	187b      	adds	r3, r7, r1
 800644e:	881a      	ldrh	r2, [r3, #0]
 8006450:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	429a      	cmp	r2, r3
 8006456:	d207      	bcs.n	8006468 <PCD_EP_ISR_Handler+0x55c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006458:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800645a:	781a      	ldrb	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	0011      	movs	r1, r2
 8006460:	0018      	movs	r0, r3
 8006462:	f00b fb36 	bl	8011ad2 <HAL_PCD_DataOutStageCallback>
 8006466:	e006      	b.n	8006476 <PCD_EP_ISR_Handler+0x56a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800646e:	0011      	movs	r1, r2
 8006470:	0018      	movs	r0, r3
 8006472:	f005 fa6d 	bl	800b950 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006476:	244c      	movs	r4, #76	@ 0x4c
 8006478:	193b      	adds	r3, r7, r4
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	2280      	movs	r2, #128	@ 0x80
 800647e:	4013      	ands	r3, r2
 8006480:	d100      	bne.n	8006484 <PCD_EP_ISR_Handler+0x578>
 8006482:	e133      	b.n	80066ec <PCD_EP_ISR_Handler+0x7e0>
      {
        ep = &hpcd->IN_ep[epindex];
 8006484:	204f      	movs	r0, #79	@ 0x4f
 8006486:	183b      	adds	r3, r7, r0
 8006488:	781a      	ldrb	r2, [r3, #0]
 800648a:	0013      	movs	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	189b      	adds	r3, r3, r2
 8006490:	00db      	lsls	r3, r3, #3
 8006492:	3310      	adds	r3, #16
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	18d3      	adds	r3, r2, r3
 8006498:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	001a      	movs	r2, r3
 80064a0:	183b      	adds	r3, r7, r0
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	18d3      	adds	r3, r2, r3
 80064a8:	881b      	ldrh	r3, [r3, #0]
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	2542      	movs	r5, #66	@ 0x42
 80064ae:	197b      	adds	r3, r7, r5
 80064b0:	494f      	ldr	r1, [pc, #316]	@ (80065f0 <PCD_EP_ISR_Handler+0x6e4>)
 80064b2:	400a      	ands	r2, r1
 80064b4:	801a      	strh	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	001a      	movs	r2, r3
 80064bc:	183b      	adds	r3, r7, r0
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	18d3      	adds	r3, r2, r3
 80064c4:	197a      	adds	r2, r7, r5
 80064c6:	8812      	ldrh	r2, [r2, #0]
 80064c8:	494a      	ldr	r1, [pc, #296]	@ (80065f4 <PCD_EP_ISR_Handler+0x6e8>)
 80064ca:	430a      	orrs	r2, r1
 80064cc:	b292      	uxth	r2, r2
 80064ce:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80064d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064d2:	78db      	ldrb	r3, [r3, #3]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d000      	beq.n	80064da <PCD_EP_ISR_Handler+0x5ce>
 80064d8:	e0af      	b.n	800663a <PCD_EP_ISR_Handler+0x72e>
        {
          ep->xfer_len = 0U;
 80064da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064dc:	2200      	movs	r2, #0
 80064de:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80064e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064e2:	7b1b      	ldrb	r3, [r3, #12]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d100      	bne.n	80064ea <PCD_EP_ISR_Handler+0x5de>
 80064e8:	e09f      	b.n	800662a <PCD_EP_ISR_Handler+0x71e>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80064ea:	193b      	adds	r3, r7, r4
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	2240      	movs	r2, #64	@ 0x40
 80064f0:	4013      	ands	r3, r2
 80064f2:	d046      	beq.n	8006582 <PCD_EP_ISR_Handler+0x676>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80064f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064f6:	785b      	ldrb	r3, [r3, #1]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d125      	bne.n	8006548 <PCD_EP_ISR_Handler+0x63c>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	627b      	str	r3, [r7, #36]	@ 0x24
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2250      	movs	r2, #80	@ 0x50
 8006508:	5a9b      	ldrh	r3, [r3, r2]
 800650a:	b29b      	uxth	r3, r3
 800650c:	001a      	movs	r2, r3
 800650e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006510:	189b      	adds	r3, r3, r2
 8006512:	627b      	str	r3, [r7, #36]	@ 0x24
 8006514:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	00da      	lsls	r2, r3, #3
 800651a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651c:	18d3      	adds	r3, r2, r3
 800651e:	4a33      	ldr	r2, [pc, #204]	@ (80065ec <PCD_EP_ISR_Handler+0x6e0>)
 8006520:	4694      	mov	ip, r2
 8006522:	4463      	add	r3, ip
 8006524:	623b      	str	r3, [r7, #32]
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	b29b      	uxth	r3, r3
 800652c:	059b      	lsls	r3, r3, #22
 800652e:	0d9b      	lsrs	r3, r3, #22
 8006530:	b29a      	uxth	r2, r3
 8006532:	6a3b      	ldr	r3, [r7, #32]
 8006534:	801a      	strh	r2, [r3, #0]
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	b29b      	uxth	r3, r3
 800653c:	4a2d      	ldr	r2, [pc, #180]	@ (80065f4 <PCD_EP_ISR_Handler+0x6e8>)
 800653e:	4313      	orrs	r3, r2
 8006540:	b29a      	uxth	r2, r3
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	801a      	strh	r2, [r3, #0]
 8006546:	e070      	b.n	800662a <PCD_EP_ISR_Handler+0x71e>
 8006548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800654a:	785b      	ldrb	r3, [r3, #1]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d16c      	bne.n	800662a <PCD_EP_ISR_Handler+0x71e>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2250      	movs	r2, #80	@ 0x50
 800655c:	5a9b      	ldrh	r3, [r3, r2]
 800655e:	b29b      	uxth	r3, r3
 8006560:	001a      	movs	r2, r3
 8006562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006564:	189b      	adds	r3, r3, r2
 8006566:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	00da      	lsls	r2, r3, #3
 800656e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006570:	18d3      	adds	r3, r2, r3
 8006572:	4a1e      	ldr	r2, [pc, #120]	@ (80065ec <PCD_EP_ISR_Handler+0x6e0>)
 8006574:	4694      	mov	ip, r2
 8006576:	4463      	add	r3, ip
 8006578:	62bb      	str	r3, [r7, #40]	@ 0x28
 800657a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657c:	2200      	movs	r2, #0
 800657e:	801a      	strh	r2, [r3, #0]
 8006580:	e053      	b.n	800662a <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006588:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800658a:	785b      	ldrb	r3, [r3, #1]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d133      	bne.n	80065f8 <PCD_EP_ISR_Handler+0x6ec>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	637b      	str	r3, [r7, #52]	@ 0x34
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2250      	movs	r2, #80	@ 0x50
 800659c:	5a9b      	ldrh	r3, [r3, r2]
 800659e:	b29b      	uxth	r3, r3
 80065a0:	001a      	movs	r2, r3
 80065a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065a4:	189b      	adds	r3, r3, r2
 80065a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80065a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	00da      	lsls	r2, r3, #3
 80065ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065b0:	18d3      	adds	r3, r2, r3
 80065b2:	4a0b      	ldr	r2, [pc, #44]	@ (80065e0 <PCD_EP_ISR_Handler+0x6d4>)
 80065b4:	4694      	mov	ip, r2
 80065b6:	4463      	add	r3, ip
 80065b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80065ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	059b      	lsls	r3, r3, #22
 80065c2:	0d9b      	lsrs	r3, r3, #22
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c8:	801a      	strh	r2, [r3, #0]
 80065ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	4a08      	ldr	r2, [pc, #32]	@ (80065f4 <PCD_EP_ISR_Handler+0x6e8>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d8:	801a      	strh	r2, [r3, #0]
 80065da:	e026      	b.n	800662a <PCD_EP_ISR_Handler+0x71e>
 80065dc:	00000f8f 	.word	0x00000f8f
 80065e0:	00000406 	.word	0x00000406
 80065e4:	ffff8f8f 	.word	0xffff8f8f
 80065e8:	ffff80c0 	.word	0xffff80c0
 80065ec:	00000402 	.word	0x00000402
 80065f0:	ffff8f0f 	.word	0xffff8f0f
 80065f4:	ffff8000 	.word	0xffff8000
 80065f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065fa:	785b      	ldrb	r3, [r3, #1]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d114      	bne.n	800662a <PCD_EP_ISR_Handler+0x71e>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2250      	movs	r2, #80	@ 0x50
 8006606:	5a9b      	ldrh	r3, [r3, r2]
 8006608:	b29b      	uxth	r3, r3
 800660a:	001a      	movs	r2, r3
 800660c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800660e:	189b      	adds	r3, r3, r2
 8006610:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	00da      	lsls	r2, r3, #3
 8006618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800661a:	18d3      	adds	r3, r2, r3
 800661c:	4a3b      	ldr	r2, [pc, #236]	@ (800670c <PCD_EP_ISR_Handler+0x800>)
 800661e:	4694      	mov	ip, r2
 8006620:	4463      	add	r3, ip
 8006622:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006626:	2200      	movs	r2, #0
 8006628:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800662a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800662c:	781a      	ldrb	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	0011      	movs	r1, r2
 8006632:	0018      	movs	r0, r3
 8006634:	f00b fa6e 	bl	8011b14 <HAL_PCD_DataInStageCallback>
 8006638:	e058      	b.n	80066ec <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800663a:	234c      	movs	r3, #76	@ 0x4c
 800663c:	18fb      	adds	r3, r7, r3
 800663e:	881a      	ldrh	r2, [r3, #0]
 8006640:	2380      	movs	r3, #128	@ 0x80
 8006642:	005b      	lsls	r3, r3, #1
 8006644:	4013      	ands	r3, r2
 8006646:	d149      	bne.n	80066dc <PCD_EP_ISR_Handler+0x7d0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2250      	movs	r2, #80	@ 0x50
 800664e:	5a9b      	ldrh	r3, [r3, r2]
 8006650:	b29b      	uxth	r3, r3
 8006652:	001a      	movs	r2, r3
 8006654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	00db      	lsls	r3, r3, #3
 800665a:	18d2      	adds	r2, r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	18d3      	adds	r3, r2, r3
 8006662:	4a2b      	ldr	r2, [pc, #172]	@ (8006710 <PCD_EP_ISR_Handler+0x804>)
 8006664:	4694      	mov	ip, r2
 8006666:	4463      	add	r3, ip
 8006668:	881a      	ldrh	r2, [r3, #0]
 800666a:	2140      	movs	r1, #64	@ 0x40
 800666c:	187b      	adds	r3, r7, r1
 800666e:	0592      	lsls	r2, r2, #22
 8006670:	0d92      	lsrs	r2, r2, #22
 8006672:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8006674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006676:	699a      	ldr	r2, [r3, #24]
 8006678:	187b      	adds	r3, r7, r1
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	429a      	cmp	r2, r3
 800667e:	d907      	bls.n	8006690 <PCD_EP_ISR_Handler+0x784>
            {
              ep->xfer_len -= TxPctSize;
 8006680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006682:	699a      	ldr	r2, [r3, #24]
 8006684:	187b      	adds	r3, r7, r1
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	1ad2      	subs	r2, r2, r3
 800668a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800668c:	619a      	str	r2, [r3, #24]
 800668e:	e002      	b.n	8006696 <PCD_EP_ISR_Handler+0x78a>
            }
            else
            {
              ep->xfer_len = 0U;
 8006690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006692:	2200      	movs	r2, #0
 8006694:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d107      	bne.n	80066ae <PCD_EP_ISR_Handler+0x7a2>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800669e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066a0:	781a      	ldrb	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	0011      	movs	r1, r2
 80066a6:	0018      	movs	r0, r3
 80066a8:	f00b fa34 	bl	8011b14 <HAL_PCD_DataInStageCallback>
 80066ac:	e01e      	b.n	80066ec <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80066ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066b0:	695a      	ldr	r2, [r3, #20]
 80066b2:	2140      	movs	r1, #64	@ 0x40
 80066b4:	187b      	adds	r3, r7, r1
 80066b6:	881b      	ldrh	r3, [r3, #0]
 80066b8:	18d2      	adds	r2, r2, r3
 80066ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066bc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80066be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066c0:	69da      	ldr	r2, [r3, #28]
 80066c2:	187b      	adds	r3, r7, r1
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	18d2      	adds	r2, r2, r3
 80066c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066ca:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80066d2:	0011      	movs	r1, r2
 80066d4:	0018      	movs	r0, r3
 80066d6:	f005 f93b 	bl	800b950 <USB_EPStartXfer>
 80066da:	e007      	b.n	80066ec <PCD_EP_ISR_Handler+0x7e0>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80066dc:	234c      	movs	r3, #76	@ 0x4c
 80066de:	18fb      	adds	r3, r7, r3
 80066e0:	881a      	ldrh	r2, [r3, #0]
 80066e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	0018      	movs	r0, r3
 80066e8:	f000 f930 	bl	800694c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2244      	movs	r2, #68	@ 0x44
 80066f2:	5a9b      	ldrh	r3, [r3, r2]
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	b21b      	sxth	r3, r3
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	da01      	bge.n	8006700 <PCD_EP_ISR_Handler+0x7f4>
 80066fc:	f7ff fc0c 	bl	8005f18 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	0018      	movs	r0, r3
 8006704:	46bd      	mov	sp, r7
 8006706:	b016      	add	sp, #88	@ 0x58
 8006708:	bdb0      	pop	{r4, r5, r7, pc}
 800670a:	46c0      	nop			@ (mov r8, r8)
 800670c:	00000406 	.word	0x00000406
 8006710:	00000402 	.word	0x00000402

08006714 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006714:	b590      	push	{r4, r7, lr}
 8006716:	b089      	sub	sp, #36	@ 0x24
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	1dbb      	adds	r3, r7, #6
 8006720:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006722:	1dbb      	adds	r3, r7, #6
 8006724:	881a      	ldrh	r2, [r3, #0]
 8006726:	2380      	movs	r3, #128	@ 0x80
 8006728:	01db      	lsls	r3, r3, #7
 800672a:	4013      	ands	r3, r2
 800672c:	d100      	bne.n	8006730 <HAL_PCD_EP_DB_Receive+0x1c>
 800672e:	e07d      	b.n	800682c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2250      	movs	r2, #80	@ 0x50
 8006736:	5a9b      	ldrh	r3, [r3, r2]
 8006738:	b29b      	uxth	r3, r3
 800673a:	001a      	movs	r2, r3
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	00db      	lsls	r3, r3, #3
 8006742:	18d2      	adds	r2, r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	18d3      	adds	r3, r2, r3
 800674a:	4a7a      	ldr	r2, [pc, #488]	@ (8006934 <HAL_PCD_EP_DB_Receive+0x220>)
 800674c:	4694      	mov	ip, r2
 800674e:	4463      	add	r3, ip
 8006750:	881a      	ldrh	r2, [r3, #0]
 8006752:	211a      	movs	r1, #26
 8006754:	187b      	adds	r3, r7, r1
 8006756:	0592      	lsls	r2, r2, #22
 8006758:	0d92      	lsrs	r2, r2, #22
 800675a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	699a      	ldr	r2, [r3, #24]
 8006760:	187b      	adds	r3, r7, r1
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	429a      	cmp	r2, r3
 8006766:	d307      	bcc.n	8006778 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	699a      	ldr	r2, [r3, #24]
 800676c:	187b      	adds	r3, r7, r1
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	1ad2      	subs	r2, r2, r3
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	619a      	str	r2, [r3, #24]
 8006776:	e002      	b.n	800677e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2200      	movs	r2, #0
 800677c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d121      	bne.n	80067ca <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	001a      	movs	r2, r3
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	18d3      	adds	r3, r2, r3
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	b29a      	uxth	r2, r3
 8006798:	2018      	movs	r0, #24
 800679a:	183b      	adds	r3, r7, r0
 800679c:	4966      	ldr	r1, [pc, #408]	@ (8006938 <HAL_PCD_EP_DB_Receive+0x224>)
 800679e:	400a      	ands	r2, r1
 80067a0:	801a      	strh	r2, [r3, #0]
 80067a2:	183b      	adds	r3, r7, r0
 80067a4:	183a      	adds	r2, r7, r0
 80067a6:	8812      	ldrh	r2, [r2, #0]
 80067a8:	2180      	movs	r1, #128	@ 0x80
 80067aa:	0189      	lsls	r1, r1, #6
 80067ac:	404a      	eors	r2, r1
 80067ae:	801a      	strh	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	001a      	movs	r2, r3
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	18d3      	adds	r3, r2, r3
 80067be:	183a      	adds	r2, r7, r0
 80067c0:	8812      	ldrh	r2, [r2, #0]
 80067c2:	495e      	ldr	r1, [pc, #376]	@ (800693c <HAL_PCD_EP_DB_Receive+0x228>)
 80067c4:	430a      	orrs	r2, r1
 80067c6:	b292      	uxth	r2, r2
 80067c8:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80067ca:	1dbb      	adds	r3, r7, #6
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	2240      	movs	r2, #64	@ 0x40
 80067d0:	4013      	ands	r3, r2
 80067d2:	d01a      	beq.n	800680a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	001a      	movs	r2, r3
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	18d3      	adds	r3, r2, r3
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	2016      	movs	r0, #22
 80067e8:	183b      	adds	r3, r7, r0
 80067ea:	4955      	ldr	r1, [pc, #340]	@ (8006940 <HAL_PCD_EP_DB_Receive+0x22c>)
 80067ec:	400a      	ands	r2, r1
 80067ee:	801a      	strh	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	001a      	movs	r2, r3
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	18d3      	adds	r3, r2, r3
 80067fe:	183a      	adds	r2, r7, r0
 8006800:	8812      	ldrh	r2, [r2, #0]
 8006802:	4950      	ldr	r1, [pc, #320]	@ (8006944 <HAL_PCD_EP_DB_Receive+0x230>)
 8006804:	430a      	orrs	r2, r1
 8006806:	b292      	uxth	r2, r2
 8006808:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800680a:	241a      	movs	r4, #26
 800680c:	193b      	adds	r3, r7, r4
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d100      	bne.n	8006816 <HAL_PCD_EP_DB_Receive+0x102>
 8006814:	e086      	b.n	8006924 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6818      	ldr	r0, [r3, #0]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	6959      	ldr	r1, [r3, #20]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	891a      	ldrh	r2, [r3, #8]
 8006822:	193b      	adds	r3, r7, r4
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	f006 fb46 	bl	800ceb6 <USB_ReadPMA>
 800682a:	e07b      	b.n	8006924 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2250      	movs	r2, #80	@ 0x50
 8006832:	5a9b      	ldrh	r3, [r3, r2]
 8006834:	b29b      	uxth	r3, r3
 8006836:	001a      	movs	r2, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	00db      	lsls	r3, r3, #3
 800683e:	18d2      	adds	r2, r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	18d3      	adds	r3, r2, r3
 8006846:	4a40      	ldr	r2, [pc, #256]	@ (8006948 <HAL_PCD_EP_DB_Receive+0x234>)
 8006848:	4694      	mov	ip, r2
 800684a:	4463      	add	r3, ip
 800684c:	881a      	ldrh	r2, [r3, #0]
 800684e:	211a      	movs	r1, #26
 8006850:	187b      	adds	r3, r7, r1
 8006852:	0592      	lsls	r2, r2, #22
 8006854:	0d92      	lsrs	r2, r2, #22
 8006856:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	699a      	ldr	r2, [r3, #24]
 800685c:	187b      	adds	r3, r7, r1
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	429a      	cmp	r2, r3
 8006862:	d307      	bcc.n	8006874 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	699a      	ldr	r2, [r3, #24]
 8006868:	187b      	adds	r3, r7, r1
 800686a:	881b      	ldrh	r3, [r3, #0]
 800686c:	1ad2      	subs	r2, r2, r3
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	619a      	str	r2, [r3, #24]
 8006872:	e002      	b.n	800687a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2200      	movs	r2, #0
 8006878:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d121      	bne.n	80068c6 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	001a      	movs	r2, r3
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	18d3      	adds	r3, r2, r3
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	b29a      	uxth	r2, r3
 8006894:	201e      	movs	r0, #30
 8006896:	183b      	adds	r3, r7, r0
 8006898:	4927      	ldr	r1, [pc, #156]	@ (8006938 <HAL_PCD_EP_DB_Receive+0x224>)
 800689a:	400a      	ands	r2, r1
 800689c:	801a      	strh	r2, [r3, #0]
 800689e:	183b      	adds	r3, r7, r0
 80068a0:	183a      	adds	r2, r7, r0
 80068a2:	8812      	ldrh	r2, [r2, #0]
 80068a4:	2180      	movs	r1, #128	@ 0x80
 80068a6:	0189      	lsls	r1, r1, #6
 80068a8:	404a      	eors	r2, r1
 80068aa:	801a      	strh	r2, [r3, #0]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	001a      	movs	r2, r3
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	18d3      	adds	r3, r2, r3
 80068ba:	183a      	adds	r2, r7, r0
 80068bc:	8812      	ldrh	r2, [r2, #0]
 80068be:	491f      	ldr	r1, [pc, #124]	@ (800693c <HAL_PCD_EP_DB_Receive+0x228>)
 80068c0:	430a      	orrs	r2, r1
 80068c2:	b292      	uxth	r2, r2
 80068c4:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80068c6:	1dbb      	adds	r3, r7, #6
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	2240      	movs	r2, #64	@ 0x40
 80068cc:	4013      	ands	r3, r2
 80068ce:	d11a      	bne.n	8006906 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	001a      	movs	r2, r3
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	18d3      	adds	r3, r2, r3
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	201c      	movs	r0, #28
 80068e4:	183b      	adds	r3, r7, r0
 80068e6:	4916      	ldr	r1, [pc, #88]	@ (8006940 <HAL_PCD_EP_DB_Receive+0x22c>)
 80068e8:	400a      	ands	r2, r1
 80068ea:	801a      	strh	r2, [r3, #0]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	001a      	movs	r2, r3
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	18d3      	adds	r3, r2, r3
 80068fa:	183a      	adds	r2, r7, r0
 80068fc:	8812      	ldrh	r2, [r2, #0]
 80068fe:	4911      	ldr	r1, [pc, #68]	@ (8006944 <HAL_PCD_EP_DB_Receive+0x230>)
 8006900:	430a      	orrs	r2, r1
 8006902:	b292      	uxth	r2, r2
 8006904:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8006906:	241a      	movs	r4, #26
 8006908:	193b      	adds	r3, r7, r4
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d009      	beq.n	8006924 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6818      	ldr	r0, [r3, #0]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	6959      	ldr	r1, [r3, #20]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	895a      	ldrh	r2, [r3, #10]
 800691c:	193b      	adds	r3, r7, r4
 800691e:	881b      	ldrh	r3, [r3, #0]
 8006920:	f006 fac9 	bl	800ceb6 <USB_ReadPMA>
    }
  }

  return count;
 8006924:	231a      	movs	r3, #26
 8006926:	18fb      	adds	r3, r7, r3
 8006928:	881b      	ldrh	r3, [r3, #0]
}
 800692a:	0018      	movs	r0, r3
 800692c:	46bd      	mov	sp, r7
 800692e:	b009      	add	sp, #36	@ 0x24
 8006930:	bd90      	pop	{r4, r7, pc}
 8006932:	46c0      	nop			@ (mov r8, r8)
 8006934:	00000402 	.word	0x00000402
 8006938:	ffffbf8f 	.word	0xffffbf8f
 800693c:	ffff8080 	.word	0xffff8080
 8006940:	ffff8f8f 	.word	0xffff8f8f
 8006944:	ffff80c0 	.word	0xffff80c0
 8006948:	00000406 	.word	0x00000406

0800694c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b0a4      	sub	sp, #144	@ 0x90
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	1dbb      	adds	r3, r7, #6
 8006958:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800695a:	1dbb      	adds	r3, r7, #6
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	2240      	movs	r2, #64	@ 0x40
 8006960:	4013      	ands	r3, r2
 8006962:	d100      	bne.n	8006966 <HAL_PCD_EP_DB_Transmit+0x1a>
 8006964:	e1e4      	b.n	8006d30 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2250      	movs	r2, #80	@ 0x50
 800696c:	5a9b      	ldrh	r3, [r3, r2]
 800696e:	b29b      	uxth	r3, r3
 8006970:	001a      	movs	r2, r3
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	18d2      	adds	r2, r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	18d3      	adds	r3, r2, r3
 8006980:	4ad0      	ldr	r2, [pc, #832]	@ (8006cc4 <HAL_PCD_EP_DB_Transmit+0x378>)
 8006982:	4694      	mov	ip, r2
 8006984:	4463      	add	r3, ip
 8006986:	881a      	ldrh	r2, [r3, #0]
 8006988:	2188      	movs	r1, #136	@ 0x88
 800698a:	187b      	adds	r3, r7, r1
 800698c:	0592      	lsls	r2, r2, #22
 800698e:	0d92      	lsrs	r2, r2, #22
 8006990:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	699a      	ldr	r2, [r3, #24]
 8006996:	187b      	adds	r3, r7, r1
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	429a      	cmp	r2, r3
 800699c:	d907      	bls.n	80069ae <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	699a      	ldr	r2, [r3, #24]
 80069a2:	187b      	adds	r3, r7, r1
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	1ad2      	subs	r2, r2, r3
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	619a      	str	r2, [r3, #24]
 80069ac:	e002      	b.n	80069b4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2200      	movs	r2, #0
 80069b2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d000      	beq.n	80069be <HAL_PCD_EP_DB_Transmit+0x72>
 80069bc:	e0b5      	b.n	8006b2a <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	785b      	ldrb	r3, [r3, #1]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d125      	bne.n	8006a12 <HAL_PCD_EP_DB_Transmit+0xc6>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2250      	movs	r2, #80	@ 0x50
 80069d2:	5a9b      	ldrh	r3, [r3, r2]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	001a      	movs	r2, r3
 80069d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069da:	189b      	adds	r3, r3, r2
 80069dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	00da      	lsls	r2, r3, #3
 80069e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e6:	18d3      	adds	r3, r2, r3
 80069e8:	4ab6      	ldr	r2, [pc, #728]	@ (8006cc4 <HAL_PCD_EP_DB_Transmit+0x378>)
 80069ea:	4694      	mov	ip, r2
 80069ec:	4463      	add	r3, ip
 80069ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f2:	881b      	ldrh	r3, [r3, #0]
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	059b      	lsls	r3, r3, #22
 80069f8:	0d9b      	lsrs	r3, r3, #22
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069fe:	801a      	strh	r2, [r3, #0]
 8006a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	4ab0      	ldr	r2, [pc, #704]	@ (8006cc8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0e:	801a      	strh	r2, [r3, #0]
 8006a10:	e01b      	b.n	8006a4a <HAL_PCD_EP_DB_Transmit+0xfe>
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	785b      	ldrb	r3, [r3, #1]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d117      	bne.n	8006a4a <HAL_PCD_EP_DB_Transmit+0xfe>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2250      	movs	r2, #80	@ 0x50
 8006a26:	5a9b      	ldrh	r3, [r3, r2]
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	001a      	movs	r2, r3
 8006a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a2e:	189b      	adds	r3, r3, r2
 8006a30:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	00da      	lsls	r2, r3, #3
 8006a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a3a:	18d3      	adds	r3, r2, r3
 8006a3c:	4aa1      	ldr	r2, [pc, #644]	@ (8006cc4 <HAL_PCD_EP_DB_Transmit+0x378>)
 8006a3e:	4694      	mov	ip, r2
 8006a40:	4463      	add	r3, ip
 8006a42:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a46:	2200      	movs	r2, #0
 8006a48:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	785b      	ldrb	r3, [r3, #1]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d125      	bne.n	8006aa4 <HAL_PCD_EP_DB_Transmit+0x158>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	61fb      	str	r3, [r7, #28]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2250      	movs	r2, #80	@ 0x50
 8006a64:	5a9b      	ldrh	r3, [r3, r2]
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	001a      	movs	r2, r3
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	189b      	adds	r3, r3, r2
 8006a6e:	61fb      	str	r3, [r7, #28]
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	00da      	lsls	r2, r3, #3
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	18d3      	adds	r3, r2, r3
 8006a7a:	4a94      	ldr	r2, [pc, #592]	@ (8006ccc <HAL_PCD_EP_DB_Transmit+0x380>)
 8006a7c:	4694      	mov	ip, r2
 8006a7e:	4463      	add	r3, ip
 8006a80:	61bb      	str	r3, [r7, #24]
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	059b      	lsls	r3, r3, #22
 8006a8a:	0d9b      	lsrs	r3, r3, #22
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	801a      	strh	r2, [r3, #0]
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	4a8b      	ldr	r2, [pc, #556]	@ (8006cc8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	801a      	strh	r2, [r3, #0]
 8006aa2:	e018      	b.n	8006ad6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	785b      	ldrb	r3, [r3, #1]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d114      	bne.n	8006ad6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2250      	movs	r2, #80	@ 0x50
 8006ab2:	5a9b      	ldrh	r3, [r3, r2]
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	001a      	movs	r2, r3
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aba:	189b      	adds	r3, r3, r2
 8006abc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	00da      	lsls	r2, r3, #3
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac6:	18d3      	adds	r3, r2, r3
 8006ac8:	4a80      	ldr	r2, [pc, #512]	@ (8006ccc <HAL_PCD_EP_DB_Transmit+0x380>)
 8006aca:	4694      	mov	ip, r2
 8006acc:	4463      	add	r3, ip
 8006ace:	623b      	str	r3, [r7, #32]
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	781a      	ldrb	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	0011      	movs	r1, r2
 8006ade:	0018      	movs	r0, r3
 8006ae0:	f00b f818 	bl	8011b14 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006ae4:	1dbb      	adds	r3, r7, #6
 8006ae6:	881a      	ldrh	r2, [r3, #0]
 8006ae8:	2380      	movs	r3, #128	@ 0x80
 8006aea:	01db      	lsls	r3, r3, #7
 8006aec:	4013      	ands	r3, r2
 8006aee:	d100      	bne.n	8006af2 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8006af0:	e308      	b.n	8007104 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	001a      	movs	r2, r3
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	18d3      	adds	r3, r2, r3
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	2016      	movs	r0, #22
 8006b06:	183b      	adds	r3, r7, r0
 8006b08:	4971      	ldr	r1, [pc, #452]	@ (8006cd0 <HAL_PCD_EP_DB_Transmit+0x384>)
 8006b0a:	400a      	ands	r2, r1
 8006b0c:	801a      	strh	r2, [r3, #0]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	001a      	movs	r2, r3
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	18d3      	adds	r3, r2, r3
 8006b1c:	183a      	adds	r2, r7, r0
 8006b1e:	8812      	ldrh	r2, [r2, #0]
 8006b20:	496c      	ldr	r1, [pc, #432]	@ (8006cd4 <HAL_PCD_EP_DB_Transmit+0x388>)
 8006b22:	430a      	orrs	r2, r1
 8006b24:	b292      	uxth	r2, r2
 8006b26:	801a      	strh	r2, [r3, #0]
 8006b28:	e2ec      	b.n	8007104 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006b2a:	1dbb      	adds	r3, r7, #6
 8006b2c:	881a      	ldrh	r2, [r3, #0]
 8006b2e:	2380      	movs	r3, #128	@ 0x80
 8006b30:	01db      	lsls	r3, r3, #7
 8006b32:	4013      	ands	r3, r2
 8006b34:	d01a      	beq.n	8006b6c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	001a      	movs	r2, r3
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	18d3      	adds	r3, r2, r3
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	208a      	movs	r0, #138	@ 0x8a
 8006b4a:	183b      	adds	r3, r7, r0
 8006b4c:	4960      	ldr	r1, [pc, #384]	@ (8006cd0 <HAL_PCD_EP_DB_Transmit+0x384>)
 8006b4e:	400a      	ands	r2, r1
 8006b50:	801a      	strh	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	001a      	movs	r2, r3
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	18d3      	adds	r3, r2, r3
 8006b60:	183a      	adds	r2, r7, r0
 8006b62:	8812      	ldrh	r2, [r2, #0]
 8006b64:	495b      	ldr	r1, [pc, #364]	@ (8006cd4 <HAL_PCD_EP_DB_Transmit+0x388>)
 8006b66:	430a      	orrs	r2, r1
 8006b68:	b292      	uxth	r2, r2
 8006b6a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	2224      	movs	r2, #36	@ 0x24
 8006b70:	5c9b      	ldrb	r3, [r3, r2]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d000      	beq.n	8006b78 <HAL_PCD_EP_DB_Transmit+0x22c>
 8006b76:	e2c5      	b.n	8007104 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	695a      	ldr	r2, [r3, #20]
 8006b7c:	2188      	movs	r1, #136	@ 0x88
 8006b7e:	187b      	adds	r3, r7, r1
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	18d2      	adds	r2, r2, r3
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	69da      	ldr	r2, [r3, #28]
 8006b8c:	187b      	adds	r3, r7, r1
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	18d2      	adds	r2, r2, r3
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	6a1a      	ldr	r2, [r3, #32]
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d30c      	bcc.n	8006bbc <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	218c      	movs	r1, #140	@ 0x8c
 8006ba8:	187a      	adds	r2, r7, r1
 8006baa:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	6a1a      	ldr	r2, [r3, #32]
 8006bb0:	187b      	adds	r3, r7, r1
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	1ad2      	subs	r2, r2, r3
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	621a      	str	r2, [r3, #32]
 8006bba:	e01a      	b.n	8006bf2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10a      	bne.n	8006bda <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8006bc4:	2388      	movs	r3, #136	@ 0x88
 8006bc6:	18fb      	adds	r3, r7, r3
 8006bc8:	881b      	ldrh	r3, [r3, #0]
 8006bca:	228c      	movs	r2, #140	@ 0x8c
 8006bcc:	18ba      	adds	r2, r7, r2
 8006bce:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2224      	movs	r2, #36	@ 0x24
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	5499      	strb	r1, [r3, r2]
 8006bd8:	e00b      	b.n	8006bf2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	2224      	movs	r2, #36	@ 0x24
 8006bde:	2100      	movs	r1, #0
 8006be0:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	228c      	movs	r2, #140	@ 0x8c
 8006be8:	18ba      	adds	r2, r7, r2
 8006bea:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	785b      	ldrb	r3, [r3, #1]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d000      	beq.n	8006bfc <HAL_PCD_EP_DB_Transmit+0x2b0>
 8006bfa:	e06d      	b.n	8006cd8 <HAL_PCD_EP_DB_Transmit+0x38c>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2250      	movs	r2, #80	@ 0x50
 8006c08:	5a9b      	ldrh	r3, [r3, r2]
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	001a      	movs	r2, r3
 8006c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c10:	189b      	adds	r3, r3, r2
 8006c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	00da      	lsls	r2, r3, #3
 8006c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c1c:	18d3      	adds	r3, r2, r3
 8006c1e:	4a29      	ldr	r2, [pc, #164]	@ (8006cc4 <HAL_PCD_EP_DB_Transmit+0x378>)
 8006c20:	4694      	mov	ip, r2
 8006c22:	4463      	add	r3, ip
 8006c24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	059b      	lsls	r3, r3, #22
 8006c2e:	0d9b      	lsrs	r3, r3, #22
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c34:	801a      	strh	r2, [r3, #0]
 8006c36:	238c      	movs	r3, #140	@ 0x8c
 8006c38:	18fb      	adds	r3, r7, r3
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d108      	bne.n	8006c52 <HAL_PCD_EP_DB_Transmit+0x306>
 8006c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	4a20      	ldr	r2, [pc, #128]	@ (8006cc8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c4e:	801a      	strh	r2, [r3, #0]
 8006c50:	e061      	b.n	8006d16 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8006c52:	228c      	movs	r2, #140	@ 0x8c
 8006c54:	18bb      	adds	r3, r7, r2
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c5a:	d817      	bhi.n	8006c8c <HAL_PCD_EP_DB_Transmit+0x340>
 8006c5c:	18bb      	adds	r3, r7, r2
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	085b      	lsrs	r3, r3, #1
 8006c62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c64:	18bb      	adds	r3, r7, r2
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	d002      	beq.n	8006c74 <HAL_PCD_EP_DB_Transmit+0x328>
 8006c6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c70:	3301      	adds	r3, #1
 8006c72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c76:	881b      	ldrh	r3, [r3, #0]
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	029b      	lsls	r3, r3, #10
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	4313      	orrs	r3, r2
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c88:	801a      	strh	r2, [r3, #0]
 8006c8a:	e044      	b.n	8006d16 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8006c8c:	228c      	movs	r2, #140	@ 0x8c
 8006c8e:	18bb      	adds	r3, r7, r2
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	095b      	lsrs	r3, r3, #5
 8006c94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c96:	18bb      	adds	r3, r7, r2
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	221f      	movs	r2, #31
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	d102      	bne.n	8006ca6 <HAL_PCD_EP_DB_Transmit+0x35a>
 8006ca0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	029b      	lsls	r3, r3, #10
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	4a03      	ldr	r2, [pc, #12]	@ (8006cc8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc0:	801a      	strh	r2, [r3, #0]
 8006cc2:	e028      	b.n	8006d16 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8006cc4:	00000402 	.word	0x00000402
 8006cc8:	ffff8000 	.word	0xffff8000
 8006ccc:	00000406 	.word	0x00000406
 8006cd0:	ffff8f8f 	.word	0xffff8f8f
 8006cd4:	ffffc080 	.word	0xffffc080
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	785b      	ldrb	r3, [r3, #1]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d11a      	bne.n	8006d16 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2250      	movs	r2, #80	@ 0x50
 8006cec:	5a9b      	ldrh	r3, [r3, r2]
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	001a      	movs	r2, r3
 8006cf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cf4:	189b      	adds	r3, r3, r2
 8006cf6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	00da      	lsls	r2, r3, #3
 8006cfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d00:	18d3      	adds	r3, r2, r3
 8006d02:	4ad9      	ldr	r2, [pc, #868]	@ (8007068 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8006d04:	4694      	mov	ip, r2
 8006d06:	4463      	add	r3, ip
 8006d08:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d0a:	238c      	movs	r3, #140	@ 0x8c
 8006d0c:	18fb      	adds	r3, r7, r3
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d14:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6818      	ldr	r0, [r3, #0]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	6959      	ldr	r1, [r3, #20]
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	891a      	ldrh	r2, [r3, #8]
 8006d22:	238c      	movs	r3, #140	@ 0x8c
 8006d24:	18fb      	adds	r3, r7, r3
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	f006 f87b 	bl	800ce24 <USB_WritePMA>
 8006d2e:	e1e9      	b.n	8007104 <HAL_PCD_EP_DB_Transmit+0x7b8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2250      	movs	r2, #80	@ 0x50
 8006d36:	5a9b      	ldrh	r3, [r3, r2]
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	001a      	movs	r2, r3
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	00db      	lsls	r3, r3, #3
 8006d42:	18d2      	adds	r2, r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	18d3      	adds	r3, r2, r3
 8006d4a:	4ac8      	ldr	r2, [pc, #800]	@ (800706c <HAL_PCD_EP_DB_Transmit+0x720>)
 8006d4c:	4694      	mov	ip, r2
 8006d4e:	4463      	add	r3, ip
 8006d50:	881a      	ldrh	r2, [r3, #0]
 8006d52:	2188      	movs	r1, #136	@ 0x88
 8006d54:	187b      	adds	r3, r7, r1
 8006d56:	0592      	lsls	r2, r2, #22
 8006d58:	0d92      	lsrs	r2, r2, #22
 8006d5a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	699a      	ldr	r2, [r3, #24]
 8006d60:	187b      	adds	r3, r7, r1
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d307      	bcc.n	8006d78 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	699a      	ldr	r2, [r3, #24]
 8006d6c:	187b      	adds	r3, r7, r1
 8006d6e:	881b      	ldrh	r3, [r3, #0]
 8006d70:	1ad2      	subs	r2, r2, r3
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	619a      	str	r2, [r3, #24]
 8006d76:	e002      	b.n	8006d7e <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d000      	beq.n	8006d88 <HAL_PCD_EP_DB_Transmit+0x43c>
 8006d86:	e0bb      	b.n	8006f00 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	785b      	ldrb	r3, [r3, #1]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d125      	bne.n	8006ddc <HAL_PCD_EP_DB_Transmit+0x490>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2250      	movs	r2, #80	@ 0x50
 8006d9c:	5a9b      	ldrh	r3, [r3, r2]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	001a      	movs	r2, r3
 8006da2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006da4:	189b      	adds	r3, r3, r2
 8006da6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	00da      	lsls	r2, r3, #3
 8006dae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006db0:	18d3      	adds	r3, r2, r3
 8006db2:	4aad      	ldr	r2, [pc, #692]	@ (8007068 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8006db4:	4694      	mov	ip, r2
 8006db6:	4463      	add	r3, ip
 8006db8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006dba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dbc:	881b      	ldrh	r3, [r3, #0]
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	059b      	lsls	r3, r3, #22
 8006dc2:	0d9b      	lsrs	r3, r3, #22
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dc8:	801a      	strh	r2, [r3, #0]
 8006dca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	4aa7      	ldr	r2, [pc, #668]	@ (8007070 <HAL_PCD_EP_DB_Transmit+0x724>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dd8:	801a      	strh	r2, [r3, #0]
 8006dda:	e01b      	b.n	8006e14 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	785b      	ldrb	r3, [r3, #1]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d117      	bne.n	8006e14 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	667b      	str	r3, [r7, #100]	@ 0x64
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2250      	movs	r2, #80	@ 0x50
 8006df0:	5a9b      	ldrh	r3, [r3, r2]
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	001a      	movs	r2, r3
 8006df6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006df8:	189b      	adds	r3, r3, r2
 8006dfa:	667b      	str	r3, [r7, #100]	@ 0x64
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	00da      	lsls	r2, r3, #3
 8006e02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e04:	18d3      	adds	r3, r2, r3
 8006e06:	4a98      	ldr	r2, [pc, #608]	@ (8007068 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8006e08:	4694      	mov	ip, r2
 8006e0a:	4463      	add	r3, ip
 8006e0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e10:	2200      	movs	r2, #0
 8006e12:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	677b      	str	r3, [r7, #116]	@ 0x74
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	785b      	ldrb	r3, [r3, #1]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d12b      	bne.n	8006e7a <HAL_PCD_EP_DB_Transmit+0x52e>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2250      	movs	r2, #80	@ 0x50
 8006e2e:	5a9b      	ldrh	r3, [r3, r2]
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	001a      	movs	r2, r3
 8006e34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e36:	189b      	adds	r3, r3, r2
 8006e38:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	00da      	lsls	r2, r3, #3
 8006e40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e42:	18d3      	adds	r3, r2, r3
 8006e44:	4a89      	ldr	r2, [pc, #548]	@ (800706c <HAL_PCD_EP_DB_Transmit+0x720>)
 8006e46:	4694      	mov	ip, r2
 8006e48:	4463      	add	r3, ip
 8006e4a:	2184      	movs	r1, #132	@ 0x84
 8006e4c:	187a      	adds	r2, r7, r1
 8006e4e:	6013      	str	r3, [r2, #0]
 8006e50:	187b      	adds	r3, r7, r1
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	059b      	lsls	r3, r3, #22
 8006e5a:	0d9b      	lsrs	r3, r3, #22
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	187b      	adds	r3, r7, r1
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	801a      	strh	r2, [r3, #0]
 8006e64:	187b      	adds	r3, r7, r1
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	881b      	ldrh	r3, [r3, #0]
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	4a80      	ldr	r2, [pc, #512]	@ (8007070 <HAL_PCD_EP_DB_Transmit+0x724>)
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	187b      	adds	r3, r7, r1
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	801a      	strh	r2, [r3, #0]
 8006e78:	e018      	b.n	8006eac <HAL_PCD_EP_DB_Transmit+0x560>
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	785b      	ldrb	r3, [r3, #1]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d114      	bne.n	8006eac <HAL_PCD_EP_DB_Transmit+0x560>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2250      	movs	r2, #80	@ 0x50
 8006e88:	5a9b      	ldrh	r3, [r3, r2]
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	001a      	movs	r2, r3
 8006e8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e90:	189b      	adds	r3, r3, r2
 8006e92:	677b      	str	r3, [r7, #116]	@ 0x74
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	00da      	lsls	r2, r3, #3
 8006e9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e9c:	18d3      	adds	r3, r2, r3
 8006e9e:	4a73      	ldr	r2, [pc, #460]	@ (800706c <HAL_PCD_EP_DB_Transmit+0x720>)
 8006ea0:	4694      	mov	ip, r2
 8006ea2:	4463      	add	r3, ip
 8006ea4:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ea6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	781a      	ldrb	r2, [r3, #0]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	0011      	movs	r1, r2
 8006eb4:	0018      	movs	r0, r3
 8006eb6:	f00a fe2d 	bl	8011b14 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006eba:	1dbb      	adds	r3, r7, #6
 8006ebc:	881a      	ldrh	r2, [r3, #0]
 8006ebe:	2380      	movs	r3, #128	@ 0x80
 8006ec0:	01db      	lsls	r3, r3, #7
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	d000      	beq.n	8006ec8 <HAL_PCD_EP_DB_Transmit+0x57c>
 8006ec6:	e11d      	b.n	8007104 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	001a      	movs	r2, r3
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	18d3      	adds	r3, r2, r3
 8006ed6:	881b      	ldrh	r3, [r3, #0]
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	2082      	movs	r0, #130	@ 0x82
 8006edc:	183b      	adds	r3, r7, r0
 8006ede:	4965      	ldr	r1, [pc, #404]	@ (8007074 <HAL_PCD_EP_DB_Transmit+0x728>)
 8006ee0:	400a      	ands	r2, r1
 8006ee2:	801a      	strh	r2, [r3, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	001a      	movs	r2, r3
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	18d3      	adds	r3, r2, r3
 8006ef2:	183a      	adds	r2, r7, r0
 8006ef4:	8812      	ldrh	r2, [r2, #0]
 8006ef6:	4960      	ldr	r1, [pc, #384]	@ (8007078 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	b292      	uxth	r2, r2
 8006efc:	801a      	strh	r2, [r3, #0]
 8006efe:	e101      	b.n	8007104 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006f00:	1dbb      	adds	r3, r7, #6
 8006f02:	881a      	ldrh	r2, [r3, #0]
 8006f04:	2380      	movs	r3, #128	@ 0x80
 8006f06:	01db      	lsls	r3, r3, #7
 8006f08:	4013      	ands	r3, r2
 8006f0a:	d11a      	bne.n	8006f42 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	001a      	movs	r2, r3
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	18d3      	adds	r3, r2, r3
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	204e      	movs	r0, #78	@ 0x4e
 8006f20:	183b      	adds	r3, r7, r0
 8006f22:	4954      	ldr	r1, [pc, #336]	@ (8007074 <HAL_PCD_EP_DB_Transmit+0x728>)
 8006f24:	400a      	ands	r2, r1
 8006f26:	801a      	strh	r2, [r3, #0]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	001a      	movs	r2, r3
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	18d3      	adds	r3, r2, r3
 8006f36:	183a      	adds	r2, r7, r0
 8006f38:	8812      	ldrh	r2, [r2, #0]
 8006f3a:	494f      	ldr	r1, [pc, #316]	@ (8007078 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	b292      	uxth	r2, r2
 8006f40:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2224      	movs	r2, #36	@ 0x24
 8006f46:	5c9b      	ldrb	r3, [r3, r2]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d000      	beq.n	8006f4e <HAL_PCD_EP_DB_Transmit+0x602>
 8006f4c:	e0da      	b.n	8007104 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	695a      	ldr	r2, [r3, #20]
 8006f52:	2188      	movs	r1, #136	@ 0x88
 8006f54:	187b      	adds	r3, r7, r1
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	18d2      	adds	r2, r2, r3
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	69da      	ldr	r2, [r3, #28]
 8006f62:	187b      	adds	r3, r7, r1
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	18d2      	adds	r2, r2, r3
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	6a1a      	ldr	r2, [r3, #32]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d30c      	bcc.n	8006f92 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	218c      	movs	r1, #140	@ 0x8c
 8006f7e:	187a      	adds	r2, r7, r1
 8006f80:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	6a1a      	ldr	r2, [r3, #32]
 8006f86:	187b      	adds	r3, r7, r1
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	1ad2      	subs	r2, r2, r3
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	621a      	str	r2, [r3, #32]
 8006f90:	e01a      	b.n	8006fc8 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10a      	bne.n	8006fb0 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8006f9a:	2388      	movs	r3, #136	@ 0x88
 8006f9c:	18fb      	adds	r3, r7, r3
 8006f9e:	881b      	ldrh	r3, [r3, #0]
 8006fa0:	228c      	movs	r2, #140	@ 0x8c
 8006fa2:	18ba      	adds	r2, r7, r2
 8006fa4:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	2224      	movs	r2, #36	@ 0x24
 8006faa:	2100      	movs	r1, #0
 8006fac:	5499      	strb	r1, [r3, r2]
 8006fae:	e00b      	b.n	8006fc8 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	228c      	movs	r2, #140	@ 0x8c
 8006fb6:	18ba      	adds	r2, r7, r2
 8006fb8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2224      	movs	r2, #36	@ 0x24
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	785b      	ldrb	r3, [r3, #1]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d000      	beq.n	8006fd8 <HAL_PCD_EP_DB_Transmit+0x68c>
 8006fd6:	e06d      	b.n	80070b4 <HAL_PCD_EP_DB_Transmit+0x768>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2250      	movs	r2, #80	@ 0x50
 8006fe4:	5a9b      	ldrh	r3, [r3, r2]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	001a      	movs	r2, r3
 8006fea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fec:	189b      	adds	r3, r3, r2
 8006fee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	00da      	lsls	r2, r3, #3
 8006ff6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ff8:	18d3      	adds	r3, r2, r3
 8006ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800706c <HAL_PCD_EP_DB_Transmit+0x720>)
 8006ffc:	4694      	mov	ip, r2
 8006ffe:	4463      	add	r3, ip
 8007000:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007002:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	b29b      	uxth	r3, r3
 8007008:	059b      	lsls	r3, r3, #22
 800700a:	0d9b      	lsrs	r3, r3, #22
 800700c:	b29a      	uxth	r2, r3
 800700e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007010:	801a      	strh	r2, [r3, #0]
 8007012:	238c      	movs	r3, #140	@ 0x8c
 8007014:	18fb      	adds	r3, r7, r3
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d108      	bne.n	800702e <HAL_PCD_EP_DB_Transmit+0x6e2>
 800701c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800701e:	881b      	ldrh	r3, [r3, #0]
 8007020:	b29b      	uxth	r3, r3
 8007022:	4a13      	ldr	r2, [pc, #76]	@ (8007070 <HAL_PCD_EP_DB_Transmit+0x724>)
 8007024:	4313      	orrs	r3, r2
 8007026:	b29a      	uxth	r2, r3
 8007028:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800702a:	801a      	strh	r2, [r3, #0]
 800702c:	e05e      	b.n	80070ec <HAL_PCD_EP_DB_Transmit+0x7a0>
 800702e:	228c      	movs	r2, #140	@ 0x8c
 8007030:	18bb      	adds	r3, r7, r2
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b3e      	cmp	r3, #62	@ 0x3e
 8007036:	d821      	bhi.n	800707c <HAL_PCD_EP_DB_Transmit+0x730>
 8007038:	18bb      	adds	r3, r7, r2
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	085b      	lsrs	r3, r3, #1
 800703e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007040:	18bb      	adds	r3, r7, r2
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2201      	movs	r2, #1
 8007046:	4013      	ands	r3, r2
 8007048:	d002      	beq.n	8007050 <HAL_PCD_EP_DB_Transmit+0x704>
 800704a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800704c:	3301      	adds	r3, #1
 800704e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007050:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	b29a      	uxth	r2, r3
 8007056:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007058:	b29b      	uxth	r3, r3
 800705a:	029b      	lsls	r3, r3, #10
 800705c:	b29b      	uxth	r3, r3
 800705e:	4313      	orrs	r3, r2
 8007060:	b29a      	uxth	r2, r3
 8007062:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007064:	801a      	strh	r2, [r3, #0]
 8007066:	e041      	b.n	80070ec <HAL_PCD_EP_DB_Transmit+0x7a0>
 8007068:	00000402 	.word	0x00000402
 800706c:	00000406 	.word	0x00000406
 8007070:	ffff8000 	.word	0xffff8000
 8007074:	ffff8f8f 	.word	0xffff8f8f
 8007078:	ffffc080 	.word	0xffffc080
 800707c:	228c      	movs	r2, #140	@ 0x8c
 800707e:	18bb      	adds	r3, r7, r2
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	095b      	lsrs	r3, r3, #5
 8007084:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007086:	18bb      	adds	r3, r7, r2
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	221f      	movs	r2, #31
 800708c:	4013      	ands	r3, r2
 800708e:	d102      	bne.n	8007096 <HAL_PCD_EP_DB_Transmit+0x74a>
 8007090:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007092:	3b01      	subs	r3, #1
 8007094:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007096:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007098:	881b      	ldrh	r3, [r3, #0]
 800709a:	b29a      	uxth	r2, r3
 800709c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800709e:	b29b      	uxth	r3, r3
 80070a0:	029b      	lsls	r3, r3, #10
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	4313      	orrs	r3, r2
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	4a2c      	ldr	r2, [pc, #176]	@ (800715c <HAL_PCD_EP_DB_Transmit+0x810>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070b0:	801a      	strh	r2, [r3, #0]
 80070b2:	e01b      	b.n	80070ec <HAL_PCD_EP_DB_Transmit+0x7a0>
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	785b      	ldrb	r3, [r3, #1]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d117      	bne.n	80070ec <HAL_PCD_EP_DB_Transmit+0x7a0>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2250      	movs	r2, #80	@ 0x50
 80070c2:	5a9b      	ldrh	r3, [r3, r2]
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	001a      	movs	r2, r3
 80070c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070ca:	189b      	adds	r3, r3, r2
 80070cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	00da      	lsls	r2, r3, #3
 80070d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070d6:	18d3      	adds	r3, r2, r3
 80070d8:	4a21      	ldr	r2, [pc, #132]	@ (8007160 <HAL_PCD_EP_DB_Transmit+0x814>)
 80070da:	4694      	mov	ip, r2
 80070dc:	4463      	add	r3, ip
 80070de:	653b      	str	r3, [r7, #80]	@ 0x50
 80070e0:	238c      	movs	r3, #140	@ 0x8c
 80070e2:	18fb      	adds	r3, r7, r3
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070ea:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6818      	ldr	r0, [r3, #0]
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	6959      	ldr	r1, [r3, #20]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	895a      	ldrh	r2, [r3, #10]
 80070f8:	238c      	movs	r3, #140	@ 0x8c
 80070fa:	18fb      	adds	r3, r7, r3
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	b29b      	uxth	r3, r3
 8007100:	f005 fe90 	bl	800ce24 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	001a      	movs	r2, r3
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	18d3      	adds	r3, r2, r3
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	b29a      	uxth	r2, r3
 8007116:	2014      	movs	r0, #20
 8007118:	183b      	adds	r3, r7, r0
 800711a:	4912      	ldr	r1, [pc, #72]	@ (8007164 <HAL_PCD_EP_DB_Transmit+0x818>)
 800711c:	400a      	ands	r2, r1
 800711e:	801a      	strh	r2, [r3, #0]
 8007120:	183b      	adds	r3, r7, r0
 8007122:	183a      	adds	r2, r7, r0
 8007124:	8812      	ldrh	r2, [r2, #0]
 8007126:	2110      	movs	r1, #16
 8007128:	404a      	eors	r2, r1
 800712a:	801a      	strh	r2, [r3, #0]
 800712c:	183b      	adds	r3, r7, r0
 800712e:	183a      	adds	r2, r7, r0
 8007130:	8812      	ldrh	r2, [r2, #0]
 8007132:	2120      	movs	r1, #32
 8007134:	404a      	eors	r2, r1
 8007136:	801a      	strh	r2, [r3, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	001a      	movs	r2, r3
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	18d3      	adds	r3, r2, r3
 8007146:	183a      	adds	r2, r7, r0
 8007148:	8812      	ldrh	r2, [r2, #0]
 800714a:	4907      	ldr	r1, [pc, #28]	@ (8007168 <HAL_PCD_EP_DB_Transmit+0x81c>)
 800714c:	430a      	orrs	r2, r1
 800714e:	b292      	uxth	r2, r2
 8007150:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	0018      	movs	r0, r3
 8007156:	46bd      	mov	sp, r7
 8007158:	b024      	add	sp, #144	@ 0x90
 800715a:	bd80      	pop	{r7, pc}
 800715c:	ffff8000 	.word	0xffff8000
 8007160:	00000406 	.word	0x00000406
 8007164:	ffff8fbf 	.word	0xffff8fbf
 8007168:	ffff8080 	.word	0xffff8080

0800716c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800716c:	b590      	push	{r4, r7, lr}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	0008      	movs	r0, r1
 8007176:	0011      	movs	r1, r2
 8007178:	607b      	str	r3, [r7, #4]
 800717a:	240a      	movs	r4, #10
 800717c:	193b      	adds	r3, r7, r4
 800717e:	1c02      	adds	r2, r0, #0
 8007180:	801a      	strh	r2, [r3, #0]
 8007182:	2308      	movs	r3, #8
 8007184:	18fb      	adds	r3, r7, r3
 8007186:	1c0a      	adds	r2, r1, #0
 8007188:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800718a:	0021      	movs	r1, r4
 800718c:	187b      	adds	r3, r7, r1
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	2280      	movs	r2, #128	@ 0x80
 8007192:	4013      	ands	r3, r2
 8007194:	b29b      	uxth	r3, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00c      	beq.n	80071b4 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800719a:	187b      	adds	r3, r7, r1
 800719c:	881b      	ldrh	r3, [r3, #0]
 800719e:	2207      	movs	r2, #7
 80071a0:	401a      	ands	r2, r3
 80071a2:	0013      	movs	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	189b      	adds	r3, r3, r2
 80071a8:	00db      	lsls	r3, r3, #3
 80071aa:	3310      	adds	r3, #16
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	18d3      	adds	r3, r2, r3
 80071b0:	617b      	str	r3, [r7, #20]
 80071b2:	e00b      	b.n	80071cc <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80071b4:	230a      	movs	r3, #10
 80071b6:	18fb      	adds	r3, r7, r3
 80071b8:	881a      	ldrh	r2, [r3, #0]
 80071ba:	0013      	movs	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	189b      	adds	r3, r3, r2
 80071c0:	00db      	lsls	r3, r3, #3
 80071c2:	3351      	adds	r3, #81	@ 0x51
 80071c4:	33ff      	adds	r3, #255	@ 0xff
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	18d3      	adds	r3, r2, r3
 80071ca:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80071cc:	2308      	movs	r3, #8
 80071ce:	18fb      	adds	r3, r7, r3
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d107      	bne.n	80071e6 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	2200      	movs	r2, #0
 80071da:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	b29a      	uxth	r2, r3
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	80da      	strh	r2, [r3, #6]
 80071e4:	e00b      	b.n	80071fe <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	2201      	movs	r2, #1
 80071ea:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	0c1b      	lsrs	r3, r3, #16
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	0018      	movs	r0, r3
 8007202:	46bd      	mov	sp, r7
 8007204:	b007      	add	sp, #28
 8007206:	bd90      	pop	{r4, r7, pc}

08007208 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	23b4      	movs	r3, #180	@ 0xb4
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	2101      	movs	r1, #1
 800721e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	23b2      	movs	r3, #178	@ 0xb2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	2100      	movs	r1, #0
 8007228:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2254      	movs	r2, #84	@ 0x54
 800722e:	5a9b      	ldrh	r3, [r3, r2]
 8007230:	b29b      	uxth	r3, r3
 8007232:	2201      	movs	r2, #1
 8007234:	4313      	orrs	r3, r2
 8007236:	b299      	uxth	r1, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2254      	movs	r2, #84	@ 0x54
 800723c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2254      	movs	r2, #84	@ 0x54
 8007242:	5a9b      	ldrh	r3, [r3, r2]
 8007244:	b29b      	uxth	r3, r3
 8007246:	2202      	movs	r2, #2
 8007248:	4313      	orrs	r3, r2
 800724a:	b299      	uxth	r1, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2254      	movs	r2, #84	@ 0x54
 8007250:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	0018      	movs	r0, r3
 8007256:	46bd      	mov	sp, r7
 8007258:	b004      	add	sp, #16
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	000a      	movs	r2, r1
 8007266:	1cfb      	adds	r3, r7, #3
 8007268:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800726a:	46c0      	nop			@ (mov r8, r8)
 800726c:	46bd      	mov	sp, r7
 800726e:	b002      	add	sp, #8
 8007270:	bd80      	pop	{r7, pc}
	...

08007274 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b088      	sub	sp, #32
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d102      	bne.n	8007288 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	f000 fb76 	bl	8007974 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2201      	movs	r2, #1
 800728e:	4013      	ands	r3, r2
 8007290:	d100      	bne.n	8007294 <HAL_RCC_OscConfig+0x20>
 8007292:	e08e      	b.n	80073b2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007294:	4bc5      	ldr	r3, [pc, #788]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	220c      	movs	r2, #12
 800729a:	4013      	ands	r3, r2
 800729c:	2b04      	cmp	r3, #4
 800729e:	d00e      	beq.n	80072be <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80072a0:	4bc2      	ldr	r3, [pc, #776]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	220c      	movs	r2, #12
 80072a6:	4013      	ands	r3, r2
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	d117      	bne.n	80072dc <HAL_RCC_OscConfig+0x68>
 80072ac:	4bbf      	ldr	r3, [pc, #764]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	23c0      	movs	r3, #192	@ 0xc0
 80072b2:	025b      	lsls	r3, r3, #9
 80072b4:	401a      	ands	r2, r3
 80072b6:	2380      	movs	r3, #128	@ 0x80
 80072b8:	025b      	lsls	r3, r3, #9
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d10e      	bne.n	80072dc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072be:	4bbb      	ldr	r3, [pc, #748]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	2380      	movs	r3, #128	@ 0x80
 80072c4:	029b      	lsls	r3, r3, #10
 80072c6:	4013      	ands	r3, r2
 80072c8:	d100      	bne.n	80072cc <HAL_RCC_OscConfig+0x58>
 80072ca:	e071      	b.n	80073b0 <HAL_RCC_OscConfig+0x13c>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d000      	beq.n	80072d6 <HAL_RCC_OscConfig+0x62>
 80072d4:	e06c      	b.n	80073b0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	f000 fb4c 	bl	8007974 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d107      	bne.n	80072f4 <HAL_RCC_OscConfig+0x80>
 80072e4:	4bb1      	ldr	r3, [pc, #708]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	4bb0      	ldr	r3, [pc, #704]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 80072ea:	2180      	movs	r1, #128	@ 0x80
 80072ec:	0249      	lsls	r1, r1, #9
 80072ee:	430a      	orrs	r2, r1
 80072f0:	601a      	str	r2, [r3, #0]
 80072f2:	e02f      	b.n	8007354 <HAL_RCC_OscConfig+0xe0>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10c      	bne.n	8007316 <HAL_RCC_OscConfig+0xa2>
 80072fc:	4bab      	ldr	r3, [pc, #684]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	4baa      	ldr	r3, [pc, #680]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 8007302:	49ab      	ldr	r1, [pc, #684]	@ (80075b0 <HAL_RCC_OscConfig+0x33c>)
 8007304:	400a      	ands	r2, r1
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	4ba8      	ldr	r3, [pc, #672]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	4ba7      	ldr	r3, [pc, #668]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 800730e:	49a9      	ldr	r1, [pc, #676]	@ (80075b4 <HAL_RCC_OscConfig+0x340>)
 8007310:	400a      	ands	r2, r1
 8007312:	601a      	str	r2, [r3, #0]
 8007314:	e01e      	b.n	8007354 <HAL_RCC_OscConfig+0xe0>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	2b05      	cmp	r3, #5
 800731c:	d10e      	bne.n	800733c <HAL_RCC_OscConfig+0xc8>
 800731e:	4ba3      	ldr	r3, [pc, #652]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	4ba2      	ldr	r3, [pc, #648]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 8007324:	2180      	movs	r1, #128	@ 0x80
 8007326:	02c9      	lsls	r1, r1, #11
 8007328:	430a      	orrs	r2, r1
 800732a:	601a      	str	r2, [r3, #0]
 800732c:	4b9f      	ldr	r3, [pc, #636]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	4b9e      	ldr	r3, [pc, #632]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 8007332:	2180      	movs	r1, #128	@ 0x80
 8007334:	0249      	lsls	r1, r1, #9
 8007336:	430a      	orrs	r2, r1
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	e00b      	b.n	8007354 <HAL_RCC_OscConfig+0xe0>
 800733c:	4b9b      	ldr	r3, [pc, #620]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	4b9a      	ldr	r3, [pc, #616]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 8007342:	499b      	ldr	r1, [pc, #620]	@ (80075b0 <HAL_RCC_OscConfig+0x33c>)
 8007344:	400a      	ands	r2, r1
 8007346:	601a      	str	r2, [r3, #0]
 8007348:	4b98      	ldr	r3, [pc, #608]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	4b97      	ldr	r3, [pc, #604]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 800734e:	4999      	ldr	r1, [pc, #612]	@ (80075b4 <HAL_RCC_OscConfig+0x340>)
 8007350:	400a      	ands	r2, r1
 8007352:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d014      	beq.n	8007386 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800735c:	f7fd f850 	bl	8004400 <HAL_GetTick>
 8007360:	0003      	movs	r3, r0
 8007362:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007364:	e008      	b.n	8007378 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007366:	f7fd f84b 	bl	8004400 <HAL_GetTick>
 800736a:	0002      	movs	r2, r0
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	2b64      	cmp	r3, #100	@ 0x64
 8007372:	d901      	bls.n	8007378 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e2fd      	b.n	8007974 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007378:	4b8c      	ldr	r3, [pc, #560]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	2380      	movs	r3, #128	@ 0x80
 800737e:	029b      	lsls	r3, r3, #10
 8007380:	4013      	ands	r3, r2
 8007382:	d0f0      	beq.n	8007366 <HAL_RCC_OscConfig+0xf2>
 8007384:	e015      	b.n	80073b2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007386:	f7fd f83b 	bl	8004400 <HAL_GetTick>
 800738a:	0003      	movs	r3, r0
 800738c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800738e:	e008      	b.n	80073a2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007390:	f7fd f836 	bl	8004400 <HAL_GetTick>
 8007394:	0002      	movs	r2, r0
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	2b64      	cmp	r3, #100	@ 0x64
 800739c:	d901      	bls.n	80073a2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e2e8      	b.n	8007974 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073a2:	4b82      	ldr	r3, [pc, #520]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	2380      	movs	r3, #128	@ 0x80
 80073a8:	029b      	lsls	r3, r3, #10
 80073aa:	4013      	ands	r3, r2
 80073ac:	d1f0      	bne.n	8007390 <HAL_RCC_OscConfig+0x11c>
 80073ae:	e000      	b.n	80073b2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073b0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2202      	movs	r2, #2
 80073b8:	4013      	ands	r3, r2
 80073ba:	d100      	bne.n	80073be <HAL_RCC_OscConfig+0x14a>
 80073bc:	e06c      	b.n	8007498 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80073be:	4b7b      	ldr	r3, [pc, #492]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	220c      	movs	r2, #12
 80073c4:	4013      	ands	r3, r2
 80073c6:	d00e      	beq.n	80073e6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80073c8:	4b78      	ldr	r3, [pc, #480]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	220c      	movs	r2, #12
 80073ce:	4013      	ands	r3, r2
 80073d0:	2b08      	cmp	r3, #8
 80073d2:	d11f      	bne.n	8007414 <HAL_RCC_OscConfig+0x1a0>
 80073d4:	4b75      	ldr	r3, [pc, #468]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	23c0      	movs	r3, #192	@ 0xc0
 80073da:	025b      	lsls	r3, r3, #9
 80073dc:	401a      	ands	r2, r3
 80073de:	2380      	movs	r3, #128	@ 0x80
 80073e0:	021b      	lsls	r3, r3, #8
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d116      	bne.n	8007414 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073e6:	4b71      	ldr	r3, [pc, #452]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2202      	movs	r2, #2
 80073ec:	4013      	ands	r3, r2
 80073ee:	d005      	beq.n	80073fc <HAL_RCC_OscConfig+0x188>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d001      	beq.n	80073fc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e2bb      	b.n	8007974 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073fc:	4b6b      	ldr	r3, [pc, #428]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	22f8      	movs	r2, #248	@ 0xf8
 8007402:	4393      	bics	r3, r2
 8007404:	0019      	movs	r1, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	00da      	lsls	r2, r3, #3
 800740c:	4b67      	ldr	r3, [pc, #412]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 800740e:	430a      	orrs	r2, r1
 8007410:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007412:	e041      	b.n	8007498 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d024      	beq.n	8007466 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800741c:	4b63      	ldr	r3, [pc, #396]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	4b62      	ldr	r3, [pc, #392]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 8007422:	2101      	movs	r1, #1
 8007424:	430a      	orrs	r2, r1
 8007426:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007428:	f7fc ffea 	bl	8004400 <HAL_GetTick>
 800742c:	0003      	movs	r3, r0
 800742e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007430:	e008      	b.n	8007444 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007432:	f7fc ffe5 	bl	8004400 <HAL_GetTick>
 8007436:	0002      	movs	r2, r0
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	2b02      	cmp	r3, #2
 800743e:	d901      	bls.n	8007444 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e297      	b.n	8007974 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007444:	4b59      	ldr	r3, [pc, #356]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2202      	movs	r2, #2
 800744a:	4013      	ands	r3, r2
 800744c:	d0f1      	beq.n	8007432 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800744e:	4b57      	ldr	r3, [pc, #348]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	22f8      	movs	r2, #248	@ 0xf8
 8007454:	4393      	bics	r3, r2
 8007456:	0019      	movs	r1, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	00da      	lsls	r2, r3, #3
 800745e:	4b53      	ldr	r3, [pc, #332]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 8007460:	430a      	orrs	r2, r1
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	e018      	b.n	8007498 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007466:	4b51      	ldr	r3, [pc, #324]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	4b50      	ldr	r3, [pc, #320]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 800746c:	2101      	movs	r1, #1
 800746e:	438a      	bics	r2, r1
 8007470:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007472:	f7fc ffc5 	bl	8004400 <HAL_GetTick>
 8007476:	0003      	movs	r3, r0
 8007478:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800747a:	e008      	b.n	800748e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800747c:	f7fc ffc0 	bl	8004400 <HAL_GetTick>
 8007480:	0002      	movs	r2, r0
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	2b02      	cmp	r3, #2
 8007488:	d901      	bls.n	800748e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e272      	b.n	8007974 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800748e:	4b47      	ldr	r3, [pc, #284]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2202      	movs	r2, #2
 8007494:	4013      	ands	r3, r2
 8007496:	d1f1      	bne.n	800747c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2208      	movs	r2, #8
 800749e:	4013      	ands	r3, r2
 80074a0:	d036      	beq.n	8007510 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	69db      	ldr	r3, [r3, #28]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d019      	beq.n	80074de <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074aa:	4b40      	ldr	r3, [pc, #256]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 80074ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074ae:	4b3f      	ldr	r3, [pc, #252]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 80074b0:	2101      	movs	r1, #1
 80074b2:	430a      	orrs	r2, r1
 80074b4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074b6:	f7fc ffa3 	bl	8004400 <HAL_GetTick>
 80074ba:	0003      	movs	r3, r0
 80074bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074be:	e008      	b.n	80074d2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074c0:	f7fc ff9e 	bl	8004400 <HAL_GetTick>
 80074c4:	0002      	movs	r2, r0
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d901      	bls.n	80074d2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e250      	b.n	8007974 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074d2:	4b36      	ldr	r3, [pc, #216]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 80074d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d6:	2202      	movs	r2, #2
 80074d8:	4013      	ands	r3, r2
 80074da:	d0f1      	beq.n	80074c0 <HAL_RCC_OscConfig+0x24c>
 80074dc:	e018      	b.n	8007510 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074de:	4b33      	ldr	r3, [pc, #204]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 80074e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074e2:	4b32      	ldr	r3, [pc, #200]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 80074e4:	2101      	movs	r1, #1
 80074e6:	438a      	bics	r2, r1
 80074e8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074ea:	f7fc ff89 	bl	8004400 <HAL_GetTick>
 80074ee:	0003      	movs	r3, r0
 80074f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074f2:	e008      	b.n	8007506 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074f4:	f7fc ff84 	bl	8004400 <HAL_GetTick>
 80074f8:	0002      	movs	r2, r0
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d901      	bls.n	8007506 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8007502:	2303      	movs	r3, #3
 8007504:	e236      	b.n	8007974 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007506:	4b29      	ldr	r3, [pc, #164]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 8007508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750a:	2202      	movs	r2, #2
 800750c:	4013      	ands	r3, r2
 800750e:	d1f1      	bne.n	80074f4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2204      	movs	r2, #4
 8007516:	4013      	ands	r3, r2
 8007518:	d100      	bne.n	800751c <HAL_RCC_OscConfig+0x2a8>
 800751a:	e0b5      	b.n	8007688 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800751c:	201f      	movs	r0, #31
 800751e:	183b      	adds	r3, r7, r0
 8007520:	2200      	movs	r2, #0
 8007522:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007524:	4b21      	ldr	r3, [pc, #132]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 8007526:	69da      	ldr	r2, [r3, #28]
 8007528:	2380      	movs	r3, #128	@ 0x80
 800752a:	055b      	lsls	r3, r3, #21
 800752c:	4013      	ands	r3, r2
 800752e:	d110      	bne.n	8007552 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007530:	4b1e      	ldr	r3, [pc, #120]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 8007532:	69da      	ldr	r2, [r3, #28]
 8007534:	4b1d      	ldr	r3, [pc, #116]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 8007536:	2180      	movs	r1, #128	@ 0x80
 8007538:	0549      	lsls	r1, r1, #21
 800753a:	430a      	orrs	r2, r1
 800753c:	61da      	str	r2, [r3, #28]
 800753e:	4b1b      	ldr	r3, [pc, #108]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 8007540:	69da      	ldr	r2, [r3, #28]
 8007542:	2380      	movs	r3, #128	@ 0x80
 8007544:	055b      	lsls	r3, r3, #21
 8007546:	4013      	ands	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]
 800754a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800754c:	183b      	adds	r3, r7, r0
 800754e:	2201      	movs	r2, #1
 8007550:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007552:	4b19      	ldr	r3, [pc, #100]	@ (80075b8 <HAL_RCC_OscConfig+0x344>)
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	2380      	movs	r3, #128	@ 0x80
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	4013      	ands	r3, r2
 800755c:	d11a      	bne.n	8007594 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800755e:	4b16      	ldr	r3, [pc, #88]	@ (80075b8 <HAL_RCC_OscConfig+0x344>)
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	4b15      	ldr	r3, [pc, #84]	@ (80075b8 <HAL_RCC_OscConfig+0x344>)
 8007564:	2180      	movs	r1, #128	@ 0x80
 8007566:	0049      	lsls	r1, r1, #1
 8007568:	430a      	orrs	r2, r1
 800756a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800756c:	f7fc ff48 	bl	8004400 <HAL_GetTick>
 8007570:	0003      	movs	r3, r0
 8007572:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007574:	e008      	b.n	8007588 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007576:	f7fc ff43 	bl	8004400 <HAL_GetTick>
 800757a:	0002      	movs	r2, r0
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	2b64      	cmp	r3, #100	@ 0x64
 8007582:	d901      	bls.n	8007588 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e1f5      	b.n	8007974 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007588:	4b0b      	ldr	r3, [pc, #44]	@ (80075b8 <HAL_RCC_OscConfig+0x344>)
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	2380      	movs	r3, #128	@ 0x80
 800758e:	005b      	lsls	r3, r3, #1
 8007590:	4013      	ands	r3, r2
 8007592:	d0f0      	beq.n	8007576 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d10f      	bne.n	80075bc <HAL_RCC_OscConfig+0x348>
 800759c:	4b03      	ldr	r3, [pc, #12]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 800759e:	6a1a      	ldr	r2, [r3, #32]
 80075a0:	4b02      	ldr	r3, [pc, #8]	@ (80075ac <HAL_RCC_OscConfig+0x338>)
 80075a2:	2101      	movs	r1, #1
 80075a4:	430a      	orrs	r2, r1
 80075a6:	621a      	str	r2, [r3, #32]
 80075a8:	e036      	b.n	8007618 <HAL_RCC_OscConfig+0x3a4>
 80075aa:	46c0      	nop			@ (mov r8, r8)
 80075ac:	40021000 	.word	0x40021000
 80075b0:	fffeffff 	.word	0xfffeffff
 80075b4:	fffbffff 	.word	0xfffbffff
 80075b8:	40007000 	.word	0x40007000
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10c      	bne.n	80075de <HAL_RCC_OscConfig+0x36a>
 80075c4:	4bca      	ldr	r3, [pc, #808]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 80075c6:	6a1a      	ldr	r2, [r3, #32]
 80075c8:	4bc9      	ldr	r3, [pc, #804]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 80075ca:	2101      	movs	r1, #1
 80075cc:	438a      	bics	r2, r1
 80075ce:	621a      	str	r2, [r3, #32]
 80075d0:	4bc7      	ldr	r3, [pc, #796]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 80075d2:	6a1a      	ldr	r2, [r3, #32]
 80075d4:	4bc6      	ldr	r3, [pc, #792]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 80075d6:	2104      	movs	r1, #4
 80075d8:	438a      	bics	r2, r1
 80075da:	621a      	str	r2, [r3, #32]
 80075dc:	e01c      	b.n	8007618 <HAL_RCC_OscConfig+0x3a4>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	2b05      	cmp	r3, #5
 80075e4:	d10c      	bne.n	8007600 <HAL_RCC_OscConfig+0x38c>
 80075e6:	4bc2      	ldr	r3, [pc, #776]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 80075e8:	6a1a      	ldr	r2, [r3, #32]
 80075ea:	4bc1      	ldr	r3, [pc, #772]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 80075ec:	2104      	movs	r1, #4
 80075ee:	430a      	orrs	r2, r1
 80075f0:	621a      	str	r2, [r3, #32]
 80075f2:	4bbf      	ldr	r3, [pc, #764]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 80075f4:	6a1a      	ldr	r2, [r3, #32]
 80075f6:	4bbe      	ldr	r3, [pc, #760]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 80075f8:	2101      	movs	r1, #1
 80075fa:	430a      	orrs	r2, r1
 80075fc:	621a      	str	r2, [r3, #32]
 80075fe:	e00b      	b.n	8007618 <HAL_RCC_OscConfig+0x3a4>
 8007600:	4bbb      	ldr	r3, [pc, #748]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 8007602:	6a1a      	ldr	r2, [r3, #32]
 8007604:	4bba      	ldr	r3, [pc, #744]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 8007606:	2101      	movs	r1, #1
 8007608:	438a      	bics	r2, r1
 800760a:	621a      	str	r2, [r3, #32]
 800760c:	4bb8      	ldr	r3, [pc, #736]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 800760e:	6a1a      	ldr	r2, [r3, #32]
 8007610:	4bb7      	ldr	r3, [pc, #732]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 8007612:	2104      	movs	r1, #4
 8007614:	438a      	bics	r2, r1
 8007616:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d014      	beq.n	800764a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007620:	f7fc feee 	bl	8004400 <HAL_GetTick>
 8007624:	0003      	movs	r3, r0
 8007626:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007628:	e009      	b.n	800763e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800762a:	f7fc fee9 	bl	8004400 <HAL_GetTick>
 800762e:	0002      	movs	r2, r0
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	4aaf      	ldr	r2, [pc, #700]	@ (80078f4 <HAL_RCC_OscConfig+0x680>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d901      	bls.n	800763e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e19a      	b.n	8007974 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800763e:	4bac      	ldr	r3, [pc, #688]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	2202      	movs	r2, #2
 8007644:	4013      	ands	r3, r2
 8007646:	d0f0      	beq.n	800762a <HAL_RCC_OscConfig+0x3b6>
 8007648:	e013      	b.n	8007672 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800764a:	f7fc fed9 	bl	8004400 <HAL_GetTick>
 800764e:	0003      	movs	r3, r0
 8007650:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007652:	e009      	b.n	8007668 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007654:	f7fc fed4 	bl	8004400 <HAL_GetTick>
 8007658:	0002      	movs	r2, r0
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	4aa5      	ldr	r2, [pc, #660]	@ (80078f4 <HAL_RCC_OscConfig+0x680>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d901      	bls.n	8007668 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e185      	b.n	8007974 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007668:	4ba1      	ldr	r3, [pc, #644]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	2202      	movs	r2, #2
 800766e:	4013      	ands	r3, r2
 8007670:	d1f0      	bne.n	8007654 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007672:	231f      	movs	r3, #31
 8007674:	18fb      	adds	r3, r7, r3
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d105      	bne.n	8007688 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800767c:	4b9c      	ldr	r3, [pc, #624]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 800767e:	69da      	ldr	r2, [r3, #28]
 8007680:	4b9b      	ldr	r3, [pc, #620]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 8007682:	499d      	ldr	r1, [pc, #628]	@ (80078f8 <HAL_RCC_OscConfig+0x684>)
 8007684:	400a      	ands	r2, r1
 8007686:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2210      	movs	r2, #16
 800768e:	4013      	ands	r3, r2
 8007690:	d063      	beq.n	800775a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d12a      	bne.n	80076f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800769a:	4b95      	ldr	r3, [pc, #596]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 800769c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800769e:	4b94      	ldr	r3, [pc, #592]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 80076a0:	2104      	movs	r1, #4
 80076a2:	430a      	orrs	r2, r1
 80076a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80076a6:	4b92      	ldr	r3, [pc, #584]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 80076a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076aa:	4b91      	ldr	r3, [pc, #580]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 80076ac:	2101      	movs	r1, #1
 80076ae:	430a      	orrs	r2, r1
 80076b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076b2:	f7fc fea5 	bl	8004400 <HAL_GetTick>
 80076b6:	0003      	movs	r3, r0
 80076b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80076ba:	e008      	b.n	80076ce <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80076bc:	f7fc fea0 	bl	8004400 <HAL_GetTick>
 80076c0:	0002      	movs	r2, r0
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d901      	bls.n	80076ce <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e152      	b.n	8007974 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80076ce:	4b88      	ldr	r3, [pc, #544]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 80076d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076d2:	2202      	movs	r2, #2
 80076d4:	4013      	ands	r3, r2
 80076d6:	d0f1      	beq.n	80076bc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80076d8:	4b85      	ldr	r3, [pc, #532]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 80076da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076dc:	22f8      	movs	r2, #248	@ 0xf8
 80076de:	4393      	bics	r3, r2
 80076e0:	0019      	movs	r1, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	00da      	lsls	r2, r3, #3
 80076e8:	4b81      	ldr	r3, [pc, #516]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 80076ea:	430a      	orrs	r2, r1
 80076ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80076ee:	e034      	b.n	800775a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	3305      	adds	r3, #5
 80076f6:	d111      	bne.n	800771c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80076f8:	4b7d      	ldr	r3, [pc, #500]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 80076fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076fc:	4b7c      	ldr	r3, [pc, #496]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 80076fe:	2104      	movs	r1, #4
 8007700:	438a      	bics	r2, r1
 8007702:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8007704:	4b7a      	ldr	r3, [pc, #488]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 8007706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007708:	22f8      	movs	r2, #248	@ 0xf8
 800770a:	4393      	bics	r3, r2
 800770c:	0019      	movs	r1, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	699b      	ldr	r3, [r3, #24]
 8007712:	00da      	lsls	r2, r3, #3
 8007714:	4b76      	ldr	r3, [pc, #472]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 8007716:	430a      	orrs	r2, r1
 8007718:	635a      	str	r2, [r3, #52]	@ 0x34
 800771a:	e01e      	b.n	800775a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800771c:	4b74      	ldr	r3, [pc, #464]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 800771e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007720:	4b73      	ldr	r3, [pc, #460]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 8007722:	2104      	movs	r1, #4
 8007724:	430a      	orrs	r2, r1
 8007726:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8007728:	4b71      	ldr	r3, [pc, #452]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 800772a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800772c:	4b70      	ldr	r3, [pc, #448]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 800772e:	2101      	movs	r1, #1
 8007730:	438a      	bics	r2, r1
 8007732:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007734:	f7fc fe64 	bl	8004400 <HAL_GetTick>
 8007738:	0003      	movs	r3, r0
 800773a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800773c:	e008      	b.n	8007750 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800773e:	f7fc fe5f 	bl	8004400 <HAL_GetTick>
 8007742:	0002      	movs	r2, r0
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	2b02      	cmp	r3, #2
 800774a:	d901      	bls.n	8007750 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e111      	b.n	8007974 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8007750:	4b67      	ldr	r3, [pc, #412]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 8007752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007754:	2202      	movs	r2, #2
 8007756:	4013      	ands	r3, r2
 8007758:	d1f1      	bne.n	800773e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2220      	movs	r2, #32
 8007760:	4013      	ands	r3, r2
 8007762:	d05c      	beq.n	800781e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8007764:	4b62      	ldr	r3, [pc, #392]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	220c      	movs	r2, #12
 800776a:	4013      	ands	r3, r2
 800776c:	2b0c      	cmp	r3, #12
 800776e:	d00e      	beq.n	800778e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8007770:	4b5f      	ldr	r3, [pc, #380]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	220c      	movs	r2, #12
 8007776:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8007778:	2b08      	cmp	r3, #8
 800777a:	d114      	bne.n	80077a6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800777c:	4b5c      	ldr	r3, [pc, #368]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	23c0      	movs	r3, #192	@ 0xc0
 8007782:	025b      	lsls	r3, r3, #9
 8007784:	401a      	ands	r2, r3
 8007786:	23c0      	movs	r3, #192	@ 0xc0
 8007788:	025b      	lsls	r3, r3, #9
 800778a:	429a      	cmp	r2, r3
 800778c:	d10b      	bne.n	80077a6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800778e:	4b58      	ldr	r3, [pc, #352]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 8007790:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007792:	2380      	movs	r3, #128	@ 0x80
 8007794:	029b      	lsls	r3, r3, #10
 8007796:	4013      	ands	r3, r2
 8007798:	d040      	beq.n	800781c <HAL_RCC_OscConfig+0x5a8>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d03c      	beq.n	800781c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e0e6      	b.n	8007974 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a1b      	ldr	r3, [r3, #32]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d01b      	beq.n	80077e6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80077ae:	4b50      	ldr	r3, [pc, #320]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 80077b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077b2:	4b4f      	ldr	r3, [pc, #316]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 80077b4:	2180      	movs	r1, #128	@ 0x80
 80077b6:	0249      	lsls	r1, r1, #9
 80077b8:	430a      	orrs	r2, r1
 80077ba:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077bc:	f7fc fe20 	bl	8004400 <HAL_GetTick>
 80077c0:	0003      	movs	r3, r0
 80077c2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80077c4:	e008      	b.n	80077d8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077c6:	f7fc fe1b 	bl	8004400 <HAL_GetTick>
 80077ca:	0002      	movs	r2, r0
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d901      	bls.n	80077d8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e0cd      	b.n	8007974 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80077d8:	4b45      	ldr	r3, [pc, #276]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 80077da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077dc:	2380      	movs	r3, #128	@ 0x80
 80077de:	029b      	lsls	r3, r3, #10
 80077e0:	4013      	ands	r3, r2
 80077e2:	d0f0      	beq.n	80077c6 <HAL_RCC_OscConfig+0x552>
 80077e4:	e01b      	b.n	800781e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80077e6:	4b42      	ldr	r3, [pc, #264]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 80077e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077ea:	4b41      	ldr	r3, [pc, #260]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 80077ec:	4943      	ldr	r1, [pc, #268]	@ (80078fc <HAL_RCC_OscConfig+0x688>)
 80077ee:	400a      	ands	r2, r1
 80077f0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077f2:	f7fc fe05 	bl	8004400 <HAL_GetTick>
 80077f6:	0003      	movs	r3, r0
 80077f8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80077fa:	e008      	b.n	800780e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077fc:	f7fc fe00 	bl	8004400 <HAL_GetTick>
 8007800:	0002      	movs	r2, r0
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	2b02      	cmp	r3, #2
 8007808:	d901      	bls.n	800780e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e0b2      	b.n	8007974 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800780e:	4b38      	ldr	r3, [pc, #224]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 8007810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007812:	2380      	movs	r3, #128	@ 0x80
 8007814:	029b      	lsls	r3, r3, #10
 8007816:	4013      	ands	r3, r2
 8007818:	d1f0      	bne.n	80077fc <HAL_RCC_OscConfig+0x588>
 800781a:	e000      	b.n	800781e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800781c:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007822:	2b00      	cmp	r3, #0
 8007824:	d100      	bne.n	8007828 <HAL_RCC_OscConfig+0x5b4>
 8007826:	e0a4      	b.n	8007972 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007828:	4b31      	ldr	r3, [pc, #196]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	220c      	movs	r2, #12
 800782e:	4013      	ands	r3, r2
 8007830:	2b08      	cmp	r3, #8
 8007832:	d100      	bne.n	8007836 <HAL_RCC_OscConfig+0x5c2>
 8007834:	e078      	b.n	8007928 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800783a:	2b02      	cmp	r3, #2
 800783c:	d14c      	bne.n	80078d8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800783e:	4b2c      	ldr	r3, [pc, #176]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	4b2b      	ldr	r3, [pc, #172]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 8007844:	492e      	ldr	r1, [pc, #184]	@ (8007900 <HAL_RCC_OscConfig+0x68c>)
 8007846:	400a      	ands	r2, r1
 8007848:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800784a:	f7fc fdd9 	bl	8004400 <HAL_GetTick>
 800784e:	0003      	movs	r3, r0
 8007850:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007852:	e008      	b.n	8007866 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007854:	f7fc fdd4 	bl	8004400 <HAL_GetTick>
 8007858:	0002      	movs	r2, r0
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	2b02      	cmp	r3, #2
 8007860:	d901      	bls.n	8007866 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e086      	b.n	8007974 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007866:	4b22      	ldr	r3, [pc, #136]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	2380      	movs	r3, #128	@ 0x80
 800786c:	049b      	lsls	r3, r3, #18
 800786e:	4013      	ands	r3, r2
 8007870:	d1f0      	bne.n	8007854 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007872:	4b1f      	ldr	r3, [pc, #124]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 8007874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007876:	220f      	movs	r2, #15
 8007878:	4393      	bics	r3, r2
 800787a:	0019      	movs	r1, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007880:	4b1b      	ldr	r3, [pc, #108]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 8007882:	430a      	orrs	r2, r1
 8007884:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007886:	4b1a      	ldr	r3, [pc, #104]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	4a1e      	ldr	r2, [pc, #120]	@ (8007904 <HAL_RCC_OscConfig+0x690>)
 800788c:	4013      	ands	r3, r2
 800788e:	0019      	movs	r1, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007898:	431a      	orrs	r2, r3
 800789a:	4b15      	ldr	r3, [pc, #84]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 800789c:	430a      	orrs	r2, r1
 800789e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078a0:	4b13      	ldr	r3, [pc, #76]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	4b12      	ldr	r3, [pc, #72]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 80078a6:	2180      	movs	r1, #128	@ 0x80
 80078a8:	0449      	lsls	r1, r1, #17
 80078aa:	430a      	orrs	r2, r1
 80078ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078ae:	f7fc fda7 	bl	8004400 <HAL_GetTick>
 80078b2:	0003      	movs	r3, r0
 80078b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80078b6:	e008      	b.n	80078ca <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078b8:	f7fc fda2 	bl	8004400 <HAL_GetTick>
 80078bc:	0002      	movs	r2, r0
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d901      	bls.n	80078ca <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e054      	b.n	8007974 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80078ca:	4b09      	ldr	r3, [pc, #36]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	2380      	movs	r3, #128	@ 0x80
 80078d0:	049b      	lsls	r3, r3, #18
 80078d2:	4013      	ands	r3, r2
 80078d4:	d0f0      	beq.n	80078b8 <HAL_RCC_OscConfig+0x644>
 80078d6:	e04c      	b.n	8007972 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078d8:	4b05      	ldr	r3, [pc, #20]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	4b04      	ldr	r3, [pc, #16]	@ (80078f0 <HAL_RCC_OscConfig+0x67c>)
 80078de:	4908      	ldr	r1, [pc, #32]	@ (8007900 <HAL_RCC_OscConfig+0x68c>)
 80078e0:	400a      	ands	r2, r1
 80078e2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078e4:	f7fc fd8c 	bl	8004400 <HAL_GetTick>
 80078e8:	0003      	movs	r3, r0
 80078ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80078ec:	e015      	b.n	800791a <HAL_RCC_OscConfig+0x6a6>
 80078ee:	46c0      	nop			@ (mov r8, r8)
 80078f0:	40021000 	.word	0x40021000
 80078f4:	00001388 	.word	0x00001388
 80078f8:	efffffff 	.word	0xefffffff
 80078fc:	fffeffff 	.word	0xfffeffff
 8007900:	feffffff 	.word	0xfeffffff
 8007904:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007908:	f7fc fd7a 	bl	8004400 <HAL_GetTick>
 800790c:	0002      	movs	r2, r0
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	2b02      	cmp	r3, #2
 8007914:	d901      	bls.n	800791a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e02c      	b.n	8007974 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800791a:	4b18      	ldr	r3, [pc, #96]	@ (800797c <HAL_RCC_OscConfig+0x708>)
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	2380      	movs	r3, #128	@ 0x80
 8007920:	049b      	lsls	r3, r3, #18
 8007922:	4013      	ands	r3, r2
 8007924:	d1f0      	bne.n	8007908 <HAL_RCC_OscConfig+0x694>
 8007926:	e024      	b.n	8007972 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792c:	2b01      	cmp	r3, #1
 800792e:	d101      	bne.n	8007934 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e01f      	b.n	8007974 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8007934:	4b11      	ldr	r3, [pc, #68]	@ (800797c <HAL_RCC_OscConfig+0x708>)
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800793a:	4b10      	ldr	r3, [pc, #64]	@ (800797c <HAL_RCC_OscConfig+0x708>)
 800793c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800793e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	23c0      	movs	r3, #192	@ 0xc0
 8007944:	025b      	lsls	r3, r3, #9
 8007946:	401a      	ands	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800794c:	429a      	cmp	r2, r3
 800794e:	d10e      	bne.n	800796e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	220f      	movs	r2, #15
 8007954:	401a      	ands	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800795a:	429a      	cmp	r2, r3
 800795c:	d107      	bne.n	800796e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	23f0      	movs	r3, #240	@ 0xf0
 8007962:	039b      	lsls	r3, r3, #14
 8007964:	401a      	ands	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800796a:	429a      	cmp	r2, r3
 800796c:	d001      	beq.n	8007972 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e000      	b.n	8007974 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	0018      	movs	r0, r3
 8007976:	46bd      	mov	sp, r7
 8007978:	b008      	add	sp, #32
 800797a:	bd80      	pop	{r7, pc}
 800797c:	40021000 	.word	0x40021000

08007980 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d101      	bne.n	8007994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e0bf      	b.n	8007b14 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007994:	4b61      	ldr	r3, [pc, #388]	@ (8007b1c <HAL_RCC_ClockConfig+0x19c>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2201      	movs	r2, #1
 800799a:	4013      	ands	r3, r2
 800799c:	683a      	ldr	r2, [r7, #0]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d911      	bls.n	80079c6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079a2:	4b5e      	ldr	r3, [pc, #376]	@ (8007b1c <HAL_RCC_ClockConfig+0x19c>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2201      	movs	r2, #1
 80079a8:	4393      	bics	r3, r2
 80079aa:	0019      	movs	r1, r3
 80079ac:	4b5b      	ldr	r3, [pc, #364]	@ (8007b1c <HAL_RCC_ClockConfig+0x19c>)
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	430a      	orrs	r2, r1
 80079b2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079b4:	4b59      	ldr	r3, [pc, #356]	@ (8007b1c <HAL_RCC_ClockConfig+0x19c>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2201      	movs	r2, #1
 80079ba:	4013      	ands	r3, r2
 80079bc:	683a      	ldr	r2, [r7, #0]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d001      	beq.n	80079c6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e0a6      	b.n	8007b14 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2202      	movs	r2, #2
 80079cc:	4013      	ands	r3, r2
 80079ce:	d015      	beq.n	80079fc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2204      	movs	r2, #4
 80079d6:	4013      	ands	r3, r2
 80079d8:	d006      	beq.n	80079e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80079da:	4b51      	ldr	r3, [pc, #324]	@ (8007b20 <HAL_RCC_ClockConfig+0x1a0>)
 80079dc:	685a      	ldr	r2, [r3, #4]
 80079de:	4b50      	ldr	r3, [pc, #320]	@ (8007b20 <HAL_RCC_ClockConfig+0x1a0>)
 80079e0:	21e0      	movs	r1, #224	@ 0xe0
 80079e2:	00c9      	lsls	r1, r1, #3
 80079e4:	430a      	orrs	r2, r1
 80079e6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079e8:	4b4d      	ldr	r3, [pc, #308]	@ (8007b20 <HAL_RCC_ClockConfig+0x1a0>)
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	22f0      	movs	r2, #240	@ 0xf0
 80079ee:	4393      	bics	r3, r2
 80079f0:	0019      	movs	r1, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	689a      	ldr	r2, [r3, #8]
 80079f6:	4b4a      	ldr	r3, [pc, #296]	@ (8007b20 <HAL_RCC_ClockConfig+0x1a0>)
 80079f8:	430a      	orrs	r2, r1
 80079fa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2201      	movs	r2, #1
 8007a02:	4013      	ands	r3, r2
 8007a04:	d04c      	beq.n	8007aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d107      	bne.n	8007a1e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a0e:	4b44      	ldr	r3, [pc, #272]	@ (8007b20 <HAL_RCC_ClockConfig+0x1a0>)
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	2380      	movs	r3, #128	@ 0x80
 8007a14:	029b      	lsls	r3, r3, #10
 8007a16:	4013      	ands	r3, r2
 8007a18:	d120      	bne.n	8007a5c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e07a      	b.n	8007b14 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d107      	bne.n	8007a36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a26:	4b3e      	ldr	r3, [pc, #248]	@ (8007b20 <HAL_RCC_ClockConfig+0x1a0>)
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	2380      	movs	r3, #128	@ 0x80
 8007a2c:	049b      	lsls	r3, r3, #18
 8007a2e:	4013      	ands	r3, r2
 8007a30:	d114      	bne.n	8007a5c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e06e      	b.n	8007b14 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	2b03      	cmp	r3, #3
 8007a3c:	d107      	bne.n	8007a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8007a3e:	4b38      	ldr	r3, [pc, #224]	@ (8007b20 <HAL_RCC_ClockConfig+0x1a0>)
 8007a40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a42:	2380      	movs	r3, #128	@ 0x80
 8007a44:	029b      	lsls	r3, r3, #10
 8007a46:	4013      	ands	r3, r2
 8007a48:	d108      	bne.n	8007a5c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e062      	b.n	8007b14 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a4e:	4b34      	ldr	r3, [pc, #208]	@ (8007b20 <HAL_RCC_ClockConfig+0x1a0>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2202      	movs	r2, #2
 8007a54:	4013      	ands	r3, r2
 8007a56:	d101      	bne.n	8007a5c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e05b      	b.n	8007b14 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a5c:	4b30      	ldr	r3, [pc, #192]	@ (8007b20 <HAL_RCC_ClockConfig+0x1a0>)
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	2203      	movs	r2, #3
 8007a62:	4393      	bics	r3, r2
 8007a64:	0019      	movs	r1, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	685a      	ldr	r2, [r3, #4]
 8007a6a:	4b2d      	ldr	r3, [pc, #180]	@ (8007b20 <HAL_RCC_ClockConfig+0x1a0>)
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a70:	f7fc fcc6 	bl	8004400 <HAL_GetTick>
 8007a74:	0003      	movs	r3, r0
 8007a76:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a78:	e009      	b.n	8007a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a7a:	f7fc fcc1 	bl	8004400 <HAL_GetTick>
 8007a7e:	0002      	movs	r2, r0
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	4a27      	ldr	r2, [pc, #156]	@ (8007b24 <HAL_RCC_ClockConfig+0x1a4>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d901      	bls.n	8007a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e042      	b.n	8007b14 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a8e:	4b24      	ldr	r3, [pc, #144]	@ (8007b20 <HAL_RCC_ClockConfig+0x1a0>)
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	220c      	movs	r2, #12
 8007a94:	401a      	ands	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d1ec      	bne.n	8007a7a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8007b1c <HAL_RCC_ClockConfig+0x19c>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	683a      	ldr	r2, [r7, #0]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d211      	bcs.n	8007ad2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aae:	4b1b      	ldr	r3, [pc, #108]	@ (8007b1c <HAL_RCC_ClockConfig+0x19c>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	4393      	bics	r3, r2
 8007ab6:	0019      	movs	r1, r3
 8007ab8:	4b18      	ldr	r3, [pc, #96]	@ (8007b1c <HAL_RCC_ClockConfig+0x19c>)
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	430a      	orrs	r2, r1
 8007abe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ac0:	4b16      	ldr	r3, [pc, #88]	@ (8007b1c <HAL_RCC_ClockConfig+0x19c>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	683a      	ldr	r2, [r7, #0]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d001      	beq.n	8007ad2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e020      	b.n	8007b14 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2204      	movs	r2, #4
 8007ad8:	4013      	ands	r3, r2
 8007ada:	d009      	beq.n	8007af0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007adc:	4b10      	ldr	r3, [pc, #64]	@ (8007b20 <HAL_RCC_ClockConfig+0x1a0>)
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	4a11      	ldr	r2, [pc, #68]	@ (8007b28 <HAL_RCC_ClockConfig+0x1a8>)
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	0019      	movs	r1, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	68da      	ldr	r2, [r3, #12]
 8007aea:	4b0d      	ldr	r3, [pc, #52]	@ (8007b20 <HAL_RCC_ClockConfig+0x1a0>)
 8007aec:	430a      	orrs	r2, r1
 8007aee:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007af0:	f000 f820 	bl	8007b34 <HAL_RCC_GetSysClockFreq>
 8007af4:	0001      	movs	r1, r0
 8007af6:	4b0a      	ldr	r3, [pc, #40]	@ (8007b20 <HAL_RCC_ClockConfig+0x1a0>)
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	091b      	lsrs	r3, r3, #4
 8007afc:	220f      	movs	r2, #15
 8007afe:	4013      	ands	r3, r2
 8007b00:	4a0a      	ldr	r2, [pc, #40]	@ (8007b2c <HAL_RCC_ClockConfig+0x1ac>)
 8007b02:	5cd3      	ldrb	r3, [r2, r3]
 8007b04:	000a      	movs	r2, r1
 8007b06:	40da      	lsrs	r2, r3
 8007b08:	4b09      	ldr	r3, [pc, #36]	@ (8007b30 <HAL_RCC_ClockConfig+0x1b0>)
 8007b0a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8007b0c:	2003      	movs	r0, #3
 8007b0e:	f7fc fc31 	bl	8004374 <HAL_InitTick>
  
  return HAL_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	0018      	movs	r0, r3
 8007b16:	46bd      	mov	sp, r7
 8007b18:	b004      	add	sp, #16
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	40022000 	.word	0x40022000
 8007b20:	40021000 	.word	0x40021000
 8007b24:	00001388 	.word	0x00001388
 8007b28:	fffff8ff 	.word	0xfffff8ff
 8007b2c:	08016848 	.word	0x08016848
 8007b30:	20000070 	.word	0x20000070

08007b34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	60fb      	str	r3, [r7, #12]
 8007b3e:	2300      	movs	r3, #0
 8007b40:	60bb      	str	r3, [r7, #8]
 8007b42:	2300      	movs	r3, #0
 8007b44:	617b      	str	r3, [r7, #20]
 8007b46:	2300      	movs	r3, #0
 8007b48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8007b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8007c04 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	220c      	movs	r2, #12
 8007b58:	4013      	ands	r3, r2
 8007b5a:	2b0c      	cmp	r3, #12
 8007b5c:	d046      	beq.n	8007bec <HAL_RCC_GetSysClockFreq+0xb8>
 8007b5e:	d848      	bhi.n	8007bf2 <HAL_RCC_GetSysClockFreq+0xbe>
 8007b60:	2b04      	cmp	r3, #4
 8007b62:	d002      	beq.n	8007b6a <HAL_RCC_GetSysClockFreq+0x36>
 8007b64:	2b08      	cmp	r3, #8
 8007b66:	d003      	beq.n	8007b70 <HAL_RCC_GetSysClockFreq+0x3c>
 8007b68:	e043      	b.n	8007bf2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007b6a:	4b27      	ldr	r3, [pc, #156]	@ (8007c08 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007b6c:	613b      	str	r3, [r7, #16]
      break;
 8007b6e:	e043      	b.n	8007bf8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	0c9b      	lsrs	r3, r3, #18
 8007b74:	220f      	movs	r2, #15
 8007b76:	4013      	ands	r3, r2
 8007b78:	4a24      	ldr	r2, [pc, #144]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0xd8>)
 8007b7a:	5cd3      	ldrb	r3, [r2, r3]
 8007b7c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8007b7e:	4b21      	ldr	r3, [pc, #132]	@ (8007c04 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b82:	220f      	movs	r2, #15
 8007b84:	4013      	ands	r3, r2
 8007b86:	4a22      	ldr	r2, [pc, #136]	@ (8007c10 <HAL_RCC_GetSysClockFreq+0xdc>)
 8007b88:	5cd3      	ldrb	r3, [r2, r3]
 8007b8a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	23c0      	movs	r3, #192	@ 0xc0
 8007b90:	025b      	lsls	r3, r3, #9
 8007b92:	401a      	ands	r2, r3
 8007b94:	2380      	movs	r3, #128	@ 0x80
 8007b96:	025b      	lsls	r3, r3, #9
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d109      	bne.n	8007bb0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007b9c:	68b9      	ldr	r1, [r7, #8]
 8007b9e:	481a      	ldr	r0, [pc, #104]	@ (8007c08 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007ba0:	f7f8 face 	bl	8000140 <__udivsi3>
 8007ba4:	0003      	movs	r3, r0
 8007ba6:	001a      	movs	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4353      	muls	r3, r2
 8007bac:	617b      	str	r3, [r7, #20]
 8007bae:	e01a      	b.n	8007be6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	23c0      	movs	r3, #192	@ 0xc0
 8007bb4:	025b      	lsls	r3, r3, #9
 8007bb6:	401a      	ands	r2, r3
 8007bb8:	23c0      	movs	r3, #192	@ 0xc0
 8007bba:	025b      	lsls	r3, r3, #9
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d109      	bne.n	8007bd4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007bc0:	68b9      	ldr	r1, [r7, #8]
 8007bc2:	4814      	ldr	r0, [pc, #80]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0xe0>)
 8007bc4:	f7f8 fabc 	bl	8000140 <__udivsi3>
 8007bc8:	0003      	movs	r3, r0
 8007bca:	001a      	movs	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4353      	muls	r3, r2
 8007bd0:	617b      	str	r3, [r7, #20]
 8007bd2:	e008      	b.n	8007be6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007bd4:	68b9      	ldr	r1, [r7, #8]
 8007bd6:	480c      	ldr	r0, [pc, #48]	@ (8007c08 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007bd8:	f7f8 fab2 	bl	8000140 <__udivsi3>
 8007bdc:	0003      	movs	r3, r0
 8007bde:	001a      	movs	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4353      	muls	r3, r2
 8007be4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	613b      	str	r3, [r7, #16]
      break;
 8007bea:	e005      	b.n	8007bf8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8007bec:	4b09      	ldr	r3, [pc, #36]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0xe0>)
 8007bee:	613b      	str	r3, [r7, #16]
      break;
 8007bf0:	e002      	b.n	8007bf8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007bf2:	4b05      	ldr	r3, [pc, #20]	@ (8007c08 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007bf4:	613b      	str	r3, [r7, #16]
      break;
 8007bf6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8007bf8:	693b      	ldr	r3, [r7, #16]
}
 8007bfa:	0018      	movs	r0, r3
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	b006      	add	sp, #24
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	46c0      	nop			@ (mov r8, r8)
 8007c04:	40021000 	.word	0x40021000
 8007c08:	007a1200 	.word	0x007a1200
 8007c0c:	08016860 	.word	0x08016860
 8007c10:	08016870 	.word	0x08016870
 8007c14:	02dc6c00 	.word	0x02dc6c00

08007c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c1c:	4b02      	ldr	r3, [pc, #8]	@ (8007c28 <HAL_RCC_GetHCLKFreq+0x10>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
}
 8007c20:	0018      	movs	r0, r3
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	46c0      	nop			@ (mov r8, r8)
 8007c28:	20000070 	.word	0x20000070

08007c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8007c30:	f7ff fff2 	bl	8007c18 <HAL_RCC_GetHCLKFreq>
 8007c34:	0001      	movs	r1, r0
 8007c36:	4b06      	ldr	r3, [pc, #24]	@ (8007c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	0a1b      	lsrs	r3, r3, #8
 8007c3c:	2207      	movs	r2, #7
 8007c3e:	4013      	ands	r3, r2
 8007c40:	4a04      	ldr	r2, [pc, #16]	@ (8007c54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007c42:	5cd3      	ldrb	r3, [r2, r3]
 8007c44:	40d9      	lsrs	r1, r3
 8007c46:	000b      	movs	r3, r1
}    
 8007c48:	0018      	movs	r0, r3
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	46c0      	nop			@ (mov r8, r8)
 8007c50:	40021000 	.word	0x40021000
 8007c54:	08016858 	.word	0x08016858

08007c58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c60:	2300      	movs	r3, #0
 8007c62:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8007c64:	2300      	movs	r3, #0
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	2380      	movs	r3, #128	@ 0x80
 8007c6e:	025b      	lsls	r3, r3, #9
 8007c70:	4013      	ands	r3, r2
 8007c72:	d100      	bne.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8007c74:	e08e      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8007c76:	2017      	movs	r0, #23
 8007c78:	183b      	adds	r3, r7, r0
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c7e:	4b6e      	ldr	r3, [pc, #440]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007c80:	69da      	ldr	r2, [r3, #28]
 8007c82:	2380      	movs	r3, #128	@ 0x80
 8007c84:	055b      	lsls	r3, r3, #21
 8007c86:	4013      	ands	r3, r2
 8007c88:	d110      	bne.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007c8a:	4b6b      	ldr	r3, [pc, #428]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007c8c:	69da      	ldr	r2, [r3, #28]
 8007c8e:	4b6a      	ldr	r3, [pc, #424]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007c90:	2180      	movs	r1, #128	@ 0x80
 8007c92:	0549      	lsls	r1, r1, #21
 8007c94:	430a      	orrs	r2, r1
 8007c96:	61da      	str	r2, [r3, #28]
 8007c98:	4b67      	ldr	r3, [pc, #412]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007c9a:	69da      	ldr	r2, [r3, #28]
 8007c9c:	2380      	movs	r3, #128	@ 0x80
 8007c9e:	055b      	lsls	r3, r3, #21
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	60bb      	str	r3, [r7, #8]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ca6:	183b      	adds	r3, r7, r0
 8007ca8:	2201      	movs	r2, #1
 8007caa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cac:	4b63      	ldr	r3, [pc, #396]	@ (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	2380      	movs	r3, #128	@ 0x80
 8007cb2:	005b      	lsls	r3, r3, #1
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	d11a      	bne.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007cb8:	4b60      	ldr	r3, [pc, #384]	@ (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	4b5f      	ldr	r3, [pc, #380]	@ (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007cbe:	2180      	movs	r1, #128	@ 0x80
 8007cc0:	0049      	lsls	r1, r1, #1
 8007cc2:	430a      	orrs	r2, r1
 8007cc4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cc6:	f7fc fb9b 	bl	8004400 <HAL_GetTick>
 8007cca:	0003      	movs	r3, r0
 8007ccc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cce:	e008      	b.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cd0:	f7fc fb96 	bl	8004400 <HAL_GetTick>
 8007cd4:	0002      	movs	r2, r0
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	2b64      	cmp	r3, #100	@ 0x64
 8007cdc:	d901      	bls.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e0a6      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ce2:	4b56      	ldr	r3, [pc, #344]	@ (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	2380      	movs	r3, #128	@ 0x80
 8007ce8:	005b      	lsls	r3, r3, #1
 8007cea:	4013      	ands	r3, r2
 8007cec:	d0f0      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007cee:	4b52      	ldr	r3, [pc, #328]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007cf0:	6a1a      	ldr	r2, [r3, #32]
 8007cf2:	23c0      	movs	r3, #192	@ 0xc0
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d034      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	23c0      	movs	r3, #192	@ 0xc0
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4013      	ands	r3, r2
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d02c      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d10:	4b49      	ldr	r3, [pc, #292]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d12:	6a1b      	ldr	r3, [r3, #32]
 8007d14:	4a4a      	ldr	r2, [pc, #296]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8007d16:	4013      	ands	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d1a:	4b47      	ldr	r3, [pc, #284]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d1c:	6a1a      	ldr	r2, [r3, #32]
 8007d1e:	4b46      	ldr	r3, [pc, #280]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d20:	2180      	movs	r1, #128	@ 0x80
 8007d22:	0249      	lsls	r1, r1, #9
 8007d24:	430a      	orrs	r2, r1
 8007d26:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d28:	4b43      	ldr	r3, [pc, #268]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d2a:	6a1a      	ldr	r2, [r3, #32]
 8007d2c:	4b42      	ldr	r3, [pc, #264]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d2e:	4945      	ldr	r1, [pc, #276]	@ (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8007d30:	400a      	ands	r2, r1
 8007d32:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007d34:	4b40      	ldr	r3, [pc, #256]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	4013      	ands	r3, r2
 8007d40:	d013      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d42:	f7fc fb5d 	bl	8004400 <HAL_GetTick>
 8007d46:	0003      	movs	r3, r0
 8007d48:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d4a:	e009      	b.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d4c:	f7fc fb58 	bl	8004400 <HAL_GetTick>
 8007d50:	0002      	movs	r2, r0
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	4a3c      	ldr	r2, [pc, #240]	@ (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d901      	bls.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e067      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d60:	4b35      	ldr	r3, [pc, #212]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d62:	6a1b      	ldr	r3, [r3, #32]
 8007d64:	2202      	movs	r2, #2
 8007d66:	4013      	ands	r3, r2
 8007d68:	d0f0      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d6a:	4b33      	ldr	r3, [pc, #204]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d6c:	6a1b      	ldr	r3, [r3, #32]
 8007d6e:	4a34      	ldr	r2, [pc, #208]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8007d70:	4013      	ands	r3, r2
 8007d72:	0019      	movs	r1, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685a      	ldr	r2, [r3, #4]
 8007d78:	4b2f      	ldr	r3, [pc, #188]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007d7e:	2317      	movs	r3, #23
 8007d80:	18fb      	adds	r3, r7, r3
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d105      	bne.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d88:	4b2b      	ldr	r3, [pc, #172]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d8a:	69da      	ldr	r2, [r3, #28]
 8007d8c:	4b2a      	ldr	r3, [pc, #168]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d8e:	492f      	ldr	r1, [pc, #188]	@ (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8007d90:	400a      	ands	r2, r1
 8007d92:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	d009      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d9e:	4b26      	ldr	r3, [pc, #152]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007da2:	2203      	movs	r2, #3
 8007da4:	4393      	bics	r3, r2
 8007da6:	0019      	movs	r1, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	689a      	ldr	r2, [r3, #8]
 8007dac:	4b22      	ldr	r3, [pc, #136]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007dae:	430a      	orrs	r2, r1
 8007db0:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2202      	movs	r2, #2
 8007db8:	4013      	ands	r3, r2
 8007dba:	d009      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dc0:	4a23      	ldr	r2, [pc, #140]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	0019      	movs	r1, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68da      	ldr	r2, [r3, #12]
 8007dca:	4b1b      	ldr	r3, [pc, #108]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2220      	movs	r2, #32
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	d009      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007dda:	4b17      	ldr	r3, [pc, #92]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dde:	2210      	movs	r2, #16
 8007de0:	4393      	bics	r3, r2
 8007de2:	0019      	movs	r1, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	691a      	ldr	r2, [r3, #16]
 8007de8:	4b13      	ldr	r3, [pc, #76]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007dea:	430a      	orrs	r2, r1
 8007dec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	2380      	movs	r3, #128	@ 0x80
 8007df4:	029b      	lsls	r3, r3, #10
 8007df6:	4013      	ands	r3, r2
 8007df8:	d009      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dfe:	2280      	movs	r2, #128	@ 0x80
 8007e00:	4393      	bics	r3, r2
 8007e02:	0019      	movs	r1, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	699a      	ldr	r2, [r3, #24]
 8007e08:	4b0b      	ldr	r3, [pc, #44]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007e0a:	430a      	orrs	r2, r1
 8007e0c:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	2380      	movs	r3, #128	@ 0x80
 8007e14:	00db      	lsls	r3, r3, #3
 8007e16:	4013      	ands	r3, r2
 8007e18:	d009      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007e1a:	4b07      	ldr	r3, [pc, #28]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e1e:	2240      	movs	r2, #64	@ 0x40
 8007e20:	4393      	bics	r3, r2
 8007e22:	0019      	movs	r1, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	695a      	ldr	r2, [r3, #20]
 8007e28:	4b03      	ldr	r3, [pc, #12]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	0018      	movs	r0, r3
 8007e32:	46bd      	mov	sp, r7
 8007e34:	b006      	add	sp, #24
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	40021000 	.word	0x40021000
 8007e3c:	40007000 	.word	0x40007000
 8007e40:	fffffcff 	.word	0xfffffcff
 8007e44:	fffeffff 	.word	0xfffeffff
 8007e48:	00001388 	.word	0x00001388
 8007e4c:	efffffff 	.word	0xefffffff
 8007e50:	fffcffff 	.word	0xfffcffff

08007e54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d101      	bne.n	8007e66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e0a8      	b.n	8007fb8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d109      	bne.n	8007e82 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	2382      	movs	r3, #130	@ 0x82
 8007e74:	005b      	lsls	r3, r3, #1
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d009      	beq.n	8007e8e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	61da      	str	r2, [r3, #28]
 8007e80:	e005      	b.n	8007e8e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	225d      	movs	r2, #93	@ 0x5d
 8007e98:	5c9b      	ldrb	r3, [r3, r2]
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d107      	bne.n	8007eb0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	225c      	movs	r2, #92	@ 0x5c
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	0018      	movs	r0, r3
 8007eac:	f7fb ff84 	bl	8003db8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	225d      	movs	r2, #93	@ 0x5d
 8007eb4:	2102      	movs	r1, #2
 8007eb6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2140      	movs	r1, #64	@ 0x40
 8007ec4:	438a      	bics	r2, r1
 8007ec6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68da      	ldr	r2, [r3, #12]
 8007ecc:	23e0      	movs	r3, #224	@ 0xe0
 8007ece:	00db      	lsls	r3, r3, #3
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d902      	bls.n	8007eda <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	60fb      	str	r3, [r7, #12]
 8007ed8:	e002      	b.n	8007ee0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007eda:	2380      	movs	r3, #128	@ 0x80
 8007edc:	015b      	lsls	r3, r3, #5
 8007ede:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	68da      	ldr	r2, [r3, #12]
 8007ee4:	23f0      	movs	r3, #240	@ 0xf0
 8007ee6:	011b      	lsls	r3, r3, #4
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d008      	beq.n	8007efe <HAL_SPI_Init+0xaa>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	68da      	ldr	r2, [r3, #12]
 8007ef0:	23e0      	movs	r3, #224	@ 0xe0
 8007ef2:	00db      	lsls	r3, r3, #3
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d002      	beq.n	8007efe <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685a      	ldr	r2, [r3, #4]
 8007f02:	2382      	movs	r3, #130	@ 0x82
 8007f04:	005b      	lsls	r3, r3, #1
 8007f06:	401a      	ands	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6899      	ldr	r1, [r3, #8]
 8007f0c:	2384      	movs	r3, #132	@ 0x84
 8007f0e:	021b      	lsls	r3, r3, #8
 8007f10:	400b      	ands	r3, r1
 8007f12:	431a      	orrs	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	2102      	movs	r1, #2
 8007f1a:	400b      	ands	r3, r1
 8007f1c:	431a      	orrs	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	2101      	movs	r1, #1
 8007f24:	400b      	ands	r3, r1
 8007f26:	431a      	orrs	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6999      	ldr	r1, [r3, #24]
 8007f2c:	2380      	movs	r3, #128	@ 0x80
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	400b      	ands	r3, r1
 8007f32:	431a      	orrs	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	69db      	ldr	r3, [r3, #28]
 8007f38:	2138      	movs	r1, #56	@ 0x38
 8007f3a:	400b      	ands	r3, r1
 8007f3c:	431a      	orrs	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a1b      	ldr	r3, [r3, #32]
 8007f42:	2180      	movs	r1, #128	@ 0x80
 8007f44:	400b      	ands	r3, r1
 8007f46:	431a      	orrs	r2, r3
 8007f48:	0011      	movs	r1, r2
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f4e:	2380      	movs	r3, #128	@ 0x80
 8007f50:	019b      	lsls	r3, r3, #6
 8007f52:	401a      	ands	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	699b      	ldr	r3, [r3, #24]
 8007f60:	0c1b      	lsrs	r3, r3, #16
 8007f62:	2204      	movs	r2, #4
 8007f64:	401a      	ands	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f6a:	2110      	movs	r1, #16
 8007f6c:	400b      	ands	r3, r1
 8007f6e:	431a      	orrs	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f74:	2108      	movs	r1, #8
 8007f76:	400b      	ands	r3, r1
 8007f78:	431a      	orrs	r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	68d9      	ldr	r1, [r3, #12]
 8007f7e:	23f0      	movs	r3, #240	@ 0xf0
 8007f80:	011b      	lsls	r3, r3, #4
 8007f82:	400b      	ands	r3, r1
 8007f84:	431a      	orrs	r2, r3
 8007f86:	0011      	movs	r1, r2
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	2380      	movs	r3, #128	@ 0x80
 8007f8c:	015b      	lsls	r3, r3, #5
 8007f8e:	401a      	ands	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	430a      	orrs	r2, r1
 8007f96:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	69da      	ldr	r2, [r3, #28]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4907      	ldr	r1, [pc, #28]	@ (8007fc0 <HAL_SPI_Init+0x16c>)
 8007fa4:	400a      	ands	r2, r1
 8007fa6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	225d      	movs	r2, #93	@ 0x5d
 8007fb2:	2101      	movs	r1, #1
 8007fb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	0018      	movs	r0, r3
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	b004      	add	sp, #16
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	fffff7ff 	.word	0xfffff7ff

08007fc4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b088      	sub	sp, #32
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	603b      	str	r3, [r7, #0]
 8007fd0:	1dbb      	adds	r3, r7, #6
 8007fd2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007fd4:	231f      	movs	r3, #31
 8007fd6:	18fb      	adds	r3, r7, r3
 8007fd8:	2200      	movs	r2, #0
 8007fda:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	225c      	movs	r2, #92	@ 0x5c
 8007fe0:	5c9b      	ldrb	r3, [r3, r2]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d101      	bne.n	8007fea <HAL_SPI_Transmit+0x26>
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	e147      	b.n	800827a <HAL_SPI_Transmit+0x2b6>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	225c      	movs	r2, #92	@ 0x5c
 8007fee:	2101      	movs	r1, #1
 8007ff0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ff2:	f7fc fa05 	bl	8004400 <HAL_GetTick>
 8007ff6:	0003      	movs	r3, r0
 8007ff8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007ffa:	2316      	movs	r3, #22
 8007ffc:	18fb      	adds	r3, r7, r3
 8007ffe:	1dba      	adds	r2, r7, #6
 8008000:	8812      	ldrh	r2, [r2, #0]
 8008002:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	225d      	movs	r2, #93	@ 0x5d
 8008008:	5c9b      	ldrb	r3, [r3, r2]
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b01      	cmp	r3, #1
 800800e:	d004      	beq.n	800801a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8008010:	231f      	movs	r3, #31
 8008012:	18fb      	adds	r3, r7, r3
 8008014:	2202      	movs	r2, #2
 8008016:	701a      	strb	r2, [r3, #0]
    goto error;
 8008018:	e128      	b.n	800826c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d003      	beq.n	8008028 <HAL_SPI_Transmit+0x64>
 8008020:	1dbb      	adds	r3, r7, #6
 8008022:	881b      	ldrh	r3, [r3, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d104      	bne.n	8008032 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8008028:	231f      	movs	r3, #31
 800802a:	18fb      	adds	r3, r7, r3
 800802c:	2201      	movs	r2, #1
 800802e:	701a      	strb	r2, [r3, #0]
    goto error;
 8008030:	e11c      	b.n	800826c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	225d      	movs	r2, #93	@ 0x5d
 8008036:	2103      	movs	r1, #3
 8008038:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	68ba      	ldr	r2, [r7, #8]
 8008044:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	1dba      	adds	r2, r7, #6
 800804a:	8812      	ldrh	r2, [r2, #0]
 800804c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	1dba      	adds	r2, r7, #6
 8008052:	8812      	ldrh	r2, [r2, #0]
 8008054:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2244      	movs	r2, #68	@ 0x44
 8008060:	2100      	movs	r1, #0
 8008062:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2246      	movs	r2, #70	@ 0x46
 8008068:	2100      	movs	r1, #0
 800806a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2200      	movs	r2, #0
 8008076:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	689a      	ldr	r2, [r3, #8]
 800807c:	2380      	movs	r3, #128	@ 0x80
 800807e:	021b      	lsls	r3, r3, #8
 8008080:	429a      	cmp	r2, r3
 8008082:	d110      	bne.n	80080a6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2140      	movs	r1, #64	@ 0x40
 8008090:	438a      	bics	r2, r1
 8008092:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2180      	movs	r1, #128	@ 0x80
 80080a0:	01c9      	lsls	r1, r1, #7
 80080a2:	430a      	orrs	r2, r1
 80080a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2240      	movs	r2, #64	@ 0x40
 80080ae:	4013      	ands	r3, r2
 80080b0:	2b40      	cmp	r3, #64	@ 0x40
 80080b2:	d007      	beq.n	80080c4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2140      	movs	r1, #64	@ 0x40
 80080c0:	430a      	orrs	r2, r1
 80080c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	68da      	ldr	r2, [r3, #12]
 80080c8:	23e0      	movs	r3, #224	@ 0xe0
 80080ca:	00db      	lsls	r3, r3, #3
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d952      	bls.n	8008176 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d004      	beq.n	80080e2 <HAL_SPI_Transmit+0x11e>
 80080d8:	2316      	movs	r3, #22
 80080da:	18fb      	adds	r3, r7, r3
 80080dc:	881b      	ldrh	r3, [r3, #0]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d143      	bne.n	800816a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e6:	881a      	ldrh	r2, [r3, #0]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f2:	1c9a      	adds	r2, r3, #2
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	3b01      	subs	r3, #1
 8008100:	b29a      	uxth	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008106:	e030      	b.n	800816a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	2202      	movs	r2, #2
 8008110:	4013      	ands	r3, r2
 8008112:	2b02      	cmp	r3, #2
 8008114:	d112      	bne.n	800813c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800811a:	881a      	ldrh	r2, [r3, #0]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008126:	1c9a      	adds	r2, r3, #2
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008130:	b29b      	uxth	r3, r3
 8008132:	3b01      	subs	r3, #1
 8008134:	b29a      	uxth	r2, r3
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800813a:	e016      	b.n	800816a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800813c:	f7fc f960 	bl	8004400 <HAL_GetTick>
 8008140:	0002      	movs	r2, r0
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	429a      	cmp	r2, r3
 800814a:	d802      	bhi.n	8008152 <HAL_SPI_Transmit+0x18e>
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	3301      	adds	r3, #1
 8008150:	d102      	bne.n	8008158 <HAL_SPI_Transmit+0x194>
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d108      	bne.n	800816a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8008158:	231f      	movs	r3, #31
 800815a:	18fb      	adds	r3, r7, r3
 800815c:	2203      	movs	r2, #3
 800815e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	225d      	movs	r2, #93	@ 0x5d
 8008164:	2101      	movs	r1, #1
 8008166:	5499      	strb	r1, [r3, r2]
          goto error;
 8008168:	e080      	b.n	800826c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800816e:	b29b      	uxth	r3, r3
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1c9      	bne.n	8008108 <HAL_SPI_Transmit+0x144>
 8008174:	e053      	b.n	800821e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d004      	beq.n	8008188 <HAL_SPI_Transmit+0x1c4>
 800817e:	2316      	movs	r3, #22
 8008180:	18fb      	adds	r3, r7, r3
 8008182:	881b      	ldrh	r3, [r3, #0]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d145      	bne.n	8008214 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	330c      	adds	r3, #12
 8008192:	7812      	ldrb	r2, [r2, #0]
 8008194:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800819a:	1c5a      	adds	r2, r3, #1
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	3b01      	subs	r3, #1
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80081ae:	e031      	b.n	8008214 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	2202      	movs	r2, #2
 80081b8:	4013      	ands	r3, r2
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d113      	bne.n	80081e6 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	330c      	adds	r3, #12
 80081c8:	7812      	ldrb	r2, [r2, #0]
 80081ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d0:	1c5a      	adds	r2, r3, #1
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081da:	b29b      	uxth	r3, r3
 80081dc:	3b01      	subs	r3, #1
 80081de:	b29a      	uxth	r2, r3
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80081e4:	e016      	b.n	8008214 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081e6:	f7fc f90b 	bl	8004400 <HAL_GetTick>
 80081ea:	0002      	movs	r2, r0
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	683a      	ldr	r2, [r7, #0]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d802      	bhi.n	80081fc <HAL_SPI_Transmit+0x238>
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	3301      	adds	r3, #1
 80081fa:	d102      	bne.n	8008202 <HAL_SPI_Transmit+0x23e>
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d108      	bne.n	8008214 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8008202:	231f      	movs	r3, #31
 8008204:	18fb      	adds	r3, r7, r3
 8008206:	2203      	movs	r2, #3
 8008208:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	225d      	movs	r2, #93	@ 0x5d
 800820e:	2101      	movs	r1, #1
 8008210:	5499      	strb	r1, [r3, r2]
          goto error;
 8008212:	e02b      	b.n	800826c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008218:	b29b      	uxth	r3, r3
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1c8      	bne.n	80081b0 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800821e:	69ba      	ldr	r2, [r7, #24]
 8008220:	6839      	ldr	r1, [r7, #0]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	0018      	movs	r0, r3
 8008226:	f000 fe9b 	bl	8008f60 <SPI_EndRxTxTransaction>
 800822a:	1e03      	subs	r3, r0, #0
 800822c:	d002      	beq.n	8008234 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2220      	movs	r2, #32
 8008232:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10a      	bne.n	8008252 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800823c:	2300      	movs	r3, #0
 800823e:	613b      	str	r3, [r7, #16]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	613b      	str	r3, [r7, #16]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	613b      	str	r3, [r7, #16]
 8008250:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008256:	2b00      	cmp	r3, #0
 8008258:	d004      	beq.n	8008264 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800825a:	231f      	movs	r3, #31
 800825c:	18fb      	adds	r3, r7, r3
 800825e:	2201      	movs	r2, #1
 8008260:	701a      	strb	r2, [r3, #0]
 8008262:	e003      	b.n	800826c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	225d      	movs	r2, #93	@ 0x5d
 8008268:	2101      	movs	r1, #1
 800826a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	225c      	movs	r2, #92	@ 0x5c
 8008270:	2100      	movs	r1, #0
 8008272:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008274:	231f      	movs	r3, #31
 8008276:	18fb      	adds	r3, r7, r3
 8008278:	781b      	ldrb	r3, [r3, #0]
}
 800827a:	0018      	movs	r0, r3
 800827c:	46bd      	mov	sp, r7
 800827e:	b008      	add	sp, #32
 8008280:	bd80      	pop	{r7, pc}
	...

08008284 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008284:	b590      	push	{r4, r7, lr}
 8008286:	b089      	sub	sp, #36	@ 0x24
 8008288:	af02      	add	r7, sp, #8
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	603b      	str	r3, [r7, #0]
 8008290:	1dbb      	adds	r3, r7, #6
 8008292:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008294:	2117      	movs	r1, #23
 8008296:	187b      	adds	r3, r7, r1
 8008298:	2200      	movs	r2, #0
 800829a:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	225d      	movs	r2, #93	@ 0x5d
 80082a0:	5c9b      	ldrb	r3, [r3, r2]
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d003      	beq.n	80082b0 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80082a8:	187b      	adds	r3, r7, r1
 80082aa:	2202      	movs	r2, #2
 80082ac:	701a      	strb	r2, [r3, #0]
    goto error;
 80082ae:	e12b      	b.n	8008508 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	685a      	ldr	r2, [r3, #4]
 80082b4:	2382      	movs	r3, #130	@ 0x82
 80082b6:	005b      	lsls	r3, r3, #1
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d113      	bne.n	80082e4 <HAL_SPI_Receive+0x60>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10f      	bne.n	80082e4 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	225d      	movs	r2, #93	@ 0x5d
 80082c8:	2104      	movs	r1, #4
 80082ca:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80082cc:	1dbb      	adds	r3, r7, #6
 80082ce:	881c      	ldrh	r4, [r3, #0]
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	68b9      	ldr	r1, [r7, #8]
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	0023      	movs	r3, r4
 80082dc:	f000 f924 	bl	8008528 <HAL_SPI_TransmitReceive>
 80082e0:	0003      	movs	r3, r0
 80082e2:	e118      	b.n	8008516 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	225c      	movs	r2, #92	@ 0x5c
 80082e8:	5c9b      	ldrb	r3, [r3, r2]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d101      	bne.n	80082f2 <HAL_SPI_Receive+0x6e>
 80082ee:	2302      	movs	r3, #2
 80082f0:	e111      	b.n	8008516 <HAL_SPI_Receive+0x292>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	225c      	movs	r2, #92	@ 0x5c
 80082f6:	2101      	movs	r1, #1
 80082f8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082fa:	f7fc f881 	bl	8004400 <HAL_GetTick>
 80082fe:	0003      	movs	r3, r0
 8008300:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d003      	beq.n	8008310 <HAL_SPI_Receive+0x8c>
 8008308:	1dbb      	adds	r3, r7, #6
 800830a:	881b      	ldrh	r3, [r3, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d104      	bne.n	800831a <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8008310:	2317      	movs	r3, #23
 8008312:	18fb      	adds	r3, r7, r3
 8008314:	2201      	movs	r2, #1
 8008316:	701a      	strb	r2, [r3, #0]
    goto error;
 8008318:	e0f6      	b.n	8008508 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	225d      	movs	r2, #93	@ 0x5d
 800831e:	2104      	movs	r1, #4
 8008320:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	1dba      	adds	r2, r7, #6
 8008332:	2144      	movs	r1, #68	@ 0x44
 8008334:	8812      	ldrh	r2, [r2, #0]
 8008336:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	1dba      	adds	r2, r7, #6
 800833c:	2146      	movs	r1, #70	@ 0x46
 800833e:	8812      	ldrh	r2, [r2, #0]
 8008340:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2200      	movs	r2, #0
 800835e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	68da      	ldr	r2, [r3, #12]
 8008364:	23e0      	movs	r3, #224	@ 0xe0
 8008366:	00db      	lsls	r3, r3, #3
 8008368:	429a      	cmp	r2, r3
 800836a:	d908      	bls.n	800837e <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	685a      	ldr	r2, [r3, #4]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	496a      	ldr	r1, [pc, #424]	@ (8008520 <HAL_SPI_Receive+0x29c>)
 8008378:	400a      	ands	r2, r1
 800837a:	605a      	str	r2, [r3, #4]
 800837c:	e008      	b.n	8008390 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	685a      	ldr	r2, [r3, #4]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2180      	movs	r1, #128	@ 0x80
 800838a:	0149      	lsls	r1, r1, #5
 800838c:	430a      	orrs	r2, r1
 800838e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	689a      	ldr	r2, [r3, #8]
 8008394:	2380      	movs	r3, #128	@ 0x80
 8008396:	021b      	lsls	r3, r3, #8
 8008398:	429a      	cmp	r2, r3
 800839a:	d10f      	bne.n	80083bc <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2140      	movs	r1, #64	@ 0x40
 80083a8:	438a      	bics	r2, r1
 80083aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	495b      	ldr	r1, [pc, #364]	@ (8008524 <HAL_SPI_Receive+0x2a0>)
 80083b8:	400a      	ands	r2, r1
 80083ba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2240      	movs	r2, #64	@ 0x40
 80083c4:	4013      	ands	r3, r2
 80083c6:	2b40      	cmp	r3, #64	@ 0x40
 80083c8:	d007      	beq.n	80083da <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2140      	movs	r1, #64	@ 0x40
 80083d6:	430a      	orrs	r2, r1
 80083d8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	68da      	ldr	r2, [r3, #12]
 80083de:	23e0      	movs	r3, #224	@ 0xe0
 80083e0:	00db      	lsls	r3, r3, #3
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d900      	bls.n	80083e8 <HAL_SPI_Receive+0x164>
 80083e6:	e071      	b.n	80084cc <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80083e8:	e035      	b.n	8008456 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	2201      	movs	r2, #1
 80083f2:	4013      	ands	r3, r2
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d117      	bne.n	8008428 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	330c      	adds	r3, #12
 80083fe:	001a      	movs	r2, r3
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008404:	7812      	ldrb	r2, [r2, #0]
 8008406:	b2d2      	uxtb	r2, r2
 8008408:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800840e:	1c5a      	adds	r2, r3, #1
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2246      	movs	r2, #70	@ 0x46
 8008418:	5a9b      	ldrh	r3, [r3, r2]
 800841a:	b29b      	uxth	r3, r3
 800841c:	3b01      	subs	r3, #1
 800841e:	b299      	uxth	r1, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2246      	movs	r2, #70	@ 0x46
 8008424:	5299      	strh	r1, [r3, r2]
 8008426:	e016      	b.n	8008456 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008428:	f7fb ffea 	bl	8004400 <HAL_GetTick>
 800842c:	0002      	movs	r2, r0
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	429a      	cmp	r2, r3
 8008436:	d802      	bhi.n	800843e <HAL_SPI_Receive+0x1ba>
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	3301      	adds	r3, #1
 800843c:	d102      	bne.n	8008444 <HAL_SPI_Receive+0x1c0>
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d108      	bne.n	8008456 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8008444:	2317      	movs	r3, #23
 8008446:	18fb      	adds	r3, r7, r3
 8008448:	2203      	movs	r2, #3
 800844a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	225d      	movs	r2, #93	@ 0x5d
 8008450:	2101      	movs	r1, #1
 8008452:	5499      	strb	r1, [r3, r2]
          goto error;
 8008454:	e058      	b.n	8008508 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2246      	movs	r2, #70	@ 0x46
 800845a:	5a9b      	ldrh	r3, [r3, r2]
 800845c:	b29b      	uxth	r3, r3
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1c3      	bne.n	80083ea <HAL_SPI_Receive+0x166>
 8008462:	e039      	b.n	80084d8 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	2201      	movs	r2, #1
 800846c:	4013      	ands	r3, r2
 800846e:	2b01      	cmp	r3, #1
 8008470:	d115      	bne.n	800849e <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68da      	ldr	r2, [r3, #12]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800847c:	b292      	uxth	r2, r2
 800847e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008484:	1c9a      	adds	r2, r3, #2
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2246      	movs	r2, #70	@ 0x46
 800848e:	5a9b      	ldrh	r3, [r3, r2]
 8008490:	b29b      	uxth	r3, r3
 8008492:	3b01      	subs	r3, #1
 8008494:	b299      	uxth	r1, r3
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2246      	movs	r2, #70	@ 0x46
 800849a:	5299      	strh	r1, [r3, r2]
 800849c:	e016      	b.n	80084cc <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800849e:	f7fb ffaf 	bl	8004400 <HAL_GetTick>
 80084a2:	0002      	movs	r2, r0
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	1ad3      	subs	r3, r2, r3
 80084a8:	683a      	ldr	r2, [r7, #0]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d802      	bhi.n	80084b4 <HAL_SPI_Receive+0x230>
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	3301      	adds	r3, #1
 80084b2:	d102      	bne.n	80084ba <HAL_SPI_Receive+0x236>
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d108      	bne.n	80084cc <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80084ba:	2317      	movs	r3, #23
 80084bc:	18fb      	adds	r3, r7, r3
 80084be:	2203      	movs	r2, #3
 80084c0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	225d      	movs	r2, #93	@ 0x5d
 80084c6:	2101      	movs	r1, #1
 80084c8:	5499      	strb	r1, [r3, r2]
          goto error;
 80084ca:	e01d      	b.n	8008508 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2246      	movs	r2, #70	@ 0x46
 80084d0:	5a9b      	ldrh	r3, [r3, r2]
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1c5      	bne.n	8008464 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	0018      	movs	r0, r3
 80084e0:	f000 fce0 	bl	8008ea4 <SPI_EndRxTransaction>
 80084e4:	1e03      	subs	r3, r0, #0
 80084e6:	d002      	beq.n	80084ee <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2220      	movs	r2, #32
 80084ec:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d004      	beq.n	8008500 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 80084f6:	2317      	movs	r3, #23
 80084f8:	18fb      	adds	r3, r7, r3
 80084fa:	2201      	movs	r2, #1
 80084fc:	701a      	strb	r2, [r3, #0]
 80084fe:	e003      	b.n	8008508 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	225d      	movs	r2, #93	@ 0x5d
 8008504:	2101      	movs	r1, #1
 8008506:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	225c      	movs	r2, #92	@ 0x5c
 800850c:	2100      	movs	r1, #0
 800850e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008510:	2317      	movs	r3, #23
 8008512:	18fb      	adds	r3, r7, r3
 8008514:	781b      	ldrb	r3, [r3, #0]
}
 8008516:	0018      	movs	r0, r3
 8008518:	46bd      	mov	sp, r7
 800851a:	b007      	add	sp, #28
 800851c:	bd90      	pop	{r4, r7, pc}
 800851e:	46c0      	nop			@ (mov r8, r8)
 8008520:	ffffefff 	.word	0xffffefff
 8008524:	ffffbfff 	.word	0xffffbfff

08008528 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b08a      	sub	sp, #40	@ 0x28
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]
 8008534:	001a      	movs	r2, r3
 8008536:	1cbb      	adds	r3, r7, #2
 8008538:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800853a:	2301      	movs	r3, #1
 800853c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800853e:	2323      	movs	r3, #35	@ 0x23
 8008540:	18fb      	adds	r3, r7, r3
 8008542:	2200      	movs	r2, #0
 8008544:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	225c      	movs	r2, #92	@ 0x5c
 800854a:	5c9b      	ldrb	r3, [r3, r2]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d101      	bne.n	8008554 <HAL_SPI_TransmitReceive+0x2c>
 8008550:	2302      	movs	r3, #2
 8008552:	e1c4      	b.n	80088de <HAL_SPI_TransmitReceive+0x3b6>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	225c      	movs	r2, #92	@ 0x5c
 8008558:	2101      	movs	r1, #1
 800855a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800855c:	f7fb ff50 	bl	8004400 <HAL_GetTick>
 8008560:	0003      	movs	r3, r0
 8008562:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008564:	201b      	movs	r0, #27
 8008566:	183b      	adds	r3, r7, r0
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	215d      	movs	r1, #93	@ 0x5d
 800856c:	5c52      	ldrb	r2, [r2, r1]
 800856e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008576:	2312      	movs	r3, #18
 8008578:	18fb      	adds	r3, r7, r3
 800857a:	1cba      	adds	r2, r7, #2
 800857c:	8812      	ldrh	r2, [r2, #0]
 800857e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008580:	183b      	adds	r3, r7, r0
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d011      	beq.n	80085ac <HAL_SPI_TransmitReceive+0x84>
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	2382      	movs	r3, #130	@ 0x82
 800858c:	005b      	lsls	r3, r3, #1
 800858e:	429a      	cmp	r2, r3
 8008590:	d107      	bne.n	80085a2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d103      	bne.n	80085a2 <HAL_SPI_TransmitReceive+0x7a>
 800859a:	183b      	adds	r3, r7, r0
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	2b04      	cmp	r3, #4
 80085a0:	d004      	beq.n	80085ac <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80085a2:	2323      	movs	r3, #35	@ 0x23
 80085a4:	18fb      	adds	r3, r7, r3
 80085a6:	2202      	movs	r2, #2
 80085a8:	701a      	strb	r2, [r3, #0]
    goto error;
 80085aa:	e191      	b.n	80088d0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d006      	beq.n	80085c0 <HAL_SPI_TransmitReceive+0x98>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d003      	beq.n	80085c0 <HAL_SPI_TransmitReceive+0x98>
 80085b8:	1cbb      	adds	r3, r7, #2
 80085ba:	881b      	ldrh	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d104      	bne.n	80085ca <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80085c0:	2323      	movs	r3, #35	@ 0x23
 80085c2:	18fb      	adds	r3, r7, r3
 80085c4:	2201      	movs	r2, #1
 80085c6:	701a      	strb	r2, [r3, #0]
    goto error;
 80085c8:	e182      	b.n	80088d0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	225d      	movs	r2, #93	@ 0x5d
 80085ce:	5c9b      	ldrb	r3, [r3, r2]
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	2b04      	cmp	r3, #4
 80085d4:	d003      	beq.n	80085de <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	225d      	movs	r2, #93	@ 0x5d
 80085da:	2105      	movs	r1, #5
 80085dc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	1cba      	adds	r2, r7, #2
 80085ee:	2146      	movs	r1, #70	@ 0x46
 80085f0:	8812      	ldrh	r2, [r2, #0]
 80085f2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	1cba      	adds	r2, r7, #2
 80085f8:	2144      	movs	r1, #68	@ 0x44
 80085fa:	8812      	ldrh	r2, [r2, #0]
 80085fc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	1cba      	adds	r2, r7, #2
 8008608:	8812      	ldrh	r2, [r2, #0]
 800860a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	1cba      	adds	r2, r7, #2
 8008610:	8812      	ldrh	r2, [r2, #0]
 8008612:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	68da      	ldr	r2, [r3, #12]
 8008624:	23e0      	movs	r3, #224	@ 0xe0
 8008626:	00db      	lsls	r3, r3, #3
 8008628:	429a      	cmp	r2, r3
 800862a:	d908      	bls.n	800863e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	49ac      	ldr	r1, [pc, #688]	@ (80088e8 <HAL_SPI_TransmitReceive+0x3c0>)
 8008638:	400a      	ands	r2, r1
 800863a:	605a      	str	r2, [r3, #4]
 800863c:	e008      	b.n	8008650 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	685a      	ldr	r2, [r3, #4]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2180      	movs	r1, #128	@ 0x80
 800864a:	0149      	lsls	r1, r1, #5
 800864c:	430a      	orrs	r2, r1
 800864e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2240      	movs	r2, #64	@ 0x40
 8008658:	4013      	ands	r3, r2
 800865a:	2b40      	cmp	r3, #64	@ 0x40
 800865c:	d007      	beq.n	800866e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2140      	movs	r1, #64	@ 0x40
 800866a:	430a      	orrs	r2, r1
 800866c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	68da      	ldr	r2, [r3, #12]
 8008672:	23e0      	movs	r3, #224	@ 0xe0
 8008674:	00db      	lsls	r3, r3, #3
 8008676:	429a      	cmp	r2, r3
 8008678:	d800      	bhi.n	800867c <HAL_SPI_TransmitReceive+0x154>
 800867a:	e083      	b.n	8008784 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d005      	beq.n	8008690 <HAL_SPI_TransmitReceive+0x168>
 8008684:	2312      	movs	r3, #18
 8008686:	18fb      	adds	r3, r7, r3
 8008688:	881b      	ldrh	r3, [r3, #0]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d000      	beq.n	8008690 <HAL_SPI_TransmitReceive+0x168>
 800868e:	e06d      	b.n	800876c <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008694:	881a      	ldrh	r2, [r3, #0]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086a0:	1c9a      	adds	r2, r3, #2
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	3b01      	subs	r3, #1
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086b4:	e05a      	b.n	800876c <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	2202      	movs	r2, #2
 80086be:	4013      	ands	r3, r2
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d11b      	bne.n	80086fc <HAL_SPI_TransmitReceive+0x1d4>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d016      	beq.n	80086fc <HAL_SPI_TransmitReceive+0x1d4>
 80086ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d113      	bne.n	80086fc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d8:	881a      	ldrh	r2, [r3, #0]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086e4:	1c9a      	adds	r2, r3, #2
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	3b01      	subs	r3, #1
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80086f8:	2300      	movs	r3, #0
 80086fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	2201      	movs	r2, #1
 8008704:	4013      	ands	r3, r2
 8008706:	2b01      	cmp	r3, #1
 8008708:	d11c      	bne.n	8008744 <HAL_SPI_TransmitReceive+0x21c>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2246      	movs	r2, #70	@ 0x46
 800870e:	5a9b      	ldrh	r3, [r3, r2]
 8008710:	b29b      	uxth	r3, r3
 8008712:	2b00      	cmp	r3, #0
 8008714:	d016      	beq.n	8008744 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68da      	ldr	r2, [r3, #12]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008720:	b292      	uxth	r2, r2
 8008722:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008728:	1c9a      	adds	r2, r3, #2
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2246      	movs	r2, #70	@ 0x46
 8008732:	5a9b      	ldrh	r3, [r3, r2]
 8008734:	b29b      	uxth	r3, r3
 8008736:	3b01      	subs	r3, #1
 8008738:	b299      	uxth	r1, r3
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2246      	movs	r2, #70	@ 0x46
 800873e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008740:	2301      	movs	r3, #1
 8008742:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008744:	f7fb fe5c 	bl	8004400 <HAL_GetTick>
 8008748:	0002      	movs	r2, r0
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008750:	429a      	cmp	r2, r3
 8008752:	d80b      	bhi.n	800876c <HAL_SPI_TransmitReceive+0x244>
 8008754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008756:	3301      	adds	r3, #1
 8008758:	d008      	beq.n	800876c <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800875a:	2323      	movs	r3, #35	@ 0x23
 800875c:	18fb      	adds	r3, r7, r3
 800875e:	2203      	movs	r2, #3
 8008760:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	225d      	movs	r2, #93	@ 0x5d
 8008766:	2101      	movs	r1, #1
 8008768:	5499      	strb	r1, [r3, r2]
        goto error;
 800876a:	e0b1      	b.n	80088d0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008770:	b29b      	uxth	r3, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	d19f      	bne.n	80086b6 <HAL_SPI_TransmitReceive+0x18e>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2246      	movs	r2, #70	@ 0x46
 800877a:	5a9b      	ldrh	r3, [r3, r2]
 800877c:	b29b      	uxth	r3, r3
 800877e:	2b00      	cmp	r3, #0
 8008780:	d199      	bne.n	80086b6 <HAL_SPI_TransmitReceive+0x18e>
 8008782:	e089      	b.n	8008898 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d005      	beq.n	8008798 <HAL_SPI_TransmitReceive+0x270>
 800878c:	2312      	movs	r3, #18
 800878e:	18fb      	adds	r3, r7, r3
 8008790:	881b      	ldrh	r3, [r3, #0]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d000      	beq.n	8008798 <HAL_SPI_TransmitReceive+0x270>
 8008796:	e074      	b.n	8008882 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	330c      	adds	r3, #12
 80087a2:	7812      	ldrb	r2, [r2, #0]
 80087a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087aa:	1c5a      	adds	r2, r3, #1
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	3b01      	subs	r3, #1
 80087b8:	b29a      	uxth	r2, r3
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087be:	e060      	b.n	8008882 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	2202      	movs	r2, #2
 80087c8:	4013      	ands	r3, r2
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d11c      	bne.n	8008808 <HAL_SPI_TransmitReceive+0x2e0>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d017      	beq.n	8008808 <HAL_SPI_TransmitReceive+0x2e0>
 80087d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d114      	bne.n	8008808 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	330c      	adds	r3, #12
 80087e8:	7812      	ldrb	r2, [r2, #0]
 80087ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f0:	1c5a      	adds	r2, r3, #1
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	3b01      	subs	r3, #1
 80087fe:	b29a      	uxth	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008804:	2300      	movs	r3, #0
 8008806:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	2201      	movs	r2, #1
 8008810:	4013      	ands	r3, r2
 8008812:	2b01      	cmp	r3, #1
 8008814:	d11e      	bne.n	8008854 <HAL_SPI_TransmitReceive+0x32c>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2246      	movs	r2, #70	@ 0x46
 800881a:	5a9b      	ldrh	r3, [r3, r2]
 800881c:	b29b      	uxth	r3, r3
 800881e:	2b00      	cmp	r3, #0
 8008820:	d018      	beq.n	8008854 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	330c      	adds	r3, #12
 8008828:	001a      	movs	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800882e:	7812      	ldrb	r2, [r2, #0]
 8008830:	b2d2      	uxtb	r2, r2
 8008832:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008838:	1c5a      	adds	r2, r3, #1
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2246      	movs	r2, #70	@ 0x46
 8008842:	5a9b      	ldrh	r3, [r3, r2]
 8008844:	b29b      	uxth	r3, r3
 8008846:	3b01      	subs	r3, #1
 8008848:	b299      	uxth	r1, r3
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2246      	movs	r2, #70	@ 0x46
 800884e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008850:	2301      	movs	r3, #1
 8008852:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008854:	f7fb fdd4 	bl	8004400 <HAL_GetTick>
 8008858:	0002      	movs	r2, r0
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008860:	429a      	cmp	r2, r3
 8008862:	d802      	bhi.n	800886a <HAL_SPI_TransmitReceive+0x342>
 8008864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008866:	3301      	adds	r3, #1
 8008868:	d102      	bne.n	8008870 <HAL_SPI_TransmitReceive+0x348>
 800886a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886c:	2b00      	cmp	r3, #0
 800886e:	d108      	bne.n	8008882 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8008870:	2323      	movs	r3, #35	@ 0x23
 8008872:	18fb      	adds	r3, r7, r3
 8008874:	2203      	movs	r2, #3
 8008876:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	225d      	movs	r2, #93	@ 0x5d
 800887c:	2101      	movs	r1, #1
 800887e:	5499      	strb	r1, [r3, r2]
        goto error;
 8008880:	e026      	b.n	80088d0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008886:	b29b      	uxth	r3, r3
 8008888:	2b00      	cmp	r3, #0
 800888a:	d199      	bne.n	80087c0 <HAL_SPI_TransmitReceive+0x298>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2246      	movs	r2, #70	@ 0x46
 8008890:	5a9b      	ldrh	r3, [r3, r2]
 8008892:	b29b      	uxth	r3, r3
 8008894:	2b00      	cmp	r3, #0
 8008896:	d193      	bne.n	80087c0 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008898:	69fa      	ldr	r2, [r7, #28]
 800889a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	0018      	movs	r0, r3
 80088a0:	f000 fb5e 	bl	8008f60 <SPI_EndRxTxTransaction>
 80088a4:	1e03      	subs	r3, r0, #0
 80088a6:	d006      	beq.n	80088b6 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80088a8:	2323      	movs	r3, #35	@ 0x23
 80088aa:	18fb      	adds	r3, r7, r3
 80088ac:	2201      	movs	r2, #1
 80088ae:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2220      	movs	r2, #32
 80088b4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d004      	beq.n	80088c8 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80088be:	2323      	movs	r3, #35	@ 0x23
 80088c0:	18fb      	adds	r3, r7, r3
 80088c2:	2201      	movs	r2, #1
 80088c4:	701a      	strb	r2, [r3, #0]
 80088c6:	e003      	b.n	80088d0 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	225d      	movs	r2, #93	@ 0x5d
 80088cc:	2101      	movs	r1, #1
 80088ce:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	225c      	movs	r2, #92	@ 0x5c
 80088d4:	2100      	movs	r1, #0
 80088d6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80088d8:	2323      	movs	r3, #35	@ 0x23
 80088da:	18fb      	adds	r3, r7, r3
 80088dc:	781b      	ldrb	r3, [r3, #0]
}
 80088de:	0018      	movs	r0, r3
 80088e0:	46bd      	mov	sp, r7
 80088e2:	b00a      	add	sp, #40	@ 0x28
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	46c0      	nop			@ (mov r8, r8)
 80088e8:	ffffefff 	.word	0xffffefff

080088ec <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b086      	sub	sp, #24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	1dbb      	adds	r3, r7, #6
 80088f8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088fa:	2317      	movs	r3, #23
 80088fc:	18fb      	adds	r3, r7, r3
 80088fe:	2200      	movs	r2, #0
 8008900:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	225c      	movs	r2, #92	@ 0x5c
 8008906:	5c9b      	ldrb	r3, [r3, r2]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d101      	bne.n	8008910 <HAL_SPI_Transmit_DMA+0x24>
 800890c:	2302      	movs	r3, #2
 800890e:	e0e3      	b.n	8008ad8 <HAL_SPI_Transmit_DMA+0x1ec>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	225c      	movs	r2, #92	@ 0x5c
 8008914:	2101      	movs	r1, #1
 8008916:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	225d      	movs	r2, #93	@ 0x5d
 800891c:	5c9b      	ldrb	r3, [r3, r2]
 800891e:	b2db      	uxtb	r3, r3
 8008920:	2b01      	cmp	r3, #1
 8008922:	d004      	beq.n	800892e <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 8008924:	2317      	movs	r3, #23
 8008926:	18fb      	adds	r3, r7, r3
 8008928:	2202      	movs	r2, #2
 800892a:	701a      	strb	r2, [r3, #0]
    goto error;
 800892c:	e0cd      	b.n	8008aca <HAL_SPI_Transmit_DMA+0x1de>
  }

  if ((pData == NULL) || (Size == 0U))
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d003      	beq.n	800893c <HAL_SPI_Transmit_DMA+0x50>
 8008934:	1dbb      	adds	r3, r7, #6
 8008936:	881b      	ldrh	r3, [r3, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d104      	bne.n	8008946 <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 800893c:	2317      	movs	r3, #23
 800893e:	18fb      	adds	r3, r7, r3
 8008940:	2201      	movs	r2, #1
 8008942:	701a      	strb	r2, [r3, #0]
    goto error;
 8008944:	e0c1      	b.n	8008aca <HAL_SPI_Transmit_DMA+0x1de>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	225d      	movs	r2, #93	@ 0x5d
 800894a:	2103      	movs	r1, #3
 800894c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	1dba      	adds	r2, r7, #6
 800895e:	8812      	ldrh	r2, [r2, #0]
 8008960:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	1dba      	adds	r2, r7, #6
 8008966:	8812      	ldrh	r2, [r2, #0]
 8008968:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2200      	movs	r2, #0
 8008974:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2244      	movs	r2, #68	@ 0x44
 8008980:	2100      	movs	r1, #0
 8008982:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2246      	movs	r2, #70	@ 0x46
 8008988:	2100      	movs	r1, #0
 800898a:	5299      	strh	r1, [r3, r2]

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	689a      	ldr	r2, [r3, #8]
 8008990:	2380      	movs	r3, #128	@ 0x80
 8008992:	021b      	lsls	r3, r3, #8
 8008994:	429a      	cmp	r2, r3
 8008996:	d110      	bne.n	80089ba <HAL_SPI_Transmit_DMA+0xce>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2140      	movs	r1, #64	@ 0x40
 80089a4:	438a      	bics	r2, r1
 80089a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2180      	movs	r1, #128	@ 0x80
 80089b4:	01c9      	lsls	r1, r1, #7
 80089b6:	430a      	orrs	r2, r1
 80089b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089be:	4a48      	ldr	r2, [pc, #288]	@ (8008ae0 <HAL_SPI_Transmit_DMA+0x1f4>)
 80089c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089c6:	4a47      	ldr	r2, [pc, #284]	@ (8008ae4 <HAL_SPI_Transmit_DMA+0x1f8>)
 80089c8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089ce:	4a46      	ldr	r2, [pc, #280]	@ (8008ae8 <HAL_SPI_Transmit_DMA+0x1fc>)
 80089d0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089d6:	2200      	movs	r2, #0
 80089d8:	635a      	str	r2, [r3, #52]	@ 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	685a      	ldr	r2, [r3, #4]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4941      	ldr	r1, [pc, #260]	@ (8008aec <HAL_SPI_Transmit_DMA+0x200>)
 80089e6:	400a      	ands	r2, r1
 80089e8:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	68da      	ldr	r2, [r3, #12]
 80089ee:	23e0      	movs	r3, #224	@ 0xe0
 80089f0:	00db      	lsls	r3, r3, #3
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d82f      	bhi.n	8008a56 <HAL_SPI_Transmit_DMA+0x16a>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089fa:	695a      	ldr	r2, [r3, #20]
 80089fc:	2380      	movs	r3, #128	@ 0x80
 80089fe:	00db      	lsls	r3, r3, #3
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d128      	bne.n	8008a56 <HAL_SPI_Transmit_DMA+0x16a>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	001a      	movs	r2, r3
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	4013      	ands	r3, r2
 8008a10:	d10f      	bne.n	8008a32 <HAL_SPI_Transmit_DMA+0x146>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	685a      	ldr	r2, [r3, #4]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4933      	ldr	r1, [pc, #204]	@ (8008aec <HAL_SPI_Transmit_DMA+0x200>)
 8008a1e:	400a      	ands	r2, r1
 8008a20:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	085b      	lsrs	r3, r3, #1
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008a30:	e011      	b.n	8008a56 <HAL_SPI_Transmit_DMA+0x16a>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	685a      	ldr	r2, [r3, #4]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2180      	movs	r1, #128	@ 0x80
 8008a3e:	01c9      	lsls	r1, r1, #7
 8008a40:	430a      	orrs	r2, r1
 8008a42:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	085b      	lsrs	r3, r3, #1
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	3301      	adds	r3, #1
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a5e:	0019      	movs	r1, r3
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	330c      	adds	r3, #12
 8008a66:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a6c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008a6e:	f7fc fa17 	bl	8004ea0 <HAL_DMA_Start_IT>
 8008a72:	1e03      	subs	r3, r0, #0
 8008a74:	d00a      	beq.n	8008a8c <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a7a:	2210      	movs	r2, #16
 8008a7c:	431a      	orrs	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8008a82:	2317      	movs	r3, #23
 8008a84:	18fb      	adds	r3, r7, r3
 8008a86:	2201      	movs	r2, #1
 8008a88:	701a      	strb	r2, [r3, #0]

    goto error;
 8008a8a:	e01e      	b.n	8008aca <HAL_SPI_Transmit_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2240      	movs	r2, #64	@ 0x40
 8008a94:	4013      	ands	r3, r2
 8008a96:	2b40      	cmp	r3, #64	@ 0x40
 8008a98:	d007      	beq.n	8008aaa <HAL_SPI_Transmit_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2140      	movs	r1, #64	@ 0x40
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	685a      	ldr	r2, [r3, #4]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2120      	movs	r1, #32
 8008ab6:	430a      	orrs	r2, r1
 8008ab8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	685a      	ldr	r2, [r3, #4]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2102      	movs	r1, #2
 8008ac6:	430a      	orrs	r2, r1
 8008ac8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	225c      	movs	r2, #92	@ 0x5c
 8008ace:	2100      	movs	r1, #0
 8008ad0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008ad2:	2317      	movs	r3, #23
 8008ad4:	18fb      	adds	r3, r7, r3
 8008ad6:	781b      	ldrb	r3, [r3, #0]
}
 8008ad8:	0018      	movs	r0, r3
 8008ada:	46bd      	mov	sp, r7
 8008adc:	b006      	add	sp, #24
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	08008be5 	.word	0x08008be5
 8008ae4:	08008b39 	.word	0x08008b39
 8008ae8:	08008c03 	.word	0x08008c03
 8008aec:	ffffbfff 	.word	0xffffbfff

08008af0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008af8:	46c0      	nop			@ (mov r8, r8)
 8008afa:	46bd      	mov	sp, r7
 8008afc:	b002      	add	sp, #8
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008b08:	46c0      	nop			@ (mov r8, r8)
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	b002      	add	sp, #8
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008b18:	46c0      	nop			@ (mov r8, r8)
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	b002      	add	sp, #8
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	225d      	movs	r2, #93	@ 0x5d
 8008b2c:	5c9b      	ldrb	r3, [r3, r2]
 8008b2e:	b2db      	uxtb	r3, r3
}
 8008b30:	0018      	movs	r0, r3
 8008b32:	46bd      	mov	sp, r7
 8008b34:	b002      	add	sp, #8
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b086      	sub	sp, #24
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b44:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b46:	f7fb fc5b 	bl	8004400 <HAL_GetTick>
 8008b4a:	0003      	movs	r3, r0
 8008b4c:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2220      	movs	r2, #32
 8008b56:	4013      	ands	r3, r2
 8008b58:	2b20      	cmp	r3, #32
 8008b5a:	d03c      	beq.n	8008bd6 <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	685a      	ldr	r2, [r3, #4]
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2120      	movs	r1, #32
 8008b68:	438a      	bics	r2, r1
 8008b6a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	685a      	ldr	r2, [r3, #4]
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2102      	movs	r1, #2
 8008b78:	438a      	bics	r2, r1
 8008b7a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008b7c:	693a      	ldr	r2, [r7, #16]
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	2164      	movs	r1, #100	@ 0x64
 8008b82:	0018      	movs	r0, r3
 8008b84:	f000 f9ec 	bl	8008f60 <SPI_EndRxTxTransaction>
 8008b88:	1e03      	subs	r3, r0, #0
 8008b8a:	d005      	beq.n	8008b98 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b90:	2220      	movs	r2, #32
 8008b92:	431a      	orrs	r2, r3
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d10a      	bne.n	8008bb6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	60fb      	str	r3, [r7, #12]
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	60fb      	str	r3, [r7, #12]
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	60fb      	str	r3, [r7, #12]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	225d      	movs	r2, #93	@ 0x5d
 8008bc0:	2101      	movs	r1, #1
 8008bc2:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d004      	beq.n	8008bd6 <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	0018      	movs	r0, r3
 8008bd0:	f7ff ff9e 	bl	8008b10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008bd4:	e003      	b.n	8008bde <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	0018      	movs	r0, r3
 8008bda:	f7ff ff89 	bl	8008af0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008bde:	46bd      	mov	sp, r7
 8008be0:	b006      	add	sp, #24
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	0018      	movs	r0, r3
 8008bf6:	f7ff ff83 	bl	8008b00 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008bfa:	46c0      	nop			@ (mov r8, r8)
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	b004      	add	sp, #16
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b084      	sub	sp, #16
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c0e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685a      	ldr	r2, [r3, #4]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2103      	movs	r1, #3
 8008c1c:	438a      	bics	r2, r1
 8008c1e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c24:	2210      	movs	r2, #16
 8008c26:	431a      	orrs	r2, r3
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	225d      	movs	r2, #93	@ 0x5d
 8008c30:	2101      	movs	r1, #1
 8008c32:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	0018      	movs	r0, r3
 8008c38:	f7ff ff6a 	bl	8008b10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c3c:	46c0      	nop			@ (mov r8, r8)
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	b004      	add	sp, #16
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b088      	sub	sp, #32
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	603b      	str	r3, [r7, #0]
 8008c50:	1dfb      	adds	r3, r7, #7
 8008c52:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008c54:	f7fb fbd4 	bl	8004400 <HAL_GetTick>
 8008c58:	0002      	movs	r2, r0
 8008c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c5c:	1a9b      	subs	r3, r3, r2
 8008c5e:	683a      	ldr	r2, [r7, #0]
 8008c60:	18d3      	adds	r3, r2, r3
 8008c62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008c64:	f7fb fbcc 	bl	8004400 <HAL_GetTick>
 8008c68:	0003      	movs	r3, r0
 8008c6a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008c6c:	4b3a      	ldr	r3, [pc, #232]	@ (8008d58 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	015b      	lsls	r3, r3, #5
 8008c72:	0d1b      	lsrs	r3, r3, #20
 8008c74:	69fa      	ldr	r2, [r7, #28]
 8008c76:	4353      	muls	r3, r2
 8008c78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c7a:	e058      	b.n	8008d2e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	d055      	beq.n	8008d2e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008c82:	f7fb fbbd 	bl	8004400 <HAL_GetTick>
 8008c86:	0002      	movs	r2, r0
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	1ad3      	subs	r3, r2, r3
 8008c8c:	69fa      	ldr	r2, [r7, #28]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d902      	bls.n	8008c98 <SPI_WaitFlagStateUntilTimeout+0x54>
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d142      	bne.n	8008d1e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	685a      	ldr	r2, [r3, #4]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	21e0      	movs	r1, #224	@ 0xe0
 8008ca4:	438a      	bics	r2, r1
 8008ca6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	685a      	ldr	r2, [r3, #4]
 8008cac:	2382      	movs	r3, #130	@ 0x82
 8008cae:	005b      	lsls	r3, r3, #1
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d113      	bne.n	8008cdc <SPI_WaitFlagStateUntilTimeout+0x98>
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	689a      	ldr	r2, [r3, #8]
 8008cb8:	2380      	movs	r3, #128	@ 0x80
 8008cba:	021b      	lsls	r3, r3, #8
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d005      	beq.n	8008ccc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	689a      	ldr	r2, [r3, #8]
 8008cc4:	2380      	movs	r3, #128	@ 0x80
 8008cc6:	00db      	lsls	r3, r3, #3
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d107      	bne.n	8008cdc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2140      	movs	r1, #64	@ 0x40
 8008cd8:	438a      	bics	r2, r1
 8008cda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008ce0:	2380      	movs	r3, #128	@ 0x80
 8008ce2:	019b      	lsls	r3, r3, #6
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d110      	bne.n	8008d0a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	491a      	ldr	r1, [pc, #104]	@ (8008d5c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8008cf4:	400a      	ands	r2, r1
 8008cf6:	601a      	str	r2, [r3, #0]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2180      	movs	r1, #128	@ 0x80
 8008d04:	0189      	lsls	r1, r1, #6
 8008d06:	430a      	orrs	r2, r1
 8008d08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	225d      	movs	r2, #93	@ 0x5d
 8008d0e:	2101      	movs	r1, #1
 8008d10:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	225c      	movs	r2, #92	@ 0x5c
 8008d16:	2100      	movs	r1, #0
 8008d18:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	e017      	b.n	8008d4e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8008d24:	2300      	movs	r3, #0
 8008d26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	4013      	ands	r3, r2
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	425a      	negs	r2, r3
 8008d3e:	4153      	adcs	r3, r2
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	001a      	movs	r2, r3
 8008d44:	1dfb      	adds	r3, r7, #7
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d197      	bne.n	8008c7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	0018      	movs	r0, r3
 8008d50:	46bd      	mov	sp, r7
 8008d52:	b008      	add	sp, #32
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	46c0      	nop			@ (mov r8, r8)
 8008d58:	20000070 	.word	0x20000070
 8008d5c:	ffffdfff 	.word	0xffffdfff

08008d60 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b08a      	sub	sp, #40	@ 0x28
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	607a      	str	r2, [r7, #4]
 8008d6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008d6e:	2317      	movs	r3, #23
 8008d70:	18fb      	adds	r3, r7, r3
 8008d72:	2200      	movs	r2, #0
 8008d74:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008d76:	f7fb fb43 	bl	8004400 <HAL_GetTick>
 8008d7a:	0002      	movs	r2, r0
 8008d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7e:	1a9b      	subs	r3, r3, r2
 8008d80:	683a      	ldr	r2, [r7, #0]
 8008d82:	18d3      	adds	r3, r2, r3
 8008d84:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008d86:	f7fb fb3b 	bl	8004400 <HAL_GetTick>
 8008d8a:	0003      	movs	r3, r0
 8008d8c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	330c      	adds	r3, #12
 8008d94:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008d96:	4b41      	ldr	r3, [pc, #260]	@ (8008e9c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	0013      	movs	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	189b      	adds	r3, r3, r2
 8008da0:	00da      	lsls	r2, r3, #3
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	0d1b      	lsrs	r3, r3, #20
 8008da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008da8:	4353      	muls	r3, r2
 8008daa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008dac:	e068      	b.n	8008e80 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	23c0      	movs	r3, #192	@ 0xc0
 8008db2:	00db      	lsls	r3, r3, #3
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d10a      	bne.n	8008dce <SPI_WaitFifoStateUntilTimeout+0x6e>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d107      	bne.n	8008dce <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	b2da      	uxtb	r2, r3
 8008dc4:	2117      	movs	r1, #23
 8008dc6:	187b      	adds	r3, r7, r1
 8008dc8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008dca:	187b      	adds	r3, r7, r1
 8008dcc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	d055      	beq.n	8008e80 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008dd4:	f7fb fb14 	bl	8004400 <HAL_GetTick>
 8008dd8:	0002      	movs	r2, r0
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	1ad3      	subs	r3, r2, r3
 8008dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d902      	bls.n	8008dea <SPI_WaitFifoStateUntilTimeout+0x8a>
 8008de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d142      	bne.n	8008e70 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	685a      	ldr	r2, [r3, #4]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	21e0      	movs	r1, #224	@ 0xe0
 8008df6:	438a      	bics	r2, r1
 8008df8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	685a      	ldr	r2, [r3, #4]
 8008dfe:	2382      	movs	r3, #130	@ 0x82
 8008e00:	005b      	lsls	r3, r3, #1
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d113      	bne.n	8008e2e <SPI_WaitFifoStateUntilTimeout+0xce>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	689a      	ldr	r2, [r3, #8]
 8008e0a:	2380      	movs	r3, #128	@ 0x80
 8008e0c:	021b      	lsls	r3, r3, #8
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d005      	beq.n	8008e1e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	689a      	ldr	r2, [r3, #8]
 8008e16:	2380      	movs	r3, #128	@ 0x80
 8008e18:	00db      	lsls	r3, r3, #3
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d107      	bne.n	8008e2e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2140      	movs	r1, #64	@ 0x40
 8008e2a:	438a      	bics	r2, r1
 8008e2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e32:	2380      	movs	r3, #128	@ 0x80
 8008e34:	019b      	lsls	r3, r3, #6
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d110      	bne.n	8008e5c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4916      	ldr	r1, [pc, #88]	@ (8008ea0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8008e46:	400a      	ands	r2, r1
 8008e48:	601a      	str	r2, [r3, #0]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2180      	movs	r1, #128	@ 0x80
 8008e56:	0189      	lsls	r1, r1, #6
 8008e58:	430a      	orrs	r2, r1
 8008e5a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	225d      	movs	r2, #93	@ 0x5d
 8008e60:	2101      	movs	r1, #1
 8008e62:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	225c      	movs	r2, #92	@ 0x5c
 8008e68:	2100      	movs	r1, #0
 8008e6a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e010      	b.n	8008e92 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d101      	bne.n	8008e7a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8008e76:	2300      	movs	r3, #0
 8008e78:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	68ba      	ldr	r2, [r7, #8]
 8008e88:	4013      	ands	r3, r2
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d18e      	bne.n	8008dae <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	0018      	movs	r0, r3
 8008e94:	46bd      	mov	sp, r7
 8008e96:	b00a      	add	sp, #40	@ 0x28
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	46c0      	nop			@ (mov r8, r8)
 8008e9c:	20000070 	.word	0x20000070
 8008ea0:	ffffdfff 	.word	0xffffdfff

08008ea4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b086      	sub	sp, #24
 8008ea8:	af02      	add	r7, sp, #8
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	685a      	ldr	r2, [r3, #4]
 8008eb4:	2382      	movs	r3, #130	@ 0x82
 8008eb6:	005b      	lsls	r3, r3, #1
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d113      	bne.n	8008ee4 <SPI_EndRxTransaction+0x40>
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	689a      	ldr	r2, [r3, #8]
 8008ec0:	2380      	movs	r3, #128	@ 0x80
 8008ec2:	021b      	lsls	r3, r3, #8
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d005      	beq.n	8008ed4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	689a      	ldr	r2, [r3, #8]
 8008ecc:	2380      	movs	r3, #128	@ 0x80
 8008ece:	00db      	lsls	r3, r3, #3
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d107      	bne.n	8008ee4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2140      	movs	r1, #64	@ 0x40
 8008ee0:	438a      	bics	r2, r1
 8008ee2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	9300      	str	r3, [sp, #0]
 8008eec:	0013      	movs	r3, r2
 8008eee:	2200      	movs	r2, #0
 8008ef0:	2180      	movs	r1, #128	@ 0x80
 8008ef2:	f7ff fea7 	bl	8008c44 <SPI_WaitFlagStateUntilTimeout>
 8008ef6:	1e03      	subs	r3, r0, #0
 8008ef8:	d007      	beq.n	8008f0a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008efe:	2220      	movs	r2, #32
 8008f00:	431a      	orrs	r2, r3
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008f06:	2303      	movs	r3, #3
 8008f08:	e026      	b.n	8008f58 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	685a      	ldr	r2, [r3, #4]
 8008f0e:	2382      	movs	r3, #130	@ 0x82
 8008f10:	005b      	lsls	r3, r3, #1
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d11f      	bne.n	8008f56 <SPI_EndRxTransaction+0xb2>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	689a      	ldr	r2, [r3, #8]
 8008f1a:	2380      	movs	r3, #128	@ 0x80
 8008f1c:	021b      	lsls	r3, r3, #8
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d005      	beq.n	8008f2e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	689a      	ldr	r2, [r3, #8]
 8008f26:	2380      	movs	r3, #128	@ 0x80
 8008f28:	00db      	lsls	r3, r3, #3
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d113      	bne.n	8008f56 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	23c0      	movs	r3, #192	@ 0xc0
 8008f32:	00d9      	lsls	r1, r3, #3
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	0013      	movs	r3, r2
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f7ff ff0f 	bl	8008d60 <SPI_WaitFifoStateUntilTimeout>
 8008f42:	1e03      	subs	r3, r0, #0
 8008f44:	d007      	beq.n	8008f56 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f4a:	2220      	movs	r2, #32
 8008f4c:	431a      	orrs	r2, r3
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008f52:	2303      	movs	r3, #3
 8008f54:	e000      	b.n	8008f58 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	0018      	movs	r0, r3
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	b004      	add	sp, #16
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af02      	add	r7, sp, #8
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	23c0      	movs	r3, #192	@ 0xc0
 8008f70:	0159      	lsls	r1, r3, #5
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	0013      	movs	r3, r2
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f7ff fef0 	bl	8008d60 <SPI_WaitFifoStateUntilTimeout>
 8008f80:	1e03      	subs	r3, r0, #0
 8008f82:	d007      	beq.n	8008f94 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f88:	2220      	movs	r2, #32
 8008f8a:	431a      	orrs	r2, r3
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008f90:	2303      	movs	r3, #3
 8008f92:	e027      	b.n	8008fe4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f94:	68ba      	ldr	r2, [r7, #8]
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	0013      	movs	r3, r2
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	2180      	movs	r1, #128	@ 0x80
 8008fa2:	f7ff fe4f 	bl	8008c44 <SPI_WaitFlagStateUntilTimeout>
 8008fa6:	1e03      	subs	r3, r0, #0
 8008fa8:	d007      	beq.n	8008fba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fae:	2220      	movs	r2, #32
 8008fb0:	431a      	orrs	r2, r3
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	e014      	b.n	8008fe4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008fba:	68ba      	ldr	r2, [r7, #8]
 8008fbc:	23c0      	movs	r3, #192	@ 0xc0
 8008fbe:	00d9      	lsls	r1, r3, #3
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	9300      	str	r3, [sp, #0]
 8008fc6:	0013      	movs	r3, r2
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f7ff fec9 	bl	8008d60 <SPI_WaitFifoStateUntilTimeout>
 8008fce:	1e03      	subs	r3, r0, #0
 8008fd0:	d007      	beq.n	8008fe2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fd6:	2220      	movs	r2, #32
 8008fd8:	431a      	orrs	r2, r3
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	e000      	b.n	8008fe4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	0018      	movs	r0, r3
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	b004      	add	sp, #16
 8008fea:	bd80      	pop	{r7, pc}

08008fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d101      	bne.n	8008ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e042      	b.n	8009084 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	223d      	movs	r2, #61	@ 0x3d
 8009002:	5c9b      	ldrb	r3, [r3, r2]
 8009004:	b2db      	uxtb	r3, r3
 8009006:	2b00      	cmp	r3, #0
 8009008:	d107      	bne.n	800901a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	223c      	movs	r2, #60	@ 0x3c
 800900e:	2100      	movs	r1, #0
 8009010:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	0018      	movs	r0, r3
 8009016:	f7fa ff9b 	bl	8003f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	223d      	movs	r2, #61	@ 0x3d
 800901e:	2102      	movs	r1, #2
 8009020:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	3304      	adds	r3, #4
 800902a:	0019      	movs	r1, r3
 800902c:	0010      	movs	r0, r2
 800902e:	f000 fa17 	bl	8009460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2246      	movs	r2, #70	@ 0x46
 8009036:	2101      	movs	r1, #1
 8009038:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	223e      	movs	r2, #62	@ 0x3e
 800903e:	2101      	movs	r1, #1
 8009040:	5499      	strb	r1, [r3, r2]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	223f      	movs	r2, #63	@ 0x3f
 8009046:	2101      	movs	r1, #1
 8009048:	5499      	strb	r1, [r3, r2]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2240      	movs	r2, #64	@ 0x40
 800904e:	2101      	movs	r1, #1
 8009050:	5499      	strb	r1, [r3, r2]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2241      	movs	r2, #65	@ 0x41
 8009056:	2101      	movs	r1, #1
 8009058:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2242      	movs	r2, #66	@ 0x42
 800905e:	2101      	movs	r1, #1
 8009060:	5499      	strb	r1, [r3, r2]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2243      	movs	r2, #67	@ 0x43
 8009066:	2101      	movs	r1, #1
 8009068:	5499      	strb	r1, [r3, r2]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2244      	movs	r2, #68	@ 0x44
 800906e:	2101      	movs	r1, #1
 8009070:	5499      	strb	r1, [r3, r2]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2245      	movs	r2, #69	@ 0x45
 8009076:	2101      	movs	r1, #1
 8009078:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	223d      	movs	r2, #61	@ 0x3d
 800907e:	2101      	movs	r1, #1
 8009080:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	0018      	movs	r0, r3
 8009086:	46bd      	mov	sp, r7
 8009088:	b002      	add	sp, #8
 800908a:	bd80      	pop	{r7, pc}

0800908c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	2202      	movs	r2, #2
 80090a8:	4013      	ands	r3, r2
 80090aa:	d021      	beq.n	80090f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2202      	movs	r2, #2
 80090b0:	4013      	ands	r3, r2
 80090b2:	d01d      	beq.n	80090f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2203      	movs	r2, #3
 80090ba:	4252      	negs	r2, r2
 80090bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2201      	movs	r2, #1
 80090c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	699b      	ldr	r3, [r3, #24]
 80090ca:	2203      	movs	r2, #3
 80090cc:	4013      	ands	r3, r2
 80090ce:	d004      	beq.n	80090da <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	0018      	movs	r0, r3
 80090d4:	f000 f9ac 	bl	8009430 <HAL_TIM_IC_CaptureCallback>
 80090d8:	e007      	b.n	80090ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	0018      	movs	r0, r3
 80090de:	f000 f99f 	bl	8009420 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	0018      	movs	r0, r3
 80090e6:	f000 f9ab 	bl	8009440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	2204      	movs	r2, #4
 80090f4:	4013      	ands	r3, r2
 80090f6:	d022      	beq.n	800913e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2204      	movs	r2, #4
 80090fc:	4013      	ands	r3, r2
 80090fe:	d01e      	beq.n	800913e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2205      	movs	r2, #5
 8009106:	4252      	negs	r2, r2
 8009108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2202      	movs	r2, #2
 800910e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	699a      	ldr	r2, [r3, #24]
 8009116:	23c0      	movs	r3, #192	@ 0xc0
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4013      	ands	r3, r2
 800911c:	d004      	beq.n	8009128 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	0018      	movs	r0, r3
 8009122:	f000 f985 	bl	8009430 <HAL_TIM_IC_CaptureCallback>
 8009126:	e007      	b.n	8009138 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	0018      	movs	r0, r3
 800912c:	f000 f978 	bl	8009420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	0018      	movs	r0, r3
 8009134:	f000 f984 	bl	8009440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	2208      	movs	r2, #8
 8009142:	4013      	ands	r3, r2
 8009144:	d021      	beq.n	800918a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2208      	movs	r2, #8
 800914a:	4013      	ands	r3, r2
 800914c:	d01d      	beq.n	800918a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2209      	movs	r2, #9
 8009154:	4252      	negs	r2, r2
 8009156:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2204      	movs	r2, #4
 800915c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	69db      	ldr	r3, [r3, #28]
 8009164:	2203      	movs	r2, #3
 8009166:	4013      	ands	r3, r2
 8009168:	d004      	beq.n	8009174 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	0018      	movs	r0, r3
 800916e:	f000 f95f 	bl	8009430 <HAL_TIM_IC_CaptureCallback>
 8009172:	e007      	b.n	8009184 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	0018      	movs	r0, r3
 8009178:	f000 f952 	bl	8009420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	0018      	movs	r0, r3
 8009180:	f000 f95e 	bl	8009440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	2210      	movs	r2, #16
 800918e:	4013      	ands	r3, r2
 8009190:	d022      	beq.n	80091d8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2210      	movs	r2, #16
 8009196:	4013      	ands	r3, r2
 8009198:	d01e      	beq.n	80091d8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2211      	movs	r2, #17
 80091a0:	4252      	negs	r2, r2
 80091a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2208      	movs	r2, #8
 80091a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	69da      	ldr	r2, [r3, #28]
 80091b0:	23c0      	movs	r3, #192	@ 0xc0
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4013      	ands	r3, r2
 80091b6:	d004      	beq.n	80091c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	0018      	movs	r0, r3
 80091bc:	f000 f938 	bl	8009430 <HAL_TIM_IC_CaptureCallback>
 80091c0:	e007      	b.n	80091d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	0018      	movs	r0, r3
 80091c6:	f000 f92b 	bl	8009420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	0018      	movs	r0, r3
 80091ce:	f000 f937 	bl	8009440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2200      	movs	r2, #0
 80091d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2201      	movs	r2, #1
 80091dc:	4013      	ands	r3, r2
 80091de:	d00c      	beq.n	80091fa <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2201      	movs	r2, #1
 80091e4:	4013      	ands	r3, r2
 80091e6:	d008      	beq.n	80091fa <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2202      	movs	r2, #2
 80091ee:	4252      	negs	r2, r2
 80091f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	0018      	movs	r0, r3
 80091f6:	f000 f90b 	bl	8009410 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	2280      	movs	r2, #128	@ 0x80
 80091fe:	4013      	ands	r3, r2
 8009200:	d00c      	beq.n	800921c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2280      	movs	r2, #128	@ 0x80
 8009206:	4013      	ands	r3, r2
 8009208:	d008      	beq.n	800921c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2281      	movs	r2, #129	@ 0x81
 8009210:	4252      	negs	r2, r2
 8009212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	0018      	movs	r0, r3
 8009218:	f000 fab0 	bl	800977c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	2240      	movs	r2, #64	@ 0x40
 8009220:	4013      	ands	r3, r2
 8009222:	d00c      	beq.n	800923e <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2240      	movs	r2, #64	@ 0x40
 8009228:	4013      	ands	r3, r2
 800922a:	d008      	beq.n	800923e <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2241      	movs	r2, #65	@ 0x41
 8009232:	4252      	negs	r2, r2
 8009234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	0018      	movs	r0, r3
 800923a:	f000 f909 	bl	8009450 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	2220      	movs	r2, #32
 8009242:	4013      	ands	r3, r2
 8009244:	d00c      	beq.n	8009260 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2220      	movs	r2, #32
 800924a:	4013      	ands	r3, r2
 800924c:	d008      	beq.n	8009260 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2221      	movs	r2, #33	@ 0x21
 8009254:	4252      	negs	r2, r2
 8009256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	0018      	movs	r0, r3
 800925c:	f000 fa86 	bl	800976c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009260:	46c0      	nop			@ (mov r8, r8)
 8009262:	46bd      	mov	sp, r7
 8009264:	b004      	add	sp, #16
 8009266:	bd80      	pop	{r7, pc}

08009268 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009272:	230f      	movs	r3, #15
 8009274:	18fb      	adds	r3, r7, r3
 8009276:	2200      	movs	r2, #0
 8009278:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	223c      	movs	r2, #60	@ 0x3c
 800927e:	5c9b      	ldrb	r3, [r3, r2]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d101      	bne.n	8009288 <HAL_TIM_ConfigClockSource+0x20>
 8009284:	2302      	movs	r3, #2
 8009286:	e0bc      	b.n	8009402 <HAL_TIM_ConfigClockSource+0x19a>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	223c      	movs	r2, #60	@ 0x3c
 800928c:	2101      	movs	r1, #1
 800928e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	223d      	movs	r2, #61	@ 0x3d
 8009294:	2102      	movs	r1, #2
 8009296:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	2277      	movs	r2, #119	@ 0x77
 80092a4:	4393      	bics	r3, r2
 80092a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	4a58      	ldr	r2, [pc, #352]	@ (800940c <HAL_TIM_ConfigClockSource+0x1a4>)
 80092ac:	4013      	ands	r3, r2
 80092ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68ba      	ldr	r2, [r7, #8]
 80092b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2280      	movs	r2, #128	@ 0x80
 80092be:	0192      	lsls	r2, r2, #6
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d040      	beq.n	8009346 <HAL_TIM_ConfigClockSource+0xde>
 80092c4:	2280      	movs	r2, #128	@ 0x80
 80092c6:	0192      	lsls	r2, r2, #6
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d900      	bls.n	80092ce <HAL_TIM_ConfigClockSource+0x66>
 80092cc:	e088      	b.n	80093e0 <HAL_TIM_ConfigClockSource+0x178>
 80092ce:	2280      	movs	r2, #128	@ 0x80
 80092d0:	0152      	lsls	r2, r2, #5
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d100      	bne.n	80092d8 <HAL_TIM_ConfigClockSource+0x70>
 80092d6:	e088      	b.n	80093ea <HAL_TIM_ConfigClockSource+0x182>
 80092d8:	2280      	movs	r2, #128	@ 0x80
 80092da:	0152      	lsls	r2, r2, #5
 80092dc:	4293      	cmp	r3, r2
 80092de:	d900      	bls.n	80092e2 <HAL_TIM_ConfigClockSource+0x7a>
 80092e0:	e07e      	b.n	80093e0 <HAL_TIM_ConfigClockSource+0x178>
 80092e2:	2b70      	cmp	r3, #112	@ 0x70
 80092e4:	d018      	beq.n	8009318 <HAL_TIM_ConfigClockSource+0xb0>
 80092e6:	d900      	bls.n	80092ea <HAL_TIM_ConfigClockSource+0x82>
 80092e8:	e07a      	b.n	80093e0 <HAL_TIM_ConfigClockSource+0x178>
 80092ea:	2b60      	cmp	r3, #96	@ 0x60
 80092ec:	d04f      	beq.n	800938e <HAL_TIM_ConfigClockSource+0x126>
 80092ee:	d900      	bls.n	80092f2 <HAL_TIM_ConfigClockSource+0x8a>
 80092f0:	e076      	b.n	80093e0 <HAL_TIM_ConfigClockSource+0x178>
 80092f2:	2b50      	cmp	r3, #80	@ 0x50
 80092f4:	d03b      	beq.n	800936e <HAL_TIM_ConfigClockSource+0x106>
 80092f6:	d900      	bls.n	80092fa <HAL_TIM_ConfigClockSource+0x92>
 80092f8:	e072      	b.n	80093e0 <HAL_TIM_ConfigClockSource+0x178>
 80092fa:	2b40      	cmp	r3, #64	@ 0x40
 80092fc:	d057      	beq.n	80093ae <HAL_TIM_ConfigClockSource+0x146>
 80092fe:	d900      	bls.n	8009302 <HAL_TIM_ConfigClockSource+0x9a>
 8009300:	e06e      	b.n	80093e0 <HAL_TIM_ConfigClockSource+0x178>
 8009302:	2b30      	cmp	r3, #48	@ 0x30
 8009304:	d063      	beq.n	80093ce <HAL_TIM_ConfigClockSource+0x166>
 8009306:	d86b      	bhi.n	80093e0 <HAL_TIM_ConfigClockSource+0x178>
 8009308:	2b20      	cmp	r3, #32
 800930a:	d060      	beq.n	80093ce <HAL_TIM_ConfigClockSource+0x166>
 800930c:	d868      	bhi.n	80093e0 <HAL_TIM_ConfigClockSource+0x178>
 800930e:	2b00      	cmp	r3, #0
 8009310:	d05d      	beq.n	80093ce <HAL_TIM_ConfigClockSource+0x166>
 8009312:	2b10      	cmp	r3, #16
 8009314:	d05b      	beq.n	80093ce <HAL_TIM_ConfigClockSource+0x166>
 8009316:	e063      	b.n	80093e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009328:	f000 f9a2 	bl	8009670 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	2277      	movs	r2, #119	@ 0x77
 8009338:	4313      	orrs	r3, r2
 800933a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68ba      	ldr	r2, [r7, #8]
 8009342:	609a      	str	r2, [r3, #8]
      break;
 8009344:	e052      	b.n	80093ec <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009356:	f000 f98b 	bl	8009670 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	689a      	ldr	r2, [r3, #8]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2180      	movs	r1, #128	@ 0x80
 8009366:	01c9      	lsls	r1, r1, #7
 8009368:	430a      	orrs	r2, r1
 800936a:	609a      	str	r2, [r3, #8]
      break;
 800936c:	e03e      	b.n	80093ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800937a:	001a      	movs	r2, r3
 800937c:	f000 f8fe 	bl	800957c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2150      	movs	r1, #80	@ 0x50
 8009386:	0018      	movs	r0, r3
 8009388:	f000 f958 	bl	800963c <TIM_ITRx_SetConfig>
      break;
 800938c:	e02e      	b.n	80093ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800939a:	001a      	movs	r2, r3
 800939c:	f000 f91c 	bl	80095d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2160      	movs	r1, #96	@ 0x60
 80093a6:	0018      	movs	r0, r3
 80093a8:	f000 f948 	bl	800963c <TIM_ITRx_SetConfig>
      break;
 80093ac:	e01e      	b.n	80093ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093ba:	001a      	movs	r2, r3
 80093bc:	f000 f8de 	bl	800957c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2140      	movs	r1, #64	@ 0x40
 80093c6:	0018      	movs	r0, r3
 80093c8:	f000 f938 	bl	800963c <TIM_ITRx_SetConfig>
      break;
 80093cc:	e00e      	b.n	80093ec <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	0019      	movs	r1, r3
 80093d8:	0010      	movs	r0, r2
 80093da:	f000 f92f 	bl	800963c <TIM_ITRx_SetConfig>
      break;
 80093de:	e005      	b.n	80093ec <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80093e0:	230f      	movs	r3, #15
 80093e2:	18fb      	adds	r3, r7, r3
 80093e4:	2201      	movs	r2, #1
 80093e6:	701a      	strb	r2, [r3, #0]
      break;
 80093e8:	e000      	b.n	80093ec <HAL_TIM_ConfigClockSource+0x184>
      break;
 80093ea:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	223d      	movs	r2, #61	@ 0x3d
 80093f0:	2101      	movs	r1, #1
 80093f2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	223c      	movs	r2, #60	@ 0x3c
 80093f8:	2100      	movs	r1, #0
 80093fa:	5499      	strb	r1, [r3, r2]

  return status;
 80093fc:	230f      	movs	r3, #15
 80093fe:	18fb      	adds	r3, r7, r3
 8009400:	781b      	ldrb	r3, [r3, #0]
}
 8009402:	0018      	movs	r0, r3
 8009404:	46bd      	mov	sp, r7
 8009406:	b004      	add	sp, #16
 8009408:	bd80      	pop	{r7, pc}
 800940a:	46c0      	nop			@ (mov r8, r8)
 800940c:	ffff00ff 	.word	0xffff00ff

08009410 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009418:	46c0      	nop			@ (mov r8, r8)
 800941a:	46bd      	mov	sp, r7
 800941c:	b002      	add	sp, #8
 800941e:	bd80      	pop	{r7, pc}

08009420 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009428:	46c0      	nop			@ (mov r8, r8)
 800942a:	46bd      	mov	sp, r7
 800942c:	b002      	add	sp, #8
 800942e:	bd80      	pop	{r7, pc}

08009430 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009438:	46c0      	nop			@ (mov r8, r8)
 800943a:	46bd      	mov	sp, r7
 800943c:	b002      	add	sp, #8
 800943e:	bd80      	pop	{r7, pc}

08009440 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009448:	46c0      	nop			@ (mov r8, r8)
 800944a:	46bd      	mov	sp, r7
 800944c:	b002      	add	sp, #8
 800944e:	bd80      	pop	{r7, pc}

08009450 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009458:	46c0      	nop			@ (mov r8, r8)
 800945a:	46bd      	mov	sp, r7
 800945c:	b002      	add	sp, #8
 800945e:	bd80      	pop	{r7, pc}

08009460 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a3b      	ldr	r2, [pc, #236]	@ (8009560 <TIM_Base_SetConfig+0x100>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d008      	beq.n	800948a <TIM_Base_SetConfig+0x2a>
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	2380      	movs	r3, #128	@ 0x80
 800947c:	05db      	lsls	r3, r3, #23
 800947e:	429a      	cmp	r2, r3
 8009480:	d003      	beq.n	800948a <TIM_Base_SetConfig+0x2a>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a37      	ldr	r2, [pc, #220]	@ (8009564 <TIM_Base_SetConfig+0x104>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d108      	bne.n	800949c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2270      	movs	r2, #112	@ 0x70
 800948e:	4393      	bics	r3, r2
 8009490:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	4313      	orrs	r3, r2
 800949a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a30      	ldr	r2, [pc, #192]	@ (8009560 <TIM_Base_SetConfig+0x100>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d018      	beq.n	80094d6 <TIM_Base_SetConfig+0x76>
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	2380      	movs	r3, #128	@ 0x80
 80094a8:	05db      	lsls	r3, r3, #23
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d013      	beq.n	80094d6 <TIM_Base_SetConfig+0x76>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a2c      	ldr	r2, [pc, #176]	@ (8009564 <TIM_Base_SetConfig+0x104>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d00f      	beq.n	80094d6 <TIM_Base_SetConfig+0x76>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a2b      	ldr	r2, [pc, #172]	@ (8009568 <TIM_Base_SetConfig+0x108>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d00b      	beq.n	80094d6 <TIM_Base_SetConfig+0x76>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a2a      	ldr	r2, [pc, #168]	@ (800956c <TIM_Base_SetConfig+0x10c>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d007      	beq.n	80094d6 <TIM_Base_SetConfig+0x76>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a29      	ldr	r2, [pc, #164]	@ (8009570 <TIM_Base_SetConfig+0x110>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d003      	beq.n	80094d6 <TIM_Base_SetConfig+0x76>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a28      	ldr	r2, [pc, #160]	@ (8009574 <TIM_Base_SetConfig+0x114>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d108      	bne.n	80094e8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	4a27      	ldr	r2, [pc, #156]	@ (8009578 <TIM_Base_SetConfig+0x118>)
 80094da:	4013      	ands	r3, r2
 80094dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2280      	movs	r2, #128	@ 0x80
 80094ec:	4393      	bics	r3, r2
 80094ee:	001a      	movs	r2, r3
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	695b      	ldr	r3, [r3, #20]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	689a      	ldr	r2, [r3, #8]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4a13      	ldr	r2, [pc, #76]	@ (8009560 <TIM_Base_SetConfig+0x100>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d00b      	beq.n	800952e <TIM_Base_SetConfig+0xce>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4a14      	ldr	r2, [pc, #80]	@ (800956c <TIM_Base_SetConfig+0x10c>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d007      	beq.n	800952e <TIM_Base_SetConfig+0xce>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	4a13      	ldr	r2, [pc, #76]	@ (8009570 <TIM_Base_SetConfig+0x110>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d003      	beq.n	800952e <TIM_Base_SetConfig+0xce>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	4a12      	ldr	r2, [pc, #72]	@ (8009574 <TIM_Base_SetConfig+0x114>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d103      	bne.n	8009536 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	691a      	ldr	r2, [r3, #16]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2201      	movs	r2, #1
 800953a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	2201      	movs	r2, #1
 8009542:	4013      	ands	r3, r2
 8009544:	2b01      	cmp	r3, #1
 8009546:	d106      	bne.n	8009556 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	2201      	movs	r2, #1
 800954e:	4393      	bics	r3, r2
 8009550:	001a      	movs	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	611a      	str	r2, [r3, #16]
  }
}
 8009556:	46c0      	nop			@ (mov r8, r8)
 8009558:	46bd      	mov	sp, r7
 800955a:	b004      	add	sp, #16
 800955c:	bd80      	pop	{r7, pc}
 800955e:	46c0      	nop			@ (mov r8, r8)
 8009560:	40012c00 	.word	0x40012c00
 8009564:	40000400 	.word	0x40000400
 8009568:	40002000 	.word	0x40002000
 800956c:	40014000 	.word	0x40014000
 8009570:	40014400 	.word	0x40014400
 8009574:	40014800 	.word	0x40014800
 8009578:	fffffcff 	.word	0xfffffcff

0800957c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b086      	sub	sp, #24
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6a1b      	ldr	r3, [r3, #32]
 800958c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6a1b      	ldr	r3, [r3, #32]
 8009592:	2201      	movs	r2, #1
 8009594:	4393      	bics	r3, r2
 8009596:	001a      	movs	r2, r3
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	22f0      	movs	r2, #240	@ 0xf0
 80095a6:	4393      	bics	r3, r2
 80095a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	011b      	lsls	r3, r3, #4
 80095ae:	693a      	ldr	r2, [r7, #16]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	220a      	movs	r2, #10
 80095b8:	4393      	bics	r3, r2
 80095ba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80095bc:	697a      	ldr	r2, [r7, #20]
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	4313      	orrs	r3, r2
 80095c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	693a      	ldr	r2, [r7, #16]
 80095c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	697a      	ldr	r2, [r7, #20]
 80095ce:	621a      	str	r2, [r3, #32]
}
 80095d0:	46c0      	nop			@ (mov r8, r8)
 80095d2:	46bd      	mov	sp, r7
 80095d4:	b006      	add	sp, #24
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b086      	sub	sp, #24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6a1b      	ldr	r3, [r3, #32]
 80095e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	2210      	movs	r2, #16
 80095f0:	4393      	bics	r3, r2
 80095f2:	001a      	movs	r2, r3
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	4a0d      	ldr	r2, [pc, #52]	@ (8009638 <TIM_TI2_ConfigInputStage+0x60>)
 8009602:	4013      	ands	r3, r2
 8009604:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	031b      	lsls	r3, r3, #12
 800960a:	693a      	ldr	r2, [r7, #16]
 800960c:	4313      	orrs	r3, r2
 800960e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	22a0      	movs	r2, #160	@ 0xa0
 8009614:	4393      	bics	r3, r2
 8009616:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	011b      	lsls	r3, r3, #4
 800961c:	697a      	ldr	r2, [r7, #20]
 800961e:	4313      	orrs	r3, r2
 8009620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	693a      	ldr	r2, [r7, #16]
 8009626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	697a      	ldr	r2, [r7, #20]
 800962c:	621a      	str	r2, [r3, #32]
}
 800962e:	46c0      	nop			@ (mov r8, r8)
 8009630:	46bd      	mov	sp, r7
 8009632:	b006      	add	sp, #24
 8009634:	bd80      	pop	{r7, pc}
 8009636:	46c0      	nop			@ (mov r8, r8)
 8009638:	ffff0fff 	.word	0xffff0fff

0800963c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2270      	movs	r2, #112	@ 0x70
 8009650:	4393      	bics	r3, r2
 8009652:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009654:	683a      	ldr	r2, [r7, #0]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	4313      	orrs	r3, r2
 800965a:	2207      	movs	r2, #7
 800965c:	4313      	orrs	r3, r2
 800965e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	68fa      	ldr	r2, [r7, #12]
 8009664:	609a      	str	r2, [r3, #8]
}
 8009666:	46c0      	nop			@ (mov r8, r8)
 8009668:	46bd      	mov	sp, r7
 800966a:	b004      	add	sp, #16
 800966c:	bd80      	pop	{r7, pc}
	...

08009670 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b086      	sub	sp, #24
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	607a      	str	r2, [r7, #4]
 800967c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	4a09      	ldr	r2, [pc, #36]	@ (80096ac <TIM_ETR_SetConfig+0x3c>)
 8009688:	4013      	ands	r3, r2
 800968a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	021a      	lsls	r2, r3, #8
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	431a      	orrs	r2, r3
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	4313      	orrs	r3, r2
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	4313      	orrs	r3, r2
 800969c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	697a      	ldr	r2, [r7, #20]
 80096a2:	609a      	str	r2, [r3, #8]
}
 80096a4:	46c0      	nop			@ (mov r8, r8)
 80096a6:	46bd      	mov	sp, r7
 80096a8:	b006      	add	sp, #24
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	ffff00ff 	.word	0xffff00ff

080096b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	223c      	movs	r2, #60	@ 0x3c
 80096be:	5c9b      	ldrb	r3, [r3, r2]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d101      	bne.n	80096c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80096c4:	2302      	movs	r3, #2
 80096c6:	e047      	b.n	8009758 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	223c      	movs	r2, #60	@ 0x3c
 80096cc:	2101      	movs	r1, #1
 80096ce:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	223d      	movs	r2, #61	@ 0x3d
 80096d4:	2102      	movs	r1, #2
 80096d6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2270      	movs	r2, #112	@ 0x70
 80096ec:	4393      	bics	r3, r2
 80096ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a16      	ldr	r2, [pc, #88]	@ (8009760 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d00f      	beq.n	800972c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	2380      	movs	r3, #128	@ 0x80
 8009712:	05db      	lsls	r3, r3, #23
 8009714:	429a      	cmp	r2, r3
 8009716:	d009      	beq.n	800972c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a11      	ldr	r2, [pc, #68]	@ (8009764 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d004      	beq.n	800972c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a10      	ldr	r2, [pc, #64]	@ (8009768 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d10c      	bne.n	8009746 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	2280      	movs	r2, #128	@ 0x80
 8009730:	4393      	bics	r3, r2
 8009732:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	68ba      	ldr	r2, [r7, #8]
 800973a:	4313      	orrs	r3, r2
 800973c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	68ba      	ldr	r2, [r7, #8]
 8009744:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	223d      	movs	r2, #61	@ 0x3d
 800974a:	2101      	movs	r1, #1
 800974c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	223c      	movs	r2, #60	@ 0x3c
 8009752:	2100      	movs	r1, #0
 8009754:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	0018      	movs	r0, r3
 800975a:	46bd      	mov	sp, r7
 800975c:	b004      	add	sp, #16
 800975e:	bd80      	pop	{r7, pc}
 8009760:	40012c00 	.word	0x40012c00
 8009764:	40000400 	.word	0x40000400
 8009768:	40014000 	.word	0x40014000

0800976c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009774:	46c0      	nop			@ (mov r8, r8)
 8009776:	46bd      	mov	sp, r7
 8009778:	b002      	add	sp, #8
 800977a:	bd80      	pop	{r7, pc}

0800977c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009784:	46c0      	nop			@ (mov r8, r8)
 8009786:	46bd      	mov	sp, r7
 8009788:	b002      	add	sp, #8
 800978a:	bd80      	pop	{r7, pc}

0800978c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d101      	bne.n	800979e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e053      	b.n	8009846 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d116      	bne.n	80097d4 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2278      	movs	r2, #120	@ 0x78
 80097aa:	2100      	movs	r1, #0
 80097ac:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	0018      	movs	r0, r3
 80097b2:	f000 fbeb 	bl	8009f8c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	22b0      	movs	r2, #176	@ 0xb0
 80097ba:	589b      	ldr	r3, [r3, r2]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d103      	bne.n	80097c8 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	21b0      	movs	r1, #176	@ 0xb0
 80097c4:	4a22      	ldr	r2, [pc, #136]	@ (8009850 <HAL_UART_Init+0xc4>)
 80097c6:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	22b0      	movs	r2, #176	@ 0xb0
 80097cc:	589b      	ldr	r3, [r3, r2]
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	0010      	movs	r0, r2
 80097d2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2224      	movs	r2, #36	@ 0x24
 80097d8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2101      	movs	r1, #1
 80097e6:	438a      	bics	r2, r1
 80097e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d003      	beq.n	80097fa <HAL_UART_Init+0x6e>
  {
    UART_AdvFeatureConfig(huart);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	0018      	movs	r0, r3
 80097f6:	f000 fd95 	bl	800a324 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	0018      	movs	r0, r3
 80097fe:	f000 fc09 	bl	800a014 <UART_SetConfig>
 8009802:	0003      	movs	r3, r0
 8009804:	2b01      	cmp	r3, #1
 8009806:	d101      	bne.n	800980c <HAL_UART_Init+0x80>
  {
    return HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	e01c      	b.n	8009846 <HAL_UART_Init+0xba>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	685a      	ldr	r2, [r3, #4]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	490f      	ldr	r1, [pc, #60]	@ (8009854 <HAL_UART_Init+0xc8>)
 8009818:	400a      	ands	r2, r1
 800981a:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	689a      	ldr	r2, [r3, #8]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	212a      	movs	r1, #42	@ 0x2a
 8009828:	438a      	bics	r2, r1
 800982a:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2101      	movs	r1, #1
 8009838:	430a      	orrs	r2, r1
 800983a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	0018      	movs	r0, r3
 8009840:	f000 fe24 	bl	800a48c <UART_CheckIdleState>
 8009844:	0003      	movs	r3, r0
}
 8009846:	0018      	movs	r0, r3
 8009848:	46bd      	mov	sp, r7
 800984a:	b002      	add	sp, #8
 800984c:	bd80      	pop	{r7, pc}
 800984e:	46c0      	nop			@ (mov r8, r8)
 8009850:	08003f9d 	.word	0x08003f9d
 8009854:	ffffb7ff 	.word	0xffffb7ff

08009858 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b088      	sub	sp, #32
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	1dbb      	adds	r3, r7, #6
 8009864:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800986a:	2b20      	cmp	r3, #32
 800986c:	d15b      	bne.n	8009926 <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d003      	beq.n	800987c <HAL_UART_Transmit_IT+0x24>
 8009874:	1dbb      	adds	r3, r7, #6
 8009876:	881b      	ldrh	r3, [r3, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d101      	bne.n	8009880 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	e053      	b.n	8009928 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	689a      	ldr	r2, [r3, #8]
 8009884:	2380      	movs	r3, #128	@ 0x80
 8009886:	015b      	lsls	r3, r3, #5
 8009888:	429a      	cmp	r2, r3
 800988a:	d109      	bne.n	80098a0 <HAL_UART_Transmit_IT+0x48>
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d105      	bne.n	80098a0 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	2201      	movs	r2, #1
 8009898:	4013      	ands	r3, r2
 800989a:	d001      	beq.n	80098a0 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	e043      	b.n	8009928 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	68ba      	ldr	r2, [r7, #8]
 80098a4:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	1dba      	adds	r2, r7, #6
 80098aa:	2150      	movs	r1, #80	@ 0x50
 80098ac:	8812      	ldrh	r2, [r2, #0]
 80098ae:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	1dba      	adds	r2, r7, #6
 80098b4:	2152      	movs	r1, #82	@ 0x52
 80098b6:	8812      	ldrh	r2, [r2, #0]
 80098b8:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2284      	movs	r2, #132	@ 0x84
 80098c4:	2100      	movs	r1, #0
 80098c6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2221      	movs	r2, #33	@ 0x21
 80098cc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	689a      	ldr	r2, [r3, #8]
 80098d2:	2380      	movs	r3, #128	@ 0x80
 80098d4:	015b      	lsls	r3, r3, #5
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d107      	bne.n	80098ea <HAL_UART_Transmit_IT+0x92>
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d103      	bne.n	80098ea <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	4a12      	ldr	r2, [pc, #72]	@ (8009930 <HAL_UART_Transmit_IT+0xd8>)
 80098e6:	66da      	str	r2, [r3, #108]	@ 0x6c
 80098e8:	e002      	b.n	80098f0 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	4a11      	ldr	r2, [pc, #68]	@ (8009934 <HAL_UART_Transmit_IT+0xdc>)
 80098ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098f0:	f3ef 8310 	mrs	r3, PRIMASK
 80098f4:	613b      	str	r3, [r7, #16]
  return(result);
 80098f6:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80098f8:	61fb      	str	r3, [r7, #28]
 80098fa:	2301      	movs	r3, #1
 80098fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	f383 8810 	msr	PRIMASK, r3
}
 8009904:	46c0      	nop			@ (mov r8, r8)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2180      	movs	r1, #128	@ 0x80
 8009912:	430a      	orrs	r2, r1
 8009914:	601a      	str	r2, [r3, #0]
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	f383 8810 	msr	PRIMASK, r3
}
 8009920:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8009922:	2300      	movs	r3, #0
 8009924:	e000      	b.n	8009928 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8009926:	2302      	movs	r3, #2
  }
}
 8009928:	0018      	movs	r0, r3
 800992a:	46bd      	mov	sp, r7
 800992c:	b008      	add	sp, #32
 800992e:	bd80      	pop	{r7, pc}
 8009930:	0800abf1 	.word	0x0800abf1
 8009934:	0800ab3f 	.word	0x0800ab3f

08009938 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009938:	b590      	push	{r4, r7, lr}
 800993a:	b0ab      	sub	sp, #172	@ 0xac
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	69db      	ldr	r3, [r3, #28]
 8009946:	22a4      	movs	r2, #164	@ 0xa4
 8009948:	18b9      	adds	r1, r7, r2
 800994a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	20a0      	movs	r0, #160	@ 0xa0
 8009954:	1839      	adds	r1, r7, r0
 8009956:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	219c      	movs	r1, #156	@ 0x9c
 8009960:	1879      	adds	r1, r7, r1
 8009962:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009964:	0011      	movs	r1, r2
 8009966:	18bb      	adds	r3, r7, r2
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a9c      	ldr	r2, [pc, #624]	@ (8009bdc <HAL_UART_IRQHandler+0x2a4>)
 800996c:	4013      	ands	r3, r2
 800996e:	2298      	movs	r2, #152	@ 0x98
 8009970:	18bc      	adds	r4, r7, r2
 8009972:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8009974:	18bb      	adds	r3, r7, r2
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d114      	bne.n	80099a6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800997c:	187b      	adds	r3, r7, r1
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2220      	movs	r2, #32
 8009982:	4013      	ands	r3, r2
 8009984:	d00f      	beq.n	80099a6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009986:	183b      	adds	r3, r7, r0
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2220      	movs	r2, #32
 800998c:	4013      	ands	r3, r2
 800998e:	d00a      	beq.n	80099a6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009994:	2b00      	cmp	r3, #0
 8009996:	d100      	bne.n	800999a <HAL_UART_IRQHandler+0x62>
 8009998:	e2a8      	b.n	8009eec <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	0010      	movs	r0, r2
 80099a2:	4798      	blx	r3
      }
      return;
 80099a4:	e2a2      	b.n	8009eec <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80099a6:	2398      	movs	r3, #152	@ 0x98
 80099a8:	18fb      	adds	r3, r7, r3
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d100      	bne.n	80099b2 <HAL_UART_IRQHandler+0x7a>
 80099b0:	e11a      	b.n	8009be8 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80099b2:	239c      	movs	r3, #156	@ 0x9c
 80099b4:	18fb      	adds	r3, r7, r3
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2201      	movs	r2, #1
 80099ba:	4013      	ands	r3, r2
 80099bc:	d106      	bne.n	80099cc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80099be:	23a0      	movs	r3, #160	@ 0xa0
 80099c0:	18fb      	adds	r3, r7, r3
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a86      	ldr	r2, [pc, #536]	@ (8009be0 <HAL_UART_IRQHandler+0x2a8>)
 80099c6:	4013      	ands	r3, r2
 80099c8:	d100      	bne.n	80099cc <HAL_UART_IRQHandler+0x94>
 80099ca:	e10d      	b.n	8009be8 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80099cc:	23a4      	movs	r3, #164	@ 0xa4
 80099ce:	18fb      	adds	r3, r7, r3
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2201      	movs	r2, #1
 80099d4:	4013      	ands	r3, r2
 80099d6:	d012      	beq.n	80099fe <HAL_UART_IRQHandler+0xc6>
 80099d8:	23a0      	movs	r3, #160	@ 0xa0
 80099da:	18fb      	adds	r3, r7, r3
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	2380      	movs	r3, #128	@ 0x80
 80099e0:	005b      	lsls	r3, r3, #1
 80099e2:	4013      	ands	r3, r2
 80099e4:	d00b      	beq.n	80099fe <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2201      	movs	r2, #1
 80099ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2284      	movs	r2, #132	@ 0x84
 80099f2:	589b      	ldr	r3, [r3, r2]
 80099f4:	2201      	movs	r2, #1
 80099f6:	431a      	orrs	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2184      	movs	r1, #132	@ 0x84
 80099fc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099fe:	23a4      	movs	r3, #164	@ 0xa4
 8009a00:	18fb      	adds	r3, r7, r3
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2202      	movs	r2, #2
 8009a06:	4013      	ands	r3, r2
 8009a08:	d011      	beq.n	8009a2e <HAL_UART_IRQHandler+0xf6>
 8009a0a:	239c      	movs	r3, #156	@ 0x9c
 8009a0c:	18fb      	adds	r3, r7, r3
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	2201      	movs	r2, #1
 8009a12:	4013      	ands	r3, r2
 8009a14:	d00b      	beq.n	8009a2e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2202      	movs	r2, #2
 8009a1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2284      	movs	r2, #132	@ 0x84
 8009a22:	589b      	ldr	r3, [r3, r2]
 8009a24:	2204      	movs	r2, #4
 8009a26:	431a      	orrs	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2184      	movs	r1, #132	@ 0x84
 8009a2c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a2e:	23a4      	movs	r3, #164	@ 0xa4
 8009a30:	18fb      	adds	r3, r7, r3
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2204      	movs	r2, #4
 8009a36:	4013      	ands	r3, r2
 8009a38:	d011      	beq.n	8009a5e <HAL_UART_IRQHandler+0x126>
 8009a3a:	239c      	movs	r3, #156	@ 0x9c
 8009a3c:	18fb      	adds	r3, r7, r3
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2201      	movs	r2, #1
 8009a42:	4013      	ands	r3, r2
 8009a44:	d00b      	beq.n	8009a5e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2204      	movs	r2, #4
 8009a4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2284      	movs	r2, #132	@ 0x84
 8009a52:	589b      	ldr	r3, [r3, r2]
 8009a54:	2202      	movs	r2, #2
 8009a56:	431a      	orrs	r2, r3
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2184      	movs	r1, #132	@ 0x84
 8009a5c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009a5e:	23a4      	movs	r3, #164	@ 0xa4
 8009a60:	18fb      	adds	r3, r7, r3
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2208      	movs	r2, #8
 8009a66:	4013      	ands	r3, r2
 8009a68:	d017      	beq.n	8009a9a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009a6a:	23a0      	movs	r3, #160	@ 0xa0
 8009a6c:	18fb      	adds	r3, r7, r3
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2220      	movs	r2, #32
 8009a72:	4013      	ands	r3, r2
 8009a74:	d105      	bne.n	8009a82 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009a76:	239c      	movs	r3, #156	@ 0x9c
 8009a78:	18fb      	adds	r3, r7, r3
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009a80:	d00b      	beq.n	8009a9a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2208      	movs	r2, #8
 8009a88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2284      	movs	r2, #132	@ 0x84
 8009a8e:	589b      	ldr	r3, [r3, r2]
 8009a90:	2208      	movs	r2, #8
 8009a92:	431a      	orrs	r2, r3
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2184      	movs	r1, #132	@ 0x84
 8009a98:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009a9a:	23a4      	movs	r3, #164	@ 0xa4
 8009a9c:	18fb      	adds	r3, r7, r3
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	2380      	movs	r3, #128	@ 0x80
 8009aa2:	011b      	lsls	r3, r3, #4
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	d013      	beq.n	8009ad0 <HAL_UART_IRQHandler+0x198>
 8009aa8:	23a0      	movs	r3, #160	@ 0xa0
 8009aaa:	18fb      	adds	r3, r7, r3
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	2380      	movs	r3, #128	@ 0x80
 8009ab0:	04db      	lsls	r3, r3, #19
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	d00c      	beq.n	8009ad0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2280      	movs	r2, #128	@ 0x80
 8009abc:	0112      	lsls	r2, r2, #4
 8009abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2284      	movs	r2, #132	@ 0x84
 8009ac4:	589b      	ldr	r3, [r3, r2]
 8009ac6:	2220      	movs	r2, #32
 8009ac8:	431a      	orrs	r2, r3
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2184      	movs	r1, #132	@ 0x84
 8009ace:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2284      	movs	r2, #132	@ 0x84
 8009ad4:	589b      	ldr	r3, [r3, r2]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d100      	bne.n	8009adc <HAL_UART_IRQHandler+0x1a4>
 8009ada:	e209      	b.n	8009ef0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009adc:	23a4      	movs	r3, #164	@ 0xa4
 8009ade:	18fb      	adds	r3, r7, r3
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2220      	movs	r2, #32
 8009ae4:	4013      	ands	r3, r2
 8009ae6:	d00e      	beq.n	8009b06 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009ae8:	23a0      	movs	r3, #160	@ 0xa0
 8009aea:	18fb      	adds	r3, r7, r3
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2220      	movs	r2, #32
 8009af0:	4013      	ands	r3, r2
 8009af2:	d008      	beq.n	8009b06 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d004      	beq.n	8009b06 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	0010      	movs	r0, r2
 8009b04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2284      	movs	r2, #132	@ 0x84
 8009b0a:	589b      	ldr	r3, [r3, r2]
 8009b0c:	2194      	movs	r1, #148	@ 0x94
 8009b0e:	187a      	adds	r2, r7, r1
 8009b10:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	2240      	movs	r2, #64	@ 0x40
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	2b40      	cmp	r3, #64	@ 0x40
 8009b1e:	d004      	beq.n	8009b2a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009b20:	187b      	adds	r3, r7, r1
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2228      	movs	r2, #40	@ 0x28
 8009b26:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009b28:	d04b      	beq.n	8009bc2 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	0018      	movs	r0, r3
 8009b2e:	f000 fe89 	bl	800a844 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	2240      	movs	r2, #64	@ 0x40
 8009b3a:	4013      	ands	r3, r2
 8009b3c:	2b40      	cmp	r3, #64	@ 0x40
 8009b3e:	d139      	bne.n	8009bb4 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b40:	f3ef 8310 	mrs	r3, PRIMASK
 8009b44:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8009b46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b48:	2090      	movs	r0, #144	@ 0x90
 8009b4a:	183a      	adds	r2, r7, r0
 8009b4c:	6013      	str	r3, [r2, #0]
 8009b4e:	2301      	movs	r3, #1
 8009b50:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b54:	f383 8810 	msr	PRIMASK, r3
}
 8009b58:	46c0      	nop			@ (mov r8, r8)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	689a      	ldr	r2, [r3, #8]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2140      	movs	r1, #64	@ 0x40
 8009b66:	438a      	bics	r2, r1
 8009b68:	609a      	str	r2, [r3, #8]
 8009b6a:	183b      	adds	r3, r7, r0
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009b72:	f383 8810 	msr	PRIMASK, r3
}
 8009b76:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d012      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b84:	4a17      	ldr	r2, [pc, #92]	@ (8009be4 <HAL_UART_IRQHandler+0x2ac>)
 8009b86:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b8c:	0018      	movs	r0, r3
 8009b8e:	f7fb fa25 	bl	8004fdc <HAL_DMA_Abort_IT>
 8009b92:	1e03      	subs	r3, r0, #0
 8009b94:	d020      	beq.n	8009bd8 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ba0:	0018      	movs	r0, r3
 8009ba2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ba4:	e018      	b.n	8009bd8 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2298      	movs	r2, #152	@ 0x98
 8009baa:	589b      	ldr	r3, [r3, r2]
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	0010      	movs	r0, r2
 8009bb0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bb2:	e011      	b.n	8009bd8 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2298      	movs	r2, #152	@ 0x98
 8009bb8:	589b      	ldr	r3, [r3, r2]
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	0010      	movs	r0, r2
 8009bbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bc0:	e00a      	b.n	8009bd8 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2298      	movs	r2, #152	@ 0x98
 8009bc6:	589b      	ldr	r3, [r3, r2]
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	0010      	movs	r0, r2
 8009bcc:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2284      	movs	r2, #132	@ 0x84
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8009bd6:	e18b      	b.n	8009ef0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bd8:	46c0      	nop			@ (mov r8, r8)
    return;
 8009bda:	e189      	b.n	8009ef0 <HAL_UART_IRQHandler+0x5b8>
 8009bdc:	0000080f 	.word	0x0000080f
 8009be0:	04000120 	.word	0x04000120
 8009be4:	0800ab0d 	.word	0x0800ab0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d000      	beq.n	8009bf2 <HAL_UART_IRQHandler+0x2ba>
 8009bf0:	e13b      	b.n	8009e6a <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009bf2:	23a4      	movs	r3, #164	@ 0xa4
 8009bf4:	18fb      	adds	r3, r7, r3
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2210      	movs	r2, #16
 8009bfa:	4013      	ands	r3, r2
 8009bfc:	d100      	bne.n	8009c00 <HAL_UART_IRQHandler+0x2c8>
 8009bfe:	e134      	b.n	8009e6a <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009c00:	23a0      	movs	r3, #160	@ 0xa0
 8009c02:	18fb      	adds	r3, r7, r3
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2210      	movs	r2, #16
 8009c08:	4013      	ands	r3, r2
 8009c0a:	d100      	bne.n	8009c0e <HAL_UART_IRQHandler+0x2d6>
 8009c0c:	e12d      	b.n	8009e6a <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2210      	movs	r2, #16
 8009c14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	2240      	movs	r2, #64	@ 0x40
 8009c1e:	4013      	ands	r3, r2
 8009c20:	2b40      	cmp	r3, #64	@ 0x40
 8009c22:	d000      	beq.n	8009c26 <HAL_UART_IRQHandler+0x2ee>
 8009c24:	e0a0      	b.n	8009d68 <HAL_UART_IRQHandler+0x430>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	685a      	ldr	r2, [r3, #4]
 8009c2e:	217e      	movs	r1, #126	@ 0x7e
 8009c30:	187b      	adds	r3, r7, r1
 8009c32:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8009c34:	187b      	adds	r3, r7, r1
 8009c36:	881b      	ldrh	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d100      	bne.n	8009c3e <HAL_UART_IRQHandler+0x306>
 8009c3c:	e15a      	b.n	8009ef4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2258      	movs	r2, #88	@ 0x58
 8009c42:	5a9b      	ldrh	r3, [r3, r2]
 8009c44:	187a      	adds	r2, r7, r1
 8009c46:	8812      	ldrh	r2, [r2, #0]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d300      	bcc.n	8009c4e <HAL_UART_IRQHandler+0x316>
 8009c4c:	e152      	b.n	8009ef4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	187a      	adds	r2, r7, r1
 8009c52:	215a      	movs	r1, #90	@ 0x5a
 8009c54:	8812      	ldrh	r2, [r2, #0]
 8009c56:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c5c:	699b      	ldr	r3, [r3, #24]
 8009c5e:	2b20      	cmp	r3, #32
 8009c60:	d06f      	beq.n	8009d42 <HAL_UART_IRQHandler+0x40a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c62:	f3ef 8310 	mrs	r3, PRIMASK
 8009c66:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8009c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c72:	f383 8810 	msr	PRIMASK, r3
}
 8009c76:	46c0      	nop			@ (mov r8, r8)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	49a0      	ldr	r1, [pc, #640]	@ (8009f04 <HAL_UART_IRQHandler+0x5cc>)
 8009c84:	400a      	ands	r2, r1
 8009c86:	601a      	str	r2, [r3, #0]
 8009c88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c8e:	f383 8810 	msr	PRIMASK, r3
}
 8009c92:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c94:	f3ef 8310 	mrs	r3, PRIMASK
 8009c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8009c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c9c:	677b      	str	r3, [r7, #116]	@ 0x74
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ca2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ca4:	f383 8810 	msr	PRIMASK, r3
}
 8009ca8:	46c0      	nop			@ (mov r8, r8)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	689a      	ldr	r2, [r3, #8]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2101      	movs	r1, #1
 8009cb6:	438a      	bics	r2, r1
 8009cb8:	609a      	str	r2, [r3, #8]
 8009cba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009cbc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cc0:	f383 8810 	msr	PRIMASK, r3
}
 8009cc4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8009cca:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8009ccc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cce:	673b      	str	r3, [r7, #112]	@ 0x70
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cd6:	f383 8810 	msr	PRIMASK, r3
}
 8009cda:	46c0      	nop			@ (mov r8, r8)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	689a      	ldr	r2, [r3, #8]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2140      	movs	r1, #64	@ 0x40
 8009ce8:	438a      	bics	r2, r1
 8009cea:	609a      	str	r2, [r3, #8]
 8009cec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009cee:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cf2:	f383 8810 	msr	PRIMASK, r3
}
 8009cf6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2280      	movs	r2, #128	@ 0x80
 8009cfc:	2120      	movs	r1, #32
 8009cfe:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2200      	movs	r2, #0
 8009d04:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d06:	f3ef 8310 	mrs	r3, PRIMASK
 8009d0a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8009d0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009d10:	2301      	movs	r3, #1
 8009d12:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009d16:	f383 8810 	msr	PRIMASK, r3
}
 8009d1a:	46c0      	nop			@ (mov r8, r8)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2110      	movs	r1, #16
 8009d28:	438a      	bics	r2, r1
 8009d2a:	601a      	str	r2, [r3, #0]
 8009d2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d32:	f383 8810 	msr	PRIMASK, r3
}
 8009d36:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d3c:	0018      	movs	r0, r3
 8009d3e:	f7fb f915 	bl	8004f6c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2202      	movs	r2, #2
 8009d46:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	22ac      	movs	r2, #172	@ 0xac
 8009d4c:	589b      	ldr	r3, [r3, r2]
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	2158      	movs	r1, #88	@ 0x58
 8009d52:	5a51      	ldrh	r1, [r2, r1]
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	205a      	movs	r0, #90	@ 0x5a
 8009d58:	5a12      	ldrh	r2, [r2, r0]
 8009d5a:	b292      	uxth	r2, r2
 8009d5c:	1a8a      	subs	r2, r1, r2
 8009d5e:	b291      	uxth	r1, r2
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	0010      	movs	r0, r2
 8009d64:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009d66:	e0c5      	b.n	8009ef4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2258      	movs	r2, #88	@ 0x58
 8009d6c:	5a99      	ldrh	r1, [r3, r2]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	225a      	movs	r2, #90	@ 0x5a
 8009d72:	5a9b      	ldrh	r3, [r3, r2]
 8009d74:	b29a      	uxth	r2, r3
 8009d76:	208e      	movs	r0, #142	@ 0x8e
 8009d78:	183b      	adds	r3, r7, r0
 8009d7a:	1a8a      	subs	r2, r1, r2
 8009d7c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	225a      	movs	r2, #90	@ 0x5a
 8009d82:	5a9b      	ldrh	r3, [r3, r2]
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d100      	bne.n	8009d8c <HAL_UART_IRQHandler+0x454>
 8009d8a:	e0b5      	b.n	8009ef8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8009d8c:	183b      	adds	r3, r7, r0
 8009d8e:	881b      	ldrh	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d100      	bne.n	8009d96 <HAL_UART_IRQHandler+0x45e>
 8009d94:	e0b0      	b.n	8009ef8 <HAL_UART_IRQHandler+0x5c0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d96:	f3ef 8310 	mrs	r3, PRIMASK
 8009d9a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d9e:	2488      	movs	r4, #136	@ 0x88
 8009da0:	193a      	adds	r2, r7, r4
 8009da2:	6013      	str	r3, [r2, #0]
 8009da4:	2301      	movs	r3, #1
 8009da6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	f383 8810 	msr	PRIMASK, r3
}
 8009dae:	46c0      	nop			@ (mov r8, r8)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4953      	ldr	r1, [pc, #332]	@ (8009f08 <HAL_UART_IRQHandler+0x5d0>)
 8009dbc:	400a      	ands	r2, r1
 8009dbe:	601a      	str	r2, [r3, #0]
 8009dc0:	193b      	adds	r3, r7, r4
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	f383 8810 	msr	PRIMASK, r3
}
 8009dcc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dce:	f3ef 8310 	mrs	r3, PRIMASK
 8009dd2:	61bb      	str	r3, [r7, #24]
  return(result);
 8009dd4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dd6:	2484      	movs	r4, #132	@ 0x84
 8009dd8:	193a      	adds	r2, r7, r4
 8009dda:	6013      	str	r3, [r2, #0]
 8009ddc:	2301      	movs	r3, #1
 8009dde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009de0:	69fb      	ldr	r3, [r7, #28]
 8009de2:	f383 8810 	msr	PRIMASK, r3
}
 8009de6:	46c0      	nop			@ (mov r8, r8)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	689a      	ldr	r2, [r3, #8]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2101      	movs	r1, #1
 8009df4:	438a      	bics	r2, r1
 8009df6:	609a      	str	r2, [r3, #8]
 8009df8:	193b      	adds	r3, r7, r4
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dfe:	6a3b      	ldr	r3, [r7, #32]
 8009e00:	f383 8810 	msr	PRIMASK, r3
}
 8009e04:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2280      	movs	r2, #128	@ 0x80
 8009e0a:	2120      	movs	r1, #32
 8009e0c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8009e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e22:	2480      	movs	r4, #128	@ 0x80
 8009e24:	193a      	adds	r2, r7, r4
 8009e26:	6013      	str	r3, [r2, #0]
 8009e28:	2301      	movs	r3, #1
 8009e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e2e:	f383 8810 	msr	PRIMASK, r3
}
 8009e32:	46c0      	nop			@ (mov r8, r8)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2110      	movs	r1, #16
 8009e40:	438a      	bics	r2, r1
 8009e42:	601a      	str	r2, [r3, #0]
 8009e44:	193b      	adds	r3, r7, r4
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e4c:	f383 8810 	msr	PRIMASK, r3
}
 8009e50:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2202      	movs	r2, #2
 8009e56:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	22ac      	movs	r2, #172	@ 0xac
 8009e5c:	589b      	ldr	r3, [r3, r2]
 8009e5e:	183a      	adds	r2, r7, r0
 8009e60:	8811      	ldrh	r1, [r2, #0]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	0010      	movs	r0, r2
 8009e66:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e68:	e046      	b.n	8009ef8 <HAL_UART_IRQHandler+0x5c0>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009e6a:	23a4      	movs	r3, #164	@ 0xa4
 8009e6c:	18fb      	adds	r3, r7, r3
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	2380      	movs	r3, #128	@ 0x80
 8009e72:	035b      	lsls	r3, r3, #13
 8009e74:	4013      	ands	r3, r2
 8009e76:	d012      	beq.n	8009e9e <HAL_UART_IRQHandler+0x566>
 8009e78:	239c      	movs	r3, #156	@ 0x9c
 8009e7a:	18fb      	adds	r3, r7, r3
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	2380      	movs	r3, #128	@ 0x80
 8009e80:	03db      	lsls	r3, r3, #15
 8009e82:	4013      	ands	r3, r2
 8009e84:	d00b      	beq.n	8009e9e <HAL_UART_IRQHandler+0x566>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2280      	movs	r2, #128	@ 0x80
 8009e8c:	0352      	lsls	r2, r2, #13
 8009e8e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	22a8      	movs	r2, #168	@ 0xa8
 8009e94:	589b      	ldr	r3, [r3, r2]
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	0010      	movs	r0, r2
 8009e9a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e9c:	e02f      	b.n	8009efe <HAL_UART_IRQHandler+0x5c6>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009e9e:	23a4      	movs	r3, #164	@ 0xa4
 8009ea0:	18fb      	adds	r3, r7, r3
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2280      	movs	r2, #128	@ 0x80
 8009ea6:	4013      	ands	r3, r2
 8009ea8:	d00f      	beq.n	8009eca <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009eaa:	23a0      	movs	r3, #160	@ 0xa0
 8009eac:	18fb      	adds	r3, r7, r3
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2280      	movs	r2, #128	@ 0x80
 8009eb2:	4013      	ands	r3, r2
 8009eb4:	d009      	beq.n	8009eca <HAL_UART_IRQHandler+0x592>
  {
    if (huart->TxISR != NULL)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d01e      	beq.n	8009efc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	0010      	movs	r0, r2
 8009ec6:	4798      	blx	r3
    }
    return;
 8009ec8:	e018      	b.n	8009efc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009eca:	23a4      	movs	r3, #164	@ 0xa4
 8009ecc:	18fb      	adds	r3, r7, r3
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2240      	movs	r2, #64	@ 0x40
 8009ed2:	4013      	ands	r3, r2
 8009ed4:	d013      	beq.n	8009efe <HAL_UART_IRQHandler+0x5c6>
 8009ed6:	23a0      	movs	r3, #160	@ 0xa0
 8009ed8:	18fb      	adds	r3, r7, r3
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2240      	movs	r2, #64	@ 0x40
 8009ede:	4013      	ands	r3, r2
 8009ee0:	d00d      	beq.n	8009efe <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	0018      	movs	r0, r3
 8009ee6:	f000 fee1 	bl	800acac <UART_EndTransmit_IT>
    return;
 8009eea:	e008      	b.n	8009efe <HAL_UART_IRQHandler+0x5c6>
      return;
 8009eec:	46c0      	nop			@ (mov r8, r8)
 8009eee:	e006      	b.n	8009efe <HAL_UART_IRQHandler+0x5c6>
    return;
 8009ef0:	46c0      	nop			@ (mov r8, r8)
 8009ef2:	e004      	b.n	8009efe <HAL_UART_IRQHandler+0x5c6>
      return;
 8009ef4:	46c0      	nop			@ (mov r8, r8)
 8009ef6:	e002      	b.n	8009efe <HAL_UART_IRQHandler+0x5c6>
      return;
 8009ef8:	46c0      	nop			@ (mov r8, r8)
 8009efa:	e000      	b.n	8009efe <HAL_UART_IRQHandler+0x5c6>
    return;
 8009efc:	46c0      	nop			@ (mov r8, r8)
  }

}
 8009efe:	46bd      	mov	sp, r7
 8009f00:	b02b      	add	sp, #172	@ 0xac
 8009f02:	bd90      	pop	{r4, r7, pc}
 8009f04:	fffffeff 	.word	0xfffffeff
 8009f08:	fffffedf 	.word	0xfffffedf

08009f0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009f14:	46c0      	nop			@ (mov r8, r8)
 8009f16:	46bd      	mov	sp, r7
 8009f18:	b002      	add	sp, #8
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009f24:	46c0      	nop			@ (mov r8, r8)
 8009f26:	46bd      	mov	sp, r7
 8009f28:	b002      	add	sp, #8
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009f34:	46c0      	nop			@ (mov r8, r8)
 8009f36:	46bd      	mov	sp, r7
 8009f38:	b002      	add	sp, #8
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009f44:	46c0      	nop			@ (mov r8, r8)
 8009f46:	46bd      	mov	sp, r7
 8009f48:	b002      	add	sp, #8
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009f54:	46c0      	nop			@ (mov r8, r8)
 8009f56:	46bd      	mov	sp, r7
 8009f58:	b002      	add	sp, #8
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009f64:	46c0      	nop			@ (mov r8, r8)
 8009f66:	46bd      	mov	sp, r7
 8009f68:	b002      	add	sp, #8
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009f74:	46c0      	nop			@ (mov r8, r8)
 8009f76:	46bd      	mov	sp, r7
 8009f78:	b002      	add	sp, #8
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009f84:	46c0      	nop			@ (mov r8, r8)
 8009f86:	46bd      	mov	sp, r7
 8009f88:	b002      	add	sp, #8
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2188      	movs	r1, #136	@ 0x88
 8009f98:	4a14      	ldr	r2, [pc, #80]	@ (8009fec <UART_InitCallbacksToDefault+0x60>)
 8009f9a:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	218c      	movs	r1, #140	@ 0x8c
 8009fa0:	4a13      	ldr	r2, [pc, #76]	@ (8009ff0 <UART_InitCallbacksToDefault+0x64>)
 8009fa2:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2190      	movs	r1, #144	@ 0x90
 8009fa8:	4a12      	ldr	r2, [pc, #72]	@ (8009ff4 <UART_InitCallbacksToDefault+0x68>)
 8009faa:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2194      	movs	r1, #148	@ 0x94
 8009fb0:	4a11      	ldr	r2, [pc, #68]	@ (8009ff8 <UART_InitCallbacksToDefault+0x6c>)
 8009fb2:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2198      	movs	r1, #152	@ 0x98
 8009fb8:	4a10      	ldr	r2, [pc, #64]	@ (8009ffc <UART_InitCallbacksToDefault+0x70>)
 8009fba:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	219c      	movs	r1, #156	@ 0x9c
 8009fc0:	4a0f      	ldr	r2, [pc, #60]	@ (800a000 <UART_InitCallbacksToDefault+0x74>)
 8009fc2:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	21a0      	movs	r1, #160	@ 0xa0
 8009fc8:	4a0e      	ldr	r2, [pc, #56]	@ (800a004 <UART_InitCallbacksToDefault+0x78>)
 8009fca:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	21a4      	movs	r1, #164	@ 0xa4
 8009fd0:	4a0d      	ldr	r2, [pc, #52]	@ (800a008 <UART_InitCallbacksToDefault+0x7c>)
 8009fd2:	505a      	str	r2, [r3, r1]
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	21a8      	movs	r1, #168	@ 0xa8
 8009fd8:	4a0c      	ldr	r2, [pc, #48]	@ (800a00c <UART_InitCallbacksToDefault+0x80>)
 8009fda:	505a      	str	r2, [r3, r1]
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	21ac      	movs	r1, #172	@ 0xac
 8009fe0:	4a0b      	ldr	r2, [pc, #44]	@ (800a010 <UART_InitCallbacksToDefault+0x84>)
 8009fe2:	505a      	str	r2, [r3, r1]

}
 8009fe4:	46c0      	nop			@ (mov r8, r8)
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	b002      	add	sp, #8
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	08009f1d 	.word	0x08009f1d
 8009ff0:	08009f0d 	.word	0x08009f0d
 8009ff4:	08009f3d 	.word	0x08009f3d
 8009ff8:	08009f2d 	.word	0x08009f2d
 8009ffc:	08009f4d 	.word	0x08009f4d
 800a000:	08009f5d 	.word	0x08009f5d
 800a004:	08009f6d 	.word	0x08009f6d
 800a008:	08009f7d 	.word	0x08009f7d
 800a00c:	0800ad07 	.word	0x0800ad07
 800a010:	08003bf1 	.word	0x08003bf1

0800a014 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b088      	sub	sp, #32
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a01c:	231e      	movs	r3, #30
 800a01e:	18fb      	adds	r3, r7, r3
 800a020:	2200      	movs	r2, #0
 800a022:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	689a      	ldr	r2, [r3, #8]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	691b      	ldr	r3, [r3, #16]
 800a02c:	431a      	orrs	r2, r3
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	695b      	ldr	r3, [r3, #20]
 800a032:	431a      	orrs	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	69db      	ldr	r3, [r3, #28]
 800a038:	4313      	orrs	r3, r2
 800a03a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4aaf      	ldr	r2, [pc, #700]	@ (800a300 <UART_SetConfig+0x2ec>)
 800a044:	4013      	ands	r3, r2
 800a046:	0019      	movs	r1, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	697a      	ldr	r2, [r7, #20]
 800a04e:	430a      	orrs	r2, r1
 800a050:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	4aaa      	ldr	r2, [pc, #680]	@ (800a304 <UART_SetConfig+0x2f0>)
 800a05a:	4013      	ands	r3, r2
 800a05c:	0019      	movs	r1, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	68da      	ldr	r2, [r3, #12]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	430a      	orrs	r2, r1
 800a068:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	699b      	ldr	r3, [r3, #24]
 800a06e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a1b      	ldr	r3, [r3, #32]
 800a074:	697a      	ldr	r2, [r7, #20]
 800a076:	4313      	orrs	r3, r2
 800a078:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	4aa1      	ldr	r2, [pc, #644]	@ (800a308 <UART_SetConfig+0x2f4>)
 800a082:	4013      	ands	r3, r2
 800a084:	0019      	movs	r1, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	697a      	ldr	r2, [r7, #20]
 800a08c:	430a      	orrs	r2, r1
 800a08e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a9d      	ldr	r2, [pc, #628]	@ (800a30c <UART_SetConfig+0x2f8>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d127      	bne.n	800a0ea <UART_SetConfig+0xd6>
 800a09a:	4b9d      	ldr	r3, [pc, #628]	@ (800a310 <UART_SetConfig+0x2fc>)
 800a09c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a09e:	2203      	movs	r2, #3
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	2b03      	cmp	r3, #3
 800a0a4:	d00d      	beq.n	800a0c2 <UART_SetConfig+0xae>
 800a0a6:	d81b      	bhi.n	800a0e0 <UART_SetConfig+0xcc>
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d014      	beq.n	800a0d6 <UART_SetConfig+0xc2>
 800a0ac:	d818      	bhi.n	800a0e0 <UART_SetConfig+0xcc>
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d002      	beq.n	800a0b8 <UART_SetConfig+0xa4>
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d00a      	beq.n	800a0cc <UART_SetConfig+0xb8>
 800a0b6:	e013      	b.n	800a0e0 <UART_SetConfig+0xcc>
 800a0b8:	231f      	movs	r3, #31
 800a0ba:	18fb      	adds	r3, r7, r3
 800a0bc:	2200      	movs	r2, #0
 800a0be:	701a      	strb	r2, [r3, #0]
 800a0c0:	e065      	b.n	800a18e <UART_SetConfig+0x17a>
 800a0c2:	231f      	movs	r3, #31
 800a0c4:	18fb      	adds	r3, r7, r3
 800a0c6:	2202      	movs	r2, #2
 800a0c8:	701a      	strb	r2, [r3, #0]
 800a0ca:	e060      	b.n	800a18e <UART_SetConfig+0x17a>
 800a0cc:	231f      	movs	r3, #31
 800a0ce:	18fb      	adds	r3, r7, r3
 800a0d0:	2204      	movs	r2, #4
 800a0d2:	701a      	strb	r2, [r3, #0]
 800a0d4:	e05b      	b.n	800a18e <UART_SetConfig+0x17a>
 800a0d6:	231f      	movs	r3, #31
 800a0d8:	18fb      	adds	r3, r7, r3
 800a0da:	2208      	movs	r2, #8
 800a0dc:	701a      	strb	r2, [r3, #0]
 800a0de:	e056      	b.n	800a18e <UART_SetConfig+0x17a>
 800a0e0:	231f      	movs	r3, #31
 800a0e2:	18fb      	adds	r3, r7, r3
 800a0e4:	2210      	movs	r2, #16
 800a0e6:	701a      	strb	r2, [r3, #0]
 800a0e8:	e051      	b.n	800a18e <UART_SetConfig+0x17a>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a89      	ldr	r2, [pc, #548]	@ (800a314 <UART_SetConfig+0x300>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d134      	bne.n	800a15e <UART_SetConfig+0x14a>
 800a0f4:	4b86      	ldr	r3, [pc, #536]	@ (800a310 <UART_SetConfig+0x2fc>)
 800a0f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0f8:	23c0      	movs	r3, #192	@ 0xc0
 800a0fa:	029b      	lsls	r3, r3, #10
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	22c0      	movs	r2, #192	@ 0xc0
 800a100:	0292      	lsls	r2, r2, #10
 800a102:	4293      	cmp	r3, r2
 800a104:	d017      	beq.n	800a136 <UART_SetConfig+0x122>
 800a106:	22c0      	movs	r2, #192	@ 0xc0
 800a108:	0292      	lsls	r2, r2, #10
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d822      	bhi.n	800a154 <UART_SetConfig+0x140>
 800a10e:	2280      	movs	r2, #128	@ 0x80
 800a110:	0292      	lsls	r2, r2, #10
 800a112:	4293      	cmp	r3, r2
 800a114:	d019      	beq.n	800a14a <UART_SetConfig+0x136>
 800a116:	2280      	movs	r2, #128	@ 0x80
 800a118:	0292      	lsls	r2, r2, #10
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d81a      	bhi.n	800a154 <UART_SetConfig+0x140>
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d004      	beq.n	800a12c <UART_SetConfig+0x118>
 800a122:	2280      	movs	r2, #128	@ 0x80
 800a124:	0252      	lsls	r2, r2, #9
 800a126:	4293      	cmp	r3, r2
 800a128:	d00a      	beq.n	800a140 <UART_SetConfig+0x12c>
 800a12a:	e013      	b.n	800a154 <UART_SetConfig+0x140>
 800a12c:	231f      	movs	r3, #31
 800a12e:	18fb      	adds	r3, r7, r3
 800a130:	2200      	movs	r2, #0
 800a132:	701a      	strb	r2, [r3, #0]
 800a134:	e02b      	b.n	800a18e <UART_SetConfig+0x17a>
 800a136:	231f      	movs	r3, #31
 800a138:	18fb      	adds	r3, r7, r3
 800a13a:	2202      	movs	r2, #2
 800a13c:	701a      	strb	r2, [r3, #0]
 800a13e:	e026      	b.n	800a18e <UART_SetConfig+0x17a>
 800a140:	231f      	movs	r3, #31
 800a142:	18fb      	adds	r3, r7, r3
 800a144:	2204      	movs	r2, #4
 800a146:	701a      	strb	r2, [r3, #0]
 800a148:	e021      	b.n	800a18e <UART_SetConfig+0x17a>
 800a14a:	231f      	movs	r3, #31
 800a14c:	18fb      	adds	r3, r7, r3
 800a14e:	2208      	movs	r2, #8
 800a150:	701a      	strb	r2, [r3, #0]
 800a152:	e01c      	b.n	800a18e <UART_SetConfig+0x17a>
 800a154:	231f      	movs	r3, #31
 800a156:	18fb      	adds	r3, r7, r3
 800a158:	2210      	movs	r2, #16
 800a15a:	701a      	strb	r2, [r3, #0]
 800a15c:	e017      	b.n	800a18e <UART_SetConfig+0x17a>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a6d      	ldr	r2, [pc, #436]	@ (800a318 <UART_SetConfig+0x304>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d104      	bne.n	800a172 <UART_SetConfig+0x15e>
 800a168:	231f      	movs	r3, #31
 800a16a:	18fb      	adds	r3, r7, r3
 800a16c:	2200      	movs	r2, #0
 800a16e:	701a      	strb	r2, [r3, #0]
 800a170:	e00d      	b.n	800a18e <UART_SetConfig+0x17a>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a69      	ldr	r2, [pc, #420]	@ (800a31c <UART_SetConfig+0x308>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d104      	bne.n	800a186 <UART_SetConfig+0x172>
 800a17c:	231f      	movs	r3, #31
 800a17e:	18fb      	adds	r3, r7, r3
 800a180:	2200      	movs	r2, #0
 800a182:	701a      	strb	r2, [r3, #0]
 800a184:	e003      	b.n	800a18e <UART_SetConfig+0x17a>
 800a186:	231f      	movs	r3, #31
 800a188:	18fb      	adds	r3, r7, r3
 800a18a:	2210      	movs	r2, #16
 800a18c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	69da      	ldr	r2, [r3, #28]
 800a192:	2380      	movs	r3, #128	@ 0x80
 800a194:	021b      	lsls	r3, r3, #8
 800a196:	429a      	cmp	r2, r3
 800a198:	d15c      	bne.n	800a254 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 800a19a:	231f      	movs	r3, #31
 800a19c:	18fb      	adds	r3, r7, r3
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	2b08      	cmp	r3, #8
 800a1a2:	d015      	beq.n	800a1d0 <UART_SetConfig+0x1bc>
 800a1a4:	dc18      	bgt.n	800a1d8 <UART_SetConfig+0x1c4>
 800a1a6:	2b04      	cmp	r3, #4
 800a1a8:	d00d      	beq.n	800a1c6 <UART_SetConfig+0x1b2>
 800a1aa:	dc15      	bgt.n	800a1d8 <UART_SetConfig+0x1c4>
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d002      	beq.n	800a1b6 <UART_SetConfig+0x1a2>
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d005      	beq.n	800a1c0 <UART_SetConfig+0x1ac>
 800a1b4:	e010      	b.n	800a1d8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1b6:	f7fd fd39 	bl	8007c2c <HAL_RCC_GetPCLK1Freq>
 800a1ba:	0003      	movs	r3, r0
 800a1bc:	61bb      	str	r3, [r7, #24]
        break;
 800a1be:	e012      	b.n	800a1e6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a1c0:	4b57      	ldr	r3, [pc, #348]	@ (800a320 <UART_SetConfig+0x30c>)
 800a1c2:	61bb      	str	r3, [r7, #24]
        break;
 800a1c4:	e00f      	b.n	800a1e6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a1c6:	f7fd fcb5 	bl	8007b34 <HAL_RCC_GetSysClockFreq>
 800a1ca:	0003      	movs	r3, r0
 800a1cc:	61bb      	str	r3, [r7, #24]
        break;
 800a1ce:	e00a      	b.n	800a1e6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1d0:	2380      	movs	r3, #128	@ 0x80
 800a1d2:	021b      	lsls	r3, r3, #8
 800a1d4:	61bb      	str	r3, [r7, #24]
        break;
 800a1d6:	e006      	b.n	800a1e6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a1dc:	231e      	movs	r3, #30
 800a1de:	18fb      	adds	r3, r7, r3
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	701a      	strb	r2, [r3, #0]
        break;
 800a1e4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d100      	bne.n	800a1ee <UART_SetConfig+0x1da>
 800a1ec:	e07a      	b.n	800a2e4 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	005a      	lsls	r2, r3, #1
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	085b      	lsrs	r3, r3, #1
 800a1f8:	18d2      	adds	r2, r2, r3
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	0019      	movs	r1, r3
 800a200:	0010      	movs	r0, r2
 800a202:	f7f5 ff9d 	bl	8000140 <__udivsi3>
 800a206:	0003      	movs	r3, r0
 800a208:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	2b0f      	cmp	r3, #15
 800a20e:	d91c      	bls.n	800a24a <UART_SetConfig+0x236>
 800a210:	693a      	ldr	r2, [r7, #16]
 800a212:	2380      	movs	r3, #128	@ 0x80
 800a214:	025b      	lsls	r3, r3, #9
 800a216:	429a      	cmp	r2, r3
 800a218:	d217      	bcs.n	800a24a <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	b29a      	uxth	r2, r3
 800a21e:	200e      	movs	r0, #14
 800a220:	183b      	adds	r3, r7, r0
 800a222:	210f      	movs	r1, #15
 800a224:	438a      	bics	r2, r1
 800a226:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	085b      	lsrs	r3, r3, #1
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	2207      	movs	r2, #7
 800a230:	4013      	ands	r3, r2
 800a232:	b299      	uxth	r1, r3
 800a234:	183b      	adds	r3, r7, r0
 800a236:	183a      	adds	r2, r7, r0
 800a238:	8812      	ldrh	r2, [r2, #0]
 800a23a:	430a      	orrs	r2, r1
 800a23c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	183a      	adds	r2, r7, r0
 800a244:	8812      	ldrh	r2, [r2, #0]
 800a246:	60da      	str	r2, [r3, #12]
 800a248:	e04c      	b.n	800a2e4 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800a24a:	231e      	movs	r3, #30
 800a24c:	18fb      	adds	r3, r7, r3
 800a24e:	2201      	movs	r2, #1
 800a250:	701a      	strb	r2, [r3, #0]
 800a252:	e047      	b.n	800a2e4 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a254:	231f      	movs	r3, #31
 800a256:	18fb      	adds	r3, r7, r3
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	2b08      	cmp	r3, #8
 800a25c:	d015      	beq.n	800a28a <UART_SetConfig+0x276>
 800a25e:	dc18      	bgt.n	800a292 <UART_SetConfig+0x27e>
 800a260:	2b04      	cmp	r3, #4
 800a262:	d00d      	beq.n	800a280 <UART_SetConfig+0x26c>
 800a264:	dc15      	bgt.n	800a292 <UART_SetConfig+0x27e>
 800a266:	2b00      	cmp	r3, #0
 800a268:	d002      	beq.n	800a270 <UART_SetConfig+0x25c>
 800a26a:	2b02      	cmp	r3, #2
 800a26c:	d005      	beq.n	800a27a <UART_SetConfig+0x266>
 800a26e:	e010      	b.n	800a292 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a270:	f7fd fcdc 	bl	8007c2c <HAL_RCC_GetPCLK1Freq>
 800a274:	0003      	movs	r3, r0
 800a276:	61bb      	str	r3, [r7, #24]
        break;
 800a278:	e012      	b.n	800a2a0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a27a:	4b29      	ldr	r3, [pc, #164]	@ (800a320 <UART_SetConfig+0x30c>)
 800a27c:	61bb      	str	r3, [r7, #24]
        break;
 800a27e:	e00f      	b.n	800a2a0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a280:	f7fd fc58 	bl	8007b34 <HAL_RCC_GetSysClockFreq>
 800a284:	0003      	movs	r3, r0
 800a286:	61bb      	str	r3, [r7, #24]
        break;
 800a288:	e00a      	b.n	800a2a0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a28a:	2380      	movs	r3, #128	@ 0x80
 800a28c:	021b      	lsls	r3, r3, #8
 800a28e:	61bb      	str	r3, [r7, #24]
        break;
 800a290:	e006      	b.n	800a2a0 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 800a292:	2300      	movs	r3, #0
 800a294:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a296:	231e      	movs	r3, #30
 800a298:	18fb      	adds	r3, r7, r3
 800a29a:	2201      	movs	r2, #1
 800a29c:	701a      	strb	r2, [r3, #0]
        break;
 800a29e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d01e      	beq.n	800a2e4 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	085a      	lsrs	r2, r3, #1
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	18d2      	adds	r2, r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	0019      	movs	r1, r3
 800a2b6:	0010      	movs	r0, r2
 800a2b8:	f7f5 ff42 	bl	8000140 <__udivsi3>
 800a2bc:	0003      	movs	r3, r0
 800a2be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	2b0f      	cmp	r3, #15
 800a2c4:	d90a      	bls.n	800a2dc <UART_SetConfig+0x2c8>
 800a2c6:	693a      	ldr	r2, [r7, #16]
 800a2c8:	2380      	movs	r3, #128	@ 0x80
 800a2ca:	025b      	lsls	r3, r3, #9
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d205      	bcs.n	800a2dc <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	b29a      	uxth	r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	60da      	str	r2, [r3, #12]
 800a2da:	e003      	b.n	800a2e4 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800a2dc:	231e      	movs	r3, #30
 800a2de:	18fb      	adds	r3, r7, r3
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a2f0:	231e      	movs	r3, #30
 800a2f2:	18fb      	adds	r3, r7, r3
 800a2f4:	781b      	ldrb	r3, [r3, #0]
}
 800a2f6:	0018      	movs	r0, r3
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	b008      	add	sp, #32
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	46c0      	nop			@ (mov r8, r8)
 800a300:	efff69f3 	.word	0xefff69f3
 800a304:	ffffcfff 	.word	0xffffcfff
 800a308:	fffff4ff 	.word	0xfffff4ff
 800a30c:	40013800 	.word	0x40013800
 800a310:	40021000 	.word	0x40021000
 800a314:	40004400 	.word	0x40004400
 800a318:	40004800 	.word	0x40004800
 800a31c:	40004c00 	.word	0x40004c00
 800a320:	007a1200 	.word	0x007a1200

0800a324 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a330:	2208      	movs	r2, #8
 800a332:	4013      	ands	r3, r2
 800a334:	d00b      	beq.n	800a34e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	4a4a      	ldr	r2, [pc, #296]	@ (800a468 <UART_AdvFeatureConfig+0x144>)
 800a33e:	4013      	ands	r3, r2
 800a340:	0019      	movs	r1, r3
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	430a      	orrs	r2, r1
 800a34c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a352:	2201      	movs	r2, #1
 800a354:	4013      	ands	r3, r2
 800a356:	d00b      	beq.n	800a370 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	4a43      	ldr	r2, [pc, #268]	@ (800a46c <UART_AdvFeatureConfig+0x148>)
 800a360:	4013      	ands	r3, r2
 800a362:	0019      	movs	r1, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	430a      	orrs	r2, r1
 800a36e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a374:	2202      	movs	r2, #2
 800a376:	4013      	ands	r3, r2
 800a378:	d00b      	beq.n	800a392 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	4a3b      	ldr	r2, [pc, #236]	@ (800a470 <UART_AdvFeatureConfig+0x14c>)
 800a382:	4013      	ands	r3, r2
 800a384:	0019      	movs	r1, r3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	430a      	orrs	r2, r1
 800a390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a396:	2204      	movs	r2, #4
 800a398:	4013      	ands	r3, r2
 800a39a:	d00b      	beq.n	800a3b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	4a34      	ldr	r2, [pc, #208]	@ (800a474 <UART_AdvFeatureConfig+0x150>)
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	0019      	movs	r1, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	430a      	orrs	r2, r1
 800a3b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3b8:	2210      	movs	r2, #16
 800a3ba:	4013      	ands	r3, r2
 800a3bc:	d00b      	beq.n	800a3d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	4a2c      	ldr	r2, [pc, #176]	@ (800a478 <UART_AdvFeatureConfig+0x154>)
 800a3c6:	4013      	ands	r3, r2
 800a3c8:	0019      	movs	r1, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	430a      	orrs	r2, r1
 800a3d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3da:	2220      	movs	r2, #32
 800a3dc:	4013      	ands	r3, r2
 800a3de:	d00b      	beq.n	800a3f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	4a25      	ldr	r2, [pc, #148]	@ (800a47c <UART_AdvFeatureConfig+0x158>)
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	0019      	movs	r1, r3
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	430a      	orrs	r2, r1
 800a3f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3fc:	2240      	movs	r2, #64	@ 0x40
 800a3fe:	4013      	ands	r3, r2
 800a400:	d01d      	beq.n	800a43e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	4a1d      	ldr	r2, [pc, #116]	@ (800a480 <UART_AdvFeatureConfig+0x15c>)
 800a40a:	4013      	ands	r3, r2
 800a40c:	0019      	movs	r1, r3
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	430a      	orrs	r2, r1
 800a418:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a41e:	2380      	movs	r3, #128	@ 0x80
 800a420:	035b      	lsls	r3, r3, #13
 800a422:	429a      	cmp	r2, r3
 800a424:	d10b      	bne.n	800a43e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	4a15      	ldr	r2, [pc, #84]	@ (800a484 <UART_AdvFeatureConfig+0x160>)
 800a42e:	4013      	ands	r3, r2
 800a430:	0019      	movs	r1, r3
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	430a      	orrs	r2, r1
 800a43c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a442:	2280      	movs	r2, #128	@ 0x80
 800a444:	4013      	ands	r3, r2
 800a446:	d00b      	beq.n	800a460 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	4a0e      	ldr	r2, [pc, #56]	@ (800a488 <UART_AdvFeatureConfig+0x164>)
 800a450:	4013      	ands	r3, r2
 800a452:	0019      	movs	r1, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	430a      	orrs	r2, r1
 800a45e:	605a      	str	r2, [r3, #4]
  }
}
 800a460:	46c0      	nop			@ (mov r8, r8)
 800a462:	46bd      	mov	sp, r7
 800a464:	b002      	add	sp, #8
 800a466:	bd80      	pop	{r7, pc}
 800a468:	ffff7fff 	.word	0xffff7fff
 800a46c:	fffdffff 	.word	0xfffdffff
 800a470:	fffeffff 	.word	0xfffeffff
 800a474:	fffbffff 	.word	0xfffbffff
 800a478:	ffffefff 	.word	0xffffefff
 800a47c:	ffffdfff 	.word	0xffffdfff
 800a480:	ffefffff 	.word	0xffefffff
 800a484:	ff9fffff 	.word	0xff9fffff
 800a488:	fff7ffff 	.word	0xfff7ffff

0800a48c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b092      	sub	sp, #72	@ 0x48
 800a490:	af02      	add	r7, sp, #8
 800a492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2284      	movs	r2, #132	@ 0x84
 800a498:	2100      	movs	r1, #0
 800a49a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a49c:	f7f9 ffb0 	bl	8004400 <HAL_GetTick>
 800a4a0:	0003      	movs	r3, r0
 800a4a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2208      	movs	r2, #8
 800a4ac:	4013      	ands	r3, r2
 800a4ae:	2b08      	cmp	r3, #8
 800a4b0:	d12c      	bne.n	800a50c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4b4:	2280      	movs	r2, #128	@ 0x80
 800a4b6:	0391      	lsls	r1, r2, #14
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	4a46      	ldr	r2, [pc, #280]	@ (800a5d4 <UART_CheckIdleState+0x148>)
 800a4bc:	9200      	str	r2, [sp, #0]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f000 f88c 	bl	800a5dc <UART_WaitOnFlagUntilTimeout>
 800a4c4:	1e03      	subs	r3, r0, #0
 800a4c6:	d021      	beq.n	800a50c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4c8:	f3ef 8310 	mrs	r3, PRIMASK
 800a4cc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800a4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a4d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d8:	f383 8810 	msr	PRIMASK, r3
}
 800a4dc:	46c0      	nop			@ (mov r8, r8)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2180      	movs	r1, #128	@ 0x80
 800a4ea:	438a      	bics	r2, r1
 800a4ec:	601a      	str	r2, [r3, #0]
 800a4ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f4:	f383 8810 	msr	PRIMASK, r3
}
 800a4f8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2220      	movs	r2, #32
 800a4fe:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2278      	movs	r2, #120	@ 0x78
 800a504:	2100      	movs	r1, #0
 800a506:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a508:	2303      	movs	r3, #3
 800a50a:	e05f      	b.n	800a5cc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	2204      	movs	r2, #4
 800a514:	4013      	ands	r3, r2
 800a516:	2b04      	cmp	r3, #4
 800a518:	d146      	bne.n	800a5a8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a51a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a51c:	2280      	movs	r2, #128	@ 0x80
 800a51e:	03d1      	lsls	r1, r2, #15
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	4a2c      	ldr	r2, [pc, #176]	@ (800a5d4 <UART_CheckIdleState+0x148>)
 800a524:	9200      	str	r2, [sp, #0]
 800a526:	2200      	movs	r2, #0
 800a528:	f000 f858 	bl	800a5dc <UART_WaitOnFlagUntilTimeout>
 800a52c:	1e03      	subs	r3, r0, #0
 800a52e:	d03b      	beq.n	800a5a8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a530:	f3ef 8310 	mrs	r3, PRIMASK
 800a534:	60fb      	str	r3, [r7, #12]
  return(result);
 800a536:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a538:	637b      	str	r3, [r7, #52]	@ 0x34
 800a53a:	2301      	movs	r3, #1
 800a53c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	f383 8810 	msr	PRIMASK, r3
}
 800a544:	46c0      	nop			@ (mov r8, r8)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4921      	ldr	r1, [pc, #132]	@ (800a5d8 <UART_CheckIdleState+0x14c>)
 800a552:	400a      	ands	r2, r1
 800a554:	601a      	str	r2, [r3, #0]
 800a556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a558:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	f383 8810 	msr	PRIMASK, r3
}
 800a560:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a562:	f3ef 8310 	mrs	r3, PRIMASK
 800a566:	61bb      	str	r3, [r7, #24]
  return(result);
 800a568:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a56a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a56c:	2301      	movs	r3, #1
 800a56e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	f383 8810 	msr	PRIMASK, r3
}
 800a576:	46c0      	nop			@ (mov r8, r8)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	689a      	ldr	r2, [r3, #8]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2101      	movs	r1, #1
 800a584:	438a      	bics	r2, r1
 800a586:	609a      	str	r2, [r3, #8]
 800a588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a58a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a58c:	6a3b      	ldr	r3, [r7, #32]
 800a58e:	f383 8810 	msr	PRIMASK, r3
}
 800a592:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2280      	movs	r2, #128	@ 0x80
 800a598:	2120      	movs	r1, #32
 800a59a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2278      	movs	r2, #120	@ 0x78
 800a5a0:	2100      	movs	r1, #0
 800a5a2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5a4:	2303      	movs	r3, #3
 800a5a6:	e011      	b.n	800a5cc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2220      	movs	r2, #32
 800a5ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2280      	movs	r2, #128	@ 0x80
 800a5b2:	2120      	movs	r1, #32
 800a5b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2278      	movs	r2, #120	@ 0x78
 800a5c6:	2100      	movs	r1, #0
 800a5c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	0018      	movs	r0, r3
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	b010      	add	sp, #64	@ 0x40
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	01ffffff 	.word	0x01ffffff
 800a5d8:	fffffedf 	.word	0xfffffedf

0800a5dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	603b      	str	r3, [r7, #0]
 800a5e8:	1dfb      	adds	r3, r7, #7
 800a5ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5ec:	e051      	b.n	800a692 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	d04e      	beq.n	800a692 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5f4:	f7f9 ff04 	bl	8004400 <HAL_GetTick>
 800a5f8:	0002      	movs	r2, r0
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	1ad3      	subs	r3, r2, r3
 800a5fe:	69ba      	ldr	r2, [r7, #24]
 800a600:	429a      	cmp	r2, r3
 800a602:	d302      	bcc.n	800a60a <UART_WaitOnFlagUntilTimeout+0x2e>
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d101      	bne.n	800a60e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800a60a:	2303      	movs	r3, #3
 800a60c:	e051      	b.n	800a6b2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2204      	movs	r2, #4
 800a616:	4013      	ands	r3, r2
 800a618:	d03b      	beq.n	800a692 <UART_WaitOnFlagUntilTimeout+0xb6>
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	2b80      	cmp	r3, #128	@ 0x80
 800a61e:	d038      	beq.n	800a692 <UART_WaitOnFlagUntilTimeout+0xb6>
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	2b40      	cmp	r3, #64	@ 0x40
 800a624:	d035      	beq.n	800a692 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	69db      	ldr	r3, [r3, #28]
 800a62c:	2208      	movs	r2, #8
 800a62e:	4013      	ands	r3, r2
 800a630:	2b08      	cmp	r3, #8
 800a632:	d111      	bne.n	800a658 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	2208      	movs	r2, #8
 800a63a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	0018      	movs	r0, r3
 800a640:	f000 f900 	bl	800a844 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2284      	movs	r2, #132	@ 0x84
 800a648:	2108      	movs	r1, #8
 800a64a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2278      	movs	r2, #120	@ 0x78
 800a650:	2100      	movs	r1, #0
 800a652:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	e02c      	b.n	800a6b2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	69da      	ldr	r2, [r3, #28]
 800a65e:	2380      	movs	r3, #128	@ 0x80
 800a660:	011b      	lsls	r3, r3, #4
 800a662:	401a      	ands	r2, r3
 800a664:	2380      	movs	r3, #128	@ 0x80
 800a666:	011b      	lsls	r3, r3, #4
 800a668:	429a      	cmp	r2, r3
 800a66a:	d112      	bne.n	800a692 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2280      	movs	r2, #128	@ 0x80
 800a672:	0112      	lsls	r2, r2, #4
 800a674:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	0018      	movs	r0, r3
 800a67a:	f000 f8e3 	bl	800a844 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2284      	movs	r2, #132	@ 0x84
 800a682:	2120      	movs	r1, #32
 800a684:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2278      	movs	r2, #120	@ 0x78
 800a68a:	2100      	movs	r1, #0
 800a68c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a68e:	2303      	movs	r3, #3
 800a690:	e00f      	b.n	800a6b2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	69db      	ldr	r3, [r3, #28]
 800a698:	68ba      	ldr	r2, [r7, #8]
 800a69a:	4013      	ands	r3, r2
 800a69c:	68ba      	ldr	r2, [r7, #8]
 800a69e:	1ad3      	subs	r3, r2, r3
 800a6a0:	425a      	negs	r2, r3
 800a6a2:	4153      	adcs	r3, r2
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	001a      	movs	r2, r3
 800a6a8:	1dfb      	adds	r3, r7, #7
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d09e      	beq.n	800a5ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6b0:	2300      	movs	r3, #0
}
 800a6b2:	0018      	movs	r0, r3
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	b004      	add	sp, #16
 800a6b8:	bd80      	pop	{r7, pc}
	...

0800a6bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b090      	sub	sp, #64	@ 0x40
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	1dbb      	adds	r3, r7, #6
 800a6c8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	1dba      	adds	r2, r7, #6
 800a6d4:	2158      	movs	r1, #88	@ 0x58
 800a6d6:	8812      	ldrh	r2, [r2, #0]
 800a6d8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2284      	movs	r2, #132	@ 0x84
 800a6de:	2100      	movs	r1, #0
 800a6e0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2280      	movs	r2, #128	@ 0x80
 800a6e6:	2122      	movs	r1, #34	@ 0x22
 800a6e8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d028      	beq.n	800a744 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6f6:	4a3e      	ldr	r2, [pc, #248]	@ (800a7f0 <UART_Start_Receive_DMA+0x134>)
 800a6f8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6fe:	4a3d      	ldr	r2, [pc, #244]	@ (800a7f4 <UART_Start_Receive_DMA+0x138>)
 800a700:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a706:	4a3c      	ldr	r2, [pc, #240]	@ (800a7f8 <UART_Start_Receive_DMA+0x13c>)
 800a708:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a70e:	2200      	movs	r2, #0
 800a710:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	3324      	adds	r3, #36	@ 0x24
 800a71c:	0019      	movs	r1, r3
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a722:	001a      	movs	r2, r3
 800a724:	1dbb      	adds	r3, r7, #6
 800a726:	881b      	ldrh	r3, [r3, #0]
 800a728:	f7fa fbba 	bl	8004ea0 <HAL_DMA_Start_IT>
 800a72c:	1e03      	subs	r3, r0, #0
 800a72e:	d009      	beq.n	800a744 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2284      	movs	r2, #132	@ 0x84
 800a734:	2110      	movs	r1, #16
 800a736:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2280      	movs	r2, #128	@ 0x80
 800a73c:	2120      	movs	r1, #32
 800a73e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800a740:	2301      	movs	r3, #1
 800a742:	e050      	b.n	800a7e6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	691b      	ldr	r3, [r3, #16]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d019      	beq.n	800a780 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a74c:	f3ef 8310 	mrs	r3, PRIMASK
 800a750:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800a752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a754:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a756:	2301      	movs	r3, #1
 800a758:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a75c:	f383 8810 	msr	PRIMASK, r3
}
 800a760:	46c0      	nop			@ (mov r8, r8)
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2180      	movs	r1, #128	@ 0x80
 800a76e:	0049      	lsls	r1, r1, #1
 800a770:	430a      	orrs	r2, r1
 800a772:	601a      	str	r2, [r3, #0]
 800a774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a776:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a77a:	f383 8810 	msr	PRIMASK, r3
}
 800a77e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a780:	f3ef 8310 	mrs	r3, PRIMASK
 800a784:	613b      	str	r3, [r7, #16]
  return(result);
 800a786:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a788:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a78a:	2301      	movs	r3, #1
 800a78c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	f383 8810 	msr	PRIMASK, r3
}
 800a794:	46c0      	nop			@ (mov r8, r8)
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	689a      	ldr	r2, [r3, #8]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2101      	movs	r1, #1
 800a7a2:	430a      	orrs	r2, r1
 800a7a4:	609a      	str	r2, [r3, #8]
 800a7a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7aa:	69bb      	ldr	r3, [r7, #24]
 800a7ac:	f383 8810 	msr	PRIMASK, r3
}
 800a7b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7b2:	f3ef 8310 	mrs	r3, PRIMASK
 800a7b6:	61fb      	str	r3, [r7, #28]
  return(result);
 800a7b8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7bc:	2301      	movs	r3, #1
 800a7be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7c0:	6a3b      	ldr	r3, [r7, #32]
 800a7c2:	f383 8810 	msr	PRIMASK, r3
}
 800a7c6:	46c0      	nop			@ (mov r8, r8)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	689a      	ldr	r2, [r3, #8]
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	2140      	movs	r1, #64	@ 0x40
 800a7d4:	430a      	orrs	r2, r1
 800a7d6:	609a      	str	r2, [r3, #8]
 800a7d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7da:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7de:	f383 8810 	msr	PRIMASK, r3
}
 800a7e2:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	0018      	movs	r0, r3
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	b010      	add	sp, #64	@ 0x40
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	46c0      	nop			@ (mov r8, r8)
 800a7f0:	0800a90d 	.word	0x0800a90d
 800a7f4:	0800aa3d 	.word	0x0800aa3d
 800a7f8:	0800aa85 	.word	0x0800aa85

0800a7fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b086      	sub	sp, #24
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a804:	f3ef 8310 	mrs	r3, PRIMASK
 800a808:	60bb      	str	r3, [r7, #8]
  return(result);
 800a80a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a80c:	617b      	str	r3, [r7, #20]
 800a80e:	2301      	movs	r3, #1
 800a810:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f383 8810 	msr	PRIMASK, r3
}
 800a818:	46c0      	nop			@ (mov r8, r8)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	21c0      	movs	r1, #192	@ 0xc0
 800a826:	438a      	bics	r2, r1
 800a828:	601a      	str	r2, [r3, #0]
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	f383 8810 	msr	PRIMASK, r3
}
 800a834:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2220      	movs	r2, #32
 800a83a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800a83c:	46c0      	nop			@ (mov r8, r8)
 800a83e:	46bd      	mov	sp, r7
 800a840:	b006      	add	sp, #24
 800a842:	bd80      	pop	{r7, pc}

0800a844 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b08e      	sub	sp, #56	@ 0x38
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a84c:	f3ef 8310 	mrs	r3, PRIMASK
 800a850:	617b      	str	r3, [r7, #20]
  return(result);
 800a852:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a854:	637b      	str	r3, [r7, #52]	@ 0x34
 800a856:	2301      	movs	r3, #1
 800a858:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	f383 8810 	msr	PRIMASK, r3
}
 800a860:	46c0      	nop			@ (mov r8, r8)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4926      	ldr	r1, [pc, #152]	@ (800a908 <UART_EndRxTransfer+0xc4>)
 800a86e:	400a      	ands	r2, r1
 800a870:	601a      	str	r2, [r3, #0]
 800a872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a874:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	f383 8810 	msr	PRIMASK, r3
}
 800a87c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a87e:	f3ef 8310 	mrs	r3, PRIMASK
 800a882:	623b      	str	r3, [r7, #32]
  return(result);
 800a884:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a886:	633b      	str	r3, [r7, #48]	@ 0x30
 800a888:	2301      	movs	r3, #1
 800a88a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88e:	f383 8810 	msr	PRIMASK, r3
}
 800a892:	46c0      	nop			@ (mov r8, r8)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	689a      	ldr	r2, [r3, #8]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	2101      	movs	r1, #1
 800a8a0:	438a      	bics	r2, r1
 800a8a2:	609a      	str	r2, [r3, #8]
 800a8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8aa:	f383 8810 	msr	PRIMASK, r3
}
 800a8ae:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d118      	bne.n	800a8ea <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8b8:	f3ef 8310 	mrs	r3, PRIMASK
 800a8bc:	60bb      	str	r3, [r7, #8]
  return(result);
 800a8be:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f383 8810 	msr	PRIMASK, r3
}
 800a8cc:	46c0      	nop			@ (mov r8, r8)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	681a      	ldr	r2, [r3, #0]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2110      	movs	r1, #16
 800a8da:	438a      	bics	r2, r1
 800a8dc:	601a      	str	r2, [r3, #0]
 800a8de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	f383 8810 	msr	PRIMASK, r3
}
 800a8e8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2280      	movs	r2, #128	@ 0x80
 800a8ee:	2120      	movs	r1, #32
 800a8f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a8fe:	46c0      	nop			@ (mov r8, r8)
 800a900:	46bd      	mov	sp, r7
 800a902:	b00e      	add	sp, #56	@ 0x38
 800a904:	bd80      	pop	{r7, pc}
 800a906:	46c0      	nop			@ (mov r8, r8)
 800a908:	fffffedf 	.word	0xfffffedf

0800a90c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b094      	sub	sp, #80	@ 0x50
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a918:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	699b      	ldr	r3, [r3, #24]
 800a91e:	2b20      	cmp	r3, #32
 800a920:	d06f      	beq.n	800aa02 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 800a922:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a924:	225a      	movs	r2, #90	@ 0x5a
 800a926:	2100      	movs	r1, #0
 800a928:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a92a:	f3ef 8310 	mrs	r3, PRIMASK
 800a92e:	61bb      	str	r3, [r7, #24]
  return(result);
 800a930:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a932:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a934:	2301      	movs	r3, #1
 800a936:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a938:	69fb      	ldr	r3, [r7, #28]
 800a93a:	f383 8810 	msr	PRIMASK, r3
}
 800a93e:	46c0      	nop			@ (mov r8, r8)
 800a940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	493b      	ldr	r1, [pc, #236]	@ (800aa38 <UART_DMAReceiveCplt+0x12c>)
 800a94c:	400a      	ands	r2, r1
 800a94e:	601a      	str	r2, [r3, #0]
 800a950:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a952:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a954:	6a3b      	ldr	r3, [r7, #32]
 800a956:	f383 8810 	msr	PRIMASK, r3
}
 800a95a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a95c:	f3ef 8310 	mrs	r3, PRIMASK
 800a960:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800a962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a964:	647b      	str	r3, [r7, #68]	@ 0x44
 800a966:	2301      	movs	r3, #1
 800a968:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a96a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a96c:	f383 8810 	msr	PRIMASK, r3
}
 800a970:	46c0      	nop			@ (mov r8, r8)
 800a972:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	689a      	ldr	r2, [r3, #8]
 800a978:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	2101      	movs	r1, #1
 800a97e:	438a      	bics	r2, r1
 800a980:	609a      	str	r2, [r3, #8]
 800a982:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a984:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a988:	f383 8810 	msr	PRIMASK, r3
}
 800a98c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a98e:	f3ef 8310 	mrs	r3, PRIMASK
 800a992:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800a994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a996:	643b      	str	r3, [r7, #64]	@ 0x40
 800a998:	2301      	movs	r3, #1
 800a99a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a99c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a99e:	f383 8810 	msr	PRIMASK, r3
}
 800a9a2:	46c0      	nop			@ (mov r8, r8)
 800a9a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	689a      	ldr	r2, [r3, #8]
 800a9aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2140      	movs	r1, #64	@ 0x40
 800a9b0:	438a      	bics	r2, r1
 800a9b2:	609a      	str	r2, [r3, #8]
 800a9b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ba:	f383 8810 	msr	PRIMASK, r3
}
 800a9be:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a9c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9c2:	2280      	movs	r2, #128	@ 0x80
 800a9c4:	2120      	movs	r1, #32
 800a9c6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d118      	bne.n	800aa02 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9d0:	f3ef 8310 	mrs	r3, PRIMASK
 800a9d4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9da:	2301      	movs	r3, #1
 800a9dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	f383 8810 	msr	PRIMASK, r3
}
 800a9e4:	46c0      	nop			@ (mov r8, r8)
 800a9e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2110      	movs	r1, #16
 800a9f2:	438a      	bics	r2, r1
 800a9f4:	601a      	str	r2, [r3, #0]
 800a9f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	f383 8810 	msr	PRIMASK, r3
}
 800aa00:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa04:	2200      	movs	r2, #0
 800aa06:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d109      	bne.n	800aa24 <UART_DMAReceiveCplt+0x118>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800aa10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa12:	22ac      	movs	r2, #172	@ 0xac
 800aa14:	589b      	ldr	r3, [r3, r2]
 800aa16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aa18:	2158      	movs	r1, #88	@ 0x58
 800aa1a:	5a51      	ldrh	r1, [r2, r1]
 800aa1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aa1e:	0010      	movs	r0, r2
 800aa20:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa22:	e005      	b.n	800aa30 <UART_DMAReceiveCplt+0x124>
    huart->RxCpltCallback(huart);
 800aa24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa26:	2294      	movs	r2, #148	@ 0x94
 800aa28:	589b      	ldr	r3, [r3, r2]
 800aa2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aa2c:	0010      	movs	r0, r2
 800aa2e:	4798      	blx	r3
}
 800aa30:	46c0      	nop			@ (mov r8, r8)
 800aa32:	46bd      	mov	sp, r7
 800aa34:	b014      	add	sp, #80	@ 0x50
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	fffffeff 	.word	0xfffffeff

0800aa3c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa48:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d10b      	bne.n	800aa70 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	22ac      	movs	r2, #172	@ 0xac
 800aa5c:	589b      	ldr	r3, [r3, r2]
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	2158      	movs	r1, #88	@ 0x58
 800aa62:	5a52      	ldrh	r2, [r2, r1]
 800aa64:	0852      	lsrs	r2, r2, #1
 800aa66:	b291      	uxth	r1, r2
 800aa68:	68fa      	ldr	r2, [r7, #12]
 800aa6a:	0010      	movs	r0, r2
 800aa6c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa6e:	e005      	b.n	800aa7c <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2290      	movs	r2, #144	@ 0x90
 800aa74:	589b      	ldr	r3, [r3, r2]
 800aa76:	68fa      	ldr	r2, [r7, #12]
 800aa78:	0010      	movs	r0, r2
 800aa7a:	4798      	blx	r3
}
 800aa7c:	46c0      	nop			@ (mov r8, r8)
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	b004      	add	sp, #16
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b086      	sub	sp, #24
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa90:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa96:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	2280      	movs	r2, #128	@ 0x80
 800aa9c:	589b      	ldr	r3, [r3, r2]
 800aa9e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	689b      	ldr	r3, [r3, #8]
 800aaa6:	2280      	movs	r2, #128	@ 0x80
 800aaa8:	4013      	ands	r3, r2
 800aaaa:	2b80      	cmp	r3, #128	@ 0x80
 800aaac:	d10a      	bne.n	800aac4 <UART_DMAError+0x40>
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	2b21      	cmp	r3, #33	@ 0x21
 800aab2:	d107      	bne.n	800aac4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	2252      	movs	r2, #82	@ 0x52
 800aab8:	2100      	movs	r1, #0
 800aaba:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	0018      	movs	r0, r3
 800aac0:	f7ff fe9c 	bl	800a7fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	2240      	movs	r2, #64	@ 0x40
 800aacc:	4013      	ands	r3, r2
 800aace:	2b40      	cmp	r3, #64	@ 0x40
 800aad0:	d10a      	bne.n	800aae8 <UART_DMAError+0x64>
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2b22      	cmp	r3, #34	@ 0x22
 800aad6:	d107      	bne.n	800aae8 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	225a      	movs	r2, #90	@ 0x5a
 800aadc:	2100      	movs	r1, #0
 800aade:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	0018      	movs	r0, r3
 800aae4:	f7ff feae 	bl	800a844 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	2284      	movs	r2, #132	@ 0x84
 800aaec:	589b      	ldr	r3, [r3, r2]
 800aaee:	2210      	movs	r2, #16
 800aaf0:	431a      	orrs	r2, r3
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	2184      	movs	r1, #132	@ 0x84
 800aaf6:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	2298      	movs	r2, #152	@ 0x98
 800aafc:	589b      	ldr	r3, [r3, r2]
 800aafe:	697a      	ldr	r2, [r7, #20]
 800ab00:	0010      	movs	r0, r2
 800ab02:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab04:	46c0      	nop			@ (mov r8, r8)
 800ab06:	46bd      	mov	sp, r7
 800ab08:	b006      	add	sp, #24
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	225a      	movs	r2, #90	@ 0x5a
 800ab1e:	2100      	movs	r1, #0
 800ab20:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2252      	movs	r2, #82	@ 0x52
 800ab26:	2100      	movs	r1, #0
 800ab28:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2298      	movs	r2, #152	@ 0x98
 800ab2e:	589b      	ldr	r3, [r3, r2]
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	0010      	movs	r0, r2
 800ab34:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab36:	46c0      	nop			@ (mov r8, r8)
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	b004      	add	sp, #16
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b08a      	sub	sp, #40	@ 0x28
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ab4a:	2b21      	cmp	r3, #33	@ 0x21
 800ab4c:	d14c      	bne.n	800abe8 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2252      	movs	r2, #82	@ 0x52
 800ab52:	5a9b      	ldrh	r3, [r3, r2]
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d132      	bne.n	800abc0 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab5a:	f3ef 8310 	mrs	r3, PRIMASK
 800ab5e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ab60:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ab62:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab64:	2301      	movs	r3, #1
 800ab66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f383 8810 	msr	PRIMASK, r3
}
 800ab6e:	46c0      	nop			@ (mov r8, r8)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	2180      	movs	r1, #128	@ 0x80
 800ab7c:	438a      	bics	r2, r1
 800ab7e:	601a      	str	r2, [r3, #0]
 800ab80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	f383 8810 	msr	PRIMASK, r3
}
 800ab8a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab8c:	f3ef 8310 	mrs	r3, PRIMASK
 800ab90:	617b      	str	r3, [r7, #20]
  return(result);
 800ab92:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab94:	623b      	str	r3, [r7, #32]
 800ab96:	2301      	movs	r3, #1
 800ab98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	f383 8810 	msr	PRIMASK, r3
}
 800aba0:	46c0      	nop			@ (mov r8, r8)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2140      	movs	r1, #64	@ 0x40
 800abae:	430a      	orrs	r2, r1
 800abb0:	601a      	str	r2, [r3, #0]
 800abb2:	6a3b      	ldr	r3, [r7, #32]
 800abb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	f383 8810 	msr	PRIMASK, r3
}
 800abbc:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800abbe:	e013      	b.n	800abe8 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abc4:	781a      	ldrb	r2, [r3, #0]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abd0:	1c5a      	adds	r2, r3, #1
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2252      	movs	r2, #82	@ 0x52
 800abda:	5a9b      	ldrh	r3, [r3, r2]
 800abdc:	b29b      	uxth	r3, r3
 800abde:	3b01      	subs	r3, #1
 800abe0:	b299      	uxth	r1, r3
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2252      	movs	r2, #82	@ 0x52
 800abe6:	5299      	strh	r1, [r3, r2]
}
 800abe8:	46c0      	nop			@ (mov r8, r8)
 800abea:	46bd      	mov	sp, r7
 800abec:	b00a      	add	sp, #40	@ 0x28
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b08c      	sub	sp, #48	@ 0x30
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800abfc:	2b21      	cmp	r3, #33	@ 0x21
 800abfe:	d151      	bne.n	800aca4 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2252      	movs	r2, #82	@ 0x52
 800ac04:	5a9b      	ldrh	r3, [r3, r2]
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d132      	bne.n	800ac72 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac0c:	f3ef 8310 	mrs	r3, PRIMASK
 800ac10:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac12:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ac14:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac16:	2301      	movs	r3, #1
 800ac18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	f383 8810 	msr	PRIMASK, r3
}
 800ac20:	46c0      	nop			@ (mov r8, r8)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	2180      	movs	r1, #128	@ 0x80
 800ac2e:	438a      	bics	r2, r1
 800ac30:	601a      	str	r2, [r3, #0]
 800ac32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	f383 8810 	msr	PRIMASK, r3
}
 800ac3c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac3e:	f3ef 8310 	mrs	r3, PRIMASK
 800ac42:	61bb      	str	r3, [r7, #24]
  return(result);
 800ac44:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac46:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac48:	2301      	movs	r3, #1
 800ac4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac4c:	69fb      	ldr	r3, [r7, #28]
 800ac4e:	f383 8810 	msr	PRIMASK, r3
}
 800ac52:	46c0      	nop			@ (mov r8, r8)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	2140      	movs	r1, #64	@ 0x40
 800ac60:	430a      	orrs	r2, r1
 800ac62:	601a      	str	r2, [r3, #0]
 800ac64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac68:	6a3b      	ldr	r3, [r7, #32]
 800ac6a:	f383 8810 	msr	PRIMASK, r3
}
 800ac6e:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800ac70:	e018      	b.n	800aca4 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac76:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ac78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac7a:	881a      	ldrh	r2, [r3, #0]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	05d2      	lsls	r2, r2, #23
 800ac82:	0dd2      	lsrs	r2, r2, #23
 800ac84:	b292      	uxth	r2, r2
 800ac86:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac8c:	1c9a      	adds	r2, r3, #2
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2252      	movs	r2, #82	@ 0x52
 800ac96:	5a9b      	ldrh	r3, [r3, r2]
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	3b01      	subs	r3, #1
 800ac9c:	b299      	uxth	r1, r3
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2252      	movs	r2, #82	@ 0x52
 800aca2:	5299      	strh	r1, [r3, r2]
}
 800aca4:	46c0      	nop			@ (mov r8, r8)
 800aca6:	46bd      	mov	sp, r7
 800aca8:	b00c      	add	sp, #48	@ 0x30
 800acaa:	bd80      	pop	{r7, pc}

0800acac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b086      	sub	sp, #24
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acb4:	f3ef 8310 	mrs	r3, PRIMASK
 800acb8:	60bb      	str	r3, [r7, #8]
  return(result);
 800acba:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800acbc:	617b      	str	r3, [r7, #20]
 800acbe:	2301      	movs	r3, #1
 800acc0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f383 8810 	msr	PRIMASK, r3
}
 800acc8:	46c0      	nop			@ (mov r8, r8)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	2140      	movs	r1, #64	@ 0x40
 800acd6:	438a      	bics	r2, r1
 800acd8:	601a      	str	r2, [r3, #0]
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	f383 8810 	msr	PRIMASK, r3
}
 800ace4:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2220      	movs	r2, #32
 800acea:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	228c      	movs	r2, #140	@ 0x8c
 800acf6:	589b      	ldr	r3, [r3, r2]
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	0010      	movs	r0, r2
 800acfc:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acfe:	46c0      	nop			@ (mov r8, r8)
 800ad00:	46bd      	mov	sp, r7
 800ad02:	b006      	add	sp, #24
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b082      	sub	sp, #8
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ad0e:	46c0      	nop			@ (mov r8, r8)
 800ad10:	46bd      	mov	sp, r7
 800ad12:	b002      	add	sp, #8
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad16:	b5b0      	push	{r4, r5, r7, lr}
 800ad18:	b08a      	sub	sp, #40	@ 0x28
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	60f8      	str	r0, [r7, #12]
 800ad1e:	60b9      	str	r1, [r7, #8]
 800ad20:	1dbb      	adds	r3, r7, #6
 800ad22:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2280      	movs	r2, #128	@ 0x80
 800ad28:	589b      	ldr	r3, [r3, r2]
 800ad2a:	2b20      	cmp	r3, #32
 800ad2c:	d156      	bne.n	800addc <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d003      	beq.n	800ad3c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800ad34:	1dbb      	adds	r3, r7, #6
 800ad36:	881b      	ldrh	r3, [r3, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d101      	bne.n	800ad40 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	e04e      	b.n	800adde <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	689a      	ldr	r2, [r3, #8]
 800ad44:	2380      	movs	r3, #128	@ 0x80
 800ad46:	015b      	lsls	r3, r3, #5
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d109      	bne.n	800ad60 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	691b      	ldr	r3, [r3, #16]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d105      	bne.n	800ad60 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	2201      	movs	r2, #1
 800ad58:	4013      	ands	r3, r2
 800ad5a:	d001      	beq.n	800ad60 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e03e      	b.n	800adde <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2201      	movs	r2, #1
 800ad64:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800ad6c:	2527      	movs	r5, #39	@ 0x27
 800ad6e:	197c      	adds	r4, r7, r5
 800ad70:	1dbb      	adds	r3, r7, #6
 800ad72:	881a      	ldrh	r2, [r3, #0]
 800ad74:	68b9      	ldr	r1, [r7, #8]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	0018      	movs	r0, r3
 800ad7a:	f7ff fc9f 	bl	800a6bc <UART_Start_Receive_DMA>
 800ad7e:	0003      	movs	r3, r0
 800ad80:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800ad82:	197b      	adds	r3, r7, r5
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d124      	bne.n	800add4 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d11c      	bne.n	800adcc <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	2210      	movs	r2, #16
 800ad98:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad9a:	f3ef 8310 	mrs	r3, PRIMASK
 800ad9e:	617b      	str	r3, [r7, #20]
  return(result);
 800ada0:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ada2:	623b      	str	r3, [r7, #32]
 800ada4:	2301      	movs	r3, #1
 800ada6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ada8:	69bb      	ldr	r3, [r7, #24]
 800adaa:	f383 8810 	msr	PRIMASK, r3
}
 800adae:	46c0      	nop			@ (mov r8, r8)
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2110      	movs	r1, #16
 800adbc:	430a      	orrs	r2, r1
 800adbe:	601a      	str	r2, [r3, #0]
 800adc0:	6a3b      	ldr	r3, [r7, #32]
 800adc2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adc4:	69fb      	ldr	r3, [r7, #28]
 800adc6:	f383 8810 	msr	PRIMASK, r3
}
 800adca:	e003      	b.n	800add4 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800adcc:	2327      	movs	r3, #39	@ 0x27
 800adce:	18fb      	adds	r3, r7, r3
 800add0:	2201      	movs	r2, #1
 800add2:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800add4:	2327      	movs	r3, #39	@ 0x27
 800add6:	18fb      	adds	r3, r7, r3
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	e000      	b.n	800adde <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800addc:	2302      	movs	r3, #2
  }
}
 800adde:	0018      	movs	r0, r3
 800ade0:	46bd      	mov	sp, r7
 800ade2:	b00a      	add	sp, #40	@ 0x28
 800ade4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ade8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2244      	movs	r2, #68	@ 0x44
 800adf4:	2100      	movs	r1, #0
 800adf6:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800adf8:	4b05      	ldr	r3, [pc, #20]	@ (800ae10 <USB_EnableGlobalInt+0x28>)
 800adfa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	b299      	uxth	r1, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2240      	movs	r2, #64	@ 0x40
 800ae04:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800ae06:	2300      	movs	r3, #0
}
 800ae08:	0018      	movs	r0, r3
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	b004      	add	sp, #16
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	0000bf80 	.word	0x0000bf80

0800ae14 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ae1c:	4b09      	ldr	r3, [pc, #36]	@ (800ae44 <USB_DisableGlobalInt+0x30>)
 800ae1e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2240      	movs	r2, #64	@ 0x40
 800ae24:	5a9b      	ldrh	r3, [r3, r2]
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	b292      	uxth	r2, r2
 800ae2c:	43d2      	mvns	r2, r2
 800ae2e:	b292      	uxth	r2, r2
 800ae30:	4013      	ands	r3, r2
 800ae32:	b299      	uxth	r1, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2240      	movs	r2, #64	@ 0x40
 800ae38:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	0018      	movs	r0, r3
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	b004      	add	sp, #16
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	0000bf80 	.word	0x0000bf80

0800ae48 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	1d3b      	adds	r3, r7, #4
 800ae52:	6019      	str	r1, [r3, #0]
 800ae54:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2240      	movs	r2, #64	@ 0x40
 800ae5a:	2101      	movs	r1, #1
 800ae5c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2240      	movs	r2, #64	@ 0x40
 800ae62:	2100      	movs	r1, #0
 800ae64:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2244      	movs	r2, #68	@ 0x44
 800ae6a:	2100      	movs	r1, #0
 800ae6c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2250      	movs	r2, #80	@ 0x50
 800ae72:	2100      	movs	r1, #0
 800ae74:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800ae76:	2300      	movs	r3, #0
}
 800ae78:	0018      	movs	r0, r3
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	b004      	add	sp, #16
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b09c      	sub	sp, #112	@ 0x70
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800ae8a:	236f      	movs	r3, #111	@ 0x6f
 800ae8c:	18fb      	adds	r3, r7, r3
 800ae8e:	2200      	movs	r2, #0
 800ae90:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	18d3      	adds	r3, r2, r3
 800ae9c:	881b      	ldrh	r3, [r3, #0]
 800ae9e:	b29a      	uxth	r2, r3
 800aea0:	236c      	movs	r3, #108	@ 0x6c
 800aea2:	18fb      	adds	r3, r7, r3
 800aea4:	49a1      	ldr	r1, [pc, #644]	@ (800b12c <USB_ActivateEndpoint+0x2ac>)
 800aea6:	400a      	ands	r2, r1
 800aea8:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	78db      	ldrb	r3, [r3, #3]
 800aeae:	2b03      	cmp	r3, #3
 800aeb0:	d017      	beq.n	800aee2 <USB_ActivateEndpoint+0x62>
 800aeb2:	dc28      	bgt.n	800af06 <USB_ActivateEndpoint+0x86>
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	d00e      	beq.n	800aed6 <USB_ActivateEndpoint+0x56>
 800aeb8:	dc25      	bgt.n	800af06 <USB_ActivateEndpoint+0x86>
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d002      	beq.n	800aec4 <USB_ActivateEndpoint+0x44>
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d018      	beq.n	800aef4 <USB_ActivateEndpoint+0x74>
 800aec2:	e020      	b.n	800af06 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800aec4:	226c      	movs	r2, #108	@ 0x6c
 800aec6:	18bb      	adds	r3, r7, r2
 800aec8:	18ba      	adds	r2, r7, r2
 800aeca:	8812      	ldrh	r2, [r2, #0]
 800aecc:	2180      	movs	r1, #128	@ 0x80
 800aece:	0089      	lsls	r1, r1, #2
 800aed0:	430a      	orrs	r2, r1
 800aed2:	801a      	strh	r2, [r3, #0]
      break;
 800aed4:	e01c      	b.n	800af10 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800aed6:	226c      	movs	r2, #108	@ 0x6c
 800aed8:	18bb      	adds	r3, r7, r2
 800aeda:	18ba      	adds	r2, r7, r2
 800aedc:	8812      	ldrh	r2, [r2, #0]
 800aede:	801a      	strh	r2, [r3, #0]
      break;
 800aee0:	e016      	b.n	800af10 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800aee2:	226c      	movs	r2, #108	@ 0x6c
 800aee4:	18bb      	adds	r3, r7, r2
 800aee6:	18ba      	adds	r2, r7, r2
 800aee8:	8812      	ldrh	r2, [r2, #0]
 800aeea:	21c0      	movs	r1, #192	@ 0xc0
 800aeec:	00c9      	lsls	r1, r1, #3
 800aeee:	430a      	orrs	r2, r1
 800aef0:	801a      	strh	r2, [r3, #0]
      break;
 800aef2:	e00d      	b.n	800af10 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800aef4:	226c      	movs	r2, #108	@ 0x6c
 800aef6:	18bb      	adds	r3, r7, r2
 800aef8:	18ba      	adds	r2, r7, r2
 800aefa:	8812      	ldrh	r2, [r2, #0]
 800aefc:	2180      	movs	r1, #128	@ 0x80
 800aefe:	00c9      	lsls	r1, r1, #3
 800af00:	430a      	orrs	r2, r1
 800af02:	801a      	strh	r2, [r3, #0]
      break;
 800af04:	e004      	b.n	800af10 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800af06:	236f      	movs	r3, #111	@ 0x6f
 800af08:	18fb      	adds	r3, r7, r3
 800af0a:	2201      	movs	r2, #1
 800af0c:	701a      	strb	r2, [r3, #0]
      break;
 800af0e:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	18d3      	adds	r3, r2, r3
 800af1a:	226c      	movs	r2, #108	@ 0x6c
 800af1c:	18ba      	adds	r2, r7, r2
 800af1e:	8812      	ldrh	r2, [r2, #0]
 800af20:	4983      	ldr	r1, [pc, #524]	@ (800b130 <USB_ActivateEndpoint+0x2b0>)
 800af22:	430a      	orrs	r2, r1
 800af24:	b292      	uxth	r2, r2
 800af26:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	18d3      	adds	r3, r2, r3
 800af32:	881b      	ldrh	r3, [r3, #0]
 800af34:	b29b      	uxth	r3, r3
 800af36:	b21b      	sxth	r3, r3
 800af38:	4a7e      	ldr	r2, [pc, #504]	@ (800b134 <USB_ActivateEndpoint+0x2b4>)
 800af3a:	4013      	ands	r3, r2
 800af3c:	b21a      	sxth	r2, r3
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	b21b      	sxth	r3, r3
 800af44:	4313      	orrs	r3, r2
 800af46:	b21a      	sxth	r2, r3
 800af48:	2166      	movs	r1, #102	@ 0x66
 800af4a:	187b      	adds	r3, r7, r1
 800af4c:	801a      	strh	r2, [r3, #0]
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	18d3      	adds	r3, r2, r3
 800af58:	187a      	adds	r2, r7, r1
 800af5a:	8812      	ldrh	r2, [r2, #0]
 800af5c:	4974      	ldr	r1, [pc, #464]	@ (800b130 <USB_ActivateEndpoint+0x2b0>)
 800af5e:	430a      	orrs	r2, r1
 800af60:	b292      	uxth	r2, r2
 800af62:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	7b1b      	ldrb	r3, [r3, #12]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d000      	beq.n	800af6e <USB_ActivateEndpoint+0xee>
 800af6c:	e177      	b.n	800b25e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	785b      	ldrb	r3, [r3, #1]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d100      	bne.n	800af78 <USB_ActivateEndpoint+0xf8>
 800af76:	e07a      	b.n	800b06e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	61bb      	str	r3, [r7, #24]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2250      	movs	r2, #80	@ 0x50
 800af80:	5a9b      	ldrh	r3, [r3, r2]
 800af82:	b29b      	uxth	r3, r3
 800af84:	001a      	movs	r2, r3
 800af86:	69bb      	ldr	r3, [r7, #24]
 800af88:	189b      	adds	r3, r3, r2
 800af8a:	61bb      	str	r3, [r7, #24]
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	00da      	lsls	r2, r3, #3
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	18d3      	adds	r3, r2, r3
 800af96:	2280      	movs	r2, #128	@ 0x80
 800af98:	00d2      	lsls	r2, r2, #3
 800af9a:	4694      	mov	ip, r2
 800af9c:	4463      	add	r3, ip
 800af9e:	617b      	str	r3, [r7, #20]
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	88db      	ldrh	r3, [r3, #6]
 800afa4:	085b      	lsrs	r3, r3, #1
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	18db      	adds	r3, r3, r3
 800afaa:	b29a      	uxth	r2, r3
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	009b      	lsls	r3, r3, #2
 800afb8:	18d2      	adds	r2, r2, r3
 800afba:	2112      	movs	r1, #18
 800afbc:	187b      	adds	r3, r7, r1
 800afbe:	8812      	ldrh	r2, [r2, #0]
 800afc0:	801a      	strh	r2, [r3, #0]
 800afc2:	187b      	adds	r3, r7, r1
 800afc4:	881b      	ldrh	r3, [r3, #0]
 800afc6:	2240      	movs	r2, #64	@ 0x40
 800afc8:	4013      	ands	r3, r2
 800afca:	d016      	beq.n	800affa <USB_ActivateEndpoint+0x17a>
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	18d3      	adds	r3, r2, r3
 800afd6:	881b      	ldrh	r3, [r3, #0]
 800afd8:	b29a      	uxth	r2, r3
 800afda:	2010      	movs	r0, #16
 800afdc:	183b      	adds	r3, r7, r0
 800afde:	4955      	ldr	r1, [pc, #340]	@ (800b134 <USB_ActivateEndpoint+0x2b4>)
 800afe0:	400a      	ands	r2, r1
 800afe2:	801a      	strh	r2, [r3, #0]
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	18d3      	adds	r3, r2, r3
 800afee:	183a      	adds	r2, r7, r0
 800aff0:	8812      	ldrh	r2, [r2, #0]
 800aff2:	4951      	ldr	r1, [pc, #324]	@ (800b138 <USB_ActivateEndpoint+0x2b8>)
 800aff4:	430a      	orrs	r2, r1
 800aff6:	b292      	uxth	r2, r2
 800aff8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	78db      	ldrb	r3, [r3, #3]
 800affe:	2b01      	cmp	r3, #1
 800b000:	d01d      	beq.n	800b03e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	18d3      	adds	r3, r2, r3
 800b00c:	881b      	ldrh	r3, [r3, #0]
 800b00e:	b29a      	uxth	r2, r3
 800b010:	200c      	movs	r0, #12
 800b012:	183b      	adds	r3, r7, r0
 800b014:	4949      	ldr	r1, [pc, #292]	@ (800b13c <USB_ActivateEndpoint+0x2bc>)
 800b016:	400a      	ands	r2, r1
 800b018:	801a      	strh	r2, [r3, #0]
 800b01a:	183b      	adds	r3, r7, r0
 800b01c:	183a      	adds	r2, r7, r0
 800b01e:	8812      	ldrh	r2, [r2, #0]
 800b020:	2120      	movs	r1, #32
 800b022:	404a      	eors	r2, r1
 800b024:	801a      	strh	r2, [r3, #0]
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	18d3      	adds	r3, r2, r3
 800b030:	183a      	adds	r2, r7, r0
 800b032:	8812      	ldrh	r2, [r2, #0]
 800b034:	493e      	ldr	r1, [pc, #248]	@ (800b130 <USB_ActivateEndpoint+0x2b0>)
 800b036:	430a      	orrs	r2, r1
 800b038:	b292      	uxth	r2, r2
 800b03a:	801a      	strh	r2, [r3, #0]
 800b03c:	e2b5      	b.n	800b5aa <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	18d3      	adds	r3, r2, r3
 800b048:	881b      	ldrh	r3, [r3, #0]
 800b04a:	b29a      	uxth	r2, r3
 800b04c:	200e      	movs	r0, #14
 800b04e:	183b      	adds	r3, r7, r0
 800b050:	493a      	ldr	r1, [pc, #232]	@ (800b13c <USB_ActivateEndpoint+0x2bc>)
 800b052:	400a      	ands	r2, r1
 800b054:	801a      	strh	r2, [r3, #0]
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	18d3      	adds	r3, r2, r3
 800b060:	183a      	adds	r2, r7, r0
 800b062:	8812      	ldrh	r2, [r2, #0]
 800b064:	4932      	ldr	r1, [pc, #200]	@ (800b130 <USB_ActivateEndpoint+0x2b0>)
 800b066:	430a      	orrs	r2, r1
 800b068:	b292      	uxth	r2, r2
 800b06a:	801a      	strh	r2, [r3, #0]
 800b06c:	e29d      	b.n	800b5aa <USB_ActivateEndpoint+0x72a>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	633b      	str	r3, [r7, #48]	@ 0x30
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2250      	movs	r2, #80	@ 0x50
 800b076:	5a9b      	ldrh	r3, [r3, r2]
 800b078:	b29b      	uxth	r3, r3
 800b07a:	001a      	movs	r2, r3
 800b07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b07e:	189b      	adds	r3, r3, r2
 800b080:	633b      	str	r3, [r7, #48]	@ 0x30
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	00da      	lsls	r2, r3, #3
 800b088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b08a:	18d3      	adds	r3, r2, r3
 800b08c:	4a2c      	ldr	r2, [pc, #176]	@ (800b140 <USB_ActivateEndpoint+0x2c0>)
 800b08e:	4694      	mov	ip, r2
 800b090:	4463      	add	r3, ip
 800b092:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	88db      	ldrh	r3, [r3, #6]
 800b098:	085b      	lsrs	r3, r3, #1
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	18db      	adds	r3, r3, r3
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2250      	movs	r2, #80	@ 0x50
 800b0ac:	5a9b      	ldrh	r3, [r3, r2]
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	001a      	movs	r2, r3
 800b0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0b4:	189b      	adds	r3, r3, r2
 800b0b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	00da      	lsls	r2, r3, #3
 800b0be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0c0:	18d3      	adds	r3, r2, r3
 800b0c2:	4a20      	ldr	r2, [pc, #128]	@ (800b144 <USB_ActivateEndpoint+0x2c4>)
 800b0c4:	4694      	mov	ip, r2
 800b0c6:	4463      	add	r3, ip
 800b0c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0cc:	881b      	ldrh	r3, [r3, #0]
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	059b      	lsls	r3, r3, #22
 800b0d2:	0d9b      	lsrs	r3, r3, #22
 800b0d4:	b29a      	uxth	r2, r3
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d8:	801a      	strh	r2, [r3, #0]
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	691b      	ldr	r3, [r3, #16]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d108      	bne.n	800b0f4 <USB_ActivateEndpoint+0x274>
 800b0e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e4:	881b      	ldrh	r3, [r3, #0]
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	4a17      	ldr	r2, [pc, #92]	@ (800b148 <USB_ActivateEndpoint+0x2c8>)
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	b29a      	uxth	r2, r3
 800b0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f0:	801a      	strh	r2, [r3, #0]
 800b0f2:	e045      	b.n	800b180 <USB_ActivateEndpoint+0x300>
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	691b      	ldr	r3, [r3, #16]
 800b0f8:	2b3e      	cmp	r3, #62	@ 0x3e
 800b0fa:	d827      	bhi.n	800b14c <USB_ActivateEndpoint+0x2cc>
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	691b      	ldr	r3, [r3, #16]
 800b100:	085b      	lsrs	r3, r3, #1
 800b102:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	2201      	movs	r2, #1
 800b10a:	4013      	ands	r3, r2
 800b10c:	d002      	beq.n	800b114 <USB_ActivateEndpoint+0x294>
 800b10e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b110:	3301      	adds	r3, #1
 800b112:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b116:	881b      	ldrh	r3, [r3, #0]
 800b118:	b29a      	uxth	r2, r3
 800b11a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	029b      	lsls	r3, r3, #10
 800b120:	b29b      	uxth	r3, r3
 800b122:	4313      	orrs	r3, r2
 800b124:	b29a      	uxth	r2, r3
 800b126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b128:	801a      	strh	r2, [r3, #0]
 800b12a:	e029      	b.n	800b180 <USB_ActivateEndpoint+0x300>
 800b12c:	ffff898f 	.word	0xffff898f
 800b130:	ffff8080 	.word	0xffff8080
 800b134:	ffff8f8f 	.word	0xffff8f8f
 800b138:	ffff80c0 	.word	0xffff80c0
 800b13c:	ffff8fbf 	.word	0xffff8fbf
 800b140:	00000404 	.word	0x00000404
 800b144:	00000406 	.word	0x00000406
 800b148:	ffff8000 	.word	0xffff8000
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	691b      	ldr	r3, [r3, #16]
 800b150:	095b      	lsrs	r3, r3, #5
 800b152:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	691b      	ldr	r3, [r3, #16]
 800b158:	221f      	movs	r2, #31
 800b15a:	4013      	ands	r3, r2
 800b15c:	d102      	bne.n	800b164 <USB_ActivateEndpoint+0x2e4>
 800b15e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b160:	3b01      	subs	r3, #1
 800b162:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b166:	881b      	ldrh	r3, [r3, #0]
 800b168:	b29a      	uxth	r2, r3
 800b16a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	029b      	lsls	r3, r3, #10
 800b170:	b29b      	uxth	r3, r3
 800b172:	4313      	orrs	r3, r2
 800b174:	b29b      	uxth	r3, r3
 800b176:	4ab5      	ldr	r2, [pc, #724]	@ (800b44c <USB_ActivateEndpoint+0x5cc>)
 800b178:	4313      	orrs	r3, r2
 800b17a:	b29a      	uxth	r2, r3
 800b17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b17e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b180:	687a      	ldr	r2, [r7, #4]
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	18d2      	adds	r2, r2, r3
 800b18a:	2122      	movs	r1, #34	@ 0x22
 800b18c:	187b      	adds	r3, r7, r1
 800b18e:	8812      	ldrh	r2, [r2, #0]
 800b190:	801a      	strh	r2, [r3, #0]
 800b192:	187b      	adds	r3, r7, r1
 800b194:	881a      	ldrh	r2, [r3, #0]
 800b196:	2380      	movs	r3, #128	@ 0x80
 800b198:	01db      	lsls	r3, r3, #7
 800b19a:	4013      	ands	r3, r2
 800b19c:	d016      	beq.n	800b1cc <USB_ActivateEndpoint+0x34c>
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	18d3      	adds	r3, r2, r3
 800b1a8:	881b      	ldrh	r3, [r3, #0]
 800b1aa:	b29a      	uxth	r2, r3
 800b1ac:	2020      	movs	r0, #32
 800b1ae:	183b      	adds	r3, r7, r0
 800b1b0:	49a7      	ldr	r1, [pc, #668]	@ (800b450 <USB_ActivateEndpoint+0x5d0>)
 800b1b2:	400a      	ands	r2, r1
 800b1b4:	801a      	strh	r2, [r3, #0]
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	18d3      	adds	r3, r2, r3
 800b1c0:	183a      	adds	r2, r7, r0
 800b1c2:	8812      	ldrh	r2, [r2, #0]
 800b1c4:	49a3      	ldr	r1, [pc, #652]	@ (800b454 <USB_ActivateEndpoint+0x5d4>)
 800b1c6:	430a      	orrs	r2, r1
 800b1c8:	b292      	uxth	r2, r2
 800b1ca:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d125      	bne.n	800b220 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	18d3      	adds	r3, r2, r3
 800b1de:	881b      	ldrh	r3, [r3, #0]
 800b1e0:	b29a      	uxth	r2, r3
 800b1e2:	201c      	movs	r0, #28
 800b1e4:	183b      	adds	r3, r7, r0
 800b1e6:	499c      	ldr	r1, [pc, #624]	@ (800b458 <USB_ActivateEndpoint+0x5d8>)
 800b1e8:	400a      	ands	r2, r1
 800b1ea:	801a      	strh	r2, [r3, #0]
 800b1ec:	183b      	adds	r3, r7, r0
 800b1ee:	183a      	adds	r2, r7, r0
 800b1f0:	8812      	ldrh	r2, [r2, #0]
 800b1f2:	2180      	movs	r1, #128	@ 0x80
 800b1f4:	0149      	lsls	r1, r1, #5
 800b1f6:	404a      	eors	r2, r1
 800b1f8:	801a      	strh	r2, [r3, #0]
 800b1fa:	183b      	adds	r3, r7, r0
 800b1fc:	183a      	adds	r2, r7, r0
 800b1fe:	8812      	ldrh	r2, [r2, #0]
 800b200:	2180      	movs	r1, #128	@ 0x80
 800b202:	0189      	lsls	r1, r1, #6
 800b204:	404a      	eors	r2, r1
 800b206:	801a      	strh	r2, [r3, #0]
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	18d3      	adds	r3, r2, r3
 800b212:	183a      	adds	r2, r7, r0
 800b214:	8812      	ldrh	r2, [r2, #0]
 800b216:	4991      	ldr	r1, [pc, #580]	@ (800b45c <USB_ActivateEndpoint+0x5dc>)
 800b218:	430a      	orrs	r2, r1
 800b21a:	b292      	uxth	r2, r2
 800b21c:	801a      	strh	r2, [r3, #0]
 800b21e:	e1c4      	b.n	800b5aa <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	18d3      	adds	r3, r2, r3
 800b22a:	881b      	ldrh	r3, [r3, #0]
 800b22c:	b29a      	uxth	r2, r3
 800b22e:	201e      	movs	r0, #30
 800b230:	183b      	adds	r3, r7, r0
 800b232:	4989      	ldr	r1, [pc, #548]	@ (800b458 <USB_ActivateEndpoint+0x5d8>)
 800b234:	400a      	ands	r2, r1
 800b236:	801a      	strh	r2, [r3, #0]
 800b238:	183b      	adds	r3, r7, r0
 800b23a:	183a      	adds	r2, r7, r0
 800b23c:	8812      	ldrh	r2, [r2, #0]
 800b23e:	2180      	movs	r1, #128	@ 0x80
 800b240:	0189      	lsls	r1, r1, #6
 800b242:	404a      	eors	r2, r1
 800b244:	801a      	strh	r2, [r3, #0]
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	009b      	lsls	r3, r3, #2
 800b24e:	18d3      	adds	r3, r2, r3
 800b250:	183a      	adds	r2, r7, r0
 800b252:	8812      	ldrh	r2, [r2, #0]
 800b254:	4981      	ldr	r1, [pc, #516]	@ (800b45c <USB_ActivateEndpoint+0x5dc>)
 800b256:	430a      	orrs	r2, r1
 800b258:	b292      	uxth	r2, r2
 800b25a:	801a      	strh	r2, [r3, #0]
 800b25c:	e1a5      	b.n	800b5aa <USB_ActivateEndpoint+0x72a>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	78db      	ldrb	r3, [r3, #3]
 800b262:	2b02      	cmp	r3, #2
 800b264:	d117      	bne.n	800b296 <USB_ActivateEndpoint+0x416>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	009b      	lsls	r3, r3, #2
 800b26e:	18d3      	adds	r3, r2, r3
 800b270:	881b      	ldrh	r3, [r3, #0]
 800b272:	b29a      	uxth	r2, r3
 800b274:	2062      	movs	r0, #98	@ 0x62
 800b276:	183b      	adds	r3, r7, r0
 800b278:	4975      	ldr	r1, [pc, #468]	@ (800b450 <USB_ActivateEndpoint+0x5d0>)
 800b27a:	400a      	ands	r2, r1
 800b27c:	801a      	strh	r2, [r3, #0]
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	009b      	lsls	r3, r3, #2
 800b286:	18d3      	adds	r3, r2, r3
 800b288:	183a      	adds	r2, r7, r0
 800b28a:	8812      	ldrh	r2, [r2, #0]
 800b28c:	4974      	ldr	r1, [pc, #464]	@ (800b460 <USB_ActivateEndpoint+0x5e0>)
 800b28e:	430a      	orrs	r2, r1
 800b290:	b292      	uxth	r2, r2
 800b292:	801a      	strh	r2, [r3, #0]
 800b294:	e016      	b.n	800b2c4 <USB_ActivateEndpoint+0x444>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	18d3      	adds	r3, r2, r3
 800b2a0:	881b      	ldrh	r3, [r3, #0]
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	2064      	movs	r0, #100	@ 0x64
 800b2a6:	183b      	adds	r3, r7, r0
 800b2a8:	496e      	ldr	r1, [pc, #440]	@ (800b464 <USB_ActivateEndpoint+0x5e4>)
 800b2aa:	400a      	ands	r2, r1
 800b2ac:	801a      	strh	r2, [r3, #0]
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	18d3      	adds	r3, r2, r3
 800b2b8:	183a      	adds	r2, r7, r0
 800b2ba:	8812      	ldrh	r2, [r2, #0]
 800b2bc:	4967      	ldr	r1, [pc, #412]	@ (800b45c <USB_ActivateEndpoint+0x5dc>)
 800b2be:	430a      	orrs	r2, r1
 800b2c0:	b292      	uxth	r2, r2
 800b2c2:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2250      	movs	r2, #80	@ 0x50
 800b2cc:	5a9b      	ldrh	r3, [r3, r2]
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	001a      	movs	r2, r3
 800b2d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2d4:	189b      	adds	r3, r3, r2
 800b2d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	00da      	lsls	r2, r3, #3
 800b2de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2e0:	18d3      	adds	r3, r2, r3
 800b2e2:	2280      	movs	r2, #128	@ 0x80
 800b2e4:	00d2      	lsls	r2, r2, #3
 800b2e6:	4694      	mov	ip, r2
 800b2e8:	4463      	add	r3, ip
 800b2ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	891b      	ldrh	r3, [r3, #8]
 800b2f0:	085b      	lsrs	r3, r3, #1
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	18db      	adds	r3, r3, r3
 800b2f6:	b29a      	uxth	r2, r3
 800b2f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b2fa:	801a      	strh	r2, [r3, #0]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	657b      	str	r3, [r7, #84]	@ 0x54
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2250      	movs	r2, #80	@ 0x50
 800b304:	5a9b      	ldrh	r3, [r3, r2]
 800b306:	b29b      	uxth	r3, r3
 800b308:	001a      	movs	r2, r3
 800b30a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b30c:	189b      	adds	r3, r3, r2
 800b30e:	657b      	str	r3, [r7, #84]	@ 0x54
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	00da      	lsls	r2, r3, #3
 800b316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b318:	18d3      	adds	r3, r2, r3
 800b31a:	4a53      	ldr	r2, [pc, #332]	@ (800b468 <USB_ActivateEndpoint+0x5e8>)
 800b31c:	4694      	mov	ip, r2
 800b31e:	4463      	add	r3, ip
 800b320:	653b      	str	r3, [r7, #80]	@ 0x50
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	895b      	ldrh	r3, [r3, #10]
 800b326:	085b      	lsrs	r3, r3, #1
 800b328:	b29b      	uxth	r3, r3
 800b32a:	18db      	adds	r3, r3, r3
 800b32c:	b29a      	uxth	r2, r3
 800b32e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b330:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	785b      	ldrb	r3, [r3, #1]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d000      	beq.n	800b33c <USB_ActivateEndpoint+0x4bc>
 800b33a:	e09b      	b.n	800b474 <USB_ActivateEndpoint+0x5f4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	18d2      	adds	r2, r2, r3
 800b346:	2140      	movs	r1, #64	@ 0x40
 800b348:	187b      	adds	r3, r7, r1
 800b34a:	8812      	ldrh	r2, [r2, #0]
 800b34c:	801a      	strh	r2, [r3, #0]
 800b34e:	187b      	adds	r3, r7, r1
 800b350:	881a      	ldrh	r2, [r3, #0]
 800b352:	2380      	movs	r3, #128	@ 0x80
 800b354:	01db      	lsls	r3, r3, #7
 800b356:	4013      	ands	r3, r2
 800b358:	d016      	beq.n	800b388 <USB_ActivateEndpoint+0x508>
 800b35a:	687a      	ldr	r2, [r7, #4]
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	18d3      	adds	r3, r2, r3
 800b364:	881b      	ldrh	r3, [r3, #0]
 800b366:	b29a      	uxth	r2, r3
 800b368:	203e      	movs	r0, #62	@ 0x3e
 800b36a:	183b      	adds	r3, r7, r0
 800b36c:	4938      	ldr	r1, [pc, #224]	@ (800b450 <USB_ActivateEndpoint+0x5d0>)
 800b36e:	400a      	ands	r2, r1
 800b370:	801a      	strh	r2, [r3, #0]
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	009b      	lsls	r3, r3, #2
 800b37a:	18d3      	adds	r3, r2, r3
 800b37c:	183a      	adds	r2, r7, r0
 800b37e:	8812      	ldrh	r2, [r2, #0]
 800b380:	4934      	ldr	r1, [pc, #208]	@ (800b454 <USB_ActivateEndpoint+0x5d4>)
 800b382:	430a      	orrs	r2, r1
 800b384:	b292      	uxth	r2, r2
 800b386:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	18d2      	adds	r2, r2, r3
 800b392:	213c      	movs	r1, #60	@ 0x3c
 800b394:	187b      	adds	r3, r7, r1
 800b396:	8812      	ldrh	r2, [r2, #0]
 800b398:	801a      	strh	r2, [r3, #0]
 800b39a:	187b      	adds	r3, r7, r1
 800b39c:	881b      	ldrh	r3, [r3, #0]
 800b39e:	2240      	movs	r2, #64	@ 0x40
 800b3a0:	4013      	ands	r3, r2
 800b3a2:	d016      	beq.n	800b3d2 <USB_ActivateEndpoint+0x552>
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	18d3      	adds	r3, r2, r3
 800b3ae:	881b      	ldrh	r3, [r3, #0]
 800b3b0:	b29a      	uxth	r2, r3
 800b3b2:	203a      	movs	r0, #58	@ 0x3a
 800b3b4:	183b      	adds	r3, r7, r0
 800b3b6:	4926      	ldr	r1, [pc, #152]	@ (800b450 <USB_ActivateEndpoint+0x5d0>)
 800b3b8:	400a      	ands	r2, r1
 800b3ba:	801a      	strh	r2, [r3, #0]
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	781b      	ldrb	r3, [r3, #0]
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	18d3      	adds	r3, r2, r3
 800b3c6:	183a      	adds	r2, r7, r0
 800b3c8:	8812      	ldrh	r2, [r2, #0]
 800b3ca:	4928      	ldr	r1, [pc, #160]	@ (800b46c <USB_ActivateEndpoint+0x5ec>)
 800b3cc:	430a      	orrs	r2, r1
 800b3ce:	b292      	uxth	r2, r2
 800b3d0:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	009b      	lsls	r3, r3, #2
 800b3da:	18d3      	adds	r3, r2, r3
 800b3dc:	881b      	ldrh	r3, [r3, #0]
 800b3de:	b29a      	uxth	r2, r3
 800b3e0:	2038      	movs	r0, #56	@ 0x38
 800b3e2:	183b      	adds	r3, r7, r0
 800b3e4:	491c      	ldr	r1, [pc, #112]	@ (800b458 <USB_ActivateEndpoint+0x5d8>)
 800b3e6:	400a      	ands	r2, r1
 800b3e8:	801a      	strh	r2, [r3, #0]
 800b3ea:	183b      	adds	r3, r7, r0
 800b3ec:	183a      	adds	r2, r7, r0
 800b3ee:	8812      	ldrh	r2, [r2, #0]
 800b3f0:	2180      	movs	r1, #128	@ 0x80
 800b3f2:	0149      	lsls	r1, r1, #5
 800b3f4:	404a      	eors	r2, r1
 800b3f6:	801a      	strh	r2, [r3, #0]
 800b3f8:	183b      	adds	r3, r7, r0
 800b3fa:	183a      	adds	r2, r7, r0
 800b3fc:	8812      	ldrh	r2, [r2, #0]
 800b3fe:	2180      	movs	r1, #128	@ 0x80
 800b400:	0189      	lsls	r1, r1, #6
 800b402:	404a      	eors	r2, r1
 800b404:	801a      	strh	r2, [r3, #0]
 800b406:	687a      	ldr	r2, [r7, #4]
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	18d3      	adds	r3, r2, r3
 800b410:	183a      	adds	r2, r7, r0
 800b412:	8812      	ldrh	r2, [r2, #0]
 800b414:	4911      	ldr	r1, [pc, #68]	@ (800b45c <USB_ActivateEndpoint+0x5dc>)
 800b416:	430a      	orrs	r2, r1
 800b418:	b292      	uxth	r2, r2
 800b41a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	18d3      	adds	r3, r2, r3
 800b426:	881b      	ldrh	r3, [r3, #0]
 800b428:	b29a      	uxth	r2, r3
 800b42a:	2036      	movs	r0, #54	@ 0x36
 800b42c:	183b      	adds	r3, r7, r0
 800b42e:	4910      	ldr	r1, [pc, #64]	@ (800b470 <USB_ActivateEndpoint+0x5f0>)
 800b430:	400a      	ands	r2, r1
 800b432:	801a      	strh	r2, [r3, #0]
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	18d3      	adds	r3, r2, r3
 800b43e:	183a      	adds	r2, r7, r0
 800b440:	8812      	ldrh	r2, [r2, #0]
 800b442:	4906      	ldr	r1, [pc, #24]	@ (800b45c <USB_ActivateEndpoint+0x5dc>)
 800b444:	430a      	orrs	r2, r1
 800b446:	b292      	uxth	r2, r2
 800b448:	801a      	strh	r2, [r3, #0]
 800b44a:	e0ae      	b.n	800b5aa <USB_ActivateEndpoint+0x72a>
 800b44c:	ffff8000 	.word	0xffff8000
 800b450:	ffff8f8f 	.word	0xffff8f8f
 800b454:	ffffc080 	.word	0xffffc080
 800b458:	ffffbf8f 	.word	0xffffbf8f
 800b45c:	ffff8080 	.word	0xffff8080
 800b460:	ffff8180 	.word	0xffff8180
 800b464:	ffff8e8f 	.word	0xffff8e8f
 800b468:	00000404 	.word	0x00000404
 800b46c:	ffff80c0 	.word	0xffff80c0
 800b470:	ffff8fbf 	.word	0xffff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	009b      	lsls	r3, r3, #2
 800b47c:	18d2      	adds	r2, r2, r3
 800b47e:	214e      	movs	r1, #78	@ 0x4e
 800b480:	187b      	adds	r3, r7, r1
 800b482:	8812      	ldrh	r2, [r2, #0]
 800b484:	801a      	strh	r2, [r3, #0]
 800b486:	187b      	adds	r3, r7, r1
 800b488:	881a      	ldrh	r2, [r3, #0]
 800b48a:	2380      	movs	r3, #128	@ 0x80
 800b48c:	01db      	lsls	r3, r3, #7
 800b48e:	4013      	ands	r3, r2
 800b490:	d016      	beq.n	800b4c0 <USB_ActivateEndpoint+0x640>
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	009b      	lsls	r3, r3, #2
 800b49a:	18d3      	adds	r3, r2, r3
 800b49c:	881b      	ldrh	r3, [r3, #0]
 800b49e:	b29a      	uxth	r2, r3
 800b4a0:	204c      	movs	r0, #76	@ 0x4c
 800b4a2:	183b      	adds	r3, r7, r0
 800b4a4:	4944      	ldr	r1, [pc, #272]	@ (800b5b8 <USB_ActivateEndpoint+0x738>)
 800b4a6:	400a      	ands	r2, r1
 800b4a8:	801a      	strh	r2, [r3, #0]
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	009b      	lsls	r3, r3, #2
 800b4b2:	18d3      	adds	r3, r2, r3
 800b4b4:	183a      	adds	r2, r7, r0
 800b4b6:	8812      	ldrh	r2, [r2, #0]
 800b4b8:	4940      	ldr	r1, [pc, #256]	@ (800b5bc <USB_ActivateEndpoint+0x73c>)
 800b4ba:	430a      	orrs	r2, r1
 800b4bc:	b292      	uxth	r2, r2
 800b4be:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	18d2      	adds	r2, r2, r3
 800b4ca:	214a      	movs	r1, #74	@ 0x4a
 800b4cc:	187b      	adds	r3, r7, r1
 800b4ce:	8812      	ldrh	r2, [r2, #0]
 800b4d0:	801a      	strh	r2, [r3, #0]
 800b4d2:	187b      	adds	r3, r7, r1
 800b4d4:	881b      	ldrh	r3, [r3, #0]
 800b4d6:	2240      	movs	r2, #64	@ 0x40
 800b4d8:	4013      	ands	r3, r2
 800b4da:	d016      	beq.n	800b50a <USB_ActivateEndpoint+0x68a>
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	009b      	lsls	r3, r3, #2
 800b4e4:	18d3      	adds	r3, r2, r3
 800b4e6:	881b      	ldrh	r3, [r3, #0]
 800b4e8:	b29a      	uxth	r2, r3
 800b4ea:	2048      	movs	r0, #72	@ 0x48
 800b4ec:	183b      	adds	r3, r7, r0
 800b4ee:	4932      	ldr	r1, [pc, #200]	@ (800b5b8 <USB_ActivateEndpoint+0x738>)
 800b4f0:	400a      	ands	r2, r1
 800b4f2:	801a      	strh	r2, [r3, #0]
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	18d3      	adds	r3, r2, r3
 800b4fe:	183a      	adds	r2, r7, r0
 800b500:	8812      	ldrh	r2, [r2, #0]
 800b502:	492f      	ldr	r1, [pc, #188]	@ (800b5c0 <USB_ActivateEndpoint+0x740>)
 800b504:	430a      	orrs	r2, r1
 800b506:	b292      	uxth	r2, r2
 800b508:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	78db      	ldrb	r3, [r3, #3]
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d01d      	beq.n	800b54e <USB_ActivateEndpoint+0x6ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	009b      	lsls	r3, r3, #2
 800b51a:	18d3      	adds	r3, r2, r3
 800b51c:	881b      	ldrh	r3, [r3, #0]
 800b51e:	b29a      	uxth	r2, r3
 800b520:	2044      	movs	r0, #68	@ 0x44
 800b522:	183b      	adds	r3, r7, r0
 800b524:	4927      	ldr	r1, [pc, #156]	@ (800b5c4 <USB_ActivateEndpoint+0x744>)
 800b526:	400a      	ands	r2, r1
 800b528:	801a      	strh	r2, [r3, #0]
 800b52a:	183b      	adds	r3, r7, r0
 800b52c:	183a      	adds	r2, r7, r0
 800b52e:	8812      	ldrh	r2, [r2, #0]
 800b530:	2120      	movs	r1, #32
 800b532:	404a      	eors	r2, r1
 800b534:	801a      	strh	r2, [r3, #0]
 800b536:	687a      	ldr	r2, [r7, #4]
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	18d3      	adds	r3, r2, r3
 800b540:	183a      	adds	r2, r7, r0
 800b542:	8812      	ldrh	r2, [r2, #0]
 800b544:	4920      	ldr	r1, [pc, #128]	@ (800b5c8 <USB_ActivateEndpoint+0x748>)
 800b546:	430a      	orrs	r2, r1
 800b548:	b292      	uxth	r2, r2
 800b54a:	801a      	strh	r2, [r3, #0]
 800b54c:	e016      	b.n	800b57c <USB_ActivateEndpoint+0x6fc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	18d3      	adds	r3, r2, r3
 800b558:	881b      	ldrh	r3, [r3, #0]
 800b55a:	b29a      	uxth	r2, r3
 800b55c:	2046      	movs	r0, #70	@ 0x46
 800b55e:	183b      	adds	r3, r7, r0
 800b560:	4918      	ldr	r1, [pc, #96]	@ (800b5c4 <USB_ActivateEndpoint+0x744>)
 800b562:	400a      	ands	r2, r1
 800b564:	801a      	strh	r2, [r3, #0]
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	18d3      	adds	r3, r2, r3
 800b570:	183a      	adds	r2, r7, r0
 800b572:	8812      	ldrh	r2, [r2, #0]
 800b574:	4914      	ldr	r1, [pc, #80]	@ (800b5c8 <USB_ActivateEndpoint+0x748>)
 800b576:	430a      	orrs	r2, r1
 800b578:	b292      	uxth	r2, r2
 800b57a:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b57c:	687a      	ldr	r2, [r7, #4]
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	18d3      	adds	r3, r2, r3
 800b586:	881b      	ldrh	r3, [r3, #0]
 800b588:	b29a      	uxth	r2, r3
 800b58a:	2042      	movs	r0, #66	@ 0x42
 800b58c:	183b      	adds	r3, r7, r0
 800b58e:	490f      	ldr	r1, [pc, #60]	@ (800b5cc <USB_ActivateEndpoint+0x74c>)
 800b590:	400a      	ands	r2, r1
 800b592:	801a      	strh	r2, [r3, #0]
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	18d3      	adds	r3, r2, r3
 800b59e:	183a      	adds	r2, r7, r0
 800b5a0:	8812      	ldrh	r2, [r2, #0]
 800b5a2:	4909      	ldr	r1, [pc, #36]	@ (800b5c8 <USB_ActivateEndpoint+0x748>)
 800b5a4:	430a      	orrs	r2, r1
 800b5a6:	b292      	uxth	r2, r2
 800b5a8:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b5aa:	236f      	movs	r3, #111	@ 0x6f
 800b5ac:	18fb      	adds	r3, r7, r3
 800b5ae:	781b      	ldrb	r3, [r3, #0]
}
 800b5b0:	0018      	movs	r0, r3
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	b01c      	add	sp, #112	@ 0x70
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	ffff8f8f 	.word	0xffff8f8f
 800b5bc:	ffffc080 	.word	0xffffc080
 800b5c0:	ffff80c0 	.word	0xffff80c0
 800b5c4:	ffff8fbf 	.word	0xffff8fbf
 800b5c8:	ffff8080 	.word	0xffff8080
 800b5cc:	ffffbf8f 	.word	0xffffbf8f

0800b5d0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b08c      	sub	sp, #48	@ 0x30
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	7b1b      	ldrb	r3, [r3, #12]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d000      	beq.n	800b5e4 <USB_DeactivateEndpoint+0x14>
 800b5e2:	e07e      	b.n	800b6e2 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	785b      	ldrb	r3, [r3, #1]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d03c      	beq.n	800b666 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b5ec:	687a      	ldr	r2, [r7, #4]
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	18d2      	adds	r2, r2, r3
 800b5f6:	210c      	movs	r1, #12
 800b5f8:	187b      	adds	r3, r7, r1
 800b5fa:	8812      	ldrh	r2, [r2, #0]
 800b5fc:	801a      	strh	r2, [r3, #0]
 800b5fe:	187b      	adds	r3, r7, r1
 800b600:	881b      	ldrh	r3, [r3, #0]
 800b602:	2240      	movs	r2, #64	@ 0x40
 800b604:	4013      	ands	r3, r2
 800b606:	d016      	beq.n	800b636 <USB_DeactivateEndpoint+0x66>
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	009b      	lsls	r3, r3, #2
 800b610:	18d3      	adds	r3, r2, r3
 800b612:	881b      	ldrh	r3, [r3, #0]
 800b614:	b29a      	uxth	r2, r3
 800b616:	200a      	movs	r0, #10
 800b618:	183b      	adds	r3, r7, r0
 800b61a:	49c7      	ldr	r1, [pc, #796]	@ (800b938 <USB_DeactivateEndpoint+0x368>)
 800b61c:	400a      	ands	r2, r1
 800b61e:	801a      	strh	r2, [r3, #0]
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	18d3      	adds	r3, r2, r3
 800b62a:	183a      	adds	r2, r7, r0
 800b62c:	8812      	ldrh	r2, [r2, #0]
 800b62e:	49c3      	ldr	r1, [pc, #780]	@ (800b93c <USB_DeactivateEndpoint+0x36c>)
 800b630:	430a      	orrs	r2, r1
 800b632:	b292      	uxth	r2, r2
 800b634:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	009b      	lsls	r3, r3, #2
 800b63e:	18d3      	adds	r3, r2, r3
 800b640:	881b      	ldrh	r3, [r3, #0]
 800b642:	b29a      	uxth	r2, r3
 800b644:	2008      	movs	r0, #8
 800b646:	183b      	adds	r3, r7, r0
 800b648:	49bd      	ldr	r1, [pc, #756]	@ (800b940 <USB_DeactivateEndpoint+0x370>)
 800b64a:	400a      	ands	r2, r1
 800b64c:	801a      	strh	r2, [r3, #0]
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	009b      	lsls	r3, r3, #2
 800b656:	18d3      	adds	r3, r2, r3
 800b658:	183a      	adds	r2, r7, r0
 800b65a:	8812      	ldrh	r2, [r2, #0]
 800b65c:	49b9      	ldr	r1, [pc, #740]	@ (800b944 <USB_DeactivateEndpoint+0x374>)
 800b65e:	430a      	orrs	r2, r1
 800b660:	b292      	uxth	r2, r2
 800b662:	801a      	strh	r2, [r3, #0]
 800b664:	e163      	b.n	800b92e <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	18d2      	adds	r2, r2, r3
 800b670:	2112      	movs	r1, #18
 800b672:	187b      	adds	r3, r7, r1
 800b674:	8812      	ldrh	r2, [r2, #0]
 800b676:	801a      	strh	r2, [r3, #0]
 800b678:	187b      	adds	r3, r7, r1
 800b67a:	881a      	ldrh	r2, [r3, #0]
 800b67c:	2380      	movs	r3, #128	@ 0x80
 800b67e:	01db      	lsls	r3, r3, #7
 800b680:	4013      	ands	r3, r2
 800b682:	d016      	beq.n	800b6b2 <USB_DeactivateEndpoint+0xe2>
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	009b      	lsls	r3, r3, #2
 800b68c:	18d3      	adds	r3, r2, r3
 800b68e:	881b      	ldrh	r3, [r3, #0]
 800b690:	b29a      	uxth	r2, r3
 800b692:	2010      	movs	r0, #16
 800b694:	183b      	adds	r3, r7, r0
 800b696:	49a8      	ldr	r1, [pc, #672]	@ (800b938 <USB_DeactivateEndpoint+0x368>)
 800b698:	400a      	ands	r2, r1
 800b69a:	801a      	strh	r2, [r3, #0]
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	009b      	lsls	r3, r3, #2
 800b6a4:	18d3      	adds	r3, r2, r3
 800b6a6:	183a      	adds	r2, r7, r0
 800b6a8:	8812      	ldrh	r2, [r2, #0]
 800b6aa:	49a7      	ldr	r1, [pc, #668]	@ (800b948 <USB_DeactivateEndpoint+0x378>)
 800b6ac:	430a      	orrs	r2, r1
 800b6ae:	b292      	uxth	r2, r2
 800b6b0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	009b      	lsls	r3, r3, #2
 800b6ba:	18d3      	adds	r3, r2, r3
 800b6bc:	881b      	ldrh	r3, [r3, #0]
 800b6be:	b29a      	uxth	r2, r3
 800b6c0:	200e      	movs	r0, #14
 800b6c2:	183b      	adds	r3, r7, r0
 800b6c4:	49a1      	ldr	r1, [pc, #644]	@ (800b94c <USB_DeactivateEndpoint+0x37c>)
 800b6c6:	400a      	ands	r2, r1
 800b6c8:	801a      	strh	r2, [r3, #0]
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	18d3      	adds	r3, r2, r3
 800b6d4:	183a      	adds	r2, r7, r0
 800b6d6:	8812      	ldrh	r2, [r2, #0]
 800b6d8:	499a      	ldr	r1, [pc, #616]	@ (800b944 <USB_DeactivateEndpoint+0x374>)
 800b6da:	430a      	orrs	r2, r1
 800b6dc:	b292      	uxth	r2, r2
 800b6de:	801a      	strh	r2, [r3, #0]
 800b6e0:	e125      	b.n	800b92e <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	785b      	ldrb	r3, [r3, #1]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d000      	beq.n	800b6ec <USB_DeactivateEndpoint+0x11c>
 800b6ea:	e090      	b.n	800b80e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b6ec:	687a      	ldr	r2, [r7, #4]
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	009b      	lsls	r3, r3, #2
 800b6f4:	18d2      	adds	r2, r2, r3
 800b6f6:	2120      	movs	r1, #32
 800b6f8:	187b      	adds	r3, r7, r1
 800b6fa:	8812      	ldrh	r2, [r2, #0]
 800b6fc:	801a      	strh	r2, [r3, #0]
 800b6fe:	187b      	adds	r3, r7, r1
 800b700:	881a      	ldrh	r2, [r3, #0]
 800b702:	2380      	movs	r3, #128	@ 0x80
 800b704:	01db      	lsls	r3, r3, #7
 800b706:	4013      	ands	r3, r2
 800b708:	d016      	beq.n	800b738 <USB_DeactivateEndpoint+0x168>
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	18d3      	adds	r3, r2, r3
 800b714:	881b      	ldrh	r3, [r3, #0]
 800b716:	b29a      	uxth	r2, r3
 800b718:	201e      	movs	r0, #30
 800b71a:	183b      	adds	r3, r7, r0
 800b71c:	4986      	ldr	r1, [pc, #536]	@ (800b938 <USB_DeactivateEndpoint+0x368>)
 800b71e:	400a      	ands	r2, r1
 800b720:	801a      	strh	r2, [r3, #0]
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	009b      	lsls	r3, r3, #2
 800b72a:	18d3      	adds	r3, r2, r3
 800b72c:	183a      	adds	r2, r7, r0
 800b72e:	8812      	ldrh	r2, [r2, #0]
 800b730:	4985      	ldr	r1, [pc, #532]	@ (800b948 <USB_DeactivateEndpoint+0x378>)
 800b732:	430a      	orrs	r2, r1
 800b734:	b292      	uxth	r2, r2
 800b736:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b738:	687a      	ldr	r2, [r7, #4]
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	009b      	lsls	r3, r3, #2
 800b740:	18d2      	adds	r2, r2, r3
 800b742:	211c      	movs	r1, #28
 800b744:	187b      	adds	r3, r7, r1
 800b746:	8812      	ldrh	r2, [r2, #0]
 800b748:	801a      	strh	r2, [r3, #0]
 800b74a:	187b      	adds	r3, r7, r1
 800b74c:	881b      	ldrh	r3, [r3, #0]
 800b74e:	2240      	movs	r2, #64	@ 0x40
 800b750:	4013      	ands	r3, r2
 800b752:	d016      	beq.n	800b782 <USB_DeactivateEndpoint+0x1b2>
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	18d3      	adds	r3, r2, r3
 800b75e:	881b      	ldrh	r3, [r3, #0]
 800b760:	b29a      	uxth	r2, r3
 800b762:	201a      	movs	r0, #26
 800b764:	183b      	adds	r3, r7, r0
 800b766:	4974      	ldr	r1, [pc, #464]	@ (800b938 <USB_DeactivateEndpoint+0x368>)
 800b768:	400a      	ands	r2, r1
 800b76a:	801a      	strh	r2, [r3, #0]
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	18d3      	adds	r3, r2, r3
 800b776:	183a      	adds	r2, r7, r0
 800b778:	8812      	ldrh	r2, [r2, #0]
 800b77a:	4970      	ldr	r1, [pc, #448]	@ (800b93c <USB_DeactivateEndpoint+0x36c>)
 800b77c:	430a      	orrs	r2, r1
 800b77e:	b292      	uxth	r2, r2
 800b780:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	009b      	lsls	r3, r3, #2
 800b78a:	18d3      	adds	r3, r2, r3
 800b78c:	881b      	ldrh	r3, [r3, #0]
 800b78e:	b29a      	uxth	r2, r3
 800b790:	2018      	movs	r0, #24
 800b792:	183b      	adds	r3, r7, r0
 800b794:	4968      	ldr	r1, [pc, #416]	@ (800b938 <USB_DeactivateEndpoint+0x368>)
 800b796:	400a      	ands	r2, r1
 800b798:	801a      	strh	r2, [r3, #0]
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	18d3      	adds	r3, r2, r3
 800b7a4:	183a      	adds	r2, r7, r0
 800b7a6:	8812      	ldrh	r2, [r2, #0]
 800b7a8:	4964      	ldr	r1, [pc, #400]	@ (800b93c <USB_DeactivateEndpoint+0x36c>)
 800b7aa:	430a      	orrs	r2, r1
 800b7ac:	b292      	uxth	r2, r2
 800b7ae:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	009b      	lsls	r3, r3, #2
 800b7b8:	18d3      	adds	r3, r2, r3
 800b7ba:	881b      	ldrh	r3, [r3, #0]
 800b7bc:	b29a      	uxth	r2, r3
 800b7be:	2016      	movs	r0, #22
 800b7c0:	183b      	adds	r3, r7, r0
 800b7c2:	4962      	ldr	r1, [pc, #392]	@ (800b94c <USB_DeactivateEndpoint+0x37c>)
 800b7c4:	400a      	ands	r2, r1
 800b7c6:	801a      	strh	r2, [r3, #0]
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	18d3      	adds	r3, r2, r3
 800b7d2:	183a      	adds	r2, r7, r0
 800b7d4:	8812      	ldrh	r2, [r2, #0]
 800b7d6:	495b      	ldr	r1, [pc, #364]	@ (800b944 <USB_DeactivateEndpoint+0x374>)
 800b7d8:	430a      	orrs	r2, r1
 800b7da:	b292      	uxth	r2, r2
 800b7dc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b7de:	687a      	ldr	r2, [r7, #4]
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	009b      	lsls	r3, r3, #2
 800b7e6:	18d3      	adds	r3, r2, r3
 800b7e8:	881b      	ldrh	r3, [r3, #0]
 800b7ea:	b29a      	uxth	r2, r3
 800b7ec:	2014      	movs	r0, #20
 800b7ee:	183b      	adds	r3, r7, r0
 800b7f0:	4953      	ldr	r1, [pc, #332]	@ (800b940 <USB_DeactivateEndpoint+0x370>)
 800b7f2:	400a      	ands	r2, r1
 800b7f4:	801a      	strh	r2, [r3, #0]
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	009b      	lsls	r3, r3, #2
 800b7fe:	18d3      	adds	r3, r2, r3
 800b800:	183a      	adds	r2, r7, r0
 800b802:	8812      	ldrh	r2, [r2, #0]
 800b804:	494f      	ldr	r1, [pc, #316]	@ (800b944 <USB_DeactivateEndpoint+0x374>)
 800b806:	430a      	orrs	r2, r1
 800b808:	b292      	uxth	r2, r2
 800b80a:	801a      	strh	r2, [r3, #0]
 800b80c:	e08f      	b.n	800b92e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	18d2      	adds	r2, r2, r3
 800b818:	212e      	movs	r1, #46	@ 0x2e
 800b81a:	187b      	adds	r3, r7, r1
 800b81c:	8812      	ldrh	r2, [r2, #0]
 800b81e:	801a      	strh	r2, [r3, #0]
 800b820:	187b      	adds	r3, r7, r1
 800b822:	881a      	ldrh	r2, [r3, #0]
 800b824:	2380      	movs	r3, #128	@ 0x80
 800b826:	01db      	lsls	r3, r3, #7
 800b828:	4013      	ands	r3, r2
 800b82a:	d016      	beq.n	800b85a <USB_DeactivateEndpoint+0x28a>
 800b82c:	687a      	ldr	r2, [r7, #4]
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	009b      	lsls	r3, r3, #2
 800b834:	18d3      	adds	r3, r2, r3
 800b836:	881b      	ldrh	r3, [r3, #0]
 800b838:	b29a      	uxth	r2, r3
 800b83a:	202c      	movs	r0, #44	@ 0x2c
 800b83c:	183b      	adds	r3, r7, r0
 800b83e:	493e      	ldr	r1, [pc, #248]	@ (800b938 <USB_DeactivateEndpoint+0x368>)
 800b840:	400a      	ands	r2, r1
 800b842:	801a      	strh	r2, [r3, #0]
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	009b      	lsls	r3, r3, #2
 800b84c:	18d3      	adds	r3, r2, r3
 800b84e:	183a      	adds	r2, r7, r0
 800b850:	8812      	ldrh	r2, [r2, #0]
 800b852:	493d      	ldr	r1, [pc, #244]	@ (800b948 <USB_DeactivateEndpoint+0x378>)
 800b854:	430a      	orrs	r2, r1
 800b856:	b292      	uxth	r2, r2
 800b858:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	009b      	lsls	r3, r3, #2
 800b862:	18d2      	adds	r2, r2, r3
 800b864:	212a      	movs	r1, #42	@ 0x2a
 800b866:	187b      	adds	r3, r7, r1
 800b868:	8812      	ldrh	r2, [r2, #0]
 800b86a:	801a      	strh	r2, [r3, #0]
 800b86c:	187b      	adds	r3, r7, r1
 800b86e:	881b      	ldrh	r3, [r3, #0]
 800b870:	2240      	movs	r2, #64	@ 0x40
 800b872:	4013      	ands	r3, r2
 800b874:	d016      	beq.n	800b8a4 <USB_DeactivateEndpoint+0x2d4>
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	009b      	lsls	r3, r3, #2
 800b87e:	18d3      	adds	r3, r2, r3
 800b880:	881b      	ldrh	r3, [r3, #0]
 800b882:	b29a      	uxth	r2, r3
 800b884:	2028      	movs	r0, #40	@ 0x28
 800b886:	183b      	adds	r3, r7, r0
 800b888:	492b      	ldr	r1, [pc, #172]	@ (800b938 <USB_DeactivateEndpoint+0x368>)
 800b88a:	400a      	ands	r2, r1
 800b88c:	801a      	strh	r2, [r3, #0]
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	781b      	ldrb	r3, [r3, #0]
 800b894:	009b      	lsls	r3, r3, #2
 800b896:	18d3      	adds	r3, r2, r3
 800b898:	183a      	adds	r2, r7, r0
 800b89a:	8812      	ldrh	r2, [r2, #0]
 800b89c:	4927      	ldr	r1, [pc, #156]	@ (800b93c <USB_DeactivateEndpoint+0x36c>)
 800b89e:	430a      	orrs	r2, r1
 800b8a0:	b292      	uxth	r2, r2
 800b8a2:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	18d3      	adds	r3, r2, r3
 800b8ae:	881b      	ldrh	r3, [r3, #0]
 800b8b0:	b29a      	uxth	r2, r3
 800b8b2:	2026      	movs	r0, #38	@ 0x26
 800b8b4:	183b      	adds	r3, r7, r0
 800b8b6:	4920      	ldr	r1, [pc, #128]	@ (800b938 <USB_DeactivateEndpoint+0x368>)
 800b8b8:	400a      	ands	r2, r1
 800b8ba:	801a      	strh	r2, [r3, #0]
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	009b      	lsls	r3, r3, #2
 800b8c4:	18d3      	adds	r3, r2, r3
 800b8c6:	183a      	adds	r2, r7, r0
 800b8c8:	8812      	ldrh	r2, [r2, #0]
 800b8ca:	491f      	ldr	r1, [pc, #124]	@ (800b948 <USB_DeactivateEndpoint+0x378>)
 800b8cc:	430a      	orrs	r2, r1
 800b8ce:	b292      	uxth	r2, r2
 800b8d0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	009b      	lsls	r3, r3, #2
 800b8da:	18d3      	adds	r3, r2, r3
 800b8dc:	881b      	ldrh	r3, [r3, #0]
 800b8de:	b29a      	uxth	r2, r3
 800b8e0:	2024      	movs	r0, #36	@ 0x24
 800b8e2:	183b      	adds	r3, r7, r0
 800b8e4:	4916      	ldr	r1, [pc, #88]	@ (800b940 <USB_DeactivateEndpoint+0x370>)
 800b8e6:	400a      	ands	r2, r1
 800b8e8:	801a      	strh	r2, [r3, #0]
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	18d3      	adds	r3, r2, r3
 800b8f4:	183a      	adds	r2, r7, r0
 800b8f6:	8812      	ldrh	r2, [r2, #0]
 800b8f8:	4912      	ldr	r1, [pc, #72]	@ (800b944 <USB_DeactivateEndpoint+0x374>)
 800b8fa:	430a      	orrs	r2, r1
 800b8fc:	b292      	uxth	r2, r2
 800b8fe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	009b      	lsls	r3, r3, #2
 800b908:	18d3      	adds	r3, r2, r3
 800b90a:	881b      	ldrh	r3, [r3, #0]
 800b90c:	b29a      	uxth	r2, r3
 800b90e:	2022      	movs	r0, #34	@ 0x22
 800b910:	183b      	adds	r3, r7, r0
 800b912:	490e      	ldr	r1, [pc, #56]	@ (800b94c <USB_DeactivateEndpoint+0x37c>)
 800b914:	400a      	ands	r2, r1
 800b916:	801a      	strh	r2, [r3, #0]
 800b918:	687a      	ldr	r2, [r7, #4]
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	18d3      	adds	r3, r2, r3
 800b922:	183a      	adds	r2, r7, r0
 800b924:	8812      	ldrh	r2, [r2, #0]
 800b926:	4907      	ldr	r1, [pc, #28]	@ (800b944 <USB_DeactivateEndpoint+0x374>)
 800b928:	430a      	orrs	r2, r1
 800b92a:	b292      	uxth	r2, r2
 800b92c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b92e:	2300      	movs	r3, #0
}
 800b930:	0018      	movs	r0, r3
 800b932:	46bd      	mov	sp, r7
 800b934:	b00c      	add	sp, #48	@ 0x30
 800b936:	bd80      	pop	{r7, pc}
 800b938:	ffff8f8f 	.word	0xffff8f8f
 800b93c:	ffff80c0 	.word	0xffff80c0
 800b940:	ffff8fbf 	.word	0xffff8fbf
 800b944:	ffff8080 	.word	0xffff8080
 800b948:	ffffc080 	.word	0xffffc080
 800b94c:	ffffbf8f 	.word	0xffffbf8f

0800b950 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b950:	b590      	push	{r4, r7, lr}
 800b952:	b0c3      	sub	sp, #268	@ 0x10c
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	785b      	ldrb	r3, [r3, #1]
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d001      	beq.n	800b966 <USB_EPStartXfer+0x16>
 800b962:	f000 fd2d 	bl	800c3c0 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	699a      	ldr	r2, [r3, #24]
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	691b      	ldr	r3, [r3, #16]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d905      	bls.n	800b97e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	691b      	ldr	r3, [r3, #16]
 800b976:	1d7a      	adds	r2, r7, #5
 800b978:	32ff      	adds	r2, #255	@ 0xff
 800b97a:	6013      	str	r3, [r2, #0]
 800b97c:	e004      	b.n	800b988 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	699b      	ldr	r3, [r3, #24]
 800b982:	1d7a      	adds	r2, r7, #5
 800b984:	32ff      	adds	r2, #255	@ 0xff
 800b986:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	7b1b      	ldrb	r3, [r3, #12]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d125      	bne.n	800b9dc <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	6959      	ldr	r1, [r3, #20]
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	88da      	ldrh	r2, [r3, #6]
 800b998:	1d7b      	adds	r3, r7, #5
 800b99a:	33ff      	adds	r3, #255	@ 0xff
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f001 fa3f 	bl	800ce24 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	613b      	str	r3, [r7, #16]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2250      	movs	r2, #80	@ 0x50
 800b9ae:	5a9b      	ldrh	r3, [r3, r2]
 800b9b0:	b29b      	uxth	r3, r3
 800b9b2:	001a      	movs	r2, r3
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	189b      	adds	r3, r3, r2
 800b9b8:	613b      	str	r3, [r7, #16]
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	00da      	lsls	r2, r3, #3
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	18d3      	adds	r3, r2, r3
 800b9c4:	4ad7      	ldr	r2, [pc, #860]	@ (800bd24 <USB_EPStartXfer+0x3d4>)
 800b9c6:	4694      	mov	ip, r2
 800b9c8:	4463      	add	r3, ip
 800b9ca:	60fb      	str	r3, [r7, #12]
 800b9cc:	1d7b      	adds	r3, r7, #5
 800b9ce:	33ff      	adds	r3, #255	@ 0xff
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	b29a      	uxth	r2, r3
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	801a      	strh	r2, [r3, #0]
 800b9d8:	f000 fccd 	bl	800c376 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	78db      	ldrb	r3, [r3, #3]
 800b9e0:	2b02      	cmp	r3, #2
 800b9e2:	d000      	beq.n	800b9e6 <USB_EPStartXfer+0x96>
 800b9e4:	e362      	b.n	800c0ac <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	6a1a      	ldr	r2, [r3, #32]
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	691b      	ldr	r3, [r3, #16]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d800      	bhi.n	800b9f4 <USB_EPStartXfer+0xa4>
 800b9f2:	e309      	b.n	800c008 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b9f4:	687a      	ldr	r2, [r7, #4]
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	009b      	lsls	r3, r3, #2
 800b9fc:	18d3      	adds	r3, r2, r3
 800b9fe:	881b      	ldrh	r3, [r3, #0]
 800ba00:	b29a      	uxth	r2, r3
 800ba02:	2056      	movs	r0, #86	@ 0x56
 800ba04:	183b      	adds	r3, r7, r0
 800ba06:	49c8      	ldr	r1, [pc, #800]	@ (800bd28 <USB_EPStartXfer+0x3d8>)
 800ba08:	400a      	ands	r2, r1
 800ba0a:	801a      	strh	r2, [r3, #0]
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	18d3      	adds	r3, r2, r3
 800ba16:	183a      	adds	r2, r7, r0
 800ba18:	8812      	ldrh	r2, [r2, #0]
 800ba1a:	49c4      	ldr	r1, [pc, #784]	@ (800bd2c <USB_EPStartXfer+0x3dc>)
 800ba1c:	430a      	orrs	r2, r1
 800ba1e:	b292      	uxth	r2, r2
 800ba20:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	6a1a      	ldr	r2, [r3, #32]
 800ba26:	1d7b      	adds	r3, r7, #5
 800ba28:	33ff      	adds	r3, #255	@ 0xff
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	1ad2      	subs	r2, r2, r3
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	009b      	lsls	r3, r3, #2
 800ba3a:	18d3      	adds	r3, r2, r3
 800ba3c:	881b      	ldrh	r3, [r3, #0]
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	001a      	movs	r2, r3
 800ba42:	2340      	movs	r3, #64	@ 0x40
 800ba44:	4013      	ands	r3, r2
 800ba46:	d100      	bne.n	800ba4a <USB_EPStartXfer+0xfa>
 800ba48:	e176      	b.n	800bd38 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	785b      	ldrb	r3, [r3, #1]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d000      	beq.n	800ba58 <USB_EPStartXfer+0x108>
 800ba56:	e074      	b.n	800bb42 <USB_EPStartXfer+0x1f2>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2250      	movs	r2, #80	@ 0x50
 800ba60:	5a9b      	ldrh	r3, [r3, r2]
 800ba62:	b29b      	uxth	r3, r3
 800ba64:	001a      	movs	r2, r3
 800ba66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba68:	189b      	adds	r3, r3, r2
 800ba6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	00da      	lsls	r2, r3, #3
 800ba72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba74:	18d3      	adds	r3, r2, r3
 800ba76:	4aae      	ldr	r2, [pc, #696]	@ (800bd30 <USB_EPStartXfer+0x3e0>)
 800ba78:	4694      	mov	ip, r2
 800ba7a:	4463      	add	r3, ip
 800ba7c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba80:	881b      	ldrh	r3, [r3, #0]
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	059b      	lsls	r3, r3, #22
 800ba86:	0d9b      	lsrs	r3, r3, #22
 800ba88:	b29a      	uxth	r2, r3
 800ba8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba8c:	801a      	strh	r2, [r3, #0]
 800ba8e:	1d7b      	adds	r3, r7, #5
 800ba90:	33ff      	adds	r3, #255	@ 0xff
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d108      	bne.n	800baaa <USB_EPStartXfer+0x15a>
 800ba98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba9a:	881b      	ldrh	r3, [r3, #0]
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	4aa5      	ldr	r2, [pc, #660]	@ (800bd34 <USB_EPStartXfer+0x3e4>)
 800baa0:	4313      	orrs	r3, r2
 800baa2:	b29a      	uxth	r2, r3
 800baa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baa6:	801a      	strh	r2, [r3, #0]
 800baa8:	e066      	b.n	800bb78 <USB_EPStartXfer+0x228>
 800baaa:	1d7b      	adds	r3, r7, #5
 800baac:	33ff      	adds	r3, #255	@ 0xff
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	2b3e      	cmp	r3, #62	@ 0x3e
 800bab2:	d821      	bhi.n	800baf8 <USB_EPStartXfer+0x1a8>
 800bab4:	1d7b      	adds	r3, r7, #5
 800bab6:	33ff      	adds	r3, #255	@ 0xff
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	085b      	lsrs	r3, r3, #1
 800babc:	1c7a      	adds	r2, r7, #1
 800babe:	32ff      	adds	r2, #255	@ 0xff
 800bac0:	6013      	str	r3, [r2, #0]
 800bac2:	1d7b      	adds	r3, r7, #5
 800bac4:	33ff      	adds	r3, #255	@ 0xff
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2201      	movs	r2, #1
 800baca:	4013      	ands	r3, r2
 800bacc:	d006      	beq.n	800badc <USB_EPStartXfer+0x18c>
 800bace:	1c7b      	adds	r3, r7, #1
 800bad0:	33ff      	adds	r3, #255	@ 0xff
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	3301      	adds	r3, #1
 800bad6:	1c7a      	adds	r2, r7, #1
 800bad8:	32ff      	adds	r2, #255	@ 0xff
 800bada:	6013      	str	r3, [r2, #0]
 800badc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bade:	881b      	ldrh	r3, [r3, #0]
 800bae0:	b29a      	uxth	r2, r3
 800bae2:	1c7b      	adds	r3, r7, #1
 800bae4:	33ff      	adds	r3, #255	@ 0xff
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	b29b      	uxth	r3, r3
 800baea:	029b      	lsls	r3, r3, #10
 800baec:	b29b      	uxth	r3, r3
 800baee:	4313      	orrs	r3, r2
 800baf0:	b29a      	uxth	r2, r3
 800baf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baf4:	801a      	strh	r2, [r3, #0]
 800baf6:	e03f      	b.n	800bb78 <USB_EPStartXfer+0x228>
 800baf8:	1d7b      	adds	r3, r7, #5
 800bafa:	33ff      	adds	r3, #255	@ 0xff
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	095b      	lsrs	r3, r3, #5
 800bb00:	1c7a      	adds	r2, r7, #1
 800bb02:	32ff      	adds	r2, #255	@ 0xff
 800bb04:	6013      	str	r3, [r2, #0]
 800bb06:	1d7b      	adds	r3, r7, #5
 800bb08:	33ff      	adds	r3, #255	@ 0xff
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	221f      	movs	r2, #31
 800bb0e:	4013      	ands	r3, r2
 800bb10:	d106      	bne.n	800bb20 <USB_EPStartXfer+0x1d0>
 800bb12:	1c7b      	adds	r3, r7, #1
 800bb14:	33ff      	adds	r3, #255	@ 0xff
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	3b01      	subs	r3, #1
 800bb1a:	1c7a      	adds	r2, r7, #1
 800bb1c:	32ff      	adds	r2, #255	@ 0xff
 800bb1e:	6013      	str	r3, [r2, #0]
 800bb20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb22:	881b      	ldrh	r3, [r3, #0]
 800bb24:	b29a      	uxth	r2, r3
 800bb26:	1c7b      	adds	r3, r7, #1
 800bb28:	33ff      	adds	r3, #255	@ 0xff
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	029b      	lsls	r3, r3, #10
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	4313      	orrs	r3, r2
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	4a7f      	ldr	r2, [pc, #508]	@ (800bd34 <USB_EPStartXfer+0x3e4>)
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	b29a      	uxth	r2, r3
 800bb3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb3e:	801a      	strh	r2, [r3, #0]
 800bb40:	e01a      	b.n	800bb78 <USB_EPStartXfer+0x228>
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	785b      	ldrb	r3, [r3, #1]
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d116      	bne.n	800bb78 <USB_EPStartXfer+0x228>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2250      	movs	r2, #80	@ 0x50
 800bb4e:	5a9b      	ldrh	r3, [r3, r2]
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	001a      	movs	r2, r3
 800bb54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb56:	189b      	adds	r3, r3, r2
 800bb58:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	781b      	ldrb	r3, [r3, #0]
 800bb5e:	00da      	lsls	r2, r3, #3
 800bb60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb62:	18d3      	adds	r3, r2, r3
 800bb64:	4a72      	ldr	r2, [pc, #456]	@ (800bd30 <USB_EPStartXfer+0x3e0>)
 800bb66:	4694      	mov	ip, r2
 800bb68:	4463      	add	r3, ip
 800bb6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb6c:	1d7b      	adds	r3, r7, #5
 800bb6e:	33ff      	adds	r3, #255	@ 0xff
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	b29a      	uxth	r2, r3
 800bb74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb76:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bb78:	2076      	movs	r0, #118	@ 0x76
 800bb7a:	183b      	adds	r3, r7, r0
 800bb7c:	683a      	ldr	r2, [r7, #0]
 800bb7e:	8952      	ldrh	r2, [r2, #10]
 800bb80:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	6959      	ldr	r1, [r3, #20]
 800bb86:	1d7b      	adds	r3, r7, #5
 800bb88:	33ff      	adds	r3, #255	@ 0xff
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	b29c      	uxth	r4, r3
 800bb8e:	183b      	adds	r3, r7, r0
 800bb90:	881a      	ldrh	r2, [r3, #0]
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	0023      	movs	r3, r4
 800bb96:	f001 f945 	bl	800ce24 <USB_WritePMA>
            ep->xfer_buff += len;
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	695a      	ldr	r2, [r3, #20]
 800bb9e:	1d7b      	adds	r3, r7, #5
 800bba0:	33ff      	adds	r3, #255	@ 0xff
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	18d2      	adds	r2, r2, r3
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	6a1a      	ldr	r2, [r3, #32]
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	691b      	ldr	r3, [r3, #16]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d908      	bls.n	800bbc8 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	6a1a      	ldr	r2, [r3, #32]
 800bbba:	1d7b      	adds	r3, r7, #5
 800bbbc:	33ff      	adds	r3, #255	@ 0xff
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	1ad2      	subs	r2, r2, r3
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	621a      	str	r2, [r3, #32]
 800bbc6:	e007      	b.n	800bbd8 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	6a1b      	ldr	r3, [r3, #32]
 800bbcc:	1d7a      	adds	r2, r7, #5
 800bbce:	32ff      	adds	r2, #255	@ 0xff
 800bbd0:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	785b      	ldrb	r3, [r3, #1]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d000      	beq.n	800bbe2 <USB_EPStartXfer+0x292>
 800bbe0:	e070      	b.n	800bcc4 <USB_EPStartXfer+0x374>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	61bb      	str	r3, [r7, #24]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2250      	movs	r2, #80	@ 0x50
 800bbea:	5a9b      	ldrh	r3, [r3, r2]
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	001a      	movs	r2, r3
 800bbf0:	69bb      	ldr	r3, [r7, #24]
 800bbf2:	189b      	adds	r3, r3, r2
 800bbf4:	61bb      	str	r3, [r7, #24]
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	00da      	lsls	r2, r3, #3
 800bbfc:	69bb      	ldr	r3, [r7, #24]
 800bbfe:	18d3      	adds	r3, r2, r3
 800bc00:	4a48      	ldr	r2, [pc, #288]	@ (800bd24 <USB_EPStartXfer+0x3d4>)
 800bc02:	4694      	mov	ip, r2
 800bc04:	4463      	add	r3, ip
 800bc06:	617b      	str	r3, [r7, #20]
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	881b      	ldrh	r3, [r3, #0]
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	059b      	lsls	r3, r3, #22
 800bc10:	0d9b      	lsrs	r3, r3, #22
 800bc12:	b29a      	uxth	r2, r3
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	801a      	strh	r2, [r3, #0]
 800bc18:	1d7b      	adds	r3, r7, #5
 800bc1a:	33ff      	adds	r3, #255	@ 0xff
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d108      	bne.n	800bc34 <USB_EPStartXfer+0x2e4>
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	881b      	ldrh	r3, [r3, #0]
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	4a42      	ldr	r2, [pc, #264]	@ (800bd34 <USB_EPStartXfer+0x3e4>)
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	b29a      	uxth	r2, r3
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	801a      	strh	r2, [r3, #0]
 800bc32:	e064      	b.n	800bcfe <USB_EPStartXfer+0x3ae>
 800bc34:	1d7b      	adds	r3, r7, #5
 800bc36:	33ff      	adds	r3, #255	@ 0xff
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	2b3e      	cmp	r3, #62	@ 0x3e
 800bc3c:	d81f      	bhi.n	800bc7e <USB_EPStartXfer+0x32e>
 800bc3e:	1d7b      	adds	r3, r7, #5
 800bc40:	33ff      	adds	r3, #255	@ 0xff
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	085b      	lsrs	r3, r3, #1
 800bc46:	21fc      	movs	r1, #252	@ 0xfc
 800bc48:	187a      	adds	r2, r7, r1
 800bc4a:	6013      	str	r3, [r2, #0]
 800bc4c:	1d7b      	adds	r3, r7, #5
 800bc4e:	33ff      	adds	r3, #255	@ 0xff
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	2201      	movs	r2, #1
 800bc54:	4013      	ands	r3, r2
 800bc56:	d004      	beq.n	800bc62 <USB_EPStartXfer+0x312>
 800bc58:	187b      	adds	r3, r7, r1
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	3301      	adds	r3, #1
 800bc5e:	187a      	adds	r2, r7, r1
 800bc60:	6013      	str	r3, [r2, #0]
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	881b      	ldrh	r3, [r3, #0]
 800bc66:	b29a      	uxth	r2, r3
 800bc68:	23fc      	movs	r3, #252	@ 0xfc
 800bc6a:	18fb      	adds	r3, r7, r3
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	029b      	lsls	r3, r3, #10
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	4313      	orrs	r3, r2
 800bc76:	b29a      	uxth	r2, r3
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	801a      	strh	r2, [r3, #0]
 800bc7c:	e03f      	b.n	800bcfe <USB_EPStartXfer+0x3ae>
 800bc7e:	1d7b      	adds	r3, r7, #5
 800bc80:	33ff      	adds	r3, #255	@ 0xff
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	095b      	lsrs	r3, r3, #5
 800bc86:	21fc      	movs	r1, #252	@ 0xfc
 800bc88:	187a      	adds	r2, r7, r1
 800bc8a:	6013      	str	r3, [r2, #0]
 800bc8c:	1d7b      	adds	r3, r7, #5
 800bc8e:	33ff      	adds	r3, #255	@ 0xff
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	221f      	movs	r2, #31
 800bc94:	4013      	ands	r3, r2
 800bc96:	d104      	bne.n	800bca2 <USB_EPStartXfer+0x352>
 800bc98:	187b      	adds	r3, r7, r1
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	3b01      	subs	r3, #1
 800bc9e:	187a      	adds	r2, r7, r1
 800bca0:	6013      	str	r3, [r2, #0]
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	881b      	ldrh	r3, [r3, #0]
 800bca6:	b29a      	uxth	r2, r3
 800bca8:	23fc      	movs	r3, #252	@ 0xfc
 800bcaa:	18fb      	adds	r3, r7, r3
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	029b      	lsls	r3, r3, #10
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	b29b      	uxth	r3, r3
 800bcb8:	4a1e      	ldr	r2, [pc, #120]	@ (800bd34 <USB_EPStartXfer+0x3e4>)
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	b29a      	uxth	r2, r3
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	801a      	strh	r2, [r3, #0]
 800bcc2:	e01c      	b.n	800bcfe <USB_EPStartXfer+0x3ae>
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	785b      	ldrb	r3, [r3, #1]
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d118      	bne.n	800bcfe <USB_EPStartXfer+0x3ae>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	623b      	str	r3, [r7, #32]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2250      	movs	r2, #80	@ 0x50
 800bcd4:	5a9b      	ldrh	r3, [r3, r2]
 800bcd6:	b29b      	uxth	r3, r3
 800bcd8:	001a      	movs	r2, r3
 800bcda:	6a3b      	ldr	r3, [r7, #32]
 800bcdc:	189b      	adds	r3, r3, r2
 800bcde:	623b      	str	r3, [r7, #32]
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	781b      	ldrb	r3, [r3, #0]
 800bce4:	00da      	lsls	r2, r3, #3
 800bce6:	6a3b      	ldr	r3, [r7, #32]
 800bce8:	18d3      	adds	r3, r2, r3
 800bcea:	4a0e      	ldr	r2, [pc, #56]	@ (800bd24 <USB_EPStartXfer+0x3d4>)
 800bcec:	4694      	mov	ip, r2
 800bcee:	4463      	add	r3, ip
 800bcf0:	61fb      	str	r3, [r7, #28]
 800bcf2:	1d7b      	adds	r3, r7, #5
 800bcf4:	33ff      	adds	r3, #255	@ 0xff
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	b29a      	uxth	r2, r3
 800bcfa:	69fb      	ldr	r3, [r7, #28]
 800bcfc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bcfe:	2076      	movs	r0, #118	@ 0x76
 800bd00:	183b      	adds	r3, r7, r0
 800bd02:	683a      	ldr	r2, [r7, #0]
 800bd04:	8912      	ldrh	r2, [r2, #8]
 800bd06:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	6959      	ldr	r1, [r3, #20]
 800bd0c:	1d7b      	adds	r3, r7, #5
 800bd0e:	33ff      	adds	r3, #255	@ 0xff
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	b29c      	uxth	r4, r3
 800bd14:	183b      	adds	r3, r7, r0
 800bd16:	881a      	ldrh	r2, [r3, #0]
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	0023      	movs	r3, r4
 800bd1c:	f001 f882 	bl	800ce24 <USB_WritePMA>
 800bd20:	e329      	b.n	800c376 <USB_EPStartXfer+0xa26>
 800bd22:	46c0      	nop			@ (mov r8, r8)
 800bd24:	00000402 	.word	0x00000402
 800bd28:	ffff8f8f 	.word	0xffff8f8f
 800bd2c:	ffff8180 	.word	0xffff8180
 800bd30:	00000406 	.word	0x00000406
 800bd34:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	785b      	ldrb	r3, [r3, #1]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d000      	beq.n	800bd42 <USB_EPStartXfer+0x3f2>
 800bd40:	e070      	b.n	800be24 <USB_EPStartXfer+0x4d4>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2250      	movs	r2, #80	@ 0x50
 800bd4a:	5a9b      	ldrh	r3, [r3, r2]
 800bd4c:	b29b      	uxth	r3, r3
 800bd4e:	001a      	movs	r2, r3
 800bd50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd52:	189b      	adds	r3, r3, r2
 800bd54:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	00da      	lsls	r2, r3, #3
 800bd5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd5e:	18d3      	adds	r3, r2, r3
 800bd60:	4acd      	ldr	r2, [pc, #820]	@ (800c098 <USB_EPStartXfer+0x748>)
 800bd62:	4694      	mov	ip, r2
 800bd64:	4463      	add	r3, ip
 800bd66:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd6a:	881b      	ldrh	r3, [r3, #0]
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	059b      	lsls	r3, r3, #22
 800bd70:	0d9b      	lsrs	r3, r3, #22
 800bd72:	b29a      	uxth	r2, r3
 800bd74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd76:	801a      	strh	r2, [r3, #0]
 800bd78:	1d7b      	adds	r3, r7, #5
 800bd7a:	33ff      	adds	r3, #255	@ 0xff
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d108      	bne.n	800bd94 <USB_EPStartXfer+0x444>
 800bd82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd84:	881b      	ldrh	r3, [r3, #0]
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	4ac4      	ldr	r2, [pc, #784]	@ (800c09c <USB_EPStartXfer+0x74c>)
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	b29a      	uxth	r2, r3
 800bd8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd90:	801a      	strh	r2, [r3, #0]
 800bd92:	e064      	b.n	800be5e <USB_EPStartXfer+0x50e>
 800bd94:	1d7b      	adds	r3, r7, #5
 800bd96:	33ff      	adds	r3, #255	@ 0xff
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2b3e      	cmp	r3, #62	@ 0x3e
 800bd9c:	d81f      	bhi.n	800bdde <USB_EPStartXfer+0x48e>
 800bd9e:	1d7b      	adds	r3, r7, #5
 800bda0:	33ff      	adds	r3, #255	@ 0xff
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	085b      	lsrs	r3, r3, #1
 800bda6:	21f8      	movs	r1, #248	@ 0xf8
 800bda8:	187a      	adds	r2, r7, r1
 800bdaa:	6013      	str	r3, [r2, #0]
 800bdac:	1d7b      	adds	r3, r7, #5
 800bdae:	33ff      	adds	r3, #255	@ 0xff
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	4013      	ands	r3, r2
 800bdb6:	d004      	beq.n	800bdc2 <USB_EPStartXfer+0x472>
 800bdb8:	187b      	adds	r3, r7, r1
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	187a      	adds	r2, r7, r1
 800bdc0:	6013      	str	r3, [r2, #0]
 800bdc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdc4:	881b      	ldrh	r3, [r3, #0]
 800bdc6:	b29a      	uxth	r2, r3
 800bdc8:	23f8      	movs	r3, #248	@ 0xf8
 800bdca:	18fb      	adds	r3, r7, r3
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	029b      	lsls	r3, r3, #10
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	b29a      	uxth	r2, r3
 800bdd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdda:	801a      	strh	r2, [r3, #0]
 800bddc:	e03f      	b.n	800be5e <USB_EPStartXfer+0x50e>
 800bdde:	1d7b      	adds	r3, r7, #5
 800bde0:	33ff      	adds	r3, #255	@ 0xff
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	095b      	lsrs	r3, r3, #5
 800bde6:	21f8      	movs	r1, #248	@ 0xf8
 800bde8:	187a      	adds	r2, r7, r1
 800bdea:	6013      	str	r3, [r2, #0]
 800bdec:	1d7b      	adds	r3, r7, #5
 800bdee:	33ff      	adds	r3, #255	@ 0xff
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	221f      	movs	r2, #31
 800bdf4:	4013      	ands	r3, r2
 800bdf6:	d104      	bne.n	800be02 <USB_EPStartXfer+0x4b2>
 800bdf8:	187b      	adds	r3, r7, r1
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	187a      	adds	r2, r7, r1
 800be00:	6013      	str	r3, [r2, #0]
 800be02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be04:	881b      	ldrh	r3, [r3, #0]
 800be06:	b29a      	uxth	r2, r3
 800be08:	23f8      	movs	r3, #248	@ 0xf8
 800be0a:	18fb      	adds	r3, r7, r3
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	b29b      	uxth	r3, r3
 800be10:	029b      	lsls	r3, r3, #10
 800be12:	b29b      	uxth	r3, r3
 800be14:	4313      	orrs	r3, r2
 800be16:	b29b      	uxth	r3, r3
 800be18:	4aa0      	ldr	r2, [pc, #640]	@ (800c09c <USB_EPStartXfer+0x74c>)
 800be1a:	4313      	orrs	r3, r2
 800be1c:	b29a      	uxth	r2, r3
 800be1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be20:	801a      	strh	r2, [r3, #0]
 800be22:	e01c      	b.n	800be5e <USB_EPStartXfer+0x50e>
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	785b      	ldrb	r3, [r3, #1]
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d118      	bne.n	800be5e <USB_EPStartXfer+0x50e>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	653b      	str	r3, [r7, #80]	@ 0x50
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2250      	movs	r2, #80	@ 0x50
 800be34:	5a9b      	ldrh	r3, [r3, r2]
 800be36:	b29b      	uxth	r3, r3
 800be38:	001a      	movs	r2, r3
 800be3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be3c:	189b      	adds	r3, r3, r2
 800be3e:	653b      	str	r3, [r7, #80]	@ 0x50
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	00da      	lsls	r2, r3, #3
 800be46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be48:	18d3      	adds	r3, r2, r3
 800be4a:	4a93      	ldr	r2, [pc, #588]	@ (800c098 <USB_EPStartXfer+0x748>)
 800be4c:	4694      	mov	ip, r2
 800be4e:	4463      	add	r3, ip
 800be50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be52:	1d7b      	adds	r3, r7, #5
 800be54:	33ff      	adds	r3, #255	@ 0xff
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	b29a      	uxth	r2, r3
 800be5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800be5e:	2076      	movs	r0, #118	@ 0x76
 800be60:	183b      	adds	r3, r7, r0
 800be62:	683a      	ldr	r2, [r7, #0]
 800be64:	8912      	ldrh	r2, [r2, #8]
 800be66:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	6959      	ldr	r1, [r3, #20]
 800be6c:	1d7b      	adds	r3, r7, #5
 800be6e:	33ff      	adds	r3, #255	@ 0xff
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	b29c      	uxth	r4, r3
 800be74:	183b      	adds	r3, r7, r0
 800be76:	881a      	ldrh	r2, [r3, #0]
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	0023      	movs	r3, r4
 800be7c:	f000 ffd2 	bl	800ce24 <USB_WritePMA>
            ep->xfer_buff += len;
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	695a      	ldr	r2, [r3, #20]
 800be84:	1d7b      	adds	r3, r7, #5
 800be86:	33ff      	adds	r3, #255	@ 0xff
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	18d2      	adds	r2, r2, r3
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	6a1a      	ldr	r2, [r3, #32]
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	691b      	ldr	r3, [r3, #16]
 800be98:	429a      	cmp	r2, r3
 800be9a:	d908      	bls.n	800beae <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	6a1a      	ldr	r2, [r3, #32]
 800bea0:	1d7b      	adds	r3, r7, #5
 800bea2:	33ff      	adds	r3, #255	@ 0xff
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	1ad2      	subs	r2, r2, r3
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	621a      	str	r2, [r3, #32]
 800beac:	e007      	b.n	800bebe <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	6a1b      	ldr	r3, [r3, #32]
 800beb2:	1d7a      	adds	r2, r7, #5
 800beb4:	32ff      	adds	r2, #255	@ 0xff
 800beb6:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	2200      	movs	r2, #0
 800bebc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	643b      	str	r3, [r7, #64]	@ 0x40
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	785b      	ldrb	r3, [r3, #1]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d000      	beq.n	800becc <USB_EPStartXfer+0x57c>
 800beca:	e070      	b.n	800bfae <USB_EPStartXfer+0x65e>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2250      	movs	r2, #80	@ 0x50
 800bed4:	5a9b      	ldrh	r3, [r3, r2]
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	001a      	movs	r2, r3
 800beda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bedc:	189b      	adds	r3, r3, r2
 800bede:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	781b      	ldrb	r3, [r3, #0]
 800bee4:	00da      	lsls	r2, r3, #3
 800bee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bee8:	18d3      	adds	r3, r2, r3
 800beea:	4a6d      	ldr	r2, [pc, #436]	@ (800c0a0 <USB_EPStartXfer+0x750>)
 800beec:	4694      	mov	ip, r2
 800beee:	4463      	add	r3, ip
 800bef0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bef4:	881b      	ldrh	r3, [r3, #0]
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	059b      	lsls	r3, r3, #22
 800befa:	0d9b      	lsrs	r3, r3, #22
 800befc:	b29a      	uxth	r2, r3
 800befe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf00:	801a      	strh	r2, [r3, #0]
 800bf02:	1d7b      	adds	r3, r7, #5
 800bf04:	33ff      	adds	r3, #255	@ 0xff
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d108      	bne.n	800bf1e <USB_EPStartXfer+0x5ce>
 800bf0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf0e:	881b      	ldrh	r3, [r3, #0]
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	4a62      	ldr	r2, [pc, #392]	@ (800c09c <USB_EPStartXfer+0x74c>)
 800bf14:	4313      	orrs	r3, r2
 800bf16:	b29a      	uxth	r2, r3
 800bf18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf1a:	801a      	strh	r2, [r3, #0]
 800bf1c:	e062      	b.n	800bfe4 <USB_EPStartXfer+0x694>
 800bf1e:	1d7b      	adds	r3, r7, #5
 800bf20:	33ff      	adds	r3, #255	@ 0xff
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2b3e      	cmp	r3, #62	@ 0x3e
 800bf26:	d81f      	bhi.n	800bf68 <USB_EPStartXfer+0x618>
 800bf28:	1d7b      	adds	r3, r7, #5
 800bf2a:	33ff      	adds	r3, #255	@ 0xff
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	085b      	lsrs	r3, r3, #1
 800bf30:	21f4      	movs	r1, #244	@ 0xf4
 800bf32:	187a      	adds	r2, r7, r1
 800bf34:	6013      	str	r3, [r2, #0]
 800bf36:	1d7b      	adds	r3, r7, #5
 800bf38:	33ff      	adds	r3, #255	@ 0xff
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	4013      	ands	r3, r2
 800bf40:	d004      	beq.n	800bf4c <USB_EPStartXfer+0x5fc>
 800bf42:	187b      	adds	r3, r7, r1
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	3301      	adds	r3, #1
 800bf48:	187a      	adds	r2, r7, r1
 800bf4a:	6013      	str	r3, [r2, #0]
 800bf4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf4e:	881b      	ldrh	r3, [r3, #0]
 800bf50:	b29a      	uxth	r2, r3
 800bf52:	23f4      	movs	r3, #244	@ 0xf4
 800bf54:	18fb      	adds	r3, r7, r3
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	029b      	lsls	r3, r3, #10
 800bf5c:	b29b      	uxth	r3, r3
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	b29a      	uxth	r2, r3
 800bf62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf64:	801a      	strh	r2, [r3, #0]
 800bf66:	e03d      	b.n	800bfe4 <USB_EPStartXfer+0x694>
 800bf68:	1d7b      	adds	r3, r7, #5
 800bf6a:	33ff      	adds	r3, #255	@ 0xff
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	095b      	lsrs	r3, r3, #5
 800bf70:	21f4      	movs	r1, #244	@ 0xf4
 800bf72:	187a      	adds	r2, r7, r1
 800bf74:	6013      	str	r3, [r2, #0]
 800bf76:	1d7b      	adds	r3, r7, #5
 800bf78:	33ff      	adds	r3, #255	@ 0xff
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	221f      	movs	r2, #31
 800bf7e:	4013      	ands	r3, r2
 800bf80:	d104      	bne.n	800bf8c <USB_EPStartXfer+0x63c>
 800bf82:	187b      	adds	r3, r7, r1
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	3b01      	subs	r3, #1
 800bf88:	187a      	adds	r2, r7, r1
 800bf8a:	6013      	str	r3, [r2, #0]
 800bf8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf8e:	881b      	ldrh	r3, [r3, #0]
 800bf90:	b29a      	uxth	r2, r3
 800bf92:	23f4      	movs	r3, #244	@ 0xf4
 800bf94:	18fb      	adds	r3, r7, r3
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	029b      	lsls	r3, r3, #10
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	4a3e      	ldr	r2, [pc, #248]	@ (800c09c <USB_EPStartXfer+0x74c>)
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	b29a      	uxth	r2, r3
 800bfa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfaa:	801a      	strh	r2, [r3, #0]
 800bfac:	e01a      	b.n	800bfe4 <USB_EPStartXfer+0x694>
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	785b      	ldrb	r3, [r3, #1]
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	d116      	bne.n	800bfe4 <USB_EPStartXfer+0x694>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2250      	movs	r2, #80	@ 0x50
 800bfba:	5a9b      	ldrh	r3, [r3, r2]
 800bfbc:	b29b      	uxth	r3, r3
 800bfbe:	001a      	movs	r2, r3
 800bfc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfc2:	189b      	adds	r3, r3, r2
 800bfc4:	643b      	str	r3, [r7, #64]	@ 0x40
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	00da      	lsls	r2, r3, #3
 800bfcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfce:	18d3      	adds	r3, r2, r3
 800bfd0:	4a33      	ldr	r2, [pc, #204]	@ (800c0a0 <USB_EPStartXfer+0x750>)
 800bfd2:	4694      	mov	ip, r2
 800bfd4:	4463      	add	r3, ip
 800bfd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bfd8:	1d7b      	adds	r3, r7, #5
 800bfda:	33ff      	adds	r3, #255	@ 0xff
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	b29a      	uxth	r2, r3
 800bfe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfe2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bfe4:	2076      	movs	r0, #118	@ 0x76
 800bfe6:	183b      	adds	r3, r7, r0
 800bfe8:	683a      	ldr	r2, [r7, #0]
 800bfea:	8952      	ldrh	r2, [r2, #10]
 800bfec:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	6959      	ldr	r1, [r3, #20]
 800bff2:	1d7b      	adds	r3, r7, #5
 800bff4:	33ff      	adds	r3, #255	@ 0xff
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	b29c      	uxth	r4, r3
 800bffa:	183b      	adds	r3, r7, r0
 800bffc:	881a      	ldrh	r2, [r3, #0]
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	0023      	movs	r3, r4
 800c002:	f000 ff0f 	bl	800ce24 <USB_WritePMA>
 800c006:	e1b6      	b.n	800c376 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	6a1b      	ldr	r3, [r3, #32]
 800c00c:	1d7a      	adds	r2, r7, #5
 800c00e:	32ff      	adds	r2, #255	@ 0xff
 800c010:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	009b      	lsls	r3, r3, #2
 800c01a:	18d3      	adds	r3, r2, r3
 800c01c:	881b      	ldrh	r3, [r3, #0]
 800c01e:	b29a      	uxth	r2, r3
 800c020:	2062      	movs	r0, #98	@ 0x62
 800c022:	183b      	adds	r3, r7, r0
 800c024:	491f      	ldr	r1, [pc, #124]	@ (800c0a4 <USB_EPStartXfer+0x754>)
 800c026:	400a      	ands	r2, r1
 800c028:	801a      	strh	r2, [r3, #0]
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	18d3      	adds	r3, r2, r3
 800c034:	183a      	adds	r2, r7, r0
 800c036:	8812      	ldrh	r2, [r2, #0]
 800c038:	491b      	ldr	r1, [pc, #108]	@ (800c0a8 <USB_EPStartXfer+0x758>)
 800c03a:	430a      	orrs	r2, r1
 800c03c:	b292      	uxth	r2, r2
 800c03e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2250      	movs	r2, #80	@ 0x50
 800c048:	5a9b      	ldrh	r3, [r3, r2]
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	001a      	movs	r2, r3
 800c04e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c050:	189b      	adds	r3, r3, r2
 800c052:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	00da      	lsls	r2, r3, #3
 800c05a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c05c:	18d3      	adds	r3, r2, r3
 800c05e:	4a0e      	ldr	r2, [pc, #56]	@ (800c098 <USB_EPStartXfer+0x748>)
 800c060:	4694      	mov	ip, r2
 800c062:	4463      	add	r3, ip
 800c064:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c066:	1d7b      	adds	r3, r7, #5
 800c068:	33ff      	adds	r3, #255	@ 0xff
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	b29a      	uxth	r2, r3
 800c06e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c070:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c072:	2076      	movs	r0, #118	@ 0x76
 800c074:	183b      	adds	r3, r7, r0
 800c076:	683a      	ldr	r2, [r7, #0]
 800c078:	8912      	ldrh	r2, [r2, #8]
 800c07a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	6959      	ldr	r1, [r3, #20]
 800c080:	1d7b      	adds	r3, r7, #5
 800c082:	33ff      	adds	r3, #255	@ 0xff
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	b29c      	uxth	r4, r3
 800c088:	183b      	adds	r3, r7, r0
 800c08a:	881a      	ldrh	r2, [r3, #0]
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	0023      	movs	r3, r4
 800c090:	f000 fec8 	bl	800ce24 <USB_WritePMA>
 800c094:	e16f      	b.n	800c376 <USB_EPStartXfer+0xa26>
 800c096:	46c0      	nop			@ (mov r8, r8)
 800c098:	00000402 	.word	0x00000402
 800c09c:	ffff8000 	.word	0xffff8000
 800c0a0:	00000406 	.word	0x00000406
 800c0a4:	ffff8e8f 	.word	0xffff8e8f
 800c0a8:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	6a1a      	ldr	r2, [r3, #32]
 800c0b0:	1d7b      	adds	r3, r7, #5
 800c0b2:	33ff      	adds	r3, #255	@ 0xff
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	1ad2      	subs	r2, r2, r3
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c0bc:	687a      	ldr	r2, [r7, #4]
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	18d3      	adds	r3, r2, r3
 800c0c6:	881b      	ldrh	r3, [r3, #0]
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	001a      	movs	r2, r3
 800c0cc:	2340      	movs	r3, #64	@ 0x40
 800c0ce:	4013      	ands	r3, r2
 800c0d0:	d100      	bne.n	800c0d4 <USB_EPStartXfer+0x784>
 800c0d2:	e0a4      	b.n	800c21e <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	673b      	str	r3, [r7, #112]	@ 0x70
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	785b      	ldrb	r3, [r3, #1]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d000      	beq.n	800c0e2 <USB_EPStartXfer+0x792>
 800c0e0:	e070      	b.n	800c1c4 <USB_EPStartXfer+0x874>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2250      	movs	r2, #80	@ 0x50
 800c0ea:	5a9b      	ldrh	r3, [r3, r2]
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	001a      	movs	r2, r3
 800c0f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0f2:	189b      	adds	r3, r3, r2
 800c0f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	00da      	lsls	r2, r3, #3
 800c0fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0fe:	18d3      	adds	r3, r2, r3
 800c100:	4ada      	ldr	r2, [pc, #872]	@ (800c46c <USB_EPStartXfer+0xb1c>)
 800c102:	4694      	mov	ip, r2
 800c104:	4463      	add	r3, ip
 800c106:	667b      	str	r3, [r7, #100]	@ 0x64
 800c108:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c10a:	881b      	ldrh	r3, [r3, #0]
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	059b      	lsls	r3, r3, #22
 800c110:	0d9b      	lsrs	r3, r3, #22
 800c112:	b29a      	uxth	r2, r3
 800c114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c116:	801a      	strh	r2, [r3, #0]
 800c118:	1d7b      	adds	r3, r7, #5
 800c11a:	33ff      	adds	r3, #255	@ 0xff
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d108      	bne.n	800c134 <USB_EPStartXfer+0x7e4>
 800c122:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c124:	881b      	ldrh	r3, [r3, #0]
 800c126:	b29b      	uxth	r3, r3
 800c128:	4ad1      	ldr	r2, [pc, #836]	@ (800c470 <USB_EPStartXfer+0xb20>)
 800c12a:	4313      	orrs	r3, r2
 800c12c:	b29a      	uxth	r2, r3
 800c12e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c130:	801a      	strh	r2, [r3, #0]
 800c132:	e062      	b.n	800c1fa <USB_EPStartXfer+0x8aa>
 800c134:	1d7b      	adds	r3, r7, #5
 800c136:	33ff      	adds	r3, #255	@ 0xff
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2b3e      	cmp	r3, #62	@ 0x3e
 800c13c:	d81f      	bhi.n	800c17e <USB_EPStartXfer+0x82e>
 800c13e:	1d7b      	adds	r3, r7, #5
 800c140:	33ff      	adds	r3, #255	@ 0xff
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	085b      	lsrs	r3, r3, #1
 800c146:	21f0      	movs	r1, #240	@ 0xf0
 800c148:	187a      	adds	r2, r7, r1
 800c14a:	6013      	str	r3, [r2, #0]
 800c14c:	1d7b      	adds	r3, r7, #5
 800c14e:	33ff      	adds	r3, #255	@ 0xff
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	2201      	movs	r2, #1
 800c154:	4013      	ands	r3, r2
 800c156:	d004      	beq.n	800c162 <USB_EPStartXfer+0x812>
 800c158:	187b      	adds	r3, r7, r1
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	3301      	adds	r3, #1
 800c15e:	187a      	adds	r2, r7, r1
 800c160:	6013      	str	r3, [r2, #0]
 800c162:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c164:	881b      	ldrh	r3, [r3, #0]
 800c166:	b29a      	uxth	r2, r3
 800c168:	23f0      	movs	r3, #240	@ 0xf0
 800c16a:	18fb      	adds	r3, r7, r3
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	b29b      	uxth	r3, r3
 800c170:	029b      	lsls	r3, r3, #10
 800c172:	b29b      	uxth	r3, r3
 800c174:	4313      	orrs	r3, r2
 800c176:	b29a      	uxth	r2, r3
 800c178:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c17a:	801a      	strh	r2, [r3, #0]
 800c17c:	e03d      	b.n	800c1fa <USB_EPStartXfer+0x8aa>
 800c17e:	1d7b      	adds	r3, r7, #5
 800c180:	33ff      	adds	r3, #255	@ 0xff
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	095b      	lsrs	r3, r3, #5
 800c186:	21f0      	movs	r1, #240	@ 0xf0
 800c188:	187a      	adds	r2, r7, r1
 800c18a:	6013      	str	r3, [r2, #0]
 800c18c:	1d7b      	adds	r3, r7, #5
 800c18e:	33ff      	adds	r3, #255	@ 0xff
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	221f      	movs	r2, #31
 800c194:	4013      	ands	r3, r2
 800c196:	d104      	bne.n	800c1a2 <USB_EPStartXfer+0x852>
 800c198:	187b      	adds	r3, r7, r1
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	3b01      	subs	r3, #1
 800c19e:	187a      	adds	r2, r7, r1
 800c1a0:	6013      	str	r3, [r2, #0]
 800c1a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c1a4:	881b      	ldrh	r3, [r3, #0]
 800c1a6:	b29a      	uxth	r2, r3
 800c1a8:	23f0      	movs	r3, #240	@ 0xf0
 800c1aa:	18fb      	adds	r3, r7, r3
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	029b      	lsls	r3, r3, #10
 800c1b2:	b29b      	uxth	r3, r3
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	4aad      	ldr	r2, [pc, #692]	@ (800c470 <USB_EPStartXfer+0xb20>)
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	b29a      	uxth	r2, r3
 800c1be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c1c0:	801a      	strh	r2, [r3, #0]
 800c1c2:	e01a      	b.n	800c1fa <USB_EPStartXfer+0x8aa>
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	785b      	ldrb	r3, [r3, #1]
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d116      	bne.n	800c1fa <USB_EPStartXfer+0x8aa>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2250      	movs	r2, #80	@ 0x50
 800c1d0:	5a9b      	ldrh	r3, [r3, r2]
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	001a      	movs	r2, r3
 800c1d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c1d8:	189b      	adds	r3, r3, r2
 800c1da:	673b      	str	r3, [r7, #112]	@ 0x70
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	00da      	lsls	r2, r3, #3
 800c1e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c1e4:	18d3      	adds	r3, r2, r3
 800c1e6:	4aa1      	ldr	r2, [pc, #644]	@ (800c46c <USB_EPStartXfer+0xb1c>)
 800c1e8:	4694      	mov	ip, r2
 800c1ea:	4463      	add	r3, ip
 800c1ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c1ee:	1d7b      	adds	r3, r7, #5
 800c1f0:	33ff      	adds	r3, #255	@ 0xff
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	b29a      	uxth	r2, r3
 800c1f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c1f8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800c1fa:	2076      	movs	r0, #118	@ 0x76
 800c1fc:	183b      	adds	r3, r7, r0
 800c1fe:	683a      	ldr	r2, [r7, #0]
 800c200:	8952      	ldrh	r2, [r2, #10]
 800c202:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	6959      	ldr	r1, [r3, #20]
 800c208:	1d7b      	adds	r3, r7, #5
 800c20a:	33ff      	adds	r3, #255	@ 0xff
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	b29c      	uxth	r4, r3
 800c210:	183b      	adds	r3, r7, r0
 800c212:	881a      	ldrh	r2, [r3, #0]
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	0023      	movs	r3, r4
 800c218:	f000 fe04 	bl	800ce24 <USB_WritePMA>
 800c21c:	e0ab      	b.n	800c376 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	785b      	ldrb	r3, [r3, #1]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d000      	beq.n	800c228 <USB_EPStartXfer+0x8d8>
 800c226:	e070      	b.n	800c30a <USB_EPStartXfer+0x9ba>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2250      	movs	r2, #80	@ 0x50
 800c230:	5a9b      	ldrh	r3, [r3, r2]
 800c232:	b29b      	uxth	r3, r3
 800c234:	001a      	movs	r2, r3
 800c236:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c238:	189b      	adds	r3, r3, r2
 800c23a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	00da      	lsls	r2, r3, #3
 800c242:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c244:	18d3      	adds	r3, r2, r3
 800c246:	4a8b      	ldr	r2, [pc, #556]	@ (800c474 <USB_EPStartXfer+0xb24>)
 800c248:	4694      	mov	ip, r2
 800c24a:	4463      	add	r3, ip
 800c24c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c24e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c250:	881b      	ldrh	r3, [r3, #0]
 800c252:	b29b      	uxth	r3, r3
 800c254:	059b      	lsls	r3, r3, #22
 800c256:	0d9b      	lsrs	r3, r3, #22
 800c258:	b29a      	uxth	r2, r3
 800c25a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c25c:	801a      	strh	r2, [r3, #0]
 800c25e:	1d7b      	adds	r3, r7, #5
 800c260:	33ff      	adds	r3, #255	@ 0xff
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d108      	bne.n	800c27a <USB_EPStartXfer+0x92a>
 800c268:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c26a:	881b      	ldrh	r3, [r3, #0]
 800c26c:	b29b      	uxth	r3, r3
 800c26e:	4a80      	ldr	r2, [pc, #512]	@ (800c470 <USB_EPStartXfer+0xb20>)
 800c270:	4313      	orrs	r3, r2
 800c272:	b29a      	uxth	r2, r3
 800c274:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c276:	801a      	strh	r2, [r3, #0]
 800c278:	e06c      	b.n	800c354 <USB_EPStartXfer+0xa04>
 800c27a:	1d7b      	adds	r3, r7, #5
 800c27c:	33ff      	adds	r3, #255	@ 0xff
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	2b3e      	cmp	r3, #62	@ 0x3e
 800c282:	d81f      	bhi.n	800c2c4 <USB_EPStartXfer+0x974>
 800c284:	1d7b      	adds	r3, r7, #5
 800c286:	33ff      	adds	r3, #255	@ 0xff
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	085b      	lsrs	r3, r3, #1
 800c28c:	21ec      	movs	r1, #236	@ 0xec
 800c28e:	187a      	adds	r2, r7, r1
 800c290:	6013      	str	r3, [r2, #0]
 800c292:	1d7b      	adds	r3, r7, #5
 800c294:	33ff      	adds	r3, #255	@ 0xff
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2201      	movs	r2, #1
 800c29a:	4013      	ands	r3, r2
 800c29c:	d004      	beq.n	800c2a8 <USB_EPStartXfer+0x958>
 800c29e:	187b      	adds	r3, r7, r1
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	187a      	adds	r2, r7, r1
 800c2a6:	6013      	str	r3, [r2, #0]
 800c2a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c2aa:	881b      	ldrh	r3, [r3, #0]
 800c2ac:	b29a      	uxth	r2, r3
 800c2ae:	23ec      	movs	r3, #236	@ 0xec
 800c2b0:	18fb      	adds	r3, r7, r3
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	029b      	lsls	r3, r3, #10
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	b29a      	uxth	r2, r3
 800c2be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c2c0:	801a      	strh	r2, [r3, #0]
 800c2c2:	e047      	b.n	800c354 <USB_EPStartXfer+0xa04>
 800c2c4:	1d7b      	adds	r3, r7, #5
 800c2c6:	33ff      	adds	r3, #255	@ 0xff
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	095b      	lsrs	r3, r3, #5
 800c2cc:	21ec      	movs	r1, #236	@ 0xec
 800c2ce:	187a      	adds	r2, r7, r1
 800c2d0:	6013      	str	r3, [r2, #0]
 800c2d2:	1d7b      	adds	r3, r7, #5
 800c2d4:	33ff      	adds	r3, #255	@ 0xff
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	221f      	movs	r2, #31
 800c2da:	4013      	ands	r3, r2
 800c2dc:	d104      	bne.n	800c2e8 <USB_EPStartXfer+0x998>
 800c2de:	187b      	adds	r3, r7, r1
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	3b01      	subs	r3, #1
 800c2e4:	187a      	adds	r2, r7, r1
 800c2e6:	6013      	str	r3, [r2, #0]
 800c2e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c2ea:	881b      	ldrh	r3, [r3, #0]
 800c2ec:	b29a      	uxth	r2, r3
 800c2ee:	23ec      	movs	r3, #236	@ 0xec
 800c2f0:	18fb      	adds	r3, r7, r3
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	029b      	lsls	r3, r3, #10
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	4a5c      	ldr	r2, [pc, #368]	@ (800c470 <USB_EPStartXfer+0xb20>)
 800c300:	4313      	orrs	r3, r2
 800c302:	b29a      	uxth	r2, r3
 800c304:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c306:	801a      	strh	r2, [r3, #0]
 800c308:	e024      	b.n	800c354 <USB_EPStartXfer+0xa04>
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	785b      	ldrb	r3, [r3, #1]
 800c30e:	2b01      	cmp	r3, #1
 800c310:	d120      	bne.n	800c354 <USB_EPStartXfer+0xa04>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2184      	movs	r1, #132	@ 0x84
 800c316:	187a      	adds	r2, r7, r1
 800c318:	6013      	str	r3, [r2, #0]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2250      	movs	r2, #80	@ 0x50
 800c31e:	5a9b      	ldrh	r3, [r3, r2]
 800c320:	b29b      	uxth	r3, r3
 800c322:	001a      	movs	r2, r3
 800c324:	187b      	adds	r3, r7, r1
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	189b      	adds	r3, r3, r2
 800c32a:	187a      	adds	r2, r7, r1
 800c32c:	6013      	str	r3, [r2, #0]
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	00da      	lsls	r2, r3, #3
 800c334:	187b      	adds	r3, r7, r1
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	18d3      	adds	r3, r2, r3
 800c33a:	4a4e      	ldr	r2, [pc, #312]	@ (800c474 <USB_EPStartXfer+0xb24>)
 800c33c:	4694      	mov	ip, r2
 800c33e:	4463      	add	r3, ip
 800c340:	2180      	movs	r1, #128	@ 0x80
 800c342:	187a      	adds	r2, r7, r1
 800c344:	6013      	str	r3, [r2, #0]
 800c346:	1d7b      	adds	r3, r7, #5
 800c348:	33ff      	adds	r3, #255	@ 0xff
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	b29a      	uxth	r2, r3
 800c34e:	187b      	adds	r3, r7, r1
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c354:	2076      	movs	r0, #118	@ 0x76
 800c356:	183b      	adds	r3, r7, r0
 800c358:	683a      	ldr	r2, [r7, #0]
 800c35a:	8912      	ldrh	r2, [r2, #8]
 800c35c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	6959      	ldr	r1, [r3, #20]
 800c362:	1d7b      	adds	r3, r7, #5
 800c364:	33ff      	adds	r3, #255	@ 0xff
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	b29c      	uxth	r4, r3
 800c36a:	183b      	adds	r3, r7, r0
 800c36c:	881a      	ldrh	r2, [r3, #0]
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	0023      	movs	r3, r4
 800c372:	f000 fd57 	bl	800ce24 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	781b      	ldrb	r3, [r3, #0]
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	18d3      	adds	r3, r2, r3
 800c380:	881b      	ldrh	r3, [r3, #0]
 800c382:	b29a      	uxth	r2, r3
 800c384:	200a      	movs	r0, #10
 800c386:	183b      	adds	r3, r7, r0
 800c388:	493b      	ldr	r1, [pc, #236]	@ (800c478 <USB_EPStartXfer+0xb28>)
 800c38a:	400a      	ands	r2, r1
 800c38c:	801a      	strh	r2, [r3, #0]
 800c38e:	183b      	adds	r3, r7, r0
 800c390:	183a      	adds	r2, r7, r0
 800c392:	8812      	ldrh	r2, [r2, #0]
 800c394:	2110      	movs	r1, #16
 800c396:	404a      	eors	r2, r1
 800c398:	801a      	strh	r2, [r3, #0]
 800c39a:	183b      	adds	r3, r7, r0
 800c39c:	183a      	adds	r2, r7, r0
 800c39e:	8812      	ldrh	r2, [r2, #0]
 800c3a0:	2120      	movs	r1, #32
 800c3a2:	404a      	eors	r2, r1
 800c3a4:	801a      	strh	r2, [r3, #0]
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	009b      	lsls	r3, r3, #2
 800c3ae:	18d3      	adds	r3, r2, r3
 800c3b0:	183a      	adds	r2, r7, r0
 800c3b2:	8812      	ldrh	r2, [r2, #0]
 800c3b4:	4931      	ldr	r1, [pc, #196]	@ (800c47c <USB_EPStartXfer+0xb2c>)
 800c3b6:	430a      	orrs	r2, r1
 800c3b8:	b292      	uxth	r2, r2
 800c3ba:	801a      	strh	r2, [r3, #0]
 800c3bc:	f000 fbe9 	bl	800cb92 <USB_EPStartXfer+0x1242>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	7b1b      	ldrb	r3, [r3, #12]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d000      	beq.n	800c3ca <USB_EPStartXfer+0xa7a>
 800c3c8:	e0a8      	b.n	800c51c <USB_EPStartXfer+0xbcc>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	699a      	ldr	r2, [r3, #24]
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	691b      	ldr	r3, [r3, #16]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d90d      	bls.n	800c3f2 <USB_EPStartXfer+0xaa2>
      {
        len = ep->maxpacket;
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	691b      	ldr	r3, [r3, #16]
 800c3da:	1d7a      	adds	r2, r7, #5
 800c3dc:	32ff      	adds	r2, #255	@ 0xff
 800c3de:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	699a      	ldr	r2, [r3, #24]
 800c3e4:	1d7b      	adds	r3, r7, #5
 800c3e6:	33ff      	adds	r3, #255	@ 0xff
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	1ad2      	subs	r2, r2, r3
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	619a      	str	r2, [r3, #24]
 800c3f0:	e007      	b.n	800c402 <USB_EPStartXfer+0xab2>
      }
      else
      {
        len = ep->xfer_len;
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	699b      	ldr	r3, [r3, #24]
 800c3f6:	1d7a      	adds	r2, r7, #5
 800c3f8:	32ff      	adds	r2, #255	@ 0xff
 800c3fa:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	2200      	movs	r2, #0
 800c400:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2190      	movs	r1, #144	@ 0x90
 800c406:	187a      	adds	r2, r7, r1
 800c408:	6013      	str	r3, [r2, #0]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2250      	movs	r2, #80	@ 0x50
 800c40e:	5a9b      	ldrh	r3, [r3, r2]
 800c410:	b29b      	uxth	r3, r3
 800c412:	001a      	movs	r2, r3
 800c414:	187b      	adds	r3, r7, r1
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	189b      	adds	r3, r3, r2
 800c41a:	187a      	adds	r2, r7, r1
 800c41c:	6013      	str	r3, [r2, #0]
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	00da      	lsls	r2, r3, #3
 800c424:	187b      	adds	r3, r7, r1
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	18d3      	adds	r3, r2, r3
 800c42a:	4a10      	ldr	r2, [pc, #64]	@ (800c46c <USB_EPStartXfer+0xb1c>)
 800c42c:	4694      	mov	ip, r2
 800c42e:	4463      	add	r3, ip
 800c430:	218c      	movs	r1, #140	@ 0x8c
 800c432:	187a      	adds	r2, r7, r1
 800c434:	6013      	str	r3, [r2, #0]
 800c436:	187b      	adds	r3, r7, r1
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	881b      	ldrh	r3, [r3, #0]
 800c43c:	b29b      	uxth	r3, r3
 800c43e:	059b      	lsls	r3, r3, #22
 800c440:	0d9b      	lsrs	r3, r3, #22
 800c442:	b29a      	uxth	r2, r3
 800c444:	187b      	adds	r3, r7, r1
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	801a      	strh	r2, [r3, #0]
 800c44a:	1d7b      	adds	r3, r7, #5
 800c44c:	33ff      	adds	r3, #255	@ 0xff
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d115      	bne.n	800c480 <USB_EPStartXfer+0xb30>
 800c454:	187b      	adds	r3, r7, r1
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	881b      	ldrh	r3, [r3, #0]
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	4a04      	ldr	r2, [pc, #16]	@ (800c470 <USB_EPStartXfer+0xb20>)
 800c45e:	4313      	orrs	r3, r2
 800c460:	b29a      	uxth	r2, r3
 800c462:	187b      	adds	r3, r7, r1
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	801a      	strh	r2, [r3, #0]
 800c468:	e36e      	b.n	800cb48 <USB_EPStartXfer+0x11f8>
 800c46a:	46c0      	nop			@ (mov r8, r8)
 800c46c:	00000406 	.word	0x00000406
 800c470:	ffff8000 	.word	0xffff8000
 800c474:	00000402 	.word	0x00000402
 800c478:	ffff8fbf 	.word	0xffff8fbf
 800c47c:	ffff8080 	.word	0xffff8080
 800c480:	1d7b      	adds	r3, r7, #5
 800c482:	33ff      	adds	r3, #255	@ 0xff
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2b3e      	cmp	r3, #62	@ 0x3e
 800c488:	d822      	bhi.n	800c4d0 <USB_EPStartXfer+0xb80>
 800c48a:	1d7b      	adds	r3, r7, #5
 800c48c:	33ff      	adds	r3, #255	@ 0xff
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	085b      	lsrs	r3, r3, #1
 800c492:	21e8      	movs	r1, #232	@ 0xe8
 800c494:	187a      	adds	r2, r7, r1
 800c496:	6013      	str	r3, [r2, #0]
 800c498:	1d7b      	adds	r3, r7, #5
 800c49a:	33ff      	adds	r3, #255	@ 0xff
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	4013      	ands	r3, r2
 800c4a2:	d004      	beq.n	800c4ae <USB_EPStartXfer+0xb5e>
 800c4a4:	187b      	adds	r3, r7, r1
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	3301      	adds	r3, #1
 800c4aa:	187a      	adds	r2, r7, r1
 800c4ac:	6013      	str	r3, [r2, #0]
 800c4ae:	218c      	movs	r1, #140	@ 0x8c
 800c4b0:	187b      	adds	r3, r7, r1
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	881b      	ldrh	r3, [r3, #0]
 800c4b6:	b29a      	uxth	r2, r3
 800c4b8:	23e8      	movs	r3, #232	@ 0xe8
 800c4ba:	18fb      	adds	r3, r7, r3
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	029b      	lsls	r3, r3, #10
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	b29a      	uxth	r2, r3
 800c4c8:	187b      	adds	r3, r7, r1
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	801a      	strh	r2, [r3, #0]
 800c4ce:	e33b      	b.n	800cb48 <USB_EPStartXfer+0x11f8>
 800c4d0:	1d7b      	adds	r3, r7, #5
 800c4d2:	33ff      	adds	r3, #255	@ 0xff
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	095b      	lsrs	r3, r3, #5
 800c4d8:	21e8      	movs	r1, #232	@ 0xe8
 800c4da:	187a      	adds	r2, r7, r1
 800c4dc:	6013      	str	r3, [r2, #0]
 800c4de:	1d7b      	adds	r3, r7, #5
 800c4e0:	33ff      	adds	r3, #255	@ 0xff
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	221f      	movs	r2, #31
 800c4e6:	4013      	ands	r3, r2
 800c4e8:	d104      	bne.n	800c4f4 <USB_EPStartXfer+0xba4>
 800c4ea:	187b      	adds	r3, r7, r1
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	3b01      	subs	r3, #1
 800c4f0:	187a      	adds	r2, r7, r1
 800c4f2:	6013      	str	r3, [r2, #0]
 800c4f4:	218c      	movs	r1, #140	@ 0x8c
 800c4f6:	187b      	adds	r3, r7, r1
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	881b      	ldrh	r3, [r3, #0]
 800c4fc:	b29a      	uxth	r2, r3
 800c4fe:	23e8      	movs	r3, #232	@ 0xe8
 800c500:	18fb      	adds	r3, r7, r3
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	b29b      	uxth	r3, r3
 800c506:	029b      	lsls	r3, r3, #10
 800c508:	b29b      	uxth	r3, r3
 800c50a:	4313      	orrs	r3, r2
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	4ad7      	ldr	r2, [pc, #860]	@ (800c86c <USB_EPStartXfer+0xf1c>)
 800c510:	4313      	orrs	r3, r2
 800c512:	b29a      	uxth	r2, r3
 800c514:	187b      	adds	r3, r7, r1
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	801a      	strh	r2, [r3, #0]
 800c51a:	e315      	b.n	800cb48 <USB_EPStartXfer+0x11f8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	78db      	ldrb	r3, [r3, #3]
 800c520:	2b02      	cmp	r3, #2
 800c522:	d000      	beq.n	800c526 <USB_EPStartXfer+0xbd6>
 800c524:	e189      	b.n	800c83a <USB_EPStartXfer+0xeea>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	785b      	ldrb	r3, [r3, #1]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d000      	beq.n	800c530 <USB_EPStartXfer+0xbe0>
 800c52e:	e07b      	b.n	800c628 <USB_EPStartXfer+0xcd8>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	21ac      	movs	r1, #172	@ 0xac
 800c534:	187a      	adds	r2, r7, r1
 800c536:	6013      	str	r3, [r2, #0]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2250      	movs	r2, #80	@ 0x50
 800c53c:	5a9b      	ldrh	r3, [r3, r2]
 800c53e:	b29b      	uxth	r3, r3
 800c540:	001a      	movs	r2, r3
 800c542:	187b      	adds	r3, r7, r1
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	189b      	adds	r3, r3, r2
 800c548:	187a      	adds	r2, r7, r1
 800c54a:	6013      	str	r3, [r2, #0]
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	00da      	lsls	r2, r3, #3
 800c552:	187b      	adds	r3, r7, r1
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	18d3      	adds	r3, r2, r3
 800c558:	4ac5      	ldr	r2, [pc, #788]	@ (800c870 <USB_EPStartXfer+0xf20>)
 800c55a:	4694      	mov	ip, r2
 800c55c:	4463      	add	r3, ip
 800c55e:	21a8      	movs	r1, #168	@ 0xa8
 800c560:	187a      	adds	r2, r7, r1
 800c562:	6013      	str	r3, [r2, #0]
 800c564:	187b      	adds	r3, r7, r1
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	881b      	ldrh	r3, [r3, #0]
 800c56a:	b29b      	uxth	r3, r3
 800c56c:	059b      	lsls	r3, r3, #22
 800c56e:	0d9b      	lsrs	r3, r3, #22
 800c570:	b29a      	uxth	r2, r3
 800c572:	187b      	adds	r3, r7, r1
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	801a      	strh	r2, [r3, #0]
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	691b      	ldr	r3, [r3, #16]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d10a      	bne.n	800c596 <USB_EPStartXfer+0xc46>
 800c580:	187b      	adds	r3, r7, r1
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	881b      	ldrh	r3, [r3, #0]
 800c586:	b29b      	uxth	r3, r3
 800c588:	4ab8      	ldr	r2, [pc, #736]	@ (800c86c <USB_EPStartXfer+0xf1c>)
 800c58a:	4313      	orrs	r3, r2
 800c58c:	b29a      	uxth	r2, r3
 800c58e:	187b      	adds	r3, r7, r1
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	801a      	strh	r2, [r3, #0]
 800c594:	e06c      	b.n	800c670 <USB_EPStartXfer+0xd20>
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	691b      	ldr	r3, [r3, #16]
 800c59a:	2b3e      	cmp	r3, #62	@ 0x3e
 800c59c:	d820      	bhi.n	800c5e0 <USB_EPStartXfer+0xc90>
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	691b      	ldr	r3, [r3, #16]
 800c5a2:	085b      	lsrs	r3, r3, #1
 800c5a4:	21e4      	movs	r1, #228	@ 0xe4
 800c5a6:	187a      	adds	r2, r7, r1
 800c5a8:	6013      	str	r3, [r2, #0]
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	691b      	ldr	r3, [r3, #16]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	4013      	ands	r3, r2
 800c5b2:	d004      	beq.n	800c5be <USB_EPStartXfer+0xc6e>
 800c5b4:	187b      	adds	r3, r7, r1
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	187a      	adds	r2, r7, r1
 800c5bc:	6013      	str	r3, [r2, #0]
 800c5be:	21a8      	movs	r1, #168	@ 0xa8
 800c5c0:	187b      	adds	r3, r7, r1
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	881b      	ldrh	r3, [r3, #0]
 800c5c6:	b29a      	uxth	r2, r3
 800c5c8:	23e4      	movs	r3, #228	@ 0xe4
 800c5ca:	18fb      	adds	r3, r7, r3
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	029b      	lsls	r3, r3, #10
 800c5d2:	b29b      	uxth	r3, r3
 800c5d4:	4313      	orrs	r3, r2
 800c5d6:	b29a      	uxth	r2, r3
 800c5d8:	187b      	adds	r3, r7, r1
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	801a      	strh	r2, [r3, #0]
 800c5de:	e047      	b.n	800c670 <USB_EPStartXfer+0xd20>
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	691b      	ldr	r3, [r3, #16]
 800c5e4:	095b      	lsrs	r3, r3, #5
 800c5e6:	21e4      	movs	r1, #228	@ 0xe4
 800c5e8:	187a      	adds	r2, r7, r1
 800c5ea:	6013      	str	r3, [r2, #0]
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	691b      	ldr	r3, [r3, #16]
 800c5f0:	221f      	movs	r2, #31
 800c5f2:	4013      	ands	r3, r2
 800c5f4:	d104      	bne.n	800c600 <USB_EPStartXfer+0xcb0>
 800c5f6:	187b      	adds	r3, r7, r1
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	3b01      	subs	r3, #1
 800c5fc:	187a      	adds	r2, r7, r1
 800c5fe:	6013      	str	r3, [r2, #0]
 800c600:	21a8      	movs	r1, #168	@ 0xa8
 800c602:	187b      	adds	r3, r7, r1
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	881b      	ldrh	r3, [r3, #0]
 800c608:	b29a      	uxth	r2, r3
 800c60a:	23e4      	movs	r3, #228	@ 0xe4
 800c60c:	18fb      	adds	r3, r7, r3
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	b29b      	uxth	r3, r3
 800c612:	029b      	lsls	r3, r3, #10
 800c614:	b29b      	uxth	r3, r3
 800c616:	4313      	orrs	r3, r2
 800c618:	b29b      	uxth	r3, r3
 800c61a:	4a94      	ldr	r2, [pc, #592]	@ (800c86c <USB_EPStartXfer+0xf1c>)
 800c61c:	4313      	orrs	r3, r2
 800c61e:	b29a      	uxth	r2, r3
 800c620:	187b      	adds	r3, r7, r1
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	801a      	strh	r2, [r3, #0]
 800c626:	e023      	b.n	800c670 <USB_EPStartXfer+0xd20>
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	785b      	ldrb	r3, [r3, #1]
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	d11f      	bne.n	800c670 <USB_EPStartXfer+0xd20>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	21b4      	movs	r1, #180	@ 0xb4
 800c634:	187a      	adds	r2, r7, r1
 800c636:	6013      	str	r3, [r2, #0]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2250      	movs	r2, #80	@ 0x50
 800c63c:	5a9b      	ldrh	r3, [r3, r2]
 800c63e:	b29b      	uxth	r3, r3
 800c640:	001a      	movs	r2, r3
 800c642:	187b      	adds	r3, r7, r1
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	189b      	adds	r3, r3, r2
 800c648:	187a      	adds	r2, r7, r1
 800c64a:	6013      	str	r3, [r2, #0]
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	00da      	lsls	r2, r3, #3
 800c652:	187b      	adds	r3, r7, r1
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	18d3      	adds	r3, r2, r3
 800c658:	4a85      	ldr	r2, [pc, #532]	@ (800c870 <USB_EPStartXfer+0xf20>)
 800c65a:	4694      	mov	ip, r2
 800c65c:	4463      	add	r3, ip
 800c65e:	21b0      	movs	r1, #176	@ 0xb0
 800c660:	187a      	adds	r2, r7, r1
 800c662:	6013      	str	r3, [r2, #0]
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	691b      	ldr	r3, [r3, #16]
 800c668:	b29a      	uxth	r2, r3
 800c66a:	187b      	adds	r3, r7, r1
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	801a      	strh	r2, [r3, #0]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	22a4      	movs	r2, #164	@ 0xa4
 800c674:	18ba      	adds	r2, r7, r2
 800c676:	6013      	str	r3, [r2, #0]
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	785b      	ldrb	r3, [r3, #1]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d000      	beq.n	800c682 <USB_EPStartXfer+0xd32>
 800c680:	e07b      	b.n	800c77a <USB_EPStartXfer+0xe2a>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	219c      	movs	r1, #156	@ 0x9c
 800c686:	187a      	adds	r2, r7, r1
 800c688:	6013      	str	r3, [r2, #0]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2250      	movs	r2, #80	@ 0x50
 800c68e:	5a9b      	ldrh	r3, [r3, r2]
 800c690:	b29b      	uxth	r3, r3
 800c692:	001a      	movs	r2, r3
 800c694:	187b      	adds	r3, r7, r1
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	189b      	adds	r3, r3, r2
 800c69a:	187a      	adds	r2, r7, r1
 800c69c:	6013      	str	r3, [r2, #0]
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	00da      	lsls	r2, r3, #3
 800c6a4:	187b      	adds	r3, r7, r1
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	18d3      	adds	r3, r2, r3
 800c6aa:	4a72      	ldr	r2, [pc, #456]	@ (800c874 <USB_EPStartXfer+0xf24>)
 800c6ac:	4694      	mov	ip, r2
 800c6ae:	4463      	add	r3, ip
 800c6b0:	2198      	movs	r1, #152	@ 0x98
 800c6b2:	187a      	adds	r2, r7, r1
 800c6b4:	6013      	str	r3, [r2, #0]
 800c6b6:	187b      	adds	r3, r7, r1
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	881b      	ldrh	r3, [r3, #0]
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	059b      	lsls	r3, r3, #22
 800c6c0:	0d9b      	lsrs	r3, r3, #22
 800c6c2:	b29a      	uxth	r2, r3
 800c6c4:	187b      	adds	r3, r7, r1
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	801a      	strh	r2, [r3, #0]
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	691b      	ldr	r3, [r3, #16]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d10a      	bne.n	800c6e8 <USB_EPStartXfer+0xd98>
 800c6d2:	187b      	adds	r3, r7, r1
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	881b      	ldrh	r3, [r3, #0]
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	4a64      	ldr	r2, [pc, #400]	@ (800c86c <USB_EPStartXfer+0xf1c>)
 800c6dc:	4313      	orrs	r3, r2
 800c6de:	b29a      	uxth	r2, r3
 800c6e0:	187b      	adds	r3, r7, r1
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	801a      	strh	r2, [r3, #0]
 800c6e6:	e069      	b.n	800c7bc <USB_EPStartXfer+0xe6c>
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	691b      	ldr	r3, [r3, #16]
 800c6ec:	2b3e      	cmp	r3, #62	@ 0x3e
 800c6ee:	d820      	bhi.n	800c732 <USB_EPStartXfer+0xde2>
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	691b      	ldr	r3, [r3, #16]
 800c6f4:	085b      	lsrs	r3, r3, #1
 800c6f6:	21e0      	movs	r1, #224	@ 0xe0
 800c6f8:	187a      	adds	r2, r7, r1
 800c6fa:	6013      	str	r3, [r2, #0]
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	691b      	ldr	r3, [r3, #16]
 800c700:	2201      	movs	r2, #1
 800c702:	4013      	ands	r3, r2
 800c704:	d004      	beq.n	800c710 <USB_EPStartXfer+0xdc0>
 800c706:	187b      	adds	r3, r7, r1
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	3301      	adds	r3, #1
 800c70c:	187a      	adds	r2, r7, r1
 800c70e:	6013      	str	r3, [r2, #0]
 800c710:	2198      	movs	r1, #152	@ 0x98
 800c712:	187b      	adds	r3, r7, r1
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	881b      	ldrh	r3, [r3, #0]
 800c718:	b29a      	uxth	r2, r3
 800c71a:	23e0      	movs	r3, #224	@ 0xe0
 800c71c:	18fb      	adds	r3, r7, r3
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	b29b      	uxth	r3, r3
 800c722:	029b      	lsls	r3, r3, #10
 800c724:	b29b      	uxth	r3, r3
 800c726:	4313      	orrs	r3, r2
 800c728:	b29a      	uxth	r2, r3
 800c72a:	187b      	adds	r3, r7, r1
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	801a      	strh	r2, [r3, #0]
 800c730:	e044      	b.n	800c7bc <USB_EPStartXfer+0xe6c>
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	691b      	ldr	r3, [r3, #16]
 800c736:	095b      	lsrs	r3, r3, #5
 800c738:	21e0      	movs	r1, #224	@ 0xe0
 800c73a:	187a      	adds	r2, r7, r1
 800c73c:	6013      	str	r3, [r2, #0]
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	691b      	ldr	r3, [r3, #16]
 800c742:	221f      	movs	r2, #31
 800c744:	4013      	ands	r3, r2
 800c746:	d104      	bne.n	800c752 <USB_EPStartXfer+0xe02>
 800c748:	187b      	adds	r3, r7, r1
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	3b01      	subs	r3, #1
 800c74e:	187a      	adds	r2, r7, r1
 800c750:	6013      	str	r3, [r2, #0]
 800c752:	2198      	movs	r1, #152	@ 0x98
 800c754:	187b      	adds	r3, r7, r1
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	881b      	ldrh	r3, [r3, #0]
 800c75a:	b29a      	uxth	r2, r3
 800c75c:	23e0      	movs	r3, #224	@ 0xe0
 800c75e:	18fb      	adds	r3, r7, r3
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	b29b      	uxth	r3, r3
 800c764:	029b      	lsls	r3, r3, #10
 800c766:	b29b      	uxth	r3, r3
 800c768:	4313      	orrs	r3, r2
 800c76a:	b29b      	uxth	r3, r3
 800c76c:	4a3f      	ldr	r2, [pc, #252]	@ (800c86c <USB_EPStartXfer+0xf1c>)
 800c76e:	4313      	orrs	r3, r2
 800c770:	b29a      	uxth	r2, r3
 800c772:	187b      	adds	r3, r7, r1
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	801a      	strh	r2, [r3, #0]
 800c778:	e020      	b.n	800c7bc <USB_EPStartXfer+0xe6c>
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	785b      	ldrb	r3, [r3, #1]
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d11c      	bne.n	800c7bc <USB_EPStartXfer+0xe6c>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2250      	movs	r2, #80	@ 0x50
 800c786:	5a9b      	ldrh	r3, [r3, r2]
 800c788:	b29b      	uxth	r3, r3
 800c78a:	001a      	movs	r2, r3
 800c78c:	21a4      	movs	r1, #164	@ 0xa4
 800c78e:	187b      	adds	r3, r7, r1
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	189b      	adds	r3, r3, r2
 800c794:	187a      	adds	r2, r7, r1
 800c796:	6013      	str	r3, [r2, #0]
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	00da      	lsls	r2, r3, #3
 800c79e:	187b      	adds	r3, r7, r1
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	18d3      	adds	r3, r2, r3
 800c7a4:	4a33      	ldr	r2, [pc, #204]	@ (800c874 <USB_EPStartXfer+0xf24>)
 800c7a6:	4694      	mov	ip, r2
 800c7a8:	4463      	add	r3, ip
 800c7aa:	21a0      	movs	r1, #160	@ 0xa0
 800c7ac:	187a      	adds	r2, r7, r1
 800c7ae:	6013      	str	r3, [r2, #0]
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	691b      	ldr	r3, [r3, #16]
 800c7b4:	b29a      	uxth	r2, r3
 800c7b6:	187b      	adds	r3, r7, r1
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	69db      	ldr	r3, [r3, #28]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d100      	bne.n	800c7c6 <USB_EPStartXfer+0xe76>
 800c7c4:	e1c0      	b.n	800cb48 <USB_EPStartXfer+0x11f8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c7c6:	687a      	ldr	r2, [r7, #4]
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	18d2      	adds	r2, r2, r3
 800c7d0:	2196      	movs	r1, #150	@ 0x96
 800c7d2:	187b      	adds	r3, r7, r1
 800c7d4:	8812      	ldrh	r2, [r2, #0]
 800c7d6:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c7d8:	187b      	adds	r3, r7, r1
 800c7da:	881a      	ldrh	r2, [r3, #0]
 800c7dc:	2380      	movs	r3, #128	@ 0x80
 800c7de:	01db      	lsls	r3, r3, #7
 800c7e0:	4013      	ands	r3, r2
 800c7e2:	d004      	beq.n	800c7ee <USB_EPStartXfer+0xe9e>
 800c7e4:	187b      	adds	r3, r7, r1
 800c7e6:	881b      	ldrh	r3, [r3, #0]
 800c7e8:	2240      	movs	r2, #64	@ 0x40
 800c7ea:	4013      	ands	r3, r2
 800c7ec:	d10d      	bne.n	800c80a <USB_EPStartXfer+0xeba>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c7ee:	2196      	movs	r1, #150	@ 0x96
 800c7f0:	187b      	adds	r3, r7, r1
 800c7f2:	881a      	ldrh	r2, [r3, #0]
 800c7f4:	2380      	movs	r3, #128	@ 0x80
 800c7f6:	01db      	lsls	r3, r3, #7
 800c7f8:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c7fa:	d000      	beq.n	800c7fe <USB_EPStartXfer+0xeae>
 800c7fc:	e1a4      	b.n	800cb48 <USB_EPStartXfer+0x11f8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c7fe:	187b      	adds	r3, r7, r1
 800c800:	881b      	ldrh	r3, [r3, #0]
 800c802:	2240      	movs	r2, #64	@ 0x40
 800c804:	4013      	ands	r3, r2
 800c806:	d000      	beq.n	800c80a <USB_EPStartXfer+0xeba>
 800c808:	e19e      	b.n	800cb48 <USB_EPStartXfer+0x11f8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c80a:	687a      	ldr	r2, [r7, #4]
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	009b      	lsls	r3, r3, #2
 800c812:	18d3      	adds	r3, r2, r3
 800c814:	881b      	ldrh	r3, [r3, #0]
 800c816:	b29a      	uxth	r2, r3
 800c818:	2094      	movs	r0, #148	@ 0x94
 800c81a:	183b      	adds	r3, r7, r0
 800c81c:	4916      	ldr	r1, [pc, #88]	@ (800c878 <USB_EPStartXfer+0xf28>)
 800c81e:	400a      	ands	r2, r1
 800c820:	801a      	strh	r2, [r3, #0]
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	18d3      	adds	r3, r2, r3
 800c82c:	183a      	adds	r2, r7, r0
 800c82e:	8812      	ldrh	r2, [r2, #0]
 800c830:	4912      	ldr	r1, [pc, #72]	@ (800c87c <USB_EPStartXfer+0xf2c>)
 800c832:	430a      	orrs	r2, r1
 800c834:	b292      	uxth	r2, r2
 800c836:	801a      	strh	r2, [r3, #0]
 800c838:	e186      	b.n	800cb48 <USB_EPStartXfer+0x11f8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	78db      	ldrb	r3, [r3, #3]
 800c83e:	2b01      	cmp	r3, #1
 800c840:	d000      	beq.n	800c844 <USB_EPStartXfer+0xef4>
 800c842:	e17f      	b.n	800cb44 <USB_EPStartXfer+0x11f4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	699a      	ldr	r2, [r3, #24]
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	691b      	ldr	r3, [r3, #16]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d917      	bls.n	800c880 <USB_EPStartXfer+0xf30>
        {
          len = ep->maxpacket;
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	691b      	ldr	r3, [r3, #16]
 800c854:	1d7a      	adds	r2, r7, #5
 800c856:	32ff      	adds	r2, #255	@ 0xff
 800c858:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	699a      	ldr	r2, [r3, #24]
 800c85e:	1d7b      	adds	r3, r7, #5
 800c860:	33ff      	adds	r3, #255	@ 0xff
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	1ad2      	subs	r2, r2, r3
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	619a      	str	r2, [r3, #24]
 800c86a:	e011      	b.n	800c890 <USB_EPStartXfer+0xf40>
 800c86c:	ffff8000 	.word	0xffff8000
 800c870:	00000402 	.word	0x00000402
 800c874:	00000406 	.word	0x00000406
 800c878:	ffff8f8f 	.word	0xffff8f8f
 800c87c:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	699b      	ldr	r3, [r3, #24]
 800c884:	1d7a      	adds	r2, r7, #5
 800c886:	32ff      	adds	r2, #255	@ 0xff
 800c888:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	2200      	movs	r2, #0
 800c88e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	785b      	ldrb	r3, [r3, #1]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d000      	beq.n	800c89a <USB_EPStartXfer+0xf4a>
 800c898:	e081      	b.n	800c99e <USB_EPStartXfer+0x104e>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	21cc      	movs	r1, #204	@ 0xcc
 800c89e:	187a      	adds	r2, r7, r1
 800c8a0:	6013      	str	r3, [r2, #0]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2250      	movs	r2, #80	@ 0x50
 800c8a6:	5a9b      	ldrh	r3, [r3, r2]
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	001a      	movs	r2, r3
 800c8ac:	187b      	adds	r3, r7, r1
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	189b      	adds	r3, r3, r2
 800c8b2:	187a      	adds	r2, r7, r1
 800c8b4:	6013      	str	r3, [r2, #0]
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	00da      	lsls	r2, r3, #3
 800c8bc:	187b      	adds	r3, r7, r1
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	18d3      	adds	r3, r2, r3
 800c8c2:	4ab6      	ldr	r2, [pc, #728]	@ (800cb9c <USB_EPStartXfer+0x124c>)
 800c8c4:	4694      	mov	ip, r2
 800c8c6:	4463      	add	r3, ip
 800c8c8:	21c8      	movs	r1, #200	@ 0xc8
 800c8ca:	187a      	adds	r2, r7, r1
 800c8cc:	6013      	str	r3, [r2, #0]
 800c8ce:	187b      	adds	r3, r7, r1
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	881b      	ldrh	r3, [r3, #0]
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	059b      	lsls	r3, r3, #22
 800c8d8:	0d9b      	lsrs	r3, r3, #22
 800c8da:	b29a      	uxth	r2, r3
 800c8dc:	187b      	adds	r3, r7, r1
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	801a      	strh	r2, [r3, #0]
 800c8e2:	1d7b      	adds	r3, r7, #5
 800c8e4:	33ff      	adds	r3, #255	@ 0xff
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d10a      	bne.n	800c902 <USB_EPStartXfer+0xfb2>
 800c8ec:	187b      	adds	r3, r7, r1
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	881b      	ldrh	r3, [r3, #0]
 800c8f2:	b29b      	uxth	r3, r3
 800c8f4:	4aaa      	ldr	r2, [pc, #680]	@ (800cba0 <USB_EPStartXfer+0x1250>)
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	b29a      	uxth	r2, r3
 800c8fa:	187b      	adds	r3, r7, r1
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	801a      	strh	r2, [r3, #0]
 800c900:	e072      	b.n	800c9e8 <USB_EPStartXfer+0x1098>
 800c902:	1d7b      	adds	r3, r7, #5
 800c904:	33ff      	adds	r3, #255	@ 0xff
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	2b3e      	cmp	r3, #62	@ 0x3e
 800c90a:	d822      	bhi.n	800c952 <USB_EPStartXfer+0x1002>
 800c90c:	1d7b      	adds	r3, r7, #5
 800c90e:	33ff      	adds	r3, #255	@ 0xff
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	085b      	lsrs	r3, r3, #1
 800c914:	21dc      	movs	r1, #220	@ 0xdc
 800c916:	187a      	adds	r2, r7, r1
 800c918:	6013      	str	r3, [r2, #0]
 800c91a:	1d7b      	adds	r3, r7, #5
 800c91c:	33ff      	adds	r3, #255	@ 0xff
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	2201      	movs	r2, #1
 800c922:	4013      	ands	r3, r2
 800c924:	d004      	beq.n	800c930 <USB_EPStartXfer+0xfe0>
 800c926:	187b      	adds	r3, r7, r1
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	3301      	adds	r3, #1
 800c92c:	187a      	adds	r2, r7, r1
 800c92e:	6013      	str	r3, [r2, #0]
 800c930:	21c8      	movs	r1, #200	@ 0xc8
 800c932:	187b      	adds	r3, r7, r1
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	881b      	ldrh	r3, [r3, #0]
 800c938:	b29a      	uxth	r2, r3
 800c93a:	23dc      	movs	r3, #220	@ 0xdc
 800c93c:	18fb      	adds	r3, r7, r3
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	b29b      	uxth	r3, r3
 800c942:	029b      	lsls	r3, r3, #10
 800c944:	b29b      	uxth	r3, r3
 800c946:	4313      	orrs	r3, r2
 800c948:	b29a      	uxth	r2, r3
 800c94a:	187b      	adds	r3, r7, r1
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	801a      	strh	r2, [r3, #0]
 800c950:	e04a      	b.n	800c9e8 <USB_EPStartXfer+0x1098>
 800c952:	1d7b      	adds	r3, r7, #5
 800c954:	33ff      	adds	r3, #255	@ 0xff
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	095b      	lsrs	r3, r3, #5
 800c95a:	21dc      	movs	r1, #220	@ 0xdc
 800c95c:	187a      	adds	r2, r7, r1
 800c95e:	6013      	str	r3, [r2, #0]
 800c960:	1d7b      	adds	r3, r7, #5
 800c962:	33ff      	adds	r3, #255	@ 0xff
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	221f      	movs	r2, #31
 800c968:	4013      	ands	r3, r2
 800c96a:	d104      	bne.n	800c976 <USB_EPStartXfer+0x1026>
 800c96c:	187b      	adds	r3, r7, r1
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	3b01      	subs	r3, #1
 800c972:	187a      	adds	r2, r7, r1
 800c974:	6013      	str	r3, [r2, #0]
 800c976:	21c8      	movs	r1, #200	@ 0xc8
 800c978:	187b      	adds	r3, r7, r1
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	881b      	ldrh	r3, [r3, #0]
 800c97e:	b29a      	uxth	r2, r3
 800c980:	23dc      	movs	r3, #220	@ 0xdc
 800c982:	18fb      	adds	r3, r7, r3
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	b29b      	uxth	r3, r3
 800c988:	029b      	lsls	r3, r3, #10
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	4313      	orrs	r3, r2
 800c98e:	b29b      	uxth	r3, r3
 800c990:	4a83      	ldr	r2, [pc, #524]	@ (800cba0 <USB_EPStartXfer+0x1250>)
 800c992:	4313      	orrs	r3, r2
 800c994:	b29a      	uxth	r2, r3
 800c996:	187b      	adds	r3, r7, r1
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	801a      	strh	r2, [r3, #0]
 800c99c:	e024      	b.n	800c9e8 <USB_EPStartXfer+0x1098>
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	785b      	ldrb	r3, [r3, #1]
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d120      	bne.n	800c9e8 <USB_EPStartXfer+0x1098>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	21d4      	movs	r1, #212	@ 0xd4
 800c9aa:	187a      	adds	r2, r7, r1
 800c9ac:	6013      	str	r3, [r2, #0]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2250      	movs	r2, #80	@ 0x50
 800c9b2:	5a9b      	ldrh	r3, [r3, r2]
 800c9b4:	b29b      	uxth	r3, r3
 800c9b6:	001a      	movs	r2, r3
 800c9b8:	187b      	adds	r3, r7, r1
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	189b      	adds	r3, r3, r2
 800c9be:	187a      	adds	r2, r7, r1
 800c9c0:	6013      	str	r3, [r2, #0]
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	00da      	lsls	r2, r3, #3
 800c9c8:	187b      	adds	r3, r7, r1
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	18d3      	adds	r3, r2, r3
 800c9ce:	4a73      	ldr	r2, [pc, #460]	@ (800cb9c <USB_EPStartXfer+0x124c>)
 800c9d0:	4694      	mov	ip, r2
 800c9d2:	4463      	add	r3, ip
 800c9d4:	21d0      	movs	r1, #208	@ 0xd0
 800c9d6:	187a      	adds	r2, r7, r1
 800c9d8:	6013      	str	r3, [r2, #0]
 800c9da:	1d7b      	adds	r3, r7, #5
 800c9dc:	33ff      	adds	r3, #255	@ 0xff
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	b29a      	uxth	r2, r3
 800c9e2:	187b      	adds	r3, r7, r1
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	801a      	strh	r2, [r3, #0]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	22c4      	movs	r2, #196	@ 0xc4
 800c9ec:	18ba      	adds	r2, r7, r2
 800c9ee:	6013      	str	r3, [r2, #0]
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	785b      	ldrb	r3, [r3, #1]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d000      	beq.n	800c9fa <USB_EPStartXfer+0x10aa>
 800c9f8:	e081      	b.n	800cafe <USB_EPStartXfer+0x11ae>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	21bc      	movs	r1, #188	@ 0xbc
 800c9fe:	187a      	adds	r2, r7, r1
 800ca00:	6013      	str	r3, [r2, #0]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2250      	movs	r2, #80	@ 0x50
 800ca06:	5a9b      	ldrh	r3, [r3, r2]
 800ca08:	b29b      	uxth	r3, r3
 800ca0a:	001a      	movs	r2, r3
 800ca0c:	187b      	adds	r3, r7, r1
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	189b      	adds	r3, r3, r2
 800ca12:	187a      	adds	r2, r7, r1
 800ca14:	6013      	str	r3, [r2, #0]
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	00da      	lsls	r2, r3, #3
 800ca1c:	187b      	adds	r3, r7, r1
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	18d3      	adds	r3, r2, r3
 800ca22:	4a60      	ldr	r2, [pc, #384]	@ (800cba4 <USB_EPStartXfer+0x1254>)
 800ca24:	4694      	mov	ip, r2
 800ca26:	4463      	add	r3, ip
 800ca28:	21b8      	movs	r1, #184	@ 0xb8
 800ca2a:	187a      	adds	r2, r7, r1
 800ca2c:	6013      	str	r3, [r2, #0]
 800ca2e:	187b      	adds	r3, r7, r1
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	881b      	ldrh	r3, [r3, #0]
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	059b      	lsls	r3, r3, #22
 800ca38:	0d9b      	lsrs	r3, r3, #22
 800ca3a:	b29a      	uxth	r2, r3
 800ca3c:	187b      	adds	r3, r7, r1
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	801a      	strh	r2, [r3, #0]
 800ca42:	1d7b      	adds	r3, r7, #5
 800ca44:	33ff      	adds	r3, #255	@ 0xff
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d10a      	bne.n	800ca62 <USB_EPStartXfer+0x1112>
 800ca4c:	187b      	adds	r3, r7, r1
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	881b      	ldrh	r3, [r3, #0]
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	4a52      	ldr	r2, [pc, #328]	@ (800cba0 <USB_EPStartXfer+0x1250>)
 800ca56:	4313      	orrs	r3, r2
 800ca58:	b29a      	uxth	r2, r3
 800ca5a:	187b      	adds	r3, r7, r1
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	801a      	strh	r2, [r3, #0]
 800ca60:	e072      	b.n	800cb48 <USB_EPStartXfer+0x11f8>
 800ca62:	1d7b      	adds	r3, r7, #5
 800ca64:	33ff      	adds	r3, #255	@ 0xff
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	2b3e      	cmp	r3, #62	@ 0x3e
 800ca6a:	d822      	bhi.n	800cab2 <USB_EPStartXfer+0x1162>
 800ca6c:	1d7b      	adds	r3, r7, #5
 800ca6e:	33ff      	adds	r3, #255	@ 0xff
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	085b      	lsrs	r3, r3, #1
 800ca74:	21d8      	movs	r1, #216	@ 0xd8
 800ca76:	187a      	adds	r2, r7, r1
 800ca78:	6013      	str	r3, [r2, #0]
 800ca7a:	1d7b      	adds	r3, r7, #5
 800ca7c:	33ff      	adds	r3, #255	@ 0xff
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	2201      	movs	r2, #1
 800ca82:	4013      	ands	r3, r2
 800ca84:	d004      	beq.n	800ca90 <USB_EPStartXfer+0x1140>
 800ca86:	187b      	adds	r3, r7, r1
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	187a      	adds	r2, r7, r1
 800ca8e:	6013      	str	r3, [r2, #0]
 800ca90:	21b8      	movs	r1, #184	@ 0xb8
 800ca92:	187b      	adds	r3, r7, r1
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	881b      	ldrh	r3, [r3, #0]
 800ca98:	b29a      	uxth	r2, r3
 800ca9a:	23d8      	movs	r3, #216	@ 0xd8
 800ca9c:	18fb      	adds	r3, r7, r3
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	029b      	lsls	r3, r3, #10
 800caa4:	b29b      	uxth	r3, r3
 800caa6:	4313      	orrs	r3, r2
 800caa8:	b29a      	uxth	r2, r3
 800caaa:	187b      	adds	r3, r7, r1
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	801a      	strh	r2, [r3, #0]
 800cab0:	e04a      	b.n	800cb48 <USB_EPStartXfer+0x11f8>
 800cab2:	1d7b      	adds	r3, r7, #5
 800cab4:	33ff      	adds	r3, #255	@ 0xff
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	095b      	lsrs	r3, r3, #5
 800caba:	21d8      	movs	r1, #216	@ 0xd8
 800cabc:	187a      	adds	r2, r7, r1
 800cabe:	6013      	str	r3, [r2, #0]
 800cac0:	1d7b      	adds	r3, r7, #5
 800cac2:	33ff      	adds	r3, #255	@ 0xff
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	221f      	movs	r2, #31
 800cac8:	4013      	ands	r3, r2
 800caca:	d104      	bne.n	800cad6 <USB_EPStartXfer+0x1186>
 800cacc:	187b      	adds	r3, r7, r1
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	3b01      	subs	r3, #1
 800cad2:	187a      	adds	r2, r7, r1
 800cad4:	6013      	str	r3, [r2, #0]
 800cad6:	21b8      	movs	r1, #184	@ 0xb8
 800cad8:	187b      	adds	r3, r7, r1
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	881b      	ldrh	r3, [r3, #0]
 800cade:	b29a      	uxth	r2, r3
 800cae0:	23d8      	movs	r3, #216	@ 0xd8
 800cae2:	18fb      	adds	r3, r7, r3
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	029b      	lsls	r3, r3, #10
 800caea:	b29b      	uxth	r3, r3
 800caec:	4313      	orrs	r3, r2
 800caee:	b29b      	uxth	r3, r3
 800caf0:	4a2b      	ldr	r2, [pc, #172]	@ (800cba0 <USB_EPStartXfer+0x1250>)
 800caf2:	4313      	orrs	r3, r2
 800caf4:	b29a      	uxth	r2, r3
 800caf6:	187b      	adds	r3, r7, r1
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	801a      	strh	r2, [r3, #0]
 800cafc:	e024      	b.n	800cb48 <USB_EPStartXfer+0x11f8>
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	785b      	ldrb	r3, [r3, #1]
 800cb02:	2b01      	cmp	r3, #1
 800cb04:	d120      	bne.n	800cb48 <USB_EPStartXfer+0x11f8>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2250      	movs	r2, #80	@ 0x50
 800cb0a:	5a9b      	ldrh	r3, [r3, r2]
 800cb0c:	b29b      	uxth	r3, r3
 800cb0e:	001a      	movs	r2, r3
 800cb10:	21c4      	movs	r1, #196	@ 0xc4
 800cb12:	187b      	adds	r3, r7, r1
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	189b      	adds	r3, r3, r2
 800cb18:	187a      	adds	r2, r7, r1
 800cb1a:	6013      	str	r3, [r2, #0]
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	00da      	lsls	r2, r3, #3
 800cb22:	187b      	adds	r3, r7, r1
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	18d3      	adds	r3, r2, r3
 800cb28:	4a1e      	ldr	r2, [pc, #120]	@ (800cba4 <USB_EPStartXfer+0x1254>)
 800cb2a:	4694      	mov	ip, r2
 800cb2c:	4463      	add	r3, ip
 800cb2e:	21c0      	movs	r1, #192	@ 0xc0
 800cb30:	187a      	adds	r2, r7, r1
 800cb32:	6013      	str	r3, [r2, #0]
 800cb34:	1d7b      	adds	r3, r7, #5
 800cb36:	33ff      	adds	r3, #255	@ 0xff
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	b29a      	uxth	r2, r3
 800cb3c:	187b      	adds	r3, r7, r1
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	801a      	strh	r2, [r3, #0]
 800cb42:	e001      	b.n	800cb48 <USB_EPStartXfer+0x11f8>
      }
      else
      {
        return HAL_ERROR;
 800cb44:	2301      	movs	r3, #1
 800cb46:	e025      	b.n	800cb94 <USB_EPStartXfer+0x1244>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cb48:	687a      	ldr	r2, [r7, #4]
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	009b      	lsls	r3, r3, #2
 800cb50:	18d3      	adds	r3, r2, r3
 800cb52:	881b      	ldrh	r3, [r3, #0]
 800cb54:	b29a      	uxth	r2, r3
 800cb56:	208a      	movs	r0, #138	@ 0x8a
 800cb58:	183b      	adds	r3, r7, r0
 800cb5a:	4913      	ldr	r1, [pc, #76]	@ (800cba8 <USB_EPStartXfer+0x1258>)
 800cb5c:	400a      	ands	r2, r1
 800cb5e:	801a      	strh	r2, [r3, #0]
 800cb60:	183b      	adds	r3, r7, r0
 800cb62:	183a      	adds	r2, r7, r0
 800cb64:	8812      	ldrh	r2, [r2, #0]
 800cb66:	2180      	movs	r1, #128	@ 0x80
 800cb68:	0149      	lsls	r1, r1, #5
 800cb6a:	404a      	eors	r2, r1
 800cb6c:	801a      	strh	r2, [r3, #0]
 800cb6e:	183b      	adds	r3, r7, r0
 800cb70:	183a      	adds	r2, r7, r0
 800cb72:	8812      	ldrh	r2, [r2, #0]
 800cb74:	2180      	movs	r1, #128	@ 0x80
 800cb76:	0189      	lsls	r1, r1, #6
 800cb78:	404a      	eors	r2, r1
 800cb7a:	801a      	strh	r2, [r3, #0]
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	009b      	lsls	r3, r3, #2
 800cb84:	18d3      	adds	r3, r2, r3
 800cb86:	183a      	adds	r2, r7, r0
 800cb88:	8812      	ldrh	r2, [r2, #0]
 800cb8a:	4908      	ldr	r1, [pc, #32]	@ (800cbac <USB_EPStartXfer+0x125c>)
 800cb8c:	430a      	orrs	r2, r1
 800cb8e:	b292      	uxth	r2, r2
 800cb90:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800cb92:	2300      	movs	r3, #0
}
 800cb94:	0018      	movs	r0, r3
 800cb96:	46bd      	mov	sp, r7
 800cb98:	b043      	add	sp, #268	@ 0x10c
 800cb9a:	bd90      	pop	{r4, r7, pc}
 800cb9c:	00000402 	.word	0x00000402
 800cba0:	ffff8000 	.word	0xffff8000
 800cba4:	00000406 	.word	0x00000406
 800cba8:	ffffbf8f 	.word	0xffffbf8f
 800cbac:	ffff8080 	.word	0xffff8080

0800cbb0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	785b      	ldrb	r3, [r3, #1]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d01d      	beq.n	800cbfe <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800cbc2:	687a      	ldr	r2, [r7, #4]
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	009b      	lsls	r3, r3, #2
 800cbca:	18d3      	adds	r3, r2, r3
 800cbcc:	881b      	ldrh	r3, [r3, #0]
 800cbce:	b29a      	uxth	r2, r3
 800cbd0:	200c      	movs	r0, #12
 800cbd2:	183b      	adds	r3, r7, r0
 800cbd4:	491b      	ldr	r1, [pc, #108]	@ (800cc44 <USB_EPSetStall+0x94>)
 800cbd6:	400a      	ands	r2, r1
 800cbd8:	801a      	strh	r2, [r3, #0]
 800cbda:	183b      	adds	r3, r7, r0
 800cbdc:	183a      	adds	r2, r7, r0
 800cbde:	8812      	ldrh	r2, [r2, #0]
 800cbe0:	2110      	movs	r1, #16
 800cbe2:	404a      	eors	r2, r1
 800cbe4:	801a      	strh	r2, [r3, #0]
 800cbe6:	687a      	ldr	r2, [r7, #4]
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	781b      	ldrb	r3, [r3, #0]
 800cbec:	009b      	lsls	r3, r3, #2
 800cbee:	18d3      	adds	r3, r2, r3
 800cbf0:	183a      	adds	r2, r7, r0
 800cbf2:	8812      	ldrh	r2, [r2, #0]
 800cbf4:	4914      	ldr	r1, [pc, #80]	@ (800cc48 <USB_EPSetStall+0x98>)
 800cbf6:	430a      	orrs	r2, r1
 800cbf8:	b292      	uxth	r2, r2
 800cbfa:	801a      	strh	r2, [r3, #0]
 800cbfc:	e01d      	b.n	800cc3a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800cbfe:	687a      	ldr	r2, [r7, #4]
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	18d3      	adds	r3, r2, r3
 800cc08:	881b      	ldrh	r3, [r3, #0]
 800cc0a:	b29a      	uxth	r2, r3
 800cc0c:	200e      	movs	r0, #14
 800cc0e:	183b      	adds	r3, r7, r0
 800cc10:	490e      	ldr	r1, [pc, #56]	@ (800cc4c <USB_EPSetStall+0x9c>)
 800cc12:	400a      	ands	r2, r1
 800cc14:	801a      	strh	r2, [r3, #0]
 800cc16:	183b      	adds	r3, r7, r0
 800cc18:	183a      	adds	r2, r7, r0
 800cc1a:	8812      	ldrh	r2, [r2, #0]
 800cc1c:	2180      	movs	r1, #128	@ 0x80
 800cc1e:	0149      	lsls	r1, r1, #5
 800cc20:	404a      	eors	r2, r1
 800cc22:	801a      	strh	r2, [r3, #0]
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	009b      	lsls	r3, r3, #2
 800cc2c:	18d3      	adds	r3, r2, r3
 800cc2e:	183a      	adds	r2, r7, r0
 800cc30:	8812      	ldrh	r2, [r2, #0]
 800cc32:	4905      	ldr	r1, [pc, #20]	@ (800cc48 <USB_EPSetStall+0x98>)
 800cc34:	430a      	orrs	r2, r1
 800cc36:	b292      	uxth	r2, r2
 800cc38:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800cc3a:	2300      	movs	r3, #0
}
 800cc3c:	0018      	movs	r0, r3
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	b004      	add	sp, #16
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	ffff8fbf 	.word	0xffff8fbf
 800cc48:	ffff8080 	.word	0xffff8080
 800cc4c:	ffffbf8f 	.word	0xffffbf8f

0800cc50 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b086      	sub	sp, #24
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	7b1b      	ldrb	r3, [r3, #12]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d000      	beq.n	800cc64 <USB_EPClearStall+0x14>
 800cc62:	e095      	b.n	800cd90 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	785b      	ldrb	r3, [r3, #1]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d046      	beq.n	800ccfa <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	009b      	lsls	r3, r3, #2
 800cc74:	18d2      	adds	r2, r2, r3
 800cc76:	2110      	movs	r1, #16
 800cc78:	187b      	adds	r3, r7, r1
 800cc7a:	8812      	ldrh	r2, [r2, #0]
 800cc7c:	801a      	strh	r2, [r3, #0]
 800cc7e:	187b      	adds	r3, r7, r1
 800cc80:	881b      	ldrh	r3, [r3, #0]
 800cc82:	2240      	movs	r2, #64	@ 0x40
 800cc84:	4013      	ands	r3, r2
 800cc86:	d016      	beq.n	800ccb6 <USB_EPClearStall+0x66>
 800cc88:	687a      	ldr	r2, [r7, #4]
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	009b      	lsls	r3, r3, #2
 800cc90:	18d3      	adds	r3, r2, r3
 800cc92:	881b      	ldrh	r3, [r3, #0]
 800cc94:	b29a      	uxth	r2, r3
 800cc96:	200e      	movs	r0, #14
 800cc98:	183b      	adds	r3, r7, r0
 800cc9a:	4940      	ldr	r1, [pc, #256]	@ (800cd9c <USB_EPClearStall+0x14c>)
 800cc9c:	400a      	ands	r2, r1
 800cc9e:	801a      	strh	r2, [r3, #0]
 800cca0:	687a      	ldr	r2, [r7, #4]
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	18d3      	adds	r3, r2, r3
 800ccaa:	183a      	adds	r2, r7, r0
 800ccac:	8812      	ldrh	r2, [r2, #0]
 800ccae:	493c      	ldr	r1, [pc, #240]	@ (800cda0 <USB_EPClearStall+0x150>)
 800ccb0:	430a      	orrs	r2, r1
 800ccb2:	b292      	uxth	r2, r2
 800ccb4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	78db      	ldrb	r3, [r3, #3]
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	d068      	beq.n	800cd90 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	009b      	lsls	r3, r3, #2
 800ccc6:	18d3      	adds	r3, r2, r3
 800ccc8:	881b      	ldrh	r3, [r3, #0]
 800ccca:	b29a      	uxth	r2, r3
 800cccc:	200c      	movs	r0, #12
 800ccce:	183b      	adds	r3, r7, r0
 800ccd0:	4934      	ldr	r1, [pc, #208]	@ (800cda4 <USB_EPClearStall+0x154>)
 800ccd2:	400a      	ands	r2, r1
 800ccd4:	801a      	strh	r2, [r3, #0]
 800ccd6:	183b      	adds	r3, r7, r0
 800ccd8:	183a      	adds	r2, r7, r0
 800ccda:	8812      	ldrh	r2, [r2, #0]
 800ccdc:	2120      	movs	r1, #32
 800ccde:	404a      	eors	r2, r1
 800cce0:	801a      	strh	r2, [r3, #0]
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	18d3      	adds	r3, r2, r3
 800ccec:	183a      	adds	r2, r7, r0
 800ccee:	8812      	ldrh	r2, [r2, #0]
 800ccf0:	492d      	ldr	r1, [pc, #180]	@ (800cda8 <USB_EPClearStall+0x158>)
 800ccf2:	430a      	orrs	r2, r1
 800ccf4:	b292      	uxth	r2, r2
 800ccf6:	801a      	strh	r2, [r3, #0]
 800ccf8:	e04a      	b.n	800cd90 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ccfa:	687a      	ldr	r2, [r7, #4]
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	009b      	lsls	r3, r3, #2
 800cd02:	18d2      	adds	r2, r2, r3
 800cd04:	2116      	movs	r1, #22
 800cd06:	187b      	adds	r3, r7, r1
 800cd08:	8812      	ldrh	r2, [r2, #0]
 800cd0a:	801a      	strh	r2, [r3, #0]
 800cd0c:	187b      	adds	r3, r7, r1
 800cd0e:	881a      	ldrh	r2, [r3, #0]
 800cd10:	2380      	movs	r3, #128	@ 0x80
 800cd12:	01db      	lsls	r3, r3, #7
 800cd14:	4013      	ands	r3, r2
 800cd16:	d016      	beq.n	800cd46 <USB_EPClearStall+0xf6>
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	009b      	lsls	r3, r3, #2
 800cd20:	18d3      	adds	r3, r2, r3
 800cd22:	881b      	ldrh	r3, [r3, #0]
 800cd24:	b29a      	uxth	r2, r3
 800cd26:	2014      	movs	r0, #20
 800cd28:	183b      	adds	r3, r7, r0
 800cd2a:	491c      	ldr	r1, [pc, #112]	@ (800cd9c <USB_EPClearStall+0x14c>)
 800cd2c:	400a      	ands	r2, r1
 800cd2e:	801a      	strh	r2, [r3, #0]
 800cd30:	687a      	ldr	r2, [r7, #4]
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	009b      	lsls	r3, r3, #2
 800cd38:	18d3      	adds	r3, r2, r3
 800cd3a:	183a      	adds	r2, r7, r0
 800cd3c:	8812      	ldrh	r2, [r2, #0]
 800cd3e:	491b      	ldr	r1, [pc, #108]	@ (800cdac <USB_EPClearStall+0x15c>)
 800cd40:	430a      	orrs	r2, r1
 800cd42:	b292      	uxth	r2, r2
 800cd44:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	781b      	ldrb	r3, [r3, #0]
 800cd4c:	009b      	lsls	r3, r3, #2
 800cd4e:	18d3      	adds	r3, r2, r3
 800cd50:	881b      	ldrh	r3, [r3, #0]
 800cd52:	b29a      	uxth	r2, r3
 800cd54:	2012      	movs	r0, #18
 800cd56:	183b      	adds	r3, r7, r0
 800cd58:	4915      	ldr	r1, [pc, #84]	@ (800cdb0 <USB_EPClearStall+0x160>)
 800cd5a:	400a      	ands	r2, r1
 800cd5c:	801a      	strh	r2, [r3, #0]
 800cd5e:	183b      	adds	r3, r7, r0
 800cd60:	183a      	adds	r2, r7, r0
 800cd62:	8812      	ldrh	r2, [r2, #0]
 800cd64:	2180      	movs	r1, #128	@ 0x80
 800cd66:	0149      	lsls	r1, r1, #5
 800cd68:	404a      	eors	r2, r1
 800cd6a:	801a      	strh	r2, [r3, #0]
 800cd6c:	183b      	adds	r3, r7, r0
 800cd6e:	183a      	adds	r2, r7, r0
 800cd70:	8812      	ldrh	r2, [r2, #0]
 800cd72:	2180      	movs	r1, #128	@ 0x80
 800cd74:	0189      	lsls	r1, r1, #6
 800cd76:	404a      	eors	r2, r1
 800cd78:	801a      	strh	r2, [r3, #0]
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	18d3      	adds	r3, r2, r3
 800cd84:	183a      	adds	r2, r7, r0
 800cd86:	8812      	ldrh	r2, [r2, #0]
 800cd88:	4907      	ldr	r1, [pc, #28]	@ (800cda8 <USB_EPClearStall+0x158>)
 800cd8a:	430a      	orrs	r2, r1
 800cd8c:	b292      	uxth	r2, r2
 800cd8e:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800cd90:	2300      	movs	r3, #0
}
 800cd92:	0018      	movs	r0, r3
 800cd94:	46bd      	mov	sp, r7
 800cd96:	b006      	add	sp, #24
 800cd98:	bd80      	pop	{r7, pc}
 800cd9a:	46c0      	nop			@ (mov r8, r8)
 800cd9c:	ffff8f8f 	.word	0xffff8f8f
 800cda0:	ffff80c0 	.word	0xffff80c0
 800cda4:	ffff8fbf 	.word	0xffff8fbf
 800cda8:	ffff8080 	.word	0xffff8080
 800cdac:	ffffc080 	.word	0xffffc080
 800cdb0:	ffffbf8f 	.word	0xffffbf8f

0800cdb4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
 800cdbc:	000a      	movs	r2, r1
 800cdbe:	1cfb      	adds	r3, r7, #3
 800cdc0:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800cdc2:	1cfb      	adds	r3, r7, #3
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d103      	bne.n	800cdd2 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	224c      	movs	r2, #76	@ 0x4c
 800cdce:	2180      	movs	r1, #128	@ 0x80
 800cdd0:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800cdd2:	2300      	movs	r3, #0
}
 800cdd4:	0018      	movs	r0, r3
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	b002      	add	sp, #8
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b082      	sub	sp, #8
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2258      	movs	r2, #88	@ 0x58
 800cde8:	5a9b      	ldrh	r3, [r3, r2]
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	4a05      	ldr	r2, [pc, #20]	@ (800ce04 <USB_DevConnect+0x28>)
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	b299      	uxth	r1, r3
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2258      	movs	r2, #88	@ 0x58
 800cdf6:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800cdf8:	2300      	movs	r3, #0
}
 800cdfa:	0018      	movs	r0, r3
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	b002      	add	sp, #8
 800ce00:	bd80      	pop	{r7, pc}
 800ce02:	46c0      	nop			@ (mov r8, r8)
 800ce04:	ffff8000 	.word	0xffff8000

0800ce08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b084      	sub	sp, #16
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2244      	movs	r2, #68	@ 0x44
 800ce14:	5a9b      	ldrh	r3, [r3, r2]
 800ce16:	b29b      	uxth	r3, r3
 800ce18:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
}
 800ce1c:	0018      	movs	r0, r3
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	b004      	add	sp, #16
 800ce22:	bd80      	pop	{r7, pc}

0800ce24 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b08a      	sub	sp, #40	@ 0x28
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	60b9      	str	r1, [r7, #8]
 800ce2e:	0019      	movs	r1, r3
 800ce30:	1dbb      	adds	r3, r7, #6
 800ce32:	801a      	strh	r2, [r3, #0]
 800ce34:	1d3b      	adds	r3, r7, #4
 800ce36:	1c0a      	adds	r2, r1, #0
 800ce38:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ce3a:	1d3b      	adds	r3, r7, #4
 800ce3c:	881b      	ldrh	r3, [r3, #0]
 800ce3e:	3301      	adds	r3, #1
 800ce40:	085b      	lsrs	r3, r3, #1
 800ce42:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ce4c:	1dbb      	adds	r3, r7, #6
 800ce4e:	881a      	ldrh	r2, [r3, #0]
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	18d3      	adds	r3, r2, r3
 800ce54:	2280      	movs	r2, #128	@ 0x80
 800ce56:	00d2      	lsls	r2, r2, #3
 800ce58:	4694      	mov	ip, r2
 800ce5a:	4463      	add	r3, ip
 800ce5c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ce5e:	69bb      	ldr	r3, [r7, #24]
 800ce60:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce62:	e020      	b.n	800cea6 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	781a      	ldrb	r2, [r3, #0]
 800ce68:	2112      	movs	r1, #18
 800ce6a:	187b      	adds	r3, r7, r1
 800ce6c:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ce6e:	69fb      	ldr	r3, [r7, #28]
 800ce70:	3301      	adds	r3, #1
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	021b      	lsls	r3, r3, #8
 800ce76:	b21a      	sxth	r2, r3
 800ce78:	187b      	adds	r3, r7, r1
 800ce7a:	2000      	movs	r0, #0
 800ce7c:	5e1b      	ldrsh	r3, [r3, r0]
 800ce7e:	4313      	orrs	r3, r2
 800ce80:	b21a      	sxth	r2, r3
 800ce82:	187b      	adds	r3, r7, r1
 800ce84:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800ce86:	6a3b      	ldr	r3, [r7, #32]
 800ce88:	187a      	adds	r2, r7, r1
 800ce8a:	8812      	ldrh	r2, [r2, #0]
 800ce8c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ce8e:	6a3b      	ldr	r3, [r7, #32]
 800ce90:	3302      	adds	r3, #2
 800ce92:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ce94:	69fb      	ldr	r3, [r7, #28]
 800ce96:	3301      	adds	r3, #1
 800ce98:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ce9a:	69fb      	ldr	r3, [r7, #28]
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cea2:	3b01      	subs	r3, #1
 800cea4:	627b      	str	r3, [r7, #36]	@ 0x24
 800cea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d1db      	bne.n	800ce64 <USB_WritePMA+0x40>
  }
}
 800ceac:	46c0      	nop			@ (mov r8, r8)
 800ceae:	46c0      	nop			@ (mov r8, r8)
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	b00a      	add	sp, #40	@ 0x28
 800ceb4:	bd80      	pop	{r7, pc}

0800ceb6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ceb6:	b580      	push	{r7, lr}
 800ceb8:	b08a      	sub	sp, #40	@ 0x28
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	60f8      	str	r0, [r7, #12]
 800cebe:	60b9      	str	r1, [r7, #8]
 800cec0:	0019      	movs	r1, r3
 800cec2:	1dbb      	adds	r3, r7, #6
 800cec4:	801a      	strh	r2, [r3, #0]
 800cec6:	1d3b      	adds	r3, r7, #4
 800cec8:	1c0a      	adds	r2, r1, #0
 800ceca:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800cecc:	1d3b      	adds	r3, r7, #4
 800cece:	881b      	ldrh	r3, [r3, #0]
 800ced0:	085b      	lsrs	r3, r3, #1
 800ced2:	b29b      	uxth	r3, r3
 800ced4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cede:	1dbb      	adds	r3, r7, #6
 800cee0:	881a      	ldrh	r2, [r3, #0]
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	18d3      	adds	r3, r2, r3
 800cee6:	2280      	movs	r2, #128	@ 0x80
 800cee8:	00d2      	lsls	r2, r2, #3
 800ceea:	4694      	mov	ip, r2
 800ceec:	4463      	add	r3, ip
 800ceee:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cef0:	69bb      	ldr	r3, [r7, #24]
 800cef2:	627b      	str	r3, [r7, #36]	@ 0x24
 800cef4:	e018      	b.n	800cf28 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800cef6:	6a3b      	ldr	r3, [r7, #32]
 800cef8:	881b      	ldrh	r3, [r3, #0]
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800cefe:	6a3b      	ldr	r3, [r7, #32]
 800cf00:	3302      	adds	r3, #2
 800cf02:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	b2da      	uxtb	r2, r3
 800cf08:	69fb      	ldr	r3, [r7, #28]
 800cf0a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cf0c:	69fb      	ldr	r3, [r7, #28]
 800cf0e:	3301      	adds	r3, #1
 800cf10:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	0a1b      	lsrs	r3, r3, #8
 800cf16:	b2da      	uxtb	r2, r3
 800cf18:	69fb      	ldr	r3, [r7, #28]
 800cf1a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cf1c:	69fb      	ldr	r3, [r7, #28]
 800cf1e:	3301      	adds	r3, #1
 800cf20:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cf22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf24:	3b01      	subs	r3, #1
 800cf26:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d1e3      	bne.n	800cef6 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800cf2e:	1d3b      	adds	r3, r7, #4
 800cf30:	881b      	ldrh	r3, [r3, #0]
 800cf32:	2201      	movs	r2, #1
 800cf34:	4013      	ands	r3, r2
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d007      	beq.n	800cf4c <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 800cf3c:	6a3b      	ldr	r3, [r7, #32]
 800cf3e:	881b      	ldrh	r3, [r3, #0]
 800cf40:	b29b      	uxth	r3, r3
 800cf42:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	b2da      	uxtb	r2, r3
 800cf48:	69fb      	ldr	r3, [r7, #28]
 800cf4a:	701a      	strb	r2, [r3, #0]
  }
}
 800cf4c:	46c0      	nop			@ (mov r8, r8)
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	b00a      	add	sp, #40	@ 0x28
 800cf52:	bd80      	pop	{r7, pc}

0800cf54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b084      	sub	sp, #16
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	000a      	movs	r2, r1
 800cf5e:	1cfb      	adds	r3, r7, #3
 800cf60:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800cf62:	230f      	movs	r3, #15
 800cf64:	18fb      	adds	r3, r7, r3
 800cf66:	2200      	movs	r2, #0
 800cf68:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	7c1b      	ldrb	r3, [r3, #16]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d116      	bne.n	800cfa0 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cf72:	2380      	movs	r3, #128	@ 0x80
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	2202      	movs	r2, #2
 800cf7a:	2181      	movs	r1, #129	@ 0x81
 800cf7c:	f004 fedf 	bl	8011d3e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2201      	movs	r2, #1
 800cf84:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cf86:	2380      	movs	r3, #128	@ 0x80
 800cf88:	009b      	lsls	r3, r3, #2
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	2202      	movs	r2, #2
 800cf8e:	2101      	movs	r1, #1
 800cf90:	f004 fed5 	bl	8011d3e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cf94:	687a      	ldr	r2, [r7, #4]
 800cf96:	23b6      	movs	r3, #182	@ 0xb6
 800cf98:	005b      	lsls	r3, r3, #1
 800cf9a:	2101      	movs	r1, #1
 800cf9c:	50d1      	str	r1, [r2, r3]
 800cf9e:	e013      	b.n	800cfc8 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	2340      	movs	r3, #64	@ 0x40
 800cfa4:	2202      	movs	r2, #2
 800cfa6:	2181      	movs	r1, #129	@ 0x81
 800cfa8:	f004 fec9 	bl	8011d3e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2201      	movs	r2, #1
 800cfb0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	2340      	movs	r3, #64	@ 0x40
 800cfb6:	2202      	movs	r2, #2
 800cfb8:	2101      	movs	r1, #1
 800cfba:	f004 fec0 	bl	8011d3e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cfbe:	687a      	ldr	r2, [r7, #4]
 800cfc0:	23b6      	movs	r3, #182	@ 0xb6
 800cfc2:	005b      	lsls	r3, r3, #1
 800cfc4:	2101      	movs	r1, #1
 800cfc6:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	2308      	movs	r3, #8
 800cfcc:	2203      	movs	r2, #3
 800cfce:	2182      	movs	r1, #130	@ 0x82
 800cfd0:	f004 feb5 	bl	8011d3e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2201      	movs	r2, #1
 800cfd8:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cfda:	2387      	movs	r3, #135	@ 0x87
 800cfdc:	009b      	lsls	r3, r3, #2
 800cfde:	0018      	movs	r0, r3
 800cfe0:	f005 f844 	bl	801206c <USBD_static_malloc>
 800cfe4:	0001      	movs	r1, r0
 800cfe6:	687a      	ldr	r2, [r7, #4]
 800cfe8:	23ae      	movs	r3, #174	@ 0xae
 800cfea:	009b      	lsls	r3, r3, #2
 800cfec:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800cfee:	687a      	ldr	r2, [r7, #4]
 800cff0:	23ae      	movs	r3, #174	@ 0xae
 800cff2:	009b      	lsls	r3, r3, #2
 800cff4:	58d3      	ldr	r3, [r2, r3]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d104      	bne.n	800d004 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800cffa:	230f      	movs	r3, #15
 800cffc:	18fb      	adds	r3, r7, r3
 800cffe:	2201      	movs	r2, #1
 800d000:	701a      	strb	r2, [r3, #0]
 800d002:	e02c      	b.n	800d05e <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d004:	687a      	ldr	r2, [r7, #4]
 800d006:	23ae      	movs	r3, #174	@ 0xae
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	58d3      	ldr	r3, [r2, r3]
 800d00c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	23af      	movs	r3, #175	@ 0xaf
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	58d3      	ldr	r3, [r2, r3]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800d01a:	68ba      	ldr	r2, [r7, #8]
 800d01c:	2385      	movs	r3, #133	@ 0x85
 800d01e:	009b      	lsls	r3, r3, #2
 800d020:	2100      	movs	r1, #0
 800d022:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800d024:	68ba      	ldr	r2, [r7, #8]
 800d026:	2386      	movs	r3, #134	@ 0x86
 800d028:	009b      	lsls	r3, r3, #2
 800d02a:	2100      	movs	r1, #0
 800d02c:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	7c1b      	ldrb	r3, [r3, #16]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d10a      	bne.n	800d04c <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d036:	68ba      	ldr	r2, [r7, #8]
 800d038:	2381      	movs	r3, #129	@ 0x81
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	58d2      	ldr	r2, [r2, r3]
 800d03e:	2380      	movs	r3, #128	@ 0x80
 800d040:	009b      	lsls	r3, r3, #2
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	2101      	movs	r1, #1
 800d046:	f004 ffc4 	bl	8011fd2 <USBD_LL_PrepareReceive>
 800d04a:	e008      	b.n	800d05e <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d04c:	68ba      	ldr	r2, [r7, #8]
 800d04e:	2381      	movs	r3, #129	@ 0x81
 800d050:	009b      	lsls	r3, r3, #2
 800d052:	58d2      	ldr	r2, [r2, r3]
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	2340      	movs	r3, #64	@ 0x40
 800d058:	2101      	movs	r1, #1
 800d05a:	f004 ffba 	bl	8011fd2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800d05e:	230f      	movs	r3, #15
 800d060:	18fb      	adds	r3, r7, r3
 800d062:	781b      	ldrb	r3, [r3, #0]
}
 800d064:	0018      	movs	r0, r3
 800d066:	46bd      	mov	sp, r7
 800d068:	b004      	add	sp, #16
 800d06a:	bd80      	pop	{r7, pc}

0800d06c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b084      	sub	sp, #16
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	000a      	movs	r2, r1
 800d076:	1cfb      	adds	r3, r7, #3
 800d078:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800d07a:	230f      	movs	r3, #15
 800d07c:	18fb      	adds	r3, r7, r3
 800d07e:	2200      	movs	r2, #0
 800d080:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2181      	movs	r1, #129	@ 0x81
 800d086:	0018      	movs	r0, r3
 800d088:	f004 fe90 	bl	8011dac <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2200      	movs	r2, #0
 800d090:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2101      	movs	r1, #1
 800d096:	0018      	movs	r0, r3
 800d098:	f004 fe88 	bl	8011dac <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d09c:	687a      	ldr	r2, [r7, #4]
 800d09e:	23b6      	movs	r3, #182	@ 0xb6
 800d0a0:	005b      	lsls	r3, r3, #1
 800d0a2:	2100      	movs	r1, #0
 800d0a4:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2182      	movs	r1, #130	@ 0x82
 800d0aa:	0018      	movs	r0, r3
 800d0ac:	f004 fe7e 	bl	8011dac <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d0b6:	687a      	ldr	r2, [r7, #4]
 800d0b8:	23ae      	movs	r3, #174	@ 0xae
 800d0ba:	009b      	lsls	r3, r3, #2
 800d0bc:	58d3      	ldr	r3, [r2, r3]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d011      	beq.n	800d0e6 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	23af      	movs	r3, #175	@ 0xaf
 800d0c6:	009b      	lsls	r3, r3, #2
 800d0c8:	58d3      	ldr	r3, [r2, r3]
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	23ae      	movs	r3, #174	@ 0xae
 800d0d2:	009b      	lsls	r3, r3, #2
 800d0d4:	58d3      	ldr	r3, [r2, r3]
 800d0d6:	0018      	movs	r0, r3
 800d0d8:	f004 ffd4 	bl	8012084 <USBD_static_free>
    pdev->pClassData = NULL;
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	23ae      	movs	r3, #174	@ 0xae
 800d0e0:	009b      	lsls	r3, r3, #2
 800d0e2:	2100      	movs	r1, #0
 800d0e4:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800d0e6:	230f      	movs	r3, #15
 800d0e8:	18fb      	adds	r3, r7, r3
 800d0ea:	781b      	ldrb	r3, [r3, #0]
}
 800d0ec:	0018      	movs	r0, r3
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	b004      	add	sp, #16
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b086      	sub	sp, #24
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	23ae      	movs	r3, #174	@ 0xae
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	58d3      	ldr	r3, [r2, r3]
 800d106:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800d108:	230f      	movs	r3, #15
 800d10a:	18fb      	adds	r3, r7, r3
 800d10c:	2200      	movs	r2, #0
 800d10e:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800d110:	230c      	movs	r3, #12
 800d112:	18fb      	adds	r3, r7, r3
 800d114:	2200      	movs	r2, #0
 800d116:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800d118:	2317      	movs	r3, #23
 800d11a:	18fb      	adds	r3, r7, r3
 800d11c:	2200      	movs	r2, #0
 800d11e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	781b      	ldrb	r3, [r3, #0]
 800d124:	001a      	movs	r2, r3
 800d126:	2360      	movs	r3, #96	@ 0x60
 800d128:	4013      	ands	r3, r2
 800d12a:	d03d      	beq.n	800d1a8 <USBD_CDC_Setup+0xb4>
 800d12c:	2b20      	cmp	r3, #32
 800d12e:	d000      	beq.n	800d132 <USBD_CDC_Setup+0x3e>
 800d130:	e094      	b.n	800d25c <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	88db      	ldrh	r3, [r3, #6]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d02b      	beq.n	800d192 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	b25b      	sxtb	r3, r3
 800d140:	2b00      	cmp	r3, #0
 800d142:	da12      	bge.n	800d16a <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d144:	687a      	ldr	r2, [r7, #4]
 800d146:	23af      	movs	r3, #175	@ 0xaf
 800d148:	009b      	lsls	r3, r3, #2
 800d14a:	58d3      	ldr	r3, [r2, r3]
 800d14c:	689b      	ldr	r3, [r3, #8]
 800d14e:	683a      	ldr	r2, [r7, #0]
 800d150:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800d152:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d154:	683a      	ldr	r2, [r7, #0]
 800d156:	88d2      	ldrh	r2, [r2, #6]
 800d158:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d15a:	6939      	ldr	r1, [r7, #16]
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	88da      	ldrh	r2, [r3, #6]
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	0018      	movs	r0, r3
 800d164:	f001 fbaf 	bl	800e8c6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800d168:	e083      	b.n	800d272 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	7859      	ldrb	r1, [r3, #1]
 800d16e:	693a      	ldr	r2, [r7, #16]
 800d170:	2380      	movs	r3, #128	@ 0x80
 800d172:	009b      	lsls	r3, r3, #2
 800d174:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	88db      	ldrh	r3, [r3, #6]
 800d17a:	b2d9      	uxtb	r1, r3
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	4a40      	ldr	r2, [pc, #256]	@ (800d280 <USBD_CDC_Setup+0x18c>)
 800d180:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d182:	6939      	ldr	r1, [r7, #16]
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	88da      	ldrh	r2, [r3, #6]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	0018      	movs	r0, r3
 800d18c:	f001 fbce 	bl	800e92c <USBD_CtlPrepareRx>
      break;
 800d190:	e06f      	b.n	800d272 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d192:	687a      	ldr	r2, [r7, #4]
 800d194:	23af      	movs	r3, #175	@ 0xaf
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	58d3      	ldr	r3, [r2, r3]
 800d19a:	689b      	ldr	r3, [r3, #8]
 800d19c:	683a      	ldr	r2, [r7, #0]
 800d19e:	7850      	ldrb	r0, [r2, #1]
 800d1a0:	6839      	ldr	r1, [r7, #0]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	4798      	blx	r3
      break;
 800d1a6:	e064      	b.n	800d272 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	785b      	ldrb	r3, [r3, #1]
 800d1ac:	2b0b      	cmp	r3, #11
 800d1ae:	d037      	beq.n	800d220 <USBD_CDC_Setup+0x12c>
 800d1b0:	dc47      	bgt.n	800d242 <USBD_CDC_Setup+0x14e>
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d002      	beq.n	800d1bc <USBD_CDC_Setup+0xc8>
 800d1b6:	2b0a      	cmp	r3, #10
 800d1b8:	d019      	beq.n	800d1ee <USBD_CDC_Setup+0xfa>
 800d1ba:	e042      	b.n	800d242 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1bc:	687a      	ldr	r2, [r7, #4]
 800d1be:	23a7      	movs	r3, #167	@ 0xa7
 800d1c0:	009b      	lsls	r3, r3, #2
 800d1c2:	5cd3      	ldrb	r3, [r2, r3]
 800d1c4:	2b03      	cmp	r3, #3
 800d1c6:	d107      	bne.n	800d1d8 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800d1c8:	230c      	movs	r3, #12
 800d1ca:	18f9      	adds	r1, r7, r3
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2202      	movs	r2, #2
 800d1d0:	0018      	movs	r0, r3
 800d1d2:	f001 fb78 	bl	800e8c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d1d6:	e040      	b.n	800d25a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800d1d8:	683a      	ldr	r2, [r7, #0]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	0011      	movs	r1, r2
 800d1de:	0018      	movs	r0, r3
 800d1e0:	f001 faf3 	bl	800e7ca <USBD_CtlError>
            ret = USBD_FAIL;
 800d1e4:	2317      	movs	r3, #23
 800d1e6:	18fb      	adds	r3, r7, r3
 800d1e8:	2202      	movs	r2, #2
 800d1ea:	701a      	strb	r2, [r3, #0]
          break;
 800d1ec:	e035      	b.n	800d25a <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1ee:	687a      	ldr	r2, [r7, #4]
 800d1f0:	23a7      	movs	r3, #167	@ 0xa7
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	5cd3      	ldrb	r3, [r2, r3]
 800d1f6:	2b03      	cmp	r3, #3
 800d1f8:	d107      	bne.n	800d20a <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800d1fa:	230f      	movs	r3, #15
 800d1fc:	18f9      	adds	r1, r7, r3
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2201      	movs	r2, #1
 800d202:	0018      	movs	r0, r3
 800d204:	f001 fb5f 	bl	800e8c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d208:	e027      	b.n	800d25a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800d20a:	683a      	ldr	r2, [r7, #0]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	0011      	movs	r1, r2
 800d210:	0018      	movs	r0, r3
 800d212:	f001 fada 	bl	800e7ca <USBD_CtlError>
            ret = USBD_FAIL;
 800d216:	2317      	movs	r3, #23
 800d218:	18fb      	adds	r3, r7, r3
 800d21a:	2202      	movs	r2, #2
 800d21c:	701a      	strb	r2, [r3, #0]
          break;
 800d21e:	e01c      	b.n	800d25a <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d220:	687a      	ldr	r2, [r7, #4]
 800d222:	23a7      	movs	r3, #167	@ 0xa7
 800d224:	009b      	lsls	r3, r3, #2
 800d226:	5cd3      	ldrb	r3, [r2, r3]
 800d228:	2b03      	cmp	r3, #3
 800d22a:	d015      	beq.n	800d258 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800d22c:	683a      	ldr	r2, [r7, #0]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	0011      	movs	r1, r2
 800d232:	0018      	movs	r0, r3
 800d234:	f001 fac9 	bl	800e7ca <USBD_CtlError>
            ret = USBD_FAIL;
 800d238:	2317      	movs	r3, #23
 800d23a:	18fb      	adds	r3, r7, r3
 800d23c:	2202      	movs	r2, #2
 800d23e:	701a      	strb	r2, [r3, #0]
          }
          break;
 800d240:	e00a      	b.n	800d258 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800d242:	683a      	ldr	r2, [r7, #0]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	0011      	movs	r1, r2
 800d248:	0018      	movs	r0, r3
 800d24a:	f001 fabe 	bl	800e7ca <USBD_CtlError>
          ret = USBD_FAIL;
 800d24e:	2317      	movs	r3, #23
 800d250:	18fb      	adds	r3, r7, r3
 800d252:	2202      	movs	r2, #2
 800d254:	701a      	strb	r2, [r3, #0]
          break;
 800d256:	e000      	b.n	800d25a <USBD_CDC_Setup+0x166>
          break;
 800d258:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800d25a:	e00a      	b.n	800d272 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800d25c:	683a      	ldr	r2, [r7, #0]
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	0011      	movs	r1, r2
 800d262:	0018      	movs	r0, r3
 800d264:	f001 fab1 	bl	800e7ca <USBD_CtlError>
      ret = USBD_FAIL;
 800d268:	2317      	movs	r3, #23
 800d26a:	18fb      	adds	r3, r7, r3
 800d26c:	2202      	movs	r2, #2
 800d26e:	701a      	strb	r2, [r3, #0]
      break;
 800d270:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800d272:	2317      	movs	r3, #23
 800d274:	18fb      	adds	r3, r7, r3
 800d276:	781b      	ldrb	r3, [r3, #0]
}
 800d278:	0018      	movs	r0, r3
 800d27a:	46bd      	mov	sp, r7
 800d27c:	b006      	add	sp, #24
 800d27e:	bd80      	pop	{r7, pc}
 800d280:	00000201 	.word	0x00000201

0800d284 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b084      	sub	sp, #16
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	000a      	movs	r2, r1
 800d28e:	1cfb      	adds	r3, r7, #3
 800d290:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d292:	687a      	ldr	r2, [r7, #4]
 800d294:	23ae      	movs	r3, #174	@ 0xae
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	58d3      	ldr	r3, [r2, r3]
 800d29a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d29c:	687a      	ldr	r2, [r7, #4]
 800d29e:	23b0      	movs	r3, #176	@ 0xb0
 800d2a0:	009b      	lsls	r3, r3, #2
 800d2a2:	58d3      	ldr	r3, [r2, r3]
 800d2a4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	23ae      	movs	r3, #174	@ 0xae
 800d2aa:	009b      	lsls	r3, r3, #2
 800d2ac:	58d3      	ldr	r3, [r2, r3]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d03e      	beq.n	800d330 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d2b2:	1cfb      	adds	r3, r7, #3
 800d2b4:	781a      	ldrb	r2, [r3, #0]
 800d2b6:	6879      	ldr	r1, [r7, #4]
 800d2b8:	0013      	movs	r3, r2
 800d2ba:	009b      	lsls	r3, r3, #2
 800d2bc:	189b      	adds	r3, r3, r2
 800d2be:	009b      	lsls	r3, r3, #2
 800d2c0:	18cb      	adds	r3, r1, r3
 800d2c2:	331c      	adds	r3, #28
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d02b      	beq.n	800d322 <USBD_CDC_DataIn+0x9e>
 800d2ca:	1cfb      	adds	r3, r7, #3
 800d2cc:	781a      	ldrb	r2, [r3, #0]
 800d2ce:	6879      	ldr	r1, [r7, #4]
 800d2d0:	0013      	movs	r3, r2
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	189b      	adds	r3, r3, r2
 800d2d6:	009b      	lsls	r3, r3, #2
 800d2d8:	18cb      	adds	r3, r1, r3
 800d2da:	331c      	adds	r3, #28
 800d2dc:	6818      	ldr	r0, [r3, #0]
 800d2de:	1cfb      	adds	r3, r7, #3
 800d2e0:	781a      	ldrb	r2, [r3, #0]
 800d2e2:	68b9      	ldr	r1, [r7, #8]
 800d2e4:	0013      	movs	r3, r2
 800d2e6:	009b      	lsls	r3, r3, #2
 800d2e8:	189b      	adds	r3, r3, r2
 800d2ea:	00db      	lsls	r3, r3, #3
 800d2ec:	18cb      	adds	r3, r1, r3
 800d2ee:	3320      	adds	r3, #32
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	0019      	movs	r1, r3
 800d2f4:	f7f2 ffaa 	bl	800024c <__aeabi_uidivmod>
 800d2f8:	1e0b      	subs	r3, r1, #0
 800d2fa:	d112      	bne.n	800d322 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800d2fc:	1cfb      	adds	r3, r7, #3
 800d2fe:	781a      	ldrb	r2, [r3, #0]
 800d300:	6879      	ldr	r1, [r7, #4]
 800d302:	0013      	movs	r3, r2
 800d304:	009b      	lsls	r3, r3, #2
 800d306:	189b      	adds	r3, r3, r2
 800d308:	009b      	lsls	r3, r3, #2
 800d30a:	18cb      	adds	r3, r1, r3
 800d30c:	331c      	adds	r3, #28
 800d30e:	2200      	movs	r2, #0
 800d310:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d312:	1cfb      	adds	r3, r7, #3
 800d314:	7819      	ldrb	r1, [r3, #0]
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	2300      	movs	r3, #0
 800d31a:	2200      	movs	r2, #0
 800d31c:	f004 fe22 	bl	8011f64 <USBD_LL_Transmit>
 800d320:	e004      	b.n	800d32c <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800d322:	68fa      	ldr	r2, [r7, #12]
 800d324:	2385      	movs	r3, #133	@ 0x85
 800d326:	009b      	lsls	r3, r3, #2
 800d328:	2100      	movs	r1, #0
 800d32a:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800d32c:	2300      	movs	r3, #0
 800d32e:	e000      	b.n	800d332 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800d330:	2302      	movs	r3, #2
  }
}
 800d332:	0018      	movs	r0, r3
 800d334:	46bd      	mov	sp, r7
 800d336:	b004      	add	sp, #16
 800d338:	bd80      	pop	{r7, pc}

0800d33a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d33a:	b580      	push	{r7, lr}
 800d33c:	b084      	sub	sp, #16
 800d33e:	af00      	add	r7, sp, #0
 800d340:	6078      	str	r0, [r7, #4]
 800d342:	000a      	movs	r2, r1
 800d344:	1cfb      	adds	r3, r7, #3
 800d346:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d348:	687a      	ldr	r2, [r7, #4]
 800d34a:	23ae      	movs	r3, #174	@ 0xae
 800d34c:	009b      	lsls	r3, r3, #2
 800d34e:	58d3      	ldr	r3, [r2, r3]
 800d350:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d352:	1cfb      	adds	r3, r7, #3
 800d354:	781a      	ldrb	r2, [r3, #0]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	0011      	movs	r1, r2
 800d35a:	0018      	movs	r0, r3
 800d35c:	f004 fe70 	bl	8012040 <USBD_LL_GetRxDataSize>
 800d360:	0001      	movs	r1, r0
 800d362:	68fa      	ldr	r2, [r7, #12]
 800d364:	2383      	movs	r3, #131	@ 0x83
 800d366:	009b      	lsls	r3, r3, #2
 800d368:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	23ae      	movs	r3, #174	@ 0xae
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	58d3      	ldr	r3, [r2, r3]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d011      	beq.n	800d39a <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d376:	687a      	ldr	r2, [r7, #4]
 800d378:	23af      	movs	r3, #175	@ 0xaf
 800d37a:	009b      	lsls	r3, r3, #2
 800d37c:	58d3      	ldr	r3, [r2, r3]
 800d37e:	68da      	ldr	r2, [r3, #12]
 800d380:	68f9      	ldr	r1, [r7, #12]
 800d382:	2381      	movs	r3, #129	@ 0x81
 800d384:	009b      	lsls	r3, r3, #2
 800d386:	58c8      	ldr	r0, [r1, r3]
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2183      	movs	r1, #131	@ 0x83
 800d38c:	0089      	lsls	r1, r1, #2
 800d38e:	468c      	mov	ip, r1
 800d390:	4463      	add	r3, ip
 800d392:	0019      	movs	r1, r3
 800d394:	4790      	blx	r2

    return USBD_OK;
 800d396:	2300      	movs	r3, #0
 800d398:	e000      	b.n	800d39c <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800d39a:	2302      	movs	r3, #2
  }
}
 800d39c:	0018      	movs	r0, r3
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	b004      	add	sp, #16
 800d3a2:	bd80      	pop	{r7, pc}

0800d3a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d3a4:	b590      	push	{r4, r7, lr}
 800d3a6:	b085      	sub	sp, #20
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d3ac:	687a      	ldr	r2, [r7, #4]
 800d3ae:	23ae      	movs	r3, #174	@ 0xae
 800d3b0:	009b      	lsls	r3, r3, #2
 800d3b2:	58d3      	ldr	r3, [r2, r3]
 800d3b4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d3b6:	687a      	ldr	r2, [r7, #4]
 800d3b8:	23af      	movs	r3, #175	@ 0xaf
 800d3ba:	009b      	lsls	r3, r3, #2
 800d3bc:	58d3      	ldr	r3, [r2, r3]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d018      	beq.n	800d3f4 <USBD_CDC_EP0_RxReady+0x50>
 800d3c2:	68fa      	ldr	r2, [r7, #12]
 800d3c4:	2380      	movs	r3, #128	@ 0x80
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	5cd3      	ldrb	r3, [r2, r3]
 800d3ca:	2bff      	cmp	r3, #255	@ 0xff
 800d3cc:	d012      	beq.n	800d3f4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	23af      	movs	r3, #175	@ 0xaf
 800d3d2:	009b      	lsls	r3, r3, #2
 800d3d4:	58d3      	ldr	r3, [r2, r3]
 800d3d6:	689b      	ldr	r3, [r3, #8]
 800d3d8:	68f9      	ldr	r1, [r7, #12]
 800d3da:	2280      	movs	r2, #128	@ 0x80
 800d3dc:	0092      	lsls	r2, r2, #2
 800d3de:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800d3e0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d3e2:	68fa      	ldr	r2, [r7, #12]
 800d3e4:	4c06      	ldr	r4, [pc, #24]	@ (800d400 <USBD_CDC_EP0_RxReady+0x5c>)
 800d3e6:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d3e8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d3ea:	68fa      	ldr	r2, [r7, #12]
 800d3ec:	2380      	movs	r3, #128	@ 0x80
 800d3ee:	009b      	lsls	r3, r3, #2
 800d3f0:	21ff      	movs	r1, #255	@ 0xff
 800d3f2:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800d3f4:	2300      	movs	r3, #0
}
 800d3f6:	0018      	movs	r0, r3
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	b005      	add	sp, #20
 800d3fc:	bd90      	pop	{r4, r7, pc}
 800d3fe:	46c0      	nop			@ (mov r8, r8)
 800d400:	00000201 	.word	0x00000201

0800d404 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b082      	sub	sp, #8
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2243      	movs	r2, #67	@ 0x43
 800d410:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800d412:	4b02      	ldr	r3, [pc, #8]	@ (800d41c <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800d414:	0018      	movs	r0, r3
 800d416:	46bd      	mov	sp, r7
 800d418:	b002      	add	sp, #8
 800d41a:	bd80      	pop	{r7, pc}
 800d41c:	20000104 	.word	0x20000104

0800d420 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2243      	movs	r2, #67	@ 0x43
 800d42c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800d42e:	4b02      	ldr	r3, [pc, #8]	@ (800d438 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800d430:	0018      	movs	r0, r3
 800d432:	46bd      	mov	sp, r7
 800d434:	b002      	add	sp, #8
 800d436:	bd80      	pop	{r7, pc}
 800d438:	200000c0 	.word	0x200000c0

0800d43c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2243      	movs	r2, #67	@ 0x43
 800d448:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800d44a:	4b02      	ldr	r3, [pc, #8]	@ (800d454 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800d44c:	0018      	movs	r0, r3
 800d44e:	46bd      	mov	sp, r7
 800d450:	b002      	add	sp, #8
 800d452:	bd80      	pop	{r7, pc}
 800d454:	20000148 	.word	0x20000148

0800d458 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	220a      	movs	r2, #10
 800d464:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800d466:	4b02      	ldr	r3, [pc, #8]	@ (800d470 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800d468:	0018      	movs	r0, r3
 800d46a:	46bd      	mov	sp, r7
 800d46c:	b002      	add	sp, #8
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	2000007c 	.word	0x2000007c

0800d474 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b084      	sub	sp, #16
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800d47e:	200f      	movs	r0, #15
 800d480:	183b      	adds	r3, r7, r0
 800d482:	2202      	movs	r2, #2
 800d484:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d007      	beq.n	800d49c <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800d48c:	687a      	ldr	r2, [r7, #4]
 800d48e:	23af      	movs	r3, #175	@ 0xaf
 800d490:	009b      	lsls	r3, r3, #2
 800d492:	6839      	ldr	r1, [r7, #0]
 800d494:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800d496:	183b      	adds	r3, r7, r0
 800d498:	2200      	movs	r2, #0
 800d49a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800d49c:	230f      	movs	r3, #15
 800d49e:	18fb      	adds	r3, r7, r3
 800d4a0:	781b      	ldrb	r3, [r3, #0]
}
 800d4a2:	0018      	movs	r0, r3
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	b004      	add	sp, #16
 800d4a8:	bd80      	pop	{r7, pc}

0800d4aa <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800d4aa:	b580      	push	{r7, lr}
 800d4ac:	b086      	sub	sp, #24
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	60f8      	str	r0, [r7, #12]
 800d4b2:	60b9      	str	r1, [r7, #8]
 800d4b4:	1dbb      	adds	r3, r7, #6
 800d4b6:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d4b8:	68fa      	ldr	r2, [r7, #12]
 800d4ba:	23ae      	movs	r3, #174	@ 0xae
 800d4bc:	009b      	lsls	r3, r3, #2
 800d4be:	58d3      	ldr	r3, [r2, r3]
 800d4c0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d4c2:	697a      	ldr	r2, [r7, #20]
 800d4c4:	2382      	movs	r3, #130	@ 0x82
 800d4c6:	009b      	lsls	r3, r3, #2
 800d4c8:	68b9      	ldr	r1, [r7, #8]
 800d4ca:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800d4cc:	1dbb      	adds	r3, r7, #6
 800d4ce:	8819      	ldrh	r1, [r3, #0]
 800d4d0:	697a      	ldr	r2, [r7, #20]
 800d4d2:	2384      	movs	r3, #132	@ 0x84
 800d4d4:	009b      	lsls	r3, r3, #2
 800d4d6:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800d4d8:	2300      	movs	r3, #0
}
 800d4da:	0018      	movs	r0, r3
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	b006      	add	sp, #24
 800d4e0:	bd80      	pop	{r7, pc}

0800d4e2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800d4e2:	b580      	push	{r7, lr}
 800d4e4:	b084      	sub	sp, #16
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
 800d4ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d4ec:	687a      	ldr	r2, [r7, #4]
 800d4ee:	23ae      	movs	r3, #174	@ 0xae
 800d4f0:	009b      	lsls	r3, r3, #2
 800d4f2:	58d3      	ldr	r3, [r2, r3]
 800d4f4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d4f6:	68fa      	ldr	r2, [r7, #12]
 800d4f8:	2381      	movs	r3, #129	@ 0x81
 800d4fa:	009b      	lsls	r3, r3, #2
 800d4fc:	6839      	ldr	r1, [r7, #0]
 800d4fe:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800d500:	2300      	movs	r3, #0
}
 800d502:	0018      	movs	r0, r3
 800d504:	46bd      	mov	sp, r7
 800d506:	b004      	add	sp, #16
 800d508:	bd80      	pop	{r7, pc}

0800d50a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b084      	sub	sp, #16
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	23ae      	movs	r3, #174	@ 0xae
 800d516:	009b      	lsls	r3, r3, #2
 800d518:	58d3      	ldr	r3, [r2, r3]
 800d51a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800d51c:	687a      	ldr	r2, [r7, #4]
 800d51e:	23ae      	movs	r3, #174	@ 0xae
 800d520:	009b      	lsls	r3, r3, #2
 800d522:	58d3      	ldr	r3, [r2, r3]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d022      	beq.n	800d56e <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800d528:	68fa      	ldr	r2, [r7, #12]
 800d52a:	2385      	movs	r3, #133	@ 0x85
 800d52c:	009b      	lsls	r3, r3, #2
 800d52e:	58d3      	ldr	r3, [r2, r3]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d11a      	bne.n	800d56a <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800d534:	68fa      	ldr	r2, [r7, #12]
 800d536:	2385      	movs	r3, #133	@ 0x85
 800d538:	009b      	lsls	r3, r3, #2
 800d53a:	2101      	movs	r1, #1
 800d53c:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d53e:	68fa      	ldr	r2, [r7, #12]
 800d540:	2384      	movs	r3, #132	@ 0x84
 800d542:	009b      	lsls	r3, r3, #2
 800d544:	58d2      	ldr	r2, [r2, r3]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d54a:	68fa      	ldr	r2, [r7, #12]
 800d54c:	2382      	movs	r3, #130	@ 0x82
 800d54e:	009b      	lsls	r3, r3, #2
 800d550:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800d552:	68fa      	ldr	r2, [r7, #12]
 800d554:	2384      	movs	r3, #132	@ 0x84
 800d556:	009b      	lsls	r3, r3, #2
 800d558:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	000a      	movs	r2, r1
 800d560:	2181      	movs	r1, #129	@ 0x81
 800d562:	f004 fcff 	bl	8011f64 <USBD_LL_Transmit>

      return USBD_OK;
 800d566:	2300      	movs	r3, #0
 800d568:	e002      	b.n	800d570 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800d56a:	2301      	movs	r3, #1
 800d56c:	e000      	b.n	800d570 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800d56e:	2302      	movs	r3, #2
  }
}
 800d570:	0018      	movs	r0, r3
 800d572:	46bd      	mov	sp, r7
 800d574:	b004      	add	sp, #16
 800d576:	bd80      	pop	{r7, pc}

0800d578 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b084      	sub	sp, #16
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d580:	687a      	ldr	r2, [r7, #4]
 800d582:	23ae      	movs	r3, #174	@ 0xae
 800d584:	009b      	lsls	r3, r3, #2
 800d586:	58d3      	ldr	r3, [r2, r3]
 800d588:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800d58a:	687a      	ldr	r2, [r7, #4]
 800d58c:	23ae      	movs	r3, #174	@ 0xae
 800d58e:	009b      	lsls	r3, r3, #2
 800d590:	58d3      	ldr	r3, [r2, r3]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d019      	beq.n	800d5ca <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	7c1b      	ldrb	r3, [r3, #16]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d10a      	bne.n	800d5b4 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d59e:	68fa      	ldr	r2, [r7, #12]
 800d5a0:	2381      	movs	r3, #129	@ 0x81
 800d5a2:	009b      	lsls	r3, r3, #2
 800d5a4:	58d2      	ldr	r2, [r2, r3]
 800d5a6:	2380      	movs	r3, #128	@ 0x80
 800d5a8:	009b      	lsls	r3, r3, #2
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	2101      	movs	r1, #1
 800d5ae:	f004 fd10 	bl	8011fd2 <USBD_LL_PrepareReceive>
 800d5b2:	e008      	b.n	800d5c6 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d5b4:	68fa      	ldr	r2, [r7, #12]
 800d5b6:	2381      	movs	r3, #129	@ 0x81
 800d5b8:	009b      	lsls	r3, r3, #2
 800d5ba:	58d2      	ldr	r2, [r2, r3]
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	2340      	movs	r3, #64	@ 0x40
 800d5c0:	2101      	movs	r1, #1
 800d5c2:	f004 fd06 	bl	8011fd2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	e000      	b.n	800d5cc <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800d5ca:	2302      	movs	r3, #2
  }
}
 800d5cc:	0018      	movs	r0, r3
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	b004      	add	sp, #16
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	60f8      	str	r0, [r7, #12]
 800d5dc:	60b9      	str	r1, [r7, #8]
 800d5de:	1dfb      	adds	r3, r7, #7
 800d5e0:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d101      	bne.n	800d5ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d5e8:	2302      	movs	r3, #2
 800d5ea:	e020      	b.n	800d62e <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800d5ec:	68fa      	ldr	r2, [r7, #12]
 800d5ee:	23ad      	movs	r3, #173	@ 0xad
 800d5f0:	009b      	lsls	r3, r3, #2
 800d5f2:	58d3      	ldr	r3, [r2, r3]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d004      	beq.n	800d602 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800d5f8:	68fa      	ldr	r2, [r7, #12]
 800d5fa:	23ad      	movs	r3, #173	@ 0xad
 800d5fc:	009b      	lsls	r3, r3, #2
 800d5fe:	2100      	movs	r1, #0
 800d600:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d004      	beq.n	800d612 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d608:	68fa      	ldr	r2, [r7, #12]
 800d60a:	23ac      	movs	r3, #172	@ 0xac
 800d60c:	009b      	lsls	r3, r3, #2
 800d60e:	68b9      	ldr	r1, [r7, #8]
 800d610:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d612:	68fa      	ldr	r2, [r7, #12]
 800d614:	23a7      	movs	r3, #167	@ 0xa7
 800d616:	009b      	lsls	r3, r3, #2
 800d618:	2101      	movs	r1, #1
 800d61a:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	1dfa      	adds	r2, r7, #7
 800d620:	7812      	ldrb	r2, [r2, #0]
 800d622:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	0018      	movs	r0, r3
 800d628:	f004 fb00 	bl	8011c2c <USBD_LL_Init>

  return USBD_OK;
 800d62c:	2300      	movs	r3, #0
}
 800d62e:	0018      	movs	r0, r3
 800d630:	46bd      	mov	sp, r7
 800d632:	b004      	add	sp, #16
 800d634:	bd80      	pop	{r7, pc}

0800d636 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d636:	b580      	push	{r7, lr}
 800d638:	b084      	sub	sp, #16
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	6078      	str	r0, [r7, #4]
 800d63e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800d640:	200f      	movs	r0, #15
 800d642:	183b      	adds	r3, r7, r0
 800d644:	2200      	movs	r2, #0
 800d646:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d008      	beq.n	800d660 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800d64e:	687a      	ldr	r2, [r7, #4]
 800d650:	23ad      	movs	r3, #173	@ 0xad
 800d652:	009b      	lsls	r3, r3, #2
 800d654:	6839      	ldr	r1, [r7, #0]
 800d656:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800d658:	183b      	adds	r3, r7, r0
 800d65a:	2200      	movs	r2, #0
 800d65c:	701a      	strb	r2, [r3, #0]
 800d65e:	e003      	b.n	800d668 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800d660:	230f      	movs	r3, #15
 800d662:	18fb      	adds	r3, r7, r3
 800d664:	2202      	movs	r2, #2
 800d666:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800d668:	230f      	movs	r3, #15
 800d66a:	18fb      	adds	r3, r7, r3
 800d66c:	781b      	ldrb	r3, [r3, #0]
}
 800d66e:	0018      	movs	r0, r3
 800d670:	46bd      	mov	sp, r7
 800d672:	b004      	add	sp, #16
 800d674:	bd80      	pop	{r7, pc}

0800d676 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d676:	b580      	push	{r7, lr}
 800d678:	b082      	sub	sp, #8
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	0018      	movs	r0, r3
 800d682:	f004 fb37 	bl	8011cf4 <USBD_LL_Start>

  return USBD_OK;
 800d686:	2300      	movs	r3, #0
}
 800d688:	0018      	movs	r0, r3
 800d68a:	46bd      	mov	sp, r7
 800d68c:	b002      	add	sp, #8
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d698:	2300      	movs	r3, #0
}
 800d69a:	0018      	movs	r0, r3
 800d69c:	46bd      	mov	sp, r7
 800d69e:	b002      	add	sp, #8
 800d6a0:	bd80      	pop	{r7, pc}

0800d6a2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d6a2:	b590      	push	{r4, r7, lr}
 800d6a4:	b085      	sub	sp, #20
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	6078      	str	r0, [r7, #4]
 800d6aa:	000a      	movs	r2, r1
 800d6ac:	1cfb      	adds	r3, r7, #3
 800d6ae:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d6b0:	240f      	movs	r4, #15
 800d6b2:	193b      	adds	r3, r7, r4
 800d6b4:	2202      	movs	r2, #2
 800d6b6:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800d6b8:	687a      	ldr	r2, [r7, #4]
 800d6ba:	23ad      	movs	r3, #173	@ 0xad
 800d6bc:	009b      	lsls	r3, r3, #2
 800d6be:	58d3      	ldr	r3, [r2, r3]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d00e      	beq.n	800d6e2 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	23ad      	movs	r3, #173	@ 0xad
 800d6c8:	009b      	lsls	r3, r3, #2
 800d6ca:	58d3      	ldr	r3, [r2, r3]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	1cfa      	adds	r2, r7, #3
 800d6d0:	7811      	ldrb	r1, [r2, #0]
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	0010      	movs	r0, r2
 800d6d6:	4798      	blx	r3
 800d6d8:	1e03      	subs	r3, r0, #0
 800d6da:	d102      	bne.n	800d6e2 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800d6dc:	193b      	adds	r3, r7, r4
 800d6de:	2200      	movs	r2, #0
 800d6e0:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800d6e2:	230f      	movs	r3, #15
 800d6e4:	18fb      	adds	r3, r7, r3
 800d6e6:	781b      	ldrb	r3, [r3, #0]
}
 800d6e8:	0018      	movs	r0, r3
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	b005      	add	sp, #20
 800d6ee:	bd90      	pop	{r4, r7, pc}

0800d6f0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b082      	sub	sp, #8
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	000a      	movs	r2, r1
 800d6fa:	1cfb      	adds	r3, r7, #3
 800d6fc:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	23ad      	movs	r3, #173	@ 0xad
 800d702:	009b      	lsls	r3, r3, #2
 800d704:	58d3      	ldr	r3, [r2, r3]
 800d706:	685b      	ldr	r3, [r3, #4]
 800d708:	1cfa      	adds	r2, r7, #3
 800d70a:	7811      	ldrb	r1, [r2, #0]
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	0010      	movs	r0, r2
 800d710:	4798      	blx	r3

  return USBD_OK;
 800d712:	2300      	movs	r3, #0
}
 800d714:	0018      	movs	r0, r3
 800d716:	46bd      	mov	sp, r7
 800d718:	b002      	add	sp, #8
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b082      	sub	sp, #8
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	22aa      	movs	r2, #170	@ 0xaa
 800d72a:	0092      	lsls	r2, r2, #2
 800d72c:	4694      	mov	ip, r2
 800d72e:	4463      	add	r3, ip
 800d730:	683a      	ldr	r2, [r7, #0]
 800d732:	0011      	movs	r1, r2
 800d734:	0018      	movs	r0, r3
 800d736:	f001 f810 	bl	800e75a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d73a:	687a      	ldr	r2, [r7, #4]
 800d73c:	23a5      	movs	r3, #165	@ 0xa5
 800d73e:	009b      	lsls	r3, r3, #2
 800d740:	2101      	movs	r1, #1
 800d742:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	4a23      	ldr	r2, [pc, #140]	@ (800d7d4 <USBD_LL_SetupStage+0xb8>)
 800d748:	5a9b      	ldrh	r3, [r3, r2]
 800d74a:	0019      	movs	r1, r3
 800d74c:	687a      	ldr	r2, [r7, #4]
 800d74e:	23a6      	movs	r3, #166	@ 0xa6
 800d750:	009b      	lsls	r3, r3, #2
 800d752:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800d754:	687a      	ldr	r2, [r7, #4]
 800d756:	23aa      	movs	r3, #170	@ 0xaa
 800d758:	009b      	lsls	r3, r3, #2
 800d75a:	5cd3      	ldrb	r3, [r2, r3]
 800d75c:	001a      	movs	r2, r3
 800d75e:	231f      	movs	r3, #31
 800d760:	4013      	ands	r3, r2
 800d762:	2b02      	cmp	r3, #2
 800d764:	d019      	beq.n	800d79a <USBD_LL_SetupStage+0x7e>
 800d766:	d822      	bhi.n	800d7ae <USBD_LL_SetupStage+0x92>
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d002      	beq.n	800d772 <USBD_LL_SetupStage+0x56>
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d00a      	beq.n	800d786 <USBD_LL_SetupStage+0x6a>
 800d770:	e01d      	b.n	800d7ae <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	22aa      	movs	r2, #170	@ 0xaa
 800d776:	0092      	lsls	r2, r2, #2
 800d778:	189a      	adds	r2, r3, r2
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	0011      	movs	r1, r2
 800d77e:	0018      	movs	r0, r3
 800d780:	f000 fa10 	bl	800dba4 <USBD_StdDevReq>
      break;
 800d784:	e020      	b.n	800d7c8 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	22aa      	movs	r2, #170	@ 0xaa
 800d78a:	0092      	lsls	r2, r2, #2
 800d78c:	189a      	adds	r2, r3, r2
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	0011      	movs	r1, r2
 800d792:	0018      	movs	r0, r3
 800d794:	f000 fa78 	bl	800dc88 <USBD_StdItfReq>
      break;
 800d798:	e016      	b.n	800d7c8 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	22aa      	movs	r2, #170	@ 0xaa
 800d79e:	0092      	lsls	r2, r2, #2
 800d7a0:	189a      	adds	r2, r3, r2
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	0011      	movs	r1, r2
 800d7a6:	0018      	movs	r0, r3
 800d7a8:	f000 fac5 	bl	800dd36 <USBD_StdEPReq>
      break;
 800d7ac:	e00c      	b.n	800d7c8 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d7ae:	687a      	ldr	r2, [r7, #4]
 800d7b0:	23aa      	movs	r3, #170	@ 0xaa
 800d7b2:	009b      	lsls	r3, r3, #2
 800d7b4:	5cd3      	ldrb	r3, [r2, r3]
 800d7b6:	227f      	movs	r2, #127	@ 0x7f
 800d7b8:	4393      	bics	r3, r2
 800d7ba:	b2da      	uxtb	r2, r3
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	0011      	movs	r1, r2
 800d7c0:	0018      	movs	r0, r3
 800d7c2:	f004 fb1e 	bl	8011e02 <USBD_LL_StallEP>
      break;
 800d7c6:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800d7c8:	2300      	movs	r3, #0
}
 800d7ca:	0018      	movs	r0, r3
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	b002      	add	sp, #8
 800d7d0:	bd80      	pop	{r7, pc}
 800d7d2:	46c0      	nop			@ (mov r8, r8)
 800d7d4:	000002ae 	.word	0x000002ae

0800d7d8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b086      	sub	sp, #24
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	60f8      	str	r0, [r7, #12]
 800d7e0:	607a      	str	r2, [r7, #4]
 800d7e2:	200b      	movs	r0, #11
 800d7e4:	183b      	adds	r3, r7, r0
 800d7e6:	1c0a      	adds	r2, r1, #0
 800d7e8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d7ea:	183b      	adds	r3, r7, r0
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d154      	bne.n	800d89c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	3355      	adds	r3, #85	@ 0x55
 800d7f6:	33ff      	adds	r3, #255	@ 0xff
 800d7f8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d7fa:	68fa      	ldr	r2, [r7, #12]
 800d7fc:	23a5      	movs	r3, #165	@ 0xa5
 800d7fe:	009b      	lsls	r3, r3, #2
 800d800:	58d3      	ldr	r3, [r2, r3]
 800d802:	2b03      	cmp	r3, #3
 800d804:	d139      	bne.n	800d87a <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	68da      	ldr	r2, [r3, #12]
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	691b      	ldr	r3, [r3, #16]
 800d80e:	429a      	cmp	r2, r3
 800d810:	d919      	bls.n	800d846 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	68da      	ldr	r2, [r3, #12]
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	691b      	ldr	r3, [r3, #16]
 800d81a:	1ad2      	subs	r2, r2, r3
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	68da      	ldr	r2, [r3, #12]
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d828:	429a      	cmp	r2, r3
 800d82a:	d203      	bcs.n	800d834 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800d830:	b29b      	uxth	r3, r3
 800d832:	e002      	b.n	800d83a <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d838:	b29b      	uxth	r3, r3
 800d83a:	6879      	ldr	r1, [r7, #4]
 800d83c:	68f8      	ldr	r0, [r7, #12]
 800d83e:	001a      	movs	r2, r3
 800d840:	f001 f898 	bl	800e974 <USBD_CtlContinueRx>
 800d844:	e045      	b.n	800d8d2 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d846:	68fa      	ldr	r2, [r7, #12]
 800d848:	23ad      	movs	r3, #173	@ 0xad
 800d84a:	009b      	lsls	r3, r3, #2
 800d84c:	58d3      	ldr	r3, [r2, r3]
 800d84e:	691b      	ldr	r3, [r3, #16]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d00d      	beq.n	800d870 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d854:	68fa      	ldr	r2, [r7, #12]
 800d856:	23a7      	movs	r3, #167	@ 0xa7
 800d858:	009b      	lsls	r3, r3, #2
 800d85a:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d85c:	2b03      	cmp	r3, #3
 800d85e:	d107      	bne.n	800d870 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d860:	68fa      	ldr	r2, [r7, #12]
 800d862:	23ad      	movs	r3, #173	@ 0xad
 800d864:	009b      	lsls	r3, r3, #2
 800d866:	58d3      	ldr	r3, [r2, r3]
 800d868:	691b      	ldr	r3, [r3, #16]
 800d86a:	68fa      	ldr	r2, [r7, #12]
 800d86c:	0010      	movs	r0, r2
 800d86e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	0018      	movs	r0, r3
 800d874:	f001 f891 	bl	800e99a <USBD_CtlSendStatus>
 800d878:	e02b      	b.n	800d8d2 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800d87a:	68fa      	ldr	r2, [r7, #12]
 800d87c:	23a5      	movs	r3, #165	@ 0xa5
 800d87e:	009b      	lsls	r3, r3, #2
 800d880:	58d3      	ldr	r3, [r2, r3]
 800d882:	2b05      	cmp	r3, #5
 800d884:	d125      	bne.n	800d8d2 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800d886:	68fa      	ldr	r2, [r7, #12]
 800d888:	23a5      	movs	r3, #165	@ 0xa5
 800d88a:	009b      	lsls	r3, r3, #2
 800d88c:	2100      	movs	r1, #0
 800d88e:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2100      	movs	r1, #0
 800d894:	0018      	movs	r0, r3
 800d896:	f004 fab4 	bl	8011e02 <USBD_LL_StallEP>
 800d89a:	e01a      	b.n	800d8d2 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800d89c:	68fa      	ldr	r2, [r7, #12]
 800d89e:	23ad      	movs	r3, #173	@ 0xad
 800d8a0:	009b      	lsls	r3, r3, #2
 800d8a2:	58d3      	ldr	r3, [r2, r3]
 800d8a4:	699b      	ldr	r3, [r3, #24]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d011      	beq.n	800d8ce <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d8aa:	68fa      	ldr	r2, [r7, #12]
 800d8ac:	23a7      	movs	r3, #167	@ 0xa7
 800d8ae:	009b      	lsls	r3, r3, #2
 800d8b0:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800d8b2:	2b03      	cmp	r3, #3
 800d8b4:	d10b      	bne.n	800d8ce <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800d8b6:	68fa      	ldr	r2, [r7, #12]
 800d8b8:	23ad      	movs	r3, #173	@ 0xad
 800d8ba:	009b      	lsls	r3, r3, #2
 800d8bc:	58d3      	ldr	r3, [r2, r3]
 800d8be:	699b      	ldr	r3, [r3, #24]
 800d8c0:	220b      	movs	r2, #11
 800d8c2:	18ba      	adds	r2, r7, r2
 800d8c4:	7811      	ldrb	r1, [r2, #0]
 800d8c6:	68fa      	ldr	r2, [r7, #12]
 800d8c8:	0010      	movs	r0, r2
 800d8ca:	4798      	blx	r3
 800d8cc:	e001      	b.n	800d8d2 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d8ce:	2302      	movs	r3, #2
 800d8d0:	e000      	b.n	800d8d4 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800d8d2:	2300      	movs	r3, #0
}
 800d8d4:	0018      	movs	r0, r3
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	b006      	add	sp, #24
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b086      	sub	sp, #24
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	60f8      	str	r0, [r7, #12]
 800d8e4:	607a      	str	r2, [r7, #4]
 800d8e6:	200b      	movs	r0, #11
 800d8e8:	183b      	adds	r3, r7, r0
 800d8ea:	1c0a      	adds	r2, r1, #0
 800d8ec:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d8ee:	183b      	adds	r3, r7, r0
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d000      	beq.n	800d8f8 <USBD_LL_DataInStage+0x1c>
 800d8f6:	e08e      	b.n	800da16 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	3314      	adds	r3, #20
 800d8fc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d8fe:	68fa      	ldr	r2, [r7, #12]
 800d900:	23a5      	movs	r3, #165	@ 0xa5
 800d902:	009b      	lsls	r3, r3, #2
 800d904:	58d3      	ldr	r3, [r2, r3]
 800d906:	2b02      	cmp	r3, #2
 800d908:	d164      	bne.n	800d9d4 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	68da      	ldr	r2, [r3, #12]
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	691b      	ldr	r3, [r3, #16]
 800d912:	429a      	cmp	r2, r3
 800d914:	d915      	bls.n	800d942 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	68da      	ldr	r2, [r3, #12]
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	691b      	ldr	r3, [r3, #16]
 800d91e:	1ad2      	subs	r2, r2, r3
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	68db      	ldr	r3, [r3, #12]
 800d928:	b29a      	uxth	r2, r3
 800d92a:	6879      	ldr	r1, [r7, #4]
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	0018      	movs	r0, r3
 800d930:	f000 ffe9 	bl	800e906 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d934:	68f8      	ldr	r0, [r7, #12]
 800d936:	2300      	movs	r3, #0
 800d938:	2200      	movs	r2, #0
 800d93a:	2100      	movs	r1, #0
 800d93c:	f004 fb49 	bl	8011fd2 <USBD_LL_PrepareReceive>
 800d940:	e059      	b.n	800d9f6 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	689a      	ldr	r2, [r3, #8]
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	691b      	ldr	r3, [r3, #16]
 800d94a:	0019      	movs	r1, r3
 800d94c:	0010      	movs	r0, r2
 800d94e:	f7f2 fc7d 	bl	800024c <__aeabi_uidivmod>
 800d952:	1e0b      	subs	r3, r1, #0
 800d954:	d11f      	bne.n	800d996 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	689a      	ldr	r2, [r3, #8]
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800d95e:	429a      	cmp	r2, r3
 800d960:	d319      	bcc.n	800d996 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	689a      	ldr	r2, [r3, #8]
 800d966:	68f9      	ldr	r1, [r7, #12]
 800d968:	23a6      	movs	r3, #166	@ 0xa6
 800d96a:	009b      	lsls	r3, r3, #2
 800d96c:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800d96e:	429a      	cmp	r2, r3
 800d970:	d211      	bcs.n	800d996 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	2200      	movs	r2, #0
 800d976:	2100      	movs	r1, #0
 800d978:	0018      	movs	r0, r3
 800d97a:	f000 ffc4 	bl	800e906 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d97e:	68fa      	ldr	r2, [r7, #12]
 800d980:	23a6      	movs	r3, #166	@ 0xa6
 800d982:	009b      	lsls	r3, r3, #2
 800d984:	2100      	movs	r1, #0
 800d986:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d988:	68f8      	ldr	r0, [r7, #12]
 800d98a:	2300      	movs	r3, #0
 800d98c:	2200      	movs	r2, #0
 800d98e:	2100      	movs	r1, #0
 800d990:	f004 fb1f 	bl	8011fd2 <USBD_LL_PrepareReceive>
 800d994:	e02f      	b.n	800d9f6 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d996:	68fa      	ldr	r2, [r7, #12]
 800d998:	23ad      	movs	r3, #173	@ 0xad
 800d99a:	009b      	lsls	r3, r3, #2
 800d99c:	58d3      	ldr	r3, [r2, r3]
 800d99e:	68db      	ldr	r3, [r3, #12]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d00d      	beq.n	800d9c0 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d9a4:	68fa      	ldr	r2, [r7, #12]
 800d9a6:	23a7      	movs	r3, #167	@ 0xa7
 800d9a8:	009b      	lsls	r3, r3, #2
 800d9aa:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d9ac:	2b03      	cmp	r3, #3
 800d9ae:	d107      	bne.n	800d9c0 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d9b0:	68fa      	ldr	r2, [r7, #12]
 800d9b2:	23ad      	movs	r3, #173	@ 0xad
 800d9b4:	009b      	lsls	r3, r3, #2
 800d9b6:	58d3      	ldr	r3, [r2, r3]
 800d9b8:	68db      	ldr	r3, [r3, #12]
 800d9ba:	68fa      	ldr	r2, [r7, #12]
 800d9bc:	0010      	movs	r0, r2
 800d9be:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2180      	movs	r1, #128	@ 0x80
 800d9c4:	0018      	movs	r0, r3
 800d9c6:	f004 fa1c 	bl	8011e02 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	0018      	movs	r0, r3
 800d9ce:	f000 fff8 	bl	800e9c2 <USBD_CtlReceiveStatus>
 800d9d2:	e010      	b.n	800d9f6 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d9d4:	68fa      	ldr	r2, [r7, #12]
 800d9d6:	23a5      	movs	r3, #165	@ 0xa5
 800d9d8:	009b      	lsls	r3, r3, #2
 800d9da:	58d3      	ldr	r3, [r2, r3]
 800d9dc:	2b04      	cmp	r3, #4
 800d9de:	d005      	beq.n	800d9ec <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800d9e0:	68fa      	ldr	r2, [r7, #12]
 800d9e2:	23a5      	movs	r3, #165	@ 0xa5
 800d9e4:	009b      	lsls	r3, r3, #2
 800d9e6:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d104      	bne.n	800d9f6 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	2180      	movs	r1, #128	@ 0x80
 800d9f0:	0018      	movs	r0, r3
 800d9f2:	f004 fa06 	bl	8011e02 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800d9f6:	68fa      	ldr	r2, [r7, #12]
 800d9f8:	23a8      	movs	r3, #168	@ 0xa8
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	5cd3      	ldrb	r3, [r2, r3]
 800d9fe:	2b01      	cmp	r3, #1
 800da00:	d124      	bne.n	800da4c <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	0018      	movs	r0, r3
 800da06:	f7ff fe43 	bl	800d690 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800da0a:	68fa      	ldr	r2, [r7, #12]
 800da0c:	23a8      	movs	r3, #168	@ 0xa8
 800da0e:	009b      	lsls	r3, r3, #2
 800da10:	2100      	movs	r1, #0
 800da12:	54d1      	strb	r1, [r2, r3]
 800da14:	e01a      	b.n	800da4c <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800da16:	68fa      	ldr	r2, [r7, #12]
 800da18:	23ad      	movs	r3, #173	@ 0xad
 800da1a:	009b      	lsls	r3, r3, #2
 800da1c:	58d3      	ldr	r3, [r2, r3]
 800da1e:	695b      	ldr	r3, [r3, #20]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d011      	beq.n	800da48 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800da24:	68fa      	ldr	r2, [r7, #12]
 800da26:	23a7      	movs	r3, #167	@ 0xa7
 800da28:	009b      	lsls	r3, r3, #2
 800da2a:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800da2c:	2b03      	cmp	r3, #3
 800da2e:	d10b      	bne.n	800da48 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800da30:	68fa      	ldr	r2, [r7, #12]
 800da32:	23ad      	movs	r3, #173	@ 0xad
 800da34:	009b      	lsls	r3, r3, #2
 800da36:	58d3      	ldr	r3, [r2, r3]
 800da38:	695b      	ldr	r3, [r3, #20]
 800da3a:	220b      	movs	r2, #11
 800da3c:	18ba      	adds	r2, r7, r2
 800da3e:	7811      	ldrb	r1, [r2, #0]
 800da40:	68fa      	ldr	r2, [r7, #12]
 800da42:	0010      	movs	r0, r2
 800da44:	4798      	blx	r3
 800da46:	e001      	b.n	800da4c <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800da48:	2302      	movs	r3, #2
 800da4a:	e000      	b.n	800da4e <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800da4c:	2300      	movs	r3, #0
}
 800da4e:	0018      	movs	r0, r3
 800da50:	46bd      	mov	sp, r7
 800da52:	b006      	add	sp, #24
 800da54:	bd80      	pop	{r7, pc}

0800da56 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800da56:	b580      	push	{r7, lr}
 800da58:	b082      	sub	sp, #8
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	2340      	movs	r3, #64	@ 0x40
 800da62:	2200      	movs	r2, #0
 800da64:	2100      	movs	r1, #0
 800da66:	f004 f96a 	bl	8011d3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800da6a:	687a      	ldr	r2, [r7, #4]
 800da6c:	23ac      	movs	r3, #172	@ 0xac
 800da6e:	005b      	lsls	r3, r3, #1
 800da70:	2101      	movs	r1, #1
 800da72:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800da74:	687a      	ldr	r2, [r7, #4]
 800da76:	23b2      	movs	r3, #178	@ 0xb2
 800da78:	005b      	lsls	r3, r3, #1
 800da7a:	2140      	movs	r1, #64	@ 0x40
 800da7c:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	2340      	movs	r3, #64	@ 0x40
 800da82:	2200      	movs	r2, #0
 800da84:	2180      	movs	r1, #128	@ 0x80
 800da86:	f004 f95a 	bl	8011d3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2201      	movs	r2, #1
 800da8e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2240      	movs	r2, #64	@ 0x40
 800da94:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800da96:	687a      	ldr	r2, [r7, #4]
 800da98:	23a7      	movs	r3, #167	@ 0xa7
 800da9a:	009b      	lsls	r3, r3, #2
 800da9c:	2101      	movs	r1, #1
 800da9e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	23a5      	movs	r3, #165	@ 0xa5
 800daa4:	009b      	lsls	r3, r3, #2
 800daa6:	2100      	movs	r1, #0
 800daa8:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2200      	movs	r2, #0
 800daae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dab0:	687a      	ldr	r2, [r7, #4]
 800dab2:	23a9      	movs	r3, #169	@ 0xa9
 800dab4:	009b      	lsls	r3, r3, #2
 800dab6:	2100      	movs	r1, #0
 800dab8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800daba:	687a      	ldr	r2, [r7, #4]
 800dabc:	23ae      	movs	r3, #174	@ 0xae
 800dabe:	009b      	lsls	r3, r3, #2
 800dac0:	58d3      	ldr	r3, [r2, r3]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d00a      	beq.n	800dadc <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dac6:	687a      	ldr	r2, [r7, #4]
 800dac8:	23ad      	movs	r3, #173	@ 0xad
 800daca:	009b      	lsls	r3, r3, #2
 800dacc:	58d3      	ldr	r3, [r2, r3]
 800dace:	685a      	ldr	r2, [r3, #4]
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	b2d9      	uxtb	r1, r3
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	0018      	movs	r0, r3
 800dada:	4790      	blx	r2
  }

  return USBD_OK;
 800dadc:	2300      	movs	r3, #0
}
 800dade:	0018      	movs	r0, r3
 800dae0:	46bd      	mov	sp, r7
 800dae2:	b002      	add	sp, #8
 800dae4:	bd80      	pop	{r7, pc}

0800dae6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b082      	sub	sp, #8
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
 800daee:	000a      	movs	r2, r1
 800daf0:	1cfb      	adds	r3, r7, #3
 800daf2:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	1cfa      	adds	r2, r7, #3
 800daf8:	7812      	ldrb	r2, [r2, #0]
 800dafa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dafc:	2300      	movs	r3, #0
}
 800dafe:	0018      	movs	r0, r3
 800db00:	46bd      	mov	sp, r7
 800db02:	b002      	add	sp, #8
 800db04:	bd80      	pop	{r7, pc}
	...

0800db08 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b082      	sub	sp, #8
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800db10:	687a      	ldr	r2, [r7, #4]
 800db12:	23a7      	movs	r3, #167	@ 0xa7
 800db14:	009b      	lsls	r3, r3, #2
 800db16:	5cd1      	ldrb	r1, [r2, r3]
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	4a06      	ldr	r2, [pc, #24]	@ (800db34 <USBD_LL_Suspend+0x2c>)
 800db1c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800db1e:	687a      	ldr	r2, [r7, #4]
 800db20:	23a7      	movs	r3, #167	@ 0xa7
 800db22:	009b      	lsls	r3, r3, #2
 800db24:	2104      	movs	r1, #4
 800db26:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800db28:	2300      	movs	r3, #0
}
 800db2a:	0018      	movs	r0, r3
 800db2c:	46bd      	mov	sp, r7
 800db2e:	b002      	add	sp, #8
 800db30:	bd80      	pop	{r7, pc}
 800db32:	46c0      	nop			@ (mov r8, r8)
 800db34:	0000029d 	.word	0x0000029d

0800db38 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800db40:	687a      	ldr	r2, [r7, #4]
 800db42:	23a7      	movs	r3, #167	@ 0xa7
 800db44:	009b      	lsls	r3, r3, #2
 800db46:	5cd3      	ldrb	r3, [r2, r3]
 800db48:	2b04      	cmp	r3, #4
 800db4a:	d106      	bne.n	800db5a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	4a05      	ldr	r2, [pc, #20]	@ (800db64 <USBD_LL_Resume+0x2c>)
 800db50:	5c99      	ldrb	r1, [r3, r2]
 800db52:	687a      	ldr	r2, [r7, #4]
 800db54:	23a7      	movs	r3, #167	@ 0xa7
 800db56:	009b      	lsls	r3, r3, #2
 800db58:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800db5a:	2300      	movs	r3, #0
}
 800db5c:	0018      	movs	r0, r3
 800db5e:	46bd      	mov	sp, r7
 800db60:	b002      	add	sp, #8
 800db62:	bd80      	pop	{r7, pc}
 800db64:	0000029d 	.word	0x0000029d

0800db68 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db70:	687a      	ldr	r2, [r7, #4]
 800db72:	23a7      	movs	r3, #167	@ 0xa7
 800db74:	009b      	lsls	r3, r3, #2
 800db76:	5cd3      	ldrb	r3, [r2, r3]
 800db78:	2b03      	cmp	r3, #3
 800db7a:	d10e      	bne.n	800db9a <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800db7c:	687a      	ldr	r2, [r7, #4]
 800db7e:	23ad      	movs	r3, #173	@ 0xad
 800db80:	009b      	lsls	r3, r3, #2
 800db82:	58d3      	ldr	r3, [r2, r3]
 800db84:	69db      	ldr	r3, [r3, #28]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d007      	beq.n	800db9a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	23ad      	movs	r3, #173	@ 0xad
 800db8e:	009b      	lsls	r3, r3, #2
 800db90:	58d3      	ldr	r3, [r2, r3]
 800db92:	69db      	ldr	r3, [r3, #28]
 800db94:	687a      	ldr	r2, [r7, #4]
 800db96:	0010      	movs	r0, r2
 800db98:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800db9a:	2300      	movs	r3, #0
}
 800db9c:	0018      	movs	r0, r3
 800db9e:	46bd      	mov	sp, r7
 800dba0:	b002      	add	sp, #8
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbae:	230f      	movs	r3, #15
 800dbb0:	18fb      	adds	r3, r7, r3
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	001a      	movs	r2, r3
 800dbbc:	2360      	movs	r3, #96	@ 0x60
 800dbbe:	4013      	ands	r3, r2
 800dbc0:	2b40      	cmp	r3, #64	@ 0x40
 800dbc2:	d004      	beq.n	800dbce <USBD_StdDevReq+0x2a>
 800dbc4:	d84f      	bhi.n	800dc66 <USBD_StdDevReq+0xc2>
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d00b      	beq.n	800dbe2 <USBD_StdDevReq+0x3e>
 800dbca:	2b20      	cmp	r3, #32
 800dbcc:	d14b      	bne.n	800dc66 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800dbce:	687a      	ldr	r2, [r7, #4]
 800dbd0:	23ad      	movs	r3, #173	@ 0xad
 800dbd2:	009b      	lsls	r3, r3, #2
 800dbd4:	58d3      	ldr	r3, [r2, r3]
 800dbd6:	689b      	ldr	r3, [r3, #8]
 800dbd8:	6839      	ldr	r1, [r7, #0]
 800dbda:	687a      	ldr	r2, [r7, #4]
 800dbdc:	0010      	movs	r0, r2
 800dbde:	4798      	blx	r3
      break;
 800dbe0:	e048      	b.n	800dc74 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	785b      	ldrb	r3, [r3, #1]
 800dbe6:	2b09      	cmp	r3, #9
 800dbe8:	d835      	bhi.n	800dc56 <USBD_StdDevReq+0xb2>
 800dbea:	009a      	lsls	r2, r3, #2
 800dbec:	4b25      	ldr	r3, [pc, #148]	@ (800dc84 <USBD_StdDevReq+0xe0>)
 800dbee:	18d3      	adds	r3, r2, r3
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dbf4:	683a      	ldr	r2, [r7, #0]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	0011      	movs	r1, r2
 800dbfa:	0018      	movs	r0, r3
 800dbfc:	f000 fa52 	bl	800e0a4 <USBD_GetDescriptor>
          break;
 800dc00:	e030      	b.n	800dc64 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dc02:	683a      	ldr	r2, [r7, #0]
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	0011      	movs	r1, r2
 800dc08:	0018      	movs	r0, r3
 800dc0a:	f000 fbfd 	bl	800e408 <USBD_SetAddress>
          break;
 800dc0e:	e029      	b.n	800dc64 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800dc10:	683a      	ldr	r2, [r7, #0]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	0011      	movs	r1, r2
 800dc16:	0018      	movs	r0, r3
 800dc18:	f000 fc4a 	bl	800e4b0 <USBD_SetConfig>
          break;
 800dc1c:	e022      	b.n	800dc64 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dc1e:	683a      	ldr	r2, [r7, #0]
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	0011      	movs	r1, r2
 800dc24:	0018      	movs	r0, r3
 800dc26:	f000 fce7 	bl	800e5f8 <USBD_GetConfig>
          break;
 800dc2a:	e01b      	b.n	800dc64 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dc2c:	683a      	ldr	r2, [r7, #0]
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	0011      	movs	r1, r2
 800dc32:	0018      	movs	r0, r3
 800dc34:	f000 fd1b 	bl	800e66e <USBD_GetStatus>
          break;
 800dc38:	e014      	b.n	800dc64 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dc3a:	683a      	ldr	r2, [r7, #0]
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	0011      	movs	r1, r2
 800dc40:	0018      	movs	r0, r3
 800dc42:	f000 fd4e 	bl	800e6e2 <USBD_SetFeature>
          break;
 800dc46:	e00d      	b.n	800dc64 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dc48:	683a      	ldr	r2, [r7, #0]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	0011      	movs	r1, r2
 800dc4e:	0018      	movs	r0, r3
 800dc50:	f000 fd5d 	bl	800e70e <USBD_ClrFeature>
          break;
 800dc54:	e006      	b.n	800dc64 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800dc56:	683a      	ldr	r2, [r7, #0]
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	0011      	movs	r1, r2
 800dc5c:	0018      	movs	r0, r3
 800dc5e:	f000 fdb4 	bl	800e7ca <USBD_CtlError>
          break;
 800dc62:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800dc64:	e006      	b.n	800dc74 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800dc66:	683a      	ldr	r2, [r7, #0]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	0011      	movs	r1, r2
 800dc6c:	0018      	movs	r0, r3
 800dc6e:	f000 fdac 	bl	800e7ca <USBD_CtlError>
      break;
 800dc72:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800dc74:	230f      	movs	r3, #15
 800dc76:	18fb      	adds	r3, r7, r3
 800dc78:	781b      	ldrb	r3, [r3, #0]
}
 800dc7a:	0018      	movs	r0, r3
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	b004      	add	sp, #16
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	46c0      	nop			@ (mov r8, r8)
 800dc84:	08016880 	.word	0x08016880

0800dc88 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800dc88:	b5b0      	push	{r4, r5, r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc92:	230f      	movs	r3, #15
 800dc94:	18fb      	adds	r3, r7, r3
 800dc96:	2200      	movs	r2, #0
 800dc98:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	781b      	ldrb	r3, [r3, #0]
 800dc9e:	001a      	movs	r2, r3
 800dca0:	2360      	movs	r3, #96	@ 0x60
 800dca2:	4013      	ands	r3, r2
 800dca4:	2b40      	cmp	r3, #64	@ 0x40
 800dca6:	d004      	beq.n	800dcb2 <USBD_StdItfReq+0x2a>
 800dca8:	d839      	bhi.n	800dd1e <USBD_StdItfReq+0x96>
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d001      	beq.n	800dcb2 <USBD_StdItfReq+0x2a>
 800dcae:	2b20      	cmp	r3, #32
 800dcb0:	d135      	bne.n	800dd1e <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dcb2:	687a      	ldr	r2, [r7, #4]
 800dcb4:	23a7      	movs	r3, #167	@ 0xa7
 800dcb6:	009b      	lsls	r3, r3, #2
 800dcb8:	5cd3      	ldrb	r3, [r2, r3]
 800dcba:	3b01      	subs	r3, #1
 800dcbc:	2b02      	cmp	r3, #2
 800dcbe:	d825      	bhi.n	800dd0c <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	889b      	ldrh	r3, [r3, #4]
 800dcc4:	b2db      	uxtb	r3, r3
 800dcc6:	2b01      	cmp	r3, #1
 800dcc8:	d819      	bhi.n	800dcfe <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dcca:	687a      	ldr	r2, [r7, #4]
 800dccc:	23ad      	movs	r3, #173	@ 0xad
 800dcce:	009b      	lsls	r3, r3, #2
 800dcd0:	58d3      	ldr	r3, [r2, r3]
 800dcd2:	689b      	ldr	r3, [r3, #8]
 800dcd4:	250f      	movs	r5, #15
 800dcd6:	197c      	adds	r4, r7, r5
 800dcd8:	6839      	ldr	r1, [r7, #0]
 800dcda:	687a      	ldr	r2, [r7, #4]
 800dcdc:	0010      	movs	r0, r2
 800dcde:	4798      	blx	r3
 800dce0:	0003      	movs	r3, r0
 800dce2:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	88db      	ldrh	r3, [r3, #6]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d116      	bne.n	800dd1a <USBD_StdItfReq+0x92>
 800dcec:	197b      	adds	r3, r7, r5
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d112      	bne.n	800dd1a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	0018      	movs	r0, r3
 800dcf8:	f000 fe4f 	bl	800e99a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dcfc:	e00d      	b.n	800dd1a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800dcfe:	683a      	ldr	r2, [r7, #0]
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	0011      	movs	r1, r2
 800dd04:	0018      	movs	r0, r3
 800dd06:	f000 fd60 	bl	800e7ca <USBD_CtlError>
          break;
 800dd0a:	e006      	b.n	800dd1a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800dd0c:	683a      	ldr	r2, [r7, #0]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	0011      	movs	r1, r2
 800dd12:	0018      	movs	r0, r3
 800dd14:	f000 fd59 	bl	800e7ca <USBD_CtlError>
          break;
 800dd18:	e000      	b.n	800dd1c <USBD_StdItfReq+0x94>
          break;
 800dd1a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800dd1c:	e006      	b.n	800dd2c <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800dd1e:	683a      	ldr	r2, [r7, #0]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	0011      	movs	r1, r2
 800dd24:	0018      	movs	r0, r3
 800dd26:	f000 fd50 	bl	800e7ca <USBD_CtlError>
      break;
 800dd2a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800dd2c:	2300      	movs	r3, #0
}
 800dd2e:	0018      	movs	r0, r3
 800dd30:	46bd      	mov	sp, r7
 800dd32:	b004      	add	sp, #16
 800dd34:	bdb0      	pop	{r4, r5, r7, pc}

0800dd36 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800dd36:	b5b0      	push	{r4, r5, r7, lr}
 800dd38:	b084      	sub	sp, #16
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	6078      	str	r0, [r7, #4]
 800dd3e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800dd40:	230f      	movs	r3, #15
 800dd42:	18fb      	adds	r3, r7, r3
 800dd44:	2200      	movs	r2, #0
 800dd46:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	889a      	ldrh	r2, [r3, #4]
 800dd4c:	230e      	movs	r3, #14
 800dd4e:	18fb      	adds	r3, r7, r3
 800dd50:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	781b      	ldrb	r3, [r3, #0]
 800dd56:	001a      	movs	r2, r3
 800dd58:	2360      	movs	r3, #96	@ 0x60
 800dd5a:	4013      	ands	r3, r2
 800dd5c:	2b40      	cmp	r3, #64	@ 0x40
 800dd5e:	d006      	beq.n	800dd6e <USBD_StdEPReq+0x38>
 800dd60:	d900      	bls.n	800dd64 <USBD_StdEPReq+0x2e>
 800dd62:	e190      	b.n	800e086 <USBD_StdEPReq+0x350>
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d00c      	beq.n	800dd82 <USBD_StdEPReq+0x4c>
 800dd68:	2b20      	cmp	r3, #32
 800dd6a:	d000      	beq.n	800dd6e <USBD_StdEPReq+0x38>
 800dd6c:	e18b      	b.n	800e086 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	23ad      	movs	r3, #173	@ 0xad
 800dd72:	009b      	lsls	r3, r3, #2
 800dd74:	58d3      	ldr	r3, [r2, r3]
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	6839      	ldr	r1, [r7, #0]
 800dd7a:	687a      	ldr	r2, [r7, #4]
 800dd7c:	0010      	movs	r0, r2
 800dd7e:	4798      	blx	r3
      break;
 800dd80:	e188      	b.n	800e094 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	001a      	movs	r2, r3
 800dd88:	2360      	movs	r3, #96	@ 0x60
 800dd8a:	4013      	ands	r3, r2
 800dd8c:	2b20      	cmp	r3, #32
 800dd8e:	d10f      	bne.n	800ddb0 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dd90:	687a      	ldr	r2, [r7, #4]
 800dd92:	23ad      	movs	r3, #173	@ 0xad
 800dd94:	009b      	lsls	r3, r3, #2
 800dd96:	58d3      	ldr	r3, [r2, r3]
 800dd98:	689b      	ldr	r3, [r3, #8]
 800dd9a:	250f      	movs	r5, #15
 800dd9c:	197c      	adds	r4, r7, r5
 800dd9e:	6839      	ldr	r1, [r7, #0]
 800dda0:	687a      	ldr	r2, [r7, #4]
 800dda2:	0010      	movs	r0, r2
 800dda4:	4798      	blx	r3
 800dda6:	0003      	movs	r3, r0
 800dda8:	7023      	strb	r3, [r4, #0]

        return ret;
 800ddaa:	197b      	adds	r3, r7, r5
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	e174      	b.n	800e09a <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	785b      	ldrb	r3, [r3, #1]
 800ddb4:	2b03      	cmp	r3, #3
 800ddb6:	d007      	beq.n	800ddc8 <USBD_StdEPReq+0x92>
 800ddb8:	dd00      	ble.n	800ddbc <USBD_StdEPReq+0x86>
 800ddba:	e15c      	b.n	800e076 <USBD_StdEPReq+0x340>
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d100      	bne.n	800ddc2 <USBD_StdEPReq+0x8c>
 800ddc0:	e092      	b.n	800dee8 <USBD_StdEPReq+0x1b2>
 800ddc2:	2b01      	cmp	r3, #1
 800ddc4:	d04b      	beq.n	800de5e <USBD_StdEPReq+0x128>
 800ddc6:	e156      	b.n	800e076 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ddc8:	687a      	ldr	r2, [r7, #4]
 800ddca:	23a7      	movs	r3, #167	@ 0xa7
 800ddcc:	009b      	lsls	r3, r3, #2
 800ddce:	5cd3      	ldrb	r3, [r2, r3]
 800ddd0:	2b02      	cmp	r3, #2
 800ddd2:	d002      	beq.n	800ddda <USBD_StdEPReq+0xa4>
 800ddd4:	2b03      	cmp	r3, #3
 800ddd6:	d01d      	beq.n	800de14 <USBD_StdEPReq+0xde>
 800ddd8:	e039      	b.n	800de4e <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ddda:	220e      	movs	r2, #14
 800dddc:	18bb      	adds	r3, r7, r2
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d010      	beq.n	800de06 <USBD_StdEPReq+0xd0>
 800dde4:	18bb      	adds	r3, r7, r2
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	2b80      	cmp	r3, #128	@ 0x80
 800ddea:	d00c      	beq.n	800de06 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ddec:	18bb      	adds	r3, r7, r2
 800ddee:	781a      	ldrb	r2, [r3, #0]
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	0011      	movs	r1, r2
 800ddf4:	0018      	movs	r0, r3
 800ddf6:	f004 f804 	bl	8011e02 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2180      	movs	r1, #128	@ 0x80
 800ddfe:	0018      	movs	r0, r3
 800de00:	f003 ffff 	bl	8011e02 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800de04:	e02a      	b.n	800de5c <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800de06:	683a      	ldr	r2, [r7, #0]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	0011      	movs	r1, r2
 800de0c:	0018      	movs	r0, r3
 800de0e:	f000 fcdc 	bl	800e7ca <USBD_CtlError>
              break;
 800de12:	e023      	b.n	800de5c <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	885b      	ldrh	r3, [r3, #2]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d113      	bne.n	800de44 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800de1c:	220e      	movs	r2, #14
 800de1e:	18bb      	adds	r3, r7, r2
 800de20:	781b      	ldrb	r3, [r3, #0]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d00e      	beq.n	800de44 <USBD_StdEPReq+0x10e>
 800de26:	18bb      	adds	r3, r7, r2
 800de28:	781b      	ldrb	r3, [r3, #0]
 800de2a:	2b80      	cmp	r3, #128	@ 0x80
 800de2c:	d00a      	beq.n	800de44 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	88db      	ldrh	r3, [r3, #6]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d106      	bne.n	800de44 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800de36:	18bb      	adds	r3, r7, r2
 800de38:	781a      	ldrb	r2, [r3, #0]
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	0011      	movs	r1, r2
 800de3e:	0018      	movs	r0, r3
 800de40:	f003 ffdf 	bl	8011e02 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	0018      	movs	r0, r3
 800de48:	f000 fda7 	bl	800e99a <USBD_CtlSendStatus>

              break;
 800de4c:	e006      	b.n	800de5c <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800de4e:	683a      	ldr	r2, [r7, #0]
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	0011      	movs	r1, r2
 800de54:	0018      	movs	r0, r3
 800de56:	f000 fcb8 	bl	800e7ca <USBD_CtlError>
              break;
 800de5a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800de5c:	e112      	b.n	800e084 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800de5e:	687a      	ldr	r2, [r7, #4]
 800de60:	23a7      	movs	r3, #167	@ 0xa7
 800de62:	009b      	lsls	r3, r3, #2
 800de64:	5cd3      	ldrb	r3, [r2, r3]
 800de66:	2b02      	cmp	r3, #2
 800de68:	d002      	beq.n	800de70 <USBD_StdEPReq+0x13a>
 800de6a:	2b03      	cmp	r3, #3
 800de6c:	d01d      	beq.n	800deaa <USBD_StdEPReq+0x174>
 800de6e:	e032      	b.n	800ded6 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de70:	220e      	movs	r2, #14
 800de72:	18bb      	adds	r3, r7, r2
 800de74:	781b      	ldrb	r3, [r3, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d010      	beq.n	800de9c <USBD_StdEPReq+0x166>
 800de7a:	18bb      	adds	r3, r7, r2
 800de7c:	781b      	ldrb	r3, [r3, #0]
 800de7e:	2b80      	cmp	r3, #128	@ 0x80
 800de80:	d00c      	beq.n	800de9c <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800de82:	18bb      	adds	r3, r7, r2
 800de84:	781a      	ldrb	r2, [r3, #0]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	0011      	movs	r1, r2
 800de8a:	0018      	movs	r0, r3
 800de8c:	f003 ffb9 	bl	8011e02 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2180      	movs	r1, #128	@ 0x80
 800de94:	0018      	movs	r0, r3
 800de96:	f003 ffb4 	bl	8011e02 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800de9a:	e024      	b.n	800dee6 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800de9c:	683a      	ldr	r2, [r7, #0]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	0011      	movs	r1, r2
 800dea2:	0018      	movs	r0, r3
 800dea4:	f000 fc91 	bl	800e7ca <USBD_CtlError>
              break;
 800dea8:	e01d      	b.n	800dee6 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	885b      	ldrh	r3, [r3, #2]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d118      	bne.n	800dee4 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800deb2:	210e      	movs	r1, #14
 800deb4:	187b      	adds	r3, r7, r1
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	227f      	movs	r2, #127	@ 0x7f
 800deba:	4013      	ands	r3, r2
 800debc:	d006      	beq.n	800decc <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800debe:	187b      	adds	r3, r7, r1
 800dec0:	781a      	ldrb	r2, [r3, #0]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	0011      	movs	r1, r2
 800dec6:	0018      	movs	r0, r3
 800dec8:	f003 ffc6 	bl	8011e58 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	0018      	movs	r0, r3
 800ded0:	f000 fd63 	bl	800e99a <USBD_CtlSendStatus>
              }
              break;
 800ded4:	e006      	b.n	800dee4 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800ded6:	683a      	ldr	r2, [r7, #0]
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	0011      	movs	r1, r2
 800dedc:	0018      	movs	r0, r3
 800dede:	f000 fc74 	bl	800e7ca <USBD_CtlError>
              break;
 800dee2:	e000      	b.n	800dee6 <USBD_StdEPReq+0x1b0>
              break;
 800dee4:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800dee6:	e0cd      	b.n	800e084 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dee8:	687a      	ldr	r2, [r7, #4]
 800deea:	23a7      	movs	r3, #167	@ 0xa7
 800deec:	009b      	lsls	r3, r3, #2
 800deee:	5cd3      	ldrb	r3, [r2, r3]
 800def0:	2b02      	cmp	r3, #2
 800def2:	d002      	beq.n	800defa <USBD_StdEPReq+0x1c4>
 800def4:	2b03      	cmp	r3, #3
 800def6:	d03c      	beq.n	800df72 <USBD_StdEPReq+0x23c>
 800def8:	e0b5      	b.n	800e066 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800defa:	220e      	movs	r2, #14
 800defc:	18bb      	adds	r3, r7, r2
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d00a      	beq.n	800df1a <USBD_StdEPReq+0x1e4>
 800df04:	18bb      	adds	r3, r7, r2
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	2b80      	cmp	r3, #128	@ 0x80
 800df0a:	d006      	beq.n	800df1a <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800df0c:	683a      	ldr	r2, [r7, #0]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	0011      	movs	r1, r2
 800df12:	0018      	movs	r0, r3
 800df14:	f000 fc59 	bl	800e7ca <USBD_CtlError>
                break;
 800df18:	e0ac      	b.n	800e074 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df1a:	220e      	movs	r2, #14
 800df1c:	18bb      	adds	r3, r7, r2
 800df1e:	781b      	ldrb	r3, [r3, #0]
 800df20:	b25b      	sxtb	r3, r3
 800df22:	2b00      	cmp	r3, #0
 800df24:	da0c      	bge.n	800df40 <USBD_StdEPReq+0x20a>
 800df26:	18bb      	adds	r3, r7, r2
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	227f      	movs	r2, #127	@ 0x7f
 800df2c:	401a      	ands	r2, r3
 800df2e:	0013      	movs	r3, r2
 800df30:	009b      	lsls	r3, r3, #2
 800df32:	189b      	adds	r3, r3, r2
 800df34:	009b      	lsls	r3, r3, #2
 800df36:	3310      	adds	r3, #16
 800df38:	687a      	ldr	r2, [r7, #4]
 800df3a:	18d3      	adds	r3, r2, r3
 800df3c:	3304      	adds	r3, #4
 800df3e:	e00d      	b.n	800df5c <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800df40:	230e      	movs	r3, #14
 800df42:	18fb      	adds	r3, r7, r3
 800df44:	781b      	ldrb	r3, [r3, #0]
 800df46:	227f      	movs	r2, #127	@ 0x7f
 800df48:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df4a:	0013      	movs	r3, r2
 800df4c:	009b      	lsls	r3, r3, #2
 800df4e:	189b      	adds	r3, r3, r2
 800df50:	009b      	lsls	r3, r3, #2
 800df52:	3351      	adds	r3, #81	@ 0x51
 800df54:	33ff      	adds	r3, #255	@ 0xff
 800df56:	687a      	ldr	r2, [r7, #4]
 800df58:	18d3      	adds	r3, r2, r3
 800df5a:	3304      	adds	r3, #4
 800df5c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	2200      	movs	r2, #0
 800df62:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800df64:	68b9      	ldr	r1, [r7, #8]
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2202      	movs	r2, #2
 800df6a:	0018      	movs	r0, r3
 800df6c:	f000 fcab 	bl	800e8c6 <USBD_CtlSendData>
              break;
 800df70:	e080      	b.n	800e074 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800df72:	220e      	movs	r2, #14
 800df74:	18bb      	adds	r3, r7, r2
 800df76:	781b      	ldrb	r3, [r3, #0]
 800df78:	b25b      	sxtb	r3, r3
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	da14      	bge.n	800dfa8 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800df7e:	18bb      	adds	r3, r7, r2
 800df80:	781b      	ldrb	r3, [r3, #0]
 800df82:	220f      	movs	r2, #15
 800df84:	401a      	ands	r2, r3
 800df86:	6879      	ldr	r1, [r7, #4]
 800df88:	0013      	movs	r3, r2
 800df8a:	009b      	lsls	r3, r3, #2
 800df8c:	189b      	adds	r3, r3, r2
 800df8e:	009b      	lsls	r3, r3, #2
 800df90:	18cb      	adds	r3, r1, r3
 800df92:	3318      	adds	r3, #24
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d11e      	bne.n	800dfd8 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800df9a:	683a      	ldr	r2, [r7, #0]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	0011      	movs	r1, r2
 800dfa0:	0018      	movs	r0, r3
 800dfa2:	f000 fc12 	bl	800e7ca <USBD_CtlError>
                  break;
 800dfa6:	e065      	b.n	800e074 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dfa8:	230e      	movs	r3, #14
 800dfaa:	18fb      	adds	r3, r7, r3
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	220f      	movs	r2, #15
 800dfb0:	401a      	ands	r2, r3
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	23ac      	movs	r3, #172	@ 0xac
 800dfb6:	0059      	lsls	r1, r3, #1
 800dfb8:	0013      	movs	r3, r2
 800dfba:	009b      	lsls	r3, r3, #2
 800dfbc:	189b      	adds	r3, r3, r2
 800dfbe:	009b      	lsls	r3, r3, #2
 800dfc0:	18c3      	adds	r3, r0, r3
 800dfc2:	185b      	adds	r3, r3, r1
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d106      	bne.n	800dfd8 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800dfca:	683a      	ldr	r2, [r7, #0]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	0011      	movs	r1, r2
 800dfd0:	0018      	movs	r0, r3
 800dfd2:	f000 fbfa 	bl	800e7ca <USBD_CtlError>
                  break;
 800dfd6:	e04d      	b.n	800e074 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dfd8:	220e      	movs	r2, #14
 800dfda:	18bb      	adds	r3, r7, r2
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	b25b      	sxtb	r3, r3
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	da0c      	bge.n	800dffe <USBD_StdEPReq+0x2c8>
 800dfe4:	18bb      	adds	r3, r7, r2
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	227f      	movs	r2, #127	@ 0x7f
 800dfea:	401a      	ands	r2, r3
 800dfec:	0013      	movs	r3, r2
 800dfee:	009b      	lsls	r3, r3, #2
 800dff0:	189b      	adds	r3, r3, r2
 800dff2:	009b      	lsls	r3, r3, #2
 800dff4:	3310      	adds	r3, #16
 800dff6:	687a      	ldr	r2, [r7, #4]
 800dff8:	18d3      	adds	r3, r2, r3
 800dffa:	3304      	adds	r3, #4
 800dffc:	e00d      	b.n	800e01a <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dffe:	230e      	movs	r3, #14
 800e000:	18fb      	adds	r3, r7, r3
 800e002:	781b      	ldrb	r3, [r3, #0]
 800e004:	227f      	movs	r2, #127	@ 0x7f
 800e006:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e008:	0013      	movs	r3, r2
 800e00a:	009b      	lsls	r3, r3, #2
 800e00c:	189b      	adds	r3, r3, r2
 800e00e:	009b      	lsls	r3, r3, #2
 800e010:	3351      	adds	r3, #81	@ 0x51
 800e012:	33ff      	adds	r3, #255	@ 0xff
 800e014:	687a      	ldr	r2, [r7, #4]
 800e016:	18d3      	adds	r3, r2, r3
 800e018:	3304      	adds	r3, #4
 800e01a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e01c:	220e      	movs	r2, #14
 800e01e:	18bb      	adds	r3, r7, r2
 800e020:	781b      	ldrb	r3, [r3, #0]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d003      	beq.n	800e02e <USBD_StdEPReq+0x2f8>
 800e026:	18bb      	adds	r3, r7, r2
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	2b80      	cmp	r3, #128	@ 0x80
 800e02c:	d103      	bne.n	800e036 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	2200      	movs	r2, #0
 800e032:	601a      	str	r2, [r3, #0]
 800e034:	e010      	b.n	800e058 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800e036:	230e      	movs	r3, #14
 800e038:	18fb      	adds	r3, r7, r3
 800e03a:	781a      	ldrb	r2, [r3, #0]
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	0011      	movs	r1, r2
 800e040:	0018      	movs	r0, r3
 800e042:	f003 ff34 	bl	8011eae <USBD_LL_IsStallEP>
 800e046:	1e03      	subs	r3, r0, #0
 800e048:	d003      	beq.n	800e052 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	2201      	movs	r2, #1
 800e04e:	601a      	str	r2, [r3, #0]
 800e050:	e002      	b.n	800e058 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	2200      	movs	r2, #0
 800e056:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800e058:	68b9      	ldr	r1, [r7, #8]
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2202      	movs	r2, #2
 800e05e:	0018      	movs	r0, r3
 800e060:	f000 fc31 	bl	800e8c6 <USBD_CtlSendData>
              break;
 800e064:	e006      	b.n	800e074 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800e066:	683a      	ldr	r2, [r7, #0]
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	0011      	movs	r1, r2
 800e06c:	0018      	movs	r0, r3
 800e06e:	f000 fbac 	bl	800e7ca <USBD_CtlError>
              break;
 800e072:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800e074:	e006      	b.n	800e084 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800e076:	683a      	ldr	r2, [r7, #0]
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	0011      	movs	r1, r2
 800e07c:	0018      	movs	r0, r3
 800e07e:	f000 fba4 	bl	800e7ca <USBD_CtlError>
          break;
 800e082:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800e084:	e006      	b.n	800e094 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800e086:	683a      	ldr	r2, [r7, #0]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	0011      	movs	r1, r2
 800e08c:	0018      	movs	r0, r3
 800e08e:	f000 fb9c 	bl	800e7ca <USBD_CtlError>
      break;
 800e092:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800e094:	230f      	movs	r3, #15
 800e096:	18fb      	adds	r3, r7, r3
 800e098:	781b      	ldrb	r3, [r3, #0]
}
 800e09a:	0018      	movs	r0, r3
 800e09c:	46bd      	mov	sp, r7
 800e09e:	b004      	add	sp, #16
 800e0a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e0a4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b084      	sub	sp, #16
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e0ae:	2308      	movs	r3, #8
 800e0b0:	18fb      	adds	r3, r7, r3
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e0ba:	230b      	movs	r3, #11
 800e0bc:	18fb      	adds	r3, r7, r3
 800e0be:	2200      	movs	r2, #0
 800e0c0:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	885b      	ldrh	r3, [r3, #2]
 800e0c6:	0a1b      	lsrs	r3, r3, #8
 800e0c8:	b29b      	uxth	r3, r3
 800e0ca:	2b07      	cmp	r3, #7
 800e0cc:	d900      	bls.n	800e0d0 <USBD_GetDescriptor+0x2c>
 800e0ce:	e159      	b.n	800e384 <USBD_GetDescriptor+0x2e0>
 800e0d0:	009a      	lsls	r2, r3, #2
 800e0d2:	4bcb      	ldr	r3, [pc, #812]	@ (800e400 <USBD_GetDescriptor+0x35c>)
 800e0d4:	18d3      	adds	r3, r2, r3
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e0da:	687a      	ldr	r2, [r7, #4]
 800e0dc:	23ac      	movs	r3, #172	@ 0xac
 800e0de:	009b      	lsls	r3, r3, #2
 800e0e0:	58d3      	ldr	r3, [r2, r3]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	7c12      	ldrb	r2, [r2, #16]
 800e0e8:	2108      	movs	r1, #8
 800e0ea:	1879      	adds	r1, r7, r1
 800e0ec:	0010      	movs	r0, r2
 800e0ee:	4798      	blx	r3
 800e0f0:	0003      	movs	r3, r0
 800e0f2:	60fb      	str	r3, [r7, #12]
      break;
 800e0f4:	e153      	b.n	800e39e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	7c1b      	ldrb	r3, [r3, #16]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d10f      	bne.n	800e11e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e0fe:	687a      	ldr	r2, [r7, #4]
 800e100:	23ad      	movs	r3, #173	@ 0xad
 800e102:	009b      	lsls	r3, r3, #2
 800e104:	58d3      	ldr	r3, [r2, r3]
 800e106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e108:	2208      	movs	r2, #8
 800e10a:	18ba      	adds	r2, r7, r2
 800e10c:	0010      	movs	r0, r2
 800e10e:	4798      	blx	r3
 800e110:	0003      	movs	r3, r0
 800e112:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	3301      	adds	r3, #1
 800e118:	2202      	movs	r2, #2
 800e11a:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e11c:	e13f      	b.n	800e39e <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e11e:	687a      	ldr	r2, [r7, #4]
 800e120:	23ad      	movs	r3, #173	@ 0xad
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	58d3      	ldr	r3, [r2, r3]
 800e126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e128:	2208      	movs	r2, #8
 800e12a:	18ba      	adds	r2, r7, r2
 800e12c:	0010      	movs	r0, r2
 800e12e:	4798      	blx	r3
 800e130:	0003      	movs	r3, r0
 800e132:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	3301      	adds	r3, #1
 800e138:	2202      	movs	r2, #2
 800e13a:	701a      	strb	r2, [r3, #0]
      break;
 800e13c:	e12f      	b.n	800e39e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	885b      	ldrh	r3, [r3, #2]
 800e142:	b2db      	uxtb	r3, r3
 800e144:	2b05      	cmp	r3, #5
 800e146:	d900      	bls.n	800e14a <USBD_GetDescriptor+0xa6>
 800e148:	e0d0      	b.n	800e2ec <USBD_GetDescriptor+0x248>
 800e14a:	009a      	lsls	r2, r3, #2
 800e14c:	4bad      	ldr	r3, [pc, #692]	@ (800e404 <USBD_GetDescriptor+0x360>)
 800e14e:	18d3      	adds	r3, r2, r3
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	23ac      	movs	r3, #172	@ 0xac
 800e158:	009b      	lsls	r3, r3, #2
 800e15a:	58d3      	ldr	r3, [r2, r3]
 800e15c:	685b      	ldr	r3, [r3, #4]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d00d      	beq.n	800e17e <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e162:	687a      	ldr	r2, [r7, #4]
 800e164:	23ac      	movs	r3, #172	@ 0xac
 800e166:	009b      	lsls	r3, r3, #2
 800e168:	58d3      	ldr	r3, [r2, r3]
 800e16a:	685b      	ldr	r3, [r3, #4]
 800e16c:	687a      	ldr	r2, [r7, #4]
 800e16e:	7c12      	ldrb	r2, [r2, #16]
 800e170:	2108      	movs	r1, #8
 800e172:	1879      	adds	r1, r7, r1
 800e174:	0010      	movs	r0, r2
 800e176:	4798      	blx	r3
 800e178:	0003      	movs	r3, r0
 800e17a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e17c:	e0c3      	b.n	800e306 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800e17e:	683a      	ldr	r2, [r7, #0]
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	0011      	movs	r1, r2
 800e184:	0018      	movs	r0, r3
 800e186:	f000 fb20 	bl	800e7ca <USBD_CtlError>
            err++;
 800e18a:	210b      	movs	r1, #11
 800e18c:	187b      	adds	r3, r7, r1
 800e18e:	781a      	ldrb	r2, [r3, #0]
 800e190:	187b      	adds	r3, r7, r1
 800e192:	3201      	adds	r2, #1
 800e194:	701a      	strb	r2, [r3, #0]
          break;
 800e196:	e0b6      	b.n	800e306 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e198:	687a      	ldr	r2, [r7, #4]
 800e19a:	23ac      	movs	r3, #172	@ 0xac
 800e19c:	009b      	lsls	r3, r3, #2
 800e19e:	58d3      	ldr	r3, [r2, r3]
 800e1a0:	689b      	ldr	r3, [r3, #8]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d00d      	beq.n	800e1c2 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e1a6:	687a      	ldr	r2, [r7, #4]
 800e1a8:	23ac      	movs	r3, #172	@ 0xac
 800e1aa:	009b      	lsls	r3, r3, #2
 800e1ac:	58d3      	ldr	r3, [r2, r3]
 800e1ae:	689b      	ldr	r3, [r3, #8]
 800e1b0:	687a      	ldr	r2, [r7, #4]
 800e1b2:	7c12      	ldrb	r2, [r2, #16]
 800e1b4:	2108      	movs	r1, #8
 800e1b6:	1879      	adds	r1, r7, r1
 800e1b8:	0010      	movs	r0, r2
 800e1ba:	4798      	blx	r3
 800e1bc:	0003      	movs	r3, r0
 800e1be:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e1c0:	e0a1      	b.n	800e306 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800e1c2:	683a      	ldr	r2, [r7, #0]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	0011      	movs	r1, r2
 800e1c8:	0018      	movs	r0, r3
 800e1ca:	f000 fafe 	bl	800e7ca <USBD_CtlError>
            err++;
 800e1ce:	210b      	movs	r1, #11
 800e1d0:	187b      	adds	r3, r7, r1
 800e1d2:	781a      	ldrb	r2, [r3, #0]
 800e1d4:	187b      	adds	r3, r7, r1
 800e1d6:	3201      	adds	r2, #1
 800e1d8:	701a      	strb	r2, [r3, #0]
          break;
 800e1da:	e094      	b.n	800e306 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e1dc:	687a      	ldr	r2, [r7, #4]
 800e1de:	23ac      	movs	r3, #172	@ 0xac
 800e1e0:	009b      	lsls	r3, r3, #2
 800e1e2:	58d3      	ldr	r3, [r2, r3]
 800e1e4:	68db      	ldr	r3, [r3, #12]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d00d      	beq.n	800e206 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e1ea:	687a      	ldr	r2, [r7, #4]
 800e1ec:	23ac      	movs	r3, #172	@ 0xac
 800e1ee:	009b      	lsls	r3, r3, #2
 800e1f0:	58d3      	ldr	r3, [r2, r3]
 800e1f2:	68db      	ldr	r3, [r3, #12]
 800e1f4:	687a      	ldr	r2, [r7, #4]
 800e1f6:	7c12      	ldrb	r2, [r2, #16]
 800e1f8:	2108      	movs	r1, #8
 800e1fa:	1879      	adds	r1, r7, r1
 800e1fc:	0010      	movs	r0, r2
 800e1fe:	4798      	blx	r3
 800e200:	0003      	movs	r3, r0
 800e202:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e204:	e07f      	b.n	800e306 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800e206:	683a      	ldr	r2, [r7, #0]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	0011      	movs	r1, r2
 800e20c:	0018      	movs	r0, r3
 800e20e:	f000 fadc 	bl	800e7ca <USBD_CtlError>
            err++;
 800e212:	210b      	movs	r1, #11
 800e214:	187b      	adds	r3, r7, r1
 800e216:	781a      	ldrb	r2, [r3, #0]
 800e218:	187b      	adds	r3, r7, r1
 800e21a:	3201      	adds	r2, #1
 800e21c:	701a      	strb	r2, [r3, #0]
          break;
 800e21e:	e072      	b.n	800e306 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e220:	687a      	ldr	r2, [r7, #4]
 800e222:	23ac      	movs	r3, #172	@ 0xac
 800e224:	009b      	lsls	r3, r3, #2
 800e226:	58d3      	ldr	r3, [r2, r3]
 800e228:	691b      	ldr	r3, [r3, #16]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d00d      	beq.n	800e24a <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e22e:	687a      	ldr	r2, [r7, #4]
 800e230:	23ac      	movs	r3, #172	@ 0xac
 800e232:	009b      	lsls	r3, r3, #2
 800e234:	58d3      	ldr	r3, [r2, r3]
 800e236:	691b      	ldr	r3, [r3, #16]
 800e238:	687a      	ldr	r2, [r7, #4]
 800e23a:	7c12      	ldrb	r2, [r2, #16]
 800e23c:	2108      	movs	r1, #8
 800e23e:	1879      	adds	r1, r7, r1
 800e240:	0010      	movs	r0, r2
 800e242:	4798      	blx	r3
 800e244:	0003      	movs	r3, r0
 800e246:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e248:	e05d      	b.n	800e306 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800e24a:	683a      	ldr	r2, [r7, #0]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	0011      	movs	r1, r2
 800e250:	0018      	movs	r0, r3
 800e252:	f000 faba 	bl	800e7ca <USBD_CtlError>
            err++;
 800e256:	210b      	movs	r1, #11
 800e258:	187b      	adds	r3, r7, r1
 800e25a:	781a      	ldrb	r2, [r3, #0]
 800e25c:	187b      	adds	r3, r7, r1
 800e25e:	3201      	adds	r2, #1
 800e260:	701a      	strb	r2, [r3, #0]
          break;
 800e262:	e050      	b.n	800e306 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e264:	687a      	ldr	r2, [r7, #4]
 800e266:	23ac      	movs	r3, #172	@ 0xac
 800e268:	009b      	lsls	r3, r3, #2
 800e26a:	58d3      	ldr	r3, [r2, r3]
 800e26c:	695b      	ldr	r3, [r3, #20]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d00d      	beq.n	800e28e <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e272:	687a      	ldr	r2, [r7, #4]
 800e274:	23ac      	movs	r3, #172	@ 0xac
 800e276:	009b      	lsls	r3, r3, #2
 800e278:	58d3      	ldr	r3, [r2, r3]
 800e27a:	695b      	ldr	r3, [r3, #20]
 800e27c:	687a      	ldr	r2, [r7, #4]
 800e27e:	7c12      	ldrb	r2, [r2, #16]
 800e280:	2108      	movs	r1, #8
 800e282:	1879      	adds	r1, r7, r1
 800e284:	0010      	movs	r0, r2
 800e286:	4798      	blx	r3
 800e288:	0003      	movs	r3, r0
 800e28a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e28c:	e03b      	b.n	800e306 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800e28e:	683a      	ldr	r2, [r7, #0]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	0011      	movs	r1, r2
 800e294:	0018      	movs	r0, r3
 800e296:	f000 fa98 	bl	800e7ca <USBD_CtlError>
            err++;
 800e29a:	210b      	movs	r1, #11
 800e29c:	187b      	adds	r3, r7, r1
 800e29e:	781a      	ldrb	r2, [r3, #0]
 800e2a0:	187b      	adds	r3, r7, r1
 800e2a2:	3201      	adds	r2, #1
 800e2a4:	701a      	strb	r2, [r3, #0]
          break;
 800e2a6:	e02e      	b.n	800e306 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e2a8:	687a      	ldr	r2, [r7, #4]
 800e2aa:	23ac      	movs	r3, #172	@ 0xac
 800e2ac:	009b      	lsls	r3, r3, #2
 800e2ae:	58d3      	ldr	r3, [r2, r3]
 800e2b0:	699b      	ldr	r3, [r3, #24]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d00d      	beq.n	800e2d2 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e2b6:	687a      	ldr	r2, [r7, #4]
 800e2b8:	23ac      	movs	r3, #172	@ 0xac
 800e2ba:	009b      	lsls	r3, r3, #2
 800e2bc:	58d3      	ldr	r3, [r2, r3]
 800e2be:	699b      	ldr	r3, [r3, #24]
 800e2c0:	687a      	ldr	r2, [r7, #4]
 800e2c2:	7c12      	ldrb	r2, [r2, #16]
 800e2c4:	2108      	movs	r1, #8
 800e2c6:	1879      	adds	r1, r7, r1
 800e2c8:	0010      	movs	r0, r2
 800e2ca:	4798      	blx	r3
 800e2cc:	0003      	movs	r3, r0
 800e2ce:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2d0:	e019      	b.n	800e306 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800e2d2:	683a      	ldr	r2, [r7, #0]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	0011      	movs	r1, r2
 800e2d8:	0018      	movs	r0, r3
 800e2da:	f000 fa76 	bl	800e7ca <USBD_CtlError>
            err++;
 800e2de:	210b      	movs	r1, #11
 800e2e0:	187b      	adds	r3, r7, r1
 800e2e2:	781a      	ldrb	r2, [r3, #0]
 800e2e4:	187b      	adds	r3, r7, r1
 800e2e6:	3201      	adds	r2, #1
 800e2e8:	701a      	strb	r2, [r3, #0]
          break;
 800e2ea:	e00c      	b.n	800e306 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800e2ec:	683a      	ldr	r2, [r7, #0]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	0011      	movs	r1, r2
 800e2f2:	0018      	movs	r0, r3
 800e2f4:	f000 fa69 	bl	800e7ca <USBD_CtlError>
          err++;
 800e2f8:	210b      	movs	r1, #11
 800e2fa:	187b      	adds	r3, r7, r1
 800e2fc:	781a      	ldrb	r2, [r3, #0]
 800e2fe:	187b      	adds	r3, r7, r1
 800e300:	3201      	adds	r2, #1
 800e302:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800e304:	e04b      	b.n	800e39e <USBD_GetDescriptor+0x2fa>
 800e306:	e04a      	b.n	800e39e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	7c1b      	ldrb	r3, [r3, #16]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d10b      	bne.n	800e328 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e310:	687a      	ldr	r2, [r7, #4]
 800e312:	23ad      	movs	r3, #173	@ 0xad
 800e314:	009b      	lsls	r3, r3, #2
 800e316:	58d3      	ldr	r3, [r2, r3]
 800e318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e31a:	2208      	movs	r2, #8
 800e31c:	18ba      	adds	r2, r7, r2
 800e31e:	0010      	movs	r0, r2
 800e320:	4798      	blx	r3
 800e322:	0003      	movs	r3, r0
 800e324:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e326:	e03a      	b.n	800e39e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800e328:	683a      	ldr	r2, [r7, #0]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	0011      	movs	r1, r2
 800e32e:	0018      	movs	r0, r3
 800e330:	f000 fa4b 	bl	800e7ca <USBD_CtlError>
        err++;
 800e334:	210b      	movs	r1, #11
 800e336:	187b      	adds	r3, r7, r1
 800e338:	781a      	ldrb	r2, [r3, #0]
 800e33a:	187b      	adds	r3, r7, r1
 800e33c:	3201      	adds	r2, #1
 800e33e:	701a      	strb	r2, [r3, #0]
      break;
 800e340:	e02d      	b.n	800e39e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	7c1b      	ldrb	r3, [r3, #16]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d10f      	bne.n	800e36a <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e34a:	687a      	ldr	r2, [r7, #4]
 800e34c:	23ad      	movs	r3, #173	@ 0xad
 800e34e:	009b      	lsls	r3, r3, #2
 800e350:	58d3      	ldr	r3, [r2, r3]
 800e352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e354:	2208      	movs	r2, #8
 800e356:	18ba      	adds	r2, r7, r2
 800e358:	0010      	movs	r0, r2
 800e35a:	4798      	blx	r3
 800e35c:	0003      	movs	r3, r0
 800e35e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	3301      	adds	r3, #1
 800e364:	2207      	movs	r2, #7
 800e366:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e368:	e019      	b.n	800e39e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800e36a:	683a      	ldr	r2, [r7, #0]
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	0011      	movs	r1, r2
 800e370:	0018      	movs	r0, r3
 800e372:	f000 fa2a 	bl	800e7ca <USBD_CtlError>
        err++;
 800e376:	210b      	movs	r1, #11
 800e378:	187b      	adds	r3, r7, r1
 800e37a:	781a      	ldrb	r2, [r3, #0]
 800e37c:	187b      	adds	r3, r7, r1
 800e37e:	3201      	adds	r2, #1
 800e380:	701a      	strb	r2, [r3, #0]
      break;
 800e382:	e00c      	b.n	800e39e <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800e384:	683a      	ldr	r2, [r7, #0]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	0011      	movs	r1, r2
 800e38a:	0018      	movs	r0, r3
 800e38c:	f000 fa1d 	bl	800e7ca <USBD_CtlError>
      err++;
 800e390:	210b      	movs	r1, #11
 800e392:	187b      	adds	r3, r7, r1
 800e394:	781a      	ldrb	r2, [r3, #0]
 800e396:	187b      	adds	r3, r7, r1
 800e398:	3201      	adds	r2, #1
 800e39a:	701a      	strb	r2, [r3, #0]
      break;
 800e39c:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 800e39e:	230b      	movs	r3, #11
 800e3a0:	18fb      	adds	r3, r7, r3
 800e3a2:	781b      	ldrb	r3, [r3, #0]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d127      	bne.n	800e3f8 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800e3a8:	2108      	movs	r1, #8
 800e3aa:	187b      	adds	r3, r7, r1
 800e3ac:	881b      	ldrh	r3, [r3, #0]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d019      	beq.n	800e3e6 <USBD_GetDescriptor+0x342>
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	88db      	ldrh	r3, [r3, #6]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d015      	beq.n	800e3e6 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	88da      	ldrh	r2, [r3, #6]
 800e3be:	187b      	adds	r3, r7, r1
 800e3c0:	881b      	ldrh	r3, [r3, #0]
 800e3c2:	1c18      	adds	r0, r3, #0
 800e3c4:	1c11      	adds	r1, r2, #0
 800e3c6:	b28a      	uxth	r2, r1
 800e3c8:	b283      	uxth	r3, r0
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d900      	bls.n	800e3d0 <USBD_GetDescriptor+0x32c>
 800e3ce:	1c01      	adds	r1, r0, #0
 800e3d0:	b28a      	uxth	r2, r1
 800e3d2:	2108      	movs	r1, #8
 800e3d4:	187b      	adds	r3, r7, r1
 800e3d6:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e3d8:	187b      	adds	r3, r7, r1
 800e3da:	881a      	ldrh	r2, [r3, #0]
 800e3dc:	68f9      	ldr	r1, [r7, #12]
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	0018      	movs	r0, r3
 800e3e2:	f000 fa70 	bl	800e8c6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	88db      	ldrh	r3, [r3, #6]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d105      	bne.n	800e3fa <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	0018      	movs	r0, r3
 800e3f2:	f000 fad2 	bl	800e99a <USBD_CtlSendStatus>
 800e3f6:	e000      	b.n	800e3fa <USBD_GetDescriptor+0x356>
    return;
 800e3f8:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	b004      	add	sp, #16
 800e3fe:	bd80      	pop	{r7, pc}
 800e400:	080168a8 	.word	0x080168a8
 800e404:	080168c8 	.word	0x080168c8

0800e408 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e408:	b590      	push	{r4, r7, lr}
 800e40a:	b085      	sub	sp, #20
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	889b      	ldrh	r3, [r3, #4]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d13d      	bne.n	800e496 <USBD_SetAddress+0x8e>
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	88db      	ldrh	r3, [r3, #6]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d139      	bne.n	800e496 <USBD_SetAddress+0x8e>
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	885b      	ldrh	r3, [r3, #2]
 800e426:	2b7f      	cmp	r3, #127	@ 0x7f
 800e428:	d835      	bhi.n	800e496 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	885b      	ldrh	r3, [r3, #2]
 800e42e:	b2da      	uxtb	r2, r3
 800e430:	230f      	movs	r3, #15
 800e432:	18fb      	adds	r3, r7, r3
 800e434:	217f      	movs	r1, #127	@ 0x7f
 800e436:	400a      	ands	r2, r1
 800e438:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e43a:	687a      	ldr	r2, [r7, #4]
 800e43c:	23a7      	movs	r3, #167	@ 0xa7
 800e43e:	009b      	lsls	r3, r3, #2
 800e440:	5cd3      	ldrb	r3, [r2, r3]
 800e442:	2b03      	cmp	r3, #3
 800e444:	d106      	bne.n	800e454 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800e446:	683a      	ldr	r2, [r7, #0]
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	0011      	movs	r1, r2
 800e44c:	0018      	movs	r0, r3
 800e44e:	f000 f9bc 	bl	800e7ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e452:	e027      	b.n	800e4a4 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	240f      	movs	r4, #15
 800e458:	193a      	adds	r2, r7, r4
 800e45a:	4914      	ldr	r1, [pc, #80]	@ (800e4ac <USBD_SetAddress+0xa4>)
 800e45c:	7812      	ldrb	r2, [r2, #0]
 800e45e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e460:	193b      	adds	r3, r7, r4
 800e462:	781a      	ldrb	r2, [r3, #0]
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	0011      	movs	r1, r2
 800e468:	0018      	movs	r0, r3
 800e46a:	f003 fd50 	bl	8011f0e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	0018      	movs	r0, r3
 800e472:	f000 fa92 	bl	800e99a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e476:	193b      	adds	r3, r7, r4
 800e478:	781b      	ldrb	r3, [r3, #0]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d005      	beq.n	800e48a <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e47e:	687a      	ldr	r2, [r7, #4]
 800e480:	23a7      	movs	r3, #167	@ 0xa7
 800e482:	009b      	lsls	r3, r3, #2
 800e484:	2102      	movs	r1, #2
 800e486:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e488:	e00c      	b.n	800e4a4 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e48a:	687a      	ldr	r2, [r7, #4]
 800e48c:	23a7      	movs	r3, #167	@ 0xa7
 800e48e:	009b      	lsls	r3, r3, #2
 800e490:	2101      	movs	r1, #1
 800e492:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e494:	e006      	b.n	800e4a4 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e496:	683a      	ldr	r2, [r7, #0]
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	0011      	movs	r1, r2
 800e49c:	0018      	movs	r0, r3
 800e49e:	f000 f994 	bl	800e7ca <USBD_CtlError>
  }
}
 800e4a2:	46c0      	nop			@ (mov r8, r8)
 800e4a4:	46c0      	nop			@ (mov r8, r8)
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	b005      	add	sp, #20
 800e4aa:	bd90      	pop	{r4, r7, pc}
 800e4ac:	0000029e 	.word	0x0000029e

0800e4b0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b082      	sub	sp, #8
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	885b      	ldrh	r3, [r3, #2]
 800e4be:	b2da      	uxtb	r2, r3
 800e4c0:	4b4c      	ldr	r3, [pc, #304]	@ (800e5f4 <USBD_SetConfig+0x144>)
 800e4c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e4c4:	4b4b      	ldr	r3, [pc, #300]	@ (800e5f4 <USBD_SetConfig+0x144>)
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	2b01      	cmp	r3, #1
 800e4ca:	d906      	bls.n	800e4da <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800e4cc:	683a      	ldr	r2, [r7, #0]
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	0011      	movs	r1, r2
 800e4d2:	0018      	movs	r0, r3
 800e4d4:	f000 f979 	bl	800e7ca <USBD_CtlError>
 800e4d8:	e088      	b.n	800e5ec <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800e4da:	687a      	ldr	r2, [r7, #4]
 800e4dc:	23a7      	movs	r3, #167	@ 0xa7
 800e4de:	009b      	lsls	r3, r3, #2
 800e4e0:	5cd3      	ldrb	r3, [r2, r3]
 800e4e2:	2b02      	cmp	r3, #2
 800e4e4:	d002      	beq.n	800e4ec <USBD_SetConfig+0x3c>
 800e4e6:	2b03      	cmp	r3, #3
 800e4e8:	d029      	beq.n	800e53e <USBD_SetConfig+0x8e>
 800e4ea:	e071      	b.n	800e5d0 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800e4ec:	4b41      	ldr	r3, [pc, #260]	@ (800e5f4 <USBD_SetConfig+0x144>)
 800e4ee:	781b      	ldrb	r3, [r3, #0]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d01f      	beq.n	800e534 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800e4f4:	4b3f      	ldr	r3, [pc, #252]	@ (800e5f4 <USBD_SetConfig+0x144>)
 800e4f6:	781b      	ldrb	r3, [r3, #0]
 800e4f8:	001a      	movs	r2, r3
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e4fe:	687a      	ldr	r2, [r7, #4]
 800e500:	23a7      	movs	r3, #167	@ 0xa7
 800e502:	009b      	lsls	r3, r3, #2
 800e504:	2103      	movs	r1, #3
 800e506:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e508:	4b3a      	ldr	r3, [pc, #232]	@ (800e5f4 <USBD_SetConfig+0x144>)
 800e50a:	781a      	ldrb	r2, [r3, #0]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	0011      	movs	r1, r2
 800e510:	0018      	movs	r0, r3
 800e512:	f7ff f8c6 	bl	800d6a2 <USBD_SetClassConfig>
 800e516:	0003      	movs	r3, r0
 800e518:	2b02      	cmp	r3, #2
 800e51a:	d106      	bne.n	800e52a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800e51c:	683a      	ldr	r2, [r7, #0]
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	0011      	movs	r1, r2
 800e522:	0018      	movs	r0, r3
 800e524:	f000 f951 	bl	800e7ca <USBD_CtlError>
            return;
 800e528:	e060      	b.n	800e5ec <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	0018      	movs	r0, r3
 800e52e:	f000 fa34 	bl	800e99a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800e532:	e05b      	b.n	800e5ec <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	0018      	movs	r0, r3
 800e538:	f000 fa2f 	bl	800e99a <USBD_CtlSendStatus>
        break;
 800e53c:	e056      	b.n	800e5ec <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800e53e:	4b2d      	ldr	r3, [pc, #180]	@ (800e5f4 <USBD_SetConfig+0x144>)
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d115      	bne.n	800e572 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e546:	687a      	ldr	r2, [r7, #4]
 800e548:	23a7      	movs	r3, #167	@ 0xa7
 800e54a:	009b      	lsls	r3, r3, #2
 800e54c:	2102      	movs	r1, #2
 800e54e:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800e550:	4b28      	ldr	r3, [pc, #160]	@ (800e5f4 <USBD_SetConfig+0x144>)
 800e552:	781b      	ldrb	r3, [r3, #0]
 800e554:	001a      	movs	r2, r3
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800e55a:	4b26      	ldr	r3, [pc, #152]	@ (800e5f4 <USBD_SetConfig+0x144>)
 800e55c:	781a      	ldrb	r2, [r3, #0]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	0011      	movs	r1, r2
 800e562:	0018      	movs	r0, r3
 800e564:	f7ff f8c4 	bl	800d6f0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	0018      	movs	r0, r3
 800e56c:	f000 fa15 	bl	800e99a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800e570:	e03c      	b.n	800e5ec <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800e572:	4b20      	ldr	r3, [pc, #128]	@ (800e5f4 <USBD_SetConfig+0x144>)
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	001a      	movs	r2, r3
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	685b      	ldr	r3, [r3, #4]
 800e57c:	429a      	cmp	r2, r3
 800e57e:	d022      	beq.n	800e5c6 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	685b      	ldr	r3, [r3, #4]
 800e584:	b2da      	uxtb	r2, r3
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	0011      	movs	r1, r2
 800e58a:	0018      	movs	r0, r3
 800e58c:	f7ff f8b0 	bl	800d6f0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800e590:	4b18      	ldr	r3, [pc, #96]	@ (800e5f4 <USBD_SetConfig+0x144>)
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	001a      	movs	r2, r3
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e59a:	4b16      	ldr	r3, [pc, #88]	@ (800e5f4 <USBD_SetConfig+0x144>)
 800e59c:	781a      	ldrb	r2, [r3, #0]
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	0011      	movs	r1, r2
 800e5a2:	0018      	movs	r0, r3
 800e5a4:	f7ff f87d 	bl	800d6a2 <USBD_SetClassConfig>
 800e5a8:	0003      	movs	r3, r0
 800e5aa:	2b02      	cmp	r3, #2
 800e5ac:	d106      	bne.n	800e5bc <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800e5ae:	683a      	ldr	r2, [r7, #0]
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	0011      	movs	r1, r2
 800e5b4:	0018      	movs	r0, r3
 800e5b6:	f000 f908 	bl	800e7ca <USBD_CtlError>
            return;
 800e5ba:	e017      	b.n	800e5ec <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	0018      	movs	r0, r3
 800e5c0:	f000 f9eb 	bl	800e99a <USBD_CtlSendStatus>
        break;
 800e5c4:	e012      	b.n	800e5ec <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	0018      	movs	r0, r3
 800e5ca:	f000 f9e6 	bl	800e99a <USBD_CtlSendStatus>
        break;
 800e5ce:	e00d      	b.n	800e5ec <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800e5d0:	683a      	ldr	r2, [r7, #0]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	0011      	movs	r1, r2
 800e5d6:	0018      	movs	r0, r3
 800e5d8:	f000 f8f7 	bl	800e7ca <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800e5dc:	4b05      	ldr	r3, [pc, #20]	@ (800e5f4 <USBD_SetConfig+0x144>)
 800e5de:	781a      	ldrb	r2, [r3, #0]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	0011      	movs	r1, r2
 800e5e4:	0018      	movs	r0, r3
 800e5e6:	f7ff f883 	bl	800d6f0 <USBD_ClrClassConfig>
        break;
 800e5ea:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	b002      	add	sp, #8
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	46c0      	nop			@ (mov r8, r8)
 800e5f4:	20000bcc 	.word	0x20000bcc

0800e5f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b082      	sub	sp, #8
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
 800e600:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	88db      	ldrh	r3, [r3, #6]
 800e606:	2b01      	cmp	r3, #1
 800e608:	d006      	beq.n	800e618 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800e60a:	683a      	ldr	r2, [r7, #0]
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	0011      	movs	r1, r2
 800e610:	0018      	movs	r0, r3
 800e612:	f000 f8da 	bl	800e7ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e616:	e026      	b.n	800e666 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800e618:	687a      	ldr	r2, [r7, #4]
 800e61a:	23a7      	movs	r3, #167	@ 0xa7
 800e61c:	009b      	lsls	r3, r3, #2
 800e61e:	5cd3      	ldrb	r3, [r2, r3]
 800e620:	2b02      	cmp	r3, #2
 800e622:	dc02      	bgt.n	800e62a <USBD_GetConfig+0x32>
 800e624:	2b00      	cmp	r3, #0
 800e626:	dc03      	bgt.n	800e630 <USBD_GetConfig+0x38>
 800e628:	e016      	b.n	800e658 <USBD_GetConfig+0x60>
 800e62a:	2b03      	cmp	r3, #3
 800e62c:	d00c      	beq.n	800e648 <USBD_GetConfig+0x50>
 800e62e:	e013      	b.n	800e658 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2200      	movs	r2, #0
 800e634:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	3308      	adds	r3, #8
 800e63a:	0019      	movs	r1, r3
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2201      	movs	r2, #1
 800e640:	0018      	movs	r0, r3
 800e642:	f000 f940 	bl	800e8c6 <USBD_CtlSendData>
        break;
 800e646:	e00e      	b.n	800e666 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	1d19      	adds	r1, r3, #4
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2201      	movs	r2, #1
 800e650:	0018      	movs	r0, r3
 800e652:	f000 f938 	bl	800e8c6 <USBD_CtlSendData>
        break;
 800e656:	e006      	b.n	800e666 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800e658:	683a      	ldr	r2, [r7, #0]
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	0011      	movs	r1, r2
 800e65e:	0018      	movs	r0, r3
 800e660:	f000 f8b3 	bl	800e7ca <USBD_CtlError>
        break;
 800e664:	46c0      	nop			@ (mov r8, r8)
}
 800e666:	46c0      	nop			@ (mov r8, r8)
 800e668:	46bd      	mov	sp, r7
 800e66a:	b002      	add	sp, #8
 800e66c:	bd80      	pop	{r7, pc}

0800e66e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e66e:	b580      	push	{r7, lr}
 800e670:	b082      	sub	sp, #8
 800e672:	af00      	add	r7, sp, #0
 800e674:	6078      	str	r0, [r7, #4]
 800e676:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e678:	687a      	ldr	r2, [r7, #4]
 800e67a:	23a7      	movs	r3, #167	@ 0xa7
 800e67c:	009b      	lsls	r3, r3, #2
 800e67e:	5cd3      	ldrb	r3, [r2, r3]
 800e680:	3b01      	subs	r3, #1
 800e682:	2b02      	cmp	r3, #2
 800e684:	d822      	bhi.n	800e6cc <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	88db      	ldrh	r3, [r3, #6]
 800e68a:	2b02      	cmp	r3, #2
 800e68c:	d006      	beq.n	800e69c <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800e68e:	683a      	ldr	r2, [r7, #0]
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	0011      	movs	r1, r2
 800e694:	0018      	movs	r0, r3
 800e696:	f000 f898 	bl	800e7ca <USBD_CtlError>
        break;
 800e69a:	e01e      	b.n	800e6da <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2201      	movs	r2, #1
 800e6a0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800e6a2:	687a      	ldr	r2, [r7, #4]
 800e6a4:	23a9      	movs	r3, #169	@ 0xa9
 800e6a6:	009b      	lsls	r3, r3, #2
 800e6a8:	58d3      	ldr	r3, [r2, r3]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d005      	beq.n	800e6ba <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	68db      	ldr	r3, [r3, #12]
 800e6b2:	2202      	movs	r2, #2
 800e6b4:	431a      	orrs	r2, r3
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	330c      	adds	r3, #12
 800e6be:	0019      	movs	r1, r3
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2202      	movs	r2, #2
 800e6c4:	0018      	movs	r0, r3
 800e6c6:	f000 f8fe 	bl	800e8c6 <USBD_CtlSendData>
      break;
 800e6ca:	e006      	b.n	800e6da <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800e6cc:	683a      	ldr	r2, [r7, #0]
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	0011      	movs	r1, r2
 800e6d2:	0018      	movs	r0, r3
 800e6d4:	f000 f879 	bl	800e7ca <USBD_CtlError>
      break;
 800e6d8:	46c0      	nop			@ (mov r8, r8)
  }
}
 800e6da:	46c0      	nop			@ (mov r8, r8)
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	b002      	add	sp, #8
 800e6e0:	bd80      	pop	{r7, pc}

0800e6e2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e6e2:	b580      	push	{r7, lr}
 800e6e4:	b082      	sub	sp, #8
 800e6e6:	af00      	add	r7, sp, #0
 800e6e8:	6078      	str	r0, [r7, #4]
 800e6ea:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	885b      	ldrh	r3, [r3, #2]
 800e6f0:	2b01      	cmp	r3, #1
 800e6f2:	d108      	bne.n	800e706 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800e6f4:	687a      	ldr	r2, [r7, #4]
 800e6f6:	23a9      	movs	r3, #169	@ 0xa9
 800e6f8:	009b      	lsls	r3, r3, #2
 800e6fa:	2101      	movs	r1, #1
 800e6fc:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	0018      	movs	r0, r3
 800e702:	f000 f94a 	bl	800e99a <USBD_CtlSendStatus>
  }
}
 800e706:	46c0      	nop			@ (mov r8, r8)
 800e708:	46bd      	mov	sp, r7
 800e70a:	b002      	add	sp, #8
 800e70c:	bd80      	pop	{r7, pc}

0800e70e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e70e:	b580      	push	{r7, lr}
 800e710:	b082      	sub	sp, #8
 800e712:	af00      	add	r7, sp, #0
 800e714:	6078      	str	r0, [r7, #4]
 800e716:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e718:	687a      	ldr	r2, [r7, #4]
 800e71a:	23a7      	movs	r3, #167	@ 0xa7
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	5cd3      	ldrb	r3, [r2, r3]
 800e720:	3b01      	subs	r3, #1
 800e722:	2b02      	cmp	r3, #2
 800e724:	d80d      	bhi.n	800e742 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	885b      	ldrh	r3, [r3, #2]
 800e72a:	2b01      	cmp	r3, #1
 800e72c:	d110      	bne.n	800e750 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800e72e:	687a      	ldr	r2, [r7, #4]
 800e730:	23a9      	movs	r3, #169	@ 0xa9
 800e732:	009b      	lsls	r3, r3, #2
 800e734:	2100      	movs	r1, #0
 800e736:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	0018      	movs	r0, r3
 800e73c:	f000 f92d 	bl	800e99a <USBD_CtlSendStatus>
      }
      break;
 800e740:	e006      	b.n	800e750 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800e742:	683a      	ldr	r2, [r7, #0]
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	0011      	movs	r1, r2
 800e748:	0018      	movs	r0, r3
 800e74a:	f000 f83e 	bl	800e7ca <USBD_CtlError>
      break;
 800e74e:	e000      	b.n	800e752 <USBD_ClrFeature+0x44>
      break;
 800e750:	46c0      	nop			@ (mov r8, r8)
  }
}
 800e752:	46c0      	nop			@ (mov r8, r8)
 800e754:	46bd      	mov	sp, r7
 800e756:	b002      	add	sp, #8
 800e758:	bd80      	pop	{r7, pc}

0800e75a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e75a:	b580      	push	{r7, lr}
 800e75c:	b082      	sub	sp, #8
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
 800e762:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	781a      	ldrb	r2, [r3, #0]
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	785a      	ldrb	r2, [r3, #1]
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	3302      	adds	r3, #2
 800e778:	781b      	ldrb	r3, [r3, #0]
 800e77a:	001a      	movs	r2, r3
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	3303      	adds	r3, #3
 800e780:	781b      	ldrb	r3, [r3, #0]
 800e782:	021b      	lsls	r3, r3, #8
 800e784:	b29b      	uxth	r3, r3
 800e786:	18d3      	adds	r3, r2, r3
 800e788:	b29a      	uxth	r2, r3
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	3304      	adds	r3, #4
 800e792:	781b      	ldrb	r3, [r3, #0]
 800e794:	001a      	movs	r2, r3
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	3305      	adds	r3, #5
 800e79a:	781b      	ldrb	r3, [r3, #0]
 800e79c:	021b      	lsls	r3, r3, #8
 800e79e:	b29b      	uxth	r3, r3
 800e7a0:	18d3      	adds	r3, r2, r3
 800e7a2:	b29a      	uxth	r2, r3
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	3306      	adds	r3, #6
 800e7ac:	781b      	ldrb	r3, [r3, #0]
 800e7ae:	001a      	movs	r2, r3
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	3307      	adds	r3, #7
 800e7b4:	781b      	ldrb	r3, [r3, #0]
 800e7b6:	021b      	lsls	r3, r3, #8
 800e7b8:	b29b      	uxth	r3, r3
 800e7ba:	18d3      	adds	r3, r2, r3
 800e7bc:	b29a      	uxth	r2, r3
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	80da      	strh	r2, [r3, #6]

}
 800e7c2:	46c0      	nop			@ (mov r8, r8)
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	b002      	add	sp, #8
 800e7c8:	bd80      	pop	{r7, pc}

0800e7ca <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800e7ca:	b580      	push	{r7, lr}
 800e7cc:	b082      	sub	sp, #8
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
 800e7d2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2180      	movs	r1, #128	@ 0x80
 800e7d8:	0018      	movs	r0, r3
 800e7da:	f003 fb12 	bl	8011e02 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2100      	movs	r1, #0
 800e7e2:	0018      	movs	r0, r3
 800e7e4:	f003 fb0d 	bl	8011e02 <USBD_LL_StallEP>
}
 800e7e8:	46c0      	nop			@ (mov r8, r8)
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	b002      	add	sp, #8
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e7f0:	b590      	push	{r4, r7, lr}
 800e7f2:	b087      	sub	sp, #28
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	60f8      	str	r0, [r7, #12]
 800e7f8:	60b9      	str	r1, [r7, #8]
 800e7fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e7fc:	2417      	movs	r4, #23
 800e7fe:	193b      	adds	r3, r7, r4
 800e800:	2200      	movs	r2, #0
 800e802:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d03c      	beq.n	800e884 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	0018      	movs	r0, r3
 800e80e:	f000 f83d 	bl	800e88c <USBD_GetLen>
 800e812:	0003      	movs	r3, r0
 800e814:	3301      	adds	r3, #1
 800e816:	b29b      	uxth	r3, r3
 800e818:	18db      	adds	r3, r3, r3
 800e81a:	b29a      	uxth	r2, r3
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800e820:	193b      	adds	r3, r7, r4
 800e822:	781b      	ldrb	r3, [r3, #0]
 800e824:	193a      	adds	r2, r7, r4
 800e826:	1c59      	adds	r1, r3, #1
 800e828:	7011      	strb	r1, [r2, #0]
 800e82a:	001a      	movs	r2, r3
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	189b      	adds	r3, r3, r2
 800e830:	687a      	ldr	r2, [r7, #4]
 800e832:	7812      	ldrb	r2, [r2, #0]
 800e834:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800e836:	193b      	adds	r3, r7, r4
 800e838:	781b      	ldrb	r3, [r3, #0]
 800e83a:	193a      	adds	r2, r7, r4
 800e83c:	1c59      	adds	r1, r3, #1
 800e83e:	7011      	strb	r1, [r2, #0]
 800e840:	001a      	movs	r2, r3
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	189b      	adds	r3, r3, r2
 800e846:	2203      	movs	r2, #3
 800e848:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800e84a:	e017      	b.n	800e87c <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	1c5a      	adds	r2, r3, #1
 800e850:	60fa      	str	r2, [r7, #12]
 800e852:	2417      	movs	r4, #23
 800e854:	193a      	adds	r2, r7, r4
 800e856:	7812      	ldrb	r2, [r2, #0]
 800e858:	1939      	adds	r1, r7, r4
 800e85a:	1c50      	adds	r0, r2, #1
 800e85c:	7008      	strb	r0, [r1, #0]
 800e85e:	0011      	movs	r1, r2
 800e860:	68ba      	ldr	r2, [r7, #8]
 800e862:	1852      	adds	r2, r2, r1
 800e864:	781b      	ldrb	r3, [r3, #0]
 800e866:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800e868:	193b      	adds	r3, r7, r4
 800e86a:	781b      	ldrb	r3, [r3, #0]
 800e86c:	193a      	adds	r2, r7, r4
 800e86e:	1c59      	adds	r1, r3, #1
 800e870:	7011      	strb	r1, [r2, #0]
 800e872:	001a      	movs	r2, r3
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	189b      	adds	r3, r3, r2
 800e878:	2200      	movs	r2, #0
 800e87a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	781b      	ldrb	r3, [r3, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d1e3      	bne.n	800e84c <USBD_GetString+0x5c>
    }
  }
}
 800e884:	46c0      	nop			@ (mov r8, r8)
 800e886:	46bd      	mov	sp, r7
 800e888:	b007      	add	sp, #28
 800e88a:	bd90      	pop	{r4, r7, pc}

0800e88c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b084      	sub	sp, #16
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e894:	230f      	movs	r3, #15
 800e896:	18fb      	adds	r3, r7, r3
 800e898:	2200      	movs	r2, #0
 800e89a:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800e89c:	e008      	b.n	800e8b0 <USBD_GetLen+0x24>
  {
    len++;
 800e89e:	210f      	movs	r1, #15
 800e8a0:	187b      	adds	r3, r7, r1
 800e8a2:	781a      	ldrb	r2, [r3, #0]
 800e8a4:	187b      	adds	r3, r7, r1
 800e8a6:	3201      	adds	r2, #1
 800e8a8:	701a      	strb	r2, [r3, #0]
    buf++;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	3301      	adds	r3, #1
 800e8ae:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d1f2      	bne.n	800e89e <USBD_GetLen+0x12>
  }

  return len;
 800e8b8:	230f      	movs	r3, #15
 800e8ba:	18fb      	adds	r3, r7, r3
 800e8bc:	781b      	ldrb	r3, [r3, #0]
}
 800e8be:	0018      	movs	r0, r3
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	b004      	add	sp, #16
 800e8c4:	bd80      	pop	{r7, pc}

0800e8c6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800e8c6:	b580      	push	{r7, lr}
 800e8c8:	b084      	sub	sp, #16
 800e8ca:	af00      	add	r7, sp, #0
 800e8cc:	60f8      	str	r0, [r7, #12]
 800e8ce:	60b9      	str	r1, [r7, #8]
 800e8d0:	1dbb      	adds	r3, r7, #6
 800e8d2:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e8d4:	68fa      	ldr	r2, [r7, #12]
 800e8d6:	23a5      	movs	r3, #165	@ 0xa5
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	2102      	movs	r1, #2
 800e8dc:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800e8de:	1dbb      	adds	r3, r7, #6
 800e8e0:	881a      	ldrh	r2, [r3, #0]
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800e8e6:	1dbb      	adds	r3, r7, #6
 800e8e8:	881a      	ldrh	r2, [r3, #0]
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e8ee:	1dbb      	adds	r3, r7, #6
 800e8f0:	881b      	ldrh	r3, [r3, #0]
 800e8f2:	68ba      	ldr	r2, [r7, #8]
 800e8f4:	68f8      	ldr	r0, [r7, #12]
 800e8f6:	2100      	movs	r1, #0
 800e8f8:	f003 fb34 	bl	8011f64 <USBD_LL_Transmit>

  return USBD_OK;
 800e8fc:	2300      	movs	r3, #0
}
 800e8fe:	0018      	movs	r0, r3
 800e900:	46bd      	mov	sp, r7
 800e902:	b004      	add	sp, #16
 800e904:	bd80      	pop	{r7, pc}

0800e906 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800e906:	b580      	push	{r7, lr}
 800e908:	b084      	sub	sp, #16
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	60f8      	str	r0, [r7, #12]
 800e90e:	60b9      	str	r1, [r7, #8]
 800e910:	1dbb      	adds	r3, r7, #6
 800e912:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e914:	1dbb      	adds	r3, r7, #6
 800e916:	881b      	ldrh	r3, [r3, #0]
 800e918:	68ba      	ldr	r2, [r7, #8]
 800e91a:	68f8      	ldr	r0, [r7, #12]
 800e91c:	2100      	movs	r1, #0
 800e91e:	f003 fb21 	bl	8011f64 <USBD_LL_Transmit>

  return USBD_OK;
 800e922:	2300      	movs	r3, #0
}
 800e924:	0018      	movs	r0, r3
 800e926:	46bd      	mov	sp, r7
 800e928:	b004      	add	sp, #16
 800e92a:	bd80      	pop	{r7, pc}

0800e92c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b084      	sub	sp, #16
 800e930:	af00      	add	r7, sp, #0
 800e932:	60f8      	str	r0, [r7, #12]
 800e934:	60b9      	str	r1, [r7, #8]
 800e936:	1dbb      	adds	r3, r7, #6
 800e938:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e93a:	68fa      	ldr	r2, [r7, #12]
 800e93c:	23a5      	movs	r3, #165	@ 0xa5
 800e93e:	009b      	lsls	r3, r3, #2
 800e940:	2103      	movs	r1, #3
 800e942:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800e944:	1dbb      	adds	r3, r7, #6
 800e946:	8819      	ldrh	r1, [r3, #0]
 800e948:	68fa      	ldr	r2, [r7, #12]
 800e94a:	23ae      	movs	r3, #174	@ 0xae
 800e94c:	005b      	lsls	r3, r3, #1
 800e94e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800e950:	1dbb      	adds	r3, r7, #6
 800e952:	8819      	ldrh	r1, [r3, #0]
 800e954:	68fa      	ldr	r2, [r7, #12]
 800e956:	23b0      	movs	r3, #176	@ 0xb0
 800e958:	005b      	lsls	r3, r3, #1
 800e95a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e95c:	1dbb      	adds	r3, r7, #6
 800e95e:	881b      	ldrh	r3, [r3, #0]
 800e960:	68ba      	ldr	r2, [r7, #8]
 800e962:	68f8      	ldr	r0, [r7, #12]
 800e964:	2100      	movs	r1, #0
 800e966:	f003 fb34 	bl	8011fd2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e96a:	2300      	movs	r3, #0
}
 800e96c:	0018      	movs	r0, r3
 800e96e:	46bd      	mov	sp, r7
 800e970:	b004      	add	sp, #16
 800e972:	bd80      	pop	{r7, pc}

0800e974 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b084      	sub	sp, #16
 800e978:	af00      	add	r7, sp, #0
 800e97a:	60f8      	str	r0, [r7, #12]
 800e97c:	60b9      	str	r1, [r7, #8]
 800e97e:	1dbb      	adds	r3, r7, #6
 800e980:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e982:	1dbb      	adds	r3, r7, #6
 800e984:	881b      	ldrh	r3, [r3, #0]
 800e986:	68ba      	ldr	r2, [r7, #8]
 800e988:	68f8      	ldr	r0, [r7, #12]
 800e98a:	2100      	movs	r1, #0
 800e98c:	f003 fb21 	bl	8011fd2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e990:	2300      	movs	r3, #0
}
 800e992:	0018      	movs	r0, r3
 800e994:	46bd      	mov	sp, r7
 800e996:	b004      	add	sp, #16
 800e998:	bd80      	pop	{r7, pc}

0800e99a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e99a:	b580      	push	{r7, lr}
 800e99c:	b082      	sub	sp, #8
 800e99e:	af00      	add	r7, sp, #0
 800e9a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e9a2:	687a      	ldr	r2, [r7, #4]
 800e9a4:	23a5      	movs	r3, #165	@ 0xa5
 800e9a6:	009b      	lsls	r3, r3, #2
 800e9a8:	2104      	movs	r1, #4
 800e9aa:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	2100      	movs	r1, #0
 800e9b4:	f003 fad6 	bl	8011f64 <USBD_LL_Transmit>

  return USBD_OK;
 800e9b8:	2300      	movs	r3, #0
}
 800e9ba:	0018      	movs	r0, r3
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	b002      	add	sp, #8
 800e9c0:	bd80      	pop	{r7, pc}

0800e9c2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e9c2:	b580      	push	{r7, lr}
 800e9c4:	b082      	sub	sp, #8
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e9ca:	687a      	ldr	r2, [r7, #4]
 800e9cc:	23a5      	movs	r3, #165	@ 0xa5
 800e9ce:	009b      	lsls	r3, r3, #2
 800e9d0:	2105      	movs	r1, #5
 800e9d2:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	2200      	movs	r2, #0
 800e9da:	2100      	movs	r1, #0
 800e9dc:	f003 faf9 	bl	8011fd2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e9e0:	2300      	movs	r3, #0
}
 800e9e2:	0018      	movs	r0, r3
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	b002      	add	sp, #8
 800e9e8:	bd80      	pop	{r7, pc}
	...

0800e9ec <setSPI_Size>:
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b082      	sub	sp, #8
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	0002      	movs	r2, r0
 800e9f4:	1dfb      	adds	r3, r7, #7
 800e9f6:	701a      	strb	r2, [r3, #0]
  if (config.spi_sz != size)
 800e9f8:	4b14      	ldr	r3, [pc, #80]	@ (800ea4c <setSPI_Size+0x60>)
 800e9fa:	781b      	ldrb	r3, [r3, #0]
 800e9fc:	b25b      	sxtb	r3, r3
 800e9fe:	1dfa      	adds	r2, r7, #7
 800ea00:	7812      	ldrb	r2, [r2, #0]
 800ea02:	b252      	sxtb	r2, r2
 800ea04:	429a      	cmp	r2, r3
 800ea06:	d01d      	beq.n	800ea44 <setSPI_Size+0x58>
  {
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 800ea08:	4b11      	ldr	r3, [pc, #68]	@ (800ea50 <setSPI_Size+0x64>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	681a      	ldr	r2, [r3, #0]
 800ea0e:	4b10      	ldr	r3, [pc, #64]	@ (800ea50 <setSPI_Size+0x64>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	2140      	movs	r1, #64	@ 0x40
 800ea14:	438a      	bics	r2, r1
 800ea16:	601a      	str	r2, [r3, #0]
    config.spi_sz = size;
 800ea18:	4b0c      	ldr	r3, [pc, #48]	@ (800ea4c <setSPI_Size+0x60>)
 800ea1a:	1dfa      	adds	r2, r7, #7
 800ea1c:	7812      	ldrb	r2, [r2, #0]
 800ea1e:	701a      	strb	r2, [r3, #0]

    if (size == mode_16bit)
 800ea20:	1dfb      	adds	r3, r7, #7
 800ea22:	781b      	ldrb	r3, [r3, #0]
 800ea24:	b25b      	sxtb	r3, r3
 800ea26:	2b01      	cmp	r3, #1
 800ea28:	d104      	bne.n	800ea34 <setSPI_Size+0x48>
    {
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 800ea2a:	4b09      	ldr	r3, [pc, #36]	@ (800ea50 <setSPI_Size+0x64>)
 800ea2c:	22f0      	movs	r2, #240	@ 0xf0
 800ea2e:	0112      	lsls	r2, r2, #4
 800ea30:	60da      	str	r2, [r3, #12]
 800ea32:	e003      	b.n	800ea3c <setSPI_Size+0x50>
    }
    else
    {
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 800ea34:	4b06      	ldr	r3, [pc, #24]	@ (800ea50 <setSPI_Size+0x64>)
 800ea36:	22e0      	movs	r2, #224	@ 0xe0
 800ea38:	00d2      	lsls	r2, r2, #3
 800ea3a:	60da      	str	r2, [r3, #12]
    }

    HAL_SPI_Init(&LCD_HANDLE); // Re-initialize to apply new data size
 800ea3c:	4b04      	ldr	r3, [pc, #16]	@ (800ea50 <setSPI_Size+0x64>)
 800ea3e:	0018      	movs	r0, r3
 800ea40:	f7f9 fa08 	bl	8007e54 <HAL_SPI_Init>
  }
}
 800ea44:	46c0      	nop			@ (mov r8, r8)
 800ea46:	46bd      	mov	sp, r7
 800ea48:	b002      	add	sp, #8
 800ea4a:	bd80      	pop	{r7, pc}
 800ea4c:	2000018c 	.word	0x2000018c
 800ea50:	200005cc 	.word	0x200005cc

0800ea54 <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b082      	sub	sp, #8
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	0002      	movs	r2, r0
 800ea5c:	1dfb      	adds	r3, r7, #7
 800ea5e:	701a      	strb	r2, [r3, #0]
 800ea60:	1dbb      	adds	r3, r7, #6
 800ea62:	1c0a      	adds	r2, r1, #0
 800ea64:	701a      	strb	r2, [r3, #0]
  setSPI_Size(size);
 800ea66:	1dbb      	adds	r3, r7, #6
 800ea68:	781b      	ldrb	r3, [r3, #0]
 800ea6a:	b25b      	sxtb	r3, r3
 800ea6c:	0018      	movs	r0, r3
 800ea6e:	f7ff ffbd 	bl	800e9ec <setSPI_Size>
  if (config.dma_sz != size || config.dma_mem_inc != memInc)
 800ea72:	4b3f      	ldr	r3, [pc, #252]	@ (800eb70 <setDMAMemMode+0x11c>)
 800ea74:	785b      	ldrb	r3, [r3, #1]
 800ea76:	b25b      	sxtb	r3, r3
 800ea78:	001a      	movs	r2, r3
 800ea7a:	1dbb      	adds	r3, r7, #6
 800ea7c:	781b      	ldrb	r3, [r3, #0]
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d107      	bne.n	800ea92 <setDMAMemMode+0x3e>
 800ea82:	4b3b      	ldr	r3, [pc, #236]	@ (800eb70 <setDMAMemMode+0x11c>)
 800ea84:	789b      	ldrb	r3, [r3, #2]
 800ea86:	b25b      	sxtb	r3, r3
 800ea88:	001a      	movs	r2, r3
 800ea8a:	1dfb      	adds	r3, r7, #7
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	d06a      	beq.n	800eb68 <setDMAMemMode+0x114>
  {
    config.dma_sz = size;
 800ea92:	1dbb      	adds	r3, r7, #6
 800ea94:	2200      	movs	r2, #0
 800ea96:	569a      	ldrsb	r2, [r3, r2]
 800ea98:	4b35      	ldr	r3, [pc, #212]	@ (800eb70 <setDMAMemMode+0x11c>)
 800ea9a:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 800ea9c:	1dfb      	adds	r3, r7, #7
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	569a      	ldrsb	r2, [r3, r2]
 800eaa2:	4b33      	ldr	r3, [pc, #204]	@ (800eb70 <setDMAMemMode+0x11c>)
 800eaa4:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);
 800eaa6:	4b33      	ldr	r3, [pc, #204]	@ (800eb74 <setDMAMemMode+0x120>)
 800eaa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	681a      	ldr	r2, [r3, #0]
 800eaae:	4b31      	ldr	r3, [pc, #196]	@ (800eb74 <setDMAMemMode+0x120>)
 800eab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	2101      	movs	r1, #1
 800eab6:	438a      	bics	r2, r1
 800eab8:	601a      	str	r2, [r3, #0]
    ;
#ifdef DMA_SxCR_EN
    while ((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET)
      ;
#elif defined DMA_CCR_EN
    while ((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET)
 800eaba:	46c0      	nop			@ (mov r8, r8)
 800eabc:	4b2d      	ldr	r3, [pc, #180]	@ (800eb74 <setDMAMemMode+0x120>)
 800eabe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	2201      	movs	r2, #1
 800eac6:	4013      	ands	r3, r2
 800eac8:	d1f8      	bne.n	800eabc <setDMAMemMode+0x68>
      ;
#endif
    if (memInc == mem_increase)
 800eaca:	1dfb      	adds	r3, r7, #7
 800eacc:	781b      	ldrb	r3, [r3, #0]
 800eace:	2b01      	cmp	r3, #1
 800ead0:	d10e      	bne.n	800eaf0 <setDMAMemMode+0x9c>
    {
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 800ead2:	4b28      	ldr	r3, [pc, #160]	@ (800eb74 <setDMAMemMode+0x120>)
 800ead4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ead6:	2280      	movs	r2, #128	@ 0x80
 800ead8:	60da      	str	r2, [r3, #12]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
 800eada:	4b26      	ldr	r3, [pc, #152]	@ (800eb74 <setDMAMemMode+0x120>)
 800eadc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	681a      	ldr	r2, [r3, #0]
 800eae2:	4b24      	ldr	r3, [pc, #144]	@ (800eb74 <setDMAMemMode+0x120>)
 800eae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	2180      	movs	r1, #128	@ 0x80
 800eaea:	430a      	orrs	r2, r1
 800eaec:	601a      	str	r2, [r3, #0]
 800eaee:	e00d      	b.n	800eb0c <setDMAMemMode+0xb8>
#endif
    }
    else
    {
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 800eaf0:	4b20      	ldr	r3, [pc, #128]	@ (800eb74 <setDMAMemMode+0x120>)
 800eaf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	60da      	str	r2, [r3, #12]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
 800eaf8:	4b1e      	ldr	r3, [pc, #120]	@ (800eb74 <setDMAMemMode+0x120>)
 800eafa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	681a      	ldr	r2, [r3, #0]
 800eb00:	4b1c      	ldr	r3, [pc, #112]	@ (800eb74 <setDMAMemMode+0x120>)
 800eb02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	2180      	movs	r1, #128	@ 0x80
 800eb08:	438a      	bics	r2, r1
 800eb0a:	601a      	str	r2, [r3, #0]
#endif
    }

    if (size == mode_16bit)
 800eb0c:	1dbb      	adds	r3, r7, #6
 800eb0e:	781b      	ldrb	r3, [r3, #0]
 800eb10:	2b01      	cmp	r3, #1
 800eb12:	d117      	bne.n	800eb44 <setDMAMemMode+0xf0>
    {
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800eb14:	4b17      	ldr	r3, [pc, #92]	@ (800eb74 <setDMAMemMode+0x120>)
 800eb16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb18:	2280      	movs	r2, #128	@ 0x80
 800eb1a:	0052      	lsls	r2, r2, #1
 800eb1c:	611a      	str	r2, [r3, #16]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800eb1e:	4b15      	ldr	r3, [pc, #84]	@ (800eb74 <setDMAMemMode+0x120>)
 800eb20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb22:	2280      	movs	r2, #128	@ 0x80
 800eb24:	00d2      	lsls	r2, r2, #3
 800eb26:	615a      	str	r2, [r3, #20]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
                                        (1 << DMA_SxCR_PSIZE_Pos | 1 << DMA_SxCR_MSIZE_Pos);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk)) |
 800eb28:	4b12      	ldr	r3, [pc, #72]	@ (800eb74 <setDMAMemMode+0x120>)
 800eb2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	4a11      	ldr	r2, [pc, #68]	@ (800eb78 <setDMAMemMode+0x124>)
 800eb32:	401a      	ands	r2, r3
 800eb34:	4b0f      	ldr	r3, [pc, #60]	@ (800eb74 <setDMAMemMode+0x120>)
 800eb36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	21a0      	movs	r1, #160	@ 0xa0
 800eb3c:	00c9      	lsls	r1, r1, #3
 800eb3e:	430a      	orrs	r2, r1
 800eb40:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
  }
}
 800eb42:	e011      	b.n	800eb68 <setDMAMemMode+0x114>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800eb44:	4b0b      	ldr	r3, [pc, #44]	@ (800eb74 <setDMAMemMode+0x120>)
 800eb46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb48:	2200      	movs	r2, #0
 800eb4a:	611a      	str	r2, [r3, #16]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800eb4c:	4b09      	ldr	r3, [pc, #36]	@ (800eb74 <setDMAMemMode+0x120>)
 800eb4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb50:	2200      	movs	r2, #0
 800eb52:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
 800eb54:	4b07      	ldr	r3, [pc, #28]	@ (800eb74 <setDMAMemMode+0x120>)
 800eb56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	681a      	ldr	r2, [r3, #0]
 800eb5c:	4b05      	ldr	r3, [pc, #20]	@ (800eb74 <setDMAMemMode+0x120>)
 800eb5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	4905      	ldr	r1, [pc, #20]	@ (800eb78 <setDMAMemMode+0x124>)
 800eb64:	400a      	ands	r2, r1
 800eb66:	601a      	str	r2, [r3, #0]
}
 800eb68:	46c0      	nop			@ (mov r8, r8)
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	b002      	add	sp, #8
 800eb6e:	bd80      	pop	{r7, pc}
 800eb70:	2000018c 	.word	0x2000018c
 800eb74:	200005cc 	.word	0x200005cc
 800eb78:	fffff0ff 	.word	0xfffff0ff

0800eb7c <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b082      	sub	sp, #8
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	000a      	movs	r2, r1
 800eb86:	1cfb      	adds	r3, r7, #3
 800eb88:	701a      	strb	r2, [r3, #0]
  setSPI_Size(mode_8bit);
 800eb8a:	2000      	movs	r0, #0
 800eb8c:	f7ff ff2e 	bl	800e9ec <setSPI_Size>
  LCD_PIN(LCD_DC, RESET);
 800eb90:	4b14      	ldr	r3, [pc, #80]	@ (800ebe4 <LCD_WriteCommand+0x68>)
 800eb92:	2280      	movs	r2, #128	@ 0x80
 800eb94:	0452      	lsls	r2, r2, #17
 800eb96:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS, RESET);
 800eb98:	4b12      	ldr	r3, [pc, #72]	@ (800ebe4 <LCD_WriteCommand+0x68>)
 800eb9a:	2280      	movs	r2, #128	@ 0x80
 800eb9c:	0552      	lsls	r2, r2, #21
 800eb9e:	619a      	str	r2, [r3, #24]
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 800eba0:	2301      	movs	r3, #1
 800eba2:	425b      	negs	r3, r3
 800eba4:	6879      	ldr	r1, [r7, #4]
 800eba6:	4810      	ldr	r0, [pc, #64]	@ (800ebe8 <LCD_WriteCommand+0x6c>)
 800eba8:	2201      	movs	r2, #1
 800ebaa:	f7f9 fa0b 	bl	8007fc4 <HAL_SPI_Transmit>
  if (argc)
 800ebae:	1cfb      	adds	r3, r7, #3
 800ebb0:	781b      	ldrb	r3, [r3, #0]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d00d      	beq.n	800ebd2 <LCD_WriteCommand+0x56>
  {
    LCD_PIN(LCD_DC, SET);
 800ebb6:	4b0b      	ldr	r3, [pc, #44]	@ (800ebe4 <LCD_WriteCommand+0x68>)
 800ebb8:	2280      	movs	r2, #128	@ 0x80
 800ebba:	0052      	lsls	r2, r2, #1
 800ebbc:	619a      	str	r2, [r3, #24]
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd + 1), argc, HAL_MAX_DELAY);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	1c59      	adds	r1, r3, #1
 800ebc2:	1cfb      	adds	r3, r7, #3
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	b29a      	uxth	r2, r3
 800ebc8:	2301      	movs	r3, #1
 800ebca:	425b      	negs	r3, r3
 800ebcc:	4806      	ldr	r0, [pc, #24]	@ (800ebe8 <LCD_WriteCommand+0x6c>)
 800ebce:	f7f9 f9f9 	bl	8007fc4 <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS, SET);
 800ebd2:	4b04      	ldr	r3, [pc, #16]	@ (800ebe4 <LCD_WriteCommand+0x68>)
 800ebd4:	2280      	movs	r2, #128	@ 0x80
 800ebd6:	0152      	lsls	r2, r2, #5
 800ebd8:	619a      	str	r2, [r3, #24]
#endif
}
 800ebda:	46c0      	nop			@ (mov r8, r8)
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	b002      	add	sp, #8
 800ebe0:	bd80      	pop	{r7, pc}
 800ebe2:	46c0      	nop			@ (mov r8, r8)
 800ebe4:	48000400 	.word	0x48000400
 800ebe8:	200005cc 	.word	0x200005cc

0800ebec <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 800ebec:	b5b0      	push	{r4, r5, r7, lr}
 800ebee:	b084      	sub	sp, #16
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
 800ebf4:	6039      	str	r1, [r7, #0]
  LCD_PIN(LCD_DC, SET);
 800ebf6:	4b36      	ldr	r3, [pc, #216]	@ (800ecd0 <LCD_WriteData+0xe4>)
 800ebf8:	2280      	movs	r2, #128	@ 0x80
 800ebfa:	0052      	lsls	r2, r2, #1
 800ebfc:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS, RESET);
 800ebfe:	4b34      	ldr	r3, [pc, #208]	@ (800ecd0 <LCD_WriteData+0xe4>)
 800ec00:	2280      	movs	r2, #128	@ 0x80
 800ec02:	0552      	lsls	r2, r2, #21
 800ec04:	619a      	str	r2, [r3, #24]
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0)
 800ec06:	e058      	b.n	800ecba <LCD_WriteData+0xce>
  {
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	2280      	movs	r2, #128	@ 0x80
 800ec0c:	0252      	lsls	r2, r2, #9
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	d300      	bcc.n	800ec14 <LCD_WriteData+0x28>
 800ec12:	4b30      	ldr	r3, [pc, #192]	@ (800ecd4 <LCD_WriteData+0xe8>)
 800ec14:	210e      	movs	r1, #14
 800ec16:	187a      	adds	r2, r7, r1
 800ec18:	8013      	strh	r3, [r2, #0]
#ifdef USE_DMA
    if (buff_size > DMA_Min_Pixels)
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	2b20      	cmp	r3, #32
 800ec1e:	d929      	bls.n	800ec74 <LCD_WriteData+0x88>
    {
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 800ec20:	187b      	adds	r3, r7, r1
 800ec22:	881a      	ldrh	r2, [r3, #0]
 800ec24:	6879      	ldr	r1, [r7, #4]
 800ec26:	4b2c      	ldr	r3, [pc, #176]	@ (800ecd8 <LCD_WriteData+0xec>)
 800ec28:	0018      	movs	r0, r3
 800ec2a:	f7f9 fe5f 	bl	80088ec <HAL_SPI_Transmit_DMA>
      while (HAL_DMA_GetState(LCD_HANDLE.hdmatx) != HAL_DMA_STATE_READY)
 800ec2e:	46c0      	nop			@ (mov r8, r8)
 800ec30:	4b29      	ldr	r3, [pc, #164]	@ (800ecd8 <LCD_WriteData+0xec>)
 800ec32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec34:	0018      	movs	r0, r3
 800ec36:	f7f6 fab8 	bl	80051aa <HAL_DMA_GetState>
 800ec3a:	0003      	movs	r3, r0
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	d1f7      	bne.n	800ec30 <LCD_WriteData+0x44>
        ;
      if (config.dma_mem_inc == mem_increase)
 800ec40:	4b26      	ldr	r3, [pc, #152]	@ (800ecdc <LCD_WriteData+0xf0>)
 800ec42:	789b      	ldrb	r3, [r3, #2]
 800ec44:	b25b      	sxtb	r3, r3
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d131      	bne.n	800ecae <LCD_WriteData+0xc2>
      {
        if (config.dma_sz == mode_16bit)
 800ec4a:	4b24      	ldr	r3, [pc, #144]	@ (800ecdc <LCD_WriteData+0xf0>)
 800ec4c:	785b      	ldrb	r3, [r3, #1]
 800ec4e:	b25b      	sxtb	r3, r3
 800ec50:	2b01      	cmp	r3, #1
 800ec52:	d106      	bne.n	800ec62 <LCD_WriteData+0x76>
          buff += chunk_size;
 800ec54:	230e      	movs	r3, #14
 800ec56:	18fb      	adds	r3, r7, r3
 800ec58:	881b      	ldrh	r3, [r3, #0]
 800ec5a:	687a      	ldr	r2, [r7, #4]
 800ec5c:	18d3      	adds	r3, r2, r3
 800ec5e:	607b      	str	r3, [r7, #4]
 800ec60:	e025      	b.n	800ecae <LCD_WriteData+0xc2>
        else
          buff += chunk_size * 2;
 800ec62:	230e      	movs	r3, #14
 800ec64:	18fb      	adds	r3, r7, r3
 800ec66:	881b      	ldrh	r3, [r3, #0]
 800ec68:	005b      	lsls	r3, r3, #1
 800ec6a:	001a      	movs	r2, r3
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	189b      	adds	r3, r3, r2
 800ec70:	607b      	str	r3, [r7, #4]
 800ec72:	e01c      	b.n	800ecae <LCD_WriteData+0xc2>
      }
    }
    else
    {
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 800ec74:	2301      	movs	r3, #1
 800ec76:	425c      	negs	r4, r3
 800ec78:	250e      	movs	r5, #14
 800ec7a:	197b      	adds	r3, r7, r5
 800ec7c:	881a      	ldrh	r2, [r3, #0]
 800ec7e:	6879      	ldr	r1, [r7, #4]
 800ec80:	4815      	ldr	r0, [pc, #84]	@ (800ecd8 <LCD_WriteData+0xec>)
 800ec82:	0023      	movs	r3, r4
 800ec84:	f7f9 f99e 	bl	8007fc4 <HAL_SPI_Transmit>
      if (config.spi_sz == mode_16bit)
 800ec88:	4b14      	ldr	r3, [pc, #80]	@ (800ecdc <LCD_WriteData+0xf0>)
 800ec8a:	781b      	ldrb	r3, [r3, #0]
 800ec8c:	b25b      	sxtb	r3, r3
 800ec8e:	2b01      	cmp	r3, #1
 800ec90:	d105      	bne.n	800ec9e <LCD_WriteData+0xb2>
        buff += chunk_size;
 800ec92:	197b      	adds	r3, r7, r5
 800ec94:	881b      	ldrh	r3, [r3, #0]
 800ec96:	687a      	ldr	r2, [r7, #4]
 800ec98:	18d3      	adds	r3, r2, r3
 800ec9a:	607b      	str	r3, [r7, #4]
 800ec9c:	e007      	b.n	800ecae <LCD_WriteData+0xc2>
      else
        buff += chunk_size * 2;
 800ec9e:	230e      	movs	r3, #14
 800eca0:	18fb      	adds	r3, r7, r3
 800eca2:	881b      	ldrh	r3, [r3, #0]
 800eca4:	005b      	lsls	r3, r3, #1
 800eca6:	001a      	movs	r2, r3
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	189b      	adds	r3, r3, r2
 800ecac:	607b      	str	r3, [r7, #4]
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 800ecae:	230e      	movs	r3, #14
 800ecb0:	18fb      	adds	r3, r7, r3
 800ecb2:	881b      	ldrh	r3, [r3, #0]
 800ecb4:	683a      	ldr	r2, [r7, #0]
 800ecb6:	1ad3      	subs	r3, r2, r3
 800ecb8:	603b      	str	r3, [r7, #0]
  while (buff_size > 0)
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d1a3      	bne.n	800ec08 <LCD_WriteData+0x1c>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS, SET);
 800ecc0:	4b03      	ldr	r3, [pc, #12]	@ (800ecd0 <LCD_WriteData+0xe4>)
 800ecc2:	2280      	movs	r2, #128	@ 0x80
 800ecc4:	0152      	lsls	r2, r2, #5
 800ecc6:	619a      	str	r2, [r3, #24]
#endif
}
 800ecc8:	46c0      	nop			@ (mov r8, r8)
 800ecca:	46bd      	mov	sp, r7
 800eccc:	b004      	add	sp, #16
 800ecce:	bdb0      	pop	{r4, r5, r7, pc}
 800ecd0:	48000400 	.word	0x48000400
 800ecd4:	0000ffff 	.word	0x0000ffff
 800ecd8:	200005cc 	.word	0x200005cc
 800ecdc:	2000018c 	.word	0x2000018c

0800ece0 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 800ece0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ece2:	b08b      	sub	sp, #44	@ 0x2c
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	0005      	movs	r5, r0
 800ece8:	000c      	movs	r4, r1
 800ecea:	0010      	movs	r0, r2
 800ecec:	0019      	movs	r1, r3
 800ecee:	1dbb      	adds	r3, r7, #6
 800ecf0:	1c2a      	adds	r2, r5, #0
 800ecf2:	801a      	strh	r2, [r3, #0]
 800ecf4:	1d3b      	adds	r3, r7, #4
 800ecf6:	1c22      	adds	r2, r4, #0
 800ecf8:	801a      	strh	r2, [r3, #0]
 800ecfa:	1cbb      	adds	r3, r7, #2
 800ecfc:	1c02      	adds	r2, r0, #0
 800ecfe:	801a      	strh	r2, [r3, #0]
 800ed00:	003b      	movs	r3, r7
 800ed02:	1c0a      	adds	r2, r1, #0
 800ed04:	801a      	strh	r2, [r3, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 800ed06:	2026      	movs	r0, #38	@ 0x26
 800ed08:	183b      	adds	r3, r7, r0
 800ed0a:	1dba      	adds	r2, r7, #6
 800ed0c:	8812      	ldrh	r2, [r2, #0]
 800ed0e:	801a      	strh	r2, [r3, #0]
 800ed10:	2424      	movs	r4, #36	@ 0x24
 800ed12:	193b      	adds	r3, r7, r4
 800ed14:	1cba      	adds	r2, r7, #2
 800ed16:	8812      	ldrh	r2, [r2, #0]
 800ed18:	801a      	strh	r2, [r3, #0]
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 800ed1a:	1d3b      	adds	r3, r7, #4
 800ed1c:	881b      	ldrh	r3, [r3, #0]
 800ed1e:	331e      	adds	r3, #30
 800ed20:	b29a      	uxth	r2, r3
 800ed22:	2522      	movs	r5, #34	@ 0x22
 800ed24:	197b      	adds	r3, r7, r5
 800ed26:	801a      	strh	r2, [r3, #0]
 800ed28:	003b      	movs	r3, r7
 800ed2a:	881b      	ldrh	r3, [r3, #0]
 800ed2c:	331e      	adds	r3, #30
 800ed2e:	b29a      	uxth	r2, r3
 800ed30:	2620      	movs	r6, #32
 800ed32:	19bb      	adds	r3, r7, r6
 800ed34:	801a      	strh	r2, [r3, #0]

  /* Column Address set */
  {
    uint8_t cmd[] = {CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 800ed36:	2118      	movs	r1, #24
 800ed38:	187b      	adds	r3, r7, r1
 800ed3a:	222a      	movs	r2, #42	@ 0x2a
 800ed3c:	701a      	strb	r2, [r3, #0]
 800ed3e:	183b      	adds	r3, r7, r0
 800ed40:	2200      	movs	r2, #0
 800ed42:	5e9b      	ldrsh	r3, [r3, r2]
 800ed44:	121b      	asrs	r3, r3, #8
 800ed46:	b21b      	sxth	r3, r3
 800ed48:	b2da      	uxtb	r2, r3
 800ed4a:	187b      	adds	r3, r7, r1
 800ed4c:	705a      	strb	r2, [r3, #1]
 800ed4e:	183b      	adds	r3, r7, r0
 800ed50:	881b      	ldrh	r3, [r3, #0]
 800ed52:	b2da      	uxtb	r2, r3
 800ed54:	187b      	adds	r3, r7, r1
 800ed56:	709a      	strb	r2, [r3, #2]
 800ed58:	193b      	adds	r3, r7, r4
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	5e9b      	ldrsh	r3, [r3, r2]
 800ed5e:	121b      	asrs	r3, r3, #8
 800ed60:	b21b      	sxth	r3, r3
 800ed62:	b2da      	uxtb	r2, r3
 800ed64:	187b      	adds	r3, r7, r1
 800ed66:	70da      	strb	r2, [r3, #3]
 800ed68:	193b      	adds	r3, r7, r4
 800ed6a:	881b      	ldrh	r3, [r3, #0]
 800ed6c:	b2da      	uxtb	r2, r3
 800ed6e:	187b      	adds	r3, r7, r1
 800ed70:	711a      	strb	r2, [r3, #4]
    LCD_WriteCommand(cmd, sizeof(cmd) - 1);
 800ed72:	187b      	adds	r3, r7, r1
 800ed74:	2104      	movs	r1, #4
 800ed76:	0018      	movs	r0, r3
 800ed78:	f7ff ff00 	bl	800eb7c <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = {CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 800ed7c:	2110      	movs	r1, #16
 800ed7e:	187b      	adds	r3, r7, r1
 800ed80:	222b      	movs	r2, #43	@ 0x2b
 800ed82:	701a      	strb	r2, [r3, #0]
 800ed84:	197b      	adds	r3, r7, r5
 800ed86:	2200      	movs	r2, #0
 800ed88:	5e9b      	ldrsh	r3, [r3, r2]
 800ed8a:	121b      	asrs	r3, r3, #8
 800ed8c:	b21b      	sxth	r3, r3
 800ed8e:	b2da      	uxtb	r2, r3
 800ed90:	187b      	adds	r3, r7, r1
 800ed92:	705a      	strb	r2, [r3, #1]
 800ed94:	197b      	adds	r3, r7, r5
 800ed96:	881b      	ldrh	r3, [r3, #0]
 800ed98:	b2da      	uxtb	r2, r3
 800ed9a:	187b      	adds	r3, r7, r1
 800ed9c:	709a      	strb	r2, [r3, #2]
 800ed9e:	19bb      	adds	r3, r7, r6
 800eda0:	2200      	movs	r2, #0
 800eda2:	5e9b      	ldrsh	r3, [r3, r2]
 800eda4:	121b      	asrs	r3, r3, #8
 800eda6:	b21b      	sxth	r3, r3
 800eda8:	b2da      	uxtb	r2, r3
 800edaa:	187b      	adds	r3, r7, r1
 800edac:	70da      	strb	r2, [r3, #3]
 800edae:	19bb      	adds	r3, r7, r6
 800edb0:	881b      	ldrh	r3, [r3, #0]
 800edb2:	b2da      	uxtb	r2, r3
 800edb4:	187b      	adds	r3, r7, r1
 800edb6:	711a      	strb	r2, [r3, #4]
    LCD_WriteCommand(cmd, sizeof(cmd) - 1);
 800edb8:	187b      	adds	r3, r7, r1
 800edba:	2104      	movs	r1, #4
 800edbc:	0018      	movs	r0, r3
 800edbe:	f7ff fedd 	bl	800eb7c <LCD_WriteCommand>
  }
  {
    /* Write to RAM */
    uint8_t cmd[] = {CMD_RAMWR};
 800edc2:	210c      	movs	r1, #12
 800edc4:	187b      	adds	r3, r7, r1
 800edc6:	4a06      	ldr	r2, [pc, #24]	@ (800ede0 <LCD_SetAddressWindow+0x100>)
 800edc8:	7812      	ldrb	r2, [r2, #0]
 800edca:	701a      	strb	r2, [r3, #0]
    LCD_WriteCommand(cmd, sizeof(cmd) - 1);
 800edcc:	187b      	adds	r3, r7, r1
 800edce:	2100      	movs	r1, #0
 800edd0:	0018      	movs	r0, r3
 800edd2:	f7ff fed3 	bl	800eb7c <LCD_WriteCommand>
  }
}
 800edd6:	46c0      	nop			@ (mov r8, r8)
 800edd8:	46bd      	mov	sp, r7
 800edda:	b00b      	add	sp, #44	@ 0x2c
 800eddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edde:	46c0      	nop			@ (mov r8, r8)
 800ede0:	08016738 	.word	0x08016738

0800ede4 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 800ede4:	b5b0      	push	{r4, r5, r7, lr}
 800ede6:	b084      	sub	sp, #16
 800ede8:	af00      	add	r7, sp, #0
 800edea:	0004      	movs	r4, r0
 800edec:	0008      	movs	r0, r1
 800edee:	0011      	movs	r1, r2
 800edf0:	1dbb      	adds	r3, r7, #6
 800edf2:	1c22      	adds	r2, r4, #0
 800edf4:	801a      	strh	r2, [r3, #0]
 800edf6:	1d3b      	adds	r3, r7, #4
 800edf8:	1c02      	adds	r2, r0, #0
 800edfa:	801a      	strh	r2, [r3, #0]
 800edfc:	1cbb      	adds	r3, r7, #2
 800edfe:	1c0a      	adds	r2, r1, #0
 800ee00:	801a      	strh	r2, [r3, #0]
  if ((x < 0) || (x > LCD_WIDTH - 1) ||
 800ee02:	1dbb      	adds	r3, r7, #6
 800ee04:	2200      	movs	r2, #0
 800ee06:	5e9b      	ldrsh	r3, [r3, r2]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	db40      	blt.n	800ee8e <LCD_DrawPixel+0xaa>
 800ee0c:	1dbb      	adds	r3, r7, #6
 800ee0e:	2200      	movs	r2, #0
 800ee10:	5e9a      	ldrsh	r2, [r3, r2]
 800ee12:	23a0      	movs	r3, #160	@ 0xa0
 800ee14:	005b      	lsls	r3, r3, #1
 800ee16:	429a      	cmp	r2, r3
 800ee18:	da39      	bge.n	800ee8e <LCD_DrawPixel+0xaa>
 800ee1a:	1d3b      	adds	r3, r7, #4
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	5e9b      	ldrsh	r3, [r3, r2]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	db34      	blt.n	800ee8e <LCD_DrawPixel+0xaa>
      (y < 0) || (y > LCD_HEIGHT - 1))
 800ee24:	1d3b      	adds	r3, r7, #4
 800ee26:	2200      	movs	r2, #0
 800ee28:	5e9b      	ldrsh	r3, [r3, r2]
 800ee2a:	2bab      	cmp	r3, #171	@ 0xab
 800ee2c:	dc2f      	bgt.n	800ee8e <LCD_DrawPixel+0xaa>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 800ee2e:	1cbb      	adds	r3, r7, #2
 800ee30:	881b      	ldrh	r3, [r3, #0]
 800ee32:	0a1b      	lsrs	r3, r3, #8
 800ee34:	b29b      	uxth	r3, r3
 800ee36:	b2da      	uxtb	r2, r3
 800ee38:	250c      	movs	r5, #12
 800ee3a:	197b      	adds	r3, r7, r5
 800ee3c:	701a      	strb	r2, [r3, #0]
 800ee3e:	1cbb      	adds	r3, r7, #2
 800ee40:	881b      	ldrh	r3, [r3, #0]
 800ee42:	b2da      	uxtb	r2, r3
 800ee44:	197b      	adds	r3, r7, r5
 800ee46:	705a      	strb	r2, [r3, #1]

  LCD_SetAddressWindow(x, y, x, y);
 800ee48:	1d3b      	adds	r3, r7, #4
 800ee4a:	2400      	movs	r4, #0
 800ee4c:	5f1c      	ldrsh	r4, [r3, r4]
 800ee4e:	1dbb      	adds	r3, r7, #6
 800ee50:	2200      	movs	r2, #0
 800ee52:	5e9a      	ldrsh	r2, [r3, r2]
 800ee54:	1d3b      	adds	r3, r7, #4
 800ee56:	2100      	movs	r1, #0
 800ee58:	5e59      	ldrsh	r1, [r3, r1]
 800ee5a:	1dbb      	adds	r3, r7, #6
 800ee5c:	2000      	movs	r0, #0
 800ee5e:	5e18      	ldrsh	r0, [r3, r0]
 800ee60:	0023      	movs	r3, r4
 800ee62:	f7ff ff3d 	bl	800ece0 <LCD_SetAddressWindow>

  LCD_PIN(LCD_DC, SET);
 800ee66:	4b0c      	ldr	r3, [pc, #48]	@ (800ee98 <LCD_DrawPixel+0xb4>)
 800ee68:	2280      	movs	r2, #128	@ 0x80
 800ee6a:	0052      	lsls	r2, r2, #1
 800ee6c:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS, RESET);
 800ee6e:	4b0a      	ldr	r3, [pc, #40]	@ (800ee98 <LCD_DrawPixel+0xb4>)
 800ee70:	2280      	movs	r2, #128	@ 0x80
 800ee72:	0552      	lsls	r2, r2, #21
 800ee74:	619a      	str	r2, [r3, #24]
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 800ee76:	2301      	movs	r3, #1
 800ee78:	425b      	negs	r3, r3
 800ee7a:	1979      	adds	r1, r7, r5
 800ee7c:	4807      	ldr	r0, [pc, #28]	@ (800ee9c <LCD_DrawPixel+0xb8>)
 800ee7e:	2202      	movs	r2, #2
 800ee80:	f7f9 f8a0 	bl	8007fc4 <HAL_SPI_Transmit>
#ifdef LCD_CS
  LCD_PIN(LCD_CS, SET);
 800ee84:	4b04      	ldr	r3, [pc, #16]	@ (800ee98 <LCD_DrawPixel+0xb4>)
 800ee86:	2280      	movs	r2, #128	@ 0x80
 800ee88:	0152      	lsls	r2, r2, #5
 800ee8a:	619a      	str	r2, [r3, #24]
 800ee8c:	e000      	b.n	800ee90 <LCD_DrawPixel+0xac>
    return;
 800ee8e:	46c0      	nop			@ (mov r8, r8)
#endif
}
 800ee90:	46bd      	mov	sp, r7
 800ee92:	b004      	add	sp, #16
 800ee94:	bdb0      	pop	{r4, r5, r7, pc}
 800ee96:	46c0      	nop			@ (mov r8, r8)
 800ee98:	48000400 	.word	0x48000400
 800ee9c:	200005cc 	.word	0x200005cc

0800eea0 <LCD_FillPixels>:
  fb[x + (y * LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b094      	sub	sp, #80	@ 0x50
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	000a      	movs	r2, r1
 800eeaa:	1cbb      	adds	r3, r7, #2
 800eeac:	801a      	strh	r2, [r3, #0]
#ifdef USE_DMA
  if (pixels > DMA_Min_Pixels)
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2b20      	cmp	r3, #32
 800eeb2:	d906      	bls.n	800eec2 <LCD_FillPixels+0x22>
    LCD_WriteData((uint8_t *)&color, pixels);
 800eeb4:	687a      	ldr	r2, [r7, #4]
 800eeb6:	1cbb      	adds	r3, r7, #2
 800eeb8:	0011      	movs	r1, r2
 800eeba:	0018      	movs	r0, r3
 800eebc:	f7ff fe96 	bl	800ebec <LCD_WriteData>
      pixels -= sz;
    }
#ifdef USE_DMA
  }
#endif
}
 800eec0:	e027      	b.n	800ef12 <LCD_FillPixels+0x72>
    for (uint32_t t = 0; t < (pixels < DMA_Min_Pixels ? pixels : DMA_Min_Pixels); t++)
 800eec2:	2300      	movs	r3, #0
 800eec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eec6:	e009      	b.n	800eedc <LCD_FillPixels+0x3c>
      fill[t] = color;
 800eec8:	1cbb      	adds	r3, r7, #2
 800eeca:	8819      	ldrh	r1, [r3, #0]
 800eecc:	2308      	movs	r3, #8
 800eece:	18fb      	adds	r3, r7, r3
 800eed0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800eed2:	0052      	lsls	r2, r2, #1
 800eed4:	52d1      	strh	r1, [r2, r3]
    for (uint32_t t = 0; t < (pixels < DMA_Min_Pixels ? pixels : DMA_Min_Pixels); t++)
 800eed6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eed8:	3301      	adds	r3, #1
 800eeda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2b20      	cmp	r3, #32
 800eee0:	d900      	bls.n	800eee4 <LCD_FillPixels+0x44>
 800eee2:	2320      	movs	r3, #32
 800eee4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800eee6:	429a      	cmp	r2, r3
 800eee8:	d3ee      	bcc.n	800eec8 <LCD_FillPixels+0x28>
    while (pixels)
 800eeea:	e00f      	b.n	800ef0c <LCD_FillPixels+0x6c>
      uint32_t sz = (pixels < DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2b20      	cmp	r3, #32
 800eef0:	d900      	bls.n	800eef4 <LCD_FillPixels+0x54>
 800eef2:	2320      	movs	r3, #32
 800eef4:	64bb      	str	r3, [r7, #72]	@ 0x48
      LCD_WriteData((uint8_t *)fill, sz);
 800eef6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eef8:	2308      	movs	r3, #8
 800eefa:	18fb      	adds	r3, r7, r3
 800eefc:	0011      	movs	r1, r2
 800eefe:	0018      	movs	r0, r3
 800ef00:	f7ff fe74 	bl	800ebec <LCD_WriteData>
      pixels -= sz;
 800ef04:	687a      	ldr	r2, [r7, #4]
 800ef06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef08:	1ad3      	subs	r3, r2, r3
 800ef0a:	607b      	str	r3, [r7, #4]
    while (pixels)
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d1ec      	bne.n	800eeec <LCD_FillPixels+0x4c>
}
 800ef12:	46c0      	nop			@ (mov r8, r8)
 800ef14:	46bd      	mov	sp, r7
 800ef16:	b014      	add	sp, #80	@ 0x50
 800ef18:	bd80      	pop	{r7, pc}
	...

0800ef1c <LCD_FillArea>:
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void (*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t)
{
 800ef1c:	b5b0      	push	{r4, r5, r7, lr}
 800ef1e:	b082      	sub	sp, #8
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	0005      	movs	r5, r0
 800ef24:	000c      	movs	r4, r1
 800ef26:	0010      	movs	r0, r2
 800ef28:	0019      	movs	r1, r3
 800ef2a:	1dbb      	adds	r3, r7, #6
 800ef2c:	1c2a      	adds	r2, r5, #0
 800ef2e:	801a      	strh	r2, [r3, #0]
 800ef30:	1d3b      	adds	r3, r7, #4
 800ef32:	1c22      	adds	r2, r4, #0
 800ef34:	801a      	strh	r2, [r3, #0]
 800ef36:	1cbb      	adds	r3, r7, #2
 800ef38:	1c02      	adds	r2, r0, #0
 800ef3a:	801a      	strh	r2, [r3, #0]
 800ef3c:	003b      	movs	r3, r7
 800ef3e:	1c0a      	adds	r2, r1, #0
 800ef40:	801a      	strh	r2, [r3, #0]
  if (x0 == -1)
 800ef42:	1dbb      	adds	r3, r7, #6
 800ef44:	2200      	movs	r2, #0
 800ef46:	5e9b      	ldrsh	r3, [r3, r2]
 800ef48:	3301      	adds	r3, #1
 800ef4a:	d105      	bne.n	800ef58 <LCD_FillArea+0x3c>
  {
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 800ef4c:	2100      	movs	r1, #0
 800ef4e:	2001      	movs	r0, #1
 800ef50:	f7ff fd80 	bl	800ea54 <setDMAMemMode>
#else
    setSPI_Size(mode_8bit); // Set SPI to 8 bit
#endif
    return NULL;
 800ef54:	2300      	movs	r3, #0
 800ef56:	e017      	b.n	800ef88 <LCD_FillArea+0x6c>
  }
  LCD_SetAddressWindow(x0, y0, x1, y1);
 800ef58:	003b      	movs	r3, r7
 800ef5a:	2400      	movs	r4, #0
 800ef5c:	5f1c      	ldrsh	r4, [r3, r4]
 800ef5e:	1cbb      	adds	r3, r7, #2
 800ef60:	2200      	movs	r2, #0
 800ef62:	5e9a      	ldrsh	r2, [r3, r2]
 800ef64:	1d3b      	adds	r3, r7, #4
 800ef66:	2100      	movs	r1, #0
 800ef68:	5e59      	ldrsh	r1, [r3, r1]
 800ef6a:	1dbb      	adds	r3, r7, #6
 800ef6c:	2000      	movs	r0, #0
 800ef6e:	5e18      	ldrsh	r0, [r3, r0]
 800ef70:	0023      	movs	r3, r4
 800ef72:	f7ff feb5 	bl	800ece0 <LCD_SetAddressWindow>
#ifdef USE_DMA
  setDMAMemMode(mem_fixed, mode_16bit);
 800ef76:	2101      	movs	r1, #1
 800ef78:	2000      	movs	r0, #0
 800ef7a:	f7ff fd6b 	bl	800ea54 <setDMAMemMode>
#else
  setSPI_Size(mode_16bit); // Set SPI to 16 bit
#endif
  LCD_PIN(LCD_DC, SET);
 800ef7e:	4b04      	ldr	r3, [pc, #16]	@ (800ef90 <LCD_FillArea+0x74>)
 800ef80:	2280      	movs	r2, #128	@ 0x80
 800ef82:	0052      	lsls	r2, r2, #1
 800ef84:	619a      	str	r2, [r3, #24]
  return LCD_FillPixels;
 800ef86:	4b03      	ldr	r3, [pc, #12]	@ (800ef94 <LCD_FillArea+0x78>)
}
 800ef88:	0018      	movs	r0, r3
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	b002      	add	sp, #8
 800ef8e:	bdb0      	pop	{r4, r5, r7, pc}
 800ef90:	48000400 	.word	0x48000400
 800ef94:	0800eea1 	.word	0x0800eea1

0800ef98 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 800ef98:	b5b0      	push	{r4, r5, r7, lr}
 800ef9a:	b084      	sub	sp, #16
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	0005      	movs	r5, r0
 800efa0:	000c      	movs	r4, r1
 800efa2:	0010      	movs	r0, r2
 800efa4:	0019      	movs	r1, r3
 800efa6:	1dbb      	adds	r3, r7, #6
 800efa8:	1c2a      	adds	r2, r5, #0
 800efaa:	801a      	strh	r2, [r3, #0]
 800efac:	1d3b      	adds	r3, r7, #4
 800efae:	1c22      	adds	r2, r4, #0
 800efb0:	801a      	strh	r2, [r3, #0]
 800efb2:	1cbb      	adds	r3, r7, #2
 800efb4:	1c02      	adds	r2, r0, #0
 800efb6:	801a      	strh	r2, [r3, #0]
 800efb8:	003b      	movs	r3, r7
 800efba:	1c0a      	adds	r2, r1, #0
 800efbc:	801a      	strh	r2, [r3, #0]
  uint32_t pixels = (uint32_t)(xEnd - xSta + 1) * (yEnd - ySta + 1);
 800efbe:	1cbb      	adds	r3, r7, #2
 800efc0:	881a      	ldrh	r2, [r3, #0]
 800efc2:	1dbb      	adds	r3, r7, #6
 800efc4:	881b      	ldrh	r3, [r3, #0]
 800efc6:	1ad3      	subs	r3, r2, r3
 800efc8:	3301      	adds	r3, #1
 800efca:	0019      	movs	r1, r3
 800efcc:	003b      	movs	r3, r7
 800efce:	881a      	ldrh	r2, [r3, #0]
 800efd0:	1d3b      	adds	r3, r7, #4
 800efd2:	881b      	ldrh	r3, [r3, #0]
 800efd4:	1ad3      	subs	r3, r2, r3
 800efd6:	3301      	adds	r3, #1
 800efd8:	434b      	muls	r3, r1
 800efda:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 800efdc:	1dbb      	adds	r3, r7, #6
 800efde:	2000      	movs	r0, #0
 800efe0:	5e18      	ldrsh	r0, [r3, r0]
 800efe2:	1d3b      	adds	r3, r7, #4
 800efe4:	2100      	movs	r1, #0
 800efe6:	5e59      	ldrsh	r1, [r3, r1]
 800efe8:	1cbb      	adds	r3, r7, #2
 800efea:	2200      	movs	r2, #0
 800efec:	5e9a      	ldrsh	r2, [r3, r2]
 800efee:	003b      	movs	r3, r7
 800eff0:	2400      	movs	r4, #0
 800eff2:	5f1b      	ldrsh	r3, [r3, r4]
 800eff4:	f7ff fe74 	bl	800ece0 <LCD_SetAddressWindow>
#ifdef USE_DMA
  setDMAMemMode(mem_fixed, mode_16bit);
 800eff8:	2101      	movs	r1, #1
 800effa:	2000      	movs	r0, #0
 800effc:	f7ff fd2a 	bl	800ea54 <setDMAMemMode>
#else
  setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 800f000:	2320      	movs	r3, #32
 800f002:	18fb      	adds	r3, r7, r3
 800f004:	881a      	ldrh	r2, [r3, #0]
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	0011      	movs	r1, r2
 800f00a:	0018      	movs	r0, r3
 800f00c:	f7ff ff48 	bl	800eea0 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
 800f010:	2100      	movs	r1, #0
 800f012:	2001      	movs	r0, #1
 800f014:	f7ff fd1e 	bl	800ea54 <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 800f018:	2300      	movs	r3, #0
}
 800f01a:	0018      	movs	r0, r3
 800f01c:	46bd      	mov	sp, r7
 800f01e:	b004      	add	sp, #16
 800f020:	bdb0      	pop	{r4, r5, r7, pc}

0800f022 <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP *bmp)
{
 800f022:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f024:	b085      	sub	sp, #20
 800f026:	af00      	add	r7, sp, #0
 800f028:	603a      	str	r2, [r7, #0]
 800f02a:	1dbb      	adds	r3, r7, #6
 800f02c:	1c02      	adds	r2, r0, #0
 800f02e:	801a      	strh	r2, [r3, #0]
 800f030:	1d3b      	adds	r3, r7, #4
 800f032:	1c0a      	adds	r2, r1, #0
 800f034:	801a      	strh	r2, [r3, #0]
  uint16_t w = bmp->width;
 800f036:	250e      	movs	r5, #14
 800f038:	197b      	adds	r3, r7, r5
 800f03a:	683a      	ldr	r2, [r7, #0]
 800f03c:	8892      	ldrh	r2, [r2, #4]
 800f03e:	801a      	strh	r2, [r3, #0]
  uint16_t h = bmp->height;
 800f040:	260c      	movs	r6, #12
 800f042:	19bb      	adds	r3, r7, r6
 800f044:	683a      	ldr	r2, [r7, #0]
 800f046:	88d2      	ldrh	r2, [r2, #6]
 800f048:	801a      	strh	r2, [r3, #0]
  if ((x > LCD_WIDTH - 1) || (y > LCD_HEIGHT - 1))
 800f04a:	1dbb      	adds	r3, r7, #6
 800f04c:	881a      	ldrh	r2, [r3, #0]
 800f04e:	23a0      	movs	r3, #160	@ 0xa0
 800f050:	005b      	lsls	r3, r3, #1
 800f052:	429a      	cmp	r2, r3
 800f054:	d245      	bcs.n	800f0e2 <LCD_DrawImage+0xc0>
 800f056:	1d3b      	adds	r3, r7, #4
 800f058:	881b      	ldrh	r3, [r3, #0]
 800f05a:	2bab      	cmp	r3, #171	@ 0xab
 800f05c:	d841      	bhi.n	800f0e2 <LCD_DrawImage+0xc0>
    return;
  if ((x + w - 1) > LCD_WIDTH - 1)
 800f05e:	1dbb      	adds	r3, r7, #6
 800f060:	881a      	ldrh	r2, [r3, #0]
 800f062:	197b      	adds	r3, r7, r5
 800f064:	881b      	ldrh	r3, [r3, #0]
 800f066:	18d2      	adds	r2, r2, r3
 800f068:	23a0      	movs	r3, #160	@ 0xa0
 800f06a:	005b      	lsls	r3, r3, #1
 800f06c:	429a      	cmp	r2, r3
 800f06e:	dc3a      	bgt.n	800f0e6 <LCD_DrawImage+0xc4>
    return;
  if ((y + h - 1) > LCD_HEIGHT - 1)
 800f070:	1d3b      	adds	r3, r7, #4
 800f072:	881a      	ldrh	r2, [r3, #0]
 800f074:	19bb      	adds	r3, r7, r6
 800f076:	881b      	ldrh	r3, [r3, #0]
 800f078:	18d3      	adds	r3, r2, r3
 800f07a:	2bac      	cmp	r3, #172	@ 0xac
 800f07c:	dc35      	bgt.n	800f0ea <LCD_DrawImage+0xc8>
    return;
  if (bmp->bpp != BMP_BPP_16)
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	7a1b      	ldrb	r3, [r3, #8]
 800f082:	2b10      	cmp	r3, #16
 800f084:	d133      	bne.n	800f0ee <LCD_DrawImage+0xcc>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 800f086:	1dbb      	adds	r3, r7, #6
 800f088:	2000      	movs	r0, #0
 800f08a:	5e18      	ldrsh	r0, [r3, r0]
 800f08c:	1d3b      	adds	r3, r7, #4
 800f08e:	2100      	movs	r1, #0
 800f090:	5e59      	ldrsh	r1, [r3, r1]
 800f092:	1dba      	adds	r2, r7, #6
 800f094:	197b      	adds	r3, r7, r5
 800f096:	8812      	ldrh	r2, [r2, #0]
 800f098:	881b      	ldrh	r3, [r3, #0]
 800f09a:	18d3      	adds	r3, r2, r3
 800f09c:	b29b      	uxth	r3, r3
 800f09e:	3b01      	subs	r3, #1
 800f0a0:	b29b      	uxth	r3, r3
 800f0a2:	b21c      	sxth	r4, r3
 800f0a4:	1d3a      	adds	r2, r7, #4
 800f0a6:	19bb      	adds	r3, r7, r6
 800f0a8:	8812      	ldrh	r2, [r2, #0]
 800f0aa:	881b      	ldrh	r3, [r3, #0]
 800f0ac:	18d3      	adds	r3, r2, r3
 800f0ae:	b29b      	uxth	r3, r3
 800f0b0:	3b01      	subs	r3, #1
 800f0b2:	b29b      	uxth	r3, r3
 800f0b4:	b21b      	sxth	r3, r3
 800f0b6:	0022      	movs	r2, r4
 800f0b8:	f7ff fe12 	bl	800ece0 <LCD_SetAddressWindow>

#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit); // Set SPI and DMA to 16 bit, enable memory increase
 800f0bc:	2101      	movs	r1, #1
 800f0be:	2001      	movs	r0, #1
 800f0c0:	f7ff fcc8 	bl	800ea54 <setDMAMemMode>
#else
  setSPI_Size(mode_16bit); // Set SPI to 16 bit
#endif
  LCD_WriteData((uint8_t *)bmp->p, w * h);
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	6818      	ldr	r0, [r3, #0]
 800f0c8:	197b      	adds	r3, r7, r5
 800f0ca:	881b      	ldrh	r3, [r3, #0]
 800f0cc:	19ba      	adds	r2, r7, r6
 800f0ce:	8812      	ldrh	r2, [r2, #0]
 800f0d0:	4353      	muls	r3, r2
 800f0d2:	0019      	movs	r1, r3
 800f0d4:	f7ff fd8a 	bl	800ebec <LCD_WriteData>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit); // Set SPI and DMA to 16 bit, enable memory increase
 800f0d8:	2100      	movs	r1, #0
 800f0da:	2001      	movs	r0, #1
 800f0dc:	f7ff fcba 	bl	800ea54 <setDMAMemMode>
 800f0e0:	e006      	b.n	800f0f0 <LCD_DrawImage+0xce>
    return;
 800f0e2:	46c0      	nop			@ (mov r8, r8)
 800f0e4:	e004      	b.n	800f0f0 <LCD_DrawImage+0xce>
    return;
 800f0e6:	46c0      	nop			@ (mov r8, r8)
 800f0e8:	e002      	b.n	800f0f0 <LCD_DrawImage+0xce>
    return;
 800f0ea:	46c0      	nop			@ (mov r8, r8)
 800f0ec:	e000      	b.n	800f0f0 <LCD_DrawImage+0xce>
    return;
 800f0ee:	46c0      	nop			@ (mov r8, r8)
#else
  setSPI_Size(mode_8bit); // Set SPI to 16 bit
#endif
}
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	b005      	add	sp, #20
 800f0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f0f6 <LCD_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 800f0f6:	b5b0      	push	{r4, r5, r7, lr}
 800f0f8:	b086      	sub	sp, #24
 800f0fa:	af02      	add	r7, sp, #8
 800f0fc:	0005      	movs	r5, r0
 800f0fe:	000c      	movs	r4, r1
 800f100:	0010      	movs	r0, r2
 800f102:	0019      	movs	r1, r3
 800f104:	1dbb      	adds	r3, r7, #6
 800f106:	1c2a      	adds	r2, r5, #0
 800f108:	801a      	strh	r2, [r3, #0]
 800f10a:	1d3b      	adds	r3, r7, #4
 800f10c:	1c22      	adds	r2, r4, #0
 800f10e:	801a      	strh	r2, [r3, #0]
 800f110:	1cbb      	adds	r3, r7, #2
 800f112:	1c02      	adds	r2, r0, #0
 800f114:	801a      	strh	r2, [r3, #0]
 800f116:	003b      	movs	r3, r7
 800f118:	1c0a      	adds	r2, r1, #0
 800f11a:	801a      	strh	r2, [r3, #0]

  if (x0 == x1)
 800f11c:	1dba      	adds	r2, r7, #6
 800f11e:	1cbb      	adds	r3, r7, #2
 800f120:	8812      	ldrh	r2, [r2, #0]
 800f122:	881b      	ldrh	r3, [r3, #0]
 800f124:	429a      	cmp	r2, r3
 800f126:	d113      	bne.n	800f150 <LCD_DrawLine+0x5a>
  { // If horizontal
    if (y0 > y1)
 800f128:	1d3a      	adds	r2, r7, #4
 800f12a:	003b      	movs	r3, r7
 800f12c:	8812      	ldrh	r2, [r2, #0]
 800f12e:	881b      	ldrh	r3, [r3, #0]
 800f130:	429a      	cmp	r2, r3
 800f132:	d92a      	bls.n	800f18a <LCD_DrawLine+0x94>
      swap(y0, y1);
 800f134:	210c      	movs	r1, #12
 800f136:	187b      	adds	r3, r7, r1
 800f138:	1d3a      	adds	r2, r7, #4
 800f13a:	8812      	ldrh	r2, [r2, #0]
 800f13c:	801a      	strh	r2, [r3, #0]
 800f13e:	1d3b      	adds	r3, r7, #4
 800f140:	003a      	movs	r2, r7
 800f142:	8812      	ldrh	r2, [r2, #0]
 800f144:	801a      	strh	r2, [r3, #0]
 800f146:	003b      	movs	r3, r7
 800f148:	187a      	adds	r2, r7, r1
 800f14a:	8812      	ldrh	r2, [r2, #0]
 800f14c:	801a      	strh	r2, [r3, #0]
 800f14e:	e01c      	b.n	800f18a <LCD_DrawLine+0x94>
  }
  else if (y0 == y1)
 800f150:	1d3a      	adds	r2, r7, #4
 800f152:	003b      	movs	r3, r7
 800f154:	8812      	ldrh	r2, [r2, #0]
 800f156:	881b      	ldrh	r3, [r3, #0]
 800f158:	429a      	cmp	r2, r3
 800f15a:	d113      	bne.n	800f184 <LCD_DrawLine+0x8e>
  { // If vertical
    if (x0 > x1)
 800f15c:	1dba      	adds	r2, r7, #6
 800f15e:	1cbb      	adds	r3, r7, #2
 800f160:	8812      	ldrh	r2, [r2, #0]
 800f162:	881b      	ldrh	r3, [r3, #0]
 800f164:	429a      	cmp	r2, r3
 800f166:	d910      	bls.n	800f18a <LCD_DrawLine+0x94>
      swap(x0, x1);
 800f168:	210e      	movs	r1, #14
 800f16a:	187b      	adds	r3, r7, r1
 800f16c:	1dba      	adds	r2, r7, #6
 800f16e:	8812      	ldrh	r2, [r2, #0]
 800f170:	801a      	strh	r2, [r3, #0]
 800f172:	1dbb      	adds	r3, r7, #6
 800f174:	1cba      	adds	r2, r7, #2
 800f176:	8812      	ldrh	r2, [r2, #0]
 800f178:	801a      	strh	r2, [r3, #0]
 800f17a:	1cbb      	adds	r3, r7, #2
 800f17c:	187a      	adds	r2, r7, r1
 800f17e:	8812      	ldrh	r2, [r2, #0]
 800f180:	801a      	strh	r2, [r3, #0]
 800f182:	e002      	b.n	800f18a <LCD_DrawLine+0x94>
  }
  else
  { // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 800f184:	2301      	movs	r3, #1
 800f186:	425b      	negs	r3, r3
 800f188:	e00f      	b.n	800f1aa <LCD_DrawLine+0xb4>
  }

  LCD_Fill(x0, y0, x1, y1, color); // Draw using acceleration
 800f18a:	003b      	movs	r3, r7
 800f18c:	881c      	ldrh	r4, [r3, #0]
 800f18e:	1cbb      	adds	r3, r7, #2
 800f190:	881a      	ldrh	r2, [r3, #0]
 800f192:	1d3b      	adds	r3, r7, #4
 800f194:	8819      	ldrh	r1, [r3, #0]
 800f196:	1dbb      	adds	r3, r7, #6
 800f198:	8818      	ldrh	r0, [r3, #0]
 800f19a:	2320      	movs	r3, #32
 800f19c:	18fb      	adds	r3, r7, r3
 800f19e:	881b      	ldrh	r3, [r3, #0]
 800f1a0:	9300      	str	r3, [sp, #0]
 800f1a2:	0023      	movs	r3, r4
 800f1a4:	f7ff fef8 	bl	800ef98 <LCD_Fill>
  return UG_RESULT_OK;
 800f1a8:	2300      	movs	r3, #0
}
 800f1aa:	0018      	movs	r0, r3
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	b004      	add	sp, #16
 800f1b0:	bdb0      	pop	{r4, r5, r7, pc}

0800f1b2 <LCD_PutStr>:
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y, char *str, UG_FONT *font, uint16_t color, uint16_t bgcolor)
{
 800f1b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1b4:	b085      	sub	sp, #20
 800f1b6:	af00      	add	r7, sp, #0
 800f1b8:	60ba      	str	r2, [r7, #8]
 800f1ba:	607b      	str	r3, [r7, #4]
 800f1bc:	240e      	movs	r4, #14
 800f1be:	193b      	adds	r3, r7, r4
 800f1c0:	1c02      	adds	r2, r0, #0
 800f1c2:	801a      	strh	r2, [r3, #0]
 800f1c4:	250c      	movs	r5, #12
 800f1c6:	197b      	adds	r3, r7, r5
 800f1c8:	1c0a      	adds	r2, r1, #0
 800f1ca:	801a      	strh	r2, [r3, #0]
  UG_FontSelect(font);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	0018      	movs	r0, r3
 800f1d0:	f000 f970 	bl	800f4b4 <UG_FontSelect>
  UG_SetForecolor(color);
 800f1d4:	2318      	movs	r3, #24
 800f1d6:	2608      	movs	r6, #8
 800f1d8:	199b      	adds	r3, r3, r6
 800f1da:	2208      	movs	r2, #8
 800f1dc:	4694      	mov	ip, r2
 800f1de:	44bc      	add	ip, r7
 800f1e0:	4463      	add	r3, ip
 800f1e2:	881b      	ldrh	r3, [r3, #0]
 800f1e4:	0018      	movs	r0, r3
 800f1e6:	f000 fc61 	bl	800faac <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 800f1ea:	231c      	movs	r3, #28
 800f1ec:	199b      	adds	r3, r3, r6
 800f1ee:	2208      	movs	r2, #8
 800f1f0:	4694      	mov	ip, r2
 800f1f2:	44bc      	add	ip, r7
 800f1f4:	4463      	add	r3, ip
 800f1f6:	881b      	ldrh	r3, [r3, #0]
 800f1f8:	0018      	movs	r0, r3
 800f1fa:	f000 fc69 	bl	800fad0 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 800f1fe:	193b      	adds	r3, r7, r4
 800f200:	2000      	movs	r0, #0
 800f202:	5e18      	ldrsh	r0, [r3, r0]
 800f204:	197b      	adds	r3, r7, r5
 800f206:	2200      	movs	r2, #0
 800f208:	5e9b      	ldrsh	r3, [r3, r2]
 800f20a:	68ba      	ldr	r2, [r7, #8]
 800f20c:	0019      	movs	r1, r3
 800f20e:	f000 fb8d 	bl	800f92c <UG_PutString>
}
 800f212:	46c0      	nop			@ (mov r8, r8)
 800f214:	46bd      	mov	sp, r7
 800f216:	b005      	add	sp, #20
 800f218:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f21a <LCD_setPower>:
  uint8_t cmd[] = {(tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */)};
  LCD_WriteCommand(cmd, sizeof(cmd) - 1);
}

void LCD_setPower(uint8_t power)
{
 800f21a:	b580      	push	{r7, lr}
 800f21c:	b084      	sub	sp, #16
 800f21e:	af00      	add	r7, sp, #0
 800f220:	0002      	movs	r2, r0
 800f222:	1dfb      	adds	r3, r7, #7
 800f224:	701a      	strb	r2, [r3, #0]
  uint8_t cmd[] = {(power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */)};
 800f226:	1dfb      	adds	r3, r7, #7
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d001      	beq.n	800f232 <LCD_setPower+0x18>
 800f22e:	2229      	movs	r2, #41	@ 0x29
 800f230:	e000      	b.n	800f234 <LCD_setPower+0x1a>
 800f232:	2228      	movs	r2, #40	@ 0x28
 800f234:	210c      	movs	r1, #12
 800f236:	187b      	adds	r3, r7, r1
 800f238:	701a      	strb	r2, [r3, #0]
  LCD_WriteCommand(cmd, sizeof(cmd) - 1);
 800f23a:	187b      	adds	r3, r7, r1
 800f23c:	2100      	movs	r1, #0
 800f23e:	0018      	movs	r0, r3
 800f240:	f7ff fc9c 	bl	800eb7c <LCD_WriteCommand>
}
 800f244:	46c0      	nop			@ (mov r8, r8)
 800f246:	46bd      	mov	sp, r7
 800f248:	b004      	add	sp, #16
 800f24a:	bd80      	pop	{r7, pc}

0800f24c <LCD_Update>:

static void LCD_Update(void)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit); // Set SPI to 16 bit
#endif
  LCD_WriteData((uint8_t *)fb, LCD_WIDTH * LCD_HEIGHT);
#endif
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit); // Set SPI and DMA to 16 bit, enable memory increase
 800f250:	2100      	movs	r1, #0
 800f252:	2001      	movs	r0, #1
 800f254:	f7ff fbfe 	bl	800ea54 <setDMAMemMode>
#else
  setSPI_Size(mode_8bit); // Set SPI to 16 bit
#endif
}
 800f258:	46c0      	nop			@ (mov r8, r8)
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
	...

0800f260 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b082      	sub	sp, #8
 800f264:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  LCD_PIN(LCD_CS, SET);
 800f266:	4b2f      	ldr	r3, [pc, #188]	@ (800f324 <LCD_init+0xc4>)
 800f268:	2280      	movs	r2, #128	@ 0x80
 800f26a:	0152      	lsls	r2, r2, #5
 800f26c:	619a      	str	r2, [r3, #24]
#endif
#ifdef LCD_RST
  LCD_PIN(LCD_RST, RESET);
 800f26e:	4b2d      	ldr	r3, [pc, #180]	@ (800f324 <LCD_init+0xc4>)
 800f270:	2280      	movs	r2, #128	@ 0x80
 800f272:	0492      	lsls	r2, r2, #18
 800f274:	619a      	str	r2, [r3, #24]
  HAL_Delay(1);
 800f276:	2001      	movs	r0, #1
 800f278:	f7f5 f8cc 	bl	8004414 <HAL_Delay>
  LCD_PIN(LCD_RST, SET);
 800f27c:	4b29      	ldr	r3, [pc, #164]	@ (800f324 <LCD_init+0xc4>)
 800f27e:	2280      	movs	r2, #128	@ 0x80
 800f280:	0092      	lsls	r2, r2, #2
 800f282:	619a      	str	r2, [r3, #24]
  HAL_Delay(200);
 800f284:	20c8      	movs	r0, #200	@ 0xc8
 800f286:	f7f5 f8c5 	bl	8004414 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 800f28a:	4a27      	ldr	r2, [pc, #156]	@ (800f328 <LCD_init+0xc8>)
 800f28c:	4b27      	ldr	r3, [pc, #156]	@ (800f32c <LCD_init+0xcc>)
 800f28e:	0011      	movs	r1, r2
 800f290:	0018      	movs	r0, r3
 800f292:	f000 f86b 	bl	800f36c <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 800f296:	4b26      	ldr	r3, [pc, #152]	@ (800f330 <LCD_init+0xd0>)
 800f298:	0019      	movs	r1, r3
 800f29a:	2000      	movs	r0, #0
 800f29c:	f001 ff3a 	bl	8011114 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 800f2a0:	4b24      	ldr	r3, [pc, #144]	@ (800f334 <LCD_init+0xd4>)
 800f2a2:	0019      	movs	r1, r3
 800f2a4:	2001      	movs	r0, #1
 800f2a6:	f001 ff35 	bl	8011114 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 800f2aa:	4b23      	ldr	r3, [pc, #140]	@ (800f338 <LCD_init+0xd8>)
 800f2ac:	0019      	movs	r1, r3
 800f2ae:	2002      	movs	r0, #2
 800f2b0:	f001 ff30 	bl	8011114 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 800f2b4:	4b21      	ldr	r3, [pc, #132]	@ (800f33c <LCD_init+0xdc>)
 800f2b6:	0019      	movs	r1, r3
 800f2b8:	2003      	movs	r0, #3
 800f2ba:	f001 ff2b 	bl	8011114 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 800f2be:	2000      	movs	r0, #0
 800f2c0:	f000 fc18 	bl	800faf4 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 800f2c4:	2000      	movs	r0, #0
 800f2c6:	f000 fc29 	bl	800fb1c <UG_FontSetVSpace>
  for (uint16_t i = 0; i < sizeof(init_cmd);)
 800f2ca:	1dbb      	adds	r3, r7, #6
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	801a      	strh	r2, [r3, #0]
 800f2d0:	e017      	b.n	800f302 <LCD_init+0xa2>
  {
    LCD_WriteCommand((uint8_t *)&init_cmd[i + 1], init_cmd[i]);
 800f2d2:	1dbb      	adds	r3, r7, #6
 800f2d4:	881b      	ldrh	r3, [r3, #0]
 800f2d6:	1c5a      	adds	r2, r3, #1
 800f2d8:	4b19      	ldr	r3, [pc, #100]	@ (800f340 <LCD_init+0xe0>)
 800f2da:	18d0      	adds	r0, r2, r3
 800f2dc:	1dbb      	adds	r3, r7, #6
 800f2de:	881b      	ldrh	r3, [r3, #0]
 800f2e0:	4a17      	ldr	r2, [pc, #92]	@ (800f340 <LCD_init+0xe0>)
 800f2e2:	5cd3      	ldrb	r3, [r2, r3]
 800f2e4:	0019      	movs	r1, r3
 800f2e6:	f7ff fc49 	bl	800eb7c <LCD_WriteCommand>
    i += init_cmd[i] + 2;
 800f2ea:	1dbb      	adds	r3, r7, #6
 800f2ec:	881b      	ldrh	r3, [r3, #0]
 800f2ee:	4a14      	ldr	r2, [pc, #80]	@ (800f340 <LCD_init+0xe0>)
 800f2f0:	5cd3      	ldrb	r3, [r2, r3]
 800f2f2:	001a      	movs	r2, r3
 800f2f4:	1dbb      	adds	r3, r7, #6
 800f2f6:	881b      	ldrh	r3, [r3, #0]
 800f2f8:	18d3      	adds	r3, r2, r3
 800f2fa:	b29a      	uxth	r2, r3
 800f2fc:	1dbb      	adds	r3, r7, #6
 800f2fe:	3202      	adds	r2, #2
 800f300:	801a      	strh	r2, [r3, #0]
  for (uint16_t i = 0; i < sizeof(init_cmd);)
 800f302:	1dbb      	adds	r3, r7, #6
 800f304:	881b      	ldrh	r3, [r3, #0]
 800f306:	2b4b      	cmp	r3, #75	@ 0x4b
 800f308:	d9e3      	bls.n	800f2d2 <LCD_init+0x72>
  }
  UG_FillScreen(C_BLACK); //  Clear screen
 800f30a:	2000      	movs	r0, #0
 800f30c:	f000 f8e0 	bl	800f4d0 <UG_FillScreen>
  LCD_setPower(ENABLE);
 800f310:	2001      	movs	r0, #1
 800f312:	f7ff ff82 	bl	800f21a <LCD_setPower>
  UG_Update();
 800f316:	f001 ff23 	bl	8011160 <UG_Update>
}
 800f31a:	46c0      	nop			@ (mov r8, r8)
 800f31c:	46bd      	mov	sp, r7
 800f31e:	b002      	add	sp, #8
 800f320:	bd80      	pop	{r7, pc}
 800f322:	46c0      	nop			@ (mov r8, r8)
 800f324:	48000400 	.word	0x48000400
 800f328:	20000190 	.word	0x20000190
 800f32c:	20000bd0 	.word	0x20000bd0
 800f330:	0800f0f7 	.word	0x0800f0f7
 800f334:	0800ef99 	.word	0x0800ef99
 800f338:	0800ef1d 	.word	0x0800ef1d
 800f33c:	0800f023 	.word	0x0800f023
 800f340:	080168e0 	.word	0x080168e0

0800f344 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 800f344:	b580      	push	{r7, lr}
 800f346:	b082      	sub	sp, #8
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
  return ( ((UG_U16)p[0]<<8) | p[1]);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	781b      	ldrb	r3, [r3, #0]
 800f350:	021b      	lsls	r3, r3, #8
 800f352:	b21a      	sxth	r2, r3
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	3301      	adds	r3, #1
 800f358:	781b      	ldrb	r3, [r3, #0]
 800f35a:	b21b      	sxth	r3, r3
 800f35c:	4313      	orrs	r3, r2
 800f35e:	b21b      	sxth	r3, r3
 800f360:	b29b      	uxth	r3, r3
}
 800f362:	0018      	movs	r0, r3
 800f364:	46bd      	mov	sp, r7
 800f366:	b002      	add	sp, #8
 800f368:	bd80      	pop	{r7, pc}
	...

0800f36c <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b084      	sub	sp, #16
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	683a      	ldr	r2, [r7, #0]
 800f37a:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2204      	movs	r2, #4
 800f380:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2204      	movs	r2, #4
 800f386:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	2200      	movs	r2, #0
 800f38e:	5e9b      	ldrsh	r3, [r3, r2]
 800f390:	b29a      	uxth	r2, r3
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	211c      	movs	r1, #28
 800f396:	5e5b      	ldrsh	r3, [r3, r1]
 800f398:	b29b      	uxth	r3, r3
 800f39a:	1ad3      	subs	r3, r2, r3
 800f39c:	b29b      	uxth	r3, r3
 800f39e:	3b01      	subs	r3, #1
 800f3a0:	b29b      	uxth	r3, r3
 800f3a2:	b21a      	sxth	r2, r3
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	2202      	movs	r2, #2
 800f3ae:	5e9b      	ldrsh	r3, [r3, r2]
 800f3b0:	b29a      	uxth	r2, r3
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	211c      	movs	r1, #28
 800f3b6:	5e5b      	ldrsh	r3, [r3, r1]
 800f3b8:	b29b      	uxth	r3, r3
 800f3ba:	1ad3      	subs	r3, r2, r3
 800f3bc:	b29b      	uxth	r3, r3
 800f3be:	3b01      	subs	r3, #1
 800f3c0:	b29b      	uxth	r3, r3
 800f3c2:	b21a      	sxth	r2, r3
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	845a      	strh	r2, [r3, #34]	@ 0x22
   g->console.x_pos = g->console.x_end;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2220      	movs	r2, #32
 800f3cc:	5e9a      	ldrsh	r2, [r3, r2]
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2222      	movs	r2, #34	@ 0x22
 800f3d6:	5e9a      	ldrsh	r2, [r3, r2]
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2249      	movs	r2, #73	@ 0x49
 800f3e0:	2101      	movs	r1, #1
 800f3e2:	5499      	strb	r1, [r3, r2]
   g->char_v_space = 1;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	224a      	movs	r2, #74	@ 0x4a
 800f3e8:	2101      	movs	r1, #1
 800f3ea:	5499      	strb	r1, [r3, r2]
   g->font=NULL;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	629a      	str	r2, [r3, #40]	@ 0x28
   g->currentFont.bytes_per_char = 0;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	861a      	strh	r2, [r3, #48]	@ 0x30
   g->currentFont.char_height = 0;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	222f      	movs	r2, #47	@ 0x2f
 800f3fc:	2100      	movs	r1, #0
 800f3fe:	5499      	strb	r1, [r3, r2]
   g->currentFont.char_width = 0;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	222e      	movs	r2, #46	@ 0x2e
 800f404:	2100      	movs	r1, #0
 800f406:	5499      	strb	r1, [r3, r2]
   g->currentFont.number_of_chars = 0;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2200      	movs	r2, #0
 800f40c:	865a      	strh	r2, [r3, #50]	@ 0x32
   g->currentFont.offset_size = 0;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2200      	movs	r2, #0
 800f412:	869a      	strh	r2, [r3, #52]	@ 0x34
   g->currentFont.widths = NULL;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2200      	movs	r2, #0
 800f418:	639a      	str	r2, [r3, #56]	@ 0x38
   g->currentFont.offsets = NULL;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2200      	movs	r2, #0
 800f41e:	63da      	str	r2, [r3, #60]	@ 0x3c
   g->currentFont.data = NULL;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2200      	movs	r2, #0
 800f424:	641a      	str	r2, [r3, #64]	@ 0x40
   g->currentFont.font = NULL;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2200      	movs	r2, #0
 800f42a:	645a      	str	r2, [r3, #68]	@ 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2250      	movs	r2, #80	@ 0x50
 800f430:	491e      	ldr	r1, [pc, #120]	@ (800f4ac <UG_Init+0x140>)
 800f432:	5299      	strh	r1, [r3, r2]
   g->fore_color = C_WHITE;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	224c      	movs	r2, #76	@ 0x4c
 800f438:	2101      	movs	r1, #1
 800f43a:	4249      	negs	r1, r1
 800f43c:	5299      	strh	r1, [r3, r2]
   g->back_color = C_BLACK;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	224e      	movs	r2, #78	@ 0x4e
 800f442:	2100      	movs	r1, #0
 800f444:	5299      	strh	r1, [r3, r2]
   g->next_window = NULL;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2200      	movs	r2, #0
 800f44a:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2200      	movs	r2, #0
 800f450:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2200      	movs	r2, #0
 800f456:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800f458:	230f      	movs	r3, #15
 800f45a:	18fb      	adds	r3, r7, r3
 800f45c:	2200      	movs	r2, #0
 800f45e:	701a      	strb	r2, [r3, #0]
 800f460:	e017      	b.n	800f492 <UG_Init+0x126>
   {
      g->driver[i].driver = NULL;
 800f462:	210f      	movs	r1, #15
 800f464:	187b      	adds	r3, r7, r1
 800f466:	781b      	ldrb	r3, [r3, #0]
 800f468:	687a      	ldr	r2, [r7, #4]
 800f46a:	330a      	adds	r3, #10
 800f46c:	00db      	lsls	r3, r3, #3
 800f46e:	18d3      	adds	r3, r2, r3
 800f470:	3304      	adds	r3, #4
 800f472:	2200      	movs	r2, #0
 800f474:	601a      	str	r2, [r3, #0]
      g->driver[i].state = 0;
 800f476:	187b      	adds	r3, r7, r1
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	687a      	ldr	r2, [r7, #4]
 800f47c:	330a      	adds	r3, #10
 800f47e:	00db      	lsls	r3, r3, #3
 800f480:	18d3      	adds	r3, r2, r3
 800f482:	3308      	adds	r3, #8
 800f484:	2200      	movs	r2, #0
 800f486:	701a      	strb	r2, [r3, #0]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800f488:	187b      	adds	r3, r7, r1
 800f48a:	781a      	ldrb	r2, [r3, #0]
 800f48c:	187b      	adds	r3, r7, r1
 800f48e:	3201      	adds	r2, #1
 800f490:	701a      	strb	r2, [r3, #0]
 800f492:	230f      	movs	r3, #15
 800f494:	18fb      	adds	r3, r7, r3
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	2b03      	cmp	r3, #3
 800f49a:	d9e2      	bls.n	800f462 <UG_Init+0xf6>
   }

   gui = g;
 800f49c:	4b04      	ldr	r3, [pc, #16]	@ (800f4b0 <UG_Init+0x144>)
 800f49e:	687a      	ldr	r2, [r7, #4]
 800f4a0:	601a      	str	r2, [r3, #0]
   return 1;
 800f4a2:	2301      	movs	r3, #1
}
 800f4a4:	0018      	movs	r0, r3
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	b004      	add	sp, #16
 800f4aa:	bd80      	pop	{r7, pc}
 800f4ac:	00005c5d 	.word	0x00005c5d
 800f4b0:	20000c44 	.word	0x20000c44

0800f4b4 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b082      	sub	sp, #8
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
  gui->font = font;
 800f4bc:	4b03      	ldr	r3, [pc, #12]	@ (800f4cc <UG_FontSelect+0x18>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	687a      	ldr	r2, [r7, #4]
 800f4c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800f4c4:	46c0      	nop			@ (mov r8, r8)
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	b002      	add	sp, #8
 800f4ca:	bd80      	pop	{r7, pc}
 800f4cc:	20000c44 	.word	0x20000c44

0800f4d0 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b084      	sub	sp, #16
 800f4d4:	af02      	add	r7, sp, #8
 800f4d6:	0002      	movs	r2, r0
 800f4d8:	1dbb      	adds	r3, r7, #6
 800f4da:	801a      	strh	r2, [r3, #0]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 800f4dc:	4b0e      	ldr	r3, [pc, #56]	@ (800f518 <UG_FillScreen+0x48>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	5e9b      	ldrsh	r3, [r3, r2]
 800f4e6:	b29b      	uxth	r3, r3
 800f4e8:	3b01      	subs	r3, #1
 800f4ea:	b29b      	uxth	r3, r3
 800f4ec:	b21a      	sxth	r2, r3
 800f4ee:	4b0a      	ldr	r3, [pc, #40]	@ (800f518 <UG_FillScreen+0x48>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	2102      	movs	r1, #2
 800f4f6:	5e5b      	ldrsh	r3, [r3, r1]
 800f4f8:	b29b      	uxth	r3, r3
 800f4fa:	3b01      	subs	r3, #1
 800f4fc:	b29b      	uxth	r3, r3
 800f4fe:	b219      	sxth	r1, r3
 800f500:	1dbb      	adds	r3, r7, #6
 800f502:	881b      	ldrh	r3, [r3, #0]
 800f504:	9300      	str	r3, [sp, #0]
 800f506:	000b      	movs	r3, r1
 800f508:	2100      	movs	r1, #0
 800f50a:	2000      	movs	r0, #0
 800f50c:	f000 f806 	bl	800f51c <UG_FillFrame>
}
 800f510:	46c0      	nop			@ (mov r8, r8)
 800f512:	46bd      	mov	sp, r7
 800f514:	b002      	add	sp, #8
 800f516:	bd80      	pop	{r7, pc}
 800f518:	20000c44 	.word	0x20000c44

0800f51c <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800f51c:	b5b0      	push	{r4, r5, r7, lr}
 800f51e:	b086      	sub	sp, #24
 800f520:	af02      	add	r7, sp, #8
 800f522:	0005      	movs	r5, r0
 800f524:	000c      	movs	r4, r1
 800f526:	0010      	movs	r0, r2
 800f528:	0019      	movs	r1, r3
 800f52a:	1dbb      	adds	r3, r7, #6
 800f52c:	1c2a      	adds	r2, r5, #0
 800f52e:	801a      	strh	r2, [r3, #0]
 800f530:	1d3b      	adds	r3, r7, #4
 800f532:	1c22      	adds	r2, r4, #0
 800f534:	801a      	strh	r2, [r3, #0]
 800f536:	1cbb      	adds	r3, r7, #2
 800f538:	1c02      	adds	r2, r0, #0
 800f53a:	801a      	strh	r2, [r3, #0]
 800f53c:	003b      	movs	r3, r7
 800f53e:	1c0a      	adds	r2, r1, #0
 800f540:	801a      	strh	r2, [r3, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 800f542:	1cba      	adds	r2, r7, #2
 800f544:	1dbb      	adds	r3, r7, #6
 800f546:	2100      	movs	r1, #0
 800f548:	5e52      	ldrsh	r2, [r2, r1]
 800f54a:	2100      	movs	r1, #0
 800f54c:	5e5b      	ldrsh	r3, [r3, r1]
 800f54e:	429a      	cmp	r2, r3
 800f550:	da0c      	bge.n	800f56c <UG_FillFrame+0x50>
     swap(x1,x2);
 800f552:	210a      	movs	r1, #10
 800f554:	187b      	adds	r3, r7, r1
 800f556:	1dba      	adds	r2, r7, #6
 800f558:	8812      	ldrh	r2, [r2, #0]
 800f55a:	801a      	strh	r2, [r3, #0]
 800f55c:	1dbb      	adds	r3, r7, #6
 800f55e:	1cba      	adds	r2, r7, #2
 800f560:	8812      	ldrh	r2, [r2, #0]
 800f562:	801a      	strh	r2, [r3, #0]
 800f564:	1cbb      	adds	r3, r7, #2
 800f566:	187a      	adds	r2, r7, r1
 800f568:	8812      	ldrh	r2, [r2, #0]
 800f56a:	801a      	strh	r2, [r3, #0]
   if ( y2 < y1 )
 800f56c:	003a      	movs	r2, r7
 800f56e:	1d3b      	adds	r3, r7, #4
 800f570:	2100      	movs	r1, #0
 800f572:	5e52      	ldrsh	r2, [r2, r1]
 800f574:	2100      	movs	r1, #0
 800f576:	5e5b      	ldrsh	r3, [r3, r1]
 800f578:	429a      	cmp	r2, r3
 800f57a:	da0c      	bge.n	800f596 <UG_FillFrame+0x7a>
     swap(y1,y2);
 800f57c:	2108      	movs	r1, #8
 800f57e:	187b      	adds	r3, r7, r1
 800f580:	1d3a      	adds	r2, r7, #4
 800f582:	8812      	ldrh	r2, [r2, #0]
 800f584:	801a      	strh	r2, [r3, #0]
 800f586:	1d3b      	adds	r3, r7, #4
 800f588:	003a      	movs	r2, r7
 800f58a:	8812      	ldrh	r2, [r2, #0]
 800f58c:	801a      	strh	r2, [r3, #0]
 800f58e:	003b      	movs	r3, r7
 800f590:	187a      	adds	r2, r7, r1
 800f592:	8812      	ldrh	r2, [r2, #0]
 800f594:	801a      	strh	r2, [r3, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 800f596:	4b33      	ldr	r3, [pc, #204]	@ (800f664 <UG_FillFrame+0x148>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	2260      	movs	r2, #96	@ 0x60
 800f59c:	5c9b      	ldrb	r3, [r3, r2]
 800f59e:	001a      	movs	r2, r3
 800f5a0:	2302      	movs	r3, #2
 800f5a2:	4013      	ands	r3, r2
 800f5a4:	d017      	beq.n	800f5d6 <UG_FillFrame+0xba>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800f5a6:	4b2f      	ldr	r3, [pc, #188]	@ (800f664 <UG_FillFrame+0x148>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f5ac:	001d      	movs	r5, r3
 800f5ae:	003b      	movs	r3, r7
 800f5b0:	2400      	movs	r4, #0
 800f5b2:	5f1c      	ldrsh	r4, [r3, r4]
 800f5b4:	1cbb      	adds	r3, r7, #2
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	5e9a      	ldrsh	r2, [r3, r2]
 800f5ba:	1d3b      	adds	r3, r7, #4
 800f5bc:	2100      	movs	r1, #0
 800f5be:	5e59      	ldrsh	r1, [r3, r1]
 800f5c0:	1dbb      	adds	r3, r7, #6
 800f5c2:	2000      	movs	r0, #0
 800f5c4:	5e18      	ldrsh	r0, [r3, r0]
 800f5c6:	2320      	movs	r3, #32
 800f5c8:	18fb      	adds	r3, r7, r3
 800f5ca:	881b      	ldrh	r3, [r3, #0]
 800f5cc:	9300      	str	r3, [sp, #0]
 800f5ce:	0023      	movs	r3, r4
 800f5d0:	47a8      	blx	r5
 800f5d2:	1e03      	subs	r3, r0, #0
 800f5d4:	d041      	beq.n	800f65a <UG_FillFrame+0x13e>
   }

   for( m=y1; m<=y2; m++ )
 800f5d6:	230c      	movs	r3, #12
 800f5d8:	18fb      	adds	r3, r7, r3
 800f5da:	1d3a      	adds	r2, r7, #4
 800f5dc:	8812      	ldrh	r2, [r2, #0]
 800f5de:	801a      	strh	r2, [r3, #0]
 800f5e0:	e031      	b.n	800f646 <UG_FillFrame+0x12a>
   {
      for( n=x1; n<=x2; n++ )
 800f5e2:	230e      	movs	r3, #14
 800f5e4:	18fb      	adds	r3, r7, r3
 800f5e6:	1dba      	adds	r2, r7, #6
 800f5e8:	8812      	ldrh	r2, [r2, #0]
 800f5ea:	801a      	strh	r2, [r3, #0]
 800f5ec:	e019      	b.n	800f622 <UG_FillFrame+0x106>
      {
         gui->device->pset(n,m,c);
 800f5ee:	4b1d      	ldr	r3, [pc, #116]	@ (800f664 <UG_FillFrame+0x148>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	685c      	ldr	r4, [r3, #4]
 800f5f6:	2320      	movs	r3, #32
 800f5f8:	18fb      	adds	r3, r7, r3
 800f5fa:	881a      	ldrh	r2, [r3, #0]
 800f5fc:	230c      	movs	r3, #12
 800f5fe:	18fb      	adds	r3, r7, r3
 800f600:	2100      	movs	r1, #0
 800f602:	5e59      	ldrsh	r1, [r3, r1]
 800f604:	250e      	movs	r5, #14
 800f606:	197b      	adds	r3, r7, r5
 800f608:	2000      	movs	r0, #0
 800f60a:	5e1b      	ldrsh	r3, [r3, r0]
 800f60c:	0018      	movs	r0, r3
 800f60e:	47a0      	blx	r4
      for( n=x1; n<=x2; n++ )
 800f610:	0029      	movs	r1, r5
 800f612:	187b      	adds	r3, r7, r1
 800f614:	2200      	movs	r2, #0
 800f616:	5e9b      	ldrsh	r3, [r3, r2]
 800f618:	b29b      	uxth	r3, r3
 800f61a:	3301      	adds	r3, #1
 800f61c:	b29a      	uxth	r2, r3
 800f61e:	187b      	adds	r3, r7, r1
 800f620:	801a      	strh	r2, [r3, #0]
 800f622:	230e      	movs	r3, #14
 800f624:	18fa      	adds	r2, r7, r3
 800f626:	1cbb      	adds	r3, r7, #2
 800f628:	2100      	movs	r1, #0
 800f62a:	5e52      	ldrsh	r2, [r2, r1]
 800f62c:	2100      	movs	r1, #0
 800f62e:	5e5b      	ldrsh	r3, [r3, r1]
 800f630:	429a      	cmp	r2, r3
 800f632:	dddc      	ble.n	800f5ee <UG_FillFrame+0xd2>
   for( m=y1; m<=y2; m++ )
 800f634:	210c      	movs	r1, #12
 800f636:	187b      	adds	r3, r7, r1
 800f638:	2200      	movs	r2, #0
 800f63a:	5e9b      	ldrsh	r3, [r3, r2]
 800f63c:	b29b      	uxth	r3, r3
 800f63e:	3301      	adds	r3, #1
 800f640:	b29a      	uxth	r2, r3
 800f642:	187b      	adds	r3, r7, r1
 800f644:	801a      	strh	r2, [r3, #0]
 800f646:	230c      	movs	r3, #12
 800f648:	18fa      	adds	r2, r7, r3
 800f64a:	003b      	movs	r3, r7
 800f64c:	2100      	movs	r1, #0
 800f64e:	5e52      	ldrsh	r2, [r2, r1]
 800f650:	2100      	movs	r1, #0
 800f652:	5e5b      	ldrsh	r3, [r3, r1]
 800f654:	429a      	cmp	r2, r3
 800f656:	ddc4      	ble.n	800f5e2 <UG_FillFrame+0xc6>
 800f658:	e000      	b.n	800f65c <UG_FillFrame+0x140>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800f65a:	46c0      	nop			@ (mov r8, r8)
      }
   }
}
 800f65c:	46bd      	mov	sp, r7
 800f65e:	b004      	add	sp, #16
 800f660:	bdb0      	pop	{r4, r5, r7, pc}
 800f662:	46c0      	nop			@ (mov r8, r8)
 800f664:	20000c44 	.word	0x20000c44

0800f668 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800f668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f66a:	b08b      	sub	sp, #44	@ 0x2c
 800f66c:	af02      	add	r7, sp, #8
 800f66e:	0005      	movs	r5, r0
 800f670:	000c      	movs	r4, r1
 800f672:	0010      	movs	r0, r2
 800f674:	0019      	movs	r1, r3
 800f676:	1dbb      	adds	r3, r7, #6
 800f678:	1c2a      	adds	r2, r5, #0
 800f67a:	801a      	strh	r2, [r3, #0]
 800f67c:	1d3b      	adds	r3, r7, #4
 800f67e:	1c22      	adds	r2, r4, #0
 800f680:	801a      	strh	r2, [r3, #0]
 800f682:	1cbb      	adds	r3, r7, #2
 800f684:	1c02      	adds	r2, r0, #0
 800f686:	801a      	strh	r2, [r3, #0]
 800f688:	003b      	movs	r3, r7
 800f68a:	1c0a      	adds	r2, r1, #0
 800f68c:	801a      	strh	r2, [r3, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 800f68e:	4ba6      	ldr	r3, [pc, #664]	@ (800f928 <UG_DrawLine+0x2c0>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	2258      	movs	r2, #88	@ 0x58
 800f694:	5c9b      	ldrb	r3, [r3, r2]
 800f696:	001a      	movs	r2, r3
 800f698:	2302      	movs	r3, #2
 800f69a:	4013      	ands	r3, r2
 800f69c:	d01a      	beq.n	800f6d4 <UG_DrawLine+0x6c>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800f69e:	4ba2      	ldr	r3, [pc, #648]	@ (800f928 <UG_DrawLine+0x2c0>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f6a4:	001d      	movs	r5, r3
 800f6a6:	003b      	movs	r3, r7
 800f6a8:	2400      	movs	r4, #0
 800f6aa:	5f1c      	ldrsh	r4, [r3, r4]
 800f6ac:	1cbb      	adds	r3, r7, #2
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	5e9a      	ldrsh	r2, [r3, r2]
 800f6b2:	1d3b      	adds	r3, r7, #4
 800f6b4:	2100      	movs	r1, #0
 800f6b6:	5e59      	ldrsh	r1, [r3, r1]
 800f6b8:	1dbb      	adds	r3, r7, #6
 800f6ba:	2000      	movs	r0, #0
 800f6bc:	5e18      	ldrsh	r0, [r3, r0]
 800f6be:	2330      	movs	r3, #48	@ 0x30
 800f6c0:	2608      	movs	r6, #8
 800f6c2:	199b      	adds	r3, r3, r6
 800f6c4:	19db      	adds	r3, r3, r7
 800f6c6:	881b      	ldrh	r3, [r3, #0]
 800f6c8:	9300      	str	r3, [sp, #0]
 800f6ca:	0023      	movs	r3, r4
 800f6cc:	47a8      	blx	r5
 800f6ce:	1e03      	subs	r3, r0, #0
 800f6d0:	d100      	bne.n	800f6d4 <UG_DrawLine+0x6c>
 800f6d2:	e125      	b.n	800f920 <UG_DrawLine+0x2b8>
   }

   dx = x2 - x1;
 800f6d4:	1cbb      	adds	r3, r7, #2
 800f6d6:	881a      	ldrh	r2, [r3, #0]
 800f6d8:	1dbb      	adds	r3, r7, #6
 800f6da:	881b      	ldrh	r3, [r3, #0]
 800f6dc:	1ad3      	subs	r3, r2, r3
 800f6de:	b29a      	uxth	r2, r3
 800f6e0:	2114      	movs	r1, #20
 800f6e2:	187b      	adds	r3, r7, r1
 800f6e4:	801a      	strh	r2, [r3, #0]
   dy = y2 - y1;
 800f6e6:	003b      	movs	r3, r7
 800f6e8:	881a      	ldrh	r2, [r3, #0]
 800f6ea:	1d3b      	adds	r3, r7, #4
 800f6ec:	881b      	ldrh	r3, [r3, #0]
 800f6ee:	1ad3      	subs	r3, r2, r3
 800f6f0:	b29a      	uxth	r2, r3
 800f6f2:	2012      	movs	r0, #18
 800f6f4:	183b      	adds	r3, r7, r0
 800f6f6:	801a      	strh	r2, [r3, #0]
   dxabs = (dx>0)?dx:-dx;
 800f6f8:	187b      	adds	r3, r7, r1
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	5e9b      	ldrsh	r3, [r3, r2]
 800f6fe:	17da      	asrs	r2, r3, #31
 800f700:	189b      	adds	r3, r3, r2
 800f702:	4053      	eors	r3, r2
 800f704:	b29a      	uxth	r2, r3
 800f706:	2310      	movs	r3, #16
 800f708:	18fb      	adds	r3, r7, r3
 800f70a:	801a      	strh	r2, [r3, #0]
   dyabs = (dy>0)?dy:-dy;
 800f70c:	183b      	adds	r3, r7, r0
 800f70e:	2200      	movs	r2, #0
 800f710:	5e9b      	ldrsh	r3, [r3, r2]
 800f712:	17da      	asrs	r2, r3, #31
 800f714:	189b      	adds	r3, r3, r2
 800f716:	4053      	eors	r3, r2
 800f718:	b29a      	uxth	r2, r3
 800f71a:	230e      	movs	r3, #14
 800f71c:	18fb      	adds	r3, r7, r3
 800f71e:	801a      	strh	r2, [r3, #0]
   sgndx = (dx>0)?1:-1;
 800f720:	187b      	adds	r3, r7, r1
 800f722:	2200      	movs	r2, #0
 800f724:	5e9b      	ldrsh	r3, [r3, r2]
 800f726:	2b00      	cmp	r3, #0
 800f728:	dd01      	ble.n	800f72e <UG_DrawLine+0xc6>
 800f72a:	2201      	movs	r2, #1
 800f72c:	e001      	b.n	800f732 <UG_DrawLine+0xca>
 800f72e:	2301      	movs	r3, #1
 800f730:	425a      	negs	r2, r3
 800f732:	230c      	movs	r3, #12
 800f734:	18fb      	adds	r3, r7, r3
 800f736:	801a      	strh	r2, [r3, #0]
   sgndy = (dy>0)?1:-1;
 800f738:	2312      	movs	r3, #18
 800f73a:	18fb      	adds	r3, r7, r3
 800f73c:	2200      	movs	r2, #0
 800f73e:	5e9b      	ldrsh	r3, [r3, r2]
 800f740:	2b00      	cmp	r3, #0
 800f742:	dd01      	ble.n	800f748 <UG_DrawLine+0xe0>
 800f744:	2201      	movs	r2, #1
 800f746:	e001      	b.n	800f74c <UG_DrawLine+0xe4>
 800f748:	2301      	movs	r3, #1
 800f74a:	425a      	negs	r2, r3
 800f74c:	230a      	movs	r3, #10
 800f74e:	18fb      	adds	r3, r7, r3
 800f750:	801a      	strh	r2, [r3, #0]
   x = dyabs >> 1;
 800f752:	231c      	movs	r3, #28
 800f754:	18fb      	adds	r3, r7, r3
 800f756:	250e      	movs	r5, #14
 800f758:	197a      	adds	r2, r7, r5
 800f75a:	2100      	movs	r1, #0
 800f75c:	5e52      	ldrsh	r2, [r2, r1]
 800f75e:	1052      	asrs	r2, r2, #1
 800f760:	801a      	strh	r2, [r3, #0]
   y = dxabs >> 1;
 800f762:	231a      	movs	r3, #26
 800f764:	18fb      	adds	r3, r7, r3
 800f766:	2610      	movs	r6, #16
 800f768:	19ba      	adds	r2, r7, r6
 800f76a:	2100      	movs	r1, #0
 800f76c:	5e52      	ldrsh	r2, [r2, r1]
 800f76e:	1052      	asrs	r2, r2, #1
 800f770:	801a      	strh	r2, [r3, #0]
   drawx = x1;
 800f772:	2018      	movs	r0, #24
 800f774:	183b      	adds	r3, r7, r0
 800f776:	1dba      	adds	r2, r7, #6
 800f778:	8812      	ldrh	r2, [r2, #0]
 800f77a:	801a      	strh	r2, [r3, #0]
   drawy = y1;
 800f77c:	2116      	movs	r1, #22
 800f77e:	187b      	adds	r3, r7, r1
 800f780:	1d3a      	adds	r2, r7, #4
 800f782:	8812      	ldrh	r2, [r2, #0]
 800f784:	801a      	strh	r2, [r3, #0]

   gui->device->pset(drawx, drawy,c);
 800f786:	4b68      	ldr	r3, [pc, #416]	@ (800f928 <UG_DrawLine+0x2c0>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	685c      	ldr	r4, [r3, #4]
 800f78e:	2330      	movs	r3, #48	@ 0x30
 800f790:	2208      	movs	r2, #8
 800f792:	189b      	adds	r3, r3, r2
 800f794:	19db      	adds	r3, r3, r7
 800f796:	881a      	ldrh	r2, [r3, #0]
 800f798:	187b      	adds	r3, r7, r1
 800f79a:	2100      	movs	r1, #0
 800f79c:	5e59      	ldrsh	r1, [r3, r1]
 800f79e:	183b      	adds	r3, r7, r0
 800f7a0:	2000      	movs	r0, #0
 800f7a2:	5e1b      	ldrsh	r3, [r3, r0]
 800f7a4:	0018      	movs	r0, r3
 800f7a6:	47a0      	blx	r4

   if( dxabs >= dyabs )
 800f7a8:	19ba      	adds	r2, r7, r6
 800f7aa:	197b      	adds	r3, r7, r5
 800f7ac:	2100      	movs	r1, #0
 800f7ae:	5e52      	ldrsh	r2, [r2, r1]
 800f7b0:	2100      	movs	r1, #0
 800f7b2:	5e5b      	ldrsh	r3, [r3, r1]
 800f7b4:	429a      	cmp	r2, r3
 800f7b6:	db59      	blt.n	800f86c <UG_DrawLine+0x204>
   {
      for( n=0; n<dxabs; n++ )
 800f7b8:	231e      	movs	r3, #30
 800f7ba:	18fb      	adds	r3, r7, r3
 800f7bc:	2200      	movs	r2, #0
 800f7be:	801a      	strh	r2, [r3, #0]
 800f7c0:	e049      	b.n	800f856 <UG_DrawLine+0x1ee>
      {
         y += dyabs;
 800f7c2:	211a      	movs	r1, #26
 800f7c4:	187b      	adds	r3, r7, r1
 800f7c6:	881a      	ldrh	r2, [r3, #0]
 800f7c8:	230e      	movs	r3, #14
 800f7ca:	18fb      	adds	r3, r7, r3
 800f7cc:	881b      	ldrh	r3, [r3, #0]
 800f7ce:	18d3      	adds	r3, r2, r3
 800f7d0:	b29a      	uxth	r2, r3
 800f7d2:	187b      	adds	r3, r7, r1
 800f7d4:	801a      	strh	r2, [r3, #0]
         if( y >= dxabs )
 800f7d6:	187a      	adds	r2, r7, r1
 800f7d8:	2010      	movs	r0, #16
 800f7da:	183b      	adds	r3, r7, r0
 800f7dc:	2400      	movs	r4, #0
 800f7de:	5f12      	ldrsh	r2, [r2, r4]
 800f7e0:	2400      	movs	r4, #0
 800f7e2:	5f1b      	ldrsh	r3, [r3, r4]
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	db11      	blt.n	800f80c <UG_DrawLine+0x1a4>
         {
            y -= dxabs;
 800f7e8:	187b      	adds	r3, r7, r1
 800f7ea:	881a      	ldrh	r2, [r3, #0]
 800f7ec:	183b      	adds	r3, r7, r0
 800f7ee:	881b      	ldrh	r3, [r3, #0]
 800f7f0:	1ad3      	subs	r3, r2, r3
 800f7f2:	b29a      	uxth	r2, r3
 800f7f4:	187b      	adds	r3, r7, r1
 800f7f6:	801a      	strh	r2, [r3, #0]
            drawy += sgndy;
 800f7f8:	2116      	movs	r1, #22
 800f7fa:	187b      	adds	r3, r7, r1
 800f7fc:	881a      	ldrh	r2, [r3, #0]
 800f7fe:	230a      	movs	r3, #10
 800f800:	18fb      	adds	r3, r7, r3
 800f802:	881b      	ldrh	r3, [r3, #0]
 800f804:	18d3      	adds	r3, r2, r3
 800f806:	b29a      	uxth	r2, r3
 800f808:	187b      	adds	r3, r7, r1
 800f80a:	801a      	strh	r2, [r3, #0]
         }
         drawx += sgndx;
 800f80c:	2018      	movs	r0, #24
 800f80e:	183b      	adds	r3, r7, r0
 800f810:	881a      	ldrh	r2, [r3, #0]
 800f812:	230c      	movs	r3, #12
 800f814:	18fb      	adds	r3, r7, r3
 800f816:	881b      	ldrh	r3, [r3, #0]
 800f818:	18d3      	adds	r3, r2, r3
 800f81a:	b29a      	uxth	r2, r3
 800f81c:	183b      	adds	r3, r7, r0
 800f81e:	801a      	strh	r2, [r3, #0]
         gui->device->pset(drawx, drawy,c);
 800f820:	4b41      	ldr	r3, [pc, #260]	@ (800f928 <UG_DrawLine+0x2c0>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	685c      	ldr	r4, [r3, #4]
 800f828:	2330      	movs	r3, #48	@ 0x30
 800f82a:	2208      	movs	r2, #8
 800f82c:	189b      	adds	r3, r3, r2
 800f82e:	19db      	adds	r3, r3, r7
 800f830:	881a      	ldrh	r2, [r3, #0]
 800f832:	2316      	movs	r3, #22
 800f834:	18fb      	adds	r3, r7, r3
 800f836:	2100      	movs	r1, #0
 800f838:	5e59      	ldrsh	r1, [r3, r1]
 800f83a:	183b      	adds	r3, r7, r0
 800f83c:	2000      	movs	r0, #0
 800f83e:	5e1b      	ldrsh	r3, [r3, r0]
 800f840:	0018      	movs	r0, r3
 800f842:	47a0      	blx	r4
      for( n=0; n<dxabs; n++ )
 800f844:	211e      	movs	r1, #30
 800f846:	187b      	adds	r3, r7, r1
 800f848:	2200      	movs	r2, #0
 800f84a:	5e9b      	ldrsh	r3, [r3, r2]
 800f84c:	b29b      	uxth	r3, r3
 800f84e:	3301      	adds	r3, #1
 800f850:	b29a      	uxth	r2, r3
 800f852:	187b      	adds	r3, r7, r1
 800f854:	801a      	strh	r2, [r3, #0]
 800f856:	231e      	movs	r3, #30
 800f858:	18fa      	adds	r2, r7, r3
 800f85a:	2310      	movs	r3, #16
 800f85c:	18fb      	adds	r3, r7, r3
 800f85e:	2100      	movs	r1, #0
 800f860:	5e52      	ldrsh	r2, [r2, r1]
 800f862:	2100      	movs	r1, #0
 800f864:	5e5b      	ldrsh	r3, [r3, r1]
 800f866:	429a      	cmp	r2, r3
 800f868:	dbab      	blt.n	800f7c2 <UG_DrawLine+0x15a>
 800f86a:	e05a      	b.n	800f922 <UG_DrawLine+0x2ba>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 800f86c:	231e      	movs	r3, #30
 800f86e:	18fb      	adds	r3, r7, r3
 800f870:	2200      	movs	r2, #0
 800f872:	801a      	strh	r2, [r3, #0]
 800f874:	e049      	b.n	800f90a <UG_DrawLine+0x2a2>
      {
         x += dxabs;
 800f876:	211c      	movs	r1, #28
 800f878:	187b      	adds	r3, r7, r1
 800f87a:	881a      	ldrh	r2, [r3, #0]
 800f87c:	2310      	movs	r3, #16
 800f87e:	18fb      	adds	r3, r7, r3
 800f880:	881b      	ldrh	r3, [r3, #0]
 800f882:	18d3      	adds	r3, r2, r3
 800f884:	b29a      	uxth	r2, r3
 800f886:	187b      	adds	r3, r7, r1
 800f888:	801a      	strh	r2, [r3, #0]
         if( x >= dyabs )
 800f88a:	187a      	adds	r2, r7, r1
 800f88c:	200e      	movs	r0, #14
 800f88e:	183b      	adds	r3, r7, r0
 800f890:	2400      	movs	r4, #0
 800f892:	5f12      	ldrsh	r2, [r2, r4]
 800f894:	2400      	movs	r4, #0
 800f896:	5f1b      	ldrsh	r3, [r3, r4]
 800f898:	429a      	cmp	r2, r3
 800f89a:	db11      	blt.n	800f8c0 <UG_DrawLine+0x258>
         {
            x -= dyabs;
 800f89c:	187b      	adds	r3, r7, r1
 800f89e:	881a      	ldrh	r2, [r3, #0]
 800f8a0:	183b      	adds	r3, r7, r0
 800f8a2:	881b      	ldrh	r3, [r3, #0]
 800f8a4:	1ad3      	subs	r3, r2, r3
 800f8a6:	b29a      	uxth	r2, r3
 800f8a8:	187b      	adds	r3, r7, r1
 800f8aa:	801a      	strh	r2, [r3, #0]
            drawx += sgndx;
 800f8ac:	2118      	movs	r1, #24
 800f8ae:	187b      	adds	r3, r7, r1
 800f8b0:	881a      	ldrh	r2, [r3, #0]
 800f8b2:	230c      	movs	r3, #12
 800f8b4:	18fb      	adds	r3, r7, r3
 800f8b6:	881b      	ldrh	r3, [r3, #0]
 800f8b8:	18d3      	adds	r3, r2, r3
 800f8ba:	b29a      	uxth	r2, r3
 800f8bc:	187b      	adds	r3, r7, r1
 800f8be:	801a      	strh	r2, [r3, #0]
         }
         drawy += sgndy;
 800f8c0:	2116      	movs	r1, #22
 800f8c2:	187b      	adds	r3, r7, r1
 800f8c4:	881a      	ldrh	r2, [r3, #0]
 800f8c6:	230a      	movs	r3, #10
 800f8c8:	18fb      	adds	r3, r7, r3
 800f8ca:	881b      	ldrh	r3, [r3, #0]
 800f8cc:	18d3      	adds	r3, r2, r3
 800f8ce:	b29a      	uxth	r2, r3
 800f8d0:	187b      	adds	r3, r7, r1
 800f8d2:	801a      	strh	r2, [r3, #0]
         gui->device->pset(drawx, drawy,c);
 800f8d4:	4b14      	ldr	r3, [pc, #80]	@ (800f928 <UG_DrawLine+0x2c0>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	685c      	ldr	r4, [r3, #4]
 800f8dc:	2330      	movs	r3, #48	@ 0x30
 800f8de:	2208      	movs	r2, #8
 800f8e0:	189b      	adds	r3, r3, r2
 800f8e2:	19db      	adds	r3, r3, r7
 800f8e4:	881a      	ldrh	r2, [r3, #0]
 800f8e6:	187b      	adds	r3, r7, r1
 800f8e8:	2100      	movs	r1, #0
 800f8ea:	5e59      	ldrsh	r1, [r3, r1]
 800f8ec:	2318      	movs	r3, #24
 800f8ee:	18fb      	adds	r3, r7, r3
 800f8f0:	2000      	movs	r0, #0
 800f8f2:	5e1b      	ldrsh	r3, [r3, r0]
 800f8f4:	0018      	movs	r0, r3
 800f8f6:	47a0      	blx	r4
      for( n=0; n<dyabs; n++ )
 800f8f8:	211e      	movs	r1, #30
 800f8fa:	187b      	adds	r3, r7, r1
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	5e9b      	ldrsh	r3, [r3, r2]
 800f900:	b29b      	uxth	r3, r3
 800f902:	3301      	adds	r3, #1
 800f904:	b29a      	uxth	r2, r3
 800f906:	187b      	adds	r3, r7, r1
 800f908:	801a      	strh	r2, [r3, #0]
 800f90a:	231e      	movs	r3, #30
 800f90c:	18fa      	adds	r2, r7, r3
 800f90e:	230e      	movs	r3, #14
 800f910:	18fb      	adds	r3, r7, r3
 800f912:	2100      	movs	r1, #0
 800f914:	5e52      	ldrsh	r2, [r2, r1]
 800f916:	2100      	movs	r1, #0
 800f918:	5e5b      	ldrsh	r3, [r3, r1]
 800f91a:	429a      	cmp	r2, r3
 800f91c:	dbab      	blt.n	800f876 <UG_DrawLine+0x20e>
 800f91e:	e000      	b.n	800f922 <UG_DrawLine+0x2ba>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800f920:	46c0      	nop			@ (mov r8, r8)
      }
   }  
}
 800f922:	46bd      	mov	sp, r7
 800f924:	b009      	add	sp, #36	@ 0x24
 800f926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f928:	20000c44 	.word	0x20000c44

0800f92c <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 800f92c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f92e:	b087      	sub	sp, #28
 800f930:	af02      	add	r7, sp, #8
 800f932:	603a      	str	r2, [r7, #0]
 800f934:	1dbb      	adds	r3, r7, #6
 800f936:	1c02      	adds	r2, r0, #0
 800f938:	801a      	strh	r2, [r3, #0]
 800f93a:	1d3b      	adds	r3, r7, #4
 800f93c:	1c0a      	adds	r2, r1, #0
 800f93e:	801a      	strh	r2, [r3, #0]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 800f940:	230e      	movs	r3, #14
 800f942:	18fb      	adds	r3, r7, r3
 800f944:	1dba      	adds	r2, r7, #6
 800f946:	8812      	ldrh	r2, [r2, #0]
 800f948:	801a      	strh	r2, [r3, #0]
   yp=y;
 800f94a:	230c      	movs	r3, #12
 800f94c:	18fb      	adds	r3, r7, r3
 800f94e:	1d3a      	adds	r2, r7, #4
 800f950:	8812      	ldrh	r2, [r2, #0]
 800f952:	801a      	strh	r2, [r3, #0]

   _UG_FontSelect(gui->font);
 800f954:	4b54      	ldr	r3, [pc, #336]	@ (800faa8 <UG_PutString+0x17c>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f95a:	0018      	movs	r0, r3
 800f95c:	f000 fade 	bl	800ff1c <_UG_FontSelect>
   while ( *str != 0 )
 800f960:	e084      	b.n	800fa6c <UG_PutString+0x140>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800f962:	4b51      	ldr	r3, [pc, #324]	@ (800faa8 <UG_PutString+0x17c>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	222d      	movs	r2, #45	@ 0x2d
 800f968:	5c9b      	ldrb	r3, [r3, r2]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d108      	bne.n	800f980 <UG_PutString+0x54>
         chr = _UG_DecodeUTF8(&str);
 800f96e:	230a      	movs	r3, #10
 800f970:	18fc      	adds	r4, r7, r3
 800f972:	003b      	movs	r3, r7
 800f974:	0018      	movs	r0, r3
 800f976:	f000 f8f7 	bl	800fb68 <_UG_DecodeUTF8>
 800f97a:	0003      	movs	r3, r0
 800f97c:	8023      	strh	r3, [r4, #0]
 800f97e:	e006      	b.n	800f98e <UG_PutString+0x62>
      }
      else{
         chr = *str++;
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	1c5a      	adds	r2, r3, #1
 800f984:	603a      	str	r2, [r7, #0]
 800f986:	781a      	ldrb	r2, [r3, #0]
 800f988:	230a      	movs	r3, #10
 800f98a:	18fb      	adds	r3, r7, r3
 800f98c:	801a      	strh	r2, [r3, #0]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 800f98e:	230a      	movs	r3, #10
 800f990:	18fb      	adds	r3, r7, r3
 800f992:	881b      	ldrh	r3, [r3, #0]
 800f994:	2b0a      	cmp	r3, #10
 800f996:	d107      	bne.n	800f9a8 <UG_PutString+0x7c>
      {
         xp = gui->device->x_dim;
 800f998:	4b43      	ldr	r3, [pc, #268]	@ (800faa8 <UG_PutString+0x17c>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	681a      	ldr	r2, [r3, #0]
 800f99e:	230e      	movs	r3, #14
 800f9a0:	18fb      	adds	r3, r7, r3
 800f9a2:	8812      	ldrh	r2, [r2, #0]
 800f9a4:	801a      	strh	r2, [r3, #0]
         continue;
 800f9a6:	e061      	b.n	800fa6c <UG_PutString+0x140>
      }
      cw = _UG_GetCharData(chr,NULL);
 800f9a8:	2508      	movs	r5, #8
 800f9aa:	197c      	adds	r4, r7, r5
 800f9ac:	230a      	movs	r3, #10
 800f9ae:	18fb      	adds	r3, r7, r3
 800f9b0:	881b      	ldrh	r3, [r3, #0]
 800f9b2:	2100      	movs	r1, #0
 800f9b4:	0018      	movs	r0, r3
 800f9b6:	f000 f985 	bl	800fcc4 <_UG_GetCharData>
 800f9ba:	0003      	movs	r3, r0
 800f9bc:	8023      	strh	r3, [r4, #0]
      if(cw==-1) continue;
 800f9be:	0028      	movs	r0, r5
 800f9c0:	183b      	adds	r3, r7, r0
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	5e9b      	ldrsh	r3, [r3, r2]
 800f9c6:	3301      	adds	r3, #1
 800f9c8:	d04f      	beq.n	800fa6a <UG_PutString+0x13e>
      if ( xp + cw > gui->device->x_dim - 1 )
 800f9ca:	4b37      	ldr	r3, [pc, #220]	@ (800faa8 <UG_PutString+0x17c>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	5e9b      	ldrsh	r3, [r3, r2]
 800f9d4:	0019      	movs	r1, r3
 800f9d6:	240e      	movs	r4, #14
 800f9d8:	193b      	adds	r3, r7, r4
 800f9da:	2200      	movs	r2, #0
 800f9dc:	5e9a      	ldrsh	r2, [r3, r2]
 800f9de:	183b      	adds	r3, r7, r0
 800f9e0:	2000      	movs	r0, #0
 800f9e2:	5e1b      	ldrsh	r3, [r3, r0]
 800f9e4:	18d3      	adds	r3, r2, r3
 800f9e6:	4299      	cmp	r1, r3
 800f9e8:	dc16      	bgt.n	800fa18 <UG_PutString+0xec>
      {
         xp = x;
 800f9ea:	193b      	adds	r3, r7, r4
 800f9ec:	1dba      	adds	r2, r7, #6
 800f9ee:	8812      	ldrh	r2, [r2, #0]
 800f9f0:	801a      	strh	r2, [r3, #0]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 800f9f2:	4b2d      	ldr	r3, [pc, #180]	@ (800faa8 <UG_PutString+0x17c>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	222f      	movs	r2, #47	@ 0x2f
 800f9f8:	5c9b      	ldrb	r3, [r3, r2]
 800f9fa:	b21a      	sxth	r2, r3
 800f9fc:	4b2a      	ldr	r3, [pc, #168]	@ (800faa8 <UG_PutString+0x17c>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	214a      	movs	r1, #74	@ 0x4a
 800fa02:	565b      	ldrsb	r3, [r3, r1]
 800fa04:	18d3      	adds	r3, r2, r3
 800fa06:	b21b      	sxth	r3, r3
 800fa08:	b29a      	uxth	r2, r3
 800fa0a:	210c      	movs	r1, #12
 800fa0c:	187b      	adds	r3, r7, r1
 800fa0e:	881b      	ldrh	r3, [r3, #0]
 800fa10:	18d3      	adds	r3, r2, r3
 800fa12:	b29a      	uxth	r2, r3
 800fa14:	187b      	adds	r3, r7, r1
 800fa16:	801a      	strh	r2, [r3, #0]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 800fa18:	4b23      	ldr	r3, [pc, #140]	@ (800faa8 <UG_PutString+0x17c>)
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	224c      	movs	r2, #76	@ 0x4c
 800fa1e:	5a9d      	ldrh	r5, [r3, r2]
 800fa20:	4b21      	ldr	r3, [pc, #132]	@ (800faa8 <UG_PutString+0x17c>)
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	224e      	movs	r2, #78	@ 0x4e
 800fa26:	5a9b      	ldrh	r3, [r3, r2]
 800fa28:	220c      	movs	r2, #12
 800fa2a:	18ba      	adds	r2, r7, r2
 800fa2c:	2400      	movs	r4, #0
 800fa2e:	5f14      	ldrsh	r4, [r2, r4]
 800fa30:	260e      	movs	r6, #14
 800fa32:	19ba      	adds	r2, r7, r6
 800fa34:	2100      	movs	r1, #0
 800fa36:	5e51      	ldrsh	r1, [r2, r1]
 800fa38:	220a      	movs	r2, #10
 800fa3a:	18ba      	adds	r2, r7, r2
 800fa3c:	8810      	ldrh	r0, [r2, #0]
 800fa3e:	9300      	str	r3, [sp, #0]
 800fa40:	002b      	movs	r3, r5
 800fa42:	0022      	movs	r2, r4
 800fa44:	f000 faec 	bl	8010020 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 800fa48:	4b17      	ldr	r3, [pc, #92]	@ (800faa8 <UG_PutString+0x17c>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	2249      	movs	r2, #73	@ 0x49
 800fa4e:	569b      	ldrsb	r3, [r3, r2]
 800fa50:	b29a      	uxth	r2, r3
 800fa52:	2308      	movs	r3, #8
 800fa54:	18fb      	adds	r3, r7, r3
 800fa56:	881b      	ldrh	r3, [r3, #0]
 800fa58:	18d3      	adds	r3, r2, r3
 800fa5a:	b29a      	uxth	r2, r3
 800fa5c:	19bb      	adds	r3, r7, r6
 800fa5e:	881b      	ldrh	r3, [r3, #0]
 800fa60:	18d3      	adds	r3, r2, r3
 800fa62:	b29a      	uxth	r2, r3
 800fa64:	19bb      	adds	r3, r7, r6
 800fa66:	801a      	strh	r2, [r3, #0]
 800fa68:	e000      	b.n	800fa6c <UG_PutString+0x140>
      if(cw==-1) continue;
 800fa6a:	46c0      	nop			@ (mov r8, r8)
   while ( *str != 0 )
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	781b      	ldrb	r3, [r3, #0]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d000      	beq.n	800fa76 <UG_PutString+0x14a>
 800fa74:	e775      	b.n	800f962 <UG_PutString+0x36>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 800fa76:	4b0c      	ldr	r3, [pc, #48]	@ (800faa8 <UG_PutString+0x17c>)
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	2268      	movs	r2, #104	@ 0x68
 800fa7c:	5c9b      	ldrb	r3, [r3, r2]
 800fa7e:	001a      	movs	r2, r3
 800fa80:	2302      	movs	r3, #2
 800fa82:	4013      	ands	r3, r2
 800fa84:	d00c      	beq.n	800faa0 <UG_PutString+0x174>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 800fa86:	4b08      	ldr	r3, [pc, #32]	@ (800faa8 <UG_PutString+0x17c>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fa8c:	001c      	movs	r4, r3
 800fa8e:	2301      	movs	r3, #1
 800fa90:	425b      	negs	r3, r3
 800fa92:	2201      	movs	r2, #1
 800fa94:	4252      	negs	r2, r2
 800fa96:	2101      	movs	r1, #1
 800fa98:	4249      	negs	r1, r1
 800fa9a:	2001      	movs	r0, #1
 800fa9c:	4240      	negs	r0, r0
 800fa9e:	47a0      	blx	r4
}
 800faa0:	46c0      	nop			@ (mov r8, r8)
 800faa2:	46bd      	mov	sp, r7
 800faa4:	b005      	add	sp, #20
 800faa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800faa8:	20000c44 	.word	0x20000c44

0800faac <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b082      	sub	sp, #8
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	0002      	movs	r2, r0
 800fab4:	1dbb      	adds	r3, r7, #6
 800fab6:	801a      	strh	r2, [r3, #0]
   gui->fore_color = c;
 800fab8:	4b04      	ldr	r3, [pc, #16]	@ (800facc <UG_SetForecolor+0x20>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	1dba      	adds	r2, r7, #6
 800fabe:	214c      	movs	r1, #76	@ 0x4c
 800fac0:	8812      	ldrh	r2, [r2, #0]
 800fac2:	525a      	strh	r2, [r3, r1]
}
 800fac4:	46c0      	nop			@ (mov r8, r8)
 800fac6:	46bd      	mov	sp, r7
 800fac8:	b002      	add	sp, #8
 800faca:	bd80      	pop	{r7, pc}
 800facc:	20000c44 	.word	0x20000c44

0800fad0 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b082      	sub	sp, #8
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	0002      	movs	r2, r0
 800fad8:	1dbb      	adds	r3, r7, #6
 800fada:	801a      	strh	r2, [r3, #0]
   gui->back_color = c;
 800fadc:	4b04      	ldr	r3, [pc, #16]	@ (800faf0 <UG_SetBackcolor+0x20>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	1dba      	adds	r2, r7, #6
 800fae2:	214e      	movs	r1, #78	@ 0x4e
 800fae4:	8812      	ldrh	r2, [r2, #0]
 800fae6:	525a      	strh	r2, [r3, r1]
}
 800fae8:	46c0      	nop			@ (mov r8, r8)
 800faea:	46bd      	mov	sp, r7
 800faec:	b002      	add	sp, #8
 800faee:	bd80      	pop	{r7, pc}
 800faf0:	20000c44 	.word	0x20000c44

0800faf4 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b082      	sub	sp, #8
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	0002      	movs	r2, r0
 800fafc:	1dbb      	adds	r3, r7, #6
 800fafe:	801a      	strh	r2, [r3, #0]
   gui->char_h_space = s;
 800fb00:	4b05      	ldr	r3, [pc, #20]	@ (800fb18 <UG_FontSetHSpace+0x24>)
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	1dba      	adds	r2, r7, #6
 800fb06:	8812      	ldrh	r2, [r2, #0]
 800fb08:	b251      	sxtb	r1, r2
 800fb0a:	2249      	movs	r2, #73	@ 0x49
 800fb0c:	5499      	strb	r1, [r3, r2]
}
 800fb0e:	46c0      	nop			@ (mov r8, r8)
 800fb10:	46bd      	mov	sp, r7
 800fb12:	b002      	add	sp, #8
 800fb14:	bd80      	pop	{r7, pc}
 800fb16:	46c0      	nop			@ (mov r8, r8)
 800fb18:	20000c44 	.word	0x20000c44

0800fb1c <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b082      	sub	sp, #8
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	0002      	movs	r2, r0
 800fb24:	1dbb      	adds	r3, r7, #6
 800fb26:	801a      	strh	r2, [r3, #0]
   gui->char_v_space = s;
 800fb28:	4b05      	ldr	r3, [pc, #20]	@ (800fb40 <UG_FontSetVSpace+0x24>)
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	1dba      	adds	r2, r7, #6
 800fb2e:	8812      	ldrh	r2, [r2, #0]
 800fb30:	b251      	sxtb	r1, r2
 800fb32:	224a      	movs	r2, #74	@ 0x4a
 800fb34:	5499      	strb	r1, [r3, r2]
}
 800fb36:	46c0      	nop			@ (mov r8, r8)
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	b002      	add	sp, #8
 800fb3c:	bd80      	pop	{r7, pc}
 800fb3e:	46c0      	nop			@ (mov r8, r8)
 800fb40:	20000c44 	.word	0x20000c44

0800fb44 <UG_FontSetTransparency>:

void UG_FontSetTransparency( UG_U8 t )
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b082      	sub	sp, #8
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	0002      	movs	r2, r0
 800fb4c:	1dfb      	adds	r3, r7, #7
 800fb4e:	701a      	strb	r2, [r3, #0]
  gui->transparent_font=t;
 800fb50:	4b04      	ldr	r3, [pc, #16]	@ (800fb64 <UG_FontSetTransparency+0x20>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	1dfa      	adds	r2, r7, #7
 800fb56:	2148      	movs	r1, #72	@ 0x48
 800fb58:	7812      	ldrb	r2, [r2, #0]
 800fb5a:	545a      	strb	r2, [r3, r1]
}
 800fb5c:	46c0      	nop			@ (mov r8, r8)
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	b002      	add	sp, #8
 800fb62:	bd80      	pop	{r7, pc}
 800fb64:	20000c44 	.word	0x20000c44

0800fb68 <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b084      	sub	sp, #16
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]

  char c=**str;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681a      	ldr	r2, [r3, #0]
 800fb74:	210f      	movs	r1, #15
 800fb76:	187b      	adds	r3, r7, r1
 800fb78:	7812      	ldrb	r2, [r2, #0]
 800fb7a:	701a      	strb	r2, [r3, #0]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 800fb7c:	187b      	adds	r3, r7, r1
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	b25b      	sxtb	r3, r3
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	db08      	blt.n	800fb98 <_UG_DecodeUTF8+0x30>
  {
    *str = *str+1;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	1c5a      	adds	r2, r3, #1
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	601a      	str	r2, [r3, #0]
    return c;
 800fb90:	187b      	adds	r3, r7, r1
 800fb92:	781b      	ldrb	r3, [r3, #0]
 800fb94:	b29b      	uxth	r3, r3
 800fb96:	e091      	b.n	800fcbc <_UG_DecodeUTF8+0x154>
  }

  UG_U8 bytes_left=0;
 800fb98:	230e      	movs	r3, #14
 800fb9a:	18fb      	adds	r3, r7, r3
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	701a      	strb	r2, [r3, #0]
  UG_CHAR encoding=0;
 800fba0:	230c      	movs	r3, #12
 800fba2:	18fb      	adds	r3, r7, r3
 800fba4:	2200      	movs	r2, #0
 800fba6:	801a      	strh	r2, [r3, #0]

  while(**str)
 800fba8:	e07d      	b.n	800fca6 <_UG_DecodeUTF8+0x13e>
  {
    c=**str;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681a      	ldr	r2, [r3, #0]
 800fbae:	210f      	movs	r1, #15
 800fbb0:	187b      	adds	r3, r7, r1
 800fbb2:	7812      	ldrb	r2, [r2, #0]
 800fbb4:	701a      	strb	r2, [r3, #0]
    *str = *str+1;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	1c5a      	adds	r2, r3, #1
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 800fbc0:	220e      	movs	r2, #14
 800fbc2:	18bb      	adds	r3, r7, r2
 800fbc4:	781b      	ldrb	r3, [r3, #0]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d14f      	bne.n	800fc6a <_UG_DecodeUTF8+0x102>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 800fbca:	187b      	adds	r3, r7, r1
 800fbcc:	781b      	ldrb	r3, [r3, #0]
 800fbce:	2bdf      	cmp	r3, #223	@ 0xdf
 800fbd0:	d809      	bhi.n	800fbe6 <_UG_DecodeUTF8+0x7e>
      {
        bytes_left = 1;
 800fbd2:	18bb      	adds	r3, r7, r2
 800fbd4:	2201      	movs	r2, #1
 800fbd6:	701a      	strb	r2, [r3, #0]
        c &= 0x01f;
 800fbd8:	187b      	adds	r3, r7, r1
 800fbda:	187a      	adds	r2, r7, r1
 800fbdc:	7812      	ldrb	r2, [r2, #0]
 800fbde:	211f      	movs	r1, #31
 800fbe0:	400a      	ands	r2, r1
 800fbe2:	701a      	strb	r2, [r3, #0]
 800fbe4:	e03a      	b.n	800fc5c <_UG_DecodeUTF8+0xf4>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 800fbe6:	210f      	movs	r1, #15
 800fbe8:	187b      	adds	r3, r7, r1
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	2bef      	cmp	r3, #239	@ 0xef
 800fbee:	d80a      	bhi.n	800fc06 <_UG_DecodeUTF8+0x9e>
      {
        bytes_left = 2;
 800fbf0:	230e      	movs	r3, #14
 800fbf2:	18fb      	adds	r3, r7, r3
 800fbf4:	2202      	movs	r2, #2
 800fbf6:	701a      	strb	r2, [r3, #0]
        c &= 15;
 800fbf8:	187b      	adds	r3, r7, r1
 800fbfa:	187a      	adds	r2, r7, r1
 800fbfc:	7812      	ldrb	r2, [r2, #0]
 800fbfe:	210f      	movs	r1, #15
 800fc00:	400a      	ands	r2, r1
 800fc02:	701a      	strb	r2, [r3, #0]
 800fc04:	e02a      	b.n	800fc5c <_UG_DecodeUTF8+0xf4>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 800fc06:	210f      	movs	r1, #15
 800fc08:	187b      	adds	r3, r7, r1
 800fc0a:	781b      	ldrb	r3, [r3, #0]
 800fc0c:	2bf7      	cmp	r3, #247	@ 0xf7
 800fc0e:	d80a      	bhi.n	800fc26 <_UG_DecodeUTF8+0xbe>
      {
        bytes_left = 3;
 800fc10:	230e      	movs	r3, #14
 800fc12:	18fb      	adds	r3, r7, r3
 800fc14:	2203      	movs	r2, #3
 800fc16:	701a      	strb	r2, [r3, #0]
        c &= 7;
 800fc18:	187b      	adds	r3, r7, r1
 800fc1a:	187a      	adds	r2, r7, r1
 800fc1c:	7812      	ldrb	r2, [r2, #0]
 800fc1e:	2107      	movs	r1, #7
 800fc20:	400a      	ands	r2, r1
 800fc22:	701a      	strb	r2, [r3, #0]
 800fc24:	e01a      	b.n	800fc5c <_UG_DecodeUTF8+0xf4>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 800fc26:	210f      	movs	r1, #15
 800fc28:	187b      	adds	r3, r7, r1
 800fc2a:	781b      	ldrb	r3, [r3, #0]
 800fc2c:	2bfb      	cmp	r3, #251	@ 0xfb
 800fc2e:	d80a      	bhi.n	800fc46 <_UG_DecodeUTF8+0xde>
      {
        bytes_left = 4;
 800fc30:	230e      	movs	r3, #14
 800fc32:	18fb      	adds	r3, r7, r3
 800fc34:	2204      	movs	r2, #4
 800fc36:	701a      	strb	r2, [r3, #0]
        c &= 3;
 800fc38:	187b      	adds	r3, r7, r1
 800fc3a:	187a      	adds	r2, r7, r1
 800fc3c:	7812      	ldrb	r2, [r2, #0]
 800fc3e:	2103      	movs	r1, #3
 800fc40:	400a      	ands	r2, r1
 800fc42:	701a      	strb	r2, [r3, #0]
 800fc44:	e00a      	b.n	800fc5c <_UG_DecodeUTF8+0xf4>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 800fc46:	230e      	movs	r3, #14
 800fc48:	18fb      	adds	r3, r7, r3
 800fc4a:	2205      	movs	r2, #5
 800fc4c:	701a      	strb	r2, [r3, #0]
        c &= 1;
 800fc4e:	220f      	movs	r2, #15
 800fc50:	18bb      	adds	r3, r7, r2
 800fc52:	18ba      	adds	r2, r7, r2
 800fc54:	7812      	ldrb	r2, [r2, #0]
 800fc56:	2101      	movs	r1, #1
 800fc58:	400a      	ands	r2, r1
 800fc5a:	701a      	strb	r2, [r3, #0]
      }
      encoding = c;
 800fc5c:	230c      	movs	r3, #12
 800fc5e:	18fb      	adds	r3, r7, r3
 800fc60:	220f      	movs	r2, #15
 800fc62:	18ba      	adds	r2, r7, r2
 800fc64:	7812      	ldrb	r2, [r2, #0]
 800fc66:	801a      	strh	r2, [r3, #0]
 800fc68:	e01d      	b.n	800fca6 <_UG_DecodeUTF8+0x13e>
    }
    else
    {
      encoding<<=6;
 800fc6a:	210c      	movs	r1, #12
 800fc6c:	187b      	adds	r3, r7, r1
 800fc6e:	187a      	adds	r2, r7, r1
 800fc70:	8812      	ldrh	r2, [r2, #0]
 800fc72:	0192      	lsls	r2, r2, #6
 800fc74:	801a      	strh	r2, [r3, #0]
      encoding |= (c & 0x3F);
 800fc76:	230f      	movs	r3, #15
 800fc78:	18fb      	adds	r3, r7, r3
 800fc7a:	781b      	ldrb	r3, [r3, #0]
 800fc7c:	b21b      	sxth	r3, r3
 800fc7e:	223f      	movs	r2, #63	@ 0x3f
 800fc80:	4013      	ands	r3, r2
 800fc82:	b21a      	sxth	r2, r3
 800fc84:	187b      	adds	r3, r7, r1
 800fc86:	2000      	movs	r0, #0
 800fc88:	5e1b      	ldrsh	r3, [r3, r0]
 800fc8a:	4313      	orrs	r3, r2
 800fc8c:	b21a      	sxth	r2, r3
 800fc8e:	187b      	adds	r3, r7, r1
 800fc90:	801a      	strh	r2, [r3, #0]
      if ( --bytes_left == 0 )
 800fc92:	210e      	movs	r1, #14
 800fc94:	187b      	adds	r3, r7, r1
 800fc96:	187a      	adds	r2, r7, r1
 800fc98:	7812      	ldrb	r2, [r2, #0]
 800fc9a:	3a01      	subs	r2, #1
 800fc9c:	701a      	strb	r2, [r3, #0]
 800fc9e:	187b      	adds	r3, r7, r1
 800fca0:	781b      	ldrb	r3, [r3, #0]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d006      	beq.n	800fcb4 <_UG_DecodeUTF8+0x14c>
  while(**str)
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	781b      	ldrb	r3, [r3, #0]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d000      	beq.n	800fcb2 <_UG_DecodeUTF8+0x14a>
 800fcb0:	e77b      	b.n	800fbaa <_UG_DecodeUTF8+0x42>
 800fcb2:	e000      	b.n	800fcb6 <_UG_DecodeUTF8+0x14e>
        break;
 800fcb4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return encoding;
 800fcb6:	230c      	movs	r3, #12
 800fcb8:	18fb      	adds	r3, r7, r3
 800fcba:	881b      	ldrh	r3, [r3, #0]
}
 800fcbc:	0018      	movs	r0, r3
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	b004      	add	sp, #16
 800fcc2:	bd80      	pop	{r7, pc}

0800fcc4 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 800fcc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcc6:	b087      	sub	sp, #28
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	0002      	movs	r2, r0
 800fccc:	6039      	str	r1, [r7, #0]
 800fcce:	1dbb      	adds	r3, r7, #6
 800fcd0:	801a      	strh	r2, [r3, #0]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  const UG_U8 * offset = gui->currentFont.offsets;
 800fcd2:	4b8c      	ldr	r3, [pc, #560]	@ (800ff04 <_UG_GetCharData+0x240>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fcd8:	617b      	str	r3, [r7, #20]
  UG_U16 char_start=0, char_stop=0, skip=0;
 800fcda:	2310      	movs	r3, #16
 800fcdc:	18fb      	adds	r3, r7, r3
 800fcde:	2200      	movs	r2, #0
 800fce0:	801a      	strh	r2, [r3, #0]
 800fce2:	230e      	movs	r3, #14
 800fce4:	18fb      	adds	r3, r7, r3
 800fce6:	2200      	movs	r2, #0
 800fce8:	801a      	strh	r2, [r3, #0]
 800fcea:	2312      	movs	r3, #18
 800fcec:	18fb      	adds	r3, r7, r3
 800fcee:	2200      	movs	r2, #0
 800fcf0:	801a      	strh	r2, [r3, #0]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 800fcf2:	4b84      	ldr	r3, [pc, #528]	@ (800ff04 <_UG_GetCharData+0x240>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fcf8:	4b83      	ldr	r3, [pc, #524]	@ (800ff08 <_UG_GetCharData+0x244>)
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d110      	bne.n	800fd22 <_UG_GetCharData+0x5e>
 800fd00:	4b82      	ldr	r3, [pc, #520]	@ (800ff0c <_UG_GetCharData+0x248>)
 800fd02:	881b      	ldrh	r3, [r3, #0]
 800fd04:	1dba      	adds	r2, r7, #6
 800fd06:	8812      	ldrh	r2, [r2, #0]
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d10a      	bne.n	800fd22 <_UG_GetCharData+0x5e>
    if(p) *p=last_p;                                                      // Load char bitmap address if available. Sometimes called with null p to get only the cached width.
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d003      	beq.n	800fd1a <_UG_GetCharData+0x56>
 800fd12:	4b7f      	ldr	r3, [pc, #508]	@ (800ff10 <_UG_GetCharData+0x24c>)
 800fd14:	681a      	ldr	r2, [r3, #0]
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	601a      	str	r2, [r3, #0]
    return last_width;                                                    // Return width.
 800fd1a:	4b7e      	ldr	r3, [pc, #504]	@ (800ff14 <_UG_GetCharData+0x250>)
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	5e9b      	ldrsh	r3, [r3, r2]
 800fd20:	e0eb      	b.n	800fefa <_UG_GetCharData+0x236>
  }
  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 800fd22:	4b78      	ldr	r3, [pc, #480]	@ (800ff04 <_UG_GetCharData+0x240>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	222d      	movs	r2, #45	@ 0x2d
 800fd28:	5c9b      	ldrb	r3, [r3, r2]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d035      	beq.n	800fd9a <_UG_GetCharData+0xd6>
    switch (encoding)
 800fd2e:	1dbb      	adds	r3, r7, #6
 800fd30:	881b      	ldrh	r3, [r3, #0]
 800fd32:	2bfc      	cmp	r3, #252	@ 0xfc
 800fd34:	dc31      	bgt.n	800fd9a <_UG_GetCharData+0xd6>
 800fd36:	2bd6      	cmp	r3, #214	@ 0xd6
 800fd38:	da07      	bge.n	800fd4a <_UG_GetCharData+0x86>
 800fd3a:	2bc4      	cmp	r3, #196	@ 0xc4
 800fd3c:	d021      	beq.n	800fd82 <_UG_GetCharData+0xbe>
 800fd3e:	dc2c      	bgt.n	800fd9a <_UG_GetCharData+0xd6>
 800fd40:	2bb0      	cmp	r3, #176	@ 0xb0
 800fd42:	d026      	beq.n	800fd92 <_UG_GetCharData+0xce>
 800fd44:	2bb5      	cmp	r3, #181	@ 0xb5
 800fd46:	d020      	beq.n	800fd8a <_UG_GetCharData+0xc6>
 800fd48:	e027      	b.n	800fd9a <_UG_GetCharData+0xd6>
 800fd4a:	3bd6      	subs	r3, #214	@ 0xd6
 800fd4c:	2b26      	cmp	r3, #38	@ 0x26
 800fd4e:	d824      	bhi.n	800fd9a <_UG_GetCharData+0xd6>
 800fd50:	009a      	lsls	r2, r3, #2
 800fd52:	4b71      	ldr	r3, [pc, #452]	@ (800ff18 <_UG_GetCharData+0x254>)
 800fd54:	18d3      	adds	r3, r2, r3
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	469f      	mov	pc, r3
    {
       case 0xF6: encoding = 0x94; break; // ö
 800fd5a:	1dbb      	adds	r3, r7, #6
 800fd5c:	2294      	movs	r2, #148	@ 0x94
 800fd5e:	801a      	strh	r2, [r3, #0]
 800fd60:	e01b      	b.n	800fd9a <_UG_GetCharData+0xd6>
       case 0xD6: encoding = 0x99; break; // Ö
 800fd62:	1dbb      	adds	r3, r7, #6
 800fd64:	2299      	movs	r2, #153	@ 0x99
 800fd66:	801a      	strh	r2, [r3, #0]
 800fd68:	e017      	b.n	800fd9a <_UG_GetCharData+0xd6>
       case 0xFC: encoding = 0x81; break; // ü
 800fd6a:	1dbb      	adds	r3, r7, #6
 800fd6c:	2281      	movs	r2, #129	@ 0x81
 800fd6e:	801a      	strh	r2, [r3, #0]
 800fd70:	e013      	b.n	800fd9a <_UG_GetCharData+0xd6>
       case 0xDC: encoding = 0x9A; break; // Ü
 800fd72:	1dbb      	adds	r3, r7, #6
 800fd74:	229a      	movs	r2, #154	@ 0x9a
 800fd76:	801a      	strh	r2, [r3, #0]
 800fd78:	e00f      	b.n	800fd9a <_UG_GetCharData+0xd6>
       case 0xE4: encoding = 0x84; break; // ä
 800fd7a:	1dbb      	adds	r3, r7, #6
 800fd7c:	2284      	movs	r2, #132	@ 0x84
 800fd7e:	801a      	strh	r2, [r3, #0]
 800fd80:	e00b      	b.n	800fd9a <_UG_GetCharData+0xd6>
       case 0xC4: encoding = 0x8E; break; // Ä
 800fd82:	1dbb      	adds	r3, r7, #6
 800fd84:	228e      	movs	r2, #142	@ 0x8e
 800fd86:	801a      	strh	r2, [r3, #0]
 800fd88:	e007      	b.n	800fd9a <_UG_GetCharData+0xd6>
       case 0xB5: encoding = 0xE6; break; // µ
 800fd8a:	1dbb      	adds	r3, r7, #6
 800fd8c:	22e6      	movs	r2, #230	@ 0xe6
 800fd8e:	801a      	strh	r2, [r3, #0]
 800fd90:	e003      	b.n	800fd9a <_UG_GetCharData+0xd6>
       case 0xB0: encoding = 0xF8; break; // °
 800fd92:	1dbb      	adds	r3, r7, #6
 800fd94:	22f8      	movs	r2, #248	@ 0xf8
 800fd96:	801a      	strh	r2, [r3, #0]
 800fd98:	46c0      	nop			@ (mov r8, r8)
  }


  while(1)                                                                  // Seek through the offsets
  {
    UG_U8 offset_type = *offset++;                                          // Fist byte indicates offset type: single char, range start, offset end
 800fd9a:	697b      	ldr	r3, [r7, #20]
 800fd9c:	1c5a      	adds	r2, r3, #1
 800fd9e:	617a      	str	r2, [r7, #20]
 800fda0:	250d      	movs	r5, #13
 800fda2:	197a      	adds	r2, r7, r5
 800fda4:	781b      	ldrb	r3, [r3, #0]
 800fda6:	7013      	strb	r3, [r2, #0]
    if(offset_type == 0xFF)
 800fda8:	197b      	adds	r3, r7, r5
 800fdaa:	781b      	ldrb	r3, [r3, #0]
 800fdac:	2bff      	cmp	r3, #255	@ 0xff
 800fdae:	d100      	bne.n	800fdb2 <_UG_GetCharData+0xee>
 800fdb0:	e069      	b.n	800fe86 <_UG_GetCharData+0x1c2>
      break;                                                                // Offset table end
    char_start = ptr_8to16(offset);
 800fdb2:	2610      	movs	r6, #16
 800fdb4:	19bc      	adds	r4, r7, r6
 800fdb6:	697b      	ldr	r3, [r7, #20]
 800fdb8:	0018      	movs	r0, r3
 800fdba:	f7ff fac3 	bl	800f344 <ptr_8to16>
 800fdbe:	0003      	movs	r3, r0
 800fdc0:	8023      	strh	r3, [r4, #0]
    offset+=2;
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	3302      	adds	r3, #2
 800fdc6:	617b      	str	r3, [r7, #20]
    if(offset_type == 0)                                                    // Single char offset
 800fdc8:	197b      	adds	r3, r7, r5
 800fdca:	781b      	ldrb	r3, [r3, #0]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d115      	bne.n	800fdfc <_UG_GetCharData+0x138>
    {
      if(encoding==char_start)
 800fdd0:	1dba      	adds	r2, r7, #6
 800fdd2:	19bb      	adds	r3, r7, r6
 800fdd4:	8812      	ldrh	r2, [r2, #0]
 800fdd6:	881b      	ldrh	r3, [r3, #0]
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d056      	beq.n	800fe8a <_UG_GetCharData+0x1c6>
        break;                                                              // Matching the current offset char
      else if (encoding<char_start)
 800fddc:	1dba      	adds	r2, r7, #6
 800fdde:	19bb      	adds	r3, r7, r6
 800fde0:	8812      	ldrh	r2, [r2, #0]
 800fde2:	881b      	ldrh	r3, [r3, #0]
 800fde4:	429a      	cmp	r2, r3
 800fde6:	d202      	bcs.n	800fdee <_UG_GetCharData+0x12a>
        return -1;                                                          // If the encoding is lower than current range, the char is not in the font
 800fde8:	2301      	movs	r3, #1
 800fdea:	425b      	negs	r3, r3
 800fdec:	e085      	b.n	800fefa <_UG_GetCharData+0x236>
      skip++;                                                               // Else, increase skip and keep searching
 800fdee:	2112      	movs	r1, #18
 800fdf0:	187b      	adds	r3, r7, r1
 800fdf2:	881a      	ldrh	r2, [r3, #0]
 800fdf4:	187b      	adds	r3, r7, r1
 800fdf6:	3201      	adds	r2, #1
 800fdf8:	801a      	strh	r2, [r3, #0]
 800fdfa:	e7ce      	b.n	800fd9a <_UG_GetCharData+0xd6>
    }
    else if(offset_type==1){
 800fdfc:	230d      	movs	r3, #13
 800fdfe:	18fb      	adds	r3, r7, r3
 800fe00:	781b      	ldrb	r3, [r3, #0]
 800fe02:	2b01      	cmp	r3, #1
 800fe04:	d1c9      	bne.n	800fd9a <_UG_GetCharData+0xd6>
      char_stop =  ptr_8to16(offset);
 800fe06:	250e      	movs	r5, #14
 800fe08:	197c      	adds	r4, r7, r5
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	0018      	movs	r0, r3
 800fe0e:	f7ff fa99 	bl	800f344 <ptr_8to16>
 800fe12:	0003      	movs	r3, r0
 800fe14:	8023      	strh	r3, [r4, #0]
      offset+=2;
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	3302      	adds	r3, #2
 800fe1a:	617b      	str	r3, [r7, #20]
      if(encoding>=char_start && encoding<=char_stop)                       // If the encoding is between the range
 800fe1c:	1dba      	adds	r2, r7, #6
 800fe1e:	2110      	movs	r1, #16
 800fe20:	187b      	adds	r3, r7, r1
 800fe22:	8812      	ldrh	r2, [r2, #0]
 800fe24:	881b      	ldrh	r3, [r3, #0]
 800fe26:	429a      	cmp	r2, r3
 800fe28:	d312      	bcc.n	800fe50 <_UG_GetCharData+0x18c>
 800fe2a:	1dba      	adds	r2, r7, #6
 800fe2c:	197b      	adds	r3, r7, r5
 800fe2e:	8812      	ldrh	r2, [r2, #0]
 800fe30:	881b      	ldrh	r3, [r3, #0]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d80c      	bhi.n	800fe50 <_UG_GetCharData+0x18c>
      {
        skip += (encoding-char_start);                                      // Calculate the skip value
 800fe36:	1dba      	adds	r2, r7, #6
 800fe38:	187b      	adds	r3, r7, r1
 800fe3a:	8812      	ldrh	r2, [r2, #0]
 800fe3c:	881b      	ldrh	r3, [r3, #0]
 800fe3e:	1ad3      	subs	r3, r2, r3
 800fe40:	b299      	uxth	r1, r3
 800fe42:	2212      	movs	r2, #18
 800fe44:	18bb      	adds	r3, r7, r2
 800fe46:	18ba      	adds	r2, r7, r2
 800fe48:	8812      	ldrh	r2, [r2, #0]
 800fe4a:	188a      	adds	r2, r1, r2
 800fe4c:	801a      	strh	r2, [r3, #0]
        break;
 800fe4e:	e01d      	b.n	800fe8c <_UG_GetCharData+0x1c8>
      }
      else if(encoding<char_start)
 800fe50:	1dba      	adds	r2, r7, #6
 800fe52:	2310      	movs	r3, #16
 800fe54:	18fb      	adds	r3, r7, r3
 800fe56:	8812      	ldrh	r2, [r2, #0]
 800fe58:	881b      	ldrh	r3, [r3, #0]
 800fe5a:	429a      	cmp	r2, r3
 800fe5c:	d202      	bcs.n	800fe64 <_UG_GetCharData+0x1a0>
        return -1;                                                          // If the encoding is lower than current range start, the char is not in the font
 800fe5e:	2301      	movs	r3, #1
 800fe60:	425b      	negs	r3, r3
 800fe62:	e04a      	b.n	800fefa <_UG_GetCharData+0x236>
      skip += (char_stop-char_start)+1;                                     // Encoding not found in the current range, increase skip size and clear range flasg
 800fe64:	230e      	movs	r3, #14
 800fe66:	18fa      	adds	r2, r7, r3
 800fe68:	2310      	movs	r3, #16
 800fe6a:	18fb      	adds	r3, r7, r3
 800fe6c:	8812      	ldrh	r2, [r2, #0]
 800fe6e:	881b      	ldrh	r3, [r3, #0]
 800fe70:	1ad3      	subs	r3, r2, r3
 800fe72:	b29a      	uxth	r2, r3
 800fe74:	2112      	movs	r1, #18
 800fe76:	187b      	adds	r3, r7, r1
 800fe78:	881b      	ldrh	r3, [r3, #0]
 800fe7a:	18d3      	adds	r3, r2, r3
 800fe7c:	b29a      	uxth	r2, r3
 800fe7e:	187b      	adds	r3, r7, r1
 800fe80:	3201      	adds	r2, #1
 800fe82:	801a      	strh	r2, [r3, #0]
  {
 800fe84:	e789      	b.n	800fd9a <_UG_GetCharData+0xd6>
      break;                                                                // Offset table end
 800fe86:	46c0      	nop			@ (mov r8, r8)
 800fe88:	e000      	b.n	800fe8c <_UG_GetCharData+0x1c8>
        break;                                                              // Matching the current offset char
 800fe8a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  last_font =  gui->currentFont.font;                                       // Update cached data
 800fe8c:	4b1d      	ldr	r3, [pc, #116]	@ (800ff04 <_UG_GetCharData+0x240>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fe92:	4b1d      	ldr	r3, [pc, #116]	@ (800ff08 <_UG_GetCharData+0x244>)
 800fe94:	601a      	str	r2, [r3, #0]
  last_encoding = encoding;
 800fe96:	4b1d      	ldr	r3, [pc, #116]	@ (800ff0c <_UG_GetCharData+0x248>)
 800fe98:	1dba      	adds	r2, r7, #6
 800fe9a:	8812      	ldrh	r2, [r2, #0]
 800fe9c:	801a      	strh	r2, [r3, #0]
  last_p = ( gui->currentFont.data+(skip*gui->currentFont.bytes_per_char));
 800fe9e:	4b19      	ldr	r3, [pc, #100]	@ (800ff04 <_UG_GetCharData+0x240>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fea4:	2012      	movs	r0, #18
 800fea6:	183b      	adds	r3, r7, r0
 800fea8:	8819      	ldrh	r1, [r3, #0]
 800feaa:	4b16      	ldr	r3, [pc, #88]	@ (800ff04 <_UG_GetCharData+0x240>)
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800feb0:	434b      	muls	r3, r1
 800feb2:	18d2      	adds	r2, r2, r3
 800feb4:	4b16      	ldr	r3, [pc, #88]	@ (800ff10 <_UG_GetCharData+0x24c>)
 800feb6:	601a      	str	r2, [r3, #0]
  if( gui->currentFont.widths)                                              // If width table available
 800feb8:	4b12      	ldr	r3, [pc, #72]	@ (800ff04 <_UG_GetCharData+0x240>)
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d00a      	beq.n	800fed8 <_UG_GetCharData+0x214>
    last_width = *( gui->currentFont.widths+skip);                          // Use width from table
 800fec2:	4b10      	ldr	r3, [pc, #64]	@ (800ff04 <_UG_GetCharData+0x240>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fec8:	183b      	adds	r3, r7, r0
 800feca:	881b      	ldrh	r3, [r3, #0]
 800fecc:	18d3      	adds	r3, r2, r3
 800fece:	781b      	ldrb	r3, [r3, #0]
 800fed0:	b21a      	sxth	r2, r3
 800fed2:	4b10      	ldr	r3, [pc, #64]	@ (800ff14 <_UG_GetCharData+0x250>)
 800fed4:	801a      	strh	r2, [r3, #0]
 800fed6:	e006      	b.n	800fee6 <_UG_GetCharData+0x222>
  else
    last_width =  gui->currentFont.char_width;                              // Else use width from char width
 800fed8:	4b0a      	ldr	r3, [pc, #40]	@ (800ff04 <_UG_GetCharData+0x240>)
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	222e      	movs	r2, #46	@ 0x2e
 800fede:	5c9b      	ldrb	r3, [r3, r2]
 800fee0:	b21a      	sxth	r2, r3
 800fee2:	4b0c      	ldr	r3, [pc, #48]	@ (800ff14 <_UG_GetCharData+0x250>)
 800fee4:	801a      	strh	r2, [r3, #0]
  if(p)
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d003      	beq.n	800fef4 <_UG_GetCharData+0x230>
    *p=last_p;                                                              // Load char bitmap address
 800feec:	4b08      	ldr	r3, [pc, #32]	@ (800ff10 <_UG_GetCharData+0x24c>)
 800feee:	681a      	ldr	r2, [r3, #0]
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	601a      	str	r2, [r3, #0]
  return(last_width);                                                       // Return char width
 800fef4:	4b07      	ldr	r3, [pc, #28]	@ (800ff14 <_UG_GetCharData+0x250>)
 800fef6:	2200      	movs	r2, #0
 800fef8:	5e9b      	ldrsh	r3, [r3, r2]
}
 800fefa:	0018      	movs	r0, r3
 800fefc:	46bd      	mov	sp, r7
 800fefe:	b007      	add	sp, #28
 800ff00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff02:	46c0      	nop			@ (mov r8, r8)
 800ff04:	20000c44 	.word	0x20000c44
 800ff08:	20000c48 	.word	0x20000c48
 800ff0c:	20000c4c 	.word	0x20000c4c
 800ff10:	20000c50 	.word	0x20000c50
 800ff14:	20000c54 	.word	0x20000c54
 800ff18:	08019d54 	.word	0x08019d54

0800ff1c <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 800ff1c:	b590      	push	{r4, r7, lr}
 800ff1e:	b083      	sub	sp, #12
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 800ff24:	4b3d      	ldr	r3, [pc, #244]	@ (801001c <_UG_FontSelect+0x100>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff2a:	687a      	ldr	r2, [r7, #4]
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	d070      	beq.n	8010012 <_UG_FontSelect+0xf6>
    return;

  gui->currentFont.font = font;                           // Save Font pointer
 800ff30:	4b3a      	ldr	r3, [pc, #232]	@ (801001c <_UG_FontSelect+0x100>)
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	687a      	ldr	r2, [r7, #4]
 800ff36:	645a      	str	r2, [r3, #68]	@ 0x44
  gui->currentFont.char_width = *font++;                  // Byte    0: Char width
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	1c5a      	adds	r2, r3, #1
 800ff3c:	607a      	str	r2, [r7, #4]
 800ff3e:	4a37      	ldr	r2, [pc, #220]	@ (801001c <_UG_FontSelect+0x100>)
 800ff40:	6812      	ldr	r2, [r2, #0]
 800ff42:	7819      	ldrb	r1, [r3, #0]
 800ff44:	232e      	movs	r3, #46	@ 0x2e
 800ff46:	54d1      	strb	r1, [r2, r3]
  gui->currentFont.char_height = *font++;                 // Byte    1: Char height
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	1c5a      	adds	r2, r3, #1
 800ff4c:	607a      	str	r2, [r7, #4]
 800ff4e:	4a33      	ldr	r2, [pc, #204]	@ (801001c <_UG_FontSelect+0x100>)
 800ff50:	6812      	ldr	r2, [r2, #0]
 800ff52:	7819      	ldrb	r1, [r3, #0]
 800ff54:	232f      	movs	r3, #47	@ 0x2f
 800ff56:	54d1      	strb	r1, [r2, r3]
  gui->currentFont.number_of_chars = ptr_8to16(font);     // Bytes 2+3: Number of chars
 800ff58:	4b30      	ldr	r3, [pc, #192]	@ (801001c <_UG_FontSelect+0x100>)
 800ff5a:	681c      	ldr	r4, [r3, #0]
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	0018      	movs	r0, r3
 800ff60:	f7ff f9f0 	bl	800f344 <ptr_8to16>
 800ff64:	0003      	movs	r3, r0
 800ff66:	8663      	strh	r3, [r4, #50]	@ 0x32
  font+=2;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	3302      	adds	r3, #2
 800ff6c:	607b      	str	r3, [r7, #4]
  gui->currentFont.offset_size = ptr_8to16(font);         // Bytes 4+5: Offset table size
 800ff6e:	4b2b      	ldr	r3, [pc, #172]	@ (801001c <_UG_FontSelect+0x100>)
 800ff70:	681c      	ldr	r4, [r3, #0]
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	0018      	movs	r0, r3
 800ff76:	f7ff f9e5 	bl	800f344 <ptr_8to16>
 800ff7a:	0003      	movs	r3, r0
 800ff7c:	86a3      	strh	r3, [r4, #52]	@ 0x34
  font+=2;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	3302      	adds	r3, #2
 800ff82:	607b      	str	r3, [r7, #4]
  gui->currentFont.bytes_per_char = ptr_8to16(font);      // Bytes 6+7: Bytes per char
 800ff84:	4b25      	ldr	r3, [pc, #148]	@ (801001c <_UG_FontSelect+0x100>)
 800ff86:	681c      	ldr	r4, [r3, #0]
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	0018      	movs	r0, r3
 800ff8c:	f7ff f9da 	bl	800f344 <ptr_8to16>
 800ff90:	0003      	movs	r3, r0
 800ff92:	8623      	strh	r3, [r4, #48]	@ 0x30
  font+=2;                                                // Byte 8: Flags
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	3302      	adds	r3, #2
 800ff98:	607b      	str	r3, [r7, #4]
  gui->currentFont.font_type = *font & 0x3F;              // Bits 5-0: Font BPP
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	781a      	ldrb	r2, [r3, #0]
 800ff9e:	4b1f      	ldr	r3, [pc, #124]	@ (801001c <_UG_FontSelect+0x100>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	213f      	movs	r1, #63	@ 0x3f
 800ffa4:	400a      	ands	r2, r1
 800ffa6:	b2d1      	uxtb	r1, r2
 800ffa8:	222c      	movs	r2, #44	@ 0x2c
 800ffaa:	5499      	strb	r1, [r3, r2]
  gui->currentFont.is_old_font = (*font & 0x80)&&1;       // Bit 7:  1=old font, 0=new font
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	781b      	ldrb	r3, [r3, #0]
 800ffb0:	b25b      	sxtb	r3, r3
 800ffb2:	b2db      	uxtb	r3, r3
 800ffb4:	09db      	lsrs	r3, r3, #7
 800ffb6:	b2da      	uxtb	r2, r3
 800ffb8:	4b18      	ldr	r3, [pc, #96]	@ (801001c <_UG_FontSelect+0x100>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	0011      	movs	r1, r2
 800ffbe:	222d      	movs	r2, #45	@ 0x2d
 800ffc0:	5499      	strb	r1, [r3, r2]
  if(*font++ & 0x40){                                     // Bit 6: 1=Width table present, 0=not present
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	1c5a      	adds	r2, r3, #1
 800ffc6:	607a      	str	r2, [r7, #4]
 800ffc8:	781b      	ldrb	r3, [r3, #0]
 800ffca:	001a      	movs	r2, r3
 800ffcc:	2340      	movs	r3, #64	@ 0x40
 800ffce:	4013      	ands	r3, r2
 800ffd0:	d00b      	beq.n	800ffea <_UG_FontSelect+0xce>
    gui->currentFont.widths = font;                       // Save pointer to width table
 800ffd2:	4b12      	ldr	r3, [pc, #72]	@ (801001c <_UG_FontSelect+0x100>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	687a      	ldr	r2, [r7, #4]
 800ffd8:	639a      	str	r2, [r3, #56]	@ 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 800ffda:	4b10      	ldr	r3, [pc, #64]	@ (801001c <_UG_FontSelect+0x100>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ffe0:	001a      	movs	r2, r3
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	189b      	adds	r3, r3, r2
 800ffe6:	607b      	str	r3, [r7, #4]
 800ffe8:	e003      	b.n	800fff2 <_UG_FontSelect+0xd6>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 800ffea:	4b0c      	ldr	r3, [pc, #48]	@ (801001c <_UG_FontSelect+0x100>)
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	2200      	movs	r2, #0
 800fff0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  gui->currentFont.offsets = font;                        // Save pointer to offset table
 800fff2:	4b0a      	ldr	r3, [pc, #40]	@ (801001c <_UG_FontSelect+0x100>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	63da      	str	r2, [r3, #60]	@ 0x3c
  font += gui->currentFont.offset_size;                   // Skip offset table
 800fffa:	4b08      	ldr	r3, [pc, #32]	@ (801001c <_UG_FontSelect+0x100>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8010000:	001a      	movs	r2, r3
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	189b      	adds	r3, r3, r2
 8010006:	607b      	str	r3, [r7, #4]
  gui->currentFont.data = font;                           // Save pointer to bitmap data
 8010008:	4b04      	ldr	r3, [pc, #16]	@ (801001c <_UG_FontSelect+0x100>)
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	687a      	ldr	r2, [r7, #4]
 801000e:	641a      	str	r2, [r3, #64]	@ 0x40
 8010010:	e000      	b.n	8010014 <_UG_FontSelect+0xf8>
    return;
 8010012:	46c0      	nop			@ (mov r8, r8)
}
 8010014:	46bd      	mov	sp, r7
 8010016:	b003      	add	sp, #12
 8010018:	bd90      	pop	{r4, r7, pc}
 801001a:	46c0      	nop			@ (mov r8, r8)
 801001c:	20000c44 	.word	0x20000c44

08010020 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8010020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010022:	46c6      	mov	lr, r8
 8010024:	b500      	push	{lr}
 8010026:	b08c      	sub	sp, #48	@ 0x30
 8010028:	af00      	add	r7, sp, #0
 801002a:	0005      	movs	r5, r0
 801002c:	000c      	movs	r4, r1
 801002e:	0010      	movs	r0, r2
 8010030:	0019      	movs	r1, r3
 8010032:	1dbb      	adds	r3, r7, #6
 8010034:	1c2a      	adds	r2, r5, #0
 8010036:	801a      	strh	r2, [r3, #0]
 8010038:	1d3b      	adds	r3, r7, #4
 801003a:	1c22      	adds	r2, r4, #0
 801003c:	801a      	strh	r2, [r3, #0]
 801003e:	1cbb      	adds	r3, r7, #2
 8010040:	1c02      	adds	r2, r0, #0
 8010042:	801a      	strh	r2, [r3, #0]
 8010044:	003b      	movs	r3, r7
 8010046:	1c0a      	adds	r2, r1, #0
 8010048:	801a      	strh	r2, [r3, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 801004a:	232e      	movs	r3, #46	@ 0x2e
 801004c:	18fb      	adds	r3, r7, r3
 801004e:	2200      	movs	r2, #0
 8010050:	801a      	strh	r2, [r3, #0]
 8010052:	232c      	movs	r3, #44	@ 0x2c
 8010054:	18fb      	adds	r3, r7, r3
 8010056:	2200      	movs	r2, #0
 8010058:	801a      	strh	r2, [r3, #0]
 801005a:	2322      	movs	r3, #34	@ 0x22
 801005c:	18fb      	adds	r3, r7, r3
 801005e:	2200      	movs	r2, #0
 8010060:	801a      	strh	r2, [r3, #0]
 8010062:	2320      	movs	r3, #32
 8010064:	18fb      	adds	r3, r7, r3
 8010066:	2200      	movs	r2, #0
 8010068:	801a      	strh	r2, [r3, #0]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 801006a:	4bd3      	ldr	r3, [pc, #844]	@ (80103b8 <_UG_PutChar+0x398>)
 801006c:	681a      	ldr	r2, [r3, #0]
 801006e:	2317      	movs	r3, #23
 8010070:	18fb      	adds	r3, r7, r3
 8010072:	2148      	movs	r1, #72	@ 0x48
 8010074:	5c52      	ldrb	r2, [r2, r1]
 8010076:	701a      	strb	r2, [r3, #0]
 8010078:	4bcf      	ldr	r3, [pc, #828]	@ (80103b8 <_UG_PutChar+0x398>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	2268      	movs	r2, #104	@ 0x68
 801007e:	5c9a      	ldrb	r2, [r3, r2]
 8010080:	2316      	movs	r3, #22
 8010082:	18fb      	adds	r3, r7, r3
 8010084:	2102      	movs	r1, #2
 8010086:	400a      	ands	r2, r1
 8010088:	701a      	strb	r2, [r3, #0]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 801008a:	2300      	movs	r3, #0
 801008c:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 801008e:	2514      	movs	r5, #20
 8010090:	197c      	adds	r4, r7, r5
 8010092:	2308      	movs	r3, #8
 8010094:	18fa      	adds	r2, r7, r3
 8010096:	1dbb      	adds	r3, r7, #6
 8010098:	881b      	ldrh	r3, [r3, #0]
 801009a:	0011      	movs	r1, r2
 801009c:	0018      	movs	r0, r3
 801009e:	f7ff fe11 	bl	800fcc4 <_UG_GetCharData>
 80100a2:	0003      	movs	r3, r0
 80100a4:	8023      	strh	r3, [r4, #0]
   if(actual_char_width==-1)
 80100a6:	197b      	adds	r3, r7, r5
 80100a8:	2200      	movs	r2, #0
 80100aa:	5e9b      	ldrsh	r3, [r3, r2]
 80100ac:	3301      	adds	r3, #1
 80100ae:	d102      	bne.n	80100b6 <_UG_PutChar+0x96>
        return -1;                                     // Char not presnt in the font
 80100b0:	2301      	movs	r3, #1
 80100b2:	425b      	negs	r3, r3
 80100b4:	e34d      	b.n	8010752 <_UG_PutChar+0x732>

   bn =  gui->currentFont.char_width;
 80100b6:	4bc0      	ldr	r3, [pc, #768]	@ (80103b8 <_UG_PutChar+0x398>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	222e      	movs	r2, #46	@ 0x2e
 80100bc:	5c9a      	ldrb	r2, [r3, r2]
 80100be:	2124      	movs	r1, #36	@ 0x24
 80100c0:	187b      	adds	r3, r7, r1
 80100c2:	801a      	strh	r2, [r3, #0]
   if ( !bn ){
 80100c4:	187b      	adds	r3, r7, r1
 80100c6:	881b      	ldrh	r3, [r3, #0]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d101      	bne.n	80100d0 <_UG_PutChar+0xb0>
     return 0;
 80100cc:	2300      	movs	r3, #0
 80100ce:	e340      	b.n	8010752 <_UG_PutChar+0x732>
   }
   bn >>= 3;
 80100d0:	2124      	movs	r1, #36	@ 0x24
 80100d2:	187b      	adds	r3, r7, r1
 80100d4:	187a      	adds	r2, r7, r1
 80100d6:	8812      	ldrh	r2, [r2, #0]
 80100d8:	08d2      	lsrs	r2, r2, #3
 80100da:	801a      	strh	r2, [r3, #0]
   if (  gui->currentFont.char_width % 8 ) bn++;
 80100dc:	4bb6      	ldr	r3, [pc, #728]	@ (80103b8 <_UG_PutChar+0x398>)
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	222e      	movs	r2, #46	@ 0x2e
 80100e2:	5c9b      	ldrb	r3, [r3, r2]
 80100e4:	2207      	movs	r2, #7
 80100e6:	4013      	ands	r3, r2
 80100e8:	b2db      	uxtb	r3, r3
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d004      	beq.n	80100f8 <_UG_PutChar+0xd8>
 80100ee:	187b      	adds	r3, r7, r1
 80100f0:	881a      	ldrh	r2, [r3, #0]
 80100f2:	187b      	adds	r3, r7, r1
 80100f4:	3201      	adds	r2, #1
 80100f6:	801a      	strh	r2, [r3, #0]

   /* Is hardware acceleration available? */
   if (driver)
 80100f8:	2316      	movs	r3, #22
 80100fa:	18fb      	adds	r3, r7, r3
 80100fc:	781b      	ldrb	r3, [r3, #0]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d023      	beq.n	801014a <_UG_PutChar+0x12a>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8010102:	4bad      	ldr	r3, [pc, #692]	@ (80103b8 <_UG_PutChar+0x398>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010108:	001d      	movs	r5, r3
 801010a:	1d3b      	adds	r3, r7, #4
 801010c:	881a      	ldrh	r2, [r3, #0]
 801010e:	2314      	movs	r3, #20
 8010110:	18fb      	adds	r3, r7, r3
 8010112:	881b      	ldrh	r3, [r3, #0]
 8010114:	18d3      	adds	r3, r2, r3
 8010116:	b29b      	uxth	r3, r3
 8010118:	3b01      	subs	r3, #1
 801011a:	b29b      	uxth	r3, r3
 801011c:	b21a      	sxth	r2, r3
 801011e:	4ba6      	ldr	r3, [pc, #664]	@ (80103b8 <_UG_PutChar+0x398>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	212f      	movs	r1, #47	@ 0x2f
 8010124:	5c5b      	ldrb	r3, [r3, r1]
 8010126:	0019      	movs	r1, r3
 8010128:	1cbb      	adds	r3, r7, #2
 801012a:	881b      	ldrh	r3, [r3, #0]
 801012c:	18cb      	adds	r3, r1, r3
 801012e:	b29b      	uxth	r3, r3
 8010130:	3b01      	subs	r3, #1
 8010132:	b29b      	uxth	r3, r3
 8010134:	b21c      	sxth	r4, r3
 8010136:	1cbb      	adds	r3, r7, #2
 8010138:	2100      	movs	r1, #0
 801013a:	5e59      	ldrsh	r1, [r3, r1]
 801013c:	1d3b      	adds	r3, r7, #4
 801013e:	2000      	movs	r0, #0
 8010140:	5e18      	ldrsh	r0, [r3, r0]
 8010142:	0023      	movs	r3, r4
 8010144:	47a8      	blx	r5
 8010146:	0003      	movs	r3, r0
 8010148:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 801014a:	4b9b      	ldr	r3, [pc, #620]	@ (80103b8 <_UG_PutChar+0x398>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	222c      	movs	r2, #44	@ 0x2c
 8010150:	5c9b      	ldrb	r3, [r3, r2]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d000      	beq.n	8010158 <_UG_PutChar+0x138>
 8010156:	e256      	b.n	8010606 <_UG_PutChar+0x5e6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8010158:	2328      	movs	r3, #40	@ 0x28
 801015a:	18fb      	adds	r3, r7, r3
 801015c:	2200      	movs	r2, #0
 801015e:	801a      	strh	r2, [r3, #0]
 8010160:	e184      	b.n	801046c <_UG_PutChar+0x44c>
     {
       c=0;
 8010162:	231e      	movs	r3, #30
 8010164:	18fb      	adds	r3, r7, r3
 8010166:	2200      	movs	r2, #0
 8010168:	801a      	strh	r2, [r3, #0]
       for( i=0;i<bn;i++ )
 801016a:	232a      	movs	r3, #42	@ 0x2a
 801016c:	18fb      	adds	r3, r7, r3
 801016e:	2200      	movs	r2, #0
 8010170:	801a      	strh	r2, [r3, #0]
 8010172:	e16c      	b.n	801044e <_UG_PutChar+0x42e>
       {
         b = *data++;
 8010174:	68bb      	ldr	r3, [r7, #8]
 8010176:	1c5a      	adds	r2, r3, #1
 8010178:	60ba      	str	r2, [r7, #8]
 801017a:	221d      	movs	r2, #29
 801017c:	18ba      	adds	r2, r7, r2
 801017e:	781b      	ldrb	r3, [r3, #0]
 8010180:	7013      	strb	r3, [r2, #0]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8010182:	2326      	movs	r3, #38	@ 0x26
 8010184:	18fb      	adds	r3, r7, r3
 8010186:	2200      	movs	r2, #0
 8010188:	801a      	strh	r2, [r3, #0]
 801018a:	e14a      	b.n	8010422 <_UG_PutChar+0x402>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 801018c:	231d      	movs	r3, #29
 801018e:	18fb      	adds	r3, r7, r3
 8010190:	781b      	ldrb	r3, [r3, #0]
 8010192:	2201      	movs	r2, #1
 8010194:	4013      	ands	r3, r2
 8010196:	d055      	beq.n	8010244 <_UG_PutChar+0x224>
           {
             if(driver)
 8010198:	2316      	movs	r3, #22
 801019a:	18fb      	adds	r3, r7, r3
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d038      	beq.n	8010214 <_UG_PutChar+0x1f4>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 80101a2:	2220      	movs	r2, #32
 80101a4:	18bb      	adds	r3, r7, r2
 80101a6:	881b      	ldrh	r3, [r3, #0]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d010      	beq.n	80101ce <_UG_PutChar+0x1ae>
 80101ac:	2317      	movs	r3, #23
 80101ae:	18fb      	adds	r3, r7, r3
 80101b0:	781b      	ldrb	r3, [r3, #0]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d10b      	bne.n	80101ce <_UG_PutChar+0x1ae>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 80101b6:	0014      	movs	r4, r2
 80101b8:	18bb      	adds	r3, r7, r2
 80101ba:	881a      	ldrh	r2, [r3, #0]
 80101bc:	2348      	movs	r3, #72	@ 0x48
 80101be:	18fb      	adds	r3, r7, r3
 80101c0:	8819      	ldrh	r1, [r3, #0]
 80101c2:	69bb      	ldr	r3, [r7, #24]
 80101c4:	0010      	movs	r0, r2
 80101c6:	4798      	blx	r3
                 bpixels=0;
 80101c8:	193b      	adds	r3, r7, r4
 80101ca:	2200      	movs	r2, #0
 80101cc:	801a      	strh	r2, [r3, #0]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 80101ce:	2322      	movs	r3, #34	@ 0x22
 80101d0:	18fb      	adds	r3, r7, r3
 80101d2:	881b      	ldrh	r3, [r3, #0]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d116      	bne.n	8010206 <_UG_PutChar+0x1e6>
 80101d8:	2317      	movs	r3, #23
 80101da:	18fb      	adds	r3, r7, r3
 80101dc:	781b      	ldrb	r3, [r3, #0]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d011      	beq.n	8010206 <_UG_PutChar+0x1e6>
               {
                 x0=x+c;
 80101e2:	1d3b      	adds	r3, r7, #4
 80101e4:	8819      	ldrh	r1, [r3, #0]
 80101e6:	231e      	movs	r3, #30
 80101e8:	18fb      	adds	r3, r7, r3
 80101ea:	881a      	ldrh	r2, [r3, #0]
 80101ec:	232e      	movs	r3, #46	@ 0x2e
 80101ee:	18fb      	adds	r3, r7, r3
 80101f0:	188a      	adds	r2, r1, r2
 80101f2:	801a      	strh	r2, [r3, #0]
                 y0=y+j;
 80101f4:	1cbb      	adds	r3, r7, #2
 80101f6:	8819      	ldrh	r1, [r3, #0]
 80101f8:	232c      	movs	r3, #44	@ 0x2c
 80101fa:	18fb      	adds	r3, r7, r3
 80101fc:	2228      	movs	r2, #40	@ 0x28
 80101fe:	18ba      	adds	r2, r7, r2
 8010200:	8812      	ldrh	r2, [r2, #0]
 8010202:	188a      	adds	r2, r1, r2
 8010204:	801a      	strh	r2, [r3, #0]
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8010206:	2122      	movs	r1, #34	@ 0x22
 8010208:	187b      	adds	r3, r7, r1
 801020a:	881a      	ldrh	r2, [r3, #0]
 801020c:	187b      	adds	r3, r7, r1
 801020e:	3201      	adds	r2, #1
 8010210:	801a      	strh	r2, [r3, #0]
 8010212:	e0f1      	b.n	80103f8 <_UG_PutChar+0x3d8>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8010214:	4b68      	ldr	r3, [pc, #416]	@ (80103b8 <_UG_PutChar+0x398>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	685b      	ldr	r3, [r3, #4]
 801021c:	1d3a      	adds	r2, r7, #4
 801021e:	8811      	ldrh	r1, [r2, #0]
 8010220:	221e      	movs	r2, #30
 8010222:	18ba      	adds	r2, r7, r2
 8010224:	8812      	ldrh	r2, [r2, #0]
 8010226:	188a      	adds	r2, r1, r2
 8010228:	b292      	uxth	r2, r2
 801022a:	b210      	sxth	r0, r2
 801022c:	1cba      	adds	r2, r7, #2
 801022e:	8811      	ldrh	r1, [r2, #0]
 8010230:	2228      	movs	r2, #40	@ 0x28
 8010232:	18ba      	adds	r2, r7, r2
 8010234:	8812      	ldrh	r2, [r2, #0]
 8010236:	188a      	adds	r2, r1, r2
 8010238:	b292      	uxth	r2, r2
 801023a:	b211      	sxth	r1, r2
 801023c:	003a      	movs	r2, r7
 801023e:	8812      	ldrh	r2, [r2, #0]
 8010240:	4798      	blx	r3
 8010242:	e0d9      	b.n	80103f8 <_UG_PutChar+0x3d8>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8010244:	2316      	movs	r3, #22
 8010246:	18fb      	adds	r3, r7, r3
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d100      	bne.n	8010250 <_UG_PutChar+0x230>
 801024e:	e0b5      	b.n	80103bc <_UG_PutChar+0x39c>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 8010250:	2222      	movs	r2, #34	@ 0x22
 8010252:	18bb      	adds	r3, r7, r2
 8010254:	881b      	ldrh	r3, [r3, #0]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d100      	bne.n	801025c <_UG_PutChar+0x23c>
 801025a:	e0a5      	b.n	80103a8 <_UG_PutChar+0x388>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 801025c:	2317      	movs	r3, #23
 801025e:	18fb      	adds	r3, r7, r3
 8010260:	781b      	ldrb	r3, [r3, #0]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d000      	beq.n	8010268 <_UG_PutChar+0x248>
 8010266:	e099      	b.n	801039c <_UG_PutChar+0x37c>
                 {
                   push_pixels(fpixels,fc);
 8010268:	0014      	movs	r4, r2
 801026a:	18bb      	adds	r3, r7, r2
 801026c:	881a      	ldrh	r2, [r3, #0]
 801026e:	003b      	movs	r3, r7
 8010270:	8819      	ldrh	r1, [r3, #0]
 8010272:	69bb      	ldr	r3, [r7, #24]
 8010274:	0010      	movs	r0, r2
 8010276:	4798      	blx	r3
                   fpixels=0;
 8010278:	193b      	adds	r3, r7, r4
 801027a:	2200      	movs	r2, #0
 801027c:	801a      	strh	r2, [r3, #0]
 801027e:	e093      	b.n	80103a8 <_UG_PutChar+0x388>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8010280:	1d3b      	adds	r3, r7, #4
 8010282:	881a      	ldrh	r2, [r3, #0]
 8010284:	2314      	movs	r3, #20
 8010286:	18fb      	adds	r3, r7, r3
 8010288:	881b      	ldrh	r3, [r3, #0]
 801028a:	18d3      	adds	r3, r2, r3
 801028c:	b299      	uxth	r1, r3
 801028e:	200e      	movs	r0, #14
 8010290:	183b      	adds	r3, r7, r0
 8010292:	242e      	movs	r4, #46	@ 0x2e
 8010294:	193a      	adds	r2, r7, r4
 8010296:	8812      	ldrh	r2, [r2, #0]
 8010298:	1a8a      	subs	r2, r1, r2
 801029a:	801a      	strh	r2, [r3, #0]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 801029c:	193b      	adds	r3, r7, r4
 801029e:	881a      	ldrh	r2, [r3, #0]
 80102a0:	1d3b      	adds	r3, r7, #4
 80102a2:	2100      	movs	r1, #0
 80102a4:	5e5b      	ldrsh	r3, [r3, r1]
 80102a6:	429a      	cmp	r2, r3
 80102a8:	d006      	beq.n	80102b8 <_UG_PutChar+0x298>
 80102aa:	2322      	movs	r3, #34	@ 0x22
 80102ac:	18fa      	adds	r2, r7, r3
 80102ae:	183b      	adds	r3, r7, r0
 80102b0:	8812      	ldrh	r2, [r2, #0]
 80102b2:	881b      	ldrh	r3, [r3, #0]
 80102b4:	429a      	cmp	r2, r3
 80102b6:	d23a      	bcs.n	801032e <_UG_PutChar+0x30e>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 80102b8:	4b3f      	ldr	r3, [pc, #252]	@ (80103b8 <_UG_PutChar+0x398>)
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80102be:	4698      	mov	r8, r3
 80102c0:	222e      	movs	r2, #46	@ 0x2e
 80102c2:	18bb      	adds	r3, r7, r2
 80102c4:	2400      	movs	r4, #0
 80102c6:	5f1c      	ldrsh	r4, [r3, r4]
 80102c8:	232c      	movs	r3, #44	@ 0x2c
 80102ca:	18fb      	adds	r3, r7, r3
 80102cc:	2000      	movs	r0, #0
 80102ce:	5e1d      	ldrsh	r5, [r3, r0]
 80102d0:	18ba      	adds	r2, r7, r2
 80102d2:	200e      	movs	r0, #14
 80102d4:	183b      	adds	r3, r7, r0
 80102d6:	8812      	ldrh	r2, [r2, #0]
 80102d8:	881b      	ldrh	r3, [r3, #0]
 80102da:	18d3      	adds	r3, r2, r3
 80102dc:	b29b      	uxth	r3, r3
 80102de:	3b01      	subs	r3, #1
 80102e0:	b29b      	uxth	r3, r3
 80102e2:	b21e      	sxth	r6, r3
 80102e4:	2322      	movs	r3, #34	@ 0x22
 80102e6:	18fb      	adds	r3, r7, r3
 80102e8:	881a      	ldrh	r2, [r3, #0]
 80102ea:	2014      	movs	r0, #20
 80102ec:	183b      	adds	r3, r7, r0
 80102ee:	2000      	movs	r0, #0
 80102f0:	5e1b      	ldrsh	r3, [r3, r0]
 80102f2:	0019      	movs	r1, r3
 80102f4:	0010      	movs	r0, r2
 80102f6:	f7ef ffad 	bl	8000254 <__divsi3>
 80102fa:	0003      	movs	r3, r0
 80102fc:	b29a      	uxth	r2, r3
 80102fe:	212c      	movs	r1, #44	@ 0x2c
 8010300:	187b      	adds	r3, r7, r1
 8010302:	881b      	ldrh	r3, [r3, #0]
 8010304:	18d3      	adds	r3, r2, r3
 8010306:	b29b      	uxth	r3, r3
 8010308:	b21b      	sxth	r3, r3
 801030a:	0032      	movs	r2, r6
 801030c:	0029      	movs	r1, r5
 801030e:	0020      	movs	r0, r4
 8010310:	47c0      	blx	r8
 8010312:	0003      	movs	r3, r0
 8010314:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8010316:	2422      	movs	r4, #34	@ 0x22
 8010318:	193b      	adds	r3, r7, r4
 801031a:	881a      	ldrh	r2, [r3, #0]
 801031c:	003b      	movs	r3, r7
 801031e:	8819      	ldrh	r1, [r3, #0]
 8010320:	69bb      	ldr	r3, [r7, #24]
 8010322:	0010      	movs	r0, r2
 8010324:	4798      	blx	r3
                       fpixels=0;
 8010326:	193b      	adds	r3, r7, r4
 8010328:	2200      	movs	r2, #0
 801032a:	801a      	strh	r2, [r3, #0]
 801032c:	e036      	b.n	801039c <_UG_PutChar+0x37c>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 801032e:	4b22      	ldr	r3, [pc, #136]	@ (80103b8 <_UG_PutChar+0x398>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010334:	001c      	movs	r4, r3
 8010336:	262e      	movs	r6, #46	@ 0x2e
 8010338:	19bb      	adds	r3, r7, r6
 801033a:	2000      	movs	r0, #0
 801033c:	5e18      	ldrsh	r0, [r3, r0]
 801033e:	252c      	movs	r5, #44	@ 0x2c
 8010340:	197b      	adds	r3, r7, r5
 8010342:	2200      	movs	r2, #0
 8010344:	5e9a      	ldrsh	r2, [r3, r2]
 8010346:	4694      	mov	ip, r2
 8010348:	19ba      	adds	r2, r7, r6
 801034a:	230e      	movs	r3, #14
 801034c:	18fb      	adds	r3, r7, r3
 801034e:	8812      	ldrh	r2, [r2, #0]
 8010350:	881b      	ldrh	r3, [r3, #0]
 8010352:	18d3      	adds	r3, r2, r3
 8010354:	b29b      	uxth	r3, r3
 8010356:	3b01      	subs	r3, #1
 8010358:	b29b      	uxth	r3, r3
 801035a:	b21a      	sxth	r2, r3
 801035c:	197b      	adds	r3, r7, r5
 801035e:	2100      	movs	r1, #0
 8010360:	5e5b      	ldrsh	r3, [r3, r1]
 8010362:	4661      	mov	r1, ip
 8010364:	47a0      	blx	r4
 8010366:	0003      	movs	r3, r0
 8010368:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 801036a:	2422      	movs	r4, #34	@ 0x22
 801036c:	193b      	adds	r3, r7, r4
 801036e:	881a      	ldrh	r2, [r3, #0]
 8010370:	003b      	movs	r3, r7
 8010372:	8819      	ldrh	r1, [r3, #0]
 8010374:	69bb      	ldr	r3, [r7, #24]
 8010376:	0010      	movs	r0, r2
 8010378:	4798      	blx	r3
                       fpixels -= width;
 801037a:	193b      	adds	r3, r7, r4
 801037c:	1939      	adds	r1, r7, r4
 801037e:	220e      	movs	r2, #14
 8010380:	18ba      	adds	r2, r7, r2
 8010382:	8809      	ldrh	r1, [r1, #0]
 8010384:	8812      	ldrh	r2, [r2, #0]
 8010386:	1a8a      	subs	r2, r1, r2
 8010388:	801a      	strh	r2, [r3, #0]
                       x0=x;
 801038a:	19bb      	adds	r3, r7, r6
 801038c:	1d3a      	adds	r2, r7, #4
 801038e:	8812      	ldrh	r2, [r2, #0]
 8010390:	801a      	strh	r2, [r3, #0]
                       y0++;
 8010392:	197b      	adds	r3, r7, r5
 8010394:	881a      	ldrh	r2, [r3, #0]
 8010396:	197b      	adds	r3, r7, r5
 8010398:	3201      	adds	r2, #1
 801039a:	801a      	strh	r2, [r3, #0]
                   while(fpixels)
 801039c:	2322      	movs	r3, #34	@ 0x22
 801039e:	18fb      	adds	r3, r7, r3
 80103a0:	881b      	ldrh	r3, [r3, #0]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d000      	beq.n	80103a8 <_UG_PutChar+0x388>
 80103a6:	e76b      	b.n	8010280 <_UG_PutChar+0x260>
                     }
                   }
                 }
               }
               bpixels++;
 80103a8:	2120      	movs	r1, #32
 80103aa:	187b      	adds	r3, r7, r1
 80103ac:	881a      	ldrh	r2, [r3, #0]
 80103ae:	187b      	adds	r3, r7, r1
 80103b0:	3201      	adds	r2, #1
 80103b2:	801a      	strh	r2, [r3, #0]
 80103b4:	e020      	b.n	80103f8 <_UG_PutChar+0x3d8>
 80103b6:	46c0      	nop			@ (mov r8, r8)
 80103b8:	20000c44 	.word	0x20000c44
             }
             else if(!trans)                           // Not accelerated output
 80103bc:	2317      	movs	r3, #23
 80103be:	18fb      	adds	r3, r7, r3
 80103c0:	781b      	ldrb	r3, [r3, #0]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d118      	bne.n	80103f8 <_UG_PutChar+0x3d8>
             {
               gui->device->pset(x+c,y+j,bc);
 80103c6:	4bbd      	ldr	r3, [pc, #756]	@ (80106bc <_UG_PutChar+0x69c>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	685c      	ldr	r4, [r3, #4]
 80103ce:	1d3b      	adds	r3, r7, #4
 80103d0:	881a      	ldrh	r2, [r3, #0]
 80103d2:	231e      	movs	r3, #30
 80103d4:	18fb      	adds	r3, r7, r3
 80103d6:	881b      	ldrh	r3, [r3, #0]
 80103d8:	18d3      	adds	r3, r2, r3
 80103da:	b29b      	uxth	r3, r3
 80103dc:	b218      	sxth	r0, r3
 80103de:	1cbb      	adds	r3, r7, #2
 80103e0:	881a      	ldrh	r2, [r3, #0]
 80103e2:	2328      	movs	r3, #40	@ 0x28
 80103e4:	18fb      	adds	r3, r7, r3
 80103e6:	881b      	ldrh	r3, [r3, #0]
 80103e8:	18d3      	adds	r3, r2, r3
 80103ea:	b29b      	uxth	r3, r3
 80103ec:	b219      	sxth	r1, r3
 80103ee:	2348      	movs	r3, #72	@ 0x48
 80103f0:	18fb      	adds	r3, r7, r3
 80103f2:	881b      	ldrh	r3, [r3, #0]
 80103f4:	001a      	movs	r2, r3
 80103f6:	47a0      	blx	r4
             }
           }
           b >>= 1;
 80103f8:	221d      	movs	r2, #29
 80103fa:	18bb      	adds	r3, r7, r2
 80103fc:	18ba      	adds	r2, r7, r2
 80103fe:	7812      	ldrb	r2, [r2, #0]
 8010400:	0852      	lsrs	r2, r2, #1
 8010402:	701a      	strb	r2, [r3, #0]
           c++;
 8010404:	211e      	movs	r1, #30
 8010406:	187b      	adds	r3, r7, r1
 8010408:	2200      	movs	r2, #0
 801040a:	5e9b      	ldrsh	r3, [r3, r2]
 801040c:	b29b      	uxth	r3, r3
 801040e:	3301      	adds	r3, #1
 8010410:	b29a      	uxth	r2, r3
 8010412:	187b      	adds	r3, r7, r1
 8010414:	801a      	strh	r2, [r3, #0]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8010416:	2126      	movs	r1, #38	@ 0x26
 8010418:	187b      	adds	r3, r7, r1
 801041a:	881a      	ldrh	r2, [r3, #0]
 801041c:	187b      	adds	r3, r7, r1
 801041e:	3201      	adds	r2, #1
 8010420:	801a      	strh	r2, [r3, #0]
 8010422:	2326      	movs	r3, #38	@ 0x26
 8010424:	18fb      	adds	r3, r7, r3
 8010426:	881b      	ldrh	r3, [r3, #0]
 8010428:	2b07      	cmp	r3, #7
 801042a:	d80a      	bhi.n	8010442 <_UG_PutChar+0x422>
 801042c:	231e      	movs	r3, #30
 801042e:	18fa      	adds	r2, r7, r3
 8010430:	2314      	movs	r3, #20
 8010432:	18fb      	adds	r3, r7, r3
 8010434:	2100      	movs	r1, #0
 8010436:	5e52      	ldrsh	r2, [r2, r1]
 8010438:	2100      	movs	r1, #0
 801043a:	5e5b      	ldrsh	r3, [r3, r1]
 801043c:	429a      	cmp	r2, r3
 801043e:	da00      	bge.n	8010442 <_UG_PutChar+0x422>
 8010440:	e6a4      	b.n	801018c <_UG_PutChar+0x16c>
       for( i=0;i<bn;i++ )
 8010442:	212a      	movs	r1, #42	@ 0x2a
 8010444:	187b      	adds	r3, r7, r1
 8010446:	881a      	ldrh	r2, [r3, #0]
 8010448:	187b      	adds	r3, r7, r1
 801044a:	3201      	adds	r2, #1
 801044c:	801a      	strh	r2, [r3, #0]
 801044e:	232a      	movs	r3, #42	@ 0x2a
 8010450:	18fa      	adds	r2, r7, r3
 8010452:	2324      	movs	r3, #36	@ 0x24
 8010454:	18fb      	adds	r3, r7, r3
 8010456:	8812      	ldrh	r2, [r2, #0]
 8010458:	881b      	ldrh	r3, [r3, #0]
 801045a:	429a      	cmp	r2, r3
 801045c:	d200      	bcs.n	8010460 <_UG_PutChar+0x440>
 801045e:	e689      	b.n	8010174 <_UG_PutChar+0x154>
     for( j=0;j< gui->currentFont.char_height;j++ )
 8010460:	2128      	movs	r1, #40	@ 0x28
 8010462:	187b      	adds	r3, r7, r1
 8010464:	881a      	ldrh	r2, [r3, #0]
 8010466:	187b      	adds	r3, r7, r1
 8010468:	3201      	adds	r2, #1
 801046a:	801a      	strh	r2, [r3, #0]
 801046c:	4b93      	ldr	r3, [pc, #588]	@ (80106bc <_UG_PutChar+0x69c>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	222f      	movs	r2, #47	@ 0x2f
 8010472:	5c9b      	ldrb	r3, [r3, r2]
 8010474:	001a      	movs	r2, r3
 8010476:	2328      	movs	r3, #40	@ 0x28
 8010478:	18fb      	adds	r3, r7, r3
 801047a:	881b      	ldrh	r3, [r3, #0]
 801047c:	4293      	cmp	r3, r2
 801047e:	d200      	bcs.n	8010482 <_UG_PutChar+0x462>
 8010480:	e66f      	b.n	8010162 <_UG_PutChar+0x142>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8010482:	2316      	movs	r3, #22
 8010484:	18fb      	adds	r3, r7, r3
 8010486:	781b      	ldrb	r3, [r3, #0]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d100      	bne.n	801048e <_UG_PutChar+0x46e>
 801048c:	e15d      	b.n	801074a <_UG_PutChar+0x72a>
       if(bpixels && !trans)
 801048e:	2220      	movs	r2, #32
 8010490:	18bb      	adds	r3, r7, r2
 8010492:	881b      	ldrh	r3, [r3, #0]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d00d      	beq.n	80104b4 <_UG_PutChar+0x494>
 8010498:	2317      	movs	r3, #23
 801049a:	18fb      	adds	r3, r7, r3
 801049c:	781b      	ldrb	r3, [r3, #0]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d108      	bne.n	80104b4 <_UG_PutChar+0x494>
       {
         push_pixels(bpixels,bc);
 80104a2:	18bb      	adds	r3, r7, r2
 80104a4:	881a      	ldrh	r2, [r3, #0]
 80104a6:	2348      	movs	r3, #72	@ 0x48
 80104a8:	18fb      	adds	r3, r7, r3
 80104aa:	8819      	ldrh	r1, [r3, #0]
 80104ac:	69bb      	ldr	r3, [r7, #24]
 80104ae:	0010      	movs	r0, r2
 80104b0:	4798      	blx	r3
 80104b2:	e14a      	b.n	801074a <_UG_PutChar+0x72a>
       }
       else if(fpixels)
 80104b4:	2222      	movs	r2, #34	@ 0x22
 80104b6:	18bb      	adds	r3, r7, r2
 80104b8:	881b      	ldrh	r3, [r3, #0]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d100      	bne.n	80104c0 <_UG_PutChar+0x4a0>
 80104be:	e144      	b.n	801074a <_UG_PutChar+0x72a>
       {
         if(!trans)
 80104c0:	2317      	movs	r3, #23
 80104c2:	18fb      	adds	r3, r7, r3
 80104c4:	781b      	ldrb	r3, [r3, #0]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d000      	beq.n	80104cc <_UG_PutChar+0x4ac>
 80104ca:	e095      	b.n	80105f8 <_UG_PutChar+0x5d8>
         {
           push_pixels(fpixels,fc);
 80104cc:	18bb      	adds	r3, r7, r2
 80104ce:	881a      	ldrh	r2, [r3, #0]
 80104d0:	003b      	movs	r3, r7
 80104d2:	8819      	ldrh	r1, [r3, #0]
 80104d4:	69bb      	ldr	r3, [r7, #24]
 80104d6:	0010      	movs	r0, r2
 80104d8:	4798      	blx	r3
 80104da:	e136      	b.n	801074a <_UG_PutChar+0x72a>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 80104dc:	1d3b      	adds	r3, r7, #4
 80104de:	881a      	ldrh	r2, [r3, #0]
 80104e0:	2314      	movs	r3, #20
 80104e2:	18fb      	adds	r3, r7, r3
 80104e4:	881b      	ldrh	r3, [r3, #0]
 80104e6:	18d3      	adds	r3, r2, r3
 80104e8:	b299      	uxth	r1, r3
 80104ea:	2010      	movs	r0, #16
 80104ec:	183b      	adds	r3, r7, r0
 80104ee:	242e      	movs	r4, #46	@ 0x2e
 80104f0:	193a      	adds	r2, r7, r4
 80104f2:	8812      	ldrh	r2, [r2, #0]
 80104f4:	1a8a      	subs	r2, r1, r2
 80104f6:	801a      	strh	r2, [r3, #0]
             if(x0==x || fpixels<width)
 80104f8:	193b      	adds	r3, r7, r4
 80104fa:	881a      	ldrh	r2, [r3, #0]
 80104fc:	1d3b      	adds	r3, r7, #4
 80104fe:	2100      	movs	r1, #0
 8010500:	5e5b      	ldrsh	r3, [r3, r1]
 8010502:	429a      	cmp	r2, r3
 8010504:	d006      	beq.n	8010514 <_UG_PutChar+0x4f4>
 8010506:	2322      	movs	r3, #34	@ 0x22
 8010508:	18fa      	adds	r2, r7, r3
 801050a:	183b      	adds	r3, r7, r0
 801050c:	8812      	ldrh	r2, [r2, #0]
 801050e:	881b      	ldrh	r3, [r3, #0]
 8010510:	429a      	cmp	r2, r3
 8010512:	d23a      	bcs.n	801058a <_UG_PutChar+0x56a>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8010514:	4b69      	ldr	r3, [pc, #420]	@ (80106bc <_UG_PutChar+0x69c>)
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801051a:	4698      	mov	r8, r3
 801051c:	222e      	movs	r2, #46	@ 0x2e
 801051e:	18bb      	adds	r3, r7, r2
 8010520:	2400      	movs	r4, #0
 8010522:	5f1c      	ldrsh	r4, [r3, r4]
 8010524:	232c      	movs	r3, #44	@ 0x2c
 8010526:	18fb      	adds	r3, r7, r3
 8010528:	2000      	movs	r0, #0
 801052a:	5e1d      	ldrsh	r5, [r3, r0]
 801052c:	18ba      	adds	r2, r7, r2
 801052e:	2010      	movs	r0, #16
 8010530:	183b      	adds	r3, r7, r0
 8010532:	8812      	ldrh	r2, [r2, #0]
 8010534:	881b      	ldrh	r3, [r3, #0]
 8010536:	18d3      	adds	r3, r2, r3
 8010538:	b29b      	uxth	r3, r3
 801053a:	3b01      	subs	r3, #1
 801053c:	b29b      	uxth	r3, r3
 801053e:	b21e      	sxth	r6, r3
 8010540:	2322      	movs	r3, #34	@ 0x22
 8010542:	18fb      	adds	r3, r7, r3
 8010544:	881a      	ldrh	r2, [r3, #0]
 8010546:	2014      	movs	r0, #20
 8010548:	183b      	adds	r3, r7, r0
 801054a:	2000      	movs	r0, #0
 801054c:	5e1b      	ldrsh	r3, [r3, r0]
 801054e:	0019      	movs	r1, r3
 8010550:	0010      	movs	r0, r2
 8010552:	f7ef fe7f 	bl	8000254 <__divsi3>
 8010556:	0003      	movs	r3, r0
 8010558:	b29a      	uxth	r2, r3
 801055a:	212c      	movs	r1, #44	@ 0x2c
 801055c:	187b      	adds	r3, r7, r1
 801055e:	881b      	ldrh	r3, [r3, #0]
 8010560:	18d3      	adds	r3, r2, r3
 8010562:	b29b      	uxth	r3, r3
 8010564:	b21b      	sxth	r3, r3
 8010566:	0032      	movs	r2, r6
 8010568:	0029      	movs	r1, r5
 801056a:	0020      	movs	r0, r4
 801056c:	47c0      	blx	r8
 801056e:	0003      	movs	r3, r0
 8010570:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8010572:	2422      	movs	r4, #34	@ 0x22
 8010574:	193b      	adds	r3, r7, r4
 8010576:	881a      	ldrh	r2, [r3, #0]
 8010578:	003b      	movs	r3, r7
 801057a:	8819      	ldrh	r1, [r3, #0]
 801057c:	69bb      	ldr	r3, [r7, #24]
 801057e:	0010      	movs	r0, r2
 8010580:	4798      	blx	r3
               fpixels=0;
 8010582:	193b      	adds	r3, r7, r4
 8010584:	2200      	movs	r2, #0
 8010586:	801a      	strh	r2, [r3, #0]
 8010588:	e036      	b.n	80105f8 <_UG_PutChar+0x5d8>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 801058a:	4b4c      	ldr	r3, [pc, #304]	@ (80106bc <_UG_PutChar+0x69c>)
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010590:	001c      	movs	r4, r3
 8010592:	262e      	movs	r6, #46	@ 0x2e
 8010594:	19bb      	adds	r3, r7, r6
 8010596:	2000      	movs	r0, #0
 8010598:	5e18      	ldrsh	r0, [r3, r0]
 801059a:	252c      	movs	r5, #44	@ 0x2c
 801059c:	197b      	adds	r3, r7, r5
 801059e:	2200      	movs	r2, #0
 80105a0:	5e9a      	ldrsh	r2, [r3, r2]
 80105a2:	4694      	mov	ip, r2
 80105a4:	19ba      	adds	r2, r7, r6
 80105a6:	2310      	movs	r3, #16
 80105a8:	18fb      	adds	r3, r7, r3
 80105aa:	8812      	ldrh	r2, [r2, #0]
 80105ac:	881b      	ldrh	r3, [r3, #0]
 80105ae:	18d3      	adds	r3, r2, r3
 80105b0:	b29b      	uxth	r3, r3
 80105b2:	3b01      	subs	r3, #1
 80105b4:	b29b      	uxth	r3, r3
 80105b6:	b21a      	sxth	r2, r3
 80105b8:	197b      	adds	r3, r7, r5
 80105ba:	2100      	movs	r1, #0
 80105bc:	5e5b      	ldrsh	r3, [r3, r1]
 80105be:	4661      	mov	r1, ip
 80105c0:	47a0      	blx	r4
 80105c2:	0003      	movs	r3, r0
 80105c4:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 80105c6:	2422      	movs	r4, #34	@ 0x22
 80105c8:	193b      	adds	r3, r7, r4
 80105ca:	881a      	ldrh	r2, [r3, #0]
 80105cc:	003b      	movs	r3, r7
 80105ce:	8819      	ldrh	r1, [r3, #0]
 80105d0:	69bb      	ldr	r3, [r7, #24]
 80105d2:	0010      	movs	r0, r2
 80105d4:	4798      	blx	r3
               fpixels -= width;
 80105d6:	193b      	adds	r3, r7, r4
 80105d8:	1939      	adds	r1, r7, r4
 80105da:	2210      	movs	r2, #16
 80105dc:	18ba      	adds	r2, r7, r2
 80105de:	8809      	ldrh	r1, [r1, #0]
 80105e0:	8812      	ldrh	r2, [r2, #0]
 80105e2:	1a8a      	subs	r2, r1, r2
 80105e4:	801a      	strh	r2, [r3, #0]
               x0=x;
 80105e6:	19bb      	adds	r3, r7, r6
 80105e8:	1d3a      	adds	r2, r7, #4
 80105ea:	8812      	ldrh	r2, [r2, #0]
 80105ec:	801a      	strh	r2, [r3, #0]
               y0++;
 80105ee:	197b      	adds	r3, r7, r5
 80105f0:	881a      	ldrh	r2, [r3, #0]
 80105f2:	197b      	adds	r3, r7, r5
 80105f4:	3201      	adds	r2, #1
 80105f6:	801a      	strh	r2, [r3, #0]
           while(fpixels)
 80105f8:	2322      	movs	r3, #34	@ 0x22
 80105fa:	18fb      	adds	r3, r7, r3
 80105fc:	881b      	ldrh	r3, [r3, #0]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d000      	beq.n	8010604 <_UG_PutChar+0x5e4>
 8010602:	e76b      	b.n	80104dc <_UG_PutChar+0x4bc>
 8010604:	e0a1      	b.n	801074a <_UG_PutChar+0x72a>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8010606:	4b2d      	ldr	r3, [pc, #180]	@ (80106bc <_UG_PutChar+0x69c>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	222c      	movs	r2, #44	@ 0x2c
 801060c:	5c9b      	ldrb	r3, [r3, r2]
 801060e:	2b01      	cmp	r3, #1
 8010610:	d000      	beq.n	8010614 <_UG_PutChar+0x5f4>
 8010612:	e09a      	b.n	801074a <_UG_PutChar+0x72a>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8010614:	2328      	movs	r3, #40	@ 0x28
 8010616:	18fb      	adds	r3, r7, r3
 8010618:	2200      	movs	r2, #0
 801061a:	801a      	strh	r2, [r3, #0]
 801061c:	e08a      	b.n	8010734 <_UG_PutChar+0x714>
     {
       for( i=0;i<actual_char_width;i++ )
 801061e:	232a      	movs	r3, #42	@ 0x2a
 8010620:	18fb      	adds	r3, r7, r3
 8010622:	2200      	movs	r2, #0
 8010624:	801a      	strh	r2, [r3, #0]
 8010626:	e069      	b.n	80106fc <_UG_PutChar+0x6dc>
       {
         b = *data++;
 8010628:	68bb      	ldr	r3, [r7, #8]
 801062a:	1c5a      	adds	r2, r3, #1
 801062c:	60ba      	str	r2, [r7, #8]
 801062e:	241d      	movs	r4, #29
 8010630:	193a      	adds	r2, r7, r4
 8010632:	781b      	ldrb	r3, [r3, #0]
 8010634:	7013      	strb	r3, [r2, #0]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8010636:	003b      	movs	r3, r7
 8010638:	881b      	ldrh	r3, [r3, #0]
 801063a:	22ff      	movs	r2, #255	@ 0xff
 801063c:	4013      	ands	r3, r2
 801063e:	193a      	adds	r2, r7, r4
 8010640:	7812      	ldrb	r2, [r2, #0]
 8010642:	435a      	muls	r2, r3
 8010644:	2548      	movs	r5, #72	@ 0x48
 8010646:	197b      	adds	r3, r7, r5
 8010648:	881b      	ldrh	r3, [r3, #0]
 801064a:	21ff      	movs	r1, #255	@ 0xff
 801064c:	400b      	ands	r3, r1
 801064e:	1939      	adds	r1, r7, r4
 8010650:	7809      	ldrb	r1, [r1, #0]
 8010652:	2080      	movs	r0, #128	@ 0x80
 8010654:	0040      	lsls	r0, r0, #1
 8010656:	1a41      	subs	r1, r0, r1
 8010658:	434b      	muls	r3, r1
 801065a:	18d3      	adds	r3, r2, r3
 801065c:	121b      	asrs	r3, r3, #8
 801065e:	b21b      	sxth	r3, r3
 8010660:	22ff      	movs	r2, #255	@ 0xff
 8010662:	4013      	ands	r3, r2
 8010664:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 8010666:	003b      	movs	r3, r7
 8010668:	8819      	ldrh	r1, [r3, #0]
 801066a:	23ff      	movs	r3, #255	@ 0xff
 801066c:	021b      	lsls	r3, r3, #8
 801066e:	400b      	ands	r3, r1
 8010670:	1939      	adds	r1, r7, r4
 8010672:	7809      	ldrb	r1, [r1, #0]
 8010674:	4359      	muls	r1, r3
 8010676:	197b      	adds	r3, r7, r5
 8010678:	8818      	ldrh	r0, [r3, #0]
 801067a:	23ff      	movs	r3, #255	@ 0xff
 801067c:	021b      	lsls	r3, r3, #8
 801067e:	4003      	ands	r3, r0
 8010680:	1938      	adds	r0, r7, r4
 8010682:	7800      	ldrb	r0, [r0, #0]
 8010684:	2480      	movs	r4, #128	@ 0x80
 8010686:	0064      	lsls	r4, r4, #1
 8010688:	1a20      	subs	r0, r4, r0
 801068a:	4343      	muls	r3, r0
 801068c:	18cb      	adds	r3, r1, r3
 801068e:	121b      	asrs	r3, r3, #8
 8010690:	b21b      	sxth	r3, r3
 8010692:	21ff      	movs	r1, #255	@ 0xff
 8010694:	438b      	bics	r3, r1
 8010696:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8010698:	4313      	orrs	r3, r2
 801069a:	b21a      	sxth	r2, r3
 801069c:	2112      	movs	r1, #18
 801069e:	187b      	adds	r3, r7, r1
 80106a0:	801a      	strh	r2, [r3, #0]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 80106a2:	2316      	movs	r3, #22
 80106a4:	18fb      	adds	r3, r7, r3
 80106a6:	781b      	ldrb	r3, [r3, #0]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d009      	beq.n	80106c0 <_UG_PutChar+0x6a0>
         {
           push_pixels(1,color);                                                          // Accelerated output
 80106ac:	187b      	adds	r3, r7, r1
 80106ae:	881a      	ldrh	r2, [r3, #0]
 80106b0:	69bb      	ldr	r3, [r7, #24]
 80106b2:	0011      	movs	r1, r2
 80106b4:	2001      	movs	r0, #1
 80106b6:	4798      	blx	r3
 80106b8:	e01a      	b.n	80106f0 <_UG_PutChar+0x6d0>
 80106ba:	46c0      	nop			@ (mov r8, r8)
 80106bc:	20000c44 	.word	0x20000c44
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 80106c0:	4b27      	ldr	r3, [pc, #156]	@ (8010760 <_UG_PutChar+0x740>)
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	685b      	ldr	r3, [r3, #4]
 80106c8:	1d3a      	adds	r2, r7, #4
 80106ca:	8811      	ldrh	r1, [r2, #0]
 80106cc:	222a      	movs	r2, #42	@ 0x2a
 80106ce:	18ba      	adds	r2, r7, r2
 80106d0:	8812      	ldrh	r2, [r2, #0]
 80106d2:	188a      	adds	r2, r1, r2
 80106d4:	b292      	uxth	r2, r2
 80106d6:	b210      	sxth	r0, r2
 80106d8:	1cba      	adds	r2, r7, #2
 80106da:	8811      	ldrh	r1, [r2, #0]
 80106dc:	2228      	movs	r2, #40	@ 0x28
 80106de:	18ba      	adds	r2, r7, r2
 80106e0:	8812      	ldrh	r2, [r2, #0]
 80106e2:	188a      	adds	r2, r1, r2
 80106e4:	b292      	uxth	r2, r2
 80106e6:	b211      	sxth	r1, r2
 80106e8:	2212      	movs	r2, #18
 80106ea:	18ba      	adds	r2, r7, r2
 80106ec:	8812      	ldrh	r2, [r2, #0]
 80106ee:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 80106f0:	212a      	movs	r1, #42	@ 0x2a
 80106f2:	187b      	adds	r3, r7, r1
 80106f4:	881a      	ldrh	r2, [r3, #0]
 80106f6:	187b      	adds	r3, r7, r1
 80106f8:	3201      	adds	r2, #1
 80106fa:	801a      	strh	r2, [r3, #0]
 80106fc:	232a      	movs	r3, #42	@ 0x2a
 80106fe:	18fb      	adds	r3, r7, r3
 8010700:	881a      	ldrh	r2, [r3, #0]
 8010702:	2014      	movs	r0, #20
 8010704:	183b      	adds	r3, r7, r0
 8010706:	2100      	movs	r1, #0
 8010708:	5e5b      	ldrsh	r3, [r3, r1]
 801070a:	429a      	cmp	r2, r3
 801070c:	da00      	bge.n	8010710 <_UG_PutChar+0x6f0>
 801070e:	e78b      	b.n	8010628 <_UG_PutChar+0x608>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 8010710:	68ba      	ldr	r2, [r7, #8]
 8010712:	4b13      	ldr	r3, [pc, #76]	@ (8010760 <_UG_PutChar+0x740>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	212e      	movs	r1, #46	@ 0x2e
 8010718:	5c5b      	ldrb	r3, [r3, r1]
 801071a:	0019      	movs	r1, r3
 801071c:	183b      	adds	r3, r7, r0
 801071e:	2000      	movs	r0, #0
 8010720:	5e1b      	ldrsh	r3, [r3, r0]
 8010722:	1acb      	subs	r3, r1, r3
 8010724:	18d3      	adds	r3, r2, r3
 8010726:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8010728:	2128      	movs	r1, #40	@ 0x28
 801072a:	187b      	adds	r3, r7, r1
 801072c:	881a      	ldrh	r2, [r3, #0]
 801072e:	187b      	adds	r3, r7, r1
 8010730:	3201      	adds	r2, #1
 8010732:	801a      	strh	r2, [r3, #0]
 8010734:	4b0a      	ldr	r3, [pc, #40]	@ (8010760 <_UG_PutChar+0x740>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	222f      	movs	r2, #47	@ 0x2f
 801073a:	5c9b      	ldrb	r3, [r3, r2]
 801073c:	001a      	movs	r2, r3
 801073e:	2328      	movs	r3, #40	@ 0x28
 8010740:	18fb      	adds	r3, r7, r3
 8010742:	881b      	ldrh	r3, [r3, #0]
 8010744:	4293      	cmp	r3, r2
 8010746:	d200      	bcs.n	801074a <_UG_PutChar+0x72a>
 8010748:	e769      	b.n	801061e <_UG_PutChar+0x5fe>
     }
   }
   #endif
   return (actual_char_width);
 801074a:	2314      	movs	r3, #20
 801074c:	18fb      	adds	r3, r7, r3
 801074e:	2200      	movs	r2, #0
 8010750:	5e9b      	ldrsh	r3, [r3, r2]
}
 8010752:	0018      	movs	r0, r3
 8010754:	46bd      	mov	sp, r7
 8010756:	b00c      	add	sp, #48	@ 0x30
 8010758:	bc80      	pop	{r7}
 801075a:	46b8      	mov	r8, r7
 801075c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801075e:	46c0      	nop			@ (mov r8, r8)
 8010760:	20000c44 	.word	0x20000c44

08010764 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 8010764:	b590      	push	{r4, r7, lr}
 8010766:	b089      	sub	sp, #36	@ 0x24
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 801076c:	4b77      	ldr	r3, [pc, #476]	@ (801094c <_UG_ProcessTouchData+0x1e8>)
 801076e:	681a      	ldr	r2, [r3, #0]
 8010770:	231a      	movs	r3, #26
 8010772:	18fb      	adds	r3, r7, r3
 8010774:	88d2      	ldrh	r2, [r2, #6]
 8010776:	801a      	strh	r2, [r3, #0]
   yp = gui->touch.yp;
 8010778:	4b74      	ldr	r3, [pc, #464]	@ (801094c <_UG_ProcessTouchData+0x1e8>)
 801077a:	681a      	ldr	r2, [r3, #0]
 801077c:	2318      	movs	r3, #24
 801077e:	18fb      	adds	r3, r7, r3
 8010780:	8912      	ldrh	r2, [r2, #8]
 8010782:	801a      	strh	r2, [r3, #0]
   tchstate = gui->touch.state;
 8010784:	4b71      	ldr	r3, [pc, #452]	@ (801094c <_UG_ProcessTouchData+0x1e8>)
 8010786:	681a      	ldr	r2, [r3, #0]
 8010788:	2317      	movs	r3, #23
 801078a:	18fb      	adds	r3, r7, r3
 801078c:	7912      	ldrb	r2, [r2, #4]
 801078e:	701a      	strb	r2, [r3, #0]

   objcnt = wnd->objcnt;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	781a      	ldrb	r2, [r3, #0]
 8010794:	2314      	movs	r3, #20
 8010796:	18fb      	adds	r3, r7, r3
 8010798:	801a      	strh	r2, [r3, #0]
   for(i=0; i<objcnt; i++)
 801079a:	231e      	movs	r3, #30
 801079c:	18fb      	adds	r3, r7, r3
 801079e:	2200      	movs	r2, #0
 80107a0:	801a      	strh	r2, [r3, #0]
 80107a2:	e0c5      	b.n	8010930 <_UG_ProcessTouchData+0x1cc>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	685a      	ldr	r2, [r3, #4]
 80107a8:	231e      	movs	r3, #30
 80107aa:	18fb      	adds	r3, r7, r3
 80107ac:	881b      	ldrh	r3, [r3, #0]
 80107ae:	015b      	lsls	r3, r3, #5
 80107b0:	18d3      	adds	r3, r2, r3
 80107b2:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80107b4:	200f      	movs	r0, #15
 80107b6:	183b      	adds	r3, r7, r0
 80107b8:	693a      	ldr	r2, [r7, #16]
 80107ba:	7812      	ldrb	r2, [r2, #0]
 80107bc:	701a      	strb	r2, [r3, #0]
      objtouch = obj->touch_state;
 80107be:	211d      	movs	r1, #29
 80107c0:	187b      	adds	r3, r7, r1
 80107c2:	693a      	ldr	r2, [r7, #16]
 80107c4:	7852      	ldrb	r2, [r2, #1]
 80107c6:	701a      	strb	r2, [r3, #0]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 80107c8:	183b      	adds	r3, r7, r0
 80107ca:	781b      	ldrb	r3, [r3, #0]
 80107cc:	2201      	movs	r2, #1
 80107ce:	4013      	ands	r3, r2
 80107d0:	d000      	beq.n	80107d4 <_UG_ProcessTouchData+0x70>
 80107d2:	e0a2      	b.n	801091a <_UG_ProcessTouchData+0x1b6>
 80107d4:	183b      	adds	r3, r7, r0
 80107d6:	781b      	ldrb	r3, [r3, #0]
 80107d8:	2202      	movs	r2, #2
 80107da:	4013      	ands	r3, r2
 80107dc:	d100      	bne.n	80107e0 <_UG_ProcessTouchData+0x7c>
 80107de:	e09c      	b.n	801091a <_UG_ProcessTouchData+0x1b6>
 80107e0:	183b      	adds	r3, r7, r0
 80107e2:	781b      	ldrb	r3, [r3, #0]
 80107e4:	2208      	movs	r2, #8
 80107e6:	4013      	ands	r3, r2
 80107e8:	d100      	bne.n	80107ec <_UG_ProcessTouchData+0x88>
 80107ea:	e096      	b.n	801091a <_UG_ProcessTouchData+0x1b6>
 80107ec:	183b      	adds	r3, r7, r0
 80107ee:	781b      	ldrb	r3, [r3, #0]
 80107f0:	2240      	movs	r2, #64	@ 0x40
 80107f2:	4013      	ands	r3, r2
 80107f4:	d000      	beq.n	80107f8 <_UG_ProcessTouchData+0x94>
 80107f6:	e090      	b.n	801091a <_UG_ProcessTouchData+0x1b6>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 80107f8:	2317      	movs	r3, #23
 80107fa:	18fb      	adds	r3, r7, r3
 80107fc:	781b      	ldrb	r3, [r3, #0]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d05f      	beq.n	80108c2 <_UG_ProcessTouchData+0x15e>
 8010802:	231a      	movs	r3, #26
 8010804:	18fb      	adds	r3, r7, r3
 8010806:	2200      	movs	r2, #0
 8010808:	5e9b      	ldrsh	r3, [r3, r2]
 801080a:	3301      	adds	r3, #1
 801080c:	d059      	beq.n	80108c2 <_UG_ProcessTouchData+0x15e>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 801080e:	187b      	adds	r3, r7, r1
 8010810:	781b      	ldrb	r3, [r3, #0]
 8010812:	2240      	movs	r2, #64	@ 0x40
 8010814:	4013      	ands	r3, r2
 8010816:	d10c      	bne.n	8010832 <_UG_ProcessTouchData+0xce>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 8010818:	187b      	adds	r3, r7, r1
 801081a:	0008      	movs	r0, r1
 801081c:	187a      	adds	r2, r7, r1
 801081e:	7812      	ldrb	r2, [r2, #0]
 8010820:	2105      	movs	r1, #5
 8010822:	430a      	orrs	r2, r1
 8010824:	701a      	strb	r2, [r3, #0]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 8010826:	183b      	adds	r3, r7, r0
 8010828:	183a      	adds	r2, r7, r0
 801082a:	7812      	ldrb	r2, [r2, #0]
 801082c:	2118      	movs	r1, #24
 801082e:	438a      	bics	r2, r1
 8010830:	701a      	strb	r2, [r3, #0]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8010832:	201d      	movs	r0, #29
 8010834:	183b      	adds	r3, r7, r0
 8010836:	183a      	adds	r2, r7, r0
 8010838:	7812      	ldrb	r2, [r2, #0]
 801083a:	2120      	movs	r1, #32
 801083c:	438a      	bics	r2, r1
 801083e:	701a      	strb	r2, [r3, #0]
            if ( xp >= obj->a_abs.xs )
 8010840:	693b      	ldr	r3, [r7, #16]
 8010842:	2208      	movs	r2, #8
 8010844:	5e9b      	ldrsh	r3, [r3, r2]
 8010846:	211a      	movs	r1, #26
 8010848:	187a      	adds	r2, r7, r1
 801084a:	2400      	movs	r4, #0
 801084c:	5f12      	ldrsh	r2, [r2, r4]
 801084e:	429a      	cmp	r2, r3
 8010850:	db2f      	blt.n	80108b2 <_UG_ProcessTouchData+0x14e>
            {
               if ( xp <= obj->a_abs.xe )
 8010852:	693b      	ldr	r3, [r7, #16]
 8010854:	220c      	movs	r2, #12
 8010856:	5e9b      	ldrsh	r3, [r3, r2]
 8010858:	187a      	adds	r2, r7, r1
 801085a:	2100      	movs	r1, #0
 801085c:	5e52      	ldrsh	r2, [r2, r1]
 801085e:	429a      	cmp	r2, r3
 8010860:	dc27      	bgt.n	80108b2 <_UG_ProcessTouchData+0x14e>
               {
                  if ( yp >= obj->a_abs.ys )
 8010862:	693b      	ldr	r3, [r7, #16]
 8010864:	220a      	movs	r2, #10
 8010866:	5e9b      	ldrsh	r3, [r3, r2]
 8010868:	2118      	movs	r1, #24
 801086a:	187a      	adds	r2, r7, r1
 801086c:	2400      	movs	r4, #0
 801086e:	5f12      	ldrsh	r2, [r2, r4]
 8010870:	429a      	cmp	r2, r3
 8010872:	db1e      	blt.n	80108b2 <_UG_ProcessTouchData+0x14e>
                  {
                     if ( yp <= obj->a_abs.ye )
 8010874:	693b      	ldr	r3, [r7, #16]
 8010876:	220e      	movs	r2, #14
 8010878:	5e9b      	ldrsh	r3, [r3, r2]
 801087a:	187a      	adds	r2, r7, r1
 801087c:	2100      	movs	r1, #0
 801087e:	5e52      	ldrsh	r2, [r2, r1]
 8010880:	429a      	cmp	r2, r3
 8010882:	dc16      	bgt.n	80108b2 <_UG_ProcessTouchData+0x14e>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8010884:	183b      	adds	r3, r7, r0
 8010886:	183a      	adds	r2, r7, r0
 8010888:	7812      	ldrb	r2, [r2, #0]
 801088a:	2120      	movs	r1, #32
 801088c:	430a      	orrs	r2, r1
 801088e:	701a      	strb	r2, [r3, #0]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8010890:	183b      	adds	r3, r7, r0
 8010892:	781b      	ldrb	r3, [r3, #0]
 8010894:	2240      	movs	r2, #64	@ 0x40
 8010896:	4013      	ands	r3, r2
 8010898:	d10b      	bne.n	80108b2 <_UG_ProcessTouchData+0x14e>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 801089a:	183b      	adds	r3, r7, r0
 801089c:	183a      	adds	r2, r7, r0
 801089e:	7812      	ldrb	r2, [r2, #0]
 80108a0:	2104      	movs	r1, #4
 80108a2:	438a      	bics	r2, r1
 80108a4:	701a      	strb	r2, [r3, #0]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 80108a6:	183b      	adds	r3, r7, r0
 80108a8:	183a      	adds	r2, r7, r0
 80108aa:	7812      	ldrb	r2, [r2, #0]
 80108ac:	2102      	movs	r1, #2
 80108ae:	430a      	orrs	r2, r1
 80108b0:	701a      	strb	r2, [r3, #0]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 80108b2:	221d      	movs	r2, #29
 80108b4:	18bb      	adds	r3, r7, r2
 80108b6:	18ba      	adds	r2, r7, r2
 80108b8:	7812      	ldrb	r2, [r2, #0]
 80108ba:	2140      	movs	r1, #64	@ 0x40
 80108bc:	430a      	orrs	r2, r1
 80108be:	701a      	strb	r2, [r3, #0]
 80108c0:	e02b      	b.n	801091a <_UG_ProcessTouchData+0x1b6>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 80108c2:	211d      	movs	r1, #29
 80108c4:	187b      	adds	r3, r7, r1
 80108c6:	781b      	ldrb	r3, [r3, #0]
 80108c8:	2240      	movs	r2, #64	@ 0x40
 80108ca:	4013      	ands	r3, r2
 80108cc:	d025      	beq.n	801091a <_UG_ProcessTouchData+0x1b6>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 80108ce:	187b      	adds	r3, r7, r1
 80108d0:	781b      	ldrb	r3, [r3, #0]
 80108d2:	2220      	movs	r2, #32
 80108d4:	4013      	ands	r3, r2
 80108d6:	d006      	beq.n	80108e6 <_UG_ProcessTouchData+0x182>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 80108d8:	187b      	adds	r3, r7, r1
 80108da:	187a      	adds	r2, r7, r1
 80108dc:	7812      	ldrb	r2, [r2, #0]
 80108de:	2108      	movs	r1, #8
 80108e0:	430a      	orrs	r2, r1
 80108e2:	701a      	strb	r2, [r3, #0]
 80108e4:	e006      	b.n	80108f4 <_UG_ProcessTouchData+0x190>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 80108e6:	221d      	movs	r2, #29
 80108e8:	18bb      	adds	r3, r7, r2
 80108ea:	18ba      	adds	r2, r7, r2
 80108ec:	7812      	ldrb	r2, [r2, #0]
 80108ee:	2110      	movs	r1, #16
 80108f0:	430a      	orrs	r2, r1
 80108f2:	701a      	strb	r2, [r3, #0]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 80108f4:	211d      	movs	r1, #29
 80108f6:	187b      	adds	r3, r7, r1
 80108f8:	781b      	ldrb	r3, [r3, #0]
 80108fa:	2240      	movs	r2, #64	@ 0x40
 80108fc:	4013      	ands	r3, r2
 80108fe:	d005      	beq.n	801090c <_UG_ProcessTouchData+0x1a8>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 8010900:	187b      	adds	r3, r7, r1
 8010902:	187a      	adds	r2, r7, r1
 8010904:	7812      	ldrb	r2, [r2, #0]
 8010906:	2101      	movs	r1, #1
 8010908:	430a      	orrs	r2, r1
 801090a:	701a      	strb	r2, [r3, #0]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 801090c:	221d      	movs	r2, #29
 801090e:	18bb      	adds	r3, r7, r2
 8010910:	18ba      	adds	r2, r7, r2
 8010912:	7812      	ldrb	r2, [r2, #0]
 8010914:	2146      	movs	r1, #70	@ 0x46
 8010916:	438a      	bics	r2, r1
 8010918:	701a      	strb	r2, [r3, #0]
         }
      }
      obj->touch_state = objtouch;
 801091a:	693b      	ldr	r3, [r7, #16]
 801091c:	221d      	movs	r2, #29
 801091e:	18ba      	adds	r2, r7, r2
 8010920:	7812      	ldrb	r2, [r2, #0]
 8010922:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 8010924:	211e      	movs	r1, #30
 8010926:	187b      	adds	r3, r7, r1
 8010928:	881a      	ldrh	r2, [r3, #0]
 801092a:	187b      	adds	r3, r7, r1
 801092c:	3201      	adds	r2, #1
 801092e:	801a      	strh	r2, [r3, #0]
 8010930:	231e      	movs	r3, #30
 8010932:	18fa      	adds	r2, r7, r3
 8010934:	2314      	movs	r3, #20
 8010936:	18fb      	adds	r3, r7, r3
 8010938:	8812      	ldrh	r2, [r2, #0]
 801093a:	881b      	ldrh	r3, [r3, #0]
 801093c:	429a      	cmp	r2, r3
 801093e:	d200      	bcs.n	8010942 <_UG_ProcessTouchData+0x1de>
 8010940:	e730      	b.n	80107a4 <_UG_ProcessTouchData+0x40>
   }
}
 8010942:	46c0      	nop			@ (mov r8, r8)
 8010944:	46c0      	nop			@ (mov r8, r8)
 8010946:	46bd      	mov	sp, r7
 8010948:	b009      	add	sp, #36	@ 0x24
 801094a:	bd90      	pop	{r4, r7, pc}
 801094c:	20000c44 	.word	0x20000c44

08010950 <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b086      	sub	sp, #24
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	781a      	ldrb	r2, [r3, #0]
 801095c:	2314      	movs	r3, #20
 801095e:	18fb      	adds	r3, r7, r3
 8010960:	801a      	strh	r2, [r3, #0]
   for(i=0; i<objcnt; i++)
 8010962:	2316      	movs	r3, #22
 8010964:	18fb      	adds	r3, r7, r3
 8010966:	2200      	movs	r2, #0
 8010968:	801a      	strh	r2, [r3, #0]
 801096a:	e043      	b.n	80109f4 <_UG_UpdateObjects+0xa4>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	685a      	ldr	r2, [r3, #4]
 8010970:	2316      	movs	r3, #22
 8010972:	18fb      	adds	r3, r7, r3
 8010974:	881b      	ldrh	r3, [r3, #0]
 8010976:	015b      	lsls	r3, r3, #5
 8010978:	18d3      	adds	r3, r2, r3
 801097a:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 801097c:	210f      	movs	r1, #15
 801097e:	187b      	adds	r3, r7, r1
 8010980:	693a      	ldr	r2, [r7, #16]
 8010982:	7812      	ldrb	r2, [r2, #0]
 8010984:	701a      	strb	r2, [r3, #0]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 8010986:	230e      	movs	r3, #14
 8010988:	18fb      	adds	r3, r7, r3
 801098a:	693a      	ldr	r2, [r7, #16]
 801098c:	7852      	ldrb	r2, [r2, #1]
 801098e:	701a      	strb	r2, [r3, #0]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8010990:	187b      	adds	r3, r7, r1
 8010992:	781b      	ldrb	r3, [r3, #0]
 8010994:	2201      	movs	r2, #1
 8010996:	4013      	ands	r3, r2
 8010998:	d126      	bne.n	80109e8 <_UG_UpdateObjects+0x98>
 801099a:	187b      	adds	r3, r7, r1
 801099c:	781b      	ldrb	r3, [r3, #0]
 801099e:	2202      	movs	r2, #2
 80109a0:	4013      	ands	r3, r2
 80109a2:	d021      	beq.n	80109e8 <_UG_UpdateObjects+0x98>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 80109a4:	187b      	adds	r3, r7, r1
 80109a6:	781b      	ldrb	r3, [r3, #0]
 80109a8:	2220      	movs	r2, #32
 80109aa:	4013      	ands	r3, r2
 80109ac:	d005      	beq.n	80109ba <_UG_UpdateObjects+0x6a>
         {
            obj->update(wnd,obj);
 80109ae:	693b      	ldr	r3, [r7, #16]
 80109b0:	685b      	ldr	r3, [r3, #4]
 80109b2:	6939      	ldr	r1, [r7, #16]
 80109b4:	687a      	ldr	r2, [r7, #4]
 80109b6:	0010      	movs	r0, r2
 80109b8:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 80109ba:	210f      	movs	r1, #15
 80109bc:	187b      	adds	r3, r7, r1
 80109be:	781b      	ldrb	r3, [r3, #0]
 80109c0:	2208      	movs	r2, #8
 80109c2:	4013      	ands	r3, r2
 80109c4:	d010      	beq.n	80109e8 <_UG_UpdateObjects+0x98>
 80109c6:	187b      	adds	r3, r7, r1
 80109c8:	781b      	ldrb	r3, [r3, #0]
 80109ca:	b25b      	sxtb	r3, r3
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	da0b      	bge.n	80109e8 <_UG_UpdateObjects+0x98>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 80109d0:	230e      	movs	r3, #14
 80109d2:	18fb      	adds	r3, r7, r3
 80109d4:	781b      	ldrb	r3, [r3, #0]
 80109d6:	2241      	movs	r2, #65	@ 0x41
 80109d8:	4013      	ands	r3, r2
 80109da:	d005      	beq.n	80109e8 <_UG_UpdateObjects+0x98>
            {
               obj->update(wnd,obj);
 80109dc:	693b      	ldr	r3, [r7, #16]
 80109de:	685b      	ldr	r3, [r3, #4]
 80109e0:	6939      	ldr	r1, [r7, #16]
 80109e2:	687a      	ldr	r2, [r7, #4]
 80109e4:	0010      	movs	r0, r2
 80109e6:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 80109e8:	2116      	movs	r1, #22
 80109ea:	187b      	adds	r3, r7, r1
 80109ec:	881a      	ldrh	r2, [r3, #0]
 80109ee:	187b      	adds	r3, r7, r1
 80109f0:	3201      	adds	r2, #1
 80109f2:	801a      	strh	r2, [r3, #0]
 80109f4:	2316      	movs	r3, #22
 80109f6:	18fa      	adds	r2, r7, r3
 80109f8:	2314      	movs	r3, #20
 80109fa:	18fb      	adds	r3, r7, r3
 80109fc:	8812      	ldrh	r2, [r2, #0]
 80109fe:	881b      	ldrh	r3, [r3, #0]
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d3b3      	bcc.n	801096c <_UG_UpdateObjects+0x1c>
            }
         }
         #endif
      }
   }
}
 8010a04:	46c0      	nop			@ (mov r8, r8)
 8010a06:	46c0      	nop			@ (mov r8, r8)
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	b006      	add	sp, #24
 8010a0c:	bd80      	pop	{r7, pc}
	...

08010a10 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b086      	sub	sp, #24
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8010a18:	4b2a      	ldr	r3, [pc, #168]	@ (8010ac4 <_UG_HandleEvents+0xb4>)
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 8010a1e:	4b29      	ldr	r3, [pc, #164]	@ (8010ac4 <_UG_HandleEvents+0xb4>)
 8010a20:	2202      	movs	r2, #2
 8010a22:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	781a      	ldrb	r2, [r3, #0]
 8010a28:	2314      	movs	r3, #20
 8010a2a:	18fb      	adds	r3, r7, r3
 8010a2c:	801a      	strh	r2, [r3, #0]
   for(i=0; i<objcnt; i++)
 8010a2e:	2316      	movs	r3, #22
 8010a30:	18fb      	adds	r3, r7, r3
 8010a32:	2200      	movs	r2, #0
 8010a34:	801a      	strh	r2, [r3, #0]
 8010a36:	e037      	b.n	8010aa8 <_UG_HandleEvents+0x98>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	685a      	ldr	r2, [r3, #4]
 8010a3c:	2316      	movs	r3, #22
 8010a3e:	18fb      	adds	r3, r7, r3
 8010a40:	881b      	ldrh	r3, [r3, #0]
 8010a42:	015b      	lsls	r3, r3, #5
 8010a44:	18d3      	adds	r3, r2, r3
 8010a46:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8010a48:	210f      	movs	r1, #15
 8010a4a:	187b      	adds	r3, r7, r1
 8010a4c:	693a      	ldr	r2, [r7, #16]
 8010a4e:	7812      	ldrb	r2, [r2, #0]
 8010a50:	701a      	strb	r2, [r3, #0]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8010a52:	187b      	adds	r3, r7, r1
 8010a54:	781b      	ldrb	r3, [r3, #0]
 8010a56:	2201      	movs	r2, #1
 8010a58:	4013      	ands	r3, r2
 8010a5a:	d11f      	bne.n	8010a9c <_UG_HandleEvents+0x8c>
 8010a5c:	187b      	adds	r3, r7, r1
 8010a5e:	781b      	ldrb	r3, [r3, #0]
 8010a60:	2202      	movs	r2, #2
 8010a62:	4013      	ands	r3, r2
 8010a64:	d01a      	beq.n	8010a9c <_UG_HandleEvents+0x8c>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8010a66:	693b      	ldr	r3, [r7, #16]
 8010a68:	7e9b      	ldrb	r3, [r3, #26]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d016      	beq.n	8010a9c <_UG_HandleEvents+0x8c>
         {
            msg.src = obj;
 8010a6e:	4b15      	ldr	r3, [pc, #84]	@ (8010ac4 <_UG_HandleEvents+0xb4>)
 8010a70:	693a      	ldr	r2, [r7, #16]
 8010a72:	605a      	str	r2, [r3, #4]
            msg.id = obj->type;
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	7e1a      	ldrb	r2, [r3, #24]
 8010a78:	4b12      	ldr	r3, [pc, #72]	@ (8010ac4 <_UG_HandleEvents+0xb4>)
 8010a7a:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8010a7c:	693b      	ldr	r3, [r7, #16]
 8010a7e:	7e5a      	ldrb	r2, [r3, #25]
 8010a80:	4b10      	ldr	r3, [pc, #64]	@ (8010ac4 <_UG_HandleEvents+0xb4>)
 8010a82:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8010a84:	693b      	ldr	r3, [r7, #16]
 8010a86:	7e9a      	ldrb	r2, [r3, #26]
 8010a88:	4b0e      	ldr	r3, [pc, #56]	@ (8010ac4 <_UG_HandleEvents+0xb4>)
 8010a8a:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a90:	4a0c      	ldr	r2, [pc, #48]	@ (8010ac4 <_UG_HandleEvents+0xb4>)
 8010a92:	0010      	movs	r0, r2
 8010a94:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8010a96:	693b      	ldr	r3, [r7, #16]
 8010a98:	2200      	movs	r2, #0
 8010a9a:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8010a9c:	2116      	movs	r1, #22
 8010a9e:	187b      	adds	r3, r7, r1
 8010aa0:	881a      	ldrh	r2, [r3, #0]
 8010aa2:	187b      	adds	r3, r7, r1
 8010aa4:	3201      	adds	r2, #1
 8010aa6:	801a      	strh	r2, [r3, #0]
 8010aa8:	2316      	movs	r3, #22
 8010aaa:	18fa      	adds	r2, r7, r3
 8010aac:	2314      	movs	r3, #20
 8010aae:	18fb      	adds	r3, r7, r3
 8010ab0:	8812      	ldrh	r2, [r2, #0]
 8010ab2:	881b      	ldrh	r3, [r3, #0]
 8010ab4:	429a      	cmp	r2, r3
 8010ab6:	d3bf      	bcc.n	8010a38 <_UG_HandleEvents+0x28>
         }
      }
   }
}
 8010ab8:	46c0      	nop			@ (mov r8, r8)
 8010aba:	46c0      	nop			@ (mov r8, r8)
 8010abc:	46bd      	mov	sp, r7
 8010abe:	b006      	add	sp, #24
 8010ac0:	bd80      	pop	{r7, pc}
 8010ac2:	46c0      	nop			@ (mov r8, r8)
 8010ac4:	20000c58 	.word	0x20000c58

08010ac8 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8010ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010aca:	b08f      	sub	sp, #60	@ 0x3c
 8010acc:	af02      	add	r7, sp, #8
 8010ace:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	685b      	ldr	r3, [r3, #4]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d100      	bne.n	8010ada <_UG_PutText+0x12>
 8010ad8:	e1b6      	b.n	8010e48 <_UG_PutText+0x380>
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d100      	bne.n	8010ae4 <_UG_PutText+0x1c>
 8010ae2:	e1b1      	b.n	8010e48 <_UG_PutText+0x380>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8010ae4:	2122      	movs	r1, #34	@ 0x22
 8010ae6:	187b      	adds	r3, r7, r1
 8010ae8:	687a      	ldr	r2, [r7, #4]
 8010aea:	89d2      	ldrh	r2, [r2, #14]
 8010aec:	801a      	strh	r2, [r3, #0]
   UG_S16 ys=txt->a.ys;
 8010aee:	2020      	movs	r0, #32
 8010af0:	183b      	adds	r3, r7, r0
 8010af2:	687a      	ldr	r2, [r7, #4]
 8010af4:	8952      	ldrh	r2, [r2, #10]
 8010af6:	801a      	strh	r2, [r3, #0]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	685b      	ldr	r3, [r3, #4]
 8010afc:	3302      	adds	r3, #2
 8010afe:	781a      	ldrb	r2, [r3, #0]
 8010b00:	241e      	movs	r4, #30
 8010b02:	193b      	adds	r3, r7, r4
 8010b04:	801a      	strh	r2, [r3, #0]

   if ( (ye - ys) < char_height ){
 8010b06:	187b      	adds	r3, r7, r1
 8010b08:	2200      	movs	r2, #0
 8010b0a:	5e9a      	ldrsh	r2, [r3, r2]
 8010b0c:	183b      	adds	r3, r7, r0
 8010b0e:	2100      	movs	r1, #0
 8010b10:	5e5b      	ldrsh	r3, [r3, r1]
 8010b12:	1ad2      	subs	r2, r2, r3
 8010b14:	193b      	adds	r3, r7, r4
 8010b16:	2100      	movs	r1, #0
 8010b18:	5e5b      	ldrsh	r3, [r3, r1]
 8010b1a:	429a      	cmp	r2, r3
 8010b1c:	da00      	bge.n	8010b20 <_UG_PutText+0x58>
 8010b1e:	e195      	b.n	8010e4c <_UG_PutText+0x384>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8010b20:	231c      	movs	r3, #28
 8010b22:	18fb      	adds	r3, r7, r3
 8010b24:	687a      	ldr	r2, [r7, #4]
 8010b26:	8912      	ldrh	r2, [r2, #8]
 8010b28:	801a      	strh	r2, [r3, #0]
   UG_S16 xe=txt->a.xe;
 8010b2a:	231a      	movs	r3, #26
 8010b2c:	18fb      	adds	r3, r7, r3
 8010b2e:	687a      	ldr	r2, [r7, #4]
 8010b30:	8992      	ldrh	r2, [r2, #12]
 8010b32:	801a      	strh	r2, [r3, #0]
   UG_U8  align=txt->align;
 8010b34:	2319      	movs	r3, #25
 8010b36:	18fb      	adds	r3, r7, r3
 8010b38:	687a      	ldr	r2, [r7, #4]
 8010b3a:	7d12      	ldrb	r2, [r2, #20]
 8010b3c:	701a      	strb	r2, [r3, #0]
   UG_S16 char_h_space=txt->h_space;
 8010b3e:	2316      	movs	r3, #22
 8010b40:	18fb      	adds	r3, r7, r3
 8010b42:	687a      	ldr	r2, [r7, #4]
 8010b44:	8ad2      	ldrh	r2, [r2, #22]
 8010b46:	801a      	strh	r2, [r3, #0]
   UG_S16 char_v_space=txt->v_space;
 8010b48:	2314      	movs	r3, #20
 8010b4a:	18fb      	adds	r3, r7, r3
 8010b4c:	687a      	ldr	r2, [r7, #4]
 8010b4e:	8b12      	ldrh	r2, [r2, #24]
 8010b50:	801a      	strh	r2, [r3, #0]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	60fb      	str	r3, [r7, #12]
   char* c = str;
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	685b      	ldr	r3, [r3, #4]
 8010b60:	0018      	movs	r0, r3
 8010b62:	f7ff f9db 	bl	800ff1c <_UG_FontSelect>

   rc=1;
 8010b66:	232c      	movs	r3, #44	@ 0x2c
 8010b68:	18fb      	adds	r3, r7, r3
 8010b6a:	2201      	movs	r2, #1
 8010b6c:	801a      	strh	r2, [r3, #0]
   c=str;
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010b72:	4bbb      	ldr	r3, [pc, #748]	@ (8010e60 <_UG_PutText+0x398>)
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	222d      	movs	r2, #45	@ 0x2d
 8010b78:	5c9b      	ldrb	r3, [r3, r2]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d109      	bne.n	8010b92 <_UG_PutText+0xca>
       chr = _UG_DecodeUTF8(&c);
 8010b7e:	2324      	movs	r3, #36	@ 0x24
 8010b80:	18fc      	adds	r4, r7, r3
 8010b82:	2308      	movs	r3, #8
 8010b84:	18fb      	adds	r3, r7, r3
 8010b86:	0018      	movs	r0, r3
 8010b88:	f7fe ffee 	bl	800fb68 <_UG_DecodeUTF8>
 8010b8c:	0003      	movs	r3, r0
 8010b8e:	8023      	strh	r3, [r4, #0]
 8010b90:	e006      	b.n	8010ba0 <_UG_PutText+0xd8>
     }
     else{
       chr = *c++;
 8010b92:	68bb      	ldr	r3, [r7, #8]
 8010b94:	1c5a      	adds	r2, r3, #1
 8010b96:	60ba      	str	r2, [r7, #8]
 8010b98:	781a      	ldrb	r2, [r3, #0]
 8010b9a:	2324      	movs	r3, #36	@ 0x24
 8010b9c:	18fb      	adds	r3, r7, r3
 8010b9e:	801a      	strh	r2, [r3, #0]
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 8010ba0:	2224      	movs	r2, #36	@ 0x24
 8010ba2:	18bb      	adds	r3, r7, r2
 8010ba4:	881b      	ldrh	r3, [r3, #0]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d00a      	beq.n	8010bc0 <_UG_PutText+0xf8>
     if ( chr == '\n' ) rc++;
 8010baa:	18bb      	adds	r3, r7, r2
 8010bac:	881b      	ldrh	r3, [r3, #0]
 8010bae:	2b0a      	cmp	r3, #10
 8010bb0:	d1df      	bne.n	8010b72 <_UG_PutText+0xaa>
 8010bb2:	212c      	movs	r1, #44	@ 0x2c
 8010bb4:	187b      	adds	r3, r7, r1
 8010bb6:	881a      	ldrh	r2, [r3, #0]
 8010bb8:	187b      	adds	r3, r7, r1
 8010bba:	3201      	adds	r2, #1
 8010bbc:	801a      	strh	r2, [r3, #0]
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010bbe:	e7d8      	b.n	8010b72 <_UG_PutText+0xaa>
     if(!chr) break;
 8010bc0:	46c0      	nop			@ (mov r8, r8)
   }

   yp = 0;
 8010bc2:	2126      	movs	r1, #38	@ 0x26
 8010bc4:	187b      	adds	r3, r7, r1
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	801a      	strh	r2, [r3, #0]
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8010bca:	2319      	movs	r3, #25
 8010bcc:	18fb      	adds	r3, r7, r3
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	2230      	movs	r2, #48	@ 0x30
 8010bd2:	4013      	ands	r3, r2
 8010bd4:	d02f      	beq.n	8010c36 <_UG_PutText+0x16e>
   {
      yp = ye - ys + 1;
 8010bd6:	2322      	movs	r3, #34	@ 0x22
 8010bd8:	18fb      	adds	r3, r7, r3
 8010bda:	881a      	ldrh	r2, [r3, #0]
 8010bdc:	2320      	movs	r3, #32
 8010bde:	18fb      	adds	r3, r7, r3
 8010be0:	881b      	ldrh	r3, [r3, #0]
 8010be2:	1ad3      	subs	r3, r2, r3
 8010be4:	b29b      	uxth	r3, r3
 8010be6:	3301      	adds	r3, #1
 8010be8:	b29a      	uxth	r2, r3
 8010bea:	0008      	movs	r0, r1
 8010bec:	183b      	adds	r3, r7, r0
 8010bee:	801a      	strh	r2, [r3, #0]
      yp -= char_height*rc;
 8010bf0:	183b      	adds	r3, r7, r0
 8010bf2:	881a      	ldrh	r2, [r3, #0]
 8010bf4:	231e      	movs	r3, #30
 8010bf6:	18fb      	adds	r3, r7, r3
 8010bf8:	881b      	ldrh	r3, [r3, #0]
 8010bfa:	242c      	movs	r4, #44	@ 0x2c
 8010bfc:	1939      	adds	r1, r7, r4
 8010bfe:	8809      	ldrh	r1, [r1, #0]
 8010c00:	434b      	muls	r3, r1
 8010c02:	b29b      	uxth	r3, r3
 8010c04:	1ad3      	subs	r3, r2, r3
 8010c06:	b29a      	uxth	r2, r3
 8010c08:	183b      	adds	r3, r7, r0
 8010c0a:	801a      	strh	r2, [r3, #0]
      yp -= char_v_space*(rc-1);
 8010c0c:	183b      	adds	r3, r7, r0
 8010c0e:	881a      	ldrh	r2, [r3, #0]
 8010c10:	193b      	adds	r3, r7, r4
 8010c12:	881b      	ldrh	r3, [r3, #0]
 8010c14:	3b01      	subs	r3, #1
 8010c16:	b29b      	uxth	r3, r3
 8010c18:	2114      	movs	r1, #20
 8010c1a:	1879      	adds	r1, r7, r1
 8010c1c:	8809      	ldrh	r1, [r1, #0]
 8010c1e:	434b      	muls	r3, r1
 8010c20:	b29b      	uxth	r3, r3
 8010c22:	1ad3      	subs	r3, r2, r3
 8010c24:	b29a      	uxth	r2, r3
 8010c26:	183b      	adds	r3, r7, r0
 8010c28:	801a      	strh	r2, [r3, #0]
      if ( yp < 0 ){
 8010c2a:	183b      	adds	r3, r7, r0
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	5e9b      	ldrsh	r3, [r3, r2]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	da00      	bge.n	8010c36 <_UG_PutText+0x16e>
 8010c34:	e10c      	b.n	8010e50 <_UG_PutText+0x388>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8010c36:	2319      	movs	r3, #25
 8010c38:	18fb      	adds	r3, r7, r3
 8010c3a:	781b      	ldrb	r3, [r3, #0]
 8010c3c:	2210      	movs	r2, #16
 8010c3e:	4013      	ands	r3, r2
 8010c40:	d006      	beq.n	8010c50 <_UG_PutText+0x188>
 8010c42:	2226      	movs	r2, #38	@ 0x26
 8010c44:	18bb      	adds	r3, r7, r2
 8010c46:	18ba      	adds	r2, r7, r2
 8010c48:	2100      	movs	r1, #0
 8010c4a:	5e52      	ldrsh	r2, [r2, r1]
 8010c4c:	1052      	asrs	r2, r2, #1
 8010c4e:	801a      	strh	r2, [r3, #0]
   yp += ys;
 8010c50:	2126      	movs	r1, #38	@ 0x26
 8010c52:	187b      	adds	r3, r7, r1
 8010c54:	881a      	ldrh	r2, [r3, #0]
 8010c56:	2320      	movs	r3, #32
 8010c58:	18fb      	adds	r3, r7, r3
 8010c5a:	881b      	ldrh	r3, [r3, #0]
 8010c5c:	18d3      	adds	r3, r2, r3
 8010c5e:	b29a      	uxth	r2, r3
 8010c60:	187b      	adds	r3, r7, r1
 8010c62:	801a      	strh	r2, [r3, #0]

   while( 1 )
   {
      sl=0;
 8010c64:	232e      	movs	r3, #46	@ 0x2e
 8010c66:	18fb      	adds	r3, r7, r3
 8010c68:	2200      	movs	r2, #0
 8010c6a:	801a      	strh	r2, [r3, #0]
      c=str;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	60bb      	str	r3, [r7, #8]
      wl = 0;
 8010c70:	232a      	movs	r3, #42	@ 0x2a
 8010c72:	18fb      	adds	r3, r7, r3
 8010c74:	2200      	movs	r2, #0
 8010c76:	801a      	strh	r2, [r3, #0]
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010c78:	4b79      	ldr	r3, [pc, #484]	@ (8010e60 <_UG_PutText+0x398>)
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	222d      	movs	r2, #45	@ 0x2d
 8010c7e:	5c9b      	ldrb	r3, [r3, r2]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d109      	bne.n	8010c98 <_UG_PutText+0x1d0>
          chr = _UG_DecodeUTF8(&c);
 8010c84:	2324      	movs	r3, #36	@ 0x24
 8010c86:	18fc      	adds	r4, r7, r3
 8010c88:	2308      	movs	r3, #8
 8010c8a:	18fb      	adds	r3, r7, r3
 8010c8c:	0018      	movs	r0, r3
 8010c8e:	f7fe ff6b 	bl	800fb68 <_UG_DecodeUTF8>
 8010c92:	0003      	movs	r3, r0
 8010c94:	8023      	strh	r3, [r4, #0]
 8010c96:	e006      	b.n	8010ca6 <_UG_PutText+0x1de>
        }
        else{
          chr = *c++;
 8010c98:	68bb      	ldr	r3, [r7, #8]
 8010c9a:	1c5a      	adds	r2, r3, #1
 8010c9c:	60ba      	str	r2, [r7, #8]
 8010c9e:	781a      	ldrb	r2, [r3, #0]
 8010ca0:	2324      	movs	r3, #36	@ 0x24
 8010ca2:	18fb      	adds	r3, r7, r3
 8010ca4:	801a      	strh	r2, [r3, #0]
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8010ca6:	2224      	movs	r2, #36	@ 0x24
 8010ca8:	18bb      	adds	r3, r7, r2
 8010caa:	881b      	ldrh	r3, [r3, #0]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d029      	beq.n	8010d04 <_UG_PutText+0x23c>
 8010cb0:	18bb      	adds	r3, r7, r2
 8010cb2:	881b      	ldrh	r3, [r3, #0]
 8010cb4:	2b0a      	cmp	r3, #10
 8010cb6:	d025      	beq.n	8010d04 <_UG_PutText+0x23c>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8010cb8:	2512      	movs	r5, #18
 8010cba:	197c      	adds	r4, r7, r5
 8010cbc:	18bb      	adds	r3, r7, r2
 8010cbe:	881b      	ldrh	r3, [r3, #0]
 8010cc0:	2100      	movs	r1, #0
 8010cc2:	0018      	movs	r0, r3
 8010cc4:	f7fe fffe 	bl	800fcc4 <_UG_GetCharData>
 8010cc8:	0003      	movs	r3, r0
 8010cca:	8023      	strh	r3, [r4, #0]
         if (w == -1){continue;}
 8010ccc:	0029      	movs	r1, r5
 8010cce:	187b      	adds	r3, r7, r1
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	5e9b      	ldrsh	r3, [r3, r2]
 8010cd4:	3301      	adds	r3, #1
 8010cd6:	d013      	beq.n	8010d00 <_UG_PutText+0x238>
         sl++;
 8010cd8:	202e      	movs	r0, #46	@ 0x2e
 8010cda:	183b      	adds	r3, r7, r0
 8010cdc:	881a      	ldrh	r2, [r3, #0]
 8010cde:	183b      	adds	r3, r7, r0
 8010ce0:	3201      	adds	r2, #1
 8010ce2:	801a      	strh	r2, [r3, #0]
         wl += w + char_h_space;
 8010ce4:	187b      	adds	r3, r7, r1
 8010ce6:	881a      	ldrh	r2, [r3, #0]
 8010ce8:	2316      	movs	r3, #22
 8010cea:	18fb      	adds	r3, r7, r3
 8010cec:	881b      	ldrh	r3, [r3, #0]
 8010cee:	18d3      	adds	r3, r2, r3
 8010cf0:	b299      	uxth	r1, r3
 8010cf2:	222a      	movs	r2, #42	@ 0x2a
 8010cf4:	18bb      	adds	r3, r7, r2
 8010cf6:	18ba      	adds	r2, r7, r2
 8010cf8:	8812      	ldrh	r2, [r2, #0]
 8010cfa:	188a      	adds	r2, r1, r2
 8010cfc:	801a      	strh	r2, [r3, #0]
 8010cfe:	e7bb      	b.n	8010c78 <_UG_PutText+0x1b0>
         if (w == -1){continue;}
 8010d00:	46c0      	nop			@ (mov r8, r8)
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010d02:	e7b9      	b.n	8010c78 <_UG_PutText+0x1b0>
      }
      wl -= char_h_space;
 8010d04:	2316      	movs	r3, #22
 8010d06:	18fb      	adds	r3, r7, r3
 8010d08:	881a      	ldrh	r2, [r3, #0]
 8010d0a:	202a      	movs	r0, #42	@ 0x2a
 8010d0c:	183b      	adds	r3, r7, r0
 8010d0e:	1839      	adds	r1, r7, r0
 8010d10:	8809      	ldrh	r1, [r1, #0]
 8010d12:	1a8a      	subs	r2, r1, r2
 8010d14:	801a      	strh	r2, [r3, #0]

      xp = xe - xs + 1;
 8010d16:	231a      	movs	r3, #26
 8010d18:	18fb      	adds	r3, r7, r3
 8010d1a:	881a      	ldrh	r2, [r3, #0]
 8010d1c:	231c      	movs	r3, #28
 8010d1e:	18fb      	adds	r3, r7, r3
 8010d20:	881b      	ldrh	r3, [r3, #0]
 8010d22:	1ad3      	subs	r3, r2, r3
 8010d24:	b29b      	uxth	r3, r3
 8010d26:	3301      	adds	r3, #1
 8010d28:	b29a      	uxth	r2, r3
 8010d2a:	2128      	movs	r1, #40	@ 0x28
 8010d2c:	187b      	adds	r3, r7, r1
 8010d2e:	801a      	strh	r2, [r3, #0]
      xp -= wl;
 8010d30:	187b      	adds	r3, r7, r1
 8010d32:	881a      	ldrh	r2, [r3, #0]
 8010d34:	183b      	adds	r3, r7, r0
 8010d36:	881b      	ldrh	r3, [r3, #0]
 8010d38:	1ad3      	subs	r3, r2, r3
 8010d3a:	b29a      	uxth	r2, r3
 8010d3c:	187b      	adds	r3, r7, r1
 8010d3e:	801a      	strh	r2, [r3, #0]
      if ( xp < 0 ) break;
 8010d40:	187b      	adds	r3, r7, r1
 8010d42:	2200      	movs	r2, #0
 8010d44:	5e9b      	ldrsh	r3, [r3, r2]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	da00      	bge.n	8010d4c <_UG_PutText+0x284>
 8010d4a:	e083      	b.n	8010e54 <_UG_PutText+0x38c>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8010d4c:	2319      	movs	r3, #25
 8010d4e:	18fb      	adds	r3, r7, r3
 8010d50:	781b      	ldrb	r3, [r3, #0]
 8010d52:	2201      	movs	r2, #1
 8010d54:	4013      	ands	r3, r2
 8010d56:	d003      	beq.n	8010d60 <_UG_PutText+0x298>
 8010d58:	187b      	adds	r3, r7, r1
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	801a      	strh	r2, [r3, #0]
 8010d5e:	e00c      	b.n	8010d7a <_UG_PutText+0x2b2>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8010d60:	2319      	movs	r3, #25
 8010d62:	18fb      	adds	r3, r7, r3
 8010d64:	781b      	ldrb	r3, [r3, #0]
 8010d66:	2202      	movs	r2, #2
 8010d68:	4013      	ands	r3, r2
 8010d6a:	d006      	beq.n	8010d7a <_UG_PutText+0x2b2>
 8010d6c:	2228      	movs	r2, #40	@ 0x28
 8010d6e:	18bb      	adds	r3, r7, r2
 8010d70:	18ba      	adds	r2, r7, r2
 8010d72:	2100      	movs	r1, #0
 8010d74:	5e52      	ldrsh	r2, [r2, r1]
 8010d76:	1052      	asrs	r2, r2, #1
 8010d78:	801a      	strh	r2, [r3, #0]
      xp += xs;
 8010d7a:	2128      	movs	r1, #40	@ 0x28
 8010d7c:	187b      	adds	r3, r7, r1
 8010d7e:	881a      	ldrh	r2, [r3, #0]
 8010d80:	231c      	movs	r3, #28
 8010d82:	18fb      	adds	r3, r7, r3
 8010d84:	881b      	ldrh	r3, [r3, #0]
 8010d86:	18d3      	adds	r3, r2, r3
 8010d88:	b29a      	uxth	r2, r3
 8010d8a:	187b      	adds	r3, r7, r1
 8010d8c:	801a      	strh	r2, [r3, #0]


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010d8e:	4b34      	ldr	r3, [pc, #208]	@ (8010e60 <_UG_PutText+0x398>)
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	222d      	movs	r2, #45	@ 0x2d
 8010d94:	5c9b      	ldrb	r3, [r3, r2]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d109      	bne.n	8010dae <_UG_PutText+0x2e6>
           chr = _UG_DecodeUTF8(&str);
 8010d9a:	2324      	movs	r3, #36	@ 0x24
 8010d9c:	18fc      	adds	r4, r7, r3
 8010d9e:	230c      	movs	r3, #12
 8010da0:	18fb      	adds	r3, r7, r3
 8010da2:	0018      	movs	r0, r3
 8010da4:	f7fe fee0 	bl	800fb68 <_UG_DecodeUTF8>
 8010da8:	0003      	movs	r3, r0
 8010daa:	8023      	strh	r3, [r4, #0]
 8010dac:	e006      	b.n	8010dbc <_UG_PutText+0x2f4>
         }
         else{
           chr = *str++;
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	1c5a      	adds	r2, r3, #1
 8010db2:	60fa      	str	r2, [r7, #12]
 8010db4:	781a      	ldrb	r2, [r3, #0]
 8010db6:	2324      	movs	r3, #36	@ 0x24
 8010db8:	18fb      	adds	r3, r7, r3
 8010dba:	801a      	strh	r2, [r3, #0]
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 8010dbc:	2024      	movs	r0, #36	@ 0x24
 8010dbe:	183b      	adds	r3, r7, r0
 8010dc0:	881b      	ldrh	r3, [r3, #0]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d048      	beq.n	8010e58 <_UG_PutText+0x390>
           return;
         }
         else if(chr=='\n'){
 8010dc6:	183b      	adds	r3, r7, r0
 8010dc8:	881b      	ldrh	r3, [r3, #0]
 8010dca:	2b0a      	cmp	r3, #10
 8010dcc:	d02b      	beq.n	8010e26 <_UG_PutText+0x35e>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	8a1e      	ldrh	r6, [r3, #16]
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	8a5b      	ldrh	r3, [r3, #18]
 8010dd6:	2212      	movs	r2, #18
 8010dd8:	18bc      	adds	r4, r7, r2
 8010dda:	2126      	movs	r1, #38	@ 0x26
 8010ddc:	187a      	adds	r2, r7, r1
 8010dde:	2100      	movs	r1, #0
 8010de0:	5e55      	ldrsh	r5, [r2, r1]
 8010de2:	2128      	movs	r1, #40	@ 0x28
 8010de4:	187a      	adds	r2, r7, r1
 8010de6:	2100      	movs	r1, #0
 8010de8:	5e51      	ldrsh	r1, [r2, r1]
 8010dea:	183a      	adds	r2, r7, r0
 8010dec:	8810      	ldrh	r0, [r2, #0]
 8010dee:	9300      	str	r3, [sp, #0]
 8010df0:	0033      	movs	r3, r6
 8010df2:	002a      	movs	r2, r5
 8010df4:	f7ff f914 	bl	8010020 <_UG_PutChar>
 8010df8:	0003      	movs	r3, r0
 8010dfa:	8023      	strh	r3, [r4, #0]
         if(w!=-1)
 8010dfc:	2212      	movs	r2, #18
 8010dfe:	18bb      	adds	r3, r7, r2
 8010e00:	2000      	movs	r0, #0
 8010e02:	5e1b      	ldrsh	r3, [r3, r0]
 8010e04:	3301      	adds	r3, #1
 8010e06:	d0c2      	beq.n	8010d8e <_UG_PutText+0x2c6>
           xp += w + char_h_space;
 8010e08:	18bb      	adds	r3, r7, r2
 8010e0a:	881a      	ldrh	r2, [r3, #0]
 8010e0c:	2316      	movs	r3, #22
 8010e0e:	18fb      	adds	r3, r7, r3
 8010e10:	881b      	ldrh	r3, [r3, #0]
 8010e12:	18d3      	adds	r3, r2, r3
 8010e14:	b29a      	uxth	r2, r3
 8010e16:	2128      	movs	r1, #40	@ 0x28
 8010e18:	187b      	adds	r3, r7, r1
 8010e1a:	881b      	ldrh	r3, [r3, #0]
 8010e1c:	18d3      	adds	r3, r2, r3
 8010e1e:	b29a      	uxth	r2, r3
 8010e20:	187b      	adds	r3, r7, r1
 8010e22:	801a      	strh	r2, [r3, #0]
 8010e24:	e7b3      	b.n	8010d8e <_UG_PutText+0x2c6>
           break;
 8010e26:	46c0      	nop			@ (mov r8, r8)
      }
      yp += char_height + char_v_space;
 8010e28:	231e      	movs	r3, #30
 8010e2a:	18fb      	adds	r3, r7, r3
 8010e2c:	881a      	ldrh	r2, [r3, #0]
 8010e2e:	2314      	movs	r3, #20
 8010e30:	18fb      	adds	r3, r7, r3
 8010e32:	881b      	ldrh	r3, [r3, #0]
 8010e34:	18d3      	adds	r3, r2, r3
 8010e36:	b29a      	uxth	r2, r3
 8010e38:	2126      	movs	r1, #38	@ 0x26
 8010e3a:	187b      	adds	r3, r7, r1
 8010e3c:	881b      	ldrh	r3, [r3, #0]
 8010e3e:	18d3      	adds	r3, r2, r3
 8010e40:	b29a      	uxth	r2, r3
 8010e42:	187b      	adds	r3, r7, r1
 8010e44:	801a      	strh	r2, [r3, #0]
      sl=0;
 8010e46:	e70d      	b.n	8010c64 <_UG_PutText+0x19c>
     return;
 8010e48:	46c0      	nop			@ (mov r8, r8)
 8010e4a:	e006      	b.n	8010e5a <_UG_PutText+0x392>
     return;
 8010e4c:	46c0      	nop			@ (mov r8, r8)
 8010e4e:	e004      	b.n	8010e5a <_UG_PutText+0x392>
        return;
 8010e50:	46c0      	nop			@ (mov r8, r8)
 8010e52:	e002      	b.n	8010e5a <_UG_PutText+0x392>
      if ( xp < 0 ) break;
 8010e54:	46c0      	nop			@ (mov r8, r8)
 8010e56:	e000      	b.n	8010e5a <_UG_PutText+0x392>
           return;
 8010e58:	46c0      	nop			@ (mov r8, r8)
   }
}
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	b00d      	add	sp, #52	@ 0x34
 8010e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e60:	20000c44 	.word	0x20000c44

08010e64 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8010e64:	b5b0      	push	{r4, r5, r7, lr}
 8010e66:	b084      	sub	sp, #16
 8010e68:	af02      	add	r7, sp, #8
 8010e6a:	0005      	movs	r5, r0
 8010e6c:	000c      	movs	r4, r1
 8010e6e:	0010      	movs	r0, r2
 8010e70:	0019      	movs	r1, r3
 8010e72:	1dbb      	adds	r3, r7, #6
 8010e74:	1c2a      	adds	r2, r5, #0
 8010e76:	801a      	strh	r2, [r3, #0]
 8010e78:	1d3b      	adds	r3, r7, #4
 8010e7a:	1c22      	adds	r2, r4, #0
 8010e7c:	801a      	strh	r2, [r3, #0]
 8010e7e:	1cbb      	adds	r3, r7, #2
 8010e80:	1c02      	adds	r2, r0, #0
 8010e82:	801a      	strh	r2, [r3, #0]
 8010e84:	003b      	movs	r3, r7
 8010e86:	1c0a      	adds	r2, r1, #0
 8010e88:	801a      	strh	r2, [r3, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8010e8a:	1cbb      	adds	r3, r7, #2
 8010e8c:	881b      	ldrh	r3, [r3, #0]
 8010e8e:	3b01      	subs	r3, #1
 8010e90:	b29b      	uxth	r3, r3
 8010e92:	b21c      	sxth	r4, r3
 8010e94:	69bb      	ldr	r3, [r7, #24]
 8010e96:	1c9a      	adds	r2, r3, #2
 8010e98:	61ba      	str	r2, [r7, #24]
 8010e9a:	881b      	ldrh	r3, [r3, #0]
 8010e9c:	1d3a      	adds	r2, r7, #4
 8010e9e:	2500      	movs	r5, #0
 8010ea0:	5f55      	ldrsh	r5, [r2, r5]
 8010ea2:	1d3a      	adds	r2, r7, #4
 8010ea4:	2100      	movs	r1, #0
 8010ea6:	5e51      	ldrsh	r1, [r2, r1]
 8010ea8:	1dba      	adds	r2, r7, #6
 8010eaa:	2000      	movs	r0, #0
 8010eac:	5e10      	ldrsh	r0, [r2, r0]
 8010eae:	9300      	str	r3, [sp, #0]
 8010eb0:	002b      	movs	r3, r5
 8010eb2:	0022      	movs	r2, r4
 8010eb4:	f7fe fbd8 	bl	800f668 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8010eb8:	1d3b      	adds	r3, r7, #4
 8010eba:	881b      	ldrh	r3, [r3, #0]
 8010ebc:	3301      	adds	r3, #1
 8010ebe:	b29b      	uxth	r3, r3
 8010ec0:	b219      	sxth	r1, r3
 8010ec2:	003b      	movs	r3, r7
 8010ec4:	881b      	ldrh	r3, [r3, #0]
 8010ec6:	3b01      	subs	r3, #1
 8010ec8:	b29b      	uxth	r3, r3
 8010eca:	b21d      	sxth	r5, r3
 8010ecc:	69bb      	ldr	r3, [r7, #24]
 8010ece:	1c9a      	adds	r2, r3, #2
 8010ed0:	61ba      	str	r2, [r7, #24]
 8010ed2:	881b      	ldrh	r3, [r3, #0]
 8010ed4:	1dba      	adds	r2, r7, #6
 8010ed6:	2400      	movs	r4, #0
 8010ed8:	5f14      	ldrsh	r4, [r2, r4]
 8010eda:	1dba      	adds	r2, r7, #6
 8010edc:	2000      	movs	r0, #0
 8010ede:	5e10      	ldrsh	r0, [r2, r0]
 8010ee0:	9300      	str	r3, [sp, #0]
 8010ee2:	002b      	movs	r3, r5
 8010ee4:	0022      	movs	r2, r4
 8010ee6:	f7fe fbbf 	bl	800f668 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8010eea:	69bb      	ldr	r3, [r7, #24]
 8010eec:	1c9a      	adds	r2, r3, #2
 8010eee:	61ba      	str	r2, [r7, #24]
 8010ef0:	881b      	ldrh	r3, [r3, #0]
 8010ef2:	003a      	movs	r2, r7
 8010ef4:	2500      	movs	r5, #0
 8010ef6:	5f55      	ldrsh	r5, [r2, r5]
 8010ef8:	1cba      	adds	r2, r7, #2
 8010efa:	2400      	movs	r4, #0
 8010efc:	5f14      	ldrsh	r4, [r2, r4]
 8010efe:	003a      	movs	r2, r7
 8010f00:	2100      	movs	r1, #0
 8010f02:	5e51      	ldrsh	r1, [r2, r1]
 8010f04:	1dba      	adds	r2, r7, #6
 8010f06:	2000      	movs	r0, #0
 8010f08:	5e10      	ldrsh	r0, [r2, r0]
 8010f0a:	9300      	str	r3, [sp, #0]
 8010f0c:	002b      	movs	r3, r5
 8010f0e:	0022      	movs	r2, r4
 8010f10:	f7fe fbaa 	bl	800f668 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8010f14:	003b      	movs	r3, r7
 8010f16:	881b      	ldrh	r3, [r3, #0]
 8010f18:	3b01      	subs	r3, #1
 8010f1a:	b29b      	uxth	r3, r3
 8010f1c:	b21d      	sxth	r5, r3
 8010f1e:	69bb      	ldr	r3, [r7, #24]
 8010f20:	1c9a      	adds	r2, r3, #2
 8010f22:	61ba      	str	r2, [r7, #24]
 8010f24:	881b      	ldrh	r3, [r3, #0]
 8010f26:	1cba      	adds	r2, r7, #2
 8010f28:	2400      	movs	r4, #0
 8010f2a:	5f14      	ldrsh	r4, [r2, r4]
 8010f2c:	1d3a      	adds	r2, r7, #4
 8010f2e:	2100      	movs	r1, #0
 8010f30:	5e51      	ldrsh	r1, [r2, r1]
 8010f32:	1cba      	adds	r2, r7, #2
 8010f34:	2000      	movs	r0, #0
 8010f36:	5e10      	ldrsh	r0, [r2, r0]
 8010f38:	9300      	str	r3, [sp, #0]
 8010f3a:	002b      	movs	r3, r5
 8010f3c:	0022      	movs	r2, r4
 8010f3e:	f7fe fb93 	bl	800f668 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8010f42:	1dbb      	adds	r3, r7, #6
 8010f44:	881b      	ldrh	r3, [r3, #0]
 8010f46:	3301      	adds	r3, #1
 8010f48:	b29b      	uxth	r3, r3
 8010f4a:	b218      	sxth	r0, r3
 8010f4c:	1d3b      	adds	r3, r7, #4
 8010f4e:	881b      	ldrh	r3, [r3, #0]
 8010f50:	3301      	adds	r3, #1
 8010f52:	b29b      	uxth	r3, r3
 8010f54:	b219      	sxth	r1, r3
 8010f56:	1cbb      	adds	r3, r7, #2
 8010f58:	881b      	ldrh	r3, [r3, #0]
 8010f5a:	3b02      	subs	r3, #2
 8010f5c:	b29b      	uxth	r3, r3
 8010f5e:	b21c      	sxth	r4, r3
 8010f60:	1d3b      	adds	r3, r7, #4
 8010f62:	881b      	ldrh	r3, [r3, #0]
 8010f64:	3301      	adds	r3, #1
 8010f66:	b29b      	uxth	r3, r3
 8010f68:	b21d      	sxth	r5, r3
 8010f6a:	69bb      	ldr	r3, [r7, #24]
 8010f6c:	1c9a      	adds	r2, r3, #2
 8010f6e:	61ba      	str	r2, [r7, #24]
 8010f70:	881b      	ldrh	r3, [r3, #0]
 8010f72:	9300      	str	r3, [sp, #0]
 8010f74:	002b      	movs	r3, r5
 8010f76:	0022      	movs	r2, r4
 8010f78:	f7fe fb76 	bl	800f668 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8010f7c:	1dbb      	adds	r3, r7, #6
 8010f7e:	881b      	ldrh	r3, [r3, #0]
 8010f80:	3301      	adds	r3, #1
 8010f82:	b29b      	uxth	r3, r3
 8010f84:	b218      	sxth	r0, r3
 8010f86:	1d3b      	adds	r3, r7, #4
 8010f88:	881b      	ldrh	r3, [r3, #0]
 8010f8a:	3302      	adds	r3, #2
 8010f8c:	b29b      	uxth	r3, r3
 8010f8e:	b219      	sxth	r1, r3
 8010f90:	1dbb      	adds	r3, r7, #6
 8010f92:	881b      	ldrh	r3, [r3, #0]
 8010f94:	3301      	adds	r3, #1
 8010f96:	b29b      	uxth	r3, r3
 8010f98:	b21c      	sxth	r4, r3
 8010f9a:	003b      	movs	r3, r7
 8010f9c:	881b      	ldrh	r3, [r3, #0]
 8010f9e:	3b02      	subs	r3, #2
 8010fa0:	b29b      	uxth	r3, r3
 8010fa2:	b21d      	sxth	r5, r3
 8010fa4:	69bb      	ldr	r3, [r7, #24]
 8010fa6:	1c9a      	adds	r2, r3, #2
 8010fa8:	61ba      	str	r2, [r7, #24]
 8010faa:	881b      	ldrh	r3, [r3, #0]
 8010fac:	9300      	str	r3, [sp, #0]
 8010fae:	002b      	movs	r3, r5
 8010fb0:	0022      	movs	r2, r4
 8010fb2:	f7fe fb59 	bl	800f668 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8010fb6:	1dbb      	adds	r3, r7, #6
 8010fb8:	881b      	ldrh	r3, [r3, #0]
 8010fba:	3301      	adds	r3, #1
 8010fbc:	b29b      	uxth	r3, r3
 8010fbe:	b218      	sxth	r0, r3
 8010fc0:	003b      	movs	r3, r7
 8010fc2:	881b      	ldrh	r3, [r3, #0]
 8010fc4:	3b01      	subs	r3, #1
 8010fc6:	b29b      	uxth	r3, r3
 8010fc8:	b219      	sxth	r1, r3
 8010fca:	1cbb      	adds	r3, r7, #2
 8010fcc:	881b      	ldrh	r3, [r3, #0]
 8010fce:	3b01      	subs	r3, #1
 8010fd0:	b29b      	uxth	r3, r3
 8010fd2:	b21c      	sxth	r4, r3
 8010fd4:	003b      	movs	r3, r7
 8010fd6:	881b      	ldrh	r3, [r3, #0]
 8010fd8:	3b01      	subs	r3, #1
 8010fda:	b29b      	uxth	r3, r3
 8010fdc:	b21d      	sxth	r5, r3
 8010fde:	69bb      	ldr	r3, [r7, #24]
 8010fe0:	1c9a      	adds	r2, r3, #2
 8010fe2:	61ba      	str	r2, [r7, #24]
 8010fe4:	881b      	ldrh	r3, [r3, #0]
 8010fe6:	9300      	str	r3, [sp, #0]
 8010fe8:	002b      	movs	r3, r5
 8010fea:	0022      	movs	r2, r4
 8010fec:	f7fe fb3c 	bl	800f668 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 8010ff0:	1cbb      	adds	r3, r7, #2
 8010ff2:	881b      	ldrh	r3, [r3, #0]
 8010ff4:	3b01      	subs	r3, #1
 8010ff6:	b29b      	uxth	r3, r3
 8010ff8:	b218      	sxth	r0, r3
 8010ffa:	1d3b      	adds	r3, r7, #4
 8010ffc:	881b      	ldrh	r3, [r3, #0]
 8010ffe:	3301      	adds	r3, #1
 8011000:	b29b      	uxth	r3, r3
 8011002:	b219      	sxth	r1, r3
 8011004:	1cbb      	adds	r3, r7, #2
 8011006:	881b      	ldrh	r3, [r3, #0]
 8011008:	3b01      	subs	r3, #1
 801100a:	b29b      	uxth	r3, r3
 801100c:	b21c      	sxth	r4, r3
 801100e:	003b      	movs	r3, r7
 8011010:	881b      	ldrh	r3, [r3, #0]
 8011012:	3b02      	subs	r3, #2
 8011014:	b29b      	uxth	r3, r3
 8011016:	b21d      	sxth	r5, r3
 8011018:	69bb      	ldr	r3, [r7, #24]
 801101a:	1c9a      	adds	r2, r3, #2
 801101c:	61ba      	str	r2, [r7, #24]
 801101e:	881b      	ldrh	r3, [r3, #0]
 8011020:	9300      	str	r3, [sp, #0]
 8011022:	002b      	movs	r3, r5
 8011024:	0022      	movs	r2, r4
 8011026:	f7fe fb1f 	bl	800f668 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 801102a:	1dbb      	adds	r3, r7, #6
 801102c:	881b      	ldrh	r3, [r3, #0]
 801102e:	3302      	adds	r3, #2
 8011030:	b29b      	uxth	r3, r3
 8011032:	b218      	sxth	r0, r3
 8011034:	1d3b      	adds	r3, r7, #4
 8011036:	881b      	ldrh	r3, [r3, #0]
 8011038:	3302      	adds	r3, #2
 801103a:	b29b      	uxth	r3, r3
 801103c:	b219      	sxth	r1, r3
 801103e:	1cbb      	adds	r3, r7, #2
 8011040:	881b      	ldrh	r3, [r3, #0]
 8011042:	3b03      	subs	r3, #3
 8011044:	b29b      	uxth	r3, r3
 8011046:	b21c      	sxth	r4, r3
 8011048:	1d3b      	adds	r3, r7, #4
 801104a:	881b      	ldrh	r3, [r3, #0]
 801104c:	3302      	adds	r3, #2
 801104e:	b29b      	uxth	r3, r3
 8011050:	b21d      	sxth	r5, r3
 8011052:	69bb      	ldr	r3, [r7, #24]
 8011054:	1c9a      	adds	r2, r3, #2
 8011056:	61ba      	str	r2, [r7, #24]
 8011058:	881b      	ldrh	r3, [r3, #0]
 801105a:	9300      	str	r3, [sp, #0]
 801105c:	002b      	movs	r3, r5
 801105e:	0022      	movs	r2, r4
 8011060:	f7fe fb02 	bl	800f668 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 8011064:	1dbb      	adds	r3, r7, #6
 8011066:	881b      	ldrh	r3, [r3, #0]
 8011068:	3302      	adds	r3, #2
 801106a:	b29b      	uxth	r3, r3
 801106c:	b218      	sxth	r0, r3
 801106e:	1d3b      	adds	r3, r7, #4
 8011070:	881b      	ldrh	r3, [r3, #0]
 8011072:	3303      	adds	r3, #3
 8011074:	b29b      	uxth	r3, r3
 8011076:	b219      	sxth	r1, r3
 8011078:	1dbb      	adds	r3, r7, #6
 801107a:	881b      	ldrh	r3, [r3, #0]
 801107c:	3302      	adds	r3, #2
 801107e:	b29b      	uxth	r3, r3
 8011080:	b21c      	sxth	r4, r3
 8011082:	003b      	movs	r3, r7
 8011084:	881b      	ldrh	r3, [r3, #0]
 8011086:	3b03      	subs	r3, #3
 8011088:	b29b      	uxth	r3, r3
 801108a:	b21d      	sxth	r5, r3
 801108c:	69bb      	ldr	r3, [r7, #24]
 801108e:	1c9a      	adds	r2, r3, #2
 8011090:	61ba      	str	r2, [r7, #24]
 8011092:	881b      	ldrh	r3, [r3, #0]
 8011094:	9300      	str	r3, [sp, #0]
 8011096:	002b      	movs	r3, r5
 8011098:	0022      	movs	r2, r4
 801109a:	f7fe fae5 	bl	800f668 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 801109e:	1dbb      	adds	r3, r7, #6
 80110a0:	881b      	ldrh	r3, [r3, #0]
 80110a2:	3302      	adds	r3, #2
 80110a4:	b29b      	uxth	r3, r3
 80110a6:	b218      	sxth	r0, r3
 80110a8:	003b      	movs	r3, r7
 80110aa:	881b      	ldrh	r3, [r3, #0]
 80110ac:	3b02      	subs	r3, #2
 80110ae:	b29b      	uxth	r3, r3
 80110b0:	b219      	sxth	r1, r3
 80110b2:	1cbb      	adds	r3, r7, #2
 80110b4:	881b      	ldrh	r3, [r3, #0]
 80110b6:	3b02      	subs	r3, #2
 80110b8:	b29b      	uxth	r3, r3
 80110ba:	b21c      	sxth	r4, r3
 80110bc:	003b      	movs	r3, r7
 80110be:	881b      	ldrh	r3, [r3, #0]
 80110c0:	3b02      	subs	r3, #2
 80110c2:	b29b      	uxth	r3, r3
 80110c4:	b21d      	sxth	r5, r3
 80110c6:	69bb      	ldr	r3, [r7, #24]
 80110c8:	1c9a      	adds	r2, r3, #2
 80110ca:	61ba      	str	r2, [r7, #24]
 80110cc:	881b      	ldrh	r3, [r3, #0]
 80110ce:	9300      	str	r3, [sp, #0]
 80110d0:	002b      	movs	r3, r5
 80110d2:	0022      	movs	r2, r4
 80110d4:	f7fe fac8 	bl	800f668 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 80110d8:	1cbb      	adds	r3, r7, #2
 80110da:	881b      	ldrh	r3, [r3, #0]
 80110dc:	3b02      	subs	r3, #2
 80110de:	b29b      	uxth	r3, r3
 80110e0:	b218      	sxth	r0, r3
 80110e2:	1d3b      	adds	r3, r7, #4
 80110e4:	881b      	ldrh	r3, [r3, #0]
 80110e6:	3302      	adds	r3, #2
 80110e8:	b29b      	uxth	r3, r3
 80110ea:	b219      	sxth	r1, r3
 80110ec:	1cbb      	adds	r3, r7, #2
 80110ee:	881b      	ldrh	r3, [r3, #0]
 80110f0:	3b02      	subs	r3, #2
 80110f2:	b29b      	uxth	r3, r3
 80110f4:	b21a      	sxth	r2, r3
 80110f6:	003b      	movs	r3, r7
 80110f8:	881b      	ldrh	r3, [r3, #0]
 80110fa:	3b03      	subs	r3, #3
 80110fc:	b29b      	uxth	r3, r3
 80110fe:	b21c      	sxth	r4, r3
 8011100:	69bb      	ldr	r3, [r7, #24]
 8011102:	881b      	ldrh	r3, [r3, #0]
 8011104:	9300      	str	r3, [sp, #0]
 8011106:	0023      	movs	r3, r4
 8011108:	f7fe faae 	bl	800f668 <UG_DrawLine>
}
 801110c:	46c0      	nop			@ (mov r8, r8)
 801110e:	46bd      	mov	sp, r7
 8011110:	b002      	add	sp, #8
 8011112:	bdb0      	pop	{r4, r5, r7, pc}

08011114 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b082      	sub	sp, #8
 8011118:	af00      	add	r7, sp, #0
 801111a:	0002      	movs	r2, r0
 801111c:	6039      	str	r1, [r7, #0]
 801111e:	1dfb      	adds	r3, r7, #7
 8011120:	701a      	strb	r2, [r3, #0]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8011122:	1dfb      	adds	r3, r7, #7
 8011124:	781b      	ldrb	r3, [r3, #0]
 8011126:	2b03      	cmp	r3, #3
 8011128:	d814      	bhi.n	8011154 <UG_DriverRegister+0x40>

   gui->driver[type].driver = driver;
 801112a:	4b0c      	ldr	r3, [pc, #48]	@ (801115c <UG_DriverRegister+0x48>)
 801112c:	681a      	ldr	r2, [r3, #0]
 801112e:	1dfb      	adds	r3, r7, #7
 8011130:	781b      	ldrb	r3, [r3, #0]
 8011132:	330a      	adds	r3, #10
 8011134:	00db      	lsls	r3, r3, #3
 8011136:	18d3      	adds	r3, r2, r3
 8011138:	3304      	adds	r3, #4
 801113a:	683a      	ldr	r2, [r7, #0]
 801113c:	601a      	str	r2, [r3, #0]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 801113e:	4b07      	ldr	r3, [pc, #28]	@ (801115c <UG_DriverRegister+0x48>)
 8011140:	681a      	ldr	r2, [r3, #0]
 8011142:	1dfb      	adds	r3, r7, #7
 8011144:	781b      	ldrb	r3, [r3, #0]
 8011146:	330a      	adds	r3, #10
 8011148:	00db      	lsls	r3, r3, #3
 801114a:	18d3      	adds	r3, r2, r3
 801114c:	3308      	adds	r3, #8
 801114e:	2203      	movs	r2, #3
 8011150:	701a      	strb	r2, [r3, #0]
 8011152:	e000      	b.n	8011156 <UG_DriverRegister+0x42>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8011154:	46c0      	nop			@ (mov r8, r8)
}
 8011156:	46bd      	mov	sp, r7
 8011158:	b002      	add	sp, #8
 801115a:	bd80      	pop	{r7, pc}
 801115c:	20000c44 	.word	0x20000c44

08011160 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b082      	sub	sp, #8
 8011164:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 8011166:	4b61      	ldr	r3, [pc, #388]	@ (80112ec <UG_Update+0x18c>)
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	2252      	movs	r2, #82	@ 0x52
 801116c:	5c9b      	ldrb	r3, [r3, r2]
 801116e:	001a      	movs	r2, r3
 8011170:	2301      	movs	r3, #1
 8011172:	4013      	ands	r3, r2
 8011174:	d00a      	beq.n	801118c <UG_Update+0x2c>
 8011176:	4b5d      	ldr	r3, [pc, #372]	@ (80112ec <UG_Update+0x18c>)
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	2252      	movs	r2, #82	@ 0x52
 801117c:	5c9a      	ldrb	r2, [r3, r2]
 801117e:	4b5b      	ldr	r3, [pc, #364]	@ (80112ec <UG_Update+0x18c>)
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	2101      	movs	r1, #1
 8011184:	438a      	bics	r2, r1
 8011186:	b2d1      	uxtb	r1, r2
 8011188:	2252      	movs	r2, #82	@ 0x52
 801118a:	5499      	strb	r1, [r3, r2]

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 801118c:	4b57      	ldr	r3, [pc, #348]	@ (80112ec <UG_Update+0x18c>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	68da      	ldr	r2, [r3, #12]
 8011192:	4b56      	ldr	r3, [pc, #344]	@ (80112ec <UG_Update+0x18c>)
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	691b      	ldr	r3, [r3, #16]
 8011198:	429a      	cmp	r2, r3
 801119a:	d100      	bne.n	801119e <UG_Update+0x3e>
 801119c:	e071      	b.n	8011282 <UG_Update+0x122>
   {
      if ( gui->next_window != NULL )
 801119e:	4b53      	ldr	r3, [pc, #332]	@ (80112ec <UG_Update+0x18c>)
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	68db      	ldr	r3, [r3, #12]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d06c      	beq.n	8011282 <UG_Update+0x122>
      {
         gui->last_window = gui->active_window;
 80111a8:	4b50      	ldr	r3, [pc, #320]	@ (80112ec <UG_Update+0x18c>)
 80111aa:	681a      	ldr	r2, [r3, #0]
 80111ac:	4b4f      	ldr	r3, [pc, #316]	@ (80112ec <UG_Update+0x18c>)
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	6912      	ldr	r2, [r2, #16]
 80111b2:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 80111b4:	4b4d      	ldr	r3, [pc, #308]	@ (80112ec <UG_Update+0x18c>)
 80111b6:	681a      	ldr	r2, [r3, #0]
 80111b8:	4b4c      	ldr	r3, [pc, #304]	@ (80112ec <UG_Update+0x18c>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	68d2      	ldr	r2, [r2, #12]
 80111be:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 80111c0:	4b4a      	ldr	r3, [pc, #296]	@ (80112ec <UG_Update+0x18c>)
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	695b      	ldr	r3, [r3, #20]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d045      	beq.n	8011256 <UG_Update+0xf6>
 80111ca:	4b48      	ldr	r3, [pc, #288]	@ (80112ec <UG_Update+0x18c>)
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	695b      	ldr	r3, [r3, #20]
 80111d0:	7d9b      	ldrb	r3, [r3, #22]
 80111d2:	001a      	movs	r2, r3
 80111d4:	2302      	movs	r3, #2
 80111d6:	4013      	ands	r3, r2
 80111d8:	d03d      	beq.n	8011256 <UG_Update+0xf6>
 80111da:	4b44      	ldr	r3, [pc, #272]	@ (80112ec <UG_Update+0x18c>)
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	695b      	ldr	r3, [r3, #20]
 80111e0:	7a1b      	ldrb	r3, [r3, #8]
 80111e2:	001a      	movs	r2, r3
 80111e4:	2308      	movs	r3, #8
 80111e6:	4013      	ands	r3, r2
 80111e8:	d035      	beq.n	8011256 <UG_Update+0xf6>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 80111ea:	4b40      	ldr	r3, [pc, #256]	@ (80112ec <UG_Update+0x18c>)
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	695b      	ldr	r3, [r3, #20]
 80111f0:	220e      	movs	r2, #14
 80111f2:	5e9a      	ldrsh	r2, [r3, r2]
 80111f4:	4b3d      	ldr	r3, [pc, #244]	@ (80112ec <UG_Update+0x18c>)
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	691b      	ldr	r3, [r3, #16]
 80111fa:	210e      	movs	r1, #14
 80111fc:	5e5b      	ldrsh	r3, [r3, r1]
 80111fe:	429a      	cmp	r2, r3
 8011200:	d123      	bne.n	801124a <UG_Update+0xea>
 8011202:	4b3a      	ldr	r3, [pc, #232]	@ (80112ec <UG_Update+0x18c>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	695b      	ldr	r3, [r3, #20]
 8011208:	2212      	movs	r2, #18
 801120a:	5e9a      	ldrsh	r2, [r3, r2]
 801120c:	4b37      	ldr	r3, [pc, #220]	@ (80112ec <UG_Update+0x18c>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	691b      	ldr	r3, [r3, #16]
 8011212:	2112      	movs	r1, #18
 8011214:	5e5b      	ldrsh	r3, [r3, r1]
 8011216:	429a      	cmp	r2, r3
 8011218:	d117      	bne.n	801124a <UG_Update+0xea>
 801121a:	4b34      	ldr	r3, [pc, #208]	@ (80112ec <UG_Update+0x18c>)
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	695b      	ldr	r3, [r3, #20]
 8011220:	2210      	movs	r2, #16
 8011222:	5e9a      	ldrsh	r2, [r3, r2]
 8011224:	4b31      	ldr	r3, [pc, #196]	@ (80112ec <UG_Update+0x18c>)
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	691b      	ldr	r3, [r3, #16]
 801122a:	2110      	movs	r1, #16
 801122c:	5e5b      	ldrsh	r3, [r3, r1]
 801122e:	429a      	cmp	r2, r3
 8011230:	d10b      	bne.n	801124a <UG_Update+0xea>
 8011232:	4b2e      	ldr	r3, [pc, #184]	@ (80112ec <UG_Update+0x18c>)
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	695b      	ldr	r3, [r3, #20]
 8011238:	2214      	movs	r2, #20
 801123a:	5e9a      	ldrsh	r2, [r3, r2]
 801123c:	4b2b      	ldr	r3, [pc, #172]	@ (80112ec <UG_Update+0x18c>)
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	691b      	ldr	r3, [r3, #16]
 8011242:	2114      	movs	r1, #20
 8011244:	5e5b      	ldrsh	r3, [r3, r1]
 8011246:	429a      	cmp	r2, r3
 8011248:	d005      	beq.n	8011256 <UG_Update+0xf6>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 801124a:	4b28      	ldr	r3, [pc, #160]	@ (80112ec <UG_Update+0x18c>)
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	695b      	ldr	r3, [r3, #20]
 8011250:	0018      	movs	r0, r3
 8011252:	f000 f84d 	bl	80112f0 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8011256:	4b25      	ldr	r3, [pc, #148]	@ (80112ec <UG_Update+0x18c>)
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	691b      	ldr	r3, [r3, #16]
 801125c:	7a1a      	ldrb	r2, [r3, #8]
 801125e:	4b23      	ldr	r3, [pc, #140]	@ (80112ec <UG_Update+0x18c>)
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	691b      	ldr	r3, [r3, #16]
 8011264:	2140      	movs	r1, #64	@ 0x40
 8011266:	438a      	bics	r2, r1
 8011268:	b2d2      	uxtb	r2, r2
 801126a:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 801126c:	4b1f      	ldr	r3, [pc, #124]	@ (80112ec <UG_Update+0x18c>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	691b      	ldr	r3, [r3, #16]
 8011272:	7a1a      	ldrb	r2, [r3, #8]
 8011274:	4b1d      	ldr	r3, [pc, #116]	@ (80112ec <UG_Update+0x18c>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	691b      	ldr	r3, [r3, #16]
 801127a:	2128      	movs	r1, #40	@ 0x28
 801127c:	430a      	orrs	r2, r1
 801127e:	b2d2      	uxtb	r2, r2
 8011280:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8011282:	4b1a      	ldr	r3, [pc, #104]	@ (80112ec <UG_Update+0x18c>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	691b      	ldr	r3, [r3, #16]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d01f      	beq.n	80112cc <UG_Update+0x16c>
   {
      wnd = gui->active_window;
 801128c:	4b17      	ldr	r3, [pc, #92]	@ (80112ec <UG_Update+0x18c>)
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	691b      	ldr	r3, [r3, #16]
 8011292:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	7a1b      	ldrb	r3, [r3, #8]
 8011298:	001a      	movs	r2, r3
 801129a:	2320      	movs	r3, #32
 801129c:	4013      	ands	r3, r2
 801129e:	d003      	beq.n	80112a8 <UG_Update+0x148>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	0018      	movs	r0, r3
 80112a4:	f000 f904 	bl	80114b0 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	7a1b      	ldrb	r3, [r3, #8]
 80112ac:	001a      	movs	r2, r3
 80112ae:	2308      	movs	r3, #8
 80112b0:	4013      	ands	r3, r2
 80112b2:	d00b      	beq.n	80112cc <UG_Update+0x16c>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	0018      	movs	r0, r3
 80112b8:	f7ff fa54 	bl	8010764 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	0018      	movs	r0, r3
 80112c0:	f7ff fb46 	bl	8010950 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	0018      	movs	r0, r3
 80112c8:	f7ff fba2 	bl	8010a10 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 80112cc:	4b07      	ldr	r3, [pc, #28]	@ (80112ec <UG_Update+0x18c>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	689b      	ldr	r3, [r3, #8]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d004      	beq.n	80112e2 <UG_Update+0x182>
     gui->device->flush();
 80112d8:	4b04      	ldr	r3, [pc, #16]	@ (80112ec <UG_Update+0x18c>)
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	689b      	ldr	r3, [r3, #8]
 80112e0:	4798      	blx	r3
   }
}
 80112e2:	46c0      	nop			@ (mov r8, r8)
 80112e4:	46bd      	mov	sp, r7
 80112e6:	b002      	add	sp, #8
 80112e8:	bd80      	pop	{r7, pc}
 80112ea:	46c0      	nop			@ (mov r8, r8)
 80112ec:	20000c44 	.word	0x20000c44

080112f0 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 80112f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112f2:	b08f      	sub	sp, #60	@ 0x3c
 80112f4:	af02      	add	r7, sp, #8
 80112f6:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d100      	bne.n	8011300 <_UG_WindowDrawTitle+0x10>
 80112fe:	e0cd      	b.n	801149c <_UG_WindowDrawTitle+0x1ac>
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	7a1b      	ldrb	r3, [r3, #8]
 8011304:	001a      	movs	r2, r3
 8011306:	2302      	movs	r3, #2
 8011308:	4013      	ands	r3, r2
 801130a:	d100      	bne.n	801130e <_UG_WindowDrawTitle+0x1e>
 801130c:	e0c6      	b.n	801149c <_UG_WindowDrawTitle+0x1ac>
   {
      xs = wnd->xs;
 801130e:	212e      	movs	r1, #46	@ 0x2e
 8011310:	187b      	adds	r3, r7, r1
 8011312:	687a      	ldr	r2, [r7, #4]
 8011314:	89d2      	ldrh	r2, [r2, #14]
 8011316:	801a      	strh	r2, [r3, #0]
      ys = wnd->ys;
 8011318:	202c      	movs	r0, #44	@ 0x2c
 801131a:	183b      	adds	r3, r7, r0
 801131c:	687a      	ldr	r2, [r7, #4]
 801131e:	8a12      	ldrh	r2, [r2, #16]
 8011320:	801a      	strh	r2, [r3, #0]
      xe = wnd->xe;
 8011322:	242a      	movs	r4, #42	@ 0x2a
 8011324:	193b      	adds	r3, r7, r4
 8011326:	687a      	ldr	r2, [r7, #4]
 8011328:	8a52      	ldrh	r2, [r2, #18]
 801132a:	801a      	strh	r2, [r3, #0]
      ye = wnd->ye;
 801132c:	2528      	movs	r5, #40	@ 0x28
 801132e:	197b      	adds	r3, r7, r5
 8011330:	687a      	ldr	r2, [r7, #4]
 8011332:	8a92      	ldrh	r2, [r2, #20]
 8011334:	801a      	strh	r2, [r3, #0]

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	7d9b      	ldrb	r3, [r3, #22]
 801133a:	001a      	movs	r2, r3
 801133c:	2301      	movs	r3, #1
 801133e:	4013      	ands	r3, r2
 8011340:	d017      	beq.n	8011372 <_UG_WindowDrawTitle+0x82>
      {
         xs+=3;
 8011342:	187b      	adds	r3, r7, r1
 8011344:	881b      	ldrh	r3, [r3, #0]
 8011346:	3303      	adds	r3, #3
 8011348:	b29a      	uxth	r2, r3
 801134a:	187b      	adds	r3, r7, r1
 801134c:	801a      	strh	r2, [r3, #0]
         ys+=3;
 801134e:	183b      	adds	r3, r7, r0
 8011350:	881b      	ldrh	r3, [r3, #0]
 8011352:	3303      	adds	r3, #3
 8011354:	b29a      	uxth	r2, r3
 8011356:	183b      	adds	r3, r7, r0
 8011358:	801a      	strh	r2, [r3, #0]
         xe-=3;
 801135a:	193b      	adds	r3, r7, r4
 801135c:	881b      	ldrh	r3, [r3, #0]
 801135e:	3b03      	subs	r3, #3
 8011360:	b29a      	uxth	r2, r3
 8011362:	193b      	adds	r3, r7, r4
 8011364:	801a      	strh	r2, [r3, #0]
         ye-=3;
 8011366:	197b      	adds	r3, r7, r5
 8011368:	881b      	ldrh	r3, [r3, #0]
 801136a:	3b03      	subs	r3, #3
 801136c:	b29a      	uxth	r2, r3
 801136e:	197b      	adds	r3, r7, r5
 8011370:	801a      	strh	r2, [r3, #0]
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8011372:	4b4d      	ldr	r3, [pc, #308]	@ (80114a8 <_UG_WindowDrawTitle+0x1b8>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	691b      	ldr	r3, [r3, #16]
 8011378:	687a      	ldr	r2, [r7, #4]
 801137a:	429a      	cmp	r2, r3
 801137c:	d109      	bne.n	8011392 <_UG_WindowDrawTitle+0xa2>
      {
         txt.bc = wnd->title.bc;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8011382:	210c      	movs	r1, #12
 8011384:	187b      	adds	r3, r7, r1
 8011386:	825a      	strh	r2, [r3, #18]
         txt.fc = wnd->title.fc;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 801138c:	187b      	adds	r3, r7, r1
 801138e:	821a      	strh	r2, [r3, #16]
 8011390:	e008      	b.n	80113a4 <_UG_WindowDrawTitle+0xb4>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8011396:	210c      	movs	r1, #12
 8011398:	187b      	adds	r3, r7, r1
 801139a:	825a      	strh	r2, [r3, #18]
         txt.fc = wnd->title.ifc;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80113a0:	187b      	adds	r3, r7, r1
 80113a2:	821a      	strh	r2, [r3, #16]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	222c      	movs	r2, #44	@ 0x2c
 80113a8:	5c9b      	ldrb	r3, [r3, r2]
 80113aa:	001a      	movs	r2, r3
 80113ac:	212c      	movs	r1, #44	@ 0x2c
 80113ae:	187b      	adds	r3, r7, r1
 80113b0:	881b      	ldrh	r3, [r3, #0]
 80113b2:	18d3      	adds	r3, r2, r3
 80113b4:	b29b      	uxth	r3, r3
 80113b6:	3b01      	subs	r3, #1
 80113b8:	b29b      	uxth	r3, r3
 80113ba:	b21d      	sxth	r5, r3
 80113bc:	260c      	movs	r6, #12
 80113be:	19bb      	adds	r3, r7, r6
 80113c0:	8a5b      	ldrh	r3, [r3, #18]
 80113c2:	222a      	movs	r2, #42	@ 0x2a
 80113c4:	18ba      	adds	r2, r7, r2
 80113c6:	2000      	movs	r0, #0
 80113c8:	5e14      	ldrsh	r4, [r2, r0]
 80113ca:	187a      	adds	r2, r7, r1
 80113cc:	2000      	movs	r0, #0
 80113ce:	5e11      	ldrsh	r1, [r2, r0]
 80113d0:	202e      	movs	r0, #46	@ 0x2e
 80113d2:	183a      	adds	r2, r7, r0
 80113d4:	2000      	movs	r0, #0
 80113d6:	5e10      	ldrsh	r0, [r2, r0]
 80113d8:	9300      	str	r3, [sp, #0]
 80113da:	002b      	movs	r3, r5
 80113dc:	0022      	movs	r2, r4
 80113de:	f7fe f89d 	bl	800f51c <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	699a      	ldr	r2, [r3, #24]
 80113e6:	19bb      	adds	r3, r7, r6
 80113e8:	601a      	str	r2, [r3, #0]
      txt.font = wnd->title.font;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	69da      	ldr	r2, [r3, #28]
 80113ee:	19bb      	adds	r3, r7, r6
 80113f0:	605a      	str	r2, [r3, #4]
      txt.a.xs = xs+3;
 80113f2:	202e      	movs	r0, #46	@ 0x2e
 80113f4:	183b      	adds	r3, r7, r0
 80113f6:	881b      	ldrh	r3, [r3, #0]
 80113f8:	3303      	adds	r3, #3
 80113fa:	b29b      	uxth	r3, r3
 80113fc:	b21a      	sxth	r2, r3
 80113fe:	0031      	movs	r1, r6
 8011400:	187b      	adds	r3, r7, r1
 8011402:	811a      	strh	r2, [r3, #8]
      txt.a.ys = ys;
 8011404:	187b      	adds	r3, r7, r1
 8011406:	242c      	movs	r4, #44	@ 0x2c
 8011408:	193a      	adds	r2, r7, r4
 801140a:	8812      	ldrh	r2, [r2, #0]
 801140c:	815a      	strh	r2, [r3, #10]
      txt.a.xe = xe;
 801140e:	187b      	adds	r3, r7, r1
 8011410:	262a      	movs	r6, #42	@ 0x2a
 8011412:	19ba      	adds	r2, r7, r6
 8011414:	8812      	ldrh	r2, [r2, #0]
 8011416:	819a      	strh	r2, [r3, #12]
      txt.a.ye = ys+wnd->title.height-1;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	222c      	movs	r2, #44	@ 0x2c
 801141c:	5c9b      	ldrb	r3, [r3, r2]
 801141e:	001a      	movs	r2, r3
 8011420:	193b      	adds	r3, r7, r4
 8011422:	881b      	ldrh	r3, [r3, #0]
 8011424:	18d3      	adds	r3, r2, r3
 8011426:	b29b      	uxth	r3, r3
 8011428:	3b01      	subs	r3, #1
 801142a:	b29b      	uxth	r3, r3
 801142c:	b21a      	sxth	r2, r3
 801142e:	187b      	adds	r3, r7, r1
 8011430:	81da      	strh	r2, [r3, #14]
      txt.align = wnd->title.align;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	2222      	movs	r2, #34	@ 0x22
 8011436:	5c9a      	ldrb	r2, [r3, r2]
 8011438:	187b      	adds	r3, r7, r1
 801143a:	751a      	strb	r2, [r3, #20]
      txt.h_space = wnd->title.h_space;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	2220      	movs	r2, #32
 8011440:	569b      	ldrsb	r3, [r3, r2]
 8011442:	001a      	movs	r2, r3
 8011444:	187b      	adds	r3, r7, r1
 8011446:	82da      	strh	r2, [r3, #22]
      txt.v_space = wnd->title.v_space;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	2221      	movs	r2, #33	@ 0x21
 801144c:	569b      	ldrsb	r3, [r3, r2]
 801144e:	001a      	movs	r2, r3
 8011450:	187b      	adds	r3, r7, r1
 8011452:	831a      	strh	r2, [r3, #24]
      _UG_PutText( &txt );
 8011454:	187b      	adds	r3, r7, r1
 8011456:	0018      	movs	r0, r3
 8011458:	f7ff fb36 	bl	8010ac8 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	222c      	movs	r2, #44	@ 0x2c
 8011460:	5c9b      	ldrb	r3, [r3, r2]
 8011462:	001a      	movs	r2, r3
 8011464:	193b      	adds	r3, r7, r4
 8011466:	881b      	ldrh	r3, [r3, #0]
 8011468:	18d3      	adds	r3, r2, r3
 801146a:	b29b      	uxth	r3, r3
 801146c:	b219      	sxth	r1, r3
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	222c      	movs	r2, #44	@ 0x2c
 8011472:	5c9b      	ldrb	r3, [r3, r2]
 8011474:	001a      	movs	r2, r3
 8011476:	193b      	adds	r3, r7, r4
 8011478:	881b      	ldrh	r3, [r3, #0]
 801147a:	18d3      	adds	r3, r2, r3
 801147c:	b29b      	uxth	r3, r3
 801147e:	b21c      	sxth	r4, r3
 8011480:	4d0a      	ldr	r5, [pc, #40]	@ (80114ac <_UG_WindowDrawTitle+0x1bc>)
 8011482:	19bb      	adds	r3, r7, r6
 8011484:	2200      	movs	r2, #0
 8011486:	5e9a      	ldrsh	r2, [r3, r2]
 8011488:	202e      	movs	r0, #46	@ 0x2e
 801148a:	183b      	adds	r3, r7, r0
 801148c:	2000      	movs	r0, #0
 801148e:	5e18      	ldrsh	r0, [r3, r0]
 8011490:	9500      	str	r5, [sp, #0]
 8011492:	0023      	movs	r3, r4
 8011494:	f7fe f8e8 	bl	800f668 <UG_DrawLine>
      return UG_RESULT_OK;
 8011498:	2300      	movs	r3, #0
 801149a:	e001      	b.n	80114a0 <_UG_WindowDrawTitle+0x1b0>
   }
   return UG_RESULT_FAIL;
 801149c:	2301      	movs	r3, #1
 801149e:	425b      	negs	r3, r3
}
 80114a0:	0018      	movs	r0, r3
 80114a2:	46bd      	mov	sp, r7
 80114a4:	b00d      	add	sp, #52	@ 0x34
 80114a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114a8:	20000c44 	.word	0x20000c44
 80114ac:	00009d13 	.word	0x00009d13

080114b0 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 80114b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114b2:	b089      	sub	sp, #36	@ 0x24
 80114b4:	af02      	add	r7, sp, #8
 80114b6:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 80114b8:	2014      	movs	r0, #20
 80114ba:	183b      	adds	r3, r7, r0
 80114bc:	687a      	ldr	r2, [r7, #4]
 80114be:	89d2      	ldrh	r2, [r2, #14]
 80114c0:	801a      	strh	r2, [r3, #0]
   ys = wnd->ys;
 80114c2:	2112      	movs	r1, #18
 80114c4:	187b      	adds	r3, r7, r1
 80114c6:	687a      	ldr	r2, [r7, #4]
 80114c8:	8a12      	ldrh	r2, [r2, #16]
 80114ca:	801a      	strh	r2, [r3, #0]
   xe = wnd->xe;
 80114cc:	2510      	movs	r5, #16
 80114ce:	197b      	adds	r3, r7, r5
 80114d0:	687a      	ldr	r2, [r7, #4]
 80114d2:	8a52      	ldrh	r2, [r2, #18]
 80114d4:	801a      	strh	r2, [r3, #0]
   ye = wnd->ye;
 80114d6:	240e      	movs	r4, #14
 80114d8:	193b      	adds	r3, r7, r4
 80114da:	687a      	ldr	r2, [r7, #4]
 80114dc:	8a92      	ldrh	r2, [r2, #20]
 80114de:	801a      	strh	r2, [r3, #0]

   wnd->state &= ~WND_STATE_UPDATE;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	7a1b      	ldrb	r3, [r3, #8]
 80114e4:	2220      	movs	r2, #32
 80114e6:	4393      	bics	r3, r2
 80114e8:	b2da      	uxtb	r2, r3
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	7a1b      	ldrb	r3, [r3, #8]
 80114f2:	001a      	movs	r2, r3
 80114f4:	2308      	movs	r3, #8
 80114f6:	4013      	ands	r3, r2
 80114f8:	d100      	bne.n	80114fc <_UG_WindowUpdate+0x4c>
 80114fa:	e0af      	b.n	801165c <_UG_WindowUpdate+0x1ac>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	7d9b      	ldrb	r3, [r3, #22]
 8011500:	001a      	movs	r2, r3
 8011502:	2301      	movs	r3, #1
 8011504:	4013      	ands	r3, r2
 8011506:	d033      	beq.n	8011570 <_UG_WindowUpdate+0xc0>
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	7a1b      	ldrb	r3, [r3, #8]
 801150c:	001a      	movs	r2, r3
 801150e:	2340      	movs	r3, #64	@ 0x40
 8011510:	4013      	ands	r3, r2
 8011512:	d12d      	bne.n	8011570 <_UG_WindowUpdate+0xc0>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8011514:	193b      	adds	r3, r7, r4
 8011516:	2400      	movs	r4, #0
 8011518:	5f1c      	ldrsh	r4, [r3, r4]
 801151a:	197b      	adds	r3, r7, r5
 801151c:	2200      	movs	r2, #0
 801151e:	5e9a      	ldrsh	r2, [r3, r2]
 8011520:	000e      	movs	r6, r1
 8011522:	187b      	adds	r3, r7, r1
 8011524:	2100      	movs	r1, #0
 8011526:	5e59      	ldrsh	r1, [r3, r1]
 8011528:	0005      	movs	r5, r0
 801152a:	183b      	adds	r3, r7, r0
 801152c:	2000      	movs	r0, #0
 801152e:	5e18      	ldrsh	r0, [r3, r0]
 8011530:	4b56      	ldr	r3, [pc, #344]	@ (801168c <_UG_WindowUpdate+0x1dc>)
 8011532:	9300      	str	r3, [sp, #0]
 8011534:	0023      	movs	r3, r4
 8011536:	f7ff fc95 	bl	8010e64 <_UG_DrawObjectFrame>
         xs+=3;
 801153a:	0028      	movs	r0, r5
 801153c:	183b      	adds	r3, r7, r0
 801153e:	881b      	ldrh	r3, [r3, #0]
 8011540:	3303      	adds	r3, #3
 8011542:	b29a      	uxth	r2, r3
 8011544:	183b      	adds	r3, r7, r0
 8011546:	801a      	strh	r2, [r3, #0]
         ys+=3;
 8011548:	19bb      	adds	r3, r7, r6
 801154a:	881b      	ldrh	r3, [r3, #0]
 801154c:	3303      	adds	r3, #3
 801154e:	b29a      	uxth	r2, r3
 8011550:	19bb      	adds	r3, r7, r6
 8011552:	801a      	strh	r2, [r3, #0]
         xe-=3;
 8011554:	2510      	movs	r5, #16
 8011556:	197b      	adds	r3, r7, r5
 8011558:	881b      	ldrh	r3, [r3, #0]
 801155a:	3b03      	subs	r3, #3
 801155c:	b29a      	uxth	r2, r3
 801155e:	197b      	adds	r3, r7, r5
 8011560:	801a      	strh	r2, [r3, #0]
         ye-=3;
 8011562:	240e      	movs	r4, #14
 8011564:	193b      	adds	r3, r7, r4
 8011566:	881b      	ldrh	r3, [r3, #0]
 8011568:	3b03      	subs	r3, #3
 801156a:	b29a      	uxth	r2, r3
 801156c:	193b      	adds	r3, r7, r4
 801156e:	801a      	strh	r2, [r3, #0]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	7d9b      	ldrb	r3, [r3, #22]
 8011574:	001a      	movs	r2, r3
 8011576:	2302      	movs	r3, #2
 8011578:	4013      	ands	r3, r2
 801157a:	d01e      	beq.n	80115ba <_UG_WindowUpdate+0x10a>
      {
         _UG_WindowDrawTitle( wnd );
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	0018      	movs	r0, r3
 8011580:	f7ff feb6 	bl	80112f0 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	222c      	movs	r2, #44	@ 0x2c
 8011588:	5c9b      	ldrb	r3, [r3, r2]
 801158a:	001a      	movs	r2, r3
 801158c:	2112      	movs	r1, #18
 801158e:	187b      	adds	r3, r7, r1
 8011590:	881b      	ldrh	r3, [r3, #0]
 8011592:	18d3      	adds	r3, r2, r3
 8011594:	b29b      	uxth	r3, r3
 8011596:	3301      	adds	r3, #1
 8011598:	b29a      	uxth	r2, r3
 801159a:	187b      	adds	r3, r7, r1
 801159c:	801a      	strh	r2, [r3, #0]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	7a1b      	ldrb	r3, [r3, #8]
 80115a2:	001a      	movs	r2, r3
 80115a4:	2340      	movs	r3, #64	@ 0x40
 80115a6:	4013      	ands	r3, r2
 80115a8:	d007      	beq.n	80115ba <_UG_WindowUpdate+0x10a>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	7a1b      	ldrb	r3, [r3, #8]
 80115ae:	2240      	movs	r2, #64	@ 0x40
 80115b0:	4393      	bics	r3, r2
 80115b2:	b2da      	uxtb	r2, r3
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	721a      	strb	r2, [r3, #8]
            return;
 80115b8:	e064      	b.n	8011684 <_UG_WindowUpdate+0x1d4>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	899b      	ldrh	r3, [r3, #12]
 80115be:	220e      	movs	r2, #14
 80115c0:	18ba      	adds	r2, r7, r2
 80115c2:	2500      	movs	r5, #0
 80115c4:	5f55      	ldrsh	r5, [r2, r5]
 80115c6:	2210      	movs	r2, #16
 80115c8:	18ba      	adds	r2, r7, r2
 80115ca:	2400      	movs	r4, #0
 80115cc:	5f14      	ldrsh	r4, [r2, r4]
 80115ce:	2212      	movs	r2, #18
 80115d0:	18ba      	adds	r2, r7, r2
 80115d2:	2100      	movs	r1, #0
 80115d4:	5e51      	ldrsh	r1, [r2, r1]
 80115d6:	2214      	movs	r2, #20
 80115d8:	18ba      	adds	r2, r7, r2
 80115da:	2000      	movs	r0, #0
 80115dc:	5e10      	ldrsh	r0, [r2, r0]
 80115de:	9300      	str	r3, [sp, #0]
 80115e0:	002b      	movs	r3, r5
 80115e2:	0022      	movs	r2, r4
 80115e4:	f7fd ff9a 	bl	800f51c <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	781a      	ldrb	r2, [r3, #0]
 80115ec:	230c      	movs	r3, #12
 80115ee:	18fb      	adds	r3, r7, r3
 80115f0:	801a      	strh	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 80115f2:	2316      	movs	r3, #22
 80115f4:	18fb      	adds	r3, r7, r3
 80115f6:	2200      	movs	r2, #0
 80115f8:	801a      	strh	r2, [r3, #0]
 80115fa:	e026      	b.n	801164a <_UG_WindowUpdate+0x19a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	685a      	ldr	r2, [r3, #4]
 8011600:	2316      	movs	r3, #22
 8011602:	18fb      	adds	r3, r7, r3
 8011604:	881b      	ldrh	r3, [r3, #0]
 8011606:	015b      	lsls	r3, r3, #5
 8011608:	18d3      	adds	r3, r2, r3
 801160a:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 801160c:	68bb      	ldr	r3, [r7, #8]
 801160e:	781b      	ldrb	r3, [r3, #0]
 8011610:	001a      	movs	r2, r3
 8011612:	2301      	movs	r3, #1
 8011614:	4013      	ands	r3, r2
 8011616:	d112      	bne.n	801163e <_UG_WindowUpdate+0x18e>
 8011618:	68bb      	ldr	r3, [r7, #8]
 801161a:	781b      	ldrb	r3, [r3, #0]
 801161c:	001a      	movs	r2, r3
 801161e:	2302      	movs	r3, #2
 8011620:	4013      	ands	r3, r2
 8011622:	d00c      	beq.n	801163e <_UG_WindowUpdate+0x18e>
 8011624:	68bb      	ldr	r3, [r7, #8]
 8011626:	781b      	ldrb	r3, [r3, #0]
 8011628:	001a      	movs	r2, r3
 801162a:	2308      	movs	r3, #8
 801162c:	4013      	ands	r3, r2
 801162e:	d006      	beq.n	801163e <_UG_WindowUpdate+0x18e>
 8011630:	68bb      	ldr	r3, [r7, #8]
 8011632:	781b      	ldrb	r3, [r3, #0]
 8011634:	2260      	movs	r2, #96	@ 0x60
 8011636:	4313      	orrs	r3, r2
 8011638:	b2da      	uxtb	r2, r3
 801163a:	68bb      	ldr	r3, [r7, #8]
 801163c:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 801163e:	2116      	movs	r1, #22
 8011640:	187b      	adds	r3, r7, r1
 8011642:	881a      	ldrh	r2, [r3, #0]
 8011644:	187b      	adds	r3, r7, r1
 8011646:	3201      	adds	r2, #1
 8011648:	801a      	strh	r2, [r3, #0]
 801164a:	2316      	movs	r3, #22
 801164c:	18fa      	adds	r2, r7, r3
 801164e:	230c      	movs	r3, #12
 8011650:	18fb      	adds	r3, r7, r3
 8011652:	8812      	ldrh	r2, [r2, #0]
 8011654:	881b      	ldrh	r3, [r3, #0]
 8011656:	429a      	cmp	r2, r3
 8011658:	d3d0      	bcc.n	80115fc <_UG_WindowUpdate+0x14c>
 801165a:	e013      	b.n	8011684 <_UG_WindowUpdate+0x1d4>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	200e      	movs	r0, #14
 8011660:	5e18      	ldrsh	r0, [r3, r0]
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	210e      	movs	r1, #14
 8011666:	5e59      	ldrsh	r1, [r3, r1]
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	2212      	movs	r2, #18
 801166c:	5e9a      	ldrsh	r2, [r3, r2]
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	2414      	movs	r4, #20
 8011672:	5f1c      	ldrsh	r4, [r3, r4]
 8011674:	4b06      	ldr	r3, [pc, #24]	@ (8011690 <_UG_WindowUpdate+0x1e0>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	2550      	movs	r5, #80	@ 0x50
 801167a:	5b5b      	ldrh	r3, [r3, r5]
 801167c:	9300      	str	r3, [sp, #0]
 801167e:	0023      	movs	r3, r4
 8011680:	f7fd ff4c 	bl	800f51c <UG_FillFrame>
   }
}
 8011684:	46bd      	mov	sp, r7
 8011686:	b007      	add	sp, #28
 8011688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801168a:	46c0      	nop			@ (mov r8, r8)
 801168c:	08019d3c 	.word	0x08019d3c
 8011690:	20000c44 	.word	0x20000c44

08011694 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011698:	4914      	ldr	r1, [pc, #80]	@ (80116ec <MX_USB_DEVICE_Init+0x58>)
 801169a:	4b15      	ldr	r3, [pc, #84]	@ (80116f0 <MX_USB_DEVICE_Init+0x5c>)
 801169c:	2200      	movs	r2, #0
 801169e:	0018      	movs	r0, r3
 80116a0:	f7fb ff98 	bl	800d5d4 <USBD_Init>
 80116a4:	1e03      	subs	r3, r0, #0
 80116a6:	d001      	beq.n	80116ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80116a8:	f7f2 fb0e 	bl	8003cc8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80116ac:	4a11      	ldr	r2, [pc, #68]	@ (80116f4 <MX_USB_DEVICE_Init+0x60>)
 80116ae:	4b10      	ldr	r3, [pc, #64]	@ (80116f0 <MX_USB_DEVICE_Init+0x5c>)
 80116b0:	0011      	movs	r1, r2
 80116b2:	0018      	movs	r0, r3
 80116b4:	f7fb ffbf 	bl	800d636 <USBD_RegisterClass>
 80116b8:	1e03      	subs	r3, r0, #0
 80116ba:	d001      	beq.n	80116c0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80116bc:	f7f2 fb04 	bl	8003cc8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80116c0:	4a0d      	ldr	r2, [pc, #52]	@ (80116f8 <MX_USB_DEVICE_Init+0x64>)
 80116c2:	4b0b      	ldr	r3, [pc, #44]	@ (80116f0 <MX_USB_DEVICE_Init+0x5c>)
 80116c4:	0011      	movs	r1, r2
 80116c6:	0018      	movs	r0, r3
 80116c8:	f7fb fed4 	bl	800d474 <USBD_CDC_RegisterInterface>
 80116cc:	1e03      	subs	r3, r0, #0
 80116ce:	d001      	beq.n	80116d4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80116d0:	f7f2 fafa 	bl	8003cc8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80116d4:	4b06      	ldr	r3, [pc, #24]	@ (80116f0 <MX_USB_DEVICE_Init+0x5c>)
 80116d6:	0018      	movs	r0, r3
 80116d8:	f7fb ffcd 	bl	800d676 <USBD_Start>
 80116dc:	1e03      	subs	r3, r0, #0
 80116de:	d001      	beq.n	80116e4 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80116e0:	f7f2 faf2 	bl	8003cc8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80116e4:	46c0      	nop			@ (mov r8, r8)
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bd80      	pop	{r7, pc}
 80116ea:	46c0      	nop			@ (mov r8, r8)
 80116ec:	200001ac 	.word	0x200001ac
 80116f0:	20000c60 	.word	0x20000c60
 80116f4:	20000088 	.word	0x20000088
 80116f8:	2000019c 	.word	0x2000019c

080116fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011700:	4907      	ldr	r1, [pc, #28]	@ (8011720 <CDC_Init_FS+0x24>)
 8011702:	4b08      	ldr	r3, [pc, #32]	@ (8011724 <CDC_Init_FS+0x28>)
 8011704:	2200      	movs	r2, #0
 8011706:	0018      	movs	r0, r3
 8011708:	f7fb fecf 	bl	800d4aa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801170c:	4a06      	ldr	r2, [pc, #24]	@ (8011728 <CDC_Init_FS+0x2c>)
 801170e:	4b05      	ldr	r3, [pc, #20]	@ (8011724 <CDC_Init_FS+0x28>)
 8011710:	0011      	movs	r1, r2
 8011712:	0018      	movs	r0, r3
 8011714:	f7fb fee5 	bl	800d4e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011718:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801171a:	0018      	movs	r0, r3
 801171c:	46bd      	mov	sp, r7
 801171e:	bd80      	pop	{r7, pc}
 8011720:	20001324 	.word	0x20001324
 8011724:	20000c60 	.word	0x20000c60
 8011728:	20000f24 	.word	0x20000f24

0801172c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011730:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011732:	0018      	movs	r0, r3
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}

08011738 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b082      	sub	sp, #8
 801173c:	af00      	add	r7, sp, #0
 801173e:	6039      	str	r1, [r7, #0]
 8011740:	0011      	movs	r1, r2
 8011742:	1dfb      	adds	r3, r7, #7
 8011744:	1c02      	adds	r2, r0, #0
 8011746:	701a      	strb	r2, [r3, #0]
 8011748:	1d3b      	adds	r3, r7, #4
 801174a:	1c0a      	adds	r2, r1, #0
 801174c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801174e:	1dfb      	adds	r3, r7, #7
 8011750:	781b      	ldrb	r3, [r3, #0]
 8011752:	2b23      	cmp	r3, #35	@ 0x23
 8011754:	d804      	bhi.n	8011760 <CDC_Control_FS+0x28>
 8011756:	009a      	lsls	r2, r3, #2
 8011758:	4b04      	ldr	r3, [pc, #16]	@ (801176c <CDC_Control_FS+0x34>)
 801175a:	18d3      	adds	r3, r2, r3
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011760:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8011762:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011764:	0018      	movs	r0, r3
 8011766:	46bd      	mov	sp, r7
 8011768:	b002      	add	sp, #8
 801176a:	bd80      	pop	{r7, pc}
 801176c:	08019df0 	.word	0x08019df0

08011770 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b082      	sub	sp, #8
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
 8011778:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801177a:	687a      	ldr	r2, [r7, #4]
 801177c:	4b06      	ldr	r3, [pc, #24]	@ (8011798 <CDC_Receive_FS+0x28>)
 801177e:	0011      	movs	r1, r2
 8011780:	0018      	movs	r0, r3
 8011782:	f7fb feae 	bl	800d4e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011786:	4b04      	ldr	r3, [pc, #16]	@ (8011798 <CDC_Receive_FS+0x28>)
 8011788:	0018      	movs	r0, r3
 801178a:	f7fb fef5 	bl	800d578 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801178e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011790:	0018      	movs	r0, r3
 8011792:	46bd      	mov	sp, r7
 8011794:	b002      	add	sp, #8
 8011796:	bd80      	pop	{r7, pc}
 8011798:	20000c60 	.word	0x20000c60

0801179c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801179c:	b5b0      	push	{r4, r5, r7, lr}
 801179e:	b084      	sub	sp, #16
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
 80117a4:	000a      	movs	r2, r1
 80117a6:	1cbb      	adds	r3, r7, #2
 80117a8:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 80117aa:	230f      	movs	r3, #15
 80117ac:	18fb      	adds	r3, r7, r3
 80117ae:	2200      	movs	r2, #0
 80117b0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80117b2:	4a11      	ldr	r2, [pc, #68]	@ (80117f8 <CDC_Transmit_FS+0x5c>)
 80117b4:	23ae      	movs	r3, #174	@ 0xae
 80117b6:	009b      	lsls	r3, r3, #2
 80117b8:	58d3      	ldr	r3, [r2, r3]
 80117ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80117bc:	68ba      	ldr	r2, [r7, #8]
 80117be:	2385      	movs	r3, #133	@ 0x85
 80117c0:	009b      	lsls	r3, r3, #2
 80117c2:	58d3      	ldr	r3, [r2, r3]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d001      	beq.n	80117cc <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 80117c8:	2301      	movs	r3, #1
 80117ca:	e010      	b.n	80117ee <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80117cc:	1cbb      	adds	r3, r7, #2
 80117ce:	881a      	ldrh	r2, [r3, #0]
 80117d0:	6879      	ldr	r1, [r7, #4]
 80117d2:	4b09      	ldr	r3, [pc, #36]	@ (80117f8 <CDC_Transmit_FS+0x5c>)
 80117d4:	0018      	movs	r0, r3
 80117d6:	f7fb fe68 	bl	800d4aa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80117da:	250f      	movs	r5, #15
 80117dc:	197c      	adds	r4, r7, r5
 80117de:	4b06      	ldr	r3, [pc, #24]	@ (80117f8 <CDC_Transmit_FS+0x5c>)
 80117e0:	0018      	movs	r0, r3
 80117e2:	f7fb fe92 	bl	800d50a <USBD_CDC_TransmitPacket>
 80117e6:	0003      	movs	r3, r0
 80117e8:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 80117ea:	197b      	adds	r3, r7, r5
 80117ec:	781b      	ldrb	r3, [r3, #0]
}
 80117ee:	0018      	movs	r0, r3
 80117f0:	46bd      	mov	sp, r7
 80117f2:	b004      	add	sp, #16
 80117f4:	bdb0      	pop	{r4, r5, r7, pc}
 80117f6:	46c0      	nop			@ (mov r8, r8)
 80117f8:	20000c60 	.word	0x20000c60

080117fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b082      	sub	sp, #8
 8011800:	af00      	add	r7, sp, #0
 8011802:	0002      	movs	r2, r0
 8011804:	6039      	str	r1, [r7, #0]
 8011806:	1dfb      	adds	r3, r7, #7
 8011808:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801180a:	683b      	ldr	r3, [r7, #0]
 801180c:	2212      	movs	r2, #18
 801180e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011810:	4b02      	ldr	r3, [pc, #8]	@ (801181c <USBD_FS_DeviceDescriptor+0x20>)
}
 8011812:	0018      	movs	r0, r3
 8011814:	46bd      	mov	sp, r7
 8011816:	b002      	add	sp, #8
 8011818:	bd80      	pop	{r7, pc}
 801181a:	46c0      	nop			@ (mov r8, r8)
 801181c:	200001c8 	.word	0x200001c8

08011820 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b082      	sub	sp, #8
 8011824:	af00      	add	r7, sp, #0
 8011826:	0002      	movs	r2, r0
 8011828:	6039      	str	r1, [r7, #0]
 801182a:	1dfb      	adds	r3, r7, #7
 801182c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	2204      	movs	r2, #4
 8011832:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011834:	4b02      	ldr	r3, [pc, #8]	@ (8011840 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011836:	0018      	movs	r0, r3
 8011838:	46bd      	mov	sp, r7
 801183a:	b002      	add	sp, #8
 801183c:	bd80      	pop	{r7, pc}
 801183e:	46c0      	nop			@ (mov r8, r8)
 8011840:	200001dc 	.word	0x200001dc

08011844 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b082      	sub	sp, #8
 8011848:	af00      	add	r7, sp, #0
 801184a:	0002      	movs	r2, r0
 801184c:	6039      	str	r1, [r7, #0]
 801184e:	1dfb      	adds	r3, r7, #7
 8011850:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8011852:	1dfb      	adds	r3, r7, #7
 8011854:	781b      	ldrb	r3, [r3, #0]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d106      	bne.n	8011868 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801185a:	683a      	ldr	r2, [r7, #0]
 801185c:	4908      	ldr	r1, [pc, #32]	@ (8011880 <USBD_FS_ProductStrDescriptor+0x3c>)
 801185e:	4b09      	ldr	r3, [pc, #36]	@ (8011884 <USBD_FS_ProductStrDescriptor+0x40>)
 8011860:	0018      	movs	r0, r3
 8011862:	f7fc ffc5 	bl	800e7f0 <USBD_GetString>
 8011866:	e005      	b.n	8011874 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011868:	683a      	ldr	r2, [r7, #0]
 801186a:	4905      	ldr	r1, [pc, #20]	@ (8011880 <USBD_FS_ProductStrDescriptor+0x3c>)
 801186c:	4b05      	ldr	r3, [pc, #20]	@ (8011884 <USBD_FS_ProductStrDescriptor+0x40>)
 801186e:	0018      	movs	r0, r3
 8011870:	f7fc ffbe 	bl	800e7f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011874:	4b02      	ldr	r3, [pc, #8]	@ (8011880 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8011876:	0018      	movs	r0, r3
 8011878:	46bd      	mov	sp, r7
 801187a:	b002      	add	sp, #8
 801187c:	bd80      	pop	{r7, pc}
 801187e:	46c0      	nop			@ (mov r8, r8)
 8011880:	20001724 	.word	0x20001724
 8011884:	08016744 	.word	0x08016744

08011888 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b082      	sub	sp, #8
 801188c:	af00      	add	r7, sp, #0
 801188e:	0002      	movs	r2, r0
 8011890:	6039      	str	r1, [r7, #0]
 8011892:	1dfb      	adds	r3, r7, #7
 8011894:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011896:	683a      	ldr	r2, [r7, #0]
 8011898:	4904      	ldr	r1, [pc, #16]	@ (80118ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801189a:	4b05      	ldr	r3, [pc, #20]	@ (80118b0 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801189c:	0018      	movs	r0, r3
 801189e:	f7fc ffa7 	bl	800e7f0 <USBD_GetString>
  return USBD_StrDesc;
 80118a2:	4b02      	ldr	r3, [pc, #8]	@ (80118ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80118a4:	0018      	movs	r0, r3
 80118a6:	46bd      	mov	sp, r7
 80118a8:	b002      	add	sp, #8
 80118aa:	bd80      	pop	{r7, pc}
 80118ac:	20001724 	.word	0x20001724
 80118b0:	0801675c 	.word	0x0801675c

080118b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b082      	sub	sp, #8
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	0002      	movs	r2, r0
 80118bc:	6039      	str	r1, [r7, #0]
 80118be:	1dfb      	adds	r3, r7, #7
 80118c0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80118c2:	683b      	ldr	r3, [r7, #0]
 80118c4:	221a      	movs	r2, #26
 80118c6:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80118c8:	f000 f84c 	bl	8011964 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80118cc:	4b02      	ldr	r3, [pc, #8]	@ (80118d8 <USBD_FS_SerialStrDescriptor+0x24>)
}
 80118ce:	0018      	movs	r0, r3
 80118d0:	46bd      	mov	sp, r7
 80118d2:	b002      	add	sp, #8
 80118d4:	bd80      	pop	{r7, pc}
 80118d6:	46c0      	nop			@ (mov r8, r8)
 80118d8:	200001e0 	.word	0x200001e0

080118dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	b082      	sub	sp, #8
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	0002      	movs	r2, r0
 80118e4:	6039      	str	r1, [r7, #0]
 80118e6:	1dfb      	adds	r3, r7, #7
 80118e8:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80118ea:	1dfb      	adds	r3, r7, #7
 80118ec:	781b      	ldrb	r3, [r3, #0]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d106      	bne.n	8011900 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80118f2:	683a      	ldr	r2, [r7, #0]
 80118f4:	4908      	ldr	r1, [pc, #32]	@ (8011918 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80118f6:	4b09      	ldr	r3, [pc, #36]	@ (801191c <USBD_FS_ConfigStrDescriptor+0x40>)
 80118f8:	0018      	movs	r0, r3
 80118fa:	f7fc ff79 	bl	800e7f0 <USBD_GetString>
 80118fe:	e005      	b.n	801190c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011900:	683a      	ldr	r2, [r7, #0]
 8011902:	4905      	ldr	r1, [pc, #20]	@ (8011918 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8011904:	4b05      	ldr	r3, [pc, #20]	@ (801191c <USBD_FS_ConfigStrDescriptor+0x40>)
 8011906:	0018      	movs	r0, r3
 8011908:	f7fc ff72 	bl	800e7f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801190c:	4b02      	ldr	r3, [pc, #8]	@ (8011918 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801190e:	0018      	movs	r0, r3
 8011910:	46bd      	mov	sp, r7
 8011912:	b002      	add	sp, #8
 8011914:	bd80      	pop	{r7, pc}
 8011916:	46c0      	nop			@ (mov r8, r8)
 8011918:	20001724 	.word	0x20001724
 801191c:	08016770 	.word	0x08016770

08011920 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b082      	sub	sp, #8
 8011924:	af00      	add	r7, sp, #0
 8011926:	0002      	movs	r2, r0
 8011928:	6039      	str	r1, [r7, #0]
 801192a:	1dfb      	adds	r3, r7, #7
 801192c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801192e:	1dfb      	adds	r3, r7, #7
 8011930:	781b      	ldrb	r3, [r3, #0]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d106      	bne.n	8011944 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011936:	683a      	ldr	r2, [r7, #0]
 8011938:	4908      	ldr	r1, [pc, #32]	@ (801195c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801193a:	4b09      	ldr	r3, [pc, #36]	@ (8011960 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801193c:	0018      	movs	r0, r3
 801193e:	f7fc ff57 	bl	800e7f0 <USBD_GetString>
 8011942:	e005      	b.n	8011950 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011944:	683a      	ldr	r2, [r7, #0]
 8011946:	4905      	ldr	r1, [pc, #20]	@ (801195c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8011948:	4b05      	ldr	r3, [pc, #20]	@ (8011960 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801194a:	0018      	movs	r0, r3
 801194c:	f7fc ff50 	bl	800e7f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011950:	4b02      	ldr	r3, [pc, #8]	@ (801195c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8011952:	0018      	movs	r0, r3
 8011954:	46bd      	mov	sp, r7
 8011956:	b002      	add	sp, #8
 8011958:	bd80      	pop	{r7, pc}
 801195a:	46c0      	nop			@ (mov r8, r8)
 801195c:	20001724 	.word	0x20001724
 8011960:	0801677c 	.word	0x0801677c

08011964 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b084      	sub	sp, #16
 8011968:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801196a:	4b10      	ldr	r3, [pc, #64]	@ (80119ac <Get_SerialNum+0x48>)
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011970:	4b0f      	ldr	r3, [pc, #60]	@ (80119b0 <Get_SerialNum+0x4c>)
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011976:	4b0f      	ldr	r3, [pc, #60]	@ (80119b4 <Get_SerialNum+0x50>)
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801197c:	68fa      	ldr	r2, [r7, #12]
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	18d3      	adds	r3, r2, r3
 8011982:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d00b      	beq.n	80119a2 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801198a:	490b      	ldr	r1, [pc, #44]	@ (80119b8 <Get_SerialNum+0x54>)
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	2208      	movs	r2, #8
 8011990:	0018      	movs	r0, r3
 8011992:	f000 f815 	bl	80119c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011996:	4909      	ldr	r1, [pc, #36]	@ (80119bc <Get_SerialNum+0x58>)
 8011998:	68bb      	ldr	r3, [r7, #8]
 801199a:	2204      	movs	r2, #4
 801199c:	0018      	movs	r0, r3
 801199e:	f000 f80f 	bl	80119c0 <IntToUnicode>
  }
}
 80119a2:	46c0      	nop			@ (mov r8, r8)
 80119a4:	46bd      	mov	sp, r7
 80119a6:	b004      	add	sp, #16
 80119a8:	bd80      	pop	{r7, pc}
 80119aa:	46c0      	nop			@ (mov r8, r8)
 80119ac:	1ffff7ac 	.word	0x1ffff7ac
 80119b0:	1ffff7b0 	.word	0x1ffff7b0
 80119b4:	1ffff7b4 	.word	0x1ffff7b4
 80119b8:	200001e2 	.word	0x200001e2
 80119bc:	200001f2 	.word	0x200001f2

080119c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b086      	sub	sp, #24
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	60f8      	str	r0, [r7, #12]
 80119c8:	60b9      	str	r1, [r7, #8]
 80119ca:	1dfb      	adds	r3, r7, #7
 80119cc:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80119ce:	2117      	movs	r1, #23
 80119d0:	187b      	adds	r3, r7, r1
 80119d2:	2200      	movs	r2, #0
 80119d4:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80119d6:	187b      	adds	r3, r7, r1
 80119d8:	2200      	movs	r2, #0
 80119da:	701a      	strb	r2, [r3, #0]
 80119dc:	e02f      	b.n	8011a3e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	0f1b      	lsrs	r3, r3, #28
 80119e2:	2b09      	cmp	r3, #9
 80119e4:	d80d      	bhi.n	8011a02 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	0f1b      	lsrs	r3, r3, #28
 80119ea:	b2da      	uxtb	r2, r3
 80119ec:	2317      	movs	r3, #23
 80119ee:	18fb      	adds	r3, r7, r3
 80119f0:	781b      	ldrb	r3, [r3, #0]
 80119f2:	005b      	lsls	r3, r3, #1
 80119f4:	0019      	movs	r1, r3
 80119f6:	68bb      	ldr	r3, [r7, #8]
 80119f8:	185b      	adds	r3, r3, r1
 80119fa:	3230      	adds	r2, #48	@ 0x30
 80119fc:	b2d2      	uxtb	r2, r2
 80119fe:	701a      	strb	r2, [r3, #0]
 8011a00:	e00c      	b.n	8011a1c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	0f1b      	lsrs	r3, r3, #28
 8011a06:	b2da      	uxtb	r2, r3
 8011a08:	2317      	movs	r3, #23
 8011a0a:	18fb      	adds	r3, r7, r3
 8011a0c:	781b      	ldrb	r3, [r3, #0]
 8011a0e:	005b      	lsls	r3, r3, #1
 8011a10:	0019      	movs	r1, r3
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	185b      	adds	r3, r3, r1
 8011a16:	3237      	adds	r2, #55	@ 0x37
 8011a18:	b2d2      	uxtb	r2, r2
 8011a1a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	011b      	lsls	r3, r3, #4
 8011a20:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011a22:	2117      	movs	r1, #23
 8011a24:	187b      	adds	r3, r7, r1
 8011a26:	781b      	ldrb	r3, [r3, #0]
 8011a28:	005b      	lsls	r3, r3, #1
 8011a2a:	3301      	adds	r3, #1
 8011a2c:	68ba      	ldr	r2, [r7, #8]
 8011a2e:	18d3      	adds	r3, r2, r3
 8011a30:	2200      	movs	r2, #0
 8011a32:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011a34:	187b      	adds	r3, r7, r1
 8011a36:	781a      	ldrb	r2, [r3, #0]
 8011a38:	187b      	adds	r3, r7, r1
 8011a3a:	3201      	adds	r2, #1
 8011a3c:	701a      	strb	r2, [r3, #0]
 8011a3e:	2317      	movs	r3, #23
 8011a40:	18fa      	adds	r2, r7, r3
 8011a42:	1dfb      	adds	r3, r7, #7
 8011a44:	7812      	ldrb	r2, [r2, #0]
 8011a46:	781b      	ldrb	r3, [r3, #0]
 8011a48:	429a      	cmp	r2, r3
 8011a4a:	d3c8      	bcc.n	80119de <IntToUnicode+0x1e>
  }
}
 8011a4c:	46c0      	nop			@ (mov r8, r8)
 8011a4e:	46c0      	nop			@ (mov r8, r8)
 8011a50:	46bd      	mov	sp, r7
 8011a52:	b006      	add	sp, #24
 8011a54:	bd80      	pop	{r7, pc}
	...

08011a58 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b084      	sub	sp, #16
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	4a0e      	ldr	r2, [pc, #56]	@ (8011aa0 <HAL_PCD_MspInit+0x48>)
 8011a66:	4293      	cmp	r3, r2
 8011a68:	d115      	bne.n	8011a96 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8011a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8011aa4 <HAL_PCD_MspInit+0x4c>)
 8011a6c:	69da      	ldr	r2, [r3, #28]
 8011a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8011aa4 <HAL_PCD_MspInit+0x4c>)
 8011a70:	2180      	movs	r1, #128	@ 0x80
 8011a72:	0409      	lsls	r1, r1, #16
 8011a74:	430a      	orrs	r2, r1
 8011a76:	61da      	str	r2, [r3, #28]
 8011a78:	4b0a      	ldr	r3, [pc, #40]	@ (8011aa4 <HAL_PCD_MspInit+0x4c>)
 8011a7a:	69da      	ldr	r2, [r3, #28]
 8011a7c:	2380      	movs	r3, #128	@ 0x80
 8011a7e:	041b      	lsls	r3, r3, #16
 8011a80:	4013      	ands	r3, r2
 8011a82:	60fb      	str	r3, [r7, #12]
 8011a84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8011a86:	2200      	movs	r2, #0
 8011a88:	2100      	movs	r1, #0
 8011a8a:	201f      	movs	r0, #31
 8011a8c:	f7f3 f97e 	bl	8004d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8011a90:	201f      	movs	r0, #31
 8011a92:	f7f3 f990 	bl	8004db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8011a96:	46c0      	nop			@ (mov r8, r8)
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	b004      	add	sp, #16
 8011a9c:	bd80      	pop	{r7, pc}
 8011a9e:	46c0      	nop			@ (mov r8, r8)
 8011aa0:	40005c00 	.word	0x40005c00
 8011aa4:	40021000 	.word	0x40021000

08011aa8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b082      	sub	sp, #8
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011ab0:	687a      	ldr	r2, [r7, #4]
 8011ab2:	23b6      	movs	r3, #182	@ 0xb6
 8011ab4:	009b      	lsls	r3, r3, #2
 8011ab6:	58d2      	ldr	r2, [r2, r3]
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	21a6      	movs	r1, #166	@ 0xa6
 8011abc:	0089      	lsls	r1, r1, #2
 8011abe:	468c      	mov	ip, r1
 8011ac0:	4463      	add	r3, ip
 8011ac2:	0019      	movs	r1, r3
 8011ac4:	0010      	movs	r0, r2
 8011ac6:	f7fb fe29 	bl	800d71c <USBD_LL_SetupStage>
}
 8011aca:	46c0      	nop			@ (mov r8, r8)
 8011acc:	46bd      	mov	sp, r7
 8011ace:	b002      	add	sp, #8
 8011ad0:	bd80      	pop	{r7, pc}

08011ad2 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ad2:	b590      	push	{r4, r7, lr}
 8011ad4:	b083      	sub	sp, #12
 8011ad6:	af00      	add	r7, sp, #0
 8011ad8:	6078      	str	r0, [r7, #4]
 8011ada:	000a      	movs	r2, r1
 8011adc:	1cfb      	adds	r3, r7, #3
 8011ade:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011ae0:	687a      	ldr	r2, [r7, #4]
 8011ae2:	23b6      	movs	r3, #182	@ 0xb6
 8011ae4:	009b      	lsls	r3, r3, #2
 8011ae6:	58d4      	ldr	r4, [r2, r3]
 8011ae8:	1cfb      	adds	r3, r7, #3
 8011aea:	781a      	ldrb	r2, [r3, #0]
 8011aec:	6878      	ldr	r0, [r7, #4]
 8011aee:	23b2      	movs	r3, #178	@ 0xb2
 8011af0:	0059      	lsls	r1, r3, #1
 8011af2:	0013      	movs	r3, r2
 8011af4:	009b      	lsls	r3, r3, #2
 8011af6:	189b      	adds	r3, r3, r2
 8011af8:	00db      	lsls	r3, r3, #3
 8011afa:	18c3      	adds	r3, r0, r3
 8011afc:	185b      	adds	r3, r3, r1
 8011afe:	681a      	ldr	r2, [r3, #0]
 8011b00:	1cfb      	adds	r3, r7, #3
 8011b02:	781b      	ldrb	r3, [r3, #0]
 8011b04:	0019      	movs	r1, r3
 8011b06:	0020      	movs	r0, r4
 8011b08:	f7fb fe66 	bl	800d7d8 <USBD_LL_DataOutStage>
}
 8011b0c:	46c0      	nop			@ (mov r8, r8)
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	b003      	add	sp, #12
 8011b12:	bd90      	pop	{r4, r7, pc}

08011b14 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b082      	sub	sp, #8
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
 8011b1c:	000a      	movs	r2, r1
 8011b1e:	1cfb      	adds	r3, r7, #3
 8011b20:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011b22:	687a      	ldr	r2, [r7, #4]
 8011b24:	23b6      	movs	r3, #182	@ 0xb6
 8011b26:	009b      	lsls	r3, r3, #2
 8011b28:	58d0      	ldr	r0, [r2, r3]
 8011b2a:	1cfb      	adds	r3, r7, #3
 8011b2c:	781a      	ldrb	r2, [r3, #0]
 8011b2e:	6879      	ldr	r1, [r7, #4]
 8011b30:	0013      	movs	r3, r2
 8011b32:	009b      	lsls	r3, r3, #2
 8011b34:	189b      	adds	r3, r3, r2
 8011b36:	00db      	lsls	r3, r3, #3
 8011b38:	18cb      	adds	r3, r1, r3
 8011b3a:	3324      	adds	r3, #36	@ 0x24
 8011b3c:	681a      	ldr	r2, [r3, #0]
 8011b3e:	1cfb      	adds	r3, r7, #3
 8011b40:	781b      	ldrb	r3, [r3, #0]
 8011b42:	0019      	movs	r1, r3
 8011b44:	f7fb feca 	bl	800d8dc <USBD_LL_DataInStage>
}
 8011b48:	46c0      	nop			@ (mov r8, r8)
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	b002      	add	sp, #8
 8011b4e:	bd80      	pop	{r7, pc}

08011b50 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b082      	sub	sp, #8
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011b58:	687a      	ldr	r2, [r7, #4]
 8011b5a:	23b6      	movs	r3, #182	@ 0xb6
 8011b5c:	009b      	lsls	r3, r3, #2
 8011b5e:	58d3      	ldr	r3, [r2, r3]
 8011b60:	0018      	movs	r0, r3
 8011b62:	f7fc f801 	bl	800db68 <USBD_LL_SOF>
}
 8011b66:	46c0      	nop			@ (mov r8, r8)
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	b002      	add	sp, #8
 8011b6c:	bd80      	pop	{r7, pc}

08011b6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b6e:	b580      	push	{r7, lr}
 8011b70:	b084      	sub	sp, #16
 8011b72:	af00      	add	r7, sp, #0
 8011b74:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011b76:	230f      	movs	r3, #15
 8011b78:	18fb      	adds	r3, r7, r3
 8011b7a:	2201      	movs	r2, #1
 8011b7c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	795b      	ldrb	r3, [r3, #5]
 8011b82:	2b02      	cmp	r3, #2
 8011b84:	d001      	beq.n	8011b8a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8011b86:	f7f2 f89f 	bl	8003cc8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011b8a:	687a      	ldr	r2, [r7, #4]
 8011b8c:	23b6      	movs	r3, #182	@ 0xb6
 8011b8e:	009b      	lsls	r3, r3, #2
 8011b90:	58d2      	ldr	r2, [r2, r3]
 8011b92:	230f      	movs	r3, #15
 8011b94:	18fb      	adds	r3, r7, r3
 8011b96:	781b      	ldrb	r3, [r3, #0]
 8011b98:	0019      	movs	r1, r3
 8011b9a:	0010      	movs	r0, r2
 8011b9c:	f7fb ffa3 	bl	800dae6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011ba0:	687a      	ldr	r2, [r7, #4]
 8011ba2:	23b6      	movs	r3, #182	@ 0xb6
 8011ba4:	009b      	lsls	r3, r3, #2
 8011ba6:	58d3      	ldr	r3, [r2, r3]
 8011ba8:	0018      	movs	r0, r3
 8011baa:	f7fb ff54 	bl	800da56 <USBD_LL_Reset>
}
 8011bae:	46c0      	nop			@ (mov r8, r8)
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	b004      	add	sp, #16
 8011bb4:	bd80      	pop	{r7, pc}
	...

08011bb8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b082      	sub	sp, #8
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011bc0:	687a      	ldr	r2, [r7, #4]
 8011bc2:	23b6      	movs	r3, #182	@ 0xb6
 8011bc4:	009b      	lsls	r3, r3, #2
 8011bc6:	58d3      	ldr	r3, [r2, r3]
 8011bc8:	0018      	movs	r0, r3
 8011bca:	f7fb ff9d 	bl	800db08 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	7a5b      	ldrb	r3, [r3, #9]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d005      	beq.n	8011be2 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011bd6:	4b05      	ldr	r3, [pc, #20]	@ (8011bec <HAL_PCD_SuspendCallback+0x34>)
 8011bd8:	691a      	ldr	r2, [r3, #16]
 8011bda:	4b04      	ldr	r3, [pc, #16]	@ (8011bec <HAL_PCD_SuspendCallback+0x34>)
 8011bdc:	2106      	movs	r1, #6
 8011bde:	430a      	orrs	r2, r1
 8011be0:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8011be2:	46c0      	nop			@ (mov r8, r8)
 8011be4:	46bd      	mov	sp, r7
 8011be6:	b002      	add	sp, #8
 8011be8:	bd80      	pop	{r7, pc}
 8011bea:	46c0      	nop			@ (mov r8, r8)
 8011bec:	e000ed00 	.word	0xe000ed00

08011bf0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b082      	sub	sp, #8
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	7a5b      	ldrb	r3, [r3, #9]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d007      	beq.n	8011c10 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011c00:	4b09      	ldr	r3, [pc, #36]	@ (8011c28 <HAL_PCD_ResumeCallback+0x38>)
 8011c02:	691a      	ldr	r2, [r3, #16]
 8011c04:	4b08      	ldr	r3, [pc, #32]	@ (8011c28 <HAL_PCD_ResumeCallback+0x38>)
 8011c06:	2106      	movs	r1, #6
 8011c08:	438a      	bics	r2, r1
 8011c0a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8011c0c:	f000 fa42 	bl	8012094 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011c10:	687a      	ldr	r2, [r7, #4]
 8011c12:	23b6      	movs	r3, #182	@ 0xb6
 8011c14:	009b      	lsls	r3, r3, #2
 8011c16:	58d3      	ldr	r3, [r2, r3]
 8011c18:	0018      	movs	r0, r3
 8011c1a:	f7fb ff8d 	bl	800db38 <USBD_LL_Resume>
}
 8011c1e:	46c0      	nop			@ (mov r8, r8)
 8011c20:	46bd      	mov	sp, r7
 8011c22:	b002      	add	sp, #8
 8011c24:	bd80      	pop	{r7, pc}
 8011c26:	46c0      	nop			@ (mov r8, r8)
 8011c28:	e000ed00 	.word	0xe000ed00

08011c2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b082      	sub	sp, #8
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8011c34:	4a2d      	ldr	r2, [pc, #180]	@ (8011cec <USBD_LL_Init+0xc0>)
 8011c36:	23b6      	movs	r3, #182	@ 0xb6
 8011c38:	009b      	lsls	r3, r3, #2
 8011c3a:	6879      	ldr	r1, [r7, #4]
 8011c3c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8011c3e:	687a      	ldr	r2, [r7, #4]
 8011c40:	23b0      	movs	r3, #176	@ 0xb0
 8011c42:	009b      	lsls	r3, r3, #2
 8011c44:	4929      	ldr	r1, [pc, #164]	@ (8011cec <USBD_LL_Init+0xc0>)
 8011c46:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8011c48:	4b28      	ldr	r3, [pc, #160]	@ (8011cec <USBD_LL_Init+0xc0>)
 8011c4a:	4a29      	ldr	r2, [pc, #164]	@ (8011cf0 <USBD_LL_Init+0xc4>)
 8011c4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8011c4e:	4b27      	ldr	r3, [pc, #156]	@ (8011cec <USBD_LL_Init+0xc0>)
 8011c50:	2208      	movs	r2, #8
 8011c52:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011c54:	4b25      	ldr	r3, [pc, #148]	@ (8011cec <USBD_LL_Init+0xc0>)
 8011c56:	2202      	movs	r2, #2
 8011c58:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011c5a:	4b24      	ldr	r3, [pc, #144]	@ (8011cec <USBD_LL_Init+0xc0>)
 8011c5c:	2202      	movs	r2, #2
 8011c5e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8011c60:	4b22      	ldr	r3, [pc, #136]	@ (8011cec <USBD_LL_Init+0xc0>)
 8011c62:	2200      	movs	r2, #0
 8011c64:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011c66:	4b21      	ldr	r3, [pc, #132]	@ (8011cec <USBD_LL_Init+0xc0>)
 8011c68:	2200      	movs	r2, #0
 8011c6a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8011c6c:	4b1f      	ldr	r3, [pc, #124]	@ (8011cec <USBD_LL_Init+0xc0>)
 8011c6e:	2200      	movs	r2, #0
 8011c70:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8011c72:	4b1e      	ldr	r3, [pc, #120]	@ (8011cec <USBD_LL_Init+0xc0>)
 8011c74:	0018      	movs	r0, r3
 8011c76:	f7f3 fcbb 	bl	80055f0 <HAL_PCD_Init>
 8011c7a:	1e03      	subs	r3, r0, #0
 8011c7c:	d001      	beq.n	8011c82 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8011c7e:	f7f2 f823 	bl	8003cc8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8011c82:	687a      	ldr	r2, [r7, #4]
 8011c84:	23b0      	movs	r3, #176	@ 0xb0
 8011c86:	009b      	lsls	r3, r3, #2
 8011c88:	58d0      	ldr	r0, [r2, r3]
 8011c8a:	2318      	movs	r3, #24
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	2100      	movs	r1, #0
 8011c90:	f7f5 fa6c 	bl	800716c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8011c94:	687a      	ldr	r2, [r7, #4]
 8011c96:	23b0      	movs	r3, #176	@ 0xb0
 8011c98:	009b      	lsls	r3, r3, #2
 8011c9a:	58d0      	ldr	r0, [r2, r3]
 8011c9c:	2358      	movs	r3, #88	@ 0x58
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	2180      	movs	r1, #128	@ 0x80
 8011ca2:	f7f5 fa63 	bl	800716c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8011ca6:	687a      	ldr	r2, [r7, #4]
 8011ca8:	23b0      	movs	r3, #176	@ 0xb0
 8011caa:	009b      	lsls	r3, r3, #2
 8011cac:	58d0      	ldr	r0, [r2, r3]
 8011cae:	23c0      	movs	r3, #192	@ 0xc0
 8011cb0:	2200      	movs	r2, #0
 8011cb2:	2181      	movs	r1, #129	@ 0x81
 8011cb4:	f7f5 fa5a 	bl	800716c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8011cb8:	687a      	ldr	r2, [r7, #4]
 8011cba:	23b0      	movs	r3, #176	@ 0xb0
 8011cbc:	009b      	lsls	r3, r3, #2
 8011cbe:	58d0      	ldr	r0, [r2, r3]
 8011cc0:	2388      	movs	r3, #136	@ 0x88
 8011cc2:	005b      	lsls	r3, r3, #1
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	2101      	movs	r1, #1
 8011cc8:	f7f5 fa50 	bl	800716c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8011ccc:	687a      	ldr	r2, [r7, #4]
 8011cce:	23b0      	movs	r3, #176	@ 0xb0
 8011cd0:	009b      	lsls	r3, r3, #2
 8011cd2:	58d0      	ldr	r0, [r2, r3]
 8011cd4:	2380      	movs	r3, #128	@ 0x80
 8011cd6:	005b      	lsls	r3, r3, #1
 8011cd8:	2200      	movs	r2, #0
 8011cda:	2182      	movs	r1, #130	@ 0x82
 8011cdc:	f7f5 fa46 	bl	800716c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8011ce0:	2300      	movs	r3, #0
}
 8011ce2:	0018      	movs	r0, r3
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	b002      	add	sp, #8
 8011ce8:	bd80      	pop	{r7, pc}
 8011cea:	46c0      	nop			@ (mov r8, r8)
 8011cec:	20001924 	.word	0x20001924
 8011cf0:	40005c00 	.word	0x40005c00

08011cf4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cf6:	b085      	sub	sp, #20
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cfc:	210f      	movs	r1, #15
 8011cfe:	187b      	adds	r3, r7, r1
 8011d00:	2200      	movs	r2, #0
 8011d02:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d04:	260e      	movs	r6, #14
 8011d06:	19bb      	adds	r3, r7, r6
 8011d08:	2200      	movs	r2, #0
 8011d0a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011d0c:	687a      	ldr	r2, [r7, #4]
 8011d0e:	23b0      	movs	r3, #176	@ 0xb0
 8011d10:	009b      	lsls	r3, r3, #2
 8011d12:	58d3      	ldr	r3, [r2, r3]
 8011d14:	000d      	movs	r5, r1
 8011d16:	187c      	adds	r4, r7, r1
 8011d18:	0018      	movs	r0, r3
 8011d1a:	f7f3 fd5d 	bl	80057d8 <HAL_PCD_Start>
 8011d1e:	0003      	movs	r3, r0
 8011d20:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d22:	19bc      	adds	r4, r7, r6
 8011d24:	197b      	adds	r3, r7, r5
 8011d26:	781b      	ldrb	r3, [r3, #0]
 8011d28:	0018      	movs	r0, r3
 8011d2a:	f000 f9ba 	bl	80120a2 <USBD_Get_USB_Status>
 8011d2e:	0003      	movs	r3, r0
 8011d30:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8011d32:	19bb      	adds	r3, r7, r6
 8011d34:	781b      	ldrb	r3, [r3, #0]
}
 8011d36:	0018      	movs	r0, r3
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	b005      	add	sp, #20
 8011d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011d3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011d3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d40:	b085      	sub	sp, #20
 8011d42:	af00      	add	r7, sp, #0
 8011d44:	6078      	str	r0, [r7, #4]
 8011d46:	000c      	movs	r4, r1
 8011d48:	0010      	movs	r0, r2
 8011d4a:	0019      	movs	r1, r3
 8011d4c:	1cfb      	adds	r3, r7, #3
 8011d4e:	1c22      	adds	r2, r4, #0
 8011d50:	701a      	strb	r2, [r3, #0]
 8011d52:	1cbb      	adds	r3, r7, #2
 8011d54:	1c02      	adds	r2, r0, #0
 8011d56:	701a      	strb	r2, [r3, #0]
 8011d58:	003b      	movs	r3, r7
 8011d5a:	1c0a      	adds	r2, r1, #0
 8011d5c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d5e:	260f      	movs	r6, #15
 8011d60:	19bb      	adds	r3, r7, r6
 8011d62:	2200      	movs	r2, #0
 8011d64:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d66:	250e      	movs	r5, #14
 8011d68:	197b      	adds	r3, r7, r5
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011d6e:	687a      	ldr	r2, [r7, #4]
 8011d70:	23b0      	movs	r3, #176	@ 0xb0
 8011d72:	009b      	lsls	r3, r3, #2
 8011d74:	58d0      	ldr	r0, [r2, r3]
 8011d76:	19bc      	adds	r4, r7, r6
 8011d78:	1cbb      	adds	r3, r7, #2
 8011d7a:	781d      	ldrb	r5, [r3, #0]
 8011d7c:	003b      	movs	r3, r7
 8011d7e:	881a      	ldrh	r2, [r3, #0]
 8011d80:	1cfb      	adds	r3, r7, #3
 8011d82:	7819      	ldrb	r1, [r3, #0]
 8011d84:	002b      	movs	r3, r5
 8011d86:	f7f3 febb 	bl	8005b00 <HAL_PCD_EP_Open>
 8011d8a:	0003      	movs	r3, r0
 8011d8c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d8e:	250e      	movs	r5, #14
 8011d90:	197c      	adds	r4, r7, r5
 8011d92:	19bb      	adds	r3, r7, r6
 8011d94:	781b      	ldrb	r3, [r3, #0]
 8011d96:	0018      	movs	r0, r3
 8011d98:	f000 f983 	bl	80120a2 <USBD_Get_USB_Status>
 8011d9c:	0003      	movs	r3, r0
 8011d9e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8011da0:	197b      	adds	r3, r7, r5
 8011da2:	781b      	ldrb	r3, [r3, #0]
}
 8011da4:	0018      	movs	r0, r3
 8011da6:	46bd      	mov	sp, r7
 8011da8:	b005      	add	sp, #20
 8011daa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011dac <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011dae:	b085      	sub	sp, #20
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
 8011db4:	000a      	movs	r2, r1
 8011db6:	1cfb      	adds	r3, r7, #3
 8011db8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011dba:	210f      	movs	r1, #15
 8011dbc:	187b      	adds	r3, r7, r1
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011dc2:	260e      	movs	r6, #14
 8011dc4:	19bb      	adds	r3, r7, r6
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011dca:	687a      	ldr	r2, [r7, #4]
 8011dcc:	23b0      	movs	r3, #176	@ 0xb0
 8011dce:	009b      	lsls	r3, r3, #2
 8011dd0:	58d2      	ldr	r2, [r2, r3]
 8011dd2:	000d      	movs	r5, r1
 8011dd4:	187c      	adds	r4, r7, r1
 8011dd6:	1cfb      	adds	r3, r7, #3
 8011dd8:	781b      	ldrb	r3, [r3, #0]
 8011dda:	0019      	movs	r1, r3
 8011ddc:	0010      	movs	r0, r2
 8011dde:	f7f3 fefe 	bl	8005bde <HAL_PCD_EP_Close>
 8011de2:	0003      	movs	r3, r0
 8011de4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011de6:	19bc      	adds	r4, r7, r6
 8011de8:	197b      	adds	r3, r7, r5
 8011dea:	781b      	ldrb	r3, [r3, #0]
 8011dec:	0018      	movs	r0, r3
 8011dee:	f000 f958 	bl	80120a2 <USBD_Get_USB_Status>
 8011df2:	0003      	movs	r3, r0
 8011df4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8011df6:	19bb      	adds	r3, r7, r6
 8011df8:	781b      	ldrb	r3, [r3, #0]
}
 8011dfa:	0018      	movs	r0, r3
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	b005      	add	sp, #20
 8011e00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011e02 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011e02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e04:	b085      	sub	sp, #20
 8011e06:	af00      	add	r7, sp, #0
 8011e08:	6078      	str	r0, [r7, #4]
 8011e0a:	000a      	movs	r2, r1
 8011e0c:	1cfb      	adds	r3, r7, #3
 8011e0e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e10:	210f      	movs	r1, #15
 8011e12:	187b      	adds	r3, r7, r1
 8011e14:	2200      	movs	r2, #0
 8011e16:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e18:	260e      	movs	r6, #14
 8011e1a:	19bb      	adds	r3, r7, r6
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011e20:	687a      	ldr	r2, [r7, #4]
 8011e22:	23b0      	movs	r3, #176	@ 0xb0
 8011e24:	009b      	lsls	r3, r3, #2
 8011e26:	58d2      	ldr	r2, [r2, r3]
 8011e28:	000d      	movs	r5, r1
 8011e2a:	187c      	adds	r4, r7, r1
 8011e2c:	1cfb      	adds	r3, r7, #3
 8011e2e:	781b      	ldrb	r3, [r3, #0]
 8011e30:	0019      	movs	r1, r3
 8011e32:	0010      	movs	r0, r2
 8011e34:	f7f3 ffb0 	bl	8005d98 <HAL_PCD_EP_SetStall>
 8011e38:	0003      	movs	r3, r0
 8011e3a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011e3c:	19bc      	adds	r4, r7, r6
 8011e3e:	197b      	adds	r3, r7, r5
 8011e40:	781b      	ldrb	r3, [r3, #0]
 8011e42:	0018      	movs	r0, r3
 8011e44:	f000 f92d 	bl	80120a2 <USBD_Get_USB_Status>
 8011e48:	0003      	movs	r3, r0
 8011e4a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8011e4c:	19bb      	adds	r3, r7, r6
 8011e4e:	781b      	ldrb	r3, [r3, #0]
}
 8011e50:	0018      	movs	r0, r3
 8011e52:	46bd      	mov	sp, r7
 8011e54:	b005      	add	sp, #20
 8011e56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011e58 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e5a:	b085      	sub	sp, #20
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
 8011e60:	000a      	movs	r2, r1
 8011e62:	1cfb      	adds	r3, r7, #3
 8011e64:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e66:	210f      	movs	r1, #15
 8011e68:	187b      	adds	r3, r7, r1
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e6e:	260e      	movs	r6, #14
 8011e70:	19bb      	adds	r3, r7, r6
 8011e72:	2200      	movs	r2, #0
 8011e74:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011e76:	687a      	ldr	r2, [r7, #4]
 8011e78:	23b0      	movs	r3, #176	@ 0xb0
 8011e7a:	009b      	lsls	r3, r3, #2
 8011e7c:	58d2      	ldr	r2, [r2, r3]
 8011e7e:	000d      	movs	r5, r1
 8011e80:	187c      	adds	r4, r7, r1
 8011e82:	1cfb      	adds	r3, r7, #3
 8011e84:	781b      	ldrb	r3, [r3, #0]
 8011e86:	0019      	movs	r1, r3
 8011e88:	0010      	movs	r0, r2
 8011e8a:	f7f3 ffe1 	bl	8005e50 <HAL_PCD_EP_ClrStall>
 8011e8e:	0003      	movs	r3, r0
 8011e90:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011e92:	19bc      	adds	r4, r7, r6
 8011e94:	197b      	adds	r3, r7, r5
 8011e96:	781b      	ldrb	r3, [r3, #0]
 8011e98:	0018      	movs	r0, r3
 8011e9a:	f000 f902 	bl	80120a2 <USBD_Get_USB_Status>
 8011e9e:	0003      	movs	r3, r0
 8011ea0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8011ea2:	19bb      	adds	r3, r7, r6
 8011ea4:	781b      	ldrb	r3, [r3, #0]
}
 8011ea6:	0018      	movs	r0, r3
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	b005      	add	sp, #20
 8011eac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011eae <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011eae:	b580      	push	{r7, lr}
 8011eb0:	b084      	sub	sp, #16
 8011eb2:	af00      	add	r7, sp, #0
 8011eb4:	6078      	str	r0, [r7, #4]
 8011eb6:	000a      	movs	r2, r1
 8011eb8:	1cfb      	adds	r3, r7, #3
 8011eba:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011ebc:	687a      	ldr	r2, [r7, #4]
 8011ebe:	23b0      	movs	r3, #176	@ 0xb0
 8011ec0:	009b      	lsls	r3, r3, #2
 8011ec2:	58d3      	ldr	r3, [r2, r3]
 8011ec4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011ec6:	1cfb      	adds	r3, r7, #3
 8011ec8:	781b      	ldrb	r3, [r3, #0]
 8011eca:	b25b      	sxtb	r3, r3
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	da0c      	bge.n	8011eea <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011ed0:	1cfb      	adds	r3, r7, #3
 8011ed2:	781b      	ldrb	r3, [r3, #0]
 8011ed4:	227f      	movs	r2, #127	@ 0x7f
 8011ed6:	401a      	ands	r2, r3
 8011ed8:	68f9      	ldr	r1, [r7, #12]
 8011eda:	0013      	movs	r3, r2
 8011edc:	009b      	lsls	r3, r3, #2
 8011ede:	189b      	adds	r3, r3, r2
 8011ee0:	00db      	lsls	r3, r3, #3
 8011ee2:	18cb      	adds	r3, r1, r3
 8011ee4:	3312      	adds	r3, #18
 8011ee6:	781b      	ldrb	r3, [r3, #0]
 8011ee8:	e00d      	b.n	8011f06 <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011eea:	1cfb      	adds	r3, r7, #3
 8011eec:	781b      	ldrb	r3, [r3, #0]
 8011eee:	227f      	movs	r2, #127	@ 0x7f
 8011ef0:	401a      	ands	r2, r3
 8011ef2:	68f8      	ldr	r0, [r7, #12]
 8011ef4:	23a9      	movs	r3, #169	@ 0xa9
 8011ef6:	0059      	lsls	r1, r3, #1
 8011ef8:	0013      	movs	r3, r2
 8011efa:	009b      	lsls	r3, r3, #2
 8011efc:	189b      	adds	r3, r3, r2
 8011efe:	00db      	lsls	r3, r3, #3
 8011f00:	18c3      	adds	r3, r0, r3
 8011f02:	185b      	adds	r3, r3, r1
 8011f04:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011f06:	0018      	movs	r0, r3
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	b004      	add	sp, #16
 8011f0c:	bd80      	pop	{r7, pc}

08011f0e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f10:	b085      	sub	sp, #20
 8011f12:	af00      	add	r7, sp, #0
 8011f14:	6078      	str	r0, [r7, #4]
 8011f16:	000a      	movs	r2, r1
 8011f18:	1cfb      	adds	r3, r7, #3
 8011f1a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f1c:	210f      	movs	r1, #15
 8011f1e:	187b      	adds	r3, r7, r1
 8011f20:	2200      	movs	r2, #0
 8011f22:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f24:	260e      	movs	r6, #14
 8011f26:	19bb      	adds	r3, r7, r6
 8011f28:	2200      	movs	r2, #0
 8011f2a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011f2c:	687a      	ldr	r2, [r7, #4]
 8011f2e:	23b0      	movs	r3, #176	@ 0xb0
 8011f30:	009b      	lsls	r3, r3, #2
 8011f32:	58d2      	ldr	r2, [r2, r3]
 8011f34:	000d      	movs	r5, r1
 8011f36:	187c      	adds	r4, r7, r1
 8011f38:	1cfb      	adds	r3, r7, #3
 8011f3a:	781b      	ldrb	r3, [r3, #0]
 8011f3c:	0019      	movs	r1, r3
 8011f3e:	0010      	movs	r0, r2
 8011f40:	f7f3 fdb4 	bl	8005aac <HAL_PCD_SetAddress>
 8011f44:	0003      	movs	r3, r0
 8011f46:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f48:	19bc      	adds	r4, r7, r6
 8011f4a:	197b      	adds	r3, r7, r5
 8011f4c:	781b      	ldrb	r3, [r3, #0]
 8011f4e:	0018      	movs	r0, r3
 8011f50:	f000 f8a7 	bl	80120a2 <USBD_Get_USB_Status>
 8011f54:	0003      	movs	r3, r0
 8011f56:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8011f58:	19bb      	adds	r3, r7, r6
 8011f5a:	781b      	ldrb	r3, [r3, #0]
}
 8011f5c:	0018      	movs	r0, r3
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	b005      	add	sp, #20
 8011f62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011f64 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8011f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f66:	b087      	sub	sp, #28
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	60f8      	str	r0, [r7, #12]
 8011f6c:	0008      	movs	r0, r1
 8011f6e:	607a      	str	r2, [r7, #4]
 8011f70:	0019      	movs	r1, r3
 8011f72:	230b      	movs	r3, #11
 8011f74:	18fb      	adds	r3, r7, r3
 8011f76:	1c02      	adds	r2, r0, #0
 8011f78:	701a      	strb	r2, [r3, #0]
 8011f7a:	2408      	movs	r4, #8
 8011f7c:	193b      	adds	r3, r7, r4
 8011f7e:	1c0a      	adds	r2, r1, #0
 8011f80:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f82:	2117      	movs	r1, #23
 8011f84:	187b      	adds	r3, r7, r1
 8011f86:	2200      	movs	r2, #0
 8011f88:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f8a:	2516      	movs	r5, #22
 8011f8c:	197b      	adds	r3, r7, r5
 8011f8e:	2200      	movs	r2, #0
 8011f90:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011f92:	68fa      	ldr	r2, [r7, #12]
 8011f94:	23b0      	movs	r3, #176	@ 0xb0
 8011f96:	009b      	lsls	r3, r3, #2
 8011f98:	58d0      	ldr	r0, [r2, r3]
 8011f9a:	193b      	adds	r3, r7, r4
 8011f9c:	881d      	ldrh	r5, [r3, #0]
 8011f9e:	000e      	movs	r6, r1
 8011fa0:	187c      	adds	r4, r7, r1
 8011fa2:	687a      	ldr	r2, [r7, #4]
 8011fa4:	230b      	movs	r3, #11
 8011fa6:	18fb      	adds	r3, r7, r3
 8011fa8:	7819      	ldrb	r1, [r3, #0]
 8011faa:	002b      	movs	r3, r5
 8011fac:	f7f3 feb8 	bl	8005d20 <HAL_PCD_EP_Transmit>
 8011fb0:	0003      	movs	r3, r0
 8011fb2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011fb4:	2516      	movs	r5, #22
 8011fb6:	197c      	adds	r4, r7, r5
 8011fb8:	19bb      	adds	r3, r7, r6
 8011fba:	781b      	ldrb	r3, [r3, #0]
 8011fbc:	0018      	movs	r0, r3
 8011fbe:	f000 f870 	bl	80120a2 <USBD_Get_USB_Status>
 8011fc2:	0003      	movs	r3, r0
 8011fc4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8011fc6:	197b      	adds	r3, r7, r5
 8011fc8:	781b      	ldrb	r3, [r3, #0]
}
 8011fca:	0018      	movs	r0, r3
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	b007      	add	sp, #28
 8011fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011fd2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8011fd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fd4:	b087      	sub	sp, #28
 8011fd6:	af00      	add	r7, sp, #0
 8011fd8:	60f8      	str	r0, [r7, #12]
 8011fda:	0008      	movs	r0, r1
 8011fdc:	607a      	str	r2, [r7, #4]
 8011fde:	0019      	movs	r1, r3
 8011fe0:	230b      	movs	r3, #11
 8011fe2:	18fb      	adds	r3, r7, r3
 8011fe4:	1c02      	adds	r2, r0, #0
 8011fe6:	701a      	strb	r2, [r3, #0]
 8011fe8:	2408      	movs	r4, #8
 8011fea:	193b      	adds	r3, r7, r4
 8011fec:	1c0a      	adds	r2, r1, #0
 8011fee:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ff0:	2117      	movs	r1, #23
 8011ff2:	187b      	adds	r3, r7, r1
 8011ff4:	2200      	movs	r2, #0
 8011ff6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ff8:	2516      	movs	r5, #22
 8011ffa:	197b      	adds	r3, r7, r5
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012000:	68fa      	ldr	r2, [r7, #12]
 8012002:	23b0      	movs	r3, #176	@ 0xb0
 8012004:	009b      	lsls	r3, r3, #2
 8012006:	58d0      	ldr	r0, [r2, r3]
 8012008:	193b      	adds	r3, r7, r4
 801200a:	881d      	ldrh	r5, [r3, #0]
 801200c:	000e      	movs	r6, r1
 801200e:	187c      	adds	r4, r7, r1
 8012010:	687a      	ldr	r2, [r7, #4]
 8012012:	230b      	movs	r3, #11
 8012014:	18fb      	adds	r3, r7, r3
 8012016:	7819      	ldrb	r1, [r3, #0]
 8012018:	002b      	movs	r3, r5
 801201a:	f7f3 fe31 	bl	8005c80 <HAL_PCD_EP_Receive>
 801201e:	0003      	movs	r3, r0
 8012020:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012022:	2516      	movs	r5, #22
 8012024:	197c      	adds	r4, r7, r5
 8012026:	19bb      	adds	r3, r7, r6
 8012028:	781b      	ldrb	r3, [r3, #0]
 801202a:	0018      	movs	r0, r3
 801202c:	f000 f839 	bl	80120a2 <USBD_Get_USB_Status>
 8012030:	0003      	movs	r3, r0
 8012032:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8012034:	197b      	adds	r3, r7, r5
 8012036:	781b      	ldrb	r3, [r3, #0]
}
 8012038:	0018      	movs	r0, r3
 801203a:	46bd      	mov	sp, r7
 801203c:	b007      	add	sp, #28
 801203e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012040 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b082      	sub	sp, #8
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
 8012048:	000a      	movs	r2, r1
 801204a:	1cfb      	adds	r3, r7, #3
 801204c:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801204e:	687a      	ldr	r2, [r7, #4]
 8012050:	23b0      	movs	r3, #176	@ 0xb0
 8012052:	009b      	lsls	r3, r3, #2
 8012054:	58d2      	ldr	r2, [r2, r3]
 8012056:	1cfb      	adds	r3, r7, #3
 8012058:	781b      	ldrb	r3, [r3, #0]
 801205a:	0019      	movs	r1, r3
 801205c:	0010      	movs	r0, r2
 801205e:	f7f3 fe46 	bl	8005cee <HAL_PCD_EP_GetRxCount>
 8012062:	0003      	movs	r3, r0
}
 8012064:	0018      	movs	r0, r3
 8012066:	46bd      	mov	sp, r7
 8012068:	b002      	add	sp, #8
 801206a:	bd80      	pop	{r7, pc}

0801206c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801206c:	b580      	push	{r7, lr}
 801206e:	b082      	sub	sp, #8
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012074:	4b02      	ldr	r3, [pc, #8]	@ (8012080 <USBD_static_malloc+0x14>)
}
 8012076:	0018      	movs	r0, r3
 8012078:	46bd      	mov	sp, r7
 801207a:	b002      	add	sp, #8
 801207c:	bd80      	pop	{r7, pc}
 801207e:	46c0      	nop			@ (mov r8, r8)
 8012080:	20001c00 	.word	0x20001c00

08012084 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012084:	b580      	push	{r7, lr}
 8012086:	b082      	sub	sp, #8
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]

}
 801208c:	46c0      	nop			@ (mov r8, r8)
 801208e:	46bd      	mov	sp, r7
 8012090:	b002      	add	sp, #8
 8012092:	bd80      	pop	{r7, pc}

08012094 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8012098:	f7f1 fab8 	bl	800360c <SystemClock_Config>
}
 801209c:	46c0      	nop			@ (mov r8, r8)
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}

080120a2 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80120a2:	b580      	push	{r7, lr}
 80120a4:	b084      	sub	sp, #16
 80120a6:	af00      	add	r7, sp, #0
 80120a8:	0002      	movs	r2, r0
 80120aa:	1dfb      	adds	r3, r7, #7
 80120ac:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120ae:	230f      	movs	r3, #15
 80120b0:	18fb      	adds	r3, r7, r3
 80120b2:	2200      	movs	r2, #0
 80120b4:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 80120b6:	1dfb      	adds	r3, r7, #7
 80120b8:	781b      	ldrb	r3, [r3, #0]
 80120ba:	2b03      	cmp	r3, #3
 80120bc:	d017      	beq.n	80120ee <USBD_Get_USB_Status+0x4c>
 80120be:	dc1b      	bgt.n	80120f8 <USBD_Get_USB_Status+0x56>
 80120c0:	2b02      	cmp	r3, #2
 80120c2:	d00f      	beq.n	80120e4 <USBD_Get_USB_Status+0x42>
 80120c4:	dc18      	bgt.n	80120f8 <USBD_Get_USB_Status+0x56>
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d002      	beq.n	80120d0 <USBD_Get_USB_Status+0x2e>
 80120ca:	2b01      	cmp	r3, #1
 80120cc:	d005      	beq.n	80120da <USBD_Get_USB_Status+0x38>
 80120ce:	e013      	b.n	80120f8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80120d0:	230f      	movs	r3, #15
 80120d2:	18fb      	adds	r3, r7, r3
 80120d4:	2200      	movs	r2, #0
 80120d6:	701a      	strb	r2, [r3, #0]
    break;
 80120d8:	e013      	b.n	8012102 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80120da:	230f      	movs	r3, #15
 80120dc:	18fb      	adds	r3, r7, r3
 80120de:	2202      	movs	r2, #2
 80120e0:	701a      	strb	r2, [r3, #0]
    break;
 80120e2:	e00e      	b.n	8012102 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80120e4:	230f      	movs	r3, #15
 80120e6:	18fb      	adds	r3, r7, r3
 80120e8:	2201      	movs	r2, #1
 80120ea:	701a      	strb	r2, [r3, #0]
    break;
 80120ec:	e009      	b.n	8012102 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80120ee:	230f      	movs	r3, #15
 80120f0:	18fb      	adds	r3, r7, r3
 80120f2:	2202      	movs	r2, #2
 80120f4:	701a      	strb	r2, [r3, #0]
    break;
 80120f6:	e004      	b.n	8012102 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80120f8:	230f      	movs	r3, #15
 80120fa:	18fb      	adds	r3, r7, r3
 80120fc:	2202      	movs	r2, #2
 80120fe:	701a      	strb	r2, [r3, #0]
    break;
 8012100:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8012102:	230f      	movs	r3, #15
 8012104:	18fb      	adds	r3, r7, r3
 8012106:	781b      	ldrb	r3, [r3, #0]
}
 8012108:	0018      	movs	r0, r3
 801210a:	46bd      	mov	sp, r7
 801210c:	b004      	add	sp, #16
 801210e:	bd80      	pop	{r7, pc}

08012110 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 8012110:	b5b0      	push	{r4, r5, r7, lr}
 8012112:	b086      	sub	sp, #24
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 8012118:	2316      	movs	r3, #22
 801211a:	18fb      	adds	r3, r7, r3
 801211c:	2200      	movs	r2, #0
 801211e:	801a      	strh	r2, [r3, #0]
    uint32 ldo_tune = 0;
 8012120:	2300      	movs	r3, #0
 8012122:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8012124:	4ba0      	ldr	r3, [pc, #640]	@ (80123a8 <dwt_initialise+0x298>)
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	2200      	movs	r2, #0
 801212a:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 801212c:	4b9e      	ldr	r3, [pc, #632]	@ (80123a8 <dwt_initialise+0x298>)
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	2200      	movs	r2, #0
 8012132:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 8012134:	4b9c      	ldr	r3, [pc, #624]	@ (80123a8 <dwt_initialise+0x298>)
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	2200      	movs	r2, #0
 801213a:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 801213c:	4b9a      	ldr	r3, [pc, #616]	@ (80123a8 <dwt_initialise+0x298>)
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	2200      	movs	r2, #0
 8012142:	629a      	str	r2, [r3, #40]	@ 0x28
    pdw1000local->cbRxOk = NULL;
 8012144:	4b98      	ldr	r3, [pc, #608]	@ (80123a8 <dwt_initialise+0x298>)
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	2200      	movs	r2, #0
 801214a:	62da      	str	r2, [r3, #44]	@ 0x2c
    pdw1000local->cbRxTo = NULL;
 801214c:	4b96      	ldr	r3, [pc, #600]	@ (80123a8 <dwt_initialise+0x298>)
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	2200      	movs	r2, #0
 8012152:	631a      	str	r2, [r3, #48]	@ 0x30
    pdw1000local->cbRxErr = NULL;
 8012154:	4b94      	ldr	r3, [pc, #592]	@ (80123a8 <dwt_initialise+0x298>)
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	2200      	movs	r2, #0
 801215a:	635a      	str	r2, [r3, #52]	@ 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 801215c:	f000 f92c 	bl	80123b8 <dwt_readdevid>
 8012160:	0003      	movs	r3, r0
 8012162:	4a92      	ldr	r2, [pc, #584]	@ (80123ac <dwt_initialise+0x29c>)
 8012164:	4293      	cmp	r3, r2
 8012166:	d002      	beq.n	801216e <dwt_initialise+0x5e>
    {
        return DWT_ERROR ;
 8012168:	2301      	movs	r3, #1
 801216a:	425b      	negs	r3, r3
 801216c:	e118      	b.n	80123a0 <dwt_initialise+0x290>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	2202      	movs	r2, #2
 8012172:	4013      	ands	r3, r2
 8012174:	d101      	bne.n	801217a <dwt_initialise+0x6a>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 8012176:	f000 ffd1 	bl	801311c <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	2202      	movs	r2, #2
 801217e:	4013      	ands	r3, r2
 8012180:	d003      	beq.n	801218a <dwt_initialise+0x7a>
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	22f8      	movs	r2, #248	@ 0xf8
 8012186:	4013      	ands	r3, r2
 8012188:	d102      	bne.n	8012190 <dwt_initialise+0x80>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 801218a:	2000      	movs	r0, #0
 801218c:	f000 fdb2 	bl	8012cf4 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8012190:	2204      	movs	r2, #4
 8012192:	2100      	movs	r1, #0
 8012194:	2024      	movs	r0, #36	@ 0x24
 8012196:	f000 fc95 	bl	8012ac4 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	2202      	movs	r2, #2
 801219e:	4013      	ands	r3, r2
 80121a0:	d118      	bne.n	80121d4 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 80121a2:	2004      	movs	r0, #4
 80121a4:	f000 fce8 	bl	8012b78 <_dwt_otpread>
 80121a8:	0003      	movs	r3, r0
 80121aa:	613b      	str	r3, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 80121ac:	693b      	ldr	r3, [r7, #16]
 80121ae:	22ff      	movs	r2, #255	@ 0xff
 80121b0:	4013      	ands	r3, r2
 80121b2:	d021      	beq.n	80121f8 <dwt_initialise+0xe8>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 80121b4:	2202      	movs	r2, #2
 80121b6:	2112      	movs	r1, #18
 80121b8:	202d      	movs	r0, #45	@ 0x2d
 80121ba:	f000 fc83 	bl	8012ac4 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 80121be:	4b7a      	ldr	r3, [pc, #488]	@ (80123a8 <dwt_initialise+0x298>)
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	8ada      	ldrh	r2, [r3, #22]
 80121c4:	4b78      	ldr	r3, [pc, #480]	@ (80123a8 <dwt_initialise+0x298>)
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	2180      	movs	r1, #128	@ 0x80
 80121ca:	0149      	lsls	r1, r1, #5
 80121cc:	430a      	orrs	r2, r1
 80121ce:	b292      	uxth	r2, r2
 80121d0:	82da      	strh	r2, [r3, #22]
 80121d2:	e011      	b.n	80121f8 <dwt_initialise+0xe8>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 80121d4:	2130      	movs	r1, #48	@ 0x30
 80121d6:	2028      	movs	r0, #40	@ 0x28
 80121d8:	f000 fc16 	bl	8012a08 <dwt_read32bitoffsetreg>
 80121dc:	0003      	movs	r3, r0
 80121de:	4a74      	ldr	r2, [pc, #464]	@ (80123b0 <dwt_initialise+0x2a0>)
 80121e0:	4293      	cmp	r3, r2
 80121e2:	d009      	beq.n	80121f8 <dwt_initialise+0xe8>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 80121e4:	4b70      	ldr	r3, [pc, #448]	@ (80123a8 <dwt_initialise+0x298>)
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	8ada      	ldrh	r2, [r3, #22]
 80121ea:	4b6f      	ldr	r3, [pc, #444]	@ (80123a8 <dwt_initialise+0x298>)
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	2180      	movs	r1, #128	@ 0x80
 80121f0:	0149      	lsls	r1, r1, #5
 80121f2:	430a      	orrs	r2, r1
 80121f4:	b292      	uxth	r2, r2
 80121f6:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	2202      	movs	r2, #2
 80121fc:	4013      	ands	r3, r2
 80121fe:	d007      	beq.n	8012210 <dwt_initialise+0x100>
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	2202      	movs	r2, #2
 8012204:	4013      	ands	r3, r2
 8012206:	d013      	beq.n	8012230 <dwt_initialise+0x120>
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	2208      	movs	r2, #8
 801220c:	4013      	ands	r3, r2
 801220e:	d00f      	beq.n	8012230 <dwt_initialise+0x120>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8012210:	201e      	movs	r0, #30
 8012212:	f000 fcb1 	bl	8012b78 <_dwt_otpread>
 8012216:	0002      	movs	r2, r0
 8012218:	2116      	movs	r1, #22
 801221a:	187b      	adds	r3, r7, r1
 801221c:	801a      	strh	r2, [r3, #0]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 801221e:	187b      	adds	r3, r7, r1
 8012220:	881b      	ldrh	r3, [r3, #0]
 8012222:	0a1b      	lsrs	r3, r3, #8
 8012224:	b29a      	uxth	r2, r3
 8012226:	4b60      	ldr	r3, [pc, #384]	@ (80123a8 <dwt_initialise+0x298>)
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	b2d2      	uxtb	r2, r2
 801222c:	72da      	strb	r2, [r3, #11]
 801222e:	e003      	b.n	8012238 <dwt_initialise+0x128>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 8012230:	4b5d      	ldr	r3, [pc, #372]	@ (80123a8 <dwt_initialise+0x298>)
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	2200      	movs	r2, #0
 8012236:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	2202      	movs	r2, #2
 801223c:	4013      	ands	r3, r2
 801223e:	d10f      	bne.n	8012260 <dwt_initialise+0x150>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 8012240:	2116      	movs	r1, #22
 8012242:	187b      	adds	r3, r7, r1
 8012244:	881b      	ldrh	r3, [r3, #0]
 8012246:	221f      	movs	r2, #31
 8012248:	4013      	ands	r3, r2
 801224a:	d102      	bne.n	8012252 <dwt_initialise+0x142>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 801224c:	187b      	adds	r3, r7, r1
 801224e:	2210      	movs	r2, #16
 8012250:	801a      	strh	r2, [r3, #0]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 8012252:	2316      	movs	r3, #22
 8012254:	18fb      	adds	r3, r7, r3
 8012256:	881b      	ldrh	r3, [r3, #0]
 8012258:	b2db      	uxtb	r3, r3
 801225a:	0018      	movs	r0, r3
 801225c:	f000 ff84 	bl	8013168 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	2210      	movs	r2, #16
 8012264:	4013      	ands	r3, r2
 8012266:	d007      	beq.n	8012278 <dwt_initialise+0x168>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8012268:	4b4f      	ldr	r3, [pc, #316]	@ (80123a8 <dwt_initialise+0x298>)
 801226a:	681c      	ldr	r4, [r3, #0]
 801226c:	2006      	movs	r0, #6
 801226e:	f000 fc83 	bl	8012b78 <_dwt_otpread>
 8012272:	0003      	movs	r3, r0
 8012274:	6023      	str	r3, [r4, #0]
 8012276:	e003      	b.n	8012280 <dwt_initialise+0x170>
    }
    else
    {
        pdw1000local->partID = 0;
 8012278:	4b4b      	ldr	r3, [pc, #300]	@ (80123a8 <dwt_initialise+0x298>)
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	2200      	movs	r2, #0
 801227e:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	2220      	movs	r2, #32
 8012284:	4013      	ands	r3, r2
 8012286:	d007      	beq.n	8012298 <dwt_initialise+0x188>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8012288:	4b47      	ldr	r3, [pc, #284]	@ (80123a8 <dwt_initialise+0x298>)
 801228a:	681c      	ldr	r4, [r3, #0]
 801228c:	2007      	movs	r0, #7
 801228e:	f000 fc73 	bl	8012b78 <_dwt_otpread>
 8012292:	0003      	movs	r3, r0
 8012294:	6063      	str	r3, [r4, #4]
 8012296:	e003      	b.n	80122a0 <dwt_initialise+0x190>
    }
    else
    {
        pdw1000local->lotID = 0;
 8012298:	4b43      	ldr	r3, [pc, #268]	@ (80123a8 <dwt_initialise+0x298>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	2200      	movs	r2, #0
 801229e:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	2240      	movs	r2, #64	@ 0x40
 80122a4:	4013      	ands	r3, r2
 80122a6:	d008      	beq.n	80122ba <dwt_initialise+0x1aa>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 80122a8:	2008      	movs	r0, #8
 80122aa:	f000 fc65 	bl	8012b78 <_dwt_otpread>
 80122ae:	0002      	movs	r2, r0
 80122b0:	4b3d      	ldr	r3, [pc, #244]	@ (80123a8 <dwt_initialise+0x298>)
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	b2d2      	uxtb	r2, r2
 80122b6:	721a      	strb	r2, [r3, #8]
 80122b8:	e003      	b.n	80122c2 <dwt_initialise+0x1b2>
    }
    else
    {
        pdw1000local->vBatP = 0;
 80122ba:	4b3b      	ldr	r3, [pc, #236]	@ (80123a8 <dwt_initialise+0x298>)
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	2200      	movs	r2, #0
 80122c0:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	2280      	movs	r2, #128	@ 0x80
 80122c6:	4013      	ands	r3, r2
 80122c8:	d008      	beq.n	80122dc <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 80122ca:	2009      	movs	r0, #9
 80122cc:	f000 fc54 	bl	8012b78 <_dwt_otpread>
 80122d0:	0002      	movs	r2, r0
 80122d2:	4b35      	ldr	r3, [pc, #212]	@ (80123a8 <dwt_initialise+0x298>)
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	b2d2      	uxtb	r2, r2
 80122d8:	725a      	strb	r2, [r3, #9]
 80122da:	e003      	b.n	80122e4 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 80122dc:	4b32      	ldr	r3, [pc, #200]	@ (80123a8 <dwt_initialise+0x298>)
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	2200      	movs	r2, #0
 80122e2:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	2202      	movs	r2, #2
 80122e8:	4013      	ands	r3, r2
 80122ea:	d127      	bne.n	801233c <dwt_initialise+0x22c>
    {
        if(DWT_LOADUCODE & config)
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	2201      	movs	r2, #1
 80122f0:	4013      	ands	r3, r2
 80122f2:	d00c      	beq.n	801230e <dwt_initialise+0x1fe>
        {
            _dwt_loaducodefromrom();
 80122f4:	f000 fc98 	bl	8012c28 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 80122f8:	4b2b      	ldr	r3, [pc, #172]	@ (80123a8 <dwt_initialise+0x298>)
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	8ada      	ldrh	r2, [r3, #22]
 80122fe:	4b2a      	ldr	r3, [pc, #168]	@ (80123a8 <dwt_initialise+0x298>)
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	2180      	movs	r1, #128	@ 0x80
 8012304:	0109      	lsls	r1, r1, #4
 8012306:	430a      	orrs	r2, r1
 8012308:	b292      	uxth	r2, r2
 801230a:	82da      	strh	r2, [r3, #22]
 801230c:	e024      	b.n	8012358 <dwt_initialise+0x248>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 801230e:	250e      	movs	r5, #14
 8012310:	197c      	adds	r4, r7, r5
 8012312:	2105      	movs	r1, #5
 8012314:	2036      	movs	r0, #54	@ 0x36
 8012316:	f000 fb9e 	bl	8012a56 <dwt_read16bitoffsetreg>
 801231a:	0003      	movs	r3, r0
 801231c:	8023      	strh	r3, [r4, #0]
            rega &= 0xFDFF ; // Clear LDERUN bit
 801231e:	0028      	movs	r0, r5
 8012320:	183b      	adds	r3, r7, r0
 8012322:	183a      	adds	r2, r7, r0
 8012324:	8812      	ldrh	r2, [r2, #0]
 8012326:	4923      	ldr	r1, [pc, #140]	@ (80123b4 <dwt_initialise+0x2a4>)
 8012328:	400a      	ands	r2, r1
 801232a:	801a      	strh	r2, [r3, #0]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 801232c:	183b      	adds	r3, r7, r0
 801232e:	881b      	ldrh	r3, [r3, #0]
 8012330:	001a      	movs	r2, r3
 8012332:	2105      	movs	r1, #5
 8012334:	2036      	movs	r0, #54	@ 0x36
 8012336:	f000 fbd8 	bl	8012aea <dwt_write16bitoffsetreg>
 801233a:	e00d      	b.n	8012358 <dwt_initialise+0x248>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	2204      	movs	r2, #4
 8012340:	4013      	ands	r3, r2
 8012342:	d109      	bne.n	8012358 <dwt_initialise+0x248>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 8012344:	4b18      	ldr	r3, [pc, #96]	@ (80123a8 <dwt_initialise+0x298>)
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	8ada      	ldrh	r2, [r3, #22]
 801234a:	4b17      	ldr	r3, [pc, #92]	@ (80123a8 <dwt_initialise+0x298>)
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	2180      	movs	r1, #128	@ 0x80
 8012350:	0109      	lsls	r1, r1, #4
 8012352:	430a      	orrs	r2, r1
 8012354:	b292      	uxth	r2, r2
 8012356:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8012358:	2001      	movs	r0, #1
 801235a:	f000 fccb 	bl	8012cf4 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 801235e:	2200      	movs	r2, #0
 8012360:	210a      	movs	r1, #10
 8012362:	202c      	movs	r0, #44	@ 0x2c
 8012364:	f000 fbae 	bl	8012ac4 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 8012368:	4b0f      	ldr	r3, [pc, #60]	@ (80123a8 <dwt_initialise+0x298>)
 801236a:	681c      	ldr	r4, [r3, #0]
 801236c:	2100      	movs	r1, #0
 801236e:	2004      	movs	r0, #4
 8012370:	f000 fb4a 	bl	8012a08 <dwt_read32bitoffsetreg>
 8012374:	0003      	movs	r3, r0
 8012376:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 8012378:	4b0b      	ldr	r3, [pc, #44]	@ (80123a8 <dwt_initialise+0x298>)
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	691b      	ldr	r3, [r3, #16]
 801237e:	0c1b      	lsrs	r3, r3, #16
 8012380:	b2da      	uxtb	r2, r3
 8012382:	4b09      	ldr	r3, [pc, #36]	@ (80123a8 <dwt_initialise+0x298>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	2103      	movs	r1, #3
 8012388:	400a      	ands	r2, r1
 801238a:	b2d2      	uxtb	r2, r2
 801238c:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 801238e:	4b06      	ldr	r3, [pc, #24]	@ (80123a8 <dwt_initialise+0x298>)
 8012390:	681c      	ldr	r4, [r3, #0]
 8012392:	2100      	movs	r1, #0
 8012394:	2008      	movs	r0, #8
 8012396:	f000 fb37 	bl	8012a08 <dwt_read32bitoffsetreg>
 801239a:	0003      	movs	r3, r0
 801239c:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 801239e:	2300      	movs	r3, #0

} // end dwt_initialise()
 80123a0:	0018      	movs	r0, r3
 80123a2:	46bd      	mov	sp, r7
 80123a4:	b006      	add	sp, #24
 80123a6:	bdb0      	pop	{r4, r5, r7, pc}
 80123a8:	200001fc 	.word	0x200001fc
 80123ac:	deca0130 	.word	0xdeca0130
 80123b0:	88888888 	.word	0x88888888
 80123b4:	fffffdff 	.word	0xfffffdff

080123b8 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 80123bc:	2100      	movs	r1, #0
 80123be:	2000      	movs	r0, #0
 80123c0:	f000 fb22 	bl	8012a08 <dwt_read32bitoffsetreg>
 80123c4:	0003      	movs	r3, r0
}
 80123c6:	0018      	movs	r0, r3
 80123c8:	46bd      	mov	sp, r7
 80123ca:	bd80      	pop	{r7, pc}

080123cc <dwt_configuretxrf>:
 * output parameters
 *
 * no return value
 */
void dwt_configuretxrf(dwt_txconfig_t *config)
{
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b082      	sub	sp, #8
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]

    // Configure RF TX PG_DELAY
    dwt_write8bitoffsetreg(TX_CAL_ID, TC_PGDELAY_OFFSET, config->PGdly);
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	781b      	ldrb	r3, [r3, #0]
 80123d8:	001a      	movs	r2, r3
 80123da:	210b      	movs	r1, #11
 80123dc:	202a      	movs	r0, #42	@ 0x2a
 80123de:	f000 fb71 	bl	8012ac4 <dwt_write8bitoffsetreg>

    // Configure TX power
    dwt_write32bitreg(TX_POWER_ID, config->power);
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	685b      	ldr	r3, [r3, #4]
 80123e6:	001a      	movs	r2, r3
 80123e8:	2100      	movs	r1, #0
 80123ea:	201e      	movs	r0, #30
 80123ec:	f000 fb9d 	bl	8012b2a <dwt_write32bitoffsetreg>

}
 80123f0:	46c0      	nop			@ (mov r8, r8)
 80123f2:	46bd      	mov	sp, r7
 80123f4:	b002      	add	sp, #8
 80123f6:	bd80      	pop	{r7, pc}

080123f8 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 80123f8:	b5b0      	push	{r4, r5, r7, lr}
 80123fa:	b086      	sub	sp, #24
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 8012400:	2317      	movs	r3, #23
 8012402:	18fb      	adds	r3, r7, r3
 8012404:	2200      	movs	r2, #0
 8012406:	701a      	strb	r2, [r3, #0]
    uint8 useDWnsSFD = 0;
 8012408:	2316      	movs	r3, #22
 801240a:	18fb      	adds	r3, r7, r3
 801240c:	2200      	movs	r2, #0
 801240e:	701a      	strb	r2, [r3, #0]
    uint8 chan = config->chan ;
 8012410:	2013      	movs	r0, #19
 8012412:	183b      	adds	r3, r7, r0
 8012414:	687a      	ldr	r2, [r7, #4]
 8012416:	7812      	ldrb	r2, [r2, #0]
 8012418:	701a      	strb	r2, [r3, #0]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	795b      	ldrb	r3, [r3, #5]
 801241e:	0019      	movs	r1, r3
 8012420:	2314      	movs	r3, #20
 8012422:	18fb      	adds	r3, r7, r3
 8012424:	4ab6      	ldr	r2, [pc, #728]	@ (8012700 <dwt_configure+0x308>)
 8012426:	0049      	lsls	r1, r1, #1
 8012428:	5a8a      	ldrh	r2, [r1, r2]
 801242a:	801a      	strh	r2, [r3, #0]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	785a      	ldrb	r2, [r3, #1]
 8012430:	2312      	movs	r3, #18
 8012432:	18fb      	adds	r3, r7, r3
 8012434:	3a01      	subs	r2, #1
 8012436:	701a      	strb	r2, [r3, #0]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 8012438:	183b      	adds	r3, r7, r0
 801243a:	781b      	ldrb	r3, [r3, #0]
 801243c:	2b04      	cmp	r3, #4
 801243e:	d003      	beq.n	8012448 <dwt_configure+0x50>
 8012440:	183b      	adds	r3, r7, r0
 8012442:	781b      	ldrb	r3, [r3, #0]
 8012444:	2b07      	cmp	r3, #7
 8012446:	d101      	bne.n	801244c <dwt_configure+0x54>
 8012448:	2201      	movs	r2, #1
 801244a:	e000      	b.n	801244e <dwt_configure+0x56>
 801244c:	2200      	movs	r2, #0
 801244e:	2311      	movs	r3, #17
 8012450:	18fb      	adds	r3, r7, r3
 8012452:	701a      	strb	r2, [r3, #0]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	79db      	ldrb	r3, [r3, #7]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d10f      	bne.n	801247c <dwt_configure+0x84>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 801245c:	4ba9      	ldr	r3, [pc, #676]	@ (8012704 <dwt_configure+0x30c>)
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	691a      	ldr	r2, [r3, #16]
 8012462:	4ba8      	ldr	r3, [pc, #672]	@ (8012704 <dwt_configure+0x30c>)
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	2180      	movs	r1, #128	@ 0x80
 8012468:	03c9      	lsls	r1, r1, #15
 801246a:	430a      	orrs	r2, r1
 801246c:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 801246e:	2214      	movs	r2, #20
 8012470:	18bb      	adds	r3, r7, r2
 8012472:	18ba      	adds	r2, r7, r2
 8012474:	8812      	ldrh	r2, [r2, #0]
 8012476:	08d2      	lsrs	r2, r2, #3
 8012478:	801a      	strh	r2, [r3, #0]
 801247a:	e007      	b.n	801248c <dwt_configure+0x94>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 801247c:	4ba1      	ldr	r3, [pc, #644]	@ (8012704 <dwt_configure+0x30c>)
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	691a      	ldr	r2, [r3, #16]
 8012482:	4ba0      	ldr	r3, [pc, #640]	@ (8012704 <dwt_configure+0x30c>)
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	49a0      	ldr	r1, [pc, #640]	@ (8012708 <dwt_configure+0x310>)
 8012488:	400a      	ands	r2, r1
 801248a:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 801248c:	4b9d      	ldr	r3, [pc, #628]	@ (8012704 <dwt_configure+0x30c>)
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	687a      	ldr	r2, [r7, #4]
 8012492:	7a12      	ldrb	r2, [r2, #8]
 8012494:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 8012496:	4b9b      	ldr	r3, [pc, #620]	@ (8012704 <dwt_configure+0x30c>)
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	691a      	ldr	r2, [r3, #16]
 801249c:	4b99      	ldr	r3, [pc, #612]	@ (8012704 <dwt_configure+0x30c>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	499a      	ldr	r1, [pc, #616]	@ (801270c <dwt_configure+0x314>)
 80124a2:	400a      	ands	r2, r1
 80124a4:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80124a6:	4b97      	ldr	r3, [pc, #604]	@ (8012704 <dwt_configure+0x30c>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	6919      	ldr	r1, [r3, #16]
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	7a1b      	ldrb	r3, [r3, #8]
 80124b0:	041a      	lsls	r2, r3, #16
 80124b2:	23c0      	movs	r3, #192	@ 0xc0
 80124b4:	029b      	lsls	r3, r3, #10
 80124b6:	401a      	ands	r2, r3
 80124b8:	4b92      	ldr	r3, [pc, #584]	@ (8012704 <dwt_configure+0x30c>)
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	430a      	orrs	r2, r1
 80124be:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 80124c0:	4b90      	ldr	r3, [pc, #576]	@ (8012704 <dwt_configure+0x30c>)
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	691b      	ldr	r3, [r3, #16]
 80124c6:	001a      	movs	r2, r3
 80124c8:	2100      	movs	r1, #0
 80124ca:	2004      	movs	r0, #4
 80124cc:	f000 fb2d 	bl	8012b2a <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 80124d0:	2314      	movs	r3, #20
 80124d2:	18fb      	adds	r3, r7, r3
 80124d4:	881b      	ldrh	r3, [r3, #0]
 80124d6:	498e      	ldr	r1, [pc, #568]	@ (8012710 <dwt_configure+0x318>)
 80124d8:	001a      	movs	r2, r3
 80124da:	202e      	movs	r0, #46	@ 0x2e
 80124dc:	f000 fb05 	bl	8012aea <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 80124e0:	2512      	movs	r5, #18
 80124e2:	197b      	adds	r3, r7, r5
 80124e4:	781b      	ldrb	r3, [r3, #0]
 80124e6:	0018      	movs	r0, r3
 80124e8:	f000 fb78 	bl	8012bdc <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 80124ec:	2413      	movs	r4, #19
 80124ee:	193b      	adds	r3, r7, r4
 80124f0:	781b      	ldrb	r3, [r3, #0]
 80124f2:	4a88      	ldr	r2, [pc, #544]	@ (8012714 <dwt_configure+0x31c>)
 80124f4:	5cd3      	ldrb	r3, [r2, r3]
 80124f6:	001a      	movs	r2, r3
 80124f8:	4b87      	ldr	r3, [pc, #540]	@ (8012718 <dwt_configure+0x320>)
 80124fa:	0092      	lsls	r2, r2, #2
 80124fc:	58d3      	ldr	r3, [r2, r3]
 80124fe:	001a      	movs	r2, r3
 8012500:	2107      	movs	r1, #7
 8012502:	202b      	movs	r0, #43	@ 0x2b
 8012504:	f000 fb11 	bl	8012b2a <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8012508:	193b      	adds	r3, r7, r4
 801250a:	781b      	ldrb	r3, [r3, #0]
 801250c:	4a81      	ldr	r2, [pc, #516]	@ (8012714 <dwt_configure+0x31c>)
 801250e:	5cd3      	ldrb	r3, [r2, r3]
 8012510:	001a      	movs	r2, r3
 8012512:	4b82      	ldr	r3, [pc, #520]	@ (801271c <dwt_configure+0x324>)
 8012514:	5c9b      	ldrb	r3, [r3, r2]
 8012516:	001a      	movs	r2, r3
 8012518:	210b      	movs	r1, #11
 801251a:	202b      	movs	r0, #43	@ 0x2b
 801251c:	f000 fad2 	bl	8012ac4 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8012520:	2311      	movs	r3, #17
 8012522:	18fb      	adds	r3, r7, r3
 8012524:	781b      	ldrb	r3, [r3, #0]
 8012526:	4a7e      	ldr	r2, [pc, #504]	@ (8012720 <dwt_configure+0x328>)
 8012528:	5cd3      	ldrb	r3, [r2, r3]
 801252a:	001a      	movs	r2, r3
 801252c:	210b      	movs	r1, #11
 801252e:	2028      	movs	r0, #40	@ 0x28
 8012530:	f000 fac8 	bl	8012ac4 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 8012534:	193b      	adds	r3, r7, r4
 8012536:	781b      	ldrb	r3, [r3, #0]
 8012538:	4a76      	ldr	r2, [pc, #472]	@ (8012714 <dwt_configure+0x31c>)
 801253a:	5cd3      	ldrb	r3, [r2, r3]
 801253c:	001a      	movs	r2, r3
 801253e:	4b79      	ldr	r3, [pc, #484]	@ (8012724 <dwt_configure+0x32c>)
 8012540:	0092      	lsls	r2, r2, #2
 8012542:	58d3      	ldr	r3, [r2, r3]
 8012544:	001a      	movs	r2, r3
 8012546:	210c      	movs	r1, #12
 8012548:	2028      	movs	r0, #40	@ 0x28
 801254a:	f000 faee 	bl	8012b2a <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	79db      	ldrb	r3, [r3, #7]
 8012552:	001a      	movs	r2, r3
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	799b      	ldrb	r3, [r3, #6]
 8012558:	0019      	movs	r1, r3
 801255a:	4b73      	ldr	r3, [pc, #460]	@ (8012728 <dwt_configure+0x330>)
 801255c:	0052      	lsls	r2, r2, #1
 801255e:	1852      	adds	r2, r2, r1
 8012560:	0052      	lsls	r2, r2, #1
 8012562:	5ad3      	ldrh	r3, [r2, r3]
 8012564:	001a      	movs	r2, r3
 8012566:	2102      	movs	r1, #2
 8012568:	2027      	movs	r0, #39	@ 0x27
 801256a:	f000 fabe 	bl	8012aea <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 801256e:	197b      	adds	r3, r7, r5
 8012570:	781a      	ldrb	r2, [r3, #0]
 8012572:	4b6e      	ldr	r3, [pc, #440]	@ (801272c <dwt_configure+0x334>)
 8012574:	0052      	lsls	r2, r2, #1
 8012576:	5ad3      	ldrh	r3, [r2, r3]
 8012578:	001a      	movs	r2, r3
 801257a:	2104      	movs	r1, #4
 801257c:	2027      	movs	r0, #39	@ 0x27
 801257e:	f000 fab4 	bl	8012aea <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	79db      	ldrb	r3, [r3, #7]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d105      	bne.n	8012596 <dwt_configure+0x19e>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 801258a:	2264      	movs	r2, #100	@ 0x64
 801258c:	2106      	movs	r1, #6
 801258e:	2027      	movs	r0, #39	@ 0x27
 8012590:	f000 faab 	bl	8012aea <dwt_write16bitoffsetreg>
 8012594:	e018      	b.n	80125c8 <dwt_configure+0x1d0>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	789b      	ldrb	r3, [r3, #2]
 801259a:	2b04      	cmp	r3, #4
 801259c:	d10a      	bne.n	80125b4 <dwt_configure+0x1bc>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 801259e:	2210      	movs	r2, #16
 80125a0:	2106      	movs	r1, #6
 80125a2:	2027      	movs	r0, #39	@ 0x27
 80125a4:	f000 faa1 	bl	8012aea <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 80125a8:	2210      	movs	r2, #16
 80125aa:	2126      	movs	r1, #38	@ 0x26
 80125ac:	2027      	movs	r0, #39	@ 0x27
 80125ae:	f000 fa89 	bl	8012ac4 <dwt_write8bitoffsetreg>
 80125b2:	e009      	b.n	80125c8 <dwt_configure+0x1d0>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 80125b4:	2220      	movs	r2, #32
 80125b6:	2106      	movs	r1, #6
 80125b8:	2027      	movs	r0, #39	@ 0x27
 80125ba:	f000 fa96 	bl	8012aea <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 80125be:	2228      	movs	r2, #40	@ 0x28
 80125c0:	2126      	movs	r1, #38	@ 0x26
 80125c2:	2027      	movs	r0, #39	@ 0x27
 80125c4:	f000 fa7e 	bl	8012ac4 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 80125c8:	2312      	movs	r3, #18
 80125ca:	18fb      	adds	r3, r7, r3
 80125cc:	781a      	ldrb	r2, [r3, #0]
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	78db      	ldrb	r3, [r3, #3]
 80125d2:	0019      	movs	r1, r3
 80125d4:	4b56      	ldr	r3, [pc, #344]	@ (8012730 <dwt_configure+0x338>)
 80125d6:	0092      	lsls	r2, r2, #2
 80125d8:	1852      	adds	r2, r2, r1
 80125da:	0092      	lsls	r2, r2, #2
 80125dc:	58d3      	ldr	r3, [r2, r3]
 80125de:	001a      	movs	r2, r3
 80125e0:	2108      	movs	r1, #8
 80125e2:	2027      	movs	r0, #39	@ 0x27
 80125e4:	f000 faa1 	bl	8012b2a <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	895b      	ldrh	r3, [r3, #10]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d102      	bne.n	80125f6 <dwt_configure+0x1fe>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	4a50      	ldr	r2, [pc, #320]	@ (8012734 <dwt_configure+0x33c>)
 80125f4:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	895b      	ldrh	r3, [r3, #10]
 80125fa:	001a      	movs	r2, r3
 80125fc:	2120      	movs	r1, #32
 80125fe:	2027      	movs	r0, #39	@ 0x27
 8012600:	f000 fa73 	bl	8012aea <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8012604:	4b4c      	ldr	r3, [pc, #304]	@ (8012738 <dwt_configure+0x340>)
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	001a      	movs	r2, r3
 801260a:	210c      	movs	r1, #12
 801260c:	2023      	movs	r0, #35	@ 0x23
 801260e:	f000 fa8c 	bl	8012b2a <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8012612:	2312      	movs	r3, #18
 8012614:	18fb      	adds	r3, r7, r3
 8012616:	781b      	ldrb	r3, [r3, #0]
 8012618:	4a47      	ldr	r2, [pc, #284]	@ (8012738 <dwt_configure+0x340>)
 801261a:	005b      	lsls	r3, r3, #1
 801261c:	18d3      	adds	r3, r2, r3
 801261e:	3304      	adds	r3, #4
 8012620:	881b      	ldrh	r3, [r3, #0]
 8012622:	001a      	movs	r2, r3
 8012624:	2104      	movs	r1, #4
 8012626:	2023      	movs	r0, #35	@ 0x23
 8012628:	f000 fa5f 	bl	8012aea <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	799b      	ldrb	r3, [r3, #6]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d011      	beq.n	8012658 <dwt_configure+0x260>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	79db      	ldrb	r3, [r3, #7]
 8012638:	001a      	movs	r2, r3
 801263a:	4b40      	ldr	r3, [pc, #256]	@ (801273c <dwt_configure+0x344>)
 801263c:	5c9b      	ldrb	r3, [r3, r2]
 801263e:	001a      	movs	r2, r3
 8012640:	2100      	movs	r1, #0
 8012642:	2021      	movs	r0, #33	@ 0x21
 8012644:	f000 fa3e 	bl	8012ac4 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 8012648:	2317      	movs	r3, #23
 801264a:	18fb      	adds	r3, r7, r3
 801264c:	2203      	movs	r2, #3
 801264e:	701a      	strb	r2, [r3, #0]
        useDWnsSFD = 1 ;
 8012650:	2316      	movs	r3, #22
 8012652:	18fb      	adds	r3, r7, r3
 8012654:	2201      	movs	r2, #1
 8012656:	701a      	strb	r2, [r3, #0]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8012658:	2113      	movs	r1, #19
 801265a:	187b      	adds	r3, r7, r1
 801265c:	781b      	ldrb	r3, [r3, #0]
 801265e:	220f      	movs	r2, #15
 8012660:	401a      	ands	r2, r3
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8012662:	187b      	adds	r3, r7, r1
 8012664:	781b      	ldrb	r3, [r3, #0]
 8012666:	011b      	lsls	r3, r3, #4
 8012668:	21ff      	movs	r1, #255	@ 0xff
 801266a:	400b      	ands	r3, r1
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 801266c:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	785b      	ldrb	r3, [r3, #1]
 8012672:	0499      	lsls	r1, r3, #18
 8012674:	23c0      	movs	r3, #192	@ 0xc0
 8012676:	031b      	lsls	r3, r3, #12
 8012678:	400b      	ands	r3, r1
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 801267a:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 801267c:	2317      	movs	r3, #23
 801267e:	18fb      	adds	r3, r7, r3
 8012680:	781b      	ldrb	r3, [r3, #0]
 8012682:	0519      	lsls	r1, r3, #20
 8012684:	23c0      	movs	r3, #192	@ 0xc0
 8012686:	039b      	lsls	r3, r3, #14
 8012688:	400b      	ands	r3, r1
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 801268a:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 801268c:	2316      	movs	r3, #22
 801268e:	18fb      	adds	r3, r7, r3
 8012690:	781b      	ldrb	r3, [r3, #0]
 8012692:	0459      	lsls	r1, r3, #17
 8012694:	2380      	movs	r3, #128	@ 0x80
 8012696:	029b      	lsls	r3, r3, #10
 8012698:	400b      	ands	r3, r1
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 801269a:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	791b      	ldrb	r3, [r3, #4]
 80126a0:	0599      	lsls	r1, r3, #22
 80126a2:	23f8      	movs	r3, #248	@ 0xf8
 80126a4:	04db      	lsls	r3, r3, #19
 80126a6:	400b      	ands	r3, r1
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80126a8:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	795b      	ldrb	r3, [r3, #5]
 80126ae:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80126b0:	4313      	orrs	r3, r2
 80126b2:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	001a      	movs	r2, r3
 80126b8:	2100      	movs	r1, #0
 80126ba:	201f      	movs	r0, #31
 80126bc:	f000 fa35 	bl	8012b2a <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	789a      	ldrb	r2, [r3, #2]
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	785b      	ldrb	r3, [r3, #1]
 80126c8:	4313      	orrs	r3, r2
 80126ca:	b2db      	uxtb	r3, r3
 80126cc:	0419      	lsls	r1, r3, #16
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	79db      	ldrb	r3, [r3, #7]
 80126d2:	035a      	lsls	r2, r3, #13
 80126d4:	4b0b      	ldr	r3, [pc, #44]	@ (8012704 <dwt_configure+0x30c>)
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	430a      	orrs	r2, r1
 80126da:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 80126dc:	4b09      	ldr	r3, [pc, #36]	@ (8012704 <dwt_configure+0x30c>)
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	68db      	ldr	r3, [r3, #12]
 80126e2:	001a      	movs	r2, r3
 80126e4:	2100      	movs	r1, #0
 80126e6:	2008      	movs	r0, #8
 80126e8:	f000 fa1f 	bl	8012b2a <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 80126ec:	2242      	movs	r2, #66	@ 0x42
 80126ee:	2100      	movs	r1, #0
 80126f0:	200d      	movs	r0, #13
 80126f2:	f000 f9e7 	bl	8012ac4 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 80126f6:	46c0      	nop			@ (mov r8, r8)
 80126f8:	46bd      	mov	sp, r7
 80126fa:	b006      	add	sp, #24
 80126fc:	bdb0      	pop	{r4, r5, r7, pc}
 80126fe:	46c0      	nop			@ (mov r8, r8)
 8012700:	08019f3c 	.word	0x08019f3c
 8012704:	200001fc 	.word	0x200001fc
 8012708:	ffbfffff 	.word	0xffbfffff
 801270c:	fffcffff 	.word	0xfffcffff
 8012710:	00002804 	.word	0x00002804
 8012714:	08019ebc 	.word	0x08019ebc
 8012718:	08019edc 	.word	0x08019edc
 801271c:	08019ef4 	.word	0x08019ef4
 8012720:	08019efc 	.word	0x08019efc
 8012724:	08019ec4 	.word	0x08019ec4
 8012728:	08019f0c 	.word	0x08019f0c
 801272c:	08019f18 	.word	0x08019f18
 8012730:	08019f1c 	.word	0x08019f1c
 8012734:	00001041 	.word	0x00001041
 8012738:	08019f00 	.word	0x08019f00
 801273c:	08019f08 	.word	0x08019f08

08012740 <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay)
{
 8012740:	b580      	push	{r7, lr}
 8012742:	b082      	sub	sp, #8
 8012744:	af00      	add	r7, sp, #0
 8012746:	0002      	movs	r2, r0
 8012748:	1dbb      	adds	r3, r7, #6
 801274a:	801a      	strh	r2, [r3, #0]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 801274c:	1dbb      	adds	r3, r7, #6
 801274e:	881b      	ldrh	r3, [r3, #0]
 8012750:	4904      	ldr	r1, [pc, #16]	@ (8012764 <dwt_setrxantennadelay+0x24>)
 8012752:	001a      	movs	r2, r3
 8012754:	202e      	movs	r0, #46	@ 0x2e
 8012756:	f000 f9c8 	bl	8012aea <dwt_write16bitoffsetreg>
}
 801275a:	46c0      	nop			@ (mov r8, r8)
 801275c:	46bd      	mov	sp, r7
 801275e:	b002      	add	sp, #8
 8012760:	bd80      	pop	{r7, pc}
 8012762:	46c0      	nop			@ (mov r8, r8)
 8012764:	00001804 	.word	0x00001804

08012768 <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay)
{
 8012768:	b580      	push	{r7, lr}
 801276a:	b082      	sub	sp, #8
 801276c:	af00      	add	r7, sp, #0
 801276e:	0002      	movs	r2, r0
 8012770:	1dbb      	adds	r3, r7, #6
 8012772:	801a      	strh	r2, [r3, #0]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 8012774:	1dbb      	adds	r3, r7, #6
 8012776:	881b      	ldrh	r3, [r3, #0]
 8012778:	001a      	movs	r2, r3
 801277a:	2100      	movs	r1, #0
 801277c:	2018      	movs	r0, #24
 801277e:	f000 f9b4 	bl	8012aea <dwt_write16bitoffsetreg>
}
 8012782:	46c0      	nop			@ (mov r8, r8)
 8012784:	46bd      	mov	sp, r7
 8012786:	b002      	add	sp, #8
 8012788:	bd80      	pop	{r7, pc}

0801278a <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 801278a:	b580      	push	{r7, lr}
 801278c:	b082      	sub	sp, #8
 801278e:	af00      	add	r7, sp, #0
 8012790:	6039      	str	r1, [r7, #0]
 8012792:	0011      	movs	r1, r2
 8012794:	1dbb      	adds	r3, r7, #6
 8012796:	1c02      	adds	r2, r0, #0
 8012798:	801a      	strh	r2, [r3, #0]
 801279a:	1d3b      	adds	r3, r7, #4
 801279c:	1c0a      	adds	r2, r1, #0
 801279e:	801a      	strh	r2, [r3, #0]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 80127a0:	1d3b      	adds	r3, r7, #4
 80127a2:	881a      	ldrh	r2, [r3, #0]
 80127a4:	1dbb      	adds	r3, r7, #6
 80127a6:	881b      	ldrh	r3, [r3, #0]
 80127a8:	18d2      	adds	r2, r2, r3
 80127aa:	2380      	movs	r3, #128	@ 0x80
 80127ac:	00db      	lsls	r3, r3, #3
 80127ae:	429a      	cmp	r2, r3
 80127b0:	dc0d      	bgt.n	80127ce <dwt_writetxdata+0x44>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 80127b2:	1dbb      	adds	r3, r7, #6
 80127b4:	881b      	ldrh	r3, [r3, #0]
 80127b6:	3b02      	subs	r3, #2
 80127b8:	0018      	movs	r0, r3
 80127ba:	683a      	ldr	r2, [r7, #0]
 80127bc:	1d3b      	adds	r3, r7, #4
 80127be:	8819      	ldrh	r1, [r3, #0]
 80127c0:	0013      	movs	r3, r2
 80127c2:	0002      	movs	r2, r0
 80127c4:	2009      	movs	r0, #9
 80127c6:	f000 f862 	bl	801288e <dwt_writetodevice>
        return DWT_SUCCESS;
 80127ca:	2300      	movs	r3, #0
 80127cc:	e001      	b.n	80127d2 <dwt_writetxdata+0x48>
    }
    else
    {
        return DWT_ERROR;
 80127ce:	2301      	movs	r3, #1
 80127d0:	425b      	negs	r3, r3
    }
} // end dwt_writetxdata()
 80127d2:	0018      	movs	r0, r3
 80127d4:	46bd      	mov	sp, r7
 80127d6:	b002      	add	sp, #8
 80127d8:	bd80      	pop	{r7, pc}
	...

080127dc <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 80127dc:	b580      	push	{r7, lr}
 80127de:	b084      	sub	sp, #16
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	603a      	str	r2, [r7, #0]
 80127e4:	1dbb      	adds	r3, r7, #6
 80127e6:	1c02      	adds	r2, r0, #0
 80127e8:	801a      	strh	r2, [r3, #0]
 80127ea:	1d3b      	adds	r3, r7, #4
 80127ec:	1c0a      	adds	r2, r1, #0
 80127ee:	801a      	strh	r2, [r3, #0]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 80127f0:	4b0b      	ldr	r3, [pc, #44]	@ (8012820 <dwt_writetxfctrl+0x44>)
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	68da      	ldr	r2, [r3, #12]
 80127f6:	1dbb      	adds	r3, r7, #6
 80127f8:	881b      	ldrh	r3, [r3, #0]
 80127fa:	431a      	orrs	r2, r3
 80127fc:	1d3b      	adds	r3, r7, #4
 80127fe:	881b      	ldrh	r3, [r3, #0]
 8012800:	059b      	lsls	r3, r3, #22
 8012802:	431a      	orrs	r2, r3
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	03db      	lsls	r3, r3, #15
 8012808:	4313      	orrs	r3, r2
 801280a:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	001a      	movs	r2, r3
 8012810:	2100      	movs	r1, #0
 8012812:	2008      	movs	r0, #8
 8012814:	f000 f989 	bl	8012b2a <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 8012818:	46c0      	nop			@ (mov r8, r8)
 801281a:	46bd      	mov	sp, r7
 801281c:	b004      	add	sp, #16
 801281e:	bd80      	pop	{r7, pc}
 8012820:	200001fc 	.word	0x200001fc

08012824 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b082      	sub	sp, #8
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
 801282c:	0008      	movs	r0, r1
 801282e:	0011      	movs	r1, r2
 8012830:	1cbb      	adds	r3, r7, #2
 8012832:	1c02      	adds	r2, r0, #0
 8012834:	801a      	strh	r2, [r3, #0]
 8012836:	003b      	movs	r3, r7
 8012838:	1c0a      	adds	r2, r1, #0
 801283a:	801a      	strh	r2, [r3, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 801283c:	1cbb      	adds	r3, r7, #2
 801283e:	881a      	ldrh	r2, [r3, #0]
 8012840:	6878      	ldr	r0, [r7, #4]
 8012842:	003b      	movs	r3, r7
 8012844:	8819      	ldrh	r1, [r3, #0]
 8012846:	0003      	movs	r3, r0
 8012848:	2011      	movs	r0, #17
 801284a:	f000 f881 	bl	8012950 <dwt_readfromdevice>
}
 801284e:	46c0      	nop			@ (mov r8, r8)
 8012850:	46bd      	mov	sp, r7
 8012852:	b002      	add	sp, #8
 8012854:	bd80      	pop	{r7, pc}

08012856 <dwt_readtxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readtxtimestamp(uint8 * timestamp)
{
 8012856:	b580      	push	{r7, lr}
 8012858:	b082      	sub	sp, #8
 801285a:	af00      	add	r7, sp, #0
 801285c:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN, timestamp) ; // Read bytes directly into buffer
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	2205      	movs	r2, #5
 8012862:	2100      	movs	r1, #0
 8012864:	2017      	movs	r0, #23
 8012866:	f000 f873 	bl	8012950 <dwt_readfromdevice>
}
 801286a:	46c0      	nop			@ (mov r8, r8)
 801286c:	46bd      	mov	sp, r7
 801286e:	b002      	add	sp, #8
 8012870:	bd80      	pop	{r7, pc}

08012872 <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 * timestamp)
{
 8012872:	b580      	push	{r7, lr}
 8012874:	b082      	sub	sp, #8
 8012876:	af00      	add	r7, sp, #0
 8012878:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	2205      	movs	r2, #5
 801287e:	2100      	movs	r1, #0
 8012880:	2015      	movs	r0, #21
 8012882:	f000 f865 	bl	8012950 <dwt_readfromdevice>
}
 8012886:	46c0      	nop			@ (mov r8, r8)
 8012888:	46bd      	mov	sp, r7
 801288a:	b002      	add	sp, #8
 801288c:	bd80      	pop	{r7, pc}

0801288e <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 801288e:	b590      	push	{r4, r7, lr}
 8012890:	b087      	sub	sp, #28
 8012892:	af00      	add	r7, sp, #0
 8012894:	60ba      	str	r2, [r7, #8]
 8012896:	607b      	str	r3, [r7, #4]
 8012898:	240e      	movs	r4, #14
 801289a:	193b      	adds	r3, r7, r4
 801289c:	1c02      	adds	r2, r0, #0
 801289e:	801a      	strh	r2, [r3, #0]
 80128a0:	200c      	movs	r0, #12
 80128a2:	183b      	adds	r3, r7, r0
 80128a4:	1c0a      	adds	r2, r1, #0
 80128a6:	801a      	strh	r2, [r3, #0]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 80128a8:	2300      	movs	r3, #0
 80128aa:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 80128ac:	183b      	adds	r3, r7, r0
 80128ae:	881b      	ldrh	r3, [r3, #0]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d10d      	bne.n	80128d0 <dwt_writetodevice+0x42>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80128b4:	193b      	adds	r3, r7, r4
 80128b6:	881b      	ldrh	r3, [r3, #0]
 80128b8:	b2da      	uxtb	r2, r3
 80128ba:	697b      	ldr	r3, [r7, #20]
 80128bc:	1c59      	adds	r1, r3, #1
 80128be:	6179      	str	r1, [r7, #20]
 80128c0:	2180      	movs	r1, #128	@ 0x80
 80128c2:	4249      	negs	r1, r1
 80128c4:	430a      	orrs	r2, r1
 80128c6:	b2d1      	uxtb	r1, r2
 80128c8:	2210      	movs	r2, #16
 80128ca:	18ba      	adds	r2, r7, r2
 80128cc:	54d1      	strb	r1, [r2, r3]
 80128ce:	e033      	b.n	8012938 <dwt_writetodevice+0xaa>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80128d0:	230e      	movs	r3, #14
 80128d2:	18fb      	adds	r3, r7, r3
 80128d4:	881b      	ldrh	r3, [r3, #0]
 80128d6:	b2da      	uxtb	r2, r3
 80128d8:	697b      	ldr	r3, [r7, #20]
 80128da:	1c59      	adds	r1, r3, #1
 80128dc:	6179      	str	r1, [r7, #20]
 80128de:	2140      	movs	r1, #64	@ 0x40
 80128e0:	4249      	negs	r1, r1
 80128e2:	430a      	orrs	r2, r1
 80128e4:	b2d1      	uxtb	r1, r2
 80128e6:	2010      	movs	r0, #16
 80128e8:	183a      	adds	r2, r7, r0
 80128ea:	54d1      	strb	r1, [r2, r3]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 80128ec:	210c      	movs	r1, #12
 80128ee:	187b      	adds	r3, r7, r1
 80128f0:	881b      	ldrh	r3, [r3, #0]
 80128f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80128f4:	d808      	bhi.n	8012908 <dwt_writetodevice+0x7a>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80128f6:	697b      	ldr	r3, [r7, #20]
 80128f8:	1c5a      	adds	r2, r3, #1
 80128fa:	617a      	str	r2, [r7, #20]
 80128fc:	187a      	adds	r2, r7, r1
 80128fe:	8812      	ldrh	r2, [r2, #0]
 8012900:	b2d1      	uxtb	r1, r2
 8012902:	183a      	adds	r2, r7, r0
 8012904:	54d1      	strb	r1, [r2, r3]
 8012906:	e017      	b.n	8012938 <dwt_writetodevice+0xaa>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8012908:	200c      	movs	r0, #12
 801290a:	183b      	adds	r3, r7, r0
 801290c:	881b      	ldrh	r3, [r3, #0]
 801290e:	b2da      	uxtb	r2, r3
 8012910:	697b      	ldr	r3, [r7, #20]
 8012912:	1c59      	adds	r1, r3, #1
 8012914:	6179      	str	r1, [r7, #20]
 8012916:	2180      	movs	r1, #128	@ 0x80
 8012918:	4249      	negs	r1, r1
 801291a:	430a      	orrs	r2, r1
 801291c:	b2d1      	uxtb	r1, r2
 801291e:	2410      	movs	r4, #16
 8012920:	193a      	adds	r2, r7, r4
 8012922:	54d1      	strb	r1, [r2, r3]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8012924:	183b      	adds	r3, r7, r0
 8012926:	881b      	ldrh	r3, [r3, #0]
 8012928:	09db      	lsrs	r3, r3, #7
 801292a:	b299      	uxth	r1, r3
 801292c:	697b      	ldr	r3, [r7, #20]
 801292e:	1c5a      	adds	r2, r3, #1
 8012930:	617a      	str	r2, [r7, #20]
 8012932:	b2c9      	uxtb	r1, r1
 8012934:	193a      	adds	r2, r7, r4
 8012936:	54d1      	strb	r1, [r2, r3]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8012938:	697b      	ldr	r3, [r7, #20]
 801293a:	b298      	uxth	r0, r3
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	68ba      	ldr	r2, [r7, #8]
 8012940:	2110      	movs	r1, #16
 8012942:	1879      	adds	r1, r7, r1
 8012944:	f000 fc58 	bl	80131f8 <writetospi>
} // end dwt_writetodevice()
 8012948:	46c0      	nop			@ (mov r8, r8)
 801294a:	46bd      	mov	sp, r7
 801294c:	b007      	add	sp, #28
 801294e:	bd90      	pop	{r4, r7, pc}

08012950 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8012950:	b590      	push	{r4, r7, lr}
 8012952:	b087      	sub	sp, #28
 8012954:	af00      	add	r7, sp, #0
 8012956:	60ba      	str	r2, [r7, #8]
 8012958:	607b      	str	r3, [r7, #4]
 801295a:	240e      	movs	r4, #14
 801295c:	193b      	adds	r3, r7, r4
 801295e:	1c02      	adds	r2, r0, #0
 8012960:	801a      	strh	r2, [r3, #0]
 8012962:	200c      	movs	r0, #12
 8012964:	183b      	adds	r3, r7, r0
 8012966:	1c0a      	adds	r2, r1, #0
 8012968:	801a      	strh	r2, [r3, #0]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 801296a:	2300      	movs	r3, #0
 801296c:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 801296e:	183b      	adds	r3, r7, r0
 8012970:	881b      	ldrh	r3, [r3, #0]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d109      	bne.n	801298a <dwt_readfromdevice+0x3a>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8012976:	697b      	ldr	r3, [r7, #20]
 8012978:	1c5a      	adds	r2, r3, #1
 801297a:	617a      	str	r2, [r7, #20]
 801297c:	193a      	adds	r2, r7, r4
 801297e:	8812      	ldrh	r2, [r2, #0]
 8012980:	b2d1      	uxtb	r1, r2
 8012982:	2210      	movs	r2, #16
 8012984:	18ba      	adds	r2, r7, r2
 8012986:	54d1      	strb	r1, [r2, r3]
 8012988:	e032      	b.n	80129f0 <dwt_readfromdevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 801298a:	230e      	movs	r3, #14
 801298c:	18fb      	adds	r3, r7, r3
 801298e:	881b      	ldrh	r3, [r3, #0]
 8012990:	b2da      	uxtb	r2, r3
 8012992:	697b      	ldr	r3, [r7, #20]
 8012994:	1c59      	adds	r1, r3, #1
 8012996:	6179      	str	r1, [r7, #20]
 8012998:	2140      	movs	r1, #64	@ 0x40
 801299a:	430a      	orrs	r2, r1
 801299c:	b2d1      	uxtb	r1, r2
 801299e:	2010      	movs	r0, #16
 80129a0:	183a      	adds	r2, r7, r0
 80129a2:	54d1      	strb	r1, [r2, r3]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 80129a4:	210c      	movs	r1, #12
 80129a6:	187b      	adds	r3, r7, r1
 80129a8:	881b      	ldrh	r3, [r3, #0]
 80129aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80129ac:	d808      	bhi.n	80129c0 <dwt_readfromdevice+0x70>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80129ae:	697b      	ldr	r3, [r7, #20]
 80129b0:	1c5a      	adds	r2, r3, #1
 80129b2:	617a      	str	r2, [r7, #20]
 80129b4:	187a      	adds	r2, r7, r1
 80129b6:	8812      	ldrh	r2, [r2, #0]
 80129b8:	b2d1      	uxtb	r1, r2
 80129ba:	183a      	adds	r2, r7, r0
 80129bc:	54d1      	strb	r1, [r2, r3]
 80129be:	e017      	b.n	80129f0 <dwt_readfromdevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80129c0:	200c      	movs	r0, #12
 80129c2:	183b      	adds	r3, r7, r0
 80129c4:	881b      	ldrh	r3, [r3, #0]
 80129c6:	b2da      	uxtb	r2, r3
 80129c8:	697b      	ldr	r3, [r7, #20]
 80129ca:	1c59      	adds	r1, r3, #1
 80129cc:	6179      	str	r1, [r7, #20]
 80129ce:	2180      	movs	r1, #128	@ 0x80
 80129d0:	4249      	negs	r1, r1
 80129d2:	430a      	orrs	r2, r1
 80129d4:	b2d1      	uxtb	r1, r2
 80129d6:	2410      	movs	r4, #16
 80129d8:	193a      	adds	r2, r7, r4
 80129da:	54d1      	strb	r1, [r2, r3]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80129dc:	183b      	adds	r3, r7, r0
 80129de:	881b      	ldrh	r3, [r3, #0]
 80129e0:	09db      	lsrs	r3, r3, #7
 80129e2:	b299      	uxth	r1, r3
 80129e4:	697b      	ldr	r3, [r7, #20]
 80129e6:	1c5a      	adds	r2, r3, #1
 80129e8:	617a      	str	r2, [r7, #20]
 80129ea:	b2c9      	uxtb	r1, r1
 80129ec:	193a      	adds	r2, r7, r4
 80129ee:	54d1      	strb	r1, [r2, r3]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 80129f0:	697b      	ldr	r3, [r7, #20]
 80129f2:	b298      	uxth	r0, r3
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	68ba      	ldr	r2, [r7, #8]
 80129f8:	2110      	movs	r1, #16
 80129fa:	1879      	adds	r1, r7, r1
 80129fc:	f000 fc34 	bl	8013268 <readfromspi>
} // end dwt_readfromdevice()
 8012a00:	46c0      	nop			@ (mov r8, r8)
 8012a02:	46bd      	mov	sp, r7
 8012a04:	b007      	add	sp, #28
 8012a06:	bd90      	pop	{r4, r7, pc}

08012a08 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b086      	sub	sp, #24
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
 8012a10:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8012a12:	2300      	movs	r3, #0
 8012a14:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	b298      	uxth	r0, r3
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	b299      	uxth	r1, r3
 8012a1e:	230c      	movs	r3, #12
 8012a20:	18fb      	adds	r3, r7, r3
 8012a22:	2204      	movs	r2, #4
 8012a24:	f7ff ff94 	bl	8012950 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8012a28:	2303      	movs	r3, #3
 8012a2a:	613b      	str	r3, [r7, #16]
 8012a2c:	e00b      	b.n	8012a46 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8012a2e:	697b      	ldr	r3, [r7, #20]
 8012a30:	021b      	lsls	r3, r3, #8
 8012a32:	220c      	movs	r2, #12
 8012a34:	18b9      	adds	r1, r7, r2
 8012a36:	693a      	ldr	r2, [r7, #16]
 8012a38:	188a      	adds	r2, r1, r2
 8012a3a:	7812      	ldrb	r2, [r2, #0]
 8012a3c:	189b      	adds	r3, r3, r2
 8012a3e:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8012a40:	693b      	ldr	r3, [r7, #16]
 8012a42:	3b01      	subs	r3, #1
 8012a44:	613b      	str	r3, [r7, #16]
 8012a46:	693b      	ldr	r3, [r7, #16]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	daf0      	bge.n	8012a2e <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8012a4c:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8012a4e:	0018      	movs	r0, r3
 8012a50:	46bd      	mov	sp, r7
 8012a52:	b006      	add	sp, #24
 8012a54:	bd80      	pop	{r7, pc}

08012a56 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8012a56:	b5b0      	push	{r4, r5, r7, lr}
 8012a58:	b084      	sub	sp, #16
 8012a5a:	af00      	add	r7, sp, #0
 8012a5c:	6078      	str	r0, [r7, #4]
 8012a5e:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8012a60:	240e      	movs	r4, #14
 8012a62:	193b      	adds	r3, r7, r4
 8012a64:	2200      	movs	r2, #0
 8012a66:	801a      	strh	r2, [r3, #0]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	b298      	uxth	r0, r3
 8012a6c:	683b      	ldr	r3, [r7, #0]
 8012a6e:	b299      	uxth	r1, r3
 8012a70:	250c      	movs	r5, #12
 8012a72:	197b      	adds	r3, r7, r5
 8012a74:	2202      	movs	r2, #2
 8012a76:	f7ff ff6b 	bl	8012950 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8012a7a:	0029      	movs	r1, r5
 8012a7c:	187b      	adds	r3, r7, r1
 8012a7e:	785b      	ldrb	r3, [r3, #1]
 8012a80:	021b      	lsls	r3, r3, #8
 8012a82:	b29a      	uxth	r2, r3
 8012a84:	187b      	adds	r3, r7, r1
 8012a86:	781b      	ldrb	r3, [r3, #0]
 8012a88:	0019      	movs	r1, r3
 8012a8a:	193b      	adds	r3, r7, r4
 8012a8c:	1852      	adds	r2, r2, r1
 8012a8e:	801a      	strh	r2, [r3, #0]
    return regval ;
 8012a90:	193b      	adds	r3, r7, r4
 8012a92:	881b      	ldrh	r3, [r3, #0]

} // end dwt_read16bitoffsetreg()
 8012a94:	0018      	movs	r0, r3
 8012a96:	46bd      	mov	sp, r7
 8012a98:	b004      	add	sp, #16
 8012a9a:	bdb0      	pop	{r4, r5, r7, pc}

08012a9c <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8012a9c:	b590      	push	{r4, r7, lr}
 8012a9e:	b085      	sub	sp, #20
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	6078      	str	r0, [r7, #4]
 8012aa4:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	b298      	uxth	r0, r3
 8012aaa:	683b      	ldr	r3, [r7, #0]
 8012aac:	b299      	uxth	r1, r3
 8012aae:	240f      	movs	r4, #15
 8012ab0:	193b      	adds	r3, r7, r4
 8012ab2:	2201      	movs	r2, #1
 8012ab4:	f7ff ff4c 	bl	8012950 <dwt_readfromdevice>

    return regval ;
 8012ab8:	193b      	adds	r3, r7, r4
 8012aba:	781b      	ldrb	r3, [r3, #0]
}
 8012abc:	0018      	movs	r0, r3
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	b005      	add	sp, #20
 8012ac2:	bd90      	pop	{r4, r7, pc}

08012ac4 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b084      	sub	sp, #16
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	60f8      	str	r0, [r7, #12]
 8012acc:	60b9      	str	r1, [r7, #8]
 8012ace:	1dfb      	adds	r3, r7, #7
 8012ad0:	701a      	strb	r2, [r3, #0]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	b298      	uxth	r0, r3
 8012ad6:	68bb      	ldr	r3, [r7, #8]
 8012ad8:	b299      	uxth	r1, r3
 8012ada:	1dfb      	adds	r3, r7, #7
 8012adc:	2201      	movs	r2, #1
 8012ade:	f7ff fed6 	bl	801288e <dwt_writetodevice>
}
 8012ae2:	46c0      	nop			@ (mov r8, r8)
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	b004      	add	sp, #16
 8012ae8:	bd80      	pop	{r7, pc}

08012aea <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8012aea:	b590      	push	{r4, r7, lr}
 8012aec:	b087      	sub	sp, #28
 8012aee:	af00      	add	r7, sp, #0
 8012af0:	60f8      	str	r0, [r7, #12]
 8012af2:	60b9      	str	r1, [r7, #8]
 8012af4:	1dbb      	adds	r3, r7, #6
 8012af6:	801a      	strh	r2, [r3, #0]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8012af8:	1dbb      	adds	r3, r7, #6
 8012afa:	881b      	ldrh	r3, [r3, #0]
 8012afc:	b2da      	uxtb	r2, r3
 8012afe:	2414      	movs	r4, #20
 8012b00:	193b      	adds	r3, r7, r4
 8012b02:	701a      	strb	r2, [r3, #0]
    buffer[1] = regval >> 8 ;
 8012b04:	1dbb      	adds	r3, r7, #6
 8012b06:	881b      	ldrh	r3, [r3, #0]
 8012b08:	0a1b      	lsrs	r3, r3, #8
 8012b0a:	b29b      	uxth	r3, r3
 8012b0c:	b2da      	uxtb	r2, r3
 8012b0e:	193b      	adds	r3, r7, r4
 8012b10:	705a      	strb	r2, [r3, #1]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	b298      	uxth	r0, r3
 8012b16:	68bb      	ldr	r3, [r7, #8]
 8012b18:	b299      	uxth	r1, r3
 8012b1a:	193b      	adds	r3, r7, r4
 8012b1c:	2202      	movs	r2, #2
 8012b1e:	f7ff feb6 	bl	801288e <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8012b22:	46c0      	nop			@ (mov r8, r8)
 8012b24:	46bd      	mov	sp, r7
 8012b26:	b007      	add	sp, #28
 8012b28:	bd90      	pop	{r4, r7, pc}

08012b2a <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8012b2a:	b580      	push	{r7, lr}
 8012b2c:	b086      	sub	sp, #24
 8012b2e:	af00      	add	r7, sp, #0
 8012b30:	60f8      	str	r0, [r7, #12]
 8012b32:	60b9      	str	r1, [r7, #8]
 8012b34:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8012b36:	2300      	movs	r3, #0
 8012b38:	617b      	str	r3, [r7, #20]
 8012b3a:	e00d      	b.n	8012b58 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	b2d9      	uxtb	r1, r3
 8012b40:	2310      	movs	r3, #16
 8012b42:	18fa      	adds	r2, r7, r3
 8012b44:	697b      	ldr	r3, [r7, #20]
 8012b46:	18d3      	adds	r3, r2, r3
 8012b48:	1c0a      	adds	r2, r1, #0
 8012b4a:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	0a1b      	lsrs	r3, r3, #8
 8012b50:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8012b52:	697b      	ldr	r3, [r7, #20]
 8012b54:	3301      	adds	r3, #1
 8012b56:	617b      	str	r3, [r7, #20]
 8012b58:	697b      	ldr	r3, [r7, #20]
 8012b5a:	2b03      	cmp	r3, #3
 8012b5c:	ddee      	ble.n	8012b3c <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	b298      	uxth	r0, r3
 8012b62:	68bb      	ldr	r3, [r7, #8]
 8012b64:	b299      	uxth	r1, r3
 8012b66:	2310      	movs	r3, #16
 8012b68:	18fb      	adds	r3, r7, r3
 8012b6a:	2204      	movs	r2, #4
 8012b6c:	f7ff fe8f 	bl	801288e <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8012b70:	46c0      	nop			@ (mov r8, r8)
 8012b72:	46bd      	mov	sp, r7
 8012b74:	b006      	add	sp, #24
 8012b76:	bd80      	pop	{r7, pc}

08012b78 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b084      	sub	sp, #16
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	0002      	movs	r2, r0
 8012b80:	1dbb      	adds	r3, r7, #6
 8012b82:	801a      	strh	r2, [r3, #0]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8012b84:	1dbb      	adds	r3, r7, #6
 8012b86:	881b      	ldrh	r3, [r3, #0]
 8012b88:	001a      	movs	r2, r3
 8012b8a:	2104      	movs	r1, #4
 8012b8c:	202d      	movs	r0, #45	@ 0x2d
 8012b8e:	f7ff ffac 	bl	8012aea <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8012b92:	2203      	movs	r2, #3
 8012b94:	2106      	movs	r1, #6
 8012b96:	202d      	movs	r0, #45	@ 0x2d
 8012b98:	f7ff ff94 	bl	8012ac4 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8012b9c:	2200      	movs	r2, #0
 8012b9e:	2106      	movs	r1, #6
 8012ba0:	202d      	movs	r0, #45	@ 0x2d
 8012ba2:	f7ff ff8f 	bl	8012ac4 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8012ba6:	210a      	movs	r1, #10
 8012ba8:	202d      	movs	r0, #45	@ 0x2d
 8012baa:	f7ff ff2d 	bl	8012a08 <dwt_read32bitoffsetreg>
 8012bae:	0003      	movs	r3, r0
 8012bb0:	60fb      	str	r3, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8012bb2:	68fb      	ldr	r3, [r7, #12]
}
 8012bb4:	0018      	movs	r0, r3
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	b004      	add	sp, #16
 8012bba:	bd80      	pop	{r7, pc}

08012bbc <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	2102      	movs	r1, #2
 8012bc4:	202c      	movs	r0, #44	@ 0x2c
 8012bc6:	f7ff ff7d 	bl	8012ac4 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8012bca:	2202      	movs	r2, #2
 8012bcc:	2102      	movs	r1, #2
 8012bce:	202c      	movs	r0, #44	@ 0x2c
 8012bd0:	f7ff ff78 	bl	8012ac4 <dwt_write8bitoffsetreg>
}
 8012bd4:	46c0      	nop			@ (mov r8, r8)
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd80      	pop	{r7, pc}
	...

08012bdc <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b082      	sub	sp, #8
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8012be4:	4b0c      	ldr	r3, [pc, #48]	@ (8012c18 <_dwt_configlde+0x3c>)
 8012be6:	226d      	movs	r2, #109	@ 0x6d
 8012be8:	0019      	movs	r1, r3
 8012bea:	202e      	movs	r0, #46	@ 0x2e
 8012bec:	f7ff ff6a 	bl	8012ac4 <dwt_write8bitoffsetreg>

    if(prfIndex)
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d006      	beq.n	8012c04 <_dwt_configlde+0x28>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8012bf6:	4a09      	ldr	r2, [pc, #36]	@ (8012c1c <_dwt_configlde+0x40>)
 8012bf8:	4b09      	ldr	r3, [pc, #36]	@ (8012c20 <_dwt_configlde+0x44>)
 8012bfa:	0019      	movs	r1, r3
 8012bfc:	202e      	movs	r0, #46	@ 0x2e
 8012bfe:	f7ff ff74 	bl	8012aea <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8012c02:	e005      	b.n	8012c10 <_dwt_configlde+0x34>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8012c04:	4a07      	ldr	r2, [pc, #28]	@ (8012c24 <_dwt_configlde+0x48>)
 8012c06:	4b06      	ldr	r3, [pc, #24]	@ (8012c20 <_dwt_configlde+0x44>)
 8012c08:	0019      	movs	r1, r3
 8012c0a:	202e      	movs	r0, #46	@ 0x2e
 8012c0c:	f7ff ff6d 	bl	8012aea <dwt_write16bitoffsetreg>
}
 8012c10:	46c0      	nop			@ (mov r8, r8)
 8012c12:	46bd      	mov	sp, r7
 8012c14:	b002      	add	sp, #8
 8012c16:	bd80      	pop	{r7, pc}
 8012c18:	00000806 	.word	0x00000806
 8012c1c:	00000607 	.word	0x00000607
 8012c20:	00001806 	.word	0x00001806
 8012c24:	00001607 	.word	0x00001607

08012c28 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8012c2c:	200e      	movs	r0, #14
 8012c2e:	f000 f861 	bl	8012cf4 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8012c32:	2380      	movs	r3, #128	@ 0x80
 8012c34:	021b      	lsls	r3, r3, #8
 8012c36:	001a      	movs	r2, r3
 8012c38:	2106      	movs	r1, #6
 8012c3a:	202d      	movs	r0, #45	@ 0x2d
 8012c3c:	f7ff ff55 	bl	8012aea <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8012c40:	2001      	movs	r0, #1
 8012c42:	f000 facc 	bl	80131de <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8012c46:	2001      	movs	r0, #1
 8012c48:	f000 f854 	bl	8012cf4 <_dwt_enableclocks>
}
 8012c4c:	46c0      	nop			@ (mov r8, r8)
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	bd80      	pop	{r7, pc}
	...

08012c54 <dwt_setdblrxbuffmode>:
 * output parameters
 *
 * no return value
 */
void dwt_setdblrxbuffmode(int enable)
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b082      	sub	sp, #8
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
    if(enable)
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d00c      	beq.n	8012c7c <dwt_setdblrxbuffmode+0x28>
    {
        // Enable double RX buffer mode
        pdw1000local->sysCFGreg &= ~SYS_CFG_DIS_DRXB;
 8012c62:	4b13      	ldr	r3, [pc, #76]	@ (8012cb0 <dwt_setdblrxbuffmode+0x5c>)
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	691a      	ldr	r2, [r3, #16]
 8012c68:	4b11      	ldr	r3, [pc, #68]	@ (8012cb0 <dwt_setdblrxbuffmode+0x5c>)
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	4911      	ldr	r1, [pc, #68]	@ (8012cb4 <dwt_setdblrxbuffmode+0x60>)
 8012c6e:	400a      	ands	r2, r1
 8012c70:	611a      	str	r2, [r3, #16]
        pdw1000local->dblbuffon = 1;
 8012c72:	4b0f      	ldr	r3, [pc, #60]	@ (8012cb0 <dwt_setdblrxbuffmode+0x5c>)
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	2201      	movs	r2, #1
 8012c78:	751a      	strb	r2, [r3, #20]
 8012c7a:	e00c      	b.n	8012c96 <dwt_setdblrxbuffmode+0x42>
    }
    else
    {
        // Disable double RX buffer mode
        pdw1000local->sysCFGreg |= SYS_CFG_DIS_DRXB;
 8012c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8012cb0 <dwt_setdblrxbuffmode+0x5c>)
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	691a      	ldr	r2, [r3, #16]
 8012c82:	4b0b      	ldr	r3, [pc, #44]	@ (8012cb0 <dwt_setdblrxbuffmode+0x5c>)
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	2180      	movs	r1, #128	@ 0x80
 8012c88:	0149      	lsls	r1, r1, #5
 8012c8a:	430a      	orrs	r2, r1
 8012c8c:	611a      	str	r2, [r3, #16]
        pdw1000local->dblbuffon = 0;
 8012c8e:	4b08      	ldr	r3, [pc, #32]	@ (8012cb0 <dwt_setdblrxbuffmode+0x5c>)
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	2200      	movs	r2, #0
 8012c94:	751a      	strb	r2, [r3, #20]
    }

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 8012c96:	4b06      	ldr	r3, [pc, #24]	@ (8012cb0 <dwt_setdblrxbuffmode+0x5c>)
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	691b      	ldr	r3, [r3, #16]
 8012c9c:	001a      	movs	r2, r3
 8012c9e:	2100      	movs	r1, #0
 8012ca0:	2004      	movs	r0, #4
 8012ca2:	f7ff ff42 	bl	8012b2a <dwt_write32bitoffsetreg>
}
 8012ca6:	46c0      	nop			@ (mov r8, r8)
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	b002      	add	sp, #8
 8012cac:	bd80      	pop	{r7, pc}
 8012cae:	46c0      	nop			@ (mov r8, r8)
 8012cb0:	200001fc 	.word	0x200001fc
 8012cb4:	ffffefff 	.word	0xffffefff

08012cb8 <dwt_setrxaftertxdelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32 rxDelayTime)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b084      	sub	sp, #16
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 8012cc0:	2100      	movs	r1, #0
 8012cc2:	201a      	movs	r0, #26
 8012cc4:	f7ff fea0 	bl	8012a08 <dwt_read32bitoffsetreg>
 8012cc8:	0003      	movs	r3, r0
 8012cca:	60fb      	str	r3, [r7, #12]

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	0d1b      	lsrs	r3, r3, #20
 8012cd0:	051b      	lsls	r3, r3, #20
 8012cd2:	60fb      	str	r3, [r7, #12]

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	031b      	lsls	r3, r3, #12
 8012cd8:	0b1b      	lsrs	r3, r3, #12
 8012cda:	68fa      	ldr	r2, [r7, #12]
 8012cdc:	4313      	orrs	r3, r2
 8012cde:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	001a      	movs	r2, r3
 8012ce4:	2100      	movs	r1, #0
 8012ce6:	201a      	movs	r0, #26
 8012ce8:	f7ff ff1f 	bl	8012b2a <dwt_write32bitoffsetreg>
}
 8012cec:	46c0      	nop			@ (mov r8, r8)
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	b004      	add	sp, #16
 8012cf2:	bd80      	pop	{r7, pc}

08012cf4 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8012cf4:	b590      	push	{r4, r7, lr}
 8012cf6:	b085      	sub	sp, #20
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8012cfc:	230c      	movs	r3, #12
 8012cfe:	18fb      	adds	r3, r7, r3
 8012d00:	2202      	movs	r2, #2
 8012d02:	2100      	movs	r1, #0
 8012d04:	2036      	movs	r0, #54	@ 0x36
 8012d06:	f7ff fe23 	bl	8012950 <dwt_readfromdevice>
    switch(clocks)
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	2b0e      	cmp	r3, #14
 8012d0e:	d900      	bls.n	8012d12 <_dwt_enableclocks+0x1e>
 8012d10:	e07b      	b.n	8012e0a <_dwt_enableclocks+0x116>
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	009a      	lsls	r2, r3, #2
 8012d16:	4b46      	ldr	r3, [pc, #280]	@ (8012e30 <_dwt_enableclocks+0x13c>)
 8012d18:	18d3      	adds	r3, r2, r3
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	469f      	mov	pc, r3
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8012d1e:	210c      	movs	r1, #12
 8012d20:	187b      	adds	r3, r7, r1
 8012d22:	2200      	movs	r2, #0
 8012d24:	701a      	strb	r2, [r3, #0]
            reg[1] = reg[1] & 0xfe;
 8012d26:	187b      	adds	r3, r7, r1
 8012d28:	785b      	ldrb	r3, [r3, #1]
 8012d2a:	2201      	movs	r2, #1
 8012d2c:	4393      	bics	r3, r2
 8012d2e:	b2da      	uxtb	r2, r3
 8012d30:	187b      	adds	r3, r7, r1
 8012d32:	705a      	strb	r2, [r3, #1]
        }
        break;
 8012d34:	e06a      	b.n	8012e0c <_dwt_enableclocks+0x118>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8012d36:	210c      	movs	r1, #12
 8012d38:	187b      	adds	r3, r7, r1
 8012d3a:	781b      	ldrb	r3, [r3, #0]
 8012d3c:	b25b      	sxtb	r3, r3
 8012d3e:	2203      	movs	r2, #3
 8012d40:	4393      	bics	r3, r2
 8012d42:	b25b      	sxtb	r3, r3
 8012d44:	2201      	movs	r2, #1
 8012d46:	4313      	orrs	r3, r2
 8012d48:	b25b      	sxtb	r3, r3
 8012d4a:	b2da      	uxtb	r2, r3
 8012d4c:	187b      	adds	r3, r7, r1
 8012d4e:	701a      	strb	r2, [r3, #0]
        }
        break;
 8012d50:	e05c      	b.n	8012e0c <_dwt_enableclocks+0x118>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8012d52:	210c      	movs	r1, #12
 8012d54:	187b      	adds	r3, r7, r1
 8012d56:	781b      	ldrb	r3, [r3, #0]
 8012d58:	b25b      	sxtb	r3, r3
 8012d5a:	2203      	movs	r2, #3
 8012d5c:	4393      	bics	r3, r2
 8012d5e:	b25b      	sxtb	r3, r3
 8012d60:	2202      	movs	r2, #2
 8012d62:	4313      	orrs	r3, r2
 8012d64:	b25b      	sxtb	r3, r3
 8012d66:	b2da      	uxtb	r2, r3
 8012d68:	187b      	adds	r3, r7, r1
 8012d6a:	701a      	strb	r2, [r3, #0]
        }
        break;
 8012d6c:	e04e      	b.n	8012e0c <_dwt_enableclocks+0x118>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8012d6e:	210c      	movs	r1, #12
 8012d70:	187b      	adds	r3, r7, r1
 8012d72:	781b      	ldrb	r3, [r3, #0]
 8012d74:	b25b      	sxtb	r3, r3
 8012d76:	224c      	movs	r2, #76	@ 0x4c
 8012d78:	4393      	bics	r3, r2
 8012d7a:	b25b      	sxtb	r3, r3
 8012d7c:	2248      	movs	r2, #72	@ 0x48
 8012d7e:	4313      	orrs	r3, r2
 8012d80:	b25b      	sxtb	r3, r3
 8012d82:	b2da      	uxtb	r2, r3
 8012d84:	187b      	adds	r3, r7, r1
 8012d86:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x80 | reg[1];
 8012d88:	187b      	adds	r3, r7, r1
 8012d8a:	785b      	ldrb	r3, [r3, #1]
 8012d8c:	2280      	movs	r2, #128	@ 0x80
 8012d8e:	4252      	negs	r2, r2
 8012d90:	4313      	orrs	r3, r2
 8012d92:	b2da      	uxtb	r2, r3
 8012d94:	187b      	adds	r3, r7, r1
 8012d96:	705a      	strb	r2, [r3, #1]
        }
        break;
 8012d98:	e038      	b.n	8012e0c <_dwt_enableclocks+0x118>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8012d9a:	210c      	movs	r1, #12
 8012d9c:	187b      	adds	r3, r7, r1
 8012d9e:	781b      	ldrb	r3, [r3, #0]
 8012da0:	224c      	movs	r2, #76	@ 0x4c
 8012da2:	4393      	bics	r3, r2
 8012da4:	b2da      	uxtb	r2, r3
 8012da6:	187b      	adds	r3, r7, r1
 8012da8:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x7f & reg[1];
 8012daa:	187b      	adds	r3, r7, r1
 8012dac:	785b      	ldrb	r3, [r3, #1]
 8012dae:	227f      	movs	r2, #127	@ 0x7f
 8012db0:	4013      	ands	r3, r2
 8012db2:	b2da      	uxtb	r2, r3
 8012db4:	187b      	adds	r3, r7, r1
 8012db6:	705a      	strb	r2, [r3, #1]
        }
        break;
 8012db8:	e028      	b.n	8012e0c <_dwt_enableclocks+0x118>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8012dba:	210c      	movs	r1, #12
 8012dbc:	187b      	adds	r3, r7, r1
 8012dbe:	785b      	ldrb	r3, [r3, #1]
 8012dc0:	2202      	movs	r2, #2
 8012dc2:	4313      	orrs	r3, r2
 8012dc4:	b2da      	uxtb	r2, r3
 8012dc6:	187b      	adds	r3, r7, r1
 8012dc8:	705a      	strb	r2, [r3, #1]
        }
        break;
 8012dca:	e01f      	b.n	8012e0c <_dwt_enableclocks+0x118>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8012dcc:	210c      	movs	r1, #12
 8012dce:	187b      	adds	r3, r7, r1
 8012dd0:	785b      	ldrb	r3, [r3, #1]
 8012dd2:	2202      	movs	r2, #2
 8012dd4:	4393      	bics	r3, r2
 8012dd6:	b2da      	uxtb	r2, r3
 8012dd8:	187b      	adds	r3, r7, r1
 8012dda:	705a      	strb	r2, [r3, #1]
        }
        break;
 8012ddc:	e016      	b.n	8012e0c <_dwt_enableclocks+0x118>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8012dde:	210c      	movs	r1, #12
 8012de0:	187b      	adds	r3, r7, r1
 8012de2:	781b      	ldrb	r3, [r3, #0]
 8012de4:	b25b      	sxtb	r3, r3
 8012de6:	2230      	movs	r2, #48	@ 0x30
 8012de8:	4393      	bics	r3, r2
 8012dea:	b25b      	sxtb	r3, r3
 8012dec:	2220      	movs	r2, #32
 8012dee:	4313      	orrs	r3, r2
 8012df0:	b25b      	sxtb	r3, r3
 8012df2:	b2da      	uxtb	r2, r3
 8012df4:	187b      	adds	r3, r7, r1
 8012df6:	701a      	strb	r2, [r3, #0]
        }
        break;
 8012df8:	e008      	b.n	8012e0c <_dwt_enableclocks+0x118>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8012dfa:	210c      	movs	r1, #12
 8012dfc:	187b      	adds	r3, r7, r1
 8012dfe:	2201      	movs	r2, #1
 8012e00:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x03;
 8012e02:	187b      	adds	r3, r7, r1
 8012e04:	2203      	movs	r2, #3
 8012e06:	705a      	strb	r2, [r3, #1]
        }
        break;
 8012e08:	e000      	b.n	8012e0c <_dwt_enableclocks+0x118>
        default:
        break;
 8012e0a:	46c0      	nop			@ (mov r8, r8)
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8012e0c:	240c      	movs	r4, #12
 8012e0e:	193b      	adds	r3, r7, r4
 8012e10:	2201      	movs	r2, #1
 8012e12:	2100      	movs	r1, #0
 8012e14:	2036      	movs	r0, #54	@ 0x36
 8012e16:	f7ff fd3a 	bl	801288e <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8012e1a:	193b      	adds	r3, r7, r4
 8012e1c:	3301      	adds	r3, #1
 8012e1e:	2201      	movs	r2, #1
 8012e20:	2101      	movs	r1, #1
 8012e22:	2036      	movs	r0, #54	@ 0x36
 8012e24:	f7ff fd33 	bl	801288e <dwt_writetodevice>

} // end _dwt_enableclocks()
 8012e28:	46c0      	nop			@ (mov r8, r8)
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	b005      	add	sp, #20
 8012e2e:	bd90      	pop	{r4, r7, pc}
 8012e30:	08019e80 	.word	0x08019e80

08012e34 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8012e34:	b580      	push	{r7, lr}
 8012e36:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8012e38:	2000      	movs	r0, #0
 8012e3a:	f7ff ff5b 	bl	8012cf4 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8012e3e:	2200      	movs	r2, #0
 8012e40:	2104      	movs	r1, #4
 8012e42:	2036      	movs	r0, #54	@ 0x36
 8012e44:	f7ff fe51 	bl	8012aea <dwt_write16bitoffsetreg>
}
 8012e48:	46c0      	nop			@ (mov r8, r8)
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	bd80      	pop	{r7, pc}

08012e4e <dwt_setdelayedtrxtime>:
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32 starttime)
{
 8012e4e:	b580      	push	{r7, lr}
 8012e50:	b082      	sub	sp, #8
 8012e52:	af00      	add	r7, sp, #0
 8012e54:	6078      	str	r0, [r7, #4]
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	001a      	movs	r2, r3
 8012e5a:	2101      	movs	r1, #1
 8012e5c:	200a      	movs	r0, #10
 8012e5e:	f7ff fe64 	bl	8012b2a <dwt_write32bitoffsetreg>

} // end dwt_setdelayedtrxtime()
 8012e62:	46c0      	nop			@ (mov r8, r8)
 8012e64:	46bd      	mov	sp, r7
 8012e66:	b002      	add	sp, #8
 8012e68:	bd80      	pop	{r7, pc}
	...

08012e6c <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8012e6c:	b5b0      	push	{r4, r5, r7, lr}
 8012e6e:	b084      	sub	sp, #16
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	0002      	movs	r2, r0
 8012e74:	1dfb      	adds	r3, r7, #7
 8012e76:	701a      	strb	r2, [r3, #0]
    int retval = DWT_SUCCESS ;
 8012e78:	2300      	movs	r3, #0
 8012e7a:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 8012e7c:	210b      	movs	r1, #11
 8012e7e:	187b      	adds	r3, r7, r1
 8012e80:	2200      	movs	r2, #0
 8012e82:	701a      	strb	r2, [r3, #0]
    uint16 checkTxOK = 0 ;
 8012e84:	2308      	movs	r3, #8
 8012e86:	18fb      	adds	r3, r7, r3
 8012e88:	2200      	movs	r2, #0
 8012e8a:	801a      	strh	r2, [r3, #0]

    if(mode & DWT_RESPONSE_EXPECTED)
 8012e8c:	1dfb      	adds	r3, r7, #7
 8012e8e:	781b      	ldrb	r3, [r3, #0]
 8012e90:	2202      	movs	r2, #2
 8012e92:	4013      	ands	r3, r2
 8012e94:	d006      	beq.n	8012ea4 <dwt_starttx+0x38>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8012e96:	187b      	adds	r3, r7, r1
 8012e98:	2280      	movs	r2, #128	@ 0x80
 8012e9a:	701a      	strb	r2, [r3, #0]
        pdw1000local->wait4resp = 1;
 8012e9c:	4b21      	ldr	r3, [pc, #132]	@ (8012f24 <dwt_starttx+0xb8>)
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	2201      	movs	r2, #1
 8012ea2:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 8012ea4:	1dfb      	adds	r3, r7, #7
 8012ea6:	781b      	ldrb	r3, [r3, #0]
 8012ea8:	2201      	movs	r2, #1
 8012eaa:	4013      	ands	r3, r2
 8012eac:	d027      	beq.n	8012efe <dwt_starttx+0x92>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8012eae:	200b      	movs	r0, #11
 8012eb0:	183b      	adds	r3, r7, r0
 8012eb2:	183a      	adds	r2, r7, r0
 8012eb4:	7812      	ldrb	r2, [r2, #0]
 8012eb6:	2106      	movs	r1, #6
 8012eb8:	430a      	orrs	r2, r1
 8012eba:	701a      	strb	r2, [r3, #0]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8012ebc:	183b      	adds	r3, r7, r0
 8012ebe:	781b      	ldrb	r3, [r3, #0]
 8012ec0:	001a      	movs	r2, r3
 8012ec2:	2100      	movs	r1, #0
 8012ec4:	200d      	movs	r0, #13
 8012ec6:	f7ff fdfd 	bl	8012ac4 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 8012eca:	2508      	movs	r5, #8
 8012ecc:	197c      	adds	r4, r7, r5
 8012ece:	2103      	movs	r1, #3
 8012ed0:	200f      	movs	r0, #15
 8012ed2:	f7ff fdc0 	bl	8012a56 <dwt_read16bitoffsetreg>
 8012ed6:	0003      	movs	r3, r0
 8012ed8:	8023      	strh	r3, [r4, #0]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8012eda:	197b      	adds	r3, r7, r5
 8012edc:	881a      	ldrh	r2, [r3, #0]
 8012ede:	2381      	movs	r3, #129	@ 0x81
 8012ee0:	00db      	lsls	r3, r3, #3
 8012ee2:	4013      	ands	r3, r2
 8012ee4:	d102      	bne.n	8012eec <dwt_starttx+0x80>
        {
            retval = DWT_SUCCESS ; // All okay
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	60fb      	str	r3, [r7, #12]
 8012eea:	e016      	b.n	8012f1a <dwt_starttx+0xae>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 8012eec:	2240      	movs	r2, #64	@ 0x40
 8012eee:	2100      	movs	r1, #0
 8012ef0:	200d      	movs	r0, #13
 8012ef2:	f7ff fde7 	bl	8012ac4 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 8012ef6:	2301      	movs	r3, #1
 8012ef8:	425b      	negs	r3, r3
 8012efa:	60fb      	str	r3, [r7, #12]
 8012efc:	e00d      	b.n	8012f1a <dwt_starttx+0xae>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 8012efe:	200b      	movs	r0, #11
 8012f00:	183b      	adds	r3, r7, r0
 8012f02:	183a      	adds	r2, r7, r0
 8012f04:	7812      	ldrb	r2, [r2, #0]
 8012f06:	2102      	movs	r1, #2
 8012f08:	430a      	orrs	r2, r1
 8012f0a:	701a      	strb	r2, [r3, #0]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8012f0c:	183b      	adds	r3, r7, r0
 8012f0e:	781b      	ldrb	r3, [r3, #0]
 8012f10:	001a      	movs	r2, r3
 8012f12:	2100      	movs	r1, #0
 8012f14:	200d      	movs	r0, #13
 8012f16:	f7ff fdd5 	bl	8012ac4 <dwt_write8bitoffsetreg>
    }

    return retval;
 8012f1a:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 8012f1c:	0018      	movs	r0, r3
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	b004      	add	sp, #16
 8012f22:	bdb0      	pop	{r4, r5, r7, pc}
 8012f24:	200001fc 	.word	0x200001fc

08012f28 <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b082      	sub	sp, #8
 8012f2c:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 8012f2e:	2100      	movs	r1, #0
 8012f30:	200e      	movs	r0, #14
 8012f32:	f7ff fd69 	bl	8012a08 <dwt_read32bitoffsetreg>
 8012f36:	0003      	movs	r3, r0
 8012f38:	607b      	str	r3, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 8012f3a:	f000 f932 	bl	80131a2 <decamutexon>
 8012f3e:	0003      	movs	r3, r0
 8012f40:	603b      	str	r3, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 8012f42:	2200      	movs	r2, #0
 8012f44:	2100      	movs	r1, #0
 8012f46:	200e      	movs	r0, #14
 8012f48:	f7ff fdef 	bl	8012b2a <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 8012f4c:	2240      	movs	r2, #64	@ 0x40
 8012f4e:	2100      	movs	r1, #0
 8012f50:	200d      	movs	r0, #13
 8012f52:	f7ff fdb7 	bl	8012ac4 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 8012f56:	4b0d      	ldr	r3, [pc, #52]	@ (8012f8c <dwt_forcetrxoff+0x64>)
 8012f58:	001a      	movs	r2, r3
 8012f5a:	2100      	movs	r1, #0
 8012f5c:	200f      	movs	r0, #15
 8012f5e:	f7ff fde4 	bl	8012b2a <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 8012f62:	f000 f817 	bl	8012f94 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	001a      	movs	r2, r3
 8012f6a:	2100      	movs	r1, #0
 8012f6c:	200e      	movs	r0, #14
 8012f6e:	f7ff fddc 	bl	8012b2a <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 8012f72:	683b      	ldr	r3, [r7, #0]
 8012f74:	0018      	movs	r0, r3
 8012f76:	f000 f925 	bl	80131c4 <decamutexoff>
    pdw1000local->wait4resp = 0;
 8012f7a:	4b05      	ldr	r3, [pc, #20]	@ (8012f90 <dwt_forcetrxoff+0x68>)
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	2200      	movs	r2, #0
 8012f80:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 8012f82:	46c0      	nop			@ (mov r8, r8)
 8012f84:	46bd      	mov	sp, r7
 8012f86:	b002      	add	sp, #8
 8012f88:	bd80      	pop	{r7, pc}
 8012f8a:	46c0      	nop			@ (mov r8, r8)
 8012f8c:	2427fff8 	.word	0x2427fff8
 8012f90:	200001fc 	.word	0x200001fc

08012f94 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 8012f94:	b590      	push	{r4, r7, lr}
 8012f96:	b083      	sub	sp, #12
 8012f98:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8012f9a:	1dfc      	adds	r4, r7, #7
 8012f9c:	2103      	movs	r1, #3
 8012f9e:	200f      	movs	r0, #15
 8012fa0:	f7ff fd7c 	bl	8012a9c <dwt_read8bitoffsetreg>
 8012fa4:	0003      	movs	r3, r0
 8012fa6:	7023      	strb	r3, [r4, #0]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8012fa8:	1dfb      	adds	r3, r7, #7
 8012faa:	781a      	ldrb	r2, [r3, #0]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8012fac:	1dfb      	adds	r3, r7, #7
 8012fae:	781b      	ldrb	r3, [r3, #0]
 8012fb0:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8012fb2:	4053      	eors	r3, r2
 8012fb4:	2280      	movs	r2, #128	@ 0x80
 8012fb6:	4013      	ands	r3, r2
 8012fb8:	d004      	beq.n	8012fc4 <dwt_syncrxbufptrs+0x30>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8012fba:	2201      	movs	r2, #1
 8012fbc:	2103      	movs	r1, #3
 8012fbe:	200d      	movs	r0, #13
 8012fc0:	f7ff fd80 	bl	8012ac4 <dwt_write8bitoffsetreg>
    }
}
 8012fc4:	46c0      	nop			@ (mov r8, r8)
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	b003      	add	sp, #12
 8012fca:	bd90      	pop	{r4, r7, pc}

08012fcc <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 8012fcc:	b5b0      	push	{r4, r5, r7, lr}
 8012fce:	b084      	sub	sp, #16
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	2204      	movs	r2, #4
 8012fd8:	4013      	ands	r3, r2
 8012fda:	d101      	bne.n	8012fe0 <dwt_rxenable+0x14>
    {
        dwt_syncrxbufptrs();
 8012fdc:	f7ff ffda 	bl	8012f94 <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 8012fe0:	210e      	movs	r1, #14
 8012fe2:	187b      	adds	r3, r7, r1
 8012fe4:	2280      	movs	r2, #128	@ 0x80
 8012fe6:	0052      	lsls	r2, r2, #1
 8012fe8:	801a      	strh	r2, [r3, #0]

    if (mode & DWT_START_RX_DELAYED)
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	2201      	movs	r2, #1
 8012fee:	4013      	ands	r3, r2
 8012ff0:	d006      	beq.n	8013000 <dwt_rxenable+0x34>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 8012ff2:	187b      	adds	r3, r7, r1
 8012ff4:	187a      	adds	r2, r7, r1
 8012ff6:	8812      	ldrh	r2, [r2, #0]
 8012ff8:	2180      	movs	r1, #128	@ 0x80
 8012ffa:	0089      	lsls	r1, r1, #2
 8012ffc:	430a      	orrs	r2, r1
 8012ffe:	801a      	strh	r2, [r3, #0]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8013000:	230e      	movs	r3, #14
 8013002:	18fb      	adds	r3, r7, r3
 8013004:	881b      	ldrh	r3, [r3, #0]
 8013006:	001a      	movs	r2, r3
 8013008:	2100      	movs	r1, #0
 801300a:	200d      	movs	r0, #13
 801300c:	f7ff fd6d 	bl	8012aea <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	2201      	movs	r2, #1
 8013014:	4013      	ands	r3, r2
 8013016:	d01c      	beq.n	8013052 <dwt_rxenable+0x86>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8013018:	250d      	movs	r5, #13
 801301a:	197c      	adds	r4, r7, r5
 801301c:	2103      	movs	r1, #3
 801301e:	200f      	movs	r0, #15
 8013020:	f7ff fd3c 	bl	8012a9c <dwt_read8bitoffsetreg>
 8013024:	0003      	movs	r3, r0
 8013026:	7023      	strb	r3, [r4, #0]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 8013028:	197b      	adds	r3, r7, r5
 801302a:	781b      	ldrb	r3, [r3, #0]
 801302c:	2208      	movs	r2, #8
 801302e:	4013      	ands	r3, r2
 8013030:	d00f      	beq.n	8013052 <dwt_rxenable+0x86>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 8013032:	f7ff ff79 	bl	8012f28 <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	2202      	movs	r2, #2
 801303a:	4013      	ands	r3, r2
 801303c:	d106      	bne.n	801304c <dwt_rxenable+0x80>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 801303e:	2380      	movs	r3, #128	@ 0x80
 8013040:	005b      	lsls	r3, r3, #1
 8013042:	001a      	movs	r2, r3
 8013044:	2100      	movs	r1, #0
 8013046:	200d      	movs	r0, #13
 8013048:	f7ff fd4f 	bl	8012aea <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 801304c:	2301      	movs	r3, #1
 801304e:	425b      	negs	r3, r3
 8013050:	e000      	b.n	8013054 <dwt_rxenable+0x88>
        }
    }

    return DWT_SUCCESS;
 8013052:	2300      	movs	r3, #0
} // end dwt_rxenable()
 8013054:	0018      	movs	r0, r3
 8013056:	46bd      	mov	sp, r7
 8013058:	b004      	add	sp, #16
 801305a:	bdb0      	pop	{r4, r5, r7, pc}

0801305c <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 801305c:	b5b0      	push	{r4, r5, r7, lr}
 801305e:	b084      	sub	sp, #16
 8013060:	af00      	add	r7, sp, #0
 8013062:	0002      	movs	r2, r0
 8013064:	1dbb      	adds	r3, r7, #6
 8013066:	801a      	strh	r2, [r3, #0]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 8013068:	250f      	movs	r5, #15
 801306a:	197c      	adds	r4, r7, r5
 801306c:	2103      	movs	r1, #3
 801306e:	2004      	movs	r0, #4
 8013070:	f7ff fd14 	bl	8012a9c <dwt_read8bitoffsetreg>
 8013074:	0003      	movs	r3, r0
 8013076:	7023      	strb	r3, [r4, #0]

    if(time > 0)
 8013078:	1dbb      	adds	r3, r7, #6
 801307a:	881b      	ldrh	r3, [r3, #0]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d01e      	beq.n	80130be <dwt_setrxtimeout+0x62>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 8013080:	1dbb      	adds	r3, r7, #6
 8013082:	881b      	ldrh	r3, [r3, #0]
 8013084:	001a      	movs	r2, r3
 8013086:	2100      	movs	r1, #0
 8013088:	200c      	movs	r0, #12
 801308a:	f7ff fd2e 	bl	8012aea <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 801308e:	0028      	movs	r0, r5
 8013090:	183b      	adds	r3, r7, r0
 8013092:	183a      	adds	r2, r7, r0
 8013094:	7812      	ldrb	r2, [r2, #0]
 8013096:	2110      	movs	r1, #16
 8013098:	430a      	orrs	r2, r1
 801309a:	701a      	strb	r2, [r3, #0]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 801309c:	4b15      	ldr	r3, [pc, #84]	@ (80130f4 <dwt_setrxtimeout+0x98>)
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	691a      	ldr	r2, [r3, #16]
 80130a2:	4b14      	ldr	r3, [pc, #80]	@ (80130f4 <dwt_setrxtimeout+0x98>)
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	2180      	movs	r1, #128	@ 0x80
 80130a8:	0549      	lsls	r1, r1, #21
 80130aa:	430a      	orrs	r2, r1
 80130ac:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 80130ae:	183b      	adds	r3, r7, r0
 80130b0:	781b      	ldrb	r3, [r3, #0]
 80130b2:	001a      	movs	r2, r3
 80130b4:	2103      	movs	r1, #3
 80130b6:	2004      	movs	r0, #4
 80130b8:	f7ff fd04 	bl	8012ac4 <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 80130bc:	e015      	b.n	80130ea <dwt_setrxtimeout+0x8e>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 80130be:	200f      	movs	r0, #15
 80130c0:	183b      	adds	r3, r7, r0
 80130c2:	183a      	adds	r2, r7, r0
 80130c4:	7812      	ldrb	r2, [r2, #0]
 80130c6:	2110      	movs	r1, #16
 80130c8:	438a      	bics	r2, r1
 80130ca:	701a      	strb	r2, [r3, #0]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 80130cc:	4b09      	ldr	r3, [pc, #36]	@ (80130f4 <dwt_setrxtimeout+0x98>)
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	691a      	ldr	r2, [r3, #16]
 80130d2:	4b08      	ldr	r3, [pc, #32]	@ (80130f4 <dwt_setrxtimeout+0x98>)
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	4908      	ldr	r1, [pc, #32]	@ (80130f8 <dwt_setrxtimeout+0x9c>)
 80130d8:	400a      	ands	r2, r1
 80130da:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 80130dc:	183b      	adds	r3, r7, r0
 80130de:	781b      	ldrb	r3, [r3, #0]
 80130e0:	001a      	movs	r2, r3
 80130e2:	2103      	movs	r1, #3
 80130e4:	2004      	movs	r0, #4
 80130e6:	f7ff fced 	bl	8012ac4 <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 80130ea:	46c0      	nop			@ (mov r8, r8)
 80130ec:	46bd      	mov	sp, r7
 80130ee:	b004      	add	sp, #16
 80130f0:	bdb0      	pop	{r4, r5, r7, pc}
 80130f2:	46c0      	nop			@ (mov r8, r8)
 80130f4:	200001fc 	.word	0x200001fc
 80130f8:	efffffff 	.word	0xefffffff

080130fc <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	af00      	add	r7, sp, #0
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 8013100:	22e0      	movs	r2, #224	@ 0xe0
 8013102:	2103      	movs	r1, #3
 8013104:	2036      	movs	r0, #54	@ 0x36
 8013106:	f7ff fcdd 	bl	8012ac4 <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 801310a:	22f0      	movs	r2, #240	@ 0xf0
 801310c:	2103      	movs	r1, #3
 801310e:	2036      	movs	r0, #54	@ 0x36
 8013110:	f7ff fcd8 	bl	8012ac4 <dwt_write8bitoffsetreg>
}
 8013114:	46c0      	nop			@ (mov r8, r8)
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}
	...

0801311c <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 801311c:	b580      	push	{r7, lr}
 801311e:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8013120:	f7ff fe88 	bl	8012e34 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8013124:	2200      	movs	r2, #0
 8013126:	2100      	movs	r1, #0
 8013128:	202c      	movs	r0, #44	@ 0x2c
 801312a:	f7ff fcde 	bl	8012aea <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 801312e:	2200      	movs	r2, #0
 8013130:	2106      	movs	r1, #6
 8013132:	202c      	movs	r0, #44	@ 0x2c
 8013134:	f7ff fcc6 	bl	8012ac4 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8013138:	f7ff fd40 	bl	8012bbc <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 801313c:	2200      	movs	r2, #0
 801313e:	2103      	movs	r1, #3
 8013140:	2036      	movs	r0, #54	@ 0x36
 8013142:	f7ff fcbf 	bl	8012ac4 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8013146:	2001      	movs	r0, #1
 8013148:	f000 f849 	bl	80131de <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 801314c:	22f0      	movs	r2, #240	@ 0xf0
 801314e:	2103      	movs	r1, #3
 8013150:	2036      	movs	r0, #54	@ 0x36
 8013152:	f7ff fcb7 	bl	8012ac4 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8013156:	4b03      	ldr	r3, [pc, #12]	@ (8013164 <dwt_softreset+0x48>)
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	2200      	movs	r2, #0
 801315c:	755a      	strb	r2, [r3, #21]
}
 801315e:	46c0      	nop			@ (mov r8, r8)
 8013160:	46bd      	mov	sp, r7
 8013162:	bd80      	pop	{r7, pc}
 8013164:	200001fc 	.word	0x200001fc

08013168 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b084      	sub	sp, #16
 801316c:	af00      	add	r7, sp, #0
 801316e:	0002      	movs	r2, r0
 8013170:	1dfb      	adds	r3, r7, #7
 8013172:	701a      	strb	r2, [r3, #0]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8013174:	1dfb      	adds	r3, r7, #7
 8013176:	781b      	ldrb	r3, [r3, #0]
 8013178:	b25b      	sxtb	r3, r3
 801317a:	221f      	movs	r2, #31
 801317c:	4013      	ands	r3, r2
 801317e:	b25b      	sxtb	r3, r3
 8013180:	2260      	movs	r2, #96	@ 0x60
 8013182:	4313      	orrs	r3, r2
 8013184:	b25a      	sxtb	r2, r3
 8013186:	210f      	movs	r1, #15
 8013188:	187b      	adds	r3, r7, r1
 801318a:	701a      	strb	r2, [r3, #0]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 801318c:	187b      	adds	r3, r7, r1
 801318e:	781b      	ldrb	r3, [r3, #0]
 8013190:	001a      	movs	r2, r3
 8013192:	210e      	movs	r1, #14
 8013194:	202b      	movs	r0, #43	@ 0x2b
 8013196:	f7ff fc95 	bl	8012ac4 <dwt_write8bitoffsetreg>
}
 801319a:	46c0      	nop			@ (mov r8, r8)
 801319c:	46bd      	mov	sp, r7
 801319e:	b004      	add	sp, #16
 80131a0:	bd80      	pop	{r7, pc}

080131a2 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 80131a2:	b580      	push	{r7, lr}
 80131a4:	b082      	sub	sp, #8
 80131a6:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 80131a8:	f000 f9e2 	bl	8013570 <port_GetEXT_IRQStatus>
 80131ac:	0003      	movs	r3, r0
 80131ae:	607b      	str	r3, [r7, #4]

	if(s) {
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d001      	beq.n	80131ba <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 80131b6:	f000 f9cb 	bl	8013550 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 80131ba:	687b      	ldr	r3, [r7, #4]
}
 80131bc:	0018      	movs	r0, r3
 80131be:	46bd      	mov	sp, r7
 80131c0:	b002      	add	sp, #8
 80131c2:	bd80      	pop	{r7, pc}

080131c4 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b082      	sub	sp, #8
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d001      	beq.n	80131d6 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 80131d2:	f000 f9c5 	bl	8013560 <port_EnableEXT_IRQ>
	}
}
 80131d6:	46c0      	nop			@ (mov r8, r8)
 80131d8:	46bd      	mov	sp, r7
 80131da:	b002      	add	sp, #8
 80131dc:	bd80      	pop	{r7, pc}

080131de <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 80131de:	b580      	push	{r7, lr}
 80131e0:	b082      	sub	sp, #8
 80131e2:	af00      	add	r7, sp, #0
 80131e4:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	0018      	movs	r0, r3
 80131ea:	f000 f8e2 	bl	80133b2 <Sleep>
}
 80131ee:	46c0      	nop			@ (mov r8, r8)
 80131f0:	46bd      	mov	sp, r7
 80131f2:	b002      	add	sp, #8
 80131f4:	bd80      	pop	{r7, pc}
	...

080131f8 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 80131f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131fa:	46d6      	mov	lr, sl
 80131fc:	4646      	mov	r6, r8
 80131fe:	464f      	mov	r7, r9
 8013200:	b5c0      	push	{r6, r7, lr}
 8013202:	4682      	mov	sl, r0
 8013204:	4689      	mov	r9, r1
 8013206:	0015      	movs	r5, r2
 8013208:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 801320a:	f7ff ffca 	bl	80131a2 <decamutexon>
 801320e:	0006      	movs	r6, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8013210:	4c14      	ldr	r4, [pc, #80]	@ (8013264 <writetospi+0x6c>)
 8013212:	0020      	movs	r0, r4
 8013214:	f7f5 fc84 	bl	8008b20 <HAL_SPI_GetState>
 8013218:	2801      	cmp	r0, #1
 801321a:	d1fa      	bne.n	8013212 <writetospi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 801321c:	308f      	adds	r0, #143	@ 0x8f
 801321e:	2200      	movs	r2, #0
 8013220:	2110      	movs	r1, #16
 8013222:	05c0      	lsls	r0, r0, #23
 8013224:	f7f2 f9ab 	bl	800557e <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 8013228:	2301      	movs	r3, #1
 801322a:	4652      	mov	r2, sl
 801322c:	4649      	mov	r1, r9
 801322e:	0020      	movs	r0, r4
 8013230:	425b      	negs	r3, r3
 8013232:	f7f4 fec7 	bl	8007fc4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 8013236:	2301      	movs	r3, #1
 8013238:	4641      	mov	r1, r8
 801323a:	b2aa      	uxth	r2, r5
 801323c:	425b      	negs	r3, r3
 801323e:	0020      	movs	r0, r4
 8013240:	f7f4 fec0 	bl	8007fc4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8013244:	2090      	movs	r0, #144	@ 0x90
 8013246:	2201      	movs	r2, #1
 8013248:	2110      	movs	r1, #16
 801324a:	05c0      	lsls	r0, r0, #23
 801324c:	f7f2 f997 	bl	800557e <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8013250:	0030      	movs	r0, r6
 8013252:	f7ff ffb7 	bl	80131c4 <decamutexoff>

    return 0;
} // end writetospi()
 8013256:	2000      	movs	r0, #0
 8013258:	bce0      	pop	{r5, r6, r7}
 801325a:	46ba      	mov	sl, r7
 801325c:	46b1      	mov	r9, r6
 801325e:	46a8      	mov	r8, r5
 8013260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013262:	46c0      	nop			@ (mov r8, r8)
 8013264:	20000568 	.word	0x20000568

08013268 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 8013268:	b570      	push	{r4, r5, r6, lr}
 801326a:	46de      	mov	lr, fp
 801326c:	4656      	mov	r6, sl
 801326e:	464d      	mov	r5, r9
 8013270:	4644      	mov	r4, r8
 8013272:	b570      	push	{r4, r5, r6, lr}
 8013274:	4688      	mov	r8, r1
 8013276:	0006      	movs	r6, r0
 8013278:	4691      	mov	r9, r2
 801327a:	469b      	mov	fp, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 801327c:	f7ff ff91 	bl	80131a2 <decamutexon>
 8013280:	4682      	mov	sl, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8013282:	4d18      	ldr	r5, [pc, #96]	@ (80132e4 <readfromspi+0x7c>)
 8013284:	0028      	movs	r0, r5
 8013286:	f7f5 fc4b 	bl	8008b20 <HAL_SPI_GetState>
 801328a:	2801      	cmp	r0, #1
 801328c:	d1fa      	bne.n	8013284 <readfromspi+0x1c>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 801328e:	308f      	adds	r0, #143	@ 0x8f
 8013290:	2200      	movs	r2, #0
 8013292:	2110      	movs	r1, #16
 8013294:	05c0      	lsls	r0, r0, #23
 8013296:	f7f2 f972 	bl	800557e <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 801329a:	2e00      	cmp	r6, #0
 801329c:	d00b      	beq.n	80132b6 <readfromspi+0x4e>
 801329e:	2400      	movs	r4, #0
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 80132a0:	4642      	mov	r2, r8
 80132a2:	2301      	movs	r3, #1
 80132a4:	1911      	adds	r1, r2, r4
 80132a6:	0028      	movs	r0, r5
    for(i=0; i<headerLength; i++)
 80132a8:	3401      	adds	r4, #1
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 80132aa:	2201      	movs	r2, #1
 80132ac:	425b      	negs	r3, r3
 80132ae:	f7f4 fe89 	bl	8007fc4 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 80132b2:	42b4      	cmp	r4, r6
 80132b4:	dbf4      	blt.n	80132a0 <readfromspi+0x38>
    //     }

    //     (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
    // }

    HAL_SPI_Receive(&hspi1, readBuffer, readlength, 100);
 80132b6:	464b      	mov	r3, r9
 80132b8:	4659      	mov	r1, fp
 80132ba:	0028      	movs	r0, r5
 80132bc:	b29a      	uxth	r2, r3
 80132be:	2364      	movs	r3, #100	@ 0x64
 80132c0:	f7f4 ffe0 	bl	8008284 <HAL_SPI_Receive>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80132c4:	2090      	movs	r0, #144	@ 0x90
 80132c6:	2201      	movs	r2, #1
 80132c8:	2110      	movs	r1, #16
 80132ca:	05c0      	lsls	r0, r0, #23
 80132cc:	f7f2 f957 	bl	800557e <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80132d0:	4650      	mov	r0, sl
 80132d2:	f7ff ff77 	bl	80131c4 <decamutexoff>

    return 0;
} // end readfromspi()
 80132d6:	2000      	movs	r0, #0
 80132d8:	bc78      	pop	{r3, r4, r5, r6}
 80132da:	46b3      	mov	fp, r6
 80132dc:	46aa      	mov	sl, r5
 80132de:	46a1      	mov	r9, r4
 80132e0:	4698      	mov	r8, r3
 80132e2:	bd70      	pop	{r4, r5, r6, pc}
 80132e4:	20000568 	.word	0x20000568

080132e8 <__NVIC_EnableIRQ>:
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b082      	sub	sp, #8
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	0002      	movs	r2, r0
 80132f0:	1dfb      	adds	r3, r7, #7
 80132f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80132f4:	1dfb      	adds	r3, r7, #7
 80132f6:	781b      	ldrb	r3, [r3, #0]
 80132f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80132fa:	d809      	bhi.n	8013310 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80132fc:	1dfb      	adds	r3, r7, #7
 80132fe:	781b      	ldrb	r3, [r3, #0]
 8013300:	001a      	movs	r2, r3
 8013302:	231f      	movs	r3, #31
 8013304:	401a      	ands	r2, r3
 8013306:	4b04      	ldr	r3, [pc, #16]	@ (8013318 <__NVIC_EnableIRQ+0x30>)
 8013308:	2101      	movs	r1, #1
 801330a:	4091      	lsls	r1, r2
 801330c:	000a      	movs	r2, r1
 801330e:	601a      	str	r2, [r3, #0]
}
 8013310:	46c0      	nop			@ (mov r8, r8)
 8013312:	46bd      	mov	sp, r7
 8013314:	b002      	add	sp, #8
 8013316:	bd80      	pop	{r7, pc}
 8013318:	e000e100 	.word	0xe000e100

0801331c <__NVIC_DisableIRQ>:
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b082      	sub	sp, #8
 8013320:	af00      	add	r7, sp, #0
 8013322:	0002      	movs	r2, r0
 8013324:	1dfb      	adds	r3, r7, #7
 8013326:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8013328:	1dfb      	adds	r3, r7, #7
 801332a:	781b      	ldrb	r3, [r3, #0]
 801332c:	2b7f      	cmp	r3, #127	@ 0x7f
 801332e:	d810      	bhi.n	8013352 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013330:	1dfb      	adds	r3, r7, #7
 8013332:	781b      	ldrb	r3, [r3, #0]
 8013334:	001a      	movs	r2, r3
 8013336:	231f      	movs	r3, #31
 8013338:	4013      	ands	r3, r2
 801333a:	4908      	ldr	r1, [pc, #32]	@ (801335c <__NVIC_DisableIRQ+0x40>)
 801333c:	2201      	movs	r2, #1
 801333e:	409a      	lsls	r2, r3
 8013340:	0013      	movs	r3, r2
 8013342:	2280      	movs	r2, #128	@ 0x80
 8013344:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013346:	f3bf 8f4f 	dsb	sy
}
 801334a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 801334c:	f3bf 8f6f 	isb	sy
}
 8013350:	46c0      	nop			@ (mov r8, r8)
}
 8013352:	46c0      	nop			@ (mov r8, r8)
 8013354:	46bd      	mov	sp, r7
 8013356:	b002      	add	sp, #8
 8013358:	bd80      	pop	{r7, pc}
 801335a:	46c0      	nop			@ (mov r8, r8)
 801335c:	e000e100 	.word	0xe000e100

08013360 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(useconds_t usec)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b084      	sub	sp, #16
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 8013368:	2300      	movs	r3, #0
 801336a:	60fb      	str	r3, [r7, #12]
 801336c:	e014      	b.n	8013398 <usleep+0x38>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 801336e:	2300      	movs	r3, #0
 8013370:	60bb      	str	r3, [r7, #8]
 8013372:	e004      	b.n	801337e <usleep+0x1e>
        {
            __NOP();
 8013374:	46c0      	nop			@ (mov r8, r8)
            __NOP();
 8013376:	46c0      	nop			@ (mov r8, r8)
        for(j=0;j<2;j++)
 8013378:	68bb      	ldr	r3, [r7, #8]
 801337a:	3301      	adds	r3, #1
 801337c:	60bb      	str	r3, [r7, #8]
 801337e:	68bb      	ldr	r3, [r7, #8]
 8013380:	2201      	movs	r2, #1
 8013382:	0fd8      	lsrs	r0, r3, #31
 8013384:	17d1      	asrs	r1, r2, #31
 8013386:	429a      	cmp	r2, r3
 8013388:	4148      	adcs	r0, r1
 801338a:	0003      	movs	r3, r0
 801338c:	b2db      	uxtb	r3, r3
 801338e:	2b00      	cmp	r3, #0
 8013390:	d1f0      	bne.n	8013374 <usleep+0x14>
    for(i=0;i<usec;i++)
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	3301      	adds	r3, #1
 8013396:	60fb      	str	r3, [r7, #12]
 8013398:	68fa      	ldr	r2, [r7, #12]
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	429a      	cmp	r2, r3
 801339e:	419b      	sbcs	r3, r3
 80133a0:	425b      	negs	r3, r3
 80133a2:	b2db      	uxtb	r3, r3
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d1e2      	bne.n	801336e <usleep+0xe>
        }
    }
    return 0;
 80133a8:	2300      	movs	r3, #0
}
 80133aa:	0018      	movs	r0, r3
 80133ac:	46bd      	mov	sp, r7
 80133ae:	b004      	add	sp, #16
 80133b0:	bd80      	pop	{r7, pc}

080133b2 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 80133b2:	b580      	push	{r7, lr}
 80133b4:	b082      	sub	sp, #8
 80133b6:	af00      	add	r7, sp, #0
 80133b8:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	0018      	movs	r0, r3
 80133be:	f7f1 f829 	bl	8004414 <HAL_Delay>
}
 80133c2:	46c0      	nop			@ (mov r8, r8)
 80133c4:	46bd      	mov	sp, r7
 80133c6:	b002      	add	sp, #8
 80133c8:	bd80      	pop	{r7, pc}
	...

080133cc <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 80133cc:	b580      	push	{r7, lr}
 80133ce:	b082      	sub	sp, #8
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 80133d4:	4a09      	ldr	r2, [pc, #36]	@ (80133fc <EXTI_GetITEnStatus+0x30>)
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	095b      	lsrs	r3, r3, #5
 80133da:	009b      	lsls	r3, r3, #2
 80133dc:	589a      	ldr	r2, [r3, r2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	211f      	movs	r1, #31
 80133e2:	400b      	ands	r3, r1
 80133e4:	40da      	lsrs	r2, r3
 80133e6:	0013      	movs	r3, r2
 80133e8:	2201      	movs	r2, #1
 80133ea:	4013      	ands	r3, r2
 80133ec:	1e5a      	subs	r2, r3, #1
 80133ee:	4193      	sbcs	r3, r2
 80133f0:	b2db      	uxtb	r3, r3
}
 80133f2:	0018      	movs	r0, r3
 80133f4:	46bd      	mov	sp, r7
 80133f6:	b002      	add	sp, #8
 80133f8:	bd80      	pop	{r7, pc}
 80133fa:	46c0      	nop			@ (mov r8, r8)
 80133fc:	e000e100 	.word	0xe000e100

08013400 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 8013400:	b580      	push	{r7, lr}
 8013402:	b086      	sub	sp, #24
 8013404:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 8013406:	1d3b      	adds	r3, r7, #4
 8013408:	2204      	movs	r2, #4
 801340a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 801340c:	1d3b      	adds	r3, r7, #4
 801340e:	2211      	movs	r2, #17
 8013410:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013412:	1d3b      	adds	r3, r7, #4
 8013414:	2200      	movs	r2, #0
 8013416:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8013418:	1d3a      	adds	r2, r7, #4
 801341a:	2390      	movs	r3, #144	@ 0x90
 801341c:	05db      	lsls	r3, r3, #23
 801341e:	0011      	movs	r1, r2
 8013420:	0018      	movs	r0, r3
 8013422:	f7f1 ff17 	bl	8005254 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 8013426:	2390      	movs	r3, #144	@ 0x90
 8013428:	05db      	lsls	r3, r3, #23
 801342a:	2200      	movs	r2, #0
 801342c:	2104      	movs	r1, #4
 801342e:	0018      	movs	r0, r3
 8013430:	f7f2 f8a5 	bl	800557e <HAL_GPIO_WritePin>

    usleep(1);
 8013434:	2001      	movs	r0, #1
 8013436:	f7ff ff93 	bl	8013360 <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 801343a:	2000      	movs	r0, #0
 801343c:	f000 f807 	bl	801344e <setup_DW1000RSTnIRQ>



    Sleep(2);
 8013440:	2002      	movs	r0, #2
 8013442:	f7ff ffb6 	bl	80133b2 <Sleep>
}
 8013446:	46c0      	nop			@ (mov r8, r8)
 8013448:	46bd      	mov	sp, r7
 801344a:	b006      	add	sp, #24
 801344c:	bd80      	pop	{r7, pc}

0801344e <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI2 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 801344e:	b580      	push	{r7, lr}
 8013450:	b088      	sub	sp, #32
 8013452:	af00      	add	r7, sp, #0
 8013454:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d01a      	beq.n	8013492 <setup_DW1000RSTnIRQ+0x44>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 801345c:	210c      	movs	r1, #12
 801345e:	187b      	adds	r3, r7, r1
 8013460:	2204      	movs	r2, #4
 8013462:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8013464:	187b      	adds	r3, r7, r1
 8013466:	2288      	movs	r2, #136	@ 0x88
 8013468:	0352      	lsls	r2, r2, #13
 801346a:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 801346c:	187b      	adds	r3, r7, r1
 801346e:	2200      	movs	r2, #0
 8013470:	609a      	str	r2, [r3, #8]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8013472:	187a      	adds	r2, r7, r1
 8013474:	2390      	movs	r3, #144	@ 0x90
 8013476:	05db      	lsls	r3, r3, #23
 8013478:	0011      	movs	r1, r2
 801347a:	0018      	movs	r0, r3
 801347c:	f7f1 feea 	bl	8005254 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI2_IRQn);     //pin #0 -> EXTI #0
 8013480:	2006      	movs	r0, #6
 8013482:	f7f1 fc98 	bl	8004db6 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8013486:	2200      	movs	r2, #0
 8013488:	2105      	movs	r1, #5
 801348a:	2006      	movs	r0, #6
 801348c:	f7f1 fc7e 	bl	8004d8c <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 8013490:	e01d      	b.n	80134ce <setup_DW1000RSTnIRQ+0x80>
        HAL_NVIC_DisableIRQ(EXTI2_IRQn);    //pin #0 -> EXTI #0
 8013492:	2006      	movs	r0, #6
 8013494:	f7f1 fc9f 	bl	8004dd6 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8013498:	210c      	movs	r1, #12
 801349a:	187b      	adds	r3, r7, r1
 801349c:	2204      	movs	r2, #4
 801349e:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80134a0:	187b      	adds	r3, r7, r1
 80134a2:	2211      	movs	r2, #17
 80134a4:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134a6:	187b      	adds	r3, r7, r1
 80134a8:	2200      	movs	r2, #0
 80134aa:	609a      	str	r2, [r3, #8]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80134ac:	187b      	adds	r3, r7, r1
 80134ae:	2203      	movs	r2, #3
 80134b0:	60da      	str	r2, [r3, #12]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 80134b2:	187a      	adds	r2, r7, r1
 80134b4:	2390      	movs	r3, #144	@ 0x90
 80134b6:	05db      	lsls	r3, r3, #23
 80134b8:	0011      	movs	r1, r2
 80134ba:	0018      	movs	r0, r3
 80134bc:	f7f1 feca 	bl	8005254 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 80134c0:	2390      	movs	r3, #144	@ 0x90
 80134c2:	05db      	lsls	r3, r3, #23
 80134c4:	2201      	movs	r2, #1
 80134c6:	2104      	movs	r1, #4
 80134c8:	0018      	movs	r0, r3
 80134ca:	f7f2 f858 	bl	800557e <HAL_GPIO_WritePin>
}
 80134ce:	46c0      	nop			@ (mov r8, r8)
 80134d0:	46bd      	mov	sp, r7
 80134d2:	b008      	add	sp, #32
 80134d4:	bd80      	pop	{r7, pc}
	...

080134d8 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80134dc:	4b04      	ldr	r3, [pc, #16]	@ (80134f0 <port_set_dw1000_slowrate+0x18>)
 80134de:	2218      	movs	r2, #24
 80134e0:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 80134e2:	4b03      	ldr	r3, [pc, #12]	@ (80134f0 <port_set_dw1000_slowrate+0x18>)
 80134e4:	0018      	movs	r0, r3
 80134e6:	f7f4 fcb5 	bl	8007e54 <HAL_SPI_Init>
}
 80134ea:	46c0      	nop			@ (mov r8, r8)
 80134ec:	46bd      	mov	sp, r7
 80134ee:	bd80      	pop	{r7, pc}
 80134f0:	20000568 	.word	0x20000568

080134f4 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80134f8:	4b04      	ldr	r3, [pc, #16]	@ (801350c <port_set_dw1000_fastrate+0x18>)
 80134fa:	2200      	movs	r2, #0
 80134fc:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 80134fe:	4b03      	ldr	r3, [pc, #12]	@ (801350c <port_set_dw1000_fastrate+0x18>)
 8013500:	0018      	movs	r0, r3
 8013502:	f7f4 fca7 	bl	8007e54 <HAL_SPI_Init>
}
 8013506:	46c0      	nop			@ (mov r8, r8)
 8013508:	46bd      	mov	sp, r7
 801350a:	bd80      	pop	{r7, pc}
 801350c:	20000568 	.word	0x20000568

08013510 <HAL_GPIO_EXTI_Callback>:
/* @fn      HAL_GPIO_EXTI_Callback
 * @brief   IRQ HAL call-back for all EXTI configured lines
 *          i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8013510:	b580      	push	{r7, lr}
 8013512:	b082      	sub	sp, #8
 8013514:	af00      	add	r7, sp, #0
 8013516:	0002      	movs	r2, r0
 8013518:	1dbb      	adds	r3, r7, #6
 801351a:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == DW_IRQn_Pin)
 801351c:	1dbb      	adds	r3, r7, #6
 801351e:	881b      	ldrh	r3, [r3, #0]
 8013520:	2b20      	cmp	r3, #32
 8013522:	d101      	bne.n	8013528 <HAL_GPIO_EXTI_Callback+0x18>
    {
        process_deca_irq();
 8013524:	f000 f804 	bl	8013530 <process_deca_irq>
    }
}
 8013528:	46c0      	nop			@ (mov r8, r8)
 801352a:	46bd      	mov	sp, r7
 801352c:	b002      	add	sp, #8
 801352e:	bd80      	pop	{r7, pc}

08013530 <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	af00      	add	r7, sp, #0
    while(port_CheckEXT_IRQ() != 0)
 8013534:	e002      	b.n	801353c <process_deca_irq+0xc>
    {

        port_deca_isr();
 8013536:	4b05      	ldr	r3, [pc, #20]	@ (801354c <process_deca_irq+0x1c>)
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	4798      	blx	r3
    while(port_CheckEXT_IRQ() != 0)
 801353c:	f000 f822 	bl	8013584 <port_CheckEXT_IRQ>
 8013540:	1e03      	subs	r3, r0, #0
 8013542:	d1f8      	bne.n	8013536 <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 8013544:	46c0      	nop			@ (mov r8, r8)
 8013546:	46c0      	nop			@ (mov r8, r8)
 8013548:	46bd      	mov	sp, r7
 801354a:	bd80      	pop	{r7, pc}
 801354c:	20001e58 	.word	0x20001e58

08013550 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8013550:	b580      	push	{r7, lr}
 8013552:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8013554:	2007      	movs	r0, #7
 8013556:	f7ff fee1 	bl	801331c <__NVIC_DisableIRQ>
}
 801355a:	46c0      	nop			@ (mov r8, r8)
 801355c:	46bd      	mov	sp, r7
 801355e:	bd80      	pop	{r7, pc}

08013560 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8013560:	b580      	push	{r7, lr}
 8013562:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8013564:	2007      	movs	r0, #7
 8013566:	f7ff febf 	bl	80132e8 <__NVIC_EnableIRQ>
}
 801356a:	46c0      	nop			@ (mov r8, r8)
 801356c:	46bd      	mov	sp, r7
 801356e:	bd80      	pop	{r7, pc}

08013570 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8013570:	b580      	push	{r7, lr}
 8013572:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8013574:	2007      	movs	r0, #7
 8013576:	f7ff ff29 	bl	80133cc <EXTI_GetITEnStatus>
 801357a:	0003      	movs	r3, r0
}
 801357c:	0018      	movs	r0, r3
 801357e:	46bd      	mov	sp, r7
 8013580:	bd80      	pop	{r7, pc}
	...

08013584 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 8013584:	b580      	push	{r7, lr}
 8013586:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DECAIRQ_GPIO, DW_IRQn_Pin);
 8013588:	4b04      	ldr	r3, [pc, #16]	@ (801359c <port_CheckEXT_IRQ+0x18>)
 801358a:	2120      	movs	r1, #32
 801358c:	0018      	movs	r0, r3
 801358e:	f7f1 ffd9 	bl	8005544 <HAL_GPIO_ReadPin>
 8013592:	0003      	movs	r3, r0
}
 8013594:	0018      	movs	r0, r3
 8013596:	46bd      	mov	sp, r7
 8013598:	bd80      	pop	{r7, pc}
 801359a:	46c0      	nop			@ (mov r8, r8)
 801359c:	48000400 	.word	0x48000400

080135a0 <__cvt>:
 80135a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135a2:	001f      	movs	r7, r3
 80135a4:	2300      	movs	r3, #0
 80135a6:	0016      	movs	r6, r2
 80135a8:	b08b      	sub	sp, #44	@ 0x2c
 80135aa:	429f      	cmp	r7, r3
 80135ac:	da04      	bge.n	80135b8 <__cvt+0x18>
 80135ae:	2180      	movs	r1, #128	@ 0x80
 80135b0:	0609      	lsls	r1, r1, #24
 80135b2:	187b      	adds	r3, r7, r1
 80135b4:	001f      	movs	r7, r3
 80135b6:	232d      	movs	r3, #45	@ 0x2d
 80135b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80135ba:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80135bc:	7013      	strb	r3, [r2, #0]
 80135be:	2320      	movs	r3, #32
 80135c0:	2203      	movs	r2, #3
 80135c2:	439d      	bics	r5, r3
 80135c4:	2d46      	cmp	r5, #70	@ 0x46
 80135c6:	d007      	beq.n	80135d8 <__cvt+0x38>
 80135c8:	002b      	movs	r3, r5
 80135ca:	3b45      	subs	r3, #69	@ 0x45
 80135cc:	4259      	negs	r1, r3
 80135ce:	414b      	adcs	r3, r1
 80135d0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80135d2:	3a01      	subs	r2, #1
 80135d4:	18cb      	adds	r3, r1, r3
 80135d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80135d8:	ab09      	add	r3, sp, #36	@ 0x24
 80135da:	9304      	str	r3, [sp, #16]
 80135dc:	ab08      	add	r3, sp, #32
 80135de:	9303      	str	r3, [sp, #12]
 80135e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80135e2:	9200      	str	r2, [sp, #0]
 80135e4:	9302      	str	r3, [sp, #8]
 80135e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80135e8:	0032      	movs	r2, r6
 80135ea:	9301      	str	r3, [sp, #4]
 80135ec:	003b      	movs	r3, r7
 80135ee:	f000 fea1 	bl	8014334 <_dtoa_r>
 80135f2:	0004      	movs	r4, r0
 80135f4:	2d47      	cmp	r5, #71	@ 0x47
 80135f6:	d11b      	bne.n	8013630 <__cvt+0x90>
 80135f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80135fa:	07db      	lsls	r3, r3, #31
 80135fc:	d511      	bpl.n	8013622 <__cvt+0x82>
 80135fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013600:	18c3      	adds	r3, r0, r3
 8013602:	9307      	str	r3, [sp, #28]
 8013604:	2200      	movs	r2, #0
 8013606:	2300      	movs	r3, #0
 8013608:	0030      	movs	r0, r6
 801360a:	0039      	movs	r1, r7
 801360c:	f7ec ff1e 	bl	800044c <__aeabi_dcmpeq>
 8013610:	2800      	cmp	r0, #0
 8013612:	d001      	beq.n	8013618 <__cvt+0x78>
 8013614:	9b07      	ldr	r3, [sp, #28]
 8013616:	9309      	str	r3, [sp, #36]	@ 0x24
 8013618:	2230      	movs	r2, #48	@ 0x30
 801361a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801361c:	9907      	ldr	r1, [sp, #28]
 801361e:	428b      	cmp	r3, r1
 8013620:	d320      	bcc.n	8013664 <__cvt+0xc4>
 8013622:	0020      	movs	r0, r4
 8013624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013626:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8013628:	1b1b      	subs	r3, r3, r4
 801362a:	6013      	str	r3, [r2, #0]
 801362c:	b00b      	add	sp, #44	@ 0x2c
 801362e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013630:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013632:	18c3      	adds	r3, r0, r3
 8013634:	9307      	str	r3, [sp, #28]
 8013636:	2d46      	cmp	r5, #70	@ 0x46
 8013638:	d1e4      	bne.n	8013604 <__cvt+0x64>
 801363a:	7803      	ldrb	r3, [r0, #0]
 801363c:	2b30      	cmp	r3, #48	@ 0x30
 801363e:	d10c      	bne.n	801365a <__cvt+0xba>
 8013640:	2200      	movs	r2, #0
 8013642:	2300      	movs	r3, #0
 8013644:	0030      	movs	r0, r6
 8013646:	0039      	movs	r1, r7
 8013648:	f7ec ff00 	bl	800044c <__aeabi_dcmpeq>
 801364c:	2800      	cmp	r0, #0
 801364e:	d104      	bne.n	801365a <__cvt+0xba>
 8013650:	2301      	movs	r3, #1
 8013652:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8013654:	1a9b      	subs	r3, r3, r2
 8013656:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013658:	6013      	str	r3, [r2, #0]
 801365a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801365c:	9a07      	ldr	r2, [sp, #28]
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	18d3      	adds	r3, r2, r3
 8013662:	e7ce      	b.n	8013602 <__cvt+0x62>
 8013664:	1c59      	adds	r1, r3, #1
 8013666:	9109      	str	r1, [sp, #36]	@ 0x24
 8013668:	701a      	strb	r2, [r3, #0]
 801366a:	e7d6      	b.n	801361a <__cvt+0x7a>

0801366c <__exponent>:
 801366c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801366e:	232b      	movs	r3, #43	@ 0x2b
 8013670:	0005      	movs	r5, r0
 8013672:	000c      	movs	r4, r1
 8013674:	b085      	sub	sp, #20
 8013676:	7002      	strb	r2, [r0, #0]
 8013678:	2900      	cmp	r1, #0
 801367a:	da01      	bge.n	8013680 <__exponent+0x14>
 801367c:	424c      	negs	r4, r1
 801367e:	3302      	adds	r3, #2
 8013680:	706b      	strb	r3, [r5, #1]
 8013682:	2c09      	cmp	r4, #9
 8013684:	dd2c      	ble.n	80136e0 <__exponent+0x74>
 8013686:	ab02      	add	r3, sp, #8
 8013688:	1dde      	adds	r6, r3, #7
 801368a:	0020      	movs	r0, r4
 801368c:	210a      	movs	r1, #10
 801368e:	f7ec fec7 	bl	8000420 <__aeabi_idivmod>
 8013692:	0037      	movs	r7, r6
 8013694:	3130      	adds	r1, #48	@ 0x30
 8013696:	3e01      	subs	r6, #1
 8013698:	0020      	movs	r0, r4
 801369a:	7031      	strb	r1, [r6, #0]
 801369c:	210a      	movs	r1, #10
 801369e:	9401      	str	r4, [sp, #4]
 80136a0:	f7ec fdd8 	bl	8000254 <__divsi3>
 80136a4:	9b01      	ldr	r3, [sp, #4]
 80136a6:	0004      	movs	r4, r0
 80136a8:	2b63      	cmp	r3, #99	@ 0x63
 80136aa:	dcee      	bgt.n	801368a <__exponent+0x1e>
 80136ac:	1eba      	subs	r2, r7, #2
 80136ae:	1ca8      	adds	r0, r5, #2
 80136b0:	0001      	movs	r1, r0
 80136b2:	0013      	movs	r3, r2
 80136b4:	3430      	adds	r4, #48	@ 0x30
 80136b6:	7014      	strb	r4, [r2, #0]
 80136b8:	ac02      	add	r4, sp, #8
 80136ba:	3407      	adds	r4, #7
 80136bc:	429c      	cmp	r4, r3
 80136be:	d80a      	bhi.n	80136d6 <__exponent+0x6a>
 80136c0:	2300      	movs	r3, #0
 80136c2:	42a2      	cmp	r2, r4
 80136c4:	d803      	bhi.n	80136ce <__exponent+0x62>
 80136c6:	3309      	adds	r3, #9
 80136c8:	aa02      	add	r2, sp, #8
 80136ca:	189b      	adds	r3, r3, r2
 80136cc:	1bdb      	subs	r3, r3, r7
 80136ce:	18c0      	adds	r0, r0, r3
 80136d0:	1b40      	subs	r0, r0, r5
 80136d2:	b005      	add	sp, #20
 80136d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136d6:	781c      	ldrb	r4, [r3, #0]
 80136d8:	3301      	adds	r3, #1
 80136da:	700c      	strb	r4, [r1, #0]
 80136dc:	3101      	adds	r1, #1
 80136de:	e7eb      	b.n	80136b8 <__exponent+0x4c>
 80136e0:	2330      	movs	r3, #48	@ 0x30
 80136e2:	18e4      	adds	r4, r4, r3
 80136e4:	70ab      	strb	r3, [r5, #2]
 80136e6:	1d28      	adds	r0, r5, #4
 80136e8:	70ec      	strb	r4, [r5, #3]
 80136ea:	e7f1      	b.n	80136d0 <__exponent+0x64>

080136ec <_printf_float>:
 80136ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136ee:	b097      	sub	sp, #92	@ 0x5c
 80136f0:	000d      	movs	r5, r1
 80136f2:	920a      	str	r2, [sp, #40]	@ 0x28
 80136f4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80136f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80136f8:	9009      	str	r0, [sp, #36]	@ 0x24
 80136fa:	f000 fcf9 	bl	80140f0 <_localeconv_r>
 80136fe:	6803      	ldr	r3, [r0, #0]
 8013700:	0018      	movs	r0, r3
 8013702:	930d      	str	r3, [sp, #52]	@ 0x34
 8013704:	f7ec fd00 	bl	8000108 <strlen>
 8013708:	2300      	movs	r3, #0
 801370a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801370c:	9314      	str	r3, [sp, #80]	@ 0x50
 801370e:	7e2b      	ldrb	r3, [r5, #24]
 8013710:	2207      	movs	r2, #7
 8013712:	930c      	str	r3, [sp, #48]	@ 0x30
 8013714:	682b      	ldr	r3, [r5, #0]
 8013716:	930e      	str	r3, [sp, #56]	@ 0x38
 8013718:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801371a:	6823      	ldr	r3, [r4, #0]
 801371c:	05c9      	lsls	r1, r1, #23
 801371e:	d545      	bpl.n	80137ac <_printf_float+0xc0>
 8013720:	189b      	adds	r3, r3, r2
 8013722:	4393      	bics	r3, r2
 8013724:	001a      	movs	r2, r3
 8013726:	3208      	adds	r2, #8
 8013728:	6022      	str	r2, [r4, #0]
 801372a:	2201      	movs	r2, #1
 801372c:	681e      	ldr	r6, [r3, #0]
 801372e:	685f      	ldr	r7, [r3, #4]
 8013730:	007b      	lsls	r3, r7, #1
 8013732:	085b      	lsrs	r3, r3, #1
 8013734:	9311      	str	r3, [sp, #68]	@ 0x44
 8013736:	9610      	str	r6, [sp, #64]	@ 0x40
 8013738:	64ae      	str	r6, [r5, #72]	@ 0x48
 801373a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801373c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801373e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8013740:	4ba7      	ldr	r3, [pc, #668]	@ (80139e0 <_printf_float+0x2f4>)
 8013742:	4252      	negs	r2, r2
 8013744:	f7ee ffca 	bl	80026dc <__aeabi_dcmpun>
 8013748:	2800      	cmp	r0, #0
 801374a:	d131      	bne.n	80137b0 <_printf_float+0xc4>
 801374c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801374e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8013750:	2201      	movs	r2, #1
 8013752:	4ba3      	ldr	r3, [pc, #652]	@ (80139e0 <_printf_float+0x2f4>)
 8013754:	4252      	negs	r2, r2
 8013756:	f7ec fe89 	bl	800046c <__aeabi_dcmple>
 801375a:	2800      	cmp	r0, #0
 801375c:	d128      	bne.n	80137b0 <_printf_float+0xc4>
 801375e:	2200      	movs	r2, #0
 8013760:	2300      	movs	r3, #0
 8013762:	0030      	movs	r0, r6
 8013764:	0039      	movs	r1, r7
 8013766:	f7ec fe77 	bl	8000458 <__aeabi_dcmplt>
 801376a:	2800      	cmp	r0, #0
 801376c:	d003      	beq.n	8013776 <_printf_float+0x8a>
 801376e:	002b      	movs	r3, r5
 8013770:	222d      	movs	r2, #45	@ 0x2d
 8013772:	3343      	adds	r3, #67	@ 0x43
 8013774:	701a      	strb	r2, [r3, #0]
 8013776:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013778:	4f9a      	ldr	r7, [pc, #616]	@ (80139e4 <_printf_float+0x2f8>)
 801377a:	2b47      	cmp	r3, #71	@ 0x47
 801377c:	d900      	bls.n	8013780 <_printf_float+0x94>
 801377e:	4f9a      	ldr	r7, [pc, #616]	@ (80139e8 <_printf_float+0x2fc>)
 8013780:	2303      	movs	r3, #3
 8013782:	2400      	movs	r4, #0
 8013784:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013786:	612b      	str	r3, [r5, #16]
 8013788:	3301      	adds	r3, #1
 801378a:	439a      	bics	r2, r3
 801378c:	602a      	str	r2, [r5, #0]
 801378e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013790:	0029      	movs	r1, r5
 8013792:	9300      	str	r3, [sp, #0]
 8013794:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013796:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013798:	aa15      	add	r2, sp, #84	@ 0x54
 801379a:	f000 f9e5 	bl	8013b68 <_printf_common>
 801379e:	3001      	adds	r0, #1
 80137a0:	d000      	beq.n	80137a4 <_printf_float+0xb8>
 80137a2:	e09f      	b.n	80138e4 <_printf_float+0x1f8>
 80137a4:	2001      	movs	r0, #1
 80137a6:	4240      	negs	r0, r0
 80137a8:	b017      	add	sp, #92	@ 0x5c
 80137aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137ac:	3307      	adds	r3, #7
 80137ae:	e7b8      	b.n	8013722 <_printf_float+0x36>
 80137b0:	0032      	movs	r2, r6
 80137b2:	003b      	movs	r3, r7
 80137b4:	0030      	movs	r0, r6
 80137b6:	0039      	movs	r1, r7
 80137b8:	f7ee ff90 	bl	80026dc <__aeabi_dcmpun>
 80137bc:	2800      	cmp	r0, #0
 80137be:	d00b      	beq.n	80137d8 <_printf_float+0xec>
 80137c0:	2f00      	cmp	r7, #0
 80137c2:	da03      	bge.n	80137cc <_printf_float+0xe0>
 80137c4:	002b      	movs	r3, r5
 80137c6:	222d      	movs	r2, #45	@ 0x2d
 80137c8:	3343      	adds	r3, #67	@ 0x43
 80137ca:	701a      	strb	r2, [r3, #0]
 80137cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80137ce:	4f87      	ldr	r7, [pc, #540]	@ (80139ec <_printf_float+0x300>)
 80137d0:	2b47      	cmp	r3, #71	@ 0x47
 80137d2:	d9d5      	bls.n	8013780 <_printf_float+0x94>
 80137d4:	4f86      	ldr	r7, [pc, #536]	@ (80139f0 <_printf_float+0x304>)
 80137d6:	e7d3      	b.n	8013780 <_printf_float+0x94>
 80137d8:	2220      	movs	r2, #32
 80137da:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80137dc:	686b      	ldr	r3, [r5, #4]
 80137de:	4394      	bics	r4, r2
 80137e0:	1c5a      	adds	r2, r3, #1
 80137e2:	d146      	bne.n	8013872 <_printf_float+0x186>
 80137e4:	3307      	adds	r3, #7
 80137e6:	606b      	str	r3, [r5, #4]
 80137e8:	2380      	movs	r3, #128	@ 0x80
 80137ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80137ec:	00db      	lsls	r3, r3, #3
 80137ee:	4313      	orrs	r3, r2
 80137f0:	2200      	movs	r2, #0
 80137f2:	602b      	str	r3, [r5, #0]
 80137f4:	9206      	str	r2, [sp, #24]
 80137f6:	aa14      	add	r2, sp, #80	@ 0x50
 80137f8:	9205      	str	r2, [sp, #20]
 80137fa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80137fc:	a90a      	add	r1, sp, #40	@ 0x28
 80137fe:	9204      	str	r2, [sp, #16]
 8013800:	aa13      	add	r2, sp, #76	@ 0x4c
 8013802:	9203      	str	r2, [sp, #12]
 8013804:	2223      	movs	r2, #35	@ 0x23
 8013806:	1852      	adds	r2, r2, r1
 8013808:	9202      	str	r2, [sp, #8]
 801380a:	9301      	str	r3, [sp, #4]
 801380c:	686b      	ldr	r3, [r5, #4]
 801380e:	0032      	movs	r2, r6
 8013810:	9300      	str	r3, [sp, #0]
 8013812:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013814:	003b      	movs	r3, r7
 8013816:	f7ff fec3 	bl	80135a0 <__cvt>
 801381a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801381c:	0007      	movs	r7, r0
 801381e:	2c47      	cmp	r4, #71	@ 0x47
 8013820:	d12d      	bne.n	801387e <_printf_float+0x192>
 8013822:	1cd3      	adds	r3, r2, #3
 8013824:	db02      	blt.n	801382c <_printf_float+0x140>
 8013826:	686b      	ldr	r3, [r5, #4]
 8013828:	429a      	cmp	r2, r3
 801382a:	dd48      	ble.n	80138be <_printf_float+0x1d2>
 801382c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801382e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8013830:	3b02      	subs	r3, #2
 8013832:	b2db      	uxtb	r3, r3
 8013834:	930c      	str	r3, [sp, #48]	@ 0x30
 8013836:	0028      	movs	r0, r5
 8013838:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801383a:	3901      	subs	r1, #1
 801383c:	3050      	adds	r0, #80	@ 0x50
 801383e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8013840:	f7ff ff14 	bl	801366c <__exponent>
 8013844:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013846:	0004      	movs	r4, r0
 8013848:	1813      	adds	r3, r2, r0
 801384a:	612b      	str	r3, [r5, #16]
 801384c:	2a01      	cmp	r2, #1
 801384e:	dc02      	bgt.n	8013856 <_printf_float+0x16a>
 8013850:	682a      	ldr	r2, [r5, #0]
 8013852:	07d2      	lsls	r2, r2, #31
 8013854:	d501      	bpl.n	801385a <_printf_float+0x16e>
 8013856:	3301      	adds	r3, #1
 8013858:	612b      	str	r3, [r5, #16]
 801385a:	2323      	movs	r3, #35	@ 0x23
 801385c:	aa0a      	add	r2, sp, #40	@ 0x28
 801385e:	189b      	adds	r3, r3, r2
 8013860:	781b      	ldrb	r3, [r3, #0]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d100      	bne.n	8013868 <_printf_float+0x17c>
 8013866:	e792      	b.n	801378e <_printf_float+0xa2>
 8013868:	002b      	movs	r3, r5
 801386a:	222d      	movs	r2, #45	@ 0x2d
 801386c:	3343      	adds	r3, #67	@ 0x43
 801386e:	701a      	strb	r2, [r3, #0]
 8013870:	e78d      	b.n	801378e <_printf_float+0xa2>
 8013872:	2c47      	cmp	r4, #71	@ 0x47
 8013874:	d1b8      	bne.n	80137e8 <_printf_float+0xfc>
 8013876:	2b00      	cmp	r3, #0
 8013878:	d1b6      	bne.n	80137e8 <_printf_float+0xfc>
 801387a:	3301      	adds	r3, #1
 801387c:	e7b3      	b.n	80137e6 <_printf_float+0xfa>
 801387e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013880:	0011      	movs	r1, r2
 8013882:	2b65      	cmp	r3, #101	@ 0x65
 8013884:	d9d7      	bls.n	8013836 <_printf_float+0x14a>
 8013886:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013888:	2b66      	cmp	r3, #102	@ 0x66
 801388a:	d11a      	bne.n	80138c2 <_printf_float+0x1d6>
 801388c:	686b      	ldr	r3, [r5, #4]
 801388e:	2a00      	cmp	r2, #0
 8013890:	dd09      	ble.n	80138a6 <_printf_float+0x1ba>
 8013892:	612a      	str	r2, [r5, #16]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d102      	bne.n	801389e <_printf_float+0x1b2>
 8013898:	6829      	ldr	r1, [r5, #0]
 801389a:	07c9      	lsls	r1, r1, #31
 801389c:	d50b      	bpl.n	80138b6 <_printf_float+0x1ca>
 801389e:	3301      	adds	r3, #1
 80138a0:	189b      	adds	r3, r3, r2
 80138a2:	612b      	str	r3, [r5, #16]
 80138a4:	e007      	b.n	80138b6 <_printf_float+0x1ca>
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d103      	bne.n	80138b2 <_printf_float+0x1c6>
 80138aa:	2201      	movs	r2, #1
 80138ac:	6829      	ldr	r1, [r5, #0]
 80138ae:	4211      	tst	r1, r2
 80138b0:	d000      	beq.n	80138b4 <_printf_float+0x1c8>
 80138b2:	1c9a      	adds	r2, r3, #2
 80138b4:	612a      	str	r2, [r5, #16]
 80138b6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80138b8:	2400      	movs	r4, #0
 80138ba:	65ab      	str	r3, [r5, #88]	@ 0x58
 80138bc:	e7cd      	b.n	801385a <_printf_float+0x16e>
 80138be:	2367      	movs	r3, #103	@ 0x67
 80138c0:	930c      	str	r3, [sp, #48]	@ 0x30
 80138c2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80138c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80138c6:	4299      	cmp	r1, r3
 80138c8:	db06      	blt.n	80138d8 <_printf_float+0x1ec>
 80138ca:	682b      	ldr	r3, [r5, #0]
 80138cc:	6129      	str	r1, [r5, #16]
 80138ce:	07db      	lsls	r3, r3, #31
 80138d0:	d5f1      	bpl.n	80138b6 <_printf_float+0x1ca>
 80138d2:	3101      	adds	r1, #1
 80138d4:	6129      	str	r1, [r5, #16]
 80138d6:	e7ee      	b.n	80138b6 <_printf_float+0x1ca>
 80138d8:	2201      	movs	r2, #1
 80138da:	2900      	cmp	r1, #0
 80138dc:	dce0      	bgt.n	80138a0 <_printf_float+0x1b4>
 80138de:	1892      	adds	r2, r2, r2
 80138e0:	1a52      	subs	r2, r2, r1
 80138e2:	e7dd      	b.n	80138a0 <_printf_float+0x1b4>
 80138e4:	682a      	ldr	r2, [r5, #0]
 80138e6:	0553      	lsls	r3, r2, #21
 80138e8:	d408      	bmi.n	80138fc <_printf_float+0x210>
 80138ea:	692b      	ldr	r3, [r5, #16]
 80138ec:	003a      	movs	r2, r7
 80138ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80138f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80138f2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80138f4:	47a0      	blx	r4
 80138f6:	3001      	adds	r0, #1
 80138f8:	d129      	bne.n	801394e <_printf_float+0x262>
 80138fa:	e753      	b.n	80137a4 <_printf_float+0xb8>
 80138fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80138fe:	2b65      	cmp	r3, #101	@ 0x65
 8013900:	d800      	bhi.n	8013904 <_printf_float+0x218>
 8013902:	e0da      	b.n	8013aba <_printf_float+0x3ce>
 8013904:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8013906:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8013908:	2200      	movs	r2, #0
 801390a:	2300      	movs	r3, #0
 801390c:	f7ec fd9e 	bl	800044c <__aeabi_dcmpeq>
 8013910:	2800      	cmp	r0, #0
 8013912:	d033      	beq.n	801397c <_printf_float+0x290>
 8013914:	2301      	movs	r3, #1
 8013916:	4a37      	ldr	r2, [pc, #220]	@ (80139f4 <_printf_float+0x308>)
 8013918:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801391a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801391c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801391e:	47a0      	blx	r4
 8013920:	3001      	adds	r0, #1
 8013922:	d100      	bne.n	8013926 <_printf_float+0x23a>
 8013924:	e73e      	b.n	80137a4 <_printf_float+0xb8>
 8013926:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8013928:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801392a:	42b3      	cmp	r3, r6
 801392c:	db02      	blt.n	8013934 <_printf_float+0x248>
 801392e:	682b      	ldr	r3, [r5, #0]
 8013930:	07db      	lsls	r3, r3, #31
 8013932:	d50c      	bpl.n	801394e <_printf_float+0x262>
 8013934:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8013936:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013938:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801393a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801393c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801393e:	47a0      	blx	r4
 8013940:	2400      	movs	r4, #0
 8013942:	3001      	adds	r0, #1
 8013944:	d100      	bne.n	8013948 <_printf_float+0x25c>
 8013946:	e72d      	b.n	80137a4 <_printf_float+0xb8>
 8013948:	1e73      	subs	r3, r6, #1
 801394a:	42a3      	cmp	r3, r4
 801394c:	dc0a      	bgt.n	8013964 <_printf_float+0x278>
 801394e:	682b      	ldr	r3, [r5, #0]
 8013950:	079b      	lsls	r3, r3, #30
 8013952:	d500      	bpl.n	8013956 <_printf_float+0x26a>
 8013954:	e105      	b.n	8013b62 <_printf_float+0x476>
 8013956:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013958:	68e8      	ldr	r0, [r5, #12]
 801395a:	4298      	cmp	r0, r3
 801395c:	db00      	blt.n	8013960 <_printf_float+0x274>
 801395e:	e723      	b.n	80137a8 <_printf_float+0xbc>
 8013960:	0018      	movs	r0, r3
 8013962:	e721      	b.n	80137a8 <_printf_float+0xbc>
 8013964:	002a      	movs	r2, r5
 8013966:	2301      	movs	r3, #1
 8013968:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801396a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801396c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801396e:	321a      	adds	r2, #26
 8013970:	47b8      	blx	r7
 8013972:	3001      	adds	r0, #1
 8013974:	d100      	bne.n	8013978 <_printf_float+0x28c>
 8013976:	e715      	b.n	80137a4 <_printf_float+0xb8>
 8013978:	3401      	adds	r4, #1
 801397a:	e7e5      	b.n	8013948 <_printf_float+0x25c>
 801397c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801397e:	2b00      	cmp	r3, #0
 8013980:	dc3a      	bgt.n	80139f8 <_printf_float+0x30c>
 8013982:	2301      	movs	r3, #1
 8013984:	4a1b      	ldr	r2, [pc, #108]	@ (80139f4 <_printf_float+0x308>)
 8013986:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013988:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801398a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801398c:	47a0      	blx	r4
 801398e:	3001      	adds	r0, #1
 8013990:	d100      	bne.n	8013994 <_printf_float+0x2a8>
 8013992:	e707      	b.n	80137a4 <_printf_float+0xb8>
 8013994:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8013996:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013998:	4333      	orrs	r3, r6
 801399a:	d102      	bne.n	80139a2 <_printf_float+0x2b6>
 801399c:	682b      	ldr	r3, [r5, #0]
 801399e:	07db      	lsls	r3, r3, #31
 80139a0:	d5d5      	bpl.n	801394e <_printf_float+0x262>
 80139a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80139a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80139a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80139a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80139aa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80139ac:	47a0      	blx	r4
 80139ae:	2300      	movs	r3, #0
 80139b0:	3001      	adds	r0, #1
 80139b2:	d100      	bne.n	80139b6 <_printf_float+0x2ca>
 80139b4:	e6f6      	b.n	80137a4 <_printf_float+0xb8>
 80139b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80139b8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80139ba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80139bc:	425b      	negs	r3, r3
 80139be:	4293      	cmp	r3, r2
 80139c0:	dc01      	bgt.n	80139c6 <_printf_float+0x2da>
 80139c2:	0033      	movs	r3, r6
 80139c4:	e792      	b.n	80138ec <_printf_float+0x200>
 80139c6:	002a      	movs	r2, r5
 80139c8:	2301      	movs	r3, #1
 80139ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80139cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80139ce:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80139d0:	321a      	adds	r2, #26
 80139d2:	47a0      	blx	r4
 80139d4:	3001      	adds	r0, #1
 80139d6:	d100      	bne.n	80139da <_printf_float+0x2ee>
 80139d8:	e6e4      	b.n	80137a4 <_printf_float+0xb8>
 80139da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80139dc:	3301      	adds	r3, #1
 80139de:	e7ea      	b.n	80139b6 <_printf_float+0x2ca>
 80139e0:	7fefffff 	.word	0x7fefffff
 80139e4:	08019f6e 	.word	0x08019f6e
 80139e8:	08019f72 	.word	0x08019f72
 80139ec:	08019f76 	.word	0x08019f76
 80139f0:	08019f7a 	.word	0x08019f7a
 80139f4:	08019f7e 	.word	0x08019f7e
 80139f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80139fa:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80139fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80139fe:	429e      	cmp	r6, r3
 8013a00:	dd00      	ble.n	8013a04 <_printf_float+0x318>
 8013a02:	001e      	movs	r6, r3
 8013a04:	2e00      	cmp	r6, #0
 8013a06:	dc31      	bgt.n	8013a6c <_printf_float+0x380>
 8013a08:	43f3      	mvns	r3, r6
 8013a0a:	2400      	movs	r4, #0
 8013a0c:	17db      	asrs	r3, r3, #31
 8013a0e:	4033      	ands	r3, r6
 8013a10:	930e      	str	r3, [sp, #56]	@ 0x38
 8013a12:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8013a14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a16:	1af3      	subs	r3, r6, r3
 8013a18:	42a3      	cmp	r3, r4
 8013a1a:	dc30      	bgt.n	8013a7e <_printf_float+0x392>
 8013a1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013a1e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013a20:	429a      	cmp	r2, r3
 8013a22:	dc38      	bgt.n	8013a96 <_printf_float+0x3aa>
 8013a24:	682b      	ldr	r3, [r5, #0]
 8013a26:	07db      	lsls	r3, r3, #31
 8013a28:	d435      	bmi.n	8013a96 <_printf_float+0x3aa>
 8013a2a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8013a2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013a2e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013a30:	1b9b      	subs	r3, r3, r6
 8013a32:	1b14      	subs	r4, r2, r4
 8013a34:	429c      	cmp	r4, r3
 8013a36:	dd00      	ble.n	8013a3a <_printf_float+0x34e>
 8013a38:	001c      	movs	r4, r3
 8013a3a:	2c00      	cmp	r4, #0
 8013a3c:	dc34      	bgt.n	8013aa8 <_printf_float+0x3bc>
 8013a3e:	43e3      	mvns	r3, r4
 8013a40:	2600      	movs	r6, #0
 8013a42:	17db      	asrs	r3, r3, #31
 8013a44:	401c      	ands	r4, r3
 8013a46:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013a48:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013a4a:	1ad3      	subs	r3, r2, r3
 8013a4c:	1b1b      	subs	r3, r3, r4
 8013a4e:	42b3      	cmp	r3, r6
 8013a50:	dc00      	bgt.n	8013a54 <_printf_float+0x368>
 8013a52:	e77c      	b.n	801394e <_printf_float+0x262>
 8013a54:	002a      	movs	r2, r5
 8013a56:	2301      	movs	r3, #1
 8013a58:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013a5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013a5c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8013a5e:	321a      	adds	r2, #26
 8013a60:	47b8      	blx	r7
 8013a62:	3001      	adds	r0, #1
 8013a64:	d100      	bne.n	8013a68 <_printf_float+0x37c>
 8013a66:	e69d      	b.n	80137a4 <_printf_float+0xb8>
 8013a68:	3601      	adds	r6, #1
 8013a6a:	e7ec      	b.n	8013a46 <_printf_float+0x35a>
 8013a6c:	0033      	movs	r3, r6
 8013a6e:	003a      	movs	r2, r7
 8013a70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013a72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013a74:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8013a76:	47a0      	blx	r4
 8013a78:	3001      	adds	r0, #1
 8013a7a:	d1c5      	bne.n	8013a08 <_printf_float+0x31c>
 8013a7c:	e692      	b.n	80137a4 <_printf_float+0xb8>
 8013a7e:	002a      	movs	r2, r5
 8013a80:	2301      	movs	r3, #1
 8013a82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013a84:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013a86:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8013a88:	321a      	adds	r2, #26
 8013a8a:	47b0      	blx	r6
 8013a8c:	3001      	adds	r0, #1
 8013a8e:	d100      	bne.n	8013a92 <_printf_float+0x3a6>
 8013a90:	e688      	b.n	80137a4 <_printf_float+0xb8>
 8013a92:	3401      	adds	r4, #1
 8013a94:	e7bd      	b.n	8013a12 <_printf_float+0x326>
 8013a96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013a9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013a9c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013a9e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8013aa0:	47a0      	blx	r4
 8013aa2:	3001      	adds	r0, #1
 8013aa4:	d1c1      	bne.n	8013a2a <_printf_float+0x33e>
 8013aa6:	e67d      	b.n	80137a4 <_printf_float+0xb8>
 8013aa8:	19ba      	adds	r2, r7, r6
 8013aaa:	0023      	movs	r3, r4
 8013aac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013aae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013ab0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8013ab2:	47b0      	blx	r6
 8013ab4:	3001      	adds	r0, #1
 8013ab6:	d1c2      	bne.n	8013a3e <_printf_float+0x352>
 8013ab8:	e674      	b.n	80137a4 <_printf_float+0xb8>
 8013aba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013abc:	930c      	str	r3, [sp, #48]	@ 0x30
 8013abe:	2b01      	cmp	r3, #1
 8013ac0:	dc02      	bgt.n	8013ac8 <_printf_float+0x3dc>
 8013ac2:	2301      	movs	r3, #1
 8013ac4:	421a      	tst	r2, r3
 8013ac6:	d039      	beq.n	8013b3c <_printf_float+0x450>
 8013ac8:	2301      	movs	r3, #1
 8013aca:	003a      	movs	r2, r7
 8013acc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013ace:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013ad0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8013ad2:	47b0      	blx	r6
 8013ad4:	3001      	adds	r0, #1
 8013ad6:	d100      	bne.n	8013ada <_printf_float+0x3ee>
 8013ad8:	e664      	b.n	80137a4 <_printf_float+0xb8>
 8013ada:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013adc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013ade:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013ae0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013ae2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8013ae4:	47b0      	blx	r6
 8013ae6:	3001      	adds	r0, #1
 8013ae8:	d100      	bne.n	8013aec <_printf_float+0x400>
 8013aea:	e65b      	b.n	80137a4 <_printf_float+0xb8>
 8013aec:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8013aee:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8013af0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013af2:	2200      	movs	r2, #0
 8013af4:	3b01      	subs	r3, #1
 8013af6:	930c      	str	r3, [sp, #48]	@ 0x30
 8013af8:	2300      	movs	r3, #0
 8013afa:	f7ec fca7 	bl	800044c <__aeabi_dcmpeq>
 8013afe:	2800      	cmp	r0, #0
 8013b00:	d11a      	bne.n	8013b38 <_printf_float+0x44c>
 8013b02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013b04:	1c7a      	adds	r2, r7, #1
 8013b06:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013b08:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013b0a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8013b0c:	47b0      	blx	r6
 8013b0e:	3001      	adds	r0, #1
 8013b10:	d10e      	bne.n	8013b30 <_printf_float+0x444>
 8013b12:	e647      	b.n	80137a4 <_printf_float+0xb8>
 8013b14:	002a      	movs	r2, r5
 8013b16:	2301      	movs	r3, #1
 8013b18:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013b1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013b1c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8013b1e:	321a      	adds	r2, #26
 8013b20:	47b8      	blx	r7
 8013b22:	3001      	adds	r0, #1
 8013b24:	d100      	bne.n	8013b28 <_printf_float+0x43c>
 8013b26:	e63d      	b.n	80137a4 <_printf_float+0xb8>
 8013b28:	3601      	adds	r6, #1
 8013b2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013b2c:	429e      	cmp	r6, r3
 8013b2e:	dbf1      	blt.n	8013b14 <_printf_float+0x428>
 8013b30:	002a      	movs	r2, r5
 8013b32:	0023      	movs	r3, r4
 8013b34:	3250      	adds	r2, #80	@ 0x50
 8013b36:	e6da      	b.n	80138ee <_printf_float+0x202>
 8013b38:	2600      	movs	r6, #0
 8013b3a:	e7f6      	b.n	8013b2a <_printf_float+0x43e>
 8013b3c:	003a      	movs	r2, r7
 8013b3e:	e7e2      	b.n	8013b06 <_printf_float+0x41a>
 8013b40:	002a      	movs	r2, r5
 8013b42:	2301      	movs	r3, #1
 8013b44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013b46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013b48:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8013b4a:	3219      	adds	r2, #25
 8013b4c:	47b0      	blx	r6
 8013b4e:	3001      	adds	r0, #1
 8013b50:	d100      	bne.n	8013b54 <_printf_float+0x468>
 8013b52:	e627      	b.n	80137a4 <_printf_float+0xb8>
 8013b54:	3401      	adds	r4, #1
 8013b56:	68eb      	ldr	r3, [r5, #12]
 8013b58:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8013b5a:	1a9b      	subs	r3, r3, r2
 8013b5c:	42a3      	cmp	r3, r4
 8013b5e:	dcef      	bgt.n	8013b40 <_printf_float+0x454>
 8013b60:	e6f9      	b.n	8013956 <_printf_float+0x26a>
 8013b62:	2400      	movs	r4, #0
 8013b64:	e7f7      	b.n	8013b56 <_printf_float+0x46a>
 8013b66:	46c0      	nop			@ (mov r8, r8)

08013b68 <_printf_common>:
 8013b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013b6a:	0016      	movs	r6, r2
 8013b6c:	9301      	str	r3, [sp, #4]
 8013b6e:	688a      	ldr	r2, [r1, #8]
 8013b70:	690b      	ldr	r3, [r1, #16]
 8013b72:	000c      	movs	r4, r1
 8013b74:	9000      	str	r0, [sp, #0]
 8013b76:	4293      	cmp	r3, r2
 8013b78:	da00      	bge.n	8013b7c <_printf_common+0x14>
 8013b7a:	0013      	movs	r3, r2
 8013b7c:	0022      	movs	r2, r4
 8013b7e:	6033      	str	r3, [r6, #0]
 8013b80:	3243      	adds	r2, #67	@ 0x43
 8013b82:	7812      	ldrb	r2, [r2, #0]
 8013b84:	2a00      	cmp	r2, #0
 8013b86:	d001      	beq.n	8013b8c <_printf_common+0x24>
 8013b88:	3301      	adds	r3, #1
 8013b8a:	6033      	str	r3, [r6, #0]
 8013b8c:	6823      	ldr	r3, [r4, #0]
 8013b8e:	069b      	lsls	r3, r3, #26
 8013b90:	d502      	bpl.n	8013b98 <_printf_common+0x30>
 8013b92:	6833      	ldr	r3, [r6, #0]
 8013b94:	3302      	adds	r3, #2
 8013b96:	6033      	str	r3, [r6, #0]
 8013b98:	6822      	ldr	r2, [r4, #0]
 8013b9a:	2306      	movs	r3, #6
 8013b9c:	0015      	movs	r5, r2
 8013b9e:	401d      	ands	r5, r3
 8013ba0:	421a      	tst	r2, r3
 8013ba2:	d027      	beq.n	8013bf4 <_printf_common+0x8c>
 8013ba4:	0023      	movs	r3, r4
 8013ba6:	3343      	adds	r3, #67	@ 0x43
 8013ba8:	781b      	ldrb	r3, [r3, #0]
 8013baa:	1e5a      	subs	r2, r3, #1
 8013bac:	4193      	sbcs	r3, r2
 8013bae:	6822      	ldr	r2, [r4, #0]
 8013bb0:	0692      	lsls	r2, r2, #26
 8013bb2:	d430      	bmi.n	8013c16 <_printf_common+0xae>
 8013bb4:	0022      	movs	r2, r4
 8013bb6:	9901      	ldr	r1, [sp, #4]
 8013bb8:	9800      	ldr	r0, [sp, #0]
 8013bba:	9d08      	ldr	r5, [sp, #32]
 8013bbc:	3243      	adds	r2, #67	@ 0x43
 8013bbe:	47a8      	blx	r5
 8013bc0:	3001      	adds	r0, #1
 8013bc2:	d025      	beq.n	8013c10 <_printf_common+0xa8>
 8013bc4:	2206      	movs	r2, #6
 8013bc6:	6823      	ldr	r3, [r4, #0]
 8013bc8:	2500      	movs	r5, #0
 8013bca:	4013      	ands	r3, r2
 8013bcc:	2b04      	cmp	r3, #4
 8013bce:	d105      	bne.n	8013bdc <_printf_common+0x74>
 8013bd0:	6833      	ldr	r3, [r6, #0]
 8013bd2:	68e5      	ldr	r5, [r4, #12]
 8013bd4:	1aed      	subs	r5, r5, r3
 8013bd6:	43eb      	mvns	r3, r5
 8013bd8:	17db      	asrs	r3, r3, #31
 8013bda:	401d      	ands	r5, r3
 8013bdc:	68a3      	ldr	r3, [r4, #8]
 8013bde:	6922      	ldr	r2, [r4, #16]
 8013be0:	4293      	cmp	r3, r2
 8013be2:	dd01      	ble.n	8013be8 <_printf_common+0x80>
 8013be4:	1a9b      	subs	r3, r3, r2
 8013be6:	18ed      	adds	r5, r5, r3
 8013be8:	2600      	movs	r6, #0
 8013bea:	42b5      	cmp	r5, r6
 8013bec:	d120      	bne.n	8013c30 <_printf_common+0xc8>
 8013bee:	2000      	movs	r0, #0
 8013bf0:	e010      	b.n	8013c14 <_printf_common+0xac>
 8013bf2:	3501      	adds	r5, #1
 8013bf4:	68e3      	ldr	r3, [r4, #12]
 8013bf6:	6832      	ldr	r2, [r6, #0]
 8013bf8:	1a9b      	subs	r3, r3, r2
 8013bfa:	42ab      	cmp	r3, r5
 8013bfc:	ddd2      	ble.n	8013ba4 <_printf_common+0x3c>
 8013bfe:	0022      	movs	r2, r4
 8013c00:	2301      	movs	r3, #1
 8013c02:	9901      	ldr	r1, [sp, #4]
 8013c04:	9800      	ldr	r0, [sp, #0]
 8013c06:	9f08      	ldr	r7, [sp, #32]
 8013c08:	3219      	adds	r2, #25
 8013c0a:	47b8      	blx	r7
 8013c0c:	3001      	adds	r0, #1
 8013c0e:	d1f0      	bne.n	8013bf2 <_printf_common+0x8a>
 8013c10:	2001      	movs	r0, #1
 8013c12:	4240      	negs	r0, r0
 8013c14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013c16:	2030      	movs	r0, #48	@ 0x30
 8013c18:	18e1      	adds	r1, r4, r3
 8013c1a:	3143      	adds	r1, #67	@ 0x43
 8013c1c:	7008      	strb	r0, [r1, #0]
 8013c1e:	0021      	movs	r1, r4
 8013c20:	1c5a      	adds	r2, r3, #1
 8013c22:	3145      	adds	r1, #69	@ 0x45
 8013c24:	7809      	ldrb	r1, [r1, #0]
 8013c26:	18a2      	adds	r2, r4, r2
 8013c28:	3243      	adds	r2, #67	@ 0x43
 8013c2a:	3302      	adds	r3, #2
 8013c2c:	7011      	strb	r1, [r2, #0]
 8013c2e:	e7c1      	b.n	8013bb4 <_printf_common+0x4c>
 8013c30:	0022      	movs	r2, r4
 8013c32:	2301      	movs	r3, #1
 8013c34:	9901      	ldr	r1, [sp, #4]
 8013c36:	9800      	ldr	r0, [sp, #0]
 8013c38:	9f08      	ldr	r7, [sp, #32]
 8013c3a:	321a      	adds	r2, #26
 8013c3c:	47b8      	blx	r7
 8013c3e:	3001      	adds	r0, #1
 8013c40:	d0e6      	beq.n	8013c10 <_printf_common+0xa8>
 8013c42:	3601      	adds	r6, #1
 8013c44:	e7d1      	b.n	8013bea <_printf_common+0x82>
	...

08013c48 <_printf_i>:
 8013c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c4a:	b08b      	sub	sp, #44	@ 0x2c
 8013c4c:	9206      	str	r2, [sp, #24]
 8013c4e:	000a      	movs	r2, r1
 8013c50:	3243      	adds	r2, #67	@ 0x43
 8013c52:	9307      	str	r3, [sp, #28]
 8013c54:	9005      	str	r0, [sp, #20]
 8013c56:	9203      	str	r2, [sp, #12]
 8013c58:	7e0a      	ldrb	r2, [r1, #24]
 8013c5a:	000c      	movs	r4, r1
 8013c5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013c5e:	2a78      	cmp	r2, #120	@ 0x78
 8013c60:	d809      	bhi.n	8013c76 <_printf_i+0x2e>
 8013c62:	2a62      	cmp	r2, #98	@ 0x62
 8013c64:	d80b      	bhi.n	8013c7e <_printf_i+0x36>
 8013c66:	2a00      	cmp	r2, #0
 8013c68:	d100      	bne.n	8013c6c <_printf_i+0x24>
 8013c6a:	e0bc      	b.n	8013de6 <_printf_i+0x19e>
 8013c6c:	497b      	ldr	r1, [pc, #492]	@ (8013e5c <_printf_i+0x214>)
 8013c6e:	9104      	str	r1, [sp, #16]
 8013c70:	2a58      	cmp	r2, #88	@ 0x58
 8013c72:	d100      	bne.n	8013c76 <_printf_i+0x2e>
 8013c74:	e090      	b.n	8013d98 <_printf_i+0x150>
 8013c76:	0025      	movs	r5, r4
 8013c78:	3542      	adds	r5, #66	@ 0x42
 8013c7a:	702a      	strb	r2, [r5, #0]
 8013c7c:	e022      	b.n	8013cc4 <_printf_i+0x7c>
 8013c7e:	0010      	movs	r0, r2
 8013c80:	3863      	subs	r0, #99	@ 0x63
 8013c82:	2815      	cmp	r0, #21
 8013c84:	d8f7      	bhi.n	8013c76 <_printf_i+0x2e>
 8013c86:	f7ec fa51 	bl	800012c <__gnu_thumb1_case_shi>
 8013c8a:	0016      	.short	0x0016
 8013c8c:	fff6001f 	.word	0xfff6001f
 8013c90:	fff6fff6 	.word	0xfff6fff6
 8013c94:	001ffff6 	.word	0x001ffff6
 8013c98:	fff6fff6 	.word	0xfff6fff6
 8013c9c:	fff6fff6 	.word	0xfff6fff6
 8013ca0:	003600a1 	.word	0x003600a1
 8013ca4:	fff60080 	.word	0xfff60080
 8013ca8:	00b2fff6 	.word	0x00b2fff6
 8013cac:	0036fff6 	.word	0x0036fff6
 8013cb0:	fff6fff6 	.word	0xfff6fff6
 8013cb4:	0084      	.short	0x0084
 8013cb6:	0025      	movs	r5, r4
 8013cb8:	681a      	ldr	r2, [r3, #0]
 8013cba:	3542      	adds	r5, #66	@ 0x42
 8013cbc:	1d11      	adds	r1, r2, #4
 8013cbe:	6019      	str	r1, [r3, #0]
 8013cc0:	6813      	ldr	r3, [r2, #0]
 8013cc2:	702b      	strb	r3, [r5, #0]
 8013cc4:	2301      	movs	r3, #1
 8013cc6:	e0a0      	b.n	8013e0a <_printf_i+0x1c2>
 8013cc8:	6818      	ldr	r0, [r3, #0]
 8013cca:	6809      	ldr	r1, [r1, #0]
 8013ccc:	1d02      	adds	r2, r0, #4
 8013cce:	060d      	lsls	r5, r1, #24
 8013cd0:	d50b      	bpl.n	8013cea <_printf_i+0xa2>
 8013cd2:	6806      	ldr	r6, [r0, #0]
 8013cd4:	601a      	str	r2, [r3, #0]
 8013cd6:	2e00      	cmp	r6, #0
 8013cd8:	da03      	bge.n	8013ce2 <_printf_i+0x9a>
 8013cda:	232d      	movs	r3, #45	@ 0x2d
 8013cdc:	9a03      	ldr	r2, [sp, #12]
 8013cde:	4276      	negs	r6, r6
 8013ce0:	7013      	strb	r3, [r2, #0]
 8013ce2:	4b5e      	ldr	r3, [pc, #376]	@ (8013e5c <_printf_i+0x214>)
 8013ce4:	270a      	movs	r7, #10
 8013ce6:	9304      	str	r3, [sp, #16]
 8013ce8:	e018      	b.n	8013d1c <_printf_i+0xd4>
 8013cea:	6806      	ldr	r6, [r0, #0]
 8013cec:	601a      	str	r2, [r3, #0]
 8013cee:	0649      	lsls	r1, r1, #25
 8013cf0:	d5f1      	bpl.n	8013cd6 <_printf_i+0x8e>
 8013cf2:	b236      	sxth	r6, r6
 8013cf4:	e7ef      	b.n	8013cd6 <_printf_i+0x8e>
 8013cf6:	6808      	ldr	r0, [r1, #0]
 8013cf8:	6819      	ldr	r1, [r3, #0]
 8013cfa:	c940      	ldmia	r1!, {r6}
 8013cfc:	0605      	lsls	r5, r0, #24
 8013cfe:	d402      	bmi.n	8013d06 <_printf_i+0xbe>
 8013d00:	0640      	lsls	r0, r0, #25
 8013d02:	d500      	bpl.n	8013d06 <_printf_i+0xbe>
 8013d04:	b2b6      	uxth	r6, r6
 8013d06:	6019      	str	r1, [r3, #0]
 8013d08:	4b54      	ldr	r3, [pc, #336]	@ (8013e5c <_printf_i+0x214>)
 8013d0a:	270a      	movs	r7, #10
 8013d0c:	9304      	str	r3, [sp, #16]
 8013d0e:	2a6f      	cmp	r2, #111	@ 0x6f
 8013d10:	d100      	bne.n	8013d14 <_printf_i+0xcc>
 8013d12:	3f02      	subs	r7, #2
 8013d14:	0023      	movs	r3, r4
 8013d16:	2200      	movs	r2, #0
 8013d18:	3343      	adds	r3, #67	@ 0x43
 8013d1a:	701a      	strb	r2, [r3, #0]
 8013d1c:	6863      	ldr	r3, [r4, #4]
 8013d1e:	60a3      	str	r3, [r4, #8]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	db03      	blt.n	8013d2c <_printf_i+0xe4>
 8013d24:	2104      	movs	r1, #4
 8013d26:	6822      	ldr	r2, [r4, #0]
 8013d28:	438a      	bics	r2, r1
 8013d2a:	6022      	str	r2, [r4, #0]
 8013d2c:	2e00      	cmp	r6, #0
 8013d2e:	d102      	bne.n	8013d36 <_printf_i+0xee>
 8013d30:	9d03      	ldr	r5, [sp, #12]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d00c      	beq.n	8013d50 <_printf_i+0x108>
 8013d36:	9d03      	ldr	r5, [sp, #12]
 8013d38:	0030      	movs	r0, r6
 8013d3a:	0039      	movs	r1, r7
 8013d3c:	f7ec fa86 	bl	800024c <__aeabi_uidivmod>
 8013d40:	9b04      	ldr	r3, [sp, #16]
 8013d42:	3d01      	subs	r5, #1
 8013d44:	5c5b      	ldrb	r3, [r3, r1]
 8013d46:	702b      	strb	r3, [r5, #0]
 8013d48:	0033      	movs	r3, r6
 8013d4a:	0006      	movs	r6, r0
 8013d4c:	429f      	cmp	r7, r3
 8013d4e:	d9f3      	bls.n	8013d38 <_printf_i+0xf0>
 8013d50:	2f08      	cmp	r7, #8
 8013d52:	d109      	bne.n	8013d68 <_printf_i+0x120>
 8013d54:	6823      	ldr	r3, [r4, #0]
 8013d56:	07db      	lsls	r3, r3, #31
 8013d58:	d506      	bpl.n	8013d68 <_printf_i+0x120>
 8013d5a:	6862      	ldr	r2, [r4, #4]
 8013d5c:	6923      	ldr	r3, [r4, #16]
 8013d5e:	429a      	cmp	r2, r3
 8013d60:	dc02      	bgt.n	8013d68 <_printf_i+0x120>
 8013d62:	2330      	movs	r3, #48	@ 0x30
 8013d64:	3d01      	subs	r5, #1
 8013d66:	702b      	strb	r3, [r5, #0]
 8013d68:	9b03      	ldr	r3, [sp, #12]
 8013d6a:	1b5b      	subs	r3, r3, r5
 8013d6c:	6123      	str	r3, [r4, #16]
 8013d6e:	9b07      	ldr	r3, [sp, #28]
 8013d70:	0021      	movs	r1, r4
 8013d72:	9300      	str	r3, [sp, #0]
 8013d74:	9805      	ldr	r0, [sp, #20]
 8013d76:	9b06      	ldr	r3, [sp, #24]
 8013d78:	aa09      	add	r2, sp, #36	@ 0x24
 8013d7a:	f7ff fef5 	bl	8013b68 <_printf_common>
 8013d7e:	3001      	adds	r0, #1
 8013d80:	d148      	bne.n	8013e14 <_printf_i+0x1cc>
 8013d82:	2001      	movs	r0, #1
 8013d84:	4240      	negs	r0, r0
 8013d86:	b00b      	add	sp, #44	@ 0x2c
 8013d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d8a:	2220      	movs	r2, #32
 8013d8c:	6809      	ldr	r1, [r1, #0]
 8013d8e:	430a      	orrs	r2, r1
 8013d90:	6022      	str	r2, [r4, #0]
 8013d92:	2278      	movs	r2, #120	@ 0x78
 8013d94:	4932      	ldr	r1, [pc, #200]	@ (8013e60 <_printf_i+0x218>)
 8013d96:	9104      	str	r1, [sp, #16]
 8013d98:	0021      	movs	r1, r4
 8013d9a:	3145      	adds	r1, #69	@ 0x45
 8013d9c:	700a      	strb	r2, [r1, #0]
 8013d9e:	6819      	ldr	r1, [r3, #0]
 8013da0:	6822      	ldr	r2, [r4, #0]
 8013da2:	c940      	ldmia	r1!, {r6}
 8013da4:	0610      	lsls	r0, r2, #24
 8013da6:	d402      	bmi.n	8013dae <_printf_i+0x166>
 8013da8:	0650      	lsls	r0, r2, #25
 8013daa:	d500      	bpl.n	8013dae <_printf_i+0x166>
 8013dac:	b2b6      	uxth	r6, r6
 8013dae:	6019      	str	r1, [r3, #0]
 8013db0:	07d3      	lsls	r3, r2, #31
 8013db2:	d502      	bpl.n	8013dba <_printf_i+0x172>
 8013db4:	2320      	movs	r3, #32
 8013db6:	4313      	orrs	r3, r2
 8013db8:	6023      	str	r3, [r4, #0]
 8013dba:	2e00      	cmp	r6, #0
 8013dbc:	d001      	beq.n	8013dc2 <_printf_i+0x17a>
 8013dbe:	2710      	movs	r7, #16
 8013dc0:	e7a8      	b.n	8013d14 <_printf_i+0xcc>
 8013dc2:	2220      	movs	r2, #32
 8013dc4:	6823      	ldr	r3, [r4, #0]
 8013dc6:	4393      	bics	r3, r2
 8013dc8:	6023      	str	r3, [r4, #0]
 8013dca:	e7f8      	b.n	8013dbe <_printf_i+0x176>
 8013dcc:	681a      	ldr	r2, [r3, #0]
 8013dce:	680d      	ldr	r5, [r1, #0]
 8013dd0:	1d10      	adds	r0, r2, #4
 8013dd2:	6949      	ldr	r1, [r1, #20]
 8013dd4:	6018      	str	r0, [r3, #0]
 8013dd6:	6813      	ldr	r3, [r2, #0]
 8013dd8:	062e      	lsls	r6, r5, #24
 8013dda:	d501      	bpl.n	8013de0 <_printf_i+0x198>
 8013ddc:	6019      	str	r1, [r3, #0]
 8013dde:	e002      	b.n	8013de6 <_printf_i+0x19e>
 8013de0:	066d      	lsls	r5, r5, #25
 8013de2:	d5fb      	bpl.n	8013ddc <_printf_i+0x194>
 8013de4:	8019      	strh	r1, [r3, #0]
 8013de6:	2300      	movs	r3, #0
 8013de8:	9d03      	ldr	r5, [sp, #12]
 8013dea:	6123      	str	r3, [r4, #16]
 8013dec:	e7bf      	b.n	8013d6e <_printf_i+0x126>
 8013dee:	681a      	ldr	r2, [r3, #0]
 8013df0:	1d11      	adds	r1, r2, #4
 8013df2:	6019      	str	r1, [r3, #0]
 8013df4:	6815      	ldr	r5, [r2, #0]
 8013df6:	2100      	movs	r1, #0
 8013df8:	0028      	movs	r0, r5
 8013dfa:	6862      	ldr	r2, [r4, #4]
 8013dfc:	f000 f9f7 	bl	80141ee <memchr>
 8013e00:	2800      	cmp	r0, #0
 8013e02:	d001      	beq.n	8013e08 <_printf_i+0x1c0>
 8013e04:	1b40      	subs	r0, r0, r5
 8013e06:	6060      	str	r0, [r4, #4]
 8013e08:	6863      	ldr	r3, [r4, #4]
 8013e0a:	6123      	str	r3, [r4, #16]
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	9a03      	ldr	r2, [sp, #12]
 8013e10:	7013      	strb	r3, [r2, #0]
 8013e12:	e7ac      	b.n	8013d6e <_printf_i+0x126>
 8013e14:	002a      	movs	r2, r5
 8013e16:	6923      	ldr	r3, [r4, #16]
 8013e18:	9906      	ldr	r1, [sp, #24]
 8013e1a:	9805      	ldr	r0, [sp, #20]
 8013e1c:	9d07      	ldr	r5, [sp, #28]
 8013e1e:	47a8      	blx	r5
 8013e20:	3001      	adds	r0, #1
 8013e22:	d0ae      	beq.n	8013d82 <_printf_i+0x13a>
 8013e24:	6823      	ldr	r3, [r4, #0]
 8013e26:	079b      	lsls	r3, r3, #30
 8013e28:	d415      	bmi.n	8013e56 <_printf_i+0x20e>
 8013e2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e2c:	68e0      	ldr	r0, [r4, #12]
 8013e2e:	4298      	cmp	r0, r3
 8013e30:	daa9      	bge.n	8013d86 <_printf_i+0x13e>
 8013e32:	0018      	movs	r0, r3
 8013e34:	e7a7      	b.n	8013d86 <_printf_i+0x13e>
 8013e36:	0022      	movs	r2, r4
 8013e38:	2301      	movs	r3, #1
 8013e3a:	9906      	ldr	r1, [sp, #24]
 8013e3c:	9805      	ldr	r0, [sp, #20]
 8013e3e:	9e07      	ldr	r6, [sp, #28]
 8013e40:	3219      	adds	r2, #25
 8013e42:	47b0      	blx	r6
 8013e44:	3001      	adds	r0, #1
 8013e46:	d09c      	beq.n	8013d82 <_printf_i+0x13a>
 8013e48:	3501      	adds	r5, #1
 8013e4a:	68e3      	ldr	r3, [r4, #12]
 8013e4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013e4e:	1a9b      	subs	r3, r3, r2
 8013e50:	42ab      	cmp	r3, r5
 8013e52:	dcf0      	bgt.n	8013e36 <_printf_i+0x1ee>
 8013e54:	e7e9      	b.n	8013e2a <_printf_i+0x1e2>
 8013e56:	2500      	movs	r5, #0
 8013e58:	e7f7      	b.n	8013e4a <_printf_i+0x202>
 8013e5a:	46c0      	nop			@ (mov r8, r8)
 8013e5c:	08019f80 	.word	0x08019f80
 8013e60:	08019f91 	.word	0x08019f91

08013e64 <std>:
 8013e64:	2300      	movs	r3, #0
 8013e66:	b510      	push	{r4, lr}
 8013e68:	0004      	movs	r4, r0
 8013e6a:	6003      	str	r3, [r0, #0]
 8013e6c:	6043      	str	r3, [r0, #4]
 8013e6e:	6083      	str	r3, [r0, #8]
 8013e70:	8181      	strh	r1, [r0, #12]
 8013e72:	6643      	str	r3, [r0, #100]	@ 0x64
 8013e74:	81c2      	strh	r2, [r0, #14]
 8013e76:	6103      	str	r3, [r0, #16]
 8013e78:	6143      	str	r3, [r0, #20]
 8013e7a:	6183      	str	r3, [r0, #24]
 8013e7c:	0019      	movs	r1, r3
 8013e7e:	2208      	movs	r2, #8
 8013e80:	305c      	adds	r0, #92	@ 0x5c
 8013e82:	f000 f92d 	bl	80140e0 <memset>
 8013e86:	4b0b      	ldr	r3, [pc, #44]	@ (8013eb4 <std+0x50>)
 8013e88:	6224      	str	r4, [r4, #32]
 8013e8a:	6263      	str	r3, [r4, #36]	@ 0x24
 8013e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8013eb8 <std+0x54>)
 8013e8e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013e90:	4b0a      	ldr	r3, [pc, #40]	@ (8013ebc <std+0x58>)
 8013e92:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013e94:	4b0a      	ldr	r3, [pc, #40]	@ (8013ec0 <std+0x5c>)
 8013e96:	6323      	str	r3, [r4, #48]	@ 0x30
 8013e98:	4b0a      	ldr	r3, [pc, #40]	@ (8013ec4 <std+0x60>)
 8013e9a:	429c      	cmp	r4, r3
 8013e9c:	d005      	beq.n	8013eaa <std+0x46>
 8013e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8013ec8 <std+0x64>)
 8013ea0:	429c      	cmp	r4, r3
 8013ea2:	d002      	beq.n	8013eaa <std+0x46>
 8013ea4:	4b09      	ldr	r3, [pc, #36]	@ (8013ecc <std+0x68>)
 8013ea6:	429c      	cmp	r4, r3
 8013ea8:	d103      	bne.n	8013eb2 <std+0x4e>
 8013eaa:	0020      	movs	r0, r4
 8013eac:	3058      	adds	r0, #88	@ 0x58
 8013eae:	f000 f99b 	bl	80141e8 <__retarget_lock_init_recursive>
 8013eb2:	bd10      	pop	{r4, pc}
 8013eb4:	0801402d 	.word	0x0801402d
 8013eb8:	08014055 	.word	0x08014055
 8013ebc:	0801408d 	.word	0x0801408d
 8013ec0:	080140b9 	.word	0x080140b9
 8013ec4:	20001e5c 	.word	0x20001e5c
 8013ec8:	20001ec4 	.word	0x20001ec4
 8013ecc:	20001f2c 	.word	0x20001f2c

08013ed0 <stdio_exit_handler>:
 8013ed0:	b510      	push	{r4, lr}
 8013ed2:	4a03      	ldr	r2, [pc, #12]	@ (8013ee0 <stdio_exit_handler+0x10>)
 8013ed4:	4903      	ldr	r1, [pc, #12]	@ (8013ee4 <stdio_exit_handler+0x14>)
 8013ed6:	4804      	ldr	r0, [pc, #16]	@ (8013ee8 <stdio_exit_handler+0x18>)
 8013ed8:	f000 f86c 	bl	8013fb4 <_fwalk_sglue>
 8013edc:	bd10      	pop	{r4, pc}
 8013ede:	46c0      	nop			@ (mov r8, r8)
 8013ee0:	20000200 	.word	0x20000200
 8013ee4:	08015c39 	.word	0x08015c39
 8013ee8:	20000210 	.word	0x20000210

08013eec <cleanup_stdio>:
 8013eec:	6841      	ldr	r1, [r0, #4]
 8013eee:	4b0b      	ldr	r3, [pc, #44]	@ (8013f1c <cleanup_stdio+0x30>)
 8013ef0:	b510      	push	{r4, lr}
 8013ef2:	0004      	movs	r4, r0
 8013ef4:	4299      	cmp	r1, r3
 8013ef6:	d001      	beq.n	8013efc <cleanup_stdio+0x10>
 8013ef8:	f001 fe9e 	bl	8015c38 <_fflush_r>
 8013efc:	68a1      	ldr	r1, [r4, #8]
 8013efe:	4b08      	ldr	r3, [pc, #32]	@ (8013f20 <cleanup_stdio+0x34>)
 8013f00:	4299      	cmp	r1, r3
 8013f02:	d002      	beq.n	8013f0a <cleanup_stdio+0x1e>
 8013f04:	0020      	movs	r0, r4
 8013f06:	f001 fe97 	bl	8015c38 <_fflush_r>
 8013f0a:	68e1      	ldr	r1, [r4, #12]
 8013f0c:	4b05      	ldr	r3, [pc, #20]	@ (8013f24 <cleanup_stdio+0x38>)
 8013f0e:	4299      	cmp	r1, r3
 8013f10:	d002      	beq.n	8013f18 <cleanup_stdio+0x2c>
 8013f12:	0020      	movs	r0, r4
 8013f14:	f001 fe90 	bl	8015c38 <_fflush_r>
 8013f18:	bd10      	pop	{r4, pc}
 8013f1a:	46c0      	nop			@ (mov r8, r8)
 8013f1c:	20001e5c 	.word	0x20001e5c
 8013f20:	20001ec4 	.word	0x20001ec4
 8013f24:	20001f2c 	.word	0x20001f2c

08013f28 <global_stdio_init.part.0>:
 8013f28:	b510      	push	{r4, lr}
 8013f2a:	4b09      	ldr	r3, [pc, #36]	@ (8013f50 <global_stdio_init.part.0+0x28>)
 8013f2c:	4a09      	ldr	r2, [pc, #36]	@ (8013f54 <global_stdio_init.part.0+0x2c>)
 8013f2e:	2104      	movs	r1, #4
 8013f30:	601a      	str	r2, [r3, #0]
 8013f32:	4809      	ldr	r0, [pc, #36]	@ (8013f58 <global_stdio_init.part.0+0x30>)
 8013f34:	2200      	movs	r2, #0
 8013f36:	f7ff ff95 	bl	8013e64 <std>
 8013f3a:	2201      	movs	r2, #1
 8013f3c:	2109      	movs	r1, #9
 8013f3e:	4807      	ldr	r0, [pc, #28]	@ (8013f5c <global_stdio_init.part.0+0x34>)
 8013f40:	f7ff ff90 	bl	8013e64 <std>
 8013f44:	2202      	movs	r2, #2
 8013f46:	2112      	movs	r1, #18
 8013f48:	4805      	ldr	r0, [pc, #20]	@ (8013f60 <global_stdio_init.part.0+0x38>)
 8013f4a:	f7ff ff8b 	bl	8013e64 <std>
 8013f4e:	bd10      	pop	{r4, pc}
 8013f50:	20001f94 	.word	0x20001f94
 8013f54:	08013ed1 	.word	0x08013ed1
 8013f58:	20001e5c 	.word	0x20001e5c
 8013f5c:	20001ec4 	.word	0x20001ec4
 8013f60:	20001f2c 	.word	0x20001f2c

08013f64 <__sfp_lock_acquire>:
 8013f64:	b510      	push	{r4, lr}
 8013f66:	4802      	ldr	r0, [pc, #8]	@ (8013f70 <__sfp_lock_acquire+0xc>)
 8013f68:	f000 f93f 	bl	80141ea <__retarget_lock_acquire_recursive>
 8013f6c:	bd10      	pop	{r4, pc}
 8013f6e:	46c0      	nop			@ (mov r8, r8)
 8013f70:	20001f9d 	.word	0x20001f9d

08013f74 <__sfp_lock_release>:
 8013f74:	b510      	push	{r4, lr}
 8013f76:	4802      	ldr	r0, [pc, #8]	@ (8013f80 <__sfp_lock_release+0xc>)
 8013f78:	f000 f938 	bl	80141ec <__retarget_lock_release_recursive>
 8013f7c:	bd10      	pop	{r4, pc}
 8013f7e:	46c0      	nop			@ (mov r8, r8)
 8013f80:	20001f9d 	.word	0x20001f9d

08013f84 <__sinit>:
 8013f84:	b510      	push	{r4, lr}
 8013f86:	0004      	movs	r4, r0
 8013f88:	f7ff ffec 	bl	8013f64 <__sfp_lock_acquire>
 8013f8c:	6a23      	ldr	r3, [r4, #32]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d002      	beq.n	8013f98 <__sinit+0x14>
 8013f92:	f7ff ffef 	bl	8013f74 <__sfp_lock_release>
 8013f96:	bd10      	pop	{r4, pc}
 8013f98:	4b04      	ldr	r3, [pc, #16]	@ (8013fac <__sinit+0x28>)
 8013f9a:	6223      	str	r3, [r4, #32]
 8013f9c:	4b04      	ldr	r3, [pc, #16]	@ (8013fb0 <__sinit+0x2c>)
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d1f6      	bne.n	8013f92 <__sinit+0xe>
 8013fa4:	f7ff ffc0 	bl	8013f28 <global_stdio_init.part.0>
 8013fa8:	e7f3      	b.n	8013f92 <__sinit+0xe>
 8013faa:	46c0      	nop			@ (mov r8, r8)
 8013fac:	08013eed 	.word	0x08013eed
 8013fb0:	20001f94 	.word	0x20001f94

08013fb4 <_fwalk_sglue>:
 8013fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013fb6:	0014      	movs	r4, r2
 8013fb8:	2600      	movs	r6, #0
 8013fba:	9000      	str	r0, [sp, #0]
 8013fbc:	9101      	str	r1, [sp, #4]
 8013fbe:	68a5      	ldr	r5, [r4, #8]
 8013fc0:	6867      	ldr	r7, [r4, #4]
 8013fc2:	3f01      	subs	r7, #1
 8013fc4:	d504      	bpl.n	8013fd0 <_fwalk_sglue+0x1c>
 8013fc6:	6824      	ldr	r4, [r4, #0]
 8013fc8:	2c00      	cmp	r4, #0
 8013fca:	d1f8      	bne.n	8013fbe <_fwalk_sglue+0xa>
 8013fcc:	0030      	movs	r0, r6
 8013fce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013fd0:	89ab      	ldrh	r3, [r5, #12]
 8013fd2:	2b01      	cmp	r3, #1
 8013fd4:	d908      	bls.n	8013fe8 <_fwalk_sglue+0x34>
 8013fd6:	220e      	movs	r2, #14
 8013fd8:	5eab      	ldrsh	r3, [r5, r2]
 8013fda:	3301      	adds	r3, #1
 8013fdc:	d004      	beq.n	8013fe8 <_fwalk_sglue+0x34>
 8013fde:	0029      	movs	r1, r5
 8013fe0:	9800      	ldr	r0, [sp, #0]
 8013fe2:	9b01      	ldr	r3, [sp, #4]
 8013fe4:	4798      	blx	r3
 8013fe6:	4306      	orrs	r6, r0
 8013fe8:	3568      	adds	r5, #104	@ 0x68
 8013fea:	e7ea      	b.n	8013fc2 <_fwalk_sglue+0xe>

08013fec <siprintf>:
 8013fec:	b40e      	push	{r1, r2, r3}
 8013fee:	b500      	push	{lr}
 8013ff0:	490b      	ldr	r1, [pc, #44]	@ (8014020 <siprintf+0x34>)
 8013ff2:	b09c      	sub	sp, #112	@ 0x70
 8013ff4:	ab1d      	add	r3, sp, #116	@ 0x74
 8013ff6:	9002      	str	r0, [sp, #8]
 8013ff8:	9006      	str	r0, [sp, #24]
 8013ffa:	9107      	str	r1, [sp, #28]
 8013ffc:	9104      	str	r1, [sp, #16]
 8013ffe:	4809      	ldr	r0, [pc, #36]	@ (8014024 <siprintf+0x38>)
 8014000:	4909      	ldr	r1, [pc, #36]	@ (8014028 <siprintf+0x3c>)
 8014002:	cb04      	ldmia	r3!, {r2}
 8014004:	9105      	str	r1, [sp, #20]
 8014006:	6800      	ldr	r0, [r0, #0]
 8014008:	a902      	add	r1, sp, #8
 801400a:	9301      	str	r3, [sp, #4]
 801400c:	f001 fc90 	bl	8015930 <_svfiprintf_r>
 8014010:	2200      	movs	r2, #0
 8014012:	9b02      	ldr	r3, [sp, #8]
 8014014:	701a      	strb	r2, [r3, #0]
 8014016:	b01c      	add	sp, #112	@ 0x70
 8014018:	bc08      	pop	{r3}
 801401a:	b003      	add	sp, #12
 801401c:	4718      	bx	r3
 801401e:	46c0      	nop			@ (mov r8, r8)
 8014020:	7fffffff 	.word	0x7fffffff
 8014024:	2000020c 	.word	0x2000020c
 8014028:	ffff0208 	.word	0xffff0208

0801402c <__sread>:
 801402c:	b570      	push	{r4, r5, r6, lr}
 801402e:	000c      	movs	r4, r1
 8014030:	250e      	movs	r5, #14
 8014032:	5f49      	ldrsh	r1, [r1, r5]
 8014034:	f000 f886 	bl	8014144 <_read_r>
 8014038:	2800      	cmp	r0, #0
 801403a:	db03      	blt.n	8014044 <__sread+0x18>
 801403c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801403e:	181b      	adds	r3, r3, r0
 8014040:	6563      	str	r3, [r4, #84]	@ 0x54
 8014042:	bd70      	pop	{r4, r5, r6, pc}
 8014044:	89a3      	ldrh	r3, [r4, #12]
 8014046:	4a02      	ldr	r2, [pc, #8]	@ (8014050 <__sread+0x24>)
 8014048:	4013      	ands	r3, r2
 801404a:	81a3      	strh	r3, [r4, #12]
 801404c:	e7f9      	b.n	8014042 <__sread+0x16>
 801404e:	46c0      	nop			@ (mov r8, r8)
 8014050:	ffffefff 	.word	0xffffefff

08014054 <__swrite>:
 8014054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014056:	001f      	movs	r7, r3
 8014058:	898b      	ldrh	r3, [r1, #12]
 801405a:	0005      	movs	r5, r0
 801405c:	000c      	movs	r4, r1
 801405e:	0016      	movs	r6, r2
 8014060:	05db      	lsls	r3, r3, #23
 8014062:	d505      	bpl.n	8014070 <__swrite+0x1c>
 8014064:	230e      	movs	r3, #14
 8014066:	5ec9      	ldrsh	r1, [r1, r3]
 8014068:	2200      	movs	r2, #0
 801406a:	2302      	movs	r3, #2
 801406c:	f000 f856 	bl	801411c <_lseek_r>
 8014070:	89a3      	ldrh	r3, [r4, #12]
 8014072:	4a05      	ldr	r2, [pc, #20]	@ (8014088 <__swrite+0x34>)
 8014074:	0028      	movs	r0, r5
 8014076:	4013      	ands	r3, r2
 8014078:	81a3      	strh	r3, [r4, #12]
 801407a:	0032      	movs	r2, r6
 801407c:	230e      	movs	r3, #14
 801407e:	5ee1      	ldrsh	r1, [r4, r3]
 8014080:	003b      	movs	r3, r7
 8014082:	f000 f873 	bl	801416c <_write_r>
 8014086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014088:	ffffefff 	.word	0xffffefff

0801408c <__sseek>:
 801408c:	b570      	push	{r4, r5, r6, lr}
 801408e:	000c      	movs	r4, r1
 8014090:	250e      	movs	r5, #14
 8014092:	5f49      	ldrsh	r1, [r1, r5]
 8014094:	f000 f842 	bl	801411c <_lseek_r>
 8014098:	89a3      	ldrh	r3, [r4, #12]
 801409a:	1c42      	adds	r2, r0, #1
 801409c:	d103      	bne.n	80140a6 <__sseek+0x1a>
 801409e:	4a05      	ldr	r2, [pc, #20]	@ (80140b4 <__sseek+0x28>)
 80140a0:	4013      	ands	r3, r2
 80140a2:	81a3      	strh	r3, [r4, #12]
 80140a4:	bd70      	pop	{r4, r5, r6, pc}
 80140a6:	2280      	movs	r2, #128	@ 0x80
 80140a8:	0152      	lsls	r2, r2, #5
 80140aa:	4313      	orrs	r3, r2
 80140ac:	81a3      	strh	r3, [r4, #12]
 80140ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80140b0:	e7f8      	b.n	80140a4 <__sseek+0x18>
 80140b2:	46c0      	nop			@ (mov r8, r8)
 80140b4:	ffffefff 	.word	0xffffefff

080140b8 <__sclose>:
 80140b8:	b510      	push	{r4, lr}
 80140ba:	230e      	movs	r3, #14
 80140bc:	5ec9      	ldrsh	r1, [r1, r3]
 80140be:	f000 f81b 	bl	80140f8 <_close_r>
 80140c2:	bd10      	pop	{r4, pc}

080140c4 <memcmp>:
 80140c4:	b530      	push	{r4, r5, lr}
 80140c6:	2400      	movs	r4, #0
 80140c8:	3901      	subs	r1, #1
 80140ca:	42a2      	cmp	r2, r4
 80140cc:	d101      	bne.n	80140d2 <memcmp+0xe>
 80140ce:	2000      	movs	r0, #0
 80140d0:	e005      	b.n	80140de <memcmp+0x1a>
 80140d2:	5d03      	ldrb	r3, [r0, r4]
 80140d4:	3401      	adds	r4, #1
 80140d6:	5d0d      	ldrb	r5, [r1, r4]
 80140d8:	42ab      	cmp	r3, r5
 80140da:	d0f6      	beq.n	80140ca <memcmp+0x6>
 80140dc:	1b58      	subs	r0, r3, r5
 80140de:	bd30      	pop	{r4, r5, pc}

080140e0 <memset>:
 80140e0:	0003      	movs	r3, r0
 80140e2:	1882      	adds	r2, r0, r2
 80140e4:	4293      	cmp	r3, r2
 80140e6:	d100      	bne.n	80140ea <memset+0xa>
 80140e8:	4770      	bx	lr
 80140ea:	7019      	strb	r1, [r3, #0]
 80140ec:	3301      	adds	r3, #1
 80140ee:	e7f9      	b.n	80140e4 <memset+0x4>

080140f0 <_localeconv_r>:
 80140f0:	4800      	ldr	r0, [pc, #0]	@ (80140f4 <_localeconv_r+0x4>)
 80140f2:	4770      	bx	lr
 80140f4:	2000034c 	.word	0x2000034c

080140f8 <_close_r>:
 80140f8:	2300      	movs	r3, #0
 80140fa:	b570      	push	{r4, r5, r6, lr}
 80140fc:	4d06      	ldr	r5, [pc, #24]	@ (8014118 <_close_r+0x20>)
 80140fe:	0004      	movs	r4, r0
 8014100:	0008      	movs	r0, r1
 8014102:	602b      	str	r3, [r5, #0]
 8014104:	f7f0 f890 	bl	8004228 <_close>
 8014108:	1c43      	adds	r3, r0, #1
 801410a:	d103      	bne.n	8014114 <_close_r+0x1c>
 801410c:	682b      	ldr	r3, [r5, #0]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d000      	beq.n	8014114 <_close_r+0x1c>
 8014112:	6023      	str	r3, [r4, #0]
 8014114:	bd70      	pop	{r4, r5, r6, pc}
 8014116:	46c0      	nop			@ (mov r8, r8)
 8014118:	20001f98 	.word	0x20001f98

0801411c <_lseek_r>:
 801411c:	b570      	push	{r4, r5, r6, lr}
 801411e:	0004      	movs	r4, r0
 8014120:	0008      	movs	r0, r1
 8014122:	0011      	movs	r1, r2
 8014124:	001a      	movs	r2, r3
 8014126:	2300      	movs	r3, #0
 8014128:	4d05      	ldr	r5, [pc, #20]	@ (8014140 <_lseek_r+0x24>)
 801412a:	602b      	str	r3, [r5, #0]
 801412c:	f7f0 f89d 	bl	800426a <_lseek>
 8014130:	1c43      	adds	r3, r0, #1
 8014132:	d103      	bne.n	801413c <_lseek_r+0x20>
 8014134:	682b      	ldr	r3, [r5, #0]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d000      	beq.n	801413c <_lseek_r+0x20>
 801413a:	6023      	str	r3, [r4, #0]
 801413c:	bd70      	pop	{r4, r5, r6, pc}
 801413e:	46c0      	nop			@ (mov r8, r8)
 8014140:	20001f98 	.word	0x20001f98

08014144 <_read_r>:
 8014144:	b570      	push	{r4, r5, r6, lr}
 8014146:	0004      	movs	r4, r0
 8014148:	0008      	movs	r0, r1
 801414a:	0011      	movs	r1, r2
 801414c:	001a      	movs	r2, r3
 801414e:	2300      	movs	r3, #0
 8014150:	4d05      	ldr	r5, [pc, #20]	@ (8014168 <_read_r+0x24>)
 8014152:	602b      	str	r3, [r5, #0]
 8014154:	f7f0 f82f 	bl	80041b6 <_read>
 8014158:	1c43      	adds	r3, r0, #1
 801415a:	d103      	bne.n	8014164 <_read_r+0x20>
 801415c:	682b      	ldr	r3, [r5, #0]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d000      	beq.n	8014164 <_read_r+0x20>
 8014162:	6023      	str	r3, [r4, #0]
 8014164:	bd70      	pop	{r4, r5, r6, pc}
 8014166:	46c0      	nop			@ (mov r8, r8)
 8014168:	20001f98 	.word	0x20001f98

0801416c <_write_r>:
 801416c:	b570      	push	{r4, r5, r6, lr}
 801416e:	0004      	movs	r4, r0
 8014170:	0008      	movs	r0, r1
 8014172:	0011      	movs	r1, r2
 8014174:	001a      	movs	r2, r3
 8014176:	2300      	movs	r3, #0
 8014178:	4d05      	ldr	r5, [pc, #20]	@ (8014190 <_write_r+0x24>)
 801417a:	602b      	str	r3, [r5, #0]
 801417c:	f7f0 f838 	bl	80041f0 <_write>
 8014180:	1c43      	adds	r3, r0, #1
 8014182:	d103      	bne.n	801418c <_write_r+0x20>
 8014184:	682b      	ldr	r3, [r5, #0]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d000      	beq.n	801418c <_write_r+0x20>
 801418a:	6023      	str	r3, [r4, #0]
 801418c:	bd70      	pop	{r4, r5, r6, pc}
 801418e:	46c0      	nop			@ (mov r8, r8)
 8014190:	20001f98 	.word	0x20001f98

08014194 <__errno>:
 8014194:	4b01      	ldr	r3, [pc, #4]	@ (801419c <__errno+0x8>)
 8014196:	6818      	ldr	r0, [r3, #0]
 8014198:	4770      	bx	lr
 801419a:	46c0      	nop			@ (mov r8, r8)
 801419c:	2000020c 	.word	0x2000020c

080141a0 <__libc_init_array>:
 80141a0:	b570      	push	{r4, r5, r6, lr}
 80141a2:	2600      	movs	r6, #0
 80141a4:	4c0c      	ldr	r4, [pc, #48]	@ (80141d8 <__libc_init_array+0x38>)
 80141a6:	4d0d      	ldr	r5, [pc, #52]	@ (80141dc <__libc_init_array+0x3c>)
 80141a8:	1b64      	subs	r4, r4, r5
 80141aa:	10a4      	asrs	r4, r4, #2
 80141ac:	42a6      	cmp	r6, r4
 80141ae:	d109      	bne.n	80141c4 <__libc_init_array+0x24>
 80141b0:	2600      	movs	r6, #0
 80141b2:	f002 fa15 	bl	80165e0 <_init>
 80141b6:	4c0a      	ldr	r4, [pc, #40]	@ (80141e0 <__libc_init_array+0x40>)
 80141b8:	4d0a      	ldr	r5, [pc, #40]	@ (80141e4 <__libc_init_array+0x44>)
 80141ba:	1b64      	subs	r4, r4, r5
 80141bc:	10a4      	asrs	r4, r4, #2
 80141be:	42a6      	cmp	r6, r4
 80141c0:	d105      	bne.n	80141ce <__libc_init_array+0x2e>
 80141c2:	bd70      	pop	{r4, r5, r6, pc}
 80141c4:	00b3      	lsls	r3, r6, #2
 80141c6:	58eb      	ldr	r3, [r5, r3]
 80141c8:	4798      	blx	r3
 80141ca:	3601      	adds	r6, #1
 80141cc:	e7ee      	b.n	80141ac <__libc_init_array+0xc>
 80141ce:	00b3      	lsls	r3, r6, #2
 80141d0:	58eb      	ldr	r3, [r5, r3]
 80141d2:	4798      	blx	r3
 80141d4:	3601      	adds	r6, #1
 80141d6:	e7f2      	b.n	80141be <__libc_init_array+0x1e>
 80141d8:	0801a2e0 	.word	0x0801a2e0
 80141dc:	0801a2e0 	.word	0x0801a2e0
 80141e0:	0801a2e4 	.word	0x0801a2e4
 80141e4:	0801a2e0 	.word	0x0801a2e0

080141e8 <__retarget_lock_init_recursive>:
 80141e8:	4770      	bx	lr

080141ea <__retarget_lock_acquire_recursive>:
 80141ea:	4770      	bx	lr

080141ec <__retarget_lock_release_recursive>:
 80141ec:	4770      	bx	lr

080141ee <memchr>:
 80141ee:	b2c9      	uxtb	r1, r1
 80141f0:	1882      	adds	r2, r0, r2
 80141f2:	4290      	cmp	r0, r2
 80141f4:	d101      	bne.n	80141fa <memchr+0xc>
 80141f6:	2000      	movs	r0, #0
 80141f8:	4770      	bx	lr
 80141fa:	7803      	ldrb	r3, [r0, #0]
 80141fc:	428b      	cmp	r3, r1
 80141fe:	d0fb      	beq.n	80141f8 <memchr+0xa>
 8014200:	3001      	adds	r0, #1
 8014202:	e7f6      	b.n	80141f2 <memchr+0x4>

08014204 <memcpy>:
 8014204:	2300      	movs	r3, #0
 8014206:	b510      	push	{r4, lr}
 8014208:	429a      	cmp	r2, r3
 801420a:	d100      	bne.n	801420e <memcpy+0xa>
 801420c:	bd10      	pop	{r4, pc}
 801420e:	5ccc      	ldrb	r4, [r1, r3]
 8014210:	54c4      	strb	r4, [r0, r3]
 8014212:	3301      	adds	r3, #1
 8014214:	e7f8      	b.n	8014208 <memcpy+0x4>

08014216 <quorem>:
 8014216:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014218:	6902      	ldr	r2, [r0, #16]
 801421a:	690f      	ldr	r7, [r1, #16]
 801421c:	b087      	sub	sp, #28
 801421e:	0006      	movs	r6, r0
 8014220:	000b      	movs	r3, r1
 8014222:	2000      	movs	r0, #0
 8014224:	9102      	str	r1, [sp, #8]
 8014226:	42ba      	cmp	r2, r7
 8014228:	db6d      	blt.n	8014306 <quorem+0xf0>
 801422a:	3f01      	subs	r7, #1
 801422c:	00bc      	lsls	r4, r7, #2
 801422e:	3314      	adds	r3, #20
 8014230:	9305      	str	r3, [sp, #20]
 8014232:	191b      	adds	r3, r3, r4
 8014234:	9303      	str	r3, [sp, #12]
 8014236:	0033      	movs	r3, r6
 8014238:	3314      	adds	r3, #20
 801423a:	191c      	adds	r4, r3, r4
 801423c:	9301      	str	r3, [sp, #4]
 801423e:	6823      	ldr	r3, [r4, #0]
 8014240:	9304      	str	r3, [sp, #16]
 8014242:	9b03      	ldr	r3, [sp, #12]
 8014244:	9804      	ldr	r0, [sp, #16]
 8014246:	681d      	ldr	r5, [r3, #0]
 8014248:	3501      	adds	r5, #1
 801424a:	0029      	movs	r1, r5
 801424c:	f7eb ff78 	bl	8000140 <__udivsi3>
 8014250:	9b04      	ldr	r3, [sp, #16]
 8014252:	9000      	str	r0, [sp, #0]
 8014254:	42ab      	cmp	r3, r5
 8014256:	d32b      	bcc.n	80142b0 <quorem+0x9a>
 8014258:	9b05      	ldr	r3, [sp, #20]
 801425a:	9d01      	ldr	r5, [sp, #4]
 801425c:	469c      	mov	ip, r3
 801425e:	2300      	movs	r3, #0
 8014260:	9305      	str	r3, [sp, #20]
 8014262:	9304      	str	r3, [sp, #16]
 8014264:	4662      	mov	r2, ip
 8014266:	ca08      	ldmia	r2!, {r3}
 8014268:	6828      	ldr	r0, [r5, #0]
 801426a:	4694      	mov	ip, r2
 801426c:	9a00      	ldr	r2, [sp, #0]
 801426e:	b299      	uxth	r1, r3
 8014270:	4351      	muls	r1, r2
 8014272:	9a05      	ldr	r2, [sp, #20]
 8014274:	0c1b      	lsrs	r3, r3, #16
 8014276:	1889      	adds	r1, r1, r2
 8014278:	9a00      	ldr	r2, [sp, #0]
 801427a:	4353      	muls	r3, r2
 801427c:	0c0a      	lsrs	r2, r1, #16
 801427e:	189b      	adds	r3, r3, r2
 8014280:	0c1a      	lsrs	r2, r3, #16
 8014282:	b289      	uxth	r1, r1
 8014284:	9205      	str	r2, [sp, #20]
 8014286:	b282      	uxth	r2, r0
 8014288:	1a52      	subs	r2, r2, r1
 801428a:	9904      	ldr	r1, [sp, #16]
 801428c:	0c00      	lsrs	r0, r0, #16
 801428e:	1852      	adds	r2, r2, r1
 8014290:	b29b      	uxth	r3, r3
 8014292:	1411      	asrs	r1, r2, #16
 8014294:	1ac3      	subs	r3, r0, r3
 8014296:	185b      	adds	r3, r3, r1
 8014298:	1419      	asrs	r1, r3, #16
 801429a:	b292      	uxth	r2, r2
 801429c:	041b      	lsls	r3, r3, #16
 801429e:	431a      	orrs	r2, r3
 80142a0:	9b03      	ldr	r3, [sp, #12]
 80142a2:	9104      	str	r1, [sp, #16]
 80142a4:	c504      	stmia	r5!, {r2}
 80142a6:	4563      	cmp	r3, ip
 80142a8:	d2dc      	bcs.n	8014264 <quorem+0x4e>
 80142aa:	6823      	ldr	r3, [r4, #0]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d030      	beq.n	8014312 <quorem+0xfc>
 80142b0:	0030      	movs	r0, r6
 80142b2:	9902      	ldr	r1, [sp, #8]
 80142b4:	f001 f9c6 	bl	8015644 <__mcmp>
 80142b8:	2800      	cmp	r0, #0
 80142ba:	db23      	blt.n	8014304 <quorem+0xee>
 80142bc:	0034      	movs	r4, r6
 80142be:	2500      	movs	r5, #0
 80142c0:	9902      	ldr	r1, [sp, #8]
 80142c2:	3414      	adds	r4, #20
 80142c4:	3114      	adds	r1, #20
 80142c6:	6823      	ldr	r3, [r4, #0]
 80142c8:	c901      	ldmia	r1!, {r0}
 80142ca:	9302      	str	r3, [sp, #8]
 80142cc:	466b      	mov	r3, sp
 80142ce:	891b      	ldrh	r3, [r3, #8]
 80142d0:	b282      	uxth	r2, r0
 80142d2:	1a9a      	subs	r2, r3, r2
 80142d4:	9b02      	ldr	r3, [sp, #8]
 80142d6:	1952      	adds	r2, r2, r5
 80142d8:	0c00      	lsrs	r0, r0, #16
 80142da:	0c1b      	lsrs	r3, r3, #16
 80142dc:	1a1b      	subs	r3, r3, r0
 80142de:	1410      	asrs	r0, r2, #16
 80142e0:	181b      	adds	r3, r3, r0
 80142e2:	141d      	asrs	r5, r3, #16
 80142e4:	b292      	uxth	r2, r2
 80142e6:	041b      	lsls	r3, r3, #16
 80142e8:	431a      	orrs	r2, r3
 80142ea:	9b03      	ldr	r3, [sp, #12]
 80142ec:	c404      	stmia	r4!, {r2}
 80142ee:	428b      	cmp	r3, r1
 80142f0:	d2e9      	bcs.n	80142c6 <quorem+0xb0>
 80142f2:	9a01      	ldr	r2, [sp, #4]
 80142f4:	00bb      	lsls	r3, r7, #2
 80142f6:	18d3      	adds	r3, r2, r3
 80142f8:	681a      	ldr	r2, [r3, #0]
 80142fa:	2a00      	cmp	r2, #0
 80142fc:	d013      	beq.n	8014326 <quorem+0x110>
 80142fe:	9b00      	ldr	r3, [sp, #0]
 8014300:	3301      	adds	r3, #1
 8014302:	9300      	str	r3, [sp, #0]
 8014304:	9800      	ldr	r0, [sp, #0]
 8014306:	b007      	add	sp, #28
 8014308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801430a:	6823      	ldr	r3, [r4, #0]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d104      	bne.n	801431a <quorem+0x104>
 8014310:	3f01      	subs	r7, #1
 8014312:	9b01      	ldr	r3, [sp, #4]
 8014314:	3c04      	subs	r4, #4
 8014316:	42a3      	cmp	r3, r4
 8014318:	d3f7      	bcc.n	801430a <quorem+0xf4>
 801431a:	6137      	str	r7, [r6, #16]
 801431c:	e7c8      	b.n	80142b0 <quorem+0x9a>
 801431e:	681a      	ldr	r2, [r3, #0]
 8014320:	2a00      	cmp	r2, #0
 8014322:	d104      	bne.n	801432e <quorem+0x118>
 8014324:	3f01      	subs	r7, #1
 8014326:	9a01      	ldr	r2, [sp, #4]
 8014328:	3b04      	subs	r3, #4
 801432a:	429a      	cmp	r2, r3
 801432c:	d3f7      	bcc.n	801431e <quorem+0x108>
 801432e:	6137      	str	r7, [r6, #16]
 8014330:	e7e5      	b.n	80142fe <quorem+0xe8>
	...

08014334 <_dtoa_r>:
 8014334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014336:	0014      	movs	r4, r2
 8014338:	001d      	movs	r5, r3
 801433a:	69c6      	ldr	r6, [r0, #28]
 801433c:	b09d      	sub	sp, #116	@ 0x74
 801433e:	940a      	str	r4, [sp, #40]	@ 0x28
 8014340:	950b      	str	r5, [sp, #44]	@ 0x2c
 8014342:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8014344:	9003      	str	r0, [sp, #12]
 8014346:	2e00      	cmp	r6, #0
 8014348:	d10f      	bne.n	801436a <_dtoa_r+0x36>
 801434a:	2010      	movs	r0, #16
 801434c:	f000 fe30 	bl	8014fb0 <malloc>
 8014350:	9b03      	ldr	r3, [sp, #12]
 8014352:	1e02      	subs	r2, r0, #0
 8014354:	61d8      	str	r0, [r3, #28]
 8014356:	d104      	bne.n	8014362 <_dtoa_r+0x2e>
 8014358:	21ef      	movs	r1, #239	@ 0xef
 801435a:	4bc7      	ldr	r3, [pc, #796]	@ (8014678 <_dtoa_r+0x344>)
 801435c:	48c7      	ldr	r0, [pc, #796]	@ (801467c <_dtoa_r+0x348>)
 801435e:	f001 fcbb 	bl	8015cd8 <__assert_func>
 8014362:	6046      	str	r6, [r0, #4]
 8014364:	6086      	str	r6, [r0, #8]
 8014366:	6006      	str	r6, [r0, #0]
 8014368:	60c6      	str	r6, [r0, #12]
 801436a:	9b03      	ldr	r3, [sp, #12]
 801436c:	69db      	ldr	r3, [r3, #28]
 801436e:	6819      	ldr	r1, [r3, #0]
 8014370:	2900      	cmp	r1, #0
 8014372:	d00b      	beq.n	801438c <_dtoa_r+0x58>
 8014374:	685a      	ldr	r2, [r3, #4]
 8014376:	2301      	movs	r3, #1
 8014378:	4093      	lsls	r3, r2
 801437a:	604a      	str	r2, [r1, #4]
 801437c:	608b      	str	r3, [r1, #8]
 801437e:	9803      	ldr	r0, [sp, #12]
 8014380:	f000 ff16 	bl	80151b0 <_Bfree>
 8014384:	2200      	movs	r2, #0
 8014386:	9b03      	ldr	r3, [sp, #12]
 8014388:	69db      	ldr	r3, [r3, #28]
 801438a:	601a      	str	r2, [r3, #0]
 801438c:	2d00      	cmp	r5, #0
 801438e:	da1e      	bge.n	80143ce <_dtoa_r+0x9a>
 8014390:	2301      	movs	r3, #1
 8014392:	603b      	str	r3, [r7, #0]
 8014394:	006b      	lsls	r3, r5, #1
 8014396:	085b      	lsrs	r3, r3, #1
 8014398:	930b      	str	r3, [sp, #44]	@ 0x2c
 801439a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801439c:	4bb8      	ldr	r3, [pc, #736]	@ (8014680 <_dtoa_r+0x34c>)
 801439e:	4ab8      	ldr	r2, [pc, #736]	@ (8014680 <_dtoa_r+0x34c>)
 80143a0:	403b      	ands	r3, r7
 80143a2:	4293      	cmp	r3, r2
 80143a4:	d116      	bne.n	80143d4 <_dtoa_r+0xa0>
 80143a6:	4bb7      	ldr	r3, [pc, #732]	@ (8014684 <_dtoa_r+0x350>)
 80143a8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80143aa:	6013      	str	r3, [r2, #0]
 80143ac:	033b      	lsls	r3, r7, #12
 80143ae:	0b1b      	lsrs	r3, r3, #12
 80143b0:	4323      	orrs	r3, r4
 80143b2:	d101      	bne.n	80143b8 <_dtoa_r+0x84>
 80143b4:	f000 fd83 	bl	8014ebe <_dtoa_r+0xb8a>
 80143b8:	4bb3      	ldr	r3, [pc, #716]	@ (8014688 <_dtoa_r+0x354>)
 80143ba:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80143bc:	9308      	str	r3, [sp, #32]
 80143be:	2a00      	cmp	r2, #0
 80143c0:	d002      	beq.n	80143c8 <_dtoa_r+0x94>
 80143c2:	4bb2      	ldr	r3, [pc, #712]	@ (801468c <_dtoa_r+0x358>)
 80143c4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80143c6:	6013      	str	r3, [r2, #0]
 80143c8:	9808      	ldr	r0, [sp, #32]
 80143ca:	b01d      	add	sp, #116	@ 0x74
 80143cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143ce:	2300      	movs	r3, #0
 80143d0:	603b      	str	r3, [r7, #0]
 80143d2:	e7e2      	b.n	801439a <_dtoa_r+0x66>
 80143d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80143d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80143d8:	9212      	str	r2, [sp, #72]	@ 0x48
 80143da:	9313      	str	r3, [sp, #76]	@ 0x4c
 80143dc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80143de:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80143e0:	2200      	movs	r2, #0
 80143e2:	2300      	movs	r3, #0
 80143e4:	f7ec f832 	bl	800044c <__aeabi_dcmpeq>
 80143e8:	1e06      	subs	r6, r0, #0
 80143ea:	d00b      	beq.n	8014404 <_dtoa_r+0xd0>
 80143ec:	2301      	movs	r3, #1
 80143ee:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80143f0:	6013      	str	r3, [r2, #0]
 80143f2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d002      	beq.n	80143fe <_dtoa_r+0xca>
 80143f8:	4ba5      	ldr	r3, [pc, #660]	@ (8014690 <_dtoa_r+0x35c>)
 80143fa:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80143fc:	6013      	str	r3, [r2, #0]
 80143fe:	4ba5      	ldr	r3, [pc, #660]	@ (8014694 <_dtoa_r+0x360>)
 8014400:	9308      	str	r3, [sp, #32]
 8014402:	e7e1      	b.n	80143c8 <_dtoa_r+0x94>
 8014404:	ab1a      	add	r3, sp, #104	@ 0x68
 8014406:	9301      	str	r3, [sp, #4]
 8014408:	ab1b      	add	r3, sp, #108	@ 0x6c
 801440a:	9300      	str	r3, [sp, #0]
 801440c:	9803      	ldr	r0, [sp, #12]
 801440e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8014410:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014412:	f001 f9cd 	bl	80157b0 <__d2b>
 8014416:	007a      	lsls	r2, r7, #1
 8014418:	9005      	str	r0, [sp, #20]
 801441a:	0d52      	lsrs	r2, r2, #21
 801441c:	d100      	bne.n	8014420 <_dtoa_r+0xec>
 801441e:	e07b      	b.n	8014518 <_dtoa_r+0x1e4>
 8014420:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014422:	9618      	str	r6, [sp, #96]	@ 0x60
 8014424:	0319      	lsls	r1, r3, #12
 8014426:	4b9c      	ldr	r3, [pc, #624]	@ (8014698 <_dtoa_r+0x364>)
 8014428:	0b09      	lsrs	r1, r1, #12
 801442a:	430b      	orrs	r3, r1
 801442c:	499b      	ldr	r1, [pc, #620]	@ (801469c <_dtoa_r+0x368>)
 801442e:	1857      	adds	r7, r2, r1
 8014430:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8014432:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8014434:	0019      	movs	r1, r3
 8014436:	2200      	movs	r2, #0
 8014438:	4b99      	ldr	r3, [pc, #612]	@ (80146a0 <_dtoa_r+0x36c>)
 801443a:	f7ed fdb3 	bl	8001fa4 <__aeabi_dsub>
 801443e:	4a99      	ldr	r2, [pc, #612]	@ (80146a4 <_dtoa_r+0x370>)
 8014440:	4b99      	ldr	r3, [pc, #612]	@ (80146a8 <_dtoa_r+0x374>)
 8014442:	f7ed fae7 	bl	8001a14 <__aeabi_dmul>
 8014446:	4a99      	ldr	r2, [pc, #612]	@ (80146ac <_dtoa_r+0x378>)
 8014448:	4b99      	ldr	r3, [pc, #612]	@ (80146b0 <_dtoa_r+0x37c>)
 801444a:	f7ec fb3b 	bl	8000ac4 <__aeabi_dadd>
 801444e:	0004      	movs	r4, r0
 8014450:	0038      	movs	r0, r7
 8014452:	000d      	movs	r5, r1
 8014454:	f7ee f9a0 	bl	8002798 <__aeabi_i2d>
 8014458:	4a96      	ldr	r2, [pc, #600]	@ (80146b4 <_dtoa_r+0x380>)
 801445a:	4b97      	ldr	r3, [pc, #604]	@ (80146b8 <_dtoa_r+0x384>)
 801445c:	f7ed fada 	bl	8001a14 <__aeabi_dmul>
 8014460:	0002      	movs	r2, r0
 8014462:	000b      	movs	r3, r1
 8014464:	0020      	movs	r0, r4
 8014466:	0029      	movs	r1, r5
 8014468:	f7ec fb2c 	bl	8000ac4 <__aeabi_dadd>
 801446c:	0004      	movs	r4, r0
 801446e:	000d      	movs	r5, r1
 8014470:	f7ee f956 	bl	8002720 <__aeabi_d2iz>
 8014474:	2200      	movs	r2, #0
 8014476:	9004      	str	r0, [sp, #16]
 8014478:	2300      	movs	r3, #0
 801447a:	0020      	movs	r0, r4
 801447c:	0029      	movs	r1, r5
 801447e:	f7eb ffeb 	bl	8000458 <__aeabi_dcmplt>
 8014482:	2800      	cmp	r0, #0
 8014484:	d00b      	beq.n	801449e <_dtoa_r+0x16a>
 8014486:	9804      	ldr	r0, [sp, #16]
 8014488:	f7ee f986 	bl	8002798 <__aeabi_i2d>
 801448c:	002b      	movs	r3, r5
 801448e:	0022      	movs	r2, r4
 8014490:	f7eb ffdc 	bl	800044c <__aeabi_dcmpeq>
 8014494:	4243      	negs	r3, r0
 8014496:	4158      	adcs	r0, r3
 8014498:	9b04      	ldr	r3, [sp, #16]
 801449a:	1a1b      	subs	r3, r3, r0
 801449c:	9304      	str	r3, [sp, #16]
 801449e:	2301      	movs	r3, #1
 80144a0:	9315      	str	r3, [sp, #84]	@ 0x54
 80144a2:	9b04      	ldr	r3, [sp, #16]
 80144a4:	2b16      	cmp	r3, #22
 80144a6:	d810      	bhi.n	80144ca <_dtoa_r+0x196>
 80144a8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80144aa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80144ac:	9a04      	ldr	r2, [sp, #16]
 80144ae:	4b83      	ldr	r3, [pc, #524]	@ (80146bc <_dtoa_r+0x388>)
 80144b0:	00d2      	lsls	r2, r2, #3
 80144b2:	189b      	adds	r3, r3, r2
 80144b4:	681a      	ldr	r2, [r3, #0]
 80144b6:	685b      	ldr	r3, [r3, #4]
 80144b8:	f7eb ffce 	bl	8000458 <__aeabi_dcmplt>
 80144bc:	2800      	cmp	r0, #0
 80144be:	d047      	beq.n	8014550 <_dtoa_r+0x21c>
 80144c0:	9b04      	ldr	r3, [sp, #16]
 80144c2:	3b01      	subs	r3, #1
 80144c4:	9304      	str	r3, [sp, #16]
 80144c6:	2300      	movs	r3, #0
 80144c8:	9315      	str	r3, [sp, #84]	@ 0x54
 80144ca:	2200      	movs	r2, #0
 80144cc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80144ce:	9206      	str	r2, [sp, #24]
 80144d0:	1bdb      	subs	r3, r3, r7
 80144d2:	1e5a      	subs	r2, r3, #1
 80144d4:	d53e      	bpl.n	8014554 <_dtoa_r+0x220>
 80144d6:	2201      	movs	r2, #1
 80144d8:	1ad3      	subs	r3, r2, r3
 80144da:	9306      	str	r3, [sp, #24]
 80144dc:	2300      	movs	r3, #0
 80144de:	930d      	str	r3, [sp, #52]	@ 0x34
 80144e0:	9b04      	ldr	r3, [sp, #16]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	db38      	blt.n	8014558 <_dtoa_r+0x224>
 80144e6:	9a04      	ldr	r2, [sp, #16]
 80144e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80144ea:	4694      	mov	ip, r2
 80144ec:	4463      	add	r3, ip
 80144ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80144f0:	2300      	movs	r3, #0
 80144f2:	9214      	str	r2, [sp, #80]	@ 0x50
 80144f4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80144f6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80144f8:	2401      	movs	r4, #1
 80144fa:	2b09      	cmp	r3, #9
 80144fc:	d867      	bhi.n	80145ce <_dtoa_r+0x29a>
 80144fe:	2b05      	cmp	r3, #5
 8014500:	dd02      	ble.n	8014508 <_dtoa_r+0x1d4>
 8014502:	2400      	movs	r4, #0
 8014504:	3b04      	subs	r3, #4
 8014506:	9322      	str	r3, [sp, #136]	@ 0x88
 8014508:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801450a:	1e98      	subs	r0, r3, #2
 801450c:	2803      	cmp	r0, #3
 801450e:	d867      	bhi.n	80145e0 <_dtoa_r+0x2ac>
 8014510:	f7eb fe02 	bl	8000118 <__gnu_thumb1_case_uqi>
 8014514:	5b383a2b 	.word	0x5b383a2b
 8014518:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801451a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801451c:	18f6      	adds	r6, r6, r3
 801451e:	4b68      	ldr	r3, [pc, #416]	@ (80146c0 <_dtoa_r+0x38c>)
 8014520:	18f2      	adds	r2, r6, r3
 8014522:	2a20      	cmp	r2, #32
 8014524:	dd0f      	ble.n	8014546 <_dtoa_r+0x212>
 8014526:	2340      	movs	r3, #64	@ 0x40
 8014528:	1a9b      	subs	r3, r3, r2
 801452a:	409f      	lsls	r7, r3
 801452c:	4b65      	ldr	r3, [pc, #404]	@ (80146c4 <_dtoa_r+0x390>)
 801452e:	0038      	movs	r0, r7
 8014530:	18f3      	adds	r3, r6, r3
 8014532:	40dc      	lsrs	r4, r3
 8014534:	4320      	orrs	r0, r4
 8014536:	f7ee f95d 	bl	80027f4 <__aeabi_ui2d>
 801453a:	2201      	movs	r2, #1
 801453c:	4b62      	ldr	r3, [pc, #392]	@ (80146c8 <_dtoa_r+0x394>)
 801453e:	1e77      	subs	r7, r6, #1
 8014540:	18cb      	adds	r3, r1, r3
 8014542:	9218      	str	r2, [sp, #96]	@ 0x60
 8014544:	e776      	b.n	8014434 <_dtoa_r+0x100>
 8014546:	2320      	movs	r3, #32
 8014548:	0020      	movs	r0, r4
 801454a:	1a9b      	subs	r3, r3, r2
 801454c:	4098      	lsls	r0, r3
 801454e:	e7f2      	b.n	8014536 <_dtoa_r+0x202>
 8014550:	9015      	str	r0, [sp, #84]	@ 0x54
 8014552:	e7ba      	b.n	80144ca <_dtoa_r+0x196>
 8014554:	920d      	str	r2, [sp, #52]	@ 0x34
 8014556:	e7c3      	b.n	80144e0 <_dtoa_r+0x1ac>
 8014558:	9b06      	ldr	r3, [sp, #24]
 801455a:	9a04      	ldr	r2, [sp, #16]
 801455c:	1a9b      	subs	r3, r3, r2
 801455e:	9306      	str	r3, [sp, #24]
 8014560:	4253      	negs	r3, r2
 8014562:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014564:	2300      	movs	r3, #0
 8014566:	9314      	str	r3, [sp, #80]	@ 0x50
 8014568:	e7c5      	b.n	80144f6 <_dtoa_r+0x1c2>
 801456a:	2300      	movs	r3, #0
 801456c:	9310      	str	r3, [sp, #64]	@ 0x40
 801456e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014570:	930e      	str	r3, [sp, #56]	@ 0x38
 8014572:	9309      	str	r3, [sp, #36]	@ 0x24
 8014574:	2b00      	cmp	r3, #0
 8014576:	dc13      	bgt.n	80145a0 <_dtoa_r+0x26c>
 8014578:	2301      	movs	r3, #1
 801457a:	001a      	movs	r2, r3
 801457c:	930e      	str	r3, [sp, #56]	@ 0x38
 801457e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014580:	9223      	str	r2, [sp, #140]	@ 0x8c
 8014582:	e00d      	b.n	80145a0 <_dtoa_r+0x26c>
 8014584:	2301      	movs	r3, #1
 8014586:	e7f1      	b.n	801456c <_dtoa_r+0x238>
 8014588:	2300      	movs	r3, #0
 801458a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801458c:	9310      	str	r3, [sp, #64]	@ 0x40
 801458e:	4694      	mov	ip, r2
 8014590:	9b04      	ldr	r3, [sp, #16]
 8014592:	4463      	add	r3, ip
 8014594:	930e      	str	r3, [sp, #56]	@ 0x38
 8014596:	3301      	adds	r3, #1
 8014598:	9309      	str	r3, [sp, #36]	@ 0x24
 801459a:	2b00      	cmp	r3, #0
 801459c:	dc00      	bgt.n	80145a0 <_dtoa_r+0x26c>
 801459e:	2301      	movs	r3, #1
 80145a0:	9a03      	ldr	r2, [sp, #12]
 80145a2:	2100      	movs	r1, #0
 80145a4:	69d0      	ldr	r0, [r2, #28]
 80145a6:	2204      	movs	r2, #4
 80145a8:	0015      	movs	r5, r2
 80145aa:	3514      	adds	r5, #20
 80145ac:	429d      	cmp	r5, r3
 80145ae:	d91b      	bls.n	80145e8 <_dtoa_r+0x2b4>
 80145b0:	6041      	str	r1, [r0, #4]
 80145b2:	9803      	ldr	r0, [sp, #12]
 80145b4:	f000 fdb8 	bl	8015128 <_Balloc>
 80145b8:	9008      	str	r0, [sp, #32]
 80145ba:	2800      	cmp	r0, #0
 80145bc:	d117      	bne.n	80145ee <_dtoa_r+0x2ba>
 80145be:	21b0      	movs	r1, #176	@ 0xb0
 80145c0:	4b42      	ldr	r3, [pc, #264]	@ (80146cc <_dtoa_r+0x398>)
 80145c2:	482e      	ldr	r0, [pc, #184]	@ (801467c <_dtoa_r+0x348>)
 80145c4:	9a08      	ldr	r2, [sp, #32]
 80145c6:	31ff      	adds	r1, #255	@ 0xff
 80145c8:	e6c9      	b.n	801435e <_dtoa_r+0x2a>
 80145ca:	2301      	movs	r3, #1
 80145cc:	e7dd      	b.n	801458a <_dtoa_r+0x256>
 80145ce:	2300      	movs	r3, #0
 80145d0:	9410      	str	r4, [sp, #64]	@ 0x40
 80145d2:	9322      	str	r3, [sp, #136]	@ 0x88
 80145d4:	3b01      	subs	r3, #1
 80145d6:	930e      	str	r3, [sp, #56]	@ 0x38
 80145d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80145da:	2200      	movs	r2, #0
 80145dc:	3313      	adds	r3, #19
 80145de:	e7cf      	b.n	8014580 <_dtoa_r+0x24c>
 80145e0:	2301      	movs	r3, #1
 80145e2:	9310      	str	r3, [sp, #64]	@ 0x40
 80145e4:	3b02      	subs	r3, #2
 80145e6:	e7f6      	b.n	80145d6 <_dtoa_r+0x2a2>
 80145e8:	3101      	adds	r1, #1
 80145ea:	0052      	lsls	r2, r2, #1
 80145ec:	e7dc      	b.n	80145a8 <_dtoa_r+0x274>
 80145ee:	9b03      	ldr	r3, [sp, #12]
 80145f0:	9a08      	ldr	r2, [sp, #32]
 80145f2:	69db      	ldr	r3, [r3, #28]
 80145f4:	601a      	str	r2, [r3, #0]
 80145f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145f8:	2b0e      	cmp	r3, #14
 80145fa:	d900      	bls.n	80145fe <_dtoa_r+0x2ca>
 80145fc:	e0d9      	b.n	80147b2 <_dtoa_r+0x47e>
 80145fe:	2c00      	cmp	r4, #0
 8014600:	d100      	bne.n	8014604 <_dtoa_r+0x2d0>
 8014602:	e0d6      	b.n	80147b2 <_dtoa_r+0x47e>
 8014604:	9b04      	ldr	r3, [sp, #16]
 8014606:	2b00      	cmp	r3, #0
 8014608:	dd64      	ble.n	80146d4 <_dtoa_r+0x3a0>
 801460a:	210f      	movs	r1, #15
 801460c:	9a04      	ldr	r2, [sp, #16]
 801460e:	4b2b      	ldr	r3, [pc, #172]	@ (80146bc <_dtoa_r+0x388>)
 8014610:	400a      	ands	r2, r1
 8014612:	00d2      	lsls	r2, r2, #3
 8014614:	189b      	adds	r3, r3, r2
 8014616:	681e      	ldr	r6, [r3, #0]
 8014618:	685f      	ldr	r7, [r3, #4]
 801461a:	9b04      	ldr	r3, [sp, #16]
 801461c:	2402      	movs	r4, #2
 801461e:	111d      	asrs	r5, r3, #4
 8014620:	05db      	lsls	r3, r3, #23
 8014622:	d50a      	bpl.n	801463a <_dtoa_r+0x306>
 8014624:	4b2a      	ldr	r3, [pc, #168]	@ (80146d0 <_dtoa_r+0x39c>)
 8014626:	400d      	ands	r5, r1
 8014628:	6a1a      	ldr	r2, [r3, #32]
 801462a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801462c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801462e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8014630:	f7ec fdac 	bl	800118c <__aeabi_ddiv>
 8014634:	900a      	str	r0, [sp, #40]	@ 0x28
 8014636:	910b      	str	r1, [sp, #44]	@ 0x2c
 8014638:	3401      	adds	r4, #1
 801463a:	4b25      	ldr	r3, [pc, #148]	@ (80146d0 <_dtoa_r+0x39c>)
 801463c:	930c      	str	r3, [sp, #48]	@ 0x30
 801463e:	2d00      	cmp	r5, #0
 8014640:	d108      	bne.n	8014654 <_dtoa_r+0x320>
 8014642:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8014644:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014646:	0032      	movs	r2, r6
 8014648:	003b      	movs	r3, r7
 801464a:	f7ec fd9f 	bl	800118c <__aeabi_ddiv>
 801464e:	900a      	str	r0, [sp, #40]	@ 0x28
 8014650:	910b      	str	r1, [sp, #44]	@ 0x2c
 8014652:	e05a      	b.n	801470a <_dtoa_r+0x3d6>
 8014654:	2301      	movs	r3, #1
 8014656:	421d      	tst	r5, r3
 8014658:	d009      	beq.n	801466e <_dtoa_r+0x33a>
 801465a:	18e4      	adds	r4, r4, r3
 801465c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801465e:	0030      	movs	r0, r6
 8014660:	681a      	ldr	r2, [r3, #0]
 8014662:	685b      	ldr	r3, [r3, #4]
 8014664:	0039      	movs	r1, r7
 8014666:	f7ed f9d5 	bl	8001a14 <__aeabi_dmul>
 801466a:	0006      	movs	r6, r0
 801466c:	000f      	movs	r7, r1
 801466e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014670:	106d      	asrs	r5, r5, #1
 8014672:	3308      	adds	r3, #8
 8014674:	e7e2      	b.n	801463c <_dtoa_r+0x308>
 8014676:	46c0      	nop			@ (mov r8, r8)
 8014678:	08019faf 	.word	0x08019faf
 801467c:	08019fc6 	.word	0x08019fc6
 8014680:	7ff00000 	.word	0x7ff00000
 8014684:	0000270f 	.word	0x0000270f
 8014688:	08019fab 	.word	0x08019fab
 801468c:	08019fae 	.word	0x08019fae
 8014690:	08019f7f 	.word	0x08019f7f
 8014694:	08019f7e 	.word	0x08019f7e
 8014698:	3ff00000 	.word	0x3ff00000
 801469c:	fffffc01 	.word	0xfffffc01
 80146a0:	3ff80000 	.word	0x3ff80000
 80146a4:	636f4361 	.word	0x636f4361
 80146a8:	3fd287a7 	.word	0x3fd287a7
 80146ac:	8b60c8b3 	.word	0x8b60c8b3
 80146b0:	3fc68a28 	.word	0x3fc68a28
 80146b4:	509f79fb 	.word	0x509f79fb
 80146b8:	3fd34413 	.word	0x3fd34413
 80146bc:	0801a0c0 	.word	0x0801a0c0
 80146c0:	00000432 	.word	0x00000432
 80146c4:	00000412 	.word	0x00000412
 80146c8:	fe100000 	.word	0xfe100000
 80146cc:	0801a01e 	.word	0x0801a01e
 80146d0:	0801a098 	.word	0x0801a098
 80146d4:	9b04      	ldr	r3, [sp, #16]
 80146d6:	2402      	movs	r4, #2
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d016      	beq.n	801470a <_dtoa_r+0x3d6>
 80146dc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80146de:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80146e0:	220f      	movs	r2, #15
 80146e2:	425d      	negs	r5, r3
 80146e4:	402a      	ands	r2, r5
 80146e6:	4bd7      	ldr	r3, [pc, #860]	@ (8014a44 <_dtoa_r+0x710>)
 80146e8:	00d2      	lsls	r2, r2, #3
 80146ea:	189b      	adds	r3, r3, r2
 80146ec:	681a      	ldr	r2, [r3, #0]
 80146ee:	685b      	ldr	r3, [r3, #4]
 80146f0:	f7ed f990 	bl	8001a14 <__aeabi_dmul>
 80146f4:	2701      	movs	r7, #1
 80146f6:	2300      	movs	r3, #0
 80146f8:	900a      	str	r0, [sp, #40]	@ 0x28
 80146fa:	910b      	str	r1, [sp, #44]	@ 0x2c
 80146fc:	4ed2      	ldr	r6, [pc, #840]	@ (8014a48 <_dtoa_r+0x714>)
 80146fe:	112d      	asrs	r5, r5, #4
 8014700:	2d00      	cmp	r5, #0
 8014702:	d000      	beq.n	8014706 <_dtoa_r+0x3d2>
 8014704:	e0ba      	b.n	801487c <_dtoa_r+0x548>
 8014706:	2b00      	cmp	r3, #0
 8014708:	d1a1      	bne.n	801464e <_dtoa_r+0x31a>
 801470a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801470c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801470e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014710:	2b00      	cmp	r3, #0
 8014712:	d100      	bne.n	8014716 <_dtoa_r+0x3e2>
 8014714:	e0bd      	b.n	8014892 <_dtoa_r+0x55e>
 8014716:	2200      	movs	r2, #0
 8014718:	0030      	movs	r0, r6
 801471a:	0039      	movs	r1, r7
 801471c:	4bcb      	ldr	r3, [pc, #812]	@ (8014a4c <_dtoa_r+0x718>)
 801471e:	f7eb fe9b 	bl	8000458 <__aeabi_dcmplt>
 8014722:	2800      	cmp	r0, #0
 8014724:	d100      	bne.n	8014728 <_dtoa_r+0x3f4>
 8014726:	e0b4      	b.n	8014892 <_dtoa_r+0x55e>
 8014728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801472a:	2b00      	cmp	r3, #0
 801472c:	d100      	bne.n	8014730 <_dtoa_r+0x3fc>
 801472e:	e0b0      	b.n	8014892 <_dtoa_r+0x55e>
 8014730:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014732:	2b00      	cmp	r3, #0
 8014734:	dd39      	ble.n	80147aa <_dtoa_r+0x476>
 8014736:	9b04      	ldr	r3, [sp, #16]
 8014738:	2200      	movs	r2, #0
 801473a:	3b01      	subs	r3, #1
 801473c:	930c      	str	r3, [sp, #48]	@ 0x30
 801473e:	0030      	movs	r0, r6
 8014740:	4bc3      	ldr	r3, [pc, #780]	@ (8014a50 <_dtoa_r+0x71c>)
 8014742:	0039      	movs	r1, r7
 8014744:	f7ed f966 	bl	8001a14 <__aeabi_dmul>
 8014748:	900a      	str	r0, [sp, #40]	@ 0x28
 801474a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801474c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801474e:	3401      	adds	r4, #1
 8014750:	0020      	movs	r0, r4
 8014752:	9311      	str	r3, [sp, #68]	@ 0x44
 8014754:	f7ee f820 	bl	8002798 <__aeabi_i2d>
 8014758:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801475a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801475c:	f7ed f95a 	bl	8001a14 <__aeabi_dmul>
 8014760:	4bbc      	ldr	r3, [pc, #752]	@ (8014a54 <_dtoa_r+0x720>)
 8014762:	2200      	movs	r2, #0
 8014764:	f7ec f9ae 	bl	8000ac4 <__aeabi_dadd>
 8014768:	4bbb      	ldr	r3, [pc, #748]	@ (8014a58 <_dtoa_r+0x724>)
 801476a:	0006      	movs	r6, r0
 801476c:	18cf      	adds	r7, r1, r3
 801476e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014770:	2b00      	cmp	r3, #0
 8014772:	d000      	beq.n	8014776 <_dtoa_r+0x442>
 8014774:	e091      	b.n	801489a <_dtoa_r+0x566>
 8014776:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8014778:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801477a:	2200      	movs	r2, #0
 801477c:	4bb7      	ldr	r3, [pc, #732]	@ (8014a5c <_dtoa_r+0x728>)
 801477e:	f7ed fc11 	bl	8001fa4 <__aeabi_dsub>
 8014782:	0032      	movs	r2, r6
 8014784:	003b      	movs	r3, r7
 8014786:	0004      	movs	r4, r0
 8014788:	000d      	movs	r5, r1
 801478a:	f7eb fe79 	bl	8000480 <__aeabi_dcmpgt>
 801478e:	2800      	cmp	r0, #0
 8014790:	d000      	beq.n	8014794 <_dtoa_r+0x460>
 8014792:	e29d      	b.n	8014cd0 <_dtoa_r+0x99c>
 8014794:	2180      	movs	r1, #128	@ 0x80
 8014796:	0609      	lsls	r1, r1, #24
 8014798:	187b      	adds	r3, r7, r1
 801479a:	0032      	movs	r2, r6
 801479c:	0020      	movs	r0, r4
 801479e:	0029      	movs	r1, r5
 80147a0:	f7eb fe5a 	bl	8000458 <__aeabi_dcmplt>
 80147a4:	2800      	cmp	r0, #0
 80147a6:	d000      	beq.n	80147aa <_dtoa_r+0x476>
 80147a8:	e130      	b.n	8014a0c <_dtoa_r+0x6d8>
 80147aa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80147ac:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80147ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80147b0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80147b2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	da00      	bge.n	80147ba <_dtoa_r+0x486>
 80147b8:	e177      	b.n	8014aaa <_dtoa_r+0x776>
 80147ba:	9a04      	ldr	r2, [sp, #16]
 80147bc:	2a0e      	cmp	r2, #14
 80147be:	dd00      	ble.n	80147c2 <_dtoa_r+0x48e>
 80147c0:	e173      	b.n	8014aaa <_dtoa_r+0x776>
 80147c2:	4ba0      	ldr	r3, [pc, #640]	@ (8014a44 <_dtoa_r+0x710>)
 80147c4:	00d2      	lsls	r2, r2, #3
 80147c6:	189b      	adds	r3, r3, r2
 80147c8:	685c      	ldr	r4, [r3, #4]
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	9306      	str	r3, [sp, #24]
 80147ce:	9407      	str	r4, [sp, #28]
 80147d0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	da03      	bge.n	80147de <_dtoa_r+0x4aa>
 80147d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80147d8:	2b00      	cmp	r3, #0
 80147da:	dc00      	bgt.n	80147de <_dtoa_r+0x4aa>
 80147dc:	e106      	b.n	80149ec <_dtoa_r+0x6b8>
 80147de:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80147e0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80147e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80147e4:	9d08      	ldr	r5, [sp, #32]
 80147e6:	3b01      	subs	r3, #1
 80147e8:	195b      	adds	r3, r3, r5
 80147ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80147ec:	9a06      	ldr	r2, [sp, #24]
 80147ee:	9b07      	ldr	r3, [sp, #28]
 80147f0:	0030      	movs	r0, r6
 80147f2:	0039      	movs	r1, r7
 80147f4:	f7ec fcca 	bl	800118c <__aeabi_ddiv>
 80147f8:	f7ed ff92 	bl	8002720 <__aeabi_d2iz>
 80147fc:	9009      	str	r0, [sp, #36]	@ 0x24
 80147fe:	f7ed ffcb 	bl	8002798 <__aeabi_i2d>
 8014802:	9a06      	ldr	r2, [sp, #24]
 8014804:	9b07      	ldr	r3, [sp, #28]
 8014806:	f7ed f905 	bl	8001a14 <__aeabi_dmul>
 801480a:	0002      	movs	r2, r0
 801480c:	000b      	movs	r3, r1
 801480e:	0030      	movs	r0, r6
 8014810:	0039      	movs	r1, r7
 8014812:	f7ed fbc7 	bl	8001fa4 <__aeabi_dsub>
 8014816:	002b      	movs	r3, r5
 8014818:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801481a:	3501      	adds	r5, #1
 801481c:	3230      	adds	r2, #48	@ 0x30
 801481e:	701a      	strb	r2, [r3, #0]
 8014820:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014822:	002c      	movs	r4, r5
 8014824:	429a      	cmp	r2, r3
 8014826:	d000      	beq.n	801482a <_dtoa_r+0x4f6>
 8014828:	e131      	b.n	8014a8e <_dtoa_r+0x75a>
 801482a:	0002      	movs	r2, r0
 801482c:	000b      	movs	r3, r1
 801482e:	f7ec f949 	bl	8000ac4 <__aeabi_dadd>
 8014832:	9a06      	ldr	r2, [sp, #24]
 8014834:	9b07      	ldr	r3, [sp, #28]
 8014836:	0006      	movs	r6, r0
 8014838:	000f      	movs	r7, r1
 801483a:	f7eb fe21 	bl	8000480 <__aeabi_dcmpgt>
 801483e:	2800      	cmp	r0, #0
 8014840:	d000      	beq.n	8014844 <_dtoa_r+0x510>
 8014842:	e10f      	b.n	8014a64 <_dtoa_r+0x730>
 8014844:	9a06      	ldr	r2, [sp, #24]
 8014846:	9b07      	ldr	r3, [sp, #28]
 8014848:	0030      	movs	r0, r6
 801484a:	0039      	movs	r1, r7
 801484c:	f7eb fdfe 	bl	800044c <__aeabi_dcmpeq>
 8014850:	2800      	cmp	r0, #0
 8014852:	d003      	beq.n	801485c <_dtoa_r+0x528>
 8014854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014856:	07dd      	lsls	r5, r3, #31
 8014858:	d500      	bpl.n	801485c <_dtoa_r+0x528>
 801485a:	e103      	b.n	8014a64 <_dtoa_r+0x730>
 801485c:	9905      	ldr	r1, [sp, #20]
 801485e:	9803      	ldr	r0, [sp, #12]
 8014860:	f000 fca6 	bl	80151b0 <_Bfree>
 8014864:	2300      	movs	r3, #0
 8014866:	7023      	strb	r3, [r4, #0]
 8014868:	9b04      	ldr	r3, [sp, #16]
 801486a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801486c:	3301      	adds	r3, #1
 801486e:	6013      	str	r3, [r2, #0]
 8014870:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8014872:	2b00      	cmp	r3, #0
 8014874:	d100      	bne.n	8014878 <_dtoa_r+0x544>
 8014876:	e5a7      	b.n	80143c8 <_dtoa_r+0x94>
 8014878:	601c      	str	r4, [r3, #0]
 801487a:	e5a5      	b.n	80143c8 <_dtoa_r+0x94>
 801487c:	423d      	tst	r5, r7
 801487e:	d005      	beq.n	801488c <_dtoa_r+0x558>
 8014880:	6832      	ldr	r2, [r6, #0]
 8014882:	6873      	ldr	r3, [r6, #4]
 8014884:	f7ed f8c6 	bl	8001a14 <__aeabi_dmul>
 8014888:	003b      	movs	r3, r7
 801488a:	3401      	adds	r4, #1
 801488c:	106d      	asrs	r5, r5, #1
 801488e:	3608      	adds	r6, #8
 8014890:	e736      	b.n	8014700 <_dtoa_r+0x3cc>
 8014892:	9b04      	ldr	r3, [sp, #16]
 8014894:	930c      	str	r3, [sp, #48]	@ 0x30
 8014896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014898:	e75a      	b.n	8014750 <_dtoa_r+0x41c>
 801489a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801489c:	4b69      	ldr	r3, [pc, #420]	@ (8014a44 <_dtoa_r+0x710>)
 801489e:	3a01      	subs	r2, #1
 80148a0:	00d2      	lsls	r2, r2, #3
 80148a2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80148a4:	189b      	adds	r3, r3, r2
 80148a6:	681a      	ldr	r2, [r3, #0]
 80148a8:	685b      	ldr	r3, [r3, #4]
 80148aa:	2900      	cmp	r1, #0
 80148ac:	d04c      	beq.n	8014948 <_dtoa_r+0x614>
 80148ae:	2000      	movs	r0, #0
 80148b0:	496b      	ldr	r1, [pc, #428]	@ (8014a60 <_dtoa_r+0x72c>)
 80148b2:	f7ec fc6b 	bl	800118c <__aeabi_ddiv>
 80148b6:	0032      	movs	r2, r6
 80148b8:	003b      	movs	r3, r7
 80148ba:	f7ed fb73 	bl	8001fa4 <__aeabi_dsub>
 80148be:	9a08      	ldr	r2, [sp, #32]
 80148c0:	0006      	movs	r6, r0
 80148c2:	4694      	mov	ip, r2
 80148c4:	000f      	movs	r7, r1
 80148c6:	9b08      	ldr	r3, [sp, #32]
 80148c8:	9316      	str	r3, [sp, #88]	@ 0x58
 80148ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80148cc:	4463      	add	r3, ip
 80148ce:	9311      	str	r3, [sp, #68]	@ 0x44
 80148d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80148d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80148d4:	f7ed ff24 	bl	8002720 <__aeabi_d2iz>
 80148d8:	0005      	movs	r5, r0
 80148da:	f7ed ff5d 	bl	8002798 <__aeabi_i2d>
 80148de:	0002      	movs	r2, r0
 80148e0:	000b      	movs	r3, r1
 80148e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80148e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80148e6:	f7ed fb5d 	bl	8001fa4 <__aeabi_dsub>
 80148ea:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80148ec:	3530      	adds	r5, #48	@ 0x30
 80148ee:	1c5c      	adds	r4, r3, #1
 80148f0:	701d      	strb	r5, [r3, #0]
 80148f2:	0032      	movs	r2, r6
 80148f4:	003b      	movs	r3, r7
 80148f6:	900a      	str	r0, [sp, #40]	@ 0x28
 80148f8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80148fa:	f7eb fdad 	bl	8000458 <__aeabi_dcmplt>
 80148fe:	2800      	cmp	r0, #0
 8014900:	d16a      	bne.n	80149d8 <_dtoa_r+0x6a4>
 8014902:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014904:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014906:	2000      	movs	r0, #0
 8014908:	4950      	ldr	r1, [pc, #320]	@ (8014a4c <_dtoa_r+0x718>)
 801490a:	f7ed fb4b 	bl	8001fa4 <__aeabi_dsub>
 801490e:	0032      	movs	r2, r6
 8014910:	003b      	movs	r3, r7
 8014912:	f7eb fda1 	bl	8000458 <__aeabi_dcmplt>
 8014916:	2800      	cmp	r0, #0
 8014918:	d000      	beq.n	801491c <_dtoa_r+0x5e8>
 801491a:	e0a5      	b.n	8014a68 <_dtoa_r+0x734>
 801491c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801491e:	42a3      	cmp	r3, r4
 8014920:	d100      	bne.n	8014924 <_dtoa_r+0x5f0>
 8014922:	e742      	b.n	80147aa <_dtoa_r+0x476>
 8014924:	2200      	movs	r2, #0
 8014926:	0030      	movs	r0, r6
 8014928:	0039      	movs	r1, r7
 801492a:	4b49      	ldr	r3, [pc, #292]	@ (8014a50 <_dtoa_r+0x71c>)
 801492c:	f7ed f872 	bl	8001a14 <__aeabi_dmul>
 8014930:	2200      	movs	r2, #0
 8014932:	0006      	movs	r6, r0
 8014934:	000f      	movs	r7, r1
 8014936:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8014938:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801493a:	4b45      	ldr	r3, [pc, #276]	@ (8014a50 <_dtoa_r+0x71c>)
 801493c:	f7ed f86a 	bl	8001a14 <__aeabi_dmul>
 8014940:	9416      	str	r4, [sp, #88]	@ 0x58
 8014942:	900a      	str	r0, [sp, #40]	@ 0x28
 8014944:	910b      	str	r1, [sp, #44]	@ 0x2c
 8014946:	e7c3      	b.n	80148d0 <_dtoa_r+0x59c>
 8014948:	0030      	movs	r0, r6
 801494a:	0039      	movs	r1, r7
 801494c:	f7ed f862 	bl	8001a14 <__aeabi_dmul>
 8014950:	9d08      	ldr	r5, [sp, #32]
 8014952:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014954:	002b      	movs	r3, r5
 8014956:	4694      	mov	ip, r2
 8014958:	9016      	str	r0, [sp, #88]	@ 0x58
 801495a:	9117      	str	r1, [sp, #92]	@ 0x5c
 801495c:	4463      	add	r3, ip
 801495e:	9319      	str	r3, [sp, #100]	@ 0x64
 8014960:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8014962:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014964:	f7ed fedc 	bl	8002720 <__aeabi_d2iz>
 8014968:	0004      	movs	r4, r0
 801496a:	f7ed ff15 	bl	8002798 <__aeabi_i2d>
 801496e:	000b      	movs	r3, r1
 8014970:	0002      	movs	r2, r0
 8014972:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8014974:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014976:	f7ed fb15 	bl	8001fa4 <__aeabi_dsub>
 801497a:	3430      	adds	r4, #48	@ 0x30
 801497c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801497e:	702c      	strb	r4, [r5, #0]
 8014980:	3501      	adds	r5, #1
 8014982:	0006      	movs	r6, r0
 8014984:	000f      	movs	r7, r1
 8014986:	42ab      	cmp	r3, r5
 8014988:	d129      	bne.n	80149de <_dtoa_r+0x6aa>
 801498a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801498c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801498e:	9b08      	ldr	r3, [sp, #32]
 8014990:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8014992:	469c      	mov	ip, r3
 8014994:	2200      	movs	r2, #0
 8014996:	4b32      	ldr	r3, [pc, #200]	@ (8014a60 <_dtoa_r+0x72c>)
 8014998:	4464      	add	r4, ip
 801499a:	f7ec f893 	bl	8000ac4 <__aeabi_dadd>
 801499e:	0002      	movs	r2, r0
 80149a0:	000b      	movs	r3, r1
 80149a2:	0030      	movs	r0, r6
 80149a4:	0039      	movs	r1, r7
 80149a6:	f7eb fd6b 	bl	8000480 <__aeabi_dcmpgt>
 80149aa:	2800      	cmp	r0, #0
 80149ac:	d15c      	bne.n	8014a68 <_dtoa_r+0x734>
 80149ae:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80149b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80149b2:	2000      	movs	r0, #0
 80149b4:	492a      	ldr	r1, [pc, #168]	@ (8014a60 <_dtoa_r+0x72c>)
 80149b6:	f7ed faf5 	bl	8001fa4 <__aeabi_dsub>
 80149ba:	0002      	movs	r2, r0
 80149bc:	000b      	movs	r3, r1
 80149be:	0030      	movs	r0, r6
 80149c0:	0039      	movs	r1, r7
 80149c2:	f7eb fd49 	bl	8000458 <__aeabi_dcmplt>
 80149c6:	2800      	cmp	r0, #0
 80149c8:	d100      	bne.n	80149cc <_dtoa_r+0x698>
 80149ca:	e6ee      	b.n	80147aa <_dtoa_r+0x476>
 80149cc:	0023      	movs	r3, r4
 80149ce:	3c01      	subs	r4, #1
 80149d0:	7822      	ldrb	r2, [r4, #0]
 80149d2:	2a30      	cmp	r2, #48	@ 0x30
 80149d4:	d0fa      	beq.n	80149cc <_dtoa_r+0x698>
 80149d6:	001c      	movs	r4, r3
 80149d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80149da:	9304      	str	r3, [sp, #16]
 80149dc:	e73e      	b.n	801485c <_dtoa_r+0x528>
 80149de:	2200      	movs	r2, #0
 80149e0:	4b1b      	ldr	r3, [pc, #108]	@ (8014a50 <_dtoa_r+0x71c>)
 80149e2:	f7ed f817 	bl	8001a14 <__aeabi_dmul>
 80149e6:	900a      	str	r0, [sp, #40]	@ 0x28
 80149e8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80149ea:	e7b9      	b.n	8014960 <_dtoa_r+0x62c>
 80149ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d10c      	bne.n	8014a0c <_dtoa_r+0x6d8>
 80149f2:	9806      	ldr	r0, [sp, #24]
 80149f4:	9907      	ldr	r1, [sp, #28]
 80149f6:	2200      	movs	r2, #0
 80149f8:	4b18      	ldr	r3, [pc, #96]	@ (8014a5c <_dtoa_r+0x728>)
 80149fa:	f7ed f80b 	bl	8001a14 <__aeabi_dmul>
 80149fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014a00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014a02:	f7eb fd47 	bl	8000494 <__aeabi_dcmpge>
 8014a06:	2800      	cmp	r0, #0
 8014a08:	d100      	bne.n	8014a0c <_dtoa_r+0x6d8>
 8014a0a:	e164      	b.n	8014cd6 <_dtoa_r+0x9a2>
 8014a0c:	2600      	movs	r6, #0
 8014a0e:	0037      	movs	r7, r6
 8014a10:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014a12:	9c08      	ldr	r4, [sp, #32]
 8014a14:	43db      	mvns	r3, r3
 8014a16:	930c      	str	r3, [sp, #48]	@ 0x30
 8014a18:	2300      	movs	r3, #0
 8014a1a:	9304      	str	r3, [sp, #16]
 8014a1c:	0031      	movs	r1, r6
 8014a1e:	9803      	ldr	r0, [sp, #12]
 8014a20:	f000 fbc6 	bl	80151b0 <_Bfree>
 8014a24:	2f00      	cmp	r7, #0
 8014a26:	d0d7      	beq.n	80149d8 <_dtoa_r+0x6a4>
 8014a28:	9b04      	ldr	r3, [sp, #16]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d005      	beq.n	8014a3a <_dtoa_r+0x706>
 8014a2e:	42bb      	cmp	r3, r7
 8014a30:	d003      	beq.n	8014a3a <_dtoa_r+0x706>
 8014a32:	0019      	movs	r1, r3
 8014a34:	9803      	ldr	r0, [sp, #12]
 8014a36:	f000 fbbb 	bl	80151b0 <_Bfree>
 8014a3a:	0039      	movs	r1, r7
 8014a3c:	9803      	ldr	r0, [sp, #12]
 8014a3e:	f000 fbb7 	bl	80151b0 <_Bfree>
 8014a42:	e7c9      	b.n	80149d8 <_dtoa_r+0x6a4>
 8014a44:	0801a0c0 	.word	0x0801a0c0
 8014a48:	0801a098 	.word	0x0801a098
 8014a4c:	3ff00000 	.word	0x3ff00000
 8014a50:	40240000 	.word	0x40240000
 8014a54:	401c0000 	.word	0x401c0000
 8014a58:	fcc00000 	.word	0xfcc00000
 8014a5c:	40140000 	.word	0x40140000
 8014a60:	3fe00000 	.word	0x3fe00000
 8014a64:	9b04      	ldr	r3, [sp, #16]
 8014a66:	930c      	str	r3, [sp, #48]	@ 0x30
 8014a68:	0023      	movs	r3, r4
 8014a6a:	001c      	movs	r4, r3
 8014a6c:	3b01      	subs	r3, #1
 8014a6e:	781a      	ldrb	r2, [r3, #0]
 8014a70:	2a39      	cmp	r2, #57	@ 0x39
 8014a72:	d108      	bne.n	8014a86 <_dtoa_r+0x752>
 8014a74:	9a08      	ldr	r2, [sp, #32]
 8014a76:	429a      	cmp	r2, r3
 8014a78:	d1f7      	bne.n	8014a6a <_dtoa_r+0x736>
 8014a7a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014a7c:	9908      	ldr	r1, [sp, #32]
 8014a7e:	3201      	adds	r2, #1
 8014a80:	920c      	str	r2, [sp, #48]	@ 0x30
 8014a82:	2230      	movs	r2, #48	@ 0x30
 8014a84:	700a      	strb	r2, [r1, #0]
 8014a86:	781a      	ldrb	r2, [r3, #0]
 8014a88:	3201      	adds	r2, #1
 8014a8a:	701a      	strb	r2, [r3, #0]
 8014a8c:	e7a4      	b.n	80149d8 <_dtoa_r+0x6a4>
 8014a8e:	2200      	movs	r2, #0
 8014a90:	4bc6      	ldr	r3, [pc, #792]	@ (8014dac <_dtoa_r+0xa78>)
 8014a92:	f7ec ffbf 	bl	8001a14 <__aeabi_dmul>
 8014a96:	2200      	movs	r2, #0
 8014a98:	2300      	movs	r3, #0
 8014a9a:	0006      	movs	r6, r0
 8014a9c:	000f      	movs	r7, r1
 8014a9e:	f7eb fcd5 	bl	800044c <__aeabi_dcmpeq>
 8014aa2:	2800      	cmp	r0, #0
 8014aa4:	d100      	bne.n	8014aa8 <_dtoa_r+0x774>
 8014aa6:	e6a1      	b.n	80147ec <_dtoa_r+0x4b8>
 8014aa8:	e6d8      	b.n	801485c <_dtoa_r+0x528>
 8014aaa:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8014aac:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8014aae:	9c06      	ldr	r4, [sp, #24]
 8014ab0:	2f00      	cmp	r7, #0
 8014ab2:	d014      	beq.n	8014ade <_dtoa_r+0x7aa>
 8014ab4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8014ab6:	2a01      	cmp	r2, #1
 8014ab8:	dd00      	ble.n	8014abc <_dtoa_r+0x788>
 8014aba:	e0c8      	b.n	8014c4e <_dtoa_r+0x91a>
 8014abc:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8014abe:	2a00      	cmp	r2, #0
 8014ac0:	d100      	bne.n	8014ac4 <_dtoa_r+0x790>
 8014ac2:	e0be      	b.n	8014c42 <_dtoa_r+0x90e>
 8014ac4:	4aba      	ldr	r2, [pc, #744]	@ (8014db0 <_dtoa_r+0xa7c>)
 8014ac6:	189b      	adds	r3, r3, r2
 8014ac8:	9a06      	ldr	r2, [sp, #24]
 8014aca:	2101      	movs	r1, #1
 8014acc:	18d2      	adds	r2, r2, r3
 8014ace:	9206      	str	r2, [sp, #24]
 8014ad0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014ad2:	9803      	ldr	r0, [sp, #12]
 8014ad4:	18d3      	adds	r3, r2, r3
 8014ad6:	930d      	str	r3, [sp, #52]	@ 0x34
 8014ad8:	f000 fc22 	bl	8015320 <__i2b>
 8014adc:	0007      	movs	r7, r0
 8014ade:	2c00      	cmp	r4, #0
 8014ae0:	d00e      	beq.n	8014b00 <_dtoa_r+0x7cc>
 8014ae2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	dd0b      	ble.n	8014b00 <_dtoa_r+0x7cc>
 8014ae8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014aea:	0023      	movs	r3, r4
 8014aec:	4294      	cmp	r4, r2
 8014aee:	dd00      	ble.n	8014af2 <_dtoa_r+0x7be>
 8014af0:	0013      	movs	r3, r2
 8014af2:	9a06      	ldr	r2, [sp, #24]
 8014af4:	1ae4      	subs	r4, r4, r3
 8014af6:	1ad2      	subs	r2, r2, r3
 8014af8:	9206      	str	r2, [sp, #24]
 8014afa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014afc:	1ad3      	subs	r3, r2, r3
 8014afe:	930d      	str	r3, [sp, #52]	@ 0x34
 8014b00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d01f      	beq.n	8014b46 <_dtoa_r+0x812>
 8014b06:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d100      	bne.n	8014b0e <_dtoa_r+0x7da>
 8014b0c:	e0b5      	b.n	8014c7a <_dtoa_r+0x946>
 8014b0e:	2d00      	cmp	r5, #0
 8014b10:	d010      	beq.n	8014b34 <_dtoa_r+0x800>
 8014b12:	0039      	movs	r1, r7
 8014b14:	002a      	movs	r2, r5
 8014b16:	9803      	ldr	r0, [sp, #12]
 8014b18:	f000 fccc 	bl	80154b4 <__pow5mult>
 8014b1c:	9a05      	ldr	r2, [sp, #20]
 8014b1e:	0001      	movs	r1, r0
 8014b20:	0007      	movs	r7, r0
 8014b22:	9803      	ldr	r0, [sp, #12]
 8014b24:	f000 fc14 	bl	8015350 <__multiply>
 8014b28:	0006      	movs	r6, r0
 8014b2a:	9905      	ldr	r1, [sp, #20]
 8014b2c:	9803      	ldr	r0, [sp, #12]
 8014b2e:	f000 fb3f 	bl	80151b0 <_Bfree>
 8014b32:	9605      	str	r6, [sp, #20]
 8014b34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014b36:	1b5a      	subs	r2, r3, r5
 8014b38:	42ab      	cmp	r3, r5
 8014b3a:	d004      	beq.n	8014b46 <_dtoa_r+0x812>
 8014b3c:	9905      	ldr	r1, [sp, #20]
 8014b3e:	9803      	ldr	r0, [sp, #12]
 8014b40:	f000 fcb8 	bl	80154b4 <__pow5mult>
 8014b44:	9005      	str	r0, [sp, #20]
 8014b46:	2101      	movs	r1, #1
 8014b48:	9803      	ldr	r0, [sp, #12]
 8014b4a:	f000 fbe9 	bl	8015320 <__i2b>
 8014b4e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8014b50:	0006      	movs	r6, r0
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d100      	bne.n	8014b58 <_dtoa_r+0x824>
 8014b56:	e1bc      	b.n	8014ed2 <_dtoa_r+0xb9e>
 8014b58:	001a      	movs	r2, r3
 8014b5a:	0001      	movs	r1, r0
 8014b5c:	9803      	ldr	r0, [sp, #12]
 8014b5e:	f000 fca9 	bl	80154b4 <__pow5mult>
 8014b62:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8014b64:	0006      	movs	r6, r0
 8014b66:	2500      	movs	r5, #0
 8014b68:	2b01      	cmp	r3, #1
 8014b6a:	dc16      	bgt.n	8014b9a <_dtoa_r+0x866>
 8014b6c:	2500      	movs	r5, #0
 8014b6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014b70:	42ab      	cmp	r3, r5
 8014b72:	d10e      	bne.n	8014b92 <_dtoa_r+0x85e>
 8014b74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014b76:	031b      	lsls	r3, r3, #12
 8014b78:	42ab      	cmp	r3, r5
 8014b7a:	d10a      	bne.n	8014b92 <_dtoa_r+0x85e>
 8014b7c:	4b8d      	ldr	r3, [pc, #564]	@ (8014db4 <_dtoa_r+0xa80>)
 8014b7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014b80:	4213      	tst	r3, r2
 8014b82:	d006      	beq.n	8014b92 <_dtoa_r+0x85e>
 8014b84:	9b06      	ldr	r3, [sp, #24]
 8014b86:	3501      	adds	r5, #1
 8014b88:	3301      	adds	r3, #1
 8014b8a:	9306      	str	r3, [sp, #24]
 8014b8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014b8e:	3301      	adds	r3, #1
 8014b90:	930d      	str	r3, [sp, #52]	@ 0x34
 8014b92:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8014b94:	2001      	movs	r0, #1
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d008      	beq.n	8014bac <_dtoa_r+0x878>
 8014b9a:	6933      	ldr	r3, [r6, #16]
 8014b9c:	3303      	adds	r3, #3
 8014b9e:	009b      	lsls	r3, r3, #2
 8014ba0:	18f3      	adds	r3, r6, r3
 8014ba2:	6858      	ldr	r0, [r3, #4]
 8014ba4:	f000 fb6c 	bl	8015280 <__hi0bits>
 8014ba8:	2320      	movs	r3, #32
 8014baa:	1a18      	subs	r0, r3, r0
 8014bac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014bae:	1818      	adds	r0, r3, r0
 8014bb0:	0002      	movs	r2, r0
 8014bb2:	231f      	movs	r3, #31
 8014bb4:	401a      	ands	r2, r3
 8014bb6:	4218      	tst	r0, r3
 8014bb8:	d065      	beq.n	8014c86 <_dtoa_r+0x952>
 8014bba:	3301      	adds	r3, #1
 8014bbc:	1a9b      	subs	r3, r3, r2
 8014bbe:	2b04      	cmp	r3, #4
 8014bc0:	dd5d      	ble.n	8014c7e <_dtoa_r+0x94a>
 8014bc2:	231c      	movs	r3, #28
 8014bc4:	1a9b      	subs	r3, r3, r2
 8014bc6:	9a06      	ldr	r2, [sp, #24]
 8014bc8:	18e4      	adds	r4, r4, r3
 8014bca:	18d2      	adds	r2, r2, r3
 8014bcc:	9206      	str	r2, [sp, #24]
 8014bce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014bd0:	18d3      	adds	r3, r2, r3
 8014bd2:	930d      	str	r3, [sp, #52]	@ 0x34
 8014bd4:	9b06      	ldr	r3, [sp, #24]
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	dd05      	ble.n	8014be6 <_dtoa_r+0x8b2>
 8014bda:	001a      	movs	r2, r3
 8014bdc:	9905      	ldr	r1, [sp, #20]
 8014bde:	9803      	ldr	r0, [sp, #12]
 8014be0:	f000 fcc4 	bl	801556c <__lshift>
 8014be4:	9005      	str	r0, [sp, #20]
 8014be6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	dd05      	ble.n	8014bf8 <_dtoa_r+0x8c4>
 8014bec:	0031      	movs	r1, r6
 8014bee:	001a      	movs	r2, r3
 8014bf0:	9803      	ldr	r0, [sp, #12]
 8014bf2:	f000 fcbb 	bl	801556c <__lshift>
 8014bf6:	0006      	movs	r6, r0
 8014bf8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d045      	beq.n	8014c8a <_dtoa_r+0x956>
 8014bfe:	0031      	movs	r1, r6
 8014c00:	9805      	ldr	r0, [sp, #20]
 8014c02:	f000 fd1f 	bl	8015644 <__mcmp>
 8014c06:	2800      	cmp	r0, #0
 8014c08:	da3f      	bge.n	8014c8a <_dtoa_r+0x956>
 8014c0a:	9b04      	ldr	r3, [sp, #16]
 8014c0c:	220a      	movs	r2, #10
 8014c0e:	3b01      	subs	r3, #1
 8014c10:	930c      	str	r3, [sp, #48]	@ 0x30
 8014c12:	9905      	ldr	r1, [sp, #20]
 8014c14:	2300      	movs	r3, #0
 8014c16:	9803      	ldr	r0, [sp, #12]
 8014c18:	f000 faee 	bl	80151f8 <__multadd>
 8014c1c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014c1e:	9005      	str	r0, [sp, #20]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d100      	bne.n	8014c26 <_dtoa_r+0x8f2>
 8014c24:	e15c      	b.n	8014ee0 <_dtoa_r+0xbac>
 8014c26:	2300      	movs	r3, #0
 8014c28:	0039      	movs	r1, r7
 8014c2a:	220a      	movs	r2, #10
 8014c2c:	9803      	ldr	r0, [sp, #12]
 8014c2e:	f000 fae3 	bl	80151f8 <__multadd>
 8014c32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014c34:	0007      	movs	r7, r0
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	dc55      	bgt.n	8014ce6 <_dtoa_r+0x9b2>
 8014c3a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8014c3c:	2b02      	cmp	r3, #2
 8014c3e:	dc2d      	bgt.n	8014c9c <_dtoa_r+0x968>
 8014c40:	e051      	b.n	8014ce6 <_dtoa_r+0x9b2>
 8014c42:	2336      	movs	r3, #54	@ 0x36
 8014c44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8014c46:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8014c48:	9c06      	ldr	r4, [sp, #24]
 8014c4a:	1a9b      	subs	r3, r3, r2
 8014c4c:	e73c      	b.n	8014ac8 <_dtoa_r+0x794>
 8014c4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c50:	1e5d      	subs	r5, r3, #1
 8014c52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014c54:	42ab      	cmp	r3, r5
 8014c56:	db08      	blt.n	8014c6a <_dtoa_r+0x936>
 8014c58:	1b5d      	subs	r5, r3, r5
 8014c5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c5c:	9c06      	ldr	r4, [sp, #24]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	db00      	blt.n	8014c64 <_dtoa_r+0x930>
 8014c62:	e731      	b.n	8014ac8 <_dtoa_r+0x794>
 8014c64:	1ae4      	subs	r4, r4, r3
 8014c66:	2300      	movs	r3, #0
 8014c68:	e72e      	b.n	8014ac8 <_dtoa_r+0x794>
 8014c6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014c6c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8014c6e:	1aeb      	subs	r3, r5, r3
 8014c70:	18d3      	adds	r3, r2, r3
 8014c72:	950f      	str	r5, [sp, #60]	@ 0x3c
 8014c74:	9314      	str	r3, [sp, #80]	@ 0x50
 8014c76:	2500      	movs	r5, #0
 8014c78:	e7ef      	b.n	8014c5a <_dtoa_r+0x926>
 8014c7a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014c7c:	e75e      	b.n	8014b3c <_dtoa_r+0x808>
 8014c7e:	2b04      	cmp	r3, #4
 8014c80:	d0a8      	beq.n	8014bd4 <_dtoa_r+0x8a0>
 8014c82:	331c      	adds	r3, #28
 8014c84:	e79f      	b.n	8014bc6 <_dtoa_r+0x892>
 8014c86:	0013      	movs	r3, r2
 8014c88:	e7fb      	b.n	8014c82 <_dtoa_r+0x94e>
 8014c8a:	9b04      	ldr	r3, [sp, #16]
 8014c8c:	930c      	str	r3, [sp, #48]	@ 0x30
 8014c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c90:	930e      	str	r3, [sp, #56]	@ 0x38
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	dc23      	bgt.n	8014cde <_dtoa_r+0x9aa>
 8014c96:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8014c98:	2b02      	cmp	r3, #2
 8014c9a:	dd20      	ble.n	8014cde <_dtoa_r+0x9aa>
 8014c9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d000      	beq.n	8014ca4 <_dtoa_r+0x970>
 8014ca2:	e6b5      	b.n	8014a10 <_dtoa_r+0x6dc>
 8014ca4:	0031      	movs	r1, r6
 8014ca6:	2205      	movs	r2, #5
 8014ca8:	9803      	ldr	r0, [sp, #12]
 8014caa:	f000 faa5 	bl	80151f8 <__multadd>
 8014cae:	0006      	movs	r6, r0
 8014cb0:	0001      	movs	r1, r0
 8014cb2:	9805      	ldr	r0, [sp, #20]
 8014cb4:	f000 fcc6 	bl	8015644 <__mcmp>
 8014cb8:	2800      	cmp	r0, #0
 8014cba:	dc00      	bgt.n	8014cbe <_dtoa_r+0x98a>
 8014cbc:	e6a8      	b.n	8014a10 <_dtoa_r+0x6dc>
 8014cbe:	9b08      	ldr	r3, [sp, #32]
 8014cc0:	9a08      	ldr	r2, [sp, #32]
 8014cc2:	1c5c      	adds	r4, r3, #1
 8014cc4:	2331      	movs	r3, #49	@ 0x31
 8014cc6:	7013      	strb	r3, [r2, #0]
 8014cc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014cca:	3301      	adds	r3, #1
 8014ccc:	930c      	str	r3, [sp, #48]	@ 0x30
 8014cce:	e6a3      	b.n	8014a18 <_dtoa_r+0x6e4>
 8014cd0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8014cd2:	0037      	movs	r7, r6
 8014cd4:	e7f3      	b.n	8014cbe <_dtoa_r+0x98a>
 8014cd6:	9b04      	ldr	r3, [sp, #16]
 8014cd8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8014cda:	930c      	str	r3, [sp, #48]	@ 0x30
 8014cdc:	e7f9      	b.n	8014cd2 <_dtoa_r+0x99e>
 8014cde:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d100      	bne.n	8014ce6 <_dtoa_r+0x9b2>
 8014ce4:	e100      	b.n	8014ee8 <_dtoa_r+0xbb4>
 8014ce6:	2c00      	cmp	r4, #0
 8014ce8:	dd05      	ble.n	8014cf6 <_dtoa_r+0x9c2>
 8014cea:	0039      	movs	r1, r7
 8014cec:	0022      	movs	r2, r4
 8014cee:	9803      	ldr	r0, [sp, #12]
 8014cf0:	f000 fc3c 	bl	801556c <__lshift>
 8014cf4:	0007      	movs	r7, r0
 8014cf6:	0038      	movs	r0, r7
 8014cf8:	2d00      	cmp	r5, #0
 8014cfa:	d018      	beq.n	8014d2e <_dtoa_r+0x9fa>
 8014cfc:	6879      	ldr	r1, [r7, #4]
 8014cfe:	9803      	ldr	r0, [sp, #12]
 8014d00:	f000 fa12 	bl	8015128 <_Balloc>
 8014d04:	1e04      	subs	r4, r0, #0
 8014d06:	d105      	bne.n	8014d14 <_dtoa_r+0x9e0>
 8014d08:	0022      	movs	r2, r4
 8014d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8014db8 <_dtoa_r+0xa84>)
 8014d0c:	482b      	ldr	r0, [pc, #172]	@ (8014dbc <_dtoa_r+0xa88>)
 8014d0e:	492c      	ldr	r1, [pc, #176]	@ (8014dc0 <_dtoa_r+0xa8c>)
 8014d10:	f7ff fb25 	bl	801435e <_dtoa_r+0x2a>
 8014d14:	0039      	movs	r1, r7
 8014d16:	693a      	ldr	r2, [r7, #16]
 8014d18:	310c      	adds	r1, #12
 8014d1a:	3202      	adds	r2, #2
 8014d1c:	0092      	lsls	r2, r2, #2
 8014d1e:	300c      	adds	r0, #12
 8014d20:	f7ff fa70 	bl	8014204 <memcpy>
 8014d24:	2201      	movs	r2, #1
 8014d26:	0021      	movs	r1, r4
 8014d28:	9803      	ldr	r0, [sp, #12]
 8014d2a:	f000 fc1f 	bl	801556c <__lshift>
 8014d2e:	9b08      	ldr	r3, [sp, #32]
 8014d30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014d32:	9306      	str	r3, [sp, #24]
 8014d34:	3b01      	subs	r3, #1
 8014d36:	189b      	adds	r3, r3, r2
 8014d38:	2201      	movs	r2, #1
 8014d3a:	9704      	str	r7, [sp, #16]
 8014d3c:	0007      	movs	r7, r0
 8014d3e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014d40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014d42:	4013      	ands	r3, r2
 8014d44:	930e      	str	r3, [sp, #56]	@ 0x38
 8014d46:	0031      	movs	r1, r6
 8014d48:	9805      	ldr	r0, [sp, #20]
 8014d4a:	f7ff fa64 	bl	8014216 <quorem>
 8014d4e:	9904      	ldr	r1, [sp, #16]
 8014d50:	0005      	movs	r5, r0
 8014d52:	900a      	str	r0, [sp, #40]	@ 0x28
 8014d54:	9805      	ldr	r0, [sp, #20]
 8014d56:	f000 fc75 	bl	8015644 <__mcmp>
 8014d5a:	003a      	movs	r2, r7
 8014d5c:	900d      	str	r0, [sp, #52]	@ 0x34
 8014d5e:	0031      	movs	r1, r6
 8014d60:	9803      	ldr	r0, [sp, #12]
 8014d62:	f000 fc8b 	bl	801567c <__mdiff>
 8014d66:	2201      	movs	r2, #1
 8014d68:	68c3      	ldr	r3, [r0, #12]
 8014d6a:	0004      	movs	r4, r0
 8014d6c:	3530      	adds	r5, #48	@ 0x30
 8014d6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d104      	bne.n	8014d7e <_dtoa_r+0xa4a>
 8014d74:	0001      	movs	r1, r0
 8014d76:	9805      	ldr	r0, [sp, #20]
 8014d78:	f000 fc64 	bl	8015644 <__mcmp>
 8014d7c:	9009      	str	r0, [sp, #36]	@ 0x24
 8014d7e:	0021      	movs	r1, r4
 8014d80:	9803      	ldr	r0, [sp, #12]
 8014d82:	f000 fa15 	bl	80151b0 <_Bfree>
 8014d86:	9b06      	ldr	r3, [sp, #24]
 8014d88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014d8a:	1c5c      	adds	r4, r3, #1
 8014d8c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8014d8e:	4313      	orrs	r3, r2
 8014d90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014d92:	4313      	orrs	r3, r2
 8014d94:	d116      	bne.n	8014dc4 <_dtoa_r+0xa90>
 8014d96:	2d39      	cmp	r5, #57	@ 0x39
 8014d98:	d02f      	beq.n	8014dfa <_dtoa_r+0xac6>
 8014d9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	dd01      	ble.n	8014da4 <_dtoa_r+0xa70>
 8014da0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8014da2:	3531      	adds	r5, #49	@ 0x31
 8014da4:	9b06      	ldr	r3, [sp, #24]
 8014da6:	701d      	strb	r5, [r3, #0]
 8014da8:	e638      	b.n	8014a1c <_dtoa_r+0x6e8>
 8014daa:	46c0      	nop			@ (mov r8, r8)
 8014dac:	40240000 	.word	0x40240000
 8014db0:	00000433 	.word	0x00000433
 8014db4:	7ff00000 	.word	0x7ff00000
 8014db8:	0801a01e 	.word	0x0801a01e
 8014dbc:	08019fc6 	.word	0x08019fc6
 8014dc0:	000002ef 	.word	0x000002ef
 8014dc4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	db04      	blt.n	8014dd4 <_dtoa_r+0xaa0>
 8014dca:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8014dcc:	4313      	orrs	r3, r2
 8014dce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014dd0:	4313      	orrs	r3, r2
 8014dd2:	d11e      	bne.n	8014e12 <_dtoa_r+0xade>
 8014dd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	dde4      	ble.n	8014da4 <_dtoa_r+0xa70>
 8014dda:	9905      	ldr	r1, [sp, #20]
 8014ddc:	2201      	movs	r2, #1
 8014dde:	9803      	ldr	r0, [sp, #12]
 8014de0:	f000 fbc4 	bl	801556c <__lshift>
 8014de4:	0031      	movs	r1, r6
 8014de6:	9005      	str	r0, [sp, #20]
 8014de8:	f000 fc2c 	bl	8015644 <__mcmp>
 8014dec:	2800      	cmp	r0, #0
 8014dee:	dc02      	bgt.n	8014df6 <_dtoa_r+0xac2>
 8014df0:	d1d8      	bne.n	8014da4 <_dtoa_r+0xa70>
 8014df2:	07eb      	lsls	r3, r5, #31
 8014df4:	d5d6      	bpl.n	8014da4 <_dtoa_r+0xa70>
 8014df6:	2d39      	cmp	r5, #57	@ 0x39
 8014df8:	d1d2      	bne.n	8014da0 <_dtoa_r+0xa6c>
 8014dfa:	2339      	movs	r3, #57	@ 0x39
 8014dfc:	9a06      	ldr	r2, [sp, #24]
 8014dfe:	7013      	strb	r3, [r2, #0]
 8014e00:	0023      	movs	r3, r4
 8014e02:	001c      	movs	r4, r3
 8014e04:	3b01      	subs	r3, #1
 8014e06:	781a      	ldrb	r2, [r3, #0]
 8014e08:	2a39      	cmp	r2, #57	@ 0x39
 8014e0a:	d04f      	beq.n	8014eac <_dtoa_r+0xb78>
 8014e0c:	3201      	adds	r2, #1
 8014e0e:	701a      	strb	r2, [r3, #0]
 8014e10:	e604      	b.n	8014a1c <_dtoa_r+0x6e8>
 8014e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	dd03      	ble.n	8014e20 <_dtoa_r+0xaec>
 8014e18:	2d39      	cmp	r5, #57	@ 0x39
 8014e1a:	d0ee      	beq.n	8014dfa <_dtoa_r+0xac6>
 8014e1c:	3501      	adds	r5, #1
 8014e1e:	e7c1      	b.n	8014da4 <_dtoa_r+0xa70>
 8014e20:	9b06      	ldr	r3, [sp, #24]
 8014e22:	9a06      	ldr	r2, [sp, #24]
 8014e24:	701d      	strb	r5, [r3, #0]
 8014e26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014e28:	4293      	cmp	r3, r2
 8014e2a:	d02a      	beq.n	8014e82 <_dtoa_r+0xb4e>
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	220a      	movs	r2, #10
 8014e30:	9905      	ldr	r1, [sp, #20]
 8014e32:	9803      	ldr	r0, [sp, #12]
 8014e34:	f000 f9e0 	bl	80151f8 <__multadd>
 8014e38:	9b04      	ldr	r3, [sp, #16]
 8014e3a:	9005      	str	r0, [sp, #20]
 8014e3c:	42bb      	cmp	r3, r7
 8014e3e:	d109      	bne.n	8014e54 <_dtoa_r+0xb20>
 8014e40:	2300      	movs	r3, #0
 8014e42:	220a      	movs	r2, #10
 8014e44:	9904      	ldr	r1, [sp, #16]
 8014e46:	9803      	ldr	r0, [sp, #12]
 8014e48:	f000 f9d6 	bl	80151f8 <__multadd>
 8014e4c:	9004      	str	r0, [sp, #16]
 8014e4e:	0007      	movs	r7, r0
 8014e50:	9406      	str	r4, [sp, #24]
 8014e52:	e778      	b.n	8014d46 <_dtoa_r+0xa12>
 8014e54:	9904      	ldr	r1, [sp, #16]
 8014e56:	2300      	movs	r3, #0
 8014e58:	220a      	movs	r2, #10
 8014e5a:	9803      	ldr	r0, [sp, #12]
 8014e5c:	f000 f9cc 	bl	80151f8 <__multadd>
 8014e60:	2300      	movs	r3, #0
 8014e62:	9004      	str	r0, [sp, #16]
 8014e64:	220a      	movs	r2, #10
 8014e66:	0039      	movs	r1, r7
 8014e68:	9803      	ldr	r0, [sp, #12]
 8014e6a:	f000 f9c5 	bl	80151f8 <__multadd>
 8014e6e:	e7ee      	b.n	8014e4e <_dtoa_r+0xb1a>
 8014e70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014e72:	2401      	movs	r4, #1
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	dd00      	ble.n	8014e7a <_dtoa_r+0xb46>
 8014e78:	001c      	movs	r4, r3
 8014e7a:	9b08      	ldr	r3, [sp, #32]
 8014e7c:	191c      	adds	r4, r3, r4
 8014e7e:	2300      	movs	r3, #0
 8014e80:	9304      	str	r3, [sp, #16]
 8014e82:	9905      	ldr	r1, [sp, #20]
 8014e84:	2201      	movs	r2, #1
 8014e86:	9803      	ldr	r0, [sp, #12]
 8014e88:	f000 fb70 	bl	801556c <__lshift>
 8014e8c:	0031      	movs	r1, r6
 8014e8e:	9005      	str	r0, [sp, #20]
 8014e90:	f000 fbd8 	bl	8015644 <__mcmp>
 8014e94:	2800      	cmp	r0, #0
 8014e96:	dcb3      	bgt.n	8014e00 <_dtoa_r+0xacc>
 8014e98:	d101      	bne.n	8014e9e <_dtoa_r+0xb6a>
 8014e9a:	07ed      	lsls	r5, r5, #31
 8014e9c:	d4b0      	bmi.n	8014e00 <_dtoa_r+0xacc>
 8014e9e:	0023      	movs	r3, r4
 8014ea0:	001c      	movs	r4, r3
 8014ea2:	3b01      	subs	r3, #1
 8014ea4:	781a      	ldrb	r2, [r3, #0]
 8014ea6:	2a30      	cmp	r2, #48	@ 0x30
 8014ea8:	d0fa      	beq.n	8014ea0 <_dtoa_r+0xb6c>
 8014eaa:	e5b7      	b.n	8014a1c <_dtoa_r+0x6e8>
 8014eac:	9a08      	ldr	r2, [sp, #32]
 8014eae:	429a      	cmp	r2, r3
 8014eb0:	d1a7      	bne.n	8014e02 <_dtoa_r+0xace>
 8014eb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014eb4:	3301      	adds	r3, #1
 8014eb6:	930c      	str	r3, [sp, #48]	@ 0x30
 8014eb8:	2331      	movs	r3, #49	@ 0x31
 8014eba:	7013      	strb	r3, [r2, #0]
 8014ebc:	e5ae      	b.n	8014a1c <_dtoa_r+0x6e8>
 8014ebe:	4b15      	ldr	r3, [pc, #84]	@ (8014f14 <_dtoa_r+0xbe0>)
 8014ec0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8014ec2:	9308      	str	r3, [sp, #32]
 8014ec4:	4b14      	ldr	r3, [pc, #80]	@ (8014f18 <_dtoa_r+0xbe4>)
 8014ec6:	2a00      	cmp	r2, #0
 8014ec8:	d001      	beq.n	8014ece <_dtoa_r+0xb9a>
 8014eca:	f7ff fa7b 	bl	80143c4 <_dtoa_r+0x90>
 8014ece:	f7ff fa7b 	bl	80143c8 <_dtoa_r+0x94>
 8014ed2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8014ed4:	2b01      	cmp	r3, #1
 8014ed6:	dc00      	bgt.n	8014eda <_dtoa_r+0xba6>
 8014ed8:	e648      	b.n	8014b6c <_dtoa_r+0x838>
 8014eda:	2001      	movs	r0, #1
 8014edc:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8014ede:	e665      	b.n	8014bac <_dtoa_r+0x878>
 8014ee0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	dc00      	bgt.n	8014ee8 <_dtoa_r+0xbb4>
 8014ee6:	e6d6      	b.n	8014c96 <_dtoa_r+0x962>
 8014ee8:	2400      	movs	r4, #0
 8014eea:	0031      	movs	r1, r6
 8014eec:	9805      	ldr	r0, [sp, #20]
 8014eee:	f7ff f992 	bl	8014216 <quorem>
 8014ef2:	9b08      	ldr	r3, [sp, #32]
 8014ef4:	3030      	adds	r0, #48	@ 0x30
 8014ef6:	5518      	strb	r0, [r3, r4]
 8014ef8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014efa:	3401      	adds	r4, #1
 8014efc:	0005      	movs	r5, r0
 8014efe:	429c      	cmp	r4, r3
 8014f00:	dab6      	bge.n	8014e70 <_dtoa_r+0xb3c>
 8014f02:	2300      	movs	r3, #0
 8014f04:	220a      	movs	r2, #10
 8014f06:	9905      	ldr	r1, [sp, #20]
 8014f08:	9803      	ldr	r0, [sp, #12]
 8014f0a:	f000 f975 	bl	80151f8 <__multadd>
 8014f0e:	9005      	str	r0, [sp, #20]
 8014f10:	e7eb      	b.n	8014eea <_dtoa_r+0xbb6>
 8014f12:	46c0      	nop			@ (mov r8, r8)
 8014f14:	08019fa2 	.word	0x08019fa2
 8014f18:	08019faa 	.word	0x08019faa

08014f1c <_free_r>:
 8014f1c:	b570      	push	{r4, r5, r6, lr}
 8014f1e:	0005      	movs	r5, r0
 8014f20:	1e0c      	subs	r4, r1, #0
 8014f22:	d010      	beq.n	8014f46 <_free_r+0x2a>
 8014f24:	3c04      	subs	r4, #4
 8014f26:	6823      	ldr	r3, [r4, #0]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	da00      	bge.n	8014f2e <_free_r+0x12>
 8014f2c:	18e4      	adds	r4, r4, r3
 8014f2e:	0028      	movs	r0, r5
 8014f30:	f000 f8ea 	bl	8015108 <__malloc_lock>
 8014f34:	4a1d      	ldr	r2, [pc, #116]	@ (8014fac <_free_r+0x90>)
 8014f36:	6813      	ldr	r3, [r2, #0]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d105      	bne.n	8014f48 <_free_r+0x2c>
 8014f3c:	6063      	str	r3, [r4, #4]
 8014f3e:	6014      	str	r4, [r2, #0]
 8014f40:	0028      	movs	r0, r5
 8014f42:	f000 f8e9 	bl	8015118 <__malloc_unlock>
 8014f46:	bd70      	pop	{r4, r5, r6, pc}
 8014f48:	42a3      	cmp	r3, r4
 8014f4a:	d908      	bls.n	8014f5e <_free_r+0x42>
 8014f4c:	6820      	ldr	r0, [r4, #0]
 8014f4e:	1821      	adds	r1, r4, r0
 8014f50:	428b      	cmp	r3, r1
 8014f52:	d1f3      	bne.n	8014f3c <_free_r+0x20>
 8014f54:	6819      	ldr	r1, [r3, #0]
 8014f56:	685b      	ldr	r3, [r3, #4]
 8014f58:	1809      	adds	r1, r1, r0
 8014f5a:	6021      	str	r1, [r4, #0]
 8014f5c:	e7ee      	b.n	8014f3c <_free_r+0x20>
 8014f5e:	001a      	movs	r2, r3
 8014f60:	685b      	ldr	r3, [r3, #4]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d001      	beq.n	8014f6a <_free_r+0x4e>
 8014f66:	42a3      	cmp	r3, r4
 8014f68:	d9f9      	bls.n	8014f5e <_free_r+0x42>
 8014f6a:	6811      	ldr	r1, [r2, #0]
 8014f6c:	1850      	adds	r0, r2, r1
 8014f6e:	42a0      	cmp	r0, r4
 8014f70:	d10b      	bne.n	8014f8a <_free_r+0x6e>
 8014f72:	6820      	ldr	r0, [r4, #0]
 8014f74:	1809      	adds	r1, r1, r0
 8014f76:	1850      	adds	r0, r2, r1
 8014f78:	6011      	str	r1, [r2, #0]
 8014f7a:	4283      	cmp	r3, r0
 8014f7c:	d1e0      	bne.n	8014f40 <_free_r+0x24>
 8014f7e:	6818      	ldr	r0, [r3, #0]
 8014f80:	685b      	ldr	r3, [r3, #4]
 8014f82:	1841      	adds	r1, r0, r1
 8014f84:	6011      	str	r1, [r2, #0]
 8014f86:	6053      	str	r3, [r2, #4]
 8014f88:	e7da      	b.n	8014f40 <_free_r+0x24>
 8014f8a:	42a0      	cmp	r0, r4
 8014f8c:	d902      	bls.n	8014f94 <_free_r+0x78>
 8014f8e:	230c      	movs	r3, #12
 8014f90:	602b      	str	r3, [r5, #0]
 8014f92:	e7d5      	b.n	8014f40 <_free_r+0x24>
 8014f94:	6820      	ldr	r0, [r4, #0]
 8014f96:	1821      	adds	r1, r4, r0
 8014f98:	428b      	cmp	r3, r1
 8014f9a:	d103      	bne.n	8014fa4 <_free_r+0x88>
 8014f9c:	6819      	ldr	r1, [r3, #0]
 8014f9e:	685b      	ldr	r3, [r3, #4]
 8014fa0:	1809      	adds	r1, r1, r0
 8014fa2:	6021      	str	r1, [r4, #0]
 8014fa4:	6063      	str	r3, [r4, #4]
 8014fa6:	6054      	str	r4, [r2, #4]
 8014fa8:	e7ca      	b.n	8014f40 <_free_r+0x24>
 8014faa:	46c0      	nop			@ (mov r8, r8)
 8014fac:	20001fa4 	.word	0x20001fa4

08014fb0 <malloc>:
 8014fb0:	b510      	push	{r4, lr}
 8014fb2:	4b03      	ldr	r3, [pc, #12]	@ (8014fc0 <malloc+0x10>)
 8014fb4:	0001      	movs	r1, r0
 8014fb6:	6818      	ldr	r0, [r3, #0]
 8014fb8:	f000 f826 	bl	8015008 <_malloc_r>
 8014fbc:	bd10      	pop	{r4, pc}
 8014fbe:	46c0      	nop			@ (mov r8, r8)
 8014fc0:	2000020c 	.word	0x2000020c

08014fc4 <sbrk_aligned>:
 8014fc4:	b570      	push	{r4, r5, r6, lr}
 8014fc6:	4e0f      	ldr	r6, [pc, #60]	@ (8015004 <sbrk_aligned+0x40>)
 8014fc8:	000d      	movs	r5, r1
 8014fca:	6831      	ldr	r1, [r6, #0]
 8014fcc:	0004      	movs	r4, r0
 8014fce:	2900      	cmp	r1, #0
 8014fd0:	d102      	bne.n	8014fd8 <sbrk_aligned+0x14>
 8014fd2:	f000 fe6f 	bl	8015cb4 <_sbrk_r>
 8014fd6:	6030      	str	r0, [r6, #0]
 8014fd8:	0029      	movs	r1, r5
 8014fda:	0020      	movs	r0, r4
 8014fdc:	f000 fe6a 	bl	8015cb4 <_sbrk_r>
 8014fe0:	1c43      	adds	r3, r0, #1
 8014fe2:	d103      	bne.n	8014fec <sbrk_aligned+0x28>
 8014fe4:	2501      	movs	r5, #1
 8014fe6:	426d      	negs	r5, r5
 8014fe8:	0028      	movs	r0, r5
 8014fea:	bd70      	pop	{r4, r5, r6, pc}
 8014fec:	2303      	movs	r3, #3
 8014fee:	1cc5      	adds	r5, r0, #3
 8014ff0:	439d      	bics	r5, r3
 8014ff2:	42a8      	cmp	r0, r5
 8014ff4:	d0f8      	beq.n	8014fe8 <sbrk_aligned+0x24>
 8014ff6:	1a29      	subs	r1, r5, r0
 8014ff8:	0020      	movs	r0, r4
 8014ffa:	f000 fe5b 	bl	8015cb4 <_sbrk_r>
 8014ffe:	3001      	adds	r0, #1
 8015000:	d1f2      	bne.n	8014fe8 <sbrk_aligned+0x24>
 8015002:	e7ef      	b.n	8014fe4 <sbrk_aligned+0x20>
 8015004:	20001fa0 	.word	0x20001fa0

08015008 <_malloc_r>:
 8015008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801500a:	2203      	movs	r2, #3
 801500c:	1ccb      	adds	r3, r1, #3
 801500e:	4393      	bics	r3, r2
 8015010:	3308      	adds	r3, #8
 8015012:	0005      	movs	r5, r0
 8015014:	001f      	movs	r7, r3
 8015016:	2b0c      	cmp	r3, #12
 8015018:	d234      	bcs.n	8015084 <_malloc_r+0x7c>
 801501a:	270c      	movs	r7, #12
 801501c:	42b9      	cmp	r1, r7
 801501e:	d833      	bhi.n	8015088 <_malloc_r+0x80>
 8015020:	0028      	movs	r0, r5
 8015022:	f000 f871 	bl	8015108 <__malloc_lock>
 8015026:	4e37      	ldr	r6, [pc, #220]	@ (8015104 <_malloc_r+0xfc>)
 8015028:	6833      	ldr	r3, [r6, #0]
 801502a:	001c      	movs	r4, r3
 801502c:	2c00      	cmp	r4, #0
 801502e:	d12f      	bne.n	8015090 <_malloc_r+0x88>
 8015030:	0039      	movs	r1, r7
 8015032:	0028      	movs	r0, r5
 8015034:	f7ff ffc6 	bl	8014fc4 <sbrk_aligned>
 8015038:	0004      	movs	r4, r0
 801503a:	1c43      	adds	r3, r0, #1
 801503c:	d15f      	bne.n	80150fe <_malloc_r+0xf6>
 801503e:	6834      	ldr	r4, [r6, #0]
 8015040:	9400      	str	r4, [sp, #0]
 8015042:	9b00      	ldr	r3, [sp, #0]
 8015044:	2b00      	cmp	r3, #0
 8015046:	d14a      	bne.n	80150de <_malloc_r+0xd6>
 8015048:	2c00      	cmp	r4, #0
 801504a:	d052      	beq.n	80150f2 <_malloc_r+0xea>
 801504c:	6823      	ldr	r3, [r4, #0]
 801504e:	0028      	movs	r0, r5
 8015050:	18e3      	adds	r3, r4, r3
 8015052:	9900      	ldr	r1, [sp, #0]
 8015054:	9301      	str	r3, [sp, #4]
 8015056:	f000 fe2d 	bl	8015cb4 <_sbrk_r>
 801505a:	9b01      	ldr	r3, [sp, #4]
 801505c:	4283      	cmp	r3, r0
 801505e:	d148      	bne.n	80150f2 <_malloc_r+0xea>
 8015060:	6823      	ldr	r3, [r4, #0]
 8015062:	0028      	movs	r0, r5
 8015064:	1aff      	subs	r7, r7, r3
 8015066:	0039      	movs	r1, r7
 8015068:	f7ff ffac 	bl	8014fc4 <sbrk_aligned>
 801506c:	3001      	adds	r0, #1
 801506e:	d040      	beq.n	80150f2 <_malloc_r+0xea>
 8015070:	6823      	ldr	r3, [r4, #0]
 8015072:	19db      	adds	r3, r3, r7
 8015074:	6023      	str	r3, [r4, #0]
 8015076:	6833      	ldr	r3, [r6, #0]
 8015078:	685a      	ldr	r2, [r3, #4]
 801507a:	2a00      	cmp	r2, #0
 801507c:	d133      	bne.n	80150e6 <_malloc_r+0xde>
 801507e:	9b00      	ldr	r3, [sp, #0]
 8015080:	6033      	str	r3, [r6, #0]
 8015082:	e019      	b.n	80150b8 <_malloc_r+0xb0>
 8015084:	2b00      	cmp	r3, #0
 8015086:	dac9      	bge.n	801501c <_malloc_r+0x14>
 8015088:	230c      	movs	r3, #12
 801508a:	602b      	str	r3, [r5, #0]
 801508c:	2000      	movs	r0, #0
 801508e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015090:	6821      	ldr	r1, [r4, #0]
 8015092:	1bc9      	subs	r1, r1, r7
 8015094:	d420      	bmi.n	80150d8 <_malloc_r+0xd0>
 8015096:	290b      	cmp	r1, #11
 8015098:	d90a      	bls.n	80150b0 <_malloc_r+0xa8>
 801509a:	19e2      	adds	r2, r4, r7
 801509c:	6027      	str	r7, [r4, #0]
 801509e:	42a3      	cmp	r3, r4
 80150a0:	d104      	bne.n	80150ac <_malloc_r+0xa4>
 80150a2:	6032      	str	r2, [r6, #0]
 80150a4:	6863      	ldr	r3, [r4, #4]
 80150a6:	6011      	str	r1, [r2, #0]
 80150a8:	6053      	str	r3, [r2, #4]
 80150aa:	e005      	b.n	80150b8 <_malloc_r+0xb0>
 80150ac:	605a      	str	r2, [r3, #4]
 80150ae:	e7f9      	b.n	80150a4 <_malloc_r+0x9c>
 80150b0:	6862      	ldr	r2, [r4, #4]
 80150b2:	42a3      	cmp	r3, r4
 80150b4:	d10e      	bne.n	80150d4 <_malloc_r+0xcc>
 80150b6:	6032      	str	r2, [r6, #0]
 80150b8:	0028      	movs	r0, r5
 80150ba:	f000 f82d 	bl	8015118 <__malloc_unlock>
 80150be:	0020      	movs	r0, r4
 80150c0:	2207      	movs	r2, #7
 80150c2:	300b      	adds	r0, #11
 80150c4:	1d23      	adds	r3, r4, #4
 80150c6:	4390      	bics	r0, r2
 80150c8:	1ac2      	subs	r2, r0, r3
 80150ca:	4298      	cmp	r0, r3
 80150cc:	d0df      	beq.n	801508e <_malloc_r+0x86>
 80150ce:	1a1b      	subs	r3, r3, r0
 80150d0:	50a3      	str	r3, [r4, r2]
 80150d2:	e7dc      	b.n	801508e <_malloc_r+0x86>
 80150d4:	605a      	str	r2, [r3, #4]
 80150d6:	e7ef      	b.n	80150b8 <_malloc_r+0xb0>
 80150d8:	0023      	movs	r3, r4
 80150da:	6864      	ldr	r4, [r4, #4]
 80150dc:	e7a6      	b.n	801502c <_malloc_r+0x24>
 80150de:	9c00      	ldr	r4, [sp, #0]
 80150e0:	6863      	ldr	r3, [r4, #4]
 80150e2:	9300      	str	r3, [sp, #0]
 80150e4:	e7ad      	b.n	8015042 <_malloc_r+0x3a>
 80150e6:	001a      	movs	r2, r3
 80150e8:	685b      	ldr	r3, [r3, #4]
 80150ea:	42a3      	cmp	r3, r4
 80150ec:	d1fb      	bne.n	80150e6 <_malloc_r+0xde>
 80150ee:	2300      	movs	r3, #0
 80150f0:	e7da      	b.n	80150a8 <_malloc_r+0xa0>
 80150f2:	230c      	movs	r3, #12
 80150f4:	0028      	movs	r0, r5
 80150f6:	602b      	str	r3, [r5, #0]
 80150f8:	f000 f80e 	bl	8015118 <__malloc_unlock>
 80150fc:	e7c6      	b.n	801508c <_malloc_r+0x84>
 80150fe:	6007      	str	r7, [r0, #0]
 8015100:	e7da      	b.n	80150b8 <_malloc_r+0xb0>
 8015102:	46c0      	nop			@ (mov r8, r8)
 8015104:	20001fa4 	.word	0x20001fa4

08015108 <__malloc_lock>:
 8015108:	b510      	push	{r4, lr}
 801510a:	4802      	ldr	r0, [pc, #8]	@ (8015114 <__malloc_lock+0xc>)
 801510c:	f7ff f86d 	bl	80141ea <__retarget_lock_acquire_recursive>
 8015110:	bd10      	pop	{r4, pc}
 8015112:	46c0      	nop			@ (mov r8, r8)
 8015114:	20001f9c 	.word	0x20001f9c

08015118 <__malloc_unlock>:
 8015118:	b510      	push	{r4, lr}
 801511a:	4802      	ldr	r0, [pc, #8]	@ (8015124 <__malloc_unlock+0xc>)
 801511c:	f7ff f866 	bl	80141ec <__retarget_lock_release_recursive>
 8015120:	bd10      	pop	{r4, pc}
 8015122:	46c0      	nop			@ (mov r8, r8)
 8015124:	20001f9c 	.word	0x20001f9c

08015128 <_Balloc>:
 8015128:	b570      	push	{r4, r5, r6, lr}
 801512a:	69c5      	ldr	r5, [r0, #28]
 801512c:	0006      	movs	r6, r0
 801512e:	000c      	movs	r4, r1
 8015130:	2d00      	cmp	r5, #0
 8015132:	d10e      	bne.n	8015152 <_Balloc+0x2a>
 8015134:	2010      	movs	r0, #16
 8015136:	f7ff ff3b 	bl	8014fb0 <malloc>
 801513a:	1e02      	subs	r2, r0, #0
 801513c:	61f0      	str	r0, [r6, #28]
 801513e:	d104      	bne.n	801514a <_Balloc+0x22>
 8015140:	216b      	movs	r1, #107	@ 0x6b
 8015142:	4b19      	ldr	r3, [pc, #100]	@ (80151a8 <_Balloc+0x80>)
 8015144:	4819      	ldr	r0, [pc, #100]	@ (80151ac <_Balloc+0x84>)
 8015146:	f000 fdc7 	bl	8015cd8 <__assert_func>
 801514a:	6045      	str	r5, [r0, #4]
 801514c:	6085      	str	r5, [r0, #8]
 801514e:	6005      	str	r5, [r0, #0]
 8015150:	60c5      	str	r5, [r0, #12]
 8015152:	69f5      	ldr	r5, [r6, #28]
 8015154:	68eb      	ldr	r3, [r5, #12]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d013      	beq.n	8015182 <_Balloc+0x5a>
 801515a:	69f3      	ldr	r3, [r6, #28]
 801515c:	00a2      	lsls	r2, r4, #2
 801515e:	68db      	ldr	r3, [r3, #12]
 8015160:	189b      	adds	r3, r3, r2
 8015162:	6818      	ldr	r0, [r3, #0]
 8015164:	2800      	cmp	r0, #0
 8015166:	d118      	bne.n	801519a <_Balloc+0x72>
 8015168:	2101      	movs	r1, #1
 801516a:	000d      	movs	r5, r1
 801516c:	40a5      	lsls	r5, r4
 801516e:	1d6a      	adds	r2, r5, #5
 8015170:	0030      	movs	r0, r6
 8015172:	0092      	lsls	r2, r2, #2
 8015174:	f000 fdce 	bl	8015d14 <_calloc_r>
 8015178:	2800      	cmp	r0, #0
 801517a:	d00c      	beq.n	8015196 <_Balloc+0x6e>
 801517c:	6044      	str	r4, [r0, #4]
 801517e:	6085      	str	r5, [r0, #8]
 8015180:	e00d      	b.n	801519e <_Balloc+0x76>
 8015182:	2221      	movs	r2, #33	@ 0x21
 8015184:	2104      	movs	r1, #4
 8015186:	0030      	movs	r0, r6
 8015188:	f000 fdc4 	bl	8015d14 <_calloc_r>
 801518c:	69f3      	ldr	r3, [r6, #28]
 801518e:	60e8      	str	r0, [r5, #12]
 8015190:	68db      	ldr	r3, [r3, #12]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d1e1      	bne.n	801515a <_Balloc+0x32>
 8015196:	2000      	movs	r0, #0
 8015198:	bd70      	pop	{r4, r5, r6, pc}
 801519a:	6802      	ldr	r2, [r0, #0]
 801519c:	601a      	str	r2, [r3, #0]
 801519e:	2300      	movs	r3, #0
 80151a0:	6103      	str	r3, [r0, #16]
 80151a2:	60c3      	str	r3, [r0, #12]
 80151a4:	e7f8      	b.n	8015198 <_Balloc+0x70>
 80151a6:	46c0      	nop			@ (mov r8, r8)
 80151a8:	08019faf 	.word	0x08019faf
 80151ac:	0801a02f 	.word	0x0801a02f

080151b0 <_Bfree>:
 80151b0:	b570      	push	{r4, r5, r6, lr}
 80151b2:	69c6      	ldr	r6, [r0, #28]
 80151b4:	0005      	movs	r5, r0
 80151b6:	000c      	movs	r4, r1
 80151b8:	2e00      	cmp	r6, #0
 80151ba:	d10e      	bne.n	80151da <_Bfree+0x2a>
 80151bc:	2010      	movs	r0, #16
 80151be:	f7ff fef7 	bl	8014fb0 <malloc>
 80151c2:	1e02      	subs	r2, r0, #0
 80151c4:	61e8      	str	r0, [r5, #28]
 80151c6:	d104      	bne.n	80151d2 <_Bfree+0x22>
 80151c8:	218f      	movs	r1, #143	@ 0x8f
 80151ca:	4b09      	ldr	r3, [pc, #36]	@ (80151f0 <_Bfree+0x40>)
 80151cc:	4809      	ldr	r0, [pc, #36]	@ (80151f4 <_Bfree+0x44>)
 80151ce:	f000 fd83 	bl	8015cd8 <__assert_func>
 80151d2:	6046      	str	r6, [r0, #4]
 80151d4:	6086      	str	r6, [r0, #8]
 80151d6:	6006      	str	r6, [r0, #0]
 80151d8:	60c6      	str	r6, [r0, #12]
 80151da:	2c00      	cmp	r4, #0
 80151dc:	d007      	beq.n	80151ee <_Bfree+0x3e>
 80151de:	69eb      	ldr	r3, [r5, #28]
 80151e0:	6862      	ldr	r2, [r4, #4]
 80151e2:	68db      	ldr	r3, [r3, #12]
 80151e4:	0092      	lsls	r2, r2, #2
 80151e6:	189b      	adds	r3, r3, r2
 80151e8:	681a      	ldr	r2, [r3, #0]
 80151ea:	6022      	str	r2, [r4, #0]
 80151ec:	601c      	str	r4, [r3, #0]
 80151ee:	bd70      	pop	{r4, r5, r6, pc}
 80151f0:	08019faf 	.word	0x08019faf
 80151f4:	0801a02f 	.word	0x0801a02f

080151f8 <__multadd>:
 80151f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80151fa:	000f      	movs	r7, r1
 80151fc:	9001      	str	r0, [sp, #4]
 80151fe:	000c      	movs	r4, r1
 8015200:	001e      	movs	r6, r3
 8015202:	2000      	movs	r0, #0
 8015204:	690d      	ldr	r5, [r1, #16]
 8015206:	3714      	adds	r7, #20
 8015208:	683b      	ldr	r3, [r7, #0]
 801520a:	3001      	adds	r0, #1
 801520c:	b299      	uxth	r1, r3
 801520e:	4351      	muls	r1, r2
 8015210:	0c1b      	lsrs	r3, r3, #16
 8015212:	4353      	muls	r3, r2
 8015214:	1989      	adds	r1, r1, r6
 8015216:	0c0e      	lsrs	r6, r1, #16
 8015218:	199b      	adds	r3, r3, r6
 801521a:	0c1e      	lsrs	r6, r3, #16
 801521c:	b289      	uxth	r1, r1
 801521e:	041b      	lsls	r3, r3, #16
 8015220:	185b      	adds	r3, r3, r1
 8015222:	c708      	stmia	r7!, {r3}
 8015224:	4285      	cmp	r5, r0
 8015226:	dcef      	bgt.n	8015208 <__multadd+0x10>
 8015228:	2e00      	cmp	r6, #0
 801522a:	d022      	beq.n	8015272 <__multadd+0x7a>
 801522c:	68a3      	ldr	r3, [r4, #8]
 801522e:	42ab      	cmp	r3, r5
 8015230:	dc19      	bgt.n	8015266 <__multadd+0x6e>
 8015232:	6861      	ldr	r1, [r4, #4]
 8015234:	9801      	ldr	r0, [sp, #4]
 8015236:	3101      	adds	r1, #1
 8015238:	f7ff ff76 	bl	8015128 <_Balloc>
 801523c:	1e07      	subs	r7, r0, #0
 801523e:	d105      	bne.n	801524c <__multadd+0x54>
 8015240:	003a      	movs	r2, r7
 8015242:	21ba      	movs	r1, #186	@ 0xba
 8015244:	4b0c      	ldr	r3, [pc, #48]	@ (8015278 <__multadd+0x80>)
 8015246:	480d      	ldr	r0, [pc, #52]	@ (801527c <__multadd+0x84>)
 8015248:	f000 fd46 	bl	8015cd8 <__assert_func>
 801524c:	0021      	movs	r1, r4
 801524e:	6922      	ldr	r2, [r4, #16]
 8015250:	310c      	adds	r1, #12
 8015252:	3202      	adds	r2, #2
 8015254:	0092      	lsls	r2, r2, #2
 8015256:	300c      	adds	r0, #12
 8015258:	f7fe ffd4 	bl	8014204 <memcpy>
 801525c:	0021      	movs	r1, r4
 801525e:	9801      	ldr	r0, [sp, #4]
 8015260:	f7ff ffa6 	bl	80151b0 <_Bfree>
 8015264:	003c      	movs	r4, r7
 8015266:	1d2b      	adds	r3, r5, #4
 8015268:	009b      	lsls	r3, r3, #2
 801526a:	18e3      	adds	r3, r4, r3
 801526c:	3501      	adds	r5, #1
 801526e:	605e      	str	r6, [r3, #4]
 8015270:	6125      	str	r5, [r4, #16]
 8015272:	0020      	movs	r0, r4
 8015274:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015276:	46c0      	nop			@ (mov r8, r8)
 8015278:	0801a01e 	.word	0x0801a01e
 801527c:	0801a02f 	.word	0x0801a02f

08015280 <__hi0bits>:
 8015280:	2280      	movs	r2, #128	@ 0x80
 8015282:	0003      	movs	r3, r0
 8015284:	0252      	lsls	r2, r2, #9
 8015286:	2000      	movs	r0, #0
 8015288:	4293      	cmp	r3, r2
 801528a:	d201      	bcs.n	8015290 <__hi0bits+0x10>
 801528c:	041b      	lsls	r3, r3, #16
 801528e:	3010      	adds	r0, #16
 8015290:	2280      	movs	r2, #128	@ 0x80
 8015292:	0452      	lsls	r2, r2, #17
 8015294:	4293      	cmp	r3, r2
 8015296:	d201      	bcs.n	801529c <__hi0bits+0x1c>
 8015298:	3008      	adds	r0, #8
 801529a:	021b      	lsls	r3, r3, #8
 801529c:	2280      	movs	r2, #128	@ 0x80
 801529e:	0552      	lsls	r2, r2, #21
 80152a0:	4293      	cmp	r3, r2
 80152a2:	d201      	bcs.n	80152a8 <__hi0bits+0x28>
 80152a4:	3004      	adds	r0, #4
 80152a6:	011b      	lsls	r3, r3, #4
 80152a8:	2280      	movs	r2, #128	@ 0x80
 80152aa:	05d2      	lsls	r2, r2, #23
 80152ac:	4293      	cmp	r3, r2
 80152ae:	d201      	bcs.n	80152b4 <__hi0bits+0x34>
 80152b0:	3002      	adds	r0, #2
 80152b2:	009b      	lsls	r3, r3, #2
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	db03      	blt.n	80152c0 <__hi0bits+0x40>
 80152b8:	3001      	adds	r0, #1
 80152ba:	4213      	tst	r3, r2
 80152bc:	d100      	bne.n	80152c0 <__hi0bits+0x40>
 80152be:	2020      	movs	r0, #32
 80152c0:	4770      	bx	lr

080152c2 <__lo0bits>:
 80152c2:	6803      	ldr	r3, [r0, #0]
 80152c4:	0001      	movs	r1, r0
 80152c6:	2207      	movs	r2, #7
 80152c8:	0018      	movs	r0, r3
 80152ca:	4010      	ands	r0, r2
 80152cc:	4213      	tst	r3, r2
 80152ce:	d00d      	beq.n	80152ec <__lo0bits+0x2a>
 80152d0:	3a06      	subs	r2, #6
 80152d2:	2000      	movs	r0, #0
 80152d4:	4213      	tst	r3, r2
 80152d6:	d105      	bne.n	80152e4 <__lo0bits+0x22>
 80152d8:	3002      	adds	r0, #2
 80152da:	4203      	tst	r3, r0
 80152dc:	d003      	beq.n	80152e6 <__lo0bits+0x24>
 80152de:	40d3      	lsrs	r3, r2
 80152e0:	0010      	movs	r0, r2
 80152e2:	600b      	str	r3, [r1, #0]
 80152e4:	4770      	bx	lr
 80152e6:	089b      	lsrs	r3, r3, #2
 80152e8:	600b      	str	r3, [r1, #0]
 80152ea:	e7fb      	b.n	80152e4 <__lo0bits+0x22>
 80152ec:	b29a      	uxth	r2, r3
 80152ee:	2a00      	cmp	r2, #0
 80152f0:	d101      	bne.n	80152f6 <__lo0bits+0x34>
 80152f2:	2010      	movs	r0, #16
 80152f4:	0c1b      	lsrs	r3, r3, #16
 80152f6:	b2da      	uxtb	r2, r3
 80152f8:	2a00      	cmp	r2, #0
 80152fa:	d101      	bne.n	8015300 <__lo0bits+0x3e>
 80152fc:	3008      	adds	r0, #8
 80152fe:	0a1b      	lsrs	r3, r3, #8
 8015300:	071a      	lsls	r2, r3, #28
 8015302:	d101      	bne.n	8015308 <__lo0bits+0x46>
 8015304:	3004      	adds	r0, #4
 8015306:	091b      	lsrs	r3, r3, #4
 8015308:	079a      	lsls	r2, r3, #30
 801530a:	d101      	bne.n	8015310 <__lo0bits+0x4e>
 801530c:	3002      	adds	r0, #2
 801530e:	089b      	lsrs	r3, r3, #2
 8015310:	07da      	lsls	r2, r3, #31
 8015312:	d4e9      	bmi.n	80152e8 <__lo0bits+0x26>
 8015314:	3001      	adds	r0, #1
 8015316:	085b      	lsrs	r3, r3, #1
 8015318:	d1e6      	bne.n	80152e8 <__lo0bits+0x26>
 801531a:	2020      	movs	r0, #32
 801531c:	e7e2      	b.n	80152e4 <__lo0bits+0x22>
	...

08015320 <__i2b>:
 8015320:	b510      	push	{r4, lr}
 8015322:	000c      	movs	r4, r1
 8015324:	2101      	movs	r1, #1
 8015326:	f7ff feff 	bl	8015128 <_Balloc>
 801532a:	2800      	cmp	r0, #0
 801532c:	d107      	bne.n	801533e <__i2b+0x1e>
 801532e:	2146      	movs	r1, #70	@ 0x46
 8015330:	4c05      	ldr	r4, [pc, #20]	@ (8015348 <__i2b+0x28>)
 8015332:	0002      	movs	r2, r0
 8015334:	4b05      	ldr	r3, [pc, #20]	@ (801534c <__i2b+0x2c>)
 8015336:	0020      	movs	r0, r4
 8015338:	31ff      	adds	r1, #255	@ 0xff
 801533a:	f000 fccd 	bl	8015cd8 <__assert_func>
 801533e:	2301      	movs	r3, #1
 8015340:	6144      	str	r4, [r0, #20]
 8015342:	6103      	str	r3, [r0, #16]
 8015344:	bd10      	pop	{r4, pc}
 8015346:	46c0      	nop			@ (mov r8, r8)
 8015348:	0801a02f 	.word	0x0801a02f
 801534c:	0801a01e 	.word	0x0801a01e

08015350 <__multiply>:
 8015350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015352:	0014      	movs	r4, r2
 8015354:	690a      	ldr	r2, [r1, #16]
 8015356:	6923      	ldr	r3, [r4, #16]
 8015358:	000d      	movs	r5, r1
 801535a:	b08b      	sub	sp, #44	@ 0x2c
 801535c:	429a      	cmp	r2, r3
 801535e:	db02      	blt.n	8015366 <__multiply+0x16>
 8015360:	0023      	movs	r3, r4
 8015362:	000c      	movs	r4, r1
 8015364:	001d      	movs	r5, r3
 8015366:	6927      	ldr	r7, [r4, #16]
 8015368:	692e      	ldr	r6, [r5, #16]
 801536a:	6861      	ldr	r1, [r4, #4]
 801536c:	19bb      	adds	r3, r7, r6
 801536e:	9303      	str	r3, [sp, #12]
 8015370:	68a3      	ldr	r3, [r4, #8]
 8015372:	19ba      	adds	r2, r7, r6
 8015374:	4293      	cmp	r3, r2
 8015376:	da00      	bge.n	801537a <__multiply+0x2a>
 8015378:	3101      	adds	r1, #1
 801537a:	f7ff fed5 	bl	8015128 <_Balloc>
 801537e:	9002      	str	r0, [sp, #8]
 8015380:	2800      	cmp	r0, #0
 8015382:	d106      	bne.n	8015392 <__multiply+0x42>
 8015384:	21b1      	movs	r1, #177	@ 0xb1
 8015386:	4b49      	ldr	r3, [pc, #292]	@ (80154ac <__multiply+0x15c>)
 8015388:	4849      	ldr	r0, [pc, #292]	@ (80154b0 <__multiply+0x160>)
 801538a:	9a02      	ldr	r2, [sp, #8]
 801538c:	0049      	lsls	r1, r1, #1
 801538e:	f000 fca3 	bl	8015cd8 <__assert_func>
 8015392:	9b02      	ldr	r3, [sp, #8]
 8015394:	2200      	movs	r2, #0
 8015396:	3314      	adds	r3, #20
 8015398:	469c      	mov	ip, r3
 801539a:	19bb      	adds	r3, r7, r6
 801539c:	009b      	lsls	r3, r3, #2
 801539e:	4463      	add	r3, ip
 80153a0:	9304      	str	r3, [sp, #16]
 80153a2:	4663      	mov	r3, ip
 80153a4:	9904      	ldr	r1, [sp, #16]
 80153a6:	428b      	cmp	r3, r1
 80153a8:	d32a      	bcc.n	8015400 <__multiply+0xb0>
 80153aa:	0023      	movs	r3, r4
 80153ac:	00bf      	lsls	r7, r7, #2
 80153ae:	3314      	adds	r3, #20
 80153b0:	3514      	adds	r5, #20
 80153b2:	9308      	str	r3, [sp, #32]
 80153b4:	00b6      	lsls	r6, r6, #2
 80153b6:	19db      	adds	r3, r3, r7
 80153b8:	9305      	str	r3, [sp, #20]
 80153ba:	19ab      	adds	r3, r5, r6
 80153bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80153be:	2304      	movs	r3, #4
 80153c0:	9306      	str	r3, [sp, #24]
 80153c2:	0023      	movs	r3, r4
 80153c4:	9a05      	ldr	r2, [sp, #20]
 80153c6:	3315      	adds	r3, #21
 80153c8:	9501      	str	r5, [sp, #4]
 80153ca:	429a      	cmp	r2, r3
 80153cc:	d305      	bcc.n	80153da <__multiply+0x8a>
 80153ce:	1b13      	subs	r3, r2, r4
 80153d0:	3b15      	subs	r3, #21
 80153d2:	089b      	lsrs	r3, r3, #2
 80153d4:	3301      	adds	r3, #1
 80153d6:	009b      	lsls	r3, r3, #2
 80153d8:	9306      	str	r3, [sp, #24]
 80153da:	9b01      	ldr	r3, [sp, #4]
 80153dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80153de:	4293      	cmp	r3, r2
 80153e0:	d310      	bcc.n	8015404 <__multiply+0xb4>
 80153e2:	9b03      	ldr	r3, [sp, #12]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	dd05      	ble.n	80153f4 <__multiply+0xa4>
 80153e8:	9b04      	ldr	r3, [sp, #16]
 80153ea:	3b04      	subs	r3, #4
 80153ec:	9304      	str	r3, [sp, #16]
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d056      	beq.n	80154a2 <__multiply+0x152>
 80153f4:	9b02      	ldr	r3, [sp, #8]
 80153f6:	9a03      	ldr	r2, [sp, #12]
 80153f8:	0018      	movs	r0, r3
 80153fa:	611a      	str	r2, [r3, #16]
 80153fc:	b00b      	add	sp, #44	@ 0x2c
 80153fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015400:	c304      	stmia	r3!, {r2}
 8015402:	e7cf      	b.n	80153a4 <__multiply+0x54>
 8015404:	9b01      	ldr	r3, [sp, #4]
 8015406:	6818      	ldr	r0, [r3, #0]
 8015408:	b280      	uxth	r0, r0
 801540a:	2800      	cmp	r0, #0
 801540c:	d01e      	beq.n	801544c <__multiply+0xfc>
 801540e:	4667      	mov	r7, ip
 8015410:	2500      	movs	r5, #0
 8015412:	9e08      	ldr	r6, [sp, #32]
 8015414:	ce02      	ldmia	r6!, {r1}
 8015416:	683b      	ldr	r3, [r7, #0]
 8015418:	9307      	str	r3, [sp, #28]
 801541a:	b28b      	uxth	r3, r1
 801541c:	4343      	muls	r3, r0
 801541e:	001a      	movs	r2, r3
 8015420:	466b      	mov	r3, sp
 8015422:	0c09      	lsrs	r1, r1, #16
 8015424:	8b9b      	ldrh	r3, [r3, #28]
 8015426:	4341      	muls	r1, r0
 8015428:	18d3      	adds	r3, r2, r3
 801542a:	9a07      	ldr	r2, [sp, #28]
 801542c:	195b      	adds	r3, r3, r5
 801542e:	0c12      	lsrs	r2, r2, #16
 8015430:	1889      	adds	r1, r1, r2
 8015432:	0c1a      	lsrs	r2, r3, #16
 8015434:	188a      	adds	r2, r1, r2
 8015436:	b29b      	uxth	r3, r3
 8015438:	0c15      	lsrs	r5, r2, #16
 801543a:	0412      	lsls	r2, r2, #16
 801543c:	431a      	orrs	r2, r3
 801543e:	9b05      	ldr	r3, [sp, #20]
 8015440:	c704      	stmia	r7!, {r2}
 8015442:	42b3      	cmp	r3, r6
 8015444:	d8e6      	bhi.n	8015414 <__multiply+0xc4>
 8015446:	4663      	mov	r3, ip
 8015448:	9a06      	ldr	r2, [sp, #24]
 801544a:	509d      	str	r5, [r3, r2]
 801544c:	9b01      	ldr	r3, [sp, #4]
 801544e:	6818      	ldr	r0, [r3, #0]
 8015450:	0c00      	lsrs	r0, r0, #16
 8015452:	d020      	beq.n	8015496 <__multiply+0x146>
 8015454:	4663      	mov	r3, ip
 8015456:	0025      	movs	r5, r4
 8015458:	4661      	mov	r1, ip
 801545a:	2700      	movs	r7, #0
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	3514      	adds	r5, #20
 8015460:	682a      	ldr	r2, [r5, #0]
 8015462:	680e      	ldr	r6, [r1, #0]
 8015464:	b292      	uxth	r2, r2
 8015466:	4342      	muls	r2, r0
 8015468:	0c36      	lsrs	r6, r6, #16
 801546a:	1992      	adds	r2, r2, r6
 801546c:	19d2      	adds	r2, r2, r7
 801546e:	0416      	lsls	r6, r2, #16
 8015470:	b29b      	uxth	r3, r3
 8015472:	431e      	orrs	r6, r3
 8015474:	600e      	str	r6, [r1, #0]
 8015476:	cd40      	ldmia	r5!, {r6}
 8015478:	684b      	ldr	r3, [r1, #4]
 801547a:	0c36      	lsrs	r6, r6, #16
 801547c:	4346      	muls	r6, r0
 801547e:	b29b      	uxth	r3, r3
 8015480:	0c12      	lsrs	r2, r2, #16
 8015482:	18f3      	adds	r3, r6, r3
 8015484:	189b      	adds	r3, r3, r2
 8015486:	9a05      	ldr	r2, [sp, #20]
 8015488:	0c1f      	lsrs	r7, r3, #16
 801548a:	3104      	adds	r1, #4
 801548c:	42aa      	cmp	r2, r5
 801548e:	d8e7      	bhi.n	8015460 <__multiply+0x110>
 8015490:	4662      	mov	r2, ip
 8015492:	9906      	ldr	r1, [sp, #24]
 8015494:	5053      	str	r3, [r2, r1]
 8015496:	9b01      	ldr	r3, [sp, #4]
 8015498:	3304      	adds	r3, #4
 801549a:	9301      	str	r3, [sp, #4]
 801549c:	2304      	movs	r3, #4
 801549e:	449c      	add	ip, r3
 80154a0:	e79b      	b.n	80153da <__multiply+0x8a>
 80154a2:	9b03      	ldr	r3, [sp, #12]
 80154a4:	3b01      	subs	r3, #1
 80154a6:	9303      	str	r3, [sp, #12]
 80154a8:	e79b      	b.n	80153e2 <__multiply+0x92>
 80154aa:	46c0      	nop			@ (mov r8, r8)
 80154ac:	0801a01e 	.word	0x0801a01e
 80154b0:	0801a02f 	.word	0x0801a02f

080154b4 <__pow5mult>:
 80154b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80154b6:	2303      	movs	r3, #3
 80154b8:	0015      	movs	r5, r2
 80154ba:	0007      	movs	r7, r0
 80154bc:	000e      	movs	r6, r1
 80154be:	401a      	ands	r2, r3
 80154c0:	421d      	tst	r5, r3
 80154c2:	d008      	beq.n	80154d6 <__pow5mult+0x22>
 80154c4:	4925      	ldr	r1, [pc, #148]	@ (801555c <__pow5mult+0xa8>)
 80154c6:	3a01      	subs	r2, #1
 80154c8:	0092      	lsls	r2, r2, #2
 80154ca:	5852      	ldr	r2, [r2, r1]
 80154cc:	2300      	movs	r3, #0
 80154ce:	0031      	movs	r1, r6
 80154d0:	f7ff fe92 	bl	80151f8 <__multadd>
 80154d4:	0006      	movs	r6, r0
 80154d6:	10ad      	asrs	r5, r5, #2
 80154d8:	d03d      	beq.n	8015556 <__pow5mult+0xa2>
 80154da:	69fc      	ldr	r4, [r7, #28]
 80154dc:	2c00      	cmp	r4, #0
 80154de:	d10f      	bne.n	8015500 <__pow5mult+0x4c>
 80154e0:	2010      	movs	r0, #16
 80154e2:	f7ff fd65 	bl	8014fb0 <malloc>
 80154e6:	1e02      	subs	r2, r0, #0
 80154e8:	61f8      	str	r0, [r7, #28]
 80154ea:	d105      	bne.n	80154f8 <__pow5mult+0x44>
 80154ec:	21b4      	movs	r1, #180	@ 0xb4
 80154ee:	4b1c      	ldr	r3, [pc, #112]	@ (8015560 <__pow5mult+0xac>)
 80154f0:	481c      	ldr	r0, [pc, #112]	@ (8015564 <__pow5mult+0xb0>)
 80154f2:	31ff      	adds	r1, #255	@ 0xff
 80154f4:	f000 fbf0 	bl	8015cd8 <__assert_func>
 80154f8:	6044      	str	r4, [r0, #4]
 80154fa:	6084      	str	r4, [r0, #8]
 80154fc:	6004      	str	r4, [r0, #0]
 80154fe:	60c4      	str	r4, [r0, #12]
 8015500:	69fb      	ldr	r3, [r7, #28]
 8015502:	689c      	ldr	r4, [r3, #8]
 8015504:	9301      	str	r3, [sp, #4]
 8015506:	2c00      	cmp	r4, #0
 8015508:	d108      	bne.n	801551c <__pow5mult+0x68>
 801550a:	0038      	movs	r0, r7
 801550c:	4916      	ldr	r1, [pc, #88]	@ (8015568 <__pow5mult+0xb4>)
 801550e:	f7ff ff07 	bl	8015320 <__i2b>
 8015512:	9b01      	ldr	r3, [sp, #4]
 8015514:	0004      	movs	r4, r0
 8015516:	6098      	str	r0, [r3, #8]
 8015518:	2300      	movs	r3, #0
 801551a:	6003      	str	r3, [r0, #0]
 801551c:	2301      	movs	r3, #1
 801551e:	421d      	tst	r5, r3
 8015520:	d00a      	beq.n	8015538 <__pow5mult+0x84>
 8015522:	0031      	movs	r1, r6
 8015524:	0022      	movs	r2, r4
 8015526:	0038      	movs	r0, r7
 8015528:	f7ff ff12 	bl	8015350 <__multiply>
 801552c:	0031      	movs	r1, r6
 801552e:	9001      	str	r0, [sp, #4]
 8015530:	0038      	movs	r0, r7
 8015532:	f7ff fe3d 	bl	80151b0 <_Bfree>
 8015536:	9e01      	ldr	r6, [sp, #4]
 8015538:	106d      	asrs	r5, r5, #1
 801553a:	d00c      	beq.n	8015556 <__pow5mult+0xa2>
 801553c:	6820      	ldr	r0, [r4, #0]
 801553e:	2800      	cmp	r0, #0
 8015540:	d107      	bne.n	8015552 <__pow5mult+0x9e>
 8015542:	0022      	movs	r2, r4
 8015544:	0021      	movs	r1, r4
 8015546:	0038      	movs	r0, r7
 8015548:	f7ff ff02 	bl	8015350 <__multiply>
 801554c:	2300      	movs	r3, #0
 801554e:	6020      	str	r0, [r4, #0]
 8015550:	6003      	str	r3, [r0, #0]
 8015552:	0004      	movs	r4, r0
 8015554:	e7e2      	b.n	801551c <__pow5mult+0x68>
 8015556:	0030      	movs	r0, r6
 8015558:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801555a:	46c0      	nop			@ (mov r8, r8)
 801555c:	0801a088 	.word	0x0801a088
 8015560:	08019faf 	.word	0x08019faf
 8015564:	0801a02f 	.word	0x0801a02f
 8015568:	00000271 	.word	0x00000271

0801556c <__lshift>:
 801556c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801556e:	000c      	movs	r4, r1
 8015570:	0016      	movs	r6, r2
 8015572:	6923      	ldr	r3, [r4, #16]
 8015574:	1157      	asrs	r7, r2, #5
 8015576:	b085      	sub	sp, #20
 8015578:	18fb      	adds	r3, r7, r3
 801557a:	9301      	str	r3, [sp, #4]
 801557c:	3301      	adds	r3, #1
 801557e:	9300      	str	r3, [sp, #0]
 8015580:	6849      	ldr	r1, [r1, #4]
 8015582:	68a3      	ldr	r3, [r4, #8]
 8015584:	9002      	str	r0, [sp, #8]
 8015586:	9a00      	ldr	r2, [sp, #0]
 8015588:	4293      	cmp	r3, r2
 801558a:	db10      	blt.n	80155ae <__lshift+0x42>
 801558c:	9802      	ldr	r0, [sp, #8]
 801558e:	f7ff fdcb 	bl	8015128 <_Balloc>
 8015592:	2300      	movs	r3, #0
 8015594:	0001      	movs	r1, r0
 8015596:	0005      	movs	r5, r0
 8015598:	001a      	movs	r2, r3
 801559a:	3114      	adds	r1, #20
 801559c:	4298      	cmp	r0, r3
 801559e:	d10c      	bne.n	80155ba <__lshift+0x4e>
 80155a0:	21ef      	movs	r1, #239	@ 0xef
 80155a2:	002a      	movs	r2, r5
 80155a4:	4b25      	ldr	r3, [pc, #148]	@ (801563c <__lshift+0xd0>)
 80155a6:	4826      	ldr	r0, [pc, #152]	@ (8015640 <__lshift+0xd4>)
 80155a8:	0049      	lsls	r1, r1, #1
 80155aa:	f000 fb95 	bl	8015cd8 <__assert_func>
 80155ae:	3101      	adds	r1, #1
 80155b0:	005b      	lsls	r3, r3, #1
 80155b2:	e7e8      	b.n	8015586 <__lshift+0x1a>
 80155b4:	0098      	lsls	r0, r3, #2
 80155b6:	500a      	str	r2, [r1, r0]
 80155b8:	3301      	adds	r3, #1
 80155ba:	42bb      	cmp	r3, r7
 80155bc:	dbfa      	blt.n	80155b4 <__lshift+0x48>
 80155be:	43fb      	mvns	r3, r7
 80155c0:	17db      	asrs	r3, r3, #31
 80155c2:	401f      	ands	r7, r3
 80155c4:	00bf      	lsls	r7, r7, #2
 80155c6:	0023      	movs	r3, r4
 80155c8:	201f      	movs	r0, #31
 80155ca:	19c9      	adds	r1, r1, r7
 80155cc:	0037      	movs	r7, r6
 80155ce:	6922      	ldr	r2, [r4, #16]
 80155d0:	3314      	adds	r3, #20
 80155d2:	0092      	lsls	r2, r2, #2
 80155d4:	189a      	adds	r2, r3, r2
 80155d6:	4007      	ands	r7, r0
 80155d8:	4206      	tst	r6, r0
 80155da:	d029      	beq.n	8015630 <__lshift+0xc4>
 80155dc:	3001      	adds	r0, #1
 80155de:	1bc0      	subs	r0, r0, r7
 80155e0:	9003      	str	r0, [sp, #12]
 80155e2:	468c      	mov	ip, r1
 80155e4:	2000      	movs	r0, #0
 80155e6:	681e      	ldr	r6, [r3, #0]
 80155e8:	40be      	lsls	r6, r7
 80155ea:	4306      	orrs	r6, r0
 80155ec:	4660      	mov	r0, ip
 80155ee:	c040      	stmia	r0!, {r6}
 80155f0:	4684      	mov	ip, r0
 80155f2:	9e03      	ldr	r6, [sp, #12]
 80155f4:	cb01      	ldmia	r3!, {r0}
 80155f6:	40f0      	lsrs	r0, r6
 80155f8:	429a      	cmp	r2, r3
 80155fa:	d8f4      	bhi.n	80155e6 <__lshift+0x7a>
 80155fc:	0026      	movs	r6, r4
 80155fe:	3615      	adds	r6, #21
 8015600:	2304      	movs	r3, #4
 8015602:	42b2      	cmp	r2, r6
 8015604:	d304      	bcc.n	8015610 <__lshift+0xa4>
 8015606:	1b13      	subs	r3, r2, r4
 8015608:	3b15      	subs	r3, #21
 801560a:	089b      	lsrs	r3, r3, #2
 801560c:	3301      	adds	r3, #1
 801560e:	009b      	lsls	r3, r3, #2
 8015610:	50c8      	str	r0, [r1, r3]
 8015612:	2800      	cmp	r0, #0
 8015614:	d002      	beq.n	801561c <__lshift+0xb0>
 8015616:	9b01      	ldr	r3, [sp, #4]
 8015618:	3302      	adds	r3, #2
 801561a:	9300      	str	r3, [sp, #0]
 801561c:	9b00      	ldr	r3, [sp, #0]
 801561e:	9802      	ldr	r0, [sp, #8]
 8015620:	3b01      	subs	r3, #1
 8015622:	0021      	movs	r1, r4
 8015624:	612b      	str	r3, [r5, #16]
 8015626:	f7ff fdc3 	bl	80151b0 <_Bfree>
 801562a:	0028      	movs	r0, r5
 801562c:	b005      	add	sp, #20
 801562e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015630:	cb01      	ldmia	r3!, {r0}
 8015632:	c101      	stmia	r1!, {r0}
 8015634:	429a      	cmp	r2, r3
 8015636:	d8fb      	bhi.n	8015630 <__lshift+0xc4>
 8015638:	e7f0      	b.n	801561c <__lshift+0xb0>
 801563a:	46c0      	nop			@ (mov r8, r8)
 801563c:	0801a01e 	.word	0x0801a01e
 8015640:	0801a02f 	.word	0x0801a02f

08015644 <__mcmp>:
 8015644:	b530      	push	{r4, r5, lr}
 8015646:	690b      	ldr	r3, [r1, #16]
 8015648:	6904      	ldr	r4, [r0, #16]
 801564a:	0002      	movs	r2, r0
 801564c:	1ae0      	subs	r0, r4, r3
 801564e:	429c      	cmp	r4, r3
 8015650:	d10f      	bne.n	8015672 <__mcmp+0x2e>
 8015652:	3214      	adds	r2, #20
 8015654:	009b      	lsls	r3, r3, #2
 8015656:	3114      	adds	r1, #20
 8015658:	0014      	movs	r4, r2
 801565a:	18c9      	adds	r1, r1, r3
 801565c:	18d2      	adds	r2, r2, r3
 801565e:	3a04      	subs	r2, #4
 8015660:	3904      	subs	r1, #4
 8015662:	6815      	ldr	r5, [r2, #0]
 8015664:	680b      	ldr	r3, [r1, #0]
 8015666:	429d      	cmp	r5, r3
 8015668:	d004      	beq.n	8015674 <__mcmp+0x30>
 801566a:	2001      	movs	r0, #1
 801566c:	429d      	cmp	r5, r3
 801566e:	d200      	bcs.n	8015672 <__mcmp+0x2e>
 8015670:	3802      	subs	r0, #2
 8015672:	bd30      	pop	{r4, r5, pc}
 8015674:	4294      	cmp	r4, r2
 8015676:	d3f2      	bcc.n	801565e <__mcmp+0x1a>
 8015678:	e7fb      	b.n	8015672 <__mcmp+0x2e>
	...

0801567c <__mdiff>:
 801567c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801567e:	000c      	movs	r4, r1
 8015680:	b087      	sub	sp, #28
 8015682:	9000      	str	r0, [sp, #0]
 8015684:	0011      	movs	r1, r2
 8015686:	0020      	movs	r0, r4
 8015688:	0017      	movs	r7, r2
 801568a:	f7ff ffdb 	bl	8015644 <__mcmp>
 801568e:	1e05      	subs	r5, r0, #0
 8015690:	d110      	bne.n	80156b4 <__mdiff+0x38>
 8015692:	0001      	movs	r1, r0
 8015694:	9800      	ldr	r0, [sp, #0]
 8015696:	f7ff fd47 	bl	8015128 <_Balloc>
 801569a:	1e02      	subs	r2, r0, #0
 801569c:	d104      	bne.n	80156a8 <__mdiff+0x2c>
 801569e:	4b40      	ldr	r3, [pc, #256]	@ (80157a0 <__mdiff+0x124>)
 80156a0:	4840      	ldr	r0, [pc, #256]	@ (80157a4 <__mdiff+0x128>)
 80156a2:	4941      	ldr	r1, [pc, #260]	@ (80157a8 <__mdiff+0x12c>)
 80156a4:	f000 fb18 	bl	8015cd8 <__assert_func>
 80156a8:	2301      	movs	r3, #1
 80156aa:	6145      	str	r5, [r0, #20]
 80156ac:	6103      	str	r3, [r0, #16]
 80156ae:	0010      	movs	r0, r2
 80156b0:	b007      	add	sp, #28
 80156b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156b4:	2600      	movs	r6, #0
 80156b6:	42b0      	cmp	r0, r6
 80156b8:	da03      	bge.n	80156c2 <__mdiff+0x46>
 80156ba:	0023      	movs	r3, r4
 80156bc:	003c      	movs	r4, r7
 80156be:	001f      	movs	r7, r3
 80156c0:	3601      	adds	r6, #1
 80156c2:	6861      	ldr	r1, [r4, #4]
 80156c4:	9800      	ldr	r0, [sp, #0]
 80156c6:	f7ff fd2f 	bl	8015128 <_Balloc>
 80156ca:	1e02      	subs	r2, r0, #0
 80156cc:	d103      	bne.n	80156d6 <__mdiff+0x5a>
 80156ce:	4b34      	ldr	r3, [pc, #208]	@ (80157a0 <__mdiff+0x124>)
 80156d0:	4834      	ldr	r0, [pc, #208]	@ (80157a4 <__mdiff+0x128>)
 80156d2:	4936      	ldr	r1, [pc, #216]	@ (80157ac <__mdiff+0x130>)
 80156d4:	e7e6      	b.n	80156a4 <__mdiff+0x28>
 80156d6:	6923      	ldr	r3, [r4, #16]
 80156d8:	3414      	adds	r4, #20
 80156da:	9300      	str	r3, [sp, #0]
 80156dc:	009b      	lsls	r3, r3, #2
 80156de:	18e3      	adds	r3, r4, r3
 80156e0:	0021      	movs	r1, r4
 80156e2:	9401      	str	r4, [sp, #4]
 80156e4:	003c      	movs	r4, r7
 80156e6:	9302      	str	r3, [sp, #8]
 80156e8:	693b      	ldr	r3, [r7, #16]
 80156ea:	3414      	adds	r4, #20
 80156ec:	009b      	lsls	r3, r3, #2
 80156ee:	18e3      	adds	r3, r4, r3
 80156f0:	9303      	str	r3, [sp, #12]
 80156f2:	0003      	movs	r3, r0
 80156f4:	60c6      	str	r6, [r0, #12]
 80156f6:	468c      	mov	ip, r1
 80156f8:	2000      	movs	r0, #0
 80156fa:	3314      	adds	r3, #20
 80156fc:	9304      	str	r3, [sp, #16]
 80156fe:	9305      	str	r3, [sp, #20]
 8015700:	4663      	mov	r3, ip
 8015702:	cb20      	ldmia	r3!, {r5}
 8015704:	b2a9      	uxth	r1, r5
 8015706:	000e      	movs	r6, r1
 8015708:	469c      	mov	ip, r3
 801570a:	cc08      	ldmia	r4!, {r3}
 801570c:	0c2d      	lsrs	r5, r5, #16
 801570e:	b299      	uxth	r1, r3
 8015710:	1a71      	subs	r1, r6, r1
 8015712:	1809      	adds	r1, r1, r0
 8015714:	0c1b      	lsrs	r3, r3, #16
 8015716:	1408      	asrs	r0, r1, #16
 8015718:	1aeb      	subs	r3, r5, r3
 801571a:	181b      	adds	r3, r3, r0
 801571c:	1418      	asrs	r0, r3, #16
 801571e:	b289      	uxth	r1, r1
 8015720:	041b      	lsls	r3, r3, #16
 8015722:	4319      	orrs	r1, r3
 8015724:	9b05      	ldr	r3, [sp, #20]
 8015726:	c302      	stmia	r3!, {r1}
 8015728:	9305      	str	r3, [sp, #20]
 801572a:	9b03      	ldr	r3, [sp, #12]
 801572c:	42a3      	cmp	r3, r4
 801572e:	d8e7      	bhi.n	8015700 <__mdiff+0x84>
 8015730:	0039      	movs	r1, r7
 8015732:	9c03      	ldr	r4, [sp, #12]
 8015734:	3115      	adds	r1, #21
 8015736:	2304      	movs	r3, #4
 8015738:	428c      	cmp	r4, r1
 801573a:	d304      	bcc.n	8015746 <__mdiff+0xca>
 801573c:	1be3      	subs	r3, r4, r7
 801573e:	3b15      	subs	r3, #21
 8015740:	089b      	lsrs	r3, r3, #2
 8015742:	3301      	adds	r3, #1
 8015744:	009b      	lsls	r3, r3, #2
 8015746:	9901      	ldr	r1, [sp, #4]
 8015748:	18cd      	adds	r5, r1, r3
 801574a:	9904      	ldr	r1, [sp, #16]
 801574c:	002e      	movs	r6, r5
 801574e:	18cb      	adds	r3, r1, r3
 8015750:	001f      	movs	r7, r3
 8015752:	9902      	ldr	r1, [sp, #8]
 8015754:	428e      	cmp	r6, r1
 8015756:	d311      	bcc.n	801577c <__mdiff+0x100>
 8015758:	9c02      	ldr	r4, [sp, #8]
 801575a:	1ee9      	subs	r1, r5, #3
 801575c:	2000      	movs	r0, #0
 801575e:	428c      	cmp	r4, r1
 8015760:	d304      	bcc.n	801576c <__mdiff+0xf0>
 8015762:	0021      	movs	r1, r4
 8015764:	3103      	adds	r1, #3
 8015766:	1b49      	subs	r1, r1, r5
 8015768:	0889      	lsrs	r1, r1, #2
 801576a:	0088      	lsls	r0, r1, #2
 801576c:	181b      	adds	r3, r3, r0
 801576e:	3b04      	subs	r3, #4
 8015770:	6819      	ldr	r1, [r3, #0]
 8015772:	2900      	cmp	r1, #0
 8015774:	d010      	beq.n	8015798 <__mdiff+0x11c>
 8015776:	9b00      	ldr	r3, [sp, #0]
 8015778:	6113      	str	r3, [r2, #16]
 801577a:	e798      	b.n	80156ae <__mdiff+0x32>
 801577c:	4684      	mov	ip, r0
 801577e:	ce02      	ldmia	r6!, {r1}
 8015780:	b288      	uxth	r0, r1
 8015782:	4460      	add	r0, ip
 8015784:	1400      	asrs	r0, r0, #16
 8015786:	0c0c      	lsrs	r4, r1, #16
 8015788:	1904      	adds	r4, r0, r4
 801578a:	4461      	add	r1, ip
 801578c:	1420      	asrs	r0, r4, #16
 801578e:	b289      	uxth	r1, r1
 8015790:	0424      	lsls	r4, r4, #16
 8015792:	4321      	orrs	r1, r4
 8015794:	c702      	stmia	r7!, {r1}
 8015796:	e7dc      	b.n	8015752 <__mdiff+0xd6>
 8015798:	9900      	ldr	r1, [sp, #0]
 801579a:	3901      	subs	r1, #1
 801579c:	9100      	str	r1, [sp, #0]
 801579e:	e7e6      	b.n	801576e <__mdiff+0xf2>
 80157a0:	0801a01e 	.word	0x0801a01e
 80157a4:	0801a02f 	.word	0x0801a02f
 80157a8:	00000237 	.word	0x00000237
 80157ac:	00000245 	.word	0x00000245

080157b0 <__d2b>:
 80157b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80157b2:	2101      	movs	r1, #1
 80157b4:	0016      	movs	r6, r2
 80157b6:	001f      	movs	r7, r3
 80157b8:	f7ff fcb6 	bl	8015128 <_Balloc>
 80157bc:	1e04      	subs	r4, r0, #0
 80157be:	d105      	bne.n	80157cc <__d2b+0x1c>
 80157c0:	0022      	movs	r2, r4
 80157c2:	4b25      	ldr	r3, [pc, #148]	@ (8015858 <__d2b+0xa8>)
 80157c4:	4825      	ldr	r0, [pc, #148]	@ (801585c <__d2b+0xac>)
 80157c6:	4926      	ldr	r1, [pc, #152]	@ (8015860 <__d2b+0xb0>)
 80157c8:	f000 fa86 	bl	8015cd8 <__assert_func>
 80157cc:	033b      	lsls	r3, r7, #12
 80157ce:	007d      	lsls	r5, r7, #1
 80157d0:	0b1b      	lsrs	r3, r3, #12
 80157d2:	0d6d      	lsrs	r5, r5, #21
 80157d4:	d002      	beq.n	80157dc <__d2b+0x2c>
 80157d6:	2280      	movs	r2, #128	@ 0x80
 80157d8:	0352      	lsls	r2, r2, #13
 80157da:	4313      	orrs	r3, r2
 80157dc:	9301      	str	r3, [sp, #4]
 80157de:	2e00      	cmp	r6, #0
 80157e0:	d025      	beq.n	801582e <__d2b+0x7e>
 80157e2:	4668      	mov	r0, sp
 80157e4:	9600      	str	r6, [sp, #0]
 80157e6:	f7ff fd6c 	bl	80152c2 <__lo0bits>
 80157ea:	9b01      	ldr	r3, [sp, #4]
 80157ec:	9900      	ldr	r1, [sp, #0]
 80157ee:	2800      	cmp	r0, #0
 80157f0:	d01b      	beq.n	801582a <__d2b+0x7a>
 80157f2:	2220      	movs	r2, #32
 80157f4:	001e      	movs	r6, r3
 80157f6:	1a12      	subs	r2, r2, r0
 80157f8:	4096      	lsls	r6, r2
 80157fa:	0032      	movs	r2, r6
 80157fc:	40c3      	lsrs	r3, r0
 80157fe:	430a      	orrs	r2, r1
 8015800:	6162      	str	r2, [r4, #20]
 8015802:	9301      	str	r3, [sp, #4]
 8015804:	9e01      	ldr	r6, [sp, #4]
 8015806:	61a6      	str	r6, [r4, #24]
 8015808:	1e73      	subs	r3, r6, #1
 801580a:	419e      	sbcs	r6, r3
 801580c:	3601      	adds	r6, #1
 801580e:	6126      	str	r6, [r4, #16]
 8015810:	2d00      	cmp	r5, #0
 8015812:	d014      	beq.n	801583e <__d2b+0x8e>
 8015814:	2635      	movs	r6, #53	@ 0x35
 8015816:	4b13      	ldr	r3, [pc, #76]	@ (8015864 <__d2b+0xb4>)
 8015818:	18ed      	adds	r5, r5, r3
 801581a:	9b08      	ldr	r3, [sp, #32]
 801581c:	182d      	adds	r5, r5, r0
 801581e:	601d      	str	r5, [r3, #0]
 8015820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015822:	1a36      	subs	r6, r6, r0
 8015824:	601e      	str	r6, [r3, #0]
 8015826:	0020      	movs	r0, r4
 8015828:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801582a:	6161      	str	r1, [r4, #20]
 801582c:	e7ea      	b.n	8015804 <__d2b+0x54>
 801582e:	a801      	add	r0, sp, #4
 8015830:	f7ff fd47 	bl	80152c2 <__lo0bits>
 8015834:	9b01      	ldr	r3, [sp, #4]
 8015836:	2601      	movs	r6, #1
 8015838:	6163      	str	r3, [r4, #20]
 801583a:	3020      	adds	r0, #32
 801583c:	e7e7      	b.n	801580e <__d2b+0x5e>
 801583e:	4b0a      	ldr	r3, [pc, #40]	@ (8015868 <__d2b+0xb8>)
 8015840:	18c0      	adds	r0, r0, r3
 8015842:	9b08      	ldr	r3, [sp, #32]
 8015844:	6018      	str	r0, [r3, #0]
 8015846:	4b09      	ldr	r3, [pc, #36]	@ (801586c <__d2b+0xbc>)
 8015848:	18f3      	adds	r3, r6, r3
 801584a:	009b      	lsls	r3, r3, #2
 801584c:	18e3      	adds	r3, r4, r3
 801584e:	6958      	ldr	r0, [r3, #20]
 8015850:	f7ff fd16 	bl	8015280 <__hi0bits>
 8015854:	0176      	lsls	r6, r6, #5
 8015856:	e7e3      	b.n	8015820 <__d2b+0x70>
 8015858:	0801a01e 	.word	0x0801a01e
 801585c:	0801a02f 	.word	0x0801a02f
 8015860:	0000030f 	.word	0x0000030f
 8015864:	fffffbcd 	.word	0xfffffbcd
 8015868:	fffffbce 	.word	0xfffffbce
 801586c:	3fffffff 	.word	0x3fffffff

08015870 <__ssputs_r>:
 8015870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015872:	688e      	ldr	r6, [r1, #8]
 8015874:	b085      	sub	sp, #20
 8015876:	001f      	movs	r7, r3
 8015878:	000c      	movs	r4, r1
 801587a:	680b      	ldr	r3, [r1, #0]
 801587c:	9002      	str	r0, [sp, #8]
 801587e:	9203      	str	r2, [sp, #12]
 8015880:	42be      	cmp	r6, r7
 8015882:	d830      	bhi.n	80158e6 <__ssputs_r+0x76>
 8015884:	210c      	movs	r1, #12
 8015886:	5e62      	ldrsh	r2, [r4, r1]
 8015888:	2190      	movs	r1, #144	@ 0x90
 801588a:	00c9      	lsls	r1, r1, #3
 801588c:	420a      	tst	r2, r1
 801588e:	d028      	beq.n	80158e2 <__ssputs_r+0x72>
 8015890:	2003      	movs	r0, #3
 8015892:	6921      	ldr	r1, [r4, #16]
 8015894:	1a5b      	subs	r3, r3, r1
 8015896:	9301      	str	r3, [sp, #4]
 8015898:	6963      	ldr	r3, [r4, #20]
 801589a:	4343      	muls	r3, r0
 801589c:	9801      	ldr	r0, [sp, #4]
 801589e:	0fdd      	lsrs	r5, r3, #31
 80158a0:	18ed      	adds	r5, r5, r3
 80158a2:	1c7b      	adds	r3, r7, #1
 80158a4:	181b      	adds	r3, r3, r0
 80158a6:	106d      	asrs	r5, r5, #1
 80158a8:	42ab      	cmp	r3, r5
 80158aa:	d900      	bls.n	80158ae <__ssputs_r+0x3e>
 80158ac:	001d      	movs	r5, r3
 80158ae:	0552      	lsls	r2, r2, #21
 80158b0:	d528      	bpl.n	8015904 <__ssputs_r+0x94>
 80158b2:	0029      	movs	r1, r5
 80158b4:	9802      	ldr	r0, [sp, #8]
 80158b6:	f7ff fba7 	bl	8015008 <_malloc_r>
 80158ba:	1e06      	subs	r6, r0, #0
 80158bc:	d02c      	beq.n	8015918 <__ssputs_r+0xa8>
 80158be:	9a01      	ldr	r2, [sp, #4]
 80158c0:	6921      	ldr	r1, [r4, #16]
 80158c2:	f7fe fc9f 	bl	8014204 <memcpy>
 80158c6:	89a2      	ldrh	r2, [r4, #12]
 80158c8:	4b18      	ldr	r3, [pc, #96]	@ (801592c <__ssputs_r+0xbc>)
 80158ca:	401a      	ands	r2, r3
 80158cc:	2380      	movs	r3, #128	@ 0x80
 80158ce:	4313      	orrs	r3, r2
 80158d0:	81a3      	strh	r3, [r4, #12]
 80158d2:	9b01      	ldr	r3, [sp, #4]
 80158d4:	6126      	str	r6, [r4, #16]
 80158d6:	18f6      	adds	r6, r6, r3
 80158d8:	6026      	str	r6, [r4, #0]
 80158da:	003e      	movs	r6, r7
 80158dc:	6165      	str	r5, [r4, #20]
 80158de:	1aed      	subs	r5, r5, r3
 80158e0:	60a5      	str	r5, [r4, #8]
 80158e2:	42be      	cmp	r6, r7
 80158e4:	d900      	bls.n	80158e8 <__ssputs_r+0x78>
 80158e6:	003e      	movs	r6, r7
 80158e8:	0032      	movs	r2, r6
 80158ea:	9903      	ldr	r1, [sp, #12]
 80158ec:	6820      	ldr	r0, [r4, #0]
 80158ee:	f000 f9ce 	bl	8015c8e <memmove>
 80158f2:	2000      	movs	r0, #0
 80158f4:	68a3      	ldr	r3, [r4, #8]
 80158f6:	1b9b      	subs	r3, r3, r6
 80158f8:	60a3      	str	r3, [r4, #8]
 80158fa:	6823      	ldr	r3, [r4, #0]
 80158fc:	199b      	adds	r3, r3, r6
 80158fe:	6023      	str	r3, [r4, #0]
 8015900:	b005      	add	sp, #20
 8015902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015904:	002a      	movs	r2, r5
 8015906:	9802      	ldr	r0, [sp, #8]
 8015908:	f000 fa43 	bl	8015d92 <_realloc_r>
 801590c:	1e06      	subs	r6, r0, #0
 801590e:	d1e0      	bne.n	80158d2 <__ssputs_r+0x62>
 8015910:	6921      	ldr	r1, [r4, #16]
 8015912:	9802      	ldr	r0, [sp, #8]
 8015914:	f7ff fb02 	bl	8014f1c <_free_r>
 8015918:	230c      	movs	r3, #12
 801591a:	2001      	movs	r0, #1
 801591c:	9a02      	ldr	r2, [sp, #8]
 801591e:	4240      	negs	r0, r0
 8015920:	6013      	str	r3, [r2, #0]
 8015922:	89a2      	ldrh	r2, [r4, #12]
 8015924:	3334      	adds	r3, #52	@ 0x34
 8015926:	4313      	orrs	r3, r2
 8015928:	81a3      	strh	r3, [r4, #12]
 801592a:	e7e9      	b.n	8015900 <__ssputs_r+0x90>
 801592c:	fffffb7f 	.word	0xfffffb7f

08015930 <_svfiprintf_r>:
 8015930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015932:	b0a1      	sub	sp, #132	@ 0x84
 8015934:	9003      	str	r0, [sp, #12]
 8015936:	001d      	movs	r5, r3
 8015938:	898b      	ldrh	r3, [r1, #12]
 801593a:	000f      	movs	r7, r1
 801593c:	0016      	movs	r6, r2
 801593e:	061b      	lsls	r3, r3, #24
 8015940:	d511      	bpl.n	8015966 <_svfiprintf_r+0x36>
 8015942:	690b      	ldr	r3, [r1, #16]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d10e      	bne.n	8015966 <_svfiprintf_r+0x36>
 8015948:	2140      	movs	r1, #64	@ 0x40
 801594a:	f7ff fb5d 	bl	8015008 <_malloc_r>
 801594e:	6038      	str	r0, [r7, #0]
 8015950:	6138      	str	r0, [r7, #16]
 8015952:	2800      	cmp	r0, #0
 8015954:	d105      	bne.n	8015962 <_svfiprintf_r+0x32>
 8015956:	230c      	movs	r3, #12
 8015958:	9a03      	ldr	r2, [sp, #12]
 801595a:	6013      	str	r3, [r2, #0]
 801595c:	2001      	movs	r0, #1
 801595e:	4240      	negs	r0, r0
 8015960:	e0cf      	b.n	8015b02 <_svfiprintf_r+0x1d2>
 8015962:	2340      	movs	r3, #64	@ 0x40
 8015964:	617b      	str	r3, [r7, #20]
 8015966:	2300      	movs	r3, #0
 8015968:	ac08      	add	r4, sp, #32
 801596a:	6163      	str	r3, [r4, #20]
 801596c:	3320      	adds	r3, #32
 801596e:	7663      	strb	r3, [r4, #25]
 8015970:	3310      	adds	r3, #16
 8015972:	76a3      	strb	r3, [r4, #26]
 8015974:	9507      	str	r5, [sp, #28]
 8015976:	0035      	movs	r5, r6
 8015978:	782b      	ldrb	r3, [r5, #0]
 801597a:	2b00      	cmp	r3, #0
 801597c:	d001      	beq.n	8015982 <_svfiprintf_r+0x52>
 801597e:	2b25      	cmp	r3, #37	@ 0x25
 8015980:	d148      	bne.n	8015a14 <_svfiprintf_r+0xe4>
 8015982:	1bab      	subs	r3, r5, r6
 8015984:	9305      	str	r3, [sp, #20]
 8015986:	42b5      	cmp	r5, r6
 8015988:	d00b      	beq.n	80159a2 <_svfiprintf_r+0x72>
 801598a:	0032      	movs	r2, r6
 801598c:	0039      	movs	r1, r7
 801598e:	9803      	ldr	r0, [sp, #12]
 8015990:	f7ff ff6e 	bl	8015870 <__ssputs_r>
 8015994:	3001      	adds	r0, #1
 8015996:	d100      	bne.n	801599a <_svfiprintf_r+0x6a>
 8015998:	e0ae      	b.n	8015af8 <_svfiprintf_r+0x1c8>
 801599a:	6963      	ldr	r3, [r4, #20]
 801599c:	9a05      	ldr	r2, [sp, #20]
 801599e:	189b      	adds	r3, r3, r2
 80159a0:	6163      	str	r3, [r4, #20]
 80159a2:	782b      	ldrb	r3, [r5, #0]
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d100      	bne.n	80159aa <_svfiprintf_r+0x7a>
 80159a8:	e0a6      	b.n	8015af8 <_svfiprintf_r+0x1c8>
 80159aa:	2201      	movs	r2, #1
 80159ac:	2300      	movs	r3, #0
 80159ae:	4252      	negs	r2, r2
 80159b0:	6062      	str	r2, [r4, #4]
 80159b2:	a904      	add	r1, sp, #16
 80159b4:	3254      	adds	r2, #84	@ 0x54
 80159b6:	1852      	adds	r2, r2, r1
 80159b8:	1c6e      	adds	r6, r5, #1
 80159ba:	6023      	str	r3, [r4, #0]
 80159bc:	60e3      	str	r3, [r4, #12]
 80159be:	60a3      	str	r3, [r4, #8]
 80159c0:	7013      	strb	r3, [r2, #0]
 80159c2:	65a3      	str	r3, [r4, #88]	@ 0x58
 80159c4:	4b54      	ldr	r3, [pc, #336]	@ (8015b18 <_svfiprintf_r+0x1e8>)
 80159c6:	2205      	movs	r2, #5
 80159c8:	0018      	movs	r0, r3
 80159ca:	7831      	ldrb	r1, [r6, #0]
 80159cc:	9305      	str	r3, [sp, #20]
 80159ce:	f7fe fc0e 	bl	80141ee <memchr>
 80159d2:	1c75      	adds	r5, r6, #1
 80159d4:	2800      	cmp	r0, #0
 80159d6:	d11f      	bne.n	8015a18 <_svfiprintf_r+0xe8>
 80159d8:	6822      	ldr	r2, [r4, #0]
 80159da:	06d3      	lsls	r3, r2, #27
 80159dc:	d504      	bpl.n	80159e8 <_svfiprintf_r+0xb8>
 80159de:	2353      	movs	r3, #83	@ 0x53
 80159e0:	a904      	add	r1, sp, #16
 80159e2:	185b      	adds	r3, r3, r1
 80159e4:	2120      	movs	r1, #32
 80159e6:	7019      	strb	r1, [r3, #0]
 80159e8:	0713      	lsls	r3, r2, #28
 80159ea:	d504      	bpl.n	80159f6 <_svfiprintf_r+0xc6>
 80159ec:	2353      	movs	r3, #83	@ 0x53
 80159ee:	a904      	add	r1, sp, #16
 80159f0:	185b      	adds	r3, r3, r1
 80159f2:	212b      	movs	r1, #43	@ 0x2b
 80159f4:	7019      	strb	r1, [r3, #0]
 80159f6:	7833      	ldrb	r3, [r6, #0]
 80159f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80159fa:	d016      	beq.n	8015a2a <_svfiprintf_r+0xfa>
 80159fc:	0035      	movs	r5, r6
 80159fe:	2100      	movs	r1, #0
 8015a00:	200a      	movs	r0, #10
 8015a02:	68e3      	ldr	r3, [r4, #12]
 8015a04:	782a      	ldrb	r2, [r5, #0]
 8015a06:	1c6e      	adds	r6, r5, #1
 8015a08:	3a30      	subs	r2, #48	@ 0x30
 8015a0a:	2a09      	cmp	r2, #9
 8015a0c:	d950      	bls.n	8015ab0 <_svfiprintf_r+0x180>
 8015a0e:	2900      	cmp	r1, #0
 8015a10:	d111      	bne.n	8015a36 <_svfiprintf_r+0x106>
 8015a12:	e017      	b.n	8015a44 <_svfiprintf_r+0x114>
 8015a14:	3501      	adds	r5, #1
 8015a16:	e7af      	b.n	8015978 <_svfiprintf_r+0x48>
 8015a18:	9b05      	ldr	r3, [sp, #20]
 8015a1a:	6822      	ldr	r2, [r4, #0]
 8015a1c:	1ac0      	subs	r0, r0, r3
 8015a1e:	2301      	movs	r3, #1
 8015a20:	4083      	lsls	r3, r0
 8015a22:	4313      	orrs	r3, r2
 8015a24:	002e      	movs	r6, r5
 8015a26:	6023      	str	r3, [r4, #0]
 8015a28:	e7cc      	b.n	80159c4 <_svfiprintf_r+0x94>
 8015a2a:	9b07      	ldr	r3, [sp, #28]
 8015a2c:	1d19      	adds	r1, r3, #4
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	9107      	str	r1, [sp, #28]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	db01      	blt.n	8015a3a <_svfiprintf_r+0x10a>
 8015a36:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015a38:	e004      	b.n	8015a44 <_svfiprintf_r+0x114>
 8015a3a:	425b      	negs	r3, r3
 8015a3c:	60e3      	str	r3, [r4, #12]
 8015a3e:	2302      	movs	r3, #2
 8015a40:	4313      	orrs	r3, r2
 8015a42:	6023      	str	r3, [r4, #0]
 8015a44:	782b      	ldrb	r3, [r5, #0]
 8015a46:	2b2e      	cmp	r3, #46	@ 0x2e
 8015a48:	d10c      	bne.n	8015a64 <_svfiprintf_r+0x134>
 8015a4a:	786b      	ldrb	r3, [r5, #1]
 8015a4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8015a4e:	d134      	bne.n	8015aba <_svfiprintf_r+0x18a>
 8015a50:	9b07      	ldr	r3, [sp, #28]
 8015a52:	3502      	adds	r5, #2
 8015a54:	1d1a      	adds	r2, r3, #4
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	9207      	str	r2, [sp, #28]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	da01      	bge.n	8015a62 <_svfiprintf_r+0x132>
 8015a5e:	2301      	movs	r3, #1
 8015a60:	425b      	negs	r3, r3
 8015a62:	9309      	str	r3, [sp, #36]	@ 0x24
 8015a64:	4e2d      	ldr	r6, [pc, #180]	@ (8015b1c <_svfiprintf_r+0x1ec>)
 8015a66:	2203      	movs	r2, #3
 8015a68:	0030      	movs	r0, r6
 8015a6a:	7829      	ldrb	r1, [r5, #0]
 8015a6c:	f7fe fbbf 	bl	80141ee <memchr>
 8015a70:	2800      	cmp	r0, #0
 8015a72:	d006      	beq.n	8015a82 <_svfiprintf_r+0x152>
 8015a74:	2340      	movs	r3, #64	@ 0x40
 8015a76:	1b80      	subs	r0, r0, r6
 8015a78:	4083      	lsls	r3, r0
 8015a7a:	6822      	ldr	r2, [r4, #0]
 8015a7c:	3501      	adds	r5, #1
 8015a7e:	4313      	orrs	r3, r2
 8015a80:	6023      	str	r3, [r4, #0]
 8015a82:	7829      	ldrb	r1, [r5, #0]
 8015a84:	2206      	movs	r2, #6
 8015a86:	4826      	ldr	r0, [pc, #152]	@ (8015b20 <_svfiprintf_r+0x1f0>)
 8015a88:	1c6e      	adds	r6, r5, #1
 8015a8a:	7621      	strb	r1, [r4, #24]
 8015a8c:	f7fe fbaf 	bl	80141ee <memchr>
 8015a90:	2800      	cmp	r0, #0
 8015a92:	d038      	beq.n	8015b06 <_svfiprintf_r+0x1d6>
 8015a94:	4b23      	ldr	r3, [pc, #140]	@ (8015b24 <_svfiprintf_r+0x1f4>)
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d122      	bne.n	8015ae0 <_svfiprintf_r+0x1b0>
 8015a9a:	2207      	movs	r2, #7
 8015a9c:	9b07      	ldr	r3, [sp, #28]
 8015a9e:	3307      	adds	r3, #7
 8015aa0:	4393      	bics	r3, r2
 8015aa2:	3308      	adds	r3, #8
 8015aa4:	9307      	str	r3, [sp, #28]
 8015aa6:	6963      	ldr	r3, [r4, #20]
 8015aa8:	9a04      	ldr	r2, [sp, #16]
 8015aaa:	189b      	adds	r3, r3, r2
 8015aac:	6163      	str	r3, [r4, #20]
 8015aae:	e762      	b.n	8015976 <_svfiprintf_r+0x46>
 8015ab0:	4343      	muls	r3, r0
 8015ab2:	0035      	movs	r5, r6
 8015ab4:	2101      	movs	r1, #1
 8015ab6:	189b      	adds	r3, r3, r2
 8015ab8:	e7a4      	b.n	8015a04 <_svfiprintf_r+0xd4>
 8015aba:	2300      	movs	r3, #0
 8015abc:	200a      	movs	r0, #10
 8015abe:	0019      	movs	r1, r3
 8015ac0:	3501      	adds	r5, #1
 8015ac2:	6063      	str	r3, [r4, #4]
 8015ac4:	782a      	ldrb	r2, [r5, #0]
 8015ac6:	1c6e      	adds	r6, r5, #1
 8015ac8:	3a30      	subs	r2, #48	@ 0x30
 8015aca:	2a09      	cmp	r2, #9
 8015acc:	d903      	bls.n	8015ad6 <_svfiprintf_r+0x1a6>
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d0c8      	beq.n	8015a64 <_svfiprintf_r+0x134>
 8015ad2:	9109      	str	r1, [sp, #36]	@ 0x24
 8015ad4:	e7c6      	b.n	8015a64 <_svfiprintf_r+0x134>
 8015ad6:	4341      	muls	r1, r0
 8015ad8:	0035      	movs	r5, r6
 8015ada:	2301      	movs	r3, #1
 8015adc:	1889      	adds	r1, r1, r2
 8015ade:	e7f1      	b.n	8015ac4 <_svfiprintf_r+0x194>
 8015ae0:	aa07      	add	r2, sp, #28
 8015ae2:	9200      	str	r2, [sp, #0]
 8015ae4:	0021      	movs	r1, r4
 8015ae6:	003a      	movs	r2, r7
 8015ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8015b28 <_svfiprintf_r+0x1f8>)
 8015aea:	9803      	ldr	r0, [sp, #12]
 8015aec:	f7fd fdfe 	bl	80136ec <_printf_float>
 8015af0:	9004      	str	r0, [sp, #16]
 8015af2:	9b04      	ldr	r3, [sp, #16]
 8015af4:	3301      	adds	r3, #1
 8015af6:	d1d6      	bne.n	8015aa6 <_svfiprintf_r+0x176>
 8015af8:	89bb      	ldrh	r3, [r7, #12]
 8015afa:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8015afc:	065b      	lsls	r3, r3, #25
 8015afe:	d500      	bpl.n	8015b02 <_svfiprintf_r+0x1d2>
 8015b00:	e72c      	b.n	801595c <_svfiprintf_r+0x2c>
 8015b02:	b021      	add	sp, #132	@ 0x84
 8015b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b06:	aa07      	add	r2, sp, #28
 8015b08:	9200      	str	r2, [sp, #0]
 8015b0a:	0021      	movs	r1, r4
 8015b0c:	003a      	movs	r2, r7
 8015b0e:	4b06      	ldr	r3, [pc, #24]	@ (8015b28 <_svfiprintf_r+0x1f8>)
 8015b10:	9803      	ldr	r0, [sp, #12]
 8015b12:	f7fe f899 	bl	8013c48 <_printf_i>
 8015b16:	e7eb      	b.n	8015af0 <_svfiprintf_r+0x1c0>
 8015b18:	0801a188 	.word	0x0801a188
 8015b1c:	0801a18e 	.word	0x0801a18e
 8015b20:	0801a192 	.word	0x0801a192
 8015b24:	080136ed 	.word	0x080136ed
 8015b28:	08015871 	.word	0x08015871

08015b2c <__sflush_r>:
 8015b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015b2e:	220c      	movs	r2, #12
 8015b30:	5e8b      	ldrsh	r3, [r1, r2]
 8015b32:	0005      	movs	r5, r0
 8015b34:	000c      	movs	r4, r1
 8015b36:	071a      	lsls	r2, r3, #28
 8015b38:	d456      	bmi.n	8015be8 <__sflush_r+0xbc>
 8015b3a:	684a      	ldr	r2, [r1, #4]
 8015b3c:	2a00      	cmp	r2, #0
 8015b3e:	dc02      	bgt.n	8015b46 <__sflush_r+0x1a>
 8015b40:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8015b42:	2a00      	cmp	r2, #0
 8015b44:	dd4e      	ble.n	8015be4 <__sflush_r+0xb8>
 8015b46:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8015b48:	2f00      	cmp	r7, #0
 8015b4a:	d04b      	beq.n	8015be4 <__sflush_r+0xb8>
 8015b4c:	2200      	movs	r2, #0
 8015b4e:	2080      	movs	r0, #128	@ 0x80
 8015b50:	682e      	ldr	r6, [r5, #0]
 8015b52:	602a      	str	r2, [r5, #0]
 8015b54:	001a      	movs	r2, r3
 8015b56:	0140      	lsls	r0, r0, #5
 8015b58:	6a21      	ldr	r1, [r4, #32]
 8015b5a:	4002      	ands	r2, r0
 8015b5c:	4203      	tst	r3, r0
 8015b5e:	d033      	beq.n	8015bc8 <__sflush_r+0x9c>
 8015b60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015b62:	89a3      	ldrh	r3, [r4, #12]
 8015b64:	075b      	lsls	r3, r3, #29
 8015b66:	d506      	bpl.n	8015b76 <__sflush_r+0x4a>
 8015b68:	6863      	ldr	r3, [r4, #4]
 8015b6a:	1ad2      	subs	r2, r2, r3
 8015b6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d001      	beq.n	8015b76 <__sflush_r+0x4a>
 8015b72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015b74:	1ad2      	subs	r2, r2, r3
 8015b76:	2300      	movs	r3, #0
 8015b78:	0028      	movs	r0, r5
 8015b7a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8015b7c:	6a21      	ldr	r1, [r4, #32]
 8015b7e:	47b8      	blx	r7
 8015b80:	89a2      	ldrh	r2, [r4, #12]
 8015b82:	1c43      	adds	r3, r0, #1
 8015b84:	d106      	bne.n	8015b94 <__sflush_r+0x68>
 8015b86:	6829      	ldr	r1, [r5, #0]
 8015b88:	291d      	cmp	r1, #29
 8015b8a:	d846      	bhi.n	8015c1a <__sflush_r+0xee>
 8015b8c:	4b29      	ldr	r3, [pc, #164]	@ (8015c34 <__sflush_r+0x108>)
 8015b8e:	410b      	asrs	r3, r1
 8015b90:	07db      	lsls	r3, r3, #31
 8015b92:	d442      	bmi.n	8015c1a <__sflush_r+0xee>
 8015b94:	2300      	movs	r3, #0
 8015b96:	6063      	str	r3, [r4, #4]
 8015b98:	6923      	ldr	r3, [r4, #16]
 8015b9a:	6023      	str	r3, [r4, #0]
 8015b9c:	04d2      	lsls	r2, r2, #19
 8015b9e:	d505      	bpl.n	8015bac <__sflush_r+0x80>
 8015ba0:	1c43      	adds	r3, r0, #1
 8015ba2:	d102      	bne.n	8015baa <__sflush_r+0x7e>
 8015ba4:	682b      	ldr	r3, [r5, #0]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d100      	bne.n	8015bac <__sflush_r+0x80>
 8015baa:	6560      	str	r0, [r4, #84]	@ 0x54
 8015bac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015bae:	602e      	str	r6, [r5, #0]
 8015bb0:	2900      	cmp	r1, #0
 8015bb2:	d017      	beq.n	8015be4 <__sflush_r+0xb8>
 8015bb4:	0023      	movs	r3, r4
 8015bb6:	3344      	adds	r3, #68	@ 0x44
 8015bb8:	4299      	cmp	r1, r3
 8015bba:	d002      	beq.n	8015bc2 <__sflush_r+0x96>
 8015bbc:	0028      	movs	r0, r5
 8015bbe:	f7ff f9ad 	bl	8014f1c <_free_r>
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8015bc6:	e00d      	b.n	8015be4 <__sflush_r+0xb8>
 8015bc8:	2301      	movs	r3, #1
 8015bca:	0028      	movs	r0, r5
 8015bcc:	47b8      	blx	r7
 8015bce:	0002      	movs	r2, r0
 8015bd0:	1c43      	adds	r3, r0, #1
 8015bd2:	d1c6      	bne.n	8015b62 <__sflush_r+0x36>
 8015bd4:	682b      	ldr	r3, [r5, #0]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d0c3      	beq.n	8015b62 <__sflush_r+0x36>
 8015bda:	2b1d      	cmp	r3, #29
 8015bdc:	d001      	beq.n	8015be2 <__sflush_r+0xb6>
 8015bde:	2b16      	cmp	r3, #22
 8015be0:	d11a      	bne.n	8015c18 <__sflush_r+0xec>
 8015be2:	602e      	str	r6, [r5, #0]
 8015be4:	2000      	movs	r0, #0
 8015be6:	e01e      	b.n	8015c26 <__sflush_r+0xfa>
 8015be8:	690e      	ldr	r6, [r1, #16]
 8015bea:	2e00      	cmp	r6, #0
 8015bec:	d0fa      	beq.n	8015be4 <__sflush_r+0xb8>
 8015bee:	680f      	ldr	r7, [r1, #0]
 8015bf0:	600e      	str	r6, [r1, #0]
 8015bf2:	1bba      	subs	r2, r7, r6
 8015bf4:	9201      	str	r2, [sp, #4]
 8015bf6:	2200      	movs	r2, #0
 8015bf8:	079b      	lsls	r3, r3, #30
 8015bfa:	d100      	bne.n	8015bfe <__sflush_r+0xd2>
 8015bfc:	694a      	ldr	r2, [r1, #20]
 8015bfe:	60a2      	str	r2, [r4, #8]
 8015c00:	9b01      	ldr	r3, [sp, #4]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	ddee      	ble.n	8015be4 <__sflush_r+0xb8>
 8015c06:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8015c08:	0032      	movs	r2, r6
 8015c0a:	001f      	movs	r7, r3
 8015c0c:	0028      	movs	r0, r5
 8015c0e:	9b01      	ldr	r3, [sp, #4]
 8015c10:	6a21      	ldr	r1, [r4, #32]
 8015c12:	47b8      	blx	r7
 8015c14:	2800      	cmp	r0, #0
 8015c16:	dc07      	bgt.n	8015c28 <__sflush_r+0xfc>
 8015c18:	89a2      	ldrh	r2, [r4, #12]
 8015c1a:	2340      	movs	r3, #64	@ 0x40
 8015c1c:	2001      	movs	r0, #1
 8015c1e:	4313      	orrs	r3, r2
 8015c20:	b21b      	sxth	r3, r3
 8015c22:	81a3      	strh	r3, [r4, #12]
 8015c24:	4240      	negs	r0, r0
 8015c26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015c28:	9b01      	ldr	r3, [sp, #4]
 8015c2a:	1836      	adds	r6, r6, r0
 8015c2c:	1a1b      	subs	r3, r3, r0
 8015c2e:	9301      	str	r3, [sp, #4]
 8015c30:	e7e6      	b.n	8015c00 <__sflush_r+0xd4>
 8015c32:	46c0      	nop			@ (mov r8, r8)
 8015c34:	dfbffffe 	.word	0xdfbffffe

08015c38 <_fflush_r>:
 8015c38:	690b      	ldr	r3, [r1, #16]
 8015c3a:	b570      	push	{r4, r5, r6, lr}
 8015c3c:	0005      	movs	r5, r0
 8015c3e:	000c      	movs	r4, r1
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d102      	bne.n	8015c4a <_fflush_r+0x12>
 8015c44:	2500      	movs	r5, #0
 8015c46:	0028      	movs	r0, r5
 8015c48:	bd70      	pop	{r4, r5, r6, pc}
 8015c4a:	2800      	cmp	r0, #0
 8015c4c:	d004      	beq.n	8015c58 <_fflush_r+0x20>
 8015c4e:	6a03      	ldr	r3, [r0, #32]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d101      	bne.n	8015c58 <_fflush_r+0x20>
 8015c54:	f7fe f996 	bl	8013f84 <__sinit>
 8015c58:	220c      	movs	r2, #12
 8015c5a:	5ea3      	ldrsh	r3, [r4, r2]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d0f1      	beq.n	8015c44 <_fflush_r+0xc>
 8015c60:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015c62:	07d2      	lsls	r2, r2, #31
 8015c64:	d404      	bmi.n	8015c70 <_fflush_r+0x38>
 8015c66:	059b      	lsls	r3, r3, #22
 8015c68:	d402      	bmi.n	8015c70 <_fflush_r+0x38>
 8015c6a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015c6c:	f7fe fabd 	bl	80141ea <__retarget_lock_acquire_recursive>
 8015c70:	0028      	movs	r0, r5
 8015c72:	0021      	movs	r1, r4
 8015c74:	f7ff ff5a 	bl	8015b2c <__sflush_r>
 8015c78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015c7a:	0005      	movs	r5, r0
 8015c7c:	07db      	lsls	r3, r3, #31
 8015c7e:	d4e2      	bmi.n	8015c46 <_fflush_r+0xe>
 8015c80:	89a3      	ldrh	r3, [r4, #12]
 8015c82:	059b      	lsls	r3, r3, #22
 8015c84:	d4df      	bmi.n	8015c46 <_fflush_r+0xe>
 8015c86:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015c88:	f7fe fab0 	bl	80141ec <__retarget_lock_release_recursive>
 8015c8c:	e7db      	b.n	8015c46 <_fflush_r+0xe>

08015c8e <memmove>:
 8015c8e:	b510      	push	{r4, lr}
 8015c90:	4288      	cmp	r0, r1
 8015c92:	d806      	bhi.n	8015ca2 <memmove+0x14>
 8015c94:	2300      	movs	r3, #0
 8015c96:	429a      	cmp	r2, r3
 8015c98:	d008      	beq.n	8015cac <memmove+0x1e>
 8015c9a:	5ccc      	ldrb	r4, [r1, r3]
 8015c9c:	54c4      	strb	r4, [r0, r3]
 8015c9e:	3301      	adds	r3, #1
 8015ca0:	e7f9      	b.n	8015c96 <memmove+0x8>
 8015ca2:	188b      	adds	r3, r1, r2
 8015ca4:	4298      	cmp	r0, r3
 8015ca6:	d2f5      	bcs.n	8015c94 <memmove+0x6>
 8015ca8:	3a01      	subs	r2, #1
 8015caa:	d200      	bcs.n	8015cae <memmove+0x20>
 8015cac:	bd10      	pop	{r4, pc}
 8015cae:	5c8b      	ldrb	r3, [r1, r2]
 8015cb0:	5483      	strb	r3, [r0, r2]
 8015cb2:	e7f9      	b.n	8015ca8 <memmove+0x1a>

08015cb4 <_sbrk_r>:
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	b570      	push	{r4, r5, r6, lr}
 8015cb8:	4d06      	ldr	r5, [pc, #24]	@ (8015cd4 <_sbrk_r+0x20>)
 8015cba:	0004      	movs	r4, r0
 8015cbc:	0008      	movs	r0, r1
 8015cbe:	602b      	str	r3, [r5, #0]
 8015cc0:	f7ee fade 	bl	8004280 <_sbrk>
 8015cc4:	1c43      	adds	r3, r0, #1
 8015cc6:	d103      	bne.n	8015cd0 <_sbrk_r+0x1c>
 8015cc8:	682b      	ldr	r3, [r5, #0]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d000      	beq.n	8015cd0 <_sbrk_r+0x1c>
 8015cce:	6023      	str	r3, [r4, #0]
 8015cd0:	bd70      	pop	{r4, r5, r6, pc}
 8015cd2:	46c0      	nop			@ (mov r8, r8)
 8015cd4:	20001f98 	.word	0x20001f98

08015cd8 <__assert_func>:
 8015cd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015cda:	0014      	movs	r4, r2
 8015cdc:	001a      	movs	r2, r3
 8015cde:	4b09      	ldr	r3, [pc, #36]	@ (8015d04 <__assert_func+0x2c>)
 8015ce0:	0005      	movs	r5, r0
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	000e      	movs	r6, r1
 8015ce6:	68d8      	ldr	r0, [r3, #12]
 8015ce8:	4b07      	ldr	r3, [pc, #28]	@ (8015d08 <__assert_func+0x30>)
 8015cea:	2c00      	cmp	r4, #0
 8015cec:	d101      	bne.n	8015cf2 <__assert_func+0x1a>
 8015cee:	4b07      	ldr	r3, [pc, #28]	@ (8015d0c <__assert_func+0x34>)
 8015cf0:	001c      	movs	r4, r3
 8015cf2:	4907      	ldr	r1, [pc, #28]	@ (8015d10 <__assert_func+0x38>)
 8015cf4:	9301      	str	r3, [sp, #4]
 8015cf6:	9402      	str	r4, [sp, #8]
 8015cf8:	002b      	movs	r3, r5
 8015cfa:	9600      	str	r6, [sp, #0]
 8015cfc:	f000 f886 	bl	8015e0c <fiprintf>
 8015d00:	f000 f894 	bl	8015e2c <abort>
 8015d04:	2000020c 	.word	0x2000020c
 8015d08:	0801a1a3 	.word	0x0801a1a3
 8015d0c:	0801a1de 	.word	0x0801a1de
 8015d10:	0801a1b0 	.word	0x0801a1b0

08015d14 <_calloc_r>:
 8015d14:	b570      	push	{r4, r5, r6, lr}
 8015d16:	0c0b      	lsrs	r3, r1, #16
 8015d18:	0c15      	lsrs	r5, r2, #16
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d11e      	bne.n	8015d5c <_calloc_r+0x48>
 8015d1e:	2d00      	cmp	r5, #0
 8015d20:	d10c      	bne.n	8015d3c <_calloc_r+0x28>
 8015d22:	b289      	uxth	r1, r1
 8015d24:	b294      	uxth	r4, r2
 8015d26:	434c      	muls	r4, r1
 8015d28:	0021      	movs	r1, r4
 8015d2a:	f7ff f96d 	bl	8015008 <_malloc_r>
 8015d2e:	1e05      	subs	r5, r0, #0
 8015d30:	d01a      	beq.n	8015d68 <_calloc_r+0x54>
 8015d32:	0022      	movs	r2, r4
 8015d34:	2100      	movs	r1, #0
 8015d36:	f7fe f9d3 	bl	80140e0 <memset>
 8015d3a:	e016      	b.n	8015d6a <_calloc_r+0x56>
 8015d3c:	1c2b      	adds	r3, r5, #0
 8015d3e:	1c0c      	adds	r4, r1, #0
 8015d40:	b289      	uxth	r1, r1
 8015d42:	b292      	uxth	r2, r2
 8015d44:	434a      	muls	r2, r1
 8015d46:	b29b      	uxth	r3, r3
 8015d48:	b2a1      	uxth	r1, r4
 8015d4a:	4359      	muls	r1, r3
 8015d4c:	0c14      	lsrs	r4, r2, #16
 8015d4e:	190c      	adds	r4, r1, r4
 8015d50:	0c23      	lsrs	r3, r4, #16
 8015d52:	d107      	bne.n	8015d64 <_calloc_r+0x50>
 8015d54:	0424      	lsls	r4, r4, #16
 8015d56:	b292      	uxth	r2, r2
 8015d58:	4314      	orrs	r4, r2
 8015d5a:	e7e5      	b.n	8015d28 <_calloc_r+0x14>
 8015d5c:	2d00      	cmp	r5, #0
 8015d5e:	d101      	bne.n	8015d64 <_calloc_r+0x50>
 8015d60:	1c14      	adds	r4, r2, #0
 8015d62:	e7ed      	b.n	8015d40 <_calloc_r+0x2c>
 8015d64:	230c      	movs	r3, #12
 8015d66:	6003      	str	r3, [r0, #0]
 8015d68:	2500      	movs	r5, #0
 8015d6a:	0028      	movs	r0, r5
 8015d6c:	bd70      	pop	{r4, r5, r6, pc}

08015d6e <__ascii_mbtowc>:
 8015d6e:	b082      	sub	sp, #8
 8015d70:	2900      	cmp	r1, #0
 8015d72:	d100      	bne.n	8015d76 <__ascii_mbtowc+0x8>
 8015d74:	a901      	add	r1, sp, #4
 8015d76:	1e10      	subs	r0, r2, #0
 8015d78:	d006      	beq.n	8015d88 <__ascii_mbtowc+0x1a>
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d006      	beq.n	8015d8c <__ascii_mbtowc+0x1e>
 8015d7e:	7813      	ldrb	r3, [r2, #0]
 8015d80:	600b      	str	r3, [r1, #0]
 8015d82:	7810      	ldrb	r0, [r2, #0]
 8015d84:	1e43      	subs	r3, r0, #1
 8015d86:	4198      	sbcs	r0, r3
 8015d88:	b002      	add	sp, #8
 8015d8a:	4770      	bx	lr
 8015d8c:	2002      	movs	r0, #2
 8015d8e:	4240      	negs	r0, r0
 8015d90:	e7fa      	b.n	8015d88 <__ascii_mbtowc+0x1a>

08015d92 <_realloc_r>:
 8015d92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015d94:	0006      	movs	r6, r0
 8015d96:	000c      	movs	r4, r1
 8015d98:	0015      	movs	r5, r2
 8015d9a:	2900      	cmp	r1, #0
 8015d9c:	d105      	bne.n	8015daa <_realloc_r+0x18>
 8015d9e:	0011      	movs	r1, r2
 8015da0:	f7ff f932 	bl	8015008 <_malloc_r>
 8015da4:	0004      	movs	r4, r0
 8015da6:	0020      	movs	r0, r4
 8015da8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015daa:	2a00      	cmp	r2, #0
 8015dac:	d103      	bne.n	8015db6 <_realloc_r+0x24>
 8015dae:	f7ff f8b5 	bl	8014f1c <_free_r>
 8015db2:	2400      	movs	r4, #0
 8015db4:	e7f7      	b.n	8015da6 <_realloc_r+0x14>
 8015db6:	f000 f840 	bl	8015e3a <_malloc_usable_size_r>
 8015dba:	0007      	movs	r7, r0
 8015dbc:	4285      	cmp	r5, r0
 8015dbe:	d802      	bhi.n	8015dc6 <_realloc_r+0x34>
 8015dc0:	0843      	lsrs	r3, r0, #1
 8015dc2:	42ab      	cmp	r3, r5
 8015dc4:	d3ef      	bcc.n	8015da6 <_realloc_r+0x14>
 8015dc6:	0029      	movs	r1, r5
 8015dc8:	0030      	movs	r0, r6
 8015dca:	f7ff f91d 	bl	8015008 <_malloc_r>
 8015dce:	9001      	str	r0, [sp, #4]
 8015dd0:	2800      	cmp	r0, #0
 8015dd2:	d0ee      	beq.n	8015db2 <_realloc_r+0x20>
 8015dd4:	002a      	movs	r2, r5
 8015dd6:	42bd      	cmp	r5, r7
 8015dd8:	d900      	bls.n	8015ddc <_realloc_r+0x4a>
 8015dda:	003a      	movs	r2, r7
 8015ddc:	0021      	movs	r1, r4
 8015dde:	9801      	ldr	r0, [sp, #4]
 8015de0:	f7fe fa10 	bl	8014204 <memcpy>
 8015de4:	0021      	movs	r1, r4
 8015de6:	0030      	movs	r0, r6
 8015de8:	f7ff f898 	bl	8014f1c <_free_r>
 8015dec:	9c01      	ldr	r4, [sp, #4]
 8015dee:	e7da      	b.n	8015da6 <_realloc_r+0x14>

08015df0 <__ascii_wctomb>:
 8015df0:	0003      	movs	r3, r0
 8015df2:	1e08      	subs	r0, r1, #0
 8015df4:	d005      	beq.n	8015e02 <__ascii_wctomb+0x12>
 8015df6:	2aff      	cmp	r2, #255	@ 0xff
 8015df8:	d904      	bls.n	8015e04 <__ascii_wctomb+0x14>
 8015dfa:	228a      	movs	r2, #138	@ 0x8a
 8015dfc:	2001      	movs	r0, #1
 8015dfe:	601a      	str	r2, [r3, #0]
 8015e00:	4240      	negs	r0, r0
 8015e02:	4770      	bx	lr
 8015e04:	2001      	movs	r0, #1
 8015e06:	700a      	strb	r2, [r1, #0]
 8015e08:	e7fb      	b.n	8015e02 <__ascii_wctomb+0x12>
	...

08015e0c <fiprintf>:
 8015e0c:	b40e      	push	{r1, r2, r3}
 8015e0e:	b517      	push	{r0, r1, r2, r4, lr}
 8015e10:	4c05      	ldr	r4, [pc, #20]	@ (8015e28 <fiprintf+0x1c>)
 8015e12:	ab05      	add	r3, sp, #20
 8015e14:	cb04      	ldmia	r3!, {r2}
 8015e16:	0001      	movs	r1, r0
 8015e18:	6820      	ldr	r0, [r4, #0]
 8015e1a:	9301      	str	r3, [sp, #4]
 8015e1c:	f000 f83c 	bl	8015e98 <_vfiprintf_r>
 8015e20:	bc1e      	pop	{r1, r2, r3, r4}
 8015e22:	bc08      	pop	{r3}
 8015e24:	b003      	add	sp, #12
 8015e26:	4718      	bx	r3
 8015e28:	2000020c 	.word	0x2000020c

08015e2c <abort>:
 8015e2c:	2006      	movs	r0, #6
 8015e2e:	b510      	push	{r4, lr}
 8015e30:	f000 fa18 	bl	8016264 <raise>
 8015e34:	2001      	movs	r0, #1
 8015e36:	f7ee f9b1 	bl	800419c <_exit>

08015e3a <_malloc_usable_size_r>:
 8015e3a:	1f0b      	subs	r3, r1, #4
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	1f18      	subs	r0, r3, #4
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	da01      	bge.n	8015e48 <_malloc_usable_size_r+0xe>
 8015e44:	580b      	ldr	r3, [r1, r0]
 8015e46:	18c0      	adds	r0, r0, r3
 8015e48:	4770      	bx	lr

08015e4a <__sfputc_r>:
 8015e4a:	6893      	ldr	r3, [r2, #8]
 8015e4c:	b510      	push	{r4, lr}
 8015e4e:	3b01      	subs	r3, #1
 8015e50:	6093      	str	r3, [r2, #8]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	da04      	bge.n	8015e60 <__sfputc_r+0x16>
 8015e56:	6994      	ldr	r4, [r2, #24]
 8015e58:	42a3      	cmp	r3, r4
 8015e5a:	db07      	blt.n	8015e6c <__sfputc_r+0x22>
 8015e5c:	290a      	cmp	r1, #10
 8015e5e:	d005      	beq.n	8015e6c <__sfputc_r+0x22>
 8015e60:	6813      	ldr	r3, [r2, #0]
 8015e62:	1c58      	adds	r0, r3, #1
 8015e64:	6010      	str	r0, [r2, #0]
 8015e66:	7019      	strb	r1, [r3, #0]
 8015e68:	0008      	movs	r0, r1
 8015e6a:	bd10      	pop	{r4, pc}
 8015e6c:	f000 f930 	bl	80160d0 <__swbuf_r>
 8015e70:	0001      	movs	r1, r0
 8015e72:	e7f9      	b.n	8015e68 <__sfputc_r+0x1e>

08015e74 <__sfputs_r>:
 8015e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e76:	0006      	movs	r6, r0
 8015e78:	000f      	movs	r7, r1
 8015e7a:	0014      	movs	r4, r2
 8015e7c:	18d5      	adds	r5, r2, r3
 8015e7e:	42ac      	cmp	r4, r5
 8015e80:	d101      	bne.n	8015e86 <__sfputs_r+0x12>
 8015e82:	2000      	movs	r0, #0
 8015e84:	e007      	b.n	8015e96 <__sfputs_r+0x22>
 8015e86:	7821      	ldrb	r1, [r4, #0]
 8015e88:	003a      	movs	r2, r7
 8015e8a:	0030      	movs	r0, r6
 8015e8c:	f7ff ffdd 	bl	8015e4a <__sfputc_r>
 8015e90:	3401      	adds	r4, #1
 8015e92:	1c43      	adds	r3, r0, #1
 8015e94:	d1f3      	bne.n	8015e7e <__sfputs_r+0xa>
 8015e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015e98 <_vfiprintf_r>:
 8015e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e9a:	b0a1      	sub	sp, #132	@ 0x84
 8015e9c:	000f      	movs	r7, r1
 8015e9e:	0015      	movs	r5, r2
 8015ea0:	001e      	movs	r6, r3
 8015ea2:	9003      	str	r0, [sp, #12]
 8015ea4:	2800      	cmp	r0, #0
 8015ea6:	d004      	beq.n	8015eb2 <_vfiprintf_r+0x1a>
 8015ea8:	6a03      	ldr	r3, [r0, #32]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d101      	bne.n	8015eb2 <_vfiprintf_r+0x1a>
 8015eae:	f7fe f869 	bl	8013f84 <__sinit>
 8015eb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015eb4:	07db      	lsls	r3, r3, #31
 8015eb6:	d405      	bmi.n	8015ec4 <_vfiprintf_r+0x2c>
 8015eb8:	89bb      	ldrh	r3, [r7, #12]
 8015eba:	059b      	lsls	r3, r3, #22
 8015ebc:	d402      	bmi.n	8015ec4 <_vfiprintf_r+0x2c>
 8015ebe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8015ec0:	f7fe f993 	bl	80141ea <__retarget_lock_acquire_recursive>
 8015ec4:	89bb      	ldrh	r3, [r7, #12]
 8015ec6:	071b      	lsls	r3, r3, #28
 8015ec8:	d502      	bpl.n	8015ed0 <_vfiprintf_r+0x38>
 8015eca:	693b      	ldr	r3, [r7, #16]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d113      	bne.n	8015ef8 <_vfiprintf_r+0x60>
 8015ed0:	0039      	movs	r1, r7
 8015ed2:	9803      	ldr	r0, [sp, #12]
 8015ed4:	f000 f93e 	bl	8016154 <__swsetup_r>
 8015ed8:	2800      	cmp	r0, #0
 8015eda:	d00d      	beq.n	8015ef8 <_vfiprintf_r+0x60>
 8015edc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015ede:	07db      	lsls	r3, r3, #31
 8015ee0:	d503      	bpl.n	8015eea <_vfiprintf_r+0x52>
 8015ee2:	2001      	movs	r0, #1
 8015ee4:	4240      	negs	r0, r0
 8015ee6:	b021      	add	sp, #132	@ 0x84
 8015ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015eea:	89bb      	ldrh	r3, [r7, #12]
 8015eec:	059b      	lsls	r3, r3, #22
 8015eee:	d4f8      	bmi.n	8015ee2 <_vfiprintf_r+0x4a>
 8015ef0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8015ef2:	f7fe f97b 	bl	80141ec <__retarget_lock_release_recursive>
 8015ef6:	e7f4      	b.n	8015ee2 <_vfiprintf_r+0x4a>
 8015ef8:	2300      	movs	r3, #0
 8015efa:	ac08      	add	r4, sp, #32
 8015efc:	6163      	str	r3, [r4, #20]
 8015efe:	3320      	adds	r3, #32
 8015f00:	7663      	strb	r3, [r4, #25]
 8015f02:	3310      	adds	r3, #16
 8015f04:	76a3      	strb	r3, [r4, #26]
 8015f06:	9607      	str	r6, [sp, #28]
 8015f08:	002e      	movs	r6, r5
 8015f0a:	7833      	ldrb	r3, [r6, #0]
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d001      	beq.n	8015f14 <_vfiprintf_r+0x7c>
 8015f10:	2b25      	cmp	r3, #37	@ 0x25
 8015f12:	d148      	bne.n	8015fa6 <_vfiprintf_r+0x10e>
 8015f14:	1b73      	subs	r3, r6, r5
 8015f16:	9305      	str	r3, [sp, #20]
 8015f18:	42ae      	cmp	r6, r5
 8015f1a:	d00b      	beq.n	8015f34 <_vfiprintf_r+0x9c>
 8015f1c:	002a      	movs	r2, r5
 8015f1e:	0039      	movs	r1, r7
 8015f20:	9803      	ldr	r0, [sp, #12]
 8015f22:	f7ff ffa7 	bl	8015e74 <__sfputs_r>
 8015f26:	3001      	adds	r0, #1
 8015f28:	d100      	bne.n	8015f2c <_vfiprintf_r+0x94>
 8015f2a:	e0ae      	b.n	801608a <_vfiprintf_r+0x1f2>
 8015f2c:	6963      	ldr	r3, [r4, #20]
 8015f2e:	9a05      	ldr	r2, [sp, #20]
 8015f30:	189b      	adds	r3, r3, r2
 8015f32:	6163      	str	r3, [r4, #20]
 8015f34:	7833      	ldrb	r3, [r6, #0]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d100      	bne.n	8015f3c <_vfiprintf_r+0xa4>
 8015f3a:	e0a6      	b.n	801608a <_vfiprintf_r+0x1f2>
 8015f3c:	2201      	movs	r2, #1
 8015f3e:	2300      	movs	r3, #0
 8015f40:	4252      	negs	r2, r2
 8015f42:	6062      	str	r2, [r4, #4]
 8015f44:	a904      	add	r1, sp, #16
 8015f46:	3254      	adds	r2, #84	@ 0x54
 8015f48:	1852      	adds	r2, r2, r1
 8015f4a:	1c75      	adds	r5, r6, #1
 8015f4c:	6023      	str	r3, [r4, #0]
 8015f4e:	60e3      	str	r3, [r4, #12]
 8015f50:	60a3      	str	r3, [r4, #8]
 8015f52:	7013      	strb	r3, [r2, #0]
 8015f54:	65a3      	str	r3, [r4, #88]	@ 0x58
 8015f56:	4b59      	ldr	r3, [pc, #356]	@ (80160bc <_vfiprintf_r+0x224>)
 8015f58:	2205      	movs	r2, #5
 8015f5a:	0018      	movs	r0, r3
 8015f5c:	7829      	ldrb	r1, [r5, #0]
 8015f5e:	9305      	str	r3, [sp, #20]
 8015f60:	f7fe f945 	bl	80141ee <memchr>
 8015f64:	1c6e      	adds	r6, r5, #1
 8015f66:	2800      	cmp	r0, #0
 8015f68:	d11f      	bne.n	8015faa <_vfiprintf_r+0x112>
 8015f6a:	6822      	ldr	r2, [r4, #0]
 8015f6c:	06d3      	lsls	r3, r2, #27
 8015f6e:	d504      	bpl.n	8015f7a <_vfiprintf_r+0xe2>
 8015f70:	2353      	movs	r3, #83	@ 0x53
 8015f72:	a904      	add	r1, sp, #16
 8015f74:	185b      	adds	r3, r3, r1
 8015f76:	2120      	movs	r1, #32
 8015f78:	7019      	strb	r1, [r3, #0]
 8015f7a:	0713      	lsls	r3, r2, #28
 8015f7c:	d504      	bpl.n	8015f88 <_vfiprintf_r+0xf0>
 8015f7e:	2353      	movs	r3, #83	@ 0x53
 8015f80:	a904      	add	r1, sp, #16
 8015f82:	185b      	adds	r3, r3, r1
 8015f84:	212b      	movs	r1, #43	@ 0x2b
 8015f86:	7019      	strb	r1, [r3, #0]
 8015f88:	782b      	ldrb	r3, [r5, #0]
 8015f8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8015f8c:	d016      	beq.n	8015fbc <_vfiprintf_r+0x124>
 8015f8e:	002e      	movs	r6, r5
 8015f90:	2100      	movs	r1, #0
 8015f92:	200a      	movs	r0, #10
 8015f94:	68e3      	ldr	r3, [r4, #12]
 8015f96:	7832      	ldrb	r2, [r6, #0]
 8015f98:	1c75      	adds	r5, r6, #1
 8015f9a:	3a30      	subs	r2, #48	@ 0x30
 8015f9c:	2a09      	cmp	r2, #9
 8015f9e:	d950      	bls.n	8016042 <_vfiprintf_r+0x1aa>
 8015fa0:	2900      	cmp	r1, #0
 8015fa2:	d111      	bne.n	8015fc8 <_vfiprintf_r+0x130>
 8015fa4:	e017      	b.n	8015fd6 <_vfiprintf_r+0x13e>
 8015fa6:	3601      	adds	r6, #1
 8015fa8:	e7af      	b.n	8015f0a <_vfiprintf_r+0x72>
 8015faa:	9b05      	ldr	r3, [sp, #20]
 8015fac:	6822      	ldr	r2, [r4, #0]
 8015fae:	1ac0      	subs	r0, r0, r3
 8015fb0:	2301      	movs	r3, #1
 8015fb2:	4083      	lsls	r3, r0
 8015fb4:	4313      	orrs	r3, r2
 8015fb6:	0035      	movs	r5, r6
 8015fb8:	6023      	str	r3, [r4, #0]
 8015fba:	e7cc      	b.n	8015f56 <_vfiprintf_r+0xbe>
 8015fbc:	9b07      	ldr	r3, [sp, #28]
 8015fbe:	1d19      	adds	r1, r3, #4
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	9107      	str	r1, [sp, #28]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	db01      	blt.n	8015fcc <_vfiprintf_r+0x134>
 8015fc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015fca:	e004      	b.n	8015fd6 <_vfiprintf_r+0x13e>
 8015fcc:	425b      	negs	r3, r3
 8015fce:	60e3      	str	r3, [r4, #12]
 8015fd0:	2302      	movs	r3, #2
 8015fd2:	4313      	orrs	r3, r2
 8015fd4:	6023      	str	r3, [r4, #0]
 8015fd6:	7833      	ldrb	r3, [r6, #0]
 8015fd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8015fda:	d10c      	bne.n	8015ff6 <_vfiprintf_r+0x15e>
 8015fdc:	7873      	ldrb	r3, [r6, #1]
 8015fde:	2b2a      	cmp	r3, #42	@ 0x2a
 8015fe0:	d134      	bne.n	801604c <_vfiprintf_r+0x1b4>
 8015fe2:	9b07      	ldr	r3, [sp, #28]
 8015fe4:	3602      	adds	r6, #2
 8015fe6:	1d1a      	adds	r2, r3, #4
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	9207      	str	r2, [sp, #28]
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	da01      	bge.n	8015ff4 <_vfiprintf_r+0x15c>
 8015ff0:	2301      	movs	r3, #1
 8015ff2:	425b      	negs	r3, r3
 8015ff4:	9309      	str	r3, [sp, #36]	@ 0x24
 8015ff6:	4d32      	ldr	r5, [pc, #200]	@ (80160c0 <_vfiprintf_r+0x228>)
 8015ff8:	2203      	movs	r2, #3
 8015ffa:	0028      	movs	r0, r5
 8015ffc:	7831      	ldrb	r1, [r6, #0]
 8015ffe:	f7fe f8f6 	bl	80141ee <memchr>
 8016002:	2800      	cmp	r0, #0
 8016004:	d006      	beq.n	8016014 <_vfiprintf_r+0x17c>
 8016006:	2340      	movs	r3, #64	@ 0x40
 8016008:	1b40      	subs	r0, r0, r5
 801600a:	4083      	lsls	r3, r0
 801600c:	6822      	ldr	r2, [r4, #0]
 801600e:	3601      	adds	r6, #1
 8016010:	4313      	orrs	r3, r2
 8016012:	6023      	str	r3, [r4, #0]
 8016014:	7831      	ldrb	r1, [r6, #0]
 8016016:	2206      	movs	r2, #6
 8016018:	482a      	ldr	r0, [pc, #168]	@ (80160c4 <_vfiprintf_r+0x22c>)
 801601a:	1c75      	adds	r5, r6, #1
 801601c:	7621      	strb	r1, [r4, #24]
 801601e:	f7fe f8e6 	bl	80141ee <memchr>
 8016022:	2800      	cmp	r0, #0
 8016024:	d040      	beq.n	80160a8 <_vfiprintf_r+0x210>
 8016026:	4b28      	ldr	r3, [pc, #160]	@ (80160c8 <_vfiprintf_r+0x230>)
 8016028:	2b00      	cmp	r3, #0
 801602a:	d122      	bne.n	8016072 <_vfiprintf_r+0x1da>
 801602c:	2207      	movs	r2, #7
 801602e:	9b07      	ldr	r3, [sp, #28]
 8016030:	3307      	adds	r3, #7
 8016032:	4393      	bics	r3, r2
 8016034:	3308      	adds	r3, #8
 8016036:	9307      	str	r3, [sp, #28]
 8016038:	6963      	ldr	r3, [r4, #20]
 801603a:	9a04      	ldr	r2, [sp, #16]
 801603c:	189b      	adds	r3, r3, r2
 801603e:	6163      	str	r3, [r4, #20]
 8016040:	e762      	b.n	8015f08 <_vfiprintf_r+0x70>
 8016042:	4343      	muls	r3, r0
 8016044:	002e      	movs	r6, r5
 8016046:	2101      	movs	r1, #1
 8016048:	189b      	adds	r3, r3, r2
 801604a:	e7a4      	b.n	8015f96 <_vfiprintf_r+0xfe>
 801604c:	2300      	movs	r3, #0
 801604e:	200a      	movs	r0, #10
 8016050:	0019      	movs	r1, r3
 8016052:	3601      	adds	r6, #1
 8016054:	6063      	str	r3, [r4, #4]
 8016056:	7832      	ldrb	r2, [r6, #0]
 8016058:	1c75      	adds	r5, r6, #1
 801605a:	3a30      	subs	r2, #48	@ 0x30
 801605c:	2a09      	cmp	r2, #9
 801605e:	d903      	bls.n	8016068 <_vfiprintf_r+0x1d0>
 8016060:	2b00      	cmp	r3, #0
 8016062:	d0c8      	beq.n	8015ff6 <_vfiprintf_r+0x15e>
 8016064:	9109      	str	r1, [sp, #36]	@ 0x24
 8016066:	e7c6      	b.n	8015ff6 <_vfiprintf_r+0x15e>
 8016068:	4341      	muls	r1, r0
 801606a:	002e      	movs	r6, r5
 801606c:	2301      	movs	r3, #1
 801606e:	1889      	adds	r1, r1, r2
 8016070:	e7f1      	b.n	8016056 <_vfiprintf_r+0x1be>
 8016072:	aa07      	add	r2, sp, #28
 8016074:	9200      	str	r2, [sp, #0]
 8016076:	0021      	movs	r1, r4
 8016078:	003a      	movs	r2, r7
 801607a:	4b14      	ldr	r3, [pc, #80]	@ (80160cc <_vfiprintf_r+0x234>)
 801607c:	9803      	ldr	r0, [sp, #12]
 801607e:	f7fd fb35 	bl	80136ec <_printf_float>
 8016082:	9004      	str	r0, [sp, #16]
 8016084:	9b04      	ldr	r3, [sp, #16]
 8016086:	3301      	adds	r3, #1
 8016088:	d1d6      	bne.n	8016038 <_vfiprintf_r+0x1a0>
 801608a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801608c:	07db      	lsls	r3, r3, #31
 801608e:	d405      	bmi.n	801609c <_vfiprintf_r+0x204>
 8016090:	89bb      	ldrh	r3, [r7, #12]
 8016092:	059b      	lsls	r3, r3, #22
 8016094:	d402      	bmi.n	801609c <_vfiprintf_r+0x204>
 8016096:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8016098:	f7fe f8a8 	bl	80141ec <__retarget_lock_release_recursive>
 801609c:	89bb      	ldrh	r3, [r7, #12]
 801609e:	065b      	lsls	r3, r3, #25
 80160a0:	d500      	bpl.n	80160a4 <_vfiprintf_r+0x20c>
 80160a2:	e71e      	b.n	8015ee2 <_vfiprintf_r+0x4a>
 80160a4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80160a6:	e71e      	b.n	8015ee6 <_vfiprintf_r+0x4e>
 80160a8:	aa07      	add	r2, sp, #28
 80160aa:	9200      	str	r2, [sp, #0]
 80160ac:	0021      	movs	r1, r4
 80160ae:	003a      	movs	r2, r7
 80160b0:	4b06      	ldr	r3, [pc, #24]	@ (80160cc <_vfiprintf_r+0x234>)
 80160b2:	9803      	ldr	r0, [sp, #12]
 80160b4:	f7fd fdc8 	bl	8013c48 <_printf_i>
 80160b8:	e7e3      	b.n	8016082 <_vfiprintf_r+0x1ea>
 80160ba:	46c0      	nop			@ (mov r8, r8)
 80160bc:	0801a188 	.word	0x0801a188
 80160c0:	0801a18e 	.word	0x0801a18e
 80160c4:	0801a192 	.word	0x0801a192
 80160c8:	080136ed 	.word	0x080136ed
 80160cc:	08015e75 	.word	0x08015e75

080160d0 <__swbuf_r>:
 80160d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160d2:	0006      	movs	r6, r0
 80160d4:	000d      	movs	r5, r1
 80160d6:	0014      	movs	r4, r2
 80160d8:	2800      	cmp	r0, #0
 80160da:	d004      	beq.n	80160e6 <__swbuf_r+0x16>
 80160dc:	6a03      	ldr	r3, [r0, #32]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d101      	bne.n	80160e6 <__swbuf_r+0x16>
 80160e2:	f7fd ff4f 	bl	8013f84 <__sinit>
 80160e6:	69a3      	ldr	r3, [r4, #24]
 80160e8:	60a3      	str	r3, [r4, #8]
 80160ea:	89a3      	ldrh	r3, [r4, #12]
 80160ec:	071b      	lsls	r3, r3, #28
 80160ee:	d502      	bpl.n	80160f6 <__swbuf_r+0x26>
 80160f0:	6923      	ldr	r3, [r4, #16]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d109      	bne.n	801610a <__swbuf_r+0x3a>
 80160f6:	0021      	movs	r1, r4
 80160f8:	0030      	movs	r0, r6
 80160fa:	f000 f82b 	bl	8016154 <__swsetup_r>
 80160fe:	2800      	cmp	r0, #0
 8016100:	d003      	beq.n	801610a <__swbuf_r+0x3a>
 8016102:	2501      	movs	r5, #1
 8016104:	426d      	negs	r5, r5
 8016106:	0028      	movs	r0, r5
 8016108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801610a:	6923      	ldr	r3, [r4, #16]
 801610c:	6820      	ldr	r0, [r4, #0]
 801610e:	b2ef      	uxtb	r7, r5
 8016110:	1ac0      	subs	r0, r0, r3
 8016112:	6963      	ldr	r3, [r4, #20]
 8016114:	b2ed      	uxtb	r5, r5
 8016116:	4283      	cmp	r3, r0
 8016118:	dc05      	bgt.n	8016126 <__swbuf_r+0x56>
 801611a:	0021      	movs	r1, r4
 801611c:	0030      	movs	r0, r6
 801611e:	f7ff fd8b 	bl	8015c38 <_fflush_r>
 8016122:	2800      	cmp	r0, #0
 8016124:	d1ed      	bne.n	8016102 <__swbuf_r+0x32>
 8016126:	68a3      	ldr	r3, [r4, #8]
 8016128:	3001      	adds	r0, #1
 801612a:	3b01      	subs	r3, #1
 801612c:	60a3      	str	r3, [r4, #8]
 801612e:	6823      	ldr	r3, [r4, #0]
 8016130:	1c5a      	adds	r2, r3, #1
 8016132:	6022      	str	r2, [r4, #0]
 8016134:	701f      	strb	r7, [r3, #0]
 8016136:	6963      	ldr	r3, [r4, #20]
 8016138:	4283      	cmp	r3, r0
 801613a:	d004      	beq.n	8016146 <__swbuf_r+0x76>
 801613c:	89a3      	ldrh	r3, [r4, #12]
 801613e:	07db      	lsls	r3, r3, #31
 8016140:	d5e1      	bpl.n	8016106 <__swbuf_r+0x36>
 8016142:	2d0a      	cmp	r5, #10
 8016144:	d1df      	bne.n	8016106 <__swbuf_r+0x36>
 8016146:	0021      	movs	r1, r4
 8016148:	0030      	movs	r0, r6
 801614a:	f7ff fd75 	bl	8015c38 <_fflush_r>
 801614e:	2800      	cmp	r0, #0
 8016150:	d0d9      	beq.n	8016106 <__swbuf_r+0x36>
 8016152:	e7d6      	b.n	8016102 <__swbuf_r+0x32>

08016154 <__swsetup_r>:
 8016154:	4b2d      	ldr	r3, [pc, #180]	@ (801620c <__swsetup_r+0xb8>)
 8016156:	b570      	push	{r4, r5, r6, lr}
 8016158:	0005      	movs	r5, r0
 801615a:	6818      	ldr	r0, [r3, #0]
 801615c:	000c      	movs	r4, r1
 801615e:	2800      	cmp	r0, #0
 8016160:	d004      	beq.n	801616c <__swsetup_r+0x18>
 8016162:	6a03      	ldr	r3, [r0, #32]
 8016164:	2b00      	cmp	r3, #0
 8016166:	d101      	bne.n	801616c <__swsetup_r+0x18>
 8016168:	f7fd ff0c 	bl	8013f84 <__sinit>
 801616c:	230c      	movs	r3, #12
 801616e:	5ee2      	ldrsh	r2, [r4, r3]
 8016170:	0713      	lsls	r3, r2, #28
 8016172:	d423      	bmi.n	80161bc <__swsetup_r+0x68>
 8016174:	06d3      	lsls	r3, r2, #27
 8016176:	d407      	bmi.n	8016188 <__swsetup_r+0x34>
 8016178:	2309      	movs	r3, #9
 801617a:	602b      	str	r3, [r5, #0]
 801617c:	2340      	movs	r3, #64	@ 0x40
 801617e:	2001      	movs	r0, #1
 8016180:	4313      	orrs	r3, r2
 8016182:	81a3      	strh	r3, [r4, #12]
 8016184:	4240      	negs	r0, r0
 8016186:	e03a      	b.n	80161fe <__swsetup_r+0xaa>
 8016188:	0752      	lsls	r2, r2, #29
 801618a:	d513      	bpl.n	80161b4 <__swsetup_r+0x60>
 801618c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801618e:	2900      	cmp	r1, #0
 8016190:	d008      	beq.n	80161a4 <__swsetup_r+0x50>
 8016192:	0023      	movs	r3, r4
 8016194:	3344      	adds	r3, #68	@ 0x44
 8016196:	4299      	cmp	r1, r3
 8016198:	d002      	beq.n	80161a0 <__swsetup_r+0x4c>
 801619a:	0028      	movs	r0, r5
 801619c:	f7fe febe 	bl	8014f1c <_free_r>
 80161a0:	2300      	movs	r3, #0
 80161a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80161a4:	2224      	movs	r2, #36	@ 0x24
 80161a6:	89a3      	ldrh	r3, [r4, #12]
 80161a8:	4393      	bics	r3, r2
 80161aa:	81a3      	strh	r3, [r4, #12]
 80161ac:	2300      	movs	r3, #0
 80161ae:	6063      	str	r3, [r4, #4]
 80161b0:	6923      	ldr	r3, [r4, #16]
 80161b2:	6023      	str	r3, [r4, #0]
 80161b4:	2308      	movs	r3, #8
 80161b6:	89a2      	ldrh	r2, [r4, #12]
 80161b8:	4313      	orrs	r3, r2
 80161ba:	81a3      	strh	r3, [r4, #12]
 80161bc:	6923      	ldr	r3, [r4, #16]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d10b      	bne.n	80161da <__swsetup_r+0x86>
 80161c2:	21a0      	movs	r1, #160	@ 0xa0
 80161c4:	2280      	movs	r2, #128	@ 0x80
 80161c6:	89a3      	ldrh	r3, [r4, #12]
 80161c8:	0089      	lsls	r1, r1, #2
 80161ca:	0092      	lsls	r2, r2, #2
 80161cc:	400b      	ands	r3, r1
 80161ce:	4293      	cmp	r3, r2
 80161d0:	d003      	beq.n	80161da <__swsetup_r+0x86>
 80161d2:	0021      	movs	r1, r4
 80161d4:	0028      	movs	r0, r5
 80161d6:	f000 f88f 	bl	80162f8 <__smakebuf_r>
 80161da:	230c      	movs	r3, #12
 80161dc:	5ee2      	ldrsh	r2, [r4, r3]
 80161de:	2101      	movs	r1, #1
 80161e0:	0013      	movs	r3, r2
 80161e2:	400b      	ands	r3, r1
 80161e4:	420a      	tst	r2, r1
 80161e6:	d00b      	beq.n	8016200 <__swsetup_r+0xac>
 80161e8:	2300      	movs	r3, #0
 80161ea:	60a3      	str	r3, [r4, #8]
 80161ec:	6963      	ldr	r3, [r4, #20]
 80161ee:	425b      	negs	r3, r3
 80161f0:	61a3      	str	r3, [r4, #24]
 80161f2:	2000      	movs	r0, #0
 80161f4:	6923      	ldr	r3, [r4, #16]
 80161f6:	4283      	cmp	r3, r0
 80161f8:	d101      	bne.n	80161fe <__swsetup_r+0xaa>
 80161fa:	0613      	lsls	r3, r2, #24
 80161fc:	d4be      	bmi.n	801617c <__swsetup_r+0x28>
 80161fe:	bd70      	pop	{r4, r5, r6, pc}
 8016200:	0791      	lsls	r1, r2, #30
 8016202:	d400      	bmi.n	8016206 <__swsetup_r+0xb2>
 8016204:	6963      	ldr	r3, [r4, #20]
 8016206:	60a3      	str	r3, [r4, #8]
 8016208:	e7f3      	b.n	80161f2 <__swsetup_r+0x9e>
 801620a:	46c0      	nop			@ (mov r8, r8)
 801620c:	2000020c 	.word	0x2000020c

08016210 <_raise_r>:
 8016210:	b570      	push	{r4, r5, r6, lr}
 8016212:	0004      	movs	r4, r0
 8016214:	000d      	movs	r5, r1
 8016216:	291f      	cmp	r1, #31
 8016218:	d904      	bls.n	8016224 <_raise_r+0x14>
 801621a:	2316      	movs	r3, #22
 801621c:	6003      	str	r3, [r0, #0]
 801621e:	2001      	movs	r0, #1
 8016220:	4240      	negs	r0, r0
 8016222:	bd70      	pop	{r4, r5, r6, pc}
 8016224:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8016226:	2b00      	cmp	r3, #0
 8016228:	d004      	beq.n	8016234 <_raise_r+0x24>
 801622a:	008a      	lsls	r2, r1, #2
 801622c:	189b      	adds	r3, r3, r2
 801622e:	681a      	ldr	r2, [r3, #0]
 8016230:	2a00      	cmp	r2, #0
 8016232:	d108      	bne.n	8016246 <_raise_r+0x36>
 8016234:	0020      	movs	r0, r4
 8016236:	f000 f831 	bl	801629c <_getpid_r>
 801623a:	002a      	movs	r2, r5
 801623c:	0001      	movs	r1, r0
 801623e:	0020      	movs	r0, r4
 8016240:	f000 f81a 	bl	8016278 <_kill_r>
 8016244:	e7ed      	b.n	8016222 <_raise_r+0x12>
 8016246:	2a01      	cmp	r2, #1
 8016248:	d009      	beq.n	801625e <_raise_r+0x4e>
 801624a:	1c51      	adds	r1, r2, #1
 801624c:	d103      	bne.n	8016256 <_raise_r+0x46>
 801624e:	2316      	movs	r3, #22
 8016250:	6003      	str	r3, [r0, #0]
 8016252:	2001      	movs	r0, #1
 8016254:	e7e5      	b.n	8016222 <_raise_r+0x12>
 8016256:	2100      	movs	r1, #0
 8016258:	0028      	movs	r0, r5
 801625a:	6019      	str	r1, [r3, #0]
 801625c:	4790      	blx	r2
 801625e:	2000      	movs	r0, #0
 8016260:	e7df      	b.n	8016222 <_raise_r+0x12>
	...

08016264 <raise>:
 8016264:	b510      	push	{r4, lr}
 8016266:	4b03      	ldr	r3, [pc, #12]	@ (8016274 <raise+0x10>)
 8016268:	0001      	movs	r1, r0
 801626a:	6818      	ldr	r0, [r3, #0]
 801626c:	f7ff ffd0 	bl	8016210 <_raise_r>
 8016270:	bd10      	pop	{r4, pc}
 8016272:	46c0      	nop			@ (mov r8, r8)
 8016274:	2000020c 	.word	0x2000020c

08016278 <_kill_r>:
 8016278:	2300      	movs	r3, #0
 801627a:	b570      	push	{r4, r5, r6, lr}
 801627c:	4d06      	ldr	r5, [pc, #24]	@ (8016298 <_kill_r+0x20>)
 801627e:	0004      	movs	r4, r0
 8016280:	0008      	movs	r0, r1
 8016282:	0011      	movs	r1, r2
 8016284:	602b      	str	r3, [r5, #0]
 8016286:	f7ed ff79 	bl	800417c <_kill>
 801628a:	1c43      	adds	r3, r0, #1
 801628c:	d103      	bne.n	8016296 <_kill_r+0x1e>
 801628e:	682b      	ldr	r3, [r5, #0]
 8016290:	2b00      	cmp	r3, #0
 8016292:	d000      	beq.n	8016296 <_kill_r+0x1e>
 8016294:	6023      	str	r3, [r4, #0]
 8016296:	bd70      	pop	{r4, r5, r6, pc}
 8016298:	20001f98 	.word	0x20001f98

0801629c <_getpid_r>:
 801629c:	b510      	push	{r4, lr}
 801629e:	f7ed ff67 	bl	8004170 <_getpid>
 80162a2:	bd10      	pop	{r4, pc}

080162a4 <__swhatbuf_r>:
 80162a4:	b570      	push	{r4, r5, r6, lr}
 80162a6:	000e      	movs	r6, r1
 80162a8:	001d      	movs	r5, r3
 80162aa:	230e      	movs	r3, #14
 80162ac:	5ec9      	ldrsh	r1, [r1, r3]
 80162ae:	0014      	movs	r4, r2
 80162b0:	b096      	sub	sp, #88	@ 0x58
 80162b2:	2900      	cmp	r1, #0
 80162b4:	da0c      	bge.n	80162d0 <__swhatbuf_r+0x2c>
 80162b6:	89b2      	ldrh	r2, [r6, #12]
 80162b8:	2380      	movs	r3, #128	@ 0x80
 80162ba:	0011      	movs	r1, r2
 80162bc:	4019      	ands	r1, r3
 80162be:	421a      	tst	r2, r3
 80162c0:	d114      	bne.n	80162ec <__swhatbuf_r+0x48>
 80162c2:	2380      	movs	r3, #128	@ 0x80
 80162c4:	00db      	lsls	r3, r3, #3
 80162c6:	2000      	movs	r0, #0
 80162c8:	6029      	str	r1, [r5, #0]
 80162ca:	6023      	str	r3, [r4, #0]
 80162cc:	b016      	add	sp, #88	@ 0x58
 80162ce:	bd70      	pop	{r4, r5, r6, pc}
 80162d0:	466a      	mov	r2, sp
 80162d2:	f000 f853 	bl	801637c <_fstat_r>
 80162d6:	2800      	cmp	r0, #0
 80162d8:	dbed      	blt.n	80162b6 <__swhatbuf_r+0x12>
 80162da:	23f0      	movs	r3, #240	@ 0xf0
 80162dc:	9901      	ldr	r1, [sp, #4]
 80162de:	021b      	lsls	r3, r3, #8
 80162e0:	4019      	ands	r1, r3
 80162e2:	4b04      	ldr	r3, [pc, #16]	@ (80162f4 <__swhatbuf_r+0x50>)
 80162e4:	18c9      	adds	r1, r1, r3
 80162e6:	424b      	negs	r3, r1
 80162e8:	4159      	adcs	r1, r3
 80162ea:	e7ea      	b.n	80162c2 <__swhatbuf_r+0x1e>
 80162ec:	2100      	movs	r1, #0
 80162ee:	2340      	movs	r3, #64	@ 0x40
 80162f0:	e7e9      	b.n	80162c6 <__swhatbuf_r+0x22>
 80162f2:	46c0      	nop			@ (mov r8, r8)
 80162f4:	ffffe000 	.word	0xffffe000

080162f8 <__smakebuf_r>:
 80162f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162fa:	2602      	movs	r6, #2
 80162fc:	898b      	ldrh	r3, [r1, #12]
 80162fe:	0005      	movs	r5, r0
 8016300:	000c      	movs	r4, r1
 8016302:	b085      	sub	sp, #20
 8016304:	4233      	tst	r3, r6
 8016306:	d007      	beq.n	8016318 <__smakebuf_r+0x20>
 8016308:	0023      	movs	r3, r4
 801630a:	3347      	adds	r3, #71	@ 0x47
 801630c:	6023      	str	r3, [r4, #0]
 801630e:	6123      	str	r3, [r4, #16]
 8016310:	2301      	movs	r3, #1
 8016312:	6163      	str	r3, [r4, #20]
 8016314:	b005      	add	sp, #20
 8016316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016318:	ab03      	add	r3, sp, #12
 801631a:	aa02      	add	r2, sp, #8
 801631c:	f7ff ffc2 	bl	80162a4 <__swhatbuf_r>
 8016320:	9f02      	ldr	r7, [sp, #8]
 8016322:	9001      	str	r0, [sp, #4]
 8016324:	0039      	movs	r1, r7
 8016326:	0028      	movs	r0, r5
 8016328:	f7fe fe6e 	bl	8015008 <_malloc_r>
 801632c:	2800      	cmp	r0, #0
 801632e:	d108      	bne.n	8016342 <__smakebuf_r+0x4a>
 8016330:	220c      	movs	r2, #12
 8016332:	5ea3      	ldrsh	r3, [r4, r2]
 8016334:	059a      	lsls	r2, r3, #22
 8016336:	d4ed      	bmi.n	8016314 <__smakebuf_r+0x1c>
 8016338:	2203      	movs	r2, #3
 801633a:	4393      	bics	r3, r2
 801633c:	431e      	orrs	r6, r3
 801633e:	81a6      	strh	r6, [r4, #12]
 8016340:	e7e2      	b.n	8016308 <__smakebuf_r+0x10>
 8016342:	2380      	movs	r3, #128	@ 0x80
 8016344:	89a2      	ldrh	r2, [r4, #12]
 8016346:	6020      	str	r0, [r4, #0]
 8016348:	4313      	orrs	r3, r2
 801634a:	81a3      	strh	r3, [r4, #12]
 801634c:	9b03      	ldr	r3, [sp, #12]
 801634e:	6120      	str	r0, [r4, #16]
 8016350:	6167      	str	r7, [r4, #20]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d00c      	beq.n	8016370 <__smakebuf_r+0x78>
 8016356:	0028      	movs	r0, r5
 8016358:	230e      	movs	r3, #14
 801635a:	5ee1      	ldrsh	r1, [r4, r3]
 801635c:	f000 f820 	bl	80163a0 <_isatty_r>
 8016360:	2800      	cmp	r0, #0
 8016362:	d005      	beq.n	8016370 <__smakebuf_r+0x78>
 8016364:	2303      	movs	r3, #3
 8016366:	89a2      	ldrh	r2, [r4, #12]
 8016368:	439a      	bics	r2, r3
 801636a:	3b02      	subs	r3, #2
 801636c:	4313      	orrs	r3, r2
 801636e:	81a3      	strh	r3, [r4, #12]
 8016370:	89a3      	ldrh	r3, [r4, #12]
 8016372:	9a01      	ldr	r2, [sp, #4]
 8016374:	4313      	orrs	r3, r2
 8016376:	81a3      	strh	r3, [r4, #12]
 8016378:	e7cc      	b.n	8016314 <__smakebuf_r+0x1c>
	...

0801637c <_fstat_r>:
 801637c:	2300      	movs	r3, #0
 801637e:	b570      	push	{r4, r5, r6, lr}
 8016380:	4d06      	ldr	r5, [pc, #24]	@ (801639c <_fstat_r+0x20>)
 8016382:	0004      	movs	r4, r0
 8016384:	0008      	movs	r0, r1
 8016386:	0011      	movs	r1, r2
 8016388:	602b      	str	r3, [r5, #0]
 801638a:	f7ed ff57 	bl	800423c <_fstat>
 801638e:	1c43      	adds	r3, r0, #1
 8016390:	d103      	bne.n	801639a <_fstat_r+0x1e>
 8016392:	682b      	ldr	r3, [r5, #0]
 8016394:	2b00      	cmp	r3, #0
 8016396:	d000      	beq.n	801639a <_fstat_r+0x1e>
 8016398:	6023      	str	r3, [r4, #0]
 801639a:	bd70      	pop	{r4, r5, r6, pc}
 801639c:	20001f98 	.word	0x20001f98

080163a0 <_isatty_r>:
 80163a0:	2300      	movs	r3, #0
 80163a2:	b570      	push	{r4, r5, r6, lr}
 80163a4:	4d06      	ldr	r5, [pc, #24]	@ (80163c0 <_isatty_r+0x20>)
 80163a6:	0004      	movs	r4, r0
 80163a8:	0008      	movs	r0, r1
 80163aa:	602b      	str	r3, [r5, #0]
 80163ac:	f7ed ff54 	bl	8004258 <_isatty>
 80163b0:	1c43      	adds	r3, r0, #1
 80163b2:	d103      	bne.n	80163bc <_isatty_r+0x1c>
 80163b4:	682b      	ldr	r3, [r5, #0]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d000      	beq.n	80163bc <_isatty_r+0x1c>
 80163ba:	6023      	str	r3, [r4, #0]
 80163bc:	bd70      	pop	{r4, r5, r6, pc}
 80163be:	46c0      	nop			@ (mov r8, r8)
 80163c0:	20001f98 	.word	0x20001f98

080163c4 <sqrt>:
 80163c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163c6:	0004      	movs	r4, r0
 80163c8:	000d      	movs	r5, r1
 80163ca:	f000 f821 	bl	8016410 <__ieee754_sqrt>
 80163ce:	0022      	movs	r2, r4
 80163d0:	0006      	movs	r6, r0
 80163d2:	000f      	movs	r7, r1
 80163d4:	002b      	movs	r3, r5
 80163d6:	0020      	movs	r0, r4
 80163d8:	0029      	movs	r1, r5
 80163da:	f7ec f97f 	bl	80026dc <__aeabi_dcmpun>
 80163de:	2800      	cmp	r0, #0
 80163e0:	d113      	bne.n	801640a <sqrt+0x46>
 80163e2:	2200      	movs	r2, #0
 80163e4:	2300      	movs	r3, #0
 80163e6:	0020      	movs	r0, r4
 80163e8:	0029      	movs	r1, r5
 80163ea:	f7ea f835 	bl	8000458 <__aeabi_dcmplt>
 80163ee:	2800      	cmp	r0, #0
 80163f0:	d00b      	beq.n	801640a <sqrt+0x46>
 80163f2:	f7fd fecf 	bl	8014194 <__errno>
 80163f6:	2321      	movs	r3, #33	@ 0x21
 80163f8:	2200      	movs	r2, #0
 80163fa:	6003      	str	r3, [r0, #0]
 80163fc:	2300      	movs	r3, #0
 80163fe:	0010      	movs	r0, r2
 8016400:	0019      	movs	r1, r3
 8016402:	f7ea fec3 	bl	800118c <__aeabi_ddiv>
 8016406:	0006      	movs	r6, r0
 8016408:	000f      	movs	r7, r1
 801640a:	0030      	movs	r0, r6
 801640c:	0039      	movs	r1, r7
 801640e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016410 <__ieee754_sqrt>:
 8016410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016412:	000a      	movs	r2, r1
 8016414:	000d      	movs	r5, r1
 8016416:	496d      	ldr	r1, [pc, #436]	@ (80165cc <__ieee754_sqrt+0x1bc>)
 8016418:	0004      	movs	r4, r0
 801641a:	0003      	movs	r3, r0
 801641c:	0008      	movs	r0, r1
 801641e:	b087      	sub	sp, #28
 8016420:	4028      	ands	r0, r5
 8016422:	4288      	cmp	r0, r1
 8016424:	d111      	bne.n	801644a <__ieee754_sqrt+0x3a>
 8016426:	0022      	movs	r2, r4
 8016428:	002b      	movs	r3, r5
 801642a:	0020      	movs	r0, r4
 801642c:	0029      	movs	r1, r5
 801642e:	f7eb faf1 	bl	8001a14 <__aeabi_dmul>
 8016432:	0002      	movs	r2, r0
 8016434:	000b      	movs	r3, r1
 8016436:	0020      	movs	r0, r4
 8016438:	0029      	movs	r1, r5
 801643a:	f7ea fb43 	bl	8000ac4 <__aeabi_dadd>
 801643e:	0004      	movs	r4, r0
 8016440:	000d      	movs	r5, r1
 8016442:	0020      	movs	r0, r4
 8016444:	0029      	movs	r1, r5
 8016446:	b007      	add	sp, #28
 8016448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801644a:	2d00      	cmp	r5, #0
 801644c:	dc11      	bgt.n	8016472 <__ieee754_sqrt+0x62>
 801644e:	0069      	lsls	r1, r5, #1
 8016450:	0849      	lsrs	r1, r1, #1
 8016452:	4321      	orrs	r1, r4
 8016454:	d0f5      	beq.n	8016442 <__ieee754_sqrt+0x32>
 8016456:	2000      	movs	r0, #0
 8016458:	4285      	cmp	r5, r0
 801645a:	d010      	beq.n	801647e <__ieee754_sqrt+0x6e>
 801645c:	0022      	movs	r2, r4
 801645e:	002b      	movs	r3, r5
 8016460:	0020      	movs	r0, r4
 8016462:	0029      	movs	r1, r5
 8016464:	f7eb fd9e 	bl	8001fa4 <__aeabi_dsub>
 8016468:	0002      	movs	r2, r0
 801646a:	000b      	movs	r3, r1
 801646c:	f7ea fe8e 	bl	800118c <__aeabi_ddiv>
 8016470:	e7e5      	b.n	801643e <__ieee754_sqrt+0x2e>
 8016472:	1528      	asrs	r0, r5, #20
 8016474:	d115      	bne.n	80164a2 <__ieee754_sqrt+0x92>
 8016476:	2480      	movs	r4, #128	@ 0x80
 8016478:	2100      	movs	r1, #0
 801647a:	0364      	lsls	r4, r4, #13
 801647c:	e007      	b.n	801648e <__ieee754_sqrt+0x7e>
 801647e:	0ada      	lsrs	r2, r3, #11
 8016480:	3815      	subs	r0, #21
 8016482:	055b      	lsls	r3, r3, #21
 8016484:	2a00      	cmp	r2, #0
 8016486:	d0fa      	beq.n	801647e <__ieee754_sqrt+0x6e>
 8016488:	e7f5      	b.n	8016476 <__ieee754_sqrt+0x66>
 801648a:	0052      	lsls	r2, r2, #1
 801648c:	3101      	adds	r1, #1
 801648e:	4222      	tst	r2, r4
 8016490:	d0fb      	beq.n	801648a <__ieee754_sqrt+0x7a>
 8016492:	1e4c      	subs	r4, r1, #1
 8016494:	1b00      	subs	r0, r0, r4
 8016496:	2420      	movs	r4, #32
 8016498:	001d      	movs	r5, r3
 801649a:	1a64      	subs	r4, r4, r1
 801649c:	40e5      	lsrs	r5, r4
 801649e:	408b      	lsls	r3, r1
 80164a0:	432a      	orrs	r2, r5
 80164a2:	494b      	ldr	r1, [pc, #300]	@ (80165d0 <__ieee754_sqrt+0x1c0>)
 80164a4:	0312      	lsls	r2, r2, #12
 80164a6:	1844      	adds	r4, r0, r1
 80164a8:	2180      	movs	r1, #128	@ 0x80
 80164aa:	0b12      	lsrs	r2, r2, #12
 80164ac:	0349      	lsls	r1, r1, #13
 80164ae:	4311      	orrs	r1, r2
 80164b0:	07c0      	lsls	r0, r0, #31
 80164b2:	d403      	bmi.n	80164bc <__ieee754_sqrt+0xac>
 80164b4:	0fda      	lsrs	r2, r3, #31
 80164b6:	0049      	lsls	r1, r1, #1
 80164b8:	1851      	adds	r1, r2, r1
 80164ba:	005b      	lsls	r3, r3, #1
 80164bc:	2500      	movs	r5, #0
 80164be:	1062      	asrs	r2, r4, #1
 80164c0:	0049      	lsls	r1, r1, #1
 80164c2:	2480      	movs	r4, #128	@ 0x80
 80164c4:	9205      	str	r2, [sp, #20]
 80164c6:	0fda      	lsrs	r2, r3, #31
 80164c8:	1852      	adds	r2, r2, r1
 80164ca:	2016      	movs	r0, #22
 80164cc:	0029      	movs	r1, r5
 80164ce:	005b      	lsls	r3, r3, #1
 80164d0:	03a4      	lsls	r4, r4, #14
 80164d2:	190e      	adds	r6, r1, r4
 80164d4:	4296      	cmp	r6, r2
 80164d6:	dc02      	bgt.n	80164de <__ieee754_sqrt+0xce>
 80164d8:	1931      	adds	r1, r6, r4
 80164da:	1b92      	subs	r2, r2, r6
 80164dc:	192d      	adds	r5, r5, r4
 80164de:	0fde      	lsrs	r6, r3, #31
 80164e0:	0052      	lsls	r2, r2, #1
 80164e2:	3801      	subs	r0, #1
 80164e4:	1992      	adds	r2, r2, r6
 80164e6:	005b      	lsls	r3, r3, #1
 80164e8:	0864      	lsrs	r4, r4, #1
 80164ea:	2800      	cmp	r0, #0
 80164ec:	d1f1      	bne.n	80164d2 <__ieee754_sqrt+0xc2>
 80164ee:	2620      	movs	r6, #32
 80164f0:	2780      	movs	r7, #128	@ 0x80
 80164f2:	0004      	movs	r4, r0
 80164f4:	9604      	str	r6, [sp, #16]
 80164f6:	063f      	lsls	r7, r7, #24
 80164f8:	19c6      	adds	r6, r0, r7
 80164fa:	46b4      	mov	ip, r6
 80164fc:	4291      	cmp	r1, r2
 80164fe:	db02      	blt.n	8016506 <__ieee754_sqrt+0xf6>
 8016500:	d114      	bne.n	801652c <__ieee754_sqrt+0x11c>
 8016502:	429e      	cmp	r6, r3
 8016504:	d812      	bhi.n	801652c <__ieee754_sqrt+0x11c>
 8016506:	4660      	mov	r0, ip
 8016508:	4666      	mov	r6, ip
 801650a:	19c0      	adds	r0, r0, r7
 801650c:	9100      	str	r1, [sp, #0]
 801650e:	2e00      	cmp	r6, #0
 8016510:	da03      	bge.n	801651a <__ieee754_sqrt+0x10a>
 8016512:	43c6      	mvns	r6, r0
 8016514:	0ff6      	lsrs	r6, r6, #31
 8016516:	198e      	adds	r6, r1, r6
 8016518:	9600      	str	r6, [sp, #0]
 801651a:	1a52      	subs	r2, r2, r1
 801651c:	4563      	cmp	r3, ip
 801651e:	4189      	sbcs	r1, r1
 8016520:	4249      	negs	r1, r1
 8016522:	1a52      	subs	r2, r2, r1
 8016524:	4661      	mov	r1, ip
 8016526:	1a5b      	subs	r3, r3, r1
 8016528:	9900      	ldr	r1, [sp, #0]
 801652a:	19e4      	adds	r4, r4, r7
 801652c:	0fde      	lsrs	r6, r3, #31
 801652e:	0052      	lsls	r2, r2, #1
 8016530:	1992      	adds	r2, r2, r6
 8016532:	9e04      	ldr	r6, [sp, #16]
 8016534:	005b      	lsls	r3, r3, #1
 8016536:	3e01      	subs	r6, #1
 8016538:	087f      	lsrs	r7, r7, #1
 801653a:	9604      	str	r6, [sp, #16]
 801653c:	2e00      	cmp	r6, #0
 801653e:	d1db      	bne.n	80164f8 <__ieee754_sqrt+0xe8>
 8016540:	431a      	orrs	r2, r3
 8016542:	d01f      	beq.n	8016584 <__ieee754_sqrt+0x174>
 8016544:	4e23      	ldr	r6, [pc, #140]	@ (80165d4 <__ieee754_sqrt+0x1c4>)
 8016546:	4f24      	ldr	r7, [pc, #144]	@ (80165d8 <__ieee754_sqrt+0x1c8>)
 8016548:	6830      	ldr	r0, [r6, #0]
 801654a:	6871      	ldr	r1, [r6, #4]
 801654c:	683a      	ldr	r2, [r7, #0]
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	9200      	str	r2, [sp, #0]
 8016552:	9301      	str	r3, [sp, #4]
 8016554:	6832      	ldr	r2, [r6, #0]
 8016556:	6873      	ldr	r3, [r6, #4]
 8016558:	9202      	str	r2, [sp, #8]
 801655a:	9303      	str	r3, [sp, #12]
 801655c:	9a00      	ldr	r2, [sp, #0]
 801655e:	9b01      	ldr	r3, [sp, #4]
 8016560:	f7eb fd20 	bl	8001fa4 <__aeabi_dsub>
 8016564:	0002      	movs	r2, r0
 8016566:	000b      	movs	r3, r1
 8016568:	9802      	ldr	r0, [sp, #8]
 801656a:	9903      	ldr	r1, [sp, #12]
 801656c:	f7e9 ff7e 	bl	800046c <__aeabi_dcmple>
 8016570:	2800      	cmp	r0, #0
 8016572:	d007      	beq.n	8016584 <__ieee754_sqrt+0x174>
 8016574:	6830      	ldr	r0, [r6, #0]
 8016576:	6871      	ldr	r1, [r6, #4]
 8016578:	683a      	ldr	r2, [r7, #0]
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	1c67      	adds	r7, r4, #1
 801657e:	d10f      	bne.n	80165a0 <__ieee754_sqrt+0x190>
 8016580:	9c04      	ldr	r4, [sp, #16]
 8016582:	3501      	adds	r5, #1
 8016584:	4b15      	ldr	r3, [pc, #84]	@ (80165dc <__ieee754_sqrt+0x1cc>)
 8016586:	106a      	asrs	r2, r5, #1
 8016588:	18d2      	adds	r2, r2, r3
 801658a:	0863      	lsrs	r3, r4, #1
 801658c:	07ed      	lsls	r5, r5, #31
 801658e:	d502      	bpl.n	8016596 <__ieee754_sqrt+0x186>
 8016590:	2180      	movs	r1, #128	@ 0x80
 8016592:	0609      	lsls	r1, r1, #24
 8016594:	430b      	orrs	r3, r1
 8016596:	9905      	ldr	r1, [sp, #20]
 8016598:	001c      	movs	r4, r3
 801659a:	0509      	lsls	r1, r1, #20
 801659c:	188d      	adds	r5, r1, r2
 801659e:	e750      	b.n	8016442 <__ieee754_sqrt+0x32>
 80165a0:	f7ea fa90 	bl	8000ac4 <__aeabi_dadd>
 80165a4:	6877      	ldr	r7, [r6, #4]
 80165a6:	6836      	ldr	r6, [r6, #0]
 80165a8:	0002      	movs	r2, r0
 80165aa:	000b      	movs	r3, r1
 80165ac:	0030      	movs	r0, r6
 80165ae:	0039      	movs	r1, r7
 80165b0:	f7e9 ff52 	bl	8000458 <__aeabi_dcmplt>
 80165b4:	2800      	cmp	r0, #0
 80165b6:	d004      	beq.n	80165c2 <__ieee754_sqrt+0x1b2>
 80165b8:	3402      	adds	r4, #2
 80165ba:	4263      	negs	r3, r4
 80165bc:	4163      	adcs	r3, r4
 80165be:	18ed      	adds	r5, r5, r3
 80165c0:	e7e0      	b.n	8016584 <__ieee754_sqrt+0x174>
 80165c2:	2301      	movs	r3, #1
 80165c4:	3401      	adds	r4, #1
 80165c6:	439c      	bics	r4, r3
 80165c8:	e7dc      	b.n	8016584 <__ieee754_sqrt+0x174>
 80165ca:	46c0      	nop			@ (mov r8, r8)
 80165cc:	7ff00000 	.word	0x7ff00000
 80165d0:	fffffc01 	.word	0xfffffc01
 80165d4:	200003d0 	.word	0x200003d0
 80165d8:	200003c8 	.word	0x200003c8
 80165dc:	3fe00000 	.word	0x3fe00000

080165e0 <_init>:
 80165e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165e2:	46c0      	nop			@ (mov r8, r8)
 80165e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80165e6:	bc08      	pop	{r3}
 80165e8:	469e      	mov	lr, r3
 80165ea:	4770      	bx	lr

080165ec <_fini>:
 80165ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165ee:	46c0      	nop			@ (mov r8, r8)
 80165f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80165f2:	bc08      	pop	{r3}
 80165f4:	469e      	mov	lr, r3
 80165f6:	4770      	bx	lr
