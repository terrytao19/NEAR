
NEAR_ANCHOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce10  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  0800ced0  0800ced0  0000ded0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d170  0800d170  0000f1c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800d170  0800d170  0000f1c0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800d170  0800d170  0000f1c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d170  0800d170  0000e170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d174  0800d174  0000e174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c0  20000000  0800d178  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000140c  200001c0  0800d338  0000f1c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200015cc  0800d338  0000f5cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f1c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000176ff  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fd5  00000000  00000000  000268e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  0002a8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f7c  00000000  00000000  0002bd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000650d  00000000  00000000  0002cc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c627  00000000  00000000  000331a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2edd  00000000  00000000  0004f7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f26a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049f0  00000000  00000000  000f26e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000f70d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000172  00000000  00000000  000f7135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001c0 	.word	0x200001c0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ceb8 	.word	0x0800ceb8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001c4 	.word	0x200001c4
 8000104:	0800ceb8 	.word	0x0800ceb8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	@ (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f001 fef7 	bl	800201c <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f001 fe2f 	bl	8001e98 <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	@ (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f001 fa1e 	bl	8001684 <__aeabi_dsub>
 8000248:	f001 fe26 	bl	8001e98 <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	@ 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_d2lz>:
 800025c:	b570      	push	{r4, r5, r6, lr}
 800025e:	2200      	movs	r2, #0
 8000260:	2300      	movs	r3, #0
 8000262:	0004      	movs	r4, r0
 8000264:	000d      	movs	r5, r1
 8000266:	f001 febb 	bl	8001fe0 <__aeabi_dcmplt>
 800026a:	2800      	cmp	r0, #0
 800026c:	d108      	bne.n	8000280 <__aeabi_d2lz+0x24>
 800026e:	0020      	movs	r0, r4
 8000270:	0029      	movs	r1, r5
 8000272:	f000 f80f 	bl	8000294 <__aeabi_d2ulz>
 8000276:	0002      	movs	r2, r0
 8000278:	000b      	movs	r3, r1
 800027a:	0010      	movs	r0, r2
 800027c:	0019      	movs	r1, r3
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	2380      	movs	r3, #128	@ 0x80
 8000282:	061b      	lsls	r3, r3, #24
 8000284:	18e9      	adds	r1, r5, r3
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f804 	bl	8000294 <__aeabi_d2ulz>
 800028c:	2300      	movs	r3, #0
 800028e:	4242      	negs	r2, r0
 8000290:	418b      	sbcs	r3, r1
 8000292:	e7f2      	b.n	800027a <__aeabi_d2lz+0x1e>

08000294 <__aeabi_d2ulz>:
 8000294:	b570      	push	{r4, r5, r6, lr}
 8000296:	2200      	movs	r2, #0
 8000298:	4b0b      	ldr	r3, [pc, #44]	@ (80002c8 <__aeabi_d2ulz+0x34>)
 800029a:	000d      	movs	r5, r1
 800029c:	0004      	movs	r4, r0
 800029e:	f000 ff0b 	bl	80010b8 <__aeabi_dmul>
 80002a2:	f7ff ffbd 	bl	8000220 <__aeabi_d2uiz>
 80002a6:	0006      	movs	r6, r0
 80002a8:	f001 fe60 	bl	8001f6c <__aeabi_ui2d>
 80002ac:	2200      	movs	r2, #0
 80002ae:	4b07      	ldr	r3, [pc, #28]	@ (80002cc <__aeabi_d2ulz+0x38>)
 80002b0:	f000 ff02 	bl	80010b8 <__aeabi_dmul>
 80002b4:	0002      	movs	r2, r0
 80002b6:	000b      	movs	r3, r1
 80002b8:	0020      	movs	r0, r4
 80002ba:	0029      	movs	r1, r5
 80002bc:	f001 f9e2 	bl	8001684 <__aeabi_dsub>
 80002c0:	f7ff ffae 	bl	8000220 <__aeabi_d2uiz>
 80002c4:	0031      	movs	r1, r6
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	3df00000 	.word	0x3df00000
 80002cc:	41f00000 	.word	0x41f00000

080002d0 <__aeabi_l2d>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	0006      	movs	r6, r0
 80002d4:	0008      	movs	r0, r1
 80002d6:	f001 fe1b 	bl	8001f10 <__aeabi_i2d>
 80002da:	2200      	movs	r2, #0
 80002dc:	4b06      	ldr	r3, [pc, #24]	@ (80002f8 <__aeabi_l2d+0x28>)
 80002de:	f000 feeb 	bl	80010b8 <__aeabi_dmul>
 80002e2:	000d      	movs	r5, r1
 80002e4:	0004      	movs	r4, r0
 80002e6:	0030      	movs	r0, r6
 80002e8:	f001 fe40 	bl	8001f6c <__aeabi_ui2d>
 80002ec:	002b      	movs	r3, r5
 80002ee:	0022      	movs	r2, r4
 80002f0:	f000 f804 	bl	80002fc <__aeabi_dadd>
 80002f4:	bd70      	pop	{r4, r5, r6, pc}
 80002f6:	46c0      	nop			@ (mov r8, r8)
 80002f8:	41f00000 	.word	0x41f00000

080002fc <__aeabi_dadd>:
 80002fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fe:	464f      	mov	r7, r9
 8000300:	4646      	mov	r6, r8
 8000302:	46d6      	mov	lr, sl
 8000304:	b5c0      	push	{r6, r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	9000      	str	r0, [sp, #0]
 800030a:	9101      	str	r1, [sp, #4]
 800030c:	030e      	lsls	r6, r1, #12
 800030e:	004c      	lsls	r4, r1, #1
 8000310:	0fcd      	lsrs	r5, r1, #31
 8000312:	0a71      	lsrs	r1, r6, #9
 8000314:	9e00      	ldr	r6, [sp, #0]
 8000316:	005f      	lsls	r7, r3, #1
 8000318:	0f76      	lsrs	r6, r6, #29
 800031a:	430e      	orrs	r6, r1
 800031c:	9900      	ldr	r1, [sp, #0]
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	00c9      	lsls	r1, r1, #3
 8000324:	4689      	mov	r9, r1
 8000326:	0319      	lsls	r1, r3, #12
 8000328:	0d7b      	lsrs	r3, r7, #21
 800032a:	4698      	mov	r8, r3
 800032c:	9b01      	ldr	r3, [sp, #4]
 800032e:	0a49      	lsrs	r1, r1, #9
 8000330:	0fdb      	lsrs	r3, r3, #31
 8000332:	469c      	mov	ip, r3
 8000334:	9b00      	ldr	r3, [sp, #0]
 8000336:	9a00      	ldr	r2, [sp, #0]
 8000338:	0f5b      	lsrs	r3, r3, #29
 800033a:	430b      	orrs	r3, r1
 800033c:	4641      	mov	r1, r8
 800033e:	0d64      	lsrs	r4, r4, #21
 8000340:	00d2      	lsls	r2, r2, #3
 8000342:	1a61      	subs	r1, r4, r1
 8000344:	4565      	cmp	r5, ip
 8000346:	d100      	bne.n	800034a <__aeabi_dadd+0x4e>
 8000348:	e0a6      	b.n	8000498 <__aeabi_dadd+0x19c>
 800034a:	2900      	cmp	r1, #0
 800034c:	dd72      	ble.n	8000434 <__aeabi_dadd+0x138>
 800034e:	4647      	mov	r7, r8
 8000350:	2f00      	cmp	r7, #0
 8000352:	d100      	bne.n	8000356 <__aeabi_dadd+0x5a>
 8000354:	e0dd      	b.n	8000512 <__aeabi_dadd+0x216>
 8000356:	4fcc      	ldr	r7, [pc, #816]	@ (8000688 <__aeabi_dadd+0x38c>)
 8000358:	42bc      	cmp	r4, r7
 800035a:	d100      	bne.n	800035e <__aeabi_dadd+0x62>
 800035c:	e19a      	b.n	8000694 <__aeabi_dadd+0x398>
 800035e:	2701      	movs	r7, #1
 8000360:	2938      	cmp	r1, #56	@ 0x38
 8000362:	dc17      	bgt.n	8000394 <__aeabi_dadd+0x98>
 8000364:	2780      	movs	r7, #128	@ 0x80
 8000366:	043f      	lsls	r7, r7, #16
 8000368:	433b      	orrs	r3, r7
 800036a:	291f      	cmp	r1, #31
 800036c:	dd00      	ble.n	8000370 <__aeabi_dadd+0x74>
 800036e:	e1dd      	b.n	800072c <__aeabi_dadd+0x430>
 8000370:	2720      	movs	r7, #32
 8000372:	1a78      	subs	r0, r7, r1
 8000374:	001f      	movs	r7, r3
 8000376:	4087      	lsls	r7, r0
 8000378:	46ba      	mov	sl, r7
 800037a:	0017      	movs	r7, r2
 800037c:	40cf      	lsrs	r7, r1
 800037e:	4684      	mov	ip, r0
 8000380:	0038      	movs	r0, r7
 8000382:	4657      	mov	r7, sl
 8000384:	4307      	orrs	r7, r0
 8000386:	4660      	mov	r0, ip
 8000388:	4082      	lsls	r2, r0
 800038a:	40cb      	lsrs	r3, r1
 800038c:	1e50      	subs	r0, r2, #1
 800038e:	4182      	sbcs	r2, r0
 8000390:	1af6      	subs	r6, r6, r3
 8000392:	4317      	orrs	r7, r2
 8000394:	464b      	mov	r3, r9
 8000396:	1bdf      	subs	r7, r3, r7
 8000398:	45b9      	cmp	r9, r7
 800039a:	4180      	sbcs	r0, r0
 800039c:	4240      	negs	r0, r0
 800039e:	1a36      	subs	r6, r6, r0
 80003a0:	0233      	lsls	r3, r6, #8
 80003a2:	d400      	bmi.n	80003a6 <__aeabi_dadd+0xaa>
 80003a4:	e0ff      	b.n	80005a6 <__aeabi_dadd+0x2aa>
 80003a6:	0276      	lsls	r6, r6, #9
 80003a8:	0a76      	lsrs	r6, r6, #9
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d100      	bne.n	80003b0 <__aeabi_dadd+0xb4>
 80003ae:	e13c      	b.n	800062a <__aeabi_dadd+0x32e>
 80003b0:	0030      	movs	r0, r6
 80003b2:	f001 fe3d 	bl	8002030 <__clzsi2>
 80003b6:	0003      	movs	r3, r0
 80003b8:	3b08      	subs	r3, #8
 80003ba:	2120      	movs	r1, #32
 80003bc:	0038      	movs	r0, r7
 80003be:	1aca      	subs	r2, r1, r3
 80003c0:	40d0      	lsrs	r0, r2
 80003c2:	409e      	lsls	r6, r3
 80003c4:	0002      	movs	r2, r0
 80003c6:	409f      	lsls	r7, r3
 80003c8:	4332      	orrs	r2, r6
 80003ca:	429c      	cmp	r4, r3
 80003cc:	dd00      	ble.n	80003d0 <__aeabi_dadd+0xd4>
 80003ce:	e1a6      	b.n	800071e <__aeabi_dadd+0x422>
 80003d0:	1b18      	subs	r0, r3, r4
 80003d2:	3001      	adds	r0, #1
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	003e      	movs	r6, r7
 80003d8:	408f      	lsls	r7, r1
 80003da:	40c6      	lsrs	r6, r0
 80003dc:	1e7b      	subs	r3, r7, #1
 80003de:	419f      	sbcs	r7, r3
 80003e0:	0013      	movs	r3, r2
 80003e2:	408b      	lsls	r3, r1
 80003e4:	4337      	orrs	r7, r6
 80003e6:	431f      	orrs	r7, r3
 80003e8:	40c2      	lsrs	r2, r0
 80003ea:	003b      	movs	r3, r7
 80003ec:	0016      	movs	r6, r2
 80003ee:	2400      	movs	r4, #0
 80003f0:	4313      	orrs	r3, r2
 80003f2:	d100      	bne.n	80003f6 <__aeabi_dadd+0xfa>
 80003f4:	e1df      	b.n	80007b6 <__aeabi_dadd+0x4ba>
 80003f6:	077b      	lsls	r3, r7, #29
 80003f8:	d100      	bne.n	80003fc <__aeabi_dadd+0x100>
 80003fa:	e332      	b.n	8000a62 <__aeabi_dadd+0x766>
 80003fc:	230f      	movs	r3, #15
 80003fe:	003a      	movs	r2, r7
 8000400:	403b      	ands	r3, r7
 8000402:	2b04      	cmp	r3, #4
 8000404:	d004      	beq.n	8000410 <__aeabi_dadd+0x114>
 8000406:	1d3a      	adds	r2, r7, #4
 8000408:	42ba      	cmp	r2, r7
 800040a:	41bf      	sbcs	r7, r7
 800040c:	427f      	negs	r7, r7
 800040e:	19f6      	adds	r6, r6, r7
 8000410:	0233      	lsls	r3, r6, #8
 8000412:	d400      	bmi.n	8000416 <__aeabi_dadd+0x11a>
 8000414:	e323      	b.n	8000a5e <__aeabi_dadd+0x762>
 8000416:	4b9c      	ldr	r3, [pc, #624]	@ (8000688 <__aeabi_dadd+0x38c>)
 8000418:	3401      	adds	r4, #1
 800041a:	429c      	cmp	r4, r3
 800041c:	d100      	bne.n	8000420 <__aeabi_dadd+0x124>
 800041e:	e0b4      	b.n	800058a <__aeabi_dadd+0x28e>
 8000420:	4b9a      	ldr	r3, [pc, #616]	@ (800068c <__aeabi_dadd+0x390>)
 8000422:	0564      	lsls	r4, r4, #21
 8000424:	401e      	ands	r6, r3
 8000426:	0d64      	lsrs	r4, r4, #21
 8000428:	0777      	lsls	r7, r6, #29
 800042a:	08d2      	lsrs	r2, r2, #3
 800042c:	0276      	lsls	r6, r6, #9
 800042e:	4317      	orrs	r7, r2
 8000430:	0b36      	lsrs	r6, r6, #12
 8000432:	e0ac      	b.n	800058e <__aeabi_dadd+0x292>
 8000434:	2900      	cmp	r1, #0
 8000436:	d100      	bne.n	800043a <__aeabi_dadd+0x13e>
 8000438:	e07e      	b.n	8000538 <__aeabi_dadd+0x23c>
 800043a:	4641      	mov	r1, r8
 800043c:	1b09      	subs	r1, r1, r4
 800043e:	2c00      	cmp	r4, #0
 8000440:	d000      	beq.n	8000444 <__aeabi_dadd+0x148>
 8000442:	e160      	b.n	8000706 <__aeabi_dadd+0x40a>
 8000444:	0034      	movs	r4, r6
 8000446:	4648      	mov	r0, r9
 8000448:	4304      	orrs	r4, r0
 800044a:	d100      	bne.n	800044e <__aeabi_dadd+0x152>
 800044c:	e1c9      	b.n	80007e2 <__aeabi_dadd+0x4e6>
 800044e:	1e4c      	subs	r4, r1, #1
 8000450:	2901      	cmp	r1, #1
 8000452:	d100      	bne.n	8000456 <__aeabi_dadd+0x15a>
 8000454:	e22e      	b.n	80008b4 <__aeabi_dadd+0x5b8>
 8000456:	4d8c      	ldr	r5, [pc, #560]	@ (8000688 <__aeabi_dadd+0x38c>)
 8000458:	42a9      	cmp	r1, r5
 800045a:	d100      	bne.n	800045e <__aeabi_dadd+0x162>
 800045c:	e224      	b.n	80008a8 <__aeabi_dadd+0x5ac>
 800045e:	2701      	movs	r7, #1
 8000460:	2c38      	cmp	r4, #56	@ 0x38
 8000462:	dc11      	bgt.n	8000488 <__aeabi_dadd+0x18c>
 8000464:	0021      	movs	r1, r4
 8000466:	291f      	cmp	r1, #31
 8000468:	dd00      	ble.n	800046c <__aeabi_dadd+0x170>
 800046a:	e20b      	b.n	8000884 <__aeabi_dadd+0x588>
 800046c:	2420      	movs	r4, #32
 800046e:	0037      	movs	r7, r6
 8000470:	4648      	mov	r0, r9
 8000472:	1a64      	subs	r4, r4, r1
 8000474:	40a7      	lsls	r7, r4
 8000476:	40c8      	lsrs	r0, r1
 8000478:	4307      	orrs	r7, r0
 800047a:	4648      	mov	r0, r9
 800047c:	40a0      	lsls	r0, r4
 800047e:	40ce      	lsrs	r6, r1
 8000480:	1e44      	subs	r4, r0, #1
 8000482:	41a0      	sbcs	r0, r4
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	4307      	orrs	r7, r0
 8000488:	1bd7      	subs	r7, r2, r7
 800048a:	42ba      	cmp	r2, r7
 800048c:	4192      	sbcs	r2, r2
 800048e:	4252      	negs	r2, r2
 8000490:	4665      	mov	r5, ip
 8000492:	4644      	mov	r4, r8
 8000494:	1a9e      	subs	r6, r3, r2
 8000496:	e783      	b.n	80003a0 <__aeabi_dadd+0xa4>
 8000498:	2900      	cmp	r1, #0
 800049a:	dc00      	bgt.n	800049e <__aeabi_dadd+0x1a2>
 800049c:	e09c      	b.n	80005d8 <__aeabi_dadd+0x2dc>
 800049e:	4647      	mov	r7, r8
 80004a0:	2f00      	cmp	r7, #0
 80004a2:	d167      	bne.n	8000574 <__aeabi_dadd+0x278>
 80004a4:	001f      	movs	r7, r3
 80004a6:	4317      	orrs	r7, r2
 80004a8:	d100      	bne.n	80004ac <__aeabi_dadd+0x1b0>
 80004aa:	e0e4      	b.n	8000676 <__aeabi_dadd+0x37a>
 80004ac:	1e48      	subs	r0, r1, #1
 80004ae:	2901      	cmp	r1, #1
 80004b0:	d100      	bne.n	80004b4 <__aeabi_dadd+0x1b8>
 80004b2:	e19b      	b.n	80007ec <__aeabi_dadd+0x4f0>
 80004b4:	4f74      	ldr	r7, [pc, #464]	@ (8000688 <__aeabi_dadd+0x38c>)
 80004b6:	42b9      	cmp	r1, r7
 80004b8:	d100      	bne.n	80004bc <__aeabi_dadd+0x1c0>
 80004ba:	e0eb      	b.n	8000694 <__aeabi_dadd+0x398>
 80004bc:	2701      	movs	r7, #1
 80004be:	0001      	movs	r1, r0
 80004c0:	2838      	cmp	r0, #56	@ 0x38
 80004c2:	dc11      	bgt.n	80004e8 <__aeabi_dadd+0x1ec>
 80004c4:	291f      	cmp	r1, #31
 80004c6:	dd00      	ble.n	80004ca <__aeabi_dadd+0x1ce>
 80004c8:	e1c7      	b.n	800085a <__aeabi_dadd+0x55e>
 80004ca:	2720      	movs	r7, #32
 80004cc:	1a78      	subs	r0, r7, r1
 80004ce:	001f      	movs	r7, r3
 80004d0:	4684      	mov	ip, r0
 80004d2:	4087      	lsls	r7, r0
 80004d4:	0010      	movs	r0, r2
 80004d6:	40c8      	lsrs	r0, r1
 80004d8:	4307      	orrs	r7, r0
 80004da:	4660      	mov	r0, ip
 80004dc:	4082      	lsls	r2, r0
 80004de:	40cb      	lsrs	r3, r1
 80004e0:	1e50      	subs	r0, r2, #1
 80004e2:	4182      	sbcs	r2, r0
 80004e4:	18f6      	adds	r6, r6, r3
 80004e6:	4317      	orrs	r7, r2
 80004e8:	444f      	add	r7, r9
 80004ea:	454f      	cmp	r7, r9
 80004ec:	4180      	sbcs	r0, r0
 80004ee:	4240      	negs	r0, r0
 80004f0:	1836      	adds	r6, r6, r0
 80004f2:	0233      	lsls	r3, r6, #8
 80004f4:	d557      	bpl.n	80005a6 <__aeabi_dadd+0x2aa>
 80004f6:	4b64      	ldr	r3, [pc, #400]	@ (8000688 <__aeabi_dadd+0x38c>)
 80004f8:	3401      	adds	r4, #1
 80004fa:	429c      	cmp	r4, r3
 80004fc:	d045      	beq.n	800058a <__aeabi_dadd+0x28e>
 80004fe:	2101      	movs	r1, #1
 8000500:	4b62      	ldr	r3, [pc, #392]	@ (800068c <__aeabi_dadd+0x390>)
 8000502:	087a      	lsrs	r2, r7, #1
 8000504:	401e      	ands	r6, r3
 8000506:	4039      	ands	r1, r7
 8000508:	430a      	orrs	r2, r1
 800050a:	07f7      	lsls	r7, r6, #31
 800050c:	4317      	orrs	r7, r2
 800050e:	0876      	lsrs	r6, r6, #1
 8000510:	e771      	b.n	80003f6 <__aeabi_dadd+0xfa>
 8000512:	001f      	movs	r7, r3
 8000514:	4317      	orrs	r7, r2
 8000516:	d100      	bne.n	800051a <__aeabi_dadd+0x21e>
 8000518:	e0ad      	b.n	8000676 <__aeabi_dadd+0x37a>
 800051a:	1e4f      	subs	r7, r1, #1
 800051c:	46bc      	mov	ip, r7
 800051e:	2901      	cmp	r1, #1
 8000520:	d100      	bne.n	8000524 <__aeabi_dadd+0x228>
 8000522:	e182      	b.n	800082a <__aeabi_dadd+0x52e>
 8000524:	4f58      	ldr	r7, [pc, #352]	@ (8000688 <__aeabi_dadd+0x38c>)
 8000526:	42b9      	cmp	r1, r7
 8000528:	d100      	bne.n	800052c <__aeabi_dadd+0x230>
 800052a:	e190      	b.n	800084e <__aeabi_dadd+0x552>
 800052c:	4661      	mov	r1, ip
 800052e:	2701      	movs	r7, #1
 8000530:	2938      	cmp	r1, #56	@ 0x38
 8000532:	dd00      	ble.n	8000536 <__aeabi_dadd+0x23a>
 8000534:	e72e      	b.n	8000394 <__aeabi_dadd+0x98>
 8000536:	e718      	b.n	800036a <__aeabi_dadd+0x6e>
 8000538:	4f55      	ldr	r7, [pc, #340]	@ (8000690 <__aeabi_dadd+0x394>)
 800053a:	1c61      	adds	r1, r4, #1
 800053c:	4239      	tst	r1, r7
 800053e:	d000      	beq.n	8000542 <__aeabi_dadd+0x246>
 8000540:	e0d0      	b.n	80006e4 <__aeabi_dadd+0x3e8>
 8000542:	0031      	movs	r1, r6
 8000544:	4648      	mov	r0, r9
 8000546:	001f      	movs	r7, r3
 8000548:	4301      	orrs	r1, r0
 800054a:	4317      	orrs	r7, r2
 800054c:	2c00      	cmp	r4, #0
 800054e:	d000      	beq.n	8000552 <__aeabi_dadd+0x256>
 8000550:	e13d      	b.n	80007ce <__aeabi_dadd+0x4d2>
 8000552:	2900      	cmp	r1, #0
 8000554:	d100      	bne.n	8000558 <__aeabi_dadd+0x25c>
 8000556:	e1bc      	b.n	80008d2 <__aeabi_dadd+0x5d6>
 8000558:	2f00      	cmp	r7, #0
 800055a:	d000      	beq.n	800055e <__aeabi_dadd+0x262>
 800055c:	e1bf      	b.n	80008de <__aeabi_dadd+0x5e2>
 800055e:	464b      	mov	r3, r9
 8000560:	2100      	movs	r1, #0
 8000562:	08d8      	lsrs	r0, r3, #3
 8000564:	0777      	lsls	r7, r6, #29
 8000566:	4307      	orrs	r7, r0
 8000568:	08f0      	lsrs	r0, r6, #3
 800056a:	0306      	lsls	r6, r0, #12
 800056c:	054c      	lsls	r4, r1, #21
 800056e:	0b36      	lsrs	r6, r6, #12
 8000570:	0d64      	lsrs	r4, r4, #21
 8000572:	e00c      	b.n	800058e <__aeabi_dadd+0x292>
 8000574:	4f44      	ldr	r7, [pc, #272]	@ (8000688 <__aeabi_dadd+0x38c>)
 8000576:	42bc      	cmp	r4, r7
 8000578:	d100      	bne.n	800057c <__aeabi_dadd+0x280>
 800057a:	e08b      	b.n	8000694 <__aeabi_dadd+0x398>
 800057c:	2701      	movs	r7, #1
 800057e:	2938      	cmp	r1, #56	@ 0x38
 8000580:	dcb2      	bgt.n	80004e8 <__aeabi_dadd+0x1ec>
 8000582:	2780      	movs	r7, #128	@ 0x80
 8000584:	043f      	lsls	r7, r7, #16
 8000586:	433b      	orrs	r3, r7
 8000588:	e79c      	b.n	80004c4 <__aeabi_dadd+0x1c8>
 800058a:	2600      	movs	r6, #0
 800058c:	2700      	movs	r7, #0
 800058e:	0524      	lsls	r4, r4, #20
 8000590:	4334      	orrs	r4, r6
 8000592:	07ed      	lsls	r5, r5, #31
 8000594:	432c      	orrs	r4, r5
 8000596:	0038      	movs	r0, r7
 8000598:	0021      	movs	r1, r4
 800059a:	b002      	add	sp, #8
 800059c:	bce0      	pop	{r5, r6, r7}
 800059e:	46ba      	mov	sl, r7
 80005a0:	46b1      	mov	r9, r6
 80005a2:	46a8      	mov	r8, r5
 80005a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a6:	077b      	lsls	r3, r7, #29
 80005a8:	d004      	beq.n	80005b4 <__aeabi_dadd+0x2b8>
 80005aa:	230f      	movs	r3, #15
 80005ac:	403b      	ands	r3, r7
 80005ae:	2b04      	cmp	r3, #4
 80005b0:	d000      	beq.n	80005b4 <__aeabi_dadd+0x2b8>
 80005b2:	e728      	b.n	8000406 <__aeabi_dadd+0x10a>
 80005b4:	08f8      	lsrs	r0, r7, #3
 80005b6:	4b34      	ldr	r3, [pc, #208]	@ (8000688 <__aeabi_dadd+0x38c>)
 80005b8:	0777      	lsls	r7, r6, #29
 80005ba:	4307      	orrs	r7, r0
 80005bc:	08f0      	lsrs	r0, r6, #3
 80005be:	429c      	cmp	r4, r3
 80005c0:	d000      	beq.n	80005c4 <__aeabi_dadd+0x2c8>
 80005c2:	e24a      	b.n	8000a5a <__aeabi_dadd+0x75e>
 80005c4:	003b      	movs	r3, r7
 80005c6:	4303      	orrs	r3, r0
 80005c8:	d059      	beq.n	800067e <__aeabi_dadd+0x382>
 80005ca:	2680      	movs	r6, #128	@ 0x80
 80005cc:	0336      	lsls	r6, r6, #12
 80005ce:	4306      	orrs	r6, r0
 80005d0:	0336      	lsls	r6, r6, #12
 80005d2:	4c2d      	ldr	r4, [pc, #180]	@ (8000688 <__aeabi_dadd+0x38c>)
 80005d4:	0b36      	lsrs	r6, r6, #12
 80005d6:	e7da      	b.n	800058e <__aeabi_dadd+0x292>
 80005d8:	2900      	cmp	r1, #0
 80005da:	d061      	beq.n	80006a0 <__aeabi_dadd+0x3a4>
 80005dc:	4641      	mov	r1, r8
 80005de:	1b09      	subs	r1, r1, r4
 80005e0:	2c00      	cmp	r4, #0
 80005e2:	d100      	bne.n	80005e6 <__aeabi_dadd+0x2ea>
 80005e4:	e0b9      	b.n	800075a <__aeabi_dadd+0x45e>
 80005e6:	4c28      	ldr	r4, [pc, #160]	@ (8000688 <__aeabi_dadd+0x38c>)
 80005e8:	45a0      	cmp	r8, r4
 80005ea:	d100      	bne.n	80005ee <__aeabi_dadd+0x2f2>
 80005ec:	e1a5      	b.n	800093a <__aeabi_dadd+0x63e>
 80005ee:	2701      	movs	r7, #1
 80005f0:	2938      	cmp	r1, #56	@ 0x38
 80005f2:	dc13      	bgt.n	800061c <__aeabi_dadd+0x320>
 80005f4:	2480      	movs	r4, #128	@ 0x80
 80005f6:	0424      	lsls	r4, r4, #16
 80005f8:	4326      	orrs	r6, r4
 80005fa:	291f      	cmp	r1, #31
 80005fc:	dd00      	ble.n	8000600 <__aeabi_dadd+0x304>
 80005fe:	e1c8      	b.n	8000992 <__aeabi_dadd+0x696>
 8000600:	2420      	movs	r4, #32
 8000602:	0037      	movs	r7, r6
 8000604:	4648      	mov	r0, r9
 8000606:	1a64      	subs	r4, r4, r1
 8000608:	40a7      	lsls	r7, r4
 800060a:	40c8      	lsrs	r0, r1
 800060c:	4307      	orrs	r7, r0
 800060e:	4648      	mov	r0, r9
 8000610:	40a0      	lsls	r0, r4
 8000612:	40ce      	lsrs	r6, r1
 8000614:	1e44      	subs	r4, r0, #1
 8000616:	41a0      	sbcs	r0, r4
 8000618:	199b      	adds	r3, r3, r6
 800061a:	4307      	orrs	r7, r0
 800061c:	18bf      	adds	r7, r7, r2
 800061e:	4297      	cmp	r7, r2
 8000620:	4192      	sbcs	r2, r2
 8000622:	4252      	negs	r2, r2
 8000624:	4644      	mov	r4, r8
 8000626:	18d6      	adds	r6, r2, r3
 8000628:	e763      	b.n	80004f2 <__aeabi_dadd+0x1f6>
 800062a:	0038      	movs	r0, r7
 800062c:	f001 fd00 	bl	8002030 <__clzsi2>
 8000630:	0003      	movs	r3, r0
 8000632:	3318      	adds	r3, #24
 8000634:	2b1f      	cmp	r3, #31
 8000636:	dc00      	bgt.n	800063a <__aeabi_dadd+0x33e>
 8000638:	e6bf      	b.n	80003ba <__aeabi_dadd+0xbe>
 800063a:	003a      	movs	r2, r7
 800063c:	3808      	subs	r0, #8
 800063e:	4082      	lsls	r2, r0
 8000640:	429c      	cmp	r4, r3
 8000642:	dd00      	ble.n	8000646 <__aeabi_dadd+0x34a>
 8000644:	e083      	b.n	800074e <__aeabi_dadd+0x452>
 8000646:	1b1b      	subs	r3, r3, r4
 8000648:	1c58      	adds	r0, r3, #1
 800064a:	281f      	cmp	r0, #31
 800064c:	dc00      	bgt.n	8000650 <__aeabi_dadd+0x354>
 800064e:	e1b4      	b.n	80009ba <__aeabi_dadd+0x6be>
 8000650:	0017      	movs	r7, r2
 8000652:	3b1f      	subs	r3, #31
 8000654:	40df      	lsrs	r7, r3
 8000656:	2820      	cmp	r0, #32
 8000658:	d005      	beq.n	8000666 <__aeabi_dadd+0x36a>
 800065a:	2340      	movs	r3, #64	@ 0x40
 800065c:	1a1b      	subs	r3, r3, r0
 800065e:	409a      	lsls	r2, r3
 8000660:	1e53      	subs	r3, r2, #1
 8000662:	419a      	sbcs	r2, r3
 8000664:	4317      	orrs	r7, r2
 8000666:	2400      	movs	r4, #0
 8000668:	2f00      	cmp	r7, #0
 800066a:	d00a      	beq.n	8000682 <__aeabi_dadd+0x386>
 800066c:	077b      	lsls	r3, r7, #29
 800066e:	d000      	beq.n	8000672 <__aeabi_dadd+0x376>
 8000670:	e6c4      	b.n	80003fc <__aeabi_dadd+0x100>
 8000672:	0026      	movs	r6, r4
 8000674:	e79e      	b.n	80005b4 <__aeabi_dadd+0x2b8>
 8000676:	464b      	mov	r3, r9
 8000678:	000c      	movs	r4, r1
 800067a:	08d8      	lsrs	r0, r3, #3
 800067c:	e79b      	b.n	80005b6 <__aeabi_dadd+0x2ba>
 800067e:	2700      	movs	r7, #0
 8000680:	4c01      	ldr	r4, [pc, #4]	@ (8000688 <__aeabi_dadd+0x38c>)
 8000682:	2600      	movs	r6, #0
 8000684:	e783      	b.n	800058e <__aeabi_dadd+0x292>
 8000686:	46c0      	nop			@ (mov r8, r8)
 8000688:	000007ff 	.word	0x000007ff
 800068c:	ff7fffff 	.word	0xff7fffff
 8000690:	000007fe 	.word	0x000007fe
 8000694:	464b      	mov	r3, r9
 8000696:	0777      	lsls	r7, r6, #29
 8000698:	08d8      	lsrs	r0, r3, #3
 800069a:	4307      	orrs	r7, r0
 800069c:	08f0      	lsrs	r0, r6, #3
 800069e:	e791      	b.n	80005c4 <__aeabi_dadd+0x2c8>
 80006a0:	4fcd      	ldr	r7, [pc, #820]	@ (80009d8 <__aeabi_dadd+0x6dc>)
 80006a2:	1c61      	adds	r1, r4, #1
 80006a4:	4239      	tst	r1, r7
 80006a6:	d16b      	bne.n	8000780 <__aeabi_dadd+0x484>
 80006a8:	0031      	movs	r1, r6
 80006aa:	4648      	mov	r0, r9
 80006ac:	4301      	orrs	r1, r0
 80006ae:	2c00      	cmp	r4, #0
 80006b0:	d000      	beq.n	80006b4 <__aeabi_dadd+0x3b8>
 80006b2:	e14b      	b.n	800094c <__aeabi_dadd+0x650>
 80006b4:	001f      	movs	r7, r3
 80006b6:	4317      	orrs	r7, r2
 80006b8:	2900      	cmp	r1, #0
 80006ba:	d100      	bne.n	80006be <__aeabi_dadd+0x3c2>
 80006bc:	e181      	b.n	80009c2 <__aeabi_dadd+0x6c6>
 80006be:	2f00      	cmp	r7, #0
 80006c0:	d100      	bne.n	80006c4 <__aeabi_dadd+0x3c8>
 80006c2:	e74c      	b.n	800055e <__aeabi_dadd+0x262>
 80006c4:	444a      	add	r2, r9
 80006c6:	454a      	cmp	r2, r9
 80006c8:	4180      	sbcs	r0, r0
 80006ca:	18f6      	adds	r6, r6, r3
 80006cc:	4240      	negs	r0, r0
 80006ce:	1836      	adds	r6, r6, r0
 80006d0:	0233      	lsls	r3, r6, #8
 80006d2:	d500      	bpl.n	80006d6 <__aeabi_dadd+0x3da>
 80006d4:	e1b0      	b.n	8000a38 <__aeabi_dadd+0x73c>
 80006d6:	0017      	movs	r7, r2
 80006d8:	4691      	mov	r9, r2
 80006da:	4337      	orrs	r7, r6
 80006dc:	d000      	beq.n	80006e0 <__aeabi_dadd+0x3e4>
 80006de:	e73e      	b.n	800055e <__aeabi_dadd+0x262>
 80006e0:	2600      	movs	r6, #0
 80006e2:	e754      	b.n	800058e <__aeabi_dadd+0x292>
 80006e4:	4649      	mov	r1, r9
 80006e6:	1a89      	subs	r1, r1, r2
 80006e8:	4688      	mov	r8, r1
 80006ea:	45c1      	cmp	r9, r8
 80006ec:	41bf      	sbcs	r7, r7
 80006ee:	1af1      	subs	r1, r6, r3
 80006f0:	427f      	negs	r7, r7
 80006f2:	1bc9      	subs	r1, r1, r7
 80006f4:	020f      	lsls	r7, r1, #8
 80006f6:	d461      	bmi.n	80007bc <__aeabi_dadd+0x4c0>
 80006f8:	4647      	mov	r7, r8
 80006fa:	430f      	orrs	r7, r1
 80006fc:	d100      	bne.n	8000700 <__aeabi_dadd+0x404>
 80006fe:	e0bd      	b.n	800087c <__aeabi_dadd+0x580>
 8000700:	000e      	movs	r6, r1
 8000702:	4647      	mov	r7, r8
 8000704:	e651      	b.n	80003aa <__aeabi_dadd+0xae>
 8000706:	4cb5      	ldr	r4, [pc, #724]	@ (80009dc <__aeabi_dadd+0x6e0>)
 8000708:	45a0      	cmp	r8, r4
 800070a:	d100      	bne.n	800070e <__aeabi_dadd+0x412>
 800070c:	e100      	b.n	8000910 <__aeabi_dadd+0x614>
 800070e:	2701      	movs	r7, #1
 8000710:	2938      	cmp	r1, #56	@ 0x38
 8000712:	dd00      	ble.n	8000716 <__aeabi_dadd+0x41a>
 8000714:	e6b8      	b.n	8000488 <__aeabi_dadd+0x18c>
 8000716:	2480      	movs	r4, #128	@ 0x80
 8000718:	0424      	lsls	r4, r4, #16
 800071a:	4326      	orrs	r6, r4
 800071c:	e6a3      	b.n	8000466 <__aeabi_dadd+0x16a>
 800071e:	4eb0      	ldr	r6, [pc, #704]	@ (80009e0 <__aeabi_dadd+0x6e4>)
 8000720:	1ae4      	subs	r4, r4, r3
 8000722:	4016      	ands	r6, r2
 8000724:	077b      	lsls	r3, r7, #29
 8000726:	d000      	beq.n	800072a <__aeabi_dadd+0x42e>
 8000728:	e73f      	b.n	80005aa <__aeabi_dadd+0x2ae>
 800072a:	e743      	b.n	80005b4 <__aeabi_dadd+0x2b8>
 800072c:	000f      	movs	r7, r1
 800072e:	0018      	movs	r0, r3
 8000730:	3f20      	subs	r7, #32
 8000732:	40f8      	lsrs	r0, r7
 8000734:	4684      	mov	ip, r0
 8000736:	2920      	cmp	r1, #32
 8000738:	d003      	beq.n	8000742 <__aeabi_dadd+0x446>
 800073a:	2740      	movs	r7, #64	@ 0x40
 800073c:	1a79      	subs	r1, r7, r1
 800073e:	408b      	lsls	r3, r1
 8000740:	431a      	orrs	r2, r3
 8000742:	1e53      	subs	r3, r2, #1
 8000744:	419a      	sbcs	r2, r3
 8000746:	4663      	mov	r3, ip
 8000748:	0017      	movs	r7, r2
 800074a:	431f      	orrs	r7, r3
 800074c:	e622      	b.n	8000394 <__aeabi_dadd+0x98>
 800074e:	48a4      	ldr	r0, [pc, #656]	@ (80009e0 <__aeabi_dadd+0x6e4>)
 8000750:	1ae1      	subs	r1, r4, r3
 8000752:	4010      	ands	r0, r2
 8000754:	0747      	lsls	r7, r0, #29
 8000756:	08c0      	lsrs	r0, r0, #3
 8000758:	e707      	b.n	800056a <__aeabi_dadd+0x26e>
 800075a:	0034      	movs	r4, r6
 800075c:	4648      	mov	r0, r9
 800075e:	4304      	orrs	r4, r0
 8000760:	d100      	bne.n	8000764 <__aeabi_dadd+0x468>
 8000762:	e0fa      	b.n	800095a <__aeabi_dadd+0x65e>
 8000764:	1e4c      	subs	r4, r1, #1
 8000766:	2901      	cmp	r1, #1
 8000768:	d100      	bne.n	800076c <__aeabi_dadd+0x470>
 800076a:	e0d7      	b.n	800091c <__aeabi_dadd+0x620>
 800076c:	4f9b      	ldr	r7, [pc, #620]	@ (80009dc <__aeabi_dadd+0x6e0>)
 800076e:	42b9      	cmp	r1, r7
 8000770:	d100      	bne.n	8000774 <__aeabi_dadd+0x478>
 8000772:	e0e2      	b.n	800093a <__aeabi_dadd+0x63e>
 8000774:	2701      	movs	r7, #1
 8000776:	2c38      	cmp	r4, #56	@ 0x38
 8000778:	dd00      	ble.n	800077c <__aeabi_dadd+0x480>
 800077a:	e74f      	b.n	800061c <__aeabi_dadd+0x320>
 800077c:	0021      	movs	r1, r4
 800077e:	e73c      	b.n	80005fa <__aeabi_dadd+0x2fe>
 8000780:	4c96      	ldr	r4, [pc, #600]	@ (80009dc <__aeabi_dadd+0x6e0>)
 8000782:	42a1      	cmp	r1, r4
 8000784:	d100      	bne.n	8000788 <__aeabi_dadd+0x48c>
 8000786:	e0dd      	b.n	8000944 <__aeabi_dadd+0x648>
 8000788:	444a      	add	r2, r9
 800078a:	454a      	cmp	r2, r9
 800078c:	4180      	sbcs	r0, r0
 800078e:	18f3      	adds	r3, r6, r3
 8000790:	4240      	negs	r0, r0
 8000792:	1818      	adds	r0, r3, r0
 8000794:	07c7      	lsls	r7, r0, #31
 8000796:	0852      	lsrs	r2, r2, #1
 8000798:	4317      	orrs	r7, r2
 800079a:	0846      	lsrs	r6, r0, #1
 800079c:	0752      	lsls	r2, r2, #29
 800079e:	d005      	beq.n	80007ac <__aeabi_dadd+0x4b0>
 80007a0:	220f      	movs	r2, #15
 80007a2:	000c      	movs	r4, r1
 80007a4:	403a      	ands	r2, r7
 80007a6:	2a04      	cmp	r2, #4
 80007a8:	d000      	beq.n	80007ac <__aeabi_dadd+0x4b0>
 80007aa:	e62c      	b.n	8000406 <__aeabi_dadd+0x10a>
 80007ac:	0776      	lsls	r6, r6, #29
 80007ae:	08ff      	lsrs	r7, r7, #3
 80007b0:	4337      	orrs	r7, r6
 80007b2:	0900      	lsrs	r0, r0, #4
 80007b4:	e6d9      	b.n	800056a <__aeabi_dadd+0x26e>
 80007b6:	2700      	movs	r7, #0
 80007b8:	2600      	movs	r6, #0
 80007ba:	e6e8      	b.n	800058e <__aeabi_dadd+0x292>
 80007bc:	4649      	mov	r1, r9
 80007be:	1a57      	subs	r7, r2, r1
 80007c0:	42ba      	cmp	r2, r7
 80007c2:	4192      	sbcs	r2, r2
 80007c4:	1b9e      	subs	r6, r3, r6
 80007c6:	4252      	negs	r2, r2
 80007c8:	4665      	mov	r5, ip
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	e5ed      	b.n	80003aa <__aeabi_dadd+0xae>
 80007ce:	2900      	cmp	r1, #0
 80007d0:	d000      	beq.n	80007d4 <__aeabi_dadd+0x4d8>
 80007d2:	e0c6      	b.n	8000962 <__aeabi_dadd+0x666>
 80007d4:	2f00      	cmp	r7, #0
 80007d6:	d167      	bne.n	80008a8 <__aeabi_dadd+0x5ac>
 80007d8:	2680      	movs	r6, #128	@ 0x80
 80007da:	2500      	movs	r5, #0
 80007dc:	4c7f      	ldr	r4, [pc, #508]	@ (80009dc <__aeabi_dadd+0x6e0>)
 80007de:	0336      	lsls	r6, r6, #12
 80007e0:	e6d5      	b.n	800058e <__aeabi_dadd+0x292>
 80007e2:	4665      	mov	r5, ip
 80007e4:	000c      	movs	r4, r1
 80007e6:	001e      	movs	r6, r3
 80007e8:	08d0      	lsrs	r0, r2, #3
 80007ea:	e6e4      	b.n	80005b6 <__aeabi_dadd+0x2ba>
 80007ec:	444a      	add	r2, r9
 80007ee:	454a      	cmp	r2, r9
 80007f0:	4180      	sbcs	r0, r0
 80007f2:	18f3      	adds	r3, r6, r3
 80007f4:	4240      	negs	r0, r0
 80007f6:	1818      	adds	r0, r3, r0
 80007f8:	0011      	movs	r1, r2
 80007fa:	0203      	lsls	r3, r0, #8
 80007fc:	d400      	bmi.n	8000800 <__aeabi_dadd+0x504>
 80007fe:	e096      	b.n	800092e <__aeabi_dadd+0x632>
 8000800:	4b77      	ldr	r3, [pc, #476]	@ (80009e0 <__aeabi_dadd+0x6e4>)
 8000802:	0849      	lsrs	r1, r1, #1
 8000804:	4018      	ands	r0, r3
 8000806:	07c3      	lsls	r3, r0, #31
 8000808:	430b      	orrs	r3, r1
 800080a:	0844      	lsrs	r4, r0, #1
 800080c:	0749      	lsls	r1, r1, #29
 800080e:	d100      	bne.n	8000812 <__aeabi_dadd+0x516>
 8000810:	e129      	b.n	8000a66 <__aeabi_dadd+0x76a>
 8000812:	220f      	movs	r2, #15
 8000814:	401a      	ands	r2, r3
 8000816:	2a04      	cmp	r2, #4
 8000818:	d100      	bne.n	800081c <__aeabi_dadd+0x520>
 800081a:	e0ea      	b.n	80009f2 <__aeabi_dadd+0x6f6>
 800081c:	1d1f      	adds	r7, r3, #4
 800081e:	429f      	cmp	r7, r3
 8000820:	41b6      	sbcs	r6, r6
 8000822:	4276      	negs	r6, r6
 8000824:	1936      	adds	r6, r6, r4
 8000826:	2402      	movs	r4, #2
 8000828:	e6c4      	b.n	80005b4 <__aeabi_dadd+0x2b8>
 800082a:	4649      	mov	r1, r9
 800082c:	1a8f      	subs	r7, r1, r2
 800082e:	45b9      	cmp	r9, r7
 8000830:	4180      	sbcs	r0, r0
 8000832:	1af6      	subs	r6, r6, r3
 8000834:	4240      	negs	r0, r0
 8000836:	1a36      	subs	r6, r6, r0
 8000838:	0233      	lsls	r3, r6, #8
 800083a:	d406      	bmi.n	800084a <__aeabi_dadd+0x54e>
 800083c:	0773      	lsls	r3, r6, #29
 800083e:	08ff      	lsrs	r7, r7, #3
 8000840:	2101      	movs	r1, #1
 8000842:	431f      	orrs	r7, r3
 8000844:	08f0      	lsrs	r0, r6, #3
 8000846:	e690      	b.n	800056a <__aeabi_dadd+0x26e>
 8000848:	4665      	mov	r5, ip
 800084a:	2401      	movs	r4, #1
 800084c:	e5ab      	b.n	80003a6 <__aeabi_dadd+0xaa>
 800084e:	464b      	mov	r3, r9
 8000850:	0777      	lsls	r7, r6, #29
 8000852:	08d8      	lsrs	r0, r3, #3
 8000854:	4307      	orrs	r7, r0
 8000856:	08f0      	lsrs	r0, r6, #3
 8000858:	e6b4      	b.n	80005c4 <__aeabi_dadd+0x2c8>
 800085a:	000f      	movs	r7, r1
 800085c:	0018      	movs	r0, r3
 800085e:	3f20      	subs	r7, #32
 8000860:	40f8      	lsrs	r0, r7
 8000862:	4684      	mov	ip, r0
 8000864:	2920      	cmp	r1, #32
 8000866:	d003      	beq.n	8000870 <__aeabi_dadd+0x574>
 8000868:	2740      	movs	r7, #64	@ 0x40
 800086a:	1a79      	subs	r1, r7, r1
 800086c:	408b      	lsls	r3, r1
 800086e:	431a      	orrs	r2, r3
 8000870:	1e53      	subs	r3, r2, #1
 8000872:	419a      	sbcs	r2, r3
 8000874:	4663      	mov	r3, ip
 8000876:	0017      	movs	r7, r2
 8000878:	431f      	orrs	r7, r3
 800087a:	e635      	b.n	80004e8 <__aeabi_dadd+0x1ec>
 800087c:	2500      	movs	r5, #0
 800087e:	2400      	movs	r4, #0
 8000880:	2600      	movs	r6, #0
 8000882:	e684      	b.n	800058e <__aeabi_dadd+0x292>
 8000884:	000c      	movs	r4, r1
 8000886:	0035      	movs	r5, r6
 8000888:	3c20      	subs	r4, #32
 800088a:	40e5      	lsrs	r5, r4
 800088c:	2920      	cmp	r1, #32
 800088e:	d005      	beq.n	800089c <__aeabi_dadd+0x5a0>
 8000890:	2440      	movs	r4, #64	@ 0x40
 8000892:	1a61      	subs	r1, r4, r1
 8000894:	408e      	lsls	r6, r1
 8000896:	4649      	mov	r1, r9
 8000898:	4331      	orrs	r1, r6
 800089a:	4689      	mov	r9, r1
 800089c:	4648      	mov	r0, r9
 800089e:	1e41      	subs	r1, r0, #1
 80008a0:	4188      	sbcs	r0, r1
 80008a2:	0007      	movs	r7, r0
 80008a4:	432f      	orrs	r7, r5
 80008a6:	e5ef      	b.n	8000488 <__aeabi_dadd+0x18c>
 80008a8:	08d2      	lsrs	r2, r2, #3
 80008aa:	075f      	lsls	r7, r3, #29
 80008ac:	4665      	mov	r5, ip
 80008ae:	4317      	orrs	r7, r2
 80008b0:	08d8      	lsrs	r0, r3, #3
 80008b2:	e687      	b.n	80005c4 <__aeabi_dadd+0x2c8>
 80008b4:	1a17      	subs	r7, r2, r0
 80008b6:	42ba      	cmp	r2, r7
 80008b8:	4192      	sbcs	r2, r2
 80008ba:	1b9e      	subs	r6, r3, r6
 80008bc:	4252      	negs	r2, r2
 80008be:	1ab6      	subs	r6, r6, r2
 80008c0:	0233      	lsls	r3, r6, #8
 80008c2:	d4c1      	bmi.n	8000848 <__aeabi_dadd+0x54c>
 80008c4:	0773      	lsls	r3, r6, #29
 80008c6:	08ff      	lsrs	r7, r7, #3
 80008c8:	4665      	mov	r5, ip
 80008ca:	2101      	movs	r1, #1
 80008cc:	431f      	orrs	r7, r3
 80008ce:	08f0      	lsrs	r0, r6, #3
 80008d0:	e64b      	b.n	800056a <__aeabi_dadd+0x26e>
 80008d2:	2f00      	cmp	r7, #0
 80008d4:	d07b      	beq.n	80009ce <__aeabi_dadd+0x6d2>
 80008d6:	4665      	mov	r5, ip
 80008d8:	001e      	movs	r6, r3
 80008da:	4691      	mov	r9, r2
 80008dc:	e63f      	b.n	800055e <__aeabi_dadd+0x262>
 80008de:	1a81      	subs	r1, r0, r2
 80008e0:	4688      	mov	r8, r1
 80008e2:	45c1      	cmp	r9, r8
 80008e4:	41a4      	sbcs	r4, r4
 80008e6:	1af1      	subs	r1, r6, r3
 80008e8:	4264      	negs	r4, r4
 80008ea:	1b09      	subs	r1, r1, r4
 80008ec:	2480      	movs	r4, #128	@ 0x80
 80008ee:	0424      	lsls	r4, r4, #16
 80008f0:	4221      	tst	r1, r4
 80008f2:	d077      	beq.n	80009e4 <__aeabi_dadd+0x6e8>
 80008f4:	1a10      	subs	r0, r2, r0
 80008f6:	4282      	cmp	r2, r0
 80008f8:	4192      	sbcs	r2, r2
 80008fa:	0007      	movs	r7, r0
 80008fc:	1b9e      	subs	r6, r3, r6
 80008fe:	4252      	negs	r2, r2
 8000900:	1ab6      	subs	r6, r6, r2
 8000902:	4337      	orrs	r7, r6
 8000904:	d000      	beq.n	8000908 <__aeabi_dadd+0x60c>
 8000906:	e0a0      	b.n	8000a4a <__aeabi_dadd+0x74e>
 8000908:	4665      	mov	r5, ip
 800090a:	2400      	movs	r4, #0
 800090c:	2600      	movs	r6, #0
 800090e:	e63e      	b.n	800058e <__aeabi_dadd+0x292>
 8000910:	075f      	lsls	r7, r3, #29
 8000912:	08d2      	lsrs	r2, r2, #3
 8000914:	4665      	mov	r5, ip
 8000916:	4317      	orrs	r7, r2
 8000918:	08d8      	lsrs	r0, r3, #3
 800091a:	e653      	b.n	80005c4 <__aeabi_dadd+0x2c8>
 800091c:	1881      	adds	r1, r0, r2
 800091e:	4291      	cmp	r1, r2
 8000920:	4192      	sbcs	r2, r2
 8000922:	18f0      	adds	r0, r6, r3
 8000924:	4252      	negs	r2, r2
 8000926:	1880      	adds	r0, r0, r2
 8000928:	0203      	lsls	r3, r0, #8
 800092a:	d500      	bpl.n	800092e <__aeabi_dadd+0x632>
 800092c:	e768      	b.n	8000800 <__aeabi_dadd+0x504>
 800092e:	0747      	lsls	r7, r0, #29
 8000930:	08c9      	lsrs	r1, r1, #3
 8000932:	430f      	orrs	r7, r1
 8000934:	08c0      	lsrs	r0, r0, #3
 8000936:	2101      	movs	r1, #1
 8000938:	e617      	b.n	800056a <__aeabi_dadd+0x26e>
 800093a:	08d2      	lsrs	r2, r2, #3
 800093c:	075f      	lsls	r7, r3, #29
 800093e:	4317      	orrs	r7, r2
 8000940:	08d8      	lsrs	r0, r3, #3
 8000942:	e63f      	b.n	80005c4 <__aeabi_dadd+0x2c8>
 8000944:	000c      	movs	r4, r1
 8000946:	2600      	movs	r6, #0
 8000948:	2700      	movs	r7, #0
 800094a:	e620      	b.n	800058e <__aeabi_dadd+0x292>
 800094c:	2900      	cmp	r1, #0
 800094e:	d156      	bne.n	80009fe <__aeabi_dadd+0x702>
 8000950:	075f      	lsls	r7, r3, #29
 8000952:	08d2      	lsrs	r2, r2, #3
 8000954:	4317      	orrs	r7, r2
 8000956:	08d8      	lsrs	r0, r3, #3
 8000958:	e634      	b.n	80005c4 <__aeabi_dadd+0x2c8>
 800095a:	000c      	movs	r4, r1
 800095c:	001e      	movs	r6, r3
 800095e:	08d0      	lsrs	r0, r2, #3
 8000960:	e629      	b.n	80005b6 <__aeabi_dadd+0x2ba>
 8000962:	08c1      	lsrs	r1, r0, #3
 8000964:	0770      	lsls	r0, r6, #29
 8000966:	4301      	orrs	r1, r0
 8000968:	08f0      	lsrs	r0, r6, #3
 800096a:	2f00      	cmp	r7, #0
 800096c:	d062      	beq.n	8000a34 <__aeabi_dadd+0x738>
 800096e:	2480      	movs	r4, #128	@ 0x80
 8000970:	0324      	lsls	r4, r4, #12
 8000972:	4220      	tst	r0, r4
 8000974:	d007      	beq.n	8000986 <__aeabi_dadd+0x68a>
 8000976:	08de      	lsrs	r6, r3, #3
 8000978:	4226      	tst	r6, r4
 800097a:	d104      	bne.n	8000986 <__aeabi_dadd+0x68a>
 800097c:	4665      	mov	r5, ip
 800097e:	0030      	movs	r0, r6
 8000980:	08d1      	lsrs	r1, r2, #3
 8000982:	075b      	lsls	r3, r3, #29
 8000984:	4319      	orrs	r1, r3
 8000986:	0f4f      	lsrs	r7, r1, #29
 8000988:	00c9      	lsls	r1, r1, #3
 800098a:	08c9      	lsrs	r1, r1, #3
 800098c:	077f      	lsls	r7, r7, #29
 800098e:	430f      	orrs	r7, r1
 8000990:	e618      	b.n	80005c4 <__aeabi_dadd+0x2c8>
 8000992:	000c      	movs	r4, r1
 8000994:	0030      	movs	r0, r6
 8000996:	3c20      	subs	r4, #32
 8000998:	40e0      	lsrs	r0, r4
 800099a:	4684      	mov	ip, r0
 800099c:	2920      	cmp	r1, #32
 800099e:	d005      	beq.n	80009ac <__aeabi_dadd+0x6b0>
 80009a0:	2440      	movs	r4, #64	@ 0x40
 80009a2:	1a61      	subs	r1, r4, r1
 80009a4:	408e      	lsls	r6, r1
 80009a6:	4649      	mov	r1, r9
 80009a8:	4331      	orrs	r1, r6
 80009aa:	4689      	mov	r9, r1
 80009ac:	4648      	mov	r0, r9
 80009ae:	1e41      	subs	r1, r0, #1
 80009b0:	4188      	sbcs	r0, r1
 80009b2:	4661      	mov	r1, ip
 80009b4:	0007      	movs	r7, r0
 80009b6:	430f      	orrs	r7, r1
 80009b8:	e630      	b.n	800061c <__aeabi_dadd+0x320>
 80009ba:	2120      	movs	r1, #32
 80009bc:	2700      	movs	r7, #0
 80009be:	1a09      	subs	r1, r1, r0
 80009c0:	e50e      	b.n	80003e0 <__aeabi_dadd+0xe4>
 80009c2:	001e      	movs	r6, r3
 80009c4:	2f00      	cmp	r7, #0
 80009c6:	d000      	beq.n	80009ca <__aeabi_dadd+0x6ce>
 80009c8:	e522      	b.n	8000410 <__aeabi_dadd+0x114>
 80009ca:	2400      	movs	r4, #0
 80009cc:	e758      	b.n	8000880 <__aeabi_dadd+0x584>
 80009ce:	2500      	movs	r5, #0
 80009d0:	2400      	movs	r4, #0
 80009d2:	2600      	movs	r6, #0
 80009d4:	e5db      	b.n	800058e <__aeabi_dadd+0x292>
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	000007fe 	.word	0x000007fe
 80009dc:	000007ff 	.word	0x000007ff
 80009e0:	ff7fffff 	.word	0xff7fffff
 80009e4:	4647      	mov	r7, r8
 80009e6:	430f      	orrs	r7, r1
 80009e8:	d100      	bne.n	80009ec <__aeabi_dadd+0x6f0>
 80009ea:	e747      	b.n	800087c <__aeabi_dadd+0x580>
 80009ec:	000e      	movs	r6, r1
 80009ee:	46c1      	mov	r9, r8
 80009f0:	e5b5      	b.n	800055e <__aeabi_dadd+0x262>
 80009f2:	08df      	lsrs	r7, r3, #3
 80009f4:	0764      	lsls	r4, r4, #29
 80009f6:	2102      	movs	r1, #2
 80009f8:	4327      	orrs	r7, r4
 80009fa:	0900      	lsrs	r0, r0, #4
 80009fc:	e5b5      	b.n	800056a <__aeabi_dadd+0x26e>
 80009fe:	0019      	movs	r1, r3
 8000a00:	08c0      	lsrs	r0, r0, #3
 8000a02:	0777      	lsls	r7, r6, #29
 8000a04:	4307      	orrs	r7, r0
 8000a06:	4311      	orrs	r1, r2
 8000a08:	08f0      	lsrs	r0, r6, #3
 8000a0a:	2900      	cmp	r1, #0
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_dadd+0x714>
 8000a0e:	e5d9      	b.n	80005c4 <__aeabi_dadd+0x2c8>
 8000a10:	2180      	movs	r1, #128	@ 0x80
 8000a12:	0309      	lsls	r1, r1, #12
 8000a14:	4208      	tst	r0, r1
 8000a16:	d007      	beq.n	8000a28 <__aeabi_dadd+0x72c>
 8000a18:	08dc      	lsrs	r4, r3, #3
 8000a1a:	420c      	tst	r4, r1
 8000a1c:	d104      	bne.n	8000a28 <__aeabi_dadd+0x72c>
 8000a1e:	08d2      	lsrs	r2, r2, #3
 8000a20:	075b      	lsls	r3, r3, #29
 8000a22:	431a      	orrs	r2, r3
 8000a24:	0017      	movs	r7, r2
 8000a26:	0020      	movs	r0, r4
 8000a28:	0f7b      	lsrs	r3, r7, #29
 8000a2a:	00ff      	lsls	r7, r7, #3
 8000a2c:	08ff      	lsrs	r7, r7, #3
 8000a2e:	075b      	lsls	r3, r3, #29
 8000a30:	431f      	orrs	r7, r3
 8000a32:	e5c7      	b.n	80005c4 <__aeabi_dadd+0x2c8>
 8000a34:	000f      	movs	r7, r1
 8000a36:	e5c5      	b.n	80005c4 <__aeabi_dadd+0x2c8>
 8000a38:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <__aeabi_dadd+0x788>)
 8000a3a:	08d2      	lsrs	r2, r2, #3
 8000a3c:	4033      	ands	r3, r6
 8000a3e:	075f      	lsls	r7, r3, #29
 8000a40:	025b      	lsls	r3, r3, #9
 8000a42:	2401      	movs	r4, #1
 8000a44:	4317      	orrs	r7, r2
 8000a46:	0b1e      	lsrs	r6, r3, #12
 8000a48:	e5a1      	b.n	800058e <__aeabi_dadd+0x292>
 8000a4a:	4226      	tst	r6, r4
 8000a4c:	d012      	beq.n	8000a74 <__aeabi_dadd+0x778>
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a84 <__aeabi_dadd+0x788>)
 8000a50:	4665      	mov	r5, ip
 8000a52:	0002      	movs	r2, r0
 8000a54:	2401      	movs	r4, #1
 8000a56:	401e      	ands	r6, r3
 8000a58:	e4e6      	b.n	8000428 <__aeabi_dadd+0x12c>
 8000a5a:	0021      	movs	r1, r4
 8000a5c:	e585      	b.n	800056a <__aeabi_dadd+0x26e>
 8000a5e:	0017      	movs	r7, r2
 8000a60:	e5a8      	b.n	80005b4 <__aeabi_dadd+0x2b8>
 8000a62:	003a      	movs	r2, r7
 8000a64:	e4d4      	b.n	8000410 <__aeabi_dadd+0x114>
 8000a66:	08db      	lsrs	r3, r3, #3
 8000a68:	0764      	lsls	r4, r4, #29
 8000a6a:	431c      	orrs	r4, r3
 8000a6c:	0027      	movs	r7, r4
 8000a6e:	2102      	movs	r1, #2
 8000a70:	0900      	lsrs	r0, r0, #4
 8000a72:	e57a      	b.n	800056a <__aeabi_dadd+0x26e>
 8000a74:	08c0      	lsrs	r0, r0, #3
 8000a76:	0777      	lsls	r7, r6, #29
 8000a78:	4307      	orrs	r7, r0
 8000a7a:	4665      	mov	r5, ip
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	08f0      	lsrs	r0, r6, #3
 8000a80:	e573      	b.n	800056a <__aeabi_dadd+0x26e>
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	ff7fffff 	.word	0xff7fffff

08000a88 <__aeabi_ddiv>:
 8000a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a8a:	46de      	mov	lr, fp
 8000a8c:	4645      	mov	r5, r8
 8000a8e:	4657      	mov	r7, sl
 8000a90:	464e      	mov	r6, r9
 8000a92:	b5e0      	push	{r5, r6, r7, lr}
 8000a94:	b087      	sub	sp, #28
 8000a96:	9200      	str	r2, [sp, #0]
 8000a98:	9301      	str	r3, [sp, #4]
 8000a9a:	030b      	lsls	r3, r1, #12
 8000a9c:	0b1b      	lsrs	r3, r3, #12
 8000a9e:	469b      	mov	fp, r3
 8000aa0:	0fca      	lsrs	r2, r1, #31
 8000aa2:	004b      	lsls	r3, r1, #1
 8000aa4:	0004      	movs	r4, r0
 8000aa6:	4680      	mov	r8, r0
 8000aa8:	0d5b      	lsrs	r3, r3, #21
 8000aaa:	9202      	str	r2, [sp, #8]
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_ddiv+0x28>
 8000aae:	e098      	b.n	8000be2 <__aeabi_ddiv+0x15a>
 8000ab0:	4a7c      	ldr	r2, [pc, #496]	@ (8000ca4 <__aeabi_ddiv+0x21c>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d037      	beq.n	8000b26 <__aeabi_ddiv+0x9e>
 8000ab6:	4659      	mov	r1, fp
 8000ab8:	0f42      	lsrs	r2, r0, #29
 8000aba:	00c9      	lsls	r1, r1, #3
 8000abc:	430a      	orrs	r2, r1
 8000abe:	2180      	movs	r1, #128	@ 0x80
 8000ac0:	0409      	lsls	r1, r1, #16
 8000ac2:	4311      	orrs	r1, r2
 8000ac4:	00c2      	lsls	r2, r0, #3
 8000ac6:	4690      	mov	r8, r2
 8000ac8:	4a77      	ldr	r2, [pc, #476]	@ (8000ca8 <__aeabi_ddiv+0x220>)
 8000aca:	4689      	mov	r9, r1
 8000acc:	4692      	mov	sl, r2
 8000ace:	449a      	add	sl, r3
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	2400      	movs	r4, #0
 8000ad4:	9303      	str	r3, [sp, #12]
 8000ad6:	9e00      	ldr	r6, [sp, #0]
 8000ad8:	9f01      	ldr	r7, [sp, #4]
 8000ada:	033b      	lsls	r3, r7, #12
 8000adc:	0b1b      	lsrs	r3, r3, #12
 8000ade:	469b      	mov	fp, r3
 8000ae0:	007b      	lsls	r3, r7, #1
 8000ae2:	0030      	movs	r0, r6
 8000ae4:	0d5b      	lsrs	r3, r3, #21
 8000ae6:	0ffd      	lsrs	r5, r7, #31
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d059      	beq.n	8000ba0 <__aeabi_ddiv+0x118>
 8000aec:	4a6d      	ldr	r2, [pc, #436]	@ (8000ca4 <__aeabi_ddiv+0x21c>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d048      	beq.n	8000b84 <__aeabi_ddiv+0xfc>
 8000af2:	4659      	mov	r1, fp
 8000af4:	0f72      	lsrs	r2, r6, #29
 8000af6:	00c9      	lsls	r1, r1, #3
 8000af8:	430a      	orrs	r2, r1
 8000afa:	2180      	movs	r1, #128	@ 0x80
 8000afc:	0409      	lsls	r1, r1, #16
 8000afe:	4311      	orrs	r1, r2
 8000b00:	468b      	mov	fp, r1
 8000b02:	4969      	ldr	r1, [pc, #420]	@ (8000ca8 <__aeabi_ddiv+0x220>)
 8000b04:	00f2      	lsls	r2, r6, #3
 8000b06:	468c      	mov	ip, r1
 8000b08:	4651      	mov	r1, sl
 8000b0a:	4463      	add	r3, ip
 8000b0c:	1acb      	subs	r3, r1, r3
 8000b0e:	469a      	mov	sl, r3
 8000b10:	2100      	movs	r1, #0
 8000b12:	9e02      	ldr	r6, [sp, #8]
 8000b14:	406e      	eors	r6, r5
 8000b16:	b2f6      	uxtb	r6, r6
 8000b18:	2c0f      	cmp	r4, #15
 8000b1a:	d900      	bls.n	8000b1e <__aeabi_ddiv+0x96>
 8000b1c:	e0ce      	b.n	8000cbc <__aeabi_ddiv+0x234>
 8000b1e:	4b63      	ldr	r3, [pc, #396]	@ (8000cac <__aeabi_ddiv+0x224>)
 8000b20:	00a4      	lsls	r4, r4, #2
 8000b22:	591b      	ldr	r3, [r3, r4]
 8000b24:	469f      	mov	pc, r3
 8000b26:	465a      	mov	r2, fp
 8000b28:	4302      	orrs	r2, r0
 8000b2a:	4691      	mov	r9, r2
 8000b2c:	d000      	beq.n	8000b30 <__aeabi_ddiv+0xa8>
 8000b2e:	e090      	b.n	8000c52 <__aeabi_ddiv+0x1ca>
 8000b30:	469a      	mov	sl, r3
 8000b32:	2302      	movs	r3, #2
 8000b34:	4690      	mov	r8, r2
 8000b36:	2408      	movs	r4, #8
 8000b38:	9303      	str	r3, [sp, #12]
 8000b3a:	e7cc      	b.n	8000ad6 <__aeabi_ddiv+0x4e>
 8000b3c:	46cb      	mov	fp, r9
 8000b3e:	4642      	mov	r2, r8
 8000b40:	9d02      	ldr	r5, [sp, #8]
 8000b42:	9903      	ldr	r1, [sp, #12]
 8000b44:	2902      	cmp	r1, #2
 8000b46:	d100      	bne.n	8000b4a <__aeabi_ddiv+0xc2>
 8000b48:	e1de      	b.n	8000f08 <__aeabi_ddiv+0x480>
 8000b4a:	2903      	cmp	r1, #3
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_ddiv+0xc8>
 8000b4e:	e08d      	b.n	8000c6c <__aeabi_ddiv+0x1e4>
 8000b50:	2901      	cmp	r1, #1
 8000b52:	d000      	beq.n	8000b56 <__aeabi_ddiv+0xce>
 8000b54:	e179      	b.n	8000e4a <__aeabi_ddiv+0x3c2>
 8000b56:	002e      	movs	r6, r5
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	2400      	movs	r4, #0
 8000b5e:	4690      	mov	r8, r2
 8000b60:	051b      	lsls	r3, r3, #20
 8000b62:	4323      	orrs	r3, r4
 8000b64:	07f6      	lsls	r6, r6, #31
 8000b66:	4333      	orrs	r3, r6
 8000b68:	4640      	mov	r0, r8
 8000b6a:	0019      	movs	r1, r3
 8000b6c:	b007      	add	sp, #28
 8000b6e:	bcf0      	pop	{r4, r5, r6, r7}
 8000b70:	46bb      	mov	fp, r7
 8000b72:	46b2      	mov	sl, r6
 8000b74:	46a9      	mov	r9, r5
 8000b76:	46a0      	mov	r8, r4
 8000b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2400      	movs	r4, #0
 8000b7e:	4690      	mov	r8, r2
 8000b80:	4b48      	ldr	r3, [pc, #288]	@ (8000ca4 <__aeabi_ddiv+0x21c>)
 8000b82:	e7ed      	b.n	8000b60 <__aeabi_ddiv+0xd8>
 8000b84:	465a      	mov	r2, fp
 8000b86:	9b00      	ldr	r3, [sp, #0]
 8000b88:	431a      	orrs	r2, r3
 8000b8a:	4b49      	ldr	r3, [pc, #292]	@ (8000cb0 <__aeabi_ddiv+0x228>)
 8000b8c:	469c      	mov	ip, r3
 8000b8e:	44e2      	add	sl, ip
 8000b90:	2a00      	cmp	r2, #0
 8000b92:	d159      	bne.n	8000c48 <__aeabi_ddiv+0x1c0>
 8000b94:	2302      	movs	r3, #2
 8000b96:	431c      	orrs	r4, r3
 8000b98:	2300      	movs	r3, #0
 8000b9a:	2102      	movs	r1, #2
 8000b9c:	469b      	mov	fp, r3
 8000b9e:	e7b8      	b.n	8000b12 <__aeabi_ddiv+0x8a>
 8000ba0:	465a      	mov	r2, fp
 8000ba2:	9b00      	ldr	r3, [sp, #0]
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	d049      	beq.n	8000c3c <__aeabi_ddiv+0x1b4>
 8000ba8:	465b      	mov	r3, fp
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d100      	bne.n	8000bb0 <__aeabi_ddiv+0x128>
 8000bae:	e19c      	b.n	8000eea <__aeabi_ddiv+0x462>
 8000bb0:	4658      	mov	r0, fp
 8000bb2:	f001 fa3d 	bl	8002030 <__clzsi2>
 8000bb6:	0002      	movs	r2, r0
 8000bb8:	0003      	movs	r3, r0
 8000bba:	3a0b      	subs	r2, #11
 8000bbc:	271d      	movs	r7, #29
 8000bbe:	9e00      	ldr	r6, [sp, #0]
 8000bc0:	1aba      	subs	r2, r7, r2
 8000bc2:	0019      	movs	r1, r3
 8000bc4:	4658      	mov	r0, fp
 8000bc6:	40d6      	lsrs	r6, r2
 8000bc8:	3908      	subs	r1, #8
 8000bca:	4088      	lsls	r0, r1
 8000bcc:	0032      	movs	r2, r6
 8000bce:	4302      	orrs	r2, r0
 8000bd0:	4693      	mov	fp, r2
 8000bd2:	9a00      	ldr	r2, [sp, #0]
 8000bd4:	408a      	lsls	r2, r1
 8000bd6:	4937      	ldr	r1, [pc, #220]	@ (8000cb4 <__aeabi_ddiv+0x22c>)
 8000bd8:	4453      	add	r3, sl
 8000bda:	468a      	mov	sl, r1
 8000bdc:	2100      	movs	r1, #0
 8000bde:	449a      	add	sl, r3
 8000be0:	e797      	b.n	8000b12 <__aeabi_ddiv+0x8a>
 8000be2:	465b      	mov	r3, fp
 8000be4:	4303      	orrs	r3, r0
 8000be6:	4699      	mov	r9, r3
 8000be8:	d021      	beq.n	8000c2e <__aeabi_ddiv+0x1a6>
 8000bea:	465b      	mov	r3, fp
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_ddiv+0x16a>
 8000bf0:	e169      	b.n	8000ec6 <__aeabi_ddiv+0x43e>
 8000bf2:	4658      	mov	r0, fp
 8000bf4:	f001 fa1c 	bl	8002030 <__clzsi2>
 8000bf8:	230b      	movs	r3, #11
 8000bfa:	425b      	negs	r3, r3
 8000bfc:	469c      	mov	ip, r3
 8000bfe:	0002      	movs	r2, r0
 8000c00:	4484      	add	ip, r0
 8000c02:	4666      	mov	r6, ip
 8000c04:	231d      	movs	r3, #29
 8000c06:	1b9b      	subs	r3, r3, r6
 8000c08:	0026      	movs	r6, r4
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	4658      	mov	r0, fp
 8000c0e:	40de      	lsrs	r6, r3
 8000c10:	3908      	subs	r1, #8
 8000c12:	4088      	lsls	r0, r1
 8000c14:	0033      	movs	r3, r6
 8000c16:	4303      	orrs	r3, r0
 8000c18:	4699      	mov	r9, r3
 8000c1a:	0023      	movs	r3, r4
 8000c1c:	408b      	lsls	r3, r1
 8000c1e:	4698      	mov	r8, r3
 8000c20:	4b25      	ldr	r3, [pc, #148]	@ (8000cb8 <__aeabi_ddiv+0x230>)
 8000c22:	2400      	movs	r4, #0
 8000c24:	1a9b      	subs	r3, r3, r2
 8000c26:	469a      	mov	sl, r3
 8000c28:	2300      	movs	r3, #0
 8000c2a:	9303      	str	r3, [sp, #12]
 8000c2c:	e753      	b.n	8000ad6 <__aeabi_ddiv+0x4e>
 8000c2e:	2300      	movs	r3, #0
 8000c30:	4698      	mov	r8, r3
 8000c32:	469a      	mov	sl, r3
 8000c34:	3301      	adds	r3, #1
 8000c36:	2404      	movs	r4, #4
 8000c38:	9303      	str	r3, [sp, #12]
 8000c3a:	e74c      	b.n	8000ad6 <__aeabi_ddiv+0x4e>
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	431c      	orrs	r4, r3
 8000c40:	2300      	movs	r3, #0
 8000c42:	2101      	movs	r1, #1
 8000c44:	469b      	mov	fp, r3
 8000c46:	e764      	b.n	8000b12 <__aeabi_ddiv+0x8a>
 8000c48:	2303      	movs	r3, #3
 8000c4a:	0032      	movs	r2, r6
 8000c4c:	2103      	movs	r1, #3
 8000c4e:	431c      	orrs	r4, r3
 8000c50:	e75f      	b.n	8000b12 <__aeabi_ddiv+0x8a>
 8000c52:	469a      	mov	sl, r3
 8000c54:	2303      	movs	r3, #3
 8000c56:	46d9      	mov	r9, fp
 8000c58:	240c      	movs	r4, #12
 8000c5a:	9303      	str	r3, [sp, #12]
 8000c5c:	e73b      	b.n	8000ad6 <__aeabi_ddiv+0x4e>
 8000c5e:	2300      	movs	r3, #0
 8000c60:	2480      	movs	r4, #128	@ 0x80
 8000c62:	4698      	mov	r8, r3
 8000c64:	2600      	movs	r6, #0
 8000c66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <__aeabi_ddiv+0x21c>)
 8000c68:	0324      	lsls	r4, r4, #12
 8000c6a:	e779      	b.n	8000b60 <__aeabi_ddiv+0xd8>
 8000c6c:	2480      	movs	r4, #128	@ 0x80
 8000c6e:	465b      	mov	r3, fp
 8000c70:	0324      	lsls	r4, r4, #12
 8000c72:	431c      	orrs	r4, r3
 8000c74:	0324      	lsls	r4, r4, #12
 8000c76:	002e      	movs	r6, r5
 8000c78:	4690      	mov	r8, r2
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <__aeabi_ddiv+0x21c>)
 8000c7c:	0b24      	lsrs	r4, r4, #12
 8000c7e:	e76f      	b.n	8000b60 <__aeabi_ddiv+0xd8>
 8000c80:	2480      	movs	r4, #128	@ 0x80
 8000c82:	464b      	mov	r3, r9
 8000c84:	0324      	lsls	r4, r4, #12
 8000c86:	4223      	tst	r3, r4
 8000c88:	d002      	beq.n	8000c90 <__aeabi_ddiv+0x208>
 8000c8a:	465b      	mov	r3, fp
 8000c8c:	4223      	tst	r3, r4
 8000c8e:	d0f0      	beq.n	8000c72 <__aeabi_ddiv+0x1ea>
 8000c90:	2480      	movs	r4, #128	@ 0x80
 8000c92:	464b      	mov	r3, r9
 8000c94:	0324      	lsls	r4, r4, #12
 8000c96:	431c      	orrs	r4, r3
 8000c98:	0324      	lsls	r4, r4, #12
 8000c9a:	9e02      	ldr	r6, [sp, #8]
 8000c9c:	4b01      	ldr	r3, [pc, #4]	@ (8000ca4 <__aeabi_ddiv+0x21c>)
 8000c9e:	0b24      	lsrs	r4, r4, #12
 8000ca0:	e75e      	b.n	8000b60 <__aeabi_ddiv+0xd8>
 8000ca2:	46c0      	nop			@ (mov r8, r8)
 8000ca4:	000007ff 	.word	0x000007ff
 8000ca8:	fffffc01 	.word	0xfffffc01
 8000cac:	0800cf18 	.word	0x0800cf18
 8000cb0:	fffff801 	.word	0xfffff801
 8000cb4:	000003f3 	.word	0x000003f3
 8000cb8:	fffffc0d 	.word	0xfffffc0d
 8000cbc:	45cb      	cmp	fp, r9
 8000cbe:	d200      	bcs.n	8000cc2 <__aeabi_ddiv+0x23a>
 8000cc0:	e0f8      	b.n	8000eb4 <__aeabi_ddiv+0x42c>
 8000cc2:	d100      	bne.n	8000cc6 <__aeabi_ddiv+0x23e>
 8000cc4:	e0f3      	b.n	8000eae <__aeabi_ddiv+0x426>
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	425b      	negs	r3, r3
 8000cca:	469c      	mov	ip, r3
 8000ccc:	4644      	mov	r4, r8
 8000cce:	4648      	mov	r0, r9
 8000cd0:	2500      	movs	r5, #0
 8000cd2:	44e2      	add	sl, ip
 8000cd4:	465b      	mov	r3, fp
 8000cd6:	0e17      	lsrs	r7, r2, #24
 8000cd8:	021b      	lsls	r3, r3, #8
 8000cda:	431f      	orrs	r7, r3
 8000cdc:	0c19      	lsrs	r1, r3, #16
 8000cde:	043b      	lsls	r3, r7, #16
 8000ce0:	0212      	lsls	r2, r2, #8
 8000ce2:	9700      	str	r7, [sp, #0]
 8000ce4:	0c1f      	lsrs	r7, r3, #16
 8000ce6:	4691      	mov	r9, r2
 8000ce8:	9102      	str	r1, [sp, #8]
 8000cea:	9703      	str	r7, [sp, #12]
 8000cec:	f7ff fa92 	bl	8000214 <__aeabi_uidivmod>
 8000cf0:	0002      	movs	r2, r0
 8000cf2:	437a      	muls	r2, r7
 8000cf4:	040b      	lsls	r3, r1, #16
 8000cf6:	0c21      	lsrs	r1, r4, #16
 8000cf8:	4680      	mov	r8, r0
 8000cfa:	4319      	orrs	r1, r3
 8000cfc:	428a      	cmp	r2, r1
 8000cfe:	d909      	bls.n	8000d14 <__aeabi_ddiv+0x28c>
 8000d00:	9f00      	ldr	r7, [sp, #0]
 8000d02:	2301      	movs	r3, #1
 8000d04:	46bc      	mov	ip, r7
 8000d06:	425b      	negs	r3, r3
 8000d08:	4461      	add	r1, ip
 8000d0a:	469c      	mov	ip, r3
 8000d0c:	44e0      	add	r8, ip
 8000d0e:	428f      	cmp	r7, r1
 8000d10:	d800      	bhi.n	8000d14 <__aeabi_ddiv+0x28c>
 8000d12:	e15c      	b.n	8000fce <__aeabi_ddiv+0x546>
 8000d14:	1a88      	subs	r0, r1, r2
 8000d16:	9902      	ldr	r1, [sp, #8]
 8000d18:	f7ff fa7c 	bl	8000214 <__aeabi_uidivmod>
 8000d1c:	9a03      	ldr	r2, [sp, #12]
 8000d1e:	0424      	lsls	r4, r4, #16
 8000d20:	4342      	muls	r2, r0
 8000d22:	0409      	lsls	r1, r1, #16
 8000d24:	0c24      	lsrs	r4, r4, #16
 8000d26:	0003      	movs	r3, r0
 8000d28:	430c      	orrs	r4, r1
 8000d2a:	42a2      	cmp	r2, r4
 8000d2c:	d906      	bls.n	8000d3c <__aeabi_ddiv+0x2b4>
 8000d2e:	9900      	ldr	r1, [sp, #0]
 8000d30:	3b01      	subs	r3, #1
 8000d32:	468c      	mov	ip, r1
 8000d34:	4464      	add	r4, ip
 8000d36:	42a1      	cmp	r1, r4
 8000d38:	d800      	bhi.n	8000d3c <__aeabi_ddiv+0x2b4>
 8000d3a:	e142      	b.n	8000fc2 <__aeabi_ddiv+0x53a>
 8000d3c:	1aa0      	subs	r0, r4, r2
 8000d3e:	4642      	mov	r2, r8
 8000d40:	0412      	lsls	r2, r2, #16
 8000d42:	431a      	orrs	r2, r3
 8000d44:	4693      	mov	fp, r2
 8000d46:	464b      	mov	r3, r9
 8000d48:	4659      	mov	r1, fp
 8000d4a:	0c1b      	lsrs	r3, r3, #16
 8000d4c:	001f      	movs	r7, r3
 8000d4e:	9304      	str	r3, [sp, #16]
 8000d50:	040b      	lsls	r3, r1, #16
 8000d52:	4649      	mov	r1, r9
 8000d54:	0409      	lsls	r1, r1, #16
 8000d56:	0c09      	lsrs	r1, r1, #16
 8000d58:	000c      	movs	r4, r1
 8000d5a:	0c1b      	lsrs	r3, r3, #16
 8000d5c:	435c      	muls	r4, r3
 8000d5e:	0c12      	lsrs	r2, r2, #16
 8000d60:	437b      	muls	r3, r7
 8000d62:	4688      	mov	r8, r1
 8000d64:	4351      	muls	r1, r2
 8000d66:	437a      	muls	r2, r7
 8000d68:	0c27      	lsrs	r7, r4, #16
 8000d6a:	46bc      	mov	ip, r7
 8000d6c:	185b      	adds	r3, r3, r1
 8000d6e:	4463      	add	r3, ip
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d903      	bls.n	8000d7c <__aeabi_ddiv+0x2f4>
 8000d74:	2180      	movs	r1, #128	@ 0x80
 8000d76:	0249      	lsls	r1, r1, #9
 8000d78:	468c      	mov	ip, r1
 8000d7a:	4462      	add	r2, ip
 8000d7c:	0c19      	lsrs	r1, r3, #16
 8000d7e:	0424      	lsls	r4, r4, #16
 8000d80:	041b      	lsls	r3, r3, #16
 8000d82:	0c24      	lsrs	r4, r4, #16
 8000d84:	188a      	adds	r2, r1, r2
 8000d86:	191c      	adds	r4, r3, r4
 8000d88:	4290      	cmp	r0, r2
 8000d8a:	d302      	bcc.n	8000d92 <__aeabi_ddiv+0x30a>
 8000d8c:	d116      	bne.n	8000dbc <__aeabi_ddiv+0x334>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	d214      	bcs.n	8000dbc <__aeabi_ddiv+0x334>
 8000d92:	465b      	mov	r3, fp
 8000d94:	9f00      	ldr	r7, [sp, #0]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	444d      	add	r5, r9
 8000d9a:	9305      	str	r3, [sp, #20]
 8000d9c:	454d      	cmp	r5, r9
 8000d9e:	419b      	sbcs	r3, r3
 8000da0:	46bc      	mov	ip, r7
 8000da2:	425b      	negs	r3, r3
 8000da4:	4463      	add	r3, ip
 8000da6:	18c0      	adds	r0, r0, r3
 8000da8:	4287      	cmp	r7, r0
 8000daa:	d300      	bcc.n	8000dae <__aeabi_ddiv+0x326>
 8000dac:	e102      	b.n	8000fb4 <__aeabi_ddiv+0x52c>
 8000dae:	4282      	cmp	r2, r0
 8000db0:	d900      	bls.n	8000db4 <__aeabi_ddiv+0x32c>
 8000db2:	e129      	b.n	8001008 <__aeabi_ddiv+0x580>
 8000db4:	d100      	bne.n	8000db8 <__aeabi_ddiv+0x330>
 8000db6:	e124      	b.n	8001002 <__aeabi_ddiv+0x57a>
 8000db8:	9b05      	ldr	r3, [sp, #20]
 8000dba:	469b      	mov	fp, r3
 8000dbc:	1b2c      	subs	r4, r5, r4
 8000dbe:	42a5      	cmp	r5, r4
 8000dc0:	41ad      	sbcs	r5, r5
 8000dc2:	9b00      	ldr	r3, [sp, #0]
 8000dc4:	1a80      	subs	r0, r0, r2
 8000dc6:	426d      	negs	r5, r5
 8000dc8:	1b40      	subs	r0, r0, r5
 8000dca:	4283      	cmp	r3, r0
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_ddiv+0x348>
 8000dce:	e10f      	b.n	8000ff0 <__aeabi_ddiv+0x568>
 8000dd0:	9902      	ldr	r1, [sp, #8]
 8000dd2:	f7ff fa1f 	bl	8000214 <__aeabi_uidivmod>
 8000dd6:	9a03      	ldr	r2, [sp, #12]
 8000dd8:	040b      	lsls	r3, r1, #16
 8000dda:	4342      	muls	r2, r0
 8000ddc:	0c21      	lsrs	r1, r4, #16
 8000dde:	0005      	movs	r5, r0
 8000de0:	4319      	orrs	r1, r3
 8000de2:	428a      	cmp	r2, r1
 8000de4:	d900      	bls.n	8000de8 <__aeabi_ddiv+0x360>
 8000de6:	e0cb      	b.n	8000f80 <__aeabi_ddiv+0x4f8>
 8000de8:	1a88      	subs	r0, r1, r2
 8000dea:	9902      	ldr	r1, [sp, #8]
 8000dec:	f7ff fa12 	bl	8000214 <__aeabi_uidivmod>
 8000df0:	9a03      	ldr	r2, [sp, #12]
 8000df2:	0424      	lsls	r4, r4, #16
 8000df4:	4342      	muls	r2, r0
 8000df6:	0409      	lsls	r1, r1, #16
 8000df8:	0c24      	lsrs	r4, r4, #16
 8000dfa:	0003      	movs	r3, r0
 8000dfc:	430c      	orrs	r4, r1
 8000dfe:	42a2      	cmp	r2, r4
 8000e00:	d900      	bls.n	8000e04 <__aeabi_ddiv+0x37c>
 8000e02:	e0ca      	b.n	8000f9a <__aeabi_ddiv+0x512>
 8000e04:	4641      	mov	r1, r8
 8000e06:	1aa4      	subs	r4, r4, r2
 8000e08:	042a      	lsls	r2, r5, #16
 8000e0a:	431a      	orrs	r2, r3
 8000e0c:	9f04      	ldr	r7, [sp, #16]
 8000e0e:	0413      	lsls	r3, r2, #16
 8000e10:	0c1b      	lsrs	r3, r3, #16
 8000e12:	4359      	muls	r1, r3
 8000e14:	4640      	mov	r0, r8
 8000e16:	437b      	muls	r3, r7
 8000e18:	469c      	mov	ip, r3
 8000e1a:	0c15      	lsrs	r5, r2, #16
 8000e1c:	4368      	muls	r0, r5
 8000e1e:	0c0b      	lsrs	r3, r1, #16
 8000e20:	4484      	add	ip, r0
 8000e22:	4463      	add	r3, ip
 8000e24:	437d      	muls	r5, r7
 8000e26:	4298      	cmp	r0, r3
 8000e28:	d903      	bls.n	8000e32 <__aeabi_ddiv+0x3aa>
 8000e2a:	2080      	movs	r0, #128	@ 0x80
 8000e2c:	0240      	lsls	r0, r0, #9
 8000e2e:	4684      	mov	ip, r0
 8000e30:	4465      	add	r5, ip
 8000e32:	0c18      	lsrs	r0, r3, #16
 8000e34:	0409      	lsls	r1, r1, #16
 8000e36:	041b      	lsls	r3, r3, #16
 8000e38:	0c09      	lsrs	r1, r1, #16
 8000e3a:	1940      	adds	r0, r0, r5
 8000e3c:	185b      	adds	r3, r3, r1
 8000e3e:	4284      	cmp	r4, r0
 8000e40:	d327      	bcc.n	8000e92 <__aeabi_ddiv+0x40a>
 8000e42:	d023      	beq.n	8000e8c <__aeabi_ddiv+0x404>
 8000e44:	2301      	movs	r3, #1
 8000e46:	0035      	movs	r5, r6
 8000e48:	431a      	orrs	r2, r3
 8000e4a:	4b94      	ldr	r3, [pc, #592]	@ (800109c <__aeabi_ddiv+0x614>)
 8000e4c:	4453      	add	r3, sl
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	dd60      	ble.n	8000f14 <__aeabi_ddiv+0x48c>
 8000e52:	0751      	lsls	r1, r2, #29
 8000e54:	d000      	beq.n	8000e58 <__aeabi_ddiv+0x3d0>
 8000e56:	e086      	b.n	8000f66 <__aeabi_ddiv+0x4de>
 8000e58:	002e      	movs	r6, r5
 8000e5a:	08d1      	lsrs	r1, r2, #3
 8000e5c:	465a      	mov	r2, fp
 8000e5e:	01d2      	lsls	r2, r2, #7
 8000e60:	d506      	bpl.n	8000e70 <__aeabi_ddiv+0x3e8>
 8000e62:	465a      	mov	r2, fp
 8000e64:	4b8e      	ldr	r3, [pc, #568]	@ (80010a0 <__aeabi_ddiv+0x618>)
 8000e66:	401a      	ands	r2, r3
 8000e68:	2380      	movs	r3, #128	@ 0x80
 8000e6a:	4693      	mov	fp, r2
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	4453      	add	r3, sl
 8000e70:	4a8c      	ldr	r2, [pc, #560]	@ (80010a4 <__aeabi_ddiv+0x61c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	dd00      	ble.n	8000e78 <__aeabi_ddiv+0x3f0>
 8000e76:	e680      	b.n	8000b7a <__aeabi_ddiv+0xf2>
 8000e78:	465a      	mov	r2, fp
 8000e7a:	0752      	lsls	r2, r2, #29
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	4690      	mov	r8, r2
 8000e80:	465a      	mov	r2, fp
 8000e82:	055b      	lsls	r3, r3, #21
 8000e84:	0254      	lsls	r4, r2, #9
 8000e86:	0b24      	lsrs	r4, r4, #12
 8000e88:	0d5b      	lsrs	r3, r3, #21
 8000e8a:	e669      	b.n	8000b60 <__aeabi_ddiv+0xd8>
 8000e8c:	0035      	movs	r5, r6
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0db      	beq.n	8000e4a <__aeabi_ddiv+0x3c2>
 8000e92:	9d00      	ldr	r5, [sp, #0]
 8000e94:	1e51      	subs	r1, r2, #1
 8000e96:	46ac      	mov	ip, r5
 8000e98:	4464      	add	r4, ip
 8000e9a:	42ac      	cmp	r4, r5
 8000e9c:	d200      	bcs.n	8000ea0 <__aeabi_ddiv+0x418>
 8000e9e:	e09e      	b.n	8000fde <__aeabi_ddiv+0x556>
 8000ea0:	4284      	cmp	r4, r0
 8000ea2:	d200      	bcs.n	8000ea6 <__aeabi_ddiv+0x41e>
 8000ea4:	e0e1      	b.n	800106a <__aeabi_ddiv+0x5e2>
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_ddiv+0x422>
 8000ea8:	e0ee      	b.n	8001088 <__aeabi_ddiv+0x600>
 8000eaa:	000a      	movs	r2, r1
 8000eac:	e7ca      	b.n	8000e44 <__aeabi_ddiv+0x3bc>
 8000eae:	4542      	cmp	r2, r8
 8000eb0:	d900      	bls.n	8000eb4 <__aeabi_ddiv+0x42c>
 8000eb2:	e708      	b.n	8000cc6 <__aeabi_ddiv+0x23e>
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	07dc      	lsls	r4, r3, #31
 8000eb8:	0858      	lsrs	r0, r3, #1
 8000eba:	4643      	mov	r3, r8
 8000ebc:	085b      	lsrs	r3, r3, #1
 8000ebe:	431c      	orrs	r4, r3
 8000ec0:	4643      	mov	r3, r8
 8000ec2:	07dd      	lsls	r5, r3, #31
 8000ec4:	e706      	b.n	8000cd4 <__aeabi_ddiv+0x24c>
 8000ec6:	f001 f8b3 	bl	8002030 <__clzsi2>
 8000eca:	2315      	movs	r3, #21
 8000ecc:	469c      	mov	ip, r3
 8000ece:	4484      	add	ip, r0
 8000ed0:	0002      	movs	r2, r0
 8000ed2:	4663      	mov	r3, ip
 8000ed4:	3220      	adds	r2, #32
 8000ed6:	2b1c      	cmp	r3, #28
 8000ed8:	dc00      	bgt.n	8000edc <__aeabi_ddiv+0x454>
 8000eda:	e692      	b.n	8000c02 <__aeabi_ddiv+0x17a>
 8000edc:	0023      	movs	r3, r4
 8000ede:	3808      	subs	r0, #8
 8000ee0:	4083      	lsls	r3, r0
 8000ee2:	4699      	mov	r9, r3
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	4698      	mov	r8, r3
 8000ee8:	e69a      	b.n	8000c20 <__aeabi_ddiv+0x198>
 8000eea:	f001 f8a1 	bl	8002030 <__clzsi2>
 8000eee:	0002      	movs	r2, r0
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	3215      	adds	r2, #21
 8000ef4:	3320      	adds	r3, #32
 8000ef6:	2a1c      	cmp	r2, #28
 8000ef8:	dc00      	bgt.n	8000efc <__aeabi_ddiv+0x474>
 8000efa:	e65f      	b.n	8000bbc <__aeabi_ddiv+0x134>
 8000efc:	9900      	ldr	r1, [sp, #0]
 8000efe:	3808      	subs	r0, #8
 8000f00:	4081      	lsls	r1, r0
 8000f02:	2200      	movs	r2, #0
 8000f04:	468b      	mov	fp, r1
 8000f06:	e666      	b.n	8000bd6 <__aeabi_ddiv+0x14e>
 8000f08:	2200      	movs	r2, #0
 8000f0a:	002e      	movs	r6, r5
 8000f0c:	2400      	movs	r4, #0
 8000f0e:	4690      	mov	r8, r2
 8000f10:	4b65      	ldr	r3, [pc, #404]	@ (80010a8 <__aeabi_ddiv+0x620>)
 8000f12:	e625      	b.n	8000b60 <__aeabi_ddiv+0xd8>
 8000f14:	002e      	movs	r6, r5
 8000f16:	2101      	movs	r1, #1
 8000f18:	1ac9      	subs	r1, r1, r3
 8000f1a:	2938      	cmp	r1, #56	@ 0x38
 8000f1c:	dd00      	ble.n	8000f20 <__aeabi_ddiv+0x498>
 8000f1e:	e61b      	b.n	8000b58 <__aeabi_ddiv+0xd0>
 8000f20:	291f      	cmp	r1, #31
 8000f22:	dc7e      	bgt.n	8001022 <__aeabi_ddiv+0x59a>
 8000f24:	4861      	ldr	r0, [pc, #388]	@ (80010ac <__aeabi_ddiv+0x624>)
 8000f26:	0014      	movs	r4, r2
 8000f28:	4450      	add	r0, sl
 8000f2a:	465b      	mov	r3, fp
 8000f2c:	4082      	lsls	r2, r0
 8000f2e:	4083      	lsls	r3, r0
 8000f30:	40cc      	lsrs	r4, r1
 8000f32:	1e50      	subs	r0, r2, #1
 8000f34:	4182      	sbcs	r2, r0
 8000f36:	4323      	orrs	r3, r4
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	465b      	mov	r3, fp
 8000f3c:	40cb      	lsrs	r3, r1
 8000f3e:	0751      	lsls	r1, r2, #29
 8000f40:	d009      	beq.n	8000f56 <__aeabi_ddiv+0x4ce>
 8000f42:	210f      	movs	r1, #15
 8000f44:	4011      	ands	r1, r2
 8000f46:	2904      	cmp	r1, #4
 8000f48:	d005      	beq.n	8000f56 <__aeabi_ddiv+0x4ce>
 8000f4a:	1d11      	adds	r1, r2, #4
 8000f4c:	4291      	cmp	r1, r2
 8000f4e:	4192      	sbcs	r2, r2
 8000f50:	4252      	negs	r2, r2
 8000f52:	189b      	adds	r3, r3, r2
 8000f54:	000a      	movs	r2, r1
 8000f56:	0219      	lsls	r1, r3, #8
 8000f58:	d400      	bmi.n	8000f5c <__aeabi_ddiv+0x4d4>
 8000f5a:	e09b      	b.n	8001094 <__aeabi_ddiv+0x60c>
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2301      	movs	r3, #1
 8000f60:	2400      	movs	r4, #0
 8000f62:	4690      	mov	r8, r2
 8000f64:	e5fc      	b.n	8000b60 <__aeabi_ddiv+0xd8>
 8000f66:	210f      	movs	r1, #15
 8000f68:	4011      	ands	r1, r2
 8000f6a:	2904      	cmp	r1, #4
 8000f6c:	d100      	bne.n	8000f70 <__aeabi_ddiv+0x4e8>
 8000f6e:	e773      	b.n	8000e58 <__aeabi_ddiv+0x3d0>
 8000f70:	1d11      	adds	r1, r2, #4
 8000f72:	4291      	cmp	r1, r2
 8000f74:	4192      	sbcs	r2, r2
 8000f76:	4252      	negs	r2, r2
 8000f78:	002e      	movs	r6, r5
 8000f7a:	08c9      	lsrs	r1, r1, #3
 8000f7c:	4493      	add	fp, r2
 8000f7e:	e76d      	b.n	8000e5c <__aeabi_ddiv+0x3d4>
 8000f80:	9b00      	ldr	r3, [sp, #0]
 8000f82:	3d01      	subs	r5, #1
 8000f84:	469c      	mov	ip, r3
 8000f86:	4461      	add	r1, ip
 8000f88:	428b      	cmp	r3, r1
 8000f8a:	d900      	bls.n	8000f8e <__aeabi_ddiv+0x506>
 8000f8c:	e72c      	b.n	8000de8 <__aeabi_ddiv+0x360>
 8000f8e:	428a      	cmp	r2, r1
 8000f90:	d800      	bhi.n	8000f94 <__aeabi_ddiv+0x50c>
 8000f92:	e729      	b.n	8000de8 <__aeabi_ddiv+0x360>
 8000f94:	1e85      	subs	r5, r0, #2
 8000f96:	4461      	add	r1, ip
 8000f98:	e726      	b.n	8000de8 <__aeabi_ddiv+0x360>
 8000f9a:	9900      	ldr	r1, [sp, #0]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	468c      	mov	ip, r1
 8000fa0:	4464      	add	r4, ip
 8000fa2:	42a1      	cmp	r1, r4
 8000fa4:	d900      	bls.n	8000fa8 <__aeabi_ddiv+0x520>
 8000fa6:	e72d      	b.n	8000e04 <__aeabi_ddiv+0x37c>
 8000fa8:	42a2      	cmp	r2, r4
 8000faa:	d800      	bhi.n	8000fae <__aeabi_ddiv+0x526>
 8000fac:	e72a      	b.n	8000e04 <__aeabi_ddiv+0x37c>
 8000fae:	1e83      	subs	r3, r0, #2
 8000fb0:	4464      	add	r4, ip
 8000fb2:	e727      	b.n	8000e04 <__aeabi_ddiv+0x37c>
 8000fb4:	4287      	cmp	r7, r0
 8000fb6:	d000      	beq.n	8000fba <__aeabi_ddiv+0x532>
 8000fb8:	e6fe      	b.n	8000db8 <__aeabi_ddiv+0x330>
 8000fba:	45a9      	cmp	r9, r5
 8000fbc:	d900      	bls.n	8000fc0 <__aeabi_ddiv+0x538>
 8000fbe:	e6fb      	b.n	8000db8 <__aeabi_ddiv+0x330>
 8000fc0:	e6f5      	b.n	8000dae <__aeabi_ddiv+0x326>
 8000fc2:	42a2      	cmp	r2, r4
 8000fc4:	d800      	bhi.n	8000fc8 <__aeabi_ddiv+0x540>
 8000fc6:	e6b9      	b.n	8000d3c <__aeabi_ddiv+0x2b4>
 8000fc8:	1e83      	subs	r3, r0, #2
 8000fca:	4464      	add	r4, ip
 8000fcc:	e6b6      	b.n	8000d3c <__aeabi_ddiv+0x2b4>
 8000fce:	428a      	cmp	r2, r1
 8000fd0:	d800      	bhi.n	8000fd4 <__aeabi_ddiv+0x54c>
 8000fd2:	e69f      	b.n	8000d14 <__aeabi_ddiv+0x28c>
 8000fd4:	46bc      	mov	ip, r7
 8000fd6:	1e83      	subs	r3, r0, #2
 8000fd8:	4698      	mov	r8, r3
 8000fda:	4461      	add	r1, ip
 8000fdc:	e69a      	b.n	8000d14 <__aeabi_ddiv+0x28c>
 8000fde:	000a      	movs	r2, r1
 8000fe0:	4284      	cmp	r4, r0
 8000fe2:	d000      	beq.n	8000fe6 <__aeabi_ddiv+0x55e>
 8000fe4:	e72e      	b.n	8000e44 <__aeabi_ddiv+0x3bc>
 8000fe6:	454b      	cmp	r3, r9
 8000fe8:	d000      	beq.n	8000fec <__aeabi_ddiv+0x564>
 8000fea:	e72b      	b.n	8000e44 <__aeabi_ddiv+0x3bc>
 8000fec:	0035      	movs	r5, r6
 8000fee:	e72c      	b.n	8000e4a <__aeabi_ddiv+0x3c2>
 8000ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800109c <__aeabi_ddiv+0x614>)
 8000ff2:	4a2f      	ldr	r2, [pc, #188]	@ (80010b0 <__aeabi_ddiv+0x628>)
 8000ff4:	4453      	add	r3, sl
 8000ff6:	4592      	cmp	sl, r2
 8000ff8:	db43      	blt.n	8001082 <__aeabi_ddiv+0x5fa>
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4493      	add	fp, r2
 8001000:	e72c      	b.n	8000e5c <__aeabi_ddiv+0x3d4>
 8001002:	42ac      	cmp	r4, r5
 8001004:	d800      	bhi.n	8001008 <__aeabi_ddiv+0x580>
 8001006:	e6d7      	b.n	8000db8 <__aeabi_ddiv+0x330>
 8001008:	2302      	movs	r3, #2
 800100a:	425b      	negs	r3, r3
 800100c:	469c      	mov	ip, r3
 800100e:	9900      	ldr	r1, [sp, #0]
 8001010:	444d      	add	r5, r9
 8001012:	454d      	cmp	r5, r9
 8001014:	419b      	sbcs	r3, r3
 8001016:	44e3      	add	fp, ip
 8001018:	468c      	mov	ip, r1
 800101a:	425b      	negs	r3, r3
 800101c:	4463      	add	r3, ip
 800101e:	18c0      	adds	r0, r0, r3
 8001020:	e6cc      	b.n	8000dbc <__aeabi_ddiv+0x334>
 8001022:	201f      	movs	r0, #31
 8001024:	4240      	negs	r0, r0
 8001026:	1ac3      	subs	r3, r0, r3
 8001028:	4658      	mov	r0, fp
 800102a:	40d8      	lsrs	r0, r3
 800102c:	2920      	cmp	r1, #32
 800102e:	d004      	beq.n	800103a <__aeabi_ddiv+0x5b2>
 8001030:	4659      	mov	r1, fp
 8001032:	4b20      	ldr	r3, [pc, #128]	@ (80010b4 <__aeabi_ddiv+0x62c>)
 8001034:	4453      	add	r3, sl
 8001036:	4099      	lsls	r1, r3
 8001038:	430a      	orrs	r2, r1
 800103a:	1e53      	subs	r3, r2, #1
 800103c:	419a      	sbcs	r2, r3
 800103e:	2307      	movs	r3, #7
 8001040:	0019      	movs	r1, r3
 8001042:	4302      	orrs	r2, r0
 8001044:	2400      	movs	r4, #0
 8001046:	4011      	ands	r1, r2
 8001048:	4213      	tst	r3, r2
 800104a:	d009      	beq.n	8001060 <__aeabi_ddiv+0x5d8>
 800104c:	3308      	adds	r3, #8
 800104e:	4013      	ands	r3, r2
 8001050:	2b04      	cmp	r3, #4
 8001052:	d01d      	beq.n	8001090 <__aeabi_ddiv+0x608>
 8001054:	1d13      	adds	r3, r2, #4
 8001056:	4293      	cmp	r3, r2
 8001058:	4189      	sbcs	r1, r1
 800105a:	001a      	movs	r2, r3
 800105c:	4249      	negs	r1, r1
 800105e:	0749      	lsls	r1, r1, #29
 8001060:	08d2      	lsrs	r2, r2, #3
 8001062:	430a      	orrs	r2, r1
 8001064:	4690      	mov	r8, r2
 8001066:	2300      	movs	r3, #0
 8001068:	e57a      	b.n	8000b60 <__aeabi_ddiv+0xd8>
 800106a:	4649      	mov	r1, r9
 800106c:	9f00      	ldr	r7, [sp, #0]
 800106e:	004d      	lsls	r5, r1, #1
 8001070:	454d      	cmp	r5, r9
 8001072:	4189      	sbcs	r1, r1
 8001074:	46bc      	mov	ip, r7
 8001076:	4249      	negs	r1, r1
 8001078:	4461      	add	r1, ip
 800107a:	46a9      	mov	r9, r5
 800107c:	3a02      	subs	r2, #2
 800107e:	1864      	adds	r4, r4, r1
 8001080:	e7ae      	b.n	8000fe0 <__aeabi_ddiv+0x558>
 8001082:	2201      	movs	r2, #1
 8001084:	4252      	negs	r2, r2
 8001086:	e746      	b.n	8000f16 <__aeabi_ddiv+0x48e>
 8001088:	4599      	cmp	r9, r3
 800108a:	d3ee      	bcc.n	800106a <__aeabi_ddiv+0x5e2>
 800108c:	000a      	movs	r2, r1
 800108e:	e7aa      	b.n	8000fe6 <__aeabi_ddiv+0x55e>
 8001090:	2100      	movs	r1, #0
 8001092:	e7e5      	b.n	8001060 <__aeabi_ddiv+0x5d8>
 8001094:	0759      	lsls	r1, r3, #29
 8001096:	025b      	lsls	r3, r3, #9
 8001098:	0b1c      	lsrs	r4, r3, #12
 800109a:	e7e1      	b.n	8001060 <__aeabi_ddiv+0x5d8>
 800109c:	000003ff 	.word	0x000003ff
 80010a0:	feffffff 	.word	0xfeffffff
 80010a4:	000007fe 	.word	0x000007fe
 80010a8:	000007ff 	.word	0x000007ff
 80010ac:	0000041e 	.word	0x0000041e
 80010b0:	fffffc02 	.word	0xfffffc02
 80010b4:	0000043e 	.word	0x0000043e

080010b8 <__aeabi_dmul>:
 80010b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ba:	4657      	mov	r7, sl
 80010bc:	464e      	mov	r6, r9
 80010be:	46de      	mov	lr, fp
 80010c0:	4645      	mov	r5, r8
 80010c2:	b5e0      	push	{r5, r6, r7, lr}
 80010c4:	001f      	movs	r7, r3
 80010c6:	030b      	lsls	r3, r1, #12
 80010c8:	0b1b      	lsrs	r3, r3, #12
 80010ca:	0016      	movs	r6, r2
 80010cc:	469a      	mov	sl, r3
 80010ce:	0fca      	lsrs	r2, r1, #31
 80010d0:	004b      	lsls	r3, r1, #1
 80010d2:	0004      	movs	r4, r0
 80010d4:	4691      	mov	r9, r2
 80010d6:	b085      	sub	sp, #20
 80010d8:	0d5b      	lsrs	r3, r3, #21
 80010da:	d100      	bne.n	80010de <__aeabi_dmul+0x26>
 80010dc:	e1cf      	b.n	800147e <__aeabi_dmul+0x3c6>
 80010de:	4acd      	ldr	r2, [pc, #820]	@ (8001414 <__aeabi_dmul+0x35c>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d055      	beq.n	8001190 <__aeabi_dmul+0xd8>
 80010e4:	4651      	mov	r1, sl
 80010e6:	0f42      	lsrs	r2, r0, #29
 80010e8:	00c9      	lsls	r1, r1, #3
 80010ea:	430a      	orrs	r2, r1
 80010ec:	2180      	movs	r1, #128	@ 0x80
 80010ee:	0409      	lsls	r1, r1, #16
 80010f0:	4311      	orrs	r1, r2
 80010f2:	00c2      	lsls	r2, r0, #3
 80010f4:	4690      	mov	r8, r2
 80010f6:	4ac8      	ldr	r2, [pc, #800]	@ (8001418 <__aeabi_dmul+0x360>)
 80010f8:	468a      	mov	sl, r1
 80010fa:	4693      	mov	fp, r2
 80010fc:	449b      	add	fp, r3
 80010fe:	2300      	movs	r3, #0
 8001100:	2500      	movs	r5, #0
 8001102:	9302      	str	r3, [sp, #8]
 8001104:	033c      	lsls	r4, r7, #12
 8001106:	007b      	lsls	r3, r7, #1
 8001108:	0ffa      	lsrs	r2, r7, #31
 800110a:	9601      	str	r6, [sp, #4]
 800110c:	0b24      	lsrs	r4, r4, #12
 800110e:	0d5b      	lsrs	r3, r3, #21
 8001110:	9200      	str	r2, [sp, #0]
 8001112:	d100      	bne.n	8001116 <__aeabi_dmul+0x5e>
 8001114:	e188      	b.n	8001428 <__aeabi_dmul+0x370>
 8001116:	4abf      	ldr	r2, [pc, #764]	@ (8001414 <__aeabi_dmul+0x35c>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d100      	bne.n	800111e <__aeabi_dmul+0x66>
 800111c:	e092      	b.n	8001244 <__aeabi_dmul+0x18c>
 800111e:	4abe      	ldr	r2, [pc, #760]	@ (8001418 <__aeabi_dmul+0x360>)
 8001120:	4694      	mov	ip, r2
 8001122:	4463      	add	r3, ip
 8001124:	449b      	add	fp, r3
 8001126:	2d0a      	cmp	r5, #10
 8001128:	dc42      	bgt.n	80011b0 <__aeabi_dmul+0xf8>
 800112a:	00e4      	lsls	r4, r4, #3
 800112c:	0f73      	lsrs	r3, r6, #29
 800112e:	4323      	orrs	r3, r4
 8001130:	2480      	movs	r4, #128	@ 0x80
 8001132:	4649      	mov	r1, r9
 8001134:	0424      	lsls	r4, r4, #16
 8001136:	431c      	orrs	r4, r3
 8001138:	00f3      	lsls	r3, r6, #3
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	9b00      	ldr	r3, [sp, #0]
 800113e:	2000      	movs	r0, #0
 8001140:	4059      	eors	r1, r3
 8001142:	b2cb      	uxtb	r3, r1
 8001144:	9303      	str	r3, [sp, #12]
 8001146:	2d02      	cmp	r5, #2
 8001148:	dc00      	bgt.n	800114c <__aeabi_dmul+0x94>
 800114a:	e094      	b.n	8001276 <__aeabi_dmul+0x1be>
 800114c:	2301      	movs	r3, #1
 800114e:	40ab      	lsls	r3, r5
 8001150:	001d      	movs	r5, r3
 8001152:	23a6      	movs	r3, #166	@ 0xa6
 8001154:	002a      	movs	r2, r5
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	401a      	ands	r2, r3
 800115a:	421d      	tst	r5, r3
 800115c:	d000      	beq.n	8001160 <__aeabi_dmul+0xa8>
 800115e:	e229      	b.n	80015b4 <__aeabi_dmul+0x4fc>
 8001160:	2390      	movs	r3, #144	@ 0x90
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	421d      	tst	r5, r3
 8001166:	d100      	bne.n	800116a <__aeabi_dmul+0xb2>
 8001168:	e24d      	b.n	8001606 <__aeabi_dmul+0x54e>
 800116a:	2300      	movs	r3, #0
 800116c:	2480      	movs	r4, #128	@ 0x80
 800116e:	4699      	mov	r9, r3
 8001170:	0324      	lsls	r4, r4, #12
 8001172:	4ba8      	ldr	r3, [pc, #672]	@ (8001414 <__aeabi_dmul+0x35c>)
 8001174:	0010      	movs	r0, r2
 8001176:	464a      	mov	r2, r9
 8001178:	051b      	lsls	r3, r3, #20
 800117a:	4323      	orrs	r3, r4
 800117c:	07d2      	lsls	r2, r2, #31
 800117e:	4313      	orrs	r3, r2
 8001180:	0019      	movs	r1, r3
 8001182:	b005      	add	sp, #20
 8001184:	bcf0      	pop	{r4, r5, r6, r7}
 8001186:	46bb      	mov	fp, r7
 8001188:	46b2      	mov	sl, r6
 800118a:	46a9      	mov	r9, r5
 800118c:	46a0      	mov	r8, r4
 800118e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001190:	4652      	mov	r2, sl
 8001192:	4302      	orrs	r2, r0
 8001194:	4690      	mov	r8, r2
 8001196:	d000      	beq.n	800119a <__aeabi_dmul+0xe2>
 8001198:	e1ac      	b.n	80014f4 <__aeabi_dmul+0x43c>
 800119a:	469b      	mov	fp, r3
 800119c:	2302      	movs	r3, #2
 800119e:	4692      	mov	sl, r2
 80011a0:	2508      	movs	r5, #8
 80011a2:	9302      	str	r3, [sp, #8]
 80011a4:	e7ae      	b.n	8001104 <__aeabi_dmul+0x4c>
 80011a6:	9b00      	ldr	r3, [sp, #0]
 80011a8:	46a2      	mov	sl, r4
 80011aa:	4699      	mov	r9, r3
 80011ac:	9b01      	ldr	r3, [sp, #4]
 80011ae:	4698      	mov	r8, r3
 80011b0:	9b02      	ldr	r3, [sp, #8]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dmul+0x100>
 80011b6:	e1ca      	b.n	800154e <__aeabi_dmul+0x496>
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d100      	bne.n	80011be <__aeabi_dmul+0x106>
 80011bc:	e192      	b.n	80014e4 <__aeabi_dmul+0x42c>
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d110      	bne.n	80011e4 <__aeabi_dmul+0x12c>
 80011c2:	2300      	movs	r3, #0
 80011c4:	2400      	movs	r4, #0
 80011c6:	2200      	movs	r2, #0
 80011c8:	e7d4      	b.n	8001174 <__aeabi_dmul+0xbc>
 80011ca:	2201      	movs	r2, #1
 80011cc:	087b      	lsrs	r3, r7, #1
 80011ce:	403a      	ands	r2, r7
 80011d0:	4313      	orrs	r3, r2
 80011d2:	4652      	mov	r2, sl
 80011d4:	07d2      	lsls	r2, r2, #31
 80011d6:	4313      	orrs	r3, r2
 80011d8:	4698      	mov	r8, r3
 80011da:	4653      	mov	r3, sl
 80011dc:	085b      	lsrs	r3, r3, #1
 80011de:	469a      	mov	sl, r3
 80011e0:	9b03      	ldr	r3, [sp, #12]
 80011e2:	4699      	mov	r9, r3
 80011e4:	465b      	mov	r3, fp
 80011e6:	1c58      	adds	r0, r3, #1
 80011e8:	2380      	movs	r3, #128	@ 0x80
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	445b      	add	r3, fp
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	dc00      	bgt.n	80011f4 <__aeabi_dmul+0x13c>
 80011f2:	e1b1      	b.n	8001558 <__aeabi_dmul+0x4a0>
 80011f4:	4642      	mov	r2, r8
 80011f6:	0752      	lsls	r2, r2, #29
 80011f8:	d00b      	beq.n	8001212 <__aeabi_dmul+0x15a>
 80011fa:	220f      	movs	r2, #15
 80011fc:	4641      	mov	r1, r8
 80011fe:	400a      	ands	r2, r1
 8001200:	2a04      	cmp	r2, #4
 8001202:	d006      	beq.n	8001212 <__aeabi_dmul+0x15a>
 8001204:	4642      	mov	r2, r8
 8001206:	1d11      	adds	r1, r2, #4
 8001208:	4541      	cmp	r1, r8
 800120a:	4192      	sbcs	r2, r2
 800120c:	4688      	mov	r8, r1
 800120e:	4252      	negs	r2, r2
 8001210:	4492      	add	sl, r2
 8001212:	4652      	mov	r2, sl
 8001214:	01d2      	lsls	r2, r2, #7
 8001216:	d506      	bpl.n	8001226 <__aeabi_dmul+0x16e>
 8001218:	4652      	mov	r2, sl
 800121a:	4b80      	ldr	r3, [pc, #512]	@ (800141c <__aeabi_dmul+0x364>)
 800121c:	401a      	ands	r2, r3
 800121e:	2380      	movs	r3, #128	@ 0x80
 8001220:	4692      	mov	sl, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	18c3      	adds	r3, r0, r3
 8001226:	4a7e      	ldr	r2, [pc, #504]	@ (8001420 <__aeabi_dmul+0x368>)
 8001228:	4293      	cmp	r3, r2
 800122a:	dd00      	ble.n	800122e <__aeabi_dmul+0x176>
 800122c:	e18f      	b.n	800154e <__aeabi_dmul+0x496>
 800122e:	4642      	mov	r2, r8
 8001230:	08d1      	lsrs	r1, r2, #3
 8001232:	4652      	mov	r2, sl
 8001234:	0752      	lsls	r2, r2, #29
 8001236:	430a      	orrs	r2, r1
 8001238:	4651      	mov	r1, sl
 800123a:	055b      	lsls	r3, r3, #21
 800123c:	024c      	lsls	r4, r1, #9
 800123e:	0b24      	lsrs	r4, r4, #12
 8001240:	0d5b      	lsrs	r3, r3, #21
 8001242:	e797      	b.n	8001174 <__aeabi_dmul+0xbc>
 8001244:	4b73      	ldr	r3, [pc, #460]	@ (8001414 <__aeabi_dmul+0x35c>)
 8001246:	4326      	orrs	r6, r4
 8001248:	469c      	mov	ip, r3
 800124a:	44e3      	add	fp, ip
 800124c:	2e00      	cmp	r6, #0
 800124e:	d100      	bne.n	8001252 <__aeabi_dmul+0x19a>
 8001250:	e16f      	b.n	8001532 <__aeabi_dmul+0x47a>
 8001252:	2303      	movs	r3, #3
 8001254:	4649      	mov	r1, r9
 8001256:	431d      	orrs	r5, r3
 8001258:	9b00      	ldr	r3, [sp, #0]
 800125a:	4059      	eors	r1, r3
 800125c:	b2cb      	uxtb	r3, r1
 800125e:	9303      	str	r3, [sp, #12]
 8001260:	2d0a      	cmp	r5, #10
 8001262:	dd00      	ble.n	8001266 <__aeabi_dmul+0x1ae>
 8001264:	e133      	b.n	80014ce <__aeabi_dmul+0x416>
 8001266:	2301      	movs	r3, #1
 8001268:	40ab      	lsls	r3, r5
 800126a:	001d      	movs	r5, r3
 800126c:	2303      	movs	r3, #3
 800126e:	9302      	str	r3, [sp, #8]
 8001270:	2288      	movs	r2, #136	@ 0x88
 8001272:	422a      	tst	r2, r5
 8001274:	d197      	bne.n	80011a6 <__aeabi_dmul+0xee>
 8001276:	4642      	mov	r2, r8
 8001278:	4643      	mov	r3, r8
 800127a:	0412      	lsls	r2, r2, #16
 800127c:	0c12      	lsrs	r2, r2, #16
 800127e:	0016      	movs	r6, r2
 8001280:	9801      	ldr	r0, [sp, #4]
 8001282:	0c1d      	lsrs	r5, r3, #16
 8001284:	0c03      	lsrs	r3, r0, #16
 8001286:	0400      	lsls	r0, r0, #16
 8001288:	0c00      	lsrs	r0, r0, #16
 800128a:	4346      	muls	r6, r0
 800128c:	46b4      	mov	ip, r6
 800128e:	001e      	movs	r6, r3
 8001290:	436e      	muls	r6, r5
 8001292:	9600      	str	r6, [sp, #0]
 8001294:	0016      	movs	r6, r2
 8001296:	0007      	movs	r7, r0
 8001298:	435e      	muls	r6, r3
 800129a:	4661      	mov	r1, ip
 800129c:	46b0      	mov	r8, r6
 800129e:	436f      	muls	r7, r5
 80012a0:	0c0e      	lsrs	r6, r1, #16
 80012a2:	44b8      	add	r8, r7
 80012a4:	4446      	add	r6, r8
 80012a6:	42b7      	cmp	r7, r6
 80012a8:	d905      	bls.n	80012b6 <__aeabi_dmul+0x1fe>
 80012aa:	2180      	movs	r1, #128	@ 0x80
 80012ac:	0249      	lsls	r1, r1, #9
 80012ae:	4688      	mov	r8, r1
 80012b0:	9f00      	ldr	r7, [sp, #0]
 80012b2:	4447      	add	r7, r8
 80012b4:	9700      	str	r7, [sp, #0]
 80012b6:	4661      	mov	r1, ip
 80012b8:	0409      	lsls	r1, r1, #16
 80012ba:	0c09      	lsrs	r1, r1, #16
 80012bc:	0c37      	lsrs	r7, r6, #16
 80012be:	0436      	lsls	r6, r6, #16
 80012c0:	468c      	mov	ip, r1
 80012c2:	0031      	movs	r1, r6
 80012c4:	4461      	add	r1, ip
 80012c6:	9101      	str	r1, [sp, #4]
 80012c8:	0011      	movs	r1, r2
 80012ca:	0c26      	lsrs	r6, r4, #16
 80012cc:	0424      	lsls	r4, r4, #16
 80012ce:	0c24      	lsrs	r4, r4, #16
 80012d0:	4361      	muls	r1, r4
 80012d2:	468c      	mov	ip, r1
 80012d4:	0021      	movs	r1, r4
 80012d6:	4369      	muls	r1, r5
 80012d8:	4689      	mov	r9, r1
 80012da:	4661      	mov	r1, ip
 80012dc:	0c09      	lsrs	r1, r1, #16
 80012de:	4688      	mov	r8, r1
 80012e0:	4372      	muls	r2, r6
 80012e2:	444a      	add	r2, r9
 80012e4:	4442      	add	r2, r8
 80012e6:	4375      	muls	r5, r6
 80012e8:	4591      	cmp	r9, r2
 80012ea:	d903      	bls.n	80012f4 <__aeabi_dmul+0x23c>
 80012ec:	2180      	movs	r1, #128	@ 0x80
 80012ee:	0249      	lsls	r1, r1, #9
 80012f0:	4688      	mov	r8, r1
 80012f2:	4445      	add	r5, r8
 80012f4:	0c11      	lsrs	r1, r2, #16
 80012f6:	4688      	mov	r8, r1
 80012f8:	4661      	mov	r1, ip
 80012fa:	0409      	lsls	r1, r1, #16
 80012fc:	0c09      	lsrs	r1, r1, #16
 80012fe:	468c      	mov	ip, r1
 8001300:	0412      	lsls	r2, r2, #16
 8001302:	4462      	add	r2, ip
 8001304:	18b9      	adds	r1, r7, r2
 8001306:	9102      	str	r1, [sp, #8]
 8001308:	4651      	mov	r1, sl
 800130a:	0c09      	lsrs	r1, r1, #16
 800130c:	468c      	mov	ip, r1
 800130e:	4651      	mov	r1, sl
 8001310:	040f      	lsls	r7, r1, #16
 8001312:	0c3f      	lsrs	r7, r7, #16
 8001314:	0039      	movs	r1, r7
 8001316:	4341      	muls	r1, r0
 8001318:	4445      	add	r5, r8
 800131a:	4688      	mov	r8, r1
 800131c:	4661      	mov	r1, ip
 800131e:	4341      	muls	r1, r0
 8001320:	468a      	mov	sl, r1
 8001322:	4641      	mov	r1, r8
 8001324:	4660      	mov	r0, ip
 8001326:	0c09      	lsrs	r1, r1, #16
 8001328:	4689      	mov	r9, r1
 800132a:	4358      	muls	r0, r3
 800132c:	437b      	muls	r3, r7
 800132e:	4453      	add	r3, sl
 8001330:	444b      	add	r3, r9
 8001332:	459a      	cmp	sl, r3
 8001334:	d903      	bls.n	800133e <__aeabi_dmul+0x286>
 8001336:	2180      	movs	r1, #128	@ 0x80
 8001338:	0249      	lsls	r1, r1, #9
 800133a:	4689      	mov	r9, r1
 800133c:	4448      	add	r0, r9
 800133e:	0c19      	lsrs	r1, r3, #16
 8001340:	4689      	mov	r9, r1
 8001342:	4641      	mov	r1, r8
 8001344:	0409      	lsls	r1, r1, #16
 8001346:	0c09      	lsrs	r1, r1, #16
 8001348:	4688      	mov	r8, r1
 800134a:	0039      	movs	r1, r7
 800134c:	4361      	muls	r1, r4
 800134e:	041b      	lsls	r3, r3, #16
 8001350:	4443      	add	r3, r8
 8001352:	4688      	mov	r8, r1
 8001354:	4661      	mov	r1, ip
 8001356:	434c      	muls	r4, r1
 8001358:	4371      	muls	r1, r6
 800135a:	468c      	mov	ip, r1
 800135c:	4641      	mov	r1, r8
 800135e:	4377      	muls	r7, r6
 8001360:	0c0e      	lsrs	r6, r1, #16
 8001362:	193f      	adds	r7, r7, r4
 8001364:	19f6      	adds	r6, r6, r7
 8001366:	4448      	add	r0, r9
 8001368:	42b4      	cmp	r4, r6
 800136a:	d903      	bls.n	8001374 <__aeabi_dmul+0x2bc>
 800136c:	2180      	movs	r1, #128	@ 0x80
 800136e:	0249      	lsls	r1, r1, #9
 8001370:	4689      	mov	r9, r1
 8001372:	44cc      	add	ip, r9
 8001374:	9902      	ldr	r1, [sp, #8]
 8001376:	9f00      	ldr	r7, [sp, #0]
 8001378:	4689      	mov	r9, r1
 800137a:	0431      	lsls	r1, r6, #16
 800137c:	444f      	add	r7, r9
 800137e:	4689      	mov	r9, r1
 8001380:	4641      	mov	r1, r8
 8001382:	4297      	cmp	r7, r2
 8001384:	4192      	sbcs	r2, r2
 8001386:	040c      	lsls	r4, r1, #16
 8001388:	0c24      	lsrs	r4, r4, #16
 800138a:	444c      	add	r4, r9
 800138c:	18ff      	adds	r7, r7, r3
 800138e:	4252      	negs	r2, r2
 8001390:	1964      	adds	r4, r4, r5
 8001392:	18a1      	adds	r1, r4, r2
 8001394:	429f      	cmp	r7, r3
 8001396:	419b      	sbcs	r3, r3
 8001398:	4688      	mov	r8, r1
 800139a:	4682      	mov	sl, r0
 800139c:	425b      	negs	r3, r3
 800139e:	4699      	mov	r9, r3
 80013a0:	4590      	cmp	r8, r2
 80013a2:	4192      	sbcs	r2, r2
 80013a4:	42ac      	cmp	r4, r5
 80013a6:	41a4      	sbcs	r4, r4
 80013a8:	44c2      	add	sl, r8
 80013aa:	44d1      	add	r9, sl
 80013ac:	4252      	negs	r2, r2
 80013ae:	4264      	negs	r4, r4
 80013b0:	4314      	orrs	r4, r2
 80013b2:	4599      	cmp	r9, r3
 80013b4:	419b      	sbcs	r3, r3
 80013b6:	4582      	cmp	sl, r0
 80013b8:	4192      	sbcs	r2, r2
 80013ba:	425b      	negs	r3, r3
 80013bc:	4252      	negs	r2, r2
 80013be:	4313      	orrs	r3, r2
 80013c0:	464a      	mov	r2, r9
 80013c2:	0c36      	lsrs	r6, r6, #16
 80013c4:	19a4      	adds	r4, r4, r6
 80013c6:	18e3      	adds	r3, r4, r3
 80013c8:	4463      	add	r3, ip
 80013ca:	025b      	lsls	r3, r3, #9
 80013cc:	0dd2      	lsrs	r2, r2, #23
 80013ce:	431a      	orrs	r2, r3
 80013d0:	9901      	ldr	r1, [sp, #4]
 80013d2:	4692      	mov	sl, r2
 80013d4:	027a      	lsls	r2, r7, #9
 80013d6:	430a      	orrs	r2, r1
 80013d8:	1e50      	subs	r0, r2, #1
 80013da:	4182      	sbcs	r2, r0
 80013dc:	0dff      	lsrs	r7, r7, #23
 80013de:	4317      	orrs	r7, r2
 80013e0:	464a      	mov	r2, r9
 80013e2:	0252      	lsls	r2, r2, #9
 80013e4:	4317      	orrs	r7, r2
 80013e6:	46b8      	mov	r8, r7
 80013e8:	01db      	lsls	r3, r3, #7
 80013ea:	d500      	bpl.n	80013ee <__aeabi_dmul+0x336>
 80013ec:	e6ed      	b.n	80011ca <__aeabi_dmul+0x112>
 80013ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <__aeabi_dmul+0x36c>)
 80013f0:	9a03      	ldr	r2, [sp, #12]
 80013f2:	445b      	add	r3, fp
 80013f4:	4691      	mov	r9, r2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	dc00      	bgt.n	80013fc <__aeabi_dmul+0x344>
 80013fa:	e0ac      	b.n	8001556 <__aeabi_dmul+0x49e>
 80013fc:	003a      	movs	r2, r7
 80013fe:	0752      	lsls	r2, r2, #29
 8001400:	d100      	bne.n	8001404 <__aeabi_dmul+0x34c>
 8001402:	e710      	b.n	8001226 <__aeabi_dmul+0x16e>
 8001404:	220f      	movs	r2, #15
 8001406:	4658      	mov	r0, fp
 8001408:	403a      	ands	r2, r7
 800140a:	2a04      	cmp	r2, #4
 800140c:	d000      	beq.n	8001410 <__aeabi_dmul+0x358>
 800140e:	e6f9      	b.n	8001204 <__aeabi_dmul+0x14c>
 8001410:	e709      	b.n	8001226 <__aeabi_dmul+0x16e>
 8001412:	46c0      	nop			@ (mov r8, r8)
 8001414:	000007ff 	.word	0x000007ff
 8001418:	fffffc01 	.word	0xfffffc01
 800141c:	feffffff 	.word	0xfeffffff
 8001420:	000007fe 	.word	0x000007fe
 8001424:	000003ff 	.word	0x000003ff
 8001428:	0022      	movs	r2, r4
 800142a:	4332      	orrs	r2, r6
 800142c:	d06f      	beq.n	800150e <__aeabi_dmul+0x456>
 800142e:	2c00      	cmp	r4, #0
 8001430:	d100      	bne.n	8001434 <__aeabi_dmul+0x37c>
 8001432:	e0c2      	b.n	80015ba <__aeabi_dmul+0x502>
 8001434:	0020      	movs	r0, r4
 8001436:	f000 fdfb 	bl	8002030 <__clzsi2>
 800143a:	0002      	movs	r2, r0
 800143c:	0003      	movs	r3, r0
 800143e:	3a0b      	subs	r2, #11
 8001440:	201d      	movs	r0, #29
 8001442:	1a82      	subs	r2, r0, r2
 8001444:	0030      	movs	r0, r6
 8001446:	0019      	movs	r1, r3
 8001448:	40d0      	lsrs	r0, r2
 800144a:	3908      	subs	r1, #8
 800144c:	408c      	lsls	r4, r1
 800144e:	0002      	movs	r2, r0
 8001450:	4322      	orrs	r2, r4
 8001452:	0034      	movs	r4, r6
 8001454:	408c      	lsls	r4, r1
 8001456:	4659      	mov	r1, fp
 8001458:	1acb      	subs	r3, r1, r3
 800145a:	4986      	ldr	r1, [pc, #536]	@ (8001674 <__aeabi_dmul+0x5bc>)
 800145c:	468b      	mov	fp, r1
 800145e:	449b      	add	fp, r3
 8001460:	2d0a      	cmp	r5, #10
 8001462:	dd00      	ble.n	8001466 <__aeabi_dmul+0x3ae>
 8001464:	e6a4      	b.n	80011b0 <__aeabi_dmul+0xf8>
 8001466:	4649      	mov	r1, r9
 8001468:	9b00      	ldr	r3, [sp, #0]
 800146a:	9401      	str	r4, [sp, #4]
 800146c:	4059      	eors	r1, r3
 800146e:	b2cb      	uxtb	r3, r1
 8001470:	0014      	movs	r4, r2
 8001472:	2000      	movs	r0, #0
 8001474:	9303      	str	r3, [sp, #12]
 8001476:	2d02      	cmp	r5, #2
 8001478:	dd00      	ble.n	800147c <__aeabi_dmul+0x3c4>
 800147a:	e667      	b.n	800114c <__aeabi_dmul+0x94>
 800147c:	e6fb      	b.n	8001276 <__aeabi_dmul+0x1be>
 800147e:	4653      	mov	r3, sl
 8001480:	4303      	orrs	r3, r0
 8001482:	4698      	mov	r8, r3
 8001484:	d03c      	beq.n	8001500 <__aeabi_dmul+0x448>
 8001486:	4653      	mov	r3, sl
 8001488:	2b00      	cmp	r3, #0
 800148a:	d100      	bne.n	800148e <__aeabi_dmul+0x3d6>
 800148c:	e0a3      	b.n	80015d6 <__aeabi_dmul+0x51e>
 800148e:	4650      	mov	r0, sl
 8001490:	f000 fdce 	bl	8002030 <__clzsi2>
 8001494:	230b      	movs	r3, #11
 8001496:	425b      	negs	r3, r3
 8001498:	469c      	mov	ip, r3
 800149a:	0002      	movs	r2, r0
 800149c:	4484      	add	ip, r0
 800149e:	0011      	movs	r1, r2
 80014a0:	4650      	mov	r0, sl
 80014a2:	3908      	subs	r1, #8
 80014a4:	4088      	lsls	r0, r1
 80014a6:	231d      	movs	r3, #29
 80014a8:	4680      	mov	r8, r0
 80014aa:	4660      	mov	r0, ip
 80014ac:	1a1b      	subs	r3, r3, r0
 80014ae:	0020      	movs	r0, r4
 80014b0:	40d8      	lsrs	r0, r3
 80014b2:	0003      	movs	r3, r0
 80014b4:	4640      	mov	r0, r8
 80014b6:	4303      	orrs	r3, r0
 80014b8:	469a      	mov	sl, r3
 80014ba:	0023      	movs	r3, r4
 80014bc:	408b      	lsls	r3, r1
 80014be:	4698      	mov	r8, r3
 80014c0:	4b6c      	ldr	r3, [pc, #432]	@ (8001674 <__aeabi_dmul+0x5bc>)
 80014c2:	2500      	movs	r5, #0
 80014c4:	1a9b      	subs	r3, r3, r2
 80014c6:	469b      	mov	fp, r3
 80014c8:	2300      	movs	r3, #0
 80014ca:	9302      	str	r3, [sp, #8]
 80014cc:	e61a      	b.n	8001104 <__aeabi_dmul+0x4c>
 80014ce:	2d0f      	cmp	r5, #15
 80014d0:	d000      	beq.n	80014d4 <__aeabi_dmul+0x41c>
 80014d2:	e0c9      	b.n	8001668 <__aeabi_dmul+0x5b0>
 80014d4:	2380      	movs	r3, #128	@ 0x80
 80014d6:	4652      	mov	r2, sl
 80014d8:	031b      	lsls	r3, r3, #12
 80014da:	421a      	tst	r2, r3
 80014dc:	d002      	beq.n	80014e4 <__aeabi_dmul+0x42c>
 80014de:	421c      	tst	r4, r3
 80014e0:	d100      	bne.n	80014e4 <__aeabi_dmul+0x42c>
 80014e2:	e092      	b.n	800160a <__aeabi_dmul+0x552>
 80014e4:	2480      	movs	r4, #128	@ 0x80
 80014e6:	4653      	mov	r3, sl
 80014e8:	0324      	lsls	r4, r4, #12
 80014ea:	431c      	orrs	r4, r3
 80014ec:	0324      	lsls	r4, r4, #12
 80014ee:	4642      	mov	r2, r8
 80014f0:	0b24      	lsrs	r4, r4, #12
 80014f2:	e63e      	b.n	8001172 <__aeabi_dmul+0xba>
 80014f4:	469b      	mov	fp, r3
 80014f6:	2303      	movs	r3, #3
 80014f8:	4680      	mov	r8, r0
 80014fa:	250c      	movs	r5, #12
 80014fc:	9302      	str	r3, [sp, #8]
 80014fe:	e601      	b.n	8001104 <__aeabi_dmul+0x4c>
 8001500:	2300      	movs	r3, #0
 8001502:	469a      	mov	sl, r3
 8001504:	469b      	mov	fp, r3
 8001506:	3301      	adds	r3, #1
 8001508:	2504      	movs	r5, #4
 800150a:	9302      	str	r3, [sp, #8]
 800150c:	e5fa      	b.n	8001104 <__aeabi_dmul+0x4c>
 800150e:	2101      	movs	r1, #1
 8001510:	430d      	orrs	r5, r1
 8001512:	2d0a      	cmp	r5, #10
 8001514:	dd00      	ble.n	8001518 <__aeabi_dmul+0x460>
 8001516:	e64b      	b.n	80011b0 <__aeabi_dmul+0xf8>
 8001518:	4649      	mov	r1, r9
 800151a:	9800      	ldr	r0, [sp, #0]
 800151c:	4041      	eors	r1, r0
 800151e:	b2c9      	uxtb	r1, r1
 8001520:	9103      	str	r1, [sp, #12]
 8001522:	2d02      	cmp	r5, #2
 8001524:	dc00      	bgt.n	8001528 <__aeabi_dmul+0x470>
 8001526:	e096      	b.n	8001656 <__aeabi_dmul+0x59e>
 8001528:	2300      	movs	r3, #0
 800152a:	2400      	movs	r4, #0
 800152c:	2001      	movs	r0, #1
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	e60c      	b.n	800114c <__aeabi_dmul+0x94>
 8001532:	4649      	mov	r1, r9
 8001534:	2302      	movs	r3, #2
 8001536:	9a00      	ldr	r2, [sp, #0]
 8001538:	432b      	orrs	r3, r5
 800153a:	4051      	eors	r1, r2
 800153c:	b2ca      	uxtb	r2, r1
 800153e:	9203      	str	r2, [sp, #12]
 8001540:	2b0a      	cmp	r3, #10
 8001542:	dd00      	ble.n	8001546 <__aeabi_dmul+0x48e>
 8001544:	e634      	b.n	80011b0 <__aeabi_dmul+0xf8>
 8001546:	2d00      	cmp	r5, #0
 8001548:	d157      	bne.n	80015fa <__aeabi_dmul+0x542>
 800154a:	9b03      	ldr	r3, [sp, #12]
 800154c:	4699      	mov	r9, r3
 800154e:	2400      	movs	r4, #0
 8001550:	2200      	movs	r2, #0
 8001552:	4b49      	ldr	r3, [pc, #292]	@ (8001678 <__aeabi_dmul+0x5c0>)
 8001554:	e60e      	b.n	8001174 <__aeabi_dmul+0xbc>
 8001556:	4658      	mov	r0, fp
 8001558:	2101      	movs	r1, #1
 800155a:	1ac9      	subs	r1, r1, r3
 800155c:	2938      	cmp	r1, #56	@ 0x38
 800155e:	dd00      	ble.n	8001562 <__aeabi_dmul+0x4aa>
 8001560:	e62f      	b.n	80011c2 <__aeabi_dmul+0x10a>
 8001562:	291f      	cmp	r1, #31
 8001564:	dd56      	ble.n	8001614 <__aeabi_dmul+0x55c>
 8001566:	221f      	movs	r2, #31
 8001568:	4654      	mov	r4, sl
 800156a:	4252      	negs	r2, r2
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	40dc      	lsrs	r4, r3
 8001570:	2920      	cmp	r1, #32
 8001572:	d007      	beq.n	8001584 <__aeabi_dmul+0x4cc>
 8001574:	4b41      	ldr	r3, [pc, #260]	@ (800167c <__aeabi_dmul+0x5c4>)
 8001576:	4642      	mov	r2, r8
 8001578:	469c      	mov	ip, r3
 800157a:	4653      	mov	r3, sl
 800157c:	4460      	add	r0, ip
 800157e:	4083      	lsls	r3, r0
 8001580:	431a      	orrs	r2, r3
 8001582:	4690      	mov	r8, r2
 8001584:	4642      	mov	r2, r8
 8001586:	2107      	movs	r1, #7
 8001588:	1e53      	subs	r3, r2, #1
 800158a:	419a      	sbcs	r2, r3
 800158c:	000b      	movs	r3, r1
 800158e:	4322      	orrs	r2, r4
 8001590:	4013      	ands	r3, r2
 8001592:	2400      	movs	r4, #0
 8001594:	4211      	tst	r1, r2
 8001596:	d009      	beq.n	80015ac <__aeabi_dmul+0x4f4>
 8001598:	230f      	movs	r3, #15
 800159a:	4013      	ands	r3, r2
 800159c:	2b04      	cmp	r3, #4
 800159e:	d05d      	beq.n	800165c <__aeabi_dmul+0x5a4>
 80015a0:	1d11      	adds	r1, r2, #4
 80015a2:	4291      	cmp	r1, r2
 80015a4:	419b      	sbcs	r3, r3
 80015a6:	000a      	movs	r2, r1
 80015a8:	425b      	negs	r3, r3
 80015aa:	075b      	lsls	r3, r3, #29
 80015ac:	08d2      	lsrs	r2, r2, #3
 80015ae:	431a      	orrs	r2, r3
 80015b0:	2300      	movs	r3, #0
 80015b2:	e5df      	b.n	8001174 <__aeabi_dmul+0xbc>
 80015b4:	9b03      	ldr	r3, [sp, #12]
 80015b6:	4699      	mov	r9, r3
 80015b8:	e5fa      	b.n	80011b0 <__aeabi_dmul+0xf8>
 80015ba:	9801      	ldr	r0, [sp, #4]
 80015bc:	f000 fd38 	bl	8002030 <__clzsi2>
 80015c0:	0002      	movs	r2, r0
 80015c2:	0003      	movs	r3, r0
 80015c4:	3215      	adds	r2, #21
 80015c6:	3320      	adds	r3, #32
 80015c8:	2a1c      	cmp	r2, #28
 80015ca:	dc00      	bgt.n	80015ce <__aeabi_dmul+0x516>
 80015cc:	e738      	b.n	8001440 <__aeabi_dmul+0x388>
 80015ce:	9a01      	ldr	r2, [sp, #4]
 80015d0:	3808      	subs	r0, #8
 80015d2:	4082      	lsls	r2, r0
 80015d4:	e73f      	b.n	8001456 <__aeabi_dmul+0x39e>
 80015d6:	f000 fd2b 	bl	8002030 <__clzsi2>
 80015da:	2315      	movs	r3, #21
 80015dc:	469c      	mov	ip, r3
 80015de:	4484      	add	ip, r0
 80015e0:	0002      	movs	r2, r0
 80015e2:	4663      	mov	r3, ip
 80015e4:	3220      	adds	r2, #32
 80015e6:	2b1c      	cmp	r3, #28
 80015e8:	dc00      	bgt.n	80015ec <__aeabi_dmul+0x534>
 80015ea:	e758      	b.n	800149e <__aeabi_dmul+0x3e6>
 80015ec:	2300      	movs	r3, #0
 80015ee:	4698      	mov	r8, r3
 80015f0:	0023      	movs	r3, r4
 80015f2:	3808      	subs	r0, #8
 80015f4:	4083      	lsls	r3, r0
 80015f6:	469a      	mov	sl, r3
 80015f8:	e762      	b.n	80014c0 <__aeabi_dmul+0x408>
 80015fa:	001d      	movs	r5, r3
 80015fc:	2300      	movs	r3, #0
 80015fe:	2400      	movs	r4, #0
 8001600:	2002      	movs	r0, #2
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	e5a2      	b.n	800114c <__aeabi_dmul+0x94>
 8001606:	9002      	str	r0, [sp, #8]
 8001608:	e632      	b.n	8001270 <__aeabi_dmul+0x1b8>
 800160a:	431c      	orrs	r4, r3
 800160c:	9b00      	ldr	r3, [sp, #0]
 800160e:	9a01      	ldr	r2, [sp, #4]
 8001610:	4699      	mov	r9, r3
 8001612:	e5ae      	b.n	8001172 <__aeabi_dmul+0xba>
 8001614:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <__aeabi_dmul+0x5c8>)
 8001616:	4652      	mov	r2, sl
 8001618:	18c3      	adds	r3, r0, r3
 800161a:	4640      	mov	r0, r8
 800161c:	409a      	lsls	r2, r3
 800161e:	40c8      	lsrs	r0, r1
 8001620:	4302      	orrs	r2, r0
 8001622:	4640      	mov	r0, r8
 8001624:	4098      	lsls	r0, r3
 8001626:	0003      	movs	r3, r0
 8001628:	1e58      	subs	r0, r3, #1
 800162a:	4183      	sbcs	r3, r0
 800162c:	4654      	mov	r4, sl
 800162e:	431a      	orrs	r2, r3
 8001630:	40cc      	lsrs	r4, r1
 8001632:	0753      	lsls	r3, r2, #29
 8001634:	d009      	beq.n	800164a <__aeabi_dmul+0x592>
 8001636:	230f      	movs	r3, #15
 8001638:	4013      	ands	r3, r2
 800163a:	2b04      	cmp	r3, #4
 800163c:	d005      	beq.n	800164a <__aeabi_dmul+0x592>
 800163e:	1d13      	adds	r3, r2, #4
 8001640:	4293      	cmp	r3, r2
 8001642:	4192      	sbcs	r2, r2
 8001644:	4252      	negs	r2, r2
 8001646:	18a4      	adds	r4, r4, r2
 8001648:	001a      	movs	r2, r3
 800164a:	0223      	lsls	r3, r4, #8
 800164c:	d508      	bpl.n	8001660 <__aeabi_dmul+0x5a8>
 800164e:	2301      	movs	r3, #1
 8001650:	2400      	movs	r4, #0
 8001652:	2200      	movs	r2, #0
 8001654:	e58e      	b.n	8001174 <__aeabi_dmul+0xbc>
 8001656:	4689      	mov	r9, r1
 8001658:	2400      	movs	r4, #0
 800165a:	e58b      	b.n	8001174 <__aeabi_dmul+0xbc>
 800165c:	2300      	movs	r3, #0
 800165e:	e7a5      	b.n	80015ac <__aeabi_dmul+0x4f4>
 8001660:	0763      	lsls	r3, r4, #29
 8001662:	0264      	lsls	r4, r4, #9
 8001664:	0b24      	lsrs	r4, r4, #12
 8001666:	e7a1      	b.n	80015ac <__aeabi_dmul+0x4f4>
 8001668:	9b00      	ldr	r3, [sp, #0]
 800166a:	46a2      	mov	sl, r4
 800166c:	4699      	mov	r9, r3
 800166e:	9b01      	ldr	r3, [sp, #4]
 8001670:	4698      	mov	r8, r3
 8001672:	e737      	b.n	80014e4 <__aeabi_dmul+0x42c>
 8001674:	fffffc0d 	.word	0xfffffc0d
 8001678:	000007ff 	.word	0x000007ff
 800167c:	0000043e 	.word	0x0000043e
 8001680:	0000041e 	.word	0x0000041e

08001684 <__aeabi_dsub>:
 8001684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001686:	4657      	mov	r7, sl
 8001688:	464e      	mov	r6, r9
 800168a:	4645      	mov	r5, r8
 800168c:	46de      	mov	lr, fp
 800168e:	b5e0      	push	{r5, r6, r7, lr}
 8001690:	b083      	sub	sp, #12
 8001692:	9000      	str	r0, [sp, #0]
 8001694:	9101      	str	r1, [sp, #4]
 8001696:	030c      	lsls	r4, r1, #12
 8001698:	004d      	lsls	r5, r1, #1
 800169a:	0fce      	lsrs	r6, r1, #31
 800169c:	0a61      	lsrs	r1, r4, #9
 800169e:	9c00      	ldr	r4, [sp, #0]
 80016a0:	005f      	lsls	r7, r3, #1
 80016a2:	0f64      	lsrs	r4, r4, #29
 80016a4:	430c      	orrs	r4, r1
 80016a6:	9900      	ldr	r1, [sp, #0]
 80016a8:	9200      	str	r2, [sp, #0]
 80016aa:	9301      	str	r3, [sp, #4]
 80016ac:	00c8      	lsls	r0, r1, #3
 80016ae:	0319      	lsls	r1, r3, #12
 80016b0:	0d7b      	lsrs	r3, r7, #21
 80016b2:	4699      	mov	r9, r3
 80016b4:	9b01      	ldr	r3, [sp, #4]
 80016b6:	4fcc      	ldr	r7, [pc, #816]	@ (80019e8 <__aeabi_dsub+0x364>)
 80016b8:	0fdb      	lsrs	r3, r3, #31
 80016ba:	469c      	mov	ip, r3
 80016bc:	0a4b      	lsrs	r3, r1, #9
 80016be:	9900      	ldr	r1, [sp, #0]
 80016c0:	4680      	mov	r8, r0
 80016c2:	0f49      	lsrs	r1, r1, #29
 80016c4:	4319      	orrs	r1, r3
 80016c6:	9b00      	ldr	r3, [sp, #0]
 80016c8:	468b      	mov	fp, r1
 80016ca:	00da      	lsls	r2, r3, #3
 80016cc:	4692      	mov	sl, r2
 80016ce:	0d6d      	lsrs	r5, r5, #21
 80016d0:	45b9      	cmp	r9, r7
 80016d2:	d100      	bne.n	80016d6 <__aeabi_dsub+0x52>
 80016d4:	e0bf      	b.n	8001856 <__aeabi_dsub+0x1d2>
 80016d6:	2301      	movs	r3, #1
 80016d8:	4661      	mov	r1, ip
 80016da:	4059      	eors	r1, r3
 80016dc:	464b      	mov	r3, r9
 80016de:	468c      	mov	ip, r1
 80016e0:	1aeb      	subs	r3, r5, r3
 80016e2:	428e      	cmp	r6, r1
 80016e4:	d075      	beq.n	80017d2 <__aeabi_dsub+0x14e>
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	dc00      	bgt.n	80016ec <__aeabi_dsub+0x68>
 80016ea:	e2a3      	b.n	8001c34 <__aeabi_dsub+0x5b0>
 80016ec:	4649      	mov	r1, r9
 80016ee:	2900      	cmp	r1, #0
 80016f0:	d100      	bne.n	80016f4 <__aeabi_dsub+0x70>
 80016f2:	e0ce      	b.n	8001892 <__aeabi_dsub+0x20e>
 80016f4:	42bd      	cmp	r5, r7
 80016f6:	d100      	bne.n	80016fa <__aeabi_dsub+0x76>
 80016f8:	e200      	b.n	8001afc <__aeabi_dsub+0x478>
 80016fa:	2701      	movs	r7, #1
 80016fc:	2b38      	cmp	r3, #56	@ 0x38
 80016fe:	dc19      	bgt.n	8001734 <__aeabi_dsub+0xb0>
 8001700:	2780      	movs	r7, #128	@ 0x80
 8001702:	4659      	mov	r1, fp
 8001704:	043f      	lsls	r7, r7, #16
 8001706:	4339      	orrs	r1, r7
 8001708:	468b      	mov	fp, r1
 800170a:	2b1f      	cmp	r3, #31
 800170c:	dd00      	ble.n	8001710 <__aeabi_dsub+0x8c>
 800170e:	e1fa      	b.n	8001b06 <__aeabi_dsub+0x482>
 8001710:	2720      	movs	r7, #32
 8001712:	1af9      	subs	r1, r7, r3
 8001714:	468c      	mov	ip, r1
 8001716:	4659      	mov	r1, fp
 8001718:	4667      	mov	r7, ip
 800171a:	40b9      	lsls	r1, r7
 800171c:	000f      	movs	r7, r1
 800171e:	0011      	movs	r1, r2
 8001720:	40d9      	lsrs	r1, r3
 8001722:	430f      	orrs	r7, r1
 8001724:	4661      	mov	r1, ip
 8001726:	408a      	lsls	r2, r1
 8001728:	1e51      	subs	r1, r2, #1
 800172a:	418a      	sbcs	r2, r1
 800172c:	4659      	mov	r1, fp
 800172e:	40d9      	lsrs	r1, r3
 8001730:	4317      	orrs	r7, r2
 8001732:	1a64      	subs	r4, r4, r1
 8001734:	1bc7      	subs	r7, r0, r7
 8001736:	42b8      	cmp	r0, r7
 8001738:	4180      	sbcs	r0, r0
 800173a:	4240      	negs	r0, r0
 800173c:	1a24      	subs	r4, r4, r0
 800173e:	0223      	lsls	r3, r4, #8
 8001740:	d400      	bmi.n	8001744 <__aeabi_dsub+0xc0>
 8001742:	e140      	b.n	80019c6 <__aeabi_dsub+0x342>
 8001744:	0264      	lsls	r4, r4, #9
 8001746:	0a64      	lsrs	r4, r4, #9
 8001748:	2c00      	cmp	r4, #0
 800174a:	d100      	bne.n	800174e <__aeabi_dsub+0xca>
 800174c:	e154      	b.n	80019f8 <__aeabi_dsub+0x374>
 800174e:	0020      	movs	r0, r4
 8001750:	f000 fc6e 	bl	8002030 <__clzsi2>
 8001754:	0003      	movs	r3, r0
 8001756:	3b08      	subs	r3, #8
 8001758:	2120      	movs	r1, #32
 800175a:	0038      	movs	r0, r7
 800175c:	1aca      	subs	r2, r1, r3
 800175e:	40d0      	lsrs	r0, r2
 8001760:	409c      	lsls	r4, r3
 8001762:	0002      	movs	r2, r0
 8001764:	409f      	lsls	r7, r3
 8001766:	4322      	orrs	r2, r4
 8001768:	429d      	cmp	r5, r3
 800176a:	dd00      	ble.n	800176e <__aeabi_dsub+0xea>
 800176c:	e1a6      	b.n	8001abc <__aeabi_dsub+0x438>
 800176e:	1b58      	subs	r0, r3, r5
 8001770:	3001      	adds	r0, #1
 8001772:	1a09      	subs	r1, r1, r0
 8001774:	003c      	movs	r4, r7
 8001776:	408f      	lsls	r7, r1
 8001778:	40c4      	lsrs	r4, r0
 800177a:	1e7b      	subs	r3, r7, #1
 800177c:	419f      	sbcs	r7, r3
 800177e:	0013      	movs	r3, r2
 8001780:	408b      	lsls	r3, r1
 8001782:	4327      	orrs	r7, r4
 8001784:	431f      	orrs	r7, r3
 8001786:	40c2      	lsrs	r2, r0
 8001788:	003b      	movs	r3, r7
 800178a:	0014      	movs	r4, r2
 800178c:	2500      	movs	r5, #0
 800178e:	4313      	orrs	r3, r2
 8001790:	d100      	bne.n	8001794 <__aeabi_dsub+0x110>
 8001792:	e1f7      	b.n	8001b84 <__aeabi_dsub+0x500>
 8001794:	077b      	lsls	r3, r7, #29
 8001796:	d100      	bne.n	800179a <__aeabi_dsub+0x116>
 8001798:	e377      	b.n	8001e8a <__aeabi_dsub+0x806>
 800179a:	230f      	movs	r3, #15
 800179c:	0038      	movs	r0, r7
 800179e:	403b      	ands	r3, r7
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d004      	beq.n	80017ae <__aeabi_dsub+0x12a>
 80017a4:	1d38      	adds	r0, r7, #4
 80017a6:	42b8      	cmp	r0, r7
 80017a8:	41bf      	sbcs	r7, r7
 80017aa:	427f      	negs	r7, r7
 80017ac:	19e4      	adds	r4, r4, r7
 80017ae:	0223      	lsls	r3, r4, #8
 80017b0:	d400      	bmi.n	80017b4 <__aeabi_dsub+0x130>
 80017b2:	e368      	b.n	8001e86 <__aeabi_dsub+0x802>
 80017b4:	4b8c      	ldr	r3, [pc, #560]	@ (80019e8 <__aeabi_dsub+0x364>)
 80017b6:	3501      	adds	r5, #1
 80017b8:	429d      	cmp	r5, r3
 80017ba:	d100      	bne.n	80017be <__aeabi_dsub+0x13a>
 80017bc:	e0f4      	b.n	80019a8 <__aeabi_dsub+0x324>
 80017be:	4b8b      	ldr	r3, [pc, #556]	@ (80019ec <__aeabi_dsub+0x368>)
 80017c0:	056d      	lsls	r5, r5, #21
 80017c2:	401c      	ands	r4, r3
 80017c4:	0d6d      	lsrs	r5, r5, #21
 80017c6:	0767      	lsls	r7, r4, #29
 80017c8:	08c0      	lsrs	r0, r0, #3
 80017ca:	0264      	lsls	r4, r4, #9
 80017cc:	4307      	orrs	r7, r0
 80017ce:	0b24      	lsrs	r4, r4, #12
 80017d0:	e0ec      	b.n	80019ac <__aeabi_dsub+0x328>
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	dc00      	bgt.n	80017d8 <__aeabi_dsub+0x154>
 80017d6:	e329      	b.n	8001e2c <__aeabi_dsub+0x7a8>
 80017d8:	4649      	mov	r1, r9
 80017da:	2900      	cmp	r1, #0
 80017dc:	d000      	beq.n	80017e0 <__aeabi_dsub+0x15c>
 80017de:	e0d6      	b.n	800198e <__aeabi_dsub+0x30a>
 80017e0:	4659      	mov	r1, fp
 80017e2:	4311      	orrs	r1, r2
 80017e4:	d100      	bne.n	80017e8 <__aeabi_dsub+0x164>
 80017e6:	e12e      	b.n	8001a46 <__aeabi_dsub+0x3c2>
 80017e8:	1e59      	subs	r1, r3, #1
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d100      	bne.n	80017f0 <__aeabi_dsub+0x16c>
 80017ee:	e1e6      	b.n	8001bbe <__aeabi_dsub+0x53a>
 80017f0:	42bb      	cmp	r3, r7
 80017f2:	d100      	bne.n	80017f6 <__aeabi_dsub+0x172>
 80017f4:	e182      	b.n	8001afc <__aeabi_dsub+0x478>
 80017f6:	2701      	movs	r7, #1
 80017f8:	000b      	movs	r3, r1
 80017fa:	2938      	cmp	r1, #56	@ 0x38
 80017fc:	dc14      	bgt.n	8001828 <__aeabi_dsub+0x1a4>
 80017fe:	2b1f      	cmp	r3, #31
 8001800:	dd00      	ble.n	8001804 <__aeabi_dsub+0x180>
 8001802:	e23c      	b.n	8001c7e <__aeabi_dsub+0x5fa>
 8001804:	2720      	movs	r7, #32
 8001806:	1af9      	subs	r1, r7, r3
 8001808:	468c      	mov	ip, r1
 800180a:	4659      	mov	r1, fp
 800180c:	4667      	mov	r7, ip
 800180e:	40b9      	lsls	r1, r7
 8001810:	000f      	movs	r7, r1
 8001812:	0011      	movs	r1, r2
 8001814:	40d9      	lsrs	r1, r3
 8001816:	430f      	orrs	r7, r1
 8001818:	4661      	mov	r1, ip
 800181a:	408a      	lsls	r2, r1
 800181c:	1e51      	subs	r1, r2, #1
 800181e:	418a      	sbcs	r2, r1
 8001820:	4659      	mov	r1, fp
 8001822:	40d9      	lsrs	r1, r3
 8001824:	4317      	orrs	r7, r2
 8001826:	1864      	adds	r4, r4, r1
 8001828:	183f      	adds	r7, r7, r0
 800182a:	4287      	cmp	r7, r0
 800182c:	4180      	sbcs	r0, r0
 800182e:	4240      	negs	r0, r0
 8001830:	1824      	adds	r4, r4, r0
 8001832:	0223      	lsls	r3, r4, #8
 8001834:	d400      	bmi.n	8001838 <__aeabi_dsub+0x1b4>
 8001836:	e0c6      	b.n	80019c6 <__aeabi_dsub+0x342>
 8001838:	4b6b      	ldr	r3, [pc, #428]	@ (80019e8 <__aeabi_dsub+0x364>)
 800183a:	3501      	adds	r5, #1
 800183c:	429d      	cmp	r5, r3
 800183e:	d100      	bne.n	8001842 <__aeabi_dsub+0x1be>
 8001840:	e0b2      	b.n	80019a8 <__aeabi_dsub+0x324>
 8001842:	2101      	movs	r1, #1
 8001844:	4b69      	ldr	r3, [pc, #420]	@ (80019ec <__aeabi_dsub+0x368>)
 8001846:	087a      	lsrs	r2, r7, #1
 8001848:	401c      	ands	r4, r3
 800184a:	4039      	ands	r1, r7
 800184c:	430a      	orrs	r2, r1
 800184e:	07e7      	lsls	r7, r4, #31
 8001850:	4317      	orrs	r7, r2
 8001852:	0864      	lsrs	r4, r4, #1
 8001854:	e79e      	b.n	8001794 <__aeabi_dsub+0x110>
 8001856:	4b66      	ldr	r3, [pc, #408]	@ (80019f0 <__aeabi_dsub+0x36c>)
 8001858:	4311      	orrs	r1, r2
 800185a:	468a      	mov	sl, r1
 800185c:	18eb      	adds	r3, r5, r3
 800185e:	2900      	cmp	r1, #0
 8001860:	d028      	beq.n	80018b4 <__aeabi_dsub+0x230>
 8001862:	4566      	cmp	r6, ip
 8001864:	d02c      	beq.n	80018c0 <__aeabi_dsub+0x23c>
 8001866:	2b00      	cmp	r3, #0
 8001868:	d05b      	beq.n	8001922 <__aeabi_dsub+0x29e>
 800186a:	2d00      	cmp	r5, #0
 800186c:	d100      	bne.n	8001870 <__aeabi_dsub+0x1ec>
 800186e:	e12c      	b.n	8001aca <__aeabi_dsub+0x446>
 8001870:	465b      	mov	r3, fp
 8001872:	4666      	mov	r6, ip
 8001874:	075f      	lsls	r7, r3, #29
 8001876:	08d2      	lsrs	r2, r2, #3
 8001878:	4317      	orrs	r7, r2
 800187a:	08dd      	lsrs	r5, r3, #3
 800187c:	003b      	movs	r3, r7
 800187e:	432b      	orrs	r3, r5
 8001880:	d100      	bne.n	8001884 <__aeabi_dsub+0x200>
 8001882:	e0e2      	b.n	8001a4a <__aeabi_dsub+0x3c6>
 8001884:	2480      	movs	r4, #128	@ 0x80
 8001886:	0324      	lsls	r4, r4, #12
 8001888:	432c      	orrs	r4, r5
 800188a:	0324      	lsls	r4, r4, #12
 800188c:	4d56      	ldr	r5, [pc, #344]	@ (80019e8 <__aeabi_dsub+0x364>)
 800188e:	0b24      	lsrs	r4, r4, #12
 8001890:	e08c      	b.n	80019ac <__aeabi_dsub+0x328>
 8001892:	4659      	mov	r1, fp
 8001894:	4311      	orrs	r1, r2
 8001896:	d100      	bne.n	800189a <__aeabi_dsub+0x216>
 8001898:	e0d5      	b.n	8001a46 <__aeabi_dsub+0x3c2>
 800189a:	1e59      	subs	r1, r3, #1
 800189c:	2b01      	cmp	r3, #1
 800189e:	d100      	bne.n	80018a2 <__aeabi_dsub+0x21e>
 80018a0:	e1b9      	b.n	8001c16 <__aeabi_dsub+0x592>
 80018a2:	42bb      	cmp	r3, r7
 80018a4:	d100      	bne.n	80018a8 <__aeabi_dsub+0x224>
 80018a6:	e1b1      	b.n	8001c0c <__aeabi_dsub+0x588>
 80018a8:	2701      	movs	r7, #1
 80018aa:	000b      	movs	r3, r1
 80018ac:	2938      	cmp	r1, #56	@ 0x38
 80018ae:	dd00      	ble.n	80018b2 <__aeabi_dsub+0x22e>
 80018b0:	e740      	b.n	8001734 <__aeabi_dsub+0xb0>
 80018b2:	e72a      	b.n	800170a <__aeabi_dsub+0x86>
 80018b4:	4661      	mov	r1, ip
 80018b6:	2701      	movs	r7, #1
 80018b8:	4079      	eors	r1, r7
 80018ba:	468c      	mov	ip, r1
 80018bc:	4566      	cmp	r6, ip
 80018be:	d1d2      	bne.n	8001866 <__aeabi_dsub+0x1e2>
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dsub+0x242>
 80018c4:	e0c5      	b.n	8001a52 <__aeabi_dsub+0x3ce>
 80018c6:	2d00      	cmp	r5, #0
 80018c8:	d000      	beq.n	80018cc <__aeabi_dsub+0x248>
 80018ca:	e155      	b.n	8001b78 <__aeabi_dsub+0x4f4>
 80018cc:	464b      	mov	r3, r9
 80018ce:	0025      	movs	r5, r4
 80018d0:	4305      	orrs	r5, r0
 80018d2:	d100      	bne.n	80018d6 <__aeabi_dsub+0x252>
 80018d4:	e212      	b.n	8001cfc <__aeabi_dsub+0x678>
 80018d6:	1e59      	subs	r1, r3, #1
 80018d8:	468c      	mov	ip, r1
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d100      	bne.n	80018e0 <__aeabi_dsub+0x25c>
 80018de:	e249      	b.n	8001d74 <__aeabi_dsub+0x6f0>
 80018e0:	4d41      	ldr	r5, [pc, #260]	@ (80019e8 <__aeabi_dsub+0x364>)
 80018e2:	42ab      	cmp	r3, r5
 80018e4:	d100      	bne.n	80018e8 <__aeabi_dsub+0x264>
 80018e6:	e28f      	b.n	8001e08 <__aeabi_dsub+0x784>
 80018e8:	2701      	movs	r7, #1
 80018ea:	2938      	cmp	r1, #56	@ 0x38
 80018ec:	dc11      	bgt.n	8001912 <__aeabi_dsub+0x28e>
 80018ee:	4663      	mov	r3, ip
 80018f0:	2b1f      	cmp	r3, #31
 80018f2:	dd00      	ble.n	80018f6 <__aeabi_dsub+0x272>
 80018f4:	e25b      	b.n	8001dae <__aeabi_dsub+0x72a>
 80018f6:	4661      	mov	r1, ip
 80018f8:	2320      	movs	r3, #32
 80018fa:	0027      	movs	r7, r4
 80018fc:	1a5b      	subs	r3, r3, r1
 80018fe:	0005      	movs	r5, r0
 8001900:	4098      	lsls	r0, r3
 8001902:	409f      	lsls	r7, r3
 8001904:	40cd      	lsrs	r5, r1
 8001906:	1e43      	subs	r3, r0, #1
 8001908:	4198      	sbcs	r0, r3
 800190a:	40cc      	lsrs	r4, r1
 800190c:	432f      	orrs	r7, r5
 800190e:	4307      	orrs	r7, r0
 8001910:	44a3      	add	fp, r4
 8001912:	18bf      	adds	r7, r7, r2
 8001914:	4297      	cmp	r7, r2
 8001916:	4192      	sbcs	r2, r2
 8001918:	4252      	negs	r2, r2
 800191a:	445a      	add	r2, fp
 800191c:	0014      	movs	r4, r2
 800191e:	464d      	mov	r5, r9
 8001920:	e787      	b.n	8001832 <__aeabi_dsub+0x1ae>
 8001922:	4f34      	ldr	r7, [pc, #208]	@ (80019f4 <__aeabi_dsub+0x370>)
 8001924:	1c6b      	adds	r3, r5, #1
 8001926:	423b      	tst	r3, r7
 8001928:	d000      	beq.n	800192c <__aeabi_dsub+0x2a8>
 800192a:	e0b6      	b.n	8001a9a <__aeabi_dsub+0x416>
 800192c:	4659      	mov	r1, fp
 800192e:	0023      	movs	r3, r4
 8001930:	4311      	orrs	r1, r2
 8001932:	000f      	movs	r7, r1
 8001934:	4303      	orrs	r3, r0
 8001936:	2d00      	cmp	r5, #0
 8001938:	d000      	beq.n	800193c <__aeabi_dsub+0x2b8>
 800193a:	e126      	b.n	8001b8a <__aeabi_dsub+0x506>
 800193c:	2b00      	cmp	r3, #0
 800193e:	d100      	bne.n	8001942 <__aeabi_dsub+0x2be>
 8001940:	e1c0      	b.n	8001cc4 <__aeabi_dsub+0x640>
 8001942:	2900      	cmp	r1, #0
 8001944:	d100      	bne.n	8001948 <__aeabi_dsub+0x2c4>
 8001946:	e0a1      	b.n	8001a8c <__aeabi_dsub+0x408>
 8001948:	1a83      	subs	r3, r0, r2
 800194a:	4698      	mov	r8, r3
 800194c:	465b      	mov	r3, fp
 800194e:	4540      	cmp	r0, r8
 8001950:	41ad      	sbcs	r5, r5
 8001952:	1ae3      	subs	r3, r4, r3
 8001954:	426d      	negs	r5, r5
 8001956:	1b5b      	subs	r3, r3, r5
 8001958:	2580      	movs	r5, #128	@ 0x80
 800195a:	042d      	lsls	r5, r5, #16
 800195c:	422b      	tst	r3, r5
 800195e:	d100      	bne.n	8001962 <__aeabi_dsub+0x2de>
 8001960:	e14b      	b.n	8001bfa <__aeabi_dsub+0x576>
 8001962:	465b      	mov	r3, fp
 8001964:	1a10      	subs	r0, r2, r0
 8001966:	4282      	cmp	r2, r0
 8001968:	4192      	sbcs	r2, r2
 800196a:	1b1c      	subs	r4, r3, r4
 800196c:	0007      	movs	r7, r0
 800196e:	2601      	movs	r6, #1
 8001970:	4663      	mov	r3, ip
 8001972:	4252      	negs	r2, r2
 8001974:	1aa4      	subs	r4, r4, r2
 8001976:	4327      	orrs	r7, r4
 8001978:	401e      	ands	r6, r3
 800197a:	2f00      	cmp	r7, #0
 800197c:	d100      	bne.n	8001980 <__aeabi_dsub+0x2fc>
 800197e:	e142      	b.n	8001c06 <__aeabi_dsub+0x582>
 8001980:	422c      	tst	r4, r5
 8001982:	d100      	bne.n	8001986 <__aeabi_dsub+0x302>
 8001984:	e26d      	b.n	8001e62 <__aeabi_dsub+0x7de>
 8001986:	4b19      	ldr	r3, [pc, #100]	@ (80019ec <__aeabi_dsub+0x368>)
 8001988:	2501      	movs	r5, #1
 800198a:	401c      	ands	r4, r3
 800198c:	e71b      	b.n	80017c6 <__aeabi_dsub+0x142>
 800198e:	42bd      	cmp	r5, r7
 8001990:	d100      	bne.n	8001994 <__aeabi_dsub+0x310>
 8001992:	e13b      	b.n	8001c0c <__aeabi_dsub+0x588>
 8001994:	2701      	movs	r7, #1
 8001996:	2b38      	cmp	r3, #56	@ 0x38
 8001998:	dd00      	ble.n	800199c <__aeabi_dsub+0x318>
 800199a:	e745      	b.n	8001828 <__aeabi_dsub+0x1a4>
 800199c:	2780      	movs	r7, #128	@ 0x80
 800199e:	4659      	mov	r1, fp
 80019a0:	043f      	lsls	r7, r7, #16
 80019a2:	4339      	orrs	r1, r7
 80019a4:	468b      	mov	fp, r1
 80019a6:	e72a      	b.n	80017fe <__aeabi_dsub+0x17a>
 80019a8:	2400      	movs	r4, #0
 80019aa:	2700      	movs	r7, #0
 80019ac:	052d      	lsls	r5, r5, #20
 80019ae:	4325      	orrs	r5, r4
 80019b0:	07f6      	lsls	r6, r6, #31
 80019b2:	4335      	orrs	r5, r6
 80019b4:	0038      	movs	r0, r7
 80019b6:	0029      	movs	r1, r5
 80019b8:	b003      	add	sp, #12
 80019ba:	bcf0      	pop	{r4, r5, r6, r7}
 80019bc:	46bb      	mov	fp, r7
 80019be:	46b2      	mov	sl, r6
 80019c0:	46a9      	mov	r9, r5
 80019c2:	46a0      	mov	r8, r4
 80019c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019c6:	077b      	lsls	r3, r7, #29
 80019c8:	d004      	beq.n	80019d4 <__aeabi_dsub+0x350>
 80019ca:	230f      	movs	r3, #15
 80019cc:	403b      	ands	r3, r7
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d000      	beq.n	80019d4 <__aeabi_dsub+0x350>
 80019d2:	e6e7      	b.n	80017a4 <__aeabi_dsub+0x120>
 80019d4:	002b      	movs	r3, r5
 80019d6:	08f8      	lsrs	r0, r7, #3
 80019d8:	4a03      	ldr	r2, [pc, #12]	@ (80019e8 <__aeabi_dsub+0x364>)
 80019da:	0767      	lsls	r7, r4, #29
 80019dc:	4307      	orrs	r7, r0
 80019de:	08e5      	lsrs	r5, r4, #3
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d100      	bne.n	80019e6 <__aeabi_dsub+0x362>
 80019e4:	e74a      	b.n	800187c <__aeabi_dsub+0x1f8>
 80019e6:	e0a5      	b.n	8001b34 <__aeabi_dsub+0x4b0>
 80019e8:	000007ff 	.word	0x000007ff
 80019ec:	ff7fffff 	.word	0xff7fffff
 80019f0:	fffff801 	.word	0xfffff801
 80019f4:	000007fe 	.word	0x000007fe
 80019f8:	0038      	movs	r0, r7
 80019fa:	f000 fb19 	bl	8002030 <__clzsi2>
 80019fe:	0003      	movs	r3, r0
 8001a00:	3318      	adds	r3, #24
 8001a02:	2b1f      	cmp	r3, #31
 8001a04:	dc00      	bgt.n	8001a08 <__aeabi_dsub+0x384>
 8001a06:	e6a7      	b.n	8001758 <__aeabi_dsub+0xd4>
 8001a08:	003a      	movs	r2, r7
 8001a0a:	3808      	subs	r0, #8
 8001a0c:	4082      	lsls	r2, r0
 8001a0e:	429d      	cmp	r5, r3
 8001a10:	dd00      	ble.n	8001a14 <__aeabi_dsub+0x390>
 8001a12:	e08a      	b.n	8001b2a <__aeabi_dsub+0x4a6>
 8001a14:	1b5b      	subs	r3, r3, r5
 8001a16:	1c58      	adds	r0, r3, #1
 8001a18:	281f      	cmp	r0, #31
 8001a1a:	dc00      	bgt.n	8001a1e <__aeabi_dsub+0x39a>
 8001a1c:	e1d8      	b.n	8001dd0 <__aeabi_dsub+0x74c>
 8001a1e:	0017      	movs	r7, r2
 8001a20:	3b1f      	subs	r3, #31
 8001a22:	40df      	lsrs	r7, r3
 8001a24:	2820      	cmp	r0, #32
 8001a26:	d005      	beq.n	8001a34 <__aeabi_dsub+0x3b0>
 8001a28:	2340      	movs	r3, #64	@ 0x40
 8001a2a:	1a1b      	subs	r3, r3, r0
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	1e53      	subs	r3, r2, #1
 8001a30:	419a      	sbcs	r2, r3
 8001a32:	4317      	orrs	r7, r2
 8001a34:	2500      	movs	r5, #0
 8001a36:	2f00      	cmp	r7, #0
 8001a38:	d100      	bne.n	8001a3c <__aeabi_dsub+0x3b8>
 8001a3a:	e0e5      	b.n	8001c08 <__aeabi_dsub+0x584>
 8001a3c:	077b      	lsls	r3, r7, #29
 8001a3e:	d000      	beq.n	8001a42 <__aeabi_dsub+0x3be>
 8001a40:	e6ab      	b.n	800179a <__aeabi_dsub+0x116>
 8001a42:	002c      	movs	r4, r5
 8001a44:	e7c6      	b.n	80019d4 <__aeabi_dsub+0x350>
 8001a46:	08c0      	lsrs	r0, r0, #3
 8001a48:	e7c6      	b.n	80019d8 <__aeabi_dsub+0x354>
 8001a4a:	2700      	movs	r7, #0
 8001a4c:	2400      	movs	r4, #0
 8001a4e:	4dd1      	ldr	r5, [pc, #836]	@ (8001d94 <__aeabi_dsub+0x710>)
 8001a50:	e7ac      	b.n	80019ac <__aeabi_dsub+0x328>
 8001a52:	4fd1      	ldr	r7, [pc, #836]	@ (8001d98 <__aeabi_dsub+0x714>)
 8001a54:	1c6b      	adds	r3, r5, #1
 8001a56:	423b      	tst	r3, r7
 8001a58:	d171      	bne.n	8001b3e <__aeabi_dsub+0x4ba>
 8001a5a:	0023      	movs	r3, r4
 8001a5c:	4303      	orrs	r3, r0
 8001a5e:	2d00      	cmp	r5, #0
 8001a60:	d000      	beq.n	8001a64 <__aeabi_dsub+0x3e0>
 8001a62:	e14e      	b.n	8001d02 <__aeabi_dsub+0x67e>
 8001a64:	4657      	mov	r7, sl
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d100      	bne.n	8001a6c <__aeabi_dsub+0x3e8>
 8001a6a:	e1b5      	b.n	8001dd8 <__aeabi_dsub+0x754>
 8001a6c:	2f00      	cmp	r7, #0
 8001a6e:	d00d      	beq.n	8001a8c <__aeabi_dsub+0x408>
 8001a70:	1883      	adds	r3, r0, r2
 8001a72:	4283      	cmp	r3, r0
 8001a74:	4180      	sbcs	r0, r0
 8001a76:	445c      	add	r4, fp
 8001a78:	4240      	negs	r0, r0
 8001a7a:	1824      	adds	r4, r4, r0
 8001a7c:	0222      	lsls	r2, r4, #8
 8001a7e:	d500      	bpl.n	8001a82 <__aeabi_dsub+0x3fe>
 8001a80:	e1c8      	b.n	8001e14 <__aeabi_dsub+0x790>
 8001a82:	001f      	movs	r7, r3
 8001a84:	4698      	mov	r8, r3
 8001a86:	4327      	orrs	r7, r4
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0x408>
 8001a8a:	e0bc      	b.n	8001c06 <__aeabi_dsub+0x582>
 8001a8c:	4643      	mov	r3, r8
 8001a8e:	0767      	lsls	r7, r4, #29
 8001a90:	08db      	lsrs	r3, r3, #3
 8001a92:	431f      	orrs	r7, r3
 8001a94:	08e5      	lsrs	r5, r4, #3
 8001a96:	2300      	movs	r3, #0
 8001a98:	e04c      	b.n	8001b34 <__aeabi_dsub+0x4b0>
 8001a9a:	1a83      	subs	r3, r0, r2
 8001a9c:	4698      	mov	r8, r3
 8001a9e:	465b      	mov	r3, fp
 8001aa0:	4540      	cmp	r0, r8
 8001aa2:	41bf      	sbcs	r7, r7
 8001aa4:	1ae3      	subs	r3, r4, r3
 8001aa6:	427f      	negs	r7, r7
 8001aa8:	1bdb      	subs	r3, r3, r7
 8001aaa:	021f      	lsls	r7, r3, #8
 8001aac:	d47c      	bmi.n	8001ba8 <__aeabi_dsub+0x524>
 8001aae:	4647      	mov	r7, r8
 8001ab0:	431f      	orrs	r7, r3
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dsub+0x432>
 8001ab4:	e0a6      	b.n	8001c04 <__aeabi_dsub+0x580>
 8001ab6:	001c      	movs	r4, r3
 8001ab8:	4647      	mov	r7, r8
 8001aba:	e645      	b.n	8001748 <__aeabi_dsub+0xc4>
 8001abc:	4cb7      	ldr	r4, [pc, #732]	@ (8001d9c <__aeabi_dsub+0x718>)
 8001abe:	1aed      	subs	r5, r5, r3
 8001ac0:	4014      	ands	r4, r2
 8001ac2:	077b      	lsls	r3, r7, #29
 8001ac4:	d000      	beq.n	8001ac8 <__aeabi_dsub+0x444>
 8001ac6:	e780      	b.n	80019ca <__aeabi_dsub+0x346>
 8001ac8:	e784      	b.n	80019d4 <__aeabi_dsub+0x350>
 8001aca:	464b      	mov	r3, r9
 8001acc:	0025      	movs	r5, r4
 8001ace:	4305      	orrs	r5, r0
 8001ad0:	d066      	beq.n	8001ba0 <__aeabi_dsub+0x51c>
 8001ad2:	1e5f      	subs	r7, r3, #1
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d100      	bne.n	8001ada <__aeabi_dsub+0x456>
 8001ad8:	e0fc      	b.n	8001cd4 <__aeabi_dsub+0x650>
 8001ada:	4dae      	ldr	r5, [pc, #696]	@ (8001d94 <__aeabi_dsub+0x710>)
 8001adc:	42ab      	cmp	r3, r5
 8001ade:	d100      	bne.n	8001ae2 <__aeabi_dsub+0x45e>
 8001ae0:	e15e      	b.n	8001da0 <__aeabi_dsub+0x71c>
 8001ae2:	4666      	mov	r6, ip
 8001ae4:	2f38      	cmp	r7, #56	@ 0x38
 8001ae6:	dc00      	bgt.n	8001aea <__aeabi_dsub+0x466>
 8001ae8:	e0b4      	b.n	8001c54 <__aeabi_dsub+0x5d0>
 8001aea:	2001      	movs	r0, #1
 8001aec:	1a17      	subs	r7, r2, r0
 8001aee:	42ba      	cmp	r2, r7
 8001af0:	4192      	sbcs	r2, r2
 8001af2:	465b      	mov	r3, fp
 8001af4:	4252      	negs	r2, r2
 8001af6:	464d      	mov	r5, r9
 8001af8:	1a9c      	subs	r4, r3, r2
 8001afa:	e620      	b.n	800173e <__aeabi_dsub+0xba>
 8001afc:	0767      	lsls	r7, r4, #29
 8001afe:	08c0      	lsrs	r0, r0, #3
 8001b00:	4307      	orrs	r7, r0
 8001b02:	08e5      	lsrs	r5, r4, #3
 8001b04:	e6ba      	b.n	800187c <__aeabi_dsub+0x1f8>
 8001b06:	001f      	movs	r7, r3
 8001b08:	4659      	mov	r1, fp
 8001b0a:	3f20      	subs	r7, #32
 8001b0c:	40f9      	lsrs	r1, r7
 8001b0e:	000f      	movs	r7, r1
 8001b10:	2b20      	cmp	r3, #32
 8001b12:	d005      	beq.n	8001b20 <__aeabi_dsub+0x49c>
 8001b14:	2140      	movs	r1, #64	@ 0x40
 8001b16:	1acb      	subs	r3, r1, r3
 8001b18:	4659      	mov	r1, fp
 8001b1a:	4099      	lsls	r1, r3
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	4692      	mov	sl, r2
 8001b20:	4653      	mov	r3, sl
 8001b22:	1e5a      	subs	r2, r3, #1
 8001b24:	4193      	sbcs	r3, r2
 8001b26:	431f      	orrs	r7, r3
 8001b28:	e604      	b.n	8001734 <__aeabi_dsub+0xb0>
 8001b2a:	1aeb      	subs	r3, r5, r3
 8001b2c:	4d9b      	ldr	r5, [pc, #620]	@ (8001d9c <__aeabi_dsub+0x718>)
 8001b2e:	4015      	ands	r5, r2
 8001b30:	076f      	lsls	r7, r5, #29
 8001b32:	08ed      	lsrs	r5, r5, #3
 8001b34:	032c      	lsls	r4, r5, #12
 8001b36:	055d      	lsls	r5, r3, #21
 8001b38:	0b24      	lsrs	r4, r4, #12
 8001b3a:	0d6d      	lsrs	r5, r5, #21
 8001b3c:	e736      	b.n	80019ac <__aeabi_dsub+0x328>
 8001b3e:	4d95      	ldr	r5, [pc, #596]	@ (8001d94 <__aeabi_dsub+0x710>)
 8001b40:	42ab      	cmp	r3, r5
 8001b42:	d100      	bne.n	8001b46 <__aeabi_dsub+0x4c2>
 8001b44:	e0d6      	b.n	8001cf4 <__aeabi_dsub+0x670>
 8001b46:	1882      	adds	r2, r0, r2
 8001b48:	0021      	movs	r1, r4
 8001b4a:	4282      	cmp	r2, r0
 8001b4c:	4180      	sbcs	r0, r0
 8001b4e:	4459      	add	r1, fp
 8001b50:	4240      	negs	r0, r0
 8001b52:	1808      	adds	r0, r1, r0
 8001b54:	07c7      	lsls	r7, r0, #31
 8001b56:	0852      	lsrs	r2, r2, #1
 8001b58:	4317      	orrs	r7, r2
 8001b5a:	0844      	lsrs	r4, r0, #1
 8001b5c:	0752      	lsls	r2, r2, #29
 8001b5e:	d400      	bmi.n	8001b62 <__aeabi_dsub+0x4de>
 8001b60:	e185      	b.n	8001e6e <__aeabi_dsub+0x7ea>
 8001b62:	220f      	movs	r2, #15
 8001b64:	001d      	movs	r5, r3
 8001b66:	403a      	ands	r2, r7
 8001b68:	2a04      	cmp	r2, #4
 8001b6a:	d000      	beq.n	8001b6e <__aeabi_dsub+0x4ea>
 8001b6c:	e61a      	b.n	80017a4 <__aeabi_dsub+0x120>
 8001b6e:	08ff      	lsrs	r7, r7, #3
 8001b70:	0764      	lsls	r4, r4, #29
 8001b72:	4327      	orrs	r7, r4
 8001b74:	0905      	lsrs	r5, r0, #4
 8001b76:	e7dd      	b.n	8001b34 <__aeabi_dsub+0x4b0>
 8001b78:	465b      	mov	r3, fp
 8001b7a:	08d2      	lsrs	r2, r2, #3
 8001b7c:	075f      	lsls	r7, r3, #29
 8001b7e:	4317      	orrs	r7, r2
 8001b80:	08dd      	lsrs	r5, r3, #3
 8001b82:	e67b      	b.n	800187c <__aeabi_dsub+0x1f8>
 8001b84:	2700      	movs	r7, #0
 8001b86:	2400      	movs	r4, #0
 8001b88:	e710      	b.n	80019ac <__aeabi_dsub+0x328>
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d000      	beq.n	8001b90 <__aeabi_dsub+0x50c>
 8001b8e:	e0d6      	b.n	8001d3e <__aeabi_dsub+0x6ba>
 8001b90:	2900      	cmp	r1, #0
 8001b92:	d000      	beq.n	8001b96 <__aeabi_dsub+0x512>
 8001b94:	e12f      	b.n	8001df6 <__aeabi_dsub+0x772>
 8001b96:	2480      	movs	r4, #128	@ 0x80
 8001b98:	2600      	movs	r6, #0
 8001b9a:	4d7e      	ldr	r5, [pc, #504]	@ (8001d94 <__aeabi_dsub+0x710>)
 8001b9c:	0324      	lsls	r4, r4, #12
 8001b9e:	e705      	b.n	80019ac <__aeabi_dsub+0x328>
 8001ba0:	4666      	mov	r6, ip
 8001ba2:	465c      	mov	r4, fp
 8001ba4:	08d0      	lsrs	r0, r2, #3
 8001ba6:	e717      	b.n	80019d8 <__aeabi_dsub+0x354>
 8001ba8:	465b      	mov	r3, fp
 8001baa:	1a17      	subs	r7, r2, r0
 8001bac:	42ba      	cmp	r2, r7
 8001bae:	4192      	sbcs	r2, r2
 8001bb0:	1b1c      	subs	r4, r3, r4
 8001bb2:	2601      	movs	r6, #1
 8001bb4:	4663      	mov	r3, ip
 8001bb6:	4252      	negs	r2, r2
 8001bb8:	1aa4      	subs	r4, r4, r2
 8001bba:	401e      	ands	r6, r3
 8001bbc:	e5c4      	b.n	8001748 <__aeabi_dsub+0xc4>
 8001bbe:	1883      	adds	r3, r0, r2
 8001bc0:	4283      	cmp	r3, r0
 8001bc2:	4180      	sbcs	r0, r0
 8001bc4:	445c      	add	r4, fp
 8001bc6:	4240      	negs	r0, r0
 8001bc8:	1825      	adds	r5, r4, r0
 8001bca:	022a      	lsls	r2, r5, #8
 8001bcc:	d400      	bmi.n	8001bd0 <__aeabi_dsub+0x54c>
 8001bce:	e0da      	b.n	8001d86 <__aeabi_dsub+0x702>
 8001bd0:	4a72      	ldr	r2, [pc, #456]	@ (8001d9c <__aeabi_dsub+0x718>)
 8001bd2:	085b      	lsrs	r3, r3, #1
 8001bd4:	4015      	ands	r5, r2
 8001bd6:	07ea      	lsls	r2, r5, #31
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	0869      	lsrs	r1, r5, #1
 8001bdc:	075b      	lsls	r3, r3, #29
 8001bde:	d400      	bmi.n	8001be2 <__aeabi_dsub+0x55e>
 8001be0:	e14a      	b.n	8001e78 <__aeabi_dsub+0x7f4>
 8001be2:	230f      	movs	r3, #15
 8001be4:	4013      	ands	r3, r2
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d100      	bne.n	8001bec <__aeabi_dsub+0x568>
 8001bea:	e0fc      	b.n	8001de6 <__aeabi_dsub+0x762>
 8001bec:	1d17      	adds	r7, r2, #4
 8001bee:	4297      	cmp	r7, r2
 8001bf0:	41a4      	sbcs	r4, r4
 8001bf2:	4264      	negs	r4, r4
 8001bf4:	2502      	movs	r5, #2
 8001bf6:	1864      	adds	r4, r4, r1
 8001bf8:	e6ec      	b.n	80019d4 <__aeabi_dsub+0x350>
 8001bfa:	4647      	mov	r7, r8
 8001bfc:	001c      	movs	r4, r3
 8001bfe:	431f      	orrs	r7, r3
 8001c00:	d000      	beq.n	8001c04 <__aeabi_dsub+0x580>
 8001c02:	e743      	b.n	8001a8c <__aeabi_dsub+0x408>
 8001c04:	2600      	movs	r6, #0
 8001c06:	2500      	movs	r5, #0
 8001c08:	2400      	movs	r4, #0
 8001c0a:	e6cf      	b.n	80019ac <__aeabi_dsub+0x328>
 8001c0c:	08c0      	lsrs	r0, r0, #3
 8001c0e:	0767      	lsls	r7, r4, #29
 8001c10:	4307      	orrs	r7, r0
 8001c12:	08e5      	lsrs	r5, r4, #3
 8001c14:	e632      	b.n	800187c <__aeabi_dsub+0x1f8>
 8001c16:	1a87      	subs	r7, r0, r2
 8001c18:	465b      	mov	r3, fp
 8001c1a:	42b8      	cmp	r0, r7
 8001c1c:	4180      	sbcs	r0, r0
 8001c1e:	1ae4      	subs	r4, r4, r3
 8001c20:	4240      	negs	r0, r0
 8001c22:	1a24      	subs	r4, r4, r0
 8001c24:	0223      	lsls	r3, r4, #8
 8001c26:	d428      	bmi.n	8001c7a <__aeabi_dsub+0x5f6>
 8001c28:	0763      	lsls	r3, r4, #29
 8001c2a:	08ff      	lsrs	r7, r7, #3
 8001c2c:	431f      	orrs	r7, r3
 8001c2e:	08e5      	lsrs	r5, r4, #3
 8001c30:	2301      	movs	r3, #1
 8001c32:	e77f      	b.n	8001b34 <__aeabi_dsub+0x4b0>
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d100      	bne.n	8001c3a <__aeabi_dsub+0x5b6>
 8001c38:	e673      	b.n	8001922 <__aeabi_dsub+0x29e>
 8001c3a:	464b      	mov	r3, r9
 8001c3c:	1b5f      	subs	r7, r3, r5
 8001c3e:	003b      	movs	r3, r7
 8001c40:	2d00      	cmp	r5, #0
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dsub+0x5c2>
 8001c44:	e742      	b.n	8001acc <__aeabi_dsub+0x448>
 8001c46:	2f38      	cmp	r7, #56	@ 0x38
 8001c48:	dd00      	ble.n	8001c4c <__aeabi_dsub+0x5c8>
 8001c4a:	e0ec      	b.n	8001e26 <__aeabi_dsub+0x7a2>
 8001c4c:	2380      	movs	r3, #128	@ 0x80
 8001c4e:	000e      	movs	r6, r1
 8001c50:	041b      	lsls	r3, r3, #16
 8001c52:	431c      	orrs	r4, r3
 8001c54:	2f1f      	cmp	r7, #31
 8001c56:	dc25      	bgt.n	8001ca4 <__aeabi_dsub+0x620>
 8001c58:	2520      	movs	r5, #32
 8001c5a:	0023      	movs	r3, r4
 8001c5c:	1bed      	subs	r5, r5, r7
 8001c5e:	0001      	movs	r1, r0
 8001c60:	40a8      	lsls	r0, r5
 8001c62:	40ab      	lsls	r3, r5
 8001c64:	40f9      	lsrs	r1, r7
 8001c66:	1e45      	subs	r5, r0, #1
 8001c68:	41a8      	sbcs	r0, r5
 8001c6a:	430b      	orrs	r3, r1
 8001c6c:	40fc      	lsrs	r4, r7
 8001c6e:	4318      	orrs	r0, r3
 8001c70:	465b      	mov	r3, fp
 8001c72:	1b1b      	subs	r3, r3, r4
 8001c74:	469b      	mov	fp, r3
 8001c76:	e739      	b.n	8001aec <__aeabi_dsub+0x468>
 8001c78:	4666      	mov	r6, ip
 8001c7a:	2501      	movs	r5, #1
 8001c7c:	e562      	b.n	8001744 <__aeabi_dsub+0xc0>
 8001c7e:	001f      	movs	r7, r3
 8001c80:	4659      	mov	r1, fp
 8001c82:	3f20      	subs	r7, #32
 8001c84:	40f9      	lsrs	r1, r7
 8001c86:	468c      	mov	ip, r1
 8001c88:	2b20      	cmp	r3, #32
 8001c8a:	d005      	beq.n	8001c98 <__aeabi_dsub+0x614>
 8001c8c:	2740      	movs	r7, #64	@ 0x40
 8001c8e:	4659      	mov	r1, fp
 8001c90:	1afb      	subs	r3, r7, r3
 8001c92:	4099      	lsls	r1, r3
 8001c94:	430a      	orrs	r2, r1
 8001c96:	4692      	mov	sl, r2
 8001c98:	4657      	mov	r7, sl
 8001c9a:	1e7b      	subs	r3, r7, #1
 8001c9c:	419f      	sbcs	r7, r3
 8001c9e:	4663      	mov	r3, ip
 8001ca0:	431f      	orrs	r7, r3
 8001ca2:	e5c1      	b.n	8001828 <__aeabi_dsub+0x1a4>
 8001ca4:	003b      	movs	r3, r7
 8001ca6:	0025      	movs	r5, r4
 8001ca8:	3b20      	subs	r3, #32
 8001caa:	40dd      	lsrs	r5, r3
 8001cac:	2f20      	cmp	r7, #32
 8001cae:	d004      	beq.n	8001cba <__aeabi_dsub+0x636>
 8001cb0:	2340      	movs	r3, #64	@ 0x40
 8001cb2:	1bdb      	subs	r3, r3, r7
 8001cb4:	409c      	lsls	r4, r3
 8001cb6:	4320      	orrs	r0, r4
 8001cb8:	4680      	mov	r8, r0
 8001cba:	4640      	mov	r0, r8
 8001cbc:	1e43      	subs	r3, r0, #1
 8001cbe:	4198      	sbcs	r0, r3
 8001cc0:	4328      	orrs	r0, r5
 8001cc2:	e713      	b.n	8001aec <__aeabi_dsub+0x468>
 8001cc4:	2900      	cmp	r1, #0
 8001cc6:	d09d      	beq.n	8001c04 <__aeabi_dsub+0x580>
 8001cc8:	2601      	movs	r6, #1
 8001cca:	4663      	mov	r3, ip
 8001ccc:	465c      	mov	r4, fp
 8001cce:	4690      	mov	r8, r2
 8001cd0:	401e      	ands	r6, r3
 8001cd2:	e6db      	b.n	8001a8c <__aeabi_dsub+0x408>
 8001cd4:	1a17      	subs	r7, r2, r0
 8001cd6:	465b      	mov	r3, fp
 8001cd8:	42ba      	cmp	r2, r7
 8001cda:	4192      	sbcs	r2, r2
 8001cdc:	1b1c      	subs	r4, r3, r4
 8001cde:	4252      	negs	r2, r2
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	0223      	lsls	r3, r4, #8
 8001ce4:	d4c8      	bmi.n	8001c78 <__aeabi_dsub+0x5f4>
 8001ce6:	0763      	lsls	r3, r4, #29
 8001ce8:	08ff      	lsrs	r7, r7, #3
 8001cea:	431f      	orrs	r7, r3
 8001cec:	4666      	mov	r6, ip
 8001cee:	2301      	movs	r3, #1
 8001cf0:	08e5      	lsrs	r5, r4, #3
 8001cf2:	e71f      	b.n	8001b34 <__aeabi_dsub+0x4b0>
 8001cf4:	001d      	movs	r5, r3
 8001cf6:	2400      	movs	r4, #0
 8001cf8:	2700      	movs	r7, #0
 8001cfa:	e657      	b.n	80019ac <__aeabi_dsub+0x328>
 8001cfc:	465c      	mov	r4, fp
 8001cfe:	08d0      	lsrs	r0, r2, #3
 8001d00:	e66a      	b.n	80019d8 <__aeabi_dsub+0x354>
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d100      	bne.n	8001d08 <__aeabi_dsub+0x684>
 8001d06:	e737      	b.n	8001b78 <__aeabi_dsub+0x4f4>
 8001d08:	4653      	mov	r3, sl
 8001d0a:	08c0      	lsrs	r0, r0, #3
 8001d0c:	0767      	lsls	r7, r4, #29
 8001d0e:	4307      	orrs	r7, r0
 8001d10:	08e5      	lsrs	r5, r4, #3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d100      	bne.n	8001d18 <__aeabi_dsub+0x694>
 8001d16:	e5b1      	b.n	800187c <__aeabi_dsub+0x1f8>
 8001d18:	2380      	movs	r3, #128	@ 0x80
 8001d1a:	031b      	lsls	r3, r3, #12
 8001d1c:	421d      	tst	r5, r3
 8001d1e:	d008      	beq.n	8001d32 <__aeabi_dsub+0x6ae>
 8001d20:	4659      	mov	r1, fp
 8001d22:	08c8      	lsrs	r0, r1, #3
 8001d24:	4218      	tst	r0, r3
 8001d26:	d104      	bne.n	8001d32 <__aeabi_dsub+0x6ae>
 8001d28:	08d2      	lsrs	r2, r2, #3
 8001d2a:	0749      	lsls	r1, r1, #29
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	0017      	movs	r7, r2
 8001d30:	0005      	movs	r5, r0
 8001d32:	0f7b      	lsrs	r3, r7, #29
 8001d34:	00ff      	lsls	r7, r7, #3
 8001d36:	08ff      	lsrs	r7, r7, #3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	431f      	orrs	r7, r3
 8001d3c:	e59e      	b.n	800187c <__aeabi_dsub+0x1f8>
 8001d3e:	08c0      	lsrs	r0, r0, #3
 8001d40:	0763      	lsls	r3, r4, #29
 8001d42:	4318      	orrs	r0, r3
 8001d44:	08e5      	lsrs	r5, r4, #3
 8001d46:	2900      	cmp	r1, #0
 8001d48:	d053      	beq.n	8001df2 <__aeabi_dsub+0x76e>
 8001d4a:	2380      	movs	r3, #128	@ 0x80
 8001d4c:	031b      	lsls	r3, r3, #12
 8001d4e:	421d      	tst	r5, r3
 8001d50:	d00a      	beq.n	8001d68 <__aeabi_dsub+0x6e4>
 8001d52:	4659      	mov	r1, fp
 8001d54:	08cc      	lsrs	r4, r1, #3
 8001d56:	421c      	tst	r4, r3
 8001d58:	d106      	bne.n	8001d68 <__aeabi_dsub+0x6e4>
 8001d5a:	2601      	movs	r6, #1
 8001d5c:	4663      	mov	r3, ip
 8001d5e:	0025      	movs	r5, r4
 8001d60:	08d0      	lsrs	r0, r2, #3
 8001d62:	0749      	lsls	r1, r1, #29
 8001d64:	4308      	orrs	r0, r1
 8001d66:	401e      	ands	r6, r3
 8001d68:	0f47      	lsrs	r7, r0, #29
 8001d6a:	00c0      	lsls	r0, r0, #3
 8001d6c:	08c0      	lsrs	r0, r0, #3
 8001d6e:	077f      	lsls	r7, r7, #29
 8001d70:	4307      	orrs	r7, r0
 8001d72:	e583      	b.n	800187c <__aeabi_dsub+0x1f8>
 8001d74:	1883      	adds	r3, r0, r2
 8001d76:	4293      	cmp	r3, r2
 8001d78:	4192      	sbcs	r2, r2
 8001d7a:	445c      	add	r4, fp
 8001d7c:	4252      	negs	r2, r2
 8001d7e:	18a5      	adds	r5, r4, r2
 8001d80:	022a      	lsls	r2, r5, #8
 8001d82:	d500      	bpl.n	8001d86 <__aeabi_dsub+0x702>
 8001d84:	e724      	b.n	8001bd0 <__aeabi_dsub+0x54c>
 8001d86:	076f      	lsls	r7, r5, #29
 8001d88:	08db      	lsrs	r3, r3, #3
 8001d8a:	431f      	orrs	r7, r3
 8001d8c:	08ed      	lsrs	r5, r5, #3
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e6d0      	b.n	8001b34 <__aeabi_dsub+0x4b0>
 8001d92:	46c0      	nop			@ (mov r8, r8)
 8001d94:	000007ff 	.word	0x000007ff
 8001d98:	000007fe 	.word	0x000007fe
 8001d9c:	ff7fffff 	.word	0xff7fffff
 8001da0:	465b      	mov	r3, fp
 8001da2:	08d2      	lsrs	r2, r2, #3
 8001da4:	075f      	lsls	r7, r3, #29
 8001da6:	4666      	mov	r6, ip
 8001da8:	4317      	orrs	r7, r2
 8001daa:	08dd      	lsrs	r5, r3, #3
 8001dac:	e566      	b.n	800187c <__aeabi_dsub+0x1f8>
 8001dae:	0025      	movs	r5, r4
 8001db0:	3b20      	subs	r3, #32
 8001db2:	40dd      	lsrs	r5, r3
 8001db4:	4663      	mov	r3, ip
 8001db6:	2b20      	cmp	r3, #32
 8001db8:	d005      	beq.n	8001dc6 <__aeabi_dsub+0x742>
 8001dba:	2340      	movs	r3, #64	@ 0x40
 8001dbc:	4661      	mov	r1, ip
 8001dbe:	1a5b      	subs	r3, r3, r1
 8001dc0:	409c      	lsls	r4, r3
 8001dc2:	4320      	orrs	r0, r4
 8001dc4:	4680      	mov	r8, r0
 8001dc6:	4647      	mov	r7, r8
 8001dc8:	1e7b      	subs	r3, r7, #1
 8001dca:	419f      	sbcs	r7, r3
 8001dcc:	432f      	orrs	r7, r5
 8001dce:	e5a0      	b.n	8001912 <__aeabi_dsub+0x28e>
 8001dd0:	2120      	movs	r1, #32
 8001dd2:	2700      	movs	r7, #0
 8001dd4:	1a09      	subs	r1, r1, r0
 8001dd6:	e4d2      	b.n	800177e <__aeabi_dsub+0xfa>
 8001dd8:	2f00      	cmp	r7, #0
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x75a>
 8001ddc:	e713      	b.n	8001c06 <__aeabi_dsub+0x582>
 8001dde:	465c      	mov	r4, fp
 8001de0:	0017      	movs	r7, r2
 8001de2:	2500      	movs	r5, #0
 8001de4:	e5f6      	b.n	80019d4 <__aeabi_dsub+0x350>
 8001de6:	08d7      	lsrs	r7, r2, #3
 8001de8:	0749      	lsls	r1, r1, #29
 8001dea:	2302      	movs	r3, #2
 8001dec:	430f      	orrs	r7, r1
 8001dee:	092d      	lsrs	r5, r5, #4
 8001df0:	e6a0      	b.n	8001b34 <__aeabi_dsub+0x4b0>
 8001df2:	0007      	movs	r7, r0
 8001df4:	e542      	b.n	800187c <__aeabi_dsub+0x1f8>
 8001df6:	465b      	mov	r3, fp
 8001df8:	2601      	movs	r6, #1
 8001dfa:	075f      	lsls	r7, r3, #29
 8001dfc:	08dd      	lsrs	r5, r3, #3
 8001dfe:	4663      	mov	r3, ip
 8001e00:	08d2      	lsrs	r2, r2, #3
 8001e02:	4317      	orrs	r7, r2
 8001e04:	401e      	ands	r6, r3
 8001e06:	e539      	b.n	800187c <__aeabi_dsub+0x1f8>
 8001e08:	465b      	mov	r3, fp
 8001e0a:	08d2      	lsrs	r2, r2, #3
 8001e0c:	075f      	lsls	r7, r3, #29
 8001e0e:	4317      	orrs	r7, r2
 8001e10:	08dd      	lsrs	r5, r3, #3
 8001e12:	e533      	b.n	800187c <__aeabi_dsub+0x1f8>
 8001e14:	4a1e      	ldr	r2, [pc, #120]	@ (8001e90 <__aeabi_dsub+0x80c>)
 8001e16:	08db      	lsrs	r3, r3, #3
 8001e18:	4022      	ands	r2, r4
 8001e1a:	0757      	lsls	r7, r2, #29
 8001e1c:	0252      	lsls	r2, r2, #9
 8001e1e:	2501      	movs	r5, #1
 8001e20:	431f      	orrs	r7, r3
 8001e22:	0b14      	lsrs	r4, r2, #12
 8001e24:	e5c2      	b.n	80019ac <__aeabi_dsub+0x328>
 8001e26:	000e      	movs	r6, r1
 8001e28:	2001      	movs	r0, #1
 8001e2a:	e65f      	b.n	8001aec <__aeabi_dsub+0x468>
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00d      	beq.n	8001e4c <__aeabi_dsub+0x7c8>
 8001e30:	464b      	mov	r3, r9
 8001e32:	1b5b      	subs	r3, r3, r5
 8001e34:	469c      	mov	ip, r3
 8001e36:	2d00      	cmp	r5, #0
 8001e38:	d100      	bne.n	8001e3c <__aeabi_dsub+0x7b8>
 8001e3a:	e548      	b.n	80018ce <__aeabi_dsub+0x24a>
 8001e3c:	2701      	movs	r7, #1
 8001e3e:	2b38      	cmp	r3, #56	@ 0x38
 8001e40:	dd00      	ble.n	8001e44 <__aeabi_dsub+0x7c0>
 8001e42:	e566      	b.n	8001912 <__aeabi_dsub+0x28e>
 8001e44:	2380      	movs	r3, #128	@ 0x80
 8001e46:	041b      	lsls	r3, r3, #16
 8001e48:	431c      	orrs	r4, r3
 8001e4a:	e550      	b.n	80018ee <__aeabi_dsub+0x26a>
 8001e4c:	1c6b      	adds	r3, r5, #1
 8001e4e:	4d11      	ldr	r5, [pc, #68]	@ (8001e94 <__aeabi_dsub+0x810>)
 8001e50:	422b      	tst	r3, r5
 8001e52:	d000      	beq.n	8001e56 <__aeabi_dsub+0x7d2>
 8001e54:	e673      	b.n	8001b3e <__aeabi_dsub+0x4ba>
 8001e56:	4659      	mov	r1, fp
 8001e58:	0023      	movs	r3, r4
 8001e5a:	4311      	orrs	r1, r2
 8001e5c:	468a      	mov	sl, r1
 8001e5e:	4303      	orrs	r3, r0
 8001e60:	e600      	b.n	8001a64 <__aeabi_dsub+0x3e0>
 8001e62:	0767      	lsls	r7, r4, #29
 8001e64:	08c0      	lsrs	r0, r0, #3
 8001e66:	2300      	movs	r3, #0
 8001e68:	4307      	orrs	r7, r0
 8001e6a:	08e5      	lsrs	r5, r4, #3
 8001e6c:	e662      	b.n	8001b34 <__aeabi_dsub+0x4b0>
 8001e6e:	0764      	lsls	r4, r4, #29
 8001e70:	08ff      	lsrs	r7, r7, #3
 8001e72:	4327      	orrs	r7, r4
 8001e74:	0905      	lsrs	r5, r0, #4
 8001e76:	e65d      	b.n	8001b34 <__aeabi_dsub+0x4b0>
 8001e78:	08d2      	lsrs	r2, r2, #3
 8001e7a:	0749      	lsls	r1, r1, #29
 8001e7c:	4311      	orrs	r1, r2
 8001e7e:	000f      	movs	r7, r1
 8001e80:	2302      	movs	r3, #2
 8001e82:	092d      	lsrs	r5, r5, #4
 8001e84:	e656      	b.n	8001b34 <__aeabi_dsub+0x4b0>
 8001e86:	0007      	movs	r7, r0
 8001e88:	e5a4      	b.n	80019d4 <__aeabi_dsub+0x350>
 8001e8a:	0038      	movs	r0, r7
 8001e8c:	e48f      	b.n	80017ae <__aeabi_dsub+0x12a>
 8001e8e:	46c0      	nop			@ (mov r8, r8)
 8001e90:	ff7fffff 	.word	0xff7fffff
 8001e94:	000007fe 	.word	0x000007fe

08001e98 <__aeabi_d2iz>:
 8001e98:	000b      	movs	r3, r1
 8001e9a:	0002      	movs	r2, r0
 8001e9c:	b570      	push	{r4, r5, r6, lr}
 8001e9e:	4d16      	ldr	r5, [pc, #88]	@ (8001ef8 <__aeabi_d2iz+0x60>)
 8001ea0:	030c      	lsls	r4, r1, #12
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	0049      	lsls	r1, r1, #1
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	9200      	str	r2, [sp, #0]
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	0b24      	lsrs	r4, r4, #12
 8001eae:	0d49      	lsrs	r1, r1, #21
 8001eb0:	0fde      	lsrs	r6, r3, #31
 8001eb2:	42a9      	cmp	r1, r5
 8001eb4:	dd04      	ble.n	8001ec0 <__aeabi_d2iz+0x28>
 8001eb6:	4811      	ldr	r0, [pc, #68]	@ (8001efc <__aeabi_d2iz+0x64>)
 8001eb8:	4281      	cmp	r1, r0
 8001eba:	dd03      	ble.n	8001ec4 <__aeabi_d2iz+0x2c>
 8001ebc:	4b10      	ldr	r3, [pc, #64]	@ (8001f00 <__aeabi_d2iz+0x68>)
 8001ebe:	18f0      	adds	r0, r6, r3
 8001ec0:	b002      	add	sp, #8
 8001ec2:	bd70      	pop	{r4, r5, r6, pc}
 8001ec4:	2080      	movs	r0, #128	@ 0x80
 8001ec6:	0340      	lsls	r0, r0, #13
 8001ec8:	4320      	orrs	r0, r4
 8001eca:	4c0e      	ldr	r4, [pc, #56]	@ (8001f04 <__aeabi_d2iz+0x6c>)
 8001ecc:	1a64      	subs	r4, r4, r1
 8001ece:	2c1f      	cmp	r4, #31
 8001ed0:	dd08      	ble.n	8001ee4 <__aeabi_d2iz+0x4c>
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f08 <__aeabi_d2iz+0x70>)
 8001ed4:	1a5b      	subs	r3, r3, r1
 8001ed6:	40d8      	lsrs	r0, r3
 8001ed8:	0003      	movs	r3, r0
 8001eda:	4258      	negs	r0, r3
 8001edc:	2e00      	cmp	r6, #0
 8001ede:	d1ef      	bne.n	8001ec0 <__aeabi_d2iz+0x28>
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	e7ed      	b.n	8001ec0 <__aeabi_d2iz+0x28>
 8001ee4:	4b09      	ldr	r3, [pc, #36]	@ (8001f0c <__aeabi_d2iz+0x74>)
 8001ee6:	9a00      	ldr	r2, [sp, #0]
 8001ee8:	469c      	mov	ip, r3
 8001eea:	0003      	movs	r3, r0
 8001eec:	4461      	add	r1, ip
 8001eee:	408b      	lsls	r3, r1
 8001ef0:	40e2      	lsrs	r2, r4
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	e7f1      	b.n	8001eda <__aeabi_d2iz+0x42>
 8001ef6:	46c0      	nop			@ (mov r8, r8)
 8001ef8:	000003fe 	.word	0x000003fe
 8001efc:	0000041d 	.word	0x0000041d
 8001f00:	7fffffff 	.word	0x7fffffff
 8001f04:	00000433 	.word	0x00000433
 8001f08:	00000413 	.word	0x00000413
 8001f0c:	fffffbed 	.word	0xfffffbed

08001f10 <__aeabi_i2d>:
 8001f10:	b570      	push	{r4, r5, r6, lr}
 8001f12:	2800      	cmp	r0, #0
 8001f14:	d016      	beq.n	8001f44 <__aeabi_i2d+0x34>
 8001f16:	17c3      	asrs	r3, r0, #31
 8001f18:	18c5      	adds	r5, r0, r3
 8001f1a:	405d      	eors	r5, r3
 8001f1c:	0fc4      	lsrs	r4, r0, #31
 8001f1e:	0028      	movs	r0, r5
 8001f20:	f000 f886 	bl	8002030 <__clzsi2>
 8001f24:	4b10      	ldr	r3, [pc, #64]	@ (8001f68 <__aeabi_i2d+0x58>)
 8001f26:	1a1b      	subs	r3, r3, r0
 8001f28:	055b      	lsls	r3, r3, #21
 8001f2a:	0d5b      	lsrs	r3, r3, #21
 8001f2c:	280a      	cmp	r0, #10
 8001f2e:	dc14      	bgt.n	8001f5a <__aeabi_i2d+0x4a>
 8001f30:	0002      	movs	r2, r0
 8001f32:	002e      	movs	r6, r5
 8001f34:	3215      	adds	r2, #21
 8001f36:	4096      	lsls	r6, r2
 8001f38:	220b      	movs	r2, #11
 8001f3a:	1a12      	subs	r2, r2, r0
 8001f3c:	40d5      	lsrs	r5, r2
 8001f3e:	032d      	lsls	r5, r5, #12
 8001f40:	0b2d      	lsrs	r5, r5, #12
 8001f42:	e003      	b.n	8001f4c <__aeabi_i2d+0x3c>
 8001f44:	2400      	movs	r4, #0
 8001f46:	2300      	movs	r3, #0
 8001f48:	2500      	movs	r5, #0
 8001f4a:	2600      	movs	r6, #0
 8001f4c:	051b      	lsls	r3, r3, #20
 8001f4e:	432b      	orrs	r3, r5
 8001f50:	07e4      	lsls	r4, r4, #31
 8001f52:	4323      	orrs	r3, r4
 8001f54:	0030      	movs	r0, r6
 8001f56:	0019      	movs	r1, r3
 8001f58:	bd70      	pop	{r4, r5, r6, pc}
 8001f5a:	380b      	subs	r0, #11
 8001f5c:	4085      	lsls	r5, r0
 8001f5e:	032d      	lsls	r5, r5, #12
 8001f60:	2600      	movs	r6, #0
 8001f62:	0b2d      	lsrs	r5, r5, #12
 8001f64:	e7f2      	b.n	8001f4c <__aeabi_i2d+0x3c>
 8001f66:	46c0      	nop			@ (mov r8, r8)
 8001f68:	0000041e 	.word	0x0000041e

08001f6c <__aeabi_ui2d>:
 8001f6c:	b510      	push	{r4, lr}
 8001f6e:	1e04      	subs	r4, r0, #0
 8001f70:	d010      	beq.n	8001f94 <__aeabi_ui2d+0x28>
 8001f72:	f000 f85d 	bl	8002030 <__clzsi2>
 8001f76:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <__aeabi_ui2d+0x44>)
 8001f78:	1a1b      	subs	r3, r3, r0
 8001f7a:	055b      	lsls	r3, r3, #21
 8001f7c:	0d5b      	lsrs	r3, r3, #21
 8001f7e:	280a      	cmp	r0, #10
 8001f80:	dc0f      	bgt.n	8001fa2 <__aeabi_ui2d+0x36>
 8001f82:	220b      	movs	r2, #11
 8001f84:	0021      	movs	r1, r4
 8001f86:	1a12      	subs	r2, r2, r0
 8001f88:	40d1      	lsrs	r1, r2
 8001f8a:	3015      	adds	r0, #21
 8001f8c:	030a      	lsls	r2, r1, #12
 8001f8e:	4084      	lsls	r4, r0
 8001f90:	0b12      	lsrs	r2, r2, #12
 8001f92:	e001      	b.n	8001f98 <__aeabi_ui2d+0x2c>
 8001f94:	2300      	movs	r3, #0
 8001f96:	2200      	movs	r2, #0
 8001f98:	051b      	lsls	r3, r3, #20
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	0020      	movs	r0, r4
 8001f9e:	0019      	movs	r1, r3
 8001fa0:	bd10      	pop	{r4, pc}
 8001fa2:	0022      	movs	r2, r4
 8001fa4:	380b      	subs	r0, #11
 8001fa6:	4082      	lsls	r2, r0
 8001fa8:	0312      	lsls	r2, r2, #12
 8001faa:	2400      	movs	r4, #0
 8001fac:	0b12      	lsrs	r2, r2, #12
 8001fae:	e7f3      	b.n	8001f98 <__aeabi_ui2d+0x2c>
 8001fb0:	0000041e 	.word	0x0000041e

08001fb4 <__aeabi_cdrcmple>:
 8001fb4:	4684      	mov	ip, r0
 8001fb6:	0010      	movs	r0, r2
 8001fb8:	4662      	mov	r2, ip
 8001fba:	468c      	mov	ip, r1
 8001fbc:	0019      	movs	r1, r3
 8001fbe:	4663      	mov	r3, ip
 8001fc0:	e000      	b.n	8001fc4 <__aeabi_cdcmpeq>
 8001fc2:	46c0      	nop			@ (mov r8, r8)

08001fc4 <__aeabi_cdcmpeq>:
 8001fc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001fc6:	f000 f905 	bl	80021d4 <__ledf2>
 8001fca:	2800      	cmp	r0, #0
 8001fcc:	d401      	bmi.n	8001fd2 <__aeabi_cdcmpeq+0xe>
 8001fce:	2100      	movs	r1, #0
 8001fd0:	42c8      	cmn	r0, r1
 8001fd2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001fd4 <__aeabi_dcmpeq>:
 8001fd4:	b510      	push	{r4, lr}
 8001fd6:	f000 f849 	bl	800206c <__eqdf2>
 8001fda:	4240      	negs	r0, r0
 8001fdc:	3001      	adds	r0, #1
 8001fde:	bd10      	pop	{r4, pc}

08001fe0 <__aeabi_dcmplt>:
 8001fe0:	b510      	push	{r4, lr}
 8001fe2:	f000 f8f7 	bl	80021d4 <__ledf2>
 8001fe6:	2800      	cmp	r0, #0
 8001fe8:	db01      	blt.n	8001fee <__aeabi_dcmplt+0xe>
 8001fea:	2000      	movs	r0, #0
 8001fec:	bd10      	pop	{r4, pc}
 8001fee:	2001      	movs	r0, #1
 8001ff0:	bd10      	pop	{r4, pc}
 8001ff2:	46c0      	nop			@ (mov r8, r8)

08001ff4 <__aeabi_dcmple>:
 8001ff4:	b510      	push	{r4, lr}
 8001ff6:	f000 f8ed 	bl	80021d4 <__ledf2>
 8001ffa:	2800      	cmp	r0, #0
 8001ffc:	dd01      	ble.n	8002002 <__aeabi_dcmple+0xe>
 8001ffe:	2000      	movs	r0, #0
 8002000:	bd10      	pop	{r4, pc}
 8002002:	2001      	movs	r0, #1
 8002004:	bd10      	pop	{r4, pc}
 8002006:	46c0      	nop			@ (mov r8, r8)

08002008 <__aeabi_dcmpgt>:
 8002008:	b510      	push	{r4, lr}
 800200a:	f000 f873 	bl	80020f4 <__gedf2>
 800200e:	2800      	cmp	r0, #0
 8002010:	dc01      	bgt.n	8002016 <__aeabi_dcmpgt+0xe>
 8002012:	2000      	movs	r0, #0
 8002014:	bd10      	pop	{r4, pc}
 8002016:	2001      	movs	r0, #1
 8002018:	bd10      	pop	{r4, pc}
 800201a:	46c0      	nop			@ (mov r8, r8)

0800201c <__aeabi_dcmpge>:
 800201c:	b510      	push	{r4, lr}
 800201e:	f000 f869 	bl	80020f4 <__gedf2>
 8002022:	2800      	cmp	r0, #0
 8002024:	da01      	bge.n	800202a <__aeabi_dcmpge+0xe>
 8002026:	2000      	movs	r0, #0
 8002028:	bd10      	pop	{r4, pc}
 800202a:	2001      	movs	r0, #1
 800202c:	bd10      	pop	{r4, pc}
 800202e:	46c0      	nop			@ (mov r8, r8)

08002030 <__clzsi2>:
 8002030:	211c      	movs	r1, #28
 8002032:	2301      	movs	r3, #1
 8002034:	041b      	lsls	r3, r3, #16
 8002036:	4298      	cmp	r0, r3
 8002038:	d301      	bcc.n	800203e <__clzsi2+0xe>
 800203a:	0c00      	lsrs	r0, r0, #16
 800203c:	3910      	subs	r1, #16
 800203e:	0a1b      	lsrs	r3, r3, #8
 8002040:	4298      	cmp	r0, r3
 8002042:	d301      	bcc.n	8002048 <__clzsi2+0x18>
 8002044:	0a00      	lsrs	r0, r0, #8
 8002046:	3908      	subs	r1, #8
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	4298      	cmp	r0, r3
 800204c:	d301      	bcc.n	8002052 <__clzsi2+0x22>
 800204e:	0900      	lsrs	r0, r0, #4
 8002050:	3904      	subs	r1, #4
 8002052:	a202      	add	r2, pc, #8	@ (adr r2, 800205c <__clzsi2+0x2c>)
 8002054:	5c10      	ldrb	r0, [r2, r0]
 8002056:	1840      	adds	r0, r0, r1
 8002058:	4770      	bx	lr
 800205a:	46c0      	nop			@ (mov r8, r8)
 800205c:	02020304 	.word	0x02020304
 8002060:	01010101 	.word	0x01010101
	...

0800206c <__eqdf2>:
 800206c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800206e:	4657      	mov	r7, sl
 8002070:	46de      	mov	lr, fp
 8002072:	464e      	mov	r6, r9
 8002074:	4645      	mov	r5, r8
 8002076:	b5e0      	push	{r5, r6, r7, lr}
 8002078:	000d      	movs	r5, r1
 800207a:	0004      	movs	r4, r0
 800207c:	0fe8      	lsrs	r0, r5, #31
 800207e:	4683      	mov	fp, r0
 8002080:	0309      	lsls	r1, r1, #12
 8002082:	0fd8      	lsrs	r0, r3, #31
 8002084:	0b09      	lsrs	r1, r1, #12
 8002086:	4682      	mov	sl, r0
 8002088:	4819      	ldr	r0, [pc, #100]	@ (80020f0 <__eqdf2+0x84>)
 800208a:	468c      	mov	ip, r1
 800208c:	031f      	lsls	r7, r3, #12
 800208e:	0069      	lsls	r1, r5, #1
 8002090:	005e      	lsls	r6, r3, #1
 8002092:	0d49      	lsrs	r1, r1, #21
 8002094:	0b3f      	lsrs	r7, r7, #12
 8002096:	0d76      	lsrs	r6, r6, #21
 8002098:	4281      	cmp	r1, r0
 800209a:	d018      	beq.n	80020ce <__eqdf2+0x62>
 800209c:	4286      	cmp	r6, r0
 800209e:	d00f      	beq.n	80020c0 <__eqdf2+0x54>
 80020a0:	2001      	movs	r0, #1
 80020a2:	42b1      	cmp	r1, r6
 80020a4:	d10d      	bne.n	80020c2 <__eqdf2+0x56>
 80020a6:	45bc      	cmp	ip, r7
 80020a8:	d10b      	bne.n	80020c2 <__eqdf2+0x56>
 80020aa:	4294      	cmp	r4, r2
 80020ac:	d109      	bne.n	80020c2 <__eqdf2+0x56>
 80020ae:	45d3      	cmp	fp, sl
 80020b0:	d01c      	beq.n	80020ec <__eqdf2+0x80>
 80020b2:	2900      	cmp	r1, #0
 80020b4:	d105      	bne.n	80020c2 <__eqdf2+0x56>
 80020b6:	4660      	mov	r0, ip
 80020b8:	4320      	orrs	r0, r4
 80020ba:	1e43      	subs	r3, r0, #1
 80020bc:	4198      	sbcs	r0, r3
 80020be:	e000      	b.n	80020c2 <__eqdf2+0x56>
 80020c0:	2001      	movs	r0, #1
 80020c2:	bcf0      	pop	{r4, r5, r6, r7}
 80020c4:	46bb      	mov	fp, r7
 80020c6:	46b2      	mov	sl, r6
 80020c8:	46a9      	mov	r9, r5
 80020ca:	46a0      	mov	r8, r4
 80020cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ce:	2001      	movs	r0, #1
 80020d0:	428e      	cmp	r6, r1
 80020d2:	d1f6      	bne.n	80020c2 <__eqdf2+0x56>
 80020d4:	4661      	mov	r1, ip
 80020d6:	4339      	orrs	r1, r7
 80020d8:	000f      	movs	r7, r1
 80020da:	4317      	orrs	r7, r2
 80020dc:	4327      	orrs	r7, r4
 80020de:	d1f0      	bne.n	80020c2 <__eqdf2+0x56>
 80020e0:	465b      	mov	r3, fp
 80020e2:	4652      	mov	r2, sl
 80020e4:	1a98      	subs	r0, r3, r2
 80020e6:	1e43      	subs	r3, r0, #1
 80020e8:	4198      	sbcs	r0, r3
 80020ea:	e7ea      	b.n	80020c2 <__eqdf2+0x56>
 80020ec:	2000      	movs	r0, #0
 80020ee:	e7e8      	b.n	80020c2 <__eqdf2+0x56>
 80020f0:	000007ff 	.word	0x000007ff

080020f4 <__gedf2>:
 80020f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020f6:	4657      	mov	r7, sl
 80020f8:	464e      	mov	r6, r9
 80020fa:	4645      	mov	r5, r8
 80020fc:	46de      	mov	lr, fp
 80020fe:	b5e0      	push	{r5, r6, r7, lr}
 8002100:	000d      	movs	r5, r1
 8002102:	030e      	lsls	r6, r1, #12
 8002104:	0049      	lsls	r1, r1, #1
 8002106:	0d49      	lsrs	r1, r1, #21
 8002108:	468a      	mov	sl, r1
 800210a:	0fdf      	lsrs	r7, r3, #31
 800210c:	0fe9      	lsrs	r1, r5, #31
 800210e:	46bc      	mov	ip, r7
 8002110:	b083      	sub	sp, #12
 8002112:	4f2f      	ldr	r7, [pc, #188]	@ (80021d0 <__gedf2+0xdc>)
 8002114:	0004      	movs	r4, r0
 8002116:	4680      	mov	r8, r0
 8002118:	9101      	str	r1, [sp, #4]
 800211a:	0058      	lsls	r0, r3, #1
 800211c:	0319      	lsls	r1, r3, #12
 800211e:	4691      	mov	r9, r2
 8002120:	0b36      	lsrs	r6, r6, #12
 8002122:	0b09      	lsrs	r1, r1, #12
 8002124:	0d40      	lsrs	r0, r0, #21
 8002126:	45ba      	cmp	sl, r7
 8002128:	d01d      	beq.n	8002166 <__gedf2+0x72>
 800212a:	42b8      	cmp	r0, r7
 800212c:	d00d      	beq.n	800214a <__gedf2+0x56>
 800212e:	4657      	mov	r7, sl
 8002130:	2f00      	cmp	r7, #0
 8002132:	d12a      	bne.n	800218a <__gedf2+0x96>
 8002134:	4334      	orrs	r4, r6
 8002136:	2800      	cmp	r0, #0
 8002138:	d124      	bne.n	8002184 <__gedf2+0x90>
 800213a:	430a      	orrs	r2, r1
 800213c:	d036      	beq.n	80021ac <__gedf2+0xb8>
 800213e:	2c00      	cmp	r4, #0
 8002140:	d141      	bne.n	80021c6 <__gedf2+0xd2>
 8002142:	4663      	mov	r3, ip
 8002144:	0058      	lsls	r0, r3, #1
 8002146:	3801      	subs	r0, #1
 8002148:	e015      	b.n	8002176 <__gedf2+0x82>
 800214a:	4311      	orrs	r1, r2
 800214c:	d138      	bne.n	80021c0 <__gedf2+0xcc>
 800214e:	4653      	mov	r3, sl
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <__gedf2+0x64>
 8002154:	4326      	orrs	r6, r4
 8002156:	d0f4      	beq.n	8002142 <__gedf2+0x4e>
 8002158:	9b01      	ldr	r3, [sp, #4]
 800215a:	4563      	cmp	r3, ip
 800215c:	d107      	bne.n	800216e <__gedf2+0x7a>
 800215e:	9b01      	ldr	r3, [sp, #4]
 8002160:	0058      	lsls	r0, r3, #1
 8002162:	3801      	subs	r0, #1
 8002164:	e007      	b.n	8002176 <__gedf2+0x82>
 8002166:	4326      	orrs	r6, r4
 8002168:	d12a      	bne.n	80021c0 <__gedf2+0xcc>
 800216a:	4550      	cmp	r0, sl
 800216c:	d021      	beq.n	80021b2 <__gedf2+0xbe>
 800216e:	2001      	movs	r0, #1
 8002170:	9b01      	ldr	r3, [sp, #4]
 8002172:	425f      	negs	r7, r3
 8002174:	4338      	orrs	r0, r7
 8002176:	b003      	add	sp, #12
 8002178:	bcf0      	pop	{r4, r5, r6, r7}
 800217a:	46bb      	mov	fp, r7
 800217c:	46b2      	mov	sl, r6
 800217e:	46a9      	mov	r9, r5
 8002180:	46a0      	mov	r8, r4
 8002182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002184:	2c00      	cmp	r4, #0
 8002186:	d0dc      	beq.n	8002142 <__gedf2+0x4e>
 8002188:	e7e6      	b.n	8002158 <__gedf2+0x64>
 800218a:	2800      	cmp	r0, #0
 800218c:	d0ef      	beq.n	800216e <__gedf2+0x7a>
 800218e:	9b01      	ldr	r3, [sp, #4]
 8002190:	4563      	cmp	r3, ip
 8002192:	d1ec      	bne.n	800216e <__gedf2+0x7a>
 8002194:	4582      	cmp	sl, r0
 8002196:	dcea      	bgt.n	800216e <__gedf2+0x7a>
 8002198:	dbe1      	blt.n	800215e <__gedf2+0x6a>
 800219a:	428e      	cmp	r6, r1
 800219c:	d8e7      	bhi.n	800216e <__gedf2+0x7a>
 800219e:	d1de      	bne.n	800215e <__gedf2+0x6a>
 80021a0:	45c8      	cmp	r8, r9
 80021a2:	d8e4      	bhi.n	800216e <__gedf2+0x7a>
 80021a4:	2000      	movs	r0, #0
 80021a6:	45c8      	cmp	r8, r9
 80021a8:	d2e5      	bcs.n	8002176 <__gedf2+0x82>
 80021aa:	e7d8      	b.n	800215e <__gedf2+0x6a>
 80021ac:	2c00      	cmp	r4, #0
 80021ae:	d0e2      	beq.n	8002176 <__gedf2+0x82>
 80021b0:	e7dd      	b.n	800216e <__gedf2+0x7a>
 80021b2:	4311      	orrs	r1, r2
 80021b4:	d104      	bne.n	80021c0 <__gedf2+0xcc>
 80021b6:	9b01      	ldr	r3, [sp, #4]
 80021b8:	4563      	cmp	r3, ip
 80021ba:	d1d8      	bne.n	800216e <__gedf2+0x7a>
 80021bc:	2000      	movs	r0, #0
 80021be:	e7da      	b.n	8002176 <__gedf2+0x82>
 80021c0:	2002      	movs	r0, #2
 80021c2:	4240      	negs	r0, r0
 80021c4:	e7d7      	b.n	8002176 <__gedf2+0x82>
 80021c6:	9b01      	ldr	r3, [sp, #4]
 80021c8:	4563      	cmp	r3, ip
 80021ca:	d0e6      	beq.n	800219a <__gedf2+0xa6>
 80021cc:	e7cf      	b.n	800216e <__gedf2+0x7a>
 80021ce:	46c0      	nop			@ (mov r8, r8)
 80021d0:	000007ff 	.word	0x000007ff

080021d4 <__ledf2>:
 80021d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021d6:	4657      	mov	r7, sl
 80021d8:	464e      	mov	r6, r9
 80021da:	4645      	mov	r5, r8
 80021dc:	46de      	mov	lr, fp
 80021de:	b5e0      	push	{r5, r6, r7, lr}
 80021e0:	000d      	movs	r5, r1
 80021e2:	030e      	lsls	r6, r1, #12
 80021e4:	0049      	lsls	r1, r1, #1
 80021e6:	0d49      	lsrs	r1, r1, #21
 80021e8:	468a      	mov	sl, r1
 80021ea:	0fdf      	lsrs	r7, r3, #31
 80021ec:	0fe9      	lsrs	r1, r5, #31
 80021ee:	46bc      	mov	ip, r7
 80021f0:	b083      	sub	sp, #12
 80021f2:	4f2e      	ldr	r7, [pc, #184]	@ (80022ac <__ledf2+0xd8>)
 80021f4:	0004      	movs	r4, r0
 80021f6:	4680      	mov	r8, r0
 80021f8:	9101      	str	r1, [sp, #4]
 80021fa:	0058      	lsls	r0, r3, #1
 80021fc:	0319      	lsls	r1, r3, #12
 80021fe:	4691      	mov	r9, r2
 8002200:	0b36      	lsrs	r6, r6, #12
 8002202:	0b09      	lsrs	r1, r1, #12
 8002204:	0d40      	lsrs	r0, r0, #21
 8002206:	45ba      	cmp	sl, r7
 8002208:	d01e      	beq.n	8002248 <__ledf2+0x74>
 800220a:	42b8      	cmp	r0, r7
 800220c:	d00d      	beq.n	800222a <__ledf2+0x56>
 800220e:	4657      	mov	r7, sl
 8002210:	2f00      	cmp	r7, #0
 8002212:	d127      	bne.n	8002264 <__ledf2+0x90>
 8002214:	4334      	orrs	r4, r6
 8002216:	2800      	cmp	r0, #0
 8002218:	d133      	bne.n	8002282 <__ledf2+0xae>
 800221a:	430a      	orrs	r2, r1
 800221c:	d034      	beq.n	8002288 <__ledf2+0xb4>
 800221e:	2c00      	cmp	r4, #0
 8002220:	d140      	bne.n	80022a4 <__ledf2+0xd0>
 8002222:	4663      	mov	r3, ip
 8002224:	0058      	lsls	r0, r3, #1
 8002226:	3801      	subs	r0, #1
 8002228:	e015      	b.n	8002256 <__ledf2+0x82>
 800222a:	4311      	orrs	r1, r2
 800222c:	d112      	bne.n	8002254 <__ledf2+0x80>
 800222e:	4653      	mov	r3, sl
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <__ledf2+0x64>
 8002234:	4326      	orrs	r6, r4
 8002236:	d0f4      	beq.n	8002222 <__ledf2+0x4e>
 8002238:	9b01      	ldr	r3, [sp, #4]
 800223a:	4563      	cmp	r3, ip
 800223c:	d01d      	beq.n	800227a <__ledf2+0xa6>
 800223e:	2001      	movs	r0, #1
 8002240:	9b01      	ldr	r3, [sp, #4]
 8002242:	425f      	negs	r7, r3
 8002244:	4338      	orrs	r0, r7
 8002246:	e006      	b.n	8002256 <__ledf2+0x82>
 8002248:	4326      	orrs	r6, r4
 800224a:	d103      	bne.n	8002254 <__ledf2+0x80>
 800224c:	4550      	cmp	r0, sl
 800224e:	d1f6      	bne.n	800223e <__ledf2+0x6a>
 8002250:	4311      	orrs	r1, r2
 8002252:	d01c      	beq.n	800228e <__ledf2+0xba>
 8002254:	2002      	movs	r0, #2
 8002256:	b003      	add	sp, #12
 8002258:	bcf0      	pop	{r4, r5, r6, r7}
 800225a:	46bb      	mov	fp, r7
 800225c:	46b2      	mov	sl, r6
 800225e:	46a9      	mov	r9, r5
 8002260:	46a0      	mov	r8, r4
 8002262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002264:	2800      	cmp	r0, #0
 8002266:	d0ea      	beq.n	800223e <__ledf2+0x6a>
 8002268:	9b01      	ldr	r3, [sp, #4]
 800226a:	4563      	cmp	r3, ip
 800226c:	d1e7      	bne.n	800223e <__ledf2+0x6a>
 800226e:	4582      	cmp	sl, r0
 8002270:	dce5      	bgt.n	800223e <__ledf2+0x6a>
 8002272:	db02      	blt.n	800227a <__ledf2+0xa6>
 8002274:	428e      	cmp	r6, r1
 8002276:	d8e2      	bhi.n	800223e <__ledf2+0x6a>
 8002278:	d00e      	beq.n	8002298 <__ledf2+0xc4>
 800227a:	9b01      	ldr	r3, [sp, #4]
 800227c:	0058      	lsls	r0, r3, #1
 800227e:	3801      	subs	r0, #1
 8002280:	e7e9      	b.n	8002256 <__ledf2+0x82>
 8002282:	2c00      	cmp	r4, #0
 8002284:	d0cd      	beq.n	8002222 <__ledf2+0x4e>
 8002286:	e7d7      	b.n	8002238 <__ledf2+0x64>
 8002288:	2c00      	cmp	r4, #0
 800228a:	d0e4      	beq.n	8002256 <__ledf2+0x82>
 800228c:	e7d7      	b.n	800223e <__ledf2+0x6a>
 800228e:	9b01      	ldr	r3, [sp, #4]
 8002290:	2000      	movs	r0, #0
 8002292:	4563      	cmp	r3, ip
 8002294:	d0df      	beq.n	8002256 <__ledf2+0x82>
 8002296:	e7d2      	b.n	800223e <__ledf2+0x6a>
 8002298:	45c8      	cmp	r8, r9
 800229a:	d8d0      	bhi.n	800223e <__ledf2+0x6a>
 800229c:	2000      	movs	r0, #0
 800229e:	45c8      	cmp	r8, r9
 80022a0:	d2d9      	bcs.n	8002256 <__ledf2+0x82>
 80022a2:	e7ea      	b.n	800227a <__ledf2+0xa6>
 80022a4:	9b01      	ldr	r3, [sp, #4]
 80022a6:	4563      	cmp	r3, ip
 80022a8:	d0e4      	beq.n	8002274 <__ledf2+0xa0>
 80022aa:	e7c8      	b.n	800223e <__ledf2+0x6a>
 80022ac:	000007ff 	.word	0x000007ff

080022b0 <dw_main>:
 * @param  none
 *
 * @return none
 */
int dw_main(void)
{
 80022b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022b2:	b099      	sub	sp, #100	@ 0x64
 80022b4:	af00      	add	r7, sp, #0
    // lcd_display_str(APP_NAME);

    /* Reset and initialise DW1000.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 80022b6:	f00a fcf5 	bl	800cca4 <reset_DW1000>
    port_set_dw1000_slowrate();
 80022ba:	f00a fd5f 	bl	800cd7c <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR)
 80022be:	2001      	movs	r0, #1
 80022c0:	f009 fb6e 	bl	800b9a0 <dwt_initialise>
 80022c4:	0003      	movs	r3, r0
 80022c6:	3301      	adds	r3, #1
 80022c8:	d101      	bne.n	80022ce <dw_main+0x1e>
    {
        // lcd_display_str("INIT FAILED");
        while (1)
 80022ca:	46c0      	nop			@ (mov r8, r8)
 80022cc:	e7fd      	b.n	80022ca <dw_main+0x1a>
        { };
    }
    port_set_dw1000_fastrate();
 80022ce:	f00a fd63 	bl	800cd98 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 7 below. */
    dwt_configure(&config);
 80022d2:	4bd2      	ldr	r3, [pc, #840]	@ (800261c <dw_main+0x36c>)
 80022d4:	0018      	movs	r0, r3
 80022d6:	f009 fcc1 	bl	800bc5c <dwt_configure>

    dwt_setdblrxbuffmode(0);
 80022da:	2000      	movs	r0, #0
 80022dc:	f00a f8ec 	bl	800c4b8 <dwt_setdblrxbuffmode>

    /* Apply default antenna delay value. See NOTE 1 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 80022e0:	4bcf      	ldr	r3, [pc, #828]	@ (8002620 <dw_main+0x370>)
 80022e2:	0018      	movs	r0, r3
 80022e4:	f009 fe5e 	bl	800bfa4 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 80022e8:	4bcd      	ldr	r3, [pc, #820]	@ (8002620 <dw_main+0x370>)
 80022ea:	0018      	movs	r0, r3
 80022ec:	f009 fe6e 	bl	800bfcc <dwt_settxantennadelay>

    /* Set preamble timeout for expected frames. See NOTE 6 below. */
    dwt_setpreambledetecttimeout(PRE_TIMEOUT);
 80022f0:	2008      	movs	r0, #8
 80022f2:	f00a fb35 	bl	800c960 <dwt_setpreambledetecttimeout>

    /* Loop forever responding to ranging requests. */
    while (1)
    {
        /* Clear reception timeout to start next ranging process. */
        dwt_setrxtimeout(0);
 80022f6:	2000      	movs	r0, #0
 80022f8:	f00a fae2 	bl	800c8c0 <dwt_setrxtimeout>

        /* Activate reception immediately. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 80022fc:	2000      	movs	r0, #0
 80022fe:	f00a fa97 	bl	800c830 <dwt_rxenable>

        /* Poll for reception of a frame or error/timeout. See NOTE 8 below. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8002302:	46c0      	nop			@ (mov r8, r8)
 8002304:	2100      	movs	r1, #0
 8002306:	200f      	movs	r0, #15
 8002308:	f009 ffb0 	bl	800c26c <dwt_read32bitoffsetreg>
 800230c:	0002      	movs	r2, r0
 800230e:	4bc5      	ldr	r3, [pc, #788]	@ (8002624 <dw_main+0x374>)
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	4bc4      	ldr	r3, [pc, #784]	@ (8002624 <dw_main+0x374>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4ac4      	ldr	r2, [pc, #784]	@ (8002628 <dw_main+0x378>)
 8002318:	4013      	ands	r3, r2
 800231a:	d0f3      	beq.n	8002304 <dw_main+0x54>
        { };

	uint32 error = status_reg & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 800231c:	4bc1      	ldr	r3, [pc, #772]	@ (8002624 <dw_main+0x374>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4ac1      	ldr	r2, [pc, #772]	@ (8002628 <dw_main+0x378>)
 8002322:	4013      	ands	r3, r2
 8002324:	65fb      	str	r3, [r7, #92]	@ 0x5c
	CDC_Transmit_FS((uint8 *) &status_reg, sizeof(status_reg));
 8002326:	4bbf      	ldr	r3, [pc, #764]	@ (8002624 <dw_main+0x374>)
 8002328:	2104      	movs	r1, #4
 800232a:	0018      	movs	r0, r3
 800232c:	f008 fe7e 	bl	800b02c <CDC_Transmit_FS>

        if (status_reg & SYS_STATUS_RXFCG)
 8002330:	4bbc      	ldr	r3, [pc, #752]	@ (8002624 <dw_main+0x374>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	2380      	movs	r3, #128	@ 0x80
 8002336:	01db      	lsls	r3, r3, #7
 8002338:	4013      	ands	r3, r2
 800233a:	d100      	bne.n	800233e <dw_main+0x8e>
 800233c:	e163      	b.n	8002606 <dw_main+0x356>
        {
            uint32 frame_len;

            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 800233e:	2380      	movs	r3, #128	@ 0x80
 8002340:	01db      	lsls	r3, r3, #7
 8002342:	001a      	movs	r2, r3
 8002344:	2100      	movs	r1, #0
 8002346:	200f      	movs	r0, #15
 8002348:	f00a f821 	bl	800c38e <dwt_write32bitoffsetreg>

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 800234c:	2100      	movs	r1, #0
 800234e:	2010      	movs	r0, #16
 8002350:	f009 ff8c 	bl	800c26c <dwt_read32bitoffsetreg>
 8002354:	0003      	movs	r3, r0
 8002356:	059b      	lsls	r3, r3, #22
 8002358:	0d9b      	lsrs	r3, r3, #22
 800235a:	65bb      	str	r3, [r7, #88]	@ 0x58
            if (frame_len <= RX_BUFFER_LEN)
 800235c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800235e:	2380      	movs	r3, #128	@ 0x80
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	429a      	cmp	r2, r3
 8002364:	d806      	bhi.n	8002374 <dw_main+0xc4>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 8002366:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002368:	b299      	uxth	r1, r3
 800236a:	4bb0      	ldr	r3, [pc, #704]	@ (800262c <dw_main+0x37c>)
 800236c:	2200      	movs	r2, #0
 800236e:	0018      	movs	r0, r3
 8002370:	f009 fe8a 	bl	800c088 <dwt_readrxdata>
            }

            /* Check that the frame is a poll sent by "DS TWR initiator" example.
             * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
            rx_buffer[ALL_MSG_SN_IDX] = 0;
 8002374:	4bad      	ldr	r3, [pc, #692]	@ (800262c <dw_main+0x37c>)
 8002376:	2200      	movs	r2, #0
 8002378:	709a      	strb	r2, [r3, #2]
            if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0)
 800237a:	49ad      	ldr	r1, [pc, #692]	@ (8002630 <dw_main+0x380>)
 800237c:	4bab      	ldr	r3, [pc, #684]	@ (800262c <dw_main+0x37c>)
 800237e:	220a      	movs	r2, #10
 8002380:	0018      	movs	r0, r3
 8002382:	f00a fd5f 	bl	800ce44 <memcmp>
 8002386:	1e03      	subs	r3, r0, #0
 8002388:	d1b5      	bne.n	80022f6 <dw_main+0x46>
            {
                uint32 resp_tx_time;
                int ret;

                /* Retrieve poll reception timestamp. */
                poll_rx_ts = get_rx_timestamp_u64();
 800238a:	f000 f9b1 	bl	80026f0 <get_rx_timestamp_u64>
 800238e:	0002      	movs	r2, r0
 8002390:	000b      	movs	r3, r1
 8002392:	49a8      	ldr	r1, [pc, #672]	@ (8002634 <dw_main+0x384>)
 8002394:	600a      	str	r2, [r1, #0]
 8002396:	604b      	str	r3, [r1, #4]

                /* Set send time for response. See NOTE 9 below. */
                resp_tx_time = (poll_rx_ts + (POLL_RX_TO_RESP_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 8002398:	4ba6      	ldr	r3, [pc, #664]	@ (8002634 <dw_main+0x384>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	48a6      	ldr	r0, [pc, #664]	@ (8002638 <dw_main+0x388>)
 80023a0:	2100      	movs	r1, #0
 80023a2:	1812      	adds	r2, r2, r0
 80023a4:	414b      	adcs	r3, r1
 80023a6:	0619      	lsls	r1, r3, #24
 80023a8:	0a14      	lsrs	r4, r2, #8
 80023aa:	430c      	orrs	r4, r1
 80023ac:	0a1d      	lsrs	r5, r3, #8
 80023ae:	0023      	movs	r3, r4
 80023b0:	657b      	str	r3, [r7, #84]	@ 0x54
                dwt_setdelayedtrxtime(resp_tx_time);
 80023b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023b4:	0018      	movs	r0, r3
 80023b6:	f00a f97c 	bl	800c6b2 <dwt_setdelayedtrxtime>

                /* Set expected delay and timeout for final message reception. See NOTE 4 and 5 below. */
                dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS);
 80023ba:	23fa      	movs	r3, #250	@ 0xfa
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	0018      	movs	r0, r3
 80023c0:	f00a f8ac 	bl	800c51c <dwt_setrxaftertxdelay>
                dwt_setrxtimeout(FINAL_RX_TIMEOUT_UUS);
 80023c4:	4b9d      	ldr	r3, [pc, #628]	@ (800263c <dw_main+0x38c>)
 80023c6:	0018      	movs	r0, r3
 80023c8:	f00a fa7a 	bl	800c8c0 <dwt_setrxtimeout>

                /* Write and send the response message. See NOTE 10 below.*/
                tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 80023cc:	4b9c      	ldr	r3, [pc, #624]	@ (8002640 <dw_main+0x390>)
 80023ce:	781a      	ldrb	r2, [r3, #0]
 80023d0:	4b9c      	ldr	r3, [pc, #624]	@ (8002644 <dw_main+0x394>)
 80023d2:	709a      	strb	r2, [r3, #2]
                dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 80023d4:	4b9b      	ldr	r3, [pc, #620]	@ (8002644 <dw_main+0x394>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	0019      	movs	r1, r3
 80023da:	200f      	movs	r0, #15
 80023dc:	f009 fe07 	bl	800bfee <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 80023e0:	2201      	movs	r2, #1
 80023e2:	2100      	movs	r1, #0
 80023e4:	200f      	movs	r0, #15
 80023e6:	f009 fe2b 	bl	800c040 <dwt_writetxfctrl>
                ret = dwt_starttx(DWT_START_TX_DELAYED | DWT_RESPONSE_EXPECTED);
 80023ea:	2003      	movs	r0, #3
 80023ec:	f00a f970 	bl	800c6d0 <dwt_starttx>
 80023f0:	0003      	movs	r3, r0
 80023f2:	653b      	str	r3, [r7, #80]	@ 0x50

                /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 11 below. */
                if (ret == DWT_ERROR)
 80023f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023f6:	3301      	adds	r3, #1
 80023f8:	d100      	bne.n	80023fc <dw_main+0x14c>
 80023fa:	e10d      	b.n	8002618 <dw_main+0x368>
                {
                    continue;
                }

                /* Poll for reception of expected "final" frame or error/timeout. See NOTE 8 below. */
                while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 80023fc:	46c0      	nop			@ (mov r8, r8)
 80023fe:	2100      	movs	r1, #0
 8002400:	200f      	movs	r0, #15
 8002402:	f009 ff33 	bl	800c26c <dwt_read32bitoffsetreg>
 8002406:	0002      	movs	r2, r0
 8002408:	4b86      	ldr	r3, [pc, #536]	@ (8002624 <dw_main+0x374>)
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	4b85      	ldr	r3, [pc, #532]	@ (8002624 <dw_main+0x374>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a85      	ldr	r2, [pc, #532]	@ (8002628 <dw_main+0x378>)
 8002412:	4013      	ands	r3, r2
 8002414:	d0f3      	beq.n	80023fe <dw_main+0x14e>
                { };

                /* Increment frame sequence number after transmission of the response message (modulo 256). */
                frame_seq_nb++;
 8002416:	4b8a      	ldr	r3, [pc, #552]	@ (8002640 <dw_main+0x390>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	3301      	adds	r3, #1
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4b88      	ldr	r3, [pc, #544]	@ (8002640 <dw_main+0x390>)
 8002420:	701a      	strb	r2, [r3, #0]

                if (status_reg & SYS_STATUS_RXFCG)
 8002422:	4b80      	ldr	r3, [pc, #512]	@ (8002624 <dw_main+0x374>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	2380      	movs	r3, #128	@ 0x80
 8002428:	01db      	lsls	r3, r3, #7
 800242a:	4013      	ands	r3, r2
 800242c:	d100      	bne.n	8002430 <dw_main+0x180>
 800242e:	e0e1      	b.n	80025f4 <dw_main+0x344>
                {
                    /* Clear good RX frame event and TX frame sent in the DW1000 status register. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG | SYS_STATUS_TXFRS);
 8002430:	2381      	movs	r3, #129	@ 0x81
 8002432:	01db      	lsls	r3, r3, #7
 8002434:	001a      	movs	r2, r3
 8002436:	2100      	movs	r1, #0
 8002438:	200f      	movs	r0, #15
 800243a:	f009 ffa8 	bl	800c38e <dwt_write32bitoffsetreg>

                    /* A frame has been received, read it into the local buffer. */
                    frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 800243e:	2100      	movs	r1, #0
 8002440:	2010      	movs	r0, #16
 8002442:	f009 ff13 	bl	800c26c <dwt_read32bitoffsetreg>
 8002446:	0003      	movs	r3, r0
 8002448:	227f      	movs	r2, #127	@ 0x7f
 800244a:	4013      	ands	r3, r2
 800244c:	65bb      	str	r3, [r7, #88]	@ 0x58
                    if (frame_len <= RX_BUF_LEN)
 800244e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002450:	2b18      	cmp	r3, #24
 8002452:	d806      	bhi.n	8002462 <dw_main+0x1b2>
                    {
                        dwt_readrxdata(rx_buffer, frame_len, 0);
 8002454:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002456:	b299      	uxth	r1, r3
 8002458:	4b74      	ldr	r3, [pc, #464]	@ (800262c <dw_main+0x37c>)
 800245a:	2200      	movs	r2, #0
 800245c:	0018      	movs	r0, r3
 800245e:	f009 fe13 	bl	800c088 <dwt_readrxdata>
                    }

                    /* Check that the frame is a final message sent by "DS TWR initiator" example.
                     * As the sequence number field of the frame is not used in this example, it can be zeroed to ease the validation of the frame. */
                    rx_buffer[ALL_MSG_SN_IDX] = 0;
 8002462:	4b72      	ldr	r3, [pc, #456]	@ (800262c <dw_main+0x37c>)
 8002464:	2200      	movs	r2, #0
 8002466:	709a      	strb	r2, [r3, #2]
                    if (memcmp(rx_buffer, rx_final_msg, ALL_MSG_COMMON_LEN) == 0)
 8002468:	4977      	ldr	r1, [pc, #476]	@ (8002648 <dw_main+0x398>)
 800246a:	4b70      	ldr	r3, [pc, #448]	@ (800262c <dw_main+0x37c>)
 800246c:	220a      	movs	r2, #10
 800246e:	0018      	movs	r0, r3
 8002470:	f00a fce8 	bl	800ce44 <memcmp>
 8002474:	1e03      	subs	r3, r0, #0
 8002476:	d000      	beq.n	800247a <dw_main+0x1ca>
 8002478:	e73d      	b.n	80022f6 <dw_main+0x46>
                        uint32 poll_rx_ts_32, resp_tx_ts_32, final_rx_ts_32;
                        double Ra, Rb, Da, Db;
                        int64 tof_dtu;

                        /* Retrieve response transmission and final reception timestamps. */
                        resp_tx_ts = get_tx_timestamp_u64();
 800247a:	f000 f8ff 	bl	800267c <get_tx_timestamp_u64>
 800247e:	0002      	movs	r2, r0
 8002480:	000b      	movs	r3, r1
 8002482:	4972      	ldr	r1, [pc, #456]	@ (800264c <dw_main+0x39c>)
 8002484:	600a      	str	r2, [r1, #0]
 8002486:	604b      	str	r3, [r1, #4]
                        final_rx_ts = get_rx_timestamp_u64();
 8002488:	f000 f932 	bl	80026f0 <get_rx_timestamp_u64>
 800248c:	0002      	movs	r2, r0
 800248e:	000b      	movs	r3, r1
 8002490:	496f      	ldr	r1, [pc, #444]	@ (8002650 <dw_main+0x3a0>)
 8002492:	600a      	str	r2, [r1, #0]
 8002494:	604b      	str	r3, [r1, #4]

                        /* Get timestamps embedded in the final message. */
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX], &poll_tx_ts);
 8002496:	230c      	movs	r3, #12
 8002498:	2608      	movs	r6, #8
 800249a:	199b      	adds	r3, r3, r6
 800249c:	19da      	adds	r2, r3, r7
 800249e:	4b6d      	ldr	r3, [pc, #436]	@ (8002654 <dw_main+0x3a4>)
 80024a0:	0011      	movs	r1, r2
 80024a2:	0018      	movs	r0, r3
 80024a4:	f000 f95e 	bl	8002764 <final_msg_get_ts>
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_RESP_RX_TS_IDX], &resp_rx_ts);
 80024a8:	2308      	movs	r3, #8
 80024aa:	199b      	adds	r3, r3, r6
 80024ac:	19da      	adds	r2, r3, r7
 80024ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002658 <dw_main+0x3a8>)
 80024b0:	0011      	movs	r1, r2
 80024b2:	0018      	movs	r0, r3
 80024b4:	f000 f956 	bl	8002764 <final_msg_get_ts>
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_FINAL_TX_TS_IDX], &final_tx_ts);
 80024b8:	230c      	movs	r3, #12
 80024ba:	18fa      	adds	r2, r7, r3
 80024bc:	4b67      	ldr	r3, [pc, #412]	@ (800265c <dw_main+0x3ac>)
 80024be:	0011      	movs	r1, r2
 80024c0:	0018      	movs	r0, r3
 80024c2:	f000 f94f 	bl	8002764 <final_msg_get_ts>

                        /* Compute time of flight. 32-bit subtractions give correct answers even if clock has wrapped. See NOTE 12 below. */
                        poll_rx_ts_32 = (uint32)poll_rx_ts;
 80024c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002634 <dw_main+0x384>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	0013      	movs	r3, r2
 80024ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        resp_tx_ts_32 = (uint32)resp_tx_ts;
 80024d0:	4b5e      	ldr	r3, [pc, #376]	@ (800264c <dw_main+0x39c>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	0013      	movs	r3, r2
 80024d8:	64bb      	str	r3, [r7, #72]	@ 0x48
                        final_rx_ts_32 = (uint32)final_rx_ts;
 80024da:	4b5d      	ldr	r3, [pc, #372]	@ (8002650 <dw_main+0x3a0>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	0013      	movs	r3, r2
 80024e2:	647b      	str	r3, [r7, #68]	@ 0x44
                        Ra = (double)(resp_rx_ts - poll_tx_ts);
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	0018      	movs	r0, r3
 80024ec:	f7ff fd3e 	bl	8001f6c <__aeabi_ui2d>
 80024f0:	0002      	movs	r2, r0
 80024f2:	000b      	movs	r3, r1
 80024f4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80024f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
                        Rb = (double)(final_rx_ts_32 - resp_tx_ts_32);
 80024f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	0018      	movs	r0, r3
 8002500:	f7ff fd34 	bl	8001f6c <__aeabi_ui2d>
 8002504:	0002      	movs	r2, r0
 8002506:	000b      	movs	r3, r1
 8002508:	633a      	str	r2, [r7, #48]	@ 0x30
 800250a:	637b      	str	r3, [r7, #52]	@ 0x34
                        Da = (double)(final_tx_ts - resp_rx_ts);
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	0018      	movs	r0, r3
 8002514:	f7ff fd2a 	bl	8001f6c <__aeabi_ui2d>
 8002518:	0002      	movs	r2, r0
 800251a:	000b      	movs	r3, r1
 800251c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800251e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        Db = (double)(resp_tx_ts_32 - poll_rx_ts_32);
 8002520:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	0018      	movs	r0, r3
 8002528:	f7ff fd20 	bl	8001f6c <__aeabi_ui2d>
 800252c:	0002      	movs	r2, r0
 800252e:	000b      	movs	r3, r1
 8002530:	623a      	str	r2, [r7, #32]
 8002532:	627b      	str	r3, [r7, #36]	@ 0x24
                        tof_dtu = (int64)((Ra * Rb - Da * Db) / (Ra + Rb + Da + Db));
 8002534:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002538:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800253a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800253c:	f7fe fdbc 	bl	80010b8 <__aeabi_dmul>
 8002540:	0002      	movs	r2, r0
 8002542:	000b      	movs	r3, r1
 8002544:	603a      	str	r2, [r7, #0]
 8002546:	607b      	str	r3, [r7, #4]
 8002548:	6a3a      	ldr	r2, [r7, #32]
 800254a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800254e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002550:	f7fe fdb2 	bl	80010b8 <__aeabi_dmul>
 8002554:	0002      	movs	r2, r0
 8002556:	000b      	movs	r3, r1
 8002558:	6838      	ldr	r0, [r7, #0]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	f7ff f892 	bl	8001684 <__aeabi_dsub>
 8002560:	0002      	movs	r2, r0
 8002562:	000b      	movs	r3, r1
 8002564:	603a      	str	r2, [r7, #0]
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800256a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800256c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800256e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002570:	f7fd fec4 	bl	80002fc <__aeabi_dadd>
 8002574:	0002      	movs	r2, r0
 8002576:	000b      	movs	r3, r1
 8002578:	0010      	movs	r0, r2
 800257a:	0019      	movs	r1, r3
 800257c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800257e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002580:	f7fd febc 	bl	80002fc <__aeabi_dadd>
 8002584:	0002      	movs	r2, r0
 8002586:	000b      	movs	r3, r1
 8002588:	0010      	movs	r0, r2
 800258a:	0019      	movs	r1, r3
 800258c:	6a3a      	ldr	r2, [r7, #32]
 800258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002590:	f7fd feb4 	bl	80002fc <__aeabi_dadd>
 8002594:	0002      	movs	r2, r0
 8002596:	000b      	movs	r3, r1
 8002598:	6838      	ldr	r0, [r7, #0]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	f7fe fa74 	bl	8000a88 <__aeabi_ddiv>
 80025a0:	0002      	movs	r2, r0
 80025a2:	000b      	movs	r3, r1
 80025a4:	0010      	movs	r0, r2
 80025a6:	0019      	movs	r1, r3
 80025a8:	f7fd fe58 	bl	800025c <__aeabi_d2lz>
 80025ac:	0002      	movs	r2, r0
 80025ae:	000b      	movs	r3, r1
 80025b0:	61ba      	str	r2, [r7, #24]
 80025b2:	61fb      	str	r3, [r7, #28]

                        tof = tof_dtu * DWT_TIME_UNITS;
 80025b4:	69b8      	ldr	r0, [r7, #24]
 80025b6:	69f9      	ldr	r1, [r7, #28]
 80025b8:	f7fd fe8a 	bl	80002d0 <__aeabi_l2d>
 80025bc:	4a28      	ldr	r2, [pc, #160]	@ (8002660 <dw_main+0x3b0>)
 80025be:	4b29      	ldr	r3, [pc, #164]	@ (8002664 <dw_main+0x3b4>)
 80025c0:	f7fe fd7a 	bl	80010b8 <__aeabi_dmul>
 80025c4:	0002      	movs	r2, r0
 80025c6:	000b      	movs	r3, r1
 80025c8:	4927      	ldr	r1, [pc, #156]	@ (8002668 <dw_main+0x3b8>)
 80025ca:	600a      	str	r2, [r1, #0]
 80025cc:	604b      	str	r3, [r1, #4]
                        distance = tof * SPEED_OF_LIGHT;
 80025ce:	4b26      	ldr	r3, [pc, #152]	@ (8002668 <dw_main+0x3b8>)
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	6859      	ldr	r1, [r3, #4]
 80025d4:	2298      	movs	r2, #152	@ 0x98
 80025d6:	0552      	lsls	r2, r2, #21
 80025d8:	4b24      	ldr	r3, [pc, #144]	@ (800266c <dw_main+0x3bc>)
 80025da:	f7fe fd6d 	bl	80010b8 <__aeabi_dmul>
 80025de:	0002      	movs	r2, r0
 80025e0:	000b      	movs	r3, r1
 80025e2:	4923      	ldr	r1, [pc, #140]	@ (8002670 <dw_main+0x3c0>)
 80025e4:	600a      	str	r2, [r1, #0]
 80025e6:	604b      	str	r3, [r1, #4]

                        /* Display computed distance on LCD. */
                        // sprintf(dist_str, "DIST: %3.2f m", distance);
                        // lcd_display_str(dist_str);

                        CDC_Transmit_FS((uint8_t*) dist_str, sizeof(dist_str));
 80025e8:	4b22      	ldr	r3, [pc, #136]	@ (8002674 <dw_main+0x3c4>)
 80025ea:	2110      	movs	r1, #16
 80025ec:	0018      	movs	r0, r3
 80025ee:	f008 fd1d 	bl	800b02c <CDC_Transmit_FS>
 80025f2:	e680      	b.n	80022f6 <dw_main+0x46>
                    }
                }
                else
                {
                    /* Clear RX error/timeout events in the DW1000 status register. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 80025f4:	4b20      	ldr	r3, [pc, #128]	@ (8002678 <dw_main+0x3c8>)
 80025f6:	001a      	movs	r2, r3
 80025f8:	2100      	movs	r1, #0
 80025fa:	200f      	movs	r0, #15
 80025fc:	f009 fec7 	bl	800c38e <dwt_write32bitoffsetreg>

                    /* Reset RX to properly reinitialise LDE operation. */
                    dwt_rxreset();
 8002600:	f00a f9bf 	bl	800c982 <dwt_rxreset>
 8002604:	e677      	b.n	80022f6 <dw_main+0x46>
            }
        }
        else
        {
            /* Clear RX error/timeout events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8002606:	4b1c      	ldr	r3, [pc, #112]	@ (8002678 <dw_main+0x3c8>)
 8002608:	001a      	movs	r2, r3
 800260a:	2100      	movs	r1, #0
 800260c:	200f      	movs	r0, #15
 800260e:	f009 febe 	bl	800c38e <dwt_write32bitoffsetreg>

            /* Reset RX to properly reinitialise LDE operation. */
            dwt_rxreset();
 8002612:	f00a f9b6 	bl	800c982 <dwt_rxreset>
 8002616:	e66e      	b.n	80022f6 <dw_main+0x46>
                    continue;
 8002618:	46c0      	nop			@ (mov r8, r8)
    {
 800261a:	e66c      	b.n	80022f6 <dw_main+0x46>
 800261c:	20000000 	.word	0x20000000
 8002620:	00004034 	.word	0x00004034
 8002624:	200001f8 	.word	0x200001f8
 8002628:	2427d000 	.word	0x2427d000
 800262c:	200001e0 	.word	0x200001e0
 8002630:	2000000c 	.word	0x2000000c
 8002634:	20000200 	.word	0x20000200
 8002638:	0abe0000 	.word	0x0abe0000
 800263c:	00000ce4 	.word	0x00000ce4
 8002640:	200001dc 	.word	0x200001dc
 8002644:	20000018 	.word	0x20000018
 8002648:	20000028 	.word	0x20000028
 800264c:	20000208 	.word	0x20000208
 8002650:	20000210 	.word	0x20000210
 8002654:	200001ea 	.word	0x200001ea
 8002658:	200001ee 	.word	0x200001ee
 800265c:	200001f2 	.word	0x200001f2
 8002660:	3bce48fa 	.word	0x3bce48fa
 8002664:	3db13518 	.word	0x3db13518
 8002668:	20000218 	.word	0x20000218
 800266c:	41b1dd19 	.word	0x41b1dd19
 8002670:	20000220 	.word	0x20000220
 8002674:	20000228 	.word	0x20000228
 8002678:	24279000 	.word	0x24279000

0800267c <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_tx_timestamp_u64(void)
{
 800267c:	b5b0      	push	{r4, r5, r7, lr}
 800267e:	b08a      	sub	sp, #40	@ 0x28
 8002680:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 8002682:	2200      	movs	r2, #0
 8002684:	2300      	movs	r3, #0
 8002686:	623a      	str	r2, [r7, #32]
 8002688:	627b      	str	r3, [r7, #36]	@ 0x24
    int i;
    dwt_readtxtimestamp(ts_tab);
 800268a:	2314      	movs	r3, #20
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	0018      	movs	r0, r3
 8002690:	f009 fd13 	bl	800c0ba <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 8002694:	2304      	movs	r3, #4
 8002696:	61fb      	str	r3, [r7, #28]
 8002698:	e020      	b.n	80026dc <get_tx_timestamp_u64+0x60>
    {
        ts <<= 8;
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	0e1b      	lsrs	r3, r3, #24
 800269e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026a0:	0215      	lsls	r5, r2, #8
 80026a2:	431d      	orrs	r5, r3
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	021c      	lsls	r4, r3, #8
 80026a8:	623c      	str	r4, [r7, #32]
 80026aa:	627d      	str	r5, [r7, #36]	@ 0x24
        ts |= ts_tab[i];
 80026ac:	2314      	movs	r3, #20
 80026ae:	18fa      	adds	r2, r7, r3
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	18d3      	adds	r3, r2, r3
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	68b9      	ldr	r1, [r7, #8]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	0008      	movs	r0, r1
 80026c4:	4318      	orrs	r0, r3
 80026c6:	6038      	str	r0, [r7, #0]
 80026c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ca:	431a      	orrs	r2, r3
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	623a      	str	r2, [r7, #32]
 80026d4:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 4; i >= 0; i--)
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3b01      	subs	r3, #1
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	dadb      	bge.n	800269a <get_tx_timestamp_u64+0x1e>
    }
    return ts;
 80026e2:	6a3a      	ldr	r2, [r7, #32]
 80026e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80026e6:	0010      	movs	r0, r2
 80026e8:	0019      	movs	r1, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b00a      	add	sp, #40	@ 0x28
 80026ee:	bdb0      	pop	{r4, r5, r7, pc}

080026f0 <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_rx_timestamp_u64(void)
{
 80026f0:	b5b0      	push	{r4, r5, r7, lr}
 80026f2:	b08a      	sub	sp, #40	@ 0x28
 80026f4:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 80026f6:	2200      	movs	r2, #0
 80026f8:	2300      	movs	r3, #0
 80026fa:	623a      	str	r2, [r7, #32]
 80026fc:	627b      	str	r3, [r7, #36]	@ 0x24
    int i;
    dwt_readrxtimestamp(ts_tab);
 80026fe:	2314      	movs	r3, #20
 8002700:	18fb      	adds	r3, r7, r3
 8002702:	0018      	movs	r0, r3
 8002704:	f009 fce7 	bl	800c0d6 <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 8002708:	2304      	movs	r3, #4
 800270a:	61fb      	str	r3, [r7, #28]
 800270c:	e020      	b.n	8002750 <get_rx_timestamp_u64+0x60>
    {
        ts <<= 8;
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	0e1b      	lsrs	r3, r3, #24
 8002712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002714:	0215      	lsls	r5, r2, #8
 8002716:	431d      	orrs	r5, r3
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	021c      	lsls	r4, r3, #8
 800271c:	623c      	str	r4, [r7, #32]
 800271e:	627d      	str	r5, [r7, #36]	@ 0x24
        ts |= ts_tab[i];
 8002720:	2314      	movs	r3, #20
 8002722:	18fa      	adds	r2, r7, r3
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	18d3      	adds	r3, r2, r3
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	2300      	movs	r3, #0
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	68b9      	ldr	r1, [r7, #8]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	0008      	movs	r0, r1
 8002738:	4318      	orrs	r0, r3
 800273a:	6038      	str	r0, [r7, #0]
 800273c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273e:	431a      	orrs	r2, r3
 8002740:	607a      	str	r2, [r7, #4]
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	623a      	str	r2, [r7, #32]
 8002748:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 4; i >= 0; i--)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3b01      	subs	r3, #1
 800274e:	61fb      	str	r3, [r7, #28]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	2b00      	cmp	r3, #0
 8002754:	dadb      	bge.n	800270e <get_rx_timestamp_u64+0x1e>
    }
    return ts;
 8002756:	6a3a      	ldr	r2, [r7, #32]
 8002758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800275a:	0010      	movs	r0, r2
 800275c:	0019      	movs	r1, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	b00a      	add	sp, #40	@ 0x28
 8002762:	bdb0      	pop	{r4, r5, r7, pc}

08002764 <final_msg_get_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
static void final_msg_get_ts(const uint8 *ts_field, uint32 *ts)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
    int i;
    *ts = 0;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	e010      	b.n	800279c <final_msg_get_ts+0x38>
    {
        *ts += ts_field[i] << (i * 8);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	188a      	adds	r2, r1, r2
 8002784:	7812      	ldrb	r2, [r2, #0]
 8002786:	0011      	movs	r1, r2
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	00d2      	lsls	r2, r2, #3
 800278c:	4091      	lsls	r1, r2
 800278e:	000a      	movs	r2, r1
 8002790:	189a      	adds	r2, r3, r2
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	3301      	adds	r3, #1
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b03      	cmp	r3, #3
 80027a0:	ddeb      	ble.n	800277a <final_msg_get_ts+0x16>
    }
}
 80027a2:	46c0      	nop			@ (mov r8, r8)
 80027a4:	46c0      	nop			@ (mov r8, r8)
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b004      	add	sp, #16
 80027aa:	bd80      	pop	{r7, pc}

080027ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027b0:	f000 fc28 	bl	8003004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027b4:	f000 f814 	bl	80027e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027b8:	f000 f98a 	bl	8002ad0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80027bc:	f000 f958 	bl	8002a70 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80027c0:	f000 f8da 	bl	8002978 <MX_SPI1_Init>
  MX_ADC_Init();
 80027c4:	f000 f87c 	bl	80028c0 <MX_ADC_Init>
  MX_SPI2_Init();
 80027c8:	f000 f914 	bl	80029f4 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 80027cc:	f008 fbaa 	bl	800af24 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  setup_DW1000RSTnIRQ(0);
 80027d0:	2000      	movs	r0, #0
 80027d2:	f00a fa8e 	bl	800ccf2 <setup_DW1000RSTnIRQ>

  // initLCD();

  dw_main();
 80027d6:	f7ff fd6b 	bl	80022b0 <dw_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80027da:	46c0      	nop			@ (mov r8, r8)
 80027dc:	e7fd      	b.n	80027da <main+0x2e>
	...

080027e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027e0:	b590      	push	{r4, r7, lr}
 80027e2:	b099      	sub	sp, #100	@ 0x64
 80027e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027e6:	242c      	movs	r4, #44	@ 0x2c
 80027e8:	193b      	adds	r3, r7, r4
 80027ea:	0018      	movs	r0, r3
 80027ec:	2334      	movs	r3, #52	@ 0x34
 80027ee:	001a      	movs	r2, r3
 80027f0:	2100      	movs	r1, #0
 80027f2:	f00a fb35 	bl	800ce60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027f6:	231c      	movs	r3, #28
 80027f8:	18fb      	adds	r3, r7, r3
 80027fa:	0018      	movs	r0, r3
 80027fc:	2310      	movs	r3, #16
 80027fe:	001a      	movs	r2, r3
 8002800:	2100      	movs	r1, #0
 8002802:	f00a fb2d 	bl	800ce60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002806:	003b      	movs	r3, r7
 8002808:	0018      	movs	r0, r3
 800280a:	231c      	movs	r3, #28
 800280c:	001a      	movs	r2, r3
 800280e:	2100      	movs	r1, #0
 8002810:	f00a fb26 	bl	800ce60 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8002814:	0021      	movs	r1, r4
 8002816:	187b      	adds	r3, r7, r1
 8002818:	2232      	movs	r2, #50	@ 0x32
 800281a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800281c:	187b      	adds	r3, r7, r1
 800281e:	2201      	movs	r2, #1
 8002820:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002822:	187b      	adds	r3, r7, r1
 8002824:	2201      	movs	r2, #1
 8002826:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002828:	187b      	adds	r3, r7, r1
 800282a:	2201      	movs	r2, #1
 800282c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800282e:	187b      	adds	r3, r7, r1
 8002830:	2210      	movs	r2, #16
 8002832:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002834:	187b      	adds	r3, r7, r1
 8002836:	2210      	movs	r2, #16
 8002838:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800283a:	187b      	adds	r3, r7, r1
 800283c:	2202      	movs	r2, #2
 800283e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002840:	187b      	adds	r3, r7, r1
 8002842:	2280      	movs	r2, #128	@ 0x80
 8002844:	0212      	lsls	r2, r2, #8
 8002846:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002848:	187b      	adds	r3, r7, r1
 800284a:	22e0      	movs	r2, #224	@ 0xe0
 800284c:	0352      	lsls	r2, r2, #13
 800284e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8002850:	187b      	adds	r3, r7, r1
 8002852:	2201      	movs	r2, #1
 8002854:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002856:	187b      	adds	r3, r7, r1
 8002858:	0018      	movs	r0, r3
 800285a:	f002 ffc9 	bl	80057f0 <HAL_RCC_OscConfig>
 800285e:	1e03      	subs	r3, r0, #0
 8002860:	d001      	beq.n	8002866 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002862:	f000 f9fd 	bl	8002c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002866:	211c      	movs	r1, #28
 8002868:	187b      	adds	r3, r7, r1
 800286a:	2207      	movs	r2, #7
 800286c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800286e:	187b      	adds	r3, r7, r1
 8002870:	2202      	movs	r2, #2
 8002872:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002874:	187b      	adds	r3, r7, r1
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800287a:	187b      	adds	r3, r7, r1
 800287c:	2200      	movs	r2, #0
 800287e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002880:	187b      	adds	r3, r7, r1
 8002882:	2101      	movs	r1, #1
 8002884:	0018      	movs	r0, r3
 8002886:	f003 fb39 	bl	8005efc <HAL_RCC_ClockConfig>
 800288a:	1e03      	subs	r3, r0, #0
 800288c:	d001      	beq.n	8002892 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800288e:	f000 f9e7 	bl	8002c60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 8002892:	003b      	movs	r3, r7
 8002894:	4a09      	ldr	r2, [pc, #36]	@ (80028bc <SystemClock_Config+0xdc>)
 8002896:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002898:	003b      	movs	r3, r7
 800289a:	2200      	movs	r2, #0
 800289c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800289e:	003b      	movs	r3, r7
 80028a0:	2200      	movs	r2, #0
 80028a2:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028a4:	003b      	movs	r3, r7
 80028a6:	0018      	movs	r0, r3
 80028a8:	f003 fc94 	bl	80061d4 <HAL_RCCEx_PeriphCLKConfig>
 80028ac:	1e03      	subs	r3, r0, #0
 80028ae:	d001      	beq.n	80028b4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80028b0:	f000 f9d6 	bl	8002c60 <Error_Handler>
  }
}
 80028b4:	46c0      	nop			@ (mov r8, r8)
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b019      	add	sp, #100	@ 0x64
 80028ba:	bd90      	pop	{r4, r7, pc}
 80028bc:	00020001 	.word	0x00020001

080028c0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028c6:	1d3b      	adds	r3, r7, #4
 80028c8:	0018      	movs	r0, r3
 80028ca:	230c      	movs	r3, #12
 80028cc:	001a      	movs	r2, r3
 80028ce:	2100      	movs	r1, #0
 80028d0:	f00a fac6 	bl	800ce60 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80028d4:	4b26      	ldr	r3, [pc, #152]	@ (8002970 <MX_ADC_Init+0xb0>)
 80028d6:	4a27      	ldr	r2, [pc, #156]	@ (8002974 <MX_ADC_Init+0xb4>)
 80028d8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80028da:	4b25      	ldr	r3, [pc, #148]	@ (8002970 <MX_ADC_Init+0xb0>)
 80028dc:	2200      	movs	r2, #0
 80028de:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80028e0:	4b23      	ldr	r3, [pc, #140]	@ (8002970 <MX_ADC_Init+0xb0>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028e6:	4b22      	ldr	r3, [pc, #136]	@ (8002970 <MX_ADC_Init+0xb0>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80028ec:	4b20      	ldr	r3, [pc, #128]	@ (8002970 <MX_ADC_Init+0xb0>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002970 <MX_ADC_Init+0xb0>)
 80028f4:	2204      	movs	r2, #4
 80028f6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80028f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002970 <MX_ADC_Init+0xb0>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80028fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002970 <MX_ADC_Init+0xb0>)
 8002900:	2200      	movs	r2, #0
 8002902:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002904:	4b1a      	ldr	r3, [pc, #104]	@ (8002970 <MX_ADC_Init+0xb0>)
 8002906:	2200      	movs	r2, #0
 8002908:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800290a:	4b19      	ldr	r3, [pc, #100]	@ (8002970 <MX_ADC_Init+0xb0>)
 800290c:	2200      	movs	r2, #0
 800290e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002910:	4b17      	ldr	r3, [pc, #92]	@ (8002970 <MX_ADC_Init+0xb0>)
 8002912:	22c2      	movs	r2, #194	@ 0xc2
 8002914:	32ff      	adds	r2, #255	@ 0xff
 8002916:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002918:	4b15      	ldr	r3, [pc, #84]	@ (8002970 <MX_ADC_Init+0xb0>)
 800291a:	2200      	movs	r2, #0
 800291c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800291e:	4b14      	ldr	r3, [pc, #80]	@ (8002970 <MX_ADC_Init+0xb0>)
 8002920:	2224      	movs	r2, #36	@ 0x24
 8002922:	2100      	movs	r1, #0
 8002924:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002926:	4b12      	ldr	r3, [pc, #72]	@ (8002970 <MX_ADC_Init+0xb0>)
 8002928:	2201      	movs	r2, #1
 800292a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800292c:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <MX_ADC_Init+0xb0>)
 800292e:	0018      	movs	r0, r3
 8002930:	f000 fbf0 	bl	8003114 <HAL_ADC_Init>
 8002934:	1e03      	subs	r3, r0, #0
 8002936:	d001      	beq.n	800293c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002938:	f000 f992 	bl	8002c60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800293c:	1d3b      	adds	r3, r7, #4
 800293e:	2208      	movs	r2, #8
 8002940:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002942:	1d3b      	adds	r3, r7, #4
 8002944:	2280      	movs	r2, #128	@ 0x80
 8002946:	0152      	lsls	r2, r2, #5
 8002948:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	2280      	movs	r2, #128	@ 0x80
 800294e:	0552      	lsls	r2, r2, #21
 8002950:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002952:	1d3a      	adds	r2, r7, #4
 8002954:	4b06      	ldr	r3, [pc, #24]	@ (8002970 <MX_ADC_Init+0xb0>)
 8002956:	0011      	movs	r1, r2
 8002958:	0018      	movs	r0, r3
 800295a:	f000 fd1b 	bl	8003394 <HAL_ADC_ConfigChannel>
 800295e:	1e03      	subs	r3, r0, #0
 8002960:	d001      	beq.n	8002966 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002962:	f000 f97d 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002966:	46c0      	nop			@ (mov r8, r8)
 8002968:	46bd      	mov	sp, r7
 800296a:	b004      	add	sp, #16
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			@ (mov r8, r8)
 8002970:	20000238 	.word	0x20000238
 8002974:	40012400 	.word	0x40012400

08002978 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800297c:	4b1b      	ldr	r3, [pc, #108]	@ (80029ec <MX_SPI1_Init+0x74>)
 800297e:	4a1c      	ldr	r2, [pc, #112]	@ (80029f0 <MX_SPI1_Init+0x78>)
 8002980:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002982:	4b1a      	ldr	r3, [pc, #104]	@ (80029ec <MX_SPI1_Init+0x74>)
 8002984:	2282      	movs	r2, #130	@ 0x82
 8002986:	0052      	lsls	r2, r2, #1
 8002988:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800298a:	4b18      	ldr	r3, [pc, #96]	@ (80029ec <MX_SPI1_Init+0x74>)
 800298c:	2200      	movs	r2, #0
 800298e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002990:	4b16      	ldr	r3, [pc, #88]	@ (80029ec <MX_SPI1_Init+0x74>)
 8002992:	22e0      	movs	r2, #224	@ 0xe0
 8002994:	00d2      	lsls	r2, r2, #3
 8002996:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002998:	4b14      	ldr	r3, [pc, #80]	@ (80029ec <MX_SPI1_Init+0x74>)
 800299a:	2200      	movs	r2, #0
 800299c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800299e:	4b13      	ldr	r3, [pc, #76]	@ (80029ec <MX_SPI1_Init+0x74>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029a4:	4b11      	ldr	r3, [pc, #68]	@ (80029ec <MX_SPI1_Init+0x74>)
 80029a6:	2280      	movs	r2, #128	@ 0x80
 80029a8:	0092      	lsls	r2, r2, #2
 80029aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80029ac:	4b0f      	ldr	r3, [pc, #60]	@ (80029ec <MX_SPI1_Init+0x74>)
 80029ae:	2218      	movs	r2, #24
 80029b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029b2:	4b0e      	ldr	r3, [pc, #56]	@ (80029ec <MX_SPI1_Init+0x74>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029b8:	4b0c      	ldr	r3, [pc, #48]	@ (80029ec <MX_SPI1_Init+0x74>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029be:	4b0b      	ldr	r3, [pc, #44]	@ (80029ec <MX_SPI1_Init+0x74>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80029c4:	4b09      	ldr	r3, [pc, #36]	@ (80029ec <MX_SPI1_Init+0x74>)
 80029c6:	2207      	movs	r2, #7
 80029c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80029ca:	4b08      	ldr	r3, [pc, #32]	@ (80029ec <MX_SPI1_Init+0x74>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80029d0:	4b06      	ldr	r3, [pc, #24]	@ (80029ec <MX_SPI1_Init+0x74>)
 80029d2:	2208      	movs	r2, #8
 80029d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029d6:	4b05      	ldr	r3, [pc, #20]	@ (80029ec <MX_SPI1_Init+0x74>)
 80029d8:	0018      	movs	r0, r3
 80029da:	f003 fcf9 	bl	80063d0 <HAL_SPI_Init>
 80029de:	1e03      	subs	r3, r0, #0
 80029e0:	d001      	beq.n	80029e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80029e2:	f000 f93d 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80029e6:	46c0      	nop			@ (mov r8, r8)
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20000278 	.word	0x20000278
 80029f0:	40013000 	.word	0x40013000

080029f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80029f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a68 <MX_SPI2_Init+0x74>)
 80029fa:	4a1c      	ldr	r2, [pc, #112]	@ (8002a6c <MX_SPI2_Init+0x78>)
 80029fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80029fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002a68 <MX_SPI2_Init+0x74>)
 8002a00:	2282      	movs	r2, #130	@ 0x82
 8002a02:	0052      	lsls	r2, r2, #1
 8002a04:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002a06:	4b18      	ldr	r3, [pc, #96]	@ (8002a68 <MX_SPI2_Init+0x74>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002a0c:	4b16      	ldr	r3, [pc, #88]	@ (8002a68 <MX_SPI2_Init+0x74>)
 8002a0e:	22c0      	movs	r2, #192	@ 0xc0
 8002a10:	0092      	lsls	r2, r2, #2
 8002a12:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a14:	4b14      	ldr	r3, [pc, #80]	@ (8002a68 <MX_SPI2_Init+0x74>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a1a:	4b13      	ldr	r3, [pc, #76]	@ (8002a68 <MX_SPI2_Init+0x74>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002a20:	4b11      	ldr	r3, [pc, #68]	@ (8002a68 <MX_SPI2_Init+0x74>)
 8002a22:	2280      	movs	r2, #128	@ 0x80
 8002a24:	02d2      	lsls	r2, r2, #11
 8002a26:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a28:	4b0f      	ldr	r3, [pc, #60]	@ (8002a68 <MX_SPI2_Init+0x74>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a68 <MX_SPI2_Init+0x74>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a34:	4b0c      	ldr	r3, [pc, #48]	@ (8002a68 <MX_SPI2_Init+0x74>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a68 <MX_SPI2_Init+0x74>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002a40:	4b09      	ldr	r3, [pc, #36]	@ (8002a68 <MX_SPI2_Init+0x74>)
 8002a42:	2207      	movs	r2, #7
 8002a44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a46:	4b08      	ldr	r3, [pc, #32]	@ (8002a68 <MX_SPI2_Init+0x74>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a4c:	4b06      	ldr	r3, [pc, #24]	@ (8002a68 <MX_SPI2_Init+0x74>)
 8002a4e:	2208      	movs	r2, #8
 8002a50:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002a52:	4b05      	ldr	r3, [pc, #20]	@ (8002a68 <MX_SPI2_Init+0x74>)
 8002a54:	0018      	movs	r0, r3
 8002a56:	f003 fcbb 	bl	80063d0 <HAL_SPI_Init>
 8002a5a:	1e03      	subs	r3, r0, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002a5e:	f000 f8ff 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002a62:	46c0      	nop			@ (mov r8, r8)
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	200002dc 	.word	0x200002dc
 8002a6c:	40003800 	.word	0x40003800

08002a70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a74:	4b14      	ldr	r3, [pc, #80]	@ (8002ac8 <MX_USART1_UART_Init+0x58>)
 8002a76:	4a15      	ldr	r2, [pc, #84]	@ (8002acc <MX_USART1_UART_Init+0x5c>)
 8002a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8002a7a:	4b13      	ldr	r3, [pc, #76]	@ (8002ac8 <MX_USART1_UART_Init+0x58>)
 8002a7c:	2296      	movs	r2, #150	@ 0x96
 8002a7e:	0212      	lsls	r2, r2, #8
 8002a80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a82:	4b11      	ldr	r3, [pc, #68]	@ (8002ac8 <MX_USART1_UART_Init+0x58>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a88:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac8 <MX_USART1_UART_Init+0x58>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac8 <MX_USART1_UART_Init+0x58>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a94:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac8 <MX_USART1_UART_Init+0x58>)
 8002a96:	220c      	movs	r2, #12
 8002a98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac8 <MX_USART1_UART_Init+0x58>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aa0:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <MX_USART1_UART_Init+0x58>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002aa6:	4b08      	ldr	r3, [pc, #32]	@ (8002ac8 <MX_USART1_UART_Init+0x58>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002aac:	4b06      	ldr	r3, [pc, #24]	@ (8002ac8 <MX_USART1_UART_Init+0x58>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ab2:	4b05      	ldr	r3, [pc, #20]	@ (8002ac8 <MX_USART1_UART_Init+0x58>)
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f004 f825 	bl	8006b04 <HAL_UART_Init>
 8002aba:	1e03      	subs	r3, r0, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002abe:	f000 f8cf 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ac2:	46c0      	nop			@ (mov r8, r8)
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20000340 	.word	0x20000340
 8002acc:	40013800 	.word	0x40013800

08002ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ad0:	b590      	push	{r4, r7, lr}
 8002ad2:	b089      	sub	sp, #36	@ 0x24
 8002ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad6:	240c      	movs	r4, #12
 8002ad8:	193b      	adds	r3, r7, r4
 8002ada:	0018      	movs	r0, r3
 8002adc:	2314      	movs	r3, #20
 8002ade:	001a      	movs	r2, r3
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	f00a f9bd 	bl	800ce60 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ae6:	4b5b      	ldr	r3, [pc, #364]	@ (8002c54 <MX_GPIO_Init+0x184>)
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	4b5a      	ldr	r3, [pc, #360]	@ (8002c54 <MX_GPIO_Init+0x184>)
 8002aec:	2180      	movs	r1, #128	@ 0x80
 8002aee:	03c9      	lsls	r1, r1, #15
 8002af0:	430a      	orrs	r2, r1
 8002af2:	615a      	str	r2, [r3, #20]
 8002af4:	4b57      	ldr	r3, [pc, #348]	@ (8002c54 <MX_GPIO_Init+0x184>)
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	2380      	movs	r3, #128	@ 0x80
 8002afa:	03db      	lsls	r3, r3, #15
 8002afc:	4013      	ands	r3, r2
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b02:	4b54      	ldr	r3, [pc, #336]	@ (8002c54 <MX_GPIO_Init+0x184>)
 8002b04:	695a      	ldr	r2, [r3, #20]
 8002b06:	4b53      	ldr	r3, [pc, #332]	@ (8002c54 <MX_GPIO_Init+0x184>)
 8002b08:	2180      	movs	r1, #128	@ 0x80
 8002b0a:	0289      	lsls	r1, r1, #10
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	615a      	str	r2, [r3, #20]
 8002b10:	4b50      	ldr	r3, [pc, #320]	@ (8002c54 <MX_GPIO_Init+0x184>)
 8002b12:	695a      	ldr	r2, [r3, #20]
 8002b14:	2380      	movs	r3, #128	@ 0x80
 8002b16:	029b      	lsls	r3, r3, #10
 8002b18:	4013      	ands	r3, r2
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1e:	4b4d      	ldr	r3, [pc, #308]	@ (8002c54 <MX_GPIO_Init+0x184>)
 8002b20:	695a      	ldr	r2, [r3, #20]
 8002b22:	4b4c      	ldr	r3, [pc, #304]	@ (8002c54 <MX_GPIO_Init+0x184>)
 8002b24:	2180      	movs	r1, #128	@ 0x80
 8002b26:	02c9      	lsls	r1, r1, #11
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	615a      	str	r2, [r3, #20]
 8002b2c:	4b49      	ldr	r3, [pc, #292]	@ (8002c54 <MX_GPIO_Init+0x184>)
 8002b2e:	695a      	ldr	r2, [r3, #20]
 8002b30:	2380      	movs	r3, #128	@ 0x80
 8002b32:	02db      	lsls	r3, r3, #11
 8002b34:	4013      	ands	r3, r2
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, E5_NRST_Pin|DW_NSS_Pin, GPIO_PIN_RESET);
 8002b3a:	2390      	movs	r3, #144	@ 0x90
 8002b3c:	05db      	lsls	r3, r3, #23
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2111      	movs	r1, #17
 8002b42:	0018      	movs	r0, r3
 8002b44:	f000 ffd9 	bl	8003afa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCREEN_EN_Pin|SD_CS_Pin|WAKE_Pin|TFT_DC_Pin
 8002b48:	4943      	ldr	r1, [pc, #268]	@ (8002c58 <MX_GPIO_Init+0x188>)
 8002b4a:	4b44      	ldr	r3, [pc, #272]	@ (8002c5c <MX_GPIO_Init+0x18c>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f000 ffd3 	bl	8003afa <HAL_GPIO_WritePin>
                          |TFT_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : E5_NRST_Pin */
  GPIO_InitStruct.Pin = E5_NRST_Pin;
 8002b54:	193b      	adds	r3, r7, r4
 8002b56:	2201      	movs	r2, #1
 8002b58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b5a:	193b      	adds	r3, r7, r4
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	193b      	adds	r3, r7, r4
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b66:	193b      	adds	r3, r7, r4
 8002b68:	2200      	movs	r2, #0
 8002b6a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(E5_NRST_GPIO_Port, &GPIO_InitStruct);
 8002b6c:	193a      	adds	r2, r7, r4
 8002b6e:	2390      	movs	r3, #144	@ 0x90
 8002b70:	05db      	lsls	r3, r3, #23
 8002b72:	0011      	movs	r1, r2
 8002b74:	0018      	movs	r0, r3
 8002b76:	f000 fe2b 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_RESET_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin;
 8002b7a:	193b      	adds	r3, r7, r4
 8002b7c:	2204      	movs	r2, #4
 8002b7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b80:	193b      	adds	r3, r7, r4
 8002b82:	2288      	movs	r2, #136	@ 0x88
 8002b84:	0352      	lsls	r2, r2, #13
 8002b86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	193b      	adds	r3, r7, r4
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8002b8e:	193a      	adds	r2, r7, r4
 8002b90:	2390      	movs	r3, #144	@ 0x90
 8002b92:	05db      	lsls	r3, r3, #23
 8002b94:	0011      	movs	r1, r2
 8002b96:	0018      	movs	r0, r3
 8002b98:	f000 fe1a 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 8002b9c:	193b      	adds	r3, r7, r4
 8002b9e:	2210      	movs	r2, #16
 8002ba0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ba2:	193b      	adds	r3, r7, r4
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba8:	193b      	adds	r3, r7, r4
 8002baa:	2200      	movs	r2, #0
 8002bac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bae:	193b      	adds	r3, r7, r4
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 8002bb4:	193a      	adds	r2, r7, r4
 8002bb6:	2390      	movs	r3, #144	@ 0x90
 8002bb8:	05db      	lsls	r3, r3, #23
 8002bba:	0011      	movs	r1, r2
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f000 fe07 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCREEN_EN_Pin SD_CS_Pin WAKE_Pin TFT_DC_Pin
                           TFT_RST_Pin */
  GPIO_InitStruct.Pin = SCREEN_EN_Pin|SD_CS_Pin|WAKE_Pin|TFT_DC_Pin
 8002bc2:	193b      	adds	r3, r7, r4
 8002bc4:	4a24      	ldr	r2, [pc, #144]	@ (8002c58 <MX_GPIO_Init+0x188>)
 8002bc6:	601a      	str	r2, [r3, #0]
                          |TFT_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bc8:	193b      	adds	r3, r7, r4
 8002bca:	2201      	movs	r2, #1
 8002bcc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bce:	193b      	adds	r3, r7, r4
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd4:	193b      	adds	r3, r7, r4
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bda:	193b      	adds	r3, r7, r4
 8002bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8002c5c <MX_GPIO_Init+0x18c>)
 8002bde:	0019      	movs	r1, r3
 8002be0:	0010      	movs	r0, r2
 8002be2:	f000 fdf5 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_DISP_Pin */
  GPIO_InitStruct.Pin = BTN_DISP_Pin;
 8002be6:	0021      	movs	r1, r4
 8002be8:	187b      	adds	r3, r7, r1
 8002bea:	2280      	movs	r2, #128	@ 0x80
 8002bec:	0192      	lsls	r2, r2, #6
 8002bee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bf0:	000c      	movs	r4, r1
 8002bf2:	193b      	adds	r3, r7, r4
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	193b      	adds	r3, r7, r4
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_DISP_GPIO_Port, &GPIO_InitStruct);
 8002bfe:	193b      	adds	r3, r7, r4
 8002c00:	4a16      	ldr	r2, [pc, #88]	@ (8002c5c <MX_GPIO_Init+0x18c>)
 8002c02:	0019      	movs	r1, r3
 8002c04:	0010      	movs	r0, r2
 8002c06:	f000 fde3 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 8002c0a:	0021      	movs	r1, r4
 8002c0c:	187b      	adds	r3, r7, r1
 8002c0e:	2220      	movs	r2, #32
 8002c10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c12:	187b      	adds	r3, r7, r1
 8002c14:	2288      	movs	r2, #136	@ 0x88
 8002c16:	0352      	lsls	r2, r2, #13
 8002c18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c1a:	187b      	adds	r3, r7, r1
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 8002c20:	187b      	adds	r3, r7, r1
 8002c22:	4a0e      	ldr	r2, [pc, #56]	@ (8002c5c <MX_GPIO_Init+0x18c>)
 8002c24:	0019      	movs	r1, r3
 8002c26:	0010      	movs	r0, r2
 8002c28:	f000 fdd2 	bl	80037d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2100      	movs	r1, #0
 8002c30:	2006      	movs	r0, #6
 8002c32:	f000 fd8b 	bl	800374c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002c36:	2006      	movs	r0, #6
 8002c38:	f000 fd9d 	bl	8003776 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2100      	movs	r1, #0
 8002c40:	2007      	movs	r0, #7
 8002c42:	f000 fd83 	bl	800374c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002c46:	2007      	movs	r0, #7
 8002c48:	f000 fd95 	bl	8003776 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c4c:	46c0      	nop			@ (mov r8, r8)
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b009      	add	sp, #36	@ 0x24
 8002c52:	bd90      	pop	{r4, r7, pc}
 8002c54:	40021000 	.word	0x40021000
 8002c58:	00000b44 	.word	0x00000b44
 8002c5c:	48000400 	.word	0x48000400

08002c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c64:	b672      	cpsid	i
}
 8002c66:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c68:	46c0      	nop			@ (mov r8, r8)
 8002c6a:	e7fd      	b.n	8002c68 <Error_Handler+0x8>

08002c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c72:	4b13      	ldr	r3, [pc, #76]	@ (8002cc0 <HAL_MspInit+0x54>)
 8002c74:	699a      	ldr	r2, [r3, #24]
 8002c76:	4b12      	ldr	r3, [pc, #72]	@ (8002cc0 <HAL_MspInit+0x54>)
 8002c78:	2101      	movs	r1, #1
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	619a      	str	r2, [r3, #24]
 8002c7e:	4b10      	ldr	r3, [pc, #64]	@ (8002cc0 <HAL_MspInit+0x54>)
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	2201      	movs	r2, #1
 8002c84:	4013      	ands	r3, r2
 8002c86:	607b      	str	r3, [r7, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc0 <HAL_MspInit+0x54>)
 8002c8c:	69da      	ldr	r2, [r3, #28]
 8002c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc0 <HAL_MspInit+0x54>)
 8002c90:	2180      	movs	r1, #128	@ 0x80
 8002c92:	0549      	lsls	r1, r1, #21
 8002c94:	430a      	orrs	r2, r1
 8002c96:	61da      	str	r2, [r3, #28]
 8002c98:	4b09      	ldr	r3, [pc, #36]	@ (8002cc0 <HAL_MspInit+0x54>)
 8002c9a:	69da      	ldr	r2, [r3, #28]
 8002c9c:	2380      	movs	r3, #128	@ 0x80
 8002c9e:	055b      	lsls	r3, r3, #21
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2100      	movs	r1, #0
 8002caa:	2004      	movs	r0, #4
 8002cac:	f000 fd4e 	bl	800374c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8002cb0:	2004      	movs	r0, #4
 8002cb2:	f000 fd60 	bl	8003776 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cb6:	46c0      	nop			@ (mov r8, r8)
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	b002      	add	sp, #8
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	46c0      	nop			@ (mov r8, r8)
 8002cc0:	40021000 	.word	0x40021000

08002cc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cc4:	b590      	push	{r4, r7, lr}
 8002cc6:	b08b      	sub	sp, #44	@ 0x2c
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	2414      	movs	r4, #20
 8002cce:	193b      	adds	r3, r7, r4
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	2314      	movs	r3, #20
 8002cd4:	001a      	movs	r2, r3
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	f00a f8c2 	bl	800ce60 <memset>
  if(hadc->Instance==ADC1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a18      	ldr	r2, [pc, #96]	@ (8002d44 <HAL_ADC_MspInit+0x80>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d12a      	bne.n	8002d3c <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ce6:	4b18      	ldr	r3, [pc, #96]	@ (8002d48 <HAL_ADC_MspInit+0x84>)
 8002ce8:	699a      	ldr	r2, [r3, #24]
 8002cea:	4b17      	ldr	r3, [pc, #92]	@ (8002d48 <HAL_ADC_MspInit+0x84>)
 8002cec:	2180      	movs	r1, #128	@ 0x80
 8002cee:	0089      	lsls	r1, r1, #2
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	619a      	str	r2, [r3, #24]
 8002cf4:	4b14      	ldr	r3, [pc, #80]	@ (8002d48 <HAL_ADC_MspInit+0x84>)
 8002cf6:	699a      	ldr	r2, [r3, #24]
 8002cf8:	2380      	movs	r3, #128	@ 0x80
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d02:	4b11      	ldr	r3, [pc, #68]	@ (8002d48 <HAL_ADC_MspInit+0x84>)
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	4b10      	ldr	r3, [pc, #64]	@ (8002d48 <HAL_ADC_MspInit+0x84>)
 8002d08:	2180      	movs	r1, #128	@ 0x80
 8002d0a:	02c9      	lsls	r1, r1, #11
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	615a      	str	r2, [r3, #20]
 8002d10:	4b0d      	ldr	r3, [pc, #52]	@ (8002d48 <HAL_ADC_MspInit+0x84>)
 8002d12:	695a      	ldr	r2, [r3, #20]
 8002d14:	2380      	movs	r3, #128	@ 0x80
 8002d16:	02db      	lsls	r3, r3, #11
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = VBATT_ADC_Pin;
 8002d1e:	193b      	adds	r3, r7, r4
 8002d20:	2201      	movs	r2, #1
 8002d22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d24:	193b      	adds	r3, r7, r4
 8002d26:	2203      	movs	r2, #3
 8002d28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2a:	193b      	adds	r3, r7, r4
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBATT_ADC_GPIO_Port, &GPIO_InitStruct);
 8002d30:	193b      	adds	r3, r7, r4
 8002d32:	4a06      	ldr	r2, [pc, #24]	@ (8002d4c <HAL_ADC_MspInit+0x88>)
 8002d34:	0019      	movs	r1, r3
 8002d36:	0010      	movs	r0, r2
 8002d38:	f000 fd4a 	bl	80037d0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002d3c:	46c0      	nop			@ (mov r8, r8)
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b00b      	add	sp, #44	@ 0x2c
 8002d42:	bd90      	pop	{r4, r7, pc}
 8002d44:	40012400 	.word	0x40012400
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	48000400 	.word	0x48000400

08002d50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d50:	b590      	push	{r4, r7, lr}
 8002d52:	b08d      	sub	sp, #52	@ 0x34
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d58:	241c      	movs	r4, #28
 8002d5a:	193b      	adds	r3, r7, r4
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	2314      	movs	r3, #20
 8002d60:	001a      	movs	r2, r3
 8002d62:	2100      	movs	r1, #0
 8002d64:	f00a f87c 	bl	800ce60 <memset>
  if(hspi->Instance==SPI1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a45      	ldr	r2, [pc, #276]	@ (8002e84 <HAL_SPI_MspInit+0x134>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d133      	bne.n	8002dda <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d72:	4b45      	ldr	r3, [pc, #276]	@ (8002e88 <HAL_SPI_MspInit+0x138>)
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	4b44      	ldr	r3, [pc, #272]	@ (8002e88 <HAL_SPI_MspInit+0x138>)
 8002d78:	2180      	movs	r1, #128	@ 0x80
 8002d7a:	0149      	lsls	r1, r1, #5
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	619a      	str	r2, [r3, #24]
 8002d80:	4b41      	ldr	r3, [pc, #260]	@ (8002e88 <HAL_SPI_MspInit+0x138>)
 8002d82:	699a      	ldr	r2, [r3, #24]
 8002d84:	2380      	movs	r3, #128	@ 0x80
 8002d86:	015b      	lsls	r3, r3, #5
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
 8002d8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d8e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e88 <HAL_SPI_MspInit+0x138>)
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	4b3d      	ldr	r3, [pc, #244]	@ (8002e88 <HAL_SPI_MspInit+0x138>)
 8002d94:	2180      	movs	r1, #128	@ 0x80
 8002d96:	0289      	lsls	r1, r1, #10
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	615a      	str	r2, [r3, #20]
 8002d9c:	4b3a      	ldr	r3, [pc, #232]	@ (8002e88 <HAL_SPI_MspInit+0x138>)
 8002d9e:	695a      	ldr	r2, [r3, #20]
 8002da0:	2380      	movs	r3, #128	@ 0x80
 8002da2:	029b      	lsls	r3, r3, #10
 8002da4:	4013      	ands	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DW_SCK_Pin|DW_MISO_Pin|DW_MOSI_Pin;
 8002daa:	0021      	movs	r1, r4
 8002dac:	187b      	adds	r3, r7, r1
 8002dae:	22e0      	movs	r2, #224	@ 0xe0
 8002db0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db2:	187b      	adds	r3, r7, r1
 8002db4:	2202      	movs	r2, #2
 8002db6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	187b      	adds	r3, r7, r1
 8002dba:	2200      	movs	r2, #0
 8002dbc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dbe:	187b      	adds	r3, r7, r1
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002dc4:	187b      	adds	r3, r7, r1
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dca:	187a      	adds	r2, r7, r1
 8002dcc:	2390      	movs	r3, #144	@ 0x90
 8002dce:	05db      	lsls	r3, r3, #23
 8002dd0:	0011      	movs	r1, r2
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f000 fcfc 	bl	80037d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002dd8:	e04f      	b.n	8002e7a <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI2)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a2b      	ldr	r2, [pc, #172]	@ (8002e8c <HAL_SPI_MspInit+0x13c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d14a      	bne.n	8002e7a <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002de4:	4b28      	ldr	r3, [pc, #160]	@ (8002e88 <HAL_SPI_MspInit+0x138>)
 8002de6:	69da      	ldr	r2, [r3, #28]
 8002de8:	4b27      	ldr	r3, [pc, #156]	@ (8002e88 <HAL_SPI_MspInit+0x138>)
 8002dea:	2180      	movs	r1, #128	@ 0x80
 8002dec:	01c9      	lsls	r1, r1, #7
 8002dee:	430a      	orrs	r2, r1
 8002df0:	61da      	str	r2, [r3, #28]
 8002df2:	4b25      	ldr	r3, [pc, #148]	@ (8002e88 <HAL_SPI_MspInit+0x138>)
 8002df4:	69da      	ldr	r2, [r3, #28]
 8002df6:	2380      	movs	r3, #128	@ 0x80
 8002df8:	01db      	lsls	r3, r3, #7
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e00:	4b21      	ldr	r3, [pc, #132]	@ (8002e88 <HAL_SPI_MspInit+0x138>)
 8002e02:	695a      	ldr	r2, [r3, #20]
 8002e04:	4b20      	ldr	r3, [pc, #128]	@ (8002e88 <HAL_SPI_MspInit+0x138>)
 8002e06:	2180      	movs	r1, #128	@ 0x80
 8002e08:	02c9      	lsls	r1, r1, #11
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	615a      	str	r2, [r3, #20]
 8002e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e88 <HAL_SPI_MspInit+0x138>)
 8002e10:	695a      	ldr	r2, [r3, #20]
 8002e12:	2380      	movs	r3, #128	@ 0x80
 8002e14:	02db      	lsls	r3, r3, #11
 8002e16:	4013      	ands	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e1c:	211c      	movs	r1, #28
 8002e1e:	187b      	adds	r3, r7, r1
 8002e20:	2280      	movs	r2, #128	@ 0x80
 8002e22:	00d2      	lsls	r2, r2, #3
 8002e24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e26:	000c      	movs	r4, r1
 8002e28:	193b      	adds	r3, r7, r4
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2e:	193b      	adds	r3, r7, r4
 8002e30:	2200      	movs	r2, #0
 8002e32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e34:	193b      	adds	r3, r7, r4
 8002e36:	2203      	movs	r2, #3
 8002e38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e3a:	193b      	adds	r3, r7, r4
 8002e3c:	2205      	movs	r2, #5
 8002e3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e40:	193b      	adds	r3, r7, r4
 8002e42:	4a13      	ldr	r2, [pc, #76]	@ (8002e90 <HAL_SPI_MspInit+0x140>)
 8002e44:	0019      	movs	r1, r3
 8002e46:	0010      	movs	r0, r2
 8002e48:	f000 fcc2 	bl	80037d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TFT_CS_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8002e4c:	0021      	movs	r1, r4
 8002e4e:	187b      	adds	r3, r7, r1
 8002e50:	22d0      	movs	r2, #208	@ 0xd0
 8002e52:	0212      	lsls	r2, r2, #8
 8002e54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e56:	187b      	adds	r3, r7, r1
 8002e58:	2202      	movs	r2, #2
 8002e5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5c:	187b      	adds	r3, r7, r1
 8002e5e:	2200      	movs	r2, #0
 8002e60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e62:	187b      	adds	r3, r7, r1
 8002e64:	2203      	movs	r2, #3
 8002e66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002e68:	187b      	adds	r3, r7, r1
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e6e:	187b      	adds	r3, r7, r1
 8002e70:	4a07      	ldr	r2, [pc, #28]	@ (8002e90 <HAL_SPI_MspInit+0x140>)
 8002e72:	0019      	movs	r1, r3
 8002e74:	0010      	movs	r0, r2
 8002e76:	f000 fcab 	bl	80037d0 <HAL_GPIO_Init>
}
 8002e7a:	46c0      	nop			@ (mov r8, r8)
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	b00d      	add	sp, #52	@ 0x34
 8002e80:	bd90      	pop	{r4, r7, pc}
 8002e82:	46c0      	nop			@ (mov r8, r8)
 8002e84:	40013000 	.word	0x40013000
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40003800 	.word	0x40003800
 8002e90:	48000400 	.word	0x48000400

08002e94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e94:	b590      	push	{r4, r7, lr}
 8002e96:	b08b      	sub	sp, #44	@ 0x2c
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e9c:	2414      	movs	r4, #20
 8002e9e:	193b      	adds	r3, r7, r4
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	2314      	movs	r3, #20
 8002ea4:	001a      	movs	r2, r3
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	f009 ffda 	bl	800ce60 <memset>
  if(huart->Instance==USART1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f28 <HAL_UART_MspInit+0x94>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d133      	bne.n	8002f1e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f2c <HAL_UART_MspInit+0x98>)
 8002eb8:	699a      	ldr	r2, [r3, #24]
 8002eba:	4b1c      	ldr	r3, [pc, #112]	@ (8002f2c <HAL_UART_MspInit+0x98>)
 8002ebc:	2180      	movs	r1, #128	@ 0x80
 8002ebe:	01c9      	lsls	r1, r1, #7
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	619a      	str	r2, [r3, #24]
 8002ec4:	4b19      	ldr	r3, [pc, #100]	@ (8002f2c <HAL_UART_MspInit+0x98>)
 8002ec6:	699a      	ldr	r2, [r3, #24]
 8002ec8:	2380      	movs	r3, #128	@ 0x80
 8002eca:	01db      	lsls	r3, r3, #7
 8002ecc:	4013      	ands	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed2:	4b16      	ldr	r3, [pc, #88]	@ (8002f2c <HAL_UART_MspInit+0x98>)
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	4b15      	ldr	r3, [pc, #84]	@ (8002f2c <HAL_UART_MspInit+0x98>)
 8002ed8:	2180      	movs	r1, #128	@ 0x80
 8002eda:	0289      	lsls	r1, r1, #10
 8002edc:	430a      	orrs	r2, r1
 8002ede:	615a      	str	r2, [r3, #20]
 8002ee0:	4b12      	ldr	r3, [pc, #72]	@ (8002f2c <HAL_UART_MspInit+0x98>)
 8002ee2:	695a      	ldr	r2, [r3, #20]
 8002ee4:	2380      	movs	r3, #128	@ 0x80
 8002ee6:	029b      	lsls	r3, r3, #10
 8002ee8:	4013      	ands	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002eee:	193b      	adds	r3, r7, r4
 8002ef0:	22c0      	movs	r2, #192	@ 0xc0
 8002ef2:	00d2      	lsls	r2, r2, #3
 8002ef4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef6:	0021      	movs	r1, r4
 8002ef8:	187b      	adds	r3, r7, r1
 8002efa:	2202      	movs	r2, #2
 8002efc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efe:	187b      	adds	r3, r7, r1
 8002f00:	2200      	movs	r2, #0
 8002f02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f04:	187b      	adds	r3, r7, r1
 8002f06:	2203      	movs	r2, #3
 8002f08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002f0a:	187b      	adds	r3, r7, r1
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f10:	187a      	adds	r2, r7, r1
 8002f12:	2390      	movs	r3, #144	@ 0x90
 8002f14:	05db      	lsls	r3, r3, #23
 8002f16:	0011      	movs	r1, r2
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f000 fc59 	bl	80037d0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	46bd      	mov	sp, r7
 8002f22:	b00b      	add	sp, #44	@ 0x2c
 8002f24:	bd90      	pop	{r4, r7, pc}
 8002f26:	46c0      	nop			@ (mov r8, r8)
 8002f28:	40013800 	.word	0x40013800
 8002f2c:	40021000 	.word	0x40021000

08002f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f34:	46c0      	nop			@ (mov r8, r8)
 8002f36:	e7fd      	b.n	8002f34 <NMI_Handler+0x4>

08002f38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f3c:	46c0      	nop			@ (mov r8, r8)
 8002f3e:	e7fd      	b.n	8002f3c <HardFault_Handler+0x4>

08002f40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002f44:	46c0      	nop			@ (mov r8, r8)
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f4e:	46c0      	nop			@ (mov r8, r8)
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f58:	f000 f89c 	bl	8003094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f5c:	46c0      	nop			@ (mov r8, r8)
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupts.
  */
void RCC_CRS_IRQHandler(void)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 8002f66:	46c0      	nop			@ (mov r8, r8)
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_RESET_Pin);
 8002f70:	2004      	movs	r0, #4
 8002f72:	f000 fddf 	bl	8003b34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002f76:	46c0      	nop			@ (mov r8, r8)
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQn_Pin);
 8002f80:	2020      	movs	r0, #32
 8002f82:	f000 fdd7 	bl	8003b34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002f90:	4b03      	ldr	r3, [pc, #12]	@ (8002fa0 <USB_IRQHandler+0x14>)
 8002f92:	0018      	movs	r0, r3
 8002f94:	f000 ff04 	bl	8003da0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002f98:	46c0      	nop			@ (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	46c0      	nop			@ (mov r8, r8)
 8002fa0:	20001094 	.word	0x20001094

08002fa4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002fa8:	46c0      	nop			@ (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002fb0:	480d      	ldr	r0, [pc, #52]	@ (8002fe8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002fb2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fb4:	f7ff fff6 	bl	8002fa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fb8:	480c      	ldr	r0, [pc, #48]	@ (8002fec <LoopForever+0x6>)
  ldr r1, =_edata
 8002fba:	490d      	ldr	r1, [pc, #52]	@ (8002ff0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8002ff4 <LoopForever+0xe>)
  movs r3, #0
 8002fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fc0:	e002      	b.n	8002fc8 <LoopCopyDataInit>

08002fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fc6:	3304      	adds	r3, #4

08002fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fcc:	d3f9      	bcc.n	8002fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fce:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fd0:	4c0a      	ldr	r4, [pc, #40]	@ (8002ffc <LoopForever+0x16>)
  movs r3, #0
 8002fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fd4:	e001      	b.n	8002fda <LoopFillZerobss>

08002fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fd8:	3204      	adds	r2, #4

08002fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fdc:	d3fb      	bcc.n	8002fd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002fde:	f009 ff47 	bl	800ce70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fe2:	f7ff fbe3 	bl	80027ac <main>

08002fe6 <LoopForever>:

LoopForever:
    b LoopForever
 8002fe6:	e7fe      	b.n	8002fe6 <LoopForever>
  ldr   r0, =_estack
 8002fe8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ff0:	200001c0 	.word	0x200001c0
  ldr r2, =_sidata
 8002ff4:	0800d178 	.word	0x0800d178
  ldr r2, =_sbss
 8002ff8:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 8002ffc:	200015cc 	.word	0x200015cc

08003000 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003000:	e7fe      	b.n	8003000 <ADC1_COMP_IRQHandler>
	...

08003004 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003008:	4b07      	ldr	r3, [pc, #28]	@ (8003028 <HAL_Init+0x24>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <HAL_Init+0x24>)
 800300e:	2110      	movs	r1, #16
 8003010:	430a      	orrs	r2, r1
 8003012:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003014:	2003      	movs	r0, #3
 8003016:	f000 f809 	bl	800302c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800301a:	f7ff fe27 	bl	8002c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	0018      	movs	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	46c0      	nop			@ (mov r8, r8)
 8003028:	40022000 	.word	0x40022000

0800302c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800302c:	b590      	push	{r4, r7, lr}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003034:	4b14      	ldr	r3, [pc, #80]	@ (8003088 <HAL_InitTick+0x5c>)
 8003036:	681c      	ldr	r4, [r3, #0]
 8003038:	4b14      	ldr	r3, [pc, #80]	@ (800308c <HAL_InitTick+0x60>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	0019      	movs	r1, r3
 800303e:	23fa      	movs	r3, #250	@ 0xfa
 8003040:	0098      	lsls	r0, r3, #2
 8003042:	f7fd f861 	bl	8000108 <__udivsi3>
 8003046:	0003      	movs	r3, r0
 8003048:	0019      	movs	r1, r3
 800304a:	0020      	movs	r0, r4
 800304c:	f7fd f85c 	bl	8000108 <__udivsi3>
 8003050:	0003      	movs	r3, r0
 8003052:	0018      	movs	r0, r3
 8003054:	f000 fbaf 	bl	80037b6 <HAL_SYSTICK_Config>
 8003058:	1e03      	subs	r3, r0, #0
 800305a:	d001      	beq.n	8003060 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e00f      	b.n	8003080 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b03      	cmp	r3, #3
 8003064:	d80b      	bhi.n	800307e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	2301      	movs	r3, #1
 800306a:	425b      	negs	r3, r3
 800306c:	2200      	movs	r2, #0
 800306e:	0018      	movs	r0, r3
 8003070:	f000 fb6c 	bl	800374c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003074:	4b06      	ldr	r3, [pc, #24]	@ (8003090 <HAL_InitTick+0x64>)
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	e000      	b.n	8003080 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b003      	add	sp, #12
 8003086:	bd90      	pop	{r4, r7, pc}
 8003088:	20000040 	.word	0x20000040
 800308c:	20000048 	.word	0x20000048
 8003090:	20000044 	.word	0x20000044

08003094 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003098:	4b05      	ldr	r3, [pc, #20]	@ (80030b0 <HAL_IncTick+0x1c>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	001a      	movs	r2, r3
 800309e:	4b05      	ldr	r3, [pc, #20]	@ (80030b4 <HAL_IncTick+0x20>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	18d2      	adds	r2, r2, r3
 80030a4:	4b03      	ldr	r3, [pc, #12]	@ (80030b4 <HAL_IncTick+0x20>)
 80030a6:	601a      	str	r2, [r3, #0]
}
 80030a8:	46c0      	nop			@ (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	46c0      	nop			@ (mov r8, r8)
 80030b0:	20000048 	.word	0x20000048
 80030b4:	200003c8 	.word	0x200003c8

080030b8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  return uwTick;
 80030bc:	4b02      	ldr	r3, [pc, #8]	@ (80030c8 <HAL_GetTick+0x10>)
 80030be:	681b      	ldr	r3, [r3, #0]
}
 80030c0:	0018      	movs	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	46c0      	nop			@ (mov r8, r8)
 80030c8:	200003c8 	.word	0x200003c8

080030cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d4:	f7ff fff0 	bl	80030b8 <HAL_GetTick>
 80030d8:	0003      	movs	r3, r0
 80030da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	3301      	adds	r3, #1
 80030e4:	d005      	beq.n	80030f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003110 <HAL_Delay+0x44>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	001a      	movs	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	189b      	adds	r3, r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80030f2:	46c0      	nop			@ (mov r8, r8)
 80030f4:	f7ff ffe0 	bl	80030b8 <HAL_GetTick>
 80030f8:	0002      	movs	r2, r0
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	429a      	cmp	r2, r3
 8003102:	d8f7      	bhi.n	80030f4 <HAL_Delay+0x28>
  {
  }
}
 8003104:	46c0      	nop			@ (mov r8, r8)
 8003106:	46c0      	nop			@ (mov r8, r8)
 8003108:	46bd      	mov	sp, r7
 800310a:	b004      	add	sp, #16
 800310c:	bd80      	pop	{r7, pc}
 800310e:	46c0      	nop			@ (mov r8, r8)
 8003110:	20000048 	.word	0x20000048

08003114 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800311c:	230f      	movs	r3, #15
 800311e:	18fb      	adds	r3, r7, r3
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e125      	b.n	800337e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10a      	bne.n	8003150 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2234      	movs	r2, #52	@ 0x34
 8003144:	2100      	movs	r1, #0
 8003146:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	0018      	movs	r0, r3
 800314c:	f7ff fdba 	bl	8002cc4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003154:	2210      	movs	r2, #16
 8003156:	4013      	ands	r3, r2
 8003158:	d000      	beq.n	800315c <HAL_ADC_Init+0x48>
 800315a:	e103      	b.n	8003364 <HAL_ADC_Init+0x250>
 800315c:	230f      	movs	r3, #15
 800315e:	18fb      	adds	r3, r7, r3
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d000      	beq.n	8003168 <HAL_ADC_Init+0x54>
 8003166:	e0fd      	b.n	8003364 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2204      	movs	r2, #4
 8003170:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003172:	d000      	beq.n	8003176 <HAL_ADC_Init+0x62>
 8003174:	e0f6      	b.n	8003364 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800317a:	4a83      	ldr	r2, [pc, #524]	@ (8003388 <HAL_ADC_Init+0x274>)
 800317c:	4013      	ands	r3, r2
 800317e:	2202      	movs	r2, #2
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2203      	movs	r2, #3
 800318e:	4013      	ands	r3, r2
 8003190:	2b01      	cmp	r3, #1
 8003192:	d112      	bne.n	80031ba <HAL_ADC_Init+0xa6>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2201      	movs	r2, #1
 800319c:	4013      	ands	r3, r2
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d009      	beq.n	80031b6 <HAL_ADC_Init+0xa2>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	2380      	movs	r3, #128	@ 0x80
 80031aa:	021b      	lsls	r3, r3, #8
 80031ac:	401a      	ands	r2, r3
 80031ae:	2380      	movs	r3, #128	@ 0x80
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d101      	bne.n	80031ba <HAL_ADC_Init+0xa6>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <HAL_ADC_Init+0xa8>
 80031ba:	2300      	movs	r3, #0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d116      	bne.n	80031ee <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	2218      	movs	r2, #24
 80031c8:	4393      	bics	r3, r2
 80031ca:	0019      	movs	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	0899      	lsrs	r1, r3, #2
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68da      	ldr	r2, [r3, #12]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4964      	ldr	r1, [pc, #400]	@ (800338c <HAL_ADC_Init+0x278>)
 80031fa:	400a      	ands	r2, r1
 80031fc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	7e1b      	ldrb	r3, [r3, #24]
 8003202:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	7e5b      	ldrb	r3, [r3, #25]
 8003208:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800320a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	7e9b      	ldrb	r3, [r3, #26]
 8003210:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003212:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003218:	2b01      	cmp	r3, #1
 800321a:	d002      	beq.n	8003222 <HAL_ADC_Init+0x10e>
 800321c:	2380      	movs	r3, #128	@ 0x80
 800321e:	015b      	lsls	r3, r3, #5
 8003220:	e000      	b.n	8003224 <HAL_ADC_Init+0x110>
 8003222:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003224:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800322a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	2b02      	cmp	r3, #2
 8003232:	d101      	bne.n	8003238 <HAL_ADC_Init+0x124>
 8003234:	2304      	movs	r3, #4
 8003236:	e000      	b.n	800323a <HAL_ADC_Init+0x126>
 8003238:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800323a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2124      	movs	r1, #36	@ 0x24
 8003240:	5c5b      	ldrb	r3, [r3, r1]
 8003242:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003244:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	4313      	orrs	r3, r2
 800324a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	7edb      	ldrb	r3, [r3, #27]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d115      	bne.n	8003280 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	7e9b      	ldrb	r3, [r3, #26]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d105      	bne.n	8003268 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2280      	movs	r2, #128	@ 0x80
 8003260:	0252      	lsls	r2, r2, #9
 8003262:	4313      	orrs	r3, r2
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	e00b      	b.n	8003280 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800326c:	2220      	movs	r2, #32
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003278:	2201      	movs	r2, #1
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	69da      	ldr	r2, [r3, #28]
 8003284:	23c2      	movs	r3, #194	@ 0xc2
 8003286:	33ff      	adds	r3, #255	@ 0xff
 8003288:	429a      	cmp	r2, r3
 800328a:	d007      	beq.n	800329c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003294:	4313      	orrs	r3, r2
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	4313      	orrs	r3, r2
 800329a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68d9      	ldr	r1, [r3, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032b0:	2380      	movs	r3, #128	@ 0x80
 80032b2:	055b      	lsls	r3, r3, #21
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d01b      	beq.n	80032f0 <HAL_ADC_Init+0x1dc>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d017      	beq.n	80032f0 <HAL_ADC_Init+0x1dc>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d013      	beq.n	80032f0 <HAL_ADC_Init+0x1dc>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d00f      	beq.n	80032f0 <HAL_ADC_Init+0x1dc>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d00b      	beq.n	80032f0 <HAL_ADC_Init+0x1dc>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032dc:	2b05      	cmp	r3, #5
 80032de:	d007      	beq.n	80032f0 <HAL_ADC_Init+0x1dc>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e4:	2b06      	cmp	r3, #6
 80032e6:	d003      	beq.n	80032f0 <HAL_ADC_Init+0x1dc>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ec:	2b07      	cmp	r3, #7
 80032ee:	d112      	bne.n	8003316 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695a      	ldr	r2, [r3, #20]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2107      	movs	r1, #7
 80032fc:	438a      	bics	r2, r1
 80032fe:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6959      	ldr	r1, [r3, #20]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330a:	2207      	movs	r2, #7
 800330c:	401a      	ands	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	4a1c      	ldr	r2, [pc, #112]	@ (8003390 <HAL_ADC_Init+0x27c>)
 800331e:	4013      	ands	r3, r2
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	429a      	cmp	r2, r3
 8003324:	d10b      	bne.n	800333e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003330:	2203      	movs	r2, #3
 8003332:	4393      	bics	r3, r2
 8003334:	2201      	movs	r2, #1
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800333c:	e01c      	b.n	8003378 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003342:	2212      	movs	r2, #18
 8003344:	4393      	bics	r3, r2
 8003346:	2210      	movs	r2, #16
 8003348:	431a      	orrs	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003352:	2201      	movs	r2, #1
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800335a:	230f      	movs	r3, #15
 800335c:	18fb      	adds	r3, r7, r3
 800335e:	2201      	movs	r2, #1
 8003360:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003362:	e009      	b.n	8003378 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003368:	2210      	movs	r2, #16
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003370:	230f      	movs	r3, #15
 8003372:	18fb      	adds	r3, r7, r3
 8003374:	2201      	movs	r2, #1
 8003376:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003378:	230f      	movs	r3, #15
 800337a:	18fb      	adds	r3, r7, r3
 800337c:	781b      	ldrb	r3, [r3, #0]
}
 800337e:	0018      	movs	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	b004      	add	sp, #16
 8003384:	bd80      	pop	{r7, pc}
 8003386:	46c0      	nop			@ (mov r8, r8)
 8003388:	fffffefd 	.word	0xfffffefd
 800338c:	fffe0219 	.word	0xfffe0219
 8003390:	833fffe7 	.word	0x833fffe7

08003394 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800339e:	230f      	movs	r3, #15
 80033a0:	18fb      	adds	r3, r7, r3
 80033a2:	2200      	movs	r2, #0
 80033a4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033ae:	2380      	movs	r3, #128	@ 0x80
 80033b0:	055b      	lsls	r3, r3, #21
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d011      	beq.n	80033da <HAL_ADC_ConfigChannel+0x46>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d00d      	beq.n	80033da <HAL_ADC_ConfigChannel+0x46>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d009      	beq.n	80033da <HAL_ADC_ConfigChannel+0x46>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d005      	beq.n	80033da <HAL_ADC_ConfigChannel+0x46>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d001      	beq.n	80033da <HAL_ADC_ConfigChannel+0x46>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2234      	movs	r2, #52	@ 0x34
 80033de:	5c9b      	ldrb	r3, [r3, r2]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x54>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e0d0      	b.n	800358a <HAL_ADC_ConfigChannel+0x1f6>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2234      	movs	r2, #52	@ 0x34
 80033ec:	2101      	movs	r1, #1
 80033ee:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2204      	movs	r2, #4
 80033f8:	4013      	ands	r3, r2
 80033fa:	d000      	beq.n	80033fe <HAL_ADC_ConfigChannel+0x6a>
 80033fc:	e0b4      	b.n	8003568 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4a64      	ldr	r2, [pc, #400]	@ (8003594 <HAL_ADC_ConfigChannel+0x200>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d100      	bne.n	800340a <HAL_ADC_ConfigChannel+0x76>
 8003408:	e082      	b.n	8003510 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2201      	movs	r2, #1
 8003416:	409a      	lsls	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003424:	2380      	movs	r3, #128	@ 0x80
 8003426:	055b      	lsls	r3, r3, #21
 8003428:	429a      	cmp	r2, r3
 800342a:	d037      	beq.n	800349c <HAL_ADC_ConfigChannel+0x108>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003430:	2b01      	cmp	r3, #1
 8003432:	d033      	beq.n	800349c <HAL_ADC_ConfigChannel+0x108>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003438:	2b02      	cmp	r3, #2
 800343a:	d02f      	beq.n	800349c <HAL_ADC_ConfigChannel+0x108>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003440:	2b03      	cmp	r3, #3
 8003442:	d02b      	beq.n	800349c <HAL_ADC_ConfigChannel+0x108>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003448:	2b04      	cmp	r3, #4
 800344a:	d027      	beq.n	800349c <HAL_ADC_ConfigChannel+0x108>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003450:	2b05      	cmp	r3, #5
 8003452:	d023      	beq.n	800349c <HAL_ADC_ConfigChannel+0x108>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003458:	2b06      	cmp	r3, #6
 800345a:	d01f      	beq.n	800349c <HAL_ADC_ConfigChannel+0x108>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003460:	2b07      	cmp	r3, #7
 8003462:	d01b      	beq.n	800349c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	2107      	movs	r1, #7
 8003470:	400b      	ands	r3, r1
 8003472:	429a      	cmp	r2, r3
 8003474:	d012      	beq.n	800349c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695a      	ldr	r2, [r3, #20]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2107      	movs	r1, #7
 8003482:	438a      	bics	r2, r1
 8003484:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6959      	ldr	r1, [r3, #20]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2207      	movs	r2, #7
 8003492:	401a      	ands	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b10      	cmp	r3, #16
 80034a2:	d007      	beq.n	80034b4 <HAL_ADC_ConfigChannel+0x120>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b11      	cmp	r3, #17
 80034aa:	d003      	beq.n	80034b4 <HAL_ADC_ConfigChannel+0x120>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b12      	cmp	r3, #18
 80034b2:	d163      	bne.n	800357c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80034b4:	4b38      	ldr	r3, [pc, #224]	@ (8003598 <HAL_ADC_ConfigChannel+0x204>)
 80034b6:	6819      	ldr	r1, [r3, #0]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b10      	cmp	r3, #16
 80034be:	d009      	beq.n	80034d4 <HAL_ADC_ConfigChannel+0x140>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b11      	cmp	r3, #17
 80034c6:	d102      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x13a>
 80034c8:	2380      	movs	r3, #128	@ 0x80
 80034ca:	03db      	lsls	r3, r3, #15
 80034cc:	e004      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x144>
 80034ce:	2380      	movs	r3, #128	@ 0x80
 80034d0:	045b      	lsls	r3, r3, #17
 80034d2:	e001      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x144>
 80034d4:	2380      	movs	r3, #128	@ 0x80
 80034d6:	041b      	lsls	r3, r3, #16
 80034d8:	4a2f      	ldr	r2, [pc, #188]	@ (8003598 <HAL_ADC_ConfigChannel+0x204>)
 80034da:	430b      	orrs	r3, r1
 80034dc:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b10      	cmp	r3, #16
 80034e4:	d14a      	bne.n	800357c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034e6:	4b2d      	ldr	r3, [pc, #180]	@ (800359c <HAL_ADC_ConfigChannel+0x208>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	492d      	ldr	r1, [pc, #180]	@ (80035a0 <HAL_ADC_ConfigChannel+0x20c>)
 80034ec:	0018      	movs	r0, r3
 80034ee:	f7fc fe0b 	bl	8000108 <__udivsi3>
 80034f2:	0003      	movs	r3, r0
 80034f4:	001a      	movs	r2, r3
 80034f6:	0013      	movs	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	189b      	adds	r3, r3, r2
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003500:	e002      	b.n	8003508 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	3b01      	subs	r3, #1
 8003506:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f9      	bne.n	8003502 <HAL_ADC_ConfigChannel+0x16e>
 800350e:	e035      	b.n	800357c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2101      	movs	r1, #1
 800351c:	4099      	lsls	r1, r3
 800351e:	000b      	movs	r3, r1
 8003520:	43d9      	mvns	r1, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	400a      	ands	r2, r1
 8003528:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b10      	cmp	r3, #16
 8003530:	d007      	beq.n	8003542 <HAL_ADC_ConfigChannel+0x1ae>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b11      	cmp	r3, #17
 8003538:	d003      	beq.n	8003542 <HAL_ADC_ConfigChannel+0x1ae>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b12      	cmp	r3, #18
 8003540:	d11c      	bne.n	800357c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003542:	4b15      	ldr	r3, [pc, #84]	@ (8003598 <HAL_ADC_ConfigChannel+0x204>)
 8003544:	6819      	ldr	r1, [r3, #0]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b10      	cmp	r3, #16
 800354c:	d007      	beq.n	800355e <HAL_ADC_ConfigChannel+0x1ca>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b11      	cmp	r3, #17
 8003554:	d101      	bne.n	800355a <HAL_ADC_ConfigChannel+0x1c6>
 8003556:	4b13      	ldr	r3, [pc, #76]	@ (80035a4 <HAL_ADC_ConfigChannel+0x210>)
 8003558:	e002      	b.n	8003560 <HAL_ADC_ConfigChannel+0x1cc>
 800355a:	4b13      	ldr	r3, [pc, #76]	@ (80035a8 <HAL_ADC_ConfigChannel+0x214>)
 800355c:	e000      	b.n	8003560 <HAL_ADC_ConfigChannel+0x1cc>
 800355e:	4b13      	ldr	r3, [pc, #76]	@ (80035ac <HAL_ADC_ConfigChannel+0x218>)
 8003560:	4a0d      	ldr	r2, [pc, #52]	@ (8003598 <HAL_ADC_ConfigChannel+0x204>)
 8003562:	400b      	ands	r3, r1
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	e009      	b.n	800357c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800356c:	2220      	movs	r2, #32
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003574:	230f      	movs	r3, #15
 8003576:	18fb      	adds	r3, r7, r3
 8003578:	2201      	movs	r2, #1
 800357a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2234      	movs	r2, #52	@ 0x34
 8003580:	2100      	movs	r1, #0
 8003582:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003584:	230f      	movs	r3, #15
 8003586:	18fb      	adds	r3, r7, r3
 8003588:	781b      	ldrb	r3, [r3, #0]
}
 800358a:	0018      	movs	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	b004      	add	sp, #16
 8003590:	bd80      	pop	{r7, pc}
 8003592:	46c0      	nop			@ (mov r8, r8)
 8003594:	00001001 	.word	0x00001001
 8003598:	40012708 	.word	0x40012708
 800359c:	20000040 	.word	0x20000040
 80035a0:	000f4240 	.word	0x000f4240
 80035a4:	ffbfffff 	.word	0xffbfffff
 80035a8:	feffffff 	.word	0xfeffffff
 80035ac:	ff7fffff 	.word	0xff7fffff

080035b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	0002      	movs	r2, r0
 80035b8:	1dfb      	adds	r3, r7, #7
 80035ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035bc:	1dfb      	adds	r3, r7, #7
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80035c2:	d809      	bhi.n	80035d8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035c4:	1dfb      	adds	r3, r7, #7
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	001a      	movs	r2, r3
 80035ca:	231f      	movs	r3, #31
 80035cc:	401a      	ands	r2, r3
 80035ce:	4b04      	ldr	r3, [pc, #16]	@ (80035e0 <__NVIC_EnableIRQ+0x30>)
 80035d0:	2101      	movs	r1, #1
 80035d2:	4091      	lsls	r1, r2
 80035d4:	000a      	movs	r2, r1
 80035d6:	601a      	str	r2, [r3, #0]
  }
}
 80035d8:	46c0      	nop			@ (mov r8, r8)
 80035da:	46bd      	mov	sp, r7
 80035dc:	b002      	add	sp, #8
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	e000e100 	.word	0xe000e100

080035e4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	0002      	movs	r2, r0
 80035ec:	1dfb      	adds	r3, r7, #7
 80035ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035f0:	1dfb      	adds	r3, r7, #7
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80035f6:	d810      	bhi.n	800361a <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035f8:	1dfb      	adds	r3, r7, #7
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	001a      	movs	r2, r3
 80035fe:	231f      	movs	r3, #31
 8003600:	4013      	ands	r3, r2
 8003602:	4908      	ldr	r1, [pc, #32]	@ (8003624 <__NVIC_DisableIRQ+0x40>)
 8003604:	2201      	movs	r2, #1
 8003606:	409a      	lsls	r2, r3
 8003608:	0013      	movs	r3, r2
 800360a:	2280      	movs	r2, #128	@ 0x80
 800360c:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800360e:	f3bf 8f4f 	dsb	sy
}
 8003612:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8003614:	f3bf 8f6f 	isb	sy
}
 8003618:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800361a:	46c0      	nop			@ (mov r8, r8)
 800361c:	46bd      	mov	sp, r7
 800361e:	b002      	add	sp, #8
 8003620:	bd80      	pop	{r7, pc}
 8003622:	46c0      	nop			@ (mov r8, r8)
 8003624:	e000e100 	.word	0xe000e100

08003628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003628:	b590      	push	{r4, r7, lr}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	0002      	movs	r2, r0
 8003630:	6039      	str	r1, [r7, #0]
 8003632:	1dfb      	adds	r3, r7, #7
 8003634:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003636:	1dfb      	adds	r3, r7, #7
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b7f      	cmp	r3, #127	@ 0x7f
 800363c:	d828      	bhi.n	8003690 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800363e:	4a2f      	ldr	r2, [pc, #188]	@ (80036fc <__NVIC_SetPriority+0xd4>)
 8003640:	1dfb      	adds	r3, r7, #7
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	b25b      	sxtb	r3, r3
 8003646:	089b      	lsrs	r3, r3, #2
 8003648:	33c0      	adds	r3, #192	@ 0xc0
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	589b      	ldr	r3, [r3, r2]
 800364e:	1dfa      	adds	r2, r7, #7
 8003650:	7812      	ldrb	r2, [r2, #0]
 8003652:	0011      	movs	r1, r2
 8003654:	2203      	movs	r2, #3
 8003656:	400a      	ands	r2, r1
 8003658:	00d2      	lsls	r2, r2, #3
 800365a:	21ff      	movs	r1, #255	@ 0xff
 800365c:	4091      	lsls	r1, r2
 800365e:	000a      	movs	r2, r1
 8003660:	43d2      	mvns	r2, r2
 8003662:	401a      	ands	r2, r3
 8003664:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	019b      	lsls	r3, r3, #6
 800366a:	22ff      	movs	r2, #255	@ 0xff
 800366c:	401a      	ands	r2, r3
 800366e:	1dfb      	adds	r3, r7, #7
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	0018      	movs	r0, r3
 8003674:	2303      	movs	r3, #3
 8003676:	4003      	ands	r3, r0
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800367c:	481f      	ldr	r0, [pc, #124]	@ (80036fc <__NVIC_SetPriority+0xd4>)
 800367e:	1dfb      	adds	r3, r7, #7
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	b25b      	sxtb	r3, r3
 8003684:	089b      	lsrs	r3, r3, #2
 8003686:	430a      	orrs	r2, r1
 8003688:	33c0      	adds	r3, #192	@ 0xc0
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800368e:	e031      	b.n	80036f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003690:	4a1b      	ldr	r2, [pc, #108]	@ (8003700 <__NVIC_SetPriority+0xd8>)
 8003692:	1dfb      	adds	r3, r7, #7
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	0019      	movs	r1, r3
 8003698:	230f      	movs	r3, #15
 800369a:	400b      	ands	r3, r1
 800369c:	3b08      	subs	r3, #8
 800369e:	089b      	lsrs	r3, r3, #2
 80036a0:	3306      	adds	r3, #6
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	18d3      	adds	r3, r2, r3
 80036a6:	3304      	adds	r3, #4
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	1dfa      	adds	r2, r7, #7
 80036ac:	7812      	ldrb	r2, [r2, #0]
 80036ae:	0011      	movs	r1, r2
 80036b0:	2203      	movs	r2, #3
 80036b2:	400a      	ands	r2, r1
 80036b4:	00d2      	lsls	r2, r2, #3
 80036b6:	21ff      	movs	r1, #255	@ 0xff
 80036b8:	4091      	lsls	r1, r2
 80036ba:	000a      	movs	r2, r1
 80036bc:	43d2      	mvns	r2, r2
 80036be:	401a      	ands	r2, r3
 80036c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	019b      	lsls	r3, r3, #6
 80036c6:	22ff      	movs	r2, #255	@ 0xff
 80036c8:	401a      	ands	r2, r3
 80036ca:	1dfb      	adds	r3, r7, #7
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	0018      	movs	r0, r3
 80036d0:	2303      	movs	r3, #3
 80036d2:	4003      	ands	r3, r0
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036d8:	4809      	ldr	r0, [pc, #36]	@ (8003700 <__NVIC_SetPriority+0xd8>)
 80036da:	1dfb      	adds	r3, r7, #7
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	001c      	movs	r4, r3
 80036e0:	230f      	movs	r3, #15
 80036e2:	4023      	ands	r3, r4
 80036e4:	3b08      	subs	r3, #8
 80036e6:	089b      	lsrs	r3, r3, #2
 80036e8:	430a      	orrs	r2, r1
 80036ea:	3306      	adds	r3, #6
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	18c3      	adds	r3, r0, r3
 80036f0:	3304      	adds	r3, #4
 80036f2:	601a      	str	r2, [r3, #0]
}
 80036f4:	46c0      	nop			@ (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b003      	add	sp, #12
 80036fa:	bd90      	pop	{r4, r7, pc}
 80036fc:	e000e100 	.word	0xe000e100
 8003700:	e000ed00 	.word	0xe000ed00

08003704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	1e5a      	subs	r2, r3, #1
 8003710:	2380      	movs	r3, #128	@ 0x80
 8003712:	045b      	lsls	r3, r3, #17
 8003714:	429a      	cmp	r2, r3
 8003716:	d301      	bcc.n	800371c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003718:	2301      	movs	r3, #1
 800371a:	e010      	b.n	800373e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800371c:	4b0a      	ldr	r3, [pc, #40]	@ (8003748 <SysTick_Config+0x44>)
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	3a01      	subs	r2, #1
 8003722:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003724:	2301      	movs	r3, #1
 8003726:	425b      	negs	r3, r3
 8003728:	2103      	movs	r1, #3
 800372a:	0018      	movs	r0, r3
 800372c:	f7ff ff7c 	bl	8003628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003730:	4b05      	ldr	r3, [pc, #20]	@ (8003748 <SysTick_Config+0x44>)
 8003732:	2200      	movs	r2, #0
 8003734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003736:	4b04      	ldr	r3, [pc, #16]	@ (8003748 <SysTick_Config+0x44>)
 8003738:	2207      	movs	r2, #7
 800373a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800373c:	2300      	movs	r3, #0
}
 800373e:	0018      	movs	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	b002      	add	sp, #8
 8003744:	bd80      	pop	{r7, pc}
 8003746:	46c0      	nop			@ (mov r8, r8)
 8003748:	e000e010 	.word	0xe000e010

0800374c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
 8003756:	210f      	movs	r1, #15
 8003758:	187b      	adds	r3, r7, r1
 800375a:	1c02      	adds	r2, r0, #0
 800375c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	187b      	adds	r3, r7, r1
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	b25b      	sxtb	r3, r3
 8003766:	0011      	movs	r1, r2
 8003768:	0018      	movs	r0, r3
 800376a:	f7ff ff5d 	bl	8003628 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800376e:	46c0      	nop			@ (mov r8, r8)
 8003770:	46bd      	mov	sp, r7
 8003772:	b004      	add	sp, #16
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	0002      	movs	r2, r0
 800377e:	1dfb      	adds	r3, r7, #7
 8003780:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003782:	1dfb      	adds	r3, r7, #7
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	b25b      	sxtb	r3, r3
 8003788:	0018      	movs	r0, r3
 800378a:	f7ff ff11 	bl	80035b0 <__NVIC_EnableIRQ>
}
 800378e:	46c0      	nop			@ (mov r8, r8)
 8003790:	46bd      	mov	sp, r7
 8003792:	b002      	add	sp, #8
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b082      	sub	sp, #8
 800379a:	af00      	add	r7, sp, #0
 800379c:	0002      	movs	r2, r0
 800379e:	1dfb      	adds	r3, r7, #7
 80037a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80037a2:	1dfb      	adds	r3, r7, #7
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	b25b      	sxtb	r3, r3
 80037a8:	0018      	movs	r0, r3
 80037aa:	f7ff ff1b 	bl	80035e4 <__NVIC_DisableIRQ>
}
 80037ae:	46c0      	nop			@ (mov r8, r8)
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b002      	add	sp, #8
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b082      	sub	sp, #8
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	0018      	movs	r0, r3
 80037c2:	f7ff ff9f 	bl	8003704 <SysTick_Config>
 80037c6:	0003      	movs	r3, r0
}
 80037c8:	0018      	movs	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	b002      	add	sp, #8
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037de:	e155      	b.n	8003a8c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2101      	movs	r1, #1
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	4091      	lsls	r1, r2
 80037ea:	000a      	movs	r2, r1
 80037ec:	4013      	ands	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d100      	bne.n	80037f8 <HAL_GPIO_Init+0x28>
 80037f6:	e146      	b.n	8003a86 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2203      	movs	r2, #3
 80037fe:	4013      	ands	r3, r2
 8003800:	2b01      	cmp	r3, #1
 8003802:	d005      	beq.n	8003810 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2203      	movs	r2, #3
 800380a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800380c:	2b02      	cmp	r3, #2
 800380e:	d130      	bne.n	8003872 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	2203      	movs	r2, #3
 800381c:	409a      	lsls	r2, r3
 800381e:	0013      	movs	r3, r2
 8003820:	43da      	mvns	r2, r3
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4013      	ands	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	409a      	lsls	r2, r3
 8003832:	0013      	movs	r3, r2
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003846:	2201      	movs	r2, #1
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	409a      	lsls	r2, r3
 800384c:	0013      	movs	r3, r2
 800384e:	43da      	mvns	r2, r3
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4013      	ands	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	091b      	lsrs	r3, r3, #4
 800385c:	2201      	movs	r2, #1
 800385e:	401a      	ands	r2, r3
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	409a      	lsls	r2, r3
 8003864:	0013      	movs	r3, r2
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2203      	movs	r2, #3
 8003878:	4013      	ands	r3, r2
 800387a:	2b03      	cmp	r3, #3
 800387c:	d017      	beq.n	80038ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	2203      	movs	r2, #3
 800388a:	409a      	lsls	r2, r3
 800388c:	0013      	movs	r3, r2
 800388e:	43da      	mvns	r2, r3
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4013      	ands	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	409a      	lsls	r2, r3
 80038a0:	0013      	movs	r3, r2
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2203      	movs	r2, #3
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d123      	bne.n	8003902 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	08da      	lsrs	r2, r3, #3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3208      	adds	r2, #8
 80038c2:	0092      	lsls	r2, r2, #2
 80038c4:	58d3      	ldr	r3, [r2, r3]
 80038c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2207      	movs	r2, #7
 80038cc:	4013      	ands	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	220f      	movs	r2, #15
 80038d2:	409a      	lsls	r2, r3
 80038d4:	0013      	movs	r3, r2
 80038d6:	43da      	mvns	r2, r3
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	4013      	ands	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2107      	movs	r1, #7
 80038e6:	400b      	ands	r3, r1
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	409a      	lsls	r2, r3
 80038ec:	0013      	movs	r3, r2
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	08da      	lsrs	r2, r3, #3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3208      	adds	r2, #8
 80038fc:	0092      	lsls	r2, r2, #2
 80038fe:	6939      	ldr	r1, [r7, #16]
 8003900:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	2203      	movs	r2, #3
 800390e:	409a      	lsls	r2, r3
 8003910:	0013      	movs	r3, r2
 8003912:	43da      	mvns	r2, r3
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4013      	ands	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2203      	movs	r2, #3
 8003920:	401a      	ands	r2, r3
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	409a      	lsls	r2, r3
 8003928:	0013      	movs	r3, r2
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	23c0      	movs	r3, #192	@ 0xc0
 800393c:	029b      	lsls	r3, r3, #10
 800393e:	4013      	ands	r3, r2
 8003940:	d100      	bne.n	8003944 <HAL_GPIO_Init+0x174>
 8003942:	e0a0      	b.n	8003a86 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003944:	4b57      	ldr	r3, [pc, #348]	@ (8003aa4 <HAL_GPIO_Init+0x2d4>)
 8003946:	699a      	ldr	r2, [r3, #24]
 8003948:	4b56      	ldr	r3, [pc, #344]	@ (8003aa4 <HAL_GPIO_Init+0x2d4>)
 800394a:	2101      	movs	r1, #1
 800394c:	430a      	orrs	r2, r1
 800394e:	619a      	str	r2, [r3, #24]
 8003950:	4b54      	ldr	r3, [pc, #336]	@ (8003aa4 <HAL_GPIO_Init+0x2d4>)
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	2201      	movs	r2, #1
 8003956:	4013      	ands	r3, r2
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800395c:	4a52      	ldr	r2, [pc, #328]	@ (8003aa8 <HAL_GPIO_Init+0x2d8>)
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	089b      	lsrs	r3, r3, #2
 8003962:	3302      	adds	r3, #2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	589b      	ldr	r3, [r3, r2]
 8003968:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2203      	movs	r2, #3
 800396e:	4013      	ands	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	220f      	movs	r2, #15
 8003974:	409a      	lsls	r2, r3
 8003976:	0013      	movs	r3, r2
 8003978:	43da      	mvns	r2, r3
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	4013      	ands	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	2390      	movs	r3, #144	@ 0x90
 8003984:	05db      	lsls	r3, r3, #23
 8003986:	429a      	cmp	r2, r3
 8003988:	d019      	beq.n	80039be <HAL_GPIO_Init+0x1ee>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a47      	ldr	r2, [pc, #284]	@ (8003aac <HAL_GPIO_Init+0x2dc>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d013      	beq.n	80039ba <HAL_GPIO_Init+0x1ea>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a46      	ldr	r2, [pc, #280]	@ (8003ab0 <HAL_GPIO_Init+0x2e0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d00d      	beq.n	80039b6 <HAL_GPIO_Init+0x1e6>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a45      	ldr	r2, [pc, #276]	@ (8003ab4 <HAL_GPIO_Init+0x2e4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d007      	beq.n	80039b2 <HAL_GPIO_Init+0x1e2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a44      	ldr	r2, [pc, #272]	@ (8003ab8 <HAL_GPIO_Init+0x2e8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d101      	bne.n	80039ae <HAL_GPIO_Init+0x1de>
 80039aa:	2304      	movs	r3, #4
 80039ac:	e008      	b.n	80039c0 <HAL_GPIO_Init+0x1f0>
 80039ae:	2305      	movs	r3, #5
 80039b0:	e006      	b.n	80039c0 <HAL_GPIO_Init+0x1f0>
 80039b2:	2303      	movs	r3, #3
 80039b4:	e004      	b.n	80039c0 <HAL_GPIO_Init+0x1f0>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e002      	b.n	80039c0 <HAL_GPIO_Init+0x1f0>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <HAL_GPIO_Init+0x1f0>
 80039be:	2300      	movs	r3, #0
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	2103      	movs	r1, #3
 80039c4:	400a      	ands	r2, r1
 80039c6:	0092      	lsls	r2, r2, #2
 80039c8:	4093      	lsls	r3, r2
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039d0:	4935      	ldr	r1, [pc, #212]	@ (8003aa8 <HAL_GPIO_Init+0x2d8>)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	089b      	lsrs	r3, r3, #2
 80039d6:	3302      	adds	r3, #2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039de:	4b37      	ldr	r3, [pc, #220]	@ (8003abc <HAL_GPIO_Init+0x2ec>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	43da      	mvns	r2, r3
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	4013      	ands	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	2380      	movs	r3, #128	@ 0x80
 80039f4:	035b      	lsls	r3, r3, #13
 80039f6:	4013      	ands	r3, r2
 80039f8:	d003      	beq.n	8003a02 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a02:	4b2e      	ldr	r3, [pc, #184]	@ (8003abc <HAL_GPIO_Init+0x2ec>)
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003a08:	4b2c      	ldr	r3, [pc, #176]	@ (8003abc <HAL_GPIO_Init+0x2ec>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	43da      	mvns	r2, r3
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	4013      	ands	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	2380      	movs	r3, #128	@ 0x80
 8003a1e:	039b      	lsls	r3, r3, #14
 8003a20:	4013      	ands	r3, r2
 8003a22:	d003      	beq.n	8003a2c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a2c:	4b23      	ldr	r3, [pc, #140]	@ (8003abc <HAL_GPIO_Init+0x2ec>)
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003a32:	4b22      	ldr	r3, [pc, #136]	@ (8003abc <HAL_GPIO_Init+0x2ec>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	43da      	mvns	r2, r3
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	2380      	movs	r3, #128	@ 0x80
 8003a48:	029b      	lsls	r3, r3, #10
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d003      	beq.n	8003a56 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a56:	4b19      	ldr	r3, [pc, #100]	@ (8003abc <HAL_GPIO_Init+0x2ec>)
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003a5c:	4b17      	ldr	r3, [pc, #92]	@ (8003abc <HAL_GPIO_Init+0x2ec>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	43da      	mvns	r2, r3
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	2380      	movs	r3, #128	@ 0x80
 8003a72:	025b      	lsls	r3, r3, #9
 8003a74:	4013      	ands	r3, r2
 8003a76:	d003      	beq.n	8003a80 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a80:	4b0e      	ldr	r3, [pc, #56]	@ (8003abc <HAL_GPIO_Init+0x2ec>)
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	40da      	lsrs	r2, r3
 8003a94:	1e13      	subs	r3, r2, #0
 8003a96:	d000      	beq.n	8003a9a <HAL_GPIO_Init+0x2ca>
 8003a98:	e6a2      	b.n	80037e0 <HAL_GPIO_Init+0x10>
  } 
}
 8003a9a:	46c0      	nop			@ (mov r8, r8)
 8003a9c:	46c0      	nop			@ (mov r8, r8)
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b006      	add	sp, #24
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40010000 	.word	0x40010000
 8003aac:	48000400 	.word	0x48000400
 8003ab0:	48000800 	.word	0x48000800
 8003ab4:	48000c00 	.word	0x48000c00
 8003ab8:	48001000 	.word	0x48001000
 8003abc:	40010400 	.word	0x40010400

08003ac0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	000a      	movs	r2, r1
 8003aca:	1cbb      	adds	r3, r7, #2
 8003acc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	1cba      	adds	r2, r7, #2
 8003ad4:	8812      	ldrh	r2, [r2, #0]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d004      	beq.n	8003ae4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003ada:	230f      	movs	r3, #15
 8003adc:	18fb      	adds	r3, r7, r3
 8003ade:	2201      	movs	r2, #1
 8003ae0:	701a      	strb	r2, [r3, #0]
 8003ae2:	e003      	b.n	8003aec <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ae4:	230f      	movs	r3, #15
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	2200      	movs	r2, #0
 8003aea:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003aec:	230f      	movs	r3, #15
 8003aee:	18fb      	adds	r3, r7, r3
 8003af0:	781b      	ldrb	r3, [r3, #0]
  }
 8003af2:	0018      	movs	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	b004      	add	sp, #16
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	0008      	movs	r0, r1
 8003b04:	0011      	movs	r1, r2
 8003b06:	1cbb      	adds	r3, r7, #2
 8003b08:	1c02      	adds	r2, r0, #0
 8003b0a:	801a      	strh	r2, [r3, #0]
 8003b0c:	1c7b      	adds	r3, r7, #1
 8003b0e:	1c0a      	adds	r2, r1, #0
 8003b10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b12:	1c7b      	adds	r3, r7, #1
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d004      	beq.n	8003b24 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b1a:	1cbb      	adds	r3, r7, #2
 8003b1c:	881a      	ldrh	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b22:	e003      	b.n	8003b2c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b24:	1cbb      	adds	r3, r7, #2
 8003b26:	881a      	ldrh	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b2c:	46c0      	nop			@ (mov r8, r8)
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b002      	add	sp, #8
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	0002      	movs	r2, r0
 8003b3c:	1dbb      	adds	r3, r7, #6
 8003b3e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b40:	4b09      	ldr	r3, [pc, #36]	@ (8003b68 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	1dba      	adds	r2, r7, #6
 8003b46:	8812      	ldrh	r2, [r2, #0]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	d008      	beq.n	8003b5e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b4c:	4b06      	ldr	r3, [pc, #24]	@ (8003b68 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003b4e:	1dba      	adds	r2, r7, #6
 8003b50:	8812      	ldrh	r2, [r2, #0]
 8003b52:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b54:	1dbb      	adds	r3, r7, #6
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f009 f92b 	bl	800cdb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b5e:	46c0      	nop			@ (mov r8, r8)
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b002      	add	sp, #8
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	40010400 	.word	0x40010400

08003b6c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b6c:	b590      	push	{r4, r7, lr}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e0e4      	b.n	8003d48 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a73      	ldr	r2, [pc, #460]	@ (8003d50 <HAL_PCD_Init+0x1e4>)
 8003b82:	5c9b      	ldrb	r3, [r3, r2]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d108      	bne.n	8003b9c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	23a4      	movs	r3, #164	@ 0xa4
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	2100      	movs	r1, #0
 8003b92:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	0018      	movs	r0, r3
 8003b98:	f007 fba6 	bl	800b2e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a6c      	ldr	r2, [pc, #432]	@ (8003d50 <HAL_PCD_Init+0x1e4>)
 8003ba0:	2103      	movs	r1, #3
 8003ba2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f003 fbcd 	bl	8007348 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bae:	230f      	movs	r3, #15
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	701a      	strb	r2, [r3, #0]
 8003bb6:	e047      	b.n	8003c48 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003bb8:	200f      	movs	r0, #15
 8003bba:	183b      	adds	r3, r7, r0
 8003bbc:	781a      	ldrb	r2, [r3, #0]
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	0013      	movs	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	189b      	adds	r3, r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	18cb      	adds	r3, r1, r3
 8003bca:	3311      	adds	r3, #17
 8003bcc:	2201      	movs	r2, #1
 8003bce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003bd0:	183b      	adds	r3, r7, r0
 8003bd2:	781a      	ldrb	r2, [r3, #0]
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	0013      	movs	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	189b      	adds	r3, r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	18cb      	adds	r3, r1, r3
 8003be0:	3310      	adds	r3, #16
 8003be2:	183a      	adds	r2, r7, r0
 8003be4:	7812      	ldrb	r2, [r2, #0]
 8003be6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003be8:	183b      	adds	r3, r7, r0
 8003bea:	781a      	ldrb	r2, [r3, #0]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	0013      	movs	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	189b      	adds	r3, r3, r2
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	18cb      	adds	r3, r1, r3
 8003bf8:	3313      	adds	r3, #19
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003bfe:	183b      	adds	r3, r7, r0
 8003c00:	781a      	ldrb	r2, [r3, #0]
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	0013      	movs	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	189b      	adds	r3, r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	18cb      	adds	r3, r1, r3
 8003c0e:	3320      	adds	r3, #32
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c14:	183b      	adds	r3, r7, r0
 8003c16:	781a      	ldrb	r2, [r3, #0]
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	0013      	movs	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	189b      	adds	r3, r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	18cb      	adds	r3, r1, r3
 8003c24:	3324      	adds	r3, #36	@ 0x24
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c2a:	183b      	adds	r3, r7, r0
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	0013      	movs	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	189b      	adds	r3, r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c3e:	183b      	adds	r3, r7, r0
 8003c40:	781a      	ldrb	r2, [r3, #0]
 8003c42:	183b      	adds	r3, r7, r0
 8003c44:	3201      	adds	r2, #1
 8003c46:	701a      	strb	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	791b      	ldrb	r3, [r3, #4]
 8003c4c:	210f      	movs	r1, #15
 8003c4e:	187a      	adds	r2, r7, r1
 8003c50:	7812      	ldrb	r2, [r2, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d3b0      	bcc.n	8003bb8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c56:	187b      	adds	r3, r7, r1
 8003c58:	2200      	movs	r2, #0
 8003c5a:	701a      	strb	r2, [r3, #0]
 8003c5c:	e056      	b.n	8003d0c <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c5e:	240f      	movs	r4, #15
 8003c60:	193b      	adds	r3, r7, r4
 8003c62:	781a      	ldrb	r2, [r3, #0]
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	2352      	movs	r3, #82	@ 0x52
 8003c68:	33ff      	adds	r3, #255	@ 0xff
 8003c6a:	0019      	movs	r1, r3
 8003c6c:	0013      	movs	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	189b      	adds	r3, r3, r2
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	18c3      	adds	r3, r0, r3
 8003c76:	185b      	adds	r3, r3, r1
 8003c78:	2200      	movs	r2, #0
 8003c7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c7c:	193b      	adds	r3, r7, r4
 8003c7e:	781a      	ldrb	r2, [r3, #0]
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	23a8      	movs	r3, #168	@ 0xa8
 8003c84:	0059      	lsls	r1, r3, #1
 8003c86:	0013      	movs	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	189b      	adds	r3, r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	18c3      	adds	r3, r0, r3
 8003c90:	185b      	adds	r3, r3, r1
 8003c92:	193a      	adds	r2, r7, r4
 8003c94:	7812      	ldrb	r2, [r2, #0]
 8003c96:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c98:	193b      	adds	r3, r7, r4
 8003c9a:	781a      	ldrb	r2, [r3, #0]
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	2354      	movs	r3, #84	@ 0x54
 8003ca0:	33ff      	adds	r3, #255	@ 0xff
 8003ca2:	0019      	movs	r1, r3
 8003ca4:	0013      	movs	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	189b      	adds	r3, r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	18c3      	adds	r3, r0, r3
 8003cae:	185b      	adds	r3, r3, r1
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003cb4:	193b      	adds	r3, r7, r4
 8003cb6:	781a      	ldrb	r2, [r3, #0]
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	23b0      	movs	r3, #176	@ 0xb0
 8003cbc:	0059      	lsls	r1, r3, #1
 8003cbe:	0013      	movs	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	189b      	adds	r3, r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	18c3      	adds	r3, r0, r3
 8003cc8:	185b      	adds	r3, r3, r1
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003cce:	193b      	adds	r3, r7, r4
 8003cd0:	781a      	ldrb	r2, [r3, #0]
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	23b2      	movs	r3, #178	@ 0xb2
 8003cd6:	0059      	lsls	r1, r3, #1
 8003cd8:	0013      	movs	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	189b      	adds	r3, r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	18c3      	adds	r3, r0, r3
 8003ce2:	185b      	adds	r3, r3, r1
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ce8:	193b      	adds	r3, r7, r4
 8003cea:	781a      	ldrb	r2, [r3, #0]
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	23b4      	movs	r3, #180	@ 0xb4
 8003cf0:	0059      	lsls	r1, r3, #1
 8003cf2:	0013      	movs	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	189b      	adds	r3, r3, r2
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	18c3      	adds	r3, r0, r3
 8003cfc:	185b      	adds	r3, r3, r1
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d02:	193b      	adds	r3, r7, r4
 8003d04:	781a      	ldrb	r2, [r3, #0]
 8003d06:	193b      	adds	r3, r7, r4
 8003d08:	3201      	adds	r2, #1
 8003d0a:	701a      	strb	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	791b      	ldrb	r3, [r3, #4]
 8003d10:	220f      	movs	r2, #15
 8003d12:	18ba      	adds	r2, r7, r2
 8003d14:	7812      	ldrb	r2, [r2, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d3a1      	bcc.n	8003c5e <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6818      	ldr	r0, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6859      	ldr	r1, [r3, #4]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	f003 fb2a 	bl	800737c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a07      	ldr	r2, [pc, #28]	@ (8003d50 <HAL_PCD_Init+0x1e4>)
 8003d32:	2101      	movs	r1, #1
 8003d34:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	7a9b      	ldrb	r3, [r3, #10]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d103      	bne.n	8003d46 <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	0018      	movs	r0, r3
 8003d42:	f001 fd1f 	bl	8005784 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	0018      	movs	r0, r3
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	b005      	add	sp, #20
 8003d4e:	bd90      	pop	{r4, r7, pc}
 8003d50:	00000291 	.word	0x00000291

08003d54 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	23a4      	movs	r3, #164	@ 0xa4
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	5cd3      	ldrb	r3, [r2, r3]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_PCD_Start+0x18>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e014      	b.n	8003d96 <HAL_PCD_Start+0x42>
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	23a4      	movs	r3, #164	@ 0xa4
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	2101      	movs	r1, #1
 8003d74:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f003 face 	bl	800731c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	0018      	movs	r0, r3
 8003d86:	f005 fac3 	bl	8009310 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	23a4      	movs	r3, #164	@ 0xa4
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	2100      	movs	r1, #0
 8003d92:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	0018      	movs	r0, r3
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b002      	add	sp, #8
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	0018      	movs	r0, r3
 8003dae:	f005 fac5 	bl	800933c <USB_ReadInterrupts>
 8003db2:	0003      	movs	r3, r0
 8003db4:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	2380      	movs	r3, #128	@ 0x80
 8003dba:	021b      	lsls	r3, r3, #8
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	d004      	beq.n	8003dca <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f000 fb60 	bl	8004488 <PCD_EP_ISR_Handler>

    return;
 8003dc8:	e11d      	b.n	8004006 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	2380      	movs	r3, #128	@ 0x80
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d015      	beq.n	8003e00 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2244      	movs	r2, #68	@ 0x44
 8003dda:	5a9b      	ldrh	r3, [r3, r2]
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	498a      	ldr	r1, [pc, #552]	@ (800400c <HAL_PCD_IRQHandler+0x26c>)
 8003de4:	400a      	ands	r2, r1
 8003de6:	b291      	uxth	r1, r2
 8003de8:	2244      	movs	r2, #68	@ 0x44
 8003dea:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	0018      	movs	r0, r3
 8003df0:	f007 fb05 	bl	800b3fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2100      	movs	r1, #0
 8003df8:	0018      	movs	r0, r3
 8003dfa:	f000 f915 	bl	8004028 <HAL_PCD_SetAddress>

    return;
 8003dfe:	e102      	b.n	8004006 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	2380      	movs	r3, #128	@ 0x80
 8003e04:	01db      	lsls	r3, r3, #7
 8003e06:	4013      	ands	r3, r2
 8003e08:	d00c      	beq.n	8003e24 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2244      	movs	r2, #68	@ 0x44
 8003e10:	5a9b      	ldrh	r3, [r3, r2]
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	497d      	ldr	r1, [pc, #500]	@ (8004010 <HAL_PCD_IRQHandler+0x270>)
 8003e1a:	400a      	ands	r2, r1
 8003e1c:	b291      	uxth	r1, r2
 8003e1e:	2244      	movs	r2, #68	@ 0x44
 8003e20:	5299      	strh	r1, [r3, r2]

    return;
 8003e22:	e0f0      	b.n	8004006 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	2380      	movs	r3, #128	@ 0x80
 8003e28:	019b      	lsls	r3, r3, #6
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d00c      	beq.n	8003e48 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2244      	movs	r2, #68	@ 0x44
 8003e34:	5a9b      	ldrh	r3, [r3, r2]
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4975      	ldr	r1, [pc, #468]	@ (8004014 <HAL_PCD_IRQHandler+0x274>)
 8003e3e:	400a      	ands	r2, r1
 8003e40:	b291      	uxth	r1, r2
 8003e42:	2244      	movs	r2, #68	@ 0x44
 8003e44:	5299      	strh	r1, [r3, r2]

    return;
 8003e46:	e0de      	b.n	8004006 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	2380      	movs	r3, #128	@ 0x80
 8003e4c:	015b      	lsls	r3, r3, #5
 8003e4e:	4013      	ands	r3, r2
 8003e50:	d038      	beq.n	8003ec4 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2240      	movs	r2, #64	@ 0x40
 8003e58:	5a9b      	ldrh	r3, [r3, r2]
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2104      	movs	r1, #4
 8003e62:	438a      	bics	r2, r1
 8003e64:	b291      	uxth	r1, r2
 8003e66:	2240      	movs	r2, #64	@ 0x40
 8003e68:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2240      	movs	r2, #64	@ 0x40
 8003e70:	5a9b      	ldrh	r3, [r3, r2]
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2108      	movs	r1, #8
 8003e7a:	438a      	bics	r2, r1
 8003e7c:	b291      	uxth	r1, r2
 8003e7e:	2240      	movs	r2, #64	@ 0x40
 8003e80:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	23b2      	movs	r3, #178	@ 0xb2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	5cd3      	ldrb	r3, [r2, r3]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d109      	bne.n	8003ea2 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	23b2      	movs	r3, #178	@ 0xb2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	2100      	movs	r1, #0
 8003e96:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	f001 fc9b 	bl	80057d8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f007 faeb 	bl	800b480 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2244      	movs	r2, #68	@ 0x44
 8003eb0:	5a9b      	ldrh	r3, [r3, r2]
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4957      	ldr	r1, [pc, #348]	@ (8004018 <HAL_PCD_IRQHandler+0x278>)
 8003eba:	400a      	ands	r2, r1
 8003ebc:	b291      	uxth	r1, r2
 8003ebe:	2244      	movs	r2, #68	@ 0x44
 8003ec0:	5299      	strh	r1, [r3, r2]

    return;
 8003ec2:	e0a0      	b.n	8004006 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	2380      	movs	r3, #128	@ 0x80
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	4013      	ands	r3, r2
 8003ecc:	d028      	beq.n	8003f20 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2240      	movs	r2, #64	@ 0x40
 8003ed4:	5a9b      	ldrh	r3, [r3, r2]
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2108      	movs	r1, #8
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	b291      	uxth	r1, r2
 8003ee2:	2240      	movs	r2, #64	@ 0x40
 8003ee4:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2244      	movs	r2, #68	@ 0x44
 8003eec:	5a9b      	ldrh	r3, [r3, r2]
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4949      	ldr	r1, [pc, #292]	@ (800401c <HAL_PCD_IRQHandler+0x27c>)
 8003ef6:	400a      	ands	r2, r1
 8003ef8:	b291      	uxth	r1, r2
 8003efa:	2244      	movs	r2, #68	@ 0x44
 8003efc:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2240      	movs	r2, #64	@ 0x40
 8003f04:	5a9b      	ldrh	r3, [r3, r2]
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2104      	movs	r1, #4
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	b291      	uxth	r1, r2
 8003f12:	2240      	movs	r2, #64	@ 0x40
 8003f14:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	0018      	movs	r0, r3
 8003f1a:	f007 fa95 	bl	800b448 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003f1e:	e072      	b.n	8004006 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2280      	movs	r2, #128	@ 0x80
 8003f24:	4013      	ands	r3, r2
 8003f26:	d046      	beq.n	8003fb6 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2244      	movs	r2, #68	@ 0x44
 8003f2e:	5a9b      	ldrh	r3, [r3, r2]
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2180      	movs	r1, #128	@ 0x80
 8003f38:	438a      	bics	r2, r1
 8003f3a:	b291      	uxth	r1, r2
 8003f3c:	2244      	movs	r2, #68	@ 0x44
 8003f3e:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	23b2      	movs	r3, #178	@ 0xb2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	5cd3      	ldrb	r3, [r2, r3]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d12f      	bne.n	8003fac <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2240      	movs	r2, #64	@ 0x40
 8003f52:	5a9b      	ldrh	r3, [r3, r2]
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2104      	movs	r1, #4
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	b291      	uxth	r1, r2
 8003f60:	2240      	movs	r2, #64	@ 0x40
 8003f62:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2240      	movs	r2, #64	@ 0x40
 8003f6a:	5a9b      	ldrh	r3, [r3, r2]
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2108      	movs	r1, #8
 8003f74:	430a      	orrs	r2, r1
 8003f76:	b291      	uxth	r1, r2
 8003f78:	2240      	movs	r2, #64	@ 0x40
 8003f7a:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	23b2      	movs	r3, #178	@ 0xb2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	2101      	movs	r1, #1
 8003f84:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2254      	movs	r2, #84	@ 0x54
 8003f8c:	5a9b      	ldrh	r3, [r3, r2]
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	089b      	lsrs	r3, r3, #2
 8003f92:	223c      	movs	r2, #60	@ 0x3c
 8003f94:	4013      	ands	r3, r2
 8003f96:	0019      	movs	r1, r3
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	23b3      	movs	r3, #179	@ 0xb3
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f001 fc17 	bl	80057d8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003faa:	e02c      	b.n	8004006 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f007 fa4a 	bl	800b448 <HAL_PCD_SuspendCallback>
    return;
 8003fb4:	e027      	b.n	8004006 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	2380      	movs	r3, #128	@ 0x80
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	d010      	beq.n	8003fe2 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2244      	movs	r2, #68	@ 0x44
 8003fc6:	5a9b      	ldrh	r3, [r3, r2]
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4914      	ldr	r1, [pc, #80]	@ (8004020 <HAL_PCD_IRQHandler+0x280>)
 8003fd0:	400a      	ands	r2, r1
 8003fd2:	b291      	uxth	r1, r2
 8003fd4:	2244      	movs	r2, #68	@ 0x44
 8003fd6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f007 fa00 	bl	800b3e0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003fe0:	e011      	b.n	8004006 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	2380      	movs	r3, #128	@ 0x80
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d00c      	beq.n	8004006 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2244      	movs	r2, #68	@ 0x44
 8003ff2:	5a9b      	ldrh	r3, [r3, r2]
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	490a      	ldr	r1, [pc, #40]	@ (8004024 <HAL_PCD_IRQHandler+0x284>)
 8003ffc:	400a      	ands	r2, r1
 8003ffe:	b291      	uxth	r1, r2
 8004000:	2244      	movs	r2, #68	@ 0x44
 8004002:	5299      	strh	r1, [r3, r2]

    return;
 8004004:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004006:	46bd      	mov	sp, r7
 8004008:	b004      	add	sp, #16
 800400a:	bd80      	pop	{r7, pc}
 800400c:	fffffbff 	.word	0xfffffbff
 8004010:	ffffbfff 	.word	0xffffbfff
 8004014:	ffffdfff 	.word	0xffffdfff
 8004018:	ffffefff 	.word	0xffffefff
 800401c:	fffff7ff 	.word	0xfffff7ff
 8004020:	fffffdff 	.word	0xfffffdff
 8004024:	fffffeff 	.word	0xfffffeff

08004028 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	000a      	movs	r2, r1
 8004032:	1cfb      	adds	r3, r7, #3
 8004034:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	23a4      	movs	r3, #164	@ 0xa4
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	5cd3      	ldrb	r3, [r2, r3]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d101      	bne.n	8004046 <HAL_PCD_SetAddress+0x1e>
 8004042:	2302      	movs	r3, #2
 8004044:	e016      	b.n	8004074 <HAL_PCD_SetAddress+0x4c>
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	23a4      	movs	r3, #164	@ 0xa4
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	2101      	movs	r1, #1
 800404e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	1cfa      	adds	r2, r7, #3
 8004054:	7812      	ldrb	r2, [r2, #0]
 8004056:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	1cfb      	adds	r3, r7, #3
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	0019      	movs	r1, r3
 8004062:	0010      	movs	r0, r2
 8004064:	f005 f940 	bl	80092e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	23a4      	movs	r3, #164	@ 0xa4
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	2100      	movs	r1, #0
 8004070:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	0018      	movs	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	b002      	add	sp, #8
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800407c:	b590      	push	{r4, r7, lr}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	000c      	movs	r4, r1
 8004086:	0010      	movs	r0, r2
 8004088:	0019      	movs	r1, r3
 800408a:	1cfb      	adds	r3, r7, #3
 800408c:	1c22      	adds	r2, r4, #0
 800408e:	701a      	strb	r2, [r3, #0]
 8004090:	003b      	movs	r3, r7
 8004092:	1c02      	adds	r2, r0, #0
 8004094:	801a      	strh	r2, [r3, #0]
 8004096:	1cbb      	adds	r3, r7, #2
 8004098:	1c0a      	adds	r2, r1, #0
 800409a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800409c:	230b      	movs	r3, #11
 800409e:	18fb      	adds	r3, r7, r3
 80040a0:	2200      	movs	r2, #0
 80040a2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040a4:	1cfb      	adds	r3, r7, #3
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	b25b      	sxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	da0f      	bge.n	80040ce <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040ae:	1cfb      	adds	r3, r7, #3
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2207      	movs	r2, #7
 80040b4:	401a      	ands	r2, r3
 80040b6:	0013      	movs	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	189b      	adds	r3, r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	3310      	adds	r3, #16
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	18d3      	adds	r3, r2, r3
 80040c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	705a      	strb	r2, [r3, #1]
 80040cc:	e00f      	b.n	80040ee <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040ce:	1cfb      	adds	r3, r7, #3
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2207      	movs	r2, #7
 80040d4:	401a      	ands	r2, r3
 80040d6:	0013      	movs	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	189b      	adds	r3, r3, r2
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	3351      	adds	r3, #81	@ 0x51
 80040e0:	33ff      	adds	r3, #255	@ 0xff
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	18d3      	adds	r3, r2, r3
 80040e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80040ee:	1cfb      	adds	r3, r7, #3
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2207      	movs	r2, #7
 80040f4:	4013      	ands	r3, r2
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80040fc:	003b      	movs	r3, r7
 80040fe:	881a      	ldrh	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	1cba      	adds	r2, r7, #2
 8004108:	7812      	ldrb	r2, [r2, #0]
 800410a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800410c:	1cbb      	adds	r3, r7, #2
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d102      	bne.n	800411a <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	23a4      	movs	r3, #164	@ 0xa4
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	5cd3      	ldrb	r3, [r2, r3]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <HAL_PCD_EP_Open+0xae>
 8004126:	2302      	movs	r3, #2
 8004128:	e013      	b.n	8004152 <HAL_PCD_EP_Open+0xd6>
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	23a4      	movs	r3, #164	@ 0xa4
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	2101      	movs	r1, #1
 8004132:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	0011      	movs	r1, r2
 800413c:	0018      	movs	r0, r3
 800413e:	f003 f939 	bl	80073b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	23a4      	movs	r3, #164	@ 0xa4
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	2100      	movs	r1, #0
 800414a:	54d1      	strb	r1, [r2, r3]

  return ret;
 800414c:	230b      	movs	r3, #11
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	781b      	ldrb	r3, [r3, #0]
}
 8004152:	0018      	movs	r0, r3
 8004154:	46bd      	mov	sp, r7
 8004156:	b005      	add	sp, #20
 8004158:	bd90      	pop	{r4, r7, pc}

0800415a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b084      	sub	sp, #16
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	000a      	movs	r2, r1
 8004164:	1cfb      	adds	r3, r7, #3
 8004166:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004168:	1cfb      	adds	r3, r7, #3
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	b25b      	sxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	da0f      	bge.n	8004192 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004172:	1cfb      	adds	r3, r7, #3
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2207      	movs	r2, #7
 8004178:	401a      	ands	r2, r3
 800417a:	0013      	movs	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	189b      	adds	r3, r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	3310      	adds	r3, #16
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	18d3      	adds	r3, r2, r3
 8004188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	705a      	strb	r2, [r3, #1]
 8004190:	e00f      	b.n	80041b2 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004192:	1cfb      	adds	r3, r7, #3
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	2207      	movs	r2, #7
 8004198:	401a      	ands	r2, r3
 800419a:	0013      	movs	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	189b      	adds	r3, r3, r2
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	3351      	adds	r3, #81	@ 0x51
 80041a4:	33ff      	adds	r3, #255	@ 0xff
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	18d3      	adds	r3, r2, r3
 80041aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80041b2:	1cfb      	adds	r3, r7, #3
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2207      	movs	r2, #7
 80041b8:	4013      	ands	r3, r2
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	23a4      	movs	r3, #164	@ 0xa4
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	5cd3      	ldrb	r3, [r2, r3]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_PCD_EP_Close+0x76>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e011      	b.n	80041f4 <HAL_PCD_EP_Close+0x9a>
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	23a4      	movs	r3, #164	@ 0xa4
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	2101      	movs	r1, #1
 80041d8:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	0011      	movs	r1, r2
 80041e2:	0018      	movs	r0, r3
 80041e4:	f003 fc8e 	bl	8007b04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	23a4      	movs	r3, #164	@ 0xa4
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	2100      	movs	r1, #0
 80041f0:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	0018      	movs	r0, r3
 80041f6:	46bd      	mov	sp, r7
 80041f8:	b004      	add	sp, #16
 80041fa:	bd80      	pop	{r7, pc}

080041fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	607a      	str	r2, [r7, #4]
 8004206:	603b      	str	r3, [r7, #0]
 8004208:	200b      	movs	r0, #11
 800420a:	183b      	adds	r3, r7, r0
 800420c:	1c0a      	adds	r2, r1, #0
 800420e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004210:	0001      	movs	r1, r0
 8004212:	187b      	adds	r3, r7, r1
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	2207      	movs	r2, #7
 8004218:	401a      	ands	r2, r3
 800421a:	0013      	movs	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	189b      	adds	r3, r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	3351      	adds	r3, #81	@ 0x51
 8004224:	33ff      	adds	r3, #255	@ 0xff
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	18d3      	adds	r3, r2, r3
 800422a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2200      	movs	r2, #0
 800423c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2200      	movs	r2, #0
 8004242:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004244:	187b      	adds	r3, r7, r1
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2207      	movs	r2, #7
 800424a:	4013      	ands	r3, r2
 800424c:	b2da      	uxtb	r2, r3
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	0011      	movs	r1, r2
 800425a:	0018      	movs	r0, r3
 800425c:	f003 fe12 	bl	8007e84 <USB_EPStartXfer>

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	0018      	movs	r0, r3
 8004264:	46bd      	mov	sp, r7
 8004266:	b006      	add	sp, #24
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b082      	sub	sp, #8
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	000a      	movs	r2, r1
 8004274:	1cfb      	adds	r3, r7, #3
 8004276:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004278:	1cfb      	adds	r3, r7, #3
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2207      	movs	r2, #7
 800427e:	401a      	ands	r2, r3
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	23b6      	movs	r3, #182	@ 0xb6
 8004284:	0059      	lsls	r1, r3, #1
 8004286:	0013      	movs	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	189b      	adds	r3, r3, r2
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	18c3      	adds	r3, r0, r3
 8004290:	185b      	adds	r3, r3, r1
 8004292:	681b      	ldr	r3, [r3, #0]
}
 8004294:	0018      	movs	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	b002      	add	sp, #8
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	607a      	str	r2, [r7, #4]
 80042a6:	603b      	str	r3, [r7, #0]
 80042a8:	200b      	movs	r0, #11
 80042aa:	183b      	adds	r3, r7, r0
 80042ac:	1c0a      	adds	r2, r1, #0
 80042ae:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042b0:	183b      	adds	r3, r7, r0
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2207      	movs	r2, #7
 80042b6:	401a      	ands	r2, r3
 80042b8:	0013      	movs	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	189b      	adds	r3, r3, r2
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	3310      	adds	r3, #16
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	18d3      	adds	r3, r2, r3
 80042c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	2224      	movs	r2, #36	@ 0x24
 80042d8:	2101      	movs	r1, #1
 80042da:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2200      	movs	r2, #0
 80042e6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	2201      	movs	r2, #1
 80042ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042ee:	183b      	adds	r3, r7, r0
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2207      	movs	r2, #7
 80042f4:	4013      	ands	r3, r2
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	0011      	movs	r1, r2
 8004304:	0018      	movs	r0, r3
 8004306:	f003 fdbd 	bl	8007e84 <USB_EPStartXfer>

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	0018      	movs	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	b006      	add	sp, #24
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	000a      	movs	r2, r1
 800431e:	1cfb      	adds	r3, r7, #3
 8004320:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004322:	1cfb      	adds	r3, r7, #3
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2207      	movs	r2, #7
 8004328:	4013      	ands	r3, r2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	7912      	ldrb	r2, [r2, #4]
 800432e:	4293      	cmp	r3, r2
 8004330:	d901      	bls.n	8004336 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e046      	b.n	80043c4 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004336:	1cfb      	adds	r3, r7, #3
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	b25b      	sxtb	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	da0f      	bge.n	8004360 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004340:	1cfb      	adds	r3, r7, #3
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2207      	movs	r2, #7
 8004346:	401a      	ands	r2, r3
 8004348:	0013      	movs	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	189b      	adds	r3, r3, r2
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	3310      	adds	r3, #16
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	18d3      	adds	r3, r2, r3
 8004356:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2201      	movs	r2, #1
 800435c:	705a      	strb	r2, [r3, #1]
 800435e:	e00d      	b.n	800437c <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004360:	1cfb      	adds	r3, r7, #3
 8004362:	781a      	ldrb	r2, [r3, #0]
 8004364:	0013      	movs	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	189b      	adds	r3, r3, r2
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	3351      	adds	r3, #81	@ 0x51
 800436e:	33ff      	adds	r3, #255	@ 0xff
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	18d3      	adds	r3, r2, r3
 8004374:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2201      	movs	r2, #1
 8004380:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004382:	1cfb      	adds	r3, r7, #3
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2207      	movs	r2, #7
 8004388:	4013      	ands	r3, r2
 800438a:	b2da      	uxtb	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	23a4      	movs	r3, #164	@ 0xa4
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	5cd3      	ldrb	r3, [r2, r3]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_PCD_EP_SetStall+0x8c>
 800439c:	2302      	movs	r3, #2
 800439e:	e011      	b.n	80043c4 <HAL_PCD_EP_SetStall+0xb0>
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	23a4      	movs	r3, #164	@ 0xa4
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	2101      	movs	r1, #1
 80043a8:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	0011      	movs	r1, r2
 80043b2:	0018      	movs	r0, r3
 80043b4:	f004 fe96 	bl	80090e4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	23a4      	movs	r3, #164	@ 0xa4
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	2100      	movs	r1, #0
 80043c0:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	0018      	movs	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	b004      	add	sp, #16
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	000a      	movs	r2, r1
 80043d6:	1cfb      	adds	r3, r7, #3
 80043d8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80043da:	1cfb      	adds	r3, r7, #3
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	220f      	movs	r2, #15
 80043e0:	4013      	ands	r3, r2
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	7912      	ldrb	r2, [r2, #4]
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d901      	bls.n	80043ee <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e048      	b.n	8004480 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043ee:	1cfb      	adds	r3, r7, #3
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	b25b      	sxtb	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	da0f      	bge.n	8004418 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043f8:	1cfb      	adds	r3, r7, #3
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2207      	movs	r2, #7
 80043fe:	401a      	ands	r2, r3
 8004400:	0013      	movs	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	189b      	adds	r3, r3, r2
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	3310      	adds	r3, #16
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	18d3      	adds	r3, r2, r3
 800440e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2201      	movs	r2, #1
 8004414:	705a      	strb	r2, [r3, #1]
 8004416:	e00f      	b.n	8004438 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004418:	1cfb      	adds	r3, r7, #3
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2207      	movs	r2, #7
 800441e:	401a      	ands	r2, r3
 8004420:	0013      	movs	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	189b      	adds	r3, r3, r2
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	3351      	adds	r3, #81	@ 0x51
 800442a:	33ff      	adds	r3, #255	@ 0xff
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	18d3      	adds	r3, r2, r3
 8004430:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800443e:	1cfb      	adds	r3, r7, #3
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2207      	movs	r2, #7
 8004444:	4013      	ands	r3, r2
 8004446:	b2da      	uxtb	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	23a4      	movs	r3, #164	@ 0xa4
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	5cd3      	ldrb	r3, [r2, r3]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_PCD_EP_ClrStall+0x90>
 8004458:	2302      	movs	r3, #2
 800445a:	e011      	b.n	8004480 <HAL_PCD_EP_ClrStall+0xb4>
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	23a4      	movs	r3, #164	@ 0xa4
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	2101      	movs	r1, #1
 8004464:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	0011      	movs	r1, r2
 800446e:	0018      	movs	r0, r3
 8004470:	f004 fe88 	bl	8009184 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	23a4      	movs	r3, #164	@ 0xa4
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	2100      	movs	r1, #0
 800447c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	0018      	movs	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	b004      	add	sp, #16
 8004486:	bd80      	pop	{r7, pc}

08004488 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004488:	b5b0      	push	{r4, r5, r7, lr}
 800448a:	b096      	sub	sp, #88	@ 0x58
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004490:	f000 fbea 	bl	8004c68 <PCD_EP_ISR_Handler+0x7e0>
  {
    wIstr = hpcd->Instance->ISTR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	2048      	movs	r0, #72	@ 0x48
 800449a:	183b      	adds	r3, r7, r0
 800449c:	2144      	movs	r1, #68	@ 0x44
 800449e:	5a52      	ldrh	r2, [r2, r1]
 80044a0:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80044a2:	183b      	adds	r3, r7, r0
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	244f      	movs	r4, #79	@ 0x4f
 80044aa:	193b      	adds	r3, r7, r4
 80044ac:	210f      	movs	r1, #15
 80044ae:	400a      	ands	r2, r1
 80044b0:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80044b2:	193b      	adds	r3, r7, r4
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d000      	beq.n	80044bc <PCD_EP_ISR_Handler+0x34>
 80044ba:	e18d      	b.n	80047d8 <PCD_EP_ISR_Handler+0x350>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80044bc:	183b      	adds	r3, r7, r0
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	2210      	movs	r2, #16
 80044c2:	4013      	ands	r3, r2
 80044c4:	d152      	bne.n	800456c <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	200e      	movs	r0, #14
 80044d0:	183b      	adds	r3, r7, r0
 80044d2:	49ba      	ldr	r1, [pc, #744]	@ (80047bc <PCD_EP_ISR_Handler+0x334>)
 80044d4:	400a      	ands	r2, r1
 80044d6:	801a      	strh	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	183a      	adds	r2, r7, r0
 80044de:	8812      	ldrh	r2, [r2, #0]
 80044e0:	49b7      	ldr	r1, [pc, #732]	@ (80047c0 <PCD_EP_ISR_Handler+0x338>)
 80044e2:	430a      	orrs	r2, r1
 80044e4:	b292      	uxth	r2, r2
 80044e6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3310      	adds	r3, #16
 80044ec:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2250      	movs	r2, #80	@ 0x50
 80044f4:	5a9b      	ldrh	r3, [r3, r2]
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	001a      	movs	r2, r3
 80044fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	18d2      	adds	r2, r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	18d3      	adds	r3, r2, r3
 8004508:	4aae      	ldr	r2, [pc, #696]	@ (80047c4 <PCD_EP_ISR_Handler+0x33c>)
 800450a:	4694      	mov	ip, r2
 800450c:	4463      	add	r3, ip
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	059b      	lsls	r3, r3, #22
 8004512:	0d9a      	lsrs	r2, r3, #22
 8004514:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004516:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800451a:	695a      	ldr	r2, [r3, #20]
 800451c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	18d2      	adds	r2, r2, r3
 8004522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004524:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2100      	movs	r1, #0
 800452a:	0018      	movs	r0, r3
 800452c:	f006 ff3a 	bl	800b3a4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	7b1b      	ldrb	r3, [r3, #12]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <PCD_EP_ISR_Handler+0xb6>
 800453a:	f000 fb95 	bl	8004c68 <PCD_EP_ISR_Handler+0x7e0>
 800453e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <PCD_EP_ISR_Handler+0xc2>
 8004546:	f000 fb8f 	bl	8004c68 <PCD_EP_ISR_Handler+0x7e0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	7b1b      	ldrb	r3, [r3, #12]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2280      	movs	r2, #128	@ 0x80
 8004552:	4252      	negs	r2, r2
 8004554:	4313      	orrs	r3, r2
 8004556:	b2da      	uxtb	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	0011      	movs	r1, r2
 800455e:	224c      	movs	r2, #76	@ 0x4c
 8004560:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	731a      	strb	r2, [r3, #12]
 8004568:	f000 fb7e 	bl	8004c68 <PCD_EP_ISR_Handler+0x7e0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3351      	adds	r3, #81	@ 0x51
 8004570:	33ff      	adds	r3, #255	@ 0xff
 8004572:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	214c      	movs	r1, #76	@ 0x4c
 800457a:	187b      	adds	r3, r7, r1
 800457c:	8812      	ldrh	r2, [r2, #0]
 800457e:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004580:	187b      	adds	r3, r7, r1
 8004582:	881a      	ldrh	r2, [r3, #0]
 8004584:	2380      	movs	r3, #128	@ 0x80
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	4013      	ands	r3, r2
 800458a:	d037      	beq.n	80045fc <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2250      	movs	r2, #80	@ 0x50
 8004592:	5a9b      	ldrh	r3, [r3, r2]
 8004594:	b29b      	uxth	r3, r3
 8004596:	001a      	movs	r2, r3
 8004598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	18d2      	adds	r2, r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	18d3      	adds	r3, r2, r3
 80045a6:	4a88      	ldr	r2, [pc, #544]	@ (80047c8 <PCD_EP_ISR_Handler+0x340>)
 80045a8:	4694      	mov	ip, r2
 80045aa:	4463      	add	r3, ip
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	059b      	lsls	r3, r3, #22
 80045b0:	0d9a      	lsrs	r2, r3, #22
 80045b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045b4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6818      	ldr	r0, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	22a6      	movs	r2, #166	@ 0xa6
 80045be:	0092      	lsls	r2, r2, #2
 80045c0:	1899      	adds	r1, r3, r2
 80045c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045c4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80045c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045c8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	f004 ff0e 	bl	80093ec <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	2010      	movs	r0, #16
 80045da:	183b      	adds	r3, r7, r0
 80045dc:	497b      	ldr	r1, [pc, #492]	@ (80047cc <PCD_EP_ISR_Handler+0x344>)
 80045de:	400a      	ands	r2, r1
 80045e0:	801a      	strh	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	183a      	adds	r2, r7, r0
 80045e8:	8812      	ldrh	r2, [r2, #0]
 80045ea:	2180      	movs	r1, #128	@ 0x80
 80045ec:	430a      	orrs	r2, r1
 80045ee:	b292      	uxth	r2, r2
 80045f0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	0018      	movs	r0, r3
 80045f6:	f006 fe9f 	bl	800b338 <HAL_PCD_SetupStageCallback>
 80045fa:	e335      	b.n	8004c68 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80045fc:	234c      	movs	r3, #76	@ 0x4c
 80045fe:	18fb      	adds	r3, r7, r3
 8004600:	2200      	movs	r2, #0
 8004602:	5e9b      	ldrsh	r3, [r3, r2]
 8004604:	2b00      	cmp	r3, #0
 8004606:	db00      	blt.n	800460a <PCD_EP_ISR_Handler+0x182>
 8004608:	e32e      	b.n	8004c68 <PCD_EP_ISR_Handler+0x7e0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	b29a      	uxth	r2, r3
 8004612:	201e      	movs	r0, #30
 8004614:	183b      	adds	r3, r7, r0
 8004616:	496d      	ldr	r1, [pc, #436]	@ (80047cc <PCD_EP_ISR_Handler+0x344>)
 8004618:	400a      	ands	r2, r1
 800461a:	801a      	strh	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	183a      	adds	r2, r7, r0
 8004622:	8812      	ldrh	r2, [r2, #0]
 8004624:	2180      	movs	r1, #128	@ 0x80
 8004626:	430a      	orrs	r2, r1
 8004628:	b292      	uxth	r2, r2
 800462a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2250      	movs	r2, #80	@ 0x50
 8004632:	5a9b      	ldrh	r3, [r3, r2]
 8004634:	b29b      	uxth	r3, r3
 8004636:	001a      	movs	r2, r3
 8004638:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	18d2      	adds	r2, r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	18d3      	adds	r3, r2, r3
 8004646:	4a60      	ldr	r2, [pc, #384]	@ (80047c8 <PCD_EP_ISR_Handler+0x340>)
 8004648:	4694      	mov	ip, r2
 800464a:	4463      	add	r3, ip
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	059b      	lsls	r3, r3, #22
 8004650:	0d9a      	lsrs	r2, r3, #22
 8004652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004654:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d01a      	beq.n	8004694 <PCD_EP_ISR_Handler+0x20c>
 800465e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d016      	beq.n	8004694 <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6818      	ldr	r0, [r3, #0]
 800466a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800466c:	6959      	ldr	r1, [r3, #20]
 800466e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004670:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004674:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004676:	b29b      	uxth	r3, r3
 8004678:	f004 feb8 	bl	80093ec <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800467c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800467e:	695a      	ldr	r2, [r3, #20]
 8004680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	18d2      	adds	r2, r2, r3
 8004686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004688:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2100      	movs	r1, #0
 800468e:	0018      	movs	r0, r3
 8004690:	f006 fe67 	bl	800b362 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	214c      	movs	r1, #76	@ 0x4c
 800469a:	187b      	adds	r3, r7, r1
 800469c:	8812      	ldrh	r2, [r2, #0]
 800469e:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80046a0:	187b      	adds	r3, r7, r1
 80046a2:	881a      	ldrh	r2, [r3, #0]
 80046a4:	2380      	movs	r3, #128	@ 0x80
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	4013      	ands	r3, r2
 80046aa:	d000      	beq.n	80046ae <PCD_EP_ISR_Handler+0x226>
 80046ac:	e2dc      	b.n	8004c68 <PCD_EP_ISR_Handler+0x7e0>
 80046ae:	187b      	adds	r3, r7, r1
 80046b0:	881a      	ldrh	r2, [r3, #0]
 80046b2:	23c0      	movs	r3, #192	@ 0xc0
 80046b4:	019b      	lsls	r3, r3, #6
 80046b6:	401a      	ands	r2, r3
 80046b8:	23c0      	movs	r3, #192	@ 0xc0
 80046ba:	019b      	lsls	r3, r3, #6
 80046bc:	429a      	cmp	r2, r3
 80046be:	d100      	bne.n	80046c2 <PCD_EP_ISR_Handler+0x23a>
 80046c0:	e2d2      	b.n	8004c68 <PCD_EP_ISR_Handler+0x7e0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2250      	movs	r2, #80	@ 0x50
 80046ce:	5a9b      	ldrh	r3, [r3, r2]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	001a      	movs	r2, r3
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	189b      	adds	r3, r3, r2
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	4a3a      	ldr	r2, [pc, #232]	@ (80047c8 <PCD_EP_ISR_Handler+0x340>)
 80046de:	4694      	mov	ip, r2
 80046e0:	4463      	add	r3, ip
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	059b      	lsls	r3, r3, #22
 80046ec:	0d9b      	lsrs	r3, r3, #22
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	801a      	strh	r2, [r3, #0]
 80046f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d108      	bne.n	800470e <PCD_EP_ISR_Handler+0x286>
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	b29b      	uxth	r3, r3
 8004702:	4a2f      	ldr	r2, [pc, #188]	@ (80047c0 <PCD_EP_ISR_Handler+0x338>)
 8004704:	4313      	orrs	r3, r2
 8004706:	b29a      	uxth	r2, r3
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	801a      	strh	r2, [r3, #0]
 800470c:	e035      	b.n	800477a <PCD_EP_ISR_Handler+0x2f2>
 800470e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	2b3e      	cmp	r3, #62	@ 0x3e
 8004714:	d817      	bhi.n	8004746 <PCD_EP_ISR_Handler+0x2be>
 8004716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	085b      	lsrs	r3, r3, #1
 800471c:	647b      	str	r3, [r7, #68]	@ 0x44
 800471e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2201      	movs	r2, #1
 8004724:	4013      	ands	r3, r2
 8004726:	d002      	beq.n	800472e <PCD_EP_ISR_Handler+0x2a6>
 8004728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800472a:	3301      	adds	r3, #1
 800472c:	647b      	str	r3, [r7, #68]	@ 0x44
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	b29a      	uxth	r2, r3
 8004734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004736:	b29b      	uxth	r3, r3
 8004738:	029b      	lsls	r3, r3, #10
 800473a:	b29b      	uxth	r3, r3
 800473c:	4313      	orrs	r3, r2
 800473e:	b29a      	uxth	r2, r3
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	801a      	strh	r2, [r3, #0]
 8004744:	e019      	b.n	800477a <PCD_EP_ISR_Handler+0x2f2>
 8004746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	095b      	lsrs	r3, r3, #5
 800474c:	647b      	str	r3, [r7, #68]	@ 0x44
 800474e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	221f      	movs	r2, #31
 8004754:	4013      	ands	r3, r2
 8004756:	d102      	bne.n	800475e <PCD_EP_ISR_Handler+0x2d6>
 8004758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800475a:	3b01      	subs	r3, #1
 800475c:	647b      	str	r3, [r7, #68]	@ 0x44
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	b29a      	uxth	r2, r3
 8004764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004766:	b29b      	uxth	r3, r3
 8004768:	029b      	lsls	r3, r3, #10
 800476a:	b29b      	uxth	r3, r3
 800476c:	4313      	orrs	r3, r2
 800476e:	b29b      	uxth	r3, r3
 8004770:	4a13      	ldr	r2, [pc, #76]	@ (80047c0 <PCD_EP_ISR_Handler+0x338>)
 8004772:	4313      	orrs	r3, r2
 8004774:	b29a      	uxth	r2, r3
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	881b      	ldrh	r3, [r3, #0]
 8004780:	b29a      	uxth	r2, r3
 8004782:	2012      	movs	r0, #18
 8004784:	183b      	adds	r3, r7, r0
 8004786:	4912      	ldr	r1, [pc, #72]	@ (80047d0 <PCD_EP_ISR_Handler+0x348>)
 8004788:	400a      	ands	r2, r1
 800478a:	801a      	strh	r2, [r3, #0]
 800478c:	183b      	adds	r3, r7, r0
 800478e:	183a      	adds	r2, r7, r0
 8004790:	8812      	ldrh	r2, [r2, #0]
 8004792:	2180      	movs	r1, #128	@ 0x80
 8004794:	0149      	lsls	r1, r1, #5
 8004796:	404a      	eors	r2, r1
 8004798:	801a      	strh	r2, [r3, #0]
 800479a:	183b      	adds	r3, r7, r0
 800479c:	183a      	adds	r2, r7, r0
 800479e:	8812      	ldrh	r2, [r2, #0]
 80047a0:	2180      	movs	r1, #128	@ 0x80
 80047a2:	0189      	lsls	r1, r1, #6
 80047a4:	404a      	eors	r2, r1
 80047a6:	801a      	strh	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	183a      	adds	r2, r7, r0
 80047ae:	8812      	ldrh	r2, [r2, #0]
 80047b0:	4908      	ldr	r1, [pc, #32]	@ (80047d4 <PCD_EP_ISR_Handler+0x34c>)
 80047b2:	430a      	orrs	r2, r1
 80047b4:	b292      	uxth	r2, r2
 80047b6:	801a      	strh	r2, [r3, #0]
 80047b8:	e256      	b.n	8004c68 <PCD_EP_ISR_Handler+0x7e0>
 80047ba:	46c0      	nop			@ (mov r8, r8)
 80047bc:	ffff8f0f 	.word	0xffff8f0f
 80047c0:	ffff8000 	.word	0xffff8000
 80047c4:	00000402 	.word	0x00000402
 80047c8:	00000406 	.word	0x00000406
 80047cc:	00000f8f 	.word	0x00000f8f
 80047d0:	ffffbf8f 	.word	0xffffbf8f
 80047d4:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	001a      	movs	r2, r3
 80047de:	204f      	movs	r0, #79	@ 0x4f
 80047e0:	183b      	adds	r3, r7, r0
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	18d2      	adds	r2, r2, r3
 80047e8:	214c      	movs	r1, #76	@ 0x4c
 80047ea:	187b      	adds	r3, r7, r1
 80047ec:	8812      	ldrh	r2, [r2, #0]
 80047ee:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80047f0:	187b      	adds	r3, r7, r1
 80047f2:	2200      	movs	r2, #0
 80047f4:	5e9b      	ldrsh	r3, [r3, r2]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	db00      	blt.n	80047fc <PCD_EP_ISR_Handler+0x374>
 80047fa:	e0fa      	b.n	80049f2 <PCD_EP_ISR_Handler+0x56a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	001a      	movs	r2, r3
 8004802:	183b      	adds	r3, r7, r0
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	18d3      	adds	r3, r2, r3
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	b29a      	uxth	r2, r3
 800480e:	244a      	movs	r4, #74	@ 0x4a
 8004810:	193b      	adds	r3, r7, r4
 8004812:	49d1      	ldr	r1, [pc, #836]	@ (8004b58 <PCD_EP_ISR_Handler+0x6d0>)
 8004814:	400a      	ands	r2, r1
 8004816:	801a      	strh	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	001a      	movs	r2, r3
 800481e:	183b      	adds	r3, r7, r0
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	18d3      	adds	r3, r2, r3
 8004826:	193a      	adds	r2, r7, r4
 8004828:	8812      	ldrh	r2, [r2, #0]
 800482a:	2180      	movs	r1, #128	@ 0x80
 800482c:	430a      	orrs	r2, r1
 800482e:	b292      	uxth	r2, r2
 8004830:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004832:	183b      	adds	r3, r7, r0
 8004834:	781a      	ldrb	r2, [r3, #0]
 8004836:	0013      	movs	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	189b      	adds	r3, r3, r2
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	3351      	adds	r3, #81	@ 0x51
 8004840:	33ff      	adds	r3, #255	@ 0xff
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	18d3      	adds	r3, r2, r3
 8004846:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800484a:	7b1b      	ldrb	r3, [r3, #12]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d125      	bne.n	800489c <PCD_EP_ISR_Handler+0x414>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2250      	movs	r2, #80	@ 0x50
 8004856:	5a9b      	ldrh	r3, [r3, r2]
 8004858:	b29b      	uxth	r3, r3
 800485a:	001a      	movs	r2, r3
 800485c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	18d2      	adds	r2, r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	18d3      	adds	r3, r2, r3
 800486a:	4abc      	ldr	r2, [pc, #752]	@ (8004b5c <PCD_EP_ISR_Handler+0x6d4>)
 800486c:	4694      	mov	ip, r2
 800486e:	4463      	add	r3, ip
 8004870:	881a      	ldrh	r2, [r3, #0]
 8004872:	2450      	movs	r4, #80	@ 0x50
 8004874:	193b      	adds	r3, r7, r4
 8004876:	0592      	lsls	r2, r2, #22
 8004878:	0d92      	lsrs	r2, r2, #22
 800487a:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800487c:	193b      	adds	r3, r7, r4
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d100      	bne.n	8004886 <PCD_EP_ISR_Handler+0x3fe>
 8004884:	e08d      	b.n	80049a2 <PCD_EP_ISR_Handler+0x51a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6818      	ldr	r0, [r3, #0]
 800488a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800488c:	6959      	ldr	r1, [r3, #20]
 800488e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004890:	88da      	ldrh	r2, [r3, #6]
 8004892:	193b      	adds	r3, r7, r4
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	f004 fda9 	bl	80093ec <USB_ReadPMA>
 800489a:	e082      	b.n	80049a2 <PCD_EP_ISR_Handler+0x51a>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800489c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800489e:	78db      	ldrb	r3, [r3, #3]
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d10c      	bne.n	80048be <PCD_EP_ISR_Handler+0x436>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80048a4:	2350      	movs	r3, #80	@ 0x50
 80048a6:	18fc      	adds	r4, r7, r3
 80048a8:	234c      	movs	r3, #76	@ 0x4c
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	881a      	ldrh	r2, [r3, #0]
 80048ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	0018      	movs	r0, r3
 80048b4:	f000 f9ec 	bl	8004c90 <HAL_PCD_EP_DB_Receive>
 80048b8:	0003      	movs	r3, r0
 80048ba:	8023      	strh	r3, [r4, #0]
 80048bc:	e071      	b.n	80049a2 <PCD_EP_ISR_Handler+0x51a>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	001a      	movs	r2, r3
 80048c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	18d3      	adds	r3, r2, r3
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	2052      	movs	r0, #82	@ 0x52
 80048d2:	183b      	adds	r3, r7, r0
 80048d4:	49a2      	ldr	r1, [pc, #648]	@ (8004b60 <PCD_EP_ISR_Handler+0x6d8>)
 80048d6:	400a      	ands	r2, r1
 80048d8:	801a      	strh	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	001a      	movs	r2, r3
 80048e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	18d3      	adds	r3, r2, r3
 80048e8:	183a      	adds	r2, r7, r0
 80048ea:	8812      	ldrh	r2, [r2, #0]
 80048ec:	499d      	ldr	r1, [pc, #628]	@ (8004b64 <PCD_EP_ISR_Handler+0x6dc>)
 80048ee:	430a      	orrs	r2, r1
 80048f0:	b292      	uxth	r2, r2
 80048f2:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	001a      	movs	r2, r3
 80048fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	18d3      	adds	r3, r2, r3
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	b29b      	uxth	r3, r3
 8004906:	001a      	movs	r2, r3
 8004908:	2380      	movs	r3, #128	@ 0x80
 800490a:	01db      	lsls	r3, r3, #7
 800490c:	4013      	ands	r3, r2
 800490e:	d024      	beq.n	800495a <PCD_EP_ISR_Handler+0x4d2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2250      	movs	r2, #80	@ 0x50
 8004916:	5a9b      	ldrh	r3, [r3, r2]
 8004918:	b29b      	uxth	r3, r3
 800491a:	001a      	movs	r2, r3
 800491c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	18d2      	adds	r2, r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	18d3      	adds	r3, r2, r3
 800492a:	4a8f      	ldr	r2, [pc, #572]	@ (8004b68 <PCD_EP_ISR_Handler+0x6e0>)
 800492c:	4694      	mov	ip, r2
 800492e:	4463      	add	r3, ip
 8004930:	881a      	ldrh	r2, [r3, #0]
 8004932:	2450      	movs	r4, #80	@ 0x50
 8004934:	193b      	adds	r3, r7, r4
 8004936:	0592      	lsls	r2, r2, #22
 8004938:	0d92      	lsrs	r2, r2, #22
 800493a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800493c:	193b      	adds	r3, r7, r4
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d02e      	beq.n	80049a2 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6818      	ldr	r0, [r3, #0]
 8004948:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800494a:	6959      	ldr	r1, [r3, #20]
 800494c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800494e:	891a      	ldrh	r2, [r3, #8]
 8004950:	193b      	adds	r3, r7, r4
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	f004 fd4a 	bl	80093ec <USB_ReadPMA>
 8004958:	e023      	b.n	80049a2 <PCD_EP_ISR_Handler+0x51a>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2250      	movs	r2, #80	@ 0x50
 8004960:	5a9b      	ldrh	r3, [r3, r2]
 8004962:	b29b      	uxth	r3, r3
 8004964:	001a      	movs	r2, r3
 8004966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	18d2      	adds	r2, r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	18d3      	adds	r3, r2, r3
 8004974:	4a79      	ldr	r2, [pc, #484]	@ (8004b5c <PCD_EP_ISR_Handler+0x6d4>)
 8004976:	4694      	mov	ip, r2
 8004978:	4463      	add	r3, ip
 800497a:	881a      	ldrh	r2, [r3, #0]
 800497c:	2450      	movs	r4, #80	@ 0x50
 800497e:	193b      	adds	r3, r7, r4
 8004980:	0592      	lsls	r2, r2, #22
 8004982:	0d92      	lsrs	r2, r2, #22
 8004984:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8004986:	193b      	adds	r3, r7, r4
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d009      	beq.n	80049a2 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6818      	ldr	r0, [r3, #0]
 8004992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004994:	6959      	ldr	r1, [r3, #20]
 8004996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004998:	895a      	ldrh	r2, [r3, #10]
 800499a:	193b      	adds	r3, r7, r4
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	f004 fd25 	bl	80093ec <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80049a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049a4:	69da      	ldr	r2, [r3, #28]
 80049a6:	2150      	movs	r1, #80	@ 0x50
 80049a8:	187b      	adds	r3, r7, r1
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	18d2      	adds	r2, r2, r3
 80049ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80049b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049b4:	695a      	ldr	r2, [r3, #20]
 80049b6:	187b      	adds	r3, r7, r1
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	18d2      	adds	r2, r2, r3
 80049bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049be:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80049c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <PCD_EP_ISR_Handler+0x54c>
 80049c8:	187b      	adds	r3, r7, r1
 80049ca:	881a      	ldrh	r2, [r3, #0]
 80049cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d207      	bcs.n	80049e4 <PCD_EP_ISR_Handler+0x55c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80049d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049d6:	781a      	ldrb	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	0011      	movs	r1, r2
 80049dc:	0018      	movs	r0, r3
 80049de:	f006 fcc0 	bl	800b362 <HAL_PCD_DataOutStageCallback>
 80049e2:	e006      	b.n	80049f2 <PCD_EP_ISR_Handler+0x56a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80049ea:	0011      	movs	r1, r2
 80049ec:	0018      	movs	r0, r3
 80049ee:	f003 fa49 	bl	8007e84 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80049f2:	244c      	movs	r4, #76	@ 0x4c
 80049f4:	193b      	adds	r3, r7, r4
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	2280      	movs	r2, #128	@ 0x80
 80049fa:	4013      	ands	r3, r2
 80049fc:	d100      	bne.n	8004a00 <PCD_EP_ISR_Handler+0x578>
 80049fe:	e133      	b.n	8004c68 <PCD_EP_ISR_Handler+0x7e0>
      {
        ep = &hpcd->IN_ep[epindex];
 8004a00:	204f      	movs	r0, #79	@ 0x4f
 8004a02:	183b      	adds	r3, r7, r0
 8004a04:	781a      	ldrb	r2, [r3, #0]
 8004a06:	0013      	movs	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	189b      	adds	r3, r3, r2
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	3310      	adds	r3, #16
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	18d3      	adds	r3, r2, r3
 8004a14:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	001a      	movs	r2, r3
 8004a1c:	183b      	adds	r3, r7, r0
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	18d3      	adds	r3, r2, r3
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	2542      	movs	r5, #66	@ 0x42
 8004a2a:	197b      	adds	r3, r7, r5
 8004a2c:	494f      	ldr	r1, [pc, #316]	@ (8004b6c <PCD_EP_ISR_Handler+0x6e4>)
 8004a2e:	400a      	ands	r2, r1
 8004a30:	801a      	strh	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	001a      	movs	r2, r3
 8004a38:	183b      	adds	r3, r7, r0
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	18d3      	adds	r3, r2, r3
 8004a40:	197a      	adds	r2, r7, r5
 8004a42:	8812      	ldrh	r2, [r2, #0]
 8004a44:	494a      	ldr	r1, [pc, #296]	@ (8004b70 <PCD_EP_ISR_Handler+0x6e8>)
 8004a46:	430a      	orrs	r2, r1
 8004a48:	b292      	uxth	r2, r2
 8004a4a:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a4e:	78db      	ldrb	r3, [r3, #3]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d000      	beq.n	8004a56 <PCD_EP_ISR_Handler+0x5ce>
 8004a54:	e0af      	b.n	8004bb6 <PCD_EP_ISR_Handler+0x72e>
        {
          ep->xfer_len = 0U;
 8004a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a58:	2200      	movs	r2, #0
 8004a5a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004a5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a5e:	7b1b      	ldrb	r3, [r3, #12]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d100      	bne.n	8004a66 <PCD_EP_ISR_Handler+0x5de>
 8004a64:	e09f      	b.n	8004ba6 <PCD_EP_ISR_Handler+0x71e>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004a66:	193b      	adds	r3, r7, r4
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	2240      	movs	r2, #64	@ 0x40
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d046      	beq.n	8004afe <PCD_EP_ISR_Handler+0x676>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a72:	785b      	ldrb	r3, [r3, #1]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d125      	bne.n	8004ac4 <PCD_EP_ISR_Handler+0x63c>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2250      	movs	r2, #80	@ 0x50
 8004a84:	5a9b      	ldrh	r3, [r3, r2]
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	001a      	movs	r2, r3
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8c:	189b      	adds	r3, r3, r2
 8004a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	00da      	lsls	r2, r3, #3
 8004a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a98:	18d3      	adds	r3, r2, r3
 8004a9a:	4a33      	ldr	r2, [pc, #204]	@ (8004b68 <PCD_EP_ISR_Handler+0x6e0>)
 8004a9c:	4694      	mov	ip, r2
 8004a9e:	4463      	add	r3, ip
 8004aa0:	623b      	str	r3, [r7, #32]
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	059b      	lsls	r3, r3, #22
 8004aaa:	0d9b      	lsrs	r3, r3, #22
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	801a      	strh	r2, [r3, #0]
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	4a2d      	ldr	r2, [pc, #180]	@ (8004b70 <PCD_EP_ISR_Handler+0x6e8>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	801a      	strh	r2, [r3, #0]
 8004ac2:	e070      	b.n	8004ba6 <PCD_EP_ISR_Handler+0x71e>
 8004ac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ac6:	785b      	ldrb	r3, [r3, #1]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d16c      	bne.n	8004ba6 <PCD_EP_ISR_Handler+0x71e>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2250      	movs	r2, #80	@ 0x50
 8004ad8:	5a9b      	ldrh	r3, [r3, r2]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	001a      	movs	r2, r3
 8004ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae0:	189b      	adds	r3, r3, r2
 8004ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	00da      	lsls	r2, r3, #3
 8004aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aec:	18d3      	adds	r3, r2, r3
 8004aee:	4a1e      	ldr	r2, [pc, #120]	@ (8004b68 <PCD_EP_ISR_Handler+0x6e0>)
 8004af0:	4694      	mov	ip, r2
 8004af2:	4463      	add	r3, ip
 8004af4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af8:	2200      	movs	r2, #0
 8004afa:	801a      	strh	r2, [r3, #0]
 8004afc:	e053      	b.n	8004ba6 <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b06:	785b      	ldrb	r3, [r3, #1]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d133      	bne.n	8004b74 <PCD_EP_ISR_Handler+0x6ec>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2250      	movs	r2, #80	@ 0x50
 8004b18:	5a9b      	ldrh	r3, [r3, r2]
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	001a      	movs	r2, r3
 8004b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b20:	189b      	adds	r3, r3, r2
 8004b22:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	00da      	lsls	r2, r3, #3
 8004b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b2c:	18d3      	adds	r3, r2, r3
 8004b2e:	4a0b      	ldr	r2, [pc, #44]	@ (8004b5c <PCD_EP_ISR_Handler+0x6d4>)
 8004b30:	4694      	mov	ip, r2
 8004b32:	4463      	add	r3, ip
 8004b34:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	059b      	lsls	r3, r3, #22
 8004b3e:	0d9b      	lsrs	r3, r3, #22
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b44:	801a      	strh	r2, [r3, #0]
 8004b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	4a08      	ldr	r2, [pc, #32]	@ (8004b70 <PCD_EP_ISR_Handler+0x6e8>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b54:	801a      	strh	r2, [r3, #0]
 8004b56:	e026      	b.n	8004ba6 <PCD_EP_ISR_Handler+0x71e>
 8004b58:	00000f8f 	.word	0x00000f8f
 8004b5c:	00000406 	.word	0x00000406
 8004b60:	ffff8f8f 	.word	0xffff8f8f
 8004b64:	ffff80c0 	.word	0xffff80c0
 8004b68:	00000402 	.word	0x00000402
 8004b6c:	ffff8f0f 	.word	0xffff8f0f
 8004b70:	ffff8000 	.word	0xffff8000
 8004b74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b76:	785b      	ldrb	r3, [r3, #1]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d114      	bne.n	8004ba6 <PCD_EP_ISR_Handler+0x71e>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2250      	movs	r2, #80	@ 0x50
 8004b82:	5a9b      	ldrh	r3, [r3, r2]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	001a      	movs	r2, r3
 8004b88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b8a:	189b      	adds	r3, r3, r2
 8004b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	00da      	lsls	r2, r3, #3
 8004b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b96:	18d3      	adds	r3, r2, r3
 8004b98:	4a3b      	ldr	r2, [pc, #236]	@ (8004c88 <PCD_EP_ISR_Handler+0x800>)
 8004b9a:	4694      	mov	ip, r2
 8004b9c:	4463      	add	r3, ip
 8004b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ba8:	781a      	ldrb	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	0011      	movs	r1, r2
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f006 fbf8 	bl	800b3a4 <HAL_PCD_DataInStageCallback>
 8004bb4:	e058      	b.n	8004c68 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004bb6:	234c      	movs	r3, #76	@ 0x4c
 8004bb8:	18fb      	adds	r3, r7, r3
 8004bba:	881a      	ldrh	r2, [r3, #0]
 8004bbc:	2380      	movs	r3, #128	@ 0x80
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	d149      	bne.n	8004c58 <PCD_EP_ISR_Handler+0x7d0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2250      	movs	r2, #80	@ 0x50
 8004bca:	5a9b      	ldrh	r3, [r3, r2]
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	001a      	movs	r2, r3
 8004bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	18d2      	adds	r2, r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	18d3      	adds	r3, r2, r3
 8004bde:	4a2b      	ldr	r2, [pc, #172]	@ (8004c8c <PCD_EP_ISR_Handler+0x804>)
 8004be0:	4694      	mov	ip, r2
 8004be2:	4463      	add	r3, ip
 8004be4:	881a      	ldrh	r2, [r3, #0]
 8004be6:	2140      	movs	r1, #64	@ 0x40
 8004be8:	187b      	adds	r3, r7, r1
 8004bea:	0592      	lsls	r2, r2, #22
 8004bec:	0d92      	lsrs	r2, r2, #22
 8004bee:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8004bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bf2:	699a      	ldr	r2, [r3, #24]
 8004bf4:	187b      	adds	r3, r7, r1
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d907      	bls.n	8004c0c <PCD_EP_ISR_Handler+0x784>
            {
              ep->xfer_len -= TxPctSize;
 8004bfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bfe:	699a      	ldr	r2, [r3, #24]
 8004c00:	187b      	adds	r3, r7, r1
 8004c02:	881b      	ldrh	r3, [r3, #0]
 8004c04:	1ad2      	subs	r2, r2, r3
 8004c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c08:	619a      	str	r2, [r3, #24]
 8004c0a:	e002      	b.n	8004c12 <PCD_EP_ISR_Handler+0x78a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004c0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c0e:	2200      	movs	r2, #0
 8004c10:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d107      	bne.n	8004c2a <PCD_EP_ISR_Handler+0x7a2>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c1c:	781a      	ldrb	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	0011      	movs	r1, r2
 8004c22:	0018      	movs	r0, r3
 8004c24:	f006 fbbe 	bl	800b3a4 <HAL_PCD_DataInStageCallback>
 8004c28:	e01e      	b.n	8004c68 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c2c:	695a      	ldr	r2, [r3, #20]
 8004c2e:	2140      	movs	r1, #64	@ 0x40
 8004c30:	187b      	adds	r3, r7, r1
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	18d2      	adds	r2, r2, r3
 8004c36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c38:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c3c:	69da      	ldr	r2, [r3, #28]
 8004c3e:	187b      	adds	r3, r7, r1
 8004c40:	881b      	ldrh	r3, [r3, #0]
 8004c42:	18d2      	adds	r2, r2, r3
 8004c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c46:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004c4e:	0011      	movs	r1, r2
 8004c50:	0018      	movs	r0, r3
 8004c52:	f003 f917 	bl	8007e84 <USB_EPStartXfer>
 8004c56:	e007      	b.n	8004c68 <PCD_EP_ISR_Handler+0x7e0>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004c58:	234c      	movs	r3, #76	@ 0x4c
 8004c5a:	18fb      	adds	r3, r7, r3
 8004c5c:	881a      	ldrh	r2, [r3, #0]
 8004c5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	0018      	movs	r0, r3
 8004c64:	f000 f930 	bl	8004ec8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2244      	movs	r2, #68	@ 0x44
 8004c6e:	5a9b      	ldrh	r3, [r3, r2]
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	b21b      	sxth	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	da01      	bge.n	8004c7c <PCD_EP_ISR_Handler+0x7f4>
 8004c78:	f7ff fc0c 	bl	8004494 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	0018      	movs	r0, r3
 8004c80:	46bd      	mov	sp, r7
 8004c82:	b016      	add	sp, #88	@ 0x58
 8004c84:	bdb0      	pop	{r4, r5, r7, pc}
 8004c86:	46c0      	nop			@ (mov r8, r8)
 8004c88:	00000406 	.word	0x00000406
 8004c8c:	00000402 	.word	0x00000402

08004c90 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004c90:	b590      	push	{r4, r7, lr}
 8004c92:	b089      	sub	sp, #36	@ 0x24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	1dbb      	adds	r3, r7, #6
 8004c9c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c9e:	1dbb      	adds	r3, r7, #6
 8004ca0:	881a      	ldrh	r2, [r3, #0]
 8004ca2:	2380      	movs	r3, #128	@ 0x80
 8004ca4:	01db      	lsls	r3, r3, #7
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	d100      	bne.n	8004cac <HAL_PCD_EP_DB_Receive+0x1c>
 8004caa:	e07d      	b.n	8004da8 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2250      	movs	r2, #80	@ 0x50
 8004cb2:	5a9b      	ldrh	r3, [r3, r2]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	001a      	movs	r2, r3
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	18d2      	adds	r2, r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	18d3      	adds	r3, r2, r3
 8004cc6:	4a7a      	ldr	r2, [pc, #488]	@ (8004eb0 <HAL_PCD_EP_DB_Receive+0x220>)
 8004cc8:	4694      	mov	ip, r2
 8004cca:	4463      	add	r3, ip
 8004ccc:	881a      	ldrh	r2, [r3, #0]
 8004cce:	211a      	movs	r1, #26
 8004cd0:	187b      	adds	r3, r7, r1
 8004cd2:	0592      	lsls	r2, r2, #22
 8004cd4:	0d92      	lsrs	r2, r2, #22
 8004cd6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	699a      	ldr	r2, [r3, #24]
 8004cdc:	187b      	adds	r3, r7, r1
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d307      	bcc.n	8004cf4 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	699a      	ldr	r2, [r3, #24]
 8004ce8:	187b      	adds	r3, r7, r1
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	1ad2      	subs	r2, r2, r3
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	619a      	str	r2, [r3, #24]
 8004cf2:	e002      	b.n	8004cfa <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d121      	bne.n	8004d46 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	001a      	movs	r2, r3
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	18d3      	adds	r3, r2, r3
 8004d10:	881b      	ldrh	r3, [r3, #0]
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	2018      	movs	r0, #24
 8004d16:	183b      	adds	r3, r7, r0
 8004d18:	4966      	ldr	r1, [pc, #408]	@ (8004eb4 <HAL_PCD_EP_DB_Receive+0x224>)
 8004d1a:	400a      	ands	r2, r1
 8004d1c:	801a      	strh	r2, [r3, #0]
 8004d1e:	183b      	adds	r3, r7, r0
 8004d20:	183a      	adds	r2, r7, r0
 8004d22:	8812      	ldrh	r2, [r2, #0]
 8004d24:	2180      	movs	r1, #128	@ 0x80
 8004d26:	0189      	lsls	r1, r1, #6
 8004d28:	404a      	eors	r2, r1
 8004d2a:	801a      	strh	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	001a      	movs	r2, r3
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	18d3      	adds	r3, r2, r3
 8004d3a:	183a      	adds	r2, r7, r0
 8004d3c:	8812      	ldrh	r2, [r2, #0]
 8004d3e:	495e      	ldr	r1, [pc, #376]	@ (8004eb8 <HAL_PCD_EP_DB_Receive+0x228>)
 8004d40:	430a      	orrs	r2, r1
 8004d42:	b292      	uxth	r2, r2
 8004d44:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004d46:	1dbb      	adds	r3, r7, #6
 8004d48:	881b      	ldrh	r3, [r3, #0]
 8004d4a:	2240      	movs	r2, #64	@ 0x40
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	d01a      	beq.n	8004d86 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	001a      	movs	r2, r3
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	18d3      	adds	r3, r2, r3
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	2016      	movs	r0, #22
 8004d64:	183b      	adds	r3, r7, r0
 8004d66:	4955      	ldr	r1, [pc, #340]	@ (8004ebc <HAL_PCD_EP_DB_Receive+0x22c>)
 8004d68:	400a      	ands	r2, r1
 8004d6a:	801a      	strh	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	001a      	movs	r2, r3
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	18d3      	adds	r3, r2, r3
 8004d7a:	183a      	adds	r2, r7, r0
 8004d7c:	8812      	ldrh	r2, [r2, #0]
 8004d7e:	4950      	ldr	r1, [pc, #320]	@ (8004ec0 <HAL_PCD_EP_DB_Receive+0x230>)
 8004d80:	430a      	orrs	r2, r1
 8004d82:	b292      	uxth	r2, r2
 8004d84:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8004d86:	241a      	movs	r4, #26
 8004d88:	193b      	adds	r3, r7, r4
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d100      	bne.n	8004d92 <HAL_PCD_EP_DB_Receive+0x102>
 8004d90:	e086      	b.n	8004ea0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6818      	ldr	r0, [r3, #0]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	6959      	ldr	r1, [r3, #20]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	891a      	ldrh	r2, [r3, #8]
 8004d9e:	193b      	adds	r3, r7, r4
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	f004 fb23 	bl	80093ec <USB_ReadPMA>
 8004da6:	e07b      	b.n	8004ea0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2250      	movs	r2, #80	@ 0x50
 8004dae:	5a9b      	ldrh	r3, [r3, r2]
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	001a      	movs	r2, r3
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	18d2      	adds	r2, r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	18d3      	adds	r3, r2, r3
 8004dc2:	4a40      	ldr	r2, [pc, #256]	@ (8004ec4 <HAL_PCD_EP_DB_Receive+0x234>)
 8004dc4:	4694      	mov	ip, r2
 8004dc6:	4463      	add	r3, ip
 8004dc8:	881a      	ldrh	r2, [r3, #0]
 8004dca:	211a      	movs	r1, #26
 8004dcc:	187b      	adds	r3, r7, r1
 8004dce:	0592      	lsls	r2, r2, #22
 8004dd0:	0d92      	lsrs	r2, r2, #22
 8004dd2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	699a      	ldr	r2, [r3, #24]
 8004dd8:	187b      	adds	r3, r7, r1
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d307      	bcc.n	8004df0 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	699a      	ldr	r2, [r3, #24]
 8004de4:	187b      	adds	r3, r7, r1
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	1ad2      	subs	r2, r2, r3
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	619a      	str	r2, [r3, #24]
 8004dee:	e002      	b.n	8004df6 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2200      	movs	r2, #0
 8004df4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d121      	bne.n	8004e42 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	001a      	movs	r2, r3
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	18d3      	adds	r3, r2, r3
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	201e      	movs	r0, #30
 8004e12:	183b      	adds	r3, r7, r0
 8004e14:	4927      	ldr	r1, [pc, #156]	@ (8004eb4 <HAL_PCD_EP_DB_Receive+0x224>)
 8004e16:	400a      	ands	r2, r1
 8004e18:	801a      	strh	r2, [r3, #0]
 8004e1a:	183b      	adds	r3, r7, r0
 8004e1c:	183a      	adds	r2, r7, r0
 8004e1e:	8812      	ldrh	r2, [r2, #0]
 8004e20:	2180      	movs	r1, #128	@ 0x80
 8004e22:	0189      	lsls	r1, r1, #6
 8004e24:	404a      	eors	r2, r1
 8004e26:	801a      	strh	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	001a      	movs	r2, r3
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	18d3      	adds	r3, r2, r3
 8004e36:	183a      	adds	r2, r7, r0
 8004e38:	8812      	ldrh	r2, [r2, #0]
 8004e3a:	491f      	ldr	r1, [pc, #124]	@ (8004eb8 <HAL_PCD_EP_DB_Receive+0x228>)
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	b292      	uxth	r2, r2
 8004e40:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004e42:	1dbb      	adds	r3, r7, #6
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	2240      	movs	r2, #64	@ 0x40
 8004e48:	4013      	ands	r3, r2
 8004e4a:	d11a      	bne.n	8004e82 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	001a      	movs	r2, r3
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	18d3      	adds	r3, r2, r3
 8004e5a:	881b      	ldrh	r3, [r3, #0]
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	201c      	movs	r0, #28
 8004e60:	183b      	adds	r3, r7, r0
 8004e62:	4916      	ldr	r1, [pc, #88]	@ (8004ebc <HAL_PCD_EP_DB_Receive+0x22c>)
 8004e64:	400a      	ands	r2, r1
 8004e66:	801a      	strh	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	001a      	movs	r2, r3
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	18d3      	adds	r3, r2, r3
 8004e76:	183a      	adds	r2, r7, r0
 8004e78:	8812      	ldrh	r2, [r2, #0]
 8004e7a:	4911      	ldr	r1, [pc, #68]	@ (8004ec0 <HAL_PCD_EP_DB_Receive+0x230>)
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	b292      	uxth	r2, r2
 8004e80:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8004e82:	241a      	movs	r4, #26
 8004e84:	193b      	adds	r3, r7, r4
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d009      	beq.n	8004ea0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6818      	ldr	r0, [r3, #0]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	6959      	ldr	r1, [r3, #20]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	895a      	ldrh	r2, [r3, #10]
 8004e98:	193b      	adds	r3, r7, r4
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	f004 faa6 	bl	80093ec <USB_ReadPMA>
    }
  }

  return count;
 8004ea0:	231a      	movs	r3, #26
 8004ea2:	18fb      	adds	r3, r7, r3
 8004ea4:	881b      	ldrh	r3, [r3, #0]
}
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	b009      	add	sp, #36	@ 0x24
 8004eac:	bd90      	pop	{r4, r7, pc}
 8004eae:	46c0      	nop			@ (mov r8, r8)
 8004eb0:	00000402 	.word	0x00000402
 8004eb4:	ffffbf8f 	.word	0xffffbf8f
 8004eb8:	ffff8080 	.word	0xffff8080
 8004ebc:	ffff8f8f 	.word	0xffff8f8f
 8004ec0:	ffff80c0 	.word	0xffff80c0
 8004ec4:	00000406 	.word	0x00000406

08004ec8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b0a4      	sub	sp, #144	@ 0x90
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	1dbb      	adds	r3, r7, #6
 8004ed4:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004ed6:	1dbb      	adds	r3, r7, #6
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	2240      	movs	r2, #64	@ 0x40
 8004edc:	4013      	ands	r3, r2
 8004ede:	d100      	bne.n	8004ee2 <HAL_PCD_EP_DB_Transmit+0x1a>
 8004ee0:	e1e4      	b.n	80052ac <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2250      	movs	r2, #80	@ 0x50
 8004ee8:	5a9b      	ldrh	r3, [r3, r2]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	001a      	movs	r2, r3
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	18d2      	adds	r2, r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	18d3      	adds	r3, r2, r3
 8004efc:	4ad0      	ldr	r2, [pc, #832]	@ (8005240 <HAL_PCD_EP_DB_Transmit+0x378>)
 8004efe:	4694      	mov	ip, r2
 8004f00:	4463      	add	r3, ip
 8004f02:	881a      	ldrh	r2, [r3, #0]
 8004f04:	2188      	movs	r1, #136	@ 0x88
 8004f06:	187b      	adds	r3, r7, r1
 8004f08:	0592      	lsls	r2, r2, #22
 8004f0a:	0d92      	lsrs	r2, r2, #22
 8004f0c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	699a      	ldr	r2, [r3, #24]
 8004f12:	187b      	adds	r3, r7, r1
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d907      	bls.n	8004f2a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	699a      	ldr	r2, [r3, #24]
 8004f1e:	187b      	adds	r3, r7, r1
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	1ad2      	subs	r2, r2, r3
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	619a      	str	r2, [r3, #24]
 8004f28:	e002      	b.n	8004f30 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d000      	beq.n	8004f3a <HAL_PCD_EP_DB_Transmit+0x72>
 8004f38:	e0b5      	b.n	80050a6 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	785b      	ldrb	r3, [r3, #1]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d125      	bne.n	8004f8e <HAL_PCD_EP_DB_Transmit+0xc6>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2250      	movs	r2, #80	@ 0x50
 8004f4e:	5a9b      	ldrh	r3, [r3, r2]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	001a      	movs	r2, r3
 8004f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f56:	189b      	adds	r3, r3, r2
 8004f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	00da      	lsls	r2, r3, #3
 8004f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f62:	18d3      	adds	r3, r2, r3
 8004f64:	4ab6      	ldr	r2, [pc, #728]	@ (8005240 <HAL_PCD_EP_DB_Transmit+0x378>)
 8004f66:	4694      	mov	ip, r2
 8004f68:	4463      	add	r3, ip
 8004f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	059b      	lsls	r3, r3, #22
 8004f74:	0d9b      	lsrs	r3, r3, #22
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7a:	801a      	strh	r2, [r3, #0]
 8004f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	4ab0      	ldr	r2, [pc, #704]	@ (8005244 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8a:	801a      	strh	r2, [r3, #0]
 8004f8c:	e01b      	b.n	8004fc6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	785b      	ldrb	r3, [r3, #1]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d117      	bne.n	8004fc6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2250      	movs	r2, #80	@ 0x50
 8004fa2:	5a9b      	ldrh	r3, [r3, r2]
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	001a      	movs	r2, r3
 8004fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004faa:	189b      	adds	r3, r3, r2
 8004fac:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	00da      	lsls	r2, r3, #3
 8004fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fb6:	18d3      	adds	r3, r2, r3
 8004fb8:	4aa1      	ldr	r2, [pc, #644]	@ (8005240 <HAL_PCD_EP_DB_Transmit+0x378>)
 8004fba:	4694      	mov	ip, r2
 8004fbc:	4463      	add	r3, ip
 8004fbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	785b      	ldrb	r3, [r3, #1]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d125      	bne.n	8005020 <HAL_PCD_EP_DB_Transmit+0x158>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	61fb      	str	r3, [r7, #28]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2250      	movs	r2, #80	@ 0x50
 8004fe0:	5a9b      	ldrh	r3, [r3, r2]
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	001a      	movs	r2, r3
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	189b      	adds	r3, r3, r2
 8004fea:	61fb      	str	r3, [r7, #28]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	00da      	lsls	r2, r3, #3
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	18d3      	adds	r3, r2, r3
 8004ff6:	4a94      	ldr	r2, [pc, #592]	@ (8005248 <HAL_PCD_EP_DB_Transmit+0x380>)
 8004ff8:	4694      	mov	ip, r2
 8004ffa:	4463      	add	r3, ip
 8004ffc:	61bb      	str	r3, [r7, #24]
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	b29b      	uxth	r3, r3
 8005004:	059b      	lsls	r3, r3, #22
 8005006:	0d9b      	lsrs	r3, r3, #22
 8005008:	b29a      	uxth	r2, r3
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	801a      	strh	r2, [r3, #0]
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	b29b      	uxth	r3, r3
 8005014:	4a8b      	ldr	r2, [pc, #556]	@ (8005244 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005016:	4313      	orrs	r3, r2
 8005018:	b29a      	uxth	r2, r3
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	801a      	strh	r2, [r3, #0]
 800501e:	e018      	b.n	8005052 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	785b      	ldrb	r3, [r3, #1]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d114      	bne.n	8005052 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2250      	movs	r2, #80	@ 0x50
 800502e:	5a9b      	ldrh	r3, [r3, r2]
 8005030:	b29b      	uxth	r3, r3
 8005032:	001a      	movs	r2, r3
 8005034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005036:	189b      	adds	r3, r3, r2
 8005038:	627b      	str	r3, [r7, #36]	@ 0x24
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	00da      	lsls	r2, r3, #3
 8005040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005042:	18d3      	adds	r3, r2, r3
 8005044:	4a80      	ldr	r2, [pc, #512]	@ (8005248 <HAL_PCD_EP_DB_Transmit+0x380>)
 8005046:	4694      	mov	ip, r2
 8005048:	4463      	add	r3, ip
 800504a:	623b      	str	r3, [r7, #32]
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	2200      	movs	r2, #0
 8005050:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	781a      	ldrb	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	0011      	movs	r1, r2
 800505a:	0018      	movs	r0, r3
 800505c:	f006 f9a2 	bl	800b3a4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005060:	1dbb      	adds	r3, r7, #6
 8005062:	881a      	ldrh	r2, [r3, #0]
 8005064:	2380      	movs	r3, #128	@ 0x80
 8005066:	01db      	lsls	r3, r3, #7
 8005068:	4013      	ands	r3, r2
 800506a:	d100      	bne.n	800506e <HAL_PCD_EP_DB_Transmit+0x1a6>
 800506c:	e308      	b.n	8005680 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	001a      	movs	r2, r3
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	18d3      	adds	r3, r2, r3
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	b29a      	uxth	r2, r3
 8005080:	2016      	movs	r0, #22
 8005082:	183b      	adds	r3, r7, r0
 8005084:	4971      	ldr	r1, [pc, #452]	@ (800524c <HAL_PCD_EP_DB_Transmit+0x384>)
 8005086:	400a      	ands	r2, r1
 8005088:	801a      	strh	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	001a      	movs	r2, r3
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	18d3      	adds	r3, r2, r3
 8005098:	183a      	adds	r2, r7, r0
 800509a:	8812      	ldrh	r2, [r2, #0]
 800509c:	496c      	ldr	r1, [pc, #432]	@ (8005250 <HAL_PCD_EP_DB_Transmit+0x388>)
 800509e:	430a      	orrs	r2, r1
 80050a0:	b292      	uxth	r2, r2
 80050a2:	801a      	strh	r2, [r3, #0]
 80050a4:	e2ec      	b.n	8005680 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80050a6:	1dbb      	adds	r3, r7, #6
 80050a8:	881a      	ldrh	r2, [r3, #0]
 80050aa:	2380      	movs	r3, #128	@ 0x80
 80050ac:	01db      	lsls	r3, r3, #7
 80050ae:	4013      	ands	r3, r2
 80050b0:	d01a      	beq.n	80050e8 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	001a      	movs	r2, r3
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	18d3      	adds	r3, r2, r3
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	208a      	movs	r0, #138	@ 0x8a
 80050c6:	183b      	adds	r3, r7, r0
 80050c8:	4960      	ldr	r1, [pc, #384]	@ (800524c <HAL_PCD_EP_DB_Transmit+0x384>)
 80050ca:	400a      	ands	r2, r1
 80050cc:	801a      	strh	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	001a      	movs	r2, r3
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	18d3      	adds	r3, r2, r3
 80050dc:	183a      	adds	r2, r7, r0
 80050de:	8812      	ldrh	r2, [r2, #0]
 80050e0:	495b      	ldr	r1, [pc, #364]	@ (8005250 <HAL_PCD_EP_DB_Transmit+0x388>)
 80050e2:	430a      	orrs	r2, r1
 80050e4:	b292      	uxth	r2, r2
 80050e6:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2224      	movs	r2, #36	@ 0x24
 80050ec:	5c9b      	ldrb	r3, [r3, r2]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d000      	beq.n	80050f4 <HAL_PCD_EP_DB_Transmit+0x22c>
 80050f2:	e2c5      	b.n	8005680 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	695a      	ldr	r2, [r3, #20]
 80050f8:	2188      	movs	r1, #136	@ 0x88
 80050fa:	187b      	adds	r3, r7, r1
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	18d2      	adds	r2, r2, r3
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	69da      	ldr	r2, [r3, #28]
 8005108:	187b      	adds	r3, r7, r1
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	18d2      	adds	r2, r2, r3
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	6a1a      	ldr	r2, [r3, #32]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	429a      	cmp	r2, r3
 800511c:	d30c      	bcc.n	8005138 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	218c      	movs	r1, #140	@ 0x8c
 8005124:	187a      	adds	r2, r7, r1
 8005126:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	6a1a      	ldr	r2, [r3, #32]
 800512c:	187b      	adds	r3, r7, r1
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	1ad2      	subs	r2, r2, r3
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	621a      	str	r2, [r3, #32]
 8005136:	e01a      	b.n	800516e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10a      	bne.n	8005156 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8005140:	2388      	movs	r3, #136	@ 0x88
 8005142:	18fb      	adds	r3, r7, r3
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	228c      	movs	r2, #140	@ 0x8c
 8005148:	18ba      	adds	r2, r7, r2
 800514a:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2224      	movs	r2, #36	@ 0x24
 8005150:	2100      	movs	r1, #0
 8005152:	5499      	strb	r1, [r3, r2]
 8005154:	e00b      	b.n	800516e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2224      	movs	r2, #36	@ 0x24
 800515a:	2100      	movs	r1, #0
 800515c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	228c      	movs	r2, #140	@ 0x8c
 8005164:	18ba      	adds	r2, r7, r2
 8005166:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2200      	movs	r2, #0
 800516c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	785b      	ldrb	r3, [r3, #1]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d000      	beq.n	8005178 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8005176:	e06d      	b.n	8005254 <HAL_PCD_EP_DB_Transmit+0x38c>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2250      	movs	r2, #80	@ 0x50
 8005184:	5a9b      	ldrh	r3, [r3, r2]
 8005186:	b29b      	uxth	r3, r3
 8005188:	001a      	movs	r2, r3
 800518a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800518c:	189b      	adds	r3, r3, r2
 800518e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	00da      	lsls	r2, r3, #3
 8005196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005198:	18d3      	adds	r3, r2, r3
 800519a:	4a29      	ldr	r2, [pc, #164]	@ (8005240 <HAL_PCD_EP_DB_Transmit+0x378>)
 800519c:	4694      	mov	ip, r2
 800519e:	4463      	add	r3, ip
 80051a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	059b      	lsls	r3, r3, #22
 80051aa:	0d9b      	lsrs	r3, r3, #22
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b0:	801a      	strh	r2, [r3, #0]
 80051b2:	238c      	movs	r3, #140	@ 0x8c
 80051b4:	18fb      	adds	r3, r7, r3
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d108      	bne.n	80051ce <HAL_PCD_EP_DB_Transmit+0x306>
 80051bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	4a20      	ldr	r2, [pc, #128]	@ (8005244 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ca:	801a      	strh	r2, [r3, #0]
 80051cc:	e061      	b.n	8005292 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80051ce:	228c      	movs	r2, #140	@ 0x8c
 80051d0:	18bb      	adds	r3, r7, r2
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80051d6:	d817      	bhi.n	8005208 <HAL_PCD_EP_DB_Transmit+0x340>
 80051d8:	18bb      	adds	r3, r7, r2
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	085b      	lsrs	r3, r3, #1
 80051de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051e0:	18bb      	adds	r3, r7, r2
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2201      	movs	r2, #1
 80051e6:	4013      	ands	r3, r2
 80051e8:	d002      	beq.n	80051f0 <HAL_PCD_EP_DB_Transmit+0x328>
 80051ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051ec:	3301      	adds	r3, #1
 80051ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	029b      	lsls	r3, r3, #10
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	4313      	orrs	r3, r2
 8005200:	b29a      	uxth	r2, r3
 8005202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005204:	801a      	strh	r2, [r3, #0]
 8005206:	e044      	b.n	8005292 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005208:	228c      	movs	r2, #140	@ 0x8c
 800520a:	18bb      	adds	r3, r7, r2
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	095b      	lsrs	r3, r3, #5
 8005210:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005212:	18bb      	adds	r3, r7, r2
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	221f      	movs	r2, #31
 8005218:	4013      	ands	r3, r2
 800521a:	d102      	bne.n	8005222 <HAL_PCD_EP_DB_Transmit+0x35a>
 800521c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800521e:	3b01      	subs	r3, #1
 8005220:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	b29a      	uxth	r2, r3
 8005228:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800522a:	b29b      	uxth	r3, r3
 800522c:	029b      	lsls	r3, r3, #10
 800522e:	b29b      	uxth	r3, r3
 8005230:	4313      	orrs	r3, r2
 8005232:	b29b      	uxth	r3, r3
 8005234:	4a03      	ldr	r2, [pc, #12]	@ (8005244 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005236:	4313      	orrs	r3, r2
 8005238:	b29a      	uxth	r2, r3
 800523a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800523c:	801a      	strh	r2, [r3, #0]
 800523e:	e028      	b.n	8005292 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005240:	00000402 	.word	0x00000402
 8005244:	ffff8000 	.word	0xffff8000
 8005248:	00000406 	.word	0x00000406
 800524c:	ffff8f8f 	.word	0xffff8f8f
 8005250:	ffffc080 	.word	0xffffc080
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	785b      	ldrb	r3, [r3, #1]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d11a      	bne.n	8005292 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	647b      	str	r3, [r7, #68]	@ 0x44
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2250      	movs	r2, #80	@ 0x50
 8005268:	5a9b      	ldrh	r3, [r3, r2]
 800526a:	b29b      	uxth	r3, r3
 800526c:	001a      	movs	r2, r3
 800526e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005270:	189b      	adds	r3, r3, r2
 8005272:	647b      	str	r3, [r7, #68]	@ 0x44
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	00da      	lsls	r2, r3, #3
 800527a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800527c:	18d3      	adds	r3, r2, r3
 800527e:	4ad9      	ldr	r2, [pc, #868]	@ (80055e4 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005280:	4694      	mov	ip, r2
 8005282:	4463      	add	r3, ip
 8005284:	643b      	str	r3, [r7, #64]	@ 0x40
 8005286:	238c      	movs	r3, #140	@ 0x8c
 8005288:	18fb      	adds	r3, r7, r3
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	b29a      	uxth	r2, r3
 800528e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005290:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6818      	ldr	r0, [r3, #0]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	6959      	ldr	r1, [r3, #20]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	891a      	ldrh	r2, [r3, #8]
 800529e:	238c      	movs	r3, #140	@ 0x8c
 80052a0:	18fb      	adds	r3, r7, r3
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	f004 f857 	bl	8009358 <USB_WritePMA>
 80052aa:	e1e9      	b.n	8005680 <HAL_PCD_EP_DB_Transmit+0x7b8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2250      	movs	r2, #80	@ 0x50
 80052b2:	5a9b      	ldrh	r3, [r3, r2]
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	001a      	movs	r2, r3
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	18d2      	adds	r2, r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	18d3      	adds	r3, r2, r3
 80052c6:	4ac8      	ldr	r2, [pc, #800]	@ (80055e8 <HAL_PCD_EP_DB_Transmit+0x720>)
 80052c8:	4694      	mov	ip, r2
 80052ca:	4463      	add	r3, ip
 80052cc:	881a      	ldrh	r2, [r3, #0]
 80052ce:	2188      	movs	r1, #136	@ 0x88
 80052d0:	187b      	adds	r3, r7, r1
 80052d2:	0592      	lsls	r2, r2, #22
 80052d4:	0d92      	lsrs	r2, r2, #22
 80052d6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	699a      	ldr	r2, [r3, #24]
 80052dc:	187b      	adds	r3, r7, r1
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d307      	bcc.n	80052f4 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	699a      	ldr	r2, [r3, #24]
 80052e8:	187b      	adds	r3, r7, r1
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	1ad2      	subs	r2, r2, r3
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	619a      	str	r2, [r3, #24]
 80052f2:	e002      	b.n	80052fa <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2200      	movs	r2, #0
 80052f8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d000      	beq.n	8005304 <HAL_PCD_EP_DB_Transmit+0x43c>
 8005302:	e0bb      	b.n	800547c <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	785b      	ldrb	r3, [r3, #1]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d125      	bne.n	8005358 <HAL_PCD_EP_DB_Transmit+0x490>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2250      	movs	r2, #80	@ 0x50
 8005318:	5a9b      	ldrh	r3, [r3, r2]
 800531a:	b29b      	uxth	r3, r3
 800531c:	001a      	movs	r2, r3
 800531e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005320:	189b      	adds	r3, r3, r2
 8005322:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	00da      	lsls	r2, r3, #3
 800532a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800532c:	18d3      	adds	r3, r2, r3
 800532e:	4aad      	ldr	r2, [pc, #692]	@ (80055e4 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005330:	4694      	mov	ip, r2
 8005332:	4463      	add	r3, ip
 8005334:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005336:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005338:	881b      	ldrh	r3, [r3, #0]
 800533a:	b29b      	uxth	r3, r3
 800533c:	059b      	lsls	r3, r3, #22
 800533e:	0d9b      	lsrs	r3, r3, #22
 8005340:	b29a      	uxth	r2, r3
 8005342:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005344:	801a      	strh	r2, [r3, #0]
 8005346:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	b29b      	uxth	r3, r3
 800534c:	4aa7      	ldr	r2, [pc, #668]	@ (80055ec <HAL_PCD_EP_DB_Transmit+0x724>)
 800534e:	4313      	orrs	r3, r2
 8005350:	b29a      	uxth	r2, r3
 8005352:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005354:	801a      	strh	r2, [r3, #0]
 8005356:	e01b      	b.n	8005390 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	785b      	ldrb	r3, [r3, #1]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d117      	bne.n	8005390 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	667b      	str	r3, [r7, #100]	@ 0x64
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2250      	movs	r2, #80	@ 0x50
 800536c:	5a9b      	ldrh	r3, [r3, r2]
 800536e:	b29b      	uxth	r3, r3
 8005370:	001a      	movs	r2, r3
 8005372:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005374:	189b      	adds	r3, r3, r2
 8005376:	667b      	str	r3, [r7, #100]	@ 0x64
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	00da      	lsls	r2, r3, #3
 800537e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005380:	18d3      	adds	r3, r2, r3
 8005382:	4a98      	ldr	r2, [pc, #608]	@ (80055e4 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005384:	4694      	mov	ip, r2
 8005386:	4463      	add	r3, ip
 8005388:	663b      	str	r3, [r7, #96]	@ 0x60
 800538a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800538c:	2200      	movs	r2, #0
 800538e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	677b      	str	r3, [r7, #116]	@ 0x74
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	785b      	ldrb	r3, [r3, #1]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d12b      	bne.n	80053f6 <HAL_PCD_EP_DB_Transmit+0x52e>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2250      	movs	r2, #80	@ 0x50
 80053aa:	5a9b      	ldrh	r3, [r3, r2]
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	001a      	movs	r2, r3
 80053b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053b2:	189b      	adds	r3, r3, r2
 80053b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	00da      	lsls	r2, r3, #3
 80053bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053be:	18d3      	adds	r3, r2, r3
 80053c0:	4a89      	ldr	r2, [pc, #548]	@ (80055e8 <HAL_PCD_EP_DB_Transmit+0x720>)
 80053c2:	4694      	mov	ip, r2
 80053c4:	4463      	add	r3, ip
 80053c6:	2184      	movs	r1, #132	@ 0x84
 80053c8:	187a      	adds	r2, r7, r1
 80053ca:	6013      	str	r3, [r2, #0]
 80053cc:	187b      	adds	r3, r7, r1
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	881b      	ldrh	r3, [r3, #0]
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	059b      	lsls	r3, r3, #22
 80053d6:	0d9b      	lsrs	r3, r3, #22
 80053d8:	b29a      	uxth	r2, r3
 80053da:	187b      	adds	r3, r7, r1
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	801a      	strh	r2, [r3, #0]
 80053e0:	187b      	adds	r3, r7, r1
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	4a80      	ldr	r2, [pc, #512]	@ (80055ec <HAL_PCD_EP_DB_Transmit+0x724>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	187b      	adds	r3, r7, r1
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	801a      	strh	r2, [r3, #0]
 80053f4:	e018      	b.n	8005428 <HAL_PCD_EP_DB_Transmit+0x560>
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	785b      	ldrb	r3, [r3, #1]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d114      	bne.n	8005428 <HAL_PCD_EP_DB_Transmit+0x560>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2250      	movs	r2, #80	@ 0x50
 8005404:	5a9b      	ldrh	r3, [r3, r2]
 8005406:	b29b      	uxth	r3, r3
 8005408:	001a      	movs	r2, r3
 800540a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800540c:	189b      	adds	r3, r3, r2
 800540e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	00da      	lsls	r2, r3, #3
 8005416:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005418:	18d3      	adds	r3, r2, r3
 800541a:	4a73      	ldr	r2, [pc, #460]	@ (80055e8 <HAL_PCD_EP_DB_Transmit+0x720>)
 800541c:	4694      	mov	ip, r2
 800541e:	4463      	add	r3, ip
 8005420:	673b      	str	r3, [r7, #112]	@ 0x70
 8005422:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005424:	2200      	movs	r2, #0
 8005426:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	781a      	ldrb	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	0011      	movs	r1, r2
 8005430:	0018      	movs	r0, r3
 8005432:	f005 ffb7 	bl	800b3a4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005436:	1dbb      	adds	r3, r7, #6
 8005438:	881a      	ldrh	r2, [r3, #0]
 800543a:	2380      	movs	r3, #128	@ 0x80
 800543c:	01db      	lsls	r3, r3, #7
 800543e:	4013      	ands	r3, r2
 8005440:	d000      	beq.n	8005444 <HAL_PCD_EP_DB_Transmit+0x57c>
 8005442:	e11d      	b.n	8005680 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	001a      	movs	r2, r3
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	18d3      	adds	r3, r2, r3
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	b29a      	uxth	r2, r3
 8005456:	2082      	movs	r0, #130	@ 0x82
 8005458:	183b      	adds	r3, r7, r0
 800545a:	4965      	ldr	r1, [pc, #404]	@ (80055f0 <HAL_PCD_EP_DB_Transmit+0x728>)
 800545c:	400a      	ands	r2, r1
 800545e:	801a      	strh	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	001a      	movs	r2, r3
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	18d3      	adds	r3, r2, r3
 800546e:	183a      	adds	r2, r7, r0
 8005470:	8812      	ldrh	r2, [r2, #0]
 8005472:	4960      	ldr	r1, [pc, #384]	@ (80055f4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8005474:	430a      	orrs	r2, r1
 8005476:	b292      	uxth	r2, r2
 8005478:	801a      	strh	r2, [r3, #0]
 800547a:	e101      	b.n	8005680 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800547c:	1dbb      	adds	r3, r7, #6
 800547e:	881a      	ldrh	r2, [r3, #0]
 8005480:	2380      	movs	r3, #128	@ 0x80
 8005482:	01db      	lsls	r3, r3, #7
 8005484:	4013      	ands	r3, r2
 8005486:	d11a      	bne.n	80054be <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	001a      	movs	r2, r3
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	18d3      	adds	r3, r2, r3
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	b29a      	uxth	r2, r3
 800549a:	204e      	movs	r0, #78	@ 0x4e
 800549c:	183b      	adds	r3, r7, r0
 800549e:	4954      	ldr	r1, [pc, #336]	@ (80055f0 <HAL_PCD_EP_DB_Transmit+0x728>)
 80054a0:	400a      	ands	r2, r1
 80054a2:	801a      	strh	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	001a      	movs	r2, r3
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	18d3      	adds	r3, r2, r3
 80054b2:	183a      	adds	r2, r7, r0
 80054b4:	8812      	ldrh	r2, [r2, #0]
 80054b6:	494f      	ldr	r1, [pc, #316]	@ (80055f4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80054b8:	430a      	orrs	r2, r1
 80054ba:	b292      	uxth	r2, r2
 80054bc:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2224      	movs	r2, #36	@ 0x24
 80054c2:	5c9b      	ldrb	r3, [r3, r2]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d000      	beq.n	80054ca <HAL_PCD_EP_DB_Transmit+0x602>
 80054c8:	e0da      	b.n	8005680 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	695a      	ldr	r2, [r3, #20]
 80054ce:	2188      	movs	r1, #136	@ 0x88
 80054d0:	187b      	adds	r3, r7, r1
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	18d2      	adds	r2, r2, r3
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	69da      	ldr	r2, [r3, #28]
 80054de:	187b      	adds	r3, r7, r1
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	18d2      	adds	r2, r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	6a1a      	ldr	r2, [r3, #32]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d30c      	bcc.n	800550e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	218c      	movs	r1, #140	@ 0x8c
 80054fa:	187a      	adds	r2, r7, r1
 80054fc:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	6a1a      	ldr	r2, [r3, #32]
 8005502:	187b      	adds	r3, r7, r1
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	1ad2      	subs	r2, r2, r3
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	621a      	str	r2, [r3, #32]
 800550c:	e01a      	b.n	8005544 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10a      	bne.n	800552c <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8005516:	2388      	movs	r3, #136	@ 0x88
 8005518:	18fb      	adds	r3, r7, r3
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	228c      	movs	r2, #140	@ 0x8c
 800551e:	18ba      	adds	r2, r7, r2
 8005520:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2224      	movs	r2, #36	@ 0x24
 8005526:	2100      	movs	r1, #0
 8005528:	5499      	strb	r1, [r3, r2]
 800552a:	e00b      	b.n	8005544 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	228c      	movs	r2, #140	@ 0x8c
 8005532:	18ba      	adds	r2, r7, r2
 8005534:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2200      	movs	r2, #0
 800553a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2224      	movs	r2, #36	@ 0x24
 8005540:	2100      	movs	r1, #0
 8005542:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	657b      	str	r3, [r7, #84]	@ 0x54
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	785b      	ldrb	r3, [r3, #1]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d000      	beq.n	8005554 <HAL_PCD_EP_DB_Transmit+0x68c>
 8005552:	e06d      	b.n	8005630 <HAL_PCD_EP_DB_Transmit+0x768>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2250      	movs	r2, #80	@ 0x50
 8005560:	5a9b      	ldrh	r3, [r3, r2]
 8005562:	b29b      	uxth	r3, r3
 8005564:	001a      	movs	r2, r3
 8005566:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005568:	189b      	adds	r3, r3, r2
 800556a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	00da      	lsls	r2, r3, #3
 8005572:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005574:	18d3      	adds	r3, r2, r3
 8005576:	4a1c      	ldr	r2, [pc, #112]	@ (80055e8 <HAL_PCD_EP_DB_Transmit+0x720>)
 8005578:	4694      	mov	ip, r2
 800557a:	4463      	add	r3, ip
 800557c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800557e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	b29b      	uxth	r3, r3
 8005584:	059b      	lsls	r3, r3, #22
 8005586:	0d9b      	lsrs	r3, r3, #22
 8005588:	b29a      	uxth	r2, r3
 800558a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800558c:	801a      	strh	r2, [r3, #0]
 800558e:	238c      	movs	r3, #140	@ 0x8c
 8005590:	18fb      	adds	r3, r7, r3
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d108      	bne.n	80055aa <HAL_PCD_EP_DB_Transmit+0x6e2>
 8005598:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	b29b      	uxth	r3, r3
 800559e:	4a13      	ldr	r2, [pc, #76]	@ (80055ec <HAL_PCD_EP_DB_Transmit+0x724>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055a6:	801a      	strh	r2, [r3, #0]
 80055a8:	e05e      	b.n	8005668 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80055aa:	228c      	movs	r2, #140	@ 0x8c
 80055ac:	18bb      	adds	r3, r7, r2
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80055b2:	d821      	bhi.n	80055f8 <HAL_PCD_EP_DB_Transmit+0x730>
 80055b4:	18bb      	adds	r3, r7, r2
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	085b      	lsrs	r3, r3, #1
 80055ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055bc:	18bb      	adds	r3, r7, r2
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2201      	movs	r2, #1
 80055c2:	4013      	ands	r3, r2
 80055c4:	d002      	beq.n	80055cc <HAL_PCD_EP_DB_Transmit+0x704>
 80055c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055c8:	3301      	adds	r3, #1
 80055ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	029b      	lsls	r3, r3, #10
 80055d8:	b29b      	uxth	r3, r3
 80055da:	4313      	orrs	r3, r2
 80055dc:	b29a      	uxth	r2, r3
 80055de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055e0:	801a      	strh	r2, [r3, #0]
 80055e2:	e041      	b.n	8005668 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80055e4:	00000402 	.word	0x00000402
 80055e8:	00000406 	.word	0x00000406
 80055ec:	ffff8000 	.word	0xffff8000
 80055f0:	ffff8f8f 	.word	0xffff8f8f
 80055f4:	ffffc080 	.word	0xffffc080
 80055f8:	228c      	movs	r2, #140	@ 0x8c
 80055fa:	18bb      	adds	r3, r7, r2
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005602:	18bb      	adds	r3, r7, r2
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	221f      	movs	r2, #31
 8005608:	4013      	ands	r3, r2
 800560a:	d102      	bne.n	8005612 <HAL_PCD_EP_DB_Transmit+0x74a>
 800560c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800560e:	3b01      	subs	r3, #1
 8005610:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005612:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	b29a      	uxth	r2, r3
 8005618:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800561a:	b29b      	uxth	r3, r3
 800561c:	029b      	lsls	r3, r3, #10
 800561e:	b29b      	uxth	r3, r3
 8005620:	4313      	orrs	r3, r2
 8005622:	b29b      	uxth	r3, r3
 8005624:	4a2c      	ldr	r2, [pc, #176]	@ (80056d8 <HAL_PCD_EP_DB_Transmit+0x810>)
 8005626:	4313      	orrs	r3, r2
 8005628:	b29a      	uxth	r2, r3
 800562a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800562c:	801a      	strh	r2, [r3, #0]
 800562e:	e01b      	b.n	8005668 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	785b      	ldrb	r3, [r3, #1]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d117      	bne.n	8005668 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2250      	movs	r2, #80	@ 0x50
 800563e:	5a9b      	ldrh	r3, [r3, r2]
 8005640:	b29b      	uxth	r3, r3
 8005642:	001a      	movs	r2, r3
 8005644:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005646:	189b      	adds	r3, r3, r2
 8005648:	657b      	str	r3, [r7, #84]	@ 0x54
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	00da      	lsls	r2, r3, #3
 8005650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005652:	18d3      	adds	r3, r2, r3
 8005654:	4a21      	ldr	r2, [pc, #132]	@ (80056dc <HAL_PCD_EP_DB_Transmit+0x814>)
 8005656:	4694      	mov	ip, r2
 8005658:	4463      	add	r3, ip
 800565a:	653b      	str	r3, [r7, #80]	@ 0x50
 800565c:	238c      	movs	r3, #140	@ 0x8c
 800565e:	18fb      	adds	r3, r7, r3
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	b29a      	uxth	r2, r3
 8005664:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005666:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6818      	ldr	r0, [r3, #0]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	6959      	ldr	r1, [r3, #20]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	895a      	ldrh	r2, [r3, #10]
 8005674:	238c      	movs	r3, #140	@ 0x8c
 8005676:	18fb      	adds	r3, r7, r3
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	b29b      	uxth	r3, r3
 800567c:	f003 fe6c 	bl	8009358 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	001a      	movs	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	18d3      	adds	r3, r2, r3
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	b29a      	uxth	r2, r3
 8005692:	2014      	movs	r0, #20
 8005694:	183b      	adds	r3, r7, r0
 8005696:	4912      	ldr	r1, [pc, #72]	@ (80056e0 <HAL_PCD_EP_DB_Transmit+0x818>)
 8005698:	400a      	ands	r2, r1
 800569a:	801a      	strh	r2, [r3, #0]
 800569c:	183b      	adds	r3, r7, r0
 800569e:	183a      	adds	r2, r7, r0
 80056a0:	8812      	ldrh	r2, [r2, #0]
 80056a2:	2110      	movs	r1, #16
 80056a4:	404a      	eors	r2, r1
 80056a6:	801a      	strh	r2, [r3, #0]
 80056a8:	183b      	adds	r3, r7, r0
 80056aa:	183a      	adds	r2, r7, r0
 80056ac:	8812      	ldrh	r2, [r2, #0]
 80056ae:	2120      	movs	r1, #32
 80056b0:	404a      	eors	r2, r1
 80056b2:	801a      	strh	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	001a      	movs	r2, r3
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	18d3      	adds	r3, r2, r3
 80056c2:	183a      	adds	r2, r7, r0
 80056c4:	8812      	ldrh	r2, [r2, #0]
 80056c6:	4907      	ldr	r1, [pc, #28]	@ (80056e4 <HAL_PCD_EP_DB_Transmit+0x81c>)
 80056c8:	430a      	orrs	r2, r1
 80056ca:	b292      	uxth	r2, r2
 80056cc:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	0018      	movs	r0, r3
 80056d2:	46bd      	mov	sp, r7
 80056d4:	b024      	add	sp, #144	@ 0x90
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	ffff8000 	.word	0xffff8000
 80056dc:	00000406 	.word	0x00000406
 80056e0:	ffff8fbf 	.word	0xffff8fbf
 80056e4:	ffff8080 	.word	0xffff8080

080056e8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80056e8:	b590      	push	{r4, r7, lr}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	0008      	movs	r0, r1
 80056f2:	0011      	movs	r1, r2
 80056f4:	607b      	str	r3, [r7, #4]
 80056f6:	240a      	movs	r4, #10
 80056f8:	193b      	adds	r3, r7, r4
 80056fa:	1c02      	adds	r2, r0, #0
 80056fc:	801a      	strh	r2, [r3, #0]
 80056fe:	2308      	movs	r3, #8
 8005700:	18fb      	adds	r3, r7, r3
 8005702:	1c0a      	adds	r2, r1, #0
 8005704:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005706:	0021      	movs	r1, r4
 8005708:	187b      	adds	r3, r7, r1
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	2280      	movs	r2, #128	@ 0x80
 800570e:	4013      	ands	r3, r2
 8005710:	b29b      	uxth	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00c      	beq.n	8005730 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005716:	187b      	adds	r3, r7, r1
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	2207      	movs	r2, #7
 800571c:	401a      	ands	r2, r3
 800571e:	0013      	movs	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	189b      	adds	r3, r3, r2
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	3310      	adds	r3, #16
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	18d3      	adds	r3, r2, r3
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	e00b      	b.n	8005748 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005730:	230a      	movs	r3, #10
 8005732:	18fb      	adds	r3, r7, r3
 8005734:	881a      	ldrh	r2, [r3, #0]
 8005736:	0013      	movs	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	189b      	adds	r3, r3, r2
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	3351      	adds	r3, #81	@ 0x51
 8005740:	33ff      	adds	r3, #255	@ 0xff
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	18d3      	adds	r3, r2, r3
 8005746:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005748:	2308      	movs	r3, #8
 800574a:	18fb      	adds	r3, r7, r3
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d107      	bne.n	8005762 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2200      	movs	r2, #0
 8005756:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	b29a      	uxth	r2, r3
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	80da      	strh	r2, [r3, #6]
 8005760:	e00b      	b.n	800577a <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2201      	movs	r2, #1
 8005766:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	b29a      	uxth	r2, r3
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	0c1b      	lsrs	r3, r3, #16
 8005774:	b29a      	uxth	r2, r3
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	0018      	movs	r0, r3
 800577e:	46bd      	mov	sp, r7
 8005780:	b007      	add	sp, #28
 8005782:	bd90      	pop	{r4, r7, pc}

08005784 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	23b4      	movs	r3, #180	@ 0xb4
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	2101      	movs	r1, #1
 800579a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	23b2      	movs	r3, #178	@ 0xb2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	2100      	movs	r1, #0
 80057a4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2254      	movs	r2, #84	@ 0x54
 80057aa:	5a9b      	ldrh	r3, [r3, r2]
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	2201      	movs	r2, #1
 80057b0:	4313      	orrs	r3, r2
 80057b2:	b299      	uxth	r1, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2254      	movs	r2, #84	@ 0x54
 80057b8:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2254      	movs	r2, #84	@ 0x54
 80057be:	5a9b      	ldrh	r3, [r3, r2]
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2202      	movs	r2, #2
 80057c4:	4313      	orrs	r3, r2
 80057c6:	b299      	uxth	r1, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2254      	movs	r2, #84	@ 0x54
 80057cc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	0018      	movs	r0, r3
 80057d2:	46bd      	mov	sp, r7
 80057d4:	b004      	add	sp, #16
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	000a      	movs	r2, r1
 80057e2:	1cfb      	adds	r3, r7, #3
 80057e4:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80057e6:	46c0      	nop			@ (mov r8, r8)
 80057e8:	46bd      	mov	sp, r7
 80057ea:	b002      	add	sp, #8
 80057ec:	bd80      	pop	{r7, pc}
	...

080057f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b088      	sub	sp, #32
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d102      	bne.n	8005804 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	f000 fb76 	bl	8005ef0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2201      	movs	r2, #1
 800580a:	4013      	ands	r3, r2
 800580c:	d100      	bne.n	8005810 <HAL_RCC_OscConfig+0x20>
 800580e:	e08e      	b.n	800592e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005810:	4bc5      	ldr	r3, [pc, #788]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	220c      	movs	r2, #12
 8005816:	4013      	ands	r3, r2
 8005818:	2b04      	cmp	r3, #4
 800581a:	d00e      	beq.n	800583a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800581c:	4bc2      	ldr	r3, [pc, #776]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	220c      	movs	r2, #12
 8005822:	4013      	ands	r3, r2
 8005824:	2b08      	cmp	r3, #8
 8005826:	d117      	bne.n	8005858 <HAL_RCC_OscConfig+0x68>
 8005828:	4bbf      	ldr	r3, [pc, #764]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	23c0      	movs	r3, #192	@ 0xc0
 800582e:	025b      	lsls	r3, r3, #9
 8005830:	401a      	ands	r2, r3
 8005832:	2380      	movs	r3, #128	@ 0x80
 8005834:	025b      	lsls	r3, r3, #9
 8005836:	429a      	cmp	r2, r3
 8005838:	d10e      	bne.n	8005858 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800583a:	4bbb      	ldr	r3, [pc, #748]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	2380      	movs	r3, #128	@ 0x80
 8005840:	029b      	lsls	r3, r3, #10
 8005842:	4013      	ands	r3, r2
 8005844:	d100      	bne.n	8005848 <HAL_RCC_OscConfig+0x58>
 8005846:	e071      	b.n	800592c <HAL_RCC_OscConfig+0x13c>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d000      	beq.n	8005852 <HAL_RCC_OscConfig+0x62>
 8005850:	e06c      	b.n	800592c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	f000 fb4c 	bl	8005ef0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d107      	bne.n	8005870 <HAL_RCC_OscConfig+0x80>
 8005860:	4bb1      	ldr	r3, [pc, #708]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	4bb0      	ldr	r3, [pc, #704]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 8005866:	2180      	movs	r1, #128	@ 0x80
 8005868:	0249      	lsls	r1, r1, #9
 800586a:	430a      	orrs	r2, r1
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	e02f      	b.n	80058d0 <HAL_RCC_OscConfig+0xe0>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10c      	bne.n	8005892 <HAL_RCC_OscConfig+0xa2>
 8005878:	4bab      	ldr	r3, [pc, #684]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	4baa      	ldr	r3, [pc, #680]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 800587e:	49ab      	ldr	r1, [pc, #684]	@ (8005b2c <HAL_RCC_OscConfig+0x33c>)
 8005880:	400a      	ands	r2, r1
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	4ba8      	ldr	r3, [pc, #672]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	4ba7      	ldr	r3, [pc, #668]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 800588a:	49a9      	ldr	r1, [pc, #676]	@ (8005b30 <HAL_RCC_OscConfig+0x340>)
 800588c:	400a      	ands	r2, r1
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	e01e      	b.n	80058d0 <HAL_RCC_OscConfig+0xe0>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2b05      	cmp	r3, #5
 8005898:	d10e      	bne.n	80058b8 <HAL_RCC_OscConfig+0xc8>
 800589a:	4ba3      	ldr	r3, [pc, #652]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	4ba2      	ldr	r3, [pc, #648]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 80058a0:	2180      	movs	r1, #128	@ 0x80
 80058a2:	02c9      	lsls	r1, r1, #11
 80058a4:	430a      	orrs	r2, r1
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	4b9f      	ldr	r3, [pc, #636]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	4b9e      	ldr	r3, [pc, #632]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 80058ae:	2180      	movs	r1, #128	@ 0x80
 80058b0:	0249      	lsls	r1, r1, #9
 80058b2:	430a      	orrs	r2, r1
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	e00b      	b.n	80058d0 <HAL_RCC_OscConfig+0xe0>
 80058b8:	4b9b      	ldr	r3, [pc, #620]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	4b9a      	ldr	r3, [pc, #616]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 80058be:	499b      	ldr	r1, [pc, #620]	@ (8005b2c <HAL_RCC_OscConfig+0x33c>)
 80058c0:	400a      	ands	r2, r1
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	4b98      	ldr	r3, [pc, #608]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	4b97      	ldr	r3, [pc, #604]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 80058ca:	4999      	ldr	r1, [pc, #612]	@ (8005b30 <HAL_RCC_OscConfig+0x340>)
 80058cc:	400a      	ands	r2, r1
 80058ce:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d014      	beq.n	8005902 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058d8:	f7fd fbee 	bl	80030b8 <HAL_GetTick>
 80058dc:	0003      	movs	r3, r0
 80058de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058e0:	e008      	b.n	80058f4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058e2:	f7fd fbe9 	bl	80030b8 <HAL_GetTick>
 80058e6:	0002      	movs	r2, r0
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b64      	cmp	r3, #100	@ 0x64
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e2fd      	b.n	8005ef0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058f4:	4b8c      	ldr	r3, [pc, #560]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	2380      	movs	r3, #128	@ 0x80
 80058fa:	029b      	lsls	r3, r3, #10
 80058fc:	4013      	ands	r3, r2
 80058fe:	d0f0      	beq.n	80058e2 <HAL_RCC_OscConfig+0xf2>
 8005900:	e015      	b.n	800592e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005902:	f7fd fbd9 	bl	80030b8 <HAL_GetTick>
 8005906:	0003      	movs	r3, r0
 8005908:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800590a:	e008      	b.n	800591e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800590c:	f7fd fbd4 	bl	80030b8 <HAL_GetTick>
 8005910:	0002      	movs	r2, r0
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b64      	cmp	r3, #100	@ 0x64
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e2e8      	b.n	8005ef0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800591e:	4b82      	ldr	r3, [pc, #520]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	2380      	movs	r3, #128	@ 0x80
 8005924:	029b      	lsls	r3, r3, #10
 8005926:	4013      	ands	r3, r2
 8005928:	d1f0      	bne.n	800590c <HAL_RCC_OscConfig+0x11c>
 800592a:	e000      	b.n	800592e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800592c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2202      	movs	r2, #2
 8005934:	4013      	ands	r3, r2
 8005936:	d100      	bne.n	800593a <HAL_RCC_OscConfig+0x14a>
 8005938:	e06c      	b.n	8005a14 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800593a:	4b7b      	ldr	r3, [pc, #492]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	220c      	movs	r2, #12
 8005940:	4013      	ands	r3, r2
 8005942:	d00e      	beq.n	8005962 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005944:	4b78      	ldr	r3, [pc, #480]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	220c      	movs	r2, #12
 800594a:	4013      	ands	r3, r2
 800594c:	2b08      	cmp	r3, #8
 800594e:	d11f      	bne.n	8005990 <HAL_RCC_OscConfig+0x1a0>
 8005950:	4b75      	ldr	r3, [pc, #468]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	23c0      	movs	r3, #192	@ 0xc0
 8005956:	025b      	lsls	r3, r3, #9
 8005958:	401a      	ands	r2, r3
 800595a:	2380      	movs	r3, #128	@ 0x80
 800595c:	021b      	lsls	r3, r3, #8
 800595e:	429a      	cmp	r2, r3
 8005960:	d116      	bne.n	8005990 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005962:	4b71      	ldr	r3, [pc, #452]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2202      	movs	r2, #2
 8005968:	4013      	ands	r3, r2
 800596a:	d005      	beq.n	8005978 <HAL_RCC_OscConfig+0x188>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d001      	beq.n	8005978 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e2bb      	b.n	8005ef0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005978:	4b6b      	ldr	r3, [pc, #428]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	22f8      	movs	r2, #248	@ 0xf8
 800597e:	4393      	bics	r3, r2
 8005980:	0019      	movs	r1, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	00da      	lsls	r2, r3, #3
 8005988:	4b67      	ldr	r3, [pc, #412]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 800598a:	430a      	orrs	r2, r1
 800598c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800598e:	e041      	b.n	8005a14 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d024      	beq.n	80059e2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005998:	4b63      	ldr	r3, [pc, #396]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	4b62      	ldr	r3, [pc, #392]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 800599e:	2101      	movs	r1, #1
 80059a0:	430a      	orrs	r2, r1
 80059a2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a4:	f7fd fb88 	bl	80030b8 <HAL_GetTick>
 80059a8:	0003      	movs	r3, r0
 80059aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ac:	e008      	b.n	80059c0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059ae:	f7fd fb83 	bl	80030b8 <HAL_GetTick>
 80059b2:	0002      	movs	r2, r0
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d901      	bls.n	80059c0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e297      	b.n	8005ef0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059c0:	4b59      	ldr	r3, [pc, #356]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2202      	movs	r2, #2
 80059c6:	4013      	ands	r3, r2
 80059c8:	d0f1      	beq.n	80059ae <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ca:	4b57      	ldr	r3, [pc, #348]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	22f8      	movs	r2, #248	@ 0xf8
 80059d0:	4393      	bics	r3, r2
 80059d2:	0019      	movs	r1, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	00da      	lsls	r2, r3, #3
 80059da:	4b53      	ldr	r3, [pc, #332]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 80059dc:	430a      	orrs	r2, r1
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	e018      	b.n	8005a14 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059e2:	4b51      	ldr	r3, [pc, #324]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	4b50      	ldr	r3, [pc, #320]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 80059e8:	2101      	movs	r1, #1
 80059ea:	438a      	bics	r2, r1
 80059ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059ee:	f7fd fb63 	bl	80030b8 <HAL_GetTick>
 80059f2:	0003      	movs	r3, r0
 80059f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059f6:	e008      	b.n	8005a0a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059f8:	f7fd fb5e 	bl	80030b8 <HAL_GetTick>
 80059fc:	0002      	movs	r2, r0
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e272      	b.n	8005ef0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a0a:	4b47      	ldr	r3, [pc, #284]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	4013      	ands	r3, r2
 8005a12:	d1f1      	bne.n	80059f8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2208      	movs	r2, #8
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	d036      	beq.n	8005a8c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d019      	beq.n	8005a5a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a26:	4b40      	ldr	r3, [pc, #256]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 8005a28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a2a:	4b3f      	ldr	r3, [pc, #252]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a32:	f7fd fb41 	bl	80030b8 <HAL_GetTick>
 8005a36:	0003      	movs	r3, r0
 8005a38:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a3c:	f7fd fb3c 	bl	80030b8 <HAL_GetTick>
 8005a40:	0002      	movs	r2, r0
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e250      	b.n	8005ef0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a4e:	4b36      	ldr	r3, [pc, #216]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 8005a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a52:	2202      	movs	r2, #2
 8005a54:	4013      	ands	r3, r2
 8005a56:	d0f1      	beq.n	8005a3c <HAL_RCC_OscConfig+0x24c>
 8005a58:	e018      	b.n	8005a8c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a5a:	4b33      	ldr	r3, [pc, #204]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 8005a5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a5e:	4b32      	ldr	r3, [pc, #200]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 8005a60:	2101      	movs	r1, #1
 8005a62:	438a      	bics	r2, r1
 8005a64:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a66:	f7fd fb27 	bl	80030b8 <HAL_GetTick>
 8005a6a:	0003      	movs	r3, r0
 8005a6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a6e:	e008      	b.n	8005a82 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a70:	f7fd fb22 	bl	80030b8 <HAL_GetTick>
 8005a74:	0002      	movs	r2, r0
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e236      	b.n	8005ef0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a82:	4b29      	ldr	r3, [pc, #164]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 8005a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a86:	2202      	movs	r2, #2
 8005a88:	4013      	ands	r3, r2
 8005a8a:	d1f1      	bne.n	8005a70 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2204      	movs	r2, #4
 8005a92:	4013      	ands	r3, r2
 8005a94:	d100      	bne.n	8005a98 <HAL_RCC_OscConfig+0x2a8>
 8005a96:	e0b5      	b.n	8005c04 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a98:	201f      	movs	r0, #31
 8005a9a:	183b      	adds	r3, r7, r0
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005aa0:	4b21      	ldr	r3, [pc, #132]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 8005aa2:	69da      	ldr	r2, [r3, #28]
 8005aa4:	2380      	movs	r3, #128	@ 0x80
 8005aa6:	055b      	lsls	r3, r3, #21
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	d110      	bne.n	8005ace <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aac:	4b1e      	ldr	r3, [pc, #120]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 8005aae:	69da      	ldr	r2, [r3, #28]
 8005ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 8005ab2:	2180      	movs	r1, #128	@ 0x80
 8005ab4:	0549      	lsls	r1, r1, #21
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	61da      	str	r2, [r3, #28]
 8005aba:	4b1b      	ldr	r3, [pc, #108]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 8005abc:	69da      	ldr	r2, [r3, #28]
 8005abe:	2380      	movs	r3, #128	@ 0x80
 8005ac0:	055b      	lsls	r3, r3, #21
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ac8:	183b      	adds	r3, r7, r0
 8005aca:	2201      	movs	r2, #1
 8005acc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ace:	4b19      	ldr	r3, [pc, #100]	@ (8005b34 <HAL_RCC_OscConfig+0x344>)
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	2380      	movs	r3, #128	@ 0x80
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	d11a      	bne.n	8005b10 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ada:	4b16      	ldr	r3, [pc, #88]	@ (8005b34 <HAL_RCC_OscConfig+0x344>)
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	4b15      	ldr	r3, [pc, #84]	@ (8005b34 <HAL_RCC_OscConfig+0x344>)
 8005ae0:	2180      	movs	r1, #128	@ 0x80
 8005ae2:	0049      	lsls	r1, r1, #1
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ae8:	f7fd fae6 	bl	80030b8 <HAL_GetTick>
 8005aec:	0003      	movs	r3, r0
 8005aee:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005af0:	e008      	b.n	8005b04 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005af2:	f7fd fae1 	bl	80030b8 <HAL_GetTick>
 8005af6:	0002      	movs	r2, r0
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	2b64      	cmp	r3, #100	@ 0x64
 8005afe:	d901      	bls.n	8005b04 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e1f5      	b.n	8005ef0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b04:	4b0b      	ldr	r3, [pc, #44]	@ (8005b34 <HAL_RCC_OscConfig+0x344>)
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	2380      	movs	r3, #128	@ 0x80
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	d0f0      	beq.n	8005af2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d10f      	bne.n	8005b38 <HAL_RCC_OscConfig+0x348>
 8005b18:	4b03      	ldr	r3, [pc, #12]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 8005b1a:	6a1a      	ldr	r2, [r3, #32]
 8005b1c:	4b02      	ldr	r3, [pc, #8]	@ (8005b28 <HAL_RCC_OscConfig+0x338>)
 8005b1e:	2101      	movs	r1, #1
 8005b20:	430a      	orrs	r2, r1
 8005b22:	621a      	str	r2, [r3, #32]
 8005b24:	e036      	b.n	8005b94 <HAL_RCC_OscConfig+0x3a4>
 8005b26:	46c0      	nop			@ (mov r8, r8)
 8005b28:	40021000 	.word	0x40021000
 8005b2c:	fffeffff 	.word	0xfffeffff
 8005b30:	fffbffff 	.word	0xfffbffff
 8005b34:	40007000 	.word	0x40007000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10c      	bne.n	8005b5a <HAL_RCC_OscConfig+0x36a>
 8005b40:	4bca      	ldr	r3, [pc, #808]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005b42:	6a1a      	ldr	r2, [r3, #32]
 8005b44:	4bc9      	ldr	r3, [pc, #804]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005b46:	2101      	movs	r1, #1
 8005b48:	438a      	bics	r2, r1
 8005b4a:	621a      	str	r2, [r3, #32]
 8005b4c:	4bc7      	ldr	r3, [pc, #796]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005b4e:	6a1a      	ldr	r2, [r3, #32]
 8005b50:	4bc6      	ldr	r3, [pc, #792]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005b52:	2104      	movs	r1, #4
 8005b54:	438a      	bics	r2, r1
 8005b56:	621a      	str	r2, [r3, #32]
 8005b58:	e01c      	b.n	8005b94 <HAL_RCC_OscConfig+0x3a4>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	2b05      	cmp	r3, #5
 8005b60:	d10c      	bne.n	8005b7c <HAL_RCC_OscConfig+0x38c>
 8005b62:	4bc2      	ldr	r3, [pc, #776]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005b64:	6a1a      	ldr	r2, [r3, #32]
 8005b66:	4bc1      	ldr	r3, [pc, #772]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005b68:	2104      	movs	r1, #4
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	621a      	str	r2, [r3, #32]
 8005b6e:	4bbf      	ldr	r3, [pc, #764]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005b70:	6a1a      	ldr	r2, [r3, #32]
 8005b72:	4bbe      	ldr	r3, [pc, #760]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005b74:	2101      	movs	r1, #1
 8005b76:	430a      	orrs	r2, r1
 8005b78:	621a      	str	r2, [r3, #32]
 8005b7a:	e00b      	b.n	8005b94 <HAL_RCC_OscConfig+0x3a4>
 8005b7c:	4bbb      	ldr	r3, [pc, #748]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005b7e:	6a1a      	ldr	r2, [r3, #32]
 8005b80:	4bba      	ldr	r3, [pc, #744]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005b82:	2101      	movs	r1, #1
 8005b84:	438a      	bics	r2, r1
 8005b86:	621a      	str	r2, [r3, #32]
 8005b88:	4bb8      	ldr	r3, [pc, #736]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005b8a:	6a1a      	ldr	r2, [r3, #32]
 8005b8c:	4bb7      	ldr	r3, [pc, #732]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005b8e:	2104      	movs	r1, #4
 8005b90:	438a      	bics	r2, r1
 8005b92:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d014      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b9c:	f7fd fa8c 	bl	80030b8 <HAL_GetTick>
 8005ba0:	0003      	movs	r3, r0
 8005ba2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba4:	e009      	b.n	8005bba <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ba6:	f7fd fa87 	bl	80030b8 <HAL_GetTick>
 8005baa:	0002      	movs	r2, r0
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	4aaf      	ldr	r2, [pc, #700]	@ (8005e70 <HAL_RCC_OscConfig+0x680>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e19a      	b.n	8005ef0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bba:	4bac      	ldr	r3, [pc, #688]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	d0f0      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x3b6>
 8005bc4:	e013      	b.n	8005bee <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bc6:	f7fd fa77 	bl	80030b8 <HAL_GetTick>
 8005bca:	0003      	movs	r3, r0
 8005bcc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bce:	e009      	b.n	8005be4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bd0:	f7fd fa72 	bl	80030b8 <HAL_GetTick>
 8005bd4:	0002      	movs	r2, r0
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	4aa5      	ldr	r2, [pc, #660]	@ (8005e70 <HAL_RCC_OscConfig+0x680>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e185      	b.n	8005ef0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005be4:	4ba1      	ldr	r3, [pc, #644]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	2202      	movs	r2, #2
 8005bea:	4013      	ands	r3, r2
 8005bec:	d1f0      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005bee:	231f      	movs	r3, #31
 8005bf0:	18fb      	adds	r3, r7, r3
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d105      	bne.n	8005c04 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bf8:	4b9c      	ldr	r3, [pc, #624]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005bfa:	69da      	ldr	r2, [r3, #28]
 8005bfc:	4b9b      	ldr	r3, [pc, #620]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005bfe:	499d      	ldr	r1, [pc, #628]	@ (8005e74 <HAL_RCC_OscConfig+0x684>)
 8005c00:	400a      	ands	r2, r1
 8005c02:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2210      	movs	r2, #16
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	d063      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d12a      	bne.n	8005c6c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005c16:	4b95      	ldr	r3, [pc, #596]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005c18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c1a:	4b94      	ldr	r3, [pc, #592]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005c1c:	2104      	movs	r1, #4
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005c22:	4b92      	ldr	r3, [pc, #584]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005c24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c26:	4b91      	ldr	r3, [pc, #580]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005c28:	2101      	movs	r1, #1
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c2e:	f7fd fa43 	bl	80030b8 <HAL_GetTick>
 8005c32:	0003      	movs	r3, r0
 8005c34:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005c36:	e008      	b.n	8005c4a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005c38:	f7fd fa3e 	bl	80030b8 <HAL_GetTick>
 8005c3c:	0002      	movs	r2, r0
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e152      	b.n	8005ef0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005c4a:	4b88      	ldr	r3, [pc, #544]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c4e:	2202      	movs	r2, #2
 8005c50:	4013      	ands	r3, r2
 8005c52:	d0f1      	beq.n	8005c38 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005c54:	4b85      	ldr	r3, [pc, #532]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c58:	22f8      	movs	r2, #248	@ 0xf8
 8005c5a:	4393      	bics	r3, r2
 8005c5c:	0019      	movs	r1, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	00da      	lsls	r2, r3, #3
 8005c64:	4b81      	ldr	r3, [pc, #516]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005c66:	430a      	orrs	r2, r1
 8005c68:	635a      	str	r2, [r3, #52]	@ 0x34
 8005c6a:	e034      	b.n	8005cd6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	3305      	adds	r3, #5
 8005c72:	d111      	bne.n	8005c98 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005c74:	4b7d      	ldr	r3, [pc, #500]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005c76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c78:	4b7c      	ldr	r3, [pc, #496]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005c7a:	2104      	movs	r1, #4
 8005c7c:	438a      	bics	r2, r1
 8005c7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005c80:	4b7a      	ldr	r3, [pc, #488]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c84:	22f8      	movs	r2, #248	@ 0xf8
 8005c86:	4393      	bics	r3, r2
 8005c88:	0019      	movs	r1, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	00da      	lsls	r2, r3, #3
 8005c90:	4b76      	ldr	r3, [pc, #472]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005c92:	430a      	orrs	r2, r1
 8005c94:	635a      	str	r2, [r3, #52]	@ 0x34
 8005c96:	e01e      	b.n	8005cd6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005c98:	4b74      	ldr	r3, [pc, #464]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005c9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c9c:	4b73      	ldr	r3, [pc, #460]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005c9e:	2104      	movs	r1, #4
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005ca4:	4b71      	ldr	r3, [pc, #452]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005ca6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ca8:	4b70      	ldr	r3, [pc, #448]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005caa:	2101      	movs	r1, #1
 8005cac:	438a      	bics	r2, r1
 8005cae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cb0:	f7fd fa02 	bl	80030b8 <HAL_GetTick>
 8005cb4:	0003      	movs	r3, r0
 8005cb6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005cb8:	e008      	b.n	8005ccc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005cba:	f7fd f9fd 	bl	80030b8 <HAL_GetTick>
 8005cbe:	0002      	movs	r2, r0
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e111      	b.n	8005ef0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005ccc:	4b67      	ldr	r3, [pc, #412]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cd0:	2202      	movs	r2, #2
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	d1f1      	bne.n	8005cba <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	4013      	ands	r3, r2
 8005cde:	d05c      	beq.n	8005d9a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005ce0:	4b62      	ldr	r3, [pc, #392]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	220c      	movs	r2, #12
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	2b0c      	cmp	r3, #12
 8005cea:	d00e      	beq.n	8005d0a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005cec:	4b5f      	ldr	r3, [pc, #380]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	220c      	movs	r2, #12
 8005cf2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005cf4:	2b08      	cmp	r3, #8
 8005cf6:	d114      	bne.n	8005d22 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005cf8:	4b5c      	ldr	r3, [pc, #368]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	23c0      	movs	r3, #192	@ 0xc0
 8005cfe:	025b      	lsls	r3, r3, #9
 8005d00:	401a      	ands	r2, r3
 8005d02:	23c0      	movs	r3, #192	@ 0xc0
 8005d04:	025b      	lsls	r3, r3, #9
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d10b      	bne.n	8005d22 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005d0a:	4b58      	ldr	r3, [pc, #352]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005d0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d0e:	2380      	movs	r3, #128	@ 0x80
 8005d10:	029b      	lsls	r3, r3, #10
 8005d12:	4013      	ands	r3, r2
 8005d14:	d040      	beq.n	8005d98 <HAL_RCC_OscConfig+0x5a8>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d03c      	beq.n	8005d98 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e0e6      	b.n	8005ef0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d01b      	beq.n	8005d62 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005d2a:	4b50      	ldr	r3, [pc, #320]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005d2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d2e:	4b4f      	ldr	r3, [pc, #316]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005d30:	2180      	movs	r1, #128	@ 0x80
 8005d32:	0249      	lsls	r1, r1, #9
 8005d34:	430a      	orrs	r2, r1
 8005d36:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d38:	f7fd f9be 	bl	80030b8 <HAL_GetTick>
 8005d3c:	0003      	movs	r3, r0
 8005d3e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005d40:	e008      	b.n	8005d54 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d42:	f7fd f9b9 	bl	80030b8 <HAL_GetTick>
 8005d46:	0002      	movs	r2, r0
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d901      	bls.n	8005d54 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e0cd      	b.n	8005ef0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005d54:	4b45      	ldr	r3, [pc, #276]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005d56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d58:	2380      	movs	r3, #128	@ 0x80
 8005d5a:	029b      	lsls	r3, r3, #10
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	d0f0      	beq.n	8005d42 <HAL_RCC_OscConfig+0x552>
 8005d60:	e01b      	b.n	8005d9a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005d62:	4b42      	ldr	r3, [pc, #264]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005d64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d66:	4b41      	ldr	r3, [pc, #260]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005d68:	4943      	ldr	r1, [pc, #268]	@ (8005e78 <HAL_RCC_OscConfig+0x688>)
 8005d6a:	400a      	ands	r2, r1
 8005d6c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d6e:	f7fd f9a3 	bl	80030b8 <HAL_GetTick>
 8005d72:	0003      	movs	r3, r0
 8005d74:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005d76:	e008      	b.n	8005d8a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d78:	f7fd f99e 	bl	80030b8 <HAL_GetTick>
 8005d7c:	0002      	movs	r2, r0
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d901      	bls.n	8005d8a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e0b2      	b.n	8005ef0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005d8a:	4b38      	ldr	r3, [pc, #224]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005d8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d8e:	2380      	movs	r3, #128	@ 0x80
 8005d90:	029b      	lsls	r3, r3, #10
 8005d92:	4013      	ands	r3, r2
 8005d94:	d1f0      	bne.n	8005d78 <HAL_RCC_OscConfig+0x588>
 8005d96:	e000      	b.n	8005d9a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005d98:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d100      	bne.n	8005da4 <HAL_RCC_OscConfig+0x5b4>
 8005da2:	e0a4      	b.n	8005eee <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005da4:	4b31      	ldr	r3, [pc, #196]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	220c      	movs	r2, #12
 8005daa:	4013      	ands	r3, r2
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d100      	bne.n	8005db2 <HAL_RCC_OscConfig+0x5c2>
 8005db0:	e078      	b.n	8005ea4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d14c      	bne.n	8005e54 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dba:	4b2c      	ldr	r3, [pc, #176]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005dc0:	492e      	ldr	r1, [pc, #184]	@ (8005e7c <HAL_RCC_OscConfig+0x68c>)
 8005dc2:	400a      	ands	r2, r1
 8005dc4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc6:	f7fd f977 	bl	80030b8 <HAL_GetTick>
 8005dca:	0003      	movs	r3, r0
 8005dcc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005dce:	e008      	b.n	8005de2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dd0:	f7fd f972 	bl	80030b8 <HAL_GetTick>
 8005dd4:	0002      	movs	r2, r0
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e086      	b.n	8005ef0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005de2:	4b22      	ldr	r3, [pc, #136]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	2380      	movs	r3, #128	@ 0x80
 8005de8:	049b      	lsls	r3, r3, #18
 8005dea:	4013      	ands	r3, r2
 8005dec:	d1f0      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dee:	4b1f      	ldr	r3, [pc, #124]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df2:	220f      	movs	r2, #15
 8005df4:	4393      	bics	r3, r2
 8005df6:	0019      	movs	r1, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005e02:	4b1a      	ldr	r3, [pc, #104]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	4a1e      	ldr	r2, [pc, #120]	@ (8005e80 <HAL_RCC_OscConfig+0x690>)
 8005e08:	4013      	ands	r3, r2
 8005e0a:	0019      	movs	r1, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e14:	431a      	orrs	r2, r3
 8005e16:	4b15      	ldr	r3, [pc, #84]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e1c:	4b13      	ldr	r3, [pc, #76]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	4b12      	ldr	r3, [pc, #72]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005e22:	2180      	movs	r1, #128	@ 0x80
 8005e24:	0449      	lsls	r1, r1, #17
 8005e26:	430a      	orrs	r2, r1
 8005e28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e2a:	f7fd f945 	bl	80030b8 <HAL_GetTick>
 8005e2e:	0003      	movs	r3, r0
 8005e30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e32:	e008      	b.n	8005e46 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e34:	f7fd f940 	bl	80030b8 <HAL_GetTick>
 8005e38:	0002      	movs	r2, r0
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e054      	b.n	8005ef0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e46:	4b09      	ldr	r3, [pc, #36]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	2380      	movs	r3, #128	@ 0x80
 8005e4c:	049b      	lsls	r3, r3, #18
 8005e4e:	4013      	ands	r3, r2
 8005e50:	d0f0      	beq.n	8005e34 <HAL_RCC_OscConfig+0x644>
 8005e52:	e04c      	b.n	8005eee <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e54:	4b05      	ldr	r3, [pc, #20]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	4b04      	ldr	r3, [pc, #16]	@ (8005e6c <HAL_RCC_OscConfig+0x67c>)
 8005e5a:	4908      	ldr	r1, [pc, #32]	@ (8005e7c <HAL_RCC_OscConfig+0x68c>)
 8005e5c:	400a      	ands	r2, r1
 8005e5e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e60:	f7fd f92a 	bl	80030b8 <HAL_GetTick>
 8005e64:	0003      	movs	r3, r0
 8005e66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e68:	e015      	b.n	8005e96 <HAL_RCC_OscConfig+0x6a6>
 8005e6a:	46c0      	nop			@ (mov r8, r8)
 8005e6c:	40021000 	.word	0x40021000
 8005e70:	00001388 	.word	0x00001388
 8005e74:	efffffff 	.word	0xefffffff
 8005e78:	fffeffff 	.word	0xfffeffff
 8005e7c:	feffffff 	.word	0xfeffffff
 8005e80:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e84:	f7fd f918 	bl	80030b8 <HAL_GetTick>
 8005e88:	0002      	movs	r2, r0
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e02c      	b.n	8005ef0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e96:	4b18      	ldr	r3, [pc, #96]	@ (8005ef8 <HAL_RCC_OscConfig+0x708>)
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	2380      	movs	r3, #128	@ 0x80
 8005e9c:	049b      	lsls	r3, r3, #18
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	d1f0      	bne.n	8005e84 <HAL_RCC_OscConfig+0x694>
 8005ea2:	e024      	b.n	8005eee <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d101      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e01f      	b.n	8005ef0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005eb0:	4b11      	ldr	r3, [pc, #68]	@ (8005ef8 <HAL_RCC_OscConfig+0x708>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005eb6:	4b10      	ldr	r3, [pc, #64]	@ (8005ef8 <HAL_RCC_OscConfig+0x708>)
 8005eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eba:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	23c0      	movs	r3, #192	@ 0xc0
 8005ec0:	025b      	lsls	r3, r3, #9
 8005ec2:	401a      	ands	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d10e      	bne.n	8005eea <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	220f      	movs	r2, #15
 8005ed0:	401a      	ands	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d107      	bne.n	8005eea <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	23f0      	movs	r3, #240	@ 0xf0
 8005ede:	039b      	lsls	r3, r3, #14
 8005ee0:	401a      	ands	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d001      	beq.n	8005eee <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e000      	b.n	8005ef0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	b008      	add	sp, #32
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	40021000 	.word	0x40021000

08005efc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e0bf      	b.n	8006090 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f10:	4b61      	ldr	r3, [pc, #388]	@ (8006098 <HAL_RCC_ClockConfig+0x19c>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2201      	movs	r2, #1
 8005f16:	4013      	ands	r3, r2
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d911      	bls.n	8005f42 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f1e:	4b5e      	ldr	r3, [pc, #376]	@ (8006098 <HAL_RCC_ClockConfig+0x19c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2201      	movs	r2, #1
 8005f24:	4393      	bics	r3, r2
 8005f26:	0019      	movs	r1, r3
 8005f28:	4b5b      	ldr	r3, [pc, #364]	@ (8006098 <HAL_RCC_ClockConfig+0x19c>)
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f30:	4b59      	ldr	r3, [pc, #356]	@ (8006098 <HAL_RCC_ClockConfig+0x19c>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2201      	movs	r2, #1
 8005f36:	4013      	ands	r3, r2
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d001      	beq.n	8005f42 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e0a6      	b.n	8006090 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2202      	movs	r2, #2
 8005f48:	4013      	ands	r3, r2
 8005f4a:	d015      	beq.n	8005f78 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2204      	movs	r2, #4
 8005f52:	4013      	ands	r3, r2
 8005f54:	d006      	beq.n	8005f64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005f56:	4b51      	ldr	r3, [pc, #324]	@ (800609c <HAL_RCC_ClockConfig+0x1a0>)
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	4b50      	ldr	r3, [pc, #320]	@ (800609c <HAL_RCC_ClockConfig+0x1a0>)
 8005f5c:	21e0      	movs	r1, #224	@ 0xe0
 8005f5e:	00c9      	lsls	r1, r1, #3
 8005f60:	430a      	orrs	r2, r1
 8005f62:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f64:	4b4d      	ldr	r3, [pc, #308]	@ (800609c <HAL_RCC_ClockConfig+0x1a0>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	22f0      	movs	r2, #240	@ 0xf0
 8005f6a:	4393      	bics	r3, r2
 8005f6c:	0019      	movs	r1, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	4b4a      	ldr	r3, [pc, #296]	@ (800609c <HAL_RCC_ClockConfig+0x1a0>)
 8005f74:	430a      	orrs	r2, r1
 8005f76:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	4013      	ands	r3, r2
 8005f80:	d04c      	beq.n	800601c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d107      	bne.n	8005f9a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f8a:	4b44      	ldr	r3, [pc, #272]	@ (800609c <HAL_RCC_ClockConfig+0x1a0>)
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	2380      	movs	r3, #128	@ 0x80
 8005f90:	029b      	lsls	r3, r3, #10
 8005f92:	4013      	ands	r3, r2
 8005f94:	d120      	bne.n	8005fd8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e07a      	b.n	8006090 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d107      	bne.n	8005fb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fa2:	4b3e      	ldr	r3, [pc, #248]	@ (800609c <HAL_RCC_ClockConfig+0x1a0>)
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	2380      	movs	r3, #128	@ 0x80
 8005fa8:	049b      	lsls	r3, r3, #18
 8005faa:	4013      	ands	r3, r2
 8005fac:	d114      	bne.n	8005fd8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e06e      	b.n	8006090 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	d107      	bne.n	8005fca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005fba:	4b38      	ldr	r3, [pc, #224]	@ (800609c <HAL_RCC_ClockConfig+0x1a0>)
 8005fbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fbe:	2380      	movs	r3, #128	@ 0x80
 8005fc0:	029b      	lsls	r3, r3, #10
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	d108      	bne.n	8005fd8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e062      	b.n	8006090 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fca:	4b34      	ldr	r3, [pc, #208]	@ (800609c <HAL_RCC_ClockConfig+0x1a0>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	d101      	bne.n	8005fd8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e05b      	b.n	8006090 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fd8:	4b30      	ldr	r3, [pc, #192]	@ (800609c <HAL_RCC_ClockConfig+0x1a0>)
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	2203      	movs	r2, #3
 8005fde:	4393      	bics	r3, r2
 8005fe0:	0019      	movs	r1, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	4b2d      	ldr	r3, [pc, #180]	@ (800609c <HAL_RCC_ClockConfig+0x1a0>)
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fec:	f7fd f864 	bl	80030b8 <HAL_GetTick>
 8005ff0:	0003      	movs	r3, r0
 8005ff2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ff4:	e009      	b.n	800600a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ff6:	f7fd f85f 	bl	80030b8 <HAL_GetTick>
 8005ffa:	0002      	movs	r2, r0
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	4a27      	ldr	r2, [pc, #156]	@ (80060a0 <HAL_RCC_ClockConfig+0x1a4>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d901      	bls.n	800600a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e042      	b.n	8006090 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800600a:	4b24      	ldr	r3, [pc, #144]	@ (800609c <HAL_RCC_ClockConfig+0x1a0>)
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	220c      	movs	r2, #12
 8006010:	401a      	ands	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	429a      	cmp	r2, r3
 800601a:	d1ec      	bne.n	8005ff6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800601c:	4b1e      	ldr	r3, [pc, #120]	@ (8006098 <HAL_RCC_ClockConfig+0x19c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2201      	movs	r2, #1
 8006022:	4013      	ands	r3, r2
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	429a      	cmp	r2, r3
 8006028:	d211      	bcs.n	800604e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800602a:	4b1b      	ldr	r3, [pc, #108]	@ (8006098 <HAL_RCC_ClockConfig+0x19c>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2201      	movs	r2, #1
 8006030:	4393      	bics	r3, r2
 8006032:	0019      	movs	r1, r3
 8006034:	4b18      	ldr	r3, [pc, #96]	@ (8006098 <HAL_RCC_ClockConfig+0x19c>)
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800603c:	4b16      	ldr	r3, [pc, #88]	@ (8006098 <HAL_RCC_ClockConfig+0x19c>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2201      	movs	r2, #1
 8006042:	4013      	ands	r3, r2
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	429a      	cmp	r2, r3
 8006048:	d001      	beq.n	800604e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e020      	b.n	8006090 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2204      	movs	r2, #4
 8006054:	4013      	ands	r3, r2
 8006056:	d009      	beq.n	800606c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006058:	4b10      	ldr	r3, [pc, #64]	@ (800609c <HAL_RCC_ClockConfig+0x1a0>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	4a11      	ldr	r2, [pc, #68]	@ (80060a4 <HAL_RCC_ClockConfig+0x1a8>)
 800605e:	4013      	ands	r3, r2
 8006060:	0019      	movs	r1, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	4b0d      	ldr	r3, [pc, #52]	@ (800609c <HAL_RCC_ClockConfig+0x1a0>)
 8006068:	430a      	orrs	r2, r1
 800606a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800606c:	f000 f820 	bl	80060b0 <HAL_RCC_GetSysClockFreq>
 8006070:	0001      	movs	r1, r0
 8006072:	4b0a      	ldr	r3, [pc, #40]	@ (800609c <HAL_RCC_ClockConfig+0x1a0>)
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	091b      	lsrs	r3, r3, #4
 8006078:	220f      	movs	r2, #15
 800607a:	4013      	ands	r3, r2
 800607c:	4a0a      	ldr	r2, [pc, #40]	@ (80060a8 <HAL_RCC_ClockConfig+0x1ac>)
 800607e:	5cd3      	ldrb	r3, [r2, r3]
 8006080:	000a      	movs	r2, r1
 8006082:	40da      	lsrs	r2, r3
 8006084:	4b09      	ldr	r3, [pc, #36]	@ (80060ac <HAL_RCC_ClockConfig+0x1b0>)
 8006086:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006088:	2003      	movs	r0, #3
 800608a:	f7fc ffcf 	bl	800302c <HAL_InitTick>
  
  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	0018      	movs	r0, r3
 8006092:	46bd      	mov	sp, r7
 8006094:	b004      	add	sp, #16
 8006096:	bd80      	pop	{r7, pc}
 8006098:	40022000 	.word	0x40022000
 800609c:	40021000 	.word	0x40021000
 80060a0:	00001388 	.word	0x00001388
 80060a4:	fffff8ff 	.word	0xfffff8ff
 80060a8:	0800cf58 	.word	0x0800cf58
 80060ac:	20000040 	.word	0x20000040

080060b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	2300      	movs	r3, #0
 80060bc:	60bb      	str	r3, [r7, #8]
 80060be:	2300      	movs	r3, #0
 80060c0:	617b      	str	r3, [r7, #20]
 80060c2:	2300      	movs	r3, #0
 80060c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80060ca:	4b2d      	ldr	r3, [pc, #180]	@ (8006180 <HAL_RCC_GetSysClockFreq+0xd0>)
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	220c      	movs	r2, #12
 80060d4:	4013      	ands	r3, r2
 80060d6:	2b0c      	cmp	r3, #12
 80060d8:	d046      	beq.n	8006168 <HAL_RCC_GetSysClockFreq+0xb8>
 80060da:	d848      	bhi.n	800616e <HAL_RCC_GetSysClockFreq+0xbe>
 80060dc:	2b04      	cmp	r3, #4
 80060de:	d002      	beq.n	80060e6 <HAL_RCC_GetSysClockFreq+0x36>
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	d003      	beq.n	80060ec <HAL_RCC_GetSysClockFreq+0x3c>
 80060e4:	e043      	b.n	800616e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80060e6:	4b27      	ldr	r3, [pc, #156]	@ (8006184 <HAL_RCC_GetSysClockFreq+0xd4>)
 80060e8:	613b      	str	r3, [r7, #16]
      break;
 80060ea:	e043      	b.n	8006174 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	0c9b      	lsrs	r3, r3, #18
 80060f0:	220f      	movs	r2, #15
 80060f2:	4013      	ands	r3, r2
 80060f4:	4a24      	ldr	r2, [pc, #144]	@ (8006188 <HAL_RCC_GetSysClockFreq+0xd8>)
 80060f6:	5cd3      	ldrb	r3, [r2, r3]
 80060f8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80060fa:	4b21      	ldr	r3, [pc, #132]	@ (8006180 <HAL_RCC_GetSysClockFreq+0xd0>)
 80060fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060fe:	220f      	movs	r2, #15
 8006100:	4013      	ands	r3, r2
 8006102:	4a22      	ldr	r2, [pc, #136]	@ (800618c <HAL_RCC_GetSysClockFreq+0xdc>)
 8006104:	5cd3      	ldrb	r3, [r2, r3]
 8006106:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	23c0      	movs	r3, #192	@ 0xc0
 800610c:	025b      	lsls	r3, r3, #9
 800610e:	401a      	ands	r2, r3
 8006110:	2380      	movs	r3, #128	@ 0x80
 8006112:	025b      	lsls	r3, r3, #9
 8006114:	429a      	cmp	r2, r3
 8006116:	d109      	bne.n	800612c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006118:	68b9      	ldr	r1, [r7, #8]
 800611a:	481a      	ldr	r0, [pc, #104]	@ (8006184 <HAL_RCC_GetSysClockFreq+0xd4>)
 800611c:	f7f9 fff4 	bl	8000108 <__udivsi3>
 8006120:	0003      	movs	r3, r0
 8006122:	001a      	movs	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4353      	muls	r3, r2
 8006128:	617b      	str	r3, [r7, #20]
 800612a:	e01a      	b.n	8006162 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	23c0      	movs	r3, #192	@ 0xc0
 8006130:	025b      	lsls	r3, r3, #9
 8006132:	401a      	ands	r2, r3
 8006134:	23c0      	movs	r3, #192	@ 0xc0
 8006136:	025b      	lsls	r3, r3, #9
 8006138:	429a      	cmp	r2, r3
 800613a:	d109      	bne.n	8006150 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800613c:	68b9      	ldr	r1, [r7, #8]
 800613e:	4814      	ldr	r0, [pc, #80]	@ (8006190 <HAL_RCC_GetSysClockFreq+0xe0>)
 8006140:	f7f9 ffe2 	bl	8000108 <__udivsi3>
 8006144:	0003      	movs	r3, r0
 8006146:	001a      	movs	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4353      	muls	r3, r2
 800614c:	617b      	str	r3, [r7, #20]
 800614e:	e008      	b.n	8006162 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006150:	68b9      	ldr	r1, [r7, #8]
 8006152:	480c      	ldr	r0, [pc, #48]	@ (8006184 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006154:	f7f9 ffd8 	bl	8000108 <__udivsi3>
 8006158:	0003      	movs	r3, r0
 800615a:	001a      	movs	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4353      	muls	r3, r2
 8006160:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	613b      	str	r3, [r7, #16]
      break;
 8006166:	e005      	b.n	8006174 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8006168:	4b09      	ldr	r3, [pc, #36]	@ (8006190 <HAL_RCC_GetSysClockFreq+0xe0>)
 800616a:	613b      	str	r3, [r7, #16]
      break;
 800616c:	e002      	b.n	8006174 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800616e:	4b05      	ldr	r3, [pc, #20]	@ (8006184 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006170:	613b      	str	r3, [r7, #16]
      break;
 8006172:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006174:	693b      	ldr	r3, [r7, #16]
}
 8006176:	0018      	movs	r0, r3
 8006178:	46bd      	mov	sp, r7
 800617a:	b006      	add	sp, #24
 800617c:	bd80      	pop	{r7, pc}
 800617e:	46c0      	nop			@ (mov r8, r8)
 8006180:	40021000 	.word	0x40021000
 8006184:	007a1200 	.word	0x007a1200
 8006188:	0800cf70 	.word	0x0800cf70
 800618c:	0800cf80 	.word	0x0800cf80
 8006190:	02dc6c00 	.word	0x02dc6c00

08006194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006198:	4b02      	ldr	r3, [pc, #8]	@ (80061a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800619a:	681b      	ldr	r3, [r3, #0]
}
 800619c:	0018      	movs	r0, r3
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	46c0      	nop			@ (mov r8, r8)
 80061a4:	20000040 	.word	0x20000040

080061a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80061ac:	f7ff fff2 	bl	8006194 <HAL_RCC_GetHCLKFreq>
 80061b0:	0001      	movs	r1, r0
 80061b2:	4b06      	ldr	r3, [pc, #24]	@ (80061cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	0a1b      	lsrs	r3, r3, #8
 80061b8:	2207      	movs	r2, #7
 80061ba:	4013      	ands	r3, r2
 80061bc:	4a04      	ldr	r2, [pc, #16]	@ (80061d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80061be:	5cd3      	ldrb	r3, [r2, r3]
 80061c0:	40d9      	lsrs	r1, r3
 80061c2:	000b      	movs	r3, r1
}    
 80061c4:	0018      	movs	r0, r3
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	46c0      	nop			@ (mov r8, r8)
 80061cc:	40021000 	.word	0x40021000
 80061d0:	0800cf68 	.word	0x0800cf68

080061d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80061e0:	2300      	movs	r3, #0
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	2380      	movs	r3, #128	@ 0x80
 80061ea:	025b      	lsls	r3, r3, #9
 80061ec:	4013      	ands	r3, r2
 80061ee:	d100      	bne.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80061f0:	e08e      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80061f2:	2017      	movs	r0, #23
 80061f4:	183b      	adds	r3, r7, r0
 80061f6:	2200      	movs	r2, #0
 80061f8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061fa:	4b6e      	ldr	r3, [pc, #440]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061fc:	69da      	ldr	r2, [r3, #28]
 80061fe:	2380      	movs	r3, #128	@ 0x80
 8006200:	055b      	lsls	r3, r3, #21
 8006202:	4013      	ands	r3, r2
 8006204:	d110      	bne.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006206:	4b6b      	ldr	r3, [pc, #428]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006208:	69da      	ldr	r2, [r3, #28]
 800620a:	4b6a      	ldr	r3, [pc, #424]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800620c:	2180      	movs	r1, #128	@ 0x80
 800620e:	0549      	lsls	r1, r1, #21
 8006210:	430a      	orrs	r2, r1
 8006212:	61da      	str	r2, [r3, #28]
 8006214:	4b67      	ldr	r3, [pc, #412]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006216:	69da      	ldr	r2, [r3, #28]
 8006218:	2380      	movs	r3, #128	@ 0x80
 800621a:	055b      	lsls	r3, r3, #21
 800621c:	4013      	ands	r3, r2
 800621e:	60bb      	str	r3, [r7, #8]
 8006220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006222:	183b      	adds	r3, r7, r0
 8006224:	2201      	movs	r2, #1
 8006226:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006228:	4b63      	ldr	r3, [pc, #396]	@ (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	2380      	movs	r3, #128	@ 0x80
 800622e:	005b      	lsls	r3, r3, #1
 8006230:	4013      	ands	r3, r2
 8006232:	d11a      	bne.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006234:	4b60      	ldr	r3, [pc, #384]	@ (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	4b5f      	ldr	r3, [pc, #380]	@ (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800623a:	2180      	movs	r1, #128	@ 0x80
 800623c:	0049      	lsls	r1, r1, #1
 800623e:	430a      	orrs	r2, r1
 8006240:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006242:	f7fc ff39 	bl	80030b8 <HAL_GetTick>
 8006246:	0003      	movs	r3, r0
 8006248:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800624a:	e008      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800624c:	f7fc ff34 	bl	80030b8 <HAL_GetTick>
 8006250:	0002      	movs	r2, r0
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b64      	cmp	r3, #100	@ 0x64
 8006258:	d901      	bls.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e0a6      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800625e:	4b56      	ldr	r3, [pc, #344]	@ (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	2380      	movs	r3, #128	@ 0x80
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	4013      	ands	r3, r2
 8006268:	d0f0      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800626a:	4b52      	ldr	r3, [pc, #328]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800626c:	6a1a      	ldr	r2, [r3, #32]
 800626e:	23c0      	movs	r3, #192	@ 0xc0
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4013      	ands	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d034      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	23c0      	movs	r3, #192	@ 0xc0
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	4013      	ands	r3, r2
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	429a      	cmp	r2, r3
 800628a:	d02c      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800628c:	4b49      	ldr	r3, [pc, #292]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	4a4a      	ldr	r2, [pc, #296]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006292:	4013      	ands	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006296:	4b47      	ldr	r3, [pc, #284]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006298:	6a1a      	ldr	r2, [r3, #32]
 800629a:	4b46      	ldr	r3, [pc, #280]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800629c:	2180      	movs	r1, #128	@ 0x80
 800629e:	0249      	lsls	r1, r1, #9
 80062a0:	430a      	orrs	r2, r1
 80062a2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062a4:	4b43      	ldr	r3, [pc, #268]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80062a6:	6a1a      	ldr	r2, [r3, #32]
 80062a8:	4b42      	ldr	r3, [pc, #264]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80062aa:	4945      	ldr	r1, [pc, #276]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80062ac:	400a      	ands	r2, r1
 80062ae:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80062b0:	4b40      	ldr	r3, [pc, #256]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2201      	movs	r2, #1
 80062ba:	4013      	ands	r3, r2
 80062bc:	d013      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062be:	f7fc fefb 	bl	80030b8 <HAL_GetTick>
 80062c2:	0003      	movs	r3, r0
 80062c4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062c6:	e009      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062c8:	f7fc fef6 	bl	80030b8 <HAL_GetTick>
 80062cc:	0002      	movs	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	4a3c      	ldr	r2, [pc, #240]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d901      	bls.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e067      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062dc:	4b35      	ldr	r3, [pc, #212]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	2202      	movs	r2, #2
 80062e2:	4013      	ands	r3, r2
 80062e4:	d0f0      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062e6:	4b33      	ldr	r3, [pc, #204]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	4a34      	ldr	r2, [pc, #208]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80062ec:	4013      	ands	r3, r2
 80062ee:	0019      	movs	r1, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	4b2f      	ldr	r3, [pc, #188]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80062f6:	430a      	orrs	r2, r1
 80062f8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80062fa:	2317      	movs	r3, #23
 80062fc:	18fb      	adds	r3, r7, r3
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d105      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006304:	4b2b      	ldr	r3, [pc, #172]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006306:	69da      	ldr	r2, [r3, #28]
 8006308:	4b2a      	ldr	r3, [pc, #168]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800630a:	492f      	ldr	r1, [pc, #188]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800630c:	400a      	ands	r2, r1
 800630e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2201      	movs	r2, #1
 8006316:	4013      	ands	r3, r2
 8006318:	d009      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800631a:	4b26      	ldr	r3, [pc, #152]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800631c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800631e:	2203      	movs	r2, #3
 8006320:	4393      	bics	r3, r2
 8006322:	0019      	movs	r1, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	4b22      	ldr	r3, [pc, #136]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800632a:	430a      	orrs	r2, r1
 800632c:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2202      	movs	r2, #2
 8006334:	4013      	ands	r3, r2
 8006336:	d009      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006338:	4b1e      	ldr	r3, [pc, #120]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800633a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800633c:	4a23      	ldr	r2, [pc, #140]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800633e:	4013      	ands	r3, r2
 8006340:	0019      	movs	r1, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	4b1b      	ldr	r3, [pc, #108]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006348:	430a      	orrs	r2, r1
 800634a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2220      	movs	r2, #32
 8006352:	4013      	ands	r3, r2
 8006354:	d009      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006356:	4b17      	ldr	r3, [pc, #92]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800635a:	2210      	movs	r2, #16
 800635c:	4393      	bics	r3, r2
 800635e:	0019      	movs	r1, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691a      	ldr	r2, [r3, #16]
 8006364:	4b13      	ldr	r3, [pc, #76]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006366:	430a      	orrs	r2, r1
 8006368:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	2380      	movs	r3, #128	@ 0x80
 8006370:	029b      	lsls	r3, r3, #10
 8006372:	4013      	ands	r3, r2
 8006374:	d009      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006376:	4b0f      	ldr	r3, [pc, #60]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800637a:	2280      	movs	r2, #128	@ 0x80
 800637c:	4393      	bics	r3, r2
 800637e:	0019      	movs	r1, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	699a      	ldr	r2, [r3, #24]
 8006384:	4b0b      	ldr	r3, [pc, #44]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006386:	430a      	orrs	r2, r1
 8006388:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	2380      	movs	r3, #128	@ 0x80
 8006390:	00db      	lsls	r3, r3, #3
 8006392:	4013      	ands	r3, r2
 8006394:	d009      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006396:	4b07      	ldr	r3, [pc, #28]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800639a:	2240      	movs	r2, #64	@ 0x40
 800639c:	4393      	bics	r3, r2
 800639e:	0019      	movs	r1, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	695a      	ldr	r2, [r3, #20]
 80063a4:	4b03      	ldr	r3, [pc, #12]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80063a6:	430a      	orrs	r2, r1
 80063a8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	0018      	movs	r0, r3
 80063ae:	46bd      	mov	sp, r7
 80063b0:	b006      	add	sp, #24
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	40021000 	.word	0x40021000
 80063b8:	40007000 	.word	0x40007000
 80063bc:	fffffcff 	.word	0xfffffcff
 80063c0:	fffeffff 	.word	0xfffeffff
 80063c4:	00001388 	.word	0x00001388
 80063c8:	efffffff 	.word	0xefffffff
 80063cc:	fffcffff 	.word	0xfffcffff

080063d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e0a8      	b.n	8006534 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d109      	bne.n	80063fe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	2382      	movs	r3, #130	@ 0x82
 80063f0:	005b      	lsls	r3, r3, #1
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d009      	beq.n	800640a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	61da      	str	r2, [r3, #28]
 80063fc:	e005      	b.n	800640a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	225d      	movs	r2, #93	@ 0x5d
 8006414:	5c9b      	ldrb	r3, [r3, r2]
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	d107      	bne.n	800642c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	225c      	movs	r2, #92	@ 0x5c
 8006420:	2100      	movs	r1, #0
 8006422:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	0018      	movs	r0, r3
 8006428:	f7fc fc92 	bl	8002d50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	225d      	movs	r2, #93	@ 0x5d
 8006430:	2102      	movs	r1, #2
 8006432:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2140      	movs	r1, #64	@ 0x40
 8006440:	438a      	bics	r2, r1
 8006442:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68da      	ldr	r2, [r3, #12]
 8006448:	23e0      	movs	r3, #224	@ 0xe0
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	429a      	cmp	r2, r3
 800644e:	d902      	bls.n	8006456 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006450:	2300      	movs	r3, #0
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	e002      	b.n	800645c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006456:	2380      	movs	r3, #128	@ 0x80
 8006458:	015b      	lsls	r3, r3, #5
 800645a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68da      	ldr	r2, [r3, #12]
 8006460:	23f0      	movs	r3, #240	@ 0xf0
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	429a      	cmp	r2, r3
 8006466:	d008      	beq.n	800647a <HAL_SPI_Init+0xaa>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	68da      	ldr	r2, [r3, #12]
 800646c:	23e0      	movs	r3, #224	@ 0xe0
 800646e:	00db      	lsls	r3, r3, #3
 8006470:	429a      	cmp	r2, r3
 8006472:	d002      	beq.n	800647a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	2382      	movs	r3, #130	@ 0x82
 8006480:	005b      	lsls	r3, r3, #1
 8006482:	401a      	ands	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6899      	ldr	r1, [r3, #8]
 8006488:	2384      	movs	r3, #132	@ 0x84
 800648a:	021b      	lsls	r3, r3, #8
 800648c:	400b      	ands	r3, r1
 800648e:	431a      	orrs	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	2102      	movs	r1, #2
 8006496:	400b      	ands	r3, r1
 8006498:	431a      	orrs	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	2101      	movs	r1, #1
 80064a0:	400b      	ands	r3, r1
 80064a2:	431a      	orrs	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6999      	ldr	r1, [r3, #24]
 80064a8:	2380      	movs	r3, #128	@ 0x80
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	400b      	ands	r3, r1
 80064ae:	431a      	orrs	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	2138      	movs	r1, #56	@ 0x38
 80064b6:	400b      	ands	r3, r1
 80064b8:	431a      	orrs	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	2180      	movs	r1, #128	@ 0x80
 80064c0:	400b      	ands	r3, r1
 80064c2:	431a      	orrs	r2, r3
 80064c4:	0011      	movs	r1, r2
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064ca:	2380      	movs	r3, #128	@ 0x80
 80064cc:	019b      	lsls	r3, r3, #6
 80064ce:	401a      	ands	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	0c1b      	lsrs	r3, r3, #16
 80064de:	2204      	movs	r2, #4
 80064e0:	401a      	ands	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e6:	2110      	movs	r1, #16
 80064e8:	400b      	ands	r3, r1
 80064ea:	431a      	orrs	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064f0:	2108      	movs	r1, #8
 80064f2:	400b      	ands	r3, r1
 80064f4:	431a      	orrs	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68d9      	ldr	r1, [r3, #12]
 80064fa:	23f0      	movs	r3, #240	@ 0xf0
 80064fc:	011b      	lsls	r3, r3, #4
 80064fe:	400b      	ands	r3, r1
 8006500:	431a      	orrs	r2, r3
 8006502:	0011      	movs	r1, r2
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	2380      	movs	r3, #128	@ 0x80
 8006508:	015b      	lsls	r3, r3, #5
 800650a:	401a      	ands	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	430a      	orrs	r2, r1
 8006512:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	69da      	ldr	r2, [r3, #28]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4907      	ldr	r1, [pc, #28]	@ (800653c <HAL_SPI_Init+0x16c>)
 8006520:	400a      	ands	r2, r1
 8006522:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	225d      	movs	r2, #93	@ 0x5d
 800652e:	2101      	movs	r1, #1
 8006530:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	0018      	movs	r0, r3
 8006536:	46bd      	mov	sp, r7
 8006538:	b004      	add	sp, #16
 800653a:	bd80      	pop	{r7, pc}
 800653c:	fffff7ff 	.word	0xfffff7ff

08006540 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b088      	sub	sp, #32
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	603b      	str	r3, [r7, #0]
 800654c:	1dbb      	adds	r3, r7, #6
 800654e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006550:	231f      	movs	r3, #31
 8006552:	18fb      	adds	r3, r7, r3
 8006554:	2200      	movs	r2, #0
 8006556:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	225c      	movs	r2, #92	@ 0x5c
 800655c:	5c9b      	ldrb	r3, [r3, r2]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d101      	bne.n	8006566 <HAL_SPI_Transmit+0x26>
 8006562:	2302      	movs	r3, #2
 8006564:	e147      	b.n	80067f6 <HAL_SPI_Transmit+0x2b6>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	225c      	movs	r2, #92	@ 0x5c
 800656a:	2101      	movs	r1, #1
 800656c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800656e:	f7fc fda3 	bl	80030b8 <HAL_GetTick>
 8006572:	0003      	movs	r3, r0
 8006574:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006576:	2316      	movs	r3, #22
 8006578:	18fb      	adds	r3, r7, r3
 800657a:	1dba      	adds	r2, r7, #6
 800657c:	8812      	ldrh	r2, [r2, #0]
 800657e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	225d      	movs	r2, #93	@ 0x5d
 8006584:	5c9b      	ldrb	r3, [r3, r2]
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b01      	cmp	r3, #1
 800658a:	d004      	beq.n	8006596 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800658c:	231f      	movs	r3, #31
 800658e:	18fb      	adds	r3, r7, r3
 8006590:	2202      	movs	r2, #2
 8006592:	701a      	strb	r2, [r3, #0]
    goto error;
 8006594:	e128      	b.n	80067e8 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <HAL_SPI_Transmit+0x64>
 800659c:	1dbb      	adds	r3, r7, #6
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d104      	bne.n	80065ae <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80065a4:	231f      	movs	r3, #31
 80065a6:	18fb      	adds	r3, r7, r3
 80065a8:	2201      	movs	r2, #1
 80065aa:	701a      	strb	r2, [r3, #0]
    goto error;
 80065ac:	e11c      	b.n	80067e8 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	225d      	movs	r2, #93	@ 0x5d
 80065b2:	2103      	movs	r1, #3
 80065b4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	1dba      	adds	r2, r7, #6
 80065c6:	8812      	ldrh	r2, [r2, #0]
 80065c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	1dba      	adds	r2, r7, #6
 80065ce:	8812      	ldrh	r2, [r2, #0]
 80065d0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2244      	movs	r2, #68	@ 0x44
 80065dc:	2100      	movs	r1, #0
 80065de:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2246      	movs	r2, #70	@ 0x46
 80065e4:	2100      	movs	r1, #0
 80065e6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	2380      	movs	r3, #128	@ 0x80
 80065fa:	021b      	lsls	r3, r3, #8
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d110      	bne.n	8006622 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2140      	movs	r1, #64	@ 0x40
 800660c:	438a      	bics	r2, r1
 800660e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2180      	movs	r1, #128	@ 0x80
 800661c:	01c9      	lsls	r1, r1, #7
 800661e:	430a      	orrs	r2, r1
 8006620:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2240      	movs	r2, #64	@ 0x40
 800662a:	4013      	ands	r3, r2
 800662c:	2b40      	cmp	r3, #64	@ 0x40
 800662e:	d007      	beq.n	8006640 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2140      	movs	r1, #64	@ 0x40
 800663c:	430a      	orrs	r2, r1
 800663e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	68da      	ldr	r2, [r3, #12]
 8006644:	23e0      	movs	r3, #224	@ 0xe0
 8006646:	00db      	lsls	r3, r3, #3
 8006648:	429a      	cmp	r2, r3
 800664a:	d952      	bls.n	80066f2 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d004      	beq.n	800665e <HAL_SPI_Transmit+0x11e>
 8006654:	2316      	movs	r3, #22
 8006656:	18fb      	adds	r3, r7, r3
 8006658:	881b      	ldrh	r3, [r3, #0]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d143      	bne.n	80066e6 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006662:	881a      	ldrh	r2, [r3, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800666e:	1c9a      	adds	r2, r3, #2
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006678:	b29b      	uxth	r3, r3
 800667a:	3b01      	subs	r3, #1
 800667c:	b29a      	uxth	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006682:	e030      	b.n	80066e6 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	2202      	movs	r2, #2
 800668c:	4013      	ands	r3, r2
 800668e:	2b02      	cmp	r3, #2
 8006690:	d112      	bne.n	80066b8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006696:	881a      	ldrh	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a2:	1c9a      	adds	r2, r3, #2
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	3b01      	subs	r3, #1
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80066b6:	e016      	b.n	80066e6 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066b8:	f7fc fcfe 	bl	80030b8 <HAL_GetTick>
 80066bc:	0002      	movs	r2, r0
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d802      	bhi.n	80066ce <HAL_SPI_Transmit+0x18e>
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	3301      	adds	r3, #1
 80066cc:	d102      	bne.n	80066d4 <HAL_SPI_Transmit+0x194>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d108      	bne.n	80066e6 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80066d4:	231f      	movs	r3, #31
 80066d6:	18fb      	adds	r3, r7, r3
 80066d8:	2203      	movs	r2, #3
 80066da:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	225d      	movs	r2, #93	@ 0x5d
 80066e0:	2101      	movs	r1, #1
 80066e2:	5499      	strb	r1, [r3, r2]
          goto error;
 80066e4:	e080      	b.n	80067e8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1c9      	bne.n	8006684 <HAL_SPI_Transmit+0x144>
 80066f0:	e053      	b.n	800679a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d004      	beq.n	8006704 <HAL_SPI_Transmit+0x1c4>
 80066fa:	2316      	movs	r3, #22
 80066fc:	18fb      	adds	r3, r7, r3
 80066fe:	881b      	ldrh	r3, [r3, #0]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d145      	bne.n	8006790 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	330c      	adds	r3, #12
 800670e:	7812      	ldrb	r2, [r2, #0]
 8006710:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006720:	b29b      	uxth	r3, r3
 8006722:	3b01      	subs	r3, #1
 8006724:	b29a      	uxth	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800672a:	e031      	b.n	8006790 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	2202      	movs	r2, #2
 8006734:	4013      	ands	r3, r2
 8006736:	2b02      	cmp	r3, #2
 8006738:	d113      	bne.n	8006762 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	330c      	adds	r3, #12
 8006744:	7812      	ldrb	r2, [r2, #0]
 8006746:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006756:	b29b      	uxth	r3, r3
 8006758:	3b01      	subs	r3, #1
 800675a:	b29a      	uxth	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006760:	e016      	b.n	8006790 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006762:	f7fc fca9 	bl	80030b8 <HAL_GetTick>
 8006766:	0002      	movs	r2, r0
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	683a      	ldr	r2, [r7, #0]
 800676e:	429a      	cmp	r2, r3
 8006770:	d802      	bhi.n	8006778 <HAL_SPI_Transmit+0x238>
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	3301      	adds	r3, #1
 8006776:	d102      	bne.n	800677e <HAL_SPI_Transmit+0x23e>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d108      	bne.n	8006790 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800677e:	231f      	movs	r3, #31
 8006780:	18fb      	adds	r3, r7, r3
 8006782:	2203      	movs	r2, #3
 8006784:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	225d      	movs	r2, #93	@ 0x5d
 800678a:	2101      	movs	r1, #1
 800678c:	5499      	strb	r1, [r3, r2]
          goto error;
 800678e:	e02b      	b.n	80067e8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006794:	b29b      	uxth	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1c8      	bne.n	800672c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800679a:	69ba      	ldr	r2, [r7, #24]
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	0018      	movs	r0, r3
 80067a2:	f000 f969 	bl	8006a78 <SPI_EndRxTxTransaction>
 80067a6:	1e03      	subs	r3, r0, #0
 80067a8:	d002      	beq.n	80067b0 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2220      	movs	r2, #32
 80067ae:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10a      	bne.n	80067ce <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067b8:	2300      	movs	r3, #0
 80067ba:	613b      	str	r3, [r7, #16]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	613b      	str	r3, [r7, #16]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	613b      	str	r3, [r7, #16]
 80067cc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d004      	beq.n	80067e0 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80067d6:	231f      	movs	r3, #31
 80067d8:	18fb      	adds	r3, r7, r3
 80067da:	2201      	movs	r2, #1
 80067dc:	701a      	strb	r2, [r3, #0]
 80067de:	e003      	b.n	80067e8 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	225d      	movs	r2, #93	@ 0x5d
 80067e4:	2101      	movs	r1, #1
 80067e6:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	225c      	movs	r2, #92	@ 0x5c
 80067ec:	2100      	movs	r1, #0
 80067ee:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80067f0:	231f      	movs	r3, #31
 80067f2:	18fb      	adds	r3, r7, r3
 80067f4:	781b      	ldrb	r3, [r3, #0]
}
 80067f6:	0018      	movs	r0, r3
 80067f8:	46bd      	mov	sp, r7
 80067fa:	b008      	add	sp, #32
 80067fc:	bd80      	pop	{r7, pc}

080067fe <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	225d      	movs	r2, #93	@ 0x5d
 800680a:	5c9b      	ldrb	r3, [r3, r2]
 800680c:	b2db      	uxtb	r3, r3
}
 800680e:	0018      	movs	r0, r3
 8006810:	46bd      	mov	sp, r7
 8006812:	b002      	add	sp, #8
 8006814:	bd80      	pop	{r7, pc}
	...

08006818 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b088      	sub	sp, #32
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	603b      	str	r3, [r7, #0]
 8006824:	1dfb      	adds	r3, r7, #7
 8006826:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006828:	f7fc fc46 	bl	80030b8 <HAL_GetTick>
 800682c:	0002      	movs	r2, r0
 800682e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006830:	1a9b      	subs	r3, r3, r2
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	18d3      	adds	r3, r2, r3
 8006836:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006838:	f7fc fc3e 	bl	80030b8 <HAL_GetTick>
 800683c:	0003      	movs	r3, r0
 800683e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006840:	4b3a      	ldr	r3, [pc, #232]	@ (800692c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	015b      	lsls	r3, r3, #5
 8006846:	0d1b      	lsrs	r3, r3, #20
 8006848:	69fa      	ldr	r2, [r7, #28]
 800684a:	4353      	muls	r3, r2
 800684c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800684e:	e058      	b.n	8006902 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	3301      	adds	r3, #1
 8006854:	d055      	beq.n	8006902 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006856:	f7fc fc2f 	bl	80030b8 <HAL_GetTick>
 800685a:	0002      	movs	r2, r0
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	69fa      	ldr	r2, [r7, #28]
 8006862:	429a      	cmp	r2, r3
 8006864:	d902      	bls.n	800686c <SPI_WaitFlagStateUntilTimeout+0x54>
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d142      	bne.n	80068f2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	21e0      	movs	r1, #224	@ 0xe0
 8006878:	438a      	bics	r2, r1
 800687a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	2382      	movs	r3, #130	@ 0x82
 8006882:	005b      	lsls	r3, r3, #1
 8006884:	429a      	cmp	r2, r3
 8006886:	d113      	bne.n	80068b0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	689a      	ldr	r2, [r3, #8]
 800688c:	2380      	movs	r3, #128	@ 0x80
 800688e:	021b      	lsls	r3, r3, #8
 8006890:	429a      	cmp	r2, r3
 8006892:	d005      	beq.n	80068a0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	689a      	ldr	r2, [r3, #8]
 8006898:	2380      	movs	r3, #128	@ 0x80
 800689a:	00db      	lsls	r3, r3, #3
 800689c:	429a      	cmp	r2, r3
 800689e:	d107      	bne.n	80068b0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2140      	movs	r1, #64	@ 0x40
 80068ac:	438a      	bics	r2, r1
 80068ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068b4:	2380      	movs	r3, #128	@ 0x80
 80068b6:	019b      	lsls	r3, r3, #6
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d110      	bne.n	80068de <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	491a      	ldr	r1, [pc, #104]	@ (8006930 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80068c8:	400a      	ands	r2, r1
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2180      	movs	r1, #128	@ 0x80
 80068d8:	0189      	lsls	r1, r1, #6
 80068da:	430a      	orrs	r2, r1
 80068dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	225d      	movs	r2, #93	@ 0x5d
 80068e2:	2101      	movs	r1, #1
 80068e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	225c      	movs	r2, #92	@ 0x5c
 80068ea:	2100      	movs	r1, #0
 80068ec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e017      	b.n	8006922 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	3b01      	subs	r3, #1
 8006900:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	4013      	ands	r3, r2
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	425a      	negs	r2, r3
 8006912:	4153      	adcs	r3, r2
 8006914:	b2db      	uxtb	r3, r3
 8006916:	001a      	movs	r2, r3
 8006918:	1dfb      	adds	r3, r7, #7
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	429a      	cmp	r2, r3
 800691e:	d197      	bne.n	8006850 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	0018      	movs	r0, r3
 8006924:	46bd      	mov	sp, r7
 8006926:	b008      	add	sp, #32
 8006928:	bd80      	pop	{r7, pc}
 800692a:	46c0      	nop			@ (mov r8, r8)
 800692c:	20000040 	.word	0x20000040
 8006930:	ffffdfff 	.word	0xffffdfff

08006934 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b08a      	sub	sp, #40	@ 0x28
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
 8006940:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006942:	2317      	movs	r3, #23
 8006944:	18fb      	adds	r3, r7, r3
 8006946:	2200      	movs	r2, #0
 8006948:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800694a:	f7fc fbb5 	bl	80030b8 <HAL_GetTick>
 800694e:	0002      	movs	r2, r0
 8006950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006952:	1a9b      	subs	r3, r3, r2
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	18d3      	adds	r3, r2, r3
 8006958:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800695a:	f7fc fbad 	bl	80030b8 <HAL_GetTick>
 800695e:	0003      	movs	r3, r0
 8006960:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	330c      	adds	r3, #12
 8006968:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800696a:	4b41      	ldr	r3, [pc, #260]	@ (8006a70 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	0013      	movs	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	189b      	adds	r3, r3, r2
 8006974:	00da      	lsls	r2, r3, #3
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	0d1b      	lsrs	r3, r3, #20
 800697a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800697c:	4353      	muls	r3, r2
 800697e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006980:	e068      	b.n	8006a54 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	23c0      	movs	r3, #192	@ 0xc0
 8006986:	00db      	lsls	r3, r3, #3
 8006988:	429a      	cmp	r2, r3
 800698a:	d10a      	bne.n	80069a2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d107      	bne.n	80069a2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	b2da      	uxtb	r2, r3
 8006998:	2117      	movs	r1, #23
 800699a:	187b      	adds	r3, r7, r1
 800699c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800699e:	187b      	adds	r3, r7, r1
 80069a0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	3301      	adds	r3, #1
 80069a6:	d055      	beq.n	8006a54 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069a8:	f7fc fb86 	bl	80030b8 <HAL_GetTick>
 80069ac:	0002      	movs	r2, r0
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d902      	bls.n	80069be <SPI_WaitFifoStateUntilTimeout+0x8a>
 80069b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d142      	bne.n	8006a44 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	21e0      	movs	r1, #224	@ 0xe0
 80069ca:	438a      	bics	r2, r1
 80069cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	2382      	movs	r3, #130	@ 0x82
 80069d4:	005b      	lsls	r3, r3, #1
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d113      	bne.n	8006a02 <SPI_WaitFifoStateUntilTimeout+0xce>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	689a      	ldr	r2, [r3, #8]
 80069de:	2380      	movs	r3, #128	@ 0x80
 80069e0:	021b      	lsls	r3, r3, #8
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d005      	beq.n	80069f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	689a      	ldr	r2, [r3, #8]
 80069ea:	2380      	movs	r3, #128	@ 0x80
 80069ec:	00db      	lsls	r3, r3, #3
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d107      	bne.n	8006a02 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2140      	movs	r1, #64	@ 0x40
 80069fe:	438a      	bics	r2, r1
 8006a00:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a06:	2380      	movs	r3, #128	@ 0x80
 8006a08:	019b      	lsls	r3, r3, #6
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d110      	bne.n	8006a30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4916      	ldr	r1, [pc, #88]	@ (8006a74 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006a1a:	400a      	ands	r2, r1
 8006a1c:	601a      	str	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2180      	movs	r1, #128	@ 0x80
 8006a2a:	0189      	lsls	r1, r1, #6
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	225d      	movs	r2, #93	@ 0x5d
 8006a34:	2101      	movs	r1, #1
 8006a36:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	225c      	movs	r2, #92	@ 0x5c
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e010      	b.n	8006a66 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	3b01      	subs	r3, #1
 8006a52:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d18e      	bne.n	8006982 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	0018      	movs	r0, r3
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	b00a      	add	sp, #40	@ 0x28
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	46c0      	nop			@ (mov r8, r8)
 8006a70:	20000040 	.word	0x20000040
 8006a74:	ffffdfff 	.word	0xffffdfff

08006a78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af02      	add	r7, sp, #8
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	23c0      	movs	r3, #192	@ 0xc0
 8006a88:	0159      	lsls	r1, r3, #5
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	0013      	movs	r3, r2
 8006a92:	2200      	movs	r2, #0
 8006a94:	f7ff ff4e 	bl	8006934 <SPI_WaitFifoStateUntilTimeout>
 8006a98:	1e03      	subs	r3, r0, #0
 8006a9a:	d007      	beq.n	8006aac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e027      	b.n	8006afc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	0013      	movs	r3, r2
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	2180      	movs	r1, #128	@ 0x80
 8006aba:	f7ff fead 	bl	8006818 <SPI_WaitFlagStateUntilTimeout>
 8006abe:	1e03      	subs	r3, r0, #0
 8006ac0:	d007      	beq.n	8006ad2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ac6:	2220      	movs	r2, #32
 8006ac8:	431a      	orrs	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e014      	b.n	8006afc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	23c0      	movs	r3, #192	@ 0xc0
 8006ad6:	00d9      	lsls	r1, r3, #3
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	0013      	movs	r3, r2
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f7ff ff27 	bl	8006934 <SPI_WaitFifoStateUntilTimeout>
 8006ae6:	1e03      	subs	r3, r0, #0
 8006ae8:	d007      	beq.n	8006afa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aee:	2220      	movs	r2, #32
 8006af0:	431a      	orrs	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e000      	b.n	8006afc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	0018      	movs	r0, r3
 8006afe:	46bd      	mov	sp, r7
 8006b00:	b004      	add	sp, #16
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e044      	b.n	8006ba0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d107      	bne.n	8006b2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2278      	movs	r2, #120	@ 0x78
 8006b22:	2100      	movs	r1, #0
 8006b24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	0018      	movs	r0, r3
 8006b2a:	f7fc f9b3 	bl	8002e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2224      	movs	r2, #36	@ 0x24
 8006b32:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2101      	movs	r1, #1
 8006b40:	438a      	bics	r2, r1
 8006b42:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	0018      	movs	r0, r3
 8006b50:	f000 f9b4 	bl	8006ebc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	0018      	movs	r0, r3
 8006b58:	f000 f828 	bl	8006bac <UART_SetConfig>
 8006b5c:	0003      	movs	r3, r0
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d101      	bne.n	8006b66 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e01c      	b.n	8006ba0 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	490d      	ldr	r1, [pc, #52]	@ (8006ba8 <HAL_UART_Init+0xa4>)
 8006b72:	400a      	ands	r2, r1
 8006b74:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	212a      	movs	r1, #42	@ 0x2a
 8006b82:	438a      	bics	r2, r1
 8006b84:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2101      	movs	r1, #1
 8006b92:	430a      	orrs	r2, r1
 8006b94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	0018      	movs	r0, r3
 8006b9a:	f000 fa43 	bl	8007024 <UART_CheckIdleState>
 8006b9e:	0003      	movs	r3, r0
}
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	b002      	add	sp, #8
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	ffffb7ff 	.word	0xffffb7ff

08006bac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b088      	sub	sp, #32
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bb4:	231e      	movs	r3, #30
 8006bb6:	18fb      	adds	r3, r7, r3
 8006bb8:	2200      	movs	r2, #0
 8006bba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689a      	ldr	r2, [r3, #8]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	69db      	ldr	r3, [r3, #28]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4aaf      	ldr	r2, [pc, #700]	@ (8006e98 <UART_SetConfig+0x2ec>)
 8006bdc:	4013      	ands	r3, r2
 8006bde:	0019      	movs	r1, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	4aaa      	ldr	r2, [pc, #680]	@ (8006e9c <UART_SetConfig+0x2f0>)
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	0019      	movs	r1, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	4aa1      	ldr	r2, [pc, #644]	@ (8006ea0 <UART_SetConfig+0x2f4>)
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	0019      	movs	r1, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	430a      	orrs	r2, r1
 8006c26:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a9d      	ldr	r2, [pc, #628]	@ (8006ea4 <UART_SetConfig+0x2f8>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d127      	bne.n	8006c82 <UART_SetConfig+0xd6>
 8006c32:	4b9d      	ldr	r3, [pc, #628]	@ (8006ea8 <UART_SetConfig+0x2fc>)
 8006c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c36:	2203      	movs	r2, #3
 8006c38:	4013      	ands	r3, r2
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d00d      	beq.n	8006c5a <UART_SetConfig+0xae>
 8006c3e:	d81b      	bhi.n	8006c78 <UART_SetConfig+0xcc>
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d014      	beq.n	8006c6e <UART_SetConfig+0xc2>
 8006c44:	d818      	bhi.n	8006c78 <UART_SetConfig+0xcc>
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d002      	beq.n	8006c50 <UART_SetConfig+0xa4>
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d00a      	beq.n	8006c64 <UART_SetConfig+0xb8>
 8006c4e:	e013      	b.n	8006c78 <UART_SetConfig+0xcc>
 8006c50:	231f      	movs	r3, #31
 8006c52:	18fb      	adds	r3, r7, r3
 8006c54:	2200      	movs	r2, #0
 8006c56:	701a      	strb	r2, [r3, #0]
 8006c58:	e065      	b.n	8006d26 <UART_SetConfig+0x17a>
 8006c5a:	231f      	movs	r3, #31
 8006c5c:	18fb      	adds	r3, r7, r3
 8006c5e:	2202      	movs	r2, #2
 8006c60:	701a      	strb	r2, [r3, #0]
 8006c62:	e060      	b.n	8006d26 <UART_SetConfig+0x17a>
 8006c64:	231f      	movs	r3, #31
 8006c66:	18fb      	adds	r3, r7, r3
 8006c68:	2204      	movs	r2, #4
 8006c6a:	701a      	strb	r2, [r3, #0]
 8006c6c:	e05b      	b.n	8006d26 <UART_SetConfig+0x17a>
 8006c6e:	231f      	movs	r3, #31
 8006c70:	18fb      	adds	r3, r7, r3
 8006c72:	2208      	movs	r2, #8
 8006c74:	701a      	strb	r2, [r3, #0]
 8006c76:	e056      	b.n	8006d26 <UART_SetConfig+0x17a>
 8006c78:	231f      	movs	r3, #31
 8006c7a:	18fb      	adds	r3, r7, r3
 8006c7c:	2210      	movs	r2, #16
 8006c7e:	701a      	strb	r2, [r3, #0]
 8006c80:	e051      	b.n	8006d26 <UART_SetConfig+0x17a>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a89      	ldr	r2, [pc, #548]	@ (8006eac <UART_SetConfig+0x300>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d134      	bne.n	8006cf6 <UART_SetConfig+0x14a>
 8006c8c:	4b86      	ldr	r3, [pc, #536]	@ (8006ea8 <UART_SetConfig+0x2fc>)
 8006c8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c90:	23c0      	movs	r3, #192	@ 0xc0
 8006c92:	029b      	lsls	r3, r3, #10
 8006c94:	4013      	ands	r3, r2
 8006c96:	22c0      	movs	r2, #192	@ 0xc0
 8006c98:	0292      	lsls	r2, r2, #10
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d017      	beq.n	8006cce <UART_SetConfig+0x122>
 8006c9e:	22c0      	movs	r2, #192	@ 0xc0
 8006ca0:	0292      	lsls	r2, r2, #10
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d822      	bhi.n	8006cec <UART_SetConfig+0x140>
 8006ca6:	2280      	movs	r2, #128	@ 0x80
 8006ca8:	0292      	lsls	r2, r2, #10
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d019      	beq.n	8006ce2 <UART_SetConfig+0x136>
 8006cae:	2280      	movs	r2, #128	@ 0x80
 8006cb0:	0292      	lsls	r2, r2, #10
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d81a      	bhi.n	8006cec <UART_SetConfig+0x140>
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d004      	beq.n	8006cc4 <UART_SetConfig+0x118>
 8006cba:	2280      	movs	r2, #128	@ 0x80
 8006cbc:	0252      	lsls	r2, r2, #9
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00a      	beq.n	8006cd8 <UART_SetConfig+0x12c>
 8006cc2:	e013      	b.n	8006cec <UART_SetConfig+0x140>
 8006cc4:	231f      	movs	r3, #31
 8006cc6:	18fb      	adds	r3, r7, r3
 8006cc8:	2200      	movs	r2, #0
 8006cca:	701a      	strb	r2, [r3, #0]
 8006ccc:	e02b      	b.n	8006d26 <UART_SetConfig+0x17a>
 8006cce:	231f      	movs	r3, #31
 8006cd0:	18fb      	adds	r3, r7, r3
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	701a      	strb	r2, [r3, #0]
 8006cd6:	e026      	b.n	8006d26 <UART_SetConfig+0x17a>
 8006cd8:	231f      	movs	r3, #31
 8006cda:	18fb      	adds	r3, r7, r3
 8006cdc:	2204      	movs	r2, #4
 8006cde:	701a      	strb	r2, [r3, #0]
 8006ce0:	e021      	b.n	8006d26 <UART_SetConfig+0x17a>
 8006ce2:	231f      	movs	r3, #31
 8006ce4:	18fb      	adds	r3, r7, r3
 8006ce6:	2208      	movs	r2, #8
 8006ce8:	701a      	strb	r2, [r3, #0]
 8006cea:	e01c      	b.n	8006d26 <UART_SetConfig+0x17a>
 8006cec:	231f      	movs	r3, #31
 8006cee:	18fb      	adds	r3, r7, r3
 8006cf0:	2210      	movs	r2, #16
 8006cf2:	701a      	strb	r2, [r3, #0]
 8006cf4:	e017      	b.n	8006d26 <UART_SetConfig+0x17a>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a6d      	ldr	r2, [pc, #436]	@ (8006eb0 <UART_SetConfig+0x304>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d104      	bne.n	8006d0a <UART_SetConfig+0x15e>
 8006d00:	231f      	movs	r3, #31
 8006d02:	18fb      	adds	r3, r7, r3
 8006d04:	2200      	movs	r2, #0
 8006d06:	701a      	strb	r2, [r3, #0]
 8006d08:	e00d      	b.n	8006d26 <UART_SetConfig+0x17a>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a69      	ldr	r2, [pc, #420]	@ (8006eb4 <UART_SetConfig+0x308>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d104      	bne.n	8006d1e <UART_SetConfig+0x172>
 8006d14:	231f      	movs	r3, #31
 8006d16:	18fb      	adds	r3, r7, r3
 8006d18:	2200      	movs	r2, #0
 8006d1a:	701a      	strb	r2, [r3, #0]
 8006d1c:	e003      	b.n	8006d26 <UART_SetConfig+0x17a>
 8006d1e:	231f      	movs	r3, #31
 8006d20:	18fb      	adds	r3, r7, r3
 8006d22:	2210      	movs	r2, #16
 8006d24:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	69da      	ldr	r2, [r3, #28]
 8006d2a:	2380      	movs	r3, #128	@ 0x80
 8006d2c:	021b      	lsls	r3, r3, #8
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d15c      	bne.n	8006dec <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8006d32:	231f      	movs	r3, #31
 8006d34:	18fb      	adds	r3, r7, r3
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	2b08      	cmp	r3, #8
 8006d3a:	d015      	beq.n	8006d68 <UART_SetConfig+0x1bc>
 8006d3c:	dc18      	bgt.n	8006d70 <UART_SetConfig+0x1c4>
 8006d3e:	2b04      	cmp	r3, #4
 8006d40:	d00d      	beq.n	8006d5e <UART_SetConfig+0x1b2>
 8006d42:	dc15      	bgt.n	8006d70 <UART_SetConfig+0x1c4>
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d002      	beq.n	8006d4e <UART_SetConfig+0x1a2>
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d005      	beq.n	8006d58 <UART_SetConfig+0x1ac>
 8006d4c:	e010      	b.n	8006d70 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d4e:	f7ff fa2b 	bl	80061a8 <HAL_RCC_GetPCLK1Freq>
 8006d52:	0003      	movs	r3, r0
 8006d54:	61bb      	str	r3, [r7, #24]
        break;
 8006d56:	e012      	b.n	8006d7e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d58:	4b57      	ldr	r3, [pc, #348]	@ (8006eb8 <UART_SetConfig+0x30c>)
 8006d5a:	61bb      	str	r3, [r7, #24]
        break;
 8006d5c:	e00f      	b.n	8006d7e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d5e:	f7ff f9a7 	bl	80060b0 <HAL_RCC_GetSysClockFreq>
 8006d62:	0003      	movs	r3, r0
 8006d64:	61bb      	str	r3, [r7, #24]
        break;
 8006d66:	e00a      	b.n	8006d7e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d68:	2380      	movs	r3, #128	@ 0x80
 8006d6a:	021b      	lsls	r3, r3, #8
 8006d6c:	61bb      	str	r3, [r7, #24]
        break;
 8006d6e:	e006      	b.n	8006d7e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006d70:	2300      	movs	r3, #0
 8006d72:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d74:	231e      	movs	r3, #30
 8006d76:	18fb      	adds	r3, r7, r3
 8006d78:	2201      	movs	r2, #1
 8006d7a:	701a      	strb	r2, [r3, #0]
        break;
 8006d7c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d100      	bne.n	8006d86 <UART_SetConfig+0x1da>
 8006d84:	e07a      	b.n	8006e7c <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	005a      	lsls	r2, r3, #1
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	085b      	lsrs	r3, r3, #1
 8006d90:	18d2      	adds	r2, r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	0019      	movs	r1, r3
 8006d98:	0010      	movs	r0, r2
 8006d9a:	f7f9 f9b5 	bl	8000108 <__udivsi3>
 8006d9e:	0003      	movs	r3, r0
 8006da0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	2b0f      	cmp	r3, #15
 8006da6:	d91c      	bls.n	8006de2 <UART_SetConfig+0x236>
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	2380      	movs	r3, #128	@ 0x80
 8006dac:	025b      	lsls	r3, r3, #9
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d217      	bcs.n	8006de2 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	200e      	movs	r0, #14
 8006db8:	183b      	adds	r3, r7, r0
 8006dba:	210f      	movs	r1, #15
 8006dbc:	438a      	bics	r2, r1
 8006dbe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	085b      	lsrs	r3, r3, #1
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	2207      	movs	r2, #7
 8006dc8:	4013      	ands	r3, r2
 8006dca:	b299      	uxth	r1, r3
 8006dcc:	183b      	adds	r3, r7, r0
 8006dce:	183a      	adds	r2, r7, r0
 8006dd0:	8812      	ldrh	r2, [r2, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	183a      	adds	r2, r7, r0
 8006ddc:	8812      	ldrh	r2, [r2, #0]
 8006dde:	60da      	str	r2, [r3, #12]
 8006de0:	e04c      	b.n	8006e7c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8006de2:	231e      	movs	r3, #30
 8006de4:	18fb      	adds	r3, r7, r3
 8006de6:	2201      	movs	r2, #1
 8006de8:	701a      	strb	r2, [r3, #0]
 8006dea:	e047      	b.n	8006e7c <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006dec:	231f      	movs	r3, #31
 8006dee:	18fb      	adds	r3, r7, r3
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	2b08      	cmp	r3, #8
 8006df4:	d015      	beq.n	8006e22 <UART_SetConfig+0x276>
 8006df6:	dc18      	bgt.n	8006e2a <UART_SetConfig+0x27e>
 8006df8:	2b04      	cmp	r3, #4
 8006dfa:	d00d      	beq.n	8006e18 <UART_SetConfig+0x26c>
 8006dfc:	dc15      	bgt.n	8006e2a <UART_SetConfig+0x27e>
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d002      	beq.n	8006e08 <UART_SetConfig+0x25c>
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d005      	beq.n	8006e12 <UART_SetConfig+0x266>
 8006e06:	e010      	b.n	8006e2a <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e08:	f7ff f9ce 	bl	80061a8 <HAL_RCC_GetPCLK1Freq>
 8006e0c:	0003      	movs	r3, r0
 8006e0e:	61bb      	str	r3, [r7, #24]
        break;
 8006e10:	e012      	b.n	8006e38 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e12:	4b29      	ldr	r3, [pc, #164]	@ (8006eb8 <UART_SetConfig+0x30c>)
 8006e14:	61bb      	str	r3, [r7, #24]
        break;
 8006e16:	e00f      	b.n	8006e38 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e18:	f7ff f94a 	bl	80060b0 <HAL_RCC_GetSysClockFreq>
 8006e1c:	0003      	movs	r3, r0
 8006e1e:	61bb      	str	r3, [r7, #24]
        break;
 8006e20:	e00a      	b.n	8006e38 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e22:	2380      	movs	r3, #128	@ 0x80
 8006e24:	021b      	lsls	r3, r3, #8
 8006e26:	61bb      	str	r3, [r7, #24]
        break;
 8006e28:	e006      	b.n	8006e38 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e2e:	231e      	movs	r3, #30
 8006e30:	18fb      	adds	r3, r7, r3
 8006e32:	2201      	movs	r2, #1
 8006e34:	701a      	strb	r2, [r3, #0]
        break;
 8006e36:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d01e      	beq.n	8006e7c <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	085a      	lsrs	r2, r3, #1
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	18d2      	adds	r2, r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	0019      	movs	r1, r3
 8006e4e:	0010      	movs	r0, r2
 8006e50:	f7f9 f95a 	bl	8000108 <__udivsi3>
 8006e54:	0003      	movs	r3, r0
 8006e56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	2b0f      	cmp	r3, #15
 8006e5c:	d90a      	bls.n	8006e74 <UART_SetConfig+0x2c8>
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	2380      	movs	r3, #128	@ 0x80
 8006e62:	025b      	lsls	r3, r3, #9
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d205      	bcs.n	8006e74 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	60da      	str	r2, [r3, #12]
 8006e72:	e003      	b.n	8006e7c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8006e74:	231e      	movs	r3, #30
 8006e76:	18fb      	adds	r3, r7, r3
 8006e78:	2201      	movs	r2, #1
 8006e7a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006e88:	231e      	movs	r3, #30
 8006e8a:	18fb      	adds	r3, r7, r3
 8006e8c:	781b      	ldrb	r3, [r3, #0]
}
 8006e8e:	0018      	movs	r0, r3
 8006e90:	46bd      	mov	sp, r7
 8006e92:	b008      	add	sp, #32
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	46c0      	nop			@ (mov r8, r8)
 8006e98:	efff69f3 	.word	0xefff69f3
 8006e9c:	ffffcfff 	.word	0xffffcfff
 8006ea0:	fffff4ff 	.word	0xfffff4ff
 8006ea4:	40013800 	.word	0x40013800
 8006ea8:	40021000 	.word	0x40021000
 8006eac:	40004400 	.word	0x40004400
 8006eb0:	40004800 	.word	0x40004800
 8006eb4:	40004c00 	.word	0x40004c00
 8006eb8:	007a1200 	.word	0x007a1200

08006ebc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec8:	2208      	movs	r2, #8
 8006eca:	4013      	ands	r3, r2
 8006ecc:	d00b      	beq.n	8006ee6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	4a4a      	ldr	r2, [pc, #296]	@ (8007000 <UART_AdvFeatureConfig+0x144>)
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	0019      	movs	r1, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eea:	2201      	movs	r2, #1
 8006eec:	4013      	ands	r3, r2
 8006eee:	d00b      	beq.n	8006f08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	4a43      	ldr	r2, [pc, #268]	@ (8007004 <UART_AdvFeatureConfig+0x148>)
 8006ef8:	4013      	ands	r3, r2
 8006efa:	0019      	movs	r1, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	430a      	orrs	r2, r1
 8006f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	4013      	ands	r3, r2
 8006f10:	d00b      	beq.n	8006f2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	4a3b      	ldr	r2, [pc, #236]	@ (8007008 <UART_AdvFeatureConfig+0x14c>)
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	0019      	movs	r1, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2e:	2204      	movs	r2, #4
 8006f30:	4013      	ands	r3, r2
 8006f32:	d00b      	beq.n	8006f4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	4a34      	ldr	r2, [pc, #208]	@ (800700c <UART_AdvFeatureConfig+0x150>)
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	0019      	movs	r1, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f50:	2210      	movs	r2, #16
 8006f52:	4013      	ands	r3, r2
 8006f54:	d00b      	beq.n	8006f6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	4a2c      	ldr	r2, [pc, #176]	@ (8007010 <UART_AdvFeatureConfig+0x154>)
 8006f5e:	4013      	ands	r3, r2
 8006f60:	0019      	movs	r1, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f72:	2220      	movs	r2, #32
 8006f74:	4013      	ands	r3, r2
 8006f76:	d00b      	beq.n	8006f90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	4a25      	ldr	r2, [pc, #148]	@ (8007014 <UART_AdvFeatureConfig+0x158>)
 8006f80:	4013      	ands	r3, r2
 8006f82:	0019      	movs	r1, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f94:	2240      	movs	r2, #64	@ 0x40
 8006f96:	4013      	ands	r3, r2
 8006f98:	d01d      	beq.n	8006fd6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	4a1d      	ldr	r2, [pc, #116]	@ (8007018 <UART_AdvFeatureConfig+0x15c>)
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	0019      	movs	r1, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	430a      	orrs	r2, r1
 8006fb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006fb6:	2380      	movs	r3, #128	@ 0x80
 8006fb8:	035b      	lsls	r3, r3, #13
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d10b      	bne.n	8006fd6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	4a15      	ldr	r2, [pc, #84]	@ (800701c <UART_AdvFeatureConfig+0x160>)
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	0019      	movs	r1, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	430a      	orrs	r2, r1
 8006fd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fda:	2280      	movs	r2, #128	@ 0x80
 8006fdc:	4013      	ands	r3, r2
 8006fde:	d00b      	beq.n	8006ff8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8007020 <UART_AdvFeatureConfig+0x164>)
 8006fe8:	4013      	ands	r3, r2
 8006fea:	0019      	movs	r1, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	605a      	str	r2, [r3, #4]
  }
}
 8006ff8:	46c0      	nop			@ (mov r8, r8)
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	b002      	add	sp, #8
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	ffff7fff 	.word	0xffff7fff
 8007004:	fffdffff 	.word	0xfffdffff
 8007008:	fffeffff 	.word	0xfffeffff
 800700c:	fffbffff 	.word	0xfffbffff
 8007010:	ffffefff 	.word	0xffffefff
 8007014:	ffffdfff 	.word	0xffffdfff
 8007018:	ffefffff 	.word	0xffefffff
 800701c:	ff9fffff 	.word	0xff9fffff
 8007020:	fff7ffff 	.word	0xfff7ffff

08007024 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b092      	sub	sp, #72	@ 0x48
 8007028:	af02      	add	r7, sp, #8
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2284      	movs	r2, #132	@ 0x84
 8007030:	2100      	movs	r1, #0
 8007032:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007034:	f7fc f840 	bl	80030b8 <HAL_GetTick>
 8007038:	0003      	movs	r3, r0
 800703a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2208      	movs	r2, #8
 8007044:	4013      	ands	r3, r2
 8007046:	2b08      	cmp	r3, #8
 8007048:	d12c      	bne.n	80070a4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800704a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800704c:	2280      	movs	r2, #128	@ 0x80
 800704e:	0391      	lsls	r1, r2, #14
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	4a46      	ldr	r2, [pc, #280]	@ (800716c <UART_CheckIdleState+0x148>)
 8007054:	9200      	str	r2, [sp, #0]
 8007056:	2200      	movs	r2, #0
 8007058:	f000 f88c 	bl	8007174 <UART_WaitOnFlagUntilTimeout>
 800705c:	1e03      	subs	r3, r0, #0
 800705e:	d021      	beq.n	80070a4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007060:	f3ef 8310 	mrs	r3, PRIMASK
 8007064:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007068:	63bb      	str	r3, [r7, #56]	@ 0x38
 800706a:	2301      	movs	r3, #1
 800706c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800706e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007070:	f383 8810 	msr	PRIMASK, r3
}
 8007074:	46c0      	nop			@ (mov r8, r8)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2180      	movs	r1, #128	@ 0x80
 8007082:	438a      	bics	r2, r1
 8007084:	601a      	str	r2, [r3, #0]
 8007086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007088:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800708a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800708c:	f383 8810 	msr	PRIMASK, r3
}
 8007090:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2220      	movs	r2, #32
 8007096:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2278      	movs	r2, #120	@ 0x78
 800709c:	2100      	movs	r1, #0
 800709e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e05f      	b.n	8007164 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2204      	movs	r2, #4
 80070ac:	4013      	ands	r3, r2
 80070ae:	2b04      	cmp	r3, #4
 80070b0:	d146      	bne.n	8007140 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070b4:	2280      	movs	r2, #128	@ 0x80
 80070b6:	03d1      	lsls	r1, r2, #15
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	4a2c      	ldr	r2, [pc, #176]	@ (800716c <UART_CheckIdleState+0x148>)
 80070bc:	9200      	str	r2, [sp, #0]
 80070be:	2200      	movs	r2, #0
 80070c0:	f000 f858 	bl	8007174 <UART_WaitOnFlagUntilTimeout>
 80070c4:	1e03      	subs	r3, r0, #0
 80070c6:	d03b      	beq.n	8007140 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070c8:	f3ef 8310 	mrs	r3, PRIMASK
 80070cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80070ce:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80070d2:	2301      	movs	r3, #1
 80070d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	f383 8810 	msr	PRIMASK, r3
}
 80070dc:	46c0      	nop			@ (mov r8, r8)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4921      	ldr	r1, [pc, #132]	@ (8007170 <UART_CheckIdleState+0x14c>)
 80070ea:	400a      	ands	r2, r1
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f383 8810 	msr	PRIMASK, r3
}
 80070f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070fa:	f3ef 8310 	mrs	r3, PRIMASK
 80070fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8007100:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007102:	633b      	str	r3, [r7, #48]	@ 0x30
 8007104:	2301      	movs	r3, #1
 8007106:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	f383 8810 	msr	PRIMASK, r3
}
 800710e:	46c0      	nop			@ (mov r8, r8)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	689a      	ldr	r2, [r3, #8]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2101      	movs	r1, #1
 800711c:	438a      	bics	r2, r1
 800711e:	609a      	str	r2, [r3, #8]
 8007120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007122:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007124:	6a3b      	ldr	r3, [r7, #32]
 8007126:	f383 8810 	msr	PRIMASK, r3
}
 800712a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2280      	movs	r2, #128	@ 0x80
 8007130:	2120      	movs	r1, #32
 8007132:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2278      	movs	r2, #120	@ 0x78
 8007138:	2100      	movs	r1, #0
 800713a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e011      	b.n	8007164 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2220      	movs	r2, #32
 8007144:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2280      	movs	r2, #128	@ 0x80
 800714a:	2120      	movs	r1, #32
 800714c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2278      	movs	r2, #120	@ 0x78
 800715e:	2100      	movs	r1, #0
 8007160:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	0018      	movs	r0, r3
 8007166:	46bd      	mov	sp, r7
 8007168:	b010      	add	sp, #64	@ 0x40
 800716a:	bd80      	pop	{r7, pc}
 800716c:	01ffffff 	.word	0x01ffffff
 8007170:	fffffedf 	.word	0xfffffedf

08007174 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	603b      	str	r3, [r7, #0]
 8007180:	1dfb      	adds	r3, r7, #7
 8007182:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007184:	e051      	b.n	800722a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	3301      	adds	r3, #1
 800718a:	d04e      	beq.n	800722a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800718c:	f7fb ff94 	bl	80030b8 <HAL_GetTick>
 8007190:	0002      	movs	r2, r0
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	69ba      	ldr	r2, [r7, #24]
 8007198:	429a      	cmp	r2, r3
 800719a:	d302      	bcc.n	80071a2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e051      	b.n	800724a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2204      	movs	r2, #4
 80071ae:	4013      	ands	r3, r2
 80071b0:	d03b      	beq.n	800722a <UART_WaitOnFlagUntilTimeout+0xb6>
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	2b80      	cmp	r3, #128	@ 0x80
 80071b6:	d038      	beq.n	800722a <UART_WaitOnFlagUntilTimeout+0xb6>
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	2b40      	cmp	r3, #64	@ 0x40
 80071bc:	d035      	beq.n	800722a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	2208      	movs	r2, #8
 80071c6:	4013      	ands	r3, r2
 80071c8:	2b08      	cmp	r3, #8
 80071ca:	d111      	bne.n	80071f0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2208      	movs	r2, #8
 80071d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	0018      	movs	r0, r3
 80071d8:	f000 f83c 	bl	8007254 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2284      	movs	r2, #132	@ 0x84
 80071e0:	2108      	movs	r1, #8
 80071e2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2278      	movs	r2, #120	@ 0x78
 80071e8:	2100      	movs	r1, #0
 80071ea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e02c      	b.n	800724a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	69da      	ldr	r2, [r3, #28]
 80071f6:	2380      	movs	r3, #128	@ 0x80
 80071f8:	011b      	lsls	r3, r3, #4
 80071fa:	401a      	ands	r2, r3
 80071fc:	2380      	movs	r3, #128	@ 0x80
 80071fe:	011b      	lsls	r3, r3, #4
 8007200:	429a      	cmp	r2, r3
 8007202:	d112      	bne.n	800722a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2280      	movs	r2, #128	@ 0x80
 800720a:	0112      	lsls	r2, r2, #4
 800720c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	0018      	movs	r0, r3
 8007212:	f000 f81f 	bl	8007254 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2284      	movs	r2, #132	@ 0x84
 800721a:	2120      	movs	r1, #32
 800721c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2278      	movs	r2, #120	@ 0x78
 8007222:	2100      	movs	r1, #0
 8007224:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e00f      	b.n	800724a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	68ba      	ldr	r2, [r7, #8]
 8007232:	4013      	ands	r3, r2
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	425a      	negs	r2, r3
 800723a:	4153      	adcs	r3, r2
 800723c:	b2db      	uxtb	r3, r3
 800723e:	001a      	movs	r2, r3
 8007240:	1dfb      	adds	r3, r7, #7
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	429a      	cmp	r2, r3
 8007246:	d09e      	beq.n	8007186 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	0018      	movs	r0, r3
 800724c:	46bd      	mov	sp, r7
 800724e:	b004      	add	sp, #16
 8007250:	bd80      	pop	{r7, pc}
	...

08007254 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b08e      	sub	sp, #56	@ 0x38
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800725c:	f3ef 8310 	mrs	r3, PRIMASK
 8007260:	617b      	str	r3, [r7, #20]
  return(result);
 8007262:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007264:	637b      	str	r3, [r7, #52]	@ 0x34
 8007266:	2301      	movs	r3, #1
 8007268:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	f383 8810 	msr	PRIMASK, r3
}
 8007270:	46c0      	nop			@ (mov r8, r8)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4926      	ldr	r1, [pc, #152]	@ (8007318 <UART_EndRxTransfer+0xc4>)
 800727e:	400a      	ands	r2, r1
 8007280:	601a      	str	r2, [r3, #0]
 8007282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007284:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	f383 8810 	msr	PRIMASK, r3
}
 800728c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800728e:	f3ef 8310 	mrs	r3, PRIMASK
 8007292:	623b      	str	r3, [r7, #32]
  return(result);
 8007294:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007296:	633b      	str	r3, [r7, #48]	@ 0x30
 8007298:	2301      	movs	r3, #1
 800729a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800729c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729e:	f383 8810 	msr	PRIMASK, r3
}
 80072a2:	46c0      	nop			@ (mov r8, r8)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689a      	ldr	r2, [r3, #8]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2101      	movs	r1, #1
 80072b0:	438a      	bics	r2, r1
 80072b2:	609a      	str	r2, [r3, #8]
 80072b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ba:	f383 8810 	msr	PRIMASK, r3
}
 80072be:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d118      	bne.n	80072fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072c8:	f3ef 8310 	mrs	r3, PRIMASK
 80072cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80072ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072d2:	2301      	movs	r3, #1
 80072d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f383 8810 	msr	PRIMASK, r3
}
 80072dc:	46c0      	nop			@ (mov r8, r8)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2110      	movs	r1, #16
 80072ea:	438a      	bics	r2, r1
 80072ec:	601a      	str	r2, [r3, #0]
 80072ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	f383 8810 	msr	PRIMASK, r3
}
 80072f8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2280      	movs	r2, #128	@ 0x80
 80072fe:	2120      	movs	r1, #32
 8007300:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800730e:	46c0      	nop			@ (mov r8, r8)
 8007310:	46bd      	mov	sp, r7
 8007312:	b00e      	add	sp, #56	@ 0x38
 8007314:	bd80      	pop	{r7, pc}
 8007316:	46c0      	nop			@ (mov r8, r8)
 8007318:	fffffedf 	.word	0xfffffedf

0800731c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2244      	movs	r2, #68	@ 0x44
 8007328:	2100      	movs	r1, #0
 800732a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800732c:	4b05      	ldr	r3, [pc, #20]	@ (8007344 <USB_EnableGlobalInt+0x28>)
 800732e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	b299      	uxth	r1, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2240      	movs	r2, #64	@ 0x40
 8007338:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	0018      	movs	r0, r3
 800733e:	46bd      	mov	sp, r7
 8007340:	b004      	add	sp, #16
 8007342:	bd80      	pop	{r7, pc}
 8007344:	0000bf80 	.word	0x0000bf80

08007348 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007350:	4b09      	ldr	r3, [pc, #36]	@ (8007378 <USB_DisableGlobalInt+0x30>)
 8007352:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2240      	movs	r2, #64	@ 0x40
 8007358:	5a9b      	ldrh	r3, [r3, r2]
 800735a:	b29b      	uxth	r3, r3
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	b292      	uxth	r2, r2
 8007360:	43d2      	mvns	r2, r2
 8007362:	b292      	uxth	r2, r2
 8007364:	4013      	ands	r3, r2
 8007366:	b299      	uxth	r1, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2240      	movs	r2, #64	@ 0x40
 800736c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	0018      	movs	r0, r3
 8007372:	46bd      	mov	sp, r7
 8007374:	b004      	add	sp, #16
 8007376:	bd80      	pop	{r7, pc}
 8007378:	0000bf80 	.word	0x0000bf80

0800737c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	1d3b      	adds	r3, r7, #4
 8007386:	6019      	str	r1, [r3, #0]
 8007388:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2240      	movs	r2, #64	@ 0x40
 800738e:	2101      	movs	r1, #1
 8007390:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2240      	movs	r2, #64	@ 0x40
 8007396:	2100      	movs	r1, #0
 8007398:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2244      	movs	r2, #68	@ 0x44
 800739e:	2100      	movs	r1, #0
 80073a0:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2250      	movs	r2, #80	@ 0x50
 80073a6:	2100      	movs	r1, #0
 80073a8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	0018      	movs	r0, r3
 80073ae:	46bd      	mov	sp, r7
 80073b0:	b004      	add	sp, #16
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b09c      	sub	sp, #112	@ 0x70
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80073be:	236f      	movs	r3, #111	@ 0x6f
 80073c0:	18fb      	adds	r3, r7, r3
 80073c2:	2200      	movs	r2, #0
 80073c4:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	18d3      	adds	r3, r2, r3
 80073d0:	881b      	ldrh	r3, [r3, #0]
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	236c      	movs	r3, #108	@ 0x6c
 80073d6:	18fb      	adds	r3, r7, r3
 80073d8:	49a1      	ldr	r1, [pc, #644]	@ (8007660 <USB_ActivateEndpoint+0x2ac>)
 80073da:	400a      	ands	r2, r1
 80073dc:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	78db      	ldrb	r3, [r3, #3]
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	d017      	beq.n	8007416 <USB_ActivateEndpoint+0x62>
 80073e6:	dc28      	bgt.n	800743a <USB_ActivateEndpoint+0x86>
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d00e      	beq.n	800740a <USB_ActivateEndpoint+0x56>
 80073ec:	dc25      	bgt.n	800743a <USB_ActivateEndpoint+0x86>
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <USB_ActivateEndpoint+0x44>
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d018      	beq.n	8007428 <USB_ActivateEndpoint+0x74>
 80073f6:	e020      	b.n	800743a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80073f8:	226c      	movs	r2, #108	@ 0x6c
 80073fa:	18bb      	adds	r3, r7, r2
 80073fc:	18ba      	adds	r2, r7, r2
 80073fe:	8812      	ldrh	r2, [r2, #0]
 8007400:	2180      	movs	r1, #128	@ 0x80
 8007402:	0089      	lsls	r1, r1, #2
 8007404:	430a      	orrs	r2, r1
 8007406:	801a      	strh	r2, [r3, #0]
      break;
 8007408:	e01c      	b.n	8007444 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800740a:	226c      	movs	r2, #108	@ 0x6c
 800740c:	18bb      	adds	r3, r7, r2
 800740e:	18ba      	adds	r2, r7, r2
 8007410:	8812      	ldrh	r2, [r2, #0]
 8007412:	801a      	strh	r2, [r3, #0]
      break;
 8007414:	e016      	b.n	8007444 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007416:	226c      	movs	r2, #108	@ 0x6c
 8007418:	18bb      	adds	r3, r7, r2
 800741a:	18ba      	adds	r2, r7, r2
 800741c:	8812      	ldrh	r2, [r2, #0]
 800741e:	21c0      	movs	r1, #192	@ 0xc0
 8007420:	00c9      	lsls	r1, r1, #3
 8007422:	430a      	orrs	r2, r1
 8007424:	801a      	strh	r2, [r3, #0]
      break;
 8007426:	e00d      	b.n	8007444 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007428:	226c      	movs	r2, #108	@ 0x6c
 800742a:	18bb      	adds	r3, r7, r2
 800742c:	18ba      	adds	r2, r7, r2
 800742e:	8812      	ldrh	r2, [r2, #0]
 8007430:	2180      	movs	r1, #128	@ 0x80
 8007432:	00c9      	lsls	r1, r1, #3
 8007434:	430a      	orrs	r2, r1
 8007436:	801a      	strh	r2, [r3, #0]
      break;
 8007438:	e004      	b.n	8007444 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800743a:	236f      	movs	r3, #111	@ 0x6f
 800743c:	18fb      	adds	r3, r7, r3
 800743e:	2201      	movs	r2, #1
 8007440:	701a      	strb	r2, [r3, #0]
      break;
 8007442:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	18d3      	adds	r3, r2, r3
 800744e:	226c      	movs	r2, #108	@ 0x6c
 8007450:	18ba      	adds	r2, r7, r2
 8007452:	8812      	ldrh	r2, [r2, #0]
 8007454:	4983      	ldr	r1, [pc, #524]	@ (8007664 <USB_ActivateEndpoint+0x2b0>)
 8007456:	430a      	orrs	r2, r1
 8007458:	b292      	uxth	r2, r2
 800745a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	18d3      	adds	r3, r2, r3
 8007466:	881b      	ldrh	r3, [r3, #0]
 8007468:	b29b      	uxth	r3, r3
 800746a:	b21b      	sxth	r3, r3
 800746c:	4a7e      	ldr	r2, [pc, #504]	@ (8007668 <USB_ActivateEndpoint+0x2b4>)
 800746e:	4013      	ands	r3, r2
 8007470:	b21a      	sxth	r2, r3
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	b21b      	sxth	r3, r3
 8007478:	4313      	orrs	r3, r2
 800747a:	b21a      	sxth	r2, r3
 800747c:	2166      	movs	r1, #102	@ 0x66
 800747e:	187b      	adds	r3, r7, r1
 8007480:	801a      	strh	r2, [r3, #0]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	18d3      	adds	r3, r2, r3
 800748c:	187a      	adds	r2, r7, r1
 800748e:	8812      	ldrh	r2, [r2, #0]
 8007490:	4974      	ldr	r1, [pc, #464]	@ (8007664 <USB_ActivateEndpoint+0x2b0>)
 8007492:	430a      	orrs	r2, r1
 8007494:	b292      	uxth	r2, r2
 8007496:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	7b1b      	ldrb	r3, [r3, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d000      	beq.n	80074a2 <USB_ActivateEndpoint+0xee>
 80074a0:	e177      	b.n	8007792 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	785b      	ldrb	r3, [r3, #1]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d100      	bne.n	80074ac <USB_ActivateEndpoint+0xf8>
 80074aa:	e07a      	b.n	80075a2 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	61bb      	str	r3, [r7, #24]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2250      	movs	r2, #80	@ 0x50
 80074b4:	5a9b      	ldrh	r3, [r3, r2]
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	001a      	movs	r2, r3
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	189b      	adds	r3, r3, r2
 80074be:	61bb      	str	r3, [r7, #24]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	00da      	lsls	r2, r3, #3
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	18d3      	adds	r3, r2, r3
 80074ca:	2280      	movs	r2, #128	@ 0x80
 80074cc:	00d2      	lsls	r2, r2, #3
 80074ce:	4694      	mov	ip, r2
 80074d0:	4463      	add	r3, ip
 80074d2:	617b      	str	r3, [r7, #20]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	88db      	ldrh	r3, [r3, #6]
 80074d8:	085b      	lsrs	r3, r3, #1
 80074da:	b29b      	uxth	r3, r3
 80074dc:	18db      	adds	r3, r3, r3
 80074de:	b29a      	uxth	r2, r3
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	18d2      	adds	r2, r2, r3
 80074ee:	2112      	movs	r1, #18
 80074f0:	187b      	adds	r3, r7, r1
 80074f2:	8812      	ldrh	r2, [r2, #0]
 80074f4:	801a      	strh	r2, [r3, #0]
 80074f6:	187b      	adds	r3, r7, r1
 80074f8:	881b      	ldrh	r3, [r3, #0]
 80074fa:	2240      	movs	r2, #64	@ 0x40
 80074fc:	4013      	ands	r3, r2
 80074fe:	d016      	beq.n	800752e <USB_ActivateEndpoint+0x17a>
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	18d3      	adds	r3, r2, r3
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	b29a      	uxth	r2, r3
 800750e:	2010      	movs	r0, #16
 8007510:	183b      	adds	r3, r7, r0
 8007512:	4955      	ldr	r1, [pc, #340]	@ (8007668 <USB_ActivateEndpoint+0x2b4>)
 8007514:	400a      	ands	r2, r1
 8007516:	801a      	strh	r2, [r3, #0]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	18d3      	adds	r3, r2, r3
 8007522:	183a      	adds	r2, r7, r0
 8007524:	8812      	ldrh	r2, [r2, #0]
 8007526:	4951      	ldr	r1, [pc, #324]	@ (800766c <USB_ActivateEndpoint+0x2b8>)
 8007528:	430a      	orrs	r2, r1
 800752a:	b292      	uxth	r2, r2
 800752c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	78db      	ldrb	r3, [r3, #3]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d01d      	beq.n	8007572 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	18d3      	adds	r3, r2, r3
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	b29a      	uxth	r2, r3
 8007544:	200c      	movs	r0, #12
 8007546:	183b      	adds	r3, r7, r0
 8007548:	4949      	ldr	r1, [pc, #292]	@ (8007670 <USB_ActivateEndpoint+0x2bc>)
 800754a:	400a      	ands	r2, r1
 800754c:	801a      	strh	r2, [r3, #0]
 800754e:	183b      	adds	r3, r7, r0
 8007550:	183a      	adds	r2, r7, r0
 8007552:	8812      	ldrh	r2, [r2, #0]
 8007554:	2120      	movs	r1, #32
 8007556:	404a      	eors	r2, r1
 8007558:	801a      	strh	r2, [r3, #0]
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	18d3      	adds	r3, r2, r3
 8007564:	183a      	adds	r2, r7, r0
 8007566:	8812      	ldrh	r2, [r2, #0]
 8007568:	493e      	ldr	r1, [pc, #248]	@ (8007664 <USB_ActivateEndpoint+0x2b0>)
 800756a:	430a      	orrs	r2, r1
 800756c:	b292      	uxth	r2, r2
 800756e:	801a      	strh	r2, [r3, #0]
 8007570:	e2b5      	b.n	8007ade <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	18d3      	adds	r3, r2, r3
 800757c:	881b      	ldrh	r3, [r3, #0]
 800757e:	b29a      	uxth	r2, r3
 8007580:	200e      	movs	r0, #14
 8007582:	183b      	adds	r3, r7, r0
 8007584:	493a      	ldr	r1, [pc, #232]	@ (8007670 <USB_ActivateEndpoint+0x2bc>)
 8007586:	400a      	ands	r2, r1
 8007588:	801a      	strh	r2, [r3, #0]
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	18d3      	adds	r3, r2, r3
 8007594:	183a      	adds	r2, r7, r0
 8007596:	8812      	ldrh	r2, [r2, #0]
 8007598:	4932      	ldr	r1, [pc, #200]	@ (8007664 <USB_ActivateEndpoint+0x2b0>)
 800759a:	430a      	orrs	r2, r1
 800759c:	b292      	uxth	r2, r2
 800759e:	801a      	strh	r2, [r3, #0]
 80075a0:	e29d      	b.n	8007ade <USB_ActivateEndpoint+0x72a>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2250      	movs	r2, #80	@ 0x50
 80075aa:	5a9b      	ldrh	r3, [r3, r2]
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	001a      	movs	r2, r3
 80075b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b2:	189b      	adds	r3, r3, r2
 80075b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	00da      	lsls	r2, r3, #3
 80075bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075be:	18d3      	adds	r3, r2, r3
 80075c0:	4a2c      	ldr	r2, [pc, #176]	@ (8007674 <USB_ActivateEndpoint+0x2c0>)
 80075c2:	4694      	mov	ip, r2
 80075c4:	4463      	add	r3, ip
 80075c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	88db      	ldrh	r3, [r3, #6]
 80075cc:	085b      	lsrs	r3, r3, #1
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	18db      	adds	r3, r3, r3
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2250      	movs	r2, #80	@ 0x50
 80075e0:	5a9b      	ldrh	r3, [r3, r2]
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	001a      	movs	r2, r3
 80075e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e8:	189b      	adds	r3, r3, r2
 80075ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	00da      	lsls	r2, r3, #3
 80075f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f4:	18d3      	adds	r3, r2, r3
 80075f6:	4a20      	ldr	r2, [pc, #128]	@ (8007678 <USB_ActivateEndpoint+0x2c4>)
 80075f8:	4694      	mov	ip, r2
 80075fa:	4463      	add	r3, ip
 80075fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80075fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	b29b      	uxth	r3, r3
 8007604:	059b      	lsls	r3, r3, #22
 8007606:	0d9b      	lsrs	r3, r3, #22
 8007608:	b29a      	uxth	r2, r3
 800760a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760c:	801a      	strh	r2, [r3, #0]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d108      	bne.n	8007628 <USB_ActivateEndpoint+0x274>
 8007616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	b29b      	uxth	r3, r3
 800761c:	4a17      	ldr	r2, [pc, #92]	@ (800767c <USB_ActivateEndpoint+0x2c8>)
 800761e:	4313      	orrs	r3, r2
 8007620:	b29a      	uxth	r2, r3
 8007622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007624:	801a      	strh	r2, [r3, #0]
 8007626:	e045      	b.n	80076b4 <USB_ActivateEndpoint+0x300>
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	2b3e      	cmp	r3, #62	@ 0x3e
 800762e:	d827      	bhi.n	8007680 <USB_ActivateEndpoint+0x2cc>
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	085b      	lsrs	r3, r3, #1
 8007636:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	2201      	movs	r2, #1
 800763e:	4013      	ands	r3, r2
 8007640:	d002      	beq.n	8007648 <USB_ActivateEndpoint+0x294>
 8007642:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007644:	3301      	adds	r3, #1
 8007646:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764a:	881b      	ldrh	r3, [r3, #0]
 800764c:	b29a      	uxth	r2, r3
 800764e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007650:	b29b      	uxth	r3, r3
 8007652:	029b      	lsls	r3, r3, #10
 8007654:	b29b      	uxth	r3, r3
 8007656:	4313      	orrs	r3, r2
 8007658:	b29a      	uxth	r2, r3
 800765a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765c:	801a      	strh	r2, [r3, #0]
 800765e:	e029      	b.n	80076b4 <USB_ActivateEndpoint+0x300>
 8007660:	ffff898f 	.word	0xffff898f
 8007664:	ffff8080 	.word	0xffff8080
 8007668:	ffff8f8f 	.word	0xffff8f8f
 800766c:	ffff80c0 	.word	0xffff80c0
 8007670:	ffff8fbf 	.word	0xffff8fbf
 8007674:	00000404 	.word	0x00000404
 8007678:	00000406 	.word	0x00000406
 800767c:	ffff8000 	.word	0xffff8000
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	095b      	lsrs	r3, r3, #5
 8007686:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	221f      	movs	r2, #31
 800768e:	4013      	ands	r3, r2
 8007690:	d102      	bne.n	8007698 <USB_ActivateEndpoint+0x2e4>
 8007692:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007694:	3b01      	subs	r3, #1
 8007696:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769a:	881b      	ldrh	r3, [r3, #0]
 800769c:	b29a      	uxth	r2, r3
 800769e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	029b      	lsls	r3, r3, #10
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	4313      	orrs	r3, r2
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	4ab5      	ldr	r2, [pc, #724]	@ (8007980 <USB_ActivateEndpoint+0x5cc>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	18d2      	adds	r2, r2, r3
 80076be:	2122      	movs	r1, #34	@ 0x22
 80076c0:	187b      	adds	r3, r7, r1
 80076c2:	8812      	ldrh	r2, [r2, #0]
 80076c4:	801a      	strh	r2, [r3, #0]
 80076c6:	187b      	adds	r3, r7, r1
 80076c8:	881a      	ldrh	r2, [r3, #0]
 80076ca:	2380      	movs	r3, #128	@ 0x80
 80076cc:	01db      	lsls	r3, r3, #7
 80076ce:	4013      	ands	r3, r2
 80076d0:	d016      	beq.n	8007700 <USB_ActivateEndpoint+0x34c>
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	18d3      	adds	r3, r2, r3
 80076dc:	881b      	ldrh	r3, [r3, #0]
 80076de:	b29a      	uxth	r2, r3
 80076e0:	2020      	movs	r0, #32
 80076e2:	183b      	adds	r3, r7, r0
 80076e4:	49a7      	ldr	r1, [pc, #668]	@ (8007984 <USB_ActivateEndpoint+0x5d0>)
 80076e6:	400a      	ands	r2, r1
 80076e8:	801a      	strh	r2, [r3, #0]
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	18d3      	adds	r3, r2, r3
 80076f4:	183a      	adds	r2, r7, r0
 80076f6:	8812      	ldrh	r2, [r2, #0]
 80076f8:	49a3      	ldr	r1, [pc, #652]	@ (8007988 <USB_ActivateEndpoint+0x5d4>)
 80076fa:	430a      	orrs	r2, r1
 80076fc:	b292      	uxth	r2, r2
 80076fe:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d125      	bne.n	8007754 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	18d3      	adds	r3, r2, r3
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	b29a      	uxth	r2, r3
 8007716:	201c      	movs	r0, #28
 8007718:	183b      	adds	r3, r7, r0
 800771a:	499c      	ldr	r1, [pc, #624]	@ (800798c <USB_ActivateEndpoint+0x5d8>)
 800771c:	400a      	ands	r2, r1
 800771e:	801a      	strh	r2, [r3, #0]
 8007720:	183b      	adds	r3, r7, r0
 8007722:	183a      	adds	r2, r7, r0
 8007724:	8812      	ldrh	r2, [r2, #0]
 8007726:	2180      	movs	r1, #128	@ 0x80
 8007728:	0149      	lsls	r1, r1, #5
 800772a:	404a      	eors	r2, r1
 800772c:	801a      	strh	r2, [r3, #0]
 800772e:	183b      	adds	r3, r7, r0
 8007730:	183a      	adds	r2, r7, r0
 8007732:	8812      	ldrh	r2, [r2, #0]
 8007734:	2180      	movs	r1, #128	@ 0x80
 8007736:	0189      	lsls	r1, r1, #6
 8007738:	404a      	eors	r2, r1
 800773a:	801a      	strh	r2, [r3, #0]
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	18d3      	adds	r3, r2, r3
 8007746:	183a      	adds	r2, r7, r0
 8007748:	8812      	ldrh	r2, [r2, #0]
 800774a:	4991      	ldr	r1, [pc, #580]	@ (8007990 <USB_ActivateEndpoint+0x5dc>)
 800774c:	430a      	orrs	r2, r1
 800774e:	b292      	uxth	r2, r2
 8007750:	801a      	strh	r2, [r3, #0]
 8007752:	e1c4      	b.n	8007ade <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	18d3      	adds	r3, r2, r3
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	b29a      	uxth	r2, r3
 8007762:	201e      	movs	r0, #30
 8007764:	183b      	adds	r3, r7, r0
 8007766:	4989      	ldr	r1, [pc, #548]	@ (800798c <USB_ActivateEndpoint+0x5d8>)
 8007768:	400a      	ands	r2, r1
 800776a:	801a      	strh	r2, [r3, #0]
 800776c:	183b      	adds	r3, r7, r0
 800776e:	183a      	adds	r2, r7, r0
 8007770:	8812      	ldrh	r2, [r2, #0]
 8007772:	2180      	movs	r1, #128	@ 0x80
 8007774:	0189      	lsls	r1, r1, #6
 8007776:	404a      	eors	r2, r1
 8007778:	801a      	strh	r2, [r3, #0]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	18d3      	adds	r3, r2, r3
 8007784:	183a      	adds	r2, r7, r0
 8007786:	8812      	ldrh	r2, [r2, #0]
 8007788:	4981      	ldr	r1, [pc, #516]	@ (8007990 <USB_ActivateEndpoint+0x5dc>)
 800778a:	430a      	orrs	r2, r1
 800778c:	b292      	uxth	r2, r2
 800778e:	801a      	strh	r2, [r3, #0]
 8007790:	e1a5      	b.n	8007ade <USB_ActivateEndpoint+0x72a>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	78db      	ldrb	r3, [r3, #3]
 8007796:	2b02      	cmp	r3, #2
 8007798:	d117      	bne.n	80077ca <USB_ActivateEndpoint+0x416>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	18d3      	adds	r3, r2, r3
 80077a4:	881b      	ldrh	r3, [r3, #0]
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	2062      	movs	r0, #98	@ 0x62
 80077aa:	183b      	adds	r3, r7, r0
 80077ac:	4975      	ldr	r1, [pc, #468]	@ (8007984 <USB_ActivateEndpoint+0x5d0>)
 80077ae:	400a      	ands	r2, r1
 80077b0:	801a      	strh	r2, [r3, #0]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	18d3      	adds	r3, r2, r3
 80077bc:	183a      	adds	r2, r7, r0
 80077be:	8812      	ldrh	r2, [r2, #0]
 80077c0:	4974      	ldr	r1, [pc, #464]	@ (8007994 <USB_ActivateEndpoint+0x5e0>)
 80077c2:	430a      	orrs	r2, r1
 80077c4:	b292      	uxth	r2, r2
 80077c6:	801a      	strh	r2, [r3, #0]
 80077c8:	e016      	b.n	80077f8 <USB_ActivateEndpoint+0x444>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	18d3      	adds	r3, r2, r3
 80077d4:	881b      	ldrh	r3, [r3, #0]
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	2064      	movs	r0, #100	@ 0x64
 80077da:	183b      	adds	r3, r7, r0
 80077dc:	496e      	ldr	r1, [pc, #440]	@ (8007998 <USB_ActivateEndpoint+0x5e4>)
 80077de:	400a      	ands	r2, r1
 80077e0:	801a      	strh	r2, [r3, #0]
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	18d3      	adds	r3, r2, r3
 80077ec:	183a      	adds	r2, r7, r0
 80077ee:	8812      	ldrh	r2, [r2, #0]
 80077f0:	4967      	ldr	r1, [pc, #412]	@ (8007990 <USB_ActivateEndpoint+0x5dc>)
 80077f2:	430a      	orrs	r2, r1
 80077f4:	b292      	uxth	r2, r2
 80077f6:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2250      	movs	r2, #80	@ 0x50
 8007800:	5a9b      	ldrh	r3, [r3, r2]
 8007802:	b29b      	uxth	r3, r3
 8007804:	001a      	movs	r2, r3
 8007806:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007808:	189b      	adds	r3, r3, r2
 800780a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	00da      	lsls	r2, r3, #3
 8007812:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007814:	18d3      	adds	r3, r2, r3
 8007816:	2280      	movs	r2, #128	@ 0x80
 8007818:	00d2      	lsls	r2, r2, #3
 800781a:	4694      	mov	ip, r2
 800781c:	4463      	add	r3, ip
 800781e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	891b      	ldrh	r3, [r3, #8]
 8007824:	085b      	lsrs	r3, r3, #1
 8007826:	b29b      	uxth	r3, r3
 8007828:	18db      	adds	r3, r3, r3
 800782a:	b29a      	uxth	r2, r3
 800782c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800782e:	801a      	strh	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	657b      	str	r3, [r7, #84]	@ 0x54
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2250      	movs	r2, #80	@ 0x50
 8007838:	5a9b      	ldrh	r3, [r3, r2]
 800783a:	b29b      	uxth	r3, r3
 800783c:	001a      	movs	r2, r3
 800783e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007840:	189b      	adds	r3, r3, r2
 8007842:	657b      	str	r3, [r7, #84]	@ 0x54
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	00da      	lsls	r2, r3, #3
 800784a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800784c:	18d3      	adds	r3, r2, r3
 800784e:	4a53      	ldr	r2, [pc, #332]	@ (800799c <USB_ActivateEndpoint+0x5e8>)
 8007850:	4694      	mov	ip, r2
 8007852:	4463      	add	r3, ip
 8007854:	653b      	str	r3, [r7, #80]	@ 0x50
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	895b      	ldrh	r3, [r3, #10]
 800785a:	085b      	lsrs	r3, r3, #1
 800785c:	b29b      	uxth	r3, r3
 800785e:	18db      	adds	r3, r3, r3
 8007860:	b29a      	uxth	r2, r3
 8007862:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007864:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	785b      	ldrb	r3, [r3, #1]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d000      	beq.n	8007870 <USB_ActivateEndpoint+0x4bc>
 800786e:	e09b      	b.n	80079a8 <USB_ActivateEndpoint+0x5f4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	18d2      	adds	r2, r2, r3
 800787a:	2140      	movs	r1, #64	@ 0x40
 800787c:	187b      	adds	r3, r7, r1
 800787e:	8812      	ldrh	r2, [r2, #0]
 8007880:	801a      	strh	r2, [r3, #0]
 8007882:	187b      	adds	r3, r7, r1
 8007884:	881a      	ldrh	r2, [r3, #0]
 8007886:	2380      	movs	r3, #128	@ 0x80
 8007888:	01db      	lsls	r3, r3, #7
 800788a:	4013      	ands	r3, r2
 800788c:	d016      	beq.n	80078bc <USB_ActivateEndpoint+0x508>
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	18d3      	adds	r3, r2, r3
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	b29a      	uxth	r2, r3
 800789c:	203e      	movs	r0, #62	@ 0x3e
 800789e:	183b      	adds	r3, r7, r0
 80078a0:	4938      	ldr	r1, [pc, #224]	@ (8007984 <USB_ActivateEndpoint+0x5d0>)
 80078a2:	400a      	ands	r2, r1
 80078a4:	801a      	strh	r2, [r3, #0]
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	18d3      	adds	r3, r2, r3
 80078b0:	183a      	adds	r2, r7, r0
 80078b2:	8812      	ldrh	r2, [r2, #0]
 80078b4:	4934      	ldr	r1, [pc, #208]	@ (8007988 <USB_ActivateEndpoint+0x5d4>)
 80078b6:	430a      	orrs	r2, r1
 80078b8:	b292      	uxth	r2, r2
 80078ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	18d2      	adds	r2, r2, r3
 80078c6:	213c      	movs	r1, #60	@ 0x3c
 80078c8:	187b      	adds	r3, r7, r1
 80078ca:	8812      	ldrh	r2, [r2, #0]
 80078cc:	801a      	strh	r2, [r3, #0]
 80078ce:	187b      	adds	r3, r7, r1
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	2240      	movs	r2, #64	@ 0x40
 80078d4:	4013      	ands	r3, r2
 80078d6:	d016      	beq.n	8007906 <USB_ActivateEndpoint+0x552>
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	18d3      	adds	r3, r2, r3
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	203a      	movs	r0, #58	@ 0x3a
 80078e8:	183b      	adds	r3, r7, r0
 80078ea:	4926      	ldr	r1, [pc, #152]	@ (8007984 <USB_ActivateEndpoint+0x5d0>)
 80078ec:	400a      	ands	r2, r1
 80078ee:	801a      	strh	r2, [r3, #0]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	18d3      	adds	r3, r2, r3
 80078fa:	183a      	adds	r2, r7, r0
 80078fc:	8812      	ldrh	r2, [r2, #0]
 80078fe:	4928      	ldr	r1, [pc, #160]	@ (80079a0 <USB_ActivateEndpoint+0x5ec>)
 8007900:	430a      	orrs	r2, r1
 8007902:	b292      	uxth	r2, r2
 8007904:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	18d3      	adds	r3, r2, r3
 8007910:	881b      	ldrh	r3, [r3, #0]
 8007912:	b29a      	uxth	r2, r3
 8007914:	2038      	movs	r0, #56	@ 0x38
 8007916:	183b      	adds	r3, r7, r0
 8007918:	491c      	ldr	r1, [pc, #112]	@ (800798c <USB_ActivateEndpoint+0x5d8>)
 800791a:	400a      	ands	r2, r1
 800791c:	801a      	strh	r2, [r3, #0]
 800791e:	183b      	adds	r3, r7, r0
 8007920:	183a      	adds	r2, r7, r0
 8007922:	8812      	ldrh	r2, [r2, #0]
 8007924:	2180      	movs	r1, #128	@ 0x80
 8007926:	0149      	lsls	r1, r1, #5
 8007928:	404a      	eors	r2, r1
 800792a:	801a      	strh	r2, [r3, #0]
 800792c:	183b      	adds	r3, r7, r0
 800792e:	183a      	adds	r2, r7, r0
 8007930:	8812      	ldrh	r2, [r2, #0]
 8007932:	2180      	movs	r1, #128	@ 0x80
 8007934:	0189      	lsls	r1, r1, #6
 8007936:	404a      	eors	r2, r1
 8007938:	801a      	strh	r2, [r3, #0]
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	18d3      	adds	r3, r2, r3
 8007944:	183a      	adds	r2, r7, r0
 8007946:	8812      	ldrh	r2, [r2, #0]
 8007948:	4911      	ldr	r1, [pc, #68]	@ (8007990 <USB_ActivateEndpoint+0x5dc>)
 800794a:	430a      	orrs	r2, r1
 800794c:	b292      	uxth	r2, r2
 800794e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	18d3      	adds	r3, r2, r3
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	b29a      	uxth	r2, r3
 800795e:	2036      	movs	r0, #54	@ 0x36
 8007960:	183b      	adds	r3, r7, r0
 8007962:	4910      	ldr	r1, [pc, #64]	@ (80079a4 <USB_ActivateEndpoint+0x5f0>)
 8007964:	400a      	ands	r2, r1
 8007966:	801a      	strh	r2, [r3, #0]
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	18d3      	adds	r3, r2, r3
 8007972:	183a      	adds	r2, r7, r0
 8007974:	8812      	ldrh	r2, [r2, #0]
 8007976:	4906      	ldr	r1, [pc, #24]	@ (8007990 <USB_ActivateEndpoint+0x5dc>)
 8007978:	430a      	orrs	r2, r1
 800797a:	b292      	uxth	r2, r2
 800797c:	801a      	strh	r2, [r3, #0]
 800797e:	e0ae      	b.n	8007ade <USB_ActivateEndpoint+0x72a>
 8007980:	ffff8000 	.word	0xffff8000
 8007984:	ffff8f8f 	.word	0xffff8f8f
 8007988:	ffffc080 	.word	0xffffc080
 800798c:	ffffbf8f 	.word	0xffffbf8f
 8007990:	ffff8080 	.word	0xffff8080
 8007994:	ffff8180 	.word	0xffff8180
 8007998:	ffff8e8f 	.word	0xffff8e8f
 800799c:	00000404 	.word	0x00000404
 80079a0:	ffff80c0 	.word	0xffff80c0
 80079a4:	ffff8fbf 	.word	0xffff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	18d2      	adds	r2, r2, r3
 80079b2:	214e      	movs	r1, #78	@ 0x4e
 80079b4:	187b      	adds	r3, r7, r1
 80079b6:	8812      	ldrh	r2, [r2, #0]
 80079b8:	801a      	strh	r2, [r3, #0]
 80079ba:	187b      	adds	r3, r7, r1
 80079bc:	881a      	ldrh	r2, [r3, #0]
 80079be:	2380      	movs	r3, #128	@ 0x80
 80079c0:	01db      	lsls	r3, r3, #7
 80079c2:	4013      	ands	r3, r2
 80079c4:	d016      	beq.n	80079f4 <USB_ActivateEndpoint+0x640>
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	18d3      	adds	r3, r2, r3
 80079d0:	881b      	ldrh	r3, [r3, #0]
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	204c      	movs	r0, #76	@ 0x4c
 80079d6:	183b      	adds	r3, r7, r0
 80079d8:	4944      	ldr	r1, [pc, #272]	@ (8007aec <USB_ActivateEndpoint+0x738>)
 80079da:	400a      	ands	r2, r1
 80079dc:	801a      	strh	r2, [r3, #0]
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	18d3      	adds	r3, r2, r3
 80079e8:	183a      	adds	r2, r7, r0
 80079ea:	8812      	ldrh	r2, [r2, #0]
 80079ec:	4940      	ldr	r1, [pc, #256]	@ (8007af0 <USB_ActivateEndpoint+0x73c>)
 80079ee:	430a      	orrs	r2, r1
 80079f0:	b292      	uxth	r2, r2
 80079f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	18d2      	adds	r2, r2, r3
 80079fe:	214a      	movs	r1, #74	@ 0x4a
 8007a00:	187b      	adds	r3, r7, r1
 8007a02:	8812      	ldrh	r2, [r2, #0]
 8007a04:	801a      	strh	r2, [r3, #0]
 8007a06:	187b      	adds	r3, r7, r1
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	2240      	movs	r2, #64	@ 0x40
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	d016      	beq.n	8007a3e <USB_ActivateEndpoint+0x68a>
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	18d3      	adds	r3, r2, r3
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	2048      	movs	r0, #72	@ 0x48
 8007a20:	183b      	adds	r3, r7, r0
 8007a22:	4932      	ldr	r1, [pc, #200]	@ (8007aec <USB_ActivateEndpoint+0x738>)
 8007a24:	400a      	ands	r2, r1
 8007a26:	801a      	strh	r2, [r3, #0]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	18d3      	adds	r3, r2, r3
 8007a32:	183a      	adds	r2, r7, r0
 8007a34:	8812      	ldrh	r2, [r2, #0]
 8007a36:	492f      	ldr	r1, [pc, #188]	@ (8007af4 <USB_ActivateEndpoint+0x740>)
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	b292      	uxth	r2, r2
 8007a3c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	78db      	ldrb	r3, [r3, #3]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d01d      	beq.n	8007a82 <USB_ActivateEndpoint+0x6ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	18d3      	adds	r3, r2, r3
 8007a50:	881b      	ldrh	r3, [r3, #0]
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	2044      	movs	r0, #68	@ 0x44
 8007a56:	183b      	adds	r3, r7, r0
 8007a58:	4927      	ldr	r1, [pc, #156]	@ (8007af8 <USB_ActivateEndpoint+0x744>)
 8007a5a:	400a      	ands	r2, r1
 8007a5c:	801a      	strh	r2, [r3, #0]
 8007a5e:	183b      	adds	r3, r7, r0
 8007a60:	183a      	adds	r2, r7, r0
 8007a62:	8812      	ldrh	r2, [r2, #0]
 8007a64:	2120      	movs	r1, #32
 8007a66:	404a      	eors	r2, r1
 8007a68:	801a      	strh	r2, [r3, #0]
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	18d3      	adds	r3, r2, r3
 8007a74:	183a      	adds	r2, r7, r0
 8007a76:	8812      	ldrh	r2, [r2, #0]
 8007a78:	4920      	ldr	r1, [pc, #128]	@ (8007afc <USB_ActivateEndpoint+0x748>)
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	b292      	uxth	r2, r2
 8007a7e:	801a      	strh	r2, [r3, #0]
 8007a80:	e016      	b.n	8007ab0 <USB_ActivateEndpoint+0x6fc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	18d3      	adds	r3, r2, r3
 8007a8c:	881b      	ldrh	r3, [r3, #0]
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	2046      	movs	r0, #70	@ 0x46
 8007a92:	183b      	adds	r3, r7, r0
 8007a94:	4918      	ldr	r1, [pc, #96]	@ (8007af8 <USB_ActivateEndpoint+0x744>)
 8007a96:	400a      	ands	r2, r1
 8007a98:	801a      	strh	r2, [r3, #0]
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	18d3      	adds	r3, r2, r3
 8007aa4:	183a      	adds	r2, r7, r0
 8007aa6:	8812      	ldrh	r2, [r2, #0]
 8007aa8:	4914      	ldr	r1, [pc, #80]	@ (8007afc <USB_ActivateEndpoint+0x748>)
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	b292      	uxth	r2, r2
 8007aae:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	18d3      	adds	r3, r2, r3
 8007aba:	881b      	ldrh	r3, [r3, #0]
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	2042      	movs	r0, #66	@ 0x42
 8007ac0:	183b      	adds	r3, r7, r0
 8007ac2:	490f      	ldr	r1, [pc, #60]	@ (8007b00 <USB_ActivateEndpoint+0x74c>)
 8007ac4:	400a      	ands	r2, r1
 8007ac6:	801a      	strh	r2, [r3, #0]
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	18d3      	adds	r3, r2, r3
 8007ad2:	183a      	adds	r2, r7, r0
 8007ad4:	8812      	ldrh	r2, [r2, #0]
 8007ad6:	4909      	ldr	r1, [pc, #36]	@ (8007afc <USB_ActivateEndpoint+0x748>)
 8007ad8:	430a      	orrs	r2, r1
 8007ada:	b292      	uxth	r2, r2
 8007adc:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007ade:	236f      	movs	r3, #111	@ 0x6f
 8007ae0:	18fb      	adds	r3, r7, r3
 8007ae2:	781b      	ldrb	r3, [r3, #0]
}
 8007ae4:	0018      	movs	r0, r3
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	b01c      	add	sp, #112	@ 0x70
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	ffff8f8f 	.word	0xffff8f8f
 8007af0:	ffffc080 	.word	0xffffc080
 8007af4:	ffff80c0 	.word	0xffff80c0
 8007af8:	ffff8fbf 	.word	0xffff8fbf
 8007afc:	ffff8080 	.word	0xffff8080
 8007b00:	ffffbf8f 	.word	0xffffbf8f

08007b04 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b08c      	sub	sp, #48	@ 0x30
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	7b1b      	ldrb	r3, [r3, #12]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d000      	beq.n	8007b18 <USB_DeactivateEndpoint+0x14>
 8007b16:	e07e      	b.n	8007c16 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	785b      	ldrb	r3, [r3, #1]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d03c      	beq.n	8007b9a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	18d2      	adds	r2, r2, r3
 8007b2a:	210c      	movs	r1, #12
 8007b2c:	187b      	adds	r3, r7, r1
 8007b2e:	8812      	ldrh	r2, [r2, #0]
 8007b30:	801a      	strh	r2, [r3, #0]
 8007b32:	187b      	adds	r3, r7, r1
 8007b34:	881b      	ldrh	r3, [r3, #0]
 8007b36:	2240      	movs	r2, #64	@ 0x40
 8007b38:	4013      	ands	r3, r2
 8007b3a:	d016      	beq.n	8007b6a <USB_DeactivateEndpoint+0x66>
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	18d3      	adds	r3, r2, r3
 8007b46:	881b      	ldrh	r3, [r3, #0]
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	200a      	movs	r0, #10
 8007b4c:	183b      	adds	r3, r7, r0
 8007b4e:	49c7      	ldr	r1, [pc, #796]	@ (8007e6c <USB_DeactivateEndpoint+0x368>)
 8007b50:	400a      	ands	r2, r1
 8007b52:	801a      	strh	r2, [r3, #0]
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	18d3      	adds	r3, r2, r3
 8007b5e:	183a      	adds	r2, r7, r0
 8007b60:	8812      	ldrh	r2, [r2, #0]
 8007b62:	49c3      	ldr	r1, [pc, #780]	@ (8007e70 <USB_DeactivateEndpoint+0x36c>)
 8007b64:	430a      	orrs	r2, r1
 8007b66:	b292      	uxth	r2, r2
 8007b68:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	18d3      	adds	r3, r2, r3
 8007b74:	881b      	ldrh	r3, [r3, #0]
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	2008      	movs	r0, #8
 8007b7a:	183b      	adds	r3, r7, r0
 8007b7c:	49bd      	ldr	r1, [pc, #756]	@ (8007e74 <USB_DeactivateEndpoint+0x370>)
 8007b7e:	400a      	ands	r2, r1
 8007b80:	801a      	strh	r2, [r3, #0]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	18d3      	adds	r3, r2, r3
 8007b8c:	183a      	adds	r2, r7, r0
 8007b8e:	8812      	ldrh	r2, [r2, #0]
 8007b90:	49b9      	ldr	r1, [pc, #740]	@ (8007e78 <USB_DeactivateEndpoint+0x374>)
 8007b92:	430a      	orrs	r2, r1
 8007b94:	b292      	uxth	r2, r2
 8007b96:	801a      	strh	r2, [r3, #0]
 8007b98:	e163      	b.n	8007e62 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	18d2      	adds	r2, r2, r3
 8007ba4:	2112      	movs	r1, #18
 8007ba6:	187b      	adds	r3, r7, r1
 8007ba8:	8812      	ldrh	r2, [r2, #0]
 8007baa:	801a      	strh	r2, [r3, #0]
 8007bac:	187b      	adds	r3, r7, r1
 8007bae:	881a      	ldrh	r2, [r3, #0]
 8007bb0:	2380      	movs	r3, #128	@ 0x80
 8007bb2:	01db      	lsls	r3, r3, #7
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	d016      	beq.n	8007be6 <USB_DeactivateEndpoint+0xe2>
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	18d3      	adds	r3, r2, r3
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	2010      	movs	r0, #16
 8007bc8:	183b      	adds	r3, r7, r0
 8007bca:	49a8      	ldr	r1, [pc, #672]	@ (8007e6c <USB_DeactivateEndpoint+0x368>)
 8007bcc:	400a      	ands	r2, r1
 8007bce:	801a      	strh	r2, [r3, #0]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	18d3      	adds	r3, r2, r3
 8007bda:	183a      	adds	r2, r7, r0
 8007bdc:	8812      	ldrh	r2, [r2, #0]
 8007bde:	49a7      	ldr	r1, [pc, #668]	@ (8007e7c <USB_DeactivateEndpoint+0x378>)
 8007be0:	430a      	orrs	r2, r1
 8007be2:	b292      	uxth	r2, r2
 8007be4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	18d3      	adds	r3, r2, r3
 8007bf0:	881b      	ldrh	r3, [r3, #0]
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	200e      	movs	r0, #14
 8007bf6:	183b      	adds	r3, r7, r0
 8007bf8:	49a1      	ldr	r1, [pc, #644]	@ (8007e80 <USB_DeactivateEndpoint+0x37c>)
 8007bfa:	400a      	ands	r2, r1
 8007bfc:	801a      	strh	r2, [r3, #0]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	18d3      	adds	r3, r2, r3
 8007c08:	183a      	adds	r2, r7, r0
 8007c0a:	8812      	ldrh	r2, [r2, #0]
 8007c0c:	499a      	ldr	r1, [pc, #616]	@ (8007e78 <USB_DeactivateEndpoint+0x374>)
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	b292      	uxth	r2, r2
 8007c12:	801a      	strh	r2, [r3, #0]
 8007c14:	e125      	b.n	8007e62 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	785b      	ldrb	r3, [r3, #1]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d000      	beq.n	8007c20 <USB_DeactivateEndpoint+0x11c>
 8007c1e:	e090      	b.n	8007d42 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	18d2      	adds	r2, r2, r3
 8007c2a:	2120      	movs	r1, #32
 8007c2c:	187b      	adds	r3, r7, r1
 8007c2e:	8812      	ldrh	r2, [r2, #0]
 8007c30:	801a      	strh	r2, [r3, #0]
 8007c32:	187b      	adds	r3, r7, r1
 8007c34:	881a      	ldrh	r2, [r3, #0]
 8007c36:	2380      	movs	r3, #128	@ 0x80
 8007c38:	01db      	lsls	r3, r3, #7
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	d016      	beq.n	8007c6c <USB_DeactivateEndpoint+0x168>
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	18d3      	adds	r3, r2, r3
 8007c48:	881b      	ldrh	r3, [r3, #0]
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	201e      	movs	r0, #30
 8007c4e:	183b      	adds	r3, r7, r0
 8007c50:	4986      	ldr	r1, [pc, #536]	@ (8007e6c <USB_DeactivateEndpoint+0x368>)
 8007c52:	400a      	ands	r2, r1
 8007c54:	801a      	strh	r2, [r3, #0]
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	18d3      	adds	r3, r2, r3
 8007c60:	183a      	adds	r2, r7, r0
 8007c62:	8812      	ldrh	r2, [r2, #0]
 8007c64:	4985      	ldr	r1, [pc, #532]	@ (8007e7c <USB_DeactivateEndpoint+0x378>)
 8007c66:	430a      	orrs	r2, r1
 8007c68:	b292      	uxth	r2, r2
 8007c6a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	18d2      	adds	r2, r2, r3
 8007c76:	211c      	movs	r1, #28
 8007c78:	187b      	adds	r3, r7, r1
 8007c7a:	8812      	ldrh	r2, [r2, #0]
 8007c7c:	801a      	strh	r2, [r3, #0]
 8007c7e:	187b      	adds	r3, r7, r1
 8007c80:	881b      	ldrh	r3, [r3, #0]
 8007c82:	2240      	movs	r2, #64	@ 0x40
 8007c84:	4013      	ands	r3, r2
 8007c86:	d016      	beq.n	8007cb6 <USB_DeactivateEndpoint+0x1b2>
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	18d3      	adds	r3, r2, r3
 8007c92:	881b      	ldrh	r3, [r3, #0]
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	201a      	movs	r0, #26
 8007c98:	183b      	adds	r3, r7, r0
 8007c9a:	4974      	ldr	r1, [pc, #464]	@ (8007e6c <USB_DeactivateEndpoint+0x368>)
 8007c9c:	400a      	ands	r2, r1
 8007c9e:	801a      	strh	r2, [r3, #0]
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	18d3      	adds	r3, r2, r3
 8007caa:	183a      	adds	r2, r7, r0
 8007cac:	8812      	ldrh	r2, [r2, #0]
 8007cae:	4970      	ldr	r1, [pc, #448]	@ (8007e70 <USB_DeactivateEndpoint+0x36c>)
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	b292      	uxth	r2, r2
 8007cb4:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	18d3      	adds	r3, r2, r3
 8007cc0:	881b      	ldrh	r3, [r3, #0]
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	2018      	movs	r0, #24
 8007cc6:	183b      	adds	r3, r7, r0
 8007cc8:	4968      	ldr	r1, [pc, #416]	@ (8007e6c <USB_DeactivateEndpoint+0x368>)
 8007cca:	400a      	ands	r2, r1
 8007ccc:	801a      	strh	r2, [r3, #0]
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	18d3      	adds	r3, r2, r3
 8007cd8:	183a      	adds	r2, r7, r0
 8007cda:	8812      	ldrh	r2, [r2, #0]
 8007cdc:	4964      	ldr	r1, [pc, #400]	@ (8007e70 <USB_DeactivateEndpoint+0x36c>)
 8007cde:	430a      	orrs	r2, r1
 8007ce0:	b292      	uxth	r2, r2
 8007ce2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	18d3      	adds	r3, r2, r3
 8007cee:	881b      	ldrh	r3, [r3, #0]
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	2016      	movs	r0, #22
 8007cf4:	183b      	adds	r3, r7, r0
 8007cf6:	4962      	ldr	r1, [pc, #392]	@ (8007e80 <USB_DeactivateEndpoint+0x37c>)
 8007cf8:	400a      	ands	r2, r1
 8007cfa:	801a      	strh	r2, [r3, #0]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	18d3      	adds	r3, r2, r3
 8007d06:	183a      	adds	r2, r7, r0
 8007d08:	8812      	ldrh	r2, [r2, #0]
 8007d0a:	495b      	ldr	r1, [pc, #364]	@ (8007e78 <USB_DeactivateEndpoint+0x374>)
 8007d0c:	430a      	orrs	r2, r1
 8007d0e:	b292      	uxth	r2, r2
 8007d10:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	18d3      	adds	r3, r2, r3
 8007d1c:	881b      	ldrh	r3, [r3, #0]
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	2014      	movs	r0, #20
 8007d22:	183b      	adds	r3, r7, r0
 8007d24:	4953      	ldr	r1, [pc, #332]	@ (8007e74 <USB_DeactivateEndpoint+0x370>)
 8007d26:	400a      	ands	r2, r1
 8007d28:	801a      	strh	r2, [r3, #0]
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	18d3      	adds	r3, r2, r3
 8007d34:	183a      	adds	r2, r7, r0
 8007d36:	8812      	ldrh	r2, [r2, #0]
 8007d38:	494f      	ldr	r1, [pc, #316]	@ (8007e78 <USB_DeactivateEndpoint+0x374>)
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	b292      	uxth	r2, r2
 8007d3e:	801a      	strh	r2, [r3, #0]
 8007d40:	e08f      	b.n	8007e62 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	18d2      	adds	r2, r2, r3
 8007d4c:	212e      	movs	r1, #46	@ 0x2e
 8007d4e:	187b      	adds	r3, r7, r1
 8007d50:	8812      	ldrh	r2, [r2, #0]
 8007d52:	801a      	strh	r2, [r3, #0]
 8007d54:	187b      	adds	r3, r7, r1
 8007d56:	881a      	ldrh	r2, [r3, #0]
 8007d58:	2380      	movs	r3, #128	@ 0x80
 8007d5a:	01db      	lsls	r3, r3, #7
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	d016      	beq.n	8007d8e <USB_DeactivateEndpoint+0x28a>
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	18d3      	adds	r3, r2, r3
 8007d6a:	881b      	ldrh	r3, [r3, #0]
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	202c      	movs	r0, #44	@ 0x2c
 8007d70:	183b      	adds	r3, r7, r0
 8007d72:	493e      	ldr	r1, [pc, #248]	@ (8007e6c <USB_DeactivateEndpoint+0x368>)
 8007d74:	400a      	ands	r2, r1
 8007d76:	801a      	strh	r2, [r3, #0]
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	18d3      	adds	r3, r2, r3
 8007d82:	183a      	adds	r2, r7, r0
 8007d84:	8812      	ldrh	r2, [r2, #0]
 8007d86:	493d      	ldr	r1, [pc, #244]	@ (8007e7c <USB_DeactivateEndpoint+0x378>)
 8007d88:	430a      	orrs	r2, r1
 8007d8a:	b292      	uxth	r2, r2
 8007d8c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	18d2      	adds	r2, r2, r3
 8007d98:	212a      	movs	r1, #42	@ 0x2a
 8007d9a:	187b      	adds	r3, r7, r1
 8007d9c:	8812      	ldrh	r2, [r2, #0]
 8007d9e:	801a      	strh	r2, [r3, #0]
 8007da0:	187b      	adds	r3, r7, r1
 8007da2:	881b      	ldrh	r3, [r3, #0]
 8007da4:	2240      	movs	r2, #64	@ 0x40
 8007da6:	4013      	ands	r3, r2
 8007da8:	d016      	beq.n	8007dd8 <USB_DeactivateEndpoint+0x2d4>
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	18d3      	adds	r3, r2, r3
 8007db4:	881b      	ldrh	r3, [r3, #0]
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	2028      	movs	r0, #40	@ 0x28
 8007dba:	183b      	adds	r3, r7, r0
 8007dbc:	492b      	ldr	r1, [pc, #172]	@ (8007e6c <USB_DeactivateEndpoint+0x368>)
 8007dbe:	400a      	ands	r2, r1
 8007dc0:	801a      	strh	r2, [r3, #0]
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	18d3      	adds	r3, r2, r3
 8007dcc:	183a      	adds	r2, r7, r0
 8007dce:	8812      	ldrh	r2, [r2, #0]
 8007dd0:	4927      	ldr	r1, [pc, #156]	@ (8007e70 <USB_DeactivateEndpoint+0x36c>)
 8007dd2:	430a      	orrs	r2, r1
 8007dd4:	b292      	uxth	r2, r2
 8007dd6:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	18d3      	adds	r3, r2, r3
 8007de2:	881b      	ldrh	r3, [r3, #0]
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	2026      	movs	r0, #38	@ 0x26
 8007de8:	183b      	adds	r3, r7, r0
 8007dea:	4920      	ldr	r1, [pc, #128]	@ (8007e6c <USB_DeactivateEndpoint+0x368>)
 8007dec:	400a      	ands	r2, r1
 8007dee:	801a      	strh	r2, [r3, #0]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	18d3      	adds	r3, r2, r3
 8007dfa:	183a      	adds	r2, r7, r0
 8007dfc:	8812      	ldrh	r2, [r2, #0]
 8007dfe:	491f      	ldr	r1, [pc, #124]	@ (8007e7c <USB_DeactivateEndpoint+0x378>)
 8007e00:	430a      	orrs	r2, r1
 8007e02:	b292      	uxth	r2, r2
 8007e04:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	18d3      	adds	r3, r2, r3
 8007e10:	881b      	ldrh	r3, [r3, #0]
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	2024      	movs	r0, #36	@ 0x24
 8007e16:	183b      	adds	r3, r7, r0
 8007e18:	4916      	ldr	r1, [pc, #88]	@ (8007e74 <USB_DeactivateEndpoint+0x370>)
 8007e1a:	400a      	ands	r2, r1
 8007e1c:	801a      	strh	r2, [r3, #0]
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	18d3      	adds	r3, r2, r3
 8007e28:	183a      	adds	r2, r7, r0
 8007e2a:	8812      	ldrh	r2, [r2, #0]
 8007e2c:	4912      	ldr	r1, [pc, #72]	@ (8007e78 <USB_DeactivateEndpoint+0x374>)
 8007e2e:	430a      	orrs	r2, r1
 8007e30:	b292      	uxth	r2, r2
 8007e32:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	18d3      	adds	r3, r2, r3
 8007e3e:	881b      	ldrh	r3, [r3, #0]
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	2022      	movs	r0, #34	@ 0x22
 8007e44:	183b      	adds	r3, r7, r0
 8007e46:	490e      	ldr	r1, [pc, #56]	@ (8007e80 <USB_DeactivateEndpoint+0x37c>)
 8007e48:	400a      	ands	r2, r1
 8007e4a:	801a      	strh	r2, [r3, #0]
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	18d3      	adds	r3, r2, r3
 8007e56:	183a      	adds	r2, r7, r0
 8007e58:	8812      	ldrh	r2, [r2, #0]
 8007e5a:	4907      	ldr	r1, [pc, #28]	@ (8007e78 <USB_DeactivateEndpoint+0x374>)
 8007e5c:	430a      	orrs	r2, r1
 8007e5e:	b292      	uxth	r2, r2
 8007e60:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	0018      	movs	r0, r3
 8007e66:	46bd      	mov	sp, r7
 8007e68:	b00c      	add	sp, #48	@ 0x30
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	ffff8f8f 	.word	0xffff8f8f
 8007e70:	ffff80c0 	.word	0xffff80c0
 8007e74:	ffff8fbf 	.word	0xffff8fbf
 8007e78:	ffff8080 	.word	0xffff8080
 8007e7c:	ffffc080 	.word	0xffffc080
 8007e80:	ffffbf8f 	.word	0xffffbf8f

08007e84 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e84:	b590      	push	{r4, r7, lr}
 8007e86:	b0c3      	sub	sp, #268	@ 0x10c
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	785b      	ldrb	r3, [r3, #1]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d001      	beq.n	8007e9a <USB_EPStartXfer+0x16>
 8007e96:	f000 fd2d 	bl	80088f4 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	699a      	ldr	r2, [r3, #24]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d905      	bls.n	8007eb2 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	1d7a      	adds	r2, r7, #5
 8007eac:	32ff      	adds	r2, #255	@ 0xff
 8007eae:	6013      	str	r3, [r2, #0]
 8007eb0:	e004      	b.n	8007ebc <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	1d7a      	adds	r2, r7, #5
 8007eb8:	32ff      	adds	r2, #255	@ 0xff
 8007eba:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	7b1b      	ldrb	r3, [r3, #12]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d125      	bne.n	8007f10 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	6959      	ldr	r1, [r3, #20]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	88da      	ldrh	r2, [r3, #6]
 8007ecc:	1d7b      	adds	r3, r7, #5
 8007ece:	33ff      	adds	r3, #255	@ 0xff
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f001 fa3f 	bl	8009358 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	613b      	str	r3, [r7, #16]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2250      	movs	r2, #80	@ 0x50
 8007ee2:	5a9b      	ldrh	r3, [r3, r2]
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	001a      	movs	r2, r3
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	189b      	adds	r3, r3, r2
 8007eec:	613b      	str	r3, [r7, #16]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	00da      	lsls	r2, r3, #3
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	18d3      	adds	r3, r2, r3
 8007ef8:	4ad7      	ldr	r2, [pc, #860]	@ (8008258 <USB_EPStartXfer+0x3d4>)
 8007efa:	4694      	mov	ip, r2
 8007efc:	4463      	add	r3, ip
 8007efe:	60fb      	str	r3, [r7, #12]
 8007f00:	1d7b      	adds	r3, r7, #5
 8007f02:	33ff      	adds	r3, #255	@ 0xff
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	801a      	strh	r2, [r3, #0]
 8007f0c:	f000 fccd 	bl	80088aa <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	78db      	ldrb	r3, [r3, #3]
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d000      	beq.n	8007f1a <USB_EPStartXfer+0x96>
 8007f18:	e362      	b.n	80085e0 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	6a1a      	ldr	r2, [r3, #32]
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d800      	bhi.n	8007f28 <USB_EPStartXfer+0xa4>
 8007f26:	e309      	b.n	800853c <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	18d3      	adds	r3, r2, r3
 8007f32:	881b      	ldrh	r3, [r3, #0]
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	2056      	movs	r0, #86	@ 0x56
 8007f38:	183b      	adds	r3, r7, r0
 8007f3a:	49c8      	ldr	r1, [pc, #800]	@ (800825c <USB_EPStartXfer+0x3d8>)
 8007f3c:	400a      	ands	r2, r1
 8007f3e:	801a      	strh	r2, [r3, #0]
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	18d3      	adds	r3, r2, r3
 8007f4a:	183a      	adds	r2, r7, r0
 8007f4c:	8812      	ldrh	r2, [r2, #0]
 8007f4e:	49c4      	ldr	r1, [pc, #784]	@ (8008260 <USB_EPStartXfer+0x3dc>)
 8007f50:	430a      	orrs	r2, r1
 8007f52:	b292      	uxth	r2, r2
 8007f54:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	6a1a      	ldr	r2, [r3, #32]
 8007f5a:	1d7b      	adds	r3, r7, #5
 8007f5c:	33ff      	adds	r3, #255	@ 0xff
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	1ad2      	subs	r2, r2, r3
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	18d3      	adds	r3, r2, r3
 8007f70:	881b      	ldrh	r3, [r3, #0]
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	001a      	movs	r2, r3
 8007f76:	2340      	movs	r3, #64	@ 0x40
 8007f78:	4013      	ands	r3, r2
 8007f7a:	d100      	bne.n	8007f7e <USB_EPStartXfer+0xfa>
 8007f7c:	e176      	b.n	800826c <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	785b      	ldrb	r3, [r3, #1]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d000      	beq.n	8007f8c <USB_EPStartXfer+0x108>
 8007f8a:	e074      	b.n	8008076 <USB_EPStartXfer+0x1f2>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2250      	movs	r2, #80	@ 0x50
 8007f94:	5a9b      	ldrh	r3, [r3, r2]
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	001a      	movs	r2, r3
 8007f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f9c:	189b      	adds	r3, r3, r2
 8007f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	00da      	lsls	r2, r3, #3
 8007fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa8:	18d3      	adds	r3, r2, r3
 8007faa:	4aae      	ldr	r2, [pc, #696]	@ (8008264 <USB_EPStartXfer+0x3e0>)
 8007fac:	4694      	mov	ip, r2
 8007fae:	4463      	add	r3, ip
 8007fb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	059b      	lsls	r3, r3, #22
 8007fba:	0d9b      	lsrs	r3, r3, #22
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc0:	801a      	strh	r2, [r3, #0]
 8007fc2:	1d7b      	adds	r3, r7, #5
 8007fc4:	33ff      	adds	r3, #255	@ 0xff
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d108      	bne.n	8007fde <USB_EPStartXfer+0x15a>
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fce:	881b      	ldrh	r3, [r3, #0]
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	4aa5      	ldr	r2, [pc, #660]	@ (8008268 <USB_EPStartXfer+0x3e4>)
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fda:	801a      	strh	r2, [r3, #0]
 8007fdc:	e066      	b.n	80080ac <USB_EPStartXfer+0x228>
 8007fde:	1d7b      	adds	r3, r7, #5
 8007fe0:	33ff      	adds	r3, #255	@ 0xff
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007fe6:	d821      	bhi.n	800802c <USB_EPStartXfer+0x1a8>
 8007fe8:	1d7b      	adds	r3, r7, #5
 8007fea:	33ff      	adds	r3, #255	@ 0xff
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	085b      	lsrs	r3, r3, #1
 8007ff0:	1c7a      	adds	r2, r7, #1
 8007ff2:	32ff      	adds	r2, #255	@ 0xff
 8007ff4:	6013      	str	r3, [r2, #0]
 8007ff6:	1d7b      	adds	r3, r7, #5
 8007ff8:	33ff      	adds	r3, #255	@ 0xff
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	4013      	ands	r3, r2
 8008000:	d006      	beq.n	8008010 <USB_EPStartXfer+0x18c>
 8008002:	1c7b      	adds	r3, r7, #1
 8008004:	33ff      	adds	r3, #255	@ 0xff
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	3301      	adds	r3, #1
 800800a:	1c7a      	adds	r2, r7, #1
 800800c:	32ff      	adds	r2, #255	@ 0xff
 800800e:	6013      	str	r3, [r2, #0]
 8008010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008012:	881b      	ldrh	r3, [r3, #0]
 8008014:	b29a      	uxth	r2, r3
 8008016:	1c7b      	adds	r3, r7, #1
 8008018:	33ff      	adds	r3, #255	@ 0xff
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	b29b      	uxth	r3, r3
 800801e:	029b      	lsls	r3, r3, #10
 8008020:	b29b      	uxth	r3, r3
 8008022:	4313      	orrs	r3, r2
 8008024:	b29a      	uxth	r2, r3
 8008026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008028:	801a      	strh	r2, [r3, #0]
 800802a:	e03f      	b.n	80080ac <USB_EPStartXfer+0x228>
 800802c:	1d7b      	adds	r3, r7, #5
 800802e:	33ff      	adds	r3, #255	@ 0xff
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	095b      	lsrs	r3, r3, #5
 8008034:	1c7a      	adds	r2, r7, #1
 8008036:	32ff      	adds	r2, #255	@ 0xff
 8008038:	6013      	str	r3, [r2, #0]
 800803a:	1d7b      	adds	r3, r7, #5
 800803c:	33ff      	adds	r3, #255	@ 0xff
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	221f      	movs	r2, #31
 8008042:	4013      	ands	r3, r2
 8008044:	d106      	bne.n	8008054 <USB_EPStartXfer+0x1d0>
 8008046:	1c7b      	adds	r3, r7, #1
 8008048:	33ff      	adds	r3, #255	@ 0xff
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3b01      	subs	r3, #1
 800804e:	1c7a      	adds	r2, r7, #1
 8008050:	32ff      	adds	r2, #255	@ 0xff
 8008052:	6013      	str	r3, [r2, #0]
 8008054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008056:	881b      	ldrh	r3, [r3, #0]
 8008058:	b29a      	uxth	r2, r3
 800805a:	1c7b      	adds	r3, r7, #1
 800805c:	33ff      	adds	r3, #255	@ 0xff
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	b29b      	uxth	r3, r3
 8008062:	029b      	lsls	r3, r3, #10
 8008064:	b29b      	uxth	r3, r3
 8008066:	4313      	orrs	r3, r2
 8008068:	b29b      	uxth	r3, r3
 800806a:	4a7f      	ldr	r2, [pc, #508]	@ (8008268 <USB_EPStartXfer+0x3e4>)
 800806c:	4313      	orrs	r3, r2
 800806e:	b29a      	uxth	r2, r3
 8008070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008072:	801a      	strh	r2, [r3, #0]
 8008074:	e01a      	b.n	80080ac <USB_EPStartXfer+0x228>
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	785b      	ldrb	r3, [r3, #1]
 800807a:	2b01      	cmp	r3, #1
 800807c:	d116      	bne.n	80080ac <USB_EPStartXfer+0x228>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2250      	movs	r2, #80	@ 0x50
 8008082:	5a9b      	ldrh	r3, [r3, r2]
 8008084:	b29b      	uxth	r3, r3
 8008086:	001a      	movs	r2, r3
 8008088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808a:	189b      	adds	r3, r3, r2
 800808c:	633b      	str	r3, [r7, #48]	@ 0x30
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	00da      	lsls	r2, r3, #3
 8008094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008096:	18d3      	adds	r3, r2, r3
 8008098:	4a72      	ldr	r2, [pc, #456]	@ (8008264 <USB_EPStartXfer+0x3e0>)
 800809a:	4694      	mov	ip, r2
 800809c:	4463      	add	r3, ip
 800809e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080a0:	1d7b      	adds	r3, r7, #5
 80080a2:	33ff      	adds	r3, #255	@ 0xff
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80080ac:	2076      	movs	r0, #118	@ 0x76
 80080ae:	183b      	adds	r3, r7, r0
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	8952      	ldrh	r2, [r2, #10]
 80080b4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	6959      	ldr	r1, [r3, #20]
 80080ba:	1d7b      	adds	r3, r7, #5
 80080bc:	33ff      	adds	r3, #255	@ 0xff
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	b29c      	uxth	r4, r3
 80080c2:	183b      	adds	r3, r7, r0
 80080c4:	881a      	ldrh	r2, [r3, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	0023      	movs	r3, r4
 80080ca:	f001 f945 	bl	8009358 <USB_WritePMA>
            ep->xfer_buff += len;
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	695a      	ldr	r2, [r3, #20]
 80080d2:	1d7b      	adds	r3, r7, #5
 80080d4:	33ff      	adds	r3, #255	@ 0xff
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	18d2      	adds	r2, r2, r3
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	6a1a      	ldr	r2, [r3, #32]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d908      	bls.n	80080fc <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	6a1a      	ldr	r2, [r3, #32]
 80080ee:	1d7b      	adds	r3, r7, #5
 80080f0:	33ff      	adds	r3, #255	@ 0xff
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	1ad2      	subs	r2, r2, r3
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	621a      	str	r2, [r3, #32]
 80080fa:	e007      	b.n	800810c <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	6a1b      	ldr	r3, [r3, #32]
 8008100:	1d7a      	adds	r2, r7, #5
 8008102:	32ff      	adds	r2, #255	@ 0xff
 8008104:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	2200      	movs	r2, #0
 800810a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	785b      	ldrb	r3, [r3, #1]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d000      	beq.n	8008116 <USB_EPStartXfer+0x292>
 8008114:	e070      	b.n	80081f8 <USB_EPStartXfer+0x374>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	61bb      	str	r3, [r7, #24]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2250      	movs	r2, #80	@ 0x50
 800811e:	5a9b      	ldrh	r3, [r3, r2]
 8008120:	b29b      	uxth	r3, r3
 8008122:	001a      	movs	r2, r3
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	189b      	adds	r3, r3, r2
 8008128:	61bb      	str	r3, [r7, #24]
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	00da      	lsls	r2, r3, #3
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	18d3      	adds	r3, r2, r3
 8008134:	4a48      	ldr	r2, [pc, #288]	@ (8008258 <USB_EPStartXfer+0x3d4>)
 8008136:	4694      	mov	ip, r2
 8008138:	4463      	add	r3, ip
 800813a:	617b      	str	r3, [r7, #20]
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	881b      	ldrh	r3, [r3, #0]
 8008140:	b29b      	uxth	r3, r3
 8008142:	059b      	lsls	r3, r3, #22
 8008144:	0d9b      	lsrs	r3, r3, #22
 8008146:	b29a      	uxth	r2, r3
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	801a      	strh	r2, [r3, #0]
 800814c:	1d7b      	adds	r3, r7, #5
 800814e:	33ff      	adds	r3, #255	@ 0xff
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d108      	bne.n	8008168 <USB_EPStartXfer+0x2e4>
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	881b      	ldrh	r3, [r3, #0]
 800815a:	b29b      	uxth	r3, r3
 800815c:	4a42      	ldr	r2, [pc, #264]	@ (8008268 <USB_EPStartXfer+0x3e4>)
 800815e:	4313      	orrs	r3, r2
 8008160:	b29a      	uxth	r2, r3
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	801a      	strh	r2, [r3, #0]
 8008166:	e064      	b.n	8008232 <USB_EPStartXfer+0x3ae>
 8008168:	1d7b      	adds	r3, r7, #5
 800816a:	33ff      	adds	r3, #255	@ 0xff
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008170:	d81f      	bhi.n	80081b2 <USB_EPStartXfer+0x32e>
 8008172:	1d7b      	adds	r3, r7, #5
 8008174:	33ff      	adds	r3, #255	@ 0xff
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	085b      	lsrs	r3, r3, #1
 800817a:	21fc      	movs	r1, #252	@ 0xfc
 800817c:	187a      	adds	r2, r7, r1
 800817e:	6013      	str	r3, [r2, #0]
 8008180:	1d7b      	adds	r3, r7, #5
 8008182:	33ff      	adds	r3, #255	@ 0xff
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2201      	movs	r2, #1
 8008188:	4013      	ands	r3, r2
 800818a:	d004      	beq.n	8008196 <USB_EPStartXfer+0x312>
 800818c:	187b      	adds	r3, r7, r1
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	3301      	adds	r3, #1
 8008192:	187a      	adds	r2, r7, r1
 8008194:	6013      	str	r3, [r2, #0]
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	881b      	ldrh	r3, [r3, #0]
 800819a:	b29a      	uxth	r2, r3
 800819c:	23fc      	movs	r3, #252	@ 0xfc
 800819e:	18fb      	adds	r3, r7, r3
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	029b      	lsls	r3, r3, #10
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	4313      	orrs	r3, r2
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	801a      	strh	r2, [r3, #0]
 80081b0:	e03f      	b.n	8008232 <USB_EPStartXfer+0x3ae>
 80081b2:	1d7b      	adds	r3, r7, #5
 80081b4:	33ff      	adds	r3, #255	@ 0xff
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	095b      	lsrs	r3, r3, #5
 80081ba:	21fc      	movs	r1, #252	@ 0xfc
 80081bc:	187a      	adds	r2, r7, r1
 80081be:	6013      	str	r3, [r2, #0]
 80081c0:	1d7b      	adds	r3, r7, #5
 80081c2:	33ff      	adds	r3, #255	@ 0xff
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	221f      	movs	r2, #31
 80081c8:	4013      	ands	r3, r2
 80081ca:	d104      	bne.n	80081d6 <USB_EPStartXfer+0x352>
 80081cc:	187b      	adds	r3, r7, r1
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	3b01      	subs	r3, #1
 80081d2:	187a      	adds	r2, r7, r1
 80081d4:	6013      	str	r3, [r2, #0]
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	881b      	ldrh	r3, [r3, #0]
 80081da:	b29a      	uxth	r2, r3
 80081dc:	23fc      	movs	r3, #252	@ 0xfc
 80081de:	18fb      	adds	r3, r7, r3
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	029b      	lsls	r3, r3, #10
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	4313      	orrs	r3, r2
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	4a1e      	ldr	r2, [pc, #120]	@ (8008268 <USB_EPStartXfer+0x3e4>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	801a      	strh	r2, [r3, #0]
 80081f6:	e01c      	b.n	8008232 <USB_EPStartXfer+0x3ae>
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	785b      	ldrb	r3, [r3, #1]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d118      	bne.n	8008232 <USB_EPStartXfer+0x3ae>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	623b      	str	r3, [r7, #32]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2250      	movs	r2, #80	@ 0x50
 8008208:	5a9b      	ldrh	r3, [r3, r2]
 800820a:	b29b      	uxth	r3, r3
 800820c:	001a      	movs	r2, r3
 800820e:	6a3b      	ldr	r3, [r7, #32]
 8008210:	189b      	adds	r3, r3, r2
 8008212:	623b      	str	r3, [r7, #32]
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	00da      	lsls	r2, r3, #3
 800821a:	6a3b      	ldr	r3, [r7, #32]
 800821c:	18d3      	adds	r3, r2, r3
 800821e:	4a0e      	ldr	r2, [pc, #56]	@ (8008258 <USB_EPStartXfer+0x3d4>)
 8008220:	4694      	mov	ip, r2
 8008222:	4463      	add	r3, ip
 8008224:	61fb      	str	r3, [r7, #28]
 8008226:	1d7b      	adds	r3, r7, #5
 8008228:	33ff      	adds	r3, #255	@ 0xff
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	b29a      	uxth	r2, r3
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008232:	2076      	movs	r0, #118	@ 0x76
 8008234:	183b      	adds	r3, r7, r0
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	8912      	ldrh	r2, [r2, #8]
 800823a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	6959      	ldr	r1, [r3, #20]
 8008240:	1d7b      	adds	r3, r7, #5
 8008242:	33ff      	adds	r3, #255	@ 0xff
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	b29c      	uxth	r4, r3
 8008248:	183b      	adds	r3, r7, r0
 800824a:	881a      	ldrh	r2, [r3, #0]
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	0023      	movs	r3, r4
 8008250:	f001 f882 	bl	8009358 <USB_WritePMA>
 8008254:	e329      	b.n	80088aa <USB_EPStartXfer+0xa26>
 8008256:	46c0      	nop			@ (mov r8, r8)
 8008258:	00000402 	.word	0x00000402
 800825c:	ffff8f8f 	.word	0xffff8f8f
 8008260:	ffff8180 	.word	0xffff8180
 8008264:	00000406 	.word	0x00000406
 8008268:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	785b      	ldrb	r3, [r3, #1]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d000      	beq.n	8008276 <USB_EPStartXfer+0x3f2>
 8008274:	e070      	b.n	8008358 <USB_EPStartXfer+0x4d4>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	64bb      	str	r3, [r7, #72]	@ 0x48
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2250      	movs	r2, #80	@ 0x50
 800827e:	5a9b      	ldrh	r3, [r3, r2]
 8008280:	b29b      	uxth	r3, r3
 8008282:	001a      	movs	r2, r3
 8008284:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008286:	189b      	adds	r3, r3, r2
 8008288:	64bb      	str	r3, [r7, #72]	@ 0x48
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	00da      	lsls	r2, r3, #3
 8008290:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008292:	18d3      	adds	r3, r2, r3
 8008294:	4acd      	ldr	r2, [pc, #820]	@ (80085cc <USB_EPStartXfer+0x748>)
 8008296:	4694      	mov	ip, r2
 8008298:	4463      	add	r3, ip
 800829a:	647b      	str	r3, [r7, #68]	@ 0x44
 800829c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800829e:	881b      	ldrh	r3, [r3, #0]
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	059b      	lsls	r3, r3, #22
 80082a4:	0d9b      	lsrs	r3, r3, #22
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082aa:	801a      	strh	r2, [r3, #0]
 80082ac:	1d7b      	adds	r3, r7, #5
 80082ae:	33ff      	adds	r3, #255	@ 0xff
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d108      	bne.n	80082c8 <USB_EPStartXfer+0x444>
 80082b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	4ac4      	ldr	r2, [pc, #784]	@ (80085d0 <USB_EPStartXfer+0x74c>)
 80082be:	4313      	orrs	r3, r2
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082c4:	801a      	strh	r2, [r3, #0]
 80082c6:	e064      	b.n	8008392 <USB_EPStartXfer+0x50e>
 80082c8:	1d7b      	adds	r3, r7, #5
 80082ca:	33ff      	adds	r3, #255	@ 0xff
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80082d0:	d81f      	bhi.n	8008312 <USB_EPStartXfer+0x48e>
 80082d2:	1d7b      	adds	r3, r7, #5
 80082d4:	33ff      	adds	r3, #255	@ 0xff
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	085b      	lsrs	r3, r3, #1
 80082da:	21f8      	movs	r1, #248	@ 0xf8
 80082dc:	187a      	adds	r2, r7, r1
 80082de:	6013      	str	r3, [r2, #0]
 80082e0:	1d7b      	adds	r3, r7, #5
 80082e2:	33ff      	adds	r3, #255	@ 0xff
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2201      	movs	r2, #1
 80082e8:	4013      	ands	r3, r2
 80082ea:	d004      	beq.n	80082f6 <USB_EPStartXfer+0x472>
 80082ec:	187b      	adds	r3, r7, r1
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	3301      	adds	r3, #1
 80082f2:	187a      	adds	r2, r7, r1
 80082f4:	6013      	str	r3, [r2, #0]
 80082f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082f8:	881b      	ldrh	r3, [r3, #0]
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	23f8      	movs	r3, #248	@ 0xf8
 80082fe:	18fb      	adds	r3, r7, r3
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	b29b      	uxth	r3, r3
 8008304:	029b      	lsls	r3, r3, #10
 8008306:	b29b      	uxth	r3, r3
 8008308:	4313      	orrs	r3, r2
 800830a:	b29a      	uxth	r2, r3
 800830c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800830e:	801a      	strh	r2, [r3, #0]
 8008310:	e03f      	b.n	8008392 <USB_EPStartXfer+0x50e>
 8008312:	1d7b      	adds	r3, r7, #5
 8008314:	33ff      	adds	r3, #255	@ 0xff
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	095b      	lsrs	r3, r3, #5
 800831a:	21f8      	movs	r1, #248	@ 0xf8
 800831c:	187a      	adds	r2, r7, r1
 800831e:	6013      	str	r3, [r2, #0]
 8008320:	1d7b      	adds	r3, r7, #5
 8008322:	33ff      	adds	r3, #255	@ 0xff
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	221f      	movs	r2, #31
 8008328:	4013      	ands	r3, r2
 800832a:	d104      	bne.n	8008336 <USB_EPStartXfer+0x4b2>
 800832c:	187b      	adds	r3, r7, r1
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	3b01      	subs	r3, #1
 8008332:	187a      	adds	r2, r7, r1
 8008334:	6013      	str	r3, [r2, #0]
 8008336:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008338:	881b      	ldrh	r3, [r3, #0]
 800833a:	b29a      	uxth	r2, r3
 800833c:	23f8      	movs	r3, #248	@ 0xf8
 800833e:	18fb      	adds	r3, r7, r3
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	b29b      	uxth	r3, r3
 8008344:	029b      	lsls	r3, r3, #10
 8008346:	b29b      	uxth	r3, r3
 8008348:	4313      	orrs	r3, r2
 800834a:	b29b      	uxth	r3, r3
 800834c:	4aa0      	ldr	r2, [pc, #640]	@ (80085d0 <USB_EPStartXfer+0x74c>)
 800834e:	4313      	orrs	r3, r2
 8008350:	b29a      	uxth	r2, r3
 8008352:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008354:	801a      	strh	r2, [r3, #0]
 8008356:	e01c      	b.n	8008392 <USB_EPStartXfer+0x50e>
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	785b      	ldrb	r3, [r3, #1]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d118      	bne.n	8008392 <USB_EPStartXfer+0x50e>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	653b      	str	r3, [r7, #80]	@ 0x50
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2250      	movs	r2, #80	@ 0x50
 8008368:	5a9b      	ldrh	r3, [r3, r2]
 800836a:	b29b      	uxth	r3, r3
 800836c:	001a      	movs	r2, r3
 800836e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008370:	189b      	adds	r3, r3, r2
 8008372:	653b      	str	r3, [r7, #80]	@ 0x50
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	00da      	lsls	r2, r3, #3
 800837a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800837c:	18d3      	adds	r3, r2, r3
 800837e:	4a93      	ldr	r2, [pc, #588]	@ (80085cc <USB_EPStartXfer+0x748>)
 8008380:	4694      	mov	ip, r2
 8008382:	4463      	add	r3, ip
 8008384:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008386:	1d7b      	adds	r3, r7, #5
 8008388:	33ff      	adds	r3, #255	@ 0xff
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	b29a      	uxth	r2, r3
 800838e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008390:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008392:	2076      	movs	r0, #118	@ 0x76
 8008394:	183b      	adds	r3, r7, r0
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	8912      	ldrh	r2, [r2, #8]
 800839a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	6959      	ldr	r1, [r3, #20]
 80083a0:	1d7b      	adds	r3, r7, #5
 80083a2:	33ff      	adds	r3, #255	@ 0xff
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	b29c      	uxth	r4, r3
 80083a8:	183b      	adds	r3, r7, r0
 80083aa:	881a      	ldrh	r2, [r3, #0]
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	0023      	movs	r3, r4
 80083b0:	f000 ffd2 	bl	8009358 <USB_WritePMA>
            ep->xfer_buff += len;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	695a      	ldr	r2, [r3, #20]
 80083b8:	1d7b      	adds	r3, r7, #5
 80083ba:	33ff      	adds	r3, #255	@ 0xff
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	18d2      	adds	r2, r2, r3
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	6a1a      	ldr	r2, [r3, #32]
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d908      	bls.n	80083e2 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	6a1a      	ldr	r2, [r3, #32]
 80083d4:	1d7b      	adds	r3, r7, #5
 80083d6:	33ff      	adds	r3, #255	@ 0xff
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	1ad2      	subs	r2, r2, r3
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	621a      	str	r2, [r3, #32]
 80083e0:	e007      	b.n	80083f2 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	6a1b      	ldr	r3, [r3, #32]
 80083e6:	1d7a      	adds	r2, r7, #5
 80083e8:	32ff      	adds	r2, #255	@ 0xff
 80083ea:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	2200      	movs	r2, #0
 80083f0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	785b      	ldrb	r3, [r3, #1]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d000      	beq.n	8008400 <USB_EPStartXfer+0x57c>
 80083fe:	e070      	b.n	80084e2 <USB_EPStartXfer+0x65e>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2250      	movs	r2, #80	@ 0x50
 8008408:	5a9b      	ldrh	r3, [r3, r2]
 800840a:	b29b      	uxth	r3, r3
 800840c:	001a      	movs	r2, r3
 800840e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008410:	189b      	adds	r3, r3, r2
 8008412:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	00da      	lsls	r2, r3, #3
 800841a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800841c:	18d3      	adds	r3, r2, r3
 800841e:	4a6d      	ldr	r2, [pc, #436]	@ (80085d4 <USB_EPStartXfer+0x750>)
 8008420:	4694      	mov	ip, r2
 8008422:	4463      	add	r3, ip
 8008424:	637b      	str	r3, [r7, #52]	@ 0x34
 8008426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008428:	881b      	ldrh	r3, [r3, #0]
 800842a:	b29b      	uxth	r3, r3
 800842c:	059b      	lsls	r3, r3, #22
 800842e:	0d9b      	lsrs	r3, r3, #22
 8008430:	b29a      	uxth	r2, r3
 8008432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008434:	801a      	strh	r2, [r3, #0]
 8008436:	1d7b      	adds	r3, r7, #5
 8008438:	33ff      	adds	r3, #255	@ 0xff
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d108      	bne.n	8008452 <USB_EPStartXfer+0x5ce>
 8008440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008442:	881b      	ldrh	r3, [r3, #0]
 8008444:	b29b      	uxth	r3, r3
 8008446:	4a62      	ldr	r2, [pc, #392]	@ (80085d0 <USB_EPStartXfer+0x74c>)
 8008448:	4313      	orrs	r3, r2
 800844a:	b29a      	uxth	r2, r3
 800844c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800844e:	801a      	strh	r2, [r3, #0]
 8008450:	e062      	b.n	8008518 <USB_EPStartXfer+0x694>
 8008452:	1d7b      	adds	r3, r7, #5
 8008454:	33ff      	adds	r3, #255	@ 0xff
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b3e      	cmp	r3, #62	@ 0x3e
 800845a:	d81f      	bhi.n	800849c <USB_EPStartXfer+0x618>
 800845c:	1d7b      	adds	r3, r7, #5
 800845e:	33ff      	adds	r3, #255	@ 0xff
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	085b      	lsrs	r3, r3, #1
 8008464:	21f4      	movs	r1, #244	@ 0xf4
 8008466:	187a      	adds	r2, r7, r1
 8008468:	6013      	str	r3, [r2, #0]
 800846a:	1d7b      	adds	r3, r7, #5
 800846c:	33ff      	adds	r3, #255	@ 0xff
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2201      	movs	r2, #1
 8008472:	4013      	ands	r3, r2
 8008474:	d004      	beq.n	8008480 <USB_EPStartXfer+0x5fc>
 8008476:	187b      	adds	r3, r7, r1
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	3301      	adds	r3, #1
 800847c:	187a      	adds	r2, r7, r1
 800847e:	6013      	str	r3, [r2, #0]
 8008480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008482:	881b      	ldrh	r3, [r3, #0]
 8008484:	b29a      	uxth	r2, r3
 8008486:	23f4      	movs	r3, #244	@ 0xf4
 8008488:	18fb      	adds	r3, r7, r3
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	b29b      	uxth	r3, r3
 800848e:	029b      	lsls	r3, r3, #10
 8008490:	b29b      	uxth	r3, r3
 8008492:	4313      	orrs	r3, r2
 8008494:	b29a      	uxth	r2, r3
 8008496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008498:	801a      	strh	r2, [r3, #0]
 800849a:	e03d      	b.n	8008518 <USB_EPStartXfer+0x694>
 800849c:	1d7b      	adds	r3, r7, #5
 800849e:	33ff      	adds	r3, #255	@ 0xff
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	095b      	lsrs	r3, r3, #5
 80084a4:	21f4      	movs	r1, #244	@ 0xf4
 80084a6:	187a      	adds	r2, r7, r1
 80084a8:	6013      	str	r3, [r2, #0]
 80084aa:	1d7b      	adds	r3, r7, #5
 80084ac:	33ff      	adds	r3, #255	@ 0xff
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	221f      	movs	r2, #31
 80084b2:	4013      	ands	r3, r2
 80084b4:	d104      	bne.n	80084c0 <USB_EPStartXfer+0x63c>
 80084b6:	187b      	adds	r3, r7, r1
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	3b01      	subs	r3, #1
 80084bc:	187a      	adds	r2, r7, r1
 80084be:	6013      	str	r3, [r2, #0]
 80084c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084c2:	881b      	ldrh	r3, [r3, #0]
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	23f4      	movs	r3, #244	@ 0xf4
 80084c8:	18fb      	adds	r3, r7, r3
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	029b      	lsls	r3, r3, #10
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	4313      	orrs	r3, r2
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	4a3e      	ldr	r2, [pc, #248]	@ (80085d0 <USB_EPStartXfer+0x74c>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	b29a      	uxth	r2, r3
 80084dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084de:	801a      	strh	r2, [r3, #0]
 80084e0:	e01a      	b.n	8008518 <USB_EPStartXfer+0x694>
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	785b      	ldrb	r3, [r3, #1]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d116      	bne.n	8008518 <USB_EPStartXfer+0x694>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2250      	movs	r2, #80	@ 0x50
 80084ee:	5a9b      	ldrh	r3, [r3, r2]
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	001a      	movs	r2, r3
 80084f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084f6:	189b      	adds	r3, r3, r2
 80084f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	00da      	lsls	r2, r3, #3
 8008500:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008502:	18d3      	adds	r3, r2, r3
 8008504:	4a33      	ldr	r2, [pc, #204]	@ (80085d4 <USB_EPStartXfer+0x750>)
 8008506:	4694      	mov	ip, r2
 8008508:	4463      	add	r3, ip
 800850a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800850c:	1d7b      	adds	r3, r7, #5
 800850e:	33ff      	adds	r3, #255	@ 0xff
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	b29a      	uxth	r2, r3
 8008514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008516:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008518:	2076      	movs	r0, #118	@ 0x76
 800851a:	183b      	adds	r3, r7, r0
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	8952      	ldrh	r2, [r2, #10]
 8008520:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	6959      	ldr	r1, [r3, #20]
 8008526:	1d7b      	adds	r3, r7, #5
 8008528:	33ff      	adds	r3, #255	@ 0xff
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	b29c      	uxth	r4, r3
 800852e:	183b      	adds	r3, r7, r0
 8008530:	881a      	ldrh	r2, [r3, #0]
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	0023      	movs	r3, r4
 8008536:	f000 ff0f 	bl	8009358 <USB_WritePMA>
 800853a:	e1b6      	b.n	80088aa <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	6a1b      	ldr	r3, [r3, #32]
 8008540:	1d7a      	adds	r2, r7, #5
 8008542:	32ff      	adds	r2, #255	@ 0xff
 8008544:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	18d3      	adds	r3, r2, r3
 8008550:	881b      	ldrh	r3, [r3, #0]
 8008552:	b29a      	uxth	r2, r3
 8008554:	2062      	movs	r0, #98	@ 0x62
 8008556:	183b      	adds	r3, r7, r0
 8008558:	491f      	ldr	r1, [pc, #124]	@ (80085d8 <USB_EPStartXfer+0x754>)
 800855a:	400a      	ands	r2, r1
 800855c:	801a      	strh	r2, [r3, #0]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	18d3      	adds	r3, r2, r3
 8008568:	183a      	adds	r2, r7, r0
 800856a:	8812      	ldrh	r2, [r2, #0]
 800856c:	491b      	ldr	r1, [pc, #108]	@ (80085dc <USB_EPStartXfer+0x758>)
 800856e:	430a      	orrs	r2, r1
 8008570:	b292      	uxth	r2, r2
 8008572:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2250      	movs	r2, #80	@ 0x50
 800857c:	5a9b      	ldrh	r3, [r3, r2]
 800857e:	b29b      	uxth	r3, r3
 8008580:	001a      	movs	r2, r3
 8008582:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008584:	189b      	adds	r3, r3, r2
 8008586:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	00da      	lsls	r2, r3, #3
 800858e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008590:	18d3      	adds	r3, r2, r3
 8008592:	4a0e      	ldr	r2, [pc, #56]	@ (80085cc <USB_EPStartXfer+0x748>)
 8008594:	4694      	mov	ip, r2
 8008596:	4463      	add	r3, ip
 8008598:	65bb      	str	r3, [r7, #88]	@ 0x58
 800859a:	1d7b      	adds	r3, r7, #5
 800859c:	33ff      	adds	r3, #255	@ 0xff
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80085a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80085a6:	2076      	movs	r0, #118	@ 0x76
 80085a8:	183b      	adds	r3, r7, r0
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	8912      	ldrh	r2, [r2, #8]
 80085ae:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	6959      	ldr	r1, [r3, #20]
 80085b4:	1d7b      	adds	r3, r7, #5
 80085b6:	33ff      	adds	r3, #255	@ 0xff
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	b29c      	uxth	r4, r3
 80085bc:	183b      	adds	r3, r7, r0
 80085be:	881a      	ldrh	r2, [r3, #0]
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	0023      	movs	r3, r4
 80085c4:	f000 fec8 	bl	8009358 <USB_WritePMA>
 80085c8:	e16f      	b.n	80088aa <USB_EPStartXfer+0xa26>
 80085ca:	46c0      	nop			@ (mov r8, r8)
 80085cc:	00000402 	.word	0x00000402
 80085d0:	ffff8000 	.word	0xffff8000
 80085d4:	00000406 	.word	0x00000406
 80085d8:	ffff8e8f 	.word	0xffff8e8f
 80085dc:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	6a1a      	ldr	r2, [r3, #32]
 80085e4:	1d7b      	adds	r3, r7, #5
 80085e6:	33ff      	adds	r3, #255	@ 0xff
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	1ad2      	subs	r2, r2, r3
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	18d3      	adds	r3, r2, r3
 80085fa:	881b      	ldrh	r3, [r3, #0]
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	001a      	movs	r2, r3
 8008600:	2340      	movs	r3, #64	@ 0x40
 8008602:	4013      	ands	r3, r2
 8008604:	d100      	bne.n	8008608 <USB_EPStartXfer+0x784>
 8008606:	e0a4      	b.n	8008752 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	673b      	str	r3, [r7, #112]	@ 0x70
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	785b      	ldrb	r3, [r3, #1]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d000      	beq.n	8008616 <USB_EPStartXfer+0x792>
 8008614:	e070      	b.n	80086f8 <USB_EPStartXfer+0x874>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	66bb      	str	r3, [r7, #104]	@ 0x68
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2250      	movs	r2, #80	@ 0x50
 800861e:	5a9b      	ldrh	r3, [r3, r2]
 8008620:	b29b      	uxth	r3, r3
 8008622:	001a      	movs	r2, r3
 8008624:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008626:	189b      	adds	r3, r3, r2
 8008628:	66bb      	str	r3, [r7, #104]	@ 0x68
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	00da      	lsls	r2, r3, #3
 8008630:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008632:	18d3      	adds	r3, r2, r3
 8008634:	4ada      	ldr	r2, [pc, #872]	@ (80089a0 <USB_EPStartXfer+0xb1c>)
 8008636:	4694      	mov	ip, r2
 8008638:	4463      	add	r3, ip
 800863a:	667b      	str	r3, [r7, #100]	@ 0x64
 800863c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800863e:	881b      	ldrh	r3, [r3, #0]
 8008640:	b29b      	uxth	r3, r3
 8008642:	059b      	lsls	r3, r3, #22
 8008644:	0d9b      	lsrs	r3, r3, #22
 8008646:	b29a      	uxth	r2, r3
 8008648:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800864a:	801a      	strh	r2, [r3, #0]
 800864c:	1d7b      	adds	r3, r7, #5
 800864e:	33ff      	adds	r3, #255	@ 0xff
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d108      	bne.n	8008668 <USB_EPStartXfer+0x7e4>
 8008656:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008658:	881b      	ldrh	r3, [r3, #0]
 800865a:	b29b      	uxth	r3, r3
 800865c:	4ad1      	ldr	r2, [pc, #836]	@ (80089a4 <USB_EPStartXfer+0xb20>)
 800865e:	4313      	orrs	r3, r2
 8008660:	b29a      	uxth	r2, r3
 8008662:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008664:	801a      	strh	r2, [r3, #0]
 8008666:	e062      	b.n	800872e <USB_EPStartXfer+0x8aa>
 8008668:	1d7b      	adds	r3, r7, #5
 800866a:	33ff      	adds	r3, #255	@ 0xff
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008670:	d81f      	bhi.n	80086b2 <USB_EPStartXfer+0x82e>
 8008672:	1d7b      	adds	r3, r7, #5
 8008674:	33ff      	adds	r3, #255	@ 0xff
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	085b      	lsrs	r3, r3, #1
 800867a:	21f0      	movs	r1, #240	@ 0xf0
 800867c:	187a      	adds	r2, r7, r1
 800867e:	6013      	str	r3, [r2, #0]
 8008680:	1d7b      	adds	r3, r7, #5
 8008682:	33ff      	adds	r3, #255	@ 0xff
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2201      	movs	r2, #1
 8008688:	4013      	ands	r3, r2
 800868a:	d004      	beq.n	8008696 <USB_EPStartXfer+0x812>
 800868c:	187b      	adds	r3, r7, r1
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	3301      	adds	r3, #1
 8008692:	187a      	adds	r2, r7, r1
 8008694:	6013      	str	r3, [r2, #0]
 8008696:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008698:	881b      	ldrh	r3, [r3, #0]
 800869a:	b29a      	uxth	r2, r3
 800869c:	23f0      	movs	r3, #240	@ 0xf0
 800869e:	18fb      	adds	r3, r7, r3
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	029b      	lsls	r3, r3, #10
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	4313      	orrs	r3, r2
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086ae:	801a      	strh	r2, [r3, #0]
 80086b0:	e03d      	b.n	800872e <USB_EPStartXfer+0x8aa>
 80086b2:	1d7b      	adds	r3, r7, #5
 80086b4:	33ff      	adds	r3, #255	@ 0xff
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	095b      	lsrs	r3, r3, #5
 80086ba:	21f0      	movs	r1, #240	@ 0xf0
 80086bc:	187a      	adds	r2, r7, r1
 80086be:	6013      	str	r3, [r2, #0]
 80086c0:	1d7b      	adds	r3, r7, #5
 80086c2:	33ff      	adds	r3, #255	@ 0xff
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	221f      	movs	r2, #31
 80086c8:	4013      	ands	r3, r2
 80086ca:	d104      	bne.n	80086d6 <USB_EPStartXfer+0x852>
 80086cc:	187b      	adds	r3, r7, r1
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	3b01      	subs	r3, #1
 80086d2:	187a      	adds	r2, r7, r1
 80086d4:	6013      	str	r3, [r2, #0]
 80086d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086d8:	881b      	ldrh	r3, [r3, #0]
 80086da:	b29a      	uxth	r2, r3
 80086dc:	23f0      	movs	r3, #240	@ 0xf0
 80086de:	18fb      	adds	r3, r7, r3
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	029b      	lsls	r3, r3, #10
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	4313      	orrs	r3, r2
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	4aad      	ldr	r2, [pc, #692]	@ (80089a4 <USB_EPStartXfer+0xb20>)
 80086ee:	4313      	orrs	r3, r2
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086f4:	801a      	strh	r2, [r3, #0]
 80086f6:	e01a      	b.n	800872e <USB_EPStartXfer+0x8aa>
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	785b      	ldrb	r3, [r3, #1]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d116      	bne.n	800872e <USB_EPStartXfer+0x8aa>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2250      	movs	r2, #80	@ 0x50
 8008704:	5a9b      	ldrh	r3, [r3, r2]
 8008706:	b29b      	uxth	r3, r3
 8008708:	001a      	movs	r2, r3
 800870a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800870c:	189b      	adds	r3, r3, r2
 800870e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	00da      	lsls	r2, r3, #3
 8008716:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008718:	18d3      	adds	r3, r2, r3
 800871a:	4aa1      	ldr	r2, [pc, #644]	@ (80089a0 <USB_EPStartXfer+0xb1c>)
 800871c:	4694      	mov	ip, r2
 800871e:	4463      	add	r3, ip
 8008720:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008722:	1d7b      	adds	r3, r7, #5
 8008724:	33ff      	adds	r3, #255	@ 0xff
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	b29a      	uxth	r2, r3
 800872a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800872c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800872e:	2076      	movs	r0, #118	@ 0x76
 8008730:	183b      	adds	r3, r7, r0
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	8952      	ldrh	r2, [r2, #10]
 8008736:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	6959      	ldr	r1, [r3, #20]
 800873c:	1d7b      	adds	r3, r7, #5
 800873e:	33ff      	adds	r3, #255	@ 0xff
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	b29c      	uxth	r4, r3
 8008744:	183b      	adds	r3, r7, r0
 8008746:	881a      	ldrh	r2, [r3, #0]
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	0023      	movs	r3, r4
 800874c:	f000 fe04 	bl	8009358 <USB_WritePMA>
 8008750:	e0ab      	b.n	80088aa <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	785b      	ldrb	r3, [r3, #1]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d000      	beq.n	800875c <USB_EPStartXfer+0x8d8>
 800875a:	e070      	b.n	800883e <USB_EPStartXfer+0x9ba>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2250      	movs	r2, #80	@ 0x50
 8008764:	5a9b      	ldrh	r3, [r3, r2]
 8008766:	b29b      	uxth	r3, r3
 8008768:	001a      	movs	r2, r3
 800876a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800876c:	189b      	adds	r3, r3, r2
 800876e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	00da      	lsls	r2, r3, #3
 8008776:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008778:	18d3      	adds	r3, r2, r3
 800877a:	4a8b      	ldr	r2, [pc, #556]	@ (80089a8 <USB_EPStartXfer+0xb24>)
 800877c:	4694      	mov	ip, r2
 800877e:	4463      	add	r3, ip
 8008780:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008782:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008784:	881b      	ldrh	r3, [r3, #0]
 8008786:	b29b      	uxth	r3, r3
 8008788:	059b      	lsls	r3, r3, #22
 800878a:	0d9b      	lsrs	r3, r3, #22
 800878c:	b29a      	uxth	r2, r3
 800878e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008790:	801a      	strh	r2, [r3, #0]
 8008792:	1d7b      	adds	r3, r7, #5
 8008794:	33ff      	adds	r3, #255	@ 0xff
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d108      	bne.n	80087ae <USB_EPStartXfer+0x92a>
 800879c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	4a80      	ldr	r2, [pc, #512]	@ (80089a4 <USB_EPStartXfer+0xb20>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087aa:	801a      	strh	r2, [r3, #0]
 80087ac:	e06c      	b.n	8008888 <USB_EPStartXfer+0xa04>
 80087ae:	1d7b      	adds	r3, r7, #5
 80087b0:	33ff      	adds	r3, #255	@ 0xff
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80087b6:	d81f      	bhi.n	80087f8 <USB_EPStartXfer+0x974>
 80087b8:	1d7b      	adds	r3, r7, #5
 80087ba:	33ff      	adds	r3, #255	@ 0xff
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	085b      	lsrs	r3, r3, #1
 80087c0:	21ec      	movs	r1, #236	@ 0xec
 80087c2:	187a      	adds	r2, r7, r1
 80087c4:	6013      	str	r3, [r2, #0]
 80087c6:	1d7b      	adds	r3, r7, #5
 80087c8:	33ff      	adds	r3, #255	@ 0xff
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2201      	movs	r2, #1
 80087ce:	4013      	ands	r3, r2
 80087d0:	d004      	beq.n	80087dc <USB_EPStartXfer+0x958>
 80087d2:	187b      	adds	r3, r7, r1
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	3301      	adds	r3, #1
 80087d8:	187a      	adds	r2, r7, r1
 80087da:	6013      	str	r3, [r2, #0]
 80087dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087de:	881b      	ldrh	r3, [r3, #0]
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	23ec      	movs	r3, #236	@ 0xec
 80087e4:	18fb      	adds	r3, r7, r3
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	029b      	lsls	r3, r3, #10
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	4313      	orrs	r3, r2
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087f4:	801a      	strh	r2, [r3, #0]
 80087f6:	e047      	b.n	8008888 <USB_EPStartXfer+0xa04>
 80087f8:	1d7b      	adds	r3, r7, #5
 80087fa:	33ff      	adds	r3, #255	@ 0xff
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	095b      	lsrs	r3, r3, #5
 8008800:	21ec      	movs	r1, #236	@ 0xec
 8008802:	187a      	adds	r2, r7, r1
 8008804:	6013      	str	r3, [r2, #0]
 8008806:	1d7b      	adds	r3, r7, #5
 8008808:	33ff      	adds	r3, #255	@ 0xff
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	221f      	movs	r2, #31
 800880e:	4013      	ands	r3, r2
 8008810:	d104      	bne.n	800881c <USB_EPStartXfer+0x998>
 8008812:	187b      	adds	r3, r7, r1
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	3b01      	subs	r3, #1
 8008818:	187a      	adds	r2, r7, r1
 800881a:	6013      	str	r3, [r2, #0]
 800881c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800881e:	881b      	ldrh	r3, [r3, #0]
 8008820:	b29a      	uxth	r2, r3
 8008822:	23ec      	movs	r3, #236	@ 0xec
 8008824:	18fb      	adds	r3, r7, r3
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	b29b      	uxth	r3, r3
 800882a:	029b      	lsls	r3, r3, #10
 800882c:	b29b      	uxth	r3, r3
 800882e:	4313      	orrs	r3, r2
 8008830:	b29b      	uxth	r3, r3
 8008832:	4a5c      	ldr	r2, [pc, #368]	@ (80089a4 <USB_EPStartXfer+0xb20>)
 8008834:	4313      	orrs	r3, r2
 8008836:	b29a      	uxth	r2, r3
 8008838:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800883a:	801a      	strh	r2, [r3, #0]
 800883c:	e024      	b.n	8008888 <USB_EPStartXfer+0xa04>
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	785b      	ldrb	r3, [r3, #1]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d120      	bne.n	8008888 <USB_EPStartXfer+0xa04>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2184      	movs	r1, #132	@ 0x84
 800884a:	187a      	adds	r2, r7, r1
 800884c:	6013      	str	r3, [r2, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2250      	movs	r2, #80	@ 0x50
 8008852:	5a9b      	ldrh	r3, [r3, r2]
 8008854:	b29b      	uxth	r3, r3
 8008856:	001a      	movs	r2, r3
 8008858:	187b      	adds	r3, r7, r1
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	189b      	adds	r3, r3, r2
 800885e:	187a      	adds	r2, r7, r1
 8008860:	6013      	str	r3, [r2, #0]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	00da      	lsls	r2, r3, #3
 8008868:	187b      	adds	r3, r7, r1
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	18d3      	adds	r3, r2, r3
 800886e:	4a4e      	ldr	r2, [pc, #312]	@ (80089a8 <USB_EPStartXfer+0xb24>)
 8008870:	4694      	mov	ip, r2
 8008872:	4463      	add	r3, ip
 8008874:	2180      	movs	r1, #128	@ 0x80
 8008876:	187a      	adds	r2, r7, r1
 8008878:	6013      	str	r3, [r2, #0]
 800887a:	1d7b      	adds	r3, r7, #5
 800887c:	33ff      	adds	r3, #255	@ 0xff
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	b29a      	uxth	r2, r3
 8008882:	187b      	adds	r3, r7, r1
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008888:	2076      	movs	r0, #118	@ 0x76
 800888a:	183b      	adds	r3, r7, r0
 800888c:	683a      	ldr	r2, [r7, #0]
 800888e:	8912      	ldrh	r2, [r2, #8]
 8008890:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	6959      	ldr	r1, [r3, #20]
 8008896:	1d7b      	adds	r3, r7, #5
 8008898:	33ff      	adds	r3, #255	@ 0xff
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	b29c      	uxth	r4, r3
 800889e:	183b      	adds	r3, r7, r0
 80088a0:	881a      	ldrh	r2, [r3, #0]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	0023      	movs	r3, r4
 80088a6:	f000 fd57 	bl	8009358 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	18d3      	adds	r3, r2, r3
 80088b4:	881b      	ldrh	r3, [r3, #0]
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	200a      	movs	r0, #10
 80088ba:	183b      	adds	r3, r7, r0
 80088bc:	493b      	ldr	r1, [pc, #236]	@ (80089ac <USB_EPStartXfer+0xb28>)
 80088be:	400a      	ands	r2, r1
 80088c0:	801a      	strh	r2, [r3, #0]
 80088c2:	183b      	adds	r3, r7, r0
 80088c4:	183a      	adds	r2, r7, r0
 80088c6:	8812      	ldrh	r2, [r2, #0]
 80088c8:	2110      	movs	r1, #16
 80088ca:	404a      	eors	r2, r1
 80088cc:	801a      	strh	r2, [r3, #0]
 80088ce:	183b      	adds	r3, r7, r0
 80088d0:	183a      	adds	r2, r7, r0
 80088d2:	8812      	ldrh	r2, [r2, #0]
 80088d4:	2120      	movs	r1, #32
 80088d6:	404a      	eors	r2, r1
 80088d8:	801a      	strh	r2, [r3, #0]
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	18d3      	adds	r3, r2, r3
 80088e4:	183a      	adds	r2, r7, r0
 80088e6:	8812      	ldrh	r2, [r2, #0]
 80088e8:	4931      	ldr	r1, [pc, #196]	@ (80089b0 <USB_EPStartXfer+0xb2c>)
 80088ea:	430a      	orrs	r2, r1
 80088ec:	b292      	uxth	r2, r2
 80088ee:	801a      	strh	r2, [r3, #0]
 80088f0:	f000 fbe9 	bl	80090c6 <USB_EPStartXfer+0x1242>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	7b1b      	ldrb	r3, [r3, #12]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d000      	beq.n	80088fe <USB_EPStartXfer+0xa7a>
 80088fc:	e0a8      	b.n	8008a50 <USB_EPStartXfer+0xbcc>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	699a      	ldr	r2, [r3, #24]
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	429a      	cmp	r2, r3
 8008908:	d90d      	bls.n	8008926 <USB_EPStartXfer+0xaa2>
      {
        len = ep->maxpacket;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	1d7a      	adds	r2, r7, #5
 8008910:	32ff      	adds	r2, #255	@ 0xff
 8008912:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	699a      	ldr	r2, [r3, #24]
 8008918:	1d7b      	adds	r3, r7, #5
 800891a:	33ff      	adds	r3, #255	@ 0xff
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	1ad2      	subs	r2, r2, r3
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	619a      	str	r2, [r3, #24]
 8008924:	e007      	b.n	8008936 <USB_EPStartXfer+0xab2>
      }
      else
      {
        len = ep->xfer_len;
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	1d7a      	adds	r2, r7, #5
 800892c:	32ff      	adds	r2, #255	@ 0xff
 800892e:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	2200      	movs	r2, #0
 8008934:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2190      	movs	r1, #144	@ 0x90
 800893a:	187a      	adds	r2, r7, r1
 800893c:	6013      	str	r3, [r2, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2250      	movs	r2, #80	@ 0x50
 8008942:	5a9b      	ldrh	r3, [r3, r2]
 8008944:	b29b      	uxth	r3, r3
 8008946:	001a      	movs	r2, r3
 8008948:	187b      	adds	r3, r7, r1
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	189b      	adds	r3, r3, r2
 800894e:	187a      	adds	r2, r7, r1
 8008950:	6013      	str	r3, [r2, #0]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	00da      	lsls	r2, r3, #3
 8008958:	187b      	adds	r3, r7, r1
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	18d3      	adds	r3, r2, r3
 800895e:	4a10      	ldr	r2, [pc, #64]	@ (80089a0 <USB_EPStartXfer+0xb1c>)
 8008960:	4694      	mov	ip, r2
 8008962:	4463      	add	r3, ip
 8008964:	218c      	movs	r1, #140	@ 0x8c
 8008966:	187a      	adds	r2, r7, r1
 8008968:	6013      	str	r3, [r2, #0]
 800896a:	187b      	adds	r3, r7, r1
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	881b      	ldrh	r3, [r3, #0]
 8008970:	b29b      	uxth	r3, r3
 8008972:	059b      	lsls	r3, r3, #22
 8008974:	0d9b      	lsrs	r3, r3, #22
 8008976:	b29a      	uxth	r2, r3
 8008978:	187b      	adds	r3, r7, r1
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	801a      	strh	r2, [r3, #0]
 800897e:	1d7b      	adds	r3, r7, #5
 8008980:	33ff      	adds	r3, #255	@ 0xff
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d115      	bne.n	80089b4 <USB_EPStartXfer+0xb30>
 8008988:	187b      	adds	r3, r7, r1
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	b29b      	uxth	r3, r3
 8008990:	4a04      	ldr	r2, [pc, #16]	@ (80089a4 <USB_EPStartXfer+0xb20>)
 8008992:	4313      	orrs	r3, r2
 8008994:	b29a      	uxth	r2, r3
 8008996:	187b      	adds	r3, r7, r1
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	801a      	strh	r2, [r3, #0]
 800899c:	e36e      	b.n	800907c <USB_EPStartXfer+0x11f8>
 800899e:	46c0      	nop			@ (mov r8, r8)
 80089a0:	00000406 	.word	0x00000406
 80089a4:	ffff8000 	.word	0xffff8000
 80089a8:	00000402 	.word	0x00000402
 80089ac:	ffff8fbf 	.word	0xffff8fbf
 80089b0:	ffff8080 	.word	0xffff8080
 80089b4:	1d7b      	adds	r3, r7, #5
 80089b6:	33ff      	adds	r3, #255	@ 0xff
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80089bc:	d822      	bhi.n	8008a04 <USB_EPStartXfer+0xb80>
 80089be:	1d7b      	adds	r3, r7, #5
 80089c0:	33ff      	adds	r3, #255	@ 0xff
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	085b      	lsrs	r3, r3, #1
 80089c6:	21e8      	movs	r1, #232	@ 0xe8
 80089c8:	187a      	adds	r2, r7, r1
 80089ca:	6013      	str	r3, [r2, #0]
 80089cc:	1d7b      	adds	r3, r7, #5
 80089ce:	33ff      	adds	r3, #255	@ 0xff
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2201      	movs	r2, #1
 80089d4:	4013      	ands	r3, r2
 80089d6:	d004      	beq.n	80089e2 <USB_EPStartXfer+0xb5e>
 80089d8:	187b      	adds	r3, r7, r1
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	3301      	adds	r3, #1
 80089de:	187a      	adds	r2, r7, r1
 80089e0:	6013      	str	r3, [r2, #0]
 80089e2:	218c      	movs	r1, #140	@ 0x8c
 80089e4:	187b      	adds	r3, r7, r1
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	881b      	ldrh	r3, [r3, #0]
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	23e8      	movs	r3, #232	@ 0xe8
 80089ee:	18fb      	adds	r3, r7, r3
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	029b      	lsls	r3, r3, #10
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	4313      	orrs	r3, r2
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	187b      	adds	r3, r7, r1
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	801a      	strh	r2, [r3, #0]
 8008a02:	e33b      	b.n	800907c <USB_EPStartXfer+0x11f8>
 8008a04:	1d7b      	adds	r3, r7, #5
 8008a06:	33ff      	adds	r3, #255	@ 0xff
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	095b      	lsrs	r3, r3, #5
 8008a0c:	21e8      	movs	r1, #232	@ 0xe8
 8008a0e:	187a      	adds	r2, r7, r1
 8008a10:	6013      	str	r3, [r2, #0]
 8008a12:	1d7b      	adds	r3, r7, #5
 8008a14:	33ff      	adds	r3, #255	@ 0xff
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	221f      	movs	r2, #31
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	d104      	bne.n	8008a28 <USB_EPStartXfer+0xba4>
 8008a1e:	187b      	adds	r3, r7, r1
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	3b01      	subs	r3, #1
 8008a24:	187a      	adds	r2, r7, r1
 8008a26:	6013      	str	r3, [r2, #0]
 8008a28:	218c      	movs	r1, #140	@ 0x8c
 8008a2a:	187b      	adds	r3, r7, r1
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	881b      	ldrh	r3, [r3, #0]
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	23e8      	movs	r3, #232	@ 0xe8
 8008a34:	18fb      	adds	r3, r7, r3
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	029b      	lsls	r3, r3, #10
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	4ad7      	ldr	r2, [pc, #860]	@ (8008da0 <USB_EPStartXfer+0xf1c>)
 8008a44:	4313      	orrs	r3, r2
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	187b      	adds	r3, r7, r1
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	801a      	strh	r2, [r3, #0]
 8008a4e:	e315      	b.n	800907c <USB_EPStartXfer+0x11f8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	78db      	ldrb	r3, [r3, #3]
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d000      	beq.n	8008a5a <USB_EPStartXfer+0xbd6>
 8008a58:	e189      	b.n	8008d6e <USB_EPStartXfer+0xeea>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	785b      	ldrb	r3, [r3, #1]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d000      	beq.n	8008a64 <USB_EPStartXfer+0xbe0>
 8008a62:	e07b      	b.n	8008b5c <USB_EPStartXfer+0xcd8>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	21ac      	movs	r1, #172	@ 0xac
 8008a68:	187a      	adds	r2, r7, r1
 8008a6a:	6013      	str	r3, [r2, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2250      	movs	r2, #80	@ 0x50
 8008a70:	5a9b      	ldrh	r3, [r3, r2]
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	001a      	movs	r2, r3
 8008a76:	187b      	adds	r3, r7, r1
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	189b      	adds	r3, r3, r2
 8008a7c:	187a      	adds	r2, r7, r1
 8008a7e:	6013      	str	r3, [r2, #0]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	00da      	lsls	r2, r3, #3
 8008a86:	187b      	adds	r3, r7, r1
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	18d3      	adds	r3, r2, r3
 8008a8c:	4ac5      	ldr	r2, [pc, #788]	@ (8008da4 <USB_EPStartXfer+0xf20>)
 8008a8e:	4694      	mov	ip, r2
 8008a90:	4463      	add	r3, ip
 8008a92:	21a8      	movs	r1, #168	@ 0xa8
 8008a94:	187a      	adds	r2, r7, r1
 8008a96:	6013      	str	r3, [r2, #0]
 8008a98:	187b      	adds	r3, r7, r1
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	881b      	ldrh	r3, [r3, #0]
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	059b      	lsls	r3, r3, #22
 8008aa2:	0d9b      	lsrs	r3, r3, #22
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	187b      	adds	r3, r7, r1
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	801a      	strh	r2, [r3, #0]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d10a      	bne.n	8008aca <USB_EPStartXfer+0xc46>
 8008ab4:	187b      	adds	r3, r7, r1
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	881b      	ldrh	r3, [r3, #0]
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	4ab8      	ldr	r2, [pc, #736]	@ (8008da0 <USB_EPStartXfer+0xf1c>)
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	187b      	adds	r3, r7, r1
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	801a      	strh	r2, [r3, #0]
 8008ac8:	e06c      	b.n	8008ba4 <USB_EPStartXfer+0xd20>
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ad0:	d820      	bhi.n	8008b14 <USB_EPStartXfer+0xc90>
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	085b      	lsrs	r3, r3, #1
 8008ad8:	21e4      	movs	r1, #228	@ 0xe4
 8008ada:	187a      	adds	r2, r7, r1
 8008adc:	6013      	str	r3, [r2, #0]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	d004      	beq.n	8008af2 <USB_EPStartXfer+0xc6e>
 8008ae8:	187b      	adds	r3, r7, r1
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	3301      	adds	r3, #1
 8008aee:	187a      	adds	r2, r7, r1
 8008af0:	6013      	str	r3, [r2, #0]
 8008af2:	21a8      	movs	r1, #168	@ 0xa8
 8008af4:	187b      	adds	r3, r7, r1
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	881b      	ldrh	r3, [r3, #0]
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	23e4      	movs	r3, #228	@ 0xe4
 8008afe:	18fb      	adds	r3, r7, r3
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	029b      	lsls	r3, r3, #10
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	187b      	adds	r3, r7, r1
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	801a      	strh	r2, [r3, #0]
 8008b12:	e047      	b.n	8008ba4 <USB_EPStartXfer+0xd20>
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	095b      	lsrs	r3, r3, #5
 8008b1a:	21e4      	movs	r1, #228	@ 0xe4
 8008b1c:	187a      	adds	r2, r7, r1
 8008b1e:	6013      	str	r3, [r2, #0]
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	221f      	movs	r2, #31
 8008b26:	4013      	ands	r3, r2
 8008b28:	d104      	bne.n	8008b34 <USB_EPStartXfer+0xcb0>
 8008b2a:	187b      	adds	r3, r7, r1
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	187a      	adds	r2, r7, r1
 8008b32:	6013      	str	r3, [r2, #0]
 8008b34:	21a8      	movs	r1, #168	@ 0xa8
 8008b36:	187b      	adds	r3, r7, r1
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	881b      	ldrh	r3, [r3, #0]
 8008b3c:	b29a      	uxth	r2, r3
 8008b3e:	23e4      	movs	r3, #228	@ 0xe4
 8008b40:	18fb      	adds	r3, r7, r3
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	029b      	lsls	r3, r3, #10
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	4a94      	ldr	r2, [pc, #592]	@ (8008da0 <USB_EPStartXfer+0xf1c>)
 8008b50:	4313      	orrs	r3, r2
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	187b      	adds	r3, r7, r1
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	801a      	strh	r2, [r3, #0]
 8008b5a:	e023      	b.n	8008ba4 <USB_EPStartXfer+0xd20>
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	785b      	ldrb	r3, [r3, #1]
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d11f      	bne.n	8008ba4 <USB_EPStartXfer+0xd20>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	21b4      	movs	r1, #180	@ 0xb4
 8008b68:	187a      	adds	r2, r7, r1
 8008b6a:	6013      	str	r3, [r2, #0]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2250      	movs	r2, #80	@ 0x50
 8008b70:	5a9b      	ldrh	r3, [r3, r2]
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	001a      	movs	r2, r3
 8008b76:	187b      	adds	r3, r7, r1
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	189b      	adds	r3, r3, r2
 8008b7c:	187a      	adds	r2, r7, r1
 8008b7e:	6013      	str	r3, [r2, #0]
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	00da      	lsls	r2, r3, #3
 8008b86:	187b      	adds	r3, r7, r1
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	18d3      	adds	r3, r2, r3
 8008b8c:	4a85      	ldr	r2, [pc, #532]	@ (8008da4 <USB_EPStartXfer+0xf20>)
 8008b8e:	4694      	mov	ip, r2
 8008b90:	4463      	add	r3, ip
 8008b92:	21b0      	movs	r1, #176	@ 0xb0
 8008b94:	187a      	adds	r2, r7, r1
 8008b96:	6013      	str	r3, [r2, #0]
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	187b      	adds	r3, r7, r1
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	801a      	strh	r2, [r3, #0]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	22a4      	movs	r2, #164	@ 0xa4
 8008ba8:	18ba      	adds	r2, r7, r2
 8008baa:	6013      	str	r3, [r2, #0]
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	785b      	ldrb	r3, [r3, #1]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d000      	beq.n	8008bb6 <USB_EPStartXfer+0xd32>
 8008bb4:	e07b      	b.n	8008cae <USB_EPStartXfer+0xe2a>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	219c      	movs	r1, #156	@ 0x9c
 8008bba:	187a      	adds	r2, r7, r1
 8008bbc:	6013      	str	r3, [r2, #0]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2250      	movs	r2, #80	@ 0x50
 8008bc2:	5a9b      	ldrh	r3, [r3, r2]
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	001a      	movs	r2, r3
 8008bc8:	187b      	adds	r3, r7, r1
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	189b      	adds	r3, r3, r2
 8008bce:	187a      	adds	r2, r7, r1
 8008bd0:	6013      	str	r3, [r2, #0]
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	00da      	lsls	r2, r3, #3
 8008bd8:	187b      	adds	r3, r7, r1
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	18d3      	adds	r3, r2, r3
 8008bde:	4a72      	ldr	r2, [pc, #456]	@ (8008da8 <USB_EPStartXfer+0xf24>)
 8008be0:	4694      	mov	ip, r2
 8008be2:	4463      	add	r3, ip
 8008be4:	2198      	movs	r1, #152	@ 0x98
 8008be6:	187a      	adds	r2, r7, r1
 8008be8:	6013      	str	r3, [r2, #0]
 8008bea:	187b      	adds	r3, r7, r1
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	881b      	ldrh	r3, [r3, #0]
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	059b      	lsls	r3, r3, #22
 8008bf4:	0d9b      	lsrs	r3, r3, #22
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	187b      	adds	r3, r7, r1
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	801a      	strh	r2, [r3, #0]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	691b      	ldr	r3, [r3, #16]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10a      	bne.n	8008c1c <USB_EPStartXfer+0xd98>
 8008c06:	187b      	adds	r3, r7, r1
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	881b      	ldrh	r3, [r3, #0]
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	4a64      	ldr	r2, [pc, #400]	@ (8008da0 <USB_EPStartXfer+0xf1c>)
 8008c10:	4313      	orrs	r3, r2
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	187b      	adds	r3, r7, r1
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	801a      	strh	r2, [r3, #0]
 8008c1a:	e069      	b.n	8008cf0 <USB_EPStartXfer+0xe6c>
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c22:	d820      	bhi.n	8008c66 <USB_EPStartXfer+0xde2>
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	691b      	ldr	r3, [r3, #16]
 8008c28:	085b      	lsrs	r3, r3, #1
 8008c2a:	21e0      	movs	r1, #224	@ 0xe0
 8008c2c:	187a      	adds	r2, r7, r1
 8008c2e:	6013      	str	r3, [r2, #0]
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	2201      	movs	r2, #1
 8008c36:	4013      	ands	r3, r2
 8008c38:	d004      	beq.n	8008c44 <USB_EPStartXfer+0xdc0>
 8008c3a:	187b      	adds	r3, r7, r1
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	187a      	adds	r2, r7, r1
 8008c42:	6013      	str	r3, [r2, #0]
 8008c44:	2198      	movs	r1, #152	@ 0x98
 8008c46:	187b      	adds	r3, r7, r1
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	881b      	ldrh	r3, [r3, #0]
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	23e0      	movs	r3, #224	@ 0xe0
 8008c50:	18fb      	adds	r3, r7, r3
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	029b      	lsls	r3, r3, #10
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	187b      	adds	r3, r7, r1
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	801a      	strh	r2, [r3, #0]
 8008c64:	e044      	b.n	8008cf0 <USB_EPStartXfer+0xe6c>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	095b      	lsrs	r3, r3, #5
 8008c6c:	21e0      	movs	r1, #224	@ 0xe0
 8008c6e:	187a      	adds	r2, r7, r1
 8008c70:	6013      	str	r3, [r2, #0]
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	221f      	movs	r2, #31
 8008c78:	4013      	ands	r3, r2
 8008c7a:	d104      	bne.n	8008c86 <USB_EPStartXfer+0xe02>
 8008c7c:	187b      	adds	r3, r7, r1
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	3b01      	subs	r3, #1
 8008c82:	187a      	adds	r2, r7, r1
 8008c84:	6013      	str	r3, [r2, #0]
 8008c86:	2198      	movs	r1, #152	@ 0x98
 8008c88:	187b      	adds	r3, r7, r1
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	881b      	ldrh	r3, [r3, #0]
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	23e0      	movs	r3, #224	@ 0xe0
 8008c92:	18fb      	adds	r3, r7, r3
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	029b      	lsls	r3, r3, #10
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	4a3f      	ldr	r2, [pc, #252]	@ (8008da0 <USB_EPStartXfer+0xf1c>)
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	187b      	adds	r3, r7, r1
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	801a      	strh	r2, [r3, #0]
 8008cac:	e020      	b.n	8008cf0 <USB_EPStartXfer+0xe6c>
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	785b      	ldrb	r3, [r3, #1]
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d11c      	bne.n	8008cf0 <USB_EPStartXfer+0xe6c>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2250      	movs	r2, #80	@ 0x50
 8008cba:	5a9b      	ldrh	r3, [r3, r2]
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	001a      	movs	r2, r3
 8008cc0:	21a4      	movs	r1, #164	@ 0xa4
 8008cc2:	187b      	adds	r3, r7, r1
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	189b      	adds	r3, r3, r2
 8008cc8:	187a      	adds	r2, r7, r1
 8008cca:	6013      	str	r3, [r2, #0]
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	00da      	lsls	r2, r3, #3
 8008cd2:	187b      	adds	r3, r7, r1
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	18d3      	adds	r3, r2, r3
 8008cd8:	4a33      	ldr	r2, [pc, #204]	@ (8008da8 <USB_EPStartXfer+0xf24>)
 8008cda:	4694      	mov	ip, r2
 8008cdc:	4463      	add	r3, ip
 8008cde:	21a0      	movs	r1, #160	@ 0xa0
 8008ce0:	187a      	adds	r2, r7, r1
 8008ce2:	6013      	str	r3, [r2, #0]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	187b      	adds	r3, r7, r1
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	69db      	ldr	r3, [r3, #28]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d100      	bne.n	8008cfa <USB_EPStartXfer+0xe76>
 8008cf8:	e1c0      	b.n	800907c <USB_EPStartXfer+0x11f8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	18d2      	adds	r2, r2, r3
 8008d04:	2196      	movs	r1, #150	@ 0x96
 8008d06:	187b      	adds	r3, r7, r1
 8008d08:	8812      	ldrh	r2, [r2, #0]
 8008d0a:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008d0c:	187b      	adds	r3, r7, r1
 8008d0e:	881a      	ldrh	r2, [r3, #0]
 8008d10:	2380      	movs	r3, #128	@ 0x80
 8008d12:	01db      	lsls	r3, r3, #7
 8008d14:	4013      	ands	r3, r2
 8008d16:	d004      	beq.n	8008d22 <USB_EPStartXfer+0xe9e>
 8008d18:	187b      	adds	r3, r7, r1
 8008d1a:	881b      	ldrh	r3, [r3, #0]
 8008d1c:	2240      	movs	r2, #64	@ 0x40
 8008d1e:	4013      	ands	r3, r2
 8008d20:	d10d      	bne.n	8008d3e <USB_EPStartXfer+0xeba>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008d22:	2196      	movs	r1, #150	@ 0x96
 8008d24:	187b      	adds	r3, r7, r1
 8008d26:	881a      	ldrh	r2, [r3, #0]
 8008d28:	2380      	movs	r3, #128	@ 0x80
 8008d2a:	01db      	lsls	r3, r3, #7
 8008d2c:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008d2e:	d000      	beq.n	8008d32 <USB_EPStartXfer+0xeae>
 8008d30:	e1a4      	b.n	800907c <USB_EPStartXfer+0x11f8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008d32:	187b      	adds	r3, r7, r1
 8008d34:	881b      	ldrh	r3, [r3, #0]
 8008d36:	2240      	movs	r2, #64	@ 0x40
 8008d38:	4013      	ands	r3, r2
 8008d3a:	d000      	beq.n	8008d3e <USB_EPStartXfer+0xeba>
 8008d3c:	e19e      	b.n	800907c <USB_EPStartXfer+0x11f8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	18d3      	adds	r3, r2, r3
 8008d48:	881b      	ldrh	r3, [r3, #0]
 8008d4a:	b29a      	uxth	r2, r3
 8008d4c:	2094      	movs	r0, #148	@ 0x94
 8008d4e:	183b      	adds	r3, r7, r0
 8008d50:	4916      	ldr	r1, [pc, #88]	@ (8008dac <USB_EPStartXfer+0xf28>)
 8008d52:	400a      	ands	r2, r1
 8008d54:	801a      	strh	r2, [r3, #0]
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	18d3      	adds	r3, r2, r3
 8008d60:	183a      	adds	r2, r7, r0
 8008d62:	8812      	ldrh	r2, [r2, #0]
 8008d64:	4912      	ldr	r1, [pc, #72]	@ (8008db0 <USB_EPStartXfer+0xf2c>)
 8008d66:	430a      	orrs	r2, r1
 8008d68:	b292      	uxth	r2, r2
 8008d6a:	801a      	strh	r2, [r3, #0]
 8008d6c:	e186      	b.n	800907c <USB_EPStartXfer+0x11f8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	78db      	ldrb	r3, [r3, #3]
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d000      	beq.n	8008d78 <USB_EPStartXfer+0xef4>
 8008d76:	e17f      	b.n	8009078 <USB_EPStartXfer+0x11f4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	699a      	ldr	r2, [r3, #24]
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d917      	bls.n	8008db4 <USB_EPStartXfer+0xf30>
        {
          len = ep->maxpacket;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	1d7a      	adds	r2, r7, #5
 8008d8a:	32ff      	adds	r2, #255	@ 0xff
 8008d8c:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	699a      	ldr	r2, [r3, #24]
 8008d92:	1d7b      	adds	r3, r7, #5
 8008d94:	33ff      	adds	r3, #255	@ 0xff
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	1ad2      	subs	r2, r2, r3
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	619a      	str	r2, [r3, #24]
 8008d9e:	e011      	b.n	8008dc4 <USB_EPStartXfer+0xf40>
 8008da0:	ffff8000 	.word	0xffff8000
 8008da4:	00000402 	.word	0x00000402
 8008da8:	00000406 	.word	0x00000406
 8008dac:	ffff8f8f 	.word	0xffff8f8f
 8008db0:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	699b      	ldr	r3, [r3, #24]
 8008db8:	1d7a      	adds	r2, r7, #5
 8008dba:	32ff      	adds	r2, #255	@ 0xff
 8008dbc:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	785b      	ldrb	r3, [r3, #1]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d000      	beq.n	8008dce <USB_EPStartXfer+0xf4a>
 8008dcc:	e081      	b.n	8008ed2 <USB_EPStartXfer+0x104e>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	21cc      	movs	r1, #204	@ 0xcc
 8008dd2:	187a      	adds	r2, r7, r1
 8008dd4:	6013      	str	r3, [r2, #0]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2250      	movs	r2, #80	@ 0x50
 8008dda:	5a9b      	ldrh	r3, [r3, r2]
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	001a      	movs	r2, r3
 8008de0:	187b      	adds	r3, r7, r1
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	189b      	adds	r3, r3, r2
 8008de6:	187a      	adds	r2, r7, r1
 8008de8:	6013      	str	r3, [r2, #0]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	00da      	lsls	r2, r3, #3
 8008df0:	187b      	adds	r3, r7, r1
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	18d3      	adds	r3, r2, r3
 8008df6:	4ab6      	ldr	r2, [pc, #728]	@ (80090d0 <USB_EPStartXfer+0x124c>)
 8008df8:	4694      	mov	ip, r2
 8008dfa:	4463      	add	r3, ip
 8008dfc:	21c8      	movs	r1, #200	@ 0xc8
 8008dfe:	187a      	adds	r2, r7, r1
 8008e00:	6013      	str	r3, [r2, #0]
 8008e02:	187b      	adds	r3, r7, r1
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	881b      	ldrh	r3, [r3, #0]
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	059b      	lsls	r3, r3, #22
 8008e0c:	0d9b      	lsrs	r3, r3, #22
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	187b      	adds	r3, r7, r1
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	801a      	strh	r2, [r3, #0]
 8008e16:	1d7b      	adds	r3, r7, #5
 8008e18:	33ff      	adds	r3, #255	@ 0xff
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10a      	bne.n	8008e36 <USB_EPStartXfer+0xfb2>
 8008e20:	187b      	adds	r3, r7, r1
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	881b      	ldrh	r3, [r3, #0]
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	4aaa      	ldr	r2, [pc, #680]	@ (80090d4 <USB_EPStartXfer+0x1250>)
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	b29a      	uxth	r2, r3
 8008e2e:	187b      	adds	r3, r7, r1
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	801a      	strh	r2, [r3, #0]
 8008e34:	e072      	b.n	8008f1c <USB_EPStartXfer+0x1098>
 8008e36:	1d7b      	adds	r3, r7, #5
 8008e38:	33ff      	adds	r3, #255	@ 0xff
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e3e:	d822      	bhi.n	8008e86 <USB_EPStartXfer+0x1002>
 8008e40:	1d7b      	adds	r3, r7, #5
 8008e42:	33ff      	adds	r3, #255	@ 0xff
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	085b      	lsrs	r3, r3, #1
 8008e48:	21dc      	movs	r1, #220	@ 0xdc
 8008e4a:	187a      	adds	r2, r7, r1
 8008e4c:	6013      	str	r3, [r2, #0]
 8008e4e:	1d7b      	adds	r3, r7, #5
 8008e50:	33ff      	adds	r3, #255	@ 0xff
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2201      	movs	r2, #1
 8008e56:	4013      	ands	r3, r2
 8008e58:	d004      	beq.n	8008e64 <USB_EPStartXfer+0xfe0>
 8008e5a:	187b      	adds	r3, r7, r1
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	187a      	adds	r2, r7, r1
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	21c8      	movs	r1, #200	@ 0xc8
 8008e66:	187b      	adds	r3, r7, r1
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	881b      	ldrh	r3, [r3, #0]
 8008e6c:	b29a      	uxth	r2, r3
 8008e6e:	23dc      	movs	r3, #220	@ 0xdc
 8008e70:	18fb      	adds	r3, r7, r3
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	029b      	lsls	r3, r3, #10
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	b29a      	uxth	r2, r3
 8008e7e:	187b      	adds	r3, r7, r1
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	801a      	strh	r2, [r3, #0]
 8008e84:	e04a      	b.n	8008f1c <USB_EPStartXfer+0x1098>
 8008e86:	1d7b      	adds	r3, r7, #5
 8008e88:	33ff      	adds	r3, #255	@ 0xff
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	095b      	lsrs	r3, r3, #5
 8008e8e:	21dc      	movs	r1, #220	@ 0xdc
 8008e90:	187a      	adds	r2, r7, r1
 8008e92:	6013      	str	r3, [r2, #0]
 8008e94:	1d7b      	adds	r3, r7, #5
 8008e96:	33ff      	adds	r3, #255	@ 0xff
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	221f      	movs	r2, #31
 8008e9c:	4013      	ands	r3, r2
 8008e9e:	d104      	bne.n	8008eaa <USB_EPStartXfer+0x1026>
 8008ea0:	187b      	adds	r3, r7, r1
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	187a      	adds	r2, r7, r1
 8008ea8:	6013      	str	r3, [r2, #0]
 8008eaa:	21c8      	movs	r1, #200	@ 0xc8
 8008eac:	187b      	adds	r3, r7, r1
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	881b      	ldrh	r3, [r3, #0]
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	23dc      	movs	r3, #220	@ 0xdc
 8008eb6:	18fb      	adds	r3, r7, r3
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	029b      	lsls	r3, r3, #10
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	4a83      	ldr	r2, [pc, #524]	@ (80090d4 <USB_EPStartXfer+0x1250>)
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	187b      	adds	r3, r7, r1
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	801a      	strh	r2, [r3, #0]
 8008ed0:	e024      	b.n	8008f1c <USB_EPStartXfer+0x1098>
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	785b      	ldrb	r3, [r3, #1]
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d120      	bne.n	8008f1c <USB_EPStartXfer+0x1098>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	21d4      	movs	r1, #212	@ 0xd4
 8008ede:	187a      	adds	r2, r7, r1
 8008ee0:	6013      	str	r3, [r2, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2250      	movs	r2, #80	@ 0x50
 8008ee6:	5a9b      	ldrh	r3, [r3, r2]
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	001a      	movs	r2, r3
 8008eec:	187b      	adds	r3, r7, r1
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	189b      	adds	r3, r3, r2
 8008ef2:	187a      	adds	r2, r7, r1
 8008ef4:	6013      	str	r3, [r2, #0]
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	00da      	lsls	r2, r3, #3
 8008efc:	187b      	adds	r3, r7, r1
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	18d3      	adds	r3, r2, r3
 8008f02:	4a73      	ldr	r2, [pc, #460]	@ (80090d0 <USB_EPStartXfer+0x124c>)
 8008f04:	4694      	mov	ip, r2
 8008f06:	4463      	add	r3, ip
 8008f08:	21d0      	movs	r1, #208	@ 0xd0
 8008f0a:	187a      	adds	r2, r7, r1
 8008f0c:	6013      	str	r3, [r2, #0]
 8008f0e:	1d7b      	adds	r3, r7, #5
 8008f10:	33ff      	adds	r3, #255	@ 0xff
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	187b      	adds	r3, r7, r1
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	801a      	strh	r2, [r3, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	22c4      	movs	r2, #196	@ 0xc4
 8008f20:	18ba      	adds	r2, r7, r2
 8008f22:	6013      	str	r3, [r2, #0]
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	785b      	ldrb	r3, [r3, #1]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d000      	beq.n	8008f2e <USB_EPStartXfer+0x10aa>
 8008f2c:	e081      	b.n	8009032 <USB_EPStartXfer+0x11ae>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	21bc      	movs	r1, #188	@ 0xbc
 8008f32:	187a      	adds	r2, r7, r1
 8008f34:	6013      	str	r3, [r2, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2250      	movs	r2, #80	@ 0x50
 8008f3a:	5a9b      	ldrh	r3, [r3, r2]
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	001a      	movs	r2, r3
 8008f40:	187b      	adds	r3, r7, r1
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	189b      	adds	r3, r3, r2
 8008f46:	187a      	adds	r2, r7, r1
 8008f48:	6013      	str	r3, [r2, #0]
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	00da      	lsls	r2, r3, #3
 8008f50:	187b      	adds	r3, r7, r1
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	18d3      	adds	r3, r2, r3
 8008f56:	4a60      	ldr	r2, [pc, #384]	@ (80090d8 <USB_EPStartXfer+0x1254>)
 8008f58:	4694      	mov	ip, r2
 8008f5a:	4463      	add	r3, ip
 8008f5c:	21b8      	movs	r1, #184	@ 0xb8
 8008f5e:	187a      	adds	r2, r7, r1
 8008f60:	6013      	str	r3, [r2, #0]
 8008f62:	187b      	adds	r3, r7, r1
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	881b      	ldrh	r3, [r3, #0]
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	059b      	lsls	r3, r3, #22
 8008f6c:	0d9b      	lsrs	r3, r3, #22
 8008f6e:	b29a      	uxth	r2, r3
 8008f70:	187b      	adds	r3, r7, r1
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	801a      	strh	r2, [r3, #0]
 8008f76:	1d7b      	adds	r3, r7, #5
 8008f78:	33ff      	adds	r3, #255	@ 0xff
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10a      	bne.n	8008f96 <USB_EPStartXfer+0x1112>
 8008f80:	187b      	adds	r3, r7, r1
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	881b      	ldrh	r3, [r3, #0]
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	4a52      	ldr	r2, [pc, #328]	@ (80090d4 <USB_EPStartXfer+0x1250>)
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	187b      	adds	r3, r7, r1
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	801a      	strh	r2, [r3, #0]
 8008f94:	e072      	b.n	800907c <USB_EPStartXfer+0x11f8>
 8008f96:	1d7b      	adds	r3, r7, #5
 8008f98:	33ff      	adds	r3, #255	@ 0xff
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f9e:	d822      	bhi.n	8008fe6 <USB_EPStartXfer+0x1162>
 8008fa0:	1d7b      	adds	r3, r7, #5
 8008fa2:	33ff      	adds	r3, #255	@ 0xff
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	085b      	lsrs	r3, r3, #1
 8008fa8:	21d8      	movs	r1, #216	@ 0xd8
 8008faa:	187a      	adds	r2, r7, r1
 8008fac:	6013      	str	r3, [r2, #0]
 8008fae:	1d7b      	adds	r3, r7, #5
 8008fb0:	33ff      	adds	r3, #255	@ 0xff
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	d004      	beq.n	8008fc4 <USB_EPStartXfer+0x1140>
 8008fba:	187b      	adds	r3, r7, r1
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	187a      	adds	r2, r7, r1
 8008fc2:	6013      	str	r3, [r2, #0]
 8008fc4:	21b8      	movs	r1, #184	@ 0xb8
 8008fc6:	187b      	adds	r3, r7, r1
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	881b      	ldrh	r3, [r3, #0]
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	23d8      	movs	r3, #216	@ 0xd8
 8008fd0:	18fb      	adds	r3, r7, r3
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	029b      	lsls	r3, r3, #10
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	b29a      	uxth	r2, r3
 8008fde:	187b      	adds	r3, r7, r1
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	801a      	strh	r2, [r3, #0]
 8008fe4:	e04a      	b.n	800907c <USB_EPStartXfer+0x11f8>
 8008fe6:	1d7b      	adds	r3, r7, #5
 8008fe8:	33ff      	adds	r3, #255	@ 0xff
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	095b      	lsrs	r3, r3, #5
 8008fee:	21d8      	movs	r1, #216	@ 0xd8
 8008ff0:	187a      	adds	r2, r7, r1
 8008ff2:	6013      	str	r3, [r2, #0]
 8008ff4:	1d7b      	adds	r3, r7, #5
 8008ff6:	33ff      	adds	r3, #255	@ 0xff
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	221f      	movs	r2, #31
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	d104      	bne.n	800900a <USB_EPStartXfer+0x1186>
 8009000:	187b      	adds	r3, r7, r1
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	3b01      	subs	r3, #1
 8009006:	187a      	adds	r2, r7, r1
 8009008:	6013      	str	r3, [r2, #0]
 800900a:	21b8      	movs	r1, #184	@ 0xb8
 800900c:	187b      	adds	r3, r7, r1
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	881b      	ldrh	r3, [r3, #0]
 8009012:	b29a      	uxth	r2, r3
 8009014:	23d8      	movs	r3, #216	@ 0xd8
 8009016:	18fb      	adds	r3, r7, r3
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	b29b      	uxth	r3, r3
 800901c:	029b      	lsls	r3, r3, #10
 800901e:	b29b      	uxth	r3, r3
 8009020:	4313      	orrs	r3, r2
 8009022:	b29b      	uxth	r3, r3
 8009024:	4a2b      	ldr	r2, [pc, #172]	@ (80090d4 <USB_EPStartXfer+0x1250>)
 8009026:	4313      	orrs	r3, r2
 8009028:	b29a      	uxth	r2, r3
 800902a:	187b      	adds	r3, r7, r1
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	801a      	strh	r2, [r3, #0]
 8009030:	e024      	b.n	800907c <USB_EPStartXfer+0x11f8>
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	785b      	ldrb	r3, [r3, #1]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d120      	bne.n	800907c <USB_EPStartXfer+0x11f8>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2250      	movs	r2, #80	@ 0x50
 800903e:	5a9b      	ldrh	r3, [r3, r2]
 8009040:	b29b      	uxth	r3, r3
 8009042:	001a      	movs	r2, r3
 8009044:	21c4      	movs	r1, #196	@ 0xc4
 8009046:	187b      	adds	r3, r7, r1
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	189b      	adds	r3, r3, r2
 800904c:	187a      	adds	r2, r7, r1
 800904e:	6013      	str	r3, [r2, #0]
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	00da      	lsls	r2, r3, #3
 8009056:	187b      	adds	r3, r7, r1
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	18d3      	adds	r3, r2, r3
 800905c:	4a1e      	ldr	r2, [pc, #120]	@ (80090d8 <USB_EPStartXfer+0x1254>)
 800905e:	4694      	mov	ip, r2
 8009060:	4463      	add	r3, ip
 8009062:	21c0      	movs	r1, #192	@ 0xc0
 8009064:	187a      	adds	r2, r7, r1
 8009066:	6013      	str	r3, [r2, #0]
 8009068:	1d7b      	adds	r3, r7, #5
 800906a:	33ff      	adds	r3, #255	@ 0xff
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	b29a      	uxth	r2, r3
 8009070:	187b      	adds	r3, r7, r1
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	801a      	strh	r2, [r3, #0]
 8009076:	e001      	b.n	800907c <USB_EPStartXfer+0x11f8>
      }
      else
      {
        return HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	e025      	b.n	80090c8 <USB_EPStartXfer+0x1244>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	18d3      	adds	r3, r2, r3
 8009086:	881b      	ldrh	r3, [r3, #0]
 8009088:	b29a      	uxth	r2, r3
 800908a:	208a      	movs	r0, #138	@ 0x8a
 800908c:	183b      	adds	r3, r7, r0
 800908e:	4913      	ldr	r1, [pc, #76]	@ (80090dc <USB_EPStartXfer+0x1258>)
 8009090:	400a      	ands	r2, r1
 8009092:	801a      	strh	r2, [r3, #0]
 8009094:	183b      	adds	r3, r7, r0
 8009096:	183a      	adds	r2, r7, r0
 8009098:	8812      	ldrh	r2, [r2, #0]
 800909a:	2180      	movs	r1, #128	@ 0x80
 800909c:	0149      	lsls	r1, r1, #5
 800909e:	404a      	eors	r2, r1
 80090a0:	801a      	strh	r2, [r3, #0]
 80090a2:	183b      	adds	r3, r7, r0
 80090a4:	183a      	adds	r2, r7, r0
 80090a6:	8812      	ldrh	r2, [r2, #0]
 80090a8:	2180      	movs	r1, #128	@ 0x80
 80090aa:	0189      	lsls	r1, r1, #6
 80090ac:	404a      	eors	r2, r1
 80090ae:	801a      	strh	r2, [r3, #0]
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	18d3      	adds	r3, r2, r3
 80090ba:	183a      	adds	r2, r7, r0
 80090bc:	8812      	ldrh	r2, [r2, #0]
 80090be:	4908      	ldr	r1, [pc, #32]	@ (80090e0 <USB_EPStartXfer+0x125c>)
 80090c0:	430a      	orrs	r2, r1
 80090c2:	b292      	uxth	r2, r2
 80090c4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	0018      	movs	r0, r3
 80090ca:	46bd      	mov	sp, r7
 80090cc:	b043      	add	sp, #268	@ 0x10c
 80090ce:	bd90      	pop	{r4, r7, pc}
 80090d0:	00000402 	.word	0x00000402
 80090d4:	ffff8000 	.word	0xffff8000
 80090d8:	00000406 	.word	0x00000406
 80090dc:	ffffbf8f 	.word	0xffffbf8f
 80090e0:	ffff8080 	.word	0xffff8080

080090e4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	785b      	ldrb	r3, [r3, #1]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d01d      	beq.n	8009132 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	18d3      	adds	r3, r2, r3
 8009100:	881b      	ldrh	r3, [r3, #0]
 8009102:	b29a      	uxth	r2, r3
 8009104:	200c      	movs	r0, #12
 8009106:	183b      	adds	r3, r7, r0
 8009108:	491b      	ldr	r1, [pc, #108]	@ (8009178 <USB_EPSetStall+0x94>)
 800910a:	400a      	ands	r2, r1
 800910c:	801a      	strh	r2, [r3, #0]
 800910e:	183b      	adds	r3, r7, r0
 8009110:	183a      	adds	r2, r7, r0
 8009112:	8812      	ldrh	r2, [r2, #0]
 8009114:	2110      	movs	r1, #16
 8009116:	404a      	eors	r2, r1
 8009118:	801a      	strh	r2, [r3, #0]
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	18d3      	adds	r3, r2, r3
 8009124:	183a      	adds	r2, r7, r0
 8009126:	8812      	ldrh	r2, [r2, #0]
 8009128:	4914      	ldr	r1, [pc, #80]	@ (800917c <USB_EPSetStall+0x98>)
 800912a:	430a      	orrs	r2, r1
 800912c:	b292      	uxth	r2, r2
 800912e:	801a      	strh	r2, [r3, #0]
 8009130:	e01d      	b.n	800916e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	18d3      	adds	r3, r2, r3
 800913c:	881b      	ldrh	r3, [r3, #0]
 800913e:	b29a      	uxth	r2, r3
 8009140:	200e      	movs	r0, #14
 8009142:	183b      	adds	r3, r7, r0
 8009144:	490e      	ldr	r1, [pc, #56]	@ (8009180 <USB_EPSetStall+0x9c>)
 8009146:	400a      	ands	r2, r1
 8009148:	801a      	strh	r2, [r3, #0]
 800914a:	183b      	adds	r3, r7, r0
 800914c:	183a      	adds	r2, r7, r0
 800914e:	8812      	ldrh	r2, [r2, #0]
 8009150:	2180      	movs	r1, #128	@ 0x80
 8009152:	0149      	lsls	r1, r1, #5
 8009154:	404a      	eors	r2, r1
 8009156:	801a      	strh	r2, [r3, #0]
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	18d3      	adds	r3, r2, r3
 8009162:	183a      	adds	r2, r7, r0
 8009164:	8812      	ldrh	r2, [r2, #0]
 8009166:	4905      	ldr	r1, [pc, #20]	@ (800917c <USB_EPSetStall+0x98>)
 8009168:	430a      	orrs	r2, r1
 800916a:	b292      	uxth	r2, r2
 800916c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	0018      	movs	r0, r3
 8009172:	46bd      	mov	sp, r7
 8009174:	b004      	add	sp, #16
 8009176:	bd80      	pop	{r7, pc}
 8009178:	ffff8fbf 	.word	0xffff8fbf
 800917c:	ffff8080 	.word	0xffff8080
 8009180:	ffffbf8f 	.word	0xffffbf8f

08009184 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	7b1b      	ldrb	r3, [r3, #12]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d000      	beq.n	8009198 <USB_EPClearStall+0x14>
 8009196:	e095      	b.n	80092c4 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	785b      	ldrb	r3, [r3, #1]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d046      	beq.n	800922e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	18d2      	adds	r2, r2, r3
 80091aa:	2110      	movs	r1, #16
 80091ac:	187b      	adds	r3, r7, r1
 80091ae:	8812      	ldrh	r2, [r2, #0]
 80091b0:	801a      	strh	r2, [r3, #0]
 80091b2:	187b      	adds	r3, r7, r1
 80091b4:	881b      	ldrh	r3, [r3, #0]
 80091b6:	2240      	movs	r2, #64	@ 0x40
 80091b8:	4013      	ands	r3, r2
 80091ba:	d016      	beq.n	80091ea <USB_EPClearStall+0x66>
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	18d3      	adds	r3, r2, r3
 80091c6:	881b      	ldrh	r3, [r3, #0]
 80091c8:	b29a      	uxth	r2, r3
 80091ca:	200e      	movs	r0, #14
 80091cc:	183b      	adds	r3, r7, r0
 80091ce:	4940      	ldr	r1, [pc, #256]	@ (80092d0 <USB_EPClearStall+0x14c>)
 80091d0:	400a      	ands	r2, r1
 80091d2:	801a      	strh	r2, [r3, #0]
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	18d3      	adds	r3, r2, r3
 80091de:	183a      	adds	r2, r7, r0
 80091e0:	8812      	ldrh	r2, [r2, #0]
 80091e2:	493c      	ldr	r1, [pc, #240]	@ (80092d4 <USB_EPClearStall+0x150>)
 80091e4:	430a      	orrs	r2, r1
 80091e6:	b292      	uxth	r2, r2
 80091e8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	78db      	ldrb	r3, [r3, #3]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d068      	beq.n	80092c4 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	18d3      	adds	r3, r2, r3
 80091fc:	881b      	ldrh	r3, [r3, #0]
 80091fe:	b29a      	uxth	r2, r3
 8009200:	200c      	movs	r0, #12
 8009202:	183b      	adds	r3, r7, r0
 8009204:	4934      	ldr	r1, [pc, #208]	@ (80092d8 <USB_EPClearStall+0x154>)
 8009206:	400a      	ands	r2, r1
 8009208:	801a      	strh	r2, [r3, #0]
 800920a:	183b      	adds	r3, r7, r0
 800920c:	183a      	adds	r2, r7, r0
 800920e:	8812      	ldrh	r2, [r2, #0]
 8009210:	2120      	movs	r1, #32
 8009212:	404a      	eors	r2, r1
 8009214:	801a      	strh	r2, [r3, #0]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	18d3      	adds	r3, r2, r3
 8009220:	183a      	adds	r2, r7, r0
 8009222:	8812      	ldrh	r2, [r2, #0]
 8009224:	492d      	ldr	r1, [pc, #180]	@ (80092dc <USB_EPClearStall+0x158>)
 8009226:	430a      	orrs	r2, r1
 8009228:	b292      	uxth	r2, r2
 800922a:	801a      	strh	r2, [r3, #0]
 800922c:	e04a      	b.n	80092c4 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	18d2      	adds	r2, r2, r3
 8009238:	2116      	movs	r1, #22
 800923a:	187b      	adds	r3, r7, r1
 800923c:	8812      	ldrh	r2, [r2, #0]
 800923e:	801a      	strh	r2, [r3, #0]
 8009240:	187b      	adds	r3, r7, r1
 8009242:	881a      	ldrh	r2, [r3, #0]
 8009244:	2380      	movs	r3, #128	@ 0x80
 8009246:	01db      	lsls	r3, r3, #7
 8009248:	4013      	ands	r3, r2
 800924a:	d016      	beq.n	800927a <USB_EPClearStall+0xf6>
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	18d3      	adds	r3, r2, r3
 8009256:	881b      	ldrh	r3, [r3, #0]
 8009258:	b29a      	uxth	r2, r3
 800925a:	2014      	movs	r0, #20
 800925c:	183b      	adds	r3, r7, r0
 800925e:	491c      	ldr	r1, [pc, #112]	@ (80092d0 <USB_EPClearStall+0x14c>)
 8009260:	400a      	ands	r2, r1
 8009262:	801a      	strh	r2, [r3, #0]
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	18d3      	adds	r3, r2, r3
 800926e:	183a      	adds	r2, r7, r0
 8009270:	8812      	ldrh	r2, [r2, #0]
 8009272:	491b      	ldr	r1, [pc, #108]	@ (80092e0 <USB_EPClearStall+0x15c>)
 8009274:	430a      	orrs	r2, r1
 8009276:	b292      	uxth	r2, r2
 8009278:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	18d3      	adds	r3, r2, r3
 8009284:	881b      	ldrh	r3, [r3, #0]
 8009286:	b29a      	uxth	r2, r3
 8009288:	2012      	movs	r0, #18
 800928a:	183b      	adds	r3, r7, r0
 800928c:	4915      	ldr	r1, [pc, #84]	@ (80092e4 <USB_EPClearStall+0x160>)
 800928e:	400a      	ands	r2, r1
 8009290:	801a      	strh	r2, [r3, #0]
 8009292:	183b      	adds	r3, r7, r0
 8009294:	183a      	adds	r2, r7, r0
 8009296:	8812      	ldrh	r2, [r2, #0]
 8009298:	2180      	movs	r1, #128	@ 0x80
 800929a:	0149      	lsls	r1, r1, #5
 800929c:	404a      	eors	r2, r1
 800929e:	801a      	strh	r2, [r3, #0]
 80092a0:	183b      	adds	r3, r7, r0
 80092a2:	183a      	adds	r2, r7, r0
 80092a4:	8812      	ldrh	r2, [r2, #0]
 80092a6:	2180      	movs	r1, #128	@ 0x80
 80092a8:	0189      	lsls	r1, r1, #6
 80092aa:	404a      	eors	r2, r1
 80092ac:	801a      	strh	r2, [r3, #0]
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	18d3      	adds	r3, r2, r3
 80092b8:	183a      	adds	r2, r7, r0
 80092ba:	8812      	ldrh	r2, [r2, #0]
 80092bc:	4907      	ldr	r1, [pc, #28]	@ (80092dc <USB_EPClearStall+0x158>)
 80092be:	430a      	orrs	r2, r1
 80092c0:	b292      	uxth	r2, r2
 80092c2:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	0018      	movs	r0, r3
 80092c8:	46bd      	mov	sp, r7
 80092ca:	b006      	add	sp, #24
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	46c0      	nop			@ (mov r8, r8)
 80092d0:	ffff8f8f 	.word	0xffff8f8f
 80092d4:	ffff80c0 	.word	0xffff80c0
 80092d8:	ffff8fbf 	.word	0xffff8fbf
 80092dc:	ffff8080 	.word	0xffff8080
 80092e0:	ffffc080 	.word	0xffffc080
 80092e4:	ffffbf8f 	.word	0xffffbf8f

080092e8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	000a      	movs	r2, r1
 80092f2:	1cfb      	adds	r3, r7, #3
 80092f4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80092f6:	1cfb      	adds	r3, r7, #3
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d103      	bne.n	8009306 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	224c      	movs	r2, #76	@ 0x4c
 8009302:	2180      	movs	r1, #128	@ 0x80
 8009304:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	0018      	movs	r0, r3
 800930a:	46bd      	mov	sp, r7
 800930c:	b002      	add	sp, #8
 800930e:	bd80      	pop	{r7, pc}

08009310 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2258      	movs	r2, #88	@ 0x58
 800931c:	5a9b      	ldrh	r3, [r3, r2]
 800931e:	b29b      	uxth	r3, r3
 8009320:	4a05      	ldr	r2, [pc, #20]	@ (8009338 <USB_DevConnect+0x28>)
 8009322:	4313      	orrs	r3, r2
 8009324:	b299      	uxth	r1, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2258      	movs	r2, #88	@ 0x58
 800932a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	0018      	movs	r0, r3
 8009330:	46bd      	mov	sp, r7
 8009332:	b002      	add	sp, #8
 8009334:	bd80      	pop	{r7, pc}
 8009336:	46c0      	nop			@ (mov r8, r8)
 8009338:	ffff8000 	.word	0xffff8000

0800933c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2244      	movs	r2, #68	@ 0x44
 8009348:	5a9b      	ldrh	r3, [r3, r2]
 800934a:	b29b      	uxth	r3, r3
 800934c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800934e:	68fb      	ldr	r3, [r7, #12]
}
 8009350:	0018      	movs	r0, r3
 8009352:	46bd      	mov	sp, r7
 8009354:	b004      	add	sp, #16
 8009356:	bd80      	pop	{r7, pc}

08009358 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b08a      	sub	sp, #40	@ 0x28
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	0019      	movs	r1, r3
 8009364:	1dbb      	adds	r3, r7, #6
 8009366:	801a      	strh	r2, [r3, #0]
 8009368:	1d3b      	adds	r3, r7, #4
 800936a:	1c0a      	adds	r2, r1, #0
 800936c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800936e:	1d3b      	adds	r3, r7, #4
 8009370:	881b      	ldrh	r3, [r3, #0]
 8009372:	3301      	adds	r3, #1
 8009374:	085b      	lsrs	r3, r3, #1
 8009376:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009380:	1dbb      	adds	r3, r7, #6
 8009382:	881a      	ldrh	r2, [r3, #0]
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	18d3      	adds	r3, r2, r3
 8009388:	2280      	movs	r2, #128	@ 0x80
 800938a:	00d2      	lsls	r2, r2, #3
 800938c:	4694      	mov	ip, r2
 800938e:	4463      	add	r3, ip
 8009390:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	627b      	str	r3, [r7, #36]	@ 0x24
 8009396:	e021      	b.n	80093dc <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	781a      	ldrb	r2, [r3, #0]
 800939c:	2112      	movs	r1, #18
 800939e:	187b      	adds	r3, r7, r1
 80093a0:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	3301      	adds	r3, #1
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	b21b      	sxth	r3, r3
 80093aa:	021b      	lsls	r3, r3, #8
 80093ac:	b21a      	sxth	r2, r3
 80093ae:	187b      	adds	r3, r7, r1
 80093b0:	2000      	movs	r0, #0
 80093b2:	5e1b      	ldrsh	r3, [r3, r0]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	b21a      	sxth	r2, r3
 80093b8:	187b      	adds	r3, r7, r1
 80093ba:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80093bc:	6a3b      	ldr	r3, [r7, #32]
 80093be:	187a      	adds	r2, r7, r1
 80093c0:	8812      	ldrh	r2, [r2, #0]
 80093c2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80093c4:	6a3b      	ldr	r3, [r7, #32]
 80093c6:	3302      	adds	r3, #2
 80093c8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	3301      	adds	r3, #1
 80093ce:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	3301      	adds	r3, #1
 80093d4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80093d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d8:	3b01      	subs	r3, #1
 80093da:	627b      	str	r3, [r7, #36]	@ 0x24
 80093dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1da      	bne.n	8009398 <USB_WritePMA+0x40>
  }
}
 80093e2:	46c0      	nop			@ (mov r8, r8)
 80093e4:	46c0      	nop			@ (mov r8, r8)
 80093e6:	46bd      	mov	sp, r7
 80093e8:	b00a      	add	sp, #40	@ 0x28
 80093ea:	bd80      	pop	{r7, pc}

080093ec <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b08a      	sub	sp, #40	@ 0x28
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	0019      	movs	r1, r3
 80093f8:	1dbb      	adds	r3, r7, #6
 80093fa:	801a      	strh	r2, [r3, #0]
 80093fc:	1d3b      	adds	r3, r7, #4
 80093fe:	1c0a      	adds	r2, r1, #0
 8009400:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009402:	1d3b      	adds	r3, r7, #4
 8009404:	881b      	ldrh	r3, [r3, #0]
 8009406:	085b      	lsrs	r3, r3, #1
 8009408:	b29b      	uxth	r3, r3
 800940a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009414:	1dbb      	adds	r3, r7, #6
 8009416:	881a      	ldrh	r2, [r3, #0]
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	18d3      	adds	r3, r2, r3
 800941c:	2280      	movs	r2, #128	@ 0x80
 800941e:	00d2      	lsls	r2, r2, #3
 8009420:	4694      	mov	ip, r2
 8009422:	4463      	add	r3, ip
 8009424:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	627b      	str	r3, [r7, #36]	@ 0x24
 800942a:	e018      	b.n	800945e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800942c:	6a3b      	ldr	r3, [r7, #32]
 800942e:	881b      	ldrh	r3, [r3, #0]
 8009430:	b29b      	uxth	r3, r3
 8009432:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009434:	6a3b      	ldr	r3, [r7, #32]
 8009436:	3302      	adds	r3, #2
 8009438:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	b2da      	uxtb	r2, r3
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	3301      	adds	r3, #1
 8009446:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	0a1b      	lsrs	r3, r3, #8
 800944c:	b2da      	uxtb	r2, r3
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	3301      	adds	r3, #1
 8009456:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800945a:	3b01      	subs	r3, #1
 800945c:	627b      	str	r3, [r7, #36]	@ 0x24
 800945e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009460:	2b00      	cmp	r3, #0
 8009462:	d1e3      	bne.n	800942c <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009464:	1d3b      	adds	r3, r7, #4
 8009466:	881b      	ldrh	r3, [r3, #0]
 8009468:	2201      	movs	r2, #1
 800946a:	4013      	ands	r3, r2
 800946c:	b29b      	uxth	r3, r3
 800946e:	2b00      	cmp	r3, #0
 8009470:	d007      	beq.n	8009482 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8009472:	6a3b      	ldr	r3, [r7, #32]
 8009474:	881b      	ldrh	r3, [r3, #0]
 8009476:	b29b      	uxth	r3, r3
 8009478:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	b2da      	uxtb	r2, r3
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	701a      	strb	r2, [r3, #0]
  }
}
 8009482:	46c0      	nop			@ (mov r8, r8)
 8009484:	46bd      	mov	sp, r7
 8009486:	b00a      	add	sp, #40	@ 0x28
 8009488:	bd80      	pop	{r7, pc}

0800948a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b084      	sub	sp, #16
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	000a      	movs	r2, r1
 8009494:	1cfb      	adds	r3, r7, #3
 8009496:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8009498:	230f      	movs	r3, #15
 800949a:	18fb      	adds	r3, r7, r3
 800949c:	2200      	movs	r2, #0
 800949e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	7c1b      	ldrb	r3, [r3, #16]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d116      	bne.n	80094d6 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80094a8:	2380      	movs	r3, #128	@ 0x80
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	2202      	movs	r2, #2
 80094b0:	2181      	movs	r1, #129	@ 0x81
 80094b2:	f002 f88c 	bl	800b5ce <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2201      	movs	r2, #1
 80094ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80094bc:	2380      	movs	r3, #128	@ 0x80
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	2202      	movs	r2, #2
 80094c4:	2101      	movs	r1, #1
 80094c6:	f002 f882 	bl	800b5ce <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	23b6      	movs	r3, #182	@ 0xb6
 80094ce:	005b      	lsls	r3, r3, #1
 80094d0:	2101      	movs	r1, #1
 80094d2:	50d1      	str	r1, [r2, r3]
 80094d4:	e013      	b.n	80094fe <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	2340      	movs	r3, #64	@ 0x40
 80094da:	2202      	movs	r2, #2
 80094dc:	2181      	movs	r1, #129	@ 0x81
 80094de:	f002 f876 	bl	800b5ce <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2201      	movs	r2, #1
 80094e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	2340      	movs	r3, #64	@ 0x40
 80094ec:	2202      	movs	r2, #2
 80094ee:	2101      	movs	r1, #1
 80094f0:	f002 f86d 	bl	800b5ce <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	23b6      	movs	r3, #182	@ 0xb6
 80094f8:	005b      	lsls	r3, r3, #1
 80094fa:	2101      	movs	r1, #1
 80094fc:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	2308      	movs	r3, #8
 8009502:	2203      	movs	r2, #3
 8009504:	2182      	movs	r1, #130	@ 0x82
 8009506:	f002 f862 	bl	800b5ce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2201      	movs	r2, #1
 800950e:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009510:	2387      	movs	r3, #135	@ 0x87
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	0018      	movs	r0, r3
 8009516:	f002 f9f1 	bl	800b8fc <USBD_static_malloc>
 800951a:	0001      	movs	r1, r0
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	23ae      	movs	r3, #174	@ 0xae
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	23ae      	movs	r3, #174	@ 0xae
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	58d3      	ldr	r3, [r2, r3]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d104      	bne.n	800953a <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8009530:	230f      	movs	r3, #15
 8009532:	18fb      	adds	r3, r7, r3
 8009534:	2201      	movs	r2, #1
 8009536:	701a      	strb	r2, [r3, #0]
 8009538:	e02c      	b.n	8009594 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	23ae      	movs	r3, #174	@ 0xae
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	58d3      	ldr	r3, [r2, r3]
 8009542:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	23af      	movs	r3, #175	@ 0xaf
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	58d3      	ldr	r3, [r2, r3]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009550:	68ba      	ldr	r2, [r7, #8]
 8009552:	2385      	movs	r3, #133	@ 0x85
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	2100      	movs	r1, #0
 8009558:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800955a:	68ba      	ldr	r2, [r7, #8]
 800955c:	2386      	movs	r3, #134	@ 0x86
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	2100      	movs	r1, #0
 8009562:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	7c1b      	ldrb	r3, [r3, #16]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d10a      	bne.n	8009582 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800956c:	68ba      	ldr	r2, [r7, #8]
 800956e:	2381      	movs	r3, #129	@ 0x81
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	58d2      	ldr	r2, [r2, r3]
 8009574:	2380      	movs	r3, #128	@ 0x80
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	2101      	movs	r1, #1
 800957c:	f002 f971 	bl	800b862 <USBD_LL_PrepareReceive>
 8009580:	e008      	b.n	8009594 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	2381      	movs	r3, #129	@ 0x81
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	58d2      	ldr	r2, [r2, r3]
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	2340      	movs	r3, #64	@ 0x40
 800958e:	2101      	movs	r1, #1
 8009590:	f002 f967 	bl	800b862 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009594:	230f      	movs	r3, #15
 8009596:	18fb      	adds	r3, r7, r3
 8009598:	781b      	ldrb	r3, [r3, #0]
}
 800959a:	0018      	movs	r0, r3
 800959c:	46bd      	mov	sp, r7
 800959e:	b004      	add	sp, #16
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b084      	sub	sp, #16
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
 80095aa:	000a      	movs	r2, r1
 80095ac:	1cfb      	adds	r3, r7, #3
 80095ae:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80095b0:	230f      	movs	r3, #15
 80095b2:	18fb      	adds	r3, r7, r3
 80095b4:	2200      	movs	r2, #0
 80095b6:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2181      	movs	r1, #129	@ 0x81
 80095bc:	0018      	movs	r0, r3
 80095be:	f002 f83d 	bl	800b63c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2101      	movs	r1, #1
 80095cc:	0018      	movs	r0, r3
 80095ce:	f002 f835 	bl	800b63c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	23b6      	movs	r3, #182	@ 0xb6
 80095d6:	005b      	lsls	r3, r3, #1
 80095d8:	2100      	movs	r1, #0
 80095da:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2182      	movs	r1, #130	@ 0x82
 80095e0:	0018      	movs	r0, r3
 80095e2:	f002 f82b 	bl	800b63c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	23ae      	movs	r3, #174	@ 0xae
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	58d3      	ldr	r3, [r2, r3]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d011      	beq.n	800961c <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	23af      	movs	r3, #175	@ 0xaf
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	58d3      	ldr	r3, [r2, r3]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	23ae      	movs	r3, #174	@ 0xae
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	58d3      	ldr	r3, [r2, r3]
 800960c:	0018      	movs	r0, r3
 800960e:	f002 f981 	bl	800b914 <USBD_static_free>
    pdev->pClassData = NULL;
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	23ae      	movs	r3, #174	@ 0xae
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	2100      	movs	r1, #0
 800961a:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800961c:	230f      	movs	r3, #15
 800961e:	18fb      	adds	r3, r7, r3
 8009620:	781b      	ldrb	r3, [r3, #0]
}
 8009622:	0018      	movs	r0, r3
 8009624:	46bd      	mov	sp, r7
 8009626:	b004      	add	sp, #16
 8009628:	bd80      	pop	{r7, pc}
	...

0800962c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	23ae      	movs	r3, #174	@ 0xae
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	58d3      	ldr	r3, [r2, r3]
 800963e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009640:	230f      	movs	r3, #15
 8009642:	18fb      	adds	r3, r7, r3
 8009644:	2200      	movs	r2, #0
 8009646:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8009648:	230c      	movs	r3, #12
 800964a:	18fb      	adds	r3, r7, r3
 800964c:	2200      	movs	r2, #0
 800964e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8009650:	2317      	movs	r3, #23
 8009652:	18fb      	adds	r3, r7, r3
 8009654:	2200      	movs	r2, #0
 8009656:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	001a      	movs	r2, r3
 800965e:	2360      	movs	r3, #96	@ 0x60
 8009660:	4013      	ands	r3, r2
 8009662:	d03d      	beq.n	80096e0 <USBD_CDC_Setup+0xb4>
 8009664:	2b20      	cmp	r3, #32
 8009666:	d000      	beq.n	800966a <USBD_CDC_Setup+0x3e>
 8009668:	e094      	b.n	8009794 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	88db      	ldrh	r3, [r3, #6]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d02b      	beq.n	80096ca <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	b25b      	sxtb	r3, r3
 8009678:	2b00      	cmp	r3, #0
 800967a:	da12      	bge.n	80096a2 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	23af      	movs	r3, #175	@ 0xaf
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	58d3      	ldr	r3, [r2, r3]
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	683a      	ldr	r2, [r7, #0]
 8009688:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800968a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800968c:	683a      	ldr	r2, [r7, #0]
 800968e:	88d2      	ldrh	r2, [r2, #6]
 8009690:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009692:	6939      	ldr	r1, [r7, #16]
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	88da      	ldrh	r2, [r3, #6]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	0018      	movs	r0, r3
 800969c:	f001 fbaf 	bl	800adfe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80096a0:	e083      	b.n	80097aa <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	7859      	ldrb	r1, [r3, #1]
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	2380      	movs	r3, #128	@ 0x80
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	88db      	ldrh	r3, [r3, #6]
 80096b2:	b2d9      	uxtb	r1, r3
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	4a40      	ldr	r2, [pc, #256]	@ (80097b8 <USBD_CDC_Setup+0x18c>)
 80096b8:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80096ba:	6939      	ldr	r1, [r7, #16]
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	88da      	ldrh	r2, [r3, #6]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	0018      	movs	r0, r3
 80096c4:	f001 fbce 	bl	800ae64 <USBD_CtlPrepareRx>
      break;
 80096c8:	e06f      	b.n	80097aa <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	23af      	movs	r3, #175	@ 0xaf
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	58d3      	ldr	r3, [r2, r3]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	683a      	ldr	r2, [r7, #0]
 80096d6:	7850      	ldrb	r0, [r2, #1]
 80096d8:	6839      	ldr	r1, [r7, #0]
 80096da:	2200      	movs	r2, #0
 80096dc:	4798      	blx	r3
      break;
 80096de:	e064      	b.n	80097aa <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	785b      	ldrb	r3, [r3, #1]
 80096e4:	2b0b      	cmp	r3, #11
 80096e6:	d037      	beq.n	8009758 <USBD_CDC_Setup+0x12c>
 80096e8:	dc47      	bgt.n	800977a <USBD_CDC_Setup+0x14e>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d002      	beq.n	80096f4 <USBD_CDC_Setup+0xc8>
 80096ee:	2b0a      	cmp	r3, #10
 80096f0:	d019      	beq.n	8009726 <USBD_CDC_Setup+0xfa>
 80096f2:	e042      	b.n	800977a <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	23a7      	movs	r3, #167	@ 0xa7
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	5cd3      	ldrb	r3, [r2, r3]
 80096fc:	2b03      	cmp	r3, #3
 80096fe:	d107      	bne.n	8009710 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009700:	230c      	movs	r3, #12
 8009702:	18f9      	adds	r1, r7, r3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2202      	movs	r2, #2
 8009708:	0018      	movs	r0, r3
 800970a:	f001 fb78 	bl	800adfe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800970e:	e040      	b.n	8009792 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8009710:	683a      	ldr	r2, [r7, #0]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	0011      	movs	r1, r2
 8009716:	0018      	movs	r0, r3
 8009718:	f001 faf3 	bl	800ad02 <USBD_CtlError>
            ret = USBD_FAIL;
 800971c:	2317      	movs	r3, #23
 800971e:	18fb      	adds	r3, r7, r3
 8009720:	2202      	movs	r2, #2
 8009722:	701a      	strb	r2, [r3, #0]
          break;
 8009724:	e035      	b.n	8009792 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	23a7      	movs	r3, #167	@ 0xa7
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	5cd3      	ldrb	r3, [r2, r3]
 800972e:	2b03      	cmp	r3, #3
 8009730:	d107      	bne.n	8009742 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009732:	230f      	movs	r3, #15
 8009734:	18f9      	adds	r1, r7, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2201      	movs	r2, #1
 800973a:	0018      	movs	r0, r3
 800973c:	f001 fb5f 	bl	800adfe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009740:	e027      	b.n	8009792 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8009742:	683a      	ldr	r2, [r7, #0]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	0011      	movs	r1, r2
 8009748:	0018      	movs	r0, r3
 800974a:	f001 fada 	bl	800ad02 <USBD_CtlError>
            ret = USBD_FAIL;
 800974e:	2317      	movs	r3, #23
 8009750:	18fb      	adds	r3, r7, r3
 8009752:	2202      	movs	r2, #2
 8009754:	701a      	strb	r2, [r3, #0]
          break;
 8009756:	e01c      	b.n	8009792 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	23a7      	movs	r3, #167	@ 0xa7
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	5cd3      	ldrb	r3, [r2, r3]
 8009760:	2b03      	cmp	r3, #3
 8009762:	d015      	beq.n	8009790 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8009764:	683a      	ldr	r2, [r7, #0]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	0011      	movs	r1, r2
 800976a:	0018      	movs	r0, r3
 800976c:	f001 fac9 	bl	800ad02 <USBD_CtlError>
            ret = USBD_FAIL;
 8009770:	2317      	movs	r3, #23
 8009772:	18fb      	adds	r3, r7, r3
 8009774:	2202      	movs	r2, #2
 8009776:	701a      	strb	r2, [r3, #0]
          }
          break;
 8009778:	e00a      	b.n	8009790 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800977a:	683a      	ldr	r2, [r7, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	0011      	movs	r1, r2
 8009780:	0018      	movs	r0, r3
 8009782:	f001 fabe 	bl	800ad02 <USBD_CtlError>
          ret = USBD_FAIL;
 8009786:	2317      	movs	r3, #23
 8009788:	18fb      	adds	r3, r7, r3
 800978a:	2202      	movs	r2, #2
 800978c:	701a      	strb	r2, [r3, #0]
          break;
 800978e:	e000      	b.n	8009792 <USBD_CDC_Setup+0x166>
          break;
 8009790:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8009792:	e00a      	b.n	80097aa <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8009794:	683a      	ldr	r2, [r7, #0]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	0011      	movs	r1, r2
 800979a:	0018      	movs	r0, r3
 800979c:	f001 fab1 	bl	800ad02 <USBD_CtlError>
      ret = USBD_FAIL;
 80097a0:	2317      	movs	r3, #23
 80097a2:	18fb      	adds	r3, r7, r3
 80097a4:	2202      	movs	r2, #2
 80097a6:	701a      	strb	r2, [r3, #0]
      break;
 80097a8:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80097aa:	2317      	movs	r3, #23
 80097ac:	18fb      	adds	r3, r7, r3
 80097ae:	781b      	ldrb	r3, [r3, #0]
}
 80097b0:	0018      	movs	r0, r3
 80097b2:	46bd      	mov	sp, r7
 80097b4:	b006      	add	sp, #24
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	00000201 	.word	0x00000201

080097bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	000a      	movs	r2, r1
 80097c6:	1cfb      	adds	r3, r7, #3
 80097c8:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	23ae      	movs	r3, #174	@ 0xae
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	58d3      	ldr	r3, [r2, r3]
 80097d2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	23b0      	movs	r3, #176	@ 0xb0
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	58d3      	ldr	r3, [r2, r3]
 80097dc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	23ae      	movs	r3, #174	@ 0xae
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	58d3      	ldr	r3, [r2, r3]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d03e      	beq.n	8009868 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80097ea:	1cfb      	adds	r3, r7, #3
 80097ec:	781a      	ldrb	r2, [r3, #0]
 80097ee:	6879      	ldr	r1, [r7, #4]
 80097f0:	0013      	movs	r3, r2
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	189b      	adds	r3, r3, r2
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	18cb      	adds	r3, r1, r3
 80097fa:	331c      	adds	r3, #28
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d02b      	beq.n	800985a <USBD_CDC_DataIn+0x9e>
 8009802:	1cfb      	adds	r3, r7, #3
 8009804:	781a      	ldrb	r2, [r3, #0]
 8009806:	6879      	ldr	r1, [r7, #4]
 8009808:	0013      	movs	r3, r2
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	189b      	adds	r3, r3, r2
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	18cb      	adds	r3, r1, r3
 8009812:	331c      	adds	r3, #28
 8009814:	6818      	ldr	r0, [r3, #0]
 8009816:	1cfb      	adds	r3, r7, #3
 8009818:	781a      	ldrb	r2, [r3, #0]
 800981a:	68b9      	ldr	r1, [r7, #8]
 800981c:	0013      	movs	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	189b      	adds	r3, r3, r2
 8009822:	00db      	lsls	r3, r3, #3
 8009824:	18cb      	adds	r3, r1, r3
 8009826:	3320      	adds	r3, #32
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	0019      	movs	r1, r3
 800982c:	f7f6 fcf2 	bl	8000214 <__aeabi_uidivmod>
 8009830:	1e0b      	subs	r3, r1, #0
 8009832:	d112      	bne.n	800985a <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009834:	1cfb      	adds	r3, r7, #3
 8009836:	781a      	ldrb	r2, [r3, #0]
 8009838:	6879      	ldr	r1, [r7, #4]
 800983a:	0013      	movs	r3, r2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	189b      	adds	r3, r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	18cb      	adds	r3, r1, r3
 8009844:	331c      	adds	r3, #28
 8009846:	2200      	movs	r2, #0
 8009848:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800984a:	1cfb      	adds	r3, r7, #3
 800984c:	7819      	ldrb	r1, [r3, #0]
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	2300      	movs	r3, #0
 8009852:	2200      	movs	r2, #0
 8009854:	f001 ffce 	bl	800b7f4 <USBD_LL_Transmit>
 8009858:	e004      	b.n	8009864 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800985a:	68fa      	ldr	r2, [r7, #12]
 800985c:	2385      	movs	r3, #133	@ 0x85
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	2100      	movs	r1, #0
 8009862:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8009864:	2300      	movs	r3, #0
 8009866:	e000      	b.n	800986a <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8009868:	2302      	movs	r3, #2
  }
}
 800986a:	0018      	movs	r0, r3
 800986c:	46bd      	mov	sp, r7
 800986e:	b004      	add	sp, #16
 8009870:	bd80      	pop	{r7, pc}

08009872 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b084      	sub	sp, #16
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
 800987a:	000a      	movs	r2, r1
 800987c:	1cfb      	adds	r3, r7, #3
 800987e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	23ae      	movs	r3, #174	@ 0xae
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	58d3      	ldr	r3, [r2, r3]
 8009888:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800988a:	1cfb      	adds	r3, r7, #3
 800988c:	781a      	ldrb	r2, [r3, #0]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	0011      	movs	r1, r2
 8009892:	0018      	movs	r0, r3
 8009894:	f002 f81c 	bl	800b8d0 <USBD_LL_GetRxDataSize>
 8009898:	0001      	movs	r1, r0
 800989a:	68fa      	ldr	r2, [r7, #12]
 800989c:	2383      	movs	r3, #131	@ 0x83
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	23ae      	movs	r3, #174	@ 0xae
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	58d3      	ldr	r3, [r2, r3]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d011      	beq.n	80098d2 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	23af      	movs	r3, #175	@ 0xaf
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	58d3      	ldr	r3, [r2, r3]
 80098b6:	68da      	ldr	r2, [r3, #12]
 80098b8:	68f9      	ldr	r1, [r7, #12]
 80098ba:	2381      	movs	r3, #129	@ 0x81
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	58c8      	ldr	r0, [r1, r3]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2183      	movs	r1, #131	@ 0x83
 80098c4:	0089      	lsls	r1, r1, #2
 80098c6:	468c      	mov	ip, r1
 80098c8:	4463      	add	r3, ip
 80098ca:	0019      	movs	r1, r3
 80098cc:	4790      	blx	r2

    return USBD_OK;
 80098ce:	2300      	movs	r3, #0
 80098d0:	e000      	b.n	80098d4 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 80098d2:	2302      	movs	r3, #2
  }
}
 80098d4:	0018      	movs	r0, r3
 80098d6:	46bd      	mov	sp, r7
 80098d8:	b004      	add	sp, #16
 80098da:	bd80      	pop	{r7, pc}

080098dc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80098dc:	b590      	push	{r4, r7, lr}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	23ae      	movs	r3, #174	@ 0xae
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	58d3      	ldr	r3, [r2, r3]
 80098ec:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	23af      	movs	r3, #175	@ 0xaf
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	58d3      	ldr	r3, [r2, r3]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d018      	beq.n	800992c <USBD_CDC_EP0_RxReady+0x50>
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	2380      	movs	r3, #128	@ 0x80
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	5cd3      	ldrb	r3, [r2, r3]
 8009902:	2bff      	cmp	r3, #255	@ 0xff
 8009904:	d012      	beq.n	800992c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	23af      	movs	r3, #175	@ 0xaf
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	58d3      	ldr	r3, [r2, r3]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	68f9      	ldr	r1, [r7, #12]
 8009912:	2280      	movs	r2, #128	@ 0x80
 8009914:	0092      	lsls	r2, r2, #2
 8009916:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8009918:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	4c06      	ldr	r4, [pc, #24]	@ (8009938 <USBD_CDC_EP0_RxReady+0x5c>)
 800991e:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009920:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	2380      	movs	r3, #128	@ 0x80
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	21ff      	movs	r1, #255	@ 0xff
 800992a:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800992c:	2300      	movs	r3, #0
}
 800992e:	0018      	movs	r0, r3
 8009930:	46bd      	mov	sp, r7
 8009932:	b005      	add	sp, #20
 8009934:	bd90      	pop	{r4, r7, pc}
 8009936:	46c0      	nop			@ (mov r8, r8)
 8009938:	00000201 	.word	0x00000201

0800993c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2243      	movs	r2, #67	@ 0x43
 8009948:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800994a:	4b02      	ldr	r3, [pc, #8]	@ (8009954 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800994c:	0018      	movs	r0, r3
 800994e:	46bd      	mov	sp, r7
 8009950:	b002      	add	sp, #8
 8009952:	bd80      	pop	{r7, pc}
 8009954:	200000d4 	.word	0x200000d4

08009958 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2243      	movs	r2, #67	@ 0x43
 8009964:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009966:	4b02      	ldr	r3, [pc, #8]	@ (8009970 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8009968:	0018      	movs	r0, r3
 800996a:	46bd      	mov	sp, r7
 800996c:	b002      	add	sp, #8
 800996e:	bd80      	pop	{r7, pc}
 8009970:	20000090 	.word	0x20000090

08009974 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2243      	movs	r2, #67	@ 0x43
 8009980:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009982:	4b02      	ldr	r3, [pc, #8]	@ (800998c <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8009984:	0018      	movs	r0, r3
 8009986:	46bd      	mov	sp, r7
 8009988:	b002      	add	sp, #8
 800998a:	bd80      	pop	{r7, pc}
 800998c:	20000118 	.word	0x20000118

08009990 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	220a      	movs	r2, #10
 800999c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800999e:	4b02      	ldr	r3, [pc, #8]	@ (80099a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 80099a0:	0018      	movs	r0, r3
 80099a2:	46bd      	mov	sp, r7
 80099a4:	b002      	add	sp, #8
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	2000004c 	.word	0x2000004c

080099ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80099b6:	200f      	movs	r0, #15
 80099b8:	183b      	adds	r3, r7, r0
 80099ba:	2202      	movs	r2, #2
 80099bc:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d007      	beq.n	80099d4 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	23af      	movs	r3, #175	@ 0xaf
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	6839      	ldr	r1, [r7, #0]
 80099cc:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 80099ce:	183b      	adds	r3, r7, r0
 80099d0:	2200      	movs	r2, #0
 80099d2:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80099d4:	230f      	movs	r3, #15
 80099d6:	18fb      	adds	r3, r7, r3
 80099d8:	781b      	ldrb	r3, [r3, #0]
}
 80099da:	0018      	movs	r0, r3
 80099dc:	46bd      	mov	sp, r7
 80099de:	b004      	add	sp, #16
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b086      	sub	sp, #24
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	60f8      	str	r0, [r7, #12]
 80099ea:	60b9      	str	r1, [r7, #8]
 80099ec:	1dbb      	adds	r3, r7, #6
 80099ee:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	23ae      	movs	r3, #174	@ 0xae
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	58d3      	ldr	r3, [r2, r3]
 80099f8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80099fa:	697a      	ldr	r2, [r7, #20]
 80099fc:	2382      	movs	r3, #130	@ 0x82
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	68b9      	ldr	r1, [r7, #8]
 8009a02:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8009a04:	1dbb      	adds	r3, r7, #6
 8009a06:	8819      	ldrh	r1, [r3, #0]
 8009a08:	697a      	ldr	r2, [r7, #20]
 8009a0a:	2384      	movs	r3, #132	@ 0x84
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	0018      	movs	r0, r3
 8009a14:	46bd      	mov	sp, r7
 8009a16:	b006      	add	sp, #24
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b084      	sub	sp, #16
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
 8009a22:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	23ae      	movs	r3, #174	@ 0xae
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	58d3      	ldr	r3, [r2, r3]
 8009a2c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	2381      	movs	r3, #129	@ 0x81
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	6839      	ldr	r1, [r7, #0]
 8009a36:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	0018      	movs	r0, r3
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	b004      	add	sp, #16
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b084      	sub	sp, #16
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	23ae      	movs	r3, #174	@ 0xae
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	58d3      	ldr	r3, [r2, r3]
 8009a52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	23ae      	movs	r3, #174	@ 0xae
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	58d3      	ldr	r3, [r2, r3]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d022      	beq.n	8009aa6 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	2385      	movs	r3, #133	@ 0x85
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	58d3      	ldr	r3, [r2, r3]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d11a      	bne.n	8009aa2 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	2385      	movs	r3, #133	@ 0x85
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	2101      	movs	r1, #1
 8009a74:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	2384      	movs	r3, #132	@ 0x84
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	58d2      	ldr	r2, [r2, r3]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	2382      	movs	r3, #130	@ 0x82
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	2384      	movs	r3, #132	@ 0x84
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	000a      	movs	r2, r1
 8009a98:	2181      	movs	r1, #129	@ 0x81
 8009a9a:	f001 feab 	bl	800b7f4 <USBD_LL_Transmit>

      return USBD_OK;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	e002      	b.n	8009aa8 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e000      	b.n	8009aa8 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8009aa6:	2302      	movs	r3, #2
  }
}
 8009aa8:	0018      	movs	r0, r3
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	b004      	add	sp, #16
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	23ae      	movs	r3, #174	@ 0xae
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	58d3      	ldr	r3, [r2, r3]
 8009ac0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	23ae      	movs	r3, #174	@ 0xae
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	58d3      	ldr	r3, [r2, r3]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d019      	beq.n	8009b02 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	7c1b      	ldrb	r3, [r3, #16]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d10a      	bne.n	8009aec <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	2381      	movs	r3, #129	@ 0x81
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	58d2      	ldr	r2, [r2, r3]
 8009ade:	2380      	movs	r3, #128	@ 0x80
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	2101      	movs	r1, #1
 8009ae6:	f001 febc 	bl	800b862 <USBD_LL_PrepareReceive>
 8009aea:	e008      	b.n	8009afe <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	2381      	movs	r3, #129	@ 0x81
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	58d2      	ldr	r2, [r2, r3]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	2340      	movs	r3, #64	@ 0x40
 8009af8:	2101      	movs	r1, #1
 8009afa:	f001 feb2 	bl	800b862 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009afe:	2300      	movs	r3, #0
 8009b00:	e000      	b.n	8009b04 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8009b02:	2302      	movs	r3, #2
  }
}
 8009b04:	0018      	movs	r0, r3
 8009b06:	46bd      	mov	sp, r7
 8009b08:	b004      	add	sp, #16
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	1dfb      	adds	r3, r7, #7
 8009b18:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d101      	bne.n	8009b24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009b20:	2302      	movs	r3, #2
 8009b22:	e020      	b.n	8009b66 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	23ad      	movs	r3, #173	@ 0xad
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	58d3      	ldr	r3, [r2, r3]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d004      	beq.n	8009b3a <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	23ad      	movs	r3, #173	@ 0xad
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	2100      	movs	r1, #0
 8009b38:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d004      	beq.n	8009b4a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	23ac      	movs	r3, #172	@ 0xac
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	68b9      	ldr	r1, [r7, #8]
 8009b48:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	23a7      	movs	r3, #167	@ 0xa7
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	2101      	movs	r1, #1
 8009b52:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	1dfa      	adds	r2, r7, #7
 8009b58:	7812      	ldrb	r2, [r2, #0]
 8009b5a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	0018      	movs	r0, r3
 8009b60:	f001 fcac 	bl	800b4bc <USBD_LL_Init>

  return USBD_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	0018      	movs	r0, r3
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	b004      	add	sp, #16
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b084      	sub	sp, #16
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009b78:	200f      	movs	r0, #15
 8009b7a:	183b      	adds	r3, r7, r0
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d008      	beq.n	8009b98 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	23ad      	movs	r3, #173	@ 0xad
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8009b90:	183b      	adds	r3, r7, r0
 8009b92:	2200      	movs	r2, #0
 8009b94:	701a      	strb	r2, [r3, #0]
 8009b96:	e003      	b.n	8009ba0 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009b98:	230f      	movs	r3, #15
 8009b9a:	18fb      	adds	r3, r7, r3
 8009b9c:	2202      	movs	r2, #2
 8009b9e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8009ba0:	230f      	movs	r3, #15
 8009ba2:	18fb      	adds	r3, r7, r3
 8009ba4:	781b      	ldrb	r3, [r3, #0]
}
 8009ba6:	0018      	movs	r0, r3
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	b004      	add	sp, #16
 8009bac:	bd80      	pop	{r7, pc}

08009bae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b082      	sub	sp, #8
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	0018      	movs	r0, r3
 8009bba:	f001 fce3 	bl	800b584 <USBD_LL_Start>

  return USBD_OK;
 8009bbe:	2300      	movs	r3, #0
}
 8009bc0:	0018      	movs	r0, r3
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	b002      	add	sp, #8
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	0018      	movs	r0, r3
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	b002      	add	sp, #8
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009bda:	b590      	push	{r4, r7, lr}
 8009bdc:	b085      	sub	sp, #20
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
 8009be2:	000a      	movs	r2, r1
 8009be4:	1cfb      	adds	r3, r7, #3
 8009be6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009be8:	240f      	movs	r4, #15
 8009bea:	193b      	adds	r3, r7, r4
 8009bec:	2202      	movs	r2, #2
 8009bee:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	23ad      	movs	r3, #173	@ 0xad
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	58d3      	ldr	r3, [r2, r3]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00e      	beq.n	8009c1a <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	23ad      	movs	r3, #173	@ 0xad
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	58d3      	ldr	r3, [r2, r3]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	1cfa      	adds	r2, r7, #3
 8009c08:	7811      	ldrb	r1, [r2, #0]
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	0010      	movs	r0, r2
 8009c0e:	4798      	blx	r3
 8009c10:	1e03      	subs	r3, r0, #0
 8009c12:	d102      	bne.n	8009c1a <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8009c14:	193b      	adds	r3, r7, r4
 8009c16:	2200      	movs	r2, #0
 8009c18:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8009c1a:	230f      	movs	r3, #15
 8009c1c:	18fb      	adds	r3, r7, r3
 8009c1e:	781b      	ldrb	r3, [r3, #0]
}
 8009c20:	0018      	movs	r0, r3
 8009c22:	46bd      	mov	sp, r7
 8009c24:	b005      	add	sp, #20
 8009c26:	bd90      	pop	{r4, r7, pc}

08009c28 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	000a      	movs	r2, r1
 8009c32:	1cfb      	adds	r3, r7, #3
 8009c34:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	23ad      	movs	r3, #173	@ 0xad
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	58d3      	ldr	r3, [r2, r3]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	1cfa      	adds	r2, r7, #3
 8009c42:	7811      	ldrb	r1, [r2, #0]
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	0010      	movs	r0, r2
 8009c48:	4798      	blx	r3

  return USBD_OK;
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	0018      	movs	r0, r3
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	b002      	add	sp, #8
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	22aa      	movs	r2, #170	@ 0xaa
 8009c62:	0092      	lsls	r2, r2, #2
 8009c64:	4694      	mov	ip, r2
 8009c66:	4463      	add	r3, ip
 8009c68:	683a      	ldr	r2, [r7, #0]
 8009c6a:	0011      	movs	r1, r2
 8009c6c:	0018      	movs	r0, r3
 8009c6e:	f001 f810 	bl	800ac92 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	23a5      	movs	r3, #165	@ 0xa5
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	2101      	movs	r1, #1
 8009c7a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a23      	ldr	r2, [pc, #140]	@ (8009d0c <USBD_LL_SetupStage+0xb8>)
 8009c80:	5a9b      	ldrh	r3, [r3, r2]
 8009c82:	0019      	movs	r1, r3
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	23a6      	movs	r3, #166	@ 0xa6
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	23aa      	movs	r3, #170	@ 0xaa
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	5cd3      	ldrb	r3, [r2, r3]
 8009c94:	001a      	movs	r2, r3
 8009c96:	231f      	movs	r3, #31
 8009c98:	4013      	ands	r3, r2
 8009c9a:	2b02      	cmp	r3, #2
 8009c9c:	d019      	beq.n	8009cd2 <USBD_LL_SetupStage+0x7e>
 8009c9e:	d822      	bhi.n	8009ce6 <USBD_LL_SetupStage+0x92>
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d002      	beq.n	8009caa <USBD_LL_SetupStage+0x56>
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d00a      	beq.n	8009cbe <USBD_LL_SetupStage+0x6a>
 8009ca8:	e01d      	b.n	8009ce6 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	22aa      	movs	r2, #170	@ 0xaa
 8009cae:	0092      	lsls	r2, r2, #2
 8009cb0:	189a      	adds	r2, r3, r2
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	0011      	movs	r1, r2
 8009cb6:	0018      	movs	r0, r3
 8009cb8:	f000 fa10 	bl	800a0dc <USBD_StdDevReq>
      break;
 8009cbc:	e020      	b.n	8009d00 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	22aa      	movs	r2, #170	@ 0xaa
 8009cc2:	0092      	lsls	r2, r2, #2
 8009cc4:	189a      	adds	r2, r3, r2
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	0011      	movs	r1, r2
 8009cca:	0018      	movs	r0, r3
 8009ccc:	f000 fa78 	bl	800a1c0 <USBD_StdItfReq>
      break;
 8009cd0:	e016      	b.n	8009d00 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	22aa      	movs	r2, #170	@ 0xaa
 8009cd6:	0092      	lsls	r2, r2, #2
 8009cd8:	189a      	adds	r2, r3, r2
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	0011      	movs	r1, r2
 8009cde:	0018      	movs	r0, r3
 8009ce0:	f000 fac5 	bl	800a26e <USBD_StdEPReq>
      break;
 8009ce4:	e00c      	b.n	8009d00 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	23aa      	movs	r3, #170	@ 0xaa
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	5cd3      	ldrb	r3, [r2, r3]
 8009cee:	227f      	movs	r2, #127	@ 0x7f
 8009cf0:	4393      	bics	r3, r2
 8009cf2:	b2da      	uxtb	r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	0011      	movs	r1, r2
 8009cf8:	0018      	movs	r0, r3
 8009cfa:	f001 fcca 	bl	800b692 <USBD_LL_StallEP>
      break;
 8009cfe:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	0018      	movs	r0, r3
 8009d04:	46bd      	mov	sp, r7
 8009d06:	b002      	add	sp, #8
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	46c0      	nop			@ (mov r8, r8)
 8009d0c:	000002ae 	.word	0x000002ae

08009d10 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b086      	sub	sp, #24
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	607a      	str	r2, [r7, #4]
 8009d1a:	200b      	movs	r0, #11
 8009d1c:	183b      	adds	r3, r7, r0
 8009d1e:	1c0a      	adds	r2, r1, #0
 8009d20:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009d22:	183b      	adds	r3, r7, r0
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d154      	bne.n	8009dd4 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	3355      	adds	r3, #85	@ 0x55
 8009d2e:	33ff      	adds	r3, #255	@ 0xff
 8009d30:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009d32:	68fa      	ldr	r2, [r7, #12]
 8009d34:	23a5      	movs	r3, #165	@ 0xa5
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	58d3      	ldr	r3, [r2, r3]
 8009d3a:	2b03      	cmp	r3, #3
 8009d3c:	d139      	bne.n	8009db2 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	68da      	ldr	r2, [r3, #12]
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d919      	bls.n	8009d7e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	68da      	ldr	r2, [r3, #12]
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	1ad2      	subs	r2, r2, r3
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	68da      	ldr	r2, [r3, #12]
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d203      	bcs.n	8009d6c <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	e002      	b.n	8009d72 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	6879      	ldr	r1, [r7, #4]
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	001a      	movs	r2, r3
 8009d78:	f001 f898 	bl	800aeac <USBD_CtlContinueRx>
 8009d7c:	e045      	b.n	8009e0a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	23ad      	movs	r3, #173	@ 0xad
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	58d3      	ldr	r3, [r2, r3]
 8009d86:	691b      	ldr	r3, [r3, #16]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00d      	beq.n	8009da8 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	23a7      	movs	r3, #167	@ 0xa7
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009d94:	2b03      	cmp	r3, #3
 8009d96:	d107      	bne.n	8009da8 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	23ad      	movs	r3, #173	@ 0xad
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	58d3      	ldr	r3, [r2, r3]
 8009da0:	691b      	ldr	r3, [r3, #16]
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	0010      	movs	r0, r2
 8009da6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	0018      	movs	r0, r3
 8009dac:	f001 f891 	bl	800aed2 <USBD_CtlSendStatus>
 8009db0:	e02b      	b.n	8009e0a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	23a5      	movs	r3, #165	@ 0xa5
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	58d3      	ldr	r3, [r2, r3]
 8009dba:	2b05      	cmp	r3, #5
 8009dbc:	d125      	bne.n	8009e0a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009dbe:	68fa      	ldr	r2, [r7, #12]
 8009dc0:	23a5      	movs	r3, #165	@ 0xa5
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2100      	movs	r1, #0
 8009dcc:	0018      	movs	r0, r3
 8009dce:	f001 fc60 	bl	800b692 <USBD_LL_StallEP>
 8009dd2:	e01a      	b.n	8009e0a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	23ad      	movs	r3, #173	@ 0xad
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	58d3      	ldr	r3, [r2, r3]
 8009ddc:	699b      	ldr	r3, [r3, #24]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d011      	beq.n	8009e06 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009de2:	68fa      	ldr	r2, [r7, #12]
 8009de4:	23a7      	movs	r3, #167	@ 0xa7
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8009dea:	2b03      	cmp	r3, #3
 8009dec:	d10b      	bne.n	8009e06 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	23ad      	movs	r3, #173	@ 0xad
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	58d3      	ldr	r3, [r2, r3]
 8009df6:	699b      	ldr	r3, [r3, #24]
 8009df8:	220b      	movs	r2, #11
 8009dfa:	18ba      	adds	r2, r7, r2
 8009dfc:	7811      	ldrb	r1, [r2, #0]
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	0010      	movs	r0, r2
 8009e02:	4798      	blx	r3
 8009e04:	e001      	b.n	8009e0a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009e06:	2302      	movs	r3, #2
 8009e08:	e000      	b.n	8009e0c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	0018      	movs	r0, r3
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	b006      	add	sp, #24
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b086      	sub	sp, #24
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	607a      	str	r2, [r7, #4]
 8009e1e:	200b      	movs	r0, #11
 8009e20:	183b      	adds	r3, r7, r0
 8009e22:	1c0a      	adds	r2, r1, #0
 8009e24:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009e26:	183b      	adds	r3, r7, r0
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d000      	beq.n	8009e30 <USBD_LL_DataInStage+0x1c>
 8009e2e:	e08e      	b.n	8009f4e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	3314      	adds	r3, #20
 8009e34:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	23a5      	movs	r3, #165	@ 0xa5
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	58d3      	ldr	r3, [r2, r3]
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d164      	bne.n	8009f0c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	68da      	ldr	r2, [r3, #12]
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d915      	bls.n	8009e7a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	68da      	ldr	r2, [r3, #12]
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	1ad2      	subs	r2, r2, r3
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	6879      	ldr	r1, [r7, #4]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	0018      	movs	r0, r3
 8009e68:	f000 ffe9 	bl	800ae3e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e6c:	68f8      	ldr	r0, [r7, #12]
 8009e6e:	2300      	movs	r3, #0
 8009e70:	2200      	movs	r2, #0
 8009e72:	2100      	movs	r1, #0
 8009e74:	f001 fcf5 	bl	800b862 <USBD_LL_PrepareReceive>
 8009e78:	e059      	b.n	8009f2e <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	689a      	ldr	r2, [r3, #8]
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	0019      	movs	r1, r3
 8009e84:	0010      	movs	r0, r2
 8009e86:	f7f6 f9c5 	bl	8000214 <__aeabi_uidivmod>
 8009e8a:	1e0b      	subs	r3, r1, #0
 8009e8c:	d11f      	bne.n	8009ece <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	689a      	ldr	r2, [r3, #8]
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d319      	bcc.n	8009ece <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	689a      	ldr	r2, [r3, #8]
 8009e9e:	68f9      	ldr	r1, [r7, #12]
 8009ea0:	23a6      	movs	r3, #166	@ 0xa6
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d211      	bcs.n	8009ece <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	2100      	movs	r1, #0
 8009eb0:	0018      	movs	r0, r3
 8009eb2:	f000 ffc4 	bl	800ae3e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	23a6      	movs	r3, #166	@ 0xa6
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	f001 fccb 	bl	800b862 <USBD_LL_PrepareReceive>
 8009ecc:	e02f      	b.n	8009f2e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009ece:	68fa      	ldr	r2, [r7, #12]
 8009ed0:	23ad      	movs	r3, #173	@ 0xad
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	58d3      	ldr	r3, [r2, r3]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d00d      	beq.n	8009ef8 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009edc:	68fa      	ldr	r2, [r7, #12]
 8009ede:	23a7      	movs	r3, #167	@ 0xa7
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009ee4:	2b03      	cmp	r3, #3
 8009ee6:	d107      	bne.n	8009ef8 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	23ad      	movs	r3, #173	@ 0xad
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	58d3      	ldr	r3, [r2, r3]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	0010      	movs	r0, r2
 8009ef6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2180      	movs	r1, #128	@ 0x80
 8009efc:	0018      	movs	r0, r3
 8009efe:	f001 fbc8 	bl	800b692 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	0018      	movs	r0, r3
 8009f06:	f000 fff8 	bl	800aefa <USBD_CtlReceiveStatus>
 8009f0a:	e010      	b.n	8009f2e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009f0c:	68fa      	ldr	r2, [r7, #12]
 8009f0e:	23a5      	movs	r3, #165	@ 0xa5
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	58d3      	ldr	r3, [r2, r3]
 8009f14:	2b04      	cmp	r3, #4
 8009f16:	d005      	beq.n	8009f24 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	23a5      	movs	r3, #165	@ 0xa5
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d104      	bne.n	8009f2e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2180      	movs	r1, #128	@ 0x80
 8009f28:	0018      	movs	r0, r3
 8009f2a:	f001 fbb2 	bl	800b692 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009f2e:	68fa      	ldr	r2, [r7, #12]
 8009f30:	23a8      	movs	r3, #168	@ 0xa8
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	5cd3      	ldrb	r3, [r2, r3]
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d124      	bne.n	8009f84 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	0018      	movs	r0, r3
 8009f3e:	f7ff fe43 	bl	8009bc8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009f42:	68fa      	ldr	r2, [r7, #12]
 8009f44:	23a8      	movs	r3, #168	@ 0xa8
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	2100      	movs	r1, #0
 8009f4a:	54d1      	strb	r1, [r2, r3]
 8009f4c:	e01a      	b.n	8009f84 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009f4e:	68fa      	ldr	r2, [r7, #12]
 8009f50:	23ad      	movs	r3, #173	@ 0xad
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	58d3      	ldr	r3, [r2, r3]
 8009f56:	695b      	ldr	r3, [r3, #20]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d011      	beq.n	8009f80 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	23a7      	movs	r3, #167	@ 0xa7
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8009f64:	2b03      	cmp	r3, #3
 8009f66:	d10b      	bne.n	8009f80 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	23ad      	movs	r3, #173	@ 0xad
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	58d3      	ldr	r3, [r2, r3]
 8009f70:	695b      	ldr	r3, [r3, #20]
 8009f72:	220b      	movs	r2, #11
 8009f74:	18ba      	adds	r2, r7, r2
 8009f76:	7811      	ldrb	r1, [r2, #0]
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	0010      	movs	r0, r2
 8009f7c:	4798      	blx	r3
 8009f7e:	e001      	b.n	8009f84 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009f80:	2302      	movs	r3, #2
 8009f82:	e000      	b.n	8009f86 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	0018      	movs	r0, r3
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	b006      	add	sp, #24
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b082      	sub	sp, #8
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	2340      	movs	r3, #64	@ 0x40
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	f001 fb16 	bl	800b5ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	23ac      	movs	r3, #172	@ 0xac
 8009fa6:	005b      	lsls	r3, r3, #1
 8009fa8:	2101      	movs	r1, #1
 8009faa:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	23b2      	movs	r3, #178	@ 0xb2
 8009fb0:	005b      	lsls	r3, r3, #1
 8009fb2:	2140      	movs	r1, #64	@ 0x40
 8009fb4:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	2340      	movs	r3, #64	@ 0x40
 8009fba:	2200      	movs	r2, #0
 8009fbc:	2180      	movs	r1, #128	@ 0x80
 8009fbe:	f001 fb06 	bl	800b5ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2240      	movs	r2, #64	@ 0x40
 8009fcc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	23a7      	movs	r3, #167	@ 0xa7
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	2101      	movs	r1, #1
 8009fd6:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	23a5      	movs	r3, #165	@ 0xa5
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	2100      	movs	r1, #0
 8009fe0:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	23a9      	movs	r3, #169	@ 0xa9
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	2100      	movs	r1, #0
 8009ff0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	23ae      	movs	r3, #174	@ 0xae
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	58d3      	ldr	r3, [r2, r3]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00a      	beq.n	800a014 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	23ad      	movs	r3, #173	@ 0xad
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	58d3      	ldr	r3, [r2, r3]
 800a006:	685a      	ldr	r2, [r3, #4]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	b2d9      	uxtb	r1, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	0018      	movs	r0, r3
 800a012:	4790      	blx	r2
  }

  return USBD_OK;
 800a014:	2300      	movs	r3, #0
}
 800a016:	0018      	movs	r0, r3
 800a018:	46bd      	mov	sp, r7
 800a01a:	b002      	add	sp, #8
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b082      	sub	sp, #8
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
 800a026:	000a      	movs	r2, r1
 800a028:	1cfb      	adds	r3, r7, #3
 800a02a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	1cfa      	adds	r2, r7, #3
 800a030:	7812      	ldrb	r2, [r2, #0]
 800a032:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a034:	2300      	movs	r3, #0
}
 800a036:	0018      	movs	r0, r3
 800a038:	46bd      	mov	sp, r7
 800a03a:	b002      	add	sp, #8
 800a03c:	bd80      	pop	{r7, pc}
	...

0800a040 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	23a7      	movs	r3, #167	@ 0xa7
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	5cd1      	ldrb	r1, [r2, r3]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4a06      	ldr	r2, [pc, #24]	@ (800a06c <USBD_LL_Suspend+0x2c>)
 800a054:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	23a7      	movs	r3, #167	@ 0xa7
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	2104      	movs	r1, #4
 800a05e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800a060:	2300      	movs	r3, #0
}
 800a062:	0018      	movs	r0, r3
 800a064:	46bd      	mov	sp, r7
 800a066:	b002      	add	sp, #8
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	46c0      	nop			@ (mov r8, r8)
 800a06c:	0000029d 	.word	0x0000029d

0800a070 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	23a7      	movs	r3, #167	@ 0xa7
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	5cd3      	ldrb	r3, [r2, r3]
 800a080:	2b04      	cmp	r3, #4
 800a082:	d106      	bne.n	800a092 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4a05      	ldr	r2, [pc, #20]	@ (800a09c <USBD_LL_Resume+0x2c>)
 800a088:	5c99      	ldrb	r1, [r3, r2]
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	23a7      	movs	r3, #167	@ 0xa7
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	0018      	movs	r0, r3
 800a096:	46bd      	mov	sp, r7
 800a098:	b002      	add	sp, #8
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	0000029d 	.word	0x0000029d

0800a0a0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	23a7      	movs	r3, #167	@ 0xa7
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	5cd3      	ldrb	r3, [r2, r3]
 800a0b0:	2b03      	cmp	r3, #3
 800a0b2:	d10e      	bne.n	800a0d2 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	23ad      	movs	r3, #173	@ 0xad
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	58d3      	ldr	r3, [r2, r3]
 800a0bc:	69db      	ldr	r3, [r3, #28]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d007      	beq.n	800a0d2 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	23ad      	movs	r3, #173	@ 0xad
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	58d3      	ldr	r3, [r2, r3]
 800a0ca:	69db      	ldr	r3, [r3, #28]
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	0010      	movs	r0, r2
 800a0d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a0d2:	2300      	movs	r3, #0
}
 800a0d4:	0018      	movs	r0, r3
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	b002      	add	sp, #8
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0e6:	230f      	movs	r3, #15
 800a0e8:	18fb      	adds	r3, r7, r3
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	001a      	movs	r2, r3
 800a0f4:	2360      	movs	r3, #96	@ 0x60
 800a0f6:	4013      	ands	r3, r2
 800a0f8:	2b40      	cmp	r3, #64	@ 0x40
 800a0fa:	d004      	beq.n	800a106 <USBD_StdDevReq+0x2a>
 800a0fc:	d84f      	bhi.n	800a19e <USBD_StdDevReq+0xc2>
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00b      	beq.n	800a11a <USBD_StdDevReq+0x3e>
 800a102:	2b20      	cmp	r3, #32
 800a104:	d14b      	bne.n	800a19e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	23ad      	movs	r3, #173	@ 0xad
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	58d3      	ldr	r3, [r2, r3]
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	6839      	ldr	r1, [r7, #0]
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	0010      	movs	r0, r2
 800a116:	4798      	blx	r3
      break;
 800a118:	e048      	b.n	800a1ac <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	785b      	ldrb	r3, [r3, #1]
 800a11e:	2b09      	cmp	r3, #9
 800a120:	d835      	bhi.n	800a18e <USBD_StdDevReq+0xb2>
 800a122:	009a      	lsls	r2, r3, #2
 800a124:	4b25      	ldr	r3, [pc, #148]	@ (800a1bc <USBD_StdDevReq+0xe0>)
 800a126:	18d3      	adds	r3, r2, r3
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a12c:	683a      	ldr	r2, [r7, #0]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	0011      	movs	r1, r2
 800a132:	0018      	movs	r0, r3
 800a134:	f000 fa52 	bl	800a5dc <USBD_GetDescriptor>
          break;
 800a138:	e030      	b.n	800a19c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a13a:	683a      	ldr	r2, [r7, #0]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	0011      	movs	r1, r2
 800a140:	0018      	movs	r0, r3
 800a142:	f000 fbfd 	bl	800a940 <USBD_SetAddress>
          break;
 800a146:	e029      	b.n	800a19c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a148:	683a      	ldr	r2, [r7, #0]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	0011      	movs	r1, r2
 800a14e:	0018      	movs	r0, r3
 800a150:	f000 fc4a 	bl	800a9e8 <USBD_SetConfig>
          break;
 800a154:	e022      	b.n	800a19c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a156:	683a      	ldr	r2, [r7, #0]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	0011      	movs	r1, r2
 800a15c:	0018      	movs	r0, r3
 800a15e:	f000 fce7 	bl	800ab30 <USBD_GetConfig>
          break;
 800a162:	e01b      	b.n	800a19c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	0011      	movs	r1, r2
 800a16a:	0018      	movs	r0, r3
 800a16c:	f000 fd1b 	bl	800aba6 <USBD_GetStatus>
          break;
 800a170:	e014      	b.n	800a19c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a172:	683a      	ldr	r2, [r7, #0]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	0011      	movs	r1, r2
 800a178:	0018      	movs	r0, r3
 800a17a:	f000 fd4e 	bl	800ac1a <USBD_SetFeature>
          break;
 800a17e:	e00d      	b.n	800a19c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a180:	683a      	ldr	r2, [r7, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	0011      	movs	r1, r2
 800a186:	0018      	movs	r0, r3
 800a188:	f000 fd5d 	bl	800ac46 <USBD_ClrFeature>
          break;
 800a18c:	e006      	b.n	800a19c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a18e:	683a      	ldr	r2, [r7, #0]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	0011      	movs	r1, r2
 800a194:	0018      	movs	r0, r3
 800a196:	f000 fdb4 	bl	800ad02 <USBD_CtlError>
          break;
 800a19a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800a19c:	e006      	b.n	800a1ac <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a19e:	683a      	ldr	r2, [r7, #0]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	0011      	movs	r1, r2
 800a1a4:	0018      	movs	r0, r3
 800a1a6:	f000 fdac 	bl	800ad02 <USBD_CtlError>
      break;
 800a1aa:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800a1ac:	230f      	movs	r3, #15
 800a1ae:	18fb      	adds	r3, r7, r3
 800a1b0:	781b      	ldrb	r3, [r3, #0]
}
 800a1b2:	0018      	movs	r0, r3
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	b004      	add	sp, #16
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	46c0      	nop			@ (mov r8, r8)
 800a1bc:	0800cf90 	.word	0x0800cf90

0800a1c0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a1c0:	b5b0      	push	{r4, r5, r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1ca:	230f      	movs	r3, #15
 800a1cc:	18fb      	adds	r3, r7, r3
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	001a      	movs	r2, r3
 800a1d8:	2360      	movs	r3, #96	@ 0x60
 800a1da:	4013      	ands	r3, r2
 800a1dc:	2b40      	cmp	r3, #64	@ 0x40
 800a1de:	d004      	beq.n	800a1ea <USBD_StdItfReq+0x2a>
 800a1e0:	d839      	bhi.n	800a256 <USBD_StdItfReq+0x96>
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d001      	beq.n	800a1ea <USBD_StdItfReq+0x2a>
 800a1e6:	2b20      	cmp	r3, #32
 800a1e8:	d135      	bne.n	800a256 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	23a7      	movs	r3, #167	@ 0xa7
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	5cd3      	ldrb	r3, [r2, r3]
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	d825      	bhi.n	800a244 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	889b      	ldrh	r3, [r3, #4]
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d819      	bhi.n	800a236 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	23ad      	movs	r3, #173	@ 0xad
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	58d3      	ldr	r3, [r2, r3]
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	250f      	movs	r5, #15
 800a20e:	197c      	adds	r4, r7, r5
 800a210:	6839      	ldr	r1, [r7, #0]
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	0010      	movs	r0, r2
 800a216:	4798      	blx	r3
 800a218:	0003      	movs	r3, r0
 800a21a:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	88db      	ldrh	r3, [r3, #6]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d116      	bne.n	800a252 <USBD_StdItfReq+0x92>
 800a224:	197b      	adds	r3, r7, r5
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d112      	bne.n	800a252 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	0018      	movs	r0, r3
 800a230:	f000 fe4f 	bl	800aed2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a234:	e00d      	b.n	800a252 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800a236:	683a      	ldr	r2, [r7, #0]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	0011      	movs	r1, r2
 800a23c:	0018      	movs	r0, r3
 800a23e:	f000 fd60 	bl	800ad02 <USBD_CtlError>
          break;
 800a242:	e006      	b.n	800a252 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800a244:	683a      	ldr	r2, [r7, #0]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	0011      	movs	r1, r2
 800a24a:	0018      	movs	r0, r3
 800a24c:	f000 fd59 	bl	800ad02 <USBD_CtlError>
          break;
 800a250:	e000      	b.n	800a254 <USBD_StdItfReq+0x94>
          break;
 800a252:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800a254:	e006      	b.n	800a264 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800a256:	683a      	ldr	r2, [r7, #0]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	0011      	movs	r1, r2
 800a25c:	0018      	movs	r0, r3
 800a25e:	f000 fd50 	bl	800ad02 <USBD_CtlError>
      break;
 800a262:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800a264:	2300      	movs	r3, #0
}
 800a266:	0018      	movs	r0, r3
 800a268:	46bd      	mov	sp, r7
 800a26a:	b004      	add	sp, #16
 800a26c:	bdb0      	pop	{r4, r5, r7, pc}

0800a26e <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a26e:	b5b0      	push	{r4, r5, r7, lr}
 800a270:	b084      	sub	sp, #16
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
 800a276:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a278:	230f      	movs	r3, #15
 800a27a:	18fb      	adds	r3, r7, r3
 800a27c:	2200      	movs	r2, #0
 800a27e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	889a      	ldrh	r2, [r3, #4]
 800a284:	230e      	movs	r3, #14
 800a286:	18fb      	adds	r3, r7, r3
 800a288:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	001a      	movs	r2, r3
 800a290:	2360      	movs	r3, #96	@ 0x60
 800a292:	4013      	ands	r3, r2
 800a294:	2b40      	cmp	r3, #64	@ 0x40
 800a296:	d006      	beq.n	800a2a6 <USBD_StdEPReq+0x38>
 800a298:	d900      	bls.n	800a29c <USBD_StdEPReq+0x2e>
 800a29a:	e190      	b.n	800a5be <USBD_StdEPReq+0x350>
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d00c      	beq.n	800a2ba <USBD_StdEPReq+0x4c>
 800a2a0:	2b20      	cmp	r3, #32
 800a2a2:	d000      	beq.n	800a2a6 <USBD_StdEPReq+0x38>
 800a2a4:	e18b      	b.n	800a5be <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	23ad      	movs	r3, #173	@ 0xad
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	58d3      	ldr	r3, [r2, r3]
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	6839      	ldr	r1, [r7, #0]
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	0010      	movs	r0, r2
 800a2b6:	4798      	blx	r3
      break;
 800a2b8:	e188      	b.n	800a5cc <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	001a      	movs	r2, r3
 800a2c0:	2360      	movs	r3, #96	@ 0x60
 800a2c2:	4013      	ands	r3, r2
 800a2c4:	2b20      	cmp	r3, #32
 800a2c6:	d10f      	bne.n	800a2e8 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	23ad      	movs	r3, #173	@ 0xad
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	58d3      	ldr	r3, [r2, r3]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	250f      	movs	r5, #15
 800a2d4:	197c      	adds	r4, r7, r5
 800a2d6:	6839      	ldr	r1, [r7, #0]
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	0010      	movs	r0, r2
 800a2dc:	4798      	blx	r3
 800a2de:	0003      	movs	r3, r0
 800a2e0:	7023      	strb	r3, [r4, #0]

        return ret;
 800a2e2:	197b      	adds	r3, r7, r5
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	e174      	b.n	800a5d2 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	785b      	ldrb	r3, [r3, #1]
 800a2ec:	2b03      	cmp	r3, #3
 800a2ee:	d007      	beq.n	800a300 <USBD_StdEPReq+0x92>
 800a2f0:	dd00      	ble.n	800a2f4 <USBD_StdEPReq+0x86>
 800a2f2:	e15c      	b.n	800a5ae <USBD_StdEPReq+0x340>
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d100      	bne.n	800a2fa <USBD_StdEPReq+0x8c>
 800a2f8:	e092      	b.n	800a420 <USBD_StdEPReq+0x1b2>
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d04b      	beq.n	800a396 <USBD_StdEPReq+0x128>
 800a2fe:	e156      	b.n	800a5ae <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	23a7      	movs	r3, #167	@ 0xa7
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	5cd3      	ldrb	r3, [r2, r3]
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d002      	beq.n	800a312 <USBD_StdEPReq+0xa4>
 800a30c:	2b03      	cmp	r3, #3
 800a30e:	d01d      	beq.n	800a34c <USBD_StdEPReq+0xde>
 800a310:	e039      	b.n	800a386 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a312:	220e      	movs	r2, #14
 800a314:	18bb      	adds	r3, r7, r2
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d010      	beq.n	800a33e <USBD_StdEPReq+0xd0>
 800a31c:	18bb      	adds	r3, r7, r2
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	2b80      	cmp	r3, #128	@ 0x80
 800a322:	d00c      	beq.n	800a33e <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a324:	18bb      	adds	r3, r7, r2
 800a326:	781a      	ldrb	r2, [r3, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	0011      	movs	r1, r2
 800a32c:	0018      	movs	r0, r3
 800a32e:	f001 f9b0 	bl	800b692 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2180      	movs	r1, #128	@ 0x80
 800a336:	0018      	movs	r0, r3
 800a338:	f001 f9ab 	bl	800b692 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a33c:	e02a      	b.n	800a394 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800a33e:	683a      	ldr	r2, [r7, #0]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	0011      	movs	r1, r2
 800a344:	0018      	movs	r0, r3
 800a346:	f000 fcdc 	bl	800ad02 <USBD_CtlError>
              break;
 800a34a:	e023      	b.n	800a394 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	885b      	ldrh	r3, [r3, #2]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d113      	bne.n	800a37c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800a354:	220e      	movs	r2, #14
 800a356:	18bb      	adds	r3, r7, r2
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d00e      	beq.n	800a37c <USBD_StdEPReq+0x10e>
 800a35e:	18bb      	adds	r3, r7, r2
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	2b80      	cmp	r3, #128	@ 0x80
 800a364:	d00a      	beq.n	800a37c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	88db      	ldrh	r3, [r3, #6]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d106      	bne.n	800a37c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a36e:	18bb      	adds	r3, r7, r2
 800a370:	781a      	ldrb	r2, [r3, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	0011      	movs	r1, r2
 800a376:	0018      	movs	r0, r3
 800a378:	f001 f98b 	bl	800b692 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	0018      	movs	r0, r3
 800a380:	f000 fda7 	bl	800aed2 <USBD_CtlSendStatus>

              break;
 800a384:	e006      	b.n	800a394 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800a386:	683a      	ldr	r2, [r7, #0]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	0011      	movs	r1, r2
 800a38c:	0018      	movs	r0, r3
 800a38e:	f000 fcb8 	bl	800ad02 <USBD_CtlError>
              break;
 800a392:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800a394:	e112      	b.n	800a5bc <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	23a7      	movs	r3, #167	@ 0xa7
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	5cd3      	ldrb	r3, [r2, r3]
 800a39e:	2b02      	cmp	r3, #2
 800a3a0:	d002      	beq.n	800a3a8 <USBD_StdEPReq+0x13a>
 800a3a2:	2b03      	cmp	r3, #3
 800a3a4:	d01d      	beq.n	800a3e2 <USBD_StdEPReq+0x174>
 800a3a6:	e032      	b.n	800a40e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a3a8:	220e      	movs	r2, #14
 800a3aa:	18bb      	adds	r3, r7, r2
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d010      	beq.n	800a3d4 <USBD_StdEPReq+0x166>
 800a3b2:	18bb      	adds	r3, r7, r2
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	2b80      	cmp	r3, #128	@ 0x80
 800a3b8:	d00c      	beq.n	800a3d4 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a3ba:	18bb      	adds	r3, r7, r2
 800a3bc:	781a      	ldrb	r2, [r3, #0]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	0011      	movs	r1, r2
 800a3c2:	0018      	movs	r0, r3
 800a3c4:	f001 f965 	bl	800b692 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2180      	movs	r1, #128	@ 0x80
 800a3cc:	0018      	movs	r0, r3
 800a3ce:	f001 f960 	bl	800b692 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a3d2:	e024      	b.n	800a41e <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800a3d4:	683a      	ldr	r2, [r7, #0]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	0011      	movs	r1, r2
 800a3da:	0018      	movs	r0, r3
 800a3dc:	f000 fc91 	bl	800ad02 <USBD_CtlError>
              break;
 800a3e0:	e01d      	b.n	800a41e <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	885b      	ldrh	r3, [r3, #2]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d118      	bne.n	800a41c <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a3ea:	210e      	movs	r1, #14
 800a3ec:	187b      	adds	r3, r7, r1
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	227f      	movs	r2, #127	@ 0x7f
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	d006      	beq.n	800a404 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a3f6:	187b      	adds	r3, r7, r1
 800a3f8:	781a      	ldrb	r2, [r3, #0]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	0011      	movs	r1, r2
 800a3fe:	0018      	movs	r0, r3
 800a400:	f001 f972 	bl	800b6e8 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	0018      	movs	r0, r3
 800a408:	f000 fd63 	bl	800aed2 <USBD_CtlSendStatus>
              }
              break;
 800a40c:	e006      	b.n	800a41c <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800a40e:	683a      	ldr	r2, [r7, #0]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	0011      	movs	r1, r2
 800a414:	0018      	movs	r0, r3
 800a416:	f000 fc74 	bl	800ad02 <USBD_CtlError>
              break;
 800a41a:	e000      	b.n	800a41e <USBD_StdEPReq+0x1b0>
              break;
 800a41c:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800a41e:	e0cd      	b.n	800a5bc <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a420:	687a      	ldr	r2, [r7, #4]
 800a422:	23a7      	movs	r3, #167	@ 0xa7
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	5cd3      	ldrb	r3, [r2, r3]
 800a428:	2b02      	cmp	r3, #2
 800a42a:	d002      	beq.n	800a432 <USBD_StdEPReq+0x1c4>
 800a42c:	2b03      	cmp	r3, #3
 800a42e:	d03c      	beq.n	800a4aa <USBD_StdEPReq+0x23c>
 800a430:	e0b5      	b.n	800a59e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a432:	220e      	movs	r2, #14
 800a434:	18bb      	adds	r3, r7, r2
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d00a      	beq.n	800a452 <USBD_StdEPReq+0x1e4>
 800a43c:	18bb      	adds	r3, r7, r2
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	2b80      	cmp	r3, #128	@ 0x80
 800a442:	d006      	beq.n	800a452 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800a444:	683a      	ldr	r2, [r7, #0]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	0011      	movs	r1, r2
 800a44a:	0018      	movs	r0, r3
 800a44c:	f000 fc59 	bl	800ad02 <USBD_CtlError>
                break;
 800a450:	e0ac      	b.n	800a5ac <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a452:	220e      	movs	r2, #14
 800a454:	18bb      	adds	r3, r7, r2
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	b25b      	sxtb	r3, r3
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	da0c      	bge.n	800a478 <USBD_StdEPReq+0x20a>
 800a45e:	18bb      	adds	r3, r7, r2
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	227f      	movs	r2, #127	@ 0x7f
 800a464:	401a      	ands	r2, r3
 800a466:	0013      	movs	r3, r2
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	189b      	adds	r3, r3, r2
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	3310      	adds	r3, #16
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	18d3      	adds	r3, r2, r3
 800a474:	3304      	adds	r3, #4
 800a476:	e00d      	b.n	800a494 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a478:	230e      	movs	r3, #14
 800a47a:	18fb      	adds	r3, r7, r3
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	227f      	movs	r2, #127	@ 0x7f
 800a480:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a482:	0013      	movs	r3, r2
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	189b      	adds	r3, r3, r2
 800a488:	009b      	lsls	r3, r3, #2
 800a48a:	3351      	adds	r3, #81	@ 0x51
 800a48c:	33ff      	adds	r3, #255	@ 0xff
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	18d3      	adds	r3, r2, r3
 800a492:	3304      	adds	r3, #4
 800a494:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	2200      	movs	r2, #0
 800a49a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a49c:	68b9      	ldr	r1, [r7, #8]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2202      	movs	r2, #2
 800a4a2:	0018      	movs	r0, r3
 800a4a4:	f000 fcab 	bl	800adfe <USBD_CtlSendData>
              break;
 800a4a8:	e080      	b.n	800a5ac <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a4aa:	220e      	movs	r2, #14
 800a4ac:	18bb      	adds	r3, r7, r2
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	b25b      	sxtb	r3, r3
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	da14      	bge.n	800a4e0 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a4b6:	18bb      	adds	r3, r7, r2
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	220f      	movs	r2, #15
 800a4bc:	401a      	ands	r2, r3
 800a4be:	6879      	ldr	r1, [r7, #4]
 800a4c0:	0013      	movs	r3, r2
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	189b      	adds	r3, r3, r2
 800a4c6:	009b      	lsls	r3, r3, #2
 800a4c8:	18cb      	adds	r3, r1, r3
 800a4ca:	3318      	adds	r3, #24
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d11e      	bne.n	800a510 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800a4d2:	683a      	ldr	r2, [r7, #0]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	0011      	movs	r1, r2
 800a4d8:	0018      	movs	r0, r3
 800a4da:	f000 fc12 	bl	800ad02 <USBD_CtlError>
                  break;
 800a4de:	e065      	b.n	800a5ac <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a4e0:	230e      	movs	r3, #14
 800a4e2:	18fb      	adds	r3, r7, r3
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	220f      	movs	r2, #15
 800a4e8:	401a      	ands	r2, r3
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	23ac      	movs	r3, #172	@ 0xac
 800a4ee:	0059      	lsls	r1, r3, #1
 800a4f0:	0013      	movs	r3, r2
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	189b      	adds	r3, r3, r2
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	18c3      	adds	r3, r0, r3
 800a4fa:	185b      	adds	r3, r3, r1
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d106      	bne.n	800a510 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800a502:	683a      	ldr	r2, [r7, #0]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	0011      	movs	r1, r2
 800a508:	0018      	movs	r0, r3
 800a50a:	f000 fbfa 	bl	800ad02 <USBD_CtlError>
                  break;
 800a50e:	e04d      	b.n	800a5ac <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a510:	220e      	movs	r2, #14
 800a512:	18bb      	adds	r3, r7, r2
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	b25b      	sxtb	r3, r3
 800a518:	2b00      	cmp	r3, #0
 800a51a:	da0c      	bge.n	800a536 <USBD_StdEPReq+0x2c8>
 800a51c:	18bb      	adds	r3, r7, r2
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	227f      	movs	r2, #127	@ 0x7f
 800a522:	401a      	ands	r2, r3
 800a524:	0013      	movs	r3, r2
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	189b      	adds	r3, r3, r2
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	3310      	adds	r3, #16
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	18d3      	adds	r3, r2, r3
 800a532:	3304      	adds	r3, #4
 800a534:	e00d      	b.n	800a552 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a536:	230e      	movs	r3, #14
 800a538:	18fb      	adds	r3, r7, r3
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	227f      	movs	r2, #127	@ 0x7f
 800a53e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a540:	0013      	movs	r3, r2
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	189b      	adds	r3, r3, r2
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	3351      	adds	r3, #81	@ 0x51
 800a54a:	33ff      	adds	r3, #255	@ 0xff
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	18d3      	adds	r3, r2, r3
 800a550:	3304      	adds	r3, #4
 800a552:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a554:	220e      	movs	r2, #14
 800a556:	18bb      	adds	r3, r7, r2
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d003      	beq.n	800a566 <USBD_StdEPReq+0x2f8>
 800a55e:	18bb      	adds	r3, r7, r2
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	2b80      	cmp	r3, #128	@ 0x80
 800a564:	d103      	bne.n	800a56e <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	2200      	movs	r2, #0
 800a56a:	601a      	str	r2, [r3, #0]
 800a56c:	e010      	b.n	800a590 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a56e:	230e      	movs	r3, #14
 800a570:	18fb      	adds	r3, r7, r3
 800a572:	781a      	ldrb	r2, [r3, #0]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	0011      	movs	r1, r2
 800a578:	0018      	movs	r0, r3
 800a57a:	f001 f8e0 	bl	800b73e <USBD_LL_IsStallEP>
 800a57e:	1e03      	subs	r3, r0, #0
 800a580:	d003      	beq.n	800a58a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	2201      	movs	r2, #1
 800a586:	601a      	str	r2, [r3, #0]
 800a588:	e002      	b.n	800a590 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	2200      	movs	r2, #0
 800a58e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a590:	68b9      	ldr	r1, [r7, #8]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2202      	movs	r2, #2
 800a596:	0018      	movs	r0, r3
 800a598:	f000 fc31 	bl	800adfe <USBD_CtlSendData>
              break;
 800a59c:	e006      	b.n	800a5ac <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800a59e:	683a      	ldr	r2, [r7, #0]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	0011      	movs	r1, r2
 800a5a4:	0018      	movs	r0, r3
 800a5a6:	f000 fbac 	bl	800ad02 <USBD_CtlError>
              break;
 800a5aa:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800a5ac:	e006      	b.n	800a5bc <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800a5ae:	683a      	ldr	r2, [r7, #0]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	0011      	movs	r1, r2
 800a5b4:	0018      	movs	r0, r3
 800a5b6:	f000 fba4 	bl	800ad02 <USBD_CtlError>
          break;
 800a5ba:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800a5bc:	e006      	b.n	800a5cc <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800a5be:	683a      	ldr	r2, [r7, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	0011      	movs	r1, r2
 800a5c4:	0018      	movs	r0, r3
 800a5c6:	f000 fb9c 	bl	800ad02 <USBD_CtlError>
      break;
 800a5ca:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800a5cc:	230f      	movs	r3, #15
 800a5ce:	18fb      	adds	r3, r7, r3
 800a5d0:	781b      	ldrb	r3, [r3, #0]
}
 800a5d2:	0018      	movs	r0, r3
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	b004      	add	sp, #16
 800a5d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a5dc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a5e6:	2308      	movs	r3, #8
 800a5e8:	18fb      	adds	r3, r7, r3
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a5f2:	230b      	movs	r3, #11
 800a5f4:	18fb      	adds	r3, r7, r3
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	885b      	ldrh	r3, [r3, #2]
 800a5fe:	0a1b      	lsrs	r3, r3, #8
 800a600:	b29b      	uxth	r3, r3
 800a602:	2b07      	cmp	r3, #7
 800a604:	d900      	bls.n	800a608 <USBD_GetDescriptor+0x2c>
 800a606:	e159      	b.n	800a8bc <USBD_GetDescriptor+0x2e0>
 800a608:	009a      	lsls	r2, r3, #2
 800a60a:	4bcb      	ldr	r3, [pc, #812]	@ (800a938 <USBD_GetDescriptor+0x35c>)
 800a60c:	18d3      	adds	r3, r2, r3
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	23ac      	movs	r3, #172	@ 0xac
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	58d3      	ldr	r3, [r2, r3]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	7c12      	ldrb	r2, [r2, #16]
 800a620:	2108      	movs	r1, #8
 800a622:	1879      	adds	r1, r7, r1
 800a624:	0010      	movs	r0, r2
 800a626:	4798      	blx	r3
 800a628:	0003      	movs	r3, r0
 800a62a:	60fb      	str	r3, [r7, #12]
      break;
 800a62c:	e153      	b.n	800a8d6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	7c1b      	ldrb	r3, [r3, #16]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d10f      	bne.n	800a656 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	23ad      	movs	r3, #173	@ 0xad
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	58d3      	ldr	r3, [r2, r3]
 800a63e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a640:	2208      	movs	r2, #8
 800a642:	18ba      	adds	r2, r7, r2
 800a644:	0010      	movs	r0, r2
 800a646:	4798      	blx	r3
 800a648:	0003      	movs	r3, r0
 800a64a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	3301      	adds	r3, #1
 800a650:	2202      	movs	r2, #2
 800a652:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a654:	e13f      	b.n	800a8d6 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a656:	687a      	ldr	r2, [r7, #4]
 800a658:	23ad      	movs	r3, #173	@ 0xad
 800a65a:	009b      	lsls	r3, r3, #2
 800a65c:	58d3      	ldr	r3, [r2, r3]
 800a65e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a660:	2208      	movs	r2, #8
 800a662:	18ba      	adds	r2, r7, r2
 800a664:	0010      	movs	r0, r2
 800a666:	4798      	blx	r3
 800a668:	0003      	movs	r3, r0
 800a66a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	3301      	adds	r3, #1
 800a670:	2202      	movs	r2, #2
 800a672:	701a      	strb	r2, [r3, #0]
      break;
 800a674:	e12f      	b.n	800a8d6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	885b      	ldrh	r3, [r3, #2]
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	2b05      	cmp	r3, #5
 800a67e:	d900      	bls.n	800a682 <USBD_GetDescriptor+0xa6>
 800a680:	e0d0      	b.n	800a824 <USBD_GetDescriptor+0x248>
 800a682:	009a      	lsls	r2, r3, #2
 800a684:	4bad      	ldr	r3, [pc, #692]	@ (800a93c <USBD_GetDescriptor+0x360>)
 800a686:	18d3      	adds	r3, r2, r3
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	23ac      	movs	r3, #172	@ 0xac
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	58d3      	ldr	r3, [r2, r3]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d00d      	beq.n	800a6b6 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	23ac      	movs	r3, #172	@ 0xac
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	58d3      	ldr	r3, [r2, r3]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	7c12      	ldrb	r2, [r2, #16]
 800a6a8:	2108      	movs	r1, #8
 800a6aa:	1879      	adds	r1, r7, r1
 800a6ac:	0010      	movs	r0, r2
 800a6ae:	4798      	blx	r3
 800a6b0:	0003      	movs	r3, r0
 800a6b2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6b4:	e0c3      	b.n	800a83e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a6b6:	683a      	ldr	r2, [r7, #0]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	0011      	movs	r1, r2
 800a6bc:	0018      	movs	r0, r3
 800a6be:	f000 fb20 	bl	800ad02 <USBD_CtlError>
            err++;
 800a6c2:	210b      	movs	r1, #11
 800a6c4:	187b      	adds	r3, r7, r1
 800a6c6:	781a      	ldrb	r2, [r3, #0]
 800a6c8:	187b      	adds	r3, r7, r1
 800a6ca:	3201      	adds	r2, #1
 800a6cc:	701a      	strb	r2, [r3, #0]
          break;
 800a6ce:	e0b6      	b.n	800a83e <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	23ac      	movs	r3, #172	@ 0xac
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	58d3      	ldr	r3, [r2, r3]
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00d      	beq.n	800a6fa <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	23ac      	movs	r3, #172	@ 0xac
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	58d3      	ldr	r3, [r2, r3]
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	7c12      	ldrb	r2, [r2, #16]
 800a6ec:	2108      	movs	r1, #8
 800a6ee:	1879      	adds	r1, r7, r1
 800a6f0:	0010      	movs	r0, r2
 800a6f2:	4798      	blx	r3
 800a6f4:	0003      	movs	r3, r0
 800a6f6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6f8:	e0a1      	b.n	800a83e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	0011      	movs	r1, r2
 800a700:	0018      	movs	r0, r3
 800a702:	f000 fafe 	bl	800ad02 <USBD_CtlError>
            err++;
 800a706:	210b      	movs	r1, #11
 800a708:	187b      	adds	r3, r7, r1
 800a70a:	781a      	ldrb	r2, [r3, #0]
 800a70c:	187b      	adds	r3, r7, r1
 800a70e:	3201      	adds	r2, #1
 800a710:	701a      	strb	r2, [r3, #0]
          break;
 800a712:	e094      	b.n	800a83e <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	23ac      	movs	r3, #172	@ 0xac
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	58d3      	ldr	r3, [r2, r3]
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00d      	beq.n	800a73e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	23ac      	movs	r3, #172	@ 0xac
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	58d3      	ldr	r3, [r2, r3]
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	7c12      	ldrb	r2, [r2, #16]
 800a730:	2108      	movs	r1, #8
 800a732:	1879      	adds	r1, r7, r1
 800a734:	0010      	movs	r0, r2
 800a736:	4798      	blx	r3
 800a738:	0003      	movs	r3, r0
 800a73a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a73c:	e07f      	b.n	800a83e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a73e:	683a      	ldr	r2, [r7, #0]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	0011      	movs	r1, r2
 800a744:	0018      	movs	r0, r3
 800a746:	f000 fadc 	bl	800ad02 <USBD_CtlError>
            err++;
 800a74a:	210b      	movs	r1, #11
 800a74c:	187b      	adds	r3, r7, r1
 800a74e:	781a      	ldrb	r2, [r3, #0]
 800a750:	187b      	adds	r3, r7, r1
 800a752:	3201      	adds	r2, #1
 800a754:	701a      	strb	r2, [r3, #0]
          break;
 800a756:	e072      	b.n	800a83e <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	23ac      	movs	r3, #172	@ 0xac
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	58d3      	ldr	r3, [r2, r3]
 800a760:	691b      	ldr	r3, [r3, #16]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00d      	beq.n	800a782 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	23ac      	movs	r3, #172	@ 0xac
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	58d3      	ldr	r3, [r2, r3]
 800a76e:	691b      	ldr	r3, [r3, #16]
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	7c12      	ldrb	r2, [r2, #16]
 800a774:	2108      	movs	r1, #8
 800a776:	1879      	adds	r1, r7, r1
 800a778:	0010      	movs	r0, r2
 800a77a:	4798      	blx	r3
 800a77c:	0003      	movs	r3, r0
 800a77e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a780:	e05d      	b.n	800a83e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a782:	683a      	ldr	r2, [r7, #0]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	0011      	movs	r1, r2
 800a788:	0018      	movs	r0, r3
 800a78a:	f000 faba 	bl	800ad02 <USBD_CtlError>
            err++;
 800a78e:	210b      	movs	r1, #11
 800a790:	187b      	adds	r3, r7, r1
 800a792:	781a      	ldrb	r2, [r3, #0]
 800a794:	187b      	adds	r3, r7, r1
 800a796:	3201      	adds	r2, #1
 800a798:	701a      	strb	r2, [r3, #0]
          break;
 800a79a:	e050      	b.n	800a83e <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	23ac      	movs	r3, #172	@ 0xac
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	58d3      	ldr	r3, [r2, r3]
 800a7a4:	695b      	ldr	r3, [r3, #20]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00d      	beq.n	800a7c6 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	23ac      	movs	r3, #172	@ 0xac
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	58d3      	ldr	r3, [r2, r3]
 800a7b2:	695b      	ldr	r3, [r3, #20]
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	7c12      	ldrb	r2, [r2, #16]
 800a7b8:	2108      	movs	r1, #8
 800a7ba:	1879      	adds	r1, r7, r1
 800a7bc:	0010      	movs	r0, r2
 800a7be:	4798      	blx	r3
 800a7c0:	0003      	movs	r3, r0
 800a7c2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7c4:	e03b      	b.n	800a83e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	0011      	movs	r1, r2
 800a7cc:	0018      	movs	r0, r3
 800a7ce:	f000 fa98 	bl	800ad02 <USBD_CtlError>
            err++;
 800a7d2:	210b      	movs	r1, #11
 800a7d4:	187b      	adds	r3, r7, r1
 800a7d6:	781a      	ldrb	r2, [r3, #0]
 800a7d8:	187b      	adds	r3, r7, r1
 800a7da:	3201      	adds	r2, #1
 800a7dc:	701a      	strb	r2, [r3, #0]
          break;
 800a7de:	e02e      	b.n	800a83e <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	23ac      	movs	r3, #172	@ 0xac
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	58d3      	ldr	r3, [r2, r3]
 800a7e8:	699b      	ldr	r3, [r3, #24]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00d      	beq.n	800a80a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	23ac      	movs	r3, #172	@ 0xac
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	58d3      	ldr	r3, [r2, r3]
 800a7f6:	699b      	ldr	r3, [r3, #24]
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	7c12      	ldrb	r2, [r2, #16]
 800a7fc:	2108      	movs	r1, #8
 800a7fe:	1879      	adds	r1, r7, r1
 800a800:	0010      	movs	r0, r2
 800a802:	4798      	blx	r3
 800a804:	0003      	movs	r3, r0
 800a806:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a808:	e019      	b.n	800a83e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a80a:	683a      	ldr	r2, [r7, #0]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	0011      	movs	r1, r2
 800a810:	0018      	movs	r0, r3
 800a812:	f000 fa76 	bl	800ad02 <USBD_CtlError>
            err++;
 800a816:	210b      	movs	r1, #11
 800a818:	187b      	adds	r3, r7, r1
 800a81a:	781a      	ldrb	r2, [r3, #0]
 800a81c:	187b      	adds	r3, r7, r1
 800a81e:	3201      	adds	r2, #1
 800a820:	701a      	strb	r2, [r3, #0]
          break;
 800a822:	e00c      	b.n	800a83e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a824:	683a      	ldr	r2, [r7, #0]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	0011      	movs	r1, r2
 800a82a:	0018      	movs	r0, r3
 800a82c:	f000 fa69 	bl	800ad02 <USBD_CtlError>
          err++;
 800a830:	210b      	movs	r1, #11
 800a832:	187b      	adds	r3, r7, r1
 800a834:	781a      	ldrb	r2, [r3, #0]
 800a836:	187b      	adds	r3, r7, r1
 800a838:	3201      	adds	r2, #1
 800a83a:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800a83c:	e04b      	b.n	800a8d6 <USBD_GetDescriptor+0x2fa>
 800a83e:	e04a      	b.n	800a8d6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	7c1b      	ldrb	r3, [r3, #16]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d10b      	bne.n	800a860 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	23ad      	movs	r3, #173	@ 0xad
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	58d3      	ldr	r3, [r2, r3]
 800a850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a852:	2208      	movs	r2, #8
 800a854:	18ba      	adds	r2, r7, r2
 800a856:	0010      	movs	r0, r2
 800a858:	4798      	blx	r3
 800a85a:	0003      	movs	r3, r0
 800a85c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a85e:	e03a      	b.n	800a8d6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800a860:	683a      	ldr	r2, [r7, #0]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	0011      	movs	r1, r2
 800a866:	0018      	movs	r0, r3
 800a868:	f000 fa4b 	bl	800ad02 <USBD_CtlError>
        err++;
 800a86c:	210b      	movs	r1, #11
 800a86e:	187b      	adds	r3, r7, r1
 800a870:	781a      	ldrb	r2, [r3, #0]
 800a872:	187b      	adds	r3, r7, r1
 800a874:	3201      	adds	r2, #1
 800a876:	701a      	strb	r2, [r3, #0]
      break;
 800a878:	e02d      	b.n	800a8d6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	7c1b      	ldrb	r3, [r3, #16]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d10f      	bne.n	800a8a2 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	23ad      	movs	r3, #173	@ 0xad
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	58d3      	ldr	r3, [r2, r3]
 800a88a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a88c:	2208      	movs	r2, #8
 800a88e:	18ba      	adds	r2, r7, r2
 800a890:	0010      	movs	r0, r2
 800a892:	4798      	blx	r3
 800a894:	0003      	movs	r3, r0
 800a896:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	3301      	adds	r3, #1
 800a89c:	2207      	movs	r2, #7
 800a89e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8a0:	e019      	b.n	800a8d6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800a8a2:	683a      	ldr	r2, [r7, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	0011      	movs	r1, r2
 800a8a8:	0018      	movs	r0, r3
 800a8aa:	f000 fa2a 	bl	800ad02 <USBD_CtlError>
        err++;
 800a8ae:	210b      	movs	r1, #11
 800a8b0:	187b      	adds	r3, r7, r1
 800a8b2:	781a      	ldrb	r2, [r3, #0]
 800a8b4:	187b      	adds	r3, r7, r1
 800a8b6:	3201      	adds	r2, #1
 800a8b8:	701a      	strb	r2, [r3, #0]
      break;
 800a8ba:	e00c      	b.n	800a8d6 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800a8bc:	683a      	ldr	r2, [r7, #0]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	0011      	movs	r1, r2
 800a8c2:	0018      	movs	r0, r3
 800a8c4:	f000 fa1d 	bl	800ad02 <USBD_CtlError>
      err++;
 800a8c8:	210b      	movs	r1, #11
 800a8ca:	187b      	adds	r3, r7, r1
 800a8cc:	781a      	ldrb	r2, [r3, #0]
 800a8ce:	187b      	adds	r3, r7, r1
 800a8d0:	3201      	adds	r2, #1
 800a8d2:	701a      	strb	r2, [r3, #0]
      break;
 800a8d4:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 800a8d6:	230b      	movs	r3, #11
 800a8d8:	18fb      	adds	r3, r7, r3
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d127      	bne.n	800a930 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a8e0:	2108      	movs	r1, #8
 800a8e2:	187b      	adds	r3, r7, r1
 800a8e4:	881b      	ldrh	r3, [r3, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d019      	beq.n	800a91e <USBD_GetDescriptor+0x342>
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	88db      	ldrh	r3, [r3, #6]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d015      	beq.n	800a91e <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	88da      	ldrh	r2, [r3, #6]
 800a8f6:	187b      	adds	r3, r7, r1
 800a8f8:	881b      	ldrh	r3, [r3, #0]
 800a8fa:	1c18      	adds	r0, r3, #0
 800a8fc:	1c11      	adds	r1, r2, #0
 800a8fe:	b28a      	uxth	r2, r1
 800a900:	b283      	uxth	r3, r0
 800a902:	429a      	cmp	r2, r3
 800a904:	d900      	bls.n	800a908 <USBD_GetDescriptor+0x32c>
 800a906:	1c01      	adds	r1, r0, #0
 800a908:	b28a      	uxth	r2, r1
 800a90a:	2108      	movs	r1, #8
 800a90c:	187b      	adds	r3, r7, r1
 800a90e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a910:	187b      	adds	r3, r7, r1
 800a912:	881a      	ldrh	r2, [r3, #0]
 800a914:	68f9      	ldr	r1, [r7, #12]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	0018      	movs	r0, r3
 800a91a:	f000 fa70 	bl	800adfe <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	88db      	ldrh	r3, [r3, #6]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d105      	bne.n	800a932 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	0018      	movs	r0, r3
 800a92a:	f000 fad2 	bl	800aed2 <USBD_CtlSendStatus>
 800a92e:	e000      	b.n	800a932 <USBD_GetDescriptor+0x356>
    return;
 800a930:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800a932:	46bd      	mov	sp, r7
 800a934:	b004      	add	sp, #16
 800a936:	bd80      	pop	{r7, pc}
 800a938:	0800cfb8 	.word	0x0800cfb8
 800a93c:	0800cfd8 	.word	0x0800cfd8

0800a940 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a940:	b590      	push	{r4, r7, lr}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	889b      	ldrh	r3, [r3, #4]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d13d      	bne.n	800a9ce <USBD_SetAddress+0x8e>
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	88db      	ldrh	r3, [r3, #6]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d139      	bne.n	800a9ce <USBD_SetAddress+0x8e>
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	885b      	ldrh	r3, [r3, #2]
 800a95e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a960:	d835      	bhi.n	800a9ce <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	885b      	ldrh	r3, [r3, #2]
 800a966:	b2da      	uxtb	r2, r3
 800a968:	230f      	movs	r3, #15
 800a96a:	18fb      	adds	r3, r7, r3
 800a96c:	217f      	movs	r1, #127	@ 0x7f
 800a96e:	400a      	ands	r2, r1
 800a970:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	23a7      	movs	r3, #167	@ 0xa7
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	5cd3      	ldrb	r3, [r2, r3]
 800a97a:	2b03      	cmp	r3, #3
 800a97c:	d106      	bne.n	800a98c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800a97e:	683a      	ldr	r2, [r7, #0]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	0011      	movs	r1, r2
 800a984:	0018      	movs	r0, r3
 800a986:	f000 f9bc 	bl	800ad02 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a98a:	e027      	b.n	800a9dc <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	240f      	movs	r4, #15
 800a990:	193a      	adds	r2, r7, r4
 800a992:	4914      	ldr	r1, [pc, #80]	@ (800a9e4 <USBD_SetAddress+0xa4>)
 800a994:	7812      	ldrb	r2, [r2, #0]
 800a996:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a998:	193b      	adds	r3, r7, r4
 800a99a:	781a      	ldrb	r2, [r3, #0]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	0011      	movs	r1, r2
 800a9a0:	0018      	movs	r0, r3
 800a9a2:	f000 fefc 	bl	800b79e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	0018      	movs	r0, r3
 800a9aa:	f000 fa92 	bl	800aed2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a9ae:	193b      	adds	r3, r7, r4
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d005      	beq.n	800a9c2 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	23a7      	movs	r3, #167	@ 0xa7
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	2102      	movs	r1, #2
 800a9be:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9c0:	e00c      	b.n	800a9dc <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	23a7      	movs	r3, #167	@ 0xa7
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	2101      	movs	r1, #1
 800a9ca:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9cc:	e006      	b.n	800a9dc <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a9ce:	683a      	ldr	r2, [r7, #0]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	0011      	movs	r1, r2
 800a9d4:	0018      	movs	r0, r3
 800a9d6:	f000 f994 	bl	800ad02 <USBD_CtlError>
  }
}
 800a9da:	46c0      	nop			@ (mov r8, r8)
 800a9dc:	46c0      	nop			@ (mov r8, r8)
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	b005      	add	sp, #20
 800a9e2:	bd90      	pop	{r4, r7, pc}
 800a9e4:	0000029e 	.word	0x0000029e

0800a9e8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	885b      	ldrh	r3, [r3, #2]
 800a9f6:	b2da      	uxtb	r2, r3
 800a9f8:	4b4c      	ldr	r3, [pc, #304]	@ (800ab2c <USBD_SetConfig+0x144>)
 800a9fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a9fc:	4b4b      	ldr	r3, [pc, #300]	@ (800ab2c <USBD_SetConfig+0x144>)
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d906      	bls.n	800aa12 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800aa04:	683a      	ldr	r2, [r7, #0]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	0011      	movs	r1, r2
 800aa0a:	0018      	movs	r0, r3
 800aa0c:	f000 f979 	bl	800ad02 <USBD_CtlError>
 800aa10:	e088      	b.n	800ab24 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	23a7      	movs	r3, #167	@ 0xa7
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	5cd3      	ldrb	r3, [r2, r3]
 800aa1a:	2b02      	cmp	r3, #2
 800aa1c:	d002      	beq.n	800aa24 <USBD_SetConfig+0x3c>
 800aa1e:	2b03      	cmp	r3, #3
 800aa20:	d029      	beq.n	800aa76 <USBD_SetConfig+0x8e>
 800aa22:	e071      	b.n	800ab08 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800aa24:	4b41      	ldr	r3, [pc, #260]	@ (800ab2c <USBD_SetConfig+0x144>)
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d01f      	beq.n	800aa6c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800aa2c:	4b3f      	ldr	r3, [pc, #252]	@ (800ab2c <USBD_SetConfig+0x144>)
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	001a      	movs	r2, r3
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	23a7      	movs	r3, #167	@ 0xa7
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	2103      	movs	r1, #3
 800aa3e:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aa40:	4b3a      	ldr	r3, [pc, #232]	@ (800ab2c <USBD_SetConfig+0x144>)
 800aa42:	781a      	ldrb	r2, [r3, #0]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	0011      	movs	r1, r2
 800aa48:	0018      	movs	r0, r3
 800aa4a:	f7ff f8c6 	bl	8009bda <USBD_SetClassConfig>
 800aa4e:	0003      	movs	r3, r0
 800aa50:	2b02      	cmp	r3, #2
 800aa52:	d106      	bne.n	800aa62 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800aa54:	683a      	ldr	r2, [r7, #0]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	0011      	movs	r1, r2
 800aa5a:	0018      	movs	r0, r3
 800aa5c:	f000 f951 	bl	800ad02 <USBD_CtlError>
            return;
 800aa60:	e060      	b.n	800ab24 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	0018      	movs	r0, r3
 800aa66:	f000 fa34 	bl	800aed2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aa6a:	e05b      	b.n	800ab24 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	0018      	movs	r0, r3
 800aa70:	f000 fa2f 	bl	800aed2 <USBD_CtlSendStatus>
        break;
 800aa74:	e056      	b.n	800ab24 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800aa76:	4b2d      	ldr	r3, [pc, #180]	@ (800ab2c <USBD_SetConfig+0x144>)
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d115      	bne.n	800aaaa <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	23a7      	movs	r3, #167	@ 0xa7
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	2102      	movs	r1, #2
 800aa86:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800aa88:	4b28      	ldr	r3, [pc, #160]	@ (800ab2c <USBD_SetConfig+0x144>)
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	001a      	movs	r2, r3
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800aa92:	4b26      	ldr	r3, [pc, #152]	@ (800ab2c <USBD_SetConfig+0x144>)
 800aa94:	781a      	ldrb	r2, [r3, #0]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	0011      	movs	r1, r2
 800aa9a:	0018      	movs	r0, r3
 800aa9c:	f7ff f8c4 	bl	8009c28 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	0018      	movs	r0, r3
 800aaa4:	f000 fa15 	bl	800aed2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aaa8:	e03c      	b.n	800ab24 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800aaaa:	4b20      	ldr	r3, [pc, #128]	@ (800ab2c <USBD_SetConfig+0x144>)
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	001a      	movs	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d022      	beq.n	800aafe <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	b2da      	uxtb	r2, r3
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	0011      	movs	r1, r2
 800aac2:	0018      	movs	r0, r3
 800aac4:	f7ff f8b0 	bl	8009c28 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800aac8:	4b18      	ldr	r3, [pc, #96]	@ (800ab2c <USBD_SetConfig+0x144>)
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	001a      	movs	r2, r3
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aad2:	4b16      	ldr	r3, [pc, #88]	@ (800ab2c <USBD_SetConfig+0x144>)
 800aad4:	781a      	ldrb	r2, [r3, #0]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	0011      	movs	r1, r2
 800aada:	0018      	movs	r0, r3
 800aadc:	f7ff f87d 	bl	8009bda <USBD_SetClassConfig>
 800aae0:	0003      	movs	r3, r0
 800aae2:	2b02      	cmp	r3, #2
 800aae4:	d106      	bne.n	800aaf4 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800aae6:	683a      	ldr	r2, [r7, #0]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	0011      	movs	r1, r2
 800aaec:	0018      	movs	r0, r3
 800aaee:	f000 f908 	bl	800ad02 <USBD_CtlError>
            return;
 800aaf2:	e017      	b.n	800ab24 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	0018      	movs	r0, r3
 800aaf8:	f000 f9eb 	bl	800aed2 <USBD_CtlSendStatus>
        break;
 800aafc:	e012      	b.n	800ab24 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	0018      	movs	r0, r3
 800ab02:	f000 f9e6 	bl	800aed2 <USBD_CtlSendStatus>
        break;
 800ab06:	e00d      	b.n	800ab24 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800ab08:	683a      	ldr	r2, [r7, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	0011      	movs	r1, r2
 800ab0e:	0018      	movs	r0, r3
 800ab10:	f000 f8f7 	bl	800ad02 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ab14:	4b05      	ldr	r3, [pc, #20]	@ (800ab2c <USBD_SetConfig+0x144>)
 800ab16:	781a      	ldrb	r2, [r3, #0]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	0011      	movs	r1, r2
 800ab1c:	0018      	movs	r0, r3
 800ab1e:	f7ff f883 	bl	8009c28 <USBD_ClrClassConfig>
        break;
 800ab22:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800ab24:	46bd      	mov	sp, r7
 800ab26:	b002      	add	sp, #8
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	46c0      	nop			@ (mov r8, r8)
 800ab2c:	200003cc 	.word	0x200003cc

0800ab30 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	88db      	ldrh	r3, [r3, #6]
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d006      	beq.n	800ab50 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800ab42:	683a      	ldr	r2, [r7, #0]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	0011      	movs	r1, r2
 800ab48:	0018      	movs	r0, r3
 800ab4a:	f000 f8da 	bl	800ad02 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ab4e:	e026      	b.n	800ab9e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	23a7      	movs	r3, #167	@ 0xa7
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	5cd3      	ldrb	r3, [r2, r3]
 800ab58:	2b02      	cmp	r3, #2
 800ab5a:	dc02      	bgt.n	800ab62 <USBD_GetConfig+0x32>
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	dc03      	bgt.n	800ab68 <USBD_GetConfig+0x38>
 800ab60:	e016      	b.n	800ab90 <USBD_GetConfig+0x60>
 800ab62:	2b03      	cmp	r3, #3
 800ab64:	d00c      	beq.n	800ab80 <USBD_GetConfig+0x50>
 800ab66:	e013      	b.n	800ab90 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	3308      	adds	r3, #8
 800ab72:	0019      	movs	r1, r3
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	0018      	movs	r0, r3
 800ab7a:	f000 f940 	bl	800adfe <USBD_CtlSendData>
        break;
 800ab7e:	e00e      	b.n	800ab9e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	1d19      	adds	r1, r3, #4
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2201      	movs	r2, #1
 800ab88:	0018      	movs	r0, r3
 800ab8a:	f000 f938 	bl	800adfe <USBD_CtlSendData>
        break;
 800ab8e:	e006      	b.n	800ab9e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800ab90:	683a      	ldr	r2, [r7, #0]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	0011      	movs	r1, r2
 800ab96:	0018      	movs	r0, r3
 800ab98:	f000 f8b3 	bl	800ad02 <USBD_CtlError>
        break;
 800ab9c:	46c0      	nop			@ (mov r8, r8)
}
 800ab9e:	46c0      	nop			@ (mov r8, r8)
 800aba0:	46bd      	mov	sp, r7
 800aba2:	b002      	add	sp, #8
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b082      	sub	sp, #8
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
 800abae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	23a7      	movs	r3, #167	@ 0xa7
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	5cd3      	ldrb	r3, [r2, r3]
 800abb8:	3b01      	subs	r3, #1
 800abba:	2b02      	cmp	r3, #2
 800abbc:	d822      	bhi.n	800ac04 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	88db      	ldrh	r3, [r3, #6]
 800abc2:	2b02      	cmp	r3, #2
 800abc4:	d006      	beq.n	800abd4 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800abc6:	683a      	ldr	r2, [r7, #0]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	0011      	movs	r1, r2
 800abcc:	0018      	movs	r0, r3
 800abce:	f000 f898 	bl	800ad02 <USBD_CtlError>
        break;
 800abd2:	e01e      	b.n	800ac12 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	23a9      	movs	r3, #169	@ 0xa9
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	58d3      	ldr	r3, [r2, r3]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d005      	beq.n	800abf2 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	2202      	movs	r2, #2
 800abec:	431a      	orrs	r2, r3
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	330c      	adds	r3, #12
 800abf6:	0019      	movs	r1, r3
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2202      	movs	r2, #2
 800abfc:	0018      	movs	r0, r3
 800abfe:	f000 f8fe 	bl	800adfe <USBD_CtlSendData>
      break;
 800ac02:	e006      	b.n	800ac12 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800ac04:	683a      	ldr	r2, [r7, #0]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	0011      	movs	r1, r2
 800ac0a:	0018      	movs	r0, r3
 800ac0c:	f000 f879 	bl	800ad02 <USBD_CtlError>
      break;
 800ac10:	46c0      	nop			@ (mov r8, r8)
  }
}
 800ac12:	46c0      	nop			@ (mov r8, r8)
 800ac14:	46bd      	mov	sp, r7
 800ac16:	b002      	add	sp, #8
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b082      	sub	sp, #8
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
 800ac22:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	885b      	ldrh	r3, [r3, #2]
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d108      	bne.n	800ac3e <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	23a9      	movs	r3, #169	@ 0xa9
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	2101      	movs	r1, #1
 800ac34:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	0018      	movs	r0, r3
 800ac3a:	f000 f94a 	bl	800aed2 <USBD_CtlSendStatus>
  }
}
 800ac3e:	46c0      	nop			@ (mov r8, r8)
 800ac40:	46bd      	mov	sp, r7
 800ac42:	b002      	add	sp, #8
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b082      	sub	sp, #8
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
 800ac4e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	23a7      	movs	r3, #167	@ 0xa7
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	5cd3      	ldrb	r3, [r2, r3]
 800ac58:	3b01      	subs	r3, #1
 800ac5a:	2b02      	cmp	r3, #2
 800ac5c:	d80d      	bhi.n	800ac7a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	885b      	ldrh	r3, [r3, #2]
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d110      	bne.n	800ac88 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	23a9      	movs	r3, #169	@ 0xa9
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	2100      	movs	r1, #0
 800ac6e:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	0018      	movs	r0, r3
 800ac74:	f000 f92d 	bl	800aed2 <USBD_CtlSendStatus>
      }
      break;
 800ac78:	e006      	b.n	800ac88 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800ac7a:	683a      	ldr	r2, [r7, #0]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	0011      	movs	r1, r2
 800ac80:	0018      	movs	r0, r3
 800ac82:	f000 f83e 	bl	800ad02 <USBD_CtlError>
      break;
 800ac86:	e000      	b.n	800ac8a <USBD_ClrFeature+0x44>
      break;
 800ac88:	46c0      	nop			@ (mov r8, r8)
  }
}
 800ac8a:	46c0      	nop			@ (mov r8, r8)
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	b002      	add	sp, #8
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b082      	sub	sp, #8
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
 800ac9a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	781a      	ldrb	r2, [r3, #0]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	785a      	ldrb	r2, [r3, #1]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	3302      	adds	r3, #2
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	001a      	movs	r2, r3
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	3303      	adds	r3, #3
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	021b      	lsls	r3, r3, #8
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	18d3      	adds	r3, r2, r3
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	3304      	adds	r3, #4
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	001a      	movs	r2, r3
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	3305      	adds	r3, #5
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	021b      	lsls	r3, r3, #8
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	18d3      	adds	r3, r2, r3
 800acda:	b29a      	uxth	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	3306      	adds	r3, #6
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	001a      	movs	r2, r3
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	3307      	adds	r3, #7
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	021b      	lsls	r3, r3, #8
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	18d3      	adds	r3, r2, r3
 800acf4:	b29a      	uxth	r2, r3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	80da      	strh	r2, [r3, #6]

}
 800acfa:	46c0      	nop			@ (mov r8, r8)
 800acfc:	46bd      	mov	sp, r7
 800acfe:	b002      	add	sp, #8
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b082      	sub	sp, #8
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
 800ad0a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2180      	movs	r1, #128	@ 0x80
 800ad10:	0018      	movs	r0, r3
 800ad12:	f000 fcbe 	bl	800b692 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2100      	movs	r1, #0
 800ad1a:	0018      	movs	r0, r3
 800ad1c:	f000 fcb9 	bl	800b692 <USBD_LL_StallEP>
}
 800ad20:	46c0      	nop			@ (mov r8, r8)
 800ad22:	46bd      	mov	sp, r7
 800ad24:	b002      	add	sp, #8
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ad28:	b590      	push	{r4, r7, lr}
 800ad2a:	b087      	sub	sp, #28
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ad34:	2417      	movs	r4, #23
 800ad36:	193b      	adds	r3, r7, r4
 800ad38:	2200      	movs	r2, #0
 800ad3a:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d03c      	beq.n	800adbc <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	0018      	movs	r0, r3
 800ad46:	f000 f83d 	bl	800adc4 <USBD_GetLen>
 800ad4a:	0003      	movs	r3, r0
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	18db      	adds	r3, r3, r3
 800ad52:	b29a      	uxth	r2, r3
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ad58:	193b      	adds	r3, r7, r4
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	193a      	adds	r2, r7, r4
 800ad5e:	1c59      	adds	r1, r3, #1
 800ad60:	7011      	strb	r1, [r2, #0]
 800ad62:	001a      	movs	r2, r3
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	189b      	adds	r3, r3, r2
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	7812      	ldrb	r2, [r2, #0]
 800ad6c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ad6e:	193b      	adds	r3, r7, r4
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	193a      	adds	r2, r7, r4
 800ad74:	1c59      	adds	r1, r3, #1
 800ad76:	7011      	strb	r1, [r2, #0]
 800ad78:	001a      	movs	r2, r3
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	189b      	adds	r3, r3, r2
 800ad7e:	2203      	movs	r2, #3
 800ad80:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ad82:	e017      	b.n	800adb4 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	1c5a      	adds	r2, r3, #1
 800ad88:	60fa      	str	r2, [r7, #12]
 800ad8a:	2417      	movs	r4, #23
 800ad8c:	193a      	adds	r2, r7, r4
 800ad8e:	7812      	ldrb	r2, [r2, #0]
 800ad90:	1939      	adds	r1, r7, r4
 800ad92:	1c50      	adds	r0, r2, #1
 800ad94:	7008      	strb	r0, [r1, #0]
 800ad96:	0011      	movs	r1, r2
 800ad98:	68ba      	ldr	r2, [r7, #8]
 800ad9a:	1852      	adds	r2, r2, r1
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ada0:	193b      	adds	r3, r7, r4
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	193a      	adds	r2, r7, r4
 800ada6:	1c59      	adds	r1, r3, #1
 800ada8:	7011      	strb	r1, [r2, #0]
 800adaa:	001a      	movs	r2, r3
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	189b      	adds	r3, r3, r2
 800adb0:	2200      	movs	r2, #0
 800adb2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d1e3      	bne.n	800ad84 <USBD_GetString+0x5c>
    }
  }
}
 800adbc:	46c0      	nop			@ (mov r8, r8)
 800adbe:	46bd      	mov	sp, r7
 800adc0:	b007      	add	sp, #28
 800adc2:	bd90      	pop	{r4, r7, pc}

0800adc4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800adcc:	230f      	movs	r3, #15
 800adce:	18fb      	adds	r3, r7, r3
 800add0:	2200      	movs	r2, #0
 800add2:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800add4:	e008      	b.n	800ade8 <USBD_GetLen+0x24>
  {
    len++;
 800add6:	210f      	movs	r1, #15
 800add8:	187b      	adds	r3, r7, r1
 800adda:	781a      	ldrb	r2, [r3, #0]
 800addc:	187b      	adds	r3, r7, r1
 800adde:	3201      	adds	r2, #1
 800ade0:	701a      	strb	r2, [r3, #0]
    buf++;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	3301      	adds	r3, #1
 800ade6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d1f2      	bne.n	800add6 <USBD_GetLen+0x12>
  }

  return len;
 800adf0:	230f      	movs	r3, #15
 800adf2:	18fb      	adds	r3, r7, r3
 800adf4:	781b      	ldrb	r3, [r3, #0]
}
 800adf6:	0018      	movs	r0, r3
 800adf8:	46bd      	mov	sp, r7
 800adfa:	b004      	add	sp, #16
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b084      	sub	sp, #16
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	60f8      	str	r0, [r7, #12]
 800ae06:	60b9      	str	r1, [r7, #8]
 800ae08:	1dbb      	adds	r3, r7, #6
 800ae0a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	23a5      	movs	r3, #165	@ 0xa5
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	2102      	movs	r1, #2
 800ae14:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800ae16:	1dbb      	adds	r3, r7, #6
 800ae18:	881a      	ldrh	r2, [r3, #0]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ae1e:	1dbb      	adds	r3, r7, #6
 800ae20:	881a      	ldrh	r2, [r3, #0]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae26:	1dbb      	adds	r3, r7, #6
 800ae28:	881b      	ldrh	r3, [r3, #0]
 800ae2a:	68ba      	ldr	r2, [r7, #8]
 800ae2c:	68f8      	ldr	r0, [r7, #12]
 800ae2e:	2100      	movs	r1, #0
 800ae30:	f000 fce0 	bl	800b7f4 <USBD_LL_Transmit>

  return USBD_OK;
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	0018      	movs	r0, r3
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	b004      	add	sp, #16
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b084      	sub	sp, #16
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	60f8      	str	r0, [r7, #12]
 800ae46:	60b9      	str	r1, [r7, #8]
 800ae48:	1dbb      	adds	r3, r7, #6
 800ae4a:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae4c:	1dbb      	adds	r3, r7, #6
 800ae4e:	881b      	ldrh	r3, [r3, #0]
 800ae50:	68ba      	ldr	r2, [r7, #8]
 800ae52:	68f8      	ldr	r0, [r7, #12]
 800ae54:	2100      	movs	r1, #0
 800ae56:	f000 fccd 	bl	800b7f4 <USBD_LL_Transmit>

  return USBD_OK;
 800ae5a:	2300      	movs	r3, #0
}
 800ae5c:	0018      	movs	r0, r3
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	b004      	add	sp, #16
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	60b9      	str	r1, [r7, #8]
 800ae6e:	1dbb      	adds	r3, r7, #6
 800ae70:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ae72:	68fa      	ldr	r2, [r7, #12]
 800ae74:	23a5      	movs	r3, #165	@ 0xa5
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	2103      	movs	r1, #3
 800ae7a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800ae7c:	1dbb      	adds	r3, r7, #6
 800ae7e:	8819      	ldrh	r1, [r3, #0]
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	23ae      	movs	r3, #174	@ 0xae
 800ae84:	005b      	lsls	r3, r3, #1
 800ae86:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800ae88:	1dbb      	adds	r3, r7, #6
 800ae8a:	8819      	ldrh	r1, [r3, #0]
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	23b0      	movs	r3, #176	@ 0xb0
 800ae90:	005b      	lsls	r3, r3, #1
 800ae92:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae94:	1dbb      	adds	r3, r7, #6
 800ae96:	881b      	ldrh	r3, [r3, #0]
 800ae98:	68ba      	ldr	r2, [r7, #8]
 800ae9a:	68f8      	ldr	r0, [r7, #12]
 800ae9c:	2100      	movs	r1, #0
 800ae9e:	f000 fce0 	bl	800b862 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	0018      	movs	r0, r3
 800aea6:	46bd      	mov	sp, r7
 800aea8:	b004      	add	sp, #16
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	1dbb      	adds	r3, r7, #6
 800aeb8:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aeba:	1dbb      	adds	r3, r7, #6
 800aebc:	881b      	ldrh	r3, [r3, #0]
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	68f8      	ldr	r0, [r7, #12]
 800aec2:	2100      	movs	r1, #0
 800aec4:	f000 fccd 	bl	800b862 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	0018      	movs	r0, r3
 800aecc:	46bd      	mov	sp, r7
 800aece:	b004      	add	sp, #16
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aed2:	b580      	push	{r7, lr}
 800aed4:	b082      	sub	sp, #8
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	23a5      	movs	r3, #165	@ 0xa5
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	2104      	movs	r1, #4
 800aee2:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	2300      	movs	r3, #0
 800aee8:	2200      	movs	r2, #0
 800aeea:	2100      	movs	r1, #0
 800aeec:	f000 fc82 	bl	800b7f4 <USBD_LL_Transmit>

  return USBD_OK;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	0018      	movs	r0, r3
 800aef4:	46bd      	mov	sp, r7
 800aef6:	b002      	add	sp, #8
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b082      	sub	sp, #8
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	23a5      	movs	r3, #165	@ 0xa5
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	2105      	movs	r1, #5
 800af0a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	2300      	movs	r3, #0
 800af10:	2200      	movs	r2, #0
 800af12:	2100      	movs	r1, #0
 800af14:	f000 fca5 	bl	800b862 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af18:	2300      	movs	r3, #0
}
 800af1a:	0018      	movs	r0, r3
 800af1c:	46bd      	mov	sp, r7
 800af1e:	b002      	add	sp, #8
 800af20:	bd80      	pop	{r7, pc}
	...

0800af24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800af28:	4914      	ldr	r1, [pc, #80]	@ (800af7c <MX_USB_DEVICE_Init+0x58>)
 800af2a:	4b15      	ldr	r3, [pc, #84]	@ (800af80 <MX_USB_DEVICE_Init+0x5c>)
 800af2c:	2200      	movs	r2, #0
 800af2e:	0018      	movs	r0, r3
 800af30:	f7fe fdec 	bl	8009b0c <USBD_Init>
 800af34:	1e03      	subs	r3, r0, #0
 800af36:	d001      	beq.n	800af3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800af38:	f7f7 fe92 	bl	8002c60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800af3c:	4a11      	ldr	r2, [pc, #68]	@ (800af84 <MX_USB_DEVICE_Init+0x60>)
 800af3e:	4b10      	ldr	r3, [pc, #64]	@ (800af80 <MX_USB_DEVICE_Init+0x5c>)
 800af40:	0011      	movs	r1, r2
 800af42:	0018      	movs	r0, r3
 800af44:	f7fe fe13 	bl	8009b6e <USBD_RegisterClass>
 800af48:	1e03      	subs	r3, r0, #0
 800af4a:	d001      	beq.n	800af50 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800af4c:	f7f7 fe88 	bl	8002c60 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800af50:	4a0d      	ldr	r2, [pc, #52]	@ (800af88 <MX_USB_DEVICE_Init+0x64>)
 800af52:	4b0b      	ldr	r3, [pc, #44]	@ (800af80 <MX_USB_DEVICE_Init+0x5c>)
 800af54:	0011      	movs	r1, r2
 800af56:	0018      	movs	r0, r3
 800af58:	f7fe fd28 	bl	80099ac <USBD_CDC_RegisterInterface>
 800af5c:	1e03      	subs	r3, r0, #0
 800af5e:	d001      	beq.n	800af64 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800af60:	f7f7 fe7e 	bl	8002c60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800af64:	4b06      	ldr	r3, [pc, #24]	@ (800af80 <MX_USB_DEVICE_Init+0x5c>)
 800af66:	0018      	movs	r0, r3
 800af68:	f7fe fe21 	bl	8009bae <USBD_Start>
 800af6c:	1e03      	subs	r3, r0, #0
 800af6e:	d001      	beq.n	800af74 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800af70:	f7f7 fe76 	bl	8002c60 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800af74:	46c0      	nop			@ (mov r8, r8)
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	46c0      	nop			@ (mov r8, r8)
 800af7c:	2000016c 	.word	0x2000016c
 800af80:	200003d0 	.word	0x200003d0
 800af84:	20000058 	.word	0x20000058
 800af88:	2000015c 	.word	0x2000015c

0800af8c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800af90:	4907      	ldr	r1, [pc, #28]	@ (800afb0 <CDC_Init_FS+0x24>)
 800af92:	4b08      	ldr	r3, [pc, #32]	@ (800afb4 <CDC_Init_FS+0x28>)
 800af94:	2200      	movs	r2, #0
 800af96:	0018      	movs	r0, r3
 800af98:	f7fe fd23 	bl	80099e2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800af9c:	4a06      	ldr	r2, [pc, #24]	@ (800afb8 <CDC_Init_FS+0x2c>)
 800af9e:	4b05      	ldr	r3, [pc, #20]	@ (800afb4 <CDC_Init_FS+0x28>)
 800afa0:	0011      	movs	r1, r2
 800afa2:	0018      	movs	r0, r3
 800afa4:	f7fe fd39 	bl	8009a1a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800afa8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800afaa:	0018      	movs	r0, r3
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	20000a94 	.word	0x20000a94
 800afb4:	200003d0 	.word	0x200003d0
 800afb8:	20000694 	.word	0x20000694

0800afbc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800afc0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800afc2:	0018      	movs	r0, r3
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6039      	str	r1, [r7, #0]
 800afd0:	0011      	movs	r1, r2
 800afd2:	1dfb      	adds	r3, r7, #7
 800afd4:	1c02      	adds	r2, r0, #0
 800afd6:	701a      	strb	r2, [r3, #0]
 800afd8:	1d3b      	adds	r3, r7, #4
 800afda:	1c0a      	adds	r2, r1, #0
 800afdc:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800afde:	1dfb      	adds	r3, r7, #7
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	2b23      	cmp	r3, #35	@ 0x23
 800afe4:	d804      	bhi.n	800aff0 <CDC_Control_FS+0x28>
 800afe6:	009a      	lsls	r2, r3, #2
 800afe8:	4b04      	ldr	r3, [pc, #16]	@ (800affc <CDC_Control_FS+0x34>)
 800afea:	18d3      	adds	r3, r2, r3
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aff0:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 800aff2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aff4:	0018      	movs	r0, r3
 800aff6:	46bd      	mov	sp, r7
 800aff8:	b002      	add	sp, #8
 800affa:	bd80      	pop	{r7, pc}
 800affc:	0800cff0 	.word	0x0800cff0

0800b000 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	4b06      	ldr	r3, [pc, #24]	@ (800b028 <CDC_Receive_FS+0x28>)
 800b00e:	0011      	movs	r1, r2
 800b010:	0018      	movs	r0, r3
 800b012:	f7fe fd02 	bl	8009a1a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b016:	4b04      	ldr	r3, [pc, #16]	@ (800b028 <CDC_Receive_FS+0x28>)
 800b018:	0018      	movs	r0, r3
 800b01a:	f7fe fd49 	bl	8009ab0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b01e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b020:	0018      	movs	r0, r3
 800b022:	46bd      	mov	sp, r7
 800b024:	b002      	add	sp, #8
 800b026:	bd80      	pop	{r7, pc}
 800b028:	200003d0 	.word	0x200003d0

0800b02c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b02c:	b5b0      	push	{r4, r5, r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	000a      	movs	r2, r1
 800b036:	1cbb      	adds	r3, r7, #2
 800b038:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800b03a:	230f      	movs	r3, #15
 800b03c:	18fb      	adds	r3, r7, r3
 800b03e:	2200      	movs	r2, #0
 800b040:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b042:	4a11      	ldr	r2, [pc, #68]	@ (800b088 <CDC_Transmit_FS+0x5c>)
 800b044:	23ae      	movs	r3, #174	@ 0xae
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	58d3      	ldr	r3, [r2, r3]
 800b04a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b04c:	68ba      	ldr	r2, [r7, #8]
 800b04e:	2385      	movs	r3, #133	@ 0x85
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	58d3      	ldr	r3, [r2, r3]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d001      	beq.n	800b05c <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800b058:	2301      	movs	r3, #1
 800b05a:	e010      	b.n	800b07e <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b05c:	1cbb      	adds	r3, r7, #2
 800b05e:	881a      	ldrh	r2, [r3, #0]
 800b060:	6879      	ldr	r1, [r7, #4]
 800b062:	4b09      	ldr	r3, [pc, #36]	@ (800b088 <CDC_Transmit_FS+0x5c>)
 800b064:	0018      	movs	r0, r3
 800b066:	f7fe fcbc 	bl	80099e2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b06a:	250f      	movs	r5, #15
 800b06c:	197c      	adds	r4, r7, r5
 800b06e:	4b06      	ldr	r3, [pc, #24]	@ (800b088 <CDC_Transmit_FS+0x5c>)
 800b070:	0018      	movs	r0, r3
 800b072:	f7fe fce6 	bl	8009a42 <USBD_CDC_TransmitPacket>
 800b076:	0003      	movs	r3, r0
 800b078:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800b07a:	197b      	adds	r3, r7, r5
 800b07c:	781b      	ldrb	r3, [r3, #0]
}
 800b07e:	0018      	movs	r0, r3
 800b080:	46bd      	mov	sp, r7
 800b082:	b004      	add	sp, #16
 800b084:	bdb0      	pop	{r4, r5, r7, pc}
 800b086:	46c0      	nop			@ (mov r8, r8)
 800b088:	200003d0 	.word	0x200003d0

0800b08c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	0002      	movs	r2, r0
 800b094:	6039      	str	r1, [r7, #0]
 800b096:	1dfb      	adds	r3, r7, #7
 800b098:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	2212      	movs	r2, #18
 800b09e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b0a0:	4b02      	ldr	r3, [pc, #8]	@ (800b0ac <USBD_FS_DeviceDescriptor+0x20>)
}
 800b0a2:	0018      	movs	r0, r3
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	b002      	add	sp, #8
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	46c0      	nop			@ (mov r8, r8)
 800b0ac:	20000188 	.word	0x20000188

0800b0b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	0002      	movs	r2, r0
 800b0b8:	6039      	str	r1, [r7, #0]
 800b0ba:	1dfb      	adds	r3, r7, #7
 800b0bc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	2204      	movs	r2, #4
 800b0c2:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b0c4:	4b02      	ldr	r3, [pc, #8]	@ (800b0d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b0c6:	0018      	movs	r0, r3
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	b002      	add	sp, #8
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	46c0      	nop			@ (mov r8, r8)
 800b0d0:	2000019c 	.word	0x2000019c

0800b0d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	0002      	movs	r2, r0
 800b0dc:	6039      	str	r1, [r7, #0]
 800b0de:	1dfb      	adds	r3, r7, #7
 800b0e0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800b0e2:	1dfb      	adds	r3, r7, #7
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d106      	bne.n	800b0f8 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b0ea:	683a      	ldr	r2, [r7, #0]
 800b0ec:	4908      	ldr	r1, [pc, #32]	@ (800b110 <USBD_FS_ProductStrDescriptor+0x3c>)
 800b0ee:	4b09      	ldr	r3, [pc, #36]	@ (800b114 <USBD_FS_ProductStrDescriptor+0x40>)
 800b0f0:	0018      	movs	r0, r3
 800b0f2:	f7ff fe19 	bl	800ad28 <USBD_GetString>
 800b0f6:	e005      	b.n	800b104 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b0f8:	683a      	ldr	r2, [r7, #0]
 800b0fa:	4905      	ldr	r1, [pc, #20]	@ (800b110 <USBD_FS_ProductStrDescriptor+0x3c>)
 800b0fc:	4b05      	ldr	r3, [pc, #20]	@ (800b114 <USBD_FS_ProductStrDescriptor+0x40>)
 800b0fe:	0018      	movs	r0, r3
 800b100:	f7ff fe12 	bl	800ad28 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b104:	4b02      	ldr	r3, [pc, #8]	@ (800b110 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800b106:	0018      	movs	r0, r3
 800b108:	46bd      	mov	sp, r7
 800b10a:	b002      	add	sp, #8
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	46c0      	nop			@ (mov r8, r8)
 800b110:	20000e94 	.word	0x20000e94
 800b114:	0800ced0 	.word	0x0800ced0

0800b118 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b082      	sub	sp, #8
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	0002      	movs	r2, r0
 800b120:	6039      	str	r1, [r7, #0]
 800b122:	1dfb      	adds	r3, r7, #7
 800b124:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b126:	683a      	ldr	r2, [r7, #0]
 800b128:	4904      	ldr	r1, [pc, #16]	@ (800b13c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b12a:	4b05      	ldr	r3, [pc, #20]	@ (800b140 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800b12c:	0018      	movs	r0, r3
 800b12e:	f7ff fdfb 	bl	800ad28 <USBD_GetString>
  return USBD_StrDesc;
 800b132:	4b02      	ldr	r3, [pc, #8]	@ (800b13c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800b134:	0018      	movs	r0, r3
 800b136:	46bd      	mov	sp, r7
 800b138:	b002      	add	sp, #8
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	20000e94 	.word	0x20000e94
 800b140:	0800cee8 	.word	0x0800cee8

0800b144 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b082      	sub	sp, #8
 800b148:	af00      	add	r7, sp, #0
 800b14a:	0002      	movs	r2, r0
 800b14c:	6039      	str	r1, [r7, #0]
 800b14e:	1dfb      	adds	r3, r7, #7
 800b150:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	221a      	movs	r2, #26
 800b156:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b158:	f000 f84c 	bl	800b1f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b15c:	4b02      	ldr	r3, [pc, #8]	@ (800b168 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800b15e:	0018      	movs	r0, r3
 800b160:	46bd      	mov	sp, r7
 800b162:	b002      	add	sp, #8
 800b164:	bd80      	pop	{r7, pc}
 800b166:	46c0      	nop			@ (mov r8, r8)
 800b168:	200001a0 	.word	0x200001a0

0800b16c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	0002      	movs	r2, r0
 800b174:	6039      	str	r1, [r7, #0]
 800b176:	1dfb      	adds	r3, r7, #7
 800b178:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800b17a:	1dfb      	adds	r3, r7, #7
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d106      	bne.n	800b190 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b182:	683a      	ldr	r2, [r7, #0]
 800b184:	4908      	ldr	r1, [pc, #32]	@ (800b1a8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800b186:	4b09      	ldr	r3, [pc, #36]	@ (800b1ac <USBD_FS_ConfigStrDescriptor+0x40>)
 800b188:	0018      	movs	r0, r3
 800b18a:	f7ff fdcd 	bl	800ad28 <USBD_GetString>
 800b18e:	e005      	b.n	800b19c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b190:	683a      	ldr	r2, [r7, #0]
 800b192:	4905      	ldr	r1, [pc, #20]	@ (800b1a8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800b194:	4b05      	ldr	r3, [pc, #20]	@ (800b1ac <USBD_FS_ConfigStrDescriptor+0x40>)
 800b196:	0018      	movs	r0, r3
 800b198:	f7ff fdc6 	bl	800ad28 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b19c:	4b02      	ldr	r3, [pc, #8]	@ (800b1a8 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800b19e:	0018      	movs	r0, r3
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	b002      	add	sp, #8
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	46c0      	nop			@ (mov r8, r8)
 800b1a8:	20000e94 	.word	0x20000e94
 800b1ac:	0800cefc 	.word	0x0800cefc

0800b1b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	0002      	movs	r2, r0
 800b1b8:	6039      	str	r1, [r7, #0]
 800b1ba:	1dfb      	adds	r3, r7, #7
 800b1bc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800b1be:	1dfb      	adds	r3, r7, #7
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d106      	bne.n	800b1d4 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b1c6:	683a      	ldr	r2, [r7, #0]
 800b1c8:	4908      	ldr	r1, [pc, #32]	@ (800b1ec <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800b1ca:	4b09      	ldr	r3, [pc, #36]	@ (800b1f0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800b1cc:	0018      	movs	r0, r3
 800b1ce:	f7ff fdab 	bl	800ad28 <USBD_GetString>
 800b1d2:	e005      	b.n	800b1e0 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b1d4:	683a      	ldr	r2, [r7, #0]
 800b1d6:	4905      	ldr	r1, [pc, #20]	@ (800b1ec <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800b1d8:	4b05      	ldr	r3, [pc, #20]	@ (800b1f0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800b1da:	0018      	movs	r0, r3
 800b1dc:	f7ff fda4 	bl	800ad28 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b1e0:	4b02      	ldr	r3, [pc, #8]	@ (800b1ec <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800b1e2:	0018      	movs	r0, r3
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	b002      	add	sp, #8
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	46c0      	nop			@ (mov r8, r8)
 800b1ec:	20000e94 	.word	0x20000e94
 800b1f0:	0800cf08 	.word	0x0800cf08

0800b1f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b1fa:	4b10      	ldr	r3, [pc, #64]	@ (800b23c <Get_SerialNum+0x48>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b200:	4b0f      	ldr	r3, [pc, #60]	@ (800b240 <Get_SerialNum+0x4c>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b206:	4b0f      	ldr	r3, [pc, #60]	@ (800b244 <Get_SerialNum+0x50>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b20c:	68fa      	ldr	r2, [r7, #12]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	18d3      	adds	r3, r2, r3
 800b212:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00b      	beq.n	800b232 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b21a:	490b      	ldr	r1, [pc, #44]	@ (800b248 <Get_SerialNum+0x54>)
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2208      	movs	r2, #8
 800b220:	0018      	movs	r0, r3
 800b222:	f000 f815 	bl	800b250 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b226:	4909      	ldr	r1, [pc, #36]	@ (800b24c <Get_SerialNum+0x58>)
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	2204      	movs	r2, #4
 800b22c:	0018      	movs	r0, r3
 800b22e:	f000 f80f 	bl	800b250 <IntToUnicode>
  }
}
 800b232:	46c0      	nop			@ (mov r8, r8)
 800b234:	46bd      	mov	sp, r7
 800b236:	b004      	add	sp, #16
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	46c0      	nop			@ (mov r8, r8)
 800b23c:	1ffff7ac 	.word	0x1ffff7ac
 800b240:	1ffff7b0 	.word	0x1ffff7b0
 800b244:	1ffff7b4 	.word	0x1ffff7b4
 800b248:	200001a2 	.word	0x200001a2
 800b24c:	200001b2 	.word	0x200001b2

0800b250 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b086      	sub	sp, #24
 800b254:	af00      	add	r7, sp, #0
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	1dfb      	adds	r3, r7, #7
 800b25c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800b25e:	2117      	movs	r1, #23
 800b260:	187b      	adds	r3, r7, r1
 800b262:	2200      	movs	r2, #0
 800b264:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800b266:	187b      	adds	r3, r7, r1
 800b268:	2200      	movs	r2, #0
 800b26a:	701a      	strb	r2, [r3, #0]
 800b26c:	e02f      	b.n	800b2ce <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	0f1b      	lsrs	r3, r3, #28
 800b272:	2b09      	cmp	r3, #9
 800b274:	d80d      	bhi.n	800b292 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	0f1b      	lsrs	r3, r3, #28
 800b27a:	b2da      	uxtb	r2, r3
 800b27c:	2317      	movs	r3, #23
 800b27e:	18fb      	adds	r3, r7, r3
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	005b      	lsls	r3, r3, #1
 800b284:	0019      	movs	r1, r3
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	185b      	adds	r3, r3, r1
 800b28a:	3230      	adds	r2, #48	@ 0x30
 800b28c:	b2d2      	uxtb	r2, r2
 800b28e:	701a      	strb	r2, [r3, #0]
 800b290:	e00c      	b.n	800b2ac <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	0f1b      	lsrs	r3, r3, #28
 800b296:	b2da      	uxtb	r2, r3
 800b298:	2317      	movs	r3, #23
 800b29a:	18fb      	adds	r3, r7, r3
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	005b      	lsls	r3, r3, #1
 800b2a0:	0019      	movs	r1, r3
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	185b      	adds	r3, r3, r1
 800b2a6:	3237      	adds	r2, #55	@ 0x37
 800b2a8:	b2d2      	uxtb	r2, r2
 800b2aa:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	011b      	lsls	r3, r3, #4
 800b2b0:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b2b2:	2117      	movs	r1, #23
 800b2b4:	187b      	adds	r3, r7, r1
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	005b      	lsls	r3, r3, #1
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	68ba      	ldr	r2, [r7, #8]
 800b2be:	18d3      	adds	r3, r2, r3
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b2c4:	187b      	adds	r3, r7, r1
 800b2c6:	781a      	ldrb	r2, [r3, #0]
 800b2c8:	187b      	adds	r3, r7, r1
 800b2ca:	3201      	adds	r2, #1
 800b2cc:	701a      	strb	r2, [r3, #0]
 800b2ce:	2317      	movs	r3, #23
 800b2d0:	18fa      	adds	r2, r7, r3
 800b2d2:	1dfb      	adds	r3, r7, #7
 800b2d4:	7812      	ldrb	r2, [r2, #0]
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d3c8      	bcc.n	800b26e <IntToUnicode+0x1e>
  }
}
 800b2dc:	46c0      	nop			@ (mov r8, r8)
 800b2de:	46c0      	nop			@ (mov r8, r8)
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	b006      	add	sp, #24
 800b2e4:	bd80      	pop	{r7, pc}
	...

0800b2e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a0e      	ldr	r2, [pc, #56]	@ (800b330 <HAL_PCD_MspInit+0x48>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d115      	bne.n	800b326 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b2fa:	4b0e      	ldr	r3, [pc, #56]	@ (800b334 <HAL_PCD_MspInit+0x4c>)
 800b2fc:	69da      	ldr	r2, [r3, #28]
 800b2fe:	4b0d      	ldr	r3, [pc, #52]	@ (800b334 <HAL_PCD_MspInit+0x4c>)
 800b300:	2180      	movs	r1, #128	@ 0x80
 800b302:	0409      	lsls	r1, r1, #16
 800b304:	430a      	orrs	r2, r1
 800b306:	61da      	str	r2, [r3, #28]
 800b308:	4b0a      	ldr	r3, [pc, #40]	@ (800b334 <HAL_PCD_MspInit+0x4c>)
 800b30a:	69da      	ldr	r2, [r3, #28]
 800b30c:	2380      	movs	r3, #128	@ 0x80
 800b30e:	041b      	lsls	r3, r3, #16
 800b310:	4013      	ands	r3, r2
 800b312:	60fb      	str	r3, [r7, #12]
 800b314:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800b316:	2200      	movs	r2, #0
 800b318:	2100      	movs	r1, #0
 800b31a:	201f      	movs	r0, #31
 800b31c:	f7f8 fa16 	bl	800374c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b320:	201f      	movs	r0, #31
 800b322:	f7f8 fa28 	bl	8003776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b326:	46c0      	nop			@ (mov r8, r8)
 800b328:	46bd      	mov	sp, r7
 800b32a:	b004      	add	sp, #16
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	46c0      	nop			@ (mov r8, r8)
 800b330:	40005c00 	.word	0x40005c00
 800b334:	40021000 	.word	0x40021000

0800b338 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	23b6      	movs	r3, #182	@ 0xb6
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	58d2      	ldr	r2, [r2, r3]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	21a6      	movs	r1, #166	@ 0xa6
 800b34c:	0089      	lsls	r1, r1, #2
 800b34e:	468c      	mov	ip, r1
 800b350:	4463      	add	r3, ip
 800b352:	0019      	movs	r1, r3
 800b354:	0010      	movs	r0, r2
 800b356:	f7fe fc7d 	bl	8009c54 <USBD_LL_SetupStage>
}
 800b35a:	46c0      	nop			@ (mov r8, r8)
 800b35c:	46bd      	mov	sp, r7
 800b35e:	b002      	add	sp, #8
 800b360:	bd80      	pop	{r7, pc}

0800b362 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b362:	b590      	push	{r4, r7, lr}
 800b364:	b083      	sub	sp, #12
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
 800b36a:	000a      	movs	r2, r1
 800b36c:	1cfb      	adds	r3, r7, #3
 800b36e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	23b6      	movs	r3, #182	@ 0xb6
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	58d4      	ldr	r4, [r2, r3]
 800b378:	1cfb      	adds	r3, r7, #3
 800b37a:	781a      	ldrb	r2, [r3, #0]
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	23b2      	movs	r3, #178	@ 0xb2
 800b380:	0059      	lsls	r1, r3, #1
 800b382:	0013      	movs	r3, r2
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	189b      	adds	r3, r3, r2
 800b388:	00db      	lsls	r3, r3, #3
 800b38a:	18c3      	adds	r3, r0, r3
 800b38c:	185b      	adds	r3, r3, r1
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	1cfb      	adds	r3, r7, #3
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	0019      	movs	r1, r3
 800b396:	0020      	movs	r0, r4
 800b398:	f7fe fcba 	bl	8009d10 <USBD_LL_DataOutStage>
}
 800b39c:	46c0      	nop			@ (mov r8, r8)
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	b003      	add	sp, #12
 800b3a2:	bd90      	pop	{r4, r7, pc}

0800b3a4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	000a      	movs	r2, r1
 800b3ae:	1cfb      	adds	r3, r7, #3
 800b3b0:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	23b6      	movs	r3, #182	@ 0xb6
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	58d0      	ldr	r0, [r2, r3]
 800b3ba:	1cfb      	adds	r3, r7, #3
 800b3bc:	781a      	ldrb	r2, [r3, #0]
 800b3be:	6879      	ldr	r1, [r7, #4]
 800b3c0:	0013      	movs	r3, r2
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	189b      	adds	r3, r3, r2
 800b3c6:	00db      	lsls	r3, r3, #3
 800b3c8:	18cb      	adds	r3, r1, r3
 800b3ca:	3324      	adds	r3, #36	@ 0x24
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	1cfb      	adds	r3, r7, #3
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	0019      	movs	r1, r3
 800b3d4:	f7fe fd1e 	bl	8009e14 <USBD_LL_DataInStage>
}
 800b3d8:	46c0      	nop			@ (mov r8, r8)
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	b002      	add	sp, #8
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	23b6      	movs	r3, #182	@ 0xb6
 800b3ec:	009b      	lsls	r3, r3, #2
 800b3ee:	58d3      	ldr	r3, [r2, r3]
 800b3f0:	0018      	movs	r0, r3
 800b3f2:	f7fe fe55 	bl	800a0a0 <USBD_LL_SOF>
}
 800b3f6:	46c0      	nop			@ (mov r8, r8)
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	b002      	add	sp, #8
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b084      	sub	sp, #16
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b406:	230f      	movs	r3, #15
 800b408:	18fb      	adds	r3, r7, r3
 800b40a:	2201      	movs	r2, #1
 800b40c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	795b      	ldrb	r3, [r3, #5]
 800b412:	2b02      	cmp	r3, #2
 800b414:	d001      	beq.n	800b41a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800b416:	f7f7 fc23 	bl	8002c60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	23b6      	movs	r3, #182	@ 0xb6
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	58d2      	ldr	r2, [r2, r3]
 800b422:	230f      	movs	r3, #15
 800b424:	18fb      	adds	r3, r7, r3
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	0019      	movs	r1, r3
 800b42a:	0010      	movs	r0, r2
 800b42c:	f7fe fdf7 	bl	800a01e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	23b6      	movs	r3, #182	@ 0xb6
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	58d3      	ldr	r3, [r2, r3]
 800b438:	0018      	movs	r0, r3
 800b43a:	f7fe fda8 	bl	8009f8e <USBD_LL_Reset>
}
 800b43e:	46c0      	nop			@ (mov r8, r8)
 800b440:	46bd      	mov	sp, r7
 800b442:	b004      	add	sp, #16
 800b444:	bd80      	pop	{r7, pc}
	...

0800b448 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	23b6      	movs	r3, #182	@ 0xb6
 800b454:	009b      	lsls	r3, r3, #2
 800b456:	58d3      	ldr	r3, [r2, r3]
 800b458:	0018      	movs	r0, r3
 800b45a:	f7fe fdf1 	bl	800a040 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	7a5b      	ldrb	r3, [r3, #9]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d005      	beq.n	800b472 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b466:	4b05      	ldr	r3, [pc, #20]	@ (800b47c <HAL_PCD_SuspendCallback+0x34>)
 800b468:	691a      	ldr	r2, [r3, #16]
 800b46a:	4b04      	ldr	r3, [pc, #16]	@ (800b47c <HAL_PCD_SuspendCallback+0x34>)
 800b46c:	2106      	movs	r1, #6
 800b46e:	430a      	orrs	r2, r1
 800b470:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800b472:	46c0      	nop			@ (mov r8, r8)
 800b474:	46bd      	mov	sp, r7
 800b476:	b002      	add	sp, #8
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	46c0      	nop			@ (mov r8, r8)
 800b47c:	e000ed00 	.word	0xe000ed00

0800b480 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	7a5b      	ldrb	r3, [r3, #9]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d007      	beq.n	800b4a0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b490:	4b09      	ldr	r3, [pc, #36]	@ (800b4b8 <HAL_PCD_ResumeCallback+0x38>)
 800b492:	691a      	ldr	r2, [r3, #16]
 800b494:	4b08      	ldr	r3, [pc, #32]	@ (800b4b8 <HAL_PCD_ResumeCallback+0x38>)
 800b496:	2106      	movs	r1, #6
 800b498:	438a      	bics	r2, r1
 800b49a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800b49c:	f000 fa42 	bl	800b924 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	23b6      	movs	r3, #182	@ 0xb6
 800b4a4:	009b      	lsls	r3, r3, #2
 800b4a6:	58d3      	ldr	r3, [r2, r3]
 800b4a8:	0018      	movs	r0, r3
 800b4aa:	f7fe fde1 	bl	800a070 <USBD_LL_Resume>
}
 800b4ae:	46c0      	nop			@ (mov r8, r8)
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	b002      	add	sp, #8
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	46c0      	nop			@ (mov r8, r8)
 800b4b8:	e000ed00 	.word	0xe000ed00

0800b4bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b4c4:	4a2d      	ldr	r2, [pc, #180]	@ (800b57c <USBD_LL_Init+0xc0>)
 800b4c6:	23b6      	movs	r3, #182	@ 0xb6
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	6879      	ldr	r1, [r7, #4]
 800b4cc:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	23b0      	movs	r3, #176	@ 0xb0
 800b4d2:	009b      	lsls	r3, r3, #2
 800b4d4:	4929      	ldr	r1, [pc, #164]	@ (800b57c <USBD_LL_Init+0xc0>)
 800b4d6:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800b4d8:	4b28      	ldr	r3, [pc, #160]	@ (800b57c <USBD_LL_Init+0xc0>)
 800b4da:	4a29      	ldr	r2, [pc, #164]	@ (800b580 <USBD_LL_Init+0xc4>)
 800b4dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b4de:	4b27      	ldr	r3, [pc, #156]	@ (800b57c <USBD_LL_Init+0xc0>)
 800b4e0:	2208      	movs	r2, #8
 800b4e2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b4e4:	4b25      	ldr	r3, [pc, #148]	@ (800b57c <USBD_LL_Init+0xc0>)
 800b4e6:	2202      	movs	r2, #2
 800b4e8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b4ea:	4b24      	ldr	r3, [pc, #144]	@ (800b57c <USBD_LL_Init+0xc0>)
 800b4ec:	2202      	movs	r2, #2
 800b4ee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b4f0:	4b22      	ldr	r3, [pc, #136]	@ (800b57c <USBD_LL_Init+0xc0>)
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b4f6:	4b21      	ldr	r3, [pc, #132]	@ (800b57c <USBD_LL_Init+0xc0>)
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b4fc:	4b1f      	ldr	r3, [pc, #124]	@ (800b57c <USBD_LL_Init+0xc0>)
 800b4fe:	2200      	movs	r2, #0
 800b500:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b502:	4b1e      	ldr	r3, [pc, #120]	@ (800b57c <USBD_LL_Init+0xc0>)
 800b504:	0018      	movs	r0, r3
 800b506:	f7f8 fb31 	bl	8003b6c <HAL_PCD_Init>
 800b50a:	1e03      	subs	r3, r0, #0
 800b50c:	d001      	beq.n	800b512 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800b50e:	f7f7 fba7 	bl	8002c60 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	23b0      	movs	r3, #176	@ 0xb0
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	58d0      	ldr	r0, [r2, r3]
 800b51a:	2318      	movs	r3, #24
 800b51c:	2200      	movs	r2, #0
 800b51e:	2100      	movs	r1, #0
 800b520:	f7fa f8e2 	bl	80056e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	23b0      	movs	r3, #176	@ 0xb0
 800b528:	009b      	lsls	r3, r3, #2
 800b52a:	58d0      	ldr	r0, [r2, r3]
 800b52c:	2358      	movs	r3, #88	@ 0x58
 800b52e:	2200      	movs	r2, #0
 800b530:	2180      	movs	r1, #128	@ 0x80
 800b532:	f7fa f8d9 	bl	80056e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b536:	687a      	ldr	r2, [r7, #4]
 800b538:	23b0      	movs	r3, #176	@ 0xb0
 800b53a:	009b      	lsls	r3, r3, #2
 800b53c:	58d0      	ldr	r0, [r2, r3]
 800b53e:	23c0      	movs	r3, #192	@ 0xc0
 800b540:	2200      	movs	r2, #0
 800b542:	2181      	movs	r1, #129	@ 0x81
 800b544:	f7fa f8d0 	bl	80056e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	23b0      	movs	r3, #176	@ 0xb0
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	58d0      	ldr	r0, [r2, r3]
 800b550:	2388      	movs	r3, #136	@ 0x88
 800b552:	005b      	lsls	r3, r3, #1
 800b554:	2200      	movs	r2, #0
 800b556:	2101      	movs	r1, #1
 800b558:	f7fa f8c6 	bl	80056e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	23b0      	movs	r3, #176	@ 0xb0
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	58d0      	ldr	r0, [r2, r3]
 800b564:	2380      	movs	r3, #128	@ 0x80
 800b566:	005b      	lsls	r3, r3, #1
 800b568:	2200      	movs	r2, #0
 800b56a:	2182      	movs	r1, #130	@ 0x82
 800b56c:	f7fa f8bc 	bl	80056e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b570:	2300      	movs	r3, #0
}
 800b572:	0018      	movs	r0, r3
 800b574:	46bd      	mov	sp, r7
 800b576:	b002      	add	sp, #8
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	46c0      	nop			@ (mov r8, r8)
 800b57c:	20001094 	.word	0x20001094
 800b580:	40005c00 	.word	0x40005c00

0800b584 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b584:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b586:	b085      	sub	sp, #20
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b58c:	210f      	movs	r1, #15
 800b58e:	187b      	adds	r3, r7, r1
 800b590:	2200      	movs	r2, #0
 800b592:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b594:	260e      	movs	r6, #14
 800b596:	19bb      	adds	r3, r7, r6
 800b598:	2200      	movs	r2, #0
 800b59a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	23b0      	movs	r3, #176	@ 0xb0
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	58d3      	ldr	r3, [r2, r3]
 800b5a4:	000d      	movs	r5, r1
 800b5a6:	187c      	adds	r4, r7, r1
 800b5a8:	0018      	movs	r0, r3
 800b5aa:	f7f8 fbd3 	bl	8003d54 <HAL_PCD_Start>
 800b5ae:	0003      	movs	r3, r0
 800b5b0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5b2:	19bc      	adds	r4, r7, r6
 800b5b4:	197b      	adds	r3, r7, r5
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	0018      	movs	r0, r3
 800b5ba:	f000 f9ba 	bl	800b932 <USBD_Get_USB_Status>
 800b5be:	0003      	movs	r3, r0
 800b5c0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b5c2:	19bb      	adds	r3, r7, r6
 800b5c4:	781b      	ldrb	r3, [r3, #0]
}
 800b5c6:	0018      	movs	r0, r3
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	b005      	add	sp, #20
 800b5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b5ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b5ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5d0:	b085      	sub	sp, #20
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
 800b5d6:	000c      	movs	r4, r1
 800b5d8:	0010      	movs	r0, r2
 800b5da:	0019      	movs	r1, r3
 800b5dc:	1cfb      	adds	r3, r7, #3
 800b5de:	1c22      	adds	r2, r4, #0
 800b5e0:	701a      	strb	r2, [r3, #0]
 800b5e2:	1cbb      	adds	r3, r7, #2
 800b5e4:	1c02      	adds	r2, r0, #0
 800b5e6:	701a      	strb	r2, [r3, #0]
 800b5e8:	003b      	movs	r3, r7
 800b5ea:	1c0a      	adds	r2, r1, #0
 800b5ec:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5ee:	260f      	movs	r6, #15
 800b5f0:	19bb      	adds	r3, r7, r6
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5f6:	250e      	movs	r5, #14
 800b5f8:	197b      	adds	r3, r7, r5
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	23b0      	movs	r3, #176	@ 0xb0
 800b602:	009b      	lsls	r3, r3, #2
 800b604:	58d0      	ldr	r0, [r2, r3]
 800b606:	19bc      	adds	r4, r7, r6
 800b608:	1cbb      	adds	r3, r7, #2
 800b60a:	781d      	ldrb	r5, [r3, #0]
 800b60c:	003b      	movs	r3, r7
 800b60e:	881a      	ldrh	r2, [r3, #0]
 800b610:	1cfb      	adds	r3, r7, #3
 800b612:	7819      	ldrb	r1, [r3, #0]
 800b614:	002b      	movs	r3, r5
 800b616:	f7f8 fd31 	bl	800407c <HAL_PCD_EP_Open>
 800b61a:	0003      	movs	r3, r0
 800b61c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b61e:	250e      	movs	r5, #14
 800b620:	197c      	adds	r4, r7, r5
 800b622:	19bb      	adds	r3, r7, r6
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	0018      	movs	r0, r3
 800b628:	f000 f983 	bl	800b932 <USBD_Get_USB_Status>
 800b62c:	0003      	movs	r3, r0
 800b62e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b630:	197b      	adds	r3, r7, r5
 800b632:	781b      	ldrb	r3, [r3, #0]
}
 800b634:	0018      	movs	r0, r3
 800b636:	46bd      	mov	sp, r7
 800b638:	b005      	add	sp, #20
 800b63a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b63c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b63c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b63e:	b085      	sub	sp, #20
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	000a      	movs	r2, r1
 800b646:	1cfb      	adds	r3, r7, #3
 800b648:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b64a:	210f      	movs	r1, #15
 800b64c:	187b      	adds	r3, r7, r1
 800b64e:	2200      	movs	r2, #0
 800b650:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b652:	260e      	movs	r6, #14
 800b654:	19bb      	adds	r3, r7, r6
 800b656:	2200      	movs	r2, #0
 800b658:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	23b0      	movs	r3, #176	@ 0xb0
 800b65e:	009b      	lsls	r3, r3, #2
 800b660:	58d2      	ldr	r2, [r2, r3]
 800b662:	000d      	movs	r5, r1
 800b664:	187c      	adds	r4, r7, r1
 800b666:	1cfb      	adds	r3, r7, #3
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	0019      	movs	r1, r3
 800b66c:	0010      	movs	r0, r2
 800b66e:	f7f8 fd74 	bl	800415a <HAL_PCD_EP_Close>
 800b672:	0003      	movs	r3, r0
 800b674:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b676:	19bc      	adds	r4, r7, r6
 800b678:	197b      	adds	r3, r7, r5
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	0018      	movs	r0, r3
 800b67e:	f000 f958 	bl	800b932 <USBD_Get_USB_Status>
 800b682:	0003      	movs	r3, r0
 800b684:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b686:	19bb      	adds	r3, r7, r6
 800b688:	781b      	ldrb	r3, [r3, #0]
}
 800b68a:	0018      	movs	r0, r3
 800b68c:	46bd      	mov	sp, r7
 800b68e:	b005      	add	sp, #20
 800b690:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b692 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b692:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b694:	b085      	sub	sp, #20
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
 800b69a:	000a      	movs	r2, r1
 800b69c:	1cfb      	adds	r3, r7, #3
 800b69e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6a0:	210f      	movs	r1, #15
 800b6a2:	187b      	adds	r3, r7, r1
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6a8:	260e      	movs	r6, #14
 800b6aa:	19bb      	adds	r3, r7, r6
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	23b0      	movs	r3, #176	@ 0xb0
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	58d2      	ldr	r2, [r2, r3]
 800b6b8:	000d      	movs	r5, r1
 800b6ba:	187c      	adds	r4, r7, r1
 800b6bc:	1cfb      	adds	r3, r7, #3
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	0019      	movs	r1, r3
 800b6c2:	0010      	movs	r0, r2
 800b6c4:	f7f8 fe26 	bl	8004314 <HAL_PCD_EP_SetStall>
 800b6c8:	0003      	movs	r3, r0
 800b6ca:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6cc:	19bc      	adds	r4, r7, r6
 800b6ce:	197b      	adds	r3, r7, r5
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	0018      	movs	r0, r3
 800b6d4:	f000 f92d 	bl	800b932 <USBD_Get_USB_Status>
 800b6d8:	0003      	movs	r3, r0
 800b6da:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b6dc:	19bb      	adds	r3, r7, r6
 800b6de:	781b      	ldrb	r3, [r3, #0]
}
 800b6e0:	0018      	movs	r0, r3
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	b005      	add	sp, #20
 800b6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b6e8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	000a      	movs	r2, r1
 800b6f2:	1cfb      	adds	r3, r7, #3
 800b6f4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6f6:	210f      	movs	r1, #15
 800b6f8:	187b      	adds	r3, r7, r1
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6fe:	260e      	movs	r6, #14
 800b700:	19bb      	adds	r3, r7, r6
 800b702:	2200      	movs	r2, #0
 800b704:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	23b0      	movs	r3, #176	@ 0xb0
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	58d2      	ldr	r2, [r2, r3]
 800b70e:	000d      	movs	r5, r1
 800b710:	187c      	adds	r4, r7, r1
 800b712:	1cfb      	adds	r3, r7, #3
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	0019      	movs	r1, r3
 800b718:	0010      	movs	r0, r2
 800b71a:	f7f8 fe57 	bl	80043cc <HAL_PCD_EP_ClrStall>
 800b71e:	0003      	movs	r3, r0
 800b720:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b722:	19bc      	adds	r4, r7, r6
 800b724:	197b      	adds	r3, r7, r5
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	0018      	movs	r0, r3
 800b72a:	f000 f902 	bl	800b932 <USBD_Get_USB_Status>
 800b72e:	0003      	movs	r3, r0
 800b730:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b732:	19bb      	adds	r3, r7, r6
 800b734:	781b      	ldrb	r3, [r3, #0]
}
 800b736:	0018      	movs	r0, r3
 800b738:	46bd      	mov	sp, r7
 800b73a:	b005      	add	sp, #20
 800b73c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b73e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b73e:	b580      	push	{r7, lr}
 800b740:	b084      	sub	sp, #16
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
 800b746:	000a      	movs	r2, r1
 800b748:	1cfb      	adds	r3, r7, #3
 800b74a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	23b0      	movs	r3, #176	@ 0xb0
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	58d3      	ldr	r3, [r2, r3]
 800b754:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b756:	1cfb      	adds	r3, r7, #3
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	b25b      	sxtb	r3, r3
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	da0c      	bge.n	800b77a <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b760:	1cfb      	adds	r3, r7, #3
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	227f      	movs	r2, #127	@ 0x7f
 800b766:	401a      	ands	r2, r3
 800b768:	68f9      	ldr	r1, [r7, #12]
 800b76a:	0013      	movs	r3, r2
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	189b      	adds	r3, r3, r2
 800b770:	00db      	lsls	r3, r3, #3
 800b772:	18cb      	adds	r3, r1, r3
 800b774:	3312      	adds	r3, #18
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	e00d      	b.n	800b796 <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b77a:	1cfb      	adds	r3, r7, #3
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	227f      	movs	r2, #127	@ 0x7f
 800b780:	401a      	ands	r2, r3
 800b782:	68f8      	ldr	r0, [r7, #12]
 800b784:	23a9      	movs	r3, #169	@ 0xa9
 800b786:	0059      	lsls	r1, r3, #1
 800b788:	0013      	movs	r3, r2
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	189b      	adds	r3, r3, r2
 800b78e:	00db      	lsls	r3, r3, #3
 800b790:	18c3      	adds	r3, r0, r3
 800b792:	185b      	adds	r3, r3, r1
 800b794:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b796:	0018      	movs	r0, r3
 800b798:	46bd      	mov	sp, r7
 800b79a:	b004      	add	sp, #16
 800b79c:	bd80      	pop	{r7, pc}

0800b79e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b79e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7a0:	b085      	sub	sp, #20
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
 800b7a6:	000a      	movs	r2, r1
 800b7a8:	1cfb      	adds	r3, r7, #3
 800b7aa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7ac:	210f      	movs	r1, #15
 800b7ae:	187b      	adds	r3, r7, r1
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7b4:	260e      	movs	r6, #14
 800b7b6:	19bb      	adds	r3, r7, r6
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b7bc:	687a      	ldr	r2, [r7, #4]
 800b7be:	23b0      	movs	r3, #176	@ 0xb0
 800b7c0:	009b      	lsls	r3, r3, #2
 800b7c2:	58d2      	ldr	r2, [r2, r3]
 800b7c4:	000d      	movs	r5, r1
 800b7c6:	187c      	adds	r4, r7, r1
 800b7c8:	1cfb      	adds	r3, r7, #3
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	0019      	movs	r1, r3
 800b7ce:	0010      	movs	r0, r2
 800b7d0:	f7f8 fc2a 	bl	8004028 <HAL_PCD_SetAddress>
 800b7d4:	0003      	movs	r3, r0
 800b7d6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7d8:	19bc      	adds	r4, r7, r6
 800b7da:	197b      	adds	r3, r7, r5
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	0018      	movs	r0, r3
 800b7e0:	f000 f8a7 	bl	800b932 <USBD_Get_USB_Status>
 800b7e4:	0003      	movs	r3, r0
 800b7e6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b7e8:	19bb      	adds	r3, r7, r6
 800b7ea:	781b      	ldrb	r3, [r3, #0]
}
 800b7ec:	0018      	movs	r0, r3
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	b005      	add	sp, #20
 800b7f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b7f4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7f6:	b087      	sub	sp, #28
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	0008      	movs	r0, r1
 800b7fe:	607a      	str	r2, [r7, #4]
 800b800:	0019      	movs	r1, r3
 800b802:	230b      	movs	r3, #11
 800b804:	18fb      	adds	r3, r7, r3
 800b806:	1c02      	adds	r2, r0, #0
 800b808:	701a      	strb	r2, [r3, #0]
 800b80a:	2408      	movs	r4, #8
 800b80c:	193b      	adds	r3, r7, r4
 800b80e:	1c0a      	adds	r2, r1, #0
 800b810:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b812:	2117      	movs	r1, #23
 800b814:	187b      	adds	r3, r7, r1
 800b816:	2200      	movs	r2, #0
 800b818:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b81a:	2516      	movs	r5, #22
 800b81c:	197b      	adds	r3, r7, r5
 800b81e:	2200      	movs	r2, #0
 800b820:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b822:	68fa      	ldr	r2, [r7, #12]
 800b824:	23b0      	movs	r3, #176	@ 0xb0
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	58d0      	ldr	r0, [r2, r3]
 800b82a:	193b      	adds	r3, r7, r4
 800b82c:	881d      	ldrh	r5, [r3, #0]
 800b82e:	000e      	movs	r6, r1
 800b830:	187c      	adds	r4, r7, r1
 800b832:	687a      	ldr	r2, [r7, #4]
 800b834:	230b      	movs	r3, #11
 800b836:	18fb      	adds	r3, r7, r3
 800b838:	7819      	ldrb	r1, [r3, #0]
 800b83a:	002b      	movs	r3, r5
 800b83c:	f7f8 fd2e 	bl	800429c <HAL_PCD_EP_Transmit>
 800b840:	0003      	movs	r3, r0
 800b842:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b844:	2516      	movs	r5, #22
 800b846:	197c      	adds	r4, r7, r5
 800b848:	19bb      	adds	r3, r7, r6
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	0018      	movs	r0, r3
 800b84e:	f000 f870 	bl	800b932 <USBD_Get_USB_Status>
 800b852:	0003      	movs	r3, r0
 800b854:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b856:	197b      	adds	r3, r7, r5
 800b858:	781b      	ldrb	r3, [r3, #0]
}
 800b85a:	0018      	movs	r0, r3
 800b85c:	46bd      	mov	sp, r7
 800b85e:	b007      	add	sp, #28
 800b860:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b862 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b862:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b864:	b087      	sub	sp, #28
 800b866:	af00      	add	r7, sp, #0
 800b868:	60f8      	str	r0, [r7, #12]
 800b86a:	0008      	movs	r0, r1
 800b86c:	607a      	str	r2, [r7, #4]
 800b86e:	0019      	movs	r1, r3
 800b870:	230b      	movs	r3, #11
 800b872:	18fb      	adds	r3, r7, r3
 800b874:	1c02      	adds	r2, r0, #0
 800b876:	701a      	strb	r2, [r3, #0]
 800b878:	2408      	movs	r4, #8
 800b87a:	193b      	adds	r3, r7, r4
 800b87c:	1c0a      	adds	r2, r1, #0
 800b87e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b880:	2117      	movs	r1, #23
 800b882:	187b      	adds	r3, r7, r1
 800b884:	2200      	movs	r2, #0
 800b886:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b888:	2516      	movs	r5, #22
 800b88a:	197b      	adds	r3, r7, r5
 800b88c:	2200      	movs	r2, #0
 800b88e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b890:	68fa      	ldr	r2, [r7, #12]
 800b892:	23b0      	movs	r3, #176	@ 0xb0
 800b894:	009b      	lsls	r3, r3, #2
 800b896:	58d0      	ldr	r0, [r2, r3]
 800b898:	193b      	adds	r3, r7, r4
 800b89a:	881d      	ldrh	r5, [r3, #0]
 800b89c:	000e      	movs	r6, r1
 800b89e:	187c      	adds	r4, r7, r1
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	230b      	movs	r3, #11
 800b8a4:	18fb      	adds	r3, r7, r3
 800b8a6:	7819      	ldrb	r1, [r3, #0]
 800b8a8:	002b      	movs	r3, r5
 800b8aa:	f7f8 fca7 	bl	80041fc <HAL_PCD_EP_Receive>
 800b8ae:	0003      	movs	r3, r0
 800b8b0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8b2:	2516      	movs	r5, #22
 800b8b4:	197c      	adds	r4, r7, r5
 800b8b6:	19bb      	adds	r3, r7, r6
 800b8b8:	781b      	ldrb	r3, [r3, #0]
 800b8ba:	0018      	movs	r0, r3
 800b8bc:	f000 f839 	bl	800b932 <USBD_Get_USB_Status>
 800b8c0:	0003      	movs	r3, r0
 800b8c2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b8c4:	197b      	adds	r3, r7, r5
 800b8c6:	781b      	ldrb	r3, [r3, #0]
}
 800b8c8:	0018      	movs	r0, r3
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	b007      	add	sp, #28
 800b8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b8d0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	000a      	movs	r2, r1
 800b8da:	1cfb      	adds	r3, r7, #3
 800b8dc:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	23b0      	movs	r3, #176	@ 0xb0
 800b8e2:	009b      	lsls	r3, r3, #2
 800b8e4:	58d2      	ldr	r2, [r2, r3]
 800b8e6:	1cfb      	adds	r3, r7, #3
 800b8e8:	781b      	ldrb	r3, [r3, #0]
 800b8ea:	0019      	movs	r1, r3
 800b8ec:	0010      	movs	r0, r2
 800b8ee:	f7f8 fcbc 	bl	800426a <HAL_PCD_EP_GetRxCount>
 800b8f2:	0003      	movs	r3, r0
}
 800b8f4:	0018      	movs	r0, r3
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	b002      	add	sp, #8
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b904:	4b02      	ldr	r3, [pc, #8]	@ (800b910 <USBD_static_malloc+0x14>)
}
 800b906:	0018      	movs	r0, r3
 800b908:	46bd      	mov	sp, r7
 800b90a:	b002      	add	sp, #8
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	46c0      	nop			@ (mov r8, r8)
 800b910:	20001370 	.word	0x20001370

0800b914 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]

}
 800b91c:	46c0      	nop			@ (mov r8, r8)
 800b91e:	46bd      	mov	sp, r7
 800b920:	b002      	add	sp, #8
 800b922:	bd80      	pop	{r7, pc}

0800b924 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b928:	f7f6 ff5a 	bl	80027e0 <SystemClock_Config>
}
 800b92c:	46c0      	nop			@ (mov r8, r8)
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b084      	sub	sp, #16
 800b936:	af00      	add	r7, sp, #0
 800b938:	0002      	movs	r2, r0
 800b93a:	1dfb      	adds	r3, r7, #7
 800b93c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b93e:	230f      	movs	r3, #15
 800b940:	18fb      	adds	r3, r7, r3
 800b942:	2200      	movs	r2, #0
 800b944:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800b946:	1dfb      	adds	r3, r7, #7
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	2b03      	cmp	r3, #3
 800b94c:	d017      	beq.n	800b97e <USBD_Get_USB_Status+0x4c>
 800b94e:	dc1b      	bgt.n	800b988 <USBD_Get_USB_Status+0x56>
 800b950:	2b02      	cmp	r3, #2
 800b952:	d00f      	beq.n	800b974 <USBD_Get_USB_Status+0x42>
 800b954:	dc18      	bgt.n	800b988 <USBD_Get_USB_Status+0x56>
 800b956:	2b00      	cmp	r3, #0
 800b958:	d002      	beq.n	800b960 <USBD_Get_USB_Status+0x2e>
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d005      	beq.n	800b96a <USBD_Get_USB_Status+0x38>
 800b95e:	e013      	b.n	800b988 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b960:	230f      	movs	r3, #15
 800b962:	18fb      	adds	r3, r7, r3
 800b964:	2200      	movs	r2, #0
 800b966:	701a      	strb	r2, [r3, #0]
    break;
 800b968:	e013      	b.n	800b992 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b96a:	230f      	movs	r3, #15
 800b96c:	18fb      	adds	r3, r7, r3
 800b96e:	2202      	movs	r2, #2
 800b970:	701a      	strb	r2, [r3, #0]
    break;
 800b972:	e00e      	b.n	800b992 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b974:	230f      	movs	r3, #15
 800b976:	18fb      	adds	r3, r7, r3
 800b978:	2201      	movs	r2, #1
 800b97a:	701a      	strb	r2, [r3, #0]
    break;
 800b97c:	e009      	b.n	800b992 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b97e:	230f      	movs	r3, #15
 800b980:	18fb      	adds	r3, r7, r3
 800b982:	2202      	movs	r2, #2
 800b984:	701a      	strb	r2, [r3, #0]
    break;
 800b986:	e004      	b.n	800b992 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800b988:	230f      	movs	r3, #15
 800b98a:	18fb      	adds	r3, r7, r3
 800b98c:	2202      	movs	r2, #2
 800b98e:	701a      	strb	r2, [r3, #0]
    break;
 800b990:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800b992:	230f      	movs	r3, #15
 800b994:	18fb      	adds	r3, r7, r3
 800b996:	781b      	ldrb	r3, [r3, #0]
}
 800b998:	0018      	movs	r0, r3
 800b99a:	46bd      	mov	sp, r7
 800b99c:	b004      	add	sp, #16
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 800b9a0:	b5b0      	push	{r4, r5, r7, lr}
 800b9a2:	b086      	sub	sp, #24
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 800b9a8:	2316      	movs	r3, #22
 800b9aa:	18fb      	adds	r3, r7, r3
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	801a      	strh	r2, [r3, #0]
    uint32 ldo_tune = 0;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 800b9b4:	4ba0      	ldr	r3, [pc, #640]	@ (800bc38 <dwt_initialise+0x298>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 800b9bc:	4b9e      	ldr	r3, [pc, #632]	@ (800bc38 <dwt_initialise+0x298>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 800b9c4:	4b9c      	ldr	r3, [pc, #624]	@ (800bc38 <dwt_initialise+0x298>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 800b9cc:	4b9a      	ldr	r3, [pc, #616]	@ (800bc38 <dwt_initialise+0x298>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	629a      	str	r2, [r3, #40]	@ 0x28
    pdw1000local->cbRxOk = NULL;
 800b9d4:	4b98      	ldr	r3, [pc, #608]	@ (800bc38 <dwt_initialise+0x298>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	62da      	str	r2, [r3, #44]	@ 0x2c
    pdw1000local->cbRxTo = NULL;
 800b9dc:	4b96      	ldr	r3, [pc, #600]	@ (800bc38 <dwt_initialise+0x298>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	631a      	str	r2, [r3, #48]	@ 0x30
    pdw1000local->cbRxErr = NULL;
 800b9e4:	4b94      	ldr	r3, [pc, #592]	@ (800bc38 <dwt_initialise+0x298>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	635a      	str	r2, [r3, #52]	@ 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 800b9ec:	f000 f92c 	bl	800bc48 <dwt_readdevid>
 800b9f0:	0003      	movs	r3, r0
 800b9f2:	4a92      	ldr	r2, [pc, #584]	@ (800bc3c <dwt_initialise+0x29c>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d002      	beq.n	800b9fe <dwt_initialise+0x5e>
    {
        return DWT_ERROR ;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	425b      	negs	r3, r3
 800b9fc:	e118      	b.n	800bc30 <dwt_initialise+0x290>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2202      	movs	r2, #2
 800ba02:	4013      	ands	r3, r2
 800ba04:	d101      	bne.n	800ba0a <dwt_initialise+0x6a>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 800ba06:	f000 ffcb 	bl	800c9a0 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2202      	movs	r2, #2
 800ba0e:	4013      	ands	r3, r2
 800ba10:	d003      	beq.n	800ba1a <dwt_initialise+0x7a>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	22f8      	movs	r2, #248	@ 0xf8
 800ba16:	4013      	ands	r3, r2
 800ba18:	d102      	bne.n	800ba20 <dwt_initialise+0x80>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 800ba1a:	2000      	movs	r0, #0
 800ba1c:	f000 fd9c 	bl	800c558 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 800ba20:	2204      	movs	r2, #4
 800ba22:	2100      	movs	r1, #0
 800ba24:	2024      	movs	r0, #36	@ 0x24
 800ba26:	f000 fc7f 	bl	800c328 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2202      	movs	r2, #2
 800ba2e:	4013      	ands	r3, r2
 800ba30:	d118      	bne.n	800ba64 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 800ba32:	2004      	movs	r0, #4
 800ba34:	f000 fcd2 	bl	800c3dc <_dwt_otpread>
 800ba38:	0003      	movs	r3, r0
 800ba3a:	613b      	str	r3, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	22ff      	movs	r2, #255	@ 0xff
 800ba40:	4013      	ands	r3, r2
 800ba42:	d021      	beq.n	800ba88 <dwt_initialise+0xe8>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 800ba44:	2202      	movs	r2, #2
 800ba46:	2112      	movs	r1, #18
 800ba48:	202d      	movs	r0, #45	@ 0x2d
 800ba4a:	f000 fc6d 	bl	800c328 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 800ba4e:	4b7a      	ldr	r3, [pc, #488]	@ (800bc38 <dwt_initialise+0x298>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	8ada      	ldrh	r2, [r3, #22]
 800ba54:	4b78      	ldr	r3, [pc, #480]	@ (800bc38 <dwt_initialise+0x298>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2180      	movs	r1, #128	@ 0x80
 800ba5a:	0149      	lsls	r1, r1, #5
 800ba5c:	430a      	orrs	r2, r1
 800ba5e:	b292      	uxth	r2, r2
 800ba60:	82da      	strh	r2, [r3, #22]
 800ba62:	e011      	b.n	800ba88 <dwt_initialise+0xe8>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 800ba64:	2130      	movs	r1, #48	@ 0x30
 800ba66:	2028      	movs	r0, #40	@ 0x28
 800ba68:	f000 fc00 	bl	800c26c <dwt_read32bitoffsetreg>
 800ba6c:	0003      	movs	r3, r0
 800ba6e:	4a74      	ldr	r2, [pc, #464]	@ (800bc40 <dwt_initialise+0x2a0>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d009      	beq.n	800ba88 <dwt_initialise+0xe8>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 800ba74:	4b70      	ldr	r3, [pc, #448]	@ (800bc38 <dwt_initialise+0x298>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	8ada      	ldrh	r2, [r3, #22]
 800ba7a:	4b6f      	ldr	r3, [pc, #444]	@ (800bc38 <dwt_initialise+0x298>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	2180      	movs	r1, #128	@ 0x80
 800ba80:	0149      	lsls	r1, r1, #5
 800ba82:	430a      	orrs	r2, r1
 800ba84:	b292      	uxth	r2, r2
 800ba86:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2202      	movs	r2, #2
 800ba8c:	4013      	ands	r3, r2
 800ba8e:	d007      	beq.n	800baa0 <dwt_initialise+0x100>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2202      	movs	r2, #2
 800ba94:	4013      	ands	r3, r2
 800ba96:	d013      	beq.n	800bac0 <dwt_initialise+0x120>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2208      	movs	r2, #8
 800ba9c:	4013      	ands	r3, r2
 800ba9e:	d00f      	beq.n	800bac0 <dwt_initialise+0x120>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 800baa0:	201e      	movs	r0, #30
 800baa2:	f000 fc9b 	bl	800c3dc <_dwt_otpread>
 800baa6:	0002      	movs	r2, r0
 800baa8:	2116      	movs	r1, #22
 800baaa:	187b      	adds	r3, r7, r1
 800baac:	801a      	strh	r2, [r3, #0]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 800baae:	187b      	adds	r3, r7, r1
 800bab0:	881b      	ldrh	r3, [r3, #0]
 800bab2:	0a1b      	lsrs	r3, r3, #8
 800bab4:	b29a      	uxth	r2, r3
 800bab6:	4b60      	ldr	r3, [pc, #384]	@ (800bc38 <dwt_initialise+0x298>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	b2d2      	uxtb	r2, r2
 800babc:	72da      	strb	r2, [r3, #11]
 800babe:	e003      	b.n	800bac8 <dwt_initialise+0x128>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 800bac0:	4b5d      	ldr	r3, [pc, #372]	@ (800bc38 <dwt_initialise+0x298>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	2200      	movs	r2, #0
 800bac6:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2202      	movs	r2, #2
 800bacc:	4013      	ands	r3, r2
 800bace:	d10f      	bne.n	800baf0 <dwt_initialise+0x150>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 800bad0:	2116      	movs	r1, #22
 800bad2:	187b      	adds	r3, r7, r1
 800bad4:	881b      	ldrh	r3, [r3, #0]
 800bad6:	221f      	movs	r2, #31
 800bad8:	4013      	ands	r3, r2
 800bada:	d102      	bne.n	800bae2 <dwt_initialise+0x142>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 800badc:	187b      	adds	r3, r7, r1
 800bade:	2210      	movs	r2, #16
 800bae0:	801a      	strh	r2, [r3, #0]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 800bae2:	2316      	movs	r3, #22
 800bae4:	18fb      	adds	r3, r7, r3
 800bae6:	881b      	ldrh	r3, [r3, #0]
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	0018      	movs	r0, r3
 800baec:	f000 ff7e 	bl	800c9ec <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2210      	movs	r2, #16
 800baf4:	4013      	ands	r3, r2
 800baf6:	d007      	beq.n	800bb08 <dwt_initialise+0x168>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 800baf8:	4b4f      	ldr	r3, [pc, #316]	@ (800bc38 <dwt_initialise+0x298>)
 800bafa:	681c      	ldr	r4, [r3, #0]
 800bafc:	2006      	movs	r0, #6
 800bafe:	f000 fc6d 	bl	800c3dc <_dwt_otpread>
 800bb02:	0003      	movs	r3, r0
 800bb04:	6023      	str	r3, [r4, #0]
 800bb06:	e003      	b.n	800bb10 <dwt_initialise+0x170>
    }
    else
    {
        pdw1000local->partID = 0;
 800bb08:	4b4b      	ldr	r3, [pc, #300]	@ (800bc38 <dwt_initialise+0x298>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2220      	movs	r2, #32
 800bb14:	4013      	ands	r3, r2
 800bb16:	d007      	beq.n	800bb28 <dwt_initialise+0x188>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 800bb18:	4b47      	ldr	r3, [pc, #284]	@ (800bc38 <dwt_initialise+0x298>)
 800bb1a:	681c      	ldr	r4, [r3, #0]
 800bb1c:	2007      	movs	r0, #7
 800bb1e:	f000 fc5d 	bl	800c3dc <_dwt_otpread>
 800bb22:	0003      	movs	r3, r0
 800bb24:	6063      	str	r3, [r4, #4]
 800bb26:	e003      	b.n	800bb30 <dwt_initialise+0x190>
    }
    else
    {
        pdw1000local->lotID = 0;
 800bb28:	4b43      	ldr	r3, [pc, #268]	@ (800bc38 <dwt_initialise+0x298>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2240      	movs	r2, #64	@ 0x40
 800bb34:	4013      	ands	r3, r2
 800bb36:	d008      	beq.n	800bb4a <dwt_initialise+0x1aa>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 800bb38:	2008      	movs	r0, #8
 800bb3a:	f000 fc4f 	bl	800c3dc <_dwt_otpread>
 800bb3e:	0002      	movs	r2, r0
 800bb40:	4b3d      	ldr	r3, [pc, #244]	@ (800bc38 <dwt_initialise+0x298>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	b2d2      	uxtb	r2, r2
 800bb46:	721a      	strb	r2, [r3, #8]
 800bb48:	e003      	b.n	800bb52 <dwt_initialise+0x1b2>
    }
    else
    {
        pdw1000local->vBatP = 0;
 800bb4a:	4b3b      	ldr	r3, [pc, #236]	@ (800bc38 <dwt_initialise+0x298>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2280      	movs	r2, #128	@ 0x80
 800bb56:	4013      	ands	r3, r2
 800bb58:	d008      	beq.n	800bb6c <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 800bb5a:	2009      	movs	r0, #9
 800bb5c:	f000 fc3e 	bl	800c3dc <_dwt_otpread>
 800bb60:	0002      	movs	r2, r0
 800bb62:	4b35      	ldr	r3, [pc, #212]	@ (800bc38 <dwt_initialise+0x298>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	b2d2      	uxtb	r2, r2
 800bb68:	725a      	strb	r2, [r3, #9]
 800bb6a:	e003      	b.n	800bb74 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 800bb6c:	4b32      	ldr	r3, [pc, #200]	@ (800bc38 <dwt_initialise+0x298>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2200      	movs	r2, #0
 800bb72:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2202      	movs	r2, #2
 800bb78:	4013      	ands	r3, r2
 800bb7a:	d127      	bne.n	800bbcc <dwt_initialise+0x22c>
    {
        if(DWT_LOADUCODE & config)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2201      	movs	r2, #1
 800bb80:	4013      	ands	r3, r2
 800bb82:	d00c      	beq.n	800bb9e <dwt_initialise+0x1fe>
        {
            _dwt_loaducodefromrom();
 800bb84:	f000 fc82 	bl	800c48c <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 800bb88:	4b2b      	ldr	r3, [pc, #172]	@ (800bc38 <dwt_initialise+0x298>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	8ada      	ldrh	r2, [r3, #22]
 800bb8e:	4b2a      	ldr	r3, [pc, #168]	@ (800bc38 <dwt_initialise+0x298>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2180      	movs	r1, #128	@ 0x80
 800bb94:	0109      	lsls	r1, r1, #4
 800bb96:	430a      	orrs	r2, r1
 800bb98:	b292      	uxth	r2, r2
 800bb9a:	82da      	strh	r2, [r3, #22]
 800bb9c:	e024      	b.n	800bbe8 <dwt_initialise+0x248>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 800bb9e:	250e      	movs	r5, #14
 800bba0:	197c      	adds	r4, r7, r5
 800bba2:	2105      	movs	r1, #5
 800bba4:	2036      	movs	r0, #54	@ 0x36
 800bba6:	f000 fb88 	bl	800c2ba <dwt_read16bitoffsetreg>
 800bbaa:	0003      	movs	r3, r0
 800bbac:	8023      	strh	r3, [r4, #0]
            rega &= 0xFDFF ; // Clear LDERUN bit
 800bbae:	0028      	movs	r0, r5
 800bbb0:	183b      	adds	r3, r7, r0
 800bbb2:	183a      	adds	r2, r7, r0
 800bbb4:	8812      	ldrh	r2, [r2, #0]
 800bbb6:	4923      	ldr	r1, [pc, #140]	@ (800bc44 <dwt_initialise+0x2a4>)
 800bbb8:	400a      	ands	r2, r1
 800bbba:	801a      	strh	r2, [r3, #0]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 800bbbc:	183b      	adds	r3, r7, r0
 800bbbe:	881b      	ldrh	r3, [r3, #0]
 800bbc0:	001a      	movs	r2, r3
 800bbc2:	2105      	movs	r1, #5
 800bbc4:	2036      	movs	r0, #54	@ 0x36
 800bbc6:	f000 fbc2 	bl	800c34e <dwt_write16bitoffsetreg>
 800bbca:	e00d      	b.n	800bbe8 <dwt_initialise+0x248>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2204      	movs	r2, #4
 800bbd0:	4013      	ands	r3, r2
 800bbd2:	d109      	bne.n	800bbe8 <dwt_initialise+0x248>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 800bbd4:	4b18      	ldr	r3, [pc, #96]	@ (800bc38 <dwt_initialise+0x298>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	8ada      	ldrh	r2, [r3, #22]
 800bbda:	4b17      	ldr	r3, [pc, #92]	@ (800bc38 <dwt_initialise+0x298>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	2180      	movs	r1, #128	@ 0x80
 800bbe0:	0109      	lsls	r1, r1, #4
 800bbe2:	430a      	orrs	r2, r1
 800bbe4:	b292      	uxth	r2, r2
 800bbe6:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800bbe8:	2001      	movs	r0, #1
 800bbea:	f000 fcb5 	bl	800c558 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 800bbee:	2200      	movs	r2, #0
 800bbf0:	210a      	movs	r1, #10
 800bbf2:	202c      	movs	r0, #44	@ 0x2c
 800bbf4:	f000 fb98 	bl	800c328 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 800bbf8:	4b0f      	ldr	r3, [pc, #60]	@ (800bc38 <dwt_initialise+0x298>)
 800bbfa:	681c      	ldr	r4, [r3, #0]
 800bbfc:	2100      	movs	r1, #0
 800bbfe:	2004      	movs	r0, #4
 800bc00:	f000 fb34 	bl	800c26c <dwt_read32bitoffsetreg>
 800bc04:	0003      	movs	r3, r0
 800bc06:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800bc08:	4b0b      	ldr	r3, [pc, #44]	@ (800bc38 <dwt_initialise+0x298>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	691b      	ldr	r3, [r3, #16]
 800bc0e:	0c1b      	lsrs	r3, r3, #16
 800bc10:	b2da      	uxtb	r2, r3
 800bc12:	4b09      	ldr	r3, [pc, #36]	@ (800bc38 <dwt_initialise+0x298>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	2103      	movs	r1, #3
 800bc18:	400a      	ands	r2, r1
 800bc1a:	b2d2      	uxtb	r2, r2
 800bc1c:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 800bc1e:	4b06      	ldr	r3, [pc, #24]	@ (800bc38 <dwt_initialise+0x298>)
 800bc20:	681c      	ldr	r4, [r3, #0]
 800bc22:	2100      	movs	r1, #0
 800bc24:	2008      	movs	r0, #8
 800bc26:	f000 fb21 	bl	800c26c <dwt_read32bitoffsetreg>
 800bc2a:	0003      	movs	r3, r0
 800bc2c:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 800bc2e:	2300      	movs	r3, #0

} // end dwt_initialise()
 800bc30:	0018      	movs	r0, r3
 800bc32:	46bd      	mov	sp, r7
 800bc34:	b006      	add	sp, #24
 800bc36:	bdb0      	pop	{r4, r5, r7, pc}
 800bc38:	200001bc 	.word	0x200001bc
 800bc3c:	deca0130 	.word	0xdeca0130
 800bc40:	88888888 	.word	0x88888888
 800bc44:	fffffdff 	.word	0xfffffdff

0800bc48 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	2000      	movs	r0, #0
 800bc50:	f000 fb0c 	bl	800c26c <dwt_read32bitoffsetreg>
 800bc54:	0003      	movs	r3, r0
}
 800bc56:	0018      	movs	r0, r3
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 800bc5c:	b5b0      	push	{r4, r5, r7, lr}
 800bc5e:	b086      	sub	sp, #24
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 800bc64:	2317      	movs	r3, #23
 800bc66:	18fb      	adds	r3, r7, r3
 800bc68:	2200      	movs	r2, #0
 800bc6a:	701a      	strb	r2, [r3, #0]
    uint8 useDWnsSFD = 0;
 800bc6c:	2316      	movs	r3, #22
 800bc6e:	18fb      	adds	r3, r7, r3
 800bc70:	2200      	movs	r2, #0
 800bc72:	701a      	strb	r2, [r3, #0]
    uint8 chan = config->chan ;
 800bc74:	2013      	movs	r0, #19
 800bc76:	183b      	adds	r3, r7, r0
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	7812      	ldrb	r2, [r2, #0]
 800bc7c:	701a      	strb	r2, [r3, #0]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	795b      	ldrb	r3, [r3, #5]
 800bc82:	0019      	movs	r1, r3
 800bc84:	2314      	movs	r3, #20
 800bc86:	18fb      	adds	r3, r7, r3
 800bc88:	4ab6      	ldr	r2, [pc, #728]	@ (800bf64 <dwt_configure+0x308>)
 800bc8a:	0049      	lsls	r1, r1, #1
 800bc8c:	5a8a      	ldrh	r2, [r1, r2]
 800bc8e:	801a      	strh	r2, [r3, #0]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	785a      	ldrb	r2, [r3, #1]
 800bc94:	2312      	movs	r3, #18
 800bc96:	18fb      	adds	r3, r7, r3
 800bc98:	3a01      	subs	r2, #1
 800bc9a:	701a      	strb	r2, [r3, #0]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 800bc9c:	183b      	adds	r3, r7, r0
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	2b04      	cmp	r3, #4
 800bca2:	d003      	beq.n	800bcac <dwt_configure+0x50>
 800bca4:	183b      	adds	r3, r7, r0
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	2b07      	cmp	r3, #7
 800bcaa:	d101      	bne.n	800bcb0 <dwt_configure+0x54>
 800bcac:	2201      	movs	r2, #1
 800bcae:	e000      	b.n	800bcb2 <dwt_configure+0x56>
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	2311      	movs	r3, #17
 800bcb4:	18fb      	adds	r3, r7, r3
 800bcb6:	701a      	strb	r2, [r3, #0]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	79db      	ldrb	r3, [r3, #7]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d10f      	bne.n	800bce0 <dwt_configure+0x84>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 800bcc0:	4ba9      	ldr	r3, [pc, #676]	@ (800bf68 <dwt_configure+0x30c>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	691a      	ldr	r2, [r3, #16]
 800bcc6:	4ba8      	ldr	r3, [pc, #672]	@ (800bf68 <dwt_configure+0x30c>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	2180      	movs	r1, #128	@ 0x80
 800bccc:	03c9      	lsls	r1, r1, #15
 800bcce:	430a      	orrs	r2, r1
 800bcd0:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 800bcd2:	2214      	movs	r2, #20
 800bcd4:	18bb      	adds	r3, r7, r2
 800bcd6:	18ba      	adds	r2, r7, r2
 800bcd8:	8812      	ldrh	r2, [r2, #0]
 800bcda:	08d2      	lsrs	r2, r2, #3
 800bcdc:	801a      	strh	r2, [r3, #0]
 800bcde:	e007      	b.n	800bcf0 <dwt_configure+0x94>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 800bce0:	4ba1      	ldr	r3, [pc, #644]	@ (800bf68 <dwt_configure+0x30c>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	691a      	ldr	r2, [r3, #16]
 800bce6:	4ba0      	ldr	r3, [pc, #640]	@ (800bf68 <dwt_configure+0x30c>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	49a0      	ldr	r1, [pc, #640]	@ (800bf6c <dwt_configure+0x310>)
 800bcec:	400a      	ands	r2, r1
 800bcee:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 800bcf0:	4b9d      	ldr	r3, [pc, #628]	@ (800bf68 <dwt_configure+0x30c>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	7a12      	ldrb	r2, [r2, #8]
 800bcf8:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 800bcfa:	4b9b      	ldr	r3, [pc, #620]	@ (800bf68 <dwt_configure+0x30c>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	691a      	ldr	r2, [r3, #16]
 800bd00:	4b99      	ldr	r3, [pc, #612]	@ (800bf68 <dwt_configure+0x30c>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	499a      	ldr	r1, [pc, #616]	@ (800bf70 <dwt_configure+0x314>)
 800bd06:	400a      	ands	r2, r1
 800bd08:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 800bd0a:	4b97      	ldr	r3, [pc, #604]	@ (800bf68 <dwt_configure+0x30c>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	6919      	ldr	r1, [r3, #16]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	7a1b      	ldrb	r3, [r3, #8]
 800bd14:	041a      	lsls	r2, r3, #16
 800bd16:	23c0      	movs	r3, #192	@ 0xc0
 800bd18:	029b      	lsls	r3, r3, #10
 800bd1a:	401a      	ands	r2, r3
 800bd1c:	4b92      	ldr	r3, [pc, #584]	@ (800bf68 <dwt_configure+0x30c>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	430a      	orrs	r2, r1
 800bd22:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 800bd24:	4b90      	ldr	r3, [pc, #576]	@ (800bf68 <dwt_configure+0x30c>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	691b      	ldr	r3, [r3, #16]
 800bd2a:	001a      	movs	r2, r3
 800bd2c:	2100      	movs	r1, #0
 800bd2e:	2004      	movs	r0, #4
 800bd30:	f000 fb2d 	bl	800c38e <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 800bd34:	2314      	movs	r3, #20
 800bd36:	18fb      	adds	r3, r7, r3
 800bd38:	881b      	ldrh	r3, [r3, #0]
 800bd3a:	498e      	ldr	r1, [pc, #568]	@ (800bf74 <dwt_configure+0x318>)
 800bd3c:	001a      	movs	r2, r3
 800bd3e:	202e      	movs	r0, #46	@ 0x2e
 800bd40:	f000 fb05 	bl	800c34e <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 800bd44:	2512      	movs	r5, #18
 800bd46:	197b      	adds	r3, r7, r5
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	0018      	movs	r0, r3
 800bd4c:	f000 fb78 	bl	800c440 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 800bd50:	2413      	movs	r4, #19
 800bd52:	193b      	adds	r3, r7, r4
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	4a88      	ldr	r2, [pc, #544]	@ (800bf78 <dwt_configure+0x31c>)
 800bd58:	5cd3      	ldrb	r3, [r2, r3]
 800bd5a:	001a      	movs	r2, r3
 800bd5c:	4b87      	ldr	r3, [pc, #540]	@ (800bf7c <dwt_configure+0x320>)
 800bd5e:	0092      	lsls	r2, r2, #2
 800bd60:	58d3      	ldr	r3, [r2, r3]
 800bd62:	001a      	movs	r2, r3
 800bd64:	2107      	movs	r1, #7
 800bd66:	202b      	movs	r0, #43	@ 0x2b
 800bd68:	f000 fb11 	bl	800c38e <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 800bd6c:	193b      	adds	r3, r7, r4
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	4a81      	ldr	r2, [pc, #516]	@ (800bf78 <dwt_configure+0x31c>)
 800bd72:	5cd3      	ldrb	r3, [r2, r3]
 800bd74:	001a      	movs	r2, r3
 800bd76:	4b82      	ldr	r3, [pc, #520]	@ (800bf80 <dwt_configure+0x324>)
 800bd78:	5c9b      	ldrb	r3, [r3, r2]
 800bd7a:	001a      	movs	r2, r3
 800bd7c:	210b      	movs	r1, #11
 800bd7e:	202b      	movs	r0, #43	@ 0x2b
 800bd80:	f000 fad2 	bl	800c328 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 800bd84:	2311      	movs	r3, #17
 800bd86:	18fb      	adds	r3, r7, r3
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	4a7e      	ldr	r2, [pc, #504]	@ (800bf84 <dwt_configure+0x328>)
 800bd8c:	5cd3      	ldrb	r3, [r2, r3]
 800bd8e:	001a      	movs	r2, r3
 800bd90:	210b      	movs	r1, #11
 800bd92:	2028      	movs	r0, #40	@ 0x28
 800bd94:	f000 fac8 	bl	800c328 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 800bd98:	193b      	adds	r3, r7, r4
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	4a76      	ldr	r2, [pc, #472]	@ (800bf78 <dwt_configure+0x31c>)
 800bd9e:	5cd3      	ldrb	r3, [r2, r3]
 800bda0:	001a      	movs	r2, r3
 800bda2:	4b79      	ldr	r3, [pc, #484]	@ (800bf88 <dwt_configure+0x32c>)
 800bda4:	0092      	lsls	r2, r2, #2
 800bda6:	58d3      	ldr	r3, [r2, r3]
 800bda8:	001a      	movs	r2, r3
 800bdaa:	210c      	movs	r1, #12
 800bdac:	2028      	movs	r0, #40	@ 0x28
 800bdae:	f000 faee 	bl	800c38e <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	79db      	ldrb	r3, [r3, #7]
 800bdb6:	001a      	movs	r2, r3
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	799b      	ldrb	r3, [r3, #6]
 800bdbc:	0019      	movs	r1, r3
 800bdbe:	4b73      	ldr	r3, [pc, #460]	@ (800bf8c <dwt_configure+0x330>)
 800bdc0:	0052      	lsls	r2, r2, #1
 800bdc2:	1852      	adds	r2, r2, r1
 800bdc4:	0052      	lsls	r2, r2, #1
 800bdc6:	5ad3      	ldrh	r3, [r2, r3]
 800bdc8:	001a      	movs	r2, r3
 800bdca:	2102      	movs	r1, #2
 800bdcc:	2027      	movs	r0, #39	@ 0x27
 800bdce:	f000 fabe 	bl	800c34e <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 800bdd2:	197b      	adds	r3, r7, r5
 800bdd4:	781a      	ldrb	r2, [r3, #0]
 800bdd6:	4b6e      	ldr	r3, [pc, #440]	@ (800bf90 <dwt_configure+0x334>)
 800bdd8:	0052      	lsls	r2, r2, #1
 800bdda:	5ad3      	ldrh	r3, [r2, r3]
 800bddc:	001a      	movs	r2, r3
 800bdde:	2104      	movs	r1, #4
 800bde0:	2027      	movs	r0, #39	@ 0x27
 800bde2:	f000 fab4 	bl	800c34e <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	79db      	ldrb	r3, [r3, #7]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d105      	bne.n	800bdfa <dwt_configure+0x19e>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 800bdee:	2264      	movs	r2, #100	@ 0x64
 800bdf0:	2106      	movs	r1, #6
 800bdf2:	2027      	movs	r0, #39	@ 0x27
 800bdf4:	f000 faab 	bl	800c34e <dwt_write16bitoffsetreg>
 800bdf8:	e018      	b.n	800be2c <dwt_configure+0x1d0>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	789b      	ldrb	r3, [r3, #2]
 800bdfe:	2b04      	cmp	r3, #4
 800be00:	d10a      	bne.n	800be18 <dwt_configure+0x1bc>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 800be02:	2210      	movs	r2, #16
 800be04:	2106      	movs	r1, #6
 800be06:	2027      	movs	r0, #39	@ 0x27
 800be08:	f000 faa1 	bl	800c34e <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 800be0c:	2210      	movs	r2, #16
 800be0e:	2126      	movs	r1, #38	@ 0x26
 800be10:	2027      	movs	r0, #39	@ 0x27
 800be12:	f000 fa89 	bl	800c328 <dwt_write8bitoffsetreg>
 800be16:	e009      	b.n	800be2c <dwt_configure+0x1d0>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 800be18:	2220      	movs	r2, #32
 800be1a:	2106      	movs	r1, #6
 800be1c:	2027      	movs	r0, #39	@ 0x27
 800be1e:	f000 fa96 	bl	800c34e <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 800be22:	2228      	movs	r2, #40	@ 0x28
 800be24:	2126      	movs	r1, #38	@ 0x26
 800be26:	2027      	movs	r0, #39	@ 0x27
 800be28:	f000 fa7e 	bl	800c328 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 800be2c:	2312      	movs	r3, #18
 800be2e:	18fb      	adds	r3, r7, r3
 800be30:	781a      	ldrb	r2, [r3, #0]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	78db      	ldrb	r3, [r3, #3]
 800be36:	0019      	movs	r1, r3
 800be38:	4b56      	ldr	r3, [pc, #344]	@ (800bf94 <dwt_configure+0x338>)
 800be3a:	0092      	lsls	r2, r2, #2
 800be3c:	1852      	adds	r2, r2, r1
 800be3e:	0092      	lsls	r2, r2, #2
 800be40:	58d3      	ldr	r3, [r2, r3]
 800be42:	001a      	movs	r2, r3
 800be44:	2108      	movs	r1, #8
 800be46:	2027      	movs	r0, #39	@ 0x27
 800be48:	f000 faa1 	bl	800c38e <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	895b      	ldrh	r3, [r3, #10]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d102      	bne.n	800be5a <dwt_configure+0x1fe>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	4a50      	ldr	r2, [pc, #320]	@ (800bf98 <dwt_configure+0x33c>)
 800be58:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	895b      	ldrh	r3, [r3, #10]
 800be5e:	001a      	movs	r2, r3
 800be60:	2120      	movs	r1, #32
 800be62:	2027      	movs	r0, #39	@ 0x27
 800be64:	f000 fa73 	bl	800c34e <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 800be68:	4b4c      	ldr	r3, [pc, #304]	@ (800bf9c <dwt_configure+0x340>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	001a      	movs	r2, r3
 800be6e:	210c      	movs	r1, #12
 800be70:	2023      	movs	r0, #35	@ 0x23
 800be72:	f000 fa8c 	bl	800c38e <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 800be76:	2312      	movs	r3, #18
 800be78:	18fb      	adds	r3, r7, r3
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	4a47      	ldr	r2, [pc, #284]	@ (800bf9c <dwt_configure+0x340>)
 800be7e:	005b      	lsls	r3, r3, #1
 800be80:	18d3      	adds	r3, r2, r3
 800be82:	3304      	adds	r3, #4
 800be84:	881b      	ldrh	r3, [r3, #0]
 800be86:	001a      	movs	r2, r3
 800be88:	2104      	movs	r1, #4
 800be8a:	2023      	movs	r0, #35	@ 0x23
 800be8c:	f000 fa5f 	bl	800c34e <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	799b      	ldrb	r3, [r3, #6]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d011      	beq.n	800bebc <dwt_configure+0x260>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	79db      	ldrb	r3, [r3, #7]
 800be9c:	001a      	movs	r2, r3
 800be9e:	4b40      	ldr	r3, [pc, #256]	@ (800bfa0 <dwt_configure+0x344>)
 800bea0:	5c9b      	ldrb	r3, [r3, r2]
 800bea2:	001a      	movs	r2, r3
 800bea4:	2100      	movs	r1, #0
 800bea6:	2021      	movs	r0, #33	@ 0x21
 800bea8:	f000 fa3e 	bl	800c328 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 800beac:	2317      	movs	r3, #23
 800beae:	18fb      	adds	r3, r7, r3
 800beb0:	2203      	movs	r2, #3
 800beb2:	701a      	strb	r2, [r3, #0]
        useDWnsSFD = 1 ;
 800beb4:	2316      	movs	r3, #22
 800beb6:	18fb      	adds	r3, r7, r3
 800beb8:	2201      	movs	r2, #1
 800beba:	701a      	strb	r2, [r3, #0]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800bebc:	2113      	movs	r1, #19
 800bebe:	187b      	adds	r3, r7, r1
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	220f      	movs	r2, #15
 800bec4:	401a      	ands	r2, r3
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800bec6:	187b      	adds	r3, r7, r1
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	011b      	lsls	r3, r3, #4
 800becc:	21ff      	movs	r1, #255	@ 0xff
 800bece:	400b      	ands	r3, r1
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800bed0:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	785b      	ldrb	r3, [r3, #1]
 800bed6:	0499      	lsls	r1, r3, #18
 800bed8:	23c0      	movs	r3, #192	@ 0xc0
 800beda:	031b      	lsls	r3, r3, #12
 800bedc:	400b      	ands	r3, r1
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800bede:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 800bee0:	2317      	movs	r3, #23
 800bee2:	18fb      	adds	r3, r7, r3
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	0519      	lsls	r1, r3, #20
 800bee8:	23c0      	movs	r3, #192	@ 0xc0
 800beea:	039b      	lsls	r3, r3, #14
 800beec:	400b      	ands	r3, r1
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 800beee:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800bef0:	2316      	movs	r3, #22
 800bef2:	18fb      	adds	r3, r7, r3
 800bef4:	781b      	ldrb	r3, [r3, #0]
 800bef6:	0459      	lsls	r1, r3, #17
 800bef8:	2380      	movs	r3, #128	@ 0x80
 800befa:	029b      	lsls	r3, r3, #10
 800befc:	400b      	ands	r3, r1
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 800befe:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	791b      	ldrb	r3, [r3, #4]
 800bf04:	0599      	lsls	r1, r3, #22
 800bf06:	23f8      	movs	r3, #248	@ 0xf8
 800bf08:	04db      	lsls	r3, r3, #19
 800bf0a:	400b      	ands	r3, r1
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800bf0c:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	795b      	ldrb	r3, [r3, #5]
 800bf12:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800bf14:	4313      	orrs	r3, r2
 800bf16:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	001a      	movs	r2, r3
 800bf1c:	2100      	movs	r1, #0
 800bf1e:	201f      	movs	r0, #31
 800bf20:	f000 fa35 	bl	800c38e <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	789a      	ldrb	r2, [r3, #2]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	785b      	ldrb	r3, [r3, #1]
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	b2db      	uxtb	r3, r3
 800bf30:	0419      	lsls	r1, r3, #16
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	79db      	ldrb	r3, [r3, #7]
 800bf36:	035a      	lsls	r2, r3, #13
 800bf38:	4b0b      	ldr	r3, [pc, #44]	@ (800bf68 <dwt_configure+0x30c>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	430a      	orrs	r2, r1
 800bf3e:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 800bf40:	4b09      	ldr	r3, [pc, #36]	@ (800bf68 <dwt_configure+0x30c>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	68db      	ldr	r3, [r3, #12]
 800bf46:	001a      	movs	r2, r3
 800bf48:	2100      	movs	r1, #0
 800bf4a:	2008      	movs	r0, #8
 800bf4c:	f000 fa1f 	bl	800c38e <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 800bf50:	2242      	movs	r2, #66	@ 0x42
 800bf52:	2100      	movs	r1, #0
 800bf54:	200d      	movs	r0, #13
 800bf56:	f000 f9e7 	bl	800c328 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 800bf5a:	46c0      	nop			@ (mov r8, r8)
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	b006      	add	sp, #24
 800bf60:	bdb0      	pop	{r4, r5, r7, pc}
 800bf62:	46c0      	nop			@ (mov r8, r8)
 800bf64:	0800d13c 	.word	0x0800d13c
 800bf68:	200001bc 	.word	0x200001bc
 800bf6c:	ffbfffff 	.word	0xffbfffff
 800bf70:	fffcffff 	.word	0xfffcffff
 800bf74:	00002804 	.word	0x00002804
 800bf78:	0800d0bc 	.word	0x0800d0bc
 800bf7c:	0800d0dc 	.word	0x0800d0dc
 800bf80:	0800d0f4 	.word	0x0800d0f4
 800bf84:	0800d0fc 	.word	0x0800d0fc
 800bf88:	0800d0c4 	.word	0x0800d0c4
 800bf8c:	0800d10c 	.word	0x0800d10c
 800bf90:	0800d118 	.word	0x0800d118
 800bf94:	0800d11c 	.word	0x0800d11c
 800bf98:	00001041 	.word	0x00001041
 800bf9c:	0800d100 	.word	0x0800d100
 800bfa0:	0800d108 	.word	0x0800d108

0800bfa4 <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	0002      	movs	r2, r0
 800bfac:	1dbb      	adds	r3, r7, #6
 800bfae:	801a      	strh	r2, [r3, #0]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 800bfb0:	1dbb      	adds	r3, r7, #6
 800bfb2:	881b      	ldrh	r3, [r3, #0]
 800bfb4:	4904      	ldr	r1, [pc, #16]	@ (800bfc8 <dwt_setrxantennadelay+0x24>)
 800bfb6:	001a      	movs	r2, r3
 800bfb8:	202e      	movs	r0, #46	@ 0x2e
 800bfba:	f000 f9c8 	bl	800c34e <dwt_write16bitoffsetreg>
}
 800bfbe:	46c0      	nop			@ (mov r8, r8)
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	b002      	add	sp, #8
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	46c0      	nop			@ (mov r8, r8)
 800bfc8:	00001804 	.word	0x00001804

0800bfcc <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b082      	sub	sp, #8
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	0002      	movs	r2, r0
 800bfd4:	1dbb      	adds	r3, r7, #6
 800bfd6:	801a      	strh	r2, [r3, #0]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 800bfd8:	1dbb      	adds	r3, r7, #6
 800bfda:	881b      	ldrh	r3, [r3, #0]
 800bfdc:	001a      	movs	r2, r3
 800bfde:	2100      	movs	r1, #0
 800bfe0:	2018      	movs	r0, #24
 800bfe2:	f000 f9b4 	bl	800c34e <dwt_write16bitoffsetreg>
}
 800bfe6:	46c0      	nop			@ (mov r8, r8)
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	b002      	add	sp, #8
 800bfec:	bd80      	pop	{r7, pc}

0800bfee <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 800bfee:	b580      	push	{r7, lr}
 800bff0:	b082      	sub	sp, #8
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6039      	str	r1, [r7, #0]
 800bff6:	0011      	movs	r1, r2
 800bff8:	1dbb      	adds	r3, r7, #6
 800bffa:	1c02      	adds	r2, r0, #0
 800bffc:	801a      	strh	r2, [r3, #0]
 800bffe:	1d3b      	adds	r3, r7, #4
 800c000:	1c0a      	adds	r2, r1, #0
 800c002:	801a      	strh	r2, [r3, #0]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 800c004:	1d3b      	adds	r3, r7, #4
 800c006:	881a      	ldrh	r2, [r3, #0]
 800c008:	1dbb      	adds	r3, r7, #6
 800c00a:	881b      	ldrh	r3, [r3, #0]
 800c00c:	18d2      	adds	r2, r2, r3
 800c00e:	2380      	movs	r3, #128	@ 0x80
 800c010:	00db      	lsls	r3, r3, #3
 800c012:	429a      	cmp	r2, r3
 800c014:	dc0d      	bgt.n	800c032 <dwt_writetxdata+0x44>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 800c016:	1dbb      	adds	r3, r7, #6
 800c018:	881b      	ldrh	r3, [r3, #0]
 800c01a:	3b02      	subs	r3, #2
 800c01c:	0018      	movs	r0, r3
 800c01e:	683a      	ldr	r2, [r7, #0]
 800c020:	1d3b      	adds	r3, r7, #4
 800c022:	8819      	ldrh	r1, [r3, #0]
 800c024:	0013      	movs	r3, r2
 800c026:	0002      	movs	r2, r0
 800c028:	2009      	movs	r0, #9
 800c02a:	f000 f862 	bl	800c0f2 <dwt_writetodevice>
        return DWT_SUCCESS;
 800c02e:	2300      	movs	r3, #0
 800c030:	e001      	b.n	800c036 <dwt_writetxdata+0x48>
    }
    else
    {
        return DWT_ERROR;
 800c032:	2301      	movs	r3, #1
 800c034:	425b      	negs	r3, r3
    }
} // end dwt_writetxdata()
 800c036:	0018      	movs	r0, r3
 800c038:	46bd      	mov	sp, r7
 800c03a:	b002      	add	sp, #8
 800c03c:	bd80      	pop	{r7, pc}
	...

0800c040 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b084      	sub	sp, #16
 800c044:	af00      	add	r7, sp, #0
 800c046:	603a      	str	r2, [r7, #0]
 800c048:	1dbb      	adds	r3, r7, #6
 800c04a:	1c02      	adds	r2, r0, #0
 800c04c:	801a      	strh	r2, [r3, #0]
 800c04e:	1d3b      	adds	r3, r7, #4
 800c050:	1c0a      	adds	r2, r1, #0
 800c052:	801a      	strh	r2, [r3, #0]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 800c054:	4b0b      	ldr	r3, [pc, #44]	@ (800c084 <dwt_writetxfctrl+0x44>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	68da      	ldr	r2, [r3, #12]
 800c05a:	1dbb      	adds	r3, r7, #6
 800c05c:	881b      	ldrh	r3, [r3, #0]
 800c05e:	431a      	orrs	r2, r3
 800c060:	1d3b      	adds	r3, r7, #4
 800c062:	881b      	ldrh	r3, [r3, #0]
 800c064:	059b      	lsls	r3, r3, #22
 800c066:	431a      	orrs	r2, r3
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	03db      	lsls	r3, r3, #15
 800c06c:	4313      	orrs	r3, r2
 800c06e:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	001a      	movs	r2, r3
 800c074:	2100      	movs	r1, #0
 800c076:	2008      	movs	r0, #8
 800c078:	f000 f989 	bl	800c38e <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 800c07c:	46c0      	nop			@ (mov r8, r8)
 800c07e:	46bd      	mov	sp, r7
 800c080:	b004      	add	sp, #16
 800c082:	bd80      	pop	{r7, pc}
 800c084:	200001bc 	.word	0x200001bc

0800c088 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	0008      	movs	r0, r1
 800c092:	0011      	movs	r1, r2
 800c094:	1cbb      	adds	r3, r7, #2
 800c096:	1c02      	adds	r2, r0, #0
 800c098:	801a      	strh	r2, [r3, #0]
 800c09a:	003b      	movs	r3, r7
 800c09c:	1c0a      	adds	r2, r1, #0
 800c09e:	801a      	strh	r2, [r3, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 800c0a0:	1cbb      	adds	r3, r7, #2
 800c0a2:	881a      	ldrh	r2, [r3, #0]
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	003b      	movs	r3, r7
 800c0a8:	8819      	ldrh	r1, [r3, #0]
 800c0aa:	0003      	movs	r3, r0
 800c0ac:	2011      	movs	r0, #17
 800c0ae:	f000 f881 	bl	800c1b4 <dwt_readfromdevice>
}
 800c0b2:	46c0      	nop			@ (mov r8, r8)
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	b002      	add	sp, #8
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <dwt_readtxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readtxtimestamp(uint8 * timestamp)
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b082      	sub	sp, #8
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN, timestamp) ; // Read bytes directly into buffer
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2205      	movs	r2, #5
 800c0c6:	2100      	movs	r1, #0
 800c0c8:	2017      	movs	r0, #23
 800c0ca:	f000 f873 	bl	800c1b4 <dwt_readfromdevice>
}
 800c0ce:	46c0      	nop			@ (mov r8, r8)
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	b002      	add	sp, #8
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 * timestamp)
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b082      	sub	sp, #8
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2205      	movs	r2, #5
 800c0e2:	2100      	movs	r1, #0
 800c0e4:	2015      	movs	r0, #21
 800c0e6:	f000 f865 	bl	800c1b4 <dwt_readfromdevice>
}
 800c0ea:	46c0      	nop			@ (mov r8, r8)
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	b002      	add	sp, #8
 800c0f0:	bd80      	pop	{r7, pc}

0800c0f2 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 800c0f2:	b590      	push	{r4, r7, lr}
 800c0f4:	b087      	sub	sp, #28
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	60ba      	str	r2, [r7, #8]
 800c0fa:	607b      	str	r3, [r7, #4]
 800c0fc:	240e      	movs	r4, #14
 800c0fe:	193b      	adds	r3, r7, r4
 800c100:	1c02      	adds	r2, r0, #0
 800c102:	801a      	strh	r2, [r3, #0]
 800c104:	200c      	movs	r0, #12
 800c106:	183b      	adds	r3, r7, r0
 800c108:	1c0a      	adds	r2, r1, #0
 800c10a:	801a      	strh	r2, [r3, #0]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 800c10c:	2300      	movs	r3, #0
 800c10e:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 800c110:	183b      	adds	r3, r7, r0
 800c112:	881b      	ldrh	r3, [r3, #0]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d10d      	bne.n	800c134 <dwt_writetodevice+0x42>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800c118:	193b      	adds	r3, r7, r4
 800c11a:	881b      	ldrh	r3, [r3, #0]
 800c11c:	b2da      	uxtb	r2, r3
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	1c59      	adds	r1, r3, #1
 800c122:	6179      	str	r1, [r7, #20]
 800c124:	2180      	movs	r1, #128	@ 0x80
 800c126:	4249      	negs	r1, r1
 800c128:	430a      	orrs	r2, r1
 800c12a:	b2d1      	uxtb	r1, r2
 800c12c:	2210      	movs	r2, #16
 800c12e:	18ba      	adds	r2, r7, r2
 800c130:	54d1      	strb	r1, [r2, r3]
 800c132:	e033      	b.n	800c19c <dwt_writetodevice+0xaa>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800c134:	230e      	movs	r3, #14
 800c136:	18fb      	adds	r3, r7, r3
 800c138:	881b      	ldrh	r3, [r3, #0]
 800c13a:	b2da      	uxtb	r2, r3
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	1c59      	adds	r1, r3, #1
 800c140:	6179      	str	r1, [r7, #20]
 800c142:	2140      	movs	r1, #64	@ 0x40
 800c144:	4249      	negs	r1, r1
 800c146:	430a      	orrs	r2, r1
 800c148:	b2d1      	uxtb	r1, r2
 800c14a:	2010      	movs	r0, #16
 800c14c:	183a      	adds	r2, r7, r0
 800c14e:	54d1      	strb	r1, [r2, r3]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800c150:	210c      	movs	r1, #12
 800c152:	187b      	adds	r3, r7, r1
 800c154:	881b      	ldrh	r3, [r3, #0]
 800c156:	2b7f      	cmp	r3, #127	@ 0x7f
 800c158:	d808      	bhi.n	800c16c <dwt_writetodevice+0x7a>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	1c5a      	adds	r2, r3, #1
 800c15e:	617a      	str	r2, [r7, #20]
 800c160:	187a      	adds	r2, r7, r1
 800c162:	8812      	ldrh	r2, [r2, #0]
 800c164:	b2d1      	uxtb	r1, r2
 800c166:	183a      	adds	r2, r7, r0
 800c168:	54d1      	strb	r1, [r2, r3]
 800c16a:	e017      	b.n	800c19c <dwt_writetodevice+0xaa>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800c16c:	200c      	movs	r0, #12
 800c16e:	183b      	adds	r3, r7, r0
 800c170:	881b      	ldrh	r3, [r3, #0]
 800c172:	b2da      	uxtb	r2, r3
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	1c59      	adds	r1, r3, #1
 800c178:	6179      	str	r1, [r7, #20]
 800c17a:	2180      	movs	r1, #128	@ 0x80
 800c17c:	4249      	negs	r1, r1
 800c17e:	430a      	orrs	r2, r1
 800c180:	b2d1      	uxtb	r1, r2
 800c182:	2410      	movs	r4, #16
 800c184:	193a      	adds	r2, r7, r4
 800c186:	54d1      	strb	r1, [r2, r3]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800c188:	183b      	adds	r3, r7, r0
 800c18a:	881b      	ldrh	r3, [r3, #0]
 800c18c:	09db      	lsrs	r3, r3, #7
 800c18e:	b299      	uxth	r1, r3
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	1c5a      	adds	r2, r3, #1
 800c194:	617a      	str	r2, [r7, #20]
 800c196:	b2c9      	uxtb	r1, r1
 800c198:	193a      	adds	r2, r7, r4
 800c19a:	54d1      	strb	r1, [r2, r3]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	b298      	uxth	r0, r3
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	68ba      	ldr	r2, [r7, #8]
 800c1a4:	2110      	movs	r1, #16
 800c1a6:	1879      	adds	r1, r7, r1
 800c1a8:	f000 fc68 	bl	800ca7c <writetospi>
} // end dwt_writetodevice()
 800c1ac:	46c0      	nop			@ (mov r8, r8)
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	b007      	add	sp, #28
 800c1b2:	bd90      	pop	{r4, r7, pc}

0800c1b4 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 800c1b4:	b590      	push	{r4, r7, lr}
 800c1b6:	b087      	sub	sp, #28
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60ba      	str	r2, [r7, #8]
 800c1bc:	607b      	str	r3, [r7, #4]
 800c1be:	240e      	movs	r4, #14
 800c1c0:	193b      	adds	r3, r7, r4
 800c1c2:	1c02      	adds	r2, r0, #0
 800c1c4:	801a      	strh	r2, [r3, #0]
 800c1c6:	200c      	movs	r0, #12
 800c1c8:	183b      	adds	r3, r7, r0
 800c1ca:	1c0a      	adds	r2, r1, #0
 800c1cc:	801a      	strh	r2, [r3, #0]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 800c1d2:	183b      	adds	r3, r7, r0
 800c1d4:	881b      	ldrh	r3, [r3, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d109      	bne.n	800c1ee <dwt_readfromdevice+0x3a>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	1c5a      	adds	r2, r3, #1
 800c1de:	617a      	str	r2, [r7, #20]
 800c1e0:	193a      	adds	r2, r7, r4
 800c1e2:	8812      	ldrh	r2, [r2, #0]
 800c1e4:	b2d1      	uxtb	r1, r2
 800c1e6:	2210      	movs	r2, #16
 800c1e8:	18ba      	adds	r2, r7, r2
 800c1ea:	54d1      	strb	r1, [r2, r3]
 800c1ec:	e032      	b.n	800c254 <dwt_readfromdevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800c1ee:	230e      	movs	r3, #14
 800c1f0:	18fb      	adds	r3, r7, r3
 800c1f2:	881b      	ldrh	r3, [r3, #0]
 800c1f4:	b2da      	uxtb	r2, r3
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	1c59      	adds	r1, r3, #1
 800c1fa:	6179      	str	r1, [r7, #20]
 800c1fc:	2140      	movs	r1, #64	@ 0x40
 800c1fe:	430a      	orrs	r2, r1
 800c200:	b2d1      	uxtb	r1, r2
 800c202:	2010      	movs	r0, #16
 800c204:	183a      	adds	r2, r7, r0
 800c206:	54d1      	strb	r1, [r2, r3]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800c208:	210c      	movs	r1, #12
 800c20a:	187b      	adds	r3, r7, r1
 800c20c:	881b      	ldrh	r3, [r3, #0]
 800c20e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c210:	d808      	bhi.n	800c224 <dwt_readfromdevice+0x70>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	1c5a      	adds	r2, r3, #1
 800c216:	617a      	str	r2, [r7, #20]
 800c218:	187a      	adds	r2, r7, r1
 800c21a:	8812      	ldrh	r2, [r2, #0]
 800c21c:	b2d1      	uxtb	r1, r2
 800c21e:	183a      	adds	r2, r7, r0
 800c220:	54d1      	strb	r1, [r2, r3]
 800c222:	e017      	b.n	800c254 <dwt_readfromdevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800c224:	200c      	movs	r0, #12
 800c226:	183b      	adds	r3, r7, r0
 800c228:	881b      	ldrh	r3, [r3, #0]
 800c22a:	b2da      	uxtb	r2, r3
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	1c59      	adds	r1, r3, #1
 800c230:	6179      	str	r1, [r7, #20]
 800c232:	2180      	movs	r1, #128	@ 0x80
 800c234:	4249      	negs	r1, r1
 800c236:	430a      	orrs	r2, r1
 800c238:	b2d1      	uxtb	r1, r2
 800c23a:	2410      	movs	r4, #16
 800c23c:	193a      	adds	r2, r7, r4
 800c23e:	54d1      	strb	r1, [r2, r3]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800c240:	183b      	adds	r3, r7, r0
 800c242:	881b      	ldrh	r3, [r3, #0]
 800c244:	09db      	lsrs	r3, r3, #7
 800c246:	b299      	uxth	r1, r3
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	1c5a      	adds	r2, r3, #1
 800c24c:	617a      	str	r2, [r7, #20]
 800c24e:	b2c9      	uxtb	r1, r1
 800c250:	193a      	adds	r2, r7, r4
 800c252:	54d1      	strb	r1, [r2, r3]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	b298      	uxth	r0, r3
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	68ba      	ldr	r2, [r7, #8]
 800c25c:	2110      	movs	r1, #16
 800c25e:	1879      	adds	r1, r7, r1
 800c260:	f000 fc44 	bl	800caec <readfromspi>
} // end dwt_readfromdevice()
 800c264:	46c0      	nop			@ (mov r8, r8)
 800c266:	46bd      	mov	sp, r7
 800c268:	b007      	add	sp, #28
 800c26a:	bd90      	pop	{r4, r7, pc}

0800c26c <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b086      	sub	sp, #24
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 800c276:	2300      	movs	r3, #0
 800c278:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	b298      	uxth	r0, r3
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	b299      	uxth	r1, r3
 800c282:	230c      	movs	r3, #12
 800c284:	18fb      	adds	r3, r7, r3
 800c286:	2204      	movs	r2, #4
 800c288:	f7ff ff94 	bl	800c1b4 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 800c28c:	2303      	movs	r3, #3
 800c28e:	613b      	str	r3, [r7, #16]
 800c290:	e00b      	b.n	800c2aa <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	021b      	lsls	r3, r3, #8
 800c296:	220c      	movs	r2, #12
 800c298:	18b9      	adds	r1, r7, r2
 800c29a:	693a      	ldr	r2, [r7, #16]
 800c29c:	188a      	adds	r2, r1, r2
 800c29e:	7812      	ldrb	r2, [r2, #0]
 800c2a0:	189b      	adds	r3, r3, r2
 800c2a2:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	3b01      	subs	r3, #1
 800c2a8:	613b      	str	r3, [r7, #16]
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	daf0      	bge.n	800c292 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 800c2b0:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 800c2b2:	0018      	movs	r0, r3
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	b006      	add	sp, #24
 800c2b8:	bd80      	pop	{r7, pc}

0800c2ba <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 800c2ba:	b5b0      	push	{r4, r5, r7, lr}
 800c2bc:	b084      	sub	sp, #16
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	6078      	str	r0, [r7, #4]
 800c2c2:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 800c2c4:	240e      	movs	r4, #14
 800c2c6:	193b      	adds	r3, r7, r4
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	801a      	strh	r2, [r3, #0]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	b298      	uxth	r0, r3
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	b299      	uxth	r1, r3
 800c2d4:	250c      	movs	r5, #12
 800c2d6:	197b      	adds	r3, r7, r5
 800c2d8:	2202      	movs	r2, #2
 800c2da:	f7ff ff6b 	bl	800c1b4 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 800c2de:	0029      	movs	r1, r5
 800c2e0:	187b      	adds	r3, r7, r1
 800c2e2:	785b      	ldrb	r3, [r3, #1]
 800c2e4:	021b      	lsls	r3, r3, #8
 800c2e6:	b29a      	uxth	r2, r3
 800c2e8:	187b      	adds	r3, r7, r1
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	0019      	movs	r1, r3
 800c2ee:	193b      	adds	r3, r7, r4
 800c2f0:	1852      	adds	r2, r2, r1
 800c2f2:	801a      	strh	r2, [r3, #0]
    return regval ;
 800c2f4:	193b      	adds	r3, r7, r4
 800c2f6:	881b      	ldrh	r3, [r3, #0]

} // end dwt_read16bitoffsetreg()
 800c2f8:	0018      	movs	r0, r3
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	b004      	add	sp, #16
 800c2fe:	bdb0      	pop	{r4, r5, r7, pc}

0800c300 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 800c300:	b590      	push	{r4, r7, lr}
 800c302:	b085      	sub	sp, #20
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	b298      	uxth	r0, r3
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	b299      	uxth	r1, r3
 800c312:	240f      	movs	r4, #15
 800c314:	193b      	adds	r3, r7, r4
 800c316:	2201      	movs	r2, #1
 800c318:	f7ff ff4c 	bl	800c1b4 <dwt_readfromdevice>

    return regval ;
 800c31c:	193b      	adds	r3, r7, r4
 800c31e:	781b      	ldrb	r3, [r3, #0]
}
 800c320:	0018      	movs	r0, r3
 800c322:	46bd      	mov	sp, r7
 800c324:	b005      	add	sp, #20
 800c326:	bd90      	pop	{r4, r7, pc}

0800c328 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b084      	sub	sp, #16
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	1dfb      	adds	r3, r7, #7
 800c334:	701a      	strb	r2, [r3, #0]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	b298      	uxth	r0, r3
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	b299      	uxth	r1, r3
 800c33e:	1dfb      	adds	r3, r7, #7
 800c340:	2201      	movs	r2, #1
 800c342:	f7ff fed6 	bl	800c0f2 <dwt_writetodevice>
}
 800c346:	46c0      	nop			@ (mov r8, r8)
 800c348:	46bd      	mov	sp, r7
 800c34a:	b004      	add	sp, #16
 800c34c:	bd80      	pop	{r7, pc}

0800c34e <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 800c34e:	b590      	push	{r4, r7, lr}
 800c350:	b087      	sub	sp, #28
 800c352:	af00      	add	r7, sp, #0
 800c354:	60f8      	str	r0, [r7, #12]
 800c356:	60b9      	str	r1, [r7, #8]
 800c358:	1dbb      	adds	r3, r7, #6
 800c35a:	801a      	strh	r2, [r3, #0]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 800c35c:	1dbb      	adds	r3, r7, #6
 800c35e:	881b      	ldrh	r3, [r3, #0]
 800c360:	b2da      	uxtb	r2, r3
 800c362:	2414      	movs	r4, #20
 800c364:	193b      	adds	r3, r7, r4
 800c366:	701a      	strb	r2, [r3, #0]
    buffer[1] = regval >> 8 ;
 800c368:	1dbb      	adds	r3, r7, #6
 800c36a:	881b      	ldrh	r3, [r3, #0]
 800c36c:	0a1b      	lsrs	r3, r3, #8
 800c36e:	b29b      	uxth	r3, r3
 800c370:	b2da      	uxtb	r2, r3
 800c372:	193b      	adds	r3, r7, r4
 800c374:	705a      	strb	r2, [r3, #1]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	b298      	uxth	r0, r3
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	b299      	uxth	r1, r3
 800c37e:	193b      	adds	r3, r7, r4
 800c380:	2202      	movs	r2, #2
 800c382:	f7ff feb6 	bl	800c0f2 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 800c386:	46c0      	nop			@ (mov r8, r8)
 800c388:	46bd      	mov	sp, r7
 800c38a:	b007      	add	sp, #28
 800c38c:	bd90      	pop	{r4, r7, pc}

0800c38e <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 800c38e:	b580      	push	{r7, lr}
 800c390:	b086      	sub	sp, #24
 800c392:	af00      	add	r7, sp, #0
 800c394:	60f8      	str	r0, [r7, #12]
 800c396:	60b9      	str	r1, [r7, #8]
 800c398:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 800c39a:	2300      	movs	r3, #0
 800c39c:	617b      	str	r3, [r7, #20]
 800c39e:	e00d      	b.n	800c3bc <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	b2d9      	uxtb	r1, r3
 800c3a4:	2310      	movs	r3, #16
 800c3a6:	18fa      	adds	r2, r7, r3
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	18d3      	adds	r3, r2, r3
 800c3ac:	1c0a      	adds	r2, r1, #0
 800c3ae:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	0a1b      	lsrs	r3, r3, #8
 800c3b4:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	617b      	str	r3, [r7, #20]
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	2b03      	cmp	r3, #3
 800c3c0:	ddee      	ble.n	800c3a0 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	b298      	uxth	r0, r3
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	b299      	uxth	r1, r3
 800c3ca:	2310      	movs	r3, #16
 800c3cc:	18fb      	adds	r3, r7, r3
 800c3ce:	2204      	movs	r2, #4
 800c3d0:	f7ff fe8f 	bl	800c0f2 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 800c3d4:	46c0      	nop			@ (mov r8, r8)
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	b006      	add	sp, #24
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	0002      	movs	r2, r0
 800c3e4:	1dbb      	adds	r3, r7, #6
 800c3e6:	801a      	strh	r2, [r3, #0]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 800c3e8:	1dbb      	adds	r3, r7, #6
 800c3ea:	881b      	ldrh	r3, [r3, #0]
 800c3ec:	001a      	movs	r2, r3
 800c3ee:	2104      	movs	r1, #4
 800c3f0:	202d      	movs	r0, #45	@ 0x2d
 800c3f2:	f7ff ffac 	bl	800c34e <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 800c3f6:	2203      	movs	r2, #3
 800c3f8:	2106      	movs	r1, #6
 800c3fa:	202d      	movs	r0, #45	@ 0x2d
 800c3fc:	f7ff ff94 	bl	800c328 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 800c400:	2200      	movs	r2, #0
 800c402:	2106      	movs	r1, #6
 800c404:	202d      	movs	r0, #45	@ 0x2d
 800c406:	f7ff ff8f 	bl	800c328 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 800c40a:	210a      	movs	r1, #10
 800c40c:	202d      	movs	r0, #45	@ 0x2d
 800c40e:	f7ff ff2d 	bl	800c26c <dwt_read32bitoffsetreg>
 800c412:	0003      	movs	r3, r0
 800c414:	60fb      	str	r3, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 800c416:	68fb      	ldr	r3, [r7, #12]
}
 800c418:	0018      	movs	r0, r3
 800c41a:	46bd      	mov	sp, r7
 800c41c:	b004      	add	sp, #16
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 800c424:	2200      	movs	r2, #0
 800c426:	2102      	movs	r1, #2
 800c428:	202c      	movs	r0, #44	@ 0x2c
 800c42a:	f7ff ff7d 	bl	800c328 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 800c42e:	2202      	movs	r2, #2
 800c430:	2102      	movs	r1, #2
 800c432:	202c      	movs	r0, #44	@ 0x2c
 800c434:	f7ff ff78 	bl	800c328 <dwt_write8bitoffsetreg>
}
 800c438:	46c0      	nop			@ (mov r8, r8)
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
	...

0800c440 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 800c448:	4b0c      	ldr	r3, [pc, #48]	@ (800c47c <_dwt_configlde+0x3c>)
 800c44a:	226d      	movs	r2, #109	@ 0x6d
 800c44c:	0019      	movs	r1, r3
 800c44e:	202e      	movs	r0, #46	@ 0x2e
 800c450:	f7ff ff6a 	bl	800c328 <dwt_write8bitoffsetreg>

    if(prfIndex)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d006      	beq.n	800c468 <_dwt_configlde+0x28>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 800c45a:	4a09      	ldr	r2, [pc, #36]	@ (800c480 <_dwt_configlde+0x40>)
 800c45c:	4b09      	ldr	r3, [pc, #36]	@ (800c484 <_dwt_configlde+0x44>)
 800c45e:	0019      	movs	r1, r3
 800c460:	202e      	movs	r0, #46	@ 0x2e
 800c462:	f7ff ff74 	bl	800c34e <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 800c466:	e005      	b.n	800c474 <_dwt_configlde+0x34>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 800c468:	4a07      	ldr	r2, [pc, #28]	@ (800c488 <_dwt_configlde+0x48>)
 800c46a:	4b06      	ldr	r3, [pc, #24]	@ (800c484 <_dwt_configlde+0x44>)
 800c46c:	0019      	movs	r1, r3
 800c46e:	202e      	movs	r0, #46	@ 0x2e
 800c470:	f7ff ff6d 	bl	800c34e <dwt_write16bitoffsetreg>
}
 800c474:	46c0      	nop			@ (mov r8, r8)
 800c476:	46bd      	mov	sp, r7
 800c478:	b002      	add	sp, #8
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	00000806 	.word	0x00000806
 800c480:	00000607 	.word	0x00000607
 800c484:	00001806 	.word	0x00001806
 800c488:	00001607 	.word	0x00001607

0800c48c <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 800c490:	200e      	movs	r0, #14
 800c492:	f000 f861 	bl	800c558 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 800c496:	2380      	movs	r3, #128	@ 0x80
 800c498:	021b      	lsls	r3, r3, #8
 800c49a:	001a      	movs	r2, r3
 800c49c:	2106      	movs	r1, #6
 800c49e:	202d      	movs	r0, #45	@ 0x2d
 800c4a0:	f7ff ff55 	bl	800c34e <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 800c4a4:	2001      	movs	r0, #1
 800c4a6:	f000 fadc 	bl	800ca62 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800c4aa:	2001      	movs	r0, #1
 800c4ac:	f000 f854 	bl	800c558 <_dwt_enableclocks>
}
 800c4b0:	46c0      	nop			@ (mov r8, r8)
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
	...

0800c4b8 <dwt_setdblrxbuffmode>:
 * output parameters
 *
 * no return value
 */
void dwt_setdblrxbuffmode(int enable)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
    if(enable)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d00c      	beq.n	800c4e0 <dwt_setdblrxbuffmode+0x28>
    {
        // Enable double RX buffer mode
        pdw1000local->sysCFGreg &= ~SYS_CFG_DIS_DRXB;
 800c4c6:	4b13      	ldr	r3, [pc, #76]	@ (800c514 <dwt_setdblrxbuffmode+0x5c>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	691a      	ldr	r2, [r3, #16]
 800c4cc:	4b11      	ldr	r3, [pc, #68]	@ (800c514 <dwt_setdblrxbuffmode+0x5c>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4911      	ldr	r1, [pc, #68]	@ (800c518 <dwt_setdblrxbuffmode+0x60>)
 800c4d2:	400a      	ands	r2, r1
 800c4d4:	611a      	str	r2, [r3, #16]
        pdw1000local->dblbuffon = 1;
 800c4d6:	4b0f      	ldr	r3, [pc, #60]	@ (800c514 <dwt_setdblrxbuffmode+0x5c>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	2201      	movs	r2, #1
 800c4dc:	751a      	strb	r2, [r3, #20]
 800c4de:	e00c      	b.n	800c4fa <dwt_setdblrxbuffmode+0x42>
    }
    else
    {
        // Disable double RX buffer mode
        pdw1000local->sysCFGreg |= SYS_CFG_DIS_DRXB;
 800c4e0:	4b0c      	ldr	r3, [pc, #48]	@ (800c514 <dwt_setdblrxbuffmode+0x5c>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	691a      	ldr	r2, [r3, #16]
 800c4e6:	4b0b      	ldr	r3, [pc, #44]	@ (800c514 <dwt_setdblrxbuffmode+0x5c>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	2180      	movs	r1, #128	@ 0x80
 800c4ec:	0149      	lsls	r1, r1, #5
 800c4ee:	430a      	orrs	r2, r1
 800c4f0:	611a      	str	r2, [r3, #16]
        pdw1000local->dblbuffon = 0;
 800c4f2:	4b08      	ldr	r3, [pc, #32]	@ (800c514 <dwt_setdblrxbuffmode+0x5c>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	751a      	strb	r2, [r3, #20]
    }

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 800c4fa:	4b06      	ldr	r3, [pc, #24]	@ (800c514 <dwt_setdblrxbuffmode+0x5c>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	691b      	ldr	r3, [r3, #16]
 800c500:	001a      	movs	r2, r3
 800c502:	2100      	movs	r1, #0
 800c504:	2004      	movs	r0, #4
 800c506:	f7ff ff42 	bl	800c38e <dwt_write32bitoffsetreg>
}
 800c50a:	46c0      	nop			@ (mov r8, r8)
 800c50c:	46bd      	mov	sp, r7
 800c50e:	b002      	add	sp, #8
 800c510:	bd80      	pop	{r7, pc}
 800c512:	46c0      	nop			@ (mov r8, r8)
 800c514:	200001bc 	.word	0x200001bc
 800c518:	ffffefff 	.word	0xffffefff

0800c51c <dwt_setrxaftertxdelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32 rxDelayTime)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 800c524:	2100      	movs	r1, #0
 800c526:	201a      	movs	r0, #26
 800c528:	f7ff fea0 	bl	800c26c <dwt_read32bitoffsetreg>
 800c52c:	0003      	movs	r3, r0
 800c52e:	60fb      	str	r3, [r7, #12]

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	0d1b      	lsrs	r3, r3, #20
 800c534:	051b      	lsls	r3, r3, #20
 800c536:	60fb      	str	r3, [r7, #12]

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	031b      	lsls	r3, r3, #12
 800c53c:	0b1b      	lsrs	r3, r3, #12
 800c53e:	68fa      	ldr	r2, [r7, #12]
 800c540:	4313      	orrs	r3, r2
 800c542:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	001a      	movs	r2, r3
 800c548:	2100      	movs	r1, #0
 800c54a:	201a      	movs	r0, #26
 800c54c:	f7ff ff1f 	bl	800c38e <dwt_write32bitoffsetreg>
}
 800c550:	46c0      	nop			@ (mov r8, r8)
 800c552:	46bd      	mov	sp, r7
 800c554:	b004      	add	sp, #16
 800c556:	bd80      	pop	{r7, pc}

0800c558 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 800c558:	b590      	push	{r4, r7, lr}
 800c55a:	b085      	sub	sp, #20
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 800c560:	230c      	movs	r3, #12
 800c562:	18fb      	adds	r3, r7, r3
 800c564:	2202      	movs	r2, #2
 800c566:	2100      	movs	r1, #0
 800c568:	2036      	movs	r0, #54	@ 0x36
 800c56a:	f7ff fe23 	bl	800c1b4 <dwt_readfromdevice>
    switch(clocks)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2b0e      	cmp	r3, #14
 800c572:	d900      	bls.n	800c576 <_dwt_enableclocks+0x1e>
 800c574:	e07b      	b.n	800c66e <_dwt_enableclocks+0x116>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	009a      	lsls	r2, r3, #2
 800c57a:	4b46      	ldr	r3, [pc, #280]	@ (800c694 <_dwt_enableclocks+0x13c>)
 800c57c:	18d3      	adds	r3, r2, r3
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	469f      	mov	pc, r3
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 800c582:	210c      	movs	r1, #12
 800c584:	187b      	adds	r3, r7, r1
 800c586:	2200      	movs	r2, #0
 800c588:	701a      	strb	r2, [r3, #0]
            reg[1] = reg[1] & 0xfe;
 800c58a:	187b      	adds	r3, r7, r1
 800c58c:	785b      	ldrb	r3, [r3, #1]
 800c58e:	2201      	movs	r2, #1
 800c590:	4393      	bics	r3, r2
 800c592:	b2da      	uxtb	r2, r3
 800c594:	187b      	adds	r3, r7, r1
 800c596:	705a      	strb	r2, [r3, #1]
        }
        break;
 800c598:	e06a      	b.n	800c670 <_dwt_enableclocks+0x118>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 800c59a:	210c      	movs	r1, #12
 800c59c:	187b      	adds	r3, r7, r1
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	b25b      	sxtb	r3, r3
 800c5a2:	2203      	movs	r2, #3
 800c5a4:	4393      	bics	r3, r2
 800c5a6:	b25b      	sxtb	r3, r3
 800c5a8:	2201      	movs	r2, #1
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	b25b      	sxtb	r3, r3
 800c5ae:	b2da      	uxtb	r2, r3
 800c5b0:	187b      	adds	r3, r7, r1
 800c5b2:	701a      	strb	r2, [r3, #0]
        }
        break;
 800c5b4:	e05c      	b.n	800c670 <_dwt_enableclocks+0x118>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 800c5b6:	210c      	movs	r1, #12
 800c5b8:	187b      	adds	r3, r7, r1
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	b25b      	sxtb	r3, r3
 800c5be:	2203      	movs	r2, #3
 800c5c0:	4393      	bics	r3, r2
 800c5c2:	b25b      	sxtb	r3, r3
 800c5c4:	2202      	movs	r2, #2
 800c5c6:	4313      	orrs	r3, r2
 800c5c8:	b25b      	sxtb	r3, r3
 800c5ca:	b2da      	uxtb	r2, r3
 800c5cc:	187b      	adds	r3, r7, r1
 800c5ce:	701a      	strb	r2, [r3, #0]
        }
        break;
 800c5d0:	e04e      	b.n	800c670 <_dwt_enableclocks+0x118>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 800c5d2:	210c      	movs	r1, #12
 800c5d4:	187b      	adds	r3, r7, r1
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	b25b      	sxtb	r3, r3
 800c5da:	224c      	movs	r2, #76	@ 0x4c
 800c5dc:	4393      	bics	r3, r2
 800c5de:	b25b      	sxtb	r3, r3
 800c5e0:	2248      	movs	r2, #72	@ 0x48
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	b25b      	sxtb	r3, r3
 800c5e6:	b2da      	uxtb	r2, r3
 800c5e8:	187b      	adds	r3, r7, r1
 800c5ea:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x80 | reg[1];
 800c5ec:	187b      	adds	r3, r7, r1
 800c5ee:	785b      	ldrb	r3, [r3, #1]
 800c5f0:	2280      	movs	r2, #128	@ 0x80
 800c5f2:	4252      	negs	r2, r2
 800c5f4:	4313      	orrs	r3, r2
 800c5f6:	b2da      	uxtb	r2, r3
 800c5f8:	187b      	adds	r3, r7, r1
 800c5fa:	705a      	strb	r2, [r3, #1]
        }
        break;
 800c5fc:	e038      	b.n	800c670 <_dwt_enableclocks+0x118>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 800c5fe:	210c      	movs	r1, #12
 800c600:	187b      	adds	r3, r7, r1
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	224c      	movs	r2, #76	@ 0x4c
 800c606:	4393      	bics	r3, r2
 800c608:	b2da      	uxtb	r2, r3
 800c60a:	187b      	adds	r3, r7, r1
 800c60c:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x7f & reg[1];
 800c60e:	187b      	adds	r3, r7, r1
 800c610:	785b      	ldrb	r3, [r3, #1]
 800c612:	227f      	movs	r2, #127	@ 0x7f
 800c614:	4013      	ands	r3, r2
 800c616:	b2da      	uxtb	r2, r3
 800c618:	187b      	adds	r3, r7, r1
 800c61a:	705a      	strb	r2, [r3, #1]
        }
        break;
 800c61c:	e028      	b.n	800c670 <_dwt_enableclocks+0x118>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 800c61e:	210c      	movs	r1, #12
 800c620:	187b      	adds	r3, r7, r1
 800c622:	785b      	ldrb	r3, [r3, #1]
 800c624:	2202      	movs	r2, #2
 800c626:	4313      	orrs	r3, r2
 800c628:	b2da      	uxtb	r2, r3
 800c62a:	187b      	adds	r3, r7, r1
 800c62c:	705a      	strb	r2, [r3, #1]
        }
        break;
 800c62e:	e01f      	b.n	800c670 <_dwt_enableclocks+0x118>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 800c630:	210c      	movs	r1, #12
 800c632:	187b      	adds	r3, r7, r1
 800c634:	785b      	ldrb	r3, [r3, #1]
 800c636:	2202      	movs	r2, #2
 800c638:	4393      	bics	r3, r2
 800c63a:	b2da      	uxtb	r2, r3
 800c63c:	187b      	adds	r3, r7, r1
 800c63e:	705a      	strb	r2, [r3, #1]
        }
        break;
 800c640:	e016      	b.n	800c670 <_dwt_enableclocks+0x118>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 800c642:	210c      	movs	r1, #12
 800c644:	187b      	adds	r3, r7, r1
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	b25b      	sxtb	r3, r3
 800c64a:	2230      	movs	r2, #48	@ 0x30
 800c64c:	4393      	bics	r3, r2
 800c64e:	b25b      	sxtb	r3, r3
 800c650:	2220      	movs	r2, #32
 800c652:	4313      	orrs	r3, r2
 800c654:	b25b      	sxtb	r3, r3
 800c656:	b2da      	uxtb	r2, r3
 800c658:	187b      	adds	r3, r7, r1
 800c65a:	701a      	strb	r2, [r3, #0]
        }
        break;
 800c65c:	e008      	b.n	800c670 <_dwt_enableclocks+0x118>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 800c65e:	210c      	movs	r1, #12
 800c660:	187b      	adds	r3, r7, r1
 800c662:	2201      	movs	r2, #1
 800c664:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x03;
 800c666:	187b      	adds	r3, r7, r1
 800c668:	2203      	movs	r2, #3
 800c66a:	705a      	strb	r2, [r3, #1]
        }
        break;
 800c66c:	e000      	b.n	800c670 <_dwt_enableclocks+0x118>
        default:
        break;
 800c66e:	46c0      	nop			@ (mov r8, r8)
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 800c670:	240c      	movs	r4, #12
 800c672:	193b      	adds	r3, r7, r4
 800c674:	2201      	movs	r2, #1
 800c676:	2100      	movs	r1, #0
 800c678:	2036      	movs	r0, #54	@ 0x36
 800c67a:	f7ff fd3a 	bl	800c0f2 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 800c67e:	193b      	adds	r3, r7, r4
 800c680:	3301      	adds	r3, #1
 800c682:	2201      	movs	r2, #1
 800c684:	2101      	movs	r1, #1
 800c686:	2036      	movs	r0, #54	@ 0x36
 800c688:	f7ff fd33 	bl	800c0f2 <dwt_writetodevice>

} // end _dwt_enableclocks()
 800c68c:	46c0      	nop			@ (mov r8, r8)
 800c68e:	46bd      	mov	sp, r7
 800c690:	b005      	add	sp, #20
 800c692:	bd90      	pop	{r4, r7, pc}
 800c694:	0800d080 	.word	0x0800d080

0800c698 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 800c69c:	2000      	movs	r0, #0
 800c69e:	f7ff ff5b 	bl	800c558 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	2104      	movs	r1, #4
 800c6a6:	2036      	movs	r0, #54	@ 0x36
 800c6a8:	f7ff fe51 	bl	800c34e <dwt_write16bitoffsetreg>
}
 800c6ac:	46c0      	nop			@ (mov r8, r8)
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}

0800c6b2 <dwt_setdelayedtrxtime>:
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32 starttime)
{
 800c6b2:	b580      	push	{r7, lr}
 800c6b4:	b082      	sub	sp, #8
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	6078      	str	r0, [r7, #4]
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	001a      	movs	r2, r3
 800c6be:	2101      	movs	r1, #1
 800c6c0:	200a      	movs	r0, #10
 800c6c2:	f7ff fe64 	bl	800c38e <dwt_write32bitoffsetreg>

} // end dwt_setdelayedtrxtime()
 800c6c6:	46c0      	nop			@ (mov r8, r8)
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	b002      	add	sp, #8
 800c6cc:	bd80      	pop	{r7, pc}
	...

0800c6d0 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 800c6d0:	b5b0      	push	{r4, r5, r7, lr}
 800c6d2:	b084      	sub	sp, #16
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	0002      	movs	r2, r0
 800c6d8:	1dfb      	adds	r3, r7, #7
 800c6da:	701a      	strb	r2, [r3, #0]
    int retval = DWT_SUCCESS ;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 800c6e0:	210b      	movs	r1, #11
 800c6e2:	187b      	adds	r3, r7, r1
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	701a      	strb	r2, [r3, #0]
    uint16 checkTxOK = 0 ;
 800c6e8:	2308      	movs	r3, #8
 800c6ea:	18fb      	adds	r3, r7, r3
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	801a      	strh	r2, [r3, #0]

    if(mode & DWT_RESPONSE_EXPECTED)
 800c6f0:	1dfb      	adds	r3, r7, #7
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	2202      	movs	r2, #2
 800c6f6:	4013      	ands	r3, r2
 800c6f8:	d006      	beq.n	800c708 <dwt_starttx+0x38>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 800c6fa:	187b      	adds	r3, r7, r1
 800c6fc:	2280      	movs	r2, #128	@ 0x80
 800c6fe:	701a      	strb	r2, [r3, #0]
        pdw1000local->wait4resp = 1;
 800c700:	4b21      	ldr	r3, [pc, #132]	@ (800c788 <dwt_starttx+0xb8>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2201      	movs	r2, #1
 800c706:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 800c708:	1dfb      	adds	r3, r7, #7
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	2201      	movs	r2, #1
 800c70e:	4013      	ands	r3, r2
 800c710:	d027      	beq.n	800c762 <dwt_starttx+0x92>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 800c712:	200b      	movs	r0, #11
 800c714:	183b      	adds	r3, r7, r0
 800c716:	183a      	adds	r2, r7, r0
 800c718:	7812      	ldrb	r2, [r2, #0]
 800c71a:	2106      	movs	r1, #6
 800c71c:	430a      	orrs	r2, r1
 800c71e:	701a      	strb	r2, [r3, #0]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800c720:	183b      	adds	r3, r7, r0
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	001a      	movs	r2, r3
 800c726:	2100      	movs	r1, #0
 800c728:	200d      	movs	r0, #13
 800c72a:	f7ff fdfd 	bl	800c328 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 800c72e:	2508      	movs	r5, #8
 800c730:	197c      	adds	r4, r7, r5
 800c732:	2103      	movs	r1, #3
 800c734:	200f      	movs	r0, #15
 800c736:	f7ff fdc0 	bl	800c2ba <dwt_read16bitoffsetreg>
 800c73a:	0003      	movs	r3, r0
 800c73c:	8023      	strh	r3, [r4, #0]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 800c73e:	197b      	adds	r3, r7, r5
 800c740:	881a      	ldrh	r2, [r3, #0]
 800c742:	2381      	movs	r3, #129	@ 0x81
 800c744:	00db      	lsls	r3, r3, #3
 800c746:	4013      	ands	r3, r2
 800c748:	d102      	bne.n	800c750 <dwt_starttx+0x80>
        {
            retval = DWT_SUCCESS ; // All okay
 800c74a:	2300      	movs	r3, #0
 800c74c:	60fb      	str	r3, [r7, #12]
 800c74e:	e016      	b.n	800c77e <dwt_starttx+0xae>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 800c750:	2240      	movs	r2, #64	@ 0x40
 800c752:	2100      	movs	r1, #0
 800c754:	200d      	movs	r0, #13
 800c756:	f7ff fde7 	bl	800c328 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 800c75a:	2301      	movs	r3, #1
 800c75c:	425b      	negs	r3, r3
 800c75e:	60fb      	str	r3, [r7, #12]
 800c760:	e00d      	b.n	800c77e <dwt_starttx+0xae>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 800c762:	200b      	movs	r0, #11
 800c764:	183b      	adds	r3, r7, r0
 800c766:	183a      	adds	r2, r7, r0
 800c768:	7812      	ldrb	r2, [r2, #0]
 800c76a:	2102      	movs	r1, #2
 800c76c:	430a      	orrs	r2, r1
 800c76e:	701a      	strb	r2, [r3, #0]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800c770:	183b      	adds	r3, r7, r0
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	001a      	movs	r2, r3
 800c776:	2100      	movs	r1, #0
 800c778:	200d      	movs	r0, #13
 800c77a:	f7ff fdd5 	bl	800c328 <dwt_write8bitoffsetreg>
    }

    return retval;
 800c77e:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 800c780:	0018      	movs	r0, r3
 800c782:	46bd      	mov	sp, r7
 800c784:	b004      	add	sp, #16
 800c786:	bdb0      	pop	{r4, r5, r7, pc}
 800c788:	200001bc 	.word	0x200001bc

0800c78c <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 800c792:	2100      	movs	r1, #0
 800c794:	200e      	movs	r0, #14
 800c796:	f7ff fd69 	bl	800c26c <dwt_read32bitoffsetreg>
 800c79a:	0003      	movs	r3, r0
 800c79c:	607b      	str	r3, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 800c79e:	f000 f942 	bl	800ca26 <decamutexon>
 800c7a2:	0003      	movs	r3, r0
 800c7a4:	603b      	str	r3, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	2100      	movs	r1, #0
 800c7aa:	200e      	movs	r0, #14
 800c7ac:	f7ff fdef 	bl	800c38e <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 800c7b0:	2240      	movs	r2, #64	@ 0x40
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	200d      	movs	r0, #13
 800c7b6:	f7ff fdb7 	bl	800c328 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 800c7ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c7f0 <dwt_forcetrxoff+0x64>)
 800c7bc:	001a      	movs	r2, r3
 800c7be:	2100      	movs	r1, #0
 800c7c0:	200f      	movs	r0, #15
 800c7c2:	f7ff fde4 	bl	800c38e <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 800c7c6:	f000 f817 	bl	800c7f8 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	001a      	movs	r2, r3
 800c7ce:	2100      	movs	r1, #0
 800c7d0:	200e      	movs	r0, #14
 800c7d2:	f7ff fddc 	bl	800c38e <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	0018      	movs	r0, r3
 800c7da:	f000 f935 	bl	800ca48 <decamutexoff>
    pdw1000local->wait4resp = 0;
 800c7de:	4b05      	ldr	r3, [pc, #20]	@ (800c7f4 <dwt_forcetrxoff+0x68>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 800c7e6:	46c0      	nop			@ (mov r8, r8)
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	b002      	add	sp, #8
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	46c0      	nop			@ (mov r8, r8)
 800c7f0:	2427fff8 	.word	0x2427fff8
 800c7f4:	200001bc 	.word	0x200001bc

0800c7f8 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 800c7f8:	b590      	push	{r4, r7, lr}
 800c7fa:	b083      	sub	sp, #12
 800c7fc:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 800c7fe:	1dfc      	adds	r4, r7, #7
 800c800:	2103      	movs	r1, #3
 800c802:	200f      	movs	r0, #15
 800c804:	f7ff fd7c 	bl	800c300 <dwt_read8bitoffsetreg>
 800c808:	0003      	movs	r3, r0
 800c80a:	7023      	strb	r3, [r4, #0]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 800c80c:	1dfb      	adds	r3, r7, #7
 800c80e:	781a      	ldrb	r2, [r3, #0]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 800c810:	1dfb      	adds	r3, r7, #7
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 800c816:	4053      	eors	r3, r2
 800c818:	2280      	movs	r2, #128	@ 0x80
 800c81a:	4013      	ands	r3, r2
 800c81c:	d004      	beq.n	800c828 <dwt_syncrxbufptrs+0x30>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 800c81e:	2201      	movs	r2, #1
 800c820:	2103      	movs	r1, #3
 800c822:	200d      	movs	r0, #13
 800c824:	f7ff fd80 	bl	800c328 <dwt_write8bitoffsetreg>
    }
}
 800c828:	46c0      	nop			@ (mov r8, r8)
 800c82a:	46bd      	mov	sp, r7
 800c82c:	b003      	add	sp, #12
 800c82e:	bd90      	pop	{r4, r7, pc}

0800c830 <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 800c830:	b5b0      	push	{r4, r5, r7, lr}
 800c832:	b084      	sub	sp, #16
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2204      	movs	r2, #4
 800c83c:	4013      	ands	r3, r2
 800c83e:	d101      	bne.n	800c844 <dwt_rxenable+0x14>
    {
        dwt_syncrxbufptrs();
 800c840:	f7ff ffda 	bl	800c7f8 <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 800c844:	210e      	movs	r1, #14
 800c846:	187b      	adds	r3, r7, r1
 800c848:	2280      	movs	r2, #128	@ 0x80
 800c84a:	0052      	lsls	r2, r2, #1
 800c84c:	801a      	strh	r2, [r3, #0]

    if (mode & DWT_START_RX_DELAYED)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2201      	movs	r2, #1
 800c852:	4013      	ands	r3, r2
 800c854:	d006      	beq.n	800c864 <dwt_rxenable+0x34>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 800c856:	187b      	adds	r3, r7, r1
 800c858:	187a      	adds	r2, r7, r1
 800c85a:	8812      	ldrh	r2, [r2, #0]
 800c85c:	2180      	movs	r1, #128	@ 0x80
 800c85e:	0089      	lsls	r1, r1, #2
 800c860:	430a      	orrs	r2, r1
 800c862:	801a      	strh	r2, [r3, #0]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800c864:	230e      	movs	r3, #14
 800c866:	18fb      	adds	r3, r7, r3
 800c868:	881b      	ldrh	r3, [r3, #0]
 800c86a:	001a      	movs	r2, r3
 800c86c:	2100      	movs	r1, #0
 800c86e:	200d      	movs	r0, #13
 800c870:	f7ff fd6d 	bl	800c34e <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2201      	movs	r2, #1
 800c878:	4013      	ands	r3, r2
 800c87a:	d01c      	beq.n	800c8b6 <dwt_rxenable+0x86>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 800c87c:	250d      	movs	r5, #13
 800c87e:	197c      	adds	r4, r7, r5
 800c880:	2103      	movs	r1, #3
 800c882:	200f      	movs	r0, #15
 800c884:	f7ff fd3c 	bl	800c300 <dwt_read8bitoffsetreg>
 800c888:	0003      	movs	r3, r0
 800c88a:	7023      	strb	r3, [r4, #0]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 800c88c:	197b      	adds	r3, r7, r5
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	2208      	movs	r2, #8
 800c892:	4013      	ands	r3, r2
 800c894:	d00f      	beq.n	800c8b6 <dwt_rxenable+0x86>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 800c896:	f7ff ff79 	bl	800c78c <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2202      	movs	r2, #2
 800c89e:	4013      	ands	r3, r2
 800c8a0:	d106      	bne.n	800c8b0 <dwt_rxenable+0x80>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 800c8a2:	2380      	movs	r3, #128	@ 0x80
 800c8a4:	005b      	lsls	r3, r3, #1
 800c8a6:	001a      	movs	r2, r3
 800c8a8:	2100      	movs	r1, #0
 800c8aa:	200d      	movs	r0, #13
 800c8ac:	f7ff fd4f 	bl	800c34e <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	425b      	negs	r3, r3
 800c8b4:	e000      	b.n	800c8b8 <dwt_rxenable+0x88>
        }
    }

    return DWT_SUCCESS;
 800c8b6:	2300      	movs	r3, #0
} // end dwt_rxenable()
 800c8b8:	0018      	movs	r0, r3
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	b004      	add	sp, #16
 800c8be:	bdb0      	pop	{r4, r5, r7, pc}

0800c8c0 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 800c8c0:	b5b0      	push	{r4, r5, r7, lr}
 800c8c2:	b084      	sub	sp, #16
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	0002      	movs	r2, r0
 800c8c8:	1dbb      	adds	r3, r7, #6
 800c8ca:	801a      	strh	r2, [r3, #0]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 800c8cc:	250f      	movs	r5, #15
 800c8ce:	197c      	adds	r4, r7, r5
 800c8d0:	2103      	movs	r1, #3
 800c8d2:	2004      	movs	r0, #4
 800c8d4:	f7ff fd14 	bl	800c300 <dwt_read8bitoffsetreg>
 800c8d8:	0003      	movs	r3, r0
 800c8da:	7023      	strb	r3, [r4, #0]

    if(time > 0)
 800c8dc:	1dbb      	adds	r3, r7, #6
 800c8de:	881b      	ldrh	r3, [r3, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d01e      	beq.n	800c922 <dwt_setrxtimeout+0x62>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 800c8e4:	1dbb      	adds	r3, r7, #6
 800c8e6:	881b      	ldrh	r3, [r3, #0]
 800c8e8:	001a      	movs	r2, r3
 800c8ea:	2100      	movs	r1, #0
 800c8ec:	200c      	movs	r0, #12
 800c8ee:	f7ff fd2e 	bl	800c34e <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 800c8f2:	0028      	movs	r0, r5
 800c8f4:	183b      	adds	r3, r7, r0
 800c8f6:	183a      	adds	r2, r7, r0
 800c8f8:	7812      	ldrb	r2, [r2, #0]
 800c8fa:	2110      	movs	r1, #16
 800c8fc:	430a      	orrs	r2, r1
 800c8fe:	701a      	strb	r2, [r3, #0]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 800c900:	4b15      	ldr	r3, [pc, #84]	@ (800c958 <dwt_setrxtimeout+0x98>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	691a      	ldr	r2, [r3, #16]
 800c906:	4b14      	ldr	r3, [pc, #80]	@ (800c958 <dwt_setrxtimeout+0x98>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	2180      	movs	r1, #128	@ 0x80
 800c90c:	0549      	lsls	r1, r1, #21
 800c90e:	430a      	orrs	r2, r1
 800c910:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 800c912:	183b      	adds	r3, r7, r0
 800c914:	781b      	ldrb	r3, [r3, #0]
 800c916:	001a      	movs	r2, r3
 800c918:	2103      	movs	r1, #3
 800c91a:	2004      	movs	r0, #4
 800c91c:	f7ff fd04 	bl	800c328 <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 800c920:	e015      	b.n	800c94e <dwt_setrxtimeout+0x8e>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 800c922:	200f      	movs	r0, #15
 800c924:	183b      	adds	r3, r7, r0
 800c926:	183a      	adds	r2, r7, r0
 800c928:	7812      	ldrb	r2, [r2, #0]
 800c92a:	2110      	movs	r1, #16
 800c92c:	438a      	bics	r2, r1
 800c92e:	701a      	strb	r2, [r3, #0]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 800c930:	4b09      	ldr	r3, [pc, #36]	@ (800c958 <dwt_setrxtimeout+0x98>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	691a      	ldr	r2, [r3, #16]
 800c936:	4b08      	ldr	r3, [pc, #32]	@ (800c958 <dwt_setrxtimeout+0x98>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4908      	ldr	r1, [pc, #32]	@ (800c95c <dwt_setrxtimeout+0x9c>)
 800c93c:	400a      	ands	r2, r1
 800c93e:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 800c940:	183b      	adds	r3, r7, r0
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	001a      	movs	r2, r3
 800c946:	2103      	movs	r1, #3
 800c948:	2004      	movs	r0, #4
 800c94a:	f7ff fced 	bl	800c328 <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 800c94e:	46c0      	nop			@ (mov r8, r8)
 800c950:	46bd      	mov	sp, r7
 800c952:	b004      	add	sp, #16
 800c954:	bdb0      	pop	{r4, r5, r7, pc}
 800c956:	46c0      	nop			@ (mov r8, r8)
 800c958:	200001bc 	.word	0x200001bc
 800c95c:	efffffff 	.word	0xefffffff

0800c960 <dwt_setpreambledetecttimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setpreambledetecttimeout(uint16 timeout)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b082      	sub	sp, #8
 800c964:	af00      	add	r7, sp, #0
 800c966:	0002      	movs	r2, r0
 800c968:	1dbb      	adds	r3, r7, #6
 800c96a:	801a      	strh	r2, [r3, #0]
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_PRETOC_OFFSET, timeout);
 800c96c:	1dbb      	adds	r3, r7, #6
 800c96e:	881b      	ldrh	r3, [r3, #0]
 800c970:	001a      	movs	r2, r3
 800c972:	2124      	movs	r1, #36	@ 0x24
 800c974:	2027      	movs	r0, #39	@ 0x27
 800c976:	f7ff fcea 	bl	800c34e <dwt_write16bitoffsetreg>
}
 800c97a:	46c0      	nop			@ (mov r8, r8)
 800c97c:	46bd      	mov	sp, r7
 800c97e:	b002      	add	sp, #8
 800c980:	bd80      	pop	{r7, pc}

0800c982 <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 800c982:	b580      	push	{r7, lr}
 800c984:	af00      	add	r7, sp, #0
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 800c986:	22e0      	movs	r2, #224	@ 0xe0
 800c988:	2103      	movs	r1, #3
 800c98a:	2036      	movs	r0, #54	@ 0x36
 800c98c:	f7ff fccc 	bl	800c328 <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 800c990:	22f0      	movs	r2, #240	@ 0xf0
 800c992:	2103      	movs	r1, #3
 800c994:	2036      	movs	r0, #54	@ 0x36
 800c996:	f7ff fcc7 	bl	800c328 <dwt_write8bitoffsetreg>
}
 800c99a:	46c0      	nop			@ (mov r8, r8)
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 800c9a4:	f7ff fe78 	bl	800c698 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	2100      	movs	r1, #0
 800c9ac:	202c      	movs	r0, #44	@ 0x2c
 800c9ae:	f7ff fcce 	bl	800c34e <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	2106      	movs	r1, #6
 800c9b6:	202c      	movs	r0, #44	@ 0x2c
 800c9b8:	f7ff fcb6 	bl	800c328 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 800c9bc:	f7ff fd30 	bl	800c420 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	2103      	movs	r1, #3
 800c9c4:	2036      	movs	r0, #54	@ 0x36
 800c9c6:	f7ff fcaf 	bl	800c328 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 800c9ca:	2001      	movs	r0, #1
 800c9cc:	f000 f849 	bl	800ca62 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 800c9d0:	22f0      	movs	r2, #240	@ 0xf0
 800c9d2:	2103      	movs	r1, #3
 800c9d4:	2036      	movs	r0, #54	@ 0x36
 800c9d6:	f7ff fca7 	bl	800c328 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 800c9da:	4b03      	ldr	r3, [pc, #12]	@ (800c9e8 <dwt_softreset+0x48>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	755a      	strb	r2, [r3, #21]
}
 800c9e2:	46c0      	nop			@ (mov r8, r8)
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	200001bc 	.word	0x200001bc

0800c9ec <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b084      	sub	sp, #16
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	0002      	movs	r2, r0
 800c9f4:	1dfb      	adds	r3, r7, #7
 800c9f6:	701a      	strb	r2, [r3, #0]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 800c9f8:	1dfb      	adds	r3, r7, #7
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	b25b      	sxtb	r3, r3
 800c9fe:	221f      	movs	r2, #31
 800ca00:	4013      	ands	r3, r2
 800ca02:	b25b      	sxtb	r3, r3
 800ca04:	2260      	movs	r2, #96	@ 0x60
 800ca06:	4313      	orrs	r3, r2
 800ca08:	b25a      	sxtb	r2, r3
 800ca0a:	210f      	movs	r1, #15
 800ca0c:	187b      	adds	r3, r7, r1
 800ca0e:	701a      	strb	r2, [r3, #0]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 800ca10:	187b      	adds	r3, r7, r1
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	001a      	movs	r2, r3
 800ca16:	210e      	movs	r1, #14
 800ca18:	202b      	movs	r0, #43	@ 0x2b
 800ca1a:	f7ff fc85 	bl	800c328 <dwt_write8bitoffsetreg>
}
 800ca1e:	46c0      	nop			@ (mov r8, r8)
 800ca20:	46bd      	mov	sp, r7
 800ca22:	b004      	add	sp, #16
 800ca24:	bd80      	pop	{r7, pc}

0800ca26 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 800ca26:	b580      	push	{r7, lr}
 800ca28:	b082      	sub	sp, #8
 800ca2a:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800ca2c:	f000 f9f2 	bl	800ce14 <port_GetEXT_IRQStatus>
 800ca30:	0003      	movs	r3, r0
 800ca32:	607b      	str	r3, [r7, #4]

	if(s) {
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d001      	beq.n	800ca3e <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 800ca3a:	f000 f9db 	bl	800cdf4 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 800ca3e:	687b      	ldr	r3, [r7, #4]
}
 800ca40:	0018      	movs	r0, r3
 800ca42:	46bd      	mov	sp, r7
 800ca44:	b002      	add	sp, #8
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d001      	beq.n	800ca5a <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 800ca56:	f000 f9d5 	bl	800ce04 <port_EnableEXT_IRQ>
	}
}
 800ca5a:	46c0      	nop			@ (mov r8, r8)
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	b002      	add	sp, #8
 800ca60:	bd80      	pop	{r7, pc}

0800ca62 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 800ca62:	b580      	push	{r7, lr}
 800ca64:	b082      	sub	sp, #8
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	0018      	movs	r0, r3
 800ca6e:	f000 f8f2 	bl	800cc56 <Sleep>
}
 800ca72:	46c0      	nop			@ (mov r8, r8)
 800ca74:	46bd      	mov	sp, r7
 800ca76:	b002      	add	sp, #8
 800ca78:	bd80      	pop	{r7, pc}
	...

0800ca7c <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 800ca7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca7e:	46d6      	mov	lr, sl
 800ca80:	4646      	mov	r6, r8
 800ca82:	464f      	mov	r7, r9
 800ca84:	b5c0      	push	{r6, r7, lr}
 800ca86:	4682      	mov	sl, r0
 800ca88:	4689      	mov	r9, r1
 800ca8a:	0015      	movs	r5, r2
 800ca8c:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800ca8e:	f7ff ffca 	bl	800ca26 <decamutexon>
 800ca92:	0006      	movs	r6, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800ca94:	4c14      	ldr	r4, [pc, #80]	@ (800cae8 <writetospi+0x6c>)
 800ca96:	0020      	movs	r0, r4
 800ca98:	f7f9 feb1 	bl	80067fe <HAL_SPI_GetState>
 800ca9c:	2801      	cmp	r0, #1
 800ca9e:	d1fa      	bne.n	800ca96 <writetospi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800caa0:	308f      	adds	r0, #143	@ 0x8f
 800caa2:	2200      	movs	r2, #0
 800caa4:	2110      	movs	r1, #16
 800caa6:	05c0      	lsls	r0, r0, #23
 800caa8:	f7f7 f827 	bl	8003afa <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 800caac:	2301      	movs	r3, #1
 800caae:	4652      	mov	r2, sl
 800cab0:	4649      	mov	r1, r9
 800cab2:	0020      	movs	r0, r4
 800cab4:	425b      	negs	r3, r3
 800cab6:	f7f9 fd43 	bl	8006540 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 800caba:	2301      	movs	r3, #1
 800cabc:	4641      	mov	r1, r8
 800cabe:	b2aa      	uxth	r2, r5
 800cac0:	425b      	negs	r3, r3
 800cac2:	0020      	movs	r0, r4
 800cac4:	f7f9 fd3c 	bl	8006540 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800cac8:	2090      	movs	r0, #144	@ 0x90
 800caca:	2201      	movs	r2, #1
 800cacc:	2110      	movs	r1, #16
 800cace:	05c0      	lsls	r0, r0, #23
 800cad0:	f7f7 f813 	bl	8003afa <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800cad4:	0030      	movs	r0, r6
 800cad6:	f7ff ffb7 	bl	800ca48 <decamutexoff>

    return 0;
} // end writetospi()
 800cada:	2000      	movs	r0, #0
 800cadc:	bce0      	pop	{r5, r6, r7}
 800cade:	46ba      	mov	sl, r7
 800cae0:	46b1      	mov	r9, r6
 800cae2:	46a8      	mov	r8, r5
 800cae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cae6:	46c0      	nop			@ (mov r8, r8)
 800cae8:	20000278 	.word	0x20000278

0800caec <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 800caec:	b570      	push	{r4, r5, r6, lr}
 800caee:	46de      	mov	lr, fp
 800caf0:	464d      	mov	r5, r9
 800caf2:	4644      	mov	r4, r8
 800caf4:	4656      	mov	r6, sl
 800caf6:	b570      	push	{r4, r5, r6, lr}
 800caf8:	468b      	mov	fp, r1
 800cafa:	0004      	movs	r4, r0
 800cafc:	4692      	mov	sl, r2
 800cafe:	4698      	mov	r8, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800cb00:	f7ff ff91 	bl	800ca26 <decamutexon>
 800cb04:	4681      	mov	r9, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800cb06:	4d20      	ldr	r5, [pc, #128]	@ (800cb88 <readfromspi+0x9c>)
 800cb08:	0028      	movs	r0, r5
 800cb0a:	f7f9 fe78 	bl	80067fe <HAL_SPI_GetState>
 800cb0e:	2801      	cmp	r0, #1
 800cb10:	d1fa      	bne.n	800cb08 <readfromspi+0x1c>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800cb12:	308f      	adds	r0, #143	@ 0x8f
 800cb14:	2200      	movs	r2, #0
 800cb16:	2110      	movs	r1, #16
 800cb18:	05c0      	lsls	r0, r0, #23
 800cb1a:	f7f6 ffee 	bl	8003afa <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 800cb1e:	2c00      	cmp	r4, #0
 800cb20:	d00b      	beq.n	800cb3a <readfromspi+0x4e>
 800cb22:	2600      	movs	r6, #0
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 800cb24:	465a      	mov	r2, fp
 800cb26:	2301      	movs	r3, #1
 800cb28:	1991      	adds	r1, r2, r6
 800cb2a:	0028      	movs	r0, r5
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	425b      	negs	r3, r3
    for(i=0; i<headerLength; i++)
 800cb30:	3601      	adds	r6, #1
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 800cb32:	f7f9 fd05 	bl	8006540 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 800cb36:	42a6      	cmp	r6, r4
 800cb38:	dbf4      	blt.n	800cb24 <readfromspi+0x38>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 800cb3a:	4653      	mov	r3, sl
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d013      	beq.n	800cb68 <readfromspi+0x7c>
 800cb40:	4640      	mov	r0, r8
 800cb42:	18c6      	adds	r6, r0, r3
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 800cb44:	2300      	movs	r3, #0
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 800cb46:	2202      	movs	r2, #2
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 800cb48:	469c      	mov	ip, r3
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 800cb4a:	2401      	movs	r4, #1
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 800cb4c:	6829      	ldr	r1, [r5, #0]
 800cb4e:	688b      	ldr	r3, [r1, #8]
 800cb50:	421a      	tst	r2, r3
 800cb52:	d0fc      	beq.n	800cb4e <readfromspi+0x62>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 800cb54:	4663      	mov	r3, ip
 800cb56:	60cb      	str	r3, [r1, #12]
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 800cb58:	688b      	ldr	r3, [r1, #8]
 800cb5a:	421c      	tst	r4, r3
 800cb5c:	d0fc      	beq.n	800cb58 <readfromspi+0x6c>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 800cb5e:	68cb      	ldr	r3, [r1, #12]
 800cb60:	7003      	strb	r3, [r0, #0]
    while(readlength-- > 0)
 800cb62:	3001      	adds	r0, #1
 800cb64:	42b0      	cmp	r0, r6
 800cb66:	d1f1      	bne.n	800cb4c <readfromspi+0x60>
    }

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800cb68:	2090      	movs	r0, #144	@ 0x90
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	2110      	movs	r1, #16
 800cb6e:	05c0      	lsls	r0, r0, #23
 800cb70:	f7f6 ffc3 	bl	8003afa <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800cb74:	4648      	mov	r0, r9
 800cb76:	f7ff ff67 	bl	800ca48 <decamutexoff>

    return 0;
} // end readfromspi()
 800cb7a:	2000      	movs	r0, #0
 800cb7c:	bc78      	pop	{r3, r4, r5, r6}
 800cb7e:	46b3      	mov	fp, r6
 800cb80:	46aa      	mov	sl, r5
 800cb82:	46a1      	mov	r9, r4
 800cb84:	4698      	mov	r8, r3
 800cb86:	bd70      	pop	{r4, r5, r6, pc}
 800cb88:	20000278 	.word	0x20000278

0800cb8c <__NVIC_EnableIRQ>:
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b082      	sub	sp, #8
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	0002      	movs	r2, r0
 800cb94:	1dfb      	adds	r3, r7, #7
 800cb96:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800cb98:	1dfb      	adds	r3, r7, #7
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	2b7f      	cmp	r3, #127	@ 0x7f
 800cb9e:	d809      	bhi.n	800cbb4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cba0:	1dfb      	adds	r3, r7, #7
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	001a      	movs	r2, r3
 800cba6:	231f      	movs	r3, #31
 800cba8:	401a      	ands	r2, r3
 800cbaa:	4b04      	ldr	r3, [pc, #16]	@ (800cbbc <__NVIC_EnableIRQ+0x30>)
 800cbac:	2101      	movs	r1, #1
 800cbae:	4091      	lsls	r1, r2
 800cbb0:	000a      	movs	r2, r1
 800cbb2:	601a      	str	r2, [r3, #0]
}
 800cbb4:	46c0      	nop			@ (mov r8, r8)
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	b002      	add	sp, #8
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	e000e100 	.word	0xe000e100

0800cbc0 <__NVIC_DisableIRQ>:
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	0002      	movs	r2, r0
 800cbc8:	1dfb      	adds	r3, r7, #7
 800cbca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800cbcc:	1dfb      	adds	r3, r7, #7
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	2b7f      	cmp	r3, #127	@ 0x7f
 800cbd2:	d810      	bhi.n	800cbf6 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cbd4:	1dfb      	adds	r3, r7, #7
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	001a      	movs	r2, r3
 800cbda:	231f      	movs	r3, #31
 800cbdc:	4013      	ands	r3, r2
 800cbde:	4908      	ldr	r1, [pc, #32]	@ (800cc00 <__NVIC_DisableIRQ+0x40>)
 800cbe0:	2201      	movs	r2, #1
 800cbe2:	409a      	lsls	r2, r3
 800cbe4:	0013      	movs	r3, r2
 800cbe6:	2280      	movs	r2, #128	@ 0x80
 800cbe8:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 800cbea:	f3bf 8f4f 	dsb	sy
}
 800cbee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800cbf0:	f3bf 8f6f 	isb	sy
}
 800cbf4:	46c0      	nop			@ (mov r8, r8)
}
 800cbf6:	46c0      	nop			@ (mov r8, r8)
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	b002      	add	sp, #8
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	46c0      	nop			@ (mov r8, r8)
 800cc00:	e000e100 	.word	0xe000e100

0800cc04 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(useconds_t usec)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b084      	sub	sp, #16
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	60fb      	str	r3, [r7, #12]
 800cc10:	e014      	b.n	800cc3c <usleep+0x38>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 800cc12:	2300      	movs	r3, #0
 800cc14:	60bb      	str	r3, [r7, #8]
 800cc16:	e004      	b.n	800cc22 <usleep+0x1e>
        {
            __NOP();
 800cc18:	46c0      	nop			@ (mov r8, r8)
            __NOP();
 800cc1a:	46c0      	nop			@ (mov r8, r8)
        for(j=0;j<2;j++)
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	3301      	adds	r3, #1
 800cc20:	60bb      	str	r3, [r7, #8]
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	2201      	movs	r2, #1
 800cc26:	0fd8      	lsrs	r0, r3, #31
 800cc28:	17d1      	asrs	r1, r2, #31
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	4148      	adcs	r0, r1
 800cc2e:	0003      	movs	r3, r0
 800cc30:	b2db      	uxtb	r3, r3
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d1f0      	bne.n	800cc18 <usleep+0x14>
    for(i=0;i<usec;i++)
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	3301      	adds	r3, #1
 800cc3a:	60fb      	str	r3, [r7, #12]
 800cc3c:	68fa      	ldr	r2, [r7, #12]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	419b      	sbcs	r3, r3
 800cc44:	425b      	negs	r3, r3
 800cc46:	b2db      	uxtb	r3, r3
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d1e2      	bne.n	800cc12 <usleep+0xe>
        }
    }
    return 0;
 800cc4c:	2300      	movs	r3, #0
}
 800cc4e:	0018      	movs	r0, r3
 800cc50:	46bd      	mov	sp, r7
 800cc52:	b004      	add	sp, #16
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 800cc56:	b580      	push	{r7, lr}
 800cc58:	b082      	sub	sp, #8
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	0018      	movs	r0, r3
 800cc62:	f7f6 fa33 	bl	80030cc <HAL_Delay>
}
 800cc66:	46c0      	nop			@ (mov r8, r8)
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	b002      	add	sp, #8
 800cc6c:	bd80      	pop	{r7, pc}
	...

0800cc70 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 800cc78:	4a09      	ldr	r2, [pc, #36]	@ (800cca0 <EXTI_GetITEnStatus+0x30>)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	095b      	lsrs	r3, r3, #5
 800cc7e:	009b      	lsls	r3, r3, #2
 800cc80:	589a      	ldr	r2, [r3, r2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	211f      	movs	r1, #31
 800cc86:	400b      	ands	r3, r1
 800cc88:	40da      	lsrs	r2, r3
 800cc8a:	0013      	movs	r3, r2
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	4013      	ands	r3, r2
 800cc90:	1e5a      	subs	r2, r3, #1
 800cc92:	4193      	sbcs	r3, r2
 800cc94:	b2db      	uxtb	r3, r3
}
 800cc96:	0018      	movs	r0, r3
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	b002      	add	sp, #8
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	46c0      	nop			@ (mov r8, r8)
 800cca0:	e000e100 	.word	0xe000e100

0800cca4 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b086      	sub	sp, #24
 800cca8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 800ccaa:	1d3b      	adds	r3, r7, #4
 800ccac:	2204      	movs	r2, #4
 800ccae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800ccb0:	1d3b      	adds	r3, r7, #4
 800ccb2:	2211      	movs	r2, #17
 800ccb4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ccb6:	1d3b      	adds	r3, r7, #4
 800ccb8:	2200      	movs	r2, #0
 800ccba:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800ccbc:	1d3a      	adds	r2, r7, #4
 800ccbe:	2390      	movs	r3, #144	@ 0x90
 800ccc0:	05db      	lsls	r3, r3, #23
 800ccc2:	0011      	movs	r1, r2
 800ccc4:	0018      	movs	r0, r3
 800ccc6:	f7f6 fd83 	bl	80037d0 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 800ccca:	2390      	movs	r3, #144	@ 0x90
 800cccc:	05db      	lsls	r3, r3, #23
 800ccce:	2200      	movs	r2, #0
 800ccd0:	2104      	movs	r1, #4
 800ccd2:	0018      	movs	r0, r3
 800ccd4:	f7f6 ff11 	bl	8003afa <HAL_GPIO_WritePin>

    usleep(1);
 800ccd8:	2001      	movs	r0, #1
 800ccda:	f7ff ff93 	bl	800cc04 <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 800ccde:	2000      	movs	r0, #0
 800cce0:	f000 f807 	bl	800ccf2 <setup_DW1000RSTnIRQ>



    Sleep(2);
 800cce4:	2002      	movs	r0, #2
 800cce6:	f7ff ffb6 	bl	800cc56 <Sleep>
}
 800ccea:	46c0      	nop			@ (mov r8, r8)
 800ccec:	46bd      	mov	sp, r7
 800ccee:	b006      	add	sp, #24
 800ccf0:	bd80      	pop	{r7, pc}

0800ccf2 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI2 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 800ccf2:	b580      	push	{r7, lr}
 800ccf4:	b088      	sub	sp, #32
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d01a      	beq.n	800cd36 <setup_DW1000RSTnIRQ+0x44>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 800cd00:	210c      	movs	r1, #12
 800cd02:	187b      	adds	r3, r7, r1
 800cd04:	2204      	movs	r2, #4
 800cd06:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800cd08:	187b      	adds	r3, r7, r1
 800cd0a:	2288      	movs	r2, #136	@ 0x88
 800cd0c:	0352      	lsls	r2, r2, #13
 800cd0e:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd10:	187b      	adds	r3, r7, r1
 800cd12:	2200      	movs	r2, #0
 800cd14:	609a      	str	r2, [r3, #8]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800cd16:	187a      	adds	r2, r7, r1
 800cd18:	2390      	movs	r3, #144	@ 0x90
 800cd1a:	05db      	lsls	r3, r3, #23
 800cd1c:	0011      	movs	r1, r2
 800cd1e:	0018      	movs	r0, r3
 800cd20:	f7f6 fd56 	bl	80037d0 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI2_IRQn);     //pin #0 -> EXTI #0
 800cd24:	2006      	movs	r0, #6
 800cd26:	f7f6 fd26 	bl	8003776 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	2105      	movs	r1, #5
 800cd2e:	2006      	movs	r0, #6
 800cd30:	f7f6 fd0c 	bl	800374c <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 800cd34:	e01d      	b.n	800cd72 <setup_DW1000RSTnIRQ+0x80>
        HAL_NVIC_DisableIRQ(EXTI2_IRQn);    //pin #0 -> EXTI #0
 800cd36:	2006      	movs	r0, #6
 800cd38:	f7f6 fd2d 	bl	8003796 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 800cd3c:	210c      	movs	r1, #12
 800cd3e:	187b      	adds	r3, r7, r1
 800cd40:	2204      	movs	r2, #4
 800cd42:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800cd44:	187b      	adds	r3, r7, r1
 800cd46:	2211      	movs	r2, #17
 800cd48:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd4a:	187b      	adds	r3, r7, r1
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	609a      	str	r2, [r3, #8]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800cd50:	187b      	adds	r3, r7, r1
 800cd52:	2203      	movs	r2, #3
 800cd54:	60da      	str	r2, [r3, #12]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800cd56:	187a      	adds	r2, r7, r1
 800cd58:	2390      	movs	r3, #144	@ 0x90
 800cd5a:	05db      	lsls	r3, r3, #23
 800cd5c:	0011      	movs	r1, r2
 800cd5e:	0018      	movs	r0, r3
 800cd60:	f7f6 fd36 	bl	80037d0 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 800cd64:	2390      	movs	r3, #144	@ 0x90
 800cd66:	05db      	lsls	r3, r3, #23
 800cd68:	2201      	movs	r2, #1
 800cd6a:	2104      	movs	r1, #4
 800cd6c:	0018      	movs	r0, r3
 800cd6e:	f7f6 fec4 	bl	8003afa <HAL_GPIO_WritePin>
}
 800cd72:	46c0      	nop			@ (mov r8, r8)
 800cd74:	46bd      	mov	sp, r7
 800cd76:	b008      	add	sp, #32
 800cd78:	bd80      	pop	{r7, pc}
	...

0800cd7c <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800cd80:	4b04      	ldr	r3, [pc, #16]	@ (800cd94 <port_set_dw1000_slowrate+0x18>)
 800cd82:	2218      	movs	r2, #24
 800cd84:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800cd86:	4b03      	ldr	r3, [pc, #12]	@ (800cd94 <port_set_dw1000_slowrate+0x18>)
 800cd88:	0018      	movs	r0, r3
 800cd8a:	f7f9 fb21 	bl	80063d0 <HAL_SPI_Init>
}
 800cd8e:	46c0      	nop			@ (mov r8, r8)
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}
 800cd94:	20000278 	.word	0x20000278

0800cd98 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cd9c:	4b04      	ldr	r3, [pc, #16]	@ (800cdb0 <port_set_dw1000_fastrate+0x18>)
 800cd9e:	2200      	movs	r2, #0
 800cda0:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800cda2:	4b03      	ldr	r3, [pc, #12]	@ (800cdb0 <port_set_dw1000_fastrate+0x18>)
 800cda4:	0018      	movs	r0, r3
 800cda6:	f7f9 fb13 	bl	80063d0 <HAL_SPI_Init>
}
 800cdaa:	46c0      	nop			@ (mov r8, r8)
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}
 800cdb0:	20000278 	.word	0x20000278

0800cdb4 <HAL_GPIO_EXTI_Callback>:
/* @fn      HAL_GPIO_EXTI_Callback
 * @brief   IRQ HAL call-back for all EXTI configured lines
 *          i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	0002      	movs	r2, r0
 800cdbc:	1dbb      	adds	r3, r7, #6
 800cdbe:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == DW_IRQn_Pin)
 800cdc0:	1dbb      	adds	r3, r7, #6
 800cdc2:	881b      	ldrh	r3, [r3, #0]
 800cdc4:	2b20      	cmp	r3, #32
 800cdc6:	d101      	bne.n	800cdcc <HAL_GPIO_EXTI_Callback+0x18>
    {
        process_deca_irq();
 800cdc8:	f000 f804 	bl	800cdd4 <process_deca_irq>
    }
}
 800cdcc:	46c0      	nop			@ (mov r8, r8)
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	b002      	add	sp, #8
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	af00      	add	r7, sp, #0
    while(port_CheckEXT_IRQ() != 0)
 800cdd8:	e002      	b.n	800cde0 <process_deca_irq+0xc>
    {

        port_deca_isr();
 800cdda:	4b05      	ldr	r3, [pc, #20]	@ (800cdf0 <process_deca_irq+0x1c>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	4798      	blx	r3
    while(port_CheckEXT_IRQ() != 0)
 800cde0:	f000 f822 	bl	800ce28 <port_CheckEXT_IRQ>
 800cde4:	1e03      	subs	r3, r0, #0
 800cde6:	d1f8      	bne.n	800cdda <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 800cde8:	46c0      	nop			@ (mov r8, r8)
 800cdea:	46c0      	nop			@ (mov r8, r8)
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	200015c8 	.word	0x200015c8

0800cdf4 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 800cdf8:	2007      	movs	r0, #7
 800cdfa:	f7ff fee1 	bl	800cbc0 <__NVIC_DisableIRQ>
}
 800cdfe:	46c0      	nop			@ (mov r8, r8)
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}

0800ce04 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 800ce08:	2007      	movs	r0, #7
 800ce0a:	f7ff febf 	bl	800cb8c <__NVIC_EnableIRQ>
}
 800ce0e:	46c0      	nop			@ (mov r8, r8)
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 800ce18:	2007      	movs	r0, #7
 800ce1a:	f7ff ff29 	bl	800cc70 <EXTI_GetITEnStatus>
 800ce1e:	0003      	movs	r3, r0
}
 800ce20:	0018      	movs	r0, r3
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
	...

0800ce28 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DECAIRQ_GPIO, DW_IRQn_Pin);
 800ce2c:	4b04      	ldr	r3, [pc, #16]	@ (800ce40 <port_CheckEXT_IRQ+0x18>)
 800ce2e:	2120      	movs	r1, #32
 800ce30:	0018      	movs	r0, r3
 800ce32:	f7f6 fe45 	bl	8003ac0 <HAL_GPIO_ReadPin>
 800ce36:	0003      	movs	r3, r0
}
 800ce38:	0018      	movs	r0, r3
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	46c0      	nop			@ (mov r8, r8)
 800ce40:	48000400 	.word	0x48000400

0800ce44 <memcmp>:
 800ce44:	b530      	push	{r4, r5, lr}
 800ce46:	2400      	movs	r4, #0
 800ce48:	3901      	subs	r1, #1
 800ce4a:	42a2      	cmp	r2, r4
 800ce4c:	d101      	bne.n	800ce52 <memcmp+0xe>
 800ce4e:	2000      	movs	r0, #0
 800ce50:	e005      	b.n	800ce5e <memcmp+0x1a>
 800ce52:	5d03      	ldrb	r3, [r0, r4]
 800ce54:	3401      	adds	r4, #1
 800ce56:	5d0d      	ldrb	r5, [r1, r4]
 800ce58:	42ab      	cmp	r3, r5
 800ce5a:	d0f6      	beq.n	800ce4a <memcmp+0x6>
 800ce5c:	1b58      	subs	r0, r3, r5
 800ce5e:	bd30      	pop	{r4, r5, pc}

0800ce60 <memset>:
 800ce60:	0003      	movs	r3, r0
 800ce62:	1882      	adds	r2, r0, r2
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d100      	bne.n	800ce6a <memset+0xa>
 800ce68:	4770      	bx	lr
 800ce6a:	7019      	strb	r1, [r3, #0]
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	e7f9      	b.n	800ce64 <memset+0x4>

0800ce70 <__libc_init_array>:
 800ce70:	b570      	push	{r4, r5, r6, lr}
 800ce72:	2600      	movs	r6, #0
 800ce74:	4c0c      	ldr	r4, [pc, #48]	@ (800cea8 <__libc_init_array+0x38>)
 800ce76:	4d0d      	ldr	r5, [pc, #52]	@ (800ceac <__libc_init_array+0x3c>)
 800ce78:	1b64      	subs	r4, r4, r5
 800ce7a:	10a4      	asrs	r4, r4, #2
 800ce7c:	42a6      	cmp	r6, r4
 800ce7e:	d109      	bne.n	800ce94 <__libc_init_array+0x24>
 800ce80:	2600      	movs	r6, #0
 800ce82:	f000 f819 	bl	800ceb8 <_init>
 800ce86:	4c0a      	ldr	r4, [pc, #40]	@ (800ceb0 <__libc_init_array+0x40>)
 800ce88:	4d0a      	ldr	r5, [pc, #40]	@ (800ceb4 <__libc_init_array+0x44>)
 800ce8a:	1b64      	subs	r4, r4, r5
 800ce8c:	10a4      	asrs	r4, r4, #2
 800ce8e:	42a6      	cmp	r6, r4
 800ce90:	d105      	bne.n	800ce9e <__libc_init_array+0x2e>
 800ce92:	bd70      	pop	{r4, r5, r6, pc}
 800ce94:	00b3      	lsls	r3, r6, #2
 800ce96:	58eb      	ldr	r3, [r5, r3]
 800ce98:	4798      	blx	r3
 800ce9a:	3601      	adds	r6, #1
 800ce9c:	e7ee      	b.n	800ce7c <__libc_init_array+0xc>
 800ce9e:	00b3      	lsls	r3, r6, #2
 800cea0:	58eb      	ldr	r3, [r5, r3]
 800cea2:	4798      	blx	r3
 800cea4:	3601      	adds	r6, #1
 800cea6:	e7f2      	b.n	800ce8e <__libc_init_array+0x1e>
 800cea8:	0800d170 	.word	0x0800d170
 800ceac:	0800d170 	.word	0x0800d170
 800ceb0:	0800d174 	.word	0x0800d174
 800ceb4:	0800d170 	.word	0x0800d170

0800ceb8 <_init>:
 800ceb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceba:	46c0      	nop			@ (mov r8, r8)
 800cebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cebe:	bc08      	pop	{r3}
 800cec0:	469e      	mov	lr, r3
 800cec2:	4770      	bx	lr

0800cec4 <_fini>:
 800cec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec6:	46c0      	nop			@ (mov r8, r8)
 800cec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceca:	bc08      	pop	{r3}
 800cecc:	469e      	mov	lr, r3
 800cece:	4770      	bx	lr
