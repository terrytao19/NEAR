
NEAR_ANCHOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066a0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08006760  08006760  00007760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068c8  080068c8  00008050  2**0
                  CONTENTS
  4 .ARM          00000000  080068c8  080068c8  00008050  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068c8  080068c8  00008050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068c8  080068c8  000078c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068cc  080068cc  000078cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  080068d0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000050  08006920  00008050  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08006920  00008288  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1ec  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002327  00000000  00000000  00016264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00018590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa1  00000000  00000000  00019350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c7e0  00000000  00000000  00019df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011413  00000000  00000000  000365d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009deaf  00000000  00000000  000479e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5893  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000332c  00000000  00000000  000e58d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000e8c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000144  00000000  00000000  000e8c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000050 	.word	0x20000050
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006748 	.word	0x08006748

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000054 	.word	0x20000054
 8000104:	08006748 	.word	0x08006748

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	@ (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f001 fe0b 	bl	8001e44 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f001 fd43 	bl	8001cc0 <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	@ (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f001 f9a0 	bl	8001588 <__aeabi_dsub>
 8000248:	f001 fd3a 	bl	8001cc0 <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	@ 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_d2lz>:
 800025c:	b570      	push	{r4, r5, r6, lr}
 800025e:	2200      	movs	r2, #0
 8000260:	2300      	movs	r3, #0
 8000262:	0004      	movs	r4, r0
 8000264:	000d      	movs	r5, r1
 8000266:	f001 fdcf 	bl	8001e08 <__aeabi_dcmplt>
 800026a:	2800      	cmp	r0, #0
 800026c:	d108      	bne.n	8000280 <__aeabi_d2lz+0x24>
 800026e:	0020      	movs	r0, r4
 8000270:	0029      	movs	r1, r5
 8000272:	f000 f80f 	bl	8000294 <__aeabi_d2ulz>
 8000276:	0002      	movs	r2, r0
 8000278:	000b      	movs	r3, r1
 800027a:	0010      	movs	r0, r2
 800027c:	0019      	movs	r1, r3
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	2380      	movs	r3, #128	@ 0x80
 8000282:	061b      	lsls	r3, r3, #24
 8000284:	18e9      	adds	r1, r5, r3
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f804 	bl	8000294 <__aeabi_d2ulz>
 800028c:	2300      	movs	r3, #0
 800028e:	4242      	negs	r2, r0
 8000290:	418b      	sbcs	r3, r1
 8000292:	e7f2      	b.n	800027a <__aeabi_d2lz+0x1e>

08000294 <__aeabi_d2ulz>:
 8000294:	b570      	push	{r4, r5, r6, lr}
 8000296:	2200      	movs	r2, #0
 8000298:	4b0b      	ldr	r3, [pc, #44]	@ (80002c8 <__aeabi_d2ulz+0x34>)
 800029a:	000d      	movs	r5, r1
 800029c:	0004      	movs	r4, r0
 800029e:	f000 feab 	bl	8000ff8 <__aeabi_dmul>
 80002a2:	f7ff ffbd 	bl	8000220 <__aeabi_d2uiz>
 80002a6:	0006      	movs	r6, r0
 80002a8:	f001 fd74 	bl	8001d94 <__aeabi_ui2d>
 80002ac:	2200      	movs	r2, #0
 80002ae:	4b07      	ldr	r3, [pc, #28]	@ (80002cc <__aeabi_d2ulz+0x38>)
 80002b0:	f000 fea2 	bl	8000ff8 <__aeabi_dmul>
 80002b4:	0002      	movs	r2, r0
 80002b6:	000b      	movs	r3, r1
 80002b8:	0020      	movs	r0, r4
 80002ba:	0029      	movs	r1, r5
 80002bc:	f001 f964 	bl	8001588 <__aeabi_dsub>
 80002c0:	f7ff ffae 	bl	8000220 <__aeabi_d2uiz>
 80002c4:	0031      	movs	r1, r6
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	3df00000 	.word	0x3df00000
 80002cc:	41f00000 	.word	0x41f00000

080002d0 <__aeabi_l2d>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	0006      	movs	r6, r0
 80002d4:	0008      	movs	r0, r1
 80002d6:	f001 fd2f 	bl	8001d38 <__aeabi_i2d>
 80002da:	2200      	movs	r2, #0
 80002dc:	4b06      	ldr	r3, [pc, #24]	@ (80002f8 <__aeabi_l2d+0x28>)
 80002de:	f000 fe8b 	bl	8000ff8 <__aeabi_dmul>
 80002e2:	000d      	movs	r5, r1
 80002e4:	0004      	movs	r4, r0
 80002e6:	0030      	movs	r0, r6
 80002e8:	f001 fd54 	bl	8001d94 <__aeabi_ui2d>
 80002ec:	002b      	movs	r3, r5
 80002ee:	0022      	movs	r2, r4
 80002f0:	f000 f804 	bl	80002fc <__aeabi_dadd>
 80002f4:	bd70      	pop	{r4, r5, r6, pc}
 80002f6:	46c0      	nop			@ (mov r8, r8)
 80002f8:	41f00000 	.word	0x41f00000

080002fc <__aeabi_dadd>:
 80002fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fe:	4657      	mov	r7, sl
 8000300:	464e      	mov	r6, r9
 8000302:	4645      	mov	r5, r8
 8000304:	46de      	mov	lr, fp
 8000306:	b5e0      	push	{r5, r6, r7, lr}
 8000308:	b083      	sub	sp, #12
 800030a:	9000      	str	r0, [sp, #0]
 800030c:	9101      	str	r1, [sp, #4]
 800030e:	030c      	lsls	r4, r1, #12
 8000310:	004f      	lsls	r7, r1, #1
 8000312:	0fce      	lsrs	r6, r1, #31
 8000314:	0a61      	lsrs	r1, r4, #9
 8000316:	9c00      	ldr	r4, [sp, #0]
 8000318:	031d      	lsls	r5, r3, #12
 800031a:	0f64      	lsrs	r4, r4, #29
 800031c:	430c      	orrs	r4, r1
 800031e:	9900      	ldr	r1, [sp, #0]
 8000320:	9200      	str	r2, [sp, #0]
 8000322:	9301      	str	r3, [sp, #4]
 8000324:	00c8      	lsls	r0, r1, #3
 8000326:	0059      	lsls	r1, r3, #1
 8000328:	0d4b      	lsrs	r3, r1, #21
 800032a:	4699      	mov	r9, r3
 800032c:	9a00      	ldr	r2, [sp, #0]
 800032e:	9b01      	ldr	r3, [sp, #4]
 8000330:	0a6d      	lsrs	r5, r5, #9
 8000332:	0fd9      	lsrs	r1, r3, #31
 8000334:	0f53      	lsrs	r3, r2, #29
 8000336:	432b      	orrs	r3, r5
 8000338:	469a      	mov	sl, r3
 800033a:	9b00      	ldr	r3, [sp, #0]
 800033c:	0d7f      	lsrs	r7, r7, #21
 800033e:	00da      	lsls	r2, r3, #3
 8000340:	4694      	mov	ip, r2
 8000342:	464a      	mov	r2, r9
 8000344:	46b0      	mov	r8, r6
 8000346:	1aba      	subs	r2, r7, r2
 8000348:	428e      	cmp	r6, r1
 800034a:	d100      	bne.n	800034e <__aeabi_dadd+0x52>
 800034c:	e0b0      	b.n	80004b0 <__aeabi_dadd+0x1b4>
 800034e:	2a00      	cmp	r2, #0
 8000350:	dc00      	bgt.n	8000354 <__aeabi_dadd+0x58>
 8000352:	e078      	b.n	8000446 <__aeabi_dadd+0x14a>
 8000354:	4649      	mov	r1, r9
 8000356:	2900      	cmp	r1, #0
 8000358:	d100      	bne.n	800035c <__aeabi_dadd+0x60>
 800035a:	e0e9      	b.n	8000530 <__aeabi_dadd+0x234>
 800035c:	49c9      	ldr	r1, [pc, #804]	@ (8000684 <__aeabi_dadd+0x388>)
 800035e:	428f      	cmp	r7, r1
 8000360:	d100      	bne.n	8000364 <__aeabi_dadd+0x68>
 8000362:	e195      	b.n	8000690 <__aeabi_dadd+0x394>
 8000364:	2501      	movs	r5, #1
 8000366:	2a38      	cmp	r2, #56	@ 0x38
 8000368:	dc16      	bgt.n	8000398 <__aeabi_dadd+0x9c>
 800036a:	2180      	movs	r1, #128	@ 0x80
 800036c:	4653      	mov	r3, sl
 800036e:	0409      	lsls	r1, r1, #16
 8000370:	430b      	orrs	r3, r1
 8000372:	469a      	mov	sl, r3
 8000374:	2a1f      	cmp	r2, #31
 8000376:	dd00      	ble.n	800037a <__aeabi_dadd+0x7e>
 8000378:	e1e7      	b.n	800074a <__aeabi_dadd+0x44e>
 800037a:	2120      	movs	r1, #32
 800037c:	4655      	mov	r5, sl
 800037e:	1a8b      	subs	r3, r1, r2
 8000380:	4661      	mov	r1, ip
 8000382:	409d      	lsls	r5, r3
 8000384:	40d1      	lsrs	r1, r2
 8000386:	430d      	orrs	r5, r1
 8000388:	4661      	mov	r1, ip
 800038a:	4099      	lsls	r1, r3
 800038c:	1e4b      	subs	r3, r1, #1
 800038e:	4199      	sbcs	r1, r3
 8000390:	4653      	mov	r3, sl
 8000392:	40d3      	lsrs	r3, r2
 8000394:	430d      	orrs	r5, r1
 8000396:	1ae4      	subs	r4, r4, r3
 8000398:	1b45      	subs	r5, r0, r5
 800039a:	42a8      	cmp	r0, r5
 800039c:	4180      	sbcs	r0, r0
 800039e:	4240      	negs	r0, r0
 80003a0:	1a24      	subs	r4, r4, r0
 80003a2:	0223      	lsls	r3, r4, #8
 80003a4:	d400      	bmi.n	80003a8 <__aeabi_dadd+0xac>
 80003a6:	e10f      	b.n	80005c8 <__aeabi_dadd+0x2cc>
 80003a8:	0264      	lsls	r4, r4, #9
 80003aa:	0a64      	lsrs	r4, r4, #9
 80003ac:	2c00      	cmp	r4, #0
 80003ae:	d100      	bne.n	80003b2 <__aeabi_dadd+0xb6>
 80003b0:	e139      	b.n	8000626 <__aeabi_dadd+0x32a>
 80003b2:	0020      	movs	r0, r4
 80003b4:	f001 fd50 	bl	8001e58 <__clzsi2>
 80003b8:	0003      	movs	r3, r0
 80003ba:	3b08      	subs	r3, #8
 80003bc:	2120      	movs	r1, #32
 80003be:	0028      	movs	r0, r5
 80003c0:	1aca      	subs	r2, r1, r3
 80003c2:	40d0      	lsrs	r0, r2
 80003c4:	409c      	lsls	r4, r3
 80003c6:	0002      	movs	r2, r0
 80003c8:	409d      	lsls	r5, r3
 80003ca:	4322      	orrs	r2, r4
 80003cc:	429f      	cmp	r7, r3
 80003ce:	dd00      	ble.n	80003d2 <__aeabi_dadd+0xd6>
 80003d0:	e173      	b.n	80006ba <__aeabi_dadd+0x3be>
 80003d2:	1bd8      	subs	r0, r3, r7
 80003d4:	3001      	adds	r0, #1
 80003d6:	1a09      	subs	r1, r1, r0
 80003d8:	002c      	movs	r4, r5
 80003da:	408d      	lsls	r5, r1
 80003dc:	40c4      	lsrs	r4, r0
 80003de:	1e6b      	subs	r3, r5, #1
 80003e0:	419d      	sbcs	r5, r3
 80003e2:	0013      	movs	r3, r2
 80003e4:	40c2      	lsrs	r2, r0
 80003e6:	408b      	lsls	r3, r1
 80003e8:	4325      	orrs	r5, r4
 80003ea:	2700      	movs	r7, #0
 80003ec:	0014      	movs	r4, r2
 80003ee:	431d      	orrs	r5, r3
 80003f0:	076b      	lsls	r3, r5, #29
 80003f2:	d009      	beq.n	8000408 <__aeabi_dadd+0x10c>
 80003f4:	230f      	movs	r3, #15
 80003f6:	402b      	ands	r3, r5
 80003f8:	2b04      	cmp	r3, #4
 80003fa:	d005      	beq.n	8000408 <__aeabi_dadd+0x10c>
 80003fc:	1d2b      	adds	r3, r5, #4
 80003fe:	42ab      	cmp	r3, r5
 8000400:	41ad      	sbcs	r5, r5
 8000402:	426d      	negs	r5, r5
 8000404:	1964      	adds	r4, r4, r5
 8000406:	001d      	movs	r5, r3
 8000408:	0223      	lsls	r3, r4, #8
 800040a:	d400      	bmi.n	800040e <__aeabi_dadd+0x112>
 800040c:	e12d      	b.n	800066a <__aeabi_dadd+0x36e>
 800040e:	4a9d      	ldr	r2, [pc, #628]	@ (8000684 <__aeabi_dadd+0x388>)
 8000410:	3701      	adds	r7, #1
 8000412:	4297      	cmp	r7, r2
 8000414:	d100      	bne.n	8000418 <__aeabi_dadd+0x11c>
 8000416:	e0d3      	b.n	80005c0 <__aeabi_dadd+0x2c4>
 8000418:	4646      	mov	r6, r8
 800041a:	499b      	ldr	r1, [pc, #620]	@ (8000688 <__aeabi_dadd+0x38c>)
 800041c:	08ed      	lsrs	r5, r5, #3
 800041e:	4021      	ands	r1, r4
 8000420:	074a      	lsls	r2, r1, #29
 8000422:	432a      	orrs	r2, r5
 8000424:	057c      	lsls	r4, r7, #21
 8000426:	024d      	lsls	r5, r1, #9
 8000428:	0b2d      	lsrs	r5, r5, #12
 800042a:	0d64      	lsrs	r4, r4, #21
 800042c:	0524      	lsls	r4, r4, #20
 800042e:	432c      	orrs	r4, r5
 8000430:	07f6      	lsls	r6, r6, #31
 8000432:	4334      	orrs	r4, r6
 8000434:	0010      	movs	r0, r2
 8000436:	0021      	movs	r1, r4
 8000438:	b003      	add	sp, #12
 800043a:	bcf0      	pop	{r4, r5, r6, r7}
 800043c:	46bb      	mov	fp, r7
 800043e:	46b2      	mov	sl, r6
 8000440:	46a9      	mov	r9, r5
 8000442:	46a0      	mov	r8, r4
 8000444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000446:	2a00      	cmp	r2, #0
 8000448:	d100      	bne.n	800044c <__aeabi_dadd+0x150>
 800044a:	e084      	b.n	8000556 <__aeabi_dadd+0x25a>
 800044c:	464a      	mov	r2, r9
 800044e:	1bd2      	subs	r2, r2, r7
 8000450:	2f00      	cmp	r7, #0
 8000452:	d000      	beq.n	8000456 <__aeabi_dadd+0x15a>
 8000454:	e16d      	b.n	8000732 <__aeabi_dadd+0x436>
 8000456:	0025      	movs	r5, r4
 8000458:	4305      	orrs	r5, r0
 800045a:	d100      	bne.n	800045e <__aeabi_dadd+0x162>
 800045c:	e127      	b.n	80006ae <__aeabi_dadd+0x3b2>
 800045e:	1e56      	subs	r6, r2, #1
 8000460:	2a01      	cmp	r2, #1
 8000462:	d100      	bne.n	8000466 <__aeabi_dadd+0x16a>
 8000464:	e23b      	b.n	80008de <__aeabi_dadd+0x5e2>
 8000466:	4d87      	ldr	r5, [pc, #540]	@ (8000684 <__aeabi_dadd+0x388>)
 8000468:	42aa      	cmp	r2, r5
 800046a:	d100      	bne.n	800046e <__aeabi_dadd+0x172>
 800046c:	e26a      	b.n	8000944 <__aeabi_dadd+0x648>
 800046e:	2501      	movs	r5, #1
 8000470:	2e38      	cmp	r6, #56	@ 0x38
 8000472:	dc12      	bgt.n	800049a <__aeabi_dadd+0x19e>
 8000474:	0032      	movs	r2, r6
 8000476:	2a1f      	cmp	r2, #31
 8000478:	dd00      	ble.n	800047c <__aeabi_dadd+0x180>
 800047a:	e1f8      	b.n	800086e <__aeabi_dadd+0x572>
 800047c:	2620      	movs	r6, #32
 800047e:	0025      	movs	r5, r4
 8000480:	1ab6      	subs	r6, r6, r2
 8000482:	0007      	movs	r7, r0
 8000484:	4653      	mov	r3, sl
 8000486:	40b0      	lsls	r0, r6
 8000488:	40d4      	lsrs	r4, r2
 800048a:	40b5      	lsls	r5, r6
 800048c:	40d7      	lsrs	r7, r2
 800048e:	1e46      	subs	r6, r0, #1
 8000490:	41b0      	sbcs	r0, r6
 8000492:	1b1b      	subs	r3, r3, r4
 8000494:	469a      	mov	sl, r3
 8000496:	433d      	orrs	r5, r7
 8000498:	4305      	orrs	r5, r0
 800049a:	4662      	mov	r2, ip
 800049c:	1b55      	subs	r5, r2, r5
 800049e:	45ac      	cmp	ip, r5
 80004a0:	4192      	sbcs	r2, r2
 80004a2:	4653      	mov	r3, sl
 80004a4:	4252      	negs	r2, r2
 80004a6:	000e      	movs	r6, r1
 80004a8:	464f      	mov	r7, r9
 80004aa:	4688      	mov	r8, r1
 80004ac:	1a9c      	subs	r4, r3, r2
 80004ae:	e778      	b.n	80003a2 <__aeabi_dadd+0xa6>
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	dc00      	bgt.n	80004b6 <__aeabi_dadd+0x1ba>
 80004b4:	e08e      	b.n	80005d4 <__aeabi_dadd+0x2d8>
 80004b6:	4649      	mov	r1, r9
 80004b8:	2900      	cmp	r1, #0
 80004ba:	d175      	bne.n	80005a8 <__aeabi_dadd+0x2ac>
 80004bc:	4661      	mov	r1, ip
 80004be:	4653      	mov	r3, sl
 80004c0:	4319      	orrs	r1, r3
 80004c2:	d100      	bne.n	80004c6 <__aeabi_dadd+0x1ca>
 80004c4:	e0f6      	b.n	80006b4 <__aeabi_dadd+0x3b8>
 80004c6:	1e51      	subs	r1, r2, #1
 80004c8:	2a01      	cmp	r2, #1
 80004ca:	d100      	bne.n	80004ce <__aeabi_dadd+0x1d2>
 80004cc:	e191      	b.n	80007f2 <__aeabi_dadd+0x4f6>
 80004ce:	4d6d      	ldr	r5, [pc, #436]	@ (8000684 <__aeabi_dadd+0x388>)
 80004d0:	42aa      	cmp	r2, r5
 80004d2:	d100      	bne.n	80004d6 <__aeabi_dadd+0x1da>
 80004d4:	e0dc      	b.n	8000690 <__aeabi_dadd+0x394>
 80004d6:	2501      	movs	r5, #1
 80004d8:	2938      	cmp	r1, #56	@ 0x38
 80004da:	dc14      	bgt.n	8000506 <__aeabi_dadd+0x20a>
 80004dc:	000a      	movs	r2, r1
 80004de:	2a1f      	cmp	r2, #31
 80004e0:	dd00      	ble.n	80004e4 <__aeabi_dadd+0x1e8>
 80004e2:	e1a2      	b.n	800082a <__aeabi_dadd+0x52e>
 80004e4:	2120      	movs	r1, #32
 80004e6:	4653      	mov	r3, sl
 80004e8:	1a89      	subs	r1, r1, r2
 80004ea:	408b      	lsls	r3, r1
 80004ec:	001d      	movs	r5, r3
 80004ee:	4663      	mov	r3, ip
 80004f0:	40d3      	lsrs	r3, r2
 80004f2:	431d      	orrs	r5, r3
 80004f4:	4663      	mov	r3, ip
 80004f6:	408b      	lsls	r3, r1
 80004f8:	0019      	movs	r1, r3
 80004fa:	1e4b      	subs	r3, r1, #1
 80004fc:	4199      	sbcs	r1, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	40d3      	lsrs	r3, r2
 8000502:	430d      	orrs	r5, r1
 8000504:	18e4      	adds	r4, r4, r3
 8000506:	182d      	adds	r5, r5, r0
 8000508:	4285      	cmp	r5, r0
 800050a:	4180      	sbcs	r0, r0
 800050c:	4240      	negs	r0, r0
 800050e:	1824      	adds	r4, r4, r0
 8000510:	0223      	lsls	r3, r4, #8
 8000512:	d559      	bpl.n	80005c8 <__aeabi_dadd+0x2cc>
 8000514:	4b5b      	ldr	r3, [pc, #364]	@ (8000684 <__aeabi_dadd+0x388>)
 8000516:	3701      	adds	r7, #1
 8000518:	429f      	cmp	r7, r3
 800051a:	d051      	beq.n	80005c0 <__aeabi_dadd+0x2c4>
 800051c:	2101      	movs	r1, #1
 800051e:	4b5a      	ldr	r3, [pc, #360]	@ (8000688 <__aeabi_dadd+0x38c>)
 8000520:	086a      	lsrs	r2, r5, #1
 8000522:	401c      	ands	r4, r3
 8000524:	4029      	ands	r1, r5
 8000526:	430a      	orrs	r2, r1
 8000528:	07e5      	lsls	r5, r4, #31
 800052a:	4315      	orrs	r5, r2
 800052c:	0864      	lsrs	r4, r4, #1
 800052e:	e75f      	b.n	80003f0 <__aeabi_dadd+0xf4>
 8000530:	4661      	mov	r1, ip
 8000532:	4653      	mov	r3, sl
 8000534:	4319      	orrs	r1, r3
 8000536:	d100      	bne.n	800053a <__aeabi_dadd+0x23e>
 8000538:	e0bc      	b.n	80006b4 <__aeabi_dadd+0x3b8>
 800053a:	1e51      	subs	r1, r2, #1
 800053c:	2a01      	cmp	r2, #1
 800053e:	d100      	bne.n	8000542 <__aeabi_dadd+0x246>
 8000540:	e164      	b.n	800080c <__aeabi_dadd+0x510>
 8000542:	4d50      	ldr	r5, [pc, #320]	@ (8000684 <__aeabi_dadd+0x388>)
 8000544:	42aa      	cmp	r2, r5
 8000546:	d100      	bne.n	800054a <__aeabi_dadd+0x24e>
 8000548:	e16a      	b.n	8000820 <__aeabi_dadd+0x524>
 800054a:	2501      	movs	r5, #1
 800054c:	2938      	cmp	r1, #56	@ 0x38
 800054e:	dd00      	ble.n	8000552 <__aeabi_dadd+0x256>
 8000550:	e722      	b.n	8000398 <__aeabi_dadd+0x9c>
 8000552:	000a      	movs	r2, r1
 8000554:	e70e      	b.n	8000374 <__aeabi_dadd+0x78>
 8000556:	4a4d      	ldr	r2, [pc, #308]	@ (800068c <__aeabi_dadd+0x390>)
 8000558:	1c7d      	adds	r5, r7, #1
 800055a:	4215      	tst	r5, r2
 800055c:	d000      	beq.n	8000560 <__aeabi_dadd+0x264>
 800055e:	e0d0      	b.n	8000702 <__aeabi_dadd+0x406>
 8000560:	0025      	movs	r5, r4
 8000562:	4662      	mov	r2, ip
 8000564:	4653      	mov	r3, sl
 8000566:	4305      	orrs	r5, r0
 8000568:	431a      	orrs	r2, r3
 800056a:	2f00      	cmp	r7, #0
 800056c:	d000      	beq.n	8000570 <__aeabi_dadd+0x274>
 800056e:	e137      	b.n	80007e0 <__aeabi_dadd+0x4e4>
 8000570:	2d00      	cmp	r5, #0
 8000572:	d100      	bne.n	8000576 <__aeabi_dadd+0x27a>
 8000574:	e1a8      	b.n	80008c8 <__aeabi_dadd+0x5cc>
 8000576:	2a00      	cmp	r2, #0
 8000578:	d100      	bne.n	800057c <__aeabi_dadd+0x280>
 800057a:	e16a      	b.n	8000852 <__aeabi_dadd+0x556>
 800057c:	4663      	mov	r3, ip
 800057e:	1ac5      	subs	r5, r0, r3
 8000580:	4653      	mov	r3, sl
 8000582:	1ae2      	subs	r2, r4, r3
 8000584:	42a8      	cmp	r0, r5
 8000586:	419b      	sbcs	r3, r3
 8000588:	425b      	negs	r3, r3
 800058a:	1ad3      	subs	r3, r2, r3
 800058c:	021a      	lsls	r2, r3, #8
 800058e:	d400      	bmi.n	8000592 <__aeabi_dadd+0x296>
 8000590:	e203      	b.n	800099a <__aeabi_dadd+0x69e>
 8000592:	4663      	mov	r3, ip
 8000594:	1a1d      	subs	r5, r3, r0
 8000596:	45ac      	cmp	ip, r5
 8000598:	4192      	sbcs	r2, r2
 800059a:	4653      	mov	r3, sl
 800059c:	4252      	negs	r2, r2
 800059e:	1b1c      	subs	r4, r3, r4
 80005a0:	000e      	movs	r6, r1
 80005a2:	4688      	mov	r8, r1
 80005a4:	1aa4      	subs	r4, r4, r2
 80005a6:	e723      	b.n	80003f0 <__aeabi_dadd+0xf4>
 80005a8:	4936      	ldr	r1, [pc, #216]	@ (8000684 <__aeabi_dadd+0x388>)
 80005aa:	428f      	cmp	r7, r1
 80005ac:	d070      	beq.n	8000690 <__aeabi_dadd+0x394>
 80005ae:	2501      	movs	r5, #1
 80005b0:	2a38      	cmp	r2, #56	@ 0x38
 80005b2:	dca8      	bgt.n	8000506 <__aeabi_dadd+0x20a>
 80005b4:	2180      	movs	r1, #128	@ 0x80
 80005b6:	4653      	mov	r3, sl
 80005b8:	0409      	lsls	r1, r1, #16
 80005ba:	430b      	orrs	r3, r1
 80005bc:	469a      	mov	sl, r3
 80005be:	e78e      	b.n	80004de <__aeabi_dadd+0x1e2>
 80005c0:	003c      	movs	r4, r7
 80005c2:	2500      	movs	r5, #0
 80005c4:	2200      	movs	r2, #0
 80005c6:	e731      	b.n	800042c <__aeabi_dadd+0x130>
 80005c8:	2307      	movs	r3, #7
 80005ca:	402b      	ands	r3, r5
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d000      	beq.n	80005d2 <__aeabi_dadd+0x2d6>
 80005d0:	e710      	b.n	80003f4 <__aeabi_dadd+0xf8>
 80005d2:	e093      	b.n	80006fc <__aeabi_dadd+0x400>
 80005d4:	2a00      	cmp	r2, #0
 80005d6:	d074      	beq.n	80006c2 <__aeabi_dadd+0x3c6>
 80005d8:	464a      	mov	r2, r9
 80005da:	1bd2      	subs	r2, r2, r7
 80005dc:	2f00      	cmp	r7, #0
 80005de:	d100      	bne.n	80005e2 <__aeabi_dadd+0x2e6>
 80005e0:	e0c7      	b.n	8000772 <__aeabi_dadd+0x476>
 80005e2:	4928      	ldr	r1, [pc, #160]	@ (8000684 <__aeabi_dadd+0x388>)
 80005e4:	4589      	cmp	r9, r1
 80005e6:	d100      	bne.n	80005ea <__aeabi_dadd+0x2ee>
 80005e8:	e185      	b.n	80008f6 <__aeabi_dadd+0x5fa>
 80005ea:	2501      	movs	r5, #1
 80005ec:	2a38      	cmp	r2, #56	@ 0x38
 80005ee:	dc12      	bgt.n	8000616 <__aeabi_dadd+0x31a>
 80005f0:	2180      	movs	r1, #128	@ 0x80
 80005f2:	0409      	lsls	r1, r1, #16
 80005f4:	430c      	orrs	r4, r1
 80005f6:	2a1f      	cmp	r2, #31
 80005f8:	dd00      	ble.n	80005fc <__aeabi_dadd+0x300>
 80005fa:	e1ab      	b.n	8000954 <__aeabi_dadd+0x658>
 80005fc:	2120      	movs	r1, #32
 80005fe:	0025      	movs	r5, r4
 8000600:	1a89      	subs	r1, r1, r2
 8000602:	0007      	movs	r7, r0
 8000604:	4088      	lsls	r0, r1
 8000606:	408d      	lsls	r5, r1
 8000608:	40d7      	lsrs	r7, r2
 800060a:	1e41      	subs	r1, r0, #1
 800060c:	4188      	sbcs	r0, r1
 800060e:	40d4      	lsrs	r4, r2
 8000610:	433d      	orrs	r5, r7
 8000612:	4305      	orrs	r5, r0
 8000614:	44a2      	add	sl, r4
 8000616:	4465      	add	r5, ip
 8000618:	4565      	cmp	r5, ip
 800061a:	4192      	sbcs	r2, r2
 800061c:	4252      	negs	r2, r2
 800061e:	4452      	add	r2, sl
 8000620:	0014      	movs	r4, r2
 8000622:	464f      	mov	r7, r9
 8000624:	e774      	b.n	8000510 <__aeabi_dadd+0x214>
 8000626:	0028      	movs	r0, r5
 8000628:	f001 fc16 	bl	8001e58 <__clzsi2>
 800062c:	0003      	movs	r3, r0
 800062e:	3318      	adds	r3, #24
 8000630:	2b1f      	cmp	r3, #31
 8000632:	dc00      	bgt.n	8000636 <__aeabi_dadd+0x33a>
 8000634:	e6c2      	b.n	80003bc <__aeabi_dadd+0xc0>
 8000636:	002a      	movs	r2, r5
 8000638:	3808      	subs	r0, #8
 800063a:	4082      	lsls	r2, r0
 800063c:	429f      	cmp	r7, r3
 800063e:	dd00      	ble.n	8000642 <__aeabi_dadd+0x346>
 8000640:	e0a9      	b.n	8000796 <__aeabi_dadd+0x49a>
 8000642:	1bdb      	subs	r3, r3, r7
 8000644:	1c58      	adds	r0, r3, #1
 8000646:	281f      	cmp	r0, #31
 8000648:	dc00      	bgt.n	800064c <__aeabi_dadd+0x350>
 800064a:	e1ac      	b.n	80009a6 <__aeabi_dadd+0x6aa>
 800064c:	0015      	movs	r5, r2
 800064e:	3b1f      	subs	r3, #31
 8000650:	40dd      	lsrs	r5, r3
 8000652:	2820      	cmp	r0, #32
 8000654:	d005      	beq.n	8000662 <__aeabi_dadd+0x366>
 8000656:	2340      	movs	r3, #64	@ 0x40
 8000658:	1a1b      	subs	r3, r3, r0
 800065a:	409a      	lsls	r2, r3
 800065c:	1e53      	subs	r3, r2, #1
 800065e:	419a      	sbcs	r2, r3
 8000660:	4315      	orrs	r5, r2
 8000662:	2307      	movs	r3, #7
 8000664:	2700      	movs	r7, #0
 8000666:	402b      	ands	r3, r5
 8000668:	e7b0      	b.n	80005cc <__aeabi_dadd+0x2d0>
 800066a:	08ed      	lsrs	r5, r5, #3
 800066c:	4b05      	ldr	r3, [pc, #20]	@ (8000684 <__aeabi_dadd+0x388>)
 800066e:	0762      	lsls	r2, r4, #29
 8000670:	432a      	orrs	r2, r5
 8000672:	08e4      	lsrs	r4, r4, #3
 8000674:	429f      	cmp	r7, r3
 8000676:	d00f      	beq.n	8000698 <__aeabi_dadd+0x39c>
 8000678:	0324      	lsls	r4, r4, #12
 800067a:	0b25      	lsrs	r5, r4, #12
 800067c:	057c      	lsls	r4, r7, #21
 800067e:	0d64      	lsrs	r4, r4, #21
 8000680:	e6d4      	b.n	800042c <__aeabi_dadd+0x130>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	000007ff 	.word	0x000007ff
 8000688:	ff7fffff 	.word	0xff7fffff
 800068c:	000007fe 	.word	0x000007fe
 8000690:	08c0      	lsrs	r0, r0, #3
 8000692:	0762      	lsls	r2, r4, #29
 8000694:	4302      	orrs	r2, r0
 8000696:	08e4      	lsrs	r4, r4, #3
 8000698:	0013      	movs	r3, r2
 800069a:	4323      	orrs	r3, r4
 800069c:	d100      	bne.n	80006a0 <__aeabi_dadd+0x3a4>
 800069e:	e186      	b.n	80009ae <__aeabi_dadd+0x6b2>
 80006a0:	2580      	movs	r5, #128	@ 0x80
 80006a2:	032d      	lsls	r5, r5, #12
 80006a4:	4325      	orrs	r5, r4
 80006a6:	032d      	lsls	r5, r5, #12
 80006a8:	4cc3      	ldr	r4, [pc, #780]	@ (80009b8 <__aeabi_dadd+0x6bc>)
 80006aa:	0b2d      	lsrs	r5, r5, #12
 80006ac:	e6be      	b.n	800042c <__aeabi_dadd+0x130>
 80006ae:	4660      	mov	r0, ip
 80006b0:	4654      	mov	r4, sl
 80006b2:	000e      	movs	r6, r1
 80006b4:	0017      	movs	r7, r2
 80006b6:	08c5      	lsrs	r5, r0, #3
 80006b8:	e7d8      	b.n	800066c <__aeabi_dadd+0x370>
 80006ba:	4cc0      	ldr	r4, [pc, #768]	@ (80009bc <__aeabi_dadd+0x6c0>)
 80006bc:	1aff      	subs	r7, r7, r3
 80006be:	4014      	ands	r4, r2
 80006c0:	e696      	b.n	80003f0 <__aeabi_dadd+0xf4>
 80006c2:	4abf      	ldr	r2, [pc, #764]	@ (80009c0 <__aeabi_dadd+0x6c4>)
 80006c4:	1c79      	adds	r1, r7, #1
 80006c6:	4211      	tst	r1, r2
 80006c8:	d16b      	bne.n	80007a2 <__aeabi_dadd+0x4a6>
 80006ca:	0022      	movs	r2, r4
 80006cc:	4302      	orrs	r2, r0
 80006ce:	2f00      	cmp	r7, #0
 80006d0:	d000      	beq.n	80006d4 <__aeabi_dadd+0x3d8>
 80006d2:	e0db      	b.n	800088c <__aeabi_dadd+0x590>
 80006d4:	2a00      	cmp	r2, #0
 80006d6:	d100      	bne.n	80006da <__aeabi_dadd+0x3de>
 80006d8:	e12d      	b.n	8000936 <__aeabi_dadd+0x63a>
 80006da:	4662      	mov	r2, ip
 80006dc:	4653      	mov	r3, sl
 80006de:	431a      	orrs	r2, r3
 80006e0:	d100      	bne.n	80006e4 <__aeabi_dadd+0x3e8>
 80006e2:	e0b6      	b.n	8000852 <__aeabi_dadd+0x556>
 80006e4:	4663      	mov	r3, ip
 80006e6:	18c5      	adds	r5, r0, r3
 80006e8:	4285      	cmp	r5, r0
 80006ea:	4180      	sbcs	r0, r0
 80006ec:	4454      	add	r4, sl
 80006ee:	4240      	negs	r0, r0
 80006f0:	1824      	adds	r4, r4, r0
 80006f2:	0223      	lsls	r3, r4, #8
 80006f4:	d502      	bpl.n	80006fc <__aeabi_dadd+0x400>
 80006f6:	000f      	movs	r7, r1
 80006f8:	4bb0      	ldr	r3, [pc, #704]	@ (80009bc <__aeabi_dadd+0x6c0>)
 80006fa:	401c      	ands	r4, r3
 80006fc:	003a      	movs	r2, r7
 80006fe:	0028      	movs	r0, r5
 8000700:	e7d8      	b.n	80006b4 <__aeabi_dadd+0x3b8>
 8000702:	4662      	mov	r2, ip
 8000704:	1a85      	subs	r5, r0, r2
 8000706:	42a8      	cmp	r0, r5
 8000708:	4192      	sbcs	r2, r2
 800070a:	4653      	mov	r3, sl
 800070c:	4252      	negs	r2, r2
 800070e:	4691      	mov	r9, r2
 8000710:	1ae3      	subs	r3, r4, r3
 8000712:	001a      	movs	r2, r3
 8000714:	464b      	mov	r3, r9
 8000716:	1ad2      	subs	r2, r2, r3
 8000718:	0013      	movs	r3, r2
 800071a:	4691      	mov	r9, r2
 800071c:	021a      	lsls	r2, r3, #8
 800071e:	d454      	bmi.n	80007ca <__aeabi_dadd+0x4ce>
 8000720:	464a      	mov	r2, r9
 8000722:	464c      	mov	r4, r9
 8000724:	432a      	orrs	r2, r5
 8000726:	d000      	beq.n	800072a <__aeabi_dadd+0x42e>
 8000728:	e640      	b.n	80003ac <__aeabi_dadd+0xb0>
 800072a:	2600      	movs	r6, #0
 800072c:	2400      	movs	r4, #0
 800072e:	2500      	movs	r5, #0
 8000730:	e67c      	b.n	800042c <__aeabi_dadd+0x130>
 8000732:	4da1      	ldr	r5, [pc, #644]	@ (80009b8 <__aeabi_dadd+0x6bc>)
 8000734:	45a9      	cmp	r9, r5
 8000736:	d100      	bne.n	800073a <__aeabi_dadd+0x43e>
 8000738:	e090      	b.n	800085c <__aeabi_dadd+0x560>
 800073a:	2501      	movs	r5, #1
 800073c:	2a38      	cmp	r2, #56	@ 0x38
 800073e:	dd00      	ble.n	8000742 <__aeabi_dadd+0x446>
 8000740:	e6ab      	b.n	800049a <__aeabi_dadd+0x19e>
 8000742:	2580      	movs	r5, #128	@ 0x80
 8000744:	042d      	lsls	r5, r5, #16
 8000746:	432c      	orrs	r4, r5
 8000748:	e695      	b.n	8000476 <__aeabi_dadd+0x17a>
 800074a:	0011      	movs	r1, r2
 800074c:	4655      	mov	r5, sl
 800074e:	3920      	subs	r1, #32
 8000750:	40cd      	lsrs	r5, r1
 8000752:	46a9      	mov	r9, r5
 8000754:	2a20      	cmp	r2, #32
 8000756:	d006      	beq.n	8000766 <__aeabi_dadd+0x46a>
 8000758:	2140      	movs	r1, #64	@ 0x40
 800075a:	4653      	mov	r3, sl
 800075c:	1a8a      	subs	r2, r1, r2
 800075e:	4093      	lsls	r3, r2
 8000760:	4662      	mov	r2, ip
 8000762:	431a      	orrs	r2, r3
 8000764:	4694      	mov	ip, r2
 8000766:	4665      	mov	r5, ip
 8000768:	1e6b      	subs	r3, r5, #1
 800076a:	419d      	sbcs	r5, r3
 800076c:	464b      	mov	r3, r9
 800076e:	431d      	orrs	r5, r3
 8000770:	e612      	b.n	8000398 <__aeabi_dadd+0x9c>
 8000772:	0021      	movs	r1, r4
 8000774:	4301      	orrs	r1, r0
 8000776:	d100      	bne.n	800077a <__aeabi_dadd+0x47e>
 8000778:	e0c4      	b.n	8000904 <__aeabi_dadd+0x608>
 800077a:	1e51      	subs	r1, r2, #1
 800077c:	2a01      	cmp	r2, #1
 800077e:	d100      	bne.n	8000782 <__aeabi_dadd+0x486>
 8000780:	e0fb      	b.n	800097a <__aeabi_dadd+0x67e>
 8000782:	4d8d      	ldr	r5, [pc, #564]	@ (80009b8 <__aeabi_dadd+0x6bc>)
 8000784:	42aa      	cmp	r2, r5
 8000786:	d100      	bne.n	800078a <__aeabi_dadd+0x48e>
 8000788:	e0b5      	b.n	80008f6 <__aeabi_dadd+0x5fa>
 800078a:	2501      	movs	r5, #1
 800078c:	2938      	cmp	r1, #56	@ 0x38
 800078e:	dd00      	ble.n	8000792 <__aeabi_dadd+0x496>
 8000790:	e741      	b.n	8000616 <__aeabi_dadd+0x31a>
 8000792:	000a      	movs	r2, r1
 8000794:	e72f      	b.n	80005f6 <__aeabi_dadd+0x2fa>
 8000796:	4c89      	ldr	r4, [pc, #548]	@ (80009bc <__aeabi_dadd+0x6c0>)
 8000798:	1aff      	subs	r7, r7, r3
 800079a:	4014      	ands	r4, r2
 800079c:	0762      	lsls	r2, r4, #29
 800079e:	08e4      	lsrs	r4, r4, #3
 80007a0:	e76a      	b.n	8000678 <__aeabi_dadd+0x37c>
 80007a2:	4a85      	ldr	r2, [pc, #532]	@ (80009b8 <__aeabi_dadd+0x6bc>)
 80007a4:	4291      	cmp	r1, r2
 80007a6:	d100      	bne.n	80007aa <__aeabi_dadd+0x4ae>
 80007a8:	e0e3      	b.n	8000972 <__aeabi_dadd+0x676>
 80007aa:	4663      	mov	r3, ip
 80007ac:	18c2      	adds	r2, r0, r3
 80007ae:	4282      	cmp	r2, r0
 80007b0:	4180      	sbcs	r0, r0
 80007b2:	0023      	movs	r3, r4
 80007b4:	4240      	negs	r0, r0
 80007b6:	4453      	add	r3, sl
 80007b8:	181b      	adds	r3, r3, r0
 80007ba:	07dd      	lsls	r5, r3, #31
 80007bc:	085c      	lsrs	r4, r3, #1
 80007be:	2307      	movs	r3, #7
 80007c0:	0852      	lsrs	r2, r2, #1
 80007c2:	4315      	orrs	r5, r2
 80007c4:	000f      	movs	r7, r1
 80007c6:	402b      	ands	r3, r5
 80007c8:	e700      	b.n	80005cc <__aeabi_dadd+0x2d0>
 80007ca:	4663      	mov	r3, ip
 80007cc:	1a1d      	subs	r5, r3, r0
 80007ce:	45ac      	cmp	ip, r5
 80007d0:	4192      	sbcs	r2, r2
 80007d2:	4653      	mov	r3, sl
 80007d4:	4252      	negs	r2, r2
 80007d6:	1b1c      	subs	r4, r3, r4
 80007d8:	000e      	movs	r6, r1
 80007da:	4688      	mov	r8, r1
 80007dc:	1aa4      	subs	r4, r4, r2
 80007de:	e5e5      	b.n	80003ac <__aeabi_dadd+0xb0>
 80007e0:	2d00      	cmp	r5, #0
 80007e2:	d000      	beq.n	80007e6 <__aeabi_dadd+0x4ea>
 80007e4:	e091      	b.n	800090a <__aeabi_dadd+0x60e>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	d138      	bne.n	800085c <__aeabi_dadd+0x560>
 80007ea:	2480      	movs	r4, #128	@ 0x80
 80007ec:	2600      	movs	r6, #0
 80007ee:	0324      	lsls	r4, r4, #12
 80007f0:	e756      	b.n	80006a0 <__aeabi_dadd+0x3a4>
 80007f2:	4663      	mov	r3, ip
 80007f4:	18c5      	adds	r5, r0, r3
 80007f6:	4285      	cmp	r5, r0
 80007f8:	4180      	sbcs	r0, r0
 80007fa:	4454      	add	r4, sl
 80007fc:	4240      	negs	r0, r0
 80007fe:	1824      	adds	r4, r4, r0
 8000800:	2701      	movs	r7, #1
 8000802:	0223      	lsls	r3, r4, #8
 8000804:	d400      	bmi.n	8000808 <__aeabi_dadd+0x50c>
 8000806:	e6df      	b.n	80005c8 <__aeabi_dadd+0x2cc>
 8000808:	2702      	movs	r7, #2
 800080a:	e687      	b.n	800051c <__aeabi_dadd+0x220>
 800080c:	4663      	mov	r3, ip
 800080e:	1ac5      	subs	r5, r0, r3
 8000810:	42a8      	cmp	r0, r5
 8000812:	4180      	sbcs	r0, r0
 8000814:	4653      	mov	r3, sl
 8000816:	4240      	negs	r0, r0
 8000818:	1ae4      	subs	r4, r4, r3
 800081a:	2701      	movs	r7, #1
 800081c:	1a24      	subs	r4, r4, r0
 800081e:	e5c0      	b.n	80003a2 <__aeabi_dadd+0xa6>
 8000820:	0762      	lsls	r2, r4, #29
 8000822:	08c0      	lsrs	r0, r0, #3
 8000824:	4302      	orrs	r2, r0
 8000826:	08e4      	lsrs	r4, r4, #3
 8000828:	e736      	b.n	8000698 <__aeabi_dadd+0x39c>
 800082a:	0011      	movs	r1, r2
 800082c:	4653      	mov	r3, sl
 800082e:	3920      	subs	r1, #32
 8000830:	40cb      	lsrs	r3, r1
 8000832:	4699      	mov	r9, r3
 8000834:	2a20      	cmp	r2, #32
 8000836:	d006      	beq.n	8000846 <__aeabi_dadd+0x54a>
 8000838:	2140      	movs	r1, #64	@ 0x40
 800083a:	4653      	mov	r3, sl
 800083c:	1a8a      	subs	r2, r1, r2
 800083e:	4093      	lsls	r3, r2
 8000840:	4662      	mov	r2, ip
 8000842:	431a      	orrs	r2, r3
 8000844:	4694      	mov	ip, r2
 8000846:	4665      	mov	r5, ip
 8000848:	1e6b      	subs	r3, r5, #1
 800084a:	419d      	sbcs	r5, r3
 800084c:	464b      	mov	r3, r9
 800084e:	431d      	orrs	r5, r3
 8000850:	e659      	b.n	8000506 <__aeabi_dadd+0x20a>
 8000852:	0762      	lsls	r2, r4, #29
 8000854:	08c0      	lsrs	r0, r0, #3
 8000856:	4302      	orrs	r2, r0
 8000858:	08e4      	lsrs	r4, r4, #3
 800085a:	e70d      	b.n	8000678 <__aeabi_dadd+0x37c>
 800085c:	4653      	mov	r3, sl
 800085e:	075a      	lsls	r2, r3, #29
 8000860:	4663      	mov	r3, ip
 8000862:	08d8      	lsrs	r0, r3, #3
 8000864:	4653      	mov	r3, sl
 8000866:	000e      	movs	r6, r1
 8000868:	4302      	orrs	r2, r0
 800086a:	08dc      	lsrs	r4, r3, #3
 800086c:	e714      	b.n	8000698 <__aeabi_dadd+0x39c>
 800086e:	0015      	movs	r5, r2
 8000870:	0026      	movs	r6, r4
 8000872:	3d20      	subs	r5, #32
 8000874:	40ee      	lsrs	r6, r5
 8000876:	2a20      	cmp	r2, #32
 8000878:	d003      	beq.n	8000882 <__aeabi_dadd+0x586>
 800087a:	2540      	movs	r5, #64	@ 0x40
 800087c:	1aaa      	subs	r2, r5, r2
 800087e:	4094      	lsls	r4, r2
 8000880:	4320      	orrs	r0, r4
 8000882:	1e42      	subs	r2, r0, #1
 8000884:	4190      	sbcs	r0, r2
 8000886:	0005      	movs	r5, r0
 8000888:	4335      	orrs	r5, r6
 800088a:	e606      	b.n	800049a <__aeabi_dadd+0x19e>
 800088c:	2a00      	cmp	r2, #0
 800088e:	d07c      	beq.n	800098a <__aeabi_dadd+0x68e>
 8000890:	4662      	mov	r2, ip
 8000892:	4653      	mov	r3, sl
 8000894:	08c0      	lsrs	r0, r0, #3
 8000896:	431a      	orrs	r2, r3
 8000898:	d100      	bne.n	800089c <__aeabi_dadd+0x5a0>
 800089a:	e6fa      	b.n	8000692 <__aeabi_dadd+0x396>
 800089c:	0762      	lsls	r2, r4, #29
 800089e:	4310      	orrs	r0, r2
 80008a0:	2280      	movs	r2, #128	@ 0x80
 80008a2:	08e4      	lsrs	r4, r4, #3
 80008a4:	0312      	lsls	r2, r2, #12
 80008a6:	4214      	tst	r4, r2
 80008a8:	d008      	beq.n	80008bc <__aeabi_dadd+0x5c0>
 80008aa:	08d9      	lsrs	r1, r3, #3
 80008ac:	4211      	tst	r1, r2
 80008ae:	d105      	bne.n	80008bc <__aeabi_dadd+0x5c0>
 80008b0:	4663      	mov	r3, ip
 80008b2:	08d8      	lsrs	r0, r3, #3
 80008b4:	4653      	mov	r3, sl
 80008b6:	000c      	movs	r4, r1
 80008b8:	075b      	lsls	r3, r3, #29
 80008ba:	4318      	orrs	r0, r3
 80008bc:	0f42      	lsrs	r2, r0, #29
 80008be:	00c0      	lsls	r0, r0, #3
 80008c0:	08c0      	lsrs	r0, r0, #3
 80008c2:	0752      	lsls	r2, r2, #29
 80008c4:	4302      	orrs	r2, r0
 80008c6:	e6e7      	b.n	8000698 <__aeabi_dadd+0x39c>
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	d100      	bne.n	80008ce <__aeabi_dadd+0x5d2>
 80008cc:	e72d      	b.n	800072a <__aeabi_dadd+0x42e>
 80008ce:	4663      	mov	r3, ip
 80008d0:	08d8      	lsrs	r0, r3, #3
 80008d2:	4653      	mov	r3, sl
 80008d4:	075a      	lsls	r2, r3, #29
 80008d6:	000e      	movs	r6, r1
 80008d8:	4302      	orrs	r2, r0
 80008da:	08dc      	lsrs	r4, r3, #3
 80008dc:	e6cc      	b.n	8000678 <__aeabi_dadd+0x37c>
 80008de:	4663      	mov	r3, ip
 80008e0:	1a1d      	subs	r5, r3, r0
 80008e2:	45ac      	cmp	ip, r5
 80008e4:	4192      	sbcs	r2, r2
 80008e6:	4653      	mov	r3, sl
 80008e8:	4252      	negs	r2, r2
 80008ea:	1b1c      	subs	r4, r3, r4
 80008ec:	000e      	movs	r6, r1
 80008ee:	4688      	mov	r8, r1
 80008f0:	1aa4      	subs	r4, r4, r2
 80008f2:	3701      	adds	r7, #1
 80008f4:	e555      	b.n	80003a2 <__aeabi_dadd+0xa6>
 80008f6:	4663      	mov	r3, ip
 80008f8:	08d9      	lsrs	r1, r3, #3
 80008fa:	4653      	mov	r3, sl
 80008fc:	075a      	lsls	r2, r3, #29
 80008fe:	430a      	orrs	r2, r1
 8000900:	08dc      	lsrs	r4, r3, #3
 8000902:	e6c9      	b.n	8000698 <__aeabi_dadd+0x39c>
 8000904:	4660      	mov	r0, ip
 8000906:	4654      	mov	r4, sl
 8000908:	e6d4      	b.n	80006b4 <__aeabi_dadd+0x3b8>
 800090a:	08c0      	lsrs	r0, r0, #3
 800090c:	2a00      	cmp	r2, #0
 800090e:	d100      	bne.n	8000912 <__aeabi_dadd+0x616>
 8000910:	e6bf      	b.n	8000692 <__aeabi_dadd+0x396>
 8000912:	0762      	lsls	r2, r4, #29
 8000914:	4310      	orrs	r0, r2
 8000916:	2280      	movs	r2, #128	@ 0x80
 8000918:	08e4      	lsrs	r4, r4, #3
 800091a:	0312      	lsls	r2, r2, #12
 800091c:	4214      	tst	r4, r2
 800091e:	d0cd      	beq.n	80008bc <__aeabi_dadd+0x5c0>
 8000920:	08dd      	lsrs	r5, r3, #3
 8000922:	4215      	tst	r5, r2
 8000924:	d1ca      	bne.n	80008bc <__aeabi_dadd+0x5c0>
 8000926:	4663      	mov	r3, ip
 8000928:	08d8      	lsrs	r0, r3, #3
 800092a:	4653      	mov	r3, sl
 800092c:	075b      	lsls	r3, r3, #29
 800092e:	000e      	movs	r6, r1
 8000930:	002c      	movs	r4, r5
 8000932:	4318      	orrs	r0, r3
 8000934:	e7c2      	b.n	80008bc <__aeabi_dadd+0x5c0>
 8000936:	4663      	mov	r3, ip
 8000938:	08d9      	lsrs	r1, r3, #3
 800093a:	4653      	mov	r3, sl
 800093c:	075a      	lsls	r2, r3, #29
 800093e:	430a      	orrs	r2, r1
 8000940:	08dc      	lsrs	r4, r3, #3
 8000942:	e699      	b.n	8000678 <__aeabi_dadd+0x37c>
 8000944:	4663      	mov	r3, ip
 8000946:	08d8      	lsrs	r0, r3, #3
 8000948:	4653      	mov	r3, sl
 800094a:	075a      	lsls	r2, r3, #29
 800094c:	000e      	movs	r6, r1
 800094e:	4302      	orrs	r2, r0
 8000950:	08dc      	lsrs	r4, r3, #3
 8000952:	e6a1      	b.n	8000698 <__aeabi_dadd+0x39c>
 8000954:	0011      	movs	r1, r2
 8000956:	0027      	movs	r7, r4
 8000958:	3920      	subs	r1, #32
 800095a:	40cf      	lsrs	r7, r1
 800095c:	2a20      	cmp	r2, #32
 800095e:	d003      	beq.n	8000968 <__aeabi_dadd+0x66c>
 8000960:	2140      	movs	r1, #64	@ 0x40
 8000962:	1a8a      	subs	r2, r1, r2
 8000964:	4094      	lsls	r4, r2
 8000966:	4320      	orrs	r0, r4
 8000968:	1e42      	subs	r2, r0, #1
 800096a:	4190      	sbcs	r0, r2
 800096c:	0005      	movs	r5, r0
 800096e:	433d      	orrs	r5, r7
 8000970:	e651      	b.n	8000616 <__aeabi_dadd+0x31a>
 8000972:	000c      	movs	r4, r1
 8000974:	2500      	movs	r5, #0
 8000976:	2200      	movs	r2, #0
 8000978:	e558      	b.n	800042c <__aeabi_dadd+0x130>
 800097a:	4460      	add	r0, ip
 800097c:	4560      	cmp	r0, ip
 800097e:	4192      	sbcs	r2, r2
 8000980:	4454      	add	r4, sl
 8000982:	4252      	negs	r2, r2
 8000984:	0005      	movs	r5, r0
 8000986:	18a4      	adds	r4, r4, r2
 8000988:	e73a      	b.n	8000800 <__aeabi_dadd+0x504>
 800098a:	4653      	mov	r3, sl
 800098c:	075a      	lsls	r2, r3, #29
 800098e:	4663      	mov	r3, ip
 8000990:	08d9      	lsrs	r1, r3, #3
 8000992:	4653      	mov	r3, sl
 8000994:	430a      	orrs	r2, r1
 8000996:	08dc      	lsrs	r4, r3, #3
 8000998:	e67e      	b.n	8000698 <__aeabi_dadd+0x39c>
 800099a:	001a      	movs	r2, r3
 800099c:	001c      	movs	r4, r3
 800099e:	432a      	orrs	r2, r5
 80009a0:	d000      	beq.n	80009a4 <__aeabi_dadd+0x6a8>
 80009a2:	e6ab      	b.n	80006fc <__aeabi_dadd+0x400>
 80009a4:	e6c1      	b.n	800072a <__aeabi_dadd+0x42e>
 80009a6:	2120      	movs	r1, #32
 80009a8:	2500      	movs	r5, #0
 80009aa:	1a09      	subs	r1, r1, r0
 80009ac:	e519      	b.n	80003e2 <__aeabi_dadd+0xe6>
 80009ae:	2200      	movs	r2, #0
 80009b0:	2500      	movs	r5, #0
 80009b2:	4c01      	ldr	r4, [pc, #4]	@ (80009b8 <__aeabi_dadd+0x6bc>)
 80009b4:	e53a      	b.n	800042c <__aeabi_dadd+0x130>
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	000007ff 	.word	0x000007ff
 80009bc:	ff7fffff 	.word	0xff7fffff
 80009c0:	000007fe 	.word	0x000007fe

080009c4 <__aeabi_ddiv>:
 80009c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009c6:	46de      	mov	lr, fp
 80009c8:	4645      	mov	r5, r8
 80009ca:	4657      	mov	r7, sl
 80009cc:	464e      	mov	r6, r9
 80009ce:	b5e0      	push	{r5, r6, r7, lr}
 80009d0:	b087      	sub	sp, #28
 80009d2:	9200      	str	r2, [sp, #0]
 80009d4:	9301      	str	r3, [sp, #4]
 80009d6:	030b      	lsls	r3, r1, #12
 80009d8:	0b1b      	lsrs	r3, r3, #12
 80009da:	469b      	mov	fp, r3
 80009dc:	0fca      	lsrs	r2, r1, #31
 80009de:	004b      	lsls	r3, r1, #1
 80009e0:	0004      	movs	r4, r0
 80009e2:	4680      	mov	r8, r0
 80009e4:	0d5b      	lsrs	r3, r3, #21
 80009e6:	9202      	str	r2, [sp, #8]
 80009e8:	d100      	bne.n	80009ec <__aeabi_ddiv+0x28>
 80009ea:	e16a      	b.n	8000cc2 <__aeabi_ddiv+0x2fe>
 80009ec:	4ad4      	ldr	r2, [pc, #848]	@ (8000d40 <__aeabi_ddiv+0x37c>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d100      	bne.n	80009f4 <__aeabi_ddiv+0x30>
 80009f2:	e18c      	b.n	8000d0e <__aeabi_ddiv+0x34a>
 80009f4:	4659      	mov	r1, fp
 80009f6:	0f42      	lsrs	r2, r0, #29
 80009f8:	00c9      	lsls	r1, r1, #3
 80009fa:	430a      	orrs	r2, r1
 80009fc:	2180      	movs	r1, #128	@ 0x80
 80009fe:	0409      	lsls	r1, r1, #16
 8000a00:	4311      	orrs	r1, r2
 8000a02:	00c2      	lsls	r2, r0, #3
 8000a04:	4690      	mov	r8, r2
 8000a06:	4acf      	ldr	r2, [pc, #828]	@ (8000d44 <__aeabi_ddiv+0x380>)
 8000a08:	4689      	mov	r9, r1
 8000a0a:	4692      	mov	sl, r2
 8000a0c:	449a      	add	sl, r3
 8000a0e:	2300      	movs	r3, #0
 8000a10:	2400      	movs	r4, #0
 8000a12:	9303      	str	r3, [sp, #12]
 8000a14:	9e00      	ldr	r6, [sp, #0]
 8000a16:	9f01      	ldr	r7, [sp, #4]
 8000a18:	033b      	lsls	r3, r7, #12
 8000a1a:	0b1b      	lsrs	r3, r3, #12
 8000a1c:	469b      	mov	fp, r3
 8000a1e:	007b      	lsls	r3, r7, #1
 8000a20:	0030      	movs	r0, r6
 8000a22:	0d5b      	lsrs	r3, r3, #21
 8000a24:	0ffd      	lsrs	r5, r7, #31
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d100      	bne.n	8000a2c <__aeabi_ddiv+0x68>
 8000a2a:	e128      	b.n	8000c7e <__aeabi_ddiv+0x2ba>
 8000a2c:	4ac4      	ldr	r2, [pc, #784]	@ (8000d40 <__aeabi_ddiv+0x37c>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d100      	bne.n	8000a34 <__aeabi_ddiv+0x70>
 8000a32:	e177      	b.n	8000d24 <__aeabi_ddiv+0x360>
 8000a34:	4659      	mov	r1, fp
 8000a36:	0f72      	lsrs	r2, r6, #29
 8000a38:	00c9      	lsls	r1, r1, #3
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	2180      	movs	r1, #128	@ 0x80
 8000a3e:	0409      	lsls	r1, r1, #16
 8000a40:	4311      	orrs	r1, r2
 8000a42:	468b      	mov	fp, r1
 8000a44:	49bf      	ldr	r1, [pc, #764]	@ (8000d44 <__aeabi_ddiv+0x380>)
 8000a46:	00f2      	lsls	r2, r6, #3
 8000a48:	468c      	mov	ip, r1
 8000a4a:	4651      	mov	r1, sl
 8000a4c:	4463      	add	r3, ip
 8000a4e:	1acb      	subs	r3, r1, r3
 8000a50:	469a      	mov	sl, r3
 8000a52:	2300      	movs	r3, #0
 8000a54:	9e02      	ldr	r6, [sp, #8]
 8000a56:	406e      	eors	r6, r5
 8000a58:	2c0f      	cmp	r4, #15
 8000a5a:	d827      	bhi.n	8000aac <__aeabi_ddiv+0xe8>
 8000a5c:	49ba      	ldr	r1, [pc, #744]	@ (8000d48 <__aeabi_ddiv+0x384>)
 8000a5e:	00a4      	lsls	r4, r4, #2
 8000a60:	5909      	ldr	r1, [r1, r4]
 8000a62:	468f      	mov	pc, r1
 8000a64:	46cb      	mov	fp, r9
 8000a66:	4642      	mov	r2, r8
 8000a68:	9e02      	ldr	r6, [sp, #8]
 8000a6a:	9b03      	ldr	r3, [sp, #12]
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	d016      	beq.n	8000a9e <__aeabi_ddiv+0xda>
 8000a70:	2b03      	cmp	r3, #3
 8000a72:	d100      	bne.n	8000a76 <__aeabi_ddiv+0xb2>
 8000a74:	e2a6      	b.n	8000fc4 <__aeabi_ddiv+0x600>
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d000      	beq.n	8000a7c <__aeabi_ddiv+0xb8>
 8000a7a:	e0df      	b.n	8000c3c <__aeabi_ddiv+0x278>
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2300      	movs	r3, #0
 8000a80:	2400      	movs	r4, #0
 8000a82:	4690      	mov	r8, r2
 8000a84:	051b      	lsls	r3, r3, #20
 8000a86:	4323      	orrs	r3, r4
 8000a88:	07f6      	lsls	r6, r6, #31
 8000a8a:	4333      	orrs	r3, r6
 8000a8c:	4640      	mov	r0, r8
 8000a8e:	0019      	movs	r1, r3
 8000a90:	b007      	add	sp, #28
 8000a92:	bcf0      	pop	{r4, r5, r6, r7}
 8000a94:	46bb      	mov	fp, r7
 8000a96:	46b2      	mov	sl, r6
 8000a98:	46a9      	mov	r9, r5
 8000a9a:	46a0      	mov	r8, r4
 8000a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2400      	movs	r4, #0
 8000aa2:	4690      	mov	r8, r2
 8000aa4:	4ba6      	ldr	r3, [pc, #664]	@ (8000d40 <__aeabi_ddiv+0x37c>)
 8000aa6:	e7ed      	b.n	8000a84 <__aeabi_ddiv+0xc0>
 8000aa8:	002e      	movs	r6, r5
 8000aaa:	e7df      	b.n	8000a6c <__aeabi_ddiv+0xa8>
 8000aac:	45cb      	cmp	fp, r9
 8000aae:	d200      	bcs.n	8000ab2 <__aeabi_ddiv+0xee>
 8000ab0:	e1d4      	b.n	8000e5c <__aeabi_ddiv+0x498>
 8000ab2:	d100      	bne.n	8000ab6 <__aeabi_ddiv+0xf2>
 8000ab4:	e1cf      	b.n	8000e56 <__aeabi_ddiv+0x492>
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	425b      	negs	r3, r3
 8000aba:	469c      	mov	ip, r3
 8000abc:	4644      	mov	r4, r8
 8000abe:	4648      	mov	r0, r9
 8000ac0:	2700      	movs	r7, #0
 8000ac2:	44e2      	add	sl, ip
 8000ac4:	465b      	mov	r3, fp
 8000ac6:	0e15      	lsrs	r5, r2, #24
 8000ac8:	021b      	lsls	r3, r3, #8
 8000aca:	431d      	orrs	r5, r3
 8000acc:	0c19      	lsrs	r1, r3, #16
 8000ace:	042b      	lsls	r3, r5, #16
 8000ad0:	0212      	lsls	r2, r2, #8
 8000ad2:	9500      	str	r5, [sp, #0]
 8000ad4:	0c1d      	lsrs	r5, r3, #16
 8000ad6:	4691      	mov	r9, r2
 8000ad8:	9102      	str	r1, [sp, #8]
 8000ada:	9503      	str	r5, [sp, #12]
 8000adc:	f7ff fb9a 	bl	8000214 <__aeabi_uidivmod>
 8000ae0:	0002      	movs	r2, r0
 8000ae2:	436a      	muls	r2, r5
 8000ae4:	040b      	lsls	r3, r1, #16
 8000ae6:	0c21      	lsrs	r1, r4, #16
 8000ae8:	4680      	mov	r8, r0
 8000aea:	4319      	orrs	r1, r3
 8000aec:	428a      	cmp	r2, r1
 8000aee:	d909      	bls.n	8000b04 <__aeabi_ddiv+0x140>
 8000af0:	9d00      	ldr	r5, [sp, #0]
 8000af2:	2301      	movs	r3, #1
 8000af4:	46ac      	mov	ip, r5
 8000af6:	425b      	negs	r3, r3
 8000af8:	4461      	add	r1, ip
 8000afa:	469c      	mov	ip, r3
 8000afc:	44e0      	add	r8, ip
 8000afe:	428d      	cmp	r5, r1
 8000b00:	d800      	bhi.n	8000b04 <__aeabi_ddiv+0x140>
 8000b02:	e1fb      	b.n	8000efc <__aeabi_ddiv+0x538>
 8000b04:	1a88      	subs	r0, r1, r2
 8000b06:	9902      	ldr	r1, [sp, #8]
 8000b08:	f7ff fb84 	bl	8000214 <__aeabi_uidivmod>
 8000b0c:	9a03      	ldr	r2, [sp, #12]
 8000b0e:	0424      	lsls	r4, r4, #16
 8000b10:	4342      	muls	r2, r0
 8000b12:	0409      	lsls	r1, r1, #16
 8000b14:	0c24      	lsrs	r4, r4, #16
 8000b16:	0003      	movs	r3, r0
 8000b18:	430c      	orrs	r4, r1
 8000b1a:	42a2      	cmp	r2, r4
 8000b1c:	d906      	bls.n	8000b2c <__aeabi_ddiv+0x168>
 8000b1e:	9900      	ldr	r1, [sp, #0]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	468c      	mov	ip, r1
 8000b24:	4464      	add	r4, ip
 8000b26:	42a1      	cmp	r1, r4
 8000b28:	d800      	bhi.n	8000b2c <__aeabi_ddiv+0x168>
 8000b2a:	e1e1      	b.n	8000ef0 <__aeabi_ddiv+0x52c>
 8000b2c:	1aa0      	subs	r0, r4, r2
 8000b2e:	4642      	mov	r2, r8
 8000b30:	0412      	lsls	r2, r2, #16
 8000b32:	431a      	orrs	r2, r3
 8000b34:	4693      	mov	fp, r2
 8000b36:	464b      	mov	r3, r9
 8000b38:	4659      	mov	r1, fp
 8000b3a:	0c1b      	lsrs	r3, r3, #16
 8000b3c:	001d      	movs	r5, r3
 8000b3e:	9304      	str	r3, [sp, #16]
 8000b40:	040b      	lsls	r3, r1, #16
 8000b42:	4649      	mov	r1, r9
 8000b44:	0409      	lsls	r1, r1, #16
 8000b46:	0c09      	lsrs	r1, r1, #16
 8000b48:	000c      	movs	r4, r1
 8000b4a:	0c1b      	lsrs	r3, r3, #16
 8000b4c:	435c      	muls	r4, r3
 8000b4e:	0c12      	lsrs	r2, r2, #16
 8000b50:	436b      	muls	r3, r5
 8000b52:	4688      	mov	r8, r1
 8000b54:	4351      	muls	r1, r2
 8000b56:	436a      	muls	r2, r5
 8000b58:	0c25      	lsrs	r5, r4, #16
 8000b5a:	46ac      	mov	ip, r5
 8000b5c:	185b      	adds	r3, r3, r1
 8000b5e:	4463      	add	r3, ip
 8000b60:	4299      	cmp	r1, r3
 8000b62:	d903      	bls.n	8000b6c <__aeabi_ddiv+0x1a8>
 8000b64:	2180      	movs	r1, #128	@ 0x80
 8000b66:	0249      	lsls	r1, r1, #9
 8000b68:	468c      	mov	ip, r1
 8000b6a:	4462      	add	r2, ip
 8000b6c:	0c19      	lsrs	r1, r3, #16
 8000b6e:	0424      	lsls	r4, r4, #16
 8000b70:	041b      	lsls	r3, r3, #16
 8000b72:	0c24      	lsrs	r4, r4, #16
 8000b74:	188a      	adds	r2, r1, r2
 8000b76:	191c      	adds	r4, r3, r4
 8000b78:	4290      	cmp	r0, r2
 8000b7a:	d302      	bcc.n	8000b82 <__aeabi_ddiv+0x1be>
 8000b7c:	d116      	bne.n	8000bac <__aeabi_ddiv+0x1e8>
 8000b7e:	42a7      	cmp	r7, r4
 8000b80:	d214      	bcs.n	8000bac <__aeabi_ddiv+0x1e8>
 8000b82:	465b      	mov	r3, fp
 8000b84:	9d00      	ldr	r5, [sp, #0]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	444f      	add	r7, r9
 8000b8a:	9305      	str	r3, [sp, #20]
 8000b8c:	454f      	cmp	r7, r9
 8000b8e:	419b      	sbcs	r3, r3
 8000b90:	46ac      	mov	ip, r5
 8000b92:	425b      	negs	r3, r3
 8000b94:	4463      	add	r3, ip
 8000b96:	18c0      	adds	r0, r0, r3
 8000b98:	4285      	cmp	r5, r0
 8000b9a:	d300      	bcc.n	8000b9e <__aeabi_ddiv+0x1da>
 8000b9c:	e1a1      	b.n	8000ee2 <__aeabi_ddiv+0x51e>
 8000b9e:	4282      	cmp	r2, r0
 8000ba0:	d900      	bls.n	8000ba4 <__aeabi_ddiv+0x1e0>
 8000ba2:	e1f6      	b.n	8000f92 <__aeabi_ddiv+0x5ce>
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_ddiv+0x1e4>
 8000ba6:	e1f1      	b.n	8000f8c <__aeabi_ddiv+0x5c8>
 8000ba8:	9b05      	ldr	r3, [sp, #20]
 8000baa:	469b      	mov	fp, r3
 8000bac:	1b3c      	subs	r4, r7, r4
 8000bae:	42a7      	cmp	r7, r4
 8000bb0:	41bf      	sbcs	r7, r7
 8000bb2:	9d00      	ldr	r5, [sp, #0]
 8000bb4:	1a80      	subs	r0, r0, r2
 8000bb6:	427f      	negs	r7, r7
 8000bb8:	1bc0      	subs	r0, r0, r7
 8000bba:	4285      	cmp	r5, r0
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_ddiv+0x1fc>
 8000bbe:	e1d0      	b.n	8000f62 <__aeabi_ddiv+0x59e>
 8000bc0:	9902      	ldr	r1, [sp, #8]
 8000bc2:	f7ff fb27 	bl	8000214 <__aeabi_uidivmod>
 8000bc6:	9a03      	ldr	r2, [sp, #12]
 8000bc8:	040b      	lsls	r3, r1, #16
 8000bca:	4342      	muls	r2, r0
 8000bcc:	0c21      	lsrs	r1, r4, #16
 8000bce:	0007      	movs	r7, r0
 8000bd0:	4319      	orrs	r1, r3
 8000bd2:	428a      	cmp	r2, r1
 8000bd4:	d900      	bls.n	8000bd8 <__aeabi_ddiv+0x214>
 8000bd6:	e178      	b.n	8000eca <__aeabi_ddiv+0x506>
 8000bd8:	1a88      	subs	r0, r1, r2
 8000bda:	9902      	ldr	r1, [sp, #8]
 8000bdc:	f7ff fb1a 	bl	8000214 <__aeabi_uidivmod>
 8000be0:	9a03      	ldr	r2, [sp, #12]
 8000be2:	0424      	lsls	r4, r4, #16
 8000be4:	4342      	muls	r2, r0
 8000be6:	0409      	lsls	r1, r1, #16
 8000be8:	0c24      	lsrs	r4, r4, #16
 8000bea:	0003      	movs	r3, r0
 8000bec:	430c      	orrs	r4, r1
 8000bee:	42a2      	cmp	r2, r4
 8000bf0:	d900      	bls.n	8000bf4 <__aeabi_ddiv+0x230>
 8000bf2:	e15d      	b.n	8000eb0 <__aeabi_ddiv+0x4ec>
 8000bf4:	4641      	mov	r1, r8
 8000bf6:	1aa4      	subs	r4, r4, r2
 8000bf8:	043a      	lsls	r2, r7, #16
 8000bfa:	431a      	orrs	r2, r3
 8000bfc:	9d04      	ldr	r5, [sp, #16]
 8000bfe:	0413      	lsls	r3, r2, #16
 8000c00:	0c1b      	lsrs	r3, r3, #16
 8000c02:	4359      	muls	r1, r3
 8000c04:	4647      	mov	r7, r8
 8000c06:	436b      	muls	r3, r5
 8000c08:	469c      	mov	ip, r3
 8000c0a:	0c10      	lsrs	r0, r2, #16
 8000c0c:	4347      	muls	r7, r0
 8000c0e:	0c0b      	lsrs	r3, r1, #16
 8000c10:	44bc      	add	ip, r7
 8000c12:	4463      	add	r3, ip
 8000c14:	4368      	muls	r0, r5
 8000c16:	429f      	cmp	r7, r3
 8000c18:	d903      	bls.n	8000c22 <__aeabi_ddiv+0x25e>
 8000c1a:	2580      	movs	r5, #128	@ 0x80
 8000c1c:	026d      	lsls	r5, r5, #9
 8000c1e:	46ac      	mov	ip, r5
 8000c20:	4460      	add	r0, ip
 8000c22:	0c1f      	lsrs	r7, r3, #16
 8000c24:	0409      	lsls	r1, r1, #16
 8000c26:	041b      	lsls	r3, r3, #16
 8000c28:	0c09      	lsrs	r1, r1, #16
 8000c2a:	183f      	adds	r7, r7, r0
 8000c2c:	185b      	adds	r3, r3, r1
 8000c2e:	42bc      	cmp	r4, r7
 8000c30:	d200      	bcs.n	8000c34 <__aeabi_ddiv+0x270>
 8000c32:	e102      	b.n	8000e3a <__aeabi_ddiv+0x476>
 8000c34:	d100      	bne.n	8000c38 <__aeabi_ddiv+0x274>
 8000c36:	e0fd      	b.n	8000e34 <__aeabi_ddiv+0x470>
 8000c38:	2301      	movs	r3, #1
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	4b43      	ldr	r3, [pc, #268]	@ (8000d4c <__aeabi_ddiv+0x388>)
 8000c3e:	4453      	add	r3, sl
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	dc00      	bgt.n	8000c46 <__aeabi_ddiv+0x282>
 8000c44:	e0ae      	b.n	8000da4 <__aeabi_ddiv+0x3e0>
 8000c46:	0751      	lsls	r1, r2, #29
 8000c48:	d000      	beq.n	8000c4c <__aeabi_ddiv+0x288>
 8000c4a:	e198      	b.n	8000f7e <__aeabi_ddiv+0x5ba>
 8000c4c:	4659      	mov	r1, fp
 8000c4e:	01c9      	lsls	r1, r1, #7
 8000c50:	d506      	bpl.n	8000c60 <__aeabi_ddiv+0x29c>
 8000c52:	4659      	mov	r1, fp
 8000c54:	4b3e      	ldr	r3, [pc, #248]	@ (8000d50 <__aeabi_ddiv+0x38c>)
 8000c56:	4019      	ands	r1, r3
 8000c58:	2380      	movs	r3, #128	@ 0x80
 8000c5a:	468b      	mov	fp, r1
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	4453      	add	r3, sl
 8000c60:	493c      	ldr	r1, [pc, #240]	@ (8000d54 <__aeabi_ddiv+0x390>)
 8000c62:	428b      	cmp	r3, r1
 8000c64:	dd00      	ble.n	8000c68 <__aeabi_ddiv+0x2a4>
 8000c66:	e71a      	b.n	8000a9e <__aeabi_ddiv+0xda>
 8000c68:	4659      	mov	r1, fp
 8000c6a:	08d2      	lsrs	r2, r2, #3
 8000c6c:	0749      	lsls	r1, r1, #29
 8000c6e:	4311      	orrs	r1, r2
 8000c70:	465a      	mov	r2, fp
 8000c72:	055b      	lsls	r3, r3, #21
 8000c74:	0254      	lsls	r4, r2, #9
 8000c76:	4688      	mov	r8, r1
 8000c78:	0b24      	lsrs	r4, r4, #12
 8000c7a:	0d5b      	lsrs	r3, r3, #21
 8000c7c:	e702      	b.n	8000a84 <__aeabi_ddiv+0xc0>
 8000c7e:	465a      	mov	r2, fp
 8000c80:	9b00      	ldr	r3, [sp, #0]
 8000c82:	431a      	orrs	r2, r3
 8000c84:	d100      	bne.n	8000c88 <__aeabi_ddiv+0x2c4>
 8000c86:	e07e      	b.n	8000d86 <__aeabi_ddiv+0x3c2>
 8000c88:	465b      	mov	r3, fp
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_ddiv+0x2cc>
 8000c8e:	e100      	b.n	8000e92 <__aeabi_ddiv+0x4ce>
 8000c90:	4658      	mov	r0, fp
 8000c92:	f001 f8e1 	bl	8001e58 <__clzsi2>
 8000c96:	0002      	movs	r2, r0
 8000c98:	0003      	movs	r3, r0
 8000c9a:	3a0b      	subs	r2, #11
 8000c9c:	271d      	movs	r7, #29
 8000c9e:	9e00      	ldr	r6, [sp, #0]
 8000ca0:	1aba      	subs	r2, r7, r2
 8000ca2:	0019      	movs	r1, r3
 8000ca4:	4658      	mov	r0, fp
 8000ca6:	40d6      	lsrs	r6, r2
 8000ca8:	3908      	subs	r1, #8
 8000caa:	4088      	lsls	r0, r1
 8000cac:	0032      	movs	r2, r6
 8000cae:	4302      	orrs	r2, r0
 8000cb0:	4693      	mov	fp, r2
 8000cb2:	9a00      	ldr	r2, [sp, #0]
 8000cb4:	408a      	lsls	r2, r1
 8000cb6:	4928      	ldr	r1, [pc, #160]	@ (8000d58 <__aeabi_ddiv+0x394>)
 8000cb8:	4453      	add	r3, sl
 8000cba:	468a      	mov	sl, r1
 8000cbc:	449a      	add	sl, r3
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e6c8      	b.n	8000a54 <__aeabi_ddiv+0x90>
 8000cc2:	465b      	mov	r3, fp
 8000cc4:	4303      	orrs	r3, r0
 8000cc6:	4699      	mov	r9, r3
 8000cc8:	d056      	beq.n	8000d78 <__aeabi_ddiv+0x3b4>
 8000cca:	465b      	mov	r3, fp
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d100      	bne.n	8000cd2 <__aeabi_ddiv+0x30e>
 8000cd0:	e0cd      	b.n	8000e6e <__aeabi_ddiv+0x4aa>
 8000cd2:	4658      	mov	r0, fp
 8000cd4:	f001 f8c0 	bl	8001e58 <__clzsi2>
 8000cd8:	230b      	movs	r3, #11
 8000cda:	425b      	negs	r3, r3
 8000cdc:	469c      	mov	ip, r3
 8000cde:	0002      	movs	r2, r0
 8000ce0:	4484      	add	ip, r0
 8000ce2:	4666      	mov	r6, ip
 8000ce4:	231d      	movs	r3, #29
 8000ce6:	1b9b      	subs	r3, r3, r6
 8000ce8:	0026      	movs	r6, r4
 8000cea:	0011      	movs	r1, r2
 8000cec:	4658      	mov	r0, fp
 8000cee:	40de      	lsrs	r6, r3
 8000cf0:	3908      	subs	r1, #8
 8000cf2:	4088      	lsls	r0, r1
 8000cf4:	0033      	movs	r3, r6
 8000cf6:	4303      	orrs	r3, r0
 8000cf8:	4699      	mov	r9, r3
 8000cfa:	0023      	movs	r3, r4
 8000cfc:	408b      	lsls	r3, r1
 8000cfe:	4698      	mov	r8, r3
 8000d00:	4b16      	ldr	r3, [pc, #88]	@ (8000d5c <__aeabi_ddiv+0x398>)
 8000d02:	2400      	movs	r4, #0
 8000d04:	1a9b      	subs	r3, r3, r2
 8000d06:	469a      	mov	sl, r3
 8000d08:	2300      	movs	r3, #0
 8000d0a:	9303      	str	r3, [sp, #12]
 8000d0c:	e682      	b.n	8000a14 <__aeabi_ddiv+0x50>
 8000d0e:	465a      	mov	r2, fp
 8000d10:	4302      	orrs	r2, r0
 8000d12:	4691      	mov	r9, r2
 8000d14:	d12a      	bne.n	8000d6c <__aeabi_ddiv+0x3a8>
 8000d16:	2200      	movs	r2, #0
 8000d18:	469a      	mov	sl, r3
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	4690      	mov	r8, r2
 8000d1e:	2408      	movs	r4, #8
 8000d20:	9303      	str	r3, [sp, #12]
 8000d22:	e677      	b.n	8000a14 <__aeabi_ddiv+0x50>
 8000d24:	465a      	mov	r2, fp
 8000d26:	9b00      	ldr	r3, [sp, #0]
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d60 <__aeabi_ddiv+0x39c>)
 8000d2c:	469c      	mov	ip, r3
 8000d2e:	44e2      	add	sl, ip
 8000d30:	2a00      	cmp	r2, #0
 8000d32:	d117      	bne.n	8000d64 <__aeabi_ddiv+0x3a0>
 8000d34:	2302      	movs	r3, #2
 8000d36:	431c      	orrs	r4, r3
 8000d38:	2300      	movs	r3, #0
 8000d3a:	469b      	mov	fp, r3
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	e689      	b.n	8000a54 <__aeabi_ddiv+0x90>
 8000d40:	000007ff 	.word	0x000007ff
 8000d44:	fffffc01 	.word	0xfffffc01
 8000d48:	08006760 	.word	0x08006760
 8000d4c:	000003ff 	.word	0x000003ff
 8000d50:	feffffff 	.word	0xfeffffff
 8000d54:	000007fe 	.word	0x000007fe
 8000d58:	000003f3 	.word	0x000003f3
 8000d5c:	fffffc0d 	.word	0xfffffc0d
 8000d60:	fffff801 	.word	0xfffff801
 8000d64:	2303      	movs	r3, #3
 8000d66:	0032      	movs	r2, r6
 8000d68:	431c      	orrs	r4, r3
 8000d6a:	e673      	b.n	8000a54 <__aeabi_ddiv+0x90>
 8000d6c:	469a      	mov	sl, r3
 8000d6e:	2303      	movs	r3, #3
 8000d70:	46d9      	mov	r9, fp
 8000d72:	240c      	movs	r4, #12
 8000d74:	9303      	str	r3, [sp, #12]
 8000d76:	e64d      	b.n	8000a14 <__aeabi_ddiv+0x50>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	4698      	mov	r8, r3
 8000d7c:	469a      	mov	sl, r3
 8000d7e:	3301      	adds	r3, #1
 8000d80:	2404      	movs	r4, #4
 8000d82:	9303      	str	r3, [sp, #12]
 8000d84:	e646      	b.n	8000a14 <__aeabi_ddiv+0x50>
 8000d86:	2301      	movs	r3, #1
 8000d88:	431c      	orrs	r4, r3
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	469b      	mov	fp, r3
 8000d8e:	3301      	adds	r3, #1
 8000d90:	e660      	b.n	8000a54 <__aeabi_ddiv+0x90>
 8000d92:	2300      	movs	r3, #0
 8000d94:	2480      	movs	r4, #128	@ 0x80
 8000d96:	4698      	mov	r8, r3
 8000d98:	2600      	movs	r6, #0
 8000d9a:	4b92      	ldr	r3, [pc, #584]	@ (8000fe4 <__aeabi_ddiv+0x620>)
 8000d9c:	0324      	lsls	r4, r4, #12
 8000d9e:	e671      	b.n	8000a84 <__aeabi_ddiv+0xc0>
 8000da0:	2201      	movs	r2, #1
 8000da2:	4252      	negs	r2, r2
 8000da4:	2101      	movs	r1, #1
 8000da6:	1ac9      	subs	r1, r1, r3
 8000da8:	2938      	cmp	r1, #56	@ 0x38
 8000daa:	dd00      	ble.n	8000dae <__aeabi_ddiv+0x3ea>
 8000dac:	e666      	b.n	8000a7c <__aeabi_ddiv+0xb8>
 8000dae:	291f      	cmp	r1, #31
 8000db0:	dc00      	bgt.n	8000db4 <__aeabi_ddiv+0x3f0>
 8000db2:	e0ab      	b.n	8000f0c <__aeabi_ddiv+0x548>
 8000db4:	201f      	movs	r0, #31
 8000db6:	4240      	negs	r0, r0
 8000db8:	1ac3      	subs	r3, r0, r3
 8000dba:	4658      	mov	r0, fp
 8000dbc:	40d8      	lsrs	r0, r3
 8000dbe:	0003      	movs	r3, r0
 8000dc0:	2920      	cmp	r1, #32
 8000dc2:	d004      	beq.n	8000dce <__aeabi_ddiv+0x40a>
 8000dc4:	4658      	mov	r0, fp
 8000dc6:	4988      	ldr	r1, [pc, #544]	@ (8000fe8 <__aeabi_ddiv+0x624>)
 8000dc8:	4451      	add	r1, sl
 8000dca:	4088      	lsls	r0, r1
 8000dcc:	4302      	orrs	r2, r0
 8000dce:	1e51      	subs	r1, r2, #1
 8000dd0:	418a      	sbcs	r2, r1
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	2307      	movs	r3, #7
 8000dd6:	0019      	movs	r1, r3
 8000dd8:	2400      	movs	r4, #0
 8000dda:	4011      	ands	r1, r2
 8000ddc:	4213      	tst	r3, r2
 8000dde:	d00c      	beq.n	8000dfa <__aeabi_ddiv+0x436>
 8000de0:	230f      	movs	r3, #15
 8000de2:	4013      	ands	r3, r2
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d100      	bne.n	8000dea <__aeabi_ddiv+0x426>
 8000de8:	e0f9      	b.n	8000fde <__aeabi_ddiv+0x61a>
 8000dea:	1d11      	adds	r1, r2, #4
 8000dec:	4291      	cmp	r1, r2
 8000dee:	419b      	sbcs	r3, r3
 8000df0:	000a      	movs	r2, r1
 8000df2:	425b      	negs	r3, r3
 8000df4:	0759      	lsls	r1, r3, #29
 8000df6:	025b      	lsls	r3, r3, #9
 8000df8:	0b1c      	lsrs	r4, r3, #12
 8000dfa:	08d2      	lsrs	r2, r2, #3
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	4690      	mov	r8, r2
 8000e00:	2300      	movs	r3, #0
 8000e02:	e63f      	b.n	8000a84 <__aeabi_ddiv+0xc0>
 8000e04:	2480      	movs	r4, #128	@ 0x80
 8000e06:	464b      	mov	r3, r9
 8000e08:	0324      	lsls	r4, r4, #12
 8000e0a:	4223      	tst	r3, r4
 8000e0c:	d009      	beq.n	8000e22 <__aeabi_ddiv+0x45e>
 8000e0e:	465b      	mov	r3, fp
 8000e10:	4223      	tst	r3, r4
 8000e12:	d106      	bne.n	8000e22 <__aeabi_ddiv+0x45e>
 8000e14:	431c      	orrs	r4, r3
 8000e16:	0324      	lsls	r4, r4, #12
 8000e18:	002e      	movs	r6, r5
 8000e1a:	4690      	mov	r8, r2
 8000e1c:	4b71      	ldr	r3, [pc, #452]	@ (8000fe4 <__aeabi_ddiv+0x620>)
 8000e1e:	0b24      	lsrs	r4, r4, #12
 8000e20:	e630      	b.n	8000a84 <__aeabi_ddiv+0xc0>
 8000e22:	2480      	movs	r4, #128	@ 0x80
 8000e24:	464b      	mov	r3, r9
 8000e26:	0324      	lsls	r4, r4, #12
 8000e28:	431c      	orrs	r4, r3
 8000e2a:	0324      	lsls	r4, r4, #12
 8000e2c:	9e02      	ldr	r6, [sp, #8]
 8000e2e:	4b6d      	ldr	r3, [pc, #436]	@ (8000fe4 <__aeabi_ddiv+0x620>)
 8000e30:	0b24      	lsrs	r4, r4, #12
 8000e32:	e627      	b.n	8000a84 <__aeabi_ddiv+0xc0>
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d100      	bne.n	8000e3a <__aeabi_ddiv+0x476>
 8000e38:	e700      	b.n	8000c3c <__aeabi_ddiv+0x278>
 8000e3a:	9800      	ldr	r0, [sp, #0]
 8000e3c:	1e51      	subs	r1, r2, #1
 8000e3e:	4684      	mov	ip, r0
 8000e40:	4464      	add	r4, ip
 8000e42:	4284      	cmp	r4, r0
 8000e44:	d200      	bcs.n	8000e48 <__aeabi_ddiv+0x484>
 8000e46:	e084      	b.n	8000f52 <__aeabi_ddiv+0x58e>
 8000e48:	42bc      	cmp	r4, r7
 8000e4a:	d200      	bcs.n	8000e4e <__aeabi_ddiv+0x48a>
 8000e4c:	e0ae      	b.n	8000fac <__aeabi_ddiv+0x5e8>
 8000e4e:	d100      	bne.n	8000e52 <__aeabi_ddiv+0x48e>
 8000e50:	e0c1      	b.n	8000fd6 <__aeabi_ddiv+0x612>
 8000e52:	000a      	movs	r2, r1
 8000e54:	e6f0      	b.n	8000c38 <__aeabi_ddiv+0x274>
 8000e56:	4542      	cmp	r2, r8
 8000e58:	d900      	bls.n	8000e5c <__aeabi_ddiv+0x498>
 8000e5a:	e62c      	b.n	8000ab6 <__aeabi_ddiv+0xf2>
 8000e5c:	464b      	mov	r3, r9
 8000e5e:	07dc      	lsls	r4, r3, #31
 8000e60:	0858      	lsrs	r0, r3, #1
 8000e62:	4643      	mov	r3, r8
 8000e64:	085b      	lsrs	r3, r3, #1
 8000e66:	431c      	orrs	r4, r3
 8000e68:	4643      	mov	r3, r8
 8000e6a:	07df      	lsls	r7, r3, #31
 8000e6c:	e62a      	b.n	8000ac4 <__aeabi_ddiv+0x100>
 8000e6e:	f000 fff3 	bl	8001e58 <__clzsi2>
 8000e72:	2315      	movs	r3, #21
 8000e74:	469c      	mov	ip, r3
 8000e76:	4484      	add	ip, r0
 8000e78:	0002      	movs	r2, r0
 8000e7a:	4663      	mov	r3, ip
 8000e7c:	3220      	adds	r2, #32
 8000e7e:	2b1c      	cmp	r3, #28
 8000e80:	dc00      	bgt.n	8000e84 <__aeabi_ddiv+0x4c0>
 8000e82:	e72e      	b.n	8000ce2 <__aeabi_ddiv+0x31e>
 8000e84:	0023      	movs	r3, r4
 8000e86:	3808      	subs	r0, #8
 8000e88:	4083      	lsls	r3, r0
 8000e8a:	4699      	mov	r9, r3
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	4698      	mov	r8, r3
 8000e90:	e736      	b.n	8000d00 <__aeabi_ddiv+0x33c>
 8000e92:	f000 ffe1 	bl	8001e58 <__clzsi2>
 8000e96:	0002      	movs	r2, r0
 8000e98:	0003      	movs	r3, r0
 8000e9a:	3215      	adds	r2, #21
 8000e9c:	3320      	adds	r3, #32
 8000e9e:	2a1c      	cmp	r2, #28
 8000ea0:	dc00      	bgt.n	8000ea4 <__aeabi_ddiv+0x4e0>
 8000ea2:	e6fb      	b.n	8000c9c <__aeabi_ddiv+0x2d8>
 8000ea4:	9900      	ldr	r1, [sp, #0]
 8000ea6:	3808      	subs	r0, #8
 8000ea8:	4081      	lsls	r1, r0
 8000eaa:	2200      	movs	r2, #0
 8000eac:	468b      	mov	fp, r1
 8000eae:	e702      	b.n	8000cb6 <__aeabi_ddiv+0x2f2>
 8000eb0:	9900      	ldr	r1, [sp, #0]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	468c      	mov	ip, r1
 8000eb6:	4464      	add	r4, ip
 8000eb8:	42a1      	cmp	r1, r4
 8000eba:	d900      	bls.n	8000ebe <__aeabi_ddiv+0x4fa>
 8000ebc:	e69a      	b.n	8000bf4 <__aeabi_ddiv+0x230>
 8000ebe:	42a2      	cmp	r2, r4
 8000ec0:	d800      	bhi.n	8000ec4 <__aeabi_ddiv+0x500>
 8000ec2:	e697      	b.n	8000bf4 <__aeabi_ddiv+0x230>
 8000ec4:	1e83      	subs	r3, r0, #2
 8000ec6:	4464      	add	r4, ip
 8000ec8:	e694      	b.n	8000bf4 <__aeabi_ddiv+0x230>
 8000eca:	46ac      	mov	ip, r5
 8000ecc:	4461      	add	r1, ip
 8000ece:	3f01      	subs	r7, #1
 8000ed0:	428d      	cmp	r5, r1
 8000ed2:	d900      	bls.n	8000ed6 <__aeabi_ddiv+0x512>
 8000ed4:	e680      	b.n	8000bd8 <__aeabi_ddiv+0x214>
 8000ed6:	428a      	cmp	r2, r1
 8000ed8:	d800      	bhi.n	8000edc <__aeabi_ddiv+0x518>
 8000eda:	e67d      	b.n	8000bd8 <__aeabi_ddiv+0x214>
 8000edc:	1e87      	subs	r7, r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	e67a      	b.n	8000bd8 <__aeabi_ddiv+0x214>
 8000ee2:	4285      	cmp	r5, r0
 8000ee4:	d000      	beq.n	8000ee8 <__aeabi_ddiv+0x524>
 8000ee6:	e65f      	b.n	8000ba8 <__aeabi_ddiv+0x1e4>
 8000ee8:	45b9      	cmp	r9, r7
 8000eea:	d900      	bls.n	8000eee <__aeabi_ddiv+0x52a>
 8000eec:	e65c      	b.n	8000ba8 <__aeabi_ddiv+0x1e4>
 8000eee:	e656      	b.n	8000b9e <__aeabi_ddiv+0x1da>
 8000ef0:	42a2      	cmp	r2, r4
 8000ef2:	d800      	bhi.n	8000ef6 <__aeabi_ddiv+0x532>
 8000ef4:	e61a      	b.n	8000b2c <__aeabi_ddiv+0x168>
 8000ef6:	1e83      	subs	r3, r0, #2
 8000ef8:	4464      	add	r4, ip
 8000efa:	e617      	b.n	8000b2c <__aeabi_ddiv+0x168>
 8000efc:	428a      	cmp	r2, r1
 8000efe:	d800      	bhi.n	8000f02 <__aeabi_ddiv+0x53e>
 8000f00:	e600      	b.n	8000b04 <__aeabi_ddiv+0x140>
 8000f02:	46ac      	mov	ip, r5
 8000f04:	1e83      	subs	r3, r0, #2
 8000f06:	4698      	mov	r8, r3
 8000f08:	4461      	add	r1, ip
 8000f0a:	e5fb      	b.n	8000b04 <__aeabi_ddiv+0x140>
 8000f0c:	4837      	ldr	r0, [pc, #220]	@ (8000fec <__aeabi_ddiv+0x628>)
 8000f0e:	0014      	movs	r4, r2
 8000f10:	4450      	add	r0, sl
 8000f12:	4082      	lsls	r2, r0
 8000f14:	465b      	mov	r3, fp
 8000f16:	0017      	movs	r7, r2
 8000f18:	4083      	lsls	r3, r0
 8000f1a:	40cc      	lsrs	r4, r1
 8000f1c:	1e7a      	subs	r2, r7, #1
 8000f1e:	4197      	sbcs	r7, r2
 8000f20:	4323      	orrs	r3, r4
 8000f22:	433b      	orrs	r3, r7
 8000f24:	001a      	movs	r2, r3
 8000f26:	465b      	mov	r3, fp
 8000f28:	40cb      	lsrs	r3, r1
 8000f2a:	0751      	lsls	r1, r2, #29
 8000f2c:	d009      	beq.n	8000f42 <__aeabi_ddiv+0x57e>
 8000f2e:	210f      	movs	r1, #15
 8000f30:	4011      	ands	r1, r2
 8000f32:	2904      	cmp	r1, #4
 8000f34:	d005      	beq.n	8000f42 <__aeabi_ddiv+0x57e>
 8000f36:	1d11      	adds	r1, r2, #4
 8000f38:	4291      	cmp	r1, r2
 8000f3a:	4192      	sbcs	r2, r2
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	189b      	adds	r3, r3, r2
 8000f40:	000a      	movs	r2, r1
 8000f42:	0219      	lsls	r1, r3, #8
 8000f44:	d400      	bmi.n	8000f48 <__aeabi_ddiv+0x584>
 8000f46:	e755      	b.n	8000df4 <__aeabi_ddiv+0x430>
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	2400      	movs	r4, #0
 8000f4e:	4690      	mov	r8, r2
 8000f50:	e598      	b.n	8000a84 <__aeabi_ddiv+0xc0>
 8000f52:	000a      	movs	r2, r1
 8000f54:	42bc      	cmp	r4, r7
 8000f56:	d000      	beq.n	8000f5a <__aeabi_ddiv+0x596>
 8000f58:	e66e      	b.n	8000c38 <__aeabi_ddiv+0x274>
 8000f5a:	454b      	cmp	r3, r9
 8000f5c:	d000      	beq.n	8000f60 <__aeabi_ddiv+0x59c>
 8000f5e:	e66b      	b.n	8000c38 <__aeabi_ddiv+0x274>
 8000f60:	e66c      	b.n	8000c3c <__aeabi_ddiv+0x278>
 8000f62:	4b23      	ldr	r3, [pc, #140]	@ (8000ff0 <__aeabi_ddiv+0x62c>)
 8000f64:	4a23      	ldr	r2, [pc, #140]	@ (8000ff4 <__aeabi_ddiv+0x630>)
 8000f66:	4453      	add	r3, sl
 8000f68:	4592      	cmp	sl, r2
 8000f6a:	da00      	bge.n	8000f6e <__aeabi_ddiv+0x5aa>
 8000f6c:	e718      	b.n	8000da0 <__aeabi_ddiv+0x3dc>
 8000f6e:	2101      	movs	r1, #1
 8000f70:	4249      	negs	r1, r1
 8000f72:	1d0a      	adds	r2, r1, #4
 8000f74:	428a      	cmp	r2, r1
 8000f76:	4189      	sbcs	r1, r1
 8000f78:	4249      	negs	r1, r1
 8000f7a:	448b      	add	fp, r1
 8000f7c:	e666      	b.n	8000c4c <__aeabi_ddiv+0x288>
 8000f7e:	210f      	movs	r1, #15
 8000f80:	4011      	ands	r1, r2
 8000f82:	2904      	cmp	r1, #4
 8000f84:	d100      	bne.n	8000f88 <__aeabi_ddiv+0x5c4>
 8000f86:	e661      	b.n	8000c4c <__aeabi_ddiv+0x288>
 8000f88:	0011      	movs	r1, r2
 8000f8a:	e7f2      	b.n	8000f72 <__aeabi_ddiv+0x5ae>
 8000f8c:	42bc      	cmp	r4, r7
 8000f8e:	d800      	bhi.n	8000f92 <__aeabi_ddiv+0x5ce>
 8000f90:	e60a      	b.n	8000ba8 <__aeabi_ddiv+0x1e4>
 8000f92:	2302      	movs	r3, #2
 8000f94:	425b      	negs	r3, r3
 8000f96:	469c      	mov	ip, r3
 8000f98:	9900      	ldr	r1, [sp, #0]
 8000f9a:	444f      	add	r7, r9
 8000f9c:	454f      	cmp	r7, r9
 8000f9e:	419b      	sbcs	r3, r3
 8000fa0:	44e3      	add	fp, ip
 8000fa2:	468c      	mov	ip, r1
 8000fa4:	425b      	negs	r3, r3
 8000fa6:	4463      	add	r3, ip
 8000fa8:	18c0      	adds	r0, r0, r3
 8000faa:	e5ff      	b.n	8000bac <__aeabi_ddiv+0x1e8>
 8000fac:	4649      	mov	r1, r9
 8000fae:	9d00      	ldr	r5, [sp, #0]
 8000fb0:	0048      	lsls	r0, r1, #1
 8000fb2:	4548      	cmp	r0, r9
 8000fb4:	4189      	sbcs	r1, r1
 8000fb6:	46ac      	mov	ip, r5
 8000fb8:	4249      	negs	r1, r1
 8000fba:	4461      	add	r1, ip
 8000fbc:	4681      	mov	r9, r0
 8000fbe:	3a02      	subs	r2, #2
 8000fc0:	1864      	adds	r4, r4, r1
 8000fc2:	e7c7      	b.n	8000f54 <__aeabi_ddiv+0x590>
 8000fc4:	2480      	movs	r4, #128	@ 0x80
 8000fc6:	465b      	mov	r3, fp
 8000fc8:	0324      	lsls	r4, r4, #12
 8000fca:	431c      	orrs	r4, r3
 8000fcc:	0324      	lsls	r4, r4, #12
 8000fce:	4690      	mov	r8, r2
 8000fd0:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <__aeabi_ddiv+0x620>)
 8000fd2:	0b24      	lsrs	r4, r4, #12
 8000fd4:	e556      	b.n	8000a84 <__aeabi_ddiv+0xc0>
 8000fd6:	4599      	cmp	r9, r3
 8000fd8:	d3e8      	bcc.n	8000fac <__aeabi_ddiv+0x5e8>
 8000fda:	000a      	movs	r2, r1
 8000fdc:	e7bd      	b.n	8000f5a <__aeabi_ddiv+0x596>
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e708      	b.n	8000df4 <__aeabi_ddiv+0x430>
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	000007ff 	.word	0x000007ff
 8000fe8:	0000043e 	.word	0x0000043e
 8000fec:	0000041e 	.word	0x0000041e
 8000ff0:	000003ff 	.word	0x000003ff
 8000ff4:	fffffc02 	.word	0xfffffc02

08000ff8 <__aeabi_dmul>:
 8000ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffa:	4657      	mov	r7, sl
 8000ffc:	46de      	mov	lr, fp
 8000ffe:	464e      	mov	r6, r9
 8001000:	4645      	mov	r5, r8
 8001002:	b5e0      	push	{r5, r6, r7, lr}
 8001004:	001f      	movs	r7, r3
 8001006:	030b      	lsls	r3, r1, #12
 8001008:	0b1b      	lsrs	r3, r3, #12
 800100a:	0016      	movs	r6, r2
 800100c:	469a      	mov	sl, r3
 800100e:	0fca      	lsrs	r2, r1, #31
 8001010:	004b      	lsls	r3, r1, #1
 8001012:	0004      	movs	r4, r0
 8001014:	4693      	mov	fp, r2
 8001016:	b087      	sub	sp, #28
 8001018:	0d5b      	lsrs	r3, r3, #21
 800101a:	d100      	bne.n	800101e <__aeabi_dmul+0x26>
 800101c:	e0d5      	b.n	80011ca <__aeabi_dmul+0x1d2>
 800101e:	4abb      	ldr	r2, [pc, #748]	@ (800130c <__aeabi_dmul+0x314>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d100      	bne.n	8001026 <__aeabi_dmul+0x2e>
 8001024:	e0f8      	b.n	8001218 <__aeabi_dmul+0x220>
 8001026:	4651      	mov	r1, sl
 8001028:	0f42      	lsrs	r2, r0, #29
 800102a:	00c9      	lsls	r1, r1, #3
 800102c:	430a      	orrs	r2, r1
 800102e:	2180      	movs	r1, #128	@ 0x80
 8001030:	0409      	lsls	r1, r1, #16
 8001032:	4311      	orrs	r1, r2
 8001034:	00c2      	lsls	r2, r0, #3
 8001036:	4691      	mov	r9, r2
 8001038:	4ab5      	ldr	r2, [pc, #724]	@ (8001310 <__aeabi_dmul+0x318>)
 800103a:	468a      	mov	sl, r1
 800103c:	189d      	adds	r5, r3, r2
 800103e:	2300      	movs	r3, #0
 8001040:	4698      	mov	r8, r3
 8001042:	9302      	str	r3, [sp, #8]
 8001044:	033c      	lsls	r4, r7, #12
 8001046:	007b      	lsls	r3, r7, #1
 8001048:	0ffa      	lsrs	r2, r7, #31
 800104a:	0030      	movs	r0, r6
 800104c:	0b24      	lsrs	r4, r4, #12
 800104e:	0d5b      	lsrs	r3, r3, #21
 8001050:	9200      	str	r2, [sp, #0]
 8001052:	d100      	bne.n	8001056 <__aeabi_dmul+0x5e>
 8001054:	e096      	b.n	8001184 <__aeabi_dmul+0x18c>
 8001056:	4aad      	ldr	r2, [pc, #692]	@ (800130c <__aeabi_dmul+0x314>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d031      	beq.n	80010c0 <__aeabi_dmul+0xc8>
 800105c:	0f72      	lsrs	r2, r6, #29
 800105e:	00e4      	lsls	r4, r4, #3
 8001060:	4322      	orrs	r2, r4
 8001062:	2480      	movs	r4, #128	@ 0x80
 8001064:	0424      	lsls	r4, r4, #16
 8001066:	4314      	orrs	r4, r2
 8001068:	4aa9      	ldr	r2, [pc, #676]	@ (8001310 <__aeabi_dmul+0x318>)
 800106a:	00f0      	lsls	r0, r6, #3
 800106c:	4694      	mov	ip, r2
 800106e:	4463      	add	r3, ip
 8001070:	195b      	adds	r3, r3, r5
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	9201      	str	r2, [sp, #4]
 8001076:	4642      	mov	r2, r8
 8001078:	2600      	movs	r6, #0
 800107a:	2a0a      	cmp	r2, #10
 800107c:	dc42      	bgt.n	8001104 <__aeabi_dmul+0x10c>
 800107e:	465a      	mov	r2, fp
 8001080:	9900      	ldr	r1, [sp, #0]
 8001082:	404a      	eors	r2, r1
 8001084:	4693      	mov	fp, r2
 8001086:	4642      	mov	r2, r8
 8001088:	2a02      	cmp	r2, #2
 800108a:	dc32      	bgt.n	80010f2 <__aeabi_dmul+0xfa>
 800108c:	3a01      	subs	r2, #1
 800108e:	2a01      	cmp	r2, #1
 8001090:	d900      	bls.n	8001094 <__aeabi_dmul+0x9c>
 8001092:	e149      	b.n	8001328 <__aeabi_dmul+0x330>
 8001094:	2e02      	cmp	r6, #2
 8001096:	d100      	bne.n	800109a <__aeabi_dmul+0xa2>
 8001098:	e0ca      	b.n	8001230 <__aeabi_dmul+0x238>
 800109a:	2e01      	cmp	r6, #1
 800109c:	d13d      	bne.n	800111a <__aeabi_dmul+0x122>
 800109e:	2300      	movs	r3, #0
 80010a0:	2400      	movs	r4, #0
 80010a2:	2200      	movs	r2, #0
 80010a4:	0010      	movs	r0, r2
 80010a6:	465a      	mov	r2, fp
 80010a8:	051b      	lsls	r3, r3, #20
 80010aa:	4323      	orrs	r3, r4
 80010ac:	07d2      	lsls	r2, r2, #31
 80010ae:	4313      	orrs	r3, r2
 80010b0:	0019      	movs	r1, r3
 80010b2:	b007      	add	sp, #28
 80010b4:	bcf0      	pop	{r4, r5, r6, r7}
 80010b6:	46bb      	mov	fp, r7
 80010b8:	46b2      	mov	sl, r6
 80010ba:	46a9      	mov	r9, r5
 80010bc:	46a0      	mov	r8, r4
 80010be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010c0:	4b92      	ldr	r3, [pc, #584]	@ (800130c <__aeabi_dmul+0x314>)
 80010c2:	4326      	orrs	r6, r4
 80010c4:	18eb      	adds	r3, r5, r3
 80010c6:	2e00      	cmp	r6, #0
 80010c8:	d100      	bne.n	80010cc <__aeabi_dmul+0xd4>
 80010ca:	e0bb      	b.n	8001244 <__aeabi_dmul+0x24c>
 80010cc:	2203      	movs	r2, #3
 80010ce:	4641      	mov	r1, r8
 80010d0:	4311      	orrs	r1, r2
 80010d2:	465a      	mov	r2, fp
 80010d4:	4688      	mov	r8, r1
 80010d6:	9900      	ldr	r1, [sp, #0]
 80010d8:	404a      	eors	r2, r1
 80010da:	2180      	movs	r1, #128	@ 0x80
 80010dc:	0109      	lsls	r1, r1, #4
 80010de:	468c      	mov	ip, r1
 80010e0:	0029      	movs	r1, r5
 80010e2:	4461      	add	r1, ip
 80010e4:	9101      	str	r1, [sp, #4]
 80010e6:	4641      	mov	r1, r8
 80010e8:	290a      	cmp	r1, #10
 80010ea:	dd00      	ble.n	80010ee <__aeabi_dmul+0xf6>
 80010ec:	e233      	b.n	8001556 <__aeabi_dmul+0x55e>
 80010ee:	4693      	mov	fp, r2
 80010f0:	2603      	movs	r6, #3
 80010f2:	4642      	mov	r2, r8
 80010f4:	2701      	movs	r7, #1
 80010f6:	4097      	lsls	r7, r2
 80010f8:	21a6      	movs	r1, #166	@ 0xa6
 80010fa:	003a      	movs	r2, r7
 80010fc:	00c9      	lsls	r1, r1, #3
 80010fe:	400a      	ands	r2, r1
 8001100:	420f      	tst	r7, r1
 8001102:	d031      	beq.n	8001168 <__aeabi_dmul+0x170>
 8001104:	9e02      	ldr	r6, [sp, #8]
 8001106:	2e02      	cmp	r6, #2
 8001108:	d100      	bne.n	800110c <__aeabi_dmul+0x114>
 800110a:	e235      	b.n	8001578 <__aeabi_dmul+0x580>
 800110c:	2e03      	cmp	r6, #3
 800110e:	d100      	bne.n	8001112 <__aeabi_dmul+0x11a>
 8001110:	e1d2      	b.n	80014b8 <__aeabi_dmul+0x4c0>
 8001112:	4654      	mov	r4, sl
 8001114:	4648      	mov	r0, r9
 8001116:	2e01      	cmp	r6, #1
 8001118:	d0c1      	beq.n	800109e <__aeabi_dmul+0xa6>
 800111a:	9a01      	ldr	r2, [sp, #4]
 800111c:	4b7d      	ldr	r3, [pc, #500]	@ (8001314 <__aeabi_dmul+0x31c>)
 800111e:	4694      	mov	ip, r2
 8001120:	4463      	add	r3, ip
 8001122:	2b00      	cmp	r3, #0
 8001124:	dc00      	bgt.n	8001128 <__aeabi_dmul+0x130>
 8001126:	e0c0      	b.n	80012aa <__aeabi_dmul+0x2b2>
 8001128:	0742      	lsls	r2, r0, #29
 800112a:	d009      	beq.n	8001140 <__aeabi_dmul+0x148>
 800112c:	220f      	movs	r2, #15
 800112e:	4002      	ands	r2, r0
 8001130:	2a04      	cmp	r2, #4
 8001132:	d005      	beq.n	8001140 <__aeabi_dmul+0x148>
 8001134:	1d02      	adds	r2, r0, #4
 8001136:	4282      	cmp	r2, r0
 8001138:	4180      	sbcs	r0, r0
 800113a:	4240      	negs	r0, r0
 800113c:	1824      	adds	r4, r4, r0
 800113e:	0010      	movs	r0, r2
 8001140:	01e2      	lsls	r2, r4, #7
 8001142:	d506      	bpl.n	8001152 <__aeabi_dmul+0x15a>
 8001144:	4b74      	ldr	r3, [pc, #464]	@ (8001318 <__aeabi_dmul+0x320>)
 8001146:	9a01      	ldr	r2, [sp, #4]
 8001148:	401c      	ands	r4, r3
 800114a:	2380      	movs	r3, #128	@ 0x80
 800114c:	4694      	mov	ip, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	4463      	add	r3, ip
 8001152:	4a72      	ldr	r2, [pc, #456]	@ (800131c <__aeabi_dmul+0x324>)
 8001154:	4293      	cmp	r3, r2
 8001156:	dc6b      	bgt.n	8001230 <__aeabi_dmul+0x238>
 8001158:	0762      	lsls	r2, r4, #29
 800115a:	08c0      	lsrs	r0, r0, #3
 800115c:	0264      	lsls	r4, r4, #9
 800115e:	055b      	lsls	r3, r3, #21
 8001160:	4302      	orrs	r2, r0
 8001162:	0b24      	lsrs	r4, r4, #12
 8001164:	0d5b      	lsrs	r3, r3, #21
 8001166:	e79d      	b.n	80010a4 <__aeabi_dmul+0xac>
 8001168:	2190      	movs	r1, #144	@ 0x90
 800116a:	0089      	lsls	r1, r1, #2
 800116c:	420f      	tst	r7, r1
 800116e:	d163      	bne.n	8001238 <__aeabi_dmul+0x240>
 8001170:	2288      	movs	r2, #136	@ 0x88
 8001172:	423a      	tst	r2, r7
 8001174:	d100      	bne.n	8001178 <__aeabi_dmul+0x180>
 8001176:	e0d7      	b.n	8001328 <__aeabi_dmul+0x330>
 8001178:	9b00      	ldr	r3, [sp, #0]
 800117a:	46a2      	mov	sl, r4
 800117c:	469b      	mov	fp, r3
 800117e:	4681      	mov	r9, r0
 8001180:	9602      	str	r6, [sp, #8]
 8001182:	e7bf      	b.n	8001104 <__aeabi_dmul+0x10c>
 8001184:	0023      	movs	r3, r4
 8001186:	4333      	orrs	r3, r6
 8001188:	d100      	bne.n	800118c <__aeabi_dmul+0x194>
 800118a:	e07f      	b.n	800128c <__aeabi_dmul+0x294>
 800118c:	2c00      	cmp	r4, #0
 800118e:	d100      	bne.n	8001192 <__aeabi_dmul+0x19a>
 8001190:	e1ad      	b.n	80014ee <__aeabi_dmul+0x4f6>
 8001192:	0020      	movs	r0, r4
 8001194:	f000 fe60 	bl	8001e58 <__clzsi2>
 8001198:	0002      	movs	r2, r0
 800119a:	0003      	movs	r3, r0
 800119c:	3a0b      	subs	r2, #11
 800119e:	201d      	movs	r0, #29
 80011a0:	0019      	movs	r1, r3
 80011a2:	1a82      	subs	r2, r0, r2
 80011a4:	0030      	movs	r0, r6
 80011a6:	3908      	subs	r1, #8
 80011a8:	40d0      	lsrs	r0, r2
 80011aa:	408c      	lsls	r4, r1
 80011ac:	4304      	orrs	r4, r0
 80011ae:	0030      	movs	r0, r6
 80011b0:	4088      	lsls	r0, r1
 80011b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001320 <__aeabi_dmul+0x328>)
 80011b4:	1aeb      	subs	r3, r5, r3
 80011b6:	4694      	mov	ip, r2
 80011b8:	4463      	add	r3, ip
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	9201      	str	r2, [sp, #4]
 80011be:	4642      	mov	r2, r8
 80011c0:	2600      	movs	r6, #0
 80011c2:	2a0a      	cmp	r2, #10
 80011c4:	dc00      	bgt.n	80011c8 <__aeabi_dmul+0x1d0>
 80011c6:	e75a      	b.n	800107e <__aeabi_dmul+0x86>
 80011c8:	e79c      	b.n	8001104 <__aeabi_dmul+0x10c>
 80011ca:	4653      	mov	r3, sl
 80011cc:	4303      	orrs	r3, r0
 80011ce:	4699      	mov	r9, r3
 80011d0:	d054      	beq.n	800127c <__aeabi_dmul+0x284>
 80011d2:	4653      	mov	r3, sl
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d100      	bne.n	80011da <__aeabi_dmul+0x1e2>
 80011d8:	e177      	b.n	80014ca <__aeabi_dmul+0x4d2>
 80011da:	4650      	mov	r0, sl
 80011dc:	f000 fe3c 	bl	8001e58 <__clzsi2>
 80011e0:	230b      	movs	r3, #11
 80011e2:	425b      	negs	r3, r3
 80011e4:	469c      	mov	ip, r3
 80011e6:	0002      	movs	r2, r0
 80011e8:	4484      	add	ip, r0
 80011ea:	0011      	movs	r1, r2
 80011ec:	4650      	mov	r0, sl
 80011ee:	3908      	subs	r1, #8
 80011f0:	4088      	lsls	r0, r1
 80011f2:	231d      	movs	r3, #29
 80011f4:	4680      	mov	r8, r0
 80011f6:	4660      	mov	r0, ip
 80011f8:	1a1b      	subs	r3, r3, r0
 80011fa:	0020      	movs	r0, r4
 80011fc:	40d8      	lsrs	r0, r3
 80011fe:	0003      	movs	r3, r0
 8001200:	4640      	mov	r0, r8
 8001202:	4303      	orrs	r3, r0
 8001204:	469a      	mov	sl, r3
 8001206:	0023      	movs	r3, r4
 8001208:	408b      	lsls	r3, r1
 800120a:	4699      	mov	r9, r3
 800120c:	2300      	movs	r3, #0
 800120e:	4d44      	ldr	r5, [pc, #272]	@ (8001320 <__aeabi_dmul+0x328>)
 8001210:	4698      	mov	r8, r3
 8001212:	1aad      	subs	r5, r5, r2
 8001214:	9302      	str	r3, [sp, #8]
 8001216:	e715      	b.n	8001044 <__aeabi_dmul+0x4c>
 8001218:	4652      	mov	r2, sl
 800121a:	4302      	orrs	r2, r0
 800121c:	4691      	mov	r9, r2
 800121e:	d126      	bne.n	800126e <__aeabi_dmul+0x276>
 8001220:	2200      	movs	r2, #0
 8001222:	001d      	movs	r5, r3
 8001224:	2302      	movs	r3, #2
 8001226:	4692      	mov	sl, r2
 8001228:	3208      	adds	r2, #8
 800122a:	4690      	mov	r8, r2
 800122c:	9302      	str	r3, [sp, #8]
 800122e:	e709      	b.n	8001044 <__aeabi_dmul+0x4c>
 8001230:	2400      	movs	r4, #0
 8001232:	2200      	movs	r2, #0
 8001234:	4b35      	ldr	r3, [pc, #212]	@ (800130c <__aeabi_dmul+0x314>)
 8001236:	e735      	b.n	80010a4 <__aeabi_dmul+0xac>
 8001238:	2300      	movs	r3, #0
 800123a:	2480      	movs	r4, #128	@ 0x80
 800123c:	469b      	mov	fp, r3
 800123e:	0324      	lsls	r4, r4, #12
 8001240:	4b32      	ldr	r3, [pc, #200]	@ (800130c <__aeabi_dmul+0x314>)
 8001242:	e72f      	b.n	80010a4 <__aeabi_dmul+0xac>
 8001244:	2202      	movs	r2, #2
 8001246:	4641      	mov	r1, r8
 8001248:	4311      	orrs	r1, r2
 800124a:	2280      	movs	r2, #128	@ 0x80
 800124c:	0112      	lsls	r2, r2, #4
 800124e:	4694      	mov	ip, r2
 8001250:	002a      	movs	r2, r5
 8001252:	4462      	add	r2, ip
 8001254:	4688      	mov	r8, r1
 8001256:	9201      	str	r2, [sp, #4]
 8001258:	290a      	cmp	r1, #10
 800125a:	dd00      	ble.n	800125e <__aeabi_dmul+0x266>
 800125c:	e752      	b.n	8001104 <__aeabi_dmul+0x10c>
 800125e:	465a      	mov	r2, fp
 8001260:	2000      	movs	r0, #0
 8001262:	9900      	ldr	r1, [sp, #0]
 8001264:	0004      	movs	r4, r0
 8001266:	404a      	eors	r2, r1
 8001268:	4693      	mov	fp, r2
 800126a:	2602      	movs	r6, #2
 800126c:	e70b      	b.n	8001086 <__aeabi_dmul+0x8e>
 800126e:	220c      	movs	r2, #12
 8001270:	001d      	movs	r5, r3
 8001272:	2303      	movs	r3, #3
 8001274:	4681      	mov	r9, r0
 8001276:	4690      	mov	r8, r2
 8001278:	9302      	str	r3, [sp, #8]
 800127a:	e6e3      	b.n	8001044 <__aeabi_dmul+0x4c>
 800127c:	2300      	movs	r3, #0
 800127e:	469a      	mov	sl, r3
 8001280:	3304      	adds	r3, #4
 8001282:	4698      	mov	r8, r3
 8001284:	3b03      	subs	r3, #3
 8001286:	2500      	movs	r5, #0
 8001288:	9302      	str	r3, [sp, #8]
 800128a:	e6db      	b.n	8001044 <__aeabi_dmul+0x4c>
 800128c:	4642      	mov	r2, r8
 800128e:	3301      	adds	r3, #1
 8001290:	431a      	orrs	r2, r3
 8001292:	002b      	movs	r3, r5
 8001294:	4690      	mov	r8, r2
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	9201      	str	r2, [sp, #4]
 800129a:	4642      	mov	r2, r8
 800129c:	2400      	movs	r4, #0
 800129e:	2000      	movs	r0, #0
 80012a0:	2601      	movs	r6, #1
 80012a2:	2a0a      	cmp	r2, #10
 80012a4:	dc00      	bgt.n	80012a8 <__aeabi_dmul+0x2b0>
 80012a6:	e6ea      	b.n	800107e <__aeabi_dmul+0x86>
 80012a8:	e72c      	b.n	8001104 <__aeabi_dmul+0x10c>
 80012aa:	2201      	movs	r2, #1
 80012ac:	1ad2      	subs	r2, r2, r3
 80012ae:	2a38      	cmp	r2, #56	@ 0x38
 80012b0:	dd00      	ble.n	80012b4 <__aeabi_dmul+0x2bc>
 80012b2:	e6f4      	b.n	800109e <__aeabi_dmul+0xa6>
 80012b4:	2a1f      	cmp	r2, #31
 80012b6:	dc00      	bgt.n	80012ba <__aeabi_dmul+0x2c2>
 80012b8:	e12a      	b.n	8001510 <__aeabi_dmul+0x518>
 80012ba:	211f      	movs	r1, #31
 80012bc:	4249      	negs	r1, r1
 80012be:	1acb      	subs	r3, r1, r3
 80012c0:	0021      	movs	r1, r4
 80012c2:	40d9      	lsrs	r1, r3
 80012c4:	000b      	movs	r3, r1
 80012c6:	2a20      	cmp	r2, #32
 80012c8:	d005      	beq.n	80012d6 <__aeabi_dmul+0x2de>
 80012ca:	4a16      	ldr	r2, [pc, #88]	@ (8001324 <__aeabi_dmul+0x32c>)
 80012cc:	9d01      	ldr	r5, [sp, #4]
 80012ce:	4694      	mov	ip, r2
 80012d0:	4465      	add	r5, ip
 80012d2:	40ac      	lsls	r4, r5
 80012d4:	4320      	orrs	r0, r4
 80012d6:	1e42      	subs	r2, r0, #1
 80012d8:	4190      	sbcs	r0, r2
 80012da:	4318      	orrs	r0, r3
 80012dc:	2307      	movs	r3, #7
 80012de:	0019      	movs	r1, r3
 80012e0:	2400      	movs	r4, #0
 80012e2:	4001      	ands	r1, r0
 80012e4:	4203      	tst	r3, r0
 80012e6:	d00c      	beq.n	8001302 <__aeabi_dmul+0x30a>
 80012e8:	230f      	movs	r3, #15
 80012ea:	4003      	ands	r3, r0
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	d100      	bne.n	80012f2 <__aeabi_dmul+0x2fa>
 80012f0:	e140      	b.n	8001574 <__aeabi_dmul+0x57c>
 80012f2:	1d03      	adds	r3, r0, #4
 80012f4:	4283      	cmp	r3, r0
 80012f6:	41a4      	sbcs	r4, r4
 80012f8:	0018      	movs	r0, r3
 80012fa:	4264      	negs	r4, r4
 80012fc:	0761      	lsls	r1, r4, #29
 80012fe:	0264      	lsls	r4, r4, #9
 8001300:	0b24      	lsrs	r4, r4, #12
 8001302:	08c2      	lsrs	r2, r0, #3
 8001304:	2300      	movs	r3, #0
 8001306:	430a      	orrs	r2, r1
 8001308:	e6cc      	b.n	80010a4 <__aeabi_dmul+0xac>
 800130a:	46c0      	nop			@ (mov r8, r8)
 800130c:	000007ff 	.word	0x000007ff
 8001310:	fffffc01 	.word	0xfffffc01
 8001314:	000003ff 	.word	0x000003ff
 8001318:	feffffff 	.word	0xfeffffff
 800131c:	000007fe 	.word	0x000007fe
 8001320:	fffffc0d 	.word	0xfffffc0d
 8001324:	0000043e 	.word	0x0000043e
 8001328:	4649      	mov	r1, r9
 800132a:	464a      	mov	r2, r9
 800132c:	0409      	lsls	r1, r1, #16
 800132e:	0c09      	lsrs	r1, r1, #16
 8001330:	000d      	movs	r5, r1
 8001332:	0c16      	lsrs	r6, r2, #16
 8001334:	0c02      	lsrs	r2, r0, #16
 8001336:	0400      	lsls	r0, r0, #16
 8001338:	0c00      	lsrs	r0, r0, #16
 800133a:	4345      	muls	r5, r0
 800133c:	46ac      	mov	ip, r5
 800133e:	0005      	movs	r5, r0
 8001340:	4375      	muls	r5, r6
 8001342:	46a8      	mov	r8, r5
 8001344:	0015      	movs	r5, r2
 8001346:	000f      	movs	r7, r1
 8001348:	4375      	muls	r5, r6
 800134a:	9200      	str	r2, [sp, #0]
 800134c:	9502      	str	r5, [sp, #8]
 800134e:	002a      	movs	r2, r5
 8001350:	9d00      	ldr	r5, [sp, #0]
 8001352:	436f      	muls	r7, r5
 8001354:	4665      	mov	r5, ip
 8001356:	0c2d      	lsrs	r5, r5, #16
 8001358:	46a9      	mov	r9, r5
 800135a:	4447      	add	r7, r8
 800135c:	444f      	add	r7, r9
 800135e:	45b8      	cmp	r8, r7
 8001360:	d905      	bls.n	800136e <__aeabi_dmul+0x376>
 8001362:	0015      	movs	r5, r2
 8001364:	2280      	movs	r2, #128	@ 0x80
 8001366:	0252      	lsls	r2, r2, #9
 8001368:	4690      	mov	r8, r2
 800136a:	4445      	add	r5, r8
 800136c:	9502      	str	r5, [sp, #8]
 800136e:	0c3d      	lsrs	r5, r7, #16
 8001370:	9503      	str	r5, [sp, #12]
 8001372:	4665      	mov	r5, ip
 8001374:	042d      	lsls	r5, r5, #16
 8001376:	043f      	lsls	r7, r7, #16
 8001378:	0c2d      	lsrs	r5, r5, #16
 800137a:	46ac      	mov	ip, r5
 800137c:	003d      	movs	r5, r7
 800137e:	4465      	add	r5, ip
 8001380:	9504      	str	r5, [sp, #16]
 8001382:	0c25      	lsrs	r5, r4, #16
 8001384:	0424      	lsls	r4, r4, #16
 8001386:	0c24      	lsrs	r4, r4, #16
 8001388:	46ac      	mov	ip, r5
 800138a:	0025      	movs	r5, r4
 800138c:	4375      	muls	r5, r6
 800138e:	46a8      	mov	r8, r5
 8001390:	4665      	mov	r5, ip
 8001392:	000f      	movs	r7, r1
 8001394:	4369      	muls	r1, r5
 8001396:	4441      	add	r1, r8
 8001398:	4689      	mov	r9, r1
 800139a:	4367      	muls	r7, r4
 800139c:	0c39      	lsrs	r1, r7, #16
 800139e:	4449      	add	r1, r9
 80013a0:	436e      	muls	r6, r5
 80013a2:	4588      	cmp	r8, r1
 80013a4:	d903      	bls.n	80013ae <__aeabi_dmul+0x3b6>
 80013a6:	2280      	movs	r2, #128	@ 0x80
 80013a8:	0252      	lsls	r2, r2, #9
 80013aa:	4690      	mov	r8, r2
 80013ac:	4446      	add	r6, r8
 80013ae:	0c0d      	lsrs	r5, r1, #16
 80013b0:	46a8      	mov	r8, r5
 80013b2:	0035      	movs	r5, r6
 80013b4:	4445      	add	r5, r8
 80013b6:	9505      	str	r5, [sp, #20]
 80013b8:	9d03      	ldr	r5, [sp, #12]
 80013ba:	043f      	lsls	r7, r7, #16
 80013bc:	46a8      	mov	r8, r5
 80013be:	0c3f      	lsrs	r7, r7, #16
 80013c0:	0409      	lsls	r1, r1, #16
 80013c2:	19c9      	adds	r1, r1, r7
 80013c4:	4488      	add	r8, r1
 80013c6:	4645      	mov	r5, r8
 80013c8:	9503      	str	r5, [sp, #12]
 80013ca:	4655      	mov	r5, sl
 80013cc:	042e      	lsls	r6, r5, #16
 80013ce:	0c36      	lsrs	r6, r6, #16
 80013d0:	0c2f      	lsrs	r7, r5, #16
 80013d2:	0035      	movs	r5, r6
 80013d4:	4345      	muls	r5, r0
 80013d6:	4378      	muls	r0, r7
 80013d8:	4681      	mov	r9, r0
 80013da:	0038      	movs	r0, r7
 80013dc:	46a8      	mov	r8, r5
 80013de:	0c2d      	lsrs	r5, r5, #16
 80013e0:	46aa      	mov	sl, r5
 80013e2:	9a00      	ldr	r2, [sp, #0]
 80013e4:	4350      	muls	r0, r2
 80013e6:	4372      	muls	r2, r6
 80013e8:	444a      	add	r2, r9
 80013ea:	4452      	add	r2, sl
 80013ec:	4591      	cmp	r9, r2
 80013ee:	d903      	bls.n	80013f8 <__aeabi_dmul+0x400>
 80013f0:	2580      	movs	r5, #128	@ 0x80
 80013f2:	026d      	lsls	r5, r5, #9
 80013f4:	46a9      	mov	r9, r5
 80013f6:	4448      	add	r0, r9
 80013f8:	0c15      	lsrs	r5, r2, #16
 80013fa:	46a9      	mov	r9, r5
 80013fc:	4645      	mov	r5, r8
 80013fe:	042d      	lsls	r5, r5, #16
 8001400:	0c2d      	lsrs	r5, r5, #16
 8001402:	46a8      	mov	r8, r5
 8001404:	4665      	mov	r5, ip
 8001406:	437d      	muls	r5, r7
 8001408:	0412      	lsls	r2, r2, #16
 800140a:	4448      	add	r0, r9
 800140c:	4490      	add	r8, r2
 800140e:	46a9      	mov	r9, r5
 8001410:	0032      	movs	r2, r6
 8001412:	4665      	mov	r5, ip
 8001414:	4362      	muls	r2, r4
 8001416:	436e      	muls	r6, r5
 8001418:	437c      	muls	r4, r7
 800141a:	0c17      	lsrs	r7, r2, #16
 800141c:	1936      	adds	r6, r6, r4
 800141e:	19bf      	adds	r7, r7, r6
 8001420:	42bc      	cmp	r4, r7
 8001422:	d903      	bls.n	800142c <__aeabi_dmul+0x434>
 8001424:	2480      	movs	r4, #128	@ 0x80
 8001426:	0264      	lsls	r4, r4, #9
 8001428:	46a4      	mov	ip, r4
 800142a:	44e1      	add	r9, ip
 800142c:	9c02      	ldr	r4, [sp, #8]
 800142e:	9e03      	ldr	r6, [sp, #12]
 8001430:	46a4      	mov	ip, r4
 8001432:	9d05      	ldr	r5, [sp, #20]
 8001434:	4466      	add	r6, ip
 8001436:	428e      	cmp	r6, r1
 8001438:	4189      	sbcs	r1, r1
 800143a:	46ac      	mov	ip, r5
 800143c:	0412      	lsls	r2, r2, #16
 800143e:	043c      	lsls	r4, r7, #16
 8001440:	0c12      	lsrs	r2, r2, #16
 8001442:	18a2      	adds	r2, r4, r2
 8001444:	4462      	add	r2, ip
 8001446:	4249      	negs	r1, r1
 8001448:	1854      	adds	r4, r2, r1
 800144a:	4446      	add	r6, r8
 800144c:	46a4      	mov	ip, r4
 800144e:	4546      	cmp	r6, r8
 8001450:	41a4      	sbcs	r4, r4
 8001452:	4682      	mov	sl, r0
 8001454:	4264      	negs	r4, r4
 8001456:	46a0      	mov	r8, r4
 8001458:	42aa      	cmp	r2, r5
 800145a:	4192      	sbcs	r2, r2
 800145c:	458c      	cmp	ip, r1
 800145e:	4189      	sbcs	r1, r1
 8001460:	44e2      	add	sl, ip
 8001462:	44d0      	add	r8, sl
 8001464:	4249      	negs	r1, r1
 8001466:	4252      	negs	r2, r2
 8001468:	430a      	orrs	r2, r1
 800146a:	45a0      	cmp	r8, r4
 800146c:	41a4      	sbcs	r4, r4
 800146e:	4582      	cmp	sl, r0
 8001470:	4189      	sbcs	r1, r1
 8001472:	4264      	negs	r4, r4
 8001474:	4249      	negs	r1, r1
 8001476:	430c      	orrs	r4, r1
 8001478:	4641      	mov	r1, r8
 800147a:	0c3f      	lsrs	r7, r7, #16
 800147c:	19d2      	adds	r2, r2, r7
 800147e:	1912      	adds	r2, r2, r4
 8001480:	0dcc      	lsrs	r4, r1, #23
 8001482:	9904      	ldr	r1, [sp, #16]
 8001484:	0270      	lsls	r0, r6, #9
 8001486:	4308      	orrs	r0, r1
 8001488:	1e41      	subs	r1, r0, #1
 800148a:	4188      	sbcs	r0, r1
 800148c:	4641      	mov	r1, r8
 800148e:	444a      	add	r2, r9
 8001490:	0df6      	lsrs	r6, r6, #23
 8001492:	0252      	lsls	r2, r2, #9
 8001494:	4330      	orrs	r0, r6
 8001496:	0249      	lsls	r1, r1, #9
 8001498:	4314      	orrs	r4, r2
 800149a:	4308      	orrs	r0, r1
 800149c:	01d2      	lsls	r2, r2, #7
 800149e:	d535      	bpl.n	800150c <__aeabi_dmul+0x514>
 80014a0:	2201      	movs	r2, #1
 80014a2:	0843      	lsrs	r3, r0, #1
 80014a4:	4002      	ands	r2, r0
 80014a6:	4313      	orrs	r3, r2
 80014a8:	07e0      	lsls	r0, r4, #31
 80014aa:	4318      	orrs	r0, r3
 80014ac:	0864      	lsrs	r4, r4, #1
 80014ae:	e634      	b.n	800111a <__aeabi_dmul+0x122>
 80014b0:	9b00      	ldr	r3, [sp, #0]
 80014b2:	46a2      	mov	sl, r4
 80014b4:	469b      	mov	fp, r3
 80014b6:	4681      	mov	r9, r0
 80014b8:	2480      	movs	r4, #128	@ 0x80
 80014ba:	4653      	mov	r3, sl
 80014bc:	0324      	lsls	r4, r4, #12
 80014be:	431c      	orrs	r4, r3
 80014c0:	0324      	lsls	r4, r4, #12
 80014c2:	464a      	mov	r2, r9
 80014c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001580 <__aeabi_dmul+0x588>)
 80014c6:	0b24      	lsrs	r4, r4, #12
 80014c8:	e5ec      	b.n	80010a4 <__aeabi_dmul+0xac>
 80014ca:	f000 fcc5 	bl	8001e58 <__clzsi2>
 80014ce:	2315      	movs	r3, #21
 80014d0:	469c      	mov	ip, r3
 80014d2:	4484      	add	ip, r0
 80014d4:	0002      	movs	r2, r0
 80014d6:	4663      	mov	r3, ip
 80014d8:	3220      	adds	r2, #32
 80014da:	2b1c      	cmp	r3, #28
 80014dc:	dc00      	bgt.n	80014e0 <__aeabi_dmul+0x4e8>
 80014de:	e684      	b.n	80011ea <__aeabi_dmul+0x1f2>
 80014e0:	2300      	movs	r3, #0
 80014e2:	4699      	mov	r9, r3
 80014e4:	0023      	movs	r3, r4
 80014e6:	3808      	subs	r0, #8
 80014e8:	4083      	lsls	r3, r0
 80014ea:	469a      	mov	sl, r3
 80014ec:	e68e      	b.n	800120c <__aeabi_dmul+0x214>
 80014ee:	f000 fcb3 	bl	8001e58 <__clzsi2>
 80014f2:	0002      	movs	r2, r0
 80014f4:	0003      	movs	r3, r0
 80014f6:	3215      	adds	r2, #21
 80014f8:	3320      	adds	r3, #32
 80014fa:	2a1c      	cmp	r2, #28
 80014fc:	dc00      	bgt.n	8001500 <__aeabi_dmul+0x508>
 80014fe:	e64e      	b.n	800119e <__aeabi_dmul+0x1a6>
 8001500:	0002      	movs	r2, r0
 8001502:	0034      	movs	r4, r6
 8001504:	3a08      	subs	r2, #8
 8001506:	2000      	movs	r0, #0
 8001508:	4094      	lsls	r4, r2
 800150a:	e652      	b.n	80011b2 <__aeabi_dmul+0x1ba>
 800150c:	9301      	str	r3, [sp, #4]
 800150e:	e604      	b.n	800111a <__aeabi_dmul+0x122>
 8001510:	4b1c      	ldr	r3, [pc, #112]	@ (8001584 <__aeabi_dmul+0x58c>)
 8001512:	0021      	movs	r1, r4
 8001514:	469c      	mov	ip, r3
 8001516:	0003      	movs	r3, r0
 8001518:	9d01      	ldr	r5, [sp, #4]
 800151a:	40d3      	lsrs	r3, r2
 800151c:	4465      	add	r5, ip
 800151e:	40a9      	lsls	r1, r5
 8001520:	4319      	orrs	r1, r3
 8001522:	0003      	movs	r3, r0
 8001524:	40ab      	lsls	r3, r5
 8001526:	1e58      	subs	r0, r3, #1
 8001528:	4183      	sbcs	r3, r0
 800152a:	4319      	orrs	r1, r3
 800152c:	0008      	movs	r0, r1
 800152e:	40d4      	lsrs	r4, r2
 8001530:	074b      	lsls	r3, r1, #29
 8001532:	d009      	beq.n	8001548 <__aeabi_dmul+0x550>
 8001534:	230f      	movs	r3, #15
 8001536:	400b      	ands	r3, r1
 8001538:	2b04      	cmp	r3, #4
 800153a:	d005      	beq.n	8001548 <__aeabi_dmul+0x550>
 800153c:	1d0b      	adds	r3, r1, #4
 800153e:	428b      	cmp	r3, r1
 8001540:	4180      	sbcs	r0, r0
 8001542:	4240      	negs	r0, r0
 8001544:	1824      	adds	r4, r4, r0
 8001546:	0018      	movs	r0, r3
 8001548:	0223      	lsls	r3, r4, #8
 800154a:	d400      	bmi.n	800154e <__aeabi_dmul+0x556>
 800154c:	e6d6      	b.n	80012fc <__aeabi_dmul+0x304>
 800154e:	2301      	movs	r3, #1
 8001550:	2400      	movs	r4, #0
 8001552:	2200      	movs	r2, #0
 8001554:	e5a6      	b.n	80010a4 <__aeabi_dmul+0xac>
 8001556:	290f      	cmp	r1, #15
 8001558:	d1aa      	bne.n	80014b0 <__aeabi_dmul+0x4b8>
 800155a:	2380      	movs	r3, #128	@ 0x80
 800155c:	4652      	mov	r2, sl
 800155e:	031b      	lsls	r3, r3, #12
 8001560:	421a      	tst	r2, r3
 8001562:	d0a9      	beq.n	80014b8 <__aeabi_dmul+0x4c0>
 8001564:	421c      	tst	r4, r3
 8001566:	d1a7      	bne.n	80014b8 <__aeabi_dmul+0x4c0>
 8001568:	431c      	orrs	r4, r3
 800156a:	9b00      	ldr	r3, [sp, #0]
 800156c:	0002      	movs	r2, r0
 800156e:	469b      	mov	fp, r3
 8001570:	4b03      	ldr	r3, [pc, #12]	@ (8001580 <__aeabi_dmul+0x588>)
 8001572:	e597      	b.n	80010a4 <__aeabi_dmul+0xac>
 8001574:	2400      	movs	r4, #0
 8001576:	e6c1      	b.n	80012fc <__aeabi_dmul+0x304>
 8001578:	2400      	movs	r4, #0
 800157a:	4b01      	ldr	r3, [pc, #4]	@ (8001580 <__aeabi_dmul+0x588>)
 800157c:	0022      	movs	r2, r4
 800157e:	e591      	b.n	80010a4 <__aeabi_dmul+0xac>
 8001580:	000007ff 	.word	0x000007ff
 8001584:	0000041e 	.word	0x0000041e

08001588 <__aeabi_dsub>:
 8001588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158a:	464e      	mov	r6, r9
 800158c:	4645      	mov	r5, r8
 800158e:	46de      	mov	lr, fp
 8001590:	4657      	mov	r7, sl
 8001592:	b5e0      	push	{r5, r6, r7, lr}
 8001594:	b085      	sub	sp, #20
 8001596:	9000      	str	r0, [sp, #0]
 8001598:	9101      	str	r1, [sp, #4]
 800159a:	030c      	lsls	r4, r1, #12
 800159c:	004f      	lsls	r7, r1, #1
 800159e:	0fce      	lsrs	r6, r1, #31
 80015a0:	0a61      	lsrs	r1, r4, #9
 80015a2:	9c00      	ldr	r4, [sp, #0]
 80015a4:	46b0      	mov	r8, r6
 80015a6:	0f64      	lsrs	r4, r4, #29
 80015a8:	430c      	orrs	r4, r1
 80015aa:	9900      	ldr	r1, [sp, #0]
 80015ac:	0d7f      	lsrs	r7, r7, #21
 80015ae:	00c8      	lsls	r0, r1, #3
 80015b0:	0011      	movs	r1, r2
 80015b2:	001a      	movs	r2, r3
 80015b4:	031b      	lsls	r3, r3, #12
 80015b6:	469c      	mov	ip, r3
 80015b8:	9100      	str	r1, [sp, #0]
 80015ba:	9201      	str	r2, [sp, #4]
 80015bc:	0051      	lsls	r1, r2, #1
 80015be:	0d4b      	lsrs	r3, r1, #21
 80015c0:	4699      	mov	r9, r3
 80015c2:	9b01      	ldr	r3, [sp, #4]
 80015c4:	9d00      	ldr	r5, [sp, #0]
 80015c6:	0fd9      	lsrs	r1, r3, #31
 80015c8:	4663      	mov	r3, ip
 80015ca:	0f6a      	lsrs	r2, r5, #29
 80015cc:	0a5b      	lsrs	r3, r3, #9
 80015ce:	4313      	orrs	r3, r2
 80015d0:	00ea      	lsls	r2, r5, #3
 80015d2:	4694      	mov	ip, r2
 80015d4:	4693      	mov	fp, r2
 80015d6:	4ac1      	ldr	r2, [pc, #772]	@ (80018dc <__aeabi_dsub+0x354>)
 80015d8:	9003      	str	r0, [sp, #12]
 80015da:	9302      	str	r3, [sp, #8]
 80015dc:	4591      	cmp	r9, r2
 80015de:	d100      	bne.n	80015e2 <__aeabi_dsub+0x5a>
 80015e0:	e0cd      	b.n	800177e <__aeabi_dsub+0x1f6>
 80015e2:	2501      	movs	r5, #1
 80015e4:	4069      	eors	r1, r5
 80015e6:	464d      	mov	r5, r9
 80015e8:	1b7d      	subs	r5, r7, r5
 80015ea:	46aa      	mov	sl, r5
 80015ec:	428e      	cmp	r6, r1
 80015ee:	d100      	bne.n	80015f2 <__aeabi_dsub+0x6a>
 80015f0:	e080      	b.n	80016f4 <__aeabi_dsub+0x16c>
 80015f2:	2d00      	cmp	r5, #0
 80015f4:	dc00      	bgt.n	80015f8 <__aeabi_dsub+0x70>
 80015f6:	e335      	b.n	8001c64 <__aeabi_dsub+0x6dc>
 80015f8:	4649      	mov	r1, r9
 80015fa:	2900      	cmp	r1, #0
 80015fc:	d100      	bne.n	8001600 <__aeabi_dsub+0x78>
 80015fe:	e0df      	b.n	80017c0 <__aeabi_dsub+0x238>
 8001600:	4297      	cmp	r7, r2
 8001602:	d100      	bne.n	8001606 <__aeabi_dsub+0x7e>
 8001604:	e194      	b.n	8001930 <__aeabi_dsub+0x3a8>
 8001606:	4652      	mov	r2, sl
 8001608:	2501      	movs	r5, #1
 800160a:	2a38      	cmp	r2, #56	@ 0x38
 800160c:	dc19      	bgt.n	8001642 <__aeabi_dsub+0xba>
 800160e:	2280      	movs	r2, #128	@ 0x80
 8001610:	9b02      	ldr	r3, [sp, #8]
 8001612:	0412      	lsls	r2, r2, #16
 8001614:	4313      	orrs	r3, r2
 8001616:	9302      	str	r3, [sp, #8]
 8001618:	4652      	mov	r2, sl
 800161a:	2a1f      	cmp	r2, #31
 800161c:	dd00      	ble.n	8001620 <__aeabi_dsub+0x98>
 800161e:	e1e3      	b.n	80019e8 <__aeabi_dsub+0x460>
 8001620:	4653      	mov	r3, sl
 8001622:	2220      	movs	r2, #32
 8001624:	4661      	mov	r1, ip
 8001626:	9d02      	ldr	r5, [sp, #8]
 8001628:	1ad2      	subs	r2, r2, r3
 800162a:	4095      	lsls	r5, r2
 800162c:	40d9      	lsrs	r1, r3
 800162e:	430d      	orrs	r5, r1
 8001630:	4661      	mov	r1, ip
 8001632:	4091      	lsls	r1, r2
 8001634:	000a      	movs	r2, r1
 8001636:	1e51      	subs	r1, r2, #1
 8001638:	418a      	sbcs	r2, r1
 800163a:	4315      	orrs	r5, r2
 800163c:	9a02      	ldr	r2, [sp, #8]
 800163e:	40da      	lsrs	r2, r3
 8001640:	1aa4      	subs	r4, r4, r2
 8001642:	1b45      	subs	r5, r0, r5
 8001644:	42a8      	cmp	r0, r5
 8001646:	4180      	sbcs	r0, r0
 8001648:	4240      	negs	r0, r0
 800164a:	1a24      	subs	r4, r4, r0
 800164c:	0223      	lsls	r3, r4, #8
 800164e:	d400      	bmi.n	8001652 <__aeabi_dsub+0xca>
 8001650:	e13d      	b.n	80018ce <__aeabi_dsub+0x346>
 8001652:	0264      	lsls	r4, r4, #9
 8001654:	0a64      	lsrs	r4, r4, #9
 8001656:	2c00      	cmp	r4, #0
 8001658:	d100      	bne.n	800165c <__aeabi_dsub+0xd4>
 800165a:	e147      	b.n	80018ec <__aeabi_dsub+0x364>
 800165c:	0020      	movs	r0, r4
 800165e:	f000 fbfb 	bl	8001e58 <__clzsi2>
 8001662:	0003      	movs	r3, r0
 8001664:	3b08      	subs	r3, #8
 8001666:	2120      	movs	r1, #32
 8001668:	0028      	movs	r0, r5
 800166a:	1aca      	subs	r2, r1, r3
 800166c:	40d0      	lsrs	r0, r2
 800166e:	409c      	lsls	r4, r3
 8001670:	0002      	movs	r2, r0
 8001672:	409d      	lsls	r5, r3
 8001674:	4322      	orrs	r2, r4
 8001676:	429f      	cmp	r7, r3
 8001678:	dd00      	ble.n	800167c <__aeabi_dsub+0xf4>
 800167a:	e177      	b.n	800196c <__aeabi_dsub+0x3e4>
 800167c:	1bd8      	subs	r0, r3, r7
 800167e:	3001      	adds	r0, #1
 8001680:	1a09      	subs	r1, r1, r0
 8001682:	002c      	movs	r4, r5
 8001684:	408d      	lsls	r5, r1
 8001686:	40c4      	lsrs	r4, r0
 8001688:	1e6b      	subs	r3, r5, #1
 800168a:	419d      	sbcs	r5, r3
 800168c:	0013      	movs	r3, r2
 800168e:	40c2      	lsrs	r2, r0
 8001690:	408b      	lsls	r3, r1
 8001692:	4325      	orrs	r5, r4
 8001694:	2700      	movs	r7, #0
 8001696:	0014      	movs	r4, r2
 8001698:	431d      	orrs	r5, r3
 800169a:	076b      	lsls	r3, r5, #29
 800169c:	d009      	beq.n	80016b2 <__aeabi_dsub+0x12a>
 800169e:	230f      	movs	r3, #15
 80016a0:	402b      	ands	r3, r5
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	d005      	beq.n	80016b2 <__aeabi_dsub+0x12a>
 80016a6:	1d2b      	adds	r3, r5, #4
 80016a8:	42ab      	cmp	r3, r5
 80016aa:	41ad      	sbcs	r5, r5
 80016ac:	426d      	negs	r5, r5
 80016ae:	1964      	adds	r4, r4, r5
 80016b0:	001d      	movs	r5, r3
 80016b2:	0223      	lsls	r3, r4, #8
 80016b4:	d400      	bmi.n	80016b8 <__aeabi_dsub+0x130>
 80016b6:	e140      	b.n	800193a <__aeabi_dsub+0x3b2>
 80016b8:	4a88      	ldr	r2, [pc, #544]	@ (80018dc <__aeabi_dsub+0x354>)
 80016ba:	3701      	adds	r7, #1
 80016bc:	4297      	cmp	r7, r2
 80016be:	d100      	bne.n	80016c2 <__aeabi_dsub+0x13a>
 80016c0:	e101      	b.n	80018c6 <__aeabi_dsub+0x33e>
 80016c2:	2601      	movs	r6, #1
 80016c4:	4643      	mov	r3, r8
 80016c6:	4986      	ldr	r1, [pc, #536]	@ (80018e0 <__aeabi_dsub+0x358>)
 80016c8:	08ed      	lsrs	r5, r5, #3
 80016ca:	4021      	ands	r1, r4
 80016cc:	074a      	lsls	r2, r1, #29
 80016ce:	432a      	orrs	r2, r5
 80016d0:	057c      	lsls	r4, r7, #21
 80016d2:	024d      	lsls	r5, r1, #9
 80016d4:	0b2d      	lsrs	r5, r5, #12
 80016d6:	0d64      	lsrs	r4, r4, #21
 80016d8:	401e      	ands	r6, r3
 80016da:	0524      	lsls	r4, r4, #20
 80016dc:	432c      	orrs	r4, r5
 80016de:	07f6      	lsls	r6, r6, #31
 80016e0:	4334      	orrs	r4, r6
 80016e2:	0010      	movs	r0, r2
 80016e4:	0021      	movs	r1, r4
 80016e6:	b005      	add	sp, #20
 80016e8:	bcf0      	pop	{r4, r5, r6, r7}
 80016ea:	46bb      	mov	fp, r7
 80016ec:	46b2      	mov	sl, r6
 80016ee:	46a9      	mov	r9, r5
 80016f0:	46a0      	mov	r8, r4
 80016f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f4:	2d00      	cmp	r5, #0
 80016f6:	dc00      	bgt.n	80016fa <__aeabi_dsub+0x172>
 80016f8:	e2d0      	b.n	8001c9c <__aeabi_dsub+0x714>
 80016fa:	4649      	mov	r1, r9
 80016fc:	2900      	cmp	r1, #0
 80016fe:	d000      	beq.n	8001702 <__aeabi_dsub+0x17a>
 8001700:	e0d4      	b.n	80018ac <__aeabi_dsub+0x324>
 8001702:	4661      	mov	r1, ip
 8001704:	9b02      	ldr	r3, [sp, #8]
 8001706:	4319      	orrs	r1, r3
 8001708:	d100      	bne.n	800170c <__aeabi_dsub+0x184>
 800170a:	e12b      	b.n	8001964 <__aeabi_dsub+0x3dc>
 800170c:	1e69      	subs	r1, r5, #1
 800170e:	2d01      	cmp	r5, #1
 8001710:	d100      	bne.n	8001714 <__aeabi_dsub+0x18c>
 8001712:	e1d9      	b.n	8001ac8 <__aeabi_dsub+0x540>
 8001714:	4295      	cmp	r5, r2
 8001716:	d100      	bne.n	800171a <__aeabi_dsub+0x192>
 8001718:	e10a      	b.n	8001930 <__aeabi_dsub+0x3a8>
 800171a:	2501      	movs	r5, #1
 800171c:	2938      	cmp	r1, #56	@ 0x38
 800171e:	dc17      	bgt.n	8001750 <__aeabi_dsub+0x1c8>
 8001720:	468a      	mov	sl, r1
 8001722:	4653      	mov	r3, sl
 8001724:	2b1f      	cmp	r3, #31
 8001726:	dd00      	ble.n	800172a <__aeabi_dsub+0x1a2>
 8001728:	e1e7      	b.n	8001afa <__aeabi_dsub+0x572>
 800172a:	2220      	movs	r2, #32
 800172c:	1ad2      	subs	r2, r2, r3
 800172e:	9b02      	ldr	r3, [sp, #8]
 8001730:	4661      	mov	r1, ip
 8001732:	4093      	lsls	r3, r2
 8001734:	001d      	movs	r5, r3
 8001736:	4653      	mov	r3, sl
 8001738:	40d9      	lsrs	r1, r3
 800173a:	4663      	mov	r3, ip
 800173c:	4093      	lsls	r3, r2
 800173e:	001a      	movs	r2, r3
 8001740:	430d      	orrs	r5, r1
 8001742:	1e51      	subs	r1, r2, #1
 8001744:	418a      	sbcs	r2, r1
 8001746:	4653      	mov	r3, sl
 8001748:	4315      	orrs	r5, r2
 800174a:	9a02      	ldr	r2, [sp, #8]
 800174c:	40da      	lsrs	r2, r3
 800174e:	18a4      	adds	r4, r4, r2
 8001750:	182d      	adds	r5, r5, r0
 8001752:	4285      	cmp	r5, r0
 8001754:	4180      	sbcs	r0, r0
 8001756:	4240      	negs	r0, r0
 8001758:	1824      	adds	r4, r4, r0
 800175a:	0223      	lsls	r3, r4, #8
 800175c:	d400      	bmi.n	8001760 <__aeabi_dsub+0x1d8>
 800175e:	e0b6      	b.n	80018ce <__aeabi_dsub+0x346>
 8001760:	4b5e      	ldr	r3, [pc, #376]	@ (80018dc <__aeabi_dsub+0x354>)
 8001762:	3701      	adds	r7, #1
 8001764:	429f      	cmp	r7, r3
 8001766:	d100      	bne.n	800176a <__aeabi_dsub+0x1e2>
 8001768:	e0ad      	b.n	80018c6 <__aeabi_dsub+0x33e>
 800176a:	2101      	movs	r1, #1
 800176c:	4b5c      	ldr	r3, [pc, #368]	@ (80018e0 <__aeabi_dsub+0x358>)
 800176e:	086a      	lsrs	r2, r5, #1
 8001770:	401c      	ands	r4, r3
 8001772:	4029      	ands	r1, r5
 8001774:	430a      	orrs	r2, r1
 8001776:	07e5      	lsls	r5, r4, #31
 8001778:	4315      	orrs	r5, r2
 800177a:	0864      	lsrs	r4, r4, #1
 800177c:	e78d      	b.n	800169a <__aeabi_dsub+0x112>
 800177e:	4a59      	ldr	r2, [pc, #356]	@ (80018e4 <__aeabi_dsub+0x35c>)
 8001780:	9b02      	ldr	r3, [sp, #8]
 8001782:	4692      	mov	sl, r2
 8001784:	4662      	mov	r2, ip
 8001786:	44ba      	add	sl, r7
 8001788:	431a      	orrs	r2, r3
 800178a:	d02c      	beq.n	80017e6 <__aeabi_dsub+0x25e>
 800178c:	428e      	cmp	r6, r1
 800178e:	d02e      	beq.n	80017ee <__aeabi_dsub+0x266>
 8001790:	4652      	mov	r2, sl
 8001792:	2a00      	cmp	r2, #0
 8001794:	d060      	beq.n	8001858 <__aeabi_dsub+0x2d0>
 8001796:	2f00      	cmp	r7, #0
 8001798:	d100      	bne.n	800179c <__aeabi_dsub+0x214>
 800179a:	e0db      	b.n	8001954 <__aeabi_dsub+0x3cc>
 800179c:	4663      	mov	r3, ip
 800179e:	000e      	movs	r6, r1
 80017a0:	9c02      	ldr	r4, [sp, #8]
 80017a2:	08d8      	lsrs	r0, r3, #3
 80017a4:	0762      	lsls	r2, r4, #29
 80017a6:	4302      	orrs	r2, r0
 80017a8:	08e4      	lsrs	r4, r4, #3
 80017aa:	0013      	movs	r3, r2
 80017ac:	4323      	orrs	r3, r4
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dsub+0x22a>
 80017b0:	e254      	b.n	8001c5c <__aeabi_dsub+0x6d4>
 80017b2:	2580      	movs	r5, #128	@ 0x80
 80017b4:	032d      	lsls	r5, r5, #12
 80017b6:	4325      	orrs	r5, r4
 80017b8:	032d      	lsls	r5, r5, #12
 80017ba:	4c48      	ldr	r4, [pc, #288]	@ (80018dc <__aeabi_dsub+0x354>)
 80017bc:	0b2d      	lsrs	r5, r5, #12
 80017be:	e78c      	b.n	80016da <__aeabi_dsub+0x152>
 80017c0:	4661      	mov	r1, ip
 80017c2:	9b02      	ldr	r3, [sp, #8]
 80017c4:	4319      	orrs	r1, r3
 80017c6:	d100      	bne.n	80017ca <__aeabi_dsub+0x242>
 80017c8:	e0cc      	b.n	8001964 <__aeabi_dsub+0x3dc>
 80017ca:	0029      	movs	r1, r5
 80017cc:	3901      	subs	r1, #1
 80017ce:	2d01      	cmp	r5, #1
 80017d0:	d100      	bne.n	80017d4 <__aeabi_dsub+0x24c>
 80017d2:	e188      	b.n	8001ae6 <__aeabi_dsub+0x55e>
 80017d4:	4295      	cmp	r5, r2
 80017d6:	d100      	bne.n	80017da <__aeabi_dsub+0x252>
 80017d8:	e0aa      	b.n	8001930 <__aeabi_dsub+0x3a8>
 80017da:	2501      	movs	r5, #1
 80017dc:	2938      	cmp	r1, #56	@ 0x38
 80017de:	dd00      	ble.n	80017e2 <__aeabi_dsub+0x25a>
 80017e0:	e72f      	b.n	8001642 <__aeabi_dsub+0xba>
 80017e2:	468a      	mov	sl, r1
 80017e4:	e718      	b.n	8001618 <__aeabi_dsub+0x90>
 80017e6:	2201      	movs	r2, #1
 80017e8:	4051      	eors	r1, r2
 80017ea:	428e      	cmp	r6, r1
 80017ec:	d1d0      	bne.n	8001790 <__aeabi_dsub+0x208>
 80017ee:	4653      	mov	r3, sl
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d100      	bne.n	80017f6 <__aeabi_dsub+0x26e>
 80017f4:	e0be      	b.n	8001974 <__aeabi_dsub+0x3ec>
 80017f6:	2f00      	cmp	r7, #0
 80017f8:	d000      	beq.n	80017fc <__aeabi_dsub+0x274>
 80017fa:	e138      	b.n	8001a6e <__aeabi_dsub+0x4e6>
 80017fc:	46ca      	mov	sl, r9
 80017fe:	0022      	movs	r2, r4
 8001800:	4302      	orrs	r2, r0
 8001802:	d100      	bne.n	8001806 <__aeabi_dsub+0x27e>
 8001804:	e1e2      	b.n	8001bcc <__aeabi_dsub+0x644>
 8001806:	4653      	mov	r3, sl
 8001808:	1e59      	subs	r1, r3, #1
 800180a:	2b01      	cmp	r3, #1
 800180c:	d100      	bne.n	8001810 <__aeabi_dsub+0x288>
 800180e:	e20d      	b.n	8001c2c <__aeabi_dsub+0x6a4>
 8001810:	4a32      	ldr	r2, [pc, #200]	@ (80018dc <__aeabi_dsub+0x354>)
 8001812:	4592      	cmp	sl, r2
 8001814:	d100      	bne.n	8001818 <__aeabi_dsub+0x290>
 8001816:	e1d2      	b.n	8001bbe <__aeabi_dsub+0x636>
 8001818:	2701      	movs	r7, #1
 800181a:	2938      	cmp	r1, #56	@ 0x38
 800181c:	dc13      	bgt.n	8001846 <__aeabi_dsub+0x2be>
 800181e:	291f      	cmp	r1, #31
 8001820:	dd00      	ble.n	8001824 <__aeabi_dsub+0x29c>
 8001822:	e1ee      	b.n	8001c02 <__aeabi_dsub+0x67a>
 8001824:	2220      	movs	r2, #32
 8001826:	9b02      	ldr	r3, [sp, #8]
 8001828:	1a52      	subs	r2, r2, r1
 800182a:	0025      	movs	r5, r4
 800182c:	0007      	movs	r7, r0
 800182e:	469a      	mov	sl, r3
 8001830:	40cc      	lsrs	r4, r1
 8001832:	4090      	lsls	r0, r2
 8001834:	4095      	lsls	r5, r2
 8001836:	40cf      	lsrs	r7, r1
 8001838:	44a2      	add	sl, r4
 800183a:	1e42      	subs	r2, r0, #1
 800183c:	4190      	sbcs	r0, r2
 800183e:	4653      	mov	r3, sl
 8001840:	432f      	orrs	r7, r5
 8001842:	4307      	orrs	r7, r0
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	003d      	movs	r5, r7
 8001848:	4465      	add	r5, ip
 800184a:	4565      	cmp	r5, ip
 800184c:	4192      	sbcs	r2, r2
 800184e:	9b02      	ldr	r3, [sp, #8]
 8001850:	4252      	negs	r2, r2
 8001852:	464f      	mov	r7, r9
 8001854:	18d4      	adds	r4, r2, r3
 8001856:	e780      	b.n	800175a <__aeabi_dsub+0x1d2>
 8001858:	4a23      	ldr	r2, [pc, #140]	@ (80018e8 <__aeabi_dsub+0x360>)
 800185a:	1c7d      	adds	r5, r7, #1
 800185c:	4215      	tst	r5, r2
 800185e:	d000      	beq.n	8001862 <__aeabi_dsub+0x2da>
 8001860:	e0aa      	b.n	80019b8 <__aeabi_dsub+0x430>
 8001862:	4662      	mov	r2, ip
 8001864:	0025      	movs	r5, r4
 8001866:	9b02      	ldr	r3, [sp, #8]
 8001868:	4305      	orrs	r5, r0
 800186a:	431a      	orrs	r2, r3
 800186c:	2f00      	cmp	r7, #0
 800186e:	d000      	beq.n	8001872 <__aeabi_dsub+0x2ea>
 8001870:	e0f5      	b.n	8001a5e <__aeabi_dsub+0x4d6>
 8001872:	2d00      	cmp	r5, #0
 8001874:	d100      	bne.n	8001878 <__aeabi_dsub+0x2f0>
 8001876:	e16b      	b.n	8001b50 <__aeabi_dsub+0x5c8>
 8001878:	2a00      	cmp	r2, #0
 800187a:	d100      	bne.n	800187e <__aeabi_dsub+0x2f6>
 800187c:	e152      	b.n	8001b24 <__aeabi_dsub+0x59c>
 800187e:	4663      	mov	r3, ip
 8001880:	1ac5      	subs	r5, r0, r3
 8001882:	9b02      	ldr	r3, [sp, #8]
 8001884:	1ae2      	subs	r2, r4, r3
 8001886:	42a8      	cmp	r0, r5
 8001888:	419b      	sbcs	r3, r3
 800188a:	425b      	negs	r3, r3
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	021a      	lsls	r2, r3, #8
 8001890:	d400      	bmi.n	8001894 <__aeabi_dsub+0x30c>
 8001892:	e1d5      	b.n	8001c40 <__aeabi_dsub+0x6b8>
 8001894:	4663      	mov	r3, ip
 8001896:	1a1d      	subs	r5, r3, r0
 8001898:	45ac      	cmp	ip, r5
 800189a:	4192      	sbcs	r2, r2
 800189c:	2601      	movs	r6, #1
 800189e:	9b02      	ldr	r3, [sp, #8]
 80018a0:	4252      	negs	r2, r2
 80018a2:	1b1c      	subs	r4, r3, r4
 80018a4:	4688      	mov	r8, r1
 80018a6:	1aa4      	subs	r4, r4, r2
 80018a8:	400e      	ands	r6, r1
 80018aa:	e6f6      	b.n	800169a <__aeabi_dsub+0x112>
 80018ac:	4297      	cmp	r7, r2
 80018ae:	d03f      	beq.n	8001930 <__aeabi_dsub+0x3a8>
 80018b0:	4652      	mov	r2, sl
 80018b2:	2501      	movs	r5, #1
 80018b4:	2a38      	cmp	r2, #56	@ 0x38
 80018b6:	dd00      	ble.n	80018ba <__aeabi_dsub+0x332>
 80018b8:	e74a      	b.n	8001750 <__aeabi_dsub+0x1c8>
 80018ba:	2280      	movs	r2, #128	@ 0x80
 80018bc:	9b02      	ldr	r3, [sp, #8]
 80018be:	0412      	lsls	r2, r2, #16
 80018c0:	4313      	orrs	r3, r2
 80018c2:	9302      	str	r3, [sp, #8]
 80018c4:	e72d      	b.n	8001722 <__aeabi_dsub+0x19a>
 80018c6:	003c      	movs	r4, r7
 80018c8:	2500      	movs	r5, #0
 80018ca:	2200      	movs	r2, #0
 80018cc:	e705      	b.n	80016da <__aeabi_dsub+0x152>
 80018ce:	2307      	movs	r3, #7
 80018d0:	402b      	ands	r3, r5
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d000      	beq.n	80018d8 <__aeabi_dsub+0x350>
 80018d6:	e6e2      	b.n	800169e <__aeabi_dsub+0x116>
 80018d8:	e06b      	b.n	80019b2 <__aeabi_dsub+0x42a>
 80018da:	46c0      	nop			@ (mov r8, r8)
 80018dc:	000007ff 	.word	0x000007ff
 80018e0:	ff7fffff 	.word	0xff7fffff
 80018e4:	fffff801 	.word	0xfffff801
 80018e8:	000007fe 	.word	0x000007fe
 80018ec:	0028      	movs	r0, r5
 80018ee:	f000 fab3 	bl	8001e58 <__clzsi2>
 80018f2:	0003      	movs	r3, r0
 80018f4:	3318      	adds	r3, #24
 80018f6:	2b1f      	cmp	r3, #31
 80018f8:	dc00      	bgt.n	80018fc <__aeabi_dsub+0x374>
 80018fa:	e6b4      	b.n	8001666 <__aeabi_dsub+0xde>
 80018fc:	002a      	movs	r2, r5
 80018fe:	3808      	subs	r0, #8
 8001900:	4082      	lsls	r2, r0
 8001902:	429f      	cmp	r7, r3
 8001904:	dd00      	ble.n	8001908 <__aeabi_dsub+0x380>
 8001906:	e0b9      	b.n	8001a7c <__aeabi_dsub+0x4f4>
 8001908:	1bdb      	subs	r3, r3, r7
 800190a:	1c58      	adds	r0, r3, #1
 800190c:	281f      	cmp	r0, #31
 800190e:	dc00      	bgt.n	8001912 <__aeabi_dsub+0x38a>
 8001910:	e1a0      	b.n	8001c54 <__aeabi_dsub+0x6cc>
 8001912:	0015      	movs	r5, r2
 8001914:	3b1f      	subs	r3, #31
 8001916:	40dd      	lsrs	r5, r3
 8001918:	2820      	cmp	r0, #32
 800191a:	d005      	beq.n	8001928 <__aeabi_dsub+0x3a0>
 800191c:	2340      	movs	r3, #64	@ 0x40
 800191e:	1a1b      	subs	r3, r3, r0
 8001920:	409a      	lsls	r2, r3
 8001922:	1e53      	subs	r3, r2, #1
 8001924:	419a      	sbcs	r2, r3
 8001926:	4315      	orrs	r5, r2
 8001928:	2307      	movs	r3, #7
 800192a:	2700      	movs	r7, #0
 800192c:	402b      	ands	r3, r5
 800192e:	e7d0      	b.n	80018d2 <__aeabi_dsub+0x34a>
 8001930:	08c0      	lsrs	r0, r0, #3
 8001932:	0762      	lsls	r2, r4, #29
 8001934:	4302      	orrs	r2, r0
 8001936:	08e4      	lsrs	r4, r4, #3
 8001938:	e737      	b.n	80017aa <__aeabi_dsub+0x222>
 800193a:	08ea      	lsrs	r2, r5, #3
 800193c:	0763      	lsls	r3, r4, #29
 800193e:	431a      	orrs	r2, r3
 8001940:	4bd3      	ldr	r3, [pc, #844]	@ (8001c90 <__aeabi_dsub+0x708>)
 8001942:	08e4      	lsrs	r4, r4, #3
 8001944:	429f      	cmp	r7, r3
 8001946:	d100      	bne.n	800194a <__aeabi_dsub+0x3c2>
 8001948:	e72f      	b.n	80017aa <__aeabi_dsub+0x222>
 800194a:	0324      	lsls	r4, r4, #12
 800194c:	0b25      	lsrs	r5, r4, #12
 800194e:	057c      	lsls	r4, r7, #21
 8001950:	0d64      	lsrs	r4, r4, #21
 8001952:	e6c2      	b.n	80016da <__aeabi_dsub+0x152>
 8001954:	46ca      	mov	sl, r9
 8001956:	0022      	movs	r2, r4
 8001958:	4302      	orrs	r2, r0
 800195a:	d158      	bne.n	8001a0e <__aeabi_dsub+0x486>
 800195c:	4663      	mov	r3, ip
 800195e:	000e      	movs	r6, r1
 8001960:	9c02      	ldr	r4, [sp, #8]
 8001962:	9303      	str	r3, [sp, #12]
 8001964:	9b03      	ldr	r3, [sp, #12]
 8001966:	4657      	mov	r7, sl
 8001968:	08da      	lsrs	r2, r3, #3
 800196a:	e7e7      	b.n	800193c <__aeabi_dsub+0x3b4>
 800196c:	4cc9      	ldr	r4, [pc, #804]	@ (8001c94 <__aeabi_dsub+0x70c>)
 800196e:	1aff      	subs	r7, r7, r3
 8001970:	4014      	ands	r4, r2
 8001972:	e692      	b.n	800169a <__aeabi_dsub+0x112>
 8001974:	4dc8      	ldr	r5, [pc, #800]	@ (8001c98 <__aeabi_dsub+0x710>)
 8001976:	1c7a      	adds	r2, r7, #1
 8001978:	422a      	tst	r2, r5
 800197a:	d000      	beq.n	800197e <__aeabi_dsub+0x3f6>
 800197c:	e084      	b.n	8001a88 <__aeabi_dsub+0x500>
 800197e:	0022      	movs	r2, r4
 8001980:	4302      	orrs	r2, r0
 8001982:	2f00      	cmp	r7, #0
 8001984:	d000      	beq.n	8001988 <__aeabi_dsub+0x400>
 8001986:	e0ef      	b.n	8001b68 <__aeabi_dsub+0x5e0>
 8001988:	2a00      	cmp	r2, #0
 800198a:	d100      	bne.n	800198e <__aeabi_dsub+0x406>
 800198c:	e0e5      	b.n	8001b5a <__aeabi_dsub+0x5d2>
 800198e:	4662      	mov	r2, ip
 8001990:	9902      	ldr	r1, [sp, #8]
 8001992:	430a      	orrs	r2, r1
 8001994:	d100      	bne.n	8001998 <__aeabi_dsub+0x410>
 8001996:	e0c5      	b.n	8001b24 <__aeabi_dsub+0x59c>
 8001998:	4663      	mov	r3, ip
 800199a:	18c5      	adds	r5, r0, r3
 800199c:	468c      	mov	ip, r1
 800199e:	4285      	cmp	r5, r0
 80019a0:	4180      	sbcs	r0, r0
 80019a2:	4464      	add	r4, ip
 80019a4:	4240      	negs	r0, r0
 80019a6:	1824      	adds	r4, r4, r0
 80019a8:	0223      	lsls	r3, r4, #8
 80019aa:	d502      	bpl.n	80019b2 <__aeabi_dsub+0x42a>
 80019ac:	4bb9      	ldr	r3, [pc, #740]	@ (8001c94 <__aeabi_dsub+0x70c>)
 80019ae:	3701      	adds	r7, #1
 80019b0:	401c      	ands	r4, r3
 80019b2:	46ba      	mov	sl, r7
 80019b4:	9503      	str	r5, [sp, #12]
 80019b6:	e7d5      	b.n	8001964 <__aeabi_dsub+0x3dc>
 80019b8:	4662      	mov	r2, ip
 80019ba:	1a85      	subs	r5, r0, r2
 80019bc:	42a8      	cmp	r0, r5
 80019be:	4192      	sbcs	r2, r2
 80019c0:	4252      	negs	r2, r2
 80019c2:	4691      	mov	r9, r2
 80019c4:	9b02      	ldr	r3, [sp, #8]
 80019c6:	1ae3      	subs	r3, r4, r3
 80019c8:	001a      	movs	r2, r3
 80019ca:	464b      	mov	r3, r9
 80019cc:	1ad2      	subs	r2, r2, r3
 80019ce:	0013      	movs	r3, r2
 80019d0:	4691      	mov	r9, r2
 80019d2:	021a      	lsls	r2, r3, #8
 80019d4:	d46c      	bmi.n	8001ab0 <__aeabi_dsub+0x528>
 80019d6:	464a      	mov	r2, r9
 80019d8:	464c      	mov	r4, r9
 80019da:	432a      	orrs	r2, r5
 80019dc:	d000      	beq.n	80019e0 <__aeabi_dsub+0x458>
 80019de:	e63a      	b.n	8001656 <__aeabi_dsub+0xce>
 80019e0:	2600      	movs	r6, #0
 80019e2:	2400      	movs	r4, #0
 80019e4:	2500      	movs	r5, #0
 80019e6:	e678      	b.n	80016da <__aeabi_dsub+0x152>
 80019e8:	9902      	ldr	r1, [sp, #8]
 80019ea:	4653      	mov	r3, sl
 80019ec:	000d      	movs	r5, r1
 80019ee:	3a20      	subs	r2, #32
 80019f0:	40d5      	lsrs	r5, r2
 80019f2:	2b20      	cmp	r3, #32
 80019f4:	d006      	beq.n	8001a04 <__aeabi_dsub+0x47c>
 80019f6:	2240      	movs	r2, #64	@ 0x40
 80019f8:	1ad2      	subs	r2, r2, r3
 80019fa:	000b      	movs	r3, r1
 80019fc:	4093      	lsls	r3, r2
 80019fe:	4662      	mov	r2, ip
 8001a00:	431a      	orrs	r2, r3
 8001a02:	4693      	mov	fp, r2
 8001a04:	465b      	mov	r3, fp
 8001a06:	1e5a      	subs	r2, r3, #1
 8001a08:	4193      	sbcs	r3, r2
 8001a0a:	431d      	orrs	r5, r3
 8001a0c:	e619      	b.n	8001642 <__aeabi_dsub+0xba>
 8001a0e:	4653      	mov	r3, sl
 8001a10:	1e5a      	subs	r2, r3, #1
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d100      	bne.n	8001a18 <__aeabi_dsub+0x490>
 8001a16:	e0c6      	b.n	8001ba6 <__aeabi_dsub+0x61e>
 8001a18:	4e9d      	ldr	r6, [pc, #628]	@ (8001c90 <__aeabi_dsub+0x708>)
 8001a1a:	45b2      	cmp	sl, r6
 8001a1c:	d100      	bne.n	8001a20 <__aeabi_dsub+0x498>
 8001a1e:	e6bd      	b.n	800179c <__aeabi_dsub+0x214>
 8001a20:	4688      	mov	r8, r1
 8001a22:	000e      	movs	r6, r1
 8001a24:	2501      	movs	r5, #1
 8001a26:	2a38      	cmp	r2, #56	@ 0x38
 8001a28:	dc10      	bgt.n	8001a4c <__aeabi_dsub+0x4c4>
 8001a2a:	2a1f      	cmp	r2, #31
 8001a2c:	dc7f      	bgt.n	8001b2e <__aeabi_dsub+0x5a6>
 8001a2e:	2120      	movs	r1, #32
 8001a30:	0025      	movs	r5, r4
 8001a32:	1a89      	subs	r1, r1, r2
 8001a34:	0007      	movs	r7, r0
 8001a36:	4088      	lsls	r0, r1
 8001a38:	408d      	lsls	r5, r1
 8001a3a:	40d7      	lsrs	r7, r2
 8001a3c:	40d4      	lsrs	r4, r2
 8001a3e:	1e41      	subs	r1, r0, #1
 8001a40:	4188      	sbcs	r0, r1
 8001a42:	9b02      	ldr	r3, [sp, #8]
 8001a44:	433d      	orrs	r5, r7
 8001a46:	1b1b      	subs	r3, r3, r4
 8001a48:	4305      	orrs	r5, r0
 8001a4a:	9302      	str	r3, [sp, #8]
 8001a4c:	4662      	mov	r2, ip
 8001a4e:	1b55      	subs	r5, r2, r5
 8001a50:	45ac      	cmp	ip, r5
 8001a52:	4192      	sbcs	r2, r2
 8001a54:	9b02      	ldr	r3, [sp, #8]
 8001a56:	4252      	negs	r2, r2
 8001a58:	464f      	mov	r7, r9
 8001a5a:	1a9c      	subs	r4, r3, r2
 8001a5c:	e5f6      	b.n	800164c <__aeabi_dsub+0xc4>
 8001a5e:	2d00      	cmp	r5, #0
 8001a60:	d000      	beq.n	8001a64 <__aeabi_dsub+0x4dc>
 8001a62:	e0b7      	b.n	8001bd4 <__aeabi_dsub+0x64c>
 8001a64:	2a00      	cmp	r2, #0
 8001a66:	d100      	bne.n	8001a6a <__aeabi_dsub+0x4e2>
 8001a68:	e0f0      	b.n	8001c4c <__aeabi_dsub+0x6c4>
 8001a6a:	2601      	movs	r6, #1
 8001a6c:	400e      	ands	r6, r1
 8001a6e:	4663      	mov	r3, ip
 8001a70:	9802      	ldr	r0, [sp, #8]
 8001a72:	08d9      	lsrs	r1, r3, #3
 8001a74:	0742      	lsls	r2, r0, #29
 8001a76:	430a      	orrs	r2, r1
 8001a78:	08c4      	lsrs	r4, r0, #3
 8001a7a:	e696      	b.n	80017aa <__aeabi_dsub+0x222>
 8001a7c:	4c85      	ldr	r4, [pc, #532]	@ (8001c94 <__aeabi_dsub+0x70c>)
 8001a7e:	1aff      	subs	r7, r7, r3
 8001a80:	4014      	ands	r4, r2
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	08e4      	lsrs	r4, r4, #3
 8001a86:	e760      	b.n	800194a <__aeabi_dsub+0x3c2>
 8001a88:	4981      	ldr	r1, [pc, #516]	@ (8001c90 <__aeabi_dsub+0x708>)
 8001a8a:	428a      	cmp	r2, r1
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dsub+0x508>
 8001a8e:	e0c9      	b.n	8001c24 <__aeabi_dsub+0x69c>
 8001a90:	4663      	mov	r3, ip
 8001a92:	18c1      	adds	r1, r0, r3
 8001a94:	4281      	cmp	r1, r0
 8001a96:	4180      	sbcs	r0, r0
 8001a98:	9b02      	ldr	r3, [sp, #8]
 8001a9a:	4240      	negs	r0, r0
 8001a9c:	18e3      	adds	r3, r4, r3
 8001a9e:	181b      	adds	r3, r3, r0
 8001aa0:	07dd      	lsls	r5, r3, #31
 8001aa2:	085c      	lsrs	r4, r3, #1
 8001aa4:	2307      	movs	r3, #7
 8001aa6:	0849      	lsrs	r1, r1, #1
 8001aa8:	430d      	orrs	r5, r1
 8001aaa:	0017      	movs	r7, r2
 8001aac:	402b      	ands	r3, r5
 8001aae:	e710      	b.n	80018d2 <__aeabi_dsub+0x34a>
 8001ab0:	4663      	mov	r3, ip
 8001ab2:	1a1d      	subs	r5, r3, r0
 8001ab4:	45ac      	cmp	ip, r5
 8001ab6:	4192      	sbcs	r2, r2
 8001ab8:	2601      	movs	r6, #1
 8001aba:	9b02      	ldr	r3, [sp, #8]
 8001abc:	4252      	negs	r2, r2
 8001abe:	1b1c      	subs	r4, r3, r4
 8001ac0:	4688      	mov	r8, r1
 8001ac2:	1aa4      	subs	r4, r4, r2
 8001ac4:	400e      	ands	r6, r1
 8001ac6:	e5c6      	b.n	8001656 <__aeabi_dsub+0xce>
 8001ac8:	4663      	mov	r3, ip
 8001aca:	18c5      	adds	r5, r0, r3
 8001acc:	9b02      	ldr	r3, [sp, #8]
 8001ace:	4285      	cmp	r5, r0
 8001ad0:	4180      	sbcs	r0, r0
 8001ad2:	469c      	mov	ip, r3
 8001ad4:	4240      	negs	r0, r0
 8001ad6:	4464      	add	r4, ip
 8001ad8:	1824      	adds	r4, r4, r0
 8001ada:	2701      	movs	r7, #1
 8001adc:	0223      	lsls	r3, r4, #8
 8001ade:	d400      	bmi.n	8001ae2 <__aeabi_dsub+0x55a>
 8001ae0:	e6f5      	b.n	80018ce <__aeabi_dsub+0x346>
 8001ae2:	2702      	movs	r7, #2
 8001ae4:	e641      	b.n	800176a <__aeabi_dsub+0x1e2>
 8001ae6:	4663      	mov	r3, ip
 8001ae8:	1ac5      	subs	r5, r0, r3
 8001aea:	42a8      	cmp	r0, r5
 8001aec:	4180      	sbcs	r0, r0
 8001aee:	9b02      	ldr	r3, [sp, #8]
 8001af0:	4240      	negs	r0, r0
 8001af2:	1ae4      	subs	r4, r4, r3
 8001af4:	2701      	movs	r7, #1
 8001af6:	1a24      	subs	r4, r4, r0
 8001af8:	e5a8      	b.n	800164c <__aeabi_dsub+0xc4>
 8001afa:	9d02      	ldr	r5, [sp, #8]
 8001afc:	4652      	mov	r2, sl
 8001afe:	002b      	movs	r3, r5
 8001b00:	3a20      	subs	r2, #32
 8001b02:	40d3      	lsrs	r3, r2
 8001b04:	0019      	movs	r1, r3
 8001b06:	4653      	mov	r3, sl
 8001b08:	2b20      	cmp	r3, #32
 8001b0a:	d006      	beq.n	8001b1a <__aeabi_dsub+0x592>
 8001b0c:	2240      	movs	r2, #64	@ 0x40
 8001b0e:	1ad2      	subs	r2, r2, r3
 8001b10:	002b      	movs	r3, r5
 8001b12:	4093      	lsls	r3, r2
 8001b14:	4662      	mov	r2, ip
 8001b16:	431a      	orrs	r2, r3
 8001b18:	4693      	mov	fp, r2
 8001b1a:	465d      	mov	r5, fp
 8001b1c:	1e6b      	subs	r3, r5, #1
 8001b1e:	419d      	sbcs	r5, r3
 8001b20:	430d      	orrs	r5, r1
 8001b22:	e615      	b.n	8001750 <__aeabi_dsub+0x1c8>
 8001b24:	0762      	lsls	r2, r4, #29
 8001b26:	08c0      	lsrs	r0, r0, #3
 8001b28:	4302      	orrs	r2, r0
 8001b2a:	08e4      	lsrs	r4, r4, #3
 8001b2c:	e70d      	b.n	800194a <__aeabi_dsub+0x3c2>
 8001b2e:	0011      	movs	r1, r2
 8001b30:	0027      	movs	r7, r4
 8001b32:	3920      	subs	r1, #32
 8001b34:	40cf      	lsrs	r7, r1
 8001b36:	2a20      	cmp	r2, #32
 8001b38:	d005      	beq.n	8001b46 <__aeabi_dsub+0x5be>
 8001b3a:	2140      	movs	r1, #64	@ 0x40
 8001b3c:	1a8a      	subs	r2, r1, r2
 8001b3e:	4094      	lsls	r4, r2
 8001b40:	0025      	movs	r5, r4
 8001b42:	4305      	orrs	r5, r0
 8001b44:	9503      	str	r5, [sp, #12]
 8001b46:	9d03      	ldr	r5, [sp, #12]
 8001b48:	1e6a      	subs	r2, r5, #1
 8001b4a:	4195      	sbcs	r5, r2
 8001b4c:	433d      	orrs	r5, r7
 8001b4e:	e77d      	b.n	8001a4c <__aeabi_dsub+0x4c4>
 8001b50:	2a00      	cmp	r2, #0
 8001b52:	d100      	bne.n	8001b56 <__aeabi_dsub+0x5ce>
 8001b54:	e744      	b.n	80019e0 <__aeabi_dsub+0x458>
 8001b56:	2601      	movs	r6, #1
 8001b58:	400e      	ands	r6, r1
 8001b5a:	4663      	mov	r3, ip
 8001b5c:	08d9      	lsrs	r1, r3, #3
 8001b5e:	9b02      	ldr	r3, [sp, #8]
 8001b60:	075a      	lsls	r2, r3, #29
 8001b62:	430a      	orrs	r2, r1
 8001b64:	08dc      	lsrs	r4, r3, #3
 8001b66:	e6f0      	b.n	800194a <__aeabi_dsub+0x3c2>
 8001b68:	2a00      	cmp	r2, #0
 8001b6a:	d028      	beq.n	8001bbe <__aeabi_dsub+0x636>
 8001b6c:	4662      	mov	r2, ip
 8001b6e:	9f02      	ldr	r7, [sp, #8]
 8001b70:	08c0      	lsrs	r0, r0, #3
 8001b72:	433a      	orrs	r2, r7
 8001b74:	d100      	bne.n	8001b78 <__aeabi_dsub+0x5f0>
 8001b76:	e6dc      	b.n	8001932 <__aeabi_dsub+0x3aa>
 8001b78:	0762      	lsls	r2, r4, #29
 8001b7a:	4310      	orrs	r0, r2
 8001b7c:	2280      	movs	r2, #128	@ 0x80
 8001b7e:	08e4      	lsrs	r4, r4, #3
 8001b80:	0312      	lsls	r2, r2, #12
 8001b82:	4214      	tst	r4, r2
 8001b84:	d009      	beq.n	8001b9a <__aeabi_dsub+0x612>
 8001b86:	08fd      	lsrs	r5, r7, #3
 8001b88:	4215      	tst	r5, r2
 8001b8a:	d106      	bne.n	8001b9a <__aeabi_dsub+0x612>
 8001b8c:	4663      	mov	r3, ip
 8001b8e:	2601      	movs	r6, #1
 8001b90:	002c      	movs	r4, r5
 8001b92:	08d8      	lsrs	r0, r3, #3
 8001b94:	077b      	lsls	r3, r7, #29
 8001b96:	4318      	orrs	r0, r3
 8001b98:	400e      	ands	r6, r1
 8001b9a:	0f42      	lsrs	r2, r0, #29
 8001b9c:	00c0      	lsls	r0, r0, #3
 8001b9e:	08c0      	lsrs	r0, r0, #3
 8001ba0:	0752      	lsls	r2, r2, #29
 8001ba2:	4302      	orrs	r2, r0
 8001ba4:	e601      	b.n	80017aa <__aeabi_dsub+0x222>
 8001ba6:	4663      	mov	r3, ip
 8001ba8:	1a1d      	subs	r5, r3, r0
 8001baa:	45ac      	cmp	ip, r5
 8001bac:	4192      	sbcs	r2, r2
 8001bae:	9b02      	ldr	r3, [sp, #8]
 8001bb0:	4252      	negs	r2, r2
 8001bb2:	1b1c      	subs	r4, r3, r4
 8001bb4:	000e      	movs	r6, r1
 8001bb6:	4688      	mov	r8, r1
 8001bb8:	2701      	movs	r7, #1
 8001bba:	1aa4      	subs	r4, r4, r2
 8001bbc:	e546      	b.n	800164c <__aeabi_dsub+0xc4>
 8001bbe:	4663      	mov	r3, ip
 8001bc0:	08d9      	lsrs	r1, r3, #3
 8001bc2:	9b02      	ldr	r3, [sp, #8]
 8001bc4:	075a      	lsls	r2, r3, #29
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	08dc      	lsrs	r4, r3, #3
 8001bca:	e5ee      	b.n	80017aa <__aeabi_dsub+0x222>
 8001bcc:	4663      	mov	r3, ip
 8001bce:	9c02      	ldr	r4, [sp, #8]
 8001bd0:	9303      	str	r3, [sp, #12]
 8001bd2:	e6c7      	b.n	8001964 <__aeabi_dsub+0x3dc>
 8001bd4:	08c0      	lsrs	r0, r0, #3
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d100      	bne.n	8001bdc <__aeabi_dsub+0x654>
 8001bda:	e6aa      	b.n	8001932 <__aeabi_dsub+0x3aa>
 8001bdc:	0762      	lsls	r2, r4, #29
 8001bde:	4310      	orrs	r0, r2
 8001be0:	2280      	movs	r2, #128	@ 0x80
 8001be2:	08e4      	lsrs	r4, r4, #3
 8001be4:	0312      	lsls	r2, r2, #12
 8001be6:	4214      	tst	r4, r2
 8001be8:	d0d7      	beq.n	8001b9a <__aeabi_dsub+0x612>
 8001bea:	9f02      	ldr	r7, [sp, #8]
 8001bec:	08fd      	lsrs	r5, r7, #3
 8001bee:	4215      	tst	r5, r2
 8001bf0:	d1d3      	bne.n	8001b9a <__aeabi_dsub+0x612>
 8001bf2:	4663      	mov	r3, ip
 8001bf4:	2601      	movs	r6, #1
 8001bf6:	08d8      	lsrs	r0, r3, #3
 8001bf8:	077b      	lsls	r3, r7, #29
 8001bfa:	002c      	movs	r4, r5
 8001bfc:	4318      	orrs	r0, r3
 8001bfe:	400e      	ands	r6, r1
 8001c00:	e7cb      	b.n	8001b9a <__aeabi_dsub+0x612>
 8001c02:	000a      	movs	r2, r1
 8001c04:	0027      	movs	r7, r4
 8001c06:	3a20      	subs	r2, #32
 8001c08:	40d7      	lsrs	r7, r2
 8001c0a:	2920      	cmp	r1, #32
 8001c0c:	d005      	beq.n	8001c1a <__aeabi_dsub+0x692>
 8001c0e:	2240      	movs	r2, #64	@ 0x40
 8001c10:	1a52      	subs	r2, r2, r1
 8001c12:	4094      	lsls	r4, r2
 8001c14:	0025      	movs	r5, r4
 8001c16:	4305      	orrs	r5, r0
 8001c18:	9503      	str	r5, [sp, #12]
 8001c1a:	9d03      	ldr	r5, [sp, #12]
 8001c1c:	1e6a      	subs	r2, r5, #1
 8001c1e:	4195      	sbcs	r5, r2
 8001c20:	432f      	orrs	r7, r5
 8001c22:	e610      	b.n	8001846 <__aeabi_dsub+0x2be>
 8001c24:	0014      	movs	r4, r2
 8001c26:	2500      	movs	r5, #0
 8001c28:	2200      	movs	r2, #0
 8001c2a:	e556      	b.n	80016da <__aeabi_dsub+0x152>
 8001c2c:	9b02      	ldr	r3, [sp, #8]
 8001c2e:	4460      	add	r0, ip
 8001c30:	4699      	mov	r9, r3
 8001c32:	4560      	cmp	r0, ip
 8001c34:	4192      	sbcs	r2, r2
 8001c36:	444c      	add	r4, r9
 8001c38:	4252      	negs	r2, r2
 8001c3a:	0005      	movs	r5, r0
 8001c3c:	18a4      	adds	r4, r4, r2
 8001c3e:	e74c      	b.n	8001ada <__aeabi_dsub+0x552>
 8001c40:	001a      	movs	r2, r3
 8001c42:	001c      	movs	r4, r3
 8001c44:	432a      	orrs	r2, r5
 8001c46:	d000      	beq.n	8001c4a <__aeabi_dsub+0x6c2>
 8001c48:	e6b3      	b.n	80019b2 <__aeabi_dsub+0x42a>
 8001c4a:	e6c9      	b.n	80019e0 <__aeabi_dsub+0x458>
 8001c4c:	2480      	movs	r4, #128	@ 0x80
 8001c4e:	2600      	movs	r6, #0
 8001c50:	0324      	lsls	r4, r4, #12
 8001c52:	e5ae      	b.n	80017b2 <__aeabi_dsub+0x22a>
 8001c54:	2120      	movs	r1, #32
 8001c56:	2500      	movs	r5, #0
 8001c58:	1a09      	subs	r1, r1, r0
 8001c5a:	e517      	b.n	800168c <__aeabi_dsub+0x104>
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2500      	movs	r5, #0
 8001c60:	4c0b      	ldr	r4, [pc, #44]	@ (8001c90 <__aeabi_dsub+0x708>)
 8001c62:	e53a      	b.n	80016da <__aeabi_dsub+0x152>
 8001c64:	2d00      	cmp	r5, #0
 8001c66:	d100      	bne.n	8001c6a <__aeabi_dsub+0x6e2>
 8001c68:	e5f6      	b.n	8001858 <__aeabi_dsub+0x2d0>
 8001c6a:	464b      	mov	r3, r9
 8001c6c:	1bda      	subs	r2, r3, r7
 8001c6e:	4692      	mov	sl, r2
 8001c70:	2f00      	cmp	r7, #0
 8001c72:	d100      	bne.n	8001c76 <__aeabi_dsub+0x6ee>
 8001c74:	e66f      	b.n	8001956 <__aeabi_dsub+0x3ce>
 8001c76:	2a38      	cmp	r2, #56	@ 0x38
 8001c78:	dc05      	bgt.n	8001c86 <__aeabi_dsub+0x6fe>
 8001c7a:	2680      	movs	r6, #128	@ 0x80
 8001c7c:	0436      	lsls	r6, r6, #16
 8001c7e:	4334      	orrs	r4, r6
 8001c80:	4688      	mov	r8, r1
 8001c82:	000e      	movs	r6, r1
 8001c84:	e6d1      	b.n	8001a2a <__aeabi_dsub+0x4a2>
 8001c86:	4688      	mov	r8, r1
 8001c88:	000e      	movs	r6, r1
 8001c8a:	2501      	movs	r5, #1
 8001c8c:	e6de      	b.n	8001a4c <__aeabi_dsub+0x4c4>
 8001c8e:	46c0      	nop			@ (mov r8, r8)
 8001c90:	000007ff 	.word	0x000007ff
 8001c94:	ff7fffff 	.word	0xff7fffff
 8001c98:	000007fe 	.word	0x000007fe
 8001c9c:	2d00      	cmp	r5, #0
 8001c9e:	d100      	bne.n	8001ca2 <__aeabi_dsub+0x71a>
 8001ca0:	e668      	b.n	8001974 <__aeabi_dsub+0x3ec>
 8001ca2:	464b      	mov	r3, r9
 8001ca4:	1bd9      	subs	r1, r3, r7
 8001ca6:	2f00      	cmp	r7, #0
 8001ca8:	d101      	bne.n	8001cae <__aeabi_dsub+0x726>
 8001caa:	468a      	mov	sl, r1
 8001cac:	e5a7      	b.n	80017fe <__aeabi_dsub+0x276>
 8001cae:	2701      	movs	r7, #1
 8001cb0:	2938      	cmp	r1, #56	@ 0x38
 8001cb2:	dd00      	ble.n	8001cb6 <__aeabi_dsub+0x72e>
 8001cb4:	e5c7      	b.n	8001846 <__aeabi_dsub+0x2be>
 8001cb6:	2280      	movs	r2, #128	@ 0x80
 8001cb8:	0412      	lsls	r2, r2, #16
 8001cba:	4314      	orrs	r4, r2
 8001cbc:	e5af      	b.n	800181e <__aeabi_dsub+0x296>
 8001cbe:	46c0      	nop			@ (mov r8, r8)

08001cc0 <__aeabi_d2iz>:
 8001cc0:	000b      	movs	r3, r1
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	b570      	push	{r4, r5, r6, lr}
 8001cc6:	4d16      	ldr	r5, [pc, #88]	@ (8001d20 <__aeabi_d2iz+0x60>)
 8001cc8:	030c      	lsls	r4, r1, #12
 8001cca:	b082      	sub	sp, #8
 8001ccc:	0049      	lsls	r1, r1, #1
 8001cce:	2000      	movs	r0, #0
 8001cd0:	9200      	str	r2, [sp, #0]
 8001cd2:	9301      	str	r3, [sp, #4]
 8001cd4:	0b24      	lsrs	r4, r4, #12
 8001cd6:	0d49      	lsrs	r1, r1, #21
 8001cd8:	0fde      	lsrs	r6, r3, #31
 8001cda:	42a9      	cmp	r1, r5
 8001cdc:	dd04      	ble.n	8001ce8 <__aeabi_d2iz+0x28>
 8001cde:	4811      	ldr	r0, [pc, #68]	@ (8001d24 <__aeabi_d2iz+0x64>)
 8001ce0:	4281      	cmp	r1, r0
 8001ce2:	dd03      	ble.n	8001cec <__aeabi_d2iz+0x2c>
 8001ce4:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <__aeabi_d2iz+0x68>)
 8001ce6:	18f0      	adds	r0, r6, r3
 8001ce8:	b002      	add	sp, #8
 8001cea:	bd70      	pop	{r4, r5, r6, pc}
 8001cec:	2080      	movs	r0, #128	@ 0x80
 8001cee:	0340      	lsls	r0, r0, #13
 8001cf0:	4320      	orrs	r0, r4
 8001cf2:	4c0e      	ldr	r4, [pc, #56]	@ (8001d2c <__aeabi_d2iz+0x6c>)
 8001cf4:	1a64      	subs	r4, r4, r1
 8001cf6:	2c1f      	cmp	r4, #31
 8001cf8:	dd08      	ble.n	8001d0c <__aeabi_d2iz+0x4c>
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001d30 <__aeabi_d2iz+0x70>)
 8001cfc:	1a5b      	subs	r3, r3, r1
 8001cfe:	40d8      	lsrs	r0, r3
 8001d00:	0003      	movs	r3, r0
 8001d02:	4258      	negs	r0, r3
 8001d04:	2e00      	cmp	r6, #0
 8001d06:	d1ef      	bne.n	8001ce8 <__aeabi_d2iz+0x28>
 8001d08:	0018      	movs	r0, r3
 8001d0a:	e7ed      	b.n	8001ce8 <__aeabi_d2iz+0x28>
 8001d0c:	4b09      	ldr	r3, [pc, #36]	@ (8001d34 <__aeabi_d2iz+0x74>)
 8001d0e:	9a00      	ldr	r2, [sp, #0]
 8001d10:	469c      	mov	ip, r3
 8001d12:	0003      	movs	r3, r0
 8001d14:	4461      	add	r1, ip
 8001d16:	408b      	lsls	r3, r1
 8001d18:	40e2      	lsrs	r2, r4
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	e7f1      	b.n	8001d02 <__aeabi_d2iz+0x42>
 8001d1e:	46c0      	nop			@ (mov r8, r8)
 8001d20:	000003fe 	.word	0x000003fe
 8001d24:	0000041d 	.word	0x0000041d
 8001d28:	7fffffff 	.word	0x7fffffff
 8001d2c:	00000433 	.word	0x00000433
 8001d30:	00000413 	.word	0x00000413
 8001d34:	fffffbed 	.word	0xfffffbed

08001d38 <__aeabi_i2d>:
 8001d38:	b570      	push	{r4, r5, r6, lr}
 8001d3a:	2800      	cmp	r0, #0
 8001d3c:	d016      	beq.n	8001d6c <__aeabi_i2d+0x34>
 8001d3e:	17c3      	asrs	r3, r0, #31
 8001d40:	18c5      	adds	r5, r0, r3
 8001d42:	405d      	eors	r5, r3
 8001d44:	0fc4      	lsrs	r4, r0, #31
 8001d46:	0028      	movs	r0, r5
 8001d48:	f000 f886 	bl	8001e58 <__clzsi2>
 8001d4c:	4b10      	ldr	r3, [pc, #64]	@ (8001d90 <__aeabi_i2d+0x58>)
 8001d4e:	1a1b      	subs	r3, r3, r0
 8001d50:	055b      	lsls	r3, r3, #21
 8001d52:	0d5b      	lsrs	r3, r3, #21
 8001d54:	280a      	cmp	r0, #10
 8001d56:	dc14      	bgt.n	8001d82 <__aeabi_i2d+0x4a>
 8001d58:	0002      	movs	r2, r0
 8001d5a:	002e      	movs	r6, r5
 8001d5c:	3215      	adds	r2, #21
 8001d5e:	4096      	lsls	r6, r2
 8001d60:	220b      	movs	r2, #11
 8001d62:	1a12      	subs	r2, r2, r0
 8001d64:	40d5      	lsrs	r5, r2
 8001d66:	032d      	lsls	r5, r5, #12
 8001d68:	0b2d      	lsrs	r5, r5, #12
 8001d6a:	e003      	b.n	8001d74 <__aeabi_i2d+0x3c>
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	2300      	movs	r3, #0
 8001d70:	2500      	movs	r5, #0
 8001d72:	2600      	movs	r6, #0
 8001d74:	051b      	lsls	r3, r3, #20
 8001d76:	432b      	orrs	r3, r5
 8001d78:	07e4      	lsls	r4, r4, #31
 8001d7a:	4323      	orrs	r3, r4
 8001d7c:	0030      	movs	r0, r6
 8001d7e:	0019      	movs	r1, r3
 8001d80:	bd70      	pop	{r4, r5, r6, pc}
 8001d82:	380b      	subs	r0, #11
 8001d84:	4085      	lsls	r5, r0
 8001d86:	032d      	lsls	r5, r5, #12
 8001d88:	2600      	movs	r6, #0
 8001d8a:	0b2d      	lsrs	r5, r5, #12
 8001d8c:	e7f2      	b.n	8001d74 <__aeabi_i2d+0x3c>
 8001d8e:	46c0      	nop			@ (mov r8, r8)
 8001d90:	0000041e 	.word	0x0000041e

08001d94 <__aeabi_ui2d>:
 8001d94:	b510      	push	{r4, lr}
 8001d96:	1e04      	subs	r4, r0, #0
 8001d98:	d010      	beq.n	8001dbc <__aeabi_ui2d+0x28>
 8001d9a:	f000 f85d 	bl	8001e58 <__clzsi2>
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <__aeabi_ui2d+0x44>)
 8001da0:	1a1b      	subs	r3, r3, r0
 8001da2:	055b      	lsls	r3, r3, #21
 8001da4:	0d5b      	lsrs	r3, r3, #21
 8001da6:	280a      	cmp	r0, #10
 8001da8:	dc0f      	bgt.n	8001dca <__aeabi_ui2d+0x36>
 8001daa:	220b      	movs	r2, #11
 8001dac:	0021      	movs	r1, r4
 8001dae:	1a12      	subs	r2, r2, r0
 8001db0:	40d1      	lsrs	r1, r2
 8001db2:	3015      	adds	r0, #21
 8001db4:	030a      	lsls	r2, r1, #12
 8001db6:	4084      	lsls	r4, r0
 8001db8:	0b12      	lsrs	r2, r2, #12
 8001dba:	e001      	b.n	8001dc0 <__aeabi_ui2d+0x2c>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	051b      	lsls	r3, r3, #20
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	0020      	movs	r0, r4
 8001dc6:	0019      	movs	r1, r3
 8001dc8:	bd10      	pop	{r4, pc}
 8001dca:	0022      	movs	r2, r4
 8001dcc:	380b      	subs	r0, #11
 8001dce:	4082      	lsls	r2, r0
 8001dd0:	0312      	lsls	r2, r2, #12
 8001dd2:	2400      	movs	r4, #0
 8001dd4:	0b12      	lsrs	r2, r2, #12
 8001dd6:	e7f3      	b.n	8001dc0 <__aeabi_ui2d+0x2c>
 8001dd8:	0000041e 	.word	0x0000041e

08001ddc <__aeabi_cdrcmple>:
 8001ddc:	4684      	mov	ip, r0
 8001dde:	0010      	movs	r0, r2
 8001de0:	4662      	mov	r2, ip
 8001de2:	468c      	mov	ip, r1
 8001de4:	0019      	movs	r1, r3
 8001de6:	4663      	mov	r3, ip
 8001de8:	e000      	b.n	8001dec <__aeabi_cdcmpeq>
 8001dea:	46c0      	nop			@ (mov r8, r8)

08001dec <__aeabi_cdcmpeq>:
 8001dec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001dee:	f000 f909 	bl	8002004 <__ledf2>
 8001df2:	2800      	cmp	r0, #0
 8001df4:	d401      	bmi.n	8001dfa <__aeabi_cdcmpeq+0xe>
 8001df6:	2100      	movs	r1, #0
 8001df8:	42c8      	cmn	r0, r1
 8001dfa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001dfc <__aeabi_dcmpeq>:
 8001dfc:	b510      	push	{r4, lr}
 8001dfe:	f000 f849 	bl	8001e94 <__eqdf2>
 8001e02:	4240      	negs	r0, r0
 8001e04:	3001      	adds	r0, #1
 8001e06:	bd10      	pop	{r4, pc}

08001e08 <__aeabi_dcmplt>:
 8001e08:	b510      	push	{r4, lr}
 8001e0a:	f000 f8fb 	bl	8002004 <__ledf2>
 8001e0e:	2800      	cmp	r0, #0
 8001e10:	db01      	blt.n	8001e16 <__aeabi_dcmplt+0xe>
 8001e12:	2000      	movs	r0, #0
 8001e14:	bd10      	pop	{r4, pc}
 8001e16:	2001      	movs	r0, #1
 8001e18:	bd10      	pop	{r4, pc}
 8001e1a:	46c0      	nop			@ (mov r8, r8)

08001e1c <__aeabi_dcmple>:
 8001e1c:	b510      	push	{r4, lr}
 8001e1e:	f000 f8f1 	bl	8002004 <__ledf2>
 8001e22:	2800      	cmp	r0, #0
 8001e24:	dd01      	ble.n	8001e2a <__aeabi_dcmple+0xe>
 8001e26:	2000      	movs	r0, #0
 8001e28:	bd10      	pop	{r4, pc}
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	bd10      	pop	{r4, pc}
 8001e2e:	46c0      	nop			@ (mov r8, r8)

08001e30 <__aeabi_dcmpgt>:
 8001e30:	b510      	push	{r4, lr}
 8001e32:	f000 f873 	bl	8001f1c <__gedf2>
 8001e36:	2800      	cmp	r0, #0
 8001e38:	dc01      	bgt.n	8001e3e <__aeabi_dcmpgt+0xe>
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	bd10      	pop	{r4, pc}
 8001e3e:	2001      	movs	r0, #1
 8001e40:	bd10      	pop	{r4, pc}
 8001e42:	46c0      	nop			@ (mov r8, r8)

08001e44 <__aeabi_dcmpge>:
 8001e44:	b510      	push	{r4, lr}
 8001e46:	f000 f869 	bl	8001f1c <__gedf2>
 8001e4a:	2800      	cmp	r0, #0
 8001e4c:	da01      	bge.n	8001e52 <__aeabi_dcmpge+0xe>
 8001e4e:	2000      	movs	r0, #0
 8001e50:	bd10      	pop	{r4, pc}
 8001e52:	2001      	movs	r0, #1
 8001e54:	bd10      	pop	{r4, pc}
 8001e56:	46c0      	nop			@ (mov r8, r8)

08001e58 <__clzsi2>:
 8001e58:	211c      	movs	r1, #28
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	4298      	cmp	r0, r3
 8001e60:	d301      	bcc.n	8001e66 <__clzsi2+0xe>
 8001e62:	0c00      	lsrs	r0, r0, #16
 8001e64:	3910      	subs	r1, #16
 8001e66:	0a1b      	lsrs	r3, r3, #8
 8001e68:	4298      	cmp	r0, r3
 8001e6a:	d301      	bcc.n	8001e70 <__clzsi2+0x18>
 8001e6c:	0a00      	lsrs	r0, r0, #8
 8001e6e:	3908      	subs	r1, #8
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	4298      	cmp	r0, r3
 8001e74:	d301      	bcc.n	8001e7a <__clzsi2+0x22>
 8001e76:	0900      	lsrs	r0, r0, #4
 8001e78:	3904      	subs	r1, #4
 8001e7a:	a202      	add	r2, pc, #8	@ (adr r2, 8001e84 <__clzsi2+0x2c>)
 8001e7c:	5c10      	ldrb	r0, [r2, r0]
 8001e7e:	1840      	adds	r0, r0, r1
 8001e80:	4770      	bx	lr
 8001e82:	46c0      	nop			@ (mov r8, r8)
 8001e84:	02020304 	.word	0x02020304
 8001e88:	01010101 	.word	0x01010101
	...

08001e94 <__eqdf2>:
 8001e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e96:	4657      	mov	r7, sl
 8001e98:	46de      	mov	lr, fp
 8001e9a:	464e      	mov	r6, r9
 8001e9c:	4645      	mov	r5, r8
 8001e9e:	b5e0      	push	{r5, r6, r7, lr}
 8001ea0:	000d      	movs	r5, r1
 8001ea2:	0004      	movs	r4, r0
 8001ea4:	0fe8      	lsrs	r0, r5, #31
 8001ea6:	4683      	mov	fp, r0
 8001ea8:	0309      	lsls	r1, r1, #12
 8001eaa:	0fd8      	lsrs	r0, r3, #31
 8001eac:	0b09      	lsrs	r1, r1, #12
 8001eae:	4682      	mov	sl, r0
 8001eb0:	4819      	ldr	r0, [pc, #100]	@ (8001f18 <__eqdf2+0x84>)
 8001eb2:	468c      	mov	ip, r1
 8001eb4:	031f      	lsls	r7, r3, #12
 8001eb6:	0069      	lsls	r1, r5, #1
 8001eb8:	005e      	lsls	r6, r3, #1
 8001eba:	0d49      	lsrs	r1, r1, #21
 8001ebc:	0b3f      	lsrs	r7, r7, #12
 8001ebe:	0d76      	lsrs	r6, r6, #21
 8001ec0:	4281      	cmp	r1, r0
 8001ec2:	d018      	beq.n	8001ef6 <__eqdf2+0x62>
 8001ec4:	4286      	cmp	r6, r0
 8001ec6:	d00f      	beq.n	8001ee8 <__eqdf2+0x54>
 8001ec8:	2001      	movs	r0, #1
 8001eca:	42b1      	cmp	r1, r6
 8001ecc:	d10d      	bne.n	8001eea <__eqdf2+0x56>
 8001ece:	45bc      	cmp	ip, r7
 8001ed0:	d10b      	bne.n	8001eea <__eqdf2+0x56>
 8001ed2:	4294      	cmp	r4, r2
 8001ed4:	d109      	bne.n	8001eea <__eqdf2+0x56>
 8001ed6:	45d3      	cmp	fp, sl
 8001ed8:	d01c      	beq.n	8001f14 <__eqdf2+0x80>
 8001eda:	2900      	cmp	r1, #0
 8001edc:	d105      	bne.n	8001eea <__eqdf2+0x56>
 8001ede:	4660      	mov	r0, ip
 8001ee0:	4320      	orrs	r0, r4
 8001ee2:	1e43      	subs	r3, r0, #1
 8001ee4:	4198      	sbcs	r0, r3
 8001ee6:	e000      	b.n	8001eea <__eqdf2+0x56>
 8001ee8:	2001      	movs	r0, #1
 8001eea:	bcf0      	pop	{r4, r5, r6, r7}
 8001eec:	46bb      	mov	fp, r7
 8001eee:	46b2      	mov	sl, r6
 8001ef0:	46a9      	mov	r9, r5
 8001ef2:	46a0      	mov	r8, r4
 8001ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	428e      	cmp	r6, r1
 8001efa:	d1f6      	bne.n	8001eea <__eqdf2+0x56>
 8001efc:	4661      	mov	r1, ip
 8001efe:	4339      	orrs	r1, r7
 8001f00:	000f      	movs	r7, r1
 8001f02:	4317      	orrs	r7, r2
 8001f04:	4327      	orrs	r7, r4
 8001f06:	d1f0      	bne.n	8001eea <__eqdf2+0x56>
 8001f08:	465b      	mov	r3, fp
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	1a98      	subs	r0, r3, r2
 8001f0e:	1e43      	subs	r3, r0, #1
 8001f10:	4198      	sbcs	r0, r3
 8001f12:	e7ea      	b.n	8001eea <__eqdf2+0x56>
 8001f14:	2000      	movs	r0, #0
 8001f16:	e7e8      	b.n	8001eea <__eqdf2+0x56>
 8001f18:	000007ff 	.word	0x000007ff

08001f1c <__gedf2>:
 8001f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f1e:	4657      	mov	r7, sl
 8001f20:	464e      	mov	r6, r9
 8001f22:	4645      	mov	r5, r8
 8001f24:	46de      	mov	lr, fp
 8001f26:	b5e0      	push	{r5, r6, r7, lr}
 8001f28:	000d      	movs	r5, r1
 8001f2a:	030f      	lsls	r7, r1, #12
 8001f2c:	0b39      	lsrs	r1, r7, #12
 8001f2e:	b083      	sub	sp, #12
 8001f30:	0004      	movs	r4, r0
 8001f32:	4680      	mov	r8, r0
 8001f34:	9101      	str	r1, [sp, #4]
 8001f36:	0058      	lsls	r0, r3, #1
 8001f38:	0fe9      	lsrs	r1, r5, #31
 8001f3a:	4f31      	ldr	r7, [pc, #196]	@ (8002000 <__gedf2+0xe4>)
 8001f3c:	0d40      	lsrs	r0, r0, #21
 8001f3e:	468c      	mov	ip, r1
 8001f40:	006e      	lsls	r6, r5, #1
 8001f42:	0319      	lsls	r1, r3, #12
 8001f44:	4682      	mov	sl, r0
 8001f46:	4691      	mov	r9, r2
 8001f48:	0d76      	lsrs	r6, r6, #21
 8001f4a:	0b09      	lsrs	r1, r1, #12
 8001f4c:	0fd8      	lsrs	r0, r3, #31
 8001f4e:	42be      	cmp	r6, r7
 8001f50:	d01f      	beq.n	8001f92 <__gedf2+0x76>
 8001f52:	45ba      	cmp	sl, r7
 8001f54:	d00f      	beq.n	8001f76 <__gedf2+0x5a>
 8001f56:	2e00      	cmp	r6, #0
 8001f58:	d12f      	bne.n	8001fba <__gedf2+0x9e>
 8001f5a:	4655      	mov	r5, sl
 8001f5c:	9e01      	ldr	r6, [sp, #4]
 8001f5e:	4334      	orrs	r4, r6
 8001f60:	2d00      	cmp	r5, #0
 8001f62:	d127      	bne.n	8001fb4 <__gedf2+0x98>
 8001f64:	430a      	orrs	r2, r1
 8001f66:	d03a      	beq.n	8001fde <__gedf2+0xc2>
 8001f68:	2c00      	cmp	r4, #0
 8001f6a:	d145      	bne.n	8001ff8 <__gedf2+0xdc>
 8001f6c:	2800      	cmp	r0, #0
 8001f6e:	d11a      	bne.n	8001fa6 <__gedf2+0x8a>
 8001f70:	2001      	movs	r0, #1
 8001f72:	4240      	negs	r0, r0
 8001f74:	e017      	b.n	8001fa6 <__gedf2+0x8a>
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d13b      	bne.n	8001ff2 <__gedf2+0xd6>
 8001f7a:	2e00      	cmp	r6, #0
 8001f7c:	d102      	bne.n	8001f84 <__gedf2+0x68>
 8001f7e:	9f01      	ldr	r7, [sp, #4]
 8001f80:	4327      	orrs	r7, r4
 8001f82:	d0f3      	beq.n	8001f6c <__gedf2+0x50>
 8001f84:	4584      	cmp	ip, r0
 8001f86:	d109      	bne.n	8001f9c <__gedf2+0x80>
 8001f88:	4663      	mov	r3, ip
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <__gedf2+0x54>
 8001f8e:	4660      	mov	r0, ip
 8001f90:	e009      	b.n	8001fa6 <__gedf2+0x8a>
 8001f92:	9f01      	ldr	r7, [sp, #4]
 8001f94:	4327      	orrs	r7, r4
 8001f96:	d12c      	bne.n	8001ff2 <__gedf2+0xd6>
 8001f98:	45b2      	cmp	sl, r6
 8001f9a:	d024      	beq.n	8001fe6 <__gedf2+0xca>
 8001f9c:	4663      	mov	r3, ip
 8001f9e:	2002      	movs	r0, #2
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	4018      	ands	r0, r3
 8001fa4:	3801      	subs	r0, #1
 8001fa6:	b003      	add	sp, #12
 8001fa8:	bcf0      	pop	{r4, r5, r6, r7}
 8001faa:	46bb      	mov	fp, r7
 8001fac:	46b2      	mov	sl, r6
 8001fae:	46a9      	mov	r9, r5
 8001fb0:	46a0      	mov	r8, r4
 8001fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fb4:	2c00      	cmp	r4, #0
 8001fb6:	d0d9      	beq.n	8001f6c <__gedf2+0x50>
 8001fb8:	e7e4      	b.n	8001f84 <__gedf2+0x68>
 8001fba:	4654      	mov	r4, sl
 8001fbc:	2c00      	cmp	r4, #0
 8001fbe:	d0ed      	beq.n	8001f9c <__gedf2+0x80>
 8001fc0:	4584      	cmp	ip, r0
 8001fc2:	d1eb      	bne.n	8001f9c <__gedf2+0x80>
 8001fc4:	4556      	cmp	r6, sl
 8001fc6:	dce9      	bgt.n	8001f9c <__gedf2+0x80>
 8001fc8:	dbde      	blt.n	8001f88 <__gedf2+0x6c>
 8001fca:	9b01      	ldr	r3, [sp, #4]
 8001fcc:	428b      	cmp	r3, r1
 8001fce:	d8e5      	bhi.n	8001f9c <__gedf2+0x80>
 8001fd0:	d1da      	bne.n	8001f88 <__gedf2+0x6c>
 8001fd2:	45c8      	cmp	r8, r9
 8001fd4:	d8e2      	bhi.n	8001f9c <__gedf2+0x80>
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	45c8      	cmp	r8, r9
 8001fda:	d2e4      	bcs.n	8001fa6 <__gedf2+0x8a>
 8001fdc:	e7d4      	b.n	8001f88 <__gedf2+0x6c>
 8001fde:	2000      	movs	r0, #0
 8001fe0:	2c00      	cmp	r4, #0
 8001fe2:	d0e0      	beq.n	8001fa6 <__gedf2+0x8a>
 8001fe4:	e7da      	b.n	8001f9c <__gedf2+0x80>
 8001fe6:	4311      	orrs	r1, r2
 8001fe8:	d103      	bne.n	8001ff2 <__gedf2+0xd6>
 8001fea:	4584      	cmp	ip, r0
 8001fec:	d1d6      	bne.n	8001f9c <__gedf2+0x80>
 8001fee:	2000      	movs	r0, #0
 8001ff0:	e7d9      	b.n	8001fa6 <__gedf2+0x8a>
 8001ff2:	2002      	movs	r0, #2
 8001ff4:	4240      	negs	r0, r0
 8001ff6:	e7d6      	b.n	8001fa6 <__gedf2+0x8a>
 8001ff8:	4584      	cmp	ip, r0
 8001ffa:	d0e6      	beq.n	8001fca <__gedf2+0xae>
 8001ffc:	e7ce      	b.n	8001f9c <__gedf2+0x80>
 8001ffe:	46c0      	nop			@ (mov r8, r8)
 8002000:	000007ff 	.word	0x000007ff

08002004 <__ledf2>:
 8002004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002006:	4657      	mov	r7, sl
 8002008:	464e      	mov	r6, r9
 800200a:	4645      	mov	r5, r8
 800200c:	46de      	mov	lr, fp
 800200e:	b5e0      	push	{r5, r6, r7, lr}
 8002010:	000d      	movs	r5, r1
 8002012:	030f      	lsls	r7, r1, #12
 8002014:	0004      	movs	r4, r0
 8002016:	4680      	mov	r8, r0
 8002018:	0fe8      	lsrs	r0, r5, #31
 800201a:	0b39      	lsrs	r1, r7, #12
 800201c:	4684      	mov	ip, r0
 800201e:	b083      	sub	sp, #12
 8002020:	0058      	lsls	r0, r3, #1
 8002022:	4f30      	ldr	r7, [pc, #192]	@ (80020e4 <__ledf2+0xe0>)
 8002024:	0d40      	lsrs	r0, r0, #21
 8002026:	9101      	str	r1, [sp, #4]
 8002028:	031e      	lsls	r6, r3, #12
 800202a:	0069      	lsls	r1, r5, #1
 800202c:	4682      	mov	sl, r0
 800202e:	4691      	mov	r9, r2
 8002030:	0d49      	lsrs	r1, r1, #21
 8002032:	0b36      	lsrs	r6, r6, #12
 8002034:	0fd8      	lsrs	r0, r3, #31
 8002036:	42b9      	cmp	r1, r7
 8002038:	d020      	beq.n	800207c <__ledf2+0x78>
 800203a:	45ba      	cmp	sl, r7
 800203c:	d00f      	beq.n	800205e <__ledf2+0x5a>
 800203e:	2900      	cmp	r1, #0
 8002040:	d12b      	bne.n	800209a <__ledf2+0x96>
 8002042:	9901      	ldr	r1, [sp, #4]
 8002044:	430c      	orrs	r4, r1
 8002046:	4651      	mov	r1, sl
 8002048:	2900      	cmp	r1, #0
 800204a:	d137      	bne.n	80020bc <__ledf2+0xb8>
 800204c:	4332      	orrs	r2, r6
 800204e:	d038      	beq.n	80020c2 <__ledf2+0xbe>
 8002050:	2c00      	cmp	r4, #0
 8002052:	d144      	bne.n	80020de <__ledf2+0xda>
 8002054:	2800      	cmp	r0, #0
 8002056:	d119      	bne.n	800208c <__ledf2+0x88>
 8002058:	2001      	movs	r0, #1
 800205a:	4240      	negs	r0, r0
 800205c:	e016      	b.n	800208c <__ledf2+0x88>
 800205e:	4316      	orrs	r6, r2
 8002060:	d113      	bne.n	800208a <__ledf2+0x86>
 8002062:	2900      	cmp	r1, #0
 8002064:	d102      	bne.n	800206c <__ledf2+0x68>
 8002066:	9f01      	ldr	r7, [sp, #4]
 8002068:	4327      	orrs	r7, r4
 800206a:	d0f3      	beq.n	8002054 <__ledf2+0x50>
 800206c:	4584      	cmp	ip, r0
 800206e:	d020      	beq.n	80020b2 <__ledf2+0xae>
 8002070:	4663      	mov	r3, ip
 8002072:	2002      	movs	r0, #2
 8002074:	3b01      	subs	r3, #1
 8002076:	4018      	ands	r0, r3
 8002078:	3801      	subs	r0, #1
 800207a:	e007      	b.n	800208c <__ledf2+0x88>
 800207c:	9f01      	ldr	r7, [sp, #4]
 800207e:	4327      	orrs	r7, r4
 8002080:	d103      	bne.n	800208a <__ledf2+0x86>
 8002082:	458a      	cmp	sl, r1
 8002084:	d1f4      	bne.n	8002070 <__ledf2+0x6c>
 8002086:	4316      	orrs	r6, r2
 8002088:	d01f      	beq.n	80020ca <__ledf2+0xc6>
 800208a:	2002      	movs	r0, #2
 800208c:	b003      	add	sp, #12
 800208e:	bcf0      	pop	{r4, r5, r6, r7}
 8002090:	46bb      	mov	fp, r7
 8002092:	46b2      	mov	sl, r6
 8002094:	46a9      	mov	r9, r5
 8002096:	46a0      	mov	r8, r4
 8002098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800209a:	4654      	mov	r4, sl
 800209c:	2c00      	cmp	r4, #0
 800209e:	d0e7      	beq.n	8002070 <__ledf2+0x6c>
 80020a0:	4584      	cmp	ip, r0
 80020a2:	d1e5      	bne.n	8002070 <__ledf2+0x6c>
 80020a4:	4551      	cmp	r1, sl
 80020a6:	dce3      	bgt.n	8002070 <__ledf2+0x6c>
 80020a8:	db03      	blt.n	80020b2 <__ledf2+0xae>
 80020aa:	9b01      	ldr	r3, [sp, #4]
 80020ac:	42b3      	cmp	r3, r6
 80020ae:	d8df      	bhi.n	8002070 <__ledf2+0x6c>
 80020b0:	d00f      	beq.n	80020d2 <__ledf2+0xce>
 80020b2:	4663      	mov	r3, ip
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0cf      	beq.n	8002058 <__ledf2+0x54>
 80020b8:	4660      	mov	r0, ip
 80020ba:	e7e7      	b.n	800208c <__ledf2+0x88>
 80020bc:	2c00      	cmp	r4, #0
 80020be:	d0c9      	beq.n	8002054 <__ledf2+0x50>
 80020c0:	e7d4      	b.n	800206c <__ledf2+0x68>
 80020c2:	2000      	movs	r0, #0
 80020c4:	2c00      	cmp	r4, #0
 80020c6:	d0e1      	beq.n	800208c <__ledf2+0x88>
 80020c8:	e7d2      	b.n	8002070 <__ledf2+0x6c>
 80020ca:	4584      	cmp	ip, r0
 80020cc:	d1d0      	bne.n	8002070 <__ledf2+0x6c>
 80020ce:	2000      	movs	r0, #0
 80020d0:	e7dc      	b.n	800208c <__ledf2+0x88>
 80020d2:	45c8      	cmp	r8, r9
 80020d4:	d8cc      	bhi.n	8002070 <__ledf2+0x6c>
 80020d6:	2000      	movs	r0, #0
 80020d8:	45c8      	cmp	r8, r9
 80020da:	d2d7      	bcs.n	800208c <__ledf2+0x88>
 80020dc:	e7e9      	b.n	80020b2 <__ledf2+0xae>
 80020de:	4584      	cmp	ip, r0
 80020e0:	d0e3      	beq.n	80020aa <__ledf2+0xa6>
 80020e2:	e7c5      	b.n	8002070 <__ledf2+0x6c>
 80020e4:	000007ff 	.word	0x000007ff

080020e8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80020e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ea:	b097      	sub	sp, #92	@ 0x5c
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020ee:	f000 fe4f 	bl	8002d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020f2:	f000 f9d7 	bl	80024a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020f6:	f000 fb45 	bl	8002784 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80020fa:	f000 fb13 	bl	8002724 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80020fe:	f000 fa95 	bl	800262c <MX_SPI1_Init>
  MX_ADC_Init();
 8002102:	f000 fa37 	bl	8002574 <MX_ADC_Init>
  MX_SPI2_Init();
 8002106:	f000 facf 	bl	80026a8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* Reset and initialise DW1000.
   * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
   * performance. */
  port_set_dw1000_slowrate();
 800210a:	f004 fa7f 	bl	800660c <port_set_dw1000_slowrate>
  if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR)
 800210e:	2001      	movs	r0, #1
 8002110:	f003 f956 	bl	80053c0 <dwt_initialise>
 8002114:	0003      	movs	r3, r0
 8002116:	3301      	adds	r3, #1
 8002118:	d101      	bne.n	800211e <main+0x36>
  {
    while (1)
 800211a:	46c0      	nop			@ (mov r8, r8)
 800211c:	e7fd      	b.n	800211a <main+0x32>
    {
    };
  }
  port_set_dw1000_fastrate();
 800211e:	f004 fa83 	bl	8006628 <port_set_dw1000_fastrate>

  /* Configure DW1000. See NOTE 7 below. */
  dwt_configure(&config);
 8002122:	4bc9      	ldr	r3, [pc, #804]	@ (8002448 <main+0x360>)
 8002124:	0018      	movs	r0, r3
 8002126:	f003 faa9 	bl	800567c <dwt_configure>

  /* Apply default antenna delay value. See NOTE 1 below. */
  dwt_setrxantennadelay(RX_ANT_DLY);
 800212a:	4bc8      	ldr	r3, [pc, #800]	@ (800244c <main+0x364>)
 800212c:	0018      	movs	r0, r3
 800212e:	f003 fc49 	bl	80059c4 <dwt_setrxantennadelay>
  dwt_settxantennadelay(TX_ANT_DLY);
 8002132:	4bc6      	ldr	r3, [pc, #792]	@ (800244c <main+0x364>)
 8002134:	0018      	movs	r0, r3
 8002136:	f003 fc59 	bl	80059ec <dwt_settxantennadelay>

  /* Set preamble timeout for expected frames. See NOTE 6 below. */
  dwt_setpreambledetecttimeout(PRE_TIMEOUT);
 800213a:	2008      	movs	r0, #8
 800213c:	f004 f8ee 	bl	800631c <dwt_setpreambledetecttimeout>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* Clear reception timeout to start next ranging process. */
    dwt_setrxtimeout(0);
 8002140:	2000      	movs	r0, #0
 8002142:	f004 f89b 	bl	800627c <dwt_setrxtimeout>

    /* Activate reception immediately. */
    dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8002146:	2000      	movs	r0, #0
 8002148:	f004 f850 	bl	80061ec <dwt_rxenable>

    /* Poll for reception of a frame or error/timeout. See NOTE 8 below. */
    while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 800214c:	46c0      	nop			@ (mov r8, r8)
 800214e:	2100      	movs	r1, #0
 8002150:	200f      	movs	r0, #15
 8002152:	f003 fd9b 	bl	8005c8c <dwt_read32bitoffsetreg>
 8002156:	0002      	movs	r2, r0
 8002158:	4bbd      	ldr	r3, [pc, #756]	@ (8002450 <main+0x368>)
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	4bbc      	ldr	r3, [pc, #752]	@ (8002450 <main+0x368>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4abc      	ldr	r2, [pc, #752]	@ (8002454 <main+0x36c>)
 8002162:	4013      	ands	r3, r2
 8002164:	d0f3      	beq.n	800214e <main+0x66>
    {
    };

    if (status_reg & SYS_STATUS_RXFCG)
 8002166:	4bba      	ldr	r3, [pc, #744]	@ (8002450 <main+0x368>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	2380      	movs	r3, #128	@ 0x80
 800216c:	01db      	lsls	r3, r3, #7
 800216e:	4013      	ands	r3, r2
 8002170:	d100      	bne.n	8002174 <main+0x8c>
 8002172:	e15e      	b.n	8002432 <main+0x34a>
    {
      uint32 frame_len;

      /* Clear good RX frame event in the DW1000 status register. */
      dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 8002174:	2380      	movs	r3, #128	@ 0x80
 8002176:	01db      	lsls	r3, r3, #7
 8002178:	001a      	movs	r2, r3
 800217a:	2100      	movs	r1, #0
 800217c:	200f      	movs	r0, #15
 800217e:	f003 fe16 	bl	8005dae <dwt_write32bitoffsetreg>

      /* A frame has been received, read it into the local buffer. */
      frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 8002182:	2100      	movs	r1, #0
 8002184:	2010      	movs	r0, #16
 8002186:	f003 fd81 	bl	8005c8c <dwt_read32bitoffsetreg>
 800218a:	0003      	movs	r3, r0
 800218c:	059b      	lsls	r3, r3, #22
 800218e:	0d9b      	lsrs	r3, r3, #22
 8002190:	657b      	str	r3, [r7, #84]	@ 0x54
      if (frame_len <= RX_BUFFER_LEN)
 8002192:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002194:	2380      	movs	r3, #128	@ 0x80
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	429a      	cmp	r2, r3
 800219a:	d806      	bhi.n	80021aa <main+0xc2>
      {
        dwt_readrxdata(rx_buffer, frame_len, 0);
 800219c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800219e:	b299      	uxth	r1, r3
 80021a0:	4bad      	ldr	r3, [pc, #692]	@ (8002458 <main+0x370>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	0018      	movs	r0, r3
 80021a6:	f003 fc7f 	bl	8005aa8 <dwt_readrxdata>
      }

      /* Check that the frame is a poll sent by "DS TWR initiator" example.
       * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
      rx_buffer[ALL_MSG_SN_IDX] = 0;
 80021aa:	4bab      	ldr	r3, [pc, #684]	@ (8002458 <main+0x370>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	709a      	strb	r2, [r3, #2]
      if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0)
 80021b0:	49aa      	ldr	r1, [pc, #680]	@ (800245c <main+0x374>)
 80021b2:	4ba9      	ldr	r3, [pc, #676]	@ (8002458 <main+0x370>)
 80021b4:	220a      	movs	r2, #10
 80021b6:	0018      	movs	r0, r3
 80021b8:	f004 fa8c 	bl	80066d4 <memcmp>
 80021bc:	1e03      	subs	r3, r0, #0
 80021be:	d1bf      	bne.n	8002140 <main+0x58>
      {
        uint32 resp_tx_time;
        int ret;

        /* Retrieve poll reception timestamp. */
        poll_rx_ts = get_rx_timestamp_u64();
 80021c0:	f000 fbca 	bl	8002958 <get_rx_timestamp_u64>
 80021c4:	0002      	movs	r2, r0
 80021c6:	000b      	movs	r3, r1
 80021c8:	49a5      	ldr	r1, [pc, #660]	@ (8002460 <main+0x378>)
 80021ca:	600a      	str	r2, [r1, #0]
 80021cc:	604b      	str	r3, [r1, #4]

        /* Set send time for response. See NOTE 9 below. */
        resp_tx_time = (poll_rx_ts + (POLL_RX_TO_RESP_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 80021ce:	4ba4      	ldr	r3, [pc, #656]	@ (8002460 <main+0x378>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	48a3      	ldr	r0, [pc, #652]	@ (8002464 <main+0x37c>)
 80021d6:	2100      	movs	r1, #0
 80021d8:	1812      	adds	r2, r2, r0
 80021da:	414b      	adcs	r3, r1
 80021dc:	0619      	lsls	r1, r3, #24
 80021de:	0a14      	lsrs	r4, r2, #8
 80021e0:	430c      	orrs	r4, r1
 80021e2:	0a1d      	lsrs	r5, r3, #8
 80021e4:	0023      	movs	r3, r4
 80021e6:	653b      	str	r3, [r7, #80]	@ 0x50
        dwt_setdelayedtrxtime(resp_tx_time);
 80021e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021ea:	0018      	movs	r0, r3
 80021ec:	f003 ff3f 	bl	800606e <dwt_setdelayedtrxtime>

        /* Set expected delay and timeout for final message reception. See NOTE 4 and 5 below. */
        dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS);
 80021f0:	23fa      	movs	r3, #250	@ 0xfa
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	0018      	movs	r0, r3
 80021f6:	f003 fe6e 	bl	8005ed6 <dwt_setrxaftertxdelay>
        dwt_setrxtimeout(FINAL_RX_TIMEOUT_UUS);
 80021fa:	4b9b      	ldr	r3, [pc, #620]	@ (8002468 <main+0x380>)
 80021fc:	0018      	movs	r0, r3
 80021fe:	f004 f83d 	bl	800627c <dwt_setrxtimeout>

        /* Write and send the response message. See NOTE 10 below.*/
        tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8002202:	4b9a      	ldr	r3, [pc, #616]	@ (800246c <main+0x384>)
 8002204:	781a      	ldrb	r2, [r3, #0]
 8002206:	4b9a      	ldr	r3, [pc, #616]	@ (8002470 <main+0x388>)
 8002208:	709a      	strb	r2, [r3, #2]
        dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 800220a:	4b99      	ldr	r3, [pc, #612]	@ (8002470 <main+0x388>)
 800220c:	2200      	movs	r2, #0
 800220e:	0019      	movs	r1, r3
 8002210:	200f      	movs	r0, #15
 8002212:	f003 fbfc 	bl	8005a0e <dwt_writetxdata>
        dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1);          /* Zero offset in TX buffer, ranging. */
 8002216:	2201      	movs	r2, #1
 8002218:	2100      	movs	r1, #0
 800221a:	200f      	movs	r0, #15
 800221c:	f003 fc20 	bl	8005a60 <dwt_writetxfctrl>
        ret = dwt_starttx(DWT_START_TX_DELAYED | DWT_RESPONSE_EXPECTED);
 8002220:	2003      	movs	r0, #3
 8002222:	f003 ff33 	bl	800608c <dwt_starttx>
 8002226:	0003      	movs	r3, r0
 8002228:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 11 below. */
        if (ret == DWT_ERROR)
 800222a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800222c:	3301      	adds	r3, #1
 800222e:	d100      	bne.n	8002232 <main+0x14a>
 8002230:	e108      	b.n	8002444 <main+0x35c>
        {
          continue;
        }

        /* Poll for reception of expected "final" frame or error/timeout. See NOTE 8 below. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8002232:	46c0      	nop			@ (mov r8, r8)
 8002234:	2100      	movs	r1, #0
 8002236:	200f      	movs	r0, #15
 8002238:	f003 fd28 	bl	8005c8c <dwt_read32bitoffsetreg>
 800223c:	0002      	movs	r2, r0
 800223e:	4b84      	ldr	r3, [pc, #528]	@ (8002450 <main+0x368>)
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	4b83      	ldr	r3, [pc, #524]	@ (8002450 <main+0x368>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a83      	ldr	r2, [pc, #524]	@ (8002454 <main+0x36c>)
 8002248:	4013      	ands	r3, r2
 800224a:	d0f3      	beq.n	8002234 <main+0x14c>
        {
        };

        /* Increment frame sequence number after transmission of the response message (modulo 256). */
        frame_seq_nb++;
 800224c:	4b87      	ldr	r3, [pc, #540]	@ (800246c <main+0x384>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	3301      	adds	r3, #1
 8002252:	b2da      	uxtb	r2, r3
 8002254:	4b85      	ldr	r3, [pc, #532]	@ (800246c <main+0x384>)
 8002256:	701a      	strb	r2, [r3, #0]

        if (status_reg & SYS_STATUS_RXFCG)
 8002258:	4b7d      	ldr	r3, [pc, #500]	@ (8002450 <main+0x368>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	2380      	movs	r3, #128	@ 0x80
 800225e:	01db      	lsls	r3, r3, #7
 8002260:	4013      	ands	r3, r2
 8002262:	d100      	bne.n	8002266 <main+0x17e>
 8002264:	e0dc      	b.n	8002420 <main+0x338>
        {
          /* Clear good RX frame event and TX frame sent in the DW1000 status register. */
          dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG | SYS_STATUS_TXFRS);
 8002266:	2381      	movs	r3, #129	@ 0x81
 8002268:	01db      	lsls	r3, r3, #7
 800226a:	001a      	movs	r2, r3
 800226c:	2100      	movs	r1, #0
 800226e:	200f      	movs	r0, #15
 8002270:	f003 fd9d 	bl	8005dae <dwt_write32bitoffsetreg>

          /* A frame has been received, read it into the local buffer. */
          frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 8002274:	2100      	movs	r1, #0
 8002276:	2010      	movs	r0, #16
 8002278:	f003 fd08 	bl	8005c8c <dwt_read32bitoffsetreg>
 800227c:	0003      	movs	r3, r0
 800227e:	227f      	movs	r2, #127	@ 0x7f
 8002280:	4013      	ands	r3, r2
 8002282:	657b      	str	r3, [r7, #84]	@ 0x54
          if (frame_len <= RX_BUF_LEN)
 8002284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002286:	2b18      	cmp	r3, #24
 8002288:	d806      	bhi.n	8002298 <main+0x1b0>
          {
            dwt_readrxdata(rx_buffer, frame_len, 0);
 800228a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800228c:	b299      	uxth	r1, r3
 800228e:	4b72      	ldr	r3, [pc, #456]	@ (8002458 <main+0x370>)
 8002290:	2200      	movs	r2, #0
 8002292:	0018      	movs	r0, r3
 8002294:	f003 fc08 	bl	8005aa8 <dwt_readrxdata>
          }

          /* Check that the frame is a final message sent by "DS TWR initiator" example.
           * As the sequence number field of the frame is not used in this example, it can be zeroed to ease the validation of the frame. */
          rx_buffer[ALL_MSG_SN_IDX] = 0;
 8002298:	4b6f      	ldr	r3, [pc, #444]	@ (8002458 <main+0x370>)
 800229a:	2200      	movs	r2, #0
 800229c:	709a      	strb	r2, [r3, #2]
          if (memcmp(rx_buffer, rx_final_msg, ALL_MSG_COMMON_LEN) == 0)
 800229e:	4975      	ldr	r1, [pc, #468]	@ (8002474 <main+0x38c>)
 80022a0:	4b6d      	ldr	r3, [pc, #436]	@ (8002458 <main+0x370>)
 80022a2:	220a      	movs	r2, #10
 80022a4:	0018      	movs	r0, r3
 80022a6:	f004 fa15 	bl	80066d4 <memcmp>
 80022aa:	1e03      	subs	r3, r0, #0
 80022ac:	d000      	beq.n	80022b0 <main+0x1c8>
 80022ae:	e747      	b.n	8002140 <main+0x58>
            uint32 poll_rx_ts_32, resp_tx_ts_32, final_rx_ts_32;
            double Ra, Rb, Da, Db;
            int64 tof_dtu;

            /* Retrieve response transmission and final reception timestamps. */
            resp_tx_ts = get_tx_timestamp_u64();
 80022b0:	f000 fb18 	bl	80028e4 <get_tx_timestamp_u64>
 80022b4:	0002      	movs	r2, r0
 80022b6:	000b      	movs	r3, r1
 80022b8:	496f      	ldr	r1, [pc, #444]	@ (8002478 <main+0x390>)
 80022ba:	600a      	str	r2, [r1, #0]
 80022bc:	604b      	str	r3, [r1, #4]
            final_rx_ts = get_rx_timestamp_u64();
 80022be:	f000 fb4b 	bl	8002958 <get_rx_timestamp_u64>
 80022c2:	0002      	movs	r2, r0
 80022c4:	000b      	movs	r3, r1
 80022c6:	496d      	ldr	r1, [pc, #436]	@ (800247c <main+0x394>)
 80022c8:	600a      	str	r2, [r1, #0]
 80022ca:	604b      	str	r3, [r1, #4]

            /* Get timestamps embedded in the final message. */
            final_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX], &poll_tx_ts);
 80022cc:	230c      	movs	r3, #12
 80022ce:	2608      	movs	r6, #8
 80022d0:	199b      	adds	r3, r3, r6
 80022d2:	19da      	adds	r2, r3, r7
 80022d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002480 <main+0x398>)
 80022d6:	0011      	movs	r1, r2
 80022d8:	0018      	movs	r0, r3
 80022da:	f000 fb77 	bl	80029cc <final_msg_get_ts>
            final_msg_get_ts(&rx_buffer[FINAL_MSG_RESP_RX_TS_IDX], &resp_rx_ts);
 80022de:	2308      	movs	r3, #8
 80022e0:	199b      	adds	r3, r3, r6
 80022e2:	19da      	adds	r2, r3, r7
 80022e4:	4b67      	ldr	r3, [pc, #412]	@ (8002484 <main+0x39c>)
 80022e6:	0011      	movs	r1, r2
 80022e8:	0018      	movs	r0, r3
 80022ea:	f000 fb6f 	bl	80029cc <final_msg_get_ts>
            final_msg_get_ts(&rx_buffer[FINAL_MSG_FINAL_TX_TS_IDX], &final_tx_ts);
 80022ee:	230c      	movs	r3, #12
 80022f0:	18fa      	adds	r2, r7, r3
 80022f2:	4b65      	ldr	r3, [pc, #404]	@ (8002488 <main+0x3a0>)
 80022f4:	0011      	movs	r1, r2
 80022f6:	0018      	movs	r0, r3
 80022f8:	f000 fb68 	bl	80029cc <final_msg_get_ts>

            /* Compute time of flight. 32-bit subtractions give correct answers even if clock has wrapped. See NOTE 12 below. */
            poll_rx_ts_32 = (uint32)poll_rx_ts;
 80022fc:	4b58      	ldr	r3, [pc, #352]	@ (8002460 <main+0x378>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	0013      	movs	r3, r2
 8002304:	64bb      	str	r3, [r7, #72]	@ 0x48
            resp_tx_ts_32 = (uint32)resp_tx_ts;
 8002306:	4b5c      	ldr	r3, [pc, #368]	@ (8002478 <main+0x390>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	0013      	movs	r3, r2
 800230e:	647b      	str	r3, [r7, #68]	@ 0x44
            final_rx_ts_32 = (uint32)final_rx_ts;
 8002310:	4b5a      	ldr	r3, [pc, #360]	@ (800247c <main+0x394>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	0013      	movs	r3, r2
 8002318:	643b      	str	r3, [r7, #64]	@ 0x40
            Ra = (double)(resp_rx_ts - poll_tx_ts);
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	0018      	movs	r0, r3
 8002322:	f7ff fd37 	bl	8001d94 <__aeabi_ui2d>
 8002326:	0002      	movs	r2, r0
 8002328:	000b      	movs	r3, r1
 800232a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800232c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            Rb = (double)(final_rx_ts_32 - resp_tx_ts_32);
 800232e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002330:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	0018      	movs	r0, r3
 8002336:	f7ff fd2d 	bl	8001d94 <__aeabi_ui2d>
 800233a:	0002      	movs	r2, r0
 800233c:	000b      	movs	r3, r1
 800233e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002340:	637b      	str	r3, [r7, #52]	@ 0x34
            Da = (double)(final_tx_ts - resp_rx_ts);
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	0018      	movs	r0, r3
 800234a:	f7ff fd23 	bl	8001d94 <__aeabi_ui2d>
 800234e:	0002      	movs	r2, r0
 8002350:	000b      	movs	r3, r1
 8002352:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002354:	62fb      	str	r3, [r7, #44]	@ 0x2c
            Db = (double)(resp_tx_ts_32 - poll_rx_ts_32);
 8002356:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002358:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	0018      	movs	r0, r3
 800235e:	f7ff fd19 	bl	8001d94 <__aeabi_ui2d>
 8002362:	0002      	movs	r2, r0
 8002364:	000b      	movs	r3, r1
 8002366:	623a      	str	r2, [r7, #32]
 8002368:	627b      	str	r3, [r7, #36]	@ 0x24
            tof_dtu = (int64)((Ra * Rb - Da * Db) / (Ra + Rb + Da + Db));
 800236a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800236c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800236e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002370:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002372:	f7fe fe41 	bl	8000ff8 <__aeabi_dmul>
 8002376:	0002      	movs	r2, r0
 8002378:	000b      	movs	r3, r1
 800237a:	603a      	str	r2, [r7, #0]
 800237c:	607b      	str	r3, [r7, #4]
 800237e:	6a3a      	ldr	r2, [r7, #32]
 8002380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002382:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002384:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002386:	f7fe fe37 	bl	8000ff8 <__aeabi_dmul>
 800238a:	0002      	movs	r2, r0
 800238c:	000b      	movs	r3, r1
 800238e:	6838      	ldr	r0, [r7, #0]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	f7ff f8f9 	bl	8001588 <__aeabi_dsub>
 8002396:	0002      	movs	r2, r0
 8002398:	000b      	movs	r3, r1
 800239a:	603a      	str	r2, [r7, #0]
 800239c:	607b      	str	r3, [r7, #4]
 800239e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80023a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80023a6:	f7fd ffa9 	bl	80002fc <__aeabi_dadd>
 80023aa:	0002      	movs	r2, r0
 80023ac:	000b      	movs	r3, r1
 80023ae:	0010      	movs	r0, r2
 80023b0:	0019      	movs	r1, r3
 80023b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023b6:	f7fd ffa1 	bl	80002fc <__aeabi_dadd>
 80023ba:	0002      	movs	r2, r0
 80023bc:	000b      	movs	r3, r1
 80023be:	0010      	movs	r0, r2
 80023c0:	0019      	movs	r1, r3
 80023c2:	6a3a      	ldr	r2, [r7, #32]
 80023c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c6:	f7fd ff99 	bl	80002fc <__aeabi_dadd>
 80023ca:	0002      	movs	r2, r0
 80023cc:	000b      	movs	r3, r1
 80023ce:	6838      	ldr	r0, [r7, #0]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	f7fe faf7 	bl	80009c4 <__aeabi_ddiv>
 80023d6:	0002      	movs	r2, r0
 80023d8:	000b      	movs	r3, r1
 80023da:	0010      	movs	r0, r2
 80023dc:	0019      	movs	r1, r3
 80023de:	f7fd ff3d 	bl	800025c <__aeabi_d2lz>
 80023e2:	0002      	movs	r2, r0
 80023e4:	000b      	movs	r3, r1
 80023e6:	61ba      	str	r2, [r7, #24]
 80023e8:	61fb      	str	r3, [r7, #28]

            tof = tof_dtu * DWT_TIME_UNITS;
 80023ea:	69b8      	ldr	r0, [r7, #24]
 80023ec:	69f9      	ldr	r1, [r7, #28]
 80023ee:	f7fd ff6f 	bl	80002d0 <__aeabi_l2d>
 80023f2:	4a26      	ldr	r2, [pc, #152]	@ (800248c <main+0x3a4>)
 80023f4:	4b26      	ldr	r3, [pc, #152]	@ (8002490 <main+0x3a8>)
 80023f6:	f7fe fdff 	bl	8000ff8 <__aeabi_dmul>
 80023fa:	0002      	movs	r2, r0
 80023fc:	000b      	movs	r3, r1
 80023fe:	4925      	ldr	r1, [pc, #148]	@ (8002494 <main+0x3ac>)
 8002400:	600a      	str	r2, [r1, #0]
 8002402:	604b      	str	r3, [r1, #4]
            distance = tof * SPEED_OF_LIGHT;
 8002404:	4b23      	ldr	r3, [pc, #140]	@ (8002494 <main+0x3ac>)
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	6859      	ldr	r1, [r3, #4]
 800240a:	2298      	movs	r2, #152	@ 0x98
 800240c:	0552      	lsls	r2, r2, #21
 800240e:	4b22      	ldr	r3, [pc, #136]	@ (8002498 <main+0x3b0>)
 8002410:	f7fe fdf2 	bl	8000ff8 <__aeabi_dmul>
 8002414:	0002      	movs	r2, r0
 8002416:	000b      	movs	r3, r1
 8002418:	4920      	ldr	r1, [pc, #128]	@ (800249c <main+0x3b4>)
 800241a:	600a      	str	r2, [r1, #0]
 800241c:	604b      	str	r3, [r1, #4]
 800241e:	e68f      	b.n	8002140 <main+0x58>
          }
        }
        else
        {
          /* Clear RX error/timeout events in the DW1000 status register. */
          dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8002420:	4b1f      	ldr	r3, [pc, #124]	@ (80024a0 <main+0x3b8>)
 8002422:	001a      	movs	r2, r3
 8002424:	2100      	movs	r1, #0
 8002426:	200f      	movs	r0, #15
 8002428:	f003 fcc1 	bl	8005dae <dwt_write32bitoffsetreg>

          /* Reset RX to properly reinitialise LDE operation. */
          dwt_rxreset();
 800242c:	f003 ff87 	bl	800633e <dwt_rxreset>
 8002430:	e686      	b.n	8002140 <main+0x58>
      }
    }
    else
    {
      /* Clear RX error/timeout events in the DW1000 status register. */
      dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8002432:	4b1b      	ldr	r3, [pc, #108]	@ (80024a0 <main+0x3b8>)
 8002434:	001a      	movs	r2, r3
 8002436:	2100      	movs	r1, #0
 8002438:	200f      	movs	r0, #15
 800243a:	f003 fcb8 	bl	8005dae <dwt_write32bitoffsetreg>

      /* Reset RX to properly reinitialise LDE operation. */
      dwt_rxreset();
 800243e:	f003 ff7e 	bl	800633e <dwt_rxreset>
 8002442:	e67d      	b.n	8002140 <main+0x58>
          continue;
 8002444:	46c0      	nop			@ (mov r8, r8)
    dwt_setrxtimeout(0);
 8002446:	e67b      	b.n	8002140 <main+0x58>
 8002448:	20000000 	.word	0x20000000
 800244c:	00004034 	.word	0x00004034
 8002450:	20000088 	.word	0x20000088
 8002454:	2427d000 	.word	0x2427d000
 8002458:	20000070 	.word	0x20000070
 800245c:	2000000c 	.word	0x2000000c
 8002460:	20000090 	.word	0x20000090
 8002464:	0abe0000 	.word	0x0abe0000
 8002468:	00000ce4 	.word	0x00000ce4
 800246c:	2000006c 	.word	0x2000006c
 8002470:	20000018 	.word	0x20000018
 8002474:	20000028 	.word	0x20000028
 8002478:	20000098 	.word	0x20000098
 800247c:	200000a0 	.word	0x200000a0
 8002480:	2000007a 	.word	0x2000007a
 8002484:	2000007e 	.word	0x2000007e
 8002488:	20000082 	.word	0x20000082
 800248c:	3bce48fa 	.word	0x3bce48fa
 8002490:	3db13518 	.word	0x3db13518
 8002494:	200000a8 	.word	0x200000a8
 8002498:	41b1dd19 	.word	0x41b1dd19
 800249c:	200000b0 	.word	0x200000b0
 80024a0:	24279000 	.word	0x24279000

080024a4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80024a4:	b590      	push	{r4, r7, lr}
 80024a6:	b099      	sub	sp, #100	@ 0x64
 80024a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024aa:	242c      	movs	r4, #44	@ 0x2c
 80024ac:	193b      	adds	r3, r7, r4
 80024ae:	0018      	movs	r0, r3
 80024b0:	2334      	movs	r3, #52	@ 0x34
 80024b2:	001a      	movs	r2, r3
 80024b4:	2100      	movs	r1, #0
 80024b6:	f004 f91b 	bl	80066f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024ba:	231c      	movs	r3, #28
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	0018      	movs	r0, r3
 80024c0:	2310      	movs	r3, #16
 80024c2:	001a      	movs	r2, r3
 80024c4:	2100      	movs	r1, #0
 80024c6:	f004 f913 	bl	80066f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024ca:	003b      	movs	r3, r7
 80024cc:	0018      	movs	r0, r3
 80024ce:	231c      	movs	r3, #28
 80024d0:	001a      	movs	r2, r3
 80024d2:	2100      	movs	r1, #0
 80024d4:	f004 f90c 	bl	80066f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI14;
 80024d8:	0021      	movs	r1, r4
 80024da:	187b      	adds	r3, r7, r1
 80024dc:	2212      	movs	r2, #18
 80024de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024e0:	187b      	adds	r3, r7, r1
 80024e2:	2201      	movs	r2, #1
 80024e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80024e6:	187b      	adds	r3, r7, r1
 80024e8:	2201      	movs	r2, #1
 80024ea:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024ec:	187b      	adds	r3, r7, r1
 80024ee:	2210      	movs	r2, #16
 80024f0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80024f2:	187b      	adds	r3, r7, r1
 80024f4:	2210      	movs	r2, #16
 80024f6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024f8:	187b      	adds	r3, r7, r1
 80024fa:	2202      	movs	r2, #2
 80024fc:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	2280      	movs	r2, #128	@ 0x80
 8002502:	0212      	lsls	r2, r2, #8
 8002504:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002506:	187b      	adds	r3, r7, r1
 8002508:	22e0      	movs	r2, #224	@ 0xe0
 800250a:	0352      	lsls	r2, r2, #13
 800250c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 800250e:	187b      	adds	r3, r7, r1
 8002510:	2201      	movs	r2, #1
 8002512:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002514:	187b      	adds	r3, r7, r1
 8002516:	0018      	movs	r0, r3
 8002518:	f001 f9bc 	bl	8003894 <HAL_RCC_OscConfig>
 800251c:	1e03      	subs	r3, r0, #0
 800251e:	d001      	beq.n	8002524 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002520:	f000 fa78 	bl	8002a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8002524:	211c      	movs	r1, #28
 8002526:	187b      	adds	r3, r7, r1
 8002528:	2207      	movs	r2, #7
 800252a:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800252c:	187b      	adds	r3, r7, r1
 800252e:	2202      	movs	r2, #2
 8002530:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002532:	187b      	adds	r3, r7, r1
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002538:	187b      	adds	r3, r7, r1
 800253a:	2200      	movs	r2, #0
 800253c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800253e:	187b      	adds	r3, r7, r1
 8002540:	2101      	movs	r1, #1
 8002542:	0018      	movs	r0, r3
 8002544:	f001 fd2c 	bl	8003fa0 <HAL_RCC_ClockConfig>
 8002548:	1e03      	subs	r3, r0, #0
 800254a:	d001      	beq.n	8002550 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800254c:	f000 fa62 	bl	8002a14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002550:	003b      	movs	r3, r7
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002556:	003b      	movs	r3, r7
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800255c:	003b      	movs	r3, r7
 800255e:	0018      	movs	r0, r3
 8002560:	f001 fe8a 	bl	8004278 <HAL_RCCEx_PeriphCLKConfig>
 8002564:	1e03      	subs	r3, r0, #0
 8002566:	d001      	beq.n	800256c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002568:	f000 fa54 	bl	8002a14 <Error_Handler>
  }
}
 800256c:	46c0      	nop			@ (mov r8, r8)
 800256e:	46bd      	mov	sp, r7
 8002570:	b019      	add	sp, #100	@ 0x64
 8002572:	bd90      	pop	{r4, r7, pc}

08002574 <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	0018      	movs	r0, r3
 800257e:	230c      	movs	r3, #12
 8002580:	001a      	movs	r2, r3
 8002582:	2100      	movs	r1, #0
 8002584:	f004 f8b4 	bl	80066f0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc.Instance = ADC1;
 8002588:	4b26      	ldr	r3, [pc, #152]	@ (8002624 <MX_ADC_Init+0xb0>)
 800258a:	4a27      	ldr	r2, [pc, #156]	@ (8002628 <MX_ADC_Init+0xb4>)
 800258c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800258e:	4b25      	ldr	r3, [pc, #148]	@ (8002624 <MX_ADC_Init+0xb0>)
 8002590:	2200      	movs	r2, #0
 8002592:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002594:	4b23      	ldr	r3, [pc, #140]	@ (8002624 <MX_ADC_Init+0xb0>)
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800259a:	4b22      	ldr	r3, [pc, #136]	@ (8002624 <MX_ADC_Init+0xb0>)
 800259c:	2200      	movs	r2, #0
 800259e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80025a0:	4b20      	ldr	r3, [pc, #128]	@ (8002624 <MX_ADC_Init+0xb0>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002624 <MX_ADC_Init+0xb0>)
 80025a8:	2204      	movs	r2, #4
 80025aa:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80025ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002624 <MX_ADC_Init+0xb0>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80025b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002624 <MX_ADC_Init+0xb0>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80025b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002624 <MX_ADC_Init+0xb0>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80025be:	4b19      	ldr	r3, [pc, #100]	@ (8002624 <MX_ADC_Init+0xb0>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025c4:	4b17      	ldr	r3, [pc, #92]	@ (8002624 <MX_ADC_Init+0xb0>)
 80025c6:	22c2      	movs	r2, #194	@ 0xc2
 80025c8:	32ff      	adds	r2, #255	@ 0xff
 80025ca:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025cc:	4b15      	ldr	r3, [pc, #84]	@ (8002624 <MX_ADC_Init+0xb0>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80025d2:	4b14      	ldr	r3, [pc, #80]	@ (8002624 <MX_ADC_Init+0xb0>)
 80025d4:	2224      	movs	r2, #36	@ 0x24
 80025d6:	2100      	movs	r1, #0
 80025d8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80025da:	4b12      	ldr	r3, [pc, #72]	@ (8002624 <MX_ADC_Init+0xb0>)
 80025dc:	2201      	movs	r2, #1
 80025de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80025e0:	4b10      	ldr	r3, [pc, #64]	@ (8002624 <MX_ADC_Init+0xb0>)
 80025e2:	0018      	movs	r0, r3
 80025e4:	f000 fc5c 	bl	8002ea0 <HAL_ADC_Init>
 80025e8:	1e03      	subs	r3, r0, #0
 80025ea:	d001      	beq.n	80025f0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80025ec:	f000 fa12 	bl	8002a14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_8;
 80025f0:	1d3b      	adds	r3, r7, #4
 80025f2:	2208      	movs	r2, #8
 80025f4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	2280      	movs	r2, #128	@ 0x80
 80025fa:	0152      	lsls	r2, r2, #5
 80025fc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	2280      	movs	r2, #128	@ 0x80
 8002602:	0552      	lsls	r2, r2, #21
 8002604:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002606:	1d3a      	adds	r2, r7, #4
 8002608:	4b06      	ldr	r3, [pc, #24]	@ (8002624 <MX_ADC_Init+0xb0>)
 800260a:	0011      	movs	r1, r2
 800260c:	0018      	movs	r0, r3
 800260e:	f000 fd87 	bl	8003120 <HAL_ADC_ConfigChannel>
 8002612:	1e03      	subs	r3, r0, #0
 8002614:	d001      	beq.n	800261a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002616:	f000 f9fd 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */
}
 800261a:	46c0      	nop			@ (mov r8, r8)
 800261c:	46bd      	mov	sp, r7
 800261e:	b004      	add	sp, #16
 8002620:	bd80      	pop	{r7, pc}
 8002622:	46c0      	nop			@ (mov r8, r8)
 8002624:	200000b8 	.word	0x200000b8
 8002628:	40012400 	.word	0x40012400

0800262c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002630:	4b1b      	ldr	r3, [pc, #108]	@ (80026a0 <MX_SPI1_Init+0x74>)
 8002632:	4a1c      	ldr	r2, [pc, #112]	@ (80026a4 <MX_SPI1_Init+0x78>)
 8002634:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002636:	4b1a      	ldr	r3, [pc, #104]	@ (80026a0 <MX_SPI1_Init+0x74>)
 8002638:	2282      	movs	r2, #130	@ 0x82
 800263a:	0052      	lsls	r2, r2, #1
 800263c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800263e:	4b18      	ldr	r3, [pc, #96]	@ (80026a0 <MX_SPI1_Init+0x74>)
 8002640:	2200      	movs	r2, #0
 8002642:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002644:	4b16      	ldr	r3, [pc, #88]	@ (80026a0 <MX_SPI1_Init+0x74>)
 8002646:	22e0      	movs	r2, #224	@ 0xe0
 8002648:	00d2      	lsls	r2, r2, #3
 800264a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800264c:	4b14      	ldr	r3, [pc, #80]	@ (80026a0 <MX_SPI1_Init+0x74>)
 800264e:	2200      	movs	r2, #0
 8002650:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002652:	4b13      	ldr	r3, [pc, #76]	@ (80026a0 <MX_SPI1_Init+0x74>)
 8002654:	2200      	movs	r2, #0
 8002656:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002658:	4b11      	ldr	r3, [pc, #68]	@ (80026a0 <MX_SPI1_Init+0x74>)
 800265a:	2280      	movs	r2, #128	@ 0x80
 800265c:	0092      	lsls	r2, r2, #2
 800265e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002660:	4b0f      	ldr	r3, [pc, #60]	@ (80026a0 <MX_SPI1_Init+0x74>)
 8002662:	2218      	movs	r2, #24
 8002664:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002666:	4b0e      	ldr	r3, [pc, #56]	@ (80026a0 <MX_SPI1_Init+0x74>)
 8002668:	2200      	movs	r2, #0
 800266a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800266c:	4b0c      	ldr	r3, [pc, #48]	@ (80026a0 <MX_SPI1_Init+0x74>)
 800266e:	2200      	movs	r2, #0
 8002670:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002672:	4b0b      	ldr	r3, [pc, #44]	@ (80026a0 <MX_SPI1_Init+0x74>)
 8002674:	2200      	movs	r2, #0
 8002676:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002678:	4b09      	ldr	r3, [pc, #36]	@ (80026a0 <MX_SPI1_Init+0x74>)
 800267a:	2207      	movs	r2, #7
 800267c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800267e:	4b08      	ldr	r3, [pc, #32]	@ (80026a0 <MX_SPI1_Init+0x74>)
 8002680:	2200      	movs	r2, #0
 8002682:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002684:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <MX_SPI1_Init+0x74>)
 8002686:	2208      	movs	r2, #8
 8002688:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800268a:	4b05      	ldr	r3, [pc, #20]	@ (80026a0 <MX_SPI1_Init+0x74>)
 800268c:	0018      	movs	r0, r3
 800268e:	f001 fef1 	bl	8004474 <HAL_SPI_Init>
 8002692:	1e03      	subs	r3, r0, #0
 8002694:	d001      	beq.n	800269a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002696:	f000 f9bd 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 800269a:	46c0      	nop			@ (mov r8, r8)
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	200000f8 	.word	0x200000f8
 80026a4:	40013000 	.word	0x40013000

080026a8 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80026ac:	4b1b      	ldr	r3, [pc, #108]	@ (800271c <MX_SPI2_Init+0x74>)
 80026ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002720 <MX_SPI2_Init+0x78>)
 80026b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80026b2:	4b1a      	ldr	r3, [pc, #104]	@ (800271c <MX_SPI2_Init+0x74>)
 80026b4:	2282      	movs	r2, #130	@ 0x82
 80026b6:	0052      	lsls	r2, r2, #1
 80026b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80026ba:	4b18      	ldr	r3, [pc, #96]	@ (800271c <MX_SPI2_Init+0x74>)
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80026c0:	4b16      	ldr	r3, [pc, #88]	@ (800271c <MX_SPI2_Init+0x74>)
 80026c2:	22c0      	movs	r2, #192	@ 0xc0
 80026c4:	0092      	lsls	r2, r2, #2
 80026c6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026c8:	4b14      	ldr	r3, [pc, #80]	@ (800271c <MX_SPI2_Init+0x74>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026ce:	4b13      	ldr	r3, [pc, #76]	@ (800271c <MX_SPI2_Init+0x74>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80026d4:	4b11      	ldr	r3, [pc, #68]	@ (800271c <MX_SPI2_Init+0x74>)
 80026d6:	2280      	movs	r2, #128	@ 0x80
 80026d8:	02d2      	lsls	r2, r2, #11
 80026da:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026dc:	4b0f      	ldr	r3, [pc, #60]	@ (800271c <MX_SPI2_Init+0x74>)
 80026de:	2200      	movs	r2, #0
 80026e0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026e2:	4b0e      	ldr	r3, [pc, #56]	@ (800271c <MX_SPI2_Init+0x74>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80026e8:	4b0c      	ldr	r3, [pc, #48]	@ (800271c <MX_SPI2_Init+0x74>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026ee:	4b0b      	ldr	r3, [pc, #44]	@ (800271c <MX_SPI2_Init+0x74>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80026f4:	4b09      	ldr	r3, [pc, #36]	@ (800271c <MX_SPI2_Init+0x74>)
 80026f6:	2207      	movs	r2, #7
 80026f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80026fa:	4b08      	ldr	r3, [pc, #32]	@ (800271c <MX_SPI2_Init+0x74>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002700:	4b06      	ldr	r3, [pc, #24]	@ (800271c <MX_SPI2_Init+0x74>)
 8002702:	2208      	movs	r2, #8
 8002704:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002706:	4b05      	ldr	r3, [pc, #20]	@ (800271c <MX_SPI2_Init+0x74>)
 8002708:	0018      	movs	r0, r3
 800270a:	f001 feb3 	bl	8004474 <HAL_SPI_Init>
 800270e:	1e03      	subs	r3, r0, #0
 8002710:	d001      	beq.n	8002716 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002712:	f000 f97f 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */
}
 8002716:	46c0      	nop			@ (mov r8, r8)
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	2000015c 	.word	0x2000015c
 8002720:	40003800 	.word	0x40003800

08002724 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002728:	4b14      	ldr	r3, [pc, #80]	@ (800277c <MX_USART1_UART_Init+0x58>)
 800272a:	4a15      	ldr	r2, [pc, #84]	@ (8002780 <MX_USART1_UART_Init+0x5c>)
 800272c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800272e:	4b13      	ldr	r3, [pc, #76]	@ (800277c <MX_USART1_UART_Init+0x58>)
 8002730:	2296      	movs	r2, #150	@ 0x96
 8002732:	0212      	lsls	r2, r2, #8
 8002734:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002736:	4b11      	ldr	r3, [pc, #68]	@ (800277c <MX_USART1_UART_Init+0x58>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800273c:	4b0f      	ldr	r3, [pc, #60]	@ (800277c <MX_USART1_UART_Init+0x58>)
 800273e:	2200      	movs	r2, #0
 8002740:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002742:	4b0e      	ldr	r3, [pc, #56]	@ (800277c <MX_USART1_UART_Init+0x58>)
 8002744:	2200      	movs	r2, #0
 8002746:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002748:	4b0c      	ldr	r3, [pc, #48]	@ (800277c <MX_USART1_UART_Init+0x58>)
 800274a:	220c      	movs	r2, #12
 800274c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800274e:	4b0b      	ldr	r3, [pc, #44]	@ (800277c <MX_USART1_UART_Init+0x58>)
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002754:	4b09      	ldr	r3, [pc, #36]	@ (800277c <MX_USART1_UART_Init+0x58>)
 8002756:	2200      	movs	r2, #0
 8002758:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800275a:	4b08      	ldr	r3, [pc, #32]	@ (800277c <MX_USART1_UART_Init+0x58>)
 800275c:	2200      	movs	r2, #0
 800275e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002760:	4b06      	ldr	r3, [pc, #24]	@ (800277c <MX_USART1_UART_Init+0x58>)
 8002762:	2200      	movs	r2, #0
 8002764:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002766:	4b05      	ldr	r3, [pc, #20]	@ (800277c <MX_USART1_UART_Init+0x58>)
 8002768:	0018      	movs	r0, r3
 800276a:	f002 fa1d 	bl	8004ba8 <HAL_UART_Init>
 800276e:	1e03      	subs	r3, r0, #0
 8002770:	d001      	beq.n	8002776 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002772:	f000 f94f 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8002776:	46c0      	nop			@ (mov r8, r8)
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	200001c0 	.word	0x200001c0
 8002780:	40013800 	.word	0x40013800

08002784 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b089      	sub	sp, #36	@ 0x24
 8002788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278a:	240c      	movs	r4, #12
 800278c:	193b      	adds	r3, r7, r4
 800278e:	0018      	movs	r0, r3
 8002790:	2314      	movs	r3, #20
 8002792:	001a      	movs	r2, r3
 8002794:	2100      	movs	r1, #0
 8002796:	f003 ffab 	bl	80066f0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800279a:	4b4f      	ldr	r3, [pc, #316]	@ (80028d8 <MX_GPIO_Init+0x154>)
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	4b4e      	ldr	r3, [pc, #312]	@ (80028d8 <MX_GPIO_Init+0x154>)
 80027a0:	2180      	movs	r1, #128	@ 0x80
 80027a2:	03c9      	lsls	r1, r1, #15
 80027a4:	430a      	orrs	r2, r1
 80027a6:	615a      	str	r2, [r3, #20]
 80027a8:	4b4b      	ldr	r3, [pc, #300]	@ (80028d8 <MX_GPIO_Init+0x154>)
 80027aa:	695a      	ldr	r2, [r3, #20]
 80027ac:	2380      	movs	r3, #128	@ 0x80
 80027ae:	03db      	lsls	r3, r3, #15
 80027b0:	4013      	ands	r3, r2
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b6:	4b48      	ldr	r3, [pc, #288]	@ (80028d8 <MX_GPIO_Init+0x154>)
 80027b8:	695a      	ldr	r2, [r3, #20]
 80027ba:	4b47      	ldr	r3, [pc, #284]	@ (80028d8 <MX_GPIO_Init+0x154>)
 80027bc:	2180      	movs	r1, #128	@ 0x80
 80027be:	0289      	lsls	r1, r1, #10
 80027c0:	430a      	orrs	r2, r1
 80027c2:	615a      	str	r2, [r3, #20]
 80027c4:	4b44      	ldr	r3, [pc, #272]	@ (80028d8 <MX_GPIO_Init+0x154>)
 80027c6:	695a      	ldr	r2, [r3, #20]
 80027c8:	2380      	movs	r3, #128	@ 0x80
 80027ca:	029b      	lsls	r3, r3, #10
 80027cc:	4013      	ands	r3, r2
 80027ce:	607b      	str	r3, [r7, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d2:	4b41      	ldr	r3, [pc, #260]	@ (80028d8 <MX_GPIO_Init+0x154>)
 80027d4:	695a      	ldr	r2, [r3, #20]
 80027d6:	4b40      	ldr	r3, [pc, #256]	@ (80028d8 <MX_GPIO_Init+0x154>)
 80027d8:	2180      	movs	r1, #128	@ 0x80
 80027da:	02c9      	lsls	r1, r1, #11
 80027dc:	430a      	orrs	r2, r1
 80027de:	615a      	str	r2, [r3, #20]
 80027e0:	4b3d      	ldr	r3, [pc, #244]	@ (80028d8 <MX_GPIO_Init+0x154>)
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	2380      	movs	r3, #128	@ 0x80
 80027e6:	02db      	lsls	r3, r3, #11
 80027e8:	4013      	ands	r3, r2
 80027ea:	603b      	str	r3, [r7, #0]
 80027ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, E5_NRST_Pin | DW_NSS_Pin, GPIO_PIN_RESET);
 80027ee:	2390      	movs	r3, #144	@ 0x90
 80027f0:	05db      	lsls	r3, r3, #23
 80027f2:	2200      	movs	r2, #0
 80027f4:	2111      	movs	r1, #17
 80027f6:	0018      	movs	r0, r3
 80027f8:	f001 f813 	bl	8003822 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCREEN_EN_Pin | SD_CS_Pin | WAKE_Pin | TFT_DC_Pin | TFT_RST_Pin, GPIO_PIN_RESET);
 80027fc:	4937      	ldr	r1, [pc, #220]	@ (80028dc <MX_GPIO_Init+0x158>)
 80027fe:	4b38      	ldr	r3, [pc, #224]	@ (80028e0 <MX_GPIO_Init+0x15c>)
 8002800:	2200      	movs	r2, #0
 8002802:	0018      	movs	r0, r3
 8002804:	f001 f80d 	bl	8003822 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : E5_NRST_Pin */
  GPIO_InitStruct.Pin = E5_NRST_Pin;
 8002808:	193b      	adds	r3, r7, r4
 800280a:	2201      	movs	r2, #1
 800280c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800280e:	193b      	adds	r3, r7, r4
 8002810:	2201      	movs	r2, #1
 8002812:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002814:	193b      	adds	r3, r7, r4
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281a:	193b      	adds	r3, r7, r4
 800281c:	2200      	movs	r2, #0
 800281e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(E5_NRST_GPIO_Port, &GPIO_InitStruct);
 8002820:	193a      	adds	r2, r7, r4
 8002822:	2390      	movs	r3, #144	@ 0x90
 8002824:	05db      	lsls	r3, r3, #23
 8002826:	0011      	movs	r1, r2
 8002828:	0018      	movs	r0, r3
 800282a:	f000 fe65 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 800282e:	193b      	adds	r3, r7, r4
 8002830:	2210      	movs	r2, #16
 8002832:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002834:	193b      	adds	r3, r7, r4
 8002836:	2201      	movs	r2, #1
 8002838:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283a:	193b      	adds	r3, r7, r4
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002840:	193b      	adds	r3, r7, r4
 8002842:	2203      	movs	r2, #3
 8002844:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 8002846:	193a      	adds	r2, r7, r4
 8002848:	2390      	movs	r3, #144	@ 0x90
 800284a:	05db      	lsls	r3, r3, #23
 800284c:	0011      	movs	r1, r2
 800284e:	0018      	movs	r0, r3
 8002850:	f000 fe52 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCREEN_EN_Pin SD_CS_Pin WAKE_Pin TFT_DC_Pin
                           TFT_RST_Pin */
  GPIO_InitStruct.Pin = SCREEN_EN_Pin | SD_CS_Pin | WAKE_Pin | TFT_DC_Pin | TFT_RST_Pin;
 8002854:	193b      	adds	r3, r7, r4
 8002856:	4a21      	ldr	r2, [pc, #132]	@ (80028dc <MX_GPIO_Init+0x158>)
 8002858:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800285a:	193b      	adds	r3, r7, r4
 800285c:	2201      	movs	r2, #1
 800285e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	193b      	adds	r3, r7, r4
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002866:	193b      	adds	r3, r7, r4
 8002868:	2200      	movs	r2, #0
 800286a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800286c:	193b      	adds	r3, r7, r4
 800286e:	4a1c      	ldr	r2, [pc, #112]	@ (80028e0 <MX_GPIO_Init+0x15c>)
 8002870:	0019      	movs	r1, r3
 8002872:	0010      	movs	r0, r2
 8002874:	f000 fe40 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_DISP_Pin */
  GPIO_InitStruct.Pin = BTN_DISP_Pin;
 8002878:	0021      	movs	r1, r4
 800287a:	187b      	adds	r3, r7, r1
 800287c:	2280      	movs	r2, #128	@ 0x80
 800287e:	0192      	lsls	r2, r2, #6
 8002880:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002882:	000c      	movs	r4, r1
 8002884:	193b      	adds	r3, r7, r4
 8002886:	2200      	movs	r2, #0
 8002888:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	193b      	adds	r3, r7, r4
 800288c:	2200      	movs	r2, #0
 800288e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_DISP_GPIO_Port, &GPIO_InitStruct);
 8002890:	193b      	adds	r3, r7, r4
 8002892:	4a13      	ldr	r2, [pc, #76]	@ (80028e0 <MX_GPIO_Init+0x15c>)
 8002894:	0019      	movs	r1, r3
 8002896:	0010      	movs	r0, r2
 8002898:	f000 fe2e 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 800289c:	0021      	movs	r1, r4
 800289e:	187b      	adds	r3, r7, r1
 80028a0:	2220      	movs	r2, #32
 80028a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028a4:	187b      	adds	r3, r7, r1
 80028a6:	2288      	movs	r2, #136	@ 0x88
 80028a8:	0352      	lsls	r2, r2, #13
 80028aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028ac:	187b      	adds	r3, r7, r1
 80028ae:	2202      	movs	r2, #2
 80028b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 80028b2:	187b      	adds	r3, r7, r1
 80028b4:	4a0a      	ldr	r2, [pc, #40]	@ (80028e0 <MX_GPIO_Init+0x15c>)
 80028b6:	0019      	movs	r1, r3
 80028b8:	0010      	movs	r0, r2
 80028ba:	f000 fe1d 	bl	80034f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	2100      	movs	r1, #0
 80028c2:	2007      	movs	r0, #7
 80028c4:	f000 fde6 	bl	8003494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80028c8:	2007      	movs	r0, #7
 80028ca:	f000 fdf8 	bl	80034be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80028ce:	46c0      	nop			@ (mov r8, r8)
 80028d0:	46bd      	mov	sp, r7
 80028d2:	b009      	add	sp, #36	@ 0x24
 80028d4:	bd90      	pop	{r4, r7, pc}
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	40021000 	.word	0x40021000
 80028dc:	00000b44 	.word	0x00000b44
 80028e0:	48000400 	.word	0x48000400

080028e4 <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_tx_timestamp_u64(void)
{
 80028e4:	b5b0      	push	{r4, r5, r7, lr}
 80028e6:	b08a      	sub	sp, #40	@ 0x28
 80028e8:	af00      	add	r7, sp, #0
  uint8 ts_tab[5];
  uint64 ts = 0;
 80028ea:	2200      	movs	r2, #0
 80028ec:	2300      	movs	r3, #0
 80028ee:	623a      	str	r2, [r7, #32]
 80028f0:	627b      	str	r3, [r7, #36]	@ 0x24
  int i;
  dwt_readtxtimestamp(ts_tab);
 80028f2:	2314      	movs	r3, #20
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	0018      	movs	r0, r3
 80028f8:	f003 f8ef 	bl	8005ada <dwt_readtxtimestamp>
  for (i = 4; i >= 0; i--)
 80028fc:	2304      	movs	r3, #4
 80028fe:	61fb      	str	r3, [r7, #28]
 8002900:	e020      	b.n	8002944 <get_tx_timestamp_u64+0x60>
  {
    ts <<= 8;
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	0e1b      	lsrs	r3, r3, #24
 8002906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002908:	0215      	lsls	r5, r2, #8
 800290a:	431d      	orrs	r5, r3
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	021c      	lsls	r4, r3, #8
 8002910:	623c      	str	r4, [r7, #32]
 8002912:	627d      	str	r5, [r7, #36]	@ 0x24
    ts |= ts_tab[i];
 8002914:	2314      	movs	r3, #20
 8002916:	18fa      	adds	r2, r7, r3
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	18d3      	adds	r3, r2, r3
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	68b9      	ldr	r1, [r7, #8]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	0008      	movs	r0, r1
 800292c:	4318      	orrs	r0, r3
 800292e:	6038      	str	r0, [r7, #0]
 8002930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002932:	431a      	orrs	r2, r3
 8002934:	607a      	str	r2, [r7, #4]
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	623a      	str	r2, [r7, #32]
 800293c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 4; i >= 0; i--)
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	3b01      	subs	r3, #1
 8002942:	61fb      	str	r3, [r7, #28]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	2b00      	cmp	r3, #0
 8002948:	dadb      	bge.n	8002902 <get_tx_timestamp_u64+0x1e>
  }
  return ts;
 800294a:	6a3a      	ldr	r2, [r7, #32]
 800294c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800294e:	0010      	movs	r0, r2
 8002950:	0019      	movs	r1, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	b00a      	add	sp, #40	@ 0x28
 8002956:	bdb0      	pop	{r4, r5, r7, pc}

08002958 <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_rx_timestamp_u64(void)
{
 8002958:	b5b0      	push	{r4, r5, r7, lr}
 800295a:	b08a      	sub	sp, #40	@ 0x28
 800295c:	af00      	add	r7, sp, #0
  uint8 ts_tab[5];
  uint64 ts = 0;
 800295e:	2200      	movs	r2, #0
 8002960:	2300      	movs	r3, #0
 8002962:	623a      	str	r2, [r7, #32]
 8002964:	627b      	str	r3, [r7, #36]	@ 0x24
  int i;
  dwt_readrxtimestamp(ts_tab);
 8002966:	2314      	movs	r3, #20
 8002968:	18fb      	adds	r3, r7, r3
 800296a:	0018      	movs	r0, r3
 800296c:	f003 f8c3 	bl	8005af6 <dwt_readrxtimestamp>
  for (i = 4; i >= 0; i--)
 8002970:	2304      	movs	r3, #4
 8002972:	61fb      	str	r3, [r7, #28]
 8002974:	e020      	b.n	80029b8 <get_rx_timestamp_u64+0x60>
  {
    ts <<= 8;
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	0e1b      	lsrs	r3, r3, #24
 800297a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800297c:	0215      	lsls	r5, r2, #8
 800297e:	431d      	orrs	r5, r3
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	021c      	lsls	r4, r3, #8
 8002984:	623c      	str	r4, [r7, #32]
 8002986:	627d      	str	r5, [r7, #36]	@ 0x24
    ts |= ts_tab[i];
 8002988:	2314      	movs	r3, #20
 800298a:	18fa      	adds	r2, r7, r3
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	18d3      	adds	r3, r2, r3
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	68b9      	ldr	r1, [r7, #8]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	0008      	movs	r0, r1
 80029a0:	4318      	orrs	r0, r3
 80029a2:	6038      	str	r0, [r7, #0]
 80029a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a6:	431a      	orrs	r2, r3
 80029a8:	607a      	str	r2, [r7, #4]
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	623a      	str	r2, [r7, #32]
 80029b0:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 4; i >= 0; i--)
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	3b01      	subs	r3, #1
 80029b6:	61fb      	str	r3, [r7, #28]
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	dadb      	bge.n	8002976 <get_rx_timestamp_u64+0x1e>
  }
  return ts;
 80029be:	6a3a      	ldr	r2, [r7, #32]
 80029c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80029c2:	0010      	movs	r0, r2
 80029c4:	0019      	movs	r1, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	b00a      	add	sp, #40	@ 0x28
 80029ca:	bdb0      	pop	{r4, r5, r7, pc}

080029cc <final_msg_get_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
static void final_msg_get_ts(const uint8 *ts_field, uint32 *ts)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  int i;
  *ts = 0;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
  for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	e010      	b.n	8002a04 <final_msg_get_ts+0x38>
  {
    *ts += ts_field[i] << (i * 8);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	188a      	adds	r2, r1, r2
 80029ec:	7812      	ldrb	r2, [r2, #0]
 80029ee:	0011      	movs	r1, r2
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	00d2      	lsls	r2, r2, #3
 80029f4:	4091      	lsls	r1, r2
 80029f6:	000a      	movs	r2, r1
 80029f8:	189a      	adds	r2, r3, r2
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	3301      	adds	r3, #1
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	ddeb      	ble.n	80029e2 <final_msg_get_ts+0x16>
  }
}
 8002a0a:	46c0      	nop			@ (mov r8, r8)
 8002a0c:	46c0      	nop			@ (mov r8, r8)
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b004      	add	sp, #16
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a18:	b672      	cpsid	i
}
 8002a1a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a1c:	46c0      	nop			@ (mov r8, r8)
 8002a1e:	e7fd      	b.n	8002a1c <Error_Handler+0x8>

08002a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a26:	4b13      	ldr	r3, [pc, #76]	@ (8002a74 <HAL_MspInit+0x54>)
 8002a28:	699a      	ldr	r2, [r3, #24]
 8002a2a:	4b12      	ldr	r3, [pc, #72]	@ (8002a74 <HAL_MspInit+0x54>)
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	619a      	str	r2, [r3, #24]
 8002a32:	4b10      	ldr	r3, [pc, #64]	@ (8002a74 <HAL_MspInit+0x54>)
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	2201      	movs	r2, #1
 8002a38:	4013      	ands	r3, r2
 8002a3a:	607b      	str	r3, [r7, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a74 <HAL_MspInit+0x54>)
 8002a40:	69da      	ldr	r2, [r3, #28]
 8002a42:	4b0c      	ldr	r3, [pc, #48]	@ (8002a74 <HAL_MspInit+0x54>)
 8002a44:	2180      	movs	r1, #128	@ 0x80
 8002a46:	0549      	lsls	r1, r1, #21
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	61da      	str	r2, [r3, #28]
 8002a4c:	4b09      	ldr	r3, [pc, #36]	@ (8002a74 <HAL_MspInit+0x54>)
 8002a4e:	69da      	ldr	r2, [r3, #28]
 8002a50:	2380      	movs	r3, #128	@ 0x80
 8002a52:	055b      	lsls	r3, r3, #21
 8002a54:	4013      	ands	r3, r2
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	2004      	movs	r0, #4
 8002a60:	f000 fd18 	bl	8003494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8002a64:	2004      	movs	r0, #4
 8002a66:	f000 fd2a 	bl	80034be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a6a:	46c0      	nop			@ (mov r8, r8)
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b002      	add	sp, #8
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	46c0      	nop			@ (mov r8, r8)
 8002a74:	40021000 	.word	0x40021000

08002a78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a78:	b590      	push	{r4, r7, lr}
 8002a7a:	b08b      	sub	sp, #44	@ 0x2c
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a80:	2414      	movs	r4, #20
 8002a82:	193b      	adds	r3, r7, r4
 8002a84:	0018      	movs	r0, r3
 8002a86:	2314      	movs	r3, #20
 8002a88:	001a      	movs	r2, r3
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	f003 fe30 	bl	80066f0 <memset>
  if(hadc->Instance==ADC1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a18      	ldr	r2, [pc, #96]	@ (8002af8 <HAL_ADC_MspInit+0x80>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d12a      	bne.n	8002af0 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a9a:	4b18      	ldr	r3, [pc, #96]	@ (8002afc <HAL_ADC_MspInit+0x84>)
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	4b17      	ldr	r3, [pc, #92]	@ (8002afc <HAL_ADC_MspInit+0x84>)
 8002aa0:	2180      	movs	r1, #128	@ 0x80
 8002aa2:	0089      	lsls	r1, r1, #2
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	619a      	str	r2, [r3, #24]
 8002aa8:	4b14      	ldr	r3, [pc, #80]	@ (8002afc <HAL_ADC_MspInit+0x84>)
 8002aaa:	699a      	ldr	r2, [r3, #24]
 8002aac:	2380      	movs	r3, #128	@ 0x80
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab6:	4b11      	ldr	r3, [pc, #68]	@ (8002afc <HAL_ADC_MspInit+0x84>)
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	4b10      	ldr	r3, [pc, #64]	@ (8002afc <HAL_ADC_MspInit+0x84>)
 8002abc:	2180      	movs	r1, #128	@ 0x80
 8002abe:	02c9      	lsls	r1, r1, #11
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	615a      	str	r2, [r3, #20]
 8002ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8002afc <HAL_ADC_MspInit+0x84>)
 8002ac6:	695a      	ldr	r2, [r3, #20]
 8002ac8:	2380      	movs	r3, #128	@ 0x80
 8002aca:	02db      	lsls	r3, r3, #11
 8002acc:	4013      	ands	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = VBATT_ADC_Pin;
 8002ad2:	193b      	adds	r3, r7, r4
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ad8:	193b      	adds	r3, r7, r4
 8002ada:	2203      	movs	r2, #3
 8002adc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	193b      	adds	r3, r7, r4
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBATT_ADC_GPIO_Port, &GPIO_InitStruct);
 8002ae4:	193b      	adds	r3, r7, r4
 8002ae6:	4a06      	ldr	r2, [pc, #24]	@ (8002b00 <HAL_ADC_MspInit+0x88>)
 8002ae8:	0019      	movs	r1, r3
 8002aea:	0010      	movs	r0, r2
 8002aec:	f000 fd04 	bl	80034f8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002af0:	46c0      	nop			@ (mov r8, r8)
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b00b      	add	sp, #44	@ 0x2c
 8002af6:	bd90      	pop	{r4, r7, pc}
 8002af8:	40012400 	.word	0x40012400
 8002afc:	40021000 	.word	0x40021000
 8002b00:	48000400 	.word	0x48000400

08002b04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b04:	b590      	push	{r4, r7, lr}
 8002b06:	b08d      	sub	sp, #52	@ 0x34
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0c:	241c      	movs	r4, #28
 8002b0e:	193b      	adds	r3, r7, r4
 8002b10:	0018      	movs	r0, r3
 8002b12:	2314      	movs	r3, #20
 8002b14:	001a      	movs	r2, r3
 8002b16:	2100      	movs	r1, #0
 8002b18:	f003 fdea 	bl	80066f0 <memset>
  if(hspi->Instance==SPI1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a45      	ldr	r2, [pc, #276]	@ (8002c38 <HAL_SPI_MspInit+0x134>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d133      	bne.n	8002b8e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b26:	4b45      	ldr	r3, [pc, #276]	@ (8002c3c <HAL_SPI_MspInit+0x138>)
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	4b44      	ldr	r3, [pc, #272]	@ (8002c3c <HAL_SPI_MspInit+0x138>)
 8002b2c:	2180      	movs	r1, #128	@ 0x80
 8002b2e:	0149      	lsls	r1, r1, #5
 8002b30:	430a      	orrs	r2, r1
 8002b32:	619a      	str	r2, [r3, #24]
 8002b34:	4b41      	ldr	r3, [pc, #260]	@ (8002c3c <HAL_SPI_MspInit+0x138>)
 8002b36:	699a      	ldr	r2, [r3, #24]
 8002b38:	2380      	movs	r3, #128	@ 0x80
 8002b3a:	015b      	lsls	r3, r3, #5
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
 8002b40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b42:	4b3e      	ldr	r3, [pc, #248]	@ (8002c3c <HAL_SPI_MspInit+0x138>)
 8002b44:	695a      	ldr	r2, [r3, #20]
 8002b46:	4b3d      	ldr	r3, [pc, #244]	@ (8002c3c <HAL_SPI_MspInit+0x138>)
 8002b48:	2180      	movs	r1, #128	@ 0x80
 8002b4a:	0289      	lsls	r1, r1, #10
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	615a      	str	r2, [r3, #20]
 8002b50:	4b3a      	ldr	r3, [pc, #232]	@ (8002c3c <HAL_SPI_MspInit+0x138>)
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	2380      	movs	r3, #128	@ 0x80
 8002b56:	029b      	lsls	r3, r3, #10
 8002b58:	4013      	ands	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DW_SCK_Pin|DW_MISO_Pin|DW_MOSI_Pin;
 8002b5e:	0021      	movs	r1, r4
 8002b60:	187b      	adds	r3, r7, r1
 8002b62:	22e0      	movs	r2, #224	@ 0xe0
 8002b64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b66:	187b      	adds	r3, r7, r1
 8002b68:	2202      	movs	r2, #2
 8002b6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	187b      	adds	r3, r7, r1
 8002b6e:	2200      	movs	r2, #0
 8002b70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b72:	187b      	adds	r3, r7, r1
 8002b74:	2203      	movs	r2, #3
 8002b76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002b78:	187b      	adds	r3, r7, r1
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7e:	187a      	adds	r2, r7, r1
 8002b80:	2390      	movs	r3, #144	@ 0x90
 8002b82:	05db      	lsls	r3, r3, #23
 8002b84:	0011      	movs	r1, r2
 8002b86:	0018      	movs	r0, r3
 8002b88:	f000 fcb6 	bl	80034f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002b8c:	e04f      	b.n	8002c2e <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI2)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a2b      	ldr	r2, [pc, #172]	@ (8002c40 <HAL_SPI_MspInit+0x13c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d14a      	bne.n	8002c2e <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b98:	4b28      	ldr	r3, [pc, #160]	@ (8002c3c <HAL_SPI_MspInit+0x138>)
 8002b9a:	69da      	ldr	r2, [r3, #28]
 8002b9c:	4b27      	ldr	r3, [pc, #156]	@ (8002c3c <HAL_SPI_MspInit+0x138>)
 8002b9e:	2180      	movs	r1, #128	@ 0x80
 8002ba0:	01c9      	lsls	r1, r1, #7
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	61da      	str	r2, [r3, #28]
 8002ba6:	4b25      	ldr	r3, [pc, #148]	@ (8002c3c <HAL_SPI_MspInit+0x138>)
 8002ba8:	69da      	ldr	r2, [r3, #28]
 8002baa:	2380      	movs	r3, #128	@ 0x80
 8002bac:	01db      	lsls	r3, r3, #7
 8002bae:	4013      	ands	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb4:	4b21      	ldr	r3, [pc, #132]	@ (8002c3c <HAL_SPI_MspInit+0x138>)
 8002bb6:	695a      	ldr	r2, [r3, #20]
 8002bb8:	4b20      	ldr	r3, [pc, #128]	@ (8002c3c <HAL_SPI_MspInit+0x138>)
 8002bba:	2180      	movs	r1, #128	@ 0x80
 8002bbc:	02c9      	lsls	r1, r1, #11
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	615a      	str	r2, [r3, #20]
 8002bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c3c <HAL_SPI_MspInit+0x138>)
 8002bc4:	695a      	ldr	r2, [r3, #20]
 8002bc6:	2380      	movs	r3, #128	@ 0x80
 8002bc8:	02db      	lsls	r3, r3, #11
 8002bca:	4013      	ands	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bd0:	211c      	movs	r1, #28
 8002bd2:	187b      	adds	r3, r7, r1
 8002bd4:	2280      	movs	r2, #128	@ 0x80
 8002bd6:	00d2      	lsls	r2, r2, #3
 8002bd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bda:	000c      	movs	r4, r1
 8002bdc:	193b      	adds	r3, r7, r4
 8002bde:	2202      	movs	r2, #2
 8002be0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be2:	193b      	adds	r3, r7, r4
 8002be4:	2200      	movs	r2, #0
 8002be6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002be8:	193b      	adds	r3, r7, r4
 8002bea:	2203      	movs	r2, #3
 8002bec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002bee:	193b      	adds	r3, r7, r4
 8002bf0:	2205      	movs	r2, #5
 8002bf2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf4:	193b      	adds	r3, r7, r4
 8002bf6:	4a13      	ldr	r2, [pc, #76]	@ (8002c44 <HAL_SPI_MspInit+0x140>)
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	0010      	movs	r0, r2
 8002bfc:	f000 fc7c 	bl	80034f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TFT_CS_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8002c00:	0021      	movs	r1, r4
 8002c02:	187b      	adds	r3, r7, r1
 8002c04:	22d0      	movs	r2, #208	@ 0xd0
 8002c06:	0212      	lsls	r2, r2, #8
 8002c08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0a:	187b      	adds	r3, r7, r1
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c10:	187b      	adds	r3, r7, r1
 8002c12:	2200      	movs	r2, #0
 8002c14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c16:	187b      	adds	r3, r7, r1
 8002c18:	2203      	movs	r2, #3
 8002c1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002c1c:	187b      	adds	r3, r7, r1
 8002c1e:	2200      	movs	r2, #0
 8002c20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c22:	187b      	adds	r3, r7, r1
 8002c24:	4a07      	ldr	r2, [pc, #28]	@ (8002c44 <HAL_SPI_MspInit+0x140>)
 8002c26:	0019      	movs	r1, r3
 8002c28:	0010      	movs	r0, r2
 8002c2a:	f000 fc65 	bl	80034f8 <HAL_GPIO_Init>
}
 8002c2e:	46c0      	nop			@ (mov r8, r8)
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b00d      	add	sp, #52	@ 0x34
 8002c34:	bd90      	pop	{r4, r7, pc}
 8002c36:	46c0      	nop			@ (mov r8, r8)
 8002c38:	40013000 	.word	0x40013000
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40003800 	.word	0x40003800
 8002c44:	48000400 	.word	0x48000400

08002c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c48:	b590      	push	{r4, r7, lr}
 8002c4a:	b08b      	sub	sp, #44	@ 0x2c
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c50:	2414      	movs	r4, #20
 8002c52:	193b      	adds	r3, r7, r4
 8002c54:	0018      	movs	r0, r3
 8002c56:	2314      	movs	r3, #20
 8002c58:	001a      	movs	r2, r3
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	f003 fd48 	bl	80066f0 <memset>
  if(huart->Instance==USART1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1d      	ldr	r2, [pc, #116]	@ (8002cdc <HAL_UART_MspInit+0x94>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d133      	bne.n	8002cd2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce0 <HAL_UART_MspInit+0x98>)
 8002c6c:	699a      	ldr	r2, [r3, #24]
 8002c6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ce0 <HAL_UART_MspInit+0x98>)
 8002c70:	2180      	movs	r1, #128	@ 0x80
 8002c72:	01c9      	lsls	r1, r1, #7
 8002c74:	430a      	orrs	r2, r1
 8002c76:	619a      	str	r2, [r3, #24]
 8002c78:	4b19      	ldr	r3, [pc, #100]	@ (8002ce0 <HAL_UART_MspInit+0x98>)
 8002c7a:	699a      	ldr	r2, [r3, #24]
 8002c7c:	2380      	movs	r3, #128	@ 0x80
 8002c7e:	01db      	lsls	r3, r3, #7
 8002c80:	4013      	ands	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c86:	4b16      	ldr	r3, [pc, #88]	@ (8002ce0 <HAL_UART_MspInit+0x98>)
 8002c88:	695a      	ldr	r2, [r3, #20]
 8002c8a:	4b15      	ldr	r3, [pc, #84]	@ (8002ce0 <HAL_UART_MspInit+0x98>)
 8002c8c:	2180      	movs	r1, #128	@ 0x80
 8002c8e:	0289      	lsls	r1, r1, #10
 8002c90:	430a      	orrs	r2, r1
 8002c92:	615a      	str	r2, [r3, #20]
 8002c94:	4b12      	ldr	r3, [pc, #72]	@ (8002ce0 <HAL_UART_MspInit+0x98>)
 8002c96:	695a      	ldr	r2, [r3, #20]
 8002c98:	2380      	movs	r3, #128	@ 0x80
 8002c9a:	029b      	lsls	r3, r3, #10
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ca2:	193b      	adds	r3, r7, r4
 8002ca4:	22c0      	movs	r2, #192	@ 0xc0
 8002ca6:	00d2      	lsls	r2, r2, #3
 8002ca8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002caa:	0021      	movs	r1, r4
 8002cac:	187b      	adds	r3, r7, r1
 8002cae:	2202      	movs	r2, #2
 8002cb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	187b      	adds	r3, r7, r1
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cb8:	187b      	adds	r3, r7, r1
 8002cba:	2203      	movs	r2, #3
 8002cbc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002cbe:	187b      	adds	r3, r7, r1
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc4:	187a      	adds	r2, r7, r1
 8002cc6:	2390      	movs	r3, #144	@ 0x90
 8002cc8:	05db      	lsls	r3, r3, #23
 8002cca:	0011      	movs	r1, r2
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f000 fc13 	bl	80034f8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002cd2:	46c0      	nop			@ (mov r8, r8)
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b00b      	add	sp, #44	@ 0x2c
 8002cd8:	bd90      	pop	{r4, r7, pc}
 8002cda:	46c0      	nop			@ (mov r8, r8)
 8002cdc:	40013800 	.word	0x40013800
 8002ce0:	40021000 	.word	0x40021000

08002ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ce8:	46c0      	nop			@ (mov r8, r8)
 8002cea:	e7fd      	b.n	8002ce8 <NMI_Handler+0x4>

08002cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cf0:	46c0      	nop			@ (mov r8, r8)
 8002cf2:	e7fd      	b.n	8002cf0 <HardFault_Handler+0x4>

08002cf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002cf8:	46c0      	nop			@ (mov r8, r8)
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d02:	46c0      	nop			@ (mov r8, r8)
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d0c:	f000 f888 	bl	8002e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d10:	46c0      	nop			@ (mov r8, r8)
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupts.
  */
void RCC_CRS_IRQHandler(void)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 8002d1a:	46c0      	nop			@ (mov r8, r8)
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQn_Pin);
 8002d24:	2020      	movs	r0, #32
 8002d26:	f000 fd99 	bl	800385c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002d2a:	46c0      	nop			@ (mov r8, r8)
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002d34:	46c0      	nop			@ (mov r8, r8)
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d3c:	480d      	ldr	r0, [pc, #52]	@ (8002d74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d3e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d40:	f7ff fff6 	bl	8002d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d44:	480c      	ldr	r0, [pc, #48]	@ (8002d78 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d46:	490d      	ldr	r1, [pc, #52]	@ (8002d7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d48:	4a0d      	ldr	r2, [pc, #52]	@ (8002d80 <LoopForever+0xe>)
  movs r3, #0
 8002d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d4c:	e002      	b.n	8002d54 <LoopCopyDataInit>

08002d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d52:	3304      	adds	r3, #4

08002d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d58:	d3f9      	bcc.n	8002d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d5c:	4c0a      	ldr	r4, [pc, #40]	@ (8002d88 <LoopForever+0x16>)
  movs r3, #0
 8002d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d60:	e001      	b.n	8002d66 <LoopFillZerobss>

08002d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d64:	3204      	adds	r2, #4

08002d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d68:	d3fb      	bcc.n	8002d62 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d6a:	f003 fcc9 	bl	8006700 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d6e:	f7ff f9bb 	bl	80020e8 <main>

08002d72 <LoopForever>:

LoopForever:
    b LoopForever
 8002d72:	e7fe      	b.n	8002d72 <LoopForever>
  ldr   r0, =_estack
 8002d74:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d7c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8002d80:	080068d0 	.word	0x080068d0
  ldr r2, =_sbss
 8002d84:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8002d88:	20000288 	.word	0x20000288

08002d8c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d8c:	e7fe      	b.n	8002d8c <ADC1_COMP_IRQHandler>
	...

08002d90 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d94:	4b07      	ldr	r3, [pc, #28]	@ (8002db4 <HAL_Init+0x24>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4b06      	ldr	r3, [pc, #24]	@ (8002db4 <HAL_Init+0x24>)
 8002d9a:	2110      	movs	r1, #16
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002da0:	2003      	movs	r0, #3
 8002da2:	f000 f809 	bl	8002db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002da6:	f7ff fe3b 	bl	8002a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	0018      	movs	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	46c0      	nop			@ (mov r8, r8)
 8002db4:	40022000 	.word	0x40022000

08002db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db8:	b590      	push	{r4, r7, lr}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dc0:	4b14      	ldr	r3, [pc, #80]	@ (8002e14 <HAL_InitTick+0x5c>)
 8002dc2:	681c      	ldr	r4, [r3, #0]
 8002dc4:	4b14      	ldr	r3, [pc, #80]	@ (8002e18 <HAL_InitTick+0x60>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	0019      	movs	r1, r3
 8002dca:	23fa      	movs	r3, #250	@ 0xfa
 8002dcc:	0098      	lsls	r0, r3, #2
 8002dce:	f7fd f99b 	bl	8000108 <__udivsi3>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	0019      	movs	r1, r3
 8002dd6:	0020      	movs	r0, r4
 8002dd8:	f7fd f996 	bl	8000108 <__udivsi3>
 8002ddc:	0003      	movs	r3, r0
 8002dde:	0018      	movs	r0, r3
 8002de0:	f000 fb7d 	bl	80034de <HAL_SYSTICK_Config>
 8002de4:	1e03      	subs	r3, r0, #0
 8002de6:	d001      	beq.n	8002dec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e00f      	b.n	8002e0c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d80b      	bhi.n	8002e0a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	2301      	movs	r3, #1
 8002df6:	425b      	negs	r3, r3
 8002df8:	2200      	movs	r2, #0
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f000 fb4a 	bl	8003494 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e00:	4b06      	ldr	r3, [pc, #24]	@ (8002e1c <HAL_InitTick+0x64>)
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	e000      	b.n	8002e0c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
}
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b003      	add	sp, #12
 8002e12:	bd90      	pop	{r4, r7, pc}
 8002e14:	20000040 	.word	0x20000040
 8002e18:	20000048 	.word	0x20000048
 8002e1c:	20000044 	.word	0x20000044

08002e20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e24:	4b05      	ldr	r3, [pc, #20]	@ (8002e3c <HAL_IncTick+0x1c>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	001a      	movs	r2, r3
 8002e2a:	4b05      	ldr	r3, [pc, #20]	@ (8002e40 <HAL_IncTick+0x20>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	18d2      	adds	r2, r2, r3
 8002e30:	4b03      	ldr	r3, [pc, #12]	@ (8002e40 <HAL_IncTick+0x20>)
 8002e32:	601a      	str	r2, [r3, #0]
}
 8002e34:	46c0      	nop			@ (mov r8, r8)
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	46c0      	nop			@ (mov r8, r8)
 8002e3c:	20000048 	.word	0x20000048
 8002e40:	20000248 	.word	0x20000248

08002e44 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  return uwTick;
 8002e48:	4b02      	ldr	r3, [pc, #8]	@ (8002e54 <HAL_GetTick+0x10>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
}
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	46c0      	nop			@ (mov r8, r8)
 8002e54:	20000248 	.word	0x20000248

08002e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e60:	f7ff fff0 	bl	8002e44 <HAL_GetTick>
 8002e64:	0003      	movs	r3, r0
 8002e66:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	d005      	beq.n	8002e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e72:	4b0a      	ldr	r3, [pc, #40]	@ (8002e9c <HAL_Delay+0x44>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	001a      	movs	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	189b      	adds	r3, r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002e7e:	46c0      	nop			@ (mov r8, r8)
 8002e80:	f7ff ffe0 	bl	8002e44 <HAL_GetTick>
 8002e84:	0002      	movs	r2, r0
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d8f7      	bhi.n	8002e80 <HAL_Delay+0x28>
  {
  }
}
 8002e90:	46c0      	nop			@ (mov r8, r8)
 8002e92:	46c0      	nop			@ (mov r8, r8)
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b004      	add	sp, #16
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	46c0      	nop			@ (mov r8, r8)
 8002e9c:	20000048 	.word	0x20000048

08002ea0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ea8:	230f      	movs	r3, #15
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e125      	b.n	800310a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10a      	bne.n	8002edc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2234      	movs	r2, #52	@ 0x34
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f7ff fdce 	bl	8002a78 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee0:	2210      	movs	r2, #16
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d000      	beq.n	8002ee8 <HAL_ADC_Init+0x48>
 8002ee6:	e103      	b.n	80030f0 <HAL_ADC_Init+0x250>
 8002ee8:	230f      	movs	r3, #15
 8002eea:	18fb      	adds	r3, r7, r3
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d000      	beq.n	8002ef4 <HAL_ADC_Init+0x54>
 8002ef2:	e0fd      	b.n	80030f0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2204      	movs	r2, #4
 8002efc:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002efe:	d000      	beq.n	8002f02 <HAL_ADC_Init+0x62>
 8002f00:	e0f6      	b.n	80030f0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f06:	4a83      	ldr	r2, [pc, #524]	@ (8003114 <HAL_ADC_Init+0x274>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2203      	movs	r2, #3
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d112      	bne.n	8002f46 <HAL_ADC_Init+0xa6>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2201      	movs	r2, #1
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d009      	beq.n	8002f42 <HAL_ADC_Init+0xa2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	2380      	movs	r3, #128	@ 0x80
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	401a      	ands	r2, r3
 8002f3a:	2380      	movs	r3, #128	@ 0x80
 8002f3c:	021b      	lsls	r3, r3, #8
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d101      	bne.n	8002f46 <HAL_ADC_Init+0xa6>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <HAL_ADC_Init+0xa8>
 8002f46:	2300      	movs	r3, #0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d116      	bne.n	8002f7a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	2218      	movs	r2, #24
 8002f54:	4393      	bics	r3, r2
 8002f56:	0019      	movs	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	0899      	lsrs	r1, r3, #2
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4964      	ldr	r1, [pc, #400]	@ (8003118 <HAL_ADC_Init+0x278>)
 8002f86:	400a      	ands	r2, r1
 8002f88:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	7e1b      	ldrb	r3, [r3, #24]
 8002f8e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	7e5b      	ldrb	r3, [r3, #25]
 8002f94:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f96:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	7e9b      	ldrb	r3, [r3, #26]
 8002f9c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002f9e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d002      	beq.n	8002fae <HAL_ADC_Init+0x10e>
 8002fa8:	2380      	movs	r3, #128	@ 0x80
 8002faa:	015b      	lsls	r3, r3, #5
 8002fac:	e000      	b.n	8002fb0 <HAL_ADC_Init+0x110>
 8002fae:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002fb0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002fb6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d101      	bne.n	8002fc4 <HAL_ADC_Init+0x124>
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	e000      	b.n	8002fc6 <HAL_ADC_Init+0x126>
 8002fc4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002fc6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2124      	movs	r1, #36	@ 0x24
 8002fcc:	5c5b      	ldrb	r3, [r3, r1]
 8002fce:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002fd0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	7edb      	ldrb	r3, [r3, #27]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d115      	bne.n	800300c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	7e9b      	ldrb	r3, [r3, #26]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d105      	bne.n	8002ff4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2280      	movs	r2, #128	@ 0x80
 8002fec:	0252      	lsls	r2, r2, #9
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	e00b      	b.n	800300c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003004:	2201      	movs	r2, #1
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69da      	ldr	r2, [r3, #28]
 8003010:	23c2      	movs	r3, #194	@ 0xc2
 8003012:	33ff      	adds	r3, #255	@ 0xff
 8003014:	429a      	cmp	r2, r3
 8003016:	d007      	beq.n	8003028 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003020:	4313      	orrs	r3, r2
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	4313      	orrs	r3, r2
 8003026:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68d9      	ldr	r1, [r3, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	430a      	orrs	r2, r1
 8003036:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800303c:	2380      	movs	r3, #128	@ 0x80
 800303e:	055b      	lsls	r3, r3, #21
 8003040:	429a      	cmp	r2, r3
 8003042:	d01b      	beq.n	800307c <HAL_ADC_Init+0x1dc>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003048:	2b01      	cmp	r3, #1
 800304a:	d017      	beq.n	800307c <HAL_ADC_Init+0x1dc>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003050:	2b02      	cmp	r3, #2
 8003052:	d013      	beq.n	800307c <HAL_ADC_Init+0x1dc>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003058:	2b03      	cmp	r3, #3
 800305a:	d00f      	beq.n	800307c <HAL_ADC_Init+0x1dc>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003060:	2b04      	cmp	r3, #4
 8003062:	d00b      	beq.n	800307c <HAL_ADC_Init+0x1dc>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003068:	2b05      	cmp	r3, #5
 800306a:	d007      	beq.n	800307c <HAL_ADC_Init+0x1dc>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003070:	2b06      	cmp	r3, #6
 8003072:	d003      	beq.n	800307c <HAL_ADC_Init+0x1dc>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003078:	2b07      	cmp	r3, #7
 800307a:	d112      	bne.n	80030a2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695a      	ldr	r2, [r3, #20]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2107      	movs	r1, #7
 8003088:	438a      	bics	r2, r1
 800308a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6959      	ldr	r1, [r3, #20]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003096:	2207      	movs	r2, #7
 8003098:	401a      	ands	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	4a1c      	ldr	r2, [pc, #112]	@ (800311c <HAL_ADC_Init+0x27c>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d10b      	bne.n	80030ca <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030bc:	2203      	movs	r2, #3
 80030be:	4393      	bics	r3, r2
 80030c0:	2201      	movs	r2, #1
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80030c8:	e01c      	b.n	8003104 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ce:	2212      	movs	r2, #18
 80030d0:	4393      	bics	r3, r2
 80030d2:	2210      	movs	r2, #16
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030de:	2201      	movs	r2, #1
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80030e6:	230f      	movs	r3, #15
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	2201      	movs	r2, #1
 80030ec:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80030ee:	e009      	b.n	8003104 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f4:	2210      	movs	r2, #16
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80030fc:	230f      	movs	r3, #15
 80030fe:	18fb      	adds	r3, r7, r3
 8003100:	2201      	movs	r2, #1
 8003102:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003104:	230f      	movs	r3, #15
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	781b      	ldrb	r3, [r3, #0]
}
 800310a:	0018      	movs	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	b004      	add	sp, #16
 8003110:	bd80      	pop	{r7, pc}
 8003112:	46c0      	nop			@ (mov r8, r8)
 8003114:	fffffefd 	.word	0xfffffefd
 8003118:	fffe0219 	.word	0xfffe0219
 800311c:	833fffe7 	.word	0x833fffe7

08003120 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800312a:	230f      	movs	r3, #15
 800312c:	18fb      	adds	r3, r7, r3
 800312e:	2200      	movs	r2, #0
 8003130:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800313a:	2380      	movs	r3, #128	@ 0x80
 800313c:	055b      	lsls	r3, r3, #21
 800313e:	429a      	cmp	r2, r3
 8003140:	d011      	beq.n	8003166 <HAL_ADC_ConfigChannel+0x46>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003146:	2b01      	cmp	r3, #1
 8003148:	d00d      	beq.n	8003166 <HAL_ADC_ConfigChannel+0x46>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314e:	2b02      	cmp	r3, #2
 8003150:	d009      	beq.n	8003166 <HAL_ADC_ConfigChannel+0x46>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003156:	2b03      	cmp	r3, #3
 8003158:	d005      	beq.n	8003166 <HAL_ADC_ConfigChannel+0x46>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315e:	2b04      	cmp	r3, #4
 8003160:	d001      	beq.n	8003166 <HAL_ADC_ConfigChannel+0x46>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2234      	movs	r2, #52	@ 0x34
 800316a:	5c9b      	ldrb	r3, [r3, r2]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x54>
 8003170:	2302      	movs	r3, #2
 8003172:	e0d0      	b.n	8003316 <HAL_ADC_ConfigChannel+0x1f6>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2234      	movs	r2, #52	@ 0x34
 8003178:	2101      	movs	r1, #1
 800317a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2204      	movs	r2, #4
 8003184:	4013      	ands	r3, r2
 8003186:	d000      	beq.n	800318a <HAL_ADC_ConfigChannel+0x6a>
 8003188:	e0b4      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	4a64      	ldr	r2, [pc, #400]	@ (8003320 <HAL_ADC_ConfigChannel+0x200>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d100      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x76>
 8003194:	e082      	b.n	800329c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2201      	movs	r2, #1
 80031a2:	409a      	lsls	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031b0:	2380      	movs	r3, #128	@ 0x80
 80031b2:	055b      	lsls	r3, r3, #21
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d037      	beq.n	8003228 <HAL_ADC_ConfigChannel+0x108>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d033      	beq.n	8003228 <HAL_ADC_ConfigChannel+0x108>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d02f      	beq.n	8003228 <HAL_ADC_ConfigChannel+0x108>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d02b      	beq.n	8003228 <HAL_ADC_ConfigChannel+0x108>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d027      	beq.n	8003228 <HAL_ADC_ConfigChannel+0x108>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031dc:	2b05      	cmp	r3, #5
 80031de:	d023      	beq.n	8003228 <HAL_ADC_ConfigChannel+0x108>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e4:	2b06      	cmp	r3, #6
 80031e6:	d01f      	beq.n	8003228 <HAL_ADC_ConfigChannel+0x108>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ec:	2b07      	cmp	r3, #7
 80031ee:	d01b      	beq.n	8003228 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	2107      	movs	r1, #7
 80031fc:	400b      	ands	r3, r1
 80031fe:	429a      	cmp	r2, r3
 8003200:	d012      	beq.n	8003228 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2107      	movs	r1, #7
 800320e:	438a      	bics	r2, r1
 8003210:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6959      	ldr	r1, [r3, #20]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2207      	movs	r2, #7
 800321e:	401a      	ands	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b10      	cmp	r3, #16
 800322e:	d007      	beq.n	8003240 <HAL_ADC_ConfigChannel+0x120>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b11      	cmp	r3, #17
 8003236:	d003      	beq.n	8003240 <HAL_ADC_ConfigChannel+0x120>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b12      	cmp	r3, #18
 800323e:	d163      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003240:	4b38      	ldr	r3, [pc, #224]	@ (8003324 <HAL_ADC_ConfigChannel+0x204>)
 8003242:	6819      	ldr	r1, [r3, #0]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b10      	cmp	r3, #16
 800324a:	d009      	beq.n	8003260 <HAL_ADC_ConfigChannel+0x140>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b11      	cmp	r3, #17
 8003252:	d102      	bne.n	800325a <HAL_ADC_ConfigChannel+0x13a>
 8003254:	2380      	movs	r3, #128	@ 0x80
 8003256:	03db      	lsls	r3, r3, #15
 8003258:	e004      	b.n	8003264 <HAL_ADC_ConfigChannel+0x144>
 800325a:	2380      	movs	r3, #128	@ 0x80
 800325c:	045b      	lsls	r3, r3, #17
 800325e:	e001      	b.n	8003264 <HAL_ADC_ConfigChannel+0x144>
 8003260:	2380      	movs	r3, #128	@ 0x80
 8003262:	041b      	lsls	r3, r3, #16
 8003264:	4a2f      	ldr	r2, [pc, #188]	@ (8003324 <HAL_ADC_ConfigChannel+0x204>)
 8003266:	430b      	orrs	r3, r1
 8003268:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2b10      	cmp	r3, #16
 8003270:	d14a      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003272:	4b2d      	ldr	r3, [pc, #180]	@ (8003328 <HAL_ADC_ConfigChannel+0x208>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	492d      	ldr	r1, [pc, #180]	@ (800332c <HAL_ADC_ConfigChannel+0x20c>)
 8003278:	0018      	movs	r0, r3
 800327a:	f7fc ff45 	bl	8000108 <__udivsi3>
 800327e:	0003      	movs	r3, r0
 8003280:	001a      	movs	r2, r3
 8003282:	0013      	movs	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	189b      	adds	r3, r3, r2
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800328c:	e002      	b.n	8003294 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	3b01      	subs	r3, #1
 8003292:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f9      	bne.n	800328e <HAL_ADC_ConfigChannel+0x16e>
 800329a:	e035      	b.n	8003308 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2101      	movs	r1, #1
 80032a8:	4099      	lsls	r1, r3
 80032aa:	000b      	movs	r3, r1
 80032ac:	43d9      	mvns	r1, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	400a      	ands	r2, r1
 80032b4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b10      	cmp	r3, #16
 80032bc:	d007      	beq.n	80032ce <HAL_ADC_ConfigChannel+0x1ae>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b11      	cmp	r3, #17
 80032c4:	d003      	beq.n	80032ce <HAL_ADC_ConfigChannel+0x1ae>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b12      	cmp	r3, #18
 80032cc:	d11c      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80032ce:	4b15      	ldr	r3, [pc, #84]	@ (8003324 <HAL_ADC_ConfigChannel+0x204>)
 80032d0:	6819      	ldr	r1, [r3, #0]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b10      	cmp	r3, #16
 80032d8:	d007      	beq.n	80032ea <HAL_ADC_ConfigChannel+0x1ca>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b11      	cmp	r3, #17
 80032e0:	d101      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x1c6>
 80032e2:	4b13      	ldr	r3, [pc, #76]	@ (8003330 <HAL_ADC_ConfigChannel+0x210>)
 80032e4:	e002      	b.n	80032ec <HAL_ADC_ConfigChannel+0x1cc>
 80032e6:	4b13      	ldr	r3, [pc, #76]	@ (8003334 <HAL_ADC_ConfigChannel+0x214>)
 80032e8:	e000      	b.n	80032ec <HAL_ADC_ConfigChannel+0x1cc>
 80032ea:	4b13      	ldr	r3, [pc, #76]	@ (8003338 <HAL_ADC_ConfigChannel+0x218>)
 80032ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003324 <HAL_ADC_ConfigChannel+0x204>)
 80032ee:	400b      	ands	r3, r1
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e009      	b.n	8003308 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f8:	2220      	movs	r2, #32
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003300:	230f      	movs	r3, #15
 8003302:	18fb      	adds	r3, r7, r3
 8003304:	2201      	movs	r2, #1
 8003306:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2234      	movs	r2, #52	@ 0x34
 800330c:	2100      	movs	r1, #0
 800330e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003310:	230f      	movs	r3, #15
 8003312:	18fb      	adds	r3, r7, r3
 8003314:	781b      	ldrb	r3, [r3, #0]
}
 8003316:	0018      	movs	r0, r3
 8003318:	46bd      	mov	sp, r7
 800331a:	b004      	add	sp, #16
 800331c:	bd80      	pop	{r7, pc}
 800331e:	46c0      	nop			@ (mov r8, r8)
 8003320:	00001001 	.word	0x00001001
 8003324:	40012708 	.word	0x40012708
 8003328:	20000040 	.word	0x20000040
 800332c:	000f4240 	.word	0x000f4240
 8003330:	ffbfffff 	.word	0xffbfffff
 8003334:	feffffff 	.word	0xfeffffff
 8003338:	ff7fffff 	.word	0xff7fffff

0800333c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	0002      	movs	r2, r0
 8003344:	1dfb      	adds	r3, r7, #7
 8003346:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003348:	1dfb      	adds	r3, r7, #7
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b7f      	cmp	r3, #127	@ 0x7f
 800334e:	d809      	bhi.n	8003364 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003350:	1dfb      	adds	r3, r7, #7
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	001a      	movs	r2, r3
 8003356:	231f      	movs	r3, #31
 8003358:	401a      	ands	r2, r3
 800335a:	4b04      	ldr	r3, [pc, #16]	@ (800336c <__NVIC_EnableIRQ+0x30>)
 800335c:	2101      	movs	r1, #1
 800335e:	4091      	lsls	r1, r2
 8003360:	000a      	movs	r2, r1
 8003362:	601a      	str	r2, [r3, #0]
  }
}
 8003364:	46c0      	nop			@ (mov r8, r8)
 8003366:	46bd      	mov	sp, r7
 8003368:	b002      	add	sp, #8
 800336a:	bd80      	pop	{r7, pc}
 800336c:	e000e100 	.word	0xe000e100

08003370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	0002      	movs	r2, r0
 8003378:	6039      	str	r1, [r7, #0]
 800337a:	1dfb      	adds	r3, r7, #7
 800337c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800337e:	1dfb      	adds	r3, r7, #7
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b7f      	cmp	r3, #127	@ 0x7f
 8003384:	d828      	bhi.n	80033d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003386:	4a2f      	ldr	r2, [pc, #188]	@ (8003444 <__NVIC_SetPriority+0xd4>)
 8003388:	1dfb      	adds	r3, r7, #7
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	b25b      	sxtb	r3, r3
 800338e:	089b      	lsrs	r3, r3, #2
 8003390:	33c0      	adds	r3, #192	@ 0xc0
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	589b      	ldr	r3, [r3, r2]
 8003396:	1dfa      	adds	r2, r7, #7
 8003398:	7812      	ldrb	r2, [r2, #0]
 800339a:	0011      	movs	r1, r2
 800339c:	2203      	movs	r2, #3
 800339e:	400a      	ands	r2, r1
 80033a0:	00d2      	lsls	r2, r2, #3
 80033a2:	21ff      	movs	r1, #255	@ 0xff
 80033a4:	4091      	lsls	r1, r2
 80033a6:	000a      	movs	r2, r1
 80033a8:	43d2      	mvns	r2, r2
 80033aa:	401a      	ands	r2, r3
 80033ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	019b      	lsls	r3, r3, #6
 80033b2:	22ff      	movs	r2, #255	@ 0xff
 80033b4:	401a      	ands	r2, r3
 80033b6:	1dfb      	adds	r3, r7, #7
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	0018      	movs	r0, r3
 80033bc:	2303      	movs	r3, #3
 80033be:	4003      	ands	r3, r0
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033c4:	481f      	ldr	r0, [pc, #124]	@ (8003444 <__NVIC_SetPriority+0xd4>)
 80033c6:	1dfb      	adds	r3, r7, #7
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	b25b      	sxtb	r3, r3
 80033cc:	089b      	lsrs	r3, r3, #2
 80033ce:	430a      	orrs	r2, r1
 80033d0:	33c0      	adds	r3, #192	@ 0xc0
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80033d6:	e031      	b.n	800343c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003448 <__NVIC_SetPriority+0xd8>)
 80033da:	1dfb      	adds	r3, r7, #7
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	0019      	movs	r1, r3
 80033e0:	230f      	movs	r3, #15
 80033e2:	400b      	ands	r3, r1
 80033e4:	3b08      	subs	r3, #8
 80033e6:	089b      	lsrs	r3, r3, #2
 80033e8:	3306      	adds	r3, #6
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	18d3      	adds	r3, r2, r3
 80033ee:	3304      	adds	r3, #4
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	1dfa      	adds	r2, r7, #7
 80033f4:	7812      	ldrb	r2, [r2, #0]
 80033f6:	0011      	movs	r1, r2
 80033f8:	2203      	movs	r2, #3
 80033fa:	400a      	ands	r2, r1
 80033fc:	00d2      	lsls	r2, r2, #3
 80033fe:	21ff      	movs	r1, #255	@ 0xff
 8003400:	4091      	lsls	r1, r2
 8003402:	000a      	movs	r2, r1
 8003404:	43d2      	mvns	r2, r2
 8003406:	401a      	ands	r2, r3
 8003408:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	019b      	lsls	r3, r3, #6
 800340e:	22ff      	movs	r2, #255	@ 0xff
 8003410:	401a      	ands	r2, r3
 8003412:	1dfb      	adds	r3, r7, #7
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	0018      	movs	r0, r3
 8003418:	2303      	movs	r3, #3
 800341a:	4003      	ands	r3, r0
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003420:	4809      	ldr	r0, [pc, #36]	@ (8003448 <__NVIC_SetPriority+0xd8>)
 8003422:	1dfb      	adds	r3, r7, #7
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	001c      	movs	r4, r3
 8003428:	230f      	movs	r3, #15
 800342a:	4023      	ands	r3, r4
 800342c:	3b08      	subs	r3, #8
 800342e:	089b      	lsrs	r3, r3, #2
 8003430:	430a      	orrs	r2, r1
 8003432:	3306      	adds	r3, #6
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	18c3      	adds	r3, r0, r3
 8003438:	3304      	adds	r3, #4
 800343a:	601a      	str	r2, [r3, #0]
}
 800343c:	46c0      	nop			@ (mov r8, r8)
 800343e:	46bd      	mov	sp, r7
 8003440:	b003      	add	sp, #12
 8003442:	bd90      	pop	{r4, r7, pc}
 8003444:	e000e100 	.word	0xe000e100
 8003448:	e000ed00 	.word	0xe000ed00

0800344c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	1e5a      	subs	r2, r3, #1
 8003458:	2380      	movs	r3, #128	@ 0x80
 800345a:	045b      	lsls	r3, r3, #17
 800345c:	429a      	cmp	r2, r3
 800345e:	d301      	bcc.n	8003464 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003460:	2301      	movs	r3, #1
 8003462:	e010      	b.n	8003486 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003464:	4b0a      	ldr	r3, [pc, #40]	@ (8003490 <SysTick_Config+0x44>)
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	3a01      	subs	r2, #1
 800346a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800346c:	2301      	movs	r3, #1
 800346e:	425b      	negs	r3, r3
 8003470:	2103      	movs	r1, #3
 8003472:	0018      	movs	r0, r3
 8003474:	f7ff ff7c 	bl	8003370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003478:	4b05      	ldr	r3, [pc, #20]	@ (8003490 <SysTick_Config+0x44>)
 800347a:	2200      	movs	r2, #0
 800347c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800347e:	4b04      	ldr	r3, [pc, #16]	@ (8003490 <SysTick_Config+0x44>)
 8003480:	2207      	movs	r2, #7
 8003482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003484:	2300      	movs	r3, #0
}
 8003486:	0018      	movs	r0, r3
 8003488:	46bd      	mov	sp, r7
 800348a:	b002      	add	sp, #8
 800348c:	bd80      	pop	{r7, pc}
 800348e:	46c0      	nop			@ (mov r8, r8)
 8003490:	e000e010 	.word	0xe000e010

08003494 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
 800349e:	210f      	movs	r1, #15
 80034a0:	187b      	adds	r3, r7, r1
 80034a2:	1c02      	adds	r2, r0, #0
 80034a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	187b      	adds	r3, r7, r1
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	b25b      	sxtb	r3, r3
 80034ae:	0011      	movs	r1, r2
 80034b0:	0018      	movs	r0, r3
 80034b2:	f7ff ff5d 	bl	8003370 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80034b6:	46c0      	nop			@ (mov r8, r8)
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b004      	add	sp, #16
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b082      	sub	sp, #8
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	0002      	movs	r2, r0
 80034c6:	1dfb      	adds	r3, r7, #7
 80034c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034ca:	1dfb      	adds	r3, r7, #7
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	b25b      	sxtb	r3, r3
 80034d0:	0018      	movs	r0, r3
 80034d2:	f7ff ff33 	bl	800333c <__NVIC_EnableIRQ>
}
 80034d6:	46c0      	nop			@ (mov r8, r8)
 80034d8:	46bd      	mov	sp, r7
 80034da:	b002      	add	sp, #8
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b082      	sub	sp, #8
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	0018      	movs	r0, r3
 80034ea:	f7ff ffaf 	bl	800344c <SysTick_Config>
 80034ee:	0003      	movs	r3, r0
}
 80034f0:	0018      	movs	r0, r3
 80034f2:	46bd      	mov	sp, r7
 80034f4:	b002      	add	sp, #8
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003506:	e155      	b.n	80037b4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2101      	movs	r1, #1
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4091      	lsls	r1, r2
 8003512:	000a      	movs	r2, r1
 8003514:	4013      	ands	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d100      	bne.n	8003520 <HAL_GPIO_Init+0x28>
 800351e:	e146      	b.n	80037ae <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2203      	movs	r2, #3
 8003526:	4013      	ands	r3, r2
 8003528:	2b01      	cmp	r3, #1
 800352a:	d005      	beq.n	8003538 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2203      	movs	r2, #3
 8003532:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003534:	2b02      	cmp	r3, #2
 8003536:	d130      	bne.n	800359a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	2203      	movs	r2, #3
 8003544:	409a      	lsls	r2, r3
 8003546:	0013      	movs	r3, r2
 8003548:	43da      	mvns	r2, r3
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4013      	ands	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	409a      	lsls	r2, r3
 800355a:	0013      	movs	r3, r2
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800356e:	2201      	movs	r2, #1
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	409a      	lsls	r2, r3
 8003574:	0013      	movs	r3, r2
 8003576:	43da      	mvns	r2, r3
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4013      	ands	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	2201      	movs	r2, #1
 8003586:	401a      	ands	r2, r3
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	409a      	lsls	r2, r3
 800358c:	0013      	movs	r3, r2
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2203      	movs	r2, #3
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d017      	beq.n	80035d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	2203      	movs	r2, #3
 80035b2:	409a      	lsls	r2, r3
 80035b4:	0013      	movs	r3, r2
 80035b6:	43da      	mvns	r2, r3
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	4013      	ands	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	409a      	lsls	r2, r3
 80035c8:	0013      	movs	r3, r2
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2203      	movs	r2, #3
 80035dc:	4013      	ands	r3, r2
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d123      	bne.n	800362a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	08da      	lsrs	r2, r3, #3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3208      	adds	r2, #8
 80035ea:	0092      	lsls	r2, r2, #2
 80035ec:	58d3      	ldr	r3, [r2, r3]
 80035ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2207      	movs	r2, #7
 80035f4:	4013      	ands	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	220f      	movs	r2, #15
 80035fa:	409a      	lsls	r2, r3
 80035fc:	0013      	movs	r3, r2
 80035fe:	43da      	mvns	r2, r3
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4013      	ands	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2107      	movs	r1, #7
 800360e:	400b      	ands	r3, r1
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	409a      	lsls	r2, r3
 8003614:	0013      	movs	r3, r2
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	08da      	lsrs	r2, r3, #3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3208      	adds	r2, #8
 8003624:	0092      	lsls	r2, r2, #2
 8003626:	6939      	ldr	r1, [r7, #16]
 8003628:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	2203      	movs	r2, #3
 8003636:	409a      	lsls	r2, r3
 8003638:	0013      	movs	r3, r2
 800363a:	43da      	mvns	r2, r3
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4013      	ands	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2203      	movs	r2, #3
 8003648:	401a      	ands	r2, r3
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	409a      	lsls	r2, r3
 8003650:	0013      	movs	r3, r2
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	23c0      	movs	r3, #192	@ 0xc0
 8003664:	029b      	lsls	r3, r3, #10
 8003666:	4013      	ands	r3, r2
 8003668:	d100      	bne.n	800366c <HAL_GPIO_Init+0x174>
 800366a:	e0a0      	b.n	80037ae <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800366c:	4b57      	ldr	r3, [pc, #348]	@ (80037cc <HAL_GPIO_Init+0x2d4>)
 800366e:	699a      	ldr	r2, [r3, #24]
 8003670:	4b56      	ldr	r3, [pc, #344]	@ (80037cc <HAL_GPIO_Init+0x2d4>)
 8003672:	2101      	movs	r1, #1
 8003674:	430a      	orrs	r2, r1
 8003676:	619a      	str	r2, [r3, #24]
 8003678:	4b54      	ldr	r3, [pc, #336]	@ (80037cc <HAL_GPIO_Init+0x2d4>)
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	2201      	movs	r2, #1
 800367e:	4013      	ands	r3, r2
 8003680:	60bb      	str	r3, [r7, #8]
 8003682:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003684:	4a52      	ldr	r2, [pc, #328]	@ (80037d0 <HAL_GPIO_Init+0x2d8>)
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	089b      	lsrs	r3, r3, #2
 800368a:	3302      	adds	r3, #2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	589b      	ldr	r3, [r3, r2]
 8003690:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2203      	movs	r2, #3
 8003696:	4013      	ands	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	220f      	movs	r2, #15
 800369c:	409a      	lsls	r2, r3
 800369e:	0013      	movs	r3, r2
 80036a0:	43da      	mvns	r2, r3
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4013      	ands	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	2390      	movs	r3, #144	@ 0x90
 80036ac:	05db      	lsls	r3, r3, #23
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d019      	beq.n	80036e6 <HAL_GPIO_Init+0x1ee>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a47      	ldr	r2, [pc, #284]	@ (80037d4 <HAL_GPIO_Init+0x2dc>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d013      	beq.n	80036e2 <HAL_GPIO_Init+0x1ea>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a46      	ldr	r2, [pc, #280]	@ (80037d8 <HAL_GPIO_Init+0x2e0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d00d      	beq.n	80036de <HAL_GPIO_Init+0x1e6>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a45      	ldr	r2, [pc, #276]	@ (80037dc <HAL_GPIO_Init+0x2e4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d007      	beq.n	80036da <HAL_GPIO_Init+0x1e2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a44      	ldr	r2, [pc, #272]	@ (80037e0 <HAL_GPIO_Init+0x2e8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d101      	bne.n	80036d6 <HAL_GPIO_Init+0x1de>
 80036d2:	2304      	movs	r3, #4
 80036d4:	e008      	b.n	80036e8 <HAL_GPIO_Init+0x1f0>
 80036d6:	2305      	movs	r3, #5
 80036d8:	e006      	b.n	80036e8 <HAL_GPIO_Init+0x1f0>
 80036da:	2303      	movs	r3, #3
 80036dc:	e004      	b.n	80036e8 <HAL_GPIO_Init+0x1f0>
 80036de:	2302      	movs	r3, #2
 80036e0:	e002      	b.n	80036e8 <HAL_GPIO_Init+0x1f0>
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <HAL_GPIO_Init+0x1f0>
 80036e6:	2300      	movs	r3, #0
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	2103      	movs	r1, #3
 80036ec:	400a      	ands	r2, r1
 80036ee:	0092      	lsls	r2, r2, #2
 80036f0:	4093      	lsls	r3, r2
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036f8:	4935      	ldr	r1, [pc, #212]	@ (80037d0 <HAL_GPIO_Init+0x2d8>)
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	089b      	lsrs	r3, r3, #2
 80036fe:	3302      	adds	r3, #2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003706:	4b37      	ldr	r3, [pc, #220]	@ (80037e4 <HAL_GPIO_Init+0x2ec>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	43da      	mvns	r2, r3
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	4013      	ands	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	2380      	movs	r3, #128	@ 0x80
 800371c:	035b      	lsls	r3, r3, #13
 800371e:	4013      	ands	r3, r2
 8003720:	d003      	beq.n	800372a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800372a:	4b2e      	ldr	r3, [pc, #184]	@ (80037e4 <HAL_GPIO_Init+0x2ec>)
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003730:	4b2c      	ldr	r3, [pc, #176]	@ (80037e4 <HAL_GPIO_Init+0x2ec>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	43da      	mvns	r2, r3
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	4013      	ands	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	2380      	movs	r3, #128	@ 0x80
 8003746:	039b      	lsls	r3, r3, #14
 8003748:	4013      	ands	r3, r2
 800374a:	d003      	beq.n	8003754 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003754:	4b23      	ldr	r3, [pc, #140]	@ (80037e4 <HAL_GPIO_Init+0x2ec>)
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800375a:	4b22      	ldr	r3, [pc, #136]	@ (80037e4 <HAL_GPIO_Init+0x2ec>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	43da      	mvns	r2, r3
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4013      	ands	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	2380      	movs	r3, #128	@ 0x80
 8003770:	029b      	lsls	r3, r3, #10
 8003772:	4013      	ands	r3, r2
 8003774:	d003      	beq.n	800377e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800377e:	4b19      	ldr	r3, [pc, #100]	@ (80037e4 <HAL_GPIO_Init+0x2ec>)
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003784:	4b17      	ldr	r3, [pc, #92]	@ (80037e4 <HAL_GPIO_Init+0x2ec>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	43da      	mvns	r2, r3
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	4013      	ands	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	2380      	movs	r3, #128	@ 0x80
 800379a:	025b      	lsls	r3, r3, #9
 800379c:	4013      	ands	r3, r2
 800379e:	d003      	beq.n	80037a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80037a8:	4b0e      	ldr	r3, [pc, #56]	@ (80037e4 <HAL_GPIO_Init+0x2ec>)
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	3301      	adds	r3, #1
 80037b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	40da      	lsrs	r2, r3
 80037bc:	1e13      	subs	r3, r2, #0
 80037be:	d000      	beq.n	80037c2 <HAL_GPIO_Init+0x2ca>
 80037c0:	e6a2      	b.n	8003508 <HAL_GPIO_Init+0x10>
  } 
}
 80037c2:	46c0      	nop			@ (mov r8, r8)
 80037c4:	46c0      	nop			@ (mov r8, r8)
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b006      	add	sp, #24
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40021000 	.word	0x40021000
 80037d0:	40010000 	.word	0x40010000
 80037d4:	48000400 	.word	0x48000400
 80037d8:	48000800 	.word	0x48000800
 80037dc:	48000c00 	.word	0x48000c00
 80037e0:	48001000 	.word	0x48001000
 80037e4:	40010400 	.word	0x40010400

080037e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	000a      	movs	r2, r1
 80037f2:	1cbb      	adds	r3, r7, #2
 80037f4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	1cba      	adds	r2, r7, #2
 80037fc:	8812      	ldrh	r2, [r2, #0]
 80037fe:	4013      	ands	r3, r2
 8003800:	d004      	beq.n	800380c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003802:	230f      	movs	r3, #15
 8003804:	18fb      	adds	r3, r7, r3
 8003806:	2201      	movs	r2, #1
 8003808:	701a      	strb	r2, [r3, #0]
 800380a:	e003      	b.n	8003814 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800380c:	230f      	movs	r3, #15
 800380e:	18fb      	adds	r3, r7, r3
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003814:	230f      	movs	r3, #15
 8003816:	18fb      	adds	r3, r7, r3
 8003818:	781b      	ldrb	r3, [r3, #0]
  }
 800381a:	0018      	movs	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	b004      	add	sp, #16
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b082      	sub	sp, #8
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	0008      	movs	r0, r1
 800382c:	0011      	movs	r1, r2
 800382e:	1cbb      	adds	r3, r7, #2
 8003830:	1c02      	adds	r2, r0, #0
 8003832:	801a      	strh	r2, [r3, #0]
 8003834:	1c7b      	adds	r3, r7, #1
 8003836:	1c0a      	adds	r2, r1, #0
 8003838:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800383a:	1c7b      	adds	r3, r7, #1
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d004      	beq.n	800384c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003842:	1cbb      	adds	r3, r7, #2
 8003844:	881a      	ldrh	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800384a:	e003      	b.n	8003854 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800384c:	1cbb      	adds	r3, r7, #2
 800384e:	881a      	ldrh	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003854:	46c0      	nop			@ (mov r8, r8)
 8003856:	46bd      	mov	sp, r7
 8003858:	b002      	add	sp, #8
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	0002      	movs	r2, r0
 8003864:	1dbb      	adds	r3, r7, #6
 8003866:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003868:	4b09      	ldr	r3, [pc, #36]	@ (8003890 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	1dba      	adds	r2, r7, #6
 800386e:	8812      	ldrh	r2, [r2, #0]
 8003870:	4013      	ands	r3, r2
 8003872:	d008      	beq.n	8003886 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003874:	4b06      	ldr	r3, [pc, #24]	@ (8003890 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003876:	1dba      	adds	r2, r7, #6
 8003878:	8812      	ldrh	r2, [r2, #0]
 800387a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800387c:	1dbb      	adds	r3, r7, #6
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	0018      	movs	r0, r3
 8003882:	f002 fedf 	bl	8006644 <HAL_GPIO_EXTI_Callback>
  }
}
 8003886:	46c0      	nop			@ (mov r8, r8)
 8003888:	46bd      	mov	sp, r7
 800388a:	b002      	add	sp, #8
 800388c:	bd80      	pop	{r7, pc}
 800388e:	46c0      	nop			@ (mov r8, r8)
 8003890:	40010400 	.word	0x40010400

08003894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d102      	bne.n	80038a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	f000 fb76 	bl	8003f94 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2201      	movs	r2, #1
 80038ae:	4013      	ands	r3, r2
 80038b0:	d100      	bne.n	80038b4 <HAL_RCC_OscConfig+0x20>
 80038b2:	e08e      	b.n	80039d2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80038b4:	4bc5      	ldr	r3, [pc, #788]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	220c      	movs	r2, #12
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d00e      	beq.n	80038de <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038c0:	4bc2      	ldr	r3, [pc, #776]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	220c      	movs	r2, #12
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d117      	bne.n	80038fc <HAL_RCC_OscConfig+0x68>
 80038cc:	4bbf      	ldr	r3, [pc, #764]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	23c0      	movs	r3, #192	@ 0xc0
 80038d2:	025b      	lsls	r3, r3, #9
 80038d4:	401a      	ands	r2, r3
 80038d6:	2380      	movs	r3, #128	@ 0x80
 80038d8:	025b      	lsls	r3, r3, #9
 80038da:	429a      	cmp	r2, r3
 80038dc:	d10e      	bne.n	80038fc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038de:	4bbb      	ldr	r3, [pc, #748]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	2380      	movs	r3, #128	@ 0x80
 80038e4:	029b      	lsls	r3, r3, #10
 80038e6:	4013      	ands	r3, r2
 80038e8:	d100      	bne.n	80038ec <HAL_RCC_OscConfig+0x58>
 80038ea:	e071      	b.n	80039d0 <HAL_RCC_OscConfig+0x13c>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d000      	beq.n	80038f6 <HAL_RCC_OscConfig+0x62>
 80038f4:	e06c      	b.n	80039d0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	f000 fb4c 	bl	8003f94 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d107      	bne.n	8003914 <HAL_RCC_OscConfig+0x80>
 8003904:	4bb1      	ldr	r3, [pc, #708]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4bb0      	ldr	r3, [pc, #704]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 800390a:	2180      	movs	r1, #128	@ 0x80
 800390c:	0249      	lsls	r1, r1, #9
 800390e:	430a      	orrs	r2, r1
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	e02f      	b.n	8003974 <HAL_RCC_OscConfig+0xe0>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10c      	bne.n	8003936 <HAL_RCC_OscConfig+0xa2>
 800391c:	4bab      	ldr	r3, [pc, #684]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	4baa      	ldr	r3, [pc, #680]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003922:	49ab      	ldr	r1, [pc, #684]	@ (8003bd0 <HAL_RCC_OscConfig+0x33c>)
 8003924:	400a      	ands	r2, r1
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	4ba8      	ldr	r3, [pc, #672]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	4ba7      	ldr	r3, [pc, #668]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 800392e:	49a9      	ldr	r1, [pc, #676]	@ (8003bd4 <HAL_RCC_OscConfig+0x340>)
 8003930:	400a      	ands	r2, r1
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	e01e      	b.n	8003974 <HAL_RCC_OscConfig+0xe0>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b05      	cmp	r3, #5
 800393c:	d10e      	bne.n	800395c <HAL_RCC_OscConfig+0xc8>
 800393e:	4ba3      	ldr	r3, [pc, #652]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	4ba2      	ldr	r3, [pc, #648]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003944:	2180      	movs	r1, #128	@ 0x80
 8003946:	02c9      	lsls	r1, r1, #11
 8003948:	430a      	orrs	r2, r1
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	4b9f      	ldr	r3, [pc, #636]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	4b9e      	ldr	r3, [pc, #632]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003952:	2180      	movs	r1, #128	@ 0x80
 8003954:	0249      	lsls	r1, r1, #9
 8003956:	430a      	orrs	r2, r1
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	e00b      	b.n	8003974 <HAL_RCC_OscConfig+0xe0>
 800395c:	4b9b      	ldr	r3, [pc, #620]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4b9a      	ldr	r3, [pc, #616]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003962:	499b      	ldr	r1, [pc, #620]	@ (8003bd0 <HAL_RCC_OscConfig+0x33c>)
 8003964:	400a      	ands	r2, r1
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	4b98      	ldr	r3, [pc, #608]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b97      	ldr	r3, [pc, #604]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 800396e:	4999      	ldr	r1, [pc, #612]	@ (8003bd4 <HAL_RCC_OscConfig+0x340>)
 8003970:	400a      	ands	r2, r1
 8003972:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d014      	beq.n	80039a6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397c:	f7ff fa62 	bl	8002e44 <HAL_GetTick>
 8003980:	0003      	movs	r3, r0
 8003982:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003986:	f7ff fa5d 	bl	8002e44 <HAL_GetTick>
 800398a:	0002      	movs	r2, r0
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b64      	cmp	r3, #100	@ 0x64
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e2fd      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003998:	4b8c      	ldr	r3, [pc, #560]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	2380      	movs	r3, #128	@ 0x80
 800399e:	029b      	lsls	r3, r3, #10
 80039a0:	4013      	ands	r3, r2
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCC_OscConfig+0xf2>
 80039a4:	e015      	b.n	80039d2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a6:	f7ff fa4d 	bl	8002e44 <HAL_GetTick>
 80039aa:	0003      	movs	r3, r0
 80039ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b0:	f7ff fa48 	bl	8002e44 <HAL_GetTick>
 80039b4:	0002      	movs	r2, r0
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b64      	cmp	r3, #100	@ 0x64
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e2e8      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c2:	4b82      	ldr	r3, [pc, #520]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	2380      	movs	r3, #128	@ 0x80
 80039c8:	029b      	lsls	r3, r3, #10
 80039ca:	4013      	ands	r3, r2
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x11c>
 80039ce:	e000      	b.n	80039d2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2202      	movs	r2, #2
 80039d8:	4013      	ands	r3, r2
 80039da:	d100      	bne.n	80039de <HAL_RCC_OscConfig+0x14a>
 80039dc:	e06c      	b.n	8003ab8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80039de:	4b7b      	ldr	r3, [pc, #492]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	220c      	movs	r2, #12
 80039e4:	4013      	ands	r3, r2
 80039e6:	d00e      	beq.n	8003a06 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80039e8:	4b78      	ldr	r3, [pc, #480]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	220c      	movs	r2, #12
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d11f      	bne.n	8003a34 <HAL_RCC_OscConfig+0x1a0>
 80039f4:	4b75      	ldr	r3, [pc, #468]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	23c0      	movs	r3, #192	@ 0xc0
 80039fa:	025b      	lsls	r3, r3, #9
 80039fc:	401a      	ands	r2, r3
 80039fe:	2380      	movs	r3, #128	@ 0x80
 8003a00:	021b      	lsls	r3, r3, #8
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d116      	bne.n	8003a34 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a06:	4b71      	ldr	r3, [pc, #452]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d005      	beq.n	8003a1c <HAL_RCC_OscConfig+0x188>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e2bb      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1c:	4b6b      	ldr	r3, [pc, #428]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	22f8      	movs	r2, #248	@ 0xf8
 8003a22:	4393      	bics	r3, r2
 8003a24:	0019      	movs	r1, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	00da      	lsls	r2, r3, #3
 8003a2c:	4b67      	ldr	r3, [pc, #412]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a32:	e041      	b.n	8003ab8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d024      	beq.n	8003a86 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a3c:	4b63      	ldr	r3, [pc, #396]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	4b62      	ldr	r3, [pc, #392]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a42:	2101      	movs	r1, #1
 8003a44:	430a      	orrs	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a48:	f7ff f9fc 	bl	8002e44 <HAL_GetTick>
 8003a4c:	0003      	movs	r3, r0
 8003a4e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a52:	f7ff f9f7 	bl	8002e44 <HAL_GetTick>
 8003a56:	0002      	movs	r2, r0
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e297      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a64:	4b59      	ldr	r3, [pc, #356]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d0f1      	beq.n	8003a52 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6e:	4b57      	ldr	r3, [pc, #348]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	22f8      	movs	r2, #248	@ 0xf8
 8003a74:	4393      	bics	r3, r2
 8003a76:	0019      	movs	r1, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	00da      	lsls	r2, r3, #3
 8003a7e:	4b53      	ldr	r3, [pc, #332]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a80:	430a      	orrs	r2, r1
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	e018      	b.n	8003ab8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a86:	4b51      	ldr	r3, [pc, #324]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	4b50      	ldr	r3, [pc, #320]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	438a      	bics	r2, r1
 8003a90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a92:	f7ff f9d7 	bl	8002e44 <HAL_GetTick>
 8003a96:	0003      	movs	r3, r0
 8003a98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a9c:	f7ff f9d2 	bl	8002e44 <HAL_GetTick>
 8003aa0:	0002      	movs	r2, r0
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e272      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aae:	4b47      	ldr	r3, [pc, #284]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d1f1      	bne.n	8003a9c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2208      	movs	r2, #8
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d036      	beq.n	8003b30 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d019      	beq.n	8003afe <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aca:	4b40      	ldr	r3, [pc, #256]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003acc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ace:	4b3f      	ldr	r3, [pc, #252]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad6:	f7ff f9b5 	bl	8002e44 <HAL_GetTick>
 8003ada:	0003      	movs	r3, r0
 8003adc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ae0:	f7ff f9b0 	bl	8002e44 <HAL_GetTick>
 8003ae4:	0002      	movs	r2, r0
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e250      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af2:	4b36      	ldr	r3, [pc, #216]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af6:	2202      	movs	r2, #2
 8003af8:	4013      	ands	r3, r2
 8003afa:	d0f1      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x24c>
 8003afc:	e018      	b.n	8003b30 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003afe:	4b33      	ldr	r3, [pc, #204]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003b00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b02:	4b32      	ldr	r3, [pc, #200]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003b04:	2101      	movs	r1, #1
 8003b06:	438a      	bics	r2, r1
 8003b08:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b0a:	f7ff f99b 	bl	8002e44 <HAL_GetTick>
 8003b0e:	0003      	movs	r3, r0
 8003b10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b14:	f7ff f996 	bl	8002e44 <HAL_GetTick>
 8003b18:	0002      	movs	r2, r0
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e236      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b26:	4b29      	ldr	r3, [pc, #164]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d1f1      	bne.n	8003b14 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2204      	movs	r2, #4
 8003b36:	4013      	ands	r3, r2
 8003b38:	d100      	bne.n	8003b3c <HAL_RCC_OscConfig+0x2a8>
 8003b3a:	e0b5      	b.n	8003ca8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b3c:	201f      	movs	r0, #31
 8003b3e:	183b      	adds	r3, r7, r0
 8003b40:	2200      	movs	r2, #0
 8003b42:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b44:	4b21      	ldr	r3, [pc, #132]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003b46:	69da      	ldr	r2, [r3, #28]
 8003b48:	2380      	movs	r3, #128	@ 0x80
 8003b4a:	055b      	lsls	r3, r3, #21
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d110      	bne.n	8003b72 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b50:	4b1e      	ldr	r3, [pc, #120]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003b52:	69da      	ldr	r2, [r3, #28]
 8003b54:	4b1d      	ldr	r3, [pc, #116]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003b56:	2180      	movs	r1, #128	@ 0x80
 8003b58:	0549      	lsls	r1, r1, #21
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	61da      	str	r2, [r3, #28]
 8003b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003b60:	69da      	ldr	r2, [r3, #28]
 8003b62:	2380      	movs	r3, #128	@ 0x80
 8003b64:	055b      	lsls	r3, r3, #21
 8003b66:	4013      	ands	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b6c:	183b      	adds	r3, r7, r0
 8003b6e:	2201      	movs	r2, #1
 8003b70:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b72:	4b19      	ldr	r3, [pc, #100]	@ (8003bd8 <HAL_RCC_OscConfig+0x344>)
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	2380      	movs	r3, #128	@ 0x80
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d11a      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b7e:	4b16      	ldr	r3, [pc, #88]	@ (8003bd8 <HAL_RCC_OscConfig+0x344>)
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	4b15      	ldr	r3, [pc, #84]	@ (8003bd8 <HAL_RCC_OscConfig+0x344>)
 8003b84:	2180      	movs	r1, #128	@ 0x80
 8003b86:	0049      	lsls	r1, r1, #1
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b8c:	f7ff f95a 	bl	8002e44 <HAL_GetTick>
 8003b90:	0003      	movs	r3, r0
 8003b92:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b96:	f7ff f955 	bl	8002e44 <HAL_GetTick>
 8003b9a:	0002      	movs	r2, r0
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b64      	cmp	r3, #100	@ 0x64
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e1f5      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd8 <HAL_RCC_OscConfig+0x344>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	2380      	movs	r3, #128	@ 0x80
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	d0f0      	beq.n	8003b96 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d10f      	bne.n	8003bdc <HAL_RCC_OscConfig+0x348>
 8003bbc:	4b03      	ldr	r3, [pc, #12]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003bbe:	6a1a      	ldr	r2, [r3, #32]
 8003bc0:	4b02      	ldr	r3, [pc, #8]	@ (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	621a      	str	r2, [r3, #32]
 8003bc8:	e036      	b.n	8003c38 <HAL_RCC_OscConfig+0x3a4>
 8003bca:	46c0      	nop			@ (mov r8, r8)
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	fffeffff 	.word	0xfffeffff
 8003bd4:	fffbffff 	.word	0xfffbffff
 8003bd8:	40007000 	.word	0x40007000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10c      	bne.n	8003bfe <HAL_RCC_OscConfig+0x36a>
 8003be4:	4bca      	ldr	r3, [pc, #808]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003be6:	6a1a      	ldr	r2, [r3, #32]
 8003be8:	4bc9      	ldr	r3, [pc, #804]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003bea:	2101      	movs	r1, #1
 8003bec:	438a      	bics	r2, r1
 8003bee:	621a      	str	r2, [r3, #32]
 8003bf0:	4bc7      	ldr	r3, [pc, #796]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003bf2:	6a1a      	ldr	r2, [r3, #32]
 8003bf4:	4bc6      	ldr	r3, [pc, #792]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003bf6:	2104      	movs	r1, #4
 8003bf8:	438a      	bics	r2, r1
 8003bfa:	621a      	str	r2, [r3, #32]
 8003bfc:	e01c      	b.n	8003c38 <HAL_RCC_OscConfig+0x3a4>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b05      	cmp	r3, #5
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCC_OscConfig+0x38c>
 8003c06:	4bc2      	ldr	r3, [pc, #776]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c08:	6a1a      	ldr	r2, [r3, #32]
 8003c0a:	4bc1      	ldr	r3, [pc, #772]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c0c:	2104      	movs	r1, #4
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	621a      	str	r2, [r3, #32]
 8003c12:	4bbf      	ldr	r3, [pc, #764]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c14:	6a1a      	ldr	r2, [r3, #32]
 8003c16:	4bbe      	ldr	r3, [pc, #760]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c18:	2101      	movs	r1, #1
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	621a      	str	r2, [r3, #32]
 8003c1e:	e00b      	b.n	8003c38 <HAL_RCC_OscConfig+0x3a4>
 8003c20:	4bbb      	ldr	r3, [pc, #748]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c22:	6a1a      	ldr	r2, [r3, #32]
 8003c24:	4bba      	ldr	r3, [pc, #744]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c26:	2101      	movs	r1, #1
 8003c28:	438a      	bics	r2, r1
 8003c2a:	621a      	str	r2, [r3, #32]
 8003c2c:	4bb8      	ldr	r3, [pc, #736]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c2e:	6a1a      	ldr	r2, [r3, #32]
 8003c30:	4bb7      	ldr	r3, [pc, #732]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c32:	2104      	movs	r1, #4
 8003c34:	438a      	bics	r2, r1
 8003c36:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d014      	beq.n	8003c6a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c40:	f7ff f900 	bl	8002e44 <HAL_GetTick>
 8003c44:	0003      	movs	r3, r0
 8003c46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c48:	e009      	b.n	8003c5e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c4a:	f7ff f8fb 	bl	8002e44 <HAL_GetTick>
 8003c4e:	0002      	movs	r2, r0
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	4aaf      	ldr	r2, [pc, #700]	@ (8003f14 <HAL_RCC_OscConfig+0x680>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e19a      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5e:	4bac      	ldr	r3, [pc, #688]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	2202      	movs	r2, #2
 8003c64:	4013      	ands	r3, r2
 8003c66:	d0f0      	beq.n	8003c4a <HAL_RCC_OscConfig+0x3b6>
 8003c68:	e013      	b.n	8003c92 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6a:	f7ff f8eb 	bl	8002e44 <HAL_GetTick>
 8003c6e:	0003      	movs	r3, r0
 8003c70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c72:	e009      	b.n	8003c88 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c74:	f7ff f8e6 	bl	8002e44 <HAL_GetTick>
 8003c78:	0002      	movs	r2, r0
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	4aa5      	ldr	r2, [pc, #660]	@ (8003f14 <HAL_RCC_OscConfig+0x680>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e185      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c88:	4ba1      	ldr	r3, [pc, #644]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c92:	231f      	movs	r3, #31
 8003c94:	18fb      	adds	r3, r7, r3
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d105      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c9c:	4b9c      	ldr	r3, [pc, #624]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c9e:	69da      	ldr	r2, [r3, #28]
 8003ca0:	4b9b      	ldr	r3, [pc, #620]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003ca2:	499d      	ldr	r1, [pc, #628]	@ (8003f18 <HAL_RCC_OscConfig+0x684>)
 8003ca4:	400a      	ands	r2, r1
 8003ca6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2210      	movs	r2, #16
 8003cae:	4013      	ands	r3, r2
 8003cb0:	d063      	beq.n	8003d7a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d12a      	bne.n	8003d10 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003cba:	4b95      	ldr	r3, [pc, #596]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003cbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cbe:	4b94      	ldr	r3, [pc, #592]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003cc0:	2104      	movs	r1, #4
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003cc6:	4b92      	ldr	r3, [pc, #584]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003cc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cca:	4b91      	ldr	r3, [pc, #580]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003ccc:	2101      	movs	r1, #1
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd2:	f7ff f8b7 	bl	8002e44 <HAL_GetTick>
 8003cd6:	0003      	movs	r3, r0
 8003cd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003cdc:	f7ff f8b2 	bl	8002e44 <HAL_GetTick>
 8003ce0:	0002      	movs	r2, r0
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e152      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003cee:	4b88      	ldr	r3, [pc, #544]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	d0f1      	beq.n	8003cdc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003cf8:	4b85      	ldr	r3, [pc, #532]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cfc:	22f8      	movs	r2, #248	@ 0xf8
 8003cfe:	4393      	bics	r3, r2
 8003d00:	0019      	movs	r1, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	00da      	lsls	r2, r3, #3
 8003d08:	4b81      	ldr	r3, [pc, #516]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003d0e:	e034      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	3305      	adds	r3, #5
 8003d16:	d111      	bne.n	8003d3c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003d18:	4b7d      	ldr	r3, [pc, #500]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d1c:	4b7c      	ldr	r3, [pc, #496]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d1e:	2104      	movs	r1, #4
 8003d20:	438a      	bics	r2, r1
 8003d22:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003d24:	4b7a      	ldr	r3, [pc, #488]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d28:	22f8      	movs	r2, #248	@ 0xf8
 8003d2a:	4393      	bics	r3, r2
 8003d2c:	0019      	movs	r1, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	00da      	lsls	r2, r3, #3
 8003d34:	4b76      	ldr	r3, [pc, #472]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d36:	430a      	orrs	r2, r1
 8003d38:	635a      	str	r2, [r3, #52]	@ 0x34
 8003d3a:	e01e      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003d3c:	4b74      	ldr	r3, [pc, #464]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d40:	4b73      	ldr	r3, [pc, #460]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d42:	2104      	movs	r1, #4
 8003d44:	430a      	orrs	r2, r1
 8003d46:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003d48:	4b71      	ldr	r3, [pc, #452]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d4c:	4b70      	ldr	r3, [pc, #448]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d4e:	2101      	movs	r1, #1
 8003d50:	438a      	bics	r2, r1
 8003d52:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d54:	f7ff f876 	bl	8002e44 <HAL_GetTick>
 8003d58:	0003      	movs	r3, r0
 8003d5a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003d5e:	f7ff f871 	bl	8002e44 <HAL_GetTick>
 8003d62:	0002      	movs	r2, r0
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e111      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003d70:	4b67      	ldr	r3, [pc, #412]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d74:	2202      	movs	r2, #2
 8003d76:	4013      	ands	r3, r2
 8003d78:	d1f1      	bne.n	8003d5e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	4013      	ands	r3, r2
 8003d82:	d05c      	beq.n	8003e3e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003d84:	4b62      	ldr	r3, [pc, #392]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	220c      	movs	r2, #12
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b0c      	cmp	r3, #12
 8003d8e:	d00e      	beq.n	8003dae <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003d90:	4b5f      	ldr	r3, [pc, #380]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	220c      	movs	r2, #12
 8003d96:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d114      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003d9c:	4b5c      	ldr	r3, [pc, #368]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	23c0      	movs	r3, #192	@ 0xc0
 8003da2:	025b      	lsls	r3, r3, #9
 8003da4:	401a      	ands	r2, r3
 8003da6:	23c0      	movs	r3, #192	@ 0xc0
 8003da8:	025b      	lsls	r3, r3, #9
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d10b      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003dae:	4b58      	ldr	r3, [pc, #352]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003db0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003db2:	2380      	movs	r3, #128	@ 0x80
 8003db4:	029b      	lsls	r3, r3, #10
 8003db6:	4013      	ands	r3, r2
 8003db8:	d040      	beq.n	8003e3c <HAL_RCC_OscConfig+0x5a8>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d03c      	beq.n	8003e3c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e0e6      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d01b      	beq.n	8003e06 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003dce:	4b50      	ldr	r3, [pc, #320]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003dd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dd2:	4b4f      	ldr	r3, [pc, #316]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003dd4:	2180      	movs	r1, #128	@ 0x80
 8003dd6:	0249      	lsls	r1, r1, #9
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7ff f832 	bl	8002e44 <HAL_GetTick>
 8003de0:	0003      	movs	r3, r0
 8003de2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003de6:	f7ff f82d 	bl	8002e44 <HAL_GetTick>
 8003dea:	0002      	movs	r2, r0
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e0cd      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003df8:	4b45      	ldr	r3, [pc, #276]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003dfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dfc:	2380      	movs	r3, #128	@ 0x80
 8003dfe:	029b      	lsls	r3, r3, #10
 8003e00:	4013      	ands	r3, r2
 8003e02:	d0f0      	beq.n	8003de6 <HAL_RCC_OscConfig+0x552>
 8003e04:	e01b      	b.n	8003e3e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003e06:	4b42      	ldr	r3, [pc, #264]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003e08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e0a:	4b41      	ldr	r3, [pc, #260]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003e0c:	4943      	ldr	r1, [pc, #268]	@ (8003f1c <HAL_RCC_OscConfig+0x688>)
 8003e0e:	400a      	ands	r2, r1
 8003e10:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e12:	f7ff f817 	bl	8002e44 <HAL_GetTick>
 8003e16:	0003      	movs	r3, r0
 8003e18:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e1c:	f7ff f812 	bl	8002e44 <HAL_GetTick>
 8003e20:	0002      	movs	r2, r0
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e0b2      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003e2e:	4b38      	ldr	r3, [pc, #224]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003e30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e32:	2380      	movs	r3, #128	@ 0x80
 8003e34:	029b      	lsls	r3, r3, #10
 8003e36:	4013      	ands	r3, r2
 8003e38:	d1f0      	bne.n	8003e1c <HAL_RCC_OscConfig+0x588>
 8003e3a:	e000      	b.n	8003e3e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003e3c:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d100      	bne.n	8003e48 <HAL_RCC_OscConfig+0x5b4>
 8003e46:	e0a4      	b.n	8003f92 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e48:	4b31      	ldr	r3, [pc, #196]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	220c      	movs	r2, #12
 8003e4e:	4013      	ands	r3, r2
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d100      	bne.n	8003e56 <HAL_RCC_OscConfig+0x5c2>
 8003e54:	e078      	b.n	8003f48 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d14c      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e5e:	4b2c      	ldr	r3, [pc, #176]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	4b2b      	ldr	r3, [pc, #172]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003e64:	492e      	ldr	r1, [pc, #184]	@ (8003f20 <HAL_RCC_OscConfig+0x68c>)
 8003e66:	400a      	ands	r2, r1
 8003e68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6a:	f7fe ffeb 	bl	8002e44 <HAL_GetTick>
 8003e6e:	0003      	movs	r3, r0
 8003e70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e74:	f7fe ffe6 	bl	8002e44 <HAL_GetTick>
 8003e78:	0002      	movs	r2, r0
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e086      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e86:	4b22      	ldr	r3, [pc, #136]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	2380      	movs	r3, #128	@ 0x80
 8003e8c:	049b      	lsls	r3, r3, #18
 8003e8e:	4013      	ands	r3, r2
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e92:	4b1f      	ldr	r3, [pc, #124]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e96:	220f      	movs	r2, #15
 8003e98:	4393      	bics	r3, r2
 8003e9a:	0019      	movs	r1, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8003f24 <HAL_RCC_OscConfig+0x690>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	0019      	movs	r1, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	4b15      	ldr	r3, [pc, #84]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ec0:	4b13      	ldr	r3, [pc, #76]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	4b12      	ldr	r3, [pc, #72]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003ec6:	2180      	movs	r1, #128	@ 0x80
 8003ec8:	0449      	lsls	r1, r1, #17
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ece:	f7fe ffb9 	bl	8002e44 <HAL_GetTick>
 8003ed2:	0003      	movs	r3, r0
 8003ed4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed8:	f7fe ffb4 	bl	8002e44 <HAL_GetTick>
 8003edc:	0002      	movs	r2, r0
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e054      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eea:	4b09      	ldr	r3, [pc, #36]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	2380      	movs	r3, #128	@ 0x80
 8003ef0:	049b      	lsls	r3, r3, #18
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x644>
 8003ef6:	e04c      	b.n	8003f92 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef8:	4b05      	ldr	r3, [pc, #20]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	4b04      	ldr	r3, [pc, #16]	@ (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003efe:	4908      	ldr	r1, [pc, #32]	@ (8003f20 <HAL_RCC_OscConfig+0x68c>)
 8003f00:	400a      	ands	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f04:	f7fe ff9e 	bl	8002e44 <HAL_GetTick>
 8003f08:	0003      	movs	r3, r0
 8003f0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f0c:	e015      	b.n	8003f3a <HAL_RCC_OscConfig+0x6a6>
 8003f0e:	46c0      	nop			@ (mov r8, r8)
 8003f10:	40021000 	.word	0x40021000
 8003f14:	00001388 	.word	0x00001388
 8003f18:	efffffff 	.word	0xefffffff
 8003f1c:	fffeffff 	.word	0xfffeffff
 8003f20:	feffffff 	.word	0xfeffffff
 8003f24:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f28:	f7fe ff8c 	bl	8002e44 <HAL_GetTick>
 8003f2c:	0002      	movs	r2, r0
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e02c      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f3a:	4b18      	ldr	r3, [pc, #96]	@ (8003f9c <HAL_RCC_OscConfig+0x708>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	2380      	movs	r3, #128	@ 0x80
 8003f40:	049b      	lsls	r3, r3, #18
 8003f42:	4013      	ands	r3, r2
 8003f44:	d1f0      	bne.n	8003f28 <HAL_RCC_OscConfig+0x694>
 8003f46:	e024      	b.n	8003f92 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e01f      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003f54:	4b11      	ldr	r3, [pc, #68]	@ (8003f9c <HAL_RCC_OscConfig+0x708>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003f5a:	4b10      	ldr	r3, [pc, #64]	@ (8003f9c <HAL_RCC_OscConfig+0x708>)
 8003f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	23c0      	movs	r3, #192	@ 0xc0
 8003f64:	025b      	lsls	r3, r3, #9
 8003f66:	401a      	ands	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d10e      	bne.n	8003f8e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	220f      	movs	r2, #15
 8003f74:	401a      	ands	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d107      	bne.n	8003f8e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	23f0      	movs	r3, #240	@ 0xf0
 8003f82:	039b      	lsls	r3, r3, #14
 8003f84:	401a      	ands	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d001      	beq.n	8003f92 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	0018      	movs	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	b008      	add	sp, #32
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40021000 	.word	0x40021000

08003fa0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e0bf      	b.n	8004134 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb4:	4b61      	ldr	r3, [pc, #388]	@ (800413c <HAL_RCC_ClockConfig+0x19c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	4013      	ands	r3, r2
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d911      	bls.n	8003fe6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc2:	4b5e      	ldr	r3, [pc, #376]	@ (800413c <HAL_RCC_ClockConfig+0x19c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	4393      	bics	r3, r2
 8003fca:	0019      	movs	r1, r3
 8003fcc:	4b5b      	ldr	r3, [pc, #364]	@ (800413c <HAL_RCC_ClockConfig+0x19c>)
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd4:	4b59      	ldr	r3, [pc, #356]	@ (800413c <HAL_RCC_ClockConfig+0x19c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	4013      	ands	r3, r2
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d001      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e0a6      	b.n	8004134 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2202      	movs	r2, #2
 8003fec:	4013      	ands	r3, r2
 8003fee:	d015      	beq.n	800401c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2204      	movs	r2, #4
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	d006      	beq.n	8004008 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003ffa:	4b51      	ldr	r3, [pc, #324]	@ (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	4b50      	ldr	r3, [pc, #320]	@ (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 8004000:	21e0      	movs	r1, #224	@ 0xe0
 8004002:	00c9      	lsls	r1, r1, #3
 8004004:	430a      	orrs	r2, r1
 8004006:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004008:	4b4d      	ldr	r3, [pc, #308]	@ (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	22f0      	movs	r2, #240	@ 0xf0
 800400e:	4393      	bics	r3, r2
 8004010:	0019      	movs	r1, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	4b4a      	ldr	r3, [pc, #296]	@ (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 8004018:	430a      	orrs	r2, r1
 800401a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2201      	movs	r2, #1
 8004022:	4013      	ands	r3, r2
 8004024:	d04c      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d107      	bne.n	800403e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402e:	4b44      	ldr	r3, [pc, #272]	@ (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	2380      	movs	r3, #128	@ 0x80
 8004034:	029b      	lsls	r3, r3, #10
 8004036:	4013      	ands	r3, r2
 8004038:	d120      	bne.n	800407c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e07a      	b.n	8004134 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d107      	bne.n	8004056 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004046:	4b3e      	ldr	r3, [pc, #248]	@ (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	2380      	movs	r3, #128	@ 0x80
 800404c:	049b      	lsls	r3, r3, #18
 800404e:	4013      	ands	r3, r2
 8004050:	d114      	bne.n	800407c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e06e      	b.n	8004134 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b03      	cmp	r3, #3
 800405c:	d107      	bne.n	800406e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800405e:	4b38      	ldr	r3, [pc, #224]	@ (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 8004060:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004062:	2380      	movs	r3, #128	@ 0x80
 8004064:	029b      	lsls	r3, r3, #10
 8004066:	4013      	ands	r3, r2
 8004068:	d108      	bne.n	800407c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e062      	b.n	8004134 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800406e:	4b34      	ldr	r3, [pc, #208]	@ (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2202      	movs	r2, #2
 8004074:	4013      	ands	r3, r2
 8004076:	d101      	bne.n	800407c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e05b      	b.n	8004134 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800407c:	4b30      	ldr	r3, [pc, #192]	@ (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2203      	movs	r2, #3
 8004082:	4393      	bics	r3, r2
 8004084:	0019      	movs	r1, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	4b2d      	ldr	r3, [pc, #180]	@ (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 800408c:	430a      	orrs	r2, r1
 800408e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004090:	f7fe fed8 	bl	8002e44 <HAL_GetTick>
 8004094:	0003      	movs	r3, r0
 8004096:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004098:	e009      	b.n	80040ae <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800409a:	f7fe fed3 	bl	8002e44 <HAL_GetTick>
 800409e:	0002      	movs	r2, r0
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	4a27      	ldr	r2, [pc, #156]	@ (8004144 <HAL_RCC_ClockConfig+0x1a4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e042      	b.n	8004134 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ae:	4b24      	ldr	r3, [pc, #144]	@ (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	220c      	movs	r2, #12
 80040b4:	401a      	ands	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	429a      	cmp	r2, r3
 80040be:	d1ec      	bne.n	800409a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040c0:	4b1e      	ldr	r3, [pc, #120]	@ (800413c <HAL_RCC_ClockConfig+0x19c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2201      	movs	r2, #1
 80040c6:	4013      	ands	r3, r2
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d211      	bcs.n	80040f2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ce:	4b1b      	ldr	r3, [pc, #108]	@ (800413c <HAL_RCC_ClockConfig+0x19c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2201      	movs	r2, #1
 80040d4:	4393      	bics	r3, r2
 80040d6:	0019      	movs	r1, r3
 80040d8:	4b18      	ldr	r3, [pc, #96]	@ (800413c <HAL_RCC_ClockConfig+0x19c>)
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e0:	4b16      	ldr	r3, [pc, #88]	@ (800413c <HAL_RCC_ClockConfig+0x19c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2201      	movs	r2, #1
 80040e6:	4013      	ands	r3, r2
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d001      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e020      	b.n	8004134 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2204      	movs	r2, #4
 80040f8:	4013      	ands	r3, r2
 80040fa:	d009      	beq.n	8004110 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80040fc:	4b10      	ldr	r3, [pc, #64]	@ (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	4a11      	ldr	r2, [pc, #68]	@ (8004148 <HAL_RCC_ClockConfig+0x1a8>)
 8004102:	4013      	ands	r3, r2
 8004104:	0019      	movs	r1, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	4b0d      	ldr	r3, [pc, #52]	@ (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 800410c:	430a      	orrs	r2, r1
 800410e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004110:	f000 f820 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8004114:	0001      	movs	r1, r0
 8004116:	4b0a      	ldr	r3, [pc, #40]	@ (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	091b      	lsrs	r3, r3, #4
 800411c:	220f      	movs	r2, #15
 800411e:	4013      	ands	r3, r2
 8004120:	4a0a      	ldr	r2, [pc, #40]	@ (800414c <HAL_RCC_ClockConfig+0x1ac>)
 8004122:	5cd3      	ldrb	r3, [r2, r3]
 8004124:	000a      	movs	r2, r1
 8004126:	40da      	lsrs	r2, r3
 8004128:	4b09      	ldr	r3, [pc, #36]	@ (8004150 <HAL_RCC_ClockConfig+0x1b0>)
 800412a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800412c:	2003      	movs	r0, #3
 800412e:	f7fe fe43 	bl	8002db8 <HAL_InitTick>
  
  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	0018      	movs	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	b004      	add	sp, #16
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40022000 	.word	0x40022000
 8004140:	40021000 	.word	0x40021000
 8004144:	00001388 	.word	0x00001388
 8004148:	fffff8ff 	.word	0xfffff8ff
 800414c:	080067a0 	.word	0x080067a0
 8004150:	20000040 	.word	0x20000040

08004154 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	2300      	movs	r3, #0
 8004160:	60bb      	str	r3, [r7, #8]
 8004162:	2300      	movs	r3, #0
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	2300      	movs	r3, #0
 8004168:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800416e:	4b2d      	ldr	r3, [pc, #180]	@ (8004224 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	220c      	movs	r2, #12
 8004178:	4013      	ands	r3, r2
 800417a:	2b0c      	cmp	r3, #12
 800417c:	d046      	beq.n	800420c <HAL_RCC_GetSysClockFreq+0xb8>
 800417e:	d848      	bhi.n	8004212 <HAL_RCC_GetSysClockFreq+0xbe>
 8004180:	2b04      	cmp	r3, #4
 8004182:	d002      	beq.n	800418a <HAL_RCC_GetSysClockFreq+0x36>
 8004184:	2b08      	cmp	r3, #8
 8004186:	d003      	beq.n	8004190 <HAL_RCC_GetSysClockFreq+0x3c>
 8004188:	e043      	b.n	8004212 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800418a:	4b27      	ldr	r3, [pc, #156]	@ (8004228 <HAL_RCC_GetSysClockFreq+0xd4>)
 800418c:	613b      	str	r3, [r7, #16]
      break;
 800418e:	e043      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	0c9b      	lsrs	r3, r3, #18
 8004194:	220f      	movs	r2, #15
 8004196:	4013      	ands	r3, r2
 8004198:	4a24      	ldr	r2, [pc, #144]	@ (800422c <HAL_RCC_GetSysClockFreq+0xd8>)
 800419a:	5cd3      	ldrb	r3, [r2, r3]
 800419c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800419e:	4b21      	ldr	r3, [pc, #132]	@ (8004224 <HAL_RCC_GetSysClockFreq+0xd0>)
 80041a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a2:	220f      	movs	r2, #15
 80041a4:	4013      	ands	r3, r2
 80041a6:	4a22      	ldr	r2, [pc, #136]	@ (8004230 <HAL_RCC_GetSysClockFreq+0xdc>)
 80041a8:	5cd3      	ldrb	r3, [r2, r3]
 80041aa:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	23c0      	movs	r3, #192	@ 0xc0
 80041b0:	025b      	lsls	r3, r3, #9
 80041b2:	401a      	ands	r2, r3
 80041b4:	2380      	movs	r3, #128	@ 0x80
 80041b6:	025b      	lsls	r3, r3, #9
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d109      	bne.n	80041d0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041bc:	68b9      	ldr	r1, [r7, #8]
 80041be:	481a      	ldr	r0, [pc, #104]	@ (8004228 <HAL_RCC_GetSysClockFreq+0xd4>)
 80041c0:	f7fb ffa2 	bl	8000108 <__udivsi3>
 80041c4:	0003      	movs	r3, r0
 80041c6:	001a      	movs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4353      	muls	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]
 80041ce:	e01a      	b.n	8004206 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	23c0      	movs	r3, #192	@ 0xc0
 80041d4:	025b      	lsls	r3, r3, #9
 80041d6:	401a      	ands	r2, r3
 80041d8:	23c0      	movs	r3, #192	@ 0xc0
 80041da:	025b      	lsls	r3, r3, #9
 80041dc:	429a      	cmp	r2, r3
 80041de:	d109      	bne.n	80041f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041e0:	68b9      	ldr	r1, [r7, #8]
 80041e2:	4814      	ldr	r0, [pc, #80]	@ (8004234 <HAL_RCC_GetSysClockFreq+0xe0>)
 80041e4:	f7fb ff90 	bl	8000108 <__udivsi3>
 80041e8:	0003      	movs	r3, r0
 80041ea:	001a      	movs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4353      	muls	r3, r2
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	e008      	b.n	8004206 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041f4:	68b9      	ldr	r1, [r7, #8]
 80041f6:	480c      	ldr	r0, [pc, #48]	@ (8004228 <HAL_RCC_GetSysClockFreq+0xd4>)
 80041f8:	f7fb ff86 	bl	8000108 <__udivsi3>
 80041fc:	0003      	movs	r3, r0
 80041fe:	001a      	movs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4353      	muls	r3, r2
 8004204:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	613b      	str	r3, [r7, #16]
      break;
 800420a:	e005      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800420c:	4b09      	ldr	r3, [pc, #36]	@ (8004234 <HAL_RCC_GetSysClockFreq+0xe0>)
 800420e:	613b      	str	r3, [r7, #16]
      break;
 8004210:	e002      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004212:	4b05      	ldr	r3, [pc, #20]	@ (8004228 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004214:	613b      	str	r3, [r7, #16]
      break;
 8004216:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004218:	693b      	ldr	r3, [r7, #16]
}
 800421a:	0018      	movs	r0, r3
 800421c:	46bd      	mov	sp, r7
 800421e:	b006      	add	sp, #24
 8004220:	bd80      	pop	{r7, pc}
 8004222:	46c0      	nop			@ (mov r8, r8)
 8004224:	40021000 	.word	0x40021000
 8004228:	007a1200 	.word	0x007a1200
 800422c:	080067b8 	.word	0x080067b8
 8004230:	080067c8 	.word	0x080067c8
 8004234:	02dc6c00 	.word	0x02dc6c00

08004238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800423c:	4b02      	ldr	r3, [pc, #8]	@ (8004248 <HAL_RCC_GetHCLKFreq+0x10>)
 800423e:	681b      	ldr	r3, [r3, #0]
}
 8004240:	0018      	movs	r0, r3
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	46c0      	nop			@ (mov r8, r8)
 8004248:	20000040 	.word	0x20000040

0800424c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004250:	f7ff fff2 	bl	8004238 <HAL_RCC_GetHCLKFreq>
 8004254:	0001      	movs	r1, r0
 8004256:	4b06      	ldr	r3, [pc, #24]	@ (8004270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	0a1b      	lsrs	r3, r3, #8
 800425c:	2207      	movs	r2, #7
 800425e:	4013      	ands	r3, r2
 8004260:	4a04      	ldr	r2, [pc, #16]	@ (8004274 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004262:	5cd3      	ldrb	r3, [r2, r3]
 8004264:	40d9      	lsrs	r1, r3
 8004266:	000b      	movs	r3, r1
}    
 8004268:	0018      	movs	r0, r3
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	46c0      	nop			@ (mov r8, r8)
 8004270:	40021000 	.word	0x40021000
 8004274:	080067b0 	.word	0x080067b0

08004278 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	2380      	movs	r3, #128	@ 0x80
 800428e:	025b      	lsls	r3, r3, #9
 8004290:	4013      	ands	r3, r2
 8004292:	d100      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004294:	e08e      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004296:	2017      	movs	r0, #23
 8004298:	183b      	adds	r3, r7, r0
 800429a:	2200      	movs	r2, #0
 800429c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800429e:	4b6e      	ldr	r3, [pc, #440]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80042a0:	69da      	ldr	r2, [r3, #28]
 80042a2:	2380      	movs	r3, #128	@ 0x80
 80042a4:	055b      	lsls	r3, r3, #21
 80042a6:	4013      	ands	r3, r2
 80042a8:	d110      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042aa:	4b6b      	ldr	r3, [pc, #428]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80042ac:	69da      	ldr	r2, [r3, #28]
 80042ae:	4b6a      	ldr	r3, [pc, #424]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80042b0:	2180      	movs	r1, #128	@ 0x80
 80042b2:	0549      	lsls	r1, r1, #21
 80042b4:	430a      	orrs	r2, r1
 80042b6:	61da      	str	r2, [r3, #28]
 80042b8:	4b67      	ldr	r3, [pc, #412]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80042ba:	69da      	ldr	r2, [r3, #28]
 80042bc:	2380      	movs	r3, #128	@ 0x80
 80042be:	055b      	lsls	r3, r3, #21
 80042c0:	4013      	ands	r3, r2
 80042c2:	60bb      	str	r3, [r7, #8]
 80042c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042c6:	183b      	adds	r3, r7, r0
 80042c8:	2201      	movs	r2, #1
 80042ca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042cc:	4b63      	ldr	r3, [pc, #396]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	2380      	movs	r3, #128	@ 0x80
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	4013      	ands	r3, r2
 80042d6:	d11a      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042d8:	4b60      	ldr	r3, [pc, #384]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	4b5f      	ldr	r3, [pc, #380]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80042de:	2180      	movs	r1, #128	@ 0x80
 80042e0:	0049      	lsls	r1, r1, #1
 80042e2:	430a      	orrs	r2, r1
 80042e4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e6:	f7fe fdad 	bl	8002e44 <HAL_GetTick>
 80042ea:	0003      	movs	r3, r0
 80042ec:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ee:	e008      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f0:	f7fe fda8 	bl	8002e44 <HAL_GetTick>
 80042f4:	0002      	movs	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b64      	cmp	r3, #100	@ 0x64
 80042fc:	d901      	bls.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e0a6      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004302:	4b56      	ldr	r3, [pc, #344]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	2380      	movs	r3, #128	@ 0x80
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	4013      	ands	r3, r2
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800430e:	4b52      	ldr	r3, [pc, #328]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004310:	6a1a      	ldr	r2, [r3, #32]
 8004312:	23c0      	movs	r3, #192	@ 0xc0
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4013      	ands	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d034      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	23c0      	movs	r3, #192	@ 0xc0
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4013      	ands	r3, r2
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	429a      	cmp	r2, r3
 800432e:	d02c      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004330:	4b49      	ldr	r3, [pc, #292]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	4a4a      	ldr	r2, [pc, #296]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004336:	4013      	ands	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800433a:	4b47      	ldr	r3, [pc, #284]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800433c:	6a1a      	ldr	r2, [r3, #32]
 800433e:	4b46      	ldr	r3, [pc, #280]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004340:	2180      	movs	r1, #128	@ 0x80
 8004342:	0249      	lsls	r1, r1, #9
 8004344:	430a      	orrs	r2, r1
 8004346:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004348:	4b43      	ldr	r3, [pc, #268]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800434a:	6a1a      	ldr	r2, [r3, #32]
 800434c:	4b42      	ldr	r3, [pc, #264]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800434e:	4945      	ldr	r1, [pc, #276]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004350:	400a      	ands	r2, r1
 8004352:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004354:	4b40      	ldr	r3, [pc, #256]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2201      	movs	r2, #1
 800435e:	4013      	ands	r3, r2
 8004360:	d013      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004362:	f7fe fd6f 	bl	8002e44 <HAL_GetTick>
 8004366:	0003      	movs	r3, r0
 8004368:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436a:	e009      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436c:	f7fe fd6a 	bl	8002e44 <HAL_GetTick>
 8004370:	0002      	movs	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	4a3c      	ldr	r2, [pc, #240]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d901      	bls.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e067      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004380:	4b35      	ldr	r3, [pc, #212]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	2202      	movs	r2, #2
 8004386:	4013      	ands	r3, r2
 8004388:	d0f0      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800438a:	4b33      	ldr	r3, [pc, #204]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	4a34      	ldr	r2, [pc, #208]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004390:	4013      	ands	r3, r2
 8004392:	0019      	movs	r1, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	4b2f      	ldr	r3, [pc, #188]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800439a:	430a      	orrs	r2, r1
 800439c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800439e:	2317      	movs	r3, #23
 80043a0:	18fb      	adds	r3, r7, r3
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d105      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043aa:	69da      	ldr	r2, [r3, #28]
 80043ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043ae:	492f      	ldr	r1, [pc, #188]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80043b0:	400a      	ands	r2, r1
 80043b2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2201      	movs	r2, #1
 80043ba:	4013      	ands	r3, r2
 80043bc:	d009      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043be:	4b26      	ldr	r3, [pc, #152]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c2:	2203      	movs	r2, #3
 80043c4:	4393      	bics	r3, r2
 80043c6:	0019      	movs	r1, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	4b22      	ldr	r3, [pc, #136]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043ce:	430a      	orrs	r2, r1
 80043d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2202      	movs	r2, #2
 80043d8:	4013      	ands	r3, r2
 80043da:	d009      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e0:	4a23      	ldr	r2, [pc, #140]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043e2:	4013      	ands	r3, r2
 80043e4:	0019      	movs	r1, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043ec:	430a      	orrs	r2, r1
 80043ee:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2220      	movs	r2, #32
 80043f6:	4013      	ands	r3, r2
 80043f8:	d009      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043fa:	4b17      	ldr	r3, [pc, #92]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fe:	2210      	movs	r2, #16
 8004400:	4393      	bics	r3, r2
 8004402:	0019      	movs	r1, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691a      	ldr	r2, [r3, #16]
 8004408:	4b13      	ldr	r3, [pc, #76]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800440a:	430a      	orrs	r2, r1
 800440c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	2380      	movs	r3, #128	@ 0x80
 8004414:	029b      	lsls	r3, r3, #10
 8004416:	4013      	ands	r3, r2
 8004418:	d009      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800441a:	4b0f      	ldr	r3, [pc, #60]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800441c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441e:	2280      	movs	r2, #128	@ 0x80
 8004420:	4393      	bics	r3, r2
 8004422:	0019      	movs	r1, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699a      	ldr	r2, [r3, #24]
 8004428:	4b0b      	ldr	r3, [pc, #44]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800442a:	430a      	orrs	r2, r1
 800442c:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	2380      	movs	r3, #128	@ 0x80
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4013      	ands	r3, r2
 8004438:	d009      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800443a:	4b07      	ldr	r3, [pc, #28]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800443c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443e:	2240      	movs	r2, #64	@ 0x40
 8004440:	4393      	bics	r3, r2
 8004442:	0019      	movs	r1, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	695a      	ldr	r2, [r3, #20]
 8004448:	4b03      	ldr	r3, [pc, #12]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800444a:	430a      	orrs	r2, r1
 800444c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	0018      	movs	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	b006      	add	sp, #24
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40021000 	.word	0x40021000
 800445c:	40007000 	.word	0x40007000
 8004460:	fffffcff 	.word	0xfffffcff
 8004464:	fffeffff 	.word	0xfffeffff
 8004468:	00001388 	.word	0x00001388
 800446c:	efffffff 	.word	0xefffffff
 8004470:	fffcffff 	.word	0xfffcffff

08004474 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e0a8      	b.n	80045d8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	2382      	movs	r3, #130	@ 0x82
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	429a      	cmp	r2, r3
 8004498:	d009      	beq.n	80044ae <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	61da      	str	r2, [r3, #28]
 80044a0:	e005      	b.n	80044ae <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	225d      	movs	r2, #93	@ 0x5d
 80044b8:	5c9b      	ldrb	r3, [r3, r2]
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d107      	bne.n	80044d0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	225c      	movs	r2, #92	@ 0x5c
 80044c4:	2100      	movs	r1, #0
 80044c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	0018      	movs	r0, r3
 80044cc:	f7fe fb1a 	bl	8002b04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	225d      	movs	r2, #93	@ 0x5d
 80044d4:	2102      	movs	r1, #2
 80044d6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2140      	movs	r1, #64	@ 0x40
 80044e4:	438a      	bics	r2, r1
 80044e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	23e0      	movs	r3, #224	@ 0xe0
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d902      	bls.n	80044fa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	e002      	b.n	8004500 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80044fa:	2380      	movs	r3, #128	@ 0x80
 80044fc:	015b      	lsls	r3, r3, #5
 80044fe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	23f0      	movs	r3, #240	@ 0xf0
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	429a      	cmp	r2, r3
 800450a:	d008      	beq.n	800451e <HAL_SPI_Init+0xaa>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	23e0      	movs	r3, #224	@ 0xe0
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	429a      	cmp	r2, r3
 8004516:	d002      	beq.n	800451e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	2382      	movs	r3, #130	@ 0x82
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	401a      	ands	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6899      	ldr	r1, [r3, #8]
 800452c:	2384      	movs	r3, #132	@ 0x84
 800452e:	021b      	lsls	r3, r3, #8
 8004530:	400b      	ands	r3, r1
 8004532:	431a      	orrs	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2102      	movs	r1, #2
 800453a:	400b      	ands	r3, r1
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	2101      	movs	r1, #1
 8004544:	400b      	ands	r3, r1
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6999      	ldr	r1, [r3, #24]
 800454c:	2380      	movs	r3, #128	@ 0x80
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	400b      	ands	r3, r1
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	2138      	movs	r1, #56	@ 0x38
 800455a:	400b      	ands	r3, r1
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	2180      	movs	r1, #128	@ 0x80
 8004564:	400b      	ands	r3, r1
 8004566:	431a      	orrs	r2, r3
 8004568:	0011      	movs	r1, r2
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800456e:	2380      	movs	r3, #128	@ 0x80
 8004570:	019b      	lsls	r3, r3, #6
 8004572:	401a      	ands	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	0c1b      	lsrs	r3, r3, #16
 8004582:	2204      	movs	r2, #4
 8004584:	401a      	ands	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458a:	2110      	movs	r1, #16
 800458c:	400b      	ands	r3, r1
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004594:	2108      	movs	r1, #8
 8004596:	400b      	ands	r3, r1
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68d9      	ldr	r1, [r3, #12]
 800459e:	23f0      	movs	r3, #240	@ 0xf0
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	400b      	ands	r3, r1
 80045a4:	431a      	orrs	r2, r3
 80045a6:	0011      	movs	r1, r2
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	2380      	movs	r3, #128	@ 0x80
 80045ac:	015b      	lsls	r3, r3, #5
 80045ae:	401a      	ands	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	69da      	ldr	r2, [r3, #28]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4907      	ldr	r1, [pc, #28]	@ (80045e0 <HAL_SPI_Init+0x16c>)
 80045c4:	400a      	ands	r2, r1
 80045c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	225d      	movs	r2, #93	@ 0x5d
 80045d2:	2101      	movs	r1, #1
 80045d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	0018      	movs	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	b004      	add	sp, #16
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	fffff7ff 	.word	0xfffff7ff

080045e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b088      	sub	sp, #32
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	603b      	str	r3, [r7, #0]
 80045f0:	1dbb      	adds	r3, r7, #6
 80045f2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045f4:	231f      	movs	r3, #31
 80045f6:	18fb      	adds	r3, r7, r3
 80045f8:	2200      	movs	r2, #0
 80045fa:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	225c      	movs	r2, #92	@ 0x5c
 8004600:	5c9b      	ldrb	r3, [r3, r2]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d101      	bne.n	800460a <HAL_SPI_Transmit+0x26>
 8004606:	2302      	movs	r3, #2
 8004608:	e147      	b.n	800489a <HAL_SPI_Transmit+0x2b6>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	225c      	movs	r2, #92	@ 0x5c
 800460e:	2101      	movs	r1, #1
 8004610:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004612:	f7fe fc17 	bl	8002e44 <HAL_GetTick>
 8004616:	0003      	movs	r3, r0
 8004618:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800461a:	2316      	movs	r3, #22
 800461c:	18fb      	adds	r3, r7, r3
 800461e:	1dba      	adds	r2, r7, #6
 8004620:	8812      	ldrh	r2, [r2, #0]
 8004622:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	225d      	movs	r2, #93	@ 0x5d
 8004628:	5c9b      	ldrb	r3, [r3, r2]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b01      	cmp	r3, #1
 800462e:	d004      	beq.n	800463a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004630:	231f      	movs	r3, #31
 8004632:	18fb      	adds	r3, r7, r3
 8004634:	2202      	movs	r2, #2
 8004636:	701a      	strb	r2, [r3, #0]
    goto error;
 8004638:	e128      	b.n	800488c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <HAL_SPI_Transmit+0x64>
 8004640:	1dbb      	adds	r3, r7, #6
 8004642:	881b      	ldrh	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d104      	bne.n	8004652 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004648:	231f      	movs	r3, #31
 800464a:	18fb      	adds	r3, r7, r3
 800464c:	2201      	movs	r2, #1
 800464e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004650:	e11c      	b.n	800488c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	225d      	movs	r2, #93	@ 0x5d
 8004656:	2103      	movs	r1, #3
 8004658:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1dba      	adds	r2, r7, #6
 800466a:	8812      	ldrh	r2, [r2, #0]
 800466c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	1dba      	adds	r2, r7, #6
 8004672:	8812      	ldrh	r2, [r2, #0]
 8004674:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2244      	movs	r2, #68	@ 0x44
 8004680:	2100      	movs	r1, #0
 8004682:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2246      	movs	r2, #70	@ 0x46
 8004688:	2100      	movs	r1, #0
 800468a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	2380      	movs	r3, #128	@ 0x80
 800469e:	021b      	lsls	r3, r3, #8
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d110      	bne.n	80046c6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2140      	movs	r1, #64	@ 0x40
 80046b0:	438a      	bics	r2, r1
 80046b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2180      	movs	r1, #128	@ 0x80
 80046c0:	01c9      	lsls	r1, r1, #7
 80046c2:	430a      	orrs	r2, r1
 80046c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2240      	movs	r2, #64	@ 0x40
 80046ce:	4013      	ands	r3, r2
 80046d0:	2b40      	cmp	r3, #64	@ 0x40
 80046d2:	d007      	beq.n	80046e4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2140      	movs	r1, #64	@ 0x40
 80046e0:	430a      	orrs	r2, r1
 80046e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	23e0      	movs	r3, #224	@ 0xe0
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d952      	bls.n	8004796 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d004      	beq.n	8004702 <HAL_SPI_Transmit+0x11e>
 80046f8:	2316      	movs	r3, #22
 80046fa:	18fb      	adds	r3, r7, r3
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d143      	bne.n	800478a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004706:	881a      	ldrh	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004712:	1c9a      	adds	r2, r3, #2
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800471c:	b29b      	uxth	r3, r3
 800471e:	3b01      	subs	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004726:	e030      	b.n	800478a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	2202      	movs	r2, #2
 8004730:	4013      	ands	r3, r2
 8004732:	2b02      	cmp	r3, #2
 8004734:	d112      	bne.n	800475c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800473a:	881a      	ldrh	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004746:	1c9a      	adds	r2, r3, #2
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004750:	b29b      	uxth	r3, r3
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800475a:	e016      	b.n	800478a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800475c:	f7fe fb72 	bl	8002e44 <HAL_GetTick>
 8004760:	0002      	movs	r2, r0
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d802      	bhi.n	8004772 <HAL_SPI_Transmit+0x18e>
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	3301      	adds	r3, #1
 8004770:	d102      	bne.n	8004778 <HAL_SPI_Transmit+0x194>
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d108      	bne.n	800478a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8004778:	231f      	movs	r3, #31
 800477a:	18fb      	adds	r3, r7, r3
 800477c:	2203      	movs	r2, #3
 800477e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	225d      	movs	r2, #93	@ 0x5d
 8004784:	2101      	movs	r1, #1
 8004786:	5499      	strb	r1, [r3, r2]
          goto error;
 8004788:	e080      	b.n	800488c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1c9      	bne.n	8004728 <HAL_SPI_Transmit+0x144>
 8004794:	e053      	b.n	800483e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d004      	beq.n	80047a8 <HAL_SPI_Transmit+0x1c4>
 800479e:	2316      	movs	r3, #22
 80047a0:	18fb      	adds	r3, r7, r3
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d145      	bne.n	8004834 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	330c      	adds	r3, #12
 80047b2:	7812      	ldrb	r2, [r2, #0]
 80047b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	3b01      	subs	r3, #1
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80047ce:	e031      	b.n	8004834 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	2202      	movs	r2, #2
 80047d8:	4013      	ands	r3, r2
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d113      	bne.n	8004806 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	330c      	adds	r3, #12
 80047e8:	7812      	ldrb	r2, [r2, #0]
 80047ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	3b01      	subs	r3, #1
 80047fe:	b29a      	uxth	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004804:	e016      	b.n	8004834 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004806:	f7fe fb1d 	bl	8002e44 <HAL_GetTick>
 800480a:	0002      	movs	r2, r0
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d802      	bhi.n	800481c <HAL_SPI_Transmit+0x238>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	3301      	adds	r3, #1
 800481a:	d102      	bne.n	8004822 <HAL_SPI_Transmit+0x23e>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d108      	bne.n	8004834 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8004822:	231f      	movs	r3, #31
 8004824:	18fb      	adds	r3, r7, r3
 8004826:	2203      	movs	r2, #3
 8004828:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	225d      	movs	r2, #93	@ 0x5d
 800482e:	2101      	movs	r1, #1
 8004830:	5499      	strb	r1, [r3, r2]
          goto error;
 8004832:	e02b      	b.n	800488c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1c8      	bne.n	80047d0 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	6839      	ldr	r1, [r7, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	0018      	movs	r0, r3
 8004846:	f000 f969 	bl	8004b1c <SPI_EndRxTxTransaction>
 800484a:	1e03      	subs	r3, r0, #0
 800484c:	d002      	beq.n	8004854 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2220      	movs	r2, #32
 8004852:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10a      	bne.n	8004872 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800485c:	2300      	movs	r3, #0
 800485e:	613b      	str	r3, [r7, #16]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	613b      	str	r3, [r7, #16]
 8004870:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004876:	2b00      	cmp	r3, #0
 8004878:	d004      	beq.n	8004884 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800487a:	231f      	movs	r3, #31
 800487c:	18fb      	adds	r3, r7, r3
 800487e:	2201      	movs	r2, #1
 8004880:	701a      	strb	r2, [r3, #0]
 8004882:	e003      	b.n	800488c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	225d      	movs	r2, #93	@ 0x5d
 8004888:	2101      	movs	r1, #1
 800488a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	225c      	movs	r2, #92	@ 0x5c
 8004890:	2100      	movs	r1, #0
 8004892:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004894:	231f      	movs	r3, #31
 8004896:	18fb      	adds	r3, r7, r3
 8004898:	781b      	ldrb	r3, [r3, #0]
}
 800489a:	0018      	movs	r0, r3
 800489c:	46bd      	mov	sp, r7
 800489e:	b008      	add	sp, #32
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b082      	sub	sp, #8
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	225d      	movs	r2, #93	@ 0x5d
 80048ae:	5c9b      	ldrb	r3, [r3, r2]
 80048b0:	b2db      	uxtb	r3, r3
}
 80048b2:	0018      	movs	r0, r3
 80048b4:	46bd      	mov	sp, r7
 80048b6:	b002      	add	sp, #8
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b088      	sub	sp, #32
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	603b      	str	r3, [r7, #0]
 80048c8:	1dfb      	adds	r3, r7, #7
 80048ca:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048cc:	f7fe faba 	bl	8002e44 <HAL_GetTick>
 80048d0:	0002      	movs	r2, r0
 80048d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d4:	1a9b      	subs	r3, r3, r2
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	18d3      	adds	r3, r2, r3
 80048da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048dc:	f7fe fab2 	bl	8002e44 <HAL_GetTick>
 80048e0:	0003      	movs	r3, r0
 80048e2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048e4:	4b3a      	ldr	r3, [pc, #232]	@ (80049d0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	015b      	lsls	r3, r3, #5
 80048ea:	0d1b      	lsrs	r3, r3, #20
 80048ec:	69fa      	ldr	r2, [r7, #28]
 80048ee:	4353      	muls	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048f2:	e058      	b.n	80049a6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	3301      	adds	r3, #1
 80048f8:	d055      	beq.n	80049a6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048fa:	f7fe faa3 	bl	8002e44 <HAL_GetTick>
 80048fe:	0002      	movs	r2, r0
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	69fa      	ldr	r2, [r7, #28]
 8004906:	429a      	cmp	r2, r3
 8004908:	d902      	bls.n	8004910 <SPI_WaitFlagStateUntilTimeout+0x54>
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d142      	bne.n	8004996 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	21e0      	movs	r1, #224	@ 0xe0
 800491c:	438a      	bics	r2, r1
 800491e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	2382      	movs	r3, #130	@ 0x82
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	429a      	cmp	r2, r3
 800492a:	d113      	bne.n	8004954 <SPI_WaitFlagStateUntilTimeout+0x98>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	2380      	movs	r3, #128	@ 0x80
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	429a      	cmp	r2, r3
 8004936:	d005      	beq.n	8004944 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	2380      	movs	r3, #128	@ 0x80
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	429a      	cmp	r2, r3
 8004942:	d107      	bne.n	8004954 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2140      	movs	r1, #64	@ 0x40
 8004950:	438a      	bics	r2, r1
 8004952:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004958:	2380      	movs	r3, #128	@ 0x80
 800495a:	019b      	lsls	r3, r3, #6
 800495c:	429a      	cmp	r2, r3
 800495e:	d110      	bne.n	8004982 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	491a      	ldr	r1, [pc, #104]	@ (80049d4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800496c:	400a      	ands	r2, r1
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2180      	movs	r1, #128	@ 0x80
 800497c:	0189      	lsls	r1, r1, #6
 800497e:	430a      	orrs	r2, r1
 8004980:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	225d      	movs	r2, #93	@ 0x5d
 8004986:	2101      	movs	r1, #1
 8004988:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	225c      	movs	r2, #92	@ 0x5c
 800498e:	2100      	movs	r1, #0
 8004990:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e017      	b.n	80049c6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	3b01      	subs	r3, #1
 80049a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	4013      	ands	r3, r2
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	425a      	negs	r2, r3
 80049b6:	4153      	adcs	r3, r2
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	001a      	movs	r2, r3
 80049bc:	1dfb      	adds	r3, r7, #7
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d197      	bne.n	80048f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	0018      	movs	r0, r3
 80049c8:	46bd      	mov	sp, r7
 80049ca:	b008      	add	sp, #32
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	46c0      	nop			@ (mov r8, r8)
 80049d0:	20000040 	.word	0x20000040
 80049d4:	ffffdfff 	.word	0xffffdfff

080049d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08a      	sub	sp, #40	@ 0x28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80049e6:	2317      	movs	r3, #23
 80049e8:	18fb      	adds	r3, r7, r3
 80049ea:	2200      	movs	r2, #0
 80049ec:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80049ee:	f7fe fa29 	bl	8002e44 <HAL_GetTick>
 80049f2:	0002      	movs	r2, r0
 80049f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f6:	1a9b      	subs	r3, r3, r2
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	18d3      	adds	r3, r2, r3
 80049fc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80049fe:	f7fe fa21 	bl	8002e44 <HAL_GetTick>
 8004a02:	0003      	movs	r3, r0
 8004a04:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	330c      	adds	r3, #12
 8004a0c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004a0e:	4b41      	ldr	r3, [pc, #260]	@ (8004b14 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	0013      	movs	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	189b      	adds	r3, r3, r2
 8004a18:	00da      	lsls	r2, r3, #3
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	0d1b      	lsrs	r3, r3, #20
 8004a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a20:	4353      	muls	r3, r2
 8004a22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004a24:	e068      	b.n	8004af8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	23c0      	movs	r3, #192	@ 0xc0
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d10a      	bne.n	8004a46 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d107      	bne.n	8004a46 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	2117      	movs	r1, #23
 8004a3e:	187b      	adds	r3, r7, r1
 8004a40:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004a42:	187b      	adds	r3, r7, r1
 8004a44:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	d055      	beq.n	8004af8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a4c:	f7fe f9fa 	bl	8002e44 <HAL_GetTick>
 8004a50:	0002      	movs	r2, r0
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d902      	bls.n	8004a62 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d142      	bne.n	8004ae8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	21e0      	movs	r1, #224	@ 0xe0
 8004a6e:	438a      	bics	r2, r1
 8004a70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	2382      	movs	r3, #130	@ 0x82
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d113      	bne.n	8004aa6 <SPI_WaitFifoStateUntilTimeout+0xce>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	2380      	movs	r3, #128	@ 0x80
 8004a84:	021b      	lsls	r3, r3, #8
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d005      	beq.n	8004a96 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	2380      	movs	r3, #128	@ 0x80
 8004a90:	00db      	lsls	r3, r3, #3
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d107      	bne.n	8004aa6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2140      	movs	r1, #64	@ 0x40
 8004aa2:	438a      	bics	r2, r1
 8004aa4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004aaa:	2380      	movs	r3, #128	@ 0x80
 8004aac:	019b      	lsls	r3, r3, #6
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d110      	bne.n	8004ad4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4916      	ldr	r1, [pc, #88]	@ (8004b18 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004abe:	400a      	ands	r2, r1
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2180      	movs	r1, #128	@ 0x80
 8004ace:	0189      	lsls	r1, r1, #6
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	225d      	movs	r2, #93	@ 0x5d
 8004ad8:	2101      	movs	r1, #1
 8004ada:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	225c      	movs	r2, #92	@ 0x5c
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e010      	b.n	8004b0a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	3b01      	subs	r3, #1
 8004af6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	4013      	ands	r3, r2
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d18e      	bne.n	8004a26 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	0018      	movs	r0, r3
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	b00a      	add	sp, #40	@ 0x28
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	46c0      	nop			@ (mov r8, r8)
 8004b14:	20000040 	.word	0x20000040
 8004b18:	ffffdfff 	.word	0xffffdfff

08004b1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	23c0      	movs	r3, #192	@ 0xc0
 8004b2c:	0159      	lsls	r1, r3, #5
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	0013      	movs	r3, r2
 8004b36:	2200      	movs	r2, #0
 8004b38:	f7ff ff4e 	bl	80049d8 <SPI_WaitFifoStateUntilTimeout>
 8004b3c:	1e03      	subs	r3, r0, #0
 8004b3e:	d007      	beq.n	8004b50 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b44:	2220      	movs	r2, #32
 8004b46:	431a      	orrs	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e027      	b.n	8004ba0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	0013      	movs	r3, r2
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	2180      	movs	r1, #128	@ 0x80
 8004b5e:	f7ff fead 	bl	80048bc <SPI_WaitFlagStateUntilTimeout>
 8004b62:	1e03      	subs	r3, r0, #0
 8004b64:	d007      	beq.n	8004b76 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e014      	b.n	8004ba0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	23c0      	movs	r3, #192	@ 0xc0
 8004b7a:	00d9      	lsls	r1, r3, #3
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	0013      	movs	r3, r2
 8004b84:	2200      	movs	r2, #0
 8004b86:	f7ff ff27 	bl	80049d8 <SPI_WaitFifoStateUntilTimeout>
 8004b8a:	1e03      	subs	r3, r0, #0
 8004b8c:	d007      	beq.n	8004b9e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b92:	2220      	movs	r2, #32
 8004b94:	431a      	orrs	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e000      	b.n	8004ba0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	b004      	add	sp, #16
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e044      	b.n	8004c44 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d107      	bne.n	8004bd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2278      	movs	r2, #120	@ 0x78
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f7fe f83b 	bl	8002c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2224      	movs	r2, #36	@ 0x24
 8004bd6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2101      	movs	r1, #1
 8004be4:	438a      	bics	r2, r1
 8004be6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	f000 f9b4 	bl	8004f60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	f000 f828 	bl	8004c50 <UART_SetConfig>
 8004c00:	0003      	movs	r3, r0
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d101      	bne.n	8004c0a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e01c      	b.n	8004c44 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	490d      	ldr	r1, [pc, #52]	@ (8004c4c <HAL_UART_Init+0xa4>)
 8004c16:	400a      	ands	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	212a      	movs	r1, #42	@ 0x2a
 8004c26:	438a      	bics	r2, r1
 8004c28:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2101      	movs	r1, #1
 8004c36:	430a      	orrs	r2, r1
 8004c38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f000 fa43 	bl	80050c8 <UART_CheckIdleState>
 8004c42:	0003      	movs	r3, r0
}
 8004c44:	0018      	movs	r0, r3
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b002      	add	sp, #8
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	ffffb7ff 	.word	0xffffb7ff

08004c50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c58:	231e      	movs	r3, #30
 8004c5a:	18fb      	adds	r3, r7, r3
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4aaf      	ldr	r2, [pc, #700]	@ (8004f3c <UART_SetConfig+0x2ec>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	0019      	movs	r1, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	4aaa      	ldr	r2, [pc, #680]	@ (8004f40 <UART_SetConfig+0x2f0>)
 8004c96:	4013      	ands	r3, r2
 8004c98:	0019      	movs	r1, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68da      	ldr	r2, [r3, #12]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	4aa1      	ldr	r2, [pc, #644]	@ (8004f44 <UART_SetConfig+0x2f4>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	0019      	movs	r1, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a9d      	ldr	r2, [pc, #628]	@ (8004f48 <UART_SetConfig+0x2f8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d127      	bne.n	8004d26 <UART_SetConfig+0xd6>
 8004cd6:	4b9d      	ldr	r3, [pc, #628]	@ (8004f4c <UART_SetConfig+0x2fc>)
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cda:	2203      	movs	r2, #3
 8004cdc:	4013      	ands	r3, r2
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d00d      	beq.n	8004cfe <UART_SetConfig+0xae>
 8004ce2:	d81b      	bhi.n	8004d1c <UART_SetConfig+0xcc>
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d014      	beq.n	8004d12 <UART_SetConfig+0xc2>
 8004ce8:	d818      	bhi.n	8004d1c <UART_SetConfig+0xcc>
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <UART_SetConfig+0xa4>
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d00a      	beq.n	8004d08 <UART_SetConfig+0xb8>
 8004cf2:	e013      	b.n	8004d1c <UART_SetConfig+0xcc>
 8004cf4:	231f      	movs	r3, #31
 8004cf6:	18fb      	adds	r3, r7, r3
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	701a      	strb	r2, [r3, #0]
 8004cfc:	e065      	b.n	8004dca <UART_SetConfig+0x17a>
 8004cfe:	231f      	movs	r3, #31
 8004d00:	18fb      	adds	r3, r7, r3
 8004d02:	2202      	movs	r2, #2
 8004d04:	701a      	strb	r2, [r3, #0]
 8004d06:	e060      	b.n	8004dca <UART_SetConfig+0x17a>
 8004d08:	231f      	movs	r3, #31
 8004d0a:	18fb      	adds	r3, r7, r3
 8004d0c:	2204      	movs	r2, #4
 8004d0e:	701a      	strb	r2, [r3, #0]
 8004d10:	e05b      	b.n	8004dca <UART_SetConfig+0x17a>
 8004d12:	231f      	movs	r3, #31
 8004d14:	18fb      	adds	r3, r7, r3
 8004d16:	2208      	movs	r2, #8
 8004d18:	701a      	strb	r2, [r3, #0]
 8004d1a:	e056      	b.n	8004dca <UART_SetConfig+0x17a>
 8004d1c:	231f      	movs	r3, #31
 8004d1e:	18fb      	adds	r3, r7, r3
 8004d20:	2210      	movs	r2, #16
 8004d22:	701a      	strb	r2, [r3, #0]
 8004d24:	e051      	b.n	8004dca <UART_SetConfig+0x17a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a89      	ldr	r2, [pc, #548]	@ (8004f50 <UART_SetConfig+0x300>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d134      	bne.n	8004d9a <UART_SetConfig+0x14a>
 8004d30:	4b86      	ldr	r3, [pc, #536]	@ (8004f4c <UART_SetConfig+0x2fc>)
 8004d32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d34:	23c0      	movs	r3, #192	@ 0xc0
 8004d36:	029b      	lsls	r3, r3, #10
 8004d38:	4013      	ands	r3, r2
 8004d3a:	22c0      	movs	r2, #192	@ 0xc0
 8004d3c:	0292      	lsls	r2, r2, #10
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d017      	beq.n	8004d72 <UART_SetConfig+0x122>
 8004d42:	22c0      	movs	r2, #192	@ 0xc0
 8004d44:	0292      	lsls	r2, r2, #10
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d822      	bhi.n	8004d90 <UART_SetConfig+0x140>
 8004d4a:	2280      	movs	r2, #128	@ 0x80
 8004d4c:	0292      	lsls	r2, r2, #10
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d019      	beq.n	8004d86 <UART_SetConfig+0x136>
 8004d52:	2280      	movs	r2, #128	@ 0x80
 8004d54:	0292      	lsls	r2, r2, #10
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d81a      	bhi.n	8004d90 <UART_SetConfig+0x140>
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d004      	beq.n	8004d68 <UART_SetConfig+0x118>
 8004d5e:	2280      	movs	r2, #128	@ 0x80
 8004d60:	0252      	lsls	r2, r2, #9
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d00a      	beq.n	8004d7c <UART_SetConfig+0x12c>
 8004d66:	e013      	b.n	8004d90 <UART_SetConfig+0x140>
 8004d68:	231f      	movs	r3, #31
 8004d6a:	18fb      	adds	r3, r7, r3
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	701a      	strb	r2, [r3, #0]
 8004d70:	e02b      	b.n	8004dca <UART_SetConfig+0x17a>
 8004d72:	231f      	movs	r3, #31
 8004d74:	18fb      	adds	r3, r7, r3
 8004d76:	2202      	movs	r2, #2
 8004d78:	701a      	strb	r2, [r3, #0]
 8004d7a:	e026      	b.n	8004dca <UART_SetConfig+0x17a>
 8004d7c:	231f      	movs	r3, #31
 8004d7e:	18fb      	adds	r3, r7, r3
 8004d80:	2204      	movs	r2, #4
 8004d82:	701a      	strb	r2, [r3, #0]
 8004d84:	e021      	b.n	8004dca <UART_SetConfig+0x17a>
 8004d86:	231f      	movs	r3, #31
 8004d88:	18fb      	adds	r3, r7, r3
 8004d8a:	2208      	movs	r2, #8
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	e01c      	b.n	8004dca <UART_SetConfig+0x17a>
 8004d90:	231f      	movs	r3, #31
 8004d92:	18fb      	adds	r3, r7, r3
 8004d94:	2210      	movs	r2, #16
 8004d96:	701a      	strb	r2, [r3, #0]
 8004d98:	e017      	b.n	8004dca <UART_SetConfig+0x17a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a6d      	ldr	r2, [pc, #436]	@ (8004f54 <UART_SetConfig+0x304>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d104      	bne.n	8004dae <UART_SetConfig+0x15e>
 8004da4:	231f      	movs	r3, #31
 8004da6:	18fb      	adds	r3, r7, r3
 8004da8:	2200      	movs	r2, #0
 8004daa:	701a      	strb	r2, [r3, #0]
 8004dac:	e00d      	b.n	8004dca <UART_SetConfig+0x17a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a69      	ldr	r2, [pc, #420]	@ (8004f58 <UART_SetConfig+0x308>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d104      	bne.n	8004dc2 <UART_SetConfig+0x172>
 8004db8:	231f      	movs	r3, #31
 8004dba:	18fb      	adds	r3, r7, r3
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	701a      	strb	r2, [r3, #0]
 8004dc0:	e003      	b.n	8004dca <UART_SetConfig+0x17a>
 8004dc2:	231f      	movs	r3, #31
 8004dc4:	18fb      	adds	r3, r7, r3
 8004dc6:	2210      	movs	r2, #16
 8004dc8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69da      	ldr	r2, [r3, #28]
 8004dce:	2380      	movs	r3, #128	@ 0x80
 8004dd0:	021b      	lsls	r3, r3, #8
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d15c      	bne.n	8004e90 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8004dd6:	231f      	movs	r3, #31
 8004dd8:	18fb      	adds	r3, r7, r3
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d015      	beq.n	8004e0c <UART_SetConfig+0x1bc>
 8004de0:	dc18      	bgt.n	8004e14 <UART_SetConfig+0x1c4>
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d00d      	beq.n	8004e02 <UART_SetConfig+0x1b2>
 8004de6:	dc15      	bgt.n	8004e14 <UART_SetConfig+0x1c4>
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d002      	beq.n	8004df2 <UART_SetConfig+0x1a2>
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d005      	beq.n	8004dfc <UART_SetConfig+0x1ac>
 8004df0:	e010      	b.n	8004e14 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004df2:	f7ff fa2b 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8004df6:	0003      	movs	r3, r0
 8004df8:	61bb      	str	r3, [r7, #24]
        break;
 8004dfa:	e012      	b.n	8004e22 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dfc:	4b57      	ldr	r3, [pc, #348]	@ (8004f5c <UART_SetConfig+0x30c>)
 8004dfe:	61bb      	str	r3, [r7, #24]
        break;
 8004e00:	e00f      	b.n	8004e22 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e02:	f7ff f9a7 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8004e06:	0003      	movs	r3, r0
 8004e08:	61bb      	str	r3, [r7, #24]
        break;
 8004e0a:	e00a      	b.n	8004e22 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e0c:	2380      	movs	r3, #128	@ 0x80
 8004e0e:	021b      	lsls	r3, r3, #8
 8004e10:	61bb      	str	r3, [r7, #24]
        break;
 8004e12:	e006      	b.n	8004e22 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e18:	231e      	movs	r3, #30
 8004e1a:	18fb      	adds	r3, r7, r3
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	701a      	strb	r2, [r3, #0]
        break;
 8004e20:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d100      	bne.n	8004e2a <UART_SetConfig+0x1da>
 8004e28:	e07a      	b.n	8004f20 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	005a      	lsls	r2, r3, #1
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	085b      	lsrs	r3, r3, #1
 8004e34:	18d2      	adds	r2, r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	0019      	movs	r1, r3
 8004e3c:	0010      	movs	r0, r2
 8004e3e:	f7fb f963 	bl	8000108 <__udivsi3>
 8004e42:	0003      	movs	r3, r0
 8004e44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	2b0f      	cmp	r3, #15
 8004e4a:	d91c      	bls.n	8004e86 <UART_SetConfig+0x236>
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	2380      	movs	r3, #128	@ 0x80
 8004e50:	025b      	lsls	r3, r3, #9
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d217      	bcs.n	8004e86 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	200e      	movs	r0, #14
 8004e5c:	183b      	adds	r3, r7, r0
 8004e5e:	210f      	movs	r1, #15
 8004e60:	438a      	bics	r2, r1
 8004e62:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	085b      	lsrs	r3, r3, #1
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2207      	movs	r2, #7
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	b299      	uxth	r1, r3
 8004e70:	183b      	adds	r3, r7, r0
 8004e72:	183a      	adds	r2, r7, r0
 8004e74:	8812      	ldrh	r2, [r2, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	183a      	adds	r2, r7, r0
 8004e80:	8812      	ldrh	r2, [r2, #0]
 8004e82:	60da      	str	r2, [r3, #12]
 8004e84:	e04c      	b.n	8004f20 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8004e86:	231e      	movs	r3, #30
 8004e88:	18fb      	adds	r3, r7, r3
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	701a      	strb	r2, [r3, #0]
 8004e8e:	e047      	b.n	8004f20 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e90:	231f      	movs	r3, #31
 8004e92:	18fb      	adds	r3, r7, r3
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2b08      	cmp	r3, #8
 8004e98:	d015      	beq.n	8004ec6 <UART_SetConfig+0x276>
 8004e9a:	dc18      	bgt.n	8004ece <UART_SetConfig+0x27e>
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d00d      	beq.n	8004ebc <UART_SetConfig+0x26c>
 8004ea0:	dc15      	bgt.n	8004ece <UART_SetConfig+0x27e>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <UART_SetConfig+0x25c>
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d005      	beq.n	8004eb6 <UART_SetConfig+0x266>
 8004eaa:	e010      	b.n	8004ece <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eac:	f7ff f9ce 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8004eb0:	0003      	movs	r3, r0
 8004eb2:	61bb      	str	r3, [r7, #24]
        break;
 8004eb4:	e012      	b.n	8004edc <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eb6:	4b29      	ldr	r3, [pc, #164]	@ (8004f5c <UART_SetConfig+0x30c>)
 8004eb8:	61bb      	str	r3, [r7, #24]
        break;
 8004eba:	e00f      	b.n	8004edc <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ebc:	f7ff f94a 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8004ec0:	0003      	movs	r3, r0
 8004ec2:	61bb      	str	r3, [r7, #24]
        break;
 8004ec4:	e00a      	b.n	8004edc <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ec6:	2380      	movs	r3, #128	@ 0x80
 8004ec8:	021b      	lsls	r3, r3, #8
 8004eca:	61bb      	str	r3, [r7, #24]
        break;
 8004ecc:	e006      	b.n	8004edc <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ed2:	231e      	movs	r3, #30
 8004ed4:	18fb      	adds	r3, r7, r3
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	701a      	strb	r2, [r3, #0]
        break;
 8004eda:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d01e      	beq.n	8004f20 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	085a      	lsrs	r2, r3, #1
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	18d2      	adds	r2, r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	0019      	movs	r1, r3
 8004ef2:	0010      	movs	r0, r2
 8004ef4:	f7fb f908 	bl	8000108 <__udivsi3>
 8004ef8:	0003      	movs	r3, r0
 8004efa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2b0f      	cmp	r3, #15
 8004f00:	d90a      	bls.n	8004f18 <UART_SetConfig+0x2c8>
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	2380      	movs	r3, #128	@ 0x80
 8004f06:	025b      	lsls	r3, r3, #9
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d205      	bcs.n	8004f18 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	60da      	str	r2, [r3, #12]
 8004f16:	e003      	b.n	8004f20 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8004f18:	231e      	movs	r3, #30
 8004f1a:	18fb      	adds	r3, r7, r3
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f2c:	231e      	movs	r3, #30
 8004f2e:	18fb      	adds	r3, r7, r3
 8004f30:	781b      	ldrb	r3, [r3, #0]
}
 8004f32:	0018      	movs	r0, r3
 8004f34:	46bd      	mov	sp, r7
 8004f36:	b008      	add	sp, #32
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	46c0      	nop			@ (mov r8, r8)
 8004f3c:	efff69f3 	.word	0xefff69f3
 8004f40:	ffffcfff 	.word	0xffffcfff
 8004f44:	fffff4ff 	.word	0xfffff4ff
 8004f48:	40013800 	.word	0x40013800
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	40004400 	.word	0x40004400
 8004f54:	40004800 	.word	0x40004800
 8004f58:	40004c00 	.word	0x40004c00
 8004f5c:	007a1200 	.word	0x007a1200

08004f60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6c:	2208      	movs	r2, #8
 8004f6e:	4013      	ands	r3, r2
 8004f70:	d00b      	beq.n	8004f8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	4a4a      	ldr	r2, [pc, #296]	@ (80050a4 <UART_AdvFeatureConfig+0x144>)
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	0019      	movs	r1, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8e:	2201      	movs	r2, #1
 8004f90:	4013      	ands	r3, r2
 8004f92:	d00b      	beq.n	8004fac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	4a43      	ldr	r2, [pc, #268]	@ (80050a8 <UART_AdvFeatureConfig+0x148>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	0019      	movs	r1, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	d00b      	beq.n	8004fce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	4a3b      	ldr	r2, [pc, #236]	@ (80050ac <UART_AdvFeatureConfig+0x14c>)
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	0019      	movs	r1, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd2:	2204      	movs	r2, #4
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	d00b      	beq.n	8004ff0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	4a34      	ldr	r2, [pc, #208]	@ (80050b0 <UART_AdvFeatureConfig+0x150>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	0019      	movs	r1, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff4:	2210      	movs	r2, #16
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	d00b      	beq.n	8005012 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	4a2c      	ldr	r2, [pc, #176]	@ (80050b4 <UART_AdvFeatureConfig+0x154>)
 8005002:	4013      	ands	r3, r2
 8005004:	0019      	movs	r1, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005016:	2220      	movs	r2, #32
 8005018:	4013      	ands	r3, r2
 800501a:	d00b      	beq.n	8005034 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	4a25      	ldr	r2, [pc, #148]	@ (80050b8 <UART_AdvFeatureConfig+0x158>)
 8005024:	4013      	ands	r3, r2
 8005026:	0019      	movs	r1, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005038:	2240      	movs	r2, #64	@ 0x40
 800503a:	4013      	ands	r3, r2
 800503c:	d01d      	beq.n	800507a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	4a1d      	ldr	r2, [pc, #116]	@ (80050bc <UART_AdvFeatureConfig+0x15c>)
 8005046:	4013      	ands	r3, r2
 8005048:	0019      	movs	r1, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800505a:	2380      	movs	r3, #128	@ 0x80
 800505c:	035b      	lsls	r3, r3, #13
 800505e:	429a      	cmp	r2, r3
 8005060:	d10b      	bne.n	800507a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	4a15      	ldr	r2, [pc, #84]	@ (80050c0 <UART_AdvFeatureConfig+0x160>)
 800506a:	4013      	ands	r3, r2
 800506c:	0019      	movs	r1, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507e:	2280      	movs	r2, #128	@ 0x80
 8005080:	4013      	ands	r3, r2
 8005082:	d00b      	beq.n	800509c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	4a0e      	ldr	r2, [pc, #56]	@ (80050c4 <UART_AdvFeatureConfig+0x164>)
 800508c:	4013      	ands	r3, r2
 800508e:	0019      	movs	r1, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	605a      	str	r2, [r3, #4]
  }
}
 800509c:	46c0      	nop			@ (mov r8, r8)
 800509e:	46bd      	mov	sp, r7
 80050a0:	b002      	add	sp, #8
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	ffff7fff 	.word	0xffff7fff
 80050a8:	fffdffff 	.word	0xfffdffff
 80050ac:	fffeffff 	.word	0xfffeffff
 80050b0:	fffbffff 	.word	0xfffbffff
 80050b4:	ffffefff 	.word	0xffffefff
 80050b8:	ffffdfff 	.word	0xffffdfff
 80050bc:	ffefffff 	.word	0xffefffff
 80050c0:	ff9fffff 	.word	0xff9fffff
 80050c4:	fff7ffff 	.word	0xfff7ffff

080050c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b092      	sub	sp, #72	@ 0x48
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2284      	movs	r2, #132	@ 0x84
 80050d4:	2100      	movs	r1, #0
 80050d6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050d8:	f7fd feb4 	bl	8002e44 <HAL_GetTick>
 80050dc:	0003      	movs	r3, r0
 80050de:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2208      	movs	r2, #8
 80050e8:	4013      	ands	r3, r2
 80050ea:	2b08      	cmp	r3, #8
 80050ec:	d12c      	bne.n	8005148 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050f0:	2280      	movs	r2, #128	@ 0x80
 80050f2:	0391      	lsls	r1, r2, #14
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	4a46      	ldr	r2, [pc, #280]	@ (8005210 <UART_CheckIdleState+0x148>)
 80050f8:	9200      	str	r2, [sp, #0]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f000 f88c 	bl	8005218 <UART_WaitOnFlagUntilTimeout>
 8005100:	1e03      	subs	r3, r0, #0
 8005102:	d021      	beq.n	8005148 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005104:	f3ef 8310 	mrs	r3, PRIMASK
 8005108:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800510a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800510c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800510e:	2301      	movs	r3, #1
 8005110:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005114:	f383 8810 	msr	PRIMASK, r3
}
 8005118:	46c0      	nop			@ (mov r8, r8)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2180      	movs	r1, #128	@ 0x80
 8005126:	438a      	bics	r2, r1
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800512e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005130:	f383 8810 	msr	PRIMASK, r3
}
 8005134:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2220      	movs	r2, #32
 800513a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2278      	movs	r2, #120	@ 0x78
 8005140:	2100      	movs	r1, #0
 8005142:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e05f      	b.n	8005208 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2204      	movs	r2, #4
 8005150:	4013      	ands	r3, r2
 8005152:	2b04      	cmp	r3, #4
 8005154:	d146      	bne.n	80051e4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005158:	2280      	movs	r2, #128	@ 0x80
 800515a:	03d1      	lsls	r1, r2, #15
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	4a2c      	ldr	r2, [pc, #176]	@ (8005210 <UART_CheckIdleState+0x148>)
 8005160:	9200      	str	r2, [sp, #0]
 8005162:	2200      	movs	r2, #0
 8005164:	f000 f858 	bl	8005218 <UART_WaitOnFlagUntilTimeout>
 8005168:	1e03      	subs	r3, r0, #0
 800516a:	d03b      	beq.n	80051e4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800516c:	f3ef 8310 	mrs	r3, PRIMASK
 8005170:	60fb      	str	r3, [r7, #12]
  return(result);
 8005172:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005174:	637b      	str	r3, [r7, #52]	@ 0x34
 8005176:	2301      	movs	r3, #1
 8005178:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f383 8810 	msr	PRIMASK, r3
}
 8005180:	46c0      	nop			@ (mov r8, r8)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4921      	ldr	r1, [pc, #132]	@ (8005214 <UART_CheckIdleState+0x14c>)
 800518e:	400a      	ands	r2, r1
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005194:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f383 8810 	msr	PRIMASK, r3
}
 800519c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800519e:	f3ef 8310 	mrs	r3, PRIMASK
 80051a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80051a4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80051a8:	2301      	movs	r3, #1
 80051aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	f383 8810 	msr	PRIMASK, r3
}
 80051b2:	46c0      	nop			@ (mov r8, r8)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689a      	ldr	r2, [r3, #8]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2101      	movs	r1, #1
 80051c0:	438a      	bics	r2, r1
 80051c2:	609a      	str	r2, [r3, #8]
 80051c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	f383 8810 	msr	PRIMASK, r3
}
 80051ce:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2280      	movs	r2, #128	@ 0x80
 80051d4:	2120      	movs	r1, #32
 80051d6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2278      	movs	r2, #120	@ 0x78
 80051dc:	2100      	movs	r1, #0
 80051de:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e011      	b.n	8005208 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2220      	movs	r2, #32
 80051e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2280      	movs	r2, #128	@ 0x80
 80051ee:	2120      	movs	r1, #32
 80051f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2278      	movs	r2, #120	@ 0x78
 8005202:	2100      	movs	r1, #0
 8005204:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	0018      	movs	r0, r3
 800520a:	46bd      	mov	sp, r7
 800520c:	b010      	add	sp, #64	@ 0x40
 800520e:	bd80      	pop	{r7, pc}
 8005210:	01ffffff 	.word	0x01ffffff
 8005214:	fffffedf 	.word	0xfffffedf

08005218 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	603b      	str	r3, [r7, #0]
 8005224:	1dfb      	adds	r3, r7, #7
 8005226:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005228:	e051      	b.n	80052ce <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	3301      	adds	r3, #1
 800522e:	d04e      	beq.n	80052ce <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005230:	f7fd fe08 	bl	8002e44 <HAL_GetTick>
 8005234:	0002      	movs	r2, r0
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	429a      	cmp	r2, r3
 800523e:	d302      	bcc.n	8005246 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e051      	b.n	80052ee <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2204      	movs	r2, #4
 8005252:	4013      	ands	r3, r2
 8005254:	d03b      	beq.n	80052ce <UART_WaitOnFlagUntilTimeout+0xb6>
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2b80      	cmp	r3, #128	@ 0x80
 800525a:	d038      	beq.n	80052ce <UART_WaitOnFlagUntilTimeout+0xb6>
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b40      	cmp	r3, #64	@ 0x40
 8005260:	d035      	beq.n	80052ce <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	2208      	movs	r2, #8
 800526a:	4013      	ands	r3, r2
 800526c:	2b08      	cmp	r3, #8
 800526e:	d111      	bne.n	8005294 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2208      	movs	r2, #8
 8005276:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	0018      	movs	r0, r3
 800527c:	f000 f83c 	bl	80052f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2284      	movs	r2, #132	@ 0x84
 8005284:	2108      	movs	r1, #8
 8005286:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2278      	movs	r2, #120	@ 0x78
 800528c:	2100      	movs	r1, #0
 800528e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e02c      	b.n	80052ee <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	69da      	ldr	r2, [r3, #28]
 800529a:	2380      	movs	r3, #128	@ 0x80
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	401a      	ands	r2, r3
 80052a0:	2380      	movs	r3, #128	@ 0x80
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d112      	bne.n	80052ce <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2280      	movs	r2, #128	@ 0x80
 80052ae:	0112      	lsls	r2, r2, #4
 80052b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	0018      	movs	r0, r3
 80052b6:	f000 f81f 	bl	80052f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2284      	movs	r2, #132	@ 0x84
 80052be:	2120      	movs	r1, #32
 80052c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2278      	movs	r2, #120	@ 0x78
 80052c6:	2100      	movs	r1, #0
 80052c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e00f      	b.n	80052ee <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	4013      	ands	r3, r2
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	425a      	negs	r2, r3
 80052de:	4153      	adcs	r3, r2
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	001a      	movs	r2, r3
 80052e4:	1dfb      	adds	r3, r7, #7
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d09e      	beq.n	800522a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	0018      	movs	r0, r3
 80052f0:	46bd      	mov	sp, r7
 80052f2:	b004      	add	sp, #16
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08e      	sub	sp, #56	@ 0x38
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005300:	f3ef 8310 	mrs	r3, PRIMASK
 8005304:	617b      	str	r3, [r7, #20]
  return(result);
 8005306:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005308:	637b      	str	r3, [r7, #52]	@ 0x34
 800530a:	2301      	movs	r3, #1
 800530c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	f383 8810 	msr	PRIMASK, r3
}
 8005314:	46c0      	nop			@ (mov r8, r8)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4926      	ldr	r1, [pc, #152]	@ (80053bc <UART_EndRxTransfer+0xc4>)
 8005322:	400a      	ands	r2, r1
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005328:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	f383 8810 	msr	PRIMASK, r3
}
 8005330:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005332:	f3ef 8310 	mrs	r3, PRIMASK
 8005336:	623b      	str	r3, [r7, #32]
  return(result);
 8005338:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800533a:	633b      	str	r3, [r7, #48]	@ 0x30
 800533c:	2301      	movs	r3, #1
 800533e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005342:	f383 8810 	msr	PRIMASK, r3
}
 8005346:	46c0      	nop			@ (mov r8, r8)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689a      	ldr	r2, [r3, #8]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2101      	movs	r1, #1
 8005354:	438a      	bics	r2, r1
 8005356:	609a      	str	r2, [r3, #8]
 8005358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800535c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535e:	f383 8810 	msr	PRIMASK, r3
}
 8005362:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005368:	2b01      	cmp	r3, #1
 800536a:	d118      	bne.n	800539e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800536c:	f3ef 8310 	mrs	r3, PRIMASK
 8005370:	60bb      	str	r3, [r7, #8]
  return(result);
 8005372:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005374:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005376:	2301      	movs	r3, #1
 8005378:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f383 8810 	msr	PRIMASK, r3
}
 8005380:	46c0      	nop			@ (mov r8, r8)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2110      	movs	r1, #16
 800538e:	438a      	bics	r2, r1
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005394:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f383 8810 	msr	PRIMASK, r3
}
 800539c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2280      	movs	r2, #128	@ 0x80
 80053a2:	2120      	movs	r1, #32
 80053a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80053b2:	46c0      	nop			@ (mov r8, r8)
 80053b4:	46bd      	mov	sp, r7
 80053b6:	b00e      	add	sp, #56	@ 0x38
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	46c0      	nop			@ (mov r8, r8)
 80053bc:	fffffedf 	.word	0xfffffedf

080053c0 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 80053c0:	b5b0      	push	{r4, r5, r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 80053c8:	2316      	movs	r3, #22
 80053ca:	18fb      	adds	r3, r7, r3
 80053cc:	2200      	movs	r2, #0
 80053ce:	801a      	strh	r2, [r3, #0]
    uint32 ldo_tune = 0;
 80053d0:	2300      	movs	r3, #0
 80053d2:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 80053d4:	4ba0      	ldr	r3, [pc, #640]	@ (8005658 <dwt_initialise+0x298>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2200      	movs	r2, #0
 80053da:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 80053dc:	4b9e      	ldr	r3, [pc, #632]	@ (8005658 <dwt_initialise+0x298>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2200      	movs	r2, #0
 80053e2:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 80053e4:	4b9c      	ldr	r3, [pc, #624]	@ (8005658 <dwt_initialise+0x298>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2200      	movs	r2, #0
 80053ea:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 80053ec:	4b9a      	ldr	r3, [pc, #616]	@ (8005658 <dwt_initialise+0x298>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2200      	movs	r2, #0
 80053f2:	629a      	str	r2, [r3, #40]	@ 0x28
    pdw1000local->cbRxOk = NULL;
 80053f4:	4b98      	ldr	r3, [pc, #608]	@ (8005658 <dwt_initialise+0x298>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2200      	movs	r2, #0
 80053fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    pdw1000local->cbRxTo = NULL;
 80053fc:	4b96      	ldr	r3, [pc, #600]	@ (8005658 <dwt_initialise+0x298>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2200      	movs	r2, #0
 8005402:	631a      	str	r2, [r3, #48]	@ 0x30
    pdw1000local->cbRxErr = NULL;
 8005404:	4b94      	ldr	r3, [pc, #592]	@ (8005658 <dwt_initialise+0x298>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2200      	movs	r2, #0
 800540a:	635a      	str	r2, [r3, #52]	@ 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 800540c:	f000 f92c 	bl	8005668 <dwt_readdevid>
 8005410:	0003      	movs	r3, r0
 8005412:	4a92      	ldr	r2, [pc, #584]	@ (800565c <dwt_initialise+0x29c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d002      	beq.n	800541e <dwt_initialise+0x5e>
    {
        return DWT_ERROR ;
 8005418:	2301      	movs	r3, #1
 800541a:	425b      	negs	r3, r3
 800541c:	e118      	b.n	8005650 <dwt_initialise+0x290>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2202      	movs	r2, #2
 8005422:	4013      	ands	r3, r2
 8005424:	d101      	bne.n	800542a <dwt_initialise+0x6a>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 8005426:	f000 ff99 	bl	800635c <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2202      	movs	r2, #2
 800542e:	4013      	ands	r3, r2
 8005430:	d003      	beq.n	800543a <dwt_initialise+0x7a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	22f8      	movs	r2, #248	@ 0xf8
 8005436:	4013      	ands	r3, r2
 8005438:	d102      	bne.n	8005440 <dwt_initialise+0x80>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 800543a:	2000      	movs	r0, #0
 800543c:	f000 fd6a 	bl	8005f14 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8005440:	2204      	movs	r2, #4
 8005442:	2100      	movs	r1, #0
 8005444:	2024      	movs	r0, #36	@ 0x24
 8005446:	f000 fc7f 	bl	8005d48 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2202      	movs	r2, #2
 800544e:	4013      	ands	r3, r2
 8005450:	d118      	bne.n	8005484 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8005452:	2004      	movs	r0, #4
 8005454:	f000 fcd2 	bl	8005dfc <_dwt_otpread>
 8005458:	0003      	movs	r3, r0
 800545a:	613b      	str	r3, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	22ff      	movs	r2, #255	@ 0xff
 8005460:	4013      	ands	r3, r2
 8005462:	d021      	beq.n	80054a8 <dwt_initialise+0xe8>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 8005464:	2202      	movs	r2, #2
 8005466:	2112      	movs	r1, #18
 8005468:	202d      	movs	r0, #45	@ 0x2d
 800546a:	f000 fc6d 	bl	8005d48 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 800546e:	4b7a      	ldr	r3, [pc, #488]	@ (8005658 <dwt_initialise+0x298>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	8ada      	ldrh	r2, [r3, #22]
 8005474:	4b78      	ldr	r3, [pc, #480]	@ (8005658 <dwt_initialise+0x298>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2180      	movs	r1, #128	@ 0x80
 800547a:	0149      	lsls	r1, r1, #5
 800547c:	430a      	orrs	r2, r1
 800547e:	b292      	uxth	r2, r2
 8005480:	82da      	strh	r2, [r3, #22]
 8005482:	e011      	b.n	80054a8 <dwt_initialise+0xe8>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 8005484:	2130      	movs	r1, #48	@ 0x30
 8005486:	2028      	movs	r0, #40	@ 0x28
 8005488:	f000 fc00 	bl	8005c8c <dwt_read32bitoffsetreg>
 800548c:	0003      	movs	r3, r0
 800548e:	4a74      	ldr	r2, [pc, #464]	@ (8005660 <dwt_initialise+0x2a0>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d009      	beq.n	80054a8 <dwt_initialise+0xe8>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 8005494:	4b70      	ldr	r3, [pc, #448]	@ (8005658 <dwt_initialise+0x298>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	8ada      	ldrh	r2, [r3, #22]
 800549a:	4b6f      	ldr	r3, [pc, #444]	@ (8005658 <dwt_initialise+0x298>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2180      	movs	r1, #128	@ 0x80
 80054a0:	0149      	lsls	r1, r1, #5
 80054a2:	430a      	orrs	r2, r1
 80054a4:	b292      	uxth	r2, r2
 80054a6:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	4013      	ands	r3, r2
 80054ae:	d007      	beq.n	80054c0 <dwt_initialise+0x100>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	4013      	ands	r3, r2
 80054b6:	d013      	beq.n	80054e0 <dwt_initialise+0x120>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2208      	movs	r2, #8
 80054bc:	4013      	ands	r3, r2
 80054be:	d00f      	beq.n	80054e0 <dwt_initialise+0x120>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 80054c0:	201e      	movs	r0, #30
 80054c2:	f000 fc9b 	bl	8005dfc <_dwt_otpread>
 80054c6:	0002      	movs	r2, r0
 80054c8:	2116      	movs	r1, #22
 80054ca:	187b      	adds	r3, r7, r1
 80054cc:	801a      	strh	r2, [r3, #0]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 80054ce:	187b      	adds	r3, r7, r1
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	0a1b      	lsrs	r3, r3, #8
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	4b60      	ldr	r3, [pc, #384]	@ (8005658 <dwt_initialise+0x298>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	72da      	strb	r2, [r3, #11]
 80054de:	e003      	b.n	80054e8 <dwt_initialise+0x128>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 80054e0:	4b5d      	ldr	r3, [pc, #372]	@ (8005658 <dwt_initialise+0x298>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2200      	movs	r2, #0
 80054e6:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	4013      	ands	r3, r2
 80054ee:	d10f      	bne.n	8005510 <dwt_initialise+0x150>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 80054f0:	2116      	movs	r1, #22
 80054f2:	187b      	adds	r3, r7, r1
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	221f      	movs	r2, #31
 80054f8:	4013      	ands	r3, r2
 80054fa:	d102      	bne.n	8005502 <dwt_initialise+0x142>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 80054fc:	187b      	adds	r3, r7, r1
 80054fe:	2210      	movs	r2, #16
 8005500:	801a      	strh	r2, [r3, #0]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 8005502:	2316      	movs	r3, #22
 8005504:	18fb      	adds	r3, r7, r3
 8005506:	881b      	ldrh	r3, [r3, #0]
 8005508:	b2db      	uxtb	r3, r3
 800550a:	0018      	movs	r0, r3
 800550c:	f000 ff4c 	bl	80063a8 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2210      	movs	r2, #16
 8005514:	4013      	ands	r3, r2
 8005516:	d007      	beq.n	8005528 <dwt_initialise+0x168>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8005518:	4b4f      	ldr	r3, [pc, #316]	@ (8005658 <dwt_initialise+0x298>)
 800551a:	681c      	ldr	r4, [r3, #0]
 800551c:	2006      	movs	r0, #6
 800551e:	f000 fc6d 	bl	8005dfc <_dwt_otpread>
 8005522:	0003      	movs	r3, r0
 8005524:	6023      	str	r3, [r4, #0]
 8005526:	e003      	b.n	8005530 <dwt_initialise+0x170>
    }
    else
    {
        pdw1000local->partID = 0;
 8005528:	4b4b      	ldr	r3, [pc, #300]	@ (8005658 <dwt_initialise+0x298>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2220      	movs	r2, #32
 8005534:	4013      	ands	r3, r2
 8005536:	d007      	beq.n	8005548 <dwt_initialise+0x188>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8005538:	4b47      	ldr	r3, [pc, #284]	@ (8005658 <dwt_initialise+0x298>)
 800553a:	681c      	ldr	r4, [r3, #0]
 800553c:	2007      	movs	r0, #7
 800553e:	f000 fc5d 	bl	8005dfc <_dwt_otpread>
 8005542:	0003      	movs	r3, r0
 8005544:	6063      	str	r3, [r4, #4]
 8005546:	e003      	b.n	8005550 <dwt_initialise+0x190>
    }
    else
    {
        pdw1000local->lotID = 0;
 8005548:	4b43      	ldr	r3, [pc, #268]	@ (8005658 <dwt_initialise+0x298>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2200      	movs	r2, #0
 800554e:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2240      	movs	r2, #64	@ 0x40
 8005554:	4013      	ands	r3, r2
 8005556:	d008      	beq.n	800556a <dwt_initialise+0x1aa>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8005558:	2008      	movs	r0, #8
 800555a:	f000 fc4f 	bl	8005dfc <_dwt_otpread>
 800555e:	0002      	movs	r2, r0
 8005560:	4b3d      	ldr	r3, [pc, #244]	@ (8005658 <dwt_initialise+0x298>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	b2d2      	uxtb	r2, r2
 8005566:	721a      	strb	r2, [r3, #8]
 8005568:	e003      	b.n	8005572 <dwt_initialise+0x1b2>
    }
    else
    {
        pdw1000local->vBatP = 0;
 800556a:	4b3b      	ldr	r3, [pc, #236]	@ (8005658 <dwt_initialise+0x298>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2200      	movs	r2, #0
 8005570:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2280      	movs	r2, #128	@ 0x80
 8005576:	4013      	ands	r3, r2
 8005578:	d008      	beq.n	800558c <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 800557a:	2009      	movs	r0, #9
 800557c:	f000 fc3e 	bl	8005dfc <_dwt_otpread>
 8005580:	0002      	movs	r2, r0
 8005582:	4b35      	ldr	r3, [pc, #212]	@ (8005658 <dwt_initialise+0x298>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	725a      	strb	r2, [r3, #9]
 800558a:	e003      	b.n	8005594 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 800558c:	4b32      	ldr	r3, [pc, #200]	@ (8005658 <dwt_initialise+0x298>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2200      	movs	r2, #0
 8005592:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	4013      	ands	r3, r2
 800559a:	d127      	bne.n	80055ec <dwt_initialise+0x22c>
    {
        if(DWT_LOADUCODE & config)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	4013      	ands	r3, r2
 80055a2:	d00c      	beq.n	80055be <dwt_initialise+0x1fe>
        {
            _dwt_loaducodefromrom();
 80055a4:	f000 fc82 	bl	8005eac <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 80055a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005658 <dwt_initialise+0x298>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	8ada      	ldrh	r2, [r3, #22]
 80055ae:	4b2a      	ldr	r3, [pc, #168]	@ (8005658 <dwt_initialise+0x298>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2180      	movs	r1, #128	@ 0x80
 80055b4:	0109      	lsls	r1, r1, #4
 80055b6:	430a      	orrs	r2, r1
 80055b8:	b292      	uxth	r2, r2
 80055ba:	82da      	strh	r2, [r3, #22]
 80055bc:	e024      	b.n	8005608 <dwt_initialise+0x248>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 80055be:	250e      	movs	r5, #14
 80055c0:	197c      	adds	r4, r7, r5
 80055c2:	2105      	movs	r1, #5
 80055c4:	2036      	movs	r0, #54	@ 0x36
 80055c6:	f000 fb88 	bl	8005cda <dwt_read16bitoffsetreg>
 80055ca:	0003      	movs	r3, r0
 80055cc:	8023      	strh	r3, [r4, #0]
            rega &= 0xFDFF ; // Clear LDERUN bit
 80055ce:	0028      	movs	r0, r5
 80055d0:	183b      	adds	r3, r7, r0
 80055d2:	183a      	adds	r2, r7, r0
 80055d4:	8812      	ldrh	r2, [r2, #0]
 80055d6:	4923      	ldr	r1, [pc, #140]	@ (8005664 <dwt_initialise+0x2a4>)
 80055d8:	400a      	ands	r2, r1
 80055da:	801a      	strh	r2, [r3, #0]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 80055dc:	183b      	adds	r3, r7, r0
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	001a      	movs	r2, r3
 80055e2:	2105      	movs	r1, #5
 80055e4:	2036      	movs	r0, #54	@ 0x36
 80055e6:	f000 fbc2 	bl	8005d6e <dwt_write16bitoffsetreg>
 80055ea:	e00d      	b.n	8005608 <dwt_initialise+0x248>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2204      	movs	r2, #4
 80055f0:	4013      	ands	r3, r2
 80055f2:	d109      	bne.n	8005608 <dwt_initialise+0x248>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 80055f4:	4b18      	ldr	r3, [pc, #96]	@ (8005658 <dwt_initialise+0x298>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	8ada      	ldrh	r2, [r3, #22]
 80055fa:	4b17      	ldr	r3, [pc, #92]	@ (8005658 <dwt_initialise+0x298>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2180      	movs	r1, #128	@ 0x80
 8005600:	0109      	lsls	r1, r1, #4
 8005602:	430a      	orrs	r2, r1
 8005604:	b292      	uxth	r2, r2
 8005606:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8005608:	2001      	movs	r0, #1
 800560a:	f000 fc83 	bl	8005f14 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 800560e:	2200      	movs	r2, #0
 8005610:	210a      	movs	r1, #10
 8005612:	202c      	movs	r0, #44	@ 0x2c
 8005614:	f000 fb98 	bl	8005d48 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 8005618:	4b0f      	ldr	r3, [pc, #60]	@ (8005658 <dwt_initialise+0x298>)
 800561a:	681c      	ldr	r4, [r3, #0]
 800561c:	2100      	movs	r1, #0
 800561e:	2004      	movs	r0, #4
 8005620:	f000 fb34 	bl	8005c8c <dwt_read32bitoffsetreg>
 8005624:	0003      	movs	r3, r0
 8005626:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 8005628:	4b0b      	ldr	r3, [pc, #44]	@ (8005658 <dwt_initialise+0x298>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	0c1b      	lsrs	r3, r3, #16
 8005630:	b2da      	uxtb	r2, r3
 8005632:	4b09      	ldr	r3, [pc, #36]	@ (8005658 <dwt_initialise+0x298>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2103      	movs	r1, #3
 8005638:	400a      	ands	r2, r1
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 800563e:	4b06      	ldr	r3, [pc, #24]	@ (8005658 <dwt_initialise+0x298>)
 8005640:	681c      	ldr	r4, [r3, #0]
 8005642:	2100      	movs	r1, #0
 8005644:	2008      	movs	r0, #8
 8005646:	f000 fb21 	bl	8005c8c <dwt_read32bitoffsetreg>
 800564a:	0003      	movs	r3, r0
 800564c:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 800564e:	2300      	movs	r3, #0

} // end dwt_initialise()
 8005650:	0018      	movs	r0, r3
 8005652:	46bd      	mov	sp, r7
 8005654:	b006      	add	sp, #24
 8005656:	bdb0      	pop	{r4, r5, r7, pc}
 8005658:	2000004c 	.word	0x2000004c
 800565c:	deca0130 	.word	0xdeca0130
 8005660:	88888888 	.word	0x88888888
 8005664:	fffffdff 	.word	0xfffffdff

08005668 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 800566c:	2100      	movs	r1, #0
 800566e:	2000      	movs	r0, #0
 8005670:	f000 fb0c 	bl	8005c8c <dwt_read32bitoffsetreg>
 8005674:	0003      	movs	r3, r0
}
 8005676:	0018      	movs	r0, r3
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 800567c:	b5b0      	push	{r4, r5, r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 8005684:	2317      	movs	r3, #23
 8005686:	18fb      	adds	r3, r7, r3
 8005688:	2200      	movs	r2, #0
 800568a:	701a      	strb	r2, [r3, #0]
    uint8 useDWnsSFD = 0;
 800568c:	2316      	movs	r3, #22
 800568e:	18fb      	adds	r3, r7, r3
 8005690:	2200      	movs	r2, #0
 8005692:	701a      	strb	r2, [r3, #0]
    uint8 chan = config->chan ;
 8005694:	2013      	movs	r0, #19
 8005696:	183b      	adds	r3, r7, r0
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	7812      	ldrb	r2, [r2, #0]
 800569c:	701a      	strb	r2, [r3, #0]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	795b      	ldrb	r3, [r3, #5]
 80056a2:	0019      	movs	r1, r3
 80056a4:	2314      	movs	r3, #20
 80056a6:	18fb      	adds	r3, r7, r3
 80056a8:	4ab6      	ldr	r2, [pc, #728]	@ (8005984 <dwt_configure+0x308>)
 80056aa:	0049      	lsls	r1, r1, #1
 80056ac:	5a8a      	ldrh	r2, [r1, r2]
 80056ae:	801a      	strh	r2, [r3, #0]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	785a      	ldrb	r2, [r3, #1]
 80056b4:	2312      	movs	r3, #18
 80056b6:	18fb      	adds	r3, r7, r3
 80056b8:	3a01      	subs	r2, #1
 80056ba:	701a      	strb	r2, [r3, #0]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 80056bc:	183b      	adds	r3, r7, r0
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d003      	beq.n	80056cc <dwt_configure+0x50>
 80056c4:	183b      	adds	r3, r7, r0
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b07      	cmp	r3, #7
 80056ca:	d101      	bne.n	80056d0 <dwt_configure+0x54>
 80056cc:	2201      	movs	r2, #1
 80056ce:	e000      	b.n	80056d2 <dwt_configure+0x56>
 80056d0:	2200      	movs	r2, #0
 80056d2:	2311      	movs	r3, #17
 80056d4:	18fb      	adds	r3, r7, r3
 80056d6:	701a      	strb	r2, [r3, #0]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	79db      	ldrb	r3, [r3, #7]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10f      	bne.n	8005700 <dwt_configure+0x84>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 80056e0:	4ba9      	ldr	r3, [pc, #676]	@ (8005988 <dwt_configure+0x30c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	691a      	ldr	r2, [r3, #16]
 80056e6:	4ba8      	ldr	r3, [pc, #672]	@ (8005988 <dwt_configure+0x30c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2180      	movs	r1, #128	@ 0x80
 80056ec:	03c9      	lsls	r1, r1, #15
 80056ee:	430a      	orrs	r2, r1
 80056f0:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 80056f2:	2214      	movs	r2, #20
 80056f4:	18bb      	adds	r3, r7, r2
 80056f6:	18ba      	adds	r2, r7, r2
 80056f8:	8812      	ldrh	r2, [r2, #0]
 80056fa:	08d2      	lsrs	r2, r2, #3
 80056fc:	801a      	strh	r2, [r3, #0]
 80056fe:	e007      	b.n	8005710 <dwt_configure+0x94>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8005700:	4ba1      	ldr	r3, [pc, #644]	@ (8005988 <dwt_configure+0x30c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	691a      	ldr	r2, [r3, #16]
 8005706:	4ba0      	ldr	r3, [pc, #640]	@ (8005988 <dwt_configure+0x30c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	49a0      	ldr	r1, [pc, #640]	@ (800598c <dwt_configure+0x310>)
 800570c:	400a      	ands	r2, r1
 800570e:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 8005710:	4b9d      	ldr	r3, [pc, #628]	@ (8005988 <dwt_configure+0x30c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	7a12      	ldrb	r2, [r2, #8]
 8005718:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 800571a:	4b9b      	ldr	r3, [pc, #620]	@ (8005988 <dwt_configure+0x30c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	4b99      	ldr	r3, [pc, #612]	@ (8005988 <dwt_configure+0x30c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	499a      	ldr	r1, [pc, #616]	@ (8005990 <dwt_configure+0x314>)
 8005726:	400a      	ands	r2, r1
 8005728:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 800572a:	4b97      	ldr	r3, [pc, #604]	@ (8005988 <dwt_configure+0x30c>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6919      	ldr	r1, [r3, #16]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	7a1b      	ldrb	r3, [r3, #8]
 8005734:	041a      	lsls	r2, r3, #16
 8005736:	23c0      	movs	r3, #192	@ 0xc0
 8005738:	029b      	lsls	r3, r3, #10
 800573a:	401a      	ands	r2, r3
 800573c:	4b92      	ldr	r3, [pc, #584]	@ (8005988 <dwt_configure+0x30c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 8005744:	4b90      	ldr	r3, [pc, #576]	@ (8005988 <dwt_configure+0x30c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	001a      	movs	r2, r3
 800574c:	2100      	movs	r1, #0
 800574e:	2004      	movs	r0, #4
 8005750:	f000 fb2d 	bl	8005dae <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 8005754:	2314      	movs	r3, #20
 8005756:	18fb      	adds	r3, r7, r3
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	498e      	ldr	r1, [pc, #568]	@ (8005994 <dwt_configure+0x318>)
 800575c:	001a      	movs	r2, r3
 800575e:	202e      	movs	r0, #46	@ 0x2e
 8005760:	f000 fb05 	bl	8005d6e <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 8005764:	2512      	movs	r5, #18
 8005766:	197b      	adds	r3, r7, r5
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	0018      	movs	r0, r3
 800576c:	f000 fb78 	bl	8005e60 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 8005770:	2413      	movs	r4, #19
 8005772:	193b      	adds	r3, r7, r4
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	4a88      	ldr	r2, [pc, #544]	@ (8005998 <dwt_configure+0x31c>)
 8005778:	5cd3      	ldrb	r3, [r2, r3]
 800577a:	001a      	movs	r2, r3
 800577c:	4b87      	ldr	r3, [pc, #540]	@ (800599c <dwt_configure+0x320>)
 800577e:	0092      	lsls	r2, r2, #2
 8005780:	58d3      	ldr	r3, [r2, r3]
 8005782:	001a      	movs	r2, r3
 8005784:	2107      	movs	r1, #7
 8005786:	202b      	movs	r0, #43	@ 0x2b
 8005788:	f000 fb11 	bl	8005dae <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 800578c:	193b      	adds	r3, r7, r4
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	4a81      	ldr	r2, [pc, #516]	@ (8005998 <dwt_configure+0x31c>)
 8005792:	5cd3      	ldrb	r3, [r2, r3]
 8005794:	001a      	movs	r2, r3
 8005796:	4b82      	ldr	r3, [pc, #520]	@ (80059a0 <dwt_configure+0x324>)
 8005798:	5c9b      	ldrb	r3, [r3, r2]
 800579a:	001a      	movs	r2, r3
 800579c:	210b      	movs	r1, #11
 800579e:	202b      	movs	r0, #43	@ 0x2b
 80057a0:	f000 fad2 	bl	8005d48 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 80057a4:	2311      	movs	r3, #17
 80057a6:	18fb      	adds	r3, r7, r3
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	4a7e      	ldr	r2, [pc, #504]	@ (80059a4 <dwt_configure+0x328>)
 80057ac:	5cd3      	ldrb	r3, [r2, r3]
 80057ae:	001a      	movs	r2, r3
 80057b0:	210b      	movs	r1, #11
 80057b2:	2028      	movs	r0, #40	@ 0x28
 80057b4:	f000 fac8 	bl	8005d48 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 80057b8:	193b      	adds	r3, r7, r4
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	4a76      	ldr	r2, [pc, #472]	@ (8005998 <dwt_configure+0x31c>)
 80057be:	5cd3      	ldrb	r3, [r2, r3]
 80057c0:	001a      	movs	r2, r3
 80057c2:	4b79      	ldr	r3, [pc, #484]	@ (80059a8 <dwt_configure+0x32c>)
 80057c4:	0092      	lsls	r2, r2, #2
 80057c6:	58d3      	ldr	r3, [r2, r3]
 80057c8:	001a      	movs	r2, r3
 80057ca:	210c      	movs	r1, #12
 80057cc:	2028      	movs	r0, #40	@ 0x28
 80057ce:	f000 faee 	bl	8005dae <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	79db      	ldrb	r3, [r3, #7]
 80057d6:	001a      	movs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	799b      	ldrb	r3, [r3, #6]
 80057dc:	0019      	movs	r1, r3
 80057de:	4b73      	ldr	r3, [pc, #460]	@ (80059ac <dwt_configure+0x330>)
 80057e0:	0052      	lsls	r2, r2, #1
 80057e2:	1852      	adds	r2, r2, r1
 80057e4:	0052      	lsls	r2, r2, #1
 80057e6:	5ad3      	ldrh	r3, [r2, r3]
 80057e8:	001a      	movs	r2, r3
 80057ea:	2102      	movs	r1, #2
 80057ec:	2027      	movs	r0, #39	@ 0x27
 80057ee:	f000 fabe 	bl	8005d6e <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 80057f2:	197b      	adds	r3, r7, r5
 80057f4:	781a      	ldrb	r2, [r3, #0]
 80057f6:	4b6e      	ldr	r3, [pc, #440]	@ (80059b0 <dwt_configure+0x334>)
 80057f8:	0052      	lsls	r2, r2, #1
 80057fa:	5ad3      	ldrh	r3, [r2, r3]
 80057fc:	001a      	movs	r2, r3
 80057fe:	2104      	movs	r1, #4
 8005800:	2027      	movs	r0, #39	@ 0x27
 8005802:	f000 fab4 	bl	8005d6e <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	79db      	ldrb	r3, [r3, #7]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d105      	bne.n	800581a <dwt_configure+0x19e>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 800580e:	2264      	movs	r2, #100	@ 0x64
 8005810:	2106      	movs	r1, #6
 8005812:	2027      	movs	r0, #39	@ 0x27
 8005814:	f000 faab 	bl	8005d6e <dwt_write16bitoffsetreg>
 8005818:	e018      	b.n	800584c <dwt_configure+0x1d0>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	789b      	ldrb	r3, [r3, #2]
 800581e:	2b04      	cmp	r3, #4
 8005820:	d10a      	bne.n	8005838 <dwt_configure+0x1bc>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8005822:	2210      	movs	r2, #16
 8005824:	2106      	movs	r1, #6
 8005826:	2027      	movs	r0, #39	@ 0x27
 8005828:	f000 faa1 	bl	8005d6e <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 800582c:	2210      	movs	r2, #16
 800582e:	2126      	movs	r1, #38	@ 0x26
 8005830:	2027      	movs	r0, #39	@ 0x27
 8005832:	f000 fa89 	bl	8005d48 <dwt_write8bitoffsetreg>
 8005836:	e009      	b.n	800584c <dwt_configure+0x1d0>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 8005838:	2220      	movs	r2, #32
 800583a:	2106      	movs	r1, #6
 800583c:	2027      	movs	r0, #39	@ 0x27
 800583e:	f000 fa96 	bl	8005d6e <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8005842:	2228      	movs	r2, #40	@ 0x28
 8005844:	2126      	movs	r1, #38	@ 0x26
 8005846:	2027      	movs	r0, #39	@ 0x27
 8005848:	f000 fa7e 	bl	8005d48 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 800584c:	2312      	movs	r3, #18
 800584e:	18fb      	adds	r3, r7, r3
 8005850:	781a      	ldrb	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	78db      	ldrb	r3, [r3, #3]
 8005856:	0019      	movs	r1, r3
 8005858:	4b56      	ldr	r3, [pc, #344]	@ (80059b4 <dwt_configure+0x338>)
 800585a:	0092      	lsls	r2, r2, #2
 800585c:	1852      	adds	r2, r2, r1
 800585e:	0092      	lsls	r2, r2, #2
 8005860:	58d3      	ldr	r3, [r2, r3]
 8005862:	001a      	movs	r2, r3
 8005864:	2108      	movs	r1, #8
 8005866:	2027      	movs	r0, #39	@ 0x27
 8005868:	f000 faa1 	bl	8005dae <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	895b      	ldrh	r3, [r3, #10]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d102      	bne.n	800587a <dwt_configure+0x1fe>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a50      	ldr	r2, [pc, #320]	@ (80059b8 <dwt_configure+0x33c>)
 8005878:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	895b      	ldrh	r3, [r3, #10]
 800587e:	001a      	movs	r2, r3
 8005880:	2120      	movs	r1, #32
 8005882:	2027      	movs	r0, #39	@ 0x27
 8005884:	f000 fa73 	bl	8005d6e <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8005888:	4b4c      	ldr	r3, [pc, #304]	@ (80059bc <dwt_configure+0x340>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	001a      	movs	r2, r3
 800588e:	210c      	movs	r1, #12
 8005890:	2023      	movs	r0, #35	@ 0x23
 8005892:	f000 fa8c 	bl	8005dae <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8005896:	2312      	movs	r3, #18
 8005898:	18fb      	adds	r3, r7, r3
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	4a47      	ldr	r2, [pc, #284]	@ (80059bc <dwt_configure+0x340>)
 800589e:	005b      	lsls	r3, r3, #1
 80058a0:	18d3      	adds	r3, r2, r3
 80058a2:	3304      	adds	r3, #4
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	001a      	movs	r2, r3
 80058a8:	2104      	movs	r1, #4
 80058aa:	2023      	movs	r0, #35	@ 0x23
 80058ac:	f000 fa5f 	bl	8005d6e <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	799b      	ldrb	r3, [r3, #6]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d011      	beq.n	80058dc <dwt_configure+0x260>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	79db      	ldrb	r3, [r3, #7]
 80058bc:	001a      	movs	r2, r3
 80058be:	4b40      	ldr	r3, [pc, #256]	@ (80059c0 <dwt_configure+0x344>)
 80058c0:	5c9b      	ldrb	r3, [r3, r2]
 80058c2:	001a      	movs	r2, r3
 80058c4:	2100      	movs	r1, #0
 80058c6:	2021      	movs	r0, #33	@ 0x21
 80058c8:	f000 fa3e 	bl	8005d48 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 80058cc:	2317      	movs	r3, #23
 80058ce:	18fb      	adds	r3, r7, r3
 80058d0:	2203      	movs	r2, #3
 80058d2:	701a      	strb	r2, [r3, #0]
        useDWnsSFD = 1 ;
 80058d4:	2316      	movs	r3, #22
 80058d6:	18fb      	adds	r3, r7, r3
 80058d8:	2201      	movs	r2, #1
 80058da:	701a      	strb	r2, [r3, #0]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80058dc:	2113      	movs	r1, #19
 80058de:	187b      	adds	r3, r7, r1
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	220f      	movs	r2, #15
 80058e4:	401a      	ands	r2, r3
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80058e6:	187b      	adds	r3, r7, r1
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	21ff      	movs	r1, #255	@ 0xff
 80058ee:	400b      	ands	r3, r1
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80058f0:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	785b      	ldrb	r3, [r3, #1]
 80058f6:	0499      	lsls	r1, r3, #18
 80058f8:	23c0      	movs	r3, #192	@ 0xc0
 80058fa:	031b      	lsls	r3, r3, #12
 80058fc:	400b      	ands	r3, r1
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80058fe:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8005900:	2317      	movs	r3, #23
 8005902:	18fb      	adds	r3, r7, r3
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	0519      	lsls	r1, r3, #20
 8005908:	23c0      	movs	r3, #192	@ 0xc0
 800590a:	039b      	lsls	r3, r3, #14
 800590c:	400b      	ands	r3, r1
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 800590e:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8005910:	2316      	movs	r3, #22
 8005912:	18fb      	adds	r3, r7, r3
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	0459      	lsls	r1, r3, #17
 8005918:	2380      	movs	r3, #128	@ 0x80
 800591a:	029b      	lsls	r3, r3, #10
 800591c:	400b      	ands	r3, r1
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 800591e:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	791b      	ldrb	r3, [r3, #4]
 8005924:	0599      	lsls	r1, r3, #22
 8005926:	23f8      	movs	r3, #248	@ 0xf8
 8005928:	04db      	lsls	r3, r3, #19
 800592a:	400b      	ands	r3, r1
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800592c:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	795b      	ldrb	r3, [r3, #5]
 8005932:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8005934:	4313      	orrs	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	001a      	movs	r2, r3
 800593c:	2100      	movs	r1, #0
 800593e:	201f      	movs	r0, #31
 8005940:	f000 fa35 	bl	8005dae <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	789a      	ldrb	r2, [r3, #2]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	785b      	ldrb	r3, [r3, #1]
 800594c:	4313      	orrs	r3, r2
 800594e:	b2db      	uxtb	r3, r3
 8005950:	0419      	lsls	r1, r3, #16
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	79db      	ldrb	r3, [r3, #7]
 8005956:	035a      	lsls	r2, r3, #13
 8005958:	4b0b      	ldr	r3, [pc, #44]	@ (8005988 <dwt_configure+0x30c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8005960:	4b09      	ldr	r3, [pc, #36]	@ (8005988 <dwt_configure+0x30c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	001a      	movs	r2, r3
 8005968:	2100      	movs	r1, #0
 800596a:	2008      	movs	r0, #8
 800596c:	f000 fa1f 	bl	8005dae <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 8005970:	2242      	movs	r2, #66	@ 0x42
 8005972:	2100      	movs	r1, #0
 8005974:	200d      	movs	r0, #13
 8005976:	f000 f9e7 	bl	8005d48 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 800597a:	46c0      	nop			@ (mov r8, r8)
 800597c:	46bd      	mov	sp, r7
 800597e:	b006      	add	sp, #24
 8005980:	bdb0      	pop	{r4, r5, r7, pc}
 8005982:	46c0      	nop			@ (mov r8, r8)
 8005984:	08006894 	.word	0x08006894
 8005988:	2000004c 	.word	0x2000004c
 800598c:	ffbfffff 	.word	0xffbfffff
 8005990:	fffcffff 	.word	0xfffcffff
 8005994:	00002804 	.word	0x00002804
 8005998:	08006814 	.word	0x08006814
 800599c:	08006834 	.word	0x08006834
 80059a0:	0800684c 	.word	0x0800684c
 80059a4:	08006854 	.word	0x08006854
 80059a8:	0800681c 	.word	0x0800681c
 80059ac:	08006864 	.word	0x08006864
 80059b0:	08006870 	.word	0x08006870
 80059b4:	08006874 	.word	0x08006874
 80059b8:	00001041 	.word	0x00001041
 80059bc:	08006858 	.word	0x08006858
 80059c0:	08006860 	.word	0x08006860

080059c4 <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	0002      	movs	r2, r0
 80059cc:	1dbb      	adds	r3, r7, #6
 80059ce:	801a      	strh	r2, [r3, #0]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 80059d0:	1dbb      	adds	r3, r7, #6
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	4904      	ldr	r1, [pc, #16]	@ (80059e8 <dwt_setrxantennadelay+0x24>)
 80059d6:	001a      	movs	r2, r3
 80059d8:	202e      	movs	r0, #46	@ 0x2e
 80059da:	f000 f9c8 	bl	8005d6e <dwt_write16bitoffsetreg>
}
 80059de:	46c0      	nop			@ (mov r8, r8)
 80059e0:	46bd      	mov	sp, r7
 80059e2:	b002      	add	sp, #8
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	46c0      	nop			@ (mov r8, r8)
 80059e8:	00001804 	.word	0x00001804

080059ec <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	0002      	movs	r2, r0
 80059f4:	1dbb      	adds	r3, r7, #6
 80059f6:	801a      	strh	r2, [r3, #0]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 80059f8:	1dbb      	adds	r3, r7, #6
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	001a      	movs	r2, r3
 80059fe:	2100      	movs	r1, #0
 8005a00:	2018      	movs	r0, #24
 8005a02:	f000 f9b4 	bl	8005d6e <dwt_write16bitoffsetreg>
}
 8005a06:	46c0      	nop			@ (mov r8, r8)
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	b002      	add	sp, #8
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b082      	sub	sp, #8
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6039      	str	r1, [r7, #0]
 8005a16:	0011      	movs	r1, r2
 8005a18:	1dbb      	adds	r3, r7, #6
 8005a1a:	1c02      	adds	r2, r0, #0
 8005a1c:	801a      	strh	r2, [r3, #0]
 8005a1e:	1d3b      	adds	r3, r7, #4
 8005a20:	1c0a      	adds	r2, r1, #0
 8005a22:	801a      	strh	r2, [r3, #0]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 8005a24:	1d3b      	adds	r3, r7, #4
 8005a26:	881a      	ldrh	r2, [r3, #0]
 8005a28:	1dbb      	adds	r3, r7, #6
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	18d2      	adds	r2, r2, r3
 8005a2e:	2380      	movs	r3, #128	@ 0x80
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	429a      	cmp	r2, r3
 8005a34:	dc0d      	bgt.n	8005a52 <dwt_writetxdata+0x44>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8005a36:	1dbb      	adds	r3, r7, #6
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	3b02      	subs	r3, #2
 8005a3c:	0018      	movs	r0, r3
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	1d3b      	adds	r3, r7, #4
 8005a42:	8819      	ldrh	r1, [r3, #0]
 8005a44:	0013      	movs	r3, r2
 8005a46:	0002      	movs	r2, r0
 8005a48:	2009      	movs	r0, #9
 8005a4a:	f000 f862 	bl	8005b12 <dwt_writetodevice>
        return DWT_SUCCESS;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	e001      	b.n	8005a56 <dwt_writetxdata+0x48>
    }
    else
    {
        return DWT_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	425b      	negs	r3, r3
    }
} // end dwt_writetxdata()
 8005a56:	0018      	movs	r0, r3
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	b002      	add	sp, #8
 8005a5c:	bd80      	pop	{r7, pc}
	...

08005a60 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	603a      	str	r2, [r7, #0]
 8005a68:	1dbb      	adds	r3, r7, #6
 8005a6a:	1c02      	adds	r2, r0, #0
 8005a6c:	801a      	strh	r2, [r3, #0]
 8005a6e:	1d3b      	adds	r3, r7, #4
 8005a70:	1c0a      	adds	r2, r1, #0
 8005a72:	801a      	strh	r2, [r3, #0]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8005a74:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa4 <dwt_writetxfctrl+0x44>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68da      	ldr	r2, [r3, #12]
 8005a7a:	1dbb      	adds	r3, r7, #6
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	1d3b      	adds	r3, r7, #4
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	059b      	lsls	r3, r3, #22
 8005a86:	431a      	orrs	r2, r3
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	03db      	lsls	r3, r3, #15
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	001a      	movs	r2, r3
 8005a94:	2100      	movs	r1, #0
 8005a96:	2008      	movs	r0, #8
 8005a98:	f000 f989 	bl	8005dae <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 8005a9c:	46c0      	nop			@ (mov r8, r8)
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	b004      	add	sp, #16
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	2000004c 	.word	0x2000004c

08005aa8 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	0008      	movs	r0, r1
 8005ab2:	0011      	movs	r1, r2
 8005ab4:	1cbb      	adds	r3, r7, #2
 8005ab6:	1c02      	adds	r2, r0, #0
 8005ab8:	801a      	strh	r2, [r3, #0]
 8005aba:	003b      	movs	r3, r7
 8005abc:	1c0a      	adds	r2, r1, #0
 8005abe:	801a      	strh	r2, [r3, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8005ac0:	1cbb      	adds	r3, r7, #2
 8005ac2:	881a      	ldrh	r2, [r3, #0]
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	003b      	movs	r3, r7
 8005ac8:	8819      	ldrh	r1, [r3, #0]
 8005aca:	0003      	movs	r3, r0
 8005acc:	2011      	movs	r0, #17
 8005ace:	f000 f881 	bl	8005bd4 <dwt_readfromdevice>
}
 8005ad2:	46c0      	nop			@ (mov r8, r8)
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	b002      	add	sp, #8
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <dwt_readtxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readtxtimestamp(uint8 * timestamp)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b082      	sub	sp, #8
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN, timestamp) ; // Read bytes directly into buffer
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2205      	movs	r2, #5
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	2017      	movs	r0, #23
 8005aea:	f000 f873 	bl	8005bd4 <dwt_readfromdevice>
}
 8005aee:	46c0      	nop			@ (mov r8, r8)
 8005af0:	46bd      	mov	sp, r7
 8005af2:	b002      	add	sp, #8
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 * timestamp)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b082      	sub	sp, #8
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2205      	movs	r2, #5
 8005b02:	2100      	movs	r1, #0
 8005b04:	2015      	movs	r0, #21
 8005b06:	f000 f865 	bl	8005bd4 <dwt_readfromdevice>
}
 8005b0a:	46c0      	nop			@ (mov r8, r8)
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	b002      	add	sp, #8
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8005b12:	b590      	push	{r4, r7, lr}
 8005b14:	b087      	sub	sp, #28
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	60ba      	str	r2, [r7, #8]
 8005b1a:	607b      	str	r3, [r7, #4]
 8005b1c:	240e      	movs	r4, #14
 8005b1e:	193b      	adds	r3, r7, r4
 8005b20:	1c02      	adds	r2, r0, #0
 8005b22:	801a      	strh	r2, [r3, #0]
 8005b24:	200c      	movs	r0, #12
 8005b26:	183b      	adds	r3, r7, r0
 8005b28:	1c0a      	adds	r2, r1, #0
 8005b2a:	801a      	strh	r2, [r3, #0]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8005b30:	183b      	adds	r3, r7, r0
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10d      	bne.n	8005b54 <dwt_writetodevice+0x42>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8005b38:	193b      	adds	r3, r7, r4
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	1c59      	adds	r1, r3, #1
 8005b42:	6179      	str	r1, [r7, #20]
 8005b44:	2180      	movs	r1, #128	@ 0x80
 8005b46:	4249      	negs	r1, r1
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	b2d1      	uxtb	r1, r2
 8005b4c:	2210      	movs	r2, #16
 8005b4e:	18ba      	adds	r2, r7, r2
 8005b50:	54d1      	strb	r1, [r2, r3]
 8005b52:	e033      	b.n	8005bbc <dwt_writetodevice+0xaa>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8005b54:	230e      	movs	r3, #14
 8005b56:	18fb      	adds	r3, r7, r3
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	1c59      	adds	r1, r3, #1
 8005b60:	6179      	str	r1, [r7, #20]
 8005b62:	2140      	movs	r1, #64	@ 0x40
 8005b64:	4249      	negs	r1, r1
 8005b66:	430a      	orrs	r2, r1
 8005b68:	b2d1      	uxtb	r1, r2
 8005b6a:	2010      	movs	r0, #16
 8005b6c:	183a      	adds	r2, r7, r0
 8005b6e:	54d1      	strb	r1, [r2, r3]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8005b70:	210c      	movs	r1, #12
 8005b72:	187b      	adds	r3, r7, r1
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b78:	d808      	bhi.n	8005b8c <dwt_writetodevice+0x7a>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	617a      	str	r2, [r7, #20]
 8005b80:	187a      	adds	r2, r7, r1
 8005b82:	8812      	ldrh	r2, [r2, #0]
 8005b84:	b2d1      	uxtb	r1, r2
 8005b86:	183a      	adds	r2, r7, r0
 8005b88:	54d1      	strb	r1, [r2, r3]
 8005b8a:	e017      	b.n	8005bbc <dwt_writetodevice+0xaa>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8005b8c:	200c      	movs	r0, #12
 8005b8e:	183b      	adds	r3, r7, r0
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	1c59      	adds	r1, r3, #1
 8005b98:	6179      	str	r1, [r7, #20]
 8005b9a:	2180      	movs	r1, #128	@ 0x80
 8005b9c:	4249      	negs	r1, r1
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	b2d1      	uxtb	r1, r2
 8005ba2:	2410      	movs	r4, #16
 8005ba4:	193a      	adds	r2, r7, r4
 8005ba6:	54d1      	strb	r1, [r2, r3]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8005ba8:	183b      	adds	r3, r7, r0
 8005baa:	881b      	ldrh	r3, [r3, #0]
 8005bac:	09db      	lsrs	r3, r3, #7
 8005bae:	b299      	uxth	r1, r3
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	1c5a      	adds	r2, r3, #1
 8005bb4:	617a      	str	r2, [r7, #20]
 8005bb6:	b2c9      	uxtb	r1, r1
 8005bb8:	193a      	adds	r2, r7, r4
 8005bba:	54d1      	strb	r1, [r2, r3]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	b298      	uxth	r0, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	2110      	movs	r1, #16
 8005bc6:	1879      	adds	r1, r7, r1
 8005bc8:	f000 fc36 	bl	8006438 <writetospi>
} // end dwt_writetodevice()
 8005bcc:	46c0      	nop			@ (mov r8, r8)
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	b007      	add	sp, #28
 8005bd2:	bd90      	pop	{r4, r7, pc}

08005bd4 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8005bd4:	b590      	push	{r4, r7, lr}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60ba      	str	r2, [r7, #8]
 8005bdc:	607b      	str	r3, [r7, #4]
 8005bde:	240e      	movs	r4, #14
 8005be0:	193b      	adds	r3, r7, r4
 8005be2:	1c02      	adds	r2, r0, #0
 8005be4:	801a      	strh	r2, [r3, #0]
 8005be6:	200c      	movs	r0, #12
 8005be8:	183b      	adds	r3, r7, r0
 8005bea:	1c0a      	adds	r2, r1, #0
 8005bec:	801a      	strh	r2, [r3, #0]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8005bee:	2300      	movs	r3, #0
 8005bf0:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8005bf2:	183b      	adds	r3, r7, r0
 8005bf4:	881b      	ldrh	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d109      	bne.n	8005c0e <dwt_readfromdevice+0x3a>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	1c5a      	adds	r2, r3, #1
 8005bfe:	617a      	str	r2, [r7, #20]
 8005c00:	193a      	adds	r2, r7, r4
 8005c02:	8812      	ldrh	r2, [r2, #0]
 8005c04:	b2d1      	uxtb	r1, r2
 8005c06:	2210      	movs	r2, #16
 8005c08:	18ba      	adds	r2, r7, r2
 8005c0a:	54d1      	strb	r1, [r2, r3]
 8005c0c:	e032      	b.n	8005c74 <dwt_readfromdevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8005c0e:	230e      	movs	r3, #14
 8005c10:	18fb      	adds	r3, r7, r3
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	1c59      	adds	r1, r3, #1
 8005c1a:	6179      	str	r1, [r7, #20]
 8005c1c:	2140      	movs	r1, #64	@ 0x40
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	b2d1      	uxtb	r1, r2
 8005c22:	2010      	movs	r0, #16
 8005c24:	183a      	adds	r2, r7, r0
 8005c26:	54d1      	strb	r1, [r2, r3]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8005c28:	210c      	movs	r1, #12
 8005c2a:	187b      	adds	r3, r7, r1
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c30:	d808      	bhi.n	8005c44 <dwt_readfromdevice+0x70>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	617a      	str	r2, [r7, #20]
 8005c38:	187a      	adds	r2, r7, r1
 8005c3a:	8812      	ldrh	r2, [r2, #0]
 8005c3c:	b2d1      	uxtb	r1, r2
 8005c3e:	183a      	adds	r2, r7, r0
 8005c40:	54d1      	strb	r1, [r2, r3]
 8005c42:	e017      	b.n	8005c74 <dwt_readfromdevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8005c44:	200c      	movs	r0, #12
 8005c46:	183b      	adds	r3, r7, r0
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	1c59      	adds	r1, r3, #1
 8005c50:	6179      	str	r1, [r7, #20]
 8005c52:	2180      	movs	r1, #128	@ 0x80
 8005c54:	4249      	negs	r1, r1
 8005c56:	430a      	orrs	r2, r1
 8005c58:	b2d1      	uxtb	r1, r2
 8005c5a:	2410      	movs	r4, #16
 8005c5c:	193a      	adds	r2, r7, r4
 8005c5e:	54d1      	strb	r1, [r2, r3]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8005c60:	183b      	adds	r3, r7, r0
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	09db      	lsrs	r3, r3, #7
 8005c66:	b299      	uxth	r1, r3
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	1c5a      	adds	r2, r3, #1
 8005c6c:	617a      	str	r2, [r7, #20]
 8005c6e:	b2c9      	uxtb	r1, r1
 8005c70:	193a      	adds	r2, r7, r4
 8005c72:	54d1      	strb	r1, [r2, r3]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	b298      	uxth	r0, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	2110      	movs	r1, #16
 8005c7e:	1879      	adds	r1, r7, r1
 8005c80:	f000 fc12 	bl	80064a8 <readfromspi>
} // end dwt_readfromdevice()
 8005c84:	46c0      	nop			@ (mov r8, r8)
 8005c86:	46bd      	mov	sp, r7
 8005c88:	b007      	add	sp, #28
 8005c8a:	bd90      	pop	{r4, r7, pc}

08005c8c <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8005c96:	2300      	movs	r3, #0
 8005c98:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	b298      	uxth	r0, r3
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	b299      	uxth	r1, r3
 8005ca2:	230c      	movs	r3, #12
 8005ca4:	18fb      	adds	r3, r7, r3
 8005ca6:	2204      	movs	r2, #4
 8005ca8:	f7ff ff94 	bl	8005bd4 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8005cac:	2303      	movs	r3, #3
 8005cae:	613b      	str	r3, [r7, #16]
 8005cb0:	e00b      	b.n	8005cca <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	021b      	lsls	r3, r3, #8
 8005cb6:	220c      	movs	r2, #12
 8005cb8:	18b9      	adds	r1, r7, r2
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	188a      	adds	r2, r1, r2
 8005cbe:	7812      	ldrb	r2, [r2, #0]
 8005cc0:	189b      	adds	r3, r3, r2
 8005cc2:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	613b      	str	r3, [r7, #16]
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	daf0      	bge.n	8005cb2 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8005cd0:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	b006      	add	sp, #24
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8005cda:	b5b0      	push	{r4, r5, r7, lr}
 8005cdc:	b084      	sub	sp, #16
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8005ce4:	240e      	movs	r4, #14
 8005ce6:	193b      	adds	r3, r7, r4
 8005ce8:	2200      	movs	r2, #0
 8005cea:	801a      	strh	r2, [r3, #0]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	b298      	uxth	r0, r3
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	b299      	uxth	r1, r3
 8005cf4:	250c      	movs	r5, #12
 8005cf6:	197b      	adds	r3, r7, r5
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	f7ff ff6b 	bl	8005bd4 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8005cfe:	0029      	movs	r1, r5
 8005d00:	187b      	adds	r3, r7, r1
 8005d02:	785b      	ldrb	r3, [r3, #1]
 8005d04:	021b      	lsls	r3, r3, #8
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	187b      	adds	r3, r7, r1
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	0019      	movs	r1, r3
 8005d0e:	193b      	adds	r3, r7, r4
 8005d10:	1852      	adds	r2, r2, r1
 8005d12:	801a      	strh	r2, [r3, #0]
    return regval ;
 8005d14:	193b      	adds	r3, r7, r4
 8005d16:	881b      	ldrh	r3, [r3, #0]

} // end dwt_read16bitoffsetreg()
 8005d18:	0018      	movs	r0, r3
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	b004      	add	sp, #16
 8005d1e:	bdb0      	pop	{r4, r5, r7, pc}

08005d20 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8005d20:	b590      	push	{r4, r7, lr}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	b298      	uxth	r0, r3
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	b299      	uxth	r1, r3
 8005d32:	240f      	movs	r4, #15
 8005d34:	193b      	adds	r3, r7, r4
 8005d36:	2201      	movs	r2, #1
 8005d38:	f7ff ff4c 	bl	8005bd4 <dwt_readfromdevice>

    return regval ;
 8005d3c:	193b      	adds	r3, r7, r4
 8005d3e:	781b      	ldrb	r3, [r3, #0]
}
 8005d40:	0018      	movs	r0, r3
 8005d42:	46bd      	mov	sp, r7
 8005d44:	b005      	add	sp, #20
 8005d46:	bd90      	pop	{r4, r7, pc}

08005d48 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	1dfb      	adds	r3, r7, #7
 8005d54:	701a      	strb	r2, [r3, #0]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	b298      	uxth	r0, r3
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	b299      	uxth	r1, r3
 8005d5e:	1dfb      	adds	r3, r7, #7
 8005d60:	2201      	movs	r2, #1
 8005d62:	f7ff fed6 	bl	8005b12 <dwt_writetodevice>
}
 8005d66:	46c0      	nop			@ (mov r8, r8)
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	b004      	add	sp, #16
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8005d6e:	b590      	push	{r4, r7, lr}
 8005d70:	b087      	sub	sp, #28
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	60f8      	str	r0, [r7, #12]
 8005d76:	60b9      	str	r1, [r7, #8]
 8005d78:	1dbb      	adds	r3, r7, #6
 8005d7a:	801a      	strh	r2, [r3, #0]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8005d7c:	1dbb      	adds	r3, r7, #6
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	2414      	movs	r4, #20
 8005d84:	193b      	adds	r3, r7, r4
 8005d86:	701a      	strb	r2, [r3, #0]
    buffer[1] = regval >> 8 ;
 8005d88:	1dbb      	adds	r3, r7, #6
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	0a1b      	lsrs	r3, r3, #8
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	193b      	adds	r3, r7, r4
 8005d94:	705a      	strb	r2, [r3, #1]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	b298      	uxth	r0, r3
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	b299      	uxth	r1, r3
 8005d9e:	193b      	adds	r3, r7, r4
 8005da0:	2202      	movs	r2, #2
 8005da2:	f7ff feb6 	bl	8005b12 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8005da6:	46c0      	nop			@ (mov r8, r8)
 8005da8:	46bd      	mov	sp, r7
 8005daa:	b007      	add	sp, #28
 8005dac:	bd90      	pop	{r4, r7, pc}

08005dae <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b086      	sub	sp, #24
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	60f8      	str	r0, [r7, #12]
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8005dba:	2300      	movs	r3, #0
 8005dbc:	617b      	str	r3, [r7, #20]
 8005dbe:	e00d      	b.n	8005ddc <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	b2d9      	uxtb	r1, r3
 8005dc4:	2310      	movs	r3, #16
 8005dc6:	18fa      	adds	r2, r7, r3
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	18d3      	adds	r3, r2, r3
 8005dcc:	1c0a      	adds	r2, r1, #0
 8005dce:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	0a1b      	lsrs	r3, r3, #8
 8005dd4:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	617b      	str	r3, [r7, #20]
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	ddee      	ble.n	8005dc0 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	b298      	uxth	r0, r3
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	b299      	uxth	r1, r3
 8005dea:	2310      	movs	r3, #16
 8005dec:	18fb      	adds	r3, r7, r3
 8005dee:	2204      	movs	r2, #4
 8005df0:	f7ff fe8f 	bl	8005b12 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8005df4:	46c0      	nop			@ (mov r8, r8)
 8005df6:	46bd      	mov	sp, r7
 8005df8:	b006      	add	sp, #24
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	0002      	movs	r2, r0
 8005e04:	1dbb      	adds	r3, r7, #6
 8005e06:	801a      	strh	r2, [r3, #0]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8005e08:	1dbb      	adds	r3, r7, #6
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	001a      	movs	r2, r3
 8005e0e:	2104      	movs	r1, #4
 8005e10:	202d      	movs	r0, #45	@ 0x2d
 8005e12:	f7ff ffac 	bl	8005d6e <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8005e16:	2203      	movs	r2, #3
 8005e18:	2106      	movs	r1, #6
 8005e1a:	202d      	movs	r0, #45	@ 0x2d
 8005e1c:	f7ff ff94 	bl	8005d48 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8005e20:	2200      	movs	r2, #0
 8005e22:	2106      	movs	r1, #6
 8005e24:	202d      	movs	r0, #45	@ 0x2d
 8005e26:	f7ff ff8f 	bl	8005d48 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8005e2a:	210a      	movs	r1, #10
 8005e2c:	202d      	movs	r0, #45	@ 0x2d
 8005e2e:	f7ff ff2d 	bl	8005c8c <dwt_read32bitoffsetreg>
 8005e32:	0003      	movs	r3, r0
 8005e34:	60fb      	str	r3, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8005e36:	68fb      	ldr	r3, [r7, #12]
}
 8005e38:	0018      	movs	r0, r3
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	b004      	add	sp, #16
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8005e44:	2200      	movs	r2, #0
 8005e46:	2102      	movs	r1, #2
 8005e48:	202c      	movs	r0, #44	@ 0x2c
 8005e4a:	f7ff ff7d 	bl	8005d48 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8005e4e:	2202      	movs	r2, #2
 8005e50:	2102      	movs	r1, #2
 8005e52:	202c      	movs	r0, #44	@ 0x2c
 8005e54:	f7ff ff78 	bl	8005d48 <dwt_write8bitoffsetreg>
}
 8005e58:	46c0      	nop			@ (mov r8, r8)
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8005e68:	4b0c      	ldr	r3, [pc, #48]	@ (8005e9c <_dwt_configlde+0x3c>)
 8005e6a:	226d      	movs	r2, #109	@ 0x6d
 8005e6c:	0019      	movs	r1, r3
 8005e6e:	202e      	movs	r0, #46	@ 0x2e
 8005e70:	f7ff ff6a 	bl	8005d48 <dwt_write8bitoffsetreg>

    if(prfIndex)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d006      	beq.n	8005e88 <_dwt_configlde+0x28>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8005e7a:	4a09      	ldr	r2, [pc, #36]	@ (8005ea0 <_dwt_configlde+0x40>)
 8005e7c:	4b09      	ldr	r3, [pc, #36]	@ (8005ea4 <_dwt_configlde+0x44>)
 8005e7e:	0019      	movs	r1, r3
 8005e80:	202e      	movs	r0, #46	@ 0x2e
 8005e82:	f7ff ff74 	bl	8005d6e <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8005e86:	e005      	b.n	8005e94 <_dwt_configlde+0x34>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8005e88:	4a07      	ldr	r2, [pc, #28]	@ (8005ea8 <_dwt_configlde+0x48>)
 8005e8a:	4b06      	ldr	r3, [pc, #24]	@ (8005ea4 <_dwt_configlde+0x44>)
 8005e8c:	0019      	movs	r1, r3
 8005e8e:	202e      	movs	r0, #46	@ 0x2e
 8005e90:	f7ff ff6d 	bl	8005d6e <dwt_write16bitoffsetreg>
}
 8005e94:	46c0      	nop			@ (mov r8, r8)
 8005e96:	46bd      	mov	sp, r7
 8005e98:	b002      	add	sp, #8
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	00000806 	.word	0x00000806
 8005ea0:	00000607 	.word	0x00000607
 8005ea4:	00001806 	.word	0x00001806
 8005ea8:	00001607 	.word	0x00001607

08005eac <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8005eb0:	200e      	movs	r0, #14
 8005eb2:	f000 f82f 	bl	8005f14 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8005eb6:	2380      	movs	r3, #128	@ 0x80
 8005eb8:	021b      	lsls	r3, r3, #8
 8005eba:	001a      	movs	r2, r3
 8005ebc:	2106      	movs	r1, #6
 8005ebe:	202d      	movs	r0, #45	@ 0x2d
 8005ec0:	f7ff ff55 	bl	8005d6e <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8005ec4:	2001      	movs	r0, #1
 8005ec6:	f000 faaa 	bl	800641e <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8005eca:	2001      	movs	r0, #1
 8005ecc:	f000 f822 	bl	8005f14 <_dwt_enableclocks>
}
 8005ed0:	46c0      	nop			@ (mov r8, r8)
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <dwt_setrxaftertxdelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32 rxDelayTime)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b084      	sub	sp, #16
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 8005ede:	2100      	movs	r1, #0
 8005ee0:	201a      	movs	r0, #26
 8005ee2:	f7ff fed3 	bl	8005c8c <dwt_read32bitoffsetreg>
 8005ee6:	0003      	movs	r3, r0
 8005ee8:	60fb      	str	r3, [r7, #12]

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	0d1b      	lsrs	r3, r3, #20
 8005eee:	051b      	lsls	r3, r3, #20
 8005ef0:	60fb      	str	r3, [r7, #12]

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	031b      	lsls	r3, r3, #12
 8005ef6:	0b1b      	lsrs	r3, r3, #12
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	001a      	movs	r2, r3
 8005f02:	2100      	movs	r1, #0
 8005f04:	201a      	movs	r0, #26
 8005f06:	f7ff ff52 	bl	8005dae <dwt_write32bitoffsetreg>
}
 8005f0a:	46c0      	nop			@ (mov r8, r8)
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	b004      	add	sp, #16
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8005f14:	b590      	push	{r4, r7, lr}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8005f1c:	230c      	movs	r3, #12
 8005f1e:	18fb      	adds	r3, r7, r3
 8005f20:	2202      	movs	r2, #2
 8005f22:	2100      	movs	r1, #0
 8005f24:	2036      	movs	r0, #54	@ 0x36
 8005f26:	f7ff fe55 	bl	8005bd4 <dwt_readfromdevice>
    switch(clocks)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b0e      	cmp	r3, #14
 8005f2e:	d900      	bls.n	8005f32 <_dwt_enableclocks+0x1e>
 8005f30:	e07b      	b.n	800602a <_dwt_enableclocks+0x116>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	009a      	lsls	r2, r3, #2
 8005f36:	4b46      	ldr	r3, [pc, #280]	@ (8006050 <_dwt_enableclocks+0x13c>)
 8005f38:	18d3      	adds	r3, r2, r3
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	469f      	mov	pc, r3
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8005f3e:	210c      	movs	r1, #12
 8005f40:	187b      	adds	r3, r7, r1
 8005f42:	2200      	movs	r2, #0
 8005f44:	701a      	strb	r2, [r3, #0]
            reg[1] = reg[1] & 0xfe;
 8005f46:	187b      	adds	r3, r7, r1
 8005f48:	785b      	ldrb	r3, [r3, #1]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	4393      	bics	r3, r2
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	187b      	adds	r3, r7, r1
 8005f52:	705a      	strb	r2, [r3, #1]
        }
        break;
 8005f54:	e06a      	b.n	800602c <_dwt_enableclocks+0x118>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8005f56:	210c      	movs	r1, #12
 8005f58:	187b      	adds	r3, r7, r1
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	b25b      	sxtb	r3, r3
 8005f5e:	2203      	movs	r2, #3
 8005f60:	4393      	bics	r3, r2
 8005f62:	b25b      	sxtb	r3, r3
 8005f64:	2201      	movs	r2, #1
 8005f66:	4313      	orrs	r3, r2
 8005f68:	b25b      	sxtb	r3, r3
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	187b      	adds	r3, r7, r1
 8005f6e:	701a      	strb	r2, [r3, #0]
        }
        break;
 8005f70:	e05c      	b.n	800602c <_dwt_enableclocks+0x118>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8005f72:	210c      	movs	r1, #12
 8005f74:	187b      	adds	r3, r7, r1
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	b25b      	sxtb	r3, r3
 8005f7a:	2203      	movs	r2, #3
 8005f7c:	4393      	bics	r3, r2
 8005f7e:	b25b      	sxtb	r3, r3
 8005f80:	2202      	movs	r2, #2
 8005f82:	4313      	orrs	r3, r2
 8005f84:	b25b      	sxtb	r3, r3
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	187b      	adds	r3, r7, r1
 8005f8a:	701a      	strb	r2, [r3, #0]
        }
        break;
 8005f8c:	e04e      	b.n	800602c <_dwt_enableclocks+0x118>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8005f8e:	210c      	movs	r1, #12
 8005f90:	187b      	adds	r3, r7, r1
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	b25b      	sxtb	r3, r3
 8005f96:	224c      	movs	r2, #76	@ 0x4c
 8005f98:	4393      	bics	r3, r2
 8005f9a:	b25b      	sxtb	r3, r3
 8005f9c:	2248      	movs	r2, #72	@ 0x48
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	b25b      	sxtb	r3, r3
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	187b      	adds	r3, r7, r1
 8005fa6:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x80 | reg[1];
 8005fa8:	187b      	adds	r3, r7, r1
 8005faa:	785b      	ldrb	r3, [r3, #1]
 8005fac:	2280      	movs	r2, #128	@ 0x80
 8005fae:	4252      	negs	r2, r2
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	187b      	adds	r3, r7, r1
 8005fb6:	705a      	strb	r2, [r3, #1]
        }
        break;
 8005fb8:	e038      	b.n	800602c <_dwt_enableclocks+0x118>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8005fba:	210c      	movs	r1, #12
 8005fbc:	187b      	adds	r3, r7, r1
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	224c      	movs	r2, #76	@ 0x4c
 8005fc2:	4393      	bics	r3, r2
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	187b      	adds	r3, r7, r1
 8005fc8:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x7f & reg[1];
 8005fca:	187b      	adds	r3, r7, r1
 8005fcc:	785b      	ldrb	r3, [r3, #1]
 8005fce:	227f      	movs	r2, #127	@ 0x7f
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	187b      	adds	r3, r7, r1
 8005fd6:	705a      	strb	r2, [r3, #1]
        }
        break;
 8005fd8:	e028      	b.n	800602c <_dwt_enableclocks+0x118>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8005fda:	210c      	movs	r1, #12
 8005fdc:	187b      	adds	r3, r7, r1
 8005fde:	785b      	ldrb	r3, [r3, #1]
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	187b      	adds	r3, r7, r1
 8005fe8:	705a      	strb	r2, [r3, #1]
        }
        break;
 8005fea:	e01f      	b.n	800602c <_dwt_enableclocks+0x118>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8005fec:	210c      	movs	r1, #12
 8005fee:	187b      	adds	r3, r7, r1
 8005ff0:	785b      	ldrb	r3, [r3, #1]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	4393      	bics	r3, r2
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	187b      	adds	r3, r7, r1
 8005ffa:	705a      	strb	r2, [r3, #1]
        }
        break;
 8005ffc:	e016      	b.n	800602c <_dwt_enableclocks+0x118>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8005ffe:	210c      	movs	r1, #12
 8006000:	187b      	adds	r3, r7, r1
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	b25b      	sxtb	r3, r3
 8006006:	2230      	movs	r2, #48	@ 0x30
 8006008:	4393      	bics	r3, r2
 800600a:	b25b      	sxtb	r3, r3
 800600c:	2220      	movs	r2, #32
 800600e:	4313      	orrs	r3, r2
 8006010:	b25b      	sxtb	r3, r3
 8006012:	b2da      	uxtb	r2, r3
 8006014:	187b      	adds	r3, r7, r1
 8006016:	701a      	strb	r2, [r3, #0]
        }
        break;
 8006018:	e008      	b.n	800602c <_dwt_enableclocks+0x118>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 800601a:	210c      	movs	r1, #12
 800601c:	187b      	adds	r3, r7, r1
 800601e:	2201      	movs	r2, #1
 8006020:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x03;
 8006022:	187b      	adds	r3, r7, r1
 8006024:	2203      	movs	r2, #3
 8006026:	705a      	strb	r2, [r3, #1]
        }
        break;
 8006028:	e000      	b.n	800602c <_dwt_enableclocks+0x118>
        default:
        break;
 800602a:	46c0      	nop			@ (mov r8, r8)
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 800602c:	240c      	movs	r4, #12
 800602e:	193b      	adds	r3, r7, r4
 8006030:	2201      	movs	r2, #1
 8006032:	2100      	movs	r1, #0
 8006034:	2036      	movs	r0, #54	@ 0x36
 8006036:	f7ff fd6c 	bl	8005b12 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 800603a:	193b      	adds	r3, r7, r4
 800603c:	3301      	adds	r3, #1
 800603e:	2201      	movs	r2, #1
 8006040:	2101      	movs	r1, #1
 8006042:	2036      	movs	r0, #54	@ 0x36
 8006044:	f7ff fd65 	bl	8005b12 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8006048:	46c0      	nop			@ (mov r8, r8)
 800604a:	46bd      	mov	sp, r7
 800604c:	b005      	add	sp, #20
 800604e:	bd90      	pop	{r4, r7, pc}
 8006050:	080067d8 	.word	0x080067d8

08006054 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8006054:	b580      	push	{r7, lr}
 8006056:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8006058:	2000      	movs	r0, #0
 800605a:	f7ff ff5b 	bl	8005f14 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 800605e:	2200      	movs	r2, #0
 8006060:	2104      	movs	r1, #4
 8006062:	2036      	movs	r0, #54	@ 0x36
 8006064:	f7ff fe83 	bl	8005d6e <dwt_write16bitoffsetreg>
}
 8006068:	46c0      	nop			@ (mov r8, r8)
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <dwt_setdelayedtrxtime>:
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32 starttime)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b082      	sub	sp, #8
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	001a      	movs	r2, r3
 800607a:	2101      	movs	r1, #1
 800607c:	200a      	movs	r0, #10
 800607e:	f7ff fe96 	bl	8005dae <dwt_write32bitoffsetreg>

} // end dwt_setdelayedtrxtime()
 8006082:	46c0      	nop			@ (mov r8, r8)
 8006084:	46bd      	mov	sp, r7
 8006086:	b002      	add	sp, #8
 8006088:	bd80      	pop	{r7, pc}
	...

0800608c <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 800608c:	b5b0      	push	{r4, r5, r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	0002      	movs	r2, r0
 8006094:	1dfb      	adds	r3, r7, #7
 8006096:	701a      	strb	r2, [r3, #0]
    int retval = DWT_SUCCESS ;
 8006098:	2300      	movs	r3, #0
 800609a:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 800609c:	210b      	movs	r1, #11
 800609e:	187b      	adds	r3, r7, r1
 80060a0:	2200      	movs	r2, #0
 80060a2:	701a      	strb	r2, [r3, #0]
    uint16 checkTxOK = 0 ;
 80060a4:	2308      	movs	r3, #8
 80060a6:	18fb      	adds	r3, r7, r3
 80060a8:	2200      	movs	r2, #0
 80060aa:	801a      	strh	r2, [r3, #0]

    if(mode & DWT_RESPONSE_EXPECTED)
 80060ac:	1dfb      	adds	r3, r7, #7
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	2202      	movs	r2, #2
 80060b2:	4013      	ands	r3, r2
 80060b4:	d006      	beq.n	80060c4 <dwt_starttx+0x38>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 80060b6:	187b      	adds	r3, r7, r1
 80060b8:	2280      	movs	r2, #128	@ 0x80
 80060ba:	701a      	strb	r2, [r3, #0]
        pdw1000local->wait4resp = 1;
 80060bc:	4b21      	ldr	r3, [pc, #132]	@ (8006144 <dwt_starttx+0xb8>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2201      	movs	r2, #1
 80060c2:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 80060c4:	1dfb      	adds	r3, r7, #7
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	2201      	movs	r2, #1
 80060ca:	4013      	ands	r3, r2
 80060cc:	d027      	beq.n	800611e <dwt_starttx+0x92>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 80060ce:	200b      	movs	r0, #11
 80060d0:	183b      	adds	r3, r7, r0
 80060d2:	183a      	adds	r2, r7, r0
 80060d4:	7812      	ldrb	r2, [r2, #0]
 80060d6:	2106      	movs	r1, #6
 80060d8:	430a      	orrs	r2, r1
 80060da:	701a      	strb	r2, [r3, #0]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 80060dc:	183b      	adds	r3, r7, r0
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	001a      	movs	r2, r3
 80060e2:	2100      	movs	r1, #0
 80060e4:	200d      	movs	r0, #13
 80060e6:	f7ff fe2f 	bl	8005d48 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 80060ea:	2508      	movs	r5, #8
 80060ec:	197c      	adds	r4, r7, r5
 80060ee:	2103      	movs	r1, #3
 80060f0:	200f      	movs	r0, #15
 80060f2:	f7ff fdf2 	bl	8005cda <dwt_read16bitoffsetreg>
 80060f6:	0003      	movs	r3, r0
 80060f8:	8023      	strh	r3, [r4, #0]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 80060fa:	197b      	adds	r3, r7, r5
 80060fc:	881a      	ldrh	r2, [r3, #0]
 80060fe:	2381      	movs	r3, #129	@ 0x81
 8006100:	00db      	lsls	r3, r3, #3
 8006102:	4013      	ands	r3, r2
 8006104:	d102      	bne.n	800610c <dwt_starttx+0x80>
        {
            retval = DWT_SUCCESS ; // All okay
 8006106:	2300      	movs	r3, #0
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	e016      	b.n	800613a <dwt_starttx+0xae>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 800610c:	2240      	movs	r2, #64	@ 0x40
 800610e:	2100      	movs	r1, #0
 8006110:	200d      	movs	r0, #13
 8006112:	f7ff fe19 	bl	8005d48 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 8006116:	2301      	movs	r3, #1
 8006118:	425b      	negs	r3, r3
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	e00d      	b.n	800613a <dwt_starttx+0xae>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 800611e:	200b      	movs	r0, #11
 8006120:	183b      	adds	r3, r7, r0
 8006122:	183a      	adds	r2, r7, r0
 8006124:	7812      	ldrb	r2, [r2, #0]
 8006126:	2102      	movs	r1, #2
 8006128:	430a      	orrs	r2, r1
 800612a:	701a      	strb	r2, [r3, #0]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800612c:	183b      	adds	r3, r7, r0
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	001a      	movs	r2, r3
 8006132:	2100      	movs	r1, #0
 8006134:	200d      	movs	r0, #13
 8006136:	f7ff fe07 	bl	8005d48 <dwt_write8bitoffsetreg>
    }

    return retval;
 800613a:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 800613c:	0018      	movs	r0, r3
 800613e:	46bd      	mov	sp, r7
 8006140:	b004      	add	sp, #16
 8006142:	bdb0      	pop	{r4, r5, r7, pc}
 8006144:	2000004c 	.word	0x2000004c

08006148 <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 800614e:	2100      	movs	r1, #0
 8006150:	200e      	movs	r0, #14
 8006152:	f7ff fd9b 	bl	8005c8c <dwt_read32bitoffsetreg>
 8006156:	0003      	movs	r3, r0
 8006158:	607b      	str	r3, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 800615a:	f000 f942 	bl	80063e2 <decamutexon>
 800615e:	0003      	movs	r3, r0
 8006160:	603b      	str	r3, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 8006162:	2200      	movs	r2, #0
 8006164:	2100      	movs	r1, #0
 8006166:	200e      	movs	r0, #14
 8006168:	f7ff fe21 	bl	8005dae <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 800616c:	2240      	movs	r2, #64	@ 0x40
 800616e:	2100      	movs	r1, #0
 8006170:	200d      	movs	r0, #13
 8006172:	f7ff fde9 	bl	8005d48 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 8006176:	4b0d      	ldr	r3, [pc, #52]	@ (80061ac <dwt_forcetrxoff+0x64>)
 8006178:	001a      	movs	r2, r3
 800617a:	2100      	movs	r1, #0
 800617c:	200f      	movs	r0, #15
 800617e:	f7ff fe16 	bl	8005dae <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 8006182:	f000 f817 	bl	80061b4 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	001a      	movs	r2, r3
 800618a:	2100      	movs	r1, #0
 800618c:	200e      	movs	r0, #14
 800618e:	f7ff fe0e 	bl	8005dae <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	0018      	movs	r0, r3
 8006196:	f000 f935 	bl	8006404 <decamutexoff>
    pdw1000local->wait4resp = 0;
 800619a:	4b05      	ldr	r3, [pc, #20]	@ (80061b0 <dwt_forcetrxoff+0x68>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2200      	movs	r2, #0
 80061a0:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 80061a2:	46c0      	nop			@ (mov r8, r8)
 80061a4:	46bd      	mov	sp, r7
 80061a6:	b002      	add	sp, #8
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	46c0      	nop			@ (mov r8, r8)
 80061ac:	2427fff8 	.word	0x2427fff8
 80061b0:	2000004c 	.word	0x2000004c

080061b4 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 80061b4:	b590      	push	{r4, r7, lr}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 80061ba:	1dfc      	adds	r4, r7, #7
 80061bc:	2103      	movs	r1, #3
 80061be:	200f      	movs	r0, #15
 80061c0:	f7ff fdae 	bl	8005d20 <dwt_read8bitoffsetreg>
 80061c4:	0003      	movs	r3, r0
 80061c6:	7023      	strb	r3, [r4, #0]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 80061c8:	1dfb      	adds	r3, r7, #7
 80061ca:	781a      	ldrb	r2, [r3, #0]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 80061cc:	1dfb      	adds	r3, r7, #7
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 80061d2:	4053      	eors	r3, r2
 80061d4:	2280      	movs	r2, #128	@ 0x80
 80061d6:	4013      	ands	r3, r2
 80061d8:	d004      	beq.n	80061e4 <dwt_syncrxbufptrs+0x30>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 80061da:	2201      	movs	r2, #1
 80061dc:	2103      	movs	r1, #3
 80061de:	200d      	movs	r0, #13
 80061e0:	f7ff fdb2 	bl	8005d48 <dwt_write8bitoffsetreg>
    }
}
 80061e4:	46c0      	nop			@ (mov r8, r8)
 80061e6:	46bd      	mov	sp, r7
 80061e8:	b003      	add	sp, #12
 80061ea:	bd90      	pop	{r4, r7, pc}

080061ec <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 80061ec:	b5b0      	push	{r4, r5, r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2204      	movs	r2, #4
 80061f8:	4013      	ands	r3, r2
 80061fa:	d101      	bne.n	8006200 <dwt_rxenable+0x14>
    {
        dwt_syncrxbufptrs();
 80061fc:	f7ff ffda 	bl	80061b4 <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 8006200:	210e      	movs	r1, #14
 8006202:	187b      	adds	r3, r7, r1
 8006204:	2280      	movs	r2, #128	@ 0x80
 8006206:	0052      	lsls	r2, r2, #1
 8006208:	801a      	strh	r2, [r3, #0]

    if (mode & DWT_START_RX_DELAYED)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	4013      	ands	r3, r2
 8006210:	d006      	beq.n	8006220 <dwt_rxenable+0x34>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 8006212:	187b      	adds	r3, r7, r1
 8006214:	187a      	adds	r2, r7, r1
 8006216:	8812      	ldrh	r2, [r2, #0]
 8006218:	2180      	movs	r1, #128	@ 0x80
 800621a:	0089      	lsls	r1, r1, #2
 800621c:	430a      	orrs	r2, r1
 800621e:	801a      	strh	r2, [r3, #0]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8006220:	230e      	movs	r3, #14
 8006222:	18fb      	adds	r3, r7, r3
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	001a      	movs	r2, r3
 8006228:	2100      	movs	r1, #0
 800622a:	200d      	movs	r0, #13
 800622c:	f7ff fd9f 	bl	8005d6e <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	4013      	ands	r3, r2
 8006236:	d01c      	beq.n	8006272 <dwt_rxenable+0x86>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8006238:	250d      	movs	r5, #13
 800623a:	197c      	adds	r4, r7, r5
 800623c:	2103      	movs	r1, #3
 800623e:	200f      	movs	r0, #15
 8006240:	f7ff fd6e 	bl	8005d20 <dwt_read8bitoffsetreg>
 8006244:	0003      	movs	r3, r0
 8006246:	7023      	strb	r3, [r4, #0]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 8006248:	197b      	adds	r3, r7, r5
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	2208      	movs	r2, #8
 800624e:	4013      	ands	r3, r2
 8006250:	d00f      	beq.n	8006272 <dwt_rxenable+0x86>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 8006252:	f7ff ff79 	bl	8006148 <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2202      	movs	r2, #2
 800625a:	4013      	ands	r3, r2
 800625c:	d106      	bne.n	800626c <dwt_rxenable+0x80>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 800625e:	2380      	movs	r3, #128	@ 0x80
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	001a      	movs	r2, r3
 8006264:	2100      	movs	r1, #0
 8006266:	200d      	movs	r0, #13
 8006268:	f7ff fd81 	bl	8005d6e <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 800626c:	2301      	movs	r3, #1
 800626e:	425b      	negs	r3, r3
 8006270:	e000      	b.n	8006274 <dwt_rxenable+0x88>
        }
    }

    return DWT_SUCCESS;
 8006272:	2300      	movs	r3, #0
} // end dwt_rxenable()
 8006274:	0018      	movs	r0, r3
 8006276:	46bd      	mov	sp, r7
 8006278:	b004      	add	sp, #16
 800627a:	bdb0      	pop	{r4, r5, r7, pc}

0800627c <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 800627c:	b5b0      	push	{r4, r5, r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	0002      	movs	r2, r0
 8006284:	1dbb      	adds	r3, r7, #6
 8006286:	801a      	strh	r2, [r3, #0]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 8006288:	250f      	movs	r5, #15
 800628a:	197c      	adds	r4, r7, r5
 800628c:	2103      	movs	r1, #3
 800628e:	2004      	movs	r0, #4
 8006290:	f7ff fd46 	bl	8005d20 <dwt_read8bitoffsetreg>
 8006294:	0003      	movs	r3, r0
 8006296:	7023      	strb	r3, [r4, #0]

    if(time > 0)
 8006298:	1dbb      	adds	r3, r7, #6
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d01e      	beq.n	80062de <dwt_setrxtimeout+0x62>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 80062a0:	1dbb      	adds	r3, r7, #6
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	001a      	movs	r2, r3
 80062a6:	2100      	movs	r1, #0
 80062a8:	200c      	movs	r0, #12
 80062aa:	f7ff fd60 	bl	8005d6e <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 80062ae:	0028      	movs	r0, r5
 80062b0:	183b      	adds	r3, r7, r0
 80062b2:	183a      	adds	r2, r7, r0
 80062b4:	7812      	ldrb	r2, [r2, #0]
 80062b6:	2110      	movs	r1, #16
 80062b8:	430a      	orrs	r2, r1
 80062ba:	701a      	strb	r2, [r3, #0]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 80062bc:	4b15      	ldr	r3, [pc, #84]	@ (8006314 <dwt_setrxtimeout+0x98>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	691a      	ldr	r2, [r3, #16]
 80062c2:	4b14      	ldr	r3, [pc, #80]	@ (8006314 <dwt_setrxtimeout+0x98>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2180      	movs	r1, #128	@ 0x80
 80062c8:	0549      	lsls	r1, r1, #21
 80062ca:	430a      	orrs	r2, r1
 80062cc:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 80062ce:	183b      	adds	r3, r7, r0
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	001a      	movs	r2, r3
 80062d4:	2103      	movs	r1, #3
 80062d6:	2004      	movs	r0, #4
 80062d8:	f7ff fd36 	bl	8005d48 <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 80062dc:	e015      	b.n	800630a <dwt_setrxtimeout+0x8e>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 80062de:	200f      	movs	r0, #15
 80062e0:	183b      	adds	r3, r7, r0
 80062e2:	183a      	adds	r2, r7, r0
 80062e4:	7812      	ldrb	r2, [r2, #0]
 80062e6:	2110      	movs	r1, #16
 80062e8:	438a      	bics	r2, r1
 80062ea:	701a      	strb	r2, [r3, #0]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 80062ec:	4b09      	ldr	r3, [pc, #36]	@ (8006314 <dwt_setrxtimeout+0x98>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	691a      	ldr	r2, [r3, #16]
 80062f2:	4b08      	ldr	r3, [pc, #32]	@ (8006314 <dwt_setrxtimeout+0x98>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4908      	ldr	r1, [pc, #32]	@ (8006318 <dwt_setrxtimeout+0x9c>)
 80062f8:	400a      	ands	r2, r1
 80062fa:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 80062fc:	183b      	adds	r3, r7, r0
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	001a      	movs	r2, r3
 8006302:	2103      	movs	r1, #3
 8006304:	2004      	movs	r0, #4
 8006306:	f7ff fd1f 	bl	8005d48 <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 800630a:	46c0      	nop			@ (mov r8, r8)
 800630c:	46bd      	mov	sp, r7
 800630e:	b004      	add	sp, #16
 8006310:	bdb0      	pop	{r4, r5, r7, pc}
 8006312:	46c0      	nop			@ (mov r8, r8)
 8006314:	2000004c 	.word	0x2000004c
 8006318:	efffffff 	.word	0xefffffff

0800631c <dwt_setpreambledetecttimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setpreambledetecttimeout(uint16 timeout)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	0002      	movs	r2, r0
 8006324:	1dbb      	adds	r3, r7, #6
 8006326:	801a      	strh	r2, [r3, #0]
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_PRETOC_OFFSET, timeout);
 8006328:	1dbb      	adds	r3, r7, #6
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	001a      	movs	r2, r3
 800632e:	2124      	movs	r1, #36	@ 0x24
 8006330:	2027      	movs	r0, #39	@ 0x27
 8006332:	f7ff fd1c 	bl	8005d6e <dwt_write16bitoffsetreg>
}
 8006336:	46c0      	nop			@ (mov r8, r8)
 8006338:	46bd      	mov	sp, r7
 800633a:	b002      	add	sp, #8
 800633c:	bd80      	pop	{r7, pc}

0800633e <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	af00      	add	r7, sp, #0
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 8006342:	22e0      	movs	r2, #224	@ 0xe0
 8006344:	2103      	movs	r1, #3
 8006346:	2036      	movs	r0, #54	@ 0x36
 8006348:	f7ff fcfe 	bl	8005d48 <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 800634c:	22f0      	movs	r2, #240	@ 0xf0
 800634e:	2103      	movs	r1, #3
 8006350:	2036      	movs	r0, #54	@ 0x36
 8006352:	f7ff fcf9 	bl	8005d48 <dwt_write8bitoffsetreg>
}
 8006356:	46c0      	nop			@ (mov r8, r8)
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8006360:	f7ff fe78 	bl	8006054 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8006364:	2200      	movs	r2, #0
 8006366:	2100      	movs	r1, #0
 8006368:	202c      	movs	r0, #44	@ 0x2c
 800636a:	f7ff fd00 	bl	8005d6e <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 800636e:	2200      	movs	r2, #0
 8006370:	2106      	movs	r1, #6
 8006372:	202c      	movs	r0, #44	@ 0x2c
 8006374:	f7ff fce8 	bl	8005d48 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8006378:	f7ff fd62 	bl	8005e40 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 800637c:	2200      	movs	r2, #0
 800637e:	2103      	movs	r1, #3
 8006380:	2036      	movs	r0, #54	@ 0x36
 8006382:	f7ff fce1 	bl	8005d48 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8006386:	2001      	movs	r0, #1
 8006388:	f000 f849 	bl	800641e <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 800638c:	22f0      	movs	r2, #240	@ 0xf0
 800638e:	2103      	movs	r1, #3
 8006390:	2036      	movs	r0, #54	@ 0x36
 8006392:	f7ff fcd9 	bl	8005d48 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8006396:	4b03      	ldr	r3, [pc, #12]	@ (80063a4 <dwt_softreset+0x48>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2200      	movs	r2, #0
 800639c:	755a      	strb	r2, [r3, #21]
}
 800639e:	46c0      	nop			@ (mov r8, r8)
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	2000004c 	.word	0x2000004c

080063a8 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	0002      	movs	r2, r0
 80063b0:	1dfb      	adds	r3, r7, #7
 80063b2:	701a      	strb	r2, [r3, #0]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 80063b4:	1dfb      	adds	r3, r7, #7
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	b25b      	sxtb	r3, r3
 80063ba:	221f      	movs	r2, #31
 80063bc:	4013      	ands	r3, r2
 80063be:	b25b      	sxtb	r3, r3
 80063c0:	2260      	movs	r2, #96	@ 0x60
 80063c2:	4313      	orrs	r3, r2
 80063c4:	b25a      	sxtb	r2, r3
 80063c6:	210f      	movs	r1, #15
 80063c8:	187b      	adds	r3, r7, r1
 80063ca:	701a      	strb	r2, [r3, #0]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 80063cc:	187b      	adds	r3, r7, r1
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	001a      	movs	r2, r3
 80063d2:	210e      	movs	r1, #14
 80063d4:	202b      	movs	r0, #43	@ 0x2b
 80063d6:	f7ff fcb7 	bl	8005d48 <dwt_write8bitoffsetreg>
}
 80063da:	46c0      	nop			@ (mov r8, r8)
 80063dc:	46bd      	mov	sp, r7
 80063de:	b004      	add	sp, #16
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b082      	sub	sp, #8
 80063e6:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 80063e8:	f000 f95c 	bl	80066a4 <port_GetEXT_IRQStatus>
 80063ec:	0003      	movs	r3, r0
 80063ee:	607b      	str	r3, [r7, #4]

	if(s) {
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 80063f6:	f000 f945 	bl	8006684 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 80063fa:	687b      	ldr	r3, [r7, #4]
}
 80063fc:	0018      	movs	r0, r3
 80063fe:	46bd      	mov	sp, r7
 8006400:	b002      	add	sp, #8
 8006402:	bd80      	pop	{r7, pc}

08006404 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 8006412:	f000 f93f 	bl	8006694 <port_EnableEXT_IRQ>
	}
}
 8006416:	46c0      	nop			@ (mov r8, r8)
 8006418:	46bd      	mov	sp, r7
 800641a:	b002      	add	sp, #8
 800641c:	bd80      	pop	{r7, pc}

0800641e <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b082      	sub	sp, #8
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	0018      	movs	r0, r3
 800642a:	f000 f8c9 	bl	80065c0 <Sleep>
}
 800642e:	46c0      	nop			@ (mov r8, r8)
 8006430:	46bd      	mov	sp, r7
 8006432:	b002      	add	sp, #8
 8006434:	bd80      	pop	{r7, pc}
	...

08006438 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 8006438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800643a:	46d6      	mov	lr, sl
 800643c:	4646      	mov	r6, r8
 800643e:	464f      	mov	r7, r9
 8006440:	b5c0      	push	{r6, r7, lr}
 8006442:	4682      	mov	sl, r0
 8006444:	4689      	mov	r9, r1
 8006446:	0015      	movs	r5, r2
 8006448:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800644a:	f7ff ffca 	bl	80063e2 <decamutexon>
 800644e:	0006      	movs	r6, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8006450:	4c14      	ldr	r4, [pc, #80]	@ (80064a4 <writetospi+0x6c>)
 8006452:	0020      	movs	r0, r4
 8006454:	f7fe fa25 	bl	80048a2 <HAL_SPI_GetState>
 8006458:	2801      	cmp	r0, #1
 800645a:	d1fa      	bne.n	8006452 <writetospi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800645c:	308f      	adds	r0, #143	@ 0x8f
 800645e:	2200      	movs	r2, #0
 8006460:	2110      	movs	r1, #16
 8006462:	05c0      	lsls	r0, r0, #23
 8006464:	f7fd f9dd 	bl	8003822 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 8006468:	2301      	movs	r3, #1
 800646a:	4652      	mov	r2, sl
 800646c:	4649      	mov	r1, r9
 800646e:	0020      	movs	r0, r4
 8006470:	425b      	negs	r3, r3
 8006472:	f7fe f8b7 	bl	80045e4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 8006476:	2301      	movs	r3, #1
 8006478:	4641      	mov	r1, r8
 800647a:	b2aa      	uxth	r2, r5
 800647c:	425b      	negs	r3, r3
 800647e:	0020      	movs	r0, r4
 8006480:	f7fe f8b0 	bl	80045e4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8006484:	2090      	movs	r0, #144	@ 0x90
 8006486:	2201      	movs	r2, #1
 8006488:	2110      	movs	r1, #16
 800648a:	05c0      	lsls	r0, r0, #23
 800648c:	f7fd f9c9 	bl	8003822 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8006490:	0030      	movs	r0, r6
 8006492:	f7ff ffb7 	bl	8006404 <decamutexoff>

    return 0;
} // end writetospi()
 8006496:	2000      	movs	r0, #0
 8006498:	bce0      	pop	{r5, r6, r7}
 800649a:	46ba      	mov	sl, r7
 800649c:	46b1      	mov	r9, r6
 800649e:	46a8      	mov	r8, r5
 80064a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064a2:	46c0      	nop			@ (mov r8, r8)
 80064a4:	200000f8 	.word	0x200000f8

080064a8 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 80064a8:	b570      	push	{r4, r5, r6, lr}
 80064aa:	46de      	mov	lr, fp
 80064ac:	464d      	mov	r5, r9
 80064ae:	4644      	mov	r4, r8
 80064b0:	4656      	mov	r6, sl
 80064b2:	b570      	push	{r4, r5, r6, lr}
 80064b4:	468b      	mov	fp, r1
 80064b6:	0004      	movs	r4, r0
 80064b8:	4692      	mov	sl, r2
 80064ba:	4698      	mov	r8, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80064bc:	f7ff ff91 	bl	80063e2 <decamutexon>
 80064c0:	4681      	mov	r9, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80064c2:	4d20      	ldr	r5, [pc, #128]	@ (8006544 <readfromspi+0x9c>)
 80064c4:	0028      	movs	r0, r5
 80064c6:	f7fe f9ec 	bl	80048a2 <HAL_SPI_GetState>
 80064ca:	2801      	cmp	r0, #1
 80064cc:	d1fa      	bne.n	80064c4 <readfromspi+0x1c>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80064ce:	308f      	adds	r0, #143	@ 0x8f
 80064d0:	2200      	movs	r2, #0
 80064d2:	2110      	movs	r1, #16
 80064d4:	05c0      	lsls	r0, r0, #23
 80064d6:	f7fd f9a4 	bl	8003822 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 80064da:	2c00      	cmp	r4, #0
 80064dc:	d00b      	beq.n	80064f6 <readfromspi+0x4e>
 80064de:	2600      	movs	r6, #0
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 80064e0:	465a      	mov	r2, fp
 80064e2:	2301      	movs	r3, #1
 80064e4:	1991      	adds	r1, r2, r6
 80064e6:	0028      	movs	r0, r5
    for(i=0; i<headerLength; i++)
 80064e8:	3601      	adds	r6, #1
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 80064ea:	2201      	movs	r2, #1
 80064ec:	425b      	negs	r3, r3
 80064ee:	f7fe f879 	bl	80045e4 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 80064f2:	42a6      	cmp	r6, r4
 80064f4:	dbf4      	blt.n	80064e0 <readfromspi+0x38>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 80064f6:	4653      	mov	r3, sl
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d013      	beq.n	8006524 <readfromspi+0x7c>
 80064fc:	4640      	mov	r0, r8
 80064fe:	18c6      	adds	r6, r0, r3
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8006500:	2300      	movs	r3, #0
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 8006502:	2202      	movs	r2, #2
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8006504:	469c      	mov	ip, r3
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 8006506:	2401      	movs	r4, #1
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 8006508:	6829      	ldr	r1, [r5, #0]
 800650a:	688b      	ldr	r3, [r1, #8]
 800650c:	421a      	tst	r2, r3
 800650e:	d0fc      	beq.n	800650a <readfromspi+0x62>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8006510:	4663      	mov	r3, ip
 8006512:	60cb      	str	r3, [r1, #12]
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 8006514:	688b      	ldr	r3, [r1, #8]
 8006516:	421c      	tst	r4, r3
 8006518:	d0fc      	beq.n	8006514 <readfromspi+0x6c>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 800651a:	68cb      	ldr	r3, [r1, #12]
 800651c:	7003      	strb	r3, [r0, #0]
    while(readlength-- > 0)
 800651e:	3001      	adds	r0, #1
 8006520:	4286      	cmp	r6, r0
 8006522:	d1f1      	bne.n	8006508 <readfromspi+0x60>
    }

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8006524:	2090      	movs	r0, #144	@ 0x90
 8006526:	2201      	movs	r2, #1
 8006528:	2110      	movs	r1, #16
 800652a:	05c0      	lsls	r0, r0, #23
 800652c:	f7fd f979 	bl	8003822 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8006530:	4648      	mov	r0, r9
 8006532:	f7ff ff67 	bl	8006404 <decamutexoff>

    return 0;
} // end readfromspi()
 8006536:	2000      	movs	r0, #0
 8006538:	bc78      	pop	{r3, r4, r5, r6}
 800653a:	46b3      	mov	fp, r6
 800653c:	46aa      	mov	sl, r5
 800653e:	46a1      	mov	r9, r4
 8006540:	4698      	mov	r8, r3
 8006542:	bd70      	pop	{r4, r5, r6, pc}
 8006544:	200000f8 	.word	0x200000f8

08006548 <__NVIC_EnableIRQ>:
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	0002      	movs	r2, r0
 8006550:	1dfb      	adds	r3, r7, #7
 8006552:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006554:	1dfb      	adds	r3, r7, #7
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b7f      	cmp	r3, #127	@ 0x7f
 800655a:	d809      	bhi.n	8006570 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800655c:	1dfb      	adds	r3, r7, #7
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	001a      	movs	r2, r3
 8006562:	231f      	movs	r3, #31
 8006564:	401a      	ands	r2, r3
 8006566:	4b04      	ldr	r3, [pc, #16]	@ (8006578 <__NVIC_EnableIRQ+0x30>)
 8006568:	2101      	movs	r1, #1
 800656a:	4091      	lsls	r1, r2
 800656c:	000a      	movs	r2, r1
 800656e:	601a      	str	r2, [r3, #0]
}
 8006570:	46c0      	nop			@ (mov r8, r8)
 8006572:	46bd      	mov	sp, r7
 8006574:	b002      	add	sp, #8
 8006576:	bd80      	pop	{r7, pc}
 8006578:	e000e100 	.word	0xe000e100

0800657c <__NVIC_DisableIRQ>:
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	0002      	movs	r2, r0
 8006584:	1dfb      	adds	r3, r7, #7
 8006586:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006588:	1dfb      	adds	r3, r7, #7
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	2b7f      	cmp	r3, #127	@ 0x7f
 800658e:	d810      	bhi.n	80065b2 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006590:	1dfb      	adds	r3, r7, #7
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	001a      	movs	r2, r3
 8006596:	231f      	movs	r3, #31
 8006598:	4013      	ands	r3, r2
 800659a:	4908      	ldr	r1, [pc, #32]	@ (80065bc <__NVIC_DisableIRQ+0x40>)
 800659c:	2201      	movs	r2, #1
 800659e:	409a      	lsls	r2, r3
 80065a0:	0013      	movs	r3, r2
 80065a2:	2280      	movs	r2, #128	@ 0x80
 80065a4:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80065a6:	f3bf 8f4f 	dsb	sy
}
 80065aa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80065ac:	f3bf 8f6f 	isb	sy
}
 80065b0:	46c0      	nop			@ (mov r8, r8)
}
 80065b2:	46c0      	nop			@ (mov r8, r8)
 80065b4:	46bd      	mov	sp, r7
 80065b6:	b002      	add	sp, #8
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	46c0      	nop			@ (mov r8, r8)
 80065bc:	e000e100 	.word	0xe000e100

080065c0 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	0018      	movs	r0, r3
 80065cc:	f7fc fc44 	bl	8002e58 <HAL_Delay>
}
 80065d0:	46c0      	nop			@ (mov r8, r8)
 80065d2:	46bd      	mov	sp, r7
 80065d4:	b002      	add	sp, #8
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 80065e0:	4a09      	ldr	r2, [pc, #36]	@ (8006608 <EXTI_GetITEnStatus+0x30>)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	095b      	lsrs	r3, r3, #5
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	589a      	ldr	r2, [r3, r2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	211f      	movs	r1, #31
 80065ee:	400b      	ands	r3, r1
 80065f0:	40da      	lsrs	r2, r3
 80065f2:	0013      	movs	r3, r2
 80065f4:	2201      	movs	r2, #1
 80065f6:	4013      	ands	r3, r2
 80065f8:	1e5a      	subs	r2, r3, #1
 80065fa:	4193      	sbcs	r3, r2
 80065fc:	b2db      	uxtb	r3, r3
}
 80065fe:	0018      	movs	r0, r3
 8006600:	46bd      	mov	sp, r7
 8006602:	b002      	add	sp, #8
 8006604:	bd80      	pop	{r7, pc}
 8006606:	46c0      	nop			@ (mov r8, r8)
 8006608:	e000e100 	.word	0xe000e100

0800660c <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006610:	4b04      	ldr	r3, [pc, #16]	@ (8006624 <port_set_dw1000_slowrate+0x18>)
 8006612:	2218      	movs	r2, #24
 8006614:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8006616:	4b03      	ldr	r3, [pc, #12]	@ (8006624 <port_set_dw1000_slowrate+0x18>)
 8006618:	0018      	movs	r0, r3
 800661a:	f7fd ff2b 	bl	8004474 <HAL_SPI_Init>
}
 800661e:	46c0      	nop			@ (mov r8, r8)
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	200000f8 	.word	0x200000f8

08006628 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800662c:	4b04      	ldr	r3, [pc, #16]	@ (8006640 <port_set_dw1000_fastrate+0x18>)
 800662e:	2200      	movs	r2, #0
 8006630:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8006632:	4b03      	ldr	r3, [pc, #12]	@ (8006640 <port_set_dw1000_fastrate+0x18>)
 8006634:	0018      	movs	r0, r3
 8006636:	f7fd ff1d 	bl	8004474 <HAL_SPI_Init>
}
 800663a:	46c0      	nop			@ (mov r8, r8)
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	200000f8 	.word	0x200000f8

08006644 <HAL_GPIO_EXTI_Callback>:
/* @fn      HAL_GPIO_EXTI_Callback
 * @brief   IRQ HAL call-back for all EXTI configured lines
 *          i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	0002      	movs	r2, r0
 800664c:	1dbb      	adds	r3, r7, #6
 800664e:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == DW_IRQn_Pin)
 8006650:	1dbb      	adds	r3, r7, #6
 8006652:	881b      	ldrh	r3, [r3, #0]
 8006654:	2b20      	cmp	r3, #32
 8006656:	d101      	bne.n	800665c <HAL_GPIO_EXTI_Callback+0x18>
    {
        process_deca_irq();
 8006658:	f000 f804 	bl	8006664 <process_deca_irq>
    }
}
 800665c:	46c0      	nop			@ (mov r8, r8)
 800665e:	46bd      	mov	sp, r7
 8006660:	b002      	add	sp, #8
 8006662:	bd80      	pop	{r7, pc}

08006664 <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	af00      	add	r7, sp, #0
    while(port_CheckEXT_IRQ() != 0)
 8006668:	e002      	b.n	8006670 <process_deca_irq+0xc>
    {

        port_deca_isr();
 800666a:	4b05      	ldr	r3, [pc, #20]	@ (8006680 <process_deca_irq+0x1c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4798      	blx	r3
    while(port_CheckEXT_IRQ() != 0)
 8006670:	f000 f822 	bl	80066b8 <port_CheckEXT_IRQ>
 8006674:	1e03      	subs	r3, r0, #0
 8006676:	d1f8      	bne.n	800666a <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 8006678:	46c0      	nop			@ (mov r8, r8)
 800667a:	46c0      	nop			@ (mov r8, r8)
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	20000284 	.word	0x20000284

08006684 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8006688:	2007      	movs	r0, #7
 800668a:	f7ff ff77 	bl	800657c <__NVIC_DisableIRQ>
}
 800668e:	46c0      	nop			@ (mov r8, r8)
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8006698:	2007      	movs	r0, #7
 800669a:	f7ff ff55 	bl	8006548 <__NVIC_EnableIRQ>
}
 800669e:	46c0      	nop			@ (mov r8, r8)
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 80066a8:	2007      	movs	r0, #7
 80066aa:	f7ff ff95 	bl	80065d8 <EXTI_GetITEnStatus>
 80066ae:	0003      	movs	r3, r0
}
 80066b0:	0018      	movs	r0, r3
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
	...

080066b8 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DECAIRQ_GPIO, DW_IRQn_Pin);
 80066bc:	4b04      	ldr	r3, [pc, #16]	@ (80066d0 <port_CheckEXT_IRQ+0x18>)
 80066be:	2120      	movs	r1, #32
 80066c0:	0018      	movs	r0, r3
 80066c2:	f7fd f891 	bl	80037e8 <HAL_GPIO_ReadPin>
 80066c6:	0003      	movs	r3, r0
}
 80066c8:	0018      	movs	r0, r3
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	46c0      	nop			@ (mov r8, r8)
 80066d0:	48000400 	.word	0x48000400

080066d4 <memcmp>:
 80066d4:	b530      	push	{r4, r5, lr}
 80066d6:	2400      	movs	r4, #0
 80066d8:	3901      	subs	r1, #1
 80066da:	42a2      	cmp	r2, r4
 80066dc:	d101      	bne.n	80066e2 <memcmp+0xe>
 80066de:	2000      	movs	r0, #0
 80066e0:	e005      	b.n	80066ee <memcmp+0x1a>
 80066e2:	5d03      	ldrb	r3, [r0, r4]
 80066e4:	3401      	adds	r4, #1
 80066e6:	5d0d      	ldrb	r5, [r1, r4]
 80066e8:	42ab      	cmp	r3, r5
 80066ea:	d0f6      	beq.n	80066da <memcmp+0x6>
 80066ec:	1b58      	subs	r0, r3, r5
 80066ee:	bd30      	pop	{r4, r5, pc}

080066f0 <memset>:
 80066f0:	0003      	movs	r3, r0
 80066f2:	1882      	adds	r2, r0, r2
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d100      	bne.n	80066fa <memset+0xa>
 80066f8:	4770      	bx	lr
 80066fa:	7019      	strb	r1, [r3, #0]
 80066fc:	3301      	adds	r3, #1
 80066fe:	e7f9      	b.n	80066f4 <memset+0x4>

08006700 <__libc_init_array>:
 8006700:	b570      	push	{r4, r5, r6, lr}
 8006702:	2600      	movs	r6, #0
 8006704:	4c0c      	ldr	r4, [pc, #48]	@ (8006738 <__libc_init_array+0x38>)
 8006706:	4d0d      	ldr	r5, [pc, #52]	@ (800673c <__libc_init_array+0x3c>)
 8006708:	1b64      	subs	r4, r4, r5
 800670a:	10a4      	asrs	r4, r4, #2
 800670c:	42a6      	cmp	r6, r4
 800670e:	d109      	bne.n	8006724 <__libc_init_array+0x24>
 8006710:	2600      	movs	r6, #0
 8006712:	f000 f819 	bl	8006748 <_init>
 8006716:	4c0a      	ldr	r4, [pc, #40]	@ (8006740 <__libc_init_array+0x40>)
 8006718:	4d0a      	ldr	r5, [pc, #40]	@ (8006744 <__libc_init_array+0x44>)
 800671a:	1b64      	subs	r4, r4, r5
 800671c:	10a4      	asrs	r4, r4, #2
 800671e:	42a6      	cmp	r6, r4
 8006720:	d105      	bne.n	800672e <__libc_init_array+0x2e>
 8006722:	bd70      	pop	{r4, r5, r6, pc}
 8006724:	00b3      	lsls	r3, r6, #2
 8006726:	58eb      	ldr	r3, [r5, r3]
 8006728:	4798      	blx	r3
 800672a:	3601      	adds	r6, #1
 800672c:	e7ee      	b.n	800670c <__libc_init_array+0xc>
 800672e:	00b3      	lsls	r3, r6, #2
 8006730:	58eb      	ldr	r3, [r5, r3]
 8006732:	4798      	blx	r3
 8006734:	3601      	adds	r6, #1
 8006736:	e7f2      	b.n	800671e <__libc_init_array+0x1e>
 8006738:	080068c8 	.word	0x080068c8
 800673c:	080068c8 	.word	0x080068c8
 8006740:	080068cc 	.word	0x080068cc
 8006744:	080068c8 	.word	0x080068c8

08006748 <_init>:
 8006748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674a:	46c0      	nop			@ (mov r8, r8)
 800674c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674e:	bc08      	pop	{r3}
 8006750:	469e      	mov	lr, r3
 8006752:	4770      	bx	lr

08006754 <_fini>:
 8006754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006756:	46c0      	nop			@ (mov r8, r8)
 8006758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800675a:	bc08      	pop	{r3}
 800675c:	469e      	mov	lr, r3
 800675e:	4770      	bx	lr
