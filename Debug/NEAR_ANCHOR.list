
NEAR_ANCHOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002874  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002934  08002934  00003934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800296c  0800296c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  0800296c  0800296c  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800296c  0800296c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800296c  0800296c  0000396c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002970  08002970  00003970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002974  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000000c  08002980  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08002980  000041bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2b7  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000184f  00000000  00000000  0000e2eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  0000fb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000711  00000000  00000000  00010450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ebd  00000000  00000000  00010b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be06  00000000  00000000  00029a1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091a77  00000000  00000000  00035824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c729b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fac  00000000  00000000  000c72e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000c928c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800291c 	.word	0x0800291c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800291c 	.word	0x0800291c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fb9e 	bl	8000964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f80c 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f970 	bl	8000510 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000230:	f000 f93e 	bl	80004b0 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000234:	f000 f8c0 	bl	80003b8 <MX_SPI1_Init>
  MX_ADC_Init();
 8000238:	f000 f862 	bl	8000300 <MX_ADC_Init>
  MX_SPI2_Init();
 800023c:	f000 f8fa 	bl	8000434 <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000240:	46c0      	nop			@ (mov r8, r8)
 8000242:	e7fd      	b.n	8000240 <main+0x20>

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b099      	sub	sp, #100	@ 0x64
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	242c      	movs	r4, #44	@ 0x2c
 800024c:	193b      	adds	r3, r7, r4
 800024e:	0018      	movs	r0, r3
 8000250:	2334      	movs	r3, #52	@ 0x34
 8000252:	001a      	movs	r2, r3
 8000254:	2100      	movs	r1, #0
 8000256:	f002 fb35 	bl	80028c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025a:	231c      	movs	r3, #28
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	0018      	movs	r0, r3
 8000260:	2310      	movs	r3, #16
 8000262:	001a      	movs	r2, r3
 8000264:	2100      	movs	r1, #0
 8000266:	f002 fb2d 	bl	80028c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800026a:	003b      	movs	r3, r7
 800026c:	0018      	movs	r0, r3
 800026e:	231c      	movs	r3, #28
 8000270:	001a      	movs	r2, r3
 8000272:	2100      	movs	r1, #0
 8000274:	f002 fb26 	bl	80028c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000278:	0021      	movs	r1, r4
 800027a:	187b      	adds	r3, r7, r1
 800027c:	2212      	movs	r2, #18
 800027e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000280:	187b      	adds	r3, r7, r1
 8000282:	2201      	movs	r2, #1
 8000284:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000286:	187b      	adds	r3, r7, r1
 8000288:	2201      	movs	r2, #1
 800028a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028c:	187b      	adds	r3, r7, r1
 800028e:	2210      	movs	r2, #16
 8000290:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000292:	187b      	adds	r3, r7, r1
 8000294:	2210      	movs	r2, #16
 8000296:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000298:	187b      	adds	r3, r7, r1
 800029a:	2200      	movs	r2, #0
 800029c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	0018      	movs	r0, r3
 80002a2:	f001 f85b 	bl	800135c <HAL_RCC_OscConfig>
 80002a6:	1e03      	subs	r3, r0, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002aa:	f000 f9b3 	bl	8000614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ae:	211c      	movs	r1, #28
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2207      	movs	r2, #7
 80002b4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2200      	movs	r2, #0
 80002ba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2200      	movs	r2, #0
 80002c0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2200      	movs	r2, #0
 80002c6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2100      	movs	r1, #0
 80002cc:	0018      	movs	r0, r3
 80002ce:	f001 fbcb 	bl	8001a68 <HAL_RCC_ClockConfig>
 80002d2:	1e03      	subs	r3, r0, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002d6:	f000 f99d 	bl	8000614 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002da:	003b      	movs	r3, r7
 80002dc:	2201      	movs	r2, #1
 80002de:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002e0:	003b      	movs	r3, r7
 80002e2:	2200      	movs	r2, #0
 80002e4:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e6:	003b      	movs	r3, r7
 80002e8:	0018      	movs	r0, r3
 80002ea:	f001 fd29 	bl	8001d40 <HAL_RCCEx_PeriphCLKConfig>
 80002ee:	1e03      	subs	r3, r0, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80002f2:	f000 f98f 	bl	8000614 <Error_Handler>
  }
}
 80002f6:	46c0      	nop			@ (mov r8, r8)
 80002f8:	46bd      	mov	sp, r7
 80002fa:	b019      	add	sp, #100	@ 0x64
 80002fc:	bd90      	pop	{r4, r7, pc}
	...

08000300 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	0018      	movs	r0, r3
 800030a:	230c      	movs	r3, #12
 800030c:	001a      	movs	r2, r3
 800030e:	2100      	movs	r1, #0
 8000310:	f002 fad8 	bl	80028c4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000314:	4b26      	ldr	r3, [pc, #152]	@ (80003b0 <MX_ADC_Init+0xb0>)
 8000316:	4a27      	ldr	r2, [pc, #156]	@ (80003b4 <MX_ADC_Init+0xb4>)
 8000318:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800031a:	4b25      	ldr	r3, [pc, #148]	@ (80003b0 <MX_ADC_Init+0xb0>)
 800031c:	2200      	movs	r2, #0
 800031e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000320:	4b23      	ldr	r3, [pc, #140]	@ (80003b0 <MX_ADC_Init+0xb0>)
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000326:	4b22      	ldr	r3, [pc, #136]	@ (80003b0 <MX_ADC_Init+0xb0>)
 8000328:	2200      	movs	r2, #0
 800032a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800032c:	4b20      	ldr	r3, [pc, #128]	@ (80003b0 <MX_ADC_Init+0xb0>)
 800032e:	2201      	movs	r2, #1
 8000330:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000332:	4b1f      	ldr	r3, [pc, #124]	@ (80003b0 <MX_ADC_Init+0xb0>)
 8000334:	2204      	movs	r2, #4
 8000336:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000338:	4b1d      	ldr	r3, [pc, #116]	@ (80003b0 <MX_ADC_Init+0xb0>)
 800033a:	2200      	movs	r2, #0
 800033c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800033e:	4b1c      	ldr	r3, [pc, #112]	@ (80003b0 <MX_ADC_Init+0xb0>)
 8000340:	2200      	movs	r2, #0
 8000342:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000344:	4b1a      	ldr	r3, [pc, #104]	@ (80003b0 <MX_ADC_Init+0xb0>)
 8000346:	2200      	movs	r2, #0
 8000348:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800034a:	4b19      	ldr	r3, [pc, #100]	@ (80003b0 <MX_ADC_Init+0xb0>)
 800034c:	2200      	movs	r2, #0
 800034e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000350:	4b17      	ldr	r3, [pc, #92]	@ (80003b0 <MX_ADC_Init+0xb0>)
 8000352:	22c2      	movs	r2, #194	@ 0xc2
 8000354:	32ff      	adds	r2, #255	@ 0xff
 8000356:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000358:	4b15      	ldr	r3, [pc, #84]	@ (80003b0 <MX_ADC_Init+0xb0>)
 800035a:	2200      	movs	r2, #0
 800035c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800035e:	4b14      	ldr	r3, [pc, #80]	@ (80003b0 <MX_ADC_Init+0xb0>)
 8000360:	2224      	movs	r2, #36	@ 0x24
 8000362:	2100      	movs	r1, #0
 8000364:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000366:	4b12      	ldr	r3, [pc, #72]	@ (80003b0 <MX_ADC_Init+0xb0>)
 8000368:	2201      	movs	r2, #1
 800036a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800036c:	4b10      	ldr	r3, [pc, #64]	@ (80003b0 <MX_ADC_Init+0xb0>)
 800036e:	0018      	movs	r0, r3
 8000370:	f000 fb5c 	bl	8000a2c <HAL_ADC_Init>
 8000374:	1e03      	subs	r3, r0, #0
 8000376:	d001      	beq.n	800037c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000378:	f000 f94c 	bl	8000614 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2208      	movs	r2, #8
 8000380:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2280      	movs	r2, #128	@ 0x80
 8000386:	0152      	lsls	r2, r2, #5
 8000388:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2280      	movs	r2, #128	@ 0x80
 800038e:	0552      	lsls	r2, r2, #21
 8000390:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000392:	1d3a      	adds	r2, r7, #4
 8000394:	4b06      	ldr	r3, [pc, #24]	@ (80003b0 <MX_ADC_Init+0xb0>)
 8000396:	0011      	movs	r1, r2
 8000398:	0018      	movs	r0, r3
 800039a:	f000 fc87 	bl	8000cac <HAL_ADC_ConfigChannel>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80003a2:	f000 f937 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80003a6:	46c0      	nop			@ (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b004      	add	sp, #16
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	46c0      	nop			@ (mov r8, r8)
 80003b0:	20000028 	.word	0x20000028
 80003b4:	40012400 	.word	0x40012400

080003b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <MX_SPI1_Init+0x74>)
 80003be:	4a1c      	ldr	r2, [pc, #112]	@ (8000430 <MX_SPI1_Init+0x78>)
 80003c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003c2:	4b1a      	ldr	r3, [pc, #104]	@ (800042c <MX_SPI1_Init+0x74>)
 80003c4:	2282      	movs	r2, #130	@ 0x82
 80003c6:	0052      	lsls	r2, r2, #1
 80003c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003ca:	4b18      	ldr	r3, [pc, #96]	@ (800042c <MX_SPI1_Init+0x74>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80003d0:	4b16      	ldr	r3, [pc, #88]	@ (800042c <MX_SPI1_Init+0x74>)
 80003d2:	22c0      	movs	r2, #192	@ 0xc0
 80003d4:	0092      	lsls	r2, r2, #2
 80003d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003d8:	4b14      	ldr	r3, [pc, #80]	@ (800042c <MX_SPI1_Init+0x74>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003de:	4b13      	ldr	r3, [pc, #76]	@ (800042c <MX_SPI1_Init+0x74>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80003e4:	4b11      	ldr	r3, [pc, #68]	@ (800042c <MX_SPI1_Init+0x74>)
 80003e6:	2280      	movs	r2, #128	@ 0x80
 80003e8:	02d2      	lsls	r2, r2, #11
 80003ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	@ (800042c <MX_SPI1_Init+0x74>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003f2:	4b0e      	ldr	r3, [pc, #56]	@ (800042c <MX_SPI1_Init+0x74>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003f8:	4b0c      	ldr	r3, [pc, #48]	@ (800042c <MX_SPI1_Init+0x74>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003fe:	4b0b      	ldr	r3, [pc, #44]	@ (800042c <MX_SPI1_Init+0x74>)
 8000400:	2200      	movs	r2, #0
 8000402:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000404:	4b09      	ldr	r3, [pc, #36]	@ (800042c <MX_SPI1_Init+0x74>)
 8000406:	2207      	movs	r2, #7
 8000408:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800040a:	4b08      	ldr	r3, [pc, #32]	@ (800042c <MX_SPI1_Init+0x74>)
 800040c:	2200      	movs	r2, #0
 800040e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000410:	4b06      	ldr	r3, [pc, #24]	@ (800042c <MX_SPI1_Init+0x74>)
 8000412:	2208      	movs	r2, #8
 8000414:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000416:	4b05      	ldr	r3, [pc, #20]	@ (800042c <MX_SPI1_Init+0x74>)
 8000418:	0018      	movs	r0, r3
 800041a:	f001 fd8f 	bl	8001f3c <HAL_SPI_Init>
 800041e:	1e03      	subs	r3, r0, #0
 8000420:	d001      	beq.n	8000426 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000422:	f000 f8f7 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20000068 	.word	0x20000068
 8000430:	40013000 	.word	0x40013000

08000434 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000438:	4b1b      	ldr	r3, [pc, #108]	@ (80004a8 <MX_SPI2_Init+0x74>)
 800043a:	4a1c      	ldr	r2, [pc, #112]	@ (80004ac <MX_SPI2_Init+0x78>)
 800043c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800043e:	4b1a      	ldr	r3, [pc, #104]	@ (80004a8 <MX_SPI2_Init+0x74>)
 8000440:	2282      	movs	r2, #130	@ 0x82
 8000442:	0052      	lsls	r2, r2, #1
 8000444:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000446:	4b18      	ldr	r3, [pc, #96]	@ (80004a8 <MX_SPI2_Init+0x74>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800044c:	4b16      	ldr	r3, [pc, #88]	@ (80004a8 <MX_SPI2_Init+0x74>)
 800044e:	22c0      	movs	r2, #192	@ 0xc0
 8000450:	0092      	lsls	r2, r2, #2
 8000452:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000454:	4b14      	ldr	r3, [pc, #80]	@ (80004a8 <MX_SPI2_Init+0x74>)
 8000456:	2200      	movs	r2, #0
 8000458:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800045a:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <MX_SPI2_Init+0x74>)
 800045c:	2200      	movs	r2, #0
 800045e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000460:	4b11      	ldr	r3, [pc, #68]	@ (80004a8 <MX_SPI2_Init+0x74>)
 8000462:	2280      	movs	r2, #128	@ 0x80
 8000464:	02d2      	lsls	r2, r2, #11
 8000466:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000468:	4b0f      	ldr	r3, [pc, #60]	@ (80004a8 <MX_SPI2_Init+0x74>)
 800046a:	2200      	movs	r2, #0
 800046c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800046e:	4b0e      	ldr	r3, [pc, #56]	@ (80004a8 <MX_SPI2_Init+0x74>)
 8000470:	2200      	movs	r2, #0
 8000472:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000474:	4b0c      	ldr	r3, [pc, #48]	@ (80004a8 <MX_SPI2_Init+0x74>)
 8000476:	2200      	movs	r2, #0
 8000478:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800047a:	4b0b      	ldr	r3, [pc, #44]	@ (80004a8 <MX_SPI2_Init+0x74>)
 800047c:	2200      	movs	r2, #0
 800047e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000480:	4b09      	ldr	r3, [pc, #36]	@ (80004a8 <MX_SPI2_Init+0x74>)
 8000482:	2207      	movs	r2, #7
 8000484:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000486:	4b08      	ldr	r3, [pc, #32]	@ (80004a8 <MX_SPI2_Init+0x74>)
 8000488:	2200      	movs	r2, #0
 800048a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800048c:	4b06      	ldr	r3, [pc, #24]	@ (80004a8 <MX_SPI2_Init+0x74>)
 800048e:	2208      	movs	r2, #8
 8000490:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000492:	4b05      	ldr	r3, [pc, #20]	@ (80004a8 <MX_SPI2_Init+0x74>)
 8000494:	0018      	movs	r0, r3
 8000496:	f001 fd51 	bl	8001f3c <HAL_SPI_Init>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800049e:	f000 f8b9 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	200000cc 	.word	0x200000cc
 80004ac:	40003800 	.word	0x40003800

080004b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004b4:	4b14      	ldr	r3, [pc, #80]	@ (8000508 <MX_USART1_UART_Init+0x58>)
 80004b6:	4a15      	ldr	r2, [pc, #84]	@ (800050c <MX_USART1_UART_Init+0x5c>)
 80004b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80004ba:	4b13      	ldr	r3, [pc, #76]	@ (8000508 <MX_USART1_UART_Init+0x58>)
 80004bc:	2296      	movs	r2, #150	@ 0x96
 80004be:	0212      	lsls	r2, r2, #8
 80004c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004c2:	4b11      	ldr	r3, [pc, #68]	@ (8000508 <MX_USART1_UART_Init+0x58>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000508 <MX_USART1_UART_Init+0x58>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000508 <MX_USART1_UART_Init+0x58>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000508 <MX_USART1_UART_Init+0x58>)
 80004d6:	220c      	movs	r2, #12
 80004d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004da:	4b0b      	ldr	r3, [pc, #44]	@ (8000508 <MX_USART1_UART_Init+0x58>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e0:	4b09      	ldr	r3, [pc, #36]	@ (8000508 <MX_USART1_UART_Init+0x58>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004e6:	4b08      	ldr	r3, [pc, #32]	@ (8000508 <MX_USART1_UART_Init+0x58>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004ec:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <MX_USART1_UART_Init+0x58>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004f2:	4b05      	ldr	r3, [pc, #20]	@ (8000508 <MX_USART1_UART_Init+0x58>)
 80004f4:	0018      	movs	r0, r3
 80004f6:	f001 fdd9 	bl	80020ac <HAL_UART_Init>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004fe:	f000 f889 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000502:	46c0      	nop			@ (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000130 	.word	0x20000130
 800050c:	40013800 	.word	0x40013800

08000510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b089      	sub	sp, #36	@ 0x24
 8000514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	240c      	movs	r4, #12
 8000518:	193b      	adds	r3, r7, r4
 800051a:	0018      	movs	r0, r3
 800051c:	2314      	movs	r3, #20
 800051e:	001a      	movs	r2, r3
 8000520:	2100      	movs	r1, #0
 8000522:	f002 f9cf 	bl	80028c4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000526:	4b38      	ldr	r3, [pc, #224]	@ (8000608 <MX_GPIO_Init+0xf8>)
 8000528:	695a      	ldr	r2, [r3, #20]
 800052a:	4b37      	ldr	r3, [pc, #220]	@ (8000608 <MX_GPIO_Init+0xf8>)
 800052c:	2180      	movs	r1, #128	@ 0x80
 800052e:	03c9      	lsls	r1, r1, #15
 8000530:	430a      	orrs	r2, r1
 8000532:	615a      	str	r2, [r3, #20]
 8000534:	4b34      	ldr	r3, [pc, #208]	@ (8000608 <MX_GPIO_Init+0xf8>)
 8000536:	695a      	ldr	r2, [r3, #20]
 8000538:	2380      	movs	r3, #128	@ 0x80
 800053a:	03db      	lsls	r3, r3, #15
 800053c:	4013      	ands	r3, r2
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b31      	ldr	r3, [pc, #196]	@ (8000608 <MX_GPIO_Init+0xf8>)
 8000544:	695a      	ldr	r2, [r3, #20]
 8000546:	4b30      	ldr	r3, [pc, #192]	@ (8000608 <MX_GPIO_Init+0xf8>)
 8000548:	2180      	movs	r1, #128	@ 0x80
 800054a:	0289      	lsls	r1, r1, #10
 800054c:	430a      	orrs	r2, r1
 800054e:	615a      	str	r2, [r3, #20]
 8000550:	4b2d      	ldr	r3, [pc, #180]	@ (8000608 <MX_GPIO_Init+0xf8>)
 8000552:	695a      	ldr	r2, [r3, #20]
 8000554:	2380      	movs	r3, #128	@ 0x80
 8000556:	029b      	lsls	r3, r3, #10
 8000558:	4013      	ands	r3, r2
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	4b2a      	ldr	r3, [pc, #168]	@ (8000608 <MX_GPIO_Init+0xf8>)
 8000560:	695a      	ldr	r2, [r3, #20]
 8000562:	4b29      	ldr	r3, [pc, #164]	@ (8000608 <MX_GPIO_Init+0xf8>)
 8000564:	2180      	movs	r1, #128	@ 0x80
 8000566:	02c9      	lsls	r1, r1, #11
 8000568:	430a      	orrs	r2, r1
 800056a:	615a      	str	r2, [r3, #20]
 800056c:	4b26      	ldr	r3, [pc, #152]	@ (8000608 <MX_GPIO_Init+0xf8>)
 800056e:	695a      	ldr	r2, [r3, #20]
 8000570:	2380      	movs	r3, #128	@ 0x80
 8000572:	02db      	lsls	r3, r3, #11
 8000574:	4013      	ands	r3, r2
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_RESET);
 800057a:	2390      	movs	r3, #144	@ 0x90
 800057c:	05db      	lsls	r3, r3, #23
 800057e:	2200      	movs	r2, #0
 8000580:	2101      	movs	r1, #1
 8000582:	0018      	movs	r0, r3
 8000584:	f000 fecc 	bl	8001320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCREEN_EN_Pin|SD_CS_Pin|IRQ_Pin|WAKE_Pin
 8000588:	4920      	ldr	r1, [pc, #128]	@ (800060c <MX_GPIO_Init+0xfc>)
 800058a:	4b21      	ldr	r3, [pc, #132]	@ (8000610 <MX_GPIO_Init+0x100>)
 800058c:	2200      	movs	r2, #0
 800058e:	0018      	movs	r0, r3
 8000590:	f000 fec6 	bl	8001320 <HAL_GPIO_WritePin>
                          |TFT_DC_Pin|TFT_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : E5_NRST_Pin */
  GPIO_InitStruct.Pin = E5_NRST_Pin;
 8000594:	193b      	adds	r3, r7, r4
 8000596:	2201      	movs	r2, #1
 8000598:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059a:	193b      	adds	r3, r7, r4
 800059c:	2201      	movs	r2, #1
 800059e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	193b      	adds	r3, r7, r4
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(E5_NRST_GPIO_Port, &GPIO_InitStruct);
 80005ac:	193a      	adds	r2, r7, r4
 80005ae:	2390      	movs	r3, #144	@ 0x90
 80005b0:	05db      	lsls	r3, r3, #23
 80005b2:	0011      	movs	r1, r2
 80005b4:	0018      	movs	r0, r3
 80005b6:	f000 fd3b 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCREEN_EN_Pin SD_CS_Pin IRQ_Pin WAKE_Pin
                           TFT_DC_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = SCREEN_EN_Pin|SD_CS_Pin|IRQ_Pin|WAKE_Pin
 80005ba:	193b      	adds	r3, r7, r4
 80005bc:	4a13      	ldr	r2, [pc, #76]	@ (800060c <MX_GPIO_Init+0xfc>)
 80005be:	601a      	str	r2, [r3, #0]
                          |TFT_DC_Pin|TFT_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	2201      	movs	r2, #1
 80005c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	193b      	adds	r3, r7, r4
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005cc:	193b      	adds	r3, r7, r4
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000610 <MX_GPIO_Init+0x100>)
 80005d6:	0019      	movs	r1, r3
 80005d8:	0010      	movs	r0, r2
 80005da:	f000 fd29 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_DISP_Pin */
  GPIO_InitStruct.Pin = BTN_DISP_Pin;
 80005de:	0021      	movs	r1, r4
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2280      	movs	r2, #128	@ 0x80
 80005e4:	0192      	lsls	r2, r2, #6
 80005e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2200      	movs	r2, #0
 80005ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_DISP_GPIO_Port, &GPIO_InitStruct);
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	4a06      	ldr	r2, [pc, #24]	@ (8000610 <MX_GPIO_Init+0x100>)
 80005f8:	0019      	movs	r1, r3
 80005fa:	0010      	movs	r0, r2
 80005fc:	f000 fd18 	bl	8001030 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000600:	46c0      	nop			@ (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b009      	add	sp, #36	@ 0x24
 8000606:	bd90      	pop	{r4, r7, pc}
 8000608:	40021000 	.word	0x40021000
 800060c:	00000b64 	.word	0x00000b64
 8000610:	48000400 	.word	0x48000400

08000614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061c:	46c0      	nop			@ (mov r8, r8)
 800061e:	e7fd      	b.n	800061c <Error_Handler+0x8>

08000620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000626:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <HAL_MspInit+0x44>)
 8000628:	699a      	ldr	r2, [r3, #24]
 800062a:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <HAL_MspInit+0x44>)
 800062c:	2101      	movs	r1, #1
 800062e:	430a      	orrs	r2, r1
 8000630:	619a      	str	r2, [r3, #24]
 8000632:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <HAL_MspInit+0x44>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	2201      	movs	r2, #1
 8000638:	4013      	ands	r3, r2
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063e:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <HAL_MspInit+0x44>)
 8000640:	69da      	ldr	r2, [r3, #28]
 8000642:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <HAL_MspInit+0x44>)
 8000644:	2180      	movs	r1, #128	@ 0x80
 8000646:	0549      	lsls	r1, r1, #21
 8000648:	430a      	orrs	r2, r1
 800064a:	61da      	str	r2, [r3, #28]
 800064c:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <HAL_MspInit+0x44>)
 800064e:	69da      	ldr	r2, [r3, #28]
 8000650:	2380      	movs	r3, #128	@ 0x80
 8000652:	055b      	lsls	r3, r3, #21
 8000654:	4013      	ands	r3, r2
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065a:	46c0      	nop			@ (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	b002      	add	sp, #8
 8000660:	bd80      	pop	{r7, pc}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	40021000 	.word	0x40021000

08000668 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b08b      	sub	sp, #44	@ 0x2c
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	2414      	movs	r4, #20
 8000672:	193b      	adds	r3, r7, r4
 8000674:	0018      	movs	r0, r3
 8000676:	2314      	movs	r3, #20
 8000678:	001a      	movs	r2, r3
 800067a:	2100      	movs	r1, #0
 800067c:	f002 f922 	bl	80028c4 <memset>
  if(hadc->Instance==ADC1)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a18      	ldr	r2, [pc, #96]	@ (80006e8 <HAL_ADC_MspInit+0x80>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d12a      	bne.n	80006e0 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800068a:	4b18      	ldr	r3, [pc, #96]	@ (80006ec <HAL_ADC_MspInit+0x84>)
 800068c:	699a      	ldr	r2, [r3, #24]
 800068e:	4b17      	ldr	r3, [pc, #92]	@ (80006ec <HAL_ADC_MspInit+0x84>)
 8000690:	2180      	movs	r1, #128	@ 0x80
 8000692:	0089      	lsls	r1, r1, #2
 8000694:	430a      	orrs	r2, r1
 8000696:	619a      	str	r2, [r3, #24]
 8000698:	4b14      	ldr	r3, [pc, #80]	@ (80006ec <HAL_ADC_MspInit+0x84>)
 800069a:	699a      	ldr	r2, [r3, #24]
 800069c:	2380      	movs	r3, #128	@ 0x80
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	4013      	ands	r3, r2
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <HAL_ADC_MspInit+0x84>)
 80006a8:	695a      	ldr	r2, [r3, #20]
 80006aa:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <HAL_ADC_MspInit+0x84>)
 80006ac:	2180      	movs	r1, #128	@ 0x80
 80006ae:	02c9      	lsls	r1, r1, #11
 80006b0:	430a      	orrs	r2, r1
 80006b2:	615a      	str	r2, [r3, #20]
 80006b4:	4b0d      	ldr	r3, [pc, #52]	@ (80006ec <HAL_ADC_MspInit+0x84>)
 80006b6:	695a      	ldr	r2, [r3, #20]
 80006b8:	2380      	movs	r3, #128	@ 0x80
 80006ba:	02db      	lsls	r3, r3, #11
 80006bc:	4013      	ands	r3, r2
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = VBATT_ADC_Pin;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2201      	movs	r2, #1
 80006c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2203      	movs	r2, #3
 80006cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBATT_ADC_GPIO_Port, &GPIO_InitStruct);
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	4a06      	ldr	r2, [pc, #24]	@ (80006f0 <HAL_ADC_MspInit+0x88>)
 80006d8:	0019      	movs	r1, r3
 80006da:	0010      	movs	r0, r2
 80006dc:	f000 fca8 	bl	8001030 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80006e0:	46c0      	nop			@ (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b00b      	add	sp, #44	@ 0x2c
 80006e6:	bd90      	pop	{r4, r7, pc}
 80006e8:	40012400 	.word	0x40012400
 80006ec:	40021000 	.word	0x40021000
 80006f0:	48000400 	.word	0x48000400

080006f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b08d      	sub	sp, #52	@ 0x34
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	241c      	movs	r4, #28
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	0018      	movs	r0, r3
 8000702:	2314      	movs	r3, #20
 8000704:	001a      	movs	r2, r3
 8000706:	2100      	movs	r1, #0
 8000708:	f002 f8dc 	bl	80028c4 <memset>
  if(hspi->Instance==SPI1)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a45      	ldr	r2, [pc, #276]	@ (8000828 <HAL_SPI_MspInit+0x134>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d133      	bne.n	800077e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000716:	4b45      	ldr	r3, [pc, #276]	@ (800082c <HAL_SPI_MspInit+0x138>)
 8000718:	699a      	ldr	r2, [r3, #24]
 800071a:	4b44      	ldr	r3, [pc, #272]	@ (800082c <HAL_SPI_MspInit+0x138>)
 800071c:	2180      	movs	r1, #128	@ 0x80
 800071e:	0149      	lsls	r1, r1, #5
 8000720:	430a      	orrs	r2, r1
 8000722:	619a      	str	r2, [r3, #24]
 8000724:	4b41      	ldr	r3, [pc, #260]	@ (800082c <HAL_SPI_MspInit+0x138>)
 8000726:	699a      	ldr	r2, [r3, #24]
 8000728:	2380      	movs	r3, #128	@ 0x80
 800072a:	015b      	lsls	r3, r3, #5
 800072c:	4013      	ands	r3, r2
 800072e:	61bb      	str	r3, [r7, #24]
 8000730:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	4b3e      	ldr	r3, [pc, #248]	@ (800082c <HAL_SPI_MspInit+0x138>)
 8000734:	695a      	ldr	r2, [r3, #20]
 8000736:	4b3d      	ldr	r3, [pc, #244]	@ (800082c <HAL_SPI_MspInit+0x138>)
 8000738:	2180      	movs	r1, #128	@ 0x80
 800073a:	0289      	lsls	r1, r1, #10
 800073c:	430a      	orrs	r2, r1
 800073e:	615a      	str	r2, [r3, #20]
 8000740:	4b3a      	ldr	r3, [pc, #232]	@ (800082c <HAL_SPI_MspInit+0x138>)
 8000742:	695a      	ldr	r2, [r3, #20]
 8000744:	2380      	movs	r3, #128	@ 0x80
 8000746:	029b      	lsls	r3, r3, #10
 8000748:	4013      	ands	r3, r2
 800074a:	617b      	str	r3, [r7, #20]
 800074c:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800074e:	0021      	movs	r1, r4
 8000750:	187b      	adds	r3, r7, r1
 8000752:	22f0      	movs	r2, #240	@ 0xf0
 8000754:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2202      	movs	r2, #2
 800075a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2203      	movs	r2, #3
 8000766:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076e:	187a      	adds	r2, r7, r1
 8000770:	2390      	movs	r3, #144	@ 0x90
 8000772:	05db      	lsls	r3, r3, #23
 8000774:	0011      	movs	r1, r2
 8000776:	0018      	movs	r0, r3
 8000778:	f000 fc5a 	bl	8001030 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800077c:	e04f      	b.n	800081e <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI2)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a2b      	ldr	r2, [pc, #172]	@ (8000830 <HAL_SPI_MspInit+0x13c>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d14a      	bne.n	800081e <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000788:	4b28      	ldr	r3, [pc, #160]	@ (800082c <HAL_SPI_MspInit+0x138>)
 800078a:	69da      	ldr	r2, [r3, #28]
 800078c:	4b27      	ldr	r3, [pc, #156]	@ (800082c <HAL_SPI_MspInit+0x138>)
 800078e:	2180      	movs	r1, #128	@ 0x80
 8000790:	01c9      	lsls	r1, r1, #7
 8000792:	430a      	orrs	r2, r1
 8000794:	61da      	str	r2, [r3, #28]
 8000796:	4b25      	ldr	r3, [pc, #148]	@ (800082c <HAL_SPI_MspInit+0x138>)
 8000798:	69da      	ldr	r2, [r3, #28]
 800079a:	2380      	movs	r3, #128	@ 0x80
 800079c:	01db      	lsls	r3, r3, #7
 800079e:	4013      	ands	r3, r2
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a4:	4b21      	ldr	r3, [pc, #132]	@ (800082c <HAL_SPI_MspInit+0x138>)
 80007a6:	695a      	ldr	r2, [r3, #20]
 80007a8:	4b20      	ldr	r3, [pc, #128]	@ (800082c <HAL_SPI_MspInit+0x138>)
 80007aa:	2180      	movs	r1, #128	@ 0x80
 80007ac:	02c9      	lsls	r1, r1, #11
 80007ae:	430a      	orrs	r2, r1
 80007b0:	615a      	str	r2, [r3, #20]
 80007b2:	4b1e      	ldr	r3, [pc, #120]	@ (800082c <HAL_SPI_MspInit+0x138>)
 80007b4:	695a      	ldr	r2, [r3, #20]
 80007b6:	2380      	movs	r3, #128	@ 0x80
 80007b8:	02db      	lsls	r3, r3, #11
 80007ba:	4013      	ands	r3, r2
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007c0:	211c      	movs	r1, #28
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2280      	movs	r2, #128	@ 0x80
 80007c6:	00d2      	lsls	r2, r2, #3
 80007c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	000c      	movs	r4, r1
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	2202      	movs	r2, #2
 80007d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	193b      	adds	r3, r7, r4
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d8:	193b      	adds	r3, r7, r4
 80007da:	2203      	movs	r2, #3
 80007dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	2205      	movs	r2, #5
 80007e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	4a13      	ldr	r2, [pc, #76]	@ (8000834 <HAL_SPI_MspInit+0x140>)
 80007e8:	0019      	movs	r1, r3
 80007ea:	0010      	movs	r0, r2
 80007ec:	f000 fc20 	bl	8001030 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TFT_CS_Pin|GPIO_PIN_14|GPIO_PIN_15;
 80007f0:	0021      	movs	r1, r4
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	22d0      	movs	r2, #208	@ 0xd0
 80007f6:	0212      	lsls	r2, r2, #8
 80007f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2202      	movs	r2, #2
 80007fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2203      	movs	r2, #3
 800080a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000812:	187b      	adds	r3, r7, r1
 8000814:	4a07      	ldr	r2, [pc, #28]	@ (8000834 <HAL_SPI_MspInit+0x140>)
 8000816:	0019      	movs	r1, r3
 8000818:	0010      	movs	r0, r2
 800081a:	f000 fc09 	bl	8001030 <HAL_GPIO_Init>
}
 800081e:	46c0      	nop			@ (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	b00d      	add	sp, #52	@ 0x34
 8000824:	bd90      	pop	{r4, r7, pc}
 8000826:	46c0      	nop			@ (mov r8, r8)
 8000828:	40013000 	.word	0x40013000
 800082c:	40021000 	.word	0x40021000
 8000830:	40003800 	.word	0x40003800
 8000834:	48000400 	.word	0x48000400

08000838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b08b      	sub	sp, #44	@ 0x2c
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	2414      	movs	r4, #20
 8000842:	193b      	adds	r3, r7, r4
 8000844:	0018      	movs	r0, r3
 8000846:	2314      	movs	r3, #20
 8000848:	001a      	movs	r2, r3
 800084a:	2100      	movs	r1, #0
 800084c:	f002 f83a 	bl	80028c4 <memset>
  if(huart->Instance==USART1)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a1d      	ldr	r2, [pc, #116]	@ (80008cc <HAL_UART_MspInit+0x94>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d133      	bne.n	80008c2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800085a:	4b1d      	ldr	r3, [pc, #116]	@ (80008d0 <HAL_UART_MspInit+0x98>)
 800085c:	699a      	ldr	r2, [r3, #24]
 800085e:	4b1c      	ldr	r3, [pc, #112]	@ (80008d0 <HAL_UART_MspInit+0x98>)
 8000860:	2180      	movs	r1, #128	@ 0x80
 8000862:	01c9      	lsls	r1, r1, #7
 8000864:	430a      	orrs	r2, r1
 8000866:	619a      	str	r2, [r3, #24]
 8000868:	4b19      	ldr	r3, [pc, #100]	@ (80008d0 <HAL_UART_MspInit+0x98>)
 800086a:	699a      	ldr	r2, [r3, #24]
 800086c:	2380      	movs	r3, #128	@ 0x80
 800086e:	01db      	lsls	r3, r3, #7
 8000870:	4013      	ands	r3, r2
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b16      	ldr	r3, [pc, #88]	@ (80008d0 <HAL_UART_MspInit+0x98>)
 8000878:	695a      	ldr	r2, [r3, #20]
 800087a:	4b15      	ldr	r3, [pc, #84]	@ (80008d0 <HAL_UART_MspInit+0x98>)
 800087c:	2180      	movs	r1, #128	@ 0x80
 800087e:	0289      	lsls	r1, r1, #10
 8000880:	430a      	orrs	r2, r1
 8000882:	615a      	str	r2, [r3, #20]
 8000884:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <HAL_UART_MspInit+0x98>)
 8000886:	695a      	ldr	r2, [r3, #20]
 8000888:	2380      	movs	r3, #128	@ 0x80
 800088a:	029b      	lsls	r3, r3, #10
 800088c:	4013      	ands	r3, r2
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000892:	193b      	adds	r3, r7, r4
 8000894:	22c0      	movs	r2, #192	@ 0xc0
 8000896:	00d2      	lsls	r2, r2, #3
 8000898:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	0021      	movs	r1, r4
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2202      	movs	r2, #2
 80008a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2203      	movs	r2, #3
 80008ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2201      	movs	r2, #1
 80008b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	187a      	adds	r2, r7, r1
 80008b6:	2390      	movs	r3, #144	@ 0x90
 80008b8:	05db      	lsls	r3, r3, #23
 80008ba:	0011      	movs	r1, r2
 80008bc:	0018      	movs	r0, r3
 80008be:	f000 fbb7 	bl	8001030 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b00b      	add	sp, #44	@ 0x2c
 80008c8:	bd90      	pop	{r4, r7, pc}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	40013800 	.word	0x40013800
 80008d0:	40021000 	.word	0x40021000

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d8:	46c0      	nop			@ (mov r8, r8)
 80008da:	e7fd      	b.n	80008d8 <NMI_Handler+0x4>

080008dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e0:	46c0      	nop			@ (mov r8, r8)
 80008e2:	e7fd      	b.n	80008e0 <HardFault_Handler+0x4>

080008e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008e8:	46c0      	nop			@ (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f2:	46c0      	nop			@ (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fc:	f000 f87a 	bl	80009f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000900:	46c0      	nop			@ (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000910:	480d      	ldr	r0, [pc, #52]	@ (8000948 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000912:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000914:	f7ff fff7 	bl	8000906 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000918:	480c      	ldr	r0, [pc, #48]	@ (800094c <LoopForever+0x6>)
  ldr r1, =_edata
 800091a:	490d      	ldr	r1, [pc, #52]	@ (8000950 <LoopForever+0xa>)
  ldr r2, =_sidata
 800091c:	4a0d      	ldr	r2, [pc, #52]	@ (8000954 <LoopForever+0xe>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000920:	e002      	b.n	8000928 <LoopCopyDataInit>

08000922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000926:	3304      	adds	r3, #4

08000928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800092c:	d3f9      	bcc.n	8000922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092e:	4a0a      	ldr	r2, [pc, #40]	@ (8000958 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000930:	4c0a      	ldr	r4, [pc, #40]	@ (800095c <LoopForever+0x16>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000934:	e001      	b.n	800093a <LoopFillZerobss>

08000936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000938:	3204      	adds	r2, #4

0800093a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800093c:	d3fb      	bcc.n	8000936 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800093e:	f001 ffc9 	bl	80028d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000942:	f7ff fc6d 	bl	8000220 <main>

08000946 <LoopForever>:

LoopForever:
    b LoopForever
 8000946:	e7fe      	b.n	8000946 <LoopForever>
  ldr   r0, =_estack
 8000948:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000950:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000954:	08002974 	.word	0x08002974
  ldr r2, =_sbss
 8000958:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800095c:	200001bc 	.word	0x200001bc

08000960 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000960:	e7fe      	b.n	8000960 <ADC1_COMP_IRQHandler>
	...

08000964 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000968:	4b07      	ldr	r3, [pc, #28]	@ (8000988 <HAL_Init+0x24>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <HAL_Init+0x24>)
 800096e:	2110      	movs	r1, #16
 8000970:	430a      	orrs	r2, r1
 8000972:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000974:	2003      	movs	r0, #3
 8000976:	f000 f809 	bl	800098c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800097a:	f7ff fe51 	bl	8000620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800097e:	2300      	movs	r3, #0
}
 8000980:	0018      	movs	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	40022000 	.word	0x40022000

0800098c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000994:	4b14      	ldr	r3, [pc, #80]	@ (80009e8 <HAL_InitTick+0x5c>)
 8000996:	681c      	ldr	r4, [r3, #0]
 8000998:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <HAL_InitTick+0x60>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	0019      	movs	r1, r3
 800099e:	23fa      	movs	r3, #250	@ 0xfa
 80009a0:	0098      	lsls	r0, r3, #2
 80009a2:	f7ff fbb1 	bl	8000108 <__udivsi3>
 80009a6:	0003      	movs	r3, r0
 80009a8:	0019      	movs	r1, r3
 80009aa:	0020      	movs	r0, r4
 80009ac:	f7ff fbac 	bl	8000108 <__udivsi3>
 80009b0:	0003      	movs	r3, r0
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 fb2f 	bl	8001016 <HAL_SYSTICK_Config>
 80009b8:	1e03      	subs	r3, r0, #0
 80009ba:	d001      	beq.n	80009c0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009bc:	2301      	movs	r3, #1
 80009be:	e00f      	b.n	80009e0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d80b      	bhi.n	80009de <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	2301      	movs	r3, #1
 80009ca:	425b      	negs	r3, r3
 80009cc:	2200      	movs	r2, #0
 80009ce:	0018      	movs	r0, r3
 80009d0:	f000 fb0c 	bl	8000fec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <HAL_InitTick+0x64>)
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	e000      	b.n	80009e0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	0018      	movs	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b003      	add	sp, #12
 80009e6:	bd90      	pop	{r4, r7, pc}
 80009e8:	20000000 	.word	0x20000000
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000004 	.word	0x20000004

080009f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f8:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <HAL_IncTick+0x1c>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	001a      	movs	r2, r3
 80009fe:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <HAL_IncTick+0x20>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	18d2      	adds	r2, r2, r3
 8000a04:	4b03      	ldr	r3, [pc, #12]	@ (8000a14 <HAL_IncTick+0x20>)
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	46c0      	nop			@ (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			@ (mov r8, r8)
 8000a10:	20000008 	.word	0x20000008
 8000a14:	200001b8 	.word	0x200001b8

08000a18 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a1c:	4b02      	ldr	r3, [pc, #8]	@ (8000a28 <HAL_GetTick+0x10>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	0018      	movs	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			@ (mov r8, r8)
 8000a28:	200001b8 	.word	0x200001b8

08000a2c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a34:	230f      	movs	r3, #15
 8000a36:	18fb      	adds	r3, r7, r3
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d101      	bne.n	8000a4a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e125      	b.n	8000c96 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d10a      	bne.n	8000a68 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2234      	movs	r2, #52	@ 0x34
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	0018      	movs	r0, r3
 8000a64:	f7ff fe00 	bl	8000668 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a6c:	2210      	movs	r2, #16
 8000a6e:	4013      	ands	r3, r2
 8000a70:	d000      	beq.n	8000a74 <HAL_ADC_Init+0x48>
 8000a72:	e103      	b.n	8000c7c <HAL_ADC_Init+0x250>
 8000a74:	230f      	movs	r3, #15
 8000a76:	18fb      	adds	r3, r7, r3
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d000      	beq.n	8000a80 <HAL_ADC_Init+0x54>
 8000a7e:	e0fd      	b.n	8000c7c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	2204      	movs	r2, #4
 8000a88:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000a8a:	d000      	beq.n	8000a8e <HAL_ADC_Init+0x62>
 8000a8c:	e0f6      	b.n	8000c7c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a92:	4a83      	ldr	r2, [pc, #524]	@ (8000ca0 <HAL_ADC_Init+0x274>)
 8000a94:	4013      	ands	r3, r2
 8000a96:	2202      	movs	r2, #2
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d112      	bne.n	8000ad2 <HAL_ADC_Init+0xa6>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d009      	beq.n	8000ace <HAL_ADC_Init+0xa2>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	68da      	ldr	r2, [r3, #12]
 8000ac0:	2380      	movs	r3, #128	@ 0x80
 8000ac2:	021b      	lsls	r3, r3, #8
 8000ac4:	401a      	ands	r2, r3
 8000ac6:	2380      	movs	r3, #128	@ 0x80
 8000ac8:	021b      	lsls	r3, r3, #8
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d101      	bne.n	8000ad2 <HAL_ADC_Init+0xa6>
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e000      	b.n	8000ad4 <HAL_ADC_Init+0xa8>
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d116      	bne.n	8000b06 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	2218      	movs	r2, #24
 8000ae0:	4393      	bics	r3, r2
 8000ae2:	0019      	movs	r1, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	689a      	ldr	r2, [r3, #8]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	430a      	orrs	r2, r1
 8000aee:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	691b      	ldr	r3, [r3, #16]
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	0899      	lsrs	r1, r3, #2
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685a      	ldr	r2, [r3, #4]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	430a      	orrs	r2, r1
 8000b04:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	68da      	ldr	r2, [r3, #12]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4964      	ldr	r1, [pc, #400]	@ (8000ca4 <HAL_ADC_Init+0x278>)
 8000b12:	400a      	ands	r2, r1
 8000b14:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	7e1b      	ldrb	r3, [r3, #24]
 8000b1a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	7e5b      	ldrb	r3, [r3, #25]
 8000b20:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b22:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	7e9b      	ldrb	r3, [r3, #26]
 8000b28:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000b2a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d002      	beq.n	8000b3a <HAL_ADC_Init+0x10e>
 8000b34:	2380      	movs	r3, #128	@ 0x80
 8000b36:	015b      	lsls	r3, r3, #5
 8000b38:	e000      	b.n	8000b3c <HAL_ADC_Init+0x110>
 8000b3a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000b3c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000b42:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	691b      	ldr	r3, [r3, #16]
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	d101      	bne.n	8000b50 <HAL_ADC_Init+0x124>
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	e000      	b.n	8000b52 <HAL_ADC_Init+0x126>
 8000b50:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000b52:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2124      	movs	r1, #36	@ 0x24
 8000b58:	5c5b      	ldrb	r3, [r3, r1]
 8000b5a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000b5c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	7edb      	ldrb	r3, [r3, #27]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d115      	bne.n	8000b98 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	7e9b      	ldrb	r3, [r3, #26]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d105      	bne.n	8000b80 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	2280      	movs	r2, #128	@ 0x80
 8000b78:	0252      	lsls	r2, r2, #9
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	e00b      	b.n	8000b98 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b84:	2220      	movs	r2, #32
 8000b86:	431a      	orrs	r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b90:	2201      	movs	r2, #1
 8000b92:	431a      	orrs	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	69da      	ldr	r2, [r3, #28]
 8000b9c:	23c2      	movs	r3, #194	@ 0xc2
 8000b9e:	33ff      	adds	r3, #255	@ 0xff
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d007      	beq.n	8000bb4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000bac:	4313      	orrs	r3, r2
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	68d9      	ldr	r1, [r3, #12]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bc8:	2380      	movs	r3, #128	@ 0x80
 8000bca:	055b      	lsls	r3, r3, #21
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d01b      	beq.n	8000c08 <HAL_ADC_Init+0x1dc>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d017      	beq.n	8000c08 <HAL_ADC_Init+0x1dc>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d013      	beq.n	8000c08 <HAL_ADC_Init+0x1dc>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000be4:	2b03      	cmp	r3, #3
 8000be6:	d00f      	beq.n	8000c08 <HAL_ADC_Init+0x1dc>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bec:	2b04      	cmp	r3, #4
 8000bee:	d00b      	beq.n	8000c08 <HAL_ADC_Init+0x1dc>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bf4:	2b05      	cmp	r3, #5
 8000bf6:	d007      	beq.n	8000c08 <HAL_ADC_Init+0x1dc>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bfc:	2b06      	cmp	r3, #6
 8000bfe:	d003      	beq.n	8000c08 <HAL_ADC_Init+0x1dc>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c04:	2b07      	cmp	r3, #7
 8000c06:	d112      	bne.n	8000c2e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	695a      	ldr	r2, [r3, #20]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2107      	movs	r1, #7
 8000c14:	438a      	bics	r2, r1
 8000c16:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	6959      	ldr	r1, [r3, #20]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c22:	2207      	movs	r2, #7
 8000c24:	401a      	ands	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca8 <HAL_ADC_Init+0x27c>)
 8000c36:	4013      	ands	r3, r2
 8000c38:	68ba      	ldr	r2, [r7, #8]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d10b      	bne.n	8000c56 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2200      	movs	r2, #0
 8000c42:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c48:	2203      	movs	r2, #3
 8000c4a:	4393      	bics	r3, r2
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	431a      	orrs	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c54:	e01c      	b.n	8000c90 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c5a:	2212      	movs	r2, #18
 8000c5c:	4393      	bics	r3, r2
 8000c5e:	2210      	movs	r2, #16
 8000c60:	431a      	orrs	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	431a      	orrs	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000c72:	230f      	movs	r3, #15
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	2201      	movs	r2, #1
 8000c78:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c7a:	e009      	b.n	8000c90 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c80:	2210      	movs	r2, #16
 8000c82:	431a      	orrs	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000c88:	230f      	movs	r3, #15
 8000c8a:	18fb      	adds	r3, r7, r3
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c90:	230f      	movs	r3, #15
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	781b      	ldrb	r3, [r3, #0]
}
 8000c96:	0018      	movs	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b004      	add	sp, #16
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	fffffefd 	.word	0xfffffefd
 8000ca4:	fffe0219 	.word	0xfffe0219
 8000ca8:	833fffe7 	.word	0x833fffe7

08000cac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	18fb      	adds	r3, r7, r3
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cc6:	2380      	movs	r3, #128	@ 0x80
 8000cc8:	055b      	lsls	r3, r3, #21
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d011      	beq.n	8000cf2 <HAL_ADC_ConfigChannel+0x46>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d00d      	beq.n	8000cf2 <HAL_ADC_ConfigChannel+0x46>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d009      	beq.n	8000cf2 <HAL_ADC_ConfigChannel+0x46>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	d005      	beq.n	8000cf2 <HAL_ADC_ConfigChannel+0x46>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	d001      	beq.n	8000cf2 <HAL_ADC_ConfigChannel+0x46>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2234      	movs	r2, #52	@ 0x34
 8000cf6:	5c9b      	ldrb	r3, [r3, r2]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d101      	bne.n	8000d00 <HAL_ADC_ConfigChannel+0x54>
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	e0d0      	b.n	8000ea2 <HAL_ADC_ConfigChannel+0x1f6>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2234      	movs	r2, #52	@ 0x34
 8000d04:	2101      	movs	r1, #1
 8000d06:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	2204      	movs	r2, #4
 8000d10:	4013      	ands	r3, r2
 8000d12:	d000      	beq.n	8000d16 <HAL_ADC_ConfigChannel+0x6a>
 8000d14:	e0b4      	b.n	8000e80 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	4a64      	ldr	r2, [pc, #400]	@ (8000eac <HAL_ADC_ConfigChannel+0x200>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d100      	bne.n	8000d22 <HAL_ADC_ConfigChannel+0x76>
 8000d20:	e082      	b.n	8000e28 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	409a      	lsls	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	430a      	orrs	r2, r1
 8000d36:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d3c:	2380      	movs	r3, #128	@ 0x80
 8000d3e:	055b      	lsls	r3, r3, #21
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d037      	beq.n	8000db4 <HAL_ADC_ConfigChannel+0x108>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d033      	beq.n	8000db4 <HAL_ADC_ConfigChannel+0x108>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d02f      	beq.n	8000db4 <HAL_ADC_ConfigChannel+0x108>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d58:	2b03      	cmp	r3, #3
 8000d5a:	d02b      	beq.n	8000db4 <HAL_ADC_ConfigChannel+0x108>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d60:	2b04      	cmp	r3, #4
 8000d62:	d027      	beq.n	8000db4 <HAL_ADC_ConfigChannel+0x108>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d68:	2b05      	cmp	r3, #5
 8000d6a:	d023      	beq.n	8000db4 <HAL_ADC_ConfigChannel+0x108>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d70:	2b06      	cmp	r3, #6
 8000d72:	d01f      	beq.n	8000db4 <HAL_ADC_ConfigChannel+0x108>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d78:	2b07      	cmp	r3, #7
 8000d7a:	d01b      	beq.n	8000db4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	2107      	movs	r1, #7
 8000d88:	400b      	ands	r3, r1
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d012      	beq.n	8000db4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	695a      	ldr	r2, [r3, #20]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2107      	movs	r1, #7
 8000d9a:	438a      	bics	r2, r1
 8000d9c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6959      	ldr	r1, [r3, #20]
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	2207      	movs	r2, #7
 8000daa:	401a      	ands	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	430a      	orrs	r2, r1
 8000db2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b10      	cmp	r3, #16
 8000dba:	d007      	beq.n	8000dcc <HAL_ADC_ConfigChannel+0x120>
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b11      	cmp	r3, #17
 8000dc2:	d003      	beq.n	8000dcc <HAL_ADC_ConfigChannel+0x120>
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b12      	cmp	r3, #18
 8000dca:	d163      	bne.n	8000e94 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000dcc:	4b38      	ldr	r3, [pc, #224]	@ (8000eb0 <HAL_ADC_ConfigChannel+0x204>)
 8000dce:	6819      	ldr	r1, [r3, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b10      	cmp	r3, #16
 8000dd6:	d009      	beq.n	8000dec <HAL_ADC_ConfigChannel+0x140>
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b11      	cmp	r3, #17
 8000dde:	d102      	bne.n	8000de6 <HAL_ADC_ConfigChannel+0x13a>
 8000de0:	2380      	movs	r3, #128	@ 0x80
 8000de2:	03db      	lsls	r3, r3, #15
 8000de4:	e004      	b.n	8000df0 <HAL_ADC_ConfigChannel+0x144>
 8000de6:	2380      	movs	r3, #128	@ 0x80
 8000de8:	045b      	lsls	r3, r3, #17
 8000dea:	e001      	b.n	8000df0 <HAL_ADC_ConfigChannel+0x144>
 8000dec:	2380      	movs	r3, #128	@ 0x80
 8000dee:	041b      	lsls	r3, r3, #16
 8000df0:	4a2f      	ldr	r2, [pc, #188]	@ (8000eb0 <HAL_ADC_ConfigChannel+0x204>)
 8000df2:	430b      	orrs	r3, r1
 8000df4:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b10      	cmp	r3, #16
 8000dfc:	d14a      	bne.n	8000e94 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb4 <HAL_ADC_ConfigChannel+0x208>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	492d      	ldr	r1, [pc, #180]	@ (8000eb8 <HAL_ADC_ConfigChannel+0x20c>)
 8000e04:	0018      	movs	r0, r3
 8000e06:	f7ff f97f 	bl	8000108 <__udivsi3>
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	001a      	movs	r2, r3
 8000e0e:	0013      	movs	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	189b      	adds	r3, r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e18:	e002      	b.n	8000e20 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1f9      	bne.n	8000e1a <HAL_ADC_ConfigChannel+0x16e>
 8000e26:	e035      	b.n	8000e94 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2101      	movs	r1, #1
 8000e34:	4099      	lsls	r1, r3
 8000e36:	000b      	movs	r3, r1
 8000e38:	43d9      	mvns	r1, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	400a      	ands	r2, r1
 8000e40:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b10      	cmp	r3, #16
 8000e48:	d007      	beq.n	8000e5a <HAL_ADC_ConfigChannel+0x1ae>
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b11      	cmp	r3, #17
 8000e50:	d003      	beq.n	8000e5a <HAL_ADC_ConfigChannel+0x1ae>
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b12      	cmp	r3, #18
 8000e58:	d11c      	bne.n	8000e94 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000e5a:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <HAL_ADC_ConfigChannel+0x204>)
 8000e5c:	6819      	ldr	r1, [r3, #0]
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2b10      	cmp	r3, #16
 8000e64:	d007      	beq.n	8000e76 <HAL_ADC_ConfigChannel+0x1ca>
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2b11      	cmp	r3, #17
 8000e6c:	d101      	bne.n	8000e72 <HAL_ADC_ConfigChannel+0x1c6>
 8000e6e:	4b13      	ldr	r3, [pc, #76]	@ (8000ebc <HAL_ADC_ConfigChannel+0x210>)
 8000e70:	e002      	b.n	8000e78 <HAL_ADC_ConfigChannel+0x1cc>
 8000e72:	4b13      	ldr	r3, [pc, #76]	@ (8000ec0 <HAL_ADC_ConfigChannel+0x214>)
 8000e74:	e000      	b.n	8000e78 <HAL_ADC_ConfigChannel+0x1cc>
 8000e76:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <HAL_ADC_ConfigChannel+0x218>)
 8000e78:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb0 <HAL_ADC_ConfigChannel+0x204>)
 8000e7a:	400b      	ands	r3, r1
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	e009      	b.n	8000e94 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e84:	2220      	movs	r2, #32
 8000e86:	431a      	orrs	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	18fb      	adds	r3, r7, r3
 8000e90:	2201      	movs	r2, #1
 8000e92:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2234      	movs	r2, #52	@ 0x34
 8000e98:	2100      	movs	r1, #0
 8000e9a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	18fb      	adds	r3, r7, r3
 8000ea0:	781b      	ldrb	r3, [r3, #0]
}
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b004      	add	sp, #16
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	46c0      	nop			@ (mov r8, r8)
 8000eac:	00001001 	.word	0x00001001
 8000eb0:	40012708 	.word	0x40012708
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	000f4240 	.word	0x000f4240
 8000ebc:	ffbfffff 	.word	0xffbfffff
 8000ec0:	feffffff 	.word	0xfeffffff
 8000ec4:	ff7fffff 	.word	0xff7fffff

08000ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec8:	b590      	push	{r4, r7, lr}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	0002      	movs	r2, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ed6:	1dfb      	adds	r3, r7, #7
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b7f      	cmp	r3, #127	@ 0x7f
 8000edc:	d828      	bhi.n	8000f30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ede:	4a2f      	ldr	r2, [pc, #188]	@ (8000f9c <__NVIC_SetPriority+0xd4>)
 8000ee0:	1dfb      	adds	r3, r7, #7
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	b25b      	sxtb	r3, r3
 8000ee6:	089b      	lsrs	r3, r3, #2
 8000ee8:	33c0      	adds	r3, #192	@ 0xc0
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	589b      	ldr	r3, [r3, r2]
 8000eee:	1dfa      	adds	r2, r7, #7
 8000ef0:	7812      	ldrb	r2, [r2, #0]
 8000ef2:	0011      	movs	r1, r2
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	400a      	ands	r2, r1
 8000ef8:	00d2      	lsls	r2, r2, #3
 8000efa:	21ff      	movs	r1, #255	@ 0xff
 8000efc:	4091      	lsls	r1, r2
 8000efe:	000a      	movs	r2, r1
 8000f00:	43d2      	mvns	r2, r2
 8000f02:	401a      	ands	r2, r3
 8000f04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	019b      	lsls	r3, r3, #6
 8000f0a:	22ff      	movs	r2, #255	@ 0xff
 8000f0c:	401a      	ands	r2, r3
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	0018      	movs	r0, r3
 8000f14:	2303      	movs	r3, #3
 8000f16:	4003      	ands	r3, r0
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f1c:	481f      	ldr	r0, [pc, #124]	@ (8000f9c <__NVIC_SetPriority+0xd4>)
 8000f1e:	1dfb      	adds	r3, r7, #7
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	089b      	lsrs	r3, r3, #2
 8000f26:	430a      	orrs	r2, r1
 8000f28:	33c0      	adds	r3, #192	@ 0xc0
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f2e:	e031      	b.n	8000f94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f30:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa0 <__NVIC_SetPriority+0xd8>)
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	0019      	movs	r1, r3
 8000f38:	230f      	movs	r3, #15
 8000f3a:	400b      	ands	r3, r1
 8000f3c:	3b08      	subs	r3, #8
 8000f3e:	089b      	lsrs	r3, r3, #2
 8000f40:	3306      	adds	r3, #6
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	18d3      	adds	r3, r2, r3
 8000f46:	3304      	adds	r3, #4
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	1dfa      	adds	r2, r7, #7
 8000f4c:	7812      	ldrb	r2, [r2, #0]
 8000f4e:	0011      	movs	r1, r2
 8000f50:	2203      	movs	r2, #3
 8000f52:	400a      	ands	r2, r1
 8000f54:	00d2      	lsls	r2, r2, #3
 8000f56:	21ff      	movs	r1, #255	@ 0xff
 8000f58:	4091      	lsls	r1, r2
 8000f5a:	000a      	movs	r2, r1
 8000f5c:	43d2      	mvns	r2, r2
 8000f5e:	401a      	ands	r2, r3
 8000f60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	019b      	lsls	r3, r3, #6
 8000f66:	22ff      	movs	r2, #255	@ 0xff
 8000f68:	401a      	ands	r2, r3
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	0018      	movs	r0, r3
 8000f70:	2303      	movs	r3, #3
 8000f72:	4003      	ands	r3, r0
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f78:	4809      	ldr	r0, [pc, #36]	@ (8000fa0 <__NVIC_SetPriority+0xd8>)
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	001c      	movs	r4, r3
 8000f80:	230f      	movs	r3, #15
 8000f82:	4023      	ands	r3, r4
 8000f84:	3b08      	subs	r3, #8
 8000f86:	089b      	lsrs	r3, r3, #2
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	3306      	adds	r3, #6
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	18c3      	adds	r3, r0, r3
 8000f90:	3304      	adds	r3, #4
 8000f92:	601a      	str	r2, [r3, #0]
}
 8000f94:	46c0      	nop			@ (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b003      	add	sp, #12
 8000f9a:	bd90      	pop	{r4, r7, pc}
 8000f9c:	e000e100 	.word	0xe000e100
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	1e5a      	subs	r2, r3, #1
 8000fb0:	2380      	movs	r3, #128	@ 0x80
 8000fb2:	045b      	lsls	r3, r3, #17
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d301      	bcc.n	8000fbc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e010      	b.n	8000fde <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe8 <SysTick_Config+0x44>)
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	3a01      	subs	r2, #1
 8000fc2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	425b      	negs	r3, r3
 8000fc8:	2103      	movs	r1, #3
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f7ff ff7c 	bl	8000ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd0:	4b05      	ldr	r3, [pc, #20]	@ (8000fe8 <SysTick_Config+0x44>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd6:	4b04      	ldr	r3, [pc, #16]	@ (8000fe8 <SysTick_Config+0x44>)
 8000fd8:	2207      	movs	r2, #7
 8000fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	0018      	movs	r0, r3
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b002      	add	sp, #8
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	46c0      	nop			@ (mov r8, r8)
 8000fe8:	e000e010 	.word	0xe000e010

08000fec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	210f      	movs	r1, #15
 8000ff8:	187b      	adds	r3, r7, r1
 8000ffa:	1c02      	adds	r2, r0, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	187b      	adds	r3, r7, r1
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b25b      	sxtb	r3, r3
 8001006:	0011      	movs	r1, r2
 8001008:	0018      	movs	r0, r3
 800100a:	f7ff ff5d 	bl	8000ec8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800100e:	46c0      	nop			@ (mov r8, r8)
 8001010:	46bd      	mov	sp, r7
 8001012:	b004      	add	sp, #16
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	0018      	movs	r0, r3
 8001022:	f7ff ffbf 	bl	8000fa4 <SysTick_Config>
 8001026:	0003      	movs	r3, r0
}
 8001028:	0018      	movs	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	b002      	add	sp, #8
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800103e:	e155      	b.n	80012ec <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2101      	movs	r1, #1
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	4091      	lsls	r1, r2
 800104a:	000a      	movs	r2, r1
 800104c:	4013      	ands	r3, r2
 800104e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d100      	bne.n	8001058 <HAL_GPIO_Init+0x28>
 8001056:	e146      	b.n	80012e6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2203      	movs	r2, #3
 800105e:	4013      	ands	r3, r2
 8001060:	2b01      	cmp	r3, #1
 8001062:	d005      	beq.n	8001070 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2203      	movs	r2, #3
 800106a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800106c:	2b02      	cmp	r3, #2
 800106e:	d130      	bne.n	80010d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2203      	movs	r2, #3
 800107c:	409a      	lsls	r2, r3
 800107e:	0013      	movs	r3, r2
 8001080:	43da      	mvns	r2, r3
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	68da      	ldr	r2, [r3, #12]
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	409a      	lsls	r2, r3
 8001092:	0013      	movs	r3, r2
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010a6:	2201      	movs	r2, #1
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	409a      	lsls	r2, r3
 80010ac:	0013      	movs	r3, r2
 80010ae:	43da      	mvns	r2, r3
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	091b      	lsrs	r3, r3, #4
 80010bc:	2201      	movs	r2, #1
 80010be:	401a      	ands	r2, r3
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	409a      	lsls	r2, r3
 80010c4:	0013      	movs	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2203      	movs	r2, #3
 80010d8:	4013      	ands	r3, r2
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d017      	beq.n	800110e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	2203      	movs	r2, #3
 80010ea:	409a      	lsls	r2, r3
 80010ec:	0013      	movs	r3, r2
 80010ee:	43da      	mvns	r2, r3
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	409a      	lsls	r2, r3
 8001100:	0013      	movs	r3, r2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2203      	movs	r2, #3
 8001114:	4013      	ands	r3, r2
 8001116:	2b02      	cmp	r3, #2
 8001118:	d123      	bne.n	8001162 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	08da      	lsrs	r2, r3, #3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3208      	adds	r2, #8
 8001122:	0092      	lsls	r2, r2, #2
 8001124:	58d3      	ldr	r3, [r2, r3]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	2207      	movs	r2, #7
 800112c:	4013      	ands	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	220f      	movs	r2, #15
 8001132:	409a      	lsls	r2, r3
 8001134:	0013      	movs	r3, r2
 8001136:	43da      	mvns	r2, r3
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	691a      	ldr	r2, [r3, #16]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	2107      	movs	r1, #7
 8001146:	400b      	ands	r3, r1
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	08da      	lsrs	r2, r3, #3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3208      	adds	r2, #8
 800115c:	0092      	lsls	r2, r2, #2
 800115e:	6939      	ldr	r1, [r7, #16]
 8001160:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	2203      	movs	r2, #3
 800116e:	409a      	lsls	r2, r3
 8001170:	0013      	movs	r3, r2
 8001172:	43da      	mvns	r2, r3
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2203      	movs	r2, #3
 8001180:	401a      	ands	r2, r3
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	409a      	lsls	r2, r3
 8001188:	0013      	movs	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	23c0      	movs	r3, #192	@ 0xc0
 800119c:	029b      	lsls	r3, r3, #10
 800119e:	4013      	ands	r3, r2
 80011a0:	d100      	bne.n	80011a4 <HAL_GPIO_Init+0x174>
 80011a2:	e0a0      	b.n	80012e6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a4:	4b57      	ldr	r3, [pc, #348]	@ (8001304 <HAL_GPIO_Init+0x2d4>)
 80011a6:	699a      	ldr	r2, [r3, #24]
 80011a8:	4b56      	ldr	r3, [pc, #344]	@ (8001304 <HAL_GPIO_Init+0x2d4>)
 80011aa:	2101      	movs	r1, #1
 80011ac:	430a      	orrs	r2, r1
 80011ae:	619a      	str	r2, [r3, #24]
 80011b0:	4b54      	ldr	r3, [pc, #336]	@ (8001304 <HAL_GPIO_Init+0x2d4>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	2201      	movs	r2, #1
 80011b6:	4013      	ands	r3, r2
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011bc:	4a52      	ldr	r2, [pc, #328]	@ (8001308 <HAL_GPIO_Init+0x2d8>)
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	089b      	lsrs	r3, r3, #2
 80011c2:	3302      	adds	r3, #2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	589b      	ldr	r3, [r3, r2]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	2203      	movs	r2, #3
 80011ce:	4013      	ands	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	220f      	movs	r2, #15
 80011d4:	409a      	lsls	r2, r3
 80011d6:	0013      	movs	r3, r2
 80011d8:	43da      	mvns	r2, r3
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	2390      	movs	r3, #144	@ 0x90
 80011e4:	05db      	lsls	r3, r3, #23
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d019      	beq.n	800121e <HAL_GPIO_Init+0x1ee>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a47      	ldr	r2, [pc, #284]	@ (800130c <HAL_GPIO_Init+0x2dc>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d013      	beq.n	800121a <HAL_GPIO_Init+0x1ea>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a46      	ldr	r2, [pc, #280]	@ (8001310 <HAL_GPIO_Init+0x2e0>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d00d      	beq.n	8001216 <HAL_GPIO_Init+0x1e6>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a45      	ldr	r2, [pc, #276]	@ (8001314 <HAL_GPIO_Init+0x2e4>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d007      	beq.n	8001212 <HAL_GPIO_Init+0x1e2>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a44      	ldr	r2, [pc, #272]	@ (8001318 <HAL_GPIO_Init+0x2e8>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d101      	bne.n	800120e <HAL_GPIO_Init+0x1de>
 800120a:	2304      	movs	r3, #4
 800120c:	e008      	b.n	8001220 <HAL_GPIO_Init+0x1f0>
 800120e:	2305      	movs	r3, #5
 8001210:	e006      	b.n	8001220 <HAL_GPIO_Init+0x1f0>
 8001212:	2303      	movs	r3, #3
 8001214:	e004      	b.n	8001220 <HAL_GPIO_Init+0x1f0>
 8001216:	2302      	movs	r3, #2
 8001218:	e002      	b.n	8001220 <HAL_GPIO_Init+0x1f0>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <HAL_GPIO_Init+0x1f0>
 800121e:	2300      	movs	r3, #0
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	2103      	movs	r1, #3
 8001224:	400a      	ands	r2, r1
 8001226:	0092      	lsls	r2, r2, #2
 8001228:	4093      	lsls	r3, r2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001230:	4935      	ldr	r1, [pc, #212]	@ (8001308 <HAL_GPIO_Init+0x2d8>)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3302      	adds	r3, #2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800123e:	4b37      	ldr	r3, [pc, #220]	@ (800131c <HAL_GPIO_Init+0x2ec>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	43da      	mvns	r2, r3
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	2380      	movs	r3, #128	@ 0x80
 8001254:	035b      	lsls	r3, r3, #13
 8001256:	4013      	ands	r3, r2
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001262:	4b2e      	ldr	r3, [pc, #184]	@ (800131c <HAL_GPIO_Init+0x2ec>)
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001268:	4b2c      	ldr	r3, [pc, #176]	@ (800131c <HAL_GPIO_Init+0x2ec>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	43da      	mvns	r2, r3
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	2380      	movs	r3, #128	@ 0x80
 800127e:	039b      	lsls	r3, r3, #14
 8001280:	4013      	ands	r3, r2
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800128c:	4b23      	ldr	r3, [pc, #140]	@ (800131c <HAL_GPIO_Init+0x2ec>)
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001292:	4b22      	ldr	r3, [pc, #136]	@ (800131c <HAL_GPIO_Init+0x2ec>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	43da      	mvns	r2, r3
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	2380      	movs	r3, #128	@ 0x80
 80012a8:	029b      	lsls	r3, r3, #10
 80012aa:	4013      	ands	r3, r2
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012b6:	4b19      	ldr	r3, [pc, #100]	@ (800131c <HAL_GPIO_Init+0x2ec>)
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80012bc:	4b17      	ldr	r3, [pc, #92]	@ (800131c <HAL_GPIO_Init+0x2ec>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	43da      	mvns	r2, r3
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	2380      	movs	r3, #128	@ 0x80
 80012d2:	025b      	lsls	r3, r3, #9
 80012d4:	4013      	ands	r3, r2
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012e0:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <HAL_GPIO_Init+0x2ec>)
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	3301      	adds	r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	40da      	lsrs	r2, r3
 80012f4:	1e13      	subs	r3, r2, #0
 80012f6:	d000      	beq.n	80012fa <HAL_GPIO_Init+0x2ca>
 80012f8:	e6a2      	b.n	8001040 <HAL_GPIO_Init+0x10>
  } 
}
 80012fa:	46c0      	nop			@ (mov r8, r8)
 80012fc:	46c0      	nop			@ (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	b006      	add	sp, #24
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40021000 	.word	0x40021000
 8001308:	40010000 	.word	0x40010000
 800130c:	48000400 	.word	0x48000400
 8001310:	48000800 	.word	0x48000800
 8001314:	48000c00 	.word	0x48000c00
 8001318:	48001000 	.word	0x48001000
 800131c:	40010400 	.word	0x40010400

08001320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	0008      	movs	r0, r1
 800132a:	0011      	movs	r1, r2
 800132c:	1cbb      	adds	r3, r7, #2
 800132e:	1c02      	adds	r2, r0, #0
 8001330:	801a      	strh	r2, [r3, #0]
 8001332:	1c7b      	adds	r3, r7, #1
 8001334:	1c0a      	adds	r2, r1, #0
 8001336:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001338:	1c7b      	adds	r3, r7, #1
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d004      	beq.n	800134a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001340:	1cbb      	adds	r3, r7, #2
 8001342:	881a      	ldrh	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001348:	e003      	b.n	8001352 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800134a:	1cbb      	adds	r3, r7, #2
 800134c:	881a      	ldrh	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b002      	add	sp, #8
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d102      	bne.n	8001370 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	f000 fb76 	bl	8001a5c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2201      	movs	r2, #1
 8001376:	4013      	ands	r3, r2
 8001378:	d100      	bne.n	800137c <HAL_RCC_OscConfig+0x20>
 800137a:	e08e      	b.n	800149a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800137c:	4bc5      	ldr	r3, [pc, #788]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	220c      	movs	r2, #12
 8001382:	4013      	ands	r3, r2
 8001384:	2b04      	cmp	r3, #4
 8001386:	d00e      	beq.n	80013a6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001388:	4bc2      	ldr	r3, [pc, #776]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	220c      	movs	r2, #12
 800138e:	4013      	ands	r3, r2
 8001390:	2b08      	cmp	r3, #8
 8001392:	d117      	bne.n	80013c4 <HAL_RCC_OscConfig+0x68>
 8001394:	4bbf      	ldr	r3, [pc, #764]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	23c0      	movs	r3, #192	@ 0xc0
 800139a:	025b      	lsls	r3, r3, #9
 800139c:	401a      	ands	r2, r3
 800139e:	2380      	movs	r3, #128	@ 0x80
 80013a0:	025b      	lsls	r3, r3, #9
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d10e      	bne.n	80013c4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a6:	4bbb      	ldr	r3, [pc, #748]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	2380      	movs	r3, #128	@ 0x80
 80013ac:	029b      	lsls	r3, r3, #10
 80013ae:	4013      	ands	r3, r2
 80013b0:	d100      	bne.n	80013b4 <HAL_RCC_OscConfig+0x58>
 80013b2:	e071      	b.n	8001498 <HAL_RCC_OscConfig+0x13c>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d000      	beq.n	80013be <HAL_RCC_OscConfig+0x62>
 80013bc:	e06c      	b.n	8001498 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	f000 fb4c 	bl	8001a5c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d107      	bne.n	80013dc <HAL_RCC_OscConfig+0x80>
 80013cc:	4bb1      	ldr	r3, [pc, #708]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4bb0      	ldr	r3, [pc, #704]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 80013d2:	2180      	movs	r1, #128	@ 0x80
 80013d4:	0249      	lsls	r1, r1, #9
 80013d6:	430a      	orrs	r2, r1
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	e02f      	b.n	800143c <HAL_RCC_OscConfig+0xe0>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d10c      	bne.n	80013fe <HAL_RCC_OscConfig+0xa2>
 80013e4:	4bab      	ldr	r3, [pc, #684]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4baa      	ldr	r3, [pc, #680]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 80013ea:	49ab      	ldr	r1, [pc, #684]	@ (8001698 <HAL_RCC_OscConfig+0x33c>)
 80013ec:	400a      	ands	r2, r1
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	4ba8      	ldr	r3, [pc, #672]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4ba7      	ldr	r3, [pc, #668]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 80013f6:	49a9      	ldr	r1, [pc, #676]	@ (800169c <HAL_RCC_OscConfig+0x340>)
 80013f8:	400a      	ands	r2, r1
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	e01e      	b.n	800143c <HAL_RCC_OscConfig+0xe0>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b05      	cmp	r3, #5
 8001404:	d10e      	bne.n	8001424 <HAL_RCC_OscConfig+0xc8>
 8001406:	4ba3      	ldr	r3, [pc, #652]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4ba2      	ldr	r3, [pc, #648]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 800140c:	2180      	movs	r1, #128	@ 0x80
 800140e:	02c9      	lsls	r1, r1, #11
 8001410:	430a      	orrs	r2, r1
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	4b9f      	ldr	r3, [pc, #636]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b9e      	ldr	r3, [pc, #632]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 800141a:	2180      	movs	r1, #128	@ 0x80
 800141c:	0249      	lsls	r1, r1, #9
 800141e:	430a      	orrs	r2, r1
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	e00b      	b.n	800143c <HAL_RCC_OscConfig+0xe0>
 8001424:	4b9b      	ldr	r3, [pc, #620]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b9a      	ldr	r3, [pc, #616]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 800142a:	499b      	ldr	r1, [pc, #620]	@ (8001698 <HAL_RCC_OscConfig+0x33c>)
 800142c:	400a      	ands	r2, r1
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	4b98      	ldr	r3, [pc, #608]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b97      	ldr	r3, [pc, #604]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 8001436:	4999      	ldr	r1, [pc, #612]	@ (800169c <HAL_RCC_OscConfig+0x340>)
 8001438:	400a      	ands	r2, r1
 800143a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d014      	beq.n	800146e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff fae8 	bl	8000a18 <HAL_GetTick>
 8001448:	0003      	movs	r3, r0
 800144a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800144e:	f7ff fae3 	bl	8000a18 <HAL_GetTick>
 8001452:	0002      	movs	r2, r0
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b64      	cmp	r3, #100	@ 0x64
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e2fd      	b.n	8001a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001460:	4b8c      	ldr	r3, [pc, #560]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	2380      	movs	r3, #128	@ 0x80
 8001466:	029b      	lsls	r3, r3, #10
 8001468:	4013      	ands	r3, r2
 800146a:	d0f0      	beq.n	800144e <HAL_RCC_OscConfig+0xf2>
 800146c:	e015      	b.n	800149a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146e:	f7ff fad3 	bl	8000a18 <HAL_GetTick>
 8001472:	0003      	movs	r3, r0
 8001474:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001478:	f7ff face 	bl	8000a18 <HAL_GetTick>
 800147c:	0002      	movs	r2, r0
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b64      	cmp	r3, #100	@ 0x64
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e2e8      	b.n	8001a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148a:	4b82      	ldr	r3, [pc, #520]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	2380      	movs	r3, #128	@ 0x80
 8001490:	029b      	lsls	r3, r3, #10
 8001492:	4013      	ands	r3, r2
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x11c>
 8001496:	e000      	b.n	800149a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001498:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2202      	movs	r2, #2
 80014a0:	4013      	ands	r3, r2
 80014a2:	d100      	bne.n	80014a6 <HAL_RCC_OscConfig+0x14a>
 80014a4:	e06c      	b.n	8001580 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014a6:	4b7b      	ldr	r3, [pc, #492]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	220c      	movs	r2, #12
 80014ac:	4013      	ands	r3, r2
 80014ae:	d00e      	beq.n	80014ce <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014b0:	4b78      	ldr	r3, [pc, #480]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	220c      	movs	r2, #12
 80014b6:	4013      	ands	r3, r2
 80014b8:	2b08      	cmp	r3, #8
 80014ba:	d11f      	bne.n	80014fc <HAL_RCC_OscConfig+0x1a0>
 80014bc:	4b75      	ldr	r3, [pc, #468]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	23c0      	movs	r3, #192	@ 0xc0
 80014c2:	025b      	lsls	r3, r3, #9
 80014c4:	401a      	ands	r2, r3
 80014c6:	2380      	movs	r3, #128	@ 0x80
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d116      	bne.n	80014fc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ce:	4b71      	ldr	r3, [pc, #452]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2202      	movs	r2, #2
 80014d4:	4013      	ands	r3, r2
 80014d6:	d005      	beq.n	80014e4 <HAL_RCC_OscConfig+0x188>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d001      	beq.n	80014e4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e2bb      	b.n	8001a5c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	22f8      	movs	r2, #248	@ 0xf8
 80014ea:	4393      	bics	r3, r2
 80014ec:	0019      	movs	r1, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	00da      	lsls	r2, r3, #3
 80014f4:	4b67      	ldr	r3, [pc, #412]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fa:	e041      	b.n	8001580 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d024      	beq.n	800154e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001504:	4b63      	ldr	r3, [pc, #396]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b62      	ldr	r3, [pc, #392]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 800150a:	2101      	movs	r1, #1
 800150c:	430a      	orrs	r2, r1
 800150e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fa82 	bl	8000a18 <HAL_GetTick>
 8001514:	0003      	movs	r3, r0
 8001516:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800151a:	f7ff fa7d 	bl	8000a18 <HAL_GetTick>
 800151e:	0002      	movs	r2, r0
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e297      	b.n	8001a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152c:	4b59      	ldr	r3, [pc, #356]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2202      	movs	r2, #2
 8001532:	4013      	ands	r3, r2
 8001534:	d0f1      	beq.n	800151a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001536:	4b57      	ldr	r3, [pc, #348]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	22f8      	movs	r2, #248	@ 0xf8
 800153c:	4393      	bics	r3, r2
 800153e:	0019      	movs	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	00da      	lsls	r2, r3, #3
 8001546:	4b53      	ldr	r3, [pc, #332]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 8001548:	430a      	orrs	r2, r1
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	e018      	b.n	8001580 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154e:	4b51      	ldr	r3, [pc, #324]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	4b50      	ldr	r3, [pc, #320]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 8001554:	2101      	movs	r1, #1
 8001556:	438a      	bics	r2, r1
 8001558:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155a:	f7ff fa5d 	bl	8000a18 <HAL_GetTick>
 800155e:	0003      	movs	r3, r0
 8001560:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001564:	f7ff fa58 	bl	8000a18 <HAL_GetTick>
 8001568:	0002      	movs	r2, r0
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e272      	b.n	8001a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001576:	4b47      	ldr	r3, [pc, #284]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2202      	movs	r2, #2
 800157c:	4013      	ands	r3, r2
 800157e:	d1f1      	bne.n	8001564 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2208      	movs	r2, #8
 8001586:	4013      	ands	r3, r2
 8001588:	d036      	beq.n	80015f8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d019      	beq.n	80015c6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001592:	4b40      	ldr	r3, [pc, #256]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 8001594:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001596:	4b3f      	ldr	r3, [pc, #252]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 8001598:	2101      	movs	r1, #1
 800159a:	430a      	orrs	r2, r1
 800159c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159e:	f7ff fa3b 	bl	8000a18 <HAL_GetTick>
 80015a2:	0003      	movs	r3, r0
 80015a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a8:	f7ff fa36 	bl	8000a18 <HAL_GetTick>
 80015ac:	0002      	movs	r2, r0
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e250      	b.n	8001a5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ba:	4b36      	ldr	r3, [pc, #216]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 80015bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015be:	2202      	movs	r2, #2
 80015c0:	4013      	ands	r3, r2
 80015c2:	d0f1      	beq.n	80015a8 <HAL_RCC_OscConfig+0x24c>
 80015c4:	e018      	b.n	80015f8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c6:	4b33      	ldr	r3, [pc, #204]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 80015c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015ca:	4b32      	ldr	r3, [pc, #200]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 80015cc:	2101      	movs	r1, #1
 80015ce:	438a      	bics	r2, r1
 80015d0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d2:	f7ff fa21 	bl	8000a18 <HAL_GetTick>
 80015d6:	0003      	movs	r3, r0
 80015d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015dc:	f7ff fa1c 	bl	8000a18 <HAL_GetTick>
 80015e0:	0002      	movs	r2, r0
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e236      	b.n	8001a5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ee:	4b29      	ldr	r3, [pc, #164]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 80015f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f2:	2202      	movs	r2, #2
 80015f4:	4013      	ands	r3, r2
 80015f6:	d1f1      	bne.n	80015dc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2204      	movs	r2, #4
 80015fe:	4013      	ands	r3, r2
 8001600:	d100      	bne.n	8001604 <HAL_RCC_OscConfig+0x2a8>
 8001602:	e0b5      	b.n	8001770 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001604:	201f      	movs	r0, #31
 8001606:	183b      	adds	r3, r7, r0
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800160c:	4b21      	ldr	r3, [pc, #132]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 800160e:	69da      	ldr	r2, [r3, #28]
 8001610:	2380      	movs	r3, #128	@ 0x80
 8001612:	055b      	lsls	r3, r3, #21
 8001614:	4013      	ands	r3, r2
 8001616:	d110      	bne.n	800163a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001618:	4b1e      	ldr	r3, [pc, #120]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 800161a:	69da      	ldr	r2, [r3, #28]
 800161c:	4b1d      	ldr	r3, [pc, #116]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 800161e:	2180      	movs	r1, #128	@ 0x80
 8001620:	0549      	lsls	r1, r1, #21
 8001622:	430a      	orrs	r2, r1
 8001624:	61da      	str	r2, [r3, #28]
 8001626:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 8001628:	69da      	ldr	r2, [r3, #28]
 800162a:	2380      	movs	r3, #128	@ 0x80
 800162c:	055b      	lsls	r3, r3, #21
 800162e:	4013      	ands	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001634:	183b      	adds	r3, r7, r0
 8001636:	2201      	movs	r2, #1
 8001638:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163a:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <HAL_RCC_OscConfig+0x344>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	2380      	movs	r3, #128	@ 0x80
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4013      	ands	r3, r2
 8001644:	d11a      	bne.n	800167c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001646:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <HAL_RCC_OscConfig+0x344>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <HAL_RCC_OscConfig+0x344>)
 800164c:	2180      	movs	r1, #128	@ 0x80
 800164e:	0049      	lsls	r1, r1, #1
 8001650:	430a      	orrs	r2, r1
 8001652:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001654:	f7ff f9e0 	bl	8000a18 <HAL_GetTick>
 8001658:	0003      	movs	r3, r0
 800165a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800165e:	f7ff f9db 	bl	8000a18 <HAL_GetTick>
 8001662:	0002      	movs	r2, r0
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b64      	cmp	r3, #100	@ 0x64
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e1f5      	b.n	8001a5c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001670:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <HAL_RCC_OscConfig+0x344>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	2380      	movs	r3, #128	@ 0x80
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4013      	ands	r3, r2
 800167a:	d0f0      	beq.n	800165e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d10f      	bne.n	80016a4 <HAL_RCC_OscConfig+0x348>
 8001684:	4b03      	ldr	r3, [pc, #12]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 8001686:	6a1a      	ldr	r2, [r3, #32]
 8001688:	4b02      	ldr	r3, [pc, #8]	@ (8001694 <HAL_RCC_OscConfig+0x338>)
 800168a:	2101      	movs	r1, #1
 800168c:	430a      	orrs	r2, r1
 800168e:	621a      	str	r2, [r3, #32]
 8001690:	e036      	b.n	8001700 <HAL_RCC_OscConfig+0x3a4>
 8001692:	46c0      	nop			@ (mov r8, r8)
 8001694:	40021000 	.word	0x40021000
 8001698:	fffeffff 	.word	0xfffeffff
 800169c:	fffbffff 	.word	0xfffbffff
 80016a0:	40007000 	.word	0x40007000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10c      	bne.n	80016c6 <HAL_RCC_OscConfig+0x36a>
 80016ac:	4bca      	ldr	r3, [pc, #808]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 80016ae:	6a1a      	ldr	r2, [r3, #32]
 80016b0:	4bc9      	ldr	r3, [pc, #804]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 80016b2:	2101      	movs	r1, #1
 80016b4:	438a      	bics	r2, r1
 80016b6:	621a      	str	r2, [r3, #32]
 80016b8:	4bc7      	ldr	r3, [pc, #796]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 80016ba:	6a1a      	ldr	r2, [r3, #32]
 80016bc:	4bc6      	ldr	r3, [pc, #792]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 80016be:	2104      	movs	r1, #4
 80016c0:	438a      	bics	r2, r1
 80016c2:	621a      	str	r2, [r3, #32]
 80016c4:	e01c      	b.n	8001700 <HAL_RCC_OscConfig+0x3a4>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b05      	cmp	r3, #5
 80016cc:	d10c      	bne.n	80016e8 <HAL_RCC_OscConfig+0x38c>
 80016ce:	4bc2      	ldr	r3, [pc, #776]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 80016d0:	6a1a      	ldr	r2, [r3, #32]
 80016d2:	4bc1      	ldr	r3, [pc, #772]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 80016d4:	2104      	movs	r1, #4
 80016d6:	430a      	orrs	r2, r1
 80016d8:	621a      	str	r2, [r3, #32]
 80016da:	4bbf      	ldr	r3, [pc, #764]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 80016dc:	6a1a      	ldr	r2, [r3, #32]
 80016de:	4bbe      	ldr	r3, [pc, #760]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 80016e0:	2101      	movs	r1, #1
 80016e2:	430a      	orrs	r2, r1
 80016e4:	621a      	str	r2, [r3, #32]
 80016e6:	e00b      	b.n	8001700 <HAL_RCC_OscConfig+0x3a4>
 80016e8:	4bbb      	ldr	r3, [pc, #748]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 80016ea:	6a1a      	ldr	r2, [r3, #32]
 80016ec:	4bba      	ldr	r3, [pc, #744]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 80016ee:	2101      	movs	r1, #1
 80016f0:	438a      	bics	r2, r1
 80016f2:	621a      	str	r2, [r3, #32]
 80016f4:	4bb8      	ldr	r3, [pc, #736]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 80016f6:	6a1a      	ldr	r2, [r3, #32]
 80016f8:	4bb7      	ldr	r3, [pc, #732]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 80016fa:	2104      	movs	r1, #4
 80016fc:	438a      	bics	r2, r1
 80016fe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d014      	beq.n	8001732 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001708:	f7ff f986 	bl	8000a18 <HAL_GetTick>
 800170c:	0003      	movs	r3, r0
 800170e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001710:	e009      	b.n	8001726 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001712:	f7ff f981 	bl	8000a18 <HAL_GetTick>
 8001716:	0002      	movs	r2, r0
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	4aaf      	ldr	r2, [pc, #700]	@ (80019dc <HAL_RCC_OscConfig+0x680>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e19a      	b.n	8001a5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001726:	4bac      	ldr	r3, [pc, #688]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	2202      	movs	r2, #2
 800172c:	4013      	ands	r3, r2
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x3b6>
 8001730:	e013      	b.n	800175a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001732:	f7ff f971 	bl	8000a18 <HAL_GetTick>
 8001736:	0003      	movs	r3, r0
 8001738:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800173a:	e009      	b.n	8001750 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800173c:	f7ff f96c 	bl	8000a18 <HAL_GetTick>
 8001740:	0002      	movs	r2, r0
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	4aa5      	ldr	r2, [pc, #660]	@ (80019dc <HAL_RCC_OscConfig+0x680>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e185      	b.n	8001a5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001750:	4ba1      	ldr	r3, [pc, #644]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	2202      	movs	r2, #2
 8001756:	4013      	ands	r3, r2
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800175a:	231f      	movs	r3, #31
 800175c:	18fb      	adds	r3, r7, r3
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d105      	bne.n	8001770 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001764:	4b9c      	ldr	r3, [pc, #624]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 8001766:	69da      	ldr	r2, [r3, #28]
 8001768:	4b9b      	ldr	r3, [pc, #620]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 800176a:	499d      	ldr	r1, [pc, #628]	@ (80019e0 <HAL_RCC_OscConfig+0x684>)
 800176c:	400a      	ands	r2, r1
 800176e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2210      	movs	r2, #16
 8001776:	4013      	ands	r3, r2
 8001778:	d063      	beq.n	8001842 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d12a      	bne.n	80017d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001782:	4b95      	ldr	r3, [pc, #596]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 8001784:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001786:	4b94      	ldr	r3, [pc, #592]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 8001788:	2104      	movs	r1, #4
 800178a:	430a      	orrs	r2, r1
 800178c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800178e:	4b92      	ldr	r3, [pc, #584]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 8001790:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001792:	4b91      	ldr	r3, [pc, #580]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 8001794:	2101      	movs	r1, #1
 8001796:	430a      	orrs	r2, r1
 8001798:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179a:	f7ff f93d 	bl	8000a18 <HAL_GetTick>
 800179e:	0003      	movs	r3, r0
 80017a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017a4:	f7ff f938 	bl	8000a18 <HAL_GetTick>
 80017a8:	0002      	movs	r2, r0
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e152      	b.n	8001a5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017b6:	4b88      	ldr	r3, [pc, #544]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 80017b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017ba:	2202      	movs	r2, #2
 80017bc:	4013      	ands	r3, r2
 80017be:	d0f1      	beq.n	80017a4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017c0:	4b85      	ldr	r3, [pc, #532]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 80017c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017c4:	22f8      	movs	r2, #248	@ 0xf8
 80017c6:	4393      	bics	r3, r2
 80017c8:	0019      	movs	r1, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	00da      	lsls	r2, r3, #3
 80017d0:	4b81      	ldr	r3, [pc, #516]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 80017d2:	430a      	orrs	r2, r1
 80017d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80017d6:	e034      	b.n	8001842 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	3305      	adds	r3, #5
 80017de:	d111      	bne.n	8001804 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80017e0:	4b7d      	ldr	r3, [pc, #500]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 80017e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017e4:	4b7c      	ldr	r3, [pc, #496]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 80017e6:	2104      	movs	r1, #4
 80017e8:	438a      	bics	r2, r1
 80017ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017ec:	4b7a      	ldr	r3, [pc, #488]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 80017ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017f0:	22f8      	movs	r2, #248	@ 0xf8
 80017f2:	4393      	bics	r3, r2
 80017f4:	0019      	movs	r1, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	00da      	lsls	r2, r3, #3
 80017fc:	4b76      	ldr	r3, [pc, #472]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 80017fe:	430a      	orrs	r2, r1
 8001800:	635a      	str	r2, [r3, #52]	@ 0x34
 8001802:	e01e      	b.n	8001842 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001804:	4b74      	ldr	r3, [pc, #464]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 8001806:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001808:	4b73      	ldr	r3, [pc, #460]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 800180a:	2104      	movs	r1, #4
 800180c:	430a      	orrs	r2, r1
 800180e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001810:	4b71      	ldr	r3, [pc, #452]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 8001812:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001814:	4b70      	ldr	r3, [pc, #448]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 8001816:	2101      	movs	r1, #1
 8001818:	438a      	bics	r2, r1
 800181a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181c:	f7ff f8fc 	bl	8000a18 <HAL_GetTick>
 8001820:	0003      	movs	r3, r0
 8001822:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001826:	f7ff f8f7 	bl	8000a18 <HAL_GetTick>
 800182a:	0002      	movs	r2, r0
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e111      	b.n	8001a5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001838:	4b67      	ldr	r3, [pc, #412]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 800183a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800183c:	2202      	movs	r2, #2
 800183e:	4013      	ands	r3, r2
 8001840:	d1f1      	bne.n	8001826 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2220      	movs	r2, #32
 8001848:	4013      	ands	r3, r2
 800184a:	d05c      	beq.n	8001906 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800184c:	4b62      	ldr	r3, [pc, #392]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	220c      	movs	r2, #12
 8001852:	4013      	ands	r3, r2
 8001854:	2b0c      	cmp	r3, #12
 8001856:	d00e      	beq.n	8001876 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001858:	4b5f      	ldr	r3, [pc, #380]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	220c      	movs	r2, #12
 800185e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001860:	2b08      	cmp	r3, #8
 8001862:	d114      	bne.n	800188e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001864:	4b5c      	ldr	r3, [pc, #368]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	23c0      	movs	r3, #192	@ 0xc0
 800186a:	025b      	lsls	r3, r3, #9
 800186c:	401a      	ands	r2, r3
 800186e:	23c0      	movs	r3, #192	@ 0xc0
 8001870:	025b      	lsls	r3, r3, #9
 8001872:	429a      	cmp	r2, r3
 8001874:	d10b      	bne.n	800188e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001876:	4b58      	ldr	r3, [pc, #352]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 8001878:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800187a:	2380      	movs	r3, #128	@ 0x80
 800187c:	029b      	lsls	r3, r3, #10
 800187e:	4013      	ands	r3, r2
 8001880:	d040      	beq.n	8001904 <HAL_RCC_OscConfig+0x5a8>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d03c      	beq.n	8001904 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e0e6      	b.n	8001a5c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d01b      	beq.n	80018ce <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001896:	4b50      	ldr	r3, [pc, #320]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 8001898:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800189a:	4b4f      	ldr	r3, [pc, #316]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 800189c:	2180      	movs	r1, #128	@ 0x80
 800189e:	0249      	lsls	r1, r1, #9
 80018a0:	430a      	orrs	r2, r1
 80018a2:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff f8b8 	bl	8000a18 <HAL_GetTick>
 80018a8:	0003      	movs	r3, r0
 80018aa:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018ae:	f7ff f8b3 	bl	8000a18 <HAL_GetTick>
 80018b2:	0002      	movs	r2, r0
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e0cd      	b.n	8001a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80018c0:	4b45      	ldr	r3, [pc, #276]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 80018c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018c4:	2380      	movs	r3, #128	@ 0x80
 80018c6:	029b      	lsls	r3, r3, #10
 80018c8:	4013      	ands	r3, r2
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x552>
 80018cc:	e01b      	b.n	8001906 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80018ce:	4b42      	ldr	r3, [pc, #264]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 80018d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018d2:	4b41      	ldr	r3, [pc, #260]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 80018d4:	4943      	ldr	r1, [pc, #268]	@ (80019e4 <HAL_RCC_OscConfig+0x688>)
 80018d6:	400a      	ands	r2, r1
 80018d8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018da:	f7ff f89d 	bl	8000a18 <HAL_GetTick>
 80018de:	0003      	movs	r3, r0
 80018e0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018e4:	f7ff f898 	bl	8000a18 <HAL_GetTick>
 80018e8:	0002      	movs	r2, r0
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e0b2      	b.n	8001a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80018f6:	4b38      	ldr	r3, [pc, #224]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 80018f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018fa:	2380      	movs	r3, #128	@ 0x80
 80018fc:	029b      	lsls	r3, r3, #10
 80018fe:	4013      	ands	r3, r2
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x588>
 8001902:	e000      	b.n	8001906 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001904:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190a:	2b00      	cmp	r3, #0
 800190c:	d100      	bne.n	8001910 <HAL_RCC_OscConfig+0x5b4>
 800190e:	e0a4      	b.n	8001a5a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001910:	4b31      	ldr	r3, [pc, #196]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	220c      	movs	r2, #12
 8001916:	4013      	ands	r3, r2
 8001918:	2b08      	cmp	r3, #8
 800191a:	d100      	bne.n	800191e <HAL_RCC_OscConfig+0x5c2>
 800191c:	e078      	b.n	8001a10 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001922:	2b02      	cmp	r3, #2
 8001924:	d14c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001926:	4b2c      	ldr	r3, [pc, #176]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	4b2b      	ldr	r3, [pc, #172]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 800192c:	492e      	ldr	r1, [pc, #184]	@ (80019e8 <HAL_RCC_OscConfig+0x68c>)
 800192e:	400a      	ands	r2, r1
 8001930:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001932:	f7ff f871 	bl	8000a18 <HAL_GetTick>
 8001936:	0003      	movs	r3, r0
 8001938:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800193c:	f7ff f86c 	bl	8000a18 <HAL_GetTick>
 8001940:	0002      	movs	r2, r0
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e086      	b.n	8001a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800194e:	4b22      	ldr	r3, [pc, #136]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	2380      	movs	r3, #128	@ 0x80
 8001954:	049b      	lsls	r3, r3, #18
 8001956:	4013      	ands	r3, r2
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800195a:	4b1f      	ldr	r3, [pc, #124]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 800195c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800195e:	220f      	movs	r2, #15
 8001960:	4393      	bics	r3, r2
 8001962:	0019      	movs	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001968:	4b1b      	ldr	r3, [pc, #108]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 800196a:	430a      	orrs	r2, r1
 800196c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800196e:	4b1a      	ldr	r3, [pc, #104]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4a1e      	ldr	r2, [pc, #120]	@ (80019ec <HAL_RCC_OscConfig+0x690>)
 8001974:	4013      	ands	r3, r2
 8001976:	0019      	movs	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001980:	431a      	orrs	r2, r3
 8001982:	4b15      	ldr	r3, [pc, #84]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 8001984:	430a      	orrs	r2, r1
 8001986:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001988:	4b13      	ldr	r3, [pc, #76]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 800198e:	2180      	movs	r1, #128	@ 0x80
 8001990:	0449      	lsls	r1, r1, #17
 8001992:	430a      	orrs	r2, r1
 8001994:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7ff f83f 	bl	8000a18 <HAL_GetTick>
 800199a:	0003      	movs	r3, r0
 800199c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a0:	f7ff f83a 	bl	8000a18 <HAL_GetTick>
 80019a4:	0002      	movs	r2, r0
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e054      	b.n	8001a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	2380      	movs	r3, #128	@ 0x80
 80019b8:	049b      	lsls	r3, r3, #18
 80019ba:	4013      	ands	r3, r2
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x644>
 80019be:	e04c      	b.n	8001a5a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c0:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b04      	ldr	r3, [pc, #16]	@ (80019d8 <HAL_RCC_OscConfig+0x67c>)
 80019c6:	4908      	ldr	r1, [pc, #32]	@ (80019e8 <HAL_RCC_OscConfig+0x68c>)
 80019c8:	400a      	ands	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff f824 	bl	8000a18 <HAL_GetTick>
 80019d0:	0003      	movs	r3, r0
 80019d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d4:	e015      	b.n	8001a02 <HAL_RCC_OscConfig+0x6a6>
 80019d6:	46c0      	nop			@ (mov r8, r8)
 80019d8:	40021000 	.word	0x40021000
 80019dc:	00001388 	.word	0x00001388
 80019e0:	efffffff 	.word	0xefffffff
 80019e4:	fffeffff 	.word	0xfffeffff
 80019e8:	feffffff 	.word	0xfeffffff
 80019ec:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f0:	f7ff f812 	bl	8000a18 <HAL_GetTick>
 80019f4:	0002      	movs	r2, r0
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e02c      	b.n	8001a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a02:	4b18      	ldr	r3, [pc, #96]	@ (8001a64 <HAL_RCC_OscConfig+0x708>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	2380      	movs	r3, #128	@ 0x80
 8001a08:	049b      	lsls	r3, r3, #18
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x694>
 8001a0e:	e024      	b.n	8001a5a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e01f      	b.n	8001a5c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <HAL_RCC_OscConfig+0x708>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001a22:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <HAL_RCC_OscConfig+0x708>)
 8001a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a26:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	23c0      	movs	r3, #192	@ 0xc0
 8001a2c:	025b      	lsls	r3, r3, #9
 8001a2e:	401a      	ands	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d10e      	bne.n	8001a56 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	220f      	movs	r2, #15
 8001a3c:	401a      	ands	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	23f0      	movs	r3, #240	@ 0xf0
 8001a4a:	039b      	lsls	r3, r3, #14
 8001a4c:	401a      	ands	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d001      	beq.n	8001a5a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	b008      	add	sp, #32
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40021000 	.word	0x40021000

08001a68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0bf      	b.n	8001bfc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a7c:	4b61      	ldr	r3, [pc, #388]	@ (8001c04 <HAL_RCC_ClockConfig+0x19c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2201      	movs	r2, #1
 8001a82:	4013      	ands	r3, r2
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d911      	bls.n	8001aae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8a:	4b5e      	ldr	r3, [pc, #376]	@ (8001c04 <HAL_RCC_ClockConfig+0x19c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4393      	bics	r3, r2
 8001a92:	0019      	movs	r1, r3
 8001a94:	4b5b      	ldr	r3, [pc, #364]	@ (8001c04 <HAL_RCC_ClockConfig+0x19c>)
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9c:	4b59      	ldr	r3, [pc, #356]	@ (8001c04 <HAL_RCC_ClockConfig+0x19c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d001      	beq.n	8001aae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e0a6      	b.n	8001bfc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d015      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2204      	movs	r2, #4
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d006      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ac2:	4b51      	ldr	r3, [pc, #324]	@ (8001c08 <HAL_RCC_ClockConfig+0x1a0>)
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	4b50      	ldr	r3, [pc, #320]	@ (8001c08 <HAL_RCC_ClockConfig+0x1a0>)
 8001ac8:	21e0      	movs	r1, #224	@ 0xe0
 8001aca:	00c9      	lsls	r1, r1, #3
 8001acc:	430a      	orrs	r2, r1
 8001ace:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad0:	4b4d      	ldr	r3, [pc, #308]	@ (8001c08 <HAL_RCC_ClockConfig+0x1a0>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	22f0      	movs	r2, #240	@ 0xf0
 8001ad6:	4393      	bics	r3, r2
 8001ad8:	0019      	movs	r1, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	4b4a      	ldr	r3, [pc, #296]	@ (8001c08 <HAL_RCC_ClockConfig+0x1a0>)
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	4013      	ands	r3, r2
 8001aec:	d04c      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	4b44      	ldr	r3, [pc, #272]	@ (8001c08 <HAL_RCC_ClockConfig+0x1a0>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	2380      	movs	r3, #128	@ 0x80
 8001afc:	029b      	lsls	r3, r3, #10
 8001afe:	4013      	ands	r3, r2
 8001b00:	d120      	bne.n	8001b44 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e07a      	b.n	8001bfc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c08 <HAL_RCC_ClockConfig+0x1a0>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	2380      	movs	r3, #128	@ 0x80
 8001b14:	049b      	lsls	r3, r3, #18
 8001b16:	4013      	ands	r3, r2
 8001b18:	d114      	bne.n	8001b44 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e06e      	b.n	8001bfc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001b26:	4b38      	ldr	r3, [pc, #224]	@ (8001c08 <HAL_RCC_ClockConfig+0x1a0>)
 8001b28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b2a:	2380      	movs	r3, #128	@ 0x80
 8001b2c:	029b      	lsls	r3, r3, #10
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d108      	bne.n	8001b44 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e062      	b.n	8001bfc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b36:	4b34      	ldr	r3, [pc, #208]	@ (8001c08 <HAL_RCC_ClockConfig+0x1a0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d101      	bne.n	8001b44 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e05b      	b.n	8001bfc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b44:	4b30      	ldr	r3, [pc, #192]	@ (8001c08 <HAL_RCC_ClockConfig+0x1a0>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2203      	movs	r2, #3
 8001b4a:	4393      	bics	r3, r2
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	4b2d      	ldr	r3, [pc, #180]	@ (8001c08 <HAL_RCC_ClockConfig+0x1a0>)
 8001b54:	430a      	orrs	r2, r1
 8001b56:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b58:	f7fe ff5e 	bl	8000a18 <HAL_GetTick>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b60:	e009      	b.n	8001b76 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b62:	f7fe ff59 	bl	8000a18 <HAL_GetTick>
 8001b66:	0002      	movs	r2, r0
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	4a27      	ldr	r2, [pc, #156]	@ (8001c0c <HAL_RCC_ClockConfig+0x1a4>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e042      	b.n	8001bfc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b76:	4b24      	ldr	r3, [pc, #144]	@ (8001c08 <HAL_RCC_ClockConfig+0x1a0>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	401a      	ands	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d1ec      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b88:	4b1e      	ldr	r3, [pc, #120]	@ (8001c04 <HAL_RCC_ClockConfig+0x19c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4013      	ands	r3, r2
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d211      	bcs.n	8001bba <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <HAL_RCC_ClockConfig+0x19c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	4393      	bics	r3, r2
 8001b9e:	0019      	movs	r1, r3
 8001ba0:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <HAL_RCC_ClockConfig+0x19c>)
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba8:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <HAL_RCC_ClockConfig+0x19c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2201      	movs	r2, #1
 8001bae:	4013      	ands	r3, r2
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d001      	beq.n	8001bba <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e020      	b.n	8001bfc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d009      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc4:	4b10      	ldr	r3, [pc, #64]	@ (8001c08 <HAL_RCC_ClockConfig+0x1a0>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	4a11      	ldr	r2, [pc, #68]	@ (8001c10 <HAL_RCC_ClockConfig+0x1a8>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	0019      	movs	r1, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001c08 <HAL_RCC_ClockConfig+0x1a0>)
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001bd8:	f000 f820 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8001bdc:	0001      	movs	r1, r0
 8001bde:	4b0a      	ldr	r3, [pc, #40]	@ (8001c08 <HAL_RCC_ClockConfig+0x1a0>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	091b      	lsrs	r3, r3, #4
 8001be4:	220f      	movs	r2, #15
 8001be6:	4013      	ands	r3, r2
 8001be8:	4a0a      	ldr	r2, [pc, #40]	@ (8001c14 <HAL_RCC_ClockConfig+0x1ac>)
 8001bea:	5cd3      	ldrb	r3, [r2, r3]
 8001bec:	000a      	movs	r2, r1
 8001bee:	40da      	lsrs	r2, r3
 8001bf0:	4b09      	ldr	r3, [pc, #36]	@ (8001c18 <HAL_RCC_ClockConfig+0x1b0>)
 8001bf2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001bf4:	2003      	movs	r0, #3
 8001bf6:	f7fe fec9 	bl	800098c <HAL_InitTick>
  
  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b004      	add	sp, #16
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40022000 	.word	0x40022000
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	00001388 	.word	0x00001388
 8001c10:	fffff8ff 	.word	0xfffff8ff
 8001c14:	08002934 	.word	0x08002934
 8001c18:	20000000 	.word	0x20000000

08001c1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001c36:	4b2d      	ldr	r3, [pc, #180]	@ (8001cec <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	220c      	movs	r2, #12
 8001c40:	4013      	ands	r3, r2
 8001c42:	2b0c      	cmp	r3, #12
 8001c44:	d046      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0xb8>
 8001c46:	d848      	bhi.n	8001cda <HAL_RCC_GetSysClockFreq+0xbe>
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d002      	beq.n	8001c52 <HAL_RCC_GetSysClockFreq+0x36>
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	d003      	beq.n	8001c58 <HAL_RCC_GetSysClockFreq+0x3c>
 8001c50:	e043      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c52:	4b27      	ldr	r3, [pc, #156]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c54:	613b      	str	r3, [r7, #16]
      break;
 8001c56:	e043      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	0c9b      	lsrs	r3, r3, #18
 8001c5c:	220f      	movs	r2, #15
 8001c5e:	4013      	ands	r3, r2
 8001c60:	4a24      	ldr	r2, [pc, #144]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001c62:	5cd3      	ldrb	r3, [r2, r3]
 8001c64:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c66:	4b21      	ldr	r3, [pc, #132]	@ (8001cec <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c6a:	220f      	movs	r2, #15
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	4a22      	ldr	r2, [pc, #136]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001c70:	5cd3      	ldrb	r3, [r2, r3]
 8001c72:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	23c0      	movs	r3, #192	@ 0xc0
 8001c78:	025b      	lsls	r3, r3, #9
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	2380      	movs	r3, #128	@ 0x80
 8001c7e:	025b      	lsls	r3, r3, #9
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d109      	bne.n	8001c98 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	481a      	ldr	r0, [pc, #104]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c88:	f7fe fa3e 	bl	8000108 <__udivsi3>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	001a      	movs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4353      	muls	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	e01a      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	23c0      	movs	r3, #192	@ 0xc0
 8001c9c:	025b      	lsls	r3, r3, #9
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	23c0      	movs	r3, #192	@ 0xc0
 8001ca2:	025b      	lsls	r3, r3, #9
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d109      	bne.n	8001cbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ca8:	68b9      	ldr	r1, [r7, #8]
 8001caa:	4814      	ldr	r0, [pc, #80]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0xe0>)
 8001cac:	f7fe fa2c 	bl	8000108 <__udivsi3>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	001a      	movs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4353      	muls	r3, r2
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	e008      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	480c      	ldr	r0, [pc, #48]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001cc0:	f7fe fa22 	bl	8000108 <__udivsi3>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	001a      	movs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4353      	muls	r3, r2
 8001ccc:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	613b      	str	r3, [r7, #16]
      break;
 8001cd2:	e005      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001cd4:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0xe0>)
 8001cd6:	613b      	str	r3, [r7, #16]
      break;
 8001cd8:	e002      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cda:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001cdc:	613b      	str	r3, [r7, #16]
      break;
 8001cde:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ce0:	693b      	ldr	r3, [r7, #16]
}
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	b006      	add	sp, #24
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	46c0      	nop			@ (mov r8, r8)
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	007a1200 	.word	0x007a1200
 8001cf4:	0800294c 	.word	0x0800294c
 8001cf8:	0800295c 	.word	0x0800295c
 8001cfc:	02dc6c00 	.word	0x02dc6c00

08001d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d04:	4b02      	ldr	r3, [pc, #8]	@ (8001d10 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	0018      	movs	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	46c0      	nop			@ (mov r8, r8)
 8001d10:	20000000 	.word	0x20000000

08001d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001d18:	f7ff fff2 	bl	8001d00 <HAL_RCC_GetHCLKFreq>
 8001d1c:	0001      	movs	r1, r0
 8001d1e:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	0a1b      	lsrs	r3, r3, #8
 8001d24:	2207      	movs	r2, #7
 8001d26:	4013      	ands	r3, r2
 8001d28:	4a04      	ldr	r2, [pc, #16]	@ (8001d3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d2a:	5cd3      	ldrb	r3, [r2, r3]
 8001d2c:	40d9      	lsrs	r1, r3
 8001d2e:	000b      	movs	r3, r1
}    
 8001d30:	0018      	movs	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	46c0      	nop			@ (mov r8, r8)
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	08002944 	.word	0x08002944

08001d40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2380      	movs	r3, #128	@ 0x80
 8001d56:	025b      	lsls	r3, r3, #9
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d100      	bne.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001d5c:	e08e      	b.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001d5e:	2017      	movs	r0, #23
 8001d60:	183b      	adds	r3, r7, r0
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d66:	4b6e      	ldr	r3, [pc, #440]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d68:	69da      	ldr	r2, [r3, #28]
 8001d6a:	2380      	movs	r3, #128	@ 0x80
 8001d6c:	055b      	lsls	r3, r3, #21
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d110      	bne.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	4b6b      	ldr	r3, [pc, #428]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d74:	69da      	ldr	r2, [r3, #28]
 8001d76:	4b6a      	ldr	r3, [pc, #424]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d78:	2180      	movs	r1, #128	@ 0x80
 8001d7a:	0549      	lsls	r1, r1, #21
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	61da      	str	r2, [r3, #28]
 8001d80:	4b67      	ldr	r3, [pc, #412]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d82:	69da      	ldr	r2, [r3, #28]
 8001d84:	2380      	movs	r3, #128	@ 0x80
 8001d86:	055b      	lsls	r3, r3, #21
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d8e:	183b      	adds	r3, r7, r0
 8001d90:	2201      	movs	r2, #1
 8001d92:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d94:	4b63      	ldr	r3, [pc, #396]	@ (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	2380      	movs	r3, #128	@ 0x80
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d11a      	bne.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001da0:	4b60      	ldr	r3, [pc, #384]	@ (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b5f      	ldr	r3, [pc, #380]	@ (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001da6:	2180      	movs	r1, #128	@ 0x80
 8001da8:	0049      	lsls	r1, r1, #1
 8001daa:	430a      	orrs	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dae:	f7fe fe33 	bl	8000a18 <HAL_GetTick>
 8001db2:	0003      	movs	r3, r0
 8001db4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db6:	e008      	b.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db8:	f7fe fe2e 	bl	8000a18 <HAL_GetTick>
 8001dbc:	0002      	movs	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b64      	cmp	r3, #100	@ 0x64
 8001dc4:	d901      	bls.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e0a6      	b.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dca:	4b56      	ldr	r3, [pc, #344]	@ (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	2380      	movs	r3, #128	@ 0x80
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dd6:	4b52      	ldr	r3, [pc, #328]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dd8:	6a1a      	ldr	r2, [r3, #32]
 8001dda:	23c0      	movs	r3, #192	@ 0xc0
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4013      	ands	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d034      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	23c0      	movs	r3, #192	@ 0xc0
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4013      	ands	r3, r2
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d02c      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001df8:	4b49      	ldr	r3, [pc, #292]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	4a4a      	ldr	r2, [pc, #296]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e02:	4b47      	ldr	r3, [pc, #284]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e04:	6a1a      	ldr	r2, [r3, #32]
 8001e06:	4b46      	ldr	r3, [pc, #280]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e08:	2180      	movs	r1, #128	@ 0x80
 8001e0a:	0249      	lsls	r1, r1, #9
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e10:	4b43      	ldr	r3, [pc, #268]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e12:	6a1a      	ldr	r2, [r3, #32]
 8001e14:	4b42      	ldr	r3, [pc, #264]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e16:	4945      	ldr	r1, [pc, #276]	@ (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001e18:	400a      	ands	r2, r1
 8001e1a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e1c:	4b40      	ldr	r3, [pc, #256]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2201      	movs	r2, #1
 8001e26:	4013      	ands	r3, r2
 8001e28:	d013      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2a:	f7fe fdf5 	bl	8000a18 <HAL_GetTick>
 8001e2e:	0003      	movs	r3, r0
 8001e30:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e32:	e009      	b.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e34:	f7fe fdf0 	bl	8000a18 <HAL_GetTick>
 8001e38:	0002      	movs	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	4a3c      	ldr	r2, [pc, #240]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e067      	b.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e48:	4b35      	ldr	r3, [pc, #212]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e52:	4b33      	ldr	r3, [pc, #204]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	4a34      	ldr	r2, [pc, #208]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	4b2f      	ldr	r3, [pc, #188]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e62:	430a      	orrs	r2, r1
 8001e64:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e66:	2317      	movs	r3, #23
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d105      	bne.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e70:	4b2b      	ldr	r3, [pc, #172]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e72:	69da      	ldr	r2, [r3, #28]
 8001e74:	4b2a      	ldr	r3, [pc, #168]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e76:	492f      	ldr	r1, [pc, #188]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001e78:	400a      	ands	r2, r1
 8001e7a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2201      	movs	r2, #1
 8001e82:	4013      	ands	r3, r2
 8001e84:	d009      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e86:	4b26      	ldr	r3, [pc, #152]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	4393      	bics	r3, r2
 8001e8e:	0019      	movs	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	4b22      	ldr	r3, [pc, #136]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e96:	430a      	orrs	r2, r1
 8001e98:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d009      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea8:	4a23      	ldr	r2, [pc, #140]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	0019      	movs	r1, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d009      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ec2:	4b17      	ldr	r3, [pc, #92]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	2210      	movs	r2, #16
 8001ec8:	4393      	bics	r3, r2
 8001eca:	0019      	movs	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	2380      	movs	r3, #128	@ 0x80
 8001edc:	029b      	lsls	r3, r3, #10
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d009      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	2280      	movs	r2, #128	@ 0x80
 8001ee8:	4393      	bics	r3, r2
 8001eea:	0019      	movs	r1, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699a      	ldr	r2, [r3, #24]
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	2380      	movs	r3, #128	@ 0x80
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	4013      	ands	r3, r2
 8001f00:	d009      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f02:	4b07      	ldr	r3, [pc, #28]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	2240      	movs	r2, #64	@ 0x40
 8001f08:	4393      	bics	r3, r2
 8001f0a:	0019      	movs	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	695a      	ldr	r2, [r3, #20]
 8001f10:	4b03      	ldr	r3, [pc, #12]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f12:	430a      	orrs	r2, r1
 8001f14:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	0018      	movs	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b006      	add	sp, #24
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40007000 	.word	0x40007000
 8001f28:	fffffcff 	.word	0xfffffcff
 8001f2c:	fffeffff 	.word	0xfffeffff
 8001f30:	00001388 	.word	0x00001388
 8001f34:	efffffff 	.word	0xefffffff
 8001f38:	fffcffff 	.word	0xfffcffff

08001f3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e0a8      	b.n	80020a0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d109      	bne.n	8001f6a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	2382      	movs	r3, #130	@ 0x82
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d009      	beq.n	8001f76 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	61da      	str	r2, [r3, #28]
 8001f68:	e005      	b.n	8001f76 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	225d      	movs	r2, #93	@ 0x5d
 8001f80:	5c9b      	ldrb	r3, [r3, r2]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d107      	bne.n	8001f98 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	225c      	movs	r2, #92	@ 0x5c
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	0018      	movs	r0, r3
 8001f94:	f7fe fbae 	bl	80006f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	225d      	movs	r2, #93	@ 0x5d
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2140      	movs	r1, #64	@ 0x40
 8001fac:	438a      	bics	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	23e0      	movs	r3, #224	@ 0xe0
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d902      	bls.n	8001fc2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	e002      	b.n	8001fc8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001fc2:	2380      	movs	r3, #128	@ 0x80
 8001fc4:	015b      	lsls	r3, r3, #5
 8001fc6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	23f0      	movs	r3, #240	@ 0xf0
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d008      	beq.n	8001fe6 <HAL_SPI_Init+0xaa>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68da      	ldr	r2, [r3, #12]
 8001fd8:	23e0      	movs	r3, #224	@ 0xe0
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d002      	beq.n	8001fe6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	2382      	movs	r3, #130	@ 0x82
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	401a      	ands	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6899      	ldr	r1, [r3, #8]
 8001ff4:	2384      	movs	r3, #132	@ 0x84
 8001ff6:	021b      	lsls	r3, r3, #8
 8001ff8:	400b      	ands	r3, r1
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	2102      	movs	r1, #2
 8002002:	400b      	ands	r3, r1
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	2101      	movs	r1, #1
 800200c:	400b      	ands	r3, r1
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6999      	ldr	r1, [r3, #24]
 8002014:	2380      	movs	r3, #128	@ 0x80
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	400b      	ands	r3, r1
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	2138      	movs	r1, #56	@ 0x38
 8002022:	400b      	ands	r3, r1
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	2180      	movs	r1, #128	@ 0x80
 800202c:	400b      	ands	r3, r1
 800202e:	431a      	orrs	r2, r3
 8002030:	0011      	movs	r1, r2
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002036:	2380      	movs	r3, #128	@ 0x80
 8002038:	019b      	lsls	r3, r3, #6
 800203a:	401a      	ands	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	0c1b      	lsrs	r3, r3, #16
 800204a:	2204      	movs	r2, #4
 800204c:	401a      	ands	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002052:	2110      	movs	r1, #16
 8002054:	400b      	ands	r3, r1
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800205c:	2108      	movs	r1, #8
 800205e:	400b      	ands	r3, r1
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68d9      	ldr	r1, [r3, #12]
 8002066:	23f0      	movs	r3, #240	@ 0xf0
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	400b      	ands	r3, r1
 800206c:	431a      	orrs	r2, r3
 800206e:	0011      	movs	r1, r2
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	2380      	movs	r3, #128	@ 0x80
 8002074:	015b      	lsls	r3, r3, #5
 8002076:	401a      	ands	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	69da      	ldr	r2, [r3, #28]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4907      	ldr	r1, [pc, #28]	@ (80020a8 <HAL_SPI_Init+0x16c>)
 800208c:	400a      	ands	r2, r1
 800208e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	225d      	movs	r2, #93	@ 0x5d
 800209a:	2101      	movs	r1, #1
 800209c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	0018      	movs	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b004      	add	sp, #16
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	fffff7ff 	.word	0xfffff7ff

080020ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e044      	b.n	8002148 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d107      	bne.n	80020d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2278      	movs	r2, #120	@ 0x78
 80020ca:	2100      	movs	r1, #0
 80020cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7fe fbb1 	bl	8000838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2224      	movs	r2, #36	@ 0x24
 80020da:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2101      	movs	r1, #1
 80020e8:	438a      	bics	r2, r1
 80020ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	0018      	movs	r0, r3
 80020f8:	f000 f9b4 	bl	8002464 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	0018      	movs	r0, r3
 8002100:	f000 f828 	bl	8002154 <UART_SetConfig>
 8002104:	0003      	movs	r3, r0
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e01c      	b.n	8002148 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	490d      	ldr	r1, [pc, #52]	@ (8002150 <HAL_UART_Init+0xa4>)
 800211a:	400a      	ands	r2, r1
 800211c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	212a      	movs	r1, #42	@ 0x2a
 800212a:	438a      	bics	r2, r1
 800212c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2101      	movs	r1, #1
 800213a:	430a      	orrs	r2, r1
 800213c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	0018      	movs	r0, r3
 8002142:	f000 fa43 	bl	80025cc <UART_CheckIdleState>
 8002146:	0003      	movs	r3, r0
}
 8002148:	0018      	movs	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	b002      	add	sp, #8
 800214e:	bd80      	pop	{r7, pc}
 8002150:	ffffb7ff 	.word	0xffffb7ff

08002154 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b088      	sub	sp, #32
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800215c:	231e      	movs	r3, #30
 800215e:	18fb      	adds	r3, r7, r3
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	431a      	orrs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	4313      	orrs	r3, r2
 800217a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4aaf      	ldr	r2, [pc, #700]	@ (8002440 <UART_SetConfig+0x2ec>)
 8002184:	4013      	ands	r3, r2
 8002186:	0019      	movs	r1, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	430a      	orrs	r2, r1
 8002190:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	4aaa      	ldr	r2, [pc, #680]	@ (8002444 <UART_SetConfig+0x2f0>)
 800219a:	4013      	ands	r3, r2
 800219c:	0019      	movs	r1, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	4aa1      	ldr	r2, [pc, #644]	@ (8002448 <UART_SetConfig+0x2f4>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	0019      	movs	r1, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a9d      	ldr	r2, [pc, #628]	@ (800244c <UART_SetConfig+0x2f8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d127      	bne.n	800222a <UART_SetConfig+0xd6>
 80021da:	4b9d      	ldr	r3, [pc, #628]	@ (8002450 <UART_SetConfig+0x2fc>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	2203      	movs	r2, #3
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b03      	cmp	r3, #3
 80021e4:	d00d      	beq.n	8002202 <UART_SetConfig+0xae>
 80021e6:	d81b      	bhi.n	8002220 <UART_SetConfig+0xcc>
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d014      	beq.n	8002216 <UART_SetConfig+0xc2>
 80021ec:	d818      	bhi.n	8002220 <UART_SetConfig+0xcc>
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <UART_SetConfig+0xa4>
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d00a      	beq.n	800220c <UART_SetConfig+0xb8>
 80021f6:	e013      	b.n	8002220 <UART_SetConfig+0xcc>
 80021f8:	231f      	movs	r3, #31
 80021fa:	18fb      	adds	r3, r7, r3
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
 8002200:	e065      	b.n	80022ce <UART_SetConfig+0x17a>
 8002202:	231f      	movs	r3, #31
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	2202      	movs	r2, #2
 8002208:	701a      	strb	r2, [r3, #0]
 800220a:	e060      	b.n	80022ce <UART_SetConfig+0x17a>
 800220c:	231f      	movs	r3, #31
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	2204      	movs	r2, #4
 8002212:	701a      	strb	r2, [r3, #0]
 8002214:	e05b      	b.n	80022ce <UART_SetConfig+0x17a>
 8002216:	231f      	movs	r3, #31
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	2208      	movs	r2, #8
 800221c:	701a      	strb	r2, [r3, #0]
 800221e:	e056      	b.n	80022ce <UART_SetConfig+0x17a>
 8002220:	231f      	movs	r3, #31
 8002222:	18fb      	adds	r3, r7, r3
 8002224:	2210      	movs	r2, #16
 8002226:	701a      	strb	r2, [r3, #0]
 8002228:	e051      	b.n	80022ce <UART_SetConfig+0x17a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a89      	ldr	r2, [pc, #548]	@ (8002454 <UART_SetConfig+0x300>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d134      	bne.n	800229e <UART_SetConfig+0x14a>
 8002234:	4b86      	ldr	r3, [pc, #536]	@ (8002450 <UART_SetConfig+0x2fc>)
 8002236:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002238:	23c0      	movs	r3, #192	@ 0xc0
 800223a:	029b      	lsls	r3, r3, #10
 800223c:	4013      	ands	r3, r2
 800223e:	22c0      	movs	r2, #192	@ 0xc0
 8002240:	0292      	lsls	r2, r2, #10
 8002242:	4293      	cmp	r3, r2
 8002244:	d017      	beq.n	8002276 <UART_SetConfig+0x122>
 8002246:	22c0      	movs	r2, #192	@ 0xc0
 8002248:	0292      	lsls	r2, r2, #10
 800224a:	4293      	cmp	r3, r2
 800224c:	d822      	bhi.n	8002294 <UART_SetConfig+0x140>
 800224e:	2280      	movs	r2, #128	@ 0x80
 8002250:	0292      	lsls	r2, r2, #10
 8002252:	4293      	cmp	r3, r2
 8002254:	d019      	beq.n	800228a <UART_SetConfig+0x136>
 8002256:	2280      	movs	r2, #128	@ 0x80
 8002258:	0292      	lsls	r2, r2, #10
 800225a:	4293      	cmp	r3, r2
 800225c:	d81a      	bhi.n	8002294 <UART_SetConfig+0x140>
 800225e:	2b00      	cmp	r3, #0
 8002260:	d004      	beq.n	800226c <UART_SetConfig+0x118>
 8002262:	2280      	movs	r2, #128	@ 0x80
 8002264:	0252      	lsls	r2, r2, #9
 8002266:	4293      	cmp	r3, r2
 8002268:	d00a      	beq.n	8002280 <UART_SetConfig+0x12c>
 800226a:	e013      	b.n	8002294 <UART_SetConfig+0x140>
 800226c:	231f      	movs	r3, #31
 800226e:	18fb      	adds	r3, r7, r3
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]
 8002274:	e02b      	b.n	80022ce <UART_SetConfig+0x17a>
 8002276:	231f      	movs	r3, #31
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	2202      	movs	r2, #2
 800227c:	701a      	strb	r2, [r3, #0]
 800227e:	e026      	b.n	80022ce <UART_SetConfig+0x17a>
 8002280:	231f      	movs	r3, #31
 8002282:	18fb      	adds	r3, r7, r3
 8002284:	2204      	movs	r2, #4
 8002286:	701a      	strb	r2, [r3, #0]
 8002288:	e021      	b.n	80022ce <UART_SetConfig+0x17a>
 800228a:	231f      	movs	r3, #31
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	2208      	movs	r2, #8
 8002290:	701a      	strb	r2, [r3, #0]
 8002292:	e01c      	b.n	80022ce <UART_SetConfig+0x17a>
 8002294:	231f      	movs	r3, #31
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	2210      	movs	r2, #16
 800229a:	701a      	strb	r2, [r3, #0]
 800229c:	e017      	b.n	80022ce <UART_SetConfig+0x17a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a6d      	ldr	r2, [pc, #436]	@ (8002458 <UART_SetConfig+0x304>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d104      	bne.n	80022b2 <UART_SetConfig+0x15e>
 80022a8:	231f      	movs	r3, #31
 80022aa:	18fb      	adds	r3, r7, r3
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
 80022b0:	e00d      	b.n	80022ce <UART_SetConfig+0x17a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a69      	ldr	r2, [pc, #420]	@ (800245c <UART_SetConfig+0x308>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d104      	bne.n	80022c6 <UART_SetConfig+0x172>
 80022bc:	231f      	movs	r3, #31
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
 80022c4:	e003      	b.n	80022ce <UART_SetConfig+0x17a>
 80022c6:	231f      	movs	r3, #31
 80022c8:	18fb      	adds	r3, r7, r3
 80022ca:	2210      	movs	r2, #16
 80022cc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69da      	ldr	r2, [r3, #28]
 80022d2:	2380      	movs	r3, #128	@ 0x80
 80022d4:	021b      	lsls	r3, r3, #8
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d15c      	bne.n	8002394 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 80022da:	231f      	movs	r3, #31
 80022dc:	18fb      	adds	r3, r7, r3
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d015      	beq.n	8002310 <UART_SetConfig+0x1bc>
 80022e4:	dc18      	bgt.n	8002318 <UART_SetConfig+0x1c4>
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d00d      	beq.n	8002306 <UART_SetConfig+0x1b2>
 80022ea:	dc15      	bgt.n	8002318 <UART_SetConfig+0x1c4>
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d002      	beq.n	80022f6 <UART_SetConfig+0x1a2>
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d005      	beq.n	8002300 <UART_SetConfig+0x1ac>
 80022f4:	e010      	b.n	8002318 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022f6:	f7ff fd0d 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 80022fa:	0003      	movs	r3, r0
 80022fc:	61bb      	str	r3, [r7, #24]
        break;
 80022fe:	e012      	b.n	8002326 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002300:	4b57      	ldr	r3, [pc, #348]	@ (8002460 <UART_SetConfig+0x30c>)
 8002302:	61bb      	str	r3, [r7, #24]
        break;
 8002304:	e00f      	b.n	8002326 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002306:	f7ff fc89 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 800230a:	0003      	movs	r3, r0
 800230c:	61bb      	str	r3, [r7, #24]
        break;
 800230e:	e00a      	b.n	8002326 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002310:	2380      	movs	r3, #128	@ 0x80
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	61bb      	str	r3, [r7, #24]
        break;
 8002316:	e006      	b.n	8002326 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800231c:	231e      	movs	r3, #30
 800231e:	18fb      	adds	r3, r7, r3
 8002320:	2201      	movs	r2, #1
 8002322:	701a      	strb	r2, [r3, #0]
        break;
 8002324:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d100      	bne.n	800232e <UART_SetConfig+0x1da>
 800232c:	e07a      	b.n	8002424 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	005a      	lsls	r2, r3, #1
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	085b      	lsrs	r3, r3, #1
 8002338:	18d2      	adds	r2, r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	0019      	movs	r1, r3
 8002340:	0010      	movs	r0, r2
 8002342:	f7fd fee1 	bl	8000108 <__udivsi3>
 8002346:	0003      	movs	r3, r0
 8002348:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	2b0f      	cmp	r3, #15
 800234e:	d91c      	bls.n	800238a <UART_SetConfig+0x236>
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	2380      	movs	r3, #128	@ 0x80
 8002354:	025b      	lsls	r3, r3, #9
 8002356:	429a      	cmp	r2, r3
 8002358:	d217      	bcs.n	800238a <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	b29a      	uxth	r2, r3
 800235e:	200e      	movs	r0, #14
 8002360:	183b      	adds	r3, r7, r0
 8002362:	210f      	movs	r1, #15
 8002364:	438a      	bics	r2, r1
 8002366:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	085b      	lsrs	r3, r3, #1
 800236c:	b29b      	uxth	r3, r3
 800236e:	2207      	movs	r2, #7
 8002370:	4013      	ands	r3, r2
 8002372:	b299      	uxth	r1, r3
 8002374:	183b      	adds	r3, r7, r0
 8002376:	183a      	adds	r2, r7, r0
 8002378:	8812      	ldrh	r2, [r2, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	183a      	adds	r2, r7, r0
 8002384:	8812      	ldrh	r2, [r2, #0]
 8002386:	60da      	str	r2, [r3, #12]
 8002388:	e04c      	b.n	8002424 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800238a:	231e      	movs	r3, #30
 800238c:	18fb      	adds	r3, r7, r3
 800238e:	2201      	movs	r2, #1
 8002390:	701a      	strb	r2, [r3, #0]
 8002392:	e047      	b.n	8002424 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002394:	231f      	movs	r3, #31
 8002396:	18fb      	adds	r3, r7, r3
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b08      	cmp	r3, #8
 800239c:	d015      	beq.n	80023ca <UART_SetConfig+0x276>
 800239e:	dc18      	bgt.n	80023d2 <UART_SetConfig+0x27e>
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d00d      	beq.n	80023c0 <UART_SetConfig+0x26c>
 80023a4:	dc15      	bgt.n	80023d2 <UART_SetConfig+0x27e>
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <UART_SetConfig+0x25c>
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d005      	beq.n	80023ba <UART_SetConfig+0x266>
 80023ae:	e010      	b.n	80023d2 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023b0:	f7ff fcb0 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 80023b4:	0003      	movs	r3, r0
 80023b6:	61bb      	str	r3, [r7, #24]
        break;
 80023b8:	e012      	b.n	80023e0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023ba:	4b29      	ldr	r3, [pc, #164]	@ (8002460 <UART_SetConfig+0x30c>)
 80023bc:	61bb      	str	r3, [r7, #24]
        break;
 80023be:	e00f      	b.n	80023e0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023c0:	f7ff fc2c 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 80023c4:	0003      	movs	r3, r0
 80023c6:	61bb      	str	r3, [r7, #24]
        break;
 80023c8:	e00a      	b.n	80023e0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023ca:	2380      	movs	r3, #128	@ 0x80
 80023cc:	021b      	lsls	r3, r3, #8
 80023ce:	61bb      	str	r3, [r7, #24]
        break;
 80023d0:	e006      	b.n	80023e0 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80023d6:	231e      	movs	r3, #30
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	2201      	movs	r2, #1
 80023dc:	701a      	strb	r2, [r3, #0]
        break;
 80023de:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d01e      	beq.n	8002424 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	085a      	lsrs	r2, r3, #1
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	18d2      	adds	r2, r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	0019      	movs	r1, r3
 80023f6:	0010      	movs	r0, r2
 80023f8:	f7fd fe86 	bl	8000108 <__udivsi3>
 80023fc:	0003      	movs	r3, r0
 80023fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	2b0f      	cmp	r3, #15
 8002404:	d90a      	bls.n	800241c <UART_SetConfig+0x2c8>
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	2380      	movs	r3, #128	@ 0x80
 800240a:	025b      	lsls	r3, r3, #9
 800240c:	429a      	cmp	r2, r3
 800240e:	d205      	bcs.n	800241c <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	b29a      	uxth	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	e003      	b.n	8002424 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800241c:	231e      	movs	r3, #30
 800241e:	18fb      	adds	r3, r7, r3
 8002420:	2201      	movs	r2, #1
 8002422:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002430:	231e      	movs	r3, #30
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	781b      	ldrb	r3, [r3, #0]
}
 8002436:	0018      	movs	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	b008      	add	sp, #32
 800243c:	bd80      	pop	{r7, pc}
 800243e:	46c0      	nop			@ (mov r8, r8)
 8002440:	efff69f3 	.word	0xefff69f3
 8002444:	ffffcfff 	.word	0xffffcfff
 8002448:	fffff4ff 	.word	0xfffff4ff
 800244c:	40013800 	.word	0x40013800
 8002450:	40021000 	.word	0x40021000
 8002454:	40004400 	.word	0x40004400
 8002458:	40004800 	.word	0x40004800
 800245c:	40004c00 	.word	0x40004c00
 8002460:	007a1200 	.word	0x007a1200

08002464 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002470:	2208      	movs	r2, #8
 8002472:	4013      	ands	r3, r2
 8002474:	d00b      	beq.n	800248e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	4a4a      	ldr	r2, [pc, #296]	@ (80025a8 <UART_AdvFeatureConfig+0x144>)
 800247e:	4013      	ands	r3, r2
 8002480:	0019      	movs	r1, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002492:	2201      	movs	r2, #1
 8002494:	4013      	ands	r3, r2
 8002496:	d00b      	beq.n	80024b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4a43      	ldr	r2, [pc, #268]	@ (80025ac <UART_AdvFeatureConfig+0x148>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	0019      	movs	r1, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b4:	2202      	movs	r2, #2
 80024b6:	4013      	ands	r3, r2
 80024b8:	d00b      	beq.n	80024d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	4a3b      	ldr	r2, [pc, #236]	@ (80025b0 <UART_AdvFeatureConfig+0x14c>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	0019      	movs	r1, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d6:	2204      	movs	r2, #4
 80024d8:	4013      	ands	r3, r2
 80024da:	d00b      	beq.n	80024f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4a34      	ldr	r2, [pc, #208]	@ (80025b4 <UART_AdvFeatureConfig+0x150>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	0019      	movs	r1, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f8:	2210      	movs	r2, #16
 80024fa:	4013      	ands	r3, r2
 80024fc:	d00b      	beq.n	8002516 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4a2c      	ldr	r2, [pc, #176]	@ (80025b8 <UART_AdvFeatureConfig+0x154>)
 8002506:	4013      	ands	r3, r2
 8002508:	0019      	movs	r1, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251a:	2220      	movs	r2, #32
 800251c:	4013      	ands	r3, r2
 800251e:	d00b      	beq.n	8002538 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	4a25      	ldr	r2, [pc, #148]	@ (80025bc <UART_AdvFeatureConfig+0x158>)
 8002528:	4013      	ands	r3, r2
 800252a:	0019      	movs	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253c:	2240      	movs	r2, #64	@ 0x40
 800253e:	4013      	ands	r3, r2
 8002540:	d01d      	beq.n	800257e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4a1d      	ldr	r2, [pc, #116]	@ (80025c0 <UART_AdvFeatureConfig+0x15c>)
 800254a:	4013      	ands	r3, r2
 800254c:	0019      	movs	r1, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800255e:	2380      	movs	r3, #128	@ 0x80
 8002560:	035b      	lsls	r3, r3, #13
 8002562:	429a      	cmp	r2, r3
 8002564:	d10b      	bne.n	800257e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	4a15      	ldr	r2, [pc, #84]	@ (80025c4 <UART_AdvFeatureConfig+0x160>)
 800256e:	4013      	ands	r3, r2
 8002570:	0019      	movs	r1, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002582:	2280      	movs	r2, #128	@ 0x80
 8002584:	4013      	ands	r3, r2
 8002586:	d00b      	beq.n	80025a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4a0e      	ldr	r2, [pc, #56]	@ (80025c8 <UART_AdvFeatureConfig+0x164>)
 8002590:	4013      	ands	r3, r2
 8002592:	0019      	movs	r1, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	605a      	str	r2, [r3, #4]
  }
}
 80025a0:	46c0      	nop			@ (mov r8, r8)
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b002      	add	sp, #8
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	ffff7fff 	.word	0xffff7fff
 80025ac:	fffdffff 	.word	0xfffdffff
 80025b0:	fffeffff 	.word	0xfffeffff
 80025b4:	fffbffff 	.word	0xfffbffff
 80025b8:	ffffefff 	.word	0xffffefff
 80025bc:	ffffdfff 	.word	0xffffdfff
 80025c0:	ffefffff 	.word	0xffefffff
 80025c4:	ff9fffff 	.word	0xff9fffff
 80025c8:	fff7ffff 	.word	0xfff7ffff

080025cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b092      	sub	sp, #72	@ 0x48
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2284      	movs	r2, #132	@ 0x84
 80025d8:	2100      	movs	r1, #0
 80025da:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80025dc:	f7fe fa1c 	bl	8000a18 <HAL_GetTick>
 80025e0:	0003      	movs	r3, r0
 80025e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2208      	movs	r2, #8
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b08      	cmp	r3, #8
 80025f0:	d12c      	bne.n	800264c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025f4:	2280      	movs	r2, #128	@ 0x80
 80025f6:	0391      	lsls	r1, r2, #14
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	4a46      	ldr	r2, [pc, #280]	@ (8002714 <UART_CheckIdleState+0x148>)
 80025fc:	9200      	str	r2, [sp, #0]
 80025fe:	2200      	movs	r2, #0
 8002600:	f000 f88c 	bl	800271c <UART_WaitOnFlagUntilTimeout>
 8002604:	1e03      	subs	r3, r0, #0
 8002606:	d021      	beq.n	800264c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002608:	f3ef 8310 	mrs	r3, PRIMASK
 800260c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002610:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002612:	2301      	movs	r3, #1
 8002614:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002618:	f383 8810 	msr	PRIMASK, r3
}
 800261c:	46c0      	nop			@ (mov r8, r8)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2180      	movs	r1, #128	@ 0x80
 800262a:	438a      	bics	r2, r1
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002630:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002634:	f383 8810 	msr	PRIMASK, r3
}
 8002638:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2220      	movs	r2, #32
 800263e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2278      	movs	r2, #120	@ 0x78
 8002644:	2100      	movs	r1, #0
 8002646:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e05f      	b.n	800270c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2204      	movs	r2, #4
 8002654:	4013      	ands	r3, r2
 8002656:	2b04      	cmp	r3, #4
 8002658:	d146      	bne.n	80026e8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800265a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800265c:	2280      	movs	r2, #128	@ 0x80
 800265e:	03d1      	lsls	r1, r2, #15
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	4a2c      	ldr	r2, [pc, #176]	@ (8002714 <UART_CheckIdleState+0x148>)
 8002664:	9200      	str	r2, [sp, #0]
 8002666:	2200      	movs	r2, #0
 8002668:	f000 f858 	bl	800271c <UART_WaitOnFlagUntilTimeout>
 800266c:	1e03      	subs	r3, r0, #0
 800266e:	d03b      	beq.n	80026e8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002670:	f3ef 8310 	mrs	r3, PRIMASK
 8002674:	60fb      	str	r3, [r7, #12]
  return(result);
 8002676:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002678:	637b      	str	r3, [r7, #52]	@ 0x34
 800267a:	2301      	movs	r3, #1
 800267c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	f383 8810 	msr	PRIMASK, r3
}
 8002684:	46c0      	nop			@ (mov r8, r8)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4921      	ldr	r1, [pc, #132]	@ (8002718 <UART_CheckIdleState+0x14c>)
 8002692:	400a      	ands	r2, r1
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002698:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f383 8810 	msr	PRIMASK, r3
}
 80026a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026a2:	f3ef 8310 	mrs	r3, PRIMASK
 80026a6:	61bb      	str	r3, [r7, #24]
  return(result);
 80026a8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80026ac:	2301      	movs	r3, #1
 80026ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f383 8810 	msr	PRIMASK, r3
}
 80026b6:	46c0      	nop			@ (mov r8, r8)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2101      	movs	r1, #1
 80026c4:	438a      	bics	r2, r1
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	f383 8810 	msr	PRIMASK, r3
}
 80026d2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2280      	movs	r2, #128	@ 0x80
 80026d8:	2120      	movs	r1, #32
 80026da:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2278      	movs	r2, #120	@ 0x78
 80026e0:	2100      	movs	r1, #0
 80026e2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e011      	b.n	800270c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2220      	movs	r2, #32
 80026ec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2280      	movs	r2, #128	@ 0x80
 80026f2:	2120      	movs	r1, #32
 80026f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2278      	movs	r2, #120	@ 0x78
 8002706:	2100      	movs	r1, #0
 8002708:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	0018      	movs	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	b010      	add	sp, #64	@ 0x40
 8002712:	bd80      	pop	{r7, pc}
 8002714:	01ffffff 	.word	0x01ffffff
 8002718:	fffffedf 	.word	0xfffffedf

0800271c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	1dfb      	adds	r3, r7, #7
 800272a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800272c:	e051      	b.n	80027d2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	3301      	adds	r3, #1
 8002732:	d04e      	beq.n	80027d2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002734:	f7fe f970 	bl	8000a18 <HAL_GetTick>
 8002738:	0002      	movs	r2, r0
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	429a      	cmp	r2, r3
 8002742:	d302      	bcc.n	800274a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e051      	b.n	80027f2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2204      	movs	r2, #4
 8002756:	4013      	ands	r3, r2
 8002758:	d03b      	beq.n	80027d2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2b80      	cmp	r3, #128	@ 0x80
 800275e:	d038      	beq.n	80027d2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b40      	cmp	r3, #64	@ 0x40
 8002764:	d035      	beq.n	80027d2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	2208      	movs	r2, #8
 800276e:	4013      	ands	r3, r2
 8002770:	2b08      	cmp	r3, #8
 8002772:	d111      	bne.n	8002798 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2208      	movs	r2, #8
 800277a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	0018      	movs	r0, r3
 8002780:	f000 f83c 	bl	80027fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2284      	movs	r2, #132	@ 0x84
 8002788:	2108      	movs	r1, #8
 800278a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2278      	movs	r2, #120	@ 0x78
 8002790:	2100      	movs	r1, #0
 8002792:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e02c      	b.n	80027f2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	69da      	ldr	r2, [r3, #28]
 800279e:	2380      	movs	r3, #128	@ 0x80
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	401a      	ands	r2, r3
 80027a4:	2380      	movs	r3, #128	@ 0x80
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d112      	bne.n	80027d2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2280      	movs	r2, #128	@ 0x80
 80027b2:	0112      	lsls	r2, r2, #4
 80027b4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	0018      	movs	r0, r3
 80027ba:	f000 f81f 	bl	80027fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2284      	movs	r2, #132	@ 0x84
 80027c2:	2120      	movs	r1, #32
 80027c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2278      	movs	r2, #120	@ 0x78
 80027ca:	2100      	movs	r1, #0
 80027cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e00f      	b.n	80027f2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	4013      	ands	r3, r2
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	425a      	negs	r2, r3
 80027e2:	4153      	adcs	r3, r2
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	001a      	movs	r2, r3
 80027e8:	1dfb      	adds	r3, r7, #7
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d09e      	beq.n	800272e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	0018      	movs	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	b004      	add	sp, #16
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08e      	sub	sp, #56	@ 0x38
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002804:	f3ef 8310 	mrs	r3, PRIMASK
 8002808:	617b      	str	r3, [r7, #20]
  return(result);
 800280a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800280c:	637b      	str	r3, [r7, #52]	@ 0x34
 800280e:	2301      	movs	r3, #1
 8002810:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	f383 8810 	msr	PRIMASK, r3
}
 8002818:	46c0      	nop			@ (mov r8, r8)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4926      	ldr	r1, [pc, #152]	@ (80028c0 <UART_EndRxTransfer+0xc4>)
 8002826:	400a      	ands	r2, r1
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800282c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f383 8810 	msr	PRIMASK, r3
}
 8002834:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002836:	f3ef 8310 	mrs	r3, PRIMASK
 800283a:	623b      	str	r3, [r7, #32]
  return(result);
 800283c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800283e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002840:	2301      	movs	r3, #1
 8002842:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002846:	f383 8810 	msr	PRIMASK, r3
}
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2101      	movs	r1, #1
 8002858:	438a      	bics	r2, r1
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800285e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002862:	f383 8810 	msr	PRIMASK, r3
}
 8002866:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800286c:	2b01      	cmp	r3, #1
 800286e:	d118      	bne.n	80028a2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002870:	f3ef 8310 	mrs	r3, PRIMASK
 8002874:	60bb      	str	r3, [r7, #8]
  return(result);
 8002876:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002878:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800287a:	2301      	movs	r3, #1
 800287c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f383 8810 	msr	PRIMASK, r3
}
 8002884:	46c0      	nop			@ (mov r8, r8)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2110      	movs	r1, #16
 8002892:	438a      	bics	r2, r1
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002898:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f383 8810 	msr	PRIMASK, r3
}
 80028a0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2280      	movs	r2, #128	@ 0x80
 80028a6:	2120      	movs	r1, #32
 80028a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80028b6:	46c0      	nop			@ (mov r8, r8)
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b00e      	add	sp, #56	@ 0x38
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	46c0      	nop			@ (mov r8, r8)
 80028c0:	fffffedf 	.word	0xfffffedf

080028c4 <memset>:
 80028c4:	0003      	movs	r3, r0
 80028c6:	1882      	adds	r2, r0, r2
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d100      	bne.n	80028ce <memset+0xa>
 80028cc:	4770      	bx	lr
 80028ce:	7019      	strb	r1, [r3, #0]
 80028d0:	3301      	adds	r3, #1
 80028d2:	e7f9      	b.n	80028c8 <memset+0x4>

080028d4 <__libc_init_array>:
 80028d4:	b570      	push	{r4, r5, r6, lr}
 80028d6:	2600      	movs	r6, #0
 80028d8:	4c0c      	ldr	r4, [pc, #48]	@ (800290c <__libc_init_array+0x38>)
 80028da:	4d0d      	ldr	r5, [pc, #52]	@ (8002910 <__libc_init_array+0x3c>)
 80028dc:	1b64      	subs	r4, r4, r5
 80028de:	10a4      	asrs	r4, r4, #2
 80028e0:	42a6      	cmp	r6, r4
 80028e2:	d109      	bne.n	80028f8 <__libc_init_array+0x24>
 80028e4:	2600      	movs	r6, #0
 80028e6:	f000 f819 	bl	800291c <_init>
 80028ea:	4c0a      	ldr	r4, [pc, #40]	@ (8002914 <__libc_init_array+0x40>)
 80028ec:	4d0a      	ldr	r5, [pc, #40]	@ (8002918 <__libc_init_array+0x44>)
 80028ee:	1b64      	subs	r4, r4, r5
 80028f0:	10a4      	asrs	r4, r4, #2
 80028f2:	42a6      	cmp	r6, r4
 80028f4:	d105      	bne.n	8002902 <__libc_init_array+0x2e>
 80028f6:	bd70      	pop	{r4, r5, r6, pc}
 80028f8:	00b3      	lsls	r3, r6, #2
 80028fa:	58eb      	ldr	r3, [r5, r3]
 80028fc:	4798      	blx	r3
 80028fe:	3601      	adds	r6, #1
 8002900:	e7ee      	b.n	80028e0 <__libc_init_array+0xc>
 8002902:	00b3      	lsls	r3, r6, #2
 8002904:	58eb      	ldr	r3, [r5, r3]
 8002906:	4798      	blx	r3
 8002908:	3601      	adds	r6, #1
 800290a:	e7f2      	b.n	80028f2 <__libc_init_array+0x1e>
 800290c:	0800296c 	.word	0x0800296c
 8002910:	0800296c 	.word	0x0800296c
 8002914:	08002970 	.word	0x08002970
 8002918:	0800296c 	.word	0x0800296c

0800291c <_init>:
 800291c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291e:	46c0      	nop			@ (mov r8, r8)
 8002920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002922:	bc08      	pop	{r3}
 8002924:	469e      	mov	lr, r3
 8002926:	4770      	bx	lr

08002928 <_fini>:
 8002928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292a:	46c0      	nop			@ (mov r8, r8)
 800292c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800292e:	bc08      	pop	{r3}
 8002930:	469e      	mov	lr, r3
 8002932:	4770      	bx	lr
